- title: __initial_text__
  contents:
  - "           7283, 7550                                            B. Volz\n  \
    \       Dynamic Host Configuration Protocol for IPv6 (DHCPv6)\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the Dynamic Host Configuration Protocol\
    \ for\n   IPv6 (DHCPv6): an extensible mechanism for configuring nodes with\n\
    \   network configuration parameters, IP addresses, and prefixes.\n   Parameters\
    \ can be provided statelessly, or in combination with\n   stateful assignment\
    \ of one or more IPv6 addresses and/or IPv6\n   prefixes.  DHCPv6 can operate\
    \ either in place of or in addition to\n   stateless address autoconfiguration\
    \ (SLAAC).\n   This document updates the text from RFC 3315 (the original DHCPv6\n\
    \   specification) and incorporates prefix delegation (RFC 3633),\n   stateless\
    \ DHCPv6 (RFC 3736), an option to specify an upper bound for\n   how long a client\
    \ should wait before refreshing information (RFC\n   4242), a mechanism for throttling\
    \ DHCPv6 clients when DHCPv6 service\n   is not available (RFC 7083), and relay\
    \ agent handling of unknown\n   messages (RFC 7283).  In addition, this document\
    \ clarifies the\n   interactions between models of operation (RFC 7550).  As such,\
    \ this\n   document obsoletes RFC 3315, RFC 3633, RFC 3736, RFC 4242, RFC 7083,\n\
    \   RFC 7283, and RFC 7550.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8415.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................6\n\
    \      1.1. Relationship to Previous DHCPv6 Standards ..................7\n  \
    \    1.2. Relationship to DHCPv4 .....................................8\n   2.\
    \ Requirements ....................................................8\n   3. Background\
    \ ......................................................8\n   4. Terminology .....................................................9\n\
    \      4.1. IPv6 Terminology ...........................................9\n  \
    \    4.2. DHCP Terminology ..........................................11\n   5.\
    \ Client/Server Exchanges ........................................16\n      5.1.\
    \ Client/Server Exchanges Involving Two Messages ............16\n      5.2. Client/Server\
    \ Exchanges Involving Four Messages ...........17\n      5.3. Server/Client Exchanges\
    \ ...................................18\n   6. Operational Models .............................................18\n\
    \      6.1. Stateless DHCP ............................................18\n  \
    \    6.2. DHCP for Non-temporary Address Assignment .................19\n    \
    \  6.3. DHCP for Prefix Delegation ................................19\n      6.4.\
    \ DHCP for Customer Edge Routers ............................22\n      6.5. DHCP\
    \ for Temporary Addresses ..............................22\n      6.6. Multiple\
    \ Addresses and Prefixes ...........................22\n   7. DHCP Constants .................................................23\n\
    \      7.1. Multicast Addresses .......................................23\n  \
    \    7.2. UDP Ports .................................................24\n    \
    \  7.3. DHCP Message Types ........................................24\n      7.4.\
    \ DHCP Option Codes .........................................26\n      7.5. Status\
    \ Codes ..............................................26\n      7.6. Transmission\
    \ and Retransmission Parameters ................27\n      7.7. Representation\
    \ of Time Values and \"Infinity\" as a\n           Time Value ................................................28\n\
    \   8. Client/Server Message Formats ..................................29\n  \
    \ 9. Relay Agent/Server Message Formats .............................30\n    \
    \  9.1. Relay-forward Message .....................................31\n      9.2.\
    \ Relay-reply Message .......................................31\n   10. Representation\
    \ and Use of Domain Names ........................32\n   11. DHCP Unique Identifier\
    \ (DUID) .................................32\n      11.1. DUID Contents ............................................33\n\
    \      11.2. DUID Based on Link-Layer Address Plus Time (DUID-LLT) ....33\n  \
    \    11.3. DUID Assigned by Vendor Based on Enterprise\n            Number (DUID-EN)\
    \ .........................................35\n      11.4. DUID Based on Link-Layer\
    \ Address (DUID-LL) ...............36\n      11.5. DUID Based on Universally Unique\
    \ Identifier (DUID-UUID) ..37\n   12. Identity Association ..........................................37\n\
    \      12.1. Identity Associations for Address Assignment .............38\n  \
    \    12.2. Identity Associations for Prefix Delegation ..............38\n   13.\
    \ Assignment to an IA ...........................................39\n      13.1.\
    \ Selecting Addresses for Assignment to an IA_NA ...........39\n      13.2. Assignment\
    \ of Temporary Addresses ........................40\n      13.3. Assignment of\
    \ Prefixes for IA_PD .........................41\n   14. Transmission of Messages\
    \ by a Client ..........................41\n      14.1. Rate Limiting ............................................41\n\
    \      14.2. Client Behavior when T1 and/or T2 Are 0 ..................42\n  \
    \ 15. Reliability of Client-Initiated Message Exchanges .............43\n   16.\
    \ Message Validation ............................................45\n      16.1.\
    \ Use of Transaction IDs ...................................45\n      16.2. Solicit\
    \ Message ..........................................46\n      16.3. Advertise\
    \ Message ........................................46\n      16.4. Request Message\
    \ ..........................................46\n      16.5. Confirm Message ..........................................47\n\
    \      16.6. Renew Message ............................................47\n  \
    \    16.7. Rebind Message ...........................................47\n    \
    \  16.8. Decline Message ..........................................47\n      16.9.\
    \ Release Message ..........................................48\n      16.10. Reply\
    \ Message ...........................................48\n      16.11. Reconfigure\
    \ Message .....................................48\n      16.12. Information-request\
    \ Message .............................49\n      16.13. Relay-forward Message\
    \ ...................................49\n      16.14. Relay-reply Message .....................................49\n\
    \   17. Client Source Address and Interface Selection .................49\n  \
    \    17.1. Source Address and Interface Selection for\n            Address Assignment\
    \ .......................................49\n      17.2. Source Address and Interface\
    \ Selection for Prefix\n            Delegation ...............................................50\n\
    \   18. DHCP Configuration Exchanges ..................................50\n  \
    \    18.1. A Single Exchange for Multiple IA Options ................53\n    \
    \  18.2. Client Behavior ..........................................53\n      \
    \     18.2.1. Creation and Transmission of Solicit Messages .....55\n        \
    \   18.2.2. Creation and Transmission of Request Messages .....57\n          \
    \ 18.2.3. Creation and Transmission of Confirm Messages .....59\n           18.2.4.\
    \ Creation and Transmission of Renew Messages .......60\n           18.2.5. Creation\
    \ and Transmission of Rebind Messages ......62\n           18.2.6. Creation and\
    \ Transmission of\n                   Information-request Messages ......................63\n\
    \           18.2.7. Creation and Transmission of Release Messages .....64\n  \
    \         18.2.8. Creation and Transmission of Decline Messages .....65\n    \
    \       18.2.9. Receipt of Advertise Messages .....................67\n      \
    \     18.2.10. Receipt of Reply Messages ........................68\n        \
    \          18.2.10.1. Reply for Solicit (with Rapid\n                        \
    \     Commit), Request, Renew, or Rebind ......69\n                  18.2.10.2.\
    \ Reply for Release and Decline ...........72\n                  18.2.10.3. Reply\
    \ for Confirm .......................72\n                  18.2.10.4. Reply for\
    \ Information-request ...........72\n           18.2.11. Receipt of Reconfigure\
    \ Messages ..................72\n           18.2.12. Refreshing Configuration\
    \ Information .............73\n      18.3. Server Behavior ..........................................74\n\
    \           18.3.1. Receipt of Solicit Messages .......................75\n  \
    \         18.3.2. Receipt of Request Messages .......................77\n    \
    \       18.3.3. Receipt of Confirm Messages .......................79\n      \
    \     18.3.4. Receipt of Renew Messages .........................79\n        \
    \   18.3.5. Receipt of Rebind Messages ........................81\n          \
    \ 18.3.6. Receipt of Information-request Messages ...........83\n           18.3.7.\
    \ Receipt of Release Messages .......................84\n           18.3.8. Receipt\
    \ of Decline Messages .......................85\n           18.3.9. Creation of\
    \ Advertise Messages ....................85\n           18.3.10. Transmission\
    \ of Advertise and Reply Messages .....87\n           18.3.11. Creation and Transmission\
    \ of Reconfigure\n                    Messages .........................................87\n\
    \      18.4. Reception of Unicast Messages ............................88\n  \
    \ 19. Relay Agent Behavior ..........................................89\n    \
    \  19.1. Relaying a Client Message or a Relay-forward Message .....89\n      \
    \     19.1.1. Relaying a Message from a Client ..................90\n        \
    \   19.1.2. Relaying a Message from a Relay Agent .............90\n          \
    \ 19.1.3. Relay Agent Behavior with Prefix Delegation .......91\n      19.2. Relaying\
    \ a Relay-reply Message ...........................91\n      19.3. Construction\
    \ of Relay-reply Messages .....................91\n      19.4. Interaction between\
    \ Relay Agents and Servers .............92\n   20. Authentication of DHCP Messages\
    \ ...............................93\n      20.1. Security of Messages Sent between\
    \ Servers and\n            Relay Agents .............................................94\n\
    \      20.2. Summary of DHCP Authentication ...........................94\n  \
    \    20.3. Replay Detection .........................................94\n    \
    \  20.4. Reconfiguration Key Authentication Protocol (RKAP) .......95\n      \
    \     20.4.1. Use of the Authentication Option in RKAP ..........96\n        \
    \   20.4.2. Server Considerations for RKAP ....................96\n          \
    \ 20.4.3. Client Considerations for RKAP ....................97\n   21. DHCP Options\
    \ ..................................................97\n      21.1. Format of\
    \ DHCP Options ...................................98\n      21.2. Client Identifier\
    \ Option .................................99\n      21.3. Server Identifier Option\
    \ .................................99\n      21.4. Identity Association for Non-temporary\
    \ Addresses\n            Option ..................................................100\n\
    \      21.5. Identity Association for Temporary Addresses Option .....102\n  \
    \    21.6. IA Address Option .......................................104\n    \
    \  21.7. Option Request Option ...................................106\n      21.8.\
    \ Preference Option .......................................108\n      21.9. Elapsed\
    \ Time Option .....................................108\n      21.10. Relay Message\
    \ Option ...................................109\n      21.11. Authentication Option\
    \ ..................................110\n      21.12. Server Unicast Option ..................................111\n\
    \      21.13. Status Code Option .....................................112\n  \
    \    21.14. Rapid Commit Option ....................................114\n    \
    \  21.15. User Class Option ......................................115\n      21.16.\
    \ Vendor Class Option ....................................116\n      21.17. Vendor-specific\
    \ Information Option .....................117\n      21.18. Interface-Id Option\
    \ ....................................119\n      21.19. Reconfigure Message Option\
    \ .............................121\n      21.20. Reconfigure Accept Option ..............................121\n\
    \      21.21. Identity Association for Prefix Delegation Option ......122\n  \
    \    21.22. IA Prefix Option .......................................124\n    \
    \  21.23. Information Refresh Time Option ........................126\n      21.24.\
    \ SOL_MAX_RT Option ......................................127\n      21.25. INF_MAX_RT\
    \ Option ......................................128\n   22. Security Considerations\
    \ ......................................130\n   23. Privacy Considerations .......................................133\n\
    \   24. IANA Considerations ..........................................133\n  \
    \ 25. Obsoleted Mechanisms .........................................138\n   26.\
    \ References ...................................................139\n      26.1.\
    \ Normative References ....................................139\n      26.2. Informative\
    \ References ..................................140\n   Appendix A. Summary of\
    \ Changes ...................................146\n   Appendix B. Appearance of\
    \ Options in Message Types ...............149\n   Appendix C. Appearance of Options\
    \ in the \"options\" Field of DHCP\n               Options ..............................................151\n\
    \   Acknowledgments ..................................................152\n  \
    \ Authors' Addresses ...............................................153\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes DHCP for IPv6 (DHCPv6), a client/server\n\
    \   protocol that provides managed configuration of devices.  The basic\n   operation\
    \ of DHCPv6 provides configuration for clients connected to\n   the same link\
    \ as the server.  Relay agent functionality is also\n   defined for enabling communication\
    \ between clients and servers that\n   are not on the same link.\n   DHCPv6 can\
    \ provide a device with addresses assigned by a DHCPv6\n   server and other configuration\
    \ information; this data is carried in\n   options.  DHCPv6 can be extended through\
    \ the definition of new\n   options to carry configuration information not specified\
    \ in this\n   document.\n   DHCPv6 also provides a mechanism for automated delegation\
    \ of IPv6\n   prefixes using DHCPv6, as originally specified in [RFC3633].  Through\n\
    \   this mechanism, a delegating router can delegate prefixes to\n   requesting\
    \ routers.  Use of this mechanism is specified as part of\n   [RFC7084] and by\
    \ [TR-187].\n   DHCP can also be used just to provide other configuration options\n\
    \   (i.e., no addresses or prefixes).  That implies that the server does\n   not\
    \ have to track any state; thus, this mode is called \"stateless\n   DHCPv6\"\
    .  Mechanisms necessary to support stateless DHCPv6 are much\n   smaller than\
    \ mechanisms needed to support stateful DHCPv6.  [RFC3736]\n   was written to\
    \ document just those portions of DHCPv6 needed to\n   support DHCPv6 stateless\
    \ operation.\n   The remainder of this introduction summarizes the relationship\
    \ to the\n   previous DHCPv6 standards (see Section 1.1) and clarifies the stance\n\
    \   with regard to DHCPv4 (see Section 1.2).  Section 5 describes the\n   message\
    \ exchange mechanisms to illustrate DHCP operation rather than\n   provide an\
    \ exhaustive list of all possible interactions, and\n   Section 6 provides an\
    \ overview of common operational models.\n   Section 18 explains client and server\
    \ operation in detail.\n"
- title: 1.1.  Relationship to Previous DHCPv6 Standards
  contents:
  - "1.1.  Relationship to Previous DHCPv6 Standards\n   The initial specification\
    \ of DHCPv6 was defined in [RFC3315], and a\n   number of follow-up documents\
    \ were published over the years:\n   -  [RFC3633] (\"IPv6 Prefix Options for Dynamic\
    \ Host Configuration\n      Protocol (DHCP) version 6\")\n   -  [RFC3736] (\"\
    Stateless Dynamic Host Configuration Protocol (DHCP)\n      Service for IPv6\"\
    )\n   -  [RFC4242] (\"Information Refresh Time Option for Dynamic Host\n     \
    \ Configuration Protocol for IPv6 (DHCPv6)\")\n   -  [RFC7083] (\"Modification\
    \ to Default Values of SOL_MAX_RT and\n      INF_MAX_RT\")\n   -  [RFC7283] (\"\
    Handling Unknown DHCPv6 Messages\")\n   -  [RFC7550] (\"Issues and Recommendations\
    \ with Multiple Stateful\n      DHCPv6 Options\")\n   This document provides a\
    \ unified, corrected, and cleaned-up\n   definition of DHCPv6 that also covers\
    \ all applicable errata filed\n   against older RFCs (see the list in Appendix\
    \ A).  As such, it\n   obsoletes the RFCs listed in the previous paragraph.  Also,\
    \ there are\n   a small number of mechanisms that were obsoleted; see Section\
    \ 25 and\n   Appendix A.\n"
- title: 1.2.  Relationship to DHCPv4
  contents:
  - "1.2.  Relationship to DHCPv4\n   The operational models and relevant configuration\
    \ information for\n   DHCPv4 [RFC2131] [RFC2132] and DHCPv6 are sufficiently different\
    \ that\n   integration between the two services is not included in this\n   document.\
    \  [RFC3315] suggested that future work might be to extend\n   DHCPv6 to carry\
    \ IPv4 address and configuration information.  However,\n   the current consensus\
    \ of the IETF is that DHCPv4 should be used\n   rather than DHCPv6 when conveying\
    \ IPv4 configuration information to\n   nodes.  For IPv6-only networks, [RFC7341]\
    \ describes a transport\n   mechanism to carry DHCPv4 messages using the DHCPv6\
    \ protocol for the\n   dynamic provisioning of IPv4 address and configuration\
    \ information.\n   Merging DHCPv4 and DHCPv6 configuration is out of scope for\
    \ this\n   document.  [RFC4477] discusses some issues and possible strategies\n\
    \   for running DHCPv4 and DHCPv6 services together.  While [RFC4477] is\n   a\
    \ bit dated, it provides a good overview of the issues at hand.\n"
- title: 2.  Requirements
  contents:
  - "2.  Requirements\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\"\
    , \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described\
    \ in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n\
    \   capitals, as shown here.\n   This document also makes use of internal conceptual\
    \ variables to\n   describe protocol behavior and external variables that an\n\
    \   implementation must allow system administrators to change.  The\n   specific\
    \ variable names, how their values change, and how their\n   settings influence\
    \ protocol behavior are provided to demonstrate\n   protocol behavior.  An implementation\
    \ is not required to have them in\n   the exact form described here, as long as\
    \ its external behavior is\n   consistent with that described in this document.\n"
- title: 3.  Background
  contents:
  - "3.  Background\n   [RFC8200] (\"Internet Protocol, Version 6 (IPv6) Specification\"\
    )\n   provides the base architecture and design of IPv6.  In addition to\n   [RFC8200],\
    \ related work in IPv6 that an implementer would be best\n   served to study includes\n\
    \   -  [RFC4291] (\"IP Version 6 Addressing Architecture\")\n   -  [RFC4862] (\"\
    IPv6 Stateless Address Autoconfiguration\")\n   -  [RFC4861] (\"Neighbor Discovery\
    \ for IP version 6 (IPv6)\")\n   These specifications enable DHCP to build upon\
    \ the IPv6 work to\n   provide robust stateful autoconfiguration.\n   [RFC4291]\
    \ defines the address scope that can be used in an IPv6\n   implementation and\
    \ also provides various configuration architecture\n   guidelines for network\
    \ designers of the IPv6 address space.  Two\n   advantages of IPv6 are that support\
    \ for multicast is required and\n   nodes can create link-local addresses during\
    \ initialization.  The\n   availability of these features means that a client\
    \ can use its\n   link-local address and a well-known multicast address to discover\
    \ and\n   communicate with DHCP servers or relay agents on its link.\n   [RFC4862]\
    \ specifies procedures by which a node may autoconfigure\n   addresses based on\
    \ Router Advertisements [RFC4861] and the use of a\n   valid lifetime to support\
    \ renumbering of addresses on the Internet.\n   Compatibility with stateless address\
    \ autoconfiguration is a design\n   requirement of DHCP.\n   IPv6 Neighbor Discovery\
    \ [RFC4861] is the node discovery protocol in\n   IPv6 that replaces and enhances\
    \ functions of ARP [RFC826].  To\n   understand IPv6 and stateless address autoconfiguration,\
    \ it is\n   strongly recommended that implementers understand IPv6 Neighbor\n\
    \   Discovery.\n"
- title: 4.  Terminology
  contents:
  - "4.  Terminology\n   This section defines terminology specific to IPv6 and DHCP\
    \ used in\n   this document.\n"
- title: 4.1.  IPv6 Terminology
  contents:
  - "4.1.  IPv6 Terminology\n   IPv6 terminology from [RFC8200], [RFC4291], and [RFC4862]\
    \ relevant to\n   this specification is included below.\n   address          \
    \         An IP-layer identifier for an interface or\n                       \
    \      a set of interfaces.\n   GUA                       Global unicast address\
    \ (see [RFC4291]).\n   host                      Any node that is not a router.\n\
    \   IP                        Internet Protocol Version 6 (IPv6).  The\n     \
    \                        terms \"IPv4\" and \"IPv6\" are used only in\n      \
    \                       contexts where it is necessary to avoid\n            \
    \                 ambiguity.\n   interface                 A node's attachment\
    \ to a link.\n   link                      A communication facility or medium\
    \ over\n                             which nodes can communicate at the link\n\
    \                             layer, i.e., the layer immediately below\n     \
    \                        IP.  Examples are Ethernet (simple or\n             \
    \                bridged); Point-to-Point Protocol (PPP) and\n               \
    \              PPP over Ethernet (PPPoE) links; and\n                        \
    \     Internet-layer (or higher) \"tunnels\", such\n                         \
    \    as tunnels over IPv4 or IPv6 itself.\n   link-layer identifier     A link-layer\
    \ identifier for an interface --\n                             for example, IEEE\
    \ 802 addresses for\n                             Ethernet or Token Ring network\
    \ interfaces.\n   link-local address        An IPv6 address having a link-only\
    \ scope,\n                             indicated by having the prefix (fe80::/10),\n\
    \                             that can be used to reach neighboring nodes\n  \
    \                           attached to the same link.  Every IPv6\n         \
    \                    interface on which DHCPv6 can reasonably be\n           \
    \                  useful has a link-local address.\n   multicast address    \
    \     An identifier for a set of interfaces\n                             (typically\
    \ belonging to different nodes).\n                             A packet sent to\
    \ a multicast address is\n                             delivered to all interfaces\
    \ identified by\n                             that address.\n   neighbor     \
    \             A node attached to the same link.\n   node                     \
    \ A device that implements IP.\n   packet                    An IP header plus\
    \ payload.\n   prefix                    The initial bits of an address, or a\
    \ set\n                             of IP addresses that share the same\n    \
    \                         initial bits.\n   prefix length             The number\
    \ of bits in a prefix.\n   router                    A node that forwards IP packets\
    \ not\n                             explicitly addressed to itself.\n   ULA  \
    \                     Unique local address (see [RFC4193]).\n   unicast address\
    \           An identifier for a single interface.  A\n                       \
    \      packet sent to a unicast address is\n                             delivered\
    \ to the interface identified by\n                             that address.\n"
- title: 4.2.  DHCP Terminology
  contents:
  - "4.2.  DHCP Terminology\n   Terminology specific to DHCP can be found below.\n\
    \   appropriate to the link   An address is \"appropriate to the link\"\n    \
    \                         when the address is consistent with the\n          \
    \                   DHCP server's knowledge of the network\n                 \
    \            topology, prefix assignment, and address\n                      \
    \       assignment policies.\n   binding                   A binding (or client\
    \ binding) is a group of\n                             server data records containing\
    \ the\n                             information the server has about the\n   \
    \                          addresses or delegated prefixes in an\n           \
    \                  Identity Association (IA) or configuration\n              \
    \               information explicitly assigned to the\n                     \
    \        client.  Configuration information that has\n                       \
    \      been returned to a client through a policy,\n                         \
    \    such as the information returned to all\n                             clients\
    \ on the same link, does not require\n                             a binding.\
    \  A binding containing\n                             information about an IA\
    \ is indexed by the\n                             tuple <DUID, IA-type, IAID>\
    \ (where IA-type\n                             is the type of lease in the IA\
    \ -- for\n                             example, temporary).  A binding containing\n\
    \                             configuration information for a client is\n    \
    \                         indexed by <DUID>.  See below for\n                \
    \             definitions of DUID, IA, and IAID.\n   configuration parameter \
    \  An element of the configuration information\n                             set\
    \ on the server and delivered to the\n                             client using\
    \ DHCP.  Such parameters may be\n                             used to carry information\
    \ to be used by a\n                             node to configure its network\
    \ subsystem and\n                             enable communication on a link or\n\
    \                             internetwork, for example.\n   container option\
    \          An option that encapsulates other options\n                       \
    \      (for example, the IA_NA option (see\n                             Section\
    \ 21.4) may contain IA Address\n                             options (see Section\
    \ 21.6)).\n   delegating router         The router that acts as a DHCP server\
    \ and\n                             responds to requests for delegated\n     \
    \                        prefixes.  This document primarily uses the\n       \
    \                      term \"DHCP server\" or \"server\" when\n             \
    \                discussing the \"delegating router\"\n                      \
    \       functionality of prefix delegation (see\n                            \
    \ Section 1).\n   DHCP                      Dynamic Host Configuration Protocol\
    \ for\n                             IPv6.  The terms \"DHCPv4\" and \"DHCPv6\"\
    \ are\n                             used only in contexts where it is necessary\n\
    \                             to avoid ambiguity.\n   DHCP client            \
    \   Also referred to as \"client\".  A node that\n                           \
    \  initiates requests on a link to obtain\n                             configuration\
    \ parameters from one or more\n                             DHCP servers.  The\
    \ node may act as a\n                             requesting router (see below)\
    \ if it\n                             supports prefix delegation.\n   DHCP domain\
    \               A set of links managed by DHCP and operated\n                \
    \             by a single administrative entity.\n   DHCP relay agent        \
    \  Also referred to as \"relay agent\".  A node\n                            \
    \ that acts as an intermediary to deliver\n                             DHCP messages\
    \ between clients and servers.\n                             In certain configurations,\
    \ there may be\n                             more than one relay agent between\
    \ clients\n                             and servers, so a relay agent may send\
    \ DHCP\n                             messages to another relay agent.\n   DHCP\
    \ server               Also referred to as \"server\".  A node that\n        \
    \                     responds to requests from clients.  It may\n           \
    \                  or may not be on the same link as the\n                   \
    \          client(s).  Depending on its capabilities,\n                      \
    \       if it supports prefix delegation it may\n                            \
    \ also feature the functionality of a\n                             delegating\
    \ router.\n   DUID                      A DHCP Unique Identifier for a DHCP\n\
    \                             participant.  Each DHCP client and server\n    \
    \                         has exactly one DUID.  See Section 11 for\n        \
    \                     details of the ways in which a DUID may be\n           \
    \                  constructed.\n   encapsulated option       A DHCP option that\
    \ is usually only\n                             contained in another option. \
    \ For example,\n                             the IA Address option is contained\
    \ in IA_NA\n                             or IA_TA options (see Section 21.5).\
    \  See\n                             Section 9 of [RFC7227] for a more complete\n\
    \                             definition.\n   IA                        Identity\
    \ Association: a collection of\n                             leases assigned to\
    \ a client.  Each IA has\n                             an associated IAID (see\
    \ below).  A client\n                             may have more than one IA assigned\
    \ to it --\n                             for example, one for each of its\n  \
    \                           interfaces.  Each IA holds one type of\n         \
    \                    lease; for example, an identity association\n           \
    \                  for temporary addresses (IA_TA) holds\n                   \
    \          temporary addresses, and an identity\n                            \
    \ association for prefix delegation (IA_PD)\n                             holds\
    \ delegated prefixes.  Throughout this\n                             document,\
    \ \"IA\" is used to refer to an\n                             identity association\
    \ without identifying\n                             the type of a lease in the\
    \ IA.  At the time\n                             of writing this document, there\
    \ are three\n                             IA types defined: IA_NA, IA_TA, and\
    \ IA_PD.\n                             New IA types may be defined in the future.\n\
    \   IA option(s)              At the time of writing this document, one\n    \
    \                         or more IA_NA, IA_TA, and/or IA_PD options.\n      \
    \                       New IA types may be defined in the future.\n   IAID  \
    \                    Identity Association Identifier: an\n                   \
    \          identifier for an IA, chosen by the client.\n                     \
    \        Each IA has an IAID, which is chosen to be\n                        \
    \     unique among IAIDs for IAs of a specific\n                             type\
    \ that belong to that client.\n   IA_NA                     Identity Association\
    \ for Non-temporary\n                             Addresses: an IA that carries\
    \ assigned\n                             addresses that are not temporary addresses\n\
    \                             (see \"IA_TA\").  See Section 21.4 for\n       \
    \                      details on the IA_NA option.\n   IA_PD                \
    \     Identity Association for Prefix Delegation:\n                          \
    \   an IA that carries delegated prefixes.  See\n                            \
    \ Section 21.21 for details on the IA_PD\n                             option.\n\
    \   IA_TA                     Identity Association for Temporary\n           \
    \                  Addresses: an IA that carries temporary\n                 \
    \            addresses (see [RFC4941]).  See\n                             Section\
    \ 21.5 for details on the IA_TA\n                             option.\n   lease\
    \                     A contract by which the server grants the\n            \
    \                 use of an address or delegated prefix to\n                 \
    \            the client for a specified period of time.\n   message          \
    \         A unit of data carried as the payload of a\n                       \
    \      UDP datagram, exchanged among DHCP servers,\n                         \
    \    relay agents, and clients.\n   Reconfigure key           A key supplied to\
    \ a client by a server.\n                             Used to provide security\
    \ for Reconfigure\n                             messages (see Section 7.3 for\
    \ the list of\n                             available message types).\n   relaying\
    \                  A DHCP relay agent relays DHCP messages\n                 \
    \            between DHCP participants.\n   requesting router         The router\
    \ that acts as a DHCP client and\n                             is requesting prefix(es)\
    \ to be assigned.\n                             This document primarily uses the\
    \ term \"DHCP\n                             client\" or \"client\" when discussing\
    \ the\n                             \"requesting router\" functionality of prefix\n\
    \                             delegation (see Section 1).\n   retransmission \
    \           Another attempt to send the same DHCP\n                          \
    \   message by a client or server, as a result\n                             of\
    \ not receiving a valid response to the\n                             previously\
    \ sent messages.  The\n                             retransmitted message is typically\
    \ modified\n                             prior to sending, as required by the\
    \ DHCP\n                             specifications.  In particular, the client\n\
    \                             updates the value of the Elapsed Time\n        \
    \                     option in the retransmitted message.\n   RKAP          \
    \            The Reconfiguration Key Authentication\n                        \
    \     Protocol (see Section 20.4).\n   singleton option          An option that\
    \ is allowed to appear only\n                             once as a top-level\
    \ option or at any\n                             encapsulation level.  Most options\
    \ are\n                             singletons.\n   T1                       \
    \ The time interval after which the client is\n                             expected\
    \ to contact the server that did the\n                             assignment\
    \ to extend (renew) the lifetimes\n                             of the addresses\
    \ assigned (via IA_NA\n                             option(s)) and/or prefixes\
    \ delegated (via\n                             IA_PD option(s)) to the client.\
    \  T1 is\n                             expressed as an absolute value in messages\n\
    \                             (in seconds), is conveyed within IA\n          \
    \                   containers (currently the IA_NA and IA_PD\n              \
    \               options), and is interpreted as a time\n                     \
    \        interval since the packet's reception.  The\n                       \
    \      value stored in the T1 field in IA options\n                          \
    \   is referred to as the T1 value.  The actual\n                            \
    \ time when the timer expires is referred to\n                             as\
    \ the T1 time.\n   T2                        The time interval after which the\
    \ client is\n                             expected to contact any available server\
    \ to\n                             extend (rebind) the lifetimes of the\n    \
    \                         addresses assigned (via IA_NA option(s))\n         \
    \                    and/or prefixes delegated (via IA_PD\n                  \
    \           option(s)) to the client.  T2 is expressed\n                     \
    \        as an absolute value in messages (in\n                             seconds),\
    \ is conveyed within IA containers\n                             (currently the\
    \ IA_NA and IA_PD options),\n                             and is interpreted as\
    \ a time interval since\n                             the packet's reception.\
    \  The value stored\n                             in the T2 field in IA options\
    \ is referred\n                             to as the T2 value.  The actual time\
    \ when\n                             the timer expires is referred to as the\n\
    \                             T2 time.\n   top-level option          An option\
    \ conveyed in a DHCP message\n                             directly, i.e., not\
    \ encapsulated in any\n                             other option, as described\
    \ in Section 9 of\n                             [RFC7227].\n   transaction ID\
    \            An opaque value used to match responses\n                       \
    \      with replies initiated by either a client\n                           \
    \  or a server.\n"
- title: 5.  Client/Server Exchanges
  contents:
  - "5.  Client/Server Exchanges\n   Clients and servers exchange DHCP messages using\
    \ UDP (see [RFC768]\n   and BCP 145 [RFC8085]).  The client uses a link-local\
    \ address or\n   addresses determined through other mechanisms for transmitting\
    \ and\n   receiving DHCP messages.\n   A DHCP client sends most messages using\
    \ a reserved, link-scoped\n   multicast destination address so that the client\
    \ need not be\n   configured with the address or addresses of DHCP servers.\n\
    \   To allow a DHCP client to send a message to a DHCP server that is not\n  \
    \ attached to the same link, a DHCP relay agent on the client's link\n   will\
    \ relay messages between the client and server.  The operation of\n   the relay\
    \ agent is transparent to the client.  The discussion of\n   message exchanges\
    \ in the remainder of this section will omit the\n   description of the relaying\
    \ of messages by relay agents.\n   Once the client has determined the address\
    \ of a server, it may, under\n   some circumstances, send messages directly to\
    \ the server using\n   unicast.\n"
- title: 5.1.  Client/Server Exchanges Involving Two Messages
  contents:
  - "5.1.  Client/Server Exchanges Involving Two Messages\n   When a DHCP client does\
    \ not need to have a DHCP server assign IP\n   addresses or delegated prefixes\
    \ to it, the client can obtain other\n   configuration information such as a list\
    \ of available DNS servers\n   [RFC3646] or NTP servers [RFC5908] through a single\
    \ message and reply\n   exchange with a DHCP server.  To obtain other configuration\n\
    \   information, the client first sends an Information-request message to\n  \
    \ the All_DHCP_Relay_Agents_and_Servers multicast address.  Servers\n   respond\
    \ with a Reply message containing the other configuration\n   information for\
    \ the client.\n   A client may also request the server to expedite address assignment\n\
    \   and/or prefix delegation by using a two-message exchange instead of\n   the\
    \ normal four-message exchange as discussed in the next section.\n   Expedited\
    \ assignment can be requested by the client, and servers may\n   or may not honor\
    \ the request (see Sections 18.3.1 and 21.14 for more\n   details and why servers\
    \ may not honor this request).  Clients may\n   request this expedited service\
    \ in environments where it is likely\n   that there is only one server available\
    \ on a link and no expectation\n   that a second server would become available,\
    \ or when completing the\n   configuration process as quickly as possible is a\
    \ priority.\n   To request the expedited two-message exchange, the client sends\
    \ a\n   Solicit message to the All_DHCP_Relay_Agents_and_Servers multicast\n \
    \  address requesting the assignment of addresses and/or delegated\n   prefixes\
    \ and other configuration information.  This message includes\n   an indication\
    \ (the Rapid Commit option; see Section 21.14) that the\n   client is willing\
    \ to accept an immediate Reply message from the\n   server.  The server that is\
    \ willing to commit the assignment of\n   addresses and/or delegated prefixes\
    \ to the client immediately\n   responds with a Reply message.  The configuration\
    \ information and the\n   addresses and/or delegated prefixes in the Reply message\
    \ are then\n   immediately available for use by the client.\n   Each address or\
    \ delegated prefix assigned to the client has\n   associated preferred and valid\
    \ lifetimes specified by the server.  To\n   request an extension of the lifetimes\
    \ assigned to an address or\n   delegated prefix, the client sends a Renew message\
    \ to the server.\n   The server sends a Reply message to the client with the new\n\
    \   lifetimes, allowing the client to continue to use the address or\n   delegated\
    \ prefix without interruption.  If the server is unable to\n   extend the lifetime\
    \ of an address or delegated prefix, it indicates\n   this by returning the address\
    \ or delegated prefix with lifetimes of\n   0.  At the same time, the server may\
    \ assign other addresses or\n   delegated prefixes.\n   See Section 18 for descriptions\
    \ of additional two-message exchanges\n   between the client and server.\n"
- title: 5.2.  Client/Server Exchanges Involving Four Messages
  contents:
  - "5.2.  Client/Server Exchanges Involving Four Messages\n   To request the assignment\
    \ of one or more addresses and/or delegated\n   prefixes, a client first locates\
    \ a DHCP server and then requests the\n   assignment of addresses and/or delegated\
    \ prefixes and other\n   configuration information from the server.  The client\
    \ sends a\n   Solicit message to the All_DHCP_Relay_Agents_and_Servers multicast\n\
    \   address to find available DHCP servers.  Any server that can meet the\n  \
    \ client's requirements responds with an Advertise message.  The client\n   then\
    \ chooses one of the servers and sends a Request message to the\n   server asking\
    \ for confirmed assignment of addresses and/or delegated\n   prefixes and other\
    \ configuration information.  The server responds\n   with a Reply message that\
    \ contains the confirmed addresses, delegated\n   prefixes, and configuration.\n\
    \   As described in the previous section, the client can request an\n   extension\
    \ of the lifetimes assigned to addresses or delegated\n   prefixes (this is a\
    \ two-message exchange).\n"
- title: 5.3.  Server/Client Exchanges
  contents:
  - "5.3.  Server/Client Exchanges\n   A server that has previously communicated with\
    \ a client and\n   negotiated for the client to listen for Reconfigure messages\
    \ may send\n   the client a Reconfigure message to initiate the client to update\
    \ its\n   configuration by sending an Information-request, Renew, or Rebind\n\
    \   message.  The client then performs the two-message exchange as\n   described\
    \ earlier.  This can be used to expedite configuration\n   changes to a client,\
    \ such as the need to renumber a network (see\n   [RFC6879]).\n"
- title: 6.  Operational Models
  contents:
  - "6.  Operational Models\n   This section describes some of the current most common\
    \ DHCP\n   operational models.  The described models are not mutually exclusive\n\
    \   and are sometimes used together.  For example, a device may start in\n   stateful\
    \ mode to obtain an address and, at a later time when an\n   application is started,\
    \ request additional parameters using\n   stateless mode.\n   This document assumes\
    \ that the DHCP servers and the client,\n   communicating with the servers via\
    \ a specific interface, belong to a\n   single provisioning domain.\n   DHCP may\
    \ be extended to support additional stateful services that may\n   interact with\
    \ one or more of the models described below.  Such\n   interaction should be considered\
    \ and documented as part of any future\n   protocol extension.\n"
- title: 6.1.  Stateless DHCP
  contents:
  - "6.1.  Stateless DHCP\n   Stateless DHCP [RFC3736] is used when DHCP is not used\
    \ for obtaining\n   a lease but a node (DHCP client) desires one or more DHCP\
    \ \"other\n   configuration\" parameters, such as a list of DNS recursive name\n\
    \   servers or DNS domain search lists [RFC3646].  Stateless DHCP may be\n   used\
    \ when a node initially boots or at any time the software on the\n   node requires\
    \ some missing or expired configuration information that\n   is available via\
    \ DHCP.\n   This is the simplest and most basic operation for DHCP and requires\
    \ a\n   client (and a server) to support only two messages --\n   Information-request\
    \ and Reply.  Note that DHCP servers and relay\n   agents typically also need\
    \ to support the Relay-forward and\n   Relay-reply messages to accommodate operation\
    \ when clients and\n   servers are not on the same link.\n"
- title: 6.2.  DHCP for Non-temporary Address Assignment
  contents:
  - "6.2.  DHCP for Non-temporary Address Assignment\n   This model of operation was\
    \ the original motivation for DHCP.  It is\n   appropriate for situations where\
    \ stateless address autoconfiguration\n   alone is insufficient or impractical,\
    \ e.g., because of network\n   policy, additional requirements such as dynamic\
    \ updates to the DNS,\n   or client-specific requirements.\n   The model of operation\
    \ for non-temporary address assignment is as\n   follows.  The server is provided\
    \ with prefixes from which it may\n   allocate addresses to clients, as well as\
    \ any related network\n   topology information as to which prefixes are present\
    \ on which links.\n   A client requests a non-temporary address to be assigned\
    \ by the\n   server.  The server allocates an address or addresses appropriate\
    \ for\n   the link on which the client is connected.  The server returns the\n\
    \   allocated address or addresses to the client.\n   Each address has associated\
    \ preferred and valid lifetimes, which\n   constitute an agreement about the length\
    \ of time over which the\n   client is allowed to use the address.  A client can\
    \ request an\n   extension of the lifetimes on an address and is required to terminate\n\
    \   the use of an address if the valid lifetime of the address expires.\n   Typically,\
    \ clients request other configuration parameters, such as\n   the DNS name server\
    \ addresses and domain search lists, when\n   requesting addresses.\n   Clients\
    \ can also request more than one address or set of addresses\n   (see Sections\
    \ 6.6 and 12).\n"
- title: 6.3.  DHCP for Prefix Delegation
  contents:
  - "6.3.  DHCP for Prefix Delegation\n   The prefix delegation mechanism, originally\
    \ described in [RFC3633],\n   is another stateful mode of operation and was originally\
    \ intended for\n   simple delegation of prefixes from a delegating router (DHCP\
    \ server)\n   to requesting routers (DHCP clients).  It is appropriate for\n \
    \  situations in which the delegating router (1) does not have knowledge\n   about\
    \ the topology of the networks to which the requesting router is\n   attached\
    \ and (2) does not require other information aside from the\n   identity of the\
    \ requesting router to choose a prefix for delegation.\n   This mechanism is appropriate\
    \ for use by an ISP to delegate a prefix\n   to a subscriber, where the delegated\
    \ prefix would possibly be\n   subnetted and assigned to the links within the\
    \ subscriber's network.\n   [RFC7084] and [RFC7368] describe such use in detail.\n\
    \   The design of this prefix delegation mechanism meets the requirements\n  \
    \ for prefix delegation in [RFC3769].\n   While [RFC3633] assumes that the DHCP\
    \ client is a router (hence the\n   use of \"requesting router\") and that the\
    \ DHCP server is a router\n   (hence the use of \"delegating router\"), DHCP prefix\
    \ delegation itself\n   does not require that the client forward IP packets not\
    \ addressed to\n   itself and thus does not require that the client (or server)\
    \ be a\n   router as defined in [RFC8200].  Also, in many cases (such as\n   tethering\
    \ or hosting virtual machines), hosts are already forwarding\n   IP packets and\
    \ thus are operating as routers as defined in [RFC8200].\n   Therefore, this document\
    \ mostly replaces \"requesting router\" with\n   \"client\" and \"delegating router\"\
    \ with \"server\".\n   The model of operation for prefix delegation is as follows.\
    \  A server\n   is provisioned with prefixes to be delegated to clients.  A client\n\
    \   requests prefix(es) from the server, as described in Section 18.  The\n  \
    \ server chooses prefix(es) for delegation and responds with prefix(es)\n   to\
    \ the client.  The client is then responsible for the delegated\n   prefix(es).\
    \  For example, the client might assign a subnet from a\n   delegated prefix to\
    \ one of its interfaces and begin sending Router\n   Advertisements for the prefix\
    \ on that link.\n   Each prefix has an associated preferred lifetime and valid\
    \ lifetime,\n   which constitute an agreement about the length of time over which\
    \ the\n   client is allowed to use the prefix.  A client can request an\n   extension\
    \ of the lifetimes on a delegated prefix and is required to\n   terminate the\
    \ use of a delegated prefix if the valid lifetime of the\n   prefix expires.\n\
    \   Figure 1 illustrates a network architecture in which prefix\n   delegation\
    \ could be used.\n                      ______________________         \\\n  \
    \                   /                      \\         \\\n                   \
    \ |    ISP core network    |         \\\n                     \\__________ ___________/\
    \           |\n                                |                       |\n   \
    \                     +-------+-------+               |\n                    \
    \    |  Aggregation  |               | ISP\n                        |    device\
    \     |               | network\n                        |  (delegating  |   \
    \            |\n                        |    router)    |               |\n  \
    \                      +-------+-------+               |\n                   \
    \             |                      /\n                                |Network\
    \ link to      /\n                                |subscriber premises /\n   \
    \                             |\n                         +------+------+    \
    \         \\\n                         |     CPE     |              \\\n     \
    \                    | (requesting |               \\\n                      \
    \   |   router)   |                |\n                         +----+---+----+\
    \                |\n                              |   |                     |\
    \ Subscriber\n       ---+-------------+-----+   +-----+------         | network\n\
    \          |             |               |               |\n     +----+-----+\
    \ +-----+----+     +----+-----+         |\n     |Subscriber| |Subscriber|    \
    \ |Subscriber|        /\n     |    PC    | |    PC    |     |    PC    |     \
    \  /\n     +----------+ +----------+     +----------+      /\n               \
    \     Figure 1: Prefix Delegation Network\n   In this example, the server (delegating\
    \ router) is configured with a\n   set of prefixes to be used for assignment to\
    \ customers at the time of\n   each customer's first connection to the ISP service.\
    \  The prefix\n   delegation process begins when the client (requesting router)\n\
    \   requests configuration information through DHCP.  The DHCP messages\n   from\
    \ the client are received by the server in the aggregation device.\n   When the\
    \ server receives the request, it selects an available prefix\n   or prefixes\
    \ for delegation to the client.  The server then returns\n   the prefix or prefixes\
    \ to the client.\n   The client subnets the delegated prefix and assigns the longer\n\
    \   prefixes to links in the subscriber's network.  In a typical scenario\n  \
    \ based on the network shown in Figure 1, the client subnets a single\n   delegated\
    \ /48 prefix into /64 prefixes and assigns one /64 prefix to\n   each of the links\
    \ in the subscriber network.\n   The prefix delegation options can be used in\
    \ conjunction with other\n   DHCP options carrying other configuration information\
    \ to the client.\n   The client may, in turn, provide DHCP service to nodes attached\
    \ to\n   the internal network.  For example, the client may obtain the\n   addresses\
    \ of DNS and NTP servers from the ISP server and then pass\n   that configuration\
    \ information on to the subscriber hosts through a\n   DHCP server in the client\
    \ (requesting router).\n   If the client uses a delegated prefix to configure\
    \ addresses on\n   interfaces on itself or other nodes behind it, the preferred\
    \ and\n   valid lifetimes of those addresses MUST be no longer than the\n   remaining\
    \ preferred and valid lifetimes, respectively, for the\n   delegated prefix at\
    \ any time.  In particular, if the delegated prefix\n   or a prefix derived from\
    \ it is advertised for stateless address\n   autoconfiguration [RFC4862], the\
    \ advertised preferred and valid\n   lifetimes MUST NOT exceed the corresponding\
    \ remaining lifetimes of\n   the delegated prefix.\n"
- title: 6.4.  DHCP for Customer Edge Routers
  contents:
  - "6.4.  DHCP for Customer Edge Routers\n   The DHCP requirements and network architecture\
    \ for Customer Edge\n   Routers are described in [RFC7084].  This model of operation\
    \ combines\n   address assignment (see Section 6.2) and prefix delegation (see\n\
    \   Section 6.3).  In general, this model assumes that a single set of\n   transactions\
    \ between the client and server will assign or extend the\n   client's non-temporary\
    \ addresses and delegated prefixes.\n"
- title: 6.5.  DHCP for Temporary Addresses
  contents:
  - "6.5.  DHCP for Temporary Addresses\n   Temporary addresses were originally introduced\
    \ to avoid privacy\n   concerns with stateless address autoconfiguration, which\
    \ based\n   64 bits of the address on the EUI-64 (see [RFC4941].  They were added\n\
    \   to DHCP to provide complementary support when stateful address\n   assignment\
    \ is used.\n   Temporary address assignment works mostly like non-temporary address\n\
    \   assignment (see Section 6.2); however, these addresses are generally\n   intended\
    \ to be used for a short period of time and not to have their\n   lifetimes extended,\
    \ though they can be if required.\n"
- title: 6.6.  Multiple Addresses and Prefixes
  contents:
  - "6.6.  Multiple Addresses and Prefixes\n   DHCP allows a client to receive multiple\
    \ addresses.  During typical\n   operation, a client sends one instance of an\
    \ IA_NA option and the\n   server assigns at most one address from each prefix\
    \ assigned to the\n   link to which the client is attached.  In particular, the\
    \ server can\n   be configured to serve addresses out of multiple prefixes for\
    \ a given\n   link.  This is useful in cases such as when a network renumbering\n\
    \   event is in progress.  In a typical deployment, the server will grant\n  \
    \ one address for each IA_NA option (see Section 21.4).\n   A client can explicitly\
    \ request multiple addresses by sending\n   multiple IA_NA options (and/or IA_TA\
    \ options; see Section 21.5).  A\n   client can send multiple IA_NA (and/or IA_TA)\
    \ options in its initial\n   transmissions.  Alternatively, it can send an extra\
    \ Request message\n   with additional new IA_NA (and/or IA_TA) options (or include\
    \ them in\n   a Renew message).\n   The same principle also applies to prefix\
    \ delegation.  In principle,\n   DHCP allows a client to request new prefixes\
    \ to be delegated by\n   sending additional IA_PD options (see Section 21.21).\
    \  However, a\n   typical operator usually prefers to delegate a single, larger\
    \ prefix.\n   In most deployments, it is recommended that the client request a\n\
    \   larger prefix in its initial transmissions rather than request\n   additional\
    \ prefixes later on.\n   The exact behavior of the server (whether to grant additional\n\
    \   addresses and prefixes or not) is up to the server policy and is out\n   of\
    \ scope for this document.\n   For more information on how the server distinguishes\
    \ between IA\n   option instances, see Section 12.\n"
- title: 7.  DHCP Constants
  contents:
  - "7.  DHCP Constants\n   This section describes various program and networking\
    \ constants used\n   by DHCP.\n"
- title: 7.1.  Multicast Addresses
  contents:
  - "7.1.  Multicast Addresses\n   DHCP makes use of the following multicast addresses:\n\
    \   All_DHCP_Relay_Agents_and_Servers (ff02::1:2)\n      A link-scoped multicast\
    \ address used by a client to communicate\n      with neighboring (i.e., on-link)\
    \ relay agents and servers.  All\n      servers and relay agents are members of\
    \ this multicast group.\n   All_DHCP_Servers (ff05::1:3)\n      A site-scoped\
    \ multicast address used by a relay agent to\n      communicate with servers,\
    \ either because the relay agent wants to\n      send messages to all servers\
    \ or because it does not know the\n      unicast addresses of the servers.  Note\
    \ that in order for a relay\n      agent to use this address, it must have an\
    \ address of sufficient\n      scope to be reachable by the servers.  All servers\
    \ within the site\n      are members of this multicast group on the interfaces\
    \ that are\n      within the site.\n"
- title: 7.2.  UDP Ports
  contents:
  - "7.2.  UDP Ports\n   Clients listen for DHCP messages on UDP port 546.  Servers\
    \ and relay\n   agents listen for DHCP messages on UDP port 547.\n"
- title: 7.3.  DHCP Message Types
  contents:
  - "7.3.  DHCP Message Types\n   DHCP defines the following message types.  The formats\
    \ of these\n   messages are provided in Sections 8 and 9.  Additional message\
    \ types\n   have been defined and may be defined in the future; see\n   <https://www.iana.org/assignments/dhcpv6-parameters>.\
    \  The numeric\n   encoding for each message type is shown in parentheses.\n \
    \  SOLICIT (1)               A client sends a Solicit message to locate\n    \
    \                         servers.\n   ADVERTISE (2)             A server sends\
    \ an Advertise message to\n                             indicate that it is available\
    \ for DHCP\n                             service, in response to a Solicit message\n\
    \                             received from a client.\n   REQUEST (3)        \
    \       A client sends a Request message to request\n                        \
    \     configuration parameters, including\n                             addresses\
    \ and/or delegated prefixes, from a\n                             specific server.\n\
    \   CONFIRM (4)               A client sends a Confirm message to any\n      \
    \                       available server to determine whether the\n          \
    \                   addresses it was assigned are still\n                    \
    \         appropriate to the link to which the client\n                      \
    \       is connected.\n   RENEW (5)                 A client sends a Renew message\
    \ to the\n                             server that originally provided the\n \
    \                            client's leases and configuration\n             \
    \                parameters to extend the lifetimes on the\n                 \
    \            leases assigned to the client and to update\n                   \
    \          other configuration parameters.\n   REBIND (6)                A client\
    \ sends a Rebind message to any\n                             available server\
    \ to extend the lifetimes on\n                             the leases assigned\
    \ to the client and to\n                             update other configuration\
    \ parameters; this\n                             message is sent after a client\
    \ receives no\n                             response to a Renew message.\n   REPLY\
    \ (7)                 A server sends a Reply message containing\n            \
    \                 assigned leases and configuration\n                        \
    \     parameters in response to a Solicit,\n                             Request,\
    \ Renew, or Rebind message received\n                             from a client.\
    \  A server sends a Reply\n                             message containing configuration\
    \ parameters\n                             in response to an Information-request\n\
    \                             message.  A server sends a Reply message in\n  \
    \                           response to a Confirm message confirming or\n    \
    \                         denying that the addresses assigned to the\n       \
    \                      client are appropriate to the link to which\n         \
    \                    the client is connected.  A server sends a\n            \
    \                 Reply message to acknowledge receipt of a\n                \
    \             Release or Decline message.\n   RELEASE (8)               A client\
    \ sends a Release message to the\n                             server that assigned\
    \ leases to the client\n                             to indicate that the client\
    \ will no longer\n                             use one or more of the assigned\
    \ leases.\n   DECLINE (9)               A client sends a Decline message to a\n\
    \                             server to indicate that the client has\n       \
    \                      determined that one or more addresses\n               \
    \              assigned by the server are already in use\n                   \
    \          on the link to which the client is\n                             connected.\n\
    \   RECONFIGURE (10)          A server sends a Reconfigure message to a\n    \
    \                         client to inform the client that the server\n      \
    \                       has new or updated configuration parameters\n        \
    \                     and that the client is to initiate a\n                 \
    \            Renew/Reply, Rebind/Reply, or\n                             Information-request/Reply\
    \ transaction with\n                             the server in order to receive\
    \ the updated\n                             information.\n   INFORMATION-REQUEST\
    \ (11)  A client sends an Information-request\n                             message\
    \ to a server to request\n                             configuration parameters\
    \ without the\n                             assignment of any leases to the client.\n\
    \   RELAY-FORW (12)           A relay agent sends a Relay-forward message\n  \
    \                           to relay messages to servers, either\n           \
    \                  directly or through another relay agent.\n                \
    \             The received message -- either a client\n                      \
    \       message or a Relay-forward message from\n                            \
    \ another relay agent -- is encapsulated in\n                             an option\
    \ in the Relay-forward message.\n   RELAY-REPL (13)           A server sends a\
    \ Relay-reply message to a\n                             relay agent containing\
    \ a message that the\n                             relay agent delivers to a client.\
    \  The\n                             Relay-reply message may be relayed by other\n\
    \                             relay agents for delivery to the\n             \
    \                destination relay agent.\n                             The server\
    \ encapsulates the client message\n                             as an option in\
    \ the Relay-reply message,\n                             which the relay agent\
    \ extracts and relays\n                             to the client.\n"
- title: 7.4.  DHCP Option Codes
  contents:
  - "7.4.  DHCP Option Codes\n   DHCP makes extensive use of options in messages;\
    \ some of these are\n   defined later, in Section 21.  Additional options are\
    \ defined in\n   other documents or may be defined in the future (see [RFC7227]\
    \ for\n   guidance on new option definitions).\n"
- title: 7.5.  Status Codes
  contents:
  - "7.5.  Status Codes\n   DHCP uses status codes to communicate the success or failure\
    \ of\n   operations requested in messages from clients and servers and to\n  \
    \ provide additional information about the specific cause of the\n   failure of\
    \ a message.  The specific status codes are defined in\n   Section 21.13.\n  \
    \ If the Status Code option (see Section 21.13) does not appear in a\n   message\
    \ in which the option could appear, the status of the message\n   is assumed to\
    \ be Success.\n"
- title: 7.6.  Transmission and Retransmission Parameters
  contents:
  - "7.6.  Transmission and Retransmission Parameters\n   This section presents a\
    \ table of values used to describe the message\n   transmission behavior of clients\
    \ and servers.  Some of the values are\n   adjusted by a randomization factor\
    \ and backoffs (see Section 15).\n   Transmissions may also be influenced by rate\
    \ limiting (see\n   Section 14.1).\n   +-----------------+------------------+------------------------------+\n\
    \   | Parameter       | Default          | Description                  |\n  \
    \ +-----------------+------------------+------------------------------+\n   |\
    \ SOL_MAX_DELAY   | 1 sec            | Max delay of first Solicit   |\n   |  \
    \               |                  |                              |\n   | SOL_TIMEOUT\
    \     | 1 sec            | Initial Solicit timeout      |\n   |              \
    \   |                  |                              |\n   | SOL_MAX_RT     \
    \ | 3600 secs        | Max Solicit timeout value    |\n   |                 |\
    \                  |                              |\n   | REQ_TIMEOUT     | 1\
    \ sec            | Initial Request timeout      |\n   |                 |    \
    \              |                              |\n   | REQ_MAX_RT      | 30 secs\
    \          | Max Request timeout value    |\n   |                 |          \
    \        |                              |\n   | REQ_MAX_RC      | 10         \
    \      | Max Request retry attempts   |\n   |                 |              \
    \    |                              |\n   | CNF_MAX_DELAY   | 1 sec          \
    \  | Max delay of first Confirm   |\n   |                 |                  |\
    \                              |\n   | CNF_TIMEOUT     | 1 sec            | Initial\
    \ Confirm timeout      |\n   |                 |                  |          \
    \                    |\n   | CNF_MAX_RT      | 4 secs           | Max Confirm\
    \ timeout          |\n   |                 |                  |              \
    \                |\n   | CNF_MAX_RD      | 10 secs          | Max Confirm duration\
    \         |\n   |                 |                  |                       \
    \       |\n   | REN_TIMEOUT     | 10 secs          | Initial Renew timeout   \
    \     |\n   |                 |                  |                           \
    \   |\n   | REN_MAX_RT      | 600 secs         | Max Renew timeout value     \
    \ |\n   |                 |                  |                              |\n\
    \   | REB_TIMEOUT     | 10 secs          | Initial Rebind timeout       |\n  \
    \ |                 |                  |                              |\n   |\
    \ REB_MAX_RT      | 600 secs         | Max Rebind timeout value     |\n   |  \
    \               |                  |                              |\n   | INF_MAX_DELAY\
    \   | 1 sec            | Max delay of first           |\n   |                \
    \ |                  | Information-request          |\n   |                 |\
    \                  |                              |\n   | INF_TIMEOUT     | 1\
    \ sec            | Initial Information-request  |\n   |                 |    \
    \              | timeout                      |\n   |                 |      \
    \            |                              |\n   | INF_MAX_RT      | 3600 secs\
    \        | Max Information-request      |\n   |                 |            \
    \      | timeout value                |\n   |                 |              \
    \    |                              |\n   | REL_TIMEOUT     | 1 sec          \
    \  | Initial Release timeout      |\n   |                 |                  |\
    \                              |\n   | REL_MAX_RC      | 4                | Max\
    \ Release retry attempts   |\n   |                 |                  |      \
    \                        |\n   | DEC_TIMEOUT     | 1 sec            | Initial\
    \ Decline timeout      |\n   |                 |                  |          \
    \                    |\n   | DEC_MAX_RC      | 4                | Max Decline\
    \ retry attempts   |\n   |                 |                  |              \
    \                |\n   | REC_TIMEOUT     | 2 secs           | Initial Reconfigure\
    \ timeout  |\n   |                 |                  |                      \
    \        |\n   | REC_MAX_RC      | 8                | Max Reconfigure attempts\
    \     |\n   |                 |                  |                           \
    \   |\n   | HOP_COUNT_LIMIT | 8                | Max hop count in a          \
    \ |\n   |                 |                  | Relay-forward message        |\n\
    \   |                 |                  |                              |\n  \
    \ | IRT_DEFAULT     | 86400 secs (24   | Default information refresh  |\n   |\
    \                 | hours)           | time                         |\n   |  \
    \               |                  |                              |\n   | IRT_MINIMUM\
    \     | 600 secs         | Min information refresh time |\n   |              \
    \   |                  |                              |\n   | MAX_WAIT_TIME  \
    \ | 60 secs          | Max required time to wait    |\n   |                 |\
    \                  | for a response               |\n   +-----------------+------------------+------------------------------+\n\
    \            Table 1: Transmission and Retransmission Parameters\n"
- title: 7.7.  Representation of Time Values and "Infinity" as a Time Value
  contents:
  - "7.7.  Representation of Time Values and \"Infinity\" as a Time Value\n   All\
    \ time values for lifetimes, T1, and T2 are unsigned 32-bit\n   integers and are\
    \ expressed in units of seconds.  The value 0xffffffff\n   is taken to mean \"\
    infinity\" when used as a lifetime (as in [RFC4861])\n   or a value for T1 or\
    \ T2.\n   Setting the valid lifetime of an address or a delegated prefix to\n\
    \   0xffffffff (\"infinity\") amounts to a permanent assignment of an\n   address\
    \ or delegation to a client and should only be used in cases\n   where permanent\
    \ assignments are desired.\n   Care should be taken in setting T1 or T2 to 0xffffffff\
    \ (\"infinity\").\n   A client will never attempt to extend the lifetimes of any\
    \ addresses\n   in an IA with T1 set to 0xffffffff.  A client will never attempt\
    \ to\n   use a Rebind message to locate a different server to extend the\n   lifetimes\
    \ of any addresses in an IA with T2 set to 0xffffffff.\n"
- title: 8.  Client/Server Message Formats
  contents:
  - "8.  Client/Server Message Formats\n   All DHCP messages sent between clients\
    \ and servers share an identical\n   fixed-format header and a variable-format\
    \ area for options.\n   All values in the message header and in options are in\
    \ network byte\n   order.\n   Options are stored serially in the \"options\" field,\
    \ with no padding\n   between the options.  Options are byte-aligned but are not\
    \ aligned in\n   any other way (such as on 2-byte or 4-byte boundaries).\n   The\
    \ following diagram illustrates the format of DHCP messages sent\n   between clients\
    \ and servers:\n       0                   1                   2             \
    \      3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |    msg-type   |               transaction-id                  |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      .   \
    \                         options                            .\n      .      \
    \           (variable number and length)                  .\n      |         \
    \                                                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                  Figure 2: Client/Server Message Format\n      msg-type    \
    \         Identifies the DHCP message type; the\n                           available\
    \ message types are listed in\n                           Section 7.3.  A 1-octet\
    \ field.\n      transaction-id       The transaction ID for this message exchange.\n\
    \                           A 3-octet field.\n      options              Options\
    \ carried in this message; options are\n                           described in\
    \ Section 21.  A variable-length\n                           field (4 octets less\
    \ than the size of the\n                           message).\n"
- title: 9.  Relay Agent/Server Message Formats
  contents:
  - "9.  Relay Agent/Server Message Formats\n   Relay agents exchange messages with\
    \ other relay agents and servers to\n   relay messages between clients and servers\
    \ that are not connected to\n   the same link.\n   All values in the message header\
    \ and in options are in network byte\n   order.\n   Options are stored serially\
    \ in the \"options\" field, with no padding\n   between the options.  Options\
    \ are byte-aligned but are not aligned in\n   any other way (such as on 2-byte\
    \ or 4-byte boundaries).\n   There are two relay agent messages (Relay-forward\
    \ and Relay-reply),\n   which share the following format:\n       0          \
    \         1                   2                   3\n       0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |    msg-type   |   hop-count   |                               |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |\n      |\
    \                                                               |\n      |   \
    \                      link-address                          |\n      |      \
    \                                                         |\n      |         \
    \                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|\n      |            \
    \                   |                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               |\n      |                                   \
    \                            |\n      |                         peer-address \
    \                         |\n      |                                         \
    \                      |\n      |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|\n\
    \      |                               |                               |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |\n      .\
    \                                                               .\n      .   \
    \         options (variable number and length)   ....        .\n      |      \
    \                                                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 3: Relay Agent/Server Message Format\n   The following\
    \ sections describe the use of the relay agent message\n   header.\n"
- title: 9.1.  Relay-forward Message
  contents:
  - "9.1.  Relay-forward Message\n   The following table defines the use of message\
    \ fields in a\n   Relay-forward message.\n      msg-type             RELAY-FORW\
    \ (12).  A 1-octet field.\n      hop-count            Number of relay agents that\
    \ have already\n                           relayed this message.  A 1-octet field.\n\
    \      link-address         An address that may be used by the server to\n   \
    \                        identify the link on which the client is\n          \
    \                 located.  This is typically a globally scoped\n            \
    \               unicast address (i.e., GUA or ULA), but see\n                \
    \           the discussion in Section 19.1.1.  A 16-octet\n                  \
    \         field.\n      peer-address         The address of the client or relay\
    \ agent from\n                           which the message to be relayed was received.\n\
    \                           A 16-octet field.\n      options              MUST\
    \ include a Relay Message option (see\n                           Section 21.10);\
    \ MAY include other options,\n                           such as the Interface-Id\
    \ option (see\n                           Section 21.18), added by the relay agent.\
    \  A\n                           variable-length field (34 octets less than\n\
    \                           the size of the message).\n   See Section 13.1 for\
    \ an explanation of how the link-address field\n   is used.\n"
- title: 9.2.  Relay-reply Message
  contents:
  - "9.2.  Relay-reply Message\n   The following table defines the use of message\
    \ fields in a\n   Relay-reply message.\n      msg-type             RELAY-REPL\
    \ (13).  A 1-octet field.\n      hop-count            Copied from the Relay-forward\
    \ message.\n                           A 1-octet field.\n      link-address  \
    \       Copied from the Relay-forward message.\n                           A 16-octet\
    \ field.\n      peer-address         Copied from the Relay-forward message.\n\
    \                           A 16-octet field.\n      options              MUST\
    \ include a Relay Message option (see\n                           Section 21.10);\
    \ MAY include other options,\n                           such as the Interface-Id\
    \ option (see\n                           Section 21.18).  A variable-length field\n\
    \                           (34 octets less than the size of the\n           \
    \                message).\n"
- title: 10.  Representation and Use of Domain Names
  contents:
  - "10.  Representation and Use of Domain Names\n   So that domain names may be encoded\
    \ uniformly, a domain name or a\n   list of domain names is encoded using the\
    \ technique described in\n   Section 3.1 of [RFC1035].  A domain name, or list\
    \ of domain names, in\n   DHCP MUST NOT be stored in compressed form as described\
    \ in\n   Section 4.1.4 of [RFC1035].\n"
- title: 11.  DHCP Unique Identifier (DUID)
  contents:
  - "11.  DHCP Unique Identifier (DUID)\n   Each DHCP client and server has a DUID.\
    \  DHCP servers use DUIDs to\n   identify clients for the selection of configuration\
    \ parameters and in\n   the association of IAs with clients.  DHCP clients use\
    \ DUIDs to\n   identify a server in messages where a server needs to be identified.\n\
    \   See Sections 21.2 and 21.3 for details regarding the representation\n   of\
    \ a DUID in a DHCP message.\n   Clients and servers MUST treat DUIDs as opaque\
    \ values and MUST only\n   compare DUIDs for equality.  Clients and servers SHOULD\
    \ NOT in any\n   other way interpret DUIDs.  Clients and servers MUST NOT restrict\n\
    \   DUIDs to the types defined in this document, as additional DUID types\n  \
    \ may be defined in the future.  It should be noted that an attempt to\n   parse\
    \ a DUID to obtain a client's link-layer address is unreliable,\n   as there is\
    \ no guarantee that the client is still using the same\n   link-layer address\
    \ as when it generated its DUID.  Also, such an\n   attempt will be more and more\
    \ unreliable as more clients adopt\n   privacy measures such as those defined\
    \ in [RFC7844].  If this\n   capability is required, it is recommended to rely\
    \ on the Client\n   Link-Layer Address option instead [RFC6939].\n   The DUID\
    \ is carried in an option because it may be variable in length\n   and because\
    \ it is not required in all DHCP messages.  The DUID is\n   designed to be unique\
    \ across all DHCP clients and servers, and stable\n   for any specific client\
    \ or server.  That is, the DUID used by a\n   client or server SHOULD NOT change\
    \ over time if at all possible; for\n   example, a device's DUID should not change\
    \ as a result of a change in\n   the device's network hardware or changes to virtual\
    \ interfaces (e.g.,\n   logical PPP (over Ethernet) interfaces that may come and\
    \ go in\n   Customer Premises Equipment routers).  The client may change its DUID\n\
    \   as specified in [RFC7844].\n   The motivation for having more than one type\
    \ of DUID is that the DUID\n   must be globally unique and must also be easy to\
    \ generate.  The sort\n   of globally unique identifier that is easy to generate\
    \ for any given\n   device can differ quite widely.  Also, some devices may not\
    \ contain\n   any persistent storage.  Retaining a generated DUID in such a device\n\
    \   is not possible, so the DUID scheme must accommodate such devices.\n"
- title: 11.1.  DUID Contents
  contents:
  - "11.1.  DUID Contents\n   A DUID consists of a 2-octet type code represented in\
    \ network byte\n   order, followed by a variable number of octets that make up\
    \ the\n   actual identifier.  The length of the DUID (not including the type\n\
    \   code) is at least 1 octet and at most 128 octets.  The following\n   types\
    \ are currently defined:\n      +------+------------------------------------------------------+\n\
    \      | Type | Description                                          |\n     \
    \ +------+------------------------------------------------------+\n      | 1 \
    \   | Link-layer address plus time                         |\n      | 2    | Vendor-assigned\
    \ unique ID based on Enterprise Number |\n      | 3    | Link-layer address  \
    \                                 |\n      | 4    | Universally Unique Identifier\
    \ (UUID) [RFC6355]       |\n      +------+------------------------------------------------------+\n\
    \                            Table 2: DUID Types\n   Formats for the variable\
    \ field of the DUID for the first three of the\n   above types are shown below.\
    \  The fourth type, DUID-UUID [RFC6355],\n   can be used in situations where there\
    \ is a UUID stored in a device's\n   firmware settings.\n"
- title: 11.2.  DUID Based on Link-Layer Address Plus Time (DUID-LLT)
  contents:
  - "11.2.  DUID Based on Link-Layer Address Plus Time (DUID-LLT)\n   This type of\
    \ DUID consists of a 2-octet type field containing the\n   value 1, a 2-octet\
    \ hardware type code, and 4 octets containing a time\n   value, followed by the\
    \ link-layer address of any one network\n   interface that is connected to the\
    \ DHCP device at the time that the\n   DUID is generated.  The time value is the\
    \ time that the DUID is\n   generated, represented in seconds since midnight (UTC),\
    \ January 1,\n   2000, modulo 2^32.  The hardware type MUST be a valid hardware\
    \ type\n   assigned by IANA; see [IANA-HARDWARE-TYPES].  Both the time and the\n\
    \   hardware type are stored in network byte order.  For Ethernet\n   hardware\
    \ types, the link-layer address is stored in canonical form,\n   as described\
    \ in [RFC2464].\n   The following diagram illustrates the format of a DUID-LLT:\n\
    \       0                   1                   2                   3\n      \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |         DUID-Type (1)         |    hardware type (16 bits)    |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                        time (32 bits)                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      .                                                               .\n   \
    \   .             link-layer address (variable length)              .\n      .\
    \                                                               .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                         Figure 4: DUID-LLT Format\n   The choice of network\
    \ interface can be completely arbitrary, as long\n   as that interface provides\
    \ a globally unique link-layer address for\n   the link type; the same DUID-LLT\
    \ SHOULD be used in configuring all\n   network interfaces connected to the device,\
    \ regardless of which\n   interface's link-layer address was used to generate\
    \ the DUID-LLT.\n   Clients and servers using this type of DUID MUST store the\
    \ DUID-LLT\n   in stable storage and MUST continue to use this DUID-LLT even if\
    \ the\n   network interface used to generate the DUID-LLT is removed.  Clients\n\
    \   and servers that do not have any stable storage MUST NOT use this\n   type\
    \ of DUID.\n   Clients and servers that use this DUID SHOULD attempt to configure\n\
    \   the time prior to generating the DUID, if that is possible, and MUST\n   use\
    \ some sort of time source (for example, a real-time clock) in\n   generating\
    \ the DUID, even if that time source could not be configured\n   prior to generating\
    \ the DUID.  The use of a time source makes it\n   unlikely that two identical\
    \ DUID-LLTs will be generated if the\n   network interface is removed from the\
    \ client and another client then\n   uses the same network interface to generate\
    \ a DUID-LLT.  A collision\n   between two DUID-LLTs is very unlikely even if\
    \ the clocks have not\n   been configured prior to generating the DUID.\n   This\
    \ method of DUID generation is recommended for all general-purpose\n   computing\
    \ devices such as desktop computers and laptop computers, and\n   also for devices\
    \ such as printers, routers, and so on, that contain\n   some form of writable\
    \ non-volatile storage.\n   It is possible that this algorithm for generating\
    \ a DUID could result\n   in a client identifier collision.  A DHCP client that\
    \ generates a\n   DUID-LLT using this mechanism MUST provide an administrative\n\
    \   interface that replaces the existing DUID with a newly generated\n   DUID-LLT.\n"
- title: 11.3.  DUID Assigned by Vendor Based on Enterprise Number (DUID-EN)
  contents:
  - "11.3.  DUID Assigned by Vendor Based on Enterprise Number (DUID-EN)\n   The vendor\
    \ assigns this form of DUID to the device.  This DUID\n   consists of the 4-octet\
    \ vendor's registered Private Enterprise Number\n   as maintained by IANA [IANA-PEN]\
    \ followed by a unique identifier\n   assigned by the vendor.  The following diagram\
    \ summarizes the\n   structure of a DUID-EN:\n       0                   1   \
    \                2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |         DUID-Type (2)         |       enterprise-number       |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \   enterprise-number (contd)   |                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               |\n      .                           identifier\
    \                          .\n      .                       (variable length)\
    \                       .\n      .                                           \
    \                    .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                         Figure 5: DUID-EN Format\n   The source of the identifier\
    \ is left up to the vendor defining it,\n   but each identifier part of each DUID-EN\
    \ MUST be unique to the device\n   that is using it, and MUST be assigned to the\
    \ device no later than at\n   the first usage and stored in some form of non-volatile\
    \ storage.\n   This typically means being assigned during the manufacturing process\n\
    \   in the case of physical devices or, in the case of virtual machines,\n   when\
    \ the image is created or booted for the first time.  The\n   generated DUID SHOULD\
    \ be recorded in non-erasable storage.  The\n   enterprise-number is the vendor's\
    \ registered Private Enterprise\n   Number as maintained by IANA [IANA-PEN]. \
    \ The enterprise-number is\n   stored as an unsigned 32-bit number.\n   An example\
    \ DUID of this type might look like this:\n      +---+---+---+---+---+---+---+---+\n\
    \      | 0 | 2 | 0 | 0 | 0 |  9| 12|192|\n      +---+---+---+---+---+---+---+---+\n\
    \      |132|211| 3 | 0 | 9 | 18|\n      +---+---+---+---+---+---+\n          \
    \               Figure 6: DUID-EN Example\n   This example includes the 2-octet\
    \ type of 2 and the Enterprise Number\n   (9), followed by 8 octets of identifier\
    \ data (0x0CC084D303000912).\n"
- title: 11.4.  DUID Based on Link-Layer Address (DUID-LL)
  contents:
  - "11.4.  DUID Based on Link-Layer Address (DUID-LL)\n   This type of DUID consists\
    \ of 2 octets containing a DUID type of 3\n   and a 2-octet network hardware type\
    \ code, followed by the link-layer\n   address of any one network interface that\
    \ is permanently connected to\n   the client or server device.  For example, a\
    \ node that has a network\n   interface implemented in a chip that is unlikely\
    \ to be removed and\n   used elsewhere could use a DUID-LL.  The hardware type\
    \ MUST be a\n   valid hardware type assigned by IANA; see [IANA-HARDWARE-TYPES].\
    \  The\n   hardware type is stored in network byte order.  The link-layer\n  \
    \ address is stored in canonical form, as described in [RFC2464].  The\n   following\
    \ diagram illustrates the format of a DUID-LL:\n       0                   1 \
    \                  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |         DUID-Type (3)         |    hardware type (16 bits)    |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      .\
    \                                                               .\n      .   \
    \          link-layer address (variable length)              .\n      .      \
    \                                                         .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                         Figure 7: DUID-LL Format\n   The choice of network interface\
    \ can be completely arbitrary, as long\n   as that interface provides a unique\
    \ link-layer address and is\n   permanently attached to the device on which the\
    \ DUID-LL is being\n   generated.  The same DUID-LL SHOULD be used in configuring\
    \ all\n   network interfaces connected to the device, regardless of which\n  \
    \ interface's link-layer address was used to generate the DUID.\n   A DUID-LL\
    \ is recommended for devices that have a permanently\n   connected network interface\
    \ with a link-layer address and do not have\n   nonvolatile, writable stable storage.\
    \  A DUID-LL SHOULD NOT be used\n   by DHCP clients or servers that cannot tell\
    \ whether or not a network\n   interface is permanently attached to the device\
    \ on which the DHCP\n   client is running.\n"
- title: 11.5.  DUID Based on Universally Unique Identifier (DUID-UUID)
  contents:
  - "11.5.  DUID Based on Universally Unique Identifier (DUID-UUID)\n   This type\
    \ of DUID consists of 16 octets containing a 128-bit UUID.\n   [RFC6355] details\
    \ when to use this type and how to pick an\n   appropriate source of the UUID.\n\
    \       0                   1                   2                   3\n      \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |         DUID-Type (4)         |        UUID (128 bits)        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |\n      |\
    \                                                               |\n      |   \
    \                                                            |\n      |      \
    \                          -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |         \
    \                       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n        \
    \                Figure 8: DUID-UUID Format\n"
- title: 12.  Identity Association
  contents:
  - "12.  Identity Association\n   An Identity Association (IA) is a construct through\
    \ which a server\n   and a client can identify, group, and manage a set of related\
    \ IPv6\n   addresses or delegated prefixes.  Each IA consists of an IAID and\n\
    \   associated configuration information.\n   The IAID uniquely identifies the\
    \ IA and MUST be chosen to be unique\n   among the IAIDs for that IA type on the\
    \ client (e.g., an IA_NA with\n   an IAID of 0 and an IA_PD with an IAID of 0\
    \ are each considered\n   unique).  The IAID is chosen by the client.  For any\
    \ given use of an\n   IA by the client, the IAID for that IA MUST be consistent\
    \ across\n   restarts of the DHCP client.  The client may maintain consistency\
    \ by\n   either storing the IAID in non-volatile storage or using an algorithm\n\
    \   that will consistently produce the same IAID as long as the\n   configuration\
    \ of the client has not changed.  There may be no way for\n   a client to maintain\
    \ consistency of the IAIDs if it does not have\n   non-volatile storage and the\
    \ client's hardware configuration changes.\n   If the client uses only one IAID,\
    \ it can use a well-known value,\n   e.g., zero.\n   If the client wishes to obtain\
    \ a distinctly new address or prefix and\n   deprecate the existing one, the client\
    \ sends a Release message to the\n   server for the IAs using the original IAID.\
    \  The client then creates\n   a new IAID, to be used in future messages to obtain\
    \ leases for the\n   new IA.\n"
- title: 12.1.  Identity Associations for Address Assignment
  contents:
  - "12.1.  Identity Associations for Address Assignment\n   A client must associate\
    \ at least one distinct IA with each of its\n   network interfaces for which it\
    \ is to request the assignment of IPv6\n   addresses from a DHCP server.  The\
    \ client uses the IAs assigned to an\n   interface to obtain configuration information\
    \ from a server for that\n   interface.  Each such IA must be associated with\
    \ exactly one\n   interface.\n   The configuration information in an IA_NA option\
    \ consists of one or\n   more IPv6 addresses along with the T1 and T2 values for\
    \ the IA.  See\n   Section 21.4 for details regarding the representation of an\
    \ IA_NA in\n   a DHCP message.\n   The configuration information in an IA_TA option\
    \ consists of one or\n   more IPv6 addresses.  See Section 21.5 for details regarding\
    \ the\n   representation of an IA_TA in a DHCP message.\n   Each address in an\
    \ IA has a preferred lifetime and a valid lifetime,\n   as defined in [RFC4862].\
    \  The lifetimes are transmitted from the DHCP\n   server to the client in the\
    \ IA Address option (see Section 21.6).\n   The lifetimes apply to the use of\
    \ addresses; see Section 5.5.4 of\n   [RFC4862].\n"
- title: 12.2.  Identity Associations for Prefix Delegation
  contents:
  - "12.2.  Identity Associations for Prefix Delegation\n   An IA_PD is different\
    \ from an IA for address assignment in that it\n   does not need to be associated\
    \ with exactly one interface.  One IA_PD\n   can be associated with the client,\
    \ with a set of interfaces, or with\n   exactly one interface.  A client configured\
    \ to request delegated\n   prefixes must create at least one distinct IA_PD. \
    \ It may associate a\n   distinct IA_PD with each of its downstream network interfaces\
    \ and use\n   that IA_PD to obtain a prefix for that interface from the server.\n\
    \   The configuration information in an IA_PD option consists of one or\n   more\
    \ prefixes along with the T1 and T2 values for the IA_PD.  See\n   Section 21.21\
    \ for details regarding the representation of an IA_PD in\n   a DHCP message.\n\
    \   Each delegated prefix in an IA has a preferred lifetime and a valid\n   lifetime,\
    \ as defined in [RFC4862].  The lifetimes are transmitted\n   from the DHCP server\
    \ to the client in the IA Prefix option (see\n   Section 21.22).  The lifetimes\
    \ apply to the use of delegated\n   prefixes; see Section 5.5.4 of [RFC4862].\n"
- title: 13.  Assignment to an IA
  contents:
  - '13.  Assignment to an IA

    '
- title: 13.1.  Selecting Addresses for Assignment to an IA_NA
  contents:
  - "13.1.  Selecting Addresses for Assignment to an IA_NA\n   A server selects addresses\
    \ to be assigned to an IA_NA according to\n   the address assignment policies\
    \ determined by the server\n   administrator and the specific information the\
    \ server determines\n   about the client from some combination of the following\
    \ sources:\n   -  The link to which the client is attached.  The server determines\n\
    \      the link as follows:\n      *  If the server receives the message directly\
    \ from the client and\n         the source address in the IP datagram in which\
    \ the message was\n         received is a link-local address, then the client\
    \ is on the\n         same link to which the interface over which the message\
    \ was\n         received is attached.\n      *  If the server receives the message\
    \ from a forwarding relay\n         agent, then the client is on the same link\
    \ as the one to which\n         the interface, identified by the link-address\
    \ field in the\n         message from the relay agent, is attached.  According\
    \ to\n         [RFC6221], the server MUST ignore any link-address field whose\n\
    \         value is zero.  The link-address in this case may come from any\n  \
    \       of the Relay-forward messages encapsulated in the received\n         Relay-forward,\
    \ and in general the most encapsulated (closest\n         Relay-forward to the\
    \ client) has the most useful value.\n      *  If the server receives the message\
    \ directly from the client and\n         the source address in the IP datagram\
    \ in which the message was\n         received is not a link-local address, then\
    \ the client is on the\n         link identified by the source address in the\
    \ IP datagram (note\n         that this situation can occur only if the server\
    \ has enabled\n         the use of unicast message delivery by the client and\
    \ the\n         client has sent a message for which unicast delivery is\n    \
    \     allowed).\n   -  The DUID supplied by the client.\n   -  Other information\
    \ in options supplied by the client, e.g., IA\n      Address options (see Section\
    \ 21.6) that include the client's\n      requests for specific addresses.\n  \
    \ -  Other information in options supplied by the relay agent.\n   By default,\
    \ DHCP server implementations SHOULD NOT generate\n   predictable addresses (see\
    \ Section 4.7 of [RFC7721]).  Server\n   implementers are encouraged to review\
    \ [RFC4941], [RFC7824], and\n   [RFC7707] as to possible considerations for how\
    \ to generate\n   addresses.\n   A server MUST NOT assign an address that is otherwise\
    \ reserved for\n   some other purpose.  For example, a server MUST NOT assign\
    \ addresses\n   that use a reserved IPv6 Interface Identifier [RFC5453] [RFC7136]\n\
    \   [IANA-RESERVED-IID].\n   See [RFC7969] for a more detailed discussion on how\
    \ servers determine\n   a client's location on the network.\n"
- title: 13.2.  Assignment of Temporary Addresses
  contents:
  - "13.2.  Assignment of Temporary Addresses\n   A client may request the assignment\
    \ of temporary addresses (see\n   [RFC4941] for the definition of temporary addresses).\
    \  DHCP handling\n   of address assignment is no different for temporary addresses.\n\
    \   Clients ask for temporary addresses, and servers assign them.\n   Temporary\
    \ addresses are carried in the IA_TA option (see\n   Section 21.5).  Each IA_TA\
    \ option typically contains at least one\n   temporary address for each of the\
    \ prefixes on the link to which the\n   client is attached.\n   The lifetime of\
    \ the assigned temporary address is set in the IA\n   Address option (see Section\
    \ 21.6) encapsulated in the IA_TA option.\n   It is RECOMMENDED to set short lifetimes,\
    \ typically shorter than\n   TEMP_VALID_LIFETIME and TEMP_PREFERRED_LIFETIME (see\
    \ Section 5 of\n   [RFC4941]).\n   A DHCP server implementation MAY generate temporary\
    \ addresses,\n   referring to the algorithm defined in Section 3.2.1 of [RFC4941],\n\
    \   with the additional condition that any new address is not the same as\n  \
    \ any assigned address.\n   The server MAY update the DNS for a temporary address,\
    \ as described\n   in Section 4 of [RFC4941].\n   On the clients, by default,\
    \ temporary addresses are preferred in\n   source address selection, according\
    \ to Rule 7 in Section 5 of\n   [RFC6724].  However, this policy can be overridden.\n\
    \   One of the most important properties of a temporary address is to\n   make\
    \ it difficult to link the address to different actions over time.\n   So, it\
    \ is NOT RECOMMENDED for a client to renew temporary addresses,\n   though DHCP\
    \ provides for such a possibility (see Section 21.5).\n"
- title: 13.3.  Assignment of Prefixes for IA_PD
  contents:
  - "13.3.  Assignment of Prefixes for IA_PD\n   The mechanism through which the server\
    \ selects prefix(es) for\n   delegation is not specified in this document.  Examples\
    \ of ways in\n   which the server might select prefix(es) for a client include\
    \ static\n   assignment based on subscription to an ISP, dynamic assignment from\
    \ a\n   pool of available prefixes, and selection based on an external\n   authority\
    \ such as a RADIUS server using the Framed-IPv6-Prefix option\n   as described\
    \ in [RFC3162].\n"
- title: 14.  Transmission of Messages by a Client
  contents:
  - "14.  Transmission of Messages by a Client\n   Unless otherwise specified in this\
    \ document or in a document that\n   describes how IPv6 is carried over a specific\
    \ type of link (for link\n   types that do not support multicast), a client sends\
    \ DHCP messages to\n   the All_DHCP_Relay_Agents_and_Servers multicast address.\n\
    \   DHCP servers SHOULD NOT check to see whether the Layer 2 address used\n  \
    \ was multicast or not, as long as the Layer 3 address was correct.\n   A client\
    \ uses multicast to reach all servers or an individual server.\n   An individual\
    \ server is indicated by specifying that server's DUID in\n   a Server Identifier\
    \ option (see Section 21.3) in the client's\n   message.  (All servers will receive\
    \ this message, but only the\n   indicated server will respond.)  All servers\
    \ are indicated when this\n   option is not supplied.\n   A client may send some\
    \ messages directly to a server using unicast,\n   as described in Section 21.12.\n"
- title: 14.1.  Rate Limiting
  contents:
  - "14.1.  Rate Limiting\n   In order to avoid prolonged message bursts that may\
    \ be caused by\n   possible logic loops, a DHCP client MUST limit the rate of\
    \ DHCP\n   messages it transmits or retransmits.  One example is that a client\n\
    \   obtains an address or delegated prefix but does not like the\n   response,\
    \ so it reverts back to the Solicit procedure, discovers the\n   same (sole) server,\
    \ requests an address or delegated prefix, and gets\n   the same address or delegated\
    \ prefix as before (as the server has\n   this previously requested lease assigned\
    \ to this client).  This loop\n   can repeat infinitely if there is not a quit/stop\
    \ mechanism.\n   Therefore, a client must not initiate transmissions too frequently.\n\
    \   A recommended method for implementing the rate-limiting function is a\n  \
    \ token bucket (see Appendix A of [RFC3290]), limiting the average rate\n   of\
    \ transmission to a certain number in a certain time interval.  This\n   method\
    \ of bounding burstiness also guarantees that the long-term\n   transmission rate\
    \ will not be exceeded.\n   A transmission rate limit SHOULD be configurable.\
    \  A possible default\n   could be 20 packets in 20 seconds.\n   For a device\
    \ that has multiple interfaces, the limit MUST be enforced\n   on a per-interface\
    \ basis.\n   Rate limiting of forwarded DHCP messages and server-side messages\
    \ is\n   out of scope for this specification.\n"
- title: 14.2.  Client Behavior when T1 and/or T2 Are 0
  contents:
  - "14.2.  Client Behavior when T1 and/or T2 Are 0\n   In certain cases, T1 and/or\
    \ T2 values may be set to 0.  Currently,\n   there are three such cases:\n   1.\
    \  a client received an IA_NA option (see Section 21.4) with a zero\n       value\n\
    \   2.  a client received an IA_PD option (see Section 21.21) with a zero\n  \
    \     value\n   3.  a client received an IA_TA option (see Section 21.5) (which\
    \ does\n       not contain T1 and T2 fields and these leases are not generally\n\
    \       renewed)\n   This is an indication that the renew and rebind times are\
    \ left to the\n   discretion of the client.  However, they are not completely\n\
    \   discretionary.\n   When T1 and/or T2 values are set to 0, the client MUST\
    \ choose a time\n   to avoid packet storms.  In particular, it MUST NOT transmit\n\
    \   immediately.  If the client received multiple IA options, it SHOULD\n   pick\
    \ renew and/or rebind transmission times so all IA options are\n   handled in\
    \ one exchange, if possible.  The client MUST choose renew\n   and rebind times\
    \ to not violate rate-limiting restrictions as defined\n   in Section 14.1.\n"
- title: 15.  Reliability of Client-Initiated Message Exchanges
  contents:
  - "15.  Reliability of Client-Initiated Message Exchanges\n   DHCP clients are responsible\
    \ for reliable delivery of messages in the\n   client-initiated message exchanges\
    \ described in Section 18.  If a\n   DHCP client fails to receive an expected\
    \ response from a server, the\n   client must retransmit its message according\
    \ to the retransmission\n   strategy described in this section.\n   Note that\
    \ the procedure described in this section is slightly\n   modified when used with\
    \ the Solicit message.  The modified procedure\n   is described in Section 18.2.1.\n\
    \   The client begins the message exchange by transmitting a message to\n   the\
    \ server.  The message exchange terminates when either (1) the\n   client successfully\
    \ receives the appropriate response or responses\n   from a server or servers\
    \ or (2) the message exchange is considered to\n   have failed according to the\
    \ retransmission mechanism described\n   below.\n   The client MUST update an\
    \ \"elapsed-time\" value within an Elapsed Time\n   option (see Section 21.9)\
    \ in the retransmitted message.  In some\n   cases, the client may also need to\
    \ modify values in IA Address\n   options (see Section 21.6) or IA Prefix options\
    \ (see Section 21.22)\n   if a valid lifetime for any of the client's leases expires\
    \ before\n   retransmission.  Thus, whenever this document refers to a\n   \"\
    retransmission\" of a client's message, it refers to both modifying\n   the original\
    \ message and sending this new message instance to the\n   server.\n   The client\
    \ retransmission behavior is controlled and described by the\n   following variables:\n\
    \      RT      Retransmission timeout\n      IRT     Initial retransmission time\n\
    \      MRC     Maximum retransmission count\n      MRT     Maximum retransmission\
    \ time\n      MRD     Maximum retransmission duration\n      RAND    Randomization\
    \ factor\n   Specific values for each of these parameters relevant to the various\n\
    \   messages are given in the subsections of Section 18.2, using values\n   defined\
    \ in Table 1 in Section 7.6.  The algorithm for RAND is common\n   across all\
    \ message transmissions.\n   With each message transmission or retransmission,\
    \ the client sets RT\n   according to the rules given below.  If RT expires before\
    \ the message\n   exchange terminates, the client recomputes RT and retransmits\
    \ the\n   message.\n   Each of the computations of a new RT includes a randomization\
    \ factor\n   (RAND), which is a random number chosen with a uniform distribution\n\
    \   between -0.1 and +0.1.  The randomization factor is included to\n   minimize\
    \ synchronization of messages transmitted by DHCP clients.\n   The algorithm for\
    \ choosing a random number does not need to be\n   cryptographically sound.  The\
    \ algorithm SHOULD produce a different\n   sequence of random numbers from each\
    \ invocation of the DHCP client.\n   RT for the first message transmission is\
    \ based on IRT:\n      RT = IRT + RAND*IRT\n   RT for each subsequent message\
    \ transmission is based on the previous\n   value of RT:\n      RT = 2*RTprev\
    \ + RAND*RTprev\n   MRT specifies an upper bound on the value of RT (disregarding\
    \ the\n   randomization added by the use of RAND).  If MRT has a value of 0,\n\
    \   there is no upper limit on the value of RT.  Otherwise:\n      if (RT > MRT)\n\
    \         RT = MRT + RAND*MRT\n   MRC specifies an upper bound on the number of\
    \ times a client may\n   retransmit a message.  Unless MRC is zero, the message\
    \ exchange fails\n   once the client has transmitted the message MRC times.\n\
    \   MRD specifies an upper bound on the length of time a client may\n   retransmit\
    \ a message.  Unless MRD is zero, the message exchange fails\n   once MRD seconds\
    \ have elapsed since the client first transmitted the\n   message.\n   If both\
    \ MRC and MRD are non-zero, the message exchange fails whenever\n   either of\
    \ the conditions specified in the previous two paragraphs\n   is met.\n   If both\
    \ MRC and MRD are zero, the client continues to transmit the\n   message until\
    \ it receives a response.\n   A client is not expected to listen for a response\
    \ during the entire\n   RT period and may turn off listening capabilities after\
    \ waiting at\n   least the shorter of RT and MAX_WAIT_TIME due to power consumption\n\
    \   saving or other reasons.  Of course, a client MUST listen for a\n   Reconfigure\
    \ if it has negotiated for its use with the server.\n"
- title: 16.  Message Validation
  contents:
  - "16.  Message Validation\n   This section describes which options are valid in\
    \ which kinds of\n   message types and explains what to do when a client or server\n\
    \   receives a message that contains known options that are invalid for\n   that\
    \ message.  For example, an IA option is not allowed to appear in\n   an Information-request\
    \ message.\n   Clients and servers MAY choose to either (1) extract information\
    \ from\n   such a message if the information is of use to the recipient or\n \
    \  (2) ignore such a message completely and just discard it.\n   If a server receives\
    \ a message that it considers invalid, it MAY send\n   a Reply message (or Advertise\
    \ message, as appropriate) with a Server\n   Identifier option (see Section 21.3),\
    \ a Client Identifier option (see\n   Section 21.2) (if one was included in the\
    \ message), and a Status Code\n   option (see Section 21.13) with status UnspecFail.\n\
    \   Clients, relay agents, and servers MUST NOT discard messages that\n   contain\
    \ unknown options (or instances of vendor options with unknown\n   enterprise-number\
    \ values).  These should be ignored as if they were\n   not present.  This is\
    \ critical to provide for future extensions of\n   DHCP.\n   A server MUST discard\
    \ any Solicit, Confirm, Rebind, or\n   Information-request messages it receives\
    \ with a Layer 3 unicast\n   destination address.\n   A client or server MUST\
    \ discard any received DHCP messages with an\n   unknown message type.\n"
- title: 16.1.  Use of Transaction IDs
  contents:
  - "16.1.  Use of Transaction IDs\n   The \"transaction-id\" field holds a value\
    \ used by clients and servers\n   to synchronize server responses to client messages.\
    \  A client SHOULD\n   generate a random number that cannot easily be guessed\
    \ or predicted\n   to use as the transaction ID for each new message it sends.\
    \  Note\n   that if a client generates easily predictable transaction\n   identifiers,\
    \ it may become more vulnerable to certain kinds of\n   attacks from off-path\
    \ intruders.  A client MUST leave the transaction\n   ID unchanged in retransmissions\
    \ of a message.\n"
- title: 16.2.  Solicit Message
  contents:
  - "16.2.  Solicit Message\n   Clients MUST discard any received Solicit messages.\n\
    \   Servers MUST discard any Solicit messages that do not include a\n   Client\
    \ Identifier option or that do include a Server Identifier\n   option.\n"
- title: 16.3.  Advertise Message
  contents:
  - "16.3.  Advertise Message\n   Clients MUST discard any received Advertise message\
    \ that meets any of\n   the following conditions:\n   -  the message does not\
    \ include a Server Identifier option (see\n      Section 21.3).\n   -  the message\
    \ does not include a Client Identifier option (see\n      Section 21.2).\n   -\
    \  the contents of the Client Identifier option do not match the\n      client's\
    \ DUID.\n   -  the \"transaction-id\" field value does not match the value the\n\
    \      client used in its Solicit message.\n   Servers and relay agents MUST discard\
    \ any received Advertise\n   messages.\n"
- title: 16.4.  Request Message
  contents:
  - "16.4.  Request Message\n   Clients MUST discard any received Request messages.\n\
    \   Servers MUST discard any received Request message that meets any of\n   the\
    \ following conditions:\n   -  the message does not include a Server Identifier\
    \ option (see\n      Section 21.3).\n   -  the contents of the Server Identifier\
    \ option do not match the\n      server's DUID.\n   -  the message does not include\
    \ a Client Identifier option (see\n      Section 21.2).\n"
- title: 16.5.  Confirm Message
  contents:
  - "16.5.  Confirm Message\n   Clients MUST discard any received Confirm messages.\n\
    \   Servers MUST discard any received Confirm messages that do not\n   include\
    \ a Client Identifier option (see Section 21.2) or that do\n   include a Server\
    \ Identifier option (see Section 21.3).\n"
- title: 16.6.  Renew Message
  contents:
  - "16.6.  Renew Message\n   Clients MUST discard any received Renew messages.\n\
    \   Servers MUST discard any received Renew message that meets any of the\n  \
    \ following conditions:\n   -  the message does not include a Server Identifier\
    \ option (see\n      Section 21.3).\n   -  the contents of the Server Identifier\
    \ option do not match the\n      server's identifier.\n   -  the message does\
    \ not include a Client Identifier option (see\n      Section 21.2).\n"
- title: 16.7.  Rebind Message
  contents:
  - "16.7.  Rebind Message\n   Clients MUST discard any received Rebind messages.\n\
    \   Servers MUST discard any received Rebind messages that do not include\n  \
    \ a Client Identifier option (see Section 21.2) or that do include a\n   Server\
    \ Identifier option (see Section 21.3).\n"
- title: 16.8.  Decline Message
  contents:
  - "16.8.  Decline Message\n   Clients MUST discard any received Decline messages.\n\
    \   Servers MUST discard any received Decline message that meets any of\n   the\
    \ following conditions:\n   -  the message does not include a Server Identifier\
    \ option (see\n      Section 21.3).\n   -  the contents of the Server Identifier\
    \ option do not match the\n      server's identifier.\n   -  the message does\
    \ not include a Client Identifier option (see\n      Section 21.2).\n"
- title: 16.9.  Release Message
  contents:
  - "16.9.  Release Message\n   Clients MUST discard any received Release messages.\n\
    \   Servers MUST discard any received Release message that meets any of\n   the\
    \ following conditions:\n   -  the message does not include a Server Identifier\
    \ option (see\n      Section 21.3).\n   -  the contents of the Server Identifier\
    \ option do not match the\n      server's identifier.\n   -  the message does\
    \ not include a Client Identifier option (see\n      Section 21.2).\n"
- title: 16.10.  Reply Message
  contents:
  - "16.10.  Reply Message\n   Clients MUST discard any received Reply message that\
    \ meets any of the\n   following conditions:\n   -  the message does not include\
    \ a Server Identifier option (see\n      Section 21.3).\n   -  the \"transaction-id\"\
    \ field in the message does not match the value\n      used in the original message.\n\
    \   If the client included a Client Identifier option (see Section 21.2)\n   in\
    \ the original message, the Reply message MUST include a Client\n   Identifier\
    \ option, and the contents of the Client Identifier option\n   MUST match the\
    \ DUID of the client.  If the client did not include a\n   Client Identifier option\
    \ in the original message, the Reply message\n   MUST NOT include a Client Identifier\
    \ option.\n   Servers and relay agents MUST discard any received Reply messages.\n"
- title: 16.11.  Reconfigure Message
  contents:
  - "16.11.  Reconfigure Message\n   Servers and relay agents MUST discard any received\
    \ Reconfigure\n   messages.\n   Clients MUST discard any Reconfigure message that\
    \ meets any of the\n   following conditions:\n   -  the message was not unicast\
    \ to the client.\n   -  the message does not include a Server Identifier option\
    \ (see\n      Section 21.3).\n   -  the message does not include a Client Identifier\
    \ option (see\n      Section 21.2) that contains the client's DUID.\n   -  the\
    \ message does not include a Reconfigure Message option (see\n      Section 21.19).\n\
    \   -  the Reconfigure Message option msg-type is not a valid value.\n   -  the\
    \ message does not include authentication (such as RKAP; see\n      Section 20.4)\
    \ or fails authentication validation.\n"
- title: 16.12.  Information-request Message
  contents:
  - "16.12.  Information-request Message\n   Clients MUST discard any received Information-request\
    \ messages.\n   Servers MUST discard any received Information-request message\
    \ that\n   meets any of the following conditions:\n   -  the message includes\
    \ a Server Identifier option (see\n      Section 21.3), and the DUID in the option\
    \ does not match the\n      server's DUID.\n   -  the message includes an IA option.\n"
- title: 16.13.  Relay-forward Message
  contents:
  - "16.13.  Relay-forward Message\n   Clients MUST discard any received Relay-forward\
    \ messages.\n"
- title: 16.14.  Relay-reply Message
  contents:
  - "16.14.  Relay-reply Message\n   Clients and servers MUST discard any received\
    \ Relay-reply messages.\n"
- title: 17.  Client Source Address and Interface Selection
  contents:
  - "17.  Client Source Address and Interface Selection\n   The client's behavior\
    \ regarding interface selection is different,\n   depending on the purpose of\
    \ the configuration.\n"
- title: 17.1.  Source Address and Interface Selection for Address Assignment
  contents:
  - "17.1.  Source Address and Interface Selection for Address Assignment\n   When\
    \ a client sends a DHCP message to the\n   All_DHCP_Relay_Agents_and_Servers multicast\
    \ address, it SHOULD send\n   the message through the interface for which configuration\
    \ information\n   (including the addresses) is being requested.  However, the\
    \ client\n   MAY send the message through another interface if the interface for\n\
    \   which configuration is being requested is a logical interface without\n  \
    \ direct link attachment or the client is certain that two interfaces\n   are\
    \ attached to the same link.\n   When a client sends a DHCP message directly to\
    \ a server using unicast\n   (after receiving the Server Unicast option (see Section\
    \ 21.12) from\n   that server), the source address in the header of the IPv6 datagram\n\
    \   MUST be an address assigned to the interface for which the client is\n   interested\
    \ in obtaining configuration and that is suitable for use by\n   the server in\
    \ responding to the client.\n"
- title: 17.2.  Source Address and Interface Selection for Prefix Delegation
  contents:
  - "17.2.  Source Address and Interface Selection for Prefix Delegation\n   Delegated\
    \ prefixes are not associated with a particular interface in\n   the same way\
    \ as addresses are for address assignment as mentioned in\n   Section 17.1 above.\n\
    \   When a client sends a DHCP message for the purpose of prefix\n   delegation,\
    \ it SHOULD be sent on the interface associated with the\n   upstream router (typically,\
    \ connected to an ISP network); see\n   [RFC7084].  The upstream interface is\
    \ typically determined by\n   configuration.  This rule applies even in the case\
    \ where a separate\n   IA_PD is used for each downstream interface.\n   When a\
    \ client sends a DHCP message directly to a server using unicast\n   (after receiving\
    \ the Server Unicast option (see Section 21.12) from\n   that server), the source\
    \ address SHOULD be an address that is from\n   the upstream interface and that\
    \ is suitable for use by the server in\n   responding to the client.\n"
- title: 18.  DHCP Configuration Exchanges
  contents:
  - "18.  DHCP Configuration Exchanges\n   A client initiates a message exchange with\
    \ a server or servers to\n   acquire or update configuration information of interest.\
    \  A client\n   has many reasons to initiate the configuration exchange.  Some\
    \ of the\n   more common ones are:\n   1.  as part of the operating system configuration/bootstrap\
    \ process,\n   2.  when requested to do so by the application layer (through an\n\
    \       operating-system-specific API),\n   3.  when a Router Advertisement indicates\
    \ that DHCPv6 is available\n       for address configuration (see Section 4.2\
    \ of [RFC4861]),\n   4.  as required to extend the lifetime of address(es) and/or\n\
    \       delegated prefix(es), using Renew and Rebind messages, or\n   5.  upon\
    \ the receipt of a Reconfigure message, when requested to do\n       so by a server.\n\
    \   The client is responsible for creating IAs and requesting that a\n   server\
    \ assign addresses and/or delegated prefixes to the IAs.  The\n   client first\
    \ creates the IAs and assigns IAIDs to them.  The client\n   then transmits a\
    \ Solicit message containing the IA options describing\n   the IAs.  The client\
    \ MUST NOT be using any of the addresses or\n   delegated prefixes for which it\
    \ tries to obtain the bindings by\n   sending the Solicit message.  In particular,\
    \ if the client had some\n   valid bindings and has chosen to start the server\
    \ discovery process\n   to obtain the same bindings from a different server, the\
    \ client MUST\n   stop using the addresses and delegated prefixes for the bindings\
    \ that\n   it had obtained from the previous server (see Section 18.2.7 for more\n\
    \   details on what \"stop using\" means in this context) and that it is\n   now\
    \ trying to obtain from a new server.\n   A DHCP client that does not need to\
    \ have a DHCP server assign IP\n   addresses or delegated prefixes to it can obtain\
    \ configuration\n   information such as a list of available DNS servers [RFC3646]\
    \ or NTP\n   servers [RFC5908] through a single message and reply exchange with\
    \ a\n   DHCP server.  To obtain configuration information, the client first\n\
    \   sends an Information-request message (see Section 18.2.6) to the\n   All_DHCP_Relay_Agents_and_Servers\
    \ multicast address.  Servers respond\n   with a Reply message containing the\
    \ configuration information for the\n   client (see Section 18.3.6).\n   To request\
    \ the assignment of one or more addresses or delegated\n   prefixes, a client\
    \ first locates a DHCP server and then requests the\n   assignment of addresses/prefixes\
    \ and other configuration information\n   from the server.  The client does this\
    \ by sending the Solicit message\n   (see Section 18.2.1) to the All_DHCP_Relay_Agents_and_Servers\n\
    \   multicast address and collecting Advertise messages from the servers\n   that\
    \ respond to the client's message; the client then selects a\n   server from which\
    \ it wants to obtain configuration information.  This\n   process is referred\
    \ to as server discovery.  When the client has\n   selected the server, it sends\
    \ a Request message to that server as\n   described in Section 18.2.2.\n   A client\
    \ willing to perform the Solicit/Reply message exchange\n   described in Section\
    \ 18.2.1 includes a Rapid Commit option (see\n   Section 21.14) in its Solicit\
    \ message.\n   Servers that can assign addresses or delegated prefixes to the\
    \ IAs\n   respond to the client with an Advertise message or Reply message if\n\
    \   the client included a Rapid Commit option and the server is\n   configured\
    \ to accept it.\n   If the server responds with an Advertise message, the client\n\
    \   initiates a configuration exchange as described in Section 18.2.2.\n   A server\
    \ may initiate a message exchange with a client by sending a\n   Reconfigure message\
    \ to cause the client to send a Renew, Rebind, or\n   Information-request message\
    \ to refresh its configuration information\n   as soon as the Reconfigure message\
    \ is received by the client.\n   Figure 9 shows a timeline diagram of the messages\
    \ exchanged between a\n   client and two servers for the typical lifecycle of\
    \ one or more\n   leases.  This starts with the four-message Solicit/Advertise/\n\
    \   Request/Reply exchange to obtain the lease(s), followed by a\n   two-message\
    \ Renew/Reply exchange to extend the lifetime on the\n   lease(s), and then ends\
    \ with a two-message Release/Reply exchange to\n   end the client's use of the\
    \ lease(s).\n                Server                          Server\n        \
    \    (not selected)      Client        (selected)\n                  v       \
    \        v               v\n                  |               |              \
    \ |\n                  |     Begins initialization     |\n                  |\
    \               |               |\n     start of     | _____________/|\\_____________\
    \ |\n     4-message    |/ Solicit      | Solicit      \\|\n     exchange     |\
    \               |               |\n              Determines          |       \
    \   Determines\n             configuration        |         configuration\n  \
    \                |               |               |\n                  |\\    \
    \          |  ____________/|\n                  | \\________     | /Advertise\
    \    |\n                  | Advertise\\    |/              |\n               \
    \   |           \\   |               |\n                  |      Collects Advertises\
    \      |\n                  |             \\ |               |\n             \
    \     |     Selects configuration     |\n                  |               | \
    \              |\n                  | _____________/|\\_____________ |\n     \
    \             |/ Request      |  Request     \\|\n                  |        \
    \       |               |\n                  |               |     Commits configuration\n\
    \                  |               |               |\n     end of       |    \
    \           | _____________/|\n     4-message    |               |/ Reply    \
    \    |\n     exchange     |               |               |\n                \
    \  |    Initialization complete    |\n                  |               |    \
    \           |\n                  .               .               .\n         \
    \         .               .               .\n                  |   T1 (renewal)\
    \ timer expires  |\n                  |               |               |\n    \
    \ 2-message    | _____________/|\\_____________ |\n     exchange     |/ Renew\
    \        |  Renew       \\|\n                  |               |             \
    \  |\n                  |               | Commits extended lease(s)\n        \
    \          |               |               |\n                  |            \
    \   | _____________/|\n                  |               |/ Reply        |\n \
    \                 .               .               .\n                  .     \
    \          .               .\n                  |               |            \
    \   |\n                  |      Graceful shutdown        |\n                 \
    \ |               |               |\n     2-message    | _____________/|\\_____________\
    \ |\n     exchange     |/ Release      |  Release     \\|\n                  |\
    \               |               |\n                  |               |       \
    \  Discards lease(s)\n                  |               |               |\n  \
    \                |               | _____________/|\n                  |      \
    \         |/ Reply        |\n                  |               |             \
    \  |\n                  v               v               v\n   Figure 9: Timeline\
    \ Diagram of the Messages Exchanged between a Client\n      and Two Servers for\
    \ the Typical Lifecycle of One or More Leases\n"
- title: 18.1.  A Single Exchange for Multiple IA Options
  contents:
  - "18.1.  A Single Exchange for Multiple IA Options\n   This document assumes that\
    \ a client SHOULD use a single transaction\n   for all of the IA options required\
    \ on an interface; this simplifies\n   the client implementation and reduces the\
    \ potential number of\n   transactions required (for the background on this design\
    \ choice,\n   refer to Section 4 of [RFC7550]).  To facilitate a client's use\
    \ of a\n   single transaction for all IA options, servers MUST return the same\n\
    \   T1/T2 values for all IA options in a Reply (see Sections 18.3.2,\n   18.3.4,\
    \ and 18.3.5) so that the client will generate a single\n   transaction when renewing\
    \ or rebinding its leases.  However, because\n   some servers may not yet conform\
    \ to this requirement, a client MUST\n   be prepared to select appropriate T1/T2\
    \ times as described in\n   Section 18.2.4.\n"
- title: 18.2.  Client Behavior
  contents:
  - "18.2.  Client Behavior\n   A client uses the Solicit message to discover DHCP\
    \ servers configured\n   to assign leases or return other configuration parameters\
    \ on the link\n   to which the client is attached.\n   A client uses Request,\
    \ Renew, Rebind, Release, and Decline messages\n   during the normal lifecycle\
    \ of addresses and delegated prefixes.\n   When a client detects that it may have\
    \ moved to a new link, it uses\n   Confirm if it only has addresses and Rebind\
    \ if it has delegated\n   prefixes (and addresses).  It uses Information-request\
    \ messages when\n   it needs configuration information but no addresses and no\
    \ prefixes.\n   When a client requests multiple IA option types or multiple instances\n\
    \   of the same IA types in a Solicit, Request, Renew, or Rebind, it is\n   possible\
    \ that the available server(s) may only be configured to offer\n   a subset of\
    \ them.  When possible, the client SHOULD use the best\n   configuration available\
    \ and continue to request the additional IAs in\n   subsequent messages.  This\
    \ allows the client to maintain a single\n   session and state machine.  In practice,\
    \ especially in the case of\n   handling IA_NA and IA_PD requests [RFC7084], this\
    \ situation should be\n   rare or a result of a temporary operational error. \
    \ Thus, it is more\n   likely that the client will get all configuration if it\
    \ continues, in\n   each subsequent configuration exchange, to request all the\n\
    \   configuration information it is programmed to try to obtain,\n   including\
    \ any stateful configuration options for which no results\n   were returned in\
    \ previous message exchanges.\n   Upon receipt of a Reconfigure message from the\
    \ server, a client\n   responds with a Renew, Rebind, or Information-request message\
    \ as\n   indicated by the Reconfigure Message option (see Section 21.19).  The\n\
    \   client SHOULD be suspicious of the Reconfigure message (they may be\n   faked),\
    \ and it MUST NOT abandon any resources it might have already\n   obtained.  The\
    \ client SHOULD treat the Reconfigure message as if the\n   T1 timer had expired.\
    \  The client will expect the server to send IAs\n   and/or other configuration\
    \ information to the client in a Reply\n   message.\n   If the client has a source\
    \ address of sufficient scope that can be\n   used by the server as a return address\
    \ and the client has received a\n   Server Unicast option (see Section 21.12)\
    \ from the server, the client\n   SHOULD unicast any Request, Renew, Release,\
    \ and Decline messages to\n   the server.\n   Use of unicast may avoid delays\
    \ due to the relaying of messages by\n   relay agents, as well as avoid overhead\
    \ on servers due to the\n   delivery of client messages to multiple servers. \
    \ However, requiring\n   the client to relay all DHCP messages through a relay\
    \ agent enables\n   the inclusion of relay agent options in all messages sent\
    \ by the\n   client.  The server should enable the use of unicast only when relay\n\
    \   agent options will not be used.\n"
- title: 18.2.1.  Creation and Transmission of Solicit Messages
  contents:
  - "18.2.1.  Creation and Transmission of Solicit Messages\n   The client sets the\
    \ \"msg-type\" field to SOLICIT.  The client\n   generates a transaction ID and\
    \ inserts this value in the\n   \"transaction-id\" field.\n   The client MUST\
    \ include a Client Identifier option (see Section 21.2)\n   to identify itself\
    \ to the server.  The client includes IA options for\n   any IAs to which it wants\
    \ the server to assign leases.\n   The client MUST include an Elapsed Time option\
    \ (see Section 21.9) to\n   indicate how long the client has been trying to complete\
    \ the current\n   DHCP message exchange.\n   The client uses IA_NA options (see\
    \ Section 21.4) to request the\n   assignment of non-temporary addresses, IA_TA\
    \ options (see\n   Section 21.5) to request the assignment of temporary addresses,\
    \ and\n   IA_PD options (see Section 21.21) to request prefix delegation.\n  \
    \ IA_NA, IA_TA, or IA_PD options, or a combination of all, can be\n   included\
    \ in DHCP messages.  In addition, multiple instances of any IA\n   option type\
    \ can be included.\n   The client MAY include addresses in IA Address options\
    \ (see\n   Section 21.6) encapsulated within IA_NA and IA_TA options as hints\
    \ to\n   the server about the addresses for which the client has a preference.\n\
    \   The client MAY include values in IA Prefix options (see\n   Section 21.22)\
    \ encapsulated within IA_PD options as hints for the\n   delegated prefix and/or\
    \ prefix length for which the client has a\n   preference.  See Section 18.2.4\
    \ for more on prefix-length hints.\n   The client MUST include an Option Request\
    \ option (ORO) (see\n   Section 21.7) to request the SOL_MAX_RT option (see Section\
    \ 21.24)\n   and any other options the client is interested in receiving.  The\n\
    \   client MAY additionally include instances of those options that are\n   identified\
    \ in the Option Request option, with data values as hints to\n   the server about\
    \ parameter values the client would like to have\n   returned.\n   The client\
    \ includes a Reconfigure Accept option (see Section 21.20)\n   if the client is\
    \ willing to accept Reconfigure messages from the\n   server.\n   The client MUST\
    \ NOT include any other options in the Solicit message,\n   except as specifically\
    \ allowed in the definition of individual\n   options.\n   The first Solicit message\
    \ from the client on the interface SHOULD be\n   delayed by a random amount of\
    \ time between 0 and SOL_MAX_DELAY.  This\n   random delay helps desynchronize\
    \ clients that start a DHCP session at\n   the same time, such as after recovery\
    \ from a power failure or after a\n   router outage after seeing that DHCP is\
    \ available in Router\n   Advertisement messages (see Section 4.2 of [RFC4861]).\n\
    \   The client transmits the message according to Section 15, using the\n   following\
    \ parameters:\n      IRT     SOL_TIMEOUT\n      MRT     SOL_MAX_RT\n      MRC\
    \     0\n      MRD     0\n   A client that wishes to use the Rapid Commit two-message\
    \ exchange\n   includes a Rapid Commit option (see Section 21.14) in its Solicit\n\
    \   message.  The client may receive a number of different replies from\n   different\
    \ servers.  The client will make note of any valid Advertise\n   messages that\
    \ it receives.  The client will discard any Reply\n   messages that do not contain\
    \ the Rapid Commit option.\n   Upon receipt of a valid Reply with the Rapid Commit\
    \ option, the\n   client processes the message as described in Section 18.2.10.\n\
    \   At the end of the first RT period, if no suitable Reply messages are\n   received\
    \ but the client has valid Advertise messages, then the client\n   processes the\
    \ Advertise as described in Section 18.2.9.\n   If the client subsequently receives\
    \ a valid Reply message that\n   includes a Rapid Commit option, it does one of\
    \ the following:\n   -  processes the Reply message as described in Section 18.2.10\
    \ and\n      discards any Reply messages received in response to the Request\n\
    \      message\n   -  processes any Reply messages received in response to the\
    \ Request\n      message and discards the Reply message that includes the Rapid\n\
    \      Commit option\n   If the client is waiting for an Advertise message, the\
    \ mechanism\n   described in Section 15 is modified as follows for use in the\n\
    \   transmission of Solicit messages.  The message exchange is not\n   terminated\
    \ by the receipt of an Advertise before the first RT has\n   elapsed.  Rather,\
    \ the client collects valid Advertise messages until\n   the first RT has elapsed.\
    \  Also, the first RT MUST be selected to be\n   strictly greater than IRT by\
    \ choosing RAND to be strictly greater\n   than 0.\n   A client MUST collect valid\
    \ Advertise messages for the first\n   RT seconds, unless it receives a valid\
    \ Advertise message with a\n   preference value of 255.  The preference value\
    \ is carried in the\n   Preference option (see Section 21.8).  Any valid Advertise\
    \ that does\n   not include a Preference option is considered to have a preference\n\
    \   value of 0.  If the client receives a valid Advertise message that\n   includes\
    \ a Preference option with a preference value of 255, the\n   client immediately\
    \ begins a client-initiated message exchange (as\n   described in Section 18.2.2)\
    \ by sending a Request message to the\n   server from which the Advertise message\
    \ was received.  If the client\n   receives a valid Advertise message that does\
    \ not include a Preference\n   option with a preference value of 255, the client\
    \ continues to wait\n   until the first RT elapses.  If the first RT elapses and\
    \ the client\n   has received a valid Advertise message, the client SHOULD continue\n\
    \   with a client-initiated message exchange by sending a Request\n   message.\n\
    \   If the client does not receive any valid Advertise messages before\n   the\
    \ first RT has elapsed, it then applies the retransmission\n   mechanism described\
    \ in Section 15.  The client terminates the\n   retransmission process as soon\
    \ as it receives any valid Advertise\n   message, and the client acts on the received\
    \ Advertise message\n   without waiting for any additional Advertise messages.\n\
    \   A DHCP client SHOULD choose MRC and MRD values of 0.  If the DHCP\n   client\
    \ is configured with either MRC or MRD set to a value other than\n   0, it MUST\
    \ stop trying to configure the interface if the message\n   exchange fails.  After\
    \ the DHCP client stops trying to configure the\n   interface, it SHOULD restart\
    \ the reconfiguration process after some\n   external event, such as user input,\
    \ system restart, or when the\n   client is attached to a new link.\n"
- title: 18.2.2.  Creation and Transmission of Request Messages
  contents:
  - "18.2.2.  Creation and Transmission of Request Messages\n   The client uses a\
    \ Request message to populate IAs with leases and\n   obtain other configuration\
    \ information.  The client includes one or\n   more IA options in the Request\
    \ message.  The server then returns\n   leases and other information about the\
    \ IAs to the client in IA\n   options in a Reply message.\n   The client sets\
    \ the \"msg-type\" field to REQUEST.  The client\n   generates a transaction ID\
    \ and inserts this value in the\n   \"transaction-id\" field.\n   The client MUST\
    \ include the identifier of the destination server in a\n   Server Identifier\
    \ option (see Section 21.3).\n   The client MUST include a Client Identifier option\
    \ (see Section 21.2)\n   to identify itself to the server.  The client adds any\
    \ other\n   appropriate options, including one or more IA options.\n   The client\
    \ MUST include an Elapsed Time option (see Section 21.9) to\n   indicate how long\
    \ the client has been trying to complete the current\n   DHCP message exchange.\n\
    \   The client MUST include an Option Request option (see Section 21.7)\n   to\
    \ request the SOL_MAX_RT option (see Section 21.24) and any other\n   options\
    \ the client is interested in receiving.  The client MAY\n   additionally include\
    \ instances of those options that are identified\n   in the Option Request option,\
    \ with data values as hints to the server\n   about parameter values the client\
    \ would like to have returned.\n   The client includes a Reconfigure Accept option\
    \ (see Section 21.20)\n   if the client is willing to accept Reconfigure messages\
    \ from the\n   server.\n   The client transmits the message according to Section\
    \ 15, using the\n   following parameters:\n      IRT     REQ_TIMEOUT\n      MRT\
    \     REQ_MAX_RT\n      MRC     REQ_MAX_RC\n      MRD     0\n   If the message\
    \ exchange fails, the client takes an action based on\n   the client's local policy.\
    \  Examples of actions the client might take\n   include the following:\n   -\
    \  Select another server from a list of servers known to the client\n      --\
    \ for example, servers that responded with an Advertise message.\n   -  Initiate\
    \ the server discovery process described in Section 18.\n   -  Terminate the configuration\
    \ process and report failure.\n"
- title: 18.2.3.  Creation and Transmission of Confirm Messages
  contents:
  - "18.2.3.  Creation and Transmission of Confirm Messages\n   The client uses a\
    \ Confirm message when it has only addresses (no\n   delegated prefixes) assigned\
    \ by a DHCP server to determine if it is\n   still connected to the same link\
    \ when the client detects a change in\n   network information as described in\
    \ Section 18.2.12.\n   The client sets the \"msg-type\" field to CONFIRM.  The\
    \ client\n   generates a transaction ID and inserts this value in the\n   \"transaction-id\"\
    \ field.\n   The client MUST include a Client Identifier option (see Section 21.2)\n\
    \   to identify itself to the server.\n   The client MUST include an Elapsed Time\
    \ option (see Section 21.9) to\n   indicate how long the client has been trying\
    \ to complete the current\n   DHCP message exchange.\n   The client includes IA\
    \ options for all of the IAs assigned to the\n   interface for which the Confirm\
    \ message is being sent.  The IA\n   options include all of the addresses the\
    \ client currently has\n   associated with those IAs.  The client SHOULD set the\
    \ T1 and T2\n   fields in any IA_NA options (see Section 21.4) and the\n   preferred-lifetime\
    \ and valid-lifetime fields in the IA Address\n   options (see Section 21.6) to\
    \ 0, as the server will ignore these\n   fields.\n   The first Confirm message\
    \ from the client on the interface MUST be\n   delayed by a random amount of time\
    \ between 0 and CNF_MAX_DELAY.  The\n   client transmits the message according\
    \ to Section 15, using the\n   following parameters:\n      IRT     CNF_TIMEOUT\n\
    \      MRT     CNF_MAX_RT\n      MRC     0\n      MRD     CNF_MAX_RD\n   If the\
    \ client receives no responses before the message transmission\n   process terminates,\
    \ as described in Section 15, the client SHOULD\n   continue to use any leases,\
    \ using the last known lifetimes for those\n   leases, and SHOULD continue to\
    \ use any other previously obtained\n   configuration parameters.\n"
- title: 18.2.4.  Creation and Transmission of Renew Messages
  contents:
  - "18.2.4.  Creation and Transmission of Renew Messages\n   To extend the preferred\
    \ and valid lifetimes for the leases assigned\n   to the IAs and obtain new addresses\
    \ or delegated prefixes for IAs,\n   the client sends a Renew message to the server\
    \ from which the leases\n   were obtained; the Renew message includes IA options\
    \ for the IAs\n   whose lease lifetimes are to be extended.  The client includes\
    \ IA\n   Address options (see Section 21.6) within IA_NA (see Section 21.4)\n\
    \   and IA_TA (see Section 21.5) options for the addresses assigned to\n   the\
    \ IAs.  The client includes IA Prefix options (see Section 21.22)\n   within IA_PD\
    \ options (see Section 21.21) for the delegated prefixes\n   assigned to the IAs.\n\
    \   The server controls the time at which the client should contact the\n   server\
    \ to extend the lifetimes on assigned leases through the T1 and\n   T2 values\
    \ assigned to an IA.  However, as the client SHOULD\n   renew/rebind all IAs from\
    \ the server at the same time, the client\n   MUST select T1 and T2 times from\
    \ all IA options that will guarantee\n   that the client initiates transmissions\
    \ of Renew/Rebind messages not\n   later than at the T1/T2 times associated with\
    \ any of the client's\n   bindings (earliest T1/T2).\n   At time T1, the client\
    \ initiates a Renew/Reply message exchange to\n   extend the lifetimes on any\
    \ leases in the IA.\n   A client MUST also initiate a Renew/Reply message exchange\
    \ before\n   time T1 if the client's link-local address used in previous\n   interactions\
    \ with the server is no longer valid and it is willing to\n   receive Reconfigure\
    \ messages.\n   If T1 or T2 had been set to 0 by the server (for an IA_NA or IA_PD)\n\
    \   or there are no T1 or T2 times (for an IA_TA) in a previous Reply,\n   the\
    \ client may, at its discretion, send a Renew or Rebind message,\n   respectively.\
    \  The client MUST follow the rules defined in\n   Section 14.2.\n   The client\
    \ sets the \"msg-type\" field to RENEW.  The client generates\n   a transaction\
    \ ID and inserts this value in the \"transaction-id\"\n   field.\n   The client\
    \ MUST include a Server Identifier option (see Section 21.3)\n   in the Renew\
    \ message, identifying the server with which the client\n   most recently communicated.\n\
    \   The client MUST include a Client Identifier option (see Section 21.2)\n  \
    \ to identify itself to the server.  The client adds any appropriate\n   options,\
    \ including one or more IA options.\n   The client MUST include an Elapsed Time\
    \ option (see Section 21.9) to\n   indicate how long the client has been trying\
    \ to complete the current\n   DHCP message exchange.\n   For IAs to which leases\
    \ have been assigned, the client includes a\n   corresponding IA option containing\
    \ an IA Address option for each\n   address assigned to the IA and an IA Prefix\
    \ option for each prefix\n   assigned to the IA.  The client MUST NOT include\
    \ addresses and\n   prefixes in any IA option that the client did not obtain from\
    \ the\n   server or that are no longer valid (that have a valid lifetime of 0).\n\
    \   The client MAY include an IA option for each binding it desires but\n   has\
    \ been unable to obtain.  In this case, if the client includes the\n   IA_PD option\
    \ to request prefix delegation, the client MAY include the\n   IA Prefix option\
    \ encapsulated within the IA_PD option, with the\n   \"IPv6-prefix\" field set\
    \ to 0 and the \"prefix-length\" field set to the\n   desired length of the prefix\
    \ to be delegated.  The server MAY use\n   this value as a hint for the prefix\
    \ length.  The client SHOULD NOT\n   include an IA Prefix option with the \"IPv6-prefix\"\
    \ field set to 0\n   unless it is supplying a hint for the prefix length.\n  \
    \ The client includes an Option Request option (see Section 21.7) to\n   request\
    \ the SOL_MAX_RT option (see Section 21.24) and any other\n   options the client\
    \ is interested in receiving.  The client MAY\n   include options with data values\
    \ as hints to the server about\n   parameter values the client would like to have\
    \ returned.\n   The client transmits the message according to Section 15, using\
    \ the\n   following parameters:\n      IRT     REN_TIMEOUT\n      MRT     REN_MAX_RT\n\
    \      MRC     0\n      MRD     Remaining time until earliest T2\n   The message\
    \ exchange is terminated when the earliest time T2 is\n   reached.  While the\
    \ client is responding to a Reconfigure, the client\n   ignores and discards any\
    \ additional Reconfigure messages it may\n   receive.\n   The message exchange\
    \ is terminated when the earliest time T2 is\n   reached, at which point the client\
    \ begins the Rebind message exchange\n   (see Section 18.2.5).\n"
- title: 18.2.5.  Creation and Transmission of Rebind Messages
  contents:
  - "18.2.5.  Creation and Transmission of Rebind Messages\n   At time T2 (which will\
    \ only be reached if the server to which the\n   Renew message was sent starting\
    \ at time T1 has not responded), the\n   client initiates a Rebind/Reply message\
    \ exchange with any available\n   server.\n   A Rebind is also used to verify\
    \ delegated prefix bindings but with\n   different retransmission parameters as\
    \ described in Section 18.2.3.\n   The client constructs the Rebind message as\
    \ described in\n   Section 18.2.4, with the following differences:\n   -  The\
    \ client sets the \"msg-type\" field to REBIND.\n   -  The client does not include\
    \ the Server Identifier option (see\n      Section 21.3) in the Rebind message.\n\
    \   The client transmits the message according to Section 15, using the\n   following\
    \ parameters:\n      IRT     REB_TIMEOUT\n      MRT     REB_MAX_RT\n      MRC\
    \     0\n      MRD     Remaining time until valid lifetimes of all leases in all\n\
    \              IAs have expired\n   If all leases for an IA have expired, the\
    \ client may choose to\n   include this IA in subsequent Rebind messages to indicate\
    \ that the\n   client is interested in assignment of the leases to this IA.\n\
    \   The message exchange is terminated when the valid lifetimes of all\n   leases\
    \ across all IAs have expired, at which time the client uses the\n   Solicit message\
    \ to locate a new DHCP server and sends a Request for\n   the expired IAs to the\
    \ new server.  If the terminated Rebind exchange\n   was initiated as a result\
    \ of receiving a Reconfigure message, the\n   client ignores and discards the\
    \ Reconfigure message.\n"
- title: 18.2.6.  Creation and Transmission of Information-request Messages
  contents:
  - "18.2.6.  Creation and Transmission of Information-request Messages\n   The client\
    \ uses an Information-request message to obtain\n   configuration information\
    \ without having addresses and/or delegated\n   prefixes assigned to it.\n   The\
    \ client sets the \"msg-type\" field to INFORMATION-REQUEST.  The\n   client generates\
    \ a transaction ID and inserts this value in the\n   \"transaction-id\" field.\n\
    \   The client SHOULD include a Client Identifier option (see\n   Section 21.2)\
    \ to identify itself to the server (however, see\n   Section 4.3.1 of [RFC7844]\
    \ for reasons why a client may not want to\n   include this option).  If the client\
    \ does not include a Client\n   Identifier option, the server will not be able\
    \ to return any\n   client-specific options to the client, or the server may choose\
    \ not\n   to respond to the message at all.\n   The client MUST include an Elapsed\
    \ Time option (see Section 21.9) to\n   indicate how long the client has been\
    \ trying to complete the current\n   DHCP message exchange.\n   The client MUST\
    \ include an Option Request option (see Section 21.7)\n   to request the INF_MAX_RT\
    \ option (see Section 21.25), the Information\n   Refresh Time option (see Section\
    \ 21.23), and any other options the\n   client is interested in receiving.  The\
    \ client MAY include options\n   with data values as hints to the server about\
    \ parameter values the\n   client would like to have returned.\n   When responding\
    \ to a Reconfigure, the client includes a Server\n   Identifier option (see Section\
    \ 21.3) with the identifier from the\n   Reconfigure message to which the client\
    \ is responding.\n   The first Information-request message from the client on\
    \ the\n   interface MUST be delayed by a random amount of time between 0 and\n\
    \   INF_MAX_DELAY.  The client transmits the message according to\n   Section\
    \ 15, using the following parameters:\n      IRT     INF_TIMEOUT\n      MRT  \
    \   INF_MAX_RT\n      MRC     0\n      MRD     0\n"
- title: 18.2.7.  Creation and Transmission of Release Messages
  contents:
  - "18.2.7.  Creation and Transmission of Release Messages\n   To release one or\
    \ more leases, a client sends a Release message to\n   the server.\n   The client\
    \ sets the \"msg-type\" field to RELEASE.  The client\n   generates a transaction\
    \ ID and places this value in the\n   \"transaction-id\" field.\n   The client\
    \ places the identifier of the server that allocated the\n   lease(s) in a Server\
    \ Identifier option (see Section 21.3).\n   The client MUST include a Client Identifier\
    \ option (see Section 21.2)\n   to identify itself to the server.\n   The client\
    \ MUST include an Elapsed Time option (see Section 21.9) to\n   indicate how long\
    \ the client has been trying to complete the current\n   DHCP message exchange.\n\
    \   The client includes options containing the IAs for the leases it is\n   releasing\
    \ in the \"options\" field.  The leases to be released MUST be\n   included in\
    \ the IAs.  Any leases for the IAs the client wishes to\n   continue to use MUST\
    \ NOT be added to the IAs.\n   The client MUST stop using all of the leases being\
    \ released before\n   the client begins the Release message exchange process.\
    \  For an\n   address, this means the address MUST have been removed from the\n\
    \   interface.  For a delegated prefix, this means the prefix MUST have\n   been\
    \ advertised with a Preferred Lifetime and a Valid Lifetime of 0\n   in a Router\
    \ Advertisement message as described in part (e) of\n   Section 5.5.3 of [RFC4862];\
    \ also see requirement L-13 in Section 4.3\n   of [RFC7084].\n   The client MUST\
    \ NOT use any of the addresses it is releasing as the\n   source address in the\
    \ Release message or in any subsequently\n   transmitted message.\n   Because\
    \ Release messages may be lost, the client should retransmit\n   the Release if\
    \ no Reply is received.  However, there are scenarios\n   where the client may\
    \ not wish to wait for the normal retransmission\n   timeout before giving up\
    \ (e.g., on power down).  Implementations\n   SHOULD retransmit one or more times\
    \ but MAY choose to terminate the\n   retransmission procedure early.\n   The\
    \ client transmits the message according to Section 15, using the\n   following\
    \ parameters:\n      IRT     REL_TIMEOUT\n      MRT     0\n      MRC     REL_MAX_RC\n\
    \      MRD     0\n   If leases are released but the Reply from a DHCP server is\
    \ lost, the\n   client will retransmit the Release message, and the server may\n\
    \   respond with a Reply indicating a status of NoBinding.  Therefore,\n   the\
    \ client does not treat a Reply message with a status of NoBinding\n   in a Release\
    \ message exchange as if it indicates an error.\n   Note that if the client fails\
    \ to release the lease, each lease\n   assigned to the IA will be reclaimed by\
    \ the server when the valid\n   lifetime of that lease expires.\n"
- title: 18.2.8.  Creation and Transmission of Decline Messages
  contents:
  - "18.2.8.  Creation and Transmission of Decline Messages\n   If a client detects\
    \ that one or more addresses assigned to it by a\n   server are already in use\
    \ by another node, the client sends a Decline\n   message to the server to inform\
    \ it that the address is suspect.\n   The Decline message is not used in prefix\
    \ delegation; thus, the\n   client MUST NOT include IA_PD options (see Section\
    \ 21.21) in the\n   Decline message.\n   The client sets the \"msg-type\" field\
    \ to DECLINE.  The client\n   generates a transaction ID and places this value\
    \ in the\n   \"transaction-id\" field.\n   The client places the identifier of\
    \ the server that allocated the\n   address(es) in a Server Identifier option\
    \ (see Section 21.3).\n   The client MUST include a Client Identifier option (see\
    \ Section 21.2)\n   to identify itself to the server.\n   The client MUST include\
    \ an Elapsed Time option (see Section 21.9) to\n   indicate how long the client\
    \ has been trying to complete the current\n   DHCP message exchange.\n   The client\
    \ includes options containing the IAs for the addresses it\n   is declining in\
    \ the \"options\" field.  The addresses to be declined\n   MUST be included in\
    \ the IAs.  Any addresses for the IAs the client\n   wishes to continue to use\
    \ should not be added to the IAs.\n   The client MUST NOT use any of the addresses\
    \ it is declining as the\n   source address in the Decline message or in any subsequently\n\
    \   transmitted message.\n   The client transmits the message according to Section\
    \ 15, using the\n   following parameters:\n      IRT     DEC_TIMEOUT\n      MRT\
    \     0\n      MRC     DEC_MAX_RC\n      MRD     0\n   If addresses are declined\
    \ but the Reply from a DHCP server is lost,\n   the client will retransmit the\
    \ Decline message, and the server may\n   respond with a Reply indicating a status\
    \ of NoBinding.  Therefore,\n   the client does not treat a Reply message with\
    \ a status of NoBinding\n   in a Decline message exchange as if it indicates an\
    \ error.\n   The client SHOULD NOT send a Release message for other bindings it\n\
    \   may have received just because it sent a Decline message.  The client\n  \
    \ SHOULD retain the non-conflicting bindings.  The client SHOULD treat\n   the\
    \ failure to acquire a binding (due to the conflict) as equivalent\n   to not\
    \ having received the binding, insofar as how it behaves when\n   sending Renew\
    \ and Rebind messages.\n"
- title: 18.2.9.  Receipt of Advertise Messages
  contents:
  - "18.2.9.  Receipt of Advertise Messages\n   Upon receipt of one or more valid\
    \ Advertise messages, the client\n   selects one or more Advertise messages based\
    \ upon the following\n   criteria.\n   -  Those Advertise messages with the highest\
    \ server preference value\n      SHOULD be preferred over all other Advertise\
    \ messages.  The client\n      MAY choose a less preferred server if that server\
    \ has a better set\n      of advertised parameters, such as the available set\
    \ of IAs, as\n      well as the set of other configuration options advertised.\n\
    \   -  Within a group of Advertise messages with the same server\n      preference\
    \ value, a client MAY select those servers whose\n      Advertise messages advertise\
    \ information of interest to the\n      client.\n   Once a client has selected\
    \ Advertise message(s), the client will\n   typically store information about\
    \ each server, such as the server\n   preference value, addresses advertised,\
    \ when the advertisement was\n   received, and so on.\n   In practice, this means\
    \ that the client will maintain independent\n   per-IA state machines for each\
    \ selected server.\n   If the client needs to select an alternate server in the\
    \ case that a\n   chosen server does not respond, the client chooses the next\
    \ server\n   according to the criteria given above.\n   The client MUST process\
    \ any SOL_MAX_RT option (see Section 21.24) and\n   INF_MAX_RT option (see Section\
    \ 21.25) present in an Advertise\n   message, even if the message contains a Status\
    \ Code option (see\n   Section 21.13) indicating a failure, and the Advertise\
    \ message will\n   be discarded by the client.  A client SHOULD only update its\n\
    \   SOL_MAX_RT and INF_MAX_RT values if all received Advertise messages\n   that\
    \ contained the corresponding option specified the same value;\n   otherwise,\
    \ it should use the default value (see Section 7.6).\n   The client MUST ignore\
    \ any Advertise message that contains no\n   addresses (IA Address options (see\
    \ Section 21.6) encapsulated in\n   IA_NA options (see Section 21.4) or IA_TA\
    \ options (see Section 21.5))\n   and no delegated prefixes (IA Prefix options\
    \ (see Section 21.22)\n   encapsulated in IA_PD options (see Section 21.21)),\
    \ with the\n   exception that the client:\n   -  MUST process an included SOL_MAX_RT\
    \ option and\n   -  MUST process an included INF_MAX_RT option.\n   A client can\
    \ record in an activity log or display to the user any\n   associated status message(s).\n\
    \   The client ignoring an Advertise message MUST NOT restart the Solicit\n  \
    \ retransmission timer.\n"
- title: 18.2.10.  Receipt of Reply Messages
  contents:
  - "18.2.10.  Receipt of Reply Messages\n   Upon the receipt of a valid Reply message\
    \ in response to a Solicit\n   with a Rapid Commit option (see Section 21.14),\
    \ Request, Confirm,\n   Renew, Rebind, or Information-request message, the client\
    \ extracts\n   the top-level Status Code option (see Section 21.13) if present.\n\
    \   The client MUST process any SOL_MAX_RT option (see Section 21.24) and\n  \
    \ INF_MAX_RT option (see Section 21.25) present in a Reply message,\n   even if\
    \ the message contains a Status Code option indicating a\n   failure.\n   If the\
    \ client receives a Reply message with a status code of\n   UnspecFail, the server\
    \ is indicating that it was unable to process\n   the client's message due to\
    \ an unspecified failure condition.  If the\n   client retransmits the original\
    \ message to the same server to retry\n   the desired operation, the client MUST\
    \ limit the rate at which it\n   retransmits the message and limit the duration\
    \ of the time during\n   which it retransmits the message (see Section 14.1).\n\
    \   If the client receives a Reply message with a status code of\n   UseMulticast,\
    \ the client records the receipt of the message and sends\n   subsequent messages\
    \ to the server through the interface on which the\n   message was received using\
    \ multicast.  The client resends the\n   original message using multicast.\n \
    \  Otherwise (no status code or another status code), the client\n   processes\
    \ the Reply as described below based on the original message\n   for which the\
    \ Reply was received.\n   The client MAY choose to report any status code or message\
    \ from the\n   Status Code option in the Reply message.\n   When a client received\
    \ a configuration option in an earlier Reply and\n   then sends a Renew, Rebind,\
    \ or Information-request and the requested\n   option is not present in the Reply,\
    \ the client SHOULD stop using the\n   previously received configuration information.\
    \  In other words, the\n   client should behave as if it never received this configuration\n\
    \   option and return to the relevant default state.  If there is no\n   viable\
    \ way to stop using the received configuration information, the\n   values received/configured\
    \ from the option MAY persist if there are\n   no other sources for that data\
    \ and they have no external impact.  For\n   example, a client that previously\
    \ received a Client FQDN option (see\n   [RFC4704]) and used it to set up its\
    \ hostname is allowed to continue\n   using it if there is no reasonable way for\
    \ a node to unset its\n   hostname and it has no external impact.  As a counter-example,\
    \ a\n   client that previously received an NTP server address from the DHCP\n\
    \   server and does not receive it anymore MUST stop using the configured\n  \
    \ NTP server address.  The client SHOULD be open to other sources of\n   the same\
    \ configuration information.  This behavior does not apply to\n   any IA options,\
    \ as their processing is described in detail in the\n   next section.\n   When\
    \ a client receives a requested option that has an updated value\n   from what\
    \ was previously received, the client SHOULD make use of that\n   updated value\
    \ as soon as possible for its configuration information.\n"
- title: 18.2.10.1.  Reply for Solicit (with Rapid Commit), Request, Renew, or
  contents:
  - "18.2.10.1.  Reply for Solicit (with Rapid Commit), Request, Renew, or\n     \
    \       Rebind\n   If the client receives a NotOnLink status from the server in\
    \ response\n   to a Solicit (with a Rapid Commit option; see Section 21.14) or\
    \ a\n   Request, the client can either reissue the message without specifying\n\
    \   any addresses or restart the DHCP server discovery process (see\n   Section\
    \ 18).\n   If the Reply was received in response to a Solicit (with a Rapid\n\
    \   Commit option), Request, Renew, or Rebind message, the client updates\n  \
    \ the information it has recorded about IAs from the IA options\n   contained\
    \ in the Reply message:\n   -  Calculate T1 and T2 times (based on T1 and T2 values\
    \ sent in the\n      packet and the packet reception time), if appropriate for\
    \ the\n      IA type.\n   -  Add any new leases in the IA option to the IA as\
    \ recorded by the\n      client.\n   -  Update lifetimes for any leases in the\
    \ IA option that the client\n      already has recorded in the IA.\n   -  Discard\
    \ any leases from the IA, as recorded by the client, that\n      have a valid\
    \ lifetime of 0 in the IA Address or IA Prefix option.\n   -  Leave unchanged\
    \ any information about leases the client has\n      recorded in the IA but that\
    \ were not included in the IA from the\n      server.\n   If the client can operate\
    \ with the addresses and/or prefixes obtained\n   from the server:\n   -  The\
    \ client uses the addresses, delegated prefixes, and other\n      information\
    \ from any IAs that do not contain a Status Code option\n      with the NoAddrsAvail\
    \ or NoPrefixAvail status code.  The client\n      MAY include the IAs for which\
    \ it received the NoAddrsAvail or\n      NoPrefixAvail status code, with no addresses\
    \ or prefixes, in\n      subsequent Renew and Rebind messages sent to the server,\
    \ to retry\n      obtaining the addresses or prefixes for these IAs.\n   -  The\
    \ client MUST perform duplicate address detection as per\n      Section 5.4 of\
    \ [RFC4862], which does list some exceptions, on each\n      of the received addresses\
    \ in any IAs on which it has not performed\n      duplicate address detection\
    \ during processing of any of the\n      previous Reply messages from the server.\
    \  The client performs the\n      duplicate address detection before using the\
    \ received addresses\n      for any traffic.  If any of the addresses are found\
    \ to be in use\n      on the link, the client sends a Decline message to the server\
    \ for\n      those addresses as described in Section 18.2.8.\n   -  For each assigned\
    \ address that does not have any associated\n      reachability information (see\
    \ the definition of \"on-link\" in\n      Section 2.1 of [RFC4861]), in order\
    \ to avoid the problems\n      described in [RFC4943], the client MUST NOT assume\
    \ that any\n      addresses are reachable on-link as a result of receiving an\
    \ IA_NA\n      or IA_TA.  Addresses obtained from an IA_NA or IA_TA MUST NOT be\n\
    \      used to form an implicit prefix with a length other than 128.\n   -  For\
    \ each delegated prefix, the client assigns a subnet to each of\n      the links\
    \ to which the associated interfaces are attached.\n      When a client subnets\
    \ a delegated prefix, it must assign\n      additional bits to the prefix to generate\
    \ unique, longer prefixes.\n      For example, if the client in Figure 1 were\
    \ delegated\n      2001:db8:0::/48, it might generate 2001:db8:0:1::/64 and\n\
    \      2001:db8:0:2::/64 for assignment to the two links in the\n      subscriber\
    \ network.  If the client were delegated 2001:db8:0::/48\n      and 2001:db8:5::/48,\
    \ it might assign 2001:db8:0:1::/64 and\n      2001:db8:5:1::/64 to one of the\
    \ links, and 2001:db8:0:2::/64 and\n      2001:db8:5:2::/64 for assignment to\
    \ the other link.\n      If the client uses a delegated prefix to configure addresses\
    \ on\n      interfaces on itself or other nodes behind it, the preferred and\n\
    \      valid lifetimes of those addresses MUST be no longer than the\n      remaining\
    \ preferred and valid lifetimes, respectively, for the\n      delegated prefix\
    \ at any time.  In particular, if the delegated\n      prefix or a prefix derived\
    \ from it is advertised for stateless\n      address autoconfiguration [RFC4862],\
    \ the advertised preferred and\n      valid lifetimes MUST NOT exceed the corresponding\
    \ remaining\n      lifetimes of the delegated prefix.\n   Management of the specific\
    \ configuration information is detailed in\n   the definition of each option in\
    \ Section 21.\n   If the Reply message contains any IAs but the client finds no\
    \ usable\n   addresses and/or delegated prefixes in any of these IAs, the client\n\
    \   may either try another server (perhaps restarting the DHCP server\n   discovery\
    \ process) or use the Information-request message to obtain\n   other configuration\
    \ information only.\n   When the client receives a Reply message in response to\
    \ a Renew or\n   Rebind message, the client:\n   -  Sends a Request message to\
    \ the server that responded if any of the\n      IAs in the Reply message contain\
    \ the NoBinding status code.  The\n      client places IA options in this message\
    \ for all IAs.  The client\n      continues to use other bindings for which the\
    \ server did not\n      return an error.\n   -  Sends a Renew/Rebind if any of\
    \ the IAs are not in the Reply\n      message, but as this likely indicates that\
    \ the server that\n      responded does not support that IA type, sending immediately\
    \ is\n      unlikely to produce a different result.  Therefore, the client\n \
    \     MUST rate-limit its transmissions (see Section 14.1) and MAY just\n    \
    \  wait for the normal retransmission time (as if the Reply message\n      had\
    \ not been received).  The client continues to use other\n      bindings for which\
    \ the server did return information.\n   -  Otherwise accepts the information\
    \ in the IA.\n   Whenever a client restarts the DHCP server discovery process\
    \ or\n   selects an alternate server as described in Section 18.2.9, the\n   client\
    \ SHOULD stop using all the addresses and delegated prefixes for\n   which it\
    \ has bindings and try to obtain all required leases from the\n   new server.\
    \  This facilitates the client using a single state machine\n   for all bindings.\n"
- title: 18.2.10.2.  Reply for Release and Decline
  contents:
  - "18.2.10.2.  Reply for Release and Decline\n   When the client receives a valid\
    \ Reply message in response to a\n   Release message, the client considers the\
    \ Release event completed,\n   regardless of the Status Code option (see Section\
    \ 21.13) returned by\n   the server.\n   When the client receives a valid Reply\
    \ message in response to a\n   Decline message, the client considers the Decline\
    \ event completed,\n   regardless of the Status Code option(s) returned by the\
    \ server.\n"
- title: 18.2.10.3.  Reply for Confirm
  contents:
  - "18.2.10.3.  Reply for Confirm\n   If the client receives any Reply messages that\
    \ indicate a status of\n   Success (explicit or implicit), the client can use\
    \ the addresses in\n   the IA and ignore any messages that indicate a NotOnLink\
    \ status.\n   When the client only receives one or more Reply messages with the\n\
    \   NotOnLink status in response to a Confirm message, the client\n   performs\
    \ DHCP server discovery as described in Section 18.\n"
- title: 18.2.10.4.  Reply for Information-request
  contents:
  - "18.2.10.4.  Reply for Information-request\n   Refer to Section 21.23 for details\
    \ on how the Information Refresh\n   Time option (whether or not present in the\
    \ Reply) should be handled\n   by the client.\n"
- title: 18.2.11.  Receipt of Reconfigure Messages
  contents:
  - "18.2.11.  Receipt of Reconfigure Messages\n   A client receives Reconfigure messages\
    \ sent to UDP port 546 on\n   interfaces for which it has acquired configuration\
    \ information\n   through DHCP.  These messages may be sent at any time.  Since\
    \ the\n   results of a reconfiguration event may affect application-layer\n  \
    \ programs, the client SHOULD log these events and MAY notify these\n   programs\
    \ of the change through an implementation-specific interface.\n   Upon receipt\
    \ of a valid Reconfigure message, the client responds with\n   a Renew message,\
    \ a Rebind message, or an Information-request message\n   as indicated by the\
    \ Reconfigure Message option (see Section 21.19).\n   The client ignores the \"\
    transaction-id\" field in the received\n   Reconfigure message.  While the transaction\
    \ is in progress, the\n   client discards any Reconfigure messages it receives.\n\
    \   The Reconfigure message acts as a trigger that signals the client to\n   complete\
    \ a successful message exchange.  Once the client has received\n   a Reconfigure,\
    \ the client proceeds with the message exchange\n   (retransmitting the Renew,\
    \ Rebind, or Information-request message if\n   necessary); the client MUST ignore\
    \ any additional Reconfigure\n   messages until the exchange is complete.\n  \
    \ Duplicate messages will be ignored because the client will begin the\n   exchange\
    \ after the receipt of the first Reconfigure.  Retransmitted\n   messages will\
    \ either (1) trigger the exchange (if the first\n   Reconfigure was not received\
    \ by the client) or (2) be ignored.  The\n   server MAY discontinue retransmission\
    \ of Reconfigure messages to the\n   client once the server receives the Renew,\
    \ Rebind, or\n   Information-request message from the client.\n   It might be\
    \ possible for a duplicate or retransmitted Reconfigure to\n   be sufficiently\
    \ delayed (and delivered out of order) that it arrives\n   at the client after\
    \ the exchange (initiated by the original\n   Reconfigure) has been completed.\
    \  In this case, the client would\n   initiate a redundant exchange.  The likelihood\
    \ of delayed and\n   out-of-order delivery is small enough to be ignored.  The\
    \ consequence\n   of the redundant exchange is inefficiency rather than incorrect\n\
    \   operation.\n"
- title: 18.2.12.  Refreshing Configuration Information
  contents:
  - "18.2.12.  Refreshing Configuration Information\n   Whenever a client may have\
    \ moved to a new link, the\n   prefixes/addresses assigned to the interfaces on\
    \ that link may no\n   longer be appropriate for the link to which the client\
    \ is attached.\n   Examples of times when a client may have moved to a new link\
    \ include\n   the following:\n   -  The client reboots (and has stable storage\
    \ and persistent DHCP\n      state).\n   -  The client is reconnected to a link\
    \ on which it has obtained\n      leases.\n   -  The client returns from sleep\
    \ mode.\n   -  The client changes access points (e.g., if using Wi-Fi\n      technology).\n\
    \   When the client detects that it may have moved to a new link and it\n   has\
    \ obtained addresses and no delegated prefixes from a server, the\n   client SHOULD\
    \ initiate a Confirm/Reply message exchange.  The client\n   includes any IAs\
    \ assigned to the interface that may have moved to a\n   new link, along with\
    \ the addresses associated with those IAs, in its\n   Confirm message.  Any responding\
    \ servers will indicate whether those\n   addresses are appropriate for the link\
    \ to which the client is\n   attached with the status in the Reply message it\
    \ returns to the\n   client.\n   If the client has any valid delegated prefixes\
    \ obtained from the DHCP\n   server, the client MUST initiate a Rebind/Reply message\
    \ exchange as\n   described in Section 18.2.5, with the exception that the\n \
    \  retransmission parameters should be set as for the Confirm message\n   (see\
    \ Section 18.2.3).  The client includes IA_NAs, IA_TAs, and\n   IA_PDs, along\
    \ with the associated leases, in its Rebind message.\n   If the client has only\
    \ obtained network information using\n   Information-request/Reply message exchanges,\
    \ the client MUST initiate\n   an Information-request/Reply message exchange as\
    \ described in\n   Section 18.2.6.\n   If not associated with one of the above-mentioned\
    \ conditions, a\n   client SHOULD initiate a Renew/Reply exchange (as if the T1\
    \ time\n   expired) as described in Section 18.2.4 or an Information-request/\n\
    \   Reply exchange as described in Section 18.2.6 if the client detects a\n  \
    \ significant change regarding the prefixes available on the link (when\n   new\
    \ prefixes are added or existing prefixes are deprecated), as this\n   may indicate\
    \ a configuration change.  However, a client MUST\n   rate-limit such attempts\
    \ to avoid flooding a server with requests\n   when there are link issues (for\
    \ example, only doing one of these at\n   most every 30 seconds).\n"
- title: 18.3.  Server Behavior
  contents:
  - "18.3.  Server Behavior\n   For this discussion, the server is assumed to have\
    \ been configured in\n   an implementation-specific manner with configurations\
    \ of interest to\n   clients.\n   A server sends an Advertise message in response\
    \ to each valid Solicit\n   message it receives to announce the availability of\
    \ the server to the\n   client.\n   In most cases, the server will send a Reply\
    \ in response to Request,\n   Confirm, Renew, Rebind, Decline, Release, and Information-request\n\
    \   messages sent by a client.  The server will also send a Reply in\n   response\
    \ to a Solicit with a Rapid Commit option (see Section 21.14)\n   when the server\
    \ is configured to respond with committed lease\n   assignments.\n   These Advertise\
    \ and Reply messages MUST always contain the Server\n   Identifier option (see\
    \ Section 21.3) containing the server's DUID and\n   the Client Identifier option\
    \ (see Section 21.2) from the client\n   message if one was present.\n   In most\
    \ response messages, the server includes options containing\n   configuration\
    \ information for the client.  The server must be aware\n   of the recommendations\
    \ on packet sizes and the use of fragmentation\n   as discussed in Section 5 of\
    \ [RFC8200].  If the client included an\n   Option Request option (see Section\
    \ 21.7) in its message, the server\n   includes options in the response message\
    \ containing configuration\n   parameters for all of the options identified in\
    \ the Option Request\n   option that the server has been configured to return\
    \ to the client.\n   The server MAY return additional options to the client if\
    \ it has been\n   configured to do so.\n   Any message sent from a client may\
    \ arrive at the server encapsulated\n   in one or more Relay-forward messages.\
    \  The server MUST use the\n   received message to construct the proper Relay-reply\
    \ message to allow\n   the response to the received message to be relayed through\
    \ the same\n   relay agents (in reverse order) as the original client message;\
    \ see\n   Section 19.3 for more details.  The server may also need to record\n\
    \   this information with each client in case it is needed to send a\n   Reconfigure\
    \ message at a later time, unless the server has been\n   configured with addresses\
    \ that can be used to send Reconfigure\n   messages directly to the client (see\
    \ Section 18.3.11).  Note that\n   servers that support leasequery [RFC5007] also\
    \ need to record this\n   information.\n   By sending Reconfigure messages, the\
    \ server MAY initiate a\n   configuration exchange to cause DHCP clients to obtain\
    \ new addresses,\n   prefixes, and other configuration information.  For example,\
    \ an\n   administrator may use a server-initiated configuration exchange when\n\
    \   links in the DHCP domain are to be renumbered or when other\n   configuration\
    \ options are updated, perhaps because servers are moved,\n   added, or removed.\n\
    \   When a client receives a Reconfigure message from the server, the\n   client\
    \ initiates sending a Renew, Rebind, or Information-request\n   message as indicated\
    \ by msg-type in the Reconfigure Message option\n   (see Section 21.19).  The\
    \ server sends IAs and/or other configuration\n   information to the client in\
    \ a Reply message.  The server MAY include\n   options containing the IAs and\
    \ new values for other configuration\n   parameters in the Reply message, even\
    \ if those IAs and parameters\n   were not requested in the client's message.\n"
- title: 18.3.1.  Receipt of Solicit Messages
  contents:
  - "18.3.1.  Receipt of Solicit Messages\n   See Section 18.4 for details regarding\
    \ the handling of Solicit\n   messages received via unicast.  Unicast transmission\
    \ of Solicit\n   messages is not allowed, regardless of whether the Server Unicast\n\
    \   option (see Section 21.12) is configured or not.\n   The server determines\
    \ the information about the client and its\n   location as described in Section\
    \ 13 and checks its administrative\n   policy about responding to the client.\
    \  If the server is not\n   permitted to respond to the client, the server discards\
    \ the Solicit\n   message.  For example, if the administrative policy for the\
    \ server is\n   that it may only respond to a client that is willing to accept\
    \ a\n   Reconfigure message, if the client does not include a Reconfigure\n  \
    \ Accept option (see Section 21.20) in the Solicit message, the server\n   discards\
    \ the Solicit message.\n   If (1) the server is permitted to respond to the client,\
    \ (2) the\n   client has not included a Rapid Commit option (see Section 21.14)\
    \ in\n   the Solicit message, or (3) the server has not been configured to\n \
    \  respond with committed assignments of leases and other resources, the\n   server\
    \ sends an Advertise message to the client as described in\n   Section 18.3.9.\n\
    \   If the client has included a Rapid Commit option in the Solicit\n   message\
    \ and the server has been configured to respond with committed\n   assignments\
    \ of leases and other resources, the server responds to the\n   Solicit with a\
    \ Reply message.  The server produces the Reply message\n   as though it had received\
    \ a Request message as described in\n   Section 18.3.2.  The server transmits\
    \ the Reply message as described\n   in Section 18.3.10.  The server MUST commit\
    \ the assignment of any\n   addresses and delegated prefixes or other configuration\
    \ information\n   before sending a Reply message to a client.  In this case, the\
    \ server\n   includes a Rapid Commit option in the Reply message to indicate that\n\
    \   the Reply is in response to a Solicit message.\n   DISCUSSION:\n      When\
    \ using the Solicit/Reply message exchange, the server commits\n      the assignment\
    \ of any leases before sending the Reply message.\n      The client can assume\
    \ that it has been assigned the leases in the\n      Reply message and does not\
    \ need to send a Request message for\n      those leases.\n      Typically, servers\
    \ that are configured to use the Solicit/Reply\n      message exchange will be\
    \ deployed so that only one server will\n      respond to a Solicit message. \
    \ If more than one server responds,\n      the client will only use the leases\
    \ from one of the servers, while\n      the leases from the other servers will\
    \ be committed to the client\n      but not used by the client.\n"
- title: 18.3.2.  Receipt of Request Messages
  contents:
  - "18.3.2.  Receipt of Request Messages\n   See Section 18.4 for details regarding\
    \ the handling of Request\n   messages received via unicast.\n   When the server\
    \ receives a valid Request message, the server creates\n   the bindings for that\
    \ client according to the server's policy and\n   configuration information and\
    \ records the IAs and other information\n   requested by the client.\n   The server\
    \ constructs a Reply message by setting the \"msg-type\" field\n   to REPLY and\
    \ copying the transaction ID from the Request message into\n   the \"transaction-id\"\
    \ field.\n   The server MUST include in the Reply message a Server Identifier\n\
    \   option (see Section 21.3) containing the server's DUID and the Client\n  \
    \ Identifier option (see Section 21.2) from the Request message.\n   The server\
    \ examines all IAs in the message from the client.\n   For each IA_NA option (see\
    \ Section 21.4) and IA_TA option (see\n   Section 21.5) in the Request message,\
    \ the server checks if the\n   prefixes of included addresses are appropriate\
    \ for the link to which\n   the client is connected.  If any of the prefixes of\
    \ the included\n   addresses are not appropriate for the link to which the client\
    \ is\n   connected, the server MUST return the IA to the client with a Status\n\
    \   Code option (see Section 21.13) with the value NotOnLink.  If the\n   server\
    \ does not send the NotOnLink status code but it cannot assign\n   any IP addresses\
    \ to an IA, the server MUST return the IA option in\n   the Reply message with\
    \ no addresses in the IA and a Status Code\n   option containing status code NoAddrsAvail\
    \ in the IA.\n   For any IA_PD option (see Section 21.21) in the Request message\
    \ to\n   which the server cannot assign any delegated prefixes, the server\n \
    \  MUST return the IA_PD option in the Reply message with no prefixes in\n   the\
    \ IA_PD and with a Status Code option containing status code\n   NoPrefixAvail\
    \ in the IA_PD.\n   The server MAY assign different addresses and/or delegated\
    \ prefixes\n   to an IA than those included within the IA of the client's Request\n\
    \   message.\n   For all IAs to which the server can assign addresses or delegated\n\
    \   prefixes, the server includes the IAs with addresses (for IA_NAs and\n   IA_TAs),\
    \ prefixes (for IA_PDs), and other configuration parameters\n   and records the\
    \ IA as a new client binding.  The server MUST NOT\n   include any addresses or\
    \ delegated prefixes in the IA that the server\n   does not assign to the client.\n\
    \   The T1/T2 times set in each applicable IA option for a Reply MUST be\n   the\
    \ same values across all IAs.  The server MUST determine the T1/T2\n   times across\
    \ all of the applicable client's bindings in the Reply.\n   This facilitates the\
    \ client being able to renew all of the bindings\n   at the same time.\n   The\
    \ server SHOULD include a Reconfigure Accept option (see\n   Section 21.20) if\
    \ the server policy enables the reconfigure mechanism\n   and the client supports\
    \ it.  Currently, sending this option in a\n   Reply is technically redundant,\
    \ as the use of the reconfiguration\n   mechanism requires authentication; at\
    \ present, the only defined\n   mechanism is RKAP (see Section 20.4), and the\
    \ presence of the\n   reconfigure key signals support for the acceptance of Reconfigure\n\
    \   messages.  However, there may be better security mechanisms defined\n   in\
    \ the future that would cause RKAP to not be used anymore.\n   The server includes\
    \ other options containing configuration\n   information to be returned to the\
    \ client as described in\n   Section 18.3.\n   If the server finds that the client\
    \ has included an IA in the Request\n   message for which the server already has\
    \ a binding that associates\n   the IA with the client, the server sends a Reply\
    \ message with\n   existing bindings, possibly with updated lifetimes.  The server\
    \ may\n   update the bindings according to its local policies, but the server\n\
    \   SHOULD generate the response again and not simply retransmit\n   previously\
    \ sent information, even if the \"transaction-id\" field value\n   matches a previous\
    \ transmission.  The server MUST NOT cache its\n   responses.\n   DISCUSSION:\n\
    \      Cached replies are bad because lifetimes need to be updated\n      (either\
    \ decrease the timers by the amount of time elapsed since\n      the original\
    \ transmission or keep the lifetime values and update\n      the lease information\
    \ in the server's database).  Also, if the\n      message uses any security protection\
    \ (such as the Replay Detection\n      Method (RDM), as described in Section 20.3),\
    \ its value must be\n      updated.  Additionally, any digests must be updated.\
    \  Given all of\n      the above, caching replies is far more complex than simply\
    \ sending\n      the same buffer as before, and it is easy to miss some of those\n\
    \      steps.\n"
- title: 18.3.3.  Receipt of Confirm Messages
  contents:
  - "18.3.3.  Receipt of Confirm Messages\n   See Section 18.4 for details regarding\
    \ the handling of Confirm\n   messages received via unicast.  Unicast transmission\
    \ of Confirm\n   messages is not allowed, regardless of whether the Server Unicast\n\
    \   option (see Section 21.12) is configured or not.\n   When the server receives\
    \ a Confirm message, the server determines\n   whether the addresses in the Confirm\
    \ message are appropriate for the\n   link to which the client is attached.  If\
    \ all of the addresses in the\n   Confirm message pass this test, the server returns\
    \ a status of\n   Success.  If any of the addresses do not pass this test, the\
    \ server\n   returns a status of NotOnLink.  If the server is unable to perform\n\
    \   this test (for example, the server does not have information about\n   prefixes\
    \ on the link to which the client is connected) or there were\n   no addresses\
    \ in any of the IAs sent by the client, the server\n   MUST NOT send a Reply to\
    \ the client.\n   The server ignores the T1 and T2 fields in the IA options and\
    \ the\n   preferred-lifetime and valid-lifetime fields in the IA Address\n   options\
    \ (see Section 21.6).\n   The server constructs a Reply message by setting the\
    \ \"msg-type\" field\n   to REPLY and copying the transaction ID from the Confirm\
    \ message into\n   the \"transaction-id\" field.\n   The server MUST include in\
    \ the Reply message a Server Identifier\n   option (see Section 21.3) containing\
    \ the server's DUID and the Client\n   Identifier option (see Section 21.2) from\
    \ the Confirm message.  The\n   server includes a Status Code option (see Section\
    \ 21.13) indicating\n   the status of the Confirm message.\n"
- title: 18.3.4.  Receipt of Renew Messages
  contents:
  - "18.3.4.  Receipt of Renew Messages\n   See Section 18.4 for details regarding\
    \ the handling of Renew messages\n   received via unicast.\n   For each IA in\
    \ the Renew message from a client, the server locates\n   the client's binding\
    \ and verifies that the information in the IA from\n   the client matches the\
    \ information stored for that client.\n   If the server finds the client entry\
    \ for the IA, the server sends the\n   IA back to the client with new lifetimes\
    \ and, if applicable, T1/T2\n   times.  If the server is unable to extend the\
    \ lifetimes of an address\n   or delegated prefix in the IA, the server MAY choose\
    \ not to include\n   the IA Address option (see Section 21.6) for that address\
    \ or IA\n   Prefix option (see Section 21.22) for that delegated prefix.  If the\n\
    \   server chooses to include the IA Address or IA Prefix option for such\n  \
    \ an address or delegated prefix, the server SHOULD set T1 and T2\n   values to\
    \ the valid lifetime for the IA option unless the server also\n   includes other\
    \ addresses or delegated prefixes that the server is\n   able to extend for the\
    \ IA.  Setting T1 and T2 to values equal to the\n   valid lifetime informs the\
    \ client that the leases associated with\n   said IA will not be extended, so\
    \ there is no point in trying.  Also,\n   it avoids generating unnecessary traffic\
    \ as the remaining lifetime\n   approaches 0.\n   The server may choose to change\
    \ the list of addresses or delegated\n   prefixes and the lifetimes in IAs that\
    \ are returned to the client.\n   If the server finds that any of the addresses\
    \ in the IA are not\n   appropriate for the link to which the client is attached,\
    \ the server\n   returns the address to the client with lifetimes of 0.\n   If\
    \ the server finds that any of the delegated prefixes in the IA are\n   not appropriate\
    \ for the link to which the client is attached, the\n   server returns the delegated\
    \ prefix to the client with lifetimes\n   of 0.\n   For each IA for which the\
    \ server cannot find a client entry, the\n   server has the following choices,\
    \ depending on the server's policy\n   and configuration information:\n   -  If\
    \ the server is configured to create new bindings as a result of\n      processing\
    \ Renew messages, the server SHOULD create a binding and\n      return the IA\
    \ with assigned addresses or delegated prefixes with\n      lifetimes and, if\
    \ applicable, T1/T2 times and other information\n      requested by the client.\
    \  If the client included the IA Prefix\n      option within the IA_PD option\
    \ (see Section 21.21) with a zero\n      value in the \"IPv6-prefix\" field and\
    \ a non-zero value in the\n      \"prefix-length\" field, the server MAY use the\
    \ \"prefix-length\"\n      value as a hint for the length of the prefixes to be\
    \ assigned (see\n      [RFC8168] for further details on prefix-length hints).\n\
    \   -  If the server is configured to create new bindings as a result of\n   \
    \   processing Renew messages but the server will not assign any\n      leases\
    \ to an IA, the server returns the IA option containing a\n      Status Code option\
    \ (see Section 21.13) with the NoAddrsAvail or\n      NoPrefixAvail status code\
    \ and a status message for a user.\n   -  If the server does not support creation\
    \ of new bindings for the\n      client sending a Renew message or if this behavior\
    \ is disabled\n      according to the server's policy or configuration information,\
    \ the\n      server returns the IA option containing a Status Code option with\n\
    \      the NoBinding status code and a status message for a user.\n   The server\
    \ constructs a Reply message by setting the \"msg-type\" field\n   to REPLY and\
    \ copying the transaction ID from the Renew message into\n   the \"transaction-id\"\
    \ field.\n   The server MUST include in the Reply message a Server Identifier\n\
    \   option (see Section 21.3) containing the server's DUID and the Client\n  \
    \ Identifier option (see Section 21.2) from the Renew message.\n   The server\
    \ includes other options containing configuration\n   information to be returned\
    \ to the client as described in\n   Section 18.3.\n   The server MAY include options\
    \ containing the IAs and values for\n   other configuration parameters, even if\
    \ those parameters were not\n   requested in the Renew message.\n   The T1/T2\
    \ values set in each applicable IA option for a Reply MUST be\n   the same across\
    \ all IAs.  The server MUST determine the T1/T2 values\n   across all of the applicable\
    \ client's bindings in the Reply.  This\n   facilitates the client being able\
    \ to renew all of the bindings at the\n   same time.\n"
- title: 18.3.5.  Receipt of Rebind Messages
  contents:
  - "18.3.5.  Receipt of Rebind Messages\n   See Section 18.4 for details regarding\
    \ the handling of Rebind\n   messages received via unicast.  Unicast transmission\
    \ of Rebind\n   messages is not allowed, regardless of whether the Server Unicast\n\
    \   option (see Section 21.12) is configured or not.\n   When the server receives\
    \ a Rebind message that contains an IA option\n   from a client, it locates the\
    \ client's binding and verifies that the\n   information in the IA from the client\
    \ matches the information stored\n   for that client.\n   If the server finds\
    \ the client entry for the IA and the server\n   determines that the addresses\
    \ or delegated prefixes in the IA are\n   appropriate for the link to which the\
    \ client's interface is attached\n   according to the server's explicit configuration\
    \ information, the\n   server SHOULD send the IA back to the client with new lifetimes\
    \ and,\n   if applicable, T1/T2 values.  If the server is unable to extend the\n\
    \   lifetimes of an address in the IA, the server MAY choose not to\n   include\
    \ the IA Address option (see Section 21.6) for this address.\n   If the server\
    \ is unable to extend the lifetimes of a delegated prefix\n   in the IA, the server\
    \ MAY choose not to include the IA Prefix option\n   (see Section 21.22) for this\
    \ prefix.\n   If the server finds that the client entry for the IA and any of\
    \ the\n   addresses or delegated prefixes are no longer appropriate for the\n\
    \   link to which the client's interface is attached according to the\n   server's\
    \ explicit configuration information, the server returns those\n   addresses or\
    \ delegated prefixes to the client with lifetimes of 0.\n   If the server cannot\
    \ find a client entry for the IA, the server\n   checks if the IA contains addresses\
    \ (for IA_NAs and IA_TAs) or\n   delegated prefixes (for IA_PDs).  The server\
    \ checks if the addresses\n   and delegated prefixes are appropriate for the link\
    \ to which the\n   client's interface is attached according to the server's explicit\n\
    \   configuration information.  For any address that is not appropriate\n   for\
    \ the link to which the client's interface is attached, the server\n   MAY include\
    \ the IA Address option with lifetimes of 0.  For any\n   delegated prefix that\
    \ is not appropriate for the link to which the\n   client's interface is attached,\
    \ the server MAY include the IA Prefix\n   option with lifetimes of 0.  The Reply\
    \ with lifetimes of 0\n   constitutes an explicit notification to the client that\
    \ the specific\n   addresses and delegated prefixes are no longer valid and MUST\
    \ NOT be\n   used by the client.  If the server chooses to not include any IAs\n\
    \   containing IA Address or IA Prefix options with lifetimes of 0 and\n   the\
    \ server does not include any other IAs with leases and/or status\n   codes, the\
    \ server does not send a Reply message.  In this situation,\n   the server discards\
    \ the Rebind message.\n   Otherwise, for each IA for which the server cannot find\
    \ a client\n   entry, the server has the following choices, depending on the\n\
    \   server's policy and configuration information:\n   -  If the server is configured\
    \ to create new bindings as a result of\n      processing Rebind messages (also\
    \ see the note below about the\n      Rapid Commit option (Section 21.14)), the\
    \ server SHOULD create a\n      binding and return the IA with allocated leases\
    \ with lifetimes\n      and, if applicable, T1/T2 values and other information\
    \ requested\n      by the client.  The server MUST NOT return any addresses or\n\
    \      delegated prefixes in the IA that the server does not assign to\n     \
    \ the client.\n   -  If the server is configured to create new bindings as a result\
    \ of\n      processing Rebind messages but the server will not assign any\n  \
    \    leases to an IA, the server returns the IA option containing a\n      Status\
    \ Code option (see Section 21.13) with the NoAddrsAvail or\n      NoPrefixAvail\
    \ status code and a status message for a user.\n   -  If the server does not support\
    \ creation of new bindings for the\n      client sending a Rebind message or if\
    \ this behavior is disabled\n      according to the server's policy or configuration\
    \ information, the\n      server returns the IA option containing a Status Code\
    \ option with\n      the NoBinding status code and a status message for a user.\n\
    \   When the server creates new bindings for the IA, it is possible that\n   other\
    \ servers also create bindings as a result of receiving the same\n   Rebind message;\
    \ see the \"DISCUSSION\" text in Section 21.14.\n   Therefore, the server SHOULD\
    \ only create new bindings during\n   processing of a Rebind message if the server\
    \ is configured to respond\n   with a Reply message to a Solicit message containing\
    \ the Rapid Commit\n   option.\n   The server constructs a Reply message by setting\
    \ the \"msg-type\" field\n   to REPLY and copying the transaction ID from the\
    \ Rebind message into\n   the \"transaction-id\" field.\n   The server MUST include\
    \ in the Reply message a Server Identifier\n   option (see Section 21.3) containing\
    \ the server's DUID and the Client\n   Identifier option (see Section 21.2) from\
    \ the Rebind message.\n   The server includes other options containing configuration\n\
    \   information to be returned to the client as described in\n   Section 18.3.\n\
    \   The server MAY include options containing the IAs and values for\n   other\
    \ configuration parameters, even if those IAs and parameters were\n   not requested\
    \ in the Rebind message.\n   The T1 or T2 values set in each applicable IA option\
    \ for a Reply MUST\n   be the same values across all IAs.  The server MUST determine\
    \ the T1\n   or T2 values across all of the applicable client's bindings in the\n\
    \   Reply.  This facilitates the client being able to renew all of the\n   bindings\
    \ at the same time.\n"
- title: 18.3.6.  Receipt of Information-request Messages
  contents:
  - "18.3.6.  Receipt of Information-request Messages\n   See Section 18.4 for details\
    \ regarding the handling of\n   Information-request messages received via unicast.\n\
    \   When the server receives an Information-request message, the client\n   is\
    \ requesting configuration information that does not include the\n   assignment\
    \ of any leases.  The server determines all configuration\n   parameters appropriate\
    \ to the client, based on the server\n   configuration policies known to the server.\n\
    \   The server constructs a Reply message by setting the \"msg-type\" field\n\
    \   to REPLY and copying the transaction ID from the Information-request\n   message\
    \ into the \"transaction-id\" field.\n   The server MUST include a Server Identifier\
    \ option (see Section 21.3)\n   containing the server's DUID in the Reply message.\
    \  If the client\n   included a Client Identifier option (see Section 21.2) in\
    \ the\n   Information-request message, the server copies that option to the\n\
    \   Reply message.\n   The server includes options containing configuration information\
    \ to\n   be returned to the client as described in Section 18.3.  The server\n\
    \   MAY include additional options that were not requested by the client\n   in\
    \ the Information-request message.\n   If the Information-request message received\
    \ from the client did not\n   include a Client Identifier option, the server SHOULD\
    \ respond with a\n   Reply message containing any configuration parameters that\
    \ are not\n   determined by the client's identity.  If the server chooses not\
    \ to\n   respond, the client may continue to retransmit the\n   Information-request\
    \ message indefinitely.\n"
- title: 18.3.7.  Receipt of Release Messages
  contents:
  - "18.3.7.  Receipt of Release Messages\n   See Section 18.4 for details regarding\
    \ the handling of Release\n   messages received via unicast.\n   The server constructs\
    \ a Reply message by setting the \"msg-type\" field\n   to REPLY and copying the\
    \ transaction ID from the Release message into\n   the \"transaction-id\" field.\n\
    \   Upon the receipt of a valid Release message, the server examines the\n   IAs\
    \ and the leases in the IAs for validity.  If the IAs in the\n   message are in\
    \ a binding for the client and the leases in the IAs\n   have been assigned by\
    \ the server to those IAs, the server deletes the\n   leases from the IAs and\
    \ makes the leases available for assignment to\n   other clients.  The server\
    \ ignores leases not assigned to the IAs,\n   although it may choose to log an\
    \ error.\n   After all the leases have been processed, the server generates a\n\
    \   Reply message and includes a Status Code option (see Section 21.13)\n   with\
    \ the value Success, a Server Identifier option (see Section 21.3)\n   with the\
    \ server's DUID, and a Client Identifier option (see\n   Section 21.2) with the\
    \ client's DUID.  For each IA in the Release\n   message for which the server\
    \ has no binding information, the server\n   adds an IA option using the IAID\
    \ from the Release message and\n   includes a Status Code option with the value\
    \ NoBinding in the IA\n   option.  No other options are included in the IA option.\n\
    \   A server may choose to retain a record of assigned leases and IAs\n   after\
    \ the lifetimes on the leases have expired to allow the server to\n   reassign\
    \ the previously assigned leases to a client.\n"
- title: 18.3.8.  Receipt of Decline Messages
  contents:
  - "18.3.8.  Receipt of Decline Messages\n   See Section 18.4 for details regarding\
    \ the handling of Decline\n   messages received via unicast.\n   Upon the receipt\
    \ of a valid Decline message, the server examines the\n   IAs and the addresses\
    \ in the IAs for validity.  If the IAs in the\n   message are in a binding for\
    \ the client and the addresses in the IAs\n   have been assigned by the server\
    \ to those IAs, the server deletes the\n   addresses from the IAs.  The server\
    \ ignores addresses not assigned to\n   the IAs (though it may choose to log an\
    \ error if it finds such\n   addresses).\n   The client has found any addresses\
    \ in the Decline messages to be\n   already in use on its link.  Therefore, the\
    \ server SHOULD mark the\n   addresses declined by the client so that those addresses\
    \ are not\n   assigned to other clients and MAY choose to make a notification\
    \ that\n   addresses were declined.  Local policy on the server determines when\n\
    \   the addresses identified in a Decline message may be made available\n   for\
    \ assignment.\n   After all the addresses have been processed, the server generates\
    \ a\n   Reply message by setting the \"msg-type\" field to REPLY and copying\n\
    \   the transaction ID from the Decline message into the \"transaction-id\"\n\
    \   field.  The client includes a Status Code option (see Section 21.13)\n   with\
    \ the value Success, a Server Identifier option (see Section 21.3)\n   with the\
    \ server's DUID, and a Client Identifier option (see\n   Section 21.2) with the\
    \ client's DUID.  For each IA in the Decline\n   message for which the server\
    \ has no binding information, the server\n   adds an IA option using the IAID\
    \ from the Decline message and\n   includes a Status Code option with the value\
    \ NoBinding in the IA\n   option.  No other options are included in the IA option.\n"
- title: 18.3.9.  Creation of Advertise Messages
  contents:
  - "18.3.9.  Creation of Advertise Messages\n   The server sets the \"msg-type\"\
    \ field to ADVERTISE and copies the\n   contents of the \"transaction-id\" field\
    \ from the Solicit message\n   received from the client to the Advertise message.\
    \  The server\n   includes its server identifier in a Server Identifier option\
    \ (see\n   Section 21.3) and copies the Client Identifier option (see\n   Section\
    \ 21.2) from the Solicit message into the Advertise message.\n   The server MAY\
    \ add a Preference option (see Section 21.8) to carry\n   the preference value\
    \ for the Advertise message.  The server\n   implementation SHOULD allow the setting\
    \ of a server preference value\n   by the administrator.  The server preference\
    \ value MUST default to 0\n   unless otherwise configured by the server administrator.\n\
    \   The server includes a Reconfigure Accept option (see Section 21.20)\n   if\
    \ the server wants to indicate that it supports the Reconfigure\n   mechanism.\
    \  This information may be used by the client during the\n   server selection\
    \ process.\n   The server includes the options the server will return to the client\n\
    \   in a subsequent Reply message.  The information in these options may\n   be\
    \ used by the client in the selection of a server if the client\n   receives more\
    \ than one Advertise message.  The server MUST include\n   options in the Advertise\
    \ message containing configuration parameters\n   for all of the options identified\
    \ in the Option Request option (see\n   Section 21.7) in the Solicit message that\
    \ the server has been\n   configured to return to the client.  If the Option Request\
    \ option\n   includes a container option, the server MUST include all the options\n\
    \   that are eligible to be encapsulated in the container.  The Option\n   Request\
    \ option MAY be used to signal support for a feature even when\n   that option\
    \ is encapsulated, as in the case of the Prefix Exclude\n   option [RFC6603].\
    \  In this case, special processing is required by\n   the server.  The server\
    \ MAY return additional options to the client\n   if it has been configured to\
    \ do so.\n   The server MUST include IA options in the Advertise message\n   containing\
    \ any addresses and/or delegated prefixes that would be\n   assigned to IAs contained\
    \ in the Solicit message from the client.  If\n   the client has included addresses\
    \ in the IA Address options (see\n   Section 21.6) in the Solicit message, the\
    \ server MAY use those\n   addresses as hints about the addresses that the client\
    \ would like to\n   receive.  If the client has included IA Prefix options (see\n\
    \   Section 21.22), the server MAY use the prefix contained in the\n   \"IPv6-prefix\"\
    \ field and/or the prefix length contained in the\n   \"prefix-length\" field\
    \ as hints about the prefixes the client would\n   like to receive.  If the server\
    \ is not going to assign an address or\n   delegated prefix received as a hint\
    \ in the Solicit message, the\n   server MUST NOT include this address or delegated\
    \ prefix in the\n   Advertise message.\n   If the server will not assign any addresses\
    \ to an IA_NA or IA_TA in\n   subsequent Request messages from the client, the\
    \ server MUST include\n   the IA option in the Advertise message with no addresses\
    \ in that IA\n   and a Status Code option (see Section 21.13) encapsulated in\
    \ the IA\n   option containing status code NoAddrsAvail.\n   If the server will\
    \ not assign any prefixes to an IA_PD in subsequent\n   Request messages from\
    \ the client, the server MUST include the IA_PD\n   option (see Section 21.21)\
    \ in the Advertise message with no prefixes\n   in the IA_PD option and a Status\
    \ Code option encapsulated in the\n   IA_PD containing status code NoPrefixAvail.\n\
    \   Transmission of Advertise messages is described in the next section.\n"
- title: 18.3.10.  Transmission of Advertise and Reply Messages
  contents:
  - "18.3.10.  Transmission of Advertise and Reply Messages\n   If the original message\
    \ was received directly by the server, the\n   server unicasts the Advertise or\
    \ Reply message directly to the client\n   using the address in the source address\
    \ field from the IP datagram in\n   which the original message was received. \
    \ The Advertise or Reply\n   message MUST be unicast through the interface on\
    \ which the original\n   message was received.\n   If the original message was\
    \ received in a Relay-forward message, the\n   server constructs a Relay-reply\
    \ message with the Reply message in the\n   payload of a Relay Message option\
    \ (see Section 21.10).  If the\n   Relay-forward messages included an Interface-Id\
    \ option (see\n   Section 21.18), the server copies that option to the Relay-reply\n\
    \   message.  The server unicasts the Relay-reply message directly to the\n  \
    \ relay agent using the address in the source address field from the IP\n   datagram\
    \ in which the Relay-forward message was received.  See\n   Section 19.3 for more\
    \ details on the construction of Relay-reply\n   messages.\n"
- title: 18.3.11.  Creation and Transmission of Reconfigure Messages
  contents:
  - "18.3.11.  Creation and Transmission of Reconfigure Messages\n   The server sets\
    \ the \"msg-type\" field to RECONFIGURE and sets the\n   \"transaction-id\" field\
    \ to 0.  The server includes a Server Identifier\n   option (see Section 21.3)\
    \ containing its DUID and a Client Identifier\n   option (see Section 21.2) containing\
    \ the client's DUID in the\n   Reconfigure message.\n   Because of the risk of\
    \ denial-of-service (DoS) attacks against DHCP\n   clients, the use of a security\
    \ mechanism is mandated in Reconfigure\n   messages.  The server MUST use DHCP\
    \ authentication in the Reconfigure\n   message (see Section 20.4).\n   The server\
    \ MUST include a Reconfigure Message option (see\n   Section 21.19) to select\
    \ whether the client responds with a Renew\n   message, a Rebind message, or an\
    \ Information-request message.\n   The server MUST NOT include any other options\
    \ in the Reconfigure\n   message, except as specifically allowed in the definition\
    \ of\n   individual options.\n   A server sends each Reconfigure message to a\
    \ single DHCP client,\n   using an IPv6 unicast address of sufficient scope belonging\
    \ to the\n   DHCP client.  If the server does not have an address to which it\
    \ can\n   send the Reconfigure message directly to the client, the server uses\n\
    \   a Relay-reply message (as described in Section 19.3) to send the\n   Reconfigure\
    \ message to a relay agent that will relay the message to\n   the client.  The\
    \ server may obtain the address of the client (and the\n   appropriate relay agent,\
    \ if required) through the information the\n   server has about clients that have\
    \ been in contact with the server\n   (see Section 18.3) or through some external\
    \ agent.\n   To reconfigure more than one client, the server unicasts a separate\n\
    \   message to each client.  The server may initiate the reconfiguration\n   of\
    \ multiple clients concurrently; for example, a server may send a\n   Reconfigure\
    \ message to additional clients while previous\n   reconfiguration message exchanges\
    \ are still in progress.\n   The Reconfigure message causes the client to initiate\
    \ a Renew/Reply,\n   Rebind/Reply, or Information-request/Reply message exchange\
    \ with the\n   server.  The server interprets the receipt of a Renew, Rebind,\
    \ or\n   Information-request message (whichever was specified in the original\n\
    \   Reconfigure message) from the client as satisfying the Reconfigure\n   message\
    \ request.\n   When transmitting the Reconfigure message, the server sets the\n\
    \   retransmission time (RT) to REC_TIMEOUT.  If the server does not\n   receive\
    \ a Renew, Rebind, or Information-request message from the\n   client before the\
    \ RT elapses, the server retransmits the Reconfigure\n   message, doubles the\
    \ RT value, and waits again.  The server continues\n   this process until REC_MAX_RC\
    \ unsuccessful attempts have been made,\n   at which point the server SHOULD abort\
    \ the reconfigure process for\n   that client.\n   Default and initial values\
    \ for REC_TIMEOUT and REC_MAX_RC are\n   documented in Section 7.6.\n"
- title: 18.4.  Reception of Unicast Messages
  contents:
  - "18.4.  Reception of Unicast Messages\n   Unless otherwise stated in the subsections\
    \ of Section 18.3 that\n   discuss the receipt of specific messages, the server\
    \ is not supposed\n   to accept unicast traffic when it is not explicitly configured\
    \ to do\n   so.  For example, unicast transmission is not allowed for Solicit,\n\
    \   Confirm, and Rebind messages (see Sections 18.3.1, 18.3.3, and\n   18.3.5,\
    \ respectively), even if the Server Unicast option (see\n   Section 21.12) is\
    \ configured.  For Request, Renew,\n   Information-request, Release, and Decline\
    \ messages, it is allowed\n   only if the Server Unicast option is configured.\n\
    \   When the server receives a message via unicast from a client to which\n  \
    \ the server has not sent a Server Unicast option (or is not currently\n   configured\
    \ to do so), the server discards that message and responds\n   with an Advertise\
    \ (when responding to a Solicit message) or Reply\n   message (when responding\
    \ to any other messages) containing a Status\n   Code option (see Section 21.13)\
    \ with the value UseMulticast, a Server\n   Identifier option (see Section 21.3)\
    \ containing the server's DUID,\n   the Client Identifier option (see Section\
    \ 21.2) from the client\n   message (if any), and no other options.\n"
- title: 19.  Relay Agent Behavior
  contents:
  - "19.  Relay Agent Behavior\n   The relay agent SHOULD be configured to use a list\
    \ of destination\n   addresses that includes unicast addresses.  The list of destination\n\
    \   addresses MAY include the All_DHCP_Servers multicast address or other\n  \
    \ addresses selected by the network administrator.  If the relay agent\n   has\
    \ not been explicitly configured, it MUST use the All_DHCP_Servers\n   multicast\
    \ address as the default.\n   If the relay agent relays messages to the All_DHCP_Servers\
    \ multicast\n   address or other multicast addresses, it sets the Hop Limit field\n\
    \   to 8.\n   If the relay agent receives a message other than Relay-forward and\n\
    \   Relay-reply and the relay agent does not recognize its message type,\n   it\
    \ MUST forward the message as described in Section 19.1.1.\n"
- title: 19.1.  Relaying a Client Message or a Relay-forward Message
  contents:
  - "19.1.  Relaying a Client Message or a Relay-forward Message\n   A relay agent\
    \ relays both messages from clients and Relay-forward\n   messages from other\
    \ relay agents.  When a relay agent receives a\n   Relay-forward message, a recognized\
    \ message type for which it is not\n   the intended target, or an unrecognized\
    \ message type [RFC7283], it\n   constructs a new Relay-forward message.  The\
    \ relay agent copies the\n   source address from the header of the IP datagram\
    \ in which the\n   message was received into the peer-address field of the Relay-forward\n\
    \   message.  The relay agent copies the received DHCP message (excluding\n  \
    \ any IP or UDP headers) into a Relay Message option (see\n   Section 21.10) in\
    \ the new message.  The relay agent adds to the\n   Relay-forward message any\
    \ other options it is configured to include.\n   [RFC6221] defines a Lightweight\
    \ DHCPv6 Relay Agent (LDRA) that allows\n   relay agent information to be inserted\
    \ by an access node that\n   performs a link-layer bridging (i.e., non-routing)\
    \ function.\n"
- title: 19.1.1.  Relaying a Message from a Client
  contents:
  - "19.1.1.  Relaying a Message from a Client\n   If the relay agent received the\
    \ message to be relayed from a client,\n   the relay agent places a globally scoped\
    \ unicast address (i.e., GUA\n   or ULA) from a prefix assigned to the link on\
    \ which the client should\n   be assigned leases into the link-address field.\
    \  If such an address\n   is not available, the relay agent may set the link-address\
    \ field to a\n   link-local address from the interface on which the original message\n\
    \   was received.  This is not recommended, as it may require that\n   additional\
    \ information be provided in the server configuration.  See\n   Section 3.2 of\
    \ [RFC7969] for a detailed discussion.\n   This address will be used by the server\
    \ to determine the link from\n   which the client should be assigned leases and\
    \ other configuration\n   information.\n   The hop-count value in the Relay-forward\
    \ message is set to 0.\n   If the relay agent cannot use the address in the link-address\
    \ field\n   to identify the interface through which the response to the client\n\
    \   will be relayed, the relay agent MUST include an Interface-Id option\n   (see\
    \ Section 21.18) in the Relay-forward message.  The server will\n   include the\
    \ Interface-Id option in its Relay-reply message.  The\n   relay agent sets the\
    \ link-address field as described earlier in this\n   subsection, regardless of\
    \ whether the relay agent includes an\n   Interface-Id option in the Relay-forward\
    \ message.\n"
- title: 19.1.2.  Relaying a Message from a Relay Agent
  contents:
  - "19.1.2.  Relaying a Message from a Relay Agent\n   If the message received by\
    \ the relay agent is a Relay-forward message\n   and the hop-count value in the\
    \ message is greater than or equal to\n   HOP_COUNT_LIMIT, the relay agent discards\
    \ the received message.\n   The relay agent copies the source address from the\
    \ IP datagram in\n   which the message was received into the peer-address field\
    \ in the\n   Relay-forward message and sets the hop-count field to the value of\n\
    \   the hop-count field in the received message incremented by 1.\n   If the source\
    \ address from the IP datagram header of the received\n   message is a globally\
    \ scoped unicast address (i.e., GUA or ULA), the\n   relay agent sets the link-address\
    \ field to 0; otherwise, the relay\n   agent sets the link-address field to a\
    \ globally scoped unicast\n   address (i.e., GUA or ULA) assigned to the interface\
    \ on which the\n   message was received or includes an Interface-Id option (see\n\
    \   Section 21.18) to identify the interface on which the message was\n   received.\n"
- title: 19.1.3.  Relay Agent Behavior with Prefix Delegation
  contents:
  - "19.1.3.  Relay Agent Behavior with Prefix Delegation\n   A relay agent forwards\
    \ messages containing prefix delegation options\n   in the same way as it would\
    \ relay addresses (i.e., per\n   Sections 19.1.1 and 19.1.2).\n   If a server\
    \ communicates with a client through a relay agent about\n   delegated prefixes,\
    \ the server may need a protocol or other\n   out-of-band communication to configure\
    \ routing information for\n   delegated prefixes on any router through which the\
    \ client may forward\n   traffic.\n"
- title: 19.2.  Relaying a Relay-reply Message
  contents:
  - "19.2.  Relaying a Relay-reply Message\n   The relay agent processes any options\
    \ included in the Relay-reply\n   message in addition to the Relay Message option\
    \ (see Section 21.10).\n   The relay agent extracts the message from the Relay\
    \ Message option\n   and relays it to the address contained in the peer-address\
    \ field of\n   the Relay-reply message.  Relay agents MUST NOT modify the message.\n\
    \   If the Relay-reply message includes an Interface-Id option (see\n   Section\
    \ 21.18), the relay agent relays the message from the server to\n   the client\
    \ on the link identified by the Interface-Id option.\n   Otherwise, if the link-address\
    \ field is not set to 0, the relay agent\n   relays the message on the link identified\
    \ by the link-address field.\n   If the relay agent receives a Relay-reply message,\
    \ it MUST process\n   the message as defined above, regardless of the type of\
    \ message\n   encapsulated in the Relay Message option.\n"
- title: 19.3.  Construction of Relay-reply Messages
  contents:
  - "19.3.  Construction of Relay-reply Messages\n   A server uses a Relay-reply message\
    \ to (1) return a response to a\n   client if the original message from the client\
    \ was relayed to the\n   server in a Relay-forward message or (2) send a Reconfigure\
    \ message\n   to a client if the server does not have an address it can use to\
    \ send\n   the message directly to the client.\n   A response to the client MUST\
    \ be relayed through the same relay\n   agents as the original client message.\
    \  The server causes this to\n   happen by creating a Relay-reply message that\
    \ includes a Relay\n   Message option (see Section 21.10) containing the message\
    \ for the\n   next relay agent in the return path to the client.  The contained\n\
    \   Relay-reply message contains another Relay Message option to be sent\n   to\
    \ the next relay agent, and so on.  The server must record the\n   contents of\
    \ the peer-address fields in the received message so it can\n   construct the\
    \ appropriate Relay-reply message carrying the response\n   from the server.\n\
    \   For example, if client C sent a message that was relayed by relay\n   agent\
    \ A to relay agent B and then to the server, the server would\n   send the following\
    \ Relay-reply message to relay agent B:\n      msg-type:       RELAY-REPL\n  \
    \    hop-count:      1\n      link-address:   0\n      peer-address:   A\n   \
    \   Relay Message option containing the following:\n         msg-type:     RELAY-REPL\n\
    \         hop-count:    0\n         link-address: address from link to which C\
    \ is attached\n         peer-address: C\n         Relay Message option: <response\
    \ from server>\n                      Figure 10: Relay-reply Example\n   When\
    \ sending a Reconfigure message to a client through a relay agent,\n   the server\
    \ creates a Relay-reply message that includes a Relay\n   Message option containing\
    \ the Reconfigure message for the next relay\n   agent in the return path to the\
    \ client.  The server sets the\n   peer-address field in the Relay-reply message\
    \ header to the address\n   of the client and sets the link-address field as required\
    \ by the\n   relay agent to relay the Reconfigure message to the client.  The\n\
    \   server obtains the addresses of the client and the relay agent\n   through\
    \ prior interaction with the client or through some external\n   mechanism.\n"
- title: 19.4.  Interaction between Relay Agents and Servers
  contents:
  - "19.4.  Interaction between Relay Agents and Servers\n   Each time a packet is\
    \ relayed by a relay agent towards a server, a\n   new encapsulation level is\
    \ added around the packet.  Each relay is\n   allowed to insert additional options\
    \ on the encapsulation level it\n   added but MUST NOT change anything in the\
    \ packet being encapsulated.\n   If there are multiple relays between a client\
    \ and a server, multiple\n   encapsulations are used.  Although it makes packet\
    \ processing\n   slightly more complex, it provides the major advantage of having\
    \ a\n   clear indication as to which relay inserted which option.  The\n   response\
    \ packet is expected to travel through the same relays, but in\n   reverse order.\
    \  Each time a response packet is relayed back towards a\n   client, one encapsulation\
    \ level is removed.\n   In certain cases, relays can add one or more options.\
    \  These options\n   can be added for several reasons:\n   -  First, relays can\
    \ provide additional information about the client.\n      That source of information\
    \ is usually more trusted by a server\n      administrator, as it comes from the\
    \ network infrastructure rather\n      than the client and cannot be easily spoofed.\
    \  These options can\n      be used by the server to determine its allocation\
    \ policy.\n   -  Second, a relay may need some information to send a response\
    \ back\n      to the client.  Relay agents are expected to be stateless (not\n\
    \      retain any state after a packet has been processed).  A relay\n      agent\
    \ may include the Interface-Id option (see Section 21.18),\n      which will be\
    \ echoed back in the response.  It can include other\n      options and ask the\
    \ server to echo one or more of the options back\n      in the response.  These\
    \ options can then be used by the relay\n      agent to send the response back\
    \ to the client, or for other needs.\n      The client will never see these options.\
    \  See [RFC4994] for\n      details.\n   -  Third, sometimes a relay is the best\
    \ device to provide values for\n      certain options.  A relay can insert an\
    \ option into the packet\n      being forwarded to the server and ask the server\
    \ to pass that\n      option back to the client.  The client will receive that\
    \ option.\n      It should be noted that the server is the ultimate authority\
    \ here,\n      and -- depending on its configuration -- it may or may not send\n\
    \      the option back to the client.  See [RFC6422] for details.\n   For various\
    \ reasons, servers may need to retain the relay information\n   after the packet\
    \ processing is completed.  One is a bulk leasequery\n   mechanism that may ask\
    \ for all addresses and/or prefixes that were\n   assigned via a specific relay.\
    \  A second is for the reconfigure\n   mechanism.  The server may choose to not\
    \ send the Reconfigure message\n   directly to the client but rather to send it\
    \ via relays.  This\n   particular behavior is considered an implementation detail\
    \ and is out\n   of scope for this document.\n"
- title: 20.  Authentication of DHCP Messages
  contents:
  - "20.  Authentication of DHCP Messages\n   This document introduces two security\
    \ mechanisms for the\n   authentication of DHCP messages: (1) authentication (and\
    \ encryption)\n   of messages sent between servers and relay agents using IPsec\
    \ and\n   (2) protection against misconfiguration of a client caused by a\n  \
    \ Reconfigure message sent by a malicious DHCP server.\n   The delayed authentication\
    \ protocol, defined in [RFC3315], has been\n   obsoleted by this document (see\
    \ Section 25).\n"
- title: 20.1.  Security of Messages Sent between Servers and Relay Agents
  contents:
  - "20.1.  Security of Messages Sent between Servers and Relay Agents\n   Relay agents\
    \ and servers that exchange messages can use IPsec as\n   detailed in [RFC8213].\n"
- title: 20.2.  Summary of DHCP Authentication
  contents:
  - "20.2.  Summary of DHCP Authentication\n   Authentication of DHCP messages is\
    \ accomplished through the use of\n   the Authentication option (see Section 21.11).\
    \  The authentication\n   information carried in the Authentication option can\
    \ be used to\n   reliably identify the source of a DHCP message and to confirm\
    \ that\n   the contents of the DHCP message have not been tampered with.\n   The\
    \ Authentication option provides a framework for multiple\n   authentication protocols.\
    \  One such protocol, RKAP, is defined in\n   Section 20.4.  Other protocols defined\
    \ in the future will be\n   specified in separate documents.\n   Any DHCP message\
    \ MUST NOT include more than one Authentication\n   option.\n   The protocol field\
    \ in the Authentication option identifies the\n   specific protocol used to generate\
    \ the authentication information\n   carried in the option.  The algorithm field\
    \ identifies a specific\n   algorithm within the authentication protocol; for\
    \ example, the\n   algorithm field specifies the hash algorithm used to generate\
    \ the\n   Message Authentication Code (MAC) in the Authentication option.  The\n\
    \   RDM field specifies the type of replay detection used in the replay\n   detection\
    \ field.\n"
- title: 20.3.  Replay Detection
  contents:
  - "20.3.  Replay Detection\n   The RDM field of the Authentication option (see Section\
    \ 21.11)\n   determines the type of replay detection used in the replay detection\n\
    \   field.\n   If the RDM field contains 0x00, the replay detection field MUST\
    \ be\n   set to the value of a strictly monotonically increasing 64-bit\n   unsigned\
    \ integer (modulo 2^64).  Using this technique can reduce the\n   danger of replay\
    \ attacks.  This method MUST be supported by all\n   Authentication option protocols.\
    \  One choice might be to use the\n   64-bit NTP timestamp format [RFC5905]).\n\
    \   A client that receives a message with the RDM field set to 0x00 MUST\n   compare\
    \ its replay detection field with the previous value sent by\n   that same server\
    \ (based on the Server Identifier option; see\n   Section 21.3) and only accept\
    \ the message if the received value is\n   greater and record this as the new\
    \ value.  If this is the first time\n   a client processes an Authentication option\
    \ sent by a server, the\n   client MUST record the replay detection value and\
    \ skip the replay\n   detection check.\n   Servers that support the reconfigure\
    \ mechanism MUST ensure that the\n   replay detection value is retained between\
    \ restarts.  Failing to do\n   so may cause clients to refuse Reconfigure messages\
    \ sent by the\n   server, effectively rendering the reconfigure mechanism useless.\n"
- title: 20.4.  Reconfiguration Key Authentication Protocol (RKAP)
  contents:
  - "20.4.  Reconfiguration Key Authentication Protocol (RKAP)\n   RKAP provides protection\
    \ against misconfiguration of a client caused\n   by a Reconfigure message sent\
    \ by a malicious DHCP server.  In this\n   protocol, a DHCP server sends a reconfigure\
    \ key to the client in the\n   initial exchange of DHCP messages.  The client\
    \ records the\n   reconfigure key for use in authenticating subsequent Reconfigure\n\
    \   messages from that server.  The server then includes a Hashed Message\n  \
    \ Authentication Code (HMAC) computed from the reconfigure key in\n   subsequent\
    \ Reconfigure messages.\n   Both the reconfigure key sent from the server to the\
    \ client and the\n   HMAC in subsequent Reconfigure messages are carried as the\n\
    \   authentication information in an Authentication option (see\n   Section 21.11).\
    \  The format of the authentication information is\n   defined in the following\
    \ section.\n   RKAP is used (initiated by the server) only if the client and server\n\
    \   have negotiated to use Reconfigure messages.\n"
- title: 20.4.1.  Use of the Authentication Option in RKAP
  contents:
  - "20.4.1.  Use of the Authentication Option in RKAP\n   The following fields are\
    \ set in an Authentication option (see\n   Section 21.11) for RKAP:\n      protocol\
    \   3\n      algorithm  1\n      RDM        0\n   The format of the authentication\
    \ information for RKAP is:\n       0                   1                   2 \
    \                  3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Type      |                 Value (128 bits)              |\n   \
    \   +-+-+-+-+-+-+-+-+                                               |\n      .\
    \                                                               .\n      .   \
    \                                                            .\n      .      \
    \                                         +-+-+-+-+-+-+-+-+\n      |         \
    \                                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 11: RKAP Authentication Information\n      Type      \
    \       Type of data in the Value field carried in this\n                    \
    \   option:\n                          1    Reconfigure key value (used in the\
    \ Reply\n                               message).\n                          2\
    \    HMAC-MD5 digest of the message (used in\n                               the\
    \ Reconfigure message).\n                       A 1-octet field.\n      Value\
    \            Data as defined by the Type field.  A 16-octet\n                \
    \       field.\n"
- title: 20.4.2.  Server Considerations for RKAP
  contents:
  - "20.4.2.  Server Considerations for RKAP\n   The server selects a reconfigure\
    \ key for a client during the\n   Request/Reply, Solicit/Reply, or Information-request/Reply\
    \ message\n   exchange.  The server records the reconfigure key and transmits\
    \ that\n   key to the client in an Authentication option (see Section 21.11) in\n\
    \   the Reply message.\n   The reconfigure key is 128 bits long and MUST be a\
    \ cryptographically\n   strong random or pseudorandom number that cannot easily\
    \ be predicted.\n   To provide authentication for a Reconfigure message, the server\n\
    \   selects a replay detection value according to the RDM selected by the\n  \
    \ server and computes an HMAC-MD5 of the Reconfigure message using the\n   reconfigure\
    \ key for the client.  The server computes the HMAC-MD5\n   over the entire DHCP\
    \ Reconfigure message, including the\n   Authentication option; the HMAC-MD5 field\
    \ in the Authentication\n   option is set to 0 for the HMAC-MD5 computation. \
    \ The server includes\n   the HMAC-MD5 in the authentication information field\
    \ in an\n   Authentication option included in the Reconfigure message sent to\
    \ the\n   client.\n"
- title: 20.4.3.  Client Considerations for RKAP
  contents:
  - "20.4.3.  Client Considerations for RKAP\n   The client will receive a reconfigure\
    \ key from the server in an\n   Authentication option (see Section 21.11) in the\
    \ initial Reply\n   message from the server.  The client records the reconfigure\
    \ key for\n   use in authenticating subsequent Reconfigure messages.\n   To authenticate\
    \ a Reconfigure message, the client computes an\n   HMAC-MD5 over the Reconfigure\
    \ message, with zeroes substituted for\n   the HMAC-MD5 field, using the reconfigure\
    \ key received from the\n   server.  If this computed HMAC-MD5 matches the value\
    \ in the\n   Authentication option, the client accepts the Reconfigure message.\n"
- title: 21.  DHCP Options
  contents:
  - "21.  DHCP Options\n   Options are used to carry additional information and parameters\
    \ in\n   DHCP messages.  Every option shares a common base format, as\n   described\
    \ in Section 21.1.  All values in options are represented in\n   network byte\
    \ order.\n   This document describes the DHCP options defined as part of the base\n\
    \   DHCP specification.  Other options may be defined in the future in\n   separate\
    \ documents.  See [RFC7227] for guidelines regarding the\n   definition of new\
    \ options.  See Section 24 for additional information\n   about the DHCPv6 \"\
    Option Codes\" registry maintained by IANA.\n   Unless otherwise noted, each option\
    \ may appear only in the options\n   area of a DHCP message and may appear only\
    \ once.  If an option does\n   appear multiple times, each instance is considered\
    \ separate and the\n   data areas of the options MUST NOT be concatenated or otherwise\n\
    \   combined.\n   Options that are allowed to appear only once are called \"singleton\n\
    \   options\".  The only non-singleton options defined in this document\n   are\
    \ the IA_NA (see Section 21.4), IA_TA (see Section 21.5), Vendor\n   Class (see\
    \ Section 21.16), Vendor-specific Information (see\n   Section 21.17), and IA_PD\
    \ (see Section 21.21) options.  Also, IA\n   Address (see Section 21.6) and IA\
    \ Prefix (see Section 21.22) may\n   appear in their respective IA options more\
    \ than once.\n"
- title: 21.1.  Format of DHCP Options
  contents:
  - "21.1.  Format of DHCP Options\n   The format of DHCP options is:\n       0  \
    \                 1                   2                   3\n       0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |          option-code          |           option-len          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                          option-data                          |\n      |   \
    \                   (option-len octets)                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                         Figure 12: Option Format\n      option-code        \
    \  An unsigned integer identifying the specific\n                           option\
    \ type carried in this option.\n                           A 2-octet field.\n\
    \      option-len           An unsigned integer giving the length of the\n   \
    \                        option-data field in this option in octets.\n       \
    \                    A 2-octet field.\n      option-data          The data for\
    \ the option; the format of this\n                           data depends on the\
    \ definition of the option.\n                           A variable-length field\
    \ (the length, in\n                           octets, is specified by option-len).\n\
    \   DHCP options are scoped by using encapsulation.  Some options apply\n   generally\
    \ to the client, some are specific to an IA, and some are\n   specific to the\
    \ addresses within an IA.  These latter two cases are\n   discussed in Sections\
    \ 21.4, 21.5, and 21.6.\n"
- title: 21.2.  Client Identifier Option
  contents:
  - "21.2.  Client Identifier Option\n   The Client Identifier option is used to carry\
    \ a DUID (see Section 11)\n   that identifies the client.  The format of the Client\
    \ Identifier\n   option is:\n       0                   1                   2\
    \                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |        OPTION_CLIENTID        |          option-len           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      .\
    \                                                               .\n      .   \
    \                           DUID                             .\n      .      \
    \                  (variable length)                      .\n      .         \
    \                                                      .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 13: Client Identifier Option Format\n      option-code\
    \          OPTION_CLIENTID (1).\n      option-len           Length of DUID in\
    \ octets.\n      DUID                 The DUID for the client.\n"
- title: 21.3.  Server Identifier Option
  contents:
  - "21.3.  Server Identifier Option\n   The Server Identifier option is used to carry\
    \ a DUID (see Section 11)\n   that identifies the server.  The format of the Server\
    \ Identifier\n   option is:\n       0                   1                   2\
    \                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |        OPTION_SERVERID        |          option-len           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      .\
    \                                                               .\n      .   \
    \                           DUID                             .\n      .      \
    \                  (variable length)                      .\n      .         \
    \                                                      .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 14: Server Identifier Option Format\n      option-code\
    \          OPTION_SERVERID (2).\n      option-len           Length of DUID in\
    \ octets.\n      DUID                 The DUID for the server.\n"
- title: 21.4.  Identity Association for Non-temporary Addresses Option
  contents:
  - "21.4.  Identity Association for Non-temporary Addresses Option\n   The Identity\
    \ Association for Non-temporary Addresses (IA_NA) option\n   is used to carry\
    \ an IA_NA, the parameters associated with the IA_NA,\n   and the non-temporary\
    \ addresses associated with the IA_NA.\n   Addresses appearing in an IA_NA option\
    \ are not temporary addresses\n   (see Section 21.5).\n   The format of the IA_NA\
    \ option is:\n       0                   1                   2               \
    \    3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   |          OPTION_IA_NA         |          option-len           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                        IAID (4 octets)                        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                              T1                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                              T2                               |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      .   \
    \                      IA_NA-options                         .\n      .      \
    \                                                         .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \        Figure 15: Identity Association for Non-temporary Addresses\n       \
    \                        Option Format\n      option-code          OPTION_IA_NA\
    \ (3).\n      option-len           12 + length of IA_NA-options field.\n     \
    \ IAID                 The unique identifier for this IA_NA; the\n           \
    \                IAID must be unique among the identifiers for\n             \
    \              all of this client's IA_NAs.  The number\n                    \
    \       space for IA_NA IAIDs is separate from the\n                         \
    \  number space for other IA option types (i.e.,\n                           IA_TA\
    \ and IA_PD).  A 4-octet field containing\n                           an unsigned\
    \ integer.\n      T1                   The time interval after which the client\n\
    \                           should contact the server from which the\n       \
    \                    addresses in the IA_NA were obtained to\n               \
    \            extend the lifetimes of the addresses\n                         \
    \  assigned to the IA_NA; T1 is a time duration\n                           relative\
    \ to the current time expressed in\n                           units of seconds.\
    \  A 4-octet field containing\n                           an unsigned integer.\n\
    \      T2                   The time interval after which the client\n       \
    \                    should contact any available server to extend\n         \
    \                  the lifetimes of the addresses assigned to\n              \
    \             the IA_NA; T2 is a time duration relative to\n                 \
    \          the current time expressed in units of\n                          \
    \ seconds.  A 4-octet field containing an\n                           unsigned\
    \ integer.\n      IA_NA-options        Options associated with this IA_NA.  A\n\
    \                           variable-length field (12 octets less than\n     \
    \                      the value in the option-len field).\n   The IA_NA-options\
    \ field encapsulates those options that are specific\n   to this IA_NA.  For example,\
    \ all of the IA Address options (see\n   Section 21.6) carrying the addresses\
    \ associated with this IA_NA are\n   in the IA_NA-options field.\n   Each IA_NA\
    \ carries one \"set\" of non-temporary addresses; it is up to\n   the server policy\
    \ to determine how many addresses are assigned, but\n   typically at most one\
    \ address is assigned from each prefix assigned\n   to the link to which the client\
    \ is attached.\n   An IA_NA option may only appear in the options area of a DHCP\n\
    \   message.  A DHCP message may contain multiple IA_NA options (though\n   each\
    \ must have a unique IAID).\n   The status of any operations involving this IA_NA\
    \ is indicated in a\n   Status Code option (see Section 21.13) in the IA_NA-options\
    \ field.\n   Note that an IA_NA has no explicit \"lifetime\" or \"lease length\"\
    \ of\n   its own.  When the valid lifetimes of all of the addresses in an\n  \
    \ IA_NA have expired, the IA_NA can be considered as having expired.\n   T1 and\
    \ T2 are included to give servers explicit control over when a\n   client recontacts\
    \ the server about a specific IA_NA.\n   In a message sent by a client to a server,\
    \ the T1 and T2 fields\n   SHOULD be set to 0.  The server MUST ignore any values\
    \ in these\n   fields in messages received from a client.\n   In a message sent\
    \ by a server to a client, the client MUST use the\n   values in the T1 and T2\
    \ fields for the T1 and T2 times, unless values\n   in those fields are 0.  The\
    \ values in the T1 and T2 fields are the\n   number of seconds until T1 and T2\
    \ and are calculated since reception\n   of the message.\n   As per Section 7.7,\
    \ the value 0xffffffff is taken to mean \"infinity\"\n   and should be used carefully.\n\
    \   The server selects the T1 and T2 values to allow the client to extend\n  \
    \ the lifetimes of any addresses in the IA_NA before the lifetimes\n   expire,\
    \ even if the server is unavailable for some short period of\n   time.  Recommended\
    \ values for T1 and T2 are 0.5 and 0.8 times the\n   shortest preferred lifetime\
    \ of the addresses in the IA that the\n   server is willing to extend, respectively.\
    \  If the \"shortest\"\n   preferred lifetime is 0xffffffff (\"infinity\"), the\
    \ recommended T1 and\n   T2 values are also 0xffffffff.  If the time at which\
    \ the addresses in\n   an IA_NA are to be renewed is to be left to the discretion\
    \ of the\n   client, the server sets the T1 and T2 values to 0.  The client MUST\n\
    \   follow the rules defined in Section 14.2.\n   If a client receives an IA_NA\
    \ with T1 greater than T2 and both T1 and\n   T2 are greater than 0, the client\
    \ discards the IA_NA option and\n   processes the remainder of the message as\
    \ though the server had not\n   included the invalid IA_NA option.\n"
- title: 21.5.  Identity Association for Temporary Addresses Option
  contents:
  - "21.5.  Identity Association for Temporary Addresses Option\n   The Identity Association\
    \ for Temporary Addresses (IA_TA) option is\n   used to carry an IA_TA, the parameters\
    \ associated with the IA_TA, and\n   the addresses associated with the IA_TA.\
    \  All of the addresses in\n   this option are used by the client as temporary\
    \ addresses, as defined\n   in [RFC4941].  The format of the IA_TA option is:\n\
    \       0                   1                   2                   3\n      \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |          OPTION_IA_TA         |          option-len           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                        IAID (4 octets)                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   .                         IA_TA-options                         .\n      .\
    \                                                               .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Figure 16: Identity Association for Temporary Addresses Option Format\n  \
    \    option-code          OPTION_IA_TA (4).\n      option-len           4 + length\
    \ of IA_TA-options field.\n      IAID                 The unique identifier for\
    \ this IA_TA; the\n                           IAID must be unique among the identifiers\
    \ for\n                           all of this client's IA_TAs.  The number\n \
    \                          space for IA_TA IAIDs is separate from the\n      \
    \                     number space for other IA option types (i.e.,\n        \
    \                   IA_NA and IA_PD).  A 4-octet field containing\n          \
    \                 an unsigned integer.\n      IA_TA-options        Options associated\
    \ with this IA_TA.  A\n                           variable-length field (4 octets\
    \ less than the\n                           value in the option-len field).\n\
    \   The IA_TA-options field encapsulates those options that are specific\n   to\
    \ this IA_TA.  For example, all of the IA Address options (see\n   Section 21.6)\
    \ carrying the addresses associated with this IA_TA are\n   in the IA_TA-options\
    \ field.\n   Each IA_TA carries one \"set\" of temporary addresses.  It is up\
    \ to the\n   server policy to determine how many addresses are assigned.\n   An\
    \ IA_TA option may only appear in the options area of a DHCP\n   message.  A DHCP\
    \ message may contain multiple IA_TA options (though\n   each must have a unique\
    \ IAID).\n   The status of any operations involving this IA_TA is indicated in\
    \ a\n   Status Code option (see Section 21.13) in the IA_TA-options field.\n \
    \  Note that an IA has no explicit \"lifetime\" or \"lease length\" of its\n \
    \  own.  When the valid lifetimes of all of the addresses in an IA_TA\n   have\
    \ expired, the IA can be considered as having expired.\n   An IA_TA option does\
    \ not include values for T1 and T2.  A client MAY\n   request that the valid lifetime\
    \ on temporary addresses be extended by\n   including the addresses in an IA_TA\
    \ option sent in a Renew or Rebind\n   message to a server.  For example, a client\
    \ would request an\n   extension on the valid lifetime of a temporary address\
    \ to allow an\n   application to continue to use an established TCP connection.\n\
    \   Extending only the valid, but not the preferred, lifetime means the\n   address\
    \ will end up in a deprecated state eventually.  Existing\n   connections could\
    \ continue, but no new ones would be created using\n   that address.\n   The client\
    \ obtains new temporary addresses by sending an IA_TA option\n   with a new IAID\
    \ to a server.  Requesting new temporary addresses from\n   the server is the\
    \ equivalent of generating new temporary addresses as\n   described in [RFC4941].\
    \  The server will generate new temporary\n   addresses and return them to the\
    \ client.  The client should request\n   new temporary addresses before the lifetimes\
    \ on the previously\n   assigned addresses expire.\n   A server MUST return the\
    \ same set of temporary addresses for the same\n   IA_TA (as identified by the\
    \ IAID) as long as those addresses are\n   still valid.  After the lifetimes of\
    \ the addresses in an IA_TA have\n   expired, the IAID may be reused to identify\
    \ a new IA_TA with new\n   temporary addresses.\n"
- title: 21.6.  IA Address Option
  contents:
  - "21.6.  IA Address Option\n   The IA Address option is used to specify an address\
    \ associated with\n   an IA_NA or an IA_TA.  The IA Address option must be encapsulated\
    \ in\n   the IA_NA-options field of an IA_NA option (see Section 21.4) or the\n\
    \   IA_TA-options field of an IA_TA option (see Section 21.5).  The\n   IAaddr-options\
    \ field encapsulates those options that are specific to\n   this address.\n  \
    \ The format of the IA Address option is:\n       0                   1      \
    \             2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |          OPTION_IAADDR        |          option-len           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      |   \
    \                      IPv6-address                          |\n      |      \
    \                                                         |\n      |         \
    \                                                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                      preferred-lifetime                       |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                        valid-lifetime                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      .                                                               .\n   \
    \   .                        IAaddr-options                         .\n      .\
    \                                                               .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                    Figure 17: IA Address Option Format\n      option-code  \
    \        OPTION_IAADDR (5).\n      option-len           24 + length of IAaddr-options\
    \ field.\n      IPv6-address         An IPv6 address.  A client MUST NOT form\
    \ an\n                           implicit prefix with a length other than 128\n\
    \                           for this address.  A 16-octet field.\n      preferred-lifetime\
    \   The preferred lifetime for the address in the\n                          \
    \ option, expressed in units of seconds.  A\n                           4-octet\
    \ field containing an unsigned integer.\n      valid-lifetime       The valid\
    \ lifetime for the address in the\n                           option, expressed\
    \ in units of seconds.  A\n                           4-octet field containing\
    \ an unsigned integer.\n      IAaddr-options       Options associated with this\
    \ address.  A\n                           variable-length field (24 octets less\
    \ than\n                           the value in the option-len field).\n   In\
    \ a message sent by a client to a server, the preferred-lifetime and\n   valid-lifetime\
    \ fields SHOULD be set to 0.  The server MUST ignore any\n   received values.\n\
    \   The client SHOULD NOT send the IA Address option with an unspecified\n   address\
    \ (::).\n   In a message sent by a server to a client, the client MUST use the\n\
    \   values in the preferred-lifetime and valid-lifetime fields for the\n   preferred\
    \ and valid lifetimes.  The values in these fields are the\n   number of seconds\
    \ remaining in each lifetime.\n   The client MUST discard any addresses for which\
    \ the preferred\n   lifetime is greater than the valid lifetime.\n   As per Section\
    \ 7.7, if the valid lifetime of an address is\n   0xffffffff, it is taken to mean\
    \ \"infinity\" and should be used\n   carefully.\n   More than one IA Address\
    \ option can appear in an IA_NA option or an\n   IA_TA option.\n   The status\
    \ of any operations involving this IA Address is indicated\n   in a Status Code\
    \ option in the IAaddr-options field, as specified in\n   Section 21.13.\n"
- title: 21.7.  Option Request Option
  contents:
  - "21.7.  Option Request Option\n   The Option Request option is used to identify\
    \ a list of options in a\n   message between a client and a server.  The format\
    \ of the Option\n   Request option is:\n       0                   1         \
    \          2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |           OPTION_ORO          |           option-len          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \    requested-option-code-1    |    requested-option-code-2    |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                              ...                              |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \            Figure 18: Option Request Option Format\n      option-code      \
    \         OPTION_ORO (6).\n      option-len                2 * number of requested\
    \ options.\n      requested-option-code-n   The option code for an option requested\n\
    \                                by the client.  Each option code is a\n     \
    \                           2-octet field containing an unsigned\n           \
    \                     integer.\n   A client MUST include an Option Request option\
    \ in a Solicit, Request,\n   Renew, Rebind, or Information-request message to\
    \ inform the server\n   about options the client wants the server to send to the\
    \ client.  For\n   certain message types, some option codes MUST be included in\
    \ the\n   Option Request option; see Table 4 for details.\n   The Option Request\
    \ option MUST NOT include the following options:\n   -  Client Identifier (see\
    \ Section 21.2)\n   -  Server Identifier (see Section 21.3)\n   -  IA_NA (see\
    \ Section 21.4)\n   -  IA_TA (see Section 21.5)\n   -  IA_PD (see Section 21.21)\n\
    \   -  IA Address (see Section 21.6)\n   -  IA Prefix (see Section 21.22)\n  \
    \ -  Option Request (this section)\n   -  Elapsed Time (see Section 21.9)\n  \
    \ -  Preference (see Section 21.8)\n   -  Relay Message (see Section 21.10)\n\
    \   -  Authentication (see Section 21.11)\n   -  Server Unicast (see Section 21.12)\n\
    \   -  Status Code (see Section 21.13)\n   -  Rapid Commit (see Section 21.14)\n\
    \   -  User Class (see Section 21.15)\n   -  Vendor Class (see Section 21.16)\n\
    \   -  Interface-Id (see Section 21.18)\n   -  Reconfigure Message (see Section\
    \ 21.19)\n   -  Reconfigure Accept (see Section 21.20)\n   Other top-level options\
    \ MUST appear in the Option Request option or\n   they will not be sent by the\
    \ server.  Only top-level options MAY\n   appear in the Option Request option.\
    \  Options encapsulated in a\n   container option SHOULD NOT appear in an Option\
    \ Request option; see\n   [RFC7598] for an example of container options.  However,\
    \ options MAY\n   be defined that specify exceptions to this restriction on including\n\
    \   encapsulated options in an Option Request option.  For example, the\n   Option\
    \ Request option MAY be used to signal support for a feature\n   even when that\
    \ option is encapsulated, as in the case of the Prefix\n   Exclude option [RFC6603].\
    \  See Table 4.\n"
- title: 21.8.  Preference Option
  contents:
  - "21.8.  Preference Option\n   The Preference option is sent by a server to a client\
    \ to control the\n   selection of a server by the client.\n   The format of the\
    \ Preference option is:\n       0                   1                   2    \
    \               3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |       OPTION_PREFERENCE       |          option-len           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \  pref-value   |\n      +-+-+-+-+-+-+-+-+\n                    Figure 19: Preference\
    \ Option Format\n      option-code          OPTION_PREFERENCE (7).\n      option-len\
    \           1.\n      pref-value           The preference value for the server\
    \ in this\n                           message.  A 1-octet unsigned integer.\n\
    \   A server MAY include a Preference option in an Advertise message to\n   control\
    \ the selection of a server by the client.  See Section 18.2.9\n   for information\
    \ regarding the use of the Preference option by the\n   client and the interpretation\
    \ of the Preference option data value.\n"
- title: 21.9.  Elapsed Time Option
  contents:
  - "21.9.  Elapsed Time Option\n       0                   1                   2\
    \                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |      OPTION_ELAPSED_TIME      |           option-len          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \          elapsed-time         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n \
    \                  Figure 20: Elapsed Time Option Format\n      option-code  \
    \        OPTION_ELAPSED_TIME (8).\n      option-len           2.\n      elapsed-time\
    \         The amount of time since the client began its\n                    \
    \       current DHCP transaction.  This time is\n                           expressed\
    \ in hundredths of a second\n                           (10^-2 seconds).  A 2-octet\
    \ field containing\n                           an unsigned integer.\n   A client\
    \ MUST include an Elapsed Time option in messages to indicate\n   how long the\
    \ client has been trying to complete a DHCP message\n   exchange.  The elapsed\
    \ time is measured from the time at which the\n   client sent the first message\
    \ in the message exchange, and the\n   elapsed-time field is set to 0 in the first\
    \ message in the message\n   exchange.  Servers and relay agents use the data\
    \ value in this option\n   as input to policy that controls how a server responds\
    \ to a client\n   message.  For example, the Elapsed Time option allows a secondary\n\
    \   DHCP server to respond to a request when a primary server has not\n   answered\
    \ in a reasonable time.  The elapsed-time value is a 16-bit\n   (2-octet) unsigned\
    \ integer.  The client uses the value 0xffff to\n   represent any elapsed-time\
    \ values greater than the largest time value\n   that can be represented in the\
    \ Elapsed Time option.\n"
- title: 21.10.  Relay Message Option
  contents:
  - "21.10.  Relay Message Option\n   The Relay Message option carries a DHCP message\
    \ in a Relay-forward or\n   Relay-reply message.\n   The format of the Relay Message\
    \ option is:\n       0                   1                   2               \
    \    3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   |        OPTION_RELAY_MSG       |           option-len          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   .                       DHCP-relay-message                      .\n      .\
    \                                                               .\n      .   \
    \                                                            .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                  Figure 21: Relay Message Option Format\n      option-code \
    \         OPTION_RELAY_MSG (9).\n      option-len           Length of DHCP-relay-message\
    \ field.\n      DHCP-relay-message   In a Relay-forward message, the received\n\
    \                           message, relayed verbatim to the next relay\n    \
    \                       agent or server; in a Relay-reply message,\n         \
    \                  the message to be copied and relayed to the\n             \
    \              relay agent or client whose address is in the\n               \
    \            peer-address field of the Relay-reply\n                         \
    \  message.  The length, in octets, is specified\n                           by\
    \ option-len.\n"
- title: 21.11.  Authentication Option
  contents:
  - "21.11.  Authentication Option\n   The Authentication option carries authentication\
    \ information to\n   authenticate the identity and contents of DHCP messages.\
    \  The use of\n   the Authentication option is described in Section 20.  The delayed\n\
    \   authentication protocol, defined in [RFC3315], has been obsoleted by\n   this\
    \ document, due to lack of usage (see Section 25).  The format of\n   the Authentication\
    \ option is:\n       0                   1                   2               \
    \    3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   |          OPTION_AUTH          |          option-len           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |   protocol    |   algorithm   |      RDM      |               |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+               |\n      |\
    \                                                               |\n      |   \
    \       replay detection (64 bits)           +-+-+-+-+-+-+-+-+\n      |      \
    \                                         |               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \               |\n      .                   authentication information      \
    \            .\n      .                       (variable length)              \
    \         .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                  Figure 22: Authentication Option Format\n      option-code\
    \                  OPTION_AUTH (11).\n      option-len                   11 +\
    \ length of authentication\n                                   information field.\n\
    \      protocol                     The authentication protocol used in\n    \
    \                               this Authentication option.  A\n             \
    \                      1-octet unsigned integer.\n      algorithm            \
    \        The algorithm used in the\n                                   authentication\
    \ protocol.  A 1-octet\n                                   unsigned integer.\n\
    \      RDM                          The replay detection method used in\n    \
    \                               this Authentication option.  A\n             \
    \                      1-octet unsigned integer.\n      replay detection     \
    \        The replay detection information for\n                              \
    \     the RDM.  A 64-bit (8-octet) field.\n      authentication information  \
    \ The authentication information, as\n                                   specified\
    \ by the protocol and\n                                   algorithm used in this\
    \ Authentication\n                                   option.  A variable-length\
    \ field\n                                   (11 octets less than the value in\
    \ the\n                                   option-len field).\n   IANA maintains\
    \ a registry for the protocol, algorithm, and RDM values\n   at <https://www.iana.org/assignments/auth-namespaces>.\n"
- title: 21.12.  Server Unicast Option
  contents:
  - "21.12.  Server Unicast Option\n   The server sends this option to a client to\
    \ indicate to the client\n   that it is allowed to unicast messages to the server.\
    \  The format of\n   the Server Unicast option is:\n       0                 \
    \  1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |          OPTION_UNICAST       |        option-len             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      |   \
    \                    server-address                          |\n      |      \
    \                                                         |\n      |         \
    \                                                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                  Figure 23: Server Unicast Option Format\n      option-code\
    \          OPTION_UNICAST (12).\n      option-len           16.\n      server-address\
    \       The 128-bit address to which the client\n                           should\
    \ send messages delivered using unicast.\n   The server specifies in the server-address\
    \ field the address to which\n   the client is to send unicast messages.  When\
    \ a client receives this\n   option, where permissible and appropriate the client\
    \ sends messages\n   directly to the server using the address specified in the\n\
    \   server-address field of the option.\n   When the server sends a Server Unicast\
    \ option to the client, some\n   messages from the client will not be relayed\
    \ by relay agents and will\n   not include relay agent options from the relay\
    \ agents.  Therefore, a\n   server should only send a Server Unicast option to\
    \ a client when\n   relay agents are not sending relay agent options.  A DHCP\
    \ server\n   rejects any messages sent inappropriately using unicast to ensure\n\
    \   that messages are relayed by relay agents when relay agent options\n   are\
    \ in use.\n   Details about when the client may send messages to the server using\n\
    \   unicast are provided in Section 18.\n"
- title: 21.13.  Status Code Option
  contents:
  - "21.13.  Status Code Option\n   This option returns a status indication related\
    \ to the DHCP message\n   or option in which it appears.  The format of the Status\
    \ Code\n   option is:\n       0                   1                   2      \
    \             3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |       OPTION_STATUS_CODE      |         option-len            |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \          status-code          |                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               |\n      .                                   \
    \                            .\n      .                        status-message\
    \                         .\n      .                                         \
    \                      .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                   Figure 24: Status Code Option Format\n      option-code  \
    \        OPTION_STATUS_CODE (13).\n      option-len           2 + length of status-message\
    \ field.\n      status-code          The numeric code for the status encoded in\n\
    \                           this option.  A 2-octet field containing an\n    \
    \                       unsigned integer.\n      status-message       A UTF-8\
    \ encoded [RFC3629] text string\n                           suitable for display\
    \ to an end user.\n                           MUST NOT be null-terminated.  A\n\
    \                           variable-length field (2 octets less than the\n  \
    \                         value in the option-len field).\n   A Status Code option\
    \ may appear in the \"options\" field of a DHCP\n   message and/or in the \"options\"\
    \ field of another option.  If the\n   Status Code option does not appear in a\
    \ message in which the option\n   could appear, the status of the message is assumed\
    \ to be Success.\n   The status-code values previously defined by [RFC3315] and\n\
    \   [RFC3633] are:\n   +---------------+------+--------------------------------------------+\n\
    \   | Name          | Code | Description                                |\n  \
    \ +---------------+------+--------------------------------------------+\n   |\
    \ Success       |    0 | Success.                                   |\n   |  \
    \             |      |                                            |\n   | UnspecFail\
    \    |    1 | Failure, reason unspecified; this status   |\n   |             \
    \  |      | code is sent by either a client or a       |\n   |               |\
    \      | server to indicate a failure not           |\n   |               |  \
    \    | explicitly specified in this document.     |\n   |               |    \
    \  |                                            |\n   | NoAddrsAvail  |    2 |\
    \ The server has no addresses available to   |\n   |               |      | assign\
    \ to the IA(s).                       |\n   |               |      |         \
    \                                   |\n   | NoBinding     |    3 | Client record\
    \ (binding) unavailable.       |\n   |               |      |                \
    \                            |\n   | NotOnLink     |    4 | The prefix for the\
    \ address is not          |\n   |               |      | appropriate for the link\
    \ to which the      |\n   |               |      | client is attached.       \
    \                 |\n   |               |      |                             \
    \               |\n   | UseMulticast  |    5 | Sent by a server to a client to\
    \ force the  |\n   |               |      | client to send messages to the server\
    \      |\n   |               |      | using the                              \
    \    |\n   |               |      | All_DHCP_Relay_Agents_and_Servers        \
    \  |\n   |               |      | multicast address.                         |\n\
    \   |               |      |                                            |\n  \
    \ | NoPrefixAvail |    6 | The server has no prefixes available to    |\n   |\
    \               |      | assign to the IA_PD(s).                    |\n   +---------------+------+--------------------------------------------+\n\
    \                     Table 3: Status Code Definitions\n   See the \"Status Codes\"\
    \ registry at <https://www.iana.org/assignments/\n   dhcpv6-parameters> for the\
    \ current list of status codes.\n"
- title: 21.14.  Rapid Commit Option
  contents:
  - "21.14.  Rapid Commit Option\n   The Rapid Commit option is used to signal the\
    \ use of the two-message\n   exchange for address assignment.  The format of the\
    \ Rapid Commit\n   option is:\n       0                   1                  \
    \ 2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |      OPTION_RAPID_COMMIT      |         option-len            |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \             Figure 25: Rapid Commit Option Format\n      option-code       \
    \   OPTION_RAPID_COMMIT (14).\n      option-len           0.\n   A client MAY\
    \ include this option in a Solicit message if the client\n   is prepared to perform\
    \ the Solicit/Reply message exchange described\n   in Section 18.2.1.\n   A server\
    \ MUST include this option in a Reply message sent in response\n   to a Solicit\
    \ message when completing the Solicit/Reply message\n   exchange.\n   DISCUSSION:\n\
    \      Each server that responds with a Reply to a Solicit that includes\n   \
    \   a Rapid Commit option will commit the leases in the Reply message\n      to\
    \ the client but will not receive any confirmation that the\n      client has\
    \ received the Reply message.  Therefore, if more than\n      one server responds\
    \ to a Solicit that includes a Rapid Commit\n      option, all but one server\
    \ will commit leases that are not\n      actually used by the client; this could\
    \ result in incorrect\n      address information in DNS if the DHCP servers update\
    \ DNS\n      [RFC4704], and responses to leasequery requests [RFC5007] may\n \
    \     include information on leases not in use by the client.\n      The problem\
    \ of unused leases can be minimized by designing the\n      DHCP service so that\
    \ only one server responds to the Solicit or by\n      using relatively short\
    \ lifetimes for newly assigned leases.\n"
- title: 21.15.  User Class Option
  contents:
  - "21.15.  User Class Option\n   The User Class option is used by a client to identify\
    \ the type or\n   category of users or applications it represents.\n   The format\
    \ of the User Class option is:\n       0                   1                 \
    \  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |       OPTION_USER_CLASS       |          option-len           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      .\
    \                                                               .\n      .   \
    \                       user-class-data                      .\n      .      \
    \                                                         .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                    Figure 26: User Class Option Format\n      option-code  \
    \        OPTION_USER_CLASS (15).\n      option-len           Length of user-class-data\
    \ field.\n      user-class-data      The user classes carried by the client. \
    \ The\n                           length, in octets, is specified by\n       \
    \                    option-len.\n   The information contained in the data area\
    \ of this option is\n   contained in one or more opaque fields that represent\
    \ the user class\n   or classes of which the client is a member.  A server selects\n\
    \   configuration information for the client based on the classes\n   identified\
    \ in this option.  For example, the User Class option can be\n   used to configure\
    \ all clients of people in the accounting department\n   with a different printer\
    \ than clients of people in the marketing\n   department.  The user class information\
    \ carried in this option MUST\n   be configurable on the client.\n   The data\
    \ area of the User Class option MUST contain one or more\n   instances of user-class-data\
    \ information.  Each instance of\n   user-class-data is formatted as follows:\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...-+-+-+-+-+-+-+\n   \
    \   |        user-class-len         |          opaque-data          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...-+-+-+-+-+-+-+\n\
    \                Figure 27: Format of user-class-data Field\n   The user-class-len\
    \ field is 2 octets long and specifies the length of\n   the opaque user-class-data\
    \ in network byte order.\n   A server interprets the classes identified in this\
    \ option according\n   to its configuration to select the appropriate configuration\n\
    \   information for the client.  A server may use only those user classes\n  \
    \ that it is configured to interpret in selecting configuration\n   information\
    \ for a client and ignore any other user classes.  In\n   response to a message\
    \ containing a User Class option, a server may\n   include a User Class option\
    \ containing those classes that were\n   successfully interpreted by the server\
    \ so that the client can be\n   informed of the classes interpreted by the server.\n"
- title: 21.16.  Vendor Class Option
  contents:
  - "21.16.  Vendor Class Option\n   This option is used by a client to identify the\
    \ vendor that\n   manufactured the hardware on which the client is running.  The\n\
    \   information contained in the data area of this option is contained in\n  \
    \ one or more opaque fields that identify details of the hardware\n   configuration.\
    \  The format of the Vendor Class option is:\n       0                   1   \
    \                2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |      OPTION_VENDOR_CLASS      |           option-len          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                       enterprise-number                       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      .                                                               .\n   \
    \   .                       vendor-class-data                       .\n      .\
    \                             . . .                             .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                   Figure 28: Vendor Class Option Format\n      option-code \
    \         OPTION_VENDOR_CLASS (16).\n      option-len           4 + length of\
    \ vendor-class-data field.\n      enterprise-number    The vendor's registered\
    \ Enterprise Number as\n                           maintained by IANA [IANA-PEN].\
    \  A 4-octet\n                           field containing an unsigned integer.\n\
    \      vendor-class-data    The hardware configuration of the node on\n      \
    \                     which the client is running.  A\n                      \
    \     variable-length field (4 octets less than the\n                        \
    \   value in the option-len field).\n   The vendor-class-data field is composed\
    \ of a series of separate\n   items, each of which describes some characteristic\
    \ of the client's\n   hardware configuration.  Examples of vendor-class-data instances\n\
    \   might include the version of the operating system the client is\n   running\
    \ or the amount of memory installed on the client.\n   Each instance of vendor-class-data\
    \ is formatted as follows:\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...-+-+-+-+-+-+-+\n\
    \      |       vendor-class-len        |          opaque-data          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...-+-+-+-+-+-+-+\n      \
    \         Figure 29: Format of vendor-class-data Field\n   The vendor-class-len\
    \ field is 2 octets long and specifies the length\n   of the opaque vendor-class-data\
    \ in network byte order.\n   Servers and clients MUST NOT include more than one\
    \ instance of\n   OPTION_VENDOR_CLASS with the same Enterprise Number.  Each instance\n\
    \   of OPTION_VENDOR_CLASS can carry multiple vendor-class-data\n   instances.\n"
- title: 21.17.  Vendor-specific Information Option
  contents:
  - "21.17.  Vendor-specific Information Option\n   This option is used by clients\
    \ and servers to exchange vendor-\n   specific information.\n   The format of\
    \ the Vendor-specific Information option is:\n       0                   1   \
    \                2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |      OPTION_VENDOR_OPTS       |           option-len          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                       enterprise-number                       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      .                                                               .\n   \
    \   .                       vendor-option-data                      .\n      .\
    \                                                               .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \           Figure 30: Vendor-specific Information Option Format\n      option-code\
    \          OPTION_VENDOR_OPTS (17).\n      option-len           4 + length of\
    \ vendor-option-data field.\n      enterprise-number    The vendor's registered\
    \ Enterprise Number as\n                           maintained by IANA [IANA-PEN].\
    \  A 4-octet\n                           field containing an unsigned integer.\n\
    \      vendor-option-data   Vendor options, interpreted by\n                 \
    \          vendor-specific code on the clients and\n                         \
    \  servers.  A variable-length field (4 octets\n                           less\
    \ than the value in the option-len field).\n   The definition of the information\
    \ carried in this option is vendor\n   specific.  The vendor is indicated in the\
    \ enterprise-number field.\n   Use of vendor-specific information allows enhanced\
    \ operation,\n   utilizing additional features in a vendor's DHCP implementation.\
    \  A\n   DHCP client that does not receive requested vendor-specific\n   information\
    \ will still configure the node's IPv6 stack to be\n   functional.\n   The vendor-option-data\
    \ field MUST be encoded as a sequence of\n   code/length/value fields of format\
    \ identical to the DHCP options (see\n   Section 21.1).  The sub-option codes\
    \ are defined by the vendor\n   identified in the enterprise-number field and\
    \ are not managed by\n   IANA.  Each of the sub-options is formatted as follows:\n\
    \       0                   1                   2                   3\n      \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |          sub-opt-code         |         sub-option-len        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      .\
    \                                                               .\n      .   \
    \                     sub-option-data                        .\n      .      \
    \                                                         .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                 Figure 31: Vendor-specific Options Format\n      sub-opt-code\
    \         The code for the sub-option.  A 2-octet\n                          \
    \ field.\n      sub-option-len       An unsigned integer giving the length of\
    \ the\n                           sub-option-data field in this sub-option in\n\
    \                           octets.  A 2-octet field.\n      sub-option-data \
    \     The data area for the sub-option.  The\n                           length,\
    \ in octets, is specified by\n                           sub-option-len.\n   Multiple\
    \ instances of the Vendor-specific Information option may\n   appear in a DHCP\
    \ message.  Each instance of the option is interpreted\n   according to the option\
    \ codes defined by the vendor identified by the\n   Enterprise Number in that\
    \ option.  Servers and clients MUST NOT send\n   more than one instance of the\
    \ Vendor-specific Information option with\n   the same Enterprise Number.  Each\
    \ instance of the Vendor-specific\n   Information option MAY contain multiple\
    \ sub-options.\n   A client that is interested in receiving a Vendor-specific\n\
    \   Information option:\n   -  MUST specify the Vendor-specific Information option\
    \ in an Option\n      Request option.\n   -  MAY specify an associated Vendor\
    \ Class option (see Section 21.16).\n   -  MAY specify the Vendor-specific Information\
    \ option with\n      appropriate data.\n   Servers only return the Vendor-specific\
    \ Information options if\n   specified in Option Request options from clients\
    \ and:\n   -  MAY use the Enterprise Numbers in the associated Vendor Class\n\
    \      options to restrict the set of Enterprise Numbers in the\n      Vendor-specific\
    \ Information options returned.\n   -  MAY return all configured Vendor-specific\
    \ Information options.\n   -  MAY use other information in the packet or in its\
    \ configuration to\n      determine which set of Enterprise Numbers in the Vendor-specific\n\
    \      Information options to return.\n"
- title: 21.18.  Interface-Id Option
  contents:
  - "21.18.  Interface-Id Option\n   The relay agent MAY send the Interface-Id option\
    \ to identify the\n   interface on which the client message was received.  If\
    \ a relay agent\n   receives a Relay-reply message with an Interface-Id option,\
    \ the relay\n   agent relays the message to the client through the interface\n\
    \   identified by the option.\n   The format of the Interface-Id option is:\n\
    \       0                   1                   2                   3\n      \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |      OPTION_INTERFACE_ID      |         option-len            |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      .\
    \                                                               .\n      .   \
    \                      interface-id                          .\n      .      \
    \                                                         .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                   Figure 32: Interface-Id Option Format\n      option-code \
    \         OPTION_INTERFACE_ID (18).\n      option-len           Length of interface-id\
    \ field.\n      interface-id         An opaque value of arbitrary length generated\n\
    \                           by the relay agent to identify one of the\n      \
    \                     relay agent's interfaces.  The length, in\n            \
    \               octets, is specified by option-len.\n   The server MUST copy the\
    \ Interface-Id option from the Relay-forward\n   message into the Relay-reply\
    \ message the server sends to the relay\n   agent in response to the Relay-forward\
    \ message.  This option MUST NOT\n   appear in any message except a Relay-forward\
    \ or Relay-reply message.\n   Servers MAY use the interface-id field for parameter\
    \ assignment\n   policies.  The interface-id value SHOULD be considered an opaque\n\
    \   value, with policies based on exact match only; that is, the\n   interface-id\
    \ field SHOULD NOT be internally parsed by the server.\n   The interface-id value\
    \ for an interface SHOULD be stable and remain\n   unchanged -- for example, after\
    \ the relay agent is restarted; if the\n   interface-id value changes, a server\
    \ will not be able to use it\n   reliably in parameter assignment policies.\n"
- title: 21.19.  Reconfigure Message Option
  contents:
  - "21.19.  Reconfigure Message Option\n   A server includes a Reconfigure Message\
    \ option in a Reconfigure\n   message to indicate to the client whether the client\
    \ responds with a\n   Renew message, a Rebind message, or an Information-request\
    \ message.\n   The format of the Reconfigure Message option is:\n       0    \
    \               1                   2                   3\n       0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |      OPTION_RECONF_MSG        |         option-len            |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \    msg-type   |\n      +-+-+-+-+-+-+-+-+\n               Figure 33: Reconfigure\
    \ Message Option Format\n      option-code          OPTION_RECONF_MSG (19).\n\
    \      option-len           1.\n      msg-type             5 for Renew message,\
    \ 6 for Rebind message,\n                           11 for Information-request\
    \ message.  A\n                           1-octet unsigned integer.\n   The Reconfigure\
    \ Message option can only appear in a Reconfigure\n   message.\n"
- title: 21.20.  Reconfigure Accept Option
  contents:
  - "21.20.  Reconfigure Accept Option\n   A client uses the Reconfigure Accept option\
    \ to announce to the server\n   whether the client is willing to accept Reconfigure\
    \ messages, and a\n   server uses this option to tell the client whether or not\
    \ to accept\n   Reconfigure messages.  In the absence of this option, the default\n\
    \   behavior is that the client is unwilling to accept Reconfigure\n   messages.\
    \  The format of the Reconfigure Accept option is:\n       0                 \
    \  1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     OPTION_RECONF_ACCEPT      |         option-len            |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \          Figure 34: Reconfigure Accept Option Format\n      option-code    \
    \      OPTION_RECONF_ACCEPT (20).\n      option-len           0.\n"
- title: 21.21.  Identity Association for Prefix Delegation Option
  contents:
  - "21.21.  Identity Association for Prefix Delegation Option\n   The IA_PD option\
    \ is used to carry a prefix delegation identity\n   association, the parameters\
    \ associated with the IA_PD, and the\n   prefixes associated with it.  The format\
    \ of the IA_PD option is:\n       0                   1                   2  \
    \                 3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |         OPTION_IA_PD          |           option-len          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                         IAID (4 octets)                       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                              T1                               |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                              T2                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      .                                                               .\n   \
    \   .                          IA_PD-options                        .\n      .\
    \                                                               .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    Figure 35: Identity Association for Prefix Delegation Option Format\n   \
    \   option-code          OPTION_IA_PD (25).\n      option-len           12 + length\
    \ of IA_PD-options field.\n      IAID                 The unique identifier for\
    \ this IA_PD; the\n                           IAID must be unique among the identifiers\
    \ for\n                           all of this client's IA_PDs.  The number\n \
    \                          space for IA_PD IAIDs is separate from the\n      \
    \                     number space for other IA option types (i.e.,\n        \
    \                   IA_NA and IA_TA).  A 4-octet field containing\n          \
    \                 an unsigned integer.\n      T1                   The time interval\
    \ after which the client\n                           should contact the server\
    \ from which the\n                           prefixes in the IA_PD were obtained\
    \ to extend\n                           the lifetimes of the prefixes delegated\
    \ to\n                           the IA_PD; T1 is a time duration relative to\n\
    \                           the message reception time expressed in units\n  \
    \                         of seconds.  A 4-octet field containing an\n       \
    \                    unsigned integer.\n      T2                   The time interval\
    \ after which the client\n                           should contact any available\
    \ server to extend\n                           the lifetimes of the prefixes assigned\
    \ to the\n                           IA_PD; T2 is a time duration relative to\
    \ the\n                           message reception time expressed in units of\n\
    \                           seconds.  A 4-octet field containing an\n        \
    \                   unsigned integer.\n      IA_PD-options        Options associated\
    \ with this IA_PD.  A\n                           variable-length field (12 octets\
    \ less than\n                           the value in the option-len field).\n\
    \   The IA_PD-options field encapsulates those options that are specific\n   to\
    \ this IA_PD.  For example, all of the IA Prefix options (see\n   Section 21.22)\
    \ carrying the prefixes associated with this IA_PD are\n   in the IA_PD-options\
    \ field.\n   An IA_PD option may only appear in the options area of a DHCP\n \
    \  message.  A DHCP message may contain multiple IA_PD options (though\n   each\
    \ must have a unique IAID).\n   The status of any operations involving this IA_PD\
    \ is indicated in a\n   Status Code option (see Section 21.13) in the IA_PD-options\
    \ field.\n   Note that an IA_PD has no explicit \"lifetime\" or \"lease length\"\
    \ of\n   its own.  When the valid lifetimes of all of the prefixes in an IA_PD\n\
    \   have expired, the IA_PD can be considered as having expired.  T1 and\n   T2\
    \ fields are included to give the server explicit control over when\n   a client\
    \ should contact the server about a specific IA_PD.\n   In a message sent by a\
    \ client to a server, the T1 and T2 fields\n   SHOULD be set to 0.  The server\
    \ MUST ignore any values in these\n   fields in messages received from a client.\n\
    \   In a message sent by a server to a client, the client MUST use the\n   values\
    \ in the T1 and T2 fields for the T1 and T2 timers, unless\n   values in those\
    \ fields are 0.  The values in the T1 and T2 fields are\n   the number of seconds\
    \ until T1 and T2.\n   The server selects the T1 and T2 times to allow the client\
    \ to extend\n   the lifetimes of any prefixes in the IA_PD before the lifetimes\n\
    \   expire, even if the server is unavailable for some short period of\n   time.\
    \  Recommended values for T1 and T2 are 0.5 and 0.8 times the\n   shortest preferred\
    \ lifetime of the prefixes in the IA_PD that the\n   server is willing to extend,\
    \ respectively.  If the time at which the\n   prefixes in an IA_PD are to be renewed\
    \ is to be left to the\n   discretion of the client, the server sets T1 and T2\
    \ to 0.  The client\n   MUST follow the rules defined in Section 14.2.\n   If\
    \ a client receives an IA_PD with T1 greater than T2 and both T1 and\n   T2 are\
    \ greater than 0, the client discards the IA_PD option and\n   processes the remainder\
    \ of the message as though the server had not\n   included the IA_PD option.\n"
- title: 21.22.  IA Prefix Option
  contents:
  - "21.22.  IA Prefix Option\n   The IA Prefix option is used to specify a prefix\
    \ associated with an\n   IA_PD.  The IA Prefix option must be encapsulated in\
    \ the\n   IA_PD-options field of an IA_PD option (see Section 21.21).\n      \
    \ 0                   1                   2                   3\n       0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |        OPTION_IAPREFIX        |           option-len          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                      preferred-lifetime                       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                        valid-lifetime                         |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \ prefix-length |                                               |\n      +-+-+-+-+-+-+-+-+\
    \          IPv6-prefix                          |\n      |                   \
    \        (16 octets)                         |\n      |                      \
    \                                         |\n      |                         \
    \                                      |\n      |                            \
    \                                   |\n      |               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |               |                                               .\n   \
    \   +-+-+-+-+-+-+-+-+                                               .\n      .\
    \                       IAprefix-options                        .\n      .   \
    \                                                            .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                    Figure 36: IA Prefix Option Format\n      option-code   \
    \       OPTION_IAPREFIX (26).\n      option-len           25 + length of IAprefix-options\
    \ field.\n      preferred-lifetime   The preferred lifetime for the prefix in\
    \ the\n                           option, expressed in units of seconds.  A\n\
    \                           value of 0xffffffff represents \"infinity\"\n    \
    \                       (see Section 7.7).  A 4-octet field\n                \
    \           containing an unsigned integer.\n      valid-lifetime       The valid\
    \ lifetime for the prefix in the\n                           option, expressed\
    \ in units of seconds.  A\n                           value of 0xffffffff represents\
    \ \"infinity\".  A\n                           4-octet field containing an unsigned\
    \ integer.\n      prefix-length        Length for this prefix in bits.  A 1-octet\n\
    \                           unsigned integer.\n      IPv6-prefix          An IPv6\
    \ prefix.  A 16-octet field.\n      IAprefix-options     Options associated with\
    \ this prefix.  A\n                           variable-length field (25 octets\
    \ less than\n                           the value in the option-len field).\n\
    \   In a message sent by a client to a server, the preferred-lifetime and\n  \
    \ valid-lifetime fields SHOULD be set to 0.  The server MUST ignore any\n   received\
    \ values in these lifetime fields.\n   The client SHOULD NOT send an IA Prefix\
    \ option with 0 in the\n   \"prefix-length\" field (and an unspecified value (::)\
    \ in the\n   \"IPv6-prefix\" field).  A client MAY send a non-zero value in the\n\
    \   \"prefix-length\" field and the unspecified value (::) in the\n   \"IPv6-prefix\"\
    \ field to indicate a preference for the size of the\n   prefix to be delegated.\
    \  See [RFC8168] for further details on prefix-\n   length hints.\n   The client\
    \ MUST discard any prefixes for which the preferred lifetime\n   is greater than\
    \ the valid lifetime.\n   The values in the preferred-lifetime and valid-lifetime\
    \ fields are\n   the number of seconds remaining in each lifetime.  See\n   Section\
    \ 18.2.10.1 for more details on how these values are used for\n   delegated prefixes.\n\
    \   As per Section 7.7, the value of 0xffffffff for the preferred\n   lifetime\
    \ or the valid lifetime is taken to mean \"infinity\" and should\n   be used carefully.\n\
    \   An IA Prefix option may appear only in an IA_PD option.  More than\n   one\
    \ IA Prefix option can appear in a single IA_PD option.\n   The status of any\
    \ operations involving this IA Prefix option is\n   indicated in a Status Code\
    \ option (see Section 21.13) in the\n   IAprefix-options field.\n"
- title: 21.23.  Information Refresh Time Option
  contents:
  - "21.23.  Information Refresh Time Option\n   This option is requested by clients\
    \ and returned by servers to\n   specify an upper bound for how long a client\
    \ should wait before\n   refreshing information retrieved from a DHCP server.\
    \  It is only used\n   in Reply messages in response to Information-request messages.\
    \  In\n   other messages, there will usually be other information that\n   indicates\
    \ when the client should contact the server, e.g., T1/T2\n   times and lifetimes.\
    \  This option is useful when the configuration\n   parameters change or during\
    \ a renumbering event, as clients running\n   in the stateless mode will be able\
    \ to update their configuration.\n   The format of the Information Refresh Time\
    \ option is:\n       0                   1                   2               \
    \    3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   |OPTION_INFORMATION_REFRESH_TIME|         option-len            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                   information-refresh-time                    |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \       Figure 37: Information Refresh Time Option Format\n      option-code \
    \               OPTION_INFORMATION_REFRESH_TIME (32).\n      option-len      \
    \           4.\n      information-refresh-time   Time duration relative to the\
    \ current\n                                 time, expressed in units of seconds.\
    \  A\n                                 4-octet field containing an unsigned\n\
    \                                 integer.\n   A DHCP client MUST request this\
    \ option in the Option Request option\n   (see Section 21.7) when sending Information-request\
    \ messages.  A\n   client MUST NOT request this option in the Option Request option\
    \ in\n   any other messages.\n   A server sending a Reply to an Information-request\
    \ message SHOULD\n   include this option if it is requested in the Option Request\
    \ option\n   of the Information-request.  The option value MUST NOT be smaller\n\
    \   than IRT_MINIMUM.  This option MUST only appear in the top-level\n   options\
    \ area of Reply messages.\n   If the Reply to an Information-request message does\
    \ not contain this\n   option, the client MUST behave as if the option with the\
    \ value\n   IRT_DEFAULT was provided.\n   A client MUST use the refresh time IRT_MINIMUM\
    \ if it receives the\n   option with a value less than IRT_MINIMUM.\n   As per\
    \ Section 7.7, the value 0xffffffff is taken to mean \"infinity\"\n   and implies\
    \ that the client should not refresh its configuration data\n   without some other\
    \ trigger (such as detecting movement to a new\n   link).\n   If a client contacts\
    \ the server to obtain new data or refresh some\n   existing data before the refresh\
    \ time expires, then it SHOULD also\n   refresh all data covered by this option.\n\
    \   When the client detects that the refresh time has expired, it SHOULD\n   try\
    \ to update its configuration data by sending an\n   Information-request as specified\
    \ in Section 18.2.6, except that the\n   client MUST delay sending the first Information-request\
    \ by a random\n   amount of time between 0 and INF_MAX_DELAY.\n   A client MAY\
    \ have a maximum value for the refresh time, where that\n   value is used whenever\
    \ the client receives this option with a value\n   higher than the maximum.  This\
    \ also means that the maximum value is\n   used when the received value is \"\
    infinity\".  A maximum value might\n   make the client less vulnerable to attacks\
    \ based on forged DHCP\n   messages.  Without a maximum value, a client may be\
    \ made to use wrong\n   information for a possibly infinite period of time.  There\
    \ may,\n   however, be reasons for having a very long refresh time, so it may\
    \ be\n   useful for this maximum value to be configurable.\n"
- title: 21.24.  SOL_MAX_RT Option
  contents:
  - "21.24.  SOL_MAX_RT Option\n   A DHCP server sends the SOL_MAX_RT option to a\
    \ client to override the\n   default value of SOL_MAX_RT.  The value of SOL_MAX_RT\
    \ in the option\n   replaces the default value defined in Section 7.6.  One use\
    \ for the\n   SOL_MAX_RT option is to set a higher value for SOL_MAX_RT; this\n\
    \   reduces the Solicit traffic from a client that has not received a\n   response\
    \ to its Solicit messages.\n   The format of the SOL_MAX_RT option is:\n     \
    \  0                   1                   2                   3\n       0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |      OPTION_SOL_MAX_RT        |         option-len            |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                       SOL_MAX_RT value                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                    Figure 38: SOL_MAX_RT Option Format\n      option-code  \
    \        OPTION_SOL_MAX_RT (82).\n      option-len           4.\n      SOL_MAX_RT\
    \ value     Overriding value for SOL_MAX_RT in seconds;\n                    \
    \       MUST be in this range: 60 <= \"value\" <= 86400\n                    \
    \       (1 day).  A 4-octet field containing an\n                           unsigned\
    \ integer.\n   A DHCP client MUST include the SOL_MAX_RT option code in any Option\n\
    \   Request option (see Section 21.7) it sends in a Solicit message.\n   The DHCP\
    \ server MAY include the SOL_MAX_RT option in any response it\n   sends to a client\
    \ that has included the SOL_MAX_RT option code in an\n   Option Request option.\
    \  The SOL_MAX_RT option is sent as a top-level\n   option in the message to the\
    \ client.\n   A DHCP client MUST ignore any SOL_MAX_RT option values that are\
    \ less\n   than 60 or more than 86400.\n   If a DHCP client receives a message\
    \ containing a SOL_MAX_RT option\n   that has a valid value for SOL_MAX_RT, the\
    \ client MUST set its\n   internal SOL_MAX_RT parameter to the value contained\
    \ in the\n   SOL_MAX_RT option.  This value of SOL_MAX_RT is then used by the\n\
    \   retransmission mechanism defined in Sections 15 and 18.2.1.\n   The purpose\
    \ of this mechanism is to give network administrators a way\n   to avoid excessive\
    \ DHCP traffic if all DHCP servers become\n   unavailable.  Therefore, this value\
    \ is expected to be retained for as\n   long as practically possible.\n   An updated\
    \ SOL_MAX_RT value applies only to the network interface on\n   which the client\
    \ received the SOL_MAX_RT option.\n"
- title: 21.25.  INF_MAX_RT Option
  contents:
  - "21.25.  INF_MAX_RT Option\n   A DHCP server sends the INF_MAX_RT option to a\
    \ client to override the\n   default value of INF_MAX_RT.  The value of INF_MAX_RT\
    \ in the option\n   replaces the default value defined in Section 7.6.  One use\
    \ for the\n   INF_MAX_RT option is to set a higher value for INF_MAX_RT; this\n\
    \   reduces the Information-request traffic from a client that has not\n   received\
    \ a response to its Information-request messages.\n   The format of the INF_MAX_RT\
    \ option is:\n       0                   1                   2               \
    \    3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   |      OPTION_INF_MAX_RT        |         option-len            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                       INF_MAX_RT value                        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \              Figure 39: INF_MAX_RT Option Format\n      option-code        \
    \  OPTION_INF_MAX_RT (83).\n      option-len           4.\n      INF_MAX_RT value\
    \     Overriding value for INF_MAX_RT in seconds;\n                          \
    \ MUST be in this range: 60 <= \"value\" <= 86400\n                          \
    \ (1 day).  A 4-octet field containing an\n                           unsigned\
    \ integer.\n   A DHCP client MUST include the INF_MAX_RT option code in any Option\n\
    \   Request option (see Section 21.7) it sends in an Information-request\n   message.\n\
    \   The DHCP server MAY include the INF_MAX_RT option in any response it\n   sends\
    \ to a client that has included the INF_MAX_RT option code in an\n   Option Request\
    \ option.  The INF_MAX_RT option is a top-level option\n   in the message to the\
    \ client.\n   A DHCP client MUST ignore any INF_MAX_RT option values that are\
    \ less\n   than 60 or more than 86400.\n   If a DHCP client receives a message\
    \ containing an INF_MAX_RT option\n   that has a valid value for INF_MAX_RT, the\
    \ client MUST set its\n   internal INF_MAX_RT parameter to the value contained\
    \ in the\n   INF_MAX_RT option.  This value of INF_MAX_RT is then used by the\n\
    \   retransmission mechanism defined in Sections 15 and 18.2.6.\n   An updated\
    \ INF_MAX_RT value applies only to the network interface on\n   which the client\
    \ received the INF_MAX_RT option.\n"
- title: 22.  Security Considerations
  contents:
  - "22.  Security Considerations\n   This section discusses security considerations\
    \ that are not related\n   to privacy.  See Section 23 for a discussion dedicated\
    \ to privacy.\n   The threat to DHCP is inherently an insider threat (assuming\
    \ a\n   properly configured network where DHCP ports are blocked on the\n   perimeter\
    \ gateways of the enterprise).  Regardless of the gateway\n   configuration, however,\
    \ the potential attacks by insiders and\n   outsiders are the same.\n   DHCP lacks\
    \ end-to-end encryption between clients and servers; thus,\n   hijacking, tampering,\
    \ and eavesdropping attacks are all possible as a\n   result.  Some network environments\
    \ (discussed below) can be secured\n   through various means to minimize these\
    \ attacks.\n   One attack specific to a DHCP client is the establishment of a\n\
    \   malicious server with the intent of providing incorrect configuration\n  \
    \ information to the client.  The motivation for doing so may be to\n   mount\
    \ a \"man in the middle\" attack that causes the client to\n   communicate with\
    \ a malicious server instead of a valid server for\n   some service (such as DNS\
    \ or NTP).  The malicious server may also\n   mount a DoS attack through misconfiguration\
    \ of the client; this\n   attack would cause all network communication from the\
    \ client to fail.\n   A malicious DHCP server might cause a client to set its\
    \ SOL_MAX_RT\n   and INF_MAX_RT parameters to an unreasonably high value with\
    \ the\n   SOL_MAX_RT (see Section 21.24) and INF_MAX_RT (see Section 21.25)\n\
    \   options; this may cause an undue delay in a client completing its\n   DHCP\
    \ protocol transaction in the case where no other valid response\n   is received.\
    \  Assuming that the client also receives a response from\n   a valid DHCP server,\
    \ large values for SOL_MAX_RT and INF_MAX_RT will\n   not have any effect.\n \
    \  A malicious server can also send a Server Unicast option (see\n   Section 21.12)\
    \ to a client in an Advertise message, thus potentially\n   causing the client\
    \ to bypass relays and communicate only with the\n   malicious server for subsequent\
    \ Request and Renew messages.\n   Another threat to DHCP clients originates from\
    \ mistakenly or\n   accidentally configured DHCP servers that answer DHCP client\
    \ requests\n   with unintentionally incorrect configuration parameters.\n   A\
    \ DHCP client may also be subject to attack through the receipt of a\n   Reconfigure\
    \ message from a malicious server that causes the client to\n   obtain incorrect\
    \ configuration information from that server.  Note\n   that although a client\
    \ sends its response (Renew, Rebind, or\n   Information-request message) through\
    \ a relay agent and, therefore,\n   that response will only be received by servers\
    \ to which DHCP messages\n   are relayed, a malicious server could send a Reconfigure\
    \ message to a\n   client, followed (after an appropriate delay) by a Reply message\
    \ that\n   would be accepted by the client.  Thus, a malicious server that is\n\
    \   not on the network path between the client and the server may still\n   be\
    \ able to mount a Reconfigure attack on a client.  The use of\n   transaction\
    \ IDs that are cryptographically sound and cannot easily be\n   predicted will\
    \ also reduce the probability that such an attack will\n   be successful.\n  \
    \ Because of the opportunity for attack through the Reconfigure\n   message, a\
    \ DHCP client MUST discard any Reconfigure message that does\n   not include authentication\
    \ or that does not pass the validation\n   process for the authentication protocol.\n\
    \   RKAP, described in Section 20.4, provides protection against the use\n   of\
    \ a Reconfigure message by a malicious DHCP server to mount a DoS or\n   man-in-the-middle\
    \ attack on a client.  This protocol can be\n   compromised by an attacker that\
    \ can intercept the initial message in\n   which the DHCP server sends the key\
    \ \"in plain text\" to the client.\n   Many of these attacks by rogue servers\
    \ can be mitigated by making use\n   of the mechanisms described in [RFC7610]\
    \ and [RFC7513].\n   The threat specific to a DHCP server is an invalid client\n\
    \   masquerading as a valid client.  The motivation for this may be for\n   theft\
    \ of service, or to circumvent auditing for any number of\n   nefarious purposes.\n\
    \   The threat common to both the client and the server is the \"resource-\n \
    \  exhaustion\" DoS attack.  These attacks typically involve the\n   exhaustion\
    \ of available assigned addresses or delegatable prefixes,\n   or the exhaustion\
    \ of CPU or network bandwidth, and are present any\n   time there is a shared\
    \ resource.  Some forms of these exhaustion\n   attacks can be partially mitigated\
    \ by appropriate server policy,\n   e.g., limiting the maximum number of leases\
    \ any one client can get.\n   The messages exchanged between relay agents and\
    \ servers may be used\n   to mount a man-in-the-middle or DoS attack.  Communication\
    \ between a\n   server and a relay agent, and communication between relay agents,\
    \ can\n   be authenticated and encrypted through the use of IPsec, as described\n\
    \   in [RFC8213].\n   However, the use of manually configured pre-shared keys\
    \ for IPsec\n   between relay agents and servers does not defend against replayed\n\
    \   DHCP messages.  Replayed messages can represent a DoS attack through\n   exhaustion\
    \ of processing resources but not through misconfiguration\n   or exhaustion of\
    \ other resources such as assignable addresses and\n   delegatable prefixes.\n\
    \   Various network environments also offer levels of security if\n   deployed\
    \ as described below.\n   -  In enterprise and factory networks, use of authentication\
    \ per\n      [IEEE-802.1x] can prevent unknown or untrusted clients from\n   \
    \   connecting to the network.  However, this does not necessarily\n      assure\
    \ that the connected client will be a good DHCP or network\n      actor.\n   -\
    \  For wired networks where clients typically are connected to a\n      switch\
    \ port, snooping DHCP multicast (or unicast) traffic becomes\n      difficult,\
    \ as the switches limit the traffic delivered to a port.\n      The client's DHCP\
    \ multicast packets (with destination address\n      fe02::1:2) are only forwarded\
    \ to the DHCP server's (or relay's)\n      switch port -- not all ports.  Also,\
    \ the server's (or relay's)\n      unicast replies are only delivered to the target\
    \ client's port --\n      not all ports.\n   -  In public networks (such as a\
    \ Wi-Fi network in a coffee shop or\n      airport), it is possible for others\
    \ within radio range to snoop\n      DHCP and other traffic.  But in these environments,\
    \ there is very\n      little if anything that can be learned from the DHCP traffic\n\
    \      itself (either from client to server or from server to client) if\n   \
    \   the privacy considerations provided in Section 23 are followed.\n      Even\
    \ for devices that do not follow the privacy considerations,\n      there is little\
    \ that can be learned that would not be available\n      from subsequent communications\
    \ anyway (such as the device's Media\n      Access Control (MAC) address).  Also,\
    \ because all clients will\n      typically receive similar configuration details,\
    \ a bad actor that\n      initiates a DHCP request itself can learn much of such\n\
    \      information.  As mentioned above, one threat is that the RKAP key\n   \
    \   for a client can be learned (if the initial\n      Solicit/Advertise/Request/Reply\
    \ exchange is monitored) and trigger\n      a premature reconfiguration, but this\
    \ is relatively easily\n      prevented by disallowing direct client-to-client\
    \ communication on\n      these networks or using [RFC7610] and [RFC7513].\n"
- title: 23.  Privacy Considerations
  contents:
  - "23.  Privacy Considerations\n   For an extended discussion about privacy considerations\
    \ for the\n   client, see [RFC7824]:\n   -  In particular, its Section 3 discusses\
    \ various identifiers that\n      could be misused to track the client.\n   -\
    \  Its Section 4 discusses existing mechanisms that may have an\n      impact\
    \ on a client's privacy.\n   -  Finally, its Section 5 discusses potential attack\
    \ vectors.\n   For recommendations regarding how to address or mitigate those\n\
    \   issues, see [RFC7844].\n   This specification does not define any allocation\
    \ strategies for\n   servers.  Implementers are expected to develop their own\
    \ algorithm\n   for the server to choose a resource out of the available pool.\n\
    \   Several possible allocation strategies are mentioned in Section 4.3\n   of\
    \ [RFC7824].  Please keep in mind that the list in [RFC7824] is not\n   exhaustive;\
    \ there are certainly other possible strategies.  Readers\n   are also encouraged\
    \ to read [RFC7707] -- in particular, its\n   Section 4.1.2, which discusses the\
    \ problems with certain allocation\n   strategies.\n"
- title: 24.  IANA Considerations
  contents:
  - "24.  IANA Considerations\n   This document does not define any new DHCP name\
    \ spaces or\n   definitions.\n   The publication of this document does not change\
    \ the assignment rules\n   for new values for message types, option codes, DUID\
    \ types, or status\n   codes.\n   The list of assigned values used in DHCPv6 is\
    \ available at\n   <https://www.iana.org/assignments/dhcpv6-parameters>.\n   IANA\
    \ has updated <https://www.iana.org/assignments/dhcpv6-parameters>\n   to add\
    \ a reference to this document for definitions previously\n   created by [RFC3315],\
    \ [RFC3633], [RFC4242], and [RFC7083].\n   IANA has added two columns to the DHCPv6\
    \ \"Option Codes\" registry at\n   <https://www.iana.org/assignments/dhcpv6-parameters>\
    \ to indicate\n   which options are allowed to appear in a client's Option Request\n\
    \   option (see Section 21.7) and which options are singleton options\n   (only\
    \ allowed to appear once as a top-level or encapsulated option;\n   see Section\
    \ 16 of [RFC7227]).  Table 4 provides the data for the\n   options assigned by\
    \ IANA at the time of writing this document.\n   +---------+--------------------------+------------------+-----------+\n\
    \   |  Option | Option Name (\"OPTION\"    | Client ORO (1)   | Singleton |\n\
    \   |         | prefix removed)          |                  | Option    |\n  \
    \ +---------+--------------------------+------------------+-----------+\n   |\
    \       1 | CLIENTID                 | No               | Yes       |\n   |  \
    \     2 | SERVERID                 | No               | Yes       |\n   |    \
    \   3 | IA_NA                    | No               | No        |\n   |      \
    \ 4 | IA_TA                    | No               | No        |\n   |       5\
    \ | IAADDR                   | No               | No        |\n   |       6 |\
    \ ORO                      | No               | Yes       |\n   |       7 | PREFERENCE\
    \               | No               | Yes       |\n   |       8 | ELAPSED_TIME\
    \             | No               | Yes       |\n   |       9 | RELAY_MSG     \
    \           | No               | Yes       |\n   |      11 | AUTH            \
    \         | No               | Yes       |\n   |      12 | UNICAST           \
    \       | No               | Yes       |\n   |      13 | STATUS_CODE         \
    \     | No               | Yes       |\n   |      14 | RAPID_COMMIT          \
    \   | No               | Yes       |\n   |      15 | USER_CLASS              \
    \ | No               | Yes       |\n   |      16 | VENDOR_CLASS             |\
    \ No               | No (2)    |\n   |      17 | VENDOR_OPTS              | Optional\
    \         | No (2)    |\n   |      18 | INTERFACE_ID             | No        \
    \       | Yes       |\n   |      19 | RECONF_MSG               | No          \
    \     | Yes       |\n   |      20 | RECONF_ACCEPT            | No            \
    \   | Yes       |\n   |      21 | SIP_SERVER_D             | Yes             \
    \ | Yes       |\n   |      22 | SIP_SERVER_A             | Yes              |\
    \ Yes       |\n   |      23 | DNS_SERVERS              | Yes              | Yes\
    \       |\n   |      24 | DOMAIN_LIST              | Yes              | Yes  \
    \     |\n   |      25 | IA_PD                    | No               | No     \
    \   |\n   |      26 | IAPREFIX                 | No               | No       \
    \ |\n   |      27 | NIS_SERVERS              | Yes              | Yes       |\n\
    \   |      28 | NISP_SERVERS             | Yes              | Yes       |\n  \
    \ |      29 | NIS_DOMAIN_NAME          | Yes              | Yes       |\n   |\
    \      30 | NISP_DOMAIN_NAME         | Yes              | Yes       |\n   |  \
    \    31 | SNTP_SERVERS             | Yes              | Yes       |\n   |    \
    \  32 | INFORMATION_REFRESH_TIME | Required for     | Yes       |\n   |      \
    \   |                          | Information-     |           |\n   |        \
    \ |                          | request          |           |\n   |      33 |\
    \ BCMCS_SERVER_D           | Yes              | Yes       |\n   |      34 | BCMCS_SERVER_A\
    \           | Yes              | Yes       |\n   |      36 | GEOCONF_CIVIC   \
    \         | Yes              | Yes       |\n   |      37 | REMOTE_ID         \
    \       | No               | Yes       |\n   |      38 | SUBSCRIBER_ID       \
    \     | No               | Yes       |\n   |      39 | CLIENT_FQDN           \
    \   | Yes              | Yes       |\n   |      40 | PANA_AGENT              \
    \ | Yes              | Yes       |\n   |      41 | NEW_POSIX_TIMEZONE       |\
    \ Yes              | Yes       |\n   |      42 | NEW_TZDB_TIMEZONE        | Yes\
    \              | Yes       |\n   |      43 | ERO                      | No   \
    \            | Yes       |\n   |      44 | LQ_QUERY                 | No     \
    \          | Yes       |\n   |      45 | CLIENT_DATA              | No       \
    \        | Yes       |\n   |      46 | CLT_TIME                 | No         \
    \      | Yes       |\n   |      47 | LQ_RELAY_DATA            | No           \
    \    | Yes       |\n   |      48 | LQ_CLIENT_LINK           | No             \
    \  | Yes       |\n   |      49 | MIP6_HNIDF               | Yes              |\
    \ Yes       |\n   |      50 | MIP6_VDINF               | Yes              | Yes\
    \       |\n   |      51 | V6_LOST                  | Yes              | Yes  \
    \     |\n   |      52 | CAPWAP_AC_V6             | Yes              | Yes    \
    \   |\n   |      53 | RELAY_ID                 | No               | Yes      \
    \ |\n   |      54 | IPv6_Address-MoS         | Yes              | Yes       |\n\
    \   |      55 | IPv6_FQDN-MoS            | Yes              | Yes       |\n  \
    \ |      56 | NTP_SERVER               | Yes              | Yes       |\n   |\
    \      57 | V6_ACCESS_DOMAIN         | Yes              | Yes       |\n   |  \
    \    58 | SIP_UA_CS_LIST           | Yes              | Yes       |\n   |    \
    \  59 | OPT_BOOTFILE_URL         | Yes              | Yes       |\n   |      60\
    \ | OPT_BOOTFILE_PARAM       | Yes              | Yes       |\n   |      61 |\
    \ CLIENT_ARCH_TYPE         | No               | Yes       |\n   |      62 | NII\
    \                      | Yes              | Yes       |\n   |      63 | GEOLOCATION\
    \              | Yes              | Yes       |\n   |      64 | AFTR_NAME    \
    \            | Yes              | Yes       |\n   |      65 | ERP_LOCAL_DOMAIN_NAME\
    \    | Yes              | Yes       |\n   |      66 | RSOO                   \
    \  | No               | Yes       |\n   |      67 | PD_EXCLUDE               |\
    \ Yes              | Yes       |\n   |      68 | VSS                      | No\
    \               | Yes       |\n   |      69 | MIP6_IDINF               | Yes \
    \             | Yes       |\n   |      70 | MIP6_UDINF               | Yes   \
    \           | Yes       |\n   |      71 | MIP6_HNP                 | Yes     \
    \         | Yes       |\n   |      72 | MIP6_HAA                 | Yes       \
    \       | Yes       |\n   |      73 | MIP6_HAF                 | Yes         \
    \     | Yes       |\n   |      74 | RDNSS_SELECTION          | Yes           \
    \   | No        |\n   |      75 | KRB_PRINCIPAL_NAME       | Yes             \
    \ | Yes       |\n   |      76 | KRB_REALM_NAME           | Yes              |\
    \ Yes       |\n   |      77 | KRB_DEFAULT_REALM_NAME   | Yes              | Yes\
    \       |\n   |      78 | KRB_KDC                  | Yes              | Yes  \
    \     |\n   |      79 | CLIENT_LINKLAYER_ADDR    | No               | Yes    \
    \   |\n   |      80 | LINK_ADDRESS             | No               | Yes      \
    \ |\n   |      81 | RADIUS                   | No               | Yes       |\n\
    \   |      82 | SOL_MAX_RT               | Required for     | Yes       |\n  \
    \ |         |                          | Solicit          |           |\n   |\
    \      83 | INF_MAX_RT               | Required for     | Yes       |\n   |  \
    \       |                          | Information-     |           |\n   |    \
    \     |                          | request          |           |\n   |      84\
    \ | ADDRSEL                  | Yes              | Yes       |\n   |      85 |\
    \ ADDRSEL_TABLE            | Yes              | Yes       |\n   |      86 | V6_PCP_SERVER\
    \            | Yes              | No        |\n   |      87 | DHCPV4_MSG     \
    \          | No               | Yes       |\n   |      88 | DHCP4_O_DHCP6_SERVER\
    \     | Yes              | Yes       |\n   |      89 | S46_RULE              \
    \   | No               | No (3)    |\n   |      90 | S46_BR                  \
    \ | No               | No        |\n   |      91 | S46_DMR                  |\
    \ No               | Yes       |\n   |      92 | S46_V4V6BIND             | No\
    \               | Yes       |\n   |      93 | S46_PORTPARAMS           | No  \
    \             | Yes       |\n   |      94 | S46_CONT_MAPE            | Yes   \
    \           | No        |\n   |      95 | S46_CONT_MAPT            | Yes     \
    \         | Yes       |\n   |      96 | S46_CONT_LW              | Yes       \
    \       | Yes       |\n   |      97 | 4RD                      | Yes         \
    \     | Yes       |\n   |      98 | 4RD_MAP_RULE             | Yes           \
    \   | Yes       |\n   |      99 | 4RD_NON_MAP_RULE         | Yes             \
    \ | Yes       |\n   |     100 | LQ_BASE_TIME             | No               |\
    \ Yes       |\n   |     101 | LQ_START_TIME            | No               | Yes\
    \       |\n   |     102 | LQ_END_TIME              | No               | Yes  \
    \     |\n   |     103 | DHCP Captive-Portal      | Yes              | Yes    \
    \   |\n   |     104 | MPL_PARAMETERS           | Yes              | No       \
    \ |\n   |     105 | ANI_ATT                  | No               | Yes       |\n\
    \   |     106 | ANI_NETWORK_NAME         | No               | Yes       |\n  \
    \ |     107 | ANI_AP_NAME              | No               | Yes       |\n   |\
    \     108 | ANI_AP_BSSID             | No               | Yes       |\n   |  \
    \   109 | ANI_OPERATOR_ID          | No               | Yes       |\n   |    \
    \ 110 | ANI_OPERATOR_REALM       | No               | Yes       |\n   |     111\
    \ | S46_PRIORITY             | Yes              | Yes       |\n   |     112 |\
    \ MUD_URL_V6               | No               | Yes       |\n   |     113 | V6_PREFIX64\
    \              | Yes              | No        |\n   |     114 | F_BINDING_STATUS\
    \         | No               | Yes       |\n   |     115 | F_CONNECT_FLAGS   \
    \       | No               | Yes       |\n   |     116 | F_DNS_REMOVAL_INFO  \
    \     | No               | Yes       |\n   |     117 | F_DNS_HOST_NAME       \
    \   | No               | Yes       |\n   |     118 | F_DNS_ZONE_NAME         \
    \ | No               | Yes       |\n   |     119 | F_DNS_FLAGS              |\
    \ No               | Yes       |\n   |     120 | F_EXPIRATION_TIME        | No\
    \               | Yes       |\n   |     121 | F_MAX_UNACKED_BNDUPD     | No  \
    \             | Yes       |\n   |     122 | F_MCLT                   | No    \
    \           | Yes       |\n   |     123 | F_PARTNER_LIFETIME       | No      \
    \         | Yes       |\n   |     124 | F_PARTNER_LIFETIME_SENT  | No        \
    \       | Yes       |\n   |     125 | F_PARTNER_DOWN_TIME      | No          \
    \     | Yes       |\n   |     126 | F_PARTNER_RAW_CLT_TIME   | No            \
    \   | Yes       |\n   |     127 | F_PROTOCOL_VERSION       | No              \
    \ | Yes       |\n   |     128 | F_KEEPALIVE_TIME         | No               |\
    \ Yes       |\n   |     129 | F_RECONFIGURE_DATA       | No               | Yes\
    \       |\n   |     130 | F_RELATIONSHIP_NAME      | No               | Yes  \
    \     |\n   |     131 | F_SERVER_FLAGS           | No               | Yes    \
    \   |\n   |     132 | F_SERVER_STATE           | No               | Yes      \
    \ |\n   |     133 | F_START_TIME_OF_STATE    | No               | Yes       |\n\
    \   |     134 | F_STATE_EXPIRATION_TIME  | No               | Yes       |\n  \
    \ |     135 | RELAY_PORT               | No               | Yes       |\n   |\
    \     143 | IPv6_Address-ANDSF       | Yes              | Yes       |\n   +---------+--------------------------+------------------+-----------+\n\
    \                         Table 4: Updated Options\n   Notes for Table 4:\n  \
    \ (1)  In the \"Client ORO\" column, a \"Yes\" for an option means that the\n\
    \        client includes this option code in the Option Request option\n     \
    \   (see Section 21.7) if it desires that configuration information,\n       \
    \ and a \"No\" means that the option MUST NOT be included (and\n        servers\
    \ SHOULD silently ignore that option code if it appears in\n        a client's\
    \ Option Request option).\n   (2)  For each Enterprise Number, there MUST only\
    \ be a single\n        instance.\n   (3)  See [RFC7598] for details.\n   IANA\
    \ has corrected the range of possible status codes in the \"Status\n   Codes\"\
    \ table at <https://www.iana.org/assignments/dhcpv6-parameters>\n   by replacing\
    \ 23-255 (as Unassigned) with 23-65535 (the codes are\n   16-bit unsigned integers).\n\
    \   IANA has updated the All_DHCP_Relay_Agents_and_Servers (ff02::1:2)\n   and\
    \ All_DHCP_Servers (ff05::1:3) table entries in the \"IPv6 Multicast\n   Address\
    \ Space Registry\" at <https://www.iana.org/assignments/\n   ipv6-multicast-addresses>\
    \ to reference this document instead of\n   [RFC3315].\n   IANA has added an \"\
    Obsolete\" annotation in the \"DHCPv6 Delayed\n   Authentication\" entry in the\
    \ \"Authentication Suboption (value 8) -\n   Protocol identifier values\" registry\
    \ at\n   <https://www.iana.org/assignments/bootp-dhcp-parameters> and has\n  \
    \ added an \"Obsolete\" annotation in the \"Delayed Authentication\" entry\n \
    \  in the \"Protocol Name Space Values\" registry at\n   <https://www.iana.org/assignments/auth-namespaces>.\
    \  IANA has also\n   updated these pages to reference this document instead of\
    \ [RFC3315].\n   IANA has added a reference to this document for the RDM value\
    \ of 0 to\n   the \"RDM Name Space Values\" registry at\n   <https://www.iana.org/assignments/auth-namespaces>.\n\
    \   IANA has updated the \"Service Name and Transport Protocol Port Number\n \
    \  Registry\" at <https://www.iana.org/assignments/\n   service-names-port-numbers>\
    \ as follows:\n            546/udp      This document\n            547/udp   \
    \   This document\n            547/tcp      [RFC5460]\n            647/tcp   \
    \   [RFC8156]\n"
- title: 25.  Obsoleted Mechanisms
  contents:
  - "25.  Obsoleted Mechanisms\n   This specification is mostly a corrected and cleaned-up\
    \ version of\n   the original specification -- [RFC3315] -- along with numerous\n\
    \   additions from later RFCs.  However, there are a small number of\n   mechanisms\
    \ that were not widely deployed, were underspecified, or had\n   other operational\
    \ issues.  Those mechanisms are now considered\n   deprecated.  Legacy implementations\
    \ MAY support them, but\n   implementations conformant to this document MUST NOT\
    \ rely on them.\n   The following mechanisms are now obsolete:\n   Delayed authentication.\
    \  This mechanism was underspecified and\n      presented a significant operational\
    \ burden.  As a result, after\n      10 years its adoption was extremely limited\
    \ at best.\n   Lifetime hints sent by a client.  Clients used to be allowed to\
    \ send\n      lifetime values as hints.  This mechanism was not widely\n     \
    \ implemented, and there were known misimplementations that sent the\n      remaining\
    \ lifetimes rather than total desired lifetimes.  That in\n      turn was sometimes\
    \ misunderstood by servers as a request for\n      ever-decreasing lease lifetimes,\
    \ which caused issues when values\n      started approaching zero.  Clients now\
    \ SHOULD set lifetimes to 0\n      in IA Address and IA Prefix options, and servers\
    \ MUST ignore any\n      requested lifetime value.\n   T1/T2 hints sent by a client.\
    \  These had issues similar to those for\n      the lifetime hints.  Clients now\
    \ SHOULD set the T1/T2 values to 0\n      in IA_NA and IA_PD options, and servers\
    \ MUST ignore any T1/T2\n      values supplied by a client.\n"
- title: 26.  References
  contents:
  - '26.  References

    '
- title: 26.1.  Normative References
  contents:
  - "26.1.  Normative References\n   [RFC768]   Postel, J., \"User Datagram Protocol\"\
    , STD 6, RFC 768,\n              DOI 10.17487/RFC0768, August 1980,\n        \
    \      <https://www.rfc-editor.org/info/rfc768>.\n   [RFC1035]  Mockapetris, P.,\
    \ \"Domain names - implementation and\n              specification\", STD 13,\
    \ RFC 1035, DOI 10.17487/RFC1035,\n              November 1987, <https://www.rfc-editor.org/info/rfc1035>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC4291]\
    \  Hinden, R. and S. Deering, \"IP Version 6 Addressing\n              Architecture\"\
    , RFC 4291, DOI 10.17487/RFC4291,\n              February 2006, <https://www.rfc-editor.org/info/rfc4291>.\n\
    \   [RFC4861]  Narten, T., Nordmark, E., Simpson, W., and H. Soliman,\n      \
    \        \"Neighbor Discovery for IP version 6 (IPv6)\", RFC 4861,\n         \
    \     DOI 10.17487/RFC4861, September 2007,\n              <https://www.rfc-editor.org/info/rfc4861>.\n\
    \   [RFC4862]  Thomson, S., Narten, T., and T. Jinmei, \"IPv6 Stateless\n    \
    \          Address Autoconfiguration\", RFC 4862,\n              DOI 10.17487/RFC4862,\
    \ September 2007,\n              <https://www.rfc-editor.org/info/rfc4862>.\n\
    \   [RFC6221]  Miles, D., Ed., Ooghe, S., Dec, W., Krishnan, S., and A.\n    \
    \          Kavanagh, \"Lightweight DHCPv6 Relay Agent\", RFC 6221,\n         \
    \     DOI 10.17487/RFC6221, May 2011,\n              <https://www.rfc-editor.org/info/rfc6221>.\n\
    \   [RFC6355]  Narten, T. and J. Johnson, \"Definition of the UUID-Based\n   \
    \           DHCPv6 Unique Identifier (DUID-UUID)\", RFC 6355,\n              DOI\
    \ 10.17487/RFC6355, August 2011,\n              <https://www.rfc-editor.org/info/rfc6355>.\n\
    \   [RFC7227]  Hankins, D., Mrugalski, T., Siodelski, M., Jiang, S., and\n   \
    \           S. Krishnan, \"Guidelines for Creating New DHCPv6 Options\",\n   \
    \           BCP 187, RFC 7227, DOI 10.17487/RFC7227, May 2014,\n             \
    \ <https://www.rfc-editor.org/info/rfc7227>.\n   [RFC7283]  Cui, Y., Sun, Q.,\
    \ and T. Lemon, \"Handling Unknown DHCPv6\n              Messages\", RFC 7283,\
    \ DOI 10.17487/RFC7283, July 2014,\n              <https://www.rfc-editor.org/info/rfc7283>.\n\
    \   [RFC8085]  Eggert, L., Fairhurst, G., and G. Shepherd, \"UDP Usage\n     \
    \         Guidelines\", BCP 145, RFC 8085, DOI 10.17487/RFC8085,\n           \
    \   March 2017, <https://www.rfc-editor.org/info/rfc8085>.\n   [RFC8174]  Leiba,\
    \ B., \"Ambiguity of Uppercase vs Lowercase in\n              RFC 2119 Key Words\"\
    , BCP 14, RFC 8174,\n              DOI 10.17487/RFC8174, May 2017,\n         \
    \     <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8200]  Deering, S. and\
    \ R. Hinden, \"Internet Protocol, Version 6\n              (IPv6) Specification\"\
    , STD 86, RFC 8200,\n              DOI 10.17487/RFC8200, July 2017,\n        \
    \      <https://www.rfc-editor.org/info/rfc8200>.\n   [RFC8213]  Volz, B. and\
    \ Y. Pal, \"Security of Messages Exchanged\n              between Servers and\
    \ Relay Agents\", RFC 8213,\n              DOI 10.17487/RFC8213, August 2017,\n\
    \              <https://www.rfc-editor.org/info/rfc8213>.\n"
- title: 26.2.  Informative References
  contents:
  - "26.2.  Informative References\n   [IANA-HARDWARE-TYPES]\n              IANA,\
    \ \"Hardware Types\",\n              <https://www.iana.org/assignments/arp-parameters>.\n\
    \   [IANA-PEN] IANA, \"Private Enterprise Numbers\",\n              <https://www.iana.org/assignments/enterprise-numbers>.\n\
    \   [IANA-RESERVED-IID]\n              IANA, \"Reserved IPv6 Interface Identifiers\"\
    ,\n              <https://www.iana.org/assignments/ipv6-interface-ids>.\n   [IEEE-802.1x]\n\
    \              IEEE, \"IEEE Standard for Local and metropolitan area\n       \
    \       networks--Port-Based Network Access Control\",\n              IEEE 802.1X-2010,\
    \ DOI 10.1109/IEEESTD.2010.5409813,\n              <https://ieeexplore.ieee.org/servlet/\n\
    \              opac?punumber=5409757>.\n   [RFC826]   Plummer, D., \"An Ethernet\
    \ Address Resolution Protocol: Or\n              Converting Network Protocol Addresses\
    \ to 48.bit Ethernet\n              Address for Transmission on Ethernet Hardware\"\
    , STD 37,\n              RFC 826, DOI 10.17487/RFC0826, November 1982,\n     \
    \         <https://www.rfc-editor.org/info/rfc826>.\n   [RFC2131]  Droms, R.,\
    \ \"Dynamic Host Configuration Protocol\",\n              RFC 2131, DOI 10.17487/RFC2131,\
    \ March 1997,\n              <https://www.rfc-editor.org/info/rfc2131>.\n   [RFC2132]\
    \  Alexander, S. and R. Droms, \"DHCP Options and BOOTP Vendor\n             \
    \ Extensions\", RFC 2132, DOI 10.17487/RFC2132, March 1997,\n              <https://www.rfc-editor.org/info/rfc2132>.\n\
    \   [RFC2464]  Crawford, M., \"Transmission of IPv6 Packets over Ethernet\n  \
    \            Networks\", RFC 2464, DOI 10.17487/RFC2464, December 1998,\n    \
    \          <https://www.rfc-editor.org/info/rfc2464>.\n   [RFC3162]  Aboba, B.,\
    \ Zorn, G., and D. Mitton, \"RADIUS and IPv6\",\n              RFC 3162, DOI 10.17487/RFC3162,\
    \ August 2001,\n              <https://www.rfc-editor.org/info/rfc3162>.\n   [RFC3290]\
    \  Bernet, Y., Blake, S., Grossman, D., and A. Smith, \"An\n              Informal\
    \ Management Model for Diffserv Routers\", RFC 3290,\n              DOI 10.17487/RFC3290,\
    \ May 2002,\n              <https://www.rfc-editor.org/info/rfc3290>.\n   [RFC3315]\
    \  Droms, R., Ed., Bound, J., Volz, B., Lemon, T., Perkins,\n              C.,\
    \ and M. Carney, \"Dynamic Host Configuration Protocol\n              for IPv6\
    \ (DHCPv6)\", RFC 3315, DOI 10.17487/RFC3315,\n              July 2003, <https://www.rfc-editor.org/info/rfc3315>.\n\
    \   [RFC3629]  Yergeau, F., \"UTF-8, a transformation format of\n            \
    \  ISO 10646\", STD 63, RFC 3629, DOI 10.17487/RFC3629,\n              November\
    \ 2003, <https://www.rfc-editor.org/info/rfc3629>.\n   [RFC3633]  Troan, O. and\
    \ R. Droms, \"IPv6 Prefix Options for Dynamic\n              Host Configuration\
    \ Protocol (DHCP) version 6\", RFC 3633,\n              DOI 10.17487/RFC3633,\
    \ December 2003,\n              <https://www.rfc-editor.org/info/rfc3633>.\n \
    \  [RFC3646]  Droms, R., Ed., \"DNS Configuration options for Dynamic\n      \
    \        Host Configuration Protocol for IPv6 (DHCPv6)\", RFC 3646,\n        \
    \      DOI 10.17487/RFC3646, December 2003,\n              <https://www.rfc-editor.org/info/rfc3646>.\n\
    \   [RFC3736]  Droms, R., \"Stateless Dynamic Host Configuration Protocol\n  \
    \            (DHCP) Service for IPv6\", RFC 3736, DOI 10.17487/RFC3736,\n    \
    \          April 2004, <https://www.rfc-editor.org/info/rfc3736>.\n   [RFC3769]\
    \  Miyakawa, S. and R. Droms, \"Requirements for IPv6 Prefix\n              Delegation\"\
    , RFC 3769, DOI 10.17487/RFC3769, June 2004,\n              <https://www.rfc-editor.org/info/rfc3769>.\n\
    \   [RFC4193]  Hinden, R. and B. Haberman, \"Unique Local IPv6 Unicast\n     \
    \         Addresses\", RFC 4193, DOI 10.17487/RFC4193, October 2005,\n       \
    \       <https://www.rfc-editor.org/info/rfc4193>.\n   [RFC4242]  Venaas, S.,\
    \ Chown, T., and B. Volz, \"Information Refresh\n              Time Option for\
    \ Dynamic Host Configuration Protocol for\n              IPv6 (DHCPv6)\", RFC\
    \ 4242, DOI 10.17487/RFC4242,\n              November 2005, <https://www.rfc-editor.org/info/rfc4242>.\n\
    \   [RFC4477]  Chown, T., Venaas, S., and C. Strauf, \"Dynamic Host\n        \
    \      Configuration Protocol (DHCP): IPv4 and IPv6 Dual-Stack\n             \
    \ Issues\", RFC 4477, DOI 10.17487/RFC4477, May 2006,\n              <https://www.rfc-editor.org/info/rfc4477>.\n\
    \   [RFC4704]  Volz, B., \"The Dynamic Host Configuration Protocol for\n     \
    \         IPv6 (DHCPv6) Client Fully Qualified Domain Name (FQDN)\n          \
    \    Option\", RFC 4704, DOI 10.17487/RFC4704, October 2006,\n              <https://www.rfc-editor.org/info/rfc4704>.\n\
    \   [RFC4941]  Narten, T., Draves, R., and S. Krishnan, \"Privacy\n          \
    \    Extensions for Stateless Address Autoconfiguration in\n              IPv6\"\
    , RFC 4941, DOI 10.17487/RFC4941, September 2007,\n              <https://www.rfc-editor.org/info/rfc4941>.\n\
    \   [RFC4943]  Roy, S., Durand, A., and J. Paugh, \"IPv6 Neighbor\n          \
    \    Discovery On-Link Assumption Considered Harmful\",\n              RFC 4943,\
    \ DOI 10.17487/RFC4943, September 2007,\n              <https://www.rfc-editor.org/info/rfc4943>.\n\
    \   [RFC4994]  Zeng, S., Volz, B., Kinnear, K., and J. Brzozowski,\n         \
    \     \"DHCPv6 Relay Agent Echo Request Option\", RFC 4994,\n              DOI\
    \ 10.17487/RFC4994, September 2007,\n              <https://www.rfc-editor.org/info/rfc4994>.\n\
    \   [RFC5007]  Brzozowski, J., Kinnear, K., Volz, B., and S. Zeng,\n         \
    \     \"DHCPv6 Leasequery\", RFC 5007, DOI 10.17487/RFC5007,\n              September\
    \ 2007, <https://www.rfc-editor.org/info/rfc5007>.\n   [RFC5453]  Krishnan, S.,\
    \ \"Reserved IPv6 Interface Identifiers\",\n              RFC 5453, DOI 10.17487/RFC5453,\
    \ February 2009,\n              <https://www.rfc-editor.org/info/rfc5453>.\n \
    \  [RFC5460]  Stapp, M., \"DHCPv6 Bulk Leasequery\", RFC 5460,\n             \
    \ DOI 10.17487/RFC5460, February 2009,\n              <https://www.rfc-editor.org/info/rfc5460>.\n\
    \   [RFC5905]  Mills, D., Martin, J., Ed., Burbank, J., and W. Kasch,\n      \
    \        \"Network Time Protocol Version 4: Protocol and Algorithms\n        \
    \      Specification\", RFC 5905, DOI 10.17487/RFC5905, June 2010,\n         \
    \     <https://www.rfc-editor.org/info/rfc5905>.\n   [RFC5908]  Gayraud, R. and\
    \ B. Lourdelet, \"Network Time Protocol (NTP)\n              Server Option for\
    \ DHCPv6\", RFC 5908, DOI 10.17487/RFC5908,\n              June 2010, <https://www.rfc-editor.org/info/rfc5908>.\n\
    \   [RFC6422]  Lemon, T. and Q. Wu, \"Relay-Supplied DHCP Options\",\n       \
    \       RFC 6422, DOI 10.17487/RFC6422, December 2011,\n              <https://www.rfc-editor.org/info/rfc6422>.\n\
    \   [RFC6603]  Korhonen, J., Ed., Savolainen, T., Krishnan, S., and O.\n     \
    \         Troan, \"Prefix Exclude Option for DHCPv6-based Prefix\n           \
    \   Delegation\", RFC 6603, DOI 10.17487/RFC6603, May 2012,\n              <https://www.rfc-editor.org/info/rfc6603>.\n\
    \   [RFC6724]  Thaler, D., Ed., Draves, R., Matsumoto, A., and T. Chown,\n   \
    \           \"Default Address Selection for Internet Protocol Version 6\n    \
    \          (IPv6)\", RFC 6724, DOI 10.17487/RFC6724, September 2012,\n       \
    \       <https://www.rfc-editor.org/info/rfc6724>.\n   [RFC6879]  Jiang, S., Liu,\
    \ B., and B. Carpenter, \"IPv6 Enterprise\n              Network Renumbering Scenarios,\
    \ Considerations, and\n              Methods\", RFC 6879, DOI 10.17487/RFC6879,\
    \ February 2013,\n              <https://www.rfc-editor.org/info/rfc6879>.\n \
    \  [RFC6939]  Halwasia, G., Bhandari, S., and W. Dec, \"Client Link-Layer\n  \
    \            Address Option in DHCPv6\", RFC 6939, DOI 10.17487/RFC6939,\n   \
    \           May 2013, <https://www.rfc-editor.org/info/rfc6939>.\n   [RFC7083]\
    \  Droms, R., \"Modification to Default Values of SOL_MAX_RT\n              and\
    \ INF_MAX_RT\", RFC 7083, DOI 10.17487/RFC7083,\n              November 2013,\
    \ <https://www.rfc-editor.org/info/rfc7083>.\n   [RFC7084]  Singh, H., Beebee,\
    \ W., Donley, C., and B. Stark, \"Basic\n              Requirements for IPv6 Customer\
    \ Edge Routers\", RFC 7084,\n              DOI 10.17487/RFC7084, November 2013,\n\
    \              <https://www.rfc-editor.org/info/rfc7084>.\n   [RFC7136]  Carpenter,\
    \ B. and S. Jiang, \"Significance of IPv6\n              Interface Identifiers\"\
    , RFC 7136, DOI 10.17487/RFC7136,\n              February 2014, <https://www.rfc-editor.org/info/rfc7136>.\n\
    \   [RFC7341]  Sun, Q., Cui, Y., Siodelski, M., Krishnan, S., and I.\n       \
    \       Farrer, \"DHCPv4-over-DHCPv6 (DHCP 4o6) Transport\",\n              RFC\
    \ 7341, DOI 10.17487/RFC7341, August 2014,\n              <https://www.rfc-editor.org/info/rfc7341>.\n\
    \   [RFC7368]  Chown, T., Ed., Arkko, J., Brandt, A., Troan, O., and J.\n    \
    \          Weil, \"IPv6 Home Networking Architecture Principles\",\n         \
    \     RFC 7368, DOI 10.17487/RFC7368, October 2014,\n              <https://www.rfc-editor.org/info/rfc7368>.\n\
    \   [RFC7513]  Bi, J., Wu, J., Yao, G., and F. Baker, \"Source Address\n     \
    \         Validation Improvement (SAVI) Solution for DHCP\",\n              RFC\
    \ 7513, DOI 10.17487/RFC7513, May 2015,\n              <https://www.rfc-editor.org/info/rfc7513>.\n\
    \   [RFC7550]  Troan, O., Volz, B., and M. Siodelski, \"Issues and\n         \
    \     Recommendations with Multiple Stateful DHCPv6 Options\",\n             \
    \ RFC 7550, DOI 10.17487/RFC7550, May 2015,\n              <https://www.rfc-editor.org/info/rfc7550>.\n\
    \   [RFC7598]  Mrugalski, T., Troan, O., Farrer, I., Perreault, S., Dec,\n   \
    \           W., Bao, C., Yeh, L., and X. Deng, \"DHCPv6 Options for\n        \
    \      Configuration of Softwire Address and Port-Mapped\n              Clients\"\
    , RFC 7598, DOI 10.17487/RFC7598, July 2015,\n              <https://www.rfc-editor.org/info/rfc7598>.\n\
    \   [RFC7610]  Gont, F., Liu, W., and G. Van de Velde, \"DHCPv6-Shield:\n    \
    \          Protecting against Rogue DHCPv6 Servers\", BCP 199,\n             \
    \ RFC 7610, DOI 10.17487/RFC7610, August 2015,\n              <https://www.rfc-editor.org/info/rfc7610>.\n\
    \   [RFC7707]  Gont, F. and T. Chown, \"Network Reconnaissance in IPv6\n     \
    \         Networks\", RFC 7707, DOI 10.17487/RFC7707, March 2016,\n          \
    \    <https://www.rfc-editor.org/info/rfc7707>.\n   [RFC7721]  Cooper, A., Gont,\
    \ F., and D. Thaler, \"Security and Privacy\n              Considerations for\
    \ IPv6 Address Generation Mechanisms\",\n              RFC 7721, DOI 10.17487/RFC7721,\
    \ March 2016,\n              <https://www.rfc-editor.org/info/rfc7721>.\n   [RFC7824]\
    \  Krishnan, S., Mrugalski, T., and S. Jiang, \"Privacy\n              Considerations\
    \ for DHCPv6\", RFC 7824,\n              DOI 10.17487/RFC7824, May 2016,\n   \
    \           <https://www.rfc-editor.org/info/rfc7824>.\n   [RFC7844]  Huitema,\
    \ C., Mrugalski, T., and S. Krishnan, \"Anonymity\n              Profiles for\
    \ DHCP Clients\", RFC 7844,\n              DOI 10.17487/RFC7844, May 2016,\n \
    \             <https://www.rfc-editor.org/info/rfc7844>.\n   [RFC7969]  Lemon,\
    \ T. and T. Mrugalski, \"Customizing DHCP\n              Configuration on the\
    \ Basis of Network Topology\", RFC 7969,\n              DOI 10.17487/RFC7969,\
    \ October 2016,\n              <https://www.rfc-editor.org/info/rfc7969>.\n  \
    \ [RFC8156]  Mrugalski, T. and K. Kinnear, \"DHCPv6 Failover Protocol\",\n   \
    \           RFC 8156, DOI 10.17487/RFC8156, June 2017,\n              <https://www.rfc-editor.org/info/rfc8156>.\n\
    \   [RFC8168]  Li, T., Liu, C., and Y. Cui, \"DHCPv6 Prefix-Length Hint\n    \
    \          Issues\", RFC 8168, DOI 10.17487/RFC8168, May 2017,\n             \
    \ <https://www.rfc-editor.org/info/rfc8168>.\n   [TR-187]   Broadband Forum, \"\
    TR-187 - IPv6 for PPP Broadband Access\",\n              February 2013, <https://www.broadband-forum.org/\n\
    \              technical/download/TR-187_Issue-2.pdf>.\n"
- title: Appendix A.  Summary of Changes
  contents:
  - "Appendix A.  Summary of Changes\n   This appendix provides a summary of the significant\
    \ changes made to\n   this updated DHCPv6 specification.\n   1.   The Introduction\
    \ (Section 1) was reorganized and updated.  In\n        particular, the client/server\
    \ message exchanges were moved into\n        a new (and expanded) section on their\
    \ own (see Section 5).\n   2.   New sections were added to discuss the relationship\
    \ to previous\n        DHCPv6 documents and also to DHCPv4.\n   3.   Sections\
    \ 2 (\"Requirements\") and 3 (\"Background\") had very minor\n        edits.\n\
    \   4.   Section 4 (\"Terminology\") had minor edits.\n   5.   Section 4.2 (\"\
    DHCP Terminology\") was expanded to incorporate\n        definitions from RFC\
    \ 3633, add T1/T2 definitions, add\n        definitions useful in describing combined\
    \ address assignment and\n        prefix delegation operations, and improve some\
    \ existing\n        definitions.\n   6.   Section 5 (\"Client/Server Exchanges\"\
    ) was added from material\n        previously in Section 1 of RFC 3315 (\"Introduction\
    \ and\n        Overview\") and was expanded.\n   7.   Section 6 (\"Operational\
    \ Models\") is new.  It provides\n        information on the kinds of DHCP clients\
    \ and how they operate.\n   8.   Section 7 (\"DHCP Constants\") was primarily\
    \ updated to add\n        constants from RFC 4242 and RFC 7083.  Note that the\
    \ default\n        HOP_COUNT_LIMIT value was reduced from 32 to 8.\n   9.   Sections\
    \ 8 (\"Client/Server Message Formats\"), 9 (\"Relay Agent/\n        Server Message\
    \ Formats\"), and 10 (\"Representation and Use of\n        Domain Names\") had\
    \ only very minor changes.\n   10.  Section 11 (\"DHCP Unique Identifier (DUID)\"\
    ) now discourages,\n        rather than disallows, a server to parse the DUID;\
    \ now includes\n        some information on the DUID-UUID (RFC 6355); and had\
    \ other\n        minor edits.\n   11.  Section 12 (\"Identity Association\") was\
    \ expanded to better\n        explain the concept and to also include prefix delegation.\n\
    \   12.  Section 13 (\"Assignment to an IA\") incorporates material from\n   \
    \     two sections (11 and 12) of RFC 3315 and also includes a section\n     \
    \   on prefix delegation.\n   13.  Section 14 (\"Transmission of Messages by a\
    \ Client\") was expanded\n        to include rate limiting by clients and how\
    \ clients should\n        handle T1 or T2 values of 0.\n   14.  Section 15 (\"\
    Reliability of Client-Initiated Message Exchanges\")\n        was expanded to\
    \ clarify that the Elapsed Time option must be\n        updated in retransmitted\
    \ messages and that a client is not\n        required to listen for DHCP traffic\
    \ for the entire\n        retransmission period.\n   15.  Section 16 (\"Message\
    \ Validation\") had minor edits.\n   16.  Section 17 (\"Client Source Address\
    \ and Interface Selection\") was\n        expanded to include prefix delegation.\n\
    \   17.  Section 18 (\"DHCP Configuration Exchanges\") consolidates what\n   \
    \     used to be in the following sections in RFC 3315: \"DHCP Server\n      \
    \  Solicitation\" (Section 17), \"DHCP Client-Initiated Configuration\n      \
    \  Exchange\" (Section 18), and \"DHCP Server-Initiated Configuration\n      \
    \  Exchange\" (Section 19).  This material was reorganized and\n        enhanced,\
    \ and it incorporates prefix delegation from RFC 3633\n        and other changes\
    \ from RFC 4242, RFC 7083, and RFC 7550.  A few\n        changes of note:\n  \
    \      A.  The Option Request option is no longer optional for some\n        \
    \    messages (Solicit and Information-request), as RFC 7083\n            requires\
    \ clients to request SOL_MAX_RT or INF_MAX_RT\n            options.\n        B.\
    \  The Reconfigure message should no longer contain\n            IA_NA/IA_PD,\
    \ ORO, or other options to indicate to the client\n            what was reconfigured.\
    \  The client should request everything\n            it needs in the response\
    \ to the Reconfigure.\n        C.  The lifetime and T1/T2 hints should not be\
    \ sent by a client\n            (it should send values of 0 in these fields),\
    \ and any\n            non-zero values should be ignored by the server.\n    \
    \    D.  Clarified that a server may return different addresses in\n         \
    \   the Reply than requested by a client in the Request message.\n           \
    \ Also clarified that a server must not include addresses that\n            it\
    \ will not assign.\n        Also, Section 18.2.12 (\"Refreshing Configuration\
    \ Information\")\n        was added to indicate use cases for when a client should\
    \ try to\n        refresh network information.\n   18.  Section 19 (\"Relay Agent\
    \ Behavior\") incorporates RFC 7283 and\n        had minor edits.  A new section,\
    \ \"Interaction between Relay\n        Agents and Servers\" (Section 19.4), was\
    \ added.\n   19.  Section 20 (\"Authentication of DHCP Messages\") includes\n\
    \        significant changes: IPsec materials were mostly removed and\n      \
    \  replaced with a reference to RFC 8213, and the delayed\n        authentication\
    \ protocol has been obsoleted (see Section 25).\n        Note that RKAP is still\
    \ considered current.\n   20.  Section 21 (\"DHCP Options\") was expanded to incorporate\n\
    \        OPTION_IA_PD and OPTION_IAPREFIX from RFC 3633, the Information\n   \
    \     Refresh Time option (OPTION_INFORMATION_REFRESH_TIME) from\n        RFC\
    \ 4242, and the SOL_MAX_RT and INF_MAX_RT options from\n        RFC 7083.  Some\
    \ additional edits were made to clarify option\n        handling, such as which\
    \ options should not be in an Option\n        Request option.\n   21.  The security\
    \ considerations (Section 22) were updated to expand\n        the discussion of\
    \ security threats and include material from the\n        incorporated documents,\
    \ primarily RFC 3633.\n   22.  New privacy considerations were added (Section\
    \ 23) to account\n        for privacy issues.\n   23.  Section 24 (\"IANA Considerations\"\
    ) was rewritten to reflect the\n        changes requested for this document, as\
    \ other documents have\n        already made the message, option, DUID, and status\
    \ code\n        assignments and this document does not add any new assignments.\n\
    \   24.  Section 25 (\"Obsoleted Mechanisms\") is a new section that\n       \
    \ documents the mechanisms obsoleted by this specification.\n   25.  Appendices\
    \ B (\"Appearance of Options in Message Types\") and C\n        (\"Appearance\
    \ of Options in the \"options\" Field of DHCP Options\")\n        were updated\
    \ to reflect the incorporated options from RFC 3633,\n        RFC 4242, and RFC\
    \ 7083.\n   26.  Where appropriate, informative references have been added to\n\
    \        provide further background and guidance throughout the document\n   \
    \     (as can be noted by the vast increase in references).\n   27.  Changes were\
    \ made to incorporate the following errata for\n        RFC 3315: Erratum IDs\
    \ 294, 295, 1373, 1815, 2471, 2472, 2509,\n        2928, 3577, 5450; RFC 3633:\
    \ Erratum IDs 248, 2468, 2469, 2470,\n        3736; and RFC 3736: Erratum ID 3796.\
    \  Note that Erratum ID 1880\n        for RFC 3633 no longer applies, as servers\
    \ (delegating routers)\n        ignore received T1/T2 hints (see (C) in item 17\
    \ above).\n   28.  General changes to other IPv6 specifications, such as removing\n\
    \        the use of site-local unicast addresses and adding unique local\n   \
    \     addresses, were made to the document.\n   29.  It should be noted that this\
    \ document does not refer to all\n        DHCPv6 functionality and specifications.\
    \  Readers of this\n        specification should visit <https://www.iana.org/assignments/\n\
    \        dhcpv6-parameters> and <https://datatracker.ietf.org/wg/dhc/> to\n  \
    \      learn of the RFCs that define DHCPv6 messages, options,\n        status\
    \ codes, and more.\n"
- title: Appendix B.  Appearance of Options in Message Types
  contents:
  - "Appendix B.  Appearance of Options in Message Types\n   The following tables\
    \ indicate with a \"*\" the options that are allowed\n   in each DHCP message\
    \ type.\n   These tables are informational.  If they conflict with text earlier\n\
    \   in this document, that text should be considered authoritative.\n        \
    \ Client Server IA_NA/                  Elap. Relay       Server\n           ID\
    \     ID   IA_TA IA_PD  ORO   Pref Time   Msg. Auth. Unicast\n Solicit   *   \
    \          *     *     *           *\n Advert.   *      *      *     *       \
    \    *\n Request   *      *      *     *     *           *\n Confirm   *     \
    \        *                       *\n Renew     *      *      *     *     *   \
    \        *\n Rebind    *             *     *     *           *\n Decline   * \
    \     *      *     *                 *\n Release   *      *      *     *     \
    \            *\n Reply     *      *      *     *                             *\
    \     *\n Reconf.   *      *                                          *\n Inform.\
    \   * (see note)              *           *\n R-forw.                        \
    \                       *\n R-repl.                                          \
    \     *\n   NOTE: The Server Identifier option (see Section 21.3) is only\n  \
    \ included in Information-request messages that are sent in response to\n   a\
    \ Reconfigure (see Section 18.2.6).\n                                        \
    \                          Info\n           Status  Rap. User  Vendor Vendor Inter.\
    \ Recon. Recon. Refresh\n            Code  Comm. Class Class  Spec.    ID    Msg.\
    \  Accept  Time\n   Solicit          *     *     *      *                    *\n\
    \   Advert.   *            *     *      *                    *\n   Request   \
    \             *     *      *                    *\n   Confirm                *\
    \     *      *\n   Renew                  *     *      *                    *\n\
    \   Rebind                 *     *      *                    *\n   Decline   \
    \             *     *      *\n   Release                *     *      *\n   Reply\
    \     *      *     *     *      *                    *        *\n   Reconf.  \
    \                                         *\n   Inform.                *     *\
    \      *                    *\n   R-forw.                             *      *\n\
    \   R-repl.                             *      *\n           SOL_MAX_RT  INF_MAX_RT\n\
    \   Solicit\n   Advert.    *\n   Request\n   Confirm\n   Renew\n   Rebind\n  \
    \ Decline\n   Release\n   Reply      *           *\n   Reconf.\n   Inform.\n \
    \  R-forw.\n   R-repl.\n"
- title: Appendix C.  Appearance of Options in the "options" Field of DHCP
  contents:
  - "Appendix C.  Appearance of Options in the \"options\" Field of DHCP\n       \
    \      Options\n   The following table indicates with a \"*\" where options defined\
    \ in\n   this document can appear as top-level options or can be encapsulated\n\
    \   in other options defined in this document.  Other RFCs may define\n   additional\
    \ situations where options defined in this document are\n   encapsulated in other\
    \ options.\n   This table is informational.  If it conflicts with text earlier\
    \ in\n   this document, that text should be considered authoritative.\n      \
    \             Top-    IA_NA/                        RELAY-  RELAY-\n         \
    \          Level   IA_TA  IAADDR IA_PD  IAPREFIX FORW    REPL\n   Client ID  \
    \        *\n   Server ID          *\n   IA_NA/IA_TA        *\n   IAADDR      \
    \               *\n   IA_PD              *\n   IAPREFIX                      \
    \           *\n   ORO                *\n   Preference         *\n   Elapsed Time\
    \       *\n   Relay Message                                            *     \
    \  *\n   Authentic.         *\n   Server Uni.        *\n   Status Code       \
    \ *       *             *\n   Rapid Comm.        *\n   User Class         *\n\
    \   Vendor Class       *\n   Vendor Info.       *                            \
    \         *       *\n   Interf. ID                                           \
    \    *       *\n   Reconf. MSG.       *\n   Reconf. Accept     *\n   Info Refresh\
    \ Time  *\n   SOL_MAX_RT         *\n   INF_MAX_RT         *\n   Notes: Options\
    \ asterisked in the \"Top-Level\" column appear in the\n   \"options\" field of\
    \ client messages (see Section 8).  Options\n   asterisked in the \"RELAY-FORW\"\
    \ and \"RELAY-REPL\" columns appear in the\n   \"options\" field of the Relay-forward\
    \ and Relay-reply messages (see\n   Section 9).\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   This document is merely a refinement of earlier work by the\
    \ authors\n   of the following documents and would not be possible without their\n\
    \   original work:\n   -  RFC 3315 (Ralph Droms, Jim Bound, Bernie Volz, Ted Lemon,\
    \ Charles\n      Perkins, and Mike Carney)\n   -  RFC 3633 (Ole Troan and Ralph\
    \ Droms)\n   -  RFC 3736 (Ralph Droms)\n   -  RFC 4242 (Stig Venaas, Tim Chown,\
    \ and Bernie Volz)\n   -  RFC 7083 (Ralph Droms)\n   -  RFC 7283 (Yong Cui, Qi\
    \ Sun, and Ted Lemon)\n   -  RFC 7550 (Ole Troan, Bernie Volz, and Marcin Siodelski)\n\
    \   A number of additional people have contributed to identifying issues\n   with\
    \ RFC 3315 and RFC 3633 and proposed resolutions to these issues\n   as reflected\
    \ in this document (listed here in no particular order):\n   Ole Troan, Robert\
    \ Marks, Leaf Yeh, Michelle Cotton, Pablo Armando,\n   John Brzozowski, Suresh\
    \ Krishnan, Hideshi Enokihara, Alexandru\n   Petrescu, Yukiyo Akisada, Tatuya\
    \ Jinmei, Fred Templin, and Christian\n   Huitema.\n   We also thank the following,\
    \ not otherwise acknowledged and in no\n   particular order, for their review\
    \ comments: Jeremy Reed, Francis\n   Dupont, Lorenzo Colitti, Tianxiang Li, Ian\
    \ Farrer, Yogendra Pal, Kim\n   Kinnear, Shawn Routhier, Michayla Newcombe, Alissa\
    \ Cooper, Allison\n   Mankin, Adam Roach, Kyle Rose, Elwyn Davies, Eric Rescorla,\
    \ Ben\n   Campbell, Warren Kumari, and Kathleen Moriarty.\n   Also, special thanks\
    \ to Ralph Droms for answering many questions\n   related to the original RFC\
    \ 3315 and RFC 3633 work and for\n   shepherding this document through the IETF\
    \ process.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Tomek Mrugalski\n   Internet Systems Consortium, Inc.\n\
    \   950 Charter Street\n   Redwood City, CA  94063\n   United States of America\n\
    \   Email: tomasz.mrugalski@gmail.com\n   Marcin Siodelski\n   Internet Systems\
    \ Consortium, Inc.\n   950 Charter Street\n   Redwood City, CA  94063\n   United\
    \ States of America\n   Email: msiodelski@gmail.com\n   Bernie Volz\n   Cisco\
    \ Systems, Inc.\n   1414 Massachusetts Ave.\n   Boxborough, MA  01719\n   United\
    \ States of America\n   Email: volz@cisco.com\n   Andrew Yourtchenko\n   Cisco\
    \ Systems, Inc.\n   De kleetlaan 6a\n   Diegem  BRABANT 1831\n   Belgium\n   Email:\
    \ ayourtch@cisco.com\n   Michael C. Richardson\n   Sandelman Software Works\n\
    \   470 Dawson Avenue\n   Ottawa, ON  K1Z 5V7\n   Canada\n   Email: mcr+ietf@sandelman.ca\n\
    \   URI:   http://www.sandelman.ca/\n   Sheng Jiang\n   Huawei Technologies Co.,\
    \ Ltd\n   Q14, Huawei Campus, No. 156 Beiqing Road\n   Hai-Dian District, Beijing\
    \  100095\n   China\n   Email: jiangsheng@huawei.com\n   Ted Lemon\n   Nibbhaya\
    \ Consulting\n   P.O. Box 958\n   Brattleboro, VT  05301-0958\n   United States\
    \ of America\n   Email: mellon@fugue.com\n   Timothy Winters\n   University of\
    \ New Hampshire, Interoperability Lab (UNH-IOL)\n   Durham, NH\n   United States\
    \ of America\n   Email: twinters@iol.unh.edu\n"
