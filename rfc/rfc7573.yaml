- title: __initial_text__
  contents:
  - "   Interworking between the Session Initiation Protocol (SIP) and the\n     \
    \      Extensible Messaging and Presence Protocol (XMPP):\n                  \
    \   One-to-One Text Chat Sessions\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines a bidirectional protocol mapping for the\n\
    \   exchange of instant messages in the context of a one-to-one chat\n   session\
    \ between a user of the Session Initiation Protocol (SIP) and a\n   user of the\
    \ Extensible Messaging and Presence Protocol (XMPP).\n   Specifically for SIP\
    \ text chat, this document specifies a mapping to\n   the Message Session Relay\
    \ Protocol (MSRP).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7573.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Intended Audience ...............................................3\n  \
    \ 3. Terminology .....................................................4\n   4.\
    \ XMPP to MSRP ....................................................4\n   5. MSRP\
    \ to XMPP ....................................................9\n   6. Composing\
    \ Events ...............................................13\n      6.1. Use of\
    \ the Gone Chat State ................................14\n   7. Delivery Reports\
    \ ...............................................15\n   8. Message Size ...................................................17\n\
    \   9. Internationalization Considerations ............................18\n  \
    \ 10. Security Considerations .......................................18\n   11.\
    \ References ....................................................18\n      11.1.\
    \ Normative References .....................................18\n      11.2. Informative\
    \ References ...................................19\n   Acknowledgements ..................................................20\n\
    \   Authors' Addresses ................................................20\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Both the Session Initiation Protocol (SIP) [RFC3261] and\
    \ the\n   Extensible Messaging and Presence Protocol (XMPP) [RFC6120] can be\n\
    \   used for the purpose of one-to-one text chat over the Internet.  To\n   ensure\
    \ interworking between these technologies, it is important to\n   define bidirectional\
    \ protocol mappings.\n   The architectural assumptions underlying such protocol\
    \ mappings are\n   provided in [RFC7247], including mapping of addresses and error\n\
    \   conditions.  This document specifies mappings for one-to-one text\n   chat\
    \ sessions (sometimes called \"session-mode\" messaging); in\n   particular, this\
    \ document specifies mappings between XMPP messages of\n   type \"chat\" and the\
    \ Message Session Relay Protocol (MSRP) [RFC4975],\n   which is commonly used\
    \ in SIP-based systems for chat functionality\n   (although note that MSRP is\
    \ not conjoined to SIP, and can be used by\n   non-SIP technologies).  Mappings\
    \ for single instant messages and\n   groupchat are provided in [RFC7572] and\
    \ [GROUPCHAT].\n   The approach taken here is to directly map syntax and semantics\
    \ from\n   one protocol to another.  The mapping described herein depends on the\n\
    \   protocols defined in the following specifications:\n   o  XMPP chat sessions\
    \ using message stanzas of type \"chat\" are\n      specified in [RFC6121].\n\
    \   o  MSRP chat sessions using the SIP INVITE and SEND request types are\n  \
    \    specified in [RFC4975].\n   In SIP-based systems that use MSRP, a chat session\
    \ is formally\n   negotiated (just as any other session type is negotiated when\
    \ using\n   SIP).  By contrast, a one-to-one chat \"session\" in XMPP is an\n\
    \   informal construct and is not formally negotiated: a user simply\n   sends\
    \ a message of type \"chat\" to a contact, the contact then replies\n   to the\
    \ message, and the sum total of such messages exchanged during a\n   defined period\
    \ of time is considered to be a chat session (ideally\n   tied together using\
    \ an XMPP <thread/> element as described in\n   Section 5.1 of [RFC6121]).  To\
    \ overcome the disparity between these\n   approaches, a gateway that wishes to\
    \ map between SIP/MSRP and XMPP\n   for one-to-one chat sessions needs to maintain\
    \ some additional state,\n   as described below.\n"
- title: 2.  Intended Audience
  contents:
  - "2.  Intended Audience\n   The documents in this series are intended for use by\
    \ software\n   developers who have an existing system based on one of these\n\
    \   technologies (e.g., SIP) and who would like to enable communication\n   from\
    \ that existing system to systems based on the other technology\n   (e.g., XMPP).\
    \  We assume that readers are familiar with the core\n   specifications for both\
    \ SIP [RFC3261] and XMPP [RFC6120], with the\n   base document for this series\
    \ [RFC7247], and with the following chat-\n   related specifications:\n   o  \"\
    The Message Session Relay Protocol (MSRP)\" [RFC4975]\n   o  \"Extensible Messaging\
    \ and Presence Protocol (XMPP): Instant\n      Messaging and Presence\" [RFC6121]\n\
    \   o  \"Indication of Message Composition for Instant Messaging\"\n      [RFC3994]\n\
    \   o  \"Chat State Notifications\" [XEP-0085]\n   Note well that not all protocol-compliant\
    \ messages are shown (such as\n   SIP 100 TRYING messages), in order to focus\
    \ the reader on the\n   essential aspects of the protocol flows.\n"
- title: 3.  Terminology
  contents:
  - "3.  Terminology\n   A number of terms used here are explained in [RFC3261], [RFC4975],\n\
    \   [RFC6120], and [RFC6121].\n   In flow diagrams, SIP/MSRP traffic is shown\
    \ using arrows such as\n   \"***>\" whereas XMPP traffic is shown using arrows\
    \ such as \"...>\".\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT\
    \ RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   [RFC2119].\n"
- title: 4.  XMPP to MSRP
  contents:
  - "4.  XMPP to MSRP\n   In XMPP, the \"informal session\" approach is to simply\
    \ send someone a\n   <message/> of type \"chat\" without starting any session\
    \ negotiation\n   ahead of time (as described in [RFC6121]).  The XMPP \"informal\n\
    \   session\" approach maps very well into a SIP MESSAGE request, as\n   described\
    \ in [RFC7572].  However, the XMPP informal session approach\n   can also be mapped\
    \ to MSRP if the XMPP-to-SIP gateway maintains\n   additional state.  The order\
    \ of events is as follows.\n   XMPP            XMPP        XMPP-to-MSRP      \
    \  SIP             SIP\n   User           Server         Gateway          Server\
    \          User\n    |               |               |               |       \
    \        |\n    | (F1) XMPP     |               |               |            \
    \   |\n    | message       |               |               |               |\n\
    \    |..............>|               |               |               |\n    |\
    \               | (F2) XMPP     |               |               |\n    |     \
    \          | message       |               |               |\n    |          \
    \     |..............>|               |               |\n    |               |\
    \               | (F3) SIP      |               |\n    |               |     \
    \          | INVITE        |               |\n    |               |          \
    \     |**************>|               |\n    |               |               |\
    \               | (F4) SIP      |\n    |               |               |     \
    \          | INVITE        |\n    |               |               |          \
    \     |**************>|\n    |               |               |               |\
    \ (F5) SIP      |\n    |               |               |               | 200 OK\
    \        |\n    |               |               |               |<**************|\n\
    \    |               |               | (F6) SIP      |               |\n    |\
    \               |               | 200 OK        |               |\n    |     \
    \          |               |<**************|               |\n    |          \
    \     |               | (F7) SIP ACK  |               |\n    |               |\
    \               |**************>|               |\n    |               |     \
    \          |               | (F8) SIP ACK  |\n    |               |          \
    \     |               |**************>|\n    |               |               |\
    \ (F9) MSRP SEND                |\n    |               |               |******************************>|\n\
    \    .               .               .               .               .\n    .\
    \               .               .               .               .\n    |     \
    \          |               | (F10) MSRP SEND               |\n    |          \
    \     |               |<******************************|\n    |               |\
    \ (F11) XMPP    |               |               |\n    |               | message\
    \       |               |               |\n    |               |<..............|\
    \               |               |\n    | (F12) XMPP    |               |     \
    \          |               |\n    | message       |               |          \
    \     |               |\n    |<..............|               |               |\
    \               |\n    .               .               .               .     \
    \          .\n    .               .               .               .          \
    \     .\n    |               |               |               | (F13) SIP BYE |\n\
    \    |               |               |               |<**************|\n    |\
    \               |               | (F14) SIP BYE |               |\n    |     \
    \          |               |<**************|               |\n    |          \
    \     |               | (F15) SIP     |               |\n    |               |\
    \               | 200 OK        |               |\n    |               |     \
    \          |**************>|               |\n    |               |          \
    \     |               | (F16) SIP     |\n    |               |               |\
    \               | 200 OK        |\n    |               |               |     \
    \          |**************>|\n                  Figure 1: XMPP to MSRP Order of\
    \ Events\n   The mapping of XMPP syntax to SIP syntax MUST be as specified in\n\
    \   [RFC7572].\n   First, the XMPP user would generate an XMPP chat message.\n\
    \   Example 1: Juliet Sends XMPP Message (F1)\n   | <message from='juliet@example.com/yn0cl4bnw0yr3vym'\n\
    \   |          to='romeo@example.net'\n   |          id='a786hjs2'\n   |     \
    \     type='chat'>\n   |   <thread>29377446-0CBB-4296-8958-590D79094C50</thread>\n\
    \   |   <body>Art thou not Romeo, and a Montague?</body>\n   | </message>\n  \
    \ Upon receiving such a message stanza, the XMPP server needs to\n   determine\
    \ the identity of the domainpart in the 'to' address, which\n   it does by following\
    \ the procedures explained in Section 5 of\n   [RFC7247].  If the domain is a\
    \ SIP domain, the XMPP server will hand\n   off the message stanza to an XMPP-to-SIP\
    \ gateway or connection\n   manager that natively communicates with MSRP-aware\
    \ SIP servers.\n   The XMPP-to-SIP gateway at the XMPP server would then initiate\
    \ an\n   MSRP session with Romeo on Juliet's behalf (since there is no\n   reliable\
    \ way for the gateway to determine whether Romeo's client\n   supports MSRP, if\
    \ that is not the case then MSRP session initiation\n   might result in an error).\n\
    \   Example 2: Gateway Starts SIP Session on Behalf of Juliet (F3)\n   | INVITE\
    \ sip:romeo@example.net SIP/2.0\n   | To: <sip:romeo@example.net>\n   | From:\
    \ <sip:juliet@example.com>\n   | Contact: <sip:juliet@example.com>;gr=yn0cl4bnw0yr3vym\n\
    \   | Subject: Open chat with Juliet?\n   | Call-ID: 29377446-0CBB-4296-8958-590D79094C50\n\
    \   | CSeq: 1 INVITE\n   | Content-Type: application/sdp\n   |\n   | c=IN IP4\
    \ x2s.example.com\n   | m=message 7654 TCP/MSRP *\n   | a=accept-types:text/plain\n\
    \   | a=path:msrp://x2s.example.com:7654/jshA7weztas;tcp\n   Here we assume that\
    \ Romeo's client supports MSRP and that Romeo\n   accepts the MSRP session request.\n\
    \   Example 3: Romeo Accepts Session Request (F5)\n   | SIP/2.0 200 OK\n   | From:\
    \ <sip:juliet@example.com>\n   | To: <sip:romeo@example.net>\n   | Contact: <sip:romeo@example.net>;gr=dr4hcr0st3lup4c\n\
    \   | Call-ID: 29377446-0CBB-4296-8958-590D79094C50\n   | CSeq: 1 INVITE\n   |\
    \ Content-Type: application/sdp\n   |\n   | c=IN IP4 s2x.example.net\n   | m=message\
    \ 12763 TCP/MSRP *\n   | a=accept-types:text/plain\n   | a=path:msrp://s2x.example.net:12763/kjhd37s2s20w2a;tcp\n\
    \   The XMPP-to-SIP gateway then acknowledges the session acceptance on\n   behalf\
    \ of Juliet.\n   Example 4: Gateway Sends ACK to Romeo (F7)\n   | ACK sip:juliet@example.com\
    \ SIP/2.0\n   | To: <sip:romeo@example.net>;gr=dr4hcr0st3lup4c\n   | From: <sip:juliet@example.com>\n\
    \   | Contact: <sip:juliet@example.com>;gr=yn0cl4bnw0yr3vym\n   | Call-ID: 29377446-0CBB-4296-8958-590D79094C50\n\
    \   | CSeq: 2 ACK\n   The XMPP-to-SIP gateway then transforms the original XMPP\
    \ chat\n   message into MSRP.\n   Example 5: Gateway Maps XMPP Message to MSRP\
    \ (F9)\n   | MSRP a786hjs2 SEND\n   | From-Path: msrp://x2s.example.com:7654/jshA7weztas;tcp\n\
    \   | To-Path: msrp://s2x.example.net:12763/kjhd37s2s20w2a;tcp\n   | Message-ID:\
    \ 54C6F4F1-A39C-47D6-8718-FA65B3D0414A\n   | Byte-Range: 1-25/25\n   | Content-Type:\
    \ text/plain\n   |\n   | Art thou not Romeo, and a Montague?\n   | -------a786hjs2$\n\
    \   Romeo can then send a reply using his MSRP client.\n   Example 6: Romeo Sends\
    \ Reply (F10)\n   | MSRP di2fs53v SEND\n   | To-Path: msrp://x2s.example.com:7654/jshA7weztas;tcp\n\
    \   | From-Path: msrp://s2x.example.net:12763/kjhd37s2s20w2a;tcp\n   | Message-ID:\
    \ 6480C096-937A-46E7-BF9D-1353706B60AA\n   | Byte-Range: 1-25/25\n   | Failure-Report:\
    \ no\n   | Content-Type: text/plain\n   |\n   | Neither, fair saint, if either\
    \ thee dislike.\n   | -------di2fs53v$\n   The SIP-to-XMPP gateway would then\
    \ transform that message into\n   appropriate XMPP syntax for routing to the intended\
    \ recipient.\n   Example 7: Gateway Maps MSRP Message to XMPP (F11)\n   | <message\
    \ from='romeo@example.net/dr4hcr0st3lup4c'\n   |          to='juliet@example.com/yn0cl4bnw0yr3vym'\n\
    \   |          id='di2fs53v'\n   |          type='chat'>\n   |   <thread>29377446-0CBB-4296-8958-590D79094C50</thread>\n\
    \   |   <body>Neither, fair saint, if either thee dislike.</body>\n   | </message>\n\
    \   When the MSRP user wishes to end the chat session, the user's MSRP\n   client\
    \ sends a SIP BYE.\n   Example 8: Romeo Terminates Chat Session (F13)\n   | BYE\
    \ juliet@example.com sip: SIP/2.0\n   | From: <sip:juliet@example.com>;tag=786\n\
    \   | To: <sip:romeo@example.net>;tag=087js\n   | Call-ID: 29377446-0CBB-4296-8958-590D79094C50\n\
    \   | CSeq: 3 BYE\n   | Content-Length: 0\n   The BYE is then acknowledged by\
    \ the XMPP-to-SIP gateway.\n   Example 9: Gateway Acknowledges Termination (F15)\n\
    \   | SIP/2.0 200 OK\n   | From: <sip:juliet@example.com>;tag=786\n   | To: <sip:romeo@example.net>;tag=087js\n\
    \   | Call-ID: 29377446-0CBB-4296-8958-590D79094C50\n   | CSeq: 3 BYE\n   | Content-Length:\
    \ 0\n   Because there is no formal session on the XMPP side, there is no\n   corresponding\
    \ communication from the gateway to the XMPP user.\n   However, it is reasonable\
    \ for the gateway to send a \"gone\" chat state\n   notification [XEP-0085], as\
    \ described under Section 6.1.\n   In addition, there is no explicit method defined\
    \ in [RFC6121] for an\n   XMPP user to formally terminate a chat session, so a\
    \ gateway would\n   need to listen for a \"gone\" chat state notification from\
    \ the XMPP\n   user or institute a timer that considers the XMPP informal chat\n\
    \   session to be ended after some amount of time has elapsed ([XEP-0085]\n  \
    \ suggests generating a \"gone\" chat state if a user has not interacted\n   with\
    \ the chat session interface, system, or device for a relatively\n   long period\
    \ of time, e.g., 10 minutes).\n"
- title: 5.  MSRP to XMPP
  contents:
  - "5.  MSRP to XMPP\n   When an MSRP client sends messages through a gateway to\
    \ an XMPP\n   client, the order of events is as follows.\n   SIP             SIP\
    \         MSRP-to-XMPP       XMPP            XMPP\n   User           Server  \
    \       Gateway         Server           User\n    |               |         \
    \      |               |               |\n    | (F17) SIP     |              \
    \ |               |               |\n    | INVITE        |               |   \
    \            |               |\n    |**************>|               |        \
    \       |               |\n    |               | (F18) SIP     |             \
    \  |               |\n    |               | INVITE        |               |  \
    \             |\n    |               |**************>|               |       \
    \        |\n    |               | (F19) SIP     |               |            \
    \   |\n    |               | 200 OK        |               |               |\n\
    \    |               |<**************|               |               |\n    |\
    \ (F20) SIP     |               |               |               |\n    | 200 OK\
    \        |               |               |               |\n    |<**************|\
    \               |               |               |\n    | (F21) SIP ACK |     \
    \          |               |               |\n    |**************>|          \
    \     |               |               |\n    |               | (F22) SIP ACK |\
    \               |               |\n    |               |**************>|     \
    \          |               |\n    | (F23) MSRP SEND               |          \
    \     |               |\n    |******************************>|               |\
    \               |\n    |               |               | (F24) XMPP    |     \
    \          |\n    |               |               | message       |          \
    \     |\n    |               |               |..............>|               |\n\
    \    |               |               |               | (F25) XMPP    |\n    |\
    \               |               |               | message       |\n    |     \
    \          |               |               |..............>|\n    .          \
    \     .               .               .               .\n    .               .\
    \               .               .               .\n    |               |     \
    \          |               | (F26) XMPP    |\n    |               |          \
    \     |               | message       |\n    |               |               |\
    \               |<..............|\n    |               |               | (F27)\
    \ XMPP    |               |\n    |               |               | message   \
    \    |               |\n    |               |               |<..............|\
    \               |\n    | (F28) MSRP SEND               |               |     \
    \          |\n    |<******************************|               |          \
    \     |\n    .               .               .               .               .\n\
    \    .               .               .               .               .\n    |\
    \               |               |               |               |\n    |     \
    \          |               |               |               |\n    | (F29) SIP\
    \ BYE |               |               |               |\n    |**************>|\
    \               |               |               |\n    |               | (F30)\
    \ SIP BYE |               |               |\n    |               |**************>|\
    \               |               |\n    |               | (F31) SIP     |     \
    \          |               |\n    |               | 200 OK        |          \
    \     |               |\n    |               |<**************|               |\
    \               |\n    | (F32) SIP     |               |               |     \
    \          |\n    | 200 OK        |               |               |          \
    \     |\n    |<**************|               |               |               |\n\
    \                  Figure 2: MSRP to XMPP Order of Events\n   The mapping of SIP\
    \ syntax to XMPP syntax MUST be as specified in\n   [RFC7572].\n   The protocol\
    \ flow begins when Romeo starts a chat session with\n   Juliet.\n   Example 10:\
    \ Romeo Starts Chat Session (F17)\n   | INVITE sip:juliet@example.com SIP/2.0\n\
    \   | From: <sip:romeo@example.net>\n   | To: <sip:juliet@example.com>\n   | Contact:\
    \ <sip:romeo@example.net>;gr=dr4hcr0st3lup4c\n   | Subject: Open chat with Romeo?\n\
    \   | Call-ID: F6989A8C-DE8A-4E21-8E07-F0898304796F\n   | CSeq: 1 INVITE\n   |\
    \ Content-Type: application/sdp\n   |\n   | c=IN IP4 s2x.example.net\n   | m=message\
    \ 7313 TCP/MSRP *\n   | a=accept-types:text/plain\n   | a=path:msrp://s2x.example.net:7313/ansp71weztas;tcp\n\
    \   Upon receiving the INVITE, the SIP (MSRP) server needs to determine\n   the\
    \ identity of the domain portion of the Request-URI or To header,\n   which it\
    \ does by following the procedures explained in Section 5 of\n   [RFC7247].  If\
    \ the domain is an XMPP domain, the SIP server will hand\n   off the INVITE to\
    \ an associated MSRP-to-XMPP gateway or connection\n   manager that natively communicates\
    \ with XMPP servers.\n   Example 11: Gateway Accepts Session on Juliet's Behalf\
    \ (F19)\n   | SIP/2.0 200 OK\n   | From: <sip:romeo@example.net>;gr=dr4hcr0st3lup4c\n\
    \   | To: <sip:juliet@example.com>\n   | Contact: <sip:juliet@example.com>;gr=yn0cl4bnw0yr3vym\n\
    \   | Call-ID: F6989A8C-DE8A-4E21-8E07-F0898304796F\n   | CSeq: 1 INVITE\n   |\
    \ Content-Type: application/sdp\n   |\n   | c=IN IP4 x2s.example.com\n   | m=message\
    \ 8763 TCP/MSRP *\n   | a=accept-types:text/plain\n   | a=path:msrp://x2s.example.com:8763/lkjh37s2s20w2a;tcp\n\
    \   Example 12: Romeo Sends ACK (F21)\n   | ACK sip:juliet@example.com SIP/2.0\n\
    \   | To: <sip:juliet@example.com>;gr=yn0cl4bnw0yr3vym\n   | From: <sip:romeo@example.net>\n\
    \   | Contact: <sip:romeo@example.net>;gr=dr4hcr0st3lup4c\n   | Call-ID: F6989A8C-DE8A-4E21-8E07-F0898304796F\n\
    \   | CSeq: 2 ACK\n   Example 13: Romeo Sends Message (F23)\n   | MSRP ad49kswow\
    \ SEND\n   | To-Path: msrp://x2s.example.com:8763/lkjh37s2s20w2a;tcp\n   | From-Path:\
    \ msrp://s2x.example.net:7313/ansp71weztas;tcp\n   | Message-ID: 676FDB92-7852-443A-8005-2A1B9FE44F4E\n\
    \   | Byte-Range: 1-32/32\n   | Failure-Report: no\n   | Content-Type: text/plain\n\
    \   |\n   | I take thee at thy word ...\n   | -------ad49kswow$\n   Example 14:\
    \ MSRP-to-XMPP Gateway Maps MSRP Message to XMPP (F24)\n   | <message from='romeo@example.net'\n\
    \   |          to='juliet@example.com'\n   |          id='ad49kswow'\n   |   \
    \       type='chat'>\n   |   <thread>F6989A8C-DE8A-4E21-8E07-F0898304796F</thread>\n\
    \   |   <body>I take thee at thy word ...</body>\n   | </message>\n   Example\
    \ 15: Juliet Sends Reply (F26)\n   | <message from='juliet@example.com'\n   |\
    \          to='romeo@example.net'\n   |          id='ms53b7z9'\n   |         \
    \ type='chat'>\n   |   <thread>29377446-0CBB-4296-8958-590D79094C50</thread>\n\
    \   |   <body>What man art thou ...?</body>\n   | </message>\n   Example 16: Gateway\
    \ Maps XMPP Message to MSRP (F28)\n   | MSRP ms53b7z9 SEND\n   | To-Path: msrp://s2x.example.net:7313/jshA7weztas;tcp\n\
    \   | From-Path: msrp://x2s.example.com:8763/lkjh37s2s20w2a;tcp\n   | Message-ID:\
    \ 17EBA17B-94C0-463B-AD84-DE405C4C9D41\n   | Byte-Range: 1-25/25\n   | Failure-Report:\
    \ no\n   | Content-Type: text/plain\n   |\n   | What man art thou ...?\n   | -------ms53b7z9$\n\
    \   Example 17: Romeo Terminates Chat Session (F29)\n   | BYE juliet@example.com\
    \ sip: SIP/2.0\n   | To: <sip:juliet@example.com>;gr=yn0cl4bnw0yr3vym\n   | From:\
    \ <sip:romeo@example.net>\n   | Contact: <sip:romeo@example.net>;gr=dr4hcr0st3lup4c\n\
    \   | Call-ID: F6989A8C-DE8A-4E21-8E07-F0898304796F\n   | CSeq: 3 BYE\n   | Content-Length:\
    \ 0\n   Example 18: Gateway Acknowledges Termination of Session on Behalf of\n\
    \   Juliet (F31)\n   | SIP/2.0 200 OK\n   | To: <sip:juliet@example.com>;gr=yn0cl4bnw0yr3vym\n\
    \   | From: <sip:romeo@example.net>\n   | Contact: <sip:romeo@example.net>;gr=dr4hcr0st3lup4c\n\
    \   | Call-ID: F6989A8C-DE8A-4E21-8E07-F0898304796F\n   | CSeq: 3 BYE\n"
- title: 6.  Composing Events
  contents:
  - "6.  Composing Events\n   Both XMPP and MSRP enable a client to receive notifications\
    \ when a\n   person's conversation partner is composing an instant message within\n\
    \   the context of a chat session.\n   For XMPP, the Chat State Notifications\
    \ specification [XEP-0085]\n   defines five states: active, inactive, gone, composing,\
    \ and paused.\n   Some of these states are related to the act of message composition\n\
    \   (composing, paused), whereas others are related to the sender's\n   involvement\
    \ with the chat session (active, inactive, gone).  Note\n   that the \"gone\"\
    \ chat state is not to be confused with the <gone/>\n   stanza error condition\
    \ defined in [RFC6120].\n   For MSRP (and, in general, for so-called SIP for Instant\
    \ Messaging\n   and Presence Leveraging Extensions (SIMPLE) systems), the Indication\n\
    \   of Message Composition for Instant Messaging specification [RFC3994]\n   defines\
    \ two states: idle and active.  Here the idle state indicates\n   that the sender\
    \ is not actively composing a message, and the active\n   state indicates that\
    \ the sender is indeed actively composing a\n   message (the sending client simply\
    \ toggles between the two states).\n   Because XEP-0085 states can represent information\
    \ that is not\n   captured in RFC 3994, gateways can either (a) map only the composing-\n\
    \   related states or (b) map all the XEP-0085 states.\n   The following mappings\
    \ are suggested.\n   Table 3: Mapping of SIP/SIMPLE isComposing Events to XMPP\
    \ Chat states\n   +-------------------+--------------------+\n   | isComposing\
    \ Event |  Chat State        |\n   +-------------------+--------------------+\n\
    \   | active            |  composing         |\n   | idle              |  active\
    \            |\n   +-------------------+--------------------+\n   Table 4: Mapping\
    \ of XMPP Chat States to SIP/SIMPLE isComposing Events\n   +-------------------+--------------------+\n\
    \   | Chat State        | isComposing Event  |\n   +-------------------+--------------------+\n\
    \   | active            |  idle              |\n   | inactive          |  idle\
    \              |\n   | gone              |  none (Section 6.1)|\n   | composing\
    \         |  active            |\n   | paused            |  idle             \
    \ |\n   +-------------------+--------------------+\n   The XMPP Chat State Notifications\
    \ specification [XEP-0085] allows the\n   sending of \"standalone notifications\"\
    \ outside the context of a\n   message, theoretically even before any messages\
    \ are exchanged;\n   although a gateway could thus send an <active/> notification\
    \ to the\n   XMPP user when the SIP user accepts or initiates a chat session\n\
    \   (i.e., after F6 in Section 4 or after F22 in Section 5), this usage\n   might\
    \ be unexpected by XMPP clients as a way to signal the beginning\n   of an informal\
    \ chat session.\n"
- title: 6.1.  Use of the Gone Chat State
  contents:
  - "6.1.  Use of the Gone Chat State\n   Although there is no direct mapping for\
    \ the \"gone\" chat state to an\n   isComposing event, receipt of the \"gone\"\
    \ state at an XMPP-to-MSRP\n   gateway can serve as a trigger for terminating\
    \ the formal chat\n   session within MSRP, i.e., for sending a SIP BYE for the\
    \ session from\n   the XMPP-to-MSRP gateway to the SIP user.  The following examples\n\
    \   illustrate this indirect mapping (which would arise if, for example,\n   the\
    \ XMPP user were to send a \"gone\" chat state notification after\n   step F12\
    \ in Figure 1 or step F28 in Figure 2; in either of these\n   cases, the session\
    \ would be terminated by the XMPP user instead of by\n   the SIP user, as currently\
    \ shown in Figures 1 and 2).\n   Example 19: Juliet Sends Gone Chat State\n  \
    \ | <message from='juliet@example.com'\n   |          id='nx62f197'\n   |    \
    \      to='romeo@example.net'\n   |          type='chat'>\n   |   <thread>29377446-0CBB-4296-8958-590D79094C50</thread>\n\
    \   |   <gone xmlns='http://jabber.org/protocol/chatstates'/>\n   | </message>\n\
    \   Example 20: XMPP-to-MSRP Gateway Maps Gone Chat State to SIP BYE\n   | BYE\
    \ romeo@example.net sip: SIP/2.0\n   | From: <sip:juliet@example.com>;tag=786\n\
    \   | To: <sip:romeo@example.net>;tag=087js\n   | Call-ID: 29377446-0CBB-4296-8958-590D79094C50\n\
    \   | CSeq: 3 BYE\n   | Content-Length: 0\n   Similarly, receipt of a SIP BYE\
    \ message at an MSRP-to-XMPP gateway\n   can serve as a trigger for sending a\
    \ \"gone\" chat state notification\n   to the XMPP user.  The following examples\
    \ illustrate this indirect\n   mapping (which would occur after step F14 in Figure\
    \ 1 or step F30 in\n   Figure 2).\n   Example 21: Romeo Terminates Chat Session\n\
    \   | BYE juliet@example.com sip: SIP/2.0\n   | To: <sip:juliet@example.com>;gr=yn0cl4bnw0yr3vym\n\
    \   | From: <sip:romeo@example.net>\n   | Contact: <sip:romeo@example.net>;gr=dr4hcr0st3lup4c\n\
    \   | Call-ID: F6989A8C-DE8A-4E21-8E07-F0898304796F\n   | CSeq: 3 BYE\n   | Content-Length:\
    \ 0\n   Example 22: MSRP-to-XMPP Gateway Generates Gone Chat State\n   | <message\
    \ from='romeo@example.net'\n   |          id='hs61v397'\n   |          to='juliet@example.com'\n\
    \   |          type='chat'>\n   |   <thread>F6989A8C-DE8A-4E21-8E07-F0898304796F</thread>\n\
    \   |   <gone xmlns='http://jabber.org/protocol/chatstates'/>\n   | </message>\n\
    \   To enable these uses, gateways that support chat state notifications\n   MUST\
    \ support the \"gone\" state (which is merely recommended, not\n   required, by\
    \ [XEP-0085]).\n   It is also reasonable for gateways to implement timers that\n\
    \   automatically trigger a \"gone\" chat state if the XMPP user has not\n   sent\
    \ a message within the \"session\" for a given amount of time\n   ([XEP-0085]\
    \ suggests generating a \"gone\" chat state if a user has not\n   interacted with\
    \ the chat session interface, system, or device for a\n   relatively long period\
    \ of time, e.g., 10 minutes).\n"
- title: 7.  Delivery Reports
  contents:
  - "7.  Delivery Reports\n   Both XMPP and MSRP enable a client to receive notifications\
    \ when a\n   message has been received by the intended recipient.\n   For XMPP,\
    \ the Message Receipts specification [XEP-0184] defines a\n   method and XML namespace\
    \ for requesting and returning indications\n   that a message has been received\
    \ by a client controlled by the\n   intended recipient.\n   For MSRP, a native\
    \ reporting feature is included, in the form of\n   REPORT chunks (see Sections\
    \ 7.1.2 and 7.1.3 of [RFC4975]).\n   An XMPP Message Receipts element of <request\n\
    \   xmlns='urn:xmpp:receipts'/> is to be mapped to an MSRP Success-Report\n  \
    \ header field with a value of \"yes\", and an XMPP Message Receipts\n   element\
    \ of <received xmlns='urn:xmpp:receipts'/> is to be mapped to\n   an MSRP REPORT\
    \ request.\n   A Success-Report header field with a value of \"yes\" in an MSRP\
    \ SEND\n   request is to be mapped to an XMPP Message Receipts element of\n  \
    \ <request xmlns='urn:xmpp:receipts'/>, and an MSRP REPORT request is\n   to be\
    \ mapped to an XMPP message containing only a Message Receipts\n   element of\
    \ <received xmlns='urn:xmpp:receipts'/>.\n   Because the XMPP Message Receipts\
    \ specification does not support\n   failure reports, there is no mapping for\
    \ the MSRP Failure-Report\n   header field and gateways SHOULD set that header\
    \ field to \"no\".\n   Examples follow.\n   First, the XMPP user sends a message\
    \ containing a request for\n   delivery notification.\n   Example 23: Juliet Sends\
    \ XMPP Message with Receipt Request\n   | <message from='juliet@example.com'\n\
    \   |          id='bf9m36d5'\n   |          to='romeo@example.net'\n   |     \
    \     type='chat'>\n   |   <thread>29377446-0CBB-4296-8958-590D79094C50</thread>\n\
    \   |   <body>What man art thou ...?</body>\n   |   <request xmlns='urn:xmpp:receipts'/>\n\
    \   | </message>\n   Example 24: Gateway Maps XMPP Message to MSRP\n   | MSRP\
    \ bf9m36d5 SEND\n   | To-Path: msrp://s2x.example.net:7313/jshA7weztas;tcp\n \
    \  | From-Path: msrp://x2s.example.com:8763/lkjh37s2s20w2a;tcp\n   | Message-ID:\
    \ 6187CF9B-317A-41DA-BB6A-5E48A9C794EF\n   | Byte-Range: 1-25/25\n   | Success-Report:\
    \ yes\n   | Failure-Report: no\n   | Content-Type: text/plain\n   |\n   | What\
    \ man art thou ...?\n   | -------bf9m36d5$\n   Next, the recipient returns a report.\n\
    \   Example 25: Romeo Returns MSRP Receipt\n   | MSRP hx74g336 REPORT\n   | To-Path:\
    \ msrp://x2s.example.com:8763/lkjh37s2s20w2a;tcp\n   | From-Path: msrp://s2x.example.net:7313/jshA7weztas;tcp\n\
    \   | Message-ID: 6187CF9B-317A-41DA-BB6A-5E48A9C794EF\n   | Byte-Range: 1-106/106\n\
    \   | Status: 000 200 OK\n   | -------hx74g336$\n   Example 26: MSRP-to-XMPP Gateway\
    \ Maps Receipt to XMPP\n   | <message from='romeo@example.net'\n   |         \
    \ id='hx74g336'\n   |          to='juliet@example.com'>\n   |   <received xmlns='urn:xmpp:receipts'\
    \ id='87652491'/>\n   | </message>\n"
- title: 8.  Message Size
  contents:
  - "8.  Message Size\n   Unlike page-mode messaging [RFC3428] (which specifies that\
    \ the size\n   of a MESSAGE request is not allowed to exceed 1300 bytes), session-\n\
    \   mode messaging [RFC4975] can be used to send larger messages.  MSRP\n   includes\
    \ a chunking mechanism such that larger messages can be broken\n   up into multiple\
    \ MSRP SEND requests.  Because the MSRP gateway at an\n   XMPP service acts as\
    \ an MSRP endpoint, it is responsible for\n   receiving chunked messages and reconstructing\
    \ them into a single\n   message for delivery toward the XMPP recipient.  (Naturally,\n\
    \   implementations need to be careful about accepting very large\n   messages;\
    \ see Section 14.5 of [RFC4975].)\n   Although there is no hard limit on the size\
    \ of an XMPP stanza, in\n   practice, most XMPP services (at least on the public\
    \ Internet) are\n   configured with a maximum stanza size in order to help prevent\n\
    \   denial-of-service attacks.  As specified in Section 13.12 of\n   [RFC6120],\
    \ this maximum is not allowed to be less than 10,000 bytes.\n   The administrators\
    \ of an XMPP service need to ensure that the\n   associated MSRP gateway is configured\
    \ with the same or smaller\n   maximum MSRP message size as the maximum XMPP stanza\
    \ size; this\n   enables the gateway to return an appropriate value for the Session\n\
    \   Description Protocol (SDP) \"max-size\" attribute (see Section 8.6 of\n  \
    \ [RFC4975]) and to properly handle incoming messages larger than the\n   configured\
    \ limits.\n   If an MSRP-to-XMPP gateway implementation receives an MSRP message\n\
    \   that exceeds its configured limit as just described, it MUST return\n   an\
    \ MSRP 413 error (e.g., in response to the first SEND request whose\n   Byte-Range\
    \ header field indicates a byte total exceeding the limit).\n"
- title: 9.  Internationalization Considerations
  contents:
  - "9.  Internationalization Considerations\n   Relevant discussion of internationalized\
    \ text in messages can be\n   found in [RFC7572].\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   Detailed security considerations are given in\
    \ the following\n   documents:\n   o  For instant messaging protocols in general,\
    \ see [RFC2779]\n   o  For MSRP chat, see [RFC4975]; for when SIP is used to negotiate\n\
    \      MSRP sessions, see [RFC3261]\n   o  For XMPP-based instant messaging, see\
    \ [RFC6121] and also [RFC6120]\n   o  For SIP-XMPP interworking in general, see\
    \ [RFC7247]\n   o  For end-to-end encryption of instant messages, see [RFC7572]\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC2119]   Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119,\n\
    \               DOI 10.17487/RFC2119, March 1997,\n               <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3261]   Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n   \
    \            A., Peterson, J., Sparks, R., Handley, M., and E.\n             \
    \  Schooler, \"SIP: Session Initiation Protocol\", RFC 3261,\n               DOI\
    \ 10.17487/RFC3261, June 2002,\n               <http://www.rfc-editor.org/info/rfc3261>.\n\
    \   [RFC3994]   Schulzrinne, H., \"Indication of Message Composition for\n   \
    \            Instant Messaging\", RFC 3994, DOI 10.17487/RFC3994,\n          \
    \     January 2005, <http://www.rfc-editor.org/info/rfc3994>.\n   [RFC4975]  \
    \ Campbell, B., Ed., Mahy, R., Ed., and C. Jennings, Ed.,\n               \"The\
    \ Message Session Relay Protocol (MSRP)\", RFC 4975,\n               DOI 10.17487/RFC4975,\
    \ September 2007,\n               <http://www.rfc-editor.org/info/rfc4975>.\n\
    \   [RFC6120]   Saint-Andre, P., \"Extensible Messaging and Presence\n       \
    \        Protocol (XMPP): Core\", RFC 6120, DOI 10.17487/RFC6120,\n          \
    \     March 2011, <http://www.rfc-editor.org/info/rfc6120>.\n   [RFC6121]   Saint-Andre,\
    \ P., \"Extensible Messaging and Presence\n               Protocol (XMPP): Instant\
    \ Messaging and Presence\",\n               RFC 6121, DOI 10.17487/RFC6121, March\
    \ 2011,\n               <http://www.rfc-editor.org/info/rfc6121>.\n   [RFC7247]\
    \   Saint-Andre, P., Houri, A., and J. Hildebrand,\n               \"Interworking\
    \ between the Session Initiation Protocol\n               (SIP) and the Extensible\
    \ Messaging and Presence Protocol\n               (XMPP): Architecture, Addresses,\
    \ and Error Handling\",\n               RFC 7247, DOI 10.17487/RFC7247, May 2014,\n\
    \               <http://www.rfc-editor.org/info/rfc7247>.\n   [RFC7572]   Saint-Andre,\
    \ P., Houri, A., and J. Hildebrand,\n               \"Interworking between the\
    \ Session Initiation Protocol\n               (SIP) and the Extensible Messaging\
    \ and Presence Protocol\n               (XMPP): Instant Messaging\", RFC 7572,\n\
    \               DOI 10.17487/RFC7572, June 2015,\n               <http://www.rfc-editor.org/info/rfc7572>.\n\
    \   [XEP-0085] Saint-Andre, P. and D. Smith, \"Chat State Notifications\",\n \
    \             XSF XEP 0085, September 2009.\n   [XEP-0184] Saint-Andre, P. and\
    \ J. Hildebrand, \"Message Delivery\n              Receipts\", XSF XEP 0184, March\
    \ 2011.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [GROUPCHAT] Saint-Andre, P., Corretge, S.,\
    \ and S. Loreto,\n               \"Interworking between the Session Initiation\
    \ Protocol\n               (SIP) and the Extensible Messaging and Presence Protocol\n\
    \               (XMPP): Groupchat\", Work in Progress,\n               draft-ietf-stox-groupchat-11,\
    \ March 2015.\n   [RFC2779]   Day, M., Aggarwal, S., Mohr, G., and J. Vincent,\
    \ \"Instant\n               Messaging / Presence Protocol Requirements\", RFC\
    \ 2779,\n               DOI 10.17487/RFC2779, February 2000,\n               <http://www.rfc-editor.org/info/rfc2779>.\n\
    \   [RFC3428]   Campbell, B., Ed., Rosenberg, J., Schulzrinne, H.,\n         \
    \      Huitema, C., and D. Gurle, \"Session Initiation Protocol\n            \
    \   (SIP) Extension for Instant Messaging\", RFC 3428,\n               DOI 10.17487/RFC3428,\
    \ December 2002,\n               <http://www.rfc-editor.org/info/rfc3428>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Special thanks to Eddy Gavita and Nazin Hossain for coauthoring\
    \ an\n   early draft version of this document.\n   Thanks to Mary Barnes, Ben\
    \ Campbell, Dave Crocker, Adrian Georgescu,\n   Philipp Hancke, Saul Ibarra Corretge,\
    \ Tory Patnoe, and Matt Ryan for\n   their feedback.\n   Stephen Farrell, Brian\
    \ Haberman, Joel Jaeggli, Barry Leiba, Kathleen\n   Moriarty, and Pete Resnick\
    \ provided helpful input during IESG review.\n   The authors gratefully acknowledge\
    \ the assistance of Markus Isomaki\n   and Yana Stamcheva as the working group\
    \ chairs and Gonzalo Camarillo\n   and Alissa Cooper as the sponsoring Area Directors.\n\
    \   Peter Saint-Andre wishes to acknowledge Cisco Systems, Inc., for\n   employing\
    \ him during his work on earlier draft versions of this\n   document.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Peter Saint-Andre\n   &yet\n   EMail: peter@andyet.com\n\
    \   URI:   https://andyet.com/\n   Salvatore Loreto\n   Ericsson\n   Hirsalantie\
    \ 11\n   Jorvas  02420\n   Finland\n   EMail: Salvatore.Loreto@ericsson.com\n"
