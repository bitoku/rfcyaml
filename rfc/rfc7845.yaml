- title: __initial_text__
  contents:
  - '               Ogg Encapsulation for the Opus Audio Codec

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines the Ogg encapsulation for the Opus interactive\n\
    \   speech and audio codec.  This allows data encoded in the Opus format\n   to\
    \ be stored in an Ogg logical bitstream.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7845.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   3\n   3.  Packet Organization . . . . . . . . . . . . . . . . . .\
    \ . . .   4\n   4.  Granule Position  . . . . . . . . . . . . . . . . . . . .\
    \ . .   6\n     4.1.  Repairing Gaps in Real-Time Streams . . . . . . . . . .\
    \ .   7\n     4.2.  Pre-skip  . . . . . . . . . . . . . . . . . . . . . . . .\
    \   9\n     4.3.  PCM Sample Position . . . . . . . . . . . . . . . . . . .  \
    \ 9\n     4.4.  End Trimming  . . . . . . . . . . . . . . . . . . . . . .  10\n\
    \     4.5.  Restrictions on the Initial Granule Position  . . . . . .  10\n  \
    \   4.6.  Seeking and Pre-roll  . . . . . . . . . . . . . . . . . .  11\n   5.\
    \  Header Packets  . . . . . . . . . . . . . . . . . . . . . . .  12\n     5.1.\
    \  Identification Header . . . . . . . . . . . . . . . . . .  12\n       5.1.1.\
    \  Channel Mapping . . . . . . . . . . . . . . . . . . .  16\n     5.2.  Comment\
    \ Header  . . . . . . . . . . . . . . . . . . . . .  22\n       5.2.1.  Tag Definitions\
    \ . . . . . . . . . . . . . . . . . . .  25\n   6.  Packet Size Limits  . . .\
    \ . . . . . . . . . . . . . . . . . .  26\n   7.  Encoder Guidelines  . . . .\
    \ . . . . . . . . . . . . . . . . .  27\n     7.1.  LPC Extrapolation . . . .\
    \ . . . . . . . . . . . . . . . .  28\n     7.2.  Continuous Chaining . . . .\
    \ . . . . . . . . . . . . . . .  28\n   8.  Security Considerations . . . . .\
    \ . . . . . . . . . . . . . .  29\n   9.  Content Type  . . . . . . . . . . .\
    \ . . . . . . . . . . . . .  30\n   10. IANA Considerations . . . . . . . . .\
    \ . . . . . . . . . . . .  31\n   11. References  . . . . . . . . . . . . . .\
    \ . . . . . . . . . . .  32\n     11.1.  Normative References . . . . . . . .\
    \ . . . . . . . . . .  32\n     11.2.  Informative References . . . . . . . .\
    \ . . . . . . . . .  33\n   Acknowledgments . . . . . . . . . . . . . . . . .\
    \ . . . . . . . .  34\n   Authors' Addresses  . . . . . . . . . . . . . . . .\
    \ . . . . . . .  35\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The IETF Opus codec is a low-latency audio codec optimized\
    \ for both\n   voice and general-purpose audio.  See [RFC6716] for technical\n\
    \   details.  This document defines the encapsulation of Opus in a\n   continuous,\
    \ logical Ogg bitstream [RFC3533].  Ogg encapsulation\n   provides Opus with a\
    \ long-term storage format supporting all of the\n   essential features, including\
    \ metadata, fast and accurate seeking,\n   corruption detection, recapture after\
    \ errors, low overhead, and the\n   ability to multiplex Opus with other codecs\
    \ (including video) with\n   minimal buffering.  It also provides a live streamable\
    \ format capable\n   of delivery over a reliable stream-oriented transport, without\n\
    \   requiring all the data (or even the total length of the data)\n   up-front,\
    \ in a form that is identical to the on-disk storage format.\n   Ogg bitstreams\
    \ are made up of a series of \"pages\", each of which\n   contains data from one\
    \ or more \"packets\".  Pages are the fundamental\n   unit of multiplexing in\
    \ an Ogg stream.  Each page is associated with\n   a particular logical stream\
    \ and contains a capture pattern and\n   checksum, flags to mark the beginning\
    \ and end of the logical stream,\n   and a \"granule position\" that represents\
    \ an absolute position in the\n   stream, to aid seeking.  A single page can contain\
    \ up to 65,025\n   octets of packet data from up to 255 different packets.  Packets\
    \ can\n   be split arbitrarily across pages and continued from one page to the\n\
    \   next (allowing packets much larger than would fit on a single page).\n   Each\
    \ page contains \"lacing values\" that indicate how the data is\n   partitioned\
    \ into packets, allowing a demultiplexer (demuxer) to\n   recover the packet boundaries\
    \ without examining the encoded data.  A\n   packet is said to \"complete\" on\
    \ a page when the page contains the\n   final lacing value corresponding to that\
    \ packet.\n   This encapsulation defines the contents of the packet data, including\n\
    \   the necessary headers, the organization of those packets into a\n   logical\
    \ stream, and the interpretation of the codec-specific granule\n   position field.\
    \  It does not attempt to describe or specify the\n   existing Ogg container format.\
    \  Readers unfamiliar with the basic\n   concepts mentioned above are encouraged\
    \ to review the details in\n   [RFC3533].\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\"\
    , \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described\
    \ in\n   [RFC2119].\n"
- title: 3.  Packet Organization
  contents:
  - "3.  Packet Organization\n   An Ogg Opus stream is organized as follows (see Figure\
    \ 1 for an\n   example).\n        Page 0         Pages 1 ... n        Pages (n+1)\
    \ ...\n     +------------+ +---+ +---+ ... +---+ +-----------+ +---------+ +--\n\
    \     |            | |   | |   |     |   | |           | |         | |\n     |+----------+|\
    \ |+-----------------+| |+-------------------+ +-----\n     |||ID Header|| ||\
    \  Comment Header || ||Audio Data Packet 1| | ...\n     |+----------+| |+-----------------+|\
    \ |+-------------------+ +-----\n     |            | |   | |   |     |   | | \
    \          | |         | |\n     +------------+ +---+ +---+ ... +---+ +-----------+\
    \ +---------+ +--\n     ^      ^                           ^\n     |      |  \
    \                         |\n     |      |                           Mandatory\
    \ Page Break\n     |      |\n     |      ID header is contained on a single page\n\
    \     |\n     'Beginning Of Stream'\n    Figure 1: Example Packet Organization\
    \ for a Logical Ogg Opus Stream\n   There are two mandatory header packets.  The\
    \ first packet in the\n   logical Ogg bitstream MUST contain the identification\
    \ (ID) header,\n   which uniquely identifies a stream as Opus audio.  The format\
    \ of this\n   header is defined in Section 5.1.  It is placed alone (without any\n\
    \   other packet data) on the first page of the logical Ogg bitstream and\n  \
    \ completes on that page.  This page has its 'beginning of stream' flag\n   set.\n\
    \   The second packet in the logical Ogg bitstream MUST contain the\n   comment\
    \ header, which contains user-supplied metadata.  The format of\n   this header\
    \ is defined in Section 5.2.  It MAY span multiple pages,\n   beginning on the\
    \ second page of the logical stream.  However many\n   pages it spans, the comment\
    \ header packet MUST finish the page on\n   which it completes.\n   All subsequent\
    \ pages are audio data pages, and the Ogg packets they\n   contain are audio data\
    \ packets.  Each audio data packet contains one\n   Opus packet for each of N\
    \ different streams, where N is typically one\n   for mono or stereo, but MAY\
    \ be greater than one for multichannel\n   audio.  The value N is specified in\
    \ the ID header (see\n   Section 5.1.1), and is fixed over the entire length of\
    \ the logical\n   Ogg bitstream.\n   The first (N - 1) Opus packets, if any, are\
    \ packed one after another\n   into the Ogg packet, using the self-delimiting\
    \ framing from\n   Appendix B of [RFC6716].  The remaining Opus packet is packed\
    \ at the\n   end of the Ogg packet using the regular, undelimited framing from\n\
    \   Section 3 of [RFC6716].  All of the Opus packets in a single Ogg\n   packet\
    \ MUST be constrained to have the same duration.  An\n   implementation of this\
    \ specification SHOULD treat any Opus packet\n   whose duration is different from\
    \ that of the first Opus packet in an\n   Ogg packet as if it were a malformed\
    \ Opus packet with an invalid\n   Table Of Contents (TOC) sequence.\n   The TOC\
    \ sequence at the beginning of each Opus packet indicates the\n   coding mode,\
    \ audio bandwidth, channel count, duration (frame size),\n   and number of frames\
    \ per packet, as described in Section 3.1\n   of [RFC6716].  The coding mode is\
    \ one of SILK, Hybrid, or Constrained\n   Energy Lapped Transform (CELT).  The\
    \ combination of coding mode,\n   audio bandwidth, and frame size is referred\
    \ to as the configuration\n   of an Opus packet.\n   Packets are placed into Ogg\
    \ pages in order until the end of stream.\n   Audio data packets might span page\
    \ boundaries.  The first audio data\n   page could have the 'continued packet'\
    \ flag set (indicating the first\n   audio data packet is continued from a previous\
    \ page) if, for example,\n   it was a live stream joined mid-broadcast, with the\
    \ headers pasted on\n   the front.  If a page has the 'continued packet' flag\
    \ set and one of\n   the following conditions is also true:\n   o  the previous\
    \ page with packet data does not end in a continued\n      packet (does not end\
    \ with a lacing value of 255) OR\n   o  the page sequence numbers are not consecutive,\n\
    \   then a demuxer MUST NOT attempt to decode the data for the first\n   packet\
    \ on the page unless the demuxer has some special knowledge that\n   would allow\
    \ it to interpret this data despite the missing pieces.  An\n   implementation\
    \ MUST treat a zero-octet audio data packet as if it\n   were a malformed Opus\
    \ packet as described in Section 3.4\n   of [RFC6716].\n   A logical stream ends\
    \ with a page with the 'end of stream' flag set,\n   but implementations need\
    \ to be prepared to deal with truncated\n   streams that do not have a page marked\
    \ 'end of stream'.  There is no\n   reason for the final packet on the last page\
    \ to be a continued\n   packet, i.e., for the final lacing value to be 255.  However,\n\
    \   demuxers might encounter such streams, possibly as the result of a\n   transfer\
    \ that did not complete or of corruption.  If a packet\n   continues onto a subsequent\
    \ page (i.e., when the page ends with a\n   lacing value of 255) and one of the\
    \ following conditions is also\n   true:\n   o  the next page with packet data\
    \ does not have the 'continued\n      packet' flag set, OR\n   o  there is no\
    \ next page with packet data, OR\n   o  the page sequence numbers are not consecutive,\n\
    \   then a demuxer MUST NOT attempt to decode the data from that packet\n   unless\
    \ the demuxer has some special knowledge that would allow it to\n   interpret\
    \ this data despite the missing pieces.  There MUST NOT be\n   any more pages\
    \ in an Opus logical bitstream after a page marked 'end\n   of stream'.\n"
- title: 4.  Granule Position
  contents:
  - "4.  Granule Position\n   The granule position MUST be zero for the ID header\
    \ page and the page\n   where the comment header completes.  That is, the first\
    \ page in the\n   logical stream and the last header page before the first audio\
    \ data\n   page both have a granule position of zero.\n   The granule position\
    \ of an audio data page encodes the total number\n   of PCM samples in the stream\
    \ up to and including the last fully\n   decodable sample from the last packet\
    \ completed on that page.  The\n   granule position of the first audio data page\
    \ will usually be larger\n   than zero, as described in Section 4.5.\n   A page\
    \ that is entirely spanned by a single packet (that completes on\n   a subsequent\
    \ page) has no granule position, and the granule position\n   field is set to\
    \ the special value '-1' in two's complement.\n   The granule position of an audio\
    \ data page is in units of PCM audio\n   samples at a fixed rate of 48 kHz (per\
    \ channel; a stereo stream's\n   granule position does not increment at twice\
    \ the speed of a mono\n   stream).  It is possible to run an Opus decoder at other\
    \ sampling\n   rates, but all Opus packets encode samples at a sampling rate that\n\
    \   evenly divides 48 kHz.  Therefore, the value in the granule position\n   field\
    \ always counts samples assuming a 48 kHz decoding rate, and the\n   rest of this\
    \ specification makes the same assumption.\n   The duration of an Opus packet\
    \ as defined in [RFC6716] can be any\n   multiple of 2.5 ms, up to a maximum of\
    \ 120 ms.  This duration is\n   encoded in the TOC sequence at the beginning of\
    \ each packet.  The\n   number of samples returned by a decoder corresponds to\
    \ this duration\n   exactly, even for the first few packets.  For example, a 20\
    \ ms packet\n   fed to a decoder running at 48 kHz will always return 960 samples.\
    \  A\n   demuxer can parse the TOC sequence at the beginning of each Ogg\n   packet\
    \ to work backwards or forwards from a packet with a known\n   granule position\
    \ (i.e., the last packet completed on some page) in\n   order to assign granule\
    \ positions to every packet, or even every\n   individual sample.  The one exception\
    \ is the last page in the stream,\n   as described below.\n   All other pages\
    \ with completed packets after the first MUST have a\n   granule position equal\
    \ to the number of samples contained in packets\n   that complete on that page\
    \ plus the granule position of the most\n   recent page with completed packets.\
    \  This guarantees that a demuxer\n   can assign individual packets the same granule\
    \ position when working\n   forwards as when working backwards.  For this to work,\
    \ there cannot\n   be any gaps.\n"
- title: 4.1.  Repairing Gaps in Real-Time Streams
  contents:
  - "4.1.  Repairing Gaps in Real-Time Streams\n   In order to support capturing a\
    \ real-time stream that has lost or not\n   transmitted packets, a multiplexer\
    \ (muxer) SHOULD emit packets that\n   explicitly request the use of Packet Loss\
    \ Concealment (PLC) in place\n   of the missing packets.  Implementations that\
    \ fail to do so still\n   MUST NOT increment the granule position for a page by\
    \ anything other\n   than the number of samples contained in packets that actually\n\
    \   complete on that page.\n   Only gaps that are a multiple of 2.5 ms are repairable,\
    \ as these are\n   the only durations that can be created by packet loss or\n\
    \   discontinuous transmission.  Muxers need not handle other gap sizes.\n   Creating\
    \ the necessary packets involves synthesizing a TOC byte\n   (defined in Section\
    \ 3.1 of [RFC6716]) -- and whatever additional\n   internal framing is needed\
    \ -- to indicate the packet duration for\n   each stream.  The actual length of\
    \ each missing Opus frame inside the\n   packet is zero bytes, as defined in Section\
    \ 3.2.1 of [RFC6716].\n   Zero-byte frames MAY be packed into packets using any\
    \ of codes 0, 1,\n   2, or 3.  When successive frames have the same configuration,\
    \ the\n   higher code packings reduce overhead.  Likewise, if the TOC\n   configuration\
    \ matches, the muxer MAY further combine the empty frames\n   with previous or\
    \ subsequent nonzero-length frames (using code 2 or\n   variable bitrate (VBR)\
    \ code 3).\n   [RFC6716] does not impose any requirements on the PLC, but this\n\
    \   section outlines choices that are expected to have a positive\n   influence\
    \ on most PLC implementations, including the reference\n   implementation.  Synthesized\
    \ TOC sequences SHOULD maintain the same\n   mode, audio bandwidth, channel count,\
    \ and frame size as the previous\n   packet (if any).  This is the simplest and\
    \ usually the most well-\n   tested case for the PLC to handle and it covers all\
    \ losses that do\n   not include a configuration switch, as defined in Section\
    \ 4.5\n   of [RFC6716].\n   When a previous packet is available, keeping the audio\
    \ bandwidth and\n   channel count the same allows the PLC to provide maximum continuity\n\
    \   in the concealment data it generates.  However, if the size of the\n   gap\
    \ is not a multiple of the most recent frame size, then the frame\n   size will\
    \ have to change for at least some frames.  Such changes\n   SHOULD be delayed\
    \ as long as possible to simplify things for PLC\n   implementations.\n   As an\
    \ example, a 95 ms gap could be encoded as nineteen 5 ms frames\n   in two bytes\
    \ with a single constant bitrate (CBR) code 3 packet.  If\n   the previous frame\
    \ size was 20 ms, using four 20 ms frames followed\n   by three 5 ms frames requires\
    \ 4 bytes (plus an extra byte of Ogg\n   lacing overhead), but allows the PLC\
    \ to use its well-tested steady\n   state behavior for as long as possible.  The\
    \ total bitrate of the\n   latter approach, including Ogg overhead, is about 0.4\
    \ kbps, so the\n   impact on file size is minimal.\n   Changing modes is discouraged,\
    \ since this causes some decoder\n   implementations to reset their PLC state.\
    \  However, SILK and Hybrid\n   mode frames cannot fill gaps that are not a multiple\
    \ of 10 ms.  If\n   switching to CELT mode is needed to match the gap size, a\
    \ muxer\n   SHOULD do so at the end of the gap to allow the PLC to function for\n\
    \   as long as possible.\n   In the example above, if the previous frame was a\
    \ 20 ms SILK mode\n   frame, the better solution is to synthesize a packet describing\
    \ four\n   20 ms SILK frames, followed by a packet with a single 10 ms SILK\n\
    \   frame, and finally a packet with a 5 ms CELT frame, to fill the 95 ms\n  \
    \ gap.  This also requires four bytes to describe the synthesized\n   packet data\
    \ (two bytes for a CBR code 3 and one byte each for two\n   code 0 packets) but\
    \ three bytes of Ogg lacing overhead are needed to\n   mark the packet boundaries.\
    \  At 0.6 kbps, this is still a minimal\n   bitrate impact over a naive, low-quality\
    \ solution.\n   Since medium-band audio is an option only in the SILK mode, wideband\n\
    \   frames SHOULD be generated if switching from that configuration to\n   CELT\
    \ mode, to ensure that any PLC implementation that does try to\n   migrate state\
    \ between the modes will be able to preserve all of the\n   available audio bandwidth.\n"
- title: 4.2.  Pre-skip
  contents:
  - "4.2.  Pre-skip\n   There is some amount of latency introduced during the decoding\n\
    \   process, to allow for overlap in the CELT mode, stereo mixing in the\n   SILK\
    \ mode, and resampling.  The encoder might have introduced\n   additional latency\
    \ through its own resampling and analysis (though\n   the exact amount is not\
    \ specified).  Therefore, the first few samples\n   produced by the decoder do\
    \ not correspond to real input audio, but\n   are instead composed of padding\
    \ inserted by the encoder to compensate\n   for this latency.  These samples need\
    \ to be stored and decoded, as\n   Opus is an asymptotically convergent predictive\
    \ codec, meaning the\n   decoded contents of each frame depend on the recent history\
    \ of\n   decoder inputs.  However, a player will want to skip these samples\n\
    \   after decoding them.\n   A 'pre-skip' field in the ID header (see Section\
    \ 5.1) signals the\n   number of samples that SHOULD be skipped (decoded but discarded)\
    \ at\n   the beginning of the stream, though some specific applications might\n\
    \   have a reason for looking at that data.  This amount need not be a\n   multiple\
    \ of 2.5 ms, MAY be smaller than a single packet, or MAY span\n   the contents\
    \ of several packets.  These samples are not valid audio.\n   For example, if\
    \ the first Opus frame uses the CELT mode, it will\n   always produce 120 samples\
    \ of windowed overlap-add data.  However,\n   the overlap data is initially all\
    \ zeros (since there is no prior\n   frame), meaning this cannot, in general,\
    \ accurately represent the\n   original audio.  The SILK mode requires additional\
    \ delay to account\n   for its analysis and resampling latency.  The encoder delays\
    \ the\n   original audio to avoid this problem.\n   The 'pre-skip' field MAY also\
    \ be used to perform sample-accurate\n   cropping of already encoded streams.\
    \  In this case, a value of at\n   least 3840 samples (80 ms) provides sufficient\
    \ history to the decoder\n   that it will have converged before the stream's output\
    \ begins.\n"
- title: 4.3.  PCM Sample Position
  contents:
  - "4.3.  PCM Sample Position\n   The PCM sample position is determined from the\
    \ granule position using\n   the following formula:\n          'PCM sample position'\
    \ = 'granule position' - 'pre-skip'\n   For example, if the granule position of\
    \ the first audio data page is\n   59,971, and the pre-skip is 11,971, then the\
    \ PCM sample position of\n   the last decoded sample from that page is 48,000.\n\
    \   This can be converted into a playback time using the following\n   formula:\n\
    \                                    'PCM sample position'\n                 \
    \ 'playback time' = ---------------------\n                                  \
    \         48000.0\n   The initial PCM sample position before any samples are played\
    \ is\n   normally '0'.  In this case, the PCM sample position of the first\n \
    \  audio sample to be played starts at '1', because it marks the time on\n   the\
    \ clock _after_ that sample has been played, and a stream that is\n   exactly\
    \ one second long has a final PCM sample position of '48000',\n   as in the example\
    \ here.\n   Vorbis streams use a granule position smaller than the number of\n\
    \   audio samples contained in the first audio data page to indicate that\n  \
    \ some of those samples are trimmed from the output (see\n   [VORBIS-TRIM]). \
    \ However, to do so, Vorbis requires that the first\n   audio data page contains\
    \ exactly two packets, in order to allow the\n   decoder to perform PCM position\
    \ adjustments before needing to return\n   any PCM data.  Opus uses the pre-skip\
    \ mechanism for this purpose\n   instead, since the encoder might introduce more\
    \ than a single\n   packet's worth of latency, and since very large packets in\
    \ streams\n   with a very large number of channels might not fit on a single page.\n"
- title: 4.4.  End Trimming
  contents:
  - "4.4.  End Trimming\n   The page with the 'end of stream' flag set MAY have a\
    \ granule\n   position that indicates the page contains less audio data than would\n\
    \   normally be returned by decoding up through the final packet.  This\n   is\
    \ used to end the stream somewhere other than an even frame\n   boundary.  The\
    \ granule position of the most recent audio data page\n   with completed packets\
    \ is used to make this determination, or '0' is\n   used if there were no previous\
    \ audio data pages with a completed\n   packet.  The difference between these\
    \ granule positions indicates how\n   many samples to keep after decoding the\
    \ packets that completed on the\n   final page.  The remaining samples are discarded.\
    \  The number of\n   discarded samples SHOULD be no larger than the number decoded\
    \ from\n   the last packet.\n"
- title: 4.5.  Restrictions on the Initial Granule Position
  contents:
  - "4.5.  Restrictions on the Initial Granule Position\n   The granule position of\
    \ the first audio data page with a completed\n   packet MAY be larger than the\
    \ number of samples contained in packets\n   that complete on that page.  However,\
    \ it MUST NOT be smaller, unless\n   that page has the 'end of stream' flag set.\
    \  Allowing a granule\n   position larger than the number of samples allows the\
    \ beginning of a\n   stream to be cropped or a live stream to be joined without\
    \ rewriting\n   the granule position of all the remaining pages.  This means that\
    \ the\n   PCM sample position just before the first sample to be played MAY be\n\
    \   larger than '0'.  Synchronization when multiplexing with other\n   logical\
    \ streams still uses the PCM sample position relative to '0' to\n   compute sample\
    \ times.  This does not affect the behavior of pre-skip:\n   exactly 'pre-skip'\
    \ samples SHOULD be skipped from the beginning of\n   the decoded output, even\
    \ if the initial PCM sample position is\n   greater than zero.\n   On the other\
    \ hand, a granule position that is smaller than the number\n   of decoded samples\
    \ prevents a demuxer from working backwards to\n   assign each packet or each\
    \ individual sample a valid granule\n   position, since granule positions are\
    \ non-negative.  An\n   implementation MUST treat any stream as invalid if the\
    \ granule\n   position is smaller than the number of samples contained in packets\n\
    \   that complete on the first audio data page with a completed packet,\n   unless\
    \ that page has the 'end of stream' flag set.  It MAY defer this\n   action until\
    \ it decodes the last packet completed on that page.\n   If that page has the\
    \ 'end of stream' flag set, a demuxer MUST treat\n   any stream as invalid if\
    \ its granule position is smaller than the\n   'pre-skip' amount.  This would\
    \ indicate that there are more samples\n   to be skipped from the initial decoded\
    \ output than exist in the\n   stream.  If the granule position is smaller than\
    \ the number of\n   decoded samples produced by the packets that complete on that\
    \ page,\n   then a demuxer MUST use an initial granule position of '0', and can\n\
    \   work forwards from '0' to timestamp individual packets.  If the\n   granule\
    \ position is larger than the number of decoded samples\n   available, then the\
    \ demuxer MUST still work backwards as described\n   above, even if the 'end of\
    \ stream' flag is set, to determine the\n   initial granule position, and thus\
    \ the initial PCM sample position.\n   Both of these will be greater than '0'\
    \ in this case.\n"
- title: 4.6.  Seeking and Pre-roll
  contents:
  - "4.6.  Seeking and Pre-roll\n   Seeking in Ogg files is best performed using a\
    \ bisection search for a\n   page whose granule position corresponds to a PCM\
    \ position at or\n   before the seek target.  With appropriately weighted bisection,\n\
    \   accurate seeking can be performed in just one or two bisections on\n   average,\
    \ even in multi-gigabyte files.  See [SEEKING] for an example\n   of general implementation\
    \ guidance.\n   When seeking within an Ogg Opus stream, an implementation SHOULD\n\
    \   start decoding (and discarding the output) at least 3840 samples\n   (80 ms)\
    \ prior to the seek target in order to ensure that the output\n   audio is correct\
    \ by the time it reaches the seek target.  This\n   \"pre-roll\" is separate from,\
    \ and unrelated to, the pre-skip used at\n   the beginning of the stream.  If\
    \ the point 80 ms prior to the seek\n   target comes before the initial PCM sample\
    \ position, an\n   implementation SHOULD start decoding from the beginning of\
    \ the\n   stream, applying pre-skip as normal, regardless of whether the pre-\n\
    \   skip is larger or smaller than 80 ms, and then continue to discard\n   samples\
    \ to reach the seek target (if any).\n"
- title: 5.  Header Packets
  contents:
  - "5.  Header Packets\n   An Ogg Opus logical stream contains exactly two mandatory\
    \ header\n   packets: an identification header and a comment header.\n"
- title: 5.1.  Identification Header
  contents:
  - "5.1.  Identification Header\n      0                   1                   2\
    \                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |      'O'      |      'p'      |      'u'      |      's'      |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \    'H'      |      'e'      |      'a'      |      'd'      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |  Version = 1  | Channel Count |           Pre-skip            |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                   Input Sample Rate (Hz)                    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |   Output Gain (Q7.8 in dB)    | Mapping Family|               |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+               :\n     |  \
    \                                                             |\n     :      \
    \         Optional Channel Mapping Table...               :\n     |          \
    \                                                     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                        Figure 2: ID Header Packet\n   The fields in the identification\
    \ (ID) header have the following\n   meaning:\n   1.  Magic Signature:\n     \
    \  This is an 8-octet (64-bit) field that allows codec\n       identification\
    \ and is human readable.  It contains, in order, the\n       magic numbers:\n\
    \          0x4F 'O'\n          0x70 'p'\n          0x75 'u'\n          0x73 's'\n\
    \          0x48 'H'\n          0x65 'e'\n          0x61 'a'\n          0x64 'd'\n\
    \       Starting with \"Op\" helps distinguish it from audio data packets,\n \
    \      as this is an invalid TOC sequence.\n   2.  Version (8 bits, unsigned):\n\
    \       The version number MUST always be '1' for this version of the\n      \
    \ encapsulation specification.  Implementations SHOULD treat\n       streams where\
    \ the upper four bits of the version number match\n       that of a recognized\
    \ specification as backwards compatible with\n       that specification.  That\
    \ is, the version number can be split\n       into \"major\" and \"minor\" version\
    \ sub-fields, with changes to the\n       minor sub-field (in the lower four bits)\
    \ signaling compatible\n       changes.  For example, an implementation of this\
    \ specification\n       SHOULD accept any stream with a version number of '15'\
    \ or less,\n       and SHOULD assume any stream with a version number '16' or\n\
    \       greater is incompatible.  The initial version '1' was chosen to\n    \
    \   keep implementations from relying on this octet as a null\n       terminator\
    \ for the \"OpusHead\" string.\n   3.  Output Channel Count 'C' (8 bits, unsigned):\n\
    \       This is the number of output channels.  This might be different\n    \
    \   than the number of encoded channels, which can change on a\n       packet-by-packet\
    \ basis.  This value MUST NOT be zero.  The\n       maximum allowable value depends\
    \ on the channel mapping family,\n       and might be as large as 255.  See Section\
    \ 5.1.1 for details.\n   4.  Pre-skip (16 bits, unsigned, little endian):\n  \
    \     This is the number of samples (at 48 kHz) to discard from the\n       decoder\
    \ output when starting playback, and also the number to\n       subtract from\
    \ a page's granule position to calculate its PCM\n       sample position.  When\
    \ cropping the beginning of existing Ogg\n       Opus streams, a pre-skip of at\
    \ least 3,840 samples (80 ms) is\n       RECOMMENDED to ensure complete convergence\
    \ in the decoder.\n   5.  Input Sample Rate (32 bits, unsigned, little endian):\n\
    \       This is the sample rate of the original input (before encoding),\n   \
    \    in Hz.  This field is _not_ the sample rate to use for playback\n       of\
    \ the encoded data.\n       Opus can switch between internal audio bandwidths\
    \ of 4, 6, 8, 12,\n       and 20 kHz.  Each packet in the stream can have a different\
    \ audio\n       bandwidth.  Regardless of the audio bandwidth, the reference\n\
    \       decoder supports decoding any stream at a sample rate of 8, 12,\n    \
    \   16, 24, or 48 kHz.  The original sample rate of the audio passed\n       to\
    \ the encoder is not preserved by the lossy compression.\n       An Ogg Opus player\
    \ SHOULD select the playback sample rate\n       according to the following procedure:\n\
    \       1.  If the hardware supports 48 kHz playback, decode at 48 kHz.\n    \
    \   2.  Otherwise, if the hardware's highest available sample rate is\n      \
    \     a supported rate, decode at this sample rate.\n       3.  Otherwise, if\
    \ the hardware's highest available sample rate is\n           less than 48 kHz,\
    \ decode at the next higher Opus supported\n           rate above the highest\
    \ available hardware rate and resample.\n       4.  Otherwise, decode at 48 kHz\
    \ and resample.\n       However, the 'input sample rate' field allows the muxer\
    \ to pass\n       the sample rate of the original input stream as metadata.  This\n\
    \       is useful when the user requires the output sample rate to match\n   \
    \    the input sample rate.  For example, when not playing the output,\n     \
    \  an implementation writing PCM format samples to disk might choose\n       to\
    \ resample the audio back to the original input sample rate to\n       reduce\
    \ surprise to the user, who might reasonably expect to get\n       back a file\
    \ with the same sample rate.\n       A value of zero indicates \"unspecified\"\
    .  Muxers SHOULD write the\n       actual input sample rate or zero, but implementations\
    \ that do\n       something with this field SHOULD take care to behave sanely\
    \ if\n       given crazy values (e.g., do not actually upsample the output to\n\
    \       10 MHz if requested).  Implementations SHOULD support input\n       sample\
    \ rates between 8 kHz and 192 kHz (inclusive).  Rates\n       outside this range\
    \ MAY be ignored by falling back to the default\n       rate of 48 kHz instead.\n\
    \   6.  Output Gain (16 bits, signed, little endian):\n       This is a gain to\
    \ be applied when decoding.  It is 20*log10 of\n       the factor by which to\
    \ scale the decoder output to achieve the\n       desired playback volume, stored\
    \ in a 16-bit, signed, two's\n       complement fixed-point value with 8 fractional\
    \ bits (i.e.,\n       Q7.8 [Q-NOTATION]).\n       To apply the gain, an implementation\
    \ could use the following:\n                 sample *= pow(10, output_gain/(20.0*256))\n\
    \       where 'output_gain' is the raw 16-bit value from the header.\n       Players\
    \ and media frameworks SHOULD apply it by default.  If a\n       player chooses\
    \ to apply any volume adjustment or gain\n       modification, such as the R128_TRACK_GAIN\
    \ (see Section 5.2), the\n       adjustment MUST be applied in addition to this\
    \ output gain in\n       order to achieve playback at the normalized volume.\n\
    \       A muxer SHOULD set this field to zero, and instead apply any gain\n  \
    \     prior to encoding, when this is possible and does not conflict\n       with\
    \ the user's wishes.  A nonzero output gain indicates the gain\n       was adjusted\
    \ after encoding, or that a user wished to adjust the\n       gain for playback\
    \ while preserving the ability to recover the\n       original signal amplitude.\n\
    \       Although the output gain has enormous range (+/- 128 dB, enough\n    \
    \   to amplify inaudible sounds to the threshold of physical pain),\n       most\
    \ applications can only reasonably use a small portion of this\n       range around\
    \ zero.  The large range serves in part to ensure that\n       gain can always\
    \ be losslessly transferred between OpusHead and\n       R128 gain tags (see below)\
    \ without saturating.\n   7.  Channel Mapping Family (8 bits, unsigned):\n   \
    \    This octet indicates the order and semantic meaning of the output\n     \
    \  channels.\n       Each currently specified value of this octet indicates a\
    \ mapping\n       family, which defines a set of allowed channel counts, and the\n\
    \       ordered set of channel names for each allowed channel count.  The\n  \
    \     details are described in Section 5.1.1.\n   8.  Channel Mapping Table:\n\
    \       This table defines the mapping from encoded streams to output\n      \
    \ channels.  Its contents are specified in Section 5.1.1.\n   All fields in the\
    \ ID headers are REQUIRED, except for 'channel\n   mapping table', which MUST\
    \ be omitted when the channel mapping family\n   is 0, but is REQUIRED otherwise.\
    \  Implementations SHOULD treat a\n   stream as invalid if it contains an ID header\
    \ that does not have\n   enough data for these fields, even if it contain a valid\
    \ 'magic\n   signature'.  Future versions of this specification, even backwards-\n\
    \   compatible versions, might include additional fields in the ID\n   header.\
    \  If an ID header has a compatible major version, but a larger\n   minor version,\
    \ an implementation MUST NOT treat it as invalid for\n   containing additional\
    \ data not specified here, provided it still\n   completes on the first page.\n"
- title: 5.1.1.  Channel Mapping
  contents:
  - "5.1.1.  Channel Mapping\n   An Ogg Opus stream allows mapping one number of Opus\
    \ streams (N) to a\n   possibly larger number of decoded channels (M + N) to yet\
    \ another\n   number of output channels (C), which might be larger or smaller\
    \ than\n   the number of decoded channels.  The order and meaning of these\n \
    \  channels are defined by a channel mapping, which consists of the\n   'channel\
    \ mapping family' octet and, for channel mapping families\n   other than family\
    \ 0, a 'channel mapping table', as illustrated\n   in Figure 3.\n      0     \
    \              1                   2                   3\n      0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n                        \
    \                             +-+-+-+-+-+-+-+-+\n                            \
    \                         | Stream Count  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     | Coupled Count |              Channel Mapping...               :\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        \
    \              Figure 3: Channel Mapping Table\n   The fields in the channel mapping\
    \ table have the following meaning:\n   1.  Stream Count 'N' (8 bits, unsigned):\n\
    \       This is the total number of streams encoded in each Ogg packet.\n    \
    \   This value is necessary to correctly parse the packed Opus\n       packets\
    \ inside an Ogg packet, as described in Section 3.  This\n       value MUST NOT\
    \ be zero, as without at least one Opus packet with\n       a valid TOC sequence,\
    \ a demuxer cannot recover the duration of an\n       Ogg packet.\n       For\
    \ channel mapping family 0, this value defaults to 1, and is\n       not coded.\n\
    \   2.  Coupled Stream Count 'M' (8 bits, unsigned):\n       This is the number\
    \ of streams whose decoders are to be configured\n       to produce two channels\
    \ (stereo).  This MUST be no larger than\n       the total number of streams,\
    \ N.\n       Each packet in an Opus stream has an internal channel count of 1\n\
    \       or 2, which can change from packet to packet.  This is selected\n    \
    \   by the encoder depending on the bitrate and the audio being\n       encoded.\
    \  The original channel count of the audio passed to the\n       encoder is not\
    \ necessarily preserved by the lossy compression.\n       Regardless of the internal\
    \ channel count, any Opus stream can be\n       decoded as mono (a single channel)\
    \ or stereo (two channels) by\n       appropriate initialization of the decoder.\
    \  The 'coupled stream\n       count' field indicates that the decoders for the\
    \ first M Opus\n       streams are to be initialized for stereo (two-channel)\
    \ output,\n       and the remaining (N - M) decoders are to be initialized for\
    \ mono\n       (a single channel) only.  The total number of decoded channels,\n\
    \       (M + N), MUST be no larger than 255, as there is no way to index\n   \
    \    more channels than that in the channel mapping.\n       For channel mapping\
    \ family 0, this value defaults to (C - 1)\n       (i.e., 0 for mono and 1 for\
    \ stereo), and is not coded.\n   3.  Channel Mapping (8*C bits):\n       This\
    \ contains one octet per output channel, indicating which\n       decoded channel\
    \ is to be used for each one.  Let 'index' be the\n       value of this octet\
    \ for a particular output channel.  This value\n       MUST either be smaller\
    \ than (M + N) or be the special value 255.\n       If 'index' is less than 2*M,\
    \ the output MUST be taken from\n       decoding stream ('index'/2) as stereo\
    \ and selecting the left\n       channel if 'index' is even, and the right channel\
    \ if 'index' is\n       odd.  If 'index' is 2*M or larger, but less than 255,\
    \ the output\n       MUST be taken from decoding stream ('index' - M) as mono.\
    \  If\n       'index' is 255, the corresponding output channel MUST contain\n\
    \       pure silence.\n       The number of output channels, C, is not constrained\
    \ to match the\n       number of decoded channels (M + N).  A single index value\
    \ MAY\n       appear multiple times, i.e., the same decoded channel might be\n\
    \       mapped to multiple output channels.  Some decoded channels might\n   \
    \    not be assigned to any output channel, as well.\n       For channel mapping\
    \ family 0, the first index defaults to 0, and\n       if C == 2, the second index\
    \ defaults to 1.  Neither index is\n       coded.\n   After producing the output\
    \ channels, the channel mapping family\n   determines the semantic meaning of\
    \ each one.  There are three defined\n   mapping families in this specification.\n"
- title: 5.1.1.1.  Channel Mapping Family 0
  contents:
  - "5.1.1.1.  Channel Mapping Family 0\n   Allowed numbers of channels: 1 or 2. \
    \ RTP mapping.  This is the same\n   channel interpretation as [RFC7587].\n  \
    \ o  1 channel: monophonic (mono).\n   o  2 channels: stereo (left, right).\n\
    \   Special mapping: This channel mapping family also indicates that the\n   content\
    \ consists of a single Opus stream that is stereo if and only\n   if C == 2, with\
    \ stream index 0 mapped to output channel 0 (mono, or\n   left channel) and stream\
    \ index 1 mapped to output channel 1 (right\n   channel) if stereo.  When the\
    \ 'channel mapping family' octet has this\n   value, the channel mapping table\
    \ MUST be omitted from the ID header\n   packet.\n"
- title: 5.1.1.2.  Channel Mapping Family 1
  contents:
  - "5.1.1.2.  Channel Mapping Family 1\n   Allowed numbers of channels: 1...8.  Vorbis\
    \ channel order (see\n   below).\n   Each channel is assigned to a speaker location\
    \ in a conventional\n   surround arrangement.  Specific locations depend on the\
    \ number of\n   channels, and are given below in order of the corresponding channel\n\
    \   indices.\n   o  1 channel: monophonic (mono).\n   o  2 channels: stereo (left,\
    \ right).\n   o  3 channels: linear surround (left, center, right).\n   o  4 channels:\
    \ quadraphonic (front left, front right, rear left,\n      rear right).\n   o\
    \  5 channels: 5.0 surround (front left, front center, front right,\n      rear\
    \ left, rear right).\n   o  6 channels: 5.1 surround (front left, front center,\
    \ front right,\n      rear left, rear right, LFE).\n   o  7 channels: 6.1 surround\
    \ (front left, front center, front right,\n      side left, side right, rear center,\
    \ LFE).\n   o  8 channels: 7.1 surround (front left, front center, front right,\n\
    \      side left, side right, rear left, rear right, LFE).\n   This set of surround\
    \ options and speaker location orderings is the\n   same as those used by the\
    \ Vorbis codec [VORBIS-MAPPING].  The\n   ordering is different from the one used\
    \ by the WAVE\n   [WAVE-MULTICHANNEL] and Free Lossless Audio Codec (FLAC) [FLAC]\n\
    \   formats, so correct ordering requires permutation of the output\n   channels\
    \ when decoding to or encoding from those formats.  \"LFE\" here\n   refers to\
    \ a Low Frequency Effects channel, often mapped to a\n   subwoofer with no particular\
    \ spatial position.  Implementations\n   SHOULD identify \"side\" or \"rear\"\
    \ speaker locations with \"surround\"\n   and \"back\" as appropriate when interfacing\
    \ with audio formats or\n   systems that prefer that terminology.\n"
- title: 5.1.1.3.  Channel Mapping Family 255
  contents:
  - "5.1.1.3.  Channel Mapping Family 255\n   Allowed numbers of channels: 1...255.\
    \  No defined channel meaning.\n   Channels are unidentified.  General-purpose\
    \ players SHOULD NOT\n   attempt to play these streams.  Offline implementations\
    \ MAY\n   deinterleave the output into separate PCM files, one per channel.\n\
    \   Implementations SHOULD NOT produce output for channels mapped to\n   stream\
    \ index 255 (pure silence) unless they have no other way to\n   indicate the index\
    \ of non-silent channels.\n"
- title: 5.1.1.4.  Undefined Channel Mappings
  contents:
  - "5.1.1.4.  Undefined Channel Mappings\n   The remaining channel mapping families\
    \ (2...254) are reserved.  A\n   demuxer implementation encountering a reserved\
    \ 'channel mapping\n   family' value SHOULD act as though the value is 255.\n"
- title: 5.1.1.5.  Downmixing
  contents:
  - "5.1.1.5.  Downmixing\n   An Ogg Opus player MUST support any valid channel mapping\
    \ with a\n   channel mapping family of 0 or 1, even if the number of channels\
    \ does\n   not match the physically connected audio hardware.  Players SHOULD\n\
    \   perform channel mixing to increase or reduce the number of channels\n   as\
    \ needed.\n   Implementations MAY use the matrices in Figures 4 through 9 to\n\
    \   implement downmixing from multichannel files using channel mapping\n   family\
    \ 1 (Section 5.1.1.2), which are known to give acceptable\n   results for stereo.\
    \  Matrices for 3 and 4 channels are normalized so\n   each coefficient row sums\
    \ to 1 to avoid clipping.  For 5 or more\n   channels, they are normalized to\
    \ 2 as a compromise between clipping\n   and dynamic range reduction.\n   In these\
    \ matrices the front-left and front-right channels are\n   generally passed through\
    \ directly.  When a surround channel is split\n   between both the left and right\
    \ stereo channels, coefficients are\n   chosen so their squares sum to 1, which\
    \ helps preserve the perceived\n   intensity.  Rear channels are mixed more diffusely\
    \ or attenuated to\n   maintain focus on the front channels.\n   L output = (\
    \ 0.585786 * left + 0.414214 * center                    )\n   R output = (  \
    \                 0.414214 * center + 0.585786 * right )\n   Exact coefficient\
    \ values are 1 and 1/sqrt(2), multiplied by\n   1/(1 + 1/sqrt(2)) for normalization.\n\
    \                  Figure 4: Stereo Downmix Matrix for the\n                 \
    \     Linear Surround Channel Mapping\n       /          \\   /              \
    \                       \\ / FL \\\n       | L output |   | 0.422650 0.000000\
    \ 0.366025 0.211325 | | FR |\n       | R output | = | 0.000000 0.422650 0.211325\
    \ 0.366025 | | RL |\n       \\          /   \\                               \
    \      / \\ RR /\n   Exact coefficient values are 1, sqrt(3)/2 and 1/2, multiplied\
    \ by\n   1/(1 + sqrt(3)/2 + 1/2) for normalization.\n   Figure 5: Stereo Downmix\
    \ Matrix for the Quadraphonic Channel Mapping\n                              \
    \                                 / FL \\\n      /   \\   /                  \
    \                            \\ | FC |\n      | L |   | 0.650802 0.460186 0.000000\
    \ 0.563611 0.325401 | | FR |\n      | R | = | 0.000000 0.460186 0.650802 0.325401\
    \ 0.563611 | | RL |\n      \\   /   \\                                       \
    \       / | RR |\n                                                           \
    \    \\    /\n   Exact coefficient values are 1, 1/sqrt(2), sqrt(3)/2 and 1/2,\n\
    \   multiplied by 2/(1 + 1/sqrt(2) + sqrt(3)/2 + 1/2) for normalization.\n   \
    \    Figure 6: Stereo Downmix Matrix for the 5.0 Surround Mapping\n          \
    \                                                         /FL \\\n   / \\   /\
    \                                                       \\ |FC |\n   |L|   | 0.529067\
    \ 0.374107 0.000000 0.458186 0.264534 0.374107 | |FR |\n   |R| = | 0.000000 0.374107\
    \ 0.529067 0.264534 0.458186 0.374107 | |RL |\n   \\ /   \\                  \
    \                                     / |RR |\n                              \
    \                                     \\LFE/\n   Exact coefficient values are\
    \ 1, 1/sqrt(2), sqrt(3)/2 and 1/2,\n   multiplied by 2/(1 + 1/sqrt(2) + sqrt(3)/2\
    \ + 1/2 + 1/sqrt(2)) for\n   normalization.\n       Figure 7: Stereo Downmix Matrix\
    \ for the 5.1 Surround Mapping\n     /                                       \
    \                         \\\n     | 0.455310 0.321953 0.000000 0.394310 0.227655\
    \ 0.278819 0.321953 |\n     | 0.000000 0.321953 0.455310 0.227655 0.394310 0.278819\
    \ 0.321953 |\n     \\                                                        \
    \        /\n   Exact coefficient values are 1, 1/sqrt(2), sqrt(3)/2, 1/2 and\n\
    \   sqrt(3)/2/sqrt(2), multiplied by 2/(1 + 1/sqrt(2) + sqrt(3)/2 + 1/2 +\n  \
    \ sqrt(3)/2/sqrt(2) + 1/sqrt(2)) for normalization.  The coefficients\n   are\
    \ in the same order as in Section 5.1.1.2 and the matrices above.\n       Figure\
    \ 8: Stereo Downmix Matrix for the 6.1 Surround Mapping\n    /               \
    \                                                  \\\n    | .388631 .274804 .000000\
    \ .336565 .194316 .336565 .194316 .274804 |\n    | .000000 .274804 .388631 .194316\
    \ .336565 .194316 .336565 .274804 |\n    \\                                  \
    \                               /\n   Exact coefficient values are 1, 1/sqrt(2),\
    \ sqrt(3)/2 and 1/2,\n   multiplied by 2/(2 + 2/sqrt(2) + sqrt(3)) for normalization.\
    \  The\n   coefficients are in the same order as in Section 5.1.1.2 and the\n\
    \   matrices above.\n       Figure 9: Stereo Downmix Matrix for the 7.1 Surround\
    \ Mapping\n"
- title: 5.2.  Comment Header
  contents:
  - "5.2.  Comment Header\n      0                   1                   2       \
    \            3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |      'O'      |      'p'      |      'u'      |      's'      |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \    'T'      |      'a'      |      'g'      |      's'      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                     Vendor String Length                      |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                                                             |\n     :      \
    \                  Vendor String...                       :\n     |          \
    \                                                     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                   User Comment List Length                    |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \               User Comment #0 String Length                 |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                                                               |\n    \
    \ :                   User Comment #0 String...                   :\n     |  \
    \                                                             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                 User Comment #1 String Length                 |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     :  \
    \                                                             :\n            \
    \         Figure 10: Comment Header Packet\n   The comment header consists of\
    \ a 64-bit 'magic signature' field,\n   followed by data in the same format as\
    \ the [VORBIS-COMMENT] header\n   used in Ogg Vorbis, except (like Ogg Theora\
    \ and Speex) the final\n   'framing bit' specified in the Vorbis specification\
    \ is not present.\n   1.  Magic Signature:\n       This is an 8-octet (64-bit)\
    \ field that allows codec\n       identification and is human readable.  It contains,\
    \ in order, the\n       magic numbers:\n          0x4F 'O'\n          0x70 'p'\n\
    \          0x75 'u'\n          0x73 's'\n          0x54 'T'\n          0x61 'a'\n\
    \          0x67 'g'\n          0x73 's'\n       Starting with \"Op\" helps distinguish\
    \ it from audio data packets,\n       as this is an invalid TOC sequence.\n  \
    \ 2.  Vendor String Length (32 bits, unsigned, little endian):\n       This field\
    \ gives the length of the following vendor string, in\n       octets.  It MUST\
    \ NOT indicate that the vendor string is longer\n       than the rest of the packet.\n\
    \   3.  Vendor String (variable length, UTF-8 vector):\n       This is a simple\
    \ human-readable tag for vendor information,\n       encoded as a UTF-8 string\
    \ [RFC3629].  No terminating null octet\n       is necessary.\n       This tag\
    \ is intended to identify the codec encoder and\n       encapsulation implementations,\
    \ for tracing differences in\n       technical behavior.  User-facing applications\
    \ can use the\n       'ENCODER' user comment tag to identify themselves.\n   4.\
    \  User Comment List Length (32 bits, unsigned, little endian):\n       This field\
    \ indicates the number of user-supplied comments.  It\n       MAY indicate there\
    \ are zero user-supplied comments, in which case\n       there are no additional\
    \ fields in the packet.  It MUST NOT\n       indicate that there are so many comments\
    \ that the comment string\n       lengths would require more data than is available\
    \ in the rest of\n       the packet.\n   5.  User Comment #i String Length (32\
    \ bits, unsigned, little endian):\n       This field gives the length of the following\
    \ user comment string,\n       in octets.  There is one for each user comment\
    \ indicated by the\n       'user comment list length' field.  It MUST NOT indicate\
    \ that the\n       string is longer than the rest of the packet.\n   6.  User\
    \ Comment #i String (variable length, UTF-8 vector):\n       This field contains\
    \ a single user comment encoded as a UTF-8\n       string [RFC3629].  There is\
    \ one for each user comment indicated\n       by the 'user comment list length'\
    \ field.\n   The 'vendor string length' and 'user comment list length' fields\
    \ are\n   REQUIRED, and implementations SHOULD treat a stream as invalid if it\n\
    \   contains a comment header that does not have enough data for these\n   fields,\
    \ or that does not contain enough data for the corresponding\n   vendor string\
    \ or user comments they describe.  Making this check\n   before allocating the\
    \ associated memory to contain the data helps\n   prevent a possible Denial-of-Service\
    \ (DoS) attack from small comment\n   headers that claim to contain strings longer\
    \ than the entire packet\n   or more user comments than could possibly fit in\
    \ the packet.\n   Immediately following the user comment list, the comment header\
    \ MAY\n   contain zero-padding or other binary data that is not specified here.\n\
    \   If the least-significant bit of the first byte of this data is 1,\n   then\
    \ editors SHOULD preserve the contents of this data when updating\n   the tags,\
    \ but if this bit is 0, all such data MAY be treated as\n   padding, and truncated\
    \ or discarded as desired.  This allows informal\n   experimentation with the\
    \ format of this binary data until it can be\n   specified later.\n   The comment\
    \ header can be arbitrarily large and might be spread over\n   a large number\
    \ of Ogg pages.  Implementations MUST avoid attempting\n   to allocate excessive\
    \ amounts of memory when presented with a very\n   large comment header.  To accomplish\
    \ this, implementations MAY treat\n   a stream as invalid if it has a comment\
    \ header larger than\n   125,829,120 octets (120 MB), and MAY ignore individual\
    \ comments that\n   are not fully contained within the first 61,440 octets of\
    \ the comment\n   header.\n"
- title: 5.2.1.  Tag Definitions
  contents:
  - "5.2.1.  Tag Definitions\n   The user comment strings follow the NAME=value format\
    \ described by\n   [VORBIS-COMMENT] with the same recommended tag names: ARTIST,\
    \ TITLE,\n   DATE, ALBUM, and so on.\n   Two new comment tags are introduced here:\n\
    \   First, an optional gain for track normalization:\n   R128_TRACK_GAIN=-573\n\
    \   representing the volume shift needed to normalize the track's volume\n   during\
    \ isolated playback, in random shuffle, and so on.  The gain is\n   a Q7.8 fixed-point\
    \ number in dB, as in the ID header's 'output gain'\n   field.  This tag is similar\
    \ to the REPLAYGAIN_TRACK_GAIN tag in\n   Vorbis [REPLAY-GAIN], except that the\
    \ normal volume reference is the\n   [EBU-R128] standard.\n   Second, an optional\
    \ gain for album normalization:\n   R128_ALBUM_GAIN=111\n   representing the volume\
    \ shift needed to normalize the overall volume\n   when played as part of a particular\
    \ collection of tracks.  The gain\n   is also a Q7.8 fixed-point number in dB,\
    \ as in the ID header's\n   'output gain' field.  The values '-573' and '111'\
    \ given here are just\n   examples.\n   An Ogg Opus stream MUST NOT have more\
    \ than one of each of these tags,\n   and, if present, their values MUST be an\
    \ integer from -32768 to\n   32767, inclusive, represented in ASCII as a base\
    \ 10 number with no\n   whitespace.  A leading '+' or '-' character is valid.\
    \  Leading zeros\n   are also permitted, but the value MUST be represented by\
    \ no more than\n   6 characters.  Other non-digit characters MUST NOT be present.\n\
    \   If present, R128_TRACK_GAIN and R128_ALBUM_GAIN MUST correctly\n   represent\
    \ the R128 normalization gain relative to the 'output gain'\n   field specified\
    \ in the ID header.  If a player chooses to make use of\n   the R128_TRACK_GAIN\
    \ tag or the R128_ALBUM_GAIN tag, it MUST apply\n   those gains _in addition_\
    \ to the 'output gain' value.  If a tool\n   modifies the ID header's 'output\
    \ gain' field, it MUST also update or\n   remove the R128_TRACK_GAIN and R128_ALBUM_GAIN\
    \ comment tags if\n   present.  A muxer SHOULD place the gain it wants other tools\
    \ to use\n   by default into the 'output gain' field, and not the comment tag.\n\
    \   To avoid confusion with multiple normalization schemes, an Opus\n   comment\
    \ header SHOULD NOT contain any of the REPLAYGAIN_TRACK_GAIN,\n   REPLAYGAIN_TRACK_PEAK,\
    \ REPLAYGAIN_ALBUM_GAIN, or\n   REPLAYGAIN_ALBUM_PEAK tags, unless they are only\
    \ to be used in some\n   context where there is guaranteed to be no such confusion.\n\
    \   [EBU-R128] normalization is preferred to the earlier REPLAYGAIN\n   schemes\
    \ because of its clear definition and adoption by industry.\n   Peak normalizations\
    \ are difficult to calculate reliably for lossy\n   codecs because of variation\
    \ in excursion heights due to decoder\n   differences.  In the authors' investigations,\
    \ they were not applied\n   consistently or broadly enough to merit inclusion\
    \ here.\n"
- title: 6.  Packet Size Limits
  contents:
  - "6.  Packet Size Limits\n   Technically, valid Opus packets can be arbitrarily\
    \ large due to the\n   padding format, although the amount of non-padding data\
    \ they can\n   contain is bounded.  These packets might be spread over a similarly\n\
    \   enormous number of Ogg pages.  When encoding, implementations SHOULD\n   limit\
    \ the use of padding in audio data packets to no more than is\n   necessary to\
    \ make a VBR stream CBR, unless they have no reasonable\n   way to determine what\
    \ is necessary.  Demuxers SHOULD treat audio data\n   packets as invalid (treat\
    \ them as if they were malformed Opus packets\n   with an invalid TOC sequence)\
    \ if they are larger than 61,440 octets\n   per Opus stream, unless they have\
    \ a specific reason for allowing\n   extra padding.  Such packets necessarily\
    \ contain more padding than\n   needed to make a stream CBR.  Demuxers MUST avoid\
    \ attempting to\n   allocate excessive amounts of memory when presented with a\
    \ very large\n   packet.  Demuxers MAY treat audio data packets as invalid or\n\
    \   partially process them if they are larger than 61,440 octets in an\n   Ogg\
    \ Opus stream with channel mapping families 0 or 1.  Demuxers MAY\n   treat audio\
    \ data packets as invalid or partially process them in any\n   Ogg Opus stream\
    \ if the packet is larger than 61,440 octets and also\n   larger than 7,680 octets\
    \ per Opus stream.  The presence of an\n   extremely large packet in the stream\
    \ could indicate a memory\n   exhaustion attack or stream corruption.\n   In an\
    \ Ogg Opus stream, the largest possible valid packet that does\n   not use padding\
    \ has a size of (61,298*N - 2) octets.  With\n   255 streams, this is 15,630,988\
    \ octets and can span up to 61,298 Ogg\n   pages, all but one of which will have\
    \ a granule position of -1.  This\n   is, of course, a very extreme packet, consisting\
    \ of 255 streams, each\n   containing 120 ms of audio encoded as 2.5 ms frames,\
    \ each frame using\n   the maximum possible number of octets (1275) and stored\
    \ in the least\n   efficient manner allowed (a VBR code 3 Opus packet).  Even\
    \ in such a\n   packet, most of the data will be zeros as 2.5 ms frames cannot\n\
    \   actually use all 1275 octets.\n   The largest packet consisting of entirely\
    \ useful data is\n   (15,326*N - 2) octets.  This corresponds to 120 ms of audio\
    \ encoded\n   as 10 ms frames in either SILK or Hybrid mode, but at a data rate\
    \ of\n   over 1 Mbps, which makes little sense for the quality achieved.\n   A\
    \ more reasonable limit is (7,664*N - 2) octets.  This corresponds to\n   120\
    \ ms of audio encoded as 20 ms stereo CELT mode frames, with a\n   total bitrate\
    \ just under 511 kbps (not counting the Ogg encapsulation\n   overhead).  For\
    \ channel mapping family 1, N = 8 provides a reasonable\n   upper bound, as it\
    \ allows for each of the 8 possible output channels\n   to be decoded from a separate\
    \ stereo Opus stream.  This gives a size\n   of 61,310 octets, which is rounded\
    \ up to a multiple of 1,024 octets\n   to yield the audio data packet size of\
    \ 61,440 octets that any\n   implementation is expected to be able to process\
    \ successfully.\n"
- title: 7.  Encoder Guidelines
  contents:
  - "7.  Encoder Guidelines\n   When encoding Opus streams, Ogg muxers SHOULD take\
    \ into account the\n   algorithmic delay of the Opus encoder.\n   In encoders\
    \ derived from the reference implementation [RFC6716], the\n   number of samples\
    \ can be queried with\n    opus_encoder_ctl(encoder_state, OPUS_GET_LOOKAHEAD(&delay_samples));\n\
    \   To achieve good quality in the very first samples of a stream,\n   implementations\
    \ MAY use linear predictive coding (LPC) extrapolation\n   to generate at least\
    \ 120 extra samples at the beginning to avoid the\n   Opus encoder having to encode\
    \ a discontinuous signal.  For more\n   information on linear prediction, see\
    \ [LINEAR-PREDICTION].  For an\n   input file containing 'length' samples, the\
    \ implementation SHOULD set\n   the 'pre-skip' header value to (delay_samples\
    \ + extra_samples),\n   encode at least (length + delay_samples + extra_samples)\
    \ samples, and\n   set the granule position of the last page to\n   (length +\
    \ delay_samples + extra_samples).  This ensures that the\n   encoded file has\
    \ the same duration as the original, with no time\n   offset.  The best way to\
    \ pad the end of the stream is to also use LPC\n   extrapolation, but zero-padding\
    \ is also acceptable.\n"
- title: 7.1.  LPC Extrapolation
  contents:
  - "7.1.  LPC Extrapolation\n   The first step in LPC extrapolation is to compute\
    \ linear prediction\n   coefficients [LPC-SAMPLE].  When extending the end of\
    \ the signal,\n   order-N (typically with N ranging from 8 to 40) LPC analysis\
    \ is\n   performed on a window near the end of the signal.  The last N samples\n\
    \   are used as memory to an infinite impulse response (IIR) filter.\n   The filter\
    \ is then applied on a zero input to extrapolate the end of\n   the signal.  Let\
    \ 'a(k)' be the kth LPC coefficient and 'x(n)' be the\n   nth sample of the signal.\
    \  Each new sample past the end of the signal\n   is computed as\n           \
    \                      N\n                                ---\n              \
    \           x(n) = \\   a(k)*x(n - k)\n                                /\n   \
    \                             ---\n                               k = 1\n   The\
    \ process is repeated independently for each channel.  It is\n   possible to extend\
    \ the beginning of the signal by applying the same\n   process backward in time.\
    \  When extending the beginning of the\n   signal, it is best to apply a \"fade\
    \ in\" to the extrapolated signal,\n   e.g., by multiplying it by a half-Hanning\
    \ window [HANNING].\n"
- title: 7.2.  Continuous Chaining
  contents:
  - "7.2.  Continuous Chaining\n   In some applications, such as Internet radio, it\
    \ is desirable to cut\n   a long stream into smaller chains, e.g., so the comment\
    \ header can be\n   updated.  This can be done simply by separating the input\
    \ streams\n   into segments and encoding each segment independently.  The drawback\n\
    \   of this approach is that it creates a small discontinuity at the\n   boundary\
    \ due to the lossy nature of Opus.  A muxer MAY avoid this\n   discontinuity by\
    \ using the following procedure:\n   1.  Encode the last frame of the first segment\
    \ as an independent\n       frame by turning off all forms of inter-frame prediction.\n\
    \       De-emphasis is allowed.\n   2.  Set the granule position of the last page\
    \ to a point near the end\n       of the last frame.\n   3.  Begin the second\
    \ segment with a copy of the last frame of the\n       first segment.\n   4. \
    \ Set the 'pre-skip' value of the second stream in such a way as to\n       properly\
    \ join the two streams.\n   5.  Continue the encoding process normally from there,\
    \ without any\n       reset to the encoder.\n   In encoders derived from the reference\
    \ implementation, inter-frame\n   prediction can be turned off by calling\n  \
    \   opus_encoder_ctl(encoder_state, OPUS_SET_PREDICTION_DISABLED(1));\n   For\
    \ best results, this implementation requires that prediction be\n   explicitly\
    \ enabled again before resuming normal encoding, even after\n   a reset.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Implementations of the Opus codec need to take\
    \ appropriate security\n   considerations into account, as outlined in [RFC4732].\
    \  This is just\n   as much a problem for the container as it is for the codec\
    \ itself.\n   Malicious payloads and/or input streams can be used to attack codec\n\
    \   implementations.  Implementations MUST NOT overrun their allocated\n   memory\
    \ nor consume excessive resources when decoding payloads or\n   processing input\
    \ streams.  Although problems in encoding applications\n   are typically rarer,\
    \ this still applies to a muxer, as\n   vulnerabilities would allow an attacker\
    \ to attack transcoding\n   gateways.\n   Header parsing code contains the most\
    \ likely area for potential\n   overruns.  It is important for implementations\
    \ to ensure their\n   buffers contain enough data for all of the required fields\
    \ before\n   attempting to read it (for example, for all of the channel map data\n\
    \   in the ID header).  Implementations would do well to validate the\n   indices\
    \ of the channel map, also, to ensure they meet all of the\n   restrictions outlined\
    \ in Section 5.1.1, in order to avoid attempting\n   to read data from channels\
    \ that do not exist.\n   To avoid excessive resource usage, we advise implementations\
    \ to be\n   especially wary of streams that might cause them to process far more\n\
    \   data than was actually transmitted.  For example, a relatively small\n   comment\
    \ header may contain values for the string lengths or user\n   comment list length\
    \ that imply that it is many gigabytes in size.\n   Even computing the size of\
    \ the required buffer could overflow a\n   32-bit integer, and actually attempting\
    \ to allocate such a buffer\n   before verifying it would be a reasonable size\
    \ is a bad idea.  After\n   reading the user comment list length, implementations\
    \ might wish to\n   verify that the header contains at least the minimum amount\
    \ of data\n   for that many comments (4 additional octets per comment, to indicate\n\
    \   each has a length of zero) before proceeding any further, again\n   taking\
    \ care to avoid overflow in these calculations.  If allocating\n   an array of\
    \ pointers to point at these strings, the size of the\n   pointers may be larger\
    \ than 4 octets, potentially requiring a\n   separate overflow check.\n   Another\
    \ bug in this class we have observed more than once involves\n   the handling\
    \ of invalid data at the end of a stream.  Often,\n   implementations will seek\
    \ to the end of a stream to locate the last\n   timestamp in order to compute\
    \ its total duration.  If they do not\n   find a valid capture pattern and Ogg\
    \ page from the desired logical\n   stream, they will back up and try again. \
    \ If care is not taken to\n   avoid re-scanning data that was already scanned,\
    \ this search can\n   quickly devolve into something with a complexity that is\
    \ quadratic in\n   the amount of invalid data.\n   In general, when seeking, implementations\
    \ will wish to be cautious\n   about the effects of invalid granule position values\
    \ and ensure all\n   algorithms will continue to make progress and eventually\
    \ terminate,\n   even if these are missing or out of order.\n   Like most other\
    \ container formats, Ogg Opus streams SHOULD NOT be\n   used with insecure ciphers\
    \ or cipher modes that are vulnerable to\n   known-plaintext attacks.  Elements\
    \ such as the Ogg page capture\n   pattern and the 'magic signature' fields in\
    \ the ID header and the\n   comment header all have easily predictable values,\
    \ in addition to\n   various elements of the codec data itself.\n"
- title: 9.  Content Type
  contents:
  - "9.  Content Type\n   An \"Ogg Opus file\" consists of one or more sequentially\
    \ multiplexed\n   segments, each containing exactly one Ogg Opus stream.  The\n\
    \   RECOMMENDED mime-type for Ogg Opus files is \"audio/ogg\".\n   If more specificity\
    \ is desired, one MAY indicate the presence of Opus\n   streams using the codecs\
    \ parameter defined in [RFC6381] and\n   [RFC5334], e.g.,\n                  \
    \          audio/ogg; codecs=opus\n   for an Ogg Opus file.\n   The RECOMMENDED\
    \ filename extension for Ogg Opus files is '.opus'.\n   When Opus is concurrently\
    \ multiplexed with other streams in an Ogg\n   container, one SHOULD use one of\
    \ the \"audio/ogg\", \"video/ogg\", or\n   \"application/ogg\" mime-types, as\
    \ defined in [RFC5334].  Such streams\n   are not strictly \"Ogg Opus files\"\
    \ as described above, since they\n   contain more than a single Opus stream per\
    \ sequentially multiplexed\n   segment, e.g., video or multiple audio tracks.\
    \  In such cases, the\n   '.opus' filename extension is NOT RECOMMENDED.\n   In\
    \ either case, this document updates [RFC5334] to add \"opus\" as a\n   codecs\
    \ parameter value with char[8]: 'OpusHead' as Codec Identifier.\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   Per this document, IANA has updated the \"Media\
    \ Types\" registry by\n   adding .opus as a file extension for \"audio/ogg\" and\
    \ adding itself as\n   a reference alongside [RFC5334] for \"audio/ogg\", \"video/ogg\"\
    , and\n   \"application/ogg\" Media Types.\n   This document defines a new registry\
    \ \"Opus Channel Mapping Families\"\n   to indicate how the semantic meanings\
    \ of the channels in a multi-\n   channel Opus stream are described.  IANA has\
    \ created a new namespace\n   of \"Opus Channel Mapping Families\".  This registry\
    \ is listed on the\n   IANA Matrix.  Modifications to this registry follow the\n\
    \   \"Specification Required\" registration policy as defined in [RFC5226].\n\
    \   Each registry entry consists of a Channel Mapping Family Number,\n   which\
    \ is specified in decimal in the range 0 to 255, inclusive, and a\n   Reference\
    \ (or list of references).  Each Reference must point to\n   sufficient documentation\
    \ to describe what information is coded in the\n   Opus identification header\
    \ for this channel mapping family, how a\n   demuxer determines the stream count\
    \ ('N') and coupled stream count\n   ('M') from this information, and how it determines\
    \ the proper\n   interpretation of each of the decoded channels.\n   This document\
    \ defines three initial assignments for this registry.\n                   +-------+---------------------------+\n\
    \                   | Value | Reference                 |\n                  \
    \ +-------+---------------------------+\n                   | 0     | RFC 7845,\
    \ Section 5.1.1.1 |\n                   |       |                           |\n\
    \                   | 1     | RFC 7845, Section 5.1.1.2 |\n                  \
    \ |       |                           |\n                   | 255   | RFC 7845,\
    \ Section 5.1.1.3 |\n                   +-------+---------------------------+\n\
    \   The designated expert will determine if the Reference points to a\n   specification\
    \ that meets the requirements for permanence and ready\n   availability laid out\
    \ in [RFC5226] and whether it specifies the\n   information described above with\
    \ sufficient clarity to allow\n   interoperable implementations.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3533]  Pfeiffer, S., \"The Ogg Encapsulation Format Version 0\",\n   \
    \           RFC 3533, DOI 10.17487/RFC3533, May 2003,\n              <https://www.rfc-editor.org/info/rfc3533>.\n\
    \   [RFC3629]  Yergeau, F., \"UTF-8, a transformation format of ISO\n        \
    \      10646\", STD 63, RFC 3629, DOI 10.17487/RFC3629, November\n           \
    \   2003, <https://www.rfc-editor.org/info/rfc3629>.\n   [RFC5226]  Narten, T.\
    \ and H. Alvestrand, \"Guidelines for Writing an\n              IANA Considerations\
    \ Section in RFCs\", BCP 26, RFC 5226,\n              DOI 10.17487/RFC5226, May\
    \ 2008,\n              <https://www.rfc-editor.org/info/rfc5226>.\n   [RFC5334]\
    \  Goncalves, I., Pfeiffer, S., and C. Montgomery, \"Ogg Media\n             \
    \ Types\", RFC 5334, DOI 10.17487/RFC5334, September 2008,\n              <https://www.rfc-editor.org/info/rfc5334>.\n\
    \   [RFC6381]  Gellens, R., Singer, D., and P. Frojdh, \"The 'Codecs' and\n  \
    \            'Profiles' Parameters for \"Bucket\" Media Types\", RFC 6381,\n \
    \             DOI 10.17487/RFC6381, August 2011,\n              <https://www.rfc-editor.org/info/rfc6381>.\n\
    \   [RFC6716]  Valin, JM., Vos, K., and T. Terriberry, \"Definition of the\n \
    \             Opus Audio Codec\", RFC 6716, DOI 10.17487/RFC6716,\n          \
    \    September 2012, <https://www.rfc-editor.org/info/rfc6716>.\n   [EBU-R128]\n\
    \              EBU Technical Committee, \"Loudness Recommendation EBU\n      \
    \        R128\", August 2011, <https://tech.ebu.ch/loudness>.\n   [VORBIS-COMMENT]\n\
    \              Montgomery, C., \"Ogg Vorbis I Format Specification:\n        \
    \      Comment Field and Header Specification\", July 2002,\n              <https://www.xiph.org/vorbis/doc/v-comment.html>.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [RFC4732]  Handley, M., Ed., Rescorla, E.,\
    \ Ed., and IAB, \"Internet\n              Denial-of-Service Considerations\",\
    \ RFC 4732,\n              DOI 10.17487/RFC4732, December 2006,\n            \
    \  <https://www.rfc-editor.org/info/rfc4732>.\n   [RFC7587]  Spittka, J., Vos,\
    \ K., and JM. Valin, \"RTP Payload Format\n              for the Opus Speech and\
    \ Audio Codec\", RFC 7587,\n              DOI 10.17487/RFC7587, June 2015,\n \
    \             <https://www.rfc-editor.org/info/rfc7587>.\n   [FLAC]     Coalson,\
    \ J., \"FLAC - Free Lossless Audio Codec Format\n              Description\",\
    \ January 2008,\n              <https://xiph.org/flac/format.html>.\n   [HANNING]\
    \  Wikipedia, \"Hann window\", February 2016,\n              <https://en.wikipedia.org/w/index.php?title=Window_functio\n\
    \              n&oldid=703074467#Hann_.28Hanning.29_window>.\n   [LINEAR-PREDICTION]\n\
    \              Wikipedia, \"Linear Predictive Coding\", October 2015,\n      \
    \        <https://en.wikipedia.org/w/\n              index.php?title=Linear_predictive_coding&oldid=687498962>.\n\
    \   [LPC-SAMPLE]\n              Degener, J. and C. Bormann, \"Autocorrelation\
    \ LPC coeff\n              generation algorithm (Vorbis source code)\", November\
    \ 1994,\n              <https://svn.xiph.org/trunk/vorbis/lib/lpc.c>.\n   [Q-NOTATION]\n\
    \              Wikipedia, \"Q (number format)\", December 2015,\n            \
    \  <https://en.wikipedia.org/w/\n              index.php?title=Q_%28number_format%29&oldid=697252615>.\n\
    \   [REPLAY-GAIN]\n              Parker, C. and M. Leese, \"VorbisComment: Replay\
    \ Gain\",\n              June 2009,\n              <https://wiki.xiph.org/VorbisComment#Replay_Gain>.\n\
    \   [SEEKING]  Pfeiffer, S., Parker, C., and G. Maxwell, \"Granulepos\n      \
    \        Encoding and How Seeking Really Works\", May 2012,\n              <https://wiki.xiph.org/Seeking>.\n\
    \   [VORBIS-MAPPING]\n              Montgomery, C., \"The Vorbis I Specification,\
    \ Section 4.3.9\n              Output Channel Order\", January 2010,\n       \
    \       <https://www.xiph.org/vorbis/doc/\n              Vorbis_I_spec.html#x1-810004.3.9>.\n\
    \   [VORBIS-TRIM]\n              Montgomery, C., \"The Vorbis I Specification,\
    \ Appendix A:\n              Embedding Vorbis into an Ogg stream\", November 2008,\n\
    \              <https://xiph.org/vorbis/doc/\n              Vorbis_I_spec.html#x1-132000A.2>.\n\
    \   [WAVE-MULTICHANNEL]\n              Microsoft Corporation, \"Multiple Channel\
    \ Audio Data and\n              WAVE Files\", March 2007,\n              <https://msdn.microsoft.com/en-us/windows/hardware/\n\
    \              gg463006.aspx>.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Thanks to Ben Campbell, Joel M.  Halpern, Mark Harris, Greg\
    \ Maxwell,\n   Christopher \"Monty\" Montgomery, Jean-Marc Valin, Stephan Wenger,\
    \ and\n   Mo Zanaty for their valuable contributions to this document.\n   Additional\
    \ thanks to Andrew D'Addesio, Greg Maxwell, and Vincent\n   Penquerc'h for their\
    \ feedback based on early implementations.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Timothy B. Terriberry\n   Mozilla Corporation\n   331\
    \ E. Evelyn Ave.\n   Mountain View, CA  94041\n   United States\n   Phone: +1\
    \ 650 903-0800\n   Email: tterribe@xiph.org\n   Ron Lee\n   Voicetronix\n   246\
    \ Pulteney Street, Level 1\n   Adelaide, SA  5000\n   Australia\n   Phone: +61\
    \ 8 8232 9112\n   Email: ron@debian.org\n   Ralph Giles\n   Mozilla Corporation\n\
    \   163 West Hastings Street\n   Vancouver, BC  V6B 1H5\n   Canada\n   Phone:\
    \ +1 778 785 1540\n   Email: giles@xiph.org\n"
