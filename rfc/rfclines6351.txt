Abstract This document defines the XML schema of the vCard data format.
[RFC6350] is a data format for representing and exchanging information about individuals and other entities.
It is a text based format (as opposed to a binary format).
This document defines xCard, an XML [W3C.REC
xml 20081126] representation for vCard.
The underlying data structure is exactly the same, enabling a 1 to 1 mapping between the original vCard format and the XML representation.
The XML formatting may be preferred in some contexts where an XML engine is readily available and may be reused instead of writing a standalone vCard parser.
Earlier work on an XML format for vCard was started in 1998 by Frank Dawson [VCARD DTD].
Sadly, it did not take over the world.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
The schema is expressed in the RELAX NG language [ISO.19757 2.2008] and is found in Appendix A. 4.
Example: Author's XML vCard <?
xml version "1.0" encoding "UTF 8"?
<vcards xmlns "urn:ietf:params:xml:ns:vcard 4.0"> <vcard>
> <bday><date> 0203</date></bday> <anniversary> <date time>20090808T1430 0500</date time
> </anniversary> <gender><sex>M</sex></gender> <lang> <parameters><pref><integer>1</integer></pref></parameters> <language tag>fr</language tag> </lang
Laurier, suite D2 630 Quebec, QC, Canada G1V 2M2</text></label
> <tel> <parameters> <type> <text
1 418 656 9254;ext 102</uri
> <tel> <parameters> <type> <text
The general idea is to map vCard parameters, properties, and value types to XML elements.
For example, the "FN" property is mapped to the "fn" element.
In turn, that element contains a text element whose content corresponds to the vCard property's value.
vCard parameters are also mapped to XML elements.
They are contained in the <parameters> element, which is contained in property elements.
For example, the "TYPE" parameter applied to the "TEL" property would look like the following in XML: <tel> <parameters> <type> <text>voice</text
>tel: 1 555 555 555</uri
Parameters taking a list of values are simply repeated multiple times, once for each value in the list.
Properties having structured values (e.g., the "N" property) are expressed by XML element trees.
Element names in that tree (e.g., "surname", "given", etc.)
do not have a vCard equivalent since they are identified by position in plain vCard.
Line folding is a non issue in XML.
Therefore, the mapping from vCard to XML is done after the unfolding procedure is carried out.
Conversely, the mapping from XML to vCard is done before the folding procedure is carried out.
A top level <vcards> element is used as root.
one or more <vcard> elements, each representing a complete vCard.
The <vcards> element MUST be present even when only a single vCard is present in an XML document.
The group construct (Section 3.2 in [RFC6350]) is represented with the <group> element.
The "name" attribute contains the group's name.
> is equivalent to: BEGIN:
The original vCard format is extensible.
New properties, parameters, data types and values (collectively known as vCard elements, not to be confused with XML elements) can be registered with IANA (see [RFC6350], Section 10.2).
It is expected that these vCard extensions will also specify extensions to the XML format described in this document.
New XML vCard property and parameter element names MUST be lower  case.
This is necessary to ensure that round tripping between XML and plain text vCard works correctly.
Usage of XML namespaces [W3C.REC xml names 20091208] for extensibility is RECOMMENDED for extensions that have no equivalent in plain text vCard.
Refer to Section 6 for the implications when converting between plain text vCard and XML.
> </parameters> <text>value goes here</text
Note that extension elements do not need the "X " or "VND " prefix in XML.
The XML namespace mechanism is sufficient.
A vCard XML parser MUST ignore XML elements and attributes for which it doesn't recognize the expanded name.
The normal behavior of ignoring XML processing instructions whose target is not recognized MUST also be followed.
In the original vCard format, the "VERSION" property was mandatory and played a role in extensibility.
In XML, this property is absent.
Its role is played by the vCard core namespace identifier, which includes the version number.
vCard revisions will use a different namespace.
Parameters containing a list of values are expressed using a list of elements in XML (e.g., the <type> element).
The schema does not validate the cardinality of properties.
This is a limitation of the schema definition language.
Cardinalities of the original vCard format [RFC6350] MUST still be respected.
Some constructs (e.g., value enumerations in type parameters) have additional ordering constraints in XML.
This is a result of limitations of the schema definition language, and the order is arbitrary.
The order MUST be respected in XML for the vCard to be valid.
However, reordering as part of conversion to or from plain vCard MAY happen.
When new properties or "X " properties are used, a vCard >
xCard converter might not recognize them or know what the appropriate default value types are, yet they need to be able to preserve the values.
A similar issue arises for unrecognized property parameters.
The content of that element is the unprocessed value text.
Any unrecognized property parameter MUST be converted using the value type XML element <unknown>, with its content set to the parameter value text, treated as if it were a text value, or list of text values.
The content of "XML" properties is copied as is to XML.
Property and parameter XML element names are converted to lower case.
Property value escaping is undone.
For example, "\n" becomes a NEWLINE character (ASCII decimal 10).
Double quoting of parameter values, as well as backslash escaping in parameter values, is undone.
If the converter knows of a specific plain text representation for this property, it uses it.
For example, the <adr> element corresponds to the "ADR" property, which is encoded using comma separated lists separated by semicolons.
Otherwise, the property name is taken from the element name, property parameters are taken from the <parameters> element, and the content of the property is taken from the content of the value element.
If the property element has attributes or contains other XML elements, they are dropped.
If a standard property's XML element contains XML elements and attributes for which the converter doesn't recognize the expanded name, they are dropped.
Therefore, it is RECOMMENDED to limit extensions to the property level to ensure that all data is preserved intact in round trip conversions.
Properties in other namespaces are wrapped as is inside an "XML" property.
XML elements are converted directly into vCard values.
The containing property MUST NOT have a "VALUE" parameter.
Any <unknown> parameter value XML elements are converted as if they were <text> value type XML elements.
Property and parameter names are converted to upper case.
Property value escaping (Section 3.3 of [RFC6350]) is carried out.
For example, a NEWLINE character (ASCII decimal 10) becomes "\n".
Double quoting of parameter values, as well as backslash escaping in parameter values, is carried out.
For example, these two vCards are equivalent: <?
<vcards xmlns "urn:ietf:params:xml:ns:vcard 4.0"> <vcard>
<a xmlns "http://www.w3.org/1999/xhtml" href "http://www.example.com">My web page!</a> </vcard> </vcards
VCARD VERSION:4.0 FN:J. Doe N:Doe;J.;;
All the security considerations applicable to plain vCard
[RFC6350] are applicable to this document as well.
XML Signature [W3C.CR xmldsig core1 20110303] and XML Encryption [W3C.CR xmlenc core1 20110303] can be used with xCard to provide authentication and confidentiality.
Registration of the XML Namespace URI:
Namespace URIs do not represent an XML specification.
This section defines the MIME media type [
RFC4288] for use with vCard in XML data.
Subject:  Registration of media type application
application Subtype name:  vcard xml Required parameters:
none Optional parameters:  charset as defined for application/xml in [RFC3023]; per [RFC3023], use of the charset parameter with the value "utf 8" is "STRONGLY RECOMMENDED".
Encoding considerations:  Same as encoding considerations of application/xml as specified in [RFC3023].
This media type has all of the security considerations described in [RFC3023], plus those listed in Section 7.
Interoperability considerations:  This media type provides an alternative syntax to vCard data [RFC6350] based on XML.
Applications that use this media type:  Applications that currently make use of the text/vcard media type can use this as an alternative.
In general, applications that maintain or process contact information can use this media type.
Additional information: Magic number(s):  none File extension(s):  XML data should use ".xml" as the file extension.
none Person & email address to contact for further information:
Intended usage:  COMMON Restrictions on usage:  none Author:
IETF Appendix A.  Relax NG Schema
# # 3.3 iana token
# 4.3.3 value date time
element date time { xsd:string { pattern   "
value time # 4.3.5 value timestamp   element timestamp
element float { xsd:float }
# 4.7 value utc offset
( [0 9a z]{2,8}) )
element altid { value text }?
# 5.5 param pid   element pid { element text { xsd:string { pattern
# 5.7 param mediatype   element mediatype { value text }?
# 5.9 param sort as   element sort as { value
# 5.10 param geo   element geo { value uri }?
tz   element tz { value text   value uri }?
# 6.2.1 property fn   element fn { element parameters { param language, param altid, param pid, param pref, param type }?
element photo { element parameters { param altid, param pid, param pref, param type, param mediatype }?
# 6.3.1 param label   element label { value text }?
(value text   value uri) }
# 6.4.2 property email   element email { element parameters { param altid, param pid, param pref, param type }?
# 6.5.2 property geo   element geo { element parameters { param altid, param pid, param pref, param type, param mediatype }?
element logo { element parameters { param language, param altid, param pid, param pref, param type, param mediatype }?
element related { element parameters { param altid,
param pid, param pref, element type { element text
# 6.7.1 property categories   element categories { element parameters { param altid, param pid, param pref, param type }?
# 6.7.5 property sound   element sound { element parameters { param language, param altid, param pid, param pref, param type, param mediatype }?
property url   element url { element parameters { param altid,
param pid, param pref, param type, param mediatype }?
# 6.8.1 property key   element key { element parameters { param altid, param pid, param pref, param type, param mediatype }?
# 6.9.2 property caladruri   element caladruri { element parameters { param altid, param pid, param pref, param type, param mediatype }?
# 6.9.3 property caluri   element caluri { element parameters { param altid, param pid, param pref, param type, param mediatype }?
# Top level grammar property
property nickname   property note   property org   property photo
property related   property rev   property role   property gender
property source   property tel   property title   property tz   property
