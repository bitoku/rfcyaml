- contents:
  - "   Interworking between the Session Initiation Protocol (SIP) and the\n      Extensible
    Messaging and Presence Protocol (XMPP): Presence\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines a bidirectional protocol mapping for the\n
    \  exchange of presence information between the Session Initiation\n   Protocol
    (SIP) and the Extensible Messaging and Presence Protocol\n   (XMPP).  This document
    obsoletes RFC 7248.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8048.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n   2.  Intended Audience . . . . . . . . . . . . . . . . . . .
    . . .   4\n   3.  Terminology . . . . . . . . . . . . . . . . . . . . . . . .
    .   5\n   4.  Architectural Assumptions . . . . . . . . . . . . . . . . . .   5\n
    \  5.  Presence Authorizations . . . . . . . . . . . . . . . . . . .   6\n     5.1.
    \ Overview  . . . . . . . . . . . . . . . . . . . . . . . .   6\n     5.2.  XMPP
    to SIP . . . . . . . . . . . . . . . . . . . . . . .   7\n       5.2.1.  Requesting
    a Presence Authorization . . . . . . . . .   7\n       5.2.2.  Refreshing a Notification
    Dialog  . . . . . . . . . .  11\n       5.2.3.  Cancelling a Presence Authorization
    . . . . . . . . .  11\n     5.3.  SIP to XMPP . . . . . . . . . . . . . . . .
    . . . . . . .  15\n       5.3.1.  Requesting a Presence Authorization . . . .
    . . . . .  15\n       5.3.2.  Refreshing a Notification Dialog  . . . . . . .
    . . .  18\n       5.3.3.  Cancelling a Presence Authorization . . . . . . . .
    .  19\n   6.  Notifications of Presence Information . . . . . . . . . . . .  19\n
    \    6.1.  Overview  . . . . . . . . . . . . . . . . . . . . . . . .  19\n     6.2.
    \ XMPP to SIP . . . . . . . . . . . . . . . . . . . . . . .  20\n     6.3.  SIP
    to XMPP . . . . . . . . . . . . . . . . . . . . . . .  25\n   7.  Polling for
    Presence Information  . . . . . . . . . . . . . .  27\n     7.1.  XMPP to SIP
    . . . . . . . . . . . . . . . . . . . . . . .  27\n     7.2.  SIP to XMPP . .
    . . . . . . . . . . . . . . . . . . . . .  28\n   8.  Privacy and Security Considerations
    . . . . . . . . . . . . .  28\n     8.1.  Amplification Attacks . . . . . . .
    . . . . . . . . . . .  28\n     8.2.  Presence Leaks  . . . . . . . . . . . .
    . . . . . . . . .  29\n   9.  References  . . . . . . . . . . . . . . . . . .
    . . . . . . .  30\n     9.1.  Normative References  . . . . . . . . . . . . .
    . . . . .  30\n     9.2.  Informative References  . . . . . . . . . . . . . .
    . . .  31\n   Appendix A.  Changes from RFC 7248  . . . . . . . . . . . . . .
    .  33\n   Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .  34\n
    \  Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  34\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Presence is information about the availability of an entity
    (such as\n   network availability or availability for communication).  Presence\n
    \  features in both SIP and XMPP involve several aspects:\n   o  A long-lived
    authorization for a user to receive notifications\n      about a contact's presence
    across presence and notification\n      sessions; such an authorization is formally
    requested by the user,\n      approved (or not) by the contact, and often associated
    with a\n      record in an address list or \"buddy list\".\n   o  An ephemeral
    presence session, during which the contact is online\n      (i.e., available for
    interaction) and after which the contact is\n      offline again.\n   o  An ephemeral
    notification session, during which the user requests\n      presence notifications
    from the contact (these are implicit in\n      XMPP, but explicit in SIP where
    they are managed by means of\n      notification dialogs).\n   o  Notifications
    that are sent from the contact to the user for the\n      life of either the contact's
    presence session or the user's\n      notification session.\n   Although specifications
    for both SIP and XMPP use the term\n   \"subscription\", they do so in different
    ways.  In SIP, a\n   \"subscription\" is the specific mechanism whereby a subscriber
    (or an\n   entity acting on the subscriber's behalf, such as a SIP Presence\n
    \  Server) requests presence notifications from the contact over a\n   relatively
    short period of time, renewed as necessary to keep\n   receiving presence notifications
    during a presence session.  By\n   contrast, in XMPP a \"subscription\" is essentially
    shorthand for a\n   long-lived presence authorization.  To prevent confusion,
    this\n   document uses the term \"notification dialog\" for a SIP subscription\n
    \  and the term \"presence authorization\" for an XMPP subscription.\n   In order
    to help ensure interworking between presence systems that\n   conform to the instant
    messaging and presence protocol requirements\n   [RFC2779], it is important to
    clearly define protocol mappings\n   between such systems.  Within the IETF, work
    has proceeded on two\n   presence technologies:\n   o  Various extensions to the
    Session Initiation Protocol ([RFC3261])\n      for presence, in particular [RFC3856]\n
    \  o  The Extensible Messaging and Presence Protocol (XMPP), which\n      consists
    of a formalization of the core XML-streaming protocols\n      developed originally
    by the Jabber open-source community; the\n      relevant specifications are [RFC6120]
    for the XML-streaming layer\n      and [RFC6121] for basic presence and instant-messaging
    extensions\n   One approach to help ensure interworking between these protocols
    is\n   to map each protocol to the abstract semantics described in\n   [RFC3860];
    however, apparently that approach has never been\n   implemented.  The approach
    taken in this document is to directly map\n   semantics from one protocol to another
    (i.e., from SIP/SIMPLE (SIP\n   for Instant Messaging and Presence Leveraging
    Extensions) to XMPP and\n   vice versa), because that is how existing systems
    solve the\n   interworking problem.\n   The architectural assumptions underlying
    such direct mappings are\n   provided in [RFC7247], including mapping of addresses
    and error\n   conditions.  The mappings specified in this document cover basic\n
    \  presence functionality.  Mapping of more advanced functionality\n   (e.g.,
    so-called \"rich presence\") is out of scope for this document.\n   This document
    obsoletes RFC 7248.\n"
  title: 1.  Introduction
- contents:
  - "2.  Intended Audience\n   The documents in this series (which include [RFC7247],
    [RFC7572],\n   [RFC7573], and [RFC7702]) are intended for use by software developers\n
    \  who have an existing system based on one of these technologies (e.g.,\n   SIP)
    and would like to enable communication from that existing system\n   to systems
    based on the other technology (e.g., XMPP).  We assume\n   that readers are familiar
    with the core specifications for both SIP\n   [RFC3261] and XMPP [RFC6120], with
    the base document for this series\n   [RFC7247], and with the following presence-related
    specifications:\n   o  \"A Presence Event Package for the Session Initiation Protocol\"\n
    \     [RFC3856]\n   o  \"Presence Information Data Format (PIDF)\" [RFC3863]\n
    \  o  \"Extensible Messaging and Presence Protocol (XMPP): Instant\n      Messaging
    and Presence\" [RFC6121]\n   o  \"SIP-Specific Event Notification\" [RFC6665]\n"
  title: 2.  Intended Audience
- contents:
  - "3.  Terminology\n   A number of terms used here (\"user\", \"contact\", \"notification\",
    etc.)\n   are explained in [RFC3261], [RFC3856], [RFC3857], [RFC6120], and\n   [RFC6121].
    \ This document uses some, but not all, of the presence-\n   related terms defined
    in the Model for Presence and Instant Messaging\n   [RFC2778].  In particular,
    the term \"presence session\" is used as\n   described in [RFC6121] to mean a
    delimited time period during which\n   an endpoint is online and available for
    communications.\n   In flow diagrams, SIP traffic is shown using arrows such as
    \"***>\",\n   whereas XMPP traffic is shown using arrows such as \"...>\".  As
    in\n   [RFC7247], the terms \"SIP to XMPP Gateway\" and \"XMPP to SIP Gateway\"\n
    \  are abbreviated as \"S2X GW\" and \"X2S GW\", respectively.\n   The key words
    \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\",
    \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\"
    in this document are to be interpreted as described in\n   [RFC2119].\n"
  title: 3.  Terminology
- contents:
  - "4.  Architectural Assumptions\n   The fundamental architectural assumptions underlying
    SIP-XMPP\n   interworking are described in [RFC7247].\n   Note that, in SIP, there
    are two ways that presence services can be\n   deployed on the server side:\n
    \  1.  Under this model, described most fully in [RFC3857], a dedicated\n       SIP
    Presence Server handles events related to the presence event\n       package.
    \ Instead of forwarding a SUBSCRIBE message to the SIP\n       user, the Presence
    Server would inform the user of subscription\n       activity using the 'presence.winfo'
    event package.  The SIP User\n       Agent would then authorize the subscribing
    contact through some\n       interaction with the Presence Server (for instance,
    using XML\n       Configuration Access Protocol (XCAP) [RFC4825]).  Therefore,\n
    \      presence updates from the SIP User Agent would not be sent as\n       NOTIFY
    messages to the XMPP user but as PUBLISH messages to the\n       Presence Server,
    which would then generate NOTIFY messages to all\n       active subscribers.\n
    \  2.  Under this model, a SIP Presence Server acts in proxy mode and\n       merely
    passes through the SUBSCRIBE and NOTIFY messages to the\n       SIP User Agent.\n
    \  Because the behavior of the XMPP-to-SIP gateway is not changed by the\n   SIP
    architectural model that is used, the diagrams and protocol flows\n   in this
    document cover both options by labeling the end entity a \"SIP\n   User Agent
    or Presence Server\".\n"
  title: 4.  Architectural Assumptions
- contents:
  - '5.  Presence Authorizations

    '
  - contents:
    - "5.1.  Overview\n   Both XMPP and presence-aware SIP systems enable entities
      (often, but\n   not necessarily, human users) to subscribe to the presence of
      other\n   entities.  XMPP presence is specified in [RFC6121].  Presence using
      a\n   SIP event package is specified in [RFC3856].\n   As described in [RFC6121],
      XMPP presence authorizations are managed\n   using XMPP <presence/> stanzas
      of type \"subscribe\", \"subscribed\",\n   \"unsubscribe\", and \"unsubscribed\".
      \ The main states are:\n   o  \"none\" (neither the user nor the contact is
      subscribed to the\n      other's presence information)\n   o  \"from\" (the
      contact will receive presence notifications from the\n      user)\n   o  \"to\"
      (the contact will send presence notifications to the user)\n   o  \"both\" (both
      user and contact will receive each other's presence\n      notifications)\n
      \  As described in [RFC3856], in SIP the subscriber does not explicitly\n   request
      the creation or removal of presence authorizations.  Rather,\n   the authorizations
      are triggered by subscription activity.  When a\n   SIP user receives an initial
      SIP SUBSCRIBE event from a contact, the\n   recipient's SIP User Agent or SIP
      Presence Server asks the user to\n   make an authorization policy decision.
      \ This decision is recorded in\n   the SIP User Agent or SIP Presence Server,
      so that in the future any\n   notification dialogs from the contact are automatically
      approved.\n   (Note that addresses for SIP users and contacts are most generally\n
      \  referenced by a Presence URI of the form <pres:user@domain> but might\n   be
      referenced by a SIP or SIPS (Session Initiation Protocol Secure)\n   URI of
      the form <sip:user@domain> or <sips:user@domain>; because, in\n   practice,
      'pres' URIs are rarely used, the examples in this document\n   use 'sip' URIs.)\n
      \  In both SIP and XMPP, presence authorizations are long-lived (indeed\n   permanent
      if not explicitly cancelled).  In SIP, by default a\n   notification session
      is typically short-lived unless explicitly\n   extended (the default time-to-live
      of a SIP notification dialog is\n   3600 seconds, as specified in Section 6.4
      of [RFC3856], so that a\n   notification dialog needs to be explicitly refreshed
      in order for a\n   user's notification session to last as long as the contact's
      presence\n   session).  In XMPP, a user's notification session with a contact
      is\n   almost always automatically handled by the user's server based on the\n
      \  user's presence state (see [RFC6121] for details).\n"
    title: 5.1.  Overview
  - contents:
    - '5.2.  XMPP to SIP

      '
    - contents:
      - "5.2.1.  Requesting a Presence Authorization\n   The following diagram illustrates
        the protocol flow necessary to\n   establish an authorization for an XMPP
        user to a receive presence\n   notifications from a SIP contact, as further
        explained in the text\n   and examples after the diagram.\n   XMPP         XMPP
        \        SIP     SIP UA or\n   Client      Server       Proxy    Presence
        Server\n    |        + X2S GW         |            |\n    |            |            |
        \           |\n    | (F1) XMPP  |            |            |\n    | subscribe
        \ |            |            |\n    |...........>|            |            |\n
        \   |            | (F2) SIP   |            |\n    |            | SUBSCRIBE
        \ |            |\n    |            |***********>|            |\n    |            |
        \           | (F3) SIP   |\n    |            |            | SUBSCRIBE  |\n
        \   |            |            |***********>|\n    |            |            |
        (F4) SIP   |\n    |            |            | 200 OK     |\n    |            |
        \           |<***********|\n    |            | (F5) SIP   |            |\n
        \   |            | 200 OK     |            |\n    |            |<***********|
        \           |\n    |            |            | (F6) SIP   |\n    |            |
        \           | NOTIFY     |\n    |            |            | (pending)  |\n
        \   |            |            |<***********|\n    |            | (F7) SIP
        \  |            |\n    |            | NOTIFY     |            |\n    |            |<***********|
        \           |\n    |            | (F8) SIP   |            |\n    |            |
        200 OK     |            |\n    |            |***********>|            |\n
        \   |            |            | (F9) SIP   |\n    |            |            |
        200 OK     |\n    |            |            |***********>|\n    |            |
        \           | (F10) SIP  |\n    |            |            | NOTIFY     |\n
        \   |            |            | (active)   |\n    |            |            |<***********|\n
        \   |            | (F11) SIP  |            |\n    |            | NOTIFY     |
        \           |\n    |            |<***********|            |\n    |            |
        (F12) SIP  |            |\n    |            | 200 OK     |            |\n
        \   |            |***********>|            |\n    |            |            |
        (F13) SIP  |\n    |            |            | 200 OK     |\n    |            |
        \           |***********>|\n    | (F14) XMPP |            |            |\n
        \   | subscribed |            |            |\n    |<...........|            |
        \           |\n    | (F15) XMPP |            |            |\n    | presence
        \  |            |            |\n    |<...........|            |            |\n
        \   |            |            |            |\n   An XMPP user (e.g., juliet@example.com)
        asks for a presence\n   authorization by sending a request to a SIP contact
        (e.g.,\n   romeo@example.net), and the contact either accepts or declines
        the\n   request.  If the SIP contact accepts the request, the XMPP user will\n
        \  have a long-lived authorization to receive the SIP contact's presence\n
        \  information until (1) the XMPP user unsubscribes or (2) the SIP\n   contact
        cancels the authorization.  The request is encapsulated in a\n   <presence/>
        stanza of type \"subscribe\":\n   Example 1: XMPP User Subscribes to SIP Contact
        (F1)\n   |  <presence from='juliet@example.com'\n   |            to='romeo@example.net'\n
        \  |            type='subscribe'/>\n   Upon receiving such a <presence/> stanza,
        the XMPP server to which\n   Juliet has connected needs to determine the identity
        of the\n   domainpart in the 'to' address, which it does by following the\n
        \  procedures explained in Section 5 of [RFC7247].  If the domain is a\n   SIP
        domain, the XMPP server will hand off the <presence/> stanza to\n   an associated
        XMPP-to-SIP gateway or connection manager that natively\n   communicates with
        presence-aware SIP proxies.\n   The XMPP-to-SIP gateway is then responsible
        for translating the XMPP\n   request into a SIP SUBSCRIBE request addressed
        from the XMPP user to\n   the SIP contact:\n   Example 2: SIP Transformation
        of XMPP Presence Authorization Request\n   (F2)\n   |  SUBSCRIBE sip:romeo@example.net
        SIP/2.0\n   |  Via: SIP/2.0/TCP x2s.example.com;branch=z9hG4bKna998sk\n   |
        \ From: <sip:juliet@example.com>;tag=j89d\n   |  Call-ID: 5BCF940D-793D-43F8-8972-218F7F4EAA8C\n
        \  |  Event: presence\n   |  Max-Forwards: 70\n   |  CSeq: 1 SUBSCRIBE\n   |
        \ Contact: <sip:juliet@example.com>;gr=yn0cl4bnw0yr3vym\n   |  Accept: application/pidf+xml\n
        \  |  Expires: 3600\n   |  Content-Length: 0\n   Once the SIP proxy has delivered
        the SIP SUBSCRIBE to the SIP User\n   Agent or Presence Server (F3, no example
        shown), the SIP User Agent\n   would then send a response indicating acceptance
        of the request:\n   Example 3: SIP User Accepts Presence Authorization Request
        (F4)\n   |  SIP/2.0 200 OK\n   |  Via: SIP/2.0/TCP s2x.example.net;branch=z9hG4bKna998sk\n
        \  |  From: <sip:juliet@example.com>;tag=j89d\n   |  To: <sip:romeo@example.net>;tag=ffd2\n
        \  |  Call-ID: 5BCF940D-793D-43F8-8972-218F7F4EAA8C\n   |  CSeq: 1 SUBSCRIBE\n
        \  |  Contact: <sip:romeo@example.net>;gr=dr4hcr0st3lup4c\n   |  Expires:
        3600\n   |  Content-Length: 0\n   In accordance with Section 6.7 of [RFC3856],
        the XMPP-to-SIP gateway\n   needs to consider the state to be \"neutral\"
        until it receives a\n   NOTIFY message with a Subscription-State header [RFC6665]
        whose value\n   is \"active\".  Therefore, the SIP User Agent or Presence
        Server SHOULD\n   immediately send such a NOTIFY message (see Section 6 below).
        \ If the\n   XMPP-to-SIP gateway initially receives one or more NOTIFY messages\n
        \  with a Subscription-State header whose value is \"pending\" (F6), then\n
        \  it MUST respond to them on the SIP side but refrain from sending any\n
        \  presence stanzas from the SIP contact to the XMPP user.\n   Example 4:
        SIP User Agent or Presence Server Sends Presence\n   Notification (F10)\n
        \  |  NOTIFY sip:juliet@example.com SIP/2.0\n   |  Via: SIP/2.0/TCP simple.example.net;branch=z9hG4bKna998sk\n
        \  |  From: <sip:juliet@example.com>;tag=j89d\n   |  To: <sip:romeo@example.net>;tag=ffd2\n
        \  |  Call-ID: 5BCF940D-793D-43F8-8972-218F7F4EAA8C\n   |  Event: presence\n
        \  |  Subscription-State: active;expires=499\n   |  Max-Forwards: 70\n   |
        \ CSeq: 2 NOTIFY\n   |  Content-Type: application/pidf+xml\n   |  Content-Length:
        193\n   |\n   |  <?xml version='1.0' encoding='UTF-8'?>\n   |  <presence xmlns='urn:ietf:params:xml:ns:pidf'\n
        \  |            entity='pres:romeo@example.net'>\n   |    <tuple id='ID-dr4hcr0st3lup4c'>\n
        \  |      <status>\n   |        <basic>open</basic>\n   |        <show xmlns='jabber:client'>away</show>\n
        \  |      </status>\n   |    </tuple>\n   |  </presence>\n   Upon receiving
        the first NOTIFY with a state of active, the XMPP-to-\n   SIP gateway returns
        a 200 OK to the SIP User Agent or Presence Server\n   (F12, no example shown).\n
        \  The XMPP-to-SIP gateway also generates a <presence/> stanza of type\n   \"subscribed\":\n
        \  Example 5: XMPP User Receives Acknowledgement from SIP Contact (F14)\n
        \  |  <presence from='romeo@example.net'\n   |            to='juliet@example.com'\n
        \  |            type='subscribed'/>\n   As described in Section 6, if this
        first NOTIFY in the notification\n   session contains a body, then the XMPP-to-SIP
        gateway also generates\n   a presence notification addressed to the XMPP user
        (if the NOTIFY\n   does not contain a body, then the gateway would interpret
        it as\n   unknown or \"closed\"):\n   Example 6: XMPP User Receives Presence
        Notification from SIP Contact\n   (F15)\n   |  <presence from='romeo@example.net/dr4hcr0st3lup4c'\n
        \  |            to='juliet@example.com'/>\n"
      title: 5.2.1.  Requesting a Presence Authorization
    - contents:
      - "5.2.2.  Refreshing a Notification Dialog\n   It is the responsibility of
        the XMPP-to-SIP gateway to set the value\n   of the Expires header and to
        periodically renew the notification\n   dialog on the SIMPLE side of the gateway.
        \ For example, the XMPP-to-\n   SIP gateway SHOULD send a new SUBSCRIBE request
        to the SIP contact\n   whenever the XMPP user initiates a presence session
        with the XMPP\n   server by sending initial presence to its XMPP server (this
        is\n   functionally equivalent to sending an XMPP presence probe).  The\n
        \  XMPP-to-SIP gateway SHOULD also send a new SUBSCRIBE request to the\n   SIP
        contact sufficiently in advance of when the SIP notification\n   dialog is
        scheduled to expire during the XMPP user's active presence\n   session.\n
        \  The rules regarding SIP SUBSCRIBE requests for the purpose of\n   establishing
        and refreshing a notification dialog are provided in\n   [RFC6665].  Those
        rules also apply to XMPP-to-SIP gateways.\n   Furthermore, an XMPP-to-SIP
        gateway MUST consider the XMPP presence\n   authorization to be permanently
        cancelled (and so inform the XMPP\n   user) if it receives a SIP response
        of 403, 489, or 603.  By\n   contrast, it is appropriate to consider a SIP
        response of 423 or 481\n   to be a transient error and to honor the long-lived
        XMPP presence\n   authorization.  [RFC6665] explains more detailed considerations
        about\n   the handling of SIP responses in relation to notification dialogs
        and\n   refreshes.\n   Finally, see the Privacy and Security Considerations
        section\n   (Section 8) for important information and requirements regarding
        the\n   security implications of notification refreshes.\n"
      title: 5.2.2.  Refreshing a Notification Dialog
    - contents:
      - "5.2.3.  Cancelling a Presence Authorization\n   The following diagram illustrates
        the protocol flow by which an XMPP\n   user cancels her outbound presence
        authorization with a SIP contact\n   (i.e., indicates that she no longer wishes
        to be authorized to see\n   the SIP contact's presence).  As can be seen,
        SIMPLE itself does not\n   have a construct that enables a user to cancel
        her outbound presence\n   authorization (however, in many SIP/SIMPLE implementations
        she could\n   use a technology such as XCAP [RFC4825] to remove the contact
        from\n   her address list); therefore, this flow instead results in the\n
        \  cancellation of the user's notification dialog (with the implication\n
        \  on the XMPP side that the user will not request a subsequent\n   notification
        dialog).  Additional details are explained in the text\n   and examples after
        the diagram.\n   XMPP         XMPP         SIP        SIP UA or\n   Client
        \     Server       Proxy    Presence Server\n    |        + X2S GW         |
        \           |\n    |            |            |            |\n    | (F16) XMPP
        |            |            |\n    |unsubscribe |            |            |\n
        \   |...........>|            |            |\n    |            | (F17) SIP
        \ |            |\n    |            | SUBSCRIBE  |            |\n    |            |
        Expires: 0 |            |\n    |            |***********>|            |\n
        \   |            |            | (F18) SIP  |\n    |            |            |
        SUBSCRIBE  |\n    |            |            | Expires: 0 |\n    |            |
        \           |***********>|\n    |            |            | (F19) SIP  |\n
        \   |            |            | 200 OK     |\n    |            |            |<***********|\n
        \   |            | (F20) SIP  |            |\n    |            | 200 OK     |
        \           |\n    |            |<***********|            |\n    | (F21) XMPP
        |            |            |\n    |unsubscribed|            |            |\n
        \   |<...........|            |            |\n    |            | (F22) SIP
        \ |            |\n    |            | NOTIFY     |            |\n    |            |
        terminated |            |\n    |            |***********>|            |\n
        \   |            |            | (F23) SIP  |\n    |            |            |
        NOTIFY     |\n    |            |            | terminated |\n    |            |
        \           |***********>|\n    |            |            | (F24) SIP  |\n
        \   |            |            | 200 OK     |\n    |            |            |<***********|\n
        \   |            | (F25) SIP  |            |\n    |            | 200 OK     |
        \           |\n    |            |<***********|            |\n    |            |
        \           |            |\n   At any time after subscribing, the XMPP user
        can indicate that she no\n   longer wishes to be authorized to receive presence
        notifications from\n   the contact.  This is done by sending a <presence/>
        stanza of type\n   \"unsubscribe\":\n   Example 7: XMPP User Unsubscribes
        from SIP Contact (F16)\n   |  <presence from='juliet@example.com'\n   |            to='romeo@example.net'\n
        \  |            type='unsubscribe'/>\n   The XMPP-to-SIP gateway is responsible
        for translating the XMPP\n   unsubscribe command into a SIP SUBSCRIBE request
        with the Expires\n   header set to a value of zero (\"0\"):\n   Example 8:
        SIP Transformation of XMPP Unsubscribe (F17)\n   |  SUBSCRIBE sip:romeo@example.net
        SIP/2.0\n   |  Via: SIP/2.0/TCP s2x.example.net;branch=z9hG4bKna998sk\n   |
        \ From: <sip:juliet@example.com>;tag=j89d\n   |  To: <sip:romeo@example.com>;tag=ffd2\n
        \  |  Call-ID: 5BCF940D-793D-43F8-8972-218F7F4EAA8C\n   |  Event: presence\n
        \  |  Max-Forwards: 70\n   |  CSeq: 42 SUBSCRIBE\n   |  Contact: <sip:juliet@example.com>;gr=yn0cl4bnw0yr3vym\n
        \  |  Accept: application/pidf+xml\n   |  Expires: 0\n   |  Content-Length:
        0\n   Upon receiving the SIP 200 OK acknowledging the cancellation, the\n
        \  XMPP-to-SIP gateway SHOULD send a <presence/> stanza of type\n   \"unsubscribed\"
        addressed to the XMPP user:\n   Example 9: XMPP User Receives Unsubscribed
        Notification (F21)\n   |  <presence from='romeo@example.net'\n   |            to='juliet@example.com'\n
        \  |            type='unsubscribed'/>\n   In accordance with Section 4.4.1
        of [RFC6665], the XMPP-to-SIP\n   gateway is then responsible for sending
        a NOTIFY message with a\n   Subscription-State header of \"terminated\" in
        order to formally end\n   the XMPP user's outbound presence authorization
        and the associated\n   SIP dialog.\n   Example 10: XMPP-to-SIP Gateway Sends
        Presence Notification to\n   Terminate Authorization (F25)\n   |  NOTIFY sip:juliet@example.com
        SIP/2.0\n   |  Via: SIP/2.0/TCP simple.example.net;branch=z9hG4bKna998sk\n
        \  |  From: <sip:juliet@example.com>;tag=j89d\n   |  To: <sip:romeo@example.net>;tag=ffd2\n
        \  |  Call-ID: 5BCF940D-793D-43F8-8972-218F7F4EAA8C\n   |  Event: presence\n
        \  |  Subscription-State: terminated\n   |  Max-Forwards: 70\n   |  CSeq:
        43 NOTIFY\n   |  Content-Length: 0\n   Note: When the XMPP user cancels her
        outbound presence authorization\n   to the SIP user, any inbound authorization
        that she might have\n   approved (thus enabling the SIP user to see her presence)
        remains\n   unchanged.\n"
      title: 5.2.3.  Cancelling a Presence Authorization
    title: 5.2.  XMPP to SIP
  - contents:
    - '5.3.  SIP to XMPP

      '
    - contents:
      - "5.3.1.  Requesting a Presence Authorization\n   The following diagram illustrates
        the protocol flow for establishing\n   an authorization for a SIP user to
        receive presence notifications\n   from an XMPP contact, as further explained
        in the text and examples\n   after the diagram.\n   SIP         SIP         XMPP
        \        XMPP\n   UA         Proxy       Server        Client\n    |       +
        S2X GW         |           |\n    |           |            |           |\n
        \   | (F26) SIP |            |           |\n    | SUBSCRIBE |            |
        \          |\n    |**********>|            |           |\n    | (F27) SIP
        |            |           |\n    | 200 OK    |            |           |\n    |<**********|
        \           |           |\n    |           | (F28) XMPP |           |\n    |
        \          | subscribe  |           |\n    |           |...........>|           |\n
        \   |           |            | (F29) XMPP|\n    |           |            |
        subscribe |\n    |           |            |..........>|\n    |           |
        \           | (F30) XMPP|\n    |           |            | subscribed|\n    |
        \          |            |<..........|\n    |           | (F31) XMPP |           |\n
        \   |           | subscribed |           |\n    |           |<...........|
        \          |\n    | (F32) SIP |            |           |\n    | NOTIFY    |
        \           |           |\n    | (active)  |            |           |\n    |<**********|
        \           |           |\n    | (F33) SIP |            |           |\n    |
        200 OK    |            |           |\n    |**********>|            |           |\n
        \   |           |            |           |\n   A SIP User Agent initiates
        a presence authorization to an XMPP\n   contact's presence information by
        sending a SIP SUBSCRIBE request to\n   the contact.  The following is an example
        of such a request:\n   Example 11: SIP User Subscribes to XMPP Contact (F26)\n
        \  |  SUBSCRIBE sip:juliet@example.com SIP/2.0\n   |  Via: SIP/2.0/TCP s2x.example.net;branch=z9hG4bKna998sk\n
        \  |  From: <sip:romeo@example.net>;tag=xfg9\n   |  To: <sip:juliet@example.net>\n
        \  |  Call-ID: AA5A8BE5-CBB7-42B9-8181-6230012B1E11\n   |  Event: presence\n
        \  |  Max-Forwards: 70\n   |  CSeq: 1 SUBSCRIBE\n   |  Contact: <sip:romeo@example.net>;gr=dr4hcr0st3lup4c\n
        \  |  Accept: application/pidf+xml\n   |  Content-Length: 0\n   Notice that
        the Expires header was not included in the SUBSCRIBE\n   request; this means
        that the default value of 3600 (i.e., 3600\n   seconds = 1 hour) applies.\n
        \  Upon receiving the SUBSCRIBE, the SIP proxy needs to determine the\n   identity
        of the domain portion of the Request-URI, which it does by\n   following the
        procedures explained in Section 5 of [RFC7247].  If the\n   domain is an XMPP
        domain, the SIP proxy will hand off the SUBSCRIBE\n   to an associated SIP-to-XMPP
        gateway or connection manager that\n   natively communicates with XMPP servers.\n
        \  The SIP-to-XMPP gateway is then responsible for translating the\n   SUBSCRIBE
        into an XMPP authorization request addressed from the SIP\n   user to the
        XMPP contact:\n   Example 12: XMPP Transformation of SIP SUBSCRIBE (F28)\n
        \  |  <presence from='romeo@example.net'\n   |            to='juliet@example.com'\n
        \  |            type='subscribe'/>\n   In accordance with [RFC6121], the XMPP
        user's server delivers the\n   presence authorization request to the XMPP
        user (or, if an\n   authorization already exists in the XMPP user's roster,
        the XMPP\n   server SHOULD auto-reply with a <presence/> stanza of type\n
        \  'subscribed').\n   The \"happy path\" is for the XMPP user to approve the
        presence\n   authorization request by generating a <presence/> stanza of type\n
        \  \"subscribed\" (F30).  The XMPP server then stamps that presence stanza\n
        \  with the 'from' address of the XMPP contact and sends it to the SIP\n   user
        (F31).  Upon receiving the stanza, the SIP-to-XMPP gateway\n   generates an
        empty SIP NOTIFY message with a Subscription-State\n   header [RFC6665] of
        \"active\", which serves to inform the SIP user\n   that the presence authorization
        request has been approved (F32).\n   Example 13: XMPP User Approves Presence
        Authorization Request (F31)\n   |  <presence from='juliet@example.com'\n   |
        \           to='romeo@example.net'\n   |            type='subscribed'/>\n
        \  Example 14: Presence Authorization Request Approved (F32)\n   |  NOTIFY
        sip:romeo@example.net SIP/2.0\n   |  Via: SIP/2.0/TCP s2x.example.net;branch=z9hG4bKna998sk\n
        \  |  From: <sip:romeo@example.net>;tag=xfg9\n   |  To: <sip:juliet@example.com>;tag=ur93\n
        \  |  Call-ID: AA5A8BE5-CBB7-42B9-8181-6230012B1E11\n   |  Event: presence\n
        \  |  Subscription-State: active\n   |  Max-Forwards: 70\n   |  CSeq: 2 NOTIFY\n
        \  |  Content-Length: 0\n   As an alternative to the \"happy path\", the XMPP
        user could decline\n   the presence authorization request by generating a
        <presence/> stanza\n   of type \"unsubscribed\".  The XMPP server would stamp
        that presence\n   stanza with the 'from' address of the XMPP contact and would
        send it\n   to the SIP user.  The SIP-to-XMPP gateway then transforms that
        stanza\n   into an empty SIP NOTIFY with a Subscription-State header [RFC6665]\n
        \  of \"terminated\" and a reason of \"rejected\":\n   Example 15: XMPP User
        Rejects Presence Authorization Request\n   |  <presence from='juliet@example.com'\n
        \  |            to='romeo@example.net'\n   |            type='unsubscribed'/>\n
        \  Example 16: Presence Authorization Request Rejected\n   |  NOTIFY sip:romeo@example.net
        SIP/2.0\n   |  Via: SIP/2.0/TCP s2x.example.net;branch=z9hG4bKna998sk\n   |
        \ From: <sip:romeo@example.net>;tag=xfg9\n   |  To: <sip:juliet@example.com>;tag=ur93\n
        \  |  Call-ID: AA5A8BE5-CBB7-42B9-8181-6230012B1E11\n   |  Event: presence\n
        \  |  Subscription-State: terminated;reason=rejected\n   |  Max-Forwards:
        70\n   |  CSeq: 2 NOTIFY\n   |  Content-Length: 0\n"
      title: 5.3.1.  Requesting a Presence Authorization
    - contents:
      - "5.3.2.  Refreshing a Notification Dialog\n   For as long as a SIP user is
        online and wishes to maintain a\n   notification session (i.e., receive presence
        notifications from the\n   XMPP contact), the user's SIP User Agent is responsible
        for\n   periodically refreshing the notification dialog by sending an updated\n
        \  SUBSCRIBE request with an appropriate value for the Expires header.\n   In
        response, the presence-aware SIP-to-XMPP gateway sends a SIP\n   NOTIFY message
        to the SIP User Agent (per [RFC6665]); if the SIP-to-\n   XMPP gateway has
        meaningful information about the availability state\n   of the XMPP user (e.g.,
        obtained from the core presence session in\n   the XMPP server or learned
        by sending a presence probe as described\n   under Section 7), then the NOTIFY
        communicates that information\n   (e.g., by including a PIDF body [RFC3863]
        with the relevant data),\n   whereas if the SIP-to-XMPP gateway does not have
        meaningful\n   information about the availability state of the XMPP user,
        then the\n   NOTIFY MUST be empty as allowed by [RFC6665].\n"
      title: 5.3.2.  Refreshing a Notification Dialog
    - contents:
      - "5.3.3.  Cancelling a Presence Authorization\n   SIP does not directly have
        a construct for cancelling an outbound\n   presence authorization.  Instead,
        the SIP user would terminate his\n   outbound notification dialog by sending
        a SUBSCRIBE message whose\n   Expires header is set to a value of zero (\"0\")
        and then never renew\n   it:\n   Example 17: SIP User Terminates Notification
        Dialog\n   |  SUBSCRIBE sip:juliet@example.com SIP/2.0\n   |  Via: SIP/2.0/TCP
        simple.example.net;branch=z9hG4bKna998sk\n   |  From: <sip:romeo@example.net>;tag=xfg9\n
        \  |  To: <sip:juliet@example.com>;tag=ur93\n   |  Call-ID: AA5A8BE5-CBB7-42B9-8181-6230012B1E11\n
        \  |  Event: presence\n   |  Max-Forwards: 70\n   |  CSeq: 66 SUBSCRIBE\n
        \  |  Contact: <sip:romeo@example.net>;gr=dr4hcr0st3lup4c\n   |  Expires:
        0\n   |  Content-Length: 0\n   A presence-aware SIP-to-XMPP gateway is then
        responsible for:\n   1.  Sending a SIP NOTIFY request to the SIP User Agent
        containing a\n       PIDF document specifying that the XMPP contact now has
        a basic\n       status of \"closed\", including a Subscription-State header\n
        \      [RFC6665] of \"terminated\" with a reason of \"timeout\".\n   2.  Sending
        an XMPP <presence/> stanza of type \"unavailable\" to the\n       XMPP contact.\n
        \  Note: When the SIP user cancels his outbound presence authorization\n   to
        the XMPP user, any inbound authorization that he might have\n   approved (enabling
        the XMPP user to see his presence) remains\n   unchanged.\n"
      title: 5.3.3.  Cancelling a Presence Authorization
    title: 5.3.  SIP to XMPP
  title: 5.  Presence Authorizations
- contents:
  - '6.  Notifications of Presence Information

    '
  - contents:
    - "6.1.  Overview\n   Both XMPP and presence-aware SIP systems enable entities
      (often, but\n   not necessarily, human users) to send presence notifications
      to other\n   entities.  At its most basic, the term \"presence\" refers to\n
      \  information about an entity's \"on/off\" availability for communication\n
      \  on a network.  Often, this basic concept is supplemented by\n   information
      that further specifies the entity's context or status\n   while available for
      communication; these availability states commonly\n   include \"away\" and \"do
      not disturb\".  Some systems and protocols\n   extend the concepts of presence
      and availability even further and\n   refer to any relatively ephemeral information
      about an entity as a\n   kind of presence; categories of such \"extended presence\"
      include\n   geographical location (e.g., GPS coordinates), user mood (e.g.,\n
      \  grumpy), user activity (e.g., walking), and ambient environment\n   (e.g.,
      noisy).  This document focuses on the \"least common\n   denominator\" of network
      availability only.  Future documents might\n   address broader notions of presence,
      including availability states\n   and extended presence or so-called \"rich
      presence\" as defined in\n   specifications such as [RFC4480], [XEP-0107], and
      [XEP-0108].\n   The XMPP instant messaging and presence specification [RFC6121]\n
      \  defines how XMPP <presence/> stanzas can indicate availability (via\n   the
      absence of a 'type' attribute) or lack of availability (via a\n   'type' attribute
      with a value of \"unavailable\").  SIP presence using\n   a SIP event package
      for presence is specified in [RFC3856].\n   As described in [RFC6121], XMPP
      presence information about an entity\n   is communicated by means of an XML
      <presence/> stanza sent over an\n   XML stream.  This document assumes that
      such a <presence/> stanza is\n   sent from an XMPP client to an XMPP server
      over an XML stream\n   negotiated between the client and the server, and that
      the client is\n   controlled by a human user.  In general, XMPP presence is
      sent by the\n   user's client to the user's server and then broadcast to all
      entities\n   who are subscribed to the user's presence information.\n   As described
      in [RFC3856], presence information about an entity is\n   communicated by means
      of a SIP NOTIFY event sent from a SIP User\n   Agent to an intended recipient
      who is most generally referenced by a\n   Presence URI of the form <pres:user@domain>
      but who might be\n   referenced by a SIP or SIPS URI of the form <sip:user@domain>
      or\n   <sips:user@domain>.\n"
    title: 6.1.  Overview
  - contents:
    - "6.2.  XMPP to SIP\n   When Juliet interacts with her XMPP client to modify
      her presence\n   information (or when her client automatically updates her presence\n
      \  information, e.g., via an \"auto-away\" feature), her client generates\n
      \  an XMPP <presence/> stanza.  The syntax of the <presence/> stanza,\n   including
      required and optional elements and attributes, is defined\n   in [RFC6121].
      \ The following is an example of such a stanza:\n   Example 18: XMPP User Sends
      Presence Notification\n   |  <presence from='juliet@example.com/yn0cl4bnw0yr3vym'/>\n
      \  Upon receiving such a stanza, the XMPP server to which Juliet has\n   connected
      broadcasts it to all subscribers who are authorized to\n   receive presence
      notifications from Juliet and who have indicated a\n   current interest in receiving
      notifications (this is similar to the\n   SIP NOTIFY method).  For each subscriber,
      broadcasting the presence\n   notification involves adding the 'to' address
      of the subscriber and\n   then either delivering the notification to a local
      recipient (if the\n   hostname in the subscriber's address matches one of the
      hostnames\n   serviced by the XMPP server) or attempting to route it to the
      foreign\n   domain that services the hostname in the subscriber's address.  If\n
      \  the notification is bound for an address at a foreign domain, the\n   XMPP
      server needs to determine the identity of the domainpart in the\n   'to' address,
      which it does by following the procedures discussed in\n   [RFC7247].  If the
      domain is a SIP domain, the XMPP server will hand\n   off the <presence/> stanza
      to an associated XMPP-to-SIP gateway or\n   connection manager that natively
      communicates with presence-aware SIP\n   proxy.\n   The XMPP-to-SIP gateway
      is then responsible for translating the XMPP\n   <presence/> stanza into a SIP
      NOTIFY request (including the PIDF\n   document) from the XMPP user to the SIP
      contact.\n   Example 19: SIP Transformation of XMPP Presence Notification\n
      \  |  NOTIFY sip:juliet@example.com SIP/2.0\n   |  Via: SIP/2.0/TCP x2s.example.com;branch=z9hG4bKna998sk\n
      \  |  From: <sip:juliet@example.com>;tag=gh19\n   |  To: <sip:romeo@example.net>\n
      \  |  Contact: <sip:juliet@example.com>;gr=yn0cl4bnw0yr3vym\n   |  Call-ID:
      2B44E147-3B53-45E4-9D48-C051F3216D14\n   |  Event: presence\n   |  Subscription-State:
      active;expires=599\n   |  Max-Forwards: 70\n   |  CSeq: 2 NOTIFY\n   |  Content-Type:
      application/pidf+xml\n   |  Content-Length: 192\n   |\n   |  <?xml version='1.0'
      encoding='UTF-8'?>\n   |  <presence xmlns='urn:ietf:params:xml:ns:pidf'\n   |
      \           entity='pres:juliet@example.com'>\n   |    <tuple id='ID-yn0cl4bnw0yr3vym'>\n
      \  |      <status>\n   |        <basic>open</basic>\n   |        <show xmlns='jabber:client'>away</show>\n
      \  |      </status>\n   |    </tuple>\n   |  </presence>\n   The mapping of
      XMPP syntax elements to SIP syntax elements MUST be as\n   shown in the following
      table.  (Mappings for elements not mentioned\n   are undefined and therefore
      are a matter of implementation.)\n      +-----------------------------+---------------------------+\n
      \     |  XMPP Element or Attribute  |  SIP Header or PIDF Data  |\n      +-----------------------------+---------------------------+\n
      \     |  <presence/> stanza         |  \"Event: presence\" (1)    |\n      +-----------------------------+---------------------------+\n
      \     |  XMPP resource identifier   |  tuple 'id' attribute (2) |\n      +-----------------------------+---------------------------+\n
      \     |  from                       |  From                     |\n      +-----------------------------+---------------------------+\n
      \     |  id                         |  no mapping (3)           |\n      +-----------------------------+---------------------------+\n
      \     |  to                         |  To                       |\n      +-----------------------------+---------------------------+\n
      \     |  type                       |  basic status (4) (5)     |\n      +-----------------------------+---------------------------+\n
      \     |  xml:lang                   |  Content-Language         |\n      +-----------------------------+---------------------------+\n
      \     |  <priority/>                |  priority for tuple (6)   |\n      +-----------------------------+---------------------------+\n
      \     |  <show/>                    |  no mapping (7)           |\n      +-----------------------------+---------------------------+\n
      \     |  <status/>                  |  <note/>                  |\n      +-----------------------------+---------------------------+\n
      \  Table 1: Presence Syntax Mapping from XMPP to SIP\n   Note the following
      regarding these mappings:\n   1.  Only an XMPP <presence/> stanza that lacks
      a 'type' attribute or\n       whose 'type' attribute has a value of \"unavailable\"
      is mapped by\n       an XMPP-to-SIP gateway to a SIP NOTIFY request, because
      those are\n       the only <presence/> stanzas that represent notifications.\n
      \  2.  The PIDF schema defines the tuple 'id' attribute as having a\n       datatype
      of \"xs:ID\"; because this datatype is more restrictive\n       than the \"xs:string\"
      datatype for XMPP resourceparts (in\n       particular, a number is not allowed
      as the first character of an\n       ID), it is RECOMMENDED to prepend the resourcepart
      with \"ID-\" or\n       some other alphabetic string when mapping from XMPP
      to SIP.\n   3.  In practice, XMPP <presence/> stanzas often do not include the\n
      \      'id' attribute.\n   4.  Because the lack of a 'type' attribute indicates
      that an XMPP\n       entity is available for communication, the XMPP-to-SIP
      gateway\n       MUST map that information to a PIDF basic status of \"open\".\n
      \      Because a 'type' attribute with a value of \"unavailable\"\n       indicates
      that an XMPP entity is not available for communication,\n       the XMPP-to-SIP
      gateway MUST map that information to a PIDF\n       <basic/> status of \"closed\".\n
      \  5.  When the XMPP-to-SIP gateway receives an XMPP presence of type\n       \"unavailable\"
      from the XMPP contact, it sends a SIP NOTIFY\n       request from the XMPP contact
      to the SIP User Agent containing a\n       PIDF document specifying that the
      XMPP contact now has a basic\n       status of \"closed\".\n   6.  The value
      of the XMPP <priority/> element is an integer between\n       -128 and +127,
      whereas the value of the PIDF <contact/> element's\n       'priority' attribute
      is a decimal number from zero to one\n       inclusive, with a maximum of three
      decimal places.  If the value\n       of the XMPP <priority/> element is negative,
      an XMPP-to-SIP\n       gateway MUST NOT map the value.  If an XMPP-to-SIP gateway
      maps\n       positive values, it SHOULD treat XMPP priority 0 as PIDF priority\n
      \      0 and XMPP priority 127 as PIDF priority 1, mapping intermediate\n       values
      appropriately so that they are unique (e.g., XMPP priority\n       1 to PIDF
      priority 0.007, XMPP priority 2 to PIDF priority 0.015,\n       and so on up
      through mapping XMPP priority 126 to PIDF priority\n       0.992; note that
      this is an example only and that the exact\n       mapping is up to the implementation).\n
      \  7.  Some implementations support custom extensions to encapsulate\n       detailed
      information about availability; however, there is no\n       need to standardize
      a PIDF extension for this purpose, because\n       PIDF is already extensible,
      and thus the XMPP <show/> element\n       (qualified by the 'jabber:client'
      namespace) can be included\n       directly in the PIDF XML.  The examples in
      this document\n       illustrate this usage, which is RECOMMENDED.  The most
      useful\n       values are likely \"away\" and \"dnd\" (both defined in [RFC6121]),\n
      \      although note that in XMPP a value of \"dnd\" (short for \"do not\n       disturb\")
      merely means \"busy\" and does not imply that a server or\n       client ought
      to block incoming traffic while the user is in that\n       state.  Naturally,
      an XMPP-to-SIP gateway can choose to translate\n       a custom extension into
      an established value of the XMPP <show/>\n       element (as defined in [RFC6121])
      or translate a <show/> element\n       into a custom extension that the XMPP-to-SIP
      gateway knows is\n       supported by the SIP User Agent of the intended recipient.\n
      \      Unfortunately, this behavior does not guarantee that information\n       will
      not be lost; to help prevent information loss, an XMPP-to-\n       SIP gateway
      ought to include both the <show/> element and the\n       custom extension if
      it cannot suitably translate the custom value\n       into a <show/> value.
      \ However, there is no guarantee that the\n       SIP receiver will render a
      standard XMPP <show/> value or custom\n       extension.\n   In XMPP, a user
      can connect with multiple clients at the same time\n   [RFC6120]; for presence
      notification purposes [RFC6121], each client\n   is associated with a distinct
      resourcepart [RFC7622] and a contact's\n   SIP User Agent will receive a separate
      presence notification from\n   each of the XMPP user's clients.  Although the
      interpretation of\n   multiple presence notifications from a single user is
      a matter of\n   implementation by the contact's SIP User Agent, typically the
      SIP\n   User Agent will show the \"most available\" status for the contact\n
      \  (e.g., if the user is online with three devices, one of which is\n   \"away\",
      one of which is in \"do not disturb\" mode, and one of which is\n   \"available\"
      with no qualifications, then the status shown will simply\n   be \"available\").
      \ In SIP, it is reasonable for a SIP User Agent to\n   model multiple presence
      notifications from an XMPP user in the same\n   way that it would handle multiple
      tuples from a SIP user.\n"
    title: 6.2.  XMPP to SIP
  - contents:
    - "6.3.  SIP to XMPP\n   When Romeo changes his presence, his SIP User Agent generates
      a SIP\n   NOTIFY request for any contacts that have presence authorizations
      and\n   notification sessions.  The syntax of the NOTIFY request is defined\n
      \  in [RFC3856].  The following is an example of such a request:\n   Example
      20: SIP User Sends Presence Notification\n   |  NOTIFY sip:romeo@example.net
      SIP/2.0\n   |  Via: SIP/2.0/TCP simple.example.net;branch=z9hG4bKna998sk\n   |
      \ From: <sip:romeo@example.net>;tag=yt66\n   |  To: <sip:juliet@example.com>;tag=bi54\n
      \  |  Contact: <sip:romeo@example.net>;gr=dr4hcr0st3lup4c\n   |  Call-ID: C33C6C9D-0F4A-42F9-B95C-7CE86B526B5B\n
      \  |  Event: presence\n   |  Subscription-State: active;expires=499\n   |  Max-Forwards:
      70\n   |  CSeq: 8 NOTIFY\n   |  Content-Type: application/pidf+xml\n   |  Content-Length:
      193\n   |\n   |  <?xml version='1.0' encoding='UTF-8'?>\n   |  <presence xmlns='urn:ietf:params:xml:ns:pidf'\n
      \  |            entity='pres:romeo@example.net'>\n   |    <tuple id='ID-dr4hcr0st3lup4c'>\n
      \  |      <status>\n   |        <basic>closed</basic>\n   |      </status>\n
      \  |    </tuple>\n   |  </presence>\n   Upon receiving the NOTIFY, the SIP proxy
      needs to determine the\n   identity of the domain portion of the Request-URI,
      which it does by\n   following the procedures discussed in [RFC7247].  If the
      domain is an\n   XMPP domain, the SIP proxy will hand off the NOTIFY to an associated\n
      \  SIP-to-XMPP gateway or connection manager that natively communicates\n   with
      XMPP servers.\n   The SIP-to-XMPP gateway is then responsible for translating
      the\n   NOTIFY into an XMPP <presence/> stanza addressed from the SIP user to\n
      \  the XMPP contact:\n   Example 21: XMPP Transformation of SIP Presence Notification\n
      \  |  <presence from='romeo@example.net'\n   |            to='juliet@example.com/yn0cl4bnw0yr3vym'\n
      \  |            type='unavailable'/>\n   The mapping of SIP syntax elements
      to XMPP syntax elements MUST be as\n   shown in the following table.  (Mappings
      for elements not mentioned\n   are undefined and therefore are a matter of implementation.)\n
      \     +---------------------------+-----------------------------+\n      |  SIP
      Header or PIDF Data  |  XMPP Element or Attribute  |\n      +---------------------------+-----------------------------+\n
      \     |  basic status             |  type (1)                   |\n      +---------------------------+-----------------------------+\n
      \     |  Content-Language         |  xml:lang                   |\n      +---------------------------+-----------------------------+\n
      \     |  From                     |  from                       |\n      +---------------------------+-----------------------------+\n
      \     |  priority for tuple       |  <priority/> (2)            |\n      +---------------------------+-----------------------------+\n
      \     |  To                       |  to                         |\n      +---------------------------+-----------------------------+\n
      \     |  <note/>                  |  <status/>                  |\n      +---------------------------+-----------------------------+\n
      \     |  <show/>                  |  <show/> (3)                |\n      +---------------------------+-----------------------------+\n
      \  Table 2: Presence Syntax Mapping from SIP to XMPP\n   Note the following
      regarding these mappings:\n   1.  A PIDF basic status of \"open\" MUST be mapped
      to a <presence/>\n       stanza with no 'type' attribute, and a PIDF basic status
      of\n       \"closed\" MUST be mapped to a <presence/> stanza whose 'type'\n
      \      attribute has a value of \"unavailable\".\n   2.  See the notes following
      Table 1 of this document regarding\n       mapping of presence priority.\n   3.
      \ If a SIP implementation supports the XMPP <show/> element\n       (qualified
      by the 'jabber:client' namespace) as a PIDF extension\n       for availability
      status as described in the notes following\n       Table 1 of this document,
      the SIP-to-XMPP gateway is responsible\n       for including that element in
      the XMPP presence notification.\n"
    title: 6.3.  SIP to XMPP
  title: 6.  Notifications of Presence Information
- contents:
  - "7.  Polling for Presence Information\n   Both SIP and XMPP provide methods for
    explicitly requesting one-time\n   information about the current presence status
    of another entity.\n   These are \"polling\" methods as opposed to the publish-subscribe\n
    \  methods described in the rest of this document.\n"
  - contents:
    - "7.1.  XMPP to SIP\n   In XMPP, an explicit request for information about current
      presence\n   status is completed by sending a <presence/> stanza of type \"probe\":\n
      \  Example 22: XMPP Server Sends Presence Probe on Behalf of XMPP User\n   |
      \ <presence from='juliet@example.com/chamber'\n   |            to='romeo@example.net'\n
      \  |            type='probe'/>\n   Note: As described in [RFC6121], presence
      probes are used by XMPP\n   servers to request presence on behalf of XMPP users;
      XMPP clients are\n   discouraged from sending presence probes, because retrieving
      presence\n   is a service that XMPP servers provide automatically.\n   A SIP-to-XMPP
      gateway would transform the presence probe into its SIP\n   equivalent, which
      is a SUBSCRIBE request with an Expires header value\n   of zero (\"0\") in a
      new dialog:\n   Example 23: SIP Transformation of XMPP Presence Probe\n   |
      \ SUBSCRIBE sip:romeo@example.net SIP/2.0\n   |  Via: SIP/2.0/TCP x2s.example.com;branch=z9hG4bKna998sk\n
      \  |  From: <sip:juliet@example.com>;tag=j89d\n   |  Call-ID: 2398B737-566F-4CBB-A21A-1F8EEF7AF423\n
      \  |  Event: presence\n   |  Max-Forwards: 70\n   |  CSeq: 1 SUBSCRIBE\n   |
      \ Contact: <sip:juliet@example.com>;gr=yn0cl4bnw0yr3vym\n   |  Accept: application/pidf+xml\n
      \  |  Expires: 0\n   |  Content-Length: 0\n   As described in [RFC3856], this
      causes a NOTIFY to be sent to the\n   subscriber, just as a presence probe does
      (the transformation rules\n   for presence notifications have been previously
      described in\n   Section 6.2 of this document).\n"
    title: 7.1.  XMPP to SIP
  - contents:
    - "7.2.  SIP to XMPP\n   In SIP, an explicit request for information about current
      presence\n   status is effectively completed by sending a SUBSCRIBE with an\n
      \  Expires header value of zero (\"0\"):\n   Example 24: SIP User Sends Presence
      Request\n   |  SUBSCRIBE sip:juliet@example.com SIP/2.0\n   |  Via: SIP/2.0/TCP
      simple.example.net;branch=z9hG4bKna998sk\n   |  From: <sip:romeo@example.net>;tag=yt66\n
      \  |  Call-ID: 717B1B84-F080-4F12-9F44-0EC1ADE767B9\n   |  Event: presence\n
      \  |  Max-Forwards: 70\n   |  CSeq: 1 SUBSCRIBE\n   |  Contact: <sip:romeo@example.net>;gr=dr4hcr0st3lup4c\n
      \  |  Expires: 0\n   |  Content-Length: 0\n   A presence-aware SIP-to-XMPP gateway
      translates such a SIP request\n   into a <presence/> stanza of type \"probe\"
      if it does not already have\n   presence information about the contact:\n   Example
      25: XMPP Transformation of SIP Presence Request\n   |  <presence from='romeo@example.net'\n
      \  |            to='juliet@example.com'\n   |            type='probe'/>\n"
    title: 7.2.  SIP to XMPP
  title: 7.  Polling for Presence Information
- contents:
  - "8.  Privacy and Security Considerations\n   Detailed privacy and security considerations
    are given for presence\n   protocols in [RFC2779], for SIP-based presence in [RFC3856]
    (see also\n   [RFC3261]), and for XMPP-based presence in [RFC6121] (see also\n
    \  [RFC6120]).\n"
  - contents:
    - "8.1.  Amplification Attacks\n   There exists the possibility of an amplification
      attack launched from\n   the XMPP network against a SIP Presence Server, because
      each long-\n   lived XMPP presence authorization would typically result in multiple\n
      \  notification dialog refreshes on the SIP side of an XMPP-to-SIP\n   gateway.
      \ Therefore, access to an XMPP-to-SIP gateway SHOULD be\n   restricted in various
      ways; for example:\n   o  Only an XMPP service that carefully controls account
      provisioning\n      and provides effective methods for the administrators to
      control\n      the behavior of registered users ought to host an XMPP-to-SIP\n
      \     gateway (e.g., not a service that offers open account\n      registration).\n
      \  o  An XMPP-to-SIP gateway ought to be associated with only a single\n      domain
      or trust realm.  For example, an XMPP-to-SIP gateway hosted\n      at simple.example.com
      ought to allow only users within the\n      example.com domain to access the
      XMPP-to-SIP gateway, not users\n      within example.org, example.net, or any
      other domain (unless they\n      are part of the same multi-tenanted environment
      as example.com).\n      This helps to prevent the gateway equivalent of open
      relays that\n      are shared across XMPP domains from different trust realms.\n
      \  If a SIP Presence Server receives communications through an XMPP-to-\n   SIP
      gateway from users who are not associated with a domain that is\n   so related
      to the hostname of the XMPP-to-SIP gateway, it SHOULD\n   (based on local service
      provisioning) refuse to service such users or\n   refuse to receive traffic
      from the XMPP-to-SIP gateway.  As a further\n   check, whenever an XMPP-to-SIP
      gateway seeks to refresh an XMPP\n   user's long-lived authorization to a SIP
      user's presence, it first\n   sends an XMPP <presence/> stanza of type \"probe\"
      from the address of\n   the XMPP-to-SIP gateway to the \"bare Jabber Identifier
      (JID)\"\n   (user@domain.tld) of the XMPP user, to which the user's XMPP server\n
      \  responds in accordance with [RFC6121]; this puts an equal burden on\n   the
      XMPP server and the SIP proxy.\n"
    title: 8.1.  Amplification Attacks
  - contents:
    - "8.2.  Presence Leaks\n   Presence notifications can contain sensitive information
      (e.g., about\n   network availability).  In addition, it is possible in both
      SIP and\n   XMPP for an entity to send different presence notifications to\n
      \  different subscribers.  Therefore, a gateway MUST NOT route or\n   deliver
      a presence notification to any entity other than the intended\n   recipient
      (as represented by the 'to' address for XMPP and by the\n   Request-URI for
      SIP), because it does not possess information about\n   authorization to receive
      presence notifications for such entities --\n   that information resides at
      the user's home service, not at the\n   receiving gateway.\n"
    title: 8.2.  Presence Leaks
  title: 8.  Privacy and Security Considerations
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n              A.,
      Peterson, J., Sparks, R., Handley, M., and E.\n              Schooler, \"SIP:
      Session Initiation Protocol\", RFC 3261,\n              DOI 10.17487/RFC3261,
      June 2002,\n              <http://www.rfc-editor.org/info/rfc3261>.\n   [RFC3856]
      \ Rosenberg, J., \"A Presence Event Package for the Session\n              Initiation
      Protocol (SIP)\", RFC 3856,\n              DOI 10.17487/RFC3856, August 2004,\n
      \             <http://www.rfc-editor.org/info/rfc3856>.\n   [RFC3857]  Rosenberg,
      J., \"A Watcher Information Event Template-\n              Package for the Session
      Initiation Protocol (SIP)\",\n              RFC 3857, DOI 10.17487/RFC3857,
      August 2004,\n              <http://www.rfc-editor.org/info/rfc3857>.\n   [RFC3863]
      \ Sugano, H., Fujimoto, S., Klyne, G., Bateman, A., Carr,\n              W.,
      and J. Peterson, \"Presence Information Data Format\n              (PIDF)\",
      RFC 3863, DOI 10.17487/RFC3863, August 2004,\n              <http://www.rfc-editor.org/info/rfc3863>.\n
      \  [RFC6120]  Saint-Andre, P., \"Extensible Messaging and Presence\n              Protocol
      (XMPP): Core\", RFC 6120, DOI 10.17487/RFC6120,\n              March 2011, <http://www.rfc-editor.org/info/rfc6120>.\n
      \  [RFC6121]  Saint-Andre, P., \"Extensible Messaging and Presence\n              Protocol
      (XMPP): Instant Messaging and Presence\",\n              RFC 6121, DOI 10.17487/RFC6121,
      March 2011,\n              <http://www.rfc-editor.org/info/rfc6121>.\n   [RFC6665]
      \ Roach, A.B., \"SIP-Specific Event Notification\", RFC 6665,\n              DOI
      10.17487/RFC6665, July 2012,\n              <http://www.rfc-editor.org/info/rfc6665>.\n
      \  [RFC7247]  Saint-Andre, P., Houri, A., and J. Hildebrand,\n              \"Interworking
      between the Session Initiation Protocol\n              (SIP) and the Extensible
      Messaging and Presence Protocol\n              (XMPP): Architecture, Addresses,
      and Error Handling\",\n              RFC 7247, DOI 10.17487/RFC7247, May 2014,\n
      \             <http://www.rfc-editor.org/info/rfc7247>.\n   [RFC7622]  Saint-Andre,
      P., \"Extensible Messaging and Presence\n              Protocol (XMPP): Address
      Format\", RFC 7622,\n              DOI 10.17487/RFC7622, September 2015,\n              <http://www.rfc-editor.org/info/rfc7622>.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [RFC2778]  Day, M., Rosenberg, J., and H.
      Sugano, \"A Model for\n              Presence and Instant Messaging\", RFC 2778,\n
      \             DOI 10.17487/RFC2778, February 2000,\n              <http://www.rfc-editor.org/info/rfc2778>.\n
      \  [RFC2779]  Day, M., Aggarwal, S., Mohr, G., and J. Vincent, \"Instant\n              Messaging
      / Presence Protocol Requirements\", RFC 2779,\n              DOI 10.17487/RFC2779,
      February 2000,\n              <http://www.rfc-editor.org/info/rfc2779>.\n   [RFC3860]
      \ Peterson, J., \"Common Profile for Instant Messaging\n              (CPIM)\",
      RFC 3860, DOI 10.17487/RFC3860, August 2004,\n              <http://www.rfc-editor.org/info/rfc3860>.\n
      \  [RFC4480]  Schulzrinne, H., Gurbani, V., Kyzivat, P., and J.\n              Rosenberg,
      \"RPID: Rich Presence Extensions to the Presence\n              Information
      Data Format (PIDF)\", RFC 4480,\n              DOI 10.17487/RFC4480, July 2006,\n
      \             <http://www.rfc-editor.org/info/rfc4480>.\n   [RFC4825]  Rosenberg,
      J., \"The Extensible Markup Language (XML)\n              Configuration Access
      Protocol (XCAP)\", RFC 4825,\n              DOI 10.17487/RFC4825, May 2007,\n
      \             <http://www.rfc-editor.org/info/rfc4825>.\n   [RFC7572]  Saint-Andre,
      P., Houri, A., and J. Hildebrand,\n              \"Interworking between the
      Session Initiation Protocol\n              (SIP) and the Extensible Messaging
      and Presence Protocol\n              (XMPP): Instant Messaging\", RFC 7572,\n
      \             DOI 10.17487/RFC7572, June 2015,\n              <http://www.rfc-editor.org/info/rfc7572>.\n
      \  [RFC7573]  Saint-Andre, P. and S. Loreto, \"Interworking between the\n              Session
      Initiation Protocol (SIP) and the Extensible\n              Messaging and Presence
      Protocol (XMPP): One-to-One Text\n              Chat Sessions\", RFC 7573, DOI
      10.17487/RFC7573, June 2015,\n              <http://www.rfc-editor.org/info/rfc7573>.\n
      \  [RFC7702]  Saint-Andre, P., Ibarra, S., and S. Loreto, \"Interworking\n              between
      the Session Initiation Protocol (SIP) and the\n              Extensible Messaging
      and Presence Protocol (XMPP):\n              Groupchat\", RFC 7702, DOI 10.17487/RFC7702,
      December 2015,\n              <http://www.rfc-editor.org/info/rfc7702>.\n   [XEP-0107]
      Saint-Andre, P. and R. Meijer, \"User Mood\", XSF XEP 0107,\n              October
      2008, <http://xmpp.org/extensions/xep-0107.html>.\n   [XEP-0108] Meijer, R.
      and P. Saint-Andre, \"User Activity\", XSF\n              XEP 0108, October
      2008,\n              <http://xmpp.org/extensions/xep-0108.html>.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Appendix A.  Changes from RFC 7248\n   RFC 7248 had already been published when
    the STOX working group\n   discovered that a related document (since published
    as [RFC7702])\n   contained problems that also applied to RFC 7248.  Specifically,
    the\n   diagrams and protocol flows in RFC 7248 contained errors that\n   reflected
    an incorrect architecture with gateways on both sides of\n   the protocol exchange;
    in theory and in practice, presence traffic\n   from an XMPP system would be translated
    by an XMPP-to-SIMPLE gateway\n   on the XMPP side and received by a normal SIP/SIMPLE
    system directly\n   (without a receiving gateway on the SIP/SIMPLE side), and
    traffic\n   from a SIP system would be translated by a SIMPLE-to-XMPP gateway
    on\n   the SIP side and received by a normal XMPP system (without a\n   receiving
    gateway on the XMPP side).\n   Therefore, this document makes the following substantive
    changes from\n   RFC 7248:\n   o  Corrects the architectural assumptions, diagrams,
    and protocol\n      flows to reflect a single-gateway model in each direction.\n
    \  o  Adjusts terminology to replace the term \"SIP Server\" with the term\n      \"SIP
    Proxy\" or \"SIP Presence Server\" as appropriate, and to use\n      the term
    \"notification dialog\" for a SIP subscription and the term\n      \"presence
    authorization\" for an XMPP subscription instead of the\n      generic term \"subscription\"
    in both contexts.\n   o  Clarifies that SIP notification dialogs are used to handle\n
    \     presence authorizations in SIP (e.g., there is no dedicated way to\n      signal
    outbound cancellation of an authorization as there is in\n      XMPP).\n   o  Clarifies
    the use of the 'presence.winfo' event package, of the\n      SIP Subscription-State
    headers (specifically with values of\n      \"pending\", \"active\", \"closed\",
    or \"terminated\"), and of SIP NOTIFY\n      messages with no body.\n   o  Clarifies
    the durations of notification dialogs and presence\n      authorizations, and
    how they are extended in SIP and handled in\n      XMPP.\n   o  Removes the mapping
    of the XMPP 'id' attribute to the SIP \"CSeq\"\n      header.\n   o  Describes
    the handling of multiple connected resources in XMPP.\n   o  Provides information
    about mitigations for leaks of presence\n      information.\n"
  title: Appendix A.  Changes from RFC 7248
- contents:
  - "Acknowledgements\n   Thanks to the authors, contributors, and other individuals\n
    \  acknowledged in RFC 7248.\n   Thanks to Saul Ibarra Corretge and Markus Isomaki
    for their reviews\n   during working group consideration.\n   Special thanks to
    Ben Campbell for identifying the underlying\n   discrepancy that resulted in the
    need to obsolete RFC 7248.\n   Thanks also to Markus Isomaki and Yana Stamcheva
    as the working group\n   chairs and Alissa Cooper as the sponsoring Area Director.\n"
  title: Acknowledgements
- contents:
  - "Author's Address\n   Peter Saint-Andre\n   Filament\n   Email: peter@filament.com\n
    \  URI:   https://filament.com/\n"
  title: Author's Address
