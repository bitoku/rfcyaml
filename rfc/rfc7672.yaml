- contents:
  - "   SMTP Security via Opportunistic DNS-Based Authentication of Named\n             Entities
    (DANE) Transport Layer Security (TLS)\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This memo describes a downgrade-resistant protocol for SMTP transport\n
    \  security between Message Transfer Agents (MTAs), based on the DNS-\n   Based
    Authentication of Named Entities (DANE) TLSA DNS record.\n   Adoption of this
    protocol enables an incremental transition of the\n   Internet email backbone
    to one using encrypted and authenticated\n   Transport Layer Security (TLS).\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7672.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Terminology ................................................4\n      1.2.
    Background .................................................6\n      1.3. SMTP
    Channel Security ......................................6\n           1.3.1. STARTTLS
    Downgrade Attack ...........................7\n           1.3.2. Insecure Server
    Name without DNSSEC .................7\n           1.3.3. Sender Policy Does Not
    Scale ........................8\n           1.3.4. Too Many Certification Authorities
    ..................9\n   2. Identifying Applicable TLSA Records .............................9\n
    \     2.1. DNS Considerations .........................................9\n           2.1.1.
    DNS Errors, \"Bogus\" Responses, and\n                  \"Indeterminate\" Responses
    ...........................9\n           2.1.2. DNS Error Handling .................................11\n
    \          2.1.3. Stub Resolver Considerations .......................12\n      2.2.
    TLS Discovery .............................................13\n           2.2.1.
    MX Resolution ......................................14\n           2.2.2. Non-MX
    Destinations ................................16\n           2.2.3. TLSA Record
    Lookup .................................18\n   3. DANE Authentication ............................................20\n
    \     3.1. TLSA Certificate Usages ...................................20\n           3.1.1.
    Certificate Usage DANE-EE(3) .......................21\n           3.1.2. Certificate
    Usage DANE-TA(2) .......................22\n           3.1.3. Certificate Usages
    PKIX-TA(0) and PKIX-EE(1) .......23\n      3.2. Certificate Matching ......................................24\n
    \          3.2.1. DANE-EE(3) Name Checks .............................24\n           3.2.2.
    DANE-TA(2) Name Checks .............................24\n           3.2.3. Reference
    Identifier Matching ......................25\n   4. Server Key Management ..........................................26\n
    \  5. Digest Algorithm Agility .......................................27\n   6.
    Mandatory TLS Security .........................................27\n   7. Note
    on DANE for Message User Agents ...........................28\n   8. Interoperability
    Considerations ................................28\n      8.1. SNI Support ...............................................28\n
    \     8.2. Anonymous TLS Cipher Suites ...............................29\n   9.
    Operational Considerations .....................................29\n      9.1.
    Client Operational Considerations .........................29\n      9.2. Publisher
    Operational Considerations ......................30\n   10. Security Considerations
    .......................................30\n   11. References ....................................................31\n
    \     11.1. Normative References .....................................31\n      11.2.
    Informative References ...................................33\n   Acknowledgements
    ..................................................34\n   Authors' Addresses ................................................34\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This memo specifies a new connection security model for
    Message\n   Transfer Agents (MTAs).  This model is motivated by key features of\n
    \  inter-domain SMTP delivery, principally, the fact that the\n   destination
    server is selected indirectly via DNS Mail Exchange (MX)\n   records and that
    neither email addresses nor MX hostnames signal a\n   requirement for either secure
    or cleartext transport.  Therefore,\n   aside from a few manually configured exceptions,
    SMTP transport\n   security is, by necessity, opportunistic (for a definition
    of\n   \"Opportunistic Security\", see [RFC7435]).\n   This specification uses
    the presence of DANE TLSA records to securely\n   signal TLS support and to publish
    the means by which SMTP clients can\n   successfully authenticate legitimate SMTP
    servers.  This becomes\n   \"opportunistic DANE TLS\" and is resistant to downgrade
    and\n   man-in-the-middle (MITM) attacks.  It enables an incremental\n   transition
    of the email backbone to authenticated TLS delivery, with\n   increased global
    protection as adoption increases.\n   With opportunistic DANE TLS, traffic from
    SMTP clients to domains\n   that publish \"usable\" DANE TLSA records in accordance
    with this memo\n   is authenticated and encrypted.  Traffic from legacy clients
    or to\n   domains that do not publish TLSA records will continue to be sent in\n
    \  the same manner as before, via manually configured security,\n   (pre-DANE)
    opportunistic TLS, or just cleartext SMTP.\n   Problems with the existing use
    of TLS in MTA-to-MTA SMTP that\n   motivate this specification are described in
    Section 1.3.  The\n   specification itself follows, in Sections 2 and 3, which
    describe,\n   respectively, how to locate and use DANE TLSA records with SMTP.
    \ In\n   Section 6, we discuss the application of DANE TLS to destinations for\n
    \  which channel integrity and confidentiality are mandatory.  In\n   Section
    7, we briefly comment on the potential applicability of this\n   specification
    to Message User Agents.\n"
  - contents:
    - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\",
      \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described
      in\n   [RFC2119].\n   The following terms or concepts are used throughout this
      document:\n   Man-in-the-middle (MITM) attack:  Active modification of network\n
      \     traffic by an adversary able to thereby compromise the\n      confidentiality
      or integrity of the data.\n   Downgrade attack:  (From [RFC4949].)  A type of
      MITM attack in which\n      the attacker can cause two parties, at the time
      they negotiate a\n      security association, to agree on a lower level of protection
      than\n      the highest level that could have been supported by both of them.\n
      \  Downgrade-resistant:  A protocol is \"downgrade-resistant\" if it\n      employs
      effective countermeasures against downgrade attacks.\n   \"Secure\", \"bogus\",
      \"insecure\", \"indeterminate\":  DNSSEC validation\n      results, as defined
      in Section 4.3 of [RFC4035].\n   Validating security-aware stub resolver and
      non-validating\n   security-aware stub resolver:\n      Capabilities of the
      stub resolver in use, as defined in [RFC4033];\n      note that this specification
      requires the use of a security-aware\n      stub resolver.\n   (Pre-DANE) opportunistic
      TLS:  Best-effort use of TLS that is\n      generally vulnerable to DNS forgery
      and STARTTLS downgrade\n      attacks.  When a TLS-encrypted communication channel
      is not\n      available, message transmission takes place in the clear.  MX\n
      \     record indirection generally precludes authentication even when\n      TLS
      is available.\n   Opportunistic DANE TLS:  Best-effort use of TLS that is resistant
      to\n      downgrade attacks for destinations with DNSSEC-validated TLSA\n      records.
      \ When opportunistic DANE TLS is determined to be\n      unavailable, clients
      should fall back to pre-DANE opportunistic\n      TLS.  Opportunistic DANE TLS
      requires support for DNSSEC, DANE,\n      and STARTTLS on the client side, and
      STARTTLS plus a DNSSEC\n      published TLSA record on the server side.\n   Reference
      identifier:  (Special case of [RFC6125] definition.)  One\n      of the domain
      names associated by the SMTP client with the\n      destination SMTP server
      for performing name checks on the server\n      certificate.  When name checks
      are applicable, at least one of the\n      reference identifiers MUST match
      an [RFC6125] DNS-ID (or, if none\n      are present, the [RFC6125] CN-ID) of
      the server certificate (see\n      Section 3.2.3).\n   MX hostname:  The RRDATA
      of an MX record consists of a 16 bit\n      preference followed by a Mail Exchange
      domain name (see [RFC1035],\n      Section 3.3.9).  We will use the term \"MX
      hostname\" to refer to\n      the latter, that is, the DNS domain name found
      after the\n      preference value in an MX record.  Thus, an \"MX hostname\"
      is\n      specifically a reference to a DNS domain name rather than any host\n
      \     that bears that name.\n   Delayed delivery:  Email delivery is a multi-hop
      store-and-forward\n      process.  When an MTA is unable to forward a message
      that may\n      become deliverable later, the message is queued and delivery
      is\n      retried periodically.  Some MTAs may be configured with a fallback\n
      \     next-hop destination that handles messages that the MTA would\n      otherwise
      queue and retry.  When a fallback next-hop destination\n      is configured,
      messages that would otherwise have to be delayed\n      may be sent to the fallback
      next-hop destination instead.  The\n      fallback destination may itself be
      subject to opportunistic or\n      mandatory DANE TLS (Section 6) as though
      it were the original\n      message destination.\n   Original next-hop destination:
      \ The logical destination for mail\n      delivery.  By default, this is the
      domain portion of the recipient\n      address, but MTAs may be configured to
      forward mail for some or\n      all recipients via designated relays.  The original
      next-hop\n      destination is, respectively, either the recipient domain or
      the\n      associated configured relay.\n   MTA:  Message Transfer Agent ([RFC5598],
      Section 4.3.2).\n   MSA:  Message Submission Agent ([RFC5598], Section 4.3.1).\n
      \  MUA:  Message User Agent ([RFC5598], Section 4.2.1).\n   RR:  A DNS resource
      record as defined in [RFC1034], Section 3.6.\n   RRset:  An RRset ([RFC2181],
      Section 5) is a group of DNS resource\n      records that share the same label,
      class, and type.\n"
    title: 1.1.  Terminology
  - contents:
    - "1.2.  Background\n   The Domain Name System Security Extensions (DNSSEC) add
      data origin\n   authentication, data integrity, and data nonexistence proofs
      to the\n   Domain Name System (DNS).  DNSSEC is defined in [RFC4033], [RFC4034],\n
      \  and [RFC4035].\n   As described in the introduction of [RFC6698], TLS authentication
      via\n   the existing public Certification Authority (CA) PKI suffers from an\n
      \  overabundance of trusted parties capable of issuing certificates for\n   any
      domain of their choice.  DANE leverages the DNSSEC infrastructure\n   to publish
      public keys and certificates for use with the Transport\n   Layer Security (TLS)
      [RFC5246] protocol via the \"TLSA\" DNS record\n   type.  With DNSSEC, each
      domain can only vouch for the keys of its\n   delegated sub-domains.\n   The
      TLS protocol enables secure TCP communication.  In the context of\n   this memo,
      channel security is assumed to be provided by TLS.  Used\n   without authentication,
      TLS provides only privacy protection against\n   eavesdropping attacks.  Otherwise,
      TLS also provides data origin\n   authentication to guard against MITM attacks.\n"
    title: 1.2.  Background
  - contents:
    - "1.3.  SMTP Channel Security\n   With HTTPS, TLS employs X.509 certificates
      [RFC5280] issued by one of\n   the many CAs bundled with popular web browsers
      to allow users to\n   authenticate their \"secure\" websites.  Before we specify
      a new DANE\n   TLS security model for SMTP, we will explain why a new security
      model\n   is needed.  In the process, we will explain why the familiar HTTPS\n
      \  security model is inadequate to protect inter-domain SMTP traffic.\n   The
      subsections below outline four key problems with applying\n   traditional Web
      PKI [RFC7435] to SMTP; these problems are addressed\n   by this specification.
      \ Since an SMTP channel security policy is not\n   explicitly specified in either
      the recipient address or the MX\n   record, a new signaling mechanism is required
      to indicate when\n   channel security is possible and should be used.  The publication
      of\n   TLSA records allows server operators to securely signal to SMTP\n   clients
      that TLS is available and should be used.  DANE TLSA makes it\n   possible to
      simultaneously discover which destination domains support\n   secure delivery
      via TLS and how to verify the authenticity of the\n   associated SMTP services,
      providing a path forward to ubiquitous SMTP\n   channel security.\n"
    - contents:
      - "1.3.1.  STARTTLS Downgrade Attack\n   SMTP [RFC5321] is a single-hop protocol
        in a multi-hop store-and-\n   forward email delivery process.  An SMTP envelope
        recipient address\n   does not correspond to a specific transport-layer endpoint
        address;\n   rather, at each relay hop, the transport-layer endpoint is the\n
        \  next-hop relay, while the envelope recipient address typically\n   remains
        the same.  Unlike HTTP and its corresponding secured version,\n   HTTPS, where
        the use of TLS is signaled via the URI scheme, email\n   recipient addresses
        do not directly signal transport security policy.\n   Indeed, no such signaling
        could work well with SMTP, since TLS\n   encryption of SMTP protects email
        traffic on a hop-by-hop basis while\n   email addresses could only express
        end-to-end policy.\n   With no mechanism available to signal transport security
        policy, SMTP\n   relays employ a best-effort \"opportunistic\" security model
        for TLS.\n   A single SMTP server TCP listening endpoint can serve both TLS
        and\n   non-TLS clients; the use of TLS is negotiated via the SMTP STARTTLS\n
        \  command [RFC3207].  The server signals TLS support to the client over\n
        \  a cleartext SMTP connection, and, if the client also supports TLS, it\n
        \  may negotiate a TLS-encrypted channel to use for email transmission.\n
        \  The server's indication of TLS support can be easily suppressed by an\n
        \  MITM attacker.  Thus, pre-DANE SMTP TLS security can be subverted by\n
        \  simply downgrading a connection to cleartext.  No TLS security\n   feature
        can prevent this.  The attacker can simply disable TLS.\n"
      title: 1.3.1.  STARTTLS Downgrade Attack
    - contents:
      - "1.3.2.  Insecure Server Name without DNSSEC\n   With SMTP, DNS MX records
        abstract the next-hop transport endpoint\n   and allow administrators to specify
        a set of target servers to which\n   SMTP traffic should be directed for a
        given domain.\n   A TLS client is vulnerable to MITM attacks unless it verifies
        that\n   the server's certificate binds the public key to a name that matches\n
        \  one of the client's reference identifiers.  A natural choice of\n   reference
        identifier is the server's domain name.  However, with\n   SMTP, server names
        are not directly encoded in the recipient address;\n   instead, they are obtained
        indirectly via MX records.  Without\n   DNSSEC, the MX lookup is vulnerable
        to MITM and DNS cache poisoning\n   attacks.  Active attackers can forge DNS
        replies with fake MX records\n   and can redirect email to servers with names
        of their choice.\n   Therefore, secure verification of SMTP TLS certificates
        matching the\n   server name is not possible without DNSSEC.\n   One might
        try to harden TLS for SMTP against DNS attacks by using the\n   envelope recipient
        domain as a reference identifier and by requiring\n   each SMTP server to
        possess a trusted certificate for the envelope\n   recipient domain rather
        than the MX hostname.  Unfortunately, this is\n   impractical, as email for
        many domains is handled by third parties\n   that are not in a position to
        obtain certificates for all the domains\n   they serve.  Deployment of the
        Server Name Indication (SNI) extension\n   to TLS (see Section 3 of [RFC6066])
        is no panacea, since SNI key\n   management is operationally challenging except
        when the email service\n   provider is also the domain's registrar and its
        certificate issuer;\n   this is rarely the case for email.\n   Since the recipient
        domain name cannot be used as the SMTP server\n   reference identifier, and
        neither can the MX hostname without DNSSEC,\n   large-scale deployment of
        authenticated TLS for SMTP requires that\n   the DNS be secure.\n   Since
        SMTP security depends critically on DNSSEC, it is important to\n   point out
        that SMTP with DANE is consequently the most conservative\n   possible trust
        model.  It trusts only what must be trusted and no\n   more.  Adding any other
        trusted actors to the mix can only reduce\n   SMTP security.  A sender may
        choose to further harden DNSSEC for\n   selected high-value receiving domains
        by configuring explicit trust\n   anchors for those domains instead of relying
        on the chain of trust\n   from the root domain.  However, detailed discussion
        of DNSSEC\n   security practices is out of scope for this document.\n"
      title: 1.3.2.  Insecure Server Name without DNSSEC
    - contents:
      - "1.3.3.  Sender Policy Does Not Scale\n   Sending systems are in some cases
        explicitly configured to use TLS\n   for mail sent to selected peer domains,
        but this requires configuring\n   sending MTAs with appropriate subject names
        or certificate content\n   digests from their peer domains.  Due to the resulting
        administrative\n   burden, such statically configured SMTP secure channels
        are used\n   rarely (generally only between domains that make bilateral\n
        \  arrangements with their business partners).  Internet email, on the\n   other
        hand, requires regularly contacting new domains for which\n   security configurations
        cannot be established in advance.\n   The abstraction of the SMTP transport
        endpoint via DNS MX records,\n   often across organizational boundaries, limits
        the use of public CA\n   PKI with SMTP to a small set of sender-configured
        peer domains.  With\n   little opportunity to use TLS authentication, sending
        MTAs are rarely\n   configured with a comprehensive list of trusted CAs.  SMTP
        services\n   that support STARTTLS often deploy X.509 certificates that are\n
        \  self-signed or issued by a private CA.\n"
      title: 1.3.3.  Sender Policy Does Not Scale
    - contents:
      - "1.3.4.  Too Many Certification Authorities\n   Even if it were generally
        possible to determine a secure server name,\n   the SMTP client would still
        need to verify that the server's\n   certificate chain is issued by a trusted
        CA (a trust anchor).  MTAs\n   are not interactive applications where a human
        operator can make a\n   decision (wisely or otherwise) to selectively disable
        TLS security\n   policy when certificate chain verification fails.  With no
        user to\n   \"click OK\", the MTA's list of public CA trust anchors would
        need to\n   be comprehensive in order to avoid bouncing mail addressed to
        sites\n   that employ unknown CAs.\n   On the other hand, each trusted CA
        can issue certificates for any\n   domain.  If even one of the configured
        CAs is compromised or operated\n   by an adversary, it can subvert TLS security
        for all destinations.\n   Any set of CAs is simultaneously both overly inclusive
        and not\n   inclusive enough.\n"
      title: 1.3.4.  Too Many Certification Authorities
    title: 1.3.  SMTP Channel Security
  title: 1.  Introduction
- contents:
  - '2.  Identifying Applicable TLSA Records

    '
  - contents:
    - '2.1.  DNS Considerations

      '
    - contents:
      - "2.1.1.  DNS Errors, \"Bogus\" Responses, and \"Indeterminate\" Responses\n
        \  An SMTP client that implements opportunistic DANE TLS per this\n   specification
        depends critically on the integrity of DNSSEC lookups,\n   as discussed in
        Section 1.3.2.  This section lists the DNS resolver\n   requirements needed
        to avoid downgrade attacks when using\n   opportunistic DANE TLS.\n   A DNS
        lookup may signal an error or return a definitive answer.  A\n   security-aware
        resolver MUST be used for this specification.\n   Security-aware resolvers
        will indicate the security status of a DNS\n   RRset with one of four possible
        values defined in Section 4.3 of\n   [RFC4035]: \"secure\", \"insecure\",
        \"bogus\", and \"indeterminate\".  In\n   [RFC4035], the meaning of the \"indeterminate\"
        security status is:\n      An RRset for which the resolver is not able to
        determine whether\n      the RRset should be signed, as the resolver is not
        able to obtain\n      the necessary DNSSEC RRs.  This can occur when the security-aware\n
        \     resolver is not able to contact security-aware name servers for\n      the
        relevant zones.\n   Note that the \"indeterminate\" security status has a
        conflicting\n   definition in Section 5 of [RFC4033]:\n      There is no trust
        anchor that would indicate that a specific\n      portion of the tree is secure.\n
        \  In this document, the term \"indeterminate\" will be used exclusively\n
        \  in the [RFC4035] sense.  Therefore, obtaining \"indeterminate\" lookup\n
        \  results is a (transient) failure condition, namely, the inability to\n
        \  locate the relevant DNS records.  DNS records that would be\n   classified
        \"indeterminate\" in the sense of [RFC4035] are simply\n   classified as \"insecure\".\n
        \  We do not need to distinguish between zones that lack a suitable\n   ancestor
        trust anchor, and delegations (ultimately) from a trust\n   anchor that designate
        a child zone as being \"insecure\".  All\n   \"insecure\" RRsets MUST be handled
        identically: in either case,\n   non-validated data for the query domain is
        all that is and can be\n   available, and authentication using the data is
        impossible.  As the\n   DNS root zone has been signed, we expect that validating
        resolvers\n   used by Internet-facing MTAs will be configured with trust anchor\n
        \  data for the root zone and that therefore domains with no ancestor\n   trust
        anchor will not be possible in most deployments.\n   As noted in Section 4.3
        of [RFC4035], a security-aware DNS resolver\n   MUST be able to determine
        whether a given non-error DNS response is\n   \"secure\", \"insecure\", \"bogus\",
        or \"indeterminate\".  It is expected\n   that most security-aware stub resolvers
        will not signal an\n   \"indeterminate\" security status (in the sense of
        [RFC4035]) to the\n   application and will instead signal a \"bogus\" or error
        result.  If a\n   resolver does signal an [RFC4035] \"indeterminate\" security
        status,\n   this MUST be treated by the SMTP client as though a \"bogus\"
        or error\n   result had been returned.\n   An MTA using a non-validating security-aware
        stub resolver MAY use\n   the stub resolver's ability, if available, to signal
        DNSSEC\n   validation status based on information the stub resolver has learned\n
        \  from an upstream validating recursive resolver.  Security-oblivious\n   stub
        resolvers [RFC4033] MUST NOT be used.  In accordance with\n   Section 4.9.3
        of [RFC4035]:\n      ... a security-aware stub resolver MUST NOT place any
        reliance on\n      signature validation allegedly performed on its behalf,
        except\n      when the security-aware stub resolver obtained the data in\n
        \     question from a trusted security-aware recursive name server via a\n
        \     secure channel.\n   To avoid much repetition in the text below, we will
        pause to explain\n   the handling of \"bogus\" or \"indeterminate\" DNSSEC
        query responses.\n   These are not necessarily the result of a malicious actor;
        they can,\n   for example, occur when network packets are corrupted or lost
        in\n   transit.  Therefore, \"bogus\" or \"indeterminate\" replies are equated\n
        \  in this memo with lookup failure.\n   There is an important non-failure
        condition we need to highlight in\n   addition to the obvious case of the
        DNS client obtaining a non-empty\n   \"secure\" or \"insecure\" RRset of the
        requested type.  Namely, it is\n   not an error when either \"secure\" or
        \"insecure\" nonexistence is\n   determined for the requested data.  When
        a DNSSEC response with a\n   validation status that is either \"secure\" or
        \"insecure\" reports\n   either no records of the requested type or nonexistence
        of the query\n   domain, the response is not a DNS error condition.  The DNS
        client\n   has not been left without an answer; it has learned that records
        of\n   the requested type do not exist.\n   Security-aware stub resolvers
        will, of course, also signal DNS lookup\n   errors in other cases, for example,
        when processing a \"SERVFAIL\"\n   [RFC2136] response code (RCODE) [RFC1035],
        which will not have an\n   associated DNSSEC status.  All lookup errors are
        treated the same way\n   by this specification, regardless of whether they
        are from a \"bogus\"\n   or \"indeterminate\" DNSSEC status or from a more
        generic DNS error:\n   the information that was requested cannot be obtained
        by the\n   security-aware resolver at this time.  Thus, a lookup error is
        either\n   a failure to obtain the relevant RRset if it exists or a failure
        to\n   determine that no such RRset exists when it does not.\n   In contrast
        to a \"bogus\" response or an \"indeterminate\" response, an\n   \"insecure\"
        DNSSEC response is not an error; rather, as explained\n   above, it indicates
        that the target DNS zone is either delegated as\n   an \"insecure\" child
        of a \"secure\" parent zone or not a descendant of\n   any of the configured
        DNSSEC trust anchors in use by the SMTP client.\n   \"Insecure\" results will
        leave the SMTP client with degraded channel\n   security but do not stand
        in the way of message delivery.  See\n   Section 2.2 for further details.\n"
      title: 2.1.1.  DNS Errors, "Bogus" Responses, and "Indeterminate" Responses
    - contents:
      - "2.1.2.  DNS Error Handling\n   When a DNS lookup failure (an error, \"bogus\",
        or \"indeterminate\", as\n   defined above) prevents an SMTP client from determining
        which SMTP\n   server or servers it should connect to, message delivery MUST
        be\n   delayed.  This naturally includes, for example, the case when a\n   \"bogus\"
        or \"indeterminate\" response is encountered during MX\n   resolution.  When
        multiple MX hostnames are obtained from a\n   successful MX lookup but a later
        DNS lookup failure prevents network\n   address resolution for a given MX
        hostname, delivery may proceed via\n   any remaining MX hosts.\n   When a
        particular SMTP server is securely identified as the delivery\n   destination,
        a set of DNS lookups (Section 2.2) MUST be performed to\n   locate any related
        TLSA records.  If any DNS queries used to locate\n   TLSA records fail (due
        to \"bogus\" or \"indeterminate\" records,\n   timeouts, malformed replies,
        SERVFAIL responses, etc.), then the SMTP\n   client MUST treat that server
        as unreachable and MUST NOT deliver the\n   message via that server.  If no
        servers are reachable, delivery is\n   delayed.\n   In the text that follows,
        we will only describe what happens when all\n   relevant DNS queries succeed.
        \ If any DNS failure occurs, the SMTP\n   client MUST behave as described
        in this section, by \"skipping\" the\n   SMTP server or destination that is
        problematic.  Queries for\n   candidate TLSA records are explicitly part of
        \"all relevant DNS\n   queries\", and SMTP clients MUST NOT continue to connect
        to an SMTP\n   server or destination whose TLSA record lookup fails.\n"
      title: 2.1.2.  DNS Error Handling
    - contents:
      - "2.1.3.  Stub Resolver Considerations\n   A note about DNAME aliases: a query
        for a domain name whose ancestor\n   domain is a DNAME alias returns the DNAME
        RR for the ancestor domain\n   along with a CNAME that maps the query domain
        to the corresponding\n   sub-domain of the target domain of the DNAME alias
        [RFC6672].\n   Therefore, whenever we speak of CNAME aliases, we implicitly
        allow\n   for the possibility that the alias in question is the result of
        an\n   ancestor domain DNAME record.  Consequently, no explicit support for\n
        \  DNAME records is needed in SMTP software; it is sufficient to process\n
        \  the resulting CNAME aliases.  DNAME records only require special\n   processing
        in the validating stub resolver library that checks the\n   integrity of the
        combined DNAME + CNAME reply.  When DNSSEC\n   validation is handled by a
        local caching resolver rather than the MTA\n   itself, even that part of the
        DNAME support logic is outside the MTA.\n   When a stub resolver returns a
        response containing a CNAME alias that\n   does not also contain the corresponding
        query results for the target\n   of the alias, the SMTP client will need to
        repeat the query at the\n   target of the alias and should do so recursively
        up to some\n   configured or implementation-dependent recursion limit.  If
        at any\n   stage of CNAME expansion an error is detected, the lookup of the\n
        \  original requested records MUST be considered to have failed.\n   Whether
        a chain of CNAME records was returned in a single stub\n   resolver response
        or via explicit recursion by the SMTP client, if at\n   any stage of recursive
        expansion an \"insecure\" CNAME record is\n   encountered, then it and all
        subsequent results (in particular, the\n   final result) MUST be considered
        \"insecure\", regardless of whether or\n   not any earlier CNAME records leading
        to the \"insecure\" record were\n   \"secure\".\n   Note that a security-aware
        non-validating stub resolver may return to\n   the SMTP client an \"insecure\"
        reply received from a validating\n   recursive resolver that contains a CNAME
        record along with additional\n   answers recursively obtained starting at
        the target of the CNAME.  In\n   this case, the only possible conclusion is
        that some record in the\n   set of records returned is \"insecure\", and it
        is, in fact, possible\n   that the initial CNAME record and a subset of the
        subsequent records\n   are \"secure\".\n   If the SMTP client needs to determine
        the security status of the DNS\n   zone containing the initial CNAME record,
        it will need to issue a\n   separate query of type \"CNAME\" that returns
        only the initial CNAME\n   record.  Specifically, as discussed in Section
        2.2.2, when \"insecure\"\n   A or AAAA records are found for an SMTP server
        via a CNAME alias, the\n   SMTP client will need to perform an additional
        CNAME query in order\n   to determine whether or not the DNS zone in which
        the alias is\n   published is DNSSEC signed.\n"
      title: 2.1.3.  Stub Resolver Considerations
    title: 2.1.  DNS Considerations
  - contents:
    - "2.2.  TLS Discovery\n   As noted previously (in Section 1.3.1), opportunistic
      TLS with SMTP\n   servers that advertise TLS support via STARTTLS is subject
      to an MITM\n   downgrade attack.  Also, some SMTP servers that are not, in fact,
      TLS\n   capable erroneously advertise STARTTLS by default, and clients need\n
      \  to be prepared to retry cleartext delivery after STARTTLS fails.  In\n   contrast,
      DNSSEC-validated TLSA records MUST NOT be published for\n   servers that do
      not support TLS.  Clients can safely interpret their\n   presence as a commitment
      by the server operator to implement TLS and\n   STARTTLS.\n   This memo defines
      four actions to be taken after the search for a\n   TLSA record returns \"secure\"
      usable results, \"secure\" unusable\n   results, \"insecure\" or no results,
      or an error signal.  The term\n   \"usable\" in this context is in the sense
      of Section 4.1 of [RFC6698].\n   Specifically, if the DNS lookup for a TLSA
      record returns:\n   A \"secure\" TLSA RRset with at least one usable record:
      \ Any\n      connection to the MTA MUST employ TLS encryption and MUST\n      authenticate
      the SMTP server using the techniques discussed in the\n      rest of this document.
      \ Failure to establish an authenticated TLS\n      connection MUST result in
      falling back to the next SMTP server or\n      delayed delivery.\n   A \"secure\"
      non-empty TLSA RRset where all the records are unusable:\n      Any connection
      to the MTA MUST be made via TLS, but authentication\n      is not required.
      \ Failure to establish an encrypted TLS connection\n      MUST result in falling
      back to the next SMTP server or delayed\n      delivery.\n   An \"insecure\"
      TLSA RRset or DNSSEC-authenticated denial of existence\n   of the TLSA records:\n
      \     A connection to the MTA SHOULD be made using (pre-DANE)\n      opportunistic
      TLS; this includes using cleartext delivery when the\n      remote SMTP server
      does not appear to support TLS.  The MTA MAY\n      retry in cleartext when
      delivery via TLS fails during the\n      handshake or even during data transfer.\n
      \  Any lookup error:  Lookup errors, including \"bogus\" and\n      \"indeterminate\"
      as explained in Section 2.1.1, MUST result in\n      falling back to the next
      SMTP server or delayed delivery.\n   An SMTP client MAY be configured to mandate
      DANE-verified delivery\n   for some destinations.  With mandatory DANE TLS (Section
      6), delivery\n   proceeds only when \"secure\" TLSA records are used to establish
      an\n   encrypted and authenticated TLS channel with the SMTP server.\n   When
      the original next-hop destination is an address literal rather\n   than a DNS
      domain, DANE TLS does not apply.  Delivery proceeds using\n   any relevant security
      policy configured by the MTA administrator.\n   Similarly, when an MX RRset
      incorrectly lists a network address in\n   lieu of an MX hostname, if an MTA
      chooses to connect to the network\n   address in the nonconformant MX record,
      DANE TLSA does not apply for\n   such a connection.\n   In the subsections that
      follow, we explain how to locate the SMTP\n   servers and the associated TLSA
      records for a given next-hop\n   destination domain.  We also explain which
      name or names are to be\n   used in identity checks of the SMTP server certificate.\n"
    - contents:
      - "2.2.1.  MX Resolution\n   In this section, we consider next-hop domains that
        are subject to MX\n   resolution and have MX records.  The TLSA records and
        the associated\n   base domain are derived separately for each MX hostname
        that is used\n   to attempt message delivery.  DANE TLS can authenticate message\n
        \  delivery to the intended next-hop domain only when the MX records are\n
        \  obtained securely via a DNSSEC-validated lookup.\n   MX records MUST be
        sorted by preference; an MX hostname with a worse\n   (numerically higher)
        MX preference that has TLSA records MUST NOT\n   preempt an MX hostname with
        a better (numerically lower) preference\n   that has no TLSA records.  In
        other words, prevention of delivery\n   loops by obeying MX preferences MUST
        take precedence over channel\n   security considerations.  Even with two equal-preference
        MX records,\n   an MTA is not obligated to choose the MX hostname that offers
        more\n   security.  Domains that want secure inbound mail delivery need to\n
        \  ensure that all their SMTP servers and MX records are configured\n   accordingly.\n
        \  In the language of [RFC5321], Section 5.1, the original next-hop\n   domain
        is the \"initial name\".  If the MX lookup of the initial name\n   results
        in a CNAME alias, the MTA replaces the initial name with the\n   resulting
        name and performs a new lookup with the new name.  MTAs\n   typically support
        recursion in CNAME expansion, so this replacement\n   is performed repeatedly
        (up to the MTA's recursion limit) until the\n   ultimate non-CNAME domain
        is found.\n   If the MX RRset (or any CNAME leading to it) is \"insecure\"
        (see\n   Section 2.1.1) and DANE TLS for the given destination is mandatory\n
        \  (Section 6), delivery MUST be delayed.  If the MX RRset is \"insecure\"\n
        \  and DANE TLS is not mandatory, the SMTP client is free to use\n   pre-DANE
        opportunistic TLS (possibly even cleartext).\n   Since the protocol in this
        memo is an Opportunistic Security protocol\n   [RFC7435], the SMTP client
        MAY elect to use DANE TLS (as described in\n   Section 2.2.2 below), even
        with MX hosts obtained via an \"insecure\"\n   MX RRset.  For example, when
        a hosting provider has a signed DNS zone\n   and publishes TLSA records for
        its SMTP servers, hosted domains that\n   are not signed may still benefit
        from the provider's TLSA records.\n   Deliveries via the provider's SMTP servers
        will not be subject to\n   active attacks when sending SMTP clients elect
        to use the provider's\n   TLSA records (active attacks that tamper with the
        \"insecure\" MX RRset\n   are of course still possible in this case).\n   When
        the MX records are not (DNSSEC) signed, an active attacker can\n   redirect
        SMTP clients to MX hosts of his choice.  Such redirection is\n   tamper-evident
        when SMTP servers found via \"insecure\" MX records are\n   recorded as the
        next-hop relay in the MTA delivery logs in their\n   original (rather than
        CNAME-expanded) form.  Sending MTAs SHOULD log\n   unexpanded MX hostnames
        when these result from \"insecure\" MX lookups.\n   Any successful authentication
        via an insecurely determined MX host\n   MUST NOT be misrepresented in the
        mail logs as secure delivery to the\n   intended next-hop domain.\n   In the
        absence of DNS lookup errors (Section 2.1.1), if the MX RRset\n   is not \"insecure\",
        then it is \"secure\", and the SMTP client MUST\n   treat each MX hostname
        as described in Section 2.2.2.  When, for a\n   given MX hostname, no TLSA
        records are found or only \"insecure\" TLSA\n   records are found, DANE TLSA
        is not applicable with the SMTP server\n   in question, and delivery proceeds
        to that host as with pre-DANE\n   opportunistic TLS.  To avoid downgrade attacks,
        any errors during\n   TLSA lookups MUST, as explained in Section 2.1.2, cause
        the SMTP\n   server in question to be treated as unreachable.\n"
      title: 2.2.1.  MX Resolution
    - contents:
      - "2.2.2.  Non-MX Destinations\n   This section describes the algorithm used
        to locate the TLSA records\n   and associated TLSA base domain for an input
        domain that is not\n   subject to MX resolution, that represents a hostname
        from a \"secure\"\n   MX RRset, or that lacks MX records.  Such domains include:\n
        \  o  Any host that is configured by the sending MTA administrator as\n      the
        next-hop relay for some or all domains and that is not subject\n      to MX
        resolution.\n   o  A domain that has MX records.  When a domain has MX records,
        we\n      treat each MX host listed in those MX records as though it were
        a\n      non-MX destination -- that is, in the same way as we would treat\n
        \     an administrator-configured relay that handles mail for that\n      domain.
        \ (Unlike administrator-specified relays, MTAs are not\n      required to
        support CNAME expansion of next-hop names found via MX\n      lookups.)\n
        \  o  A next-hop destination domain subject to MX resolution that has no\n
        \     MX records.  In this case, the domain's name is implicitly also\n      its
        sole SMTP server name.\n   Note that DNS queries with type TLSA are mishandled
        by load-balancing\n   nameservers that serve the MX hostnames of some large
        email\n   providers.  The DNS zones served by these nameservers are not signed\n
        \  and contain no TLSA records.  These nameservers SHOULD provide\n   \"insecure\"
        negative replies that indicate the nonexistence of the\n   TLSA records, but
        instead they fail by not responding at all or by\n   responding with a DNS
        RCODE [RFC1035] other than NXDOMAIN, e.g.,\n   SERVFAIL or NOTIMP [RFC2136].\n
        \  To avoid problems delivering mail to domains whose SMTP servers are\n   served
        by these problematic nameservers, the SMTP client MUST perform\n   any A and/or
        AAAA queries for the destination before attempting to\n   locate the associated
        TLSA records.  This lookup is needed in any\n   case to determine (1) whether
        or not the destination domain is\n   reachable and (2) the DNSSEC validation
        status of the chain of CNAME\n   queries required to reach the ultimate address
        records.\n   If no address records are found, the destination is unreachable.
        \ If\n   address records are found but the DNSSEC validation status of the\n
        \  first query response is \"insecure\" (see Section 2.1.3), the SMTP\n   client
        SHOULD NOT proceed to search for any associated TLSA records.\n   In the case
        of these problematic domains, TLSA queries would lead to\n   DNS lookup errors
        and would cause messages to be consistently delayed\n   and ultimately returned
        to the sender.  We don't expect to find any\n   \"secure\" TLSA records associated
        with a TLSA base domain that lies in\n   an unsigned DNS zone.  Therefore,
        skipping TLSA lookups in this case\n   will also reduce latency, with no detrimental
        impact on security.\n   If the A and/or AAAA lookup of the initial name yields
        a CNAME, we\n   replace it with the resulting name as if it were the initial
        name and\n   perform a lookup again using the new name.  This replacement
        is\n   performed recursively (up to the MTA's recursion limit).\n   We consider
        the following cases for handling a DNS response for an\n   A or AAAA DNS lookup:\n
        \  Not found:  When the DNS queries for A and/or AAAA records yield\n      neither
        a list of addresses nor a CNAME (or CNAME expansion is not\n      supported),
        the destination is unreachable.\n   Non-CNAME:  The answer is not a CNAME
        alias.  If the address RRset is\n      \"secure\", TLSA lookups are performed
        as described in Section 2.2.3\n      with the initial name as the candidate
        TLSA base domain.  If no\n      \"secure\" TLSA records are found, DANE TLS
        is not applicable and\n      mail delivery proceeds with pre-DANE opportunistic
        TLS (which,\n      being best-effort, degrades to cleartext delivery when
        STARTTLS is\n      not available or the TLS handshake fails).\n   Insecure
        CNAME:  The input domain is a CNAME alias, but the ultimate\n      network
        address RRset is \"insecure\" (see Section 2.1.1).  If the\n      initial
        CNAME response is also \"insecure\", DANE TLS does not\n      apply.  Otherwise,
        this case is treated just like the non-CNAME\n      case above, where a search
        is performed for a TLSA record with the\n      original input domain as the
        candidate TLSA base domain.\n   Secure CNAME:  The input domain is a CNAME
        alias, and the ultimate\n      network address RRset is \"secure\" (see Section
        2.1.1).  Two\n      candidate TLSA base domains are tried: the fully CNAME-expanded\n
        \     initial name and, failing that, the initial name itself.\n   In summary,
        if it is possible to securely obtain the full,\n   CNAME-expanded, DNSSEC-validated
        address records for the input\n   domain, then that name is the preferred
        TLSA base domain.  Otherwise,\n   the unexpanded input domain is the candidate
        TLSA base domain.  When\n   no \"secure\" TLSA records are found at either
        the CNAME-expanded or\n   unexpanded domain, then DANE TLS does not apply
        for mail delivery via\n   the input domain in question.  And, as always, errors,
        \"bogus\"\n   results, or \"indeterminate\" results for any query in the process
        MUST\n   result in delaying or abandoning delivery.\n"
      title: 2.2.2.  Non-MX Destinations
    - contents:
      - "2.2.3.  TLSA Record Lookup\n   When the SMTP server's hostname is not a CNAME
        or DNAME alias, the\n   list of associated candidate TLSA base domains (see
        below) consists\n   of just the server hostname.\n   When the hostname is
        an alias with a \"secure\" (at every stage) full\n   expansion, the list of
        candidate TLSA base domains (see below) is a\n   pair of domains: the fully
        expanded server hostname first, and the\n   unexpanded server hostname second.\n
        \  Each candidate TLSA base domain (alias-expanded or original) is in\n   turn
        prefixed with service labels of the form \"_<port>._tcp\".  The\n   resulting
        domain name is used to issue a DNSSEC query with the query\n   type set to
        TLSA ([RFC6698], Section 7.1).\n   The first of these candidate domains to
        yield a \"secure\" TLSA RRset\n   becomes the actual TLSA base domain.\n   For
        SMTP, the destination TCP port is typically 25, but this may be\n   different
        with custom routes specified by the MTA administrator, in\n   which case the
        SMTP client MUST use the appropriate number in the\n   \"_<port>\" prefix
        in place of \"_25\".  If, for example, the candidate\n   base domain is \"mx.example.com\"
        and the SMTP connection is to port\n   25, the TLSA RRset is obtained via
        a DNSSEC query of the form:\n      _25._tcp.mx.example.com. IN TLSA ?\n   The
        query response may be a CNAME or the actual TLSA RRset.  If the\n   response
        is a CNAME, the SMTP client (through the use of its\n   security-aware stub
        resolver) restarts the TLSA query at the target\n   domain, following CNAMEs
        as appropriate, and keeps track of whether\n   or not the entire chain is
        \"secure\".  If any \"insecure\" records are\n   encountered or the TLSA records
        don't exist, the next candidate TLSA\n   base domain is tried instead.\n   If
        the ultimate response is a \"secure\" TLSA RRset, then the candidate\n   TLSA
        base domain will be the actual TLSA base domain, and the TLSA\n   RRset will
        constitute the TLSA records for the destination.  If none\n   of the candidate
        TLSA base domains yield \"secure\" TLSA records, then\n   the SMTP client
        is free to use pre-DANE opportunistic TLS (possibly\n   even cleartext).\n
        \  TLSA record publishers may leverage CNAMEs to reference a single\n   authoritative
        TLSA RRset specifying a common CA or a common\n   end-entity certificate to
        be used with multiple TLS services.  Such\n   CNAME expansion does not change
        the SMTP client's notion of the TLSA\n   base domain; thus, when _25._tcp.mx.example.com
        is a CNAME, the base\n   domain remains mx.example.com, and this is still
        the reference\n   identifier used together with the next-hop domain in peer
        certificate\n   name checks.\n   Note that shared end-entity certificate associations
        expose the\n   publishing domain to substitution attacks, where an MITM attacker
        can\n   reroute traffic to a different server that shares the same end-entity\n
        \  certificate.  Such shared end-entity TLSA records SHOULD be avoided\n   unless
        the servers in question are functionally equivalent or employ\n   mutually
        incompatible protocols (an active attacker gains nothing by\n   diverting
        client traffic from one such server to another).\n   A better example, employing
        a shared trust anchor rather than shared\n   end-entity certificates, is illustrated
        by the DNSSEC-validated\n   records below:\n      example.com.                IN
        MX 0 mx1.example.com.\n      example.com.                IN MX 0 mx2.example.com.\n
        \     _25._tcp.mx1.example.com.   IN CNAME tlsa201._dane.example.com.\n      _25._tcp.mx2.example.com.
        \  IN CNAME tlsa201._dane.example.com.\n      tlsa201._dane.example.com.  IN
        TLSA 2 0 1 e3b0c44298fc1c149a...\n   The SMTP servers mx1.example.com and
        mx2.example.com will be expected\n   to have certificates issued under a common
        trust anchor, but each MX\n   hostname's TLSA base domain remains unchanged
        despite the above CNAME\n   records.  Correspondingly, each SMTP server will
        be associated with a\n   pair of reference identifiers consisting of its hostname
        plus the\n   next-hop domain \"example.com\".\n   If, during TLSA resolution
        (including possible CNAME indirection), at\n   least one \"secure\" TLSA record
        is found (even if not usable because\n   it is unsupported by the implementation
        or support is\n   administratively disabled), then the corresponding host
        has signaled\n   its commitment to implement TLS.  The SMTP client MUST NOT
        deliver\n   mail via the corresponding host unless a TLS session is negotiated\n
        \  via STARTTLS.  This is required to avoid MITM STARTTLS downgrade\n   attacks.\n
        \  As noted previously (in Section 2.2.2), when no \"secure\" TLSA records\n
        \  are found at the fully CNAME-expanded name, the original unexpanded\n   name
        MUST be tried instead.  This supports customers of hosting\n   providers where
        the provider's zone cannot be validated with DNSSEC\n   but the customer has
        shared appropriate key material with the hosting\n   provider to enable TLS
        via SNI.  Intermediate names that arise during\n   CNAME expansion that are
        neither the original name nor the final name\n   are never candidate TLSA
        base domains, even if \"secure\".\n"
      title: 2.2.3.  TLSA Record Lookup
    title: 2.2.  TLS Discovery
  title: 2.  Identifying Applicable TLSA Records
- contents:
  - "3.  DANE Authentication\n   This section describes which TLSA records are applicable
    to SMTP\n   opportunistic DANE TLS and how to apply such records to authenticate\n
    \  the SMTP server.  With opportunistic DANE TLS, both the TLS support\n   implied
    by the presence of DANE TLSA records and the verification\n   parameters necessary
    to authenticate the TLS peer are obtained\n   together.  In contrast to protocols
    where channel security policy is\n   set exclusively by the client, authentication
    via this protocol is\n   expected to be less prone to connection failure caused
    by\n   incompatible configuration of the client and server.\n"
  - contents:
    - "3.1.  TLSA Certificate Usages\n   The DANE TLSA specification [RFC6698] defines
      multiple TLSA RR types\n   via combinations of three numeric parameters.  The
      numeric values of\n   these parameters were later given symbolic names in [RFC7218].
      \ The\n   rest of the TLSA record is the \"certificate association data field\",\n
      \  which specifies the full or digest value of a certificate or\n   public key.\n
      \  Since opportunistic DANE TLS will be used by non-interactive MTAs,\n   with
      no user to \"click OK\" when authentication fails, reliability of\n   peer authentication
      is paramount.  Server operators are advised to\n   publish TLSA records that
      are least likely to fail authentication due\n   to interoperability or operational
      problems.  Because DANE TLS relies\n   on coordinated changes to DNS and SMTP
      server settings, the best\n   choice of records to publish will depend on site-specific
      practices.\n   The certificate usage element of a TLSA record plays a critical
      role\n   in determining how the corresponding certificate association data\n
      \  field is used to authenticate a server's certificate chain.\n   Sections
      3.1.1 and 3.1.2 explain the process for certificate usages\n   DANE-EE(3) and
      DANE-TA(2), respectively.  Section 3.1.3 briefly\n   explains why certificate
      usages PKIX-TA(0) and PKIX-EE(1) are not\n   applicable with opportunistic DANE
      TLS.\n   In summary, we RECOMMEND the use of \"DANE-EE(3) SPKI(1) SHA2-256(1)\",\n
      \  with \"DANE-TA(2) Cert(0) SHA2-256(1)\" TLSA records as a second\n   choice,
      depending on site needs.  See Sections 3.1.1 and 3.1.2 for\n   more details.
      \ Other combinations of TLSA parameters either (1) are\n   explicitly unsupported
      or (2) offer little to recommend them over\n   these two.\n"
    - contents:
      - "3.1.1.  Certificate Usage DANE-EE(3)\n   Authentication via certificate usage
        DANE-EE(3) TLSA records involves\n   simply checking that the server's leaf
        certificate matches the TLSA\n   record.  In particular, the binding of the
        server public key to its\n   name is based entirely on the TLSA record association.
        \ The server\n   MUST be considered authenticated even if none of the names
        in the\n   certificate match the client's reference identity for the server.\n
        \  The expiration date of the server certificate MUST be ignored: the\n   validity
        period of the TLSA record key binding is determined by the\n   validity interval
        of the TLSA record DNSSEC signature.\n   With DANE-EE(3), servers need not
        employ SNI (they may ignore the\n   client's SNI message) even when the server
        is known under independent\n   names that would otherwise require separate
        certificates.  It is\n   instead sufficient for the TLSA RRsets for all the
        domains in\n   question to match the server's default certificate.  Of course,
        with\n   SMTP servers it is simpler still to publish the same MX hostname
        for\n   all the hosted domains.\n   For domains where it is practical to make
        coordinated changes in DNS\n   TLSA records during SMTP server key rotation,
        it is often best to\n   publish end-entity DANE-EE(3) certificate associations.
        \ DANE-EE(3)\n   certificates don't suddenly stop working when leaf or intermediate\n
        \  certificates expire, nor do they fail when the server operator\n   neglects
        to configure all the required issuer certificates in the\n   server certificate
        chain.\n   TLSA records published for SMTP servers SHOULD, in most cases,
        be\n   \"DANE-EE(3) SPKI(1) SHA2-256(1)\" records.  Since all DANE\n   implementations
        are required to support SHA2-256, this record type\n   works for all clients
        and need not change across certificate renewals\n   with the same key.\n"
      title: 3.1.1.  Certificate Usage DANE-EE(3)
    - contents:
      - "3.1.2.  Certificate Usage DANE-TA(2)\n   Some domains may prefer to avoid
        the operational complexity of\n   publishing unique TLSA RRs for each TLS
        service.  If the domain\n   employs a common issuing CA to create certificates
        for multiple TLS\n   services, it may be simpler to publish the issuing authority
        as a\n   trust anchor (TA) for the certificate chains of all relevant\n   services.
        \ The TLSA query domain (TLSA base domain with port and\n   protocol prefix
        labels) for each service issued by the same TA may\n   then be set to a CNAME
        alias that points to a common TLSA RRset that\n   matches the TA.  For example:\n
        \     example.com.                IN MX 0 mx1.example.com.\n      example.com.
        \               IN MX 0 mx2.example.com.\n      _25._tcp.mx1.example.com.
        \  IN CNAME tlsa201._dane.example.com.\n      _25._tcp.mx2.example.com.   IN
        CNAME tlsa201._dane.example.com.\n      tlsa201._dane.example.com.  IN TLSA
        2 0 1 e3b0c44298fc1c14....\n   With usage DANE-TA(2), the server certificates
        will need to have\n   names that match one of the client's reference identifiers
        (see\n   [RFC6125]).  The server MAY employ SNI to select the appropriate\n
        \  certificate to present to the client.\n   SMTP servers that rely on certificate
        usage DANE-TA(2) TLSA records\n   for TLS authentication MUST include the
        TA certificate as part of the\n   certificate chain presented in the TLS handshake
        server certificate\n   message even when it is a self-signed root certificate.
        \ Many SMTP\n   servers are not configured with a comprehensive list of trust\n
        \  anchors, nor are they expected to be at any point in the future.\n   Some
        MTAs will ignore all locally trusted certificates when\n   processing usage
        DANE-TA(2) TLSA records.  Thus, even when the TA\n   happens to be a public
        CA known to the SMTP client, authentication is\n   likely to fail unless the
        TA certificate is included in the TLS\n   server certificate message.\n   With
        some SMTP server software, it is not possible to configure the\n   server
        to include self-signed (root) CA certificates in the server\n   certificate
        chain.  Such servers either MUST publish DANE-TA(2)\n   records for an intermediate
        certificate or MUST instead use\n   DANE-EE(3) TLSA records.\n   TLSA records
        with a matching type of Full(0) are discouraged.  While\n   these potentially
        obviate the need to transmit the TA certificate in\n   the TLS server certificate
        message, client implementations may not be\n   able to augment the server
        certificate chain with the data obtained\n   from DNS, especially when the
        TLSA record supplies a bare key\n   (selector SPKI(1)).  Since the server
        will need to transmit the TA\n   certificate in any case, server operators
        SHOULD publish TLSA records\n   with a matching type other than Full(0) and
        avoid potential\n   interoperability issues with large TLSA records containing
        full\n   certificates or keys.\n   TLSA Publishers employing DANE-TA(2) records
        SHOULD publish records\n   with a selector of Cert(0).  Such TLSA records
        are associated with\n   the whole trust anchor certificate, not just with
        the trust anchor\n   public key.  In particular, the SMTP client SHOULD then
        apply any\n   relevant constraints from the trust anchor certificate, such
        as, for\n   example, path length constraints.\n   While a selector of SPKI(1)
        may also be employed, the resulting TLSA\n   record will not specify the full
        trust anchor certificate content,\n   and elements of the trust anchor certificate
        other than the public\n   key become mutable.  This may, for example, allow
        a subsidiary CA to\n   issue a chain that violates the trust anchor's path
        length or name\n   constraints.\n"
      title: 3.1.2.  Certificate Usage DANE-TA(2)
    - contents:
      - "3.1.3.  Certificate Usages PKIX-TA(0) and PKIX-EE(1)\n   Note that this section
        applies to MTA-to-MTA SMTP, which is normally\n   on port 25 -- that is, to
        servers that are the SMTP servers for one\n   or more destination domains.
        \ Other uses of SMTP, such as in\n   MUA-to-MSA submission on ports 587 or
        465, are out of scope for this\n   document.  Where those other uses also
        employ TLS opportunistically\n   and/or depend on DNSSEC as a result of DNS-based
        discovery of service\n   location, the relevant specifications should, as
        appropriate, arrive\n   at similar conclusions.\n   As noted in Sections 1.3.1
        and 1.3.2, sending MTAs cannot, without\n   relying on DNSSEC for \"secure\"
        MX records and DANE for STARTTLS\n   support signaling, perform server identity
        verification or prevent\n   STARTTLS downgrade attacks.  The use of PKIX CAs
        offers no added\n   security, since an attacker capable of compromising DNSSEC
        is free to\n   replace any PKIX-TA(0) or PKIX-EE(1) TLSA records with records\n
        \  bearing any convenient non-PKIX certificate usage.  Finally, as\n   explained
        in Section 1.3.4, there is no list of trusted CAs agreed\n   upon by all MTAs
        and no user to \"click OK\" when a server's CA is not\n   trusted by a client.\n
        \  Therefore, TLSA records for the port 25 SMTP service used by client\n   MTAs
        SHOULD NOT include TLSA RRs with certificate usage PKIX-TA(0) or\n   PKIX-EE(1).
        \ SMTP client MTAs cannot be expected to be configured\n   with a suitably
        complete set of trusted public CAs.  Lacking a\n   complete set of public
        CAs, MTA clients would not be able to verify\n   the certificates of SMTP
        servers whose issuing root CAs are not\n   trusted by the client.\n   Opportunistic
        DANE TLS needs to interoperate without bilateral\n   coordination of security
        settings between client and server systems.\n   Therefore, parameter choices
        that are fragile in the absence of\n   bilateral coordination are unsupported.
        \ Nothing is lost; since the\n   PKIX certificate usages cannot aid SMTP TLS
        security, they can only\n   impede SMTP TLS interoperability.\n   SMTP client
        treatment of TLSA RRs with certificate usages PKIX-TA(0)\n   or PKIX-EE(1)
        is undefined.  As with any other unsupported\n   certificate usage, SMTP clients
        MAY treat such records as \"unusable\".\n"
      title: 3.1.3.  Certificate Usages PKIX-TA(0) and PKIX-EE(1)
    title: 3.1.  TLSA Certificate Usages
  - contents:
    - "3.2.  Certificate Matching\n   When at least one usable \"secure\" TLSA record
      is found, the SMTP\n   client MUST use TLSA records to authenticate the SMTP
      server.\n   Messages MUST NOT be delivered via the SMTP server if authentication\n
      \  fails; otherwise, the SMTP client is vulnerable to MITM attacks.\n"
    - contents:
      - "3.2.1.  DANE-EE(3) Name Checks\n   The SMTP client MUST NOT perform certificate
        name checks with\n   certificate usage DANE-EE(3) (Section 3.1.1).\n"
      title: 3.2.1.  DANE-EE(3) Name Checks
    - contents:
      - "3.2.2.  DANE-TA(2) Name Checks\n   To match a server via a TLSA record with
        certificate usage\n   DANE-TA(2), the client MUST perform name checks to ensure
        that it has\n   reached the correct server.  In all DANE-TA(2) cases, the
        SMTP client\n   MUST employ the TLSA base domain as the primary reference
        identifier\n   for matching the server certificate.\n   TLSA records for MX
        hostnames:  If the TLSA base domain was obtained\n      indirectly via a \"secure\"
        MX lookup (including any CNAME-expanded\n      name of an MX hostname), then
        the original next-hop domain used in\n      the MX lookup MUST be included
        as a second reference identifier.\n      The CNAME-expanded original next-hop
        domain MUST be included as a\n      third reference identifier if different
        from the original next-hop\n      domain.  When the client MTA is employing
        DANE TLS security\n      despite \"insecure\" MX redirection, the MX hostname
        is the only\n      reference identifier.\n   TLSA records for non-MX hostnames:
        \ If MX records were not used\n      (e.g., if none exist) and the TLSA base
        domain is the\n      CNAME-expanded original next-hop domain, then the original\n
        \     next-hop domain MUST be included as a second reference identifier.\n
        \  Accepting certificates with the original next-hop domain in addition\n
        \  to the MX hostname allows a domain with multiple MX hostnames to\n   field
        a single certificate bearing a single domain name (i.e., the\n   email domain)
        across all the SMTP servers.  This also aids\n   interoperability with pre-DANE
        SMTP clients that are configured to\n   look for the email domain name in
        server certificates -- for example,\n   with \"secure\" DNS records as shown
        below:\n      exchange.example.org.            IN CNAME mail.example.org.\n
        \     mail.example.org.                IN CNAME example.com.\n      example.com.
        \                    IN MX    10 mx10.example.com.\n      example.com.                     IN
        MX    15 mx15.example.com.\n      example.com.                     IN MX    20
        mx20.example.com.\n      ;\n      mx10.example.com.                IN A     192.0.2.10\n
        \     _25._tcp.mx10.example.com.       IN TLSA  2 0 1 ...\n      ;\n      mx15.example.com.
        \               IN CNAME mxbackup.example.com.\n      mxbackup.example.com.
        \           IN A     192.0.2.15\n      ; _25._tcp.mxbackup.example.com. IN
        TLSA ? (NXDOMAIN)\n      _25._tcp.mx15.example.com.       IN TLSA  2 0 1 ...\n
        \     ;\n      mx20.example.com.                IN CNAME mxbackup.example.net.\n
        \     mxbackup.example.net.            IN A     198.51.100.20\n      _25._tcp.mxbackup.example.net.
        \  IN TLSA  2 0 1 ...\n   Certificate name checks for delivery of mail to
        exchange.example.org\n   via any of the associated SMTP servers MUST accept
        at least the names\n   \"exchange.example.org\" and \"example.com\", which
        are, respectively,\n   the original and fully expanded next-hop domain.  When
        the SMTP\n   server is mx10.example.com, name checks MUST accept the TLSA
        base\n   domain \"mx10.example.com\".  If, despite the fact that MX hostnames\n
        \  are required to not be aliases, the MTA supports delivery via\n   \"mx15.example.com\"
        or \"mx20.example.com\", then name checks MUST\n   accept the respective TLSA
        base domains \"mx15.example.com\" and\n   \"mxbackup.example.net\".\n"
      title: 3.2.2.  DANE-TA(2) Name Checks
    - contents:
      - "3.2.3.  Reference Identifier Matching\n   When name checks are applicable
        (certificate usage DANE-TA(2)), if\n   the server certificate contains a Subject
        Alternative Name extension\n   [RFC5280] with at least one DNS-ID [RFC6125],
        then only the DNS-IDs\n   are matched against the client's reference identifiers.
        \ The CN-ID\n   [RFC6125] is only considered when no DNS-IDs are present.
        \ The server\n   certificate is considered matched when one of its presented\n
        \  identifiers [RFC5280] matches any of the client's reference\n   identifiers.\n
        \  Wildcards are valid in either DNS-IDs or the CN-ID when applicable.\n   The
        wildcard character must be the entire first label of the DNS-ID\n   or CN-ID.
        \ Thus, \"*.example.com\" is valid, while \"smtp*.example.com\"\n   and \"*smtp.example.com\"
        are not.  SMTP clients MUST support wildcards\n   that match the first label
        of the reference identifier, with the\n   remaining labels matching verbatim.
        \ For example, the DNS-ID\n   \"*.example.com\" matches the reference identifier
        \"mx1.example.com\".\n   SMTP clients MAY, subject to local policy, allow
        wildcards to match\n   multiple reference identifier labels, but servers cannot
        expect broad\n   support for such a policy.  Therefore, any wildcards in server\n
        \  certificates SHOULD match exactly one label in either the TLSA base\n   domain
        or the next-hop domain.\n"
      title: 3.2.3.  Reference Identifier Matching
    title: 3.2.  Certificate Matching
  title: 3.  DANE Authentication
- contents:
  - "4.  Server Key Management\n   Two TLSA records MUST be published before employing
    a new EE or TA\n   public key or certificate: one matching the currently deployed
    key\n   and the other matching the new key scheduled to replace it.  Once\n   sufficient
    time has elapsed for all DNS caches to expire the previous\n   TLSA RRset and
    related signature RRsets, servers may be configured to\n   use the new EE private
    key and associated public key certificate or\n   may employ certificates signed
    by the new trust anchor.\n   Once the new public key or certificate is in use,
    the TLSA RR that\n   matches the retired key can be removed from DNS, leaving
    only RRs\n   that match keys or certificates in active use.\n   As described in
    Section 3.1.2, when server certificates are validated\n   via a DANE-TA(2) trust
    anchor and CNAME records are employed to store\n   the TA association data at
    a single location, the responsibility of\n   updating the TLSA RRset shifts to
    the operator of the trust anchor.\n   Before a new trust anchor is used to sign
    any new server\n   certificates, its certificate (digest) is added to the relevant
    TLSA\n   RRset.  After enough time elapses for the original TLSA RRset to age\n
    \  out of DNS caches, the new trust anchor can start issuing new server\n   certificates.
    \ Once all certificates issued under the previous trust\n   anchor have expired,
    its associated RRs can be removed from the TLSA\n   RRset.\n   In the DANE-TA(2)
    key management model, server operators do not\n   generally need to update DNS
    TLSA records after initially creating a\n   CNAME record that references the centrally
    operated DANE-TA(2) RRset.\n   If a particular server's key is compromised, its
    TLSA CNAME SHOULD be\n   replaced with a DANE-EE(3) association until the certificate
    for the\n   compromised key expires, at which point it can return to using a\n
    \  CNAME record.  If the central trust anchor is compromised, all\n   servers
    need to be issued new keys by a new TA, and an updated\n   DANE-TA(2) TLSA RRset
    needs to be published containing just the\n   new TA.\n   SMTP servers cannot
    expect broad Certificate Revocation List (CRL) or\n   Online Certificate Status
    Protocol (OCSP) support from SMTP clients.\n   As outlined above, with DANE, compromised
    server or trust anchor keys\n   can be \"revoked\" by removing them from the DNS
    without the need for\n   client-side support for OCSP or CRLs.\n"
  title: 4.  Server Key Management
- contents:
  - "5.  Digest Algorithm Agility\n   While [RFC6698] specifies multiple digest algorithms,
    it does not\n   specify a protocol by which the SMTP client and TLSA record publisher\n
    \  can agree on the strongest shared algorithm.  Such a protocol would\n   allow
    the client and server to avoid exposure to deprecated weaker\n   algorithms that
    are published for compatibility with less capable\n   clients.  When stronger
    algorithms are an option, deprecated\n   algorithms SHOULD be avoided.  Such a
    protocol is specified in\n   [RFC7671].  SMTP clients and servers that implement
    this\n   specification MUST comply with the requirements outlined in Section 9\n
    \  of [RFC7671].\n"
  title: 5.  Digest Algorithm Agility
- contents:
  - "6.  Mandatory TLS Security\n   An MTA implementing this protocol may require
    a stronger security\n   assurance when sending email to selected destinations.
    \ The sending\n   organization may need to send sensitive email and/or may have\n
    \  regulatory obligations to protect its content.  This protocol is not\n   in
    conflict with such a requirement and, in fact, can often simplify\n   authenticated
    delivery to such destinations.\n   Specifically, with domains that publish DANE
    TLSA records for their\n   MX hostnames, a sending MTA can be configured to use
    the receiving\n   domain's DANE TLSA records to authenticate the corresponding
    SMTP\n   server.  Authentication via DANE TLSA records is easier to manage, as\n
    \  changes in the receiver's expected certificate properties are made on\n   the
    receiver end and don't require manually communicated\n   configuration changes.
    \ With mandatory DANE TLS, when no usable TLSA\n   records are found, message
    delivery is delayed.  Thus, mail is only\n   sent when an authenticated TLS channel
    is established to the remote\n   SMTP server.\n   Administrators of mail servers
    that employ mandatory DANE TLS need to\n   carefully monitor their mail logs and
    queues.  If a partner domain\n   unwittingly misconfigures its TLSA records, disables
    DNSSEC, or\n   misconfigures SMTP server certificate chains, mail will be delayed\n
    \  and may bounce if the issue is not resolved in a timely manner.\n"
  title: 6.  Mandatory TLS Security
- contents:
  - "7.  Note on DANE for Message User Agents\n   We note that SMTP is also used between
    Message User Agents (MUAs) and\n   Message Submission Agents (MSAs) [RFC6409].
    \ In [RFC6186], a protocol\n   is specified that enables an MUA to dynamically
    locate the MSA based\n   on the user's email address.  SMTP connection security
    considerations\n   for MUAs implementing [RFC6186] are largely analogous to connection\n
    \  security requirements for MTAs, and this specification could be\n   applied
    largely verbatim with DNS MX records replaced by\n   corresponding DNS Service
    (SRV) records [RFC7673].\n   However, until MUAs begin to adopt the dynamic configuration\n
    \  mechanisms of [RFC6186], they are adequately served by more\n   traditional
    static TLS security policies.  Specification of DANE TLS\n   for MUA-to-MSA SMTP
    is left to future documents that focus\n   specifically on SMTP security between
    MUAs and MSAs.\n"
  title: 7.  Note on DANE for Message User Agents
- contents:
  - '8.  Interoperability Considerations

    '
  - contents:
    - "8.1.  SNI Support\n   To ensure that the server sends the right certificate
      chain, the SMTP\n   client MUST send the TLS SNI extension containing the TLSA
      base\n   domain.  This precludes the use of the Secure Socket Layer (SSL)\n
      \  HELLO that is SSL 2.0 compatible by the SMTP client.\n   Each SMTP server
      MUST present a certificate chain (see [RFC5246],\n   Section 7.4.2) that matches
      at least one of the TLSA records.  The\n   server MAY rely on SNI to determine
      which certificate chain to\n   present to the client.  Clients that don't send
      SNI information may\n   not see the expected certificate chain.\n   If the server's
      TLSA records match the server's default certificate\n   chain, the server need
      not support SNI.  In either case, the server\n   need not include the SNI extension
      in its TLS HELLO, as simply\n   returning a matching certificate chain is sufficient.
      \ Servers\n   MUST NOT enforce the use of SNI by clients, as the client may
      be\n   using unauthenticated opportunistic TLS and may not expect any\n   particular
      certificate from the server.  If the client sends no SNI\n   extension or sends
      an SNI extension for an unsupported domain, the\n   server MUST simply send
      some fallback certificate chain of its\n   choice.  The reason for not enforcing
      strict matching of the\n   requested SNI hostname is that DANE TLS clients are
      typically willing\n   to accept multiple server names but can only send one
      name in the SNI\n   extension.  The server's fallback certificate may match
      a different\n   name acceptable to the client, e.g., the original next-hop domain.\n"
    title: 8.1.  SNI Support
  - contents:
    - "8.2.  Anonymous TLS Cipher Suites\n   Since many SMTP servers either do not
      support or do not enable any\n   anonymous TLS cipher suites, SMTP client TLS
      HELLO messages SHOULD\n   offer to negotiate a typical set of non-anonymous
      cipher suites\n   required for interoperability with such servers.  An SMTP
      client\n   employing pre-DANE opportunistic TLS MAY also include one or more\n
      \  anonymous TLS cipher suites in its TLS HELLO.  SMTP servers that need\n   to
      interoperate with opportunistic TLS clients SHOULD be prepared to\n   interoperate
      with such clients by either always selecting a mutually\n   supported non-anonymous
      cipher suite or correctly handling client\n   connections that negotiate anonymous
      cipher suites.\n   Note that while SMTP server operators are under no obligation
      to\n   enable anonymous cipher suites, no security is gained by sending\n   certificates
      to clients that will ignore them.  Indeed, support for\n   anonymous cipher
      suites in the server makes audit trails more\n   informative.  Log entries that
      record connections that employed an\n   anonymous cipher suite record the fact
      that the clients did not care\n   to authenticate the server.\n"
    title: 8.2.  Anonymous TLS Cipher Suites
  title: 8.  Interoperability Considerations
- contents:
  - '9.  Operational Considerations

    '
  - contents:
    - "9.1.  Client Operational Considerations\n   An operational error on the sending
      or receiving side that cannot be\n   corrected in a timely manner may, at times,
      lead to consistent\n   failure to deliver time-sensitive email.  The sending
      MTA\n   administrator may have to choose between allowing email to queue\n   until
      the error is resolved and disabling opportunistic or mandatory\n   DANE TLS
      (Section 6) for one or more destinations.  The choice to\n   disable DANE TLS
      security should not be made lightly.  Every\n   reasonable effort should be
      made to determine that problems with mail\n   delivery are the result of an
      operational error and not an attack.  A\n   fallback strategy may be to configure
      explicit out-of-band TLS\n   security settings if supported by the sending MTA.\n
      \  SMTP clients may deploy opportunistic DANE TLS incrementally by\n   enabling
      it only for selected sites or may occasionally need to\n   disable opportunistic
      DANE TLS for peers that fail to interoperate\n   due to misconfiguration or
      software defects on either end.  Some\n   implementations MAY support DANE TLS
      in an \"audit only\" mode in which\n   failure to achieve the requisite security
      level is logged as a\n   warning and delivery proceeds at a reduced security
      level.  Unless\n   local policy specifies \"audit only\" or specifies that opportunistic\n
      \  DANE TLS is not to be used for a particular destination, an SMTP\n   client
      MUST NOT deliver mail via a server whose certificate chain\n   fails to match
      at least one TLSA record when usable TLSA records are\n   found for that server.\n"
    title: 9.1.  Client Operational Considerations
  - contents:
    - "9.2.  Publisher Operational Considerations\n   Some MTAs enable STARTTLS selectively.
      \ For example, they might only\n   support STARTTLS with clients that have previously
      demonstrated\n   \"proper MTA behavior\", e.g., by retrying the delivery of
      deferred\n   messages (greylisting).  If such an MTA publishes DANE TLSA records,\n
      \  sending MTAs that implement this specification will not attempt the\n   initial
      cleartext SMTP transaction needed to establish the \"proper\n   MTA behavior\",
      because they cannot establish the required channel\n   security.  Server operators
      MUST NOT implement selective STARTTLS if\n   they also want to support DANE
      TLSA.\n   TLSA Publishers MUST follow the guidelines in Section 8 of [RFC7671].\n
      \  TLSA Publishers SHOULD follow the TLSA publication size guidance\n   found
      in Section 10.1 of [RFC7671].\n   TLSA Publishers SHOULD follow the TLSA record
      TTL and signature\n   lifetime recommendations found in Section 13 of [RFC7671].\n"
    title: 9.2.  Publisher Operational Considerations
  title: 9.  Operational Considerations
- contents:
  - "10.  Security Considerations\n   This protocol leverages DANE TLSA records to
    implement MITM-resistant\n   Opportunistic Security [RFC7435] for SMTP.  For destination
    domains\n   that sign their MX records and publish signed TLSA records for their\n
    \  MX hostnames, this protocol allows sending MTAs to securely discover\n   both
    the availability of TLS and how to authenticate the destination.\n   This protocol
    does not aim to secure all SMTP traffic, as that is not\n   practical until DNSSEC
    and DANE adoption are universal.  The\n   incremental deployment provided by following
    this specification is a\n   best possible path for securing SMTP.  This protocol
    coexists and\n   interoperates with the existing insecure Internet email backbone.\n
    \  The protocol does not preclude existing non-opportunistic SMTP TLS\n   security
    arrangements, which can continue to be used as before via\n   manual configuration
    with negotiated out-of-band key and TLS\n   configuration exchanges.\n   Opportunistic
    SMTP TLS depends critically on DNSSEC for downgrade\n   resistance and secure
    resolution of the destination name.  If DNSSEC\n   is compromised, it is not possible
    to fall back on the public CA PKI\n   to prevent MITM attacks.  A successful breach
    of DNSSEC enables the\n   attacker to publish TLSA usage 3 certificate associations
    and thereby\n   bypass any security benefit the legitimate domain owner might
    hope to\n   gain by publishing usage 0 or usage 1 TLSA RRs.  Given the lack of\n
    \  public CA PKI support in existing MTA deployments, avoiding\n   certificate
    usages 0 and 1 simplifies implementation and deployment\n   with no adverse security
    consequences.\n   Implementations must strictly follow Sections 2.1.2, 2.1.3,
    2.2,\n   2.2.1, 2.2.2, 2.2.3, 3.2, and 9.1 of this specification; these\n   sections
    indicate when it is appropriate to initiate a\n   non-authenticated connection
    or cleartext connection to an SMTP\n   server.  Specifically, in order to prevent
    downgrade attacks on this\n   protocol, implementations must not initiate a connection
    when this\n   specification indicates that a particular SMTP server must be\n
    \  considered unreachable.\n"
  title: 10.  Security Considerations
- contents:
  - '11.  References

    '
  - contents:
    - "11.1.  Normative References\n   [RFC1034]  Mockapetris, P., \"Domain names
      - concepts and facilities\",\n              STD 13, RFC 1034, DOI 10.17487/RFC1034,
      November 1987,\n              <http://www.rfc-editor.org/info/rfc1034>.\n   [RFC2119]
      \ Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC3207]  Hoffman,
      P., \"SMTP Service Extension for Secure SMTP over\n              Transport Layer
      Security\", RFC 3207, DOI 10.17487/RFC3207,\n              February 2002, <http://www.rfc-editor.org/info/rfc3207>.\n
      \  [RFC4033]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n              Rose,
      \"DNS Security Introduction and Requirements\",\n              RFC 4033, DOI
      10.17487/RFC4033, March 2005,\n              <http://www.rfc-editor.org/info/rfc4033>.\n
      \  [RFC4034]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n              Rose,
      \"Resource Records for the DNS Security Extensions\",\n              RFC 4034,
      DOI 10.17487/RFC4034, March 2005,\n              <http://www.rfc-editor.org/info/rfc4034>.\n
      \  [RFC4035]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n              Rose,
      \"Protocol Modifications for the DNS Security\n              Extensions\", RFC
      4035, DOI 10.17487/RFC4035, March 2005,\n              <http://www.rfc-editor.org/info/rfc4035>.\n
      \  [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)
      Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246, August
      2008,\n              <http://www.rfc-editor.org/info/rfc5246>.\n   [RFC5280]
      \ Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n              Housley,
      R., and W. Polk, \"Internet X.509 Public Key\n              Infrastructure Certificate
      and Certificate Revocation List\n              (CRL) Profile\", RFC 5280, DOI
      10.17487/RFC5280, May 2008,\n              <http://www.rfc-editor.org/info/rfc5280>.\n
      \  [RFC5321]  Klensin, J., \"Simple Mail Transfer Protocol\", RFC 5321,\n              DOI
      10.17487/RFC5321, October 2008,\n              <http://www.rfc-editor.org/info/rfc5321>.\n
      \  [RFC5598]  Crocker, D., \"Internet Mail Architecture\", RFC 5598,\n              DOI
      10.17487/RFC5598, July 2009,\n              <http://www.rfc-editor.org/info/rfc5598>.\n
      \  [RFC6066]  Eastlake 3rd, D., \"Transport Layer Security (TLS)\n              Extensions:
      Extension Definitions\", RFC 6066,\n              DOI 10.17487/RFC6066, January
      2011,\n              <http://www.rfc-editor.org/info/rfc6066>.\n   [RFC6125]
      \ Saint-Andre, P. and J. Hodges, \"Representation and\n              Verification
      of Domain-Based Application Service Identity\n              within Internet
      Public Key Infrastructure Using X.509\n              (PKIX) Certificates in
      the Context of Transport Layer\n              Security (TLS)\", RFC 6125, DOI
      10.17487/RFC6125,\n              March 2011, <http://www.rfc-editor.org/info/rfc6125>.\n
      \  [RFC6186]  Daboo, C., \"Use of SRV Records for Locating Email\n              Submission/Access
      Services\", RFC 6186,\n              DOI 10.17487/RFC6186, March 2011,\n              <http://www.rfc-editor.org/info/rfc6186>.\n
      \  [RFC6672]  Rose, S. and W. Wijngaards, \"DNAME Redirection in the\n              DNS\",
      RFC 6672, DOI 10.17487/RFC6672, June 2012,\n              <http://www.rfc-editor.org/info/rfc6672>.\n
      \  [RFC6698]  Hoffman, P. and J. Schlyter, \"The DNS-Based Authentication\n
      \             of Named Entities (DANE) Transport Layer Security (TLS)\n              Protocol:
      TLSA\", RFC 6698, DOI 10.17487/RFC6698,\n              August 2012, <http://www.rfc-editor.org/info/rfc6698>.\n
      \  [RFC7218]  Gudmundsson, O., \"Adding Acronyms to Simplify\n              Conversations
      about DNS-Based Authentication of Named\n              Entities (DANE)\", RFC
      7218, DOI 10.17487/RFC7218,\n              April 2014, <http://www.rfc-editor.org/info/rfc7218>.\n
      \  [RFC7671]  Dukhovni, V. and W. Hardaker, \"The DNS-Based\n              Authentication
      of Named Entities (DANE) Protocol: Updates\n              and Operational Guidance\",
      RFC 7671, DOI 10.17487/RFC7671,\n              October 2015, <http://www.rfc-editor.org/info/rfc7671>.\n"
    title: 11.1.  Normative References
  - contents:
    - "11.2.  Informative References\n   [RFC1035]  Mockapetris, P., \"Domain names
      - implementation and\n              specification\", STD 13, RFC 1035, DOI 10.17487/RFC1035,\n
      \             November 1987, <http://www.rfc-editor.org/info/rfc1035>.\n   [RFC2136]
      \ Vixie, P., Ed., Thomson, S., Rekhter, Y., and J. Bound,\n              \"Dynamic
      Updates in the Domain Name System (DNS UPDATE)\",\n              RFC 2136, DOI
      10.17487/RFC2136, April 1997,\n              <http://www.rfc-editor.org/info/rfc2136>.\n
      \  [RFC2181]  Elz, R. and R. Bush, \"Clarifications to the DNS\n              Specification\",
      RFC 2181, DOI 10.17487/RFC2181, July 1997,\n              <http://www.rfc-editor.org/info/rfc2181>.\n
      \  [RFC4949]  Shirey, R., \"Internet Security Glossary, Version 2\",\n              FYI
      36, RFC 4949, DOI 10.17487/RFC4949, August 2007,\n              <http://www.rfc-editor.org/info/rfc4949>.\n
      \  [RFC6409]  Gellens, R. and J. Klensin, \"Message Submission for Mail\",\n
      \             STD 72, RFC 6409, DOI 10.17487/RFC6409, November 2011,\n              <http://www.rfc-editor.org/info/rfc6409>.\n
      \  [RFC7435]  Dukhovni, V., \"Opportunistic Security: Some Protection\n              Most
      of the Time\", RFC 7435, DOI 10.17487/RFC7435,\n              December 2014,
      <http://www.rfc-editor.org/info/rfc7435>.\n   [RFC7673]  Finch, T., Miller,
      M., and P. Saint-Andre, \"Using\n              DNS-Based Authentication of Named
      Entities (DANE) TLSA\n              Records with SRV Records\", RFC 7673, DOI
      10.17487/RFC7673,\n              October 2015, <http://www.rfc-editor.org/info/rfc7673>.\n"
    title: 11.2.  Informative References
  title: 11.  References
- contents:
  - "Acknowledgements\n   The authors would like to extend great thanks to Tony Finch,
    who\n   started the original version of a DANE SMTP document.  His work is\n   greatly
    appreciated and has been incorporated into this document.\n   The authors would
    like to additionally thank Phil Pennock for his\n   comments and advice on this
    document.\n   Acknowledgements from Viktor: Thanks to Paul Hoffman, who motivated\n
    \  me to begin work on this memo and provided feedback on early draft\n   versions
    of this document.  Thanks to Patrick Koetter, Perry Metzger,\n   and Nico Williams
    for valuable review comments.  Thanks also to\n   Wietse Venema, who created Postfix,
    and whose advice and feedback\n   were essential to the development of the Postfix
    DANE implementation.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Viktor Dukhovni\n   Two Sigma\n   Email: ietf-dane@dukhovni.org\n
    \  Wes Hardaker\n   Parsons\n   P.O. Box 382\n   Davis, CA  95617\n   United States\n
    \  Email: ietf@hardakers.net\n"
  title: Authors' Addresses
