- title: __initial_text__
  contents:
  - '                     The Application Exchange Core

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes Application Exchange (APEX) Core, an extensible,\n\
    \   asynchronous message relaying service for application layer programs.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.      Introduction . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   1.1     Overview . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   1.2     Architecture at a Glance . . . . . . . . . . . . .\
    \ . . . .  4\n   2.      Service Principles . . . . . . . . . . . . . . . . .\
    \ . . .  5\n   2.1     Modes of Operation . . . . . . . . . . . . . . . . . .\
    \ . .  5\n   2.2     Naming of Entities . . . . . . . . . . . . . . . . . . .\
    \ .  6\n   2.2.1   Comparing Endpoints  . . . . . . . . . . . . . . . . . . .\
    \  7\n   3.      Service Provisioning . . . . . . . . . . . . . . . . . . .  7\n\
    \   3.1     Connection Establishment . . . . . . . . . . . . . . . . .  7\n  \
    \ 3.2     Authentication . . . . . . . . . . . . . . . . . . . . . .  8\n   3.3\
    \     Authorization  . . . . . . . . . . . . . . . . . . . . . .  8\n   3.4  \
    \   Confidentiality  . . . . . . . . . . . . . . . . . . . . .  8\n   3.5    \
    \ Relaying Integrity . . . . . . . . . . . . . . . . . . . .  8\n   3.6     Traffic\
    \ Analysis . . . . . . . . . . . . . . . . . . . . .  9\n   4.      The APEX .\
    \ . . . . . . . . . . . . . . . . . . . . . . . .  9\n   4.1     Use of XML and\
    \ MIME  . . . . . . . . . . . . . . . . . . .  9\n   4.2     Profile Identification\
    \ and Initialization  . . . . . . . . 10\n   4.3     Message Syntax . . . . .\
    \ . . . . . . . . . . . . . . . . . 11\n   4.4     Message Semantics  . . . .\
    \ . . . . . . . . . . . . . . . . 11\n   4.4.1   The Attach Operation . . . .\
    \ . . . . . . . . . . . . . . . 11\n   4.4.2   The Bind Operation . . . . . .\
    \ . . . . . . . . . . . . . . 13\n   4.4.3   The Terminate Operation  . . . .\
    \ . . . . . . . . . . . . . 14\n   4.4.4   The Data Operation . . . . . . . .\
    \ . . . . . . . . . . . . 15\n   4.4.4.1 Relay Processing of Data . . . . . .\
    \ . . . . . . . . . . . 17\n   4.4.4.2 Application Processing of Data . . . .\
    \ . . . . . . . . . . 18\n   4.5     APEX Access Policies . . . . . . . . . .\
    \ . . . . . . . . . 19\n   4.5.1   Access Policies in the Endpoint-Relay Mode\
    \ . . . . . . . . 19\n   4.5.2   Access Policies in the Relay-Relay Mode  . .\
    \ . . . . . . . 20\n   5.      APEX Options . . . . . . . . . . . . . . . . .\
    \ . . . . . . 20\n   5.1     The statusRequest Option . . . . . . . . . . . .\
    \ . . . . . 22\n   6.      APEX Services  . . . . . . . . . . . . . . . . . .\
    \ . . . . 26\n   6.1     Use of the APEX Core DTD . . . . . . . . . . . . . .\
    \ . . . 27\n   6.1.1   Transaction-Identifiers  . . . . . . . . . . . . . . .\
    \ . . 27\n   6.1.2   The Reply Element  . . . . . . . . . . . . . . . . . . .\
    \ . 28\n   6.2     The Report Service . . . . . . . . . . . . . . . . . . . .\
    \ 28\n   7.      Registration Templates . . . . . . . . . . . . . . . . . . 29\n\
    \   7.1     APEX Option Registration Template  . . . . . . . . . . . . 29\n  \
    \ 7.2     APEX Service Registration Template . . . . . . . . . . . . 29\n   7.3\
    \     APEX Endpoint Application Registration Template  . . . . . 30\n   8.   \
    \   Initial Registrations  . . . . . . . . . . . . . . . . . . 30\n   8.1    \
    \ Registration: The APEX Profile . . . . . . . . . . . . . . 30\n   8.2     Registration:\
    \ The System (Well-Known) TCP port number for\n           apex-mesh  . . . . .\
    \ . . . . . . . . . . . . . . . . . . . 31\n   8.3     Registration: The System\
    \ (Well-Known) TCP port number for\n           apex-edge  . . . . . . . . . .\
    \ . . . . . . . . . . . . . . 31\n   8.4     Registration: The statusRequest Option\
    \ . . . . . . . . . . 31\n   8.5     Registration: The Report Service . . . .\
    \ . . . . . . . . . 32\n   9.      DTDs . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . 32\n   9.1     The APEX Core DTD  . . . . . . . . . . . . .\
    \ . . . . . . . 32\n   9.2     The Report Service DTD . . . . . . . . . . . .\
    \ . . . . . . 34\n   10.     Reply Codes  . . . . . . . . . . . . . . . . . .\
    \ . . . . . 35\n   11.     Security Considerations  . . . . . . . . . . . . .\
    \ . . . . 36\n           References . . . . . . . . . . . . . . . . . . . . .\
    \ . . . 36\n           Authors' Addresses . . . . . . . . . . . . . . . . . .\
    \ . . 38\n   A.      Acknowledgements . . . . . . . . . . . . . . . . . . . .\
    \ . 39\n   B.      IANA Considerations  . . . . . . . . . . . . . . . . . . .\
    \ 39\n           Full Copyright Statement . . . . . . . . . . . . . . . . . 40\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   Network applications can be broadly distinguished by five\
    \ operational\n   characteristics:\n   o  server push or client pull;\n   o  synchronous\
    \ (interactive) or asynchronous (batch);\n   o  time-assured or time-insensitive;\n\
    \   o  best-effort or reliable; and,\n   o  stateful or stateless.\n   For example:\n\
    \   o  the world-wide web is a pull, synchronous, time-insensitive,\n      reliable,\
    \ stateless service; whilst\n   o  Internet mail is a push, asynchronous, time-insensitive,\
    \ best-\n      effort (without DSN), stateless service.\n   Messaging applications\
    \ vary considerably in their operational\n   requirements.  For example, some\
    \ messaging applications require\n   assurance of timeliness and reliability,\
    \ whilst others do not.\n   These features come at a cost, in terms of both infrastructural\
    \ and\n   configuration complexity.  Accordingly, the underlying service must\n\
    \   be extensible to support different requirements in a consistent\n   manner.\n\
    \   This memo defines a core messaging service that supports a range of\n   operational\
    \ characteristics.  The core service supports a variety of\n   tailored services\
    \ for both user-based and programmatic exchanges.\n"
- title: 1.1 Overview
  contents:
  - "1.1 Overview\n   APEX provides an extensible, asynchronous message relaying service\n\
    \   for application layer programs.\n   APEX, at its core, provides a best-effort\
    \ datagram service.  Each\n   datagram, simply termed \"data\", is originated\
    \ and received by APEX\n   \"endpoints\" -- applications that dynamically attach\
    \ to the APEX\n   \"relaying mesh\".\n   The data transmitted specifies:\n   o\
    \  an originating endpoint;\n   o  an opaque content (via a URI-reference);\n\
    \   o  one or more recipient endpoints; and,\n   o  zero or more options.\n  \
    \ Options are used to alter the semantics of the service, which may\n   occur\
    \ on a per-recipient or per-data basis, and may be processed by\n   either a single\
    \ or multiple relays.\n   Additional APEX services are provided on top of the\
    \ relaying mesh;\n   e.g., access control and presence information.\n   APEX is\
    \ specified, in part, as a BEEP [1] \"profile\".  Accordingly,\n   many aspects\
    \ of APEX (e.g., authentication) are provided within the\n   BEEP core.  Throughout\
    \ this memo, the terms \"peer\", \"initiator\",\n   \"listener\", \"client\",\
    \ and \"server\" are used in the context of BEEP.\n   In particular, Section 2.1\
    \ of the BEEP core memo discusses the roles\n   that a BEEP peer may perform.\n\
    \   When reading this memo, note that the terms \"endpoint\" and \"relay\"\n \
    \  are specific to APEX, they do not exist in the context of BEEP.\n"
- title: 1.2 Architecture at a Glance
  contents:
  - "1.2 Architecture at a Glance\n   The APEX stack:\n      +-------------+\n   \
    \   | APEX        |        an APEX process is either:\n      |     process |\n\
    \      +-------------+            - an application attached as an APEX\n     \
    \ |             |              endpoint; or,\n      |    APEX     |\n      | \
    \            |            - an APEX relay\n      +-------------+\n      |    \
    \         |        APEX services are realized as applications\n      |    BEEP\
    \     |        having a special relationship with the APEX\n      |          \
    \   |        relays in their administrative domain\n      +-------------+\n  \
    \    |     TCP     |\n      +-------------+\n      |     ...     |\n      +-------------+\n\
    \   The APEX entities:\n          administrative domain #1          administrative\
    \ domain #2\n       +----------------------------+    +----------------------------+\n\
    \       |   +------+                 |    |                 +------+   |\n   \
    \    |   |      |                 |    |                 |      |   |\n      \
    \ |   | appl |                 |    |                 | appl |   |\n       | \
    \  |      |                 |    |                 |      |   |\n       |   +......+\
    \       +------+  |    |  +------+       +......+   |\n       |   |      |   \
    \    |      |  |    |  |      |       |      |   |\n       |   |end-  |      \
    \ |relay |  |    |  |relay |       |end-  |   |\n       |   | point|       | \
    \     |  |    |  |      |       | point|   |\n       |   +------+       +------+\
    \  |    |  +------+       +------+   |\n       |   |      |       |      |  |\
    \    |  |      |       |      |   |\n       |   | APEX |       | APEX |  |   \
    \ |  | APEX |       | APEX |   |\n       |   |      |       |      |  |    | \
    \ |      |       |      |   |\n       |   +------+       +------+  |    |  +------+\
    \       +------+   |\n       |        ||         ||  ||   |    |   ||  ||    \
    \     ||        |\n       |        =============  ================  =============\
    \        |\n       +----------------------------+    +----------------------------+\n\
    \                      | <---- APEX relaying mesh ----> |\n           Note: relaying\
    \ between administrative domains is configured\n                 using SRV RRs.\
    \  Accordingly, the actual number of\n                 relays between two endpoints\
    \ is not fixed.\n"
- title: 2. Service Principles
  contents:
  - '2. Service Principles

    '
- title: 2.1 Modes of Operation
  contents:
  - "2.1 Modes of Operation\n   APEX is used in two modes:\n   endpoint-relay: in\
    \ which the endpoint is always the BEEP initiator of\n      the service, whilst\
    \ relays are always the BEEP listeners.  In this\n      context, applications\
    \ attach as endpoints, and then the\n      transmission of data occurs.\n   relay-relay:\
    \ in which relays typically, though not necessarily,\n      reside in different\
    \ administrative domains.  In this context,\n      applications bind as relays,\
    \ and then the transmission of data\n      occurs.\n   In the endpoint-relay mode,\
    \ an endpoint (BEEP initiator) may:\n   o  attach as one or more endpoints;\n\
    \   o  send data to other endpoints;\n   o  receive data from other endpoints;\
    \ and,\n   o  terminate any of its attachments.\n   A relay (BEEP listener), in\
    \ addition to servicing requests from a\n   BEEP initiator, may:\n   o  terminate\
    \ any of the endpoint's attachments;\n   o  deliver data from other endpoints;\
    \ and,\n   o  indicate the delivery status of data sent earlier by the endpoint.\n\
    \   In the relay-relay mode, a relay (BEEP listener or initiator) may:\n   o \
    \ bind as one or more administrative domains;\n   o  send data;\n   o  receive\
    \ data; and,\n   o  terminate any bindings.\n"
- title: 2.2 Naming of Entities
  contents:
  - "2.2 Naming of Entities\n   Endpoints are named using the following ABNF [2] syntax:\n\
    \      ;; Domain is defined in [3], either a FQDN or a literal\n      entity \
    \     = local \"@\" Domain\n      local       = address [ \"/\" subaddress ]\n\
    \      address     = token\n      subaddress  = token\n      ;; all non-control\
    \ characters, excluding \"/\" and \"@\" delimiters\n      token       = 1*(%x20-2E\
    \ / %x30-3F / %x41-7E / UTF-8) ;; [4]\n   Two further conventions are applied\
    \ when using this syntax:\n   the \"apex=\" convention: All endpoint identities\
    \ having a local-part\n      starting with \"apex=\" are reserved for use by APEX\
    \ services\n      registered with the IANA; and,\n   the \"subaddress\" convention:\
    \ If the solidus character (\"/\", decimal\n      code 47) occurs in the local-part,\
    \ this identifies a subaddress of\n      an endpoint identity (e.g., \"fred/appl=wb@example.com\"\
    \ is a\n      subaddress of the APEX endpoint \"fred@example.com\").\n      All\
    \ subaddresses starting with \"appl=\" are reserved for use by\n      APEX endpoint\
    \ applications registered with the IANA.\n   Relays, although not named, serve\
    \ of behalf of administrative\n   domains, as identified by a FQDN or a domain-literal,\
    \ e.g.,\n   \"example.com\" or \"[10.0.0.1]\".\n   In APEX, \"endpoints\" and\
    \ \"relays\" are the fundamental entities.  APEX\n   is carried over BEEP, which\
    \ has the \"peer\" as its fundamental entity.\n   The relationship between BEEP\
    \ peer entities and APEX endpoint and\n   relay entities are defined by APEX's\
    \ Access Policies (Section 4.5).\n"
- title: 2.2.1 Comparing Endpoints
  contents:
  - "2.2.1 Comparing Endpoints\n   Note that since the \"local\" part of an entity\
    \ is a string of UTF-8\n   [4] octets, comparison operations on the \"local\"\
    \ part use exact\n   matching (i.e., are case-sensitive).\n   Accordingly, \"\
    fred@example.com\" and \"Fred@example.com\" refer to\n   different endpoints.\
    \  Of course, relays serving the \"example.com\"\n   administrative domain may\
    \ choose to treat the two endpoints\n   identically for the purposes of routing\
    \ and delivery.\n   Finally, note that if an APEX endpoint is represented using\
    \ a\n   transmission encoding, then, prior to comparison, the encoding is\n  \
    \ reversed.  For example, if the URL encoding is used, then\n   \"apex:fred@example.com\"\
    \ is identical to \"apex:f%72ed@example.com\".\n"
- title: 3. Service Provisioning
  contents:
  - '3. Service Provisioning

    '
- title: 3.1 Connection Establishment
  contents:
  - "3.1 Connection Establishment\n   The SRV algorithm [5] is used to determine the\
    \ IP/TCP addressing\n   information assigned to the relays for an administrative\
    \ domain\n   identified by a FQDN:\n   service: \"apex-edge\" (for the endpoint-relay\
    \ mode), or \"apex-mesh\"\n      (for the relay-relay mode);\n   protocol: \"\
    tcp\"; and,\n   domain: the administrative domain.\n   If the administrative domain\
    \ is identified by a domain-literal, then\n   the IP address information is taken\
    \ directly from the literal and the\n   TCP port number used is assigned by the\
    \ IANA for the registration in\n   Section 8.2.\n"
- title: 3.2 Authentication
  contents:
  - "3.2 Authentication\n   Authentication is a matter of provisioning for each BEEP\
    \ peer (c.f.,\n   Section 4.5).\n   An APEX relay might be provisioned to allow\
    \ a BEEP peer identity to\n   coincide with a given endpoint identity.  For example,\
    \ a relay in the\n   \"example.com\" administrative domain may be configured to\
    \ allow a BEEP\n   peer identified as \"fred@example.com\" to be authorized to\
    \ attach as\n   the APEX endpoint \"fred@example.com\".\n"
- title: 3.3 Authorization
  contents:
  - "3.3 Authorization\n   Authorization is a matter of provisioning for each BEEP\
    \ peer (c.f.,\n   Section 4.5).\n   Typically, a relay requires that its BEEP\
    \ peer authenticate as a\n   prelude to authorization, but an endpoint usually\
    \ does not require\n   the same of its BEEP peer.\n"
- title: 3.4 Confidentiality
  contents:
  - "3.4 Confidentiality\n   Confidentiality is a matter of provisioning for each\
    \ BEEP peer.\n   Typically, any data considered sensitive by an originating endpoint\n\
    \   will have its content encrypted for the intended recipient\n   endpoint(s),\
    \ rather than relying on hop-by-hop encryption.\n   Similarly, an originating\
    \ endpoint will sign the content if end-to-\n   end authentication is desired.\n"
- title: 3.5 Relaying Integrity
  contents:
  - "3.5 Relaying Integrity\n   Data are relayed according to SRV entries in the DNS.\
    \  Accordingly,\n   relaying integrity is a function of the DNS and the applications\n\
    \   making use of the DNS.  Additional assurance is provided if the BEEP\n   initiator\
    \ requires that the BEEP listener authenticate itself.\n"
- title: 3.6 Traffic Analysis
  contents:
  - "3.6 Traffic Analysis\n   Hop-by-hop protection of data transmitted through the\
    \ relaying mesh\n   (endpoint identities and content) is afforded at the BEEP\
    \ level\n   through the use of a transport security profile.  Other traffic\n\
    \   characteristics, e.g., volume and timing of transmissions, are not\n   protected\
    \ from third-party analysis.\n"
- title: 4. The APEX
  contents:
  - "4. The APEX\n   Section 8.1 contains the BEEP profile registration for APEX.\n"
- title: 4.1 Use of XML and MIME
  contents:
  - "4.1 Use of XML and MIME\n   Each BEEP payload exchanged via APEX consists of\
    \ an XML document and\n   possibly an arbitrary MIME content.\n   If only an XML\
    \ document is sent in the BEEP payload, then the mapping\n   to a BEEP payload\
    \ is straight-forward, e.g.,\n      C: MSG 1 2 . 111 39\n      C: Content-Type:\
    \ application/beep+xml\n      C:\n      C: <terminate transID='1' />\n      C:\
    \ END\n   Otherwise, if an arbitrary MIME content is present, it is indicated\n\
    \   by a URI-reference [6] in the XML control document.  The URI-\n   reference\
    \ may contain an absolute-URI (and possibly a fragment-\n   identifier), or it\
    \ may be a relative-URI consisting only of a\n   fragment-identifier.  Arbitrary\
    \ MIME content is included in the BEEP\n   payload by using a \"multipart/related\"\
    \ [7], identified using a \"cid\"\n   URL [8], and the XML control document occurs\
    \ as the start of the\n   \"multipart/related\", e.g.,\n      C: MSG 1 1 . 42\
    \ 1234\n      C: Content-Type: multipart/related; boundary=\"boundary\";\n   \
    \   C:               start=\"<1@example.com>\";\n      C:               type=\"\
    application/beep+xml\"\n      C:\n      C: --boundary\n      C: Content-Type:\
    \ application/beep+xml\n      C: Content-ID: <1@example.com>\n      C:\n     \
    \ C: <data content='cid:2@example.com'>\n      C:     <originator identity='fred@example.com'\
    \ />\n      C:     <recipient identity='barney@example.com' />\n      C: </data>\n\
    \      C: --boundary\n      C: Content-Type: image/gif\n      C: Content-Transfer-Encoding:\
    \ binary\n      C: Content-ID: <2@example.com>\n      C:\n      C: ...\n     \
    \ C: --boundary--\n      C: END\n   Because BEEP provides an 8bit-wide path, a\
    \ \"transformative\" Content-\n   Transfer-Encoding (e.g., \"base64\" or \"quoted-printable\"\
    ) should not\n   be used.  Further, note that MIME [9] requires that the value\
    \ of the\n   \"Content-ID\" header be globally unique.\n   If the arbitrary MIME\
    \ content is itself an XML document, it may be\n   contained within the control\
    \ document directly as a \"data-content\"\n   element, and identified using a\
    \ URI-reference consisting of only a\n   fragment-identifier, e.g.,\n      C:\
    \ MSG 1 1 . 42 295\n      C: Content-Type: application/beep+xml\n      C:\n  \
    \    C: <data content='#Content'>\n      C:     <originator identity='fred@example.com'\
    \ />\n      C:     <recipient identity='barney@example.com' />\n      C:     <data-content\
    \ Name='Content'>\n      C:         <statusResponse transID='86'>\n      C:  \
    \           <destination identity='barney@example.com'>\n      C:            \
    \     <reply code='250' />\n      C:             </destination>\n      C:    \
    \     </statusResponse>\n      C:     </data-content>\n      C: </data>\n    \
    \  C: END\n"
- title: 4.2 Profile Identification and Initialization
  contents:
  - "4.2 Profile Identification and Initialization\n   The APEX is identified as\n\
    \      http://iana.org/beep/APEX\n   in the BEEP \"profile\" element during channel\
    \ creation.\n   No elements are required to be exchanged during channel creation;\n\
    \   however, in the endpoint-relay mode, the BEEP initiator will\n   typically\
    \ include an \"attach\" element during channel creation, e.g.,\n      <start number='1'>\n\
    \          <profile uri='http://iana.org/beep/APEX'>\n              <![CDATA[<attach\
    \ endpoint='fred@example.com'\n                               transID='1' />]]>\n\
    \          </profile>\n      </start>\n   Similarly, in the relay-relay mode,\
    \ the BEEP initiator will typically\n   include an \"bind\" element during channel\
    \ creation, e.g.,\n      <start number='1'>\n          <profile uri='http://iana.org/beep/APEX'>\n\
    \              <![CDATA[<bind relay='example.com'\n                          \
    \   transID='1' />]]>\n          </profile>\n      </start>\n"
- title: 4.3 Message Syntax
  contents:
  - "4.3 Message Syntax\n   Section 9.1 defines the BEEP payloads that are used in\
    \ the APEX.\n"
- title: 4.4 Message Semantics
  contents:
  - '4.4 Message Semantics

    '
- title: 4.4.1 The Attach Operation
  contents:
  - "4.4.1 The Attach Operation\n   When an application wants to attach to the relaying\
    \ mesh as a given\n   endpoint, it sends an \"attach\" element to a relay, e.g.,\n\
    \          +-------+                  +-------+\n          |       | -- attach\
    \ -----> |       |\n          | appl. |                  | relay |\n         \
    \ |       | <--------- ok -- |       |\n          +-------+                  +-------+\n\
    \        C: <attach endpoint='fred@example.com' transID='1' />\n        S: <ok\
    \ />\n   or\n          +-------+                  +-------+\n          |     \
    \  | -- attach -----> |       |\n          |       |                  |      \
    \ |\n          |       | <--------- ok -- |       |\n          | appl. |     \
    \             | relay |\n          |       | -- attach -----> |       |\n    \
    \      |       |                  |       |\n          |       | <--------- ok\
    \ -- |       |\n          +-------+                  +-------+\n        C: <attach\
    \ endpoint='fred@example.com' transID='1' />\n        S: <ok />\n        C: <attach\
    \ endpoint='wilma@example.com' transID='2' />\n        S: <ok />\n   or\n    \
    \      +-------+                  +-------+\n          |       | -- attach ----->\
    \ |       |\n          | appl. |                  | relay |\n          |     \
    \  | <------ error -- |       |\n          +-------+                  +-------+\n\
    \        C: <attach endpoint='fred@example.com' transID='1' />\n        S: <error\
    \ code='537'>access denied</error>\n   The \"attach\" element has an \"endpoint\"\
    \ attribute, a \"transID\"\n   attribute, and contains zero or more \"option\"\
    \ elements:\n   o  the \"endpoint\" attribute specifies the endpoint that the\n\
    \      application wants to attach as;\n   o  the \"transID\" attribute specifies\
    \ the transaction-identifier\n      associated with this operation; and,\n   o\
    \  the \"option\" elements, if any, specify additional processing\n      options\
    \ (Section 5).\n   When a relay receives an \"attach\" element, it performs these\
    \ steps:\n   1. If the transaction-identifier refers to a previous, non-terminated\n\
    \      operation on this BEEP channel, an \"error\" element having code 555\n\
    \      is returned.\n   2. If the relay is in a different administrative domain\
    \ than this\n      endpoint, an \"error\" element having code 553 is returned.\n\
    \   3. If the application is not authorized to attach as this endpoint\n     \
    \ (c.f., Section 4.5.1), an \"error\" element having code 537 is\n      returned.\n\
    \   4. If any options are present, they are processed.\n   5. If another application\
    \ has already attached as this endpoint, an\n      \"error\" element having code\
    \ 554 is returned.\n   6. Otherwise, the application is bound as this endpoint,\
    \ and an \"ok\"\n      element is returned.\n"
- title: 4.4.2 The Bind Operation
  contents:
  - "4.4.2 The Bind Operation\n   When an application wants to identify itself as\
    \ a relay, it sends a\n   \"bind\" element to another relay, e.g.,\n         \
    \ +-------+                  +-------+\n          |       | -- bind -------> |\
    \       |\n          | relay |                  | relay |\n          |   #1  |\
    \ <--------- ok -- |   #2  |\n          +-------+                  +-------+\n\
    \        C: <bind relay='example.com' transID='1' />\n        S: <ok />\n   or\n\
    \          +-------+                  +-------+\n          |       | -- bind ------->\
    \ |       |\n          |       |                  |       |\n          |     \
    \  | <--------- ok -- |       |\n          | relay |                  | relay\
    \ |\n          |   #1  | -- bind -------> |   #2  |\n          |       |     \
    \             |       |\n          |       | <--------- ok -- |       |\n    \
    \      +-------+                  +-------+\n        C: <bind relay='example.com'\
    \ transID='1' />\n        S: <ok />\n        C: <bind relay='rubble.com' transID='2'\
    \ />\n        S: <ok />\n   or\n          +-------+                  +-------+\n\
    \          |       | -- bind -------> |       |\n          | relay |         \
    \         | relay |\n          |   #1  | <------ error -- |   #2  |\n        \
    \  +-------+                  +-------+\n        C: <bind relay='example.com'\
    \ transID='1' />\n        S: <error code='537'>access denied</error>\n   The \"\
    bind\" element has a \"relay\" attribute, a \"transID\" attribute,\n   and contains\
    \ zero or more \"option\" elements:\n   o  the \"relay\" attribute specifies the\
    \ administrative domain on whose\n      behalf the application wants to serve;\n\
    \   o  the \"transID\" attribute specifies the transaction-identifier\n      associated\
    \ with this operation; and,\n   o  the \"option\" elements, if any, specify additional\
    \ processing\n      options (Section 5).\n   When a relay receives an \"bind\"\
    \ element, it performs these steps:\n   1. If the transaction-identifier refers\
    \ to a previous, non-terminated\n      operation on this BEEP channel, an \"error\"\
    \ element having code 555\n      is returned.\n   2. If the application is not\
    \ authorized to bind on behalf of this\n      administrative domain (c.f., Section\
    \ 4.5.2), an \"error\" element\n      having code 537 is returned.\n   3. If any\
    \ options are present, they are processed.\n   4. Otherwise, the application is\
    \ accepted as serving this\n      administrative domain, and an \"ok\" element\
    \ is returned.\n"
- title: 4.4.3 The Terminate Operation
  contents:
  - "4.4.3 The Terminate Operation\n   When an application or relay wants to release\
    \ an attachment or\n   binding, it sends a \"terminate\" element, e.g.,\n    \
    \      +-------+                  +-------+\n          |       | -- terminate\
    \ --> |       |\n          | appl. |                  | relay |\n          | \
    \      | <--------- ok -- |       |\n          +-------+                  +-------+\n\
    \        C: <terminate transID='1' />\n        S: <ok />\n   or\n          +-------+\
    \                  +-------+\n          |       | -- terminate --> |       |\n\
    \          | appl. |                  | relay |\n          |       | <------ error\
    \ -- |       |\n          +-------+                  +-------+\n        C: <terminate\
    \ transID='13' />\n        S: <error code='550'>unknown transaction-identifier</error>\n\
    \   or\n          +-------+                  +-------+\n          |       | <--\
    \ terminate -- |       |\n          | appl. |                  | relay |\n   \
    \       |       | -- ok ---------> |       |\n          +-------+            \
    \      +-------+\n        C: <terminate transID='1' />\n        S: <ok />\n  \
    \ The \"terminate\" element has a \"transID\" attribute, an optional \"code\"\n\
    \   attribute, an optional \"xml:lang\" attribute, and may contain\n   arbitrary\
    \ textual content:\n   o  the \"transID\" attribute specifies the transaction-identifier\n\
    \      associated with this operation;\n   o  the \"code\" attribute, if present,\
    \ is a three-digit reply code\n      meaningful to programs (c.f., Section 10);\n\
    \   o  the \"xml:lang\" attribute, if present, specifies the language that\n \
    \     the element's content is written in; and,\n   o  the textual content is\
    \ a diagnostic (possibly multiline) which is\n      meaningful to implementers,\
    \ perhaps administrators, and possibly\n      even users.\n   When an application\
    \ or relay receives a \"terminate\" element, it\n   performs these steps:\n  \
    \ 1. If the value of the transaction-identifier is zero, then all\n      associations\
    \ established by this application over this BEEP\n      session, either as an\
    \ endpoint attachment or a relay binding, are\n      terminated, and an \"ok\"\
    \ element is returned.\n   2. Otherwise, if the transaction-identifier does not\
    \ refer to a\n      previous unterminated operation on this BEEP channel, an \"\
    error\"\n      element having code 550 is returned.\n   3. Otherwise, the application\
    \ is no longer bound as an endpoint or a\n      relay, and an \"ok\" element is\
    \ returned.\n"
- title: 4.4.4 The Data Operation
  contents:
  - "4.4.4 The Data Operation\n   When an application or relay wants to transmit data\
    \ over the relaying\n   mesh, it sends a \"data\" element, e.g.,\n          +-------+\
    \                  +-------+\n          |       | -- data -------> |       |\n\
    \          | appl. |                  | relay |\n          |   #1  | <---------\
    \ ok -- |       |\n          +-------+                  +-------+\n        C:\
    \ <data content='cid:1@example.com'>\n               <originator identity='fred@example.com'\
    \ />\n               <recipient identity='barney@example.com' />\n           </data>\n\
    \        S: <ok />\n   or\n          +-------+                  +-------+\n  \
    \        |       | -- data -------> |       |\n          | appl. |           \
    \       | relay |\n          |   #1  | <------ error -- |       |\n          +-------+\
    \                  +-------+\n        C: <data content='cid:1@example.com'>\n\
    \               <originator identity='fred@example.com' />\n               <recipient\
    \ identity='barney@example.com' />\n           </data>\n        S: <error code='537'>access\
    \ denied</error>\n   or\n                      +-------+                  +-------+\n\
    \                      |       | -- data -------> |       |\n                \
    \      | relay |                  | appl. |\n                      |       | <---------\
    \ ok -- |   #2  |\n                      +-------+                  +-------+\n\
    \        C: <data content='cid:1@example.com'>\n               <originator identity='fred@example.com'\
    \ />\n               <recipient identity='barney@example.com' />\n           </data>\n\
    \        S: <ok />\n   The \"data\" element has a \"content\" attribute, and contains\
    \ an\n   \"originator\" element, one or more \"recipient\" elements, zero or more\n\
    \   \"option\" elements, and, optionally, a \"data-content\" element:\n   o  the\
    \ \"content\" attribute is a URI-reference that specifies the\n      contents\
    \ of the data (c.f., Section 4.1);\n   o  the \"originator\" element refers to\
    \ the endpoint sending the data;\n   o  each \"recipient\" element refers to an\
    \ endpoint destination for the\n      data;\n   o  the \"option\" elements, if\
    \ any, specify additional processing\n      options (Section 5), termed per-data\
    \ options; and,\n   o  the \"data-content\" element, if present, specifies a nested\
    \ XML\n      entity that is referenced using a URI fragment-identifier as the\n\
    \      value of the \"content\" attribute.\n   The \"originator\" element has\
    \ an \"identity\" attribute, and contains\n   zero or more option elements:\n\
    \   o  the \"identity\" attribute specifies the sending endpoint; and\n   o  the\
    \ \"option\" elements, if any, specify additional processing\n      options for\
    \ the originator, termed per-originator options.\n   Each \"recipient\" element\
    \ has an \"identity\" attribute, and contains\n   zero or more option elements:\n\
    \   o  the \"identity\" attribute specifies the destination endpoint; and\n  \
    \ o  the \"option\" elements, if any, specify additional processing\n      options\
    \ for this recipient, termed per-recipient options.\n"
- title: 4.4.4.1 Relay Processing of Data
  contents:
  - "4.4.4.1 Relay Processing of Data\n   When a relay receives a \"data\" element,\
    \ it performs these steps:\n   1. If the BEEP client is not authorized to originate\
    \ or relay data on\n      behalf of the \"originator\" endpoint (c.f., Section\
    \ 4.5), an\n      \"error\" element having code 537 is returned.\n   2. If any\
    \ per-data options are present, they are processed.\n   3. An \"ok\" element is\
    \ returned.\n   4. If any per-originator options are present, they are processed.\n\
    \   5. For each recipient:\n      1. If any per-recipient options are present,\
    \ they are processed.\n      2. If the recipient endpoint is not in the administrative\
    \ domain\n         associated with the relay, then an APEX session is established\n\
    \         to a relay that accepts data for the recipient's administrative\n  \
    \       domain, and a new \"data\" element, containing that \"recipient\"\n  \
    \       element and all applicable options, is sent to that relay.\n         If\
    \ an APEX session is established, the new \"data\" is sent, and\n         the\
    \ recipient's relay returns an \"ok\" element, then the\n         recipient is\
    \ considered to be successfully processed.\n      3. Otherwise, if the recipient\
    \ endpoint is in the same\n         administrative domain as the relay, the APEX\
    \ access service\n         must check that the originator endpoint is allowed\
    \ to\n         communicate with the recipient endpoint (the access entries\n \
    \        [10] whose \"owner\" is the recipient must contain a \"core:data\"\n\
    \         token for the originator), and the recipient endpoint must be\n    \
    \     currently attached.\n         If so, a new \"data\" element, containing\
    \ only that \"recipient\"\n         element, is sent to the corresponding application.\
    \  If the\n         recipient's endpoint returns an \"ok\" element, then the\n\
    \         recipient is considered to be successfully processed.\n   Providing\
    \ that these semantics are preserved, a relay may choose to\n   optimize its behavior\
    \ by grouping multiple recipients in a single\n   \"data\" element that is subsequently\
    \ transmitted.\n   Finally, note that a relay receiving a \"data\" element from\
    \ an\n   application may be configured to add administrative-specific options.\n\
    \   Regardless, all relays are expressly forbidden from modifying the\n   content\
    \ of the \"data\" element at any time.\n"
- title: 4.4.4.2 Application Processing of Data
  contents:
  - "4.4.4.2 Application Processing of Data\n   When an application receives a \"\
    data\" element, it performs these\n   steps:\n   1. If any per-data or per-originator\
    \ options are present, they are\n      not processed (but may be noted).\n   2.\
    \ For each recipient:\n      1. If any per-recipient options are present, they\
    \ are not\n         processed (but may be noted).\n      2. If the application\
    \ is not attached as the recipient endpoint,\n         then an error in processing\
    \ has occurred.\n      3. Otherwise, the \"data\" element is further processed\
    \ in an\n         application-specific manner, and the recipient is considered\
    \ to\n         be successfully processed.\n   3. If no recipients could be successfully\
    \ processed, an \"error\"\n      element is returned; otherwise, an \"ok\" element\
    \ is returned.\n"
- title: 4.5 APEX Access Policies
  contents:
  - "4.5 APEX Access Policies\n   Access to APEX is provided by the juxtaposition\
    \ of:\n   o  authenticating as a BEEP peer;\n   o  attaching as an APEX endpoint\
    \ or binding as an APEX relay; and,\n   o  being listed as an actor by the APEX\
    \ access service (c.f., [10]).\n   Each of these activities occurs according to\
    \ the policies of the\n   relevant administrative domain:\n   o  each administrative\
    \ domain is responsible for keeping its own\n      house in order through \"local\
    \ provisioning\"; and,\n   o  each administrative domain decides the level of\
    \ trust to associate\n      with other administrative domains.\n"
- title: 4.5.1 Access Policies in the Endpoint-Relay Mode
  contents:
  - "4.5.1 Access Policies in the Endpoint-Relay Mode\n   o  When an application wants\
    \ to attach to the relaying mesh, local\n      provisioning maps BEEP peer identities\
    \ to allowed APEX endpoints\n      (c.f., Step 3 of Section 4.4.1).\n      Typically,\
    \ the identity function is used, e.g., if an application\n      authenticates\
    \ itself as the BEEP peer named as \"fred@example.com\",\n      it is allowed\
    \ to attach as the APEX endpoint named as\n      \"fred@example.com\".\n     \
    \ However, using the \"subaddress\" convention of Section 2.2, an\n      application\
    \ authorized to attach as a given APEX endpoint is also\n      authorized to attach\
    \ as any subaddress of that APEX endpoint,\n      e.g., an application authorized\
    \ to attach as the APEX endpoint\n      \"fred@example.com\" is also authorized\
    \ to attach as the APEX\n      endpoint \"fred/appl=wb@example.com\".\n   o  When\
    \ an application wants to send data, local provisioning maps\n      attached endpoints\
    \ to allowed originators (c.f., Step 1 of Section\n      4.4.4.1).\n      Typically,\
    \ the identity function is used, e.g., if an application\n      attaches as the\
    \ APEX endpoint named as \"fred@example.com\", it is\n      allowed to send data\
    \ originating from the same APEX endpoint.\n      However, other policies are\
    \ permissible, for example, the\n      administrative domain may allow the application\
    \ attached as the\n      APEX endpoint named as \"wilma@example.com\" to send\
    \ data\n      originating as either \"wilma@example.com\" or \"fred@example.com\"\
    .\n   o  Finally, when a relay is delivering to an endpoint within its own\n \
    \     administrative domain, it consults the recipient's access entry\n      looking\
    \ for an entry having the originator as an actor (c.f., Step\n      5.3 of Section\
    \ 4.4.4.1).\n"
- title: 4.5.2 Access Policies in the Relay-Relay Mode
  contents:
  - "4.5.2 Access Policies in the Relay-Relay Mode\n   o  When an application wants\
    \ to bind as a relay on behalf of an\n      administrative domain, local provisioning\
    \ may map BEEP peer\n      identities to allowed APEX relays (c.f., Step 3).\n\
    \      If so, then typically the identity function is used.  e.g., if an\n   \
    \   application authenticates itself as the BEEP peer named as\n      \"example.com\"\
    , it is allowed to bind as a relay on behalf of the\n      administrative domain\
    \ \"example.com\".\n   o  When a relay is sending data, no access policies, per\
    \ se, are\n      applied.\n   o  When a relay is receiving data, local provisioning\
    \ maps BEEP peer\n      identities to allowed originators (c.f., Step 1 of Section\n\
    \      4.4.4.1).\n      Typically, the identity function is used, e.g., if a relay\n\
    \      authenticates itself as being from the same administrative domain\n   \
    \   as the originator of the data, then the data is accepted.\n      In addition,\
    \ some relays may also be configured as \"trusted\"\n      intermediaries, so\
    \ that if a BEEP peer authenticates itself as\n      being from such a relay,\
    \ then the data is accepted.\n"
- title: 5. APEX Options
  contents:
  - "5. APEX Options\n   APEX, at its core, provides a best-effort datagram service.\
    \  Options\n   are used to alter the semantics of the core service.\n   The semantics\
    \ of the APEX \"option\" element are context-specific.\n   Accordingly, the specification\
    \ of an APEX option must define:\n   o  the identity of the option;\n   o  the\
    \ context in which the option may appear;\n   o  what content, if any, is contained\
    \ within the option; and,\n   o  the processing rules for the option.\n   An option\
    \ registration template (Section 7.1) organizes this\n   information.\n   An \"\
    option\" element is contained within either a \"data\",\n   \"originator\", \"\
    recipient\", or an \"attach\" element, all of which are\n   termed the \"containing\"\
    \ element.  The \"option\" element has several\n   attributes and contains arbitrary\
    \ content:\n   o  the \"internal\" and the \"external\" attributes, exactly one\
    \ of which\n      is present, uniquely identify the option;\n   o  the \"targetHop\"\
    \ attribute specifies which relays should process\n      the option;\n   o  the\
    \ \"mustUnderstand\" attribute specifies whether the option, if\n      unrecognized,\
    \ must cause an error in processing to occur;\n   o  the \"transID\" attribute\
    \ specifies a transaction-identifier for the\n      option; and,\n   o  the \"\
    localize\" attribute, if present, specifies one or more\n      language tokens,\
    \ each identifying a desirable language tag to be\n      used if textual diagnostics\
    \ are returned to the originator.\n   Note that if the containing element is an\
    \ \"attach\", then the values\n   of the \"targetHop\" and \"transID\" attributes\
    \ are ignored.\n   The value of the \"internal\" attribute is the IANA-registered\
    \ name for\n   the option.  If the \"internal\" attribute is not present, then\
    \ the\n   value of the \"external\" attribute is a URI or URI with a fragment-\n\
    \   identifier.  Note that a relative-URI value is not allowed.\n   The \"targetHop\"\
    \ attribute specifies which relay(s) should process the\n   option:\n      this:\
    \ the option applies to this relay, and must be removed prior\n      to transmitting\
    \ the containing element.\n      final: the option applies to this relay, only\
    \ if the relay will\n      transmit the containing element directly to the recipient.\n\
    \      all: the option applies to this relay and is retained for the\n      next.\n\
    \   Note that a final relay does not remove any options as it transmits\n   the\
    \ containing element directly to the recipient.\n   The \"mustUnderstand\" attribute\
    \ specifies whether the relay may ignore\n   the option if it is unrecognized,\
    \ and is consulted only if the\n   \"targetHop\" attribute indicates that the\
    \ option applies to that\n   relay.  If the option applies, and if the value of\
    \ the\n   \"mustUnderstand\" attribute is \"true\", and if the relay does not\n\
    \   \"understand\" the option, then an error in processing has occurred.\n"
- title: 5.1 The statusRequest Option
  contents:
  - "5.1 The statusRequest Option\n   Section 8.4 contains the APEX option registration\
    \ for the\n   \"statusRequest\" option.\n   If this option is present, then each\
    \ applicable relay sends a\n   \"statusResponse\" message to the originator. \
    \ This is done by issuing\n   a data operation whose originator is the report\
    \ service associated\n   with the issuing relay, whose recipient is the endpoint\
    \ address of\n   the \"statusRequest\" originator, and whose content is a\n  \
    \ \"statusResponse\" element.\n   A \"statusRequest\" option MUST NOT be present\
    \ in any data operation\n   containing a \"statusResponse\" element.  In general,\
    \ applications\n   should be careful to avoid potential looping behaviors if an\
    \ option\n   is received in error.\n   Consider these examples:\n       +-------+\
    \                  +-------+\n       |       | -- data -------> |       |\n  \
    \     | appl. |                  | relay |\n       |   #1  | <--------- ok --\
    \ |       |\n       +-------+                  +-------+\n     C: <data content='cid:1@example.com'>\n\
    \            <originator identity='fred@example.com' />\n            <recipient\
    \ identity='barney@example.com' />\n            <option internal='statusRequest'\
    \ targetHop='final'\n                    mustUnderstand='true' transID='86' />\n\
    \        </data>\n     S: <ok />\n                                  +-------+\
    \                  +-------+\n                                  |       | -- data\
    \ -------> |       |\n                                  | relay |            \
    \      | appl. |\n                                  |       | <--------- ok --\
    \ |   #2  |\n                                  +-------+                  +-------+\n\
    \     C: <data content='cid:1@example.com'>\n            <originator identity='fred@example.com'\
    \ />\n            <recipient identity='barney@example.com' />\n            <option\
    \ internal='statusRequest' targetHop='final'\n                    mustUnderstand='true'\
    \ transID='86' />\n        </data>\n     S: <ok />\n       +-------+         \
    \         +-------+\n       |       | <------- data -- |       |\n       | appl.\
    \ |                  | relay |\n       |   #1  | -- ok ---------> |       |\n\
    \       +-------+                  +-------+\n     C: <data content='#Content'>\n\
    \            <originator identity='apex=report@example.com' />\n            <recipient\
    \ identity='fred@example.com' />\n            <data-content Name='Content'>\n\
    \                <statusResponse transID='86'>\n                    <destination\
    \ identity='barney@example.com'>\n                        <reply code='250' />\n\
    \                    </destination>\n                </statusResponse>\n     \
    \       </data-content>\n        </data>\n     S: <ok />\n   or\n       +-------+\
    \                  +-------+\n       |       | -- data -------> |       |\n  \
    \     | appl. |                  | relay |\n       |   #1  | <--------- ok --\
    \ |       |\n       +-------+                  +-------+\n     C: <data content='cid:1@example.com'>\n\
    \            <originator identity='fred@example.com' />\n            <recipient\
    \ identity='barney@example.com' />\n            <option internal='statusRequest'\
    \ targetHop='final'\n                    mustUnderstand='true' transID='86' />\n\
    \        </data>\n     S: <ok />\n       +-------+                  +-------+\n\
    \       |       | <------- data -- |       |\n       | appl. |               \
    \   | relay |\n       |   #1  | -- ok ---------> |       |\n       +-------+ \
    \                 +-------+\n     C: <data content='#Content'>\n            <originator\
    \ identity='apex=report@example.com' />\n            <recipient identity='fred@example.com'\
    \ />\n            <data-content Name='Content'>\n                <statusResponse\
    \ transID='86'>\n                    <destination identity='barney@example.com'>\n\
    \                        <reply code='550'>unknown endpoint\n                \
    \                          identity</reply>\n                    </destination>\n\
    \                </statusResponse>\n            </data-content>\n        </data>\n\
    \     S: <ok />\n   or\n       +-------+                  +-------+\n       |\
    \       | -- data -------> |       |\n       | appl. |                  | relay\
    \ |\n       |   #1  | <--------- ok -- |   #1  |\n       +-------+           \
    \       +-------+\n     C: <data content='cid:1@example.com'>\n            <originator\
    \ identity='fred@example.com' />\n            <recipient identity='barney@rubble.com'\
    \ />\n            <option internal='statusRequest' targetHop='final'\n       \
    \             mustUnderstand='true' transID='86' />\n        </data>\n     S:\
    \ <ok />\n                                  +-------+                  +-------+\n\
    \                                  |       | -- data -------> |       |\n    \
    \                              | relay |                  | relay |\n        \
    \                          |   #1  | <--------- ok -- |   #2  |\n            \
    \                      +-------+                  +-------+\n     C: <data content='cid:1@example.com'>\n\
    \            <originator identity='fred@example.com' />\n            <recipient\
    \ identity='barney@rubble.com' />\n            <option internal='statusRequest'\
    \ targetHop='final'\n                    mustUnderstand='true' transID='86' />\n\
    \        </data>\n     S: <ok />\n                                  +-------+\
    \                  +-------+\n                                  |       | -- data\
    \ -------> |       |\n                                  | relay |            \
    \      | appl. |\n                                  |   #2  | <--------- ok --\
    \ |   #2  |\n                                  +-------+                  +-------+\n\
    \     C: <data content='cid:1@example.com'>\n            <originator identity='fred@example.com'\
    \ />\n            <recipient identity='barney@example.com' />\n            <option\
    \ internal='statusRequest' targetHop='final'\n                    mustUnderstand='true'\
    \ transID='86' />\n        </data>\n     S: <ok />\n                         \
    \         +-------+                  +-------+\n                             \
    \     |       | <------- data -- |       |\n                                 \
    \ | relay |                  | relay |\n                                  |  \
    \ #1  | -- ok ---------> |   #2  |\n                                  +-------+\
    \                  +-------+\n     C: <data content='#Content'>\n            <originator\
    \ identity='apex=report@rubble.com' />\n             <recipient identity='fred@example.com'\
    \ />\n             <data-content Name='Content'>\n                 <statusResponse\
    \ transID='86'>\n                     <destination identity='barney@rubble.com'>\n\
    \                         <reply code='250' />\n                     </destination>\n\
    \                 </statusResponse>\n             </data-content>\n         </data>\n\
    \     S: <ok />\n       +-------+                  +-------+\n       |       |\
    \ <------- data -- |       |\n       | appl. |                  | relay |\n  \
    \     |   #1  | -- ok ---------> |   #1  |\n       +-------+                 \
    \ +-------+\n     C: <data content='#Content'>\n            <originator identity='apex=report@rubble.com'\
    \ />\n            <recipient identity='fred@example.com' />\n            <data-content\
    \ Name='Content'>\n                <statusResponse transID='86'>\n           \
    \         <destination identity='barney@rubble.com'>\n                       \
    \ <reply code='250' />\n                    </destination>\n                </statusResponse>\n\
    \            </data-content>\n        </data>\n     S: <ok />\n   Note that a\
    \ trace of a data's passage through the relaying mesh can\n   be achieved by setting\
    \ the \"targetHop\" attribute to \"all\".\n"
- title: 6. APEX Services
  contents:
  - "6. APEX Services\n   APEX, at its core, provides a best-effort datagram service.\
    \  Within\n   an administrative domain, all relays must be able to handle messages\n\
    \   for any endpoint within that administrative domain.  APEX services\n   are\
    \ logically defined as endpoints but, given their ubiquitous\n   semantics, they\
    \ do not necessarily need to be associated with a\n   single physical endpoint.\
    \  As such, they may be provisioned co-\n   resident with each relay within an\
    \ administrative domain, even though\n   they are logically provided on top of\
    \ the relaying mesh, i.e.,\n      +----------+     +----------+    +----------+\
    \    +---------+\n      |   APEX   |     |   APEX   |    |   APEX   |    |   \
    \      |\n      |  access  |     | presence |    |  report  |    |   ...   |\n\
    \      | service  |     |  service |    | service  |    |         |\n      +----------+\
    \     +----------+    +----------+    +---------+\n           |              \
    \  |               |               |\n           |                |          \
    \     |               |\n   +----------------------------------------------------------------+\n\
    \   |                                                                |\n   | \
    \                           APEX core                           |\n   |      \
    \                                                          |\n   +----------------------------------------------------------------+\n\
    \   That is, applications communicate with an APEX service by exchanging\n   data\
    \ with a \"well-known endpoint\" (WKE).\n   For example, APEX applications communicate\
    \ with the report service by\n   exchanging data with the well-known endpoint\
    \ \"apex=report\" in the\n   corresponding administrative domain, e.g., \"apex=report@example.com\"\
    \n   is the endpoint associated with the report service in the\n   \"example.com\"\
    \ administrative domain.\n   The specification of an APEX service must define:\n\
    \   o  the WKE of the service;\n   o  the syntax and sequence of messages exchanged\
    \ with the service;\n   o  what access control tokens are consulted by the service.\n\
    \   A service registration template (Section 7.2) organizes this\n   information.\n\
    \   Finally, note that within a single administrative domain, the\n   relaying\
    \ mesh makes use of the APEX access service in order to\n   determine if an originator\
    \ is allowed to transmit data to a recipient\n   (c.f., Step 5.3 of Section 4.4.4.1).\n"
- title: 6.1 Use of the APEX Core DTD
  contents:
  - "6.1 Use of the APEX Core DTD\n   The specification of an APEX service may use\
    \ definitions found in the\n   APEX core DTD (Section 9.1).  For example, the\
    \ reply operation\n   (Section 6.1.2) is defined to provide a common format for\
    \ responses.\n"
- title: 6.1.1 Transaction-Identifiers
  contents:
  - "6.1.1 Transaction-Identifiers\n   In using APEX's transaction-identifiers, note\
    \ the following:\n   o  In the endpoint-relay and relay-relay modes, transaction-\n\
    \      identifiers are meaningful only during the lifetime of a BEEP\n      channel.\n\
    \      For example, when an application issues the attach operation, the\n   \
    \   associated transaction-identifier has meaning only within the\n      context\
    \ of the BEEP channel used for the attach operation.  When\n      the BEEP connection\
    \ is released, the channel no longer exists and\n      the application is no longer\
    \ attached to the relaying mesh.\n   o  In contrast, when an application communicates\
    \ with an APEX\n      service, transaction-identifiers are often embedded in the\
    \ data\n      that is sent.  This means that transaction-identifiers are\n   \
    \   potentially long-lived.\n      For example, an application may attach as an\
    \ endpoint, send data\n      (containing an embedded transaction-identifier) to\
    \ a service, and,\n      some time later, detach from the relaying mesh.  Later\
    \ on, a\n      second application may attach as the same endpoint, and send data\n\
    \      of its own (also containing embedded transaction-identifiers).\n      Subsequently,\
    \ the second application may receive data from the\n      service responding to\
    \ the first application's request and\n      containing the transaction-identifier\
    \ used by the first\n      application.\n   To minimize the likelihood of ambiguities\
    \ with long-lived\n   transaction-identifiers, the values of transaction-identifiers\n\
    \   generated by applications should appear to be unpredictable.\n"
- title: 6.1.2 The Reply Element
  contents:
  - "6.1.2 The Reply Element\n   Many APEX services make use of a reply operation.\
    \  Although each\n   service defines the circumstances in which a \"reply\" element\
    \ is sent,\n   the syntax of the \"reply\" element is defined in Section 9.1.\n\
    \   The \"reply\" element has a \"code\" attribute, a \"transID\" attribute, an\n\
    \   optional \"xml:lang\" attribute, and may contain arbitrary textual\n   content:\n\
    \   o  the \"code\" element specifies a three-digit reply code (c.f.,\n      Section\
    \ 10);\n   o  the \"transID\" attribute specifies the transaction-identifier\n\
    \      corresponding to this reply;\n   o  the \"xml:lang\" attribute, if present,\
    \ specifies the language that\n      the element's content is written in; and,\n\
    \   o  the textual content is a diagnostic (possibly multiline) which is\n   \
    \   meaningful to implementers, perhaps administrators, and possibly\n      even\
    \ users.\n"
- title: 6.2 The Report Service
  contents:
  - "6.2 The Report Service\n   Section 8.5 contains the APEX service registration\
    \ for the report\n   service:\n   o  Within an administrative domain, the service\
    \ is addressed using\n      the well-known endpoint of \"apex=report\".\n   o\
    \  Section 9.2 defines the syntax of the operations exchanged with\n      the\
    \ service.\n   o  A consumer of the service does not initiate communications with\n\
    \      the service.\n   o  The service initiates communications by sending data\
    \ containing\n      the \"statusResponse\" operation.\n   If a relay processes\
    \ a \"statusRequest\" option (Section 5.1), then it\n   sends data to the originator\
    \ containing a \"statusResponse\" element\n   (Section 9.2).\n   The \"statusResponse\"\
    \ element has a \"transID\" attribute and contains\n   one or more \"destination\"\
    \ elements:\n   o  the \"transID\" attribute specifies the value contained in\
    \ the\n      \"statusRequest\" option; and,\n   o  each \"destination\" element\
    \ has an \"identity\" attribute and\n      contains a \"reply\" element:\n   \
    \   *  the \"identity\" attribute specifies the recipient endpoint that\n    \
    \     is being reported on; and,\n      *  the \"reply\" element (Section 6.1.2)\
    \ specifies the delivery\n         status of that recipient.\n"
- title: 7. Registration Templates
  contents:
  - '7. Registration Templates

    '
- title: 7.1 APEX Option Registration Template
  contents:
  - "7.1 APEX Option Registration Template\n   When an APEX option is registered,\
    \ the following information is\n   supplied:\n   Option Identification: specify\
    \ the NMTOKEN or the URI that\n      authoritatively identifies this option.\n\
    \   Present in: specify the APEX elements in which the option may appear.\n  \
    \ Contains: specify the XML content that is contained within the\n      \"option\"\
    \ element.\n   Processing Rules: specify the processing rules associated with\
    \ the\n      option.\n   Contact Information: specify the postal and electronic\
    \ contact\n      information for the author of the profile.\n"
- title: 7.2 APEX Service Registration Template
  contents:
  - "7.2 APEX Service Registration Template\n   When an APEX service is registered,\
    \ the following information is\n   supplied:\n   Well-Known Endpoint: specify\
    \ the local-part of an endpoint identity,\n      starting with \"apex=\".\n  \
    \ Syntax of Messages Exchanged: specify the elements exchanged with the\n    \
    \  service.\n   Sequence of Messages Exchanged: specify the order in which data\
    \ is\n      exchanged with the service.\n   Access Control Tokens: specify the\
    \ token(s) used to control access to\n      the service (c.f., [10]).\n   Contact\
    \ Information: specify the postal and electronic contact\n      information for\
    \ the author of the profile.\n   Note that the endpoints \"apex=all\" and \"apex=core\"\
    \ may not be\n   assigned.\n"
- title: 7.3 APEX Endpoint Application Registration Template
  contents:
  - "7.3 APEX Endpoint Application Registration Template\n   When an APEX endpoint\
    \ application is registered, the following\n   information is supplied:\n   Endpoint\
    \ Application: specify the subaddress used for an endpoint\n      application,\
    \ starting with \"appl=\".\n   Application Definition: specify the syntax and\
    \ semantics of the\n      endpoint application identified by this registration.\n\
    \   Contact Information: specify the postal and electronic contact\n      information\
    \ for the author of the profile.\n"
- title: 8. Initial Registrations
  contents:
  - '8. Initial Registrations

    '
- title: '8.1 Registration: The APEX Profile'
  contents:
  - "8.1 Registration: The APEX Profile\n   Profile Identification: http://iana.org/beep/APEX\n\
    \   Messages exchanged during Channel Creation: \"attach\", \"bind\"\n   Messages\
    \ starting one-to-one exchanges: \"attach\", \"bind\",\n      \"terminate\", or\
    \ \"data\"\n   Messages in positive replies: \"ok\"\n   Messages in negative replies:\
    \ \"error\"\n   Messages in one-to-many exchanges: none\n   Message Syntax: c.f.,\
    \ Section 9.1\n   Message Semantics: c.f., Section 4.4\n   Contact Information:\
    \ c.f., the \"Authors' Addresses\" section of this\n      memo\n"
- title: '8.2 Registration: The System (Well-Known) TCP port number for apex-mesh'
  contents:
  - "8.2 Registration: The System (Well-Known) TCP port number for apex-mesh\n   Protocol\
    \ Number: TCP\n   Message Formats, Types, Opcodes, and Sequences: c.f., Section\
    \ 9.1\n   Functions: c.f., Section 4.4\n   Use of Broadcast/Multicast: none\n\
    \   Proposed Name: APEX relay-relay service\n   Short name: apex-mesh\n   Contact\
    \ Information: c.f., the \"Authors' Addresses\" section of this\n      memo\n"
- title: '8.3 Registration: The System (Well-Known) TCP port number for apex-edge'
  contents:
  - "8.3 Registration: The System (Well-Known) TCP port number for apex-edge\n   Protocol\
    \ Number: TCP\n   Message Formats, Types, Opcodes, and Sequences: c.f., Section\
    \ 9.1\n   Functions: c.f., Section 4.4\n   Use of Broadcast/Multicast: none\n\
    \   Proposed Name: APEX endpoint-relay service\n   Short name: apex-edge\n   Contact\
    \ Information: c.f., the \"Authors' Addresses\" section of this\n      memo\n"
- title: '8.4 Registration: The statusRequest Option'
  contents:
  - "8.4 Registration: The statusRequest Option\n   Option Identification: statusRequest\n\
    \   Present in: APEX's \"data\" and \"recipient\" elements\n   Contains: nothing\n\
    \   Processing Rules: c.f., Section 5.1\n   Contact Information: c.f., the \"\
    Authors' Addresses\" section of this\n      memo\n"
- title: '8.5 Registration: The Report Service'
  contents:
  - "8.5 Registration: The Report Service\n   Well-Known Endpoint: apex=report\n \
    \  Syntax of Messages Exchanged: c.f., Section 9.2\n   Sequence of Messages Exchanged:\
    \ c.f., Section 6.2\n   Access Control Tokens: none\n   Contact Information: c.f.,\
    \ the \"Authors' Addresses\" section of this\n      memo\n"
- title: 9. DTDs
  contents:
  - '9. DTDs

    '
- title: 9.1 The APEX Core DTD
  contents:
  - "9.1 The APEX Core DTD\n   <!--\n     DTD for the APEX core, as of 2001-07-09\n\
    \     Refer to this DTD as:\n       <!ENTITY % APEXCORE PUBLIC \"-//IETF//DTD\
    \ APEX CORE//EN\" \"\">\n       %APEXCORE;\n     -->\n   <!ENTITY % BEEP PUBLIC\
    \ \"-//IETF//DTD BEEP//EN\" \"\">\n   %BEEP;\n   <!--\n     DTD data types:\n\
    \          entity        syntax/reference     example\n          ======      \
    \  ================     =======\n       APEX endpoint\n          ENDPOINT    \
    \  entity,              fred@example.com\n                        c.f., Section\
    \ 2.2\n       domain, either a FQDN or a literal\n           DOMAIN       c.f.,\
    \ [RFC-2821]     example.com or [10.0.0.1]\n       seconds\n           SECONDS\
    \      0..2147483647        600\n       timestamp\n           TIMESTAMP    c.f.,\
    \ [12]           2000-05-15T13:02:00-08:00\n       unique-identifier\n       \
    \    UNIQID       1..2147483647        42\n       unique-identifier OR zero\n\
    \           UNIZID       0..2147483647        0\n     -->\n   <!ENTITY  % ENDPOINT\
    \  \"CDATA\">\n   <!ENTITY  % DOMAIN    \"CDATA\">\n   <!ENTITY  % SECONDS   \"\
    CDATA\">\n   <!ENTITY  % TIMESTAMP \"CDATA\">\n   <!ENTITY  % UNIQID    \"CDATA\"\
    >\n   <!ENTITY  % UNIZID    \"CDATA\">\n   <!--\n     APEX messages, exchanged\
    \ as application/beep+xml\n        role       MSG         RPY         ERR\n  \
    \     ======      ===         ===         ===\n         I         attach     \
    \ ok          error\n       I or L      bind        ok          error\n      \
    \ I or L      terminate   ok          error\n       I or L      data        ok\
    \          error\n     -->\n   <!ELEMENT attach      (option*)>\n   <!ATTLIST\
    \ attach\n             endpoint    %ENDPOINT;        #REQUIRED\n             transID\
    \     %UNIQID;          #REQUIRED>\n   <!ELEMENT bind        (option*)>\n   <!ATTLIST\
    \ bind\n             relay       %DOMAIN;          #REQUIRED\n             transID\
    \     %UNIQID;          #REQUIRED>\n   <!ELEMENT terminate   (#PCDATA)>\n   <!ATTLIST\
    \ terminate\n             code        %XYZ;             \"250\"\n            \
    \ xml:lang    %LANG;            #IMPLIED\n             transID     %UNIZID;  \
    \        \"0\">\n   <!ELEMENT data        (originator,recipient+,option*,data-content?)>\n\
    \   <!ATTLIST data\n             content     %URI;             #REQUIRED>\n  \
    \ <!ELEMENT originator  (option*)>\n   <!ATTLIST originator\n             identity\
    \    %ENDPOINT;        #REQUIRED>\n   <!ELEMENT recipient   (option*)>\n   <!ATTLIST\
    \ recipient\n             identity    %ENDPOINT;        #REQUIRED>\n   <!ELEMENT\
    \ data-content\n                         ANY>\n   <!ATTLIST Name        ID   \
    \             #REQUIRED>\n   <!ELEMENT ok          EMPTY>\n   <!ELEMENT reply\
    \       (#PCDATA)>\n   <!ATTLIST reply\n             code        %XYZ;       \
    \      #REQUIRED\n             transID     %UNIQID;          #REQUIRED\n     \
    \        xml:lang    %LANG;            #IMPLIED>\n   <!-- either the \"internal\"\
    \ or the \"external\" attribute is present in\n        an option -->\n   <!ELEMENT\
    \ option      ANY>\n   <!ATTLIST option\n             internal    NMTOKEN    \
    \       \"\"\n             external    %URI;             \"\"\n             targetHop\
    \   (this|final|all)  \"final\"\n             mustUnderstand\n               \
    \          (true|false)      \"false\"\n             transID     %UNIQID;    \
    \      #REQUIRED\n             localize    %LOCS;            \"i-default\">\n"
- title: 9.2 The Report Service DTD
  contents:
  - "9.2 The Report Service DTD\n   <!--\n     DTD for the APEX report service, as\
    \ of 2000-12-12\n     Refer to this DTD as:\n       <!ENTITY % APEXREPORT PUBLIC\
    \ \"-//Blocks//DTD APEX REPORT//EN\" \"\">\n       %APEXREPORT;\n     -->\n  \
    \ <!ENTITY % APEXCORE PUBLIC \"-//Blocks//DTD APEX CORE//EN\" \"\">\n   %APEXCORE;\n\
    \   <!--\n     Synopsis of the APEX report service\n       service WKE: apex=report\n\
    \       message exchanges:\n           service initiates    consumer replies\n\
    \           =================    ================\n           statusResponse \
    \      (nothing)\n       access control tokens: none\n     -->\n   <!ELEMENT statusResponse\n\
    \                         (destination+)>\n   <!ATTLIST statusResponse\n     \
    \        transID     %UNIQID;          #REQUIRED>\n   <!ELEMENT destination (reply)>\n\
    \   <!ATTLIST destination\n             identity    %ENDPOINT;        #REQUIRED>\n"
- title: 10. Reply Codes
  contents:
  - "10. Reply Codes\n      code    meaning\n      ====    =======\n      250    \
    \ transaction successful\n      421     service not available\n      450     requested\
    \ action not taken\n      451     requested action aborted\n      454     temporary\
    \ authentication failure\n      500     general syntax error (e.g., poorly-formed\
    \ XML)\n      501     syntax error in parameters (e.g., non-valid XML)\n     \
    \ 504     parameter not implemented\n      530     authentication required\n \
    \     534     authentication mechanism insufficient\n      535     authentication\
    \ failure\n      537     action not authorized for user\n      538     authentication\
    \ mechanism requires encryption\n      550     requested action not taken\n  \
    \    553     parameter invalid\n      554     transaction failed (e.g., policy\
    \ violation)\n      555     transaction already in progress\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   Consult Section 3 and Section 4.5 for a discussion\
    \ of security\n   issues, e.g., relaying integrity.\n   Although service provisioning\
    \ is a policy matter, at a minimum, all\n   APEX implementations must provide\
    \ the following tuning profiles:\n   for authentication: http://iana.org/beep/SASL/DIGEST-MD5\n\
    \   for confidentiality: http://iana.org/beep/TLS (using the\n      TLS_RSA_WITH_3DES_EDE_CBC_SHA\
    \ cipher)\n   for both: http://iana.org/beep/TLS (using the\n      TLS_RSA_WITH_3DES_EDE_CBC_SHA\
    \ cipher supporting client-side\n      certificates)\n   Further, APEX endpoint\
    \ implementations may choose to offer MIME-based\n   security services providing\
    \ message integrity and confidentiality,\n   such as OpenPGP [13] or S/MIME [14].\n\
    \   Regardless, since APEX is a profile of the BEEP, consult [1]'s\n   Section\
    \ 9 for a discussion of BEEP-specific security issues.\n   Finally, the statusRequest\
    \ option (Section 5.1) may be used to expose\n   private network topology.  Accordingly,\
    \ an administrator may wish to\n   choose to disable this option except at the\
    \ ingress/egress points for\n   its administrative domain.\n"
- title: References
  contents:
  - "References\n   [1]   Rose, M., \"The Blocks Extensible Exchange Protocol Core\"\
    , RFC\n         3080, March 2001.\n   [2]   Crocker, D. and P. Overell, \"Augmented\
    \ BNF for Syntax\n         Specifications: ABNF\", RFC 2234, November 1997.\n\
    \   [3]   Klensin, J., \"Simple Mail Transfer Protocol\", RFC 2821, April\n  \
    \       2001.\n   [4]   Yergeau, F., \"UTF-8, a transformation format of Unicode\
    \ and ISO\n         10646\", RFC 2044, October 1996.\n   [5]   Gulbrandsen, A.,\
    \ Vixie, P. and L. Esibov, \"A DNS RR for\n         specifying the location of\
    \ services (DNS SRV)\", RFC 2782,\n         February 2000.\n   [6]   Berners-Lee,\
    \ T., Fielding, R. and L. Masinter, \"Uniform\n         Resource Identifiers (URI):\
    \ Generic Syntax\", RFC 2396, August\n         1998.\n   [7]   Levinson, E., \"\
    The MIME Multipart/Related Content-type\", RFC\n         2387, August 1998.\n\
    \   [8]   Levinson, E., \"Content-ID and Message-ID Uniform Resource\n       \
    \  Locators\", RFC 2392, August 1998.\n   [9]   Freed, N. and N. Borenstein, \"\
    Multipurpose Internet Mail\n         Extensions (MIME) Part One: Format of Internet\
    \ Message Bodies\",\n         RFC 2045, November 1996.\n   [10]  Rose, M., Klyne,\
    \ G. and D. Crocker, \"The Application Exchange\n         (APEX) Access Service\"\
    , RFC 3341, July 2002.\n   [11]  Rose, M., Klyne, G. and D. Crocker, \"The Application\
    \ Exchange\n         (APEX) Presence Service\", Work in Progress.\n   [12]  Newman,\
    \ C. and G. Klyne, \"Date and Time on the Internet:\n         Timestamps\", RFC\
    \ 3339, July 2002.\n   [13]  Elkins, M., Del Torto, D., Levien, R. and T. Roessler,\
    \ \"MIME\n         Security with OpenPGP\", RFC 3156, August 2001.\n   [14]  Ramsdell,\
    \ B., \"S/MIME Version 3 Message Specification\", RFC\n         2633, June 1999.\n"
- title: Appendix A. Acknowledgements
  contents:
  - "Appendix A. Acknowledgements\n   The authors gratefully acknowledge the contributions\
    \ of: Jeffrey\n   Altman, Harald Alvestrand, Eric Dixon, Ronan Klyne, Darren New,\
    \ Chris\n   Newman, Scott Pead, and Bob Wyman.\n"
- title: Appendix B. IANA Considerations
  contents:
  - "Appendix B. IANA Considerations\n   The IANA has registered \"APEX\" as a standards-track\
    \ BEEP profile, as\n   specified in Section 8.1.\n   The IANA has registered \"\
    apex-mesh\" as a TCP port number, as\n   specified in Section 8.2.\n   The IANA\
    \ has registered \"apex-edge\" as a TCP port number, as\n   specified in Section\
    \ 8.3.\n   The IANA maintains a list of:\n   o  APEX options, c.f., Section 7.1;\n\
    \   o  APEX services, c.f., Section 7.2; and,\n   o  APEX endpoint applications,\
    \ c.f., Section 7.3.\n   For each list, the IESG is responsible for assigning\
    \ a designated\n   expert to review the specification prior to the IANA making\
    \ the\n   assignment.  As a courtesy to developers of non-standards track APEX\n\
    \   options and services, the mailing list apexwg@invisible.net may be\n   used\
    \ to solicit commentary.\n   The IANA makes the registrations specified in Section\
    \ 8.4 and Section\n   8.5.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Marshall T. Rose\n   Dover Beach Consulting, Inc.\n  \
    \ POB 255268\n   Sacramento, CA  95865-5268\n   US\n   Phone: +1 916 483 8878\n\
    \   EMail: mrose@dbc.mtview.ca.us\n   Graham Klyne\n   Clearswift Corporation\n\
    \   1310 Waterside\n   Arlington Business Park\n   Theale, Reading  RG7 4SA\n\
    \   UK\n   Phone: +44 11 8903 8903\n   EMail: Graham.Klyne@MIMEsweeper.com\n \
    \  David H. Crocker\n   Brandenburg InternetWorking\n   675 Spruce Drive\n   Sunnyvale,\
    \ CA  94086\n   US\n   Phone: +1 408 246 8253\n   EMail: dcrocker@brandenburg.com\n\
    \   URI:   http://www.brandenburg.com/\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2002).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
