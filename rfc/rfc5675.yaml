- title: __initial_text__
  contents:
  - "           Mapping Simple Network Management Protocol (SNMP)\n              \
    \      Notifications to SYSLOG Messages\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo defines a mapping from Simple Network Management Protocol\n\
    \   (SNMP) notifications to SYSLOG messages.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n     1.1.  Conventions  . . . . . . . . . . . . . . . . . .\
    \ . . . . .  2\n   2.  Background . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  3\n     2.1.  SNMP Notifications . . . . . . . . . . . . . . . . .\
    \ . . .  3\n     2.2.  SYSLOG Notifications . . . . . . . . . . . . . . . . .\
    \ . .  5\n   3.  Mapping SNMP Notifications to SYSLOG Messages  . . . . . . .\
    \ .  5\n     3.1.  SYSLOG Header  . . . . . . . . . . . . . . . . . . . . . .\
    \  6\n     3.2.  Structured Data  . . . . . . . . . . . . . . . . . . . . .  7\n\
    \     3.3.  MSG Data . . . . . . . . . . . . . . . . . . . . . . . . .  9\n  \
    \ 4.  Relationship to the SYSLOG-MSG-MIB . . . . . . . . . . . . . . 10\n   5.\
    \  Usage Example  . . . . . . . . . . . . . . . . . . . . . . . . 10\n   6.  IANA\
    \ Considerations  . . . . . . . . . . . . . . . . . . . . . 12\n   7.  Security\
    \ Considerations  . . . . . . . . . . . . . . . . . . . 13\n   8.  Acknowledgments\
    \  . . . . . . . . . . . . . . . . . . . . . . . 13\n   9.  References . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . 13\n     9.1.  Normative References\
    \ . . . . . . . . . . . . . . . . . . . 13\n     9.2.  Informative References\
    \ . . . . . . . . . . . . . . . . . . 14\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   SNMP and SYSLOG are two widely used protocols to communicate\
    \ event\n   notifications.  Although co-existence of several management protocols\n\
    \   in one operational environment is possible, certain environments\n   require\
    \ that all event notifications be collected by a single system\n   daemon, such\
    \ as a SYSLOG collector or an SNMP notification receiver,\n   via a single management\
    \ protocol.  In such environments, it is\n   necessary to translate event notifications\
    \ between management\n   protocols.\n   The latest version of SYSLOG, specified\
    \ in [RFC5424], supports a\n   structured data element format.  Structured data\
    \ elements allow us to\n   map between SNMP notifications and SYSLOG messages\
    \ without losing\n   information.  In this memo, we specify a concrete mapping\
    \ from SNMP\n   event notifications [RFC3416] into SYSLOG messages [RFC5424].\
    \  We\n   specify how the SYSLOG message format should be utilized to carry the\n\
    \   information contained in an SNMP notification message.  A new SYSLOG\n   structured\
    \ data element is defined, which carries the PDU portion of\n   an SNMP notification\
    \ message.\n"
- title: 1.1.  Conventions
  contents:
  - "1.1.  Conventions\n   A system that has the capability of receiving SNMP notification\n\
    \   messages from an SNMP notification originator and sending the SNMP\n   data\
    \ contained inside in a SYSLOG message format to a SYSLOG\n   collector is referred\
    \ to in this memo as an \"SNMP-to-SYSLOG\n   translator\".  By definition, such\
    \ a system should have an SNMP\n   notification receiver application and a SYSLOG\
    \ originator running in\n   order to be able to perform the functions of an \"\
    SNMP-to-SYSLOG\n   translator\".\n   The key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  Background
  contents:
  - '2.  Background

    '
- title: 2.1.  SNMP Notifications
  contents:
  - "2.1.  SNMP Notifications\n   A detailed introduction to the SNMP Management Framework\
    \ can be found\n   in [RFC3410].  The SNMP Management Architecture is described\
    \ in\n   [RFC3411].  Managed objects are accessed via a virtual information\n\
    \   store, termed the Management Information Base or MIB [RFC3418].\n   Objects\
    \ in the MIB are defined using the mechanisms defined in the\n   Structure of\
    \ Management Information (SMI) [RFC2578].\n   An SNMP notification message is\
    \ generated and transmitted by an SNMP\n   entity on behalf of a notification\
    \ originator application [RFC3413].\n   SNMP notifications are often used to notify\
    \ a notification receiver\n   application at a logically remote SNMP entity that\
    \ an event has\n   occurred or that a certain condition is present.  There are\
    \ two types\n   of SNMP protocol operations that are associated with SNMP\n  \
    \ notification messages [RFC3416]:\n   o  SNMPv2-Trap-PDU, an unconfirmed notification\
    \ delivery mechanism\n   o  InformRequest-PDU, a confirmed notification delivery\
    \ mechanism\n   The scopedPDU portion of an SNMPv3 trap or inform message has\
    \ the\n   following format [RFC3412]:\n          ScopedPDU ::= SEQUENCE {\n  \
    \            contextEngineID  OCTET STRING,\n              contextName      OCTET\
    \ STRING,\n              data             ANY -- e.g., PDUs as defined in [RFC3416]\n\
    \          }\n   The data member of the SEQUENCE ScopedPDU carries an SNMPv2-Trap-PDU\n\
    \   or an InformRequest-PDU.  They both have the same structure:\n        PDUs\
    \ ::= [7] IMPLICIT SEQUENCE {\n            request-id           INTEGER,\n   \
    \         error-status         INTEGER,    -- ignored in notifications\n     \
    \       error-index          INTEGER,    -- ignored in notifications\n       \
    \     variable-bindings    VarBindList\n        }\n        -- variable binding\n\
    \        VarBind ::= SEQUENCE {\n            name ObjectName,\n            CHOICE\
    \ {\n                value          ObjectSyntax,\n                unSpecified\
    \    NULL,    -- in retrieval requests\n                                     \
    \   -- exceptions in responses\n                noSuchObject   [0] IMPLICIT NULL,\n\
    \                noSuchInstance [1] IMPLICIT NULL,\n                endOfMibView\
    \   [2] IMPLICIT NULL\n            }\n        }\n        -- variable-binding list\n\
    \        VarBindList ::= SEQUENCE (SIZE (0..max-bindings)) OF VarBind\n   The\
    \ first two variable bindings in the variable binding list of an\n   SNMPv2-Trap-PDU\
    \ or InformRequest-PDU are sysUpTime.0 [RFC3418] and\n   snmpTrapOID.0 [RFC3418],\
    \ respectively.  If the OBJECTS clause is\n   present in the invocation of the\
    \ corresponding NOTIFICATION-TYPE\n   macro, then each corresponding variable,\
    \ as instantiated by this\n   notification, is copied, in order, to the variable-bindings\
    \ field.\n   If any additional variables are being included (at the option of\
    \ the\n   generating SNMP entity), then each is copied to the variable-bindings\n\
    \   field.\n   In the case of SNMPv1 or SNMPv2c notifications, the contextEngineID\n\
    \   and the contextName parameters are not present in notification\n   messages.\n\
    \   This document assumes that notifications are in the format defined in\n  \
    \ [RFC3416].  Notifications in the SNMPv1 notification format MUST be\n   translated\
    \ as described in Section 3.1 of [RFC3584].\n"
- title: 2.2.  SYSLOG Notifications
  contents:
  - "2.2.  SYSLOG Notifications\n   The SYSLOG protocol is defined in [RFC5424]. \
    \ The message contains a\n   global header and a number of structured data elements.\
    \  The ABNF\n   [RFC5234] representation of a SYSLOG message is defined in RFC\
    \ 5424\n   [RFC5424].  The relevant productions for structured data elements\n\
    \   are:\n         STRUCTURED-DATA = NILVALUE / 1*SD-ELEMENT\n         SD-ELEMENT\
    \      = \"[\" SD-ID *(SP SD-PARAM) \"]\"\n         SD-PARAM        = PARAM-NAME\
    \ \"=\" %d34 PARAM-VALUE %d34\n         SD-ID           = SD-NAME\n         PARAM-NAME\
    \      = SD-NAME\n         PARAM-VALUE     = UTF-8-STRING ; characters '\"', '\\\
    ' and\n                                        ; ']' MUST be escaped.\n      \
    \   SD-NAME         = 1*32PRINTUSASCII\n                           ; except '=',\
    \ SP, ']', %d34 (\")\n         UTF-8-STRING    = *OCTET ; Any VALID UTF-8 String\n\
    \                           ; \"shortest form\" MUST be used\n         OCTET \
    \          = %d00-255\n         SP              = %d32\n         PRINTUSASCII\
    \    = %d33-126\n         NILVALUE        = \"-\"\n"
- title: 3.  Mapping SNMP Notifications to SYSLOG Messages
  contents:
  - "3.  Mapping SNMP Notifications to SYSLOG Messages\n   In this section, we define\
    \ how the scopedPDU portion from an SNMP\n   notification message is used to generate\
    \ a message in the SYSLOG\n   format.  The notification receiver application at\
    \ the SNMP-to-SYSLOG\n   translator is listening for incoming notifications. \
    \ After a\n   notification is received by the SNMP engine, the data portion is\n\
    \   forwarded to the notification receiver application.  The data portion\n  \
    \ contains the scopedPDU of the message, which is used by the SYSLOG\n   originator\
    \ on the SNMP-to-SYSLOG translator to generate a SYSLOG\n   message and send it\
    \ to a SYSLOG collector (or proxy).  Note that\n   every SNMP notification maps\
    \ to exactly one SYSLOG message.\n   +------------+              +------------------+\n\
    \   |snmp        |     snmp     |                  | syslog  +---------+\n   |notification|\
    \ notification |  +------------+  | message |syslog   |\n   |originator  |------------->|\
    \  |syslog      |  |-------->|collector|\n   +------------+              |  |originator\
    \  |  |         +---------+\n   +------------+              |  +------------+\
    \  |\n   |snmp        |     snmp     |  +------------+  | syslog  +---------+\n\
    \   |notification| notification |  |snmp        |  | message |syslog   |\n   |originator\
    \  |------------->|  |notification|  |-------->|collector|\n   +------------+\
    \              |  |receiver    |  |         +---------+\n   +------------+   \
    \           |  +------------+  |\n   |snmp        |     snmp     |           \
    \       |\n   |notification| notification |  SNMP-to-SYSLOG  |\n   |originator\
    \  |------------->|    translator    |\n   +------------+              +------------------+\n\
    \              Figure 1: SNMP-to-SYSLOG Translator Deployment\n   A common deployment\
    \ scenario is shown in Figure 1.  There can be many\n   SNMP notification originators\
    \ that send SNMP event notifications to\n   an SNMP-to-SYSLOG translator.  The\
    \ SNMP-to-SYSLOG translator extracts\n   the data portion of the notification,\
    \ generates a SYSLOG message, and\n   sends the SYSLOG message to a SYSLOG collector,\
    \ which is responsible\n   for collecting and storing all notification messages.\
    \  The arrows in\n   Figure 1 indicate message flows, not individual messages.\n\
    \   The SNMP-to-SYSLOG translator is not transparent for a SYSLOG\n   collector.\
    \  The global header of the SYSLOG message generated by the\n   SNMP-to-SYSLOG\
    \ translator is filled with parameters that are specific\n   for the system running\
    \ the SNMP-to-SYSLOG translator, such as its\n   hostname, timestamp, etc.  The\
    \ data portion (scopedPDU for SNMPv3 or\n   PDU for SNMPv1/SNMPv2c) of the SNMP\
    \ notification message is contained\n   in the structured data of the SYSLOG message.\n\
    \   Implementations MUST drop invalid SNMP messages before they are\n   passed\
    \ to the SNMP-to-SYSLOG translator.\n"
- title: 3.1.  SYSLOG Header
  contents:
  - "3.1.  SYSLOG Header\n   The SNMP-to-SYSLOG translator fills the HEADER field\
    \ of a SYSLOG\n   message with parameters specific to the system on which it is\n\
    \   running.  The default facility level for SYSLOG messages containing\n   SNMP\
    \ notifications SHOULD be 3, which corresponds to messages\n   generated by system\
    \ daemons.  The default severity level SHOULD be 5,\n   which corresponds to \"\
    Notice: normal but significant condition\".  If\n   the SNMP-to-SYSLOG translator\
    \ has a notion of the type of\n   notification that has been received, it might\
    \ choose other values for\n   facility and severity level.\n   The VERSION, TIMESTAMP,\
    \ HOSTNAME, APP-NAME, PROCID, and MSGID fields\n   in the SYSLOG message header\
    \ are filled with values that are specific\n   to the system on which the SNMP-to-SYSLOG\
    \ translator is running.  The\n   character set used in the HEADER MUST be seven-bit\
    \ ASCII in an eight-\n   bit field, as described in [RFC5424].\n"
- title: 3.2.  Structured Data
  contents:
  - "3.2.  Structured Data\n   The STRUCTURED-DATA field of a SYSLOG message carries\
    \ the ScopedPDU\n   (or PDU) portion of an SNMP notification message.  For the\
    \ purpose of\n   carrying SNMP notification data, a new SD-ID element is defined.\
    \  The\n   ABNF [RFC5234] representation of the new structured element is:\n \
    \  SNMP-SD-ELEMENT = \"[\" SNMP-SD-ID [CTX] *VARBIND \"]\"\n   SNMP-SD-ID    \
    \  = %x73.6E.6D.70         ; snmp\n   CTX             = CTXENGINE CTXNAME\n  \
    \ CTXENGINE       = SP \"ctxEngine=\" %d34 HEXSTRING %d34\n   CTXNAME        \
    \ = SP \"ctxName=\" %d34 PARAM-VALUE %d34\n   VARBIND         = SP VARNAME [SP\
    \ VARLABEL] SP VARVALUE [SP VALSTRING]\n   VARNAME         = %d118 NUM \"=\" %d34\
    \ OID %d34         ; \"vN=\"\n   VARLABEL        = %d108 NUM \"=\" %d34 PARAM-VALUE\
    \ %d34 ; \"lN=\"\n   VARVALUE        = VALOID / VALHEXSTRING / VALCOUNTER32 /\
    \ VALCOUNTER64\n                     / VALUNSIGNED32 / VALINTEGER32 / VALIP /\
    \ VALNULL\n                     / VALOPAQUE / VALTIMETICKS / VALSTRING\n   VALOID\
    \          = %d111 NUM \"=\" %d34 OID %d34         ; \"oN=\"\n   VALHEXSTRING\
    \    = %d120 NUM \"=\" %d34 HEXSTRING %d34   ; \"xN=\"\n   VALCOUNTER32    = %d99\
    \  NUM \"=\" %d34 UNSIGNED32 %d34  ; \"cN=\"\n   VALCOUNTER64    = %d67  NUM \"\
    =\" %d34 UNSIGNED64 %d34  ; \"CN=\"\n   VALUNSIGNED32   = %d117 NUM \"=\" %d34\
    \ UNSIGNED32 %d34  ; \"uN=\"\n   VALINTEGER32    = %d100 NUM \"=\" %d34 INTEGER32\
    \ %d34   ; \"dN=\"\n   VALIP           = %d105 NUM \"=\" %d34 IPV4ADDRESS %d34\
    \ ; \"iN=\"\n   VALNULL         = %d110 NUM \"=\" %d34 %d34             ; \"nN=\"\
    \n   VALOPAQUE       = %d112 NUM \"=\" %d34 HEXSTRING %d34   ; \"pN=\"\n   VALTIMETICKS\
    \    = %d116 NUM \"=\" %d34 UNSIGNED32 %d34  ; \"tN=\"\n   VALSTRING       = %d97\
    \  NUM \"=\" %d34 PARAM-VALUE %d34 ; \"aN=\"\n   NUM             = NONZERODIGIT\
    \ 0*DIGIT\n   OID             = OIDSTART *(\".\" OIDSUBID)\n   OIDSTART      \
    \  = ((\"0.\" / \"1.\") [%d49-51] DIGIT) / (\"2.\" OIDSUBID)\n   OIDSUBID    \
    \    = ZERO / (NONZERODIGIT *DIGIT)\n   PARAM-VALUE     = UTF-8-STRING ; characters\
    \ '\"', '\\' and\n                                  ; ']' MUST be escaped.\n \
    \  UTF-8-STRING    = *OCTET ; Any VALID UTF-8 String\n                       \
    \     ; \"shortest form\" MUST be used\n   HEXSTRING       = *HEX\n   INTEGER32\
    \       = [\"-\"] NONZERODIGIT 0*DIGIT\n   UNSIGNED32      = NONZERODIGIT 0*DIGIT\n\
    \   UNSIGNED64      = NONZERODIGIT 0*DIGIT\n   IPV4ADDRESS     = d8 \".\" d8 \"\
    .\" d8 \".\" d8\n   d8              = DIGIT               ; 0-9\n            \
    \         / %d49-57 DIGIT       ; 10-99\n                     / \"1\" 2DIGIT \
    \         ; 100-199\n                     / \"2\" %d48-52 DIGIT   ; 200-249\n\
    \                     / \"25\" %d48-53        ; 250-255\n   HEX             =\
    \ DIGIT / %x41-46 / %x61-66       ; 0-9 / A-F / a-f\n   NONZERODIGIT    = %d49-57\n\
    \   ZERO            = %d48\n   DIGIT           = ZERO / NONZERODIGIT\n   SP  \
    \            = %d32\n   Each SNMP-SD-ELEMENT starts with the SD-ID \"snmp\". \
    \ The first two\n   SD-ID parameters are \"ctxEngine\" and \"ctxName\".  The context\
    \ MUST be\n   present in an SNMPv3 notification and therefore \"ctxEngine\" and\n\
    \   \"ctxName\" MUST be present in a SYSLOG message generated by an SNMP-\n  \
    \ to-SYSLOG translator from an SNMPv3 notification.  The\n   contextEngineID is\
    \ encoded as an hexadecimal string while the\n   contextName is encoded as a UTF8\
    \ string.\n   The remaining parameters in the \"snmp\" SD-ID correspond to the\n\
    \   varbind list elements contained in the SNMP PDU.  The name of a\n   varbind\
    \ is encoded as an OID in dotted notation.  The rendered OID is\n   carried in\
    \ a \"vN\" parameter, where N identifies the position of the\n   varbind in the\
    \ varbind list of the SNMP message (the first varbind\n   having the position\
    \ 1).  A MIB-aware implementation may in addition\n   generate a parameter \"\
    lN\" carrying the descriptor of the associated\n   MIB object plus the instance\
    \ identifier suffix (also called an OID\n   label).  The number N again identifies\
    \ the position of the varbind in\n   the varbind list of the SNMP message.\n \
    \  The value of a varbind is encoded depending on its type according to\n   the\
    \ rules shown in Table 1, and type-specific parameter names are\n   used to convey\
    \ the type information.  The number N again identifies\n   the position of the\
    \ varbind in the varbind list of the SNMP message.\n   A MIB-aware implementation\
    \ may in addition generate a parameter \"aN\"\n   carrying an alternate textual\
    \ representation of the value, which is\n   obtained by applying DISPLAY-HINTs\
    \ and translating named numbers into\n   corresponding labels or OBJECT IDENTIFIER\
    \ values to descriptors.  For\n   SNMP object types that have a DISPLAY-HINT of\
    \ the form 'Ma' or 'Mt',\n   where M is some number, a MIB-aware implementation\
    \ can choose to\n   include the \"aN\" parameter and to suppress the corresponding\
    \ \"xN\"\n   parameter.  This special case saves space for textual objects.  A\n\
    \   receiver receiving an \"aN\" parameter without a matching value at\n   position\
    \ N can unambiguously convert the value carried in the \"aN\"\n   parameter back\
    \ to an OCTET STRING value.\n   While the inclusion of additional parameters carrying\
    \ OID labels or\n   alternate value representations increases human readability,\
    \ this\n   comes at the cost of increased message size, which may cause\n   truncation\
    \ of SYSLOG messages.  Therefore, implementations SHOULD\n   provide a configuration\
    \ mechanism to enable/disable the generation of\n   parameters carrying OID labels\
    \ or alternate value representations.\n      +--------------------+------------+--------------------------+\n\
    \      | SNMP Type          | PARAM-NAME | Value Encoding           |\n      +--------------------+------------+--------------------------+\n\
    \      | OBJECT IDENTIFIER  |     oN     | dotted-decimal notation  |\n      |\
    \ OCTET STRING       |     xN     | hexadecimal string       |\n      | Counter32\
    \          |     cN     | unsigned decimal number  |\n      | Counter64      \
    \    |     CN     | unsigned decimal number  |\n      | Unsigned32         | \
    \    uN     | unsigned decimal number  |\n      | INTEGER, Integer32 |     dN\
    \     | signed decimal number    |\n      | IpAddress          |     iN     |\
    \ dotted quad notation     |\n      | Opaque             |     pN     | hexadecimal\
    \ (BER) string |\n      | TimeTicks          |     tN     | unsigned decimal number\
    \  |\n      | NULL               |     nN     | zero-length string       |\n \
    \     +--------------------+------------+--------------------------+\n       \
    \         Table 1: Mapping of SNMP Types to SD Params\n   The SYSLOG message generated\
    \ by the SNMP-to-SYSLOG translator may, in\n   addition to the SNMP-SD-ELEMENT,\
    \ include other structured data\n   elements in its structured data part.  These\
    \ additional structured\n   data elements MUST comply with the specification in\
    \ [RFC5424].\n   In particular, the parameters in the \"origin\" SD-ID SHOULD\
    \ identify\n   the originator of the SNMP notification.  A suitable value for\
    \ the\n   \"ip\" parameter MAY be taken from the snmpTrapAddress varbind if\n\
    \   present, and a suitable value for the \"enterpriseId\" parameter MAY be\n\
    \   extracted from the snmpTrapOID varbind.\n"
- title: 3.3.  MSG Data
  contents:
  - "3.3.  MSG Data\n   The MSG part of the SYSLOG message is optional and may contain\
    \ a\n   free-form message that provides a textual description of the SNMP\n  \
    \ event notification.  According to [RFC5424], the character set used\n   in MSG\
    \ SHOULD be Unicode, encoded using UTF-8 as specified in\n   [RFC3629].  If the\
    \ originator cannot encode the MSG in Unicode, it\n   MAY use any other encoding.\
    \  The originator MAY use the \"language\"\n   parameters defined in [RFC5424]\
    \ to convey information about the\n   natural language used inside MSG.\n"
- title: 4.  Relationship to the SYSLOG-MSG-MIB
  contents:
  - "4.  Relationship to the SYSLOG-MSG-MIB\n   A companion document [RFC5676] defines\
    \ an SNMP MIB module to\n   represent SYSLOG messages and to send SYSLOG messages\
    \ as SNMP\n   notifications to SNMP notification receivers.  This section discusses\n\
    \   the possibilities of using both specifications in combination.\n   A SYSLOG\
    \ collector implementing the SYSLOG-MSG-MIB module and the\n   mapping of SNMP\
    \ notifications to SYSLOG messages may be configured to\n   translate received\
    \ SYSLOG messages containing SNMP notifications back\n   into the original SNMP\
    \ notification.  In this case, the relevant\n   tables of the SYSLOG-MSG-MIB will\
    \ not be populated for SYSLOG\n   messages carrying SNMP notifications.  This\
    \ configuration allows\n   operators to build a forwarding chain where SNMP notifications\
    \ are\n   \"tunneled\" through SYSLOG messages.  Due to size restrictions of the\n\
    \   SYSLOG transports and the more verbose textual encoding used by\n   SYSLOG,\
    \ there is a possibility that SNMP notification content will\n   get truncated\
    \ when tunneled through SYSLOG, and thus the resulting\n   SNMP notification may\
    \ be incomplete.\n   An SNMP management application supporting the SYSLOG-MSG-MIB\
    \ and the\n   mapping of SNMP notifications to SYSLOG messages may process\n \
    \  information from the SYSLOG-MSG-MIB in order to emit a SYSLOG message\n   representing\
    \ the SYSLOG message recorded in the SYSLOG-MSG-MIB\n   module.  This configuration\
    \ allows operators to build a forwarding\n   chain where SYSLOG messages are \"\
    tunneled\" through SNMP messages.  A\n   notification receiver can determine whether\
    \ a syslogMsgNotification\n   contained all structured data element parameters\
    \ of a SYSLOG message.\n   In case parameters are missing, a forwarding application\
    \ MUST\n   retrieve the missing parameters from the SYSLOG-MSG-MIB.  Regular\n\
    \   polling of the SYSLOG-MSG-MIB can be used to take care of any lost\n   SNMP\
    \ notifications.\n"
- title: 5.  Usage Example
  contents:
  - "5.  Usage Example\n   Here we provide an example of how an SNMP linkUp trap message\
    \ is\n   mapped into a SYSLOG message by using the mappings defined in\n   Section\
    \ 3.1 and Section 3.2.\n   The linkUp notification is defined in [RFC2863] as\
    \ follows:\n   linkUp NOTIFICATION-TYPE\n       OBJECTS { ifIndex, ifAdminStatus,\
    \ ifOperStatus }\n       STATUS  current\n       DESCRIPTION\n          \"A linkUp\
    \ trap signifies that the SNMP entity, acting in an\n          agent role, has\
    \ detected that the ifOperStatus object for\n          one of its communication\
    \ links left the down state and\n          transitioned into some other state\
    \ (but not into the\n          notPresent state).  This other state is indicated\
    \ by the\n          included value of ifOperStatus.\"\n       ::= { snmpTraps\
    \ 4 }\n   The scopedPDU portion of an SNMP linkUp trap sent using the SNMPv3\n\
    \   message format is shown below (the left column shows the Basic\n   Encoding\
    \ Rules (BER) encoding, while the right column indicates the\n   corresponding\
    \ ASN.1 definitions):\n   30:7C                                         SEQUENCE\
    \ {\n      04:08:80:00:02:B8:04:61:62:63                800002b804616263\n   \
    \   04:04:63:74:78:31                            \"ctx1\"\n      A7:6A       \
    \                                 SNMPv2-Trap-PDU {\n         02:03:6D:08:67 \
    \                             INTEGER 7145575\n         02:01:00             \
    \                       INTEGER 0\n         02:01:00                         \
    \           INTEGER 0\n         30:5D                                       SEQUENCE\
    \ OF {\n            30:0F                                      SEQUENCE {\n  \
    \             06:08:2B:06:01:02:01:01:03:00             sysUpTime.0\n        \
    \       43:03:01:72:8C                            94860 }\n            30:17 \
    \                                     SEQUENCE {\n               06:0A:2B:06:01:06:03:01:01:04:01:00\
    \       snmpTrapOID.0\n               06:09:2B:06:01:06:03:01:01:05:04       \
    \   linkUp }\n            30:0F                                      SEQUENCE\
    \ {\n               06:0A:2B:06:01:02:01:02:02:01:01:03       ifIndex.3\n    \
    \           02:01:03                                  3 }\n            30:0F \
    \                                     SEQUENCE {\n               06:0A:2B:06:01:02:01:02:02:01:07:03\
    \       ifAdminStatus.3\n               02:01:01                             \
    \     up(1) }\n            30:0F                                      SEQUENCE\
    \ {\n               06:0A:2B:06:01:02:01:02:02:01:08:03       ifOperStatus.3\n\
    \               02:01:01                                  up(1) } } } }\n   The\
    \ corresponding SYSLOG message generated by the SNMP-to-SYSLOG\n   translator\
    \ is shown below.  (SYSLOG examples should be considered to\n   be on one line.\
    \  They are wrapped on multiple lines in this document\n   for readability purposes\
    \ only.)\n   <29>1 2003-10-11T22:14:15.003Z mymachine.example.com snmptrapd -\
    \ ID47\n     [snmp ctxEngine=\"800002b804616263\" ctxName=\"ctx1\"\n       v1=\"\
    1.3.6.1.2.1.1.3.0\" l1=\"sysUpTime.0\" d1=\"94860\"\n       v2=\"1.3.6.1.6.3.1.1.4.1.0\"\
    \ l2=\"snmpTrapOID.0\"\n         o2=\"1.3.6.1.6.3.1.1.5.4\" a2=\"linkUp\"\n  \
    \     v3=\"1.3.6.1.2.1.2.2.1.1.3\" d3=\"3\"\n       v4=\"1.3.6.1.2.1.2.2.1.7.3\"\
    \ d4=\"1\" a4=\"up\"\n       v5=\"1.3.6.1.2.1.2.2.1.8.3\" d5=\"1\" a5=\"up\"]\n\
    \   The corresponding SYSLOG message has a priority value of 29, which\n   means\
    \ a facility level of 3 (system daemons) and a severity level of\n   5 (Notice:\
    \ normal but significant condition) according to the\n   algorithm for calculation\
    \ of priority value specified in Section\n   6.2.1 of [RFC5424].  The rest of\
    \ the fields in the header of the\n   SYSLOG message are parameters that are specific\
    \ to the system running\n   the SNMP-to-SYSLOG translator.  The SYSLOG version\
    \ is 1 and the\n   message was generated at 22:14:15.003Z on 2003-10-11T by the\
    \ host\n   \"mymachine.example.com\".  The application on the SNMP-to-SYSLOG\n\
    \   translator that generated the message was \"snmptrapd\"; there is no\n   information\
    \ about the process id, and the message on the SNMP-to-\n   SYSLOG system is identified\
    \ with the MSGID of ID47.\n   The SYSLOG message contains one structured data\
    \ element with an SD-ID\n   of \"snmp\", which means that this is the scopedPDU\
    \ portion of an SNMP\n   event notification message.  The data that is contained\
    \ in the\n   notification is associated with the ContextEngineID \"123456\" and\n\
    \   ContextName \"ctx1\".  The request-id of the SNMP notification message\n \
    \  was \"7145575\".  Then follows the data portion of the scopedPDU.  The\n  \
    \ first two variables contained in the data portion are always the\n   sysUpTime.0\
    \ and snmpTrapOID.0.  An snmpTrapOID.0 with a value of\n   \"1.3.6.1.6.3.1.1.5.4\"\
    \ means that this is a linkUp trap.  The\n   parameters v3=\"1.3.6.1.2.1.2.2.1.1.3\"\
    \ d3=\"3\" mean that the SNMP\n   notification message is carrying the ifIndex\
    \ object, which has a type\n   INTEGER and a value of 3.  The parameters v4=\"\
    1.3.6.1.2.1.2.2.1.7.3\"\n   d4=\"1\" mean that the SNMP notification message is\
    \ carrying the object\n   ifAdminStatus, which has a type INTEGER and a value\
    \ of 1.  The\n   parameters v5=\"1.3.6.1.2.1.2.2.1.8.3\" d5=\"1\" mean that the\
    \ SNMP\n   notification message is carrying the object ifOperStatus, which has\
    \ a\n   type INTEGER and a value of \"1\".\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   IANA registered the SD-ID value \"snmp\" together\
    \ with the PARAM-NAME\n   values specified in Section 3.2 in the registry for\
    \ SYSLOG Structured\n   Data ID Values according to Section 9 in [RFC5424].  The\
    \ notation <N>\n   indicates a position number.\n           SD-ID           PARAM-NAME\n\
    \           snmp                            OPTIONAL\n                       \
    \    ctxEngine       OPTIONAL\n                           ctxName         OPTIONAL\n\
    \                           v<N>            OPTIONAL\n                       \
    \    l<N>            OPTIONAL\n                           o<N>            OPTIONAL\n\
    \                           x<N>            OPTIONAL\n                       \
    \    c<N>            OPTIONAL\n                           C<N>            OPTIONAL\n\
    \                           u<N>            OPTIONAL\n                       \
    \    d<N>            OPTIONAL\n                           i<N>            OPTIONAL\n\
    \                           n<N>            OPTIONAL\n                       \
    \    p<N>            OPTIONAL\n                           t<N>            OPTIONAL\n\
    \                           a<N>            OPTIONAL\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   The security considerations discussed in [RFC5424]\
    \ apply to this\n   document.\n   The SNMP architecture supports an access control\
    \ mechanism, ensuring\n   that SNMP notifications are only sent to receivers who\
    \ are authorized\n   to receive the notification.  Network operators using this\
    \ mapping of\n   SNMP notifications to SYSLOG messages should enforce a consistent\n\
    \   policy, preventing people from accessing SNMP notifications via the\n   SYSLOG\
    \ mapping that would otherwise not be accessible.\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   The editors wish to thank the following individuals for\
    \ providing\n   helpful comments on various versions of this document: Martin\n\
    \   Bjorklund, Washam Fan, Rainer Gerhards, Tom Petch, and Dan Romascanu.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3411]  Harrington, D., Presuhn, R., and B. Wijnen, \"An\n    \
    \          Architecture for Describing Simple Network Management\n           \
    \   Protocol (SNMP) Management Frameworks\", STD 62, RFC 3411,\n             \
    \ December 2002.\n   [RFC3412]  Case, J., Harrington, D., Presuhn, R., and B.\
    \ Wijnen,\n              \"Message Processing and Dispatching for the Simple Network\n\
    \              Management Protocol (SNMP)\", STD 62, RFC 3412,\n             \
    \ December 2002.\n   [RFC3413]  Levi, D., Meyer, P., and B. Stewart, \"Simple\
    \ Network\n              Management Protocol (SNMP) Applications\", STD 62,\n\
    \              RFC 3413, December 2002.\n   [RFC3416]  Presuhn, R., \"Version\
    \ 2 of the Protocol Operations for the\n              Simple Network Management\
    \ Protocol (SNMP)\", STD 62,\n              RFC 3416, December 2002.\n   [RFC3418]\
    \  Presuhn, R., \"Management Information Base (MIB) for the\n              Simple\
    \ Network Management Protocol (SNMP)\", STD 62,\n              RFC 3418, December\
    \ 2002.\n   [RFC3584]  Frye, R., Levi, D., Routhier, S., and B. Wijnen,\n    \
    \          \"Coexistence between Version 1, Version 2, and Version 3\n       \
    \       of the Internet-standard Network Management Framework\",\n           \
    \   BCP 74, RFC 3584, August 2003.\n   [RFC3629]  Yergeau, F., \"UTF-8, a transformation\
    \ format of ISO\n              10646\", STD 63, RFC 3629, November 2003.\n   [RFC5234]\
    \  Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n              Specifications:\
    \ ABNF\", RFC 5234, January 2008.\n   [RFC5424]  Gerhards, R., \"The Syslog Protocol\"\
    , RFC 5424, March 2009.\n   [RFC5676]  Schoenwaelder, J., Clemm, A., and A. Karmakar,\n\
    \              \"Definitions of Managed Objects for Mapping SYSLOG\n         \
    \     Messages to Simple Network Management Protocol (SNMP)\n              Notifications\"\
    , RFC 5676, October 2009.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [RFC2578]  McCloghrie, K., Perkins, D., and\
    \ J. Schoenwaelder,\n              \"Structure of Management Information Version\
    \ 2 (SMIv2)\",\n              RFC 2578, STD 58, April 1999.\n   [RFC2863]  McCloghrie,\
    \ K. and F. Kastenholz, \"The Interfaces Group\n              MIB\", RFC 2863,\
    \ June 2000.\n   [RFC3410]  Case, J., Mundy, R., Partain, D., and B. Stewart,\n\
    \              \"Introduction and Applicability Statements for Internet-\n   \
    \           Standard Management Framework\", RFC 3410, December 2002.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Vladislav Marinov\n   Jacobs University Bremen\n   Campus\
    \ Ring 1\n   28725 Bremen\n   Germany\n   EMail: v.marinov@jacobs-university.de\n\
    \   Juergen Schoenwaelder\n   Jacobs University Bremen\n   Campus Ring 1\n   28725\
    \ Bremen\n   Germany\n   EMail: j.schoenwaelder@jacobs-university.de\n"
