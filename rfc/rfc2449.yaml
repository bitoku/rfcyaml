- contents:
  - '                        POP3 Extension Mechanism

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "IESG Note\n   This extension to the POP3 protocol is to be used by a server to\n
    \  express policy descisions taken by the server administrator.  It is\n   not
    an endorsement of implementations of further POP3 extensions\n   generally.  It
    is the general view that the POP3 protocol should stay\n   simple, and for the
    simple purpose of downloading email from a mail\n   server.  If more complicated
    operations are needed, the IMAP protocol\n   [RFC 2060] should be used.  The first
    paragraph of section 7 should\n   be read very carefully.\n"
  title: IESG Note
- contents:
  - "Table of Contents\n    1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . .  2\n    2.  Conventions Used in this Document . . . . . . . . . . .
    . .   3\n    3.  General Command and Response Grammar . . . . . . . . . . . .
    \ 3\n    4.  Parameter and Response Lengths  . . . . . . . . . . . . . .   4\n
    \   5.  The CAPA Command . . . . . . . . . . . . . . . . . . . . . .  4\n    6.
    \ Initial Set of Capabilities . . . . . . . . . . . . . . . .   5\n      6.1.
    \ TOP capability . . . . . . . . . . . . . . . . . . . . .  6\n      6.2.  USER
    capability . . . . . . . . . . . . . . . . . . . .   6\n      6.3.  SASL capability
    \ . . . . . . . . . . . . . . . . . . . .  7\n      6.4.  RESP-CODES capability
    . . . . . . . . . . . . . . . . .   8\n      6.5.  LOGIN-DELAY capability . .
    . . . . . . . . . . . . . . .  8\n      6.6.  PIPELINING capability . . . . .
    . . . . . . . . . . . .   9\n      6.7.  EXPIRE capability  . . . . . . . . .
    . . . . . . . . . . 10\n      6.8.  UIDL capability . . . . . . . . . . . . .
    . . . . . . .  13\n      6.9.  IMPLEMENTATION capability  . . . . . . . . . .
    . . . . . 13\n    7.  Future Extensions to POP3 . . . . . . . . . . . . . . .
    . .  14\n    8.  Extended POP3 Response Codes . . . . . . . . . . . . . . . .
    14\n      8.1.  Initial POP3 response codes . . . . . . . . . . . . . .  15\n
    \       8.1.1.  The LOGIN-DELAY response code  . . . . . . . . . . . 15\n        8.1.2.
    \ The IN-USE response code  . . . . . . . . . . . . .  16\n    9.  IANA Considerations
    \ . . . . . . . . . . . . . . . . . . . . 16\n   10.  Security Considerations
    . . . . . . . . . . . . . . . . . .  17\n   11.  Acknowledgments  . . . . . .
    . . . . . . . . . . . . . . . . 17\n   12.  References  . . . . . . . . . . .
    . . . . . . . . . . . . .  17\n   13.  Authors' Addresses  . . . . . . . . . .
    . . . . . . . . . .  18\n   14.  Full Copyright Statement . . . . . . . . . .
    . . . . . . . . 19\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Post Office Protocol version 3 [POP3] is very widely
    used.\n   However, while it includes some optional commands (and some useful\n
    \  protocol extensions have been published), it lacks a mechanism for\n   advertising
    support for these extensions or for behavior variations.\n   Currently these optional
    features and extensions can only be detected\n   by probing, if at all.  This
    is at best inefficient, and possibly\n   worse.  As a result, some clients have
    manual configuration options\n   for POP3 server capabilities.\n   Because one
    of the most important characteristics of POP3 is its\n   simplicity, it is desirable
    that extensions be few in number (see\n   section 7).  However, some extensions
    are necessary (such as ones\n   that provide improved security [POP-AUTH]), while
    others are very\n   desirable in certain situations.  In addition, a means for\n
    \  discovering server behavior is needed.\n   This memo updates RFC 1939 [POP3]
    to define a mechanism to announce\n   support for optional commands, extensions,
    and unconditional server\n   behavior.  Included is an initial set of currently
    deployed\n   capabilities which vary between server implementations, and several\n
    \  new capabilities (SASL, RESP-CODES, LOGIN-DELAY, PIPELINING, EXPIRE\n   and
    IMPLEMENTATION).  This document also extends POP3 error messages\n   so that machine
    parsable codes can be provided to the client.  An\n   initial set of response
    codes is included.  In addition, an [ABNF]\n   specification of POP3 commands
    and responses is defined.\n   Public comments should be sent to the IETF POP3
    Extensions mailing\n   list, <ietf-pop3ext@imc.org>.  To subscribe, send a message\n
    \  containing SUBSCRIBE to <ietf-pop3ext-request@imc.org>.\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions Used in this Document\n   The key words \"REQUIRED\", \"MUST\",
    \"MUST NOT\", \"SHOULD\", \"SHOULD NOT\",\n   and \"MAY\" in this document are
    to be interpreted as described in \"Key\n   words for use in RFCs to Indicate
    Requirement Levels\" [KEYWORDS].\n   In examples, \"C:\" and \"S:\" indicate lines
    sent by the client and\n   server respectively.\n"
  title: 2.  Conventions Used in this Document
- contents:
  - "3.  General Command and Response Grammar\n   The general form of POP3 commands
    and responses is described using\n   [ABNF]:\n   POP3 commands:\n      command
    \     =  keyword *(SP param) CRLF    ;255 octets maximum\n      keyword      =
    \ 3*4VCHAR\n      param        =  1*VCHAR\n   POP3 responses:\n      response
    \    =  greeting / single-line / capa-resp / multi-line\n      capa-resp    =
    \ single-line *capability \".\" CRLF\n      capa-tag     =  1*cchar\n      capability
    \  =  capa-tag *(SP param) CRLF   ;512 octets maximum\n      cchar        =  %x21-2D
    / %x2F-7F\n                          ;printable ASCII, excluding \".\"\n      dot-stuffed
    \ =  *CHAR CRLF                  ;must be dot-stuffed\n      gchar        =  %x21-3B
    / %x3D-7F\n                          ;printable ASCII, excluding \"<\"\n      greeting
    \    =  \"+OK\" [resp-code] *gchar [timestamp] *gchar CRLF\n                          ;512
    octets maximum\n      multi-line   =  single-line *dot-stuffed \".\" CRLF\n      rchar
    \       =  %x21-2E / %x30-5C / %x5E-7F\n                          ;printable ASCII,
    excluding \"/\" and \"]\"\n      resp-code    =  \"[\" resp-level *(\"/\" resp-level)
    \"]\"\n      resp-level   =  1*rchar\n      schar        =  %x21-5A / %x5C-7F\n
    \                         ;printable ASCII, excluding \"[\"\n      single-line
    \ =  status [SP text] CRLF       ;512 octets maximum\n      status       =  \"+OK\"
    / \"-ERR\"\n      text         =  *schar / resp-code *CHAR\n      timestamp    =
    \ \"<\" *VCHAR \">\"\n                          ;MUST conform to RFC-822 msg-id\n"
  title: 3.  General Command and Response Grammar
- contents:
  - "4.  Parameter and Response Lengths\n   This specification increases the length
    restrictions on commands and\n   parameters imposed by RFC 1939.\n   The maximum
    length of a command is increased from 47 characters (4\n   character command,
    single space, 40 character argument, CRLF) to 255\n   octets, including the terminating
    CRLF.\n   Servers which support the CAPA command MUST support commands up to\n
    \  255 octets.  Servers MUST also support the largest maximum command\n   length
    specified by any supported capability.\n   The maximum length of the first line
    of a command response (including\n   the initial greeting) is unchanged at 512
    octets (including the\n   terminating CRLF).\n"
  title: 4.  Parameter and Response Lengths
- contents:
  - "5.  The CAPA Command\n   The POP3 CAPA command returns a list of capabilities
    supported by the\n   POP3 server.  It is available in both the AUTHORIZATION and\n
    \  TRANSACTION states.\n   A capability description MUST document in which states
    the capability\n   is announced, and in which states the commands are valid.\n
    \  Capabilities available in the AUTHORIZATION state MUST be announced\n   in
    both states.\n   If a capability is announced in both states, but the argument
    might\n   differ after authentication, this possibility MUST be stated in the\n
    \  capability description.\n   (These requirements allow a client to issue only
    one CAPA command if\n   it does not use any TRANSACTION-only capabilities, or
    any\n   capabilities whose values may differ after authentication.)\n   If the
    authentication step negotiates an integrity protection layer,\n   the client SHOULD
    reissue the CAPA command after authenticating, to\n   check for active down-negotiation
    attacks.\n   Each capability may enable additional protocol commands, additional\n
    \  parameters and responses for existing commands, or describe an aspect\n   of
    server behavior.  These details are specified in the description\n   of the capability.\n
    \  Section 3 describes the CAPA response using [ABNF].  When a\n   capability
    response describes an optional command, the <capa-tag>\n   SHOULD be identical
    to the command keyword.  CAPA response tags are\n   case-insensitive.\n        CAPA\n
    \       Arguments:\n            none\n        Restrictions:\n            none\n
    \       Discussion:\n            An -ERR response indicates the capability command
    is not\n            implemented and the client will have to probe for\n            capabilities
    as before.\n            An +OK response is followed by a list of capabilities,
    one\n            per line.  Each capability name MAY be followed by a single\n
    \           space and a space-separated list of parameters.  Each\n            capability
    line is limited to 512 octets (including the\n            CRLF).  The capability
    list is terminated by a line\n            containing a termination octet (\".\")
    and a CRLF pair.\n         Possible Responses:\n             +OK -ERR\n         Examples:\n
    \            C: CAPA\n             S: +OK Capability list follows\n             S:
    TOP\n             S: USER\n             S: SASL CRAM-MD5 KERBEROS_V4\n             S:
    RESP-CODES\n             S: LOGIN-DELAY 900\n             S: PIPELINING\n             S:
    EXPIRE 60\n             S: UIDL\n             S: IMPLEMENTATION Shlemazle-Plotz-v302\n
    \            S: .\n"
  title: 5.  The CAPA Command
- contents:
  - "6.  Initial Set of Capabilities\n   This section defines an initial set of POP3
    capabilities.  These\n   include the optional POP3 commands, already published
    POP3\n   extensions, and behavior variations between POP3 servers which can\n
    \  impact clients.\n   Note that there is no APOP capability, even though APOP
    is an\n   optional command in [POP3].  Clients discover server support of APOP\n
    \  by the presence in the greeting banner of an initial challenge\n   enclosed
    in angle brackets (\"<>\").  Therefore, an APOP capability\n   would introduce
    two ways for a server to announce the same thing.\n"
  - contents:
    - "6.1.  TOP capability\n   CAPA tag:\n       TOP\n   Arguments:\n       none\n
      \  Added commands:\n       TOP\n   Standard commands affected:\n       none\n
      \  Announced states / possible differences:\n       both / no\n   Commands valid
      in states:\n       TRANSACTION\n   Specification reference:\n       [POP3]\n
      \  Discussion:\n       The TOP capability indicates the optional TOP command
      is\n       available.\n"
    title: 6.1.  TOP capability
  - contents:
    - "6.2.  USER capability\n   CAPA tag:\n       USER\n   Arguments:\n       none\n
      \  Added commands:\n       USER PASS\n   Standard commands affected:\n       none\n
      \  Announced states / possible differences:\n       both / no\n   Commands valid
      in states:\n       AUTHENTICATION\n   Specification reference:\n       [POP3]\n
      \  Discussion:\n       The USER capability indicates that the USER and PASS
      commands\n       are supported, although they may not be available to all users.\n"
    title: 6.2.  USER capability
  - contents:
    - "6.3.  SASL capability\n   CAPA tag:\n       SASL\n   Arguments:\n       Supported
      SASL mechanisms\n   Added commands:\n       AUTH\n   Standard commands affected:\n
      \      none\n   Announced states / possible differences:\n       both / no\n
      \  Commands valid in states:\n       AUTHENTICATION\n   Specification reference:\n
      \      [POP-AUTH, SASL]\n   Discussion:\n       The POP3 AUTH command [POP-AUTH]
      permits the use of [SASL]\n       authentication mechanisms with POP3.  The
      SASL capability\n       indicates that the AUTH command is available and that
      it supports\n       an optional base64 encoded second argument for an initial
      client\n       response as described in the SASL specification.  The argument
      to\n       the SASL capability is a space separated list of SASL mechanisms\n
      \      which are supported.\n"
    title: 6.3.  SASL capability
  - contents:
    - "6.4.  RESP-CODES capability\n   CAPA tag:\n       RESP-CODES\n   Arguments:\n
      \      none\n   Added commands:\n       none\n   Standard commands affected:\n
      \      none\n   Announced states / possible differences:\n       both / no\n
      \  Commands valid in states:\n       n/a\n   Specification reference:\n       this
      document\n   Discussion:\n       The RESP-CODES capability indicates that any
      response text issued\n       by this server which begins with an open square
      bracket (\"[\") is\n       an extended response code (see section 8).\n"
    title: 6.4.  RESP-CODES capability
  - contents:
    - "6.5.  LOGIN-DELAY capability\n   CAPA tag:\n       LOGIN-DELAY\n   Arguments:\n
      \      minimum seconds between logins; optionally followed by USER in\n       AUTHENTICATION
      state.\n   Added commands:\n       none\n   Standard commands affected:\n       USER
      PASS APOP AUTH\n   Announced states / possible differences:\n       both / yes\n
      \  Commands valid in states:\n       n/a\n   Specification reference:\n       this
      document\n   Discussion:\n       POP3 clients often login frequently to check
      for new mail.\n       Unfortunately, the process of creating a connection,\n
      \      authenticating the user, and opening the user's maildrop can be\n       very
      resource intensive on the server.  A number of deployed POP3\n       servers
      try to reduce server load by requiring a delay between\n       logins.  The
      LOGIN-DELAY capability includes an integer argument\n       which indicates
      the number of seconds after an \"+OK\" response to\n       a PASS, APOP, or
      AUTH command before another authentication will\n       be accepted.  Clients
      which permit the user to configure a mail\n       check interval SHOULD use
      this capability to determine the\n       minimum permissible interval.  Servers
      which advertise LOGIN-\n       DELAY SHOULD enforce it.\n       If the minimum
      login delay period could differ per user (that is,\n       the LOGIN-DELAY argument
      might change after authentication), the\n       server MUST announce in AUTHENTICATION
      state the largest value\n       which could be set for any user.  This might
      be the largest value\n       currently in use for any user (so only one value
      per server), or\n       even the largest value which the server permits to be
      set for any\n       user.  The server SHOULD append the token \"USER\" to the
      LOGIN-\n       DELAY parameter in AUTHENTICATION state, to inform the client\n
      \      that a more accurate value is available after authentication.\n       The
      server SHOULD announce the more accurate value in TRANSACTION\n       state.
      (The \"USER\" token allows the client to decide if a second\n       CAPA command
      is needed or not.)\n       Servers enforce LOGIN-DELAY by rejecting an authentication\n
      \      command with or without the LOGIN-DELAY error response.  See\n       section
      8.1.1 for more information.\n"
    title: 6.5.  LOGIN-DELAY capability
  - contents:
    - "6.6.  PIPELINING capability\n   CAPA tag:\n       PIPELINING\n   Arguments:\n
      \      none\n   Added commands:\n       none\n   Standard commands affected:\n
      \      all\n   Announced states / possible differences:\n       both / no\n
      \  Commands valid in states:\n       n/a\n   Specification reference:\n       this
      document\n   Discussion:\n       The PIPELINING capability indicates the server
      is capable of\n       accepting multiple commands at a time; the client does
      not have\n       to wait for the response to a command before issuing a subsequent\n
      \      command.  If a server supports PIPELINING, it MUST process each\n       command
      in turn.  If a client uses PIPELINING, it MUST keep track\n       of which commands
      it has outstanding, and match server responses\n       to commands in order.
      \ If either the client or server uses\n       blocking writes, it MUST not exceed
      the window size of the\n       underlying transport layer.\n       Some POP3
      clients have an option to indicate the server supports\n       \"Overlapped
      POP3 commands.\" This capability removes the need to\n       configure this
      at the client.\n       This is roughly synonymous with the ESMTP PIPELINING
      extension\n       [PIPELINING], however, since SMTP [SMTP] tends to have short\n
      \      commands and responses, the benefit is in grouping multiple\n       commands
      and sending them as a unit.  While there are cases of\n       this in POP (for
      example, USER and PASS could be batched,\n       multiple RETR and/or DELE commands
      could be sent as a group),\n       because POP has short commands and sometimes
      lengthy responses,\n       there is also an advantage is sending new commands
      while still\n       receiving the response to an earlier command (for example,\n
      \      sending RETR and/or DELE commands while processing a UIDL reply).\n"
    title: 6.6.  PIPELINING capability
  - contents:
    - "6.7.  EXPIRE capability\n   CAPA tag:\n       EXPIRE\n   Arguments:\n       server-guaranteed
      minimum retention days, or NEVER; optionally\n       followed by USER in AUTHENTICATION
      state\n   Added commands:\n       none\n   Standard commands affected:\n       none\n
      \  Announced states / possible differences:\n       both / yes\n   Commands
      valid in states:\n       n/a\n   Specification reference:\n       this document\n
      \  Discussion:\n       While POP3 allows clients to leave messages on the server,
      RFC\n       1939 [POP3] warns about the problems that may arise from this,\n
      \      and allows servers to delete messages based on site policy.\n       The
      EXPIRE capability avoids the problems mentioned in RFC 1939,\n       by allowing
      the server to inform the client as to the policy in\n       effect.  The argument
      to the EXPIRE capability indicates the\n       minimum server retention period,
      in days, for messages on the\n       server.\n       EXPIRE 0 indicates the
      client is not permitted to leave mail on\n       the server; when the session
      enters the UPDATE state the server\n       MAY assume an implicit DELE for each
      message which was downloaded\n       with RETR.\n       EXPIRE NEVER asserts
      that the server does not delete messages.\n       The concept of a \"retention
      period\" is intentionally vague.\n       Servers may start counting days to
      expiration when a message is\n       added to a maildrop, when a client becomes
      aware of the existence\n       of a message through the LIST or UIDL commands,
      when a message\n       has been acted upon in some way (for example, TOP or
      RETR), or at\n       some other event.  The EXPIRE capability cannot provide
      a precise\n       indication as to exactly when any specific message will expire.\n
      \      The capability is intended to make it easier for clients to\n       behave
      in ways which conform to site policy and user wishes.  For\n       example,
      a client might display a warning for attempts to\n       configure a \"leave
      mail on server\" period which is greater than\n       or equal to some percentage
      of the value announced by the server.\n       If a site uses any automatic deletion
      policy, it SHOULD use the\n       EXPIRE capability to announce this.\n       The
      EXPIRE capability, with a parameter other than 0 or NEVER, is\n       intended
      to let the client know that the server does permit mail\n       to be left on
      the server, and to present a value which is the\n       smallest which might
      be in force.\n       Sites which permit users to retain messages indefinitely
      SHOULD\n       announce this with the EXPIRE NEVER response.\n       If the
      expiration policy differs per user (that is, the EXPIRE\n       argument might
      change after authentication), the server MUST\n       announce in AUTHENTICATION
      state the smallest value which could\n       be set for any user.  This might
      be the smallest value currently\n       in use for any user (so only one value
      per server), or even the\n       smallest value which the server permits to
      be set for any user.\n       The server SHOULD append the token \"USER\" to
      the EXPIRE parameter\n       in AUTHENTICATION state, to inform the client that
      a more\n       accurate value is available after authentication.  The server\n
      \      SHOULD announce the more accurate value in TRANSACTION state.\n       (The
      \"USER\" token allows the client to decide if a second CAPA\n       command
      is needed or not.)\n       A site may have a message expiration policy which
      treats messages\n       differently depending on which user actions have been
      performed,\n       or based on other factors.  For example, a site might delete\n
      \      unseen messages after 60 days, and completely- or partially-seen\n       messages
      after 15 days.\n       The announced EXPIRE value is the smallest retention
      period which\n       is or might be used by any category or condition of the
      current\n       site policy, for any user (in AUTHENTICATION state) or the\n
      \      specific user (in TRANSACTION state).  That is, EXPIRE informs\n       the
      client of the minimum number of days messages may remain on\n       the server
      under any circumstances.\n       Examples:\n           EXPIRE 5 USER\n           EXPIRE
      30\n           EXPIRE NEVER\n           EXPIRE 0\n       The first example indicates
      the server might delete messages\n       after five days, but the period differs
      per user, and so a more\n       accurate value can be obtained by issuing a
      second CAPA command\n       in TRANSACTION state.  The second example indicates
      the server\n       could delete messages after 30 days.  In the third example,
      the\n       server announces it does not delete messages.  The fourth example\n
      \      specifies that the site does not permit messages to be left on\n       the
      server.\n"
    title: 6.7.  EXPIRE capability
  - contents:
    - "6.8.  UIDL capability\n   CAPA tag:\n       UIDL\n   Arguments:\n       none\n
      \  Added commands:\n       UIDL\n   Standard commands affected:\n       none\n
      \  Announced states / possible differences:\n       both / no\n   Commands valid
      in states:\n       TRANSACTION\n   Specification reference:\n       [POP3]\n
      \  Discussion:\n       The UIDL capability indicates that the optional UIDL
      command is\n       supported.\n"
    title: 6.8.  UIDL capability
  - contents:
    - "6.9.  IMPLEMENTATION capability\n   CAPA tag:\n       IMPLEMENTATION\n   Arguments:\n
      \      string giving server implementation information\n   Added commands:\n
      \      none\n   Standard commands affected:\n       none\n   Announced states
      / possible differences:\n       both (optionally TRANSACTION only) / no\n   Commands
      valid in states:\n       n/a\n   Specification reference:\n       this document\n
      \  Discussion:\n       It is often useful to identify an implementation of a
      particular\n       server (for example, when logging).  This is commonly done
      in the\n       welcome banner, but one must guess if a string is an\n       implementation
      ID or not.\n       The argument to the IMPLEMENTATION capability consists of
      one or\n       more tokens which identify the server. (Note that since CAPA\n
      \      response tag arguments are space-separated, it may be convenient\n       for
      the IMPLEMENTATION capability argument to not contain spaces,\n       so that
      it is a single token.)\n       Normally, servers announce IMPLEMENTATION in
      both states.\n       However, a server MAY chose to do so only in TRANSACTION
      state.\n       A server MAY include the implementation identification both in\n
      \      the welcome banner and in the IMPLEMENTATION capability.\n       Clients
      MUST NOT modify their behavior based on the server\n       implementation.  Instead
      the server and client should agree on a\n       private extension.\n"
    title: 6.9.  IMPLEMENTATION capability
  title: 6.  Initial Set of Capabilities
- contents:
  - "7.  Future Extensions to POP3\n   Future extensions to POP3 are in general discouraged,
    as POP3's\n   usefulness lies in its simplicity.  POP3 is intended as a download-\n
    \  and-delete protocol; mail access capabilities are available in IMAP\n   [IMAP4].
    \ Extensions which provide support for additional mailboxes,\n   allow uploading
    of messages to the server, or which deviate from\n   POP's download-and-delete
    model are strongly discouraged and unlikely\n   to be permitted on the IETF standards
    track.\n   Clients MUST NOT require the presence of any extension for basic\n
    \  functionality, with the exception of the authentication commands\n   (APOP,
    AUTH [section 6.3] and USER/PASS).\n   Section 9 specifies how additional capabilities
    are defined.\n"
  title: 7.  Future Extensions to POP3
- contents:
  - "8.  Extended POP3 Response Codes\n   Unextended POP3 is only capable of indicating
    success or failure to\n   most commands.  Unfortunately, clients often need to
    know more\n   information about the cause of a failure in order to gracefully\n
    \  recover.  This is especially important in response to a failed login\n   (there
    are widely-deployed clients which attempt to decode the error\n   text of a PASS
    command result, to try and distinguish between \"unable\n   to get maildrop lock\"
    and \"bad login\").\n   This specification amends the POP3 standard to permit
    an optional\n   response code, enclosed in square brackets, at the beginning of
    the\n   human readable text portion of an \"+OK\" or \"-ERR\" response.  Clients\n
    \  supporting this extension MAY remove any information enclosed in\n   square
    brackets prior to displaying human readable text to the user.\n   Immediately
    following the open square bracket \"[\" character is a\n   response code which
    is interpreted in a case-insensitive fashion by\n   the client.\n   The response
    code is hierarchical, with a \"/\" separating levels of\n   detail about the error.
    \ Clients MUST ignore unknown hierarchical\n   detail about the response code.
    \ This is important, as it could be\n   necessary to provide further detail for
    response codes in the future.\n   Section 3 describes response codes using [ABNF].\n
    \  If a server supports extended response codes, it indicates this by\n   including
    the RESP-CODES capability in the CAPA response.\n   Examples:\n           C: APOP
    mrose c4c9334bac560ecc979e58001b3e22fb\n           S: -ERR [IN-USE] Do you have
    another POP session running?\n"
  - contents:
    - "8.1.  Initial POP3 response codes\n   This specification defines two POP3 response
      codes which can be used\n   to determine the reason for a failed login.  Section
      9 specifies how\n   additional response codes are defined.\n"
    - contents:
      - "8.1.1.  The LOGIN-DELAY response code\n   This occurs on an -ERR response
        to an AUTH, USER (see note), PASS or\n   APOP command and indicates that the
        user has logged in recently and\n   will not be allowed to login again until
        the login delay period has\n   expired.\n   NOTE:  Returning the LOGIN-DELAY
        response code to the USER command\n   avoids the work of authenticating the
        user but reveals to the client\n   that the specified user exists.  Unless
        the server is operating in an\n   environment where user names are not secret
        (for example, many\n   popular email clients advertise the POP server and
        user name in an\n   outgoing mail header), or where server access is restricted,
        or the\n   server can verify that the connection is to the same user, it is\n
        \  strongly recommended that the server not issue this response code to\n
        \  the USER command.  The server still saves the cost of opening the\n   maildrop,
        which in some environments is the most expensive step.\n"
      title: 8.1.1.  The LOGIN-DELAY response code
    - contents:
      - "8.1.2.  The IN-USE response code\n   This occurs on an -ERR response to an
        AUTH, APOP, or PASS command.\n   It indicates the authentication was successful,
        but the user's\n   maildrop is currently in use (probably by another POP3
        client).\n"
      title: 8.1.2.  The IN-USE response code
    title: 8.1.  Initial POP3 response codes
  title: 8.  Extended POP3 Response Codes
- contents:
  - "9.  IANA Considerations\n   This document requests that IANA maintain two new
    registries:  POP3\n   capabilities and POP3 response codes.\n   New POP3 capabilities
    MUST be defined in a standards track or IESG\n   approved experimental RFC, and
    MUST NOT begin with the letter \"X\".\n   New POP3 capabilities MUST include the
    following information:\n        CAPA tag\n        Arguments\n        Added commands\n
    \       Standard commands affected\n        Announced states / possible differences\n
    \       Commands valid in states\n        Specification reference\n        Discussion\n
    \  In addition, new limits for POP3 command and response lengths may\n   need
    to be included.\n   New POP3 response codes MUST be defined in an RFC or other
    permanent\n   and readily available reference, in sufficient detail so that\n
    \  interoperability between independent implementations is possible.\n   (This
    is the \"Specification Required\" policy described in [IANA]).\n   New POP3 response
    code specifications MUST include the following\n   information: the complete response
    code, for which responses (+OK\n   or -ERR) and commands it is valid, and a definition
    of its meaning and\n   expected client behavior.\n"
  title: 9.  IANA Considerations
- contents:
  - "10.  Security Considerations\n   A capability list can reveal information about
    the server's\n   authentication mechanisms which can be used to determine if certain\n
    \  attacks will be successful.  However, allowing clients to\n   automatically
    detect availability of stronger mechanisms and alter\n   their configurations
    to use them can improve overall security at a\n   site.\n   Section 8.1 discusses
    the security issues related to use of the\n   LOGIN-DELAY response code with the
    USER command.\n"
  title: 10.  Security Considerations
- contents:
  - "11.  Acknowledgments\n   This document has been revised in part based on comments
    and\n   discussions which took place on and off the IETF POP3 Extensions\n   mailing
    list.  The help of those who took the time to review this\n   memo and make suggestions
    is appreciated, especially that of Alexey\n   Melnikov, Harald Alvestrand, and
    Mike Gahrns.\n"
  title: 11.  Acknowledgments
- contents:
  - "12.  References\n   [ABNF]       Crocker, D. and P. Overell, \"Augmented BNF
    for Syntax\n                Specifications:  ABNF\", RFC 2234, November 1997.\n
    \  [IANA]       Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n                IANA
    Considerations Section in RFCs\", BCP 26, RFC 2434,\n                October 1998.\n
    \  [IMAP4]      Crispin, M., \"Internet Message Access Protocol --\n                Version
    4rev1\", RFC 2060, December 1996.\n   [KEYWORDS]   Bradner, S., \"Key words for
    use in RFCs to Indicate\n                Requirement Levels\", BCP 14, RFC 2119,
    March 1997.\n   [PIPELINING] Freed, N., \"SMTP Service Extension for Command\n
    \               Pipelining\", RFC 2197, September 1997.\n   [POP3]       Myers,
    J. and M. Rose, \"Post Office Protocol -- Version\n                3\", STD 53,
    RFC 1939, May 1996.\n   [POP-AUTH]   Myers, J., \"POP3 AUTHentication command\",
    RFC 1734,\n                December 1994.\n   [SASL]       Myers, J., \"Simple
    Authentication and Security Layer\n                (SASL)\", RFC 2222, October
    1997.\n   [SMTP]       Postel, J., \"Simple Mail Transfer Protocol\", STD 10,
    RFC\n                821, August 1982.\n"
  title: 12.  References
- contents:
  - "13.  Authors' Addresses\n   Randall Gellens\n   QUALCOMM Incorporated\n   6455
    Lusk Blvd.\n   San Diego, CA  92121-2779\n   USA\n   Phone: +1 619 651 5115\n
    \  Fax:   +1 619 845 7268\n   EMail: randy@qualcomm.com\n   Chris Newman\n   Innosoft
    International, Inc.\n   1050 Lakes Drive\n   West Covina, CA 91790\n   USA\n   EMail:
    chris.newman@innosoft.com\n   Laurence Lundblade\n   QUALCOMM Incorporated\n   6455
    Lusk Blvd.\n   San Diego, Ca, 92121-2779\n   USA\n   Phone: +1 619 658 3584\n
    \  Fax:   +1 619 845 7268\n   EMail: lgl@qualcomm.com\n"
  title: 13.  Authors' Addresses
- contents:
  - "14.  Full Copyright Statement\n   Copyright (C) The Internet Society (1998).
    \ All Rights Reserved.\n   This document and translations of it may be copied
    and furnished to\n   others, and derivative works that comment on or otherwise
    explain it\n   or assist in its implementation may be prepared, copied, published\n
    \  and distributed, in whole or in part, without restriction of any\n   kind,
    provided that the above copyright notice and this paragraph are\n   included on
    all such copies and derivative works.  However, this\n   document itself may not
    be modified in any way, such as by removing\n   the copyright notice or references
    to the Internet Society or other\n   Internet organizations, except as needed
    for the purpose of\n   developing Internet standards in which case the procedures
    for\n   copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: 14.  Full Copyright Statement
