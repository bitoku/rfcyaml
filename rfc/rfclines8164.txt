Abstract This document describes how "http" URIs can be accessed using Transport Layer Security (TLS) and HTTP/2 to mitigate pervasive monitoring attacks.
This mechanism not a replacement for "https" URIs; it is vulnerable to active attacks.
This document describes a use of HTTP Alternative Services [RFC7838] to decouple the URI scheme from the use and configuration of underlying encryption.
It allows an "http" URI [RFC7230] to be accessed using HTTP/2 and Transport Layer Security (TLS)
[RFC5246] with Opportunistic Security [RFC7435].
This document describes a usage model whereby sites can serve "http" URIs over TLS, thereby avoiding the problem of serving Mixed Content (described in [W3C.CR mixed content 20160802]) while still providing protection against passive attacks.
Opportunistic Security does not provide the same guarantees as using TLS with "https" URIs, because it is vulnerable to active attacks, and does not change the security context of the connection.
Normally, users will not be able to tell that it is in use
(i.e., there will be no "lock icon").
The immediate goal is to make the use of HTTP more robust in the face of pervasive passive monitoring [RFC7258].
A secondary (but significant) goal is to provide for ease of implementation, deployment, and operation.
This mechanism is expected to have a minimal impact upon performance and require trivial administrative effort to configure.
Preventing active attacks (such as man in the middle attacks) is a non goal for this specification.
Furthermore, this specification is not intended to replace or offer an alternative to "https", since "https" both prevents active attacks and invokes a more stringent security model in most clients.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
2.  Using HTTP URIs over TLS
An origin server that supports the resolution of "http" URIs can indicate support for this specification by providing an alternative service advertisement [RFC7838] for a protocol identifier that uses TLS, such as "h2" [RFC7540].
Such a protocol MUST include an explicit indication of the scheme of the resource.
This excludes HTTP/1.1; HTTP/1.1 clients are forbidden from including the absolute form of a URI in requests to origin servers (see Section 5.3.1 of [RFC7230]).
A client that receives such an advertisement MAY make future requests intended for the associated origin [RFC6454] to the identified service (as specified by [RFC7838]), provided that the alternative service opts in as described in Section 2.1.
A client that places the importance of protection against passive attacks over performance might choose to withhold requests until an encrypted connection is available.
However, if such a connection cannot be successfully established, the client can resume its use of the cleartext connection.
A client can also explicitly probe for an alternative service advertisement by sending a request that bears little or no sensitive information, such as one with the OPTIONS method.
Likewise, clients with existing alternative services information could make such a request before they expire, in order minimize the delays that might be incurred.
Client certificates are not meaningful for URLs with the "http" scheme; therefore, clients creating new TLS connections to alternative services for the purposes of this specification MUST NOT present them.
A server that also provides "https" resources on the same port can request a certificate during the TLS handshake, but it MUST NOT abort the handshake if the client does not provide one.
In For various reasons, it is possible that the server might become confused about whether requests' URLs have an "http" or "https" scheme (see Section 4.4).
To ensure that the alternative service has opted into serving "http" URLs over TLS, clients are required to perform additional checks before directing "http" requests to it.
Clients MUST NOT send "http" requests over a secured connection, unless the chosen alternative service presents a certificate that is valid for the origin as defined in [RFC2818].
Using an authenticated alternative service establishes "reasonable assurances" for the purposes of [RFC7838].
In addition to authenticating the server, the client MUST have obtained a valid "http opportunistic" response for an origin (as per Section 2.3) using the authenticated connection.
An exception to the latter restriction is made for requests for the "http opportunistic" well known URI.
For example, assuming the following request is made over a TLS connection that is successfully authenticated for those origins, the following request/response pair would allow requests for the origins "http://www.example.com" or "http://example.com" to be sent using a secured connection: HEADERS   END STREAM
http opportunistic HEADERS :status   200 content type   application/json DATA   END STREAM [ "http://www.example.com", "http://example.com" ]
This document describes multiple origins, but only for operational convenience.
Only a request made to an origin (over an authenticated connection) can be used to acquire the "http opportunistic" resource for that origin.
Thus, in the example, the request to "http://example.com" cannot be assumed to also provide a representation of the "http opportunistic" resource for "http://www.example.com".
Interaction with "https" URIs Clients MUST NOT send "http" and "https" requests on the same connection.
Similarly, clients MUST NOT send "http" requests for multiple origins on the same connection.
The "http opportunistic" Well Known URI
This specification defines the "http opportunistic" well known URI [RFC5785].
A client is said to have a valid "http opportunistic" response for a given origin when:  The client has requested the well known URI from the origin over an authenticated connection and
A client MAY treat an "http opportunistic" resource as invalid if values it contains are not strings.
This document does not define semantics for "http opportunistic" resources on an "https" origin, nor does it define semantics if the resource includes "https" origins.
Allowing clients to cache the "http opportunistic" resource means that all alternative services need to be able to respond to requests for "http" resources.
A client is permitted to use an alternative service without acquiring the "http opportunistic" resource from that service.
A client MUST NOT use any cached copies of an "http opportunistic" resource that was acquired (or revalidated) over an unauthenticated connection.
To avoid potential errors, a client can request or revalidate the "http opportunistic" resource before using any connection to an alternative service.
Clients that use cached "http opportunistic" responses MUST ensure that their cache is cleared of any responses that were acquired over an unauthenticated connection.
Revalidating an unauthenticated response using an authenticated connection does not ensure the integrity of the response.
This specification registers the following well known URI [RFC5785]:  URI Suffix:
Section 2.3 of RFC 8164  Related Information: 4.
Security Indicators User agents MUST NOT provide any special security indicators when an "http" resource is acquired using TLS.
In particular, indicators that might suggest the same level of security as "https" MUST NOT be used (e.g., a "lock device").
Downgrade Attacks A downgrade attack against the negotiation for TLS is possible.
For example, because the "Alt Svc" header field [RFC7838] likely appears in an unauthenticated and unencrypted channel, it is subject to downgrade by network attackers.
In its simplest form, an attacker that wants the connection to remain in the clear need only strip the "Alt Svc" header field from responses.
Privacy Considerations Cached alternative services can be used to track clients over time, e.g., using a user specific hostname.
Clearing the cache reduces the ability of servers to track clients; therefore, clients MUST clear cached alternative service information when clearing other origin  based state (i.e., cookies).
Confusion regarding Request Scheme HTTP implementations and applications sometimes use ambient signals to determine if a request is for an "https" resource; for example, they might look for TLS on the stack or a server port number of 443.
This might be due to expected limitations in the protocol (the most common HTTP/1.1 request form does not carry an explicit indication of the URI scheme, and the resource might have been developed assuming HTTP/1.1), or it may be because of how the server and application are implemented (often, they are two separate entities, with a variety of possible interfaces between them).
Any security decisions based upon this information could be misled by the deployment of this specification, because it violates the assumption that the use of TLS (or port 443) means that the client is accessing an HTTPS URI and operating in the security context implied by HTTPS.
Therefore, server implementers and administrators need to carefully examine the use of such signals before deploying this specification.
This specification requires that a server send both an alternative service advertisement and host content in a well known location to send HTTP requests over TLS.
Servers SHOULD take suitable measures to ensure that the content of the well known resource remains under their control.
Likewise, because the "Alt Svc" header field is used to describe policies across an entire origin, servers SHOULD NOT permit user content to set or modify the value of this header.
