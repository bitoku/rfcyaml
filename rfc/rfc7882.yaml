- title: __initial_text__
  contents:
  - '     Seamless Bidirectional Forwarding Detection (S-BFD) Use Cases

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes various use cases for Seamless Bidirectional\n\
    \   Forwarding Detection (S-BFD) and provides requirements such that\n   protocol\
    \ mechanisms allow for simplified detection of forwarding\n   failures.\n   These\
    \ use cases support S-BFD, which is a simplified mechanism for\n   using BFD with\
    \ a large proportion of negotiation aspects eliminated,\n   accelerating the establishment\
    \ of a BFD session.  The benefits of\n   S-BFD include quick provisioning, as\
    \ well as improved control and\n   flexibility for network nodes initiating path\
    \ monitoring.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7882.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Terminology ................................................3\n  \
    \ 2. Introduction to Seamless BFD ....................................4\n   3.\
    \ Use Cases .......................................................5\n      3.1.\
    \ Unidirectional Forwarding Path Validation ..................5\n      3.2. Validation\
    \ of the Forwarding Path prior to\n           Switching Traffic ..........................................6\n\
    \      3.3. Centralized Traffic Engineering ............................7\n  \
    \    3.4. BFD in Centralized Segment Routing .........................8\n    \
    \  3.5. Efficient BFD Operation under Resource Constraints .........8\n      3.6.\
    \ BFD for Anycast Addresses ..................................8\n      3.7. BFD\
    \ Fault Isolation ........................................9\n      3.8. Multiple\
    \ BFD Sessions to the Same Target Node ..............9\n      3.9. An MPLS BFD\
    \ Session per ECMP Path .........................10\n   4. Detailed Requirements\
    \ for Seamless BFD .........................11\n   5. Security Considerations\
    \ ........................................12\n   6. References .....................................................12\n\
    \      6.1. Normative References ......................................12\n  \
    \    6.2. Informative References ....................................13\n   Acknowledgements\
    \ ..................................................15\n   Contributors ......................................................15\n\
    \   Authors' Addresses ................................................15\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Bidirectional Forwarding Detection (BFD), as defined in\
    \ [RFC5880], is\n   a lightweight protocol used to detect forwarding failures.\
    \  Various\n   protocols, applications, and clients rely on BFD for failure\n\
    \   detection.  Even though the protocol is lightweight and simple, there\n  \
    \ are certain use cases where faster setup of sessions and faster\n   continuity\
    \ checks of the data-forwarding paths are necessary.  This\n   document identifies\
    \ these use cases and consequent requirements, such\n   that enhancements and\
    \ extensions result in a Seamless BFD (S-BFD)\n   protocol.\n   BFD is a simple\
    \ and lightweight \"Hello\" protocol to detect data-plane\n   failures.  With\
    \ dynamic provisioning of forwarding paths on a large\n   scale, establishing\
    \ BFD sessions for each of those paths not only\n   creates operational complexity\
    \ but also causes undesirable delay in\n   establishing or deleting sessions.\
    \  The existing session\n   establishment mechanism of the BFD protocol has to\
    \ be enhanced in\n   order to minimize the time for the session to come up to\
    \ validate the\n   forwarding path.\n   This document specifically identifies\
    \ various use cases and\n   corresponding requirements in order to enhance BFD\
    \ and other\n   supporting protocols.  Specifically, one key goal is removing\
    \ the\n   time delay (i.e., the \"seam\") between when a network node wants to\n\
    \   perform a continuity test and when the node completes that continuity\n  \
    \ test.  Consequently, \"Seamless BFD\" (S-BFD) has been chosen as the\n   name\
    \ for this mechanism.\n   While the identified requirements could meet various\
    \ use cases, it is\n   outside the scope of this document to identify all of the\
    \ possible\n   and necessary requirements.  Solutions related to the identified\
    \ use\n   cases and protocol-specific enhancements or proposals are outside the\n\
    \   scope of this document as well.  Protocol definitions to support\n   these\
    \ use cases can be found in [RFC7880] and [RFC7881].\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The reader is expected to be familiar with the BFD [RFC5880],\
    \ IP\n   [RFC791] [RFC2460], MPLS [RFC3031], and Segment Routing [SR-ARCH]\n \
    \  terms and protocol constructs.\n   The key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be\
    \ interpreted as described in\n   [RFC2119].\n"
- title: 2.  Introduction to Seamless BFD
  contents:
  - "2.  Introduction to Seamless BFD\n   BFD, as defined in [RFC5880], requires two\
    \ network nodes to exchange\n   locally allocated discriminators.  These discriminators\
    \ enable the\n   identification of the sender and the receiver of BFD packets\
    \ over the\n   particular session.  Subsequently, BFD performs proactive continuity\n\
    \   monitoring of the forwarding path between the two.  Several\n   specifications\
    \ describe BFD's multiple deployment uses:\n   o  [RFC5881] defines BFD over IPv4\
    \ and IPv6 for single IP hops.\n   o  [RFC5883] defines BFD over multi-hop paths.\n\
    \   o  [RFC5884] defines BFD for MPLS Label Switched Paths (LSPs).\n   o  [RFC5885]\
    \ defines BFD for MPLS Pseudowires (PWs).\n   Currently, BFD is best suited for\
    \ verifying that two endpoints are\n   mutually reachable or that an existing\
    \ connection continues to be up\n   and alive.  In order for BFD to be able to\
    \ initially verify that a\n   connection is valid and that it connects the expected\
    \ set of\n   endpoints, it is necessary to provide each endpoint with the\n  \
    \ discriminators associated with the connection at each endpoint prior\n   to\
    \ initiating BFD sessions.  The discriminators are used to verify\n   that the\
    \ connection is up and valid.  Currently, the exchange of\n   discriminators and\
    \ the demultiplexing of the initial BFD packets are\n   application dependent.\n\
    \   If this information is already known to the endpoints of a potential\n   BFD\
    \ session, the initial handshake including an exchange of\n   discriminators is\
    \ unnecessary, and it is possible for the endpoints\n   to begin BFD messaging\
    \ seamlessly.  A key objective of the S-BFD use\n   cases described in this document\
    \ is to avoid needing to exchange the\n   initial packets before the BFD session\
    \ can be established, with the\n   goal of getting to the established state more\
    \ quickly; in other\n   words, the initial exchange of discriminator information\
    \ is an\n   unnecessary extra step that may be avoided for these cases.\n   In\
    \ a given scenario, an entity (such as an operator or a centralized\n   controller)\
    \ determines a set of network entities to which BFD\n   sessions might need to\
    \ be established.  In traditional BFD, each of\n   those network entities chooses\
    \ a BFD Discriminator for each BFD\n   session that the entity will participate\
    \ in (see Section 6.3 of\n   [RFC5880]).  However, a key goal of S-BFD is to provide\
    \ operational\n   simplification.  In this context, for S-BFD, each of those network\n\
    \   entities is assigned one or more BFD Discriminators, and those\n   network\
    \ entities are allowed to use one Discriminator value for\n   multiple sessions.\
    \  Therefore, there may be only one or a few\n   discriminators assigned to a\
    \ node.  These network entities will\n   create an S-BFD listener session instance\
    \ that listens for incoming\n   BFD Control packets.  When the mappings between\
    \ specific network\n   entities and their corresponding BFD Discriminators are\
    \ known to\n   other network nodes belonging to the same administrative domain,\n\
    \   then, without having received any BFD packets from a particular\n   target,\
    \ a network entity in this network is able to send a BFD\n   Control packet to\
    \ the target's assigned discriminator in the\n   Your Discriminator field.  The\
    \ target network node, upon reception of\n   such a BFD Control packet, will transmit\
    \ a response BFD Control\n   packet back to the sender.\n"
- title: 3.  Use Cases
  contents:
  - "3.  Use Cases\n   As per the BFD protocol [RFC5880], BFD sessions are established\
    \ using\n   a handshake mechanism prior to validating the forwarding path.  This\n\
    \   section outlines some use cases where the existing mechanism may not\n   be\
    \ able to satisfy the requirements identified.  In addition, some of\n   the use\
    \ cases also stress the need for expedited BFD session\n   establishment while\
    \ preserving the benefits of forwarding failure\n   detection using existing BFD\
    \ mechanisms.  Both of these high-level\n   goals result in the S-BFD use cases\
    \ outlined in this document.\n"
- title: 3.1.  Unidirectional Forwarding Path Validation
  contents:
  - "3.1.  Unidirectional Forwarding Path Validation\n   Even though bidirectional\
    \ verification of forwarding paths is useful,\n   there are scenarios where verification\
    \ is only required in one\n   direction between a pair of nodes.  One such case\
    \ is when a static\n   route uses BFD to validate reachability to the next-hop\
    \ IP router.\n   In this case, the static route is established from one network\
    \ entity\n   to another.  The requirement in this case is only to validate the\n\
    \   forwarding path for that statically established unidirectional path.\n   Validation\
    \ of the forwarding path in the direction of the target\n   entity to the originating\
    \ entity is not required in this scenario.\n   Many LSPs have the same unidirectional\
    \ characteristics and\n   unidirectional validation requirements.  Such LSPs are\
    \ common in\n   Segment Routing and LDP-based MPLS networks.  A final example\
    \ is when\n   a unidirectional tunnel uses BFD to validate the reachability of\
    \ an\n   egress node.\n   Additionally, validation of the unidirectional path\
    \ has operational\n   implications.  If traditional BFD is to be used, the target\
    \ network\n   entity, as well as an initiator, has to be provisioned, even though\n\
    \   reverse-path validation with the BFD session is not required.\n   However,\
    \ in the case of unidirectional BFD, there is no need for\n   provisioning on\
    \ the target network entity -- only on the source\n   entity.\n   In this use\
    \ case, a BFD session could be established in a single\n   direction.  When the\
    \ target network entity receives the packet, it\n   identifies the packet as BFD\
    \ in an application-specific manner (for\n   example, a destination UDP port number).\
    \  Subsequently, the BFD\n   module processes the packet, using the Your Discriminator\
    \ value as\n   context.  Then, the network entity sends a response to the\n  \
    \ originator.  This does not necessitate the requirement for\n   establishment\
    \ of a bidirectional session; hence, the two-way\n   handshake to exchange discriminators\
    \ is not needed.  The target node\n   does not need to know the My Discriminator\
    \ value of the source node.\n   Thus, in this use case a requirement for BFD is\
    \ to enable session\n   establishment from the source network entity to the target\
    \ network\n   entity without the need to have a session (and state) for the reverse\n\
    \   direction.  Further, another requirement is that the BFD response\n   from\
    \ the target back to the sender can take any (in-band or\n   out-of-band) path.\
    \  The BFD module in the target network entity (for\n   the BFD session), upon\
    \ receipt of a BFD packet, starts processing the\n   BFD packet based on the discriminator\
    \ received.  The source network\n   entity can therefore establish a unidirectional\
    \ BFD session without\n   the bidirectional handshake and exchange of discriminators\
    \ for\n   session establishment.\n"
- title: 3.2.  Validation of the Forwarding Path prior to Switching Traffic
  contents:
  - "3.2.  Validation of the Forwarding Path prior to Switching Traffic\n   In this\
    \ use case, BFD is used to verify reachability before sending\n   traffic via\
    \ a path/LSP.  This comes at a cost: traffic is prevented\n   from using the path/LSP\
    \ until BFD is able to validate reachability;\n   this could take seconds due\
    \ to BFD session bring-up sequences\n   [RFC5880], LSP Ping bootstrapping [RFC5884],\
    \ etc.  This use case\n   would be better supported by eliminating the need for\
    \ the initial BFD\n   session negotiation.\n   All it takes to be able to send\
    \ BFD packets to a target and for the\n   target to properly demultiplex these\
    \ packets is for the source\n   network entities to know what Discriminator values\
    \ will be used for\n   the session.  This is also the case for S-BFD: the three-way\n\
    \   handshake mechanism is eliminated during the bootstrapping of BFD\n   sessions.\
    \  However, this information is required at each entity to\n   verify that BFD\
    \ messages are being received from the expected\n   endpoints; hence, the handshake\
    \ mechanism serves no purpose.\n   Elimination of the unnecessary handshake mechanism\
    \ allows for faster\n   reachability validation of BFD provisioned paths/LSPs.\n\
    \   In addition, it is expected that some MPLS technologies will require\n   traffic-engineered\
    \ LSPs to be created dynamically, perhaps driven by\n   external applications,\
    \ as, for example, in Software-Defined\n   Networking (SDN).  It will be desirable\
    \ to perform BFD validation as\n   soon as the LSPs are created, so as to use\
    \ them.\n   In order to support this use case, an S-BFD session is established\n\
    \   without the need for session negotiation and exchange of\n   discriminators.\n"
- title: 3.3.  Centralized Traffic Engineering
  contents:
  - "3.3.  Centralized Traffic Engineering\n   Various technologies in the SDN domain\
    \ that involve controller-based\n   networks have evolved such that the intelligence,\
    \ traditionally\n   placed in a distributed and dynamic control plane, is separated\
    \ from\n   the networking entities themselves; instead, it resides in a\n   (logically)\
    \ centralized place.  There are various controllers that\n   perform the function\
    \ of establishing forwarding paths for the data\n   flow.  Traffic engineering\
    \ is one important function, where the path\n   of the traffic flow is engineered,\
    \ depending upon various attributes\n   and constraints of the traffic paths as\
    \ well as the network state.\n   When the intelligence of the network resides\
    \ in a centralized entity,\n   the ability to manage and maintain the dynamic\
    \ network, and its\n   multiple data paths and node reachability, becomes a challenge.\
    \  One\n   way to ensure that the forwarding paths are valid and working is done\n\
    \   by validation using BFD.  When traffic-engineered tunnels are\n   created,\
    \ it is operationally critical to ensure that the forwarding\n   paths are working,\
    \ prior to switching the traffic onto the engineered\n   tunnels.  In the absence\
    \ of distributed control-plane protocols, it\n   may be desirable to verify any\
    \ arbitrary forwarding path in the\n   network.  With tunnels being engineered\
    \ by a centralized entity, when\n   the network state changes, traffic has to\
    \ be switched with minimum\n   latency and without black-holing of the data.\n\
    \   It is highly desirable in this centralized traffic-engineering use\n   case\
    \ that the traditional BFD session establishment and validation of\n   the forwarding\
    \ path do not become a bottleneck.  If the controller or\n   other centralized\
    \ entity is able to very rapidly verify the\n   forwarding path of a traffic-engineered\
    \ tunnel, it could steer the\n   traffic onto the traffic-engineered tunnel very\
    \ quickly, thus\n   minimizing adverse effects on a service.  This is even more\
    \ useful\n   and necessary when the scale of the network and the number of\n \
    \  traffic-engineered tunnels grow.\n   The cost associated with the time required\
    \ for BFD session\n   negotiation and establishment of BFD sessions to identify\
    \ valid paths\n   is very high when providing network redundancy is a critical\
    \ issue.\n"
- title: 3.4.  BFD in Centralized Segment Routing
  contents:
  - "3.4.  BFD in Centralized Segment Routing\n   A monitoring technique for a Segment\
    \ Routing network based on a\n   centralized controller is described in [SR-MPLS].\
    \  Specific\n   Operations, Administration, and Maintenance (OAM) requirements\
    \ for\n   Segment Routing are captured in [SR-OAM-REQS].  In validating this\n\
    \   use case, one of the requirements is to ensure that the BFD packet's\n   behavior\
    \ is according to the monitoring specified for the segment and\n   that the packet\
    \ is U-turned at the expected node.  This criterion\n   ensures the continuity\
    \ check to the adjacent Segment Identifier.\n   To support this use case, the\
    \ operational requirement is for BFD,\n   initiated from a centralized controller,\
    \ to perform liveness\n   detection for any given segment in its domain.\n"
- title: 3.5.  Efficient BFD Operation under Resource Constraints
  contents:
  - "3.5.  Efficient BFD Operation under Resource Constraints\n   When BFD sessions\
    \ are being set up, torn down, or modified (i.e.,\n   when parameters such as\
    \ intervals and multipliers are being\n   modified), BFD requires additional packets,\
    \ other than scheduled\n   packet transmissions, to complete the negotiation procedures\
    \ (i.e.,\n   Poll (P) bits and Final (F) bits; see Section 4.1 of [RFC5880]).\n\
    \   There are scenarios where network resources are constrained: a node\n   may\
    \ require BFD to monitor a very large number of paths, or BFD may\n   need to\
    \ operate in low-powered and traffic-sensitive networks; these\n   include microwave\
    \ systems, low-powered nanocells, and others.  In\n   these scenarios, it is desirable\
    \ for BFD to slow down, speed up,\n   stop, or resume at will and with a minimal\
    \ number of additional BFD\n   packets exchanged to modify the session or establish\
    \ a new one.\n   The established BFD session parameters, and such attributes as\n\
    \   transmission interval and receiver interval, need to be modifiable\n   without\
    \ changing the state of the session.\n"
- title: 3.6.  BFD for Anycast Addresses
  contents:
  - "3.6.  BFD for Anycast Addresses\n   The BFD protocol requires two endpoints to\
    \ host BFD sessions, both\n   sending packets to each other.  This BFD model does\
    \ not fit well with\n   anycast address monitoring, as BFD packets transmitted\
    \ from a network\n   node to an anycast address will reach only one of potentially\
    \ many\n   network nodes hosting the anycast address.\n   This use case verifies\
    \ that a source node can send a packet to an\n   anycast address and that the\
    \ target node to which the packet is\n   delivered can send a response packet\
    \ to the source node.  Traditional\n   BFD cannot fulfill this requirement, since\
    \ it does not provide for a\n   set of BFD agents to collectively form one endpoint\
    \ of a BFD session.\n   The concept of a \"target listener\" in S-BFD fulfills\
    \ this\n   requirement.\n   To support this use case, the BFD sender transmits\
    \ BFD packets, which\n   are received by any of the nodes hosting the anycast\
    \ address to which\n   the BFD packets are being sent.  The anycast target that\
    \ receives the\n   BFD packet responds.  This use case does not imply BFD session\n\
    \   establishment with every node hosting the anycast address.\n   Consequently,\
    \ in this anycast use case, target nodes that do not\n   happen to receive any\
    \ of the BFD packets do not need to maintain any\n   state, and the source node\
    \ does not need to maintain separate state\n   for each target node.\n"
- title: 3.7.  BFD Fault Isolation
  contents:
  - "3.7.  BFD Fault Isolation\n   BFD for multi-hop paths [RFC5883] and BFD for MPLS\
    \ LSPs [RFC5884]\n   perform end-to-end validation, traversing multiple network\
    \ nodes.\n   BFD has been designed to declare a failure to receive some number\
    \ of\n   consecutive packets.  This failure can be caused by a fault anywhere\n\
    \   along these paths.  Fast failure detection allows for rapid fault\n   detection\
    \ and consequent rapid path recovery procedures.  However,\n   operators often\
    \ have to follow up, manually or automatically, to\n   attempt to identify and\
    \ localize the fault that caused BFD sessions\n   to fail (i.e., fault isolation).\
    \  If Equal-Cost Multipath (ECMP) is\n   used, the usage of other tools to isolate\
    \ the fault (e.g.,\n   traceroute) may cause the packets to traverse a different\
    \ path\n   through the network.  In addition, the longer it takes from the time\n\
    \   of BFD session failure to the time that fault isolation begins, the\n   more\
    \ likely the fault will not be isolated (e.g., a fault may be\n   corrected via\
    \ rerouting or some other means during that time).  If\n   BFD had built-in fault-isolation\
    \ capability, fault isolation would be\n   triggered when the fault was first\
    \ detected.  This embedded fault\n   isolation would be more effective (i.e.,\
    \ faults would be detected\n   sooner) if those BFD fault-isolation packets were\
    \ load-balanced in\n   the same way as the BFD packets that were dropped.\n  \
    \ This use case describes S-BFD fault-isolation capabilities, utilizing\n   a\
    \ TTL field (e.g., as described in Section 5.1.1 of [RFC7881]) or\n   using fields\
    \ that indicate status.\n"
- title: 3.8.  Multiple BFD Sessions to the Same Target Node
  contents:
  - "3.8.  Multiple BFD Sessions to the Same Target Node\n   BFD is capable of providing\
    \ very fast failure detection, as relevant\n   network nodes continuously transmit\
    \ BFD packets at the negotiated\n   rate.  If BFD packet transmission is interrupted,\
    \ even for a very\n   short period of time, BFD can declare a failure irrespective\
    \ of path\n   liveness.  On a system where BFD is running, it is possible for\n\
    \   certain events to (intentionally or unintentionally) cause a brief\n   interruption\
    \ of BFD packet transmissions.  With distributed\n   architectures of BFD implementations,\
    \ this case can be prevented.\n   This use case is for an S-BFD node running multiple\
    \ BFD sessions to\n   the same target node, with those sessions hosted on different\
    \ system\n   modules (e.g., in different CPU instances).  This can reduce false\n\
    \   failures, resulting in a more stable network.\n   To support this use case,\
    \ a mapping between the multiple\n   discriminators on a single system and the\
    \ specific entity within that\n   system is required.\n"
- title: 3.9.  An MPLS BFD Session per ECMP Path
  contents:
  - "3.9.  An MPLS BFD Session per ECMP Path\n   BFD for MPLS LSPs, defined in [RFC5884],\
    \ describes procedures for\n   running BFD as an LSP in-band continuity check\
    \ mechanism by using\n   MPLS Echo Request messages [RFC4379] to bootstrap the\
    \ BFD session on\n   the target (i.e., egress) node.  Section 4 of [RFC5884] also\n\
    \   describes the possibility of running multiple BFD sessions per\n   alternative\
    \ of LSPs.  [RFC7726] further clarifies the procedures, for\n   both ingress and\
    \ egress nodes, regarding how to bootstrap, maintain,\n   and remove multiple\
    \ BFD sessions for the same <MPLS LSP, FEC> tuple\n   (\"FEC\" means Forwarding\
    \ Equivalence Class).  However, this mechanism\n   still requires the use of MPLS\
    \ LSP Ping for bootstrapping,\n   round trips for initialization, and keeping\
    \ state at the receiver.\n   In the presence of ECMP within an MPLS LSP, it may\
    \ be desirable to\n   run in-band monitoring that exercises every path of this\
    \ ECMP.\n   Otherwise, there will be scenarios where an in-band BFD session\n\
    \   remains up through one path but traffic is black-holing over another\n   path.\
    \  A BFD session per ECMP path of an LSP requires the definition\n   of procedures\
    \ that update [RFC5884] in terms of how to bootstrap and\n   maintain the correct\
    \ set of BFD sessions on the egress node.\n   However, for traditional BFD, that\
    \ requires the constant use of MPLS\n   Echo Request messages to create and delete\
    \ BFD sessions on the egress\n   node when ECMP paths and/or corresponding load-balance\
    \ hash keys\n   change.  If a BFD session over any paths of the LSP can be\n \
    \  instantiated, stopped, and resumed without requiring additional\n   procedures\
    \ for bootstrapping via an MPLS Echo Request message, it\n   would greatly simplify\
    \ both implementations and operations and\n   would benefit network devices, as\
    \ less processing would be required\n   by them.\n   To support this requirement,\
    \ multiple S-BFD sessions need to be\n   established over different ECMP paths\
    \ between the same pair of source\n   and target nodes.\n"
- title: 4.  Detailed Requirements for Seamless BFD
  contents:
  - "4.  Detailed Requirements for Seamless BFD\n   REQ 1:   Upon receipt of an S-BFD\
    \ packet, a target network entity\n            (for the S-BFD session) MUST process\
    \ the packet based on the\n            discriminator received in the BFD packet.\
    \  If the S-BFD\n            context is found, the target network entity MUST\
    \ be able to\n            send a response.\n   REQ 2:   The source network entity\
    \ MUST be able to establish a\n            unidirectional S-BFD session without\
    \ the bidirectional\n            handshake of discriminators for session establishment.\n\
    \   REQ 3:   The S-BFD session MUST be able to be established without the\n  \
    \          need for the exchange of discriminators during session\n          \
    \  negotiation.\n   REQ 4:   In a Segment Routed network, S-BFD MUST be able to\
    \ perform\n            liveness detection initiated from a centralized controller\n\
    \            for any given segment in its domain.\n   REQ 5:   The established\
    \ S-BFD session parameters and attributes,\n            such as transmission interval\
    \ and reception interval, MUST\n            be modifiable without changing the\
    \ state of the session.\n   REQ 6:   An S-BFD source network entity MUST be able\
    \ to send Control\n            packets to an anycast address.  These packets are\
    \ received\n            and processed by any node hosting the anycast address.\
    \  The\n            S-BFD entity MUST be able to receive responses to S-BFD\n\
    \            Control packets from any of these anycast nodes, without\n      \
    \      establishing a separate S-BFD session with every node\n            hosting\
    \ the anycast address.\n   REQ 7:   S-BFD SHOULD support fault-isolation capability,\
    \ which MAY\n            be triggered when a fault is encountered.\n   REQ 8:\
    \   S-BFD SHOULD be able to establish multiple sessions between\n            the\
    \ same pair of source and target nodes.  This requirement\n            enables\
    \ but does not guarantee the ability to monitor\n            divergent paths in\
    \ ECMP environments.  It also provides\n            resiliency in distributed\
    \ router architectures.  The mapping\n            between BFD Discriminators and\
    \ particular entities (e.g.,\n            ECMP paths, line cards) is out of scope\
    \ for the S-BFD\n            protocol.\n   REQ 9:   The S-BFD protocol MUST provide\
    \ mechanisms for loop\n            detection and prevention, protecting against\
    \ malicious\n            attacks attempting to create packet loops.\n   REQ 10:\
    \  S-BFD MUST incorporate robust security protections against\n            impersonators,\
    \ malicious actors, and various active and\n            passive attacks.  The\
    \ simple and accelerated establishment\n            of an S-BFD session should\
    \ not negatively affect security.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   This document details use cases for S-BFD and\
    \ identifies various\n   associated requirements.  Some of these requirements\
    \ are security\n   related.  The use cases described herein do not expose a system\
    \ to\n   abuse or additional security risks.  Since some negotiation aspects\n\
    \   are eliminated, a misconfiguration can result in S-BFD packets being\n   sent\
    \ to an incorrect node.  If this receiving node runs S-BFD, the\n   packet will\
    \ be discarded due to discriminator mismatch.  If the node\n   does not run S-BFD,\
    \ the packet will be naturally discarded.\n   The proposed new protocols, extensions,\
    \ and enhancements for S-BFD\n   supporting these use cases and realizing these\
    \ requirements will\n   address associated security considerations.  S-BFD should\
    \ not have\n   reduced security capabilities as compared to traditional BFD.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC5880]  Katz, D. and D. Ward, \"Bidirectional Forwarding Detection\n  \
    \            (BFD)\", RFC 5880, DOI 10.17487/RFC5880, June 2010,\n           \
    \   <http://www.rfc-editor.org/info/rfc5880>.\n   [RFC5881]  Katz, D. and D. Ward,\
    \ \"Bidirectional Forwarding Detection\n              (BFD) for IPv4 and IPv6\
    \ (Single Hop)\", RFC 5881,\n              DOI 10.17487/RFC5881, June 2010,\n\
    \              <http://www.rfc-editor.org/info/rfc5881>.\n   [RFC5883]  Katz,\
    \ D. and D. Ward, \"Bidirectional Forwarding Detection\n              (BFD) for\
    \ Multihop Paths\", RFC 5883, DOI 10.17487/RFC5883,\n              June 2010,\
    \ <http://www.rfc-editor.org/info/rfc5883>.\n   [RFC5884]  Aggarwal, R., Kompella,\
    \ K., Nadeau, T., and G. Swallow,\n              \"Bidirectional Forwarding Detection\
    \ (BFD) for MPLS Label\n              Switched Paths (LSPs)\", RFC 5884, DOI 10.17487/RFC5884,\n\
    \              June 2010, <http://www.rfc-editor.org/info/rfc5884>.\n   [RFC5885]\
    \  Nadeau, T., Ed., and C. Pignataro, Ed., \"Bidirectional\n              Forwarding\
    \ Detection (BFD) for the Pseudowire Virtual\n              Circuit Connectivity\
    \ Verification (VCCV)\", RFC 5885,\n              DOI 10.17487/RFC5885, June 2010,\n\
    \              <http://www.rfc-editor.org/info/rfc5885>.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [RFC791]   Postel, J., \"Internet Protocol\"\
    , STD 5, RFC 791,\n              DOI 10.17487/RFC791, September 1981,\n      \
    \        <http://www.rfc-editor.org/info/rfc791>.\n   [RFC2460]  Deering, S. and\
    \ R. Hinden, \"Internet Protocol, Version 6\n              (IPv6) Specification\"\
    , RFC 2460, DOI 10.17487/RFC2460,\n              December 1998, <http://www.rfc-editor.org/info/rfc2460>.\n\
    \   [RFC3031]  Rosen, E., Viswanathan, A., and R. Callon, \"Multiprotocol\n  \
    \            Label Switching Architecture\", RFC 3031,\n              DOI 10.17487/RFC3031,\
    \ January 2001,\n              <http://www.rfc-editor.org/info/rfc3031>.\n   [RFC4379]\
    \  Kompella, K. and G. Swallow, \"Detecting Multi-Protocol\n              Label\
    \ Switched (MPLS) Data Plane Failures\", RFC 4379,\n              DOI 10.17487/RFC4379,\
    \ February 2006,\n              <http://www.rfc-editor.org/info/rfc4379>.\n  \
    \ [RFC7726]  Govindan, V., Rajaraman, K., Mirsky, G., Akiya, N., and S.\n    \
    \          Aldrin, \"Clarifying Procedures for Establishing BFD\n            \
    \  Sessions for MPLS Label Switched Paths (LSPs)\", RFC 7726,\n              DOI\
    \ 10.17487/RFC7726, January 2016,\n              <http://www.rfc-editor.org/info/rfc7726>.\n\
    \   [RFC7880]  Pignataro, C., Ward, D., Akiya, N., Bhatia, M., and S.\n      \
    \        Pallagatti, \"Seamless Bidirectional Forwarding Detection\n         \
    \     (S-BFD)\", RFC 7880, DOI 10.17487/RFC7880, July 2016,\n              <http://www.rfc-editor.org/info/rfc7880>.\n\
    \   [RFC7881]  Pignataro, C., Ward, D., and N. Akiya, \"Seamless\n           \
    \   Bidirectional Forwarding Detection (S-BFD) for IPv4, IPv6,\n             \
    \ and MPLS\", RFC 7881, DOI 10.17487/RFC7881, July 2016,\n              <http://www.rfc-editor.org/info/rfc7881>.\n\
    \   [SR-ARCH]  Filsfils, C., Ed., Previdi, S., Ed., Decraene, B.,\n          \
    \    Litkowski, S., and R. Shakir, \"Segment Routing\n              Architecture\"\
    , Work in Progress,\n              draft-ietf-spring-segment-routing-09, July\
    \ 2016.\n   [SR-MPLS]  Geib, R., Ed., Filsfils, C., Pignataro, C., Ed., and N.\n\
    \              Kumar, \"A Scalable and Topology-Aware MPLS Dataplane\n       \
    \       Monitoring System\", Work in Progress,\n              draft-ietf-spring-oam-usecase-03,\
    \ April 2016.\n   [SR-OAM-REQS]\n              Kumar, N., Pignataro, C., Akiya,\
    \ N., Geib, R., Mirsky, G.,\n              and S. Litkowski, \"OAM Requirements\
    \ for Segment Routing\n              Network\", Work in Progress,\n          \
    \    draft-ietf-spring-sr-oam-requirement-02, July 2016.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to thank Tobias Gondrom and Eric\
    \ Gray for\n   their insightful and useful comments.  The authors appreciate the\n\
    \   thorough review and comments provided by Dale R. Worley.\n"
- title: Contributors
  contents:
  - "Contributors\n   The following are key contributors to this document:\n     \
    \ Manav Bhatia, Ionos Networks\n      Satoru Matsushima, Softbank\n      Glenn\
    \ Hayden, ATT\n      Santosh P K\n      Mach Chen, Huawei\n      Nobo Akiya, Big\
    \ Switch Networks\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Sam Aldrin\n   Google, Inc.\n   Email: aldrin.ietf@gmail.com\n\
    \   Carlos Pignataro\n   Cisco Systems, Inc.\n   Email: cpignata@cisco.com\n \
    \  Greg Mirsky\n   Ericsson\n   Email: gregory.mirsky@ericsson.com\n   Nagendra\
    \ Kumar\n   Cisco Systems, Inc.\n   Email: naikumar@cisco.com\n"
