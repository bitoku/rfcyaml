- title: __initial_text__
  contents:
  - '               GZIP file format specification version 4.3

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n   The IESG takes no position on the validity\
    \ of any Intellectual\n   Property Rights statements contained in this document.\n"
- title: Notices
  contents:
  - "Notices\n   Copyright (c) 1996 L. Peter Deutsch\n   Permission is granted to\
    \ copy and distribute this document for any\n   purpose and without charge, including\
    \ translations into other\n   languages and incorporation into compilations, provided\
    \ that the\n   copyright notice and this notice are preserved, and that any\n\
    \   substantive changes or deletions from the original are clearly\n   marked.\n\
    \   A pointer to the latest version of this and related documentation in\n   HTML\
    \ format can be found at the URL\n   <ftp://ftp.uu.net/graphics/png/documents/zlib/zdoc-index.html>.\n"
- title: Abstract
  contents:
  - "Abstract\n   This specification defines a lossless compressed data format that\
    \ is\n   compatible with the widely used GZIP utility.  The format includes a\n\
    \   cyclic redundancy check value for detecting data corruption.  The\n   format\
    \ presently uses the DEFLATE method of compression but can be\n   easily extended\
    \ to use other compression methods.  The format can be\n   implemented readily\
    \ in a manner not covered by patents.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ...................................................\
    \ 2\n      1.1. Purpose ................................................... 2\n\
    \      1.2. Intended audience ......................................... 3\n  \
    \    1.3. Scope ..................................................... 3\n    \
    \  1.4. Compliance ................................................ 3\n      1.5.\
    \ Definitions of terms and conventions used ................. 3\n      1.6. Changes\
    \ from previous versions ............................ 3\n   2. Detailed specification\
    \ ......................................... 4\n      2.1. Overall conventions\
    \ ....................................... 4\n      2.2. File format ...............................................\
    \ 5\n      2.3. Member format ............................................. 5\n\
    \          2.3.1. Member header and trailer ........................... 6\n  \
    \            2.3.1.1. Extra field ................................... 8\n    \
    \          2.3.1.2. Compliance .................................... 9\n      3.\
    \ References .................................................. 9\n      4. Security\
    \ Considerations .................................... 10\n      5. Acknowledgements\
    \ ........................................... 10\n      6. Author's Address ...........................................\
    \ 10\n      7. Appendix: Jean-Loup Gailly's gzip utility .................. 11\n\
    \      8. Appendix: Sample CRC Code .................................. 11\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   1.1. Purpose\n      The purpose of this specification is\
    \ to define a lossless\n      compressed data format that:\n          * Is independent\
    \ of CPU type, operating system, file system,\n            and character set,\
    \ and hence can be used for interchange;\n          * Can compress or decompress\
    \ a data stream (as opposed to a\n            randomly accessible file) to produce\
    \ another data stream,\n            using only an a priori bounded amount of intermediate\n\
    \            storage, and hence can be used in data communications or\n      \
    \      similar structures such as Unix filters;\n          * Compresses data with\
    \ efficiency comparable to the best\n            currently available general-purpose\
    \ compression methods,\n            and in particular considerably better than\
    \ the \"compress\"\n            program;\n          * Can be implemented readily\
    \ in a manner not covered by\n            patents, and hence can be practiced\
    \ freely;\n          * Is compatible with the file format produced by the current\n\
    \            widely used gzip utility, in that conforming decompressors\n    \
    \        will be able to read data produced by the existing gzip\n           \
    \ compressor.\n      The data format defined by this specification does not attempt\
    \ to:\n          * Provide random access to compressed data;\n          * Compress\
    \ specialized data (e.g., raster graphics) as well as\n            the best currently\
    \ available specialized algorithms.\n   1.2. Intended audience\n      This specification\
    \ is intended for use by implementors of software\n      to compress data into\
    \ gzip format and/or decompress data from gzip\n      format.\n      The text\
    \ of the specification assumes a basic background in\n      programming at the\
    \ level of bits and other primitive data\n      representations.\n   1.3. Scope\n\
    \      The specification specifies a compression method and a file format\n  \
    \    (the latter assuming only that a file can store a sequence of\n      arbitrary\
    \ bytes).  It does not specify any particular interface to\n      a file system\
    \ or anything about character sets or encodings\n      (except for file names\
    \ and comments, which are optional).\n   1.4. Compliance\n      Unless otherwise\
    \ indicated below, a compliant decompressor must be\n      able to accept and\
    \ decompress any file that conforms to all the\n      specifications presented\
    \ here; a compliant compressor must produce\n      files that conform to all the\
    \ specifications presented here.  The\n      material in the appendices is not\
    \ part of the specification per se\n      and is not relevant to compliance.\n\
    \   1.5. Definitions of terms and conventions used\n      byte: 8 bits stored\
    \ or transmitted as a unit (same as an octet).\n      (For this specification,\
    \ a byte is exactly 8 bits, even on\n      machines which store a character on\
    \ a number of bits different\n      from 8.)  See below for the numbering of bits\
    \ within a byte.\n   1.6. Changes from previous versions\n      There have been\
    \ no technical changes to the gzip format since\n      version 4.1 of this specification.\
    \  In version 4.2, some\n      terminology was changed, and the sample CRC code\
    \ was rewritten for\n      clarity and to eliminate the requirement for the caller\
    \ to do pre-\n      and post-conditioning.  Version 4.3 is a conversion of the\n\
    \      specification to RFC style.\n"
- title: 2. Detailed specification
  contents:
  - "2. Detailed specification\n   2.1. Overall conventions\n      In the diagrams\
    \ below, a box like this:\n         +---+\n         |   | <-- the vertical bars\
    \ might be missing\n         +---+\n      represents one byte; a box like this:\n\
    \         +==============+\n         |              |\n         +==============+\n\
    \      represents a variable number of bytes.\n      Bytes stored within a computer\
    \ do not have a \"bit order\", since\n      they are always treated as a unit.\
    \  However, a byte considered as\n      an integer between 0 and 255 does have\
    \ a most- and least-\n      significant bit, and since we write numbers with the\
    \ most-\n      significant digit on the left, we also write bytes with the most-\n\
    \      significant bit on the left.  In the diagrams below, we number the\n  \
    \    bits of a byte so that bit 0 is the least-significant bit, i.e.,\n      the\
    \ bits are numbered:\n         +--------+\n         |76543210|\n         +--------+\n\
    \      This document does not address the issue of the order in which\n      bits\
    \ of a byte are transmitted on a bit-sequential medium, since\n      the data\
    \ format described here is byte- rather than bit-oriented.\n      Within a computer,\
    \ a number may occupy multiple bytes.  All\n      multi-byte numbers in the format\
    \ described here are stored with\n      the least-significant byte first (at the\
    \ lower memory address).\n      For example, the decimal number 520 is stored\
    \ as:\n             0        1\n         +--------+--------+\n         |00001000|00000010|\n\
    \         +--------+--------+\n          ^        ^\n          |        |\n  \
    \        |        + more significant byte = 2 x 256\n          + less significant\
    \ byte = 8\n   2.2. File format\n      A gzip file consists of a series of \"\
    members\" (compressed data\n      sets).  The format of each member is specified\
    \ in the following\n      section.  The members simply appear one after another\
    \ in the file,\n      with no additional information before, between, or after\
    \ them.\n   2.3. Member format\n      Each member has the following structure:\n\
    \         +---+---+---+---+---+---+---+---+---+---+\n         |ID1|ID2|CM |FLG|\
    \     MTIME     |XFL|OS | (more-->)\n         +---+---+---+---+---+---+---+---+---+---+\n\
    \      (if FLG.FEXTRA set)\n         +---+---+=================================+\n\
    \         | XLEN  |...XLEN bytes of \"extra field\"...| (more-->)\n         +---+---+=================================+\n\
    \      (if FLG.FNAME set)\n         +=========================================+\n\
    \         |...original file name, zero-terminated...| (more-->)\n         +=========================================+\n\
    \      (if FLG.FCOMMENT set)\n         +===================================+\n\
    \         |...file comment, zero-terminated...| (more-->)\n         +===================================+\n\
    \      (if FLG.FHCRC set)\n         +---+---+\n         | CRC16 |\n         +---+---+\n\
    \         +=======================+\n         |...compressed blocks...| (more-->)\n\
    \         +=======================+\n           0   1   2   3   4   5   6   7\n\
    \         +---+---+---+---+---+---+---+---+\n         |     CRC32     |     ISIZE\
    \     |\n         +---+---+---+---+---+---+---+---+\n      2.3.1. Member header\
    \ and trailer\n         ID1 (IDentification 1)\n         ID2 (IDentification 2)\n\
    \            These have the fixed values ID1 = 31 (0x1f, \\037), ID2 = 139\n \
    \           (0x8b, \\213), to identify the file as being in gzip format.\n   \
    \      CM (Compression Method)\n            This identifies the compression method\
    \ used in the file.  CM\n            = 0-7 are reserved.  CM = 8 denotes the \"\
    deflate\"\n            compression method, which is the one customarily used by\n\
    \            gzip and which is documented elsewhere.\n         FLG (FLaGs)\n \
    \           This flag byte is divided into individual bits as follows:\n     \
    \          bit 0   FTEXT\n               bit 1   FHCRC\n               bit 2 \
    \  FEXTRA\n               bit 3   FNAME\n               bit 4   FCOMMENT\n   \
    \            bit 5   reserved\n               bit 6   reserved\n             \
    \  bit 7   reserved\n            If FTEXT is set, the file is probably ASCII text.\
    \  This is\n            an optional indication, which the compressor may set by\n\
    \            checking a small amount of the input data to see whether any\n  \
    \          non-ASCII characters are present.  In case of doubt, FTEXT\n      \
    \      is cleared, indicating binary data. For systems which have\n          \
    \  different file formats for ascii text and binary data, the\n            decompressor\
    \ can use FTEXT to choose the appropriate format.\n            We deliberately\
    \ do not specify the algorithm used to set\n            this bit, since a compressor\
    \ always has the option of\n            leaving it cleared and a decompressor\
    \ always has the option\n            of ignoring it and letting some other program\
    \ handle issues\n            of data conversion.\n            If FHCRC is set,\
    \ a CRC16 for the gzip header is present,\n            immediately before the\
    \ compressed data. The CRC16 consists\n            of the two least significant\
    \ bytes of the CRC32 for all\n            bytes of the gzip header up to and not\
    \ including the CRC16.\n            [The FHCRC bit was never set by versions of\
    \ gzip up to\n            1.2.4, even though it was documented with a different\n\
    \            meaning in gzip 1.2.4.]\n            If FEXTRA is set, optional extra\
    \ fields are present, as\n            described in a following section.\n    \
    \        If FNAME is set, an original file name is present,\n            terminated\
    \ by a zero byte.  The name must consist of ISO\n            8859-1 (LATIN-1)\
    \ characters; on operating systems using\n            EBCDIC or any other character\
    \ set for file names, the name\n            must be translated to the ISO LATIN-1\
    \ character set.  This\n            is the original name of the file being compressed,\
    \ with any\n            directory components removed, and, if the file being\n\
    \            compressed is on a file system with case insensitive names,\n   \
    \         forced to lower case. There is no original file name if the\n      \
    \      data was compressed from a source other than a named file;\n          \
    \  for example, if the source was stdin on a Unix system, there\n            is\
    \ no file name.\n            If FCOMMENT is set, a zero-terminated file comment\
    \ is\n            present.  This comment is not interpreted; it is only\n    \
    \        intended for human consumption.  The comment must consist of\n      \
    \      ISO 8859-1 (LATIN-1) characters.  Line breaks should be\n            denoted\
    \ by a single line feed character (10 decimal).\n            Reserved FLG bits\
    \ must be zero.\n         MTIME (Modification TIME)\n            This gives the\
    \ most recent modification time of the original\n            file being compressed.\
    \  The time is in Unix format, i.e.,\n            seconds since 00:00:00 GMT,\
    \ Jan.  1, 1970.  (Note that this\n            may cause problems for MS-DOS and\
    \ other systems that use\n            local rather than Universal time.)  If the\
    \ compressed data\n            did not come from a file, MTIME is set to the time\
    \ at which\n            compression started.  MTIME = 0 means no time stamp is\n\
    \            available.\n         XFL (eXtra FLags)\n            These flags are\
    \ available for use by specific compression\n            methods.  The \"deflate\"\
    \ method (CM = 8) sets these flags as\n            follows:\n               XFL\
    \ = 2 - compressor used maximum compression,\n                         slowest\
    \ algorithm\n               XFL = 4 - compressor used fastest algorithm\n    \
    \     OS (Operating System)\n            This identifies the type of file system\
    \ on which compression\n            took place.  This may be useful in determining\
    \ end-of-line\n            convention for text files.  The currently defined values\
    \ are\n            as follows:\n                 0 - FAT filesystem (MS-DOS, OS/2,\
    \ NT/Win32)\n                 1 - Amiga\n                 2 - VMS (or OpenVMS)\n\
    \                 3 - Unix\n                 4 - VM/CMS\n                 5 -\
    \ Atari TOS\n                 6 - HPFS filesystem (OS/2, NT)\n               \
    \  7 - Macintosh\n                 8 - Z-System\n                 9 - CP/M\n \
    \               10 - TOPS-20\n                11 - NTFS filesystem (NT)\n    \
    \            12 - QDOS\n                13 - Acorn RISCOS\n               255\
    \ - unknown\n         XLEN (eXtra LENgth)\n            If FLG.FEXTRA is set, this\
    \ gives the length of the optional\n            extra field.  See below for details.\n\
    \         CRC32 (CRC-32)\n            This contains a Cyclic Redundancy Check\
    \ value of the\n            uncompressed data computed according to CRC-32 algorithm\n\
    \            used in the ISO 3309 standard and in section 8.1.1.6.2 of\n     \
    \       ITU-T recommendation V.42.  (See http://www.iso.ch for\n            ordering\
    \ ISO documents. See gopher://info.itu.ch for an\n            online version of\
    \ ITU-T V.42.)\n         ISIZE (Input SIZE)\n            This contains the size\
    \ of the original (uncompressed) input\n            data modulo 2^32.\n      2.3.1.1.\
    \ Extra field\n         If the FLG.FEXTRA bit is set, an \"extra field\" is present\
    \ in\n         the header, with total length XLEN bytes.  It consists of a\n \
    \        series of subfields, each of the form:\n            +---+---+---+---+==================================+\n\
    \            |SI1|SI2|  LEN  |... LEN bytes of subfield data ...|\n          \
    \  +---+---+---+---+==================================+\n         SI1 and SI2\
    \ provide a subfield ID, typically two ASCII letters\n         with some mnemonic\
    \ value.  Jean-Loup Gailly\n         <gzip@prep.ai.mit.edu> is maintaining a registry\
    \ of subfield\n         IDs; please send him any subfield ID you wish to use.\
    \  Subfield\n         IDs with SI2 = 0 are reserved for future use.  The following\n\
    \         IDs are currently defined:\n            SI1         SI2         Data\n\
    \            ----------  ----------  ----\n            0x41 ('A')  0x70 ('P')\
    \  Apollo file type information\n         LEN gives the length of the subfield\
    \ data, excluding the 4\n         initial bytes.\n      2.3.1.2. Compliance\n\
    \         A compliant compressor must produce files with correct ID1,\n      \
    \   ID2, CM, CRC32, and ISIZE, but may set all the other fields in\n         the\
    \ fixed-length part of the header to default values (255 for\n         OS, 0 for\
    \ all others).  The compressor must set all reserved\n         bits to zero.\n\
    \         A compliant decompressor must check ID1, ID2, and CM, and\n        \
    \ provide an error indication if any of these have incorrect\n         values.\
    \  It must examine FEXTRA/XLEN, FNAME, FCOMMENT and FHCRC\n         at least so\
    \ it can skip over the optional fields if they are\n         present.  It need\
    \ not examine any other part of the header or\n         trailer; in particular,\
    \ a decompressor may ignore FTEXT and OS\n         and always produce binary output,\
    \ and still be compliant.  A\n         compliant decompressor must give an error\
    \ indication if any\n         reserved bit is non-zero, since such a bit could\
    \ indicate the\n         presence of a new field that would cause subsequent data\
    \ to be\n         interpreted incorrectly.\n"
- title: 3. References
  contents:
  - "3. References\n   [1] \"Information Processing - 8-bit single-byte coded graphic\n\
    \       character sets - Part 1: Latin alphabet No.1\" (ISO 8859-1:1987).\n  \
    \     The ISO 8859-1 (Latin-1) character set is a superset of 7-bit\n       ASCII.\
    \ Files defining this character set are available as\n       iso_8859-1.* in ftp://ftp.uu.net/graphics/png/documents/\n\
    \   [2] ISO 3309\n   [3] ITU-T recommendation V.42\n   [4] Deutsch, L.P.,\"DEFLATE\
    \ Compressed Data Format Specification\",\n       available in ftp://ftp.uu.net/pub/archiving/zip/doc/\n\
    \   [5] Gailly, J.-L., GZIP documentation, available as gzip-*.tar in\n      \
    \ ftp://prep.ai.mit.edu/pub/gnu/\n   [6] Sarwate, D.V., \"Computation of Cyclic\
    \ Redundancy Checks via Table\n       Look-Up\", Communications of the ACM, 31(8),\
    \ pp.1008-1013.\n   [7] Schwaderer, W.D., \"CRC Calculation\", April 85 PC Tech\
    \ Journal,\n       pp.118-133.\n   [8] ftp://ftp.adelaide.edu.au/pub/rocksoft/papers/crc_v3.txt,\n\
    \       describing the CRC concept.\n"
- title: 4. Security Considerations
  contents:
  - "4. Security Considerations\n   Any data compression method involves the reduction\
    \ of redundancy in\n   the data.  Consequently, any corruption of the data is\
    \ likely to have\n   severe effects and be difficult to correct.  Uncompressed\
    \ text, on\n   the other hand, will probably still be readable despite the presence\n\
    \   of some corrupted bytes.\n   It is recommended that systems using this data\
    \ format provide some\n   means of validating the integrity of the compressed\
    \ data, such as by\n   setting and checking the CRC-32 check value.\n"
- title: 5. Acknowledgements
  contents:
  - "5. Acknowledgements\n   Trademarks cited in this document are the property of\
    \ their\n   respective owners.\n   Jean-Loup Gailly designed the gzip format and\
    \ wrote, with Mark Adler,\n   the related software described in this specification.\
    \  Glenn\n   Randers-Pehrson converted this document to RFC and HTML format.\n"
- title: 6. Author's Address
  contents:
  - "6. Author's Address\n   L. Peter Deutsch\n   Aladdin Enterprises\n   203 Santa\
    \ Margarita Ave.\n   Menlo Park, CA 94025\n   Phone: (415) 322-0103 (AM only)\n\
    \   FAX:   (415) 322-1734\n   EMail: <ghost@aladdin.com>\n   Questions about the\
    \ technical content of this specification can be\n   sent by email to:\n   Jean-Loup\
    \ Gailly <gzip@prep.ai.mit.edu> and\n   Mark Adler <madler@alumni.caltech.edu>\n\
    \   Editorial comments on this specification can be sent by email to:\n   L. Peter\
    \ Deutsch <ghost@aladdin.com> and\n   Glenn Randers-Pehrson <randeg@alumni.rpi.edu>\n"
- title: '7. Appendix: Jean-Loup Gailly''s gzip utility'
  contents:
  - "7. Appendix: Jean-Loup Gailly's gzip utility\n   The most widely used implementation\
    \ of gzip compression, and the\n   original documentation on which this specification\
    \ is based, were\n   created by Jean-Loup Gailly <gzip@prep.ai.mit.edu>.  Since\
    \ this\n   implementation is a de facto standard, we mention some more of its\n\
    \   features here.  Again, the material in this section is not part of\n   the\
    \ specification per se, and implementations need not follow it to\n   be compliant.\n\
    \   When compressing or decompressing a file, gzip preserves the\n   protection,\
    \ ownership, and modification time attributes on the local\n   file system, since\
    \ there is no provision for representing protection\n   attributes in the gzip\
    \ file format itself.  Since the file format\n   includes a modification time,\
    \ the gzip decompressor provides a\n   command line switch that assigns the modification\
    \ time from the file,\n   rather than the local modification time of the compressed\
    \ input, to\n   the decompressed output.\n"
- title: '8. Appendix: Sample CRC Code'
  contents:
  - "8. Appendix: Sample CRC Code\n   The following sample code represents a practical\
    \ implementation of\n   the CRC (Cyclic Redundancy Check). (See also ISO 3309\
    \ and ITU-T V.42\n   for a formal specification.)\n   The sample code is in the\
    \ ANSI C programming language. Non C users\n   may find it easier to read with\
    \ these hints:\n      &      Bitwise AND operator.\n      ^      Bitwise exclusive-OR\
    \ operator.\n      >>     Bitwise right shift operator. When applied to an\n \
    \            unsigned quantity, as here, right shift inserts zero\n          \
    \   bit(s) at the left.\n      !      Logical NOT operator.\n      ++     \"n++\"\
    \ increments the variable n.\n      0xNNN  0x introduces a hexadecimal (base 16)\
    \ constant.\n             Suffix L indicates a long value (at least 32 bits).\n\
    \      /* Table of CRCs of all 8-bit messages. */\n      unsigned long crc_table[256];\n\
    \      /* Flag: has the table been computed? Initially false. */\n      int crc_table_computed\
    \ = 0;\n      /* Make the table for a fast CRC. */\n      void make_crc_table(void)\n\
    \      {\n        unsigned long c;\n        int n, k;\n        for (n = 0; n <\
    \ 256; n++) {\n          c = (unsigned long) n;\n          for (k = 0; k < 8;\
    \ k++) {\n            if (c & 1) {\n              c = 0xedb88320L ^ (c >> 1);\n\
    \            } else {\n              c = c >> 1;\n            }\n          }\n\
    \          crc_table[n] = c;\n        }\n        crc_table_computed = 1;\n   \
    \   }\n      /*\n         Update a running crc with the bytes buf[0..len-1] and\
    \ return\n       the updated crc. The crc should be initialized to zero. Pre-\
    \ and\n       post-conditioning (one's complement) is performed within this\n\
    \       function so it shouldn't be done by the caller. Usage example:\n     \
    \    unsigned long crc = 0L;\n         while (read_buffer(buffer, length) != EOF)\
    \ {\n           crc = update_crc(crc, buffer, length);\n         }\n         if\
    \ (crc != original_crc) error();\n      */\n      unsigned long update_crc(unsigned\
    \ long crc,\n                      unsigned char *buf, int len)\n      {\n   \
    \     unsigned long c = crc ^ 0xffffffffL;\n        int n;\n        if (!crc_table_computed)\n\
    \          make_crc_table();\n        for (n = 0; n < len; n++) {\n          c\
    \ = crc_table[(c ^ buf[n]) & 0xff] ^ (c >> 8);\n        }\n        return c ^\
    \ 0xffffffffL;\n      }\n      /* Return the CRC of the bytes buf[0..len-1]. */\n\
    \      unsigned long crc(unsigned char *buf, int len)\n      {\n        return\
    \ update_crc(0L, buf, len);\n      }\n"
