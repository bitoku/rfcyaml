- title: __initial_text__
  contents:
  - "                   Authenticated Identity Management\n                in the\
    \ Session Initiation Protocol (SIP)\n"
- title: Abstract
  contents:
  - "Abstract\n   The baseline security mechanisms in the Session Initiation Protocol\n\
    \   (SIP) are inadequate for cryptographically assuring the identity of\n   the\
    \ end users that originate SIP requests, especially in an\n   interdomain context.\
    \  This document defines a mechanism for securely\n   identifying originators\
    \ of SIP requests.  It does so by defining a\n   SIP header field for conveying\
    \ a signature used for validating the\n   identity and for conveying a reference\
    \ to the credentials of the\n   signer.\n   This document obsoletes RFC 4474.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8224.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Terminology .....................................................4\n  \
    \ 3. Architectural Overview ..........................................5\n   4.\
    \ Identity Header Field Syntax ....................................7\n      4.1.\
    \ PASSporT Construction ......................................8\n           4.1.1.\
    \ Example Full and Compact Forms of PASSporT\n                  in Identity ........................................10\n\
    \   5. Example of Operations ..........................................11\n  \
    \    5.1. Example Identity Header Construction ......................13\n   6.\
    \ Signature Generation and Validation ............................14\n      6.1.\
    \ Authentication Service Behavior ...........................14\n           6.1.1.\
    \ Handling Repairable Errors .........................16\n      6.2. Verifier\
    \ Behavior .........................................17\n           6.2.1. Authorization\
    \ of Requests ..........................19\n           6.2.2. Failure Response\
    \ Codes Sent by a\n                  Verification Service ...............................19\n\
    \           6.2.3. Handling Retried Requests ..........................21\n  \
    \         6.2.4. Handling the Full Form of PASSporT .................21\n   7.\
    \ Credentials ....................................................22\n      7.1.\
    \ Credential Use by the Authentication Service ..............22\n      7.2. Credential\
    \ Use by the Verification Service ................23\n      7.3. \"info\" Parameter\
    \ URIs .....................................24\n      7.4. Credential System Requirements\
    \ ............................25\n   8. Identity Types .................................................26\n\
    \      8.1. Differentiating Telephone Numbers from URIs ...............26\n  \
    \    8.2. Authority for Telephone Numbers ...........................27\n    \
    \  8.3. Telephone Number Canonicalization Procedures ..............28\n      8.4.\
    \ Authority for Domain Names ................................29\n      8.5. URI\
    \ Normalization .........................................30\n   9. Extensibility\
    \ ..................................................31\n   10. Backwards Compatibility\
    \ with RFC 4474 .........................32\n   11. Privacy Considerations ........................................32\n\
    \   12. Security Considerations .......................................34\n  \
    \    12.1. Protected Request Fields .................................34\n    \
    \       12.1.1. Protection of the To Header and Retargeting .......36\n      12.2.\
    \ Unprotected Request Fields ...............................37\n      12.3. Malicious\
    \ Removal of Identity Headers ....................37\n      12.4. Securing the\
    \ Connection to the Authentication Service ....38\n      12.5. Authorization and\
    \ Transitional Strategies ................39\n      12.6. Display-Names and Identity\
    \ ...............................40\n   13. IANA Considerations ...........................................40\n\
    \      13.1. SIP Header Fields ........................................40\n  \
    \    13.2. SIP Response Codes .......................................41\n    \
    \  13.3. Identity-Info Parameters .................................41\n      13.4.\
    \ Identity-Info Algorithm Parameter Values .................41\n   14. Changes\
    \ from RFC 4474 .........................................41\n   15. References\
    \ ....................................................42\n      15.1. Normative\
    \ References .....................................42\n      15.2. Informative\
    \ References ...................................43\n   Acknowledgments ...................................................46\n\
    \   Authors' Addresses ................................................46\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document provides enhancements to the existing mechanisms\
    \ for\n   authenticated identity management in the Session Initiation Protocol\n\
    \   (SIP) [RFC3261].  An identity, for the purposes of this document, is\n   defined\
    \ as either\n   o  a canonical address-of-record (AoR) SIP URI employed to reach\
    \ a\n      user (such as \"sip:alice@atlanta.example.com\") or\n   o  a telephone\
    \ number, which commonly appears either in a tel URI\n      [RFC3966] or as the\
    \ user portion of a SIP URI.\n   [RFC3261] specifies several places within a SIP\
    \ request where users\n   can express an identity for themselves, most prominently\
    \ the\n   user-populated From header field.  However, in the absence of some\n\
    \   sort of cryptographic authentication mechanism, the recipient of a\n   SIP\
    \ request has no way to verify that the From header field has been\n   populated\
    \ appropriately.  This leaves SIP vulnerable to a category of\n   abuses such\
    \ as impersonation attacks that facilitate or enable\n   robocalling, voicemail\
    \ hacking, swatting, and related problems as\n   described in [RFC7340].  Ideally,\
    \ a cryptographic approach to\n   identity can provide a much stronger assurance\
    \ of identity than the\n   Caller ID services that the telephone network provides\
    \ today, and one\n   less vulnerable to spoofing.\n   [RFC3261] encourages user\
    \ agents (UAs) to implement a number of\n   potential authentication mechanisms,\
    \ including Digest authentication,\n   Transport Layer Security (TLS), and S/MIME\
    \ (implementations may\n   support other security schemes as well).  However,\
    \ few SIP UAs today\n   support the end-user certificates necessary to authenticate\n\
    \   themselves (via S/MIME, for example), and for its part Digest\n   authentication\
    \ is limited by the fact that the originator and\n   destination must share a\
    \ prearranged secret.  Practically speaking,\n   originating UAs need to be able\
    \ to securely communicate their users'\n   identities to destinations with which\
    \ they have no previous\n   association.\n   As an initial attempt to address\
    \ this gap, [RFC4474] specified a\n   means of signing portions of SIP requests\
    \ in order to provide an\n   identity assurance.  However, [RFC4474] was in several\
    \ ways\n   misaligned with deployment realities (see [SIP-RFC4474-CONCERNS]).\n\
    \   Most significantly, [RFC4474] did not deal well with telephone\n   numbers\
    \ as identifiers, despite their enduring use in SIP\n   deployments.  [RFC4474]\
    \ also provided a signature over material that\n   intermediaries in existing\
    \ deployments commonly altered.  This\n   specification therefore deprecates the\
    \ syntax and behavior specified\n   by [RFC4474], reconsidering the problem space\
    \ in light of the threat\n   model in [RFC7375] and aligning the signature format\
    \ with PASSporT\n   (Personal Assertion Token) [RFC8225].  Backwards-compatibility\n\
    \   considerations are given in Section 10.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\"\
    , \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described\
    \ in\n   BCP 14 [RFC2119].\n   In addition, this document uses three terms specific\
    \ to the\n   mechanism:\n   o  Identity: An identifier for the user of a communications\
    \ service;\n      for the purposes of SIP, either a SIP URI or a telephone number.\n\
    \      Identities are derived from an \"identity field\" in a SIP request\n  \
    \    such as the From header field.\n   o  Authentication Service: A logical role\
    \ played by a SIP entity that\n      adds Identity headers to SIP requests.\n\
    \   o  Verification Service (or \"Verifier\"): A logical role played by a\n  \
    \    SIP entity that validates Identity headers in a SIP request.\n"
- title: 3.  Architectural Overview
  contents:
  - "3.  Architectural Overview\n   The identity architecture for SIP defined in this\
    \ specification\n   depends on a logical \"authentication service\" that validates\
    \ outgoing\n   requests.  An authentication service may be implemented either\
    \ as\n   part of a UA or as a proxy server; typically, it is a component of a\n\
    \   network intermediary like a proxy to which originating UAs send\n   unsigned\
    \ requests.  Once the originator of the message has been\n   authenticated, through\
    \ prearranged means with the authentication\n   service, the authentication service\
    \ then creates and adds an Identity\n   header field to the request.  This requires\
    \ computing cryptographic\n   information -- including a digital signature over\
    \ some components of\n   messages -- that lets other SIP entities verify that\
    \ the sending user\n   has been authenticated and its claim of a particular identity\
    \ has\n   been authorized.  These \"verification services\" validate the\n   signature\
    \ and enable policy decisions to be made based on the results\n   of the validation.\n\
    \   Policy decisions made after validation depend heavily on the\n   verification\
    \ service's trust for the credentials that the\n   authentication service uses\
    \ to sign requests.  As robocalling,\n   voicemail hacking, and swatting usually\
    \ involve impersonation of\n   telephone numbers, credentials that will be trusted\
    \ by relying\n   parties to sign for telephone numbers are a key component of\
    \ the\n   architecture.  Authority over telephone numbers is, however, not as\n\
    \   easy to establish on the Internet as authority over traditional\n   domain\
    \ names.  This document assumes the existence of credentials for\n   establishing\
    \ authority over telephone numbers for cases where the\n   telephone number is\
    \ the identity of the user, but does not mandate or\n   specify a credential system;\
    \ [RFC8226] describes a credential system\n   compatible with this architecture.\n\
    \   Although addressing the vulnerabilities in the Secure Telephone\n   Identity\
    \ Revisited (STIR) problem statement [RFC7340] and threat\n   model mostly requires\
    \ dealing with telephone number as identities,\n   SIP must also handle signing\
    \ for SIP URIs as identities.  This is\n   typically easier to deal with, as these\
    \ identities are issued by\n   organizations that have authority over Internet\
    \ domains.  When a new\n   user becomes associated with example.com, for example,\
    \ the\n   administrator of the SIP service for that domain can issue them an\n\
    \   identity in that namespace, such as sip:alice@example.com.  Alice may\n  \
    \ then send REGISTER requests to example.com that make her UAs eligible\n   to\
    \ receive requests for sip:alice@example.com.  In other cases, Alice\n   may herself\
    \ be the owner of her own domain and may issue herself\n   identities as she chooses.\
    \  But ultimately, it is the controller of\n   the SIP service at example.com\
    \ that must be responsible for\n   authorizing the use of names in the example.com\
    \ domain.  Therefore,\n   for the purposes of SIP as defined in [RFC3261], the\
    \ necessary\n   credentials needed to prove that a user is authorized to use a\n\
    \   particular From header field must ultimately derive from the domain\n   owner:\
    \ either (1) a UA gives requests to the domain name owner in\n   order for them\
    \ to be signed by the domain owner's credentials or\n   (2) the UA must possess\
    \ credentials that prove that the domain owner\n   has given the UA the right\
    \ to a name.\n   In order to share a cryptographic assurance of end-user SIP identity\n\
    \   in an interdomain or intradomain context, an authentication service\n   constructs\
    \ tokens based on the PASSporT format [RFC8225], which is\n   special encoding\
    \ of a JSON [RFC8259] object comprising values derived\n   from certain header\
    \ field values in the SIP request.  The\n   authentication service computes a\
    \ signature over those JSON elements\n   as PASSporT specifies.  An encoding of\
    \ the resulting PASSporT is then\n   placed in the SIP Identity header field.\
    \  In order to assist in the\n   validation of the Identity header field, this\
    \ specification also\n   describes a parameter of the Identity header field that\
    \ can be used\n   by the recipient of a request to recover the credentials of\
    \ the\n   signer.\n   Note that the scope of this document is limited to providing\
    \ an\n   identity assurance for SIP requests; solving this problem for SIP\n \
    \  responses is outside the scope of this work (see [RFC4916]).  Future\n   work\
    \ might specify ways that a SIP implementation could gateway\n   PASSporTs to\
    \ other protocols.\n"
- title: 4.  Identity Header Field Syntax
  contents:
  - "4.  Identity Header Field Syntax\n   The Identity and Identity-Info header fields\
    \ that were previously\n   defined in [RFC4474] are deprecated by this document.\
    \  This revised\n   specification collapses the grammar of Identity-Info into\
    \ the\n   Identity header field via the \"info\" parameter.  Note that unlike\
    \ the\n   prior specification in [RFC4474], the Identity header field is now\n\
    \   allowed to appear more than one time in a SIP request.  The revised\n   grammar\
    \ for the Identity header field builds on the ABNF [RFC5234] in\n   [RFC3261],\
    \ Section 25.  It is as follows:\n      Identity = \"Identity\" HCOLON signed-identity-digest\
    \ SEMI\n          ident-info *( SEMI ident-info-params )\n      signed-identity-digest\
    \ = 1*(base64-char / \".\")\n      ident-info = \"info\" EQUAL ident-info-uri\n\
    \      ident-info-uri = LAQUOT absoluteURI RAQUOT\n      ident-info-params = ident-info-alg\
    \ / ident-type /\n          ident-info-extension\n      ident-info-alg = \"alg\"\
    \ EQUAL token\n      ident-type = \"ppt\" EQUAL token\n      ident-info-extension\
    \ = generic-param\n      base64-char = ALPHA / DIGIT / \"/\" / \"+\"\n   In addition\
    \ to the \"info\" parameter, and the \"alg\" parameter\n   previously defined\
    \ in [RFC4474], this specification defines the\n   optional \"ppt\" parameter\
    \ (PASSporT Type).  The \"absoluteURI\" portion\n   of ident-info-uri MUST contain\
    \ a URI; see Section 7.3 for more on\n   choosing how to advertise credentials\
    \ through this parameter.\n   The signed-identity-digest contains a base64 encoding\
    \ of a PASSporT\n   [RFC8225], which secures the request with a signature that\
    \ PASSporT\n   generates over the JSON header and payload objects; some of those\n\
    \   header and claim element values will mirror values of the SIP\n   request.\n"
- title: 4.1.  PASSporT Construction
  contents:
  - "4.1.  PASSporT Construction\n   For SIP implementations to populate the PASSporT\
    \ header JSON object\n   with fields from a SIP request, the following elements\
    \ MUST be placed\n   as the values corresponding to the designated JSON keys:\n\
    \   o  First, per the baseline PASSporT specification [RFC8225], the JSON\n  \
    \    \"typ\" key MUST have the value \"passport\".\n   o  Second, the JSON key\
    \ \"alg\" MUST mirror the value of the optional\n      \"alg\" parameter in the\
    \ SIP Identity header field.  Note that if\n      the \"alg\" parameter is absent\
    \ from the Identity header, the\n      default value is \"ES256\".\n   o  Third,\
    \ the JSON key \"x5u\" MUST have a value equivalent to the\n      quoted URI in\
    \ the \"info\" parameter, per the simple string\n      comparison rules of [RFC3986],\
    \ Section 6.2.1.\n   o  Fourth, if a PASSporT extension is in use, then the optional\
    \ JSON\n      key \"ppt\" MUST be present and have a value equivalent to the\n\
    \      quoted value of the \"ppt\" parameter of the Identity header field.\n \
    \  An example of the PASSporT header JSON object without any\n   extension is:\n\
    \   { \"typ\":\"passport\",\n     \"alg\":\"ES256\",\n     \"x5u\":\"https://www.example.com/cert.cer\"\
    \ }\n   To populate the PASSporT payload JSON object from a SIP request, the\n\
    \   following elements MUST be placed as values corresponding to the\n   designated\
    \ JSON keys:\n   o  First, the JSON \"orig\" object MUST be populated.  If the\n\
    \      originating identity is a telephone number, then the array MUST be\n  \
    \    populated with a JSON object containing a \"tn\" element with a\n      value\
    \ set to the value of the quoted originating identity, a\n      canonicalized\
    \ telephone number (see Section 8.3).  Otherwise, the\n      object MUST be populated\
    \ with a JSON object containing a \"uri\"\n      element, set to the value of\
    \ the AoR of the UA sending the message\n      as taken from the addr-spec of\
    \ the From header field, per the\n      procedures in Section 8.5.\n   o  Second,\
    \ the JSON \"dest\" array MUST be populated.  If the\n      destination identity\
    \ is a telephone number, then the array MUST be\n      populated with a JSON object\
    \ containing a \"tn\" element with a\n      value set to the value of the quoted\
    \ destination identity, a\n      canonicalized telephone number (see Section 8.3).\
    \  Otherwise, the\n      array MUST be populated with a JSON object containing\
    \ a \"uri\"\n      element, set to the value of the addr-spec component of the\n\
    \      To header field, which is the AoR to which the request is being\n     \
    \ sent, per the procedures in Section 8.5.  Multiple JSON objects\n      are permitted\
    \ in \"dest\" for future compatibility reasons.\n   o  Third, the JSON key \"\
    iat\" MUST appear.  The authentication service\n      SHOULD set the value of\
    \ \"iat\" to an encoding of the value of the\n      SIP Date header field as a\
    \ JSON NumericDate (as UNIX time, per\n      [RFC7519], Section 2), though an\
    \ authentication service MAY set\n      the value of \"iat\" to its own current\
    \ clock time.  If the\n      authentication service uses its own clock time, then\
    \ the use of\n      the full form of PASSporT is REQUIRED.  In either case, the\n\
    \      authentication service MUST NOT generate a PASSporT for a SIP\n      request\
    \ if the Date header is outside of its local policy for\n      freshness (sixty\
    \ seconds is RECOMMENDED).\n   o  Fourth, if the request contains a Session Description\
    \ Protocol\n      (SDP) message body and if that SDP contains one or more\n  \
    \    \"a=fingerprint\" attributes, then the JSON key \"mky\" MUST appear\n   \
    \   with the algorithm(s) and value(s) of the fingerprint attributes\n      (if\
    \ they differ), following the format given in [RFC8225],\n      Section 5.2.2.\n\
    \   For example:\n   { \"orig\":{\"tn\":\"12155551212\"},\n     \"dest\":{\"tn\"\
    :[\"12155551213\"]},\n     \"iat\":1443208345 }\n   For information on the security\
    \ properties of these SIP message\n   elements and why their inclusion mitigates\
    \ replay attacks, see\n   Section 12.  Note that future extensions to PASSporT\
    \ could introduce\n   new claims and that further SIP procedures could be required\
    \ to\n   extract information from the SIP request to populate the values of\n\
    \   those claims; see Section 9 of this document.\n   The \"orig\" and \"dest\"\
    \ arrays may contain identifiers of heterogeneous\n   type; for example, the \"\
    orig\" array might contain a \"tn\" claim, while\n   the \"dest\" contains a \"\
    uri\" claim.  Also note that in some cases, the\n   \"dest\" array may be populated\
    \ with more than one value.  This could,\n   for example, occur when multiple\
    \ \"dest\" identities are specified in a\n   meshed conference.  Defining how\
    \ a SIP implementation would align\n   multiple destination identities in PASSporT\
    \ with such systems is left\n   as a subject for future specifications.\n   After\
    \ these two JSON objects, the header and the payload, have been\n   constructed\
    \ and base64-encoded, they must each be hashed and signed\n   per [RFC8225], Section\
    \ 6.  The header, payload, and signature\n   components comprise a full PASSporT\
    \ object.  The resulting PASSporT\n   may be carried in SIP in either (1) a full\
    \ form, which includes the\n   header and payload as well as the signature or\
    \ (2) a compact form,\n   which only carries the signature per [RFC8225], Section\
    \ 7.  The\n   hashing and signing algorithm is specified by the \"alg\" parameter\
    \ of\n   the Identity header field and the mirrored \"alg\" parameter of\n   PASSporT.\
    \  All implementations of this specification MUST support the\n   required signing\
    \ algorithms of PASSporT.  At present, there is one\n   mandatory-to-support value\
    \ for the \"alg\" parameter: \"ES256\", as\n   defined in [RFC7519], which connotes\
    \ an Elliptic Curve Digital\n   Signature Algorithm (ECDSA) P-256 digital signature.\n"
- title: 4.1.1.  Example Full and Compact Forms of PASSporT in Identity
  contents:
  - "4.1.1.  Example Full and Compact Forms of PASSporT in Identity\n   As Appendix\
    \ F of the JSON Web Signature (JWS) specification [RFC7515]\n   notes, there are\
    \ cases where \"it is useful to integrity-protect\n   content that is not itself\
    \ contained in a JWS.\"  Since the fields\n   that make up the majority of the\
    \ PASSporT header and payload have\n   values replicated in the SIP request, the\
    \ SIP usage of PASSporT may\n   exclude the base64-encoded version of the header\
    \ and payload JSON\n   objects from the Identity header field and instead present\
    \ a detached\n   signature: what PASSporT calls its compact form; see [RFC8225],\n\
    \   Section 7.\n   When an authentication service constructs an Identity header,\
    \ the\n   contents of the signed-identity-digest field MUST contain either a\n\
    \   full or compact PASSporT.  Use of the compact form is RECOMMENDED in\n   order\
    \ to reduce message size, but note that extensions often require\n   the full\
    \ form (see Section 9).\n   For example, a full form of PASSporT in an Identity\
    \ header might look\n   as follows (backslashes shown for line folding only):\n\
    \   Identity: eyJhbGciOiJFUzI1NiIsInR5cCI6InBhc3Nwb3J0IiwieDV1I \\\n   joiaHR0cHM6Ly9jZXJ0LmV4YW1wbGUub3JnL3Bhc3Nwb3J0LmNlciJ9.eyJ\
    \ \\\n   kZXN0Ijp7InVyaSI6WyJzaXA6YWxpY2VAZXhhbXBsZS5jb20iXX0sImlhdC \\\n   I6IjE0NDMyMDgzNDUiLCJvcmlnIjp7InRuIjoiMTIxNTU1NTEyMTIifX0.r\
    \ \\\n   q3pjT1hoRwakEGjHCnWSwUnshd0-zJ6F1VOgFWSjHBr8Qjpjlk-cpFYpFYs \\\n   ojNCpTzO3QfPOlckGaS6hEck7w;info=<https://biloxi.example.org\
    \ \\\n   /biloxi.cert>\n   The compact form of the same PASSporT object would\
    \ appear in the\n   Identity header as:\n   Identity: ..rq3pjT1hoRwakEGjHCnWSwUnshd0-zJ6F1VOgFWSjHBr8Qj\
    \ \\\n   pjlk-cpFYpFYsojNCpTzO3QfPOlckGaS6hEck7w;                    \\\n   info=<https://biloxi.example.org/biloxi.cert>\n"
- title: 5.  Example of Operations
  contents:
  - "5.  Example of Operations\n   This section provides an informative (non-normative)\
    \ high-level\n   example of the operation of the mechanisms described in this\n\
    \   document.\n   Imagine a case where Bob, who has the home proxy of example.com\
    \ and\n   the AoR sip:12155551212@example.com;user=phone, wants to communicate\n\
    \   with Alice at sip:alice@example.com.  They have no prior\n   relationship,\
    \ and Alice implements best practices to prevent\n   impersonation attacks.\n\
    \   Bob's UA generates an INVITE and places his AoR in the From header\n   field\
    \ of the request.  He then sends an INVITE to an authentication\n   service proxy\
    \ for his domain.\n   ............................          ..............................\n\
    \   .                          .          .                            .\n   .\
    \                +-------+ .          . +-------+                  .\n   .   \
    \  Signs for  |       | .  Signed  . |       |                  .\n   .     12125551xxx|\
    \ Auth  |------------> | Verif |                  .\n   .                |  Svc\
    \  | .  INVITE  . |  Svc  |                  .\n   .                | Proxy |\
    \ .          . | Proxy |                  .\n   .              > +-------+ . \
    \         . +-------+ \\                .\n   .             /       |    .   \
    \       ->           \\               .\n   .            /        |    .     \
    \   --.             \\              .\n   .           /         |    .      --\
    \  .              \\             .\n   .          /          |    .    --    .\
    \               \\            .\n   .         /       +-------+.  --      .  \
    \              \\           .\n   .        /        |       |.<-        .    \
    \             \\          .\n   .       /         | Cert  |.          .      \
    \            >         .\n   .   +-------+     | Store |.          .         \
    \       +-------+   .\n   .   |       |     |       |.          .            \
    \    |       |   .\n   .   | Bob   |     +-------+.          .               \
    \ | Alice |   .\n   .   | UA    |              .          .                | UA\
    \    |   .\n   .   |       |              .          .                |      \
    \ |   .\n   .   +-------+              .          .                +-------+ \
    \  .\n   .              Domain A    .          .   Domain B                 .\n\
    \   ............................          ..............................\n   The\
    \ proxy authenticates Bob and validates that he is authorized to\n   assert the\
    \ identity that he populated in the From header field.  The\n   proxy authentication\
    \ service then constructs a PASSporT that contains\n   a JSON representation of\
    \ values that mirror certain parts of the SIP\n   request, including the identity\
    \ in the From header field value.  As a\n   part of generating the PASSporT, the\
    \ authentication service signs a\n   hash of that JSON header and payload with\
    \ the private key associated\n   with the appropriate credential for the identity\
    \ (in this example, a\n   certificate with authority to sign for numbers in a\
    \ range from\n   12155551000 to 12155551999), and the signature is inserted by\
    \ the\n   proxy server into the Identity header field value of the request as\
    \ a\n   compact form of PASSporT.  Alternatively, the JSON header and payload\n\
    \   themselves might also have been included in the object when using the\n  \
    \ full form of PASSporT.\n   The proxy authentication service, as the holder of\
    \ a private key with\n   authority over Bob's telephone number, is asserting that\
    \ the\n   originator of this request has been authenticated and that he is\n \
    \  authorized to claim the identity that appears in the From header\n   field.\
    \  The proxy inserts an \"info\" parameter into the Identity\n   header field\
    \ that tells Alice how to acquire keying material\n   necessary to validate its\
    \ credentials (a public key), in case she\n   doesn't already have it.\n   When\
    \ Alice's domain receives the request, a proxy verification\n   service validates\
    \ the signature provided in the Identity header field\n   and then determines\
    \ that the authentication service credentials\n   demonstrate authority over the\
    \ identity in the From header field.\n   This same validation operation might\
    \ be performed by a verification\n   service in Alice's UA server (UAS).  Ultimately,\
    \ this valid request\n   is rendered to Alice.  If the validation were unsuccessful,\
    \ some\n   other treatment could be applied by the receiving domain or\n   Alice's\
    \ UA.\n"
- title: 5.1.  Example Identity Header Construction
  contents:
  - "5.1.  Example Identity Header Construction\n   For the following SIP request:\n\
    \    INVITE sip:alice@example.com SIP/2.0\n    Via: SIP/2.0/TLS pc33.atlanta.example.com;branch=z9hG4bKnashds8\n\
    \    To: Alice <sip:alice@example.com>\n    From: Bob <sip:12155551212@example.com;user=phone>;tag=1928301774>\n\
    \    Call-ID: a84b4c76e66710\n    CSeq: 314159 INVITE\n    Max-Forwards: 70\n\
    \    Date: Fri, 25 Sep 2015 19:12:25 GMT\n    Contact: <sip:12155551212@gateway.example.com>\n\
    \    Content-Type: application/sdp\n    Content-Length: ...\n    v=0\n    o=UserA\
    \ 2890844526 2890844526 IN IP4 pc33.atlanta.example.com\n    s=Session SDP\n \
    \   c=IN IP4 pc33.atlanta.example.com\n    t=0 0\n    m=audio 49172 RTP/AVP 0\n\
    \    a=rtpmap:0 PCMU/8000\n   An authentication service will create a corresponding\
    \ PASSporT\n   object.  The properly serialized PASSporT header and payload JSON\n\
    \   objects would look as follows.  For the header, the values chosen by\n   the\
    \ authentication service at \"example.com\" might read:\n   {\"alg\":\"ES256\"\
    ,\"typ\":\"passport\",\"x5u\":\"https://cert.example.org/\n      passport.cer\"\
    }\n   The serialized payload will derive values from the SIP request (the\n  \
    \ From, To, and Date header field values) as follows:\n   {\"dest\":{\"uri\":[\"\
    sip:alice@example.com\"]},\"iat\":1443208345,\n     \"orig\":{\"tn\":\"12155551212\"\
    }}\n   The authentication service would then generate the signature over the\n\
    \   object, following the procedures in [RFC8225], Section 6.  That\n   signature\
    \ would look as follows:\n   rq3pjT1hoRwakEGjHCnWSwUnshd0-zJ6F1VOgFWSjHBr8Qjpjlk-cpFYpFYs\
    \ \\\n    ojNCpTzO3QfPOlckGaS6hEck7w\n   An authentication service signing this\
    \ request and using the compact\n   form of PASSporT would thus generate and add\
    \ to the request an\n   Identity header field of the following form:\n   Identity:\
    \ ..rq3pjT1hoRwakEGjHCnWSwUnshd0-zJ6F1VOgFWSjHBr8Qjpj \\\n    lk-cpFYpFYsojNCpTzO3QfPOlckGaS6hEck7w;\
    \ \\\n    info=<https://cert.example.org/passport.cer>\n"
- title: 6.  Signature Generation and Validation
  contents:
  - "6.  Signature Generation and Validation\n   SIP entities that instantiate the\
    \ authentication service and\n   verification service roles will, respectively,\
    \ generate and validate\n   the Identity header and the signature it contains.\n"
- title: 6.1.  Authentication Service Behavior
  contents:
  - "6.1.  Authentication Service Behavior\n   Any entity that instantiates the authentication\
    \ service role MUST\n   possess the private key of one or more credentials that\
    \ can be used\n   to sign for a domain or a telephone number (see Section 7.1).\
    \  The\n   authentication service role can be instantiated, for example, by an\n\
    \   intermediary such as a proxy server or by a UA.  Intermediaries that\n   instantiate\
    \ this role MUST be capable of authenticating one or more\n   SIP users who can\
    \ register for that identity.  Commonly, this role\n   will be instantiated by\
    \ a proxy server, since proxy servers are more\n   likely to have a static hostname,\
    \ hold corresponding credentials, and\n   have access to SIP registrar capabilities\
    \ that allow them to\n   authenticate users.  It is also possible that the authentication\n\
    \   service role might be instantiated by an entity that acts as a\n   redirect\
    \ server, but that is left as a topic for future work.\n   An authentication service\
    \ adds the Identity header field to SIP\n   requests.  The procedures below define\
    \ the steps that must be taken\n   when each Identity header field is added. \
    \ More than one Identity\n   header field may appear in a single request, and\
    \ an authentication\n   service may add an Identity header field to a request\
    \ that already\n   contains one or more Identity header fields.\n   Entities instantiating\
    \ the authentication service role perform the\n   following steps, in order, to\
    \ generate an Identity header field for a\n   SIP request:\n   Step 1: Check Authority\
    \ for the Identity\n   First, the authentication service must determine whether\
    \ it is\n   authoritative for the identity of the originator of the request. \
    \ The\n   authentication service extracts the identity from the URI value from\n\
    \   the \"identity field\"; in ordinary operations, that is the addr-spec\n  \
    \ component of the From header field.  In order to determine whether\n   the signature\
    \ for the identity field should be over the entire\n   identity field URI or just\
    \ a telephone number, the authentication\n   service MUST follow the process described\
    \ in Section 8.1.  The\n   information in that section will lead to either the\
    \ telephone number\n   canonicalization procedures in Section 8.3 for telephone\
    \ numbers or\n   the URI normalization procedures described in Section 8.5 for\
    \ domain\n   names.  Whichever the result, if the authentication service is not\n\
    \   authoritative for the identity in question, it SHOULD process and\n   forward\
    \ the request normally unless the local policy is to block such\n   requests.\
    \  The authentication service MUST NOT add an Identity header\n   field if the\
    \ authentication service does not have the authority to\n   make the claim it\
    \ asserts.\n   Step 2: Authenticate the Originator\n   The authentication service\
    \ MUST then determine whether or not the\n   originator of the request is authorized\
    \ to claim the identity given\n   in the identity field.  In order to do so, the\
    \ authentication service\n   MUST authenticate the originator of the message.\
    \  Some possible ways\n   in which this authentication might be performed include\
    \ the\n   following:\n   o  If the authentication service is instantiated by a\
    \ SIP\n      intermediary (proxy server), it may authenticate the request with\n\
    \      the authentication scheme used for registration in its domain\n      (e.g.,\
    \ Digest authentication).\n   o  If the authentication service is instantiated\
    \ by a SIP UA, a UA\n      may authenticate its own user through any system-specific\
    \ means,\n      perhaps simply by virtue of having physical access to the UA.\n\
    \   Authorization of the use of a particular username or telephone number\n  \
    \ in the user part of the From header field is a matter of local policy\n   for\
    \ the authentication service; see Section 7.1 for more information.\n   Note that\
    \ this check is performed only on the addr-spec in the\n   identity field (e.g.,\
    \ the URI of the originator, like\n   \"sip:alice@atlanta.example.com\"); it does\
    \ not cover the display-name\n   portion of the From header field (e.g., \"Alice\
    \ Atlanta\").  For more\n   information, see Section 12.6.\n   Step 3: Verify\
    \ Date is Present and Valid\n   An authentication service MUST add a Date header\
    \ field to SIP\n   requests that do not have one.  The authentication service\
    \ MUST\n   ensure that any preexisting Date header field in the request is\n \
    \  accurate.  Local policy can dictate precisely how accurate the Date\n   must\
    \ be; a RECOMMENDED maximum discrepancy of sixty seconds will\n   ensure that\
    \ the request is unlikely to upset any verifiers.  If the\n   Date header field\
    \ value contains a time different by more than\n   one minute from the current\
    \ time noted by the authentication service,\n   the authentication service SHOULD\
    \ reject the request.  Finally, the\n   authentication service MUST verify that\
    \ both the Date header field\n   and the current time fall within the validity\
    \ period of its\n   credential.\n   See Section 12.1 for information on how the\
    \ Date header field assists\n   verifiers.\n   Step 4: Populate and Add the Identity\
    \ Header\n   Subsequently, the authentication service MUST form a PASSporT object\n\
    \   and add a corresponding Identity header field to the request\n   containing\
    \ either the full or compact form of PASSporT.  For the\n   baseline PASSporT\
    \ header (headers containing no \"ppt\" parameter),\n   this follows the procedures\
    \ in Section 4; if the authentication\n   service is using an alternative \"ppt\"\
    \ format, it MUST add an\n   appropriate \"ppt\" parameter and follow the procedures\
    \ associated with\n   that extension (see Section 9).  After the Identity header\
    \ field has\n   been added to the request, the authentication service MUST also\
    \ add\n   an \"info\" parameter to the Identity header field.  The \"info\"\n\
    \   parameter contains a URI from which the authentication service's\n   credential\
    \ can be acquired; see Section 7.3 for more on credential\n   acquisition.\n \
    \  An authentication service MAY use the full form of the PASSporT in\n   the\
    \ Identity header field.  The presence of the full form is OPTIONAL\n   because\
    \ the information carried in the baseline PASSporT headers and\n   claims is usually\
    \ redundant with information already carried\n   elsewhere in the SIP request.\
    \  Using the compact form can\n   significantly reduce SIP message size, especially\
    \ when the PASSporT\n   payload contains media keys.  The syntax of the compact\
    \ form is given\n   in [RFC8225], Section 7; essentially, it contains only the\
    \ signature\n   component of the PASSporT.\n   Note that per the behavior specified\
    \ in [RFC8225], use of the full\n   form is mandatory when optional extensions\
    \ are included.  See\n   Section 9.\n"
- title: 6.1.1.  Handling Repairable Errors
  contents:
  - "6.1.1.  Handling Repairable Errors\n   Also, in some cases, a request signed\
    \ by an authentication service\n   will be rejected by the verification service\
    \ on the receiving side,\n   and the authentication service will receive a SIP\
    \ 4xx status code in\n   the backwards direction, such as a 438 (\"Invalid Identity\
    \ Header\")\n   response indicating a verification failure.  If the authentication\n\
    \   service did not originally send the full form of the PASSporT object\n   in\
    \ the Identity header field, it SHOULD retry the request with the\n   full form\
    \ after receiving a 438 response; however, implementations\n   SHOULD NOT retry\
    \ the request more than once.  Authentication services\n   implemented at proxy\
    \ servers would retry such a request as a\n   sequential fork, by reprocessing\
    \ the destination as a new target and\n   handling it serially as described in\
    \ Section 16.6 of [RFC3261].\n   The information in the full form is useful on\
    \ the verification side\n   for debugging errors, and there are some known causes\
    \ of verification\n   failures (such as the Date header field value changing in\
    \ transit;\n   see Section 12.1 for more information) that can be resolved by\
    \ the\n   inclusion of the full form of PASSporT.\n   Finally, the authentication\
    \ service forwards the message normally.\n"
- title: 6.2.  Verifier Behavior
  contents:
  - "6.2.  Verifier Behavior\n   This document specifies a logical role for SIP entities;\
    \ this role is\n   called a verification service, or verifier.  When a verifier\
    \ receives\n   a SIP message containing one or more Identity header fields, it\n\
    \   inspects the signature(s) to verify the identity of the originator of\n  \
    \ the message.  The results of a verification are provided as input to\n   an\
    \ authorization process that is outside the scope of this document.\n   A SIP\
    \ request may contain zero, one, or more Identity header fields.\n   A verification\
    \ service performs the steps below on each Identity\n   header field that appears\
    \ in a request.  If a verification service\n   cannot use any Identity header\
    \ in a request, due to the absence of\n   Identity headers or unsupported \"ppt\"\
    \ parameters, and the presence of\n   an Identity header field is required by\
    \ local policy (for example,\n   based on a per-sending-domain policy or a per-sending-user\
    \ policy),\n   then a 428 \"Use Identity Header\" response MUST be sent in the\n\
    \   backwards direction.  For more on this and other verifier responses,\n   see\
    \ Section 6.2.2.\n   In order to verify an Identity header field in a message,\
    \ an entity\n   acting as a verifier MUST perform the following steps, in the\
    \ order\n   specified below.  Note that when an Identity header field contains\
    \ a\n   full-form PASSporT object, the verifier MUST follow the additional\n \
    \  procedures in Section 6.2.4.\n   Step 1: Check for an Unsupported \"ppt\"\n\
    \   The verifier MUST inspect any optional \"ppt\" parameter appearing in\n  \
    \ the Identity header.  If no \"ppt\" parameter is present, then the\n   verifier\
    \ proceeds normally with Steps 2 through 5.  If a \"ppt\"\n   parameter value\
    \ is present and the verifier does not support it,\n   it MUST ignore the Identity\
    \ header field.  If a supported \"ppt\"\n   parameter value is present, the verifier\
    \ proceeds with Step 2 and\n   will ultimately follow the \"ppt\" variations described\
    \ in Step 5.\n   Step 2: Determine the Originator's Identity\n   In order to determine\
    \ whether the signature for the identity field\n   should be over the entire identity\
    \ field URI or just a telephone\n   number, the verification service MUST follow\
    \ the process described in\n   Section 8.1.  The information in that section will\
    \ lead to either the\n   telephone number canonicalization procedures in Section\
    \ 8.3 for\n   telephone numbers or the URI normalization procedures described\
    \ in\n   Section 8.5 for domain names.\n   Step 3: Identify Credential for Validation\n\
    \   The verifier must ensure that it has access to the proper keying\n   material\
    \ to validate the signature in the Identity header field; this\n   usually involves\
    \ dereferencing a URI in the \"info\" parameter of the\n   Identity header field.\
    \  See Section 7.2 for more information on these\n   procedures.  If the verifier\
    \ does not support the credential\n   described in the \"info\" parameter, then\
    \ it treats the credential for\n   this header field as unsupported.\n   Step\
    \ 4: Check the Freshness of Date\n   The verifier furthermore ensures that the\
    \ value of the Date header\n   field of the request meets local policy for freshness\
    \ (sixty seconds\n   is RECOMMENDED) and that it falls within the validity period\
    \ of the\n   credential used to sign the Identity header field.  For more on the\n\
    \   attacks this prevents, see Section 12.1.  If the full form of the\n   PASSporT\
    \ is present, the verifier SHOULD compare the \"iat\" value in\n   the PASSporT\
    \ to the Date header field value in the request.  If the\n   two are different,\
    \ and the \"iat\" value differs from the Date header\n   field value but remains\
    \ within verification service policy for\n   freshness, the verification service\
    \ SHOULD perform the computation\n   required by Step 5, using the \"iat\" value\
    \ instead of the Date header\n   field value.\n   Step 5: Validate the Signature\n\
    \   The verifier MUST validate the signature in the Identity header field\n  \
    \ over the PASSporT object.  For baseline PASSporT objects (with no\n   Identity\
    \ header field \"ppt\" parameter), the verifier MUST follow the\n   procedures\
    \ for generating the signature over a PASSporT object as\n   described in Section\
    \ 4.  If a \"ppt\" parameter is present (and, per\n   Step 1, is supported), the\
    \ verifier follows the procedures for that\n   \"ppt\" (see Section 9).  If a\
    \ verifier determines that the signature\n   in the Identity header field does\
    \ not correspond to the reconstructed\n   signed-identity-digest, then the Identity\
    \ header field should be\n   considered invalid.\n"
- title: 6.2.1.  Authorization of Requests
  contents:
  - "6.2.1.  Authorization of Requests\n   The verification of an Identity header\
    \ field does not entail any\n   particular treatment of the request.  The handling\
    \ of the message\n   after the verification process depends on how the verification\n\
    \   service is implemented and on local policy.  This specification\n   does not\
    \ propose any authorization policy for UAs or proxy servers to\n   follow based\
    \ on the presence of a valid Identity header field, the\n   presence of an invalid\
    \ Identity header field, the absence of an\n   Identity header field, or the presence\
    \ of a stale Date header field\n   value.  However, it is anticipated that local\
    \ policies could involve\n   making different forwarding decisions in intermediary\n\
    \   implementations, or changing how the user is alerted or how identity\n   is\
    \ rendered in UA implementations.\n   The presence of multiple Identity header\
    \ fields within a message\n   raises the prospect that a verification service\
    \ could receive a\n   message containing both valid and invalid Identity header\
    \ fields.  As\n   a guideline, this specification recommends that only if a verifier\n\
    \   determines that all Identity header fields within a message are\n   invalid\
    \ should the request be considered to have an invalid identity.\n   If at least\
    \ one Identity header field value is valid and from a\n   trusted source, then\
    \ relying parties can use that header for\n   authorization decisions regardless\
    \ of whether other untrusted or\n   invalid Identity headers appear in a request.\n"
- title: 6.2.2.  Failure Response Codes Sent by a Verification Service
  contents:
  - "6.2.2.  Failure Response Codes Sent by a Verification Service\n   [RFC4474] originally\
    \ defined four response codes for failure\n   conditions specific to the Identity\
    \ header field and its original\n   mechanism.  These status codes are retained\
    \ in this specification,\n   with some slight modifications.  Also, this specification\
    \ details\n   responding with a 403 \"Forbidden\" response when a stale Date header\n\
    \   field value is received; see below.\n   A 428 response will be sent (per Section\
    \ 6.2) when an Identity header\n   field is required but no Identity header field\
    \ without a \"ppt\"\n   parameter or with a supported \"ppt\" value has been received.\
    \  In the\n   case where one or more Identity header fields with unsupported \"\
    ppt\"\n   values have been received, then a verification service may send a 428\n\
    \   with a human-readable reason phrase like \"Use Supported PASSporT\n   Format\"\
    .  Note, however, that this specification gives no guidance on\n   how a verification\
    \ service might decide to require an Identity header\n   field for a particular\
    \ SIP request.  Such authorization policies are\n   outside the scope of this\
    \ specification.\n   The 436 \"Bad Identity Info\" response code indicates an\
    \ inability to\n   acquire the credentials needed by the verification service\
    \ for\n   validating the signature in an Identity header field.  Again, given\n\
    \   the potential presence of multiple Identity header fields, this\n   response\
    \ code should only be sent when the verification service is\n   unable to dereference\
    \ the URIs and/or acquire the credentials\n   associated with all Identity header\
    \ fields in the request.  This\n   failure code could be repairable if the authentication\
    \ service\n   resends the request with an \"info\" parameter pointing to a credential\n\
    \   that the verification service can access.\n   The 437 \"Unsupported Credential\"\
    \ response (previously\n   \"Unsupported Certificate\"; see Section 13.2) is sent\
    \ when a\n   verification service can acquire, or already holds, the credential\n\
    \   represented by the \"info\" parameter of at least one Identity header\n  \
    \ field in the request but does not support said credential(s), for\n   reasons\
    \ such as failing to trust the issuing certification authority\n   (CA) or failing\
    \ to support the algorithm with which the credential\n   was signed.\n   The 438\
    \ \"Invalid Identity Header\" response indicates that of the set\n   of Identity\
    \ header fields in a request, no header field with a valid\n   and supported PASSporT\
    \ object has been received.  Like the 428\n   response, this is sent by a verification\
    \ service when its local\n   policy dictates that a broken signature in an Identity\
    \ header field\n   is grounds for rejecting a request.  Note that in some cases,\
    \ an\n   Identity header field may be broken for other reasons than that an\n\
    \   originator is attempting to spoof an identity: for example, when a\n   transit\
    \ network alters the Date header field of the request.  Sending\n   a full-form\
    \ PASSporT can repair some of these conditions (see\n   Section 6.2.4), so the\
    \ recommended way to attempt to repair this\n   failure is to retry the request\
    \ with the full form of PASSporT if it\n   had originally been sent with the compact\
    \ form.  The alternative\n   reason phrase \"Invalid PASSporT\" can be used when\
    \ an extended\n   full-form PASSporT lacks required headers or claims, or when\
    \ an\n   extended full-form PASSporT signaled with the \"ppt\" parameter lacks\n\
    \   required claims for that extension.  Sending a string along these\n   lines\
    \ will help humans debugging the sending system.\n   Finally, a 403 response may\
    \ be sent when the verification service\n   receives a request with a Date header\
    \ field value that is older than\n   the local policy for freshness permits. \
    \ The same response may be\n   used when the \"iat\" in the full form of a PASSporT\
    \ has a value older\n   than the local policy for freshness permits.  The reason\
    \ phrase\n   \"Stale Date\" can be sent to help humans debug the failure.\n  \
    \ Future specifications may explore ways, including Reason codes or\n   Warning\
    \ headers, to communicate further information that could be\n   used to disambiguate\
    \ the source of errors in cases with multiple\n   Identity headers in a single\
    \ request or to provide similar detailed\n   feedback for debugging purposes.\n"
- title: 6.2.3.  Handling Retried Requests
  contents:
  - "6.2.3.  Handling Retried Requests\n   If a verification service sends a failure\
    \ response in the backwards\n   direction, the authentication service may retry\
    \ the request as\n   described in Section 6.1.1.  If the authentication service\
    \ is\n   instantiated at a proxy server, then it will retry the request as a\n\
    \   sequential fork.  Verification services implemented at a proxy server\n  \
    \ will recognize this request as a spiral rather than a loop due to the\n   proxy\
    \ behavior fix documented in [RFC5393], Section 4.2.  However, if\n   the verification\
    \ service is implemented in an endpoint, the endpoint\n   will need to override\
    \ the default UAS behavior (in particular, the\n   SHOULD in [RFC3261], Section\
    \ 8.2.2.2) to accept this request as a\n   spiral rather than a loop.\n"
- title: 6.2.4.  Handling the Full Form of PASSporT
  contents:
  - "6.2.4.  Handling the Full Form of PASSporT\n   If the full form of PASSporT is\
    \ present in an Identity header, this\n   permits the use of optional extensions\
    \ as described in [RFC8225],\n   Section 8.3.  Furthermore, the verification service\
    \ can extract from\n   the \"orig\" and \"dest\" elements of the PASSporT full\
    \ form the\n   canonical telephone numbers created by the authentication service,\
    \ as\n   well as an \"iat\" claim corresponding to the Date header field that\n\
    \   the authentication service used.  These values may be used to debug\n   canonicalization\
    \ problems or to avoid unnecessary signature breakage\n   caused by intermediaries\
    \ that alter certain SIP header field values\n   in transit.\n   However, the\
    \ verification service MUST NOT treat the value in the\n   \"orig\" of a full-form\
    \ PASSporT as the originating identity of the\n   call: the originating identity\
    \ of the call is always derived from the\n   SIP signaling, and it is that value,\
    \ per the procedures above in\n   Section 6.2 Step 2, that is used to recompute\
    \ the signature at the\n   verification service.  That value, rather than the\
    \ value inside the\n   PASSporT object, is rendered to an end user in ordinary\
    \ SIP\n   operations, and if a verification service were to simply trust that\n\
    \   the value in the \"orig\" corresponded to the call that it received\n   without\
    \ comparing it to the call signaling, this would enable various\n   cut-and-paste\
    \ attacks.  As an optimization, when the full form is\n   present, the verification\
    \ service MAY delay performing that\n   cryptographic operation and first compute\
    \ its own canonicalization of\n   an originating telephone number to compare it\
    \ to the values in the\n   \"orig\" element of PASSporT.  This would allow the\
    \ verification\n   service to ascertain whether or not the two ends agree on the\n\
    \   canonical number form; if they do not, then surely the signature\n   validation\
    \ would fail.\n"
- title: 7.  Credentials
  contents:
  - "7.  Credentials\n   This section gives general guidance on the use of credential\
    \ systems\n   by authentication and verification services, as well as requirements\n\
    \   that must be met by credential systems that conform with this\n   architecture.\
    \  It does not mandate any specific credential system.\n   Furthermore, this specification\
    \ allows either a UA or a proxy server\n   to provide the authentication service\
    \ function and/or the\n   verification service function.  For the purposes of\
    \ end-to-end\n   security, it is obviously preferable for end systems to acquire\
    \ their\n   own credentials; in this case, UAs can act as authentication\n   services.\
    \  However, for some deployments, end-user credentials may be\n   neither practical\
    \ nor affordable, given the potentially large number\n   of SIP UAs (phones, PCs,\
    \ laptops, PDAs, gaming devices) that may be\n   employed by a single user.  Synchronizing\
    \ keying material across\n   multiple devices may be prohibitively complex and\
    \ require quite a\n   good deal of additional endpoint behavior.  Managing several\n\
    \   credentials for the various devices could also be burdensome.  Thus,\n   for\
    \ reasons of credential management alone, implementing the\n   authentication\
    \ service at an intermediary may be more practical.\n   This trade-off needs to\
    \ be understood by implementers of this\n   specification.\n"
- title: 7.1.  Credential Use by the Authentication Service
  contents:
  - "7.1.  Credential Use by the Authentication Service\n   In order to act as an\
    \ authentication service, a SIP entity must\n   possess the private keying material\
    \ of one or more credentials that\n   cover domain names or telephone numbers.\
    \  These credentials may\n   represent authority over one domain (such as example.com)\
    \ or a set of\n   domains enumerated by the credential.  Similarly, a credential\
    \ may\n   represent authority over a single telephone number or a range of\n \
    \  telephone numbers.  The way that the scope of a credential's\n   authority\
    \ is expressed is specific to the credential mechanism.\n   Authorization of the\
    \ use of a particular username or telephone number\n   in the From header field\
    \ value is a matter of local policy for the\n   authentication service, one that\
    \ depends greatly on the manner in\n   which authentication is performed.  For\
    \ non-telephone number user\n   parts, one policy might be as follows: the username\
    \ given in the\n   \"username\" parameter of the Proxy-Authorization header field\
    \ must\n   correspond exactly to the username in the From header field of the\n\
    \   SIP message.  However, there are many cases in which this is too\n   limiting\
    \ or inappropriate; a realm might use \"username\" parameters in\n   the Proxy-Authorization\
    \ header field that do not correspond to the\n   user portion of From header fields,\
    \ or a user might manage multiple\n   accounts in the same administrative domain.\
    \  In this latter case, a\n   domain might maintain a mapping between the values\
    \ in the \"username\"\n   parameter of the Proxy-Authorization header field and\
    \ a set of one or\n   more SIP URIs that might legitimately be asserted for that\n\
    \   \"username\".  For example, the username can correspond to the \"private\n\
    \   identity\" as defined by the Third Generation Partnership Project\n   (3GPP)\
    \ [TS-3GPP.23.228], in which case the From header field can\n   contain any one\
    \ of the public identities associated with this private\n   identity.  In this\
    \ instance, another policy might be as follows: the\n   URI in the From header\
    \ field must correspond exactly to one of the\n   mapped URIs associated with\
    \ the \"username\" given in the\n   Proxy-Authorization header field.  This is\
    \ a suitable approach for\n   telephone numbers in particular.\n   This specification\
    \ could also be used with credentials that cover a\n   single name or URI, such\
    \ as alice@example.com or\n   sip:alice@example.com.  This would require a modification\
    \ to\n   authentication service behavior to operate on a whole URI rather than\n\
    \   a domain name.  Because this is not believed to be a pressing use\n   case,\
    \ this is deferred to future work, but implementers should note\n   this as a\
    \ possible future direction.\n   Exceptions to such authentication service policies\
    \ arise for cases\n   like anonymity; if the AoR asserted in the From header field\
    \ uses a\n   form like \"sip:anonymous@example.com\" (see [RFC3323]), then the\n\
    \   \"example.com\" proxy might authenticate only that the user is a valid\n \
    \  user in the domain and insert the signature over the From header\n   field\
    \ as usual.\n"
- title: 7.2.  Credential Use by the Verification Service
  contents:
  - "7.2.  Credential Use by the Verification Service\n   In order to act as a verification\
    \ service, a SIP entity must have a\n   way to acquire credentials for authorities\
    \ over particular domain\n   names, telephone numbers, and/or number ranges. \
    \ Dereferencing the\n   URI found in the \"info\" parameter of the Identity header\
    \ field (as\n   described in Section 7.3) MUST be supported by all verification\n\
    \   service implementations to create a baseline means of credential\n   acquisition.\
    \  Provided that the credential used to sign a message is\n   not previously known\
    \ to the verifier, SIP entities SHOULD discover\n   this credential by dereferencing\
    \ the \"info\" parameter, unless they\n   have some implementation-specific way\
    \ of acquiring the needed keying\n   material, such as an offline store of periodically\
    \ updated\n   credentials.  The 436 \"Bad Identity Info\" response exists for\
    \ cases\n   where the verification service cannot dereference the URI in the\n\
    \   \"info\" parameter.\n   This specification does not propose any particular\
    \ policy for a\n   verification service to determine whether or not the holder\
    \ of a\n   credential is the appropriate party to sign for a given SIP identity.\n\
    \   Guidance on this is deferred to credential mechanism specifications.\n   Verification\
    \ service implementations supporting this specification\n   may wish to have some\
    \ means of retaining credentials (in accordance\n   with normal practices for\
    \ credential lifetimes and revocation) in\n   order to prevent themselves from\
    \ needlessly downloading the same\n   credential every time a request from the\
    \ same identity is received.\n   Credentials cached in this manner may be indexed\
    \ in accordance with\n   local policy: for example, by their scope of authority\
    \ or by the URI\n   given in the \"info\" parameter value.  Further consideration\
    \ of how to\n   cache credentials is deferred to the credential mechanism\n  \
    \ specifications.\n"
- title: 7.3.  "info" Parameter URIs
  contents:
  - "7.3.  \"info\" Parameter URIs\n   An \"info\" parameter MUST contain a URI that\
    \ dereferences to a\n   resource that contains the public key components of the\
    \ credential\n   used by the authentication service to sign a request.  It is\n\
    \   essential that a URI in the \"info\" parameter be dereferencable by any\n\
    \   entity that could plausibly receive the request.  For common cases,\n   this\
    \ means that the URI SHOULD be dereferencable by any entity on the\n   public\
    \ Internet.  In constrained deployment environments, a service\n   private to\
    \ the environment MAY be used instead.\n   Beyond providing a means of accessing\
    \ credentials for an identity,\n   the \"info\" parameter further serves as a\
    \ means of differentiating\n   which particular credential was used to sign a\
    \ request, when there\n   are potentially multiple authorities eligible to sign.\
    \  For example,\n   imagine a case where a domain implements the authentication\
    \ service\n   role for a range of telephone numbers and a UA belonging to Alice\
    \ has\n   acquired a credential for a single telephone number within that\n  \
    \ range.  Either would be eligible to sign a SIP request for the number\n   in\
    \ question.  Verification services, however, need a means to\n   differentiate\
    \ which one performed the signature.  The \"info\"\n   parameter performs that\
    \ function.\n"
- title: 7.4.  Credential System Requirements
  contents:
  - "7.4.  Credential System Requirements\n   This document makes no recommendation\
    \ for the use of any specific\n   credential system.  Today, there are two primary\
    \ credential systems\n   in place for proving ownership of domain names: certificates\
    \ (e.g.,\n   X.509 v3; see [RFC5280]) and the domain name system itself (e.g.,\n\
    \   DNS-Based Authentication of Named Entities (DANE); see [RFC6698]).\n   It\
    \ is envisioned that either could be used in the SIP identity\n   context: an\
    \ \"info\" parameter could, for example, give an HTTP URL of\n   the Content-Type\
    \ \"application/pkix-cert\" pointing to a certificate\n   (following the conventions\
    \ of [RFC2585]).  The \"info\" parameter might\n   use the DNS URL scheme (see\
    \ [RFC4501]) to designate keys in the DNS.\n   While no comparable public credentials\
    \ exist for telephone numbers,\n   either approach could be applied to telephone\
    \ numbers.  A credential\n   system based on certificates is given in [RFC8226],\
    \ but this\n   specification can work with other credential systems; for example,\n\
    \   using the DNS was proposed in [CIDER].\n   In order for a credential system\
    \ to work with this mechanism, its\n   specification must detail:\n   o  which\
    \ URI schemes the credential will use in the \"info\" parameter,\n      and any\
    \ special procedures required to dereference the URIs,\n   o  how the verifier\
    \ can learn the scope of the credential,\n   o  any special procedures required\
    \ to extract keying material from\n      the resources designated by the URI,\n\
    \   o  any algorithms required to validate the credentials (e.g., for\n      certificates,\
    \ any algorithms used by certificate authorities to\n      sign certificates themselves),\
    \ and\n   o  how the associated credentials will support the mandatory signing\n\
    \      algorithm(s) required by PASSporT [RFC8225].\n   SIP entities cannot reliably\
    \ predict where SIP requests will\n   terminate.  When choosing a credential scheme\
    \ for deployments of this\n   specification, it is therefore essential that the\
    \ trust anchor(s) for\n   credentials be widely trusted or that deployments restrict\
    \ the use of\n   this mechanism to environments where the reliance on particular\
    \ trust\n   anchors is assured by business arrangements or similar constraints.\n\
    \   Note that credential systems must address key lifecycle management\n   concerns:\
    \ were a domain to change the credential available at the\n   Identity header\
    \ field \"info\" parameter URI before a verifier\n   evaluates a request signed\
    \ by an authentication service, this would\n   cause obvious verifier failures.\
    \  When a rollover occurs,\n   authentication services SHOULD thus provide new\
    \ \"info\" URIs for each\n   new credential and SHOULD continue to make older\
    \ key acquisition URIs\n   available for a duration longer than the plausible\
    \ lifetime of a SIP\n   transaction (a minute would most likely suffice).\n"
- title: 8.  Identity Types
  contents:
  - "8.  Identity Types\n   The STIR problem statement [RFC7340] focuses primarily\
    \ on cases where\n   the called and calling parties identified in the To and From\
    \ header\n   field values use telephone numbers, as this remains the dominant\
    \ use\n   case in the deployment of SIP.  However, the Identity header\n   mechanism\
    \ also works with SIP URIs without telephone numbers (of the\n   form \"sip:user@host\"\
    ) and, potentially, other identifiers when SIP\n   interworks with other protocols.\n\
    \   Authentication services confirm the identity of the originator of a\n   call,\
    \ which is typically found in the From header field value.  The\n   guidance in\
    \ this specification also applies to extracting the URI\n   containing the originator's\
    \ identity from the P-Asserted-Identity\n   header field value instead of the\
    \ From header field value.  In some\n   trusted environments, the P-Asserted-Identity\
    \ header field is used\n   in lieu of the From header field to convey the AoR\
    \ or telephone\n   number of the originator of a request; where it does, local\
    \ policy\n   might therefore dictate that the canonical identity derives from\
    \ the\n   P-Asserted-Identity header field rather than the From header field.\n\
    \   Ultimately, in any case where local policy canonicalizes the identity\n  \
    \ into a form different from how it appears in the From header field,\n   the\
    \ use of the full form of PASSporT by authentication services is\n   RECOMMENDED,\
    \ but because the \"orig\" claim of PASSporT itself could\n   then divulge information\
    \ about users or networks, implementers should\n   be mindful of the guidelines\
    \ in Section 11.\n"
- title: 8.1.  Differentiating Telephone Numbers from URIs
  contents:
  - "8.1.  Differentiating Telephone Numbers from URIs\n   In order to determine whether\
    \ or not the user portion of a SIP URI is\n   a telephone number, authentication\
    \ services and verification services\n   MUST perform the following procedure\
    \ on any SIP URI they inspect that\n   contains a numeric user part.  Note that\
    \ the same procedures are\n   followed for creating the canonical form of a URI\
    \ found in the From\n   header field as the procedures used for a URI found in\
    \ the To header\n   field or the P-Asserted-Identity header field.\n   First,\
    \ implementations will ascertain if the user portion of the URI\n   constitutes\
    \ a telephone number.  Telephone numbers most commonly\n   appear in SIP header\
    \ field values in the username portion of a SIP\n   URI (e.g., \"sip:+17005551008@chicago.example.com;user=phone\"\
    ).  The\n   user part of SIP URIs with the \"user=phone\" parameter conforms to\
    \ the\n   syntax of the tel URI scheme [RFC3966].  It is also possible for a\n\
    \   tel URI to appear in SIP header fields outside the context of a SIP\n   or\
    \ Session Initiation Protocol Secure (SIPS) URI (e.g.,\n   \"tel:+17005551008\"\
    ).  Thus, in standards-compliant environments,\n   numbers will be explicitly\
    \ labeled by the use of tel URIs or the\n   \"user=phone\" parameter.\n   Alternatively,\
    \ implementations in environments that do not conform to\n   those standards MAY\
    \ follow local policies for identifying telephone\n   numbers.  For example, implementations\
    \ could infer that the user part\n   is a telephone number due to the presence\
    \ of the \"+\" indicator at the\n   start of the user portion.  Absent even that\
    \ indication, if there are\n   numbers present in the user portion, implementations\
    \ might\n   conceivably also detect that the user portion of the URI contains\
    \ a\n   telephone number by determining whether or not those numbers would be\n\
    \   dialable or routable in the local environment -- bearing in mind that\n  \
    \ the telephone number may be a valid E.164 number [E.164], a\n   nationally specific\
    \ number, or even a private branch exchange number.\n   Implementations could\
    \ also rely on external hints: for example, a\n   verification service implementation\
    \ could infer from the type of\n   credential that signed a request that the signature\
    \ must be over a\n   telephone number.\n   Regardless of how the implementation\
    \ detects telephone numbers, once\n   a telephone number has been detected, implementations\
    \ SHOULD follow\n   the procedures in Section 8.3.  If the URI field does not\
    \ contain a\n   telephone number or if the result of the canonicalization of the\
    \ From\n   header field value does not form a valid E.164 telephone number, the\n\
    \   authentication service and/or verification service SHOULD treat the\n   entire\
    \ URI as a SIP URI and apply the procedures in Section 8.5.\n   These URI normalization\
    \ procedures are invoked to canonicalize the\n   URI before it is included in\
    \ a PASSporT object in, for example, a\n   \"uri\" claim.  See Section 8.5 for\
    \ that behavior.\n"
- title: 8.2.  Authority for Telephone Numbers
  contents:
  - "8.2.  Authority for Telephone Numbers\n   In order for telephone numbers to be\
    \ used with the mechanism\n   described in this document, authentication services\
    \ must receive\n   credentials from an authority for telephone numbers or telephone\n\
    \   number ranges, and verification services must trust the authority\n   employed\
    \ by the authentication service that signs a request.  Per\n   Section 7.4, enrollment\
    \ procedures and credential management are\n   outside the scope of this document;\
    \ approaches to credential\n   management for telephone numbers are discussed\
    \ in [RFC8226].\n"
- title: 8.3.  Telephone Number Canonicalization Procedures
  contents:
  - "8.3.  Telephone Number Canonicalization Procedures\n   Once an implementation\
    \ has identified a telephone number, it must\n   construct a number string.  That\
    \ requires performing the following\n   steps:\n   o  Implementations MUST drop\
    \ any \"+\"s, internal dashes, parentheses,\n      or other non-numeric characters,\
    \ except for the \"#\" or \"*\" keys\n      used in some special service numbers\
    \ (typically, these will appear\n      only in the To header field value).  This\
    \ MUST result in an ASCII\n      string limited to \"#\", \"*\", and digits without\
    \ whitespace or\n      visual separators.\n   o  Next, an implementation must\
    \ assess if the number string is a\n      valid, globally routable number with\
    \ a leading country code.\n      If not, implementations SHOULD convert the number\
    \ into E.164\n      format, adding a country code if necessary; this may involve\n\
    \      transforming the number from a dial string (see [RFC3966]),\n      removing\
    \ any national or international dialing prefixes or\n      performing similar\
    \ procedures.  It is only in the case that an\n      implementation cannot determine\
    \ how to convert the number to a\n      globally routable format that this step\
    \ may be skipped.  This will\n      be the case, for example, for nationally specific\
    \ service numbers\n      (e.g., 911, 112); however, calls to those numbers are\
    \ routed in a\n      very strict fashion, which ordinarily prevents them from\
    \ reaching\n      entities that don't understand the numbers.\n   o  Some domains\
    \ may need to take unique steps to convert their\n      numbers into a global\
    \ format, and such transformations during\n      canonicalization can also be\
    \ made in accordance with specific\n      policies used within a local domain.\
    \  For example, one domain may\n      only use local number formatting and need\
    \ to convert all To/From\n      header field user portions to E.164 by prepending\
    \ country-code and\n      region-code digits; another domain might have prefixed\
    \ usernames\n      with trunk-routing codes, in which case the canonicalization\
    \ will\n      need to remove the prefix.  This specification cannot anticipate\n\
    \      all of the potential transformations that might be useful.\n   o  The resulting\
    \ canonical number string will be used as input to the\n      hash calculation\
    \ during signing and verifying processes.\n   The ABNF of this number string is:\n\
    \             tn-spec =  1*tn-char\n             tn-char = \"#\" / \"*\" / DIGIT\n\
    \   The resulting number string is used in the construction of the\n   telephone\
    \ number field(s) in a PASSporT object.\n"
- title: 8.4.  Authority for Domain Names
  contents:
  - "8.4.  Authority for Domain Names\n   To use a SIP URI as an identity in this\
    \ mechanism requires\n   authentication and verification systems to support standard\n\
    \   mechanisms for proving authority over a domain name: that is, the\n   domain\
    \ name in the host portion of the SIP URI.\n   A verifier MUST evaluate the correspondence\
    \ between the user's\n   identity and the signing credential by following the\
    \ procedures\n   defined in [RFC5922], Section 7.2.  While [RFC5922] deals with\
    \ the\n   use of TLS and is specific to certificates, the procedures described\n\
    \   are applicable to verifying identity if one substitutes the \"hostname\n \
    \  of the server\" for the domain portion of the user's identity in the\n   From\
    \ header field of a SIP request with an Identity header field.\n   This process\
    \ is complicated by two deployment realities.  In the\n   first place, credentials\
    \ have varying ways of describing their\n   subjects and may indeed have multiple\
    \ subjects, especially in\n   \"virtual hosting\" cases where multiple domains\
    \ are managed by a\n   single application (see [RFC5922], Section 7.8).  Secondly,\
    \ some SIP\n   services may delegate SIP functions to a subordinate domain and\n\
    \   utilize the procedures in [RFC3263] that allow requests for, say,\n   \"example.com\"\
    \ to be routed to \"sip.example.com\".  As a result, a user\n   with the AoR \"\
    sip:alice@example.com\" may process requests through a\n   host like \"sip.example.com\"\
    , and it may be that latter host that acts\n   as an authentication service.\n\
    \   To address the second of these problems, a domain that deploys an\n   authentication\
    \ service on a subordinate host might supply that host\n   with the private keying\
    \ material associated with a credential whose\n   subject is a domain name that\
    \ corresponds to the domain portion of\n   the AoRs that the domain distributes\
    \ to users.  Note that this\n   corresponds to the comparable case of routing\
    \ inbound SIP requests to\n   a domain.  When the NAPTR and SRV procedures of\
    \ [RFC3263] are used to\n   direct requests to a domain name other than the domain\
    \ in the\n   original Request-URI (e.g., for \"sip:alice@example.com\", the\n\
    \   corresponding SRV records point to the service \"sip1.example.org\"),\n  \
    \ the client expects that the certificate passed back in any TLS\n   exchange\
    \ with that host will correspond exactly with the domain of\n   the original Request-URI,\
    \ not the domain name of the host.\n   Consequently, in order to make inbound\
    \ routing to such SIP services\n   work, a domain administrator must similarly\
    \ be willing to share the\n   domain's private key with the service.  This design\
    \ decision was made\n   to compensate for the insecurity of the DNS, and it makes\
    \ certain\n   potential approaches to DNS-based \"virtual hosting\" unsecurable\
    \ for\n   SIP in environments where domain administrators are unwilling to\n \
    \  share keys with hosting services.\n"
- title: 8.5.  URI Normalization
  contents:
  - "8.5.  URI Normalization\n   Just as telephone numbers may undergo a number of\
    \ syntactic\n   transformations during transit, the same can happen to SIP and\
    \ SIPS\n   URIs without telephone numbers as they traverse certain\n   intermediaries.\
    \  Therefore, when generating a PASSporT object based\n   on a SIP request, any\
    \ SIP and SIPS URIs must be transformed into a\n   canonical form that captures\
    \ the AoR represented by the URI before\n   they are provisioned in PASSporT claims\
    \ such as \"uri\".  The URI\n   normalization procedures required are as follows.\n\
    \   Following the ABNF of [RFC3261], the SIP or SIPS URI in question MUST\n  \
    \ discard all elements after the \"hostport\" of the URI, including all\n   uri-parameters\
    \ and escaped headers, from its syntax.  Of the userinfo\n   component of the\
    \ SIP URI, only the user element will be retained: any\n   password (and any leading\
    \ \":\" before the password) MUST be removed,\n   and since this userinfo necessarily\
    \ does not contain a\n   telephone-subscriber component, no further parameters\
    \ can appear in\n   the user portion.\n   The hostport portion of the SIP or SIPS\
    \ URI MUST similarly be\n   stripped of any trailing port along with the \":\"\
    \ that proceeds the\n   port, leaving only the host.\n   The ABNF of this canonical\
    \ URI form (following the syntax defined in\n   [RFC3261]) is:\n             canon-uri\
    \ =  ( \"sip\" / \"sips\" ) \":\" user \"@\" host\n   Finally, the URI will be\
    \ subject to the syntax-based URI\n   normalization procedures of [RFC3986], Section\
    \ 6.2.2.\n   Implementations MUST perform case normalization (rendering the\n\
    \   scheme, user, and host all lowercase) and percent-encoding\n   normalization\
    \ (decoding any percent-encoded octet that corresponds to\n   an unreserved character,\
    \ per [RFC3986], Section 2.3).  However, note\n   that normalization procedures\
    \ face known challenges in some\n   internationalized environments (see [IRI-COMPARISON])\
    \ and that\n   perfect normalization of URIs may not be possible in those\n  \
    \ environments.\n   For future PASSporT applications, it may be desirable to provide\
    \ an\n   identifier without an attached protocol scheme.  Future\n   specifications\
    \ that define PASSporT claims for SIP as a using\n   protocol could use these\
    \ basic procedures but could eliminate the\n   scheme component.  A more exact\
    \ definition is left to future\n   specifications.\n"
- title: 9.  Extensibility
  contents:
  - "9.  Extensibility\n   As future requirements may warrant increasing the scope\
    \ of the\n   Identity mechanism, this specification specifies an optional \"ppt\"\
    \n   parameter of the Identity header field, which mirrors the \"ppt\"\n   header\
    \ in PASSporT.  The \"ppt\" parameter value MUST consist of a\n   token containing\
    \ an extension specification, which denotes an\n   extended set of one or more\
    \ signed claims per the type extensibility\n   mechanism specified in [RFC8225],\
    \ Section 8.  Note that per the\n   guidance in that section, \"ppt\" is used\
    \ only to enforce a mandatory\n   extension: optional claims may be added to any\
    \ PASSporT object\n   without requiring the use of \"ppt\", but the compact form\
    \ of PASSporT\n   MUST NOT be used when optional claims are present in the PASSporT\n\
    \   payload.\n   The potential for extensions is one of the primary motivations\
    \ for\n   allowing the presence of multiple Identity header fields in the same\n\
    \   SIP request.  It is envisioned that future extensions might allow for\n  \
    \ alternate information to be signed or explicitly allow different\n   parties\
    \ to provide the signatures than the authorities envisioned by\n   baseline STIR.\
    \  A request might, for example, have one Identity added\n   by an authentication\
    \ service at the originating administrative domain\n   and then another Identity\
    \ header field added by some further\n   intermediary using a PASSporT extension.\
    \  While this specification\n   does not define any such specific purpose for\
    \ multiple Identity\n   header fields, implementations MUST support receiving\
    \ multiple header\n   fields for reasons of future compatibility.\n   An authentication\
    \ service cannot assume that verifiers will\n   understand any given extension.\
    \  Verifiers that do support an\n   extension may then trigger appropriate application-level\
    \ behavior in\n   the presence of an extension; authors of extensions should provide\n\
    \   appropriate extension-specific guidance to application developers on\n   this\
    \ point.\n"
- title: 10.  Backwards Compatibility with RFC 4474
  contents:
  - "10.  Backwards Compatibility with RFC 4474\n   This specification introduces\
    \ several significant changes from the\n   version of the Identity header field\
    \ defined by [RFC4474].  However,\n   due to the problems enumerated in [SIP-RFC4474-CONCERNS],\
    \ it is not\n   believed that the original Identity header field has seen any\n\
    \   deployment, or even implementation in deployed products.\n   As such, this\
    \ mechanism contains no provisions for signatures\n   generated with this specification\
    \ to work with implementations\n   compliant with [RFC4474], nor does it contain\
    \ any related backwards-\n   compatibility provisions.  Hypothetically, were an\
    \ implementation\n   compliant with [RFC4474] to receive messages containing this\
    \ revised\n   version of the Identity header field, it would likely fail the\n\
    \   request with a 436 response code due to the absence of an\n   Identity-Info\
    \ header field (Section 4).  Implementations of this\n   specification, for debugging\
    \ purposes, might interpret a 436 with a\n   reason phrase of \"Bad Identity Info\"\
    \ (previously \"Bad Identity-Info\";\n   see Section 13.2) as an indication that\
    \ the request has failed\n   because it reached a (hypothetical) verification\
    \ service that is\n   compliant with [RFC4474].\n"
- title: 11.  Privacy Considerations
  contents:
  - "11.  Privacy Considerations\n   The purpose of this mechanism is to provide a\
    \ reliable identification\n   of the originator of a SIP request, specifically\
    \ a cryptographic\n   assurance that an authority asserts the originator can claim\
    \ the URI\n   the identity stipulated in the request.  This URI may contain or\n\
    \   imply a variety of personally identifying information, including the\n   name\
    \ of a human being, their place of work or service provider, and,\n   possibly,\
    \ further details.  The intrinsic privacy risks associated\n   with that URI are,\
    \ however, no different from those of baseline SIP.\n   Per the guidance in [RFC6973],\
    \ implementers should make users aware\n   of the privacy trade-off of providing\
    \ secure identity.\n   The identity mechanism presented in this document is compatible\
    \ with\n   the standard SIP practices for privacy described in [RFC3323].  A SIP\n\
    \   proxy server can act as both a privacy service as described in\n   [RFC3323]\
    \ and an authentication service.  Since a UA can provide any\n   From header field\
    \ value that the authentication service is willing to\n   authorize, there is\
    \ no reason why private SIP URIs that contain\n   legitimate domains (e.g., sip:anonymous@example.com)\
    \ cannot be signed\n   by an authentication service.  The construction of the\
    \ Identity\n   header field is the same for private URIs as it is for any other\
    \ sort\n   of URIs.  Similar practices could be used to support opportunistic\n\
    \   signing of SIP requests for UA-integrated authentication services\n   with\
    \ self-signed certificates, though that is outside the scope of\n   this specification\
    \ and is left as a matter for future investigation.\n   Note, however, that even\
    \ when using anonymous SIP URIs, an\n   authentication service must possess a\
    \ certificate corresponding to\n   the host portion of the addr-spec of the From\
    \ header field value of\n   the request; accordingly, using domains like \"anonymous.invalid\"\
    \n   will not be usable by privacy services that simultaneously act as\n   authentication\
    \ services.  The assurance offered by the usage of\n   anonymous URIs with a valid\
    \ domain portion is \"this is a known user\n   in my domain that I have authenticated,\
    \ but I am keeping its identity\n   private.\"\n   It is worth noting two features\
    \ of this more anonymous form of\n   identity.  One can eliminate any identifying\
    \ information in a domain\n   through the use of the domain \"anonymous.invalid\"\
    , but we must then\n   acknowledge that it is difficult for a domain to be both\
    \ anonymous\n   and authenticated.  The use of the domain \"anonymous.invalid\"\
    \ entails\n   that no corresponding authority for the domain can exist, and as\
    \ a\n   consequence, authentication service functions for that domain are\n  \
    \ meaningless.  The second feature is more germane to the threats this\n   document\
    \ mitigates [RFC7375].  None of the relevant attacks, all of\n   which rely on\
    \ the attacker taking on the identity of a victim or\n   hiding their identity\
    \ using someone else's identity, are enabled by\n   an anonymous identity.  As\
    \ such, the inability to assert an authority\n   over an anonymous domain is irrelevant\
    \ to our threat model.\n   [RFC3325] defines the \"id\" priv-value token, which\
    \ is specific to the\n   P-Asserted-Identity header field.  The sort of assertion\
    \ provided by\n   the P-Asserted-Identity header field is very different from\
    \ the\n   Identity header field presented in this document.  It contains\n   additional\
    \ information about the originator of a message that may go\n   beyond what appears\
    \ in the From header field; P-Asserted-Identity\n   holds a definitive identity\
    \ for the originator that is somehow known\n   to a closed network of intermediaries.\
    \  Presumably, that network will\n   use this identity for billing or security\
    \ purposes.  The danger of\n   this network-specific information leaking outside\
    \ of the closed\n   network motivated the \"id\" priv-value token.  The \"id\"\
    \ priv-value\n   token has no implications for the Identity header field, and\
    \ privacy\n   services MUST NOT remove the Identity header field when a priv-value\n\
    \   of \"id\" appears in a Privacy header field.\n   The full form of the PASSporT\
    \ object provides the complete JSON\n   objects used to generate the signed-identity-digest\
    \ of the Identity\n   header field value, including the canonicalized form of\
    \ the telephone\n   number of the originator of a call if the signature is over\
    \ a\n   telephone number.  In some contexts, local policy may require a\n   canonicalization\
    \ that differs substantially from the original From\n   header field.  Depending\
    \ on those policies, potentially the full form\n   of PASSporT might divulge information\
    \ about the originating network\n   or user that might not appear elsewhere in\
    \ the SIP request.  Were it\n   to be used to reflect the contents of the P-Asserted-Identity\
    \ header\n   field, for example, then the object would need to be converted to\
    \ the\n   compact form when the P-Asserted-Identity header is removed to avoid\n\
    \   any such leakage outside of a trust domain.  Since, in those\n   contexts,\
    \ the canonical form of the originator's identity could not\n   be reassembled\
    \ by a verifier and thus the Identity signature\n   validation process would fail,\
    \ using P-Asserted-Identity with the\n   full form of PASSporT in this fashion\
    \ is NOT RECOMMENDED outside of\n   environments where SIP requests will never\
    \ leave the trust domain.\n   As a side note, history shows that closed networks\
    \ never stay closed\n   and one should design their implementation assuming connectivity\
    \ to\n   the broader Internet.\n   Finally, note that unlike [RFC3325], the mechanism\
    \ described in this\n   specification adds no information to SIP requests that\
    \ has privacy\n   implications -- apart from disclosing that an authentication\
    \ service\n   is willing to sign for an originator.\n"
- title: 12.  Security Considerations
  contents:
  - "12.  Security Considerations\n   This document describes a mechanism that provides\
    \ a signature over\n   the Date header field of SIP requests, parts of the To\
    \ and From\n   header fields, and (when present) any media keying material in\
    \ the\n   message body.  In general, the considerations related to the security\n\
    \   of these header fields are the same as those given in [RFC3261] for\n   including\
    \ header fields in tunneled \"message/sip\" MIME bodies (see\n   Section 23 of\
    \ [RFC3261] in particular).  This section details the\n   individual security\
    \ properties obtained by including each of these\n   header fields within the\
    \ signature; collectively, this set of header\n   fields provides the necessary\
    \ properties to prevent impersonation.\n   It addresses the solution-specific\
    \ attacks against in-band solutions\n   enumerated in [RFC7375], Section 4.1.\n"
- title: 12.1.  Protected Request Fields
  contents:
  - "12.1.  Protected Request Fields\n   The From header field value (in ordinary\
    \ operations) indicates the\n   identity of the originator of the message; for\
    \ the purposes of this\n   document, either the SIP AoR URI or an embedded telephone\
    \ number\n   provides the identity of a SIP user.  Note that in some deployments\n\
    \   the identity of the originator may reside in P-Asserted-Identity\n   instead.\
    \  The originator's identity is the key piece of information\n   that this mechanism\
    \ secures; the remainder of the signed parts of a\n   SIP request are present\
    \ to provide reference integrity and to prevent\n   certain types of cut-and-paste\
    \ attacks.\n   The Date header field value protects against cut-and-paste attacks,\n\
    \   as described in [RFC3261], Section 23.4.2.  That specification\n   recommends\
    \ that implementations notify the user of a potential\n   security issue if the\
    \ signed Date header field value is stale by an\n   hour or more.  To prevent\
    \ cut-and-paste of recently observed\n   messages, this specification instead\
    \ RECOMMENDS a shorter interval of\n   sixty seconds.  Implementations of this\
    \ specification MUST NOT deem\n   valid a request with an outdated Date header\
    \ field.  Note that per\n   the behavior described in [RFC3893], Section 10, servers\
    \ can keep\n   state of recently received requests, and thus if an Identity header\n\
    \   field is replayed by an attacker within the Date interval, verifiers\n   can\
    \ detect that it is spoofed because a message with an identical\n   Date from\
    \ the same source had recently been received.\n   It has been observed in the\
    \ wild that some networks change the Date\n   header field value of SIP requests\
    \ in transit; to accommodate that\n   type of scenario, alternative behavior might\
    \ be necessary.\n   Verification services that observe a signature validation\
    \ failure MAY\n   therefore reconstruct the Date header field component of the\n\
    \   signature from the \"iat\" carried in the full form of PASSporT:\n   provided\
    \ that time recorded by \"iat\" falls within the local policy\n   for freshness\
    \ that would ordinarily apply to the Date header, the\n   verification service\
    \ MAY treat the signature as valid, provided it\n   keeps adequate state to detect\
    \ recent replays.  Note that this will\n   require the inclusion of the full form\
    \ of the PASSporT object by\n   authentication services in networks where such\
    \ failures are observed.\n   The To header field value provides the identity of\
    \ the SIP user that\n   this request originally targeted.  Covering the identity\
    \ in the To\n   header field with the Identity signature serves two purposes.\
    \  First,\n   it prevents cut-and-paste attacks in which an Identity header field\n\
    \   from a legitimate request for one user is cut-and-pasted into a\n   request\
    \ for a different user.  Second, it preserves the starting URI\n   scheme of the\
    \ request; this helps prevent downgrade attacks against\n   the use of SIPS. \
    \ The To identity offers additional protection\n   against cut-and-paste attacks\
    \ beyond the Date header field.  For\n   example, without a signature over the\
    \ To identity, an attacker who\n   receives a call from a target could immediately\
    \ cut-and-paste the\n   Identity and From header field value from that INVITE\
    \ into a new\n   request to the target's voicemail service within the Date interval,\n\
    \   and the voicemail service would have no way of knowing that the\n   Identity\
    \ header field it received had been originally signed for a\n   call intended\
    \ for a different number.  However, note the caveats\n   below in Section 12.1.1.\n\
    \   When signing a request that contains a fingerprint of keying material\n  \
    \ in SDP for DTLS-SRTP [RFC5763], this mechanism always provides a\n   signature\
    \ over that fingerprint.  This signature prevents certain\n   classes of impersonation\
    \ attacks in which an attacker forwards or\n   cut-and-pastes a legitimate request.\
    \  Although the target of the\n   attack may accept the request, the attacker\
    \ will be unable to\n   exchange media with the target, as they will not possess\
    \ a key\n   corresponding to the fingerprint.  For example, there are some\n \
    \  baiting attacks, launched with the REFER method or through social\n   engineering,\
    \ where the attacker receives a request from the target\n   and reoriginates it\
    \ to a third party.  These might not be prevented\n   by only a signature over\
    \ the From, To, and Date, but they could be\n   prevented by securing a fingerprint\
    \ for DTLS-SRTP.  While this is a\n   different form of impersonation than is\
    \ commonly used for\n   robocalling, ultimately there is little purpose in establishing\
    \ the\n   identity of the user that originated a SIP request if this assurance\n\
    \   is not coupled with a comparable assurance over the contents of the\n   subsequent\
    \ media communication.  This signature also reduces the\n   potential for active\
    \ eavesdropping attacks against the SIP media.  In\n   environments where DTLS-SRTP\
    \ is unsupported, however, no field is\n   signed and no protections are provided.\n"
- title: 12.1.1.  Protection of the To Header and Retargeting
  contents:
  - "12.1.1.  Protection of the To Header and Retargeting\n   Armed with the original\
    \ value of the To header field, the recipient\n   of a request may be tempted\
    \ to compare it to their own identity in\n   order to determine whether or not\
    \ the identity information in this\n   call might have been replayed.  However,\
    \ any request may be\n   legitimately retargeted as well, and as a result legitimate\
    \ requests\n   may reach a SIP endpoint whose user is not identified by the URI\n\
    \   designated in the To header field value.  It is therefore difficult\n   for\
    \ any verifier to decide whether or not some prior retargeting was\n   \"legitimate\"\
    .  Retargeting can also cause confusion when identity\n   information is provided\
    \ for requests sent in the backwards direction\n   in a dialog, as the dialog\
    \ identifiers may not match credentials held\n   by the ultimate target of the\
    \ dialog.  For further information on the\n   problems of response identity, see\
    \ [SIP-RETARGET].\n   Any means for authentication services or verifiers to anticipate\n\
    \   retargeting is outside the scope of this document and is likely to\n   have\
    \ the same applicability to response identity as it does to\n   requests in the\
    \ backwards direction within a dialog.  Consequently,\n   no special guidance\
    \ is given for implementers here regarding the\n   \"connected party\" problem\
    \ (see [RFC4916]); authentication service\n   behavior is unchanged if retargeting\
    \ has occurred for a dialog-\n   forming request.  Ultimately, the authentication\
    \ service provides an\n   Identity header field for requests in the dialog only\
    \ when the user\n   is authorized to assert the identity given in the From header\
    \ field,\n   and if they are not, an Identity header field is not provided.  And\n\
    \   per the threat model of [RFC7375], resolving problems with\n   \"connected\"\
    \ identity has little bearing on detecting robocalling or\n   related impersonation\
    \ attacks.\n"
- title: 12.2.  Unprotected Request Fields
  contents:
  - "12.2.  Unprotected Request Fields\n   [RFC4474] originally provided protections\
    \ for Contact, Call-ID, and\n   CSeq.  This document removes protection for these\
    \ fields.  The\n   absence of these header field values creates some opportunities\
    \ for\n   determined attackers to impersonate based on cut-and-paste attacks;\n\
    \   however, the absence of these header field values does not seem\n   impactful\
    \ to the primary focus of this document, which is the\n   prevention of the simple\
    \ unauthorized claiming of an identity for the\n   purposes of robocalling, voicemail\
    \ hacking, or swatting.\n   It might seem attractive to provide a signature over\
    \ some of the\n   information present in the Via header field value(s).  For example,\n\
    \   without a signature over the sent-by field of the topmost Via header\n   field,\
    \ an attacker could remove that Via header field and insert its\n   own in a cut-and-paste\
    \ attack, which would cause all responses to the\n   request to be routed to a\
    \ host of the attacker's choosing.  However,\n   a signature over the topmost\
    \ Via header field does not prevent\n   attacks of this nature, since the attacker\
    \ could leave the topmost\n   Via intact and merely insert a new Via header field\
    \ directly after\n   it, which would cause responses to be routed to the attacker's\
    \ host\n   \"on their way\" to the valid host; the end result would be exactly\
    \ the\n   same.  Although it is possible that an intermediary-based\n   authentication\
    \ service could guarantee that no Via hops are inserted\n   between the sending\
    \ UA and the authentication service, it could not\n   prevent an attacker from\
    \ adding a Via hop after the authentication\n   service and thereby preempting\
    \ responses.  It is necessary for the\n   proper operation of SIP for subsequent\
    \ intermediaries to be capable\n   of inserting such Via header fields, and thus\
    \ it cannot be prevented.\n   As such, though it is desirable, securing Via is\
    \ not possible through\n   the sort of identity mechanism described in this document;\
    \ the best\n   known practice for securing Via is the use of SIPS.\n"
- title: 12.3.  Malicious Removal of Identity Headers
  contents:
  - "12.3.  Malicious Removal of Identity Headers\n   In the end analysis, the Identity\
    \ header field cannot protect itself.\n   Any attacker could remove the header\
    \ field from a SIP request and\n   modify the request arbitrarily afterwards.\
    \  However, this mechanism\n   is not intended to protect requests from men-in-the-middle\
    \ who\n   interfere with SIP messages; it is intended only to provide a way\n\
    \   that the originators of SIP requests can prove that they are who they\n  \
    \ claim to be.  At best, by stripping identity information from a\n   request,\
    \ a man-in-the-middle could make it impossible to distinguish\n   any illegitimate\
    \ messages he would like to send from those messages\n   sent by an authorized\
    \ user.  However, it requires a considerably\n   greater amount of energy to mount\
    \ such an attack than it does to\n   mount trivial impersonations by just copying\
    \ someone else's\n   From header field.  This mechanism provides a way that an\
    \ authorized\n   user can provide a definitive assurance of his identity that\
    \ an\n   unauthorized user, an impersonator, cannot.\n"
- title: 12.4.  Securing the Connection to the Authentication Service
  contents:
  - "12.4.  Securing the Connection to the Authentication Service\n   In the absence\
    \ of UA-based authentication services, the assurance\n   provided by this mechanism\
    \ is strongest when a UA forms a direct\n   connection, preferably one secured\
    \ by TLS, to an intermediary-based\n   authentication service.  The reasons for\
    \ this are twofold:\n   o  If a user does not receive a certificate from the authentication\n\
    \      service over the TLS connection that corresponds to the expected\n    \
    \  domain (especially when the user receives a challenge via a\n      mechanism\
    \ such as Digest), then it is possible that a rogue server\n      is attempting\
    \ to pose as an authentication service for a domain\n      that it does not control,\
    \ possibly in an attempt to collect shared\n      secrets for that domain.  A\
    \ similar practice could be used for\n      telephone numbers, though the application\
    \ of certificates for\n      telephone numbers to TLS is left as a matter for\
    \ future study.\n   o  Without TLS, the various header field values and the body\
    \ of the\n      request will not have integrity protection when the request\n\
    \      arrives at an authentication service.  Accordingly, a prior\n      legitimate\
    \ or illegitimate intermediary could modify the message\n      arbitrarily.\n\
    \   Of these two concerns, the first is most material to the intended\n   scope\
    \ of this mechanism.  This mechanism is intended to prevent\n   impersonation\
    \ attacks, not man-in-the-middle attacks; integrity over\n   parts of the header\
    \ and body is provided by this mechanism only to\n   prevent replay attacks. \
    \ However, it is possible that applications\n   relying on the presence of the\
    \ Identity header field could leverage\n   this integrity protection for services\
    \ other than replay protection.\n   Accordingly, direct TLS connections SHOULD\
    \ be used between the\n   UA client (UAC) and the authentication service whenever\
    \ possible.\n   The opportunistic nature of this mechanism, however, makes it\
    \ very\n   difficult to constrain UAC behavior, and moreover there will be some\n\
    \   deployment architectures where a direct connection is simply\n   infeasible\
    \ and the UAC cannot act as an authentication service\n   itself.  Accordingly,\
    \ when a direct connection and TLS are not\n   possible, a UAC should use the\
    \ SIPS mechanism, Digest \"auth-int\" for\n   body integrity, or both when it\
    \ can.  The ultimate decision to add an\n   Identity header field to a request\
    \ lies with the authentication\n   service, of course; domain policy must identify\
    \ those cases where the\n   UAC's security association with the authentication\
    \ service is\n   too weak.\n"
- title: 12.5.  Authorization and Transitional Strategies
  contents:
  - "12.5.  Authorization and Transitional Strategies\n   Ultimately, the worth of\
    \ an assurance provided by an Identity header\n   field is limited by the security\
    \ practices of the authentication\n   service that issues the assurance.  Relying\
    \ on an Identity header\n   field generated by a remote administrative domain\
    \ assumes that the\n   issuing domain uses recommended administrative practices\
    \ to\n   authenticate its users.  However, it is possible that some\n   authentication\
    \ services will implement policies that effectively make\n   users unaccountable\
    \ (e.g., ones that accept unauthenticated\n   registrations from arbitrary users).\
    \  The value of an Identity header\n   field from such authentication services\
    \ is questionable.  While there\n   is no magic way for a verifier to distinguish\
    \ \"good\" from \"bad\"\n   signers by inspecting a SIP request, it is expected\
    \ that further work\n   in authorization practices could be built on top of this\
    \ identity\n   solution; without such an identity solution, many promising\n \
    \  approaches to authorization policy are impossible.  That much said,\n   it\
    \ is RECOMMENDED that authentication services based on proxy servers\n   employ\
    \ strong authentication practices.\n   One cannot expect the Identity header field\
    \ to be supported by every\n   SIP entity overnight.  This leaves the verifier\
    \ in a difficult\n   position; when it receives a request from a given SIP user,\
    \ how can\n   it know whether or not the originator's domain supports Identity?\
    \  In\n   the absence of ubiquitous support for Identity, some transitional\n\
    \   strategies are necessary.\n   o  A verifier could remember when it receives\
    \ a request from a domain\n      or telephone number that uses Identity and, in\
    \ the future, view\n      messages received from that source without an Identity\
    \ header\n      field with skepticism.\n   o  A verifier could consult some sort\
    \ of directory that indicates\n      whether a given caller should have a signed\
    \ identity.  There are a\n      number of potential ways in which this could be\
    \ implemented.  This\n      is left as a subject for future work.\n   In the long\
    \ term, some sort of identity mechanism, either the one\n   documented in this\
    \ specification or a successor, must become\n   mandatory-to-use for SIP; that\
    \ is the only way to guarantee that this\n   protection can always be expected\
    \ by verifiers.\n   Finally, it is worth noting that the presence or absence of\
    \ the\n   Identity header fields cannot be the sole factor in making an\n   authorization\
    \ decision.  Permissions might be granted to a message on\n   the basis of the\
    \ specific verified Identity or really on any other\n   aspect of a SIP request.\
    \  Authorization policies are outside the\n   scope of this specification, but\
    \ this specification advises any\n   future authorization work not to assume that\
    \ messages with valid\n   Identity header fields are always good.\n"
- title: 12.6.  Display-Names and Identity
  contents:
  - "12.6.  Display-Names and Identity\n   As a matter of interface design, SIP UAs\
    \ might render the\n   display-name portion of the From header field of a caller\
    \ as the\n   identity of the caller; there is a significant precedent in email\n\
    \   user interfaces for this practice.  Securing the display-name\n   component\
    \ of the From header field value is outside the scope of this\n   document but\
    \ may be the subject of future work, such as through the\n   \"ppt\" name mechanism.\n\
    \   In the absence of signing the display-name, authentication services\n   might\
    \ check and validate it, and compare it to a list of acceptable\n   display-names\
    \ that may be used by the originator; if the display-name\n   does not meet policy\
    \ constraints, the authentication service could\n   return a 403 response code.\
    \  In this case, the reason phrase should\n   indicate the nature of the problem:\
    \ for example, \"Inappropriate\n   Display Name\".  However, the display-name\
    \ is not always present, and\n   in many environments the requisite operational\
    \ procedures for\n   display-name validation may not exist, so no normative guidance\
    \ is\n   given here.\n"
- title: 13.  IANA Considerations
  contents:
  - "13.  IANA Considerations\n   IANA has completed a number of actions described\
    \ in this document.\n   Primarily, the previous references to [RFC4474] in the\
    \ \"Session\n   Initiation Protocol (SIP) Parameters\" registry have been updated\
    \ to\n   point to this document, unless specified otherwise below.\n"
- title: 13.1.  SIP Header Fields
  contents:
  - "13.1.  SIP Header Fields\n   The Identity-Info header in the SIP \"Header Fields\"\
    \ registry has been\n   marked as deprecated by this document.\n   Also, the Identity-Info\
    \ header reserved the compact form \"n\" at its\n   time of registration.  That\
    \ compact form has been removed from the\n   registry.  The Identity header, however,\
    \ retains the compact form \"y\"\n   reserved by [RFC4474].\n"
- title: 13.2.  SIP Response Codes
  contents:
  - "13.2.  SIP Response Codes\n   The 436 \"Bad Identity-Info\" default reason phrase\
    \ has been changed to\n   \"Bad Identity Info\" in the SIP \"Response Codes\"\
    \ registry.\n   The 437 \"Unsupported Certificate\" default reason phrase has\
    \ been\n   changed to \"Unsupported Credential\".\n"
- title: 13.3.  Identity-Info Parameters
  contents:
  - "13.3.  Identity-Info Parameters\n   IANA manages a registry for Identity-Info\
    \ parameters.  Per this\n   specification, IANA has changed the name of this registry\
    \ to\n   \"Identity Parameters\".\n   This specification defines one new value\
    \ for the registry: \"info\" as\n   defined in Section 7.3.\n"
- title: 13.4.  Identity-Info Algorithm Parameter Values
  contents:
  - "13.4.  Identity-Info Algorithm Parameter Values\n   IANA managed an \"Identity-Info\
    \ Algorithm Parameter Values\" registry;\n   per this specification, IANA has\
    \ deprecated and closed this registry.\n   Since the algorithms for signing PASSporTs\
    \ are defined in [RFC8225]\n   rather than in this specification, there is no\
    \ longer a need for an\n   algorithm parameter registry for the Identity header\
    \ field.\n"
- title: 14.  Changes from RFC 4474
  contents:
  - "14.  Changes from RFC 4474\n   The following are salient changes from the original\
    \ RFC 4474:\n   o  The credential mechanism has been generalized; credential\n\
    \      enrollment, acquisition, and trust are now outside the scope of\n     \
    \ this document.\n   o  This document reduces the scope of the Identity signature\
    \ to\n      remove CSeq, Call-ID, Contact, and the message body; signing of\n\
    \      key fingerprints in SDP is now included.\n   o  The Identity-Info header\
    \ field has been deprecated, and its\n      components have been relocated into\
    \ parameters of the Identity\n      header field (which obsoletes the previous\
    \ version of the header\n      field).\n   o  The Identity header field can now\
    \ appear multiple times in one\n      request.\n   o  The previous signed-identity-digest\
    \ format has been replaced with\n      PASSporT (signing algorithms are now defined\
    \ in a separate\n      specification).\n   o  Status code descriptions have been\
    \ revised.\n"
- title: 15.  References
  contents:
  - '15.  References

    '
- title: 15.1.  Normative References
  contents:
  - "15.1.  Normative References\n   [E.164]    International Telecommunication Union,\
    \ \"The international\n              public telecommunication numbering plan\"\
    ,\n              ITU-T Recommendation E.164, November 2010,\n              <https://www.itu.int/rec/T-REC-E.164/en>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC3261]\
    \  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n              A.,\
    \ Peterson, J., Sparks, R., Handley, M., and E.\n              Schooler, \"SIP:\
    \ Session Initiation Protocol\", RFC 3261,\n              DOI 10.17487/RFC3261,\
    \ June 2002,\n              <https://www.rfc-editor.org/info/rfc3261>.\n   [RFC3263]\
    \  Rosenberg, J. and H. Schulzrinne, \"Session Initiation\n              Protocol\
    \ (SIP): Locating SIP Servers\", RFC 3263,\n              DOI 10.17487/RFC3263,\
    \ June 2002,\n              <https://www.rfc-editor.org/info/rfc3263>.\n   [RFC3966]\
    \  Schulzrinne, H., \"The tel URI for Telephone Numbers\",\n              RFC\
    \ 3966, DOI 10.17487/RFC3966, December 2004,\n              <https://www.rfc-editor.org/info/rfc3966>.\n\
    \   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n   \
    \           Resource Identifier (URI): Generic Syntax\", STD 66,\n           \
    \   RFC 3986, DOI 10.17487/RFC3986, January 2005,\n              <https://www.rfc-editor.org/info/rfc3986>.\n\
    \   [RFC5234]  Crocker, D., Ed., and P. Overell, \"Augmented BNF for\n       \
    \       Syntax Specifications: ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234,\
    \ January 2008,\n              <https://www.rfc-editor.org/info/rfc5234>.\n  \
    \ [RFC5280]  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n           \
    \   Housley, R., and W. Polk, \"Internet X.509 Public Key\n              Infrastructure\
    \ Certificate and Certificate Revocation List\n              (CRL) Profile\",\
    \ RFC 5280, DOI 10.17487/RFC5280, May 2008,\n              <https://www.rfc-editor.org/info/rfc5280>.\n\
    \   [RFC5922]  Gurbani, V., Lawrence, S., and A. Jeffrey, \"Domain\n         \
    \     Certificates in the Session Initiation Protocol (SIP)\",\n             \
    \ RFC 5922, DOI 10.17487/RFC5922, June 2010,\n              <https://www.rfc-editor.org/info/rfc5922>.\n\
    \   [RFC8225]  Wendt, C. and J. Peterson, \"PASSporT: Personal Assertion\n   \
    \           Token\", RFC 8225, DOI 10.17487/RFC8225, February 2018,\n        \
    \      <https://www.rfc-editor.org/info/rfc8225>.\n"
- title: 15.2.  Informative References
  contents:
  - "15.2.  Informative References\n   [CIDER]    Kaplan, H., \"A proposal for Caller\
    \ Identity in a DNS-based\n              Entrusted Registry (CIDER)\", Work in\
    \ Progress,\n              draft-kaplan-stir-cider-00, July 2013.\n   [IRI-COMPARISON]\n\
    \              Masinter, L. and M. Duerst, \"Comparison, Equivalence and\n   \
    \           Canonicalization of Internationalized Resource\n              Identifiers\"\
    , Work in Progress, draft-ietf-iri-\n              comparison-02, October 2012.\n\
    \   [RFC2585]  Housley, R. and P. Hoffman, \"Internet X.509 Public Key\n     \
    \         Infrastructure Operational Protocols: FTP and HTTP\",\n            \
    \  RFC 2585, DOI 10.17487/RFC2585, May 1999,\n              <https://www.rfc-editor.org/info/rfc2585>.\n\
    \   [RFC3323]  Peterson, J., \"A Privacy Mechanism for the Session\n         \
    \     Initiation Protocol (SIP)\", RFC 3323,\n              DOI 10.17487/RFC3323,\
    \ November 2002,\n              <https://www.rfc-editor.org/info/rfc3323>.\n \
    \  [RFC3325]  Jennings, C., Peterson, J., and M. Watson, \"Private\n         \
    \     Extensions to the Session Initiation Protocol (SIP) for\n              Asserted\
    \ Identity within Trusted Networks\", RFC 3325,\n              DOI 10.17487/RFC3325,\
    \ November 2002,\n              <https://www.rfc-editor.org/info/rfc3325>.\n \
    \  [RFC3893]  Peterson, J., \"Session Initiation Protocol (SIP)\n            \
    \  Authenticated Identity Body (AIB) Format\", RFC 3893,\n              DOI 10.17487/RFC3893,\
    \ September 2004,\n              <https://www.rfc-editor.org/info/rfc3893>.\n\
    \   [RFC4474]  Peterson, J. and C. Jennings, \"Enhancements for\n            \
    \  Authenticated Identity Management in the Session\n              Initiation\
    \ Protocol (SIP)\", RFC 4474,\n              DOI 10.17487/RFC4474, August 2006,\n\
    \              <https://www.rfc-editor.org/info/rfc4474>.\n   [RFC4501]  Josefsson,\
    \ S., \"Domain Name System Uniform Resource\n              Identifiers\", RFC\
    \ 4501, DOI 10.17487/RFC4501, May 2006,\n              <https://www.rfc-editor.org/info/rfc4501>.\n\
    \   [RFC4916]  Elwell, J., \"Connected Identity in the Session Initiation\n  \
    \            Protocol (SIP)\", RFC 4916, DOI 10.17487/RFC4916,\n             \
    \ June 2007, <https://www.rfc-editor.org/info/rfc4916>.\n   [RFC5393]  Sparks,\
    \ R., Ed., Lawrence, S., Hawrylyshen, A., and B.\n              Campen, \"Addressing\
    \ an Amplification Vulnerability in\n              Session Initiation Protocol\
    \ (SIP) Forking Proxies\",\n              RFC 5393, DOI 10.17487/RFC5393, December\
    \ 2008,\n              <https://www.rfc-editor.org/info/rfc5393>.\n   [RFC5763]\
    \  Fischl, J., Tschofenig, H., and E. Rescorla, \"Framework\n              for\
    \ Establishing a Secure Real-time Transport Protocol\n              (SRTP) Security\
    \ Context Using Datagram Transport Layer\n              Security (DTLS)\", RFC\
    \ 5763, DOI 10.17487/RFC5763,\n              May 2010, <https://www.rfc-editor.org/info/rfc5763>.\n\
    \   [RFC6698]  Hoffman, P. and J. Schlyter, \"The DNS-Based Authentication\n \
    \             of Named Entities (DANE) Transport Layer Security (TLS)\n      \
    \        Protocol: TLSA\", RFC 6698, DOI 10.17487/RFC6698,\n              August\
    \ 2012, <https://www.rfc-editor.org/info/rfc6698>.\n   [RFC6973]  Cooper, A.,\
    \ Tschofenig, H., Aboba, B., Peterson, J.,\n              Morris, J., Hansen,\
    \ M., and R. Smith, \"Privacy\n              Considerations for Internet Protocols\"\
    , RFC 6973,\n              DOI 10.17487/RFC6973, July 2013,\n              <https://www.rfc-editor.org/info/rfc6973>.\n\
    \   [RFC8259]  Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data\n \
    \             Interchange Format\", STD 90, RFC 8259,\n              DOI 10.17487/RFC8259,\
    \ December 2017,\n              <https://www.rfc-editor.org/info/rfc8259>.\n \
    \  [RFC7340]  Peterson, J., Schulzrinne, H., and H. Tschofenig, \"Secure\n   \
    \           Telephone Identity Problem Statement and Requirements\",\n       \
    \       RFC 7340, DOI 10.17487/RFC7340, September 2014,\n              <https://www.rfc-editor.org/info/rfc7340>.\n\
    \   [RFC7375]  Peterson, J., \"Secure Telephone Identity Threat Model\",\n   \
    \           RFC 7375, DOI 10.17487/RFC7375, October 2014,\n              <https://www.rfc-editor.org/info/rfc7375>.\n\
    \   [RFC7515]  Jones, M., Bradley, J., and N. Sakimura, \"JSON Web\n         \
    \     Signature (JWS)\", RFC 7515, DOI 10.17487/RFC7515,\n              May 2015,\
    \ <https://www.rfc-editor.org/info/rfc7515>.\n   [RFC7519]  Jones, M., Bradley,\
    \ J., and N. Sakimura, \"JSON Web Token\n              (JWT)\", RFC 7519, DOI\
    \ 10.17487/RFC7519, May 2015,\n              <https://www.rfc-editor.org/info/rfc7519>.\n\
    \   [RFC8226]  Peterson, J. and S. Turner, \"Secure Telephone Identity\n     \
    \         Credentials: Certificates\", RFC 8226,\n              DOI 10.17487/RFC8226,\
    \ February 2018,\n              <https://www.rfc-editor.org/info/rfc8226>.\n \
    \  [SIP-RETARGET]\n              Peterson, J., \"Retargeting and Security in SIP:\
    \ A\n              Framework and Requirements\", Work in Progress,\n         \
    \     draft-peterson-sipping-retarget-00, February 2005.\n   [SIP-RFC4474-CONCERNS]\n\
    \              Rosenberg, J., \"Concerns around the Applicability of\n       \
    \       RFC 4474\", Work in Progress, draft-rosenberg-sip-rfc4474-\n         \
    \     concerns-00, February 2008.\n   [TS-3GPP.23.228]\n              3GPP, \"\
    IP Multimedia Subsystem (IMS); Stage 2\", 3GPP\n              TS 23.228 7.7.0,\
    \ March 2007,\n              <http://www.3gpp.org/ftp/Specs/html-info/23228.htm>.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The authors would like to thank Adam Roach, Jim Schaad, Ning\
    \ Zhang,\n   Syed Ali, Olle Jacobson, Dave Frankel, Robert Sparks, Dave Crocker,\n\
    \   Stephen Kent, Brian Rosen, Alex Bobotek, Paul Kyzivat, Jonathan\n   Lennox,\
    \ Richard Shockey, Martin Dolly, Andrew Allen, Hadriel Kaplan,\n   Sanjay Mishra,\
    \ Anton Baskov, Pierce Gorman, David Schwartz, Eric\n   Burger, Alan Ford, Christer\
    \ Holmberg, Philippe Fouquart, Michael\n   Hamer, Henning Schulzrinne, and Richard\
    \ Barnes for their comments.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jon Peterson\n   Neustar, Inc.\n   1800 Sutter St. Suite\
    \ 570\n   Concord, CA  94520\n   United States of America\n   Email: jon.peterson@neustar.biz\n\
    \   Cullen Jennings\n   Cisco\n   400 3rd Avenue SW, Suite 350\n   Calgary, AB\
    \  T2P 4H2\n   Canada\n   Email: fluffy@cisco.com\n   Eric Rescorla\n   RTFM,\
    \ Inc.\n   2064 Edgewood Drive\n   Palo Alto, CA  94303\n   United States of America\n\
    \   Email: ekr@rtfm.com\n   Chris Wendt\n   Comcast\n   One Comcast Center\n \
    \  Philadelphia, PA  19103\n   United States of America\n   Email: chris-ietf@chriswendt.net\n"
