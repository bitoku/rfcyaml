- title: __initial_text__
  contents:
  - '            Representing Label Generation Rulesets Using XML

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes a method of representing rules for validating\n\
    \   identifier labels and alternate representations of those labels using\n  \
    \ Extensible Markup Language (XML).  These policies, known as \"Label\n   Generation\
    \ Rulesets\" (LGRs), are used for the implementation of\n   Internationalized\
    \ Domain Names (IDNs), for example.  The rulesets are\n   used to implement and\
    \ share that aspect of policy defining which\n   labels and Unicode code points\
    \ are permitted for registrations, which\n   alternative code points are considered\
    \ variants, and what actions may\n   be performed on labels containing those variants.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7940.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Design Goals ....................................................5\n  \
    \ 3. Normative Language ..............................................6\n   4.\
    \ LGR Format ......................................................6\n      4.1.\
    \ Namespace ..................................................7\n      4.2. Basic\
    \ Structure ............................................7\n      4.3. Metadata\
    \ ...................................................8\n           4.3.1. The\
    \ \"version\" Element ...............................8\n           4.3.2. The\
    \ \"date\" Element ..................................9\n           4.3.3. The\
    \ \"language\" Element ..............................9\n           4.3.4. The\
    \ \"scope\" Element ................................10\n           4.3.5. The\
    \ \"description\" Element ..........................10\n           4.3.6. The\
    \ \"validity-start\" and \"validity-end\" Elements ...11\n           4.3.7. The\
    \ \"unicode-version\" Element ......................11\n           4.3.8. The\
    \ \"references\" Element ...........................12\n   5. Code Points and\
    \ Variants .......................................13\n      5.1. Sequences .................................................14\n\
    \      5.2. Conditional Contexts ......................................15\n  \
    \    5.3. Variants ..................................................16\n    \
    \       5.3.1. Basic Variants .....................................16\n      \
    \     5.3.2. The \"type\" Attribute ...............................17\n      \
    \     5.3.3. Null Variants ......................................18\n        \
    \   5.3.4. Variants with Reflexive Mapping ....................19\n          \
    \ 5.3.5. Conditional Variants ...............................20\n      5.4. Annotations\
    \ ...............................................22\n           5.4.1. The \"\
    ref\" Attribute ................................22\n           5.4.2. The \"comment\"\
    \ Attribute ............................23\n      5.5. Code Point Tagging ........................................23\n\
    \   6. Whole Label and Context Evaluation .............................23\n  \
    \    6.1. Basic Concepts ............................................23\n    \
    \  6.2. Character Classes .........................................25\n      \
    \     6.2.1. Declaring and Invoking Named Classes ...............25\n        \
    \   6.2.2. Tag-Based Classes ..................................26\n          \
    \ 6.2.3. Unicode Property-Based Classes .....................26\n           6.2.4.\
    \ Explicitly Declared Classes ........................28\n           6.2.5. Combined\
    \ Classes ...................................29\n      6.3. Whole Label and Context\
    \ Rules .............................30\n           6.3.1. The \"rule\" Element\
    \ .................................31\n           6.3.2. The Match Operators ................................32\n\
    \           6.3.3. The \"count\" Attribute ..............................33\n\
    \           6.3.4. The \"name\" and \"by-ref\" Attributes .................34\n\
    \           6.3.5. The \"choice\" Element ...............................34\n\
    \           6.3.6. Literal Code Point Sequences .......................35\n  \
    \         6.3.7. The \"any\" Element ..................................35\n  \
    \         6.3.8. The \"start\" and \"end\" Elements .....................35\n\
    \           6.3.9. Example Context Rule from IDNA Specification .......36\n  \
    \    6.4. Parameterized Context or When Rules .......................37\n    \
    \       6.4.1. The \"anchor\" Element ...............................37\n    \
    \       6.4.2. The \"look-behind\" and \"look-ahead\" Elements ........38\n  \
    \         6.4.3. Omitting the \"anchor\" Element ......................40\n  \
    \ 7. The \"action\" Element ...........................................40\n  \
    \    7.1. The \"match\" and \"not-match\" Attributes ....................41\n\
    \      7.2. Actions with Variant Type Triggers ........................41\n  \
    \         7.2.1. The \"any-variant\", \"all-variants\", and\n                \
    \  \"only-variants\" Attributes .........................41\n           7.2.2.\
    \ Example from Tables in the Style of RFC 3743 .......44\n      7.3. Recommended\
    \ Disposition Values ............................45\n      7.4. Precedence ................................................45\n\
    \      7.5. Implied Actions ...........................................45\n  \
    \    7.6. Default Actions ...........................................46\n   8.\
    \ Processing a Label against an LGR ..............................47\n      8.1.\
    \ Determining Eligibility for a Label .......................47\n           8.1.1.\
    \ Determining Eligibility Using Reflexive\n                  Variant Mappings\
    \ ...................................47\n      8.2. Determining Variants for a\
    \ Label ..........................48\n      8.3. Determining a Disposition for\
    \ a Label or Variant Label ....49\n      8.4. Duplicate Variant Labels ..................................50\n\
    \      8.5. Checking Labels for Collision .............................50\n  \
    \ 9. Conversion to and from Other Formats ...........................51\n   10.\
    \ Media Type ....................................................51\n   11. IANA\
    \ Considerations ...........................................52\n      11.1. Media\
    \ Type Registration ..................................52\n      11.2. URN Registration\
    \ .........................................53\n      11.3. Disposition Registry\
    \ .....................................53\n   12. Security Considerations .......................................54\n\
    \      12.1. LGRs Are Only a Partial Remedy for Problem Space .........54\n  \
    \    12.2. Computational Expense of Complex Tables ..................54\n   13.\
    \ References ....................................................55\n      13.1.\
    \ Normative References .....................................55\n      13.2. Informative\
    \ References ...................................56\n   Appendix A. Example Tables\
    \ ........................................58\n   Appendix B. How to Translate\
    \ Tables Based on RFC 3743 into the\n               XML Format ............................................63\n\
    \   Appendix C. Indic Syllable Structure Example ......................68\n  \
    \    C.1. Reducing Complexity .......................................70\n   Appendix\
    \ D. RELAX NG Compact Schema ...............................71\n   Acknowledgements\
    \ ..................................................82\n   Authors' Addresses\
    \ ................................................82\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document specifies a method of using Extensible Markup\
    \ Language\n   (XML) to describe Label Generation Rulesets (LGRs).  LGRs are\n\
    \   algorithms used to determine whether, and under what conditions, a\n   given\
    \ identifier label is permitted, based on the code points it\n   contains and\
    \ their context.  These algorithms comprise a list of\n   permissible code points,\
    \ variant code point mappings, and a set of\n   rules that act on the code points\
    \ and mappings.  LGRs form part of an\n   administrator's policies.  In deploying\
    \ Internationalized Domain\n   Names (IDNs), they have also been known as IDN\
    \ tables or variant\n   tables.\n   There are other kinds of policies relating\
    \ to labels that are not\n   normally covered by LGRs and are therefore not necessarily\n\
    \   representable by the XML format described here.  These include, but\n   are\
    \ not limited to, policies around trademarks, or prohibition of\n   fraudulent\
    \ or objectionable words.\n   Administrators of the zones for top-level domain\
    \ registries have\n   historically published their LGRs using ASCII text or HTML.\
    \  The\n   formatting of these documents has been loosely based on the format\n\
    \   used for the Language Variant Table described in [RFC3743].\n   [RFC4290]\
    \ also provides a \"model table format\" that describes a\n   similar set of functionality.\
    \  Common to these formats is that the\n   algorithms used to evaluate the data\
    \ therein are implicit or\n   specified elsewhere.\n   Through the first decade\
    \ of IDN deployment, experience has shown that\n   LGRs derived from these formats\
    \ are difficult to consistently\n   implement and compare, due to their differing\
    \ formats.  A universal\n   format, such as one using a structured XML format,\
    \ will assist by\n   improving machine readability, consistency, reusability,\
    \ and\n   maintainability of LGRs.\n   When used to represent a simple list of\
    \ permitted code points, the\n   format is quite straightforward.  At the cost\
    \ of some complexity in\n   the resulting file, it also allows for an implementation\
    \ of more\n   sophisticated handling of conditional variants that reflects the\n\
    \   known requirements of current zone administrator policies.\n   Another feature\
    \ of this format is that it allows many of the\n   algorithms to be made explicit\
    \ and machine implementable.  A\n   remaining small set of implicit algorithms\
    \ is described in this\n   document to allow commonality in implementation.\n\
    \   While the predominant usage of this specification is to represent IDN\n  \
    \ label policy, the format is not limited to IDN usage and may also be\n   used\
    \ for describing ASCII domain name label rulesets, or other types\n   of identifier\
    \ labels beyond those used for domain names.\n"
- title: 2.  Design Goals
  contents:
  - "2.  Design Goals\n   The following goals informed the design of this format:\n\
    \   o  The format needs to be implementable in a reasonably\n      straightforward\
    \ manner in software.\n   o  The format should be able to be automatically checked\
    \ for\n      formatting errors, so that common mistakes can be caught.\n   o \
    \ An LGR needs to be able to express the set of valid code points\n      that\
    \ are allowed for registration under a specific administrator's\n      policies.\n\
    \   o  An LGR needs to be able to express computed alternatives to a\n      given\
    \ identifier based on mapping relationships between code\n      points, whether\
    \ one-to-one or many-to-many.  These computed\n      alternatives are commonly\
    \ known as \"variants\".\n   o  Variant code points should be able to be tagged\
    \ with explicit\n      dispositions or categories that can be used to support\
    \ registry\n      policy (such as whether to allocate the computed variant or\
    \ to\n      merely block it from usage or registration).\n   o  Variants and code\
    \ points must be able to be stipulated based on\n      contextual information.\
    \  For example, some variants may only be\n      applicable when they follow a\
    \ certain code point or when the code\n      point is displayed in a specific\
    \ presentation form.\n   o  The data contained within an LGR must be able to be\
    \ interpreted\n      unambiguously, so that independent implementations that utilize\n\
    \      the contents will arrive at the same results.\n   o  To the largest extent\
    \ possible, policy rules should be able to be\n      specified in the XML format\
    \ without relying on hidden or built-in\n      algorithms in implementations.\n\
    \   o  LGRs should be suitable for comparison and reuse, such that one\n     \
    \ could easily compare the contents of two or more to see the\n      differences,\
    \ to merge them, and so on.\n   o  As many existing IDN tables as practicable\
    \ should be able to be\n      migrated to the LGR format with all applicable interpretation\n\
    \      logic retained.\n   These requirements are partly derived from reviewing\
    \ the existing\n   corpus of published IDN tables, plus the requirements of ICANN's\
    \ work\n   to implement an LGR for the DNS root zone [LGR-PROCEDURE].  In\n  \
    \ particular, Section B of that document identifies five specific\n   requirements\
    \ for an LGR methodology.\n   The syntax and rules in [RFC5892] and [RFC3743]\
    \ were also reviewed.\n   It is explicitly not the goal of this format to stipulate\
    \ what code\n   points should be listed in an LGR by a zone administrator.  Which\n\
    \   registration policies are used for a particular zone are outside the\n   scope\
    \ of this memo.\n"
- title: 3.  Normative Language
  contents:
  - "3.  Normative Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 4.  LGR Format
  contents:
  - "4.  LGR Format\n   An LGR is expressed as a well-formed XML document [XML] that\
    \ conforms\n   to the schema defined in Appendix D.\n   As XML is case sensitive,\
    \ an LGR must be authored with the correct\n   casing.  For example, the XML element\
    \ names MUST be in lowercase as\n   described in this specification, and matching\
    \ of attribute values is\n   only performed in a case-sensitive manner.\n   A\
    \ document that is not well-formed, is non-conforming, or violates\n   other constraints\
    \ specified in this specification MUST be rejected.\n"
- title: 4.1.  Namespace
  contents:
  - "4.1.  Namespace\n   The XML Namespace URI is \"urn:ietf:params:xml:ns:lgr-1.0\"\
    .\n   See Section 11.2 for more information.\n"
- title: 4.2.  Basic Structure
  contents:
  - "4.2.  Basic Structure\n   The basic XML framework of the document is as follows:\n\
    \       <?xml version=\"1.0\"?>\n       <lgr xmlns=\"urn:ietf:params:xml:ns:lgr-1.0\"\
    >\n           ...\n       </lgr>\n   The \"lgr\" element contains up to three\
    \ sub-elements or sections.\n   First is an optional \"meta\" element that contains\
    \ all metadata\n   associated with the LGR, such as its authorship, what it is\
    \ used for,\n   implementation notes, and references.  This is followed by a required\n\
    \   \"data\" element that contains the substantive code point data.\n   Finally,\
    \ an optional \"rules\" element contains information on rules\n   for evaluating\
    \ labels, if any, along with \"action\" elements providing\n   for the disposition\
    \ of labels and computed variant labels.\n       <?xml version=\"1.0\"?>\n   \
    \    <lgr xmlns=\"urn:ietf:params:xml:ns:lgr-1.0\">\n           <meta>\n     \
    \          ...\n           </meta>\n           <data>\n               ...\n  \
    \         </data>\n           <rules>\n               ...\n           </rules>\n\
    \       </lgr>\n   A document MUST contain exactly one \"lgr\" element.  Each\
    \ \"lgr\"\n   element MUST contain zero or one \"meta\" element, exactly one \"\
    data\"\n   element, and zero or one \"rules\" element; and these three elements\n\
    \   MUST be in that order.\n   Some elements that are direct or nested child elements\
    \ of the \"rules\"\n   element MUST be placed in a specific relative order to\
    \ other elements\n   for the LGR to be valid.  An LGR that violates these constraints\
    \ MUST\n   be rejected.  In other cases, changing the ordering would result in\
    \ a\n   valid, but different, specification.\n   In the following descriptions,\
    \ required, non-repeating elements or\n   attributes are generally not called\
    \ out explicitly, in contrast to\n   \"OPTIONAL\" ones, or those that \"MAY\"\
    \ be repeated.  For attributes\n   that take lists as values, the elements MUST\
    \ be space-separated.\n"
- title: 4.3.  Metadata
  contents:
  - "4.3.  Metadata\n   The \"meta\" element expresses metadata associated with the\
    \ LGR, and\n   the element SHOULD be included so that the associated metadata\
    \ are\n   available as part of the LGR and cannot become disassociated.  The\n\
    \   following subsections describe elements that may appear within the\n   \"\
    meta\" element.\n   The \"meta\" element can be used to identify the author or\
    \ relevant\n   contact person, explain the intended usage of the LGR, and provide\n\
    \   implementation notes as well as references.  Detailed metadata allow\n   the\
    \ LGR document to become self-documenting -- for example, if\n   rendered in a\
    \ human-readable format by an appropriate tool.\n   Providing metadata pertaining\
    \ to the date and version of the LGR is\n   particularly encouraged to make it\
    \ easier for interoperating\n   consumers to ensure that they are using the correct\
    \ LGR.\n   With the exception of the \"unicode-version\" element, the data\n \
    \  contained within is not required by software consuming the LGR in\n   order\
    \ to calculate valid labels or to calculate variants.  If\n   present, the \"\
    unicode-version\" element MUST be used by a consumer of\n   the table to identify\
    \ that it has the correct Unicode property data\n   to perform operations on the\
    \ table.  This ensures that possible\n   differences in code point properties\
    \ between editions of the Unicode\n   Standard do not impact the product of calculations\
    \ utilizing an LGR.\n"
- title: 4.3.1.  The "version" Element
  contents:
  - "4.3.1.  The \"version\" Element\n   The \"version\" element is OPTIONAL.  It\
    \ is used to uniquely\n   identify each version of the LGR.  No specific format\
    \ is required,\n   but it is RECOMMENDED that it be the decimal representation\
    \ of a\n   single positive integer, which is incremented with each revision of\n\
    \   the file.\n   An example of a typical first edition of a document:\n     \
    \  <version>1</version>\n   The \"version\" element may have an OPTIONAL \"comment\"\
    \ attribute.\n       <version comment=\"draft\">1</version>\n"
- title: 4.3.2.  The "date" Element
  contents:
  - "4.3.2.  The \"date\" Element\n   The OPTIONAL \"date\" element is used to identify\
    \ the date the LGR was\n   posted.  The contents of this element MUST be a valid\
    \ ISO 8601\n   \"full-date\" string as described in [RFC3339].\n   Example of\
    \ a date:\n       <date>2009-11-01</date>\n"
- title: 4.3.3.  The "language" Element
  contents:
  - "4.3.3.  The \"language\" Element\n   Each OPTIONAL \"language\" element identifies\
    \ a language or script for\n   which the LGR is intended.  The value of the \"\
    language\" element MUST\n   be a valid language tag as described in [RFC5646].\
    \  The tag may refer\n   to a script plus undefined language if the LGR is not\
    \ intended for a\n   specific language.\n   Example of an LGR for the English\
    \ language:\n       <language>en</language>\n   If the LGR applies to a script\
    \ rather than a specific language, the\n   \"und\" language tag SHOULD be used\
    \ followed by the relevant script\n   subtag from [RFC5646].  For example, for\
    \ a Cyrillic script LGR:\n       <language>und-Cyrl</language>\n   If the LGR\
    \ covers a set of multiple languages or scripts, the\n   \"language\" element\
    \ MAY be repeated.  However, for cases of a\n   script-specific LGR exhibiting\
    \ insignificant admixture of code points\n   from other scripts, it is RECOMMENDED\
    \ to use a single \"language\"\n   element identifying the predominant script.\
    \  In the exceptional case\n   of a multi-script LGR where no script is predominant,\
    \ use Zyyy\n   (Common):\n       <language>und-Zyyy</language>\n"
- title: 4.3.4.  The "scope" Element
  contents:
  - "4.3.4.  The \"scope\" Element\n   This OPTIONAL element refers to a scope, such\
    \ as a domain, to which\n   this policy is applied.  The \"type\" attribute specifies\
    \ the type of\n   scope being defined.  A type of \"domain\" means that the scope\
    \ is a\n   domain that represents the apex of the DNS zone to which the LGR is\n\
    \   applied.  For that type, the content of the \"scope\" element MUST be a\n\
    \   domain name written relative to the root zone, in presentation format\n  \
    \ with no trailing dot.  However, in the unique case of the DNS root\n   zone,\
    \ it is represented as \".\".\n       <scope type=\"domain\">example.com</scope>\n\
    \   There may be multiple \"scope\" tags used -- for example, to reflect a\n \
    \  list of domains to which the LGR is applied.\n   No other values of the \"\
    type\" attribute are defined by this\n   specification; however, this specification\
    \ can be used for\n   applications other than domain names.  Implementers of LGRs\
    \ for\n   applications other than domain names SHOULD define the scope\n   extension\
    \ grammar in an IETF specification or use XML namespaces to\n   distinguish their\
    \ scoping mechanism distinctly from the base LGR\n   namespace.  An explanation\
    \ of any custom usage of the scope in the\n   \"description\" element is RECOMMENDED.\n\
    \       <scope xmlns=\"http://example.com/ns/scope/1.0\">\n           ... content\
    \ per alternate namespace ...\n       </scope>\n"
- title: 4.3.5.  The "description" Element
  contents:
  - "4.3.5.  The \"description\" Element\n   The \"description\" element is an OPTIONAL,\
    \ free-form element that\n   contains any additional relevant description that\
    \ is useful for the\n   user in its interpretation.  Typically, this field contains\n\
    \   authorship information, as well as additional context on how the LGR\n   was\
    \ formulated and how it applies, such as citations and references\n   that apply\
    \ to the LGR as a whole.\n   This field should not be relied upon for providing\
    \ instructions on\n   how to parse or utilize the data contained elsewhere in\
    \ the\n   specification.  Authors of tables should expect that software\n   applications\
    \ that parse and use LGRs will not use the \"description\"\n   element to condition\
    \ the application of the LGR's data and rules.\n   The element has an OPTIONAL\
    \ \"type\" attribute, which refers to the\n   Internet media type [RFC2045] of\
    \ the enclosed data.  Typical types\n   would be \"text/plain\" or \"text/html\"\
    .  The attribute SHOULD be a\n   valid media type.  If supplied, it will be assumed\
    \ that the contents\n   are of that media type.  If the description lacks a \"\
    type\" value, it\n   will be assumed to be plain text (\"text/plain\").\n"
- title: 4.3.6.  The "validity-start" and "validity-end" Elements
  contents:
  - "4.3.6.  The \"validity-start\" and \"validity-end\" Elements\n   The \"validity-start\"\
    \ and \"validity-end\" elements are OPTIONAL\n   elements that describe the time\
    \ period from which the contents of the\n   LGR become valid (are used in registry\
    \ policy) and time when the\n   contents of the LGR cease to be used, respectively.\n\
    \   The dates MUST conform to the \"full-date\" format described in\n   Section\
    \ 5.6 of [RFC3339].\n       <validity-start>2014-03-12</validity-start>\n"
- title: 4.3.7.  The "unicode-version" Element
  contents:
  - "4.3.7.  The \"unicode-version\" Element\n   Whenever an LGR depends on character\
    \ properties from a given version\n   of the Unicode Standard, the version number\
    \ used in creating the LGR\n   MUST be listed in the form x.y.z, where x, y, and\
    \ z are positive\n   decimal integers (see [Unicode-Versions]).  If any software\n\
    \   processing the table does not have access to character property data\n   of\
    \ the requisite version, it MUST NOT perform any operations relating\n   to whole-label\
    \ evaluation relying on Unicode character properties\n   (Section 6.2.3).\n  \
    \ The value of a given Unicode character property may change between\n   versions\
    \ of the Unicode Character Database [UAX44], unless such\n   change has been explicitly\
    \ disallowed in [Unicode-Stability].  It is\n   RECOMMENDED to only reference\
    \ properties defined as stable or\n   immutable.  As an alternative to referencing\
    \ the property, the\n   information can be presented explicitly in the LGR.\n\
    \       <unicode-version>6.3.0</unicode-version>\n   It is not necessary to include\
    \ a \"unicode-version\" element for LGRs\n   that do not make use of Unicode character\
    \ properties; however, it is\n   RECOMMENDED.\n"
- title: 4.3.8.  The "references" Element
  contents:
  - "4.3.8.  The \"references\" Element\n   An LGR may define a list of references\
    \ that are used to associate\n   various individual elements in the LGR to one\
    \ or more normative\n   references.  A common use for references is to annotate\
    \ that code\n   points belong to an externally defined collection or standard\
    \ or to\n   give normative references for rules.\n   References are specified\
    \ in an OPTIONAL \"references\" element\n   containing one or more \"reference\"\
    \ elements, each with a unique \"id\"\n   attribute.  It is RECOMMENDED that the\
    \ \"id\" attribute be a zero-based\n   integer; however, in addition to digits\
    \ 0-9, it MAY contain uppercase\n   letters A-Z, as well as a period, hyphen,\
    \ colon, or underscore.  The\n   value of each \"reference\" element SHOULD be\
    \ the citation of a\n   standard, dictionary, or other specification in any suitable\
    \ format.\n   In addition to an \"id\" attribute, a \"reference\" element MAY\
    \ have a\n   \"comment\" attribute for an optional free-form annotation.\n   \
    \    <references>\n         <reference id=\"0\">The Unicode Consortium.  The Unicode\n\
    \           Standard, Version 8.0.0, (Mountain View, CA: The Unicode\n       \
    \    Consortium, 2015.  ISBN 978-1-936213-10-8)\n           http://www.unicode.org/versions/Unicode8.0.0/</reference>\n\
    \         <reference id=\"1\">Big-5: Computer Chinese Glyph and Character\n  \
    \          Code Mapping Table, Technical Report C-26, 1984</reference>\n     \
    \    <reference id=\"2\" comment=\"synchronized with Unicode 6.1\">\n        \
    \    ISO/IEC\n            10646:2012 3rd edition</reference>\n         ...\n \
    \      </references>\n       ...\n       <data>\n         <char cp=\"0620\" ref=\"\
    0 2\" />\n         ...\n       </data>\n   A reference is associated with an element\
    \ by using its id as part of\n   an optional \"ref\" attribute (see Section 5.4.1).\
    \  The \"ref\" attribute\n   may be used with many kinds of elements in the \"\
    data\" or \"rules\"\n   sections of the LGR, most notably those defining code\
    \ points,\n   variants, and rules.  However, a \"ref\" attribute may not occur\
    \ in\n   certain kinds of elements, including references to named character\n\
    \   classes or rules.  See below for the description of these elements.\n"
- title: 5.  Code Points and Variants
  contents:
  - "5.  Code Points and Variants\n   The bulk of an LGR is a description of which\
    \ set of code points is\n   eligible for a given label.  For rulesets that perform\
    \ operations\n   that result in potential variants, the code point-level relationships\n\
    \   between variants need to also be described.\n   The code point data is collected\
    \ within the \"data\" element.  Within\n   this element, a series of \"char\"\
    \ and \"range\" elements describe\n   eligible code points or ranges of code points,\
    \ respectively.\n   Collectively, these are known as the repertoire.\n   Discrete\
    \ permissible code points or code point sequences (see\n   Section 5.1) are declared\
    \ with a \"char\" element.  Here is a minimal\n   example declaration for a single\
    \ code point, with the code point\n   value given in the \"cp\" attribute:\n \
    \      <char cp=\"002D\"/>\n   As described below, a full declaration for a \"\
    char\" element, whether\n   or not it is used for a single code point or for a\
    \ sequence (see\n   Section 5.1), may have optional child elements defining variants.\n\
    \   Both the \"char\" and \"range\" elements can take a number of optional\n \
    \  attributes for conditional inclusion, commenting, cross-referencing,\n   and\
    \ character tagging, as described below.\n   Ranges of permissible code points\
    \ may be declared with a \"range\"\n   element, as in this minimal example:\n\
    \       <range first-cp=\"0030\" last-cp=\"0039\"/>\n   The range is inclusive\
    \ of the first and last code points.  Any\n   additional attributes defined for\
    \ a \"range\" element act as if applied\n   to each code point within.  A \"range\"\
    \ element has no child elements.\n   It is always possible to substitute a list\
    \ of individually specified\n   code points for a \"range\" element.  The reverse\
    \ is not necessarily\n   the case.  Whenever such a substitution is possible,\
    \ it makes no\n   difference in processing the data.  Tools reading or writing\
    \ the LGR\n   format are free to aggregate sequences of consecutive code points\
    \ of\n   the same properties into \"range\" elements.\n   Code points MUST be\
    \ represented according to the standard Unicode\n   convention but without the\
    \ prefix \"U+\": they are expressed in\n   uppercase hexadecimal and are zero-padded\
    \ to a minimum of 4 digits.\n   The rationale for not allowing other encoding\
    \ formats, including\n   native Unicode encoding in XML, is explored in [UAX42].\
    \  The XML\n   conventions used in this format, such as element and attribute\
    \ names,\n   mirror this document where practical and reasonable to do so.  It\
    \ is\n   RECOMMENDED to list all \"char\" elements in ascending order of the\n\
    \   \"cp\" attribute.  Not doing so makes it unnecessarily difficult for\n   authors\
    \ and reviewers to check for errors, such as duplications, or\n   to review and\
    \ compare against listing of code points in other\n   documents and specifications.\n\
    \   All \"char\" elements in the \"data\" section MUST have distinct \"cp\"\n\
    \   attributes.  The \"range\" elements MUST NOT specify code point ranges\n \
    \  that overlap either another range or any single code point \"char\"\n   elements.\
    \  An LGR that defines the same code point more than once by\n   any combination\
    \ of \"char\" or \"range\" elements MUST be rejected.\n"
- title: 5.1.  Sequences
  contents:
  - "5.1.  Sequences\n   A sequence of two or more code points may be specified in\
    \ an LGR --\n   for example, when defining the source for n:m variant mappings.\n\
    \   Another use of sequences would be in cases when the exact sequence of\n  \
    \ code points is required to occur in order for the constituent\n   elements to\
    \ be eligible, such as when some code point is only\n   eligible when preceded\
    \ or followed by a certain code point.  The\n   following would define the eligibility\
    \ of the MIDDLE DOT (U+00B7)\n   only when both preceded and followed by the LATIN\
    \ SMALL LETTER L\n   (U+006C):\n       <char cp=\"006C 00B7 006C\" comment=\"\
    Catalan middle dot\"/>\n   All sequences defined this way must be distinct, but\
    \ sub-sequences\n   may be defined.  Thus, the sequence defined here may coexist\
    \ with\n   single code point definitions such as:\n       <char cp=\"006C\" />\n\
    \   As an alternative to using sequences to define a required context, a\n   \"\
    char\" or \"range\" element may specify a conditional context using an\n   optional\
    \ \"when\" attribute as described below in Section 5.2.  Using a\n   conditional\
    \ context is more flexible because a context is not limited\n   to a specific\
    \ sequence of code points.  In addition, using a context\n   allows the choice\
    \ of specifying either a prohibited or a required\n   context.\n"
- title: 5.2.  Conditional Contexts
  contents:
  - "5.2.  Conditional Contexts\n   A conditional context is specified by a rule that\
    \ must be satisfied\n   (or, alternatively, must not be satisfied) for a code\
    \ point in a\n   given label, often at a particular location in a label.\n   To\
    \ specify a conditional context, either a \"when\" or \"not-when\"\n   attribute\
    \ may be used.  The value of each \"when\" or \"not-when\"\n   attribute is a\
    \ context rule as described below in Section 6.3.  This\n   rule can be a rule\
    \ evaluating the whole label or a parameterized\n   context rule.  The context\
    \ condition is met when the rule specified\n   in the \"when\" attribute is matched\
    \ or when the rule in the \"not-when\"\n   attribute fails to match.  It is an\
    \ error to reference a rule that is\n   not actually defined in the \"rules\"\
    \ element.\n   A parameterized context rule (see Section 6.4) defines the context\n\
    \   immediately surrounding a given code point; unlike a sequence, the\n   context\
    \ is not limited to a specific fixed code point but, for\n   example, may designate\
    \ any member of a certain character class or a\n   code point that has a certain\
    \ Unicode character property.\n   Given a suitable definition of a parameterized\
    \ context rule named\n   \"follows-virama\", this example specifies that a ZERO\
    \ WIDTH JOINER\n   (U+200D) is restricted to immediately follow any of several\
    \ code\n   points classified as virama:\n       <char cp=\"200D\" when=\"follows-virama\"\
    \ />\n   For a complete example, see Appendix A.\n   In contrast, a whole label\
    \ rule (see Section 6.3) specifies a\n   condition to be met by the entire label\
    \ -- for example, that it must\n   contain at least one code point from a given\
    \ script anywhere in the\n   label.  In the following example, no digit from either\
    \ range may\n   occur in a label that mixes digits from both ranges:\n       <data>\n\
    \          <range first-cp=\"0660\" last-cp=\"0669\" not-when=\"mixed-digits\"\
    \n                 tag=\"arabic-indic-digits\" />\n          <range first-cp=\"\
    06F0\" last-cp=\"06F9\" not-when=\"mixed-digits\"\n                 tag=\"extended-arabic-indic-digits\"\
    \ />\n       </data>\n   (See Section 6.3.9 for an example of the \"mixed-digits\"\
    \ rule.)\n   The OPTIONAL \"when\" or \"not-when\" attributes are mutually exclusive.\n\
    \   They MAY be applied to both \"char\" and \"range\" elements in the \"data\"\
    \n   element, including \"char\" elements defining sequences of code points,\n\
    \   as well as to \"var\" elements (see Section 5.3.5).\n   If a label contains\
    \ one or more code points that fail to satisfy a\n   conditional context, the\
    \ label is invalid (see Section 7.5).  For\n   variants, the conditional context\
    \ restricts the definition of the\n   variant to the case where the condition\
    \ is met.  Outside the\n   specified context, a variant is not defined.\n"
- title: 5.3.  Variants
  contents:
  - "5.3.  Variants\n   Most LGRs typically only determine simple code point eligibility,\
    \ and\n   for them, the elements described so far would be the only ones\n   required\
    \ for their \"data\" section.  Others additionally specify a\n   mapping of code\
    \ points to other code points, known as \"variants\".\n   What constitutes a variant\
    \ code point is a matter of policy and\n   varies for each implementation.  The\
    \ following examples are intended\n   to demonstrate the syntax; they are not\
    \ necessarily typical.\n"
- title: 5.3.1.  Basic Variants
  contents:
  - "5.3.1.  Basic Variants\n   Variant code points are specified using one of more\
    \ \"var\" elements as\n   children of a \"char\" element.  The target mapping\
    \ is specified using\n   the \"cp\" attribute.  Other, optional attributes for\
    \ the \"var\" element\n   are described below.\n   For example, to map LATIN SMALL\
    \ LETTER V (U+0076) as a variant of\n   LATIN SMALL LETTER U (U+0075):\n     \
    \  <char cp=\"0075\">\n           <var cp=\"0076\"/>\n       </char>\n   A sequence\
    \ of multiple code points can be specified as a variant of a\n   single code point.\
    \  For example, the sequence of LATIN SMALL LETTER O\n   (U+006F) then LATIN SMALL\
    \ LETTER E (U+0065) might hypothetically be\n   specified as a variant for a LATIN\
    \ SMALL LETTER O WITH DIAERESIS\n   (U+00F6) as follows:\n       <char cp=\"00F6\"\
    >\n           <var cp=\"006F 0065\"/>\n       </char>\n   The source and target\
    \ of a variant mapping may both be sequences but\n   not ranges.\n   If the source\
    \ of one mapping is a prefix sequence of the source for\n   another, both variant\
    \ mappings will be considered at the same\n   location in the input label when\
    \ generating permuted variant labels.\n   If poorly designed, an LGR containing\
    \ such an instance of a prefix\n   relation could generate multiple instances\
    \ of the same variant label\n   for the same original label, but with potentially\
    \ different\n   dispositions.  Any duplicate variant labels encountered MUST be\n\
    \   treated as an error (see Section 8.4).\n   The \"var\" element specifies variant\
    \ mappings in only one direction,\n   even though the variant relation is usually\
    \ considered symmetric;\n   that is, if A is a variant of B, then B should also\
    \ be a variant of\n   A.  The format requires that the inverse of the variant\
    \ be given\n   explicitly to fully specify symmetric variant relations in the\
    \ LGR.\n   This has the beneficial side effect of making the symmetry explicit:\n\
    \       <char cp=\"006F 0065\">\n           <var cp=\"00F6\"/>\n       </char>\n\
    \   Variant relations are normally not only symmetric but also\n   transitive.\
    \  If A is a variant of B and B is a variant of C, then A\n   is also a variant\
    \ of C.  As with symmetry, these transitive relations\n   are only part of the\
    \ LGR if spelled out explicitly.  Implementations\n   that require an LGR to be\
    \ symmetric and transitive should verify this\n   mechanically.\n   All variant\
    \ mappings are unique.  For a given \"char\" element, all\n   \"var\" elements\
    \ MUST have a unique combination of \"cp\", \"when\", and\n   \"not-when\" attributes.\
    \  It is RECOMMENDED to list the \"var\" elements\n   in ascending order of their\
    \ target code point sequence.  (For \"when\"\n   and \"not-when\" attributes,\
    \ see Section 5.3.5.)\n"
- title: 5.3.2.  The "type" Attribute
  contents:
  - "5.3.2.  The \"type\" Attribute\n   Variants may be tagged with an OPTIONAL \"\
    type\" attribute.  The value\n   of the \"type\" attribute may be any non-empty\
    \ value not starting with\n   an underscore and not containing spaces.  This value\
    \ is used to\n   resolve the disposition of any variant labels created using a\
    \ given\n   variant.  (See Section 7.2.)\n   By default, the values of the \"\
    type\" attribute directly describe the\n   target policy status (disposition)\
    \ for a variant label that was\n   generated using a particular variant, with\
    \ any variant label being\n   assigned a disposition corresponding to the most\
    \ restrictive variant\n   type.  Several conventional disposition values are predefined\
    \ below\n   in Section 7.  Whenever these values can represent the desired\n \
    \  policy, they SHOULD be used.\n       <char cp=\"767C\">\n           <var cp=\"\
    53D1\" type=\"allocatable\"/>\n           <var cp=\"5F42\" type=\"blocked\"/>\n\
    \           <var cp=\"9AEA\" type=\"blocked\"/>\n           <var cp=\"9AEE\" type=\"\
    blocked\"/>\n       </char>\n   By default, if a variant label contains any instance\
    \ of one of the\n   variants of type \"blocked\", the label would be blocked,\
    \ but if it\n   contained only instances of variants to be allocated, it could\
    \ be\n   allocated.  See the discussion about implied actions in Section 7.6.\n\
    \   The XML format for the LGR makes the relation between the values of\n   the\
    \ \"type\" attribute on variants and the resulting disposition of\n   variant\
    \ labels fully explicit.  See the discussion in Section 7.2.\n   Making this relation\
    \ explicit allows a generalization of the \"type\"\n   attribute from directly\
    \ reflecting dispositions to a more\n   differentiated intermediate value that\
    \ is then used in the resolution\n   of label disposition.  Instead of the default\
    \ action of applying the\n   most restrictive disposition to the entire label,\
    \ such a generalized\n   resolution can be used to achieve additional goals, such\
    \ as limiting\n   the set of allocatable variant labels or implementing other\
    \ policies\n   found in existing LGRs (see, for example, Appendix B).\n   Because\
    \ variant mappings MUST be unique, it is not possible to define\n   the same variant\
    \ for the same \"char\" element with different \"type\"\n   attributes (however,\
    \ see Section 5.3.5).\n"
- title: 5.3.3.  Null Variants
  contents:
  - "5.3.3.  Null Variants\n   A null variant is a variant string that maps to no\
    \ code point.  This\n   is used when a particular code point sequence is considered\n\
    \   discretionary in the context of a whole label.  To specify a null\n   variant,\
    \ use an empty \"cp\" attribute.  For example, to mark a string\n   with a ZERO\
    \ WIDTH NON-JOINER (U+200C) to the same string without the\n   ZERO WIDTH NON-JOINER:\n\
    \       <char cp=\"200C\">\n           <var cp=\"\"/>\n       </char>\n   This\
    \ is useful in expressing the intent that some code points in a\n   label are\
    \ to be mapped away when generating a canonical variant of\n   the label.  However,\
    \ in tables that are designed to have symmetric\n   variant mappings, this could\
    \ lead to combinatorial explosion if not\n   handled carefully.\n   The symmetric\
    \ form of a null variant is expressed as follows:\n       <char cp=\"\">\n   \
    \        <var cp=\"200C\" type=\"invalid\" />\n       </char>\n   A \"char\" element\
    \ with an empty \"cp\" attribute MUST specify at least\n   one variant mapping.\
    \  It is strongly RECOMMENDED to use a type of\n   \"invalid\" or equivalent when\
    \ defining variant mappings from null\n   sequences, so that variant mappings\
    \ from null sequences are removed\n   in variant label generation (see Section\
    \ 5.3.2).\n"
- title: 5.3.4.  Variants with Reflexive Mapping
  contents:
  - "5.3.4.  Variants with Reflexive Mapping\n   At first glance, there seems to be\
    \ no call for adding variant\n   mappings for which source and target code points\
    \ are the same -- that\n   is, for which the mapping is reflexive, or, in other\
    \ words, an\n   identity mapping.  Yet, such reflexive mappings occur frequently\
    \ in\n   LGRs that follow [RFC3743].\n   Adding a \"var\" element allows both\
    \ a type and a reference id to be\n   specified for it.  While the reference id\
    \ is not used in processing,\n   the type of the variant can be used to trigger\
    \ actions.  In permuting\n   the label to generate all possible variants, the\
    \ type associated with\n   a reflexive variant mapping is applied to any of the\
    \ permuted labels\n   containing the original code point.\n   In the following\
    \ example, let's assume that the goal is to allocate\n   only those labels that\
    \ contain a variant that is considered\n   \"preferred\" in some way.  As defined\
    \ in the example, the code point\n   U+3473 exists both as a variant of U+3447\
    \ and as a variant of itself\n   (reflexive mapping).  Assuming an original label\
    \ of \"U+3473 U+3447\",\n   the permuted variant \"U+3473 U+3473\" would consist\
    \ of the reflexive\n   variant of U+3473 followed by a variant of U+3447.  Given\
    \ the variant\n   mappings as defined here, the types for both of the variant\
    \ mappings\n   used to generate that particular permutation would have the value\n\
    \   \"preferred\":\n       <char cp=\"3447\" ref=\"0\">\n         <var cp=\"3473\"\
    \ type=\"preferred\" ref=\"1 3\" />\n       </char>\n       <char cp=\"3473\"\
    \ ref=\"0\">\n         <var cp=\"3447\" type=\"blocked\" ref=\"1 3\" />\n    \
    \     <var cp=\"3473\" type=\"preferred\" ref=\"0\" />\n       </char>\n   Having\
    \ established the variant types in this way, a set of actions\n   could be defined\
    \ that return a disposition of \"allocatable\" or\n   \"activated\" for a label\
    \ consisting exclusively of variants with type\n   \"preferred\", for example.\
    \  (For details on how to define actions\n   based on variant types, see Section\
    \ 7.2.1.)\n   In general, using reflexive variant mappings in this manner makes\
    \ it\n   possible to calculate disposition values using a uniform approach for\n\
    \   all labels, whether they consist of mapped variant code points,\n   original\
    \ code points, or a mixture of both.  In particular, the\n   dispositions for\
    \ two otherwise identical labels may differ based on\n   which variant mappings\
    \ were executed in order to generate each of\n   them.  (For details on how to\
    \ generate variants and evaluate\n   dispositions, see Section 8.)\n   Another\
    \ useful convention that uses reflexive variants is described\n   below in Section\
    \ 7.2.1.\n"
- title: 5.3.5.  Conditional Variants
  contents:
  - "5.3.5.  Conditional Variants\n   Fundamentally, variants are mappings between\
    \ two sequences of code\n   points.  However, in some instances, for a variant\
    \ relationship to\n   exist, some context external to the code point sequence\
    \ must also be\n   considered.  For example, a positional context may determine\
    \ whether\n   two code point sequences are variants of each other.\n   An example\
    \ of that are Arabic code points, which can have different\n   forms based on\
    \ position, with some code points sharing forms, thus\n   making them variants\
    \ in the positions corresponding to those forms.\n   Such positional context cannot\
    \ be solely derived from the code point\n   by itself, as the code point would\
    \ be the same for the various forms.\n   As described in Section 5.2, an OPTIONAL\
    \ \"when\" or \"not-when\"\n   attribute may be given for any \"var\" element\
    \ to specify required or\n   prohibited contextual conditions under which the\
    \ variant is defined.\n   Assuming that the \"rules\" element contains suitably\
    \ defined rules for\n   \"arabic-isolated\" and \"arabic-final\", the following\
    \ example shows how\n   to mark ARABIC LETTER ALEF WITH WAVY HAMZA BELOW (U+0673)\
    \ as a\n   variant of ARABIC LETTER ALEF WITH HAMZA BELOW (U+0625), but only\n\
    \   when it appears in its isolated or final forms:\n       <char cp=\"0625\"\
    >\n           <var cp=\"0673\" when=\"arabic-isolated\"/>\n           <var cp=\"\
    0673\" when=\"arabic-final\"/>\n       </char>\n   While a \"var\" element MUST\
    \ NOT contain multiple conditions (it is\n   only allowed a single \"when\" or\
    \ \"not-when\" attribute), multiple \"var\"\n   elements using the same mapping\
    \ MAY be specified with different\n   \"when\" or \"not-when\" attributes.  The\
    \ combination of mapping and\n   conditional context defines a unique variant.\n\
    \   For each variant label, care must be taken to ensure that at most one\n  \
    \ of the contextual conditions is met for variants with the same\n   mapping;\
    \ otherwise, duplicate variant labels would be created for the\n   same input\
    \ label.  Any such duplicate variant labels MUST be treated\n   as an error; see\
    \ Section 8.4.\n   Two contexts may be complementary, as in the following example,\
    \ which\n   shows ARABIC LETTER TEH MARBUTA (U+0629) as a variant of ARABIC\n\
    \   LETTER HEH (U+0647), but with two different types.\n       <char cp=\"0647\"\
    \ >\n         <var cp=\"0629\" not-when=\"arabic-final\" type=\"blocked\" />\n\
    \         <var cp=\"0629\" when=\"arabic-final\" type=\"allocatable\" />\n   \
    \    </char>\n   The intent is that a label that uses U+0629 instead of U+0647\
    \ in a\n   final position should be considered essentially the same label and,\n\
    \   therefore, allocatable to the same entity, while the same\n   substitution\
    \ in a non-final position leads to labels that are\n   different, but considered\
    \ confusable, so that either one, but not\n   both, should be delegatable.\n \
    \  For symmetry, the reverse mappings must exist and must agree in their\n   \"\
    when\" or \"not-when\" attributes.  However, symmetry does not apply to\n   the\
    \ other attributes.  For example, these are potential reverse\n   mappings for\
    \ the above:\n       <char cp=\"0629\" >\n         <var cp=\"0647\" not-when=\"\
    arabic-final\" type=\"allocatable\" />\n         <var cp=\"0647\" when=\"arabic-final\"\
    \ type=\"allocatable\" />\n       </char>\n   Here, both variants have the same\
    \ \"type\" attribute.  While it is\n   tempting to recognize that, in this instance,\
    \ the \"when\" and\n   \"not-when\" attributes are complementary; therefore, between\
    \ them they\n   cover every single possible context, it is strongly RECOMMENDED\
    \ to\n   use the format shown in the example that makes the symmetry easily\n\
    \   verifiable by parsers and tools.  (The same applies to entries\n   created\
    \ for transitivity.)\n   Arabic is an example of a script for which such conditional\
    \ variants\n   have been implemented based on the joining contexts for Arabic\
    \ code\n   points.  The mechanism defined here supports other forms of\n   conditional\
    \ variants that may be required by other scripts.\n"
- title: 5.4.  Annotations
  contents:
  - "5.4.  Annotations\n   Two attributes, the \"ref\" and \"comment\" attributes,\
    \ can be used to\n   annotate individual elements in the LGR.  They are ignored\
    \ in\n   machine-processing of the LGR.  The \"ref\" attribute is intended for\n\
    \   formal annotations and the \"comment\" attribute for free-form\n   annotations.\
    \  The latter can be applied more widely.\n"
- title: 5.4.1.  The "ref" Attribute
  contents:
  - "5.4.1.  The \"ref\" Attribute\n   Reference information MAY optionally be specified\
    \ by a \"ref\"\n   attribute consisting of a space-delimited sequence of reference\n\
    \   identifiers (see Section 4.3.8).\n       <char cp=\"5220\" ref=\"0\">\n  \
    \         <var cp=\"5220\" ref=\"5\"/>\n           <var cp=\"522A\" ref=\"2 3\"\
    />\n       </char>\n   This facility is typically used to give source information\
    \ for code\n   points or variant relations.  This information is ignored when\n\
    \   machine-processing an LGR.  If applied to a range, the \"ref\"\n   attribute\
    \ applies to every code point in the range.  All reference\n   identifiers MUST\
    \ be from the set declared in the \"references\" element\n   (see Section 4.3.8).\
    \  It is an error to repeat a reference identifier\n   in the same \"ref\" attribute.\
    \  It is RECOMMENDED that identifiers be\n   listed in ascending order.\n   In\
    \ addition to \"char\", \"range\", and \"var\" elements in the \"data\"\n   section,\
    \ a \"ref\" attribute may be present for a number of element\n   types contained\
    \ in the \"rules\" element as described below: actions\n   and literals (\"char\"\
    \ inside a rule), as well as for definitions of\n   rules and classes, but not\
    \ for references to named character classes\n   or rules using the \"by-ref\"\
    \ attribute defined below.  (The use of the\n   \"by-ref\" and \"ref\" attributes\
    \ is mutually exclusive.)  None of the\n   elements in the metadata take a \"\
    ref\" attribute; to provide\n   additional information, use the \"description\"\
    \ element instead.\n"
- title: 5.4.2.  The "comment" Attribute
  contents:
  - "5.4.2.  The \"comment\" Attribute\n   Any \"char\", \"range\", or \"variant\"\
    \ element in the \"data\" section may\n   contain an OPTIONAL \"comment\" attribute.\
    \  The contents of a \"comment\"\n   attribute are free-form plain text.  Comments\
    \ are ignored in machine\n   processing of the table.  \"comment\" attributes\
    \ MAY also be placed on\n   all elements in the \"rules\" section of the document,\
    \ such as actions\n   and match operators, as well as definitions of classes and\
    \ rules, but\n   not on child elements of the \"class\" element.  Finally, in\
    \ the\n   metadata, only the \"version\" and \"reference\" elements MAY have\n\
    \   \"comment\" attributes (to match the syntax in [RFC3743]).\n"
- title: 5.5.  Code Point Tagging
  contents:
  - "5.5.  Code Point Tagging\n   Typically, LGRs are used to explicitly designate\
    \ allowable code\n   points, where any label that contains a code point not explicitly\n\
    \   listed in the LGR is considered an ineligible label according to the\n   ruleset.\n\
    \   For more-complex registry rules, there may be a need to discern one\n   or\
    \ more subsets of code points.  This can be accomplished by applying\n   an OPTIONAL\
    \ \"tag\" attribute to \"char\" or \"range\" elements that are\n   child elements\
    \ of the \"data\" element.  By collecting code points that\n   share the same\
    \ tag value, character classes may be defined (see\n   Section 6.2.2) that can\
    \ then be used in parameterized context or\n   whole label rules (see Section\
    \ 6.3.2).\n   Each \"tag\" attribute MAY contain multiple values separated by\n\
    \   white space.  A tag value is an identifier that may also include\n   certain\
    \ punctuation marks, such as a colon.  Formally, it MUST\n   correspond to the\
    \ XML 1.0 Nmtoken (Name token) production (see [XML]\n   Section 2.3).  It is\
    \ an error to duplicate a value within the same\n   \"tag\" attribute.  A \"tag\"\
    \ attribute for a \"range\" element applies to\n   all code points in the range.\
    \  Because code point sequences are not\n   proper members of a set of code points,\
    \ a \"tag\" attribute MUST NOT be\n   present in a \"char\" element defining a\
    \ code point sequence.\n"
- title: 6.  Whole Label and Context Evaluation
  contents:
  - '6.  Whole Label and Context Evaluation

    '
- title: 6.1.  Basic Concepts
  contents:
  - "6.1.  Basic Concepts\n   The \"rules\" element contains the specification of\
    \ both context-based\n   and whole label rules.  Collectively, these are known\
    \ as Whole Label\n   Evaluation (WLE) rules (Section 6.3).  The \"rules\" element\
    \ also\n   contains the character classes (Section 6.2) that they depend on, and\n\
    \   any actions (Section 7) that assign dispositions to labels based on\n   rules\
    \ or variant mappings.\n   A whole label rule is applied to the whole label. \
    \ It is used to\n   validate both original labels and any variant labels computed\n\
    \   from them.\n   A rule implementing a conditional context as discussed in Section\
    \ 5.2\n   does not necessarily apply to the whole label but may be specific to\n\
    \   the context around a single code point or code point sequence.\n   Certain\
    \ code points in a label sometimes need to satisfy\n   context-based rules --\
    \ for example, for the label to be considered\n   valid, or to satisfy the context\
    \ for a variant mapping (see the\n   description of the \"when\" attribute in\
    \ Section 6.4).\n   For example, if a rule is referenced in the \"when\" attribute\
    \ of a\n   variant mapping, it is used to describe the conditional context under\n\
    \   which the particular variant mapping is defined to exist.\n   Each rule is\
    \ defined in a \"rule\" element.  A rule may contain the\n   following as child\
    \ elements:\n   o  literal code points or code point sequences\n   o  character\
    \ classes, which define sets of code points to be used for\n      context comparisons\n\
    \   o  context operators, which define when character classes and\n      literals\
    \ may appear\n   o  nested rules, whether defined in place or invoked by reference\n\
    \   Collectively, these are called \"match operators\" and are listed in\n   Section\
    \ 6.3.2.  An LGR containing rules or match operators that\n   1.  are incorrectly\
    \ defined or nested,\n   2.  have invalid attributes, or\n   3.  have invalid\
    \ or undefined attribute values\n   MUST be rejected.  Note that not all of the\
    \ constraints defined here\n   are validated by the schema.\n"
- title: 6.2.  Character Classes
  contents:
  - "6.2.  Character Classes\n   Character classes are sets of characters that often\
    \ share a\n   particular property.  While they function like sets in every way,\n\
    \   even supporting the usual set operators, they are called \"character\n   classes\"\
    \ here in a nod to the use of that term in regular expression\n   syntax.  (This\
    \ also avoids confusion with the term \"character set\" in\n   the sense of character\
    \ encoding.)\n   Character classes can be specified in several ways:\n   o  by\
    \ defining the class via matching a tag in the code point data.\n      All characters\
    \ with the same \"tag\" attribute are part of the same\n      class;\n   o  by\
    \ referencing a value of one of the Unicode character properties\n      defined\
    \ in the Unicode Character Database;\n   o  by explicitly listing all the code\
    \ points in the class; or\n   o  by defining the class as a set combination of\
    \ any number of other\n      classes.\n"
- title: 6.2.1.  Declaring and Invoking Named Classes
  contents:
  - "6.2.1.  Declaring and Invoking Named Classes\n   A character class has an OPTIONAL\
    \ \"name\" attribute consisting of a\n   single identifier not containing spaces.\
    \  All names for classes must\n   be unique.  If the \"name\" attribute is omitted,\
    \ the class is\n   anonymous and exists only inside the rule or combined class\
    \ where it\n   is defined.  A named character class is defined independently and\
    \ can\n   be referenced by name from within any rules or as part of other\n  \
    \ character class definitions.\n       <class name=\"example\" comment=\"an example\
    \ class definition\">\n           0061 4E00\n       </class>\n       ...\n   \
    \    <rule>\n           <class by-ref=\"example\" />\n       </rule>\n   An empty\
    \ \"class\" element with a \"by-ref\" attribute is a reference to\n   an existing\
    \ named class.  The \"by-ref\" attribute MUST NOT be used in\n   the same \"class\"\
    \ element with any of these attributes: \"name\",\n   \"from-tag\", \"property\"\
    , or \"ref\".  The \"name\" attribute MUST be\n   present if and only if the class\
    \ is a direct child element of the\n   \"rules\" element.  It is an error to reference\
    \ a named class for which\n   the definition has not been seen.\n"
- title: 6.2.2.  Tag-Based Classes
  contents:
  - "6.2.2.  Tag-Based Classes\n   The \"char\" or \"range\" elements that are child\
    \ elements of the \"data\"\n   element MAY contain a \"tag\" attribute that consists\
    \ of one or more\n   space-separated tag values; for example:\n       <char cp=\"\
    0061\" tag=\"letter lower\"/>\n       <char cp=\"4E00\" tag=\"letter\"/>\n   This\
    \ defines two tags for use with code point U+0061, the tag\n   \"letter\" and\
    \ the tag \"lower\".  Use\n       <class name=\"letter\" from-tag=\"letter\" />\n\
    \       <class name=\"lower\" from-tag=\"lower\" />\n   to define two named character\
    \ classes, \"letter\" and \"lower\",\n   containing all code points with the respective\
    \ tags, the first with\n   0061 and 4E00 as elements, and the latter with 0061\
    \ but not 4E00 as\n   an element.  The \"name\" attribute may be omitted for an\
    \ anonymous\n   in-place definition of a nested, tag-based class.\n   Tag values\
    \ are typically identifiers, with the addition of a few\n   punctuation symbols,\
    \ such as a colon.  Formally, they MUST correspond\n   to the XML 1.0 Nmtoken\
    \ production.  While a \"tag\" attribute may\n   contain a list of tag values,\
    \ the \"from-tag\" attribute MUST always\n   contain a single tag value.\n   If\
    \ the document contains no \"char\" or \"range\" elements with a\n   corresponding\
    \ tag, the character class represents the empty set.\n   This is valid, to allow\
    \ a common \"rules\" element to be shared across\n   files.  However, it is RECOMMENDED\
    \ that implementations allow for a\n   warning to ensure that referring to an\
    \ undefined tag in this way is\n   intentional.\n"
- title: 6.2.3.  Unicode Property-Based Classes
  contents:
  - "6.2.3.  Unicode Property-Based Classes\n   A class is defined in terms of Unicode\
    \ properties by giving the\n   Unicode property alias and the property value or\
    \ property value\n   alias, separated by a colon.\n       <class name=\"virama\"\
    \ property=\"ccc:9\" />\n   The example above selects all code points for which\
    \ the Unicode\n   Canonical Combining Class (ccc) value is 9.  This value of the\
    \ ccc is\n   assigned to all code points that encode viramas.\n   Unicode property\
    \ values MUST be designated via a composite of the\n   attribute name and value\
    \ as defined for the property value in\n   [UAX42], separated by a colon.  Loose\
    \ matching of property values and\n   names as described in [UAX44] is not appropriate\
    \ for an XML schema\n   and is not supported; it is likewise not supported in\
    \ the XML\n   representation [UAX42] of the Unicode Character Database itself.\n\
    \   A property-based class MAY be anonymous, or, when defined as an\n   immediate\
    \ child of the \"rules\" element, it MAY be named to relate a\n   formal property\
    \ definition to its usage, such as the use of the value\n   9 for ccc to designate\
    \ a virama (or halant) in various scripts.\n   Unicode properties may, in principle,\
    \ change between versions of the\n   Unicode Standard.  However, the values assigned\
    \ for a given version\n   are fixed.  If Unicode properties are used, a Unicode\
    \ version MUST be\n   declared in the \"unicode-version\" element in the header.\
    \  (Note: Some\n   Unicode properties are by definition stable across versions\
    \ and do\n   not change once assigned; see [Unicode-Stability].)\n   All implementations\
    \ processing LGR files SHOULD provide support for\n   the following minimal set\
    \ of Unicode properties:\n   o  General Category (gc)\n   o  Script (sc)\n   o\
    \  Canonical Combining Class (ccc)\n   o  Bidi Class (bc)\n   o  Arabic Joining\
    \ Type (jt)\n   o  Indic Syllabic Category (InSC)\n   o  Deprecated (Dep)\n  \
    \ The short name for each property is given in parentheses.\n   If a program that\
    \ is using an LGR to determine the validity of a\n   label encounters a property\
    \ that it does not support, it MUST abort\n   with an error.\n"
- title: 6.2.4.  Explicitly Declared Classes
  contents:
  - "6.2.4.  Explicitly Declared Classes\n   A class of code points may also be declared\
    \ by listing all code\n   points that are members of the class.  This is useful\
    \ when tagging\n   cannot be used because code points are not listed individually\
    \ as\n   part of the eligible set of code points for the given LGR -- for\n  \
    \ example, because they only occur in code point sequences.\n   To define a class\
    \ in terms of an explicit list of code points, use a\n   space-separated list\
    \ of hexadecimal code point values:\n       <class name=\"abcd\">0061 0062 0063\
    \ 0064</class>\n   This defines a class named \"abcd\" containing the code points\
    \ for\n   characters \"a\", \"b\", \"c\", and \"d\".  The ordering of the code\
    \ points\n   is not material, but it is RECOMMENDED to list them in ascending\n\
    \   order; not doing so makes it unnecessarily difficult for users to\n   detect\
    \ errors such as duplicates or to compare and review these\n   classes against\
    \ other specifications.\n   In a class definition, ranges of code points are represented\
    \ by a\n   hexadecimal start and end value separated by a hyphen.  The following\n\
    \   declaration is equivalent to the preceding:\n       <class name=\"abcd\">0061-0064</class>\n\
    \   Range and code point declarations can be freely intermixed:\n       <class\
    \ name=\"abcd\">0061 0062-0063 0064</class>\n   The contents of a class differ\
    \ from a repertoire in that the latter\n   MAY contain sequences as elements,\
    \ while the former MUST NOT.\n   Instead, they closely resemble character classes\
    \ as found in regular\n   expressions.\n"
- title: 6.2.5.  Combined Classes
  contents:
  - "6.2.5.  Combined Classes\n   Classes may be combined using operators for set\
    \ complement, union,\n   intersection, difference (elements of the first class\
    \ that are not in\n   the second), and symmetric difference (elements in either\
    \ class but\n   not both).  Because classes fundamentally function like sets,\
    \ the\n   union of several character classes is itself a class, for example.\n\
    \   +-------------------+----------------------------------------------+\n   |\
    \ Logical Operation | Example                                      |\n   +-------------------+----------------------------------------------+\n\
    \   | Complement        | <complement><class by-ref=\"xxx\"></complement>|\n \
    \  +-------------------+----------------------------------------------+\n   |\
    \ Union             | <union>                                      |\n   |   \
    \                |    <class by-ref=\"class-1\"/>                 |\n   |    \
    \               |    <class by-ref=\"class-2\"/>                 |\n   |     \
    \              |    <class by-ref=\"class-3\"/>                 |\n   |      \
    \             | </union>                                     |\n   +-------------------+----------------------------------------------+\n\
    \   | Intersection      | <intersection>                               |\n   |\
    \                   |    <class by-ref=\"class-1\"/>                 |\n   | \
    \                  |    <class by-ref=\"class-2\"/>                 |\n   |  \
    \                 | </intersection>                              |\n   +-------------------+----------------------------------------------+\n\
    \   | Difference        | <difference>                                 |\n   |\
    \                   |    <class by-ref=\"class-1\"/>                 |\n   | \
    \                  |    <class by-ref=\"class-2\"/>                 |\n   |  \
    \                 | </difference>                                |\n   +-------------------+----------------------------------------------+\n\
    \   | Symmetric         | <symmetric-difference>                       |\n   |\
    \ Difference        |    <class by-ref=\"class-1\"/>                 |\n   | \
    \                  |    <class by-ref=\"class-2\"/>                 |\n   |  \
    \                 | </symmetric-difference>                      |\n   +-------------------+----------------------------------------------+\n\
    \                               Set Operators\n   The elements from this table\
    \ may be arbitrarily nested inside each\n   other, subject to the following restriction:\
    \ a \"complement\" element\n   MUST contain precisely one \"class\" or one of\
    \ the operator elements,\n   while an \"intersection\", \"symmetric-difference\"\
    , or \"difference\"\n   element MUST contain precisely two, and a \"union\" element\
    \ MUST\n   contain two or more of these elements.\n   An anonymous combined class\
    \ can be defined directly inside a rule or\n   any of the match operator elements\
    \ that allow child elements (see\n   Section 6.3.2) by using the set combination\
    \ as the outer element.\n       <rule>\n           <union>\n               <class\
    \ by-ref=\"xxx\"/>\n               <class by-ref=\"yyy\"/>\n           </union>\n\
    \       </rule>\n   The example shows the definition of an anonymous combined\
    \ class that\n   represents the union of classes \"xxx\" and \"yyy\".  There is\
    \ no need to\n   wrap this union inside another \"class\" element, and, in fact,\
    \ set\n   combination elements MUST NOT be nested inside a \"class\" element.\n\
    \   Lastly, to create a named combined class that can be referenced in\n   other\
    \ classes or in rules as <class by-ref=\"xxxyyy\"/>, add a \"name\"\n   attribute\
    \ to the set combination element -- for example,\n   <union name=\"xxxyyy\" />\
    \ -- and place it at the top level immediately\n   below the \"rules\" element\
    \ (see Section 6.2.1).\n       <rules>\n          <union name=\"xxxyyy\">\n  \
    \            <class by-ref=\"xxx\"/>\n              <class by-ref=\"yyy\"/>\n\
    \          </union>\n            ...\n       </rules>\n   Because (as for ordinary\
    \ sets) a combination of classes is itself a\n   class, no matter by what combinations\
    \ of set operators a combined\n   class is created, a reference to it always uses\
    \ the \"class\" element\n   as described in Section 6.2.1.  That is, a named class\
    \ is always\n   referenced via an empty \"class\" element using the \"by-ref\"\
    \ attribute\n   containing the name of the class to be referenced.\n"
- title: 6.3.  Whole Label and Context Rules
  contents:
  - "6.3.  Whole Label and Context Rules\n   Each rule comprises a series of matching\
    \ operators that must be\n   satisfied in order to determine whether a label meets\
    \ a given\n   condition.  Rules may reference other rules or character classes\n\
    \   defined elsewhere in the table.\n"
- title: 6.3.1.  The "rule" Element
  contents:
  - "6.3.1.  The \"rule\" Element\n   A matching rule is defined by a \"rule\" element,\
    \ the child elements of\n   which are one of the match operators from Section\
    \ 6.3.2.  In\n   evaluating a rule, each child element is matched in order.  \"\
    rule\"\n   elements MAY be nested inside each other and inside certain match\n\
    \   operators.\n   A simple rule to match a label where all characters are members\
    \ of\n   some class called \"preferred-codepoint\":\n       <rule name=\"preferred-label\"\
    >\n           <start />\n           <class by-ref=\"preferred-codepoint\" count=\"\
    1+\"/>\n           <end />\n       </rule>\n   Rules are paired with explicit\
    \ and implied actions, triggering these\n   actions when a rule matches a label.\
    \  For example, a simple explicit\n   action for the rule shown above would be:\n\
    \       <action disp=\"allocatable\" match=\"preferred-label\" />\n   The rule\
    \ in this example would have the effect of setting the policy\n   disposition\
    \ for a label made up entirely of preferred code points to\n   \"allocatable\"\
    .  Explicit actions are further discussed in Section 7\n   and implicit actions\
    \ in Section 7.5.  Another use of rules is in\n   defining conditional contexts\
    \ for code points and variants as\n   discussed in Sections 5.2 and 5.3.5.\n \
    \  A rule that is an immediate child element of the \"rules\" element MUST\n \
    \  be named using a \"name\" attribute containing a single identifier\n   string\
    \ with no spaces.  A named rule may be incorporated into another\n   rule by reference\
    \ and may also be referenced by an \"action\" element,\n   \"when\" attribute,\
    \ or \"not-when\" attribute.  If the \"name\" attribute\n   is omitted, the rule\
    \ is anonymous and MUST be nested inside another\n   rule or match operator.\n"
- title: 6.3.2.  The Match Operators
  contents:
  - "6.3.2.  The Match Operators\n   The child elements of a rule are a series of\
    \ match operators, which\n   are listed here by type and name and with a basic\
    \ example or two.\n   +------------+-------------+------------------------------------+\n\
    \   | Type       | Operator    | Examples                           |\n   +------------+-------------+------------------------------------+\n\
    \   | logical    | any         | <any />                            |\n   |  \
    \          +-------------+------------------------------------+\n   |        \
    \    | choice      | <choice>                           |\n   |            | \
    \            |  <rule by-ref=\"alternative1\"/>     |\n   |            |     \
    \        |  <rule by-ref=\"alternative2\"/>     |\n   |            |         \
    \    | </choice>                          |\n   +--------------------------+------------------------------------+\n\
    \   | positional | start       | <start />                          |\n   |  \
    \          +-------------+------------------------------------+\n   |        \
    \    | end         | <end />                            |\n   +--------------------------+------------------------------------+\n\
    \   | literal    | char        | <char cp=\"0061 0062 0063\" />       |\n   +--------------------------+------------------------------------+\n\
    \   | set        | class       | <class by-ref=\"class1\" />          |\n   |\
    \            |             | <class>0061 0064-0065</class>      |\n   +--------------------------+------------------------------------+\n\
    \   | group      | rule        | <rule by-ref=\"rule1\" />            |\n   |\
    \            |             | <rule><any /></rule>               |\n   +--------------------------+------------------------------------+\n\
    \   | contextual | anchor      | <anchor />                         |\n   |  \
    \          +-------------+------------------------------------+\n   |        \
    \    | look-ahead  | <look-ahead><any /></look-ahead>   |\n   |            +-------------+------------------------------------+\n\
    \   |            | look-behind | <look-behind><any /></look-behind> |\n   +--------------------------+------------------------------------+\n\
    \                              Match Operators\n   Any element defining an anonymous\
    \ class can be used as a match\n   operator, including any of the set combination\
    \ operators (see\n   Section 6.2.5) as well as references to named classes.\n\
    \   All match operators shown as empty elements in the Examples column of\n  \
    \ the table above do not support child elements of their own;\n   otherwise, match\
    \ operators MAY be nested.  In particular, anonymous\n   \"rule\" elements can\
    \ be used for grouping.\n"
- title: 6.3.3.  The "count" Attribute
  contents:
  - "6.3.3.  The \"count\" Attribute\n   The OPTIONAL \"count\" attribute, when present,\
    \ specifies the minimally\n   required or maximal permitted number of times a\
    \ match operator is\n   used to match input.  If the \"count\" attribute is\n\
    \   n    the match operator matches the input exactly n times, where n is\n  \
    \      1 or greater.\n   n+   the match operator matches the input at least n\
    \ times, where n\n        is 0 or greater.\n   n:m  the match operator matches\
    \ the input at least n times, where n\n        is 0 or greater, but matches the\
    \ input up to m times in total,\n        where m > n.  If m = n and n > 0, the\
    \ match operator matches the\n        input exactly n times.\n   If there is no\
    \ \"count\" attribute, the match operator matches the\n   input exactly once.\n\
    \   In matching, greedy evaluation is used in the sense defined for\n   regular\
    \ expressions: beyond the required number or times, the input\n   is matched as\
    \ many times as possible, but not so often as to prevent\n   a match of the remainder\
    \ of the rule.\n   A \"count\" attribute MUST NOT be applied to any element that\
    \ contains\n   a \"name\" attribute but MAY be applied to operators such as \"\
    class\"\n   that declare anonymous classes (including combined classes) or invoke\n\
    \   any predefined classes by reference.  The \"count\" attribute MUST NOT\n \
    \  be applied to any \"class\" element, or element defining a combined\n   class,\
    \ when it is nested inside a combined class.\n   A \"count\" attribute MUST NOT\
    \ be applied to match operators of type\n   \"start\", \"end\", \"anchor\", \"\
    look-ahead\", or \"look-behind\" or to any\n   operators, such as \"rule\" or\
    \ \"choice\", that contain a nested instance\n   of them.  This limitation applies\
    \ recursively and irrespective of\n   whether a \"rule\" element containing these\
    \ nested instances is\n   declared in place or used by reference.\n   However,\
    \ the \"count\" attribute MAY be applied to any other instances\n   of either\
    \ an anonymous \"rule\" element or a \"choice\" element,\n   including those instances\
    \ nested inside other match operators.  It\n   MAY also be applied to the elements\
    \ \"any\" and \"char\", when used as\n   match operators.\n"
- title: 6.3.4.  The "name" and "by-ref" Attributes
  contents:
  - "6.3.4.  The \"name\" and \"by-ref\" Attributes\n   Like classes (see Section\
    \ 6.2.1), rules declared as immediate child\n   elements of the \"rules\" element\
    \ MUST be named using a unique \"name\"\n   attribute, and all other instances\
    \ MUST NOT be named.  Anonymous\n   rules and classes or references to named rules\
    \ and classes can be\n   nested inside other match operators by reference.\n \
    \  To reference a named rule or class inside a rule or match operator,\n   use\
    \ a \"rule\" or \"class\" element with an OPTIONAL \"by-ref\" attribute\n   containing\
    \ the name of the referenced element.  It is an error to\n   reference a rule\
    \ or class for which the complete definition has not\n   been seen.  In other\
    \ words, it is explicitly not possible to define\n   recursive rules or class\
    \ definitions.  The \"by-ref\" attribute\n   MUST NOT appear in the same element\
    \ as the \"name\" attribute or in an\n   element that has any child elements.\n\
    \   The example shows several named classes and a named rule referencing\n   some\
    \ of them by name.\n       <class name=\"letter\" property=\"gc:L\"/>\n      \
    \ <class name=\"combining-mark\" property=\"gc:M\"/>\n       <class name=\"digit\"\
    \ property=\"gc:Nd\" />\n       <rule name=\"letter-grapheme\">\n          <class\
    \ by-ref=\"letter\" count=\"1+\"/>\n          <class by-ref=\"combining-mark\"\
    \ count=\"0+\"/>\n       </rule>\n"
- title: 6.3.5.  The "choice" Element
  contents:
  - "6.3.5.  The \"choice\" Element\n   The \"choice\" element is used to represent\
    \ a list of two or more\n   alternatives:\n       <rule name=\"ldh\">\n      \
    \    <choice count=\"1+\">\n              <class by-ref=\"letter\"/>\n       \
    \       <class by-ref=\"digit\"/>\n              <char cp=\"002D\" comment=\"\
    literal HYPHEN\"/>\n          </choice>\n       </rule>\n   Each child element\
    \ of a \"choice\" element represents one alternative.\n   The first matching alternative\
    \ determines the match for the\n   \"choice\" element.  To express a choice where\
    \ an alternative itself\n   consists of a sequence of elements, the sequence must\
    \ be wrapped in\n   an anonymous rule.\n"
- title: 6.3.6.  Literal Code Point Sequences
  contents:
  - "6.3.6.  Literal Code Point Sequences\n   A literal code point sequence matches\
    \ a single code point or a\n   sequence.  It is defined by a \"char\" element,\
    \ with the code point or\n   sequence to be matched given by the \"cp\" attribute.\
    \  When used as a\n   literal, a \"char\" element MAY contain a \"count\" attribute\
    \ in addition\n   to the \"cp\" attribute and OPTIONAL \"comment\" or \"ref\"\
    \ attributes.  No\n   other attributes or child elements are permitted.\n"
- title: 6.3.7.  The "any" Element
  contents:
  - "6.3.7.  The \"any\" Element\n   The \"any\" element is an empty element that\
    \ matches any single code\n   point.  It MAY have a \"count\" attribute.  For\
    \ an example, see\n   Section 6.3.9.\n   Unlike a literal, the \"any\" element\
    \ MUST NOT have a \"ref\" attribute.\n"
- title: 6.3.8.  The "start" and "end" Elements
  contents:
  - "6.3.8.  The \"start\" and \"end\" Elements\n   To match the beginning or end\
    \ of a label, use the \"start\" or \"end\"\n   element.  An empty label would\
    \ match this rule:\n       <rule name=\"empty-label\">\n           <start/>\n\
    \           <end/>\n       </rule>\n   Conceptually, whole label rules evaluate\
    \ the label as a whole, but in\n   practice, many rules do not actually need to\
    \ be specified to match\n   the entire label.  For example, to express a requirement\
    \ of not\n   starting a label with a digit, a rule needs to describe only the\n\
    \   initial part of a label.\n   This example uses the previously defined rules,\
    \ together with \"start\"\n   and \"end\" elements, to define a rule that requires\
    \ that an entire\n   label be well-formed.  For this example, that means that\
    \ it must\n   start with a letter and that it contains no leading digits or\n\
    \   combining marks nor combining marks placed on digits.\n       <rule name=\"\
    leading-letter\" >\n         <start />\n         <rule by-ref=\"letter-grapheme\"\
    \ count=\"1\"/>\n         <choice count=\"0+\">\n           <rule by-ref=\"letter-grapheme\"\
    \ count=\"0+\"/>\n           <class by-ref=\"digit\" count=\"0+\"/>\n        \
    \ </choice>\n         <end />\n       </rule>\n   Each \"start\" or \"end\" element\
    \ occurs at most once in a rule, except\n   if nested inside a \"choice\" element\
    \ in such a way that in matching\n   each alternative at most one occurrence of\
    \ each is encountered.\n   Otherwise, the result is an error, as is any case where\
    \ a \"start\" or\n   \"end\" element is not encountered as the first or last element\
    \ to be\n   matched, respectively, in matching a rule.  \"start\" and \"end\"\n\
    \   elements are empty elements that do not have a \"count\" attribute or\n  \
    \ any other attribute other than \"comment\".  It is an error for any\n   match\
    \ operator enclosing a nested \"start\" or \"end\" element to have a\n   \"count\"\
    \ attribute.\n"
- title: 6.3.9.  Example Context Rule from IDNA Specification
  contents:
  - "6.3.9.  Example Context Rule from IDNA Specification\n   This is an example of\
    \ the WLE rule from [RFC5892] forbidding the\n   mixture of the Arabic-Indic and\
    \ extended Arabic-Indic digits in the\n   same label.  It is implemented as a\
    \ whole label rule associated with\n   the code point ranges using the \"not-when\"\
    \ attribute, which defines\n   an impermissible context.  The example also demonstrates\
    \ several\n   instances of the use of anonymous rules for grouping.\n       <data>\n\
    \          <range first-cp=\"0660\" last-cp=\"0669\" not-when=\"mixed-digits\"\
    \n                 tag=\"arabic-indic-digits\" />\n          <range first-cp=\"\
    06F0\" last-cp=\"06F9\" not-when=\"mixed-digits\"\n                 tag=\"extended-arabic-indic-digits\"\
    \ />\n       </data>\n       <rules>\n          <rule name=\"mixed-digits\">\n\
    \             <choice>\n               <rule>\n                   <class from-tag=\"\
    arabic-indic-digits\"/>\n                   <any count=\"0+\"/>\n            \
    \       <class from-tag=\"extended-arabic-indic-digits\"/>\n                </rule>\n\
    \                <rule>\n                   <class from-tag=\"extended-arabic-indic-digits\"\
    />\n                   <any count=\"0+\"/>\n                   <class from-tag=\"\
    arabic-indic-digits\"/>\n                </rule>\n             </choice>\n   \
    \       </rule>\n       </rules>\n   As specified in the example, a label containing\
    \ a code point from\n   either of the two digit ranges is invalid for any label\
    \ matching the\n   \"mixed-digits\" rule, that is, any time that a code point\
    \ from the\n   other range is also present.  Note that invalidating the label\
    \ is not\n   the same as invalidating the definition of the \"range\" elements;\
    \ in\n   particular, the definition of the tag values does not depend on the\n\
    \   \"when\" attribute.\n"
- title: 6.4.  Parameterized Context or When Rules
  contents:
  - "6.4.  Parameterized Context or When Rules\n   To recap: When a rule is intended\
    \ to provide a context for evaluating\n   the validity of a code point or variant\
    \ mapping, it is invoked by the\n   \"when\" or \"not-when\" attributes described\
    \ in Section 5.2.  For \"char\"\n   and \"range\" elements, an action implied\
    \ by a context rule always has\n   a disposition of \"invalid\" whenever the rule\
    \ given by the \"when\"\n   attribute is not matched (see Section 7.5).  Conversely,\
    \ a \"not-when\"\n   attribute results in a disposition of \"invalid\" whenever\
    \ the rule is\n   matched.  When a rule is used in this way, it is called a context\
    \ or\n   \"when\" rule.\n   The example in the previous section shows a whole\
    \ label rule used as\n   a context rule, essentially making the whole label the\
    \ context.  The\n   next sections describe several match operators that can be\
    \ used to\n   provide a more specific specification of a context, allowing a\n\
    \   parameterized context rule.  See Section 7 for an alternative method\n   of\
    \ defining an invalid disposition for a label not matching a whole\n   label rule.\n"
- title: 6.4.1.  The "anchor" Element
  contents:
  - "6.4.1.  The \"anchor\" Element\n   Such parameterized context rules are rules\
    \ that contain a special\n   placeholder represented by an \"anchor\" element.\
    \  As each When Rule is\n   evaluated, if an \"anchor\" element is present, it\
    \ is replaced by a\n   literal corresponding to the \"cp\" attribute of the element\
    \ containing\n   the \"when\" (or \"not-when\") attribute.  The match to the \"\
    anchor\"\n   element must be at the same position in the label as the code point\n\
    \   or variant mapping triggering the When Rule.\n   For example, the Greek lower\
    \ numeral sign is invalid if not\n   immediately preceding a character in the\
    \ Greek script.  This is most\n   naturally addressed with a parameterized When\
    \ Rule using\n   \"look-ahead\":\n       <char cp=\"0375\" when=\"preceding-greek\"\
    />\n       ...\n       <class name=\"greek-script\" property=\"sc:Grek\"/>\n \
    \      <rule name=\"preceding-greek\">\n           <anchor/>\n           <look-ahead>\n\
    \               <class by-ref=\"greek-script\"/>\n           </look-ahead>\n \
    \      </rule>\n   In evaluating this rule, the \"anchor\" element is treated\
    \ as if it was\n   replaced by a literal\n       <char cp=\"0375\"/>\n   but only\
    \ the instance of U+0375 at the given position is evaluated.\n   If a label had\
    \ two instances of U+0375 with the first one matching\n   the rule and the second\
    \ not, then evaluating the When Rule MUST\n   succeed for the first instance and\
    \ fail for the second.\n   Unlike other rules, rules containing an \"anchor\"\
    \ element MUST only be\n   invoked via the \"when\" or \"not-when\" attributes\
    \ on code points or\n   variants; otherwise, their \"anchor\" elements cannot\
    \ be evaluated.\n   However, it is possible to invoke rules not containing an\
    \ \"anchor\"\n   element from a \"when\" or \"not-when\" attribute.  (See Section\
    \ 6.4.3.)\n   The \"anchor\" element is an empty element, with no attributes\n\
    \   permitted except \"comment\".\n"
- title: 6.4.2.  The "look-behind" and "look-ahead" Elements
  contents:
  - "6.4.2.  The \"look-behind\" and \"look-ahead\" Elements\n   Context rules use\
    \ the \"look-behind\" and \"look-ahead\" elements to\n   define context before\
    \ and after the code point sequence matched by\n   the \"anchor\" element.  If\
    \ the \"anchor\" element is omitted, neither\n   the \"look-behind\" nor the \"\
    look-ahead\" element may be present in\n   a rule.\n   Here is an example of a\
    \ rule that defines an \"initial\" context for an\n   Arabic code point:\n   \
    \    <class name=\"transparent\" property=\"jt:T\"/>\n       <class name=\"right-joining\"\
    \ property=\"jt:R\"/>\n       <class name=\"left-joining\" property=\"jt:L\"/>\n\
    \       <class name=\"dual-joining\" property=\"jt:D\"/>\n       <class name=\"\
    non-joining\" property=\"jt:U\"/>\n       <rule name=\"Arabic-initial\">\n   \
    \      <look-behind>\n           <choice>\n             <start/>\n           \
    \  <rule>\n               <class by-ref=\"transparent\" count=\"0+\"/>\n     \
    \          <class by-ref=\"non-joining\"/>\n             </rule>\n           </choice>\n\
    \         </look-behind>\n         <anchor/>\n         <look-ahead>\n        \
    \   <class by-ref=\"transparent\" count=\"0+\" />\n           <choice>\n     \
    \        <class by-ref=\"right-joining\" />\n             <class by-ref=\"dual-joining\"\
    \ />\n           </choice>\n         </look-ahead>\n       </rule>\n   A \"when\"\
    \ rule (or context rule) is a named rule that contains any\n   combination of\
    \ \"look-behind\", \"anchor\", and \"look-ahead\" elements, in\n   that order.\
    \  Each of these elements occurs at most once, except if\n   nested inside a \"\
    choice\" element in such a way that in matching each\n   alternative at most one\
    \ occurrence of each is encountered.\n   Otherwise, the result is undefined. \
    \ None of these elements takes a\n   \"count\" attribute, nor does any enclosing\
    \ match operator; otherwise,\n   the result is undefined.  If a context rule contains\
    \ a \"look-ahead\"\n   or \"look-behind\" element, it MUST contain an \"anchor\"\
    \ element.  If,\n   because of a \"choice\" element, a required anchor is not\
    \ actually\n   encountered, the results are undefined.\n"
- title: 6.4.3.  Omitting the "anchor" Element
  contents:
  - "6.4.3.  Omitting the \"anchor\" Element\n   If the \"anchor\" element is omitted,\
    \ the evaluation of the context\n   rule is not tied to the position of the code\
    \ point or sequence\n   associated with the \"when\" attribute.\n   According\
    \ to [RFC5892], the Katakana middle dot is invalid in any\n   label not containing\
    \ at least one Japanese character anywhere in the\n   label.  Because this requirement\
    \ is independent of the position of\n   the middle dot, the rule does not require\
    \ an \"anchor\" element.\n       <char cp=\"30FB\" when=\"japanese-in-label\"\
    />\n       <rule name=\"japanese-in-label\">\n           <union>\n           \
    \    <class property=\"sc:Hani\"/>\n               <class property=\"sc:Kata\"\
    />\n               <class property=\"sc:Hira\"/>\n           </union>\n      \
    \ </rule>\n   The Katakana middle dot is used only with Han, Katakana, or Hiragana.\n\
    \   The corresponding When Rule requires that at least one code point in\n   the\
    \ label be in one of these scripts, but the position of that code\n   point is\
    \ independent of the location of the middle dot; therefore, no\n   anchor is required.\
    \  (Note that the Katakana middle dot itself is of\n   script Common, that is,\
    \ \"sc:Zyyy\".)\n"
- title: 7.  The "action" Element
  contents:
  - "7.  The \"action\" Element\n   The purpose of an action is to assign a disposition\
    \ to a label in\n   response to being triggered by the label meeting a specified\n\
    \   condition.  Often, the action simply results in blocking or\n   invalidating\
    \ a label that does not match a rule.  An example of an\n   action invalidating\
    \ a label because it does not match a rule named\n   \"leading-letter\" is as\
    \ follows:\n       <action disp=\"invalid\" not-match=\"leading-letter\"/>\n \
    \  If an action is to be triggered on matching a rule, a \"match\"\n   attribute\
    \ is used instead.  Actions are evaluated in the order that\n   they appear in\
    \ the XML file.  Once an action is triggered by a label,\n   the disposition defined\
    \ in the \"disp\" attribute is assigned to the\n   label and no other actions\
    \ are evaluated for that label.\n   The goal of the LGR is to identify all labels\
    \ and variant labels and\n   to assign them disposition values.  These dispositions\
    \ are then fed\n   into a further process that ultimately implements all aspects\
    \ of\n   policy.  To allow this specification to be used with the widest range\n\
    \   of policies, the permissible values for the \"disp\" attribute are\n   neither\
    \ defined nor restricted.  Nevertheless, a set of commonly used\n   disposition\
    \ values is RECOMMENDED.  (See Section 7.3.)\n"
- title: 7.1.  The "match" and "not-match" Attributes
  contents:
  - "7.1.  The \"match\" and \"not-match\" Attributes\n   An OPTIONAL \"match\" or\
    \ \"not-match\" attribute specifies a rule that\n   must be matched or not matched\
    \ as a condition for triggering an\n   action.  Only a single rule may be named\
    \ as the value of a \"match\" or\n   \"not-match\" attribute.  Because rules may\
    \ be composed of other rules,\n   this restriction to a single attribute value\
    \ does not impose any\n   limitation on the contexts that can trigger an action.\n\
    \   An action MUST NOT contain both a \"match\" and a \"not-match\"\n   attribute,\
    \ and the value of either attribute MUST be the name of a\n   previously defined\
    \ rule; otherwise, the document MUST be rejected.\n   An action without any attributes\
    \ is triggered by all labels\n   unconditionally.  For a very simple LGR, the\
    \ following action would\n   allocate all labels that match the repertoire:\n\
    \       <action disp=\"allocatable\" />\n   Since rules are evaluated for all\
    \ labels, whether they are the\n   original label or computed by permuting the\
    \ defined and valid variant\n   mappings for the label's code points, actions\
    \ based on matching or\n   not matching a rule may be triggered for both original\
    \ and variant\n   labels, but the rules are not affected by the disposition attributes\n\
    \   of the variant mappings.  To trigger any actions based on these\n   dispositions\
    \ requires the use of additional optional attributes for\n   actions described\
    \ next.\n"
- title: 7.2.  Actions with Variant Type Triggers
  contents:
  - '7.2.  Actions with Variant Type Triggers

    '
- title: 7.2.1.  The "any-variant", "all-variants", and "only-variants"
  contents:
  - "7.2.1.  The \"any-variant\", \"all-variants\", and \"only-variants\"\n      \
    \  Attributes\n   An action may contain one of the OPTIONAL attributes \"any-variant\"\
    ,\n   \"all-variants\", or \"only-variants\" defining triggers based on variant\n\
    \   types.  The permitted value for these attributes consists of one or\n   more\
    \ variant type values, separated by spaces.  These MAY include\n   type values\
    \ that are not used in any \"var\" element in the LGR.  When\n   a variant label\
    \ is generated, these variant type values are compared\n   to the set of type\
    \ values on the variant mappings used to generate\n   the particular variant label\
    \ (see Section 8).\n   Any single match may trigger an action that contains an\
    \ \"any-variant\"\n   attribute, while for an \"all-variants\" or \"only-variants\"\
    \ attribute,\n   the variant type for all variant code points must match one or\n\
    \   several of the type values specified in the attribute to trigger the\n   action.\
    \  There is no requirement that the entire list of variant type\n   values be\
    \ matched, as long as all variant code points match at least\n   one of the values.\n\
    \   An \"only-variants\" attribute will trigger the action only if all code\n\
    \   points of the variant label have variant mappings from the original\n   code\
    \ points.  In other words, the label contains no original code\n   points other\
    \ than those with a reflexive mapping (see Section 5.3.4).\n       <char cp=\"\
    0078\" comment=\"x\">\n           <var cp=\"0078\" type=\"allocatable\" comment=\"\
    reflexive\" />\n           <var cp=\"0079\" type=\"blocked\" />\n       </char>\n\
    \       <char cp=\"0079\" comment=\"y\">\n           <var cp=\"0078\" type=\"\
    allocatable\" />\n       </char>\n       ...\n       <action disp=\"blocked\"\
    \ any-variant=\"blocked\" />\n       <action disp=\"allocatable\" only-variants=\"\
    allocatable\" />\n       <action disp=\"some-disp\" any-variant=\"allocatable\"\
    \ />\n   In the example above, the label \"xx\" would have variant labels \"xx\"\
    ,\n   \"xy\", \"yx\", and \"yy\".  The first action would result in blocking any\n\
    \   variant label containing \"y\", because the variant mapping from \"x\" to\n\
    \   \"y\" is of type \"blocked\", triggering the \"any-variant\" condition.\n\
    \   Because in this example \"x\" has a reflexive variant mapping to itself\n\
    \   of type \"allocatable\", the original label \"xx\" has a reflexive\n   variant\
    \ \"xx\" that would trigger the \"only-variants\" condition on the\n   second\
    \ action.\n   A label \"yy\" would have the variants \"xy\", \"yx\", and \"xx\"\
    .  Because\n   the variant mapping from \"y\" to \"x\" is of type \"allocatable\"\
    \ and a\n   mapping from \"y\" to \"y\" is not defined, the labels \"xy\" and\
    \ \"yx\"\n   trigger the \"any-variant\" condition on the third label.  The variant\n\
    \   \"xx\", being generated using the mapping from \"y\" to \"x\" of type\n  \
    \ \"allocatable\", would trigger the \"only-variants\" condition on the\n   section\
    \ action.  As there is no reflexive variant \"yy\", the original\n   label \"\
    yy\" cannot trigger any variant type triggers.  However, it\n   could still trigger\
    \ an action defined as matching or not matching\n   a rule.\n   In each action,\
    \ one variant type trigger may be present by itself or\n   in conjunction with\
    \ an attribute matching or not matching a rule.  If\n   variant triggers and rule-matching\
    \ triggers are used together, the\n   label MUST \"match\" or respectively \"\
    not-match\" the specified rule AND\n   satisfy the conditions on the variant type\
    \ values given by the\n   \"any-variant\", \"all-variants\", or \"only-variants\"\
    \ attribute.\n   A useful convention combines the \"any-variant\" trigger with\
    \ reflexive\n   variant mappings (Section 5.3.4).  This convention is used, for\n\
    \   example, when multiple LGRs are defined within the same registry and\n   for\
    \ overlapping repertoire.  In some cases, the delegation of a label\n   from one\
    \ LGR must prohibit the delegation of another label in some\n   other LGR.  This\
    \ can be done using a variant of type \"blocked\" as in\n   this example from\
    \ an Armenian LGR, where the Armenian, Latin, and\n   Cyrillic letters all look\
    \ identical:\n       <char cp=\"0570\" comment=\"ARMENIAN SMALL LETTER HO\">\n\
    \         <var cp=\"0068\" type=\"blocked\" comment=\"LATIN SMALL LETTER H\" />\n\
    \         <var cp=\"04BB\" type=\"blocked\"\n              comment=\"CYRILLIC\
    \ SMALL LETTER SHHA\" />\n       </char>\n   The issue is that the target code\
    \ points for these two variants are\n   both outside the Armenian repertoire.\
    \  By using a reflexive variant\n   with the following convention:\n       <char\
    \ cp=\"0068\" comment=\"not part of repertoire\">\n         <var cp=\"0068\" type=\"\
    out-of-repertoire-var\"\n              comment=\"reflexive mapping\" />\n    \
    \     <var cp=\"04BB\" type=\"blocked\" />\n         <var cp=\"0570\" type=\"\
    blocked\" />\n       </char>\n         ...\n   and associating this with an action\
    \ of the form:\n       <action disp=\"invalid\" any-variant=\"out-of-repertoire-var\"\
    \ />\n   it is possible to list the symmetric and transitive variant mappings\n\
    \   in the LGR even where they involve out-of-repertoire code points.  By\n  \
    \ associating the action shown with the special type for these\n   reflexive mappings,\
    \ any original labels containing one or more of the\n   out-of-repertoire code\
    \ points are filtered out, just as if these code\n   points had not been listed\
    \ in the LGR in the first place.\n   Nevertheless, they do participate in the\
    \ permutation of variant\n   labels for n-repertoire labels (Armenian in the example),\
    \ and these\n   permuted variants can be used to detect collisions with out-of-\n\
    \   repertoire labels (see Section 8).\n"
- title: 7.2.2.  Example from Tables in the Style of RFC 3743
  contents:
  - "7.2.2.  Example from Tables in the Style of RFC 3743\n   This section gives an\
    \ example of using variant type triggers,\n   combined with variants with reflexive\
    \ mappings (Section 5.3.4), to\n   achieve LGRs that implement tables like those\
    \ defined according to\n   [RFC3743] where the goal is to allow as variants only\
    \ labels that\n   consist entirely of simplified or traditional variants, in addition\n\
    \   to the original label.\n   This example assumes an LGR where all variants\
    \ have been given\n   suitable \"type\" attributes of \"blocked\", \"simplified\"\
    , \"traditional\",\n   or \"both\", similar to the ones discussed in Appendix\
    \ B.  Given such\n   an LGR, the following example actions evaluate the disposition\
    \ for\n   the variant label:\n       <action disp=\"blocked\" any-variant=\"blocked\"\
    \ />\n       <action disp=\"allocatable\" only-variants=\"simplified both\" />\n\
    \       <action disp=\"allocatable\" only-variants=\"traditional both\" />\n \
    \      <action disp=\"blocked\" all-variants=\"simplified traditional\" />\n \
    \      <action disp=\"allocatable\" />\n   The first action matches any variant\
    \ label for which at least one of\n   the code point variants is of type \"blocked\"\
    .  The second matches any\n   variant label for which all of the code point variants\
    \ are of type\n   \"simplified\" or \"both\" -- in other words, an all-simplified\
    \ label.\n   The third matches any label for which all variants are of type\n\
    \   \"traditional\" or \"both\" -- that is, all traditional.  These two\n   actions\
    \ are not triggered by any variant labels containing some\n   original code points,\
    \ unless each of those code points has a variant\n   defined with a reflexive\
    \ mapping (Section 5.3.4).\n   The final two actions rely on the fact that actions\
    \ are evaluated in\n   sequence and that the first action triggered also defines\
    \ the final\n   disposition for a variant label (see Section 7.4).  They further\
    \ rely\n   on the assumption that the only variants with type \"both\" are also\n\
    \   reflexive variants.\n   Given these assumptions, any remaining simplified\
    \ or traditional\n   variants must then be part of a mixed label and so are blocked;\
    \ all\n   labels surviving to the last action are original code points only\n\
    \   (that is, the original label).  The example assumes that an original\n   label\
    \ may be a mixed label; if that is not the case, the disposition\n   for the last\
    \ action would be set to \"blocked\".\n   There are exceptions where the assumption\
    \ on reflexive mappings made\n   above does not hold, so this basic scheme needs\
    \ some refinements to\n   cover all cases.  For a more complete example, see Appendix\
    \ B.\n"
- title: 7.3.  Recommended Disposition Values
  contents:
  - "7.3.  Recommended Disposition Values\n   The precise nature of the policy action\
    \ taken in response to a\n   disposition and the name of the corresponding \"\
    disp\" attributes are\n   only partially defined here.  It is strongly RECOMMENDED\
    \ to use the\n   following dispositions only in their conventional sense.\n  \
    \ invalid  The resulting string is not a valid label.  This disposition\n    \
    \    may be assigned implicitly; see Section 7.5.  No variant labels\n       \
    \ should be generated from a variant mapping with this type.\n   blocked  The\
    \ resulting string is a valid label but should be blocked\n        from registration.\
    \  This would typically apply for a derived\n        variant that is undesirable\
    \ due to having no practical use or\n        being confusingly similar to some\
    \ other label.\n   allocatable  The resulting string should be reserved for use\
    \ by the\n        same operator of the origin string but not automatically\n \
    \       allocated for use.\n   activated  The resulting string should be activated\
    \ for use.  (This\n        is the same as a Preferred Variant [RFC3743].)\n  \
    \ valid  The resultant string is a valid label.  (This is the typical\n      \
    \  default action if no dispositions are defined.)\n"
- title: 7.4.  Precedence
  contents:
  - "7.4.  Precedence\n   Actions are applied in the order of their appearance in\
    \ the file.\n   This defines their relative precedence.  The first action triggered\n\
    \   by a label defines the disposition for that label.  To define the\n   order\
    \ of precedence, list the actions in the desired order.  The\n   conventional\
    \ order of precedence for the actions defined in\n   Section 7.3 is \"invalid\"\
    , \"blocked\", \"allocatable\", \"activated\", and\n   then \"valid\".  This default\
    \ precedence is used for the default\n   actions defined in Section 7.6.\n"
- title: 7.5.  Implied Actions
  contents:
  - "7.5.  Implied Actions\n   The context rules on code points (\"not-when\" or \"\
    when\" rules) carry\n   an implied action with a disposition of \"invalid\" (not\
    \ eligible) if a\n   \"when\" context is not satisfied or a \"not-when\" context\
    \ is matched,\n   respectively.  These rules are evaluated at the time the code\
    \ points\n   for a label or its variant labels are checked for validity (see\n\
    \   Section 8).  In other words, they are evaluated before any of the\n   actions\
    \ are applied, and with higher precedence.  The context rules\n   for variant\
    \ mappings are evaluated when variants are generated and/or\n   when variant tables\
    \ are made symmetric and transitive.  They have an\n   implied action with a disposition\
    \ of \"invalid\", which means that a\n   putative variant mapping does not exist\
    \ whenever the given context\n   matches a \"not-when\" rule or fails to match\
    \ a \"when\" rule specified\n   for that mapping.  The result of that disposition\
    \ is that the variant\n   mapping is ignored in generating variant labels and\
    \ the value is\n   therefore not accessible to trigger any explicit actions.\n\
    \   Note that such non-existing variant mapping is different from a\n   blocked\
    \ variant, which is a variant code point mapping that exists\n   but results in\
    \ a label that may not be allocated.\n"
- title: 7.6.  Default Actions
  contents:
  - "7.6.  Default Actions\n   If a label does not trigger any of the actions defined\
    \ explicitly in\n   the LGR, the following implicitly defined default actions\
    \ are\n   evaluated.  They are shown below in their relative order of\n   precedence\
    \ (see Section 7.4).  Default actions have a lower order of\n   precedence than\
    \ explicit actions (see Section 8.3).\n   The default actions for variant labels\
    \ are defined as follows.  The\n   first set is triggered based on the standard\
    \ variant type values of\n   \"invalid\", \"blocked\", \"allocatable\", and \"\
    activated\":\n       <action disp=\"invalid\" any-variant=\"invalid\"/>\n    \
    \   <action disp=\"blocked\" any-variant=\"blocked\"/>\n       <action disp=\"\
    allocatable\" any-variant=\"allocatable\"/>\n       <action disp=\"activated\"\
    \ all-variants=\"activated\"/>\n   A final default action sets the disposition\
    \ to \"valid\" for any label\n   matching the repertoire for which no other action\
    \ has been triggered.\n   This \"catch-all\" action also matches all remaining\
    \ variant labels\n   from variants that do not have a type value.\n       <action\
    \ disp=\"valid\" comment=\"Catch-all if other rules not met\"/>\n   Conceptually,\
    \ the implicitly defined default actions act just like a\n   block of \"action\"\
    \ elements that is added (virtually) beyond the last\n   of the user-supplied\
    \ actions.  Any label not processed by the\n   user-supplied actions would thus\
    \ be processed by the default actions\n   as if they were present in the LGR.\
    \  As the last default action is a\n   \"catch-all\", all processing is guaranteed\
    \ to end with a definite\n   disposition for the label.\n"
- title: 8.  Processing a Label against an LGR
  contents:
  - '8.  Processing a Label against an LGR

    '
- title: 8.1.  Determining Eligibility for a Label
  contents:
  - "8.1.  Determining Eligibility for a Label\n   In order to test a given label\
    \ for membership in the LGR, a consumer\n   of the LGR must iterate through each\
    \ code point within a given label\n   and test that each instance of a code point\
    \ is a member of the LGR.\n   If any instance of a code point is not a member\
    \ of the LGR, the label\n   shall be deemed invalid.\n   An individual instance\
    \ of a code point is deemed a member of the LGR\n   when it is listed using a\
    \ \"char\" element, or is part of a range\n   defined with a \"range\" element,\
    \ and all necessary conditions in any\n   \"when\" or \"not-when\" attributes\
    \ are correctly satisfied for that\n   instance.\n   Alternatively, an instance\
    \ of a code point is also deemed a member of\n   the LGR when it forms part of\
    \ a sequence that corresponds to a\n   sequence listed using a \"char\" element\
    \ for which the \"cp\" attribute\n   defines a sequence, and all necessary conditions\
    \ in any \"when\" or\n   \"not-when\" attributes are correctly satisfied for that\
    \ instance of\n   the sequence.\n   In determining eligibility, at each position\
    \ the longest possible\n   sequence of code points is evaluated first.  If that\
    \ sequence matches\n   a sequence defined in the LGR and satisfies any required\
    \ context at\n   that position, the instances of its constituent code points are\n\
    \   deemed members of the LGR and evaluation proceeds with the next code\n   point\
    \ following the sequence.  If the sequence does not match a\n   defined sequence\
    \ or does not satisfy the required context,\n   successively shorter sequences\
    \ are evaluated until only a single code\n   point remains.  The eligibility of\
    \ that code point is determined as\n   described above for an individual code\
    \ point instance.\n   A label must also not trigger any action that results in\
    \ a\n   disposition of \"invalid\"; otherwise, it is deemed not eligible.\n  \
    \ (This step may need to be deferred until variant code point\n   dispositions\
    \ have been determined.)\n"
- title: 8.1.1.  Determining Eligibility Using Reflexive Variant Mappings
  contents:
  - "8.1.1.  Determining Eligibility Using Reflexive Variant Mappings\n   For LGRs\
    \ that contain reflexive variant mappings (defined in\n   Section 5.3.4), the\
    \ final evaluation of eligibility for the label\n   must be deferred until variants\
    \ are generated.  In essence, LGRs that\n   use this feature treat the original\
    \ label as the (identity) variant\n   of itself.  For such LGRs, the ordinary\
    \ determination of eligibility\n   described here is but a first step that generally\
    \ excludes only a\n   subset of invalid labels.\n   To further check the validity\
    \ of a label with reflexive mappings, it\n   is not necessary to generate all\
    \ variant labels.  Only a single\n   variant needs to be created, where any reflexive\
    \ variants are applied\n   for each code point, and the label disposition is evaluated\
    \ (as\n   described in Section 8.3).  A disposition of \"invalid\" results in\
    \ the\n   label being not eligible.  (In the exceptional case where context\n\
    \   rules are present on reflexive mappings, multiple reflexive variants\n   may\
    \ be defined, but for each original label, at most one of these can\n   be valid\
    \ at each code position.  However, see Section 8.4.)\n"
- title: 8.2.  Determining Variants for a Label
  contents:
  - "8.2.  Determining Variants for a Label\n   For a given eligible label, the set\
    \ of variant labels is deemed to\n   consist of each possible permutation of original\
    \ code points and\n   substituted code points or sequences defined in \"var\"\
    \ elements,\n   whereby all \"when\" and \"not-when\" attributes are correctly\
    \ satisfied\n   for each \"char\" or \"var\" element in the given permutation\
    \ and all\n   applicable whole label rules are satisfied as follows:\n   1.  Create\
    \ each possible permutation of a label by substituting each\n       code point\
    \ or code point sequence in turn by any defined variant\n       mapping (including\
    \ any reflexive mappings).\n   2.  Apply variant mappings with \"when\" or \"\
    not-when\" attributes only\n       if the conditions are satisfied; otherwise,\
    \ they are not defined.\n   3.  Record each of the \"type\" values on the variant\
    \ mappings used in\n       creating a given variant label in a disposition set;\
    \ for any\n       unmapped code point, record the \"type\" value of any reflexive\n\
    \       variant (see Section 5.3.4).\n   4.  Determine the disposition for each\
    \ variant label per Section 8.3.\n   5.  If the disposition is \"invalid\", remove\
    \ the label from the set.\n   6.  If final evaluation of the disposition for the\
    \ unpermuted label\n       per Section 8.3 results in a disposition of \"invalid\"\
    , remove all\n       associated variant labels from the set.\n   The number of\
    \ potential permutations can be very large.  In practice,\n   implementations\
    \ would use suitable optimizations to avoid having to\n   actually create all\
    \ permutations (see Section 8.5).\n   In determining the permuted set of variant\
    \ labels in step (1) above,\n   all eligible partitions into sequences must be\
    \ evaluated.  A label\n   \"ab\" that matches a sequence \"ab\" defined in the\
    \ LGR but also matches\n   the sequence of individual code points \"a\" and \"\
    b\" (both defined in\n   the LGR) must be permuted using any defined variant mappings\
    \ for both\n   the sequence \"ab\" and the code points \"a\" and \"b\" individually.\n"
- title: 8.3.  Determining a Disposition for a Label or Variant Label
  contents:
  - "8.3.  Determining a Disposition for a Label or Variant Label\n   For a given\
    \ label (variant or original), its disposition is\n   determined by evaluating,\
    \ in order of their appearance, all actions\n   for which the label or variant\
    \ label satisfies the conditions.\n   1.  For any label that contains code points\
    \ or sequences not defined\n       in the repertoire, or does not satisfy the\
    \ context rules on all\n       of its code points and variants, the disposition\
    \ is \"invalid\".\n   2.  For all other labels, the disposition is given by the\
    \ value of\n       the \"disp\" attribute for the first action triggered by the\
    \ label.\n       An action is triggered if all of the following are true:\n  \
    \     *  the label matches the whole label rule given in the \"match\"\n     \
    \     attribute for that action;\n       *  the label does not match the whole\
    \ label rule given in the\n          \"not-match\" attribute for that action;\n\
    \       *  any of the recorded variant types for a variant label match\n     \
    \     the types given in the \"any-variant\" attribute for that\n          action;\n\
    \       *  all of the recorded variant types for a variant label match\n     \
    \     the types given in the \"all-variants\" or \"only-variants\"\n         \
    \ attribute given for that action;\n       *  in case of an \"only-variants\"\
    \ attribute, the label contains\n          only code points that are the target\
    \ of applied variant\n          mappings;\n       or\n       *  the action does\
    \ not contain any \"match\", \"not-match\",\n          \"any-variant\", \"all-variants\"\
    , or \"only-variants\" attributes:\n          catch-all.\n   3.  For any remaining\
    \ variant label, assign the variant label the\n       disposition using the default\
    \ actions defined in Section 7.6.\n       For this step, variant types outside\
    \ the predefined recommended\n       set (see Section 7.3) are ignored.\n   4.\
    \  For any remaining label, set the disposition to \"valid\".\n"
- title: 8.4.  Duplicate Variant Labels
  contents:
  - "8.4.  Duplicate Variant Labels\n   For a poorly designed LGR, it is possible\
    \ to generate duplicate\n   variant labels from the same input label, but with\
    \ different, and\n   potentially conflicting, dispositions.  Implementations MUST\
    \ treat\n   any duplicate variant labels encountered as an error, irrespective\
    \ of\n   their dispositions.\n   This situation can arise in two ways.  One is\
    \ described in\n   Section 5.3.5 and involves defining the same variant mapping\
    \ with two\n   context rules that are formally distinct but nevertheless overlap\
    \ so\n   that they are not mutually exclusive for the same label.\n   The other\
    \ case involves variants defined for sequences, where one\n   sequence is a prefix\
    \ of another (see Section 5.3.1).  The following\n   shows such an example resulting\
    \ in conflicting reflexive variants:\n       <char cp=\"0061\">\n         <var\
    \ cp=\"0061\" type=\"allocatable\"/>\n       </char>\n       <char cp=\"0062\"\
    />\n       <char cp=\"0061 0062\">\n         <var cp=\"0061 0062\" type=\"blocked\"\
    />\n       </char>\n   A label \"ab\" would generate the variant labels \"{a}{b}\"\
    \ and \"{ab}\"\n   where the curly braces show the sequence boundaries as they\
    \ were\n   applied during variant mapping.  The result is a duplicate variant\n\
    \   label \"ab\", one based on a variant of type \"allocatable\" plus an\n   original\
    \ code point \"b\" that has no variant, and another one based on\n   a single\
    \ variant of type \"blocked\", thus creating two variant labels\n   with conflicting\
    \ dispositions.\n   In the general case, it is difficult to impossible to prove\
    \ by\n   mechanical inspection of the LGR that duplicate variant labels will\n\
    \   never occur, so implementations have to be prepared to detect this\n   error\
    \ during variant label generation.  The condition is easily\n   avoided by careful\
    \ design of context rules and special attention to\n   the relation among code\
    \ point sequences with variants.\n"
- title: 8.5.  Checking Labels for Collision
  contents:
  - "8.5.  Checking Labels for Collision\n   The obvious method for checking for collision\
    \ between labels is to\n   generate the fully permuted set of variants for one\
    \ of them and see\n   whether it contains the other label as a member.  As discussed\
    \ above,\n   this can be prohibitive and is not necessary.\n   Because of symmetry\
    \ and transitivity, all variant mappings form\n   disjoint sets.  In each of these\
    \ sets, the source and target of each\n   mapping are also variants of the sources\
    \ and targets of all the other\n   mappings.  However, members of two different\
    \ sets are never variants\n   of each other.\n   If two labels have code points\
    \ at the same position that are members\n   of two different variant mapping sets,\
    \ any variant labels of one\n   cannot be variant labels of the other: the sets\
    \ of their variant\n   labels are likewise disjoint.  Instead of generating all\
    \ permutations\n   to compare all possible variants, it is enough to find out\
    \ whether\n   code points at the same position belong to the same variant set\n\
    \   or not.\n   For that, it is sufficient to substitute an \"index\" mapping\
    \ that\n   identifies the set.  This index mapping could be, for example, the\n\
    \   variant mapping for which the target code point (or sequence) comes\n   first\
    \ in some sorting order.  This index mapping would, in effect,\n   identify the\
    \ set of variant mappings for that position.\n   To check for collision then means\
    \ generating a single variant label\n   from the original by substituting the\
    \ respective \"index\" value for\n   each code point.  This results in an \"index\
    \ label\".  Two labels\n   collide whenever the index labels for them are the\
    \ same.\n"
- title: 9.  Conversion to and from Other Formats
  contents:
  - "9.  Conversion to and from Other Formats\n   Both [RFC3743] and [RFC4290] provide\
    \ different grammars for IDN\n   tables.  The formats in those documents are unable\
    \ to fully support\n   the increased requirements of contemporary IDN variant\
    \ policies.\n   This specification is a superset of functionality provided by\
    \ the\n   older IDN table formats; thus, any table expressed in those formats\n\
    \   can be expressed in this new format.  Automated conversion can be\n   conducted\
    \ between tables conformant with the grammar specified in\n   each document.\n\
    \   For notes on how to translate a table in the style of RFC 3743, see\n   Appendix\
    \ B.\n"
- title: 10.  Media Type
  contents:
  - "10.  Media Type\n   Well-formed LGRs that comply with this specification SHOULD\
    \ be\n   transmitted with a media type of \"application/lgr+xml\".  This media\n\
    \   type will signal to an LGR-aware client that the content is designed\n   to\
    \ be interpreted as an LGR.\n"
- title: 11.  IANA Considerations
  contents:
  - "11.  IANA Considerations\n   IANA has completed the following actions:\n"
- title: 11.1.  Media Type Registration
  contents:
  - "11.1.  Media Type Registration\n   The media type \"application/lgr+xml\" has\
    \ been registered to denote\n   transmission of LGRs that are compliant with this\
    \ specification, in\n   accordance with [RFC6838].\n   Type name: application\n\
    \   Subtype name: lgr+xml\n   Required parameters: N/A\n   Optional parameters:\
    \ charset (as for application/xml per [RFC7303])\n   Security considerations:\
    \  See the security considerations for\n      application/xml in [RFC7303] and\
    \ the specific security\n      considerations for Label Generation Rulesets (LGRs)\
    \ in RFC 7940\n   Interoperability considerations:  As for application/xml per\n\
    \      [RFC7303]\n   Published specification:  See RFC 7940\n   Applications that\
    \ use this media type:  Software using LGRs for\n      international identifiers,\
    \ such as IDNs, including registry\n      applications and client validators.\n\
    \   Additional information:\n      Deprecated alias names for this type: N/A\n\
    \      Magic number(s): N/A\n      File extension(s): .lgr\n      Macintosh file\
    \ type code(s): N/A\n   Person & email address to contact for further information:\n\
    \      Kim Davies <kim.davies@icann.org>\n      Asmus Freytag <asmus@unicode.org>\n\
    \   Intended usage: COMMON\n   Restrictions on usage: N/A\n   Author:\n      Kim\
    \ Davies <kim.davies@icann.org>\n      Asmus Freytag <asmus@unicode.org>\n   Change\
    \ controller: IESG\n   Provisional registration? (standards tree only): No\n"
- title: 11.2.  URN Registration
  contents:
  - "11.2.  URN Registration\n   This specification uses a URN to describe the XML\
    \ namespace, in\n   accordance with [RFC3688].\n   URI: urn:ietf:params:xml:ns:lgr-1.0\n\
    \   Registrant Contact: See the Authors of this document.\n   XML: None.\n"
- title: 11.3.  Disposition Registry
  contents:
  - "11.3.  Disposition Registry\n   This document establishes a vocabulary of \"\
    Label Generation Ruleset\n   Dispositions\", which has been reflected as a new\
    \ IANA registry.  This\n   registry is divided into two subregistries:\n   o \
    \ Standard Dispositions - This registry lists dispositions that have\n      been\
    \ defined in published specifications, i.e., the eligibility\n      for such registrations\
    \ is \"Specification Required\" [RFC5226].  The\n      initial set of registrations\
    \ are the five dispositions in this\n      document described in Section 7.3.\n\
    \   o  Private Dispositions - This registry lists dispositions that have\n   \
    \   been registered \"First Come First Served\" [RFC5226] by third\n      parties\
    \ with the IANA.  Such dispositions must take the form\n      \"entity:disposition\"\
    \ where the entity is a domain name that\n      uniquely identifies the private\
    \ user of the namespace.  For\n      example, \"example.org:reserved\" could be\
    \ a private extension used\n      by the example organization to denote a disposition\
    \ relating to\n      reserved labels.  These extensions are not intended to be\n\
    \      interoperable, but registration is designed to minimize potential\n   \
    \   conflicts.  It is strongly recommended that any new dispositions\n      that\
    \ require interoperability and have applicability beyond a\n      single organization\
    \ be defined as Standard Dispositions.\n   In order to distinguish them from Private\
    \ Dispositions, Standard\n   Dispositions MUST NOT contain the \":\" character.\
    \  All disposition\n   names shall be in lowercase ASCII.\n   The IANA registry\
    \ provides data on the name of the disposition, the\n   intended purposes, and\
    \ the registrant or defining specification for\n   the disposition.\n"
- title: 12.  Security Considerations
  contents:
  - '12.  Security Considerations

    '
- title: 12.1.  LGRs Are Only a Partial Remedy for Problem Space
  contents:
  - "12.1.  LGRs Are Only a Partial Remedy for Problem Space\n   Substantially unrestricted\
    \ use of non-ASCII characters in security-\n   relevant identifiers such as domain\
    \ name labels may cause user\n   confusion and invite various types of attacks.\
    \  In many languages, in\n   particular those using complex or large scripts,\
    \ an attacker has an\n   opportunity to divert or confuse users as a result of\
    \ different code\n   points with identical appearance or similar semantics.\n\
    \   The use of an LGR provides a partial remedy for these risks by\n   supplying\
    \ a framework for prohibiting inappropriate code points or\n   sequences from\
    \ being registered at all and for permitting \"variant\"\n   code points to be\
    \ grouped together so that labels containing them may\n   be mutually exclusive\
    \ or registered only to the same owner.\n   In addition, by being fully machine\
    \ processable the format may enable\n   automated checks for known weaknesses\
    \ in label generation rules.\n   However, the use of this format, or compliance\
    \ with this\n   specification, by itself does not ensure that the LGRs expressed\
    \ in\n   this format are free of risk.  Additional approaches may be\n   considered,\
    \ depending on the acceptable trade-off between flexibility\n   and risk for a\
    \ given application.  One method of managing risk may\n   involve a case-by-case\
    \ evaluation of a proposed label in context with\n   already-registered labels\
    \ -- for example, when reviewing labels for\n   their degree of visual confusability.\n"
- title: 12.2.  Computational Expense of Complex Tables
  contents:
  - "12.2.  Computational Expense of Complex Tables\n   A naive implementation attempting\
    \ to generate all variant labels for\n   a given label could lead to the possibility\
    \ of exhausting the\n   resources on the machine running the LGR processor, potentially\n\
    \   causing denial-of-service consequences.  For many operations,\n   brute-force\
    \ generation can be avoided by optimization, and if needed,\n   the number of\
    \ permuted labels can be estimated more cheaply ahead\n   of time.\n   The implementation\
    \ of WLE rules, using certain backtracking\n   algorithms, can take exponential\
    \ time for pathological rules or\n   labels and exhaust stack resources.  This\
    \ can be mitigated by\n   proper implementation and enforcing the restrictions\
    \ on permissible\n   label length.\n"
- title: 13.  References
  contents:
  - '13.  References

    '
- title: 13.1.  Normative References
  contents:
  - "13.1.  Normative References\n   [RFC2045]  Freed, N. and N. Borenstein, \"Multipurpose\
    \ Internet Mail\n              Extensions (MIME) Part One: Format of Internet\
    \ Message\n              Bodies\", RFC 2045, DOI 10.17487/RFC2045, November 1996,\n\
    \              <http://www.rfc-editor.org/info/rfc2045>.\n   [RFC2119]  Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n       \
    \       <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC3339]  Klyne, G. and\
    \ C. Newman, \"Date and Time on the Internet:\n              Timestamps\", RFC\
    \ 3339, DOI 10.17487/RFC3339, July 2002,\n              <http://www.rfc-editor.org/info/rfc3339>.\n\
    \   [RFC5646]  Phillips, A., Ed., and M. Davis, Ed., \"Tags for\n            \
    \  Identifying Languages\", BCP 47, RFC 5646,\n              DOI 10.17487/RFC5646,\
    \ September 2009,\n              <http://www.rfc-editor.org/info/rfc5646>.\n \
    \  [UAX42]    The Unicode Consortium, \"Unicode Character Database in\n      \
    \        XML\", May 2016, <http://unicode.org/reports/tr42/>.\n   [Unicode-Stability]\n\
    \              The Unicode Consortium, \"Unicode Encoding Stability\n        \
    \      Policy, Property Value Stability\", April 2015,\n              <http://www.unicode.org/policies/\n\
    \              stability_policy.html#Property_Value>.\n   [Unicode-Versions]\n\
    \              The Unicode Consortium, \"Unicode Version Numbering\",\n      \
    \        June 2016,\n              <http://unicode.org/versions/#Version_Numbering>.\n\
    \   [XML]      Bray, T., Paoli, J., Sperberg-McQueen, M., Maler, E., and\n   \
    \           F. Yergeau, \"Extensible Markup Language (XML) 1.0 (Fifth\n      \
    \        Edition)\", World Wide Web Consortium, November 2008,\n             \
    \ <http://www.w3.org/TR/REC-xml/>.\n"
- title: 13.2.  Informative References
  contents:
  - "13.2.  Informative References\n   [ASIA-TABLE]\n              DotAsia Organisation,\
    \ \".ASIA ZH IDN Language Table\",\n              February 2012,\n           \
    \   <http://www.dot.asia/policies/ASIA-ZH-1.2.pdf>.\n   [LGR-PROCEDURE]\n    \
    \          Internet Corporation for Assigned Names and Numbers,\n            \
    \  \"Procedure to Develop and Maintain the Label Generation\n              Rules\
    \ for the Root Zone in Respect of IDNA Labels\",\n              December 2012,\
    \ <http://www.icann.org/en/resources/idn/\n              draft-lgr-procedure-07dec12-en.pdf>.\n\
    \   [RELAX-NG] The Organization for the Advancement of Structured\n          \
    \    Information Standards (OASIS), \"RELAX NG Compact Syntax\",\n           \
    \   November 2002, <https://www.oasis-open.org/committees/\n              relax-ng/compact-20021121.html>.\n\
    \   [RFC3688]  Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n  \
    \            DOI 10.17487/RFC3688, January 2004,\n              <http://www.rfc-editor.org/info/rfc3688>.\n\
    \   [RFC3743]  Konishi, K., Huang, K., Qian, H., and Y. Ko, \"Joint\n        \
    \      Engineering Team (JET) Guidelines for Internationalized\n             \
    \ Domain Names (IDN) Registration and Administration for\n              Chinese,\
    \ Japanese, and Korean\", RFC 3743,\n              DOI 10.17487/RFC3743, April\
    \ 2004,\n              <http://www.rfc-editor.org/info/rfc3743>.\n   [RFC4290]\
    \  Klensin, J., \"Suggested Practices for Registration of\n              Internationalized\
    \ Domain Names (IDN)\", RFC 4290,\n              DOI 10.17487/RFC4290, December\
    \ 2005,\n              <http://www.rfc-editor.org/info/rfc4290>.\n   [RFC5226]\
    \  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA\
    \ Considerations Section in RFCs\", BCP 26, RFC 5226,\n              DOI 10.17487/RFC5226,\
    \ May 2008,\n              <http://www.rfc-editor.org/info/rfc5226>.\n   [RFC5564]\
    \  El-Sherbiny, A., Farah, M., Oueichek, I., and A. Al-Zoman,\n              \"\
    Linguistic Guidelines for the Use of the Arabic Language\n              in Internet\
    \ Domains\", RFC 5564, DOI 10.17487/RFC5564,\n              February 2010, <http://www.rfc-editor.org/info/rfc5564>.\n\
    \   [RFC5891]  Klensin, J., \"Internationalized Domain Names in\n            \
    \  Applications (IDNA): Protocol\", RFC 5891,\n              DOI 10.17487/RFC5891,\
    \ August 2010,\n              <http://www.rfc-editor.org/info/rfc5891>.\n   [RFC5892]\
    \  Faltstrom, P., Ed., \"The Unicode Code Points and\n              Internationalized\
    \ Domain Names for Applications (IDNA)\",\n              RFC 5892, DOI 10.17487/RFC5892,\
    \ August 2010,\n              <http://www.rfc-editor.org/info/rfc5892>.\n   [RFC6838]\
    \  Freed, N., Klensin, J., and T. Hansen, \"Media Type\n              Specifications\
    \ and Registration Procedures\", BCP 13,\n              RFC 6838, DOI 10.17487/RFC6838,\
    \ January 2013,\n              <http://www.rfc-editor.org/info/rfc6838>.\n   [RFC7303]\
    \  Thompson, H. and C. Lilley, \"XML Media Types\", RFC 7303,\n              DOI\
    \ 10.17487/RFC7303, July 2014,\n              <http://www.rfc-editor.org/info/rfc7303>.\n\
    \   [TDIL-HINDI]\n              Technology Development for Indian Languages (TDIL)\n\
    \              Programme, \"Devanagari Script Behaviour for Hindi Ver2.0\",\n\
    \              <http://tdil-dc.in/index.php?option=com_download&task=show\n  \
    \            resourceDetails&toolid=1625&lang=en>.\n   [UAX44]    The Unicode\
    \ Consortium, \"Unicode Character Database\",\n              June 2016, <http://unicode.org/reports/tr44/>.\n\
    \   [WLE-RULES]\n              Internet Corporation for Assigned Names and Numbers,\n\
    \              \"Whole Label Evaluation (WLE) Rules\", August 2016,\n        \
    \      <https://community.icann.org/download/\n              attachments/43989034/WLE-Rules.pdf>.\n"
- title: Appendix A.  Example Tables
  contents:
  - "Appendix A.  Example Tables\n   The following presents a minimal LGR table defining\
    \ the lowercase LDH\n   (letters, digits, hyphen) repertoire and containing no\
    \ rules or\n   metadata elements.  Many simple LGR tables will look quite similar,\n\
    \   except that they would contain some metadata.\n   <?xml version=\"1.0\" encoding=\"\
    utf-8\"?>\n   <lgr xmlns=\"urn:ietf:params:xml:ns:lgr-1.0\">\n   <data>\n    \
    \   <char cp=\"002D\" comment=\"HYPHEN (-)\" />\n       <range first-cp=\"0030\"\
    \ last-cp=\"0039\"\n         comment=\"DIGIT ZERO - DIGIT NINE\" />\n       <range\
    \ first-cp=\"0061\" last-cp=\"007A\"\n         comment=\"LATIN SMALL LETTER A\
    \ - LATIN SMALL LETTER Z\" />\n   </data>\n   </lgr>\n   In practice, any LGR\
    \ that includes the hyphen might also contain\n   rules invalidating any labels\
    \ beginning with a hyphen, ending with a\n   hyphen, and containing consecutive\
    \ hyphens in the third and fourth\n   positions as required by [RFC5891].\n  \
    \ <?xml version=\"1.0\" encoding=\"utf-8\"?>\n   <lgr xmlns=\"urn:ietf:params:xml:ns:lgr-1.0\"\
    >\n   <data>\n       <char cp=\"002D\"\n             not-when=\"hyphen-minus-disallowed\"\
    \ />\n       <range first-cp=\"0030\" last-cp=\"0039\" />\n       <range first-cp=\"\
    0061\" last-cp=\"007A\" />\n   </data>\n   <rules>\n       <rule name=\"hyphen-minus-disallowed\"\
    \n             comment=\"RFC5891 restrictions on U+002D\">\n         <choice>\n\
    \           <rule comment=\"no leading hyphen\">\n             <look-behind>\n\
    \               <start />\n             </look-behind>\n             <anchor />\n\
    \           </rule>\n           <rule comment=\"no trailing hyphen\">\n      \
    \       <anchor />\n             <look-ahead>\n               <end />\n      \
    \       </look-ahead>\n           </rule>\n           <rule comment=\"no consecutive\
    \ hyphens\n                   in third and fourth positions\">\n             <look-behind>\n\
    \               <start />\n               <any />\n               <any />\n  \
    \             <char cp=\"002D\" comment=\"hyphen-minus\" />\n             </look-behind>\n\
    \             <anchor />\n           </rule>\n         </choice>\n       </rule>\n\
    \   </rules>\n   </lgr>\n   The following sample LGR shows a more complete collection\
    \ of the\n   elements and attributes defined in this specification in a somewhat\n\
    \   typical context.\n   <?xml version=\"1.0\" encoding=\"utf-8\"?>\n   <!-- This\
    \ example uses a large subset of the features of this\n        specification.\
    \  It does not include every set operator,\n        match operator element, or\
    \ action trigger attribute, their\n        use being largely parallel to the ones\
    \ demonstrated. -->\n   <lgr xmlns=\"urn:ietf:params:xml:ns:lgr-1.0\">\n   <!--\
    \ meta element with all optional elements -->\n   <meta>\n       <version comment=\"\
    initial version\">1</version>\n       <date>2010-01-01</date>\n       <language>sv</language>\n\
    \       <scope type=\"domain\">example.com</scope>\n       <validity-start>2010-01-01</validity-start>\n\
    \       <validity-end>2013-12-31</validity-end>\n       <description type=\"text/html\"\
    >\n           <![CDATA[\n           This language table was developed with the\n\
    \           <a href=\"http://swedish.example/\">Swedish\n           examples institute</a>.\n\
    \           ]]>\n       </description>\n       <unicode-version>6.3.0</unicode-version>\n\
    \       <references>\n         <reference id=\"0\" comment=\"the most recent\"\
    \ >The\n               Unicode Standard 9.0</reference>\n         <reference id=\"\
    1\" >RFC 5892</reference>\n         <reference id=\"2\" >Big-5: Computer Chinese\
    \ Glyph\n            and Character Code Mapping Table, Technical Report\n    \
    \        C-26, 1984</reference>\n       </references>\n    </meta>\n    <!-- the\
    \ \"data\" section describing the repertoire -->\n    <data>\n       <!-- single\
    \ code point \"char\" element -->\n       <char cp=\"002D\" ref=\"1\" comment=\"\
    HYPHEN\" />\n       <!-- \"range\" elements for contiguous code points, with tags\
    \ -->\n       <range first-cp=\"0030\" last-cp=\"0039\" ref=\"1\" tag=\"digit\"\
    \ />\n       <range first-cp=\"0061\" last-cp=\"007A\" ref =\"1\" tag=\"letter\"\
    \ />\n       <!-- code point sequence -->\n       <char cp=\"006C 00B7 006C\"\
    \ comment=\"Catalan middle dot\" />\n       <!-- alternatively, use a When Rule\
    \ -->\n       <char cp=\"00B7\" when=\"catalan-middle-dot\" />\n        <!-- code\
    \ point with context rule -->\n       <char cp=\"200D\" when=\"joiner\" ref=\"\
    2\" />\n       <!-- code points with variants -->\n       <char cp=\"4E16\" tag=\"\
    preferred\" ref=\"0\">\n         <var cp=\"4E17\" type=\"blocked\" ref=\"2\" />\n\
    \         <var cp=\"534B\" type=\"allocatable\" ref=\"2\" />\n       </char>\n\
    \       <char cp=\"4E17\" ref=\"0\">\n         <var cp=\"4E16\" type=\"allocatable\"\
    \ ref=\"2\" />\n         <var cp=\"534B\" type=\"allocatable\" ref=\"2\" />\n\
    \       </char>\n       <char cp=\"534B\" ref=\"0\">\n         <var cp=\"4E16\"\
    \ type=\"allocatable\" ref=\"2\" />\n         <var cp=\"4E17\" type=\"blocked\"\
    \ ref=\"2\" />\n       </char>\n     </data>\n     <!-- Context and whole label\
    \ rules -->\n     <rules>\n       <!-- Require the given code point to be between\
    \ two 006C\n            code points -->\n       <rule name=\"catalan-middle-dot\"\
    \ ref=\"0\">\n           <look-behind>\n               <char cp=\"006C\" />\n\
    \           </look-behind>\n           <anchor />\n           <look-ahead>\n \
    \              <char cp=\"006C\" />\n           </look-ahead>\n       </rule>\n\
    \       <!-- example of a context rule based on property -->\n       <class name=\"\
    virama\" property=\"ccc:9\" />\n       <rule name=\"joiner\"  ref=\"1\" >\n  \
    \         <look-behind>\n               <class by-ref=\"virama\" />\n        \
    \   </look-behind>\n           <anchor />\n       </rule>\n       <!-- example\
    \ of using set operators -->\n       <!-- Subtract vowels from letters to get\n\
    \            consonant, demonstrating the different\n            set notations\
    \ and the difference operator -->\n        <difference name=\"consonants\">\n\
    \            <class comment=\"all letters\">0061-007A</class>\n            <class\
    \ comment=\"all vowels\">\n                    0061 0065 0069 006F 0075\n    \
    \        </class>\n        </difference>\n        <!-- by using the start and\
    \ end, rule matches whole label -->\n        <rule name=\"three-or-more-consonants\"\
    >\n            <start />\n            <!-- reference the class defined by the\
    \ difference,\n                 and require three or more matches -->\n      \
    \      <class by-ref=\"consonants\" count=\"3+\" />\n            <end />\n   \
    \    </rule>\n       <!-- rule for negative matching -->\n       <rule name=\"\
    non-preferred\"\n             comment=\"matches any non-preferred code point\"\
    >\n           <complement comment=\"non-preferred\" >\n               <class from-tag=\"\
    preferred\" />\n           </complement>\n       </rule>\n      <!-- actions triggered\
    \ by matching rules and/or\n           variant types -->\n       <action disp=\"\
    invalid\"\n               match=\"three-or-more-consonants\" />\n       <action\
    \ disp=\"blocked\" any-variant=\"blocked\" />\n       <action disp=\"allocatable\"\
    \ all-variants=\"allocatable\"\n               not-match=\"non-preferred\" />\n\
    \     </rules>\n   </lgr>\n"
- title: Appendix B.  How to Translate Tables Based on RFC 3743 into the XML
  contents:
  - "Appendix B.  How to Translate Tables Based on RFC 3743 into the XML\n       \
    \      Format\n   As background, the rules specified in [RFC3743] work as follows:\n\
    \   1.  The original (requested) label is checked to make sure that all\n    \
    \   the code points are a subset of the repertoire.\n   2.  If it passes the check,\
    \ the original label is allocatable.\n   3.  Generate the all-simplified and all-traditional\
    \ variant labels\n       (union of all the labels generated using all the simplified\n\
    \       variants of the code points) for allocation.\n   To illustrate by example,\
    \ here is one of the more complicated set of\n   variants:\n       U+4E7E\n  \
    \     U+4E81\n       U+5E72\n       U+5E79\n       U+69A6\n       U+6F27\n   The\
    \ following shows the relevant section of the Chinese language\n   table published\
    \ by the .ASIA registry [ASIA-TABLE].  Its\n   entries read:\n    <codepoint>;<simpl-variant(s)>;<trad-variant(s)>;<other-variant(s)>\n\
    \   These are the lines corresponding to the set of variants\n   listed above:\n\
    \   U+4E7E;U+4E7E,U+5E72;U+4E7E;U+4E81,U+5E72,U+6F27,U+5E79,U+69A6\n   U+4E81;U+5E72;U+4E7E;U+5E72,U+6F27,U+5E79,U+69A6\n\
    \   U+5E72;U+5E72;U+5E72,U+4E7E,U+5E79;U+4E7E,U+4E81,U+69A6,U+6F27\n   U+5E79;U+5E72;U+5E79;U+69A6,U+4E7E,U+4E81,U+6F27\n\
    \   U+69A6;U+5E72;U+69A6;U+5E79,U+4E7E,U+4E81,U+6F27\n   U+6F27;U+4E7E;U+6F27;U+4E81,U+5E72,U+5E79,U+69A6\n\
    \   The corresponding \"data\" section XML format would look like this:\n    \
    \ <data>\n       <char cp=\"4E7E\">\n       <var cp=\"4E7E\" type=\"both\" comment=\"\
    identity\" />\n       <var cp=\"4E81\" type=\"blocked\" />\n       <var cp=\"\
    5E72\" type=\"simp\" />\n       <var cp=\"5E79\" type=\"blocked\" />\n       <var\
    \ cp=\"69A6\" type=\"blocked\" />\n       <var cp=\"6F27\" type=\"blocked\" />\n\
    \       </char>\n       <char cp=\"4E81\">\n       <var cp=\"4E7E\" type=\"trad\"\
    \ />\n       <var cp=\"5E72\" type=\"simp\" />\n       <var cp=\"5E79\" type=\"\
    blocked\" />\n       <var cp=\"69A6\" type=\"blocked\" />\n       <var cp=\"6F27\"\
    \ type=\"blocked\" />\n       </char>\n       <char cp=\"5E72\">\n       <var\
    \ cp=\"4E7E\" type=\"trad\"/>\n       <var cp=\"4E81\" type=\"blocked\"/>\n  \
    \     <var cp=\"5E72\" type=\"both\" comment=\"identity\"/>\n       <var cp=\"\
    5E79\" type=\"trad\"/>\n       <var cp=\"69A6\" type=\"blocked\"/>\n       <var\
    \ cp=\"6F27\" type=\"blocked\"/>\n       </char>\n       <char cp=\"5E79\">\n\
    \       <var cp=\"4E7E\" type=\"blocked\"/>\n       <var cp=\"4E81\" type=\"blocked\"\
    />\n       <var cp=\"5E72\" type=\"simp\"/>\n       <var cp=\"5E79\" type=\"trad\"\
    \ comment=\"identity\"/>\n       <var cp=\"69A6\" type=\"blocked\"/>\n       <var\
    \ cp=\"6F27\" type=\"blocked\"/>\n       </char>\n       <char cp=\"69A6\">\n\
    \       <var cp=\"4E7E\" type=\"blocked\"/>\n       <var cp=\"4E81\" type=\"blocked\"\
    />\n       <var cp=\"5E72\" type=\"simp\"/>\n       <var cp=\"5E79\" type=\"blocked\"\
    />\n       <var cp=\"69A6\" type=\"trad\" comment=\"identity\"/>\n       <var\
    \ cp=\"6F27\" type=\"blocked\"/>\n       </char>\n       <char cp=\"6F27\">\n\
    \       <var cp=\"4E7E\" type=\"simp\"/>\n       <var cp=\"4E81\" type=\"blocked\"\
    />\n       <var cp=\"5E72\" type=\"blocked\"/>\n       <var cp=\"5E79\" type=\"\
    blocked\"/>\n       <var cp=\"69A6\" type=\"blocked\"/>\n       <var cp=\"6F27\"\
    \ type=\"trad\" comment=\"identity\"/>\n       </char>\n     </data>\n   Here,\
    \ the simplified variants have been given a type of \"simp\" and\n   the traditional\
    \ variants one of \"trad\", and all other ones are given\n   \"blocked\".\n  \
    \ Because some variant mappings show in more than one column, while the\n   XML\
    \ format allows only a single type value, they have been given the\n   type of\
    \ \"both\".\n   Note that some variant mappings map to themselves (identity);\
    \ that\n   is, the mapping is reflexive (see Section 5.3.4).  In creating the\n\
    \   permutation of all variant labels, these mappings have no effect,\n   other\
    \ than adding a value to the variant type list for the variant\n   label containing\
    \ them.\n   In the example so far, all of the entries with type=\"both\" are also\n\
    \   mappings where source and target are identical.  That is, they are\n   reflexive\
    \ mappings as defined in Section 5.3.4.\n   Given a label \"U+4E7E U+4E81\", the\
    \ following labels would be ruled\n   allocatable per [RFC3743], based on how\
    \ that standard is commonly\n   implemented in domain registries:\n       Original\
    \ label:     U+4E7E U+4E81\n       Simplified label 1: U+4E7E U+5E72\n       Simplified\
    \ label 2: U+5E72 U+5E72\n       Traditional label:  U+4E7E U+4E7E\n   However,\
    \ if allocatable labels were generated simply by a straight\n   permutation of\
    \ all variants with type other than type=\"blocked\" and\n   without regard to\
    \ the simplified and traditional variants, we would\n   end up with an extra allocatable\
    \ label of \"U+5E72 U+4E7E\".  This\n   label is composed of both a Simplified\
    \ Chinese character and a\n   Traditional Chinese code point and therefore shouldn't\
    \ be\n   allocatable.\n   To more fully resolve the dispositions requires several\
    \ actions to be\n   defined, as described in Section 7.2.2, that will override\
    \ the\n   default actions from Section 7.6.  After blocking all labels that\n\
    \   contain a variant with type \"blocked\", these actions will set to\n   \"\
    allocatable\" labels based on the following variant types: \"simp\",\n   \"trad\"\
    , and \"both\".  Note that these variant types do not directly\n   relate to dispositions\
    \ for the variant label, but that the actions\n   will resolve them to the Standard\
    \ Dispositions on labels, i.e.,\n   \"blocked\" and \"allocatable\".\n   To resolve\
    \ label dispositions requires five actions to be defined (in\n   the \"rules\"\
    \ section of the XML document in question); these actions\n   apply in order,\
    \ and the first one triggered defines the disposition\n   for the label.  The\
    \ actions are as follows:\n   1.  Block all variant labels containing at least\
    \ one blocked variant.\n   2.  Allocate all labels that consist entirely of variants\
    \ that are\n       \"simp\" or \"both\".\n   3.  Also allocate all labels that\
    \ are entirely \"trad\" or \"both\".\n   4.  Block all surviving labels containing\
    \ any one of the dispositions\n       \"simp\" or \"trad\" or \"both\", because\
    \ they are now known to be part\n       of an undesirable mixed simplified/traditional\
    \ label.\n   5.  Allocate any remaining label; the original label would be such\
    \ a\n       label.\n   The rules declarations would be represented as:\n     <rules>\n\
    \       <!--\"action\" elements - order defines precedence-->\n       <action\
    \ disp=\"blocked\" any-variant=\"blocked\" />\n       <action disp=\"allocatable\"\
    \ only-variants=\"simp both\" />\n       <action disp=\"allocatable\" only-variants=\"\
    trad both\" />\n       <action disp=\"blocked\" any-variant=\"simp trad\" />\n\
    \       <action disp=\"allocatable\" comment=\"catch-all\" />\n     </rules>\n\
    \   Up to now, variants with type \"both\" have occurred only associated\n   with\
    \ reflexive variant mappings.  The \"action\" elements defined above\n   rely\
    \ on the assumption that this is always the case.  However,\n   consider the following\
    \ set of variants:\n       U+62E0;U+636E;U+636E;U+64DA\n       U+636E;U+636E;U+64DA;U+62E0\n\
    \       U+64DA;U+636E;U+64DA;U+62E0\n   The corresponding XML would be:\n    \
    \   <char cp=\"62E0\">\n       <var cp=\"636E\" type=\"both\" comment=\"both,\
    \ but not reflexive\" />\n       <var cp=\"64DA\" type=\"blocked\" />\n      \
    \ </char>\n       <char cp=\"636E\">\n       <var cp=\"636E\" type=\"simp\" comment=\"\
    reflexive, but not both\" />\n       <var cp=\"64DA\" type=\"trad\" />\n     \
    \  <var cp=\"62E0\" type=\"blocked\" />\n       </char>\n       <char cp=\"64DA\"\
    >\n       <var cp=\"636E\" type=\"simp\" />\n       <var cp=\"64DA\" type=\"trad\"\
    \ comment=\"reflexive\" />\n       <var cp=\"62E0\" type=\"blocked\" />\n    \
    \   </char>\n   To make such variant sets work requires a way to selectively trigger\n\
    \   an action based on whether a variant type is associated with an\n   identity\
    \ or reflexive mapping, or is associated with an ordinary\n   variant mapping.\
    \  This can be done by adding a prefix \"r-\" to the\n   \"type\" attribute on\
    \ reflexive variant mappings.  For example, the\n   \"trad\" for code point U+64DA\
    \ in the preceding figure would become\n   \"r-trad\".\n   With the dispositions\
    \ prepared in this way, only a slight\n   modification to the actions is needed\
    \ to yield the correct set of\n   allocatable labels:\n   <action disp=\"blocked\"\
    \ any-variant=\"blocked\" />\n   <action disp=\"allocatable\" only-variants=\"\
    simp r-simp both r-both\" />\n   <action disp=\"allocatable\" only-variants=\"\
    trad r-trad both r-both\" />\n   <action disp=\"blocked\" all-variants=\"simp\
    \ trad both\" />\n   <action disp=\"allocatable\" />\n   The first three actions\
    \ get triggered by the same labels as before.\n   The fourth action blocks any\
    \ label that combines an original code\n   point with any mix of ordinary variant\
    \ mappings; however, no labels\n   that are a combination of only original code\
    \ points (code points\n   having either no variant mappings or a reflexive mapping)\
    \ would be\n   affected.  These are the original labels, and they are allocated\
    \ in\n   the last action.\n   Using this scheme of assigning types to ordinary\
    \ and reflexive\n   variants, all tables in the style of RFC 3743 can be converted\
    \ to\n   XML.  By defining a set of actions as outlined above, the LGR will\n\
    \   yield the correct set of allocatable variants: all variants\n   consisting\
    \ completely of variant code points preferred for simplified\n   or traditional,\
    \ respectively, will be allocated, as will be the\n   original label.  All other\
    \ variant labels will be blocked.\n"
- title: Appendix C.  Indic Syllable Structure Example
  contents:
  - "Appendix C.  Indic Syllable Structure Example\n   In LGRs for Indic scripts,\
    \ it may be desirable to restrict valid\n   labels to sequences of valid Indic\
    \ syllables, or aksharas.  This\n   appendix gives a sample set of rules designed\
    \ to enforce this\n   restriction.\n   Below is an example of BNF for an akshara,\
    \ which has been published\n   in \"Devanagari Script Behaviour for Hindi\" [TDIL-HINDI].\
    \  The rules\n   for other languages and scripts used in India are expected to\
    \ be\n   generally similar.\n   For Hindi, the BNF has the form:\n       V[m]|{C[N]H}C[N](H|[v][m])\n\
    \   Where:\n   V    (uppercase) is any independent vowel\n   m    is any vowel\
    \ modifier (Devanagari Anusvara, Visarga, and\n        Candrabindu)\n   C    is\
    \ any consonant (with inherent vowel)\n   N    is Nukta\n   H    is a halant (or\
    \ virama)\n   v    (lowercase) is any dependent vowel sign (matra)\n   {}   encloses\
    \ items that may be repeated one or more times\n   [ ]  encloses items that may\
    \ or may not be present\n   |    separates items, out of which only one can be\
    \ present\n   By using the Unicode character property \"InSC\" or\n   \"Indic_Syllabic_Category\"\
    , which corresponds rather directly to the\n   classification of characters in\
    \ the BNF above, we can translate the\n   BNF into a set of WLE rules matching\
    \ the definition of an akshara.\n     <rules>\n       <!--Character class definitions\
    \ go here-->\n       <class name=\"halant\" property=\"InSC:Virama\" />\n    \
    \   <union name=\"vowel-modifier\">\n         <class property=\"InSC:Visarga\"\
    \ />\n         <class property=\"InSC:Bindu\" comment=\"includes anusvara\" />\n\
    \       </union>\n       <!--Whole label evaluation and context rules go here-->\n\
    \       <rule name=\"consonant-with-optional-nukta\">\n           <class by-ref=\"\
    InSC:Consonant\" />\n           <class by-ref=\"InSC:Nukta\" count=\"0:1\"/>\n\
    \       </rule>\n       <rule name=\"independent-vowel-with-optional-modifier\"\
    >\n           <class by-ref=\"InSC:Vowel_Independent\" />\n           <class by-ref=\"\
    vowel-modifier\" count=\"0:1\" />\n       </rule>\n       <rule name=\"optional-dependent-vowel-with-opt-modifier\"\
    \ >\n         <class by-ref=\"InSC:Vowel_Dependent\" count=\"0:1\" />\n      \
    \   <class by-ref=\"vowel-modifier\" count=\"0:1\" />\n       </rule>\n      \
    \ <rule name=\"consonant-cluster\">\n         <rule count=\"0+\">\n          \
    \ <rule by-ref=\"consonant-with-optional-nukta\" />\n           <class by-ref=\"\
    halant\" />\n         </rule>\n         <rule by-ref=\"consonant-with-optional-nukta\"\
    \ />\n         <choice>\n           <class by-ref=\"halant\" />\n           <rule\
    \ by-ref=\"optional-dependent-vowel-with-opt-modifier\" />\n         </choice>\n\
    \       </rule>\n       <rule name=\"akshara\">\n         <choice>\n         \
    \  <rule by-ref=\"independent-vowel-with-optional-modifier\" />\n           <rule\
    \ by-ref=\"consonant-cluster\" />\n         </choice>\n       </rule>\n      \
    \ <rule name=\"WLE-akshara-or-other\" comment=\"series of one or\n           more\
    \ aksharas, possibly alternating with other types of\n           code points such\
    \ as digits\">\n         <start />\n         <choice count=\"1+\">\n         \
    \  <class property=\"InSC:other\" />\n           <rule by-ref=\"akshara\" />\n\
    \         </choice>\n         <end />\n       </rule>\n       <!--\"action\" elements\
    \ go here - order defines precedence-->\n       <action disp=\"invalid\" not-match=\"\
    WLE-akshara-or-other\" />\n     </rules>\n   With the rules and classes as defined\
    \ above, the final action assigns\n   a disposition of \"invalid\" to all labels\
    \ that are not composed of a\n   sequence of well-formed aksharas, optionally\
    \ interspersed with other\n   characters, perhaps digits, for example.\n   The\
    \ relevant Unicode character property could be replicated by\n   tagging repertoire\
    \ values directly in the LGR; this would remove the\n   dependency on any specific\
    \ version of the Unicode Standard.\n   Generally, dependent vowels may only follow\
    \ consonant expressions;\n   however, for some scripts, like Bengali, the Unicode\
    \ Standard\n   supports sequences of dependent vowels or their application on\n\
    \   independent vowels.  This makes the definition of akshara less\n   restrictive.\n"
- title: C.1.  Reducing Complexity
  contents:
  - "C.1.  Reducing Complexity\n   As presented in this example, the rules are rather\
    \ complex --\n   although useful in demonstrating the features of the XML format,\
    \ such\n   complexity would be an undesirable feature in an actual LGR.\n   It\
    \ is possible to reduce the complexity of the rules in this example\n   by defining\
    \ alternate rules that simply define the permissible\n   pair-wise context of\
    \ adjacent code points by character class, such as\n   a rule that a halant can\
    \ only follow a (nuktated) consonant.  Such\n   pair-wise contexts are easier\
    \ to understand, implement, and verify,\n   and have the additional benefit of\
    \ allowing tools to better pinpoint\n   why a label failed to validate.  They\
    \ also tend to correspond more\n   directly to the kind of well-formedness requirements\
    \ that are most\n   relevant to DNS security, like the requirement to limit the\n\
    \   application of a combining mark (such as a vowel modifier) to only\n   selected\
    \ base characters (in this case, vowels).  (See the example\n   and discussion\
    \ in [WLE-RULES].)\n"
- title: Appendix D.  RELAX NG Compact Schema
  contents:
  - "Appendix D.  RELAX NG Compact Schema\n   This schema is provided in RELAX NG\
    \ Compact format [RELAX-NG].\n   <CODE BEGINS>\n   #\n   # LGR XML Schema 1.0\n\
    \   #\n   default namespace = \"urn:ietf:params:xml:ns:lgr-1.0\"\n   #\n   # SIMPLE\
    \ TYPES\n   #\n   # RFC 5646 language tag (e.g., \"de\", \"und-Latn\")\n   language-tag\
    \ = xsd:token\n   # The scope to which the LGR applies.  For the \"domain\" scope\
    \ type,\n   # it should be a fully qualified domain name.\n   scope-value = xsd:token\
    \ {\n       minLength = \"1\"\n   }\n   ## a single code point\n   code-point\
    \ = xsd:token {\n       pattern = \"[0-9A-F]{4,6}\"\n   }\n   ## a space-separated\
    \ sequence of code points\n   code-point-sequence = xsd:token {\n       pattern\
    \ = \"[0-9A-F]{4,6}( [0-9A-F]{4,6})+\"\n   }\n   ## single code point, or a sequence\
    \ of code points, or empty string\n   code-point-literal = code-point | code-point-sequence\
    \ | \"\"\n   ## code point or sequence only\n   non-empty-code-point-literal =\
    \ code-point | code-point-sequence\n   ## code point sent represented in short\
    \ form\n   code-point-set-shorthand = xsd:token {\n       pattern = \"([0-9A-F]{4,6}|[0-9A-F]{4,6}-[0-9A-F]{4,6})\"\
    \n                 ~ \"( ([0-9A-F]{4,6}|[0-9A-F]{4,6}-[0-9A-F]{4,6}))*\"\n   }\n\
    \   ## dates are used in information fields in the meta\n   ## section (\"YYYY-MM-DD\"\
    )\n   date-pattern = xsd:token {\n       pattern = \"\\d{4}-\\d\\d-\\d\\d\"\n\
    \   }\n   ## variant type\n   ## the variant type MUST be non-empty and MUST NOT\n\
    \   ## start with a \"_\"; using xsd:NMTOKEN here because\n   ## we need space-separated\
    \ lists of them\n   variant-type = xsd:NMTOKEN\n   ## variant type list for action\
    \ triggers\n   ## the list MUST NOT be empty, and entries MUST NOT\n   ## start\
    \ with a \"_\"\n   variant-type-list = xsd:NMTOKENS\n   ## reference to a rule\
    \ name (used in \"when\" and \"not-when\"\n   ## attributes, as well as the \"\
    by-ref\" attribute of the \"rule\"\n   ## element).\n   rule-ref = xsd:IDREF\n\
    \   ## a space-separated list of tags.  Tags should generally follow\n   ## xsd:Name\
    \ syntax.  However, we are using the xsd:NMTOKENS here\n   ## because there is\
    \ no native XSD datatype for space-separated\n   ## xsd:Name\n   tags = xsd:NMTOKENS\n\
    \   ## The value space of a \"from-tag\" attribute.  Although it is closer\n \
    \  ## to xsd:IDREF lexically and semantically, tags are not unique in\n   ## the\
    \ document.  As such, we are unable to take advantage of\n   ## facilities provided\
    \ by a validator.  xsd:NMTOKEN is used instead\n   ## of the stricter xsd:Names\
    \ here so as to be consistent with\n   ## the above.\n   tag-ref = xsd:NMTOKEN\n\
    \   ## an identifier type (used by \"name\" attributes).\n   identifier = xsd:ID\n\
    \   ## used in the class \"by-ref\" attribute to reference another class of\n\
    \   ## the same \"name\" attribute value.\n   class-ref = xsd:IDREF\n   ## \"\
    count\" attribute pattern (\"n\", \"n+\", or \"n:m\")\n   count-pattern = xsd:token\
    \ {\n       pattern = \"\\d+(\\+|:\\d+)?\"\n   }\n   ## \"ref\" attribute pattern\n\
    \   ## space-separated list of \"id\" attribute values for\n   ## \"reference\"\
    \ elements.  These reference ids\n   ## must be declared in a \"reference\" element\n\
    \   ## before they can be used in a \"ref\" attribute\n   ref-pattern = xsd:token\
    \ {\n       pattern = \"[\\-_.:0-9A-Z]+( [\\-_.:0-9A-Z]+)*\"\n   }\n   #\n   #\
    \ STRUCTURES\n   #\n   ## Representation of a single code point or a sequence\
    \ of code\n   ## points\n   char = element char {\n       attribute cp { code-point-literal\
    \ },\n       attribute comment { text }?,\n       attribute when { rule-ref }?,\n\
    \       attribute not-when { rule-ref }?,\n       attribute tag { tags }?,\n \
    \      attribute ref { ref-pattern }?,\n         variant*\n   }\n   ## Representation\
    \ of a range of code points\n   range = element range {\n       attribute first-cp\
    \ { code-point },\n       attribute last-cp { code-point },\n       attribute\
    \ comment { text }?,\n       attribute when { rule-ref }?,\n       attribute not-when\
    \ { rule-ref }?,\n       attribute tag { tags }?,\n       attribute ref { ref-pattern\
    \ }?\n   }\n   ## Representation of a variant code point or sequence\n   variant\
    \ = element var {\n       attribute cp { code-point-literal },\n       attribute\
    \ type { xsd:NMTOKEN }?,\n       attribute when { rule-ref }?,\n       attribute\
    \ not-when { rule-ref }?,\n       attribute comment { text }?,\n       attribute\
    \ ref { ref-pattern }?\n   }\n   #\n   # Classes\n   #\n   ## a \"class\" element\
    \ that references the name of another \"class\"\n   ## (or set-operator like \"\
    union\") defined elsewhere.\n   ## If used as a matcher (appearing under a \"\
    rule\" element),\n   ## the \"count\" attribute may be present.\n   class-invocation\
    \ = element class { class-invocation-content }\n   class-invocation-content =\n\
    \       attribute by-ref { class-ref },\n       attribute count { count-pattern\
    \ }?,\n       attribute comment { text }?\n   ## defines a new class (set of code\
    \ points) using Unicode property\n   ## or code points of the same tag value or\
    \ code point literals\n   class-declaration = element class { class-declaration-content\
    \ }\n   class-declaration-content =\n       # \"name\" attribute MUST be present\
    \ if this is a \"top-level\"\n       # class declaration, i.e., appearing directly\
    \ under the \"rules\"\n       # element.  Otherwise, it MUST be absent.\n    \
    \   attribute name { identifier }?,\n       # If used as a matcher (appearing\
    \ in a \"rule\" element, but not\n       # when nested inside a set-operator or\
    \ class), the \"count\"\n       # attribute may be present.  Otherwise, it MUST\
    \ be absent.\n       attribute count { count-pattern }?,\n       attribute comment\
    \ { text }?,\n       attribute ref { ref-pattern }?,\n       (\n         # define\
    \ the class by property (e.g., property=\"sc:Latn\"), OR\n         attribute property\
    \ { xsd:NMTOKEN }\n         # define the class by tagged code points, OR\n   \
    \      | attribute from-tag { tag-ref }\n         # text node to allow for shorthand\
    \ notation\n         # e.g., \"0061 0062-0063\"\n         | code-point-set-shorthand\n\
    \       )\n   class-invocation-or-declaration = element class {\n     class-invocation-content\
    \ | class-declaration-content\n   }\n   class-or-set-operator-nested =\n     class-invocation-or-declaration\
    \ | set-operator\n   class-or-set-operator-declaration =\n     # a \"class\" element\
    \ or set-operator (effectively defining a class)\n     # directly in the \"rules\"\
    \ element.\n     class-declaration | set-operator\n   #\n   # set-operators\n\
    \   #\n   complement-operator = element complement {\n       attribute name {\
    \ identifier }?,\n       attribute comment { text }?,\n       attribute ref {\
    \ ref-pattern }?,\n       # \"count\" attribute MUST only be used when this set-operator\
    \ is\n       # used as a matcher (i.e., nested in a \"rule\" element but not\n\
    \       # inside a set-operator or class)\n       attribute count { count-pattern\
    \ }?,\n       class-or-set-operator-nested\n   }\n   union-operator = element\
    \ union {\n       attribute name { identifier }?,\n       attribute comment {\
    \ text }?,\n       attribute ref { ref-pattern }?,\n       # \"count\" attribute\
    \ MUST only be used when this set-operator is\n       # used as a matcher (i.e.,\
    \ nested in a \"rule\" element but not\n       # inside a set-operator or class)\n\
    \       attribute count { count-pattern }?,\n       class-or-set-operator-nested,\n\
    \       # needs two or more child elements\n       class-or-set-operator-nested+\n\
    \   }\n   intersection-operator = element intersection {\n       attribute name\
    \ { identifier }?,\n       attribute comment { text }?,\n       attribute ref\
    \ { ref-pattern }?,\n       # \"count\" attribute MUST only be used when this\
    \ set-operator is\n       # used as a matcher (i.e., nested in a \"rule\" element\
    \ but not\n       # inside a set-operator or class)\n       attribute count {\
    \ count-pattern }?,\n       class-or-set-operator-nested,\n       class-or-set-operator-nested\n\
    \   }\n   difference-operator = element difference {\n       attribute name {\
    \ identifier }?,\n       attribute comment { text }?,\n       attribute ref {\
    \ ref-pattern }?,\n       # \"count\" attribute MUST only be used when this set-operator\
    \ is\n       # used as a matcher (i.e., nested in a \"rule\" element but not\n\
    \       # inside a set-operator or class)\n       attribute count { count-pattern\
    \ }?,\n       class-or-set-operator-nested,\n       class-or-set-operator-nested\n\
    \   }\n   symmetric-difference-operator = element symmetric-difference {\n   \
    \    attribute name { identifier }?,\n       attribute comment { text }?,\n  \
    \     attribute ref { ref-pattern }?,\n       # \"count\" attribute MUST only\
    \ be used when this set-operator is\n       # used as a matcher (i.e., nested\
    \ in a \"rule\" element but not\n       # inside a set-operator or class)\n  \
    \     attribute count { count-pattern }?,\n       class-or-set-operator-nested,\n\
    \       class-or-set-operator-nested\n   }\n   ## operators that transform class(es)\
    \ into a new class.\n   set-operator = complement-operator\n                 \
    \ | union-operator\n                  | intersection-operator\n              \
    \    | difference-operator\n                  | symmetric-difference-operator\n\
    \   #\n   # Match operators (matchers)\n   #\n   any-matcher = element any {\n\
    \       attribute count { count-pattern }?,\n       attribute comment { text }?\n\
    \   }\n   choice-matcher = element choice {\n       ## \"count\" attribute MUST\
    \ only be used when the choice-matcher\n       ## contains no nested \"start\"\
    , \"end\", \"anchor\", \"look-behind\",\n       ## or \"look-ahead\" operators\
    \ and no nested rule-matchers\n       ## containing any of these elements\n  \
    \     attribute count { count-pattern }?,\n       attribute comment { text }?,\n\
    \       # two or more match operators\n       match-operator-choice,\n       match-operator-choice+\n\
    \   }\n   char-matcher =\n     # for use as a matcher - like \"char\" but without\
    \ a \"tag\" attribute\n     element char {\n       attribute cp { non-empty-code-point-literal\
    \ },\n       # If used as a matcher (appearing in a \"rule\" element), the\n \
    \      # \"count\" attribute may be present.  Otherwise, it MUST be\n       #\
    \ absent.\n       attribute count { count-pattern }?,\n       attribute comment\
    \ { text }?,\n       attribute ref { ref-pattern }?\n   }\n   start-matcher =\
    \ element start {\n       attribute comment { text }?\n   }\n   end-matcher =\
    \ element end {\n       attribute comment { text }?\n   }\n   anchor-matcher =\
    \ element anchor {\n       attribute comment { text }?\n   }\n   look-ahead-matcher\
    \ = element look-ahead {\n       attribute comment { text }?,\n       match-operators-non-pos\n\
    \   }\n   look-behind-matcher = element look-behind {\n       attribute comment\
    \ { text }?,\n       match-operators-non-pos\n   }\n   ## non-positional match\
    \ operator that can be used as a direct child\n   ## element of the choice-matcher.\n\
    \   match-operator-choice = (\n     any-matcher | choice-matcher | start-matcher\
    \ | end-matcher\n     | char-matcher | class-or-set-operator-nested | rule-matcher\n\
    \   )\n   ## non-positional match operators do not contain any \"anchor\",\n \
    \  ## \"look-behind\", or \"look-ahead\" elements.\n   match-operators-non-pos\
    \ = (\n     start-matcher?,\n     (any-matcher | choice-matcher | char-matcher\n\
    \      | class-or-set-operator-nested | rule-matcher)*,\n     end-matcher?\n \
    \  )\n   ## positional match operators have an \"anchor\" element, which may be\n\
    \   ## preceded by a \"look-behind\" element, or followed by a \"look-ahead\"\n\
    \   ## element, or both.\n   match-operators-pos =\n     look-behind-matcher?,\
    \ anchor-matcher, look-ahead-matcher?\n   match-operators = match-operators-non-pos\
    \ | match-operators-pos\n   #\n   # Rules\n   #\n   # top-level rule must have\
    \ \"name\" attribute\n   rule-declaration-top = element rule {\n       attribute\
    \ name { identifier },\n       attribute comment { text }?,\n       attribute\
    \ ref { ref-pattern }?,\n       match-operators\n   }\n   ## \"rule\" element\
    \ used as a matcher (either \"by-ref\" or contains\n   ## other match operators\
    \ itself)\n   rule-matcher =\n     element rule {\n       ## \"count\" attribute\
    \ MUST only be used when the rule-matcher\n       ## contains no nested \"start\"\
    , \"end\", \"anchor\", \"look-behind\",\n       ## or \"look-ahead\" operators\
    \ and no nested rule-matchers\n       ## containing any of these elements\n  \
    \     attribute count { count-pattern }?,\n       attribute comment { text }?,\n\
    \       attribute ref { ref-pattern }?,\n       (attribute by-ref { rule-ref }\
    \ | match-operators)\n     }\n   #\n   # Actions\n   #\n   action-declaration\
    \ = element action {\n       attribute comment { text }?,\n       attribute ref\
    \ { ref-pattern }?,\n       # dispositions are often named after variant types\
    \ or vice versa\n       attribute disp { variant-type },\n       ( attribute match\
    \ { rule-ref }\n         | attribute not-match { rule-ref } )?,\n       ( attribute\
    \ any-variant { variant-type-list }\n         | attribute all-variants { variant-type-list\
    \ }\n         | attribute only-variants { variant-type-list } )?\n   }\n   # DOCUMENT\
    \ STRUCTURE\n   start = lgr\n   lgr = element lgr {\n       meta-section?,\n \
    \      data-section,\n       rules-section?\n   }\n   ## Meta section - information\
    \ recorded with an LGR that generally\n   ## does not affect machine processing\
    \ (except for \"unicode-version\").\n   ## However, if any \"class-declaration\"\
    \ uses the \"property\" attribute,\n   ## a \"unicode-version\" element MUST be\
    \ present.\n   meta-section = element meta {\n       element version {\n     \
    \      attribute comment { text }?,\n           text\n       }?\n       & element\
    \ date { date-pattern }?\n       & element language { language-tag }*\n      \
    \ & element scope {\n           # type may by \"domain\" or an application-defined\
    \ value\n           attribute type { xsd:NCName },\n           scope-value\n \
    \      }*\n       & element validity-start { date-pattern }?\n       & element\
    \ validity-end { date-pattern }?\n       & element unicode-version {\n       \
    \    xsd:token {\n               pattern = \"\\d+\\.\\d+\\.\\d+\"\n          \
    \ }\n       }?\n       & element description {\n           # this SHOULD be a\
    \ valid MIME type\n           attribute type { text }?,\n           text\n   \
    \    }?\n       & element references {\n           element reference {\n     \
    \          attribute id {\n                   xsd:token {\n                  \
    \     # limit \"id\" attribute to uppercase letters,\n                       #\
    \ digits, and a few punctuation marks; use of\n                       # integers\
    \ is RECOMMENDED\n                       pattern = \"[\\-_.:0-9A-Z]*\"\n     \
    \                  minLength = \"1\"\n                   }\n                },\n\
    \                attribute comment { text }?,\n                text\n        \
    \   }*\n       }?\n   }\n   data-section = element data { (char | range)+ }\n\
    \   ## Note that action declarations are strictly order dependent.\n   ## class-or-set-operator-declaration\
    \ and rule-declaration-top\n   ## are weakly order dependent; they must precede\
    \ first use of the\n   ## identifier via \"by-ref\".\n   rules-section = element\
    \ rules {\n     ( class-or-set-operator-declaration\n       | rule-declaration-top\n\
    \       | action-declaration)*\n   }\n   <CODE ENDS>\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This format builds upon the work on documenting IDN tables\
    \ by many\n   different registry operators.  Notably, a comprehensive language\n\
    \   table for Chinese, Japanese, and Korean was developed by the \"Joint\n   Engineering\
    \ Team\" [RFC3743]; this table is the basis of many registry\n   policies.  Also,\
    \ a set of guidelines for Arabic script registrations\n   [RFC5564] was published\
    \ by the Arabic-language community.\n   Contributions that have shaped this document\
    \ have been provided by\n   Francisco Arias, Julien Bernard, Mark Davis, Martin\
    \ Duerst, Paul\n   Hoffman, Sarmad Hussain, Barry Leiba, Alexander Mayrhofer,\
    \ Alexey\n   Melnikov, Nicholas Ostler, Thomas Roessler, Audric Schiltknecht,\n\
    \   Steve Sheng, Michel Suignard, Andrew Sullivan, Wil Tan, and John\n   Yunker.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Kim Davies\n   Internet Corporation for Assigned Names\
    \ and Numbers\n   12025 Waterfront Drive\n   Los Angeles, CA  90094\n   United\
    \ States of America\n   Phone: +1 310 301 5800\n   Email: kim.davies@icann.org\n\
    \   URI:   http://www.icann.org/\n   Asmus Freytag\n   ASMUS, Inc.\n   Email:\
    \ asmus@unicode.org\n"
