- title: __initial_text__
  contents:
  - '          Extensible Provisioning Protocol (EPP) Host Mapping

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes an Extensible Provisioning Protocol (EPP)\n\
    \   mapping for the provisioning and management of Internet host names\n   stored\
    \ in a shared central repository.  Specified in XML, the mapping\n   defines EPP\
    \ command syntax and semantics as applied to host names.\n   This document obsoletes\
    \ RFC 4932.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\
    \ in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n\
    \   Please review these documents carefully, as they describe your rights\n  \
    \ and restrictions with respect to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Relationship of Host Objects and Domain Objects ............3\n  \
    \    1.2. Conventions Used in This Document ..........................4\n   2.\
    \ Object Attributes ...............................................4\n      2.1.\
    \ Host Names .................................................4\n      2.2. Client\
    \ Identifiers .........................................4\n      2.3. Status Values\
    \ ..............................................4\n      2.4. Dates and Times\
    \ ............................................6\n      2.5. IP Addresses ...............................................6\n\
    \   3. EPP Command Mapping .............................................6\n  \
    \    3.1. EPP Query Commands .........................................7\n    \
    \       3.1.1. EPP <check> Command .................................7\n      \
    \     3.1.2. EPP <info> Command ..................................9\n        \
    \   3.1.3. EPP <transfer> Query Command .......................11\n      3.2.\
    \ EPP Transform Commands ....................................11\n           3.2.1.\
    \ EPP <create> Command ...............................12\n           3.2.2. EPP\
    \ <delete> Command ...............................13\n           3.2.3. EPP <renew>\
    \ Command ................................15\n           3.2.4. EPP <transfer>\
    \ Command .............................15\n           3.2.5. EPP <update> Command\
    \ ...............................15\n      3.3. Offline Review of Requested Actions\
    \ .......................17\n   4. Formal Syntax ..................................................19\n\
    \   5. Internationalization Considerations ............................25\n  \
    \ 6. IANA Considerations ............................................25\n   7.\
    \ Security Considerations ........................................26\n   8. Acknowledgements\
    \ ...............................................26\n   9. References .....................................................26\n\
    \      9.1. Normative References ......................................26\n  \
    \    9.2. Informative References ....................................27\n   Appendix\
    \ A.  Changes from RFC 4932 ................................29\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes an Internet host name mapping for\
    \ version 1.0\n   of the Extensible Provisioning Protocol (EPP).  This mapping\
    \ is\n   specified using the Extensible Markup Language (XML) 1.0 as described\n\
    \   in [W3C.REC-xml-20040204] and XML Schema notation as described in\n   [W3C.REC-xmlschema-1-20041028]\
    \ and [W3C.REC-xmlschema-2-20041028].\n   This document obsoletes RFC 4932 [RFC4932].\n\
    \   [RFC5730] provides a complete description of EPP command and response\n  \
    \ structures.  A thorough understanding of the base protocol\n   specification\
    \ is necessary to understand the mapping described in\n   this document.\n   XML\
    \ is case sensitive.  Unless stated otherwise, XML specifications\n   and examples\
    \ provided in this document MUST be interpreted in the\n   character case presented\
    \ to develop a conforming implementation.\n"
- title: 1.1.  Relationship of Host Objects and Domain Objects
  contents:
  - "1.1.  Relationship of Host Objects and Domain Objects\n   This document assumes\
    \ that host name objects have a subordinate\n   relationship to a superordinate\
    \ domain name object.  For example,\n   host name \"ns1.example.com\" has a subordinate\
    \ relationship to domain\n   name \"example.com\".  EPP actions (such as object\
    \ transfers) that do\n   not preserve this relationship MUST be explicitly disallowed.\n\
    \   A host name object can be created in a repository for which no\n   superordinate\
    \ domain name object exists.  For example, host name\n   \"ns1.example.com\" can\
    \ be created in the \".example\" repository so that\n   DNS domains in \".example\"\
    \ can be delegated to the host.  Such hosts\n   are described as \"external\"\
    \ hosts in this specification since the\n   name of the host does not belong to\
    \ the namespace of the repository\n   in which the host is being used for delegation\
    \ purposes.\n   Whether a host is external or internal relates to the repository\
    \ in\n   which the host is being used for delegation purposes.  An internal\n\
    \   host is subordinate if the name of the host belongs to the domain\n   within\
    \ the repository in which the host is being used for delegation\n   purposes.\
    \  For example, host ns1.example1.com is a subordinate host\n   of domain example1.com,\
    \ but it is not a subordinate host of domain\n   example2.com. ns1.example1.com\
    \ can be used as a name server for\n   example2.com.  In this case, ns1.example1.com\
    \ MUST be treated as an\n   internal host, subject to the rules governing operations\
    \ on\n   subordinate hosts within the same repository.\n"
- title: 1.2.  Conventions Used in This Document
  contents:
  - "1.2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n   In examples, \"C:\" represents lines sent by a protocol client\
    \ and \"S:\"\n   represents lines returned by a protocol server.  Indentation\
    \ and\n   white space in examples are provided only to illustrate element\n  \
    \ relationships and are not a REQUIRED feature of this protocol.\n"
- title: 2.  Object Attributes
  contents:
  - "2.  Object Attributes\n   An EPP host object has attributes and associated values\
    \ that can be\n   viewed and modified by the sponsoring client or the server.\
    \  This\n   section describes each attribute type in detail.  The formal syntax\n\
    \   for the attribute values described here can be found in the \"Formal\n   Syntax\"\
    \ section of this document and in the appropriate normative\n   references.\n"
- title: 2.1.  Host Names
  contents:
  - "2.1.  Host Names\n   The syntax for host names described in this document MUST\
    \ conform to\n   [RFC0952] as updated by [RFC1123].  At the time of this writing,\
    \ RFC\n   3490 [RFC3490] describes a standard to use certain ASCII name labels\n\
    \   to represent non-ASCII name labels.  These conformance requirements\n   might\
    \ change in the future as a result of progressing work in\n   developing standards\
    \ for internationalized host names.\n"
- title: 2.2.  Client Identifiers
  contents:
  - "2.2.  Client Identifiers\n   All EPP clients are identified by a server-unique\
    \ identifier.  Client\n   identifiers conform to the \"clIDType\" syntax described\
    \ in [RFC5730].\n"
- title: 2.3.  Status Values
  contents:
  - "2.3.  Status Values\n   A host object MUST always have at least one associated\
    \ status value.\n   Status values MAY be set only by the client that sponsors\
    \ a host\n   object and by the server on which the object resides.  A client can\n\
    \   change the status of a host object using the EPP <update> command.\n   Each\
    \ status value MAY be accompanied by a string of human-readable\n   text that\
    \ describes the rationale for the status applied to the\n   object.\n   A client\
    \ MUST NOT alter status values set by the server.  A server\n   MAY alter or override\
    \ status values set by a client, subject to local\n   server policies.  The status\
    \ of an object MAY change as a result of\n   either a client-initiated transform\
    \ command or an action performed by\n   a server operator.\n   Status values that\
    \ can be added or removed by a client are prefixed\n   with \"client\".  Corresponding\
    \ status values that can be added or\n   removed by a server are prefixed with\
    \ \"server\".  Status values that\n   do not begin with either \"client\" or \"\
    server\" are server-managed.\n   Status Value Descriptions:\n   -  clientDeleteProhibited,\
    \ serverDeleteProhibited\n      Requests to delete the object MUST be rejected.\n\
    \   -  clientUpdateProhibited, serverUpdateProhibited\n      Requests to update\
    \ the object (other than to remove this status)\n      MUST be rejected.\n   -\
    \  linked\n      The host object has at least one active association with another\n\
    \      object, such as a domain object.  Servers SHOULD provide services\n   \
    \   to determine existing object associations.\n   -  ok\n      This is the normal\
    \ status value for an object that has no pending\n      operations or prohibitions.\
    \  This value is set and removed by the\n      server as other status values are\
    \ added or removed.\n   -  pendingCreate, pendingDelete, pendingTransfer, pendingUpdate\n\
    \      A transform command has been processed for the object (or in the\n    \
    \  case of a <transfer> command, for the host object's superordinate\n      domain\
    \ object), but the action has not been completed by the\n      server.  Server\
    \ operators can delay action completion for a\n      variety of reasons, such\
    \ as to allow for human review or third-\n      party action.  A transform command\
    \ that is processed, but whose\n      requested action is pending, is noted with\
    \ response code 1001.\n   When the requested action has been completed, the pendingCreate,\n\
    \   pendingDelete, pendingTransfer, or pendingUpdate status value MUST be\n  \
    \ removed.  All clients involved in the transaction MUST be notified\n   using\
    \ a service message that the action has been completed and that\n   the status\
    \ of the object has changed.\n   \"ok\" status MAY only be combined with \"linked\"\
    \ status.\n   \"linked\" status MAY be combined with any status.\n   \"pendingDelete\"\
    \ status MUST NOT be combined with either\n   \"clientDeleteProhibited\" or \"\
    serverDeleteProhibited\" status.\n   \"pendingUpdate\" status MUST NOT be combined\
    \ with either\n   \"clientUpdateProhibited\" or \"serverUpdateProhibited\" status.\n\
    \   The pendingCreate, pendingDelete, pendingTransfer, and pendingUpdate\n   status\
    \ values MUST NOT be combined with each other.\n   Other status combinations not\
    \ expressly prohibited MAY be used.\n"
- title: 2.4.  Dates and Times
  contents:
  - "2.4.  Dates and Times\n   Date and time attribute values MUST be represented\
    \ in Universal\n   Coordinated Time (UTC) using the Gregorian calendar.  The extended\n\
    \   date-time form using upper case \"T\" and \"Z\" characters defined in\n  \
    \ [W3C.REC-xmlschema-2-20041028] MUST be used to represent date-time\n   values,\
    \ as XML Schema does not support truncated date-time forms or\n   lower case \"\
    T\" and \"Z\" characters.\n"
- title: 2.5.  IP Addresses
  contents:
  - "2.5.  IP Addresses\n   The syntax for IPv4 addresses described in this document\
    \ MUST conform\n   to [RFC0791].  The syntax for IPv6 addresses described in this\n\
    \   document MUST conform to [RFC4291].  Practical considerations for\n   publishing\
    \ IPv6 address information in zone files are documented in\n   [RFC2874] and [RFC3596].\
    \  A server MAY reject IP addresses that have\n   not been allocated for public\
    \ use by IANA.  When a host object is\n   provisioned for use as a DNS name server,\
    \ IP addresses SHOULD be\n   required only as needed to generate DNS glue records.\n"
- title: 3.  EPP Command Mapping
  contents:
  - "3.  EPP Command Mapping\n   A detailed description of the EPP syntax and semantics\
    \ can be found\n   in [RFC5730].  The command mappings described here are specifically\n\
    \   for use in provisioning and managing Internet host names via EPP.\n"
- title: 3.1.  EPP Query Commands
  contents:
  - "3.1.  EPP Query Commands\n   EPP provides two commands to retrieve host information:\
    \ <check> to\n   determine if a host object can be provisioned within a repository,\n\
    \   and <info> to retrieve detailed information associated with a host\n   object.\n"
- title: 3.1.1.  EPP <check> Command
  contents:
  - "3.1.1.  EPP <check> Command\n   The EPP <check> command is used to determine\
    \ if an object can be\n   provisioned within a repository.  It provides a hint\
    \ that allows a\n   client to anticipate the success or failure of provisioning\
    \ an object\n   using the <create> command, as object-provisioning requirements\
    \ are\n   ultimately a matter of server policy.\n   In addition to the standard\
    \ EPP command elements, the <check> command\n   MUST contain a <host:check> element\
    \ that identifies the host\n   namespace.  The <host:check> element contains the\
    \ following child\n   elements:\n   -  One or more <host:name> elements that contain\
    \ the fully qualified\n      names of the host objects to be queried.\n   Example\
    \ <check> command:\n   C:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"\
    no\"?>\n   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   C:  <command>\n\
    \   C:    <check>\n   C:      <host:check\n   C:       xmlns:host=\"urn:ietf:params:xml:ns:host-1.0\"\
    >\n   C:        <host:name>ns1.example.com</host:name>\n   C:        <host:name>ns2.example.com</host:name>\n\
    \   C:        <host:name>ns3.example.com</host:name>\n   C:      </host:check>\n\
    \   C:    </check>\n   C:    <clTRID>ABC-12345</clTRID>\n   C:  </command>\n \
    \  C:</epp>\n   When a <check> command has been processed successfully, the EPP\n\
    \   <resData> element MUST contain a child <host:chkData> element that\n   identifies\
    \ the host namespace.  The <host:chkData> element contains\n   one or more <host:cd>\
    \ elements that contain the following child\n   elements:\n   -  A <host:name>\
    \ element that contains the fully qualified name of\n      the queried host object.\
    \  This element MUST contain an \"avail\"\n      attribute whose value indicates\
    \ object availability (can it be\n      provisioned or not) at the moment the\
    \ <check> command was\n      completed.  A value of \"1\" or \"true\" means that\
    \ the object can be\n      provisioned.  A value of \"0\" or \"false\" means that\
    \ the object\n      cannot be provisioned.\n   -  An OPTIONAL <host:reason> element\
    \ that MAY be provided when an\n      object cannot be provisioned.  If present,\
    \ this element contains\n      server-specific text to help explain why the object\
    \ cannot be\n      provisioned.  This text MUST be represented in the response\n\
    \      language previously negotiated with the client; an OPTIONAL \"lang\"\n\
    \      attribute MAY be present to identify the language if the\n      negotiated\
    \ value is something other than the default value of \"en\"\n      (English).\n\
    \   Example <check> response:\n   S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"\
    no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   S:  <response>\n\
    \   S:    <result code=\"1000\">\n   S:      <msg>Command completed successfully</msg>\n\
    \   S:    </result>\n   S:    <resData>\n   S:      <host:chkData\n   S:     \
    \  xmlns:host=\"urn:ietf:params:xml:ns:host-1.0\">\n   S:        <host:cd>\n \
    \  S:          <host:name avail=\"1\">ns1.example.com</host:name>\n   S:     \
    \   </host:cd>\n   S:        <host:cd>\n   S:          <host:name avail=\"0\"\
    >ns2.example2.com</host:name>\n   S:          <host:reason>In use</host:reason>\n\
    \   S:        </host:cd>\n   S:        <host:cd>\n   S:          <host:name avail=\"\
    1\">ns3.example3.com</host:name>\n   S:        </host:cd>\n   S:      </host:chkData>\n\
    \   S:    </resData>\n   S:    <trID>\n   S:      <clTRID>ABC-12345</clTRID>\n\
    \   S:      <svTRID>54322-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n\
    \   S:</epp>\n   An EPP error response MUST be returned if a <check> command cannot\
    \ be\n   processed for any reason.\n"
- title: 3.1.2.  EPP <info> Command
  contents:
  - "3.1.2.  EPP <info> Command\n   The EPP <info> command is used to retrieve information\
    \ associated\n   with a host object.  In addition to the standard EPP command\n\
    \   elements, the <info> command MUST contain a <host:info> element that\n   identifies\
    \ the host namespace.  The <host:info> element contains the\n   following child\
    \ elements:\n   -  A <host:name> element that contains the fully qualified name\
    \ of\n      the host object for which information is requested.\n   Example <info>\
    \ command:\n   C:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n\
    \   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   C:  <command>\n   C:\
    \    <info>\n   C:      <host:info\n   C:       xmlns:host=\"urn:ietf:params:xml:ns:host-1.0\"\
    >\n   C:        <host:name>ns1.example.com</host:name>\n   C:      </host:info>\n\
    \   C:    </info>\n   C:    <clTRID>ABC-12345</clTRID>\n   C:  </command>\n  \
    \ C:</epp>\n   When an <info> command has been processed successfully, the EPP\n\
    \   <resData> element MUST contain a child <host:infData> element that\n   identifies\
    \ the host namespace.  The <host:infData> element contains\n   the following child\
    \ elements:\n   -  A <host:name> element that contains the fully qualified name\
    \ of\n      the host object.\n   -  A <host:roid> element that contains the Repository\
    \ Object\n      IDentifier assigned to the host object when the object was\n \
    \     created.\n   -  One or more <host:status> elements that describe the status\
    \ of the\n      host object.\n   -  Zero or more <host:addr> elements that contain\
    \ the IP addresses\n      associated with the host object.\n   -  A <host:clID>\
    \ element that contains the identifier of the\n      sponsoring client.\n   -\
    \  A <host:crID> element that contains the identifier of the client\n      that\
    \ created the host object.\n   -  A <host:crDate> element that contains the date\
    \ and time of host-\n      object creation.\n   -  A <host:upID> element that\
    \ contains the identifier of the client\n      that last updated the host object.\
    \  This element MUST NOT be\n      present if the host object has never been modified.\n\
    \   -  A <host:upDate> element that contains the date and time of the\n      most\
    \ recent host-object modification.  This element MUST NOT be\n      present if\
    \ the host object has never been modified.\n   -  A <host:trDate> element that\
    \ contains the date and time of the\n      most recent successful host-object\
    \ transfer.  This element MUST\n      NOT be provided if the host object has never\
    \ been transferred.\n      Note that host objects MUST NOT be transferred directly;\
    \ host\n      objects MUST be transferred implicitly when the host object's\n\
    \      superordinate domain object is transferred.  Host objects that are\n  \
    \    subject to transfer when transferring a domain object are listed\n      in\
    \ the response to an EPP <info> command performed on the domain\n      object.\n\
    \   Example <info> response:\n   S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"\
    no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   S:  <response>\n\
    \   S:    <result code=\"1000\">\n   S:      <msg>Command completed successfully</msg>\n\
    \   S:    </result>\n   S:    <resData>\n   S:      <host:infData\n   S:     \
    \  xmlns:host=\"urn:ietf:params:xml:ns:host-1.0\">\n   S:        <host:name>ns1.example.com</host:name>\n\
    \   S:        <host:roid>NS1_EXAMPLE1-REP</host:roid>\n   S:        <host:status\
    \ s=\"linked\"/>\n   S:        <host:status s=\"clientUpdateProhibited\"/>\n \
    \  S:        <host:addr ip=\"v4\">192.0.2.2</host:addr>\n   S:        <host:addr\
    \ ip=\"v4\">192.0.2.29</host:addr>\n   S:        <host:addr ip=\"v6\">1080:0:0:0:8:800:200C:417A</host:addr>\n\
    \   S:        <host:clID>ClientY</host:clID>\n   S:        <host:crID>ClientX</host:crID>\n\
    \   S:        <host:crDate>1999-04-03T22:00:00.0Z</host:crDate>\n   S:       \
    \ <host:upID>ClientX</host:upID>\n   S:        <host:upDate>1999-12-03T09:00:00.0Z</host:upDate>\n\
    \   S:        <host:trDate>2000-04-08T09:00:00.0Z</host:trDate>\n   S:      </host:infData>\n\
    \   S:    </resData>\n   S:    <trID>\n   S:      <clTRID>ABC-12345</clTRID>\n\
    \   S:      <svTRID>54322-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n\
    \   S:</epp>\n   An EPP error response MUST be returned if an <info> command cannot\
    \ be\n   processed for any reason.\n"
- title: 3.1.3.  EPP <transfer> Query Command
  contents:
  - "3.1.3.  EPP <transfer> Query Command\n   Transfer semantics do not directly apply\
    \ to host objects, so there is\n   no mapping defined for the EPP <transfer> query\
    \ command.\n"
- title: 3.2.  EPP Transform Commands
  contents:
  - "3.2.  EPP Transform Commands\n   EPP provides three commands to transform host\
    \ objects: <create> to\n   create an instance of a host object, <delete> to delete\
    \ an instance\n   of a host object, and <update> to change information associated\
    \ with\n   a host object.  This document does not define host-object mappings\n\
    \   for the EPP <renew> and <transfer> commands.\n   Transform commands are typically\
    \ processed and completed in real\n   time.  Server operators MAY receive and\
    \ process transform commands\n   but defer completing the requested action if\
    \ human or third-party\n   review is required before the requested action can\
    \ be completed.  In\n   such situations, the server MUST return a 1001 response\
    \ code to the\n   client to note that the command has been received and processed\
    \ but\n   that the requested action is pending.  The server MUST also manage\n\
    \   the status of the object that is the subject of the command to\n   reflect\
    \ the initiation and completion of the requested action.  Once\n   the action\
    \ has been completed, all clients involved in the\n   transaction MUST be notified\
    \ using a service message that the action\n   has been completed and that the\
    \ status of the object has changed.\n   Other notification methods MAY be used\
    \ in addition to the required\n   service message.\n   Server operators SHOULD\
    \ confirm that a client is authorized to\n   perform a transform command on a\
    \ given object.  Any attempt to\n   transform an object by an unauthorized client\
    \ MUST be rejected, and\n   the server MUST return a 2201 response code to the\
    \ client to note\n   that the client lacks privileges to execute the requested\
    \ command.\n"
- title: 3.2.1.  EPP <create> Command
  contents:
  - "3.2.1.  EPP <create> Command\n   The EPP <create> command provides a transform\
    \ operation that allows a\n   client to create a host object.  In addition to\
    \ the standard EPP\n   command elements, the <create> command MUST contain a <host:create>\n\
    \   element that identifies the host namespace.  The <host:create>\n   element\
    \ contains the following child elements:\n   -  A <host:name> element that contains\
    \ the fully qualified name of\n      the host object to be created.\n   -  Zero\
    \ or more <host:addr> elements that contain the IP addresses to\n      be associated\
    \ with the host.  Each element MAY contain an \"ip\"\n      attribute to identify\
    \ the IP address format.  Attribute value \"v4\"\n      is used to note IPv4 address\
    \ format.  Attribute value \"v6\" is used\n      to note IPv6 address format.\
    \  If the \"ip\" attribute is not\n      specified, \"v4\" is the default attribute\
    \ value.\n   Hosts can be provisioned for use as name servers in the Domain Name\n\
    \   System (DNS), described in [RFC1034] and [RFC1035].  Hosts\n   provisioned\
    \ as name servers might be subject to server-operator\n   policies that require\
    \ or prohibit specification of IP addresses,\n   depending on the name of the\
    \ host and the namespace in which the\n   server will be used as a name server.\
    \  When provisioned for use as a\n   name server, IP addresses are REQUIRED only\
    \ as needed to produce DNS\n   glue records.  For example, if the server is authoritative\
    \ for the\n   \"com\" namespace and the name of the server is \"ns1.example.net\"\
    , the\n   server is not required to produce DNS glue records for the name\n  \
    \ server, and IP addresses for the server are not required by the DNS.\n   If\
    \ the host name exists in a namespace for which the server is\n   authoritative,\
    \ then the superordinate domain of the host MUST be\n   known to the server before\
    \ the host object can be created.\n   Example <create> command:\n   C:<?xml version=\"\
    1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\"\
    >\n   C:  <command>\n   C:    <create>\n   C:      <host:create\n   C:       xmlns:host=\"\
    urn:ietf:params:xml:ns:host-1.0\">\n   C:        <host:name>ns1.example.com</host:name>\n\
    \   C:        <host:addr ip=\"v4\">192.0.2.2</host:addr>\n   C:        <host:addr\
    \ ip=\"v4\">192.0.2.29</host:addr>\n   C:        <host:addr ip=\"v6\">1080:0:0:0:8:800:200C:417A</host:addr>\n\
    \   C:      </host:create>\n   C:    </create>\n   C:    <clTRID>ABC-12345</clTRID>\n\
    \   C:  </command>\n   C:</epp>\n   When a <create> command has been processed\
    \ successfully, the EPP\n   <resData> element MUST contain a child <host:creData>\
    \ element that\n   identifies the host namespace.  The <host:creData> element\
    \ contains\n   the following child elements:\n   -  A <host:name> element that\
    \ contains the fully qualified name of\n      the host object.\n   -  A <host:crDate>\
    \ element that contains the date and time of host-\n      object creation.\n \
    \  Example <create> response:\n   S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"\
    no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   S:  <response>\n\
    \   S:    <result code=\"1000\">\n   S:      <msg>Command completed successfully</msg>\n\
    \   S:    </result>\n   S:    <resData>\n   S:      <host:creData\n   S:     \
    \  xmlns:host=\"urn:ietf:params:xml:ns:host-1.0\">\n   S:        <host:name>ns1.example.com</host:name>\n\
    \   S:        <host:crDate>1999-04-03T22:00:00.0Z</host:crDate>\n   S:      </host:creData>\n\
    \   S:    </resData>\n   S:    <trID>\n   S:      <clTRID>ABC-12345</clTRID>\n\
    \   S:      <svTRID>54322-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n\
    \   S:</epp>\n   An EPP error response MUST be returned if a <create> command\
    \ cannot\n   be processed for any reason.\n"
- title: 3.2.2.  EPP <delete> Command
  contents:
  - "3.2.2.  EPP <delete> Command\n   The EPP <delete> command provides a transform\
    \ operation that allows a\n   client to delete a host object.  In addition to\
    \ the standard EPP\n   command elements, the <delete> command MUST contain a <host:delete>\n\
    \   element that identifies the host namespace.  The <host:delete>\n   element\
    \ contains the following child elements:\n   -  A <host:name> element that contains\
    \ the fully qualified name of\n      the host object to be deleted.\n   A host\
    \ name object SHOULD NOT be deleted if the host object is\n   associated with\
    \ any other object.  For example, if the host object is\n   associated with a\
    \ domain object, the host object SHOULD NOT be\n   deleted until the existing\
    \ association has been broken.  Deleting a\n   host object without first breaking\
    \ existing associations can cause\n   DNS resolution failure for domain objects\
    \ that refer to the deleted\n   host object.\n   Example <delete> command:\n \
    \  C:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   C:<epp xmlns=\"\
    urn:ietf:params:xml:ns:epp-1.0\">\n   C:  <command>\n   C:    <delete>\n   C:\
    \      <host:delete\n   C:       xmlns:host=\"urn:ietf:params:xml:ns:host-1.0\"\
    >\n   C:        <host:name>ns1.example.com</host:name>\n   C:      </host:delete>\n\
    \   C:    </delete>\n   C:    <clTRID>ABC-12345</clTRID>\n   C:  </command>\n\
    \   C:</epp>\n   When a <delete> command has been processed successfully, a server\n\
    \   MUST respond with an EPP response with no <resData> element.\n   Example <delete>\
    \ response:\n   S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n\
    \   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   S:  <response>\n   S:\
    \    <result code=\"1000\">\n   S:      <msg>Command completed successfully</msg>\n\
    \   S:    </result>\n   S:    <trID>\n   S:      <clTRID>ABC-12345</clTRID>\n\
    \   S:      <svTRID>54321-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n\
    \   S:</epp>\n   An EPP error response MUST be returned if a <delete> command\
    \ cannot\n   be processed for any reason.\n"
- title: 3.2.3.  EPP <renew> Command
  contents:
  - "3.2.3.  EPP <renew> Command\n   Renewal semantics do not apply to host objects,\
    \ so there is no\n   mapping defined for the EPP <renew> command.\n"
- title: 3.2.4.  EPP <transfer> Command
  contents:
  - "3.2.4.  EPP <transfer> Command\n   Transfer semantics do not directly apply to\
    \ host objects, so there is\n   no mapping defined for the EPP <transfer> command.\
    \  Host objects are\n   subordinate to an existing superordinate domain object\
    \ and, as such,\n   they are subject to transfer when a domain object is transferred.\n"
- title: 3.2.5.  EPP <update> Command
  contents:
  - "3.2.5.  EPP <update> Command\n   The EPP <update> command provides a transform\
    \ operation that allows a\n   client to modify the attributes of a host object.\
    \  In addition to the\n   standard EPP command elements, the <update> command\
    \ MUST contain a\n   <host:update> element that identifies the host namespace.\
    \  The <host:\n   update> element contains the following child elements:\n   -\
    \  A <host:name> element that contains the fully qualified name of\n      the\
    \ host object to be updated.\n   -  An OPTIONAL <host:add> element that contains\
    \ attribute values to\n      be added to the object.\n   -  An OPTIONAL <host:rem>\
    \ element that contains attribute values to\n      be removed from the object.\n\
    \   -  An OPTIONAL <host:chg> element that contains object attribute\n      values\
    \ to be changed.\n   At least one <host:add>, <host:rem>, or <host:chg> element\
    \ MUST be\n   provided if the command is not being extended.  All of these elements\n\
    \   MAY be omitted if an <update> extension is present.  The <host:add>\n   and\
    \ <host:rem> elements contain the following child elements:\n   -  One or more\
    \ <host:addr> elements that contain IP addresses to be\n      associated with\
    \ or removed from the host object.  IP address\n      restrictions described in\
    \ the <create> command mapping apply here\n      as well.\n   -  One or more <host:status>\
    \ elements that contain status values to\n      be associated with or removed\
    \ from the object.  When specifying a\n      value to be removed, only the attribute\
    \ value is significant;\n      element text is not required to match a value for\
    \ removal.\n   A <host:chg> element contains the following child elements:\n \
    \  -  A <host:name> element that contains a new fully qualified host\n      name\
    \ by which the host object will be known.\n   Host name changes MAY require the\
    \ addition or removal of IP addresses\n   to be accepted by the server.  IP address\
    \ association MAY be subject\n   to server policies for provisioning hosts as\
    \ name servers.\n   Host name changes can have an impact on associated objects\
    \ that refer\n   to the host object.  A host name change SHOULD NOT require additional\n\
    \   updates of associated objects to preserve existing associations, with\n  \
    \ one exception: changing an external host object that has associations\n   with\
    \ objects that are sponsored by a different client.  Attempts to\n   update such\
    \ hosts directly MUST fail with EPP error code 2305.  The\n   change can be provisioned\
    \ by creating a new external host with a new\n   name and any needed new attributes,\
    \ and subsequently updating the\n   other objects sponsored by the client.\n \
    \  Example <update> command:\n   C:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"\
    no\"?>\n   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   C:  <command>\n\
    \   C:    <update>\n   C:      <host:update\n   C:       xmlns:host=\"urn:ietf:params:xml:ns:host-1.0\"\
    >\n   C:        <host:name>ns1.example.com</host:name>\n   C:        <host:add>\n\
    \   C:          <host:addr ip=\"v4\">192.0.2.22</host:addr>\n   C:          <host:status\
    \ s=\"clientUpdateProhibited\"/>\n   C:        </host:add>\n   C:        <host:rem>\n\
    \   C:          <host:addr ip=\"v6\">1080:0:0:0:8:800:200C:417A</host:addr>\n\
    \   C:        </host:rem>\n   C:        <host:chg>\n   C:          <host:name>ns2.example.com</host:name>\n\
    \   C:        </host:chg>\n   C:      </host:update>\n   C:    </update>\n   C:\
    \    <clTRID>ABC-12345</clTRID>\n   C:  </command>\n   C:</epp>\n   When an <update>\
    \ command has been processed successfully, a server\n   MUST respond with an EPP\
    \ response with no <resData> element.\n   Example <update> response:\n   S:<?xml\
    \ version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\"\
    >\n   S:  <response>\n   S:    <result code=\"1000\">\n   S:      <msg>Command\
    \ completed successfully</msg>\n   S:    </result>\n   S:    <trID>\n   S:   \
    \   <clTRID>ABC-12345</clTRID>\n   S:      <svTRID>54321-XYZ</svTRID>\n   S: \
    \   </trID>\n   S:  </response>\n   S:</epp>\n   An EPP error response MUST be\
    \ returned if an <update> command could\n   not be processed for any reason.\n"
- title: 3.3.  Offline Review of Requested Actions
  contents:
  - "3.3.  Offline Review of Requested Actions\n   Commands are processed by a server\
    \ in the order they are received\n   from a client.  Though an immediate response\
    \ confirming receipt and\n   processing of the command is produced by the server,\
    \ a server\n   operator MAY perform an offline review of requested transform\n\
    \   commands before completing the requested action.  In such situations,\n  \
    \ the response from the server MUST clearly note that the transform\n   command\
    \ has been received and processed, but the requested action is\n   pending.  The\
    \ status of the corresponding object MUST clearly reflect\n   processing of the\
    \ pending action.  The server MUST notify the client\n   when offline processing\
    \ of the action has been completed.\n   Examples describing a <create> command\
    \ that requires offline review\n   are included here.  Note the result code and\
    \ message returned in\n   response to the <create> command.\n   S:<?xml version=\"\
    1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\"\
    >\n   S:  <response>\n   S:    <result code=\"1001\">\n   S:      <msg>Command\
    \ completed successfully; action pending</msg>\n   S:    </result>\n   S:    <resData>\n\
    \   S:      <host:creData\n   S:       xmlns:host=\"urn:ietf:params:xml:ns:host-1.0\"\
    >\n   S:        <host:name>ns1.example.com</host:name>\n   S:        <host:crDate>1999-04-03T22:00:00.0Z</host:crDate>\n\
    \   S:      </host:creData>\n   S:    </resData>\n   S:    <trID>\n   S:     \
    \ <clTRID>ABC-12345</clTRID>\n   S:      <svTRID>54322-XYZ</svTRID>\n   S:   \
    \ </trID>\n   S:  </response>\n   S:</epp>\n   The status of the host object after\
    \ returning this response MUST\n   include \"pendingCreate\".  The server operator\
    \ reviews the request\n   offline and informs the client of the outcome of the\
    \ review either by\n   queuing a service message for retrieval via the <poll>\
    \ command or by\n   using an out-of-band mechanism to inform the client of the\
    \ request.\n   The service message MUST contain text that describes the notification\n\
    \   in the child <msg> element of the response <msgQ> element.  In\n   addition,\
    \ the EPP <resData> element MUST contain a child <host:\n   panData> element that\
    \ identifies the host namespace.  The <host:\n   panData> element contains the\
    \ following child elements:\n   -  A <host:name> element that contains the fully\
    \ qualified name of\n      the host object.  The <host:name> element contains\
    \ a REQUIRED\n      \"paResult\" attribute.  A positive boolean value indicates\
    \ that the\n      request has been approved and completed.  A negative boolean\
    \ value\n      indicates that the request has been denied and the requested\n\
    \      action has not been taken.\n   -  A <host:paTRID> element that contains\
    \ the client transaction\n      identifier and server transaction identifier returned\
    \ with the\n      original response to process the command.  The client transaction\n\
    \      identifier is OPTIONAL and will only be returned if the client\n      provided\
    \ an identifier with the original <create> command.\n   -  A <host:paDate> element\
    \ that contains the date and time describing\n      when review of the requested\
    \ action was completed.\n   Example \"review completed\" service message:\n  \
    \ S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   S:<epp xmlns=\"\
    urn:ietf:params:xml:ns:epp-1.0\">\n   S:  <response>\n   S:    <result code=\"\
    1301\">\n   S:      <msg>Command completed successfully; ack to dequeue</msg>\n\
    \   S:    </result>\n   S:    <msgQ count=\"5\" id=\"12345\">\n   S:      <qDate>1999-04-04T22:01:00.0Z</qDate>\n\
    \   S:      <msg>Pending action completed successfully.</msg>\n   S:    </msgQ>\n\
    \   S:    <resData>\n   S:      <host:panData\n   S:       xmlns:host=\"urn:ietf:params:xml:ns:host-1.0\"\
    >\n   S:        <host:name paResult=\"1\">ns1.example.com</host:name>\n   S: \
    \       <host:paTRID>\n   S:          <clTRID>ABC-12345</clTRID>\n   S:      \
    \    <svTRID>54322-XYZ</svTRID>\n   S:        </host:paTRID>\n   S:        <host:paDate>1999-04-04T22:00:00.0Z</host:paDate>\n\
    \   S:      </host:panData>\n   S:    </resData>\n   S:    <trID>\n   S:     \
    \ <clTRID>BCD-23456</clTRID>\n   S:      <svTRID>65432-WXY</svTRID>\n   S:   \
    \ </trID>\n   S:  </response>\n   S:</epp>\n"
- title: 4.  Formal Syntax
  contents:
  - "4.  Formal Syntax\n   An EPP object mapping is specified in XML Schema notation.\
    \  The\n   formal syntax presented here is a complete schema representation of\n\
    \   the object mapping suitable for automated validation of EPP XML\n   instances.\
    \  The BEGIN and END tags are not part of the schema; they\n   are used to note\
    \ the beginning and ending of the schema for URI\n   registration purposes.\n\
    \   Copyright (c) 2009 IETF Trust and the persons identified as authors\n   of\
    \ the code.  All rights reserved.\n   Redistribution and use in source and binary\
    \ forms, with or without\n   modification, are permitted provided that the following\
    \ conditions\n   are met:\n   o  Redistributions of source code must retain the\
    \ above copyright\n      notice, this list of conditions and the following disclaimer.\n\
    \   o  Redistributions in binary form must reproduce the above copyright\n   \
    \   notice, this list of conditions and the following disclaimer in\n      the\
    \ documentation and/or other materials provided with the\n      distribution.\n\
    \   o  Neither the name of Internet Society, IETF or IETF Trust, nor the\n   \
    \   names of specific contributors, may be used to endorse or promote\n      products\
    \ derived from this software without specific prior written\n      permission.\n\
    \   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n   \"\
    AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n   LIMITED\
    \ TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n   A PARTICULAR\
    \ PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n   OWNER OR CONTRIBUTORS\
    \ BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\
    \ DAMAGES (INCLUDING, BUT NOT\n   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\
    \ OR SERVICES; LOSS OF USE,\n   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\
    \ CAUSED AND ON ANY\n   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\
    \ OR TORT\n   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE\
    \ USE\n   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\
    \   BEGIN\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <schema targetNamespace=\"\
    urn:ietf:params:xml:ns:host-1.0\"\n          xmlns:host=\"urn:ietf:params:xml:ns:host-1.0\"\
    \n          xmlns:epp=\"urn:ietf:params:xml:ns:epp-1.0\"\n          xmlns:eppcom=\"\
    urn:ietf:params:xml:ns:eppcom-1.0\"\n          xmlns=\"http://www.w3.org/2001/XMLSchema\"\
    \n          elementFormDefault=\"qualified\">\n   <!--\n   Import common element\
    \ types.\n   -->\n    <import namespace=\"urn:ietf:params:xml:ns:eppcom-1.0\"\
    />\n    <import namespace=\"urn:ietf:params:xml:ns:epp-1.0\"/>\n    <annotation>\n\
    \      <documentation>\n        Extensible Provisioning Protocol v1.0\n      \
    \  host provisioning schema.\n      </documentation>\n    </annotation>\n   <!--\n\
    \   Child elements found in EPP commands.\n   -->\n    <element name=\"check\"\
    \ type=\"host:mNameType\"/>\n    <element name=\"create\" type=\"host:createType\"\
    />\n    <element name=\"delete\" type=\"host:sNameType\"/>\n    <element name=\"\
    info\" type=\"host:sNameType\"/>\n    <element name=\"update\" type=\"host:updateType\"\
    />\n   <!--\n   Child elements of the <create> command.\n   -->\n    <complexType\
    \ name=\"createType\">\n      <sequence>\n        <element name=\"name\" type=\"\
    eppcom:labelType\"/>\n        <element name=\"addr\" type=\"host:addrType\"\n\
    \         minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n      </sequence>\n    </complexType>\n\
    \    <complexType name=\"addrType\">\n      <simpleContent>\n        <extension\
    \ base=\"host:addrStringType\">\n          <attribute name=\"ip\" type=\"host:ipType\"\
    \n           default=\"v4\"/>\n        </extension>\n      </simpleContent>\n\
    \    </complexType>\n    <simpleType name=\"addrStringType\">\n      <restriction\
    \ base=\"token\">\n        <minLength value=\"3\"/>\n        <maxLength value=\"\
    45\"/>\n      </restriction>\n    </simpleType>\n    <simpleType name=\"ipType\"\
    >\n      <restriction base=\"token\">\n        <enumeration value=\"v4\"/>\n \
    \       <enumeration value=\"v6\"/>\n      </restriction>\n    </simpleType>\n\
    \   <!--\n   Child elements of the <delete> and <info> commands.\n   -->\n   \
    \ <complexType name=\"sNameType\">\n      <sequence>\n        <element name=\"\
    name\" type=\"eppcom:labelType\"/>\n      </sequence>\n    </complexType>\n  \
    \ <!--\n   Child element of commands that accept multiple names.\n   -->\n   \
    \ <complexType name=\"mNameType\">\n      <sequence>\n        <element name=\"\
    name\" type=\"eppcom:labelType\"\n         maxOccurs=\"unbounded\"/>\n      </sequence>\n\
    \    </complexType>\n   <!--\n   Child elements of the <update> command.\n   -->\n\
    \    <complexType name=\"updateType\">\n      <sequence>\n        <element name=\"\
    name\" type=\"eppcom:labelType\"/>\n        <element name=\"add\" type=\"host:addRemType\"\
    \n         minOccurs=\"0\"/>\n        <element name=\"rem\" type=\"host:addRemType\"\
    \n         minOccurs=\"0\"/>\n        <element name=\"chg\" type=\"host:chgType\"\
    \n         minOccurs=\"0\"/>\n      </sequence>\n    </complexType>\n   <!--\n\
    \   Data elements that can be added or removed.\n   -->\n    <complexType name=\"\
    addRemType\">\n      <sequence>\n        <element name=\"addr\" type=\"host:addrType\"\
    \n         minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n        <element name=\"\
    status\" type=\"host:statusType\"\n         minOccurs=\"0\" maxOccurs=\"7\"/>\n\
    \      </sequence>\n    </complexType>\n   <!--\n   Data elements that can be\
    \ changed.\n   -->\n    <complexType name=\"chgType\">\n      <sequence>\n   \
    \     <element name=\"name\" type=\"eppcom:labelType\"/>\n      </sequence>\n\
    \    </complexType>\n   <!--\n   Child response elements.\n   -->\n    <element\
    \ name=\"chkData\" type=\"host:chkDataType\"/>\n    <element name=\"creData\"\
    \ type=\"host:creDataType\"/>\n    <element name=\"infData\" type=\"host:infDataType\"\
    />\n    <element name=\"panData\" type=\"host:panDataType\"/>\n   <!--\n   <check>\
    \ response elements.\n   -->\n    <complexType name=\"chkDataType\">\n      <sequence>\n\
    \        <element name=\"cd\" type=\"host:checkType\"\n         maxOccurs=\"unbounded\"\
    />\n      </sequence>\n    </complexType>\n    <complexType name=\"checkType\"\
    >\n      <sequence>\n        <element name=\"name\" type=\"host:checkNameType\"\
    />\n        <element name=\"reason\" type=\"eppcom:reasonType\"\n         minOccurs=\"\
    0\"/>\n      </sequence>\n    </complexType>\n    <complexType name=\"checkNameType\"\
    >\n      <simpleContent>\n        <extension base=\"eppcom:labelType\">\n    \
    \      <attribute name=\"avail\" type=\"boolean\"\n           use=\"required\"\
    />\n        </extension>\n      </simpleContent>\n    </complexType>\n   <!--\n\
    \   <create> response elements.\n   -->\n    <complexType name=\"creDataType\"\
    >\n      <sequence>\n        <element name=\"name\" type=\"eppcom:labelType\"\
    />\n        <element name=\"crDate\" type=\"dateTime\"/>\n      </sequence>\n\
    \    </complexType>\n   <!--\n   <info> response elements.\n   -->\n    <complexType\
    \ name=\"infDataType\">\n      <sequence>\n        <element name=\"name\" type=\"\
    eppcom:labelType\"/>\n        <element name=\"roid\" type=\"eppcom:roidType\"\
    />\n        <element name=\"status\" type=\"host:statusType\"\n         maxOccurs=\"\
    7\"/>\n        <element name=\"addr\" type=\"host:addrType\"\n         minOccurs=\"\
    0\" maxOccurs=\"unbounded\"/>\n        <element name=\"clID\" type=\"eppcom:clIDType\"\
    />\n        <element name=\"crID\" type=\"eppcom:clIDType\"/>\n        <element\
    \ name=\"crDate\" type=\"dateTime\"/>\n        <element name=\"upID\" type=\"\
    eppcom:clIDType\"\n         minOccurs=\"0\"/>\n        <element name=\"upDate\"\
    \ type=\"dateTime\"\n         minOccurs=\"0\"/>\n        <element name=\"trDate\"\
    \ type=\"dateTime\"\n         minOccurs=\"0\"/>\n      </sequence>\n    </complexType>\n\
    \   <!--\n   Status is a combination of attributes and an optional human-readable\n\
    \   message that may be expressed in languages other than English.\n   -->\n \
    \   <complexType name=\"statusType\">\n      <simpleContent>\n        <extension\
    \ base=\"normalizedString\">\n          <attribute name=\"s\" type=\"host:statusValueType\"\
    \n           use=\"required\"/>\n          <attribute name=\"lang\" type=\"language\"\
    \n           default=\"en\"/>\n        </extension>\n      </simpleContent>\n\
    \    </complexType>\n    <simpleType name=\"statusValueType\">\n      <restriction\
    \ base=\"token\">\n        <enumeration value=\"clientDeleteProhibited\"/>\n \
    \       <enumeration value=\"clientUpdateProhibited\"/>\n        <enumeration\
    \ value=\"linked\"/>\n        <enumeration value=\"ok\"/>\n        <enumeration\
    \ value=\"pendingCreate\"/>\n        <enumeration value=\"pendingDelete\"/>\n\
    \        <enumeration value=\"pendingTransfer\"/>\n        <enumeration value=\"\
    pendingUpdate\"/>\n        <enumeration value=\"serverDeleteProhibited\"/>\n \
    \       <enumeration value=\"serverUpdateProhibited\"/>\n      </restriction>\n\
    \    </simpleType>\n   <!--\n   Pending action notification response elements.\n\
    \   -->\n    <complexType name=\"panDataType\">\n      <sequence>\n        <element\
    \ name=\"name\" type=\"host:paNameType\"/>\n        <element name=\"paTRID\" type=\"\
    epp:trIDType\"/>\n        <element name=\"paDate\" type=\"dateTime\"/>\n     \
    \ </sequence>\n    </complexType>\n    <complexType name=\"paNameType\">\n   \
    \   <simpleContent>\n        <extension base=\"eppcom:labelType\">\n         \
    \ <attribute name=\"paResult\" type=\"boolean\"\n           use=\"required\"/>\n\
    \        </extension>\n      </simpleContent>\n    </complexType>\n   <!--\n \
    \  End of schema.\n   -->\n   </schema>\n   END\n"
- title: 5.  Internationalization Considerations
  contents:
  - "5.  Internationalization Considerations\n   EPP is represented in XML, which\
    \ provides native support for encoding\n   information using the Unicode character\
    \ set and its more compact\n   representations including UTF-8.  Conformant XML\
    \ processors recognize\n   both UTF-8 and UTF-16 [RFC2781].  Though XML includes\
    \ provisions to\n   identify and use other character encodings through use of\
    \ an\n   \"encoding\" attribute in an <?xml?> declaration, use of UTF-8 is\n \
    \  RECOMMENDED in environments where parser encoding support\n   incompatibility\
    \ exists.\n   All date-time values presented via EPP MUST be expressed in Universal\n\
    \   Coordinated Time using the Gregorian calendar.  XML Schema allows use\n  \
    \ of time zone identifiers to indicate offsets from the zero meridian,\n   but\
    \ this option MUST NOT be used with EPP.  The extended date-time\n   form using\
    \ upper case \"T\" and \"Z\" characters defined in\n   [W3C.REC-xmlschema-2-20041028]\
    \ MUST be used to represent date-time\n   values, as XML Schema does not support\
    \ truncated date-time forms or\n   lower case \"T\" and \"Z\" characters.\n  \
    \ The syntax for domain and host names described in this document MUST\n   conform\
    \ to [RFC0952] and [RFC1123].  At the time of this writing, RFC\n   3490 [RFC3490]\
    \ describes a standard to use certain ASCII name labels\n   to represent non-ASCII\
    \ name labels.  These conformance requirements\n   might change as a result of\
    \ progressing work in developing standards\n   for internationalized host names.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   This document uses URNs to describe XML namespaces\
    \ and XML schemas\n   conforming to a registry mechanism described in [RFC3688].\
    \  Two URI\n   assignments have been registered by the IANA.\n   Registration\
    \ request for the host namespace:\n      URI: urn:ietf:params:xml:ns:host-1.0\n\
    \      Registrant Contact: See the \"Author's Address\" section of this\n    \
    \  document.\n      XML: None.  Namespace URIs do not represent an XML specification.\n\
    \   Registration request for the host XML schema:\n      URI: urn:ietf:params:xml:schema:host-1.0\n\
    \      Registrant Contact: See the \"Author's Address\" section of this\n    \
    \  document.\n      XML: See the \"Formal Syntax\" section of this document.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   The object mapping described in this document\
    \ does not provide any\n   security services or introduce any additional considerations\
    \ beyond\n   those described by [RFC5730] or those caused by the protocol layers\n\
    \   used by EPP.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   RFC 3732 is a product of the PROVREG working group,\
    \ which suggested\n   improvements and provided many invaluable comments.  The\
    \ author\n   wishes to acknowledge the efforts of WG chairs Edward Lewis and Jaap\n\
    \   Akkerhuis for their process and editorial contributions.  RFC 4932\n   and\
    \ this document are individual submissions, based on the work done\n   in RFC\
    \ 3732.\n   Specific suggestions that have been incorporated into this document\n\
    \   were provided by Chris Bason, Jordyn Buchanan, Dave Crocker, Anthony\n   Eden,\
    \ Sheer El-Showk, Klaus Malorny, Dan Manley, Michael Mealling,\n   Patrick Mevzek,\
    \ and Rick Wesson.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC0791]  Postel, J., \"Internet Protocol\",\
    \ STD 5, RFC 791,\n              September 1981.\n   [RFC0952]  Harrenstien, K.,\
    \ Stahl, M., and E. Feinler, \"DoD Internet\n              host table specification\"\
    , RFC 952, October 1985.\n   [RFC1034]  Mockapetris, P., \"Domain names - concepts\
    \ and facilities\",\n              STD 13, RFC 1034, November 1987.\n   [RFC1035]\
    \  Mockapetris, P., \"Domain names - implementation and\n              specification\"\
    , STD 13, RFC 1035, November 1987.\n   [RFC1123]  Braden, R., \"Requirements for\
    \ Internet Hosts - Application\n              and Support\", STD 3, RFC 1123,\
    \ October 1989.\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n\
    \              Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC3688]\
    \  Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n              January\
    \ 2004.\n   [RFC4291]  Hinden, R. and S. Deering, \"IP Version 6 Addressing\n\
    \              Architecture\", RFC 4291, February 2006.\n   [RFC5730]  Hollenbeck,\
    \ S., \"Extensible Provisioning Protocol (EPP)\",\n              STD 69, RFC 5730,\
    \ August 2009.\n   [W3C.REC-xml-20040204]\n              Sperberg-McQueen, C.,\
    \ Maler, E., Yergeau, F., Paoli, J.,\n              and T. Bray, \"Extensible\
    \ Markup Language (XML) 1.0 (Third\n              Edition)\", World Wide Web Consortium\
    \ FirstEdition REC-xml-\n              20040204, February 2004,\n            \
    \  <http://www.w3.org/TR/2004/REC-xml-20040204>.\n   [W3C.REC-xmlschema-1-20041028]\n\
    \              Maloney, M., Thompson, H., Mendelsohn, N., and D. Beech,\n    \
    \          \"XML Schema Part 1: Structures Second Edition\", World Wide\n    \
    \          Web Consortium Recommendation REC-xmlschema-1-20041028,\n         \
    \     October 2004,\n              <http://www.w3.org/TR/2004/REC-xmlschema-1-20041028>.\n\
    \   [W3C.REC-xmlschema-2-20041028]\n              Malhotra, A. and P. Biron, \"\
    XML Schema Part 2: Datatypes\n              Second Edition\", World Wide Web Consortium\n\
    \              Recommendation REC-xmlschema-2-20041028, October 2004,\n      \
    \        <http://www.w3.org/TR/2004/REC-xmlschema-2-20041028>.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [RFC2781]  Hoffman, P. and F. Yergeau, \"UTF-16,\
    \ an encoding of ISO\n              10646\", RFC 2781, February 2000.\n   [RFC2874]\
    \  Crawford, M. and C. Huitema, \"DNS Extensions to Support\n              IPv6\
    \ Address Aggregation and Renumbering\", RFC 2874,\n              July 2000.\n\
    \   [RFC3490]  Faltstrom, P., Hoffman, P., and A. Costello,\n              \"\
    Internationalizing Domain Names in Applications (IDNA)\",\n              RFC 3490,\
    \ March 2003.\n   [RFC3596]  Thomson, S., Huitema, C., Ksinant, V., and M. Souissi,\n\
    \              \"DNS Extensions to Support IP Version 6\", RFC 3596,\n       \
    \       October 2003.\n   [RFC4932]  Hollenbeck, S., \"Extensible Provisioning\
    \ Protocol (EPP)\n              Host Mapping\", RFC 4932, May 2007.\n"
- title: Appendix A.  Changes from RFC 4932
  contents:
  - "Appendix A.  Changes from RFC 4932\n   1.  Changed \"This document obsoletes\
    \ RFC 3732\" to \"This document\n       obsoletes RFC 4932\".\n   2.  Replaced\
    \ references to RFC 1886 with references to 3596.\n   3.  Removed references to\
    \ RFC 3152 since both it and 1886 have been\n       obsoleted by 3596.\n   4.\
    \  Replaced references to RFC 3732 with references to 4932.\n   5.  Replaced references\
    \ to RFC 4930 with references to 5730.\n   6.  Added \"Other notification methods\
    \ MAY be used in addition to the\n       required service message\" in Section\
    \ 3.2.\n   7.  Added 2201 response code text in Section 3.2.\n   8.  Added BSD\
    \ license text to XML schema section.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Scott Hollenbeck\n   VeriSign, Inc.\n   21345 Ridgetop Circle\n\
    \   Dulles, VA  20166-6503\n   US\n   EMail: shollenbeck@verisign.com\n"
