- title: __initial_text__
  contents:
  - '   X.400-MHS use of the X.500 Directory to support X.400-MHS Routing

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  This memo does not specify an Internet standard of any\n   kind.\
    \  Discussion and suggestions for improvement are requested.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n  1   Introduction                                       \
    \              3\n  2   Goals                                                \
    \            3\n  3   Approach                                               \
    \          5\n  4   Direct vs Indirect Connection                            \
    \        6\n  5   X.400 and RFC 822                                          \
    \      8\n  6   Objects                                                      \
    \    9\n  7   Communities                                                    \
    \ 10\n  8   Routing Trees                                                   11\n\
    \      8.1    Routing Tree Definition   .   .   .   .   .   .   .      12\n  \
    \    8.2    The Open Community Routing Tree   .   .   .   .   .      12\n    \
    \  8.3    Routing Tree Location     .   .   .   .   .   .   .      13\n      8.4\
    \    Example Routing Trees     .   .   .   .   .   .   .      13\n      8.5  \
    \  Use of Routing Trees to look up Information   .   .      13\n  9   Routing\
    \ Tree Selection                                          14\n      9.1    Routing\
    \ Tree Order    .   .   .   .   .   .   .   .      14\n      9.2    Example use\
    \ of Routing Trees  .   .   .   .   .   .      15\n          9.2.1    Fully Open\
    \ Organisation     .   .   .   .   .      15\n          9.2.2    Open Organisation\
    \ with Fallback     .   .   .      15\n          9.2.3    Minimal-routing MTA\
    \     .   .   .   .   .   .      16\n          9.2.4    Organisation with Firewall\
    \  .   .   .   .   .      16\n          9.2.5    Well Known Entry Points     .\
    \   .   .   .   .      16\n          9.2.6    ADMD using the Open Community for\
    \ Advertising      16\n          9.2.7    ADMD/PRMD gateway   .   .   .   .  \
    \ .   .   .      17\n  10  Routing Information                               \
    \              17\n      10.1   Multiple routing trees    .   .   .   .   .  \
    \ .   .      20\n      10.2   MTA Choice    .   .   .   .   .   .   .   .   .\
    \   .      22\n      10.3   Routing Filters   .   .   .   .   .   .   .   .  \
    \ .      25\n      10.4   Indirect Connectivity     .   .   .   .   .   .   .\
    \      26\n  11  Local Addresses (UAs)                                       \
    \    27\n      11.1   Searching for Local Users     .   .   .   .   .   .    \
    \  30\n  12  Direct Lookup                                                   30\n\
    \  13  Alternate Routes                                                30\n  \
    \    13.1   Finding Alternate Routes  .   .   .   .   .   .   .      30\n    \
    \  13.2   Sharing routing information   .   .   .   .   .   .      31\n  14  Looking\
    \ up Information in the Directory                         31\n  15  Naming MTAs\
    \                                                     33\n      15.1   Naming\
    \ 1984 MTAs  .   .   .   .   .   .   .   .   .      35\n  16  Attributes Associated\
    \ with the MTA                              35\n  17  Bilateral Agreements   \
    \                                         36\n  18  MTA Selection            \
    \                                       38\n      18.1   Dealing with protocol\
    \ mismatches  .   .   .   .   .      38\n      18.2   Supported Protocols   .\
    \   .   .   .   .   .   .   .      39\n      18.3   MTA Capability Restrictions\
    \   .   .   .   .   .   .      39\n      18.4   Subtree Capability Restrictions\
    \   .   .   .   .   .      40\n  19  MTA Pulling Messages                    \
    \                        41\n  20  Security and Policy                       \
    \                      42\n      20.1   Finding the Name of the Calling MTA  \
    \ .   .   .   .      42\n      20.2   Authentication    .   .   .   .   .   .\
    \   .   .   .      42\n      20.3   Authentication Information    .   .   .  \
    \ .   .   .      44\n  21  Policy and Authorisation                          \
    \              46\n      21.1   Simple MTA Policy     .   .   .   .   .   .  \
    \ .   .      46\n      21.2   Complex MTA Policy    .   .   .   .   .   .   .\
    \   .      47\n  22  Delivery                                                \
    \        49\n      22.1   Redirects     .   .   .   .   .   .   .   .   .   .\
    \      49\n      22.2   Underspecified O/R Addresses  .   .   .   .   .   .  \
    \    50\n      22.3   Non Delivery  .   .   .   .   .   .   .   .   .   .    \
    \  51\n      22.4   Bad Addresses     .   .   .   .   .   .   .   .   .      51\n\
    \  23  Submission                                                      53\n  \
    \    23.1   Normal Derivation     .   .   .   .   .   .   .   .      53\n    \
    \  23.2   Roles and Groups  .   .   .   .   .   .   .   .   .      53\n  24  Access\
    \ Units                                                    54\n  25  The Overall\
    \ Routing Algorithm                                   54\n  26  Performance  \
    \                                                   55\n  27  Acknowledgements\
    \                                                55\n  28  References        \
    \                                              56\n  29  Security Considerations\
    \                                         57\n  30  Author's Address         \
    \                                       58\n  A   Object Identifier Assignment\
    \                                    59\n  B   Community Identifier Assignments\
    \                                60\n  C   Protocol Identifier Assignments   \
    \                              60\n  D   ASN.1 Summary                       \
    \                            61\n  E   Regular Expression Syntax             \
    \                          71\n  List of Figures\n      1      Location of Routing\
    \ Trees     .   .   .   .   .   .      12\n      2      Routing Tree Use Definition\
    \   .   .   .   .   .   .      14\n      3      Routing Information at a Node\
    \     .   .   .   .   .      17\n      4      Indirect Access   .   .   .   .\
    \   .   .   .   .   .      25\n      5      UA Attributes     .   .   .   .  \
    \ .   .   .   .   .      27\n      6      MTA Definitions   .   .   .   .   .\
    \   .   .   .   .      33\n      7      MTA Bilateral Table Entry     .   .  \
    \ .   .   .   .      36\n      8      Bilateral Table Attribute     .   .   .\
    \   .   .   .      37\n      9      Supported MTS Extensions  .   .   .   .  \
    \ .   .   .      39\n      10     Subtree Capability Restriction    .   .   .\
    \   .   .      40\n      11     Pulling Messages  .   .   .   .   .   .   .  \
    \ .   .      41\n      12     Authentication Requirements   .   .   .   .   .\
    \   .      43\n      13     MTA Authentication Parameters     .   .   .   .  \
    \ .      45\n      14     Simple MTA Policy Specification   .   .   .   .   .\
    \      46\n      15     Redirect Definition   .   .   .   .   .   .   .   .  \
    \    48\n      16     Non Delivery Information  .   .   .   .   .   .   .    \
    \  50\n      17     Bad Address Pointers  .   .   .   .   .   .   .   .      52\n\
    \      18     Access Unit Attributes    .   .   .   .   .   .   .      53\n  \
    \    19     Object Identifier Assignment  .   .   .   .   .   .      59\n    \
    \  20     Transport Community Object Identifier Assignments        60\n      21\
    \     Protocol Object Identifier Assignments    .   .   .      61\n      22  \
    \   ASN.1 Summary     .   .   .   .   .   .   .   .   .      61\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   MHS Routing is the problem of controlling the path of a\
    \ message as it\n   traverses one or more MTAs to reach its destination recipients.\n\
    \   Routing starts with a recipient O/R Address, and parameters\n   associated\
    \ with the message to be routed.  It is assumed that this is\n   known a priori,\
    \ or is derived at submission time as described in\n   Section 23.\n   The key\
    \ problem in routing is to map from an O/R Address onto an MTA\n   (next hop).\
    \  This shall be an MTA which in some sense is \"nearer\" to\n   the destination\
    \ UA. This is done repeatedly until the message can be\n   directly delivered\
    \ to the recipient UA. There are a number of things\n   which need to be considered\
    \ to determine this.  These are discussed\n   in the subsequent sections.  A description\
    \ of the overall routing\n   process is given in Section 25.\n"
- title: 2.  Goals
  contents:
  - "2.  Goals\n   Application level routing for MHS is a complex procedure, with\
    \ many\n   requirements.  The following goals for the solution are set:\n o  Straightforward\
    \ to manage.  Non-trivial configuration of routing\n    for current message handling\
    \ systems is a black art, often\n    involving gathering and processing many tables,\
    \ and editing\n    complex configuration files.  Many problems are solved in a\
    \ very\n    ad hoc manner.  Managing routing for MHS is the most serious\n   \
    \ headache for most mail system managers.\n o  Economic, both in terms of network\
    \ and computational resources.\n o  Robust.  Errors and out of date information\
    \ shall cause minimal\n    and localised damage.\n o  Deal with link failures.\
    \  There needs to be some ability to choose\n    alternative routes.  In general,\
    \ it is desirable that the routing\n    approach be redundant.\n o  Load sharing.\
    \  Information on routes shall allow \"equal\" routes\n    to be specified, and\
    \ thus facilitate load sharing.\n o  Support format and protocol conversion\n\
    \ o  Dynamic and automatic.  There shall be no need for manual\n    propagation\
    \ of tables or administrator intervention.\n o  Policy robust.  It shall not allow\
    \ specification of policies which\n    cause undesirable routing effects.\n o\
    \  Reasonably straightforward to implement.\n o  Deal with X.400, RFC 822, and\
    \ their interaction.\n o  Extensible to other mail architectures\n o  Recognise\
    \ existing RFC 822 routing, and coexist smoothly.\n o  Improve RFC 822 routing\
    \ capabilities.  This is particularly\n    important for RFC 822 sites not in\
    \ the SMTP Internet.\n o  Deal correctly with different X.400 protocols (P1, P3,\
    \ P7), and\n    with 1984, 1988 and 1992 versions.\n o  Support X.400 operation\
    \ over multiple protocol stacks (TCP/IP,\n    CONS, CLNS) and in different communities.\n\
    \ o  Messages shall be routed consistently.  Alternate routing\n    strategies,\
    \ which might introduce unexpected delay, shall be used\n    with care (e.g.,\
    \ routing through a protocol converter due to\n    unavailability of an MTA).\n\
    \ o  Delay between message submission and delivery shall be minimised.\n    This\
    \ has indirect impact on the routing approaches used.\n o  Interact sensibly with\
    \ ADMD services.\n o  Be global in scope\n o  Routing strategy shall deal with\
    \ a scale of order of magnitude\n    1,000,000 -- 100,000,000 MTAs.\n o  Routing\
    \ strategy shall deal with of order 1,000,000 -- 100,000,000\n    Organisations.\n\
    \ o  Information about alterations in topology shall propagate rapidly\n    to\
    \ sites affected by the change.\n o  Removal, examination, or destruction of messages\
    \ by third parties\n    shall be difficult.  This is hard to quantify, but \"\
    difficult\"\n    shall be comparable to the effort needed to break system security\n\
    \    on a typical MTA system.\n o  As with current Research Networks, it is recognised\
    \ that\n    prevention of forged mail will not always be possible.  However,\n\
    \    this shall be as hard as can be afforded.\n o  Sufficient tracing and logging\
    \ shall be available to track down\n    security violations and faults.\n o  Optimisation\
    \ of routing messages with multiple recipients, in\n    cases where this involves\
    \ selection of preferred single recipient\n    routes.\n"
- title: 'The following are not initial goals:'
  contents:
  - "The following are not initial goals:\n o  Advanced optimisation of routing messages\
    \ with multiple\n    recipients, noting dependencies between the recipients to\
    \ find\n    routes which would not have been chosen for any of the single\n  \
    \  recipients.\n o  Dynamic load balancing.  The approach does not give a means\
    \ to\n    determine load.  However, information on alternate routes is\n    provided,\
    \ which is the static information needed for load\n    balancing.\n"
- title: 3.  Approach
  contents:
  - "3.  Approach\n   A broad problem statement, and a survey of earlier approaches\
    \ to the\n   problem is given in the COSINE Study on MHS Topology and Routing\
    \ [8].\n   The interim (table-based) approach suggested in this study, whilst\n\
    \   not being followed in detail, broadly reflects what the research\n   X.400\
    \ (GO-MHS) community is doing.  The evolving specification of the\n   RARE table\
    \ format is defined in [5].  This document specifies the\n   envisaged longer\
    \ term approach.\n   Some documents have made useful contributions to this work:\n\
    \ o  A paper by the editor on MHS use of directory, which laid out the\n    broad\
    \ approach of mapping the O/R Address space on to the DIT [7].\n o  Initial ISO\
    \ Standardisation work on MHS use of Directory for\n    routing [19].  Subsequent\
    \ ISO work in this area has drawn from\n    earlier drafts of this specification.\n\
    \ o  The work of the VERDI Project [3].\n o  Work by Kevin Jordan of CDC [6].\n\
    \ o  The routing approach of ACSNet [4, 17] paper.  This gives useful\n    ideas\
    \ on incremental routing, and replicating routing data.\n o  A lot of work on\
    \ network routing is becoming increasingly\n    relevant.  As the MHS routing\
    \ problem increases in size, and\n    network routing increases in sophistication\
    \ (e.g., policy based\n    routing), the two areas have increasing amounts in\
    \ common.  For\n    example, see [2].\n"
- title: 4.  Direct vs Indirect Connection
  contents:
  - "4.  Direct vs Indirect Connection\n   Two extreme approaches to routing connectivity\
    \ are:\n   1.  High connectivity between MTAs.  An example of this is the way\n\
    \       the Domain Name Server system is used on the DARPA/NSF Internet.\n   \
    \    Essentially, all MTAs are fully interconnected.\n   2.  Low connectivity\
    \ between MTAs.  An example of this is the UUCP\n       network.\n   In general\
    \ an intermediate approach is desirable.  Too sparse a\n   connectivity is inefficient,\
    \ and leads to undue delays.  However,\n   full connectivity is not desirable,\
    \ for the reasons discussed below.\n   A number of general issues related to relaying\
    \ are now considered.\n   The reasons for avoiding relaying are clear.  These\
    \ include.\n o  Efficiency.  If there is an open network, it is desirable that\
    \ it\n    be used.\n o  Extra hops introduce delay, and increase the (very small)\n\
    \    possibility of message loss.  As a basic principle, hop count\n    shall\
    \ be minimised.\n o  Busy relays or Well Known Entry points can introduce high\
    \ delay\n    and lead to single point of failure.\n o  If there is only one hop,\
    \ it is straightforward for the user to\n    monitor progress of messages submitted.\
    \  If a message is delayed,\n    the user can take appropriate action.\n o  Many\
    \ users like the security of direct transmission.  It is an\n    argument often\
    \ given very strongly for use of SMTP.\n   Despite these very powerful arguments,\
    \ there are a number of reasons\n   why some level of relaying is desirable:\n\
    \ o  Charge optimisation.  If there is an expensive network/link to be\n    traversed,\
    \ it may make sense to restrict its usage to a small\n    number of MTAs.  This\
    \ would allow for optimisation with respect to\n    the charging policy of this\
    \ link.\n o  Copy optimisation.  If a message is being sent to two remote MTAs\n\
    \    which are close together, it is usually optimal to send the\n    message\
    \ to one of the MTAs (for both recipients), and let it pass\n    a copy to the\
    \ other MTA.\n o  To access an intermediate MTA for some value added service.\
    \  In\n    particular for:\n    --  Message Format Conversion\n    --  Distribution\
    \ List expansion\n o  Dealing with different protocols.  The store and forward\
    \ approach\n    allows for straightforward conversion.  Relevant cases include:\n\
    \    --  Provision of X.400 over different OSI Stacks (e.g.,\n        Connectionless\
    \ Network Service).\n    --  Use of a different version of X.400.\n    --  Interaction\
    \ with non-X.400 mail services\n o  To compensate for inadequate directory services:\
    \  If tables are\n    maintained in an ad hoc manner, the manual effort to gain\
    \ full\n    connectivity is too high.\n o  To hide complexity of structure.  If\
    \ an organisation has many\n    MTAs, it may still be advantageous to advertise\
    \ a single entry\n    point to the outside world.  It will be more efficient to\
    \ have an\n    extra hop, than to (widely) distribute the information required\
    \ to\n    connect directly.  This will also encourage stability, as\n    organisations\
    \ need to change internal structure much more\n    frequently than their external\
    \ entry points.  For many\n    organisations, establishing such firewalls is high\
    \ priority.\n o  To handle authorisation, charging and security issues.  In\n\
    \    general, it is desirable to deal with user oriented authorisation\n    at\
    \ the application level.  This is essential when MHS specific\n    parameters\
    \ shall be taken into consideration.  It may well be\n    beneficial for organisations\
    \ to have a single MTA providing access\n    to the external world, which can\
    \ apply a uniform access policy\n    (e.g., as to which people are allowed access).\
    \  This would be\n    particularly true in a multi-vendor environment, where different\n\
    \    systems would otherwise have to enforce the same policy --- using\n    different\
    \ vendor-specific mechanisms.\n   In summary there are strong reasons for an intermediate\
    \ approach.\n   This will be achieved by providing mechanisms for both direct\
    \ and\n   indirect connectivity.  The manager of a configuration will then be\n\
    \   able to make appropriate choices for the environment.\n   Two models of managing\
    \ large scale routing have evolved:\n   1.  Use of a global directory/database.\
    \  This is the approach\n       proposed here.\n   2.  Use of a routing table\
    \ in each MTA, which is managed either by a\n       management protocol or by\
    \ directory.  This is coupled with means\n       to exchange routing information\
    \ between MTAs.  This approach is\n       more analogous to how network level\
    \ routing is commonly performed.\n       It has good characteristics in terms\
    \ of managing links and\n       dealing with link related policy.  However, it\
    \ assumes limited\n       connectivity and does not adapt well to a network environment\n\
    \       with high connectivity available.\n"
- title: 5.  X.400 and RFC 822
  contents:
  - "5.  X.400 and RFC 822\n   This document defines mechanisms for X.400 message\
    \ routing.  It is\n   important that this can be integrated with RFC 822 based\
    \ routing, as\n   many MTAs will work in both communities.  This routing document\
    \ is\n   written with this problem in mind, and some work to verify this has\n\
    \   been done.  support for RFC 822 routing using the same basic\n   infrastructure\
    \ is defined in a companion document [13].  In addition\n   support for X.400/RFC\
    \ 822 gatewaying is needed, to support\n   interaction.  Directory based mechanisms\
    \ for this are defined in\n   [16].  The advantages of the approach defined by\
    \ this set of\n   specifications are:\n o  Uniform management for sites which\
    \ wish to support both protocols.\n o  Simpler management for gateways.\n o  Improved\
    \ routing services for RFC 822 only sites.\n   For sites which are only X.400\
    \ or only RFC 822, the mechanisms\n   associated with gatewaying or with the other\
    \ form of addressing are\n   not needed.\n"
- title: 6.  Objects
  contents:
  - "6.  Objects\n   It is useful to start with a manager's perspective.  Here is\
    \ the set\n   of object classes used in this specification.  It is important that\n\
    \   all information entered relates to something which is being managed.\n   If\
    \ this is achieved, configuration decisions are much more likely to\n   be correct.\
    \  In the examples, distinguished names are written using\n   the String Syntax\
    \ for Distinguished Names [11].  The list of objects\n   used in this specification\
    \ is:\n"
- title: User An entry representing a single human user.  This will typically
  contents:
  - "User An entry representing a single human user.  This will typically\n    be\
    \ named in an organisational context.  For example:\n     CN=Edgar Smythe,\n \
    \    O=Zydeco Services, C=GB\n    This entry would have associated information,\
    \ such as telephone\n    number, postal address, and mailbox.\n"
- title: MTA A Message Transfer Agent.  In general, the binding between
  contents:
  - "MTA A Message Transfer Agent.  In general, the binding between\n    machines\
    \ and MTAs will be complex.  Often a small number of MTAs\n    will be used to\
    \ support many machines, by use of local approaches\n    such as shared filestores.\
    \  MTAs may support multiple protocols,\n    and will identify separate addressing\
    \ information for each\n    protocol.\n    To achieve support for multiple protocols,\
    \ an MTA is modelled as\n    an Application Process, which is named in the directory.\
    \  Each MTA\n    will have one or more associated Application Entities.  Each\n\
    \    Application Entity is named as a child of the Application Process,\n    using\
    \ a common name which conveniently identifies the Application\n    Entity relative\
    \ to the Application Process.  Each Application\n    Entity supports a single\
    \ protocol, although different Application\n    Entities may support the same\
    \ protocol.  Where an MTA only\n    supports one protocol or where the addressing\
    \ information for all\n    of the protocols supported have different attributes\
    \ to represent\n    addressing information (e.g., P1(88) and SMTP) the Application\n\
    \    Entity(ies) may be represented by the single Application Process\n    entry.\n"
- title: User Agent (Mailbox) This defines the User Agent (UA) to which mail
  contents:
  - "User Agent (Mailbox) This defines the User Agent (UA) to which mail\n    may\
    \ be delivered.  This will define the account with which the UA\n    is associated,\
    \ and may also point to the user(s) associated with\n    the UA. It will identify\
    \ which MTAs are able to access the UA.\n    (In the formal X.400 model, there\
    \ will be a single MTA delivering\n    to a UA. In many practical configurations,\
    \ multiple MTAs can\n    deliver to a single UA. This will increase robustness,\
    \ and is\n    desirable.)\n"
- title: 'Role Some organisational function.  For example:'
  contents:
  - "Role Some organisational function.  For example:\n     CN=System Manager, OU=Sales,\n\
    \     O=Zydeco Services, C=GB\n    The associated entry would indicate the occupant\
    \ of the role.\n"
- title: Distribution Lists There would be an entry representing the
  contents:
  - "Distribution Lists There would be an entry representing the\n    distribution\
    \ list, with information about the list, the manger,\n    and members of the list.\n"
- title: 7.  Communities
  contents:
  - '7.  Communities

    '
- title: There are two basic types of agreement in which an MTA may participate
  contents:
  - 'There are two basic types of agreement in which an MTA may participate

    '
- title: 'in order to facilitate routing:'
  contents:
  - 'in order to facilitate routing:

    '
- title: Bilateral Agreements An agreement between a pair of MTAs to route
  contents:
  - "Bilateral Agreements An agreement between a pair of MTAs to route\n    certain\
    \ types of traffic.  This MTA pair agreement usually\n    reflects some form of\
    \ special agreement and in general bilateral\n    information shall be held for\
    \ the link at both ends.  In some\n    cases, this information shall be private.\n"
- title: Open Agreements An agreement between a collection of MTAs to behave
  contents:
  - "Open Agreements An agreement between a collection of MTAs to behave\n    in a\
    \ cooperative fashion to route traffic.  This may be viewed as\n    a general\
    \ bilateral agreement.\n   It is important to ensure that there are sufficient\
    \ agreements in\n   place for all messages to be routed.  This will usually be\
    \ done by\n   having agreements which correspond to the addressing hierarchy.\
    \  For\n   X.400, this is the model where a PRMD connects to an ADMD, and the\n\
    \   ADMD provides the inter PRMD connectivity, by the ability to route to\n  \
    \ all other ADMDs.  Other agreements may be added to this hierarchy, in\n   order\
    \ to improve the efficiency of routing.  In general, there may be\n   valid addresses,\
    \ which cannot be routed to, either for connectivity\n   or policy reasons.\n\
    \   We model these two types of agreements as communities.  A community\n   is\
    \ a scope in which an MTA advertises its services and learns about\n   other services.\
    \  Each MTA will:\n   1.  Register its services in one or more communities.\n\
    \   2.  Look up services in one or more communities.\n   In most cases an MTA\
    \ will deal with a very small number of\n   communities --- very often one only.\
    \  There are a number of different\n   types of community.\n"
- title: The open community This is a public/global scope.  It reflects
  contents:
  - "The open community This is a public/global scope.  It reflects\n    routing information\
    \ which is made available to any MTA which\n    wishes to use it.\n"
- title: The local community This is the scope of a single MTA. It reflects
  contents:
  - "The local community This is the scope of a single MTA. It reflects\n    routing\
    \ information private to the MTA. It will contain an MTA's\n    view of the set\
    \ of bilateral agreements in which it participates,\n    and routing information\
    \ private and local to the MTA.\n"
- title: Hierarchical communities A hierarchical community is a subtree of the
  contents:
  - "Hierarchical communities A hierarchical community is a subtree of the\n    O/R\
    \ Address tree.  For example, it might be a management domain,\n    an organisation,\
    \ or an organisational unit.  This sort of\n    community will allow for firewalls\
    \ to be established.  A community\n    can have complex internal structure, and\
    \ register a small subset\n    of that in the open community.\n"
- title: Closed communities A closed community is a set of MTAs which agrees
  contents:
  - "Closed communities A closed community is a set of MTAs which agrees\n    to route\
    \ amongst themselves.  Examples of this might be ADMDs\n    within a country,\
    \ or a set of PRMDs representing the same\n    organisation in multiple countries.\n\
    \   Formally, a community indicates the scope over which a service is\n   advertised.\
    \  In practice, it will tend to reflect the scope of\n   services offered.  It\
    \ does not make sense to offer a public service,\n   and only advertise it locally.\
    \  Public advertising of a private\n   service makes more sense, and this is shown\
    \ below.  In general,\n   having a community offer services corresponding to the\
    \ scope in which\n   they are advertised will lead to routing efficiency.  Examples\
    \ of how\n   communities can be used to implement a range of routing policies\
    \ are\n   given in Section 9.2.\n"
- title: 8.  Routing Trees
  contents:
  - "8.  Routing Trees\n   Communities are a useful abstract definition of the routing\
    \ approach\n   taken by this specification.  Each community is represented in\
    \ the\n   directory as a routing tree.  There will be many routing trees\n   instantiated\
    \ in the directory.  Typically, an MTA will only be\n   registered in and make\
    \ use of a small number of routing trees.  In\n   most cases, it will register\
    \ in and use the same set of routing\n   trees.\n"
- title: 8.1  Routing Tree Definition
  contents:
  - "8.1  Routing Tree Definition\n   Each community has a model of the O/R address\
    \ space.  Within a\n   community, there is a general model of what to do with\
    \ a given O/R\n   Address.  This is structured hierarchically, according to the\
    \ O/R\n   address hierarchy.  A community can register different possible\n  \
    \ actions, depending on the depth of match.  This might include\n   identifying\
    \ the MTA associated with a UA which is matched fully, and\n   providing a default\
    \ route for an O/R address where there is no match\n   in the community --- and\
    \ all intermediate forms.  The name structure\n   of a routing tree follows the\
    \ O/R address hierarchy, which is\n   specified in a separate document [15]. \
    \ Where there is any routing\n   action associated with a node in a routing tree,\
    \ the node is of\n   object class routingInformation, as defined in Section 10.\n"
- title: 8.2  The Open Community Routing Tree
  contents:
  - "8.2  The Open Community Routing Tree\n   The routing tree of the open community\
    \ starts at the root of the DIT.\n   This routing tree also serves the special\
    \ function of instantiating\n   the global O/R Address space in the Directory.\
    \  Thus, if a UA wishes\n   to publish information to the world, this hierarchy\
    \ allows it to do\n   so.\n   The O/R Address hierarchy is a registered tree,\
    \ which may be\n   instantiated in the directory.  Names at all points in the\
    \ tree are\n   valid, and there is no requirement that the namespace is instantiated\n\
    \   by the owner of the name.  For example, a PRMD may make an entry in\n   the\
    \ DIT, even if the ADMD above it does not.  In this case, there\n   will be a\
    \ \"skeletal\" entry for the ADMD, which is used to hang the\n   PRMD entry in\
    \ place.  The skeletal entry contains the minimum number\n   of entries which\
    \ are needed for it to exist in the DIT (Object Class\n   and Attribute information\
    \ needed for the relative distinguished\n   name).  This entry may be placed there\
    \ solely to support the\n   subordinate entry, as its existence is inferred by\
    \ the subordinate\n   entry.  Only the owner of the entry may place information\
    \ into it.\n   An analogous situation in current operational practice is to make\
    \ DIT\n   entries for Countries and US States.\n"
- title: '---------------------------------------------------------------------'
  contents:
  - '---------------------------------------------------------------------

    '
- title: routingTreeRoot OBJECT-CLASS ::= {
  contents:
  - "routingTreeRoot OBJECT-CLASS ::= {\n    SUBCLASS OF {routingInformation|subtree}\n\
    \    ID oc-routing-tree-root}\n                  Figure 1: Location of Routing\
    \ Trees\n"
- title: '---------------------------------------------------------------------'
  contents:
  - '---------------------------------------------------------------------

    '
- title: 8.3  Routing Tree Location
  contents:
  - "8.3  Routing Tree Location\n   All routing trees follow the same O/R address\
    \ hierarchy.  Routing\n   trees other than the open community routing tree are\
    \ rooted at\n   arbitrary parts of the DIT. These routing trees are instantiated\n\
    \   using the subtree mechanism defined in the companion document\n   \"Representing\
    \ Tables and Subtrees in the Directory\" [15].  A routing\n   tree is identified\
    \ by the point at which it is rooted.  An MTA will\n   use a list of routing trees,\
    \ as determined by the mechanism described\n   in Section 9.  Routing trees may\
    \ be located in either the\n   organisational or O/R address structured part of\
    \ the DIT. All routing\n   trees, other than the open community routing tree,\
    \ are rooted by an\n   entry of object class routingTreeRoot, as defined in Figure\
    \ 1.\n"
- title: 8.4  Example Routing Trees
  contents:
  - "8.4  Example Routing Trees\n   Consider routing trees with entries for O/R Address:\n\
    \    P=ABC; A=XYZMail; C=GB;\n   In the open community routing tree, this would\
    \ have a distinguished\n   name of:\n    PRMD=ABC, ADMD=XYZMail, C=GB\n   Consider\
    \ a routing tree which is private to:\n    O=Zydeco Services, C=GB\n   They might\
    \ choose to label a routing tree root \"Zydeco Routing Tree\",\n   which would\
    \ lead to a routing tree root of:\n    CN=Zydeco Routing Tree, O=Zydeco Services,\
    \ C=GB\n   The O/R address in question would be stored in this routing tree as:\n\
    \    PRMD=ABC, ADMD=XYZMail\n    C=GB, CN=Zydeco Routing Tree,\n    O=Zydeco Services,\
    \ C=GB\n"
- title: 8.5  Use of Routing Trees to look up Information
  contents:
  - "8.5  Use of Routing Trees to look up Information\n   Lookup of an O/R address\
    \ in a routing tree is done as follows:\n   1.  Map the O/R address onto the O/R\
    \ address hierarchy described in\n       [15] in order to generate a Distinguished\
    \ Name.\n   2.  Append this to the Distinguished Name of the routing tree, and\n\
    \       then look up the whole name.\n   3.  Handling of errors will depend on\
    \ the application of the lookup,\n       and is discussed later.\n   Note that\
    \ it is valid to look up a null O/R Address, as the routing\n   tree root may\
    \ contain default routing information for the routing\n   tree.  This is held\
    \ in the root entry of the routing tree, which is a\n   subclass of routingInformation.\
    \  The open community routing tree does\n   not have a default.\n   Routing trees\
    \ may have aliases into other routing trees.  This will\n   typically be done\
    \ to optimise lookups from the first routing tree\n   which a given MTA uses.\
    \  Lookup needs to take account of this.\n"
- title: 9.  Routing Tree Selection
  contents:
  - "9.  Routing Tree Selection\n   The list of routing trees which a given MTA uses\
    \ will be represented\n   in the directory.  This uses the attribute defined in\
    \ Figure 2.\n   ---------------------------------------------------------------------\n\
    \   routingTreeList ATTRIBUTE ::= {\n           WITH SYNTAX RoutingTreeList\n\
    \           SINGLE VALUE\n           ID at-routing-tree-list}\n   RoutingTreeList\
    \ ::= SEQUENCE OF RoutingTreeName\n   RoutingTreeName ::= DistinguishedName\n\
    \                   Figure 2: Routing Tree Use Definition\n   ---------------------------------------------------------------------\n\
    \   This attribute defines the routing trees used by an MTA, and the\n   order\
    \ in which they are used.  Holding these in the directory eases\n   configuration\
    \ management.  It also enables an MTA to calculate the\n   routing choice of any\
    \ other MTA which follows this specification,\n   provided that none of its routing\
    \ trees have access restrictions.\n   This will facilitate debugging routing problems.\n"
- title: 9.1  Routing Tree Order
  contents:
  - "9.1  Routing Tree Order\n   The order in which routing trees are used will be\
    \ critical to the\n   operation of this algorithm.  A common approach will be:\n\
    \   1.  Access one or more shared private routing trees to access private\n  \
    \     routing information.\n   2.  Utilise the open routing tree.\n   3.  Fall\
    \ back to a default route from one of the private routing\n       trees.\n   Initially,\
    \ the open routing tree will be very sparse, and there will\n   be little routing\
    \ information in ADMD level nodes.  Access to many\n   services will only be via\
    \ ADMD services, which in turn will only be\n   accessible via private links.\
    \  For most MTAs, the fallback routing\n   will be important, in order to gain\
    \ access to an MTA which has the\n   right private connections configured.\n \
    \  In general, for a site, UAs will be registered in one routing tree\n   only,\
    \ in order to avoid duplication.  They may be placed into other\n   routing trees\
    \ by use of aliases, in order to gain performance.  For\n   some sites, Users\
    \ and UAs with a 1:1 mapping will be mapped onto\n   single entries by use of\
    \ aliases.\n"
- title: 9.2  Example use of Routing Trees
  contents:
  - "9.2  Example use of Routing Trees\n   Some examples of how this structure might\
    \ be used are now given.\n   Many other combinations are possible to suit organisational\n\
    \   requirements.\n"
- title: 9.2.1  Fully Open Organisation
  contents:
  - "9.2.1  Fully Open Organisation\n   The simplest usage is to place all routing\
    \ information in the open\n   community routing tree.  An organisation will simply\
    \ establish O/R\n   addresses for all of its UAs in the open community tree, each\n\
    \   registering its supporting MTA. This will give access to all systems\n   accessible\
    \ from this open community.\n"
- title: 9.2.2  Open Organisation with Fallback
  contents:
  - "9.2.2  Open Organisation with Fallback\n   In practice, some MTAs and MDs will\
    \ not be directly reachable from\n   the open community (e.g., ADMDs with a strong\
    \ model of bilateral\n   agreements).  These services will only be available to\n\
    \   users/communities with appropriate agreements in place.  Therefore it\n  \
    \ will be useful to have a second (local) routing tree, containing only\n   the\
    \ name of the fallback MTA at its root.  In many cases, this\n   fallback would\
    \ be to an ADMD connection.\n   Thus, open routing will be tried first, and if\
    \ this fails the message\n   will be routed to a single selected MTA.\n"
- title: 9.2.3  Minimal-routing MTA
  contents:
  - "9.2.3  Minimal-routing MTA\n   The simplest approach to routing for an MTA is\
    \ to deliver messages to\n   associated users, and send everything else to another\
    \ MTA (possibly\n   with backup).\n   An organisation using MTAs with this approach\
    \ will register its users\n   as for the fully open organisation.  A single routing\
    \ tree will be\n   established, with the name of the organisation being aliased\
    \ into the\n   open community routing tree.  Thus the MTA will correctly identify\n\
    \   local users, but use a fallback mechanism for all other addresses.\n"
- title: 9.2.4  Organisation with Firewall
  contents:
  - "9.2.4  Organisation with Firewall\n   An organisation can establish an organisation\
    \ community to build a\n   firewall, with the overall organisation being registered\
    \ in the open\n   community.  This is an important structure, which it is important\
    \ to\n   support cleanly.\n    o  Some MTAs are registered in the open community\
    \ routing tree to\n       give access into the organisation.  This will include\
    \ the O/R tree\n       down to the organisational level.  Full O/R Address verification\n\
    \       will not take place externally.\n    o  All users are registered in a\
    \ private (organisational) routing\n       tree.\n    o  All MTAs in the organisation\
    \ are registered in the organisation's\n       private routing tree, and access\
    \ information in the organisation's\n       community.  This gives full internal\
    \ connectivity.\n    o  Some MTAs in the organisation access the open community\
    \ routing\n       tree.  These MTAs take traffic from the organisation to the\n\
    \       outside world.  These will often be the same MTAs that are\n       externally\
    \ advertised.\n"
- title: 9.2.5  Well Known Entry Points
  contents:
  - "9.2.5  Well Known Entry Points\n   Well known entry points will be used to provide\
    \ access to countries\n   and MDs which are oriented to private links.  A private\
    \ routing tree\n   will be established, which indicates these links.  This tree\
    \ would be\n   shared by the well known entry points.\n"
- title: 9.2.6  ADMD using the Open Community for Advertising
  contents:
  - "9.2.6  ADMD using the Open Community for Advertising\n   An ADMD uses the open\
    \ community for advertising.  It advertises its\n   existence and also restrictive\
    \ policy.  This will be useful for:\n    o  Address validation\n    o  Advertising\
    \ the mechanism for a bilateral link to be established\n"
- title: 9.2.7  ADMD/PRMD gateway
  contents:
  - "9.2.7  ADMD/PRMD gateway\n   An MTA provides a gateway from a PRMD to an ADMD.\
    \ It is important to\n   note that many X.400 MDs will not use the directory.\
    \  This is quite\n   legitimate.  This technique can be used to register access\
    \ into such\n   communities from those that use the directory.\n    o  The MTA\
    \ registers the ADMD in its local community (private link)\n    o  The MTA registers\
    \ itself in the PRMD's community to give access to\n       the ADMD.\n"
- title: 10.  Routing Information
  contents:
  - "10.  Routing Information\n   Routing trees are defined in the previous section,\
    \ and are used as a\n   framework to hold routing information.  Each node, other\
    \ than a\n   skeletal one, in a routing tree has information associated with it,\n\
    \   which is defined by the object class routingInformation in Figure 3.\n   This\
    \ structure is fundamental to the operation of this specification,\n   and it\
    \ is recommended that it be studied with care.\n   ---------------------------------------------------------------------\n\
    \   routingInformation OBJECT-CLASS ::= {\n       SUBCLASS OF top\n       KIND\
    \ auxiliary\n       MAY CONTAIN {\n           subtreeInformation|\n          \
    \ routingFilter|\n           routingFailureAction|\n           mTAInfo|\n    \
    \       accessMD|                                                  10\n      \
    \     nonDeliveryInfo|\n           badAddressSearchPoint|\n           badAddressSearchAttributes}\n\
    \       ID oc-routing-information}\n                   -- No naming attributes\
    \ as this is not a\n                   -- structural object class\n   subtreeInformation\
    \ ATTRIBUTE ::= {                                 20\n       WITH SYNTAX SubtreeInfo\n\
    \       SINGLE VALUE\n       ID at-subtree-information}\n   SubtreeInfo ::= ENUMERATED\
    \ {\n       all-children-present(0),\n       not-all-children-present(1) }\n \
    \  routingFilter ATTRIBUTE ::= {                                      30\n   \
    \    WITH SYNTAX RoutingFilter\n       ID at-routing-filter}\n   RoutingFilter\
    \ ::= SEQUENCE{\n           attribute-type OBJECT-IDENTIFIER,\n           weight\
    \ RouteWeight,\n           dda-key String OPTIONAL,\n           regex-match IA5String\
    \ OPTIONAL,\n           node DistinguishedName }                             \
    \      40\n   String ::= CHOICE {PrintableString, TeletexString}\n   routingFailureAction\
    \ ATTRIBUTE ::= {\n       WITH SYNTAX RoutingFailureAction\n       SINGLE VALUE\n\
    \       ID at-routing-failure-action}\n   RoutingFailureAction ::= ENUMERATED\
    \ {\n               next-level(0),                                         50\n\
    \               next-tree-only(1),\n               next-tree-first(2),\n     \
    \          stop(3)  }\n   mTAInfo ATTRIBUTE ::= {\n       WITH SYNTAX MTAInfo\n\
    \       ID at-mta-info}\n   MTAInfo ::= SEQUENCE {                           \
    \                  60\n               name DistinguishedName,\n              \
    \ weight [1] RouteWeight DEFAULT preferred-access,\n               mta-attributes\
    \ [2] SET OF Attribute OPTIONAL,\n               ae-info  SEQUENCE OF SEQUENCE\
    \ {\n                   aEQualifier PrintableString,\n                   ae-weight\
    \ RouteWeight DEFAULT preferred-access,\n                   ae-attributes SET\
    \ OF Attribute OPTIONAL} OPTIONAL\n   }\n   RouteWeight ::= INTEGER  {endpoint(0),\
    \                             70\n                   preferred-access(5),\n  \
    \                 backup(10)} (0..20)\n                 Figure 3:  Routing Information\
    \ at a Node\n   ---------------------------------------------------------------------\n\
    \   For example, information might be associated with the (PRMD) node:\n    PRMD=ABC,\
    \ ADMD=XYZMail, C=GB\n   If this node was in the open community routing tree,\
    \ then the\n   information represents information published by the owner of the\
    \ PRMD\n   relating to public access to that PRMD. If this node was present in\n\
    \   another routing tree, it would represent information published by the\n  \
    \ owner of the routing tree about access information to the referenced\n   PRMD.\
    \ The attributes associated with a routingInformation node\n   provide the following\
    \ information:\n   Implicit That the node corresponds to a partial or entire valid\
    \ O/R\n       address.  This is implicit in the existence of the entry.\n   Object\
    \ Class If the node is a UA. This will be true if the node is of\n       object\
    \ class routedUA. This is described further in Section 11.\n       If it is not\
    \ of this object class, it is an intermediate node in\n       the O/R Address\
    \ hierarchy.\n   routingFilter A set of routing filters, defined by the routingFilter\n\
    \       attribute.  This attribute provides for routing on information in\n  \
    \     the unmatched part of the O/R Address.  This is described in\n       Section\
    \ 10.3.\n   subtreeInformation Whether or not the node is authoritative for the\n\
    \       level below is specified by the subtreeInformation attribute.  If\n  \
    \     it is authoritative, indicated by the value all-children-present,\n    \
    \   this will give the basis for (permanently) rejecting invalid O/R\n       Addresses.\
    \  The attribute is encoded as enumerated, as it may be\n       later possible\
    \ to add partial authority (e.g., for certain\n       attribute types).  If this\
    \ attribute is missing, the node is\n       assumed to be non-authoritative (not-all-children-present).\n\
    \       The value all-children-present simply means that all of the child\n  \
    \     entries are present, and that this can be used to determine\n       invalid\
    \ addresses.  There are no implications about the presence\n       of routing\
    \ information.  Thus it is possible to verify an entire\n       address, but only\
    \ to route on one of the higher level components.\n       For example, consider\
    \ the node:\n        MHS-O=Zydeco, PRMD=ABC, ADMD=XYZMail, C=GB\n       An organisation\
    \ which has a bilateral agreement with this\n       organisation has this entry\
    \ in its routing tree, with no children\n       entries.  This is marked as non-authoritative.\
    \  There is a second\n       routing tree maintained by Zydeco, which contains\
    \ all of the\n       children of this node, and is marked as authoritative.  When\n\
    \       considering an O/R Address\n        MHS-G=Random + MHS-S=Unknown, MHS-O=Zydeco,\n\
    \        PRMD=ABC, ADMD=XYZMail, C=GB\n       only the second, authoritative,\
    \ routing tree can be used to\n       determine that this address is invalid.\
    \  In practice, the manager\n       configuring the non-authoritative tree, will\
    \ be able to select\n       whether an MTA using this tree will proceed to full\
    \ verification,\n       or route based on the partially verified information.\n\
    \   mTAInfo A list of MTAs and associated information defined by the\n       mTAInfo\
    \ attribute.  This information is discussed further in\n       Sections 15 and\
    \ 18.  This information is the key information\n       associated with the node.\
    \  When a node is matched in a lookup, it\n       indicates the validity of the\
    \ route, and a set of MTAs to connect\n       to.  Selection of MTAs is discussed\
    \ in Sections 18 and\n       Section 10.2.\n   routingFailureAction An action\
    \ to be taken if none of the MTAs can be\n       used directly (or if there are\
    \ no MTAs present) is defined by the\n       routingFailureAction attribute. \
    \ Use of this attribute and\n       multiple routing trees is described in Section\
    \ 10.1.\n   accessMD The accessMD attribute is discussed in Section 10.4.  This\n\
    \       attribute is used to indicate MDs which provide indirect access\n    \
    \   to the part of the tree that is being routed to.\n   badAddressSearchPoint/badAddressSearchAttributes\
    \ The\n       badAddressSearchPoint and badAddressSearchAttributes are\n     \
    \  discussed in Section 17.  This attribute is for when an address\n       has\
    \ been rejected, and allows information on alternative addresses\n       to be\
    \ found.\n"
- title: 10.1  Multiple routing trees
  contents:
  - "10.1  Multiple routing trees\n   A routing decision will usually be made on the\
    \ basis of information\n   contained within multiple routing trees.  This section\
    \ describes the\n   algorithms relating to use of multiple routing trees.  Issues\n\
    \   relating to the use of X.500 and handling of errors is discussed in\n   Section\
    \ 14.  The routing decision works by examining a series of\n   entries (nodes)\
    \ in one or more routing trees.  This information is\n   summarised in Figure\
    \ 3.  Each entry may contain information on\n   possible next-hop MTAs.  When\
    \ an entry is found which enables the\n   message to be routed, one of the routing\
    \ options determined at this\n   point is selected, and a routing decision is\
    \ made.  It is possible\n   that further entries may be examined, in order to\
    \ determine other\n   routing options.  This sort of heuristic is not discussed\
    \ here.\n   When a single routing tree is used, the longest possible match based\n\
    \   on the O/R address to be routed to is found.  This entry, and then\n   each\
    \ of its parents in turn is considered, ending with the routing\n   tree root\
    \ node (except in the case of the open routing tree, which\n   does not have such\
    \ a node).  When multiple routing trees are\n   considered, the basic approach\
    \ is to treat them in a defined order.\n   This is supplemented by a mechanism\
    \ whereby if a matched node cannot\n   be used directly, the routing algorithm\
    \ will have the choice to move\n   up a level in the current routing tree, or\
    \ to move on to the next\n   routing tree with an option to move back to the first\
    \ tree later.\n   This option to move back is to allow for the common case where\
    \ a tree\n   is used to specify two things:\n   1.  Routing information private\
    \ to the MTA (e.g., local UAs or routing\n       info for bilateral links).\n\
    \   2.  Default routing information for the case where other routing has\n   \
    \    failed.\n   The actions allow for a tree to be followed, for the private\n\
    \   information, then for other trees to be used, and finally to fall\n   back\
    \ to the default situation.  For very complex configurations it\n   might be necessary\
    \ to split this into two trees.  The options defined\n   by routingFailureAction,\
    \ to be used when the information in the entry\n   does not enable a direct route,\
    \ are:\n   next-level Move up a level in the current routing tree.  This is the\n\
    \       action implied if the attribute is omitted.  This will usually be\n  \
    \     the best action in the open community routing tree.\n   next-tree-only Move\
    \ to the next tree, and do no further processing on\n       the current tree.\
    \  This will be useful optimisation for a routing\n       tree where it is known\
    \ that there is no useful additional routing\n       information higher in the\
    \ routing tree.\n   next-tree-first Move to the next tree, and then default back\
    \ to the\n       next level in this tree when all processing is completed on\n\
    \       subsequent trees.  This will be useful for an MTA to operate in\n    \
    \   the sequence:\n       1.  Check for optimised private routes\n       2.  Try\
    \ other available information\n       3.  Fall back to a local default route\n\
    \   stop This address is unroutable.  No processing shall be done in any\n   \
    \    trees.\n   For the root entry of a routing tree, the default action and next-\n\
    \   level are interpreted as next-tree-only.\n"
- title: 10.2  MTA Choice
  contents:
  - "10.2  MTA Choice\n   This section considers how the choice between alternate\
    \ MTAs is made.\n   First, it is useful to consider the conditions why an MTA\
    \ is entered\n   into a node of the routing tree:\n    o  The manager for the\
    \ node of the tree shall place it there.  This\n       is a formality, but critical\
    \ in terms of overall authority.\n    o  The MTA manager shall agree to it being\
    \ placed there.  For a well\n       operated MTA, the access policy of the MTA\
    \ will be set to enforce\n       this.\n    o  The MTA will in general (for some\
    \ class of message) be prepared\n       to route to any valid O/R address in the\
    \ subtree implied by the\n       address.  The only exception to this is where\
    \ the MTA will route\n       to a subset of the tree which cannot easily be expressed\
    \ by\n       making entries at the level below.  An example might be an MTA\n\
    \       prepared to route to all of the subtree, with certain explicit\n     \
    \  exceptions.\n   Information on each MTA is stored in an mTAInfo attribute,\
    \ which is\n   defined in Figure 3.  This attribute contains:\n   name The Distinguished\
    \ Name of the MTA (Application Process)\n   weight A weighting factor (Route Weight)\
    \ which gives a basis to\n       choose between different MTAs.  This is described\
    \ in Section 10.2.\n   mta-attributes Attributes from the MTA's entry.  Information\
    \ on the\n       MTA will always be stored in the MTA's entry.  The MTA is\n \
    \      represented here as a structure, which enables some of this entry\n   \
    \    information to be represented in the routing node.  This is\n       effectively\
    \ a maintained cache, and can lead to considerable\n       performance optimisation.\
    \  For example if ten MTAs were\n       represented at a node, another MTA making\
    \ a routing decision might\n       need to make ten directory reads in order to\
    \ obtain the\n       information needed.  If any attributes are present here,\
    \ all of\n       the attributes needed to make a routing decision shall be\n \
    \      included, and also all attributes at the Application Entity level.\n  \
    \ ae-info Where an MTA supports a single protocol only, or the\n       protocols\
    \ it supports have address information that can be\n       represented in non-conflicting\
    \ attributes, then the MTA may be\n       represented as an application process\
    \ only.  In this case, the\n       ae-info structure which gives information on\
    \ associated\n       application entities may be omitted, as the MTA is represented\
    \ by\n       a single application entity which has the same name as the\n    \
    \   application process.  In other cases, the names of all application\n     \
    \  entities shall be included.  A weight is associated with each\n       application\
    \ entity to allow the MTA to indicate a preference\n       between its application\
    \ entities.\n   The structure of information within ae-info is as follows:\n \
    \  ae-qualifier A printable string (e.g., \"x400-88\"), which is the\n       value\
    \ of the common name of the relative distinguished name of the\n       application\
    \ entity.  This can be used with the application process\n       name to derive\
    \ the application entity title.\n   ae-weight A weighting factor (Route Weight)\
    \ which gives a basis to\n       choose between different Application Entities\
    \ (not between\n       different MTAs).  This is described below.\n   ae-attributes\
    \ Attributes from the AEs entry.\n   Information in the mta-attributes and ae-info\
    \ is present as a\n   performance optimisation, so that routing choices can be\
    \ made with a\n   much smaller number of directory operations.  Using this information,\n\
    \   whose presence is optional, is equivalent to looking up the\n   information\
    \ in the MTA. If this information is present, it shall be\n   maintained to be\
    \ the same as that information stored in the MTA\n   entry.  Despite this maintenence\
    \ requirement, use of this performance\n   optimisation data is optional, and\
    \ the information may always be\n   looked up from the MTA entry.\n   Note: It\
    \ has been suggested that substantial performance optimisation\n         will\
    \ be achieved by caching, and that the performance gained\n         from maintaining\
    \ these attributes does not justify the effort\n         of maintaining the entries.\
    \  If this is borne out by\n         operational experience, this will be reflected\
    \ in future\n         versions of this specification.\n   Route weighting is a\
    \ mechanism to distinguish between different route\n   choices.  A routing weight\
    \ may be associated with the MTA in the\n   context of a routing tree entry. \
    \ This is because routing weight will\n   always be context dependent.  This will\
    \ allow machines which have\n   other functions to be used as backup MTAs.  The\
    \ Route Weight is an\n   integer in range 0--20.  The lower the value, the better\
    \ the choice\n   of MTA. Where the weight is equal, and no other factors apply,\
    \ the\n   choice between the MTAs shall be random to facilitate load balancing.\n\
    \   If the MTA itself is in the list, it shall only route to an MTA of\n   lower\
    \ weight.  The exact values will be chosen by the manager of the\n   relevant\
    \ part of the routing tree.  For guidance, three fixed points\n   are given:\n\
    \    o  0.  For an MTA which can deliver directly to the entire subtree\n    \
    \   implied by the position in the routing tree.\n    o  5.  For an MTA which\
    \ is preferred for this point in the subtree.\n    o  10.  For a backup MTA.\n\
    \   When an organisation registers in multiple routing trees, the route\n   weight\
    \ used is dependent on the context of the subtree.  In general\n   it is not possible\
    \ to compare weights between subtrees.  In some\n   cases, use of route weighting\
    \ can be used to divert traffic away from\n   expensive links.\n   Attributes\
    \ present in an MTA Entry are defined in various parts of\n   this specification.\
    \  A summary and pointers to these sections is\n   given in Section 16.\n   Attributes\
    \ that are available in the MTA entry and will be needed for\n   making a routing\
    \ choice are:\n   protocolInformation\n   applicationContext\n   mhs-deliverable-content-length\n\
    \   responderAuthenticationRequirements\n   initiatorAuthenticationRequirements\n\
    \   responderPullingAuthenticationRequirements\n   initiatorPullingAuthenticationRequirements\n\
    \   initiatorP1Mode\n   responderP1Mode\n   polledMTAs Current MTA shall be in\
    \ list if message is to be pulled.\n   mTAsAllowedToPoll\n   supportedMTSExtensions\n\
    \   If any MTA attributes are present in the mTAInfo attribute, all of\n   the\
    \ attributes that may affect routing choice shall be present.\n   Other attributes\
    \ may be present.  A full list of MTA attributes, with\n   summaries of their\
    \ descriptions are given in Section 16, with a\n   formal definition in Figure\
    \ 6.\n"
- title: 10.3  Routing Filters
  contents:
  - "10.3  Routing Filters\n   This attribute provides for routing on information\
    \ in the unmatched\n   part of the O/R Address, including:\n    o  Routing on\
    \ the basis of an O/R Address component type\n    o  Routing on the basis of a\
    \ substring match of an O/R address\n       component.  This might be used to\
    \ route X121 addressed faxes to\n       an appropriate MTA.\n   When present,\
    \ the procedures of analysing the routing filters shall\n   be followed before\
    \ other actions.  The routing filter overrides\n   mTAInfo and accessMD attributes,\
    \ which means that the routing filter\n   must be considered first.  Only in the\
    \ event that no routing filters\n   match shall the mTAInfo and accessMD attributes\
    \ be considered.  The\n   components of the routingFilter attribute are:\n   ---------------------------------------------------------------------\n\
    \   attribute-type This gives the attribute type to be matched, and is\n     \
    \  selected from the attribute types which have not been matched to\n       identify\
    \ the routing entry.  The filter applies to this attribute\n       type.  If there\
    \ is no regular expression present (as defined\n       below), the filter is true\
    \ if the attribute is present.  The\n       value is the object identifier of\
    \ the X.500 attribute type\n       (e.g., at-prmd-name).\n   weight This gives\
    \ the weight of the filter, which is encoded as a\n       Route Weight, with lower\
    \ values indicating higher priority.  If\n       multiple filters match, the weight\
    \ of each matched filter is used\n       to select between them.  If the weight\
    \ is the same, then a random\n       choice shall be made.\n   dda-key If the\
    \ attribute is domain defined, then this parameter may\n       be used to identify\
    \ the key.\n   accessMD ATTRIBUTE ::= {\n           SUBTYPE OF distinguishedName\n\
    \           ID at-access-md}\n                        Figure 4:  Indirect Access\n\
    \   ---------------------------------------------------------------------\n  \
    \ regex-match This string is used to give a regular expression match on\n    \
    \   the attribute value.  The syntax for regular expressions is\n       defined\
    \ in Appendix E.\n   node This distinguished name specifies the entry which holds\
    \ routing\n       information for the filter.  It shall be an entry with object\n\
    \       class routingInformation, which can be used to determine the MTA\n   \
    \    or MTA choice.  All of the attributes from this entry should be\n       used,\
    \ as if they had been directly returned from the current entry\n       (i.e.,\
    \ the procedure recurses).  The current entry does not set\n       defaults.\n\
    \   An example of use of routing filters is now given, showing how to\n   route\
    \ on X121 address to a fax gateway in Germany.  Consider the\n   routing point.\n\
    \     PRMD=ABC, ADMD=XYZMail, C=GB\n   The entry associated would have two routing\
    \ filters:\n   1.  One with type x121 and no regular expression, to route a default\n\
    \       fax gateway.\n   2.  One with type x121 and a regular expression ^9262\
    \ to route all\n       German faxes to a fax gateway located in Germany with which\
    \ there\n       is a bilateral agreement.  This would have a lower weight, so\
    \ that\n       it would be selected over the default fax gateway.\n"
- title: 10.4  Indirect Connectivity
  contents:
  - "10.4  Indirect Connectivity\n   In some cases a part of the O/R Address space\
    \ will be accessed\n   indirectly.  For example, an ADMD without access from the\
    \ open\n   community might have an agreement with another MD to provide this\n\
    \   access.  This is achieved by use of the accessMD attribute defined in\n  \
    \ Figure 4.  If this attribute is found, the routing algorithm shall\n   read\
    \ the entry pointed to by this distinguished name.  It shall be an\n   entry with\
    \ object class routingInformation, which can be used to\n   determine the MTA\
    \ or MTA choice and route according to the\n   information retrieve to this access\
    \ MD. All of the attributes from\n   this entry should be used, as if they had\
    \ been directly returned from\n   the current entry (i.e., the procedure recurses).\
    \  The current entry\n   does not set defaults.\n   The attribute is called an\
    \ MD, as this is descriptive of its normal\n   use.  It might point to a more\
    \ closely defined part of the O/R\n   Address space.\n   It is possible for both\
    \ access MD and MTAs to be specified.  This\n   might be done if the MTAs only\
    \ support access over a restricted set\n   of transport stacks.  In this case,\
    \ the access MD shall only be\n   routed to if it is not possible to route to\
    \ any of the MTAs.\n   This structure can also be used as an optimisation, where\
    \ a set of\n   MTAs provides access to several parts of the O/R Address space.\n\
    \   Rather than repeat the MTA information (list of MTAs) in each\n   reference\
    \ to the MD, a single access MD is used as a means of\n   grouping the MTAs. \
    \ The value of the Distinguished Name of the access\n   MD will probably not be\
    \ meaningful in this case (e.g., it might be\n   the name \"Access MTA List\"\
    , within the organisation.)\n   If the MTA routing is unable to access the information\
    \ in the Access\n   MD due to directory security restrictions, the routing algorithm\n\
    \   shall continue as if no MTA information was located in the routing\n   entry.\n"
- title: 11.  Local Addresses (UAs)
  contents:
  - "11.  Local Addresses (UAs)\n   Local addresses (UAs) are a special case for routing:\
    \  the endpoint.\n   The definition of the routedUA object class is given in Figure\
    \ 5.\n   This identifies a User Agent in a routing tree.  This is needed for\n\
    \   several reasons:\n   ---------------------------------------------------------------------\n\
    \   routedUA OBJECT-CLASS ::= {\n       SUBCLASS OF {routingInformation}\n   \
    \    KIND auxiliary\n       MAY CONTAIN {\n                           -- from\
    \ X.402\n           mhs-deliverable-content-length|\n           mhs-deliverable-content-types|\n\
    \           mhs-deliverable-eits|\n           mhs-message-store|             \
    \                            10\n           mhs-preferred-delivery-methods|\n\
    \                           -- defined here\n           supportedExtensions|\n\
    \           redirect|\n           supportingMTA|\n           userName|\n     \
    \      nonDeliveryInfo}\n       ID oc-routed-ua}\n   supportedExtensions ATTRIBUTE\
    \ ::= {                                20\n       SUBTYPE OF objectIdentifier\n\
    \       ID at-supported-extensions}\n   supportingMTA ATTRIBUTE ::= {\n      \
    \ SUBTYPE OF mTAInfo\n       ID at-supporting-mta}\n   userName ATTRIBUTE ::=\
    \ {\n       SUBTYPE OF distinguishedName\n       ID at-user-name}            \
    \                                   30\n                          Figure 5: UA\
    \ Attributes\n   ---------------------------------------------------------------------\n\
    \   1.  To allow UAs to be defined without having an entry in another part\n \
    \      of the DIT.\n   2.  To identify which (leaf and non-leaf) nodes in a routing\
    \ tree are\n       User Agents.  In a pure X.400 environment, a UA (as distinct\
    \ from\n       a connecting part of the O/R address space) is simply identified\n\
    \       by object class.  Thus an organisation entry can itself be a UA. A\n \
    \      UA need not be a leaf, and can thus have children in the tree.\n   3. \
    \ To allow UA parameters as defined in X.402 (e.g., the\n       mhs-deliverable-eits)\
    \ to be determined efficiently from the\n       routing tree, without having to\
    \ go to the user's entry.\n   4.  To provide access to other information associated\
    \ with the UA, as\n       defined below.\n   The following attributes are defined\
    \ associated with the UA.\n   supportedExtensions MTS extensions supported by\
    \ the MTA, which affect\n       delivery.\n   supportingMTA The MTAs which support\
    \ a UA directly are noted in the\n       supportingMTA attribute, which may be\
    \ multi-valued.  In the X.400\n       model, only one MTA is associated with a\
    \ UA. In practice, it is\n       possible and useful for several MTAs to be able\
    \ to deliver to a\n       single UA. This attribute is a subtype of mTAInfo, and\
    \ it defines\n       access information for an MTA which is able to deliver to\
    \ the UA.\n       There may also be an mTAInfo attribute in the entry.\n     \
    \  Components of the supportingMTA attribute are interpreted in the\n       same\
    \ manner as mtaInfo is for routing, with one exception.  The\n       values of\
    \ the Route Weight are interpreted in the following\n       manner:\n        o\
    \  0.  A preferred MTA for delivery.\n        o  5.  A backup MTA.\n        o\
    \  10.  A backup MTA, which is not presferred.\n       The supportingMTA attribute\
    \ shall be present, unless the address\n       is being non-delivered or redirected,\
    \ in which case it may be\n       omitted.\n   redirect The redirect attribute\
    \ controls redirects, as described in\n       Section 22.1.\n   userName The attribute\
    \ userName points to the distinguished Name of\n       the user, as defined by\
    \ the mhs-user in X.402.  The pointer from\n       the user to the O/R Address\
    \ is achieved by the mhs-or-addresses\n       attribute.  This makes the UA/User\
    \ linkage symmetrical.\n   nonDeliveryInfo The attribute nonDeliveryInfo mandates\
    \ non-delivery\n       to this address, as described in Section 22.3.\n   When\
    \ routing to a UA, an MTA will read the supportingMTA attribute.\n   If it finds\
    \ its own name present, it will know that the UA is local,\n   and invoke appropriate\
    \ procedures for local delivery (e.g., co-\n   resident or P3 access information).\
    \  The cost of holding these\n   attributes for each UA at a site will often be\
    \ reduced by use of\n   shared attributes (as defined in X.500(93)).\n   Misconfiguration\
    \ of the supportingMTA attribute could have serious\n   operational and possibly\
    \ security problems, although for the most\n   part no worse than general routing\
    \ configuration problems.  An MTA\n   using this attribute may choose to perform\
    \ certain sanity checks,\n   which might be to verify the routing tree or subtree\
    \ that the entry\n   resides in.\n   The linkage between the UA and User entries\
    \ was noted above.  It is\n   also possible to use a single entry for both User\
    \ and UA, as there is\n   no conflict between the attributes in each of the objects.\
    \  In this\n   case, the entries shall be in one part of the DIT, with aliases\
    \ from\n   the other.  Because the UA and User are named with different\n   attributes,\
    \ the aliases shall be at the leaf level.\n"
- title: 11.1  Searching for Local Users
  contents:
  - "11.1  Searching for Local Users\n   The approach defined in this specification\
    \ performs all routing by\n   use of reads.  This is done for performance reasons,\
    \ as it is a\n   reasonable expectation that all DSA implementations will support\
    \ a\n   high performance read operation.  For local routing only, an MTA in\n\
    \   cooperation with the provider of the local routing tree may choose to\n  \
    \ use a search operation to perform routing.  The major benefit of this\n   is\
    \ that there will not be a need to store aliases for alternate\n   names, and\
    \ so the directory storage requirement and alias management\n   will be reduced.\
    \  The difficulty with this approach is that it is\n   hard to define search criteria\
    \ that would be effective in all\n   situations and well supported by all DUAs.\
    \  There are also issues\n   about determining the validity of a route on the\
    \ basis of partial\n   matches.\n"
- title: 12.  Direct Lookup
  contents:
  - "12.  Direct Lookup\n   Where an O/R address is registered in the open community\
    \ and has one\n   or more \"open\" MTAs which support it, this will be optimised\
    \ by\n   storing MTA information in the O/R address entry.  In general, the\n\
    \   Directory will support this by use of attribute inheritance or an\n   implementation\
    \ will optimise the storage or repeated information, and\n   so there will not\
    \ be a large storage overhead implied.  This is a\n   function of the basic routing\
    \ approach.  As a further optimisation of\n   this case, the User's distinguished\
    \ name entry may contain the\n   mTAInfo attribute.  This can be looked up from\
    \ the distinguished\n   name, and thus routing on submission can be achieved by\
    \ use of a\n   single read.\n   Note: This performance optimisation has a management\
    \ overhead, and\n         further experience is needed to determine if the effort\n\
    \         justifies the performance improvement.\n"
- title: 13.  Alternate Routes
  contents:
  - '13.  Alternate Routes

    '
- title: 13.1  Finding Alternate Routes
  contents:
  - "13.1  Finding Alternate Routes\n   The routing algorithm selects a single MTA\
    \ to be routed to.  It could\n   be extended to find alternate routes to a single\
    \ MTA with possibly\n   different weights.  How far this is done is a local configuration\n\
    \   choice.  Provision of backup routing is desirable, and leads to\n   robust\
    \ service, but excessive use of alternate routing is not usually\n   beneficial.\
    \  It will often force messages onto convoluted paths, when\n   there was only\
    \ a short outage on the preferred path.  It is important\n   to note that this\
    \ strategy will lead to picking the first acceptable\n   route.  It is important\
    \ to configure the routing trees so that the\n   first route identified will also\
    \ be the best route.\n"
- title: 13.2  Sharing routing information
  contents:
  - "13.2  Sharing routing information\n   So far, only single addresses have been\
    \ considered.  Improving\n   routing choice for multiple addresses is analogous\
    \ to dealing with\n   multiple routes.  This section defines an optional improvement.\
    \  When\n   multiple addresses are present, and alternate routes are available,\n\
    \   the preferred routes may be chosen so as to maximise the number of\n   recipients\
    \ sent with each message.\n   Specification of routing trees can facilitate this\
    \ optimisation.\n   Suppose there is a set of addresses (e.g., in an organisation)\
    \ which\n   have different MTAs, but have access to an MTA which will do local\n\
    \   switching.  If each address is registered with the optimal MTA as\n   preferred,\
    \ but has the \"hub\" MTA registered with a higher route\n   weight, then optimisation\
    \ may occur when a message is sent to\n   multiple addresses in the group.\n"
- title: 14.  Looking up Information in the Directory
  contents:
  - "14.  Looking up Information in the Directory\n   The description so far has been\
    \ abstract about lookup of information.\n   This section considers how information\
    \ is looked up in the Directory.\n   Consider that an O/R Address is presented\
    \ for lookup, and there is a\n   sequence of routing trees.  At any point in the\
    \ lookup sequence,\n   there is one of a set of actions that can take place:\n\
    \   Entry Found Information from the entry (node) is returned and shall\n    \
    \   be examined.  The routing process continues or terminates, based\n       on\
    \ this information.\n   Entry Not Found Return information on the length of best\
    \ possible\n       match to the routing algorithm.\n   Temporary Reject The MTA\
    \ shall stop the calculation, and repeat the\n       request later.  Repeated\
    \ temporary rejects should be handled in a\n       similar manner to the way the\
    \ local MTA would handle the failure\n       to connect to a remote MTA.\n   Permanent\
    \ Reject Administrative error on the directory which may be\n       fixed in future,\
    \ but which currently prevents routing.  The\n       routing calculation should\
    \ be stopped and the message\n       non-delivered.\n   The algorithm proceeds\
    \ by a series of directory read operations.  If\n   the read operation is successful,\
    \ the Entry Found procedure should be\n   followed.  Errors from the lookup (directory\
    \ read) shall be handled\n   in terms of the above procedures as follows.  The\
    \ following handling\n   is used when following a routing tree:\n   AttributeError\
    \ This leads to a Permanent Reject.\n   NameError Entry Not Found is used.  The\
    \ matched parameter is used to\n       determine the number of components of the\
    \ name that have matched\n       (possibly zero).  The read may then repeated\
    \ with this name.\n       This is the normal case, and allows the \"best\" entry\
    \ in the\n       routingn tree to be located with two reads.\n   Referral The\
    \ referral shall be followed, and then the procedure\n       recurses.\n   SecurityError\
    \ Entry Not Found is used.  Return a match length of one\n       less than the\
    \ name provided.\n   ServiceError This leads to a Temporary Reject.\n   There\
    \ will be cases where the algorithm moves to a name outside of\n   the routing\
    \ tree being followed (Following an accessMD attribute, or\n   a redirect or a\
    \ matched routing filter).  The handling will be the\n   same as above, except:\n\
    \   NameError This leads to a Permanent Reject.\n   SecurityError This leads to\
    \ a Permanent Reject.\n   When reading objects which of not of object class routingInformation,\n\
    \   the following error handling is used:\n   AttributeError This leads to a Permanent\
    \ Reject.\n   NameError This leads to a Permanent Reject.\n   Referral The referral\
    \ shall be followed, and then the procedure\n       recurses.\n   SecurityError\
    \ In the case of an MTA, treat as if it is not possible\n       to route to this\
    \ MTA. In other cases, this leads to a Permanent\n       Reject.\n   ServiceError\
    \ This leads to a Temporary Reject.\n   The algorithm specifies the object class\
    \ of entries which are read.\n   If an object class does not match what is expected,\
    \ this shall lead\n   to a permanent reject.\n"
- title: 15.  Naming MTAs
  contents:
  - "15.  Naming MTAs\n   MTAs need to be named in the DIT, but the name does not\
    \ have routing\n   significance.  The MTA name is simply a unique key.  Attributes\n\
    \   associated with naming MTAs are given in Figure 6.  This figure also\n   gives\
    \ a list of attributes, which may be present in the MTA entry.\n   The use of\
    \ most of these is explained in subsequent sections.  The\n   mTAName and globalDomainID\
    \ attributes are needed to define the\n   information that an MTA places in trace\
    \ information.  As noted\n   previously, an MTA is represented as an Application\
    \ Process, with one\n   or more Application Entities.\n   ---------------------------------------------------------------------\n\
    \   mTAName ATTRIBUTE ::= {\n       SUBTYPE OF name\n       WITH SYNTAX DirectoryString{ub-mta-name-length}\n\
    \       SINGLE VALUE\n       ID at-mta-name}\n                           -- used\
    \ for naming when\n                           -- MTA is named in O=R Address Hierarchy\n\
    \   globalDomainID ATTRIBUTE ::= {                                     10\n  \
    \     WITH SYNTAX GlobalDomainIdentifier\n       SINGLE VALUE\n       ID at-global-domain-id}\n\
    \                           -- both attributes present when MTA\n            \
    \               -- is named outside O=R Address Hierarchy\n                  \
    \         -- to enable trace to be written\n   mTAApplicationProcess OBJECT-CLASS\
    \ ::= {\n       SUBCLASS OF {application-process}\n       KIND auxiliary     \
    \                                            20\n       MAY CONTAIN {\n      \
    \     mTAWillRoute|\n           globalDomainID|\n           routingTreeList|\n\
    \           localAccessUnit|\n           accessUnitsUsed\n       }\n       ID\
    \ oc-mta-application-process}\n   mTA OBJECT CLASS ::= {   -- Application Entity\
    \                     30\n       SUBCLASS OF {mhs-message-transfer-agent}\n  \
    \     KIND structural\n       MAY CONTAIN {\n           mTAName|\n           globalDomainID|\
    \         -- per AE variant\n           responderAuthenticationRequirements|\n\
    \           initiatorAuthenticationRequirements|\n           responderPullingAuthenticationRequirements|\n\
    \           initiatorPullingAuthenticationRequirements|\n           initiatorP1Mode|\
    \                                           40\n           responderP1Mode|\n\
    \           polledMTAs|\n           protocolInformation|\n           respondingRTSCredentials|\n\
    \           initiatingRTSCredentials|\n           callingPresentationAddress|\n\
    \           callingSelectorValidity|\n           bilateralTable|\n           mTAWillRoute|\n\
    \           mhs-deliverable-content-length|                            50\n  \
    \         routingTreeList|\n           supportedMTSExtensions|\n           mTAsAllowedToPoll\n\
    \           }\n       ID oc-mta}\n                        Figure 6:  MTA Definitions\n\
    \   ---------------------------------------------------------------------\n  \
    \ In X.400 (1984), MTAs are named by MD and a single string.  This\n   style of\
    \ naming is supported, with MTAs named in the O/R Address tree\n   relative to\
    \ the root of the DIT (or possibly in a different routing\n   tree).  The mTAName\
    \ attribute is used to name MTAs in this case.  For\n   X.400(88) the Distinguished\
    \ Name shall be passed as an AE Title.\n   MTAs may be named with any other DN,\
    \ which can be in the O/R Address\n   or Organisational DIT hierarchy.  There\
    \ are several reasons why MTAs\n   might be named differently.\n    o  The flat\
    \ naming space is inadequate to support large MDs.  MTA\n       name assignment\
    \ using the directory would be awkward.\n    o  An MD does not wish to register\
    \ its MTAs in this way (essentially,\n       it prefers to give them private names\
    \ in the directory).\n    o  An organisation has a policy for naming application\
    \ processes,\n       which does not fit this approach.\n   In this case, the MTA\
    \ entry shall contain the correct information to\n   be inserted in trace.  The\
    \ mTAName and globalDomainID attributes are\n   used to do this.  They are single\
    \ value.  For an MTA which inserts\n   different trace in different circumstances,\
    \ a more complex approach\n   would be needed.\n   An MD may choose to name its\
    \ MTAs outside of the O/R address\n   hierarchy, and then link some or all of\
    \ them with aliases.  A pointer\n   from this space may help in resolving information\
    \ based on MTA Trace.\n   The situation considered so far is where an MTA supports\
    \ one\n   application context (protocol).  The MTA is represented in the\n   directory\
    \ by a single directory entry, having no subordinate\n   applicationEntity entries.\
    \  This name is considered to be the name of\n   the MTA and its Application Process\
    \ Title.  The MTA has no\n   Application Entity Qualifier, and so this is also\
    \ the Application\n   Entity Title.  In the case where an MTA supports more than\
    \ one\n   application context, the Application Process Title is exactly the\n\
    \   same as above, but it also has one or more subordinate\n   applicationEntity\
    \ entries.  Each of these subordinate entries is\n   associated with a single\
    \ application context.  The relative\n   distinguished name of the subordinate\
    \ applicationEntity entry is the\n   Application Entity Qualifier of the Application\
    \ Entity Title.  The\n   Application Entity Title is the distinguished name of\
    \ the\n   applicationEntity.  The term MTA Name is used to refer to the\n   Application\
    \ Process Title.\n"
- title: 15.1  Naming 1984 MTAs
  contents:
  - "15.1  Naming 1984 MTAs\n   Some simplifications are necessary for 1984 MTAs,\
    \ and only one naming\n   approach may be used.  This is because Directory Names\
    \ are not\n   carried in the protocol, and so it must be possible to derive the\n\
    \   name algorithmically from parameters carried.  In X.400, MTAs are\n   named\
    \ by MD and a single string.  This style of naming is supported,\n   with MTAs\
    \ named in the O/R Address tree relative to the root of the\n   DIT (or possibly\
    \ in a different routing tree).  The MTAName attribute\n   is used to name MTAs\
    \ in this case.\n"
- title: 16.  Attributes Associated with the MTA
  contents:
  - "16.  Attributes Associated with the MTA\n   This section lists the attributes\
    \ which may be associated with an MTA\n   as defined in Figure 6, and gives pointers\
    \ to the sections that\n   describe them.\n   mTAName Section 15.\n   globalDomainID\
    \ Section 15.\n   protocolInformation Section 18.1.\n   applicationContext Section\
    \ 18.2.\n   mhs-deliverable-content-length Section 18.3.\n   responderAuthenticationRequirements\
    \ Section 20.2.\n   initiatorAuthenticationRequirements Section 20.2.\n   responderPullingAuthenticationRequirements\
    \ Section 20.2.\n   initiatorPullingAuthenticationRequirements Section 20.2.\n\
    \   initiatorP1Mode Section 19.\n   responderP1Mode Section 19.\n   polledMTAs\
    \ Section 19.\n   mTAsAllowedToPoll Section 19.\n   respondingRTSCredentials Section\
    \ 20.3.\n   initiatingRTSCredentials Section 20.3.\n   callingPresentationAddress\
    \ Section 20.3.\n   callingSelectorValidity Section 20.3.\n   bilateralTable Section\
    \ 17.\n   mTAWillRoute Section 21.\n   routingTreeList Section 9.\n   supportedMTSExtensions\
    \ Section 18.3.\n   ---------------------------------------------------------------------\n\
    \   mTABilateralTableEntry OBJECT-CLASS ::=\n       SUBCLASS OF {mTA| distinguishedNameTableEntry}\n\
    \       ID oc-mta-bilateral-table-entry}\n                   Figure 7:  MTA Bilateral\
    \ Table Entry\n   ---------------------------------------------------------------------\n"
- title: 17.  Bilateral Agreements
  contents:
  - "17.  Bilateral Agreements\n   Each MTA has an entry in the DIT. This will be\
    \ information which is\n   globally valid, and will be useful for handling general\
    \ information\n   about the MTA and for information common to all connections.\
    \  In many\n   cases, this will be all that is needed.  This global information\
    \ may\n   be restricted by access control, and so need not be globally\n   available.\
    \  In some cases, MTAs will maintain bilateral and\n   multilateral agreements,\
    \ which hold authentication and related\n   information which is not globally\
    \ valid.  This section describes a\n   mechanism for grouping such information\
    \ into tables, which enables an\n   MTA to have bilateral information or for a\
    \ group of MTAs to share\n   multilateral information.  The description is for\
    \ bilateral\n   information, but is equally applicable to multilateral agreements.\n\
    \   For the purpose of a bilateral agreement, the MTA is considered to be\n  \
    \ an application entity.  This means that when this is distinct from\n   the application\
    \ process, that the agreements are protocol specific.\n   A bilateral agreement\
    \ is represented by one entry associated with\n   each MTA participating in the\
    \ bilateral agreement.  For one end of\n   the bilateral agreement, the agreement\
    \ information will be keyed by\n   the name of the MTA at the other end.  Each\
    \ party to the agreement\n   will set up the entry which represents its half of\
    \ the agreed policy.\n   The fact that these correspond is controlled by the external\n\
    \   agreement.  In many cases, only one half of the agreement will be in\n   the\
    \ directory.  The other half might be in an ADMD MTA configuration\n   file.\n\
    \   MTA bilateral information is stored in a table, as defined in [15].\n   An\
    \ MTA has access to a sequence of such tables, each of which\n   controls agreements\
    \ in both directions for a given MTA. Where an MTA\n   is represented in multiple\
    \ tables, the first agreement shall be used.\n   This allows an MTA to participate\
    \ in multilateral agreements, and to\n   have private agreements which override\
    \ these.  The definition of\n   entries in this table are defined in Figure 7.\
    \  This table will\n   usually be access controlled so that only a single MTA\
    \ or selected\n   MTAs which appear externally as one MTA can access it.\n   ---------------------------------------------------------------------\n\
    \   bilateralTable ATTRIBUTE ::= {\n           WITH SYNTAX SEQUENCE OF DistinguishedName\n\
    \           SINGLE VALUE\n           ID at-bilateral-table}\n                \
    \   Figure 8:  Bilateral Table Attribute\n   ---------------------------------------------------------------------\n\
    \   Each entry in the table is of the object class\n   distinguishedNameTableEntry,\
    \ which is used to name the entry by the\n   distinguished name of the MTA. In\
    \ some cases discussed in Section\n   20.1, there will also be aliases of type\
    \ textTableEntry.  The MTA\n   attributes needed as a part of the bilateral agreement\
    \ (typically MTA\n   Name/Password pairs), as described in Section 20.3, will\
    \ always be\n   present.  Other MTA attributes (e.g., presentation address) may\
    \ be\n   present for one of two reasons:\n   1.  As a performance optimisation\n\
    \   2.  Because the MTA does not have a global entry\n   Every MTA with bilateral\
    \ agreements will define a bilateral MTA\n   table.  When a connection from a\
    \ remote MTA is received, its\n   Distinguished Name is used to generate the name\
    \ of the table entry.\n   For 1984, the MTA Name exchanged at the RTS level is\
    \ used as a key\n   into the table.  The location of the bilateral tables used\
    \ by the MTA\n   and the order in which they are used are defined by the\n   bilateralTable\
    \ attribute in the MTA entry, which is defined in Figure\n   8.\n   All of the\
    \ MTA information described in Section 16 may be used in the\n   bilateral table\
    \ entries.  This will allow bilateral control of a wide\n   range of parameters.\n\
    \   Note: For some bilateral connections there is a need control various\n   \
    \      other functions, such as trace stripping and originator address\n     \
    \    manipulation.  For now, this is left to implementation specific\n       \
    \  extensions.  This is expected to be reviewed in light of\n         implementation\
    \ experience.\n"
- title: 18.  MTA Selection
  contents:
  - '18.  MTA Selection

    '
- title: 18.1  Dealing with protocol mismatches
  contents:
  - "18.1  Dealing with protocol mismatches\n   MTAs may operate over different stacks.\
    \  This means that some MTAs\n   cannot talk directly to each other.  Even where\
    \ the protocols are the\n   same, there may be reasons why a direct connection\
    \ is not possible.\n   An environment where there is full connectivity over a\
    \ single stack\n   is known as a transport community [9].  The set of transport\n\
    \   communities supported by an MTA is specified by use of the\n   protocolInformation\
    \ attribute defined in X.500(93).  This is\n   represented as a separate attribute\
    \ for the convenience of making\n   routing decisions.\n   ---------------------------------------------------------------------\n\
    \   supportedMTSExtensions ATTRIBUTE ::= {\n       SUBTYPE OF objectIdentifier\n\
    \       ID at-supported-mts-extensions}\n                    Figure 9:  Supported\
    \ MTS Extensions\n   ---------------------------------------------------------------------\n\
    \   A community is identified by an object identifier, and so the\n   mechanism\
    \ supports both well known and private communities.  A list\n   of object identifiers\
    \ corresponding to well known communities is\n   given in Appendix B.\n"
- title: 18.2  Supported Protocols
  contents:
  - "18.2  Supported Protocols\n   It is important to know the protocol capabilities\
    \ of an MTA. This is\n   done by the application context.  There are standard\
    \ definitions for\n   the following 1988 protocols.\n    o  P3 (with and without\
    \ RTS, both user and MTS initiated)\n    o  P7 (with and without RTS).\n    o\
    \  P1 (various modes).  Strictly, this is the only one that matters\n       for\
    \ routing.\n   In order to support P1(1984) and P1(1988) in X.410 mode, application\n\
    \   contexts which define these protocols are given in Appendix C.  This\n   context\
    \ is for use in the directory only, and would never be\n   exchanged over the\
    \ network.\n   For routing purposes, a message store which is not co-resident\
    \ with\n   an MTA is represented as if it had a co-resident MTA and configured\n\
    \   with a single link to its supporting MTA.\n   In cases where the UA is involved\
    \ in exchanges, the UA will be of\n   object class mhs-user-agent, and this will\
    \ allow for appropriate\n   communication information to be registered.\n"
- title: 18.3  MTA Capability Restrictions
  contents:
  - "18.3  MTA Capability Restrictions\n   In addition to policy restrictions, described\
    \ in Section 21, an MTA\n   may have capability restrictions.  The maximum size\
    \ of MPDU is\n   defined by the standard attribute mhs-deliverable-content-length.\n\
    \   The supported MTS extensions are defined by a new attribute specified\n  \
    \ in Figure 9.\n   ---------------------------------------------------------------------\n\
    \   restrictedSubtree OBJECT-CLASS ::= {\n           SUBCLASS OF {top}\n     \
    \      KIND auxiliary\n           MAY CONTAIN {\n                   subtreeDeliverableContentLength|\n\
    \                   subtreeDeliverableContentTypes|\n                   subtreeDeliverableEITs}\n\
    \           ID oc-restricted-subtree}\n                                      \
    \                                10\n   subtreeDeliverableContentLength ATTRIBUTE\
    \ ::= {\n           SUBTYPE OF mhs-deliverable-content-length\n           ID at-subtree-deliverable-content-length}\n\
    \   subtreeDeliverableContentTypes ATTRIBUTE ::= {\n           SUBTYPE OF mhs-deliverable-content-types\n\
    \           ID at-subtree-deliverable-content-types}\n   subtreeDeliverableEITs\
    \ ATTRIBUTE ::= {\n           SUBTYPE OF mhs-deliverable-eits                \
    \            20\n           ID at-subtree-deliverable-eits}\n                Figure\
    \ 10:  Subtree Capability Restriction\n   ---------------------------------------------------------------------\n\
    \   It may be useful to define other capability restrictions, for example\n  \
    \ to enable routing of messages around MTAs with specific deficiencies.\n   It\
    \ has been suggested using MTA capabilities as an optimised means of\n   expressing\
    \ capabilities of all users associated with the MTA. This is\n   felt to be undesirable.\n"
- title: 18.4  Subtree Capability Restrictions
  contents:
  - "18.4  Subtree Capability Restrictions\n   In many cases, users of a subtree will\
    \ share the same capabilities.\n   It is possible to specify this by use of attributes,\
    \ as defined in\n   Figure 10.  This will allow for restrictions to be determined\
    \ in\n   cases where there is no entry for the user or O/R Address.  This will\n\
    \   be a useful optimisation in cases where the UA capability information\n  \
    \ is not available from the directory, either for policy reasons or\n   because\
    \ it is not there.  This information may also be present in the\n   domain tree\
    \ (RFC 822).\n   This shall be implemented as a collective attribute, so that\
    \ it is\n   available to all entries in the subtree below the entry.  This can\n\
    \   also be used for setting defaults in the subtree.\n   ---------------------------------------------------------------------\n\
    \   initiatorP1Mode ATTRIBUTE ::= {\n       WITH SYNTAX P1Mode\n       SINGLE\
    \ VALUE\n       ID at-initiator-p1-mode}\n   responderP1Mode ATTRIBUTE ::= {\n\
    \       WITH SYNTAX P1Mode\n       SINGLE VALUE\n       ID at-responder-p1-mode}\
    \                                       10\n   P1Mode ::= ENUMERATED {\n     \
    \  push-only(0),\n       pull-only(1),\n       twa(2) }\n   polledMTAs ATTRIBUTE\
    \ ::= {\n       WITH SYNTAX PolledMTAs\n       ID at-polled-mtas}\n          \
    \                                                            20\n   PolledMTAs\
    \ ::= SEQUENCE {\n           mta DistinguishedName,\n           poll-frequency\
    \ INTEGER OPTIONAL --frequency in minutes\n           }\n   mTAsAllowedToPoll\
    \ ATTRIBUTE ::= {\n           SUBTYPE OF distinguishedName\n           ID at-mtas-allowed-to-poll}\n\
    \                       Figure 11:  Pulling Messages\n   ---------------------------------------------------------------------\n"
- title: 19.  MTA Pulling Messages
  contents:
  - "19.  MTA Pulling Messages\n   Pulling messages between MTAs, typically by use\
    \ of two way alternate,\n   is for bilateral agreement.  It is not the common\
    \ case.  There are\n   two circumstances in which it can arise.\n   1.  Making\
    \ use of a connection that was opened to push messages.\n   2.  Explicitly polling\
    \ in order to pull messages\n   Attributes to support this are defined in Figure\
    \ 11.  These\n   attributes indicate the capabilities of an MTA to pull messages,\
    \ and\n   allows a list of polled MTAs to be specified.  If omitted, the normal\n\
    \   case of push-only is specified.  In the MTA Entry, the polledMTAs\n   attribute\
    \ indicates MTAs which are to be polled and the\n   mTAsAllowedToPoll attribute\
    \ indicates MTAs that may poll the current\n   MTA.\n"
- title: 20.  Security and Policy
  contents:
  - '20.  Security and Policy

    '
- title: 20.1  Finding the Name of the Calling MTA
  contents:
  - "20.1  Finding the Name of the Calling MTA\n   A key issue for authentication\
    \ is for the called MTA to find the name\n   of the calling MTA. This is needed\
    \ for it to be able to look up\n   information on a bilateral agreement.\n   Where\
    \ X.400(88) is used, the name is available as a distinguished\n   name from the\
    \ AE-Title derived from the AP-Title and AE-Qualifier in\n   the A-Associate.\
    \  For X.400(84), it will not be possible to derive a\n   global name from the\
    \ bind.  The MTA Name exchanged in the RTS Bind\n   will provide a key into the\
    \ private bilateral agreement table (or\n   tables), where the connection information\
    \ can be verified.  Thus for\n   X.400(1984) it will only be possible to have\
    \ bilateral inbound links\n   or no authentication of the calling MTA.\n   Note:\
    \ CDC use a search here, as a mechanism to use a single table and\n         an\
    \ 88/84 independent access.  This may be considered for general\n         adoption.\
    \  It appears to make the data model cleaner, possibly\n         at the expense\
    \ of some performance.  This will be considered in\n         the light of implementation\
    \ experience.\n"
- title: 20.2  Authentication
  contents:
  - "20.2  Authentication\n   The levels of authentication required by an MTA will\
    \ have an impact\n   on routing.  For example, if an MTA requires strong authentication,\n\
    \   not all MTAs will be able to route to it.  The attributes which\n   define\
    \ the authentication requirements are defined in Figure 12.\n   The attributes\
    \ specify authentication levels for the following cases:\n   Responder These are\
    \ the checks that the responder will make on the\n       initiator's credentials.\n\
    \   Initiator These are the checks that the initiator will make on the\n     \
    \  responders credentials.  Very often, no checks are needed ---\n       establishing\
    \ the connection is sufficient.\n   Responder Pulling These are responder checks\
    \ when messages are\n       pulled.  These will often be stronger than for pushing.\n\
    \   Initiator Pulling For completeness.\n   If an attribute is omitted, no checks\
    \ are required.  If multiple\n   checks are required, then each of the relevant\
    \ bits shall be set.\n   The attribute is single value, which implies that the\
    \ MTA must set a\n   single authentication policy.\n   ---------------------------------------------------------------------\n\
    \   responderAuthenticationRequirements ATTRIBUTE ::= {\n      WITH SYNTAX AuthenticationRequirements\n\
    \      SINGLE VALUE\n      ID at-responder-authentication-requirements}\n   initiatorAuthenticationRequirements\
    \ ATTRIBUTE ::= {\n      WITH SYNTAX AuthenticationRequirements\n      SINGLE\
    \ VALUE\n      ID at-initiator-authentication-requirements}                  \
    \  10\n   responderPullingAuthenticationRequirements ATTRIBUTE ::= {\n      WITH\
    \ SYNTAX AuthenticationRequirements\n      SINGLE VALUE\n      ID at-responder-pulling-authentication-requirements}\n\
    \   initiatorPullingAuthenticationRequirements ATTRIBUTE ::= {\n      WITH SYNTAX\
    \ AuthenticationRequirements\n      SINGLE VALUE\n      ID at-initiator-pulling-authentication-requirements}\
    \            20\n   AuthenticationRequirements ::= BITSTRING {\n       mta-name-present(0),\n\
    \       aet-present(1),\n       aet-valid(2),\n       network-address(3),\n  \
    \     simple-authentication(4),\n       strong-authentication(5),\n       bilateral-agreement-needed(6)}\n\
    \                  Figure 12:  Authentication Requirements\n   ---------------------------------------------------------------------\n\
    \   The values of the authentication requirements mean:\n   mta-name-present That\
    \ an RTS level MTA parameter shall be present for\n       logging purposes.\n\
    \   aet-present That a distinguished name application entity title shall\n   \
    \    be provided at the ACSE level.\n   aet-valid As for aet-present, and that\
    \ the AET be registered in the\n       directory.  This may be looked up as a\
    \ part of the validation\n       process.  If mta-name-present is set, the RTS\
    \ value of mta and\n       password shall correspond to those registered in the\
    \ directory.\n   network-address This can only be used for the responder.  The\
    \ AET\n       shall be looked up in the directory, and the\n       callingPresentationAddress\
    \ attribute matched against the calling\n       address.  This shall match exactly\
    \ at the network level.  The\n       validity of selectors will be matched according\
    \ to the\n       callingSelectorValidity attribute.\n   simple-authentication\
    \ All MTA and password parameters needed for\n       simple authentication shall\
    \ be used.  This will usually be in\n       conjunction with a bilateral agreement.\n\
    \   strong-authentication Use of strong authentication.\n   bilateral-agreement-needed\
    \ This means that this MTA will only accept\n       connections in conjunction\
    \ with a bilateral or multilateral\n       agreements.  This link cannot be used\
    \ unless such an agreement\n       exists.\n   These attributes may also be used\
    \ to specify UA/MTA authentication\n   policy.  They may be resident in the UA\
    \ entry in environments where\n   this information cannot be modified by the user.\
    \  Otherwise, it will\n   be present in an MTA table (represented in the directory).\n\
    \   An MTA could choose to have different authentication levels related\n   to\
    \ different policies (Section 21).  This is seen as too complex, and\n   so they\
    \ are kept independent.  The equivalent function can always be\n   achieved by\
    \ using multiple Application Entities with the application\n   process.\n"
- title: 20.3  Authentication Information
  contents:
  - "20.3  Authentication Information\n   This section specifies connection information\
    \ needed by P1.  This is\n   essentially RTS parameterisation needed for authentication.\
    \  This is\n   defined in Figure 13.  Confidential bilateral information is implied\n\
    \   by these attributes, and this will be held in the bilateral\n   information\
    \ agreement.  This shall have appropriate access control\n   applied.  Note that\
    \ in some cases, MTA information will be split\n   across a private and public\
    \ entry.\n   ---------------------------------------------------------------------\n\
    \   respondingRTSCredentials ATTRIBUTE ::= {\n           WITH SYNTAX RTSCredentials\n\
    \           SINGLE VALUE\n           ID at-responding-rts-credentials}\n   initiatingRTSCredentials\
    \ ATTRIBUTE ::= {\n           WITH SYNTAX RTSCredentials\n           SINGLE VALUE\
    \                                               10\n           ID at-initiating-rts-credentials}\n\
    \   RTSCredentials ::= SEQUENCE {\n           request [0] MTAandPassword OPTIONAL,\n\
    \           response [1] MTAandPassword OPTIONAL }\n   MTAandPassword ::= SEQUENCE\
    \ {\n           MTAName,                                                   20\n\
    \           Password }              -- MTAName and Password\n                \
    \                   -- from X.411\n   callingPresentationAddress ATTRIBUTE ::=\
    \ {\n           SUBTYPE OF presentationAddress\n           MULTI VALUE\n     \
    \      ID at-calling-presentation-address}\n   callingSelectorValidity ATTRIBUTE\
    \ ::= {                            30\n           WITH SYNTAX CallingSelectorValidity\n\
    \           SINGLE VALUE\n           ID at-calling-selector-validity}\n   CallingSelectorValidity\
    \ ::= ENUMERATED {\n           all-selectors-fixed(0),\n           tsel-may-vary(1),\n\
    \           all-selectors-may-vary(2) }\n                 Figure 13:  MTA Authentication\
    \ Parameters\n   ---------------------------------------------------------------------\n\
    \   ---------------------------------------------------------------------\n  \
    \ mTAWillRoute ATTRIBUTE ::= {\n       WITH SYNTAX MTAWillRoute\n       ID at-mta-will-route}\n\
    \   MTAWillRoute ::= SEQUENCE {\n           from [0]        SET OF ORAddressPrefix\
    \ OPTIONAL,\n           to [1]          SET OF ORAddressPrefix OPTIONAL,\n   \
    \        from-excludes [2]       SET OF ORAddressPrefix OPTIONAL,\n          \
    \ to-excludes [3]         SET OF ORAddressPrefix OPTIONAL }  10\n   ORAddressPrefix\
    \ ::= DistinguishedName\n                Figure 14:  Simple MTA Policy Specification\n\
    \   ---------------------------------------------------------------------\n  \
    \ The parameters are:\n   Initiating Credentials The credentials to be used when\
    \ the local MTA\n       initiates the association.  It gives the credentials to\
    \ insert\n       into the request, and those expected in the response.\n   Responding\
    \ Credentials The credentials to be used when the remote MTA\n       initiates\
    \ the association.  It gives the credential expected in\n       the request, and\
    \ those to be inserted into the response.\n   Remote Presentation Address Valid\
    \ presentation addresses, which the\n       remote MTA may connect from.\n   If\
    \ an MTA/Password pair is omitted, the MTA shall default to the\n   local MTA\
    \ Name, and the password shall default to a zero-length OCTET\n   STRING.\n  \
    \ Note: Future versions of this specification may add more information\n     \
    \    here relating to parameters required for strong authentication.\n"
- title: 21.  Policy and Authorisation
  contents:
  - '21.  Policy and Authorisation

    '
- title: 21.1  Simple MTA Policy
  contents:
  - "21.1  Simple MTA Policy\n   The routing trees will generally be configured in\
    \ order to identify\n   MTAs which will route to the destination.  A simple means\
    \ is\n   identified to specify an MTA's policy.  This is defined in Figure 14.\n\
    \   If this attribute is omitted, the MTA shall route all traffic to the\n   implied\
    \ destinations from the context of the routing tree for any\n   MTAs that have\
    \ valid access to the routing tree.\n   The multi-valued attribute gives a set\
    \ of policies which the MTA will\n   route.  O/R Addresses are represented by\
    \ a prefix, which identifies a\n   subtree.  A distinguished name encoding of\
    \ O/R Address is used.\n   There are three components:\n   from This gives a set\
    \ of O/R addresses which are granted permission\n       by this attribute value.\
    \  If omitted, \"all\" is implied.\n   to This gives the set of acceptable destinations.\
    \  If omitted,\n       \"all\" is implied.\n   from-excludes This defines (by\
    \ prefix) subtrees of the O/R address\n       tree which are explicitly excluded\
    \ from the \"from\" definition.\n       If omitted, there are no exclusions.\n\
    \   to-excludes This defines (by prefix) subtrees of the O/R address tree\n  \
    \     which are explicitly excluded from the \"to\" definition.  If\n       omitted,\
    \ there are no exclusions.\n   This simple policy will suffice for most cases.\
    \  In particular, it\n   gives sufficient information for most real situations\
    \ where a policy\n   choice is forced, and the application of this policy would\
    \ prevent a\n   message being routed.\n   This simple prefixing approach does\
    \ not deal explicitly with alias\n   dereferencing.  The prefixes refer to O/R\
    \ addresses where aliases\n   have been dereferenced.  To match against these\
    \ prefixes, O/R\n   addresses being matched need to be \"normalised by being looked\
    \ up in\n   the directory to resolve alias values.  If the lookup fails, it shall\n\
    \   be assumed that the provided address is already normalised.  This\n   means\
    \ that policy may be misinterpreted for parts of the DIT not\n   referenced in\
    \ the directory.\n   The originator refers to the MTS originator, and the recipient\
    \ to the\n   MTS recipient, following any list expansion or redirect.  This simple\n\
    \   policy does not apply to delivery reports.  Any advertised route\n   shall\
    \ work for delivery reports, and it does not makes sense to\n   regulate this\
    \ on the basis of the sender.\n"
- title: 21.2  Complex MTA Policy
  contents:
  - "21.2  Complex MTA Policy\n   MTAs will generally have a much more complex policy\
    \ mechanism, such\n   as that provided by PP MTA [10].  Representing this as a\
    \ part of the\n   routing decision is not done here, but may be addressed in future\n\
    \   versions.  Some of the issues which need to be tackled are:\n    o  Use of\
    \ charging and non-charging nets\n    o  Policy dependent on message size\n  \
    \  o  Different policy for delivery reports.\n    o  Policy dependent on attributes\
    \ of the originator or\n       recipient (e.g., mail from students)\n    o  Content\
    \ type and encoded information types\n    o  The path which the message has traversed\
    \ to reach the MTA\n    o  MTA bilateral agreements\n    o  Pulling messages\n\
    \    o  Costs.  This sort of policy information may also be for\n       information\
    \ only.\n   MTAs may apply more complex routing policies.  However, this shall\n\
    \   not lead to the rejection of messages which might otherwise be\n   correctly\
    \ routed on the published policy information.  Policies\n   relating to submission\
    \ do not need to be public.  They can be private\n   to the MTA.\n   ---------------------------------------------------------------------\n\
    \   redirect ATTRIBUTE ::= {\n           WITH SYNTAX Redirect\n           SINGLE\
    \ VALUE\n           ID at-redirect}\n   Redirect ::= SEQUENCE OF SEQUENCE {\n\
    \           or-name ORName,\n           reason RedirectionReason, -- from X.411\n\
    \           filter CHOICE {                                            10\n  \
    \                 min-size [1] INTEGER,\n                   max-size [2] INTEGER,\n\
    \                   content [3] ContentType,\n                   eit [4] ExternalEncodedInformationType\
    \ } OPTIONAL\n           }\n                      Figure 15:  Redirect Definition\n\
    \   ---------------------------------------------------------------------\n"
- title: 22.  Delivery
  contents:
  - '22.  Delivery

    '
- title: 22.1  Redirects
  contents:
  - "22.1  Redirects\n   There is a need to specify redirects in the Directory.  This\
    \ will be\n   useful for alternate names where an equivalent name (synonym) defined\n\
    \   by an alias is not natural.  An example where this might be\n   appropriate\
    \ is to redirect mail to a new O/R address where a user had\n   changed organisation.\
    \  A mechanism is given to allow conditional\n   (filtered) redirects for different\
    \ types of messages.  This allow\n   small messages, large messages, or messages\
    \ containing specific EITs\n   or content to be redirected.  The definitions are\
    \ given in Figure 15.\n   Redirection is specified by the redirect attribute.\
    \  If present, this\n   attribute shall be processed before supportingMTA and\n\
    \   nonDeliveryInfo.  These two attributes shall only be considered if it\n  \
    \ is determined that no redirection applies.  The redirect attribute is\n   a\
    \ sequence of elements which are considered in the order specified.\n   Each element\
    \ is examined in turn.  The first element which applies is\n   used, and no further\
    \ elements are examined.  Use of an element for\n   redirection, shall follow\
    \ the X.400 procedures for redirection, and\n   an element shall not be used if\
    \ prevented by a service control.  If\n   the redirect attribute is processed\
    \ and no redirection is generated,\n   processing shall continue irrespective\
    \ of service controls.  If non-\n   delivery is intended in this event, this shall\
    \ be achieved by use of\n   the nonDeliveryInfo attribute.\n   The components\
    \ have the following interpretations:\n   or-name This X.400 O/R Name is for use\
    \ in the redirection.  This O/R\n       Name will contain an optional directory\
    \ name and optional O/R\n       address.  One or both of the must be present.\
    \  If the O/R Address\n       element is present, the Directory Name, if present,\
    \ is for\n       information only.  and is to be placed in the X.400 redirection.\n\
    \       If the O/R address element is absent, the Directory Name shall be\n  \
    \     present and shall be looked up to determine the O/R address of the\n   \
    \    redirected recipient.  The O/R Address of the intended recipient\n      \
    \ will either be present or derived by lookup.  Routing shall be\n       done\
    \ on the basis of this O/R Address.\n   reason This is the reason information\
    \ to be placed in the X.400\n       redirect, and it shall take one of the following\
    \ values of\n       RedirectReason defined in X.411:\n       recipient-assigned-alternate-recipient;\n\
    \       recipient-MD-assigned-alternate-recipient; or alias.  It shall not\n \
    \      have the value originator-requested-alternate-recipient.\n   filter If\
    \ filter is absent, the redirect is mandoatory and shall be\n       followed.\
    \  If the filter is present, use of the redirect under\n       consideration depends\
    \ on the type of filter as follows:\n       min-size Follow redirect if the message\
    \ (MT content) is larger\n           than min-size (measured in kBytes).\n   \
    \    max-size Follow redirect if the message (MT content) is smaller\n       \
    \    than max-size (measured in kBytes).\n       content Follow redirect if message\
    \ content is of type content.\n       eit Follow redirect if the encoded information\
    \ types registered\n           in the envelope contain eit.\n   When a delivery\
    \ report is sent to an address which would be\n   redirected, X.400 would ignore\
    \ the redirect.  This means that every\n   O/R address would need to have a valid\
    \ means of delivery.  This would\n   seem to be awkward to manage.  Therefore,\
    \ the redirect shall be\n   followed, and the delivery report delivered to the\
    \ redirected\n   address.\n   These redirects are handled directly by the MTA.\
    \ Redirects can also\n   be initiated by the UA, for example in the context of\
    \ a P7\n   interaction.\n   ---------------------------------------------------------------------\n\
    \   nonDeliveryInfo ATTRIBUTE ::= {\n           WITH SYNTAX NonDeliveryReason\n\
    \           SINGLE VALUE\n           ID at-non-delivery-info}\n   NonDeliveryReason\
    \ ::= SEQUENCE {\n           reason INTEGER (0..ub-reason-codes),\n          \
    \ diagnostic INTEGER (0..ub-diagnostic-codes) OPTIONAL,\n           supplementaryInfo\
    \ PrintableString OPTIONAL }               10\n                   Figure 16: \
    \ Non Delivery Information\n   ---------------------------------------------------------------------\n"
- title: 22.2  Underspecified O/R Addresses
  contents:
  - "22.2  Underspecified O/R Addresses\n   X.400 requires that some underspecified\
    \ O/R Addresses are handled in\n   a given way (e.g., if a surname is given without\
    \ initials or given\n   name).  Where an underspecified O/R Address is to be treated\
    \ as if it\n   were another O/R Address, an alias shall be used.  If the O/R Address\n\
    \   is to be rejected as ambiguous, an entry shall be created in the DIT,\n  \
    \ and forced non-delivery specified for this reason.\n   Note: It is also possible\
    \ to handle this situation by searching.  An\n         MTA conforming to this\
    \ specification may handle underspecified\n         addresses in this manner.\
    \  The choice of mechanism will be\n         reviewed after operational experience\
    \ with both approaches.\n"
- title: 22.3  Non Delivery
  contents:
  - "22.3  Non Delivery\n   It is possible for a manager to define an address to non-deliver\
    \ with\n   specified reason and diagnostic codes.  This might be used for a\n\
    \   range of management purposes.  The attribute to do this is defined in\n  \
    \ Figure 16.  If a nonDeliveryInfo attribute is present, any\n   supportingMTA\
    \ attribute shall be ignored and the message non-\n   delivered.\n"
- title: 22.4  Bad Addresses
  contents:
  - "22.4  Bad Addresses\n   If there is a bad address, it is desirable to do a directory\
    \ search\n   to find alternatives.  This is a helpful user service and may be\n\
    \   supported.  This function is invoked after address checking has\n   failed,\
    \ and where this is no user supplied alternate recipient.  This\n   function would\
    \ be an MTA-chosen alternative to administratively\n   assigned alternate recipient.\n\
    \   Attributes to support handling of bad addresses are defined in Figure\n  \
    \ 17.  The attributes are:\n   badAddressSearchPoint This gives the point (or\
    \ list of points) from\n       which to search.\n   badAddressSearchAttributes\
    \ This gives the set of attribute types to\n       search on.  The default is\
    \ common name.\n   ---------------------------------------------------------------------\n\
    \   badAddressSearchPoint ATTRIBUTE ::= {\n           SUBTYPE OF distinguishedName\n\
    \           ID at-bad-address-search-point}\n   badAddressSearchAttributes ATTRIBUTE\
    \ ::= {\n           WITH SYNTAX AttributeType\n           ID at-bad-address-search-attributes}\n\
    \   alternativeAddressInformation EXTENSION                            10\n  \
    \         AlternativeAddressInformation\n           ::= id-alternative-address-information\n\
    \                   -- X.400(92) continues to use MACRO notation\n   AlternativeAddressInformation\
    \ ::= SET OF SEQUENCE {\n           distinguished-name DistinguishedName OPTIONAL,\n\
    \           or-address ORAddress OPTIONAL,\n           other-useful-info SET OF\
    \ Attribute }\n                     Figure 17:  Bad Address Pointers\n   ---------------------------------------------------------------------\n\
    \   Searches are always single level, and always use approximate match.\n   If\
    \ a small number of matches are made, this is returned to the\n   originator by\
    \ use of the per recipient AlternativeAddressInformation\n   in the delivery report\
    \ (DR). This shall be marked non-critical, so\n   that it will not cause the DR\
    \ to be discarded (e.g., in downgrading\n   to X.400(1984)).  This attribute allows\
    \ the Distinguished Name and\n   O/R Address of possible alternate recipients\
    \ to be returned with the\n   delivery report.  There is also the possibility\
    \ to attach extra\n   information in the form of directory attributes.  Typically\
    \ this\n   might be used to return attributes of the entry which were matched\
    \ in\n   the search.  A summary of the information shall also be returned\n  \
    \ using the delivery report supplementary information filed (e.g.,\n   \"your\
    \ message could not be delivered to smith, try J. Smith or P.\n   Smith\"), so\
    \ that the information is available to user agents not\n   supporting this extension.\
    \  Note the length restriction of this field\n   is 256 (ub-supplementary-info-length)\
    \ in X.400(1988).\n   If the directory search fails, or there are no matches returned,\
    \ a\n   delivery report shall be returned as if this extra check had not been\n\
    \   made.\n   Note: It might be useful to allow control of search type, and also\n\
    \         single level vs subtree.  This issue is for further study.\n   ---------------------------------------------------------------------\n\
    \   localAccessUnit ATTRIBUTE ::= {\n           WITH SYNTAX AccessUnitType\n \
    \          ID at-local-access-unit}\n   AccessUnitType ::= ENUMERATED {\n    \
    \       fax (1),\n           physical-delivery (2),\n           teletex (3),\n\
    \           telex (4) }                                                10\n  \
    \ accessUnitsUsed ATTRIBUTE ::= {\n           WITH SYNTAX SelectedAccessUnit\n\
    \           ID at-access-units-used}\n   SelectedAccessUnit ::= SEQUENCE {\n \
    \          type AccessUnitType,\n           providing-MTA DistinguishedName,\n\
    \           filter SET OF ORAddress OPTIONAL }\n                     Figure 18:\
    \  Access UnitAttributes\n   ---------------------------------------------------------------------\n"
- title: 23.  Submission
  contents:
  - "23.  Submission\n   A message may be submitted with Distinguished Name only.\
    \  If the MTA\n   to which the message is submitted supports this service, this\
    \ section\n   describes how the mapping is done.\n"
- title: 23.1  Normal Derivation
  contents:
  - "23.1  Normal Derivation\n   The Distinguished Name is looked up to find the attribute\
    \ mhs-or-\n   addresses.  If the attribute is single value, it is straightforward.\n\
    \   If there are multiple values, one O/R address shall be selected at\n   random.\n"
- title: 23.2  Roles and Groups
  contents:
  - "23.2  Roles and Groups\n   Some support for roles is given.  If there is no O/R\
    \ address, and the\n   entry is of object class role, then the roleOccupant attribute\
    \ shall\n   be dereferenced, and the message submitted to each of the role\n \
    \  occupants.  Similarly, if the entry is of object class group, where\n   the\
    \ groupMember attribute is used.\n"
- title: 24.  Access Units
  contents:
  - "24.  Access Units\n   Attributes needed for support of Access Units, as defined\
    \ in\n   X.400(88), are defined in Figure 18.  The attributes defined are:\n \
    \  localAccessUnit This defines the list of access units supported by\n      \
    \ the MTA.\n   accessUnitsUsed This defines which access units are used by the\
    \ MTA,\n       giving the type and MTA. An O/R Address filter is provided to\n\
    \       control which access unit is used for a given recipient.  For a\n    \
    \   filter to match an address, all attributes specificed in the\n       filter\
    \ shall match the given address.  This is specified as an O/R\n       Address,\
    \ so that routing to access units can be filtered on the\n       basis of attributes\
    \ not mapped onto the directory (e.g., postal\n       attributes).  Where a remote\
    \ MTA is used, it may be necessary to\n       use source routing.\n   Note 1:\
    \ This mechanism might be used to replace the routefilter\n       mechanism of\
    \ the MTS routing.  Comments are solicited.\n   Note 2: It has been proposed to\
    \ add a more powerful filter mechanism.\n       Comments are solicited.\n   Note\
    \ 3: The utility of this specification as a mechanism to route\n       faxes and\
    \ other non MHS messages has been noted, but not explored.\n       Comments as\
    \ to how and if this should be developed are solicited.\n   These three issues\
    \ are for further study.\n"
- title: 25.  The Overall Routing Algorithm
  contents:
  - "25.  The Overall Routing Algorithm\n   Having provided all the pieces, a summary\
    \ of how routing works can be\n   given.\n   The core of the X.400 routing is\
    \ described in Section 10.  A sequence\n   of routing trees are followed.  As\
    \ nodes of the routing tree are\n   matched, a set of MTAs will be identified\
    \ for evaluation as possible\n   next hops.  If all of these are rejected, the\
    \ trees are followed\n   further.  (It might be argued that the trees should be\
    \ followed to\n   find alternate routes in the case that only one MTA is acceptable.\n\
    \   This is not proposed.)  A set of MTAs is evaluated on the following\n   criteria:\n\
    \    o  If an MTA is the local MTA, deliver locally.\n    o  Supported protocols.\
    \  The MTA shall support a protocol that the\n       current MTA supports, as\
    \ described in Section 18.2.\n       (Note that this could be an RFC 822 protocol,\
    \ as well as an\n       X.400 protocol.)\n    o  The protocols shall share a common\
    \ transport community, as\n       described in Section 18.1.\n    o  There shall\
    \ be no capability restrictions in the MTA which\n       prevents transfer of\
    \ the current message, as described in\n       Section 18.3.\n    o  There shall\
    \ be no policy restrictions in the MTA which prevents\n       transfer of the\
    \ current message, as described in Section 21.\n    o  The authentication requirements\
    \ of the MTA shall be met by the\n       local MTA, as described in Section 20.2.\n\
    \    o  If the authentication (Section 20.2) indicates that a bilateral\n    \
    \   agreement is present, the MTA shall be listed in the local set of\n      \
    \ bilateral agreements, as described in Section 17.\n    o  In cases where the\
    \ recipient UA's capabilities can be determined,\n       there should either be\
    \ no mismatch, or there shall be an ability\n       to use local or remote reformatting\
    \ capabilities, as described\n       in [12].\n"
- title: 26.  Performance
  contents:
  - "26.  Performance\n   The routing algorithm has been designed with performance\
    \ in mind.  In\n   particular, care has been taken to use only the read function,\
    \ which\n   will in general be optimised.  Routing trees may be configured so\n\
    \   that routing decisions can be made with only two directory reads.\n   More\
    \ complex configurations will not require a substantially larger\n   number of\
    \ operations.\n"
- title: 27.  Acknowledgements
  contents:
  - "27.  Acknowledgements\n   This memo is the central document of a series of specifications\
    \ [14,\n   15, 16], and to other work in progress.  The acknowledgements for all\n\
    \   of this work is given here.  Previous work, which significantly\n   influenced\
    \ these specifications is described in Section 3.  This lead\n   to an initial\
    \ proposal by the editor, which was subsequently split\n   into eight documents.\
    \  Work on this specifications has been done by\n   the IETF MHS-DS working group.\
    \  Special credit is given to the joint\n   chairs of this group: Harald Alvestrand\
    \ (Uninett) and Kevin Jordan\n   (CDC). Credit is given to all members of the\
    \ WG. Those who have made\n   active contribution include:  Piete Brooks (Cambridge\
    \ University);\n   Allan Cargille (University of Wisconsin); Jim Craigie (JNT);\
    \ Dennis\n   Doyle (SSS); Urs Eppenberger (SWITCH); Peter Furniss; Christian\n\
    \   Huitema (Inria); Marko Kaittola (Dante); Sylvain Langlois (EDF); Lucy\n  \
    \ Loftin (AT&T GIS); Julian Onions (NEXOR); Paul-Andre Pays (Inria);\n   Colin\
    \ Robbins (NEXOR); Michael Roe (Cambridge University); Jim\n   Romaguera (Netconsult);\
    \ Michael Storz (Leibniz Rechenzentrum); Mark\n   Wahl (ISODE Consortium); Alan\
    \ Young (ISODE Consortium).\n   This work was partly funded by the COSINE Paradise\
    \ project.\n"
- title: 28.  References
  contents:
  - "28.  References\n    [1] The Directory --- overview of concepts, models and services,\n\
    \        1993. CCITT X.500 Series Recommendations.\n    [2] J.N. Chiappa. A new\
    \ IP routing and addressing architecture,\n        1991.\n    [3] A. Consael,\
    \ M. Tschicholz, O. Wenzel, K. Bonacker, and M. Busch.\n        DFN-Directory\
    \ nutzung durch MHS, April 1990. GMD Report.\n    [4] P. Dick-Lauder, R.J. Kummerfeld,\
    \ and K.R. Elz. ACSNet - the\n        Australian alternative to UUCP. In EUUG\
    \ Conference, Paris, pages\n        60--69, April 1985.\n    [5] Eppenberger,\
    \ U., \"Routing Coordination for X.400 MHS Services\n        Within a Multi Protocol\
    \ / Multi Network Environment Table Format\n        V3 for Static Routing\", RFC\
    \ 1465, SWITCH, May 1993.\n    [6] K.E. Jordan. Using X.500 directory services\
    \ in support of X.400\n        routing and address mapping, November 1991. Private\
    \ Note.\n    [7] S.E. Kille. MHS use of directory service for routing.  In IFIP\n\
    \        6.5 Conference on Message Handling, Munich, pages 157--164.\n       \
    \ North Holland Publishing, April 1987.\n    [8] S.E. Kille. Topology and routing\
    \ for MHS.  COSINE Specification\n        Phase 7.7, RARE, 1988.\n    [9] Kille,\
    \ S., \"Encoding Network Addresses to support operation over\n        non-OSI\
    \ lower layers\", RFC 1277, Department of Computer Science,\n        University\
    \ College London, November 1991.\n   [10] S.E. Kille. Implementing X.400 and X.500:\
    \  The PP and QUIPU\n        Systems. Artech House, 1991.  ISBN 0-89006-564-0.\n\
    \   [11] Kille, S., \"A Representation of Distinguished Names\n        (OSI-DS\
    \ 23 (v5))\", RFC 1485, Department of Computer Science,\n        University College\
    \ London, January 1992.\n   [12] Kille, S., Mhs use of X.500 directory to support\
    \ mhs content\n        conversion, Work in Progress, July 1993.\n   [13] Kille,\
    \ S., \"Use of the X.500 directory to support routing for\n        RFC 822 and\
    \ related protocols\", Work in Progress, July 1993.\n   [14] Kille, S., \"Representing\
    \ tables and subtrees in the X.500\n        directory\", Work in Progress, September\
    \ 1994.\n   [15] Kille, S., \"Representing the O/R Address hierarchy in the X.500\n\
    \        directory information tree\", Work in Progress, September 1994.\n   [16]\
    \ Kille, S., \"Use of the X.500 directory to support mapping\n        between\
    \ X.400 and RFC 822 addresses\", Work in Progress,\n        September 1994.\n\
    \   [17] Lauder, P., Kummerfeld, R., and A. Fekete. Hierarchical network\n   \
    \     routing. In Tricomm 91, 1991.\n   [18] CCITT recommendations X.400 / ISO\
    \ 10021, April 1988. CCITT\n        SG 5/VII / ISO/IEC JTC1, Message Handling:\
    \  System and Service\n        Overview.\n   [19] Zen and the ART of navigating\
    \ through the dark and murky regions\n        of the message transfer system:\
    \  Working document on MTS\n        routing, September 1991. ISO SC 18 SWG Messaging.\n"
- title: 29.  Security Considerations
  contents:
  - "29.  Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 30.  Author's Address
  contents:
  - "30.  Author's Address\n   Steve Kille\n   ISODE Consortium\n   The Dome\n   The\
    \ Square\n   Richmond\n   TW9 1DT\n   England\n   Phone:  +44-81-332-9091\n  \
    \ EMail:  S.Kille@ISODE.COM\n   X.400:  I=S; S=Kille; O=ISODE Consortium; P=ISODE;\n\
    \   A=Mailnet; C=FI;\n   DN: CN=Steve Kille,\n   O=ISODE Consortium, C=GB\n  \
    \ UFN: S. Kille, ISODE Consortium, GB\n"
- title: A  Object Identifier Assignment
  contents:
  - 'A  Object Identifier Assignment

    '
- title: '-----------------------------------------------------------------------'
  contents:
  - '-----------------------------------------------------------------------

    '
- title: mhs-ds OBJECT-IDENTIFIER ::= {iso(1) org(3) dod(6) internet(1)
  contents:
  - 'mhs-ds OBJECT-IDENTIFIER ::= {iso(1) org(3) dod(6) internet(1)

    '
- title: private(4) enterprises(1) isode-consortium (453) mhs-ds (7)}
  contents:
  - 'private(4) enterprises(1) isode-consortium (453) mhs-ds (7)}

    '
- title: routing OBJECT IDENTIFIER ::= {mhs-ds 3}
  contents:
  - 'routing OBJECT IDENTIFIER ::= {mhs-ds 3}

    '
- title: oc OBJECT IDENTIFIER ::= {routing 1}
  contents:
  - 'oc OBJECT IDENTIFIER ::= {routing 1}

    '
- title: at OBJECT IDENTIFIER ::= {routing 2}
  contents:
  - 'at OBJECT IDENTIFIER ::= {routing 2}

    '
- title: id OBJECT IDENTIFIER ::= {routing 3}
  contents:
  - "id OBJECT IDENTIFIER ::= {routing 3}\n                                      \
    \                              10\n"
- title: oc-mta OBJECT IDENTIFIER ::= {oc 1}
  contents:
  - 'oc-mta OBJECT IDENTIFIER ::= {oc 1}

    '
- title: oc-mta-bilateral-table-entry OBJECT IDENTIFIER ::= {oc 2}
  contents:
  - 'oc-mta-bilateral-table-entry OBJECT IDENTIFIER ::= {oc 2}

    '
- title: oc-routing-information OBJECT IDENTIFIER ::= {oc 3}
  contents:
  - 'oc-routing-information OBJECT IDENTIFIER ::= {oc 3}

    '
- title: oc-restricted-subtree OBJECT IDENTIFIER ::= {oc 4}
  contents:
  - 'oc-restricted-subtree OBJECT IDENTIFIER ::= {oc 4}

    '
- title: oc-routed-ua OBJECT IDENTIFIER ::= {oc 8}
  contents:
  - 'oc-routed-ua OBJECT IDENTIFIER ::= {oc 8}

    '
- title: oc-routing-tree-root OBJECT IDENTIFIER ::= {oc 6}
  contents:
  - 'oc-routing-tree-root OBJECT IDENTIFIER ::= {oc 6}

    '
- title: oc-mta-application-process OBJECT IDENTIFIER ::= {oc 7}
  contents:
  - 'oc-mta-application-process OBJECT IDENTIFIER ::= {oc 7}

    '
- title: at-access-md OBJECT IDENTIFIER ::= {at 1}
  contents:
  - 'at-access-md OBJECT IDENTIFIER ::= {at 1}

    '
- title: at-access-units-used OBJECT IDENTIFIER ::= {at 2}                   20
  contents:
  - 'at-access-units-used OBJECT IDENTIFIER ::= {at 2}                   20

    '
- title: at-subtree-information OBJECT IDENTIFIER ::= {at 3}
  contents:
  - 'at-subtree-information OBJECT IDENTIFIER ::= {at 3}

    '
- title: at-bad-address-search-attributes OBJECT IDENTIFIER ::= {at 4}
  contents:
  - 'at-bad-address-search-attributes OBJECT IDENTIFIER ::= {at 4}

    '
- title: at-bad-address-search-point OBJECT IDENTIFIER ::= {at 5}
  contents:
  - 'at-bad-address-search-point OBJECT IDENTIFIER ::= {at 5}

    '
- title: at-calling-selector-validity OBJECT IDENTIFIER ::= {at 7}
  contents:
  - 'at-calling-selector-validity OBJECT IDENTIFIER ::= {at 7}

    '
- title: at-global-domain-id OBJECT IDENTIFIER ::= {at 10}
  contents:
  - 'at-global-domain-id OBJECT IDENTIFIER ::= {at 10}

    '
- title: at-initiating-rts-credentials OBJECT IDENTIFIER ::= {at 11}
  contents:
  - 'at-initiating-rts-credentials OBJECT IDENTIFIER ::= {at 11}

    '
- title: at-initiator-authentication-requirements OBJECT IDENTIFIER ::= {at 12}30
  contents:
  - 'at-initiator-authentication-requirements OBJECT IDENTIFIER ::= {at 12}30

    '
- title: at-initiator-p1-mode OBJECT IDENTIFIER ::= {at 13}
  contents:
  - 'at-initiator-p1-mode OBJECT IDENTIFIER ::= {at 13}

    '
- title: at-initiator-pulling-authentication-requirements
  contents:
  - "at-initiator-pulling-authentication-requirements\n                          \
    \                 OBJECT IDENTIFIER ::= {at 14}\n"
- title: at-local-access-unit OBJECT IDENTIFIER ::= {at 15}
  contents:
  - 'at-local-access-unit OBJECT IDENTIFIER ::= {at 15}

    '
- title: at-redirect OBJECT IDENTIFIER ::= {at 46}
  contents:
  - 'at-redirect OBJECT IDENTIFIER ::= {at 46}

    '
- title: at-mta-info OBJECT IDENTIFIER ::= {at 40}
  contents:
  - 'at-mta-info OBJECT IDENTIFIER ::= {at 40}

    '
- title: at-mta-name OBJECT IDENTIFIER ::= {at 19}
  contents:
  - 'at-mta-name OBJECT IDENTIFIER ::= {at 19}

    '
- title: at-mta-will-route OBJECT IDENTIFIER ::= {at 21}
  contents:
  - 'at-mta-will-route OBJECT IDENTIFIER ::= {at 21}

    '
- title: at-calling-presentation-address OBJECT IDENTIFIER ::= {at 22}
  contents:
  - 'at-calling-presentation-address OBJECT IDENTIFIER ::= {at 22}

    '
- title: at-responder-authentication-requirements OBJECT IDENTIFIER ::= {at 23}40
  contents:
  - 'at-responder-authentication-requirements OBJECT IDENTIFIER ::= {at 23}40

    '
- title: at-responder-p1-mode OBJECT IDENTIFIER ::= {at 24}
  contents:
  - 'at-responder-p1-mode OBJECT IDENTIFIER ::= {at 24}

    '
- title: at-responder-pulling-authentication-requirements
  contents:
  - "at-responder-pulling-authentication-requirements\n                          \
    \                 OBJECT IDENTIFIER ::= {at 25}\n"
- title: at-responding-rts-credentials OBJECT IDENTIFIER ::= {at 26}
  contents:
  - 'at-responding-rts-credentials OBJECT IDENTIFIER ::= {at 26}

    '
- title: at-routing-failure-action OBJECT IDENTIFIER ::= {at 27}
  contents:
  - 'at-routing-failure-action OBJECT IDENTIFIER ::= {at 27}

    '
- title: at-routing-filter OBJECT IDENTIFIER ::= {at 28}
  contents:
  - 'at-routing-filter OBJECT IDENTIFIER ::= {at 28}

    '
- title: at-routing-tree-list OBJECT IDENTIFIER ::= {at 29}
  contents:
  - 'at-routing-tree-list OBJECT IDENTIFIER ::= {at 29}

    '
- title: at-subtree-deliverable-content-length OBJECT IDENTIFIER ::= {at 30}
  contents:
  - 'at-subtree-deliverable-content-length OBJECT IDENTIFIER ::= {at 30}

    '
- title: at-subtree-deliverable-content-types OBJECT IDENTIFIER ::= {at 31}
  contents:
  - 'at-subtree-deliverable-content-types OBJECT IDENTIFIER ::= {at 31}

    '
- title: at-subtree-deliverable-eits OBJECT IDENTIFIER ::= {at 32}
  contents:
  - 'at-subtree-deliverable-eits OBJECT IDENTIFIER ::= {at 32}

    '
- title: at-supporting-mta OBJECT IDENTIFIER ::= {at 33}                     50
  contents:
  - 'at-supporting-mta OBJECT IDENTIFIER ::= {at 33}                     50

    '
- title: at-transport-community OBJECT IDENTIFIER ::= {at 34}
  contents:
  - 'at-transport-community OBJECT IDENTIFIER ::= {at 34}

    '
- title: at-user-name OBJECT IDENTIFIER ::= {at 35}
  contents:
  - 'at-user-name OBJECT IDENTIFIER ::= {at 35}

    '
- title: at-non-delivery-info OBJECT IDENTIFIER ::= {at 47}
  contents:
  - 'at-non-delivery-info OBJECT IDENTIFIER ::= {at 47}

    '
- title: at-polled-mtas  OBJECT IDENTIFIER ::= {at 37}
  contents:
  - 'at-polled-mtas  OBJECT IDENTIFIER ::= {at 37}

    '
- title: at-bilateral-table OBJECT IDENTIFIER {at 45}
  contents:
  - 'at-bilateral-table OBJECT IDENTIFIER {at 45}

    '
- title: at-supported-extension OBJECT IDENTIFIER {at 42}
  contents:
  - 'at-supported-extension OBJECT IDENTIFIER {at 42}

    '
- title: at-supported-mts-extension OBJECT IDENTIFIER {at 43}
  contents:
  - 'at-supported-mts-extension OBJECT IDENTIFIER {at 43}

    '
- title: at-mtas-allowed-to-poll OBJECT IDENTIFIER {at 44}
  contents:
  - 'at-mtas-allowed-to-poll OBJECT IDENTIFIER {at 44}

    '
- title: id-alternative-address-information OBJECT IDENTIFIER ::= {id 1}     60
  contents:
  - "id-alternative-address-information OBJECT IDENTIFIER ::= {id 1}     60\n    \
    \            Figure 19:  Object Identifier Assignment\n"
- title: '-----------------------------------------------------------------------'
  contents:
  - '-----------------------------------------------------------------------

    '
- title: B  Community Identifier Assignments
  contents:
  - 'B  Community Identifier Assignments

    '
- title: '-----------------------------------------------------------------------'
  contents:
  - '-----------------------------------------------------------------------

    '
- title: ts-communities OBJECT-IDENTIFIER ::= {iso(1) org(3) dod(6) internet(1)
  contents:
  - 'ts-communities OBJECT-IDENTIFIER ::= {iso(1) org(3) dod(6) internet(1)

    '
- title: private(4) enterprises(1) isode-consortium (453) ts-communities (4)}
  contents:
  - 'private(4) enterprises(1) isode-consortium (453) ts-communities (4)}

    '
- title: tc-cons OBJECT IDENTIFIER ::= {ts-communities 1}    -- OSI CONS
  contents:
  - 'tc-cons OBJECT IDENTIFIER ::= {ts-communities 1}    -- OSI CONS

    '
- title: tc-clns OBJECT IDENTIFIER ::= {ts-communities 2}    -- OSI CLNS
  contents:
  - 'tc-clns OBJECT IDENTIFIER ::= {ts-communities 2}    -- OSI CLNS

    '
- title: tc-internet OBJECT IDENTIFIER ::= {ts-communities 3}-- Internet+RFC1006
  contents:
  - 'tc-internet OBJECT IDENTIFIER ::= {ts-communities 3}-- Internet+RFC1006

    '
- title: tc-int-x25 OBJECT IDENTIFIER ::= {ts-communities 4} -- International X.25
  contents:
  - "tc-int-x25 OBJECT IDENTIFIER ::= {ts-communities 4} -- International X.25\n \
    \                                                   -- Without CONS10\n"
- title: tc-ixi OBJECT IDENTIFIER ::= {ts-communities 5}     -- IXI (Europe)
  contents:
  - 'tc-ixi OBJECT IDENTIFIER ::= {ts-communities 5}     -- IXI (Europe)

    '
- title: tc-janet OBJECT IDENTIFIER ::= {ts-communities 6}   -- Janet (UK)
  contents:
  - "tc-janet OBJECT IDENTIFIER ::= {ts-communities 6}   -- Janet (UK)\n     Figure\
    \ 20:  Transport Community Object Identifier Assignments\n"
- title: '-----------------------------------------------------------------------'
  contents:
  - '-----------------------------------------------------------------------

    '
- title: C  Protocol Identifier Assignments
  contents:
  - 'C  Protocol Identifier Assignments

    '
- title: '-----------------------------------------------------------------------'
  contents:
  - '-----------------------------------------------------------------------

    '
- title: mail-protocol OBJECT-IDENTIFIER ::= {iso(1) org(3) dod(6) internet(1)
  contents:
  - 'mail-protocol OBJECT-IDENTIFIER ::= {iso(1) org(3) dod(6) internet(1)

    '
- title: private(4)n enterprises(1) isode-consortium (453) mail-protocol (5)}
  contents:
  - 'private(4)n enterprises(1) isode-consortium (453) mail-protocol (5)}

    '
- title: ac-p1-1984 OBJECT IDENTIFIER ::= {mail-protocol 1}      -- p1(1984)
  contents:
  - 'ac-p1-1984 OBJECT IDENTIFIER ::= {mail-protocol 1}      -- p1(1984)

    '
- title: ac-smtp  OBJECT IDENTIFIER ::= {mail-protocol 2}        -- SMTP
  contents:
  - 'ac-smtp  OBJECT IDENTIFIER ::= {mail-protocol 2}        -- SMTP

    '
- title: ac-uucp OBJECT IDENTIFIER ::= {mail-protocol 3}         -- UUCP Mail
  contents:
  - 'ac-uucp OBJECT IDENTIFIER ::= {mail-protocol 3}         -- UUCP Mail

    '
- title: ac-jnt-mail OBJECT IDENTIFIER ::= {mail-protocol 4}     -- JNT Mail
  contents:
  - 'ac-jnt-mail OBJECT IDENTIFIER ::= {mail-protocol 4}     -- JNT Mail

    '
- title: (UK)
  contents:
  - '(UK)

    '
- title: ac-p1-1988-x410 OBJECT IDENTIFIER ::= {mail-protocol 5} -- p1(1988) in
  contents:
  - 'ac-p1-1988-x410 OBJECT IDENTIFIER ::= {mail-protocol 5} -- p1(1988) in

    '
- title: X.410 mode
  contents:
  - 'X.410 mode

    '
- title: ac-p3-1984 OBJECT IDENTIFIER ::= {mail-protocol 6}      -- p3(1984) 10
  contents:
  - "ac-p3-1984 OBJECT IDENTIFIER ::= {mail-protocol 6}      -- p3(1984) 10\n    \
    \       Figure 21:  Protocol Object Identifier Assignments\n"
- title: '-----------------------------------------------------------------------'
  contents:
  - '-----------------------------------------------------------------------

    '
- title: D  ASN.1 Summary
  contents:
  - 'D  ASN.1 Summary

    '
- title: '-----------------------------------------------------------------------'
  contents:
  - '-----------------------------------------------------------------------

    '
- title: MHS-DS-Definitions
  contents:
  - 'MHS-DS-Definitions

    '
- title: DEFINITIONS ::=
  contents:
  - 'DEFINITIONS ::=

    '
- title: BEGIN
  contents:
  - "BEGIN\n -- assign OID to module\n -- define imports and exports\n"
- title: routingTreeRoot OBJECT-CLASS ::= {
  contents:
  - "routingTreeRoot OBJECT-CLASS ::= {\n    SUBCLASS OF {routingInformation|subtree}\n\
    \    ID oc-routing-tree-root}                                        10\n"
- title: routingTreeList ATTRIBUTE ::= {
  contents:
  - "routingTreeList ATTRIBUTE ::= {\n        WITH SYNTAX RoutingTreeList\n      \
    \  SINGLE VALUE\n        ID at-routing-tree-list}\n"
- title: RoutingTreeList ::= SEQUENCE OF RoutingTreeName
  contents:
  - 'RoutingTreeList ::= SEQUENCE OF RoutingTreeName

    '
- title: RoutingTreeName ::= DistinguishedName
  contents:
  - "RoutingTreeName ::= DistinguishedName\n                                     \
    \                               20\n"
- title: routingInformation OBJECT-CLASS ::= {
  contents:
  - "routingInformation OBJECT-CLASS ::= {\n    SUBCLASS OF top\n    KIND auxiliary\n\
    \    MAY CONTAIN {\n        subtreeInformation|\n        routingFilter|\n    \
    \    routingFailureAction|\n        mTAInfo|\n        accessMD|\n        nonDeliveryInfo|\
    \                                            30\n        badAddressSearchPoint|\n\
    \        badAddressSearchAttributes}\n    ID oc-routing-information}\n       \
    \         -- No naming attributes as this is not a\n                -- structural\
    \ object class\n"
- title: subtreeInformation ATTRIBUTE ::= {
  contents:
  - "subtreeInformation ATTRIBUTE ::= {\n    WITH SYNTAX SubtreeInfo             \
    \                            40\n    SINGLE VALUE\n    ID at-subtree-information}\n"
- title: SubtreeInfo ::= ENUMERATED {
  contents:
  - "SubtreeInfo ::= ENUMERATED {\n    all-children-present(0),\n    not-all-children-present(1)\
    \ }\n"
- title: routingFilter ATTRIBUTE ::= {
  contents:
  - "routingFilter ATTRIBUTE ::= {\n    WITH SYNTAX RoutingFilter                \
    \                       50\n    ID at-routing-filter}\n"
- title: RoutingFilter ::= SEQUENCE{
  contents:
  - "RoutingFilter ::= SEQUENCE{\n        attribute-type OBJECT-IDENTIFIER,\n    \
    \    weight RouteWeight,\n        dda-key String OPTIONAL,\n        regex-match\
    \ IA5String OPTIONAL,\n        node DistinguishedName }\n                    \
    \                                                60\n"
- title: String ::= CHOICE {PrintableString, TeletexString}
  contents:
  - 'String ::= CHOICE {PrintableString, TeletexString}

    '
- title: routingFailureAction ATTRIBUTE ::= {
  contents:
  - "routingFailureAction ATTRIBUTE ::= {\n    WITH SYNTAX RoutingFailureAction\n\
    \    SINGLE VALUE\n    ID at-routing-failure-action}\n"
- title: RoutingFailureAction ::= ENUMERATED {
  contents:
  - "RoutingFailureAction ::= ENUMERATED {\n            next-level(0),\n         \
    \   next-tree-only(1),                                      70\n            next-tree-first(2),\n\
    \            stop(3)  }\n"
- title: mTAInfo ATTRIBUTE ::= {
  contents:
  - "mTAInfo ATTRIBUTE ::= {\n    WITH SYNTAX MTAInfo\n    ID at-mta-info}\n"
- title: MTAInfo ::= SEQUENCE {
  contents:
  - "MTAInfo ::= SEQUENCE {\n            name DistinguishedName,                 \
    \                80\n            weight [1] RouteWeight DEFAULT preferred-access,\n\
    \            mta-attributes [2] SET OF Attribute OPTIONAL,\n            ae-info\
    \  SEQUENCE OF SEQUENCE {\n                aEQualifier PrintableString,\n    \
    \            ae-weight RouteWeight DEFAULT preferred-access,\n               \
    \ ae-attributes SET OF Attribute OPTIONAL} OPTIONAL\n"
- title: '}'
  contents:
  - '}

    '
- title: RouteWeight ::= INTEGER  {endpoint(0),
  contents:
  - "RouteWeight ::= INTEGER  {endpoint(0),\n                preferred-access(5),\
    \                                90\n                backup(10)} (0..20)\n"
- title: accessMD ATTRIBUTE ::= {
  contents:
  - "accessMD ATTRIBUTE ::= {\n        SUBTYPE OF distinguishedName\n        ID at-access-md}\n"
- title: routedUA OBJECT-CLASS ::= {
  contents:
  - "routedUA OBJECT-CLASS ::= {\n    SUBCLASS OF {routingInformation}\n    KIND auxiliary\n\
    \    MAY CONTAIN {                                                  100\n    \
    \                    -- from X.402\n        mhs-deliverable-content-length|\n\
    \        mhs-deliverable-content-types|\n        mhs-deliverable-eits|\n     \
    \   mhs-message-store|\n        mhs-preferred-delivery-methods|\n            \
    \            -- defined here\n        supportedExtensions|\n        redirect|\n\
    \        supportingMTA|                                             110\n    \
    \    userName|\n        nonDeliveryInfo}\n    ID oc-routed-ua}\n"
- title: supportedExtensions ATTRIBUTE ::= {
  contents:
  - "supportedExtensions ATTRIBUTE ::= {\n    SUBTYPE OF objectIdentifier\n    ID\
    \ at-supported-extensions}\n"
- title: supportingMTA ATTRIBUTE ::= {
  contents:
  - "supportingMTA ATTRIBUTE ::= {\n    SUBTYPE OF mTAInfo                       \
    \                      120\n    ID at-supporting-mta}\n"
- title: userName ATTRIBUTE ::= {
  contents:
  - "userName ATTRIBUTE ::= {\n    SUBTYPE OF distinguishedName\n    ID at-user-name}\n"
- title: mTAName ATTRIBUTE ::= {
  contents:
  - "mTAName ATTRIBUTE ::= {\n    SUBTYPE OF name\n    WITH SYNTAX DirectoryString{ub-mta-name-length}\n\
    \    SINGLE VALUE                                                   130\n    ID\
    \ at-mta-name}\n                        -- used for naming when\n            \
    \            -- MTA is named in O=R Address Hierarchy\n"
- title: globalDomainID ATTRIBUTE ::= {
  contents:
  - "globalDomainID ATTRIBUTE ::= {\n    WITH SYNTAX GlobalDomainIdentifier\n    SINGLE\
    \ VALUE\n    ID at-global-domain-id}\n                        -- both attributes\
    \ present when MTA\n                        -- is named outside O=R Address Hierarchy\
    \  140\n                        -- to enable trace to be written\n"
- title: mTAApplicationProcess OBJECT-CLASS ::= {
  contents:
  - "mTAApplicationProcess OBJECT-CLASS ::= {\n    SUBCLASS OF {application-process}\n\
    \    KIND auxiliary\n    MAY CONTAIN {\n        mTAWillRoute|\n        globalDomainID|\n\
    \        routingTreeList|\n        localAccessUnit|                          \
    \                 150\n        accessUnitsUsed\n    }\n    ID oc-mta-application-process}\n"
- title: mTA OBJECT CLASS ::= {   -- Application Entity
  contents:
  - "mTA OBJECT CLASS ::= {   -- Application Entity\n    SUBCLASS OF {mhs-message-transfer-agent}\n\
    \    KIND structural\n    MAY CONTAIN {\n        mTAName|\n        globalDomainID|\
    \         -- per AE variant                  160\n        responderAuthenticationRequirements|\n\
    \        initiatorAuthenticationRequirements|\n        responderPullingAuthenticationRequirements|\n\
    \        initiatorPullingAuthenticationRequirements|\n        initiatorP1Mode|\n\
    \        responderP1Mode|\n        polledMTAs|\n        protocolInformation|\n\
    \        respondingRTSCredentials|\n        initiatingRTSCredentials|        \
    \                          170\n        callingPresentationAddress|\n        callingSelectorValidity|\n\
    \        bilateralTable|\n        mTAWillRoute|\n        mhs-deliverable-content-length|\n\
    \        routingTreeList|\n        supportedMTSExtensions|\n        mTAsAllowedToPoll\n\
    \        }\n    ID oc-mta}                                                   \
    \  180\n"
- title: mTABilateralTableEntry OBJECT-CLASS ::=
  contents:
  - "mTABilateralTableEntry OBJECT-CLASS ::=\n    SUBCLASS OF {mTA| distinguishedNameTableEntry}\n\
    \    ID oc-mta-bilateral-table-entry}\n"
- title: bilateralTable ATTRIBUTE ::= {
  contents:
  - "bilateralTable ATTRIBUTE ::= {\n        WITH SYNTAX SEQUENCE OF DistinguishedName\n\
    \        SINGLE VALUE\n        ID at-bilateral-table}\n                      \
    \                                             190\n"
- title: supportedMTSExtensions ATTRIBUTE ::= {
  contents:
  - "supportedMTSExtensions ATTRIBUTE ::= {\n    SUBTYPE OF objectIdentifier\n   \
    \ ID at-supported-mts-extensions}\n"
- title: restrictedSubtree OBJECT-CLASS ::= {
  contents:
  - "restrictedSubtree OBJECT-CLASS ::= {\n        SUBCLASS OF {top}\n        KIND\
    \ auxiliary\n        MAY CONTAIN {\n                subtreeDeliverableContentLength|\n\
    \                subtreeDeliverableContentTypes|                    200\n    \
    \            subtreeDeliverableEITs}\n        ID oc-restricted-subtree}\n"
- title: subtreeDeliverableContentLength ATTRIBUTE ::= {
  contents:
  - "subtreeDeliverableContentLength ATTRIBUTE ::= {\n        SUBTYPE OF mhs-deliverable-content-length\n\
    \        ID at-subtree-deliverable-content-length}\n"
- title: subtreeDeliverableContentTypes ATTRIBUTE ::= {
  contents:
  - "subtreeDeliverableContentTypes ATTRIBUTE ::= {\n        SUBTYPE OF mhs-deliverable-content-types\n\
    \        ID at-subtree-deliverable-content-types}                   210\n"
- title: subtreeDeliverableEITs ATTRIBUTE ::= {
  contents:
  - "subtreeDeliverableEITs ATTRIBUTE ::= {\n        SUBTYPE OF mhs-deliverable-eits\n\
    \        ID at-subtree-deliverable-eits}\n"
- title: initiatorP1Mode ATTRIBUTE ::= {
  contents:
  - "initiatorP1Mode ATTRIBUTE ::= {\n    WITH SYNTAX P1Mode\n    SINGLE VALUE\n \
    \   ID at-initiator-p1-mode}                                       220\n"
- title: responderP1Mode ATTRIBUTE ::= {
  contents:
  - "responderP1Mode ATTRIBUTE ::= {\n    WITH SYNTAX P1Mode\n    SINGLE VALUE\n \
    \   ID at-responder-p1-mode}\n"
- title: P1Mode ::= ENUMERATED {
  contents:
  - "P1Mode ::= ENUMERATED {\n    push-only(0),\n    pull-only(1),\n    twa(2) } \
    \                                                      230\n"
- title: polledMTAs ATTRIBUTE ::= {
  contents:
  - "polledMTAs ATTRIBUTE ::= {\n    WITH SYNTAX PolledMTAs\n    ID at-polled-mtas}\n"
- title: PolledMTAs ::= SEQUENCE {
  contents:
  - "PolledMTAs ::= SEQUENCE {\n        mta DistinguishedName,\n        poll-frequency\
    \ INTEGER OPTIONAL --frequency in minutes\n        }\n                       \
    \                                            240\n"
- title: mTAsAllowedToPoll ATTRIBUTE ::= {
  contents:
  - "mTAsAllowedToPoll ATTRIBUTE ::= {\n        SUBTYPE OF distinguishedName\n   \
    \     ID at-mtas-allowed-to-poll}\n"
- title: responderAuthenticationRequirements ATTRIBUTE ::= {
  contents:
  - "responderAuthenticationRequirements ATTRIBUTE ::= {\n   WITH SYNTAX AuthenticationRequirements\n\
    \   SINGLE VALUE\n   ID at-responder-authentication-requirements}\n          \
    \                                                         250\n"
- title: initiatorAuthenticationRequirements ATTRIBUTE ::= {
  contents:
  - "initiatorAuthenticationRequirements ATTRIBUTE ::= {\n   WITH SYNTAX AuthenticationRequirements\n\
    \   SINGLE VALUE\n   ID at-initiator-authentication-requirements}\n"
- title: responderPullingAuthenticationRequirements ATTRIBUTE ::= {
  contents:
  - "responderPullingAuthenticationRequirements ATTRIBUTE ::= {\n   WITH SYNTAX AuthenticationRequirements\n\
    \   SINGLE VALUE\n   ID at-responder-pulling-authentication-requirements}\n  \
    \                                                                 260\n"
- title: initiatorPullingAuthenticationRequirements ATTRIBUTE ::= {
  contents:
  - "initiatorPullingAuthenticationRequirements ATTRIBUTE ::= {\n   WITH SYNTAX AuthenticationRequirements\n\
    \   SINGLE VALUE\n   ID at-initiator-pulling-authentication-requirements}\n"
- title: AuthenticationRequirements ::= BITSTRING {
  contents:
  - "AuthenticationRequirements ::= BITSTRING {\n    mta-name-present(0),\n    aet-present(1),\n\
    \    aet-valid(2),\n    network-address(3),                                  \
    \          270\n    simple-authentication(4),\n    strong-authentication(5),\n\
    \    bilateral-agreement-needed(6)}\n"
- title: respondingRTSCredentials ATTRIBUTE ::= {
  contents:
  - "respondingRTSCredentials ATTRIBUTE ::= {\n        WITH SYNTAX RTSCredentials\n\
    \        SINGLE VALUE\n        ID at-responding-rts-credentials}\n           \
    \                                                        280\n"
- title: initiatingRTSCredentials ATTRIBUTE ::= {
  contents:
  - "initiatingRTSCredentials ATTRIBUTE ::= {\n        WITH SYNTAX RTSCredentials\n\
    \        SINGLE VALUE\n        ID at-initiating-rts-credentials}\n"
- title: RTSCredentials ::= SEQUENCE {
  contents:
  - "RTSCredentials ::= SEQUENCE {\n        request [0] MTAandPassword OPTIONAL,\n\
    \        response [1] MTAandPassword OPTIONAL }\n                            \
    \                                       290\n"
- title: MTAandPassword ::= SEQUENCE {
  contents:
  - "MTAandPassword ::= SEQUENCE {\n        MTAName,\n        Password }         \
    \     -- MTAName and Password\n                                -- from X.411\n"
- title: callingPresentationAddress ATTRIBUTE ::= {
  contents:
  - "callingPresentationAddress ATTRIBUTE ::= {\n        SUBTYPE OF presentationAddress\n\
    \        MULTI VALUE                                                300\n    \
    \    ID at-calling-presentation-address}\n"
- title: callingSelectorValidity ATTRIBUTE ::= {
  contents:
  - "callingSelectorValidity ATTRIBUTE ::= {\n        WITH SYNTAX CallingSelectorValidity\n\
    \        SINGLE VALUE\n        ID at-calling-selector-validity}\n"
- title: CallingSelectorValidity ::= ENUMERATED {
  contents:
  - "CallingSelectorValidity ::= ENUMERATED {\n        all-selectors-fixed(0),\n \
    \       tsel-may-vary(1),                                          310\n     \
    \   all-selectors-may-vary(2) }\n"
- title: mTAWillRoute ATTRIBUTE ::= {
  contents:
  - "mTAWillRoute ATTRIBUTE ::= {\n    WITH SYNTAX MTAWillRoute\n    ID at-mta-will-route}\n"
- title: MTAWillRoute ::= SEQUENCE {
  contents:
  - "MTAWillRoute ::= SEQUENCE {\n        from [0]        SET OF ORAddressPrefix OPTIONAL,\n\
    \        to [1]          SET OF ORAddressPrefix OPTIONAL,\n        from-excludes\
    \ [2]       SET OF ORAddressPrefix OPTIONAL,   320\n        to-excludes [3]  \
    \       SET OF ORAddressPrefix OPTIONAL }\n"
- title: ORAddressPrefix ::= DistinguishedName
  contents:
  - 'ORAddressPrefix ::= DistinguishedName

    '
- title: redirect ATTRIBUTE ::= {
  contents:
  - "redirect ATTRIBUTE ::= {\n        WITH SYNTAX Redirect\n        SINGLE VALUE\n\
    \        ID at-redirect}\n"
- title: Redirect ::= SEQUENCE OF SEQUENCE {                                330
  contents:
  - "Redirect ::= SEQUENCE OF SEQUENCE {                                330\n    \
    \    or-name ORName,\n        reason RedirectionReason, -- from X.411\n      \
    \  filter CHOICE {\n                min-size [1] INTEGER,\n                max-size\
    \ [2] INTEGER,\n                content [3] ContentType,\n                eit\
    \ [4] ExternalEncodedInformationType } OPTIONAL\n        }\n"
- title: nonDeliveryInfo ATTRIBUTE ::= {                                    340
  contents:
  - "nonDeliveryInfo ATTRIBUTE ::= {                                    340\n    \
    \    WITH SYNTAX NonDeliveryReason\n        SINGLE VALUE\n        ID at-non-delivery-info}\n"
- title: NonDeliveryReason ::= SEQUENCE {
  contents:
  - "NonDeliveryReason ::= SEQUENCE {\n        reason INTEGER (0..ub-reason-codes),\n\
    \        diagnostic INTEGER (0..ub-diagnostic-codes) OPTIONAL,\n        supplementaryInfo\
    \ PrintableString OPTIONAL }\n"
- title: badAddressSearchPoint ATTRIBUTE ::= {                              350
  contents:
  - "badAddressSearchPoint ATTRIBUTE ::= {                              350\n    \
    \    SUBTYPE OF distinguishedName\n        ID at-bad-address-search-point}\n"
- title: badAddressSearchAttributes ATTRIBUTE ::= {
  contents:
  - "badAddressSearchAttributes ATTRIBUTE ::= {\n        WITH SYNTAX AttributeType\n\
    \        ID at-bad-address-search-attributes}\n"
- title: alternativeAddressInformation EXTENSION
  contents:
  - "alternativeAddressInformation EXTENSION\n        AlternativeAddressInformation\n\
    \        ::= id-alternative-address-information                     360\n    \
    \            -- X.400(92) continues to use MACRO notation\n"
- title: AlternativeAddressInformation ::= SET OF SEQUENCE {
  contents:
  - "AlternativeAddressInformation ::= SET OF SEQUENCE {\n        distinguished-name\
    \ DistinguishedName OPTIONAL,\n        or-address ORAddress OPTIONAL,\n      \
    \  other-useful-info SET OF Attribute }\n"
- title: localAccessUnit ATTRIBUTE ::= {
  contents:
  - "localAccessUnit ATTRIBUTE ::= {\n        WITH SYNTAX AccessUnitType\n       \
    \ ID at-local-access-unit}                                   370\n"
- title: AccessUnitType ::= ENUMERATED {
  contents:
  - "AccessUnitType ::= ENUMERATED {\n        fax (1),\n        physical-delivery\
    \ (2),\n        teletex (3),\n        telex (4) }\n"
- title: accessUnitsUsed ATTRIBUTE ::= {
  contents:
  - "accessUnitsUsed ATTRIBUTE ::= {\n        WITH SYNTAX SelectedAccessUnit\n   \
    \     ID at-access-units-used}                                   380\n"
- title: SelectedAccessUnit ::= SEQUENCE {
  contents:
  - "SelectedAccessUnit ::= SEQUENCE {\n        type AccessUnitType,\n        providing-MTA\
    \ DistinguishedName,\n        filter SET OF ORAddress OPTIONAL }\n"
- title: mhs-ds OBJECT-IDENTIFIER ::= {iso(1) org(3) dod(6) internet(1) private(4)
  contents:
  - "mhs-ds OBJECT-IDENTIFIER ::= {iso(1) org(3) dod(6) internet(1) private(4)\n \
    \         enterprises(1) isode-consortium (453) mhs-ds (7)}\n"
- title: routing OBJECT IDENTIFIER ::= {mhs-ds 3}
  contents:
  - "routing OBJECT IDENTIFIER ::= {mhs-ds 3}\n                                  \
    \                                 390\n"
- title: oc OBJECT IDENTIFIER ::= {routing 1}
  contents:
  - 'oc OBJECT IDENTIFIER ::= {routing 1}

    '
- title: at OBJECT IDENTIFIER ::= {routing 2}
  contents:
  - 'at OBJECT IDENTIFIER ::= {routing 2}

    '
- title: id OBJECT IDENTIFIER ::= {routing 3}
  contents:
  - 'id OBJECT IDENTIFIER ::= {routing 3}

    '
- title: oc-mta OBJECT IDENTIFIER ::= {oc 1}
  contents:
  - 'oc-mta OBJECT IDENTIFIER ::= {oc 1}

    '
- title: oc-mta-bilateral-table-entry OBJECT IDENTIFIER ::= {oc 2}
  contents:
  - 'oc-mta-bilateral-table-entry OBJECT IDENTIFIER ::= {oc 2}

    '
- title: oc-routing-information OBJECT IDENTIFIER ::= {oc 3}
  contents:
  - 'oc-routing-information OBJECT IDENTIFIER ::= {oc 3}

    '
- title: oc-restricted-subtree OBJECT IDENTIFIER ::= {oc 4}
  contents:
  - 'oc-restricted-subtree OBJECT IDENTIFIER ::= {oc 4}

    '
- title: oc-routed-ua OBJECT IDENTIFIER ::= {oc 8}                          400
  contents:
  - 'oc-routed-ua OBJECT IDENTIFIER ::= {oc 8}                          400

    '
- title: oc-routing-tree-root OBJECT IDENTIFIER ::= {oc 6}
  contents:
  - 'oc-routing-tree-root OBJECT IDENTIFIER ::= {oc 6}

    '
- title: oc-mta-application-process OBJECT IDENTIFIER ::= {oc 7}
  contents:
  - 'oc-mta-application-process OBJECT IDENTIFIER ::= {oc 7}

    '
- title: at-access-md OBJECT IDENTIFIER ::= {at 1}
  contents:
  - 'at-access-md OBJECT IDENTIFIER ::= {at 1}

    '
- title: at-access-units-used OBJECT IDENTIFIER ::= {at 2}
  contents:
  - 'at-access-units-used OBJECT IDENTIFIER ::= {at 2}

    '
- title: at-subtree-information OBJECT IDENTIFIER ::= {at 3}
  contents:
  - 'at-subtree-information OBJECT IDENTIFIER ::= {at 3}

    '
- title: at-bad-address-search-attributes OBJECT IDENTIFIER ::= {at 4}
  contents:
  - 'at-bad-address-search-attributes OBJECT IDENTIFIER ::= {at 4}

    '
- title: at-bad-address-search-point OBJECT IDENTIFIER ::= {at 5}
  contents:
  - 'at-bad-address-search-point OBJECT IDENTIFIER ::= {at 5}

    '
- title: at-calling-selector-validity OBJECT IDENTIFIER ::= {at 7}          410
  contents:
  - 'at-calling-selector-validity OBJECT IDENTIFIER ::= {at 7}          410

    '
- title: at-global-domain-id OBJECT IDENTIFIER ::= {at 10}
  contents:
  - 'at-global-domain-id OBJECT IDENTIFIER ::= {at 10}

    '
- title: at-initiating-rts-credentials OBJECT IDENTIFIER ::= {at 11}
  contents:
  - 'at-initiating-rts-credentials OBJECT IDENTIFIER ::= {at 11}

    '
- title: at-initiator-authentication-requirements OBJECT IDENTIFIER ::= {at 12}
  contents:
  - 'at-initiator-authentication-requirements OBJECT IDENTIFIER ::= {at 12}

    '
- title: at-initiator-p1-mode OBJECT IDENTIFIER ::= {at 13}
  contents:
  - 'at-initiator-p1-mode OBJECT IDENTIFIER ::= {at 13}

    '
- title: at-initiator-pulling-authentication-requirements
  contents:
  - "at-initiator-pulling-authentication-requirements\n                          \
    \               OBJECT IDENTIFIER ::= {at 14}\n"
- title: at-local-access-unit OBJECT IDENTIFIER ::= {at 15}
  contents:
  - 'at-local-access-unit OBJECT IDENTIFIER ::= {at 15}

    '
- title: at-redirect OBJECT IDENTIFIER ::= {at 46}
  contents:
  - 'at-redirect OBJECT IDENTIFIER ::= {at 46}

    '
- title: at-mta-info OBJECT IDENTIFIER ::= {at 40}                          420
  contents:
  - 'at-mta-info OBJECT IDENTIFIER ::= {at 40}                          420

    '
- title: at-mta-name OBJECT IDENTIFIER ::= {at 19}
  contents:
  - 'at-mta-name OBJECT IDENTIFIER ::= {at 19}

    '
- title: at-mta-will-route OBJECT IDENTIFIER ::= {at 21}
  contents:
  - 'at-mta-will-route OBJECT IDENTIFIER ::= {at 21}

    '
- title: at-calling-presentation-address OBJECT IDENTIFIER ::= {at 22}
  contents:
  - 'at-calling-presentation-address OBJECT IDENTIFIER ::= {at 22}

    '
- title: at-responder-authentication-requirements OBJECT IDENTIFIER ::= {at 23}
  contents:
  - 'at-responder-authentication-requirements OBJECT IDENTIFIER ::= {at 23}

    '
- title: at-responder-p1-mode OBJECT IDENTIFIER ::= {at 24}
  contents:
  - 'at-responder-p1-mode OBJECT IDENTIFIER ::= {at 24}

    '
- title: at-responder-pulling-authentication-requirements
  contents:
  - "at-responder-pulling-authentication-requirements\n                          \
    \               OBJECT IDENTIFIER ::= {at 25}\n"
- title: at-responding-rts-credentials OBJECT IDENTIFIER ::= {at 26}
  contents:
  - 'at-responding-rts-credentials OBJECT IDENTIFIER ::= {at 26}

    '
- title: at-routing-failure-action OBJECT IDENTIFIER ::= {at 27}
  contents:
  - 'at-routing-failure-action OBJECT IDENTIFIER ::= {at 27}

    '
- title: at-routing-filter OBJECT IDENTIFIER ::= {at 28}                    430
  contents:
  - 'at-routing-filter OBJECT IDENTIFIER ::= {at 28}                    430

    '
- title: at-routing-tree-list OBJECT IDENTIFIER ::= {at 29}
  contents:
  - 'at-routing-tree-list OBJECT IDENTIFIER ::= {at 29}

    '
- title: at-subtree-deliverable-content-length OBJECT IDENTIFIER ::= {at 30}
  contents:
  - 'at-subtree-deliverable-content-length OBJECT IDENTIFIER ::= {at 30}

    '
- title: at-subtree-deliverable-content-types OBJECT IDENTIFIER ::= {at 31}
  contents:
  - 'at-subtree-deliverable-content-types OBJECT IDENTIFIER ::= {at 31}

    '
- title: at-subtree-deliverable-eits OBJECT IDENTIFIER ::= {at 32}
  contents:
  - 'at-subtree-deliverable-eits OBJECT IDENTIFIER ::= {at 32}

    '
- title: at-supporting-mta OBJECT IDENTIFIER ::= {at 33}
  contents:
  - 'at-supporting-mta OBJECT IDENTIFIER ::= {at 33}

    '
- title: at-transport-community OBJECT IDENTIFIER ::= {at 34}
  contents:
  - 'at-transport-community OBJECT IDENTIFIER ::= {at 34}

    '
- title: at-user-name OBJECT IDENTIFIER ::= {at 35}
  contents:
  - 'at-user-name OBJECT IDENTIFIER ::= {at 35}

    '
- title: at-non-delivery-info OBJECT IDENTIFIER ::= {at 47}
  contents:
  - 'at-non-delivery-info OBJECT IDENTIFIER ::= {at 47}

    '
- title: at-polled-mtas  OBJECT IDENTIFIER ::= {at 37}
  contents:
  - 'at-polled-mtas  OBJECT IDENTIFIER ::= {at 37}

    '
- title: at-bilateral-table OBJECT IDENTIFIER {at 45}                       440
  contents:
  - 'at-bilateral-table OBJECT IDENTIFIER {at 45}                       440

    '
- title: at-supported-extension OBJECT IDENTIFIER {at 42}
  contents:
  - 'at-supported-extension OBJECT IDENTIFIER {at 42}

    '
- title: at-supported-mts-extension OBJECT IDENTIFIER {at 43}
  contents:
  - 'at-supported-mts-extension OBJECT IDENTIFIER {at 43}

    '
- title: at-mtas-allowed-to-poll OBJECT IDENTIFIER {at 44}
  contents:
  - 'at-mtas-allowed-to-poll OBJECT IDENTIFIER {at 44}

    '
- title: id-alternative-address-information OBJECT IDENTIFIER ::= {id 1}
  contents:
  - 'id-alternative-address-information OBJECT IDENTIFIER ::= {id 1}

    '
- title: ts-communities OBJECT-IDENTIFIER ::= {iso(1) org(3) dod(6) internet(1)
  contents:
  - 'ts-communities OBJECT-IDENTIFIER ::= {iso(1) org(3) dod(6) internet(1)

    '
- title: private(4) enterprises(1) isode-consortium (453) ts-communities (4)}
  contents:
  - "private(4) enterprises(1) isode-consortium (453) ts-communities (4)}\n      \
    \                                                             450\n"
- title: tc-cons OBJECT IDENTIFIER ::= {ts-communities 1}    -- OSI CONS
  contents:
  - 'tc-cons OBJECT IDENTIFIER ::= {ts-communities 1}    -- OSI CONS

    '
- title: tc-clns OBJECT IDENTIFIER ::= {ts-communities 2}    -- OSI CLNS
  contents:
  - 'tc-clns OBJECT IDENTIFIER ::= {ts-communities 2}    -- OSI CLNS

    '
- title: tc-internet OBJECT IDENTIFIER ::= {ts-communities 3}-- Internet+RFC1006
  contents:
  - 'tc-internet OBJECT IDENTIFIER ::= {ts-communities 3}-- Internet+RFC1006

    '
- title: tc-int-x25 OBJECT IDENTIFIER ::= {ts-communities 4} -- International X.25
  contents:
  - "tc-int-x25 OBJECT IDENTIFIER ::= {ts-communities 4} -- International X.25\n \
    \                                                   -- Without CONS\n"
- title: tc-ixi OBJECT IDENTIFIER ::= {ts-communities 5}     -- IXI (Europe)
  contents:
  - 'tc-ixi OBJECT IDENTIFIER ::= {ts-communities 5}     -- IXI (Europe)

    '
- title: tc-janet OBJECT IDENTIFIER ::= {ts-communities 6}   -- Janet (UK)
  contents:
  - 'tc-janet OBJECT IDENTIFIER ::= {ts-communities 6}   -- Janet (UK)

    '
- title: mail-protocol OBJECT-IDENTIFIER ::= {iso(1) org(3) dod(6) internet(1)
  contents:
  - 'mail-protocol OBJECT-IDENTIFIER ::= {iso(1) org(3) dod(6) internet(1)

    '
- title: private(4) enterprises(1) isode-consortium (453) mail-protocol (5)} 460
  contents:
  - 'private(4) enterprises(1) isode-consortium (453) mail-protocol (5)} 460

    '
- title: ac-p1-1984 OBJECT IDENTIFIER ::= {mail-protocol 1}      -- p1(1984)
  contents:
  - 'ac-p1-1984 OBJECT IDENTIFIER ::= {mail-protocol 1}      -- p1(1984)

    '
- title: ac-smtp  OBJECT IDENTIFIER ::= {mail-protocol 2}        -- SMTP
  contents:
  - 'ac-smtp  OBJECT IDENTIFIER ::= {mail-protocol 2}        -- SMTP

    '
- title: ac-uucp OBJECT IDENTIFIER ::= {mail-protocol 3}         -- UUCP Mail
  contents:
  - 'ac-uucp OBJECT IDENTIFIER ::= {mail-protocol 3}         -- UUCP Mail

    '
- title: ac-jnt-mail OBJECT IDENTIFIER ::= {mail-protocol 4}     -- JNT Mail (UK)
  contents:
  - 'ac-jnt-mail OBJECT IDENTIFIER ::= {mail-protocol 4}     -- JNT Mail (UK)

    '
- title: ac-p1-1988-x410 OBJECT IDENTIFIER ::= {mail-protocol 5}
  contents:
  - "ac-p1-1988-x410 OBJECT IDENTIFIER ::= {mail-protocol 5}\n                   \
    \                            -- p1(1988) in X.410 mode\n"
- title: ac-p3-1984 OBJECT IDENTIFIER ::= {mail-protocol 6}      -- p3(1984)
  contents:
  - 'ac-p3-1984 OBJECT IDENTIFIER ::= {mail-protocol 6}      -- p3(1984)

    '
- title: END
  contents:
  - "END\n                       Figure 22:  ASN.1 Summary\n"
- title: '-----------------------------------------------------------------------'
  contents:
  - '-----------------------------------------------------------------------

    '
- title: E  Regular Expression Syntax
  contents:
  - "E  Regular Expression Syntax\n   This appendix defines a form of regular expression\
    \ for pattern\n   matching.  This pattern matching is derived from commonly available\n\
    \   regular expression software including UNIX egrep(1) The matching is\n   modified\
    \ to be case insensitive.\n    A regular expression (RE) specifies a set of character\
    \ strings to\n    match against - such as \"any string containing digits 5 through\n\
    \    9\".  A member of this set of strings is said to be matched by the\n    regular\
    \ expression.\n    Where multiple matches are present in a line, a regular expression\n\
    \    matches the longest of the leftmost matching strings.\n    Regular expressions\
    \ can be built up from the following\n    \"single-character\" RE's:\n     c \
    \   Any ordinary character not listed below.  An ordinary\n          character\
    \ matches itself.\n     \\    Backslash.  When followed by a special character,\
    \ the RE\n          matches the \"quoted\" character, cancelling the special nature\n\
    \          of the character.\n     .    Dot.  Matches any single character.\n\
    \     ^    As the leftmost character, a caret (or circumflex) con-\n         \
    \ strains the RE to match the leftmost portion of a string.  A\n          match\
    \ of this type is called an \"anchored match\" because it is\n          \"anchored\"\
    \ to a specific place in the string.  The ^ character\n          loses its special\
    \ meaning if it appears in any position other\n          than the start of the\
    \ RE.\n     $    As the rightmost character, a dollar sign constrains the RE to\n\
    \          match the rightmost portion of a string.  The $ character\n       \
    \   loses its special meaning if it appears in any position other\n          than\
    \ at the end of the RE.\n     ^RE$ The construction ^RE$ constrains the RE to\
    \ match the entire\n          string.\n     [c...]\n          A nonempty string\
    \ of characters, enclosed in square brackets\n          matches any single character\
    \ in the string.  For example,\n          [abcxyz] matches any single character\
    \ from the set `abcxyz'.\n          When the first character of the string is\
    \ a caret (^), then\n          the RE matches any charac- ter except those in\
    \ the remainder\n          of the string.  For example, `[^45678]' matches any\
    \ character\n          except `45678'.  A caret in any other position is interpreted\n\
    \          as an ordinary character.\n     []c...]\n          The right square\
    \ bracket does not terminate the enclosed\n          string if it is the first\
    \ character (after an initial `^', if\n          any), in the bracketed string.\
    \  In this position it is treated\n          as an ordinary character.\n     [l-r]\n\
    \          The minus sign (hyphen), between two characters, indicates a\n    \
    \      range of consecutive ASCII characters to match.  For example,\n       \
    \   the range `[0-9]' is equivalent to the string `[0123456789]'.\n          Such\
    \ a bracketed string of characters is known as a character\n          class. \
    \ The `-' is treated as an ordinary character if it\n          occurs first (or\
    \ first after an initial ^) or last in the\n          string.\n          The following\
    \ rules and special characters allow for\n          con-structing RE's from single-character\
    \ RE's:\n          A concatenation of RE's matches a concatenation of text\n \
    \         strings, each of which is a match for a successive RE in the\n     \
    \     search pattern.\n     *    A regular expression, followed by an asterisk\
    \ (*) matches zero\n          or more occurrences of the regular expression. \
    \ For example,\n          [a-z][a-z]* matches any string of one or more lower\
    \ case\n          letters.\n     +    A regular expression, followed by a plus\
    \ character (+) matches\n          one or more occurrences of the regular expression.\
    \  For\n          example, [a-z]+ matches any string of one or more lower case\n\
    \          letters.\n     ?    A regular expression, followed by a question mark\
    \ (?) matches\n          zero or one occurrences of the regular expression.  For\n\
    \          example, ^[a-z]?[0-9]* matches a string starting with an\n        \
    \  optional lower case letter, followed by zero or more digits.\n     {m}\n  \
    \   {m,}\n     {m,n}\n          A regular expression, followed by {m}, {m,}, or\
    \ {m,n} matches\n          a range of occurrences of the regular expression. \
    \ The values\n          of m and n must be non-negative integers less than 256;\
    \ {m}\n          matches exactly m occurrences; {m,} matches at least m\n    \
    \      occurrences; {m,n} matches any number of occurrences between m\n      \
    \    and n inclusive.  Whenever a choice exists, the regular\n          expression\
    \ matches as many occurrences as possible.\n     |    Alternation: two regular\
    \ expressions separated by `|' or\n          NEWLINE match either a match for\
    \ the first or a match for the\n          second.\n     (...)\n          A regular\
    \ expression enclosed between the character sequences\n          ( and ) matches\
    \ whatever the unadorned RE matches.\n    The order of precedence of operators\
    \ at the same parenthesis level\n    is `[ ]' (character classes), then `*' `+'\
    \ `?' '{m,n}' (closures),\n    then concatenation, then `|' (alternation) and\
    \ NEWLINE.\n"
