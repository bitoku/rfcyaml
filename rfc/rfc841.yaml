- title: __initial_text__
  contents:
  - "      FIPS Pub 98\n      SPECIFICATION FOR MESSAGE FORMAT FOR COMPUTER\n    \
    \  BASED MESSAGE SYSTEMS\n      27 January 1983\n      National Bureau of Standards\n\
    \      This RFC is FIPS 98.  The purpose of distributing this document\n     \
    \ as an RFC is to make it easily accesible to the ARPA research\n      community.\
    \  This RFC does not specify a standard for the ARPA\n      Internet.\n      \
    \                        TABLE OF CONTENTS\n                                 \
    \                                  Page\n      EXECUTIVE SUMMARY             \
    \                                  5\n      1.  INTRODUCTION                 \
    \                               7\n          1.1  Guide to Reading This Document\
    \                         7\n          1.2  Vendor-Defined Extensions to the Specification\
    \         8\n          1.3  The Scope of the Message Format Specification    \
    \      8\n          1.4  Issues Not Within the Scope of the Message Format   \
    \   8\n               Specification\n          1.5  Relationship to Other Efforts\
    \                          9\n      2.  A SIMPLE MODEL OF A CBMS ENVIRONMENT \
    \                      10\n          2.1  Logical Model of a CBMS            \
    \                   12\n          2.2  Relationship to the ISO Reference Model\
    \ for Open      14\n               Systems Interconnection\n          2.3  Messages\
    \ and Fields                                   14\n          2.4  Message Originators\
    \ and Recipients                    15\n      3.  SEMANTICS                  \
    \                                17\n          3.1  Semantics of Message Fields\
    \                           17\n               3.1.1  Types of fields        \
    \                        17\n               3.1.2  Semantic Compliance Categories\
    \                 18\n               3.1.3  Originator fields                \
    \              18\n               3.1.4  Recipient fields                    \
    \           19\n               3.1.5  Date fields                            \
    \        20\n               3.1.6  Cross-reference fields                    \
    \     21\n               3.1.7  Message-handling fields                      \
    \  22\n               3.1.8  Message-content fields                         23\n\
    \               3.1.9  Extensions                                     23\n   \
    \       3.2  Message Processing Functions                          24\n      \
    \         3.2.1  Message creation and posting                   24\n         \
    \      3.2.2  Message reissuing and forwarding               25\n            \
    \        3.2.2.1  Redistribution                          26\n               \
    \     3.2.2.2  Assignment                              28\n               3.2.3\
    \  Reply generation                               28\n               3.2.4  Cross-referencing\
    \                              29\n                    3.2.4.1  Unique identifiers\
    \                      29\n                    3.2.4.2  Serial numbering     \
    \                   30\n               3.2.5  Life span functions            \
    \                30\n               3.2.6  Requests for recipient processing \
    \             31\n                    3.2.6.1  Message circulation           \
    \          31\n          3.3  Multiple Occurrences and Ordering of Fields    \
    \       31\n      4.  SYNTAX                                                 \
    \    34\n          4.1  Introduction                                         \
    \ 34\n               4.1.1  Message structure                              34\n\
    \               4.1.2  Data elements                                  35\n   \
    \                 4.1.2.1  Primitive data elements                 36\n      \
    \              4.1.2.2  Constructor data elements               36\n         \
    \      4.1.3  Properties                                     36\n            \
    \        4.1.3.1  Printing-names                          37\n               \
    \     4.1.3.2  Comments                                37\n               4.1.4\
    \  Data compression and encryption                37\n          4.2  Overview\
    \ of Syntax Encoding                           37\n               4.2.1  Identifier\
    \ Octets                              38\n               4.2.2  Length code and\
    \ Qualifier components           39\n                    4.2.2.1  Length Codes\
    \                            41\n                    4.2.2.2  Qualifier      \
    \                         42\n               4.2.3  Property-List            \
    \                      44\n               4.2.4  Data Element Contents       \
    \                   44\n          4.3  Data Element Syntax                   \
    \                44\n               4.3.1  Data elements                     \
    \             45\n                    4.3.1.1  Primitives                    \
    \          47\n                    4.3.1.2  Constructors                     \
    \       49\n                    4.3.1.3  Data Elements that Extend this Speci-\
    \   52\n                             fication\n               4.3.2  Using data\
    \ elements within message fields      53\n               4.3.3  Properties and\
    \ associated elements             54\n               4.3.4  Encryption identifiers\
    \                         54\n               4.3.5  Compression identifiers  \
    \                      54\n               4.3.6  Message types               \
    \                   55\n      SUMMARY OF APPENDIXES                          \
    \                56\n      APPENDIX A.  FIELDS -- IMPLEMENTORS' MASTER REFERENCE\
    \          57\n      APPENDIX B.  DATA ELEMENTS -- IMPLEMENTORS' MASTER REFERENCE\
    \   63\n      APPENDIX C.  DATA ELEMENT IDENTIFIER OCTETS                    71\n\
    \      APPENDIX D.  SUMMARY OF MESSAGE FIELDS BY COMPLIANCE CATE-     72\n   \
    \                GORY\n          D.1  REQUIRED Fields                        \
    \               72\n          D.2  BASIC Fields                              \
    \            72\n          D.3  OPTIONAL Fields                              \
    \         72\n      APPENDIX E.  SUMMARY OF MESSAGE SEMANTICS BY FUNCTION    \
    \      74\n          E.1  Circulation                                        \
    \   74\n          E.2  Cross-Referencing                                     74\n\
    \          E.3  Life Spans                                            74\n   \
    \       E.4  Delivery System                                       74\n      \
    \    E.5  Miscellaneous Fields Used Generally                   75\n         \
    \ E.6  Reply Generation                                      75\n          E.7\
    \  Reissuing                                             75\n          E.8  Sending\
    \ (Normal Transmission)                         75\n      APPENDIX F.  SUMMARY\
    \ OF DATA ELEMENT SYNTAX                    76\n      APPENDIX G.  SUMMARY OF\
    \ DATA ELEMENTS BY COMPLIANCE CATEGORY   78\n          G.1  BASIC Data Elements\
    \                                   78\n          G.2  OPTIONAL Data Elements\
    \                                78\n      APPENDIX H.  EXAMPLES             \
    \                             80\n          H.1  Primitive Data Elements     \
    \                          80\n          H.2  Constructor Data Elements      \
    \                       82\n          H.3  Data Elements that Extend this Specification\
    \          87\n          H.4  Fields                                         \
    \       88\n          H.5  Messages                                          \
    \    90\n          H.6  Unknown Lengths                                      \
    \ 94\n          H.7  Message Encoding Using Vendor-Defined Fields          97\n\
    \               H.7.1  Example of a JANAP-128 Message                 97\n   \
    \            H.7.2  Encoding of Example using the FIPS Message     97\n      \
    \                Format\n               H.7.3  Field Mappings of JANAP-128 to\
    \ FIPS Format    101\n               H.7.4  Vendor-Defined Fields            \
    \             101\n      REFERENCES                                          \
    \          103\n      INDEX                                                  \
    \       105\n                               LIST OF FIGURES\n      FIG. 1.   \
    \ LOGICAL MODEL OF A COMPUTER-BASED MESSAGE SYSTEM    12\n      FIG. 2.    MESSAGE\
    \ FORWARDING AND REDISTRIBUTION               27\n      FIG. 3.    EXAMPLE OF\
    \ MESSAGE CIRCULATION                      32\n      FIG. 4.    STRUCTURE OF IDENTIFIER\
    \ OCTETS                      39\n      FIG. 5.    ENCODING MECHANISM FOR QUALIFIERS\
    \ AND LENGTH        40\n                 CODES\n      FIG. 6.    REPRESENTATION\
    \ OF LENGTH CODES                      42\n      FIG. 7.    EXAMPLES OF QUALIFIER\
    \ VALUES                        43\n                               LIST OF TABLES\n\
    \      TABLE 1.    FIELDS USED IN MESSAGE PROCESSING FUNCTIONS        24\n   \
    \   TABLE 2.    HIGH-ORDER BITS IN THE IDENTIFIER OCTET            39\n      \
    \                       Federal Information\n                     Processing Standards\
    \ Publication 98\n                               27 January 1983\n           \
    \              Announcing the Standard for\n                               MESSAGE\
    \ FORMAT\n                                     FOR\n                       COMPUTER\
    \ BASED MESSAGE SYSTEMS\n      Federal  Information Processing Standards Publications\
    \ are issued\n      by the National Bureau of Standards pursuant to section 111(f)(2)\n\
    \      of the Federal Property and Administrative Services Act of  1949,\n   \
    \   as  amended,  Public  Law 89-306 (79 Stat. 1127), Executive Order\n      11717\
    \ (38 FR 12315, dated May 11, 1973), and Part 6 of  Title  15\n      Code of Federal\
    \ Regulations (CFR).\n      Name  of  Standard.  Message  Format  for  Computer\
    \ Based Message\n      Systems (FIPS PUB 98).\n      Category of Standard. Software\
    \ Standard; Interchange Codes, Media\n      and Data Files.\n      Explanation.\
    \  This  standard  separates  information  so  that  a\n      Computer  Based\
    \  Message  System  can  locate and operate on that\n      information (which\
    \ is found in the fields of messages).  This  is\n      the  first of a family\
    \ of standards which will ensure information\n      interchange among Computer\
    \ Based Message Systems.\n      Approving Authority. Secretary of Commerce\n \
    \     Maintenance Agency. Department of Commerce,  National  Bureau  of\n    \
    \  Standards (Institute for Computer Sciences and Technology).\n      Cross Index.\
    \ Not Applicable.\n      Related Documents.\n         a. American   National \
    \  Standard   Code  for  Information\n            Interchange (ASCII), X3.4-1977,FIPS\
    \ PUBS 1-1.\n         b. American National Standard  Code  Extension  Techniques\n\
    \            for  Use with the 7-bit Coded Character Set of American\n       \
    \     National  Standard   Code   (ASCII)   for   Information\n            Interchange,\
    \ X3.41-1974, FIPS PUB 35.\n         c. National  Bureau  of Standards.  Calendar\
    \ Date. Federal\n            Information Processing Standards  Publication  4,\
    \  U.S.\n            Department  of Commerce / National Bureau of Standards,\n\
    \            November, 1968.\n         d. National Bureau of Standards. Data Encryption\
    \ Standard.\n            Federal Information  Processing  Standards  Publication\n\
    \            46,  U.S.  Department  of  Commerce/National  Bureau of\n       \
    \     Standards, January, 1977.\n         e. National Bureau of Standards. Representation\
    \  of  Local\n            Time  of  the  Day for Information Interchange. Federal\n\
    \            Information Processing Standards Publication  58,  U.S.\n       \
    \     Department  of Commerce / National Bureau of Standards,\n            February\
    \ 1979.\n         f. National  Bureau  of   Standards.   Representation   of\n\
    \            Universal  Time,  Local  Time Differentials, and United\n       \
    \     States   Time   Zone   References    for    Information\n            Interchange.\
    \  Federal  Information Processing Standards\n            Publication 59, U.S.\
    \ Department of Commerce /  National\n            Bureau of Standards, February,\
    \ 1979.\n      Applicability.  This  message  format standard applies to Federal\n\
    \      departments  and  agencies  in  their  acquisition  and  use   of\n   \
    \   computer-based  message  systems (CBMS) and services in networked\n      systems,\
    \   except   for   certain    single-processor    systems.\n      Specifically,\
    \  the  standard  does not apply to a CBMS if it is a\n      stand-alone system\
    \ which is not  interconnected  with  any  other\n      CBMS:  nevertheless, conformance\
    \ with the standard is recommended\n      under these circumstances particularly\
    \ if there is a  possibility\n      that  use  of another central processing unit,\
    \ or interconnection\n      with another system, will be required in the future.\
    \  Where a new\n      CBMS node is incorporated into an existing network, the\
    \  standard\n      applies  at  the  interface  between  CBMS's.  In  this instance,\n\
    \      previously existing nodes may  accommodate  the  standard  either\n   \
    \   through  retrofit  or  by  the use of a translator.  In addition,\n      networks\
    \  that  are  established  strictly  for  the  purpose  of\n      supporting \
    \ research  in  computer  science or communications are\n      exempt from complying\
    \ with this standard.\n      Subcommittee TC97/SC16  of  the  International  Organization\
    \  for\n      Standardization   (ISO)  has  developed  a  reference  model  for\n\
    \      describing communications between \"open\" systems.  (ISO/TC97/SC16\n \
    \     DIS7498) This model is known as the ISO Reference Model for  Open\n    \
    \  Systems   Interconnection   (OSI).    It  divides  communications\n      protocols\
    \   into   seven   layers,    ranging    from    physical\n      interconnection\
    \   at   the  lowest  layer  to  data  exchange  by\n      applications programs\
    \ at the top.\n      The NBS message format deals with data  used  by  an  application\n\
    \      within  a  system; it is not a protocol.  Messages defined by the\n   \
    \   NBS   message   format   would   be  manipulated  by  a  layer  7\n      (Application)\
    \ protocol.\n      A message as referenced by the NBS message format is  a  unit\
    \  of\n      communication from an originator to a recipient, exclusive of any\n\
    \      message  heading  or  control information (often referred to as a\n   \
    \   message envelope).  An originator  and  recipient  are  typically\n      people\
    \  but  may  be  roles  or  processes.   A role identifies a\n      function within\
    \ an organization as opposed to an  individual  who\n      performs  that  function.\
    \  A process refers to a computer process\n      that might originate or receive\
    \ a message.\n      Special Information. Certain characteristics distinguish \
    \ a  CBMS\n      from  other  systems  for  sending  messages.    Originators\
    \  and\n      recipients  may  be  terminal  users   or   processes   (discrete\n\
    \      software).    A  system  in  which  the  originator  addresses  a\n   \
    \   particular terminal device rather than a particular recipient  is\n      not\
    \  considered to be a CBMS.  The recipient's system need not be\n      available\
    \ when the originator sends a message.  The  message  can\n      be  stored  in\
    \ the originator's system or at an intermediate node\n      in the network until\
    \ the recipient's  system  becomes  available.\n      In  addition,  a  CBMS \
    \ offers  both message creation and message\n      processing facilities as part\
    \ of the system.  A CBMS offers  text\n      editing  facilities  to  assist \
    \ the user in the preparation of a\n      message.   The  recipient  CBMS  stores\
    \  the  message  until  the\n      recipient  chooses  to  read  it.    Message\
    \ systems which do not\n      provide these minimum functions are not considered\
    \ CBMS's.\n      The intent of the message format standard is to  allow  users\
    \  of\n      different computer based message systems to send messages to each\n\
    \      other.    The  standard  does  not  make  demands  on the message\n   \
    \   transfer system except that it transports messages transparently.\n      The\
    \ standard makes some simple demands on the  CBMS.    The  CBMS\n      must  recognize\
    \  fields  within  the  message,  process fields in\n      predetermined ways,\
    \ create messages  in  the  correct  form,  and\n      recognize  and  create\
    \  data  elements of messages in the correct\n      format.  The standard does\
    \ not dictate or constrain the  services\n      that  the  CBMS  provides for\
    \ users, or the way that messages are\n      stored, represented, manipulated,\
    \ or presented to the user by the\n      CBMS.\n      The standard does constrain\
    \ the format  of  the  message  at  the\n      interface  between  systems.  \
    \ This guarantees that, whatever the\n      source of the message, it arrives\
    \ at the receiving system in  the\n      standard   format.      The  message\
    \  format  standard  separates\n      information into fields so that the CBMS\
    \ can locate  and  operate\n      on  that  information.   The message is converted\
    \ from the format\n      used within the originator's CBMS  to  the  standard\
    \  format  (if\n      different)  on  leaving  the  originator's  CBMS.  The message\
    \ is\n      converted from the standard format to the format used within  the\n\
    \      recipient's CBMS (if different) on entering the recipient's CBMS.\n   \
    \   Specifications.  Federal  Information Processing Standard (FIPS),\n      Message\
    \ Format for Computer Based Message Systems (affixed).\n      Qualifications.\
    \ None\n      Implementation Schedule. All  applicable  equipment  or  services\n\
    \      ordered  on  or after 24 months from the date of issuance of this\n   \
    \   FIPS PUB, and all CBMS development initiated inhouse on or  after\n      12\
    \  months  from the date of issuance of this FIPS PUB must be in\n      conformance\
    \ with this standard unless a waiver has been  obtained\n      in  accordance\
    \  with the procedure described below.  An exception\n      to this standard is\
    \ made when procurement actions  are  into  the\n      solicitation phase on the\
    \ date of issuance of this FIPS PUB.\n      Waivers.  Heads  of agencies may request\
    \ that the requirements of\n      this standard be waived in instances  where\
    \  it  can  be  clearly\n      demonstrated  that  there  are  appreciable  performance\
    \  or cost\n      advantages to be gained and that the  overall  interests  of\
    \  the\n      Federal  Government  are  best  served  by granting the requested\n\
    \      waiver.  Such waiver requests will be reviewed by and are subject\n   \
    \   to the approval of the Secretary of Commerce.  The waiver request\n      must\
    \ address the criteria stated above as the  justification  for\n      the waiver.\n\
    \      Forty-five  days should be allowed for review and response by the\n   \
    \   Secretary of Commerce.  Waiver requests shall be submitted to the\n      Secretary\
    \ of Commerce, Washington, D.C. 20230, and labeled  as  a\n      Request   for\
    \  a  Waiver  to  a  Federal  Information  Processing\n      Standard.  No agency\
    \ shall take any action to  deviate  from  the\n      standard  prior  to  the\
    \  receipt  of  a waiver approval from the\n      Secretary of Commerce.  No agency\
    \  shall  begin  any  process  of\n      implementation  or acquisition of non-conforming\
    \ equipment unless\n      it has already obtained such approval.\n      Where\
    \ to Obtain Copies. Either paper or microfiche copies of this\n      Federal \
    \ Information  Processing  Standard,  including  technical\n      specifications,\
    \  may  be  purchased  from  the National Technical\n      Information  Service\
    \  (NTIS)  by  ordering  Federal   Information\n      Processing Standard Publication\
    \ (FIPS-PUB-98), Message Format for\n      Computer  Based Message Systems.  Ordering\
    \ information, including\n      prices and delivery alternatives, may be obtained\
    \  by  contacting\n      the   National   Technical   Information  Service  (NTIS),\
    \  U. S.\n      Department of Commerce, Springfield,  Virginia  22161,  telephone\n\
    \      number  (703)  487-4650.    Payment  may  be made by check, money\n   \
    \   order, purchase order, credit card, or deposit account.\n                \
    \              EXECUTIVE SUMMARY\n           The  message  format  specification\
    \ addresses the problem of\n      exchanging  messages  between  different  computer-based\
    \  message\n      systems  (CBMSs).    This interchange problem can be addressed\
    \ on\n      several  levels.    One  level  specifies  the  physical   inter-\n\
    \      connections,  another  specifies  how information travels between\n   \
    \   CBMSs, another specifies  form  and  meaning  of  messages  being\n      interchanged.\
    \    The  highest  level  specifies  operations  on a\n      message.  Each of\
    \ these levels would be covered  by  a  different\n      standard.\n         \
    \  This  message format specification addresses only the issues\n      of form\
    \ and meaning of messages at the points in time  when  they\n      are  sent \
    \ from  one  CBMS and received by another.  Messages are\n      composed of fields,\
    \ containing different classes of  information.\n      These  fields  contain\
    \  information about the message originator,\n      message recipient, subject\
    \ matter, precedence and  security,  and\n      references  to  previous  messages,\
    \  as  well  as the text of the\n      message.  Standard formats (syntax) for\
    \ messages provide a  basis\n      for  the  contents  of  messages  generated\
    \  by  one  CBMS  to be\n      processed by another CBMS.  Standard meanings (semantics)\
    \ for the\n      components of a message facilitate standard interpretation  of\
    \  a\n      message,  so  that  everyone receiving a message gets the meaning\n\
    \      intended by its sender.\n           Each CBMS that implements this message\
    \ format  specification\n      will  be  compatible  with  any  other  CBMS  that\
    \ implements the\n      specification, provided that the use of optional fields\
    \ and  data\n      elements  is  negotiated  in  advance.    This  ensures  that\
    \ the\n      contents of a message posted by one  CBMS  can  be  received  and\n\
    \      interpreted by a different CBMS.\n           This  message  format  specification\
    \ has been developed as a\n      result of examining CBMSs currently  in  use\
    \  in  commercial  and\n      research  environments.    Three major design perspectives\
    \ helped\n      shape the message format specification.\n        o  Viability.\
    \    The  message  format  specification   uses\n           concepts  that  already\
    \ work.  It has been designed with\n           implementation concerns in mind.\n\
    \        o  Compatibility.    The   message   format   specification\n       \
    \    contains concepts from existing CBMSs.  For this reason,\n           many\
    \ CBMS would already contain functions and components\n           similar  to\
    \  those  required  to  implement  the message\n           format specification.\n\
    \        o  Extensibility.      This  message  format  specification\n       \
    \    defines a broad range of message content components  and\n           requires\
    \  only an elementary subset of them.  This means\n           that even a very\
    \ simple CBMS can implement  the  message\n           format  specification. \
    \ The message format specification\n           contains a rich  set  of  optional\
    \  components  and,  in\n           addition,  mechanisms  for  user  extensions\
    \  and future\n           extensions to the message format specification.\n  \
    \         The  message  format  specification  defines  the  form  and\n     \
    \ meaning  of  message  contents  and their components as they pass\n      from\
    \ one CBMS to another through a message transfer system.   The\n      message\
    \   format  specification  does  not  address  any  of  the\n      following major\
    \ issues.\n        o  Functions or services provided to a user by a CBMS.\n  \
    \              For  example,  the  message  format   specification\n         \
    \       assumes  that  every CBMS allows a user to send and\n                receive\
    \ messages.  It does not specify any  of  the\n                details of how\
    \ a send function or a message-reading\n                function  might  work\
    \ or how it might appear to the\n                user.  That is, the  message\
    \  format  specification\n                neither limits nor mandates functions.\n\
    \        o  Storage or format of message contents in a CBMS.\n               \
    \ The  message  format specification defines the form\n                and contents\
    \ of messages when they are  transferred\n                between  systems.  \
    \ A CBMS may or may not choose to\n                use the same format for internal\
    \ storage.\n        o  Message transfer system protocols.\n                The\
    \ message format specification does  not  specify\n                how  a  message\
    \  travels  between  CBMSs.   It does\n                specify the form of its\
    \ contents as it  leaves  and\n                arrives,  assuming  only  that\
    \ the message is moved\n                transparently by the transfer system.\n\
    \        o  Message envelopes.\n                While a message is traveling between\
    \ CBMSs,  it  is\n                enclosed  in a message envelope.  Message envelopes\n\
    \                contain all the information about a message that  a\n       \
    \         message transfer system needs to know.  The message\n              \
    \  format  specification does not define the format or\n                content\
    \ of a message envelope.\n        o  How message originators and recipients are\
    \ identified.\n                The message format specification does not provide\
    \ a\n                representation scheme for the names or addresses of\n   \
    \             message originators  and  recipients  as  they  are\n          \
    \      known to a CBMS.\n      1.  INTRODUCTION\n           A  computer-based\
    \ message system (CBMS) allows communication\n      between \"entities\" (usually\
    \ people) using computers.    Computers\n      serve  both  to mediate the actual\
    \ communications between systems\n      and to provide users with facilities for\
    \ creating and reading the\n      messages.\n           CBMSs have  been  developing\
    \  for  over  ten  years.    More\n      recently,  CBMSs  have  been one of the\
    \ bases in industry for the\n      introduction of office automation.  A growing\
    \ number  of  organi-\n      zations  use  either  their own or a commercially\
    \ available CBMS.\n      The design and complexity of these systems  vary  widely.\
    \    This\n      message  format  specification  provides  a basis for interaction\n\
    \      between different CBMSs by defining the format of messages passed\n   \
    \   between them.\n      1.1  Guide to Reading This Document\n           The method\
    \ of presenting the material in this  specification\n      is  to  combine  the\
    \ technical specification with tutorial infor-\n      mation.  This approach has\
    \ been taken to place the  specification\n      in context and improve its readability.\n\
    \           The  core of the technical information in the document is in\n   \
    \   Section 2, \"A Simple Model of a CBMS Environment\";  Section  3.1,\n    \
    \  \"Semantics  of  Message Fields\"; Section 4.2, \"Overview of Syntax\n    \
    \  Encoding\"; and Section 4.3, \"Data Element Syntax\".  Appendixes  A\n    \
    \  and  B  consolidate  the technical information.  These appendices\n      are\
    \ designed  for  ease  of  reference  and  should  be  read  in\n      conjunction\
    \   with   the  body  of  the  report  for  a  complete\n      understanding of\
    \ the message format  presented  in  the  specifi-\n      cation.\n          \
    \ Section  2  presents  a simple model of operation of a CBMS.\n      Section\
    \ 3 discusses the components of messages and their  meaning\n      (semantics),\
    \    including    discussions   of   the   recommended\n      relationship between\
    \ message components and CBMS user  functions.\n      (See  Section  3.2.)   \
    \ Section  4  presents  details of the form\n      (syntax) required for components\
    \ of a message.\n           Appendix D summarizes the components of  messages\
    \  according\n      to  whether  they are required or optional for CBMSs implementing\n\
    \      the message format  specification.    Appendix  E  organizes  the\n   \
    \   message  components  according  to  the  functional  class of the\n      components.\
    \  Appendix F provides an  overview  of  the  syntactic\n      elements defined\
    \ by this message format specification; Appendix G\n      summarizes  those elements\
    \ according to whether they are required\n      or optional for a CBMS implementing\
    \ the message  format  specifi-\n      cation.  Examples of each syntactic element\
    \ appear in Appendix H,\n      displaying syntax and describing the associated\
    \ semantics.\n      1.2  Vendor-Defined Extensions to the Specification\n    \
    \       This  specification provides the capability of extending the\n      range\
    \ of functionality by the use  of  vendor-defined  qualifiers\n      and  vendor-defined\
    \  data  elements.    Any  vendor who uses this\n      capability to provide services\
    \ which are  essentially  equivalent\n      to  those already designated as required,\
    \ basic, or optional does\n      not comply with the specification.\n      1.3\
    \  The Scope of the Message Format Specification\n           The purpose of  this\
    \  message  format  specification  is  to\n      present  the  semantics  and\
    \ syntax to be used for messages being\n      exchanged between CBMSs.  Specifically,\
    \ it defines the following:\n        o  The meaning and form of standard fields\
    \ to  be  used  in\n           messages.\n        o  Which fields must be present\
    \ in all messages.\n        o  Which fields complying CBMSs must be able to process.\n\
    \        o  How  messages,  fields, and the data contained in fields\n       \
    \    are represented.\n      1.4  Issues Not Within the Scope of the Message Format\
    \ Specifi-\n           cation\n           The  message  format  specification\
    \  does  not  address  the\n      following  issues,  some  of which are being\
    \ covered by other NBS\n      standards development programs  at  the  Institute\
    \  for  Computer\n      Sciences and Technology (ICST).  (See [BlaR-80] for a\
    \ description\n      of the ICST network protocols program.)\n        o  The nature\
    \ of a message transfer system, except to state\n           the assumption that\
    \ it transfers messages transparently.\n        o  The  form  or  nature  of the\
    \ protocols used to transfer\n           messages (posting, relay, and delivery\
    \ protocols).\n        o  The content and representation of message envelopes.\n\
    \        o  Representations for unique identifiers  (in  particular,\n       \
    \    message identifiers).\n        o  Network and internetwork addressing.\n\
    \        o  Representations  for  identities  of message originators\n       \
    \    and recipients.\n        o  Certain message processing functions that CBMSs\
    \  provide\n           for  users,  e.g., those concerned with the creation and\n\
    \           editing of text.\n        o  Presentation of messages to users.\n\
    \        o  Representations for multi-media objects.\n        o  Data representation\
    \ for messages within CBMSs.\n        o  Data sharing or any storage management\
    \ within CBMSs.\n        o  Representations for fixed  or  floating  point  numbers.\n\
    \      1.5  Relationship to Other Efforts\n           The  message  format specification\
    \ is based on several docu-\n      ments and the current state  of  many  CBMSs\
    \  available  both  in\n      industry and the research community.  These documents\
    \ include the\n      standardization efforts in the ARPANet [CroD-77, PosJ-79]\
    \ and the\n      CCITT,  proposed  ISO  and  ANSI  header  format standards [TasG-\n\
    \      80, ISOD-79], the work of IFIPS Working Group  6.5,  and  various\n   \
    \   papers  about the general nature of mail systems, addressing, and\n      mail\
    \ delivery.  (See [FeiE-79] for references.\n      2.  A SIMPLE MODEL OF A CBMS\
    \ ENVIRONMENT\n           In  order  to provide a framework for presenting the\
    \ message\n      format specification, this section describes a simple  functional\n\
    \      model for a CBMS.  The model provides a high-level description of\n   \
    \   both  user  facilities  and  system architecture.  Discussions of\n      messages,\
    \ message originators, and message  recipients  serve  to\n      further clarify\
    \ the nature of a CBMS.\n           A  CBMS permits the transfer of a message\
    \ from an originator\n      to a recipient.  \"Originator\" and \"recipient\"\
    \ are used  in  their\n      normal  English  senses.    (See Section 2.4.)  A\
    \ message (in its\n      most abstract definition) is simply a unit of communication\
    \  from\n      an  originator  to a recipient.  A CBMS offers several classes\
    \ of\n      functions to its users:\n        o  Message Creation:  The  facilities\
    \  used  by  a  message\n           originator  to  create messages and specify\
    \ to whom they\n           are to be sent.\n        o  Message Transfer: The facilities\
    \ used to convey  a  mes-\n           sage to its recipient(s).\n        o  Recipient\
    \  Processing:  The facilities used by a message\n           recipient to process\
    \ messages that have arrived.\n           These classes of functions are presented\
    \ in more  detail  in\n      Section 3.2.\n           CBMSs  differ  from  other\
    \  office automation/communications\n      systems in a number of ways.\n    \
    \    o  Unlike other types of  electronic  communications,  CBMS\n           messages\
    \  are  sent  to  particular  individuals, not to\n           stations or telephone\
    \ sets.  If a recipient moves  to  a\n           different  location, messages\
    \ sent to that recipient are\n           delivered to the recipient at the new\
    \ location.\n        o  Transmission of CBMS  messages  is  asynchronous.    The\n\
    \           recipient's  system  need not be available when the mes-\n       \
    \    sage leaves the originator's  system.    That  is,  CBMS\n           message\
    \ transfer facilities are store-and-forward.\n        o  CBMS  messages can contain\
    \ a wide variety of data.  They\n           are not constrained to any single\
    \ kind of communication.\n           CBMS messages are often simple  memoranda\
    \  but  are  not\n           restricted to text.  A CBMS message may contain any\
    \ kind\n           of  data  that  an originator wishes to send to a recip-\n\
    \           ient.  By contrast, Teletex  systems  and  communicating\n       \
    \    word  processors  handle  the  transfer  of  final  form\n           documents;\
    \ compatible communicating word processors  can\n           exchange  documents\
    \ in editable form; Telex and TWX deal\n           in unformatted text.\n    \
    \    o  CBMSs offer message creation facilities as an  important\n           part\
    \  of  the  system.  CBMSs assist users in the prepa-\n           ration of messages\
    \ by  having  text  editing  facilities\n           available  and allowing users\
    \ to include data stored on-\n           line in messages.  Some CBMSs also  interface\
    \  to  other\n           office  automation  facilities,  such  as formatters\
    \ and\n           spelling correctors.  This is not true of Telex, TWX, or\n \
    \          similar services.\n        o  CBMSs offer recipient processing facilities\
    \ as an impor-\n           tant part of the system.  This is not true of most\
    \ other\n           forms of electronic communications.  For example,  Telex\n\
    \           and TWX systems simply print messages on paper when they\n       \
    \    are  received,  without  retaining a copy in the system.\n           (Teletex\
    \ systems are similar to Telex systems, but  some\n           can  retain  a \
    \ copy  of the document in local storage.)\n           Communicating  word  processors\
    \   might   notify   their\n           operators  that  a  document  has  been\
    \  received and is\n           stored on-line, but they offer  little  in  the\
    \  way  of\n           other recipient processing facilities.  Most CBMSs offer\n\
    \           at least the following recipient processing facilities:\n        \
    \     .  The  ability  to retain a copy of a message on-line\n               \
    \ after it has been read.\n             .  The ability to examine or  delete \
    \ stored  messages\n                individually.\n             .  The ability\
    \ to organize messages using some form of\n                electronic \"file folder.\"\
    \n             .  The  ability  to  determine  if a message is recent\n      \
    \          (has arrived since the last time the recipient used\n             \
    \   the CBMS) or unseen (has never been examined by the\n                recipient).\n\
    \             .  The  ability  to  summarize  stored  messages.    A\n       \
    \         summary   usually   includes  information  such  as\n              \
    \  whether the message is recent or  unseen,  when  it\n                was  received,\
    \  its length, who it is from, and its\n                subject.\n           \
    \  .  The ability to retrieve a stored message based upon\n                one\
    \  or  more of its attributves (for example, when\n                the message\
    \ was received, whether  or  not  it  has\n                been  seen  or deleted,\
    \ and the values contained in\n                its fields).\n             .  A\
    \ forward facility that allows users to include all\n                or part of\
    \ a message in a new outgoing message.\n             .  A reply facility that\
    \ allows users to  answer  mes-\n                sages  without having to enter\
    \ a new list of recip-\n                ients.\n      2.1  Logical Model of a\
    \ CBMS\n           CBMS facilities for message creation, transfer,  and  recip-\n\
    \      ient  processing  are  reflected  in  a  logical  model of a CBMS\n   \
    \   developed by IFIP Working Group 6.5.  (An  essentially  identical\n      model\
    \  is  being  used  by  CCITT  Study  Group  VII, Question 5,\n      regarding\
    \  Message  Handling  Systems [CCIT-82].)     The   model\n      consists  of\
    \  a  Message  Transfer  System  and  a number of User\n      Agents.  (See Figure\
    \ 1.)\n                    |                  |\n                    |     *************\
    \     |\n      *********  ------>  *  Message  *  ------->  *********\n      *\
    \ User  *  Posting  * Transfer  *  Delivery  * User  *\n      * Agent *  Protocol\
    \ *  System   *  Protocol  * Agent *\n      *********  <------- *************\
    \  <-------  *********\n                    |                       |\n      \
    \              |                       |\n                 Posting           \
    \     Delivery\n                  Slot                    Slot\n             \
    \             Message Flow\n      Originator -------------------------------->\
    \ Recipient\n      FIG. 1.  LOGICAL MODEL OF A COMPUTER-BASED MESSAGE SYSTEM\n\
    \           A User Agent (UA) is a functional entity that acts on behalf\n   \
    \   of a user, assisting with creating and  processing  messages  and\n      communicating\
    \ with the Message Transfer System.\n           The Message Transfer System(MTS)\
    \ is an entity that accepts a\n      message from its originator's User Agent\
    \ and ultimately passes it\n      to  each  of  its  recipients' User Agents.\
    \  The Message Transfer\n      System may perform routing and storage functions\
    \  (among  others)\n      in order to accomplish its task.\n           Transferring\
    \  a  message  from an originator's User Agent to\n      the Message Transfer\
    \ System is called Posting;  the  originator's\n      User  Agent  and  Message\
    \  Transfer  System  engage  in a Posting\n      Protocol in order to accomplish\
    \ Posting.  Transferring a  message\n      from  the  Message Transfer System\
    \ to a recipient's User Agent is\n      called Delivery; the recipient's User\
    \ Agent and Message  Transfer\n      System  engage  in  a  Delivery  Protocol\
    \  in order to accomplish\n      Delivery.\n           The point at which responsibility\
    \ for a  message  is  trans-\n      ferred  is called a Slot.  The Posting Slot\
    \ is the point at which\n      responsibility for a message passes  from  an \
    \ originator's  User\n      Agent  to  the  Message Transfer System; the Delivery\
    \ Slot is the\n      point at which responsibility  for  a  message  passes  from\
    \  the\n      Message Transfer System to a recipient's User Agent.\n         \
    \  The  model  divides  messages  into  two  parts, the message\n      content\
    \ and the message envelope.  The  message  content  is  the\n      information\
    \  that the originator wishes to send to the recipient;\n      this message format\
    \ specification deals solely with  the  message\n      content.    The  message\
    \ envelope consists of all the information\n      necessary for the Message Transfer\
    \ System to  do  its  job;  this\n      message   format  specification  does\
    \  not  specify  the  message\n      envelope.  Some of the data appearing  on\
    \  the  message  envelope\n      could  be  redundant with some data found in\
    \ the message content.\n      The Message Transfer  System  is  not  expected\
    \  to  examine  the\n      message content unless it is told to do so by the originator's\
    \ or\n      recipient's User Agent.\n           This  message format specification\
    \ places no restrictions on\n      the Message Transfer System itself, except\
    \ that  it  be  able  to\n      transfer  messages  between originating and receiving\
    \ UAs without\n      reading or altering the contents  of  messages  unless  otherwise\n\
    \      instructed by the UAs.  In addition, this message format specifi-\n   \
    \   cation  does  not dictate the form or nature of any protocol used\n      by\
    \ the Message Transfer System.   Finally,  this  message  format\n      specification\
    \ does not specify the content or form of the message\n      envelope.   That\
    \ is, the message format specification defines the\n      format for the contents\
    \ of messages, not the manner in which they\n      are transmitted.\n        \
    \   Many of today's commercially available CBMSs incorporate all\n      of the\
    \ facilities  represented  in  the  logical  model.    Their\n      architectures\
    \  may  reflect  the economies that can be taken when\n      implementing systems\
    \  that  are  self-contained.    For  example,\n      stand-alone  systems  that\
    \  store  messages  in  a single central\n      database  require  no  Message\
    \ Transfer System; an implementation\n      may integrate software for User Agent\
    \ and Message Transfer System\n      functions, doing away with Posting or Delivery\
    \ Protocols.\n      2.2  Relationship to the ISO Reference Model for Open Systems\n\
    \           Interconnection\n           Subcommittee TC97/SC16 of the International\
    \ Organization for\n      Standardization  (ISO)  has  developed  a  reference\
    \  model   for\n      describing communications between \"open\" systems [ISOD-82].\
    \  This\n      model  is  known  as  the  ISO  Reference  Model for Open Systems\n\
    \      Interconnection (OSI).  It divides communications protocols  into\n   \
    \   seven layers, ranging from physical interconnection at the lowest\n      layer\
    \ to data exchange by application programs at the top.\n           This message\
    \ format specification deals with data used by an\n      application  within \
    \ a  system.    Thus, the message format being\n      specified here is not a\
    \ protocol.  Since it is not a protocol, it\n      lies outside of the model for\
    \ open systems interconnection.  User\n      Agents are application layer entities\
    \ (layer 7), however, and the\n      protocols used by a message transfer system\
    \ are above the session\n      layer (layer 5).\n      2.3  Messages and Fields\n\
    \           A message is a unit of communication from an originator to a\n   \
    \   recipient.  A message consists of a series of  components  called\n      fields.\
    \   Fields can be described according to their meaning in a\n      message (semantics)\
    \ and according to the format required for them\n      in a message (syntax).\n\
    \           Semantically, a field is just a component of a message;  the\n   \
    \   meanings  of particular fields are defined by this message format\n      specification.\
    \  Syntactically, a field is a unit  of  data  whose\n      form is defined by\
    \ this message format specification.  Additional\n      fields can be defined\
    \ by users or vendors as long as they conform\n      to  the  syntactic  and \
    \ semantic  rules that this message format\n      specification defines for additional\
    \ fields.\n           (A note on terminology: A  message  consists  of  components\n\
    \      called  fields.  The words \"message\" and \"field\" are used both in\n\
    \      the informal sense  of  the  previous  sentence  and  in  a  more\n   \
    \   restricted  sense  as names of particular syntactic elements.  As\n      syntactic\
    \  element  names,   Message   and   Field   are   always\n      capitalized.)\n\
    \           Some  CBMS functions are based on the contents of particular\n   \
    \   fields; other functions (such as the ability to read  a  message)\n      may\
    \  have  little  to do with the fields themselves.  Section 3.2\n      discusses\
    \ some of  the  specific  functions  that  a  CBMS  might\n      provide  to \
    \ users  and  the  fields that must be used to support\n      those functions.\n\
    \      2.4  Message Originators and Recipients\n           This message format\
    \ specification refers to  message  origi-\n      nators  and recipients.  These\
    \ terms were defined functionally in\n      Figure 1.  When the message format\
    \ specification  refers  to  the\n      identity  of  a  message  originator or\
    \ recipient, it means \"that\n      information which uniquely identifies the\
    \ message  originator  or\n      recipient  within  the  domain of the given message\
    \ system.\"  The\n      syntax and semantics of message addressing  are  not \
    \ within  the\n      scope of the message format specification.\n           Originators\
    \  and  recipients can be people, roles, processes\n      or groups.\n       \
    \    People.  People as originators and recipients  are  specific\n      individuals.\n\
    \           Roles.    Roles  identify  functions within organizations as\n   \
    \   opposed to the  specific  individuals  who  perform  them.    For\n      example,\
    \  consider  a  newspaper  that  produces both morning and\n      evening editions\
    \ and therefore operates with more than one shift.\n      Someone wishing to contact\
    \ the city desk would send a message  to\n      the  city  desk  role rather than\
    \ trying to determine exactly who\n      was assigned to the city desk at a specific\
    \ time.    (Of  course,\n      messages  can usually be sent to the individuals\
    \ directly whether\n      or not they are actually performing a role at the time.)\n\
    \           Processes.  A process in a computer could serve as either an\n   \
    \   originator or a recipient for messages.  A computer system  might\n      originate\
    \  a  message  to  notify a recipient about the status of\n      some task.  For\
    \ example, an archive utility  could  notify  users\n      about  files  that\
    \  have been archived; a distributed file system\n      could notify a user that\
    \ a remote file has been  deposited  on  a\n      local file system.  Messages\
    \ could be used by computer systems to\n      warn  about  some  impending  condition\
    \  or  even  to monitor the\n      performance of the computer itself.  Some computer\
    \ processes  may\n      also  be  message  recipients,  taking  action based upon\
    \ message\n      contents.\n           In addition, some CBMSs allow messages\
    \ to be sent to groups.\n      A group is a predefined list of  message  recipients.\
    \    Using  a\n      group   name  as  a  recipient  permits  message  originators\
    \  to\n      designate a potentially large number of recipients using a single\n\
    \      recipient identifier.  This makes using the CBMS more  convenient\n   \
    \   and accurate.\n      3.  SEMANTICS\n           This  section discusses two\
    \ major topics, message processing\n      functions and message field meanings.\
    \  Section 3.1 describes  the\n      six  functional  groups of message fields.\
    \  The functional groups\n      are Origination, Dates, Recipients,  Cross-referencing,\
    \  Message-\n      handling, and Message-contents.  They are explained more fully\
    \ in\n      Section 3.1.1, along with detailed discussion of the semantics of\n\
    \      all  the  fields in each functional group.  Section 3.2 describes\n   \
    \   message processing functions whose  operation  is  based  on  the\n      meanings\
    \ of particular message fields.\n      3.1  Semantics of Message Fields\n    \
    \       The  definition  of  a  message  is  discussed  generally in\n      Sections\
    \ 1 and 2.  Semantically valid messages must  contain  one\n      From  field,\
    \  one  To field, and one Posted-Date field.  They may\n      contain, in addition,\
    \ any number of other  fields,  depending  on\n      the  processing  and  functions\
    \  supplied  by  the originating or\n      receiving CBMS.  (Section  3.2  describes\
    \  classes  of  functions\n      supplied by CBMSs.)\n      3.1.1  Types of fields\n\
    \           Message  receiving programs are required to interpret fields\n   \
    \   according to the semantics described in  the  remainder  of  this\n      section.\
    \  The message fields defined in this document are grouped\n      into the following\
    \ functional categories.\n        o  Originator  fields  indicate who or what\
    \ participated in\n           the creation of the message and where replies should\
    \  be\n           directed.  (See Section 3.1.3.)\n        o  Date fields record\
    \ when events take place, for a variety\n           of events, such as message\
    \ creation or expiration.  (See\n           Section 3.1.5.)\n        o  Recipient\
    \  fields  indicate  who  or what is intended to\n           receive a message.\
    \  (See Section 3.1.4.)\n        o  Cross-reference fields label a message or\
    \ refer to other\n           messages.  (See Section 3.1.6.)\n        o  Message-handling\
    \ fields record the  type  of  service  a\n           message's  sender requested\
    \ of a message transfer system\n           or indicate how the message should\
    \  be  treated  by  its\n           recipients.  (See Section 3.1.7.)\n      \
    \  o  Message-content   fields   either  contain  the  primary\n           content\
    \ of a message, or index the message, or summarize\n           the message.  (See\
    \ Section 3.1.8.)\n        o  Extension fields provide mechanisms  for  extending\
    \  the\n           message format specification.  (See Section 3.1.9.)\n     \
    \ 3.1.2  Semantic Compliance Categories\n           For purposes of determining\
    \ whether a CBMS complies with the\n      semantic  requirements of this message\
    \ format specification, mes-\n      sage fields have been divided into three categories:\n\
    \      REQUIRED  These fields must be present in all messages  and  must\n   \
    \             be  processed  by message receiving programs as defined\n      \
    \          by the message format specification.\n      BASIC     These fields\
    \ need not be present in  all  messages  but\n                when  they do appear,\
    \ they must be processed by message\n                receiving programs as defined\
    \  by  the  message  format\n                specification.\n      OPTIONAL  These\
    \  fields  need  not be present in all messages and\n                may be ignored\
    \ by  message  receiving  programs.    The\n                exact  meaning  of\
    \  \"ignored\"  is  not specified by the\n                message format specification.\
    \   However,  a  CBMS  must\n                recognize  the existence of an optional\
    \ field (that is,\n                optional fields should not cause errors) and\
    \  must  not\n                process the field in a manner contrary to the semantics\n\
    \                defined  for  that field by the message format specifi-\n   \
    \             cation.  It is left to the discretion of a  recipient's\n      \
    \          CBMS  what  action is to be taken when an instance of a\n         \
    \       locally unimplemented optional field is detected.\n           (Syntactic\
    \ compliance is defined in Section 4.1.2.)\n      3.1.3  Originator fields\n \
    \          A message originator may be  a  person,  role,  or  process.\n    \
    \  Originator fields identify a message's author, who is responsible\n      for\
    \   the   message,   who   or  what  sent  it,  and  where  any\n      replies\
    \ should be directed.  (See Section 2.4.)\n      From                     (REQUIRED)\n\
    \                This  field  contains the identity of the originator(s)\n   \
    \             taking formal responsibility for  this  message.    The\n      \
    \          contents  of  the  From field is to be used for replies\n         \
    \       when no Reply-to field appears in a message.\n      Reply-To         \
    \        (BASIC)\n                This field identifies any recipients of replies\
    \ to  the\n                message.\n      Author                   (OPTIONAL)\n\
    \                This  field  identifies the individual(s) who wrote the\n   \
    \             primary contents of the message.   Use  of  the  Author\n      \
    \          field  is  discouraged  when the contents of the Author\n         \
    \       field and the From field would be completely redundant.\n      Sender\
    \                   (OPTIONAL)\n                This field identifies the agent\
    \ who sent  the  message.\n                It is used either when the sender is\
    \ not the originator\n                responsible  for the message or to indicate\
    \ who among a\n                group  of  originators  responsible  for  the \
    \  message\n                actually   sent  it.    Use  of  the  Sender  field\
    \  is\n                discouraged when the contents of the Sender  field  and\n\
    \                From  field  would be completely redundant.  The sender\n   \
    \             field may specify  only  one  originator  identity  and\n      \
    \          appear only once in a message.\n      3.1.4  Recipient fields\n   \
    \        Message  recipients  may  be  people,  roles,  processes, or\n      groups.\
    \  (See Section 2.4).  Recipient  fields  identify  who  or\n      what is to\
    \ receive the message.\n      To                       (REQUIRED)\n          \
    \      This  field  identifies  the  primary  recipients  of a\n             \
    \   message.\n      Bcc                      (OPTIONAL)\n                This\
    \  field  identifies  additional  recipients  of   a\n                message\
    \  (a  \"blind carbon copies\" list).  The contents\n                of this field\
    \ are not to be included in copies  of  the\n                message  sent  to\
    \ the primary and secondary recipients.\n                See section 3.2.1 for\
    \ further discussion of the use  of\n                blind carbon copies lists.\n\
    \      Cc                       (BASIC)\n                This field identifies\
    \ secondary recipients of a message\n                (a \"carbon copies\" list).\n\
    \      Circulate-Next           (OPTIONAL)\n                This field is used\
    \ in conjunction with the Circulate-To\n                field.    (See  Section\
    \  3.2.6.1.)    It identifies all\n                recipients in a circulation\
    \ list who have not  received\n                the message.\n      Circulate-To\
    \             (OPTIONAL)\n                This   field  identifies  recipients\
    \  of  a  circulated\n                message.   (See  Section  3.2.6.1.)    It\
    \  is  used  in\n                conjunction with the Circulate-Next field.\n\
    \      3.1.5  Date fields\n           Date  fields  for two kinds of uses are\
    \ provided.  Dates can\n      be associated with some event in the history  of\
    \  a  message  and\n      dates  can  delimit  the span of time during which the\
    \ message is\n      meaningful (its life span).\n      Posted-Date           \
    \   (REQUIRED)\n                This field contains the  posting  date,  which\
    \  is  the\n                point  in  time  when  the  message  passes through\
    \ the\n                posting slot into a message transfer system.  Only  one\n\
    \                Posted-Date field is permitted in a message.\n      Date    \
    \                 (OPTIONAL)\n                This   field   contains   a  date\
    \  that  the  message's\n                originator wishes to associate with \
    \ a  message.    The\n                Date field is to the Posted-Date field as\
    \ the date on a\n                letter is to the postmark added by the post office.\n\
    \      End-Date                 (OPTIONAL)\n                This  field  contains\
    \ the date on which a message loses\n                effect.  (See also Section\
    \ 3.2.5.)\n      Received-Date            (OPTIONAL)\n                This field\
    \ is also called Delivery date.    This  field\n                may  be  added\
    \  to a message by the recipient's message\n                receiving program.\
    \  It indicates when the message  left\n                the delivery system and\
    \ entered the recipient's message\n                processing domain.\n      Start-Date\
    \               (OPTIONAL)\n                This  field  contains the date on\
    \ which a message takes\n                effect.  (See also Section 3.2.5.)\n\
    \      Warning-Date             (OPTIONAL)\n                This field is used\
    \ either alone or in conjunction  with\n                an  End-Date  field. \
    \   It  contains one or more dates.\n                These dates could  be  used\
    \  by  a  message  processing\n                program  as  warnings of an impending\
    \ end-date or other\n                event.  (See also Section 3.2.5.)\n     \
    \ 3.1.6  Cross-reference fields\n           Cross-reference fields can be used\
    \ to identify a message and\n      to provide cross-references to  other  messages.\
    \    (See  Section\n      3.2.4.)\n      In-Reply-To              (OPTIONAL)\n\
    \                This  field designates previous correspondence to which\n   \
    \             this message is a reply.  The usual  contents  of  this\n      \
    \          field  would be the contents of the Message-ID field of\n         \
    \       the message(s) being replied to.\n      Message-ID               (OPTIONAL)\n\
    \                This field contains a unique identifier for a  message.\n   \
    \             This  identifier is intended for machine generation and\n      \
    \          processing.   Further  definition  appears  in  Section\n         \
    \       3.2.4.1.    Only one Message-ID field is permitted in a\n            \
    \    message.\n      Obsoletes                (OPTIONAL)\n                This\
    \ field identifies one or more  messages  that  this\n                one replaces.\n\
    \      Originator-Serial-Number (OPTIONAL)\n                This field contains\
    \ one or more serial numbers assigned\n                by  the  message's  originator.\
    \  Messages with multiple\n                recipients  should  have  the   same\
    \   value   in   the\n                Originator-Serial-Number field.\n      References\
    \               (OPTIONAL)\n                This  field  identifies  other correspondence\
    \ that this\n                message  references.    If  the  other   correspondence\n\
    \                contains  a  Message-ID  field,  the  contents  of  the\n   \
    \             References field must be the message identifier.\n      3.1.7  Message-handling\
    \ fields\n           Message-handling fields describe aspects of how a message\
    \ is\n      to be handled or categorized.\n      Precedence               (OPTIONAL)\n\
    \                This  field  indicates  the  precedence  at  which  the\n   \
    \             message  was posted.  Ordinarily, message precedence or\n      \
    \          priority is a service request  to  a  message  transfer\n         \
    \       system.    A  message  originator, however, can include\n            \
    \    precedence information in a message.   One  example  of\n               \
    \ precedence  categories  are  those  used  by  the  U.S.\n                Military:\
    \ \"ROUTINE,\"  \"PRIORITY,\"  \"IMMEDIATE,\"  \"FLASH\n                OVERRIDE,\"\
    \  and \"EMERGENCY COMMAND PRECEDENCE.\"\n      Message-Class            (OPTIONAL)\n\
    \                This  field  indicates  the  purpose of a message.  For\n   \
    \             example, it might contain values  indicating  that  the\n      \
    \                                                       1\n                message\
    \ is a memorandum or a data-base entry. \n      Reissue-Type             (OPTIONAL)\n\
    \                This   field   is  used  in  conjunction  with  message\n   \
    \             encapsulating  (see  Section  3.2.2)  to  differentiate\n      \
    \          between messages being assigned or redistributed.\n      Received-From\
    \            (OPTIONAL)\n                This  field  contains  a  record  of\
    \  a  message's path\n                through   a   message    transfer    system.\
    \        The\n                recipient's  message receiving program could store\
    \ here\n                any information about the  transfer  that  it  obtained\n\
    \                from a message transfer system.\n      _______________\n    \
    \    1\n         The message format specification is not intended to be used as\n\
    \      a  specification  for  exchanging  data-base  records.  Messages,\n   \
    \   however, sometimes contain data from or for a database.\n      3.1.8  Message-content\
    \ fields\n           The   intent   of  most  messages  is  to  communicate  some\n\
    \      particular information from originator  to  recipient.    Several\n   \
    \   fields in a message are designed to contain that information.\n      Subject\
    \                  (BASIC)\n                This  field  contains  any  information\
    \  the originator\n                provided to summarize or indicate  the  nature\
    \  of  the\n                message.\n      Text                     (BASIC)\n\
    \                This field contains the primary content of the message.\n   \
    \   Attachments              (OPTIONAL)\n                This  field  contains\
    \  additional  data  accompanying a\n                message.  It is similar in\
    \ intent to  enclosures  in  a\n                conventional mail system.\n  \
    \    Comments                 (OPTIONAL)\n                This  field  permits\
    \  adding  comments  to  the message\n                without  disturbing  the\
    \  original  contents   of   the\n                message.\n      Keywords   \
    \              (OPTIONAL)\n                This  field  contains  keywords  or\
    \  phrases for use in\n                retrieving a message.\n      3.1.9  Extensions\n\
    \           This message  format  specification  allows  two  additional\n   \
    \   types  of  fields,  vendor-defined  fields  and  as-yet-undefined\n      (extension)\
    \ fields that will be introduced by extensions to  this\n      message format\
    \ specification.\n      vendor-defined-field\n                Any  field  not\
    \ defined in this message format specifi-\n                cation or any extension\
    \ or successor to it is a vendor-\n                defined field.  Names for vendor-defined\
    \  fields  could\n                be  preempted  by  extensions  to  this  message\
    \ format\n                specification.\n      extension-field\n            \
    \    Any  field that is defined in a document published as a\n               \
    \ formal extension or replacement to this message  format\n                specification.\n\
    \      3.2  Message Processing Functions\n           A  CBMS  provides three basic\
    \ classes of functions: creating\n      messages, transmitting messages to  their\
    \  recipient,  and  post-\n      receipt  processing.    Although the message\
    \ format specification\n      does not define the number or nature of user functions\
    \ in  CBMSs,\n      the  meanings  for  the  fields  clearly  assume certain kinds\
    \ of\n      functions.  For example, fields specifying recipients of  replies\n\
    \      to messages assume some kind of reply function; fields specifying\n   \
    \   message life span assume some kind of date processing functions.\n       \
    \    This  section  provides  more  detail on the processing that\n      might\
    \ be done by these kinds of functions, discussing the message\n      fields that\
    \ would be used and how  they  would  be  used.    (See\n      summary in Table\
    \ 1.)\n      Processing Function    Fields Involved\n      Message creation  \
    \     Author, From, Sender, To,\n        and posting          Cc, Bcc\n      Message\
    \ reissuing      Reissue-Type\n      Reply generation       Reply-To\n      Cross-referencing\
    \      Message-ID, In-Reply-To, References,\n                             Obsoletes,\
    \ Originator-Serial-Number\n      Life span functions    Start-Date, End-Date,\n\
    \                             Warning-Date\n      Recipient processing   Circulate-To,\
    \ Circulate-Next\n      TABLE 1.  FIELDS USED IN MESSAGE PROCESSING FUNCTIONS\n\
    \      3.2.1  Message creation and posting\n           Messages  can  be  created\
    \  either  by reissuing an existing\n      message to a new recipient (see Section\
    \ 3.2.2) or by  creating  a\n      new  message.    The  process of message creation\
    \ might mean that\n      some fields of a new message are filled in from the \
    \ contents  of\n      some  other  message.  Reply functions (Section 3.2.3) provide\
    \ an\n      example of this.\n           Different  individuals could be involved\
    \ in different phases\n      of originating a message: creating it, taking responsibility\
    \  for\n      it,  and  explicitly  interacting  with  a CBMS to send it to its\n\
    \      recipient.  One or more individuals may create  a  message  (that\n   \
    \   is,  write, but not necessarily enter it into the CBMS); they are\n      said\
    \ to be the message's authors, identified by the Author field.\n      One or more\
    \ individuals may take responsibility for its  contents\n      and  the  decision\
    \  to  post  it; they are identified by the From\n      field.  One individual\
    \ explicitly posts  a  given  message;  this\n      person  is  called the message's\
    \ sender (identified by the Sender\n      field).\n           The sender and author(s)\
    \ are often, but not always,  respon-\n      sible  for the message.  A common\
    \ case in which the sender is not\n      responsible for the message is when a\
    \ secretary enters and  posts\n      messages  for someone else.  An example of\
    \ a situation in which a\n      message's author is not responsible for  the \
    \ message  itself  is\n      when  an  administrative assistant prepares a report\
    \ that is sent\n      under a manager's signature.\n           The use of the\
    \ Cc field is  identical  to  current  business\n      practice.  This field contains\
    \ the formal secondary recipients of\n      the message.\n           Messages\
    \  containing  Bcc  fields  are  treated specially by\n      CBMSs.  The contents\
    \ of this field are not included in copies  of\n      the  message sent to the\
    \ recipients other than the originator who\n      are not included in the Bcc\
    \ field itself.  Some  systems  include\n      the  contents  of  the  Bcc  field\
    \ only in the originator's copy;\n      others include all or part of the Bcc\
    \ field in the copies sent to\n      the recipients indicated in the Bcc field.\
    \    This  specification\n      does not indicate exactly how the Bcc field is\
    \ to be treated.\n      3.2.2  Message reissuing and forwarding\n           Reissuing\
    \ and forwarding both serve the general user goal of\n      passing  a  message\
    \ on to a new set of recipients.  Forwarding is\n      the term used for an informal\
    \ mechanism, which CBMSs implement by\n      copying some or all of the original\
    \ message into the contents  of\n      a  field  in  the  new message.  Reissuing\
    \ is the term used for a\n      formal mechanism to ensure that the message being\
    \ passed on never\n      loses its integrity as a previously  sent  message. \
    \   CBMSs  use\n      reissuing  to implement several different functions, depending\
    \ on\n      the purposes being served:\n        o  Redistribution.  Making others\
    \ aware of the complete and\n           unaltered contents of the message.\n \
    \       o  Assignment.  Delegating the responsibility for a message\n        \
    \   to somebody else.\n      These purposes are exemplified in Figure 2.\n   \
    \        When  a  CBMS examines a forwarded message, it cannot always\n      distinguish\
    \  the  old  message  from  what  was  added  when  the\n      forwarding  took\
    \  place.   In addition, the forwarded information\n      might no longer have\
    \ the form of a  message.    This  is  usually\n      because  the format of the\
    \ message has been changed (for example,\n      to pure unformatted text).  (See\
    \ Figure 2 for an example of how a\n      CBMS might forward a message.)  In contrast,\
    \ a  reissued  message\n      can  always  be  separated  from  its enclosing\
    \ message and never\n      loses its identity as a correctly formed message.\n\
    \           This  specification  provides  the  Reissue-Type  field  for\n   \
    \   supporting  reissuing.  Forwarding, since it is an informal means\n      of\
    \  serving  the  purpose  of  passing  on  information,  has  no\n      supporting\
    \ fields in the specification.\n           This  specification  provides  for\
    \  reissuing of messages by\n      encapsulating.  This method embeds the  entire\
    \  original  message\n      inside  a  new  message.  Encapsulating adds structure\
    \ around the\n             2\n      message .  This allows any part of it to be\
    \ easily extracted.\n           This  procedure for passing on previously sent\
    \ messages is a\n      matter of organizational policy  and  has  authentication\
    \  as  an\n      associated  issue.   Each organization must decide if the CBMS\
    \ it\n      acquires should support reissuing or simply supply forwarding.\n \
    \     3.2.2.1  Redistribution\n           Redistribution is a CBMS function for\
    \ sending  the  original\n      contents  of a message intact and unchanged to\
    \ new recipients.  A\n      redistributed message is identical to the original\
    \  message  with\n      the  exception  of  added  information  about the reissuing.\
    \  For\n      reissuing with this purpose, the Reissue-Type field contains  the\n\
    \      ASCII  string  \"Redistribution.\"    The original message has been\n \
    \     included directly in a new message.  (See Figure 2.)\n      _______________\n\
    \        2\n         A message can contain another message, and  that  message\
    \  can\n      contain another message, and so on to any depth of encapsulating.\n\
    \      This can occur by reissuing a message repeatedly.\n                   \
    \         The Original Message\n      John Doe wishes Jane Jones to get a copy\
    \ of the following\n      message:\n                      Message:\n         \
    \               Field: From \"Jean Smith\"\n                        Field: Posted-Date\
    \ \"27 January 1983\"\n                        Field: To \"John Doe\"\n      \
    \                  Field: Subject \"Next Project Meeting\"\n                 \
    \       Field: Text \"The agenda for ...\"\n                               Redistribution\n\
    \      Message:\n        Field: From \"John Doe\"                  John Doe is\
    \ responsible\n        Field: Posted-Date \"28 January 1983\"    for the redistribution.\n\
    \        Field: To \"Jane Jones\"\n        Field: Reissue-Type \"Redistribution\"\
    \    This message directly\n        Message:                                incorporates\
    \ a\n          Field: From \"Jean Smith\"              redistributed message.\n\
    \          Field: Posted-Date \"27 January 1983\"\n          Field: To \"John\
    \ Doe\"\n          Field: Subject \"Next Project Meeting\"\n          Field: Text\
    \ \"The agenda for ...\"\n                                 Forwarding\n      Message:\n\
    \        Field: From \"John Doe\"\n        Field: Posted-Date \"28 January 1983\"\
    \n        Field: To \"Jane Jones\"\n        Field: Text                      \
    \       A realization of the\n          \"From Jean Smith                    \
    \  original message is\n           To John Doe                          copied\
    \ into the Text field.\n           Sent on 27 January 1983              Note that\
    \ John's CBMS\n           Subject Next Project Meeting         has chosen to represent\n\
    \                                                it as a text string.\n      \
    \     The agenda for ...\"\n      FIG. 2.  MESSAGE FORWARDING AND REDISTRIBUTION\n\
    \      3.2.2.2  Assignment\n           Assignment is the process of designating\
    \ responsibility.  In\n      some  organizations, formal message traffic is distributed\
    \ to one\n      or more parts of the organization (called offices)  where  it\
    \  is\n      directed  to  the  appropriate  individuals  or other offices for\n\
    \      final disposition.  Assignment is done  by  reissuing  a  message\n   \
    \   with   the   Reissue-Type   field  containing  the  ASCII  string\n      \"\
    Assigned.\"  A  message  which  contains  this  field  is  to  be\n      interpreted\
    \ as meaning that the addressees in the \"To\" field have\n      had  the  reissued\
    \ message assigned to them for some action.  Any\n      addressee in the \"Cc\"\
    \ field has  had  the  message  assigned  for\n      information.    The \"From\"\
    \ field records who assigned the message\n      and  the  \"Posted-Date\"  field\
    \  records  when  the  message   was\n      assigned.\n      3.2.3  Reply generation\n\
    \           Reply  generation  involves creating a new message in direct\n   \
    \   reply to some other message by drawing on the contents of  fields\n      in\
    \  the  other  message  to fill fields in the new message.  Many\n      CBMSs\
    \ provide reply facilities that determine the intended recip-\n      ients of\
    \ a reply.\n           A Reply-To field is defined by this message format  specifi-\n\
    \      cation.    When  a  message  contains  a Reply-To field, the CBMS\n   \
    \   should send replies to the recipients designated in the  Reply-To\n      field\
    \  instead of to the recipients designated in the From field.\n      This statement\
    \ applies to original messages only, not to reissued\n      messages.     The\
    \   message   format   specification   makes   no\n      recommendations concerning\
    \ replies to reissued messages.\n           Reply-To has several possible applications:\n\
    \        o  The  individual(s) responsible for the message might not\n       \
    \    have regular access to a  CBMS  and  would  indicate  an\n           alternate\
    \ recipient, for example, a secretary.\n        o  The people responsible for\
    \ receiving responses might not\n           be  the  people  who  were  responsible\
    \ for creating the\n           message.\n        o  Discussion and conference\
    \ groups could use this  feature\n           to  ensure  correct  distribution\
    \  of  any submission by\n           having the conference group  itself  designated\
    \  in  the\n           Reply-To field.\n           When  the  message  does  not\
    \  contain a Reply-To field, the\n      recipient should reply to the originators\
    \ enumerated in the  From\n      field.   The sender and authors should not be\
    \ added automatically\n      to the list of those receiving the reply.\n     \
    \      Replies could also be sent to the other  recipients  of  the\n      original\
    \  message.    Vendors might offer additional reply facil-\n      ities, depending\
    \ on their view of users' organizational  require-\n      ments.\n      3.2.4\
    \  Cross-referencing\n           A  CBMS  message  may  include  designator(s)\
    \ which identify\n      other message(s).  The designators are used to refer \
    \ to  related\n      messages so that all information in a chain of correspondence\
    \ can\n      be  determined  by  a CBMS user.  The designator used to identify\n\
    \      and cross-reference messages can take either of two forms, unique\n   \
    \   identifiers or serial numbers.\n      3.2.4.1  Unique identifiers\n      \
    \     Unique identifiers are machine-generated  and  are  intended\n      primarily\
    \  for  processing  by  computers.    While they could be\n      examined by a\
    \ human user, unique identifiers are not  necessarily\n      useful or convenient\
    \ for people.\n           Unique  identifiers  occur  in  several  contexts. \
    \ They are\n      often used  to  identify  the  contents  of  idual  messages\n\
    \      unambiguously.    When unique identifiers are used this way, they\n   \
    \   are called message identifiers.  Different versions of a  message\n      receive\
    \  new message identifiers; an example of this is reissuing\n      a message with\
    \ comments.\n           When a CBMS generates a message identifier, it must be\
    \  able\n      to  guarantee  that  it  is unique, both within the domain of the\n\
    \      individual CBMS and globally, across all connected CBMSs.   CBMSs\n   \
    \   could  generate  globally unique identifiers in several ways, all\n      of\
    \ which require prior  agreement  on  behalf  of  the  connected\n      CBMSs.\
    \    One  method  is  to assign each connected CBMS a unique\n      code.  A CBMS\
    \ then generates unique identifiers by using its code\n      as a prefix to some\
    \ other value  that  it  can  guarantee  to  be\n      unique  within its domain.\
    \  (This second value could be a counter\n      or a timestamp/user-id combination.)\n\
    \           A CBMS can provide functions for tracing  chains  of  corre-\n   \
    \   spondence  by  using  unique  identifiers.    The  message format\n      specification\
    \ defines fields for which  a  CBMS  provides  unique\n      identifiers   as\
    \   values.    They  are  Message-ID,  References,\n      Obsoletes, and In-Reply-To.\
    \  (See Section 3.1.6.)\n      3.2.4.2  Serial numbering\n           Serial  numbers\
    \  are  for  users to maintain a personal num-\n      bering system for messages.\
    \  The numbers  are  composed  of  both\n      letters  and  digits so that users\
    \ could maintain several sets of\n      sequences concurrently (for example, A1,\
    \ A2, A3...  and  B1,  B2,\n      B3...).\n           Serial  numbers  are  assigned\
    \  at  a  defined  point in the\n      history of a message.  Serial numbers are\
    \ not unique identifiers;\n      they differ from unique identifiers in that they\
    \ are  not  neces-\n      sarily generated or processed by a CBMS.  They are designed\
    \ to be\n      entered and read by CBMS users.  They can be as simple or complex\n\
    \      as  the user requires.  Serial numbers are intended to be used to\n   \
    \   designate messages about a specific topic, or  messages  a  given\n      user\
    \  has  sent.    Serial numbers are intended to be a permanent\n      part of\
    \ the message, just as unique identifiers are.\n           A CBMS can provide\
    \ functions  allowing  originators  to  add\n      serial  numbers  to  messages.\
    \    Originator-Serial-Number is the\n      field provided for an originator to\
    \ add  a  serial  number  to  a\n      message before sending it.\n      3.2.5\
    \  Life span functions\n           Messages  have life spans, usually delimited\
    \ by the creation\n      date and the time when the last copy of the message is\
    \ destroyed.\n      Messages could be meaningless before a certain time or irrelevant\n\
    \      after a certain time.   For  example,  a  reminder  to  attend  a\n   \
    \   meeting  on  5  June  loses  most  of  its  value on the sixth; a\n      reminder\
    \ to attend that same meeting may be of little  use  on  5\n      May (although\
    \ not for the same reason).\n           A CBMS can define a message's life span\
    \ explicitly using the\n      Start-Date  and  End-Date  fields.   A third field,\
    \ Warning-Date,\n      when used in conjunction with the End-Date, may be used\
    \ to signal\n      the approach of the End-Date.  Warning-Date may also stand\
    \  alone\n      and be used by a periodic warning (alarm clock) mechanism.\n \
    \          A  CBMS  could  use  these fields to help users manage their\n    \
    \  message stores.  For example, a message whose start date has  not\n      yet\
    \  passed  could  be bypassed by a retrieval command unless the\n      user requested\
    \ such messages explicitly.  A CBMS  could  use  the\n      end  date  to  help\
    \  with  message  store  housekeeping either by\n      archiving or deleting the\
    \ expired messages  automatically  or  by\n      asking the user for some action\
    \ to be taken on them.  The warning\n      date  could  be  used  to  remind \
    \ the  user  automatically of an\n      impending end date, such as a meeting\
    \ reminder.\n      3.2.6  Requests for recipient processing\n           Recipients\
    \  have  a  wide variety of needs for examining and\n      processing a message,\
    \  ranging  from  automatic  output  on  some\n      specified  device  to  the\
    \ execution of a program embedded in the\n      message  itself.    Because  many\
    \  of  these  needs  are   highly\n      specialized,  and  support  for them\
    \ not widely implemented, this\n      message format specification does not constrain\
    \ the requests  for\n      processing that may be included in a message.\n   \
    \        The  message  format  specification  does provide two fields\n      that\
    \ permit an originator to request circulation list  processing\n      from the\
    \ recipient.  These fields are Circulate-To and Circulate-\n      Next.\n    \
    \  3.2.6.1  Message circulation\n           Message  circulation  involves serial\
    \ distribution of a mes-\n      sage to its recipients, based on a distribution\
    \ list that is part\n      of the message.  The message is  delivered  first \
    \ to  the  first\n      recipient  on  the distribution list.  This recipient,\
    \ or someone\n      the recipient delegates, sends  the  message  on  to  the\
    \  second\n      recipient  on  the list, perhaps after commenting on or adding\
    \ to\n      the  message.    This  continues  until  all  recipients  on  the\n\
    \      distribution list have received the message.\n           This  message\
    \  format  specification  provides two fields to\n      support message circulation.\
    \  The Circulate-To field contains the\n      complete distribution list, indicating\
    \ the  full  set  of  recip-\n      ients,  and  the  Circulate-Next field indicates\
    \ which recipients\n      have not seen the message.   See  Figure  3  for  an\
    \  example  of\n      message circulation using these two fields.\n      3.3 \
    \ Multiple Occurrences and Ordering of Fields\n           Most  message  fields\
    \ may occur more than once in a message;\n      the  exceptions  are  the  Posted-Date,\
    \  Sender,  and  Message-ID\n      fields, which may occur once, at most.  What\
    \ this means is that a\n      received  message  may  contain  any  number  of\
    \  instances  of a\n      particular field (such as the \"To\" field).  If a message\
    \ contains\n      more than one instance of a particular field, that field  \"\
    occurs\n      multiply\"  and  that  message  has \"multiple occurrences\" of\
    \ that\n      field.\n           A particular instance of a message field is \
    \ not  superseded\n      by later instances of the same field.  The To field is\
    \ an example\n      of this.\n      -----------------------------------------------------------------\n\
    \           A  message  originator wishes to circulate a message to\n        \
    \   recipients A, B  and  C. The  originator  includes  the\n           following\
    \ fields in the message:\n                     To:              A\n          \
    \           Circulate-To:    A, B, C\n                     Circulate-Next:  B,\
    \ C\n           When  recipient  A  or  someone  A delegates causes the\n    \
    \       message to be further circulated, the message  is  sent\n           to\
    \  the  first address in the Circulate-Next field, and\n           that name is\
    \ removed from that field:\n                     To:              B\n        \
    \             Circulate-To:    A, B, C\n                     Circulate-Next: \
    \ C\n           B now sends the message on to its final recipient:\n         \
    \            To:              C\n                     Circulate-To:    A, B, C\n\
    \      FIG. 3.  EXAMPLE OF MESSAGE CIRCULATION\n      -----------------------------------------------------------------\n\
    \           Multiple occurrences of a field are not  necessarily  equiv-\n   \
    \   alent  to  a single field containing the concatenated contents of\n      the\
    \ several instances of the given field.  For example, with  the\n      Text field,\
    \ concatenating the contents of several instances might\n      lose  important\
    \  distinctions  between  the  contents.   A single\n      message could be used\
    \ to send three different documents, each one\n      in a different Text field.\
    \  However, putting the three  documents\n      into  a  single  Text  field would\
    \ make it much more difficult to\n      extract any individual document.\n   \
    \        Encapsulated  messages  are  exceptions  to   the   multiple\n      occurrences\
    \  rule.   For example, the To field in an encapsulated\n      message is not\
    \ a multiple occurrence  of  the  To  field  in  the\n      enclosing message.\n\
    \           The fields found in a single message may occur in any order.\n   \
    \   The  order  in  which they occur does not necessarily reflect the\n      order\
    \  in  which  they  were  created.  Nor does it constrain the\n      order in\
    \ which the  message  recipient  examines,  processes,  or\n      displays them.\n\
    \      4.  SYNTAX\n           This section begins with an introduction to the\
    \ concepts and\n      elements  that  constitute  the  syntax for messages.  The\
    \ second\n      section presents an overview of the encoding scheme.   The  third\n\
    \      section describes in detail the elements of the message syntax.\n     \
    \ 4.1  Introduction\n           This  specification  defines syntactic requirements\
    \ for mes-\n      sages when they are  passed  from  one  CBMS  to  another. \
    \   The\n      specification is designed to meet the following goals.\n      \
    \  o  Provide a concise, flexible representation scheme.\n        o  Simplify\
    \ message parsing.\n        o  Support non-textual components in messages (for\
    \ example,\n                                         3\n           facsimile,\
    \ graphics, or speech ).\n      4.1.1  Message structure\n           Messages\
    \   have   two  classes  of  components,  fields  and\n      messages.  A field\
    \ corresponds to one of the semantic  components\n      defined  in  this  message\
    \  format  specification.   A message is\n      simply another message.\n    \
    \       The type of a field in a message determines both its meaning\n      and\
    \ the form for its contents.  (See Section 4.3.2.)\n           Fields in a  message\
    \  are  composed  of  syntactic  elements\n      called  data  elements.    A\
    \  Message  data  element  is  used to\n      represent messages; a Field data\
    \ element  is  used  to  represent\n      fields.    (The  term  \"field\"  is\
    \  simply  a semantic construct,\n      distinct  from  \"Field  Data  Element,\"\
    \  which  is  a   syntactic\n      _______________\n        3\n         While\
    \  this message format specification is not intended to be\n      used as a basis\
    \ for the interchange of all facsimile information,\n      it does  recognize\
    \  that  CBMS  messages  may  contain  facsimile\n      components.\n      construct.)\
    \    Many  of the fields defined in this message format\n      specification are\
    \ restricted to containing only one kind of  data\n      element.  (See Section\
    \ 4.3.2.)\n           Each  field defined in this message format specification\
    \ has\n      been assigned  a  unique  numeric  identifier  that  is  used  in\n\
    \      conjunction  with  the  Field data element.  Separate identifiers\n   \
    \   are provided for vendor-defined  fields  and  for  extending  the\n      identifier\
    \  encoding  space.    A  list of fields and identifiers\n      appears in Section\
    \ 4.3.2 and in Appendix C.\n           Throughout the  message  format  specification,\
    \  fields  are\n      referred  to  by  label name rather than by their numeric\
    \ identi-\n      fiers.  Field labels are names like \"Sender,\" \"Warning-Date,\"\
    \  or\n      \"Circulate-To.\"    The  field labels chosen for the specification\n\
    \      are names  that  are  in  common  use  in  current  CBMSs.    The\n   \
    \   specification  does  not require a CBMS to use these field labels\n      in\
    \ displaying fields to the user.  \n      4.1.2  Data elements\n           For\
    \ the purpose of determining compliance  with  the  syntax\n      defined in this\
    \ specification, data elements are divided into two\n      groups:\n      BASIC\
    \     All   message  receiving  systems  must  process  these\n              \
    \  syntactic elements, interpreting their values according\n                to\
    \ the message format specification.\n      OPTIONAL  Message  receiving  systems\
    \  need  not  process   these\n                syntactic elements in order to\
    \ be in compliance.\n           In   addition,   complying   CBMSs  must  meet\
    \  requirements\n      regarding their ability to process the  components  found\
    \  inside\n      data  elements.    These  requirements  are  discussed in Section\n\
    \      4.2.2.\n           This message format specification  classifies  data\
    \  element\n      types  as  either  primitives  or  constructors.   Primitive\
    \ data\n      elements,  such  as  ASCII-String,  are  basic  building  blocks.\n\
    \      Constructor  data  elements, such as Message or Sequence, contain\n   \
    \   one or  more  primitive  or  constructor  data  elements.    Some\n      constructors,\
    \ such as Sequence, may be composed of any other data\n      element.    Some,\
    \  such as Message, may contain only certain data\n      elements. Two data elements,\
    \ Extension and Vendor-Defined, may be\n      classified as either primitives\
    \ or constructors, depending on how\n      they  are  used  to  extend  this \
    \ specification.    The  general\n      syntactic form for data elements is discussed\
    \ in section 4.3.1.\n      4.1.2.1  Primitive data elements\n           A   primitive\
    \   data   element  contains  a  basic  item  of\n      information; it is not\
    \ composed  of  other  data  elements.    In\n      current  CBMSs,  the most\
    \ commonly used primitive data element is\n                                  \
    \               4\n      ASCII-String, a series of ASCII characters.  Other primitive\
    \ data\n      elements are Integer,  2's  complement  integers;  Bit-String, \
    \ a\n      series of bits; and Boolean, either True or False.\n           One\
    \ primitive data element, End-Of-Constructor, is used only\n      as  a structural\
    \ element within constructor data elements and has\n      no meaning by itself.\
    \  End-of-Constructor is used to  provide  an\n      end  marker  for  constructor\
    \  data  elements that do not have an\n      explicit length; any other use is\
    \ not valid syntactically.\n      4.1.2.2  Constructor data elements\n       \
    \    The Data  Element  Contents  of  constructor  data  elements\n      contain\
    \  one  or  more data elements.  The most general form of a\n      constructor\
    \ is a Sequence or a Set, since both Sequences and Sets\n      may contain any\
    \ data element.  Other constructors are specialized\n      forms of sequences.\n\
    \           A Message data element is a constructor.    It  may  contain\n   \
    \   only  Field  data  elements,  other  Message  data  elements,  or\n      encrypted\
    \ or data compressed forms of these elements.    A  Field\n      data  element\
    \  can  contain  any data element.  It also indicates\n      which specific field\
    \ is being represented.  The contents of  some\n      fields  are  restricted\
    \ to a single type of data element, such as\n      ASCII-String or Date.\n   \
    \   4.1.3  Properties\n           Any data element may have associated  with \
    \ it  a  Property-\n      List, which contains properties such as a Printing-Name\
    \ or one or\n      more  Comments.    Comment  A mechanism to support vendor-defined\n\
    \      properties has been supplied by this specification, as well as  a\n   \
    \   mechanism to extend the list of property identifiers.\n      _______________\n\
    \        4\n         An  ASCII-String  is  not limited to ASCII characters however.\n\
    \      The  ASCII  code  table  can  be  extended  through  standardized\n   \
    \   techniques as described in FIPS Pub 35, Code Extension Techniques\n      in\
    \ 7 or 8 Bits [NatB-75].\n      4.1.3.1  Printing-names\n           Printing-Names\
    \  are  used  to  provide  labels  that  can be\n      displayed  along  with\
    \  their  respective  data  elements.    For\n      example, a message originator\
    \ may use a Printing-Name property to\n      request that the To field of a message\
    \ be labeled \"Distribution:\"\n      when it is printed by its recipients.\n\
    \      4.1.3.2  Comments\n           The  Comment  property  is  used  to  allow\
    \  comments  to be\n      associated with any data element  without  affecting\
    \  its  actual\n      contents.    For example, someone reviewing the text of\
    \ a message\n      could add the comment \"This looks good\" to the Text field\
    \ without\n      either altering the body itself  or  adding  a  separate  comment\n\
    \      field.\n      4.1.4  Data compression and encryption\n           Two  constructor\
    \  data  elements,  Compressed and Encrypted,\n      have  been  provided  for\
    \  use  by  a  CBMS  that  supports  data\n      compression  or  encryption.\
    \    They  may  be  used  to  hold the\n      compressed or encrypted contents\
    \ of any data  element,  including\n      Messages  and  Fields, and may occur\
    \ wherever their compressed or\n      encrypted contents may appear.  A mechanism\
    \ is included to  allow\n      the user to identify the encryption or compression\
    \ algorithm used\n      (Sections 4.3.4 and 4.3.5).\n      4.2  Overview of Syntax\
    \ Encoding\n           This  section  provides  an  overview  of  the  notation\
    \ and\n      terminology  used  to  represent  the  syntactic  elements  (data\n\
    \      elements) defined in this message format specification.\n           All\
    \  data  elements consist of a series of components.  Each\n      of the components\
    \ is composed of a series of 8-bit groups  called\n      octets.    In  this document,\
    \ the bits are numbered starting from\n      the low-order bit.  That is, the\
    \ low-order (or least significant)\n      bit is called \"bit 0\" and the high-order\
    \  (or  most  significant)\n      bit is called \"bit 7.\"  \n           Five\
    \ different components may appear in a data element.\n        o  Identifier  octet\
    \  (identifying  particular type of data\n           element)\n        o  Length\
    \  Code  (specifying  number  of octets that appear\n           following it in\
    \ a data element)\n        o  Qualifier (supplying additional identifying information)\n\
    \        o  Property-List component (a  Property-List  data  element\n       \
    \    containing Property data elements)\n        o  Data  Element  Contents  (containing\
    \  actual data of the\n           data element)\n      These components always\
    \ appear in this order.  Not all components\n      are present in all data elements,\
    \ but  the  components  that  are\n      present maintain this relative order.\n\
    \      4.2.1  Identifier Octets\n           The  identifier  octet  is  a numeric\
    \ code containing infor-\n      mation that identifies a data element.  It is\
    \  always  the  first\n      component  in  a  data  element.  The Identifier\
    \ octet contains a\n      one-bit flag, indicating whether or not the data element\
    \ contains\n      a Property-List, and a  7-bit  unique  identifier  for  the\
    \  data\n      element.  The value of the data element identifier also indicates\n\
    \      whether the data element has a Qualifier.\n           The  most significant\
    \ bit (Bit 7) of the identifier octet is\n      set to 1  if  there  are  properties\
    \  associated  with  the  data\n      element;  it  is  set  to  0  if  there\
    \  are  none.   This bit is\n      independent of the remaining seven bits in\
    \ the identifier  octet,\n      which  are  called  the  identifier, and provide\
    \ unique identifi-\n      cation  for  data  elements.    The  associated  properties\
    \   are\n      specified in a Property-List component.\n           The  second\
    \  most  significant bit (Bit 6) of the identifier\n      octet  (the  most  significant\
    \  bit  of  the  identifier  itself)\n      signifies  whether  or  not the data\
    \ element has a Qualifier.  If\n      the bit is set to 1, then the data element\
    \ has a Qualifier; if it\n      is a 0, the data element does not have a Qualifier.\
    \    The  seven\n      bits of the identifier uniquely identify the data element.\n\
    \           Table  2  shows  the  settings of the high-order bits of the\n   \
    \   identifier  octet  and  their  associated  meaning.    Figure   4\n      demonstrates\
    \ the bit-level structure of the identifier octet.  In\n      this figure, bit\
    \ 7 is indiciated with P to show its special use.\n      -----------------------------------------------------------------\n\
    \           bit 7 6 5 4 3 2 1 0\n              +---------------+\n           \
    \   |P 0 x x x x x x|     0xxxxxx uniquely identifies a\n              +---------------+\
    \     data element without a Qualifier.\n              +---------------+\n   \
    \           |P 1 x x x x x x|     1xxxxxx uniquely identifies a\n            \
    \  +---------------+     data element with a Qualifier.\n      FIG. 4.  STRUCTURE\
    \ OF IDENTIFIER OCTETS\n      -----------------------------------------------------------------\n\
    \          Bit Value     Meaning\n           7    0   The data element does not\
    \ have properties asso-\n                      ciated.\n                1   The\
    \ data element has properties associated.\n           6    0   The data element\
    \ does not have a Qualifier.\n                1   The data element has a Qualifier.\n\
    \          TABLE 2.  HIGH-ORDER BITS IN THE IDENTIFIER OCTET\n      4.2.2  Length\
    \ code and Qualifier components\n           The Length Code and the Qualifier\
    \ are both usually one octet\n      in  length.    They use an encoding scheme\
    \ that permits extending\n      the component to the size necessary to represent\
    \  the  length  of\n      the data element or the value of the Qualifier component.\n\
    \           The  most  significant  bit  of the Length Code or Qualifier\n   \
    \   components determines whether it is  one  or  several  octets  in\n      length.\
    \  When the most significant bit is 0, the component is one\n      octet  in \
    \ length.  When the most significant bit is 1, the other\n      seven bits of\
    \ the first octet encode the number of octets in  the\n      rest of the component.\
    \  The actual value begins in the next octet\n      and is interpreted as an unsigned\
    \ integer.\n           A  single  octet  is  sufficient  for  most  Length Code\
    \ and\n      Qualifier components.  For those cases where  the  value  of  the\n\
    \      Length  Code  or  the  Qualifier  must be greater than 127, extra\n   \
    \   octets can be added, up to a maximum of 127  octets.    Figure  5\n      shows\
    \  the encoding scheme, as well as an example of a value less\n      than 127\
    \ and one greater than 127.\n      -----------------------------------------------------------------\n\
    \           bit 7 6 5 4 3 2 1 0\n              +---------------+\n           \
    \   |0 x x x x x x x|                   xxxxxxx is the value.\n              +---------------+\n\
    \              +---------------+------//-------+\n              |1 n n n n n n\
    \ n|y y y y y y y y|          nnnnnnn is the\n              +---------------+------//-------+\
    \        number of octets\n                                                  \
    \     that contain the\n                                                     \
    \   value yyyyyyyy.\n              +---------------+\n              |0 0 0 0 1\
    \ 0 0 1|               This is an example with a\n              +---------------+\
    \                   value of 9 (decimal).\n              +---------------+---------------+\n\
    \              |1 0 0 0 0 0 0 1|1 0 0 0 0 0 1 0|      This example has a\n   \
    \           +---------------+---------------+ value of 130 (decimal).\n      \
    \        +---------------+---------------+\n              |1 0 0 0 0 0 1 0|0 0\
    \ 0 0 0 0 0 1|\n              +---------------+---------------+\n            \
    \                  +---------------+\n                              |0 0 1 0 1\
    \ 1 0 0|      This example has a\n                              +---------------+\
    \ value of 300 (decimal).\n      FIG. 5.  ENCODING MECHANISM FOR QUALIFIERS AND\
    \ LENGTH CODES\n      -----------------------------------------------------------------\n\
    \           In  order  to comply with this message format specification,\n   \
    \   CBMSs must be able to determine the value of any length  code  or\n      qualifier\
    \  that  is  expressed  in  three  octets  or less.  (The\n       16\n      2\
    \  -1).    This message format specification places no limitation\n      on the\
    \ value of a length code or qualifier generated  by  a  CBMS\n      (except  for\
    \  the  absolute  limitation inherent in the represen-\n      tation scheme).\
    \  However, the use of length codes and  qualifiers\n                        \
    \                                          32\n      with  larger  values  (particularly\
    \  values  in  excess of 2  -1)\n      should be avoided unless it is known that\
    \  the  receiving  system\n      can handle them.  \n           Both  Length \
    \ Codes and Qualifiers have a special convention\n      for dealing with special\
    \ situations.  Length  Codes  can  specify\n      that  a  data  element  has\
    \ indeterminate length; a Qualifier can\n      specify that a data element is\
    \  implementation  defined.    These\n      cases are explained further in the\
    \ next two sections.\n      4.2.2.1  Length Codes\n           The length code\
    \ component immediately follows the identifier\n      octet.    It  is  present\
    \ in every data element.  The Length Code\n      indicates the number of octets\
    \ following it  in  a  data  element\n      (that  is,  excluding  the  identifier\
    \  octet and the length code\n      itself).  Length Codes appear in one  of \
    \ three  formats:  short,\n      long, and indefinite.\n           A short Length\
    \ Code is one octet long.  Its most significant\n      bit  (Bit  7) is set to\
    \ 0 and its value is in the range 0 through\n      127.\n           A long Length\
    \ Code is at least two octets long.   The  first\n      octet  always has its\
    \ most significant bit (Bit 7) set to 1.  The\n      other seven bits of this\
    \  octet  contain  the  number  of  octets\n      making  up  the rest of the\
    \ Length Code, and these octets contain\n        1016\n      (2     - 1) (that\
    \ is, 127 octets to represent the value).\n           An  indefinite  Length \
    \ Code  is  one  octet long.  Its most\n      significant bit (Bit 7) is set to\
    \ 1 and its other bits are all 0.\n      (See Figure 6.)  An indefinite Length\
    \ Code  may  appear  only  as\n      part  of  a  constructor  data  element;\
    \  it  may  not occur in a\n      -----------------------------------------------------------------\n\
    \           bit 7 6 5 4 3 2 1 0\n              +---------------+\n           \
    \   |0 x x x x x x x|             xxxxxxx is the value of the\n              +---------------+\
    \                            length code.\n              +---------------+------//-------+\n\
    \              |1 n n n n n n n|y y y y y y y y|   nnnnnnn is the number\n   \
    \           +---------------+------//-------+  of octets that contain\n      \
    \                                          the value of the length\n         \
    \                                   code; these are represented\n            \
    \                                                as yyyyyyy.\n              +---------------+\n\
    \              |1 0 0 0 0 0 0 0|            The \"indefinite\" length code\n \
    \             +---------------+\n      FIG. 6.  REPRESENTATION OF LENGTH CODES\n\
    \      -----------------------------------------------------------------\n   \
    \                           5\n      primitive  data  element .    A  constructor\
    \ data element with an\n      indefinite length code has an End-Of-Constructor\
    \ data element  as\n      the  last data element in its Data Element Contents.\
    \  (The length\n      of such a constructor data element is unrestricted,  although\
    \  it\n      must  contain at least one data element -- the End-of-Constructor\n\
    \      that terminates it -- in its Data Element Contents.)\n      4.2.2.2  Qualifier\n\
    \           If present,the Qualifier component immediately  follows  the\n   \
    \   code  component.   It is used to provide information essential to\n      the\
    \ interpretation of the data element contents  that  is  beyond\n      that  encoded\
    \  in  the  identifier  octet  or  length  code.  For\n      example, the identifier\
    \ octet could contain the code for a field,\n      and the Qualifier component\
    \ would specify what kind of field.\n           The Qualifier component appears\
    \ in only a few data elements.\n      _______________\n        5\n         This\
    \ is the result of most primitive elements  being  able  to\n      contain  any\
    \  bit  pattern  (including the identifier for End-Of-\n      Constructor).\n\
    \      In the Bit-String data element, it indicates the number of unused\n   \
    \   bits  in  the  final  octet of the Data Element Contents.  In the\n      Field\
    \ and Property data elements, it  indicates  which  field  or\n      property\
    \  the  data  element  represents.   In the Compressed and\n      Encrypted  data\
    \  elements,  it  indicates  which  compression  or\n      encryption algorithm\
    \ has been used.  In the Message data element,\n      it indicates the type of\
    \ message.\n           The  length  of  the  Qualifier  component  depends  on\
    \  the\n      encoding of the Qualifier.  (See Figure 7.)  A short Qualifier is\n\
    \      one octet long.  Its most significant bit is 0 and its  value  is\n   \
    \   in  the  range  0  through 127.  A long Qualifier is at least two\n      octets\
    \ in length.  The most significant bit is always 1  and  the\n      other  7 \
    \ bits  indicate the number of octets in the value of the\n      Qualifier.\n\
    \      -----------------------------------------------------------------\n   \
    \            +--------+--------+--------+\n               |10000010|00000001 00001010|\
    \        Qualifier with value\n               +--------+--------+--------+   \
    \           266 (decimal).\n               +--------+--------+--------+--------+\n\
    \               |10000011|00000000|00000001 00001010|     Vendor-Defined\n   \
    \            +--------+--------+--------+--------+     Qualifier with\n      \
    \                                                       value 266.\n         \
    \      +--------+\n               |10000000|              Undefined value for\
    \ a Qualifier.\n               +--------+\n      FIG. 7.  EXAMPLES OF QUALIFIER\
    \ VALUES\n      -----------------------------------------------------------------\n\
    \           This message format specification allows implementations  to\n   \
    \   define  their  own values for Qualifiers.  A vendor-defined Qual-\n      ifier\
    \ is any long Qualifier in which the first octet in the value\n      is 0.   \
    \ The  value  used  to  identify  this  Qualifier  is  not\n      guaranteed \
    \ to  be  unique  and  the  same  value  may be used by\n      different implementations\
    \ to define different Qualifiers.\n      4.2.3  Property-List\n           A  Property\
    \  is  an attribute being associated with, but not\n      essential  to  the \
    \ interpretation  of,  a  data  element.    The\n      properties currently defined\
    \ by this message format specification\n      are  Printing-Name  and  Comment.\
    \  A Property-List component of a\n      data element is represented by a Property-List\
    \ data element  that\n      in turn contains Property data elements.\n       \
    \    A data element contains at most one Property-List.  The most\n      significant\
    \  bit  in  the  identifier  octet  of the data element\n      indicates whether\
    \ a Property-List is present.\n      4.2.4  Data Element Contents\n          \
    \ The Data Element Contents component of a data element is the\n      actual data\
    \ or information represented by a data element.    (The\n      other  components\
    \  provide  the information necessary to identify\n      and interpret the Data\
    \ Element Contents.)\n           In a primitive data element, the Data Element\
    \ Contents is  a\n      series  of  octets  interpreted according to the identifier\
    \ octet\n      and any qualifier.\n           In a constructor data element, the\
    \ Data Element Contents  is\n      a  series  of data elements.  When the Length\
    \ Code component of a\n      constructor data element is \"indefinite,\" the last\
    \  data  element\n      in the constructor's Data Element Contents is End-of-Constructor.\n\
    \           The  length  of the Data Element Contents (in octets) is the\n   \
    \   difference between the value of the Length Code and  the  sum  of\n      the\
    \ following:\n        o  the  length  of  the Qualifier component (depends on\
    \ the\n           data element)\n        o  the length of the Property-List component.\n\
    \      4.3  Data Element Syntax\n           This message  format  specification\
    \  defines  nineteen  (19)\n      different data elements.  Section 4.3.1 defines\
    \ the encoding form\n      for  data  elements  in  general  and  the  syntax\
    \  for each data\n      element.  Section  4.3.2  describes  the  use  of  specific\
    \  data\n      elements  as  part  of  the Data Element Contents of a Field data\n\
    \      element.  A summary of the syntactic form appears in Appendix  F;\n   \
    \   summaries of the data element syntax appear in Appendix G.\n      4.3.1  Data\
    \ elements\n           This  section  presents  the  general syntactic form for\
    \ all\n      data elements defined by this message  format  specification  and\n\
    \      the detailed syntax for each data element.  The data elements are\n   \
    \   presented  by  syntactic  class: primitive data elements (Section\n      4.3.1.1),\
    \ constructors (Section 4.3.1.2), and data elements which\n      can be either\
    \ (Section 4.3.1.3).\n           For convenience, the following terminology is\
    \ used  in  this\n      section.\n                  Term            Meaning\n\
    \              Primitive       a Primitive Data Element\n              Constructor\
    \     a Constructor Data Element\n              Element         any Data Element\n\
    \           The  syntax  of  each  Element is presented in graphic form.\n   \
    \   The following conventions apply in the diagrams.  A single  octet\n      is\
    \ represented as follows.\n          +--------+\n          |        |\n      \
    \    +--------+\n           Components that vary in length are represented as\
    \ follows.\n          +---//---+\n          |        |\n          +---//---+\n\
    \           Each  Element  has  up to five components:  an Identifier, a\n   \
    \   Length Code, a Qualifier, a Property-List, and the  Data  Element\n      Contents.\n\
    \               In the diagrams, the contents of the identifier octet is\n   \
    \   shown  as  a \"P\" followed by an identifier represented in binary.\n    \
    \  (See Figure 4.)\n      A length code is always represented in the following\
    \ manner:\n          +---//---+\n          |Lxxxxxxx|\n          +---//---+\n\
    \      A qualifier is always represented in the following manner:\n          +---//---+\n\
    \          |Qxxxxxxx|\n          +---//---+\n      A Property-List (if  present)\
    \  always  immediately  precedes  any\n      occurrence of Data Element Contents.\n\
    \      The  Data  Element  Contents  appears  in  diagrams as one of the\n   \
    \   following:\n        o  \"element(s)\", which may be any data element(s)\n\
    \        o  \"anything,\" which is undefined and  may  be  any  combi-\n     \
    \      nation of bits\n        o  a specific data element\n        o  the  interpretation\
    \ to be applied to the bits within the\n           octets that constitute the\
    \ element  (such  as  ASCII  or\n           Integer)\n           Two  data  elements\
    \ have been reserved for special purposes.\n      The Extension data  element\
    \  is  provided  to  allow  for  future\n      expansion of the possible data\
    \ elements.  The Vendor-Defined data\n      element  allows  CBMS  vendors to\
    \ define their own data elements.\n      Vendor-Defined data elements are not\
    \  guaranteed  to  be  unique,\n      since  two  implementations  could define\
    \ different data elements\n      using the same identifier.  Vendor-Defined data\
    \  elements  should\n      be used and interpreted by prior agreement.\n     \
    \      In  the  following  sections, each element is presented with\n      its\
    \ name, compliance  classification  (BASIC  or  OPTIONAL),  its\n      identifier\
    \   (both   in   hexadecimal  and  in  octal),  a  brief\n      description of\
    \ its use, and a graphic representation.  Each  data\n      element description\
    \ has the following form.\n      -----------------------------------------------------------------\n\
    \      Data Element             (Compliance)   identifier   identifier\n     \
    \     Name                 ( Category )    octet         octet \n            \
    \                                        16            8\n                   \
    \  Description of the syntax of the data element.\n                 +---//---+\n\
    \                 |        |     Diagram representing data element\n         \
    \        +---//---+\n      -----------------------------------------------------------------\n\
    \      4.3.1.1  Primitives\n           The   data   elements   in  this  section\
    \  are  arranged  in\n      alphabetical order by name.  (Appendix C presents\
    \ the identifiers\n      in numeric order.)\n      ASCII-String             (BASIC)\
    \        02        002 \n                                                16  \
    \       8\n                   This  data  element  contains  a  series  of   ASCII\n\
    \                characters [NatB-80], each character right-justified in\n   \
    \             one  octet.    For  7-bit  ASCII  characters,  the most\n      \
    \          significant bit of each octet must be 0.\n           Note: The ASCII\
    \ code  table  can  be  extended  through\n                standardized  techniques\
    \ [NatB-75]  to  introduce addi-\n                tional 7-bit or 8-bit  characters\
    \  or  additional  code\n                tables.\n                 +--------+---//---+----//-----+\n\
    \                 |P0000010|Lxxxxxxx|ASCII chars|\n                 +--------+---//---+----//-----+\n\
    \      Bit-String               (OPTIONAL)     43        103 \n              \
    \                                  16         8\n                This  data  element\
    \ contains a series of bits.  It uses\n                the Qualifier data  element\
    \  component  to  record  the\n                number  of  bits  of  padding (as\
    \ an eight bit unsigned\n                integer) needed to fill the final  octet\
    \  of  the  Data\n                Element  Contents  to  an  even  octet boundary.\
    \  These\n                padding bits have no meaning and occur in the low order\n\
    \                bits of the final octet.   The  valid  values  for  the\n   \
    \             Qualifier  component  are  0  through 7.  The number of\n      \
    \          bits in the Data Element Contents  is  calculated  from\n         \
    \       the following formula.\n                8   *   number of octets   - \
    \  value of\n                        in the Data            Qualifier component\n\
    \                        Element Contents\n                 +--------+---//---+---//---+---//---+\n\
    \                 |P1000011|Lxxxxxxx|Qxxxxxxx|  bits  |\n                 +--------+---//---+---//---+---//---+\n\
    \      Boolean                  (OPTIONAL)     08        010 \n              \
    \                                  16         8\n                This  data  element\
    \  contains  one octet whose value is\n                either true or false. \
    \ False is represented by all bits\n                being 0; true  is  represented\
    \  by  all  bits  being  1\n                (although  any  non-zero value should\
    \ be interpreted as\n                true).\n                 +--------+---//---+--------+\n\
    \                 |P0001000|Lxxxxxxx| T or F |\n                 +--------+---//---+--------+\n\
    \      End-of-Constructor       (BASIC)        01        001 \n              \
    \                                  16         8\n                This data element\
    \ terminates the Data Element  Contents\n                in  a  constructor  data\
    \  element  that  has indefinite\n                length.  This data element has\
    \ no  Contents  component.\n                (Use of this element is described\
    \ in Section 4.2.2.1.)\n                 +--------+---//---+\n               \
    \  |P0000001|Lxxxxxxx|\n                 +--------+---//---+\n      Integer  \
    \                (OPTIONAL)     20        040 \n                             \
    \                   16         8\n                This  data element contains\
    \ a 2's complement integer of\n                variable  length,  high  order\
    \  octet  first.    It  is\n                recommended  that the data element\
    \ contents be either 2\n                or 4 octets long whenever possible.\n\
    \                 +--------+---//---+---//---+\n                 |P0100000|Lxxxxxxx|\
    \ Integer|\n                 +--------+---//---+---//---+\n      No-Op       \
    \             (OPTIONAL)     00        000 \n                                \
    \                16         8\n                This data element does nothing.\
    \  No-Op is used whenever\n                it is necessary to include a data \
    \ element  that  means\n                \"no operation.\"  It is a short placeholder.\n\
    \                 +--------+---//---+\n                 |P0000000|Lxxxxxxx|\n\
    \                 +--------+---//---+\n      Padding                  (OPTIONAL)\
    \     21        041 \n                                                16     \
    \    8\n                This data element is used to fill any number of octets.\n\
    \                The  contents  of  a  Padding element are undefined and\n   \
    \             convey no information.\n                 +--------+---//---+---//---+\n\
    \                 |P0100001|Lxxxxxxx|anything|\n                 +--------+---//---+---//---+\n\
    \      4.3.1.2  Constructors\n           The data elements in this section  are\
    \  arranged  in  alpha-\n      betical order.\n      Compressed              \
    \ (OPTIONAL)     46        106 \n                                            \
    \    16         8\n                This  data  element  must  contain  a  Bit-String\
    \  data\n                element.  It is used to represent  any  data  that  has\n\
    \                been   compressed;   it   may   be  used  wherever  its\n   \
    \             uncompressed contents may appear.    A  Qualifier  data\n      \
    \          component  appears  in each Compressed data element; it\n         \
    \       contains a  compression identifier  (CID)  to  identify\n            \
    \    the  compression  algorithm used.  (See Section 4.3.5.)\n               \
    \ The Data Element Contents contains the product  of  the\n                compression\
    \ process.\n                 +--------+---//---+---//---+--------//--------+\n\
    \                 |P1000110|Lxxxxxxx|Qxxxxxxx|Bit-String Element|\n          \
    \       +--------+---//---+---//---+--------//--------+\n      Date          \
    \           (BASIC)        28        050 \n                                  \
    \              16         8\n                This   data   element  contains \
    \ an  ASCII-String  data\n                element, which is a representation of\
    \ a date  and  time\n                formatted   in   accordance   with   PUBS\
    \  4 [NatB-68],\n                58 [NatB-79a] and 59 [NatB-79b].  The use of\
    \  time  and\n                time  zone is optional.  It is recommended that\
    \ numeric\n                offsets be used  to  indicate  time  zone  rather \
    \ than\n                alphabetic abbreviations.\n                 +--------+---//---+------//------+\n\
    \                 |P0101000|Lxxxxxxx| ASCII-String |\n                 +--------+---//---+------//------+\n\
    \      Encrypted                (OPTIONAL)     47        107 \n              \
    \                                  16         8\n                This  data  element\
    \  must  contain a Bit-String.  It is\n                used to represent any data\
    \ that has been encrypted;  it\n                may  be  used  wherever  its \
    \ unencrypted  contents may\n                appear.  A Qualifier data  component\
    \  appears  in  each\n                Encrypted  data  element;  it  contains\
    \  an  encryption\n                identifier (EID) identifying the  encryption\
    \  algorithm\n                used.   The Data Element Contents is the product\
    \ of the\n                encryption process.\n                 +--------+---//---+---//---+--------//--------+\n\
    \                 |P1000111|Lxxxxxxx|Qxxxxxxx|Bit-String Element|\n          \
    \       +--------+---//---+---//---+--------//--------+\n      Field         \
    \           (BASIC)        4C        114 \n                                  \
    \              16         8\n                This   data  element  uses  a  Qualifier\
    \  data  element\n                component.  The Qualifier component  contains\
    \  a  Field\n                Identifier  (FID)  indicating  which  specific field\
    \ is\n                being represented.\n                 +--------+---//---+---//---+---//---+\n\
    \                 |P1001100|Lxxxxxxx|Qxxxxxxx|elements|\n                 +--------+---//---+---//---+---//---+\n\
    \      Message                  (BASIC)        4D        115 \n              \
    \                                  16         8\n                This data element\
    \ may contain  Field  or  Message  data\n                elements.    Its Qualifier\
    \ component contains a Message\n                type (MID) indicating the type\
    \ of the  message.    (The\n                MID is completely different from the\
    \ message identifier\n                in the Message-ID field and should not be\
    \ confused with\n                it.)\n                 +--------+---//---+---//---+\n\
    \                 |P1001101|Lxxxxxxx|Qxxxxxxx|\n                 +--------+---//---+---//---+\n\
    \                 +--------//---------//---------//---------//--------+\n    \
    \             | Field, Message, Encrypted, or Compressed Elements |\n        \
    \         +--------//---------//---------//---------//--------+\n      Property-List\
    \            (OPTIONAL)     24        044 \n                                 \
    \               16         8\n                This  data  element  contains a\
    \ series of Property data\n                elements to be associated with another\
    \ data element.\n                 +--------+---//---+-------//--------+\n    \
    \             |P0100100|Lxxxxxxx|Property Elements|\n                 +--------+---//---+-------//--------+\n\
    \      Property                 (OPTIONAL)     45        105 \n              \
    \                                  16         8\n                This  data  element\
    \  uses  a  Qualifier  data   element\n                component.       The  \
    \ Qualifier   component   contains\n                a  Property-Identifier (PID)\
    \ to indicate which specific\n                property is being represented.\n\
    \                 +--------+---//---+---//---+---//---+\n                 |P1000101|Lxxxxxxx|Qxxxxxxx|elements|\n\
    \                 +--------+---//---+---//---+---//---+\n      Sequence      \
    \           (OPTIONAL)     0A        012 \n                                  \
    \              16         8\n                This data element contains any series\
    \ of data elements.\n                Sequence  differs  from  Set  in that the\
    \ data elements\n                making up the Data Element Contents must be \
    \ considered\n                as  an  ordered  sequence  (according to their order\
    \ of\n                appearance in the sequence.)\n                 +--------+---//---+---//---+\n\
    \                 |P0001010|Lxxxxxxx|elements|\n                 +--------+---//---+---//---+\n\
    \      Set                      (OPTIONAL)     0B        013 \n              \
    \                                  16         8\n                This data element\
    \ contains any series of data  elements\n                with  no  ordering  of\
    \ the elements implied.  (Sequence\n                provides  an  ordered  series.)\
    \    Although  the   data\n                elements   contained   in   a   Set\
    \   must   be  stored\n                sequentially, the order in which they are\
    \ stored is not\n                defined and not processed.\n                \
    \ +--------+---//---+---//---+\n                 |P0001011|Lxxxxxxx|elements|\n\
    \                 +--------+---//---+---//---+\n      Unique-ID              \
    \  (OPTIONAL)     09        011 \n                                           \
    \     16         8\n                This data element is a unique identifier.\
    \  It need  not\n                be human-readable.  The Data Element Contents\
    \ may be an\n                ASCII-String, a Bit-String, or an Integer.\n    \
    \             +--------+---//---+---//---+\n                 |P0001001|Lxxxxxxx|\
    \ element|\n                 +--------+---//---+---//---+\n      4.3.1.3  Data\
    \ Elements that Extend this Specification\n           There  are  two  data  elements\
    \ that are used to extend this\n      specification.  They can be classified \
    \ as  either  primitive  or\n      constructor data elements, depending on the\
    \ extension.\n      Extension                (OPTIONAL)     7E        176 \n \
    \                                               16         8\n               \
    \ This  data  element  is  used  to  extend the number of\n                available\
    \  data  elements  beyond  the  128  that   are\n                possible   using\
    \  a  7-bit  identifier.    A  Qualifier\n                component extends the\
    \ encoding space  for  identifiers.\n                (Extension and Vendor-Defined\
    \ have the same syntax.)\n                 +--------+---//---+---//---+---//---+\n\
    \                 |P1111110|Lxxxxxxx|Qxxxxxxx|Anything|\n                 +--------+---//---+---//---+---//---+\n\
    \      Vendor-Defined           (OPTIONAL)     7F        177 \n              \
    \                                  16         8\n                This  data  element\
    \  is  used  to represent vendor- and\n                user-defined data  elements.\
    \    A  Qualifier  component\n                extends  the  encoding  space  for\
    \  identifiers.    The\n                Qualifier component is  not  guaranteed\
    \  to  be  unique\n                among all interconnected systems.  This data\
    \ element is\n                interpreted   according   to  prior  agreement \
    \ between\n                systems.  (Extension and Vendor-Defined  data  elements\n\
    \                have the same syntax.)\n                 +--------+---//---+---//---+---//---+\n\
    \                 |P1111111|Lxxxxxxx|Qxxxxxxx|Anything|\n                 +--------+---//---+---//---+---//---+\n\
    \      4.3.2  Using data elements within message fields\n           The Data Element\
    \ Contents of a particular field in a message\n      must  contain  at  least\
    \  one  data  element.   The types of data\n      elements that can appear in\
    \ the Data Element Contents of a  field\n      are restricted according to what\
    \ kind of field it is.  Appendix A\n      (the  master  reference  appendix  for\
    \ fields) defines which data\n      elements are valid as the Contents for each\
    \ of the fields.\n           Some fields have  a  Data  Element  Contents  that\
    \  contains\n      \"originators\"  or  \"recipients.\"   No data element represents\
    \ the\n      identities of originators or recipients (because that encoding is\n\
    \      not within the  scope  of  this  message  format  specification.)\n   \
    \   These  descriptions  simply  list  \"originators\" or \"recipients\",\n  \
    \    implying no restrictions on how the identifiers  for  originators\n     \
    \ or recipients are represented.\n      4.3.3  Properties and associated elements\n\
    \           This message format specification defines two properties.\n      Comment\
    \                                 01        001 \n                           \
    \                     16         8\n                This  property may contain\
    \ any series of data elements;\n                it most commonly contains one\
    \ or more ASCII-Strings.\n      Printing-Name                           02   \
    \     002 \n                                                16         8\n   \
    \             This property contains one ASCII-String.  In this case,\n      \
    \          the ASCII-String may contain only  the  printing  ASCII\n         \
    \       characters plus the \"space\" character.\n      4.3.4  Encryption identifiers\n\
    \           This  message  format  specification  defines two encryption\n   \
    \   identification codes.\n      Unspecified                             00  \
    \      000 \n                                                16         8\n  \
    \              Use of  this  encryption  identifier  as  part  of  the\n     \
    \           Encrypted  data  element  indicates that the encryption\n        \
    \        method being used was not specified  for  inclusion  as\n           \
    \     part of the data element.\n      FIPS-Standard                         \
    \  01        001 \n                                                16        \
    \ 8\n                Use  of  this  encryption  identifier  as  part  of the\n\
    \                Encrypted  data  element  indicates  that  the  Federal\n   \
    \             Information   Processing   Standard   method  for  data\n      \
    \          encryption was [NatB-77].\n      4.3.5  Compression identifiers\n \
    \          This message format specification  defines  one  compression\n    \
    \  identification code for use with the Compressed data element.\n      Unspecified\
    \                             00        000 \n                               \
    \                 16         8\n                Use  of  this  compression  identifier\
    \  as  part of the\n                Compressed data element indicates that the\
    \  compression\n                method  being  used  was not specified for inclusion\
    \ as\n                part of the data element.\n      4.3.6  Message types\n\
    \           This message format specification defines message type (MID)\n   \
    \   codes  for use in classifying the type of a message.  The message\n      type\
    \ could  be  confused  with  the  message  identifier  in  the\n      Message-Id\
    \ field; they are completely distinct concepts.\n      FIPS-Standard         \
    \                  01        01 \n                                           \
    \     16        8\n                This  message  type  marks  messages  defined\
    \  by  this\n                message format specification.\n                 \
    \           SUMMARY OF APPENDIXES\n      Appendix A  Defines  the  fields  in\
    \  the message format specifi-\n                  cation.  This alphabetical appendix\
    \ is for  reference\n                  use   by   implementors.      It   contains\
    \  semantic\n                  definitions of fields from  Section  3.1.    It\
    \  also\n                  defines  Field  Identifier values and specifies which\n\
    \                  data elements are valid as the Contents for  each  of\n   \
    \               the fields.\n      Appendix B  Defines  the  data  elements  in\
    \  the  message format\n                  specification.  This alphabetically\
    \ ordered  appendix\n                  is  for  reference  use  by implementors.\
    \  It consol-\n                  idates information from Section 4.3.\n      Appendix\
    \ C  Provides a reference table listing the data  elements\n                 \
    \ in numerical order by their identifier octets.\n      Appendix D  Provides a\
    \ reference table summarizing the components\n                  of messages according\
    \ to whether they are required or\n                  optional for CBMSs implementing\
    \ the specification.\n      Appendix E  Provides  a  reference  table  organizing\
    \ the message\n                  components according to the functional class\
    \  of  the\n                  components.\n      Appendix F  Provides   an  overview\
    \  of  the  syntactic  elements\n                  defined by this message format\
    \ specification.\n      Appendix G  Summarizes syntactic elements  according \
    \ to  whether\n                  they are required or optional for a CBMS implementing\n\
    \                  the message format specification.\n      Appendix H  Examples\
    \  of  each syntactic element displaying their\n                  syntax and describing\
    \ their associated semantics.\n                                 APPENDIX A\n \
    \                 FIELDS -- IMPLEMENTORS' MASTER REFERENCE\n           This  appendix\
    \  defines  all  of  the  fields in the message\n      format specification for\
    \  reference  use  by  implementors.    It\n      contains  semantics  definitions\
    \  of fields from Section 3.1.  It\n      also defines Field Identifier values\
    \ and which data elements  are\n      valid  as  the  Contents  for  each  of\
    \  the  fields.   The field\n      definitions appear alphabetically.\n      \
    \     Each field in the list has the following form:\n      ------------------------------------------------------------\n\
    \      Field Name               Compliance   identifier  identifier\n        \
    \                                      value       value \n                  \
    \                                 16          8\n                   Description\
    \ of the field semantics.   Names  of\n              data  elements  that  are\
    \  valid in the Data Element\n              Contents of this kind of field.\n\
    \      ------------------------------------------------------------\n      Attachments\
    \              OPTIONAL       08        010 \n                               \
    \                 16         8\n                This field  contains  additional\
    \  data  accompanying  a\n                message.    It  is similar in intent\
    \ to enclosures in a\n                conventional mail system.  Contents of this\
    \  field  are\n                unrestricted.\n      Author                   OPTIONAL\
    \       0C        014 \n                                                16   \
    \      8\n                This  field  identifies the individual(s) who wrote\
    \ the\n                primary contents of the message.   Use  of  the  Author\n\
    \                field  is  discouraged  when the contents of the Author\n   \
    \             field and the From field would be completely redundant.\n      \
    \          This field contains one or more originator identities.\n      Bcc \
    \                     OPTIONAL       0D        015 \n                        \
    \                        16         8\n                This  field  identifies\
    \  additional  recipients  for  a\n                message (a \"blind carbon copies\
    \ list\").   The  contents\n                of  this  field are not to be included\
    \ in copies of the\n                message sent to the primary and  secondary\
    \  recipients.\n                See  section 3.2.1 for further discussion of the\
    \ use of\n                blind carbon copies lists. This field contains  one\
    \  or\n                more recipient identities.\n      Cc                  \
    \     BASIC          06        006 \n                                        \
    \        16         8\n                This   field  identifies  secondary  recipients\
    \  for  a\n                message (a \"carbon copies\" list).  This field  contains\n\
    \                one or more recipient identities.\n      Circulate-Next     \
    \      OPTIONAL       0E        016 \n                                       \
    \         16         8\n                This field is used in conjunction with\
    \ the Circulate-To\n                field.    (See Section 3.2.6.1 for further\
    \ discussion.)\n                It identifies all recipients in a circulation\
    \ list  who\n                have not yet received the message.  This field contains\n\
    \                one or more recipient identities.\n      Circulate-To       \
    \      OPTIONAL       0F        017 \n                                       \
    \         16         8\n                This  field  identifies  recipients  for\
    \  a  circulated\n                message.  (See Section 3.2.6.1 for further discussion.)\n\
    \                It is  used  in  conjunction  with  the  Circulate-Next\n   \
    \             field.    This  field  contains  one  or more recipient\n      \
    \          identities.\n      Comments                 OPTIONAL       10     \
    \   020 \n                                                16         8\n     \
    \           This field permits adding  comments  onto  the  message\n        \
    \        without   disturbing   the  original  contents  of  the\n           \
    \     message.  While the Comments field will usually contain\n              \
    \  one or more ASCII-Strings, there are no restrictions on\n                its\
    \ contents.\n      Date                     OPTIONAL       11        021 \n  \
    \                                              16         8\n                This\
    \  field  contains  a  date   that   the   message's\n                originator\
    \  wishes  to  associate  with a message.  The\n                Date field is\
    \ to the Posted-Date field as the date on a\n                letter is to the\
    \ postmark added  by  the  post  office.\n                This field contains\
    \ one Date.\n      End-Date                 OPTIONAL       12        022 \n  \
    \                                              16         8\n                This\
    \  field  contains the date on which a message loses\n                effect.\
    \    (See  also   Section   3.2.5   for   further\n                discussion.)\
    \  This field contains one Date.\n      From                     REQUIRED    \
    \   01        001 \n                                                16       \
    \  8\n                This  field  contains  the  identity of the originators\n\
    \                taking formal responsibility for  this  message.    The\n   \
    \             contents  of  the  From field is to be used for replies\n      \
    \          when no Reply-to field appears  in  a  message.    This\n         \
    \       field contains one or more originator identities.\n      In-Reply-To \
    \             OPTIONAL       13        023 \n                                \
    \                16         8\n                This  field designates previous\
    \ correspondence to which\n                this message is a reply.  The usual\
    \  contents  of  this\n                field  would be the contents of the Message-ID\
    \ field of\n                the message(s) being replied to.  This  field  contains\n\
    \                one or more Unique-IDs or ASCII-Strings.\n      Keywords    \
    \             OPTIONAL       14        024 \n                                \
    \                16         8\n                This  field  contains  keywords\
    \  or  phrases for use in\n                retrieving a message.  This field contains\
    \ one or  more\n                ASCII-Strings.   (Each keyword or phrase is represented\n\
    \                by a separate ASCII-String.)\n      Message-Class           \
    \ OPTIONAL       15        025 \n                                            \
    \    16         8\n                This field indicates the purpose of  a  message.\
    \    For\n                example,  it  might  contain values indicating that\
    \ the\n                message is a memorandum or a  data-base  entry.    This\n\
    \                field contains one data element, an ASCII-String.\n      Message-ID\
    \               OPTIONAL       16        026 \n                              \
    \                  16         8\n                This  field contains a unique\
    \ identifier for a message.\n                This identifier is intended for machine\
    \ generation  and\n                processing.    Further  definition  appears\
    \  in Section\n                3.2.4.1.  Only one Message-ID field is permitted\
    \  in  a\n                message.    This  field  contains  one  data element,\
    \ a\n                Unique-ID.\n      Obsoletes                OPTIONAL     \
    \  26        046 \n                                                16        \
    \ 8\n                This field identifies one or more  messages  that  this\n\
    \                one  supplants.    This  field  contains  at  least one\n   \
    \             Unique-ID and may contain more than one.\n      Originator-Serial-Number\
    \ OPTIONAL       17        027 \n                                            \
    \    16         8\n                This field contains one or more serial numbers\
    \ assigned\n                by  the  message's originator.  (Messages with multiple\n\
    \                recipients should  all  have  the  same  value  in  the\n   \
    \             Originator-Serial-Number  field.    This field contains\n      \
    \          one or more ASCII-Strings.  (One ASCII-String  is  used\n         \
    \       for each serial number.)\n      Posted-Date              REQUIRED    \
    \   02        002 \n                                                16       \
    \  8\n                This  field  contains  the  posting  date, which is the\n\
    \                point in time  when  the  message  passes  through  the\n   \
    \             posting  slot into a message transfer system.  Only one\n      \
    \          Posted-Date field is permitted  in  a  message.    This\n         \
    \       field contains one Date.\n      Precedence               OPTIONAL    \
    \   18        030 \n                                                16       \
    \  8\n                Ordinarily, message precedence or priority is a service\n\
    \                request  to  a  message  transfer  system.    A message\n   \
    \             originator, however, can include precedence information\n      \
    \          in a message.  This field indicates the  precedence  at\n         \
    \       which  the  message  was  posted.    One  example  of a\n            \
    \    precedence  scheme  is  the  US   Military   categories\n               \
    \ \"ROUTINE\",  \"PRIORITY\",  \"IMMEDIATE\", \"FLASH OVERRIDE\",\n          \
    \      and  \"EMERGENCY  COMMAND  PRECEDENCE\".     This   field\n           \
    \     contains one ASCII-String.\n      Received-Date            OPTIONAL    \
    \   19        031 \n                                                16       \
    \  8\n                This  field  is  also  called Delivery date.  It may be\n\
    \                added to a message by the recipient's message receiving\n   \
    \             program.   It  indicates  when  the  message  left  the\n      \
    \          delivery  system  and  entered  the recipient's message\n         \
    \       processing domain.  This field contains one Date.\n      Received-From\
    \            OPTIONAL       1A        032 \n                                 \
    \               16         8\n                This field  contains  a  record\
    \  of  a  message's  path\n                through    a    message    transfer\
    \    system.      The\n                recipient's message receiving  program\
    \  may  store  any\n                such   information  that  it  obtains  from\
    \  a  message\n                transfer system in this field.  The  contents \
    \ of  this\n                field are unrestricted.\n      References        \
    \       OPTIONAL       20        040 \n                                      \
    \          16         8\n                This  field  identifies  other correspondence\
    \ that this\n                message  references.    If  the  other   correspondence\n\
    \                contains  a  Message-ID  field,  the  contents  of  the\n   \
    \             References field must be the message identifier.   This\n      \
    \          field contains one or more Unique-IDs or ASCII-Strings.\n      Reissue-Type\
    \             OPTIONAL       25        045 \n                                \
    \                16         8\n                This   field   is  used  in  conjunction\
    \  with  message\n                encapsulating  (see  Section  3.2.2)  to  differentiate\n\
    \                between messages being assigned or redistributed.  This\n   \
    \             field  contains  one  data  element,  usually an ASCII-\n      \
    \          String.\n      Reply-To                 BASIC          03        003\
    \ \n                                                16         8\n           \
    \     This field identifies any recipients for replies to the\n              \
    \  message.  This field contains  one  or  more  recipient\n                identities.\n\
    \      Sender                   OPTIONAL       22        042 \n              \
    \                                  16         8\n                This  field \
    \ identifies the agent who sent the message.\n                It is intended either\
    \ for when the sender  is  not  the\n                originator  responsible \
    \ for the message or to indicate\n                who among a group of originators\
    \  responsible  for  the\n                message  actually  sent it.  Use of\
    \ the Sender field is\n                discouraged when the contents of the Sender\
    \  field  and\n                From  field  would  be  completely redundant. \
    \ Only one\n                Sender field is permitted in a  message.    This \
    \ field\n                contains one originator identity.\n      Start-Date \
    \              OPTIONAL       23        043 \n                               \
    \                 16         8\n                This  field  contains the date\
    \ on which a message takes\n                effect.  (See Section 3.2.5  for \
    \ further  discussion.)\n                This field contains one Date.\n     \
    \ Subject                  BASIC          07        007 \n                   \
    \                             16         8\n                This field contains\
    \ whatever information the originator\n                provided  to  summarize\
    \  or  indicate the nature of the\n                message.   This  field  contains\
    \  one  or  more  ASCII-\n                Strings.\n      Text               \
    \      BASIC          04        004 \n                                       \
    \         16         8\n                This field contains the primary content\
    \ of the message.\n                Contents of this field are unrestricted.\n\
    \      To                       REQUIRED       05        005 \n              \
    \                                  16         8\n                This field identifies\
    \ primary recipients for a message.\n                This field contains one or\
    \ more recipient identities.\n      Warning-Date             OPTIONAL       24\
    \        044 \n                                                16         8\n\
    \                This  field is used either alone or in conjunction with\n   \
    \             an End-Date field.  It  contains  one  or  more  dates.\n      \
    \          These  dates  could  be  used  by  a message processing\n         \
    \       program as warnings of an impending end-date  or  other\n            \
    \    event.    (See  Section  3.2.5 for further discussion.)\n               \
    \ This field contains one or more Dates.\n                                 APPENDIX\
    \ B\n               DATA ELEMENTS -- IMPLEMENTORS' MASTER REFERENCE\n        \
    \   The appendix defines all of the data elements in the message\n      format\
    \  specification,  for  reference  use  by implementors.  It\n      contains no\
    \ new information but rather consolidates the syntactic\n      information from\
    \ Section 4.3.\n           Each data element description has the following form.\n\
    \      -----------------------------------------------------------------\n   \
    \   Data Element        (Compliance)   identifier   identifier\n          Name\
    \            ( Category )    octet         octet \n                          \
    \                     16            8\n                Constructive class (primitive\
    \ or constructor)\n                Description of the syntax of the data element.\n\
    \                +---//---+\n                |        |     Diagram representing\
    \ data element\n                +---//---+\n      -----------------------------------------------------------------\n\
    \      ASCII-String             (BASIC)        02        002 \n              \
    \                                  16         8\n                primitive\n \
    \               This data element contains a series of ASCII characters\n    \
    \             [NatB-80],   each  character  right-justified  in  one\n       \
    \         octet.    For  7-bit   ASCII   characters,   the   most\n          \
    \      significant bit of each octet must be 0.\n                Note:  The  ASCII\
    \  code  table  can be extended through\n                standardized techniques\
    \ [NatB-75]  to  introduce  addi-\n                tional  7-bit  or  8-bit  characters\
    \ or additional code\n                tables.\n                 +--------+---//---+----//-----+\n\
    \                 |P0000010|Lxxxxxxx|ASCII chars|\n                 +--------+---//---+----//-----+\n\
    \      Bit-String               (OPTIONAL)     43        103 \n              \
    \                                  16         8\n                primitive\n \
    \               This data element contains a series of bits.   It  uses\n    \
    \            the  Qualifier  data  element  component  to record the\n       \
    \         number  of  bits  of  padding  (as  an  8-bit  unsigned\n          \
    \      integer)  needed  to  fill  the final octet of the Data\n             \
    \   Element Contents to an  even  octet  boundary.    These\n                padding\
    \ bits have no meaning and occur in the low order\n                bits  of  the\
    \  final  octet.   The valid values for the\n                Qualifier component\
    \ are 0 through 7.    The  number  of\n                bits  in  the  Data Element\
    \ Contents is calculated from\n                the following formula.\n      \
    \          8   *   number of octets   -   value of\n                        in\
    \ the Data            Qualifier component\n                        Element Contents\n\
    \                 +--------+---//---+---//---+---//---+\n                 |P1000011|Lxxxxxxx|Qxxxxxxx|\
    \  bits  |\n                 +--------+---//---+---//---+---//---+\n      Boolean\
    \                  (OPTIONAL)     08        010 \n                           \
    \                     16         8\n                primitive\n              \
    \  This  data  element  contains  one octet whose value is\n                either\
    \ true or false.  False is represented by all bits\n                being 0; true\
    \  is  represented  by  all  bits  being  1\n                (although  any  non-zero\
    \ value should be interpreted as\n                true).\n                 +--------+---//---+--------+\n\
    \                 |P0001000|Lxxxxxxx| T or F |\n                 +--------+---//---+--------+\n\
    \      Compressed               (OPTIONAL)     46        106 \n              \
    \                                  16         8\n                constructor\n\
    \                This  data  element  must  contain  a  Bit-String  data\n   \
    \             element.    It  is  used to represent any data that has\n      \
    \          been  compressed;  it  may   be   used   wherever   its\n         \
    \       uncompressed  contents  may  appear.   A Qualifier data\n            \
    \    component appears in each Compressed data  element;  it\n               \
    \ contains a compression identifier (CID) to identify the\n                compression\
    \  algorithm used.  (See Section 4.3.5.)  The\n                Data Element  Contents\
    \  contains  the  product  of  the\n                compression process.\n   \
    \              +--------+---//---+---//---+--------//--------+\n             \
    \    |P1000110|Lxxxxxxx|Qxxxxxxx|Bit-String Element|\n                 +--------+---//---+---//---+--------//--------+\n\
    \      Date                     (BASIC)        28        050 \n              \
    \                                  16       8\n                constructor\n \
    \               This   data   element  contains  an  ASCII-String  data\n    \
    \            element, which is a representation of a date  and  time\n       \
    \         formatted  in  accordance  with  FIPS PUBS 4 [NatB-68],\n          \
    \      58 [NatB-79a], and 59 [NatB-79b].  The use of time  and\n             \
    \   time  zone is optional.  It is recommended that numeric\n                offsets\
    \ be used  to  indicate  time  zone  rather  than\n                alphabetic\
    \ abbreviations.\n                 +--------+---//---+------//------+\n      \
    \           |P0101000|Lxxxxxxx| ASCII-String |\n                 +--------+---//---+------//------+\n\
    \      Encrypted                (OPTIONAL)     47        107 \n              \
    \                                  16         8\n                constructor\n\
    \                This  data  element  must  contain a Bit-String.  It is\n   \
    \             used to represent any data that has been encrypted;  it\n      \
    \          may  be  used  wherever  its  unencrypted  contents may\n         \
    \       appear.  A Qualifier data  component  appears  in  each\n            \
    \    Encrypted  data  element;  it  contains  an  encryption\n               \
    \ identifier (EID) identifying the  encryption  algorithm\n                used.\
    \  (See Section 4.3.4 for further discussion.)  The\n                Data  Element\
    \ Contents is the product of the encryption\n                process.\n      \
    \           +--------+---//---+---//---+--------//--------+\n                \
    \ |P1000111|Lxxxxxxx|Qxxxxxxx|Bit-String Element|\n                 +--------+---//---+---//---+--------//--------+\n\
    \      End-of-Constructor       (BASIC)        01        001 \n              \
    \                                  16         8\n                primitive\n \
    \               This data element terminates the Data Element  Contents\n    \
    \            in  a  constructor  data  element  that  has indefinite\n       \
    \         length.  This data element has no  Contents  component.\n          \
    \      (Use of this element is described in Section 4.2.2.1.)\n              \
    \   +--------+---//---+\n                 |P0000001|Lxxxxxxx|\n              \
    \   +--------+---//---+\n      Extension                (OPTIONAL)     7E    \
    \    176 \n                                                16         8\n    \
    \            either\n                This  data  element  is  used  to  extend\
    \ the number of\n                available  data  elements  beyond  the  128 \
    \ that   are\n                possible   using  a  7-bit  identifier.    A  Qualifier\n\
    \                component extends the encoding space  for  identifiers.\n   \
    \             (Extension and Vendor-Defined have the same syntax.)\n         \
    \        +--------+---//---+---//---+---//---+\n                 |P1111110|Lxxxxxxx|Qxxxxxxx|Anything|\n\
    \                 +--------+---//---+---//---+---//---+\n      Field         \
    \           (BASIC)        4C        114 \n                                  \
    \              16         8\n                constructor\n                This\
    \   data  element  uses  a  Qualifier  data  element\n                component.\
    \  The Qualifier component  contains  a  Field\n                Identifier  (FID)\
    \  indicating  which  specific field is\n                being represented.  \
    \ (See  Section  4.3.2  for  further\n                discussion.)\n         \
    \        +--------+---//---+---//---+---//---+\n                 |P1001100|Lxxxxxxx|Qxxxxxxx|elements|\n\
    \                 +--------+---//---+---//---+---//---+\n      Integer       \
    \           (OPTIONAL)     20        040 \n                                  \
    \              16         8\n                primitive\n                This \
    \ data element contains a 2's complement integer of\n                variable\
    \  length,  high-order  octet  first.    It   is\n                recommended\
    \  that the data element contents be either 2\n                or 4 octets long\
    \ whenever possible.\n                 +--------+---//---+---//---+\n        \
    \         |P0100000|Lxxxxxxx| Integer|\n                 +--------+---//---+---//---+\n\
    \      Message                  (BASIC)        4D        115 \n              \
    \                                  16         8\n                constructor\n\
    \                This data element may contain  Field  or  Message  data\n   \
    \             elements.    Its Qualifier component contains a Message\n      \
    \          type (MID) indicating the type of the  message.    (See\n         \
    \       Section  4.3.6  for  further  discussion.)  (The MID is\n            \
    \    completely different from the message identifier in the\n               \
    \ Message-ID field and should not be confused with it.)\n                 +--------+---//---+---//---+\n\
    \                 |P1001101|Lxxxxxxx|Qxxxxxxx|\n                 +--------+---//---+---//---+\n\
    \                 +--------//---------//---------//---------//--------+\n    \
    \             | Field, Message, Encrypted, or Compressed Elements |\n        \
    \         +--------//---------//---------//---------//--------+\n      No-Op \
    \                   (OPTIONAL)     00        000 \n                          \
    \                      16         8\n                primitive\n             \
    \   This data element does nothing.  No-Op is used whenever\n                it\
    \  is  necessary  to include a data element that means\n                \"no operation.\"\
    \  It is a short placeholder.\n                 +--------+---//---+\n        \
    \         |P0000000|Lxxxxxxx|\n                 +--------+---//---+\n      Padding\
    \                  (OPTIONAL)     21        041 \n                           \
    \                     16         8\n                primitive\n              \
    \  This data element is used to fill any number of octets.\n                The\
    \ contents of a Padding  element  are  undefined  and\n                convey\
    \ no information.\n                 +--------+---//---+---//---+\n           \
    \      |P0100001|Lxxxxxxx|anything|\n                 +--------+---//---+---//---+\n\
    \      Property-List            (OPTIONAL)     24        044 \n              \
    \                                  16         8\n                constructor\n\
    \                This  data  element  contains a series of Property data\n   \
    \             elements to be associated with another data element.\n         \
    \        +--------+---//---+-------//--------+\n                 |P0100100|Lxxxxxxx|Property\
    \ Elements|\n                 +--------+---//---+-------//--------+\n      Property\
    \                 (OPTIONAL)     45        105 \n                            \
    \                    16         8\n                constructor\n             \
    \   This   data  element  uses  a  Qualifier  data  element\n                component.\
    \      The   Qualifier   component    contains\n                a  Property-Identifier\
    \ (PID) to indicate which specific\n                property  is being represented.\
    \  (See Section 4.3.3 for\n                further discussion.)\n            \
    \     +--------+---//---+---//---+---//---+\n                 |P1000101|Lxxxxxxx|Qxxxxxxx|elements|\n\
    \                 +--------+---//---+---//---+---//---+\n      Sequence      \
    \           (OPTIONAL)     0A        012 \n                                  \
    \              16         8\n                constructor\n                This\
    \ data element contains any series of data elements.\n                Sequence\
    \ differs from Set in  that  the  data  elements\n                making  up the\
    \ Data Element Contents must be considered\n                as an ordered sequence\
    \ (according  to  their  order  of\n                appearance in the sequence.)\n\
    \                 +--------+---//---+---//---+\n                 |P0001010|Lxxxxxxx|elements|\n\
    \                 +--------+---//---+---//---+\n      Set                    \
    \  (OPTIONAL)     0B        013 \n                                           \
    \     16         8\n                constructor\n                This  data element\
    \ contains any series of data elements\n                with no ordering of the\
    \ elements  implied.    (Sequence\n                provides   an  ordered  series.)\
    \    Although  the  data\n                elements  contained   in   a   Set \
    \  must   be   stored\n                sequentially, the order in which they are\
    \ stored is not\n                defined and not processed.\n                \
    \ +--------+---//---+---//---+\n                 |P0001011|Lxxxxxxx|elements|\n\
    \                 +--------+---//---+---//---+\n      Unique-ID              \
    \  (OPTIONAL)     09        011 \n                                           \
    \     16         8\n                constructor\n                This  data element\
    \ is a unique identifier.  It need not\n                be human-readable.  The\
    \ Data Element Contents may be an\n                ASCII-String, a Bit-String,\
    \ or an Integer.\n                 +--------+---//---+---//---+\n            \
    \     |P0001001|Lxxxxxxx| element|\n                 +--------+---//---+---//---+\n\
    \      Vendor-Defined           (OPTIONAL)     7F        177 \n              \
    \                                  16         8\n                either\n    \
    \            This data element is used to  represent  vendor-defined\n       \
    \         data  elements.    A  Qualifier  component  extends the\n          \
    \      encoding  space  for  identifiers.      The   Qualifier\n             \
    \   component  is  not  guaranteed  to  be unique among all\n                interconnected\
    \  systems.     This   data   element   is\n                interpreted   according\
    \   to  prior  agreement  between\n                systems.  (Extension and Vendor-Defined\
    \  data  elements\n                have the same syntax.)\n                 +--------+---//---+---//---+---//---+\n\
    \                 |P1111111|Lxxxxxxx|Qxxxxxxx|Anything|\n                 +--------+---//---+---//---+---//---+\n\
    \                                 APPENDIX C\n                       DATA ELEMENT\
    \ IDENTIFIER OCTETS\n      Identifier  Identifier  Data Element Name\n      00\
    \          000         No-Op\n      01          001         End-of-Constructor\n\
    \      02          002         ASCII-String\n      08          010         Boolean\n\
    \      09          011         Unique-ID\n      0A          012         Sequence\n\
    \      0B          013         Set\n      20          040         Integer\n  \
    \    21          041         Padding\n      24          044         Property-List\n\
    \      28          050         Date\n      43          103         Bit-String\n\
    \      45          105         Property\n      46          106         Compressed\n\
    \      47          107         Encrypted\n      4C          114         Field\n\
    \      4D          115         Message\n      7E          176         Extension\n\
    \      7F          177         Vendor-Defined\n                              \
    \   APPENDIX D\n              SUMMARY OF MESSAGE FIELDS BY COMPLIANCE CATEGORY\n\
    \           This  appendix  is  for  reference  use.  It contains no new\n   \
    \   information, but rather abstracts from that presented in  Section\n      3.1.\n\
    \           This  appendix  contains  the  message  field names arranged\n   \
    \   alphabetically within compliance category.   (Appendix  E  orders\n      the\
    \  field  names  within  functional  category.)  Complete field\n      definitions\
    \ appear in Appendix A.\n           Required fields must appear in a message.\
    \  Basic fields must\n      be recognized and processed by all CBMS systems. \
    \ Optional fields\n      need not be supported by  a  CBMS  but,  if  supported,\
    \  must  be\n      processed according to the meanings defined by the message\
    \ format\n      specification.\n      D.1  REQUIRED Fields\n      From\n     \
    \ Posted-Date\n      To\n      D.2  BASIC Fields\n      Cc\n      Reply-To\n \
    \     Subject\n      Text\n      D.3  OPTIONAL Fields\n      Attachments\n   \
    \   Author\n      Bcc\n      Circulate-Next\n      Circulate-To\n      Comments\n\
    \      Date\n      End-Date\n      In-Reply-To\n      Keywords\n      Message-Class\n\
    \      Message-ID\n      Obsoletes\n      Originator-Serial-Number\n      Precedence\n\
    \      Received-Date\n      Received-From\n      References\n      Reissue-Type\n\
    \      Sender\n      Start-Date\n      Warning-Date\n                        \
    \         APPENDIX E\n                  SUMMARY OF MESSAGE SEMANTICS BY FUNCTION\n\
    \           This  appendix  is  for  reference  use.  It contains no new\n   \
    \   information, but rather abstracts from that presented in  Section\n      3.1.\n\
    \           This  appendix  contains  the  message  field names arranged\n   \
    \   alphabetically within functional class.  (Appendix D  orders  the\n      field\
    \ names within compliance class.)  Complete field definitions\n      appear in\
    \ Appendix A.\n      E.1  Circulation\n      Circulate-Next\n      Circulate-To\n\
    \      E.2  Cross-Referencing\n      In-Reply-To\n      Message-ID\n      Obsoletes\n\
    \      Originator-Serial-Number\n      References\n      E.3  Life Spans\n   \
    \   End-Date\n      Start-Date\n      Warning-Date\n      E.4  Delivery System\n\
    \      Received-Date\n      Received-From\n      E.5  Miscellaneous Fields Used\
    \ Generally\n      Attachments\n      Comments\n      Keywords\n      Message-Class\n\
    \      Precedence\n      Subject\n      Text\n      E.6  Reply Generation\n  \
    \    Reply-To\n      E.7  Reissuing\n      Reissue-Type\n      E.8  Sending (Normal\
    \ Transmission)\n      Author\n      Bcc\n      Cc\n      Date\n      From\n \
    \     Posted-Date\n      Sender\n      To\n                                 APPENDIX\
    \ F\n                       SUMMARY OF DATA ELEMENT SYNTAX\n           This  appendix\
    \ summarizes data element syntax by diagramming\n      the components of data\
    \ elements.  Detailed presentation  of  data\n      element syntax appears in\
    \ Section 4.3.1.\n           In  these  diagrams,  required  components of a data\
    \ element\n      appear as follows.  (The double border signifies \"required.\"\
    )\n                +========+        +===//===+\n                |        |  \
    \      |        |\n                +========+        +===//===+\n            \
    \    always one        one or more\n                octet long        octets long\n\
    \           Optional components of  data  elements  are  represented  as\n   \
    \   follows.  (The single border signifies \"not required.\")\n              \
    \  +--------+        +---//---+\n                |        |        |        |\n\
    \                +--------+        +---//---+\n                always one    \
    \    one or more\n                octet long        octets long\n           The\
    \  first  octet in a data element is the identifier octet.\n      In diagrams\
    \ of data elements, all eight bits  of  the  identifier\n      octet  are  always\
    \  shown.  Bits with fixed values show the fixed\n      values as 1s and 0s. \
    \ Bits with variable values are shown as  x's\n      and y's.\n           The\
    \  first  bit  in  an  identifier octet is the P-bit.  Its\n      value indicates\
    \ whether a data element contains a property  list.\n      (A  P-bit  value of\
    \ 1 indicates the presence of a property list.)\n      The remaining seven bits\
    \ contain the rest of the identifier.\n           Other octets in  a  data  element\
    \  belong  to  one  of  four\n      classes:    Length  Code, Qualifier, Property-List,\
    \ and Contents.\n      In diagrams of syntax the data  element  components  are\
    \  labeled\n      according to their class.\n           Component Class      \
    \       Label\n          Length code                  Length\n          Qualifier\
    \                    Qual\n          Property-List                P-List\n   \
    \       Contents                     Contents\n           Data elements must follow\
    \ this form.\n                +========+===//===+---//---+---//---+---//---+\n\
    \                |Pxxxxxxx| Length |  Qual  | P-List |contents|\n            \
    \    +========+===//===+---//---+---//---+---//---+\n      The  value  of the\
    \ Length component is the total number of octets\n      following the length code\
    \ octet in the data element.\n                                 APPENDIX G\n  \
    \             SUMMARY OF DATA ELEMENTS BY COMPLIANCE CATEGORY\n           Compliance\
    \  categories  for syntactic elements are basic and\n      optional.  Every CBMS\
    \ is required to recognize and process  basic\n      elements.    A  CBMS is not\
    \ required to process optional elements\n      although many are strongly recommended\
    \ by the semantics.\n           This appendix  summarizes  data  elements  by\
    \  listing  them\n      according to their compliance category.\n      G.1  BASIC\
    \ Data Elements\n      ASCII-String             (primitive)    02        002 \n\
    \                                                16         8\n      Date    \
    \                 (constructor)  28        050 \n                            \
    \                    16         8\n      End-Of-Constructor       (primitive)\
    \    01        001 \n                                                16      \
    \   8\n      Field                    (constructor)  4C        114 \n        \
    \                                        16         8\n      Message         \
    \         (constructor)  4D        115 \n                                    \
    \            16         8\n      G.2  OPTIONAL Data Elements\n      Bit-String\
    \               (primitive)    43        103 \n                              \
    \                  16         8\n      Boolean                  (primitive)  \
    \  08        010 \n                                                16        \
    \ 8\n      Compressed               (constructor)  46        106 \n          \
    \                                      16         8\n      Encrypted         \
    \       (constructor)  47        107 \n                                      \
    \          16         8\n      Extension                (either)       7E    \
    \    176 \n                                                16         8\n    \
    \  Integer                  (primitive)    20        040 \n                  \
    \                              16         8\n      No-Op                    (primitive)\
    \    00        000 \n                                                16      \
    \   8\n      Padding                  (primitive)    21        041 \n        \
    \                                        16         8\n      Property        \
    \         (constructor)  45        105 \n                                    \
    \            16         8\n      Property-List            (constructor)  24  \
    \      044 \n                                                16         8\n  \
    \    Sequence                 (constructor)  0A        012 \n                \
    \                                16         8\n      Set                     \
    \ (constructor)  0B        013 \n                                            \
    \    16         8\n      Unique-ID                (constructor)  09        011\
    \ \n                                                16         8\n      Vendor-Defined\
    \           (either)       7F        377 \n                                  \
    \              16         8\n                                 APPENDIX H\n   \
    \                               EXAMPLES\n           This  appendix presents at\
    \ least one example for each of the\n      data elements defined in this message\
    \ format specification.    In\n      these examples, identifier octets are represented\
    \ in binary form.\n      All  other  numbers  are presented in hexadecimal.  ASCII\
    \ strings\n      are shown as characters rather  than  their  numerical  represen-\n\
    \      tation.    Although  this  message  format specification does not\n   \
    \   define the syntax of names and addresses, message originators and\n      recipients\
    \ are identified by their names.  This  does  not  imply\n      anything  about\
    \  how naming and addressing can or should be done;\n      it is simply a convenient\
    \ way to identify message originators and\n      recipients in these examples.\n\
    \      H.1  Primitive Data Elements\n           This section contains an example\
    \ of each  of  the  primitive\n      data  elements.   Each example contains a\
    \ short explanation and a\n      series of octets.\n           No-Op data element:\n\
    \           +--------+--------+\n           |00000000|00000000|\n           +--------+--------+\n\
    \           End-of-Constructor data element:\n           +--------+--------+\n\
    \           |00000001|00000000|\n           +--------+--------+\n           Boolean\
    \ data element whose value is true:\n           +--------+--------+--------+\n\
    \           |00001000|00000001|11111111|\n           +--------+--------+--------+\n\
    \           Integer  data  element  containing five octets of data.  Its\n   \
    \   value is 4,294,967,296 (decimal):\n           +--------+--------+--------+--------+--------+\n\
    \           |00100000|  0   5 |  0   1    0   0    0   0\n           +--------+--------+--------+--------+--------+\n\
    \                    +--------+--------+\n                       0   0    0  \
    \ 0 |\n                    +--------+--------+\n           Padding data element\
    \ containing  three  octets  of  padding.\n      The values of those three octets\
    \ are meaningless:\n           +--------+--------+--------+--------+--------+\n\
    \           |00100001|  0   3 |  F   F    F   F    F   F |\n           +--------+--------+--------+--------+--------+\n\
    \           ASCII-String  data  element containing nine characters.  Its\n   \
    \   value is \"Hi There.\":\n           +--------+--------+---- ----+\n      \
    \     |00000010|  0   9 |Hi There.|\n           +--------+--------+---- ----+\n\
    \           Bit-String data element containing 44 bits of data (((7-1) x\n   \
    \   8)  - 4).  Six octets are used to hold those 44 bits.  The last 4\n      bits\
    \ in the final octet are padding and are therefore ignored.\n           Bit-String\
    \  Length   Spare\n           +--------+--------+--------+--------+--------+\n\
    \           |01000011|  0   7 |  0   4 |  0   A    3   B\n           +--------+--------+--------+--------+--------+\n\
    \                    +--------+--------+--------+--------+\n                 \
    \      5   F    2   9    1   C    D   0 |\n                    +--------+--------+--------+--------+\n\
    \      H.2  Constructor Data Elements\n           This section contains an example\
    \ of each of the  constructor\n      data  elements.    Each  example contains\
    \ a short explanation and\n      then an annotated series of  the  data  elements\
    \  making  up  the\n      constructor.\n           Property-List  data  element\
    \  containing  one  Property data\n      element.    The  property  is  Printing-Name\
    \  and  its  value  is\n      \"Distribution\":\n           Prop-List  Length\
    \  Property  Length    PID\n           +--------+--------+--------+--------+--------+\n\
    \           |00100100|  1   1 |01000101|  0   F |  0   2 |\n           +--------+--------+--------+--------+--------+\n\
    \                      ASCII    Length\n                    +--------+--------+----\
    \    ----+\n                    |00000010|  0   C |Distribution|\n           \
    \         +--------+--------+----    ----+\n           Printing-Name  Property.\
    \   The value of the Printing-Name is\n      \"Distribution\":\n            Property\
    \  Length    PID     ASCII    Length\n           +--------+--------+--------+--------+--------+\n\
    \           |01000101|  0   F |  0   2 |00000010|  0   C |\n           +--------+--------+--------+--------+--------+\n\
    \                    +----    ----+\n                    |Distribution|\n    \
    \                +----    ----+\n           Compressed data element.  Its contents\
    \ were compressed using\n      an unspecified data compression algorithm.  The\
    \  compressed  data\n      is in a bit-string that is 56 bits long, fully filling\
    \ 7 octets:\n           Compressed  Length   CID   Bit-String  Length\n      \
    \     +--------+--------+--------+--------+--------+\n           |01000110|  0\
    \   B |  0   0 |01000011|  0   8 |\n           +--------+--------+--------+--------+--------+\n\
    \                       Spare\n                    +--------+--------+--------+--------+\n\
    \                    |  0   0 |  1   C    5   F    2   D\n                   \
    \ +--------+--------+--------+--------+\n                    +--------+--------+--------+--------+\n\
    \                       7   7    B   A    F   6    2   9 |\n                 \
    \   +--------+--------+--------+--------+\n           Encrypted  data  element.\
    \    The  encryption  method used to\n      encrypt its contents has been intentionally\
    \ not specified.   This\n      element contains a Bit-String which contains 22\
    \ bits (((4-1) x 8)\n      - 2) of data.  These 22 bits are represented in octets;\
    \ the final\n      2 bits in the final octet are padding and are therefore ignored:\n\
    \           Encrypted   Length   EID   Bit-String  Length\n           +--------+--------+--------+--------+--------+\n\
    \           |01000111|  0   7 |  0   0 |01000011|  0   4 |\n           +--------+--------+--------+--------+--------+\n\
    \                       Spare\n                    +--------+--------+--------+--------+\n\
    \                    |  0   2 |  A   3    7   8    1   C |\n                 \
    \   +--------+--------+--------+--------+\n           Date  data  element.   \
    \ This  example includes a date but no\n      time.  The date shown in this example\
    \ is August 15, 1980:\n             Date     Length   ASCII    Length\n      \
    \     +--------+--------+--------+--------+---  ---+\n           |00101000|  0\
    \   A |00000010|  0   8 |19800815|\n           +--------+--------+--------+--------+---\
    \  ---+\n           Unique-ID data element, which is represented as  an  Integer\n\
    \      data element whose value is 129 (decimal).\n           Unique-ID  Length\
    \   Integer  Length\n           +--------+--------+--------+--------+--------+--------+\n\
    \           |00001001|  0   4 |00100000|  0   2 |  0   0    8   1 |\n        \
    \   +--------+--------+--------+--------+--------+--------+\n           Sequence\
    \  data element containing two ASCII-String data ele-\n      ments.  The first\
    \ ASCII-String is  \"This  is\"  while  the  second\n      string is \" a list\"\
    :\n            Sequence  Length   ASCII    Length\n           +--------+--------+--------+--------+---\
    \ ---+\n           |00001010|  1   2 |00000010|  0   7 |This is|\n           +--------+--------+--------+--------+---\
    \ ---+\n                      ASCII    Length\n                    +--------+--------+---\
    \ ---+\n                    |00000010|  0   7 | a list|\n                    +--------+--------+---\
    \ ---+\n           Set  data element containing two Integer data elements.  The\n\
    \      first integer has a value of 519 (decimal) while the value of the\n   \
    \   second is 71 (decimal).   (These  two  values  have  no  ordering\n      because\
    \ they belong to a set.)\n              Set     Length   Integer  Length\n   \
    \        +--------+--------+--------+--------+--------+--------+\n           |00001011|\
    \  0   8 |00100000|  0   2 |  0   2    0   7 |\n           +--------+--------+--------+--------+--------+--------+\n\
    \                      Integer  Length\n                    +--------+--------+--------+--------+\n\
    \                    |00100000|  0   2 |  0   0    4   7 |\n                 \
    \   +--------+--------+--------+--------+\n           Field  data  element.  \
    \ The specific field shown is the Text\n      field with the contents \"I will\
    \ see you at lunch.\":\n             Field    Length    FID      ASCII   Length\n\
    \           +--------+--------+--------+--------+--------+\n           |01001100|\
    \  1   B |  0   4 |00000010|  1   8 |\n           +--------+--------+--------+--------+--------+\n\
    \                    +----                ----+\n                    |I will see\
    \ you at lunch.|\n                    +----                ----+\n           Message\
    \ containing four fields, Posted-Date, From, Text, and\n      To.  It was sent\
    \ on July 4, 1980 at 6 p.m. eastern daylight time.\n      It  is  from  a person\
    \ named Smith.  The text of the message is a\n      question asking  the  recipient\
    \  \"Are  you  going  to  watch  the\n      fireworks?\".  The message is sent\
    \ to Jones:\n            Message   Length    Type    Field    Length\n       \
    \    +--------+--------+--------+--------+--------+\n           |01001101|  5\
    \   A |  0   1 |01001100|  1   9 |\n           +--------+--------+--------+--------+--------+\n\
    \                       FID      Date    Length   ASCII\n                    +--------+--------+--------+--------+\n\
    \                    |  0   2 |00101000|  1   6 |00000010|\n                 \
    \   +--------+--------+--------+--------+\n                      Length\n    \
    \                +--------+----            ----+\n                    |  1   4\
    \ |19800704-180000-0400|\n                    +--------+----            ----+\n\
    \                      Field    Length    FID     ASCII\n                    +--------+--------+--------+--------+\n\
    \                    |01001100|  0   8 |  0   1 |00000010|\n                 \
    \   +--------+--------+--------+--------+\n                      Length\n    \
    \                +--------+-- --+\n                    |  0   5 |Smith|\n    \
    \                +--------+-- --+\n                       Field   Length    FID\
    \     ASCII\n                    +--------+--------+--------+--------+\n     \
    \               |01001100|  2   8 |  0   4 |00000010|\n                    +--------+--------+--------+--------+\n\
    \                      Length\n                    +--------+\n              \
    \      |  2   5 |\n                    +--------+\n                    +---- \
    \                            ----+\n                    |Are you going to watch\
    \ the fireworks?|\n                    +----                             ----+\n\
    \                      Field    Length    FID     ASCII\n                    +--------+--------+--------+--------+\n\
    \                    |01001100|  0   8 |  0   5 |00000010|\n                 \
    \   +--------+--------+--------+--------+\n                      Length\n    \
    \                +--------+-- --+\n                    |  0   5 |Jones|\n    \
    \                +--------+-- --+\n      H.3  Data Elements that Extend this Specification\n\
    \           This  section  contains  examples  of  data elements used to\n   \
    \   extend this specification.  These data  elements  can  be  either\n      primitives\
    \ or constructors, depending on the extension.\n           Extension  data  element\
    \  containing  a  length  code  and 3\n      octets.  The octet immediately following\
    \ the  length  code  iden-\n      tifies it as Extension Data Element 7.  The\
    \ Data Element Contents\n      is  the final two octets.  The interpretation of\
    \ the Data Element\n      Contents would be defined in an extension or  successor\
    \  to  this\n      message  format  specification.    [Note: this is an example.\
    \ Any\n      actual extension data element 7 (if it were ever used)  would  be\n\
    \      completely different from anything done here.]:\n           Extension \
    \ Length\n           +--------+--------+--------+--------+--------+\n        \
    \   |01111110|  0   3 |  0   7 |  4   A    E   9 |\n           +--------+--------+--------+--------+--------+\n\
    \           Vendor-Defined  data  element containing a length code and 3\n   \
    \   octets.  The first octet identifies this as  vendor-defined  data\n      element\
    \  number  114  (decimal), which this particular vendor has\n      defined to\
    \  contain  three  printable  ASCII  characters  in  two\n      octets.    (Data\
    \  element 114 (decimal) for another user would be\n      completely different.\
    \  For example, it might contain  a  floating\n      point number.):\n       \
    \       User    Length\n           +--------+--------+--------+--------+--------+\n\
    \           |01111111|  0   3 |  7   2 |   P    O    E   |\n           +--------+--------+--------+--------+--------+\n\
    \      H.4  Fields\n           This  section  contains  examples of Field data\
    \ element con-\n      structors for each of several different fields  (Keywords,\
    \  Text,\n      Subject, Vendor-Defined).\n           Field  data  element  for\
    \ keywords .  The field contains two\n      keywords, Message and Computer, each\
    \ represented  in  a  separate\n      ASCII-string data element.\n           \
    \   Field   Length  Keywords   ASCII   Length\n           +--------+--------+--------+--------+--------+\n\
    \           |01001100|  1   4 |  1   4 |00000010|  0   7 |\n           +--------+--------+--------+--------+--------+\n\
    \                    +--- ---+\n                    |Message|\n              \
    \      +--- ---+\n                      ASCII    Length\n                    +--------+--------+---\
    \  ---+\n                    |00000010|  0   8 |Computer|\n                  \
    \  +--------+--------+---  ---+\n           Field  data  element  for  Text  with\
    \  a  Property-List data\n      element containing a comment attached.  The text\
    \  field  contains\n      the ASCII-String data element \"Do you want lunch?\"\
    ; the Property-\n      List  data element contains a comment property, which consists\
    \ of\n      an ASCII-string data element containing \"Now?\":\n             Field\
    \    Length   Text    Prop-List  Length\n           +--------+--------+--------+--------+--------+\n\
    \           |11001100|  2   0 |  0   4 |00100100|  0   9 |\n           +--------+--------+--------+--------+--------+\n\
    \                     Property  Length    PID     ASCII\n                    +--------+--------+--------+--------+\n\
    \                    |01000101|  0   7 |  0   1 |00000010|\n                 \
    \   +--------+--------+--------+--------+\n                      Length\n    \
    \                +--------+-  -+\n                    |  0   4 |Now?|\n      \
    \              +--------+-  -+\n                      ASCII    Length\n      \
    \              +--------+--------+----          ----+\n                    |00000010|\
    \  1   2 |Do you want lunch?|\n                    +--------+--------+----   \
    \       ----+\n           Field data element for Subject  containing  an  ASCII-String\n\
    \      data  element  (\"Good  restaurants  in  Detroit\"  followed  by  a\n \
    \     carriage return and a line feed).  (A recipient would expect  the\n    \
    \  message  to  contain  some  information  about restaurants in the\n      Detroit\
    \ area.):\n             Field    Length   Subject   ASCII   Length\n         \
    \  +--------+--------+--------+--------+--------+\n           |01001100|  2  \
    \ 1 |  0   7 |00000010|  1   E |\n           +--------+--------+--------+--------+--------+\n\
    \                    +----                            ----+\n                \
    \    |Good restaurants in Detroit.<cr><lf>|\n                    +----       \
    \                     ----+\n           Field  data  element whose form and meaning\
    \ was defined by a\n      vendor.    This  vendor  has  defined  vendor-defined\
    \  field   12\n      (decimal)  to  be  a field with a printing name of \"Reply-by\"\
    \ and\n      contents consisting of a date; January  7,  1981  in  this  case.\n\
    \      (The  meaning of vendor-defined field 12 is unique to the vendor;\n   \
    \   the same field number would  have  different  meaning  for  other\n      vendors.):\n\
    \             Field    Length  Qualifier   User   number\n           +--------+--------+--------+--------+--------+\n\
    \           |11001100|  1   F |  8   2 |  0   0    0   C |\n           +--------+--------+--------+--------+--------+\n\
    \                     Prop-List Length  Property  Length\n                   \
    \ +--------+--------+--------+--------+\n                    |00100100|  0   E\
    \ |01000101|  0   C |\n                    +--------+--------+--------+--------+\n\
    \                        PID    ASCII    Length\n                    +--------+--------+--------+----\
    \ ----+\n                    |  0   2 |00000010|  0   9 |Reply-By:|\n        \
    \            +--------+--------+--------+---- ----+\n                       Date\
    \    Length   ASCII    Length\n                    +--------+--------+--------+--------+\n\
    \                    |00101000|  0   A |00000010|  0   8 |\n                 \
    \   +--------+--------+--------+--------+\n               +---  ---+\n       \
    \             |19810107|\n                    +---  ---+\n      H.5  Messages\n\
    \           This  section contains several examples of complete messages\n   \
    \   and shows the results of  reissuing  a  message.    (See  Section\n      3.2.2.)\n\
    \           The  following  sample message had Stevens as its originator\n   \
    \   and Johnson as its recipient.  The message was sent on August 14,\n      1980\
    \ at 10 a.m. EDT.  The subject  of  the  message  is  \"Project\n      Deadline\"\
    \  and the message is a reminder that the deadline is the\n      next day and\
    \ that the section of the report for the project being\n      done by Johnson\
    \ should be turned in to Stevens  by  3  p.m.  that\n      day.\n            Message\
    \       Length         Type\n           +--------+--------+--------+--------+\n\
    \           |01001101|  8   1 |  B   6 |  0   1 |\n           +--------+--------+--------+--------+\n\
    \              Field   Length    FID     ASCII\n           +--------+--------+--------+--------+\n\
    \           |01001100|  0   A |  0   5 |00000010|\n           +--------+--------+--------+--------+\n\
    \                      Length\n                    +--------+--- ---+\n      \
    \              |  0   7 |Johnson|\n                    +--------+--- ---+\n  \
    \           Field    Length    FID      ASCII\n           +--------+--------+--------+--------+\n\
    \           |01001100|  0   A |  0   1 |00000010|\n           +--------+--------+--------+--------+\n\
    \                      Length\n                    +--------+--- ---+\n      \
    \              |  0   7 |Stevens|\n                    +--------+--- ---+\n  \
    \           Field    Length    FID     ASCII    Length\n           +--------+--------+--------+--------+--------+\n\
    \           |01001100|  1   3 |  0   7 |00000010|  1   0 |\n           +--------+--------+--------+--------+--------+\n\
    \                    +----        ----+\n                    |Project Deadline|\n\
    \                    +----        ----+\n             Field    Length    FID \
    \     Date    Length\n           +--------+--------+--------+--------+--------+\n\
    \           |01001100|  1   7 |  0   2 |00101000|  1   4 |\n           +--------+--------+--------+--------+--------+\n\
    \                      ASCII    Length\n                    +--------+--------+----\
    \          ----+\n                    |00000010|  1   2 |19800814-1000-0400|\n\
    \                    +--------+--------+----          ----+\n             Field\
    \    Length    FID      ASCII   Length\n           +--------+--------+--------+--------+--------+\n\
    \           |01001100|  6   D |  0   4 |00000010|  6   A |\n           +--------+--------+--------+--------+--------+\n\
    \                    +----\n                    |Don't forget the project report\
    \ is\n                    +----\n                     due tomorrow.  Please have<CrLf>\n\
    \                     your section to me by three this\n                     \
    \      ----+\n                     afternoon.|\n                           ----+\n\
    \           The  following  example illustrates the results of reissuing\n   \
    \   the first message in this section.   This  message  contains  the\n      original\
    \  message  (as  a  Message  data  element), To, From, and\n      Posted-Date\
    \ fields, and a Reissue-Type field  with  Redistributed\n      as its value:\n\
    \            Message       Length         Type\n           +--------+--------+--------+--------+\n\
    \           |01001101|  8   1 |  F   C |  0   1 |\n           +--------+--------+--------+--------+\n\
    \              Field   Length    FID      ASCII\n           +--------+--------+--------+--------+\n\
    \           |01001100|  0   9 |  0   5 |00000010|\n           +--------+--------+--------+--------+\n\
    \                      Length\n                    +--------+--  --+\n       \
    \             |  0   6 |Cooper|\n                    +--------+--  --+\n     \
    \        Field    Length    FID      ASCII\n           +--------+--------+--------+--------+\n\
    \           |01001100|  0   A |  0   1 |00000010|\n           +--------+--------+--------+--------+\n\
    \                      Length\n                    +--------+--- ---+\n      \
    \              |  0   7 |Johnson|\n                    +--------+--- ---+\n  \
    \           Field    Length    FID      Date    Length\n           +--------+--------+--------+--------+--------+\n\
    \           |01001100|  1   7 |  0   2 |00101000|  1   4 |\n           +--------+--------+--------+--------+--------+\n\
    \                       ASCII   Length\n                    +--------+--------+----\
    \          ----+\n                    |00000010|  1   2 |19800814-1030-0400|\n\
    \                    +--------+--------+----          ----+\n             Field\
    \    Length    FID      ASCII   Length\n           +--------+--------+--------+--------+--------+\n\
    \           |01001100|  1   0 |  2   5 |00000010|  0   D |\n           +--------+--------+--------+--------+--------+\n\
    \                    +----     ----+\n                    |Redistributed|\n  \
    \                  +----     ----+\n            Message       Length         Type\n\
    \           +--------+--------+--------+--------+\n           |01001101|  8  \
    \ 1 |  B   6 |  0   1 |\n           +--------+--------+--------+--------+\n  \
    \            Field   Length    FID      ASCII\n           +--------+--------+--------+--------+\n\
    \           |01001100|  0   A |  0   5 |00000010|\n           +--------+--------+--------+--------+\n\
    \                      Length\n                    +--------+--- ---+\n      \
    \              |  0   7 |Johnson|\n                    +--------+--- ---+\n  \
    \           Field    Length    FID      ASCII\n           +--------+--------+--------+--------+\n\
    \           |01001100|  0   A |  0   1 |00000010|\n           +--------+--------+--------+--------+\n\
    \                      Length\n                    +--------+--- ---+\n      \
    \              |  0   7 |Stevens|\n                    +--------+--- ---+\n  \
    \           Field    Length    FID     ASCII    Length\n           +--------+--------+--------+--------+--------+\n\
    \           |01001100|  1   3 |  0   7 |00000010|  1   0 |\n           +--------+--------+--------+--------+--------+\n\
    \                    +----        ----+\n                    |Project Deadline|\n\
    \                    +----        ----+\n             Field    Length    FID \
    \     Date    Length\n           +--------+--------+--------+--------+--------+\n\
    \           |01001100|  1   7 |  0   2 |00101000|  1   4 |\n           +--------+--------+--------+--------+--------+\n\
    \                      ASCII    Length\n                    +--------+--------+----\
    \          ----+\n                    |00000010|  1   2 |19800814-1000-0400|\n\
    \                    +--------+--------+----          ----+\n             Field\
    \    Length    FID      ASCII   Length\n           +--------+--------+--------+--------+--------+\n\
    \           |01001100|  6   D |  0   4 |00000010|  6   A |\n           +--------+--------+--------+--------+--------+\n\
    \                    +----\n                    |Don't forget the project report\
    \ is\n                    +----\n                     due tomorrow.  Please have<CrLf>\n\
    \                     your section to me by three this\n                     \
    \      ----+\n                     afternoon.|\n                           ----+\n\
    \      H.6  Unknown Lengths\n           This  section contains two examples of\
    \ data elements with an\n      unknown length.  The two examples have been presented\
    \ in sections\n      H.2 and H.5, but with a known rather than an unknown length.\n\
    \           Set  data  element  with  an  unknown  length containing two\n   \
    \   Integer data elements.  The first integer  has  a  value  of  519\n      (decimal)\
    \  while the value of the second is 71 (decimal).  (These\n      two values have\
    \ no ordering because they belong to a set.)\n              Set     Length   Integer\
    \  Length\n           +--------+--------+--------+--------+--------+--------+\n\
    \           |00001011|  8   0 |00100000|  0   2 |  0   2    0   7 |\n        \
    \   +--------+--------+--------+--------+--------+--------+\n                \
    \      Integer  Length\n                    +--------+--------+--------+--------+\n\
    \                    |00100000|  0   2 |  0   0    4   7 |\n                 \
    \   +--------+--------+--------+--------+\n                    End-of-Con Length\n\
    \                    +--------+--------+\n                    |00000000|00000000|\n\
    \                    +--------+--------+\n           The following sample message\
    \  with  an  unknown  length  had\n      Stevens  as  its  originator  and  Johnson\
    \ as its recipient.  The\n      message was sent on August 14, 1980 at 10 a.m.\
    \ EDT.  The  subject\n      of  the  message  is  \"Project  Deadline\"  and \
    \ the  message is a\n      reminder that the deadline is the next day and that\
    \  the  section\n      of  the  report  for  the project being done by Johnson\
    \ should be\n      turned in to Stevens by 3 p.m. that day.\n            Message\
    \   Length    Type\n           +--------+--------+--------+\n           |01001101|\
    \  8   0 |  0   1 |\n           +--------+--------+--------+\n              Field\
    \   Length    FID     ASCII\n           +--------+--------+--------+--------+\n\
    \           |01001100|  0   A |  0   5 |00000010|\n           +--------+--------+--------+--------+\n\
    \                      Length\n                    +--------+--- ---+\n      \
    \              |  0   7 |Johnson|\n                    +--------+--- ---+\n  \
    \           Field    Length    FID      ASCII\n           +--------+--------+--------+--------+\n\
    \           |01001100|  0   A |  0   1 |00000010|\n           +--------+--------+--------+--------+\n\
    \                      Length\n                    +--------+--- ---+\n      \
    \              |  0   7 |Stevens|\n                    +--------+--- ---+\n  \
    \           Field    Length    FID     ASCII    Length\n           +--------+--------+--------+--------+--------+\n\
    \           |01001100|  1   3 |  0   7 |00000010|  1   0 |\n           +--------+--------+--------+--------+--------+\n\
    \                    +----        ----+\n                    |Project Deadline|\n\
    \                    +----        ----+\n             Field    Length    FID \
    \     Date    Length\n           +--------+--------+--------+--------+--------+\n\
    \           |01001100|  1   7 |  0   2 |00101000|  1   4 |\n           +--------+--------+--------+--------+--------+\n\
    \                      ASCII    Length\n                    +--------+--------+----\
    \          ----+\n                    |00000010|  1   2 |19800814-1000-0400|\n\
    \                    +--------+--------+----          ----+\n             Field\
    \    Length    FID      ASCII   Length\n           +--------+--------+--------+--------+--------+\n\
    \           |01001100|  6   D |  0   4 |00000010|  6   A |\n           +--------+--------+--------+--------+--------+\n\
    \                    +----\n                    |Don't forget the project report\
    \ is\n                    +----\n                     due tomorrow.  Please have<CrLf>\n\
    \                     your section to me by three this\n                     \
    \      ----+\n                     afternoon.|\n                           ----+\n\
    \                    End-of-Con Length\n                    +--------+--------+\n\
    \                    |00000000|00000000|\n                    +--------+--------+\n\
    \      H.7  Message Encoding Using Vendor-Defined Fields\n           This  example\
    \ is provided to illustrate the encoding of non-\n      FIPS format messages in\
    \ the FIPS format.  It is the intent of the\n      standard to deal with computer\
    \ based message  systems  which  are\n      primarily  intended for person-to-person\
    \ use.  This example deals\n      with the definition and use of vendor-defined\
    \  fields  to  extend\n      the  use  of  the  standard to station-to-station\
    \ messaging.  The\n      context is a military message using the military standard\
    \  JANAP-\n      128 format.\n      H.7.1  Example of a JANAP-128 Message\n  \
    \        JANAP-128\n          RTTUZYUW RUABCDE0010 0330930-UUUU--RUXABYE.\n  \
    \        ZNR UUUUU\n          R 020830Z FEB 82\n          FM Commander,Atlantic\
    \ Fleet\n          TO USS SHIPA\n          BT\n          UNCLAS\n           MESSAGE\
    \        BODY\n          BT\n          #0010\n          NNNN\n      H.7.2  Encoding\
    \ of Example using the FIPS Message Format\n            Message   Length     \
    \        Type\n           +--------+--------+--------+--------+\n           |01001101|\
    \  8   1 |  D   0 |  0   1 |\n           +--------+--------+--------+--------+\n\
    \                      Field    Length    FID\n                    +--------+--------+--------+\n\
    \                    |01001100|  0   4 |  1   8 |\n                    +--------+--------+--------+\n\
    \                               ASCII    Length\n                            \
    \ +--------+--------+--------+\n                             |00000010|  0   1\
    \ |    R   |\n                             +--------+--------+--------+\n    \
    \                  Field    Length    FID\n                    +--------+--------+--------+--------+--------+\n\
    \                    |01001100|  0   7 |  8   2 |  0   0 |  0   1 |\n        \
    \            +--------+--------+--------+--------+--------+\n                \
    \               ASCII    Length\n                             +--------+--------+--------+--------+\n\
    \                             |00000010|  0   2 |    T   |    T   |\n        \
    \                     +--------+--------+--------+--------+\n                \
    \      Field    Length    FID\n                    +--------+--------+--------+--------+--------+\n\
    \                    |01001100|  0   6 |  8   2 |  0   0 |  0   2 |\n        \
    \            +--------+--------+--------+--------+--------+\n                \
    \               ASCII    Length\n                             +--------+--------+--------+\n\
    \                             |00000010|  0   1 |    U   |\n                 \
    \            +--------+--------+--------+\n                      Field    Length\
    \    FID\n                    +--------+--------+--------+--------+--------+\n\
    \                    |01001100|  0   9 |  8   2 |  0   0 |  0   3 |\n        \
    \            +--------+--------+--------+--------+--------+\n                \
    \               ASCII    Length\n                             +--------+--------+----\
    \  ----+\n                             |00000010|  0   4 |   ZYUW   |\n      \
    \                       +--------+--------+----  ----+\n                     \
    \ Field    Length    FID\n                    +--------+--------+--------+\n \
    \                   |01001100|  0   A |  2   2 |\n                    +--------+--------+--------+\n\
    \                               ASCII    Length\n                            \
    \ +--------+--------+----   ----+\n                             |00000010|  0\
    \   7 |  RUABCDE  |\n                             +--------+--------+----   ----+\n\
    \                      Field    Length    FID\n                    +--------+--------+--------+\n\
    \                    |01001100|  0   7 |  1   7 |\n                    +--------+--------+--------+\n\
    \                               ASCII    Length\n                            \
    \ +--------+--------+----  ----+\n                             |00000010|  0 \
    \  4 |   0010   |\n                             +--------+--------+----  ----+\n\
    \                      Field    Length    FID      Date    Length\n          \
    \          +--------+--------+--------+--------+--------+\n                  \
    \  |01001100|  1   8 |  0   2 |00101000|  1   5 |\n                    +--------+--------+--------+--------+--------+\n\
    \                               ASCII    Length\n                            \
    \ +--------+--------+----           ----+\n                             |00000010|\
    \  1   3 |19820202093000-0000|\n                             +--------+--------+----\
    \           ----+\n                      Field    Length    FID\n            \
    \        +--------+--------+--------+--------+--------+\n                    |01001100|\
    \  0   9 |  8   2 |  0   0 |  0   2 |\n                    +--------+--------+--------+--------+--------+\n\
    \                               ASCII    Length\n                            \
    \ +--------+--------+----  ----+\n                             |00000010|  0 \
    \  4 |   UUUU   |\n                             +--------+--------+----  ----+\n\
    \                      Field    Length    FID\n                    +--------+--------+--------+--------+--------+\n\
    \                    |01001100|  0   C |  8   2 |  0   0 |  0   4 |\n        \
    \            +--------+--------+--------+--------+--------+\n                \
    \               ASCII    Length\n                             +--------+--------+----\
    \  ----+\n                             |00000010|  0   7 |  RUXABYE |\n      \
    \                       +--------+--------+----  ----+\n                     \
    \ Field    Length    FID\n                    +--------+--------+--------+--------+--------+\n\
    \                    |01001100|  0   A |  8   2 |  0   0 |  0   2 |\n        \
    \            +--------+--------+--------+--------+--------+\n                \
    \               ASCII    Length\n                             +--------+--------+----\
    \   ----+\n                             |00000010|  0   5 |   UUUUU   |\n    \
    \                         +--------+--------+----   ----+\n                  \
    \    Field    Length    FID\n                    +--------+--------+--------+\n\
    \                    |01001100|  0   4 |  1   8 |\n                    +--------+--------+--------+\n\
    \                               ASCII    Length\n                            \
    \ +--------+--------+--------+\n                             |00000010|  0   1\
    \ |    R   |\n                             +--------+--------+--------+\n    \
    \                  Field    Length    FID      Date    Length\n              \
    \      +--------+--------+--------+--------+--------+\n                    |01001100|\
    \  1   4 |  1   1 |00101000|  1   1 |\n                    +--------+--------+--------+--------+--------+\n\
    \                               ASCII    Length\n                            \
    \ +--------+--------+----       ----+\n                             |00000010|\
    \  0   F |8202020830-0000|\n                             +--------+--------+----\
    \       ----+\n                      Field    Length    FID\n                \
    \    +--------+--------+--------+\n                    |01001100|  1   B |  0\
    \   1 |\n                    +--------+--------+--------+\n                  \
    \             ASCII    Length\n                             +--------+--------+\n\
    \                             |00000010|  1   8 |\n                          \
    \   +--------+--------+\n                                      +----         \
    \       ----+\n                                      |Commander,Atlantic Fleet|\n\
    \                                      +----                ----+\n          \
    \            Field    Length    FID\n                    +--------+--------+--------+\n\
    \                    |01001100|  0   C |  0   5 |\n                    +--------+--------+--------+\n\
    \                               ASCII    Length\n                            \
    \ +--------+--------+----   ----+\n                             |00000010|  0\
    \   9 | USS SHIPA |\n                             +--------+--------+----   ----+\n\
    \                      Field    Length    FID\n                    +--------+--------+--------+\n\
    \                    |01001100|  0   7 |  0   4 |\n                    +--------+--------+--------+\n\
    \                               ASCII    Length\n                            \
    \ +--------+--------+----  ----+\n                             |00000010|  0 \
    \  4 |   BODY   |\n                             +--------+--------+----  ----+\n\
    \                      Field    Length    FID\n                    +--------+--------+--------+\n\
    \                    |01001100|  0   7 |  1   7 |\n                    +--------+--------+--------+\n\
    \                               ASCII    Length\n                            \
    \ +--------+--------+----  ----+\n                             |00000010|  0 \
    \  4 |   0010   |\n                             +--------+--------+----  ----+\n\
    \      H.7.3  Field Mappings of JANAP-128 to FIPS Format\n          JANAP-128\
    \ Field              FIPS Format Field\n          Precedence                 \
    \  Precedence (Appendix A)\n          Language Media Format        Vendor-Defined\n\
    \          Security                     Vendor-Defined\n          Content Indicator\
    \ Code       Vendor-Defined\n          Origination Station          Sender (Appendix\
    \ A)\n            Routing Indication\n          Station Serial Number        Originator-Serial-Number\n\
    \                                         (Appendix A)\n          Time of File\
    \                 Posted-Date (Appendix A)\n          Security               \
    \      Vendor-Defined\n          Destination Station          Vendor-Defined\n\
    \            Routing Indicator\n          Security                     Vendor-Defined\n\
    \          Precedence                   Precedence (Appendix A)\n          Date/Time\
    \ Group              Date (Appendix A)\n          FM                         \
    \  From (Appendix A)\n          TO                           To (Appendix A)\n\
    \          Body of Message              Text (Appendix A)\n          Station Serial\
    \ Number        Originator-Serial-Number\n                                   \
    \      (Appendix A)\n      H.7.4  Vendor-Defined Fields\n      -----------------------------------------------------------------\n\
    \           Field Name                                Identifier Value  \n   \
    \                                                                  8\n       \
    \                          Description\n      -----------------------------------------------------------------\n\
    \           Language Media Format                                    01 \n   \
    \                                                                   8\n      \
    \     This   field   contains  two  ASCII  characters;  the  first\n      indicates\
    \ the input media and the second the output media.\n           Security      \
    \                                           02 \n                            \
    \                                          8\n           This  field  contains\
    \  a  variable  length  ASCII  character\n      indicator of the security classification\
    \ of the messages.\n           Content Indicator Code                        \
    \           03 \n                                                            \
    \          8\n           This  field  contains  four  ASCII  characters  and provides\n\
    \      information describing the message content and  message  handling\n   \
    \   actions to be performed.\n           Destination Station Routing Indicator\
    \                    04 \n                                                   \
    \                   8\n           This field contains four ASCII characters indicating\
    \ the CPU\n      and terminal device to which the message should be sent.\n  \
    \                               REFERENCES\n      [BlaR-80]\n           R. P.\
    \ Blanc and J. F. Heafner. The NBS Program in Computer\n           Network Protocol\
    \ Standards. In Proceedings, ICCC 80.  1980.\n      [CCIT-82]\n           CCITT\
    \ Study Group VII/5. Draft recommendation X.MHS1:\n           Message Handling\
    \ Systems: System Model - Service Elements\n           (Version 2). Technical\
    \ Report, International Telegraph and\n           Telephone Consultative Committee\
    \ (CCITT), December, 1982.\n      [CroD-77]\n           David H. Crocker, John\
    \ J. Vittal, Kenneth T. Pogran,\n           D. Austin Henderson, Jr. Standard\
    \ for the Format of ARPA\n           Network Text Messages. RFC 733, The Rand\
    \ Corporation, Bolt\n           Beranek and Newman Inc, Massachussets Institute\
    \ of\n           Technology, Bolt Beranek and Newman Inc., November, 1977.\n \
    \     [FeiE-79]\n           E. Feinler, J. Pickens, and A. Sjoberg. Computer Message\n\
    \           Services Bibliography. Technical Report NIC-BIBLIO-791201,\n     \
    \      SRI International, December, 1979.\n      [ISOD-79]\n           ISO/TC97/SC6\
    \ Data Communications. Second Draft Proposed\n           Communication Heading\
    \ Format Standard. ISO/TC97/SC6 N 1948,\n           ISO International Organization\
    \ for Standardization\n           Organization Internationale de Normalisation,\
    \ September,\n           1979. Secretariat: USA (ANSI).\n      [ISOD-82]\n   \
    \        ISO/TC97/SC16. Information Processing Systems - Open Systems\n      \
    \     Interconnection - Basic Reference Model. ISO/DIS 7498, ISO\n           International\
    \ Organization for Standardization Organization\n           Internationale de\
    \ Normalisation, December, 1982.\n      [NatB-68]\n           National Bureau\
    \ of Standards. Calendar Date. Federal\n           Information Processing Standards\
    \ Publication 4, U.S.\n           Department of Commerce / National Bureau of\
    \ Standards,\n           November, 1968.\n      [NatB-75]\n           National\
    \ Bureau of Standards. Code Extension Techniques in 7\n           or 8 Bits. Federal\
    \ Information Processing Standards\n           Publication 35, U.S. Department\
    \ of Commerce / National\n           Bureau of Standards, June, 1975.\n      [NatB-77]\n\
    \           National Bureau of Standards. Data Encryption Standard.\n        \
    \   Federal Information Processing Standards Publication 46,\n           U.S.\
    \ Department of Commerce / National Bureau of Standards,\n           January,\
    \ 1977.\n      [NatB-79a]\n           National Bureau of Standards. Representations\
    \ of Local Time\n           of the Day for Information Interchange. Federal Information\n\
    \           Processing Standards Publication 58, U.S. Department of\n        \
    \   Commerce / National Bureau of Standards, February, 1979.\n      [NatB-79b]\n\
    \           National Bureau of Standards. Representations of Universal\n     \
    \      Time, Local Time Differentials, and United States Time Zone\n         \
    \  References for Information Interchange. Federal Information\n           Processing\
    \ Standards Publication 59, U.S. Department of\n           Commerce / National\
    \ Bureau of Standards, February, 1979.\n      [NatB-80]\n           National Bureau\
    \ of Standards. Code for Information\n           Interchange. Federal Information\
    \ Processing Standards\n           Publication 1-1, U.S. Department of Commerce\
    \ / National\n           Bureau of Standards, December, 1980.\n      [PosJ-79]\n\
    \           Jonathan B. Postel. INTERNET MESSAGE PROTOCOL. RFC 753,\n        \
    \   Information Sciences Institute, March, 1979.\n      [TasG-80]\n          \
    \ Task Group X3S33 on Data Communications Formats, ANSI\n           Subcommittee\
    \ X3S3 on Data Communications. Third Draft\n           Proposed American National\
    \ Standard for Heading Format\n           Structure for Code Independent Communication\
    \ Headings. ANSI\n           document X3S37/80-01, Computer and Business Equipment\n\
    \           Manufacturers Association, 1980.\n                               \
    \     INDEX\n                ASCII-String   35, 36, 47, 50, 52, 54, 58, 59, 60,\
    \ 61,\n                        63, 65, 69\n                Assignment   22, 28,\
    \ 61\n                Attachments   23, 57\n                Author   19, 57\n\
    \                BASIC   18\n                BASIC Data Elements\n           \
    \        ASCII-String   47, 63\n                   Date   50, 65\n           \
    \        End-of-Constructor   48, 66\n                   Field   50, 66\n    \
    \               Message   51, 67\n                BASIC fields\n             \
    \      Cc   20\n                   Reply-To   19\n                   Subject \
    \  23\n                   Text   23\n                BASIC syntactic elements\
    \   35\n                Bcc   19, 25, 57\n                Bit numbering in octets\
    \   37\n                Bit-String   36, 42, 47, 49, 50, 52, 64, 65, 69\n    \
    \            Boolean   36, 48, 64\n                Cc   20, 58\n             \
    \   Chains of correspondence   29\n                Circulate-Next   20, 31, 58\n\
    \                Circulate-To   20, 31, 58\n                Circulation   31\n\
    \                Comment   36, 37, 44, 54\n                Comments   23, 58\n\
    \                Compliance requirements   41\n                Compressed   37,\
    \ 43, 49, 54, 65\n                Compression identifier   49, 65\n          \
    \      Compression Identifiers\n                   Unspecified   54\n        \
    \        Constructor data element   35, 36\n                Contents   38, 76\n\
    \                Cross Referencing   29\n                Data Element Contents\
    \   43, 44, 87, 42, 44, 52, 69, 42,\n                        44, 46, 47, 51, 64,\
    \ 69, 87\n                Data Elements\n                   ASCII-String (BASIC)\
    \   47, 63\n                   Bit-String (OPTIONAL)   47, 64\n              \
    \     Boolean (OPTIONAL)   48, 64\n                   Compressed (OPTIONAL)  \
    \ 49, 65\n                   Date (BASIC)   50, 65\n                   Encrypted\
    \ (OPTIONAL)   50, 65\n                   End-of-Constructor (BASIC)   48, 66\n\
    \                   Extension (OPTIONAL)   52, 66\n                   Field (BASIC)\
    \   50, 66\n                   Integer (OPTIONAL)   48, 67\n                 \
    \  Message (BASIC)   51, 67\n                   No-Op (OPTIONAL)   49, 67\n  \
    \                 Padding (OPTIONAL)   49, 68\n                   Property (OPTIONAL)\
    \   51, 68\n                   Property-List (OPTIONAL)   51, 68\n           \
    \        Sequence (OPTIONAL)   51, 69\n                   Set (OPTIONAL)   52,\
    \ 69\n                   Unique-ID (OPTIONAL)   52, 69\n                   Vendor-Defined\
    \ (OPTIONAL)   53, 70\n                Date   20, 50, 58, 60, 61, 62, 65\n   \
    \             Dating   30\n                Delivery   13, 20, 60\n           \
    \     Delivery Protocol   13\n                Delivery Slot   13\n           \
    \     Encapsulating   26\n                Encrypted   37, 43, 50, 54, 65\n   \
    \             Encryption identifier   50, 65\n                Encryption Identifiers\n\
    \                   FIPS-Standard   54\n                   Unspecified   54\n\
    \                End-Date   20, 21, 30, 58, 62\n                End-Of-Constructor\
    \   36, 42, 44, 48, 66\n                Extension   35, 46, 52, 66\n         \
    \       Field   14, 31, 35, 36, 37, 43, 50, 51, 66, 67, 72\n                Field\
    \ Identifier   50, 66\n                Field label presentation   35\n       \
    \         Fields\n                   Attachments (OPTIONAL)   57, 23\n       \
    \            Author (OPTIONAL)   57, 19\n                   Bcc (OPTIONAL)   57,\
    \ 19\n                   Cc (BASIC)   58, 20\n                   Circulate-Next\
    \ (OPTIONAL)   58, 20\n                   Circulate-To (OPTIONAL)   58, 20\n \
    \                  Comments (OPTIONAL)   58, 23\n                   Date (OPTIONAL)\
    \   58, 20\n                   End-Date (OPTIONAL)   58, 20\n                \
    \   From (REQUIRED)   59, 19\n                   In-Reply-To (OPTIONAL)   59,\
    \ 21\n                   Keywords (OPTIONAL)   59, 23\n                   Message-Class\
    \ (OPTIONAL)   59, 22\n                   Message-ID (OPTIONAL)   59, 21\n   \
    \                Obsoletes (OPTIONAL)   59, 21\n                   Originator-Serial-Number\
    \ (OPTIONAL)   59, 21\n                   Posted-Date (REQUIRED)   60, 20\n  \
    \                 Precedence (OPTIONAL)   60, 22\n                   Received-Date\
    \ (OPTIONAL)   60, 20\n                   Received-From (OPTIONAL)   60, 22\n\
    \                   References (OPTIONAL)   60, 22\n                   Reissue-Type\
    \ (OPTIONAL)   61, 22\n                   Reply-To (BASIC)   61, 19\n        \
    \           Sender (OPTIONAL)   61, 19\n                   Start-Date (OPTIONAL)\
    \   61, 21\n                   Subject (BASIC)   61, 23\n                   Text\
    \ (BASIC)   61, 23\n                   To (REQUIRED)   61, 19\n              \
    \     Warning-Date (OPTIONAL)   62, 21\n                FIPS-Standard   54, 55\n\
    \                From   17, 19, 29, 57, 59, 61\n                Globally unique\
    \ identifiers   29\n                Identifier octet   38, 41, 37, 38, 42, 44,\
    \ 76\n                Identifiers\n                   globally unique   29\n \
    \               In-Reply-To   21, 29, 59\n                Indefinite length code\
    \   41\n                Integer   36, 48, 52, 67, 69\n                Keywords\
    \   23, 59, 88\n                Length Code   40, 41, 42, 38, 39, 40, 41, 42,\
    \ 44, 46,\n                        76, 77, 87\n                Long length code\
    \   41\n                Message Transfer System   13, 22, 60\n               \
    \ Message   14, 17, 35, 36, 37, 43, 51, 67\n                Message content  \
    \ 13\n                Message envelope   13\n                Message stores  \
    \ 30\n                Message Transfer System   13, 22, 60, 12, 13, 14, 17,\n\
    \                        20, 22, 60\n                Message Types\n         \
    \          FIPS-Standard   55\n                Message-Class   22, 59\n      \
    \          Message-ID   21, 22, 29, 31, 59, 60\n                No-Op   49, 67\n\
    \                Numbering bits in octets   37\n                Obsoletes   21,\
    \ 29, 59\n                Octets\n                   bit numbering in   37\n \
    \               OPTIONAL   18\n                OPTIONAL Data Elements\n      \
    \             Bit-String   47, 64\n                   Boolean   48, 64\n     \
    \              Compressed   49, 65\n                   Encrypted   50, 65\n  \
    \                 Extension   52, 66\n                   Integer   48, 67\n  \
    \                 No-Op   49, 67\n                   Padding   49, 68\n      \
    \             Property   51, 68\n                   Property-List   51, 68\n \
    \                  Sequence   51, 69\n                   Set   52, 69\n      \
    \             Unique-ID   52, 69\n                   Vendor-Defined   53, 70\n\
    \                OPTIONAL fields\n                   Attachments   23\n      \
    \             Author   19\n                   Bcc   19\n                   Circulate-Next\
    \   20\n                   Circulate-To   20\n                   Comments   23\n\
    \                   Date   20\n                   End-Date   20\n            \
    \       In-Reply-To   21\n                   Keywords   23\n                 \
    \  Message-Class   22\n                   Message-ID   21\n                  \
    \ Obsoletes   21\n                   Originator-Serial-Number   21\n         \
    \          Precedence   22\n                   Received-Date   20\n          \
    \         Received-From   22\n                   References   22\n           \
    \        Reissue-Type   22\n                   Sender   19\n                 \
    \  Start-Date   21\n                   Warning-Date   21\n                OPTIONAL\
    \ syntactic elements   35\n                Originator   15, 18, 20, 30, 57, 58,\
    \ 59, 61\n                Originator-Serial-Number   21, 30, 59\n            \
    \    Padding   49, 68\n                Person   18\n                Posted-Date\
    \   17, 20, 31, 58, 60\n                Posting   13\n                Posting\
    \ Protocol   13\n                Posting Slot   13\n                Precedence\
    \   22, 60\n                Precedence categories   22\n                Precedence\
    \ scheme   60\n                Presentation\n                   field label  \
    \ 35\n                Primitive data element   36, 35, 36\n                Printing-Name\
    \   36, 37, 44, 54, 82\n                Process   18\n                Properties\n\
    \                   Comment   54\n                   Printing-Name   54\n    \
    \            Property   38, 43, 51, 68\n                Property-Identifier  \
    \ 51, 68\n                Property-List   36, 38, 44, 46, 51, 68, 76\n       \
    \         Qualifier   38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50,\n          \
    \              51, 52, 53, 64, 65, 66, 68, 70, 76\n                Qualifiers\
    \   43\n                Received-Date   20, 60\n                Received-From\
    \   22, 60\n                Recipient   15, 19, 20, 22, 57, 58, 60, 61\n     \
    \           Redistribution   22, 26, 61\n                References   22, 29,\
    \ 60\n                Reissue-Type   22, 61\n                Reply   18, 28\n\
    \                Reply-to   19, 28, 59, 61\n                REQUIRED   18\n  \
    \              REQUIRED fields\n                   From   19\n               \
    \    Posted-Date   20\n                   To   19\n                Requirements\n\
    \                   compliance   41\n                Role   18\n             \
    \   Sender   19, 31, 61\n                Sequence   35, 36, 51, 69\n         \
    \       Sequences   36\n                Serial Numbers   21, 30, 59\n        \
    \        Set   36, 51, 52, 69\n                Short length code   41\n      \
    \          Slot   13\n                Start-Date   21, 30, 61\n              \
    \  Subject   23, 61\n                Syntactic reissuing   26\n              \
    \  Text   23, 32, 61\n                To   17, 19, 31, 37, 61\n              \
    \  Unique identifiers   29\n                Unique-ID   52, 59, 60, 69\n     \
    \           Unspecified   54\n                User Agent   12, 13, 14\n      \
    \          User interface   35\n                Vendor-Defined   35, 46, 53, 70\n\
    \                Warning-Date   21, 30, 62\n"
