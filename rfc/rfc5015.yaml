- contents:
  - '        Bidirectional Protocol Independent Multicast (BIDIR-PIM)

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Abstract\n   This document discusses Bidirectional PIM (BIDIR-PIM), a variant
    of\n   PIM Sparse-Mode that builds bidirectional shared trees connecting\n   multicast
    sources and receivers.  Bidirectional trees are built using\n   a fail-safe Designated
    Forwarder (DF) election mechanism operating on\n   each link of a multicast topology.
    \ With the assistance of the DF,\n   multicast data is natively forwarded from
    sources to the Rendezvous-\n   Point (RP) and hence along the shared tree to receivers
    without\n   requiring source-specific state.  The DF election takes place at RP\n
    \  discovery time and provides the route to the RP, thus eliminating the\n   requirement
    for data-driven protocol events.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Terminology .....................................................4\n      2.1.
    Definitions ................................................4\n      2.2. Pseudocode
    Notation ........................................6\n   3. Protocol Specification
    ..........................................6\n      3.1. BIDIR-PIM Protocol State
    ...................................7\n           3.1.1. General Purpose State
    ...............................8\n           3.1.2. RPA State ...........................................8\n
    \          3.1.3. Group State .........................................9\n           3.1.4.
    State Summarization Macros .........................10\n      3.2. PIM Neighbor
    Discovery ....................................11\n      3.3. Data Packet Forwarding
    Rules ..............................11\n           3.3.1. Upstream Forwarding
    at RP ..........................12\n           3.3.2. Source-Only Branches ...............................12\n
    \          3.3.3. Directly Connected Sources .........................13\n      3.4.
    PIM Join/Prune Messages ...................................13\n           3.4.1.
    Receiving (*,G) Join/Prune Messages ................13\n           3.4.2. Sending
    Join/Prune Messages ........................16\n      3.5. Designated Forwarder
    (DF) Election ........................18\n           3.5.1. DF Requirements ....................................18\n
    \          3.5.2. DF Election Description ............................19\n                  3.5.2.1.
    Bootstrap Election ........................20\n                  3.5.2.2. Loser
    Metric Changes ......................20\n                  3.5.2.3. Winner Metric
    Changes .....................21\n                  3.5.2.4. Winner Loses Path
    .........................22\n                  3.5.2.5. Late Router Starting Up
    ...................22\n                  3.5.2.6. Winner Dies ...............................22\n
    \          3.5.3. Election Protocol Specification ....................22\n                  3.5.3.1.
    Election State ............................22\n                  3.5.3.2. Election
    Messages .........................23\n                  3.5.3.3. Election Events
    ...........................24\n                  3.5.3.4. Election Actions ..........................25\n
    \                 3.5.3.5. Election State Transitions ................26\n           3.5.4.
    Election Reliability Enhancements ..................30\n           3.5.5. Missing
    Pass .......................................30\n           3.5.6. Periodic Winner
    Announcement .......................30\n      3.6. Timers, Counters, and Constants
    ...........................31\n      3.7. BIDIR-PIM Packet Formats ..................................34\n
    \          3.7.1. DF Election Packet Formats .........................34\n           3.7.2.
    Backoff Message ....................................36\n           3.7.3. Pass
    Message .......................................36\n           3.7.4. Bidirectional
    Capable PIM-Hello Option .............37\n   4. RP Discovery ...................................................37\n
    \  5. Security Considerations ........................................38\n      5.1.
    Attacks Based on Forged Messages ..........................38\n           5.1.1.
    Election of an Incorrect DF ........................38\n           5.1.2. Preventing
    Election Convergence ....................39\n      5.2. Non-Cryptographic Authentication
    Mechanisms ...............39\n           5.2.1. Basic Access Control ...............................39\n
    \     5.3. Authentication Using IPsec ................................40\n      5.4.
    Denial-of-Service Attacks .................................40\n   6. IANA Considerations
    ............................................40\n   7. Acknowledgments ................................................40\n
    \  8. Normative References ...........................................40\n   9.
    Informative References .........................................41\n"
  title: Table of Contents
- contents:
  - "List of Figures\n   Figure 1. Downstream group per-interface state machine ............15\n
    \  Figure 2. Upstream group state machine ............................17\n   Figure
    3. Designated Forwarder election state machine .............27\n"
  title: List of Figures
- contents:
  - "1.  Introduction\n   This document specifies Bidirectional PIM (BIDIR-PIM), a
    variant of\n   PIM Sparse-Mode (PIM-SM) [4] that builds bidirectional shared trees\n
    \  connecting multicast sources and receivers.\n   PIM-SM constructs unidirectional
    shared trees that are used to\n   forward data from senders to receivers of a
    multicast group.  PIM-SM\n   also allows the construction of source-specific trees,
    but this\n   capability is not related to the protocol described in this document.\n
    \  The shared tree for each multicast group is rooted at a multicast\n   router
    called the Rendezvous Point (RP).  Different multicast groups\n   can use separate
    RPs within a PIM domain.\n   In unidirectional PIM-SM, there are two possible
    methods for\n   distributing data packets on the shared tree.  These differ in
    the\n   way packets are forwarded from a source to the RP:\n   o Initially, when
    a source starts transmitting, its first hop router\n     encapsulates data packets
    in special control messages (Registers)\n     that are unicast to the RP.  After
    reaching the RP, the packets are\n     decapsulated and distributed on the shared
    tree.\n   o A transition from the above distribution mode can be made at a\n     later
    stage.  This is achieved by building source-specific state on\n     all routers
    along the path between the source and the RP.  This\n     state is then used to
    natively forward packets from that source.\n   Both of these mechanisms suffer
    from problems.  Encapsulation results\n   in significant processing, bandwidth,
    and delay overheads.\n   Forwarding using source-specific state has additional
    protocol and\n   memory requirements.\n   Bidirectional PIM dispenses with both
    encapsulation and source state\n   by allowing packets to be natively forwarded
    from a source to the RP\n   using shared tree state.  In contrast to PIM-SM, this
    mode of\n   forwarding does not require any data-driven events.\n   The protocol
    specification in this document assumes familiarity with\n   the PIM-SM specification
    in [4].  Portions of the BIDIR-PIM protocol\n   operation that are identical to
    that of PIM-SM are only defined by\n   reference.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   In this document, the key words \"MUST\", \"MUST NOT\", \"REQUIRED\",\n
    \  \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",\n
    \  and \"OPTIONAL\" are to be interpreted as described in RFC 2119 [1] and\n   indicate
    requirement levels for compliant BIDIR-PIM implementations.\n"
  - contents:
    - "2.1.  Definitions\n   This specification uses a number of terms to refer to
      the roles of\n   routers participating in BIDIR-PIM.  The following terms have
      special\n   significance for BIDIR-PIM:\n   Multicast Routing Information Base
      (MRIB)\n      The multicast topology table, which is typically derived from
      the\n      unicast routing table, or routing protocols such as Multiprotocol\n
      \     BGP (MBGP) [8] that carry multicast-specific topology information.\n      It
      is used by PIM for establishing the RPF interface (used in the\n      forwarding
      rules).  In PIM-SM, the MRIB is also used to make\n      decisions regarding
      where to forward Join/Prune messages, whereas\n      in BIDIR-PIM, it is used
      as a source for routing metrics for the\n      DF election process.\n   Rendezvous
      Point Address (RPA)\n      An RPA is an address that is used as the root of
      the distribution\n      tree for a range of multicast groups.  The RPA must
      be routable\n      from all routers in the PIM domain.  The RPA does not need
      to\n      correspond to an address for an interface of a real router.  In\n
      \     this respect, BIDIR-PIM differs from PIM-SM, which requires an\n      actual
      router to be configured as the Rendezvous Point (RP).  Join\n      messages
      from receivers for a BIDIR-PIM group propagate hop-by-hop\n      towards the
      RPA.\n   Rendezvous Point Link (RPL)\n      An RPL for a particular RPA is the
      physical link to which the RPA\n      belongs.  In BIDIR-PIM, all multicast
      traffic to groups mapping to\n      a specific RPA is forwarded on the RPL of
      that RPA.  The RPL is\n      special within a BIDIR-PIM domain as it is the
      only link on which\n      a Designated Forwarder election does not take place
      (see DF\n      definition below).\n   Upstream\n      Towards the root (RPA)
      of the tree.  The direction used by packets\n      traveling from sources to
      the RPL.\n   Downstream\n      Away from the root of the tree.  The direction
      on which packets\n      travel from the RPL to receivers.\n   Designated Forwarder
      (DF)\n      The protocol presented in this document is largely based on the\n
      \     concept of a Designated Forwarder (DF).  A single DF exists for\n      each
      RPA on every link within a BIDIR-PIM domain (this includes\n      both multi-access
      and point-to-point links).  The only exception\n      is the RPL on which no
      DF exists.  The DF is the router on the\n      link with the best route to the
      RPA (determined by comparing MRIB\n      provided metrics).  A DF for a given
      RPA is in charge of\n      forwarding downstream traffic onto its link, and
      forwarding\n      upstream traffic from its link towards the RPL.  It does this
      for\n      all the bidirectional groups that map to the RPA.  The DF on a\n
      \     link is also responsible for processing Join messages from\n      downstream
      routers on the link as well as ensuring that packets\n      are forwarded to
      local receivers (discovered through a local\n      membership mechanism such
      as MLD [3] or IGMP [2]).\n   RPF Interface\n      RPF stands for \"Reverse Path
      Forwarding\".  The RPF Interface of a\n      router with respect to an address
      is the interface that the MRIB\n      indicates should be used to reach that
      address.  In the case of a\n      BIDIR-PIM multicast group, the RPF interface
      is determined by\n      looking up the RPA in the MRIB.  The RPF information
      determines\n      the interface of the router that would be used to send packets\n
      \     towards the RPL for the group.\n   RPF Neighbor\n      The RPF Neighbor
      of a router with respect to an address is the\n      neighbor that the MRIB
      indicates should be used to reach that\n      address.  Note that in BIDIR-PIM,
      the RPF neighbor for a group is\n      not necessarily the router on the RPF
      interface that Join messages\n      for that group would be directed to (Join
      messages are only\n      directed to the DF on the RPF interface for the group).\n
      \  Tree Information Base (TIB)\n      This is the collection of state at a PIM
      router that has been\n      created by receiving PIM Join/Prune messages, PIM
      DF election\n      messages, and IGMP or MLD information from local hosts.  It\n
      \     essentially stores the state of all multicast distribution trees\n      at
      that router.\n   Multicast Forwarding Information Base (MFIB)\n      The TIB
      holds all the state that is necessary to forward multicast\n      packets at
      a router.  However, although this specification defines\n      forwarding in
      terms of the TIB, to actually forward packets using\n      the TIB is very inefficient.
      \ Instead, a real router\n      implementation will normally build an efficient
      MFIB from the TIB\n      state to perform forwarding.  How this is done is implementation-\n
      \     specific, and is not discussed in this document.\n"
    title: 2.1.  Definitions
  - contents:
    - "2.2.  Pseudocode Notation\n   We use set notation in several places in this
      specification.\n   A (+) B\n       is the union of two sets, A and B.\n   A
      (-) B is the elements of set A that are not in set B.\n   NULL\n       is the
      empty set or list.\n   In addition, we use C-like syntax:\n   =   denotes assignment
      of a variable.\n   ==  denotes a comparison for equality.\n   !=  denotes a
      comparison for inequality.\n   Braces { and } are used for grouping.\n"
    title: 2.2.  Pseudocode Notation
  title: 2.  Terminology
- contents:
  - "3.  Protocol Specification\n   The specification of BIDIR-PIM is broken into
    several parts:\n   o Section 3.1 details the protocol state stored.\n   o Section
    3.2 defines the BIDIR-PIM extensions to the PIM-SM [4]\n     neighbor discovery
    mechanism.\n   o Section 3.3 specifies the data packet forwarding rules.\n   o
    Section 3.4 specifies the BIDIR-PIM Join/Prune generation and\n     processing
    rules.\n   o Section 3.5 specifies the Designated Forwarder (DF) election.\n   o
    Section 3.7 specifies the PIM packet formats.\n   o Section 3.6 summarizes BIDIR-PIM
    timers and gives their default\n     values.\n"
  - contents:
    - "3.1.  BIDIR-PIM Protocol State\n   This section specifies all the protocol
      state that a BIDIR-PIM\n   implementation should maintain in order to function
      correctly.  We\n   term this state the Tree Information Base or TIB, as it holds
      the\n   state of all the multicast distribution trees at this router.  In\n
      \  this specification, we define PIM mechanisms in terms of the TIB.\n   However,
      only a very simple implementation would actually implement\n   packet forwarding
      operations in terms of this state.  Most\n   implementations will use this state
      to build a multicast forwarding\n   table, which would then be updated when
      the relevant state in the TIB\n   changes.\n   Although we specify precisely
      the state to be kept, this does not\n   mean that an implementation of BIDIR-PIM
      needs to hold the state in\n   this form.  This is actually an abstract state
      definition, which is\n   needed in order to specify the router's behavior.  A
      BIDIR-PIM\n   implementation is free to hold whatever internal state it requires,\n
      \  and will still be conformant with this specification so long as it\n   results
      in the same externally visible protocol behavior as an\n   abstract router that
      holds the following state.\n   We divide TIB state into two sections:\n   RPA
      state\n      State that maintains the DF election information for each RPA.\n
      \  Group state\n      State that maintains a group-specific tree for groups
      that map to\n      a given RPA.\n   The state that should be kept is described
      below.  Of course,\n   implementations will only maintain state when it is relevant
      to\n   forwarding operations - for example, the \"NoInfo\" state might be\n
      \  assumed from the lack of other state information, rather than being\n   held
      explicitly.\n"
    - contents:
      - "3.1.1.  General Purpose State\n   A router holds the following state that
        is not specific to an RPA or\n   group:\n      Neighbor State:\n         For
        each neighbor:\n            o Neighbor's Gen ID\n            o Neighbor liveness
        timer (NLT)\n            o Other information from neighbor's Hello\n   For
        more information on Hello information, look at Section 3.2 as\n   well as
        the PIM-SM specification in [4].\n"
      title: 3.1.1.  General Purpose State
    - contents:
      - "3.1.2.  RPA State\n   A router maintains a multicast-group to RPA mapping,
        which is built\n   through static configuration or by using an automatic RP
        discovery\n   mechanism like BSR or AUTO-RP (see Section 4).  For each BIDIR-PIM\n
        \  RPA, a router holds the following state:\n      o RPA (actual address)\n
        \     Designated Forwarder (DF) State:\n           For each router interface:\n
        \          Acting DF information:\n              o DF IP Address\n              o
        DF metric\n           Election information:\n              o Election State\n
        \             o DF election-Timer (DFT)\n              o Message-Count (MC)\n
        \               Current best offer:\n                o IP address of best
        offering router\n                o Best offering router metric\n   Designated
        Forwarder state is described in Section 3.5.\n"
      title: 3.1.2.  RPA State
    - contents:
      - "3.1.3.  Group State\n   For every group G, a router keeps the following state:\n
        \        Group state:\n            For each interface:\n            Local
        Membership:\n               o State: One of {\"NoInfo\", \"Include\"}\n            PIM
        Join/Prune State:\n               o State: One of {\"NoInfo\" (NI), \"Join\"
        (J),\n                 \"PrunePending\" (PP)}\n               o PrunePendingTimer
        (PPT)\n               o Join/Prune Expiry Timer (ET)\n         Not interface
        specific:\n            o Upstream Join/Prune Timer (JT)\n            o Last
        RPA Used\n   Local membership is the result of the local membership mechanism\n
        \  (such as IGMP [2]) running on that interface.  This information is\n   used
        by the pim_include(*,G) macro described in Section 3.1.4.\n   PIM Join/Prune
        state is the result of receiving PIM (*,G) Join/Prune\n   messages on this
        interface, and is specified in Section 3.4.1.  The\n   state is used by the
        macros that calculate the outgoing interface\n   list in Section 3.1.4, and
        in the JoinDesired(G) macro (defined in\n   Section 3.4.2) that is used in
        deciding whether a Join(*,G) should be\n   sent upstream.\n   The upstream
        Join/Prune timer is used to send out periodic Join(*,G)\n   messages, and
        to override Prune(*,G) messages from peers on an\n   upstream LAN interface.\n
        \  The last RPA used must be stored because if the group to RPA mapping\n
        \  changes (see RP Set changes in [4]), then state must be torn down and\n
        \  rebuilt for groups whose RPA changes.\n"
      title: 3.1.3.  Group State
    - contents:
      - "3.1.4.  State Summarization Macros\n   Using this state, we define the following
        \"macro\" definitions that we\n   will use in the descriptions of the state
        machines and pseudocode in\n   the following sections.\n    olist(G) =\n       RPF_interface(RPA(G))
        (+) joins(G) (+) pim_include(G)\n   RPF_interface(RPA) is the interface the
        MRIB indicates would be used\n   to route packets to RPA.  The olist(G) is
        the list of interfaces on\n   which packets to group G must be forwarded.\n
        \  The macro pim_include(G) indicates the interfaces to which traffic\n   might
        be forwarded because of hosts that are local members on that\n   interface.\n
        \   pim_include(G) =\n       { all interfaces I such that:\n         I_am_DF(RPA(G),I)
        AND  local_receiver_include(G,I) }\n   The clause \"I_am_DF(RPA,I)\" is TRUE
        if the router is in the Win or\n   Backoff states in the DF election state
        machine (described in Section\n   3.5) for the given RPA on interface I.  Otherwise,
        it is FALSE.\n   The clause \"local_receiver_include(G,I)\" is true if the
        IGMP module,\n   MLD module, or other local membership mechanism has determined
        that\n   there are local members on interface I that desire to receive traffic\n
        \  sent to group G.\n   The set \"joins(G)\" is the set of all interfaces
        on which the router\n   has received (*,G) Joins:\n   joins(G) =\n       {
        all interfaces I such that\n         I_am_DF(RPA(G),I) AND\n         DownstreamJPState(G,I)
        is either Joined or PrunePending }\n   DownstreamJPState(G,I) is the state
        of the finite state machine in\n   Section 3.4.1.\n   RPF_DF(RPA) is the neighbor
        that Join messages must be sent to in\n   order to build the group shared
        tree rooted at the RPL for the given\n   RPA.  This is the Designated-Forwarder
        on the RPF_interface(RPA).\n"
      title: 3.1.4.  State Summarization Macros
    title: 3.1.  BIDIR-PIM Protocol State
  - contents:
    - "3.2.  PIM Neighbor Discovery\n   PIM routers exchange PIM-Hello messages with
      their neighboring PIM\n   routers.  These messages are used to update the Neighbor
      State\n   described in Section 3.1.  The procedures for generating and\n   processing
      Hello messages as well as maintaining Neighbor State are\n   specified in the
      PIM-SM [4] documentation.\n   BIDIR-PIM introduces the Bidirectional Capable
      PIM-Hello option that\n   MUST be included in all Hello messages from a BIDIR-PIM
      capable\n   router.  The Bidirectional Capable option advertises the router's\n
      \  ability to participate in the BIDIR-PIM protocol.  The format of the\n   Bidirectional
      Capable option is described in Section 3.7.\n   If a BIDIR-PIM router receives
      a PIM-Hello message that does not\n   contain the Bidirectional Capable option
      from one of its neighbors,\n   the error must be logged to the router administrator
      in a rate-\n   limited manner.\n"
    title: 3.2.  PIM Neighbor Discovery
  - contents:
    - "3.3.  Data Packet Forwarding Rules\n   For groups mapping to a given RPA, the
      following responsibilities are\n   uniquely assigned to the DF for that RPA
      on each link:\n   o The DF is the only router that forwards packets traveling\n
      \    downstream onto the link.\n   o The DF is the only router that picks-up
      upstream traveling packets\n     off the link to forward towards the RPL.\n
      \  Non-DF routers on a link, which use that link as their RPF interface\n   to
      reach the RPA, may perform the following forwarding actions for\n   bidirectional
      groups:\n   o Forward packets from the link towards downstream receivers.\n
      \  o Forward packets from downstream sources onto the link (provided\n     they
      are the DF for the downstream link from which the packet was\n     picked-up).\n
      \  The BIDIR-PIM packet forwarding rules are defined below in\n   pseudocode.\n
      \     iif is the incoming interface of the packet.\n      G is the destination
      address of the packet (group address).\n      RPA is the Rendezvous Point Address
      for this group.\n   First we check to see whether the packet should be accepted
      based on\n   TIB state and the interface that the packet arrived on.  A packet
      is\n   accepted if it arrives on the RPF interface to reach the RPA\n   (downstream
      traveling packet) or if the router is the DF on the\n   interface the packet
      arrives (upstream traveling packet).\n   If the packet should be forwarded,
      we build an outgoing interface\n   list for the packet.\n   Finally, we remove
      the incoming interface from the outgoing interface\n   list we've created, and
      if the resulting outgoing interface list is\n   not empty, we forward the packet
      out of those interfaces.\n   On receipt of data to G on interface iif:\n    if(
      iif == RPF_interface(RPA) || I_am_DF(RPA,iif) ) {\n       oiflist = olist(G)
      (-) iif\n       forward packet on all interfaces in oiflist\n    }\n"
    - contents:
      - "3.3.1.  Upstream Forwarding at RP\n   When configuring a BIDIR-PIM domain,
        it is possible to assign the\n   Rendezvous Point Address (RPA) such that
        it does not belong to a\n   physical box but instead is simply a routable
        address.  Routers that\n   have interfaces on the RPL that the RPA belongs
        to will upstream\n   forward traffic onto the link.  Joins from receivers
        in the domain\n   will propagate hop-by-hop till they reach one of the routers\n
        \  connected to the RPL where they will terminate (as there will be no\n   DF
        elected on the RPL).\n   If instead the administrator chooses to configure
        the RPA to be the\n   address of a physical interface of a specific router,
        then nothing\n   changes.  That router must still upstream forward traffic
        on to the\n   RPL and behave no differently than any other router with an
        interface\n   on the RPL.\n   To configure a BIDIR-PIM network to operate
        in a mode similar to that\n   of PIM-SM where a single router (the RP) is
        acting as the root of the\n   distribution tree, the RPA can be configured
        to be the loopback\n   interface of a router.\n"
      title: 3.3.1.  Upstream Forwarding at RP
    - contents:
      - "3.3.2.  Source-Only Branches\n   Source-only branches of the distribution
        tree for a group G are\n   branches that do not lead to any receivers, but
        that are used to\n   forward packets traveling upstream from sources towards
        the RPL.\n   Routers along source-only branches only have the RPF interface
        to the\n   RPA in their olist for G, and hence do not need to maintain any
        group\n   specific state.  Upstream forwarding can be performed using only
        RPA\n   specific state.  An implementation may decide to maintain group state\n
        \  for source-only branches for accounting or performance reasons.\n   However,
        doing so requires data-driven events (to discover the groups\n   with active
        sources), thus sacrificing one of the main benefits of\n   BIDIR-PIM.\n"
      title: 3.3.2.  Source-Only Branches
    - contents:
      - "3.3.3.  Directly Connected Sources\n    A major advantage of using a Designated
        Forwarder in BIDIR-PIM\n   compared to PIM-SM is that special treatment is
        no longer required\n   for sources that are directly connected to a router.
        \ Data from such\n   sources does not need to be differentiated from other
        multicast\n   traffic and will automatically be picked up by the DF and forwarded\n
        \  upstream.  This removes the need for performing a directly-\n   connected-source
        check for data to groups that do not have existing\n   state.\n"
      title: 3.3.3.  Directly Connected Sources
    title: 3.3.  Data Packet Forwarding Rules
  - contents:
    - "3.4.  PIM Join/Prune Messages\n   BIDIR-PIM Join/Prune messages are used to
      construct group-specific\n   distribution trees between receivers and the RPL.
      \ Joins are\n   originated by last-hop routers that are elected as the DF on
      an\n   interface with directly connected receivers.  The Joins propagate\n   hop-by-hop
      towards the RPA until they reach a router connected to the\n   RPL.\n   A BIDIR-PIM
      Join/Prune message consists of a list of Joined and\n   Pruned Groups.  When
      processing a received Join/Prune message, each\n   Joined or Pruned Group is
      effectively considered individually by\n   applying the following state machines.
      \ When considering a Join/Prune\n   message whose PIM Destination field addresses
      this router, (*,G)\n   Joins and Prunes can affect the downstream state machine.
      \ When\n   considering a Join/Prune message whose PIM Destination field\n   addresses
      another router, most Join or Prune entries could affect the\n   upstream state
      machine.\n"
    - contents:
      - "3.4.1.  Receiving (*,G) Join/Prune Messages\n   When a router receives a
        Join(*,G) or Prune(*,G), it MUST first check\n   to see whether the RP address
        in the message matches RPA(G) (the\n   router's idea of what the Rendezvous
        Point Address is).  If the RP\n   address in the message does not match RPA(G),
        the Join or Prune MUST\n   be silently dropped.\n   If a router has no RPA
        information for the group (e.g., has not\n   recently received a BSR message),
        then it MAY choose to accept\n   Join(*,G) or Prune(*,G) and treat the RP
        address in the message as\n   RPA(G).  If the newly discovered RPA did not
        previously exist for any\n   other group, a DF election has to be initiated.\n
        \  Note that a router will process a Join(*,G) targeted to itself even\n   if
        it is not the DF for RP(G) on the interface on which the message\n   was received.
        \ This is an optimisation to eliminate the Join delay of\n   one Join period
        (t_periodic) in the case where a new DF processes the\n   received Pass and
        Join messages in reverse order.  The BIDIR-PIM\n   forwarding logic will ensure
        that data packets are not forwarded on\n   such an interface while the router
        is not the DF (unless it is the\n   RPF interface towards the RPA).\n   The
        per-interface state machine for receiving (*,G) Join/Prune\n   Messages is
        given below.  There are three states:\n      NoInfo (NI)\n         The interface
        has no (*,G) Join state and no timers running.\n      Join (J)\n         The
        interface has (*,G) Join state.  If the router is the DF on\n         this
        interface (I_am_DF(RPA(G),I) is TRUE), the Join state will\n         cause
        us to forward packets destined for G on this interface.\n      PrunePending
        (PP)\n         The router has received a Prune(*,G) on this interface from
        a\n         downstream neighbor and is waiting to see whether the Prune\n
        \        will be overridden by another downstream router.  For\n         forwarding
        purposes, the PrunePending state functions exactly\n         like the Join
        state.\n   In addition, the state machine uses two timers:\n      ExpiryTimer
        (ET)\n         This timer is restarted when a valid Join(*,G) is received.\n
        \        Expiry of the ExpiryTimer causes the interface state to revert\n
        \        to NoInfo for this group.\n      PrunePendingTimer (PPT)\n         This
        timer is set when a valid Prune(*,G) is received.  Expiry\n         of the
        PrunePendingTimer causes the interface state to revert\n         to NoInfo
        for this group.\n   Figure 1: Downstream group per-interface state machine
        in tabular\n             form\n  +---------------++---------------------------------------------------+\n
        \ |               ||                    Prev State                     |\n
        \ |Event          ++---------------+-----------------+-----------------+\n
        \ |               || NoInfo (NI)   | Join (J)        | PrunePending    |\n
        \ |               ||               |                 | (PP)            |\n
        \ +---------------++---------------+-----------------+-----------------+\n
        \ |               || -> J state    | -> J state      | -> J state      |\n
        \ |Receive        || start Expiry  | restart Expiry  | restart Expiry  |\n
        \ |Join(*,G)      || Timer         | Timer           | Timer; stop     |\n
        \ |               ||               |                 | PrunePending-   |\n
        \ |               ||               |                 | Timer           |\n
        \ +---------------++---------------+-----------------+-----------------+\n
        \ |Receive        || -             | -> PP state     | -> PP state     |\n
        \ |Prune(*,G)     ||               | start Prune-    |                 |\n
        \ |               ||               | PendingTimer    |                 |\n
        \ +---------------++---------------+-----------------+-----------------+\n
        \ |PrunePending-  || -             | -               | -> NI state     |\n
        \ |Timer Expires  ||               |                 | Send Prune-     |\n
        \ |               ||               |                 | Echo(*,G)       |\n
        \ +---------------++---------------+-----------------+-----------------+\n
        \ |Expiry Timer   || -             | -> NI state     | -> NI state     |\n
        \ |Expires        ||               |                 |                 |\n
        \ +---------------++---------------+-----------------+-----------------+\n
        \ |Stop Being DF  || -             | -> NI state     | -> NI state     |\n
        \ |on I           ||               |                 |                 |\n
        \ +---------------++---------------+-----------------+-----------------+\n
        \  The transition events \"Receive Join(*,G)\" and \"Receive Prune(*,G)\"\n
        \  imply receiving a Join or Prune targeted to this router's address on\n
        \  the received interface.  If the destination address is not correct,\n   these
        state transitions in this state machine must not occur,\n   although seeing
        such a packet may cause state transitions in other\n   state machines.\n   On
        unnumbered interfaces on point-to-point links, the router's\n   address should
        be the same as the source address it chose for the\n   Hello packet it sent
        over that interface.  However, on point-to-point\n   links, we also RECOMMEND
        that PIM messages with a destination address\n   of all zeros also be accepted.\n
        \  The transition event \"Stop Being DF\" implies a DF re-election taking\n
        \  place on this router interface for RPA(G) and the router changing\n   status
        from being the active DF to being a non-DF router (the value\n   of the I_am_DF
        macro changing to FALSE).\n   When ExpiryTimer is started or restarted, it
        is set to the HoldTime\n   from the Join/Prune message that triggered the
        timer.\n   When PrunePendingTimer is started, it is set to the\n   J/P_Override_Interval
        if the router has more than one neighbor on\n   that interface; otherwise,
        it is set to zero causing it to expire\n   immediately.\n   The action \"Send
        PruneEcho(*,G)\" is triggered when the router stops\n   forwarding on an interface
        as a result of a Prune.  A PruneEcho(*,G)\n   is simply a Prune(*,G) message
        sent by the upstream router to itself\n   on a LAN.  Its purpose is to add
        additional reliability so that if a\n   Prune that should have been overridden
        by another router is lost\n   locally on the LAN, then the PruneEcho may be
        received and cause the\n   override to happen.  A PruneEcho(*,G) need not
        be sent when the\n   router has only one neighbor on the link.\n"
      title: 3.4.1.  Receiving (*,G) Join/Prune Messages
    - contents:
      - "3.4.2.  Sending Join/Prune Messages\n   The downstream per-interface state
        machines described above hold Join\n   state from downstream PIM routers.
        \ This state then determines\n   whether a router needs to propagate a Join(*,G)
        upstream towards the\n   RPA.  Such Join(*,G) messages are sent on the RPF
        interface towards\n   the RPA and are targeted at the DF on that interface.\n
        \  If a router wishes to propagate a Join(*,G) upstream, it must also\n   watch
        for messages on its upstream interface from other routers on\n   that subnet,
        and these may modify its behavior.  If it sees a\n   Join(*,G) to the correct
        upstream neighbor, it should suppress its\n   own Join(*,G).  If it sees a
        Prune(*,G) to the correct upstream\n   neighbor, it should be prepared to
        override that Prune by sending a\n   Join(*,G) almost immediately.  Finally,
        if it sees the Generation ID\n   (see PIM-SM specification [4]) of the correct
        upstream neighbor\n   change, it knows that the upstream neighbor has lost
        state, and it\n   should be prepared to refresh the state by sending a Join(*,G)
        almost\n   immediately.\n   In addition, changes in the next hop towards the
        RPA trigger a Prune\n   off from the old next hop and join towards the new
        next hop.  Such a\n   change can be caused by the following two events:\n
        \     o The MRIB indicates that the RPF Interface towards the RPA has\n        changed.
        \ In this case the DF on the new RPF interface becomes\n        the new RPF
        Neighbor.\n      o There is a DF re-election on the RPF interface and a new
        router\n        emerges as the DF.\n   The upstream (*,G) state machine only
        contains two states:\n      Not Joined\n         The downstream state machines
        indicate that the router does not\n         need to join the RPA tree for
        this group.\n      Joined\n         The downstream state machines indicate
        that the router would\n         like to join the RPA tree for this group.\n
        \  In addition, one timer JT(G) is kept, which is used to trigger the\n   sending
        of a Join(*,G) to the upstream next hop towards the RPA (the\n   DF on the
        RPF interface for RPA(G)).\n          Figure 2: Upstream group state machine
        in tabular form\n  +---------------------+----------------------------------------------+\n
        \ |                     |                    Event                     |\n
        \ |  Prev State         +-----------------------+----------------------+\n
        \ |                     |   JoinDesired(G)      |    JoinDesired(G)    |\n
        \ |                     |   ->True              |    ->False           |\n
        \ +---------------------+-----------------------+----------------------+\n
        \ |                     |   -> J state          |    -                 |\n
        \ |  NotJoined (NJ)     |   Send Join(*,G);     |                      |\n
        \ |                     |   Set Timer to        |                      |\n
        \ |                     |   t_periodic          |                      |\n
        \ +---------------------+-----------------------+----------------------+\n
        \ |  Joined (J)         |   -                   |    -> NJ state       |\n
        \ |                     |                       |    Send Prune(*,G)   |\n
        \ +---------------------+-----------------------+----------------------+\n
        \ In addition, we have the following transitions that occur within the\n  Joined
        state:\n  +--------------------------------------------------------------------+\n
        \ |                        In Joined (J) State                         |\n
        \ +----------------+----------------+-----------------+----------------+\n
        \ |Timer Expires   | See Join(*,G)  | See Prune(*,G)  | RPF_DF(RPA(G)) |\n
        \ |                | to             | to              | GenID changes  |\n
        \ |                | RPF_DF(RPA(G)) | RPF_DF(RPA(G))  |                |\n
        \ +----------------+----------------+-----------------+----------------+\n
        \ |Send            | Increase Timer | Decrease Timer  | Decrease Timer |\n
        \ |Join(*,G); Set  | to             | to t_override   | to t_override  |\n
        \ |Timer to        | t_suppressed   |                 |                |\n
        \ |t_periodic      |                |                 |                |\n
        \ +----------------+----------------+-----------------+----------------+\n
        \ +--------------------------------------------------------------------+\n
        \ |                        In Joined (J) State                         |\n
        \ +-----------------------------------+--------------------------------+\n
        \ |    Change of RPF_DF(RPA(G))       |       RPF_DF(RPA(G)) GenID     |\n
        \ |                                   |       changes                  |\n
        \ +-----------------------------------+--------------------------------+\n
        \ |    Send Join(*,G) to new          |       Decrease Timer to        |\n
        \ |    DF; Send Prune(*,G) to         |       t_override               |\n
        \ |    old DF; set Timer to           |                                |\n
        \ |    t_periodic                     |                                |\n
        \ +-----------------------------------+--------------------------------+\n
        \ This state machine uses the following macro:\n     bool JoinDesired(G) {\n
        \       if (olist(G) (-) RPF_interface(RPA(G))) != NULL\n            return
        TRUE\n        else\n            return FALSE\n     }\n"
      title: 3.4.2.  Sending Join/Prune Messages
    title: 3.4.  PIM Join/Prune Messages
  - contents:
    - "3.5.  Designated Forwarder (DF) Election\n   This section presents a fail-safe
      mechanism for electing a per-RPA\n   designated router on each link in a BIDIR-PIM
      domain.  We call this\n   router the Designated Forwarder (DF).  The DF election
      does not take\n   place on the RPL for an RPA.\n"
    - contents:
      - "3.5.1.  DF Requirements\n   The DF election chooses the best router on a
        link to assume\n   responsibility for forwarding traffic between the RPL and
        the link\n   for the range of multicast groups served by the RPA.  Different\n
        \  multicast groups that share a common RPA share the same upstream\n   direction.
        \ Hence, the election of an upstream forwarder on each link\n   does not have
        to be a group-specific decision but instead can be\n   RPA-specific.  As the
        number of RPAs is typically small, the number\n   of elections that have to
        be performed is significantly reduced by\n   this observation.\n   To optimise
        tree creation, it is desirable that the winner of the\n   election process
        should be the router on the link with the \"best\"\n   unicast routing metric
        (as reported by the MRIB) to reach the RPA.\n   When comparing metrics from
        different unicast routing protocols, we\n   use the same comparison rules
        used by the PIM-SM assert process [4].\n   The election process needs to take
        place when information on a new\n   RPA initially becomes available.  The
        result can be re-used as new\n   bidir groups that map to the same RPA are
        encountered.  However,\n   there are some conditions under which an update
        to the election is\n   required:\n      o There is a change in unicast metric
        to reach the RPA for any of\n        the routers on the link.\n      o The
        interface on which the RPA is reachable (RPF Interface)\n        changes to
        an interface for which the router was previously the\n        DF.\n      o
        A new PIM neighbor starts up on a link that must participate in\n        the
        elections and be informed of the current outcome.\n      o The elected DF
        fails (detected through neighbor information\n        timeout or MRIB RPF
        change at downstream router).\n   The election process has to be robust enough
        to ensure with very high\n   probability that all routers on the link have
        a consistent view of\n   the DF.  Given the forwarding rules described in
        Section 3.3, loops\n   may result if multiple routers end-up thinking that
        they should be\n   responsible for forwarding.  To minimize the possibility
        of this\n   occurrence, the election algorithm has been biased towards discarding\n
        \  DF information and suspending forwarding during periods of ambiguity.\n"
      title: 3.5.1.  DF Requirements
    - contents:
      - "3.5.2.  DF Election Description\n   This section gives an outline of the
        DF election process.  It does\n   not provide the definitive specification
        for the DF election.  If any\n   discrepancy exists between Section 3.5.3
        and this section, the\n   specification in Section 3.5.3 is to be assumed
        correct.\n   To perform the election of the DF for a particular RPA, routers
        on a\n   link need to exchange their unicast routing metric information for\n
        \  reaching the RPA.  Routers advertise their own metrics in Offer,\n   Winner,
        Backoff, and Pass messages.  The advertised metric is\n   calculated using
        the RPF Interface and metric to reach the RPA\n   available through the MRIB.
        \ When a router is participating in a DF\n   election for an RPA on the interface
        that its MRIB indicates as the\n   RPF Interface, then that router MUST always
        advertise an infinite\n   metric in its election messages.  When a router
        is participating in a\n   DF election on an interface other than the MRIB-indicated
        RPF\n   Interface then it MUST advertise the MRIB-provided metrics in its\n
        \  election messages.\n   In the election protocol described below, many message
        exchanges are\n   repeated Election_Robustness times for reliability.  In
        all those\n   cases, the message retransmissions are spaced in time by a small\n
        \  random interval.  All of the following description is specific to the\n
        \  election on a single link for a single RPA.\n"
      - contents:
        - "3.5.2.1.  Bootstrap Election\n   Initially, when no DF has been elected,
          routers finding out about a\n   new RPA start participating in the election
          by sending Offer\n   messages.  Offer messages include the router's metric
          to reach the\n   RPA.  Offers are periodically retransmitted with a period
          of\n   Offer_Interval.\n   If a router hears a better offer than its own
          from a neighbor, it\n   stops participating in the election for a period
          of\n   Election_Robustness * Offer_Interval, thus giving a chance to the\n
          \  neighbor with the better metric to be elected DF.  If during this\n   period
          no winner is elected, the router restarts the election from\n   the beginning.
          \ If at any point during the initial election a router\n   receives an out
          of order offer with worse metrics than its own, then\n   it restarts the
          election from the beginning.\n   The result should be that all routers except
          the best candidate stop\n   advertising their offers.\n   A router assumes
          the role of the DF after having advertised its\n   metrics Election_Robustness
          times without receiving any offer from\n   any other neighbor.  At that
          point, it transmits a Winner message\n   that declares to every other router
          on the link the identity of the\n   winner and the metrics it is using.\n
          \  Routers receiving a Winner message stop participating in the election\n
          \  and record the identity and metrics of the winner.  If the local\n   metrics
          are better than those of the winner, then the router records\n   the identity
          of the winner (accepting it as the acting DF) but re-\n   initiates the
          election to try and take over.\n"
        title: 3.5.2.1.  Bootstrap Election
      - contents:
        - "3.5.2.2.  Loser Metric Changes\n   Whenever the unicast metric to an RPA
          changes at a non-DF router to a\n   value that is better than that previously
          advertised by the acting\n   DF, the router with the new better metric should
          take action to\n   eventually assume forwarding responsibility.  When the
          metric change\n   is detected, the non-DF router with the now better metric
          restarts\n   the DF election process by sending Offer messages with this
          new\n   metric.  Note that at any point during an election if no response
          is\n   received after Election_Robustness retransmissions of an offer, a\n
          \  router assumes the role of the DF following the usual Winner\n   announcement
          procedure.\n   Upon receipt of an offer that is worse than its current metric,
          the\n   DF will respond with a Winner message declaring its status and\n
          \  advertising its better metric.  Upon receiving the Winner message,\n
          \  the originator of the Offer records the identity of the DF and aborts\n
          \  the election.\n   Upon receipt of an offer that is better than its current
          metric, the\n   DF records the identity and metrics of the offering router
          and\n   responds with a Backoff message.  This instructs the offering router\n
          \  to hold off for a short period of time while the unicast routing\n   stabilizes
          and other routers get a chance to put in their offers.\n   The Backoff message
          includes the offering router's new metric and\n   address.  All routers
          on the link that have pending offers with\n   metrics worse than those in
          the Backoff message (including the\n   original offering router) will hold
          further offers for a period of\n   time defined in the Backoff message.\n
          \  If a third router sends a better offer during the Backoff_Period, the\n
          \  Backoff message is repeated for the new offer and the Backoff_Period\n
          \  is restarted.\n   Before the Backoff_Period expires, the acting DF nominates
          the router\n   having made the best offer as the new DF using a Pass message.
          \ This\n   message includes the IDs and metrics of both the old and new
          DFs.\n   The old DF stops performing its tasks at the time the Pass message\n
          \  transmission is made.  The new DF assumes the role of the DF as soon\n
          \  as it receives the Pass message.  All other routers on the link take\n
          \  note of the new DF and its metric.  Note that this event constitutes\n
          \  an RPF Neighbor change, which may trigger Join messages to the new DF\n
          \  (see Section 3.4).\n"
        title: 3.5.2.2.  Loser Metric Changes
      - contents:
        - "3.5.2.3.  Winner Metric Changes\n   If the DF's routing metric to reach
          the RPA changes to a worse value,\n   it sends a set of Election_Robustness
          randomly spaced Winner messages\n   on the link, advertising the new metric.
          \ Routers that receive this\n   announcement but have a better metric may
          respond with an Offer\n   message that results in the same handoff procedure
          described above.\n   All routers assume the DF has not changed until they
          see a Pass or\n   Winner message indicating the change.\n   There is no
          pressure to make this handoff quickly if the acting DF\n   still has a path
          to the RPL.  The old path may now be suboptimal, but\n   it will still work
          while the re-election is in progress.\n"
        title: 3.5.2.3.  Winner Metric Changes
      - contents:
        - "3.5.2.4.  Winner Loses Path\n   If a router's RPF Interface to the RPA
          switches to be on a link for\n   which it is acting as the DF, then it can
          no longer provide\n   forwarding services for that link.  It therefore immediately
          stops\n   being the DF and restarts the election.  As its path to the RPA
          is\n   through the link, an infinite metric is used in the Offer message
          it\n   sends.\n"
        title: 3.5.2.4.  Winner Loses Path
      - contents:
        - "3.5.2.5.  Late Router Starting Up\n   A late router starting up after the
          DF election process has completed\n   will have no immediate knowledge of
          the election outcome.  As a\n   result, it will start advertising its metric
          in Offer messages.  As\n   soon as this happens, the currently elected DF
          will respond with a\n   Winner message if its metric is better than the
          metric in the Offer\n   message, or with a Backoff message if its metric
          is worse than the\n   metric in the Offer message.\n"
        title: 3.5.2.5.  Late Router Starting Up
      - contents:
        - "3.5.2.6.  Winner Dies\n   Whenever the DF dies, a new DF has to be elected.
          \ The speed at which\n   this can be achieved depends on whether there are
          any downstream\n   routers on the link.\n   If there are downstream routers,
          typically their MRIB reported next-\n   hop before the DF dies will be the
          DF itself.  They will therefore\n   notice either a change in the metric
          for the route to the RPA or a\n   change in next-hop away from the DF and
          can restart the election by\n   transmitting Offer messages.  If according
          to the MRIB the RPA is now\n   reachable through the same link via another
          upstream router, an\n   infinite metric will be used in the Offer.\n   If
          no downstream routers are present, the only way for other upstream\n   routers
          to detect a DF failure is by the timeout of the PIM neighbor\n   information,
          which will take significantly longer.\n"
        title: 3.5.2.6.  Winner Dies
      title: 3.5.2.  DF Election Description
    - contents:
      - "3.5.3.  Election Protocol Specification\n   This section provides the definitive
        specification for the DF\n   election process.  If any discrepancy exists
        between Section 3.5.2\n   and this section, the specification in this section
        is to be assumed\n   correct.\n"
      - contents:
        - "3.5.3.1.  Election State\n   The DF election state is maintained per RPA
          for each multicast\n   enabled interface I on the router as introduced in
          Section 3.1.\n   The state machine has the following four states:\n      Offer\n
          \        Initial election state.  When in the Offer state, a router\n         thinks
          it can eventually become the winner and periodically\n         generates
          Offer messages.\n      Lose\n         In this state, the router knows that
          there either is a\n         different election winner or that no router
          on the link has a\n         path to the RPA.\n      Win\n         The router
          is the acting DF without any contest.\n      Backoff\n         The router
          is the acting DF but another router has made a bid\n         to take over.\n
          \  In the state machine, a router is considered to be an acting DF if it\n
          \  is in the Win or Backoff states.\n   The operation of the election protocol
          makes use of the variables and\n   timers described below:\n      Acting
          DF information\n         Used to store the identity and advertised metrics
          of the\n         election winner that is the currently acting DF.\n      DF
          election-Timer (DFT)\n         Used to schedule transmission of Offer, Winner,
          and Pass\n         messages.\n      Message-Count (MC)\n         Used to
          maintain the number of times an Offer or Winner message\n         has been
          transmitted.\n      Best-Offer\n         Used by the DF to record the identity
          and advertised metrics of\n         the router that has made the last offer,
          for use when sending\n         the Path message.\n"
        title: 3.5.3.1.  Election State
      - contents:
        - "3.5.3.2.  Election Messages\n   The election process uses the following
          PIM control messages.  The\n   packet format is described in Section 3.7:\n
          \     Offer (OfferingID, Metric)\n         Sent by routers that believe
          they have a better metric to the\n         RPA than the metric that has
          been on offer so far.\n      Winner (DF-ID, DF-Metric)\n         Sent by
          a router when assuming the role of the DF or when re-\n         asserting
          in response to worse offers.\n      Backoff (DF-ID, DF-Metric, OfferingID,
          OfferMetric,\n         BackoffInterval)\n         Used by the DF to acknowledge
          better offers.  It instructs\n         other routers with equal or worse
          offers to wait until the DF\n         passes responsibility to the sender
          of the offer.\n      Pass (Old-DF-ID, Old-DF-Metric, New-DF-ID, New-DF-Metric)\n
          \        Used by the old DF to pass forwarding responsibility to a\n         router
          that has previously made an offer.  The Old-DF-Metric is\n         the current
          metric of the DF at the time the pass is sent.\n   Note that when a router
          is participating in a DF election for an RPA\n   on the interface that its
          MRIB indicates as the RPF Interface, then\n   that router MUST always advertise
          an infinite metric in its election\n   messages.  When a router is participating
          in a DF election on an\n   interface other than the MRIB-indicated RPF Interface,
          then it MUST\n   advertise the MRIB-provided metrics in its election messages.\n"
        title: 3.5.3.2.  Election Messages
      - contents:
        - "3.5.3.3.  Election Events\n   During protocol operation, the following
          events can take place:\n      Control message reception\n         Reception
          of one of the four control DF election messages\n         (Offer, Winner,
          Backoff, and Pass).  When a control message is\n         received and actions
          are specified on a condition that metrics\n         are Better or Worse,
          the comparison must be performed as\n         follows:\n         o On receipt
          of an Offer or Winner message, compare the current\n           metrics for
          the RPA with the metrics advertised for the\n           sender of the message.\n
          \        o On receipt of a Backoff or Pass message, compare the current\n
          \          metrics for the RPA with the metrics advertised for the\n           target
          of the message.\n      Path to RPA lost\n         Losing the path to the
          RPA can happen in two ways.  The first\n         happens when the route
          learned through the MRIB is withdrawn\n         and the MRIB no longer reports
          an available route to reach the\n         RPA.  The second case happens
          when the next-hop information\n         reported by the MRIB changes to
          indicate a next-hop that is\n         reachable through the router interface
          under consideration.\n         Clearly, as the router is using the interface
          as its RPF\n         Interface, it cannot offer forwarding services towards
          the RPL\n         to other routers on that link.\n      Metric reported
          by the MRIB to reach the RPA changes\n         This event is triggered when
          the MRIB supplied information for\n         the RPA changes and the new
          information provides a path to the\n         RPA.  If the new MRIB information
          either reports no route or\n         reports a next-hop interface through
          the interface for which\n         the DF election is taking place, then
          the \"Path to RPA lost\"\n         event triggers instead.  In specific
          states, the event may be\n         further filtered by specifying whether
          it is expected of the\n         metric to become better or worse and which
          of the stored\n         metrics the new MRIB information must be compared
          against.  The\n         new information must be compared with either the
          router's old\n         metric, the stored DF metric, or the stored Best
          Offer metric.\n      Election-Timer (DFT) expiration\n         Expiration
          of the DFT election timer can cause message\n         transmission and state
          transitions.  The event might be further\n         qualified by specifying
          the value of the Message Count (MC) as\n         well as the current existence
          of a path to the RPA (as defined\n         above).\n      Detection of DF
          failure\n         Detection of DF failure can occur through the timeout
          of PIM\n         neighbor state.\n"
        title: 3.5.3.3.  Election Events
      - contents:
        - "3.5.3.4.  Election Actions\n   The DF election state machine action descriptions
          use the following\n   notation in addition to the pseudocode notation described
          earlier in\n   this specification:\n      ?=  denotes the operation of lowering
          a timer to a new value.  If\n          the timer is not running, then it
          is started using the new\n          value.  If the timer is running with
          an expiration lower than\n          the new value, then the timer is not
          altered.\n   When an action of \"set DF to Sender or Target\" is encountered
          during\n   receipt of a Winner, Pass, or Backoff message, it means the\n
          \  following:\n      o On receipt of a Winner message, set the DF to be
          the originator\n        of the message and record its metrics.\n      o
          On receipt of a Pass message, set the DF to be the target of the\n        message
          and record its metrics.\n      o On receipt of a Backoff message, set the
          DF to be the originator\n        of the message and record its metrics.\n"
        title: 3.5.3.4.  Election Actions
      - contents:
        - "3.5.3.5.  Election State Transitions\n   When a Designated Forwarder election
          is initiated, the starting state\n   is the Offer state, the message counter
          (MC) is set to zero, and the\n   DF election Timer (DFT) is set to OPlow
          (see Section 3.6 for a\n   definition of timer values).\n   Figure 3: Designated
          Forwarder election state machine in tabular form\n  +-------------+------------------------------------------------------+\n
          \ |             |                        Event                         |\n
          \ | Prev State  +-----------------+------------------+-----------------+\n
          \ |             | Recv better     |  Recv better     | Recv better     |\n
          \ |             | Pass / Win      |  Backoff         | Offer           |\n
          \ +-------------+-----------------+------------------+-----------------+\n
          \ |             | -> Lose         |  -               | -               |\n
          \ | Offer       | DF = Sender or  |  DFT = BOperiod  | DFT = OPhigh;   |\n
          \ |             | Target; Stop    |  + OPlow; MC =   | MC = 0          |\n
          \ |             | DFT             |  0               |                 |\n
          \ +-------------+-----------------+------------------+-----------------+\n
          \ |             | -               |  -               | -> Offer        |\n
          \ | Lose        | DF = Sender or  |  DF = Sender     | DFT = OPhigh;   |\n
          \ |             | Target          |                  | MC = 0          |\n
          \ +-------------+-----------------+------------------+-----------------+\n
          \ |             | -> Lose         |  -> Lose         | -> Backoff      |\n
          \ |             | DF = Sender or  |  DF = Sender;    | Set Best to     |\n
          \ | Win         | Target; Stop    |  Stop DFT        | Sender; Send    |\n
          \ |             | DFT             |                  | Backoff; DFT =  |\n
          \ |             |                 |                  | BOperiod        |\n
          \ +-------------+-----------------+------------------+-----------------+\n
          \ |             | -> Lose         |  -> Lose         | -               |\n
          \ |             | DF = Sender or  |  DF = Sender;    | Set Best to     |\n
          \ | Backoff     | Target; Stop    |  Stop DFT        | Sender; Send    |\n
          \ |             | DFT             |                  | Backoff; DFT =  |\n
          \ |             |                 |                  | BOperiod        |\n
          \ +-------------+-----------------+------------------+-----------------+\n
          \ +-----------+-------------------------------------------------------+\n
          \ |           |                         Event                         |\n
          \ |           +-------------+-------------+--------------+------------+\n
          \ |Prev State |Recv Backoff |Recv Pass    |Recv Worse    |Recv worse  |\n
          \ |           |for us       |for us       |Pass / Win /  |Offer       |\n
          \ |           |             |             |Backoff       |            |\n
          \ +-----------+-------------+-------------+--------------+------------+\n
          \ |           |-            |-> Win       |-             |-           |\n
          \ |           |DFT =        |Stop DFT     |Set DF to     |DFT ?=      |\n
          \ |Offer      |BOperiod +   |             |Sender or     |OPlow; MC = |\n
          \ |           |OPlow; MC =  |             |Target; DFT   |0           |\n
          \ |           |0            |             |?= OPlow; MC  |            |\n
          \ |           |             |             |= 0           |            |\n
          \ +-----------+-------------+-------------+--------------+------------+\n
          \ |           |-> Offer     |-> Offer     |-> Offer      |-> Offer    |\n
          \ |           |DF = Sender; |DF = Sender; |DF = Sender   |DFT = OPlow;|\n
          \ |Lose       |DFT = OPlow; |DFT = OPlow; |or Target;    |MC = 0      |\n
          \ |           |MC = 0       |MC = 0       |DFT = OPlow;  |            |\n
          \ |           |             |             |MC = 0        |            |\n
          \ +-----------+-------------+-------------+--------------+------------+\n
          \ |           |-> Offer     |-> Offer     |-> Offer      |-           |\n
          \ |           |DF = Sender; |DF = Sender; |DF = Sender   |Send Winner |\n
          \ |Win        |DFT = OPlow; |DFT = OPlow; |or Target;    |            |\n
          \ |           |MC = 0       |MC = 0       |DFT = OPlow;  |            |\n
          \ |           |             |             |MC = 0        |            |\n
          \ +-----------+-------------+-------------+--------------+------------+\n
          \ |           |-> Offer     |-> Offer     |-> Offer      |-> Win      |\n
          \ |           |DF = Sender; |DF = Sender; |DF = Sender   |Send Winner;|\n
          \ |Backoff    |DFT = OPlow; |DFT = OPlow; |or Target;    |Stop DFT    |\n
          \ |           |MC = 0       |MC = 0       |DFT = OPlow;  |            |\n
          \ |           |             |             |MC = 0        |            |\n
          \ +-----------+-------------+-------------+--------------+------------+\n
          \ +--------------------------------------------------------------------+\n
          \ |                          In Offer State                            |\n
          \ +----------------------+----------------------+----------------------+\n
          \ | DFT Expires and MC   | DFT Expires and MC   |  DFT Expires and MC  |\n
          \ | is less than         | is equal to          |  is equal to         |\n
          \ | Robustness           | Robustness and we    |  Robustness and      |\n
          \ |                      | have path to RPA     |  there is no path    |\n
          \ |                      |                      |  to RPA              |\n
          \ +----------------------+----------------------+----------------------+\n
          \ | -                    | -> Win               |  -> Lose             |\n
          \ | Send Offer; DFT =    | Send Winner          |  Set DF to None      |\n
          \ | OPlow; MC = MC + 1   |                      |                      |\n
          \ +----------------------+----------------------+----------------------+\n
          \ +--------------------------------------------------------------------+\n
          \ |                          In Offer State                            |\n
          \ +--------------------------------------------------------------------+\n
          \ |                  Metric changes and is now worse                   |\n
          \ +--------------------------------------------------------------------+\n
          \ |                  DFT ?= OPlow                                      |\n
          \ |                  MC = 0                                            |\n
          \ +--------------------------------------------------------------------+\n
          \ +--------------------------------------------------------------------+\n
          \ |                           In Lose State                            |\n
          \ +------------------------------+-------------------------------------+\n
          \ |     Detect DF Failure        |        Metric changes and now       |\n
          \ |                              |        is better than DF            |\n
          \ +------------------------------+-------------------------------------+\n
          \ |     -> Offer                 |        -> Offer                     |\n
          \ |     DF = None; DFT =         |        DFT = OPlow_int; MC = 0      |\n
          \ |     OPlow_int; MC = 0        |                                     |\n
          \ +------------------------------+-------------------------------------+\n
          \ +--------------------------------------------------------------------+\n
          \ |                           In Win State                             |\n
          \ +----------------------+-----------------------+---------------------+\n
          \ | Metric changes and   |  Timer Expires and    |  Path to RPA lost   |\n
          \ | is now worse         |  MC is less than      |                     |\n
          \ |                      |  Robustness           |                     |\n
          \ +----------------------+-----------------------+---------------------+\n
          \ | -                    |  -                    |  -> Offer           |\n
          \ | DFT = OPlow; MC =    |  Send Winner; DFT =   |  Set DF to None;    |\n
          \ | 0                    |  OPlow; MC = MC + 1   |  DFT = OPlow; MC =  |\n
          \ |                      |                       |  0                  |\n
          \ +----------------------+-----------------------+---------------------+\n
          \ +--------------------------------------------------------------------+\n
          \ |                         In Backoff State                           |\n
          \ +----------------------+-----------------------+---------------------+\n
          \ | Metric changes and   |  Timer Expires        |  Path to RPA lost   |\n
          \ | is now better than   |                       |                     |\n
          \ | Best                 |                       |                     |\n
          \ +----------------------+-----------------------+---------------------+\n
          \ | -> Win               |  -> Lose              |  -> Offer           |\n
          \ | Stop Timer           |  Send Pass; Set DF    |  Set DF to None;    |\n
          \ |                      |  to stored Best       |  DFT = OPlow; MC =  |\n
          \ |                      |                       |  0                  |\n
          \ +----------------------+-----------------------+---------------------+\n"
        title: 3.5.3.5.  Election State Transitions
      title: 3.5.3.  Election Protocol Specification
    - contents:
      - "3.5.4.  Election Reliability Enhancements\n   For the correct operation of
        BIDIR-PIM, it is very important to avoid\n   situations where two routers
        consider themselves to be Designated\n   Forwarders for the same link.  The
        two precautions below are not\n   required for correct operation but can help
        diagnose and correct\n   anomalies.\n"
      title: 3.5.4.  Election Reliability Enhancements
    - contents:
      - "3.5.5.  Missing Pass\n   After a DF has been elected, a router whose metrics
        change to become\n   better than the DF will attempt to take over.  If during
        the re-\n   election the acting DF has a condition that causes it to lose
        all of\n   the election messages (like a CPU overload), the new candidate
        will\n   transmit three offers and assume the role of the forwarder resulting\n
        \  in two DFs on the link.  This situation is pathological and should be\n
        \  corrected by fixing the overloaded router.  It is desirable that such\n
        \  an event can be detected by a network administrator.\n   When a router
        becomes the DF for a link without receiving a Pass\n   message from the known
        old DF, the PIM neighbor information for the\n   old DF can be marked to this
        effect.  Upon receiving the next PIM\n   Hello message from the old DF, the
        router can retransmit Winner\n   messages for all the RPAs for which it is
        acting as the DF.  The\n   anomaly may also be logged by the router in a rate-limited
        manner to\n   alert the operator.\n"
      title: 3.5.5.  Missing Pass
    - contents:
      - "3.5.6.  Periodic Winner Announcement\n   An additional degree of safety can
        be achieved by having the DF for\n   each RPA periodically announce its status
        in a Winner message.\n   Transmission of the periodic Winner message can be
        restricted to\n   occur only for RPAs that have active groups, thus avoiding
        the\n   periodic control traffic in areas of the network without senders or\n
        \  receivers for a particular RPA.\n"
      title: 3.5.6.  Periodic Winner Announcement
    title: 3.5.  Designated Forwarder (DF) Election
  - contents:
    - "3.6.  Timers, Counters, and Constants\n   BIDIR-PIM maintains the following
      timers, as discussed in Section\n   3.1.  All timers are countdown timers -
      they are set to a value and\n   count down to zero, at which point they typically
      trigger an action.\n   Of course they can just as easily be implemented as count-up
      timers,\n   where the absolute expiry time is stored and compared against a
      real-\n   time clock, but the language in this specification assumes that they\n
      \  count downwards to zero.\n   Per Rendezvous-Point Address (RPA):\n      Per
      interface (I):\n         DF Election Timer: DFT(RPA,I)\n   Per Group (G):\n
      \     Upstream Join Timer: JT(G)\n      Per interface (I):\n         Join Expiry
      Timer: ET(G,I)\n         PrunePendingTimer: PPT(G,I)\n   When timers are started
      or restarted, they are set to default values.\n   This section summarizes those
      default values.\n   Timer Name: DF Election Timer (DFT)\n  +-------------------+------------------------+-----------------------+\n
      \ | Value Name        |  Value                 |   Explanation         |\n  +-------------------+------------------------+-----------------------+\n
      \ | Offer_Period      |  100 ms                |   Interval to wait    |\n  |
      \                  |                        |   between repeated    |\n  |                   |
      \                       |   Offer and Winner    |\n  |                   |                        |
      \  messages.           |\n  +-------------------+------------------------+-----------------------+\n
      \ | Backoff_Period    |  1 sec                 |   Period that acting  |\n  |
      \                  |                        |   DF waits between    |\n  |                   |
      \                       |   receiving a better  |\n  |                   |                        |
      \  Offer and sending   |\n  |                   |                        |   the
      Pass message    |\n  |                   |                        |   to transfer
      DF      |\n  |                   |                        |   responsibility.
      \    |\n  +-------------------+------------------------+-----------------------+\n
      \ | OPlow             |  rand(0.5, 1) *        |   Range of actual     |\n  |
      \                  |  Offer_Period          |   randomised value    |\n  |                   |
      \                       |   used between        |\n  |                   |                        |
      \  repeated messages.  |\n  +-------------------+------------------------+-----------------------+\n
      \ | OPhigh            |  Election_Robustness   |   Interval to wait    |\n  |
      \                  |  * Offer_Period        |   in order to give a  |\n  |                   |
      \                       |   chance to a router  |\n  |                   |                        |
      \  with a better       |\n  |                   |                        |   Offer
      to become     |\n  |                   |                        |   the DF.
      \            |\n  +-------------------+------------------------+-----------------------+\n
      \ Timer Names: Join Expiry Timer (ET(G,I))\n  +---------------+---------------+------------------------------------+\n
      \ |Value Name     | Value         | Explanation                        |\n  +---------------+---------------+------------------------------------+\n
      \ |J/P HoldTime   | from message  | Hold Time from Join/Prune Message  |\n  +---------------+---------------+------------------------------------+\n
      \ Timer Names: PrunePendingTimer (PPT(G,I))\n  +-------------------------+-------------------+----------------------+\n
      \ | Value Name              | Value             |  Explanation         |\n  +-------------------------+-------------------+----------------------+\n
      \ | J/P Override Interval   | Default: 3 secs   |  Short period after  |\n  |
      \                        |                   |  a Join or Prune to  |\n  |                         |
      \                  |  allow other         |\n  |                         |                   |
      \ routers on the LAN  |\n  |                         |                   |  to
      override the     |\n  |                         |                   |  Join
      or Prune       |\n  +-------------------------+-------------------+----------------------+\n
      \ Note that the value of the J/P Override Interval is interface specific\n  and
      depends on both the Propagation_Delay and the Override_Interval\n  values that
      may change when Hello messages are received [4].\n  Timer Names: Upstream Join
      Timer (JT(G))\n  +------------+-------------------+-----------------------------------+\n
      \ Value Name   |Value              Explanation                         |\n  +------------+-------------------+-----------------------------------+\n
      \ t_periodic   |Default: 60 secs   Period between Join/Prune Messages  |\n  +------------+-------------------+-----------------------------------+\n
      \ t_suppressed |rand(1.1 *         Suppression period when someone     |\n  |
      \           |t_periodic, 1.4 *  else sends a J/P message so we      |\n  |            |t_periodic)
      \       don't need to do so.                |\n  +------------+-------------------+-----------------------------------+\n
      \ t_override   |rand(0, 0.9 * J/P  Randomized delay to prevent         |\n  |
      \           |Override Interval) response implosion when sending a   |\n  |            |
      \                  Join message to override someone    |\n  |            |                   else's
      Prune message.               |\n  +------------+-------------------+-----------------------------------+\n
      \ For more information about these values, refer to the PIM-SM [4]\n  documentation.\n
      \ Constant Name: DF Election Robustness\n  +-------------------------+------------------+-----------------------+\n
      \ |  Constant Name          |   Value          |   Explanation         |\n  +-------------------------+------------------+-----------------------+\n
      \ |  Election_Robustness    |   Default: 3     |   Minimum number of   |\n  |
      \                        |                  |   election messages   |\n  |                         |
      \                 |   that must be lost   |\n  |                         |                  |
      \  in order for        |\n  |                         |                  |   election
      to fail.   |\n  +-------------------------+------------------+-----------------------+\n"
    title: 3.6.  Timers, Counters, and Constants
  - contents:
    - "3.7.  BIDIR-PIM Packet Formats\n   This section describes the details of the
      packet formats for BIDIR-\n   PIM control messages.  BIDIR-PIM shares a number
      of control messages\n   in common with PIM-SM [4].  These include the Hello
      and Join/Prune\n   messages as well as the format for the Encoded-Unicast address.
      \ For\n   details on the format of these packets, please refer to the PIM-SM\n
      \  documentation.  Here we will only define the additional packets that\n   are
      introduced by BIDIR-PIM.  These are the packets used in the DF\n   election
      process as well as the Bidirectional Capable PIM-Hello\n   option.\n"
    - contents:
      - "3.7.1.  DF Election Packet Formats\n   All PIM control messages have IP protocol
        number 103.\n   BIDIR-PIM messages are multicast with TTL 1 to the `ALL-PIM-ROUTERS'\n
        \  group.  The IPv4 `ALL-PIM-ROUTERS' group is `224.0.0.13'.  The IPv6\n   `ALL-PIM-ROUTERS'
        group is `ff02::d'.\n   All DF election BIDIR-PIM control messages share the
        common header\n   below:\n    0                   1                   2                   3\n
        \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |PIM Ver| Type  |Subtype| Rsvd  |           Checksum            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |               RP Address (Encoded-Unicast format)           ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                   Sender Metric Preference                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                        Sender Metric                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  PIM Ver\n      PIM Version number is 2.\n   Type\n      All DF-Election
        PIM control messages share the PIM message Type of\n      10.\n   Subtype\n
        \  Subtypes for DF election messages are:\n              1 = Offer\n              2
        = Winner\n              3 = Backoff\n              4 = Pass\n   Rsvd\n      Set
        to zero on transmission.  Ignored on receipt.\n   Checksum\n      A standard
        checksum IP checksum is used, i.e., the 16-bit one's\n      complement of
        the one's complement sum of the entire PIM message.\n      For computing the
        checksum, the checksum field is zeroed.\n   RP Address\n      The bidirectional
        RPA for which the election is taking place.  The\n      format is described
        in [4], Section 4.9.1.\n   Sender Metric Preference\n      Preference value
        assigned to the unicast routing protocol that the\n      message sender used
        to obtain the route to the RPA.\n   Sender Metric\n      The unicast routing
        table metric used by the message sender to\n      reach the RPA.  The metric
        is in units applicable to the unicast\n      routing protocol used.\n   In
        addition to the fields defined above, the Backoff and Pass\n   messages have
        the extra fields described below.\n"
      title: 3.7.1.  DF Election Packet Formats
    - contents:
      - "3.7.2.  Backoff Message\n   The Backoff message uses the following fields
        in addition to the\n   common election message format described above.\n    0
        \                  1                   2                   3\n    0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |              Offering Address (Encoded-Unicast format)      ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                  Offering Metric Preference                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                       Offering Metric                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |            Interval           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Offering Address\n      The address of the router that made the last (best)
        Offer.  The\n      format is described in [4], Section 4.9.1.\n   Offering
        Metric Preference\n      Preference value assigned to the unicast routing
        protocol that the\n      offering router used to obtain the route to the RPA.\n
        \  Offering Metric\n      The unicast routing table metric used by the offering
        router to\n      reach the RPA.  The metric is in units applicable to the
        unicast\n      routing protocol used.\n   Interval\n      The backoff interval
        in milliseconds to be used by routers with\n      worse metrics than the offering
        router.\n"
      title: 3.7.2.  Backoff Message
    - contents:
      - "3.7.3.  Pass Message\n   The Pass message uses the following fields in addition
        to the common\n   election fields described above.\n    0                   1
        \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |              New Winner Address (Encoded-Unicast format)    ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                 New Winner Metric Preference                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                      New Winner Metric                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  New Winner Address\n      The address of the router that made the last
        (best) Offer.  The\n      format is described in [4], Section 4.9.1.\n   New
        Winner Metric Preference\n      Preference value assigned to the unicast routing
        protocol that the\n      offering router used to obtain the route to the RPA.\n
        \  New Winner Metric\n      The unicast routing table metric used by the offering
        router to\n      reach the RPA.  The metric is in units applicable to the
        unicast\n      routing protocol used.\n"
      title: 3.7.3.  Pass Message
    - contents:
      - "3.7.4.  Bidirectional Capable PIM-Hello Option\n   BIDIR-PIM introduces one
        new PIM-Hello option.\n   o OptionType 22: Bidirectional Capable\n      0
        \                  1                   2                   3\n      0 1 2
        3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |          Type = 22            |         Length = 0            |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
      title: 3.7.4.  Bidirectional Capable PIM-Hello Option
    title: 3.7.  BIDIR-PIM Packet Formats
  title: 3.  Protocol Specification
- contents:
  - "4.  RP Discovery\n   Routers discover that a range of multicast group addresses
    operates\n   in bidirectional mode, and that the address of the Rendezvous-Point\n
    \  address (RPA) is serving the group range either through static\n   configuration
    or using an automatic RP discovery mechanism like the\n   PIM Bootstrap mechanism
    (BSR) [7] or Auto-RP.\n"
  title: 4.  RP Discovery
- contents:
  - "5.  Security Considerations\n   The IPsec [5] authentication header MAY be used
    to provide data\n   integrity protection and group-wise data origin authentication
    of\n   BIDIR-PIM protocol messages.  Authentication of BIDIR-PIM messages\n   can
    protect against unwanted behaviour caused by unauthorized or\n   altered BIDIR-PIM
    messages.\n"
  - contents:
    - "5.1.  Attacks Based on Forged Messages\n   As in PIM Sparse-Mode, the extent
      of possible damage depends on the\n   type of counterfeit messages accepted.
      \ BIDIR-PIM only uses link-\n   local multicast messages sent to the ALL_PIM_ROUTERS
      address, hence\n   attacks can only be carried out by directly connected nodes,
      or with\n   the complicity of directly connected routers.\n   Some of the BIDIR-PIM
      protocol messages (Join/Prune and Hello) are\n   identical, both in format and
      functionality, to the respective\n   messages used in PIM-SM.  Security considerations
      for these messages\n   are to be found in [4].  Other messages (DF-election
      messages) are\n   specific to BIDIR-PIM and will be discussed in the following\n
      \  paragraphs.\n   By forging DF-election messages, an attacker can disrupt
      the election\n   of the Designated Forwarder on a link in two different ways:\n"
    - contents:
      - "5.1.1.  Election of an Incorrect DF\n   An attacker can force its election
        as DF by participating in a\n   regular election and advertising the best
        metric to reach the RPA.\n   An attacker can also try to force the election
        of another router as\n   DF by sending an Offer, Winner, or Pass message and
        impersonating\n   another router.  In some cases (e.g., the Offer), multiple
        messages\n   might be needed to carry out an attack.\n   In the case of Offer
        or Winner messages, the attacker will have to\n   impersonate the node that
        it wants to have become the DF.  In the\n   case of the Pass, it will have
        to impersonate the current DF.  This\n   type of attack causes the wrong DF
        to be recorded in all nodes apart\n   from the one that is being impersonated.
        \ This node typically will be\n   able to detect the anomaly and, possibly,
        restart a new election.\n   A more sophisticated attacker might carry out
        a concurrent DoS attack\n   on the node being impersonated, so that it will
        not be able to detect\n   the forged packets and/or take countermeasures.\n
        \  All attacks based on impersonation can be detected by all routers and\n
        \  avoided if the source of DF-election messages can be authenticated.\n   When
        authentication is available, spoofed messages MUST be discarded\n   and a
        rate-limited warning message SHOULD be logged.\n   A more subtle attacker
        could use MAC-level addresses to partition the\n   set of recipients of DF-election
        messages and create an inconsistent\n   DF view on the link.  For example,
        the attacker could use unicast MAC\n   addresses for its forged DF-election
        messages.  To prevent this type\n   of attack, BIDIR-PIM routers SHOULD check
        the destination MAC address\n   of received DF-election messages.  This however
        is ineffective on\n   links that do not support layer-2 multicast delivery.\n
        \  Source authentication is also sufficient to prevent this kind of\n   attack.\n"
      title: 5.1.1.  Election of an Incorrect DF
    - contents:
      - "5.1.2.  Preventing Election Convergence\n   By forging DF election messages,
        an attacker can prevent the election\n   from converging, thus disrupting
        the establishment of multicast\n   forwarding trees.  There are many ways
        to achieve this.  The simplest\n   is by sending an infinite sequence of Offer
        messages (the metric used\n   in the messages is not important).\n"
      title: 5.1.2.  Preventing Election Convergence
    title: 5.1.  Attacks Based on Forged Messages
  - contents:
    - "5.2.  Non-Cryptographic Authentication Mechanisms\n   A BIDIR-PIM router SHOULD
      provide an option to limit the set of\n   neighbors from which it will accept
      Join/Prune, Assert, and DF-\n   election messages.  Either static configuration
      of IP addresses or an\n   IPsec security association may be used.  Furthermore,
      a PIM router\n   SHOULD NOT accept protocol messages from a router from which
      it has\n   not yet received a valid Hello message.\n"
    - contents:
      - "5.2.1.  Basic Access Control\n   In a PIM-SM domain, when all routers are
        trusted, it is possible to\n   implement a basic form of access control for
        both sources and\n   receivers: Receivers can be validated by the last-hop
        DR and sources\n   can be validated by the first-hop DR and/or the RP.\n   In
        BIDIR-PIM, this is generally feasible only for receivers, as\n   sources can
        send to the multicast group without the need for routers\n   to detect their
        activity and create source-specific state.  However,\n   it is possible to
        modify the standard BIDIR-PIM behaviour, in a\n   backward compatible way,
        to allow per-source access control.  The\n   tradeoff would be protocol simplicity,
        memory, and processing\n   requirements.\n"
      title: 5.2.1.  Basic Access Control
    title: 5.2.  Non-Cryptographic Authentication Mechanisms
  - contents:
    - "5.3.  Authentication Using IPsec\n   Just as with PIM-SM, the IPsec [5] transport
      mode using the\n   Authentication Header (AH) is the recommended method to prevent
      the\n   above attacks against BIDIR-PIM.\n   It is recommended that IPsec authentication
      be applied to all BIDIR-\n   PIM protocol messages.  The specification on how
      this is done is\n   found in [4].  Specifically, the authentication of PIM-SM
      link-local\n   messages, described in [4], applies to all BIDIR-PIM messages
      as\n   well.\n"
    title: 5.3.  Authentication Using IPsec
  - contents:
    - "5.4.  Denial-of-Service Attacks\n   The denial-of-service attack based on forged
      Join messages, described\n   in [4], also applies to BIDIR-PIM.\n"
    title: 5.4.  Denial-of-Service Attacks
  title: 5.  Security Considerations
- contents:
  - "6.  IANA Considerations\n   IANA has assigned OptionType 22 to the \"Bidirectional
    Capable\"\n   option.\n"
  title: 6.  IANA Considerations
- contents:
  - "7.  Acknowledgments\n   The bidirectional proposal in this document is heavily
    based on the\n   ideas and text presented by Estrin and Farinacci in [6].  The
    main\n   difference between the two proposals is in the method chosen for\n   upstream
    forwarding.\n   We would also like to thank John Zwiebel at Cisco, Deborah Estrin
    at\n   ISI/USC, Bill Fenner at AT&T Research, as well as Nidhi Bhaskar,\n   Yiqun
    Cai, Toerless Eckert, Apoorva Karan, Rajitha Sumanasekera, and\n   Beau Williamson
    at Cisco for their contributions and comments to this\n   document.\n"
  title: 7.  Acknowledgments
- contents:
  - "8.  Normative References\n   [1] Bradner, S., \"Key words for use in RFCs to
    Indicate Requirement\n       Levels\", BCP 14, RFC 2119, March 1997.\n   [2] Cain,
    B., Deering, S., Kouvelas, I., Fenner, B., and A.\n       Thyagarajan, \"Internet
    Group Management Protocol, Version 3\", RFC\n       3376, October 2002.\n   [3]
    Deering, S., Fenner, W., and B. Haberman, \"Multicast Listener\n       Discovery
    (MLD) for IPv6\", RFC 2710, October 1999.\n   [4] Fenner, B., Handley, M., Holbrook,
    H., and I. Kouvelas, \"Protocol\n       Independent Multicast - Sparse Mode (PIM-SM):
    Protocol\n       Specification (Revised)\", RFC 4601, August 2006.\n   [5] Kent,
    S. and R. Atkinson, \"Security Architecture for the Internet\n       Protocol\",
    RFC 2401, November 1998.\n"
  title: 8.  Normative References
- contents:
  - "9.  Informative References\n   [6] Estrin, D. and D. Farinacci, \"Bi-directional
    Shared Trees in\n       PIM-SM\", Work in Progress, May 1999.\n   [7] Bhaskar,
    N., Gall, A., Lingard, J., and S. Venaas, \"Bootstrap\n       Router (BSR) Mechanism
    for PIM\", Work in Progress, February 2007.\n   [8] Bates, T., Chandra, R., Katz,
    D., and Y. Rekhter, \"Multiprotocol\n       Extensions for BGP-4\", RFC 4760,
    January 2007.\n"
  title: 9.  Informative References
- contents:
  - "Index\n   DF. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .5,18\n
    \  Downstream. . . . . . . . . . . . . . . . . . . . . . . . . . . .   5\n   DownstreamJPState(G,I).
    . . . . . . . . . . . . . . . . . . . . .  10\n   ET(G,I) . . . . . . . . . .
    . . . . . . . . . . . . . . . . . 9,14,33\n   ET(RPA,I) . . . . . . . . . . .
    . . . . . . . . . . . . . . . . .  10\n   I_am_DF(RPA,I). . . . . . . . . . .
    . . . . . . . . . . . . .10,12,14\n   J/P_HoldTime. . . . . . . . . . . . . .
    . . . . . . . . . . . . .  33\n   J/P_Override_Interval . . . . . . . . . . .
    . . . . . . . . . . 16,33\n   JoinDesired(G). . . . . . . . . . . . . . . . .
    . . . . . . . . .  18\n   joins(G). . . . . . . . . . . . . . . . . . . . . .
    . . . . . . .  10\n   JT(*,G) . . . . . . . . . . . . . . . . . . . . . . . .
    . . . . .  17\n   JT(G) . . . . . . . . . . . . . . . . . . . . . . . . . . .
    . .  9,33\n   local_receiver_include(G,I) . . . . . . . . . . . . . . . . . .
    .  10\n   MFIB. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   6\n
    \  NLT(N,I). . . . . . . . . . . . . . . . . . . . . . . . . . . . .   8\n   Offer_Period.
    . . . . . . . . . . . . . . . . . . . . . . . . . .  32\n   olist(G). . . . .
    . . . . . . . . . . . . . . . . . . . . . .10,12,18\n   Bidirectional Capable
    OptionType  . . . . . . . . . . . . . . . .  37\n   pim_include(G). . . . . .
    . . . . . . . . . . . . . . . . . . . .  10\n   PPT(G,I). . . . . . . . . . .
    . . . . . . . . . . . . . . . . 9,14,33\n   RPA . . . . . . . . . . . . . . .
    . . . . . . . . . . . . . . . .   4\n   RPF_interface(RPA). . . . . . . . . .
    . . . . . . . . . . . . . 10,12\n   RPL . . . . . . . . . . . . . . . . . . .
    . . . . . . . . . . . .   4\n   TIB . . . . . . . . . . . . . . . . . . . . .
    . . . . . . . . . .   5\n   t_override. . . . . . . . . . . . . . . . . . . .
    . . . . . . . 17,33\n   t_periodic. . . . . . . . . . . . . . . . . . . . . .
    . . . . . 17,33\n   t_suppressed. . . . . . . . . . . . . . . . . . . . . . .
    . . . 17,33\n   Upstream. . . . . . . . . . . . . . . . . . . . . . . . . . .
    . .   5\n"
  title: Index
- contents:
  - "Authors' Addresses\n   Mark Handley\n   Computer Science Department\n   University
    College London\n   EMail: M.Handley@cs.ucl.ac.uk\n   Isidor Kouvelas\n   Cisco
    Systems\n   EMail: kouvelas@cisco.com\n   Tony Speakman\n   Cisco Systems\n   EMail:
    speakman@cisco.com\n   Lorenzo Vicisano\n   Digital Fountain\n   EMail: lorenzo@digitalfountain.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
