- title: __initial_text__
  contents:
  - '                   HTTP Header Field X-Frame-Options

    '
- title: Abstract
  contents:
  - "Abstract\n   To improve the protection of web applications against clickjacking,\n\
    \   this document describes the X-Frame-Options HTTP header field, which\n   declares\
    \ a policy, communicated from the server to the client\n   browser, regarding\
    \ whether the browser may display the transmitted\n   content in frames that are\
    \ part of other web pages.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7034.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n     1.1.  Requirements Language  . . . . . . . . . . . . .\
    \ . . . . .  3\n   2.  X-Frame-Options Header . . . . . . . . . . . . . . . .\
    \ . . . .  4\n     2.1.  Syntax . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  4\n     2.2.  Augmented Backus-Naur Form (ABNF)  . . . . . . . . . .\
    \ . .  5\n       2.2.1.  Examples of X-Frame-Options  . . . . . . . . . . . .\
    \ .  6\n     2.3.  Design Issues  . . . . . . . . . . . . . . . . . . . . . .\
    \  6\n       2.3.1.  Enable HTML Content from Other Domains . . . . . . . .  6\n\
    \       2.3.2.  Browser Behavior and Processing  . . . . . . . . . . .  6\n  \
    \       2.3.2.1.  Violation of X-Frame-Options . . . . . . . . . . .  6\n    \
    \     2.3.2.2.  Variation in Current Browser Behavior  . . . . . .  7\n      \
    \   2.3.2.3.  Usage Design Pattern and Example Scenario for\n                \
    \   the ALLOW-FROM Parameter . . . . . . . . . . . . .  8\n         2.3.2.4. \
    \ No Caching of the X-Frame-Options Header . . . . .  8\n   3.  IANA Considerations\
    \  . . . . . . . . . . . . . . . . . . . . .  9\n     3.1.  Registration Template\
    \  . . . . . . . . . . . . . . . . . .  9\n   4.  Security Considerations  . .\
    \ . . . . . . . . . . . . . . . . .  9\n     4.1.  Privacy Considerations . .\
    \ . . . . . . . . . . . . . . . . 10\n   5.  References . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . 10\n     5.1.  Normative References . . . . .\
    \ . . . . . . . . . . . . . . 10\n     5.2.  Informative References . . . . .\
    \ . . . . . . . . . . . . . 11\n   Appendix A.  Browsers That Support X-Frame-Options\
    \ . . . . . . . . 13\n   Appendix B.  Description of a Clickjacking Attack  .\
    \ . . . . . . . 13\n     B.1.  Shop . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . 13\n     B.2.  Online Shop Confirm Purchase Page  . . . . . . .\
    \ . . . . . 13\n     B.3.  Flash Configuration  . . . . . . . . . . . . . . .\
    \ . . . . 13\n   Appendix C.  Acknowledgements  . . . . . . . . . . . . . . .\
    \ . . . 13\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   In 2009 and 2010, many browser vendors ([Microsoft-X-Frame-Options],\n\
    \   [CLICK-DEFENSE-BLOG], and [Mozilla-X-Frame-Options]) introduced the\n   use\
    \ of a non-standard HTTP [RFC2616] header field \"X-Frame-Options\"\n   to protect\
    \ against clickjacking [Clickjacking].  HTML-based web\n   applications can embed\
    \ or \"frame\" other web pages.  Clickjacking is a\n   type of attack that occurs\
    \ when an attacker uses multiple transparent\n   or opaque layers in the user\
    \ interface to trick a user into clicking\n   on a button or link on another page\
    \ from server B when they were\n   intending to click on the same place of the\
    \ overlaying page from\n   server A.  Thus, the attacker is \"hijacking\" clicks\
    \ meant for page A\n   and routing them to page B.  The attacker is tricking the\
    \ user (who\n   sees the overlaying user interface content from page A) into clicking\n\
    \   specific locations on the underlying page from server B, triggering\n   some\
    \ actions on server B and potentially using an existing session\n   context in\
    \ that step.  This is an attack on both the user and on\n   server B.  In addition,\
    \ server A may or may not be the attacker.\n   This specification provides informational\
    \ documentation about the\n   current use and definition of the X-Frame-Options\
    \ HTTP header field.\n   As described in Section 2.3.2.2, not all browsers implement\n\
    \   X-Frame-Options in exactly the same way, which can lead to unintended\n  \
    \ results.  And, given that the \"X-\" construction is deprecated\n   [RFC6648],\
    \ the X-Frame-Options header field will be replaced in the\n   future by the Frame-Options\
    \ directive in the Content Security Policy\n   (CSP) version 1.1 [CSP-1-1].\n\
    \   A study [FRAME-BUSTING] demonstrated that existing anti-clickjacking\n   measures,\
    \ e.g., frame-breaking JavaScript, have weaknesses that allow\n   their protection\
    \ to be circumvented.\n   Short of configuring the browser to disable frames and\
    \ scripts\n   entirely, which massively impairs browser utility, browser users\
    \ are\n   vulnerable to this type of attack.\n   The use of \"X-Frame-Options\"\
    \ allows a web page from host B to declare\n   that its content (for example,\
    \ a button, links, text, etc.) must not\n   be displayed in a frame (<frame> or\
    \ <iframe>) of another page (e.g.,\n   from host A).  This is done by a policy\
    \ declared in the HTTP header\n   and enforced by browser implementations as documented\
    \ here.\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 2.  X-Frame-Options Header
  contents:
  - "2.  X-Frame-Options Header\n   The X-Frame-Options HTTP header field indicates\
    \ a policy that\n   specifies whether the browser should render the transmitted\
    \ resource\n   within a <frame> or an <iframe>.  Servers can declare this policy\
    \ in\n   the header of their HTTP responses to prevent clickjacking attacks,\n\
    \   which ensures that their content is not embedded into other pages or\n   frames.\n"
- title: 2.1.  Syntax
  contents:
  - "2.1.  Syntax\n   The header field name is:\n      X-Frame-Options\n   There are\
    \ three different values for the header field.  These values\n   are mutually\
    \ exclusive; that is, the header field MUST be set to\n   exactly one of the three\
    \ values.\n   DENY\n      A browser receiving content with this header field MUST\
    \ NOT\n      display this content in any frame.\n   SAMEORIGIN\n      A browser\
    \ receiving content with this header field MUST NOT\n      display this content\
    \ in any frame from a page of different origin\n      than the content itself.\n\
    \      If a browser or plugin cannot reliably determine whether or not\n     \
    \ the origin of the content and the frame are the same, this MUST be\n      treated\
    \ as \"DENY\".\n      Please note that current implementations vary on the\n \
    \     interpretation of this criteria.  In some, it only allows a page\n     \
    \ to be framed if the origin of the top-level browsing context is\n      identical\
    \ to the origin of the content using the X-Frame-Options\n      directive; in\
    \ others, it may consider the origin of the framing\n      page instead.  Also\
    \ see Section 2.3.2.2 for more details on the\n      nesting of frames and variations\
    \ in the handling of this header\n      field by different browsers.  In addition,\
    \ refer to Section 4,\n      paragraph 2 for the resulting potential security\
    \ problems.\n   ALLOW-FROM  (followed by a serialized-origin [RFC6454])\n    \
    \  A browser receiving content with this header MUST NOT display this\n      content\
    \ in a frame from any page with a top-level browsing context\n      of different\
    \ origin than the specified origin.  While this can\n      expose the page to\
    \ risks by the trusted origin, in some cases, it\n      may be necessary to allow\
    \ the framing by content from other\n      domains.\n   The meaning of the term\
    \ \"serialized-origin\" is given in [RFC6454].\n   If the ALLOW-FROM value is\
    \ used, it MUST be followed by a valid\n   origin [RFC6454] (as a subset of the\
    \ URI [RFC3986]).\n   Any data beyond the domain address (i.e., any data after\
    \ the \"/\"\n   separator) is to be ignored.  The algorithm to compare origins\
    \ from\n   [RFC6454] SHOULD be used to verify that a referring page is of the\n\
    \   same origin as the content (in the case of SAMEORIGIN) or that the\n   referring\
    \ page's origin is identical with the ALLOW-FROM serialized-\n   origin (in the\
    \ case of ALLOW-FROM).  Though in conflict with\n   [RFC6454], current implementations\
    \ do not consider the port as a\n   defining component of the origin; i.e., existing\
    \ implementations\n   differ with [RFC6454] in that origins with the same protocol\
    \ but\n   different port values are considered equivalent.\n   Wildcards or lists\
    \ to declare multiple domains in one ALLOW-FROM\n   statement are not permitted\
    \ (see Section 2.3.2.3).\n"
- title: 2.2.   Augmented Backus-Naur Form (ABNF)
  contents:
  - "2.2.   Augmented Backus-Naur Form (ABNF)\n   The RFC 5234 [RFC5234] ABNF of the\
    \ X-Frame-Options header field value\n   is the following:\n         X-Frame-Options\
    \ = \"DENY\"\n                   / \"SAMEORIGIN\"\n                   / ( \"ALLOW-FROM\"\
    \ RWS SERIALIZED-ORIGIN )\n         RWS             = 1*( SP / HTAB )\n      \
    \                 ; required whitespace\n   with serialized-origin as defined\
    \ in [RFC6454] and required\n   whitespace (RWS) as defined in [HTTPbis-P1].\n\
    \   RWS is used when at least one linear whitespace octet is required to\n   separate\
    \ field tokens.  RWS SHOULD be generated as a single space\n   (SP).  Multiple\
    \ RWS octets that occur within field-content SHOULD\n   either be replaced with\
    \ a SP or transformed to all SP octets before\n   interpreting the field value\
    \ or forwarding the message downstream.\n   SP and horizontal tab (HTAB) are as\
    \ defined in Appendix B.1 of RFC\n   5234 [RFC5234].\n   The values are specified\
    \ as ABNF strings; therefore, they are case-\n   insensitive.\n"
- title: 2.2.1.  Examples of X-Frame-Options
  contents:
  - "2.2.1.  Examples of X-Frame-Options\n       X-Frame-Options: DENY\n       X-Frame-Options:\
    \ SAMEORIGIN\n       X-Frame-Options: ALLOW-FROM https://example.com/\n"
- title: 2.3.  Design Issues
  contents:
  - '2.3.  Design Issues

    '
- title: 2.3.1.  Enable HTML Content from Other Domains
  contents:
  - "2.3.1.  Enable HTML Content from Other Domains\n   There are a number of main\
    \ direct vectors that enable HTML content\n   from other domains, and browser\
    \ implementations of X-Frame-Options\n   cover all of them:\n   o  IFRAME tag\n\
    \   o  Frame tag\n   o  Object tag (requires a redirect)\n   o  Applet tag\n \
    \  o  Embed tag\n   Besides these, other ways to host HTML content can be possible.\
    \  For\n   example, some plugins may host HTML views directly.  If these plugins\n\
    \   appear essentially as frames (as opposed to top-level windows), the\n   plugins\
    \ must conform to the X-Frame-Options policy as specified in\n   this document\
    \ as well.\n"
- title: 2.3.2.  Browser Behavior and Processing
  contents:
  - "2.3.2.  Browser Behavior and Processing\n   To allow secure implementations,\
    \ browsers must behave in a consistent\n   and reliable way.\n   If an X-Frame-Options\
    \ HTTP header field prohibits framing, the user\n   agent of the browser MAY immediately\
    \ abort downloading or parsing of\n   the document.\n"
- title: 2.3.2.1.  Violation of X-Frame-Options
  contents:
  - "2.3.2.1.  Violation of X-Frame-Options\n   When a browser discovers that loaded\
    \ content with the X-Frame-Options\n   header field would be displayed in a frame\
    \ against the specified\n   orders of the header, the browser SHOULD redirect\
    \ to a \"NOFRAME\" page\n   as soon as possible.  For example, this can be a noframe.html\
    \ page\n   that also states the full URL and hostname of the protected page.\n\
    \   The NOFRAME page could provide the user with an option to open the\n   target\
    \ URL in a new window.\n   Implementations of this vary: some browsers will show\
    \ a message that\n   allows the user to safely open the target page in a new window,\n\
    \   whereas other implementations will simply render an empty frame.\n"
- title: 2.3.2.2.  Variation in Current Browser Behavior
  contents:
  - "2.3.2.2.  Variation in Current Browser Behavior\n   There are currently variations\
    \ in the implementation of the\n   X-Frame-Options header.  For example, not all\
    \ browsers support the\n   \"ALLOW-FROM\" option.  \"ALLOW-FROM\" was initially\
    \ an Internet Explorer\n   extension and, at the time of writing, has not been\
    \ uniformly\n   implemented by other user agents.\n   Furthermore, the criteria\
    \ for the SAMEORIGIN (and ALLOW-FROM)\n   directive may not be evaluated unanimously\
    \ either: the known\n   implementations in Appendix A evaluate the SAMEORIGIN\
    \ directive based\n   on the origin of the framed page and the top-level browsing\
    \ context,\n   while other implementations might evaluate it based on the framed\n\
    \   page and the framing page, or the whole chain of nested frames in\n   between.\n\
    \   To illustrate the difference between the comparison of the \"framing\n   page\"\
    \ and the \"top-level browsing context\", consider the following\n   scenario:\
    \ web pages may embed frames with other pages that, in turn,\n   embed frames\
    \ with other pages as well, and so on.  In theory, this\n   can result in an infinite\
    \ nesting of framed pages.  For example, web\n   page A may contain web page B\
    \ in a frame, and web page B may contain\n   web page C in a frame.\n   Web page\
    \ A\n   <html>\n   ....\n   <frame src=\"https://URI_of_web_page_B\" />\n   </html>\n\
    \   Web page B\n   <html>\n   ....\n   <frame src=\"https://URI_of_web_page_C\"\
    \ />\n   </html>\n   and so forth.\n   In this example, for the nested frames\
    \ with the inner-framed web page\n   C, the most outer web page A would be the\
    \ \"top-level browsing\n   context\", and web page B would be the \"framing page\"\
    .\n   These potential variations in the evaluation of the header by\n   different\
    \ implementations impair the usage and reliability of this\n   HTTP header and\
    \ have security implications as described in Section 4.\n   A revised version\
    \ of X-Frame-Options in the form of a Frame-Options\n   directive in CSP 1.1 [CSP-1-1]\
    \ will unify the behavior, and it is\n   expected that newer implementations will\
    \ use it rather than the\n   mechanisms documented here.\n"
- title: 2.3.2.3.  Usage Design Pattern and Example Scenario for the ALLOW-FROM
  contents:
  - "2.3.2.3.  Usage Design Pattern and Example Scenario for the ALLOW-FROM\n    \
    \      Parameter\n   As the \"ALLOW-FROM\" field only supports one serialized-origin,\
    \ in\n   cases when the server wishes to allow more than one resource to frame\n\
    \   its content, the following design pattern can fulfill that need:\n   1.  A\
    \ page that wants to render the requested content in a frame\n       supplies\
    \ its own origin information to the server providing the\n       content to be\
    \ framed via a query string parameter.\n   2.  The server verifies that the hostname\
    \ meets its criteria, so that\n       the page is allowed to be framed by the\
    \ target resource.  This\n       may, for example, happen via a lookup of a whitelist\
    \ of trusted\n       domain names that are allowed to frame the page.  For example,\n\
    \       for a Facebook \"Like\" button, the server can check to see that\n   \
    \    the supplied hostname matches the hostname(s) expected for that\n       \"\
    Like\" button.\n   3.  The server returns the hostname in \"X-Frame-Options: ALLOW-FROM\"\
    \n       if the proper criteria was met in step #2.\n   4.  The browser enforces\
    \ the \"X-Frame-Options: ALLOW-FROM\" header.\n"
- title: 2.3.2.4.  No Caching of the X-Frame-Options Header
  contents:
  - "2.3.2.4.  No Caching of the X-Frame-Options Header\n   Caching the X-Frame-Options\
    \ header for a resource is not recommended.\n   Caching the X-Frame-Options response\
    \ could result in problems\n   because:\n   1.  For every http-request of the\
    \ resource, the browser has to check\n       whether the X-Frame-Options header\
    \ has been set and then act\n       accordingly, as a resource itself might be\
    \ created dynamically\n       and the header could change with it, too.\n   2.\
    \  Also, as outlined in Section 2.3.2.3, servers may generate\n       X-Frame-Options\
    \ header responses depending on the request.\n       Example case: Considering\
    \ that we have only one serialized-origin\n       in the ALLOW-FROM directive,\
    \ imagine a user has multiple pages\n       open in his browser tabs with web\
    \ page 1 from domain A and web\n       page 2 from domain B, and both frame the\
    \ same page from domain C\n       with the ALLOW-FROM directive.  In that case,\
    \ the page needs to\n       reply to both requests with different X-Frame-Options\
    \ headers,\n       with the first pointing to origin A and the second pointing\
    \ to\n       origin B.\n   However, we found that none of the major browsers listed\
    \ in\n   Appendix A cache the responses.\n"
- title: 3.  IANA Considerations
  contents:
  - "3.  IANA Considerations\n   IANA has included the specified HTTP header in the\
    \ \"Permanent Message\n   Header Field Name\" registry as outlined in \"Registration\
    \ Procedures\n   for Message Header Fields\" [RFC3864].\n"
- title: 3.1.  Registration Template
  contents:
  - "3.1.  Registration Template\n   Permanent Message Header Field Names Template:\n\
    \   Header field name: X-Frame-Options\n   Applicable protocol: http [RFC2616]\n\
    \   Status: Informational\n   Author/change controller: IETF\n   Specification\
    \ document(s): RFC 7034\n   Related information: None\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   The introduction of the X-Frame-Options HTTP\
    \ header field improves\n   the protection against clickjacking.  However, it\
    \ is not self-\n   sufficient enough to protect against all kinds of these attack\n\
    \   vectors.  It must be used in conjunction with other security measures\n  \
    \ like secure coding (e.g., input validation, output encoding, etc.)\n   and the\
    \ Content Security Policy version 1.0 [CSP].\n   It is important to note that\
    \ current implementations do not check the\n   origins of the framing resources'\
    \ entire ancestor tree of frames, and\n   this may expose the resource to attack\
    \ in multiple-nested scenarios.\n   The browser implementations evaluate based\
    \ on the origin of the\n   framed page and the top-level browsing context (i.e.,\
    \ the most outer\n   frame):\n   If a resource from origin A embeds untrusted\
    \ content from origin B,\n   that untrusted content can embed another resource\
    \ from origin A with\n   an \"X-Frame-Options: SAMEORIGIN\" policy, and that check\
    \ would pass\n   when the user agent only verifies the top-level browsing context.\n\
    \   Therefore, web developers should be aware that embedding content from\n  \
    \ other sites can leave their web pages vulnerable to clickjacking even\n   if\
    \ the X-Frame-Options header is used.\n   Furthermore, X-Frame-Options must be\
    \ sent as an HTTP header field and\n   is explicitly ignored by user agents when\
    \ declared with a meta\n   http-equiv tag.\n"
- title: 4.1.  Privacy Considerations
  contents:
  - "4.1.  Privacy Considerations\n   There are two kinds of potential data leakage\
    \ to consider:\n   1.  Using X-Frame-Options with the parameter ALLOW-FROM allows\
    \ a page\n       to guess or infer information about who is framing it.  A web\n\
    \       server may answer requests with the \"X-Frame-Options: ALLOW-FROM\"\n\
    \       header and thus determine which other page is framing it.  This\n    \
    \   is inherent by design, but it may lead to data-leakage or data-\n       protection\
    \ concerns.\n   2.  The web server using the ALLOW-FROM directive effectively\n\
    \       discloses the origin specified in the header.  If a web server\n     \
    \  wishes to reduce this leakage, it is recommended to generate the\n       ALLOW-FROM\
    \ header for each request based on the design pattern as\n       described in\
    \ Section 2.3.2.3.\n"
- title: 5.  References
  contents:
  - '5.  References

    '
- title: 5.1.  Normative References
  contents:
  - "5.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n\
    \              Resource Identifier (URI): Generic Syntax\", STD 66,\n        \
    \      RFC 3986, January 2005.\n   [RFC5234]  Crocker, D. and P. Overell, \"Augmented\
    \ BNF for Syntax\n              Specifications: ABNF\", STD 68, RFC 5234, January\
    \ 2008.\n   [RFC6454]  Barth, A., \"The Web Origin Concept\", RFC 6454,\n    \
    \          December 2011.\n"
- title: 5.2.  Informative References
  contents:
  - "5.2.  Informative References\n   [CLICK-DEFENSE-BLOG]\n              Lawrence,\
    \ E., \"IE8 Security Part VII: Clickjacking\n              Defenses\", Microsoft\
    \ Developer Network Blogs,\n              January 2009, <http://blogs.msdn.com/b/ie/archive/2009/01/\n\
    \              27/ie8-security-part-vii-clickjacking-defenses.aspx>.\n   [CSP]\
    \      Sterne, B. and A. Barth, \"Content Security Policy 1.0\",\n           \
    \   W3C Candidate Recommendation CR-CSP-20121115,\n              November 2012,\n\
    \              <http://www.w3.org/TR/2012/CR-CSP-20121115/>.\n   [CSP-1-1]  Barth,\
    \ A. and M. West, \"Content Security Policy 1.1\", W3C\n              Working\
    \ Draft WD-CSP11-20130604, June 2013,\n              <http://www.w3.org/TR/2013/WD-CSP11-20130604/>.\n\
    \   [CSRF]     OWASP (Open Web Application Security Project), \"Top-10\n     \
    \         2013-A8-Cross-Site Request Forgery (CSRF)\", June 2013,\n          \
    \    <https://www.owasp.org/index.php/\n              Top_10_2013-A8-Cross-Site_Request_Forgery_%28CSRF%29>.\n\
    \   [Clickjacking]\n              OWASP (Open Web Application Security Project),\n\
    \              \"Clickjacking\", April 2013,\n              <http://www.owasp.org/index.php/Clickjacking>.\n\
    \   [FRAME-BUSTING]\n              Stanford Web Security Research, \"Busting frame\
    \ busting: a\n              study of clickjacking vulnerabilities at popular sites\"\
    ,\n              July 2010,\n              <http://seclab.stanford.edu/websec/framebusting/>.\n\
    \   [HTTPbis-P1]\n              Fielding, R. and J. Reschke, \"Hypertext Transfer\
    \ Protocol\n              (HTTP/1.1): Message Syntax and Routing\", Work in Progress,\n\
    \              September 2013.\n   [Microsoft-X-Frame-Options]\n             \
    \ Lawrence, E., \"Combating ClickJacking With X-Frame-\n              Options\"\
    , Microsoft Developer Network Blogs, March 2010,\n              <http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/\n\
    \              combating-clickjacking-with-x-frame-options.aspx>.\n   [Mozilla-X-Frame-Options]\n\
    \              Mozilla Developer Network, \"The X-Frame-Options response\n   \
    \           header\", August 2013, <https://developer.mozilla.org/\n         \
    \     en-US/docs/The_X-FRAME-OPTIONS_response_header>.\n   [RFC2616]  Fielding,\
    \ R., Gettys, J., Mogul, J., Frystyk, H.,\n              Masinter, L., Leach,\
    \ P., and T. Berners-Lee, \"Hypertext\n              Transfer Protocol -- HTTP/1.1\"\
    , RFC 2616, June 1999.\n   [RFC3864]  Klyne, G., Nottingham, M., and J. Mogul,\
    \ \"Registration\n              Procedures for Message Header Fields\", BCP 90,\
    \ RFC 3864,\n              September 2004.\n   [RFC6648]  Saint-Andre, P., Crocker,\
    \ D., and M. Nottingham,\n              \"Deprecating the \"X-\" Prefix and Similar\
    \ Constructs in\n              Application Protocols\", BCP 178, RFC 6648, June\
    \ 2012.\n"
- title: Appendix A.  Browsers That Support X-Frame-Options
  contents:
  - "Appendix A.  Browsers That Support X-Frame-Options\n   o  Internet Explorer 8+\n\
    \   o  Firefox 3.6.9+\n   o  Opera 10.5+\n   o  Safari 4+\n   o  Chrome 4.1+\n"
- title: Appendix B.  Description of a Clickjacking Attack
  contents:
  - "Appendix B.  Description of a Clickjacking Attack\n   A more detailed explanation\
    \ of clickjacking scenarios follows.\n"
- title: B.1.  Shop
  contents:
  - "B.1.  Shop\n   An Internet marketplace/shop offering a feature with a link/button\
    \ to\n   \"Buy this\" gadget wants their affiliates (who could be malicious\n\
    \   attackers) to be able to stick the \"Buy such and such from XYZ\"\n   IFRAMES\
    \ into their pages.  There is a possible clickjacking threat\n   here, which is\
    \ why the marketplace/online shop needs to then\n   immediately navigate the main\
    \ browsing context (or a new window) to a\n   confirmation page that is protected\
    \ by anti-clickjacking protections.\n"
- title: B.2.  Online Shop Confirm Purchase Page
  contents:
  - "B.2.  Online Shop Confirm Purchase Page\n   The \"Confirm Purchase\" page of\
    \ an online shop must be shown to the\n   end-user without the risk of an overlay\
    \ or misuse by an attacker.\n   For that reason, the confirmation page uses a\
    \ combination of\n   anti-CSRF (Cross Site Request Forgery [CSRF]) tokens and\
    \ the\n   X-Frame-Options HTTP header field, mitigating clickjacking attacks.\n"
- title: B.3.  Flash Configuration
  contents:
  - "B.3.  Flash Configuration\n   Macromedia Flash configuration settings are set\
    \ by a Flash object\n   that can run only from a specific configuration page on\
    \ Macromedia's\n   site.  The object runs inside the page and thus can be subject\
    \ to a\n   clickjacking attack.  In order to prevent clickjacking attacks\n  \
    \ against the security settings, the configuration page uses the\n   X-Frame-Options\
    \ directive.\n"
- title: Appendix C.  Acknowledgements
  contents:
  - "Appendix C.  Acknowledgements\n   This document was derived from input from specifications\
    \ published by\n   various browser vendors such as Microsoft (Eric Lawrence and\
    \ David\n   Ross), Mozilla, Google, Opera, and Apple.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   David Ross\n   Microsoft\n   EMail: dross@microsoft.com\n\
    \   Tobias Gondrom\n   Thames Stanley\n   EMail: tobias.gondrom@gondrom.org\n"
