- title: __initial_text__
  contents:
  - "                    AES-GCM Authenticated Encryption\n           in the Secure\
    \ Real-time Transport Protocol (SRTP)\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines how the AES-GCM Authenticated Encryption with\n\
    \   Associated Data family of algorithms can be used to provide\n   confidentiality\
    \ and data authentication in the Secure Real-time\n   Transport Protocol (SRTP).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7714.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Conventions Used in This Document ...............................4\n  \
    \ 3. Overview of the SRTP/SRTCP AEAD Security Architecture ...........4\n   4.\
    \ Terminology .....................................................5\n   5. Generic\
    \ AEAD Processing .........................................6\n      5.1. Types\
    \ of Input Data ........................................6\n      5.2. AEAD Invocation\
    \ Inputs and Outputs .........................6\n           5.2.1. Encrypt Mode\
    \ ........................................6\n           5.2.2. Decrypt Mode ........................................7\n\
    \      5.3. Handling of AEAD Authentication ............................7\n  \
    \ 6. Counter Mode Encryption .........................................7\n   7.\
    \ Unneeded SRTP/SRTCP Fields ......................................8\n      7.1.\
    \ SRTP/SRTCP Authentication Tag Field ........................8\n      7.2. RTP\
    \ Padding ................................................9\n   8. AES-GCM Processing\
    \ for SRTP .....................................9\n      8.1. SRTP IV Formation\
    \ for AES-GCM ..............................9\n      8.2. Data Types in SRTP Packets\
    \ ................................10\n      8.3. Handling Header Extensions ................................11\n\
    \      8.4. Prevention of SRTP IV Reuse ...............................12\n  \
    \ 9. AES-GCM Processing of SRTCP Compound Packets ...................13\n    \
    \  9.1. SRTCP IV Formation for AES-GCM ............................13\n      9.2.\
    \ Data Types in Encrypted SRTCP Compound Packets ............14\n      9.3. Data\
    \ Types in Unencrypted SRTCP Compound Packets ..........16\n      9.4. Prevention\
    \ of SRTCP IV Reuse ..............................17\n   10. Constraints on AEAD\
    \ for SRTP and SRTCP ........................17\n   11. Key Derivation Functions\
    \ ......................................18\n   12. Summary of AES-GCM in SRTP/SRTCP\
    \ ..............................19\n   13. Security Considerations .......................................20\n\
    \      13.1. Handling of Security-Critical Parameters .................20\n  \
    \    13.2. Size of the Authentication Tag ...........................21\n   14.\
    \ IANA Considerations ...........................................21\n      14.1.\
    \ SDES .....................................................21\n      14.2. DTLS-SRTP\
    \ ................................................22\n      14.3. MIKEY ....................................................23\n\
    \   15. Parameters for Use with MIKEY .................................23\n  \
    \ 16. Some RTP Test Vectors .........................................24\n    \
    \  16.1. SRTP AEAD_AES_128_GCM ....................................25\n      \
    \     16.1.1. SRTP AEAD_AES_128_GCM Encryption ..................25\n        \
    \   16.1.2. SRTP AEAD_AES_128_GCM Decryption ..................27\n          \
    \ 16.1.3. SRTP AEAD_AES_128_GCM Authentication Tagging ......29\n           16.1.4.\
    \ SRTP AEAD_AES_128_GCM Tag Verification ............30\n      16.2. SRTP AEAD_AES_256_GCM\
    \ ....................................31\n           16.2.1. SRTP AEAD_AES_256_GCM\
    \ Encryption ..................31\n           16.2.2. SRTP AEAD_AES_256_GCM Decryption\
    \ ..................33\n           16.2.3. SRTP AEAD_AES_256_GCM Authentication\
    \ Tagging ......35\n           16.2.4. SRTP AEAD_AES_256_GCM Tag Verification\
    \ ............36\n   17. RTCP Test Vectors .............................................37\n\
    \      17.1. SRTCP AEAD_AES_128_GCM Encryption and Tagging ............39\n  \
    \    17.2. SRTCP AEAD_AES_256_GCM Verification and Decryption .......41\n    \
    \  17.3. SRTCP AEAD_AES_128_GCM Tagging Only ......................43\n      17.4.\
    \ SRTCP AEAD_AES_256_GCM Tag Verification ..................44\n   18. References\
    \ ....................................................45\n      18.1. Normative\
    \ References .....................................45\n      18.2. Informative\
    \ References ...................................47\n   Acknowledgements ..................................................48\n\
    \   Authors' Addresses ................................................48\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Secure Real-time Transport Protocol (SRTP) [RFC3711]\
    \ is a profile\n   of the Real-time Transport Protocol (RTP) [RFC3550], which\
    \ can\n   provide confidentiality, message authentication, and replay\n   protection\
    \ to the RTP traffic and to the control traffic for RTP, the\n   Real-time Transport\
    \ Control Protocol (RTCP).  It is important to note\n   that the outgoing SRTP\
    \ packets from a single endpoint may be\n   originating from several independent\
    \ data sources.\n   Authenticated Encryption [BN00] is a form of encryption that,\
    \ in\n   addition to providing confidentiality for the Plaintext that is\n   encrypted,\
    \ provides a way to check its integrity and authenticity.\n   Authenticated Encryption\
    \ with Associated Data, or AEAD [R02], adds\n   the ability to check the integrity\
    \ and authenticity of some\n   Associated Data (AD), also called \"Additional\
    \ Authenticated Data\"\n   (AAD), that is not encrypted.  This specification makes\
    \ use of the\n   interface to a generic AEAD algorithm as defined in [RFC5116].\n\
    \   The Advanced Encryption Standard (AES) is a block cipher that\n   provides\
    \ a high level of security and can accept different key sizes.\n   AES Galois/Counter\
    \ Mode (AES-GCM) [GCM] is a family of AEAD\n   algorithms based upon AES.  This\
    \ specification makes use of the AES\n   versions that use 128-bit and 256-bit\
    \ keys, which we call \"AES-128\"\n   and \"AES-256\", respectively.\n   Any AEAD\
    \ algorithm provides an intrinsic authentication tag.  In many\n   applications,\
    \ the authentication tag is truncated to less than full\n   length.  In this specification,\
    \ the authentication tag MUST NOT be\n   truncated.  The authentications tags\
    \ MUST be a full 16 octets in\n   length.  When used in SRTP/SRTCP, AES-GCM will\
    \ have two\n   configurations:\n      AEAD_AES_128_GCM      AES-128 with a 16-octet\
    \ authentication tag\n      AEAD_AES_256_GCM      AES-256 with a 16-octet authentication\
    \ tag\n   The key size is set when the session is initiated and SHOULD NOT be\n\
    \   altered.\n   The Galois/Counter Mode of operation (GCM) is an AEAD mode of\n\
    \   operation for block ciphers.  GCM uses Counter Mode to encrypt the\n   data,\
    \ an operation that can be efficiently pipelined.  Further, GCM\n   authentication\
    \ uses operations that are particularly well suited to\n   efficient implementation\
    \ in hardware, making it especially appealing\n   for high-speed implementations,\
    \ or for implementations in an\n   efficient and compact circuit.\n   In summary,\
    \ this document defines how to use an AEAD algorithm,\n   particularly AES-GCM,\
    \ to provide confidentiality and message\n   authentication within SRTP and SRTCP\
    \ packets.\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be\
    \ interpreted as described in\n   [RFC2119].\n"
- title: 3.  Overview of the SRTP/SRTCP AEAD Security Architecture
  contents:
  - "3.  Overview of the SRTP/SRTCP AEAD Security Architecture\n   SRTP/SRTCP AEAD\
    \ security is based upon the following principles:\n      a) Both privacy and\
    \ authentication are based upon the use of\n         symmetric algorithms.  An\
    \ AEAD algorithm such as AES-GCM\n         combines privacy and authentication\
    \ into a single process.\n      b) A secret master key is shared by all participating\
    \ endpoints --\n         both those originating SRTP/SRTCP packets and those receiving\n\
    \         these packets.  Any given master key MAY be used simultaneously\n  \
    \       by several endpoints to originate SRTP/SRTCP packets (as well\n      \
    \   as one or more endpoints using this master key to process\n         inbound\
    \ data).\n      c) A Key Derivation Function (KDF) is applied to the shared master\n\
    \         key value to form separate encryption keys, authentication\n       \
    \  keys, and salting keys for SRTP and for SRTCP (a total of six\n         keys).\
    \  This process is described in Section 4.3 of [RFC3711].\n         The master\
    \ key MUST be at least as large as the encryption key\n         derived from it.\
    \  Since AEAD algorithms such as AES-GCM combine\n         encryption and authentication\
    \ into a single process, AEAD\n         algorithms do not make use of separate\
    \ authentication keys.\n      d) Aside from making modifications to IANA registries\
    \ to allow\n         AES-GCM to work with Security Descriptions (SDES), Datagram\n\
    \         Transport Layer Security for Secure RTP (DTLS-SRTP), and\n         Multimedia\
    \ Internet KEYing (MIKEY), the details of how the\n         master key is established\
    \ and shared between the participants\n         are outside the scope of this\
    \ document.  Similarly, any\n         mechanism for rekeying an existing session\
    \ is outside the scope\n         of the document.\n      e) Each time an instantiation\
    \ of AES-GCM is invoked to encrypt and\n         authenticate an SRTP or SRTCP\
    \ data packet, a new Initialization\n         Vector (IV) is used.  SRTP combines\
    \ the 4-octet Synchronization\n         Source (SSRC) identifier, the 4-octet\
    \ Rollover Counter (ROC),\n         and the 2-octet Sequence Number (SEQ) with\
    \ the 12-octet\n         encryption salt to form a 12-octet IV (see Section 8.1).\n\
    \         SRTCP combines the SSRC and 31-bit SRTCP index with the\n         encryption\
    \ salt to form a 12-octet IV (see Section 9.1).\n"
- title: 4.  Terminology
  contents:
  - "4.  Terminology\n   The following terms have very specific meanings in the context\
    \ of\n   this RFC:\n      Instantiation: In AEAD, an instantiation is an (Encryption_key,\n\
    \                     salt) pair together with all of the data structures\n  \
    \                   (for example, counters) needed for it to function\n      \
    \               properly.  In SRTP/SRTCP, each endpoint will need\n          \
    \           two instantiations of the AEAD algorithm for each\n              \
    \       master key in its possession: one instantiation for\n                \
    \     SRTP traffic and one instantiation for SRTCP\n                     traffic.\n\
    \      Invocation:    SRTP/SRTCP data streams are broken into packets.\n     \
    \                Each packet is processed by a single invocation of\n        \
    \             the appropriate instantiation of the AEAD\n                    \
    \ algorithm.\n   In many applications, each endpoint will have one master key\
    \ for\n   processing outbound data but may have one or more separate master\n\
    \   keys for processing inbound data.\n"
- title: 5.  Generic AEAD Processing
  contents:
  - '5.  Generic AEAD Processing

    '
- title: 5.1.  Types of Input Data
  contents:
  - "5.1.  Types of Input Data\n      Associated Data: Data that is to be authenticated\
    \ but not\n                       encrypted.\n      Plaintext:       Data that\
    \ is to be both encrypted and\n                       authenticated.\n      Raw\
    \ Data:        Data that is to be neither encrypted nor\n                    \
    \   authenticated.\n   Which portions of SRTP/SRTCP packets that are to be treated\
    \ as\n   Associated Data, which are to be treated as Plaintext, and which are\n\
    \   to be treated as Raw Data are covered in Sections 8.2, 9.2, and 9.3.\n"
- title: 5.2.  AEAD Invocation Inputs and Outputs
  contents:
  - '5.2.  AEAD Invocation Inputs and Outputs

    '
- title: 5.2.1.  Encrypt Mode
  contents:
  - "5.2.1.  Encrypt Mode\n      Inputs:\n        Encryption_key              Octet\
    \ string, either 16 or\n                                      32 octets long\n\
    \        Initialization_Vector       Octet string, 12 octets long\n        Associated_Data\
    \             Octet string of variable length\n        Plaintext             \
    \      Octet string of variable length\n      Outputs:\n        Ciphertext*  \
    \               Octet string, length =\n                                     \
    \ length(Plaintext) + tag_length\n      (*): In AEAD, the authentication tag in\
    \ embedded in the\n           ciphertext.  When GCM is being used, the ciphertext\n\
    \           consists of the encrypted Plaintext followed by the\n           authentication\
    \ tag.\n"
- title: 5.2.2.  Decrypt Mode
  contents:
  - "5.2.2.  Decrypt Mode\n      Inputs:\n        Encryption_key              Octet\
    \ string, either 16 or\n                                      32 octets long\n\
    \        Initialization_Vector       Octet string, 12 octets long\n        Associated_Data\
    \             Octet string of variable length\n        Ciphertext            \
    \      Octet string of variable length\n      Outputs:\n        Plaintext    \
    \               Octet string, length =\n                                     \
    \ length(Ciphertext) - tag_length\n        Validity_Flag               Boolean,\
    \ TRUE if valid,\n                                      FALSE otherwise\n"
- title: 5.3.  Handling of AEAD Authentication
  contents:
  - "5.3.  Handling of AEAD Authentication\n   AEAD requires that all incoming packets\
    \ MUST pass AEAD authentication\n   before any other action takes place.  Plaintext\
    \ and Associated Data\n   MUST NOT be released until the AEAD authentication tag\
    \ has been\n   validated.  Further, the ciphertext MUST NOT be decrypted until\
    \ the\n   AEAD tag has been validated.\n   Should the AEAD tag prove to be invalid,\
    \ the packet in question is to\n   be discarded and a Validation Error flag raised.\
    \  Local policy\n   determines how this flag is to be handled and is outside the\
    \ scope of\n   this document.\n"
- title: 6.  Counter Mode Encryption
  contents:
  - "6.  Counter Mode Encryption\n   Each outbound packet uses a 12-octet IV and an\
    \ encryption key to form\n   two outputs:\n   o  a 16-octet first_key_block, which\
    \ is used in forming the\n      authentication tag, and\n   o  a keystream of\
    \ octets, formed in blocks of 16 octets each\n   The first 16-octet block of the\
    \ key is saved for use in forming the\n   authentication tag, and the remainder\
    \ of the keystream is XORed to\n   the Plaintext to form the cipher.  This keystream\
    \ is formed one block\n   at a time by inputting the concatenation of a 12-octet\
    \ IV (see\n   Sections 8.1 and 9.1) with a 4-octet block to AES.  The pseudocode\n\
    \   below illustrates this process:\n    def GCM_keystream( Plaintext_len, IV,\
    \ Encryption_key ):\n        assert Plaintext_len <= (2**36) - 32 ## measured\
    \ in octets\n        key_stream = \"\"\n        block_counter = 1\n        first_key_block\
    \ = AES_ENC( data=IV||block_counter,\n                                   key=Encryption_key\
    \ )\n        while len(key_stream) < Plaintext_len:\n            block_counter\
    \ = block_counter + 1\n            key_block = AES_ENC( data=IV||block_counter,\n\
    \                                 key=Encryption_key )\n            key_stream\
    \ = key_stream||key_block\n        key_stream = truncate( key_stream, Plaintext_len\
    \ )\n        return( first_key_block, key_stream )\n   In theory, this keystream\
    \ generation process allows for the\n   encryption of up to (2^36) - 32 octets\
    \ per invocation (i.e., per\n   packet), far longer than is actually required.\n\
    \   With any counter mode, if the same (IV, Encryption_key) pair is used\n   twice,\
    \ precisely the same keystream is formed.  As explained in\n   Section 9.1 of\
    \ [RFC3711], this is a cryptographic disaster.  For GCM,\n   the consequences\
    \ are even worse, since such a reuse compromises GCM's\n   integrity mechanism\
    \ not only for the current packet stream but for\n   all future uses of the current\
    \ encryption_key.\n"
- title: 7.  Unneeded SRTP/SRTCP Fields
  contents:
  - "7.  Unneeded SRTP/SRTCP Fields\n   AEAD Counter Mode encryption removes the need\
    \ for certain existing\n   SRTP/SRTCP mechanisms.\n"
- title: 7.1.  SRTP/SRTCP Authentication Tag Field
  contents:
  - "7.1.  SRTP/SRTCP Authentication Tag Field\n   The AEAD message authentication\
    \ mechanism MUST be the primary message\n   authentication mechanism for AEAD\
    \ SRTP/SRTCP.  Additional SRTP/SRTCP\n   authentication mechanisms SHOULD NOT\
    \ be used with any AEAD algorithm,\n   and the optional SRTP/SRTCP authentication\
    \ tags are NOT RECOMMENDED\n   and SHOULD NOT be present.  Note that this contradicts\
    \ Section 3.4 of\n   [RFC3711], which makes the use of the SRTCP authentication\
    \ tag field\n   mandatory, but the presence of the AEAD authentication renders\
    \ the\n   older authentication methods redundant.\n      Rationale: Some applications\
    \ use the SRTP/SRTCP authentication tag\n      as a means of conveying additional\
    \ information, notably [RFC4771].\n      This document retains the authentication\
    \ tag field primarily to\n      preserve compatibility with these applications.\n"
- title: 7.2.  RTP Padding
  contents:
  - "7.2.  RTP Padding\n   AES-GCM does not require that the data be padded out to\
    \ a specific\n   block size, reducing the need to use the padding mechanism provided\n\
    \   by RTP.  It is RECOMMENDED that the RTP padding mechanism not be used\n  \
    \ unless it is necessary to disguise the length of the underlying\n   Plaintext.\n"
- title: 8.  AES-GCM Processing for SRTP
  contents:
  - '8.  AES-GCM Processing for SRTP

    '
- title: 8.1.  SRTP IV Formation for AES-GCM
  contents:
  - "8.1.  SRTP IV Formation for AES-GCM\n                   0  0  0  0  0  0  0 \
    \ 0  0  0  1  1\n                   0  1  2  3  4  5  6  7  8  9  0  1\n     \
    \            +--+--+--+--+--+--+--+--+--+--+--+--+\n                 |00|00| \
    \   SSRC   |     ROC   | SEQ |---+\n                 +--+--+--+--+--+--+--+--+--+--+--+--+\
    \   |\n                                                         |\n          \
    \       +--+--+--+--+--+--+--+--+--+--+--+--+   |\n                 |        \
    \ Encryption Salt           |->(+)\n                 +--+--+--+--+--+--+--+--+--+--+--+--+\
    \   |\n                                                         |\n          \
    \       +--+--+--+--+--+--+--+--+--+--+--+--+   |\n                 |       Initialization\
    \ Vector       |<--+\n                 +--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \          Figure 1: AES-GCM SRTP Initialization Vector Formation\n   The 12-octet\
    \ IV used by AES-GCM SRTP is formed by first concatenating\n   2 octets of zeroes,\
    \ the 4-octet SSRC, the 4-octet rollover counter\n   (ROC), and the 2-octet sequence\
    \ number (SEQ).  The resulting 12-octet\n   value is then XORed to the 12-octet\
    \ salt to form the 12-octet IV.\n"
- title: 8.2.  Data Types in SRTP Packets
  contents:
  - "8.2.  Data Types in SRTP Packets\n   All SRTP packets MUST be both authenticated\
    \ and encrypted.  The data\n   fields within the RTP packets are broken into Associated\
    \ Data,\n   Plaintext, and Raw Data, as follows (see Figure 2):\n      Associated\
    \ Data: The version V (2 bits), padding flag P (1 bit),\n                    \
    \   extension flag X (1 bit), Contributing Source\n                       (CSRC)\
    \ count CC (4 bits), marker M (1 bit),\n                       Payload Type PT\
    \ (7 bits), sequence number\n                       (16 bits), timestamp (32 bits),\
    \ SSRC (32 bits),\n                       optional CSRC identifiers (32 bits each),\
    \ and\n                       optional RTP extension (variable length).\n    \
    \  Plaintext:       The RTP payload (variable length), RTP padding\n         \
    \              (if used, variable length), and RTP pad count (if\n           \
    \            used, 1 octet).\n      Raw Data:        The optional variable-length\
    \ SRTP Master Key\n                       Identifier (MKI) and SRTP authentication\
    \ tag\n                       (whose use is NOT RECOMMENDED).  These fields are\n\
    \                       appended after encryption has been performed.\n      \
    \  0                   1                   2                   3\n        0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    A  |V=2|P|X|  CC   |M|     PT      |       sequence number         |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    A\
    \  |                           timestamp                           |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    A  |           synchronization source (SSRC) identifier            |\n  \
    \     +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n    A\
    \  |      contributing source (CSRC) identifiers (optional)        |\n    A  |\
    \                               ....                            |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    A  |                   RTP extension (OPTIONAL)                    |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    P\
    \  |                          payload  ...                         |\n    P  |\
    \                               +-------------------------------+\n    P  |  \
    \                             | RTP padding   | RTP pad count |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                P = Plaintext (to be encrypted and authenticated)\n         \
    \       A = Associated Data (to be authenticated only)\n   Figure 2: Structure\
    \ of an RTP Packet before Authenticated Encryption\n   Since the AEAD ciphertext\
    \ is larger than the Plaintext by exactly the\n   length of the AEAD authentication\
    \ tag, the corresponding\n   SRTP-encrypted packet replaces the Plaintext field\
    \ with a slightly\n   larger field containing the cipher.  Even if the Plaintext\
    \ field is\n   empty, AEAD encryption must still be performed, with the resulting\n\
    \   cipher consisting solely of the authentication tag.  This tag is to\n   be\
    \ placed immediately before the optional variable-length SRTP MKI\n   and SRTP\
    \ authentication tag fields.\n        0                   1                  \
    \ 2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    A  |V=2|P|X|  CC   |M|     PT      |       sequence number         |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    A\
    \  |                           timestamp                           |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    A  |           synchronization source (SSRC) identifier            |\n  \
    \     +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n    A\
    \  |      contributing source (CSRC) identifiers (optional)        |\n    A  |\
    \                               ....                            |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    A  |                   RTP extension (OPTIONAL)                    |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    C\
    \  |                             cipher                            |\n    C  |\
    \                               ...                             |\n    C  |  \
    \                                                             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    R  :                     SRTP MKI (OPTIONAL)                       :\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    R\
    \  :           SRTP authentication tag (NOT RECOMMENDED)           :\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                C = Ciphertext (encrypted and authenticated)\n              \
    \  A = Associated Data (authenticated only)\n                R = neither encrypted\
    \ nor authenticated, added\n                    after Authenticated Encryption\
    \ completed\n   Figure 3: Structure of an SRTP Packet after Authenticated Encryption\n"
- title: 8.3.  Handling Header Extensions
  contents:
  - "8.3.  Handling Header Extensions\n   RTP header extensions were first defined\
    \ in [RFC3550].  [RFC6904]\n   describes how these header extensions are to be\
    \ encrypted in SRTP.\n   When RFC 6904 is in use, a separate keystream is generated\
    \ to encrypt\n   selected RTP header extension elements.  For the AEAD_AES_128_GCM\n\
    \   algorithm, this keystream MUST be generated in the manner defined in\n   [RFC6904],\
    \ using the AES Counter Mode (AES-CM) transform.  For the\n   AEAD_AES_256_GCM\
    \ algorithm, the keystream MUST be generated in the\n   manner defined for the\
    \ AES_256_CM transform.  The originator must\n   perform any required header extension\
    \ encryption before the AEAD\n   algorithm is invoked.\n   As with the other fields\
    \ contained within the RTP header, both\n   encrypted and unencrypted header extensions\
    \ are to be treated by the\n   AEAD algorithm as Associated Data (AD).  Thus,\
    \ the AEAD algorithm\n   does not provide any additional privacy for the header\
    \ extensions,\n   but it does provide integrity and authentication.\n"
- title: 8.4.  Prevention of SRTP IV Reuse
  contents:
  - "8.4.  Prevention of SRTP IV Reuse\n   In order to prevent IV reuse, we must ensure\
    \ that the (ROC,SEQ,SSRC)\n   triple is never used twice with the same master\
    \ key.  The following\n   two scenarios illustrate this issue:\n      Counter\
    \ Management: A rekey MUST be performed to establish a new\n                 \
    \         master key before the (ROC,SEQ) pair cycles\n                      \
    \    back to its original value.  Note that this\n                          scenario\
    \ implicitly assumes that either\n                          (1) the outgoing RTP\
    \ process is trusted to not\n                          attempt to repeat a (ROC,SEQ)\
    \ value or (2) the\n                          encryption process ensures that\
    \ both the SEQ\n                          and ROC numbers of the packets presented\
    \ to it\n                          are always incremented in the proper fashion.\n\
    \                          This is particularly important for GCM, since\n   \
    \                       using the same (ROC,SEQ) value twice\n               \
    \           compromises the authentication mechanism.  For\n                 \
    \         GCM, the (ROC,SEQ) and SSRC values used MUST\n                     \
    \     be generated or checked by either the SRTP\n                          implementation\
    \ or a module (e.g., the RTP\n                          application) that can\
    \ be considered equally\n                          trustworthy.  While [RFC3711]\
    \ allows the\n                          detection of SSRC collisions after they\n\
    \                          happen, SRTP using GCM with shared master keys\n  \
    \                        MUST prevent an SSRC collision from happening\n     \
    \                     even once.\n      SSRC Management:    For a given master\
    \ key, the set of all SSRC\n                          values used with that master\
    \ key must be\n                          partitioned into disjoint pools, one\
    \ pool for\n                          each endpoint using that master key to\n\
    \                          originate outbound data.  Each such\n             \
    \             originating endpoint MUST only issue SSRC\n                    \
    \      values from the pool it has been assigned.\n                          Further,\
    \ each originating endpoint MUST\n                          maintain a history\
    \ of outbound SSRC\n                          identifiers that it has issued within\
    \ the\n                          lifetime of the current master key, and when\
    \ a\n                          new SSRC requests an SSRC identifier it\n     \
    \                     MUST NOT be given an identifier that has been\n        \
    \                  previously issued.  A rekey MUST be performed\n           \
    \               before any of the originating endpoints using\n              \
    \            that master key exhaust their pools of SSRC\n                   \
    \       values.  Further, the identity of the entity\n                       \
    \   giving out SSRC values MUST be verified, and\n                          the\
    \ SSRC signaling MUST be integrity\n                          protected.\n"
- title: 9.  AES-GCM Processing of SRTCP Compound Packets
  contents:
  - "9.  AES-GCM Processing of SRTCP Compound Packets\n   All SRTCP compound packets\
    \ MUST be authenticated, but unlike SRTP,\n   SRTCP packet encryption is optional.\
    \  A sender can select which\n   packets to encrypt and indicates this choice\
    \ with a 1-bit\n   Encryption flag (located just before the 31-bit SRTCP index).\n"
- title: 9.1.  SRTCP IV Formation for AES-GCM
  contents:
  - "9.1.  SRTCP IV Formation for AES-GCM\n   The 12-octet IV used by AES-GCM SRTCP\
    \ is formed by first\n   concatenating 2 octets of zeroes, the 4-octet SSRC identifier,\n\
    \   2 octets of zeroes, a single \"0\" bit, and the 31-bit SRTCP index.\n   The\
    \ resulting 12-octet value is then XORed to the 12-octet salt to\n   form the\
    \ 12-octet IV.\n                   0  1  2  3  4  5  6  7  8  9 10 11\n      \
    \           +--+--+--+--+--+--+--+--+--+--+--+--+\n                 |00|00|  \
    \  SSRC   |00|00|0+SRTCP Idx|---+\n                 +--+--+--+--+--+--+--+--+--+--+--+--+\
    \   |\n                                                         |\n          \
    \       +--+--+--+--+--+--+--+--+--+--+--+--+   |\n                 |        \
    \ Encryption Salt           |->(+)\n                 +--+--+--+--+--+--+--+--+--+--+--+--+\
    \   |\n                                                         |\n          \
    \       +--+--+--+--+--+--+--+--+--+--+--+--+   |\n                 |       Initialization\
    \ Vector       |<--+\n                 +--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \              Figure 4: SRTCP Initialization Vector Formation\n"
- title: 9.2.  Data Types in Encrypted SRTCP Compound Packets
  contents:
  - "9.2.  Data Types in Encrypted SRTCP Compound Packets\n        0             \
    \      1                   2                   3\n        0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    A  |V=2|P|   RC    |  Packet Type  |            length             |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    A\
    \  |           synchronization source (SSRC) of sender             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    P  |                         sender info                           :\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    P\
    \  |                        report block 1                         :\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    P  |                        report block 2                         :\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    P\
    \  |                              ...                              :\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    P  |V=2|P|   SC    |  Packet Type  |              length           |\n  \
    \     +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n    P\
    \  |                          SSRC/CSRC_1                          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    P  |                           SDES items                          :\n  \
    \     +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n    P\
    \  |                              ...                              :\n       +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n\
    \    A  |1|                         SRTCP index                         |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    R\
    \  |                  SRTCP MKI (optional) index                   :\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    R  :           SRTCP authentication tag (NOT RECOMMENDED)          :\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \            P = Plaintext (to be encrypted and authenticated)\n             \
    \   A = Associated Data (to be authenticated only)\n                R = neither\
    \ encrypted nor authenticated, added after\n                    encryption\n \
    \          Figure 5: AEAD SRTCP Inputs When Encryption Flag = 1\n            \
    \       (The fields are defined in RFC 3550.)\n   When the Encryption flag is\
    \ set to 1, the SRTCP packet is broken into\n   Plaintext, Associated Data, and\
    \ Raw (untouched) Data (as shown above\n   in Figure 5):\n      Associated Data:\
    \ The packet version V (2 bits), padding flag P\n                       (1 bit),\
    \ reception report count RC (5 bits),\n                       Packet Type (8 bits),\
    \ length (2 octets), SSRC\n                       (4 octets), Encryption flag\
    \ (1 bit), and SRTCP\n                       index (31 bits).\n      Raw Data:\
    \        The optional variable-length SRTCP MKI and SRTCP\n                  \
    \     authentication tag (whose use is\n                       NOT RECOMMENDED).\n\
    \      Plaintext:       All other data.\n   Note that the Plaintext comes in one\
    \ contiguous field.  Since the\n   AEAD cipher is larger than the Plaintext by\
    \ exactly the length of the\n   AEAD authentication tag, the corresponding SRTCP-encrypted\
    \ packet\n   replaces the Plaintext field with a slightly larger field containing\n\
    \   the cipher.  Even if the Plaintext field is empty, AEAD encryption\n   must\
    \ still be performed, with the resulting cipher consisting solely\n   of the authentication\
    \ tag.  This tag is to be placed immediately\n   before the Encryption flag and\
    \ SRTCP index.\n"
- title: 9.3.  Data Types in Unencrypted SRTCP Compound Packets
  contents:
  - "9.3.  Data Types in Unencrypted SRTCP Compound Packets\n        0           \
    \        1                   2                   3\n        0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    A  |V=2|P|   RC    |  Packet Type  |            length             |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    A\
    \  |           synchronization source (SSRC) of sender             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    A  |                         sender info                           :\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    A\
    \  |                        report block 1                         :\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    A  |                        report block 2                         :\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    A\
    \  |                              ...                              :\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    A  |V=2|P|   SC    |  Packet Type  |              length           |\n  \
    \     +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n    A\
    \  |                          SSRC/CSRC_1                          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    A  |                           SDES items                          :\n  \
    \     +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n    A\
    \  |                              ...                              :\n       +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n\
    \    A  |0|                         SRTCP index                         |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    R\
    \  |                  SRTCP MKI (optional) index                   :\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    R  :              authentication tag (NOT RECOMMENDED)             :\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \            A = Associated Data (to be authenticated only)\n                R\
    \ = neither encrypted nor authenticated, added after\n                    encryption\n\
    \           Figure 6: AEAD SRTCP Inputs When Encryption Flag = 0\n   When the\
    \ Encryption flag is set to 0, the SRTCP compound packet is\n   broken into Plaintext,\
    \ Associated Data, and Raw (untouched) Data, as\n   follows (see Figure 6):\n\
    \      Plaintext:       None.\n      Raw Data:        The variable-length optional\
    \ SRTCP MKI and SRTCP\n                       authentication tag (whose use is\n\
    \                       NOT RECOMMENDED).\n      Associated Data: All other data.\n\
    \   Even though there is no ciphertext in this RTCP packet, AEAD\n   encryption\
    \ returns a cipher field that is precisely the length of the\n   AEAD authentication\
    \ tag.  This cipher is to be placed before the\n   Encryption flag and the SRTCP\
    \ index in the authenticated SRTCP\n   packet.\n"
- title: 9.4.  Prevention of SRTCP IV Reuse
  contents:
  - "9.4.  Prevention of SRTCP IV Reuse\n   A new master key MUST be established before\
    \ the 31-bit SRTCP index\n   cycles back to its original value.  Ideally, a rekey\
    \ should be\n   performed and a new master key put in place well before the SRTCP\n\
    \   index cycles back to the starting value.\n   The comments on SSRC management\
    \ in Section 8.4 also apply.\n"
- title: 10.  Constraints on AEAD for SRTP and SRTCP
  contents:
  - "10.  Constraints on AEAD for SRTP and SRTCP\n   In general, any AEAD algorithm\
    \ can accept inputs with varying\n   lengths, but each algorithm can accept only\
    \ a limited range of\n   lengths for a specific parameter.  In this section, we\
    \ describe the\n   constraints on the parameter lengths that any AEAD algorithm\
    \ must\n   support to be used in AEAD-SRTP.  Additionally, we specify a complete\n\
    \   parameter set for one specific family of AEAD algorithms, namely\n   AES-GCM.\n\
    \   All AEAD algorithms used with SRTP/SRTCP MUST satisfy the five\n   constraints\
    \ listed below:\n   Parameter  Meaning                  Value\n   ---------------------------------------------------------------------\n\
    \   A_MAX      maximum Associated       MUST be at least 12 octets.\n        \
    \      Data length\n   N_MIN      minimum nonce (IV)       MUST be 12 octets.\n\
    \              length\n   N_MAX      maximum nonce (IV)       MUST be 12 octets.\n\
    \              length\n   P_MAX      maximum Plaintext        GCM: MUST be <=\
    \ 2^36 - 32 octets.\n              length per invocation\n   C_MAX      maximum\
    \ ciphertext       GCM: MUST be <= 2^36 - 16 octets.\n              length per\
    \ invocation\n   For the sake of clarity, we specify three additional parameters:\n\
    \      AEAD authentication tag length   MUST be 16 octets\n      Maximum number\
    \ of invocations    SRTP: MUST be at most 2^48\n         for a given instantiation\
    \     SRTCP: MUST be at most 2^31\n      Block Counter size               GCM:\
    \ MUST be 32 bits\n   The reader is reminded that the ciphertext is longer than\
    \ the\n   Plaintext by exactly the length of the AEAD authentication tag.\n"
- title: 11.  Key Derivation Functions
  contents:
  - "11.  Key Derivation Functions\n   A Key Derivation Function (KDF) is used to\
    \ derive all of the required\n   encryption and authentication keys from a secret\
    \ value shared by the\n   endpoints.  The AEAD_AES_128_GCM algorithm MUST use\
    \ the (128-bit)\n   AES_CM PRF KDF described in [RFC3711].  AEAD_AES_256_GCM MUST\
    \ use the\n   AES_256_CM_PRF KDF described in [RFC6188].\n"
- title: 12.  Summary of AES-GCM in SRTP/SRTCP
  contents:
  - "12.  Summary of AES-GCM in SRTP/SRTCP\n   For convenience, much of the information\
    \ about the use of the AES-GCM\n   family of algorithms in SRTP is collected in\
    \ the tables contained in\n   this section.\n   The AES-GCM family of AEAD algorithms\
    \ is built around the AES block\n   cipher algorithm.  AES-GCM uses AES-CM for\
    \ encryption and Galois\n   Message Authentication Code (GMAC) for authentication.\
    \  A detailed\n   description of the AES-GCM family can be found in [RFC5116].\
    \  The\n   following members of the AES-GCM family may be used with SRTP/SRTCP:\n\
    \     Name                 Key Size      AEAD Tag Size      Reference\n     ================================================================\n\
    \     AEAD_AES_128_GCM     16 octets     16 octets          [RFC5116]\n     AEAD_AES_256_GCM\
    \     32 octets     16 octets          [RFC5116]\n                Table 1: AES-GCM\
    \ Algorithms for SRTP/SRTCP\n   Any implementation of AES-GCM SRTP MUST support\
    \ both AEAD_AES_128_GCM\n   and AEAD_AES_256_GCM.  Below, we summarize parameters\
    \ associated with\n   these two GCM algorithms:\n     +--------------------------------+------------------------------+\n\
    \     | Parameter                      | Value                        |\n    \
    \ +--------------------------------+------------------------------+\n     | Master\
    \ key length              | 128 bits                     |\n     | Master salt\
    \ length             | 96 bits                      |\n     | Key Derivation Function\
    \        | AES_CM PRF [RFC3711]         |\n     | Maximum key lifetime (SRTP)\
    \    | 2^48 packets                 |\n     | Maximum key lifetime (SRTCP)   |\
    \ 2^31 packets                 |\n     | Cipher (for SRTP and SRTCP)    | AEAD_AES_128_GCM\
    \             |\n     | AEAD authentication tag length | 128 bits            \
    \         |\n     +--------------------------------+------------------------------+\n\
    \                Table 2: The AEAD_AES_128_GCM Crypto Suite\n     +--------------------------------+------------------------------+\n\
    \     | Parameter                      | Value                        |\n    \
    \ +--------------------------------+------------------------------+\n     | Master\
    \ key length              | 256 bits                     |\n     | Master salt\
    \ length             | 96 bits                      |\n     | Key Derivation Function\
    \        | AES_256_CM_PRF [RFC6188]     |\n     | Maximum key lifetime (SRTP)\
    \    | 2^48 packets                 |\n     | Maximum key lifetime (SRTCP)   |\
    \ 2^31 packets                 |\n     | Cipher (for SRTP and SRTCP)    | AEAD_AES_256_GCM\
    \             |\n     | AEAD authentication tag length | 128 bits            \
    \         |\n     +--------------------------------+------------------------------+\n\
    \                Table 3: The AEAD_AES_256_GCM Crypto Suite\n"
- title: 13.  Security Considerations
  contents:
  - '13.  Security Considerations

    '
- title: 13.1.  Handling of Security-Critical Parameters
  contents:
  - "13.1.  Handling of Security-Critical Parameters\n   As with any security process,\
    \ the implementer must take care to\n   ensure that cryptographically sensitive\
    \ parameters are properly\n   handled.  Many of these recommendations hold for\
    \ all SRTP\n   cryptographic algorithms, but we include them here to emphasize\
    \ their\n   importance.\n   - If the master salt is to be kept secret, it MUST\
    \ be properly erased\n     when no longer needed.\n   - The secret master key\
    \ and all keys derived from it MUST be kept\n     secret.  All keys MUST be properly\
    \ erased when no longer needed.\n   - At the start of each packet, the Block Counter\
    \ MUST be reset to 1.\n     The Block Counter is incremented after each block\
    \ key has been\n     produced, but it MUST NOT be allowed to exceed 2^32 - 1 for\
    \ GCM.\n     Note that even though the Block Counter is reset at the start of\n\
    \     each packet, IV uniqueness is ensured by the inclusion of\n     SSRC/ROC/SEQ\
    \ or the SRTCP index in the IV.  (The reader is reminded\n     that the first\
    \ block of key produced is reserved for use in\n     authenticating the packet\
    \ and is not used to encrypt Plaintext.)\n   - Each time a rekey occurs, the initial\
    \ values of both the 31-bit\n     SRTCP index and the 48-bit SRTP packet index\
    \ (ROC||SEQ) MUST be\n     saved in order to prevent IV reuse.\n   - Processing\
    \ MUST cease if either the 31-bit SRTCP index or the\n     48-bit SRTP packet\
    \ index (ROC||SEQ) cycles back to its initial\n     value.  Processing MUST NOT\
    \ resume until a new SRTP/SRTCP session\n     has been established using a new\
    \ SRTP master key.  Ideally, a rekey\n     should be done well before any of these\
    \ counters cycle.\n"
- title: 13.2.  Size of the Authentication Tag
  contents:
  - "13.2.  Size of the Authentication Tag\n   We require that the AEAD authentication\
    \ tag be 16 octets, in order to\n   effectively eliminate the risk of an adversary\
    \ successfully\n   introducing fraudulent data.  Though other protocols may allow\
    \ the\n   use of truncated authentication tags, the consensus of the authors\n\
    \   and the working group is that risks associated with using truncated\n   AES-GCM\
    \ tags are deemed too high to allow the use of truncated\n   authentication tags\
    \ in SRTP/SRTCP.\n"
- title: 14.  IANA Considerations
  contents:
  - '14.  IANA Considerations

    '
- title: 14.1.  SDES
  contents:
  - "14.1.  SDES\n   \"Session Description Protocol (SDP) Security Descriptions for\
    \ Media\n   Streams\" [RFC4568] defines SRTP \"crypto suites\".  A crypto suite\n\
    \   corresponds to a particular AEAD algorithm in SRTP.  In order to\n   allow\
    \ security descriptions to signal the use of the algorithms\n   defined in this\
    \ document, IANA has registered the following crypto\n   suites in the \"SRTP\
    \ Crypto Suite Registrations\" subregistry of the\n   \"Session Description Protocol\
    \ (SDP) Security Descriptions\" registry.\n   The ABNF [RFC5234] syntax is as\
    \ follows:\n      srtp-crypto-suite-ext = \"AEAD_AES_128_GCM\"    /\n        \
    \                      \"AEAD_AES_256_GCM\"    /\n                           \
    \   srtp-crypto-suite-ext\n"
- title: 14.2.  DTLS-SRTP
  contents:
  - "14.2.  DTLS-SRTP\n   DTLS-SRTP [RFC5764] defines DTLS-SRTP \"SRTP protection\
    \ profiles\".\n   These profiles also correspond to the use of an AEAD algorithm\
    \ in\n   SRTP.  In order to allow the use of the algorithms defined in this\n\
    \   document in DTLS-SRTP, IANA has registered the following SRTP\n   protection\
    \ profiles:\n         SRTP_AEAD_AES_128_GCM    = {0x00, 0x07}\n         SRTP_AEAD_AES_256_GCM\
    \    = {0x00, 0x08}\n   Below, we list the SRTP transform parameters for each\
    \ of these\n   protection profiles.  Unless separate parameters for SRTP and SRTCP\n\
    \   are explicitly listed, these parameters apply to both SRTP and SRTCP.\n  \
    \  SRTP_AEAD_AES_128_GCM\n         cipher:                 AES_128_GCM\n     \
    \    cipher_key_length:      128 bits\n         cipher_salt_length:     96 bits\n\
    \         aead_auth_tag_length:   16 octets\n         auth_function:         \
    \ NULL\n         auth_key_length:        N/A\n         auth_tag_length:      \
    \  N/A\n         maximum lifetime:       at most 2^31 SRTCP packets and\n    \
    \                               at most 2^48 SRTP packets\n    SRTP_AEAD_AES_256_GCM\n\
    \         cipher:                 AES_256_GCM\n         cipher_key_length:   \
    \   256 bits\n         cipher_salt_length:     96 bits\n         aead_auth_tag_length:\
    \   16 octets\n         auth_function:          NULL\n         auth_key_length:\
    \        N/A\n         auth_tag_length:        N/A\n         maximum lifetime:\
    \       at most 2^31 SRTCP packets and\n                                   at\
    \ most 2^48 SRTP packets\n   Note that these SRTP protection profiles do not specify\
    \ an\n   auth_function, auth_key_length, or auth_tag_length, because all\n   of\
    \ these profiles use AEAD algorithms and thus do not use a\n   separate auth_function,\
    \ auth_key, or auth_tag.  The term\n   \"aead_auth_tag_length\" is used to emphasize\
    \ that this refers to\n   the authentication tag provided by the AEAD algorithm\
    \ and that\n   this tag is not located in the authentication tag field provided\
    \ by\n   SRTP/SRTCP.\n"
- title: 14.3.  MIKEY
  contents:
  - "14.3.  MIKEY\n   In accordance with \"MIKEY: Multimedia Internet KEYing\" [RFC3830],\n\
    \   IANA maintains several subregistries under \"Multimedia Internet\n   KEYing\
    \ (MIKEY) Payload Name Spaces\".  Per this document, additions\n   have been made\
    \ to two of the MIKEY subregistries.\n   In the \"MIKEY Security Protocol Parameters\"\
    \ subregistry, the\n   following has been added:\n      Type | Meaning       \
    \                  | Possible Values\n      --------------------------------------------------------\n\
    \        20 | AEAD authentication tag length  | 16 octets\n   This list is, of\
    \ course, intended for use with GCM.  It is\n   conceivable that new AEAD algorithms\
    \ introduced at some point in the\n   future may require a different set of authentication\
    \ tag lengths.\n   In the \"Encryption algorithm (Value 0)\" subregistry (derived\
    \ from\n   Table 6.10.1.b of [RFC3830]), the following has been added:\n     \
    \   SRTP Encr. | Value | Default Session   |  Default Auth.\n        Algorithm\
    \  |       | Encr. Key Length  |   Tag Length\n      -----------------------------------------------------------\n\
    \        AES-GCM    |    6  |    16 octets      |  16 octets\n   The encryption\
    \ algorithm, session encryption key length, and AEAD\n   authentication tag sizes\
    \ received from MIKEY fully determine the AEAD\n   algorithm to be used.  The\
    \ exact mapping is described in Section 15.\n"
- title: 15.  Parameters for Use with MIKEY
  contents:
  - "15.  Parameters for Use with MIKEY\n   MIKEY specifies the algorithm family separately\
    \ from the key length\n   (which is specified by the Session Encryption key length)\
    \ and the\n   authentication tag length (specified by the AEAD authentication\
    \ tag\n   length).\n                           +------------+-------------+-------------+\n\
    \                           | Encryption | Encryption  |  AEAD Auth. |\n     \
    \                      | Algorithm  | Key Length  |  Tag Length |\n          \
    \                 +============+=============+=============+\n      AEAD_AES_128_GCM\
    \     |  AES-GCM   | 16 octets   | 16 octets   |\n                           +------------+-------------+-------------+\n\
    \      AEAD_AES_256_GCM     |  AES-GCM   | 32 octets   | 16 octets   |\n     \
    \                      +============+=============+=============+\n          \
    \ Table 4: Mapping MIKEY Parameters to AEAD Algorithms\n   Section 11 of this\
    \ document restricts the choice of KDF for AEAD\n   algorithms.  To enforce this\
    \ restriction in MIKEY, we require that\n   the SRTP Pseudorandom Function (PRF)\
    \ has value AES-CM whenever an\n   AEAD algorithm is used.  Note that, according\
    \ to Section 6.10.1 of\n   [RFC3830], the input key length of the KDF (i.e., the\
    \ SRTP master key\n   length) is always equal to the session encryption key length.\
    \  This\n   means, for example, that AEAD_AES_256_GCM will use AES_256_CM_PRF\
    \ as\n   the KDF.\n"
- title: 16.  Some RTP Test Vectors
  contents:
  - "16.  Some RTP Test Vectors\n   The examples in this section are all based upon\
    \ the same RTP packet\n            8040f17b 8041f8d3 5501a0b2 47616c6c\n     \
    \       69612065 7374206f 6d6e6973 20646976\n            69736120 696e2070 61727465\
    \ 73207472\n            6573\n   consisting of a 12-octet header (8040f17b 8041f8d3\
    \ 5501a0b2) and a\n   38-octet payload (47616c6c 69612065 7374206f 6d6e6973 20646976\n\
    \   69736120 696e2070 61727465 73207472 6573), which is just the ASCII\n   string\
    \ \"Gallia est omnis divisa in partes tres\".  The salt used\n   (51756964 2070726f\
    \ 2071756f) comes from the ASCII string \"Quid pro\n   quo\".  The 16-octet (128-bit)\
    \ key is 00 01 02 ... 0f, and the\n   32-octet (256-bit) key is 00 01 02 ... 1f.\
    \  At the time this document\n   was written, the RTP payload type (1000000 binary\
    \ = 64 decimal) was\n   an unassigned value.\n   As shown in Section 8.1, the\
    \ IV is formed by XORing two 12-octet\n   values.  The first 12-octet value is\
    \ formed by concatenating two\n   zero octets, the 4-octet SSRC (found in the\
    \ ninth through 12th octets\n   of the packet), the 4-octet rollover counter (ROC)\
    \ maintained at each\n   end of the link, and the 2-octet sequence number (SEQ)\
    \ (found in the\n   third and fourth octets of the packet).  The second 12-octet\
    \ value is\n   the salt, a value that is held constant at least until the key\
    \ is\n   changed.\n              | Pad |   SSRC    |    ROC    | SEQ |\n     \
    \          00 00 55 01 a0 b2 00 00 00 00 f1 7b\n        salt   51 75 69 64 20\
    \ 70 72 6f 20 71 75 6f\n               ------------------------------------\n\
    \          IV   51 75 3c 65 80 c2 72 6f 20 71 84 14\n   All of the RTP examples\
    \ use this IV.\n"
- title: 16.1.  SRTP AEAD_AES_128_GCM
  contents:
  - '16.1.  SRTP AEAD_AES_128_GCM

    '
- title: 16.1.1.  SRTP AEAD_AES_128_GCM Encryption
  contents:
  - "16.1.1.  SRTP AEAD_AES_128_GCM Encryption\n   Encrypting the following packet:\n\
    \        8040f17b 8041f8d3 5501a0b2 47616c6c\n        69612065 7374206f 6d6e6973\
    \ 20646976\n        69736120 696e2070 61727465 73207472\n        6573\n   Form\
    \ the IV\n          | Pad |   SSRC    |    ROC    | SEQ |\n           00 00 55\
    \ 01 a0 b2 00 00 00 00 f1 7b\n     salt: 51 75 69 64 20 70 72 6f 20 71 75 6f\n\
    \       IV: 51 75 3c 65 80 c2 72 6f 20 71 84 14\n   Key: 00 01 02 03 04 05 06\
    \ 07 08 09 0a 0b 0c 0d 0e 0f\n   AAD: 8040f17b 8041f8d3 5501a0b2\n    PT: 47616c6c\
    \ 69612065 7374206f 6d6e6973\n        20646976 69736120 696e2070 61727465\n  \
    \      73207472 6573\n    IV: 51 75 3c 65 80 c2 72 6f 20 71 84 14\n     H: c6a13b37878f5b826f4f8162a1c8d879\n\
    \   Encrypt the Plaintext\n     block # 0\n       IV||blk_cntr: 51753c6580c2726f2071841400000002\n\
    \          key_block: b5 2c 8f cf 92 55 fe 09 df ce a6 73 f0 10 22 b9\n      \
    \  plain_block: 47 61 6c 6c 69 61 20 65 73 74 20 6f 6d 6e 69 73\n       cipher_block:\
    \ f2 4d e3 a3 fb 34 de 6c ac ba 86 1c 9d 7e 4b ca\n     block # 1\n       IV||blk_cntr:\
    \ 51753c6580c2726f2071841400000003\n          key_block: 9e 07 52 a3 64 5a 2f\
    \ 4f 2b cb d4 0a 30 b5 a5 fe\n        plain_block: 20 64 69 76 69 73 61 20 69\
    \ 6e 20 70 61 72 74 65\n       cipher_block: be 63 3b d5 0d 29 4e 6f 42 a5 f4\
    \ 7a 51 c7 d1 9b\n     block # 2\n       IV||blk_cntr: 51753c6580c2726f2071841400000004\n\
    \          key_block: 45 fe 4e ad ed 40 0a 5d 1a f3 63 f9 0c e1 49 3b\n      \
    \  plain_block: 73 20 74 72 65 73\n       cipher_block: 36 de 3a df 88 33\n  \
    \ Cipher before tag appended\n        f24de3a3 fb34de6c acba861c 9d7e4bca\n  \
    \      be633bd5 0d294e6f 42a5f47a 51c7d19b\n        36de3adf 8833\n   Compute\
    \ the GMAC tag\n     Process the AAD\n           AAD word: 8040f17b8041f8d35501a0b200000000\n\
    \       partial hash: bcfb3d1d0e6e3e78ba45403377dba11b\n     Process the cipher\n\
    \        cipher word: f24de3a3fb34de6cacba861c9d7e4bca\n       partial hash: 0ebc0abe1b15b32fedd2b07888c1ef61\n\
    \        cipher word: be633bd50d294e6f42a5f47a51c7d19b\n       partial hash: 438e5797011ea860585709a2899f4685\n\
    \        cipher word: 36de3adf883300000000000000000000\n       partial hash: 336fb643310d7bac2aeaa76247f6036d\n\
    \     Process the length word\n        length word: 00000000000000600000000000000130\n\
    \       partial hash: 1b964067078c408c4e442a8f015e5264\n   Turn GHASH into GMAC\n\
    \              GHASH: 1b 96 40 67 07 8c 40 8c 4e 44 2a 8f 01 5e 52 64\n      \
    \           K0: 92 0b 3f 40 b9 3d 2a 1d 1c 8b 5c d1 e5 67 5e aa\n          full\
    \ GMAC: 89 9d 7f 27 be b1 6a 91 52 cf 76 5e e4 39 0c ce\n   Cipher with tag\n\
    \        f24de3a3 fb34de6c acba861c 9d7e4bca\n        be633bd5 0d294e6f 42a5f47a\
    \ 51c7d19b\n        36de3adf 8833899d 7f27beb1 6a9152cf\n        765ee439 0cce\n\
    \   Encrypted and tagged packet:\n        8040f17b 8041f8d3 5501a0b2 f24de3a3\n\
    \        fb34de6c acba861c 9d7e4bca be633bd5\n        0d294e6f 42a5f47a 51c7d19b\
    \ 36de3adf\n        8833899d 7f27beb1 6a9152cf 765ee439\n        0cce\n"
- title: 16.1.2.  SRTP AEAD_AES_128_GCM Decryption
  contents:
  - "16.1.2.  SRTP AEAD_AES_128_GCM Decryption\n   Decrypting the following packet:\n\
    \        8040f17b 8041f8d3 5501a0b2 f24de3a3\n        fb34de6c acba861c 9d7e4bca\
    \ be633bd5\n        0d294e6f 42a5f47a 51c7d19b 36de3adf\n        8833899d 7f27beb1\
    \ 6a9152cf 765ee439\n        0cce\n   Form the IV\n          | Pad |   SSRC  \
    \  |    ROC    | SEQ |\n           00 00 55 01 a0 b2 00 00 00 00 f1 7b\n     salt:\
    \ 51 75 69 64 20 70 72 6f 20 71 75 6f\n       IV: 51 75 3c 65 80 c2 72 6f 20 71\
    \ 84 14\n   Key: 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f\n   AAD: 8040f17b\
    \ 8041f8d3 5501a0b2\n    CT: f24de3a3 fb34de6c acba861c 9d7e4bca\n        be633bd5\
    \ 0d294e6f 42a5f47a 51c7d19b\n        36de3adf 8833899d 7f27beb1 6a9152cf\n  \
    \      765ee439 0cce\n    IV: 51 75 3c 65 80 c2 72 6f 20 71 84 14\n     H: c6a13b37878f5b826f4f8162a1c8d879\n\
    \   Verify the received tag\n      89 9d 7f 27 be b1 6a 91 52 cf 76 5e e4 39 0c\
    \ ce\n     Process the AAD\n           AAD word: 8040f17b8041f8d35501a0b200000000\n\
    \       partial hash: bcfb3d1d0e6e3e78ba45403377dba11b\n     Process the cipher\n\
    \        cipher word: f24de3a3fb34de6cacba861c9d7e4bca\n       partial hash: 0ebc0abe1b15b32fedd2b07888c1ef61\n\
    \        cipher word: be633bd50d294e6f42a5f47a51c7d19b\n       partial hash: 438e5797011ea860585709a2899f4685\n\
    \        cipher word: 36de3adf883300000000000000000000\n       partial hash: 336fb643310d7bac2aeaa76247f6036d\n\
    \     Process the length word\n        length word: 00000000000000600000000000000130\n\
    \       partial hash: 1b964067078c408c4e442a8f015e5264\n   Turn GHASH into GMAC\n\
    \              GHASH: 1b 96 40 67 07 8c 40 8c 4e 44 2a 8f 01 5e 52 64\n      \
    \           K0: 92 0b 3f 40 b9 3d 2a 1d 1c 8b 5c d1 e5 67 5e aa\n          full\
    \ GMAC: 89 9d 7f 27 be b1 6a 91 52 cf 76 5e e4 39 0c ce\n        Received tag\
    \ = 899d7f27 beb16a91 52cf765e e4390cce\n        Computed tag = 899d7f27 beb16a91\
    \ 52cf765e e4390cce\n     Received tag verified.\n   Decrypt the cipher\n    \
    \ block # 0\n       IV||blk_cntr: 51753c6580c2726f2071841400000002\n         \
    \ key_block: b5 2c 8f cf 92 55 fe 09 df ce a6 73 f0 10 22 b9\n       cipher_block:\
    \ f2 4d e3 a3 fb 34 de 6c ac ba 86 1c 9d 7e 4b ca\n        plain_block: 47 61\
    \ 6c 6c 69 61 20 65 73 74 20 6f 6d 6e 69 73\n     block # 1\n       IV||blk_cntr:\
    \ 51753c6580c2726f2071841400000003\n          key_block: 9e 07 52 a3 64 5a 2f\
    \ 4f 2b cb d4 0a 30 b5 a5 fe\n       cipher_block: be 63 3b d5 0d 29 4e 6f 42\
    \ a5 f4 7a 51 c7 d1 9b\n        plain_block: 20 64 69 76 69 73 61 20 69 6e 20\
    \ 70 61 72 74 65\n     block # 2\n       IV||blk_cntr: 51753c6580c2726f2071841400000004\n\
    \          key_block: 45 fe 4e ad ed 40 0a 5d 1a f3 63 f9 0c e1 49 3b\n      \
    \ cipher_block: 36 de 3a df 88 33\n        plain_block: 73 20 74 72 65 73\n  \
    \ Verified and tagged packet:\n        47616c6c 69612065 7374206f 6d6e6973\n \
    \       20646976 69736120 696e2070 61727465\n        73207472 6573\n"
- title: 16.1.3.  SRTP AEAD_AES_128_GCM Authentication Tagging
  contents:
  - "16.1.3.  SRTP AEAD_AES_128_GCM Authentication Tagging\n   Tagging the following\
    \ packet:\n        8040f17b 8041f8d3 5501a0b2 47616c6c\n        69612065 7374206f\
    \ 6d6e6973 20646976\n        69736120 696e2070 61727465 73207472\n        6573\n\
    \   Form the IV\n          | Pad |   SSRC    |    ROC    | SEQ |\n           00\
    \ 00 55 01 a0 b2 00 00 00 00 f1 7b\n     salt: 51 75 69 64 20 70 72 6f 20 71 75\
    \ 6f\n       IV: 51 75 3c 65 80 c2 72 6f 20 71 84 14\n   Key: 00 01 02 03 04 05\
    \ 06 07 08 09 0a 0b 0c 0d 0e 0f\n   AAD: 8040f17b 8041f8d3 5501a0b2 47616c6c\n\
    \        69612065 7374206f 6d6e6973 20646976\n        69736120 696e2070 61727465\
    \ 73207472\n        6573\n    IV: 51 75 3c 65 80 c2 72 6f 20 71 84 14\n     H:\
    \ c6a13b37878f5b826f4f8162a1c8d879\n   Compute the GMAC tag\n     Process the\
    \ AAD\n           AAD word: 8040f17b8041f8d35501a0b247616c6c\n       partial hash:\
    \ 79f41fea34a474a77609d8925e9f2b22\n           AAD word: 696120657374206f6d6e697320646976\n\
    \       partial hash: 84093a2f85abf17ab37d3ce2f706138f\n           AAD word: 69736120696e20706172746573207472\n\
    \       partial hash: ab2760fee24e6dec754739d8059cd144\n           AAD word: 65730000000000000000000000000000\n\
    \       partial hash: e84f3c55d287fc561c41d09a8aada4be\n     Process the length\
    \ word\n        length word: 00000000000001900000000000000000\n       partial\
    \ hash: b04200c26b81c98af55cc2eafccd1cbc\n   Turn GHASH into GMAC\n          \
    \    GHASH: b0 42 00 c2 6b 81 c9 8a f5 5c c2 ea fc cd 1c bc\n                \
    \ K0: 92 0b 3f 40 b9 3d 2a 1d 1c 8b 5c d1 e5 67 5e aa\n          full GMAC: 22\
    \ 49 3f 82 d2 bc e3 97 e9 d7 9e 3b 19 aa 42 16\n   Cipher with tag\n        22493f82\
    \ d2bce397 e9d79e3b 19aa4216\n   Tagged packet:\n        8040f17b 8041f8d3 5501a0b2\
    \ 47616c6c\n        69612065 7374206f 6d6e6973 20646976\n        69736120 696e2070\
    \ 61727465 73207472\n        65732249 3f82d2bc e397e9d7 9e3b19aa\n        4216\n"
- title: 16.1.4.  SRTP AEAD_AES_128_GCM Tag Verification
  contents:
  - "16.1.4.  SRTP AEAD_AES_128_GCM Tag Verification\n   Verifying the following packet:\n\
    \        8040f17b 8041f8d3 5501a0b2 47616c6c\n        69612065 7374206f 6d6e6973\
    \ 20646976\n        69736120 696e2070 61727465 73207472\n        65732249 3f82d2bc\
    \ e397e9d7 9e3b19aa\n        4216\n   Form the IV\n          | Pad |   SSRC  \
    \  |    ROC    | SEQ |\n           00 00 55 01 a0 b2 00 00 00 00 f1 7b\n     salt:\
    \ 51 75 69 64 20 70 72 6f 20 71 75 6f\n       IV: 51 75 3c 65 80 c2 72 6f 20 71\
    \ 84 14\n   Key: 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f\n   AAD: 8040f17b\
    \ 8041f8d3 5501a0b2 47616c6c\n        69612065 7374206f 6d6e6973 20646976\n  \
    \      69736120 696e2070 61727465 73207472\n        6573\n    CT: 22493f82 d2bce397\
    \ e9d79e3b 19aa4216\n    IV: 51 75 3c 65 80 c2 72 6f 20 71 84 14\n     H: c6a13b37878f5b826f4f8162a1c8d879\n\
    \   Verify the received tag\n      22 49 3f 82 d2 bc e3 97 e9 d7 9e 3b 19 aa 42\
    \ 16\n     Process the AAD\n           AAD word: 8040f17b8041f8d35501a0b247616c6c\n\
    \       partial hash: 79f41fea34a474a77609d8925e9f2b22\n           AAD word: 696120657374206f6d6e697320646976\n\
    \       partial hash: 84093a2f85abf17ab37d3ce2f706138f\n           AAD word: 69736120696e20706172746573207472\n\
    \       partial hash: ab2760fee24e6dec754739d8059cd144\n           AAD word: 65730000000000000000000000000000\n\
    \       partial hash: e84f3c55d287fc561c41d09a8aada4be\n     Process the length\
    \ word\n        length word: 00000000000001900000000000000000\n       partial\
    \ hash: b04200c26b81c98af55cc2eafccd1cbc\n   Turn GHASH into GMAC\n          \
    \    GHASH: b0 42 00 c2 6b 81 c9 8a f5 5c c2 ea fc cd 1c bc\n                \
    \ K0: 92 0b 3f 40 b9 3d 2a 1d 1c 8b 5c d1 e5 67 5e aa\n          full GMAC: 22\
    \ 49 3f 82 d2 bc e3 97 e9 d7 9e 3b 19 aa 42 16\n        Received tag = 22493f82\
    \ d2bce397 e9d79e3b 19aa4216\n        Computed tag = 22493f82 d2bce397 e9d79e3b\
    \ 19aa4216\n     Received tag verified.\n"
- title: 16.2.  SRTP AEAD_AES_256_GCM
  contents:
  - '16.2.  SRTP AEAD_AES_256_GCM

    '
- title: 16.2.1.  SRTP AEAD_AES_256_GCM Encryption
  contents:
  - "16.2.1.  SRTP AEAD_AES_256_GCM Encryption\n   Encrypting the following packet:\n\
    \        8040f17b 8041f8d3 5501a0b2 47616c6c\n        69612065 7374206f 6d6e6973\
    \ 20646976\n        69736120 696e2070 61727465 73207472\n        6573\n   Form\
    \ the IV\n          | Pad |   SSRC    |    ROC    | SEQ |\n           00 00 55\
    \ 01 a0 b2 00 00 00 00 f1 7b\n     salt: 51 75 69 64 20 70 72 6f 20 71 75 6f\n\
    \       IV: 51 75 3c 65 80 c2 72 6f 20 71 84 14\n   Key: 00 01 02 03 04 05 06\
    \ 07 08 09 0a 0b 0c 0d 0e 0f\n        10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d\
    \ 1e 1f\n   AAD: 8040f17b 8041f8d3 5501a0b2\n    PT: 47616c6c 69612065 7374206f\
    \ 6d6e6973\n        20646976 69736120 696e2070 61727465\n        73207472 6573\n\
    \    IV: 51 75 3c 65 80 c2 72 6f 20 71 84 14\n     H: f29000b62a499fd0a9f39a6add2e7780\n\
    \   Encrypt the Plaintext\n     block # 0\n       IV||blk_cntr: 51753c6580c2726f2071841400000002\n\
    \          key_block: 75 d0 b2 14 c1 43 de 77 9c eb 58 95 5e 40 5a d9\n      \
    \  plain_block: 47 61 6c 6c 69 61 20 65 73 74 20 6f 6d 6e 69 73\n       cipher_block:\
    \ 32 b1 de 78 a8 22 fe 12 ef 9f 78 fa 33 2e 33 aa\n     block # 1\n       IV||blk_cntr:\
    \ 51753c6580c2726f2071841400000003\n          key_block: 91 e4 7b 4e f3 2b 83\
    \ d3 dc 65 0a 72 17 8d da 6a\n        plain_block: 20 64 69 76 69 73 61 20 69\
    \ 6e 20 70 61 72 74 65\n       cipher_block: b1 80 12 38 9a 58 e2 f3 b5 0b 2a\
    \ 02 76 ff ae 0f\n     block # 2\n       IV||blk_cntr: 51753c6580c2726f2071841400000004\n\
    \          key_block: 68 86 43 eb dd 08 07 98 16 3a 16 d5 e5 04 f6 3a\n      \
    \  plain_block: 73 20 74 72 65 73\n       cipher_block: 1b a6 37 99 b8 7b\n  \
    \ Cipher before tag appended\n        32b1de78 a822fe12 ef9f78fa 332e33aa\n  \
    \      b1801238 9a58e2f3 b50b2a02 76ffae0f\n        1ba63799 b87b\n   Compute\
    \ the GMAC tag\n     Process the AAD\n           AAD word: 8040f17b8041f8d35501a0b200000000\n\
    \       partial hash: 0154dcb75485b71880e1957c877351bd\n     Process the cipher\n\
    \        cipher word: 32b1de78a822fe12ef9f78fa332e33aa\n       partial hash: c3f07db9a8b9cb4345eb07f793d322d2\n\
    \        cipher word: b18012389a58e2f3b50b2a0276ffae0f\n       partial hash: 6d1e66fe32eb32ecd8906ceab09db996\n\
    \        cipher word: 1ba63799b87b00000000000000000000\n       partial hash: b3d1d2f1fa3b366619bc42cd2eedafee\n\
    \     Process the length word\n        length word: 00000000000000600000000000000130\n\
    \       partial hash: 7debf5fa1fac3bd318d5e1a7ee401091\n   Turn GHASH into GMAC\n\
    \              GHASH: 7d eb f5 fa 1f ac 3b d3 18 d5 e1 a7 ee 40 10 91\n      \
    \           K0: 07 48 2e cc c0 53 ed 63 e1 6e 99 df 39 e7 7c 82\n          full\
    \ GMAC: 7a a3 db 36 df ff d6 b0 f9 bb 78 78 d7 a7 6c 13\n   Cipher with tag\n\
    \        32b1de78 a822fe12 ef9f78fa 332e33aa\n        b1801238 9a58e2f3 b50b2a02\
    \ 76ffae0f\n        1ba63799 b87b7aa3 db36dfff d6b0f9bb\n        7878d7a7 6c13\n\
    \   Encrypted and tagged packet:\n        8040f17b 8041f8d3 5501a0b2 32b1de78\n\
    \        a822fe12 ef9f78fa 332e33aa b1801238\n        9a58e2f3 b50b2a02 76ffae0f\
    \ 1ba63799\n        b87b7aa3 db36dfff d6b0f9bb 7878d7a7\n        6c13\n"
- title: 16.2.2.  SRTP AEAD_AES_256_GCM Decryption
  contents:
  - "16.2.2.  SRTP AEAD_AES_256_GCM Decryption\n   Decrypting the following packet:\n\
    \        8040f17b 8041f8d3 5501a0b2 32b1de78\n        a822fe12 ef9f78fa 332e33aa\
    \ b1801238\n        9a58e2f3 b50b2a02 76ffae0f 1ba63799\n        b87b7aa3 db36dfff\
    \ d6b0f9bb 7878d7a7\n        6c13\n   Form the IV\n          | Pad |   SSRC  \
    \  |    ROC    | SEQ |\n           00 00 55 01 a0 b2 00 00 00 00 f1 7b\n     salt:\
    \ 51 75 69 64 20 70 72 6f 20 71 75 6f\n       IV: 51 75 3c 65 80 c2 72 6f 20 71\
    \ 84 14\n   Key: 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f\n        10 11\
    \ 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f\n   AAD: 8040f17b 8041f8d3 5501a0b2\n\
    \    CT: 32b1de78 a822fe12 ef9f78fa 332e33aa\n        b1801238 9a58e2f3 b50b2a02\
    \ 76ffae0f\n        1ba63799 b87b7aa3 db36dfff d6b0f9bb\n        7878d7a7 6c13\n\
    \    IV: 51 75 3c 65 80 c2 72 6f 20 71 84 14\n     H: f29000b62a499fd0a9f39a6add2e7780\n\
    \   Verify the received tag\n      7a a3 db 36 df ff d6 b0 f9 bb 78 78 d7 a7 6c\
    \ 13\n     Process the AAD\n           AAD word: 8040f17b8041f8d35501a0b200000000\n\
    \       partial hash: 0154dcb75485b71880e1957c877351bd\n     Process the cipher\n\
    \        cipher word: 32b1de78a822fe12ef9f78fa332e33aa\n       partial hash: c3f07db9a8b9cb4345eb07f793d322d2\n\
    \        cipher word: b18012389a58e2f3b50b2a0276ffae0f\n       partial hash: 6d1e66fe32eb32ecd8906ceab09db996\n\
    \        cipher word: 1ba63799b87b00000000000000000000\n       partial hash: b3d1d2f1fa3b366619bc42cd2eedafee\n\
    \     Process the length word\n        length word: 00000000000000600000000000000130\n\
    \       partial hash: 7debf5fa1fac3bd318d5e1a7ee401091\n   Turn GHASH into GMAC\n\
    \              GHASH: 7d eb f5 fa 1f ac 3b d3 18 d5 e1 a7 ee 40 10 91\n      \
    \           K0: 07 48 2e cc c0 53 ed 63 e1 6e 99 df 39 e7 7c 82\n          full\
    \ GMAC: 7a a3 db 36 df ff d6 b0 f9 bb 78 78 d7 a7 6c 13\n        Received tag\
    \ = 7aa3db36 dfffd6b0 f9bb7878 d7a76c13\n        Computed tag = 7aa3db36 dfffd6b0\
    \ f9bb7878 d7a76c13\n     Received tag verified.\n   Decrypt the cipher\n    \
    \ block # 0\n       IV||blk_cntr: 51753c6580c2726f2071841400000002\n         \
    \ key_block: 75 d0 b2 14 c1 43 de 77 9c eb 58 95 5e 40 5a d9\n       cipher_block:\
    \ 32 b1 de 78 a8 22 fe 12 ef 9f 78 fa 33 2e 33 aa\n        plain_block: 47 61\
    \ 6c 6c 69 61 20 65 73 74 20 6f 6d 6e 69 73\n     block # 1\n       IV||blk_cntr:\
    \ 51753c6580c2726f2071841400000003\n          key_block: 91 e4 7b 4e f3 2b 83\
    \ d3 dc 65 0a 72 17 8d da 6a\n       cipher_block: b1 80 12 38 9a 58 e2 f3 b5\
    \ 0b 2a 02 76 ff ae 0f\n        plain_block: 20 64 69 76 69 73 61 20 69 6e 20\
    \ 70 61 72 74 65\n     block # 2\n       IV||blk_cntr: 51753c6580c2726f2071841400000004\n\
    \          key_block: 68 86 43 eb dd 08 07 98 16 3a 16 d5 e5 04 f6 3a\n      \
    \ cipher_block: 1b a6 37 99 b8 7b\n        plain_block: 73 20 74 72 65 73\n  \
    \ Verified and tagged packet:\n        47616c6c 69612065 7374206f 6d6e6973\n \
    \       20646976 69736120 696e2070 61727465\n        73207472 6573\n"
- title: 16.2.3.  SRTP AEAD_AES_256_GCM Authentication Tagging
  contents:
  - "16.2.3.  SRTP AEAD_AES_256_GCM Authentication Tagging\n   Tagging the following\
    \ packet:\n        8040f17b 8041f8d3 5501a0b2 47616c6c\n        69612065 7374206f\
    \ 6d6e6973 20646976\n        69736120 696e2070 61727465 73207472\n        6573\n\
    \   Form the IV\n          | Pad |   SSRC    |    ROC    | SEQ |\n           00\
    \ 00 55 01 a0 b2 00 00 00 00 f1 7b\n     salt: 51 75 69 64 20 70 72 6f 20 71 75\
    \ 6f\n       IV: 51 75 3c 65 80 c2 72 6f 20 71 84 14\n   Key: 00 01 02 03 04 05\
    \ 06 07 08 09 0a 0b 0c 0d 0e 0f\n        10 11 12 13 14 15 16 17 18 19 1a 1b 1c\
    \ 1d 1e 1f\n   AAD: 8040f17b 8041f8d3 5501a0b2 47616c6c\n        69612065 7374206f\
    \ 6d6e6973 20646976\n        69736120 696e2070 61727465 73207472\n        6573\n\
    \    IV: 51 75 3c 65 80 c2 72 6f 20 71 84 14\n     H: f29000b62a499fd0a9f39a6add2e7780\n\
    \   Compute the GMAC tag\n     Process the AAD\n           AAD word: 8040f17b8041f8d35501a0b247616c6c\n\
    \       partial hash: c059753e6763791762ca630d8ef97714\n           AAD word: 696120657374206f6d6e697320646976\n\
    \       partial hash: a4e3401e712900dc4f1d2303bc4b2675\n           AAD word: 69736120696e20706172746573207472\n\
    \       partial hash: 1c8c1af883de0d67878f379a19c65987\n           AAD word: 65730000000000000000000000000000\n\
    \       partial hash: 958462781aa8e8feacce6d93b54472ac\n     Process the length\
    \ word\n        length word: 00000000000001900000000000000000\n       partial\
    \ hash: af2efb5dcfdb9900e7127721fdb56956\n   Turn GHASH into GMAC\n          \
    \    GHASH: af 2e fb 5d cf db 99 00 e7 12 77 21 fd b5 69 56\n                \
    \ K0: 07 48 2e cc c0 53 ed 63 e1 6e 99 df 39 e7 7c 82\n          full GMAC: a8\
    \ 66 d5 91 0f 88 74 63 06 7c ee fe c4 52 15 d4\n   Cipher with tag\n        a866d591\
    \ 0f887463 067ceefe c45215d4\n   Tagged packet:\n        8040f17b 8041f8d3 5501a0b2\
    \ 47616c6c\n        69612065 7374206f 6d6e6973 20646976\n        69736120 696e2070\
    \ 61727465 73207472\n        6573a866 d5910f88 7463067c eefec452\n        15d4\n"
- title: 16.2.4.  SRTP AEAD_AES_256_GCM Tag Verification
  contents:
  - "16.2.4.  SRTP AEAD_AES_256_GCM Tag Verification\n   Verifying the following packet:\n\
    \        8040f17b 8041f8d3 5501a0b2 47616c6c\n        69612065 7374206f 6d6e6973\
    \ 20646976\n        69736120 696e2070 61727465 73207472\n        6573a866 d5910f88\
    \ 7463067c eefec452\n        15d4\n   Form the IV\n          | Pad |   SSRC  \
    \  |    ROC    | SEQ |\n           00 00 55 01 a0 b2 00 00 00 00 f1 7b\n     salt:\
    \ 51 75 69 64 20 70 72 6f 20 71 75 6f\n       IV: 51 75 3c 65 80 c2 72 6f 20 71\
    \ 84 14\n   Key: 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f\n        10 11\
    \ 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f\n   AAD: 8040f17b 8041f8d3 5501a0b2\
    \ 47616c6c\n        69612065 7374206f 6d6e6973 20646976\n        69736120 696e2070\
    \ 61727465 73207472\n        6573\n    CT: a866d591 0f887463 067ceefe c45215d4\n\
    \    IV: 51 75 3c 65 80 c2 72 6f 20 71 84 14\n     H: f29000b62a499fd0a9f39a6add2e7780\n\
    \   Verify the received tag\n      a8 66 d5 91 0f 88 74 63 06 7c ee fe c4 52 15\
    \ d4\n     Process the AAD\n           AAD word: 8040f17b8041f8d35501a0b247616c6c\n\
    \       partial hash: c059753e6763791762ca630d8ef97714\n           AAD word: 696120657374206f6d6e697320646976\n\
    \       partial hash: a4e3401e712900dc4f1d2303bc4b2675\n           AAD word: 69736120696e20706172746573207472\n\
    \       partial hash: 1c8c1af883de0d67878f379a19c65987\n           AAD word: 65730000000000000000000000000000\n\
    \       partial hash: 958462781aa8e8feacce6d93b54472ac\n     Process the length\
    \ word\n        length word: 00000000000001900000000000000000\n       partial\
    \ hash: af2efb5dcfdb9900e7127721fdb56956\n   Turn GHASH into GMAC\n          \
    \    GHASH: af 2e fb 5d cf db 99 00 e7 12 77 21 fd b5 69 56\n                \
    \ K0: 07 48 2e cc c0 53 ed 63 e1 6e 99 df 39 e7 7c 82\n          full GMAC: a8\
    \ 66 d5 91 0f 88 74 63 06 7c ee fe c4 52 15 d4\n        Received tag = a866d591\
    \ 0f887463 067ceefe c45215d4\n        Computed tag = a866d591 0f887463 067ceefe\
    \ c45215d4\n     Received tag verified.\n"
- title: 17.  RTCP Test Vectors
  contents:
  - "17.  RTCP Test Vectors\n   The examples in this section are all based upon the\
    \ same RTCP packet:\n            81c8000e 4d617273 4e545031 4e545031\n       \
    \     52545020 0000042a 0000eb98 4c756e61\n            deadbeef deadbeef deadbeef\
    \ deadbeef\n            deadbeef\n   with 32-bit SRTCP index 000005d4.\n   As\
    \ shown in Section 9.1, the IV is formed by XORing two 12-octet\n   values.  The\
    \ first 12-octet value is formed by concatenating\n   two zero octets, the 4-octet\
    \ SSRC (found in the fifth through\n   eighth octets of the RTP packet), another\
    \ two padding octets, and the\n   31-bit SRTCP index, right-justified in a 32-bit\
    \ = 4-octet field with\n   a single \"0\" bit prepended as padding.  An example\
    \ of SRTCP IV\n   formation is shown below:\n             | Pad |   SSRC    |\
    \ Pad |  0+SRTCP  |\n              00 00 4d 61 72 73 00 00 00 00 05 d4\n     \
    \  salt   51 75 69 64 20 70 72 6f 20 71 75 6f\n              ------------------------------------\n\
    \         IV   51 75 24 05 52 03 72 6f 20 71 70 bb\n   In an SRTCP packet, a 1-bit\
    \ Encryption flag is prepended to the\n   31-bit SRTCP index to form a 32-bit\
    \ value we shall call the\n   \"ESRTCP word\".  The E-flag is one if the SRTCP\
    \ packet has been\n   encrypted and zero if it has been tagged but not encrypted.\
    \  Note\n   that the ESRTCP field is only present in an SRTCP packet, not in an\n\
    \   RTCP packet.  The full ESRTCP word is part of the AAD.\n   When encrypting\
    \ and tagging an RTCP packet (E-flag = 1), the SRTCP\n   packet consists of the\
    \ following fields in the following order:\n   - The first 8 octets of the RTCP\
    \ packet (part of the AAD).\n   - The cipher.\n   - The ESRTCP word (the final\
    \ part of the AAD).\n   - Any Raw Data that might have been appended to the end\
    \ of the\n     original RTCP packet.\n   Recall that AEAD treats the authentication\
    \ tag as an integral part of\n   the cipher, and in fact the authentication tag\
    \ is the last 8 or\n   16 octets of the cipher.\n   The reader is reminded that\
    \ when the RTCP packet is to be tagged but\n   not encrypted (E-flag = 0), GCM\
    \ will produce a cipher that consists\n   solely of the 8-octet or 16-octet authentication\
    \ tag.  The tagged\n   SRTCP consists of the following fields in the order listed\
    \ below:\n   - All of the AAD, except for the ESRTCP word.\n   - The cipher (=\
    \ the authentication tag).\n   - The ESRTCP word (the final part of the AAD).\n\
    \   - Any Raw Data that might have been appended to the end of the\n     original\
    \ RTCP packet.\n"
- title: 17.1.  SRTCP AEAD_AES_128_GCM Encryption and Tagging
  contents:
  - "17.1.  SRTCP AEAD_AES_128_GCM Encryption and Tagging\n   Encrypting the following\
    \ packet:\n        81c8000d 4d617273 4e545031 4e545032\n        52545020 0000042a\
    \ 0000e930 4c756e61\n        deadbeef deadbeef deadbeef deadbeef\n        deadbeef\n\
    \   Key size = 128 bits\n   Tag size =  16 octets\n   Form the IV\n          |\
    \ Pad |   SSRC    | Pad |   SRTCP   |\n           00 00 4d 61 72 73 00 00 00 00\
    \ 05 d4\n     salt: 51 75 69 64 20 70 72 6f 20 71 75 6f\n       IV: 51 75 24 05\
    \ 52 03 72 6f 20 71 70 bb\n   Key: 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e\
    \ 0f\n   AAD: 81c8000d 4d617273 800005d4\n    PT: 4e545031 4e545032 52545020 0000042a\n\
    \        0000e930 4c756e61 deadbeef deadbeef\n        deadbeef deadbeef deadbeef\n\
    \    IV: 51 75 24 05 52 03 72 6f 20 71 70 bb\n     H: c6a13b37878f5b826f4f8162a1c8d879\n\
    \   Encrypt the Plaintext\n     block # 0\n       IV||blk_cntr: 517524055203726f207170bb00000002\n\
    \          key_block: 2d bd 18 b4 92 8e e6 4e f5 73 87 46 2f 6b 7a b3\n      \
    \  plain_block: 4e 54 50 31 4e 54 50 32 52 54 50 20 00 00 04 2a\n       cipher_block:\
    \ 63 e9 48 85 dc da b6 7c a7 27 d7 66 2f 6b 7e 99\n     block # 1\n       IV||blk_cntr:\
    \ 517524055203726f207170bb00000003\n          key_block: 7f f5 29 c7 20 73 9d\
    \ 4c 18 db 1b 1e ad a0 d1 35\n        plain_block: 00 00 e9 30 4c 75 6e 61 de\
    \ ad be ef de ad be ef\n       cipher_block: 7f f5 c0 f7 6c 06 f3 2d c6 76 a5\
    \ f1 73 0d 6f da\n     block # 2\n       IV||blk_cntr: 517524055203726f207170bb00000004\n\
    \          key_block: 92 4d 25 a9 58 9d 83 02 d5 14 99 b4 e0 14 78 15\n      \
    \  plain_block: de ad be ef de ad be ef de ad be ef\n       cipher_block: 4c e0\
    \ 9b 46 86 30 3d ed 0b b9 27 5b\n   Cipher before tag appended\n        63e94885\
    \ dcdab67c a727d766 2f6b7e99\n        7ff5c0f7 6c06f32d c676a5f1 730d6fda\n  \
    \      4ce09b46 86303ded 0bb9275b\n   Compute the GMAC tag\n     Process the AAD\n\
    \           AAD word: 81c8000d4d617273800005d400000000\n       partial hash: 085d6eb166c555aa62982f630430ec6e\n\
    \     Process the cipher\n        cipher word: 63e94885dcdab67ca727d7662f6b7e99\n\
    \       partial hash: 8c9221be93466d68bbb16fa0d42b0187\n        cipher word: 7ff5c0f76c06f32dc676a5f1730d6fda\n\
    \       partial hash: 221ebb044ec9fd0bf116d7780f198792\n        cipher word: 4ce09b4686303ded0bb9275b00000000\n\
    \       partial hash: 50f70b9ca110ab312dce212657328dae\n     Process the length\
    \ word\n        length word: 00000000000000600000000000000160\n       partial\
    \ hash: 7296107c9716534371dfc1a30c5ffeb5\n   Turn GHASH into GMAC\n          \
    \    GHASH: 72 96 10 7c 97 16 53 43 71 df c1 a3 0c 5f fe b5\n                \
    \ K0: ba dc b4 24 01 d9 1e 6c b4 74 39 d1 49 86 14 6b\n          full GMAC: c8\
    \ 4a a4 58 96 cf 4d 2f c5 ab f8 72 45 d9 ea de\n   Cipher with tag\n        63e94885\
    \ dcdab67c a727d766 2f6b7e99\n        7ff5c0f7 6c06f32d c676a5f1 730d6fda\n  \
    \      4ce09b46 86303ded 0bb9275b c84aa458\n        96cf4d2f c5abf872 45d9eade\n\
    \   Append the ESRTCP word with the E-flag set\n        63e94885 dcdab67c a727d766\
    \ 2f6b7e99\n        7ff5c0f7 6c06f32d c676a5f1 730d6fda\n        4ce09b46 86303ded\
    \ 0bb9275b c84aa458\n        96cf4d2f c5abf872 45d9eade 800005d4\n   Encrypted\
    \ and tagged packet:\n        81c8000d 4d617273 63e94885 dcdab67c\n        a727d766\
    \ 2f6b7e99 7ff5c0f7 6c06f32d\n        c676a5f1 730d6fda 4ce09b46 86303ded\n  \
    \      0bb9275b c84aa458 96cf4d2f c5abf872\n        45d9eade 800005d4\n"
- title: 17.2.  SRTCP AEAD_AES_256_GCM Verification and Decryption
  contents:
  - "17.2.  SRTCP AEAD_AES_256_GCM Verification and Decryption\n   Key size = 256\
    \ bits\n   Tag size =  16 octets\n     Process the length word\n   Decrypting\
    \ the following packet:\n        81c8000d 4d617273 d50ae4d1 f5ce5d30\n       \
    \ 4ba297e4 7d470c28 2c3ece5d bffe0a50\n        a2eaa5c1 110555be 8415f658 c61de047\n\
    \        6f1b6fad 1d1eb30c 4446839f 57ff6f6c\n        b26ac3be 800005d4\n   Key\
    \ size = 256 bits\n   Key size =  16 octets\n   Form the IV\n          | Pad |\
    \   SSRC    | Pad |   SRTCP   |\n           00 00 4d 61 72 73 00 00 00 00 05 d4\n\
    \     salt: 51 75 69 64 20 70 72 6f 20 71 75 6f\n       IV: 51 75 24 05 52 03\
    \ 72 6f 20 71 70 bb\n   Key: 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f\n\
    \        10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f\n   AAD: 81c8000d 4d617273\
    \ 800005d4\n    CT: d50ae4d1 f5ce5d30 4ba297e4 7d470c28\n        2c3ece5d bffe0a50\
    \ a2eaa5c1 110555be\n        8415f658 c61de047 6f1b6fad 1d1eb30c\n        4446839f\
    \ 57ff6f6c b26ac3be\n    IV: 51 75 24 05 52 03 72 6f 20 71 70 bb\n     H: f29000b62a499fd0a9f39a6add2e7780\n\
    \   Verify the received tag\n      1d 1e b3 0c 44 46 83 9f 57 ff 6f 6c b2 6a c3\
    \ be\n     Process the AAD\n           AAD word: 81c8000d4d617273800005d400000000\n\
    \       partial hash: 3ae5afd36dead5280b18950400176b5b\n     Process the cipher\n\
    \        cipher word: d50ae4d1f5ce5d304ba297e47d470c28\n       partial hash: e90fab7546f6940781227227ac926ebe\n\
    \        cipher word: 2c3ece5dbffe0a50a2eaa5c1110555be\n       partial hash: 9b236807d8b2dab07583adce367aa88f\n\
    \        cipher word: 8415f658c61de0476f1b6fad00000000\n       partial hash: e69313f423a75e3e0b7eb93321700e86\n\
    \     Process the length word\n        length word: 00000000000000600000000000000160\n\
    \       partial hash: 3a284af2616fdf505faf37eec39fbc8b\n   Turn GHASH into GMAC\n\
    \              GHASH: 3a 28 4a f2 61 6f df 50 5f af 37 ee c3 9f bc 8b\n      \
    \           K0: 27 36 f9 fe 25 29 5c cf 08 50 58 82 71 f5 7f 35\n          full\
    \ GMAC: 1d 1e b3 0c 44 46 83 9f 57 ff 6f 6c b2 6a c3 be\n        Received tag\
    \ = 1d1eb30c 4446839f 57ff6f6c b26ac3be\n        Computed tag = 1d1eb30c 4446839f\
    \ 57ff6f6c b26ac3be\n     Received tag verified.\n   Decrypt the cipher\n    \
    \ block # 0\n       IV||blk_cntr: 517524055203726f207170bb00000002\n         \
    \ key_block: 9b 5e b4 e0 bb 9a 0d 02 19 f6 c7 c4 7d 47 08 02\n       cipher_block:\
    \ d5 0a e4 d1 f5 ce 5d 30 4b a2 97 e4 7d 47 0c 28\n        plain_block: 4e 54\
    \ 50 31 4e 54 50 32 52 54 50 20 00 00 04 2a\n     block # 1\n       IV||blk_cntr:\
    \ 517524055203726f207170bb00000003\n          key_block: 2c 3e 27 6d f3 8b 64\
    \ 31 7c 47 1b 2e cf a8 eb 51\n       cipher_block: 2c 3e ce 5d bf fe 0a 50 a2\
    \ ea a5 c1 11 05 55 be\n        plain_block: 00 00 e9 30 4c 75 6e 61 de ad be\
    \ ef de ad be ef\n     block # 2\n       IV||blk_cntr: 517524055203726f207170bb00000004\n\
    \          key_block: 5a b8 48 b7 18 b0 5e a8 b1 b6 d1 42 3b 74 39 55\n      \
    \ cipher_block: 84 15 f6 58 c6 1d e0 47 6f 1b 6f ad\n        plain_block: de ad\
    \ be ef de ad be ef de ad be ef\n   Verified and decrypted packet:\n        81c8000d\
    \ 4d617273 4e545031 4e545032\n        52545020 0000042a 0000e930 4c756e61\n  \
    \      deadbeef deadbeef deadbeef deadbeef\n        deadbeef\n"
- title: 17.3.  SRTCP AEAD_AES_128_GCM Tagging Only
  contents:
  - "17.3.  SRTCP AEAD_AES_128_GCM Tagging Only\n   Tagging the following packet:\n\
    \        81c8000d 4d617273 4e545031 4e545032\n        52545020 0000042a 0000e930\
    \ 4c756e61\n        deadbeef deadbeef deadbeef deadbeef\n        deadbeef\n  \
    \ Key size = 128 bits\n   Tag size =  16 octets\n   Form the IV\n          | Pad\
    \ |   SSRC    | Pad |   SRTCP   |\n           00 00 4d 61 72 73 00 00 00 00 05\
    \ d4\n     salt: 51 75 69 64 20 70 72 6f 20 71 75 6f\n       IV: 51 75 24 05 52\
    \ 03 72 6f 20 71 70 bb\n   Key: 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f\n\
    \   AAD: 81c8000d 4d617273 4e545031 4e545032\n        52545020 0000042a 0000e930\
    \ 4c756e61\n        deadbeef deadbeef deadbeef deadbeef\n        deadbeef 000005d4\n\
    \    IV: 51 75 24 05 52 03 72 6f 20 71 70 bb\n     H: c6a13b37878f5b826f4f8162a1c8d879\n\
    \   Compute the GMAC tag\n     Process the AAD\n           AAD word: 81c8000d4d6172734e5450314e545032\n\
    \       partial hash: f8dbbe278e06afe17fb4fb2e67f0a22e\n           AAD word: 525450200000042a0000e9304c756e61\n\
    \       partial hash: 6ccd900dfd0eb292f68f8a410d0648ec\n           AAD word: deadbeefdeadbeefdeadbeefdeadbeef\n\
    \       partial hash: 6a14be0ea384c6b746235ba955a57ff5\n           AAD word: deadbeef000005d40000000000000000\n\
    \       partial hash: cc81f14905670a1e37f8bc81a91997cd\n     Process the length\
    \ word\n        length word: 00000000000001c00000000000000000\n       partial\
    \ hash: 3ec16d4c3c0e90a59e91be415bd976d8\n   Turn GHASH into GMAC\n          \
    \    GHASH: 3e c1 6d 4c 3c 0e 90 a5 9e 91 be 41 5b d9 76 d8\n                \
    \ K0: ba dc b4 24 01 d9 1e 6c b4 74 39 d1 49 86 14 6b\n          full GMAC: 84\
    \ 1d d9 68 3d d7 8e c9 2a e5 87 90 12 5f 62 b3\n   Cipher with tag\n        841dd968\
    \ 3dd78ec9 2ae58790 125f62b3\n   Tagged packet:\n        81c8000d 4d617273 4e545031\
    \ 4e545032\n        52545020 0000042a 0000e930 4c756e61\n        deadbeef deadbeef\
    \ deadbeef deadbeef\n        deadbeef 841dd968 3dd78ec9 2ae58790\n        125f62b3\
    \ 000005d4\n"
- title: 17.4.  SRTCP AEAD_AES_256_GCM Tag Verification
  contents:
  - "17.4.  SRTCP AEAD_AES_256_GCM Tag Verification\n   Key size = 256 bits\n   Tag\
    \ size =  16 octets\n     Process the length word\n   Verifying the following\
    \ packet:\n        81c8000d 4d617273 4e545031 4e545032\n        52545020 0000042a\
    \ 0000e930 4c756e61\n        deadbeef deadbeef deadbeef deadbeef\n        deadbeef\
    \ 91db4afb feee5a97 8fab4393\n        ed2615fe 000005d4\n   Key size = 256 bits\n\
    \   Key size =  16 octets\n   Form the IV\n          | Pad |   SSRC    | Pad |\
    \   SRTCP   |\n           00 00 4d 61 72 73 00 00 00 00 05 d4\n     salt: 51 75\
    \ 69 64 20 70 72 6f 20 71 75 6f\n       IV: 51 75 24 05 52 03 72 6f 20 71 70 bb\n\
    \   Key: 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f\n        10 11 12 13\
    \ 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f\n   AAD: 81c8000d 4d617273 4e545031 4e545032\n\
    \        52545020 0000042a 0000e930 4c756e61\n        deadbeef deadbeef deadbeef\
    \ deadbeef\n        deadbeef 000005d4\n    CT: 91db4afb feee5a97 8fab4393 ed2615fe\n\
    \    IV: 51 75 24 05 52 03 72 6f 20 71 70 bb\n     H: f29000b62a499fd0a9f39a6add2e7780\n\
    \   Verify the received tag\n      91 db 4a fb fe ee 5a 97 8f ab 43 93 ed 26 15\
    \ fe\n     Process the AAD\n           AAD word: 81c8000d4d6172734e5450314e545032\n\
    \       partial hash: 7bc665c71676a5a5f663b3229af4b85c\n           AAD word: 525450200000042a0000e9304c756e61\n\
    \       partial hash: 34ed77752703ab7d69f44237910e3bc0\n           AAD word: deadbeefdeadbeefdeadbeefdeadbeef\n\
    \       partial hash: 74a59f1a99282344d64ab1c8a2be6cf8\n           AAD word: deadbeef000005d40000000000000000\n\
    \       partial hash: 126335c0baa7ab1b79416ceeb9f7a518\n     Process the length\
    \ word\n        length word: 00000000000001c00000000000000000\n       partial\
    \ hash: b6edb305dbc7065887fb1b119cd36acb\n   Turn GHASH into GMAC\n          \
    \    GHASH: b6 ed b3 05 db c7 06 58 87 fb 1b 11 9c d3 6a cb\n                \
    \ K0: 27 36 f9 fe 25 29 5c cf 08 50 58 82 71 f5 7f 35\n          full GMAC: 91\
    \ db 4a fb fe ee 5a 97 8f ab 43 93 ed 26 15 fe\n        Received tag = 91db4afb\
    \ feee5a97 8fab4393 ed2615fe\n        Computed tag = 91db4afb feee5a97 8fab4393\
    \ ed2615fe\n     Received tag verified.\n   Verified packet:\n        81c8000d\
    \ 4d617273 4e545031 4e545032\n        52545020 0000042a 0000e930 4c756e61\n  \
    \      deadbeef deadbeef deadbeef deadbeef\n        deadbeef\n"
- title: 18.  References
  contents:
  - '18.  References

    '
- title: 18.1.  Normative References
  contents:
  - "18.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3550]  Schulzrinne, H., Casner, S., Frederick, R., and V.\n          \
    \    Jacobson, \"RTP: A Transport Protocol for Real-Time\n              Applications\"\
    , STD 64, RFC 3550, DOI 10.17487/RFC3550,\n              July 2003, <http://www.rfc-editor.org/info/rfc3550>.\n\
    \   [RFC3711]  Baugher, M., McGrew, D., Naslund, M., Carrara, E., and K.\n   \
    \           Norrman, \"The Secure Real-time Transport Protocol (SRTP)\",\n   \
    \           RFC 3711, DOI 10.17487/RFC3711, March 2004,\n              <http://www.rfc-editor.org/info/rfc3711>.\n\
    \   [RFC3830]  Arkko, J., Carrara, E., Lindholm, F., Naslund, M., and K.\n   \
    \           Norrman, \"MIKEY: Multimedia Internet KEYing\", RFC 3830,\n      \
    \        DOI 10.17487/RFC3830, August 2004,\n              <http://www.rfc-editor.org/info/rfc3830>.\n\
    \   [RFC4568]  Andreasen, F., Baugher, M., and D. Wing, \"Session\n          \
    \    Description Protocol (SDP) Security Descriptions for Media\n            \
    \  Streams\", RFC 4568, DOI 10.17487/RFC4568, July 2006,\n              <http://www.rfc-editor.org/info/rfc4568>.\n\
    \   [RFC5116]  McGrew, D., \"An Interface and Algorithms for Authenticated\n \
    \             Encryption\", RFC 5116, DOI 10.17487/RFC5116, January 2008,\n  \
    \            <http://www.rfc-editor.org/info/rfc5116>.\n   [RFC5234]  Crocker,\
    \ D., Ed., and P. Overell, \"Augmented BNF for\n              Syntax Specifications:\
    \ ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234, January 2008,\n\
    \              <http://www.rfc-editor.org/info/rfc5234>.\n   [RFC5764]  McGrew,\
    \ D. and E. Rescorla, \"Datagram Transport Layer\n              Security (DTLS)\
    \ Extension to Establish Keys for the Secure\n              Real-time Transport\
    \ Protocol (SRTP)\", RFC 5764,\n              DOI 10.17487/RFC5764, May 2010,\n\
    \              <http://www.rfc-editor.org/info/rfc5764>.\n   [RFC6188]  McGrew,\
    \ D., \"The Use of AES-192 and AES-256 in Secure\n              RTP\", RFC 6188,\
    \ DOI 10.17487/RFC6188, March 2011,\n              <http://www.rfc-editor.org/info/rfc6188>.\n\
    \   [RFC6904]  Lennox, J., \"Encryption of Header Extensions in the Secure\n \
    \             Real-time Transport Protocol (SRTP)\", RFC 6904,\n             \
    \ DOI 10.17487/RFC6904, April 2013,\n              <http://www.rfc-editor.org/info/rfc6904>.\n"
- title: 18.2.  Informative References
  contents:
  - "18.2.  Informative References\n   [BN00]     Bellare, M. and C. Namprempre, \"\
    Authenticated Encryption:\n              Relations among notions and analysis\
    \ of the generic\n              composition paradigm\", Proceedings of ASIACRYPT\
    \ 2000,\n              Springer-Verlag, LNCS 1976, pp. 531-545,\n            \
    \  DOI 10.1007/3-540-44448-3_41,\n              <http://www-cse.ucsd.edu/users/mihir/papers/oem.html>.\n\
    \   [GCM]      Dworkin, M., \"NIST Special Publication 800-38D:\n            \
    \  Recommendation for Block Cipher Modes of Operation:\n              Galois/Counter\
    \ Mode (GCM) and GMAC\", U.S. National\n              Institute of Standards and\
    \ Technology, November 2007,\n              <http://csrc.nist.gov/publications/nistpubs/\n\
    \              800-38D/SP-800-38D.pdf>.\n   [R02]      Rogaway, P., \"Authenticated-Encryption\
    \ with Associated-\n              Data\", ACM Conference on Computer and Communications\n\
    \              Security (CCS'02), pp. 98-107, ACM Press,\n              DOI 10.1145/586110.586125,\
    \ September 2002,\n              <http://www.cs.ucdavis.edu/~rogaway/papers/ad.html>.\n\
    \   [RFC4771]  Lehtovirta, V., Naslund, M., and K. Norrman, \"Integrity\n    \
    \          Transform Carrying Roll-Over Counter for the Secure\n             \
    \ Real-time Transport Protocol (SRTP)\", RFC 4771,\n              DOI 10.17487/RFC4771,\
    \ January 2007,\n              <http://www.rfc-editor.org/info/rfc4771>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to thank Michael Peck, Michael Torla,\
    \ Qin Wu,\n   Magnus Westerlund, Oscar Ohllson, Woo-Hwan Kim, John Mattsson,\n\
    \   Richard Barnes, Morris Dworkin, Stephen Farrell, and many other\n   reviewers\
    \ who provided valuable comments on earlier draft versions of\n   this document.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   David A. McGrew\n   Cisco Systems, Inc.\n   510 McCarthy\
    \ Blvd.\n   Milpitas, CA  95035\n   United States\n   Phone: (408) 525 8651\n\
    \   Email: mcgrew@cisco.com\n   URI:   http://www.mindspring.com/~dmcgrew/dam.htm\n\
    \   Kevin M. Igoe\n   NSA/CSS Commercial Solutions Center\n   National Security\
    \ Agency\n   Email: mythicalkevin@yahoo.com\n"
