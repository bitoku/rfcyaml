- contents:
  - '                 Defining and Using Metadata with YANG

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines a YANG extension that allows for defining\n
    \  metadata annotations in YANG modules.  The document also specifies\n   XML
    and JSON encoding of annotations and other rules for annotating\n   instances
    of YANG data nodes.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7952.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . . .
    . . .   5\n     2.1.  Key Words . . . . . . . . . . . . . . . . . . . . . . .
    .   5\n     2.2.  Terms Defined in Other Documents  . . . . . . . . . . . .   5\n
    \    2.3.  Namespaces and Prefixes . . . . . . . . . . . . . . . . .   7\n     2.4.
    \ Definitions of New Terms  . . . . . . . . . . . . . . . .   7\n   3.  Defining
    Annotations in YANG  . . . . . . . . . . . . . . . .   8\n     3.1.  Example Definition
    \ . . . . . . . . . . . . . . . . . . .   9\n   4.  Using Annotations . . . .
    . . . . . . . . . . . . . . . . . .   9\n   5.  The Encoding of Annotations .
    . . . . . . . . . . . . . . . .  10\n     5.1.  XML Encoding  . . . . . . . .
    . . . . . . . . . . . . . .  10\n     5.2.  JSON Encoding . . . . . . . . . .
    . . . . . . . . . . . .  11\n       5.2.1.  Metadata Object and Annotations .
    . . . . . . . . . .  11\n       5.2.2.  Adding Annotations to anydata, container,
    and list\n               Entries . . . . . . . . . . . . . . . . . . . . . . .
    \ 12\n       5.2.3.  Adding Annotations to anyxml and leaf Instances . . .  12\n
    \      5.2.4.  Adding Annotations to leaf-list Entries . . . . . . .  13\n   6.
    \ Representing Annotations in DSDL Schemas  . . . . . . . . . .  14\n   7.  Metadata
    YANG Module  . . . . . . . . . . . . . . . . . . . .  16\n   8.  IANA Considerations
    . . . . . . . . . . . . . . . . . . . . .  18\n   9.  Security Considerations
    . . . . . . . . . . . . . . . . . . .  18\n   10. References  . . . . . . . .
    . . . . . . . . . . . . . . . . .  19\n     10.1.  Normative References . . .
    . . . . . . . . . . . . . . .  19\n     10.2.  Informative References . . . .
    . . . . . . . . . . . . .  20\n   Acknowledgements  . . . . . . . . . . . . .
    . . . . . . . . . . .  21\n   Author's Address  . . . . . . . . . . . . . . .
    . . . . . . . . .  21\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   There is a need to be able to annotate instances of YANG
    [RFC7950]\n   data nodes with metadata.  Typical use cases are as follows:\n   o
    \ Complementing regular data model information with\n      instance-specific metadata,
    comments, etc.\n   o  Providing information about the rendering of data in user\n
    \     interfaces.\n   o  Deactivating a subtree in a configuration datastore while
    keeping\n      the data in place.\n   o  Network management protocols often use
    metadata annotations for\n      various purposes in both operation requests and
    responses.  For\n      example, the <edit-config> operation in the Network Configuration\n
    \     Protocol (NETCONF) (see Section 7.2 of [RFC6241]) uses annotations\n      in
    the form of XML attributes for identifying the location in a\n      configuration
    datastore and the type of the operation.\n   However, metadata annotations could
    potentially lead to\n   interoperability problems if they are used in an ad hoc
    fashion by\n   different parties and/or without proper documentation.  A sound\n
    \  metadata framework for YANG should therefore satisfy these\n   requirements:\n
    \  1.  The set of annotations must be extensible in a decentralized\n       manner
    so as to allow for defining new annotations without\n       running the risk of
    collisions with annotations defined and used\n       by others.\n   2.  The syntax
    and semantics of annotations must be documented, and\n       the documentation
    must be easily accessible.\n   3.  Clients of network management protocols such
    as NETCONF [RFC6241]\n       or RESTCONF [RESTCONF] must be able to discover all
    annotations\n       supported by a given server and identify each of them correctly.\n
    \  4.  Annotations sent by a server should not break clients that don't\n       support
    them.\n   This document proposes a systematic way to define metadata\n   annotations.
    \ For this purpose, the YANG extension \"annotation\" is\n   defined in the module
    \"ietf-yang-metadata\" (Section 7).  Other YANG\n   modules importing this module
    can use the \"annotation\" statement for\n   defining one or more annotations.\n
    \  The benefits of defining the metadata annotations in a YANG module\n   are
    the following:\n   o  Each annotation is bound to a YANG module name and namespace
    URI.\n      This makes its encoding in instance documents (both XML and JSON)\n
    \     straightforward and consistent with the encoding of YANG data node\n      instances.\n
    \  o  Annotations defined in IETF Standards Track documents are\n      indirectly
    registered through IANA in the \"YANG Module Names\"\n      registry [RFC6020].\n
    \  o  Annotations are included in the data model.  YANG compilers and\n      tools
    supporting a certain annotation can thus take them into\n      account and modify
    their behavior accordingly.\n   o  The semantics of an annotation are defined
    in the \"description\"\n      and \"reference\" statements.\n   o  An annotation
    can be declared as conditional by using the\n      \"if-feature\" statement.\n
    \  o  The type of each annotation is explicitly specified; any YANG\n      built-in
    or derived type that is available for leaf or leaf-list\n      data nodes may
    be specified for annotations as well.\n   In the XML encoding, XML attributes
    are a natural instrument for\n   attaching annotations to data node instances.
    \ This document\n   deliberately adopts some restrictions in order to remain compatible\n
    \  with the XML encoding of YANG data node instances and limitations of\n   XML
    attributes.  Specifically,\n   o  annotations can only be scalar values.\n   o
    \ annotations cannot be attached to a whole list or leaf-list\n      instance,
    only to individual list or leaf-list entries.\n   Due to the rules for YANG extensions
    (see Section 6.3.1 in\n   [RFC7950]), annotation definitions posit relatively
    weak conformance\n   requirements.  The alternative of introducing a new built-in
    YANG\n   statement for defining annotations was considered, but it was seen as\n
    \  a major change to the language that is inappropriate for YANG 1.1,\n   which
    was chartered as a maintenance revision.  After evaluating\n   real-life usage
    of metadata annotations, it is conceivable that such\n   a new built-in statement
    might be added in a future revision of YANG.\n"
  title: 1.  Introduction
- contents:
  - '2.  Terminology

    '
  - contents:
    - "2.1.  Key Words\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and
      \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
    title: 2.1.  Key Words
  - contents:
    - "2.2.  Terms Defined in Other Documents\n   The following terms are defined
      in [RFC6241]:\n   o  capability\n   o  client\n   o  datastore\n   o  message\n
      \  o  protocol operation\n   o  server\n   The following terms are defined in
      [RFC7950]:\n   o  action\n   o  anydata\n   o  anyxml\n   o  built-in type\n
      \  o  container\n   o  data model\n   o  data node\n   o  data tree\n   o  derived
      type\n   o  extension\n   o  leaf\n   o  leaf-list\n   o  list\n   o  module\n
      \  o  Remote Procedure Call (RPC) input and output\n   The following terms are
      defined in [XML-INFOSET]:\n   o  attribute\n   o  document\n   o  element\n
      \  The following terms are defined in [XML-NAMES]:\n   o  local name\n   o  namespace
      name\n   o  prefix\n   o  qualified name\n   The following terms are defined
      in [RFC7159]:\n   o  array\n   o  member\n   o  object\n   o  primitive type\n"
    title: 2.2.  Terms Defined in Other Documents
  - contents:
    - "2.3.  Namespaces and Prefixes\n   In the following text, XML element names
      and YANG extension\n   statements are always written with explicit namespace
      prefixes that\n   are assumed to be bound to URI references as shown in Table
      1.\n        +--------+------------------------------------------------+\n        |
      Prefix | URI Reference                                  |\n        +--------+------------------------------------------------+\n
      \       | elm    | http://example.org/example-last-modified       |\n        |
      md     | urn:ietf:params:xml:ns:yang:ietf-yang-metadata |\n        | rng    |
      http://relaxng.org/ns/structure/1.0            |\n        +--------+------------------------------------------------+\n
      \    Table 1: Used Namespace Prefixes and Corresponding URI References\n"
    title: 2.3.  Namespaces and Prefixes
  - contents:
    - "2.4.  Definitions of New Terms\n   o  annotation: a single item of metadata
      that is attached to YANG\n      data node instances.\n   o  metadata: additional
      information that complements a data tree.\n   o  metadata object: an object
      in JSON encoding that contains all\n      annotations attached to a given data
      node instance.\n"
    title: 2.4.  Definitions of New Terms
  title: 2.  Terminology
- contents:
  - "3.  Defining Annotations in YANG\n   Metadata annotations are defined by the
    YANG extension\n   \"md:annotation\".  This YANG language extension is defined
    in the\n   module \"ietf-yang-metadata\" (Section 7).\n   Substatements of \"md:annotation\"
    are shown in Table 2.  They are all\n   core YANG statements, and the numbers
    in the second column refer to\n   the corresponding section in [RFC7950] where
    each statement is\n   described.\n           +--------------+---------------------+-------------+\n
    \          | substatement | section in RFC 7950 | cardinality |\n           +--------------+---------------------+-------------+\n
    \          | description  | 7.21.3              | 0..1        |\n           |
    if-feature   | 7.20.2              | 0..n        |\n           | reference    |
    7.21.4              | 0..1        |\n           | status       | 7.21.2              |
    0..1        |\n           | type         | 7.6.3               | 1           |\n
    \          | units        | 7.3.3               | 0..1        |\n           +--------------+---------------------+-------------+\n
    \                Table 2: Substatements of \"md:annotation\"\n   An annotation
    carries a single value.  The \"type\" substatement, which\n   MUST be present,
    takes as an argument the name of an existing\n   built-in or derived type, and
    the value of the annotation MUST match\n   this type.  See Section 7.4 of [RFC7950]
    for details.\n   An annotation can be made conditional by using one or more\n
    \  \"if-feature\" statements; the annotation is then supported only by\n   servers
    that advertise the corresponding feature.\n   The semantics and usage rules for
    an annotation SHOULD be fully\n   specified in \"description\", \"reference\",
    and \"units\" statements.\n   An annotation MUST NOT change the data tree semantics
    defined by\n   YANG.  For example, it is illegal to define and use an annotation\n
    \  that allows for overriding uniqueness of leaf-list entries.\n   The \"status\"
    statement can be used exactly as it is used for YANG\n   data nodes.\n   A YANG
    module containing one or more \"md:annotation\" statements\n   SHOULD NOT be used
    for defining data nodes or groupings.  Also,\n   derived types, identities, and
    features SHOULD NOT be defined in such\n   a module unless they are used by the
    definitions of annotations in\n   that module.\n"
  - contents:
    - "3.1.  Example Definition\n   The following module defines the \"last-modified\"
      annotation:\n   module example-last-modified {\n     namespace \"http://example.org/example-last-modified\";\n
      \    prefix \"elm\";\n     import ietf-yang-types {\n       prefix \"yang\";\n
      \    }\n     import ietf-yang-metadata {\n       prefix \"md\";\n     }\n     md:annotation
      last-modified {\n       type yang:date-and-time;\n       description\n         \"This
      annotation contains the date and time when the\n          annotated instance
      was last modified (or created).\";\n     }\n   }\n"
    title: 3.1.  Example Definition
  title: 3.  Defining Annotations in YANG
- contents:
  - "4.  Using Annotations\n   By advertising a YANG module in which a metadata annotation
    is\n   defined using the \"md:annotation\" statement, a server indicates that\n
    \  it is prepared to handle that annotation according to the\n   annotation's
    definition.  That is, an annotation advertised by the\n   server may be attached
    to an instance of a data node defined in any\n   YANG module that is implemented
    by the server.\n   Depending on its semantics, an annotation may have an effect
    only in\n   certain data trees and/or on instances of specific types of data\n
    \  nodes.\n   A client MUST NOT add a specific annotation to data node instances
    if\n   the server didn't advertise it.\n   Due care has to be exercised when introducing
    annotations in network\n   management systems in order to avoid interoperability
    problems and\n   software failures caused by a client that does not understand
    the\n   annotations' semantics.  Generally, it is safe for a server to use\n   annotations
    in the following cases:\n   o  An annotation is an integral part of a built-in
    or negotiated\n      protocol capability.\n   o  An annotation contains auxiliary
    information that is not critical\n      for protocol operation.\n   o  The client
    explicitly asks the server, e.g., via a parameter of a\n      protocol operation
    request, to include an annotation in the\n      response.\n"
  title: 4.  Using Annotations
- contents:
  - "5.  The Encoding of Annotations\n   XML attributes are a natural choice for encoding
    metadata in XML\n   instance documents.  For JSON [RFC7159], there is no generally\n
    \  established method for encoding metadata.  This document thus\n   introduces
    a special encoding method that is consistent with the JSON\n   encoding of YANG
    data node instances as defined in [RFC7951].\n"
  - contents:
    - "5.1.  XML Encoding\n   Metadata annotations are added to XML-encoded instances
      of YANG data\n   nodes as XML attributes according to these rules:\n   o  The
      local name of the attribute SHALL be the same as the name of\n      the annotation
      specified in the argument of the corresponding\n      \"md:annotation\" statement.\n
      \  o  The namespace of the attribute SHALL be identified by the URI that\n      appears
      as the argument of the \"namespace\" statement in the YANG\n      module where
      the annotation is defined.  It is RECOMMENDED that\n      the prefix specified
      by the \"prefix\" statement in the same module\n      be used in the qualified
      name of the attribute.\n   o  The attribute value SHALL be encoded in the same
      way as the value\n      of a YANG leaf instance having the same type; see Section
      9 of\n      [RFC7950].\n   For example, the \"last-modified\" annotation defined
      in Section 3.1\n   may be encoded as follows:\n   <foo xmlns:elm=\"http://example.org/example-last-modified\"\n
      \       elm:last-modified=\"2015-09-16T10:27:35+02:00\">\n     ...\n   </foo>\n"
    title: 5.1.  XML Encoding
  - contents:
    - "5.2.  JSON Encoding\n   The JSON metadata encoding defined in this section
      has the following\n   properties:\n   1.  The encoding of YANG data node instances
      as defined in [RFC7951]\n       does not change.\n   2.  Namespaces of metadata
      annotations are encoded in the same way as\n       namespaces of YANG data node
      instances; see [RFC7951].\n"
    - contents:
      - "5.2.1.  Metadata Object and Annotations\n   All metadata annotations assigned
        to a YANG data node instance are\n   encoded as members (name/value pairs)
        of a single JSON object,\n   henceforth denoted as the metadata object.  The
        placement and name of\n   this object depend on the type of the data node
        as specified in the\n   following subsections.\n   The name of a metadata
        annotation (as a member of the metadata\n   object) has the following ABNF
        syntax [RFC5234], where the production\n   for \"identifier\" is defined in
        Section 14 of [RFC7950]:\n   annotation-name = identifier \":\" identifier\n
        \  where the left identifier is the name of the YANG module in which the\n
        \  annotation is defined and the identifier on the right is the name of\n
        \  the annotation specified in the argument of the corresponding\n   \"md:annotation\"
        statement.\n   Note that unlike member names of YANG data node instances in
        JSON\n   encoding (see Section 4 in [RFC7951]), for annotations the explicit\n
        \  namespace identifier (module name) must always be present.\n   The value
        of a metadata annotation SHALL be encoded in exactly the\n   same way as the
        value of a YANG leaf node having the same type as the\n   annotation; see
        Section 6 of [RFC7951].\n"
      title: 5.2.1.  Metadata Object and Annotations
    - contents:
      - "5.2.2.  Adding Annotations to anydata, container, and list Entries\n   For
        a data node instance that is encoded as a JSON object (i.e., a\n   container,
        list entry, or anydata node), the metadata object is added\n   as a new member
        of that object with the name \"@\".\n   Examples:\n   o  \"cask\" is a container
        or anydata node:\n   \"cask\": {\n     \"@\": {\n       \"example-last-modified:last-modified\":\n
        \        \"2015-09-16T10:27:35+02:00\"\n     },\n     ...\n   }\n   o  \"seq\"
        is a list whose key is \"name\"; annotation \"last-modified\" is\n      added
        only to the first entry:\n   \"seq\": [\n     {\n       \"@\": {\n         \"example-last-modified:last-modified\":\n
        \            \"2015-09-16T10:27:35+02:00\"\n       },\n       \"name\": \"one\",\n
        \      ...\n     },\n     {\n       \"name\": \"two\",\n       ...\n     }\n
        \  ]\n"
      title: 5.2.2.  Adding Annotations to anydata, container, and list Entries
    - contents:
      - "5.2.3.  Adding Annotations to anyxml and leaf Instances\n   For an anyxml
        or leaf instance, the metadata object is added as a\n   sibling name/value
        pair whose name is the symbol \"@\" concatenated\n   with the name of the
        leaf or anyxml member that is being annotated.\n   The namespace part (module
        name) is included if and only if it is in\n   the name of the annotated member.\n
        \  Examples:\n   o  \"flag\" is a leaf node of the \"boolean\" type defined
        in module\n      \"foo\", and we assume that the namespace name has to be
        expressed\n      in its JSON encoding:\n   \"foo:flag\": true,\n   \"@foo:flag\":
        {\n     \"example-last-modified:last-modified\":\n       \"2015-09-16T10:27:35+02:00\"\n
        \  }\n   o  \"stuff\" is an anyxml node:\n   \"stuff\": [1, null, \"three\"],\n
        \  \"@stuff\": {\n     \"example-last-modified:last-modified\":\n       \"2015-09-16T10:27:35+02:00\"\n
        \  }\n"
      title: 5.2.3.  Adding Annotations to anyxml and leaf Instances
    - contents:
      - "5.2.4.  Adding Annotations to leaf-list Entries\n   For a leaf-list entry,
        which is represented as a JSON array with\n   values of a primitive type,
        annotations may be assigned to one or\n   more entries by adding a name/array
        pair as a sibling of the\n   leaf-list entry, where the name is the symbol
        \"@\" concatenated with\n   the name of the leaf-list that is being annotated,
        and the value is a\n   JSON array whose i-th element is the metadata object
        with annotations\n   assigned to the i-th entry of the leaf-list entry, or
        null if the\n   i-th entry has no annotations.\n   Trailing null values in
        that array, i.e., those following the last\n   non-null metadata object, MAY
        be omitted.\n   For example, in the following leaf-list instance with four
        entries,\n   the \"last-modified\" annotation is added to the second and third\n
        \  entries in the following way:\n   \"bibliomod:folio\": [6, 3, 7, 8],\n
        \  \"@bibliomod:folio\": [\n     null,\n     { \"example-last-modified:last-modified\":\n
        \        \"2015-06-18T17:01:14+02:00\"\n     },\n     { \"example-last-modified:last-modified\":\n
        \        \"2015-09-16T10:27:35+02:00\"\n     }\n   ]\n"
      title: 5.2.4.  Adding Annotations to leaf-list Entries
    title: 5.2.  JSON Encoding
  title: 5.  The Encoding of Annotations
- contents:
  - "6.  Representing Annotations in DSDL Schemas\n   [RFC6110] defines the standard
    mapping of YANG data models to\n   Document Schema Definition Languages (DSDL)
    [ISO.19757-1].  This\n   section specifies the mapping for the extension statement\n
    \  \"md:annotation\" (Section 7), which enables validation of XML instance\n   documents
    containing metadata annotations.\n   The first step of the DSDL mapping procedure,
    i.e., the\n   transformation of the YANG data model to the hybrid schema (see\n
    \  Section 6 in [RFC6110]), is modified as follows:\n   1.  If the data model
    contains at least one \"md:annotation\"\n       statement, then a RELAX NG [ISO.19757-2]
    named pattern definition\n       MUST be added as a child of the root <rng:grammar>
    element in the\n       hybrid schema.  It is RECOMMENDED to use the name\n       \"__yang_metadata__\"
    for this named pattern.\n   2.  A reference to the named pattern described in
    item 1 MUST be\n       included as a child of every <rng:element> pattern that\n
    \      corresponds to an anydata, container, leaf, leaf-list, or list\n       data
    node.\n   3.  Every metadata annotation definition in the form\n       md:annotation
    ARGUMENT {\n         ...\n       }\n       is mapped to the following RELAX NG
    [ISO.19757-2] pattern:\n       <rng:optional>\n         <rng:attribute name=\"PREFIX:ARGUMENT\">\n
    \          ...\n         </rng:attribute>\n       </rng:optional>\n       where
    PREFIX is the prefix bound to the namespace URI of the YANG\n       module that
    contains the \"md:annotation\" statement.  The above\n       pattern SHALL be
    inserted as a child of the named pattern\n       described in item 1.\n   4.  Substatements
    of \"md:annotation\" SHALL be mapped to children of\n       the \"rng:attribute\"
    pattern exactly as described in Section 10 of\n       [RFC6110].\n   For example,
    the named pattern (item 1), when constructed only for\n   the \"last-modified\"
    annotation, will have the following definition:\n   <rng:define name=\"__yang_metadata__\">\n
    \    <rng:optional>\n       <rng:attribute name=\"elm:last-modified\">\n         <rng:ref
    name=\"ietf-yang-types__date-and-time\"/>\n       </rng:attribute>\n     </rng:optional>\n
    \  </rng:define>\n   Every \"rng:element\" pattern that corresponds to an anydata,\n
    \  container, leaf, list, or leaf-list data node will then contain a\n   reference
    to the above named pattern; for example:\n   <rng:element name=\"foo:bar\">\n
    \    <rng:ref name=\"__yang_metadata__\"/>\n     ...\n   </rng:element>\n   Note
    that it is not necessary to use such a reference for\n   \"rng:element\" patterns
    corresponding to anyxml data nodes because\n   they already permit any XML attributes
    to be attached to their\n   instances.\n   The second step of the DSDL mapping
    procedure, i.e., the\n   transformation of the hybrid schema to RELAX NG [ISO.19757-2],\n
    \  Schematron [ISO.19757-3], and Document Semantics Renaming Language\n   (DSRL)
    [ISO.19757-8] schemas, is unaffected by the inclusion of\n   \"md:annotation\".\n"
  title: 6.  Representing Annotations in DSDL Schemas
- contents:
  - "7.  Metadata YANG Module\n   <CODE BEGINS> file \"ietf-yang-metadata@2016-08-05.yang\"\n
    \  module ietf-yang-metadata {\n     namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-metadata\";\n
    \    prefix \"md\";\n     organization\n       \"IETF NETMOD (NETCONF Data Modeling
    Language) Working Group\";\n     contact\n       \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n
    \       WG List:  <mailto:netmod@ietf.org>\n        WG Chair: Lou Berger\n                  <mailto:lberger@labn.net>\n
    \       WG Chair: Kent Watsen\n                  <mailto:kwatsen@juniper.net>\n
    \       Editor:   Ladislav Lhotka\n                  <mailto:lhotka@nic.cz>\";\n
    \    description\n       \"This YANG module defines an 'extension' statement that
    allows\n        for defining metadata annotations.\n        Copyright (c) 2016
    IETF Trust and the persons identified as\n        authors of the code.  All rights
    reserved.\n        Redistribution and use in source and binary forms, with or\n
    \       without modification, is permitted pursuant to, and subject to\n        the
    license terms contained in, the Simplified BSD License set\n        forth in Section
    4.c of the IETF Trust's Legal Provisions\n        Relating to IETF Documents\n
    \       (http://trustee.ietf.org/license-info).\n        This version of this
    YANG module is part of RFC 7952\n        (http://www.rfc-editor.org/info/rfc7952);
    see the RFC itself\n        for full legal notices.\";\n     revision 2016-08-05
    {\n       description\n         \"Initial revision.\";\n       reference\n         \"RFC
    7952: Defining and Using Metadata with YANG\";\n     }\n     extension annotation
    {\n       argument name;\n       description\n         \"This extension allows
    for defining metadata annotations in\n          YANG modules.  The 'md:annotation'
    statement can appear only\n          at the top level of a YANG module or submodule,
    i.e., it\n          becomes a new alternative in the ABNF production rule for\n
    \         'body-stmts' (Section 14 in RFC 7950).\n          The argument of the
    'md:annotation' statement defines the name\n          of the annotation.  Syntactically,
    it is a YANG identifier as\n          defined in Section 6.2 of RFC 7950.\n          An
    annotation defined with this 'extension' statement inherits\n          the namespace
    and other context from the YANG module in which\n          it is defined.\n          The
    data type of the annotation value is specified in the same\n          way as for
    a leaf data node using the 'type' statement.\n          The semantics of the annotation
    and other documentation can be\n          specified using the following standard
    YANG substatements (all\n          are optional): 'description', 'if-feature',
    'reference',\n          'status', and 'units'.\n          A server announces support
    for a particular annotation by\n          including the module in which the annotation
    is defined among\n          the advertised YANG modules, e.g., in a NETCONF <hello>\n
    \         message or in the YANG library (RFC 7950).  The annotation can\n          then
    be attached to any instance of a data node defined in any\n          YANG module
    that is advertised by the server.\n          XML encoding and JSON encoding of
    annotations are defined in\n          RFC 7952.\";\n     }\n   }\n   <CODE ENDS>\n"
  title: 7.  Metadata YANG Module
- contents:
  - "8.  IANA Considerations\n   This document registers a URI in the \"IETF XML Registry\"
    [RFC3688].\n   Following the format in RFC 3688, the following registration has
    been\n   made.\n   ---------------------------------------------------------------------\n
    \  URI: urn:ietf:params:xml:ns:yang:ietf-yang-metadata\n   Registrant Contact:
    The NETMOD WG of the IETF.\n   XML: N/A, the requested URI is an XML namespace.\n
    \  ---------------------------------------------------------------------\n   This
    document registers a YANG module in the \"YANG Module Names\"\n   registry [RFC6020].\n
    \  ---------------------------------------------------------------------\n   Name:
    \        ietf-yang-metadata\n   Namespace:    urn:ietf:params:xml:ns:yang:ietf-yang-metadata\n
    \  Prefix:       md\n   Reference:    RFC 7952\n   ---------------------------------------------------------------------\n"
  title: 8.  IANA Considerations
- contents:
  - "9.  Security Considerations\n   This document introduces a mechanism for defining
    metadata\n   annotations in YANG modules and attaching them to instances of YANG\n
    \  data nodes.  By itself, this mechanism represents no security threat.\n   Security
    implications of a particular annotation defined using this\n   mechanism MUST
    be duly considered and documented in the annotation's\n   definition.\n   An annotation
    SHOULD be subject to the same or stricter access\n   control rules as the data
    node instance to which the annotation is\n   attached.  It is RECOMMENDED that
    security-sensitive or privacy-\n   sensitive data be modeled as regular YANG data
    nodes rather than\n   annotations.\n"
  title: 9.  Security Considerations
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC3688]  Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n              DOI
      10.17487/RFC3688, January 2004,\n              <http://www.rfc-editor.org/info/rfc3688>.\n
      \  [RFC5234]  Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n
      \             Specifications: ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234,
      January 2008,\n              <http://www.rfc-editor.org/info/rfc5234>.\n   [RFC6020]
      \ Bjorklund, M., Ed., \"YANG - A Data Modeling Language for\n              the
      Network Configuration Protocol (NETCONF)\", RFC 6020,\n              DOI 10.17487/RFC6020,
      October 2010,\n              <http://www.rfc-editor.org/info/rfc6020>.\n   [RFC6110]
      \ Lhotka, L., Ed., \"Mapping YANG to Document Schema\n              Definition
      Languages and Validating NETCONF Content\",\n              RFC 6110, DOI 10.17487/RFC6110,
      February 2011,\n              <http://www.rfc-editor.org/info/rfc6110>.\n   [RFC7159]
      \ Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data\n              Interchange
      Format\", RFC 7159, DOI 10.17487/RFC7159, March\n              2014, <http://www.rfc-editor.org/info/rfc7159>.\n
      \  [RFC7950]  Bjorklund, M., Ed., \"The YANG 1.1 Data Modeling Language\",\n
      \             RFC 7950, DOI 10.17487/RFC7950, August 2016,\n              <http://www.rfc-editor.org/info/rfc7950>.\n
      \  [RFC7951]  Lhotka, L., \"JSON Encoding of Data Modeled with YANG\",\n              RFC
      7951, DOI 10.17487/RFC7951, August 2016,\n              <http://www.rfc-editor.org/info/rfc7951>.\n
      \  [XML-INFOSET]\n              Cowan, J. and R. Tobin, \"XML Information Set
      (Second\n              Edition)\", World Wide Web Consortium Recommendation\n
      \             REC-xml-infoset-20040204, February 2004,\n              <http://www.w3.org/TR/2004/REC-xml-infoset-20040204>.\n
      \  [XML-NAMES]\n              Bray, T., Hollander, D., Layman, A., Tobin, R.,
      and H.\n              Thompson, \"Namespaces in XML 1.0 (Third Edition)\", World\n
      \             Wide Web Consortium Recommendation REC-xml-names-20091208,\n              December
      2009,\n              <http://www.w3.org/TR/2009/REC-xml-names-20091208>.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [ISO.19757-1]\n              International
      Organization for Standardization,\n              \"Information Technology -
      Document Schema Definition\n              Languages (DSDL) - Part 1: Overview\",
      ISO/IEC 19757-1,\n              September 2008.\n   [ISO.19757-2]\n              International
      Organization for Standardization,\n              \"Information technology --
      Document Schema Definition\n              Language (DSDL) -- Part 2: Regular-grammar-based\n
      \             validation -- RELAX NG\", ISO/IEC 19757-2:2008, December\n              2008.\n
      \  [ISO.19757-3]\n              International Organization for Standardization,\n
      \             \"Information technology -- Document Schema Definition\n              Languages
      (DSDL) -- Part 3: Rule-based validation --\n              Schematron\", ISO/IEC
      19757-3:2016, January 2016.\n   [ISO.19757-8]\n              International Organization
      for Standardization,\n              \"Information Technology - Document Schema
      Definition\n              Languages (DSDL) - Part 8: Document Semantics Renaming\n
      \             Language - DSRL\", ISO/IEC 19757-8:2008(E), December 2008.\n   [RESTCONF]
      Bierman, A., Bjorklund, M., and K. Watsen, \"RESTCONF\n              Protocol\",
      Work in Progress,\n              draft-ietf-netconf-restconf-16, August 2016.\n
      \  [RFC6241]  Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,\n              and
      A. Bierman, Ed., \"Network Configuration Protocol\n              (NETCONF)\",
      RFC 6241, DOI 10.17487/RFC6241, June 2011,\n              <http://www.rfc-editor.org/info/rfc6241>.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Acknowledgements\n   The author wishes to thank Andy Bierman, Martin Bjorklund,
    Benoit\n   Claise, Juergen Schoenwaelder, and Kent Watsen for their helpful\n
    \  comments and suggestions.\n"
  title: Acknowledgements
- contents:
  - "Author's Address\n   Ladislav Lhotka\n   CZ.NIC\n   Email: lhotka@nic.cz\n"
  title: Author's Address
