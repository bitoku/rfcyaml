- contents:
  - "              MIXER (Mime Internet X.400 Enhanced Relay):\n                 Mapping
    between X.400 and RFC 822/MIME\n"
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1          - Overview ......................................
    \   3\n   1.1        - X.400 .........................................    3\n
    \  1.2        - RFC 822 and MIME ..............................    3\n   1.3        -
    The need for conversion .......................    4\n   1.4        - General
    approach ..............................    4\n   1.5        - Gatewaying Model
    ..............................    5\n   1.6        - Support of X.400 (1984) .......................
    \   8\n   1.7        - X.400 (1992) ..................................    8\n
    \  1.8        - MIME ..........................................    8\n   1.9        -
    Body Parts ....................................    8\n   1.10       - Local and
    Global Scenarios ....................    9\n   1.11       - Compatibility with
    previous versions ..........   10\n   1.12       - Aspects not covered ...........................
    \  10\n   1.13       - Subsetting ....................................   11\n
    \  1.14       - Specification Language ........................   11\n   1.15
    \      - Related Specifications ........................   11\n   1.16       -
    Document Structure ............................   12\n   1.17       - Acknowledgements
    ..............................   12\n   2          - Service Elements ..............................
    \  13\n   2.1        - The Notion of Service Across a Gateway ........   13\n
    \  2.2        - RFC 822 .......................................   15\n   2.3        -
    X.400 .........................................   18\n   3          - Basic Mappings
    ................................   27\n   3.1        - Notation ......................................
    \  27\n   3.2        - ASCII and IA5 .................................   29\n
    \  3.3        - Standard Types ................................   29\n   3.4        -
    Encoding ASCII in Printable String ............   33\n   3.5        - RFC 1522
    ......................................   34\n   4          - Addressing and Message
    IDs ....................   35\n   4.1        - A textual representation of MTS.ORAddress
    .....   36\n   4.2        - Global Address Mapping ........................   43\n
    \  4.3        - EBNF.822-address <-> MTS.ORAddress ............   46\n   4.4        -
    Repeated Mappings .............................   59\n   4.5        - Directory
    Names ...............................   62\n   4.6        - MTS Mappings ..................................
    \  62\n   4.7        - IPMS Mappings .................................   67\n
    \  5          - Detailed Mappings .............................   71\n   5.1        -
    RFC 822 -> X.400: Detailed Mappings ...........   71\n   5.2        - Return of
    Contents ............................   86\n   5.3        - X.400 -> RFC 822:
    Detailed Mappings ...........   86\n   Appendix A - Mappings Specific to SMTP
    .....................  114\n   1          - Probes ........................................
    \ 114\n   2          - Long Lines ....................................  114\n
    \  3          - SMTP Extensions ...............................  114\n   3.1        -
    SMTP Extension mapping to X.400 ...............  114\n   3.2        - X.400 Mapping
    to SMTP Extensions ..............  115\n   Appendix B - Mapping with X.400(1984)
    ......................  116\n   Appendix C - RFC 822 Extensions for X.400 access
    ...........  118\n   Appendix D - Object Identifier Assignment ..................
    \ 119\n   Appendix E - BNF Summary ...................................  120\n
    \  Appendix F - Text format for MCGAM distribution ............  127\n   1          -
    Text Formats ..................................  127\n   2          - Mechanisms
    to register and to distribute\n                MCGAMs ........................................
    \ 127\n   3          - Syntax Definitions ............................  128\n
    \  4          - Table Lookups .................................  129\n   5          -
    Domain -> OR Address MCGAM format .............  129\n   6          - OR Address
    -> Domain MCGAM format .............  129\n   7          - Domain -> OR Address
    of Preferred Gateway\n                table .........................................
    \ 130\n   8          - OR Addresss -> domain of Preferred Gateway\n                table
    .........................................  130\n   Appendix G - Conformance ...................................
    \ 131\n   Appendix H - Change History: RFC 987, 1026, 1138, 1148\n                ...............................................
    \ 133\n   1          - Introduction ..................................  133\n
    \  2          - Service Elements ..............................  133\n   3          -
    Basic Mappings ................................  133\n   4          - Addressing
    ....................................  134\n   5          - Detailed Mappings .............................
    \ 134\n   6          - Appendices ....................................  134\n
    \  Appendix I - Change History: RFC 1148 to RFC 1327 ..........  135\n   1          -
    General .......................................  135\n   2          - Basic Mappings
    ................................  135\n   3          - Addressing ....................................
    \ 135\n   4          - Detailed Mappings .............................  135\n
    \  5          - Appendices ....................................  136\n   Appendix
    J - Change History: RFC 1327 to this Document\n                ...............................................
    \ 137\n   1          - General .......................................  137\n
    \  2          - Service Elements ..............................  137\n   3          -
    Basic Mappings ................................  137\n   4          - Addressing
    ....................................  137\n   5          - Detailed Mappings .............................
    \ 138\n   6          - Appendices ....................................  138\n
    \  Appendix L - ASN.1 Summary .................................  139\n   Security
    Considerations ....................................  141\n   Author's Address
    ...........................................  141\n   References .................................................
    \ 141\n   Full Copyright Statement ...................................  144\n"
  title: Table of Contents
- contents:
  - 'Chapter 1 -- Overview

    '
  title: Chapter 1 -- Overview
- contents:
  - "1.1.  X.400\n   This document relates primarily to the ITU-T 1988 and 1992 X.400\n
    \  Series Recommendations / ISO IEC 10021 International Standard.  This\n   ISO/ITU-T
    standard is referred to in this document as \"X.400\", which\n   is a convenient
    shorthand.  Any reference to the 1984 Recommendations\n   will be explicit.  Any
    mappings relating to elements which are in the\n   1992 version and not in the
    1988 version will be noted explicitly.\n   X.400 defines an Interpersonal Messaging
    System (IPMS), making use of\n   a store and forward Message Transfer System.
    \ This document relates\n   to the IPMS, and not to wider application of X.400,
    such as EDI as\n   defined in X.435.\n"
  title: 1.1.  X.400
- contents:
  - "1.2.  RFC 822 and MIME\n   RFC 822 evolved as a messaging standard on the DARPA
    (the US Defense\n   Advanced Research Projects Agency) Internet.  RFC 822 specifies
    an\n   end to end message format, consisting of a header and an unstructured\n
    \  text body.  MIME (Multipurpose Internet Mail Extensions) specifies a\n   structured
    message body format for use with RFC 822.  The term \"RFC\n   822\" is used in
    this document to refer to the combination of MIME and\n   RFC 822. RFC 822 and
    MIME are used in conjunction with a number of\n   different message transfer protocol
    environments.  The core of the\n   MIXER specification is designed to work with
    any supporting message\n   transfer protocol.\n   One transfer protocol, SMTP,
    is of particular importance and is\n   covered in MIXER.  On the Internet and
    other TCP/IP networks, RFC 822\n   is used in conjunction with RFC 821, also known
    as Simple Mail\n   Transfer Protocol (SMTP) [30], in a manner conformant with
    the host\n   requirements specification [10].  Use of MIXER with SMTP is defined\n
    \  in Appendix A.\n"
  title: 1.2.  RFC 822 and MIME
- contents:
  - "1.3.  The need for conversion\n   There is a large community using RFC 822 based
    protocols for mail\n   services, who will wish to communicate with users of the
    IPMS\n   provided by X.400 systems.  This will also be a requirement in cases\n
    \  where communities intend to make a transition between the different\n   technologies,
    as conversion will be needed to ensure a smooth service\n   transition.  It is
    expected that there will be more than one gateway,\n   and this specification
    will enable them to behave in a consistent\n   manner.  Note that the term gateway
    is used to describe a component\n   performing the mapping between RFC 822 and
    X.400.  This is standard\n   usage amongst mail implementors, but differs from
    that used by\n   transport and network service implementors.\n   Consistency between
    gateways is desirable to provide:\n   1.   Consistent service to users.\n   2.
    \  The best service in cases where a message passes through\n        multiple
    gateways.\n"
  title: 1.3.  The need for conversion
- contents:
  - "1.4.  General approach\n   There are a number of basic principles underlying
    the details of the\n   specification.  These principles are goals, and are not
    achieved in\n   all aspects of the specification.\n   1.   The specification should
    be pragmatic.  There should not be\n        a requirement for complex mappings
    for \"Academic\" reasons.\n        Complex mappings should not be required to
    support trivial\n        additional functionality.\n   2.   Subject to 1), functionality
    across a gateway should be as\n        high as possible.\n   3.   It is always
    a bad idea to lose information as a result of\n        any transformation.  Hence,
    it is a bad idea for a gateway\n        to discard information in the objects
    it processes.  This\n        includes requested services which cannot be fully
    mapped.\n   4.   Mail gateways  operate at a level above the layer on which\n
    \       they perform mappings.  This implies that the gateway shall\n        not
    only be cognisant of the semantics of objects at the\n        gateway level, but
    also be cognisant of higher level\n        semantics.  If meaningful transformation
    of the objects that\n        the gateway operates on is to occur, then the gateway
    needs\n        to understand more than the objects themselves.\n   5.   Subject
    to 1), the mapping should be reversible.  That is, a\n        double transformation
    should bring you back to where you\n        started.\n"
  title: 1.4.  General approach
- contents:
  - '1.5.  Gatewaying Model

    '
  title: 1.5.  Gatewaying Model
- contents:
  - "1.5.1.  X.400\n   X.400 defines the IPMS Abstract Service in X.420 , [11] which\n
    \  comprises of three basic services:\n   1.   Origination\n   2.   Reception\n
    \  3.   Management\n   Management is a local interaction between the user and
    the IPMS, and\n   is therefore not relevant to gatewaying.  The first two services\n
    \  consist of operations to originate and receive the following two\n   objects:\n
    \  1.   IPM (Interpersonal Message). This has two components: a\n        heading,
    and a body.  The body is structured as a sequence\n        of body parts, which
    may be basic components (e.g., IA5\n        text, or G3 fax), or forwarded Interpersonal
    Messages.  The\n        heading consists of fields containing end to end user\n
    \       information, such as subject, primary recipients (To:), and\n        importance.\n
    \  2.   IPN (Inter Personal Notification).  A notification  about\n        receipt
    of a given IPM at the UA level.\n   The Origination service also allows for origination
    of a probe, which\n   is an object to test whether a given IPM could be correctly
    received.\n   The Reception service also allows for receipt of Delivery Reports\n
    \  (DR), which indicate delivery success or failure.\n   These IPMS Services utilise
    the Message Transfer System (MTS)\n   Abstract Service [12].  The MTS Abstract
    Service provides the\n   following three basic services:\n   1.   Submission (used
    by IPMS Origination)\n   2.   Delivery (used by IPMS Reception)\n   3.   Administration
    (used by IPMS Management)\n   Administration is a local issue, and so does not
    affect this\n   standard.  Submission and delivery relate primarily to the MTS\n
    \  Message (comprising Envelope and Content), which carries an IPM or\n   IPN
    (or other uninterpreted contents).  The Envelope includes a\n   message identifier,
    an originator, and a list of recipients.\n   Submission also includes the probe
    service, which supports the MTS\n   Probe. Delivery also includes Reports, which
    indicate whether a given\n   MTS Message has been delivered or not (or for a probe
    if delivery\n   would have happened).\n   The MTS is provided by MTAs which interact
    using the MTA (Message\n   Transfer Agent) Service, which defines the interaction
    between MTAs,\n   along with the procedures for distributed operation.  This service\n
    \  provides for transfer of MTS Messages, Probes, and Reports.\n"
  title: 1.5.1.  X.400
- contents:
  - "1.5.2.  RFC 822\n   RFC 822 is based on the assumption that there is an underlying\n
    \  service, which is here called the 822-MTS service.  The 822-MTS\n   service
    provides three basic functions:\n   1.   Identification of a list of recipients.\n
    \  2.   Identification of an error return address.\n   3.   Transfer of an RFC
    822 message.\n   It is possible to achieve 2) within the RFC 822 header.\n   This
    specification will be used most commonly with SMTP as the 822-\n   MTS service.
    \ The core MIXER specification is written so that it does\n   not rely on non-basic
    822-MTS services.  Use of non-basic SMTP\n   services is described in Appendix
    A.  The core of this document is\n   written using SMTP terminology for 822-MTS
    services.\n   An RFC 822 message consists of a header, and content which is\n
    \  uninterpreted ASCII text.  The header is divided into fields, which\n   are
    the protocol elements.  Most of these fields are analogous to IPM\n   heading
    fields, although some are analogous to MTS Service Elements\n   or MTA Service
    Elements.\n   RFC 822 supports delivery status notifications by use of the NOTARY\n
    \  mechanisms [28].\n"
  title: 1.5.2.  RFC 822
- contents:
  - "1.5.3.  The Gateway\n   Given this functional description of the two services,
    the functional\n   nature of a gateway can now be considered.  It would be elegant
    to\n   consider the SMTP (822-MTS) service mapping onto the MTS Service\n   Elements
    and RFC 822 mapping onto an IPM, but there is a not a clear\n   match between
    these services.  Another elegant approach would be to\n   treat this document
    as the definition of an X.400 Access Unit (AU).\n   In this case, the abstraction
    level is too high, and some necessary\n   mapping function is lost.  It is necessary
    to consider that the IPM\n   format definition, the IPMS Service Elements, the
    MTS Service\n   Elements, and MTA Service Elements on one side are mapped into
    RFC\n   822 + SMTP on the other in a slightly tangled manner.  The details of\n
    \  the tangle will be made clear in Chapter 5.  Access to the MTA\n   Service
    Elements is minimised.\n   The following basic mappings are thus defined.  When
    going from RFC\n   822 to X.400, an RFC 822 message and the associated SMTP information\n
    \  is always mapped into an IPM (MTA, MTS, and IPMS Services) and a\n   Delivery
    Status Notification is mapped onto a Report.  Going from\n   X.400 to RFC 822,
    an RFC 822 message and the associated SMTP\n   information may be derived from:\n
    \  1.   An IPN (MTA, MTS, and IPMS services)\n   2.   An IPM (MTA, MTS, and IPMS
    services)\n   A Report (MTA, and MTS Services) is mapped onto a delivery status\n
    \  notification.\n   Probes (MTA Service) shall be processed by the gateway, as
    discussed\n   in Chapter 5.  MTS Messages containing Content Types other than
    those\n   defined by the IPMS are not mapped by the gateway, and shall be\n   rejected
    at the gateway if no other gatewaying procedure is defined.\n   This specification
    is concerned with X.400 IPMS.  Future\n   specifications may defined mappings
    for other X.400 content types.\n"
  title: 1.5.3.  The Gateway
- contents:
  - "1.5.4.  Repeated Mappings\n   The primary goal of this specification is to support
    single mappings,\n   so that X.400 and RFC 822 users can communicate with maximum\n
    \  functionality.\n   The mappings specified here are designed to work where a
    message\n   traverses multiple times between X.400 and RFC 822. This is often\n
    \  essential, particularly in the case of distribution lists.  However,\n   in
    general, this will lead to a level of service which is the lowest\n   common denominator
    (approximately the services offered by RFC 822).\n   Some RFC 822 networks may
    wish to use X.400 as an interconnection\n   mechanism (typically for policy reasons),
    and this is fully\n   supported.\n   Where an X.400 message transfers to RFC 822
    and then back to X.400,\n   there is no expectation of X.400 services which do
    not have an\n   equivalent service in standard RFC 822 being preserved - although\n
    \  this may be possible in some cases.\n"
  title: 1.5.4.  Repeated Mappings
- contents:
  - "1.6.  Support of X.400 (1984)\n   The MIXER definition is based on the initial
    specification of RFC 987\n   and in its addendum RFC 1026, which defined a mapping
    between\n   X.400(1984) and RFC 822.  The core MIXER mapping is defined using
    the\n   full 1988 version of X.400, and not to a 1984 compatible subset. New\n
    \  features of X.400(1988) can be used to provide a much cleaner mapping\n   than
    that defined in RFC 987.  To interwork with 1984 systems,\n   Appendix B shall
    be followed.\n   If a message is being transferred to an X.400(1984) system by
    way of\n   X.400(1988) MTA it will give a slightly better service to follow the\n
    \  rules of Appendix B, than to downgrade without this knowledge.\n   Downgrading
    specifications which supplement those specified in X.400\n   (X.419) are given
    in RFC 1328 [22] and RFC 1496 (HARPOON) [5].\n"
  title: 1.6.  Support of X.400 (1984)
- contents:
  - "1.7.  X.400 (1992)\n   X.400 (1992) features are not used by the core of this
    mapping, and\n   so there is not an equivalent downgrade problem.\n"
  title: 1.7.  X.400 (1992)
- contents:
  - "1.8.  MIME\n   MIME format messages are generated by this mapping.  As MIME messages\n
    \  are fully RFC 822 compliant, this will not cause problems with\n   systems
    which are not MIME capable.\n"
  title: 1.8.  MIME
- contents:
  - "1.9.  Body Parts\n   MIME and X.400 IPMS can both carry arbitrary body parts.
    MIME defines\n   a mechanism for adding new body parts, and new body parts are\n
    \  registered with the IANA. X.400 defines a mechanism adding new body\n   parts,
    usually referred to as Body Part 15.  Extensions are defined\n   by Object Identifiers,
    so there is no requirement for a central body\n   part registration authority.
    \ The Electronic Messaging Association\n   (EMA) maintains a list of some commonly
    used body parts.  The EMA has\n   specified a mechanism to use the File Transfer
    Body Part (FTBP) as a\n   more generic means to support message attachments.  This
    approach is\n   gaining widespread commercial support.\n   The mapping between
    X.400 and MIME body parts is defined in the\n   companion MIXER specification,
    referenced here as RFC 2157 [8].  This\n   document is an update of RFC 1494 [6].\n
    \  Editor's Note:\n      References to 2157 will be resolved as these two\n      documents
    are expected to progress in parallel.\n   These two specifications together form
    the complete MIXER Mapping.\n"
  title: 1.9.  Body Parts
- contents:
  - "1.10.  Local and Global Scenarios\n   There are two basic scenarios for X.400/MIME
    interworking:\n   Global Scenario\n      There are two global mail networks (Internet/MIME
    and X.400),\n      interconnected by multiple gateways.   Objects may be transferred\n
    \     over multiple gateways, and so it is important that gateways\n      behave
    in a coherent fashion.  MIXER is critical to support this\n      scenario.\n   Local
    Scenario\n      A gateway is used to connect a closed community to a global mail\n
    \     network (this could be enforced by connectivity or gateway\n      authorisation
    policy).  This is a common commercial scenario.\n      MIXER is useful to support
    this scenario, as it allows an industry\n      standard provision of service,
    but this could be supported by\n      something which was MIXER-like.\n   A solution
    for the global scenario will work for the local scenario.\n   However, there are
    aspects of MIXER which have significant\n   implementation or deployment effort
    (the global mapping is the major\n   one, but there are other details too) which
    and are needed to support\n   the global scenario, but are not needed in the local
    scenario.\n   Note that the local scenario may be the driving force for most\n
    \  deployments, and support of the global scenario may be an important\n   secondary
    goal.\n   There is also a transition effect.  Gateways which are initially\n   deployed
    in a strict local scenario situation start to find\n   themselves in a global
    scenario.  A common case is ADMD provided\n   gateways, which are targeted strictly
    at the local scenario.  In\n   practice they soon start to operate in the global
    scenario, because\n   of distribution lists and messages exchanged with X.400
    users that\n   are not customers of the ADMD.  At this point, users are hurt by
    the\n   restrictions of a local scenario gateway.\n   Note that conformance to
    MIXER applies to an instantiation of a\n   gateway, not just an implementation
    (although clearly it is critical\n   that the implementation is capable of being
    operated in a conformant\n   manner).\n   MIXER's conformance target is the global
    scenario, and the\n   specification of MIXER defines operation in this way.\n"
  title: 1.10.  Local and Global Scenarios
- contents:
  - "1.11.  Compatibility with previous versions\n   The changes between this and
    older versions of the document are given\n   in Appendices H, I and J.  These
    are RFCs 987, 1026, 1138, 1148 and\n   1327.  This document is a revision of RFC
    1327 [21].  As far as\n   possible, changes have been made in a compatible fashion.\n"
  title: 1.11.  Compatibility with previous versions
- contents:
  - "1.12.  Aspects not covered\n   There have been a number of cases where previous
    versions of this\n   document were used in a manner which was not intended.  This
    section\n   is to make clear some limitations of scope.  In particular, this\n
    \  specification does not specify:\n   -    Extensions of RFC 822 to provide access
    to all X.400\n        services\n   -    X.400 user interface definition\n   These
    are really coupled.  To map the X.400 services, this\n   specification defines
    a number of extensions to RFC 822.  As a side\n   effect, these give the 822 user
    access to SOME X.400 services.\n   However, the aim on the RFC 822 side is to
    preserve current service,\n   and it is intentional that access is not given to
    all X.400 services.\n   Thus, it will be a poor choice for X.400 implementors
    to use MIXER as\n   an interface - there are too many aspects of X.400 which cannot
    be\n   accessed through it.  If a text interface is desired, a specification\n
    \  targeted at X.400, without RFC 822 restrictions, would be more\n   appropriate.
    \ Some optional and limited extensions in this area have\n   proved useful, and
    are defined in Appendix C.\n"
  title: 1.12.  Aspects not covered
- contents:
  - "1.13.  Subsetting\n   This proposal specifies a mapping which is appropriate
    to preserve\n   services in existing RFC 822 communities.  Implementations and\n
    \  specifications which subset this specification are non-conformant and\n   strongly
    discouraged.\n"
  title: 1.13.  Subsetting
- contents:
  - "1.14.  Specification Language\n   ISO and Internet standards have clear definitions
    as to the style of\n   language used.  This specification maps between ISO/ITU-T
    protocol\n   and Internet protocols.  This document uses ISO terminology for the\n
    \  following reasons:\n   1.   This was done in previous versions.\n   2.   ISO
    language may be mechanically converted to Internet\n        language, but not
    vice versa.\n   The key elements of the ISO rules are:\n   1.   All mandatory
    features shall clearly be indicated by\n        imperative statements or the word
    \"shall\" or \"shall not\".\n   2.   Optional features shall be indicated by the
    word \"may\".\n   3.   The word \"should\" and the phrase \"may not\" shall not
    be\n        used.\n   In some cases the specification issues guidance on use of
    optional\n   features, by use of the the phrase word \"recommended\" or \"not\n
    \  recommended\".\n   To interpet this document according to Internet rules, replace
    every\n   occurrence of \"shall\" with \"must\".\n"
  title: 1.14.  Specification Language
- contents:
  - "1.15.  Related Specifications\n   Mappings between Mail-11 and X.400 and Mail-11
    and RFC 822 are\n   described in RFC 2162, using mappings related to those defined
    here\n   [2].\n"
  title: 1.15.  Related Specifications
- contents:
  - "1.16.  Document Structure\n   This document has five chapters:\n   1.   Overview
    - this chapter.\n   2.   Service Elements - This describes the (end user) services\n
    \       mapped by a gateway.\n   3.   Basic mappings - This describes some basic
    notation used in\n        Chapters 3-5, the mappings between character sets, and
    some\n        fundamental protocol elements.\n   4.   Addressing - This considers
    the mapping between X.400 OR\n        names and RFC 822 addresses, which is a
    fundamental gateway\n        component.\n   5.   Detailed Mappings - This describes
    the details of all other\n        mappings.\n   There are also ten appendices.\n
    \  WARNING:\n      THE REMAINDER OF THIS SPECIFICATION IS TECHNICALLY DETAILED.
    \ IT\n      WILL NOT MAKE SENSE, EXCEPT IN THE CONTEXT OF RFC 822 AND X.400\n
    \     (1988).  DO NOT ATTEMPT TO READ THIS DOCUMENT UNLESS YOU ARE\n      FAMILIAR
    WITH THESE SPECIFICATIONS.\n"
  title: 1.16.  Document Structure
- contents:
  - "1.17.  Acknowledgements\n   The work in this specification was substantially
    based on RFC 987 and\n   RFC 1148, which had input from many people, who are credited
    in the\n   respective documents.\n   A number of comments from people on RFC 1148
    lead to RFC 1327.  In\n   particular, there were comments and suggestions from:
    Maurice Abraham\n   (HP); Harald Alvestrand (Sintef); Peter Cowen (X-Tel); Jim
    Craigie\n   (JNT); Ella Gardner (MITRE); Christian Huitema (Inria); Erik Huizer\n
    \  (SURFnet); Neil Jones (DEC); Ignacio Martinez (IRIS); Julian Onions\n   (X-Tel);
    Simon Poole (SWITCH); Clive Roberts (Data General); Pete\n   Vanderbilt (SUN);
    Alan Young (Concurrent).\n   RFC 1327 has been widely adopted, and a review team
    was formed.  This\n   comprised of: Urs Eppenberger (SWITCH)(Chair); Claudio Allocchio\n
    \  (INFN); Harald Alvestrand (UNINETT); Dave Crocker (Brandenburg); Ned\n   Freed
    (Innosoft); Erik Huizer (SURFnet); Steve Kille (Isode); Peter\n   Sylvester (GC
    Tech).\n   Harald Alvestrand also supplied the tables mapping DSN status codes\n
    \  with X.400 codes.  Ned Freed defined parts of the File Transfer Body\n   Part
    mapping.\n   Comment and input has also been received from: Bengt Ackzell (Generic\n
    \  Systems); Samir Albadine (Transpac); Mark Boyes (DEC); Larry Campbell\n   (Boston
    Software Works); Jacqui Caren (Cray); Allan Cargille (MCI);\n   Kevin Carrosso
    (Innosoft); Charlie Combs (OIW); Jim Craigie (Net-\n   Tel); Eamon Doyle (Isocor);
    Efifion Edem (SITA); Jyrki Heikkinen\n   (ICL); Edward Hibbert (DCL); Jeroun Houttin
    (Terena); Kevin Jordan\n   (CDS); Paul Kingsnorth (DEC); Carl-Uno Manros (Manros
    Consulting);\n   Suzan Mendes (Telis); Robert Miles (Softswitch); Roger Mizumorri\n
    \  (Enterprise Solutions Ltd); Keith Moore (University of Tennessee);\n   Ruth
    Moulton (Net-Tel) Michel Musy (Bull); Kenji Nonaka (NTT): The\n   OIW MHSIG; Tom
    Oliphant (SWITCH); Julian Onions (NEXOR); Jacob Palme\n   (KTH); Olivier Paridaens
    (ULB); Mary la Roche (Citicorp); John\n   Setsaas (Maxware); Russell Sharpe (DCL);
    Patrick Soulier (CCETT);\n   Eftimios Tsigros (Universite Libre de Bruxelles);
    Sean Turner (IECA);\n   Mark Wahl (Isode); David Wilson (Isode); Bill Wohler (Worldtalk);\n
    \  Alan Young (Isode); Alain Zahm (Telis).\n"
  title: 1.17.  Acknowledgements
- contents:
  - "Chapter 2 - Service Elements\n   This chapter considers the services offered
    across a gateway built\n   according to this specification.  It gives a view of
    the\n   functionality provided by such a gateway for communication with users\n
    \  in the opposite domain.  This chapter considers service mappings in\n   the
    context of SINGLE transfers only, and not repeated mappings\n   through multiple
    gateways.\n"
  title: Chapter 2 - Service Elements
- contents:
  - "2.1.  The Notion of Service Across a Gateway\n   RFC 822 and X.400 provide a
    number of services to the end user.  This\n   chapter describes the extent to
    which each service can be supported\n   across an X.400 <-> RFC 822 gateway.  The
    cases considered are single\n   transfers across such a gateway, although the
    problems of multiple\n   crossings are noted where appropriate.\n"
  title: 2.1.  The Notion of Service Across a Gateway
- contents:
  - "2.1.1.  Origination of Messages\n   When a user originates a message, a number
    of services are available.\n   Some of these imply actions (e.g., delivery to
    a recipient), and some\n   are insertion of known data (e.g., specification of
    a subject field).\n   This chapter describes, for each offered service, to what
    extent it\n   is supported for a recipient accessed through a gateway.  There
    are\n   three levels of support:\n   Supported\n      The corresponding protocol
    elements map well, and so the service\n      can be fully provided.\n   Not Supported\n
    \     The service cannot be provided, as there is a complete mismatch.\n   Partial
    Support\n      The service can be partially fulfilled.\n   In the first two cases,
    the service is simply marked as \"Supported\"\n   or \"Not Supported\".  Some
    explanation may be given if there are\n   additional implications, or the (non)
    support is not intuitive.  For\n   partial support, the level of partial support
    is summarised.  Where\n   partial support is good, this will be described by a
    phrase such as\n   \"Supported by use of.....\".  A common case of this is where
    the\n   service is mapped onto a non-standard service on the other side of\n   the
    gateway, and this would have lead to support if it had been a\n   standard service.
    \ In many cases, this is equivalent to support.  For\n   partial support, an indication
    of the mechanism is given, in order to\n   give a feel for the level of support
    provided.  Note that this is not\n   a replacement for Chapter 5, where the mapping
    is fully specified.\n      If a service is described as supported, this implies:\n
    \  -    Semantic correspondence.\n   -    No (significant) loss of information.\n
    \  -    Any actions required by the service element.\n   An example of a service
    gaining full support: If an RFC 822\n   originator specifies a Subject: field,
    this is considered to be\n   supported, as an X.400 recipient will get a subject
    indication.\n   In many cases, the required action will simply be to make the\n
    \  information available to the end user.  In other cases, actions may\n   imply
    generating a delivery report.\n   All RFC 822 services are supported or partially
    supported for\n   origination.  The implications of non-supported X.400 services
    is\n   described under X.400.\n"
  title: 2.1.1.  Origination of Messages
- contents:
  - "2.1.2.  Reception of Messages\n   For reception, the list of service elements
    required to support this\n   mapping is specified.  This is really an indication
    of what a\n   recipient might expect to see in a message which has been remotely\n
    \  originated.\n"
  title: 2.1.2.  Reception of Messages
- contents:
  - "2.2.  RFC 822\n   RFC 822 does not explicitly define service elements, as distinct
    from\n   protocol elements.  However, all of the RFC 822 header fields, with\n
    \  the exception of trace, can be regarded as corresponding to implicit\n   RFC
    822 service elements.\n"
  title: 2.2.  RFC 822
- contents:
  - "2.2.1.  Origination in RFC 822\n   A mechanism of mapping, used in several cases,
    is to map the RFC 822\n   header into a heading extension in the IPM (InterPersonal
    Message).\n   This can be regarded as partial support, as it makes the information\n
    \  available to any X.400 implementations which are interested in these\n   services.
    Communities which require significant RFC 822 interworking\n   are recommended
    to require that their X.400 User Agents are able to\n   display these heading
    extensions.  Support for the various service\n   elements (headers) is now listed.\n
    \  Date:\n        Supported.\n   From:\n        Supported.  For messages where
    there is also a sender field,\n        the mapping is to \"Authorising Users Indication\",
    which has\n        subtly different semantics to the general RFC 822 usage of\n
    \       From:.\n   Sender: Supported.\n   Reply-To: Supported.\n   To:  Supported.\n
    \  Cc:  Supported.\n   Bcc: Supported.\n   Message-Id: Supported.\n   In-Reply-To:\n
    \     Supported, for a single reference.  Where multiple references are\n      given,
    partial support is given by mapping to \"Cross Referencing\n      Indication\".
    \ This gives similar semantics.\n   References: Supported.\n   Keywords: Supported
    by use of a heading extension.\n   Subject: Supported.\n   Comments: Supported
    by use of a heading extension.\n   Encrypted: Supported by use of a heading extension.\n
    \  Content-Language: Supported.\n   Resent-*\n      Supported by use of a heading
    extension.  Note that addresses in\n      these fields are mapped onto text, and
    so are not accessible to\n      the X.400 user as addresses.  In principle, fuller
    support would\n      be possible by mapping onto a forwarded IP Message, but this
    is\n      not suggested.\n   Other Fields\n      In particular X-* fields, and
    \"illegal\" fields in common usage\n      (e.g., \"Fruit-of-the-day:\") are supported
    by use of heading\n      extensions.\n   MIME introduces a number of headings.
    \ Support is defined in RFC\n   2157.\n"
  title: 2.2.1.  Origination in RFC 822
- contents:
  - "2.2.2.  Reception by RFC 822\n   This considers reception by an RFC 822 User
    Agent of a message\n   originated in an X.400 system and transferred across a
    gateway.  The\n   following standard services (headers) may be present in such
    a\n   message:\n   Date:\n   From:\n   Sender:\n   Reply-To:\n   To:\n   Cc:\n
    \  Bcc:\n   Message-Id:\n   In-Reply-To:\n   References:\n   Subject:\n   Content-Type:
    (See RFC 2157)\n   Content-Transfer-Encoding: (See RFC 2157)\n   MIME-Version:
    (See RFC 2157)\n   The following services (headers) may be present in the header
    of a\n   message. These are defined in more detail in Chapter 5 (5.3.4, 5.3.6,\n
    \  5.3.7):\n   Autoforwarded:\n   Autosubmitted:\n   X400-Content-Identifier:\n
    \  Content-Language:\n   Conversion:\n   Conversion-With-Loss:\n   Delivery-Date:\n
    \  Discarded-X400-IPMS-Extensions:\n   Discarded-X400-MTS-Extensions:\n   DL-Expansion-History:\n
    \  Deferred-Delivery:\n   Expires:\n   Importance:\n   Incomplete-Copy:\n   Latest-Delivery-Time:\n
    \  Message-Type:\n   Original-Encoded-Information-Types:\n   Originator-Return-Address:\n
    \  Priority:\n   Reply-By:\n   Sensitivity:\n   Supersedes:\n   X400-Content-Type:\n
    \  X400-MTS-Identifier:\n   X400-Originator:\n   X400-Received:\n   X400-Recipients:\n"
  title: 2.2.2.  Reception by RFC 822
- contents:
  - '2.3.  X.400

    '
  title: 2.3.  X.400
- contents:
  - "2.3.1.  Origination in X.400\n   When mapping services from X.400 to RFC 822
    which are not supported\n   by RFC 822, new RFC 822 headers are defined, and registered
    by\n   publication in this standard. It is intended that co-operating RFC\n   822
    systems may also use them.  Where these new fields are used, and\n   no system
    action is implied, the service can be regarded as being\n   partially supported.
    \ Chapter 5 describes how to map X.400 services\n   onto these new headers.  Other
    elements are provided, in part, by the\n   gateway as they cannot be provided
    by RFC 822.\n   Some service elements are marked N/A (not applicable).  There
    are\n   five cases, which are marked with different comments:\n   N/A (local)\n
    \     These elements are only applicable to User Agent / Message\n      Transfer
    Agent interaction and so they cannot apply to RFC 822\n      recipients.\n   N/A
    (PDAU)\n      These service elements are only applicable where the recipient is\n
    \     reached by use of a Physical Delivery Access Unit (PDAU), and so\n      do
    not need to be mapped by the gateway.\n   N/A (reception)\n      These services
    \ are only applicable for reception.\n   N/A (prior)\n      If requested, this
    service shall be performed prior to the\n      gateway.\n   N/A (MS)\n      These
    services are only applicable to Message Store (i.e., a local\n      service).\n
    \  Finally, some service elements are not supported.  In particular, the\n   new
    security services are not mapped onto RFC 822.  Unless otherwise\n   indicated,
    the behaviour of service elements marked as not supported\n   will depend on the
    criticality marking supplied by the user.  If the\n   element is marked as critical
    for transfer or delivery, a non-\n   delivery notification will be generated.
    \ Otherwise, the service\n   request will be ignored.\n"
  title: 2.3.1.  Origination in X.400
- contents:
  - "2.3.1.1.  Basic Interpersonal Messaging Service\n   These are the mandatory IPM
    services as listed in Section 19.8 of\n   X.400 / ISO/IEC 10021-1, listed here
    in the order given. Section 19.8\n   has cross references to short definitions
    of each service.\n   Access management\n      N/A (local).\n   Content Type Indication\n
    \     Supported by a new RFC 822 header (X400-Content-Type:).\n   Converted Indication\n
    \     Supported by a new RFC 822 header (X400-Received:).\n   Delivery Time Stamp
    Indication\n      N/A (reception).\n   IP Message Identification\n      Supported.\n
    \  Message Identification\n      Supported, by use of a new RFC 822 header (X400-MTS-Identifier).\n
    \     This new header is required, as X.400 has two message-ids whereas\n      RFC
    822 has only one (see IP Message Identification\n   Non-delivery Notification\n
    \     Not supported in all cases.  Supported where the recipient system\n      supports
    NOTARY DSNs.  In general all RFC 822 systems will return\n      error reports
    by use of IP messages.  In other service elements,\n      this pragmatic result
    can be treated as effective support of this\n      service element.\n   Original
    Encoded Information Types Indication\n      Supported as a new RFC 822 header
    (Original-Encoded-Information-\n      Types:).\n   Submission Time Stamp Indication\n
    \     Supported.\n   Typed Body\n      Support is defined in RFC 2157.\n   User
    Capabilities Registration\n      N/A (local).\n"
  title: 2.3.1.1.  Basic Interpersonal Messaging Service
- contents:
  - "2.3.1.2.  IPM Service Optional User Facilities\n   This section describes support
    for the optional (user selectable) IPM\n   services as listed in Section 19.9
    of X.400 / ISO/IEC 10021- 1,\n   listed here in the order given.  Section 19.9
    has cross references to\n   short definitions of each service.\n   Additional
    Physical Rendition\n      N/A (PDAU).\n   Alternate Recipient Allowed\n      Not
    supported.  There is no RFC 822 service equivalent to\n      prohibition of alternate
    recipient assignment (e.g., an RFC 822\n      system may freely send an undeliverable
    message to a local\n      postmaster).  A MIXER gateway has two conformant options.
    \ The\n      first is not to gateway a message requesting prohibition of\n      alternate
    recipient, as this control cannot be guaranteed.  This\n      option supports
    the service, but may cause unacceptable level of\n      message rejections. The
    second is to gateway the message on the\n      basis that there is no alternate
    recipient service in RFC 822. RFC\n      1327 allowed only the second option.
    \  If the first option is\n      shown to be operationally effective, it may be
    the only option in\n      future versions of MIXER.\n   Authorising User's Indication\n
    \     Supported.\n   Auto-forwarded Indication\n      Supported as new RFC 822
    header (Auto-Forwarded:).\n   Basic Physical Rendition\n      N/A (PDAU).\n   Blind
    Copy Recipient Indication\n      Supported.\n   Body Part Encryption Indication\n
    \     Supported by use of a new RFC 822 header (Original-Encoded-\n      Information-Types:),
    although in most cases it will not be\n      possible to map the body part in
    question.\n   Content Confidentiality\n      Not supported.\n   Content Integrity\n
    \     Not supported.\n   Conversion Prohibition\n      Supported. Operation defined
    in RFC 2157.\n   Conversion Prohibition in Case of Loss of Information\n      Supported.
    \ Operation defined in RFC 2157.\n   Counter Collection\n      N/A (PDAU).\n   Counter
    Collection with Advice\n      N/A (PDAU).\n   Cross Referencing Indication\n      Supported.\n
    \  Deferred Delivery\n      N/A (prior).  This service shall always be provided
    by the MTS\n      prior to the gateway.  A new RFC 822 header (Deferred-Delivery:)\n
    \     is provided to transfer information on this service to the\n      recipient.\n
    \  Deferred Delivery Cancellation\n      N/A (local).\n   Delivery Notification\n
    \     Supported.  This is performed at the gateway, but may be performed\n      at
    the end system if the end system supports NOTARY.  Thus, a\n      notification
    is sent by the gateway to the originator.\n   Delivery via Bureaufax Service\n
    \     N/A (PDAU).\n   Designation of Recipient by Directory Name\n      N/A (local).\n
    \  Disclosure of Other Recipients\n      Supported by use of a new RFC 822 header
    (X400-Recipients:).  This\n      is descriptive information for the RFC 822 recipient,
    and is not\n      reverse mappable.\n   DL Expansion History Indication\n      Supported
    by use of a new RFC 822 header (DL-Expansion-History:).\n   DL Expansion Prohibited\n
    \     Distribution List means MTS supported distribution list, in the\n      manner
    of X.400.  This service does not exist in the RFC 822\n      world, although RFC
    822 supports distribution list functionality.\n      There is no SMTP leve control
    to prohibit distribution list\n      expansion.   A MIXER gateway has two conformant
    options.  The\n      first is not to gateway a message requesting DL expansion\n
    \     prohibition, as this control cannot be guaranteed.  This option\n      supports
    the service, but may cause unacceptable level of message\n      rejections. The
    second is to gateway the message on the basis that\n      there is no distribution
    list service in RFC 822. RFC 1327 allowed\n      only the second option.   If
    the first option is shown to be\n      operationally effective, it may be the
    only option in future\n      versions of MIXER.\n   Express Mail Service\n      N/A
    (PDAU).\n   Expiry Date Indication\n      Supported as new RFC 822 header (Expires:).
    \ In general, no\n      automatic action can be expected.\n   Explicit Conversion\n
    \     N/A (prior).\n   Forwarded IP Message Indication\n      Supported.\n   Grade
    of Delivery Selection\n      Not Supported.  There is no equivalent service in
    RFC 822.\n   Importance Indication\n      Supported as new RFC 822 header (Importance:).\n
    \  Incomplete Copy Indication\n      Supported as new RFC 822 header (Incomplete-Copy:).\n
    \  Language Indication\n      Supported as new RFC 822 header (Content-Language:).\n
    \  Latest Delivery Designation\n      Not supported.  A new RFC 822 header (Latest-Delivery-Time:)
    is\n      provided, which may be used by the recipient for general\n      information,
    but will not be acted on by the SMTP infrastrucuture.\n   Message Flow Confidentiality\n
    \     Not supported.\n   Message Origin Authentication\n      N/A (reception).\n
    \  Message Security Labelling\n      Not supported.\n   Message Sequence Integrity\n
    \     Not supported.\n   Multi-Destination Delivery Supported.\n   Multi-part
    Body\n      Supported.\n   Non Receipt Notification Request\n      Not supported.\n
    \  Non Repudiation of Delivery\n      Not supported.\n   Non Repudiation of Origin\n
    \     N/A (reception).\n   Non Repudiation of Submission\n      N/A (local).\n
    \  Obsoleting Indication\n      Supported as new RFC 822 header (Supersedes:).\n
    \  Ordinary Mail\n      N/A (PDAU).\n   Originator Indication\n      Supported.\n
    \  Originator Requested Alternate Recipient\n      Not supported, but is placed
    as comment next to address (X400-\n      Recipients:).\n   Physical Delivery Notification
    by MHS\n      N/A (PDAU).\n   Physical Delivery Notification by PDS\n      N/A
    (PDAU).\n   Physical Forwarding Allowed\n      Supported by use of a comment in
    a new RFC 822 header (X400-\n      Recipients:), associated with the recipient
    in question.\n   Physical Forwarding Prohibited\n      Supported by use of a comment
    in a new RFC 822 header (X400-\n      Recipients:), associated with the recipient
    in question.\n   Prevention of Non-delivery notification\n      Supported where
    SMTP and NOTARY are available.  In other cases\n      formally supported, as delivery
    notifications cannot be generated\n      by RFC 822.  In practice, errors will
    be returned as IP Messages,\n      and so this service may appear not to be supported
    (see Non-\n      delivery Notification).\n   Primary and Copy Recipients Indication\n
    \     Supported\n   Probe\n      Supported at the gateway (i.e., the gateway services
    the probe).\n   Probe Origin Authentication\n      N/A (reception).\n   Proof
    of Delivery\n      Not supported.\n   Proof of Submission\n      N/A (local).\n
    \  Receipt Notification Request Indication\n      Not supported.\n   Redirection
    Disallowed by Originator\n      Redirection means MTS supported redirection, in
    the manner of\n      X.400.  This service does not exist in the RFC 822 world.
    \ RFC 822\n      redirection (e.g., aliasing) is regarded as an informal\n      redirection
    mechanism, beyond the scope of this control.  Messages\n      will be sent to
    RFC 822, irrespective of whether this service is\n      requested. In practice,
    control of this service is not supported.\n   Registered Mail\n      N/A (PDAU).\n
    \  Registered Mail to Addressee in Person\n      N/A (PDAU).\n   Reply Request
    Indication\n      Supported as comment next to address.\n   Replying IP Message
    Indication\n      Supported.\n   Report Origin Authentication\n      N/A (reception).\n
    \  Request for Forwarding Address\n      N/A (PDAU).\n   Requested Delivery Method\n
    \     N/A (local).   The service request is dealt with at submission\n      time.
    \ Any such request is made available through the gateway by\n      use of a comment
    associated with the recipient in question.\n   Return of Content\n      Supported
    where SMTP and NOTARY are used. In principle for other\n      situations, this
    is N/A, as non-delivery notifications are not\n      supported.  In practice,
    most RFC 822 systems will return part or\n      all of the content along with
    the IP Message indicating an error\n      (see Non-delivery Notification).\n   Sensitivity
    Indication\n      Supported as new RFC 822 header (Sensitivity:).\n   Special
    Delivery\n      N/A (PDAU).\n   Stored Message Deletion\n      N/A (MS).\n   Stored
    Message Fetching\n      N/A (MS).\n   Stored Message Listing\n      N/A (MS).\n
    \  Stored Message Summary\n      N/A (MS).\n   Subject Indication\n      Supported.\n
    \  Undeliverable Mail with Return of Physical Message\n      N/A (PDAU).\n   Use
    of Distribution List\n      In principle this applies only to X.400 supported
    distribution\n      lists (see DL Expansion Prohibited).  Theoretically, this
    service\n      is N/A (prior).  In practice, because of informal RFC 822 lists,\n
    \     this service can be regarded as supported.\n   Auto-Submitted Indication\n
    \     Supported\n"
  title: 2.3.1.2.  IPM Service Optional User Facilities
- contents:
  - '2.3.2.  Reception by X.400

    '
  title: 2.3.2.  Reception by X.400
- contents:
  - "2.3.2.1.  Standard Mandatory Services\n   The following standard IPM mandatory
    user facilities are required for\n   reception of RFC 822 originated mail by an
    X.400 UA.\n   Content Type Indication\n   Delivery Time Stamp Indication\n   IP
    Message Identification\n   Message Identification\n   Non-delivery Notification\n
    \  Original Encoded Information Types Indication\n   Submission Time Stamp Indication\n
    \  Typed Body\n"
  title: 2.3.2.1.  Standard Mandatory Services
- contents:
  - "2.3.2.2.  Standard Optional Services\n   The following standard IPM optional
    user facilities are required for\n   reception of RFC 822 originated mail by an
    X.400 UA.\n   Authorising User's Indication\n   Blind Copy Recipient Indication\n
    \  Cross Referencing Indication\n   Originator Indication\n   Primary and Copy
    Recipients Indication\n   Replying IP Message Indication\n   Subject Indication\n"
  title: 2.3.2.2.  Standard Optional Services
- contents:
  - "2.3.2.3.  New Services\n   A new X.400 service \"RFC 822 Header Field\" is defined
    using the\n   extension facilities.  This allows for any RFC 822 header field
    to be\n   represented.  It may be present in RFC 822 originated messages which\n
    \  are received by an X.400 UA.\n"
  title: 2.3.2.3.  New Services
- contents:
  - 'Chapter 3 Basic Mappings

    '
  title: Chapter 3 Basic Mappings
- contents:
  - "3.1.  Notation\n   The X.400 protocols are encoded in a structured manner according
    to\n   ASN.1, whereas RFC 822 is text encoded.  To define a detailed\n   mapping,
    it is necessary to refer to detailed protocol elements in\n   each format.  A
    notation to achieve this is described in this\n   section.\n"
  title: 3.1.  Notation
- contents:
  - "3.1.1.  RFC 822\n   Structured text is defined according to the Extended Backus
    Naur Form\n   (EBNF) defined in Section 2 of RFC 822 [16].  In the EBNF definitions\n
    \  used in this specification, the syntax rules given in Appendix D of\n   RFC
    822 are assumed.  When these EBNF tokens are referred to outside\n   an EBNF definition,
    they are identified by the string \"822.\" appended\n   to the beginning of the
    string (e.g., 822.addr-spec).  Additional\n   syntax rules, to be used throughout
    this specification, are defined\n   in this chapter.\n   The EBNF is used in two
    ways.\n   1.   To describe components of RFC 822 messages (or of SMTP\n        components).
    \ When these new EBNF tokens are referred to\n        outside an EBNF definition,
    they are identified by the\n        string \"EBNF.\" appended to the beginning
    of the string\n        (e.g., EBNF.importance).\n   2.   To describe the structure
    of IA5 or ASCII information not in\n        an RFC 822 message.\n   For all new
    EBNF, tokens will either be self delimiting, or be\n   delimited by self delimiting
    tokens.  Comments and LWSP are not used\n   as delimiters, except for the following
    cases, where LWSP may be\n   inserted according to RFC 822 rules.\n   -    Around
    the \":\" in all headers\n   -    EBNF.labelled-integer\n   -    EBNF.object-identifier\n
    \  -    EBNF.encoded-info\n   RFC 822 folding rules are applied to all headers.
    \ Comments are never\n   used in these new headers.\n   This notation is used
    in a modified form to refer to NOTARY EBNF\n   [28].  For this EBNF, the keyword
    EBNF it replaces with DSN, for\n   example DSN.final-recipient-field fields.\n"
  title: 3.1.1.  RFC 822
- contents:
  - "3.1.2.  ASN.1\n   An element is referred to with the following syntax, defined
    in EBNF:\n      element         = service \".\" definition *( \".\" definition
    )\n      service         = \"IPMS\" / \"MTS\" / \"MTA\"\n      definition      =
    identifier / context\n      identifier      = ALPHA *< ALPHA or DIGIT or \"-\"
    >\n      context         = \"[\" 1*DIGIT \"]\"\n   The EBNF.service keys are shorthand
    for the following service\n   specifications:\n   IPMS IPMSInformationObjects
    defined in Annex E of X.420 / ISO 10021-\n   7.\n   MTS MTSAbstractService defined
    in Section 9 of X.411 / ISO 10021-4.\n   TA MTAAbstractService defined in Section
    13 of X.411 / ISO 10021-4.\n   FTBP File Transfer Body Part, as defined in [27].\n
    \  The first EBNF.identifier identifies a type or value key in the\n   context
    of the defined service specification.  Subsequent\n   EBNF.identifiers identify
    a value label or type in the context of the\n   first identifier (SET or SEQUENCE).
    \ EBNF.context indicates a context\n   tag, and is used where there is no label
    or type to uniquely identify\n   a component.  The special EBNF.identifier keyword
    \"value\" is used to\n   denote an element of a sequence.  For example, IPMS.Heading.subject\n
    \  defines the subject element of the IPMS heading.  The same syntax is\n   also
    used to refer to element values.  For example,\n   MTS.EncodedInformationTypes.[0].g3Fax
    refers to a value of\n   MTS.EncodedInformationTypes.[0] .\n"
  title: 3.1.2.  ASN.1
- contents:
  - "3.2.  ASCII and IA5\n   A gateway will interpret all IA5 as ASCII.  Thus, mapping
    between\n   these forms is conceptual.\n"
  title: 3.2.  ASCII and IA5
- contents:
  - "3.3.  Standard Types\n   There is a need to convert between ASCII text and some
    of the types\n   defined in ASN.1 [14].  For each case, an EBNF syntax definition
    is\n   given, for use in all of this specification, which leads to a mapping\n
    \  between ASN.1, and an EBNF construct.  All EBNF syntax definitions of\n   ASN.1
    types are in lower case, whereas ASN.1 types are referred to\n   with the first
    letter in upper case.  Except as noted, all mappings\n   are symmetrical.\n"
  title: 3.3.  Standard Types
- contents:
  - "3.3.1.  Boolean\n   Boolean is encoded as:\n      boolean = \"TRUE\" / \"FALSE\"\n"
  title: 3.3.1.  Boolean
- contents:
  - "3.3.2.  NumericString\n   NumericString is encoded as:\n      numericstring =
    *(DIGIT / \" \")\n"
  title: 3.3.2.  NumericString
- contents:
  - "3.3.3.  PrintableString\n   PrintableString is a restricted IA5String defined
    as:\n      printablestring  = *( ps-char )\n      ps-restricted-char      = 1DIGIT
    /  1ALPHA / \" \" / \"'\" / \"+\"\n                         / \",\" / \"-\" /
    \".\" / \"/\" / \":\" / \"=\" / \"?\"\n      ps-delim         = \"(\" / \")\"\n
    \     ps-char          = ps-delim / ps-restricted-char\n   This can be used to
    represent real printable strings in EBNF.\n"
  title: 3.3.3.  PrintableString
- contents:
  - "3.3.4.  T.61String\n   In cases where T.61 strings are only used for conveying
    human\n   interpreted information, the aim of a mapping is to render the\n   characters
    appropriately in the remote character set, rather than to\n   maximise reversibility.
    \ For these cases, there are two options, both\n   of which are conformant to
    this specification:\n   1.   The mappings to IA5 defined in ITU-T Recommendation
    X.408\n        (1988) may be used [13].  These will then be encoded in\n        ASCII.
    \  This is the approach mandated in RFC 1327.\n   2.   This mapping may be used
    if the characters are not contained\n        within ASCII repertoire, but are
    all in an IANA-registered\n        character set.  Use the encoding defined in
    RFC 1522 [9] to\n        generate appropriate encoded-words.  If this mapping
    is\n        used, the character set ISO-8859-1 shall be used if all of\n        the
    characters needed are available in this repertoire.  In\n        other cases,
    the character set TELETEX shall be used.  The\n        details of this character
    set is defined in the Appendix C\n        of RFC 2157.\n   There is also a need
    to represent Teletex Strings in ASCII, for some\n   aspects of OR Address.  For
    these, the following encoding is used:\n      teletex-string   = *( ps-char /
    t61-encoded )\n      t61-encoded      = \"{\" 1* t61-encoded-char \"}\"\n      t61-encoded-char
    = 3DIGIT\n   Characters in EBNF.ps-char are mapped simply.  Other octets,\n   including
    control characters, are mapped using a quoting mechanism\n   similar to the printable
    string mechanism.  Each octet is represented\n   as 3 decimal digits.  For example,
    the Yen character (hex A5) is\n   represented as {165}.  As the three character
    string, a, yen\n   character, b, would be represented as either \"a{165}b\".\n
    \  The use of escape sequences follows that set down for ASN1.  in ISO\n   8825-1,
    with the additional specifiction that the default G1 page is\n   ISO Latin 1.
    \ The page settings may be changed by escape sequences.\n   Changes of the settings
    hold within a pair of curly brackets ({}),\n   and the settings revert to the
    default after the right bracket (})\n   (i.e., they do not carry forward to subsequent
    T.61 encoding).\n   There are a number of places where a string may have a Teletex
    and/or\n   Printable String representation.  The following EBNF is used to\n   represent
    this.\n      teletex-and-or-ps = [ printablestring ] [ \"*\" teletex-string ]\n
    \  The natural mapping is restricted to EBNF.ps-char, in order to make\n   the
    full BNF easier to parse.  An example is:\n         \"yen*{165}\"\n"
  title: 3.3.4.  T.61String
- contents:
  - "3.3.5.  UTCTime\n   Both UTCTime and the RFC 822 822.date-time syntax contain:
    Year,\n   Month, Day of Month, hour, minute, second (optional), and Timezone\n
    \  (technically a time differential in UTCTime).  822.date-time also\n   contains
    an optional day of the week, but this is redundant.  With\n   the exception of
    Year, a symmetrical mapping can be made between\n   these constructs.\n   Note:\n
    \     In practice, a gateway will need to parse various illegal variants\n      on
    822.date-time.  In cases where 822.date-time cannot be parsed,\n      it is recommended
    that the derived UTCTime is set to the value at\n      the time of translation.
    \ Such errors may be noted in an RFC 822\n      comment, to aid detection and
    correction.\n   When mapping to X.400, the UTCTime format which specifies the\n
    \  timezone offset shall be used.\n   When mapping to RFC 822, the 822.date-time
    format shall include a\n   numeric timezone offset (e.g., -0500).\n   When mapping
    time values, the timezone shall be preserved as\n   specified.  The date shall
    not be normalised to any other timezone.\n   RFC 822, as modified by RFC 1123,
    requires use of a four digit year.\n   Note that the original RFC 822 uses a two
    digit date, which is no\n   longer legal.  UTCTime uses a two digit date.  To
    map a year from RFC\n   822 to X.400, simply use the last two digits.  To map
    a year from\n   X.400 to RFC 822, assume that the two digit year refers to a year
    in\n   the 10 year epoch 1980-2079.\n"
  title: 3.3.5.  UTCTime
- contents:
  - "3.3.6.  Integer\n   A basic ASN.1 Integer will be mapped onto EBNF.numericstring.
    \ In\n   many cases ASN.1 will enumerate Integer values or use ENUMERATED.  An\n
    \  EBNF encoding labelled-integer is provided. When mapping from EBNF to\n   ASN.1,
    only the integer value is mapped, and the associated text is\n   discarded.  When
    mapping from ASN.1 to EBNF, a text label may be\n   added.  It is recommended
    that this is done wherever possible and\n   that clear text labels are chosen.\n
    \  A second encoding labelled-integer-2 is provided. This is used in\n   DSNs,
    where the parsing rules will treat the text as a comment. This\n   definition
    was not present in RFC 1327.\n      labelled-integer ::= [ key-string ] \"(\"
    numericstring \")\"\n      labelled-integer-2 ::= [ numericstring ] \"(\" key-string
    \")\"\n      key-string      = *key-char\n      key-char        = <a-z, A-Z, 0-9,
    and \"-\">\n"
  title: 3.3.6.  Integer
- contents:
  - "3.3.7.  Object Identifier\n   Object identifiers are represented in a form similar
    to that given in\n   ASN.1.  The order is the same as for ASN.1 (big-endian).
    \ The numbers\n   are mandatory, and used when mapping from the ASCII to ASN.1.
    \ The\n   key-strings are optional.  It is recommended that as many strings as\n
    \  possible are generated when mapping from ASN.1 to ASCII, to\n   facilitate
    user recognition.\n      object-identifier  ::= oid-comp object-identifier\n                      |
    oid-comp\n      oid-comp ::= [ key-string ] \"(\" numericstring \")\"\n   An example
    representation of an object identifier is:\n      joint-iso-ccitt(2) mhs (6) ipms
    (1) ep (11) ia5-text (0)\n      or\n      (2) (6) (1)(11)(0)\n   Because of the
    use of brackets and the conflict with the RFC 822\n   comment convention, MIXER
    is defines so that the EBNFobject-\n   identifier definition is not used in structured
    fields.\n"
  title: 3.3.7.  Object Identifier
- contents:
  - "3.4.  Encoding ASCII in Printable String\n   Some information in RFC 822 is represented
    in ASCII, and needs to be\n   mapped into X.400 elements encoded as printable
    string.  For this\n   reason, a mechanism to represent ASCII encoded as PrintableString
    is\n   needed.\n   A structured subset of EBNF.printablestring is now defined.
    \ This\n   shall be used to encode ASCII in the PrintableString character set.\n
    \     ps-encoded       = *( ps-restricted-char / ps-encoded-char )\n      ps-encoded-char
    \ = \"(a)\"               ; (@)\n                       / \"(p)\"               ;
    (%)\n                       / \"(b)\"               ; (!)\n                       /
    \"(q)\"               ; (\")\n                       / \"(u)\"               ;
    (_)\n                       / \"(l)\"               ; \"(\"\n                       /
    \"(r)\"               ; \")\"\n                       / \"(\" 3DIGIT \")\"\n   The
    822.3DIGIT in EBNF.ps-encoded-char shall have range 0-127, and is\n   interpreted
    in decimal as the corresponding ASCII character.  Special\n   encodings are given
    for: at sign (@), percent (%), exclamation\n   mark/bang (!), double quote (\"),
    underscore (_), left bracket ((),\n   and right bracket ()).  These characters,
    with the exception of round\n   brackets, are not included in PrintableString,
    but are common in RFC\n   822 addresses.  The abbreviations will ease specification
    of RFC 822\n   addresses from an X.400 system.  These special encodings shall
    be\n   interpreted in a case insensitive manner, but always generated in\n   lower
    case.\n   A reversible mapping between PrintableString and ASCII can now be\n
    \  defined.  The reversibility means that some values of printable\n   string
    (containing round braces) cannot be generated from ASCII.\n   Therefore, this
    mapping shall only be used in cases where the\n   printable strings have been
    derived from ASCII (and will therefore\n   have a restricted domain).  For example,
    in this specification, it is\n   only applied to a Domain Defined Attribute which
    will have been\n   generated by use of this specification and a value such as
    \"(\" would\n   not be possible.\n   To encode ASCII as PrintableString, the EBNF.ps-encoded
    syntax is\n   used, with all EBNF.ps-restricted-char mapped directly.  All other\n
    \  822.CHAR are encoded as EBNF.ps-encoded-char.\n   To encode PrintableString
    as ASCII, parse PrintableString as\n   EBNF.ps-encoded, and then reverse the previous
    mapping.  If the\n   PrintableString cannot be parsed, then the mapping is being
    applied\n   in to an inappropriate value, and an error shall be given to the\n
    \  procedure doing the mapping. In some cases, it may be preferable to\n   pass
    the printable string through unaltered.\n   Some examples are now given.  Note
    the arrows which indicate\n   asymmetrical mappings:\n         PrintableString
    \          ASCII\n         'a demo.'         <->   'a demo.'\n         foo(a)bar
    \        <->   foo@bar\n         (q)(u)(p)(q)      <->   \"_%\"\n         (a)
    \              <->   @\n         (A)               ->    @\n         (l)a(r)           <->
    \  (a)\n         (126)             <->   ~\n         (                 ->    (\n
    \        (l)               <->   (\n"
  title: 3.4.  Encoding ASCII in Printable String
- contents:
  - "3.5.  RFC 1522\n   RFC 1522 defines a mechanism for encoding other character
    set\n   information into elements of RFC 822 Headers.  A gateway may ignore\n
    \  this encoding and treat the elements as ASCII.\n   A preferred approach is
    for the gateway to interpret the RFC 1522\n   encoding. This will not always be
    straightforward, because:\n   1.   RFC 1522 permits an openly extensible character
    set choice,\n        which may be broader than T.61.\n   2.   It is not always
    possible to map all characters into the\n        equivalent X.400 field.\n   RFC
    1522 is only applied to fields which are \"for information only\".\n   A gateway
    which interprets header elements according to RFC 1522 may\n   apply reasonable
    heuristics to minimise information loss.\n"
  title: 3.5.  RFC 1522
- contents:
  - "Chapter 4 - Addressing and Message IDs\n   Addressing is the most complex aspect
    of X.400 <-> RFC 822 gateway\n   and is therefore  given a separate chapter.  This
    chapter also\n   discusses message identifiers, as they are closely linked to\n
    \  addresses.  This chapter, as a side effect, also defines a textual\n   representation
    of an X.400 OR Address.   This specification has much\n   similarity to the X.400(92)
    representation of addresses.   This was\n   because early versions of this specification
    were a major input to\n   this work.  This specification retains compatibility
    with earlier\n   versions.  The X.400 specification of address representation
    can be\n   parsed but is not generated.\n   Initially we consider an address in
    the (human) mail user sense of\n   \"what is typed at the mailsystem to reference
    a mail user\".  A basic\n   RFC 822 address is defined by the EBNF EBNF.822-address:\n
    \        822-address     = [ route ] addr-spec\n   These definitions are taken
    from RFC 822.  In SMTP (or another 822-\n   MTS protocol), the originator and
    each recipient are considered to be\n   defined by such a construct.  In an RFC
    822 header, the EBNF.822-\n   address is encapsulated in the 822-address syntax
    rule, and there may\n   also be associated comments.  None of this extra information
    has any\n   semantics, other than to the end user.\n   The basic X.400 OR Address,
    used by the MTS for routing, is defined\n   by MTS.ORAddress.  In IPMS, the MTS.ORAddress
    is encapsulated within\n   IPMS.ORDescriptor.\n   The RFC 822 822.address is mapped
    with IPMS.ORDescriptor, and that\n   RFC 822 EBNF.822-address is mapped with MTS.ORAddress.\n
    \  Section 4.1 defines a textual representation of an OR Address, which\n   is
    used throughout the rest of this specification.  This text\n   representation
    is designed to represent an X.400 address in the LHS\n   (left hand side) or local
    part of an RFC 822 address, and so this\n   representation gives a mechanism to
    represent X.400 addresses within\n   RFC 822 addresses.\n   Section 4.2 describes
    global equivalence mapping between parts of the\n   X.400 and RFC 822 name spaces,
    and defines the concept of a MIXER\n   Conformant Global Address Mapping (MCGAM).
    \ Gateways conforming to\n   this specification shall support MCGAMs.\n   Section
    4.3 is the core part of this chapter, and defines the mapping\n   mechanism.\n"
  title: Chapter 4 - Addressing and Message IDs
- contents:
  - "4.1.  A textual representation of MTS.ORAddress\n   MTS.ORAddress is structured
    as an ordered set of attributes\n   (type/value pairs).  It is clearly necessary
    to be able to encode\n   this in ASCII for gatewaying purposes.  All components
    shall be\n   encoded, in order to guarantee return of error messages, and to\n
    \  optimise third party replies.\n"
  title: 4.1.  A textual representation of MTS.ORAddress
- contents:
  - "4.1.1.  Basic OR Address Representation\n   An OR Address has a number of structured
    and unstructured attributes.\n   For each unstructured attribute, a key and an
    encoding is specified.\n   For structured attributes, the X.400 attribute is mapped
    onto one or\n   more attribute value pairs.  For domain defined attributes, each\n
    \  element of the sequence will be mapped onto a triple (key and two\n   values),
    with each value having the same encoding.  The attributes\n   are as follows,
    with 1984 attributes given in the first part of the\n   attribute key table.  For
    each attribute, a reference is given,\n   consisting of the relevant sections
    in X.402 / ISO 10021-2, and the\n   extension identifier for 88 only attributes.
    \ The attribute key table\n   follows:\n"
  - 'Attribute (Component)               Key         Enc    Ref     Id

    '
  - '84/88 Attributes

    '
  - 'MTS.CountryName                      C                P     18.3.3

    '
  - 'MTS.AdministrationDomainName         ADMD             P     18.3.1

    '
  - 'MTS.PrivateDomainName                PRMD             P     18.3.21

    '
  - 'MTS.NetworkAddress                   X121             N     18.3.7

    '
  - 'MTS.TerminalIdentifier               T-ID             P     18.3.23

    '
  - 'MTS.OrganizationName                 O                P/T   18.3.9

    '
  - 'MTS.OrganizationalUnitNames.value    OU               P/T   18.3.10

    '
  - 'MTS.NumericUserIdentifier            UA-ID            N     18.3.8

    '
  - 'MTS.PersonalName                     PN               P/T   18.3.12

    '
  - 'MTS.PersonalName.surname             S                P/T   18.3.12

    '
  - 'MTS.PersonalName.given-name          G                P/T   18.3.12

    '
  - 'MTS.PersonalName.initials            I                P/T   18.3.12

    '
  - "MTS.PersonalName\n   .generation-qualifier             GQ               P/T   18.3.12\n"
  - 'MTS.DomainDefineAttribute.value      DD               P/T   18.1

    '
  - '88 Attributes

    '
  - 'MTS.CommonName                       CN               P/T   18.3.2    1

    '
  - 'MTS.TeletexCommonName                CN               P/T   18.3.2    2

    '
  - 'MTS.TeletexOrganizationName          O                P/T   18.3.9    3

    '
  - 'MTS.TeletexPersonalName              PN               P/T   18.3.12   4

    '
  - 'MTS.TeletexPersonalName.surname      S                P/T   18.3.12   4

    '
  - 'MTS.TeletexPersonalName.given-name   G                P/T   18.3.12   4

    '
  - 'MTS.TeletexPersonalName.initials     I                P/T   18.3.12   4

    '
  - "MTS.TeletexPersonalName\n   .generation-qualifier             GQ               P/T
    \  18.3.12   4\n"
  - "MTS.TeletexOrganizationalUnitNames\n   .value                            OU               P/T
    \  18.3.10   5\n"
  - "MTS.TeletexDomainDefinedAttribute\n   .value                            DD               P/T
    \  18.1      6\n"
  - 'MTS.PDSName                          PD-SERVICE       P     18.3.11   7

    '
  - 'MTS.PhysicalDeliveryCountryName      PD-C             P     18.3.13   8

    '
  - 'MTS.PostalCode                       PD-CODE          P     18.3.19   9

    '
  - 'MTS.PhysicalDeliveryOfficeName       PD-OFFICE        P/T   18.3.14   10

    '
  - 'MTS.PhysicalDeliveryOfficeNumber     PD-OFFICE-NUM    P/T   18.3.15   11

    '
  - 'MTS.ExtensionORAddressComponents     PD-EXT-ADDRESS   P/T   18.3.4    12

    '
  - 'MTS.PhysicalDeliveryPersonName       PD-PN            P/T   18.3.17   13

    '
  - 'MTS.PhysicalDeliveryOrganizationName PD-O             P/T   18.3.16   14

    '
  - "MTS.ExtensionPhysicalDelivery\n   AddressComponents                 PD-EXT-DELIVERY
    \ P/T   18.3.5    15\n"
  - 'MTS.UnformattedPostalAddress         PD-ADDRESS       UPA   18.3.25   16

    '
  - 'MTS.StreetAddress                    PD-STREET        P/T   18.3.22   17

    '
  - 'MTS.PostOfficeBoxAddress             PD-BOX           P/T   18.3.18   18

    '
  - 'MTS.PosteRestanteAddress             PD-RESTANTE      P/T   18.3.20   19

    '
  - 'MTS.UniquePostalName                 PD-UNIQUE        P/T   18.3.26   20

    '
  - 'MTS.LocalPostalAttributes            PD-LOCAL         P/T   18.3.6    21

    '
  - "MTS.ExtendedNetworkAddress\n   .e163-4-address.number            NET-NUM          N
    \    18.3.7    22\n"
  - "MTS.ExtendedNetworkAddress\n   .e163-4-address.sub-address       NET-SUB          N
    \    18.3.7    22\n"
  - "MTS.ExtendedNetworkAddress\n   .psap-address                     NET-PSAP         X
    \    18.3.7    22\n"
  - "MTS.TerminalType                     T-TY             I     18.3.24   23\n   The
    following keys identify different EBNF encodings, which are\n   associated with
    the ASCII representation of MTS.ORAddress.\n         Key         Encoding\n         P
    \    printablestring\n         N     numericstring\n         T     teletex-string\n
    \        P/T   teletex-and-or-ps\n         UPA   upa-string\n         I     labelled-integer\n
    \        X     presentation-address\n   The EBNF for presentation-address is taken
    from the specification RFC\n   1278 \"A String Encoding of Presentation Address\"
    [23].\n   In most cases, the EBNF encoding maps directly to the ASN.1 encoding\n
    \  of the attribute.  There are a few exceptions. In cases where an\n   attribute
    can be encoded as either a PrintableString or NumericString\n   (Country, ADMD,
    PRMD), either form is mapped into the EBNF.  When\n   generating ASN.1, the NumericString
    encoding shall be used if the\n   string contains digits and only digits.\n   There
    are a number of cases where the P/T (teletex-and-or-ps)\n   representation is
    used.  Where the key maps to a single attribute,\n   this choice is reflected
    in the encoding of the attribute (attributes\n   10-21). For example:\n          /CN=yen*{165}/\n
    \  For most of the 1984 attributes and common name, there is a\n   printablestring
    and a teletex variant.   This pair of attributes is\n   mapped onto the single
    component here.  This will give a clean\n   mapping for the common cases where
    only one form of the name is used.\n   If there is  teletex attribute or teletex
    component only, and it\n   contains only characters in the printable string character
    set, it\n   shall be represented in the EBNF as if it had been encoded as\n   printable
    string.   A single printable string representation shall\n   also be done when
    both forms are present and they have the same\n   printable string representation.\n
    \  The Unformatted Postal Address has a slightly more complex mapping\n   onto
    a variant of   (teletex-and-or-ps), defined as:\n        upa-string = [ printable-upa
    ] [ \"*\" teletex-string ]\n        printable-upa = printablestring *( \"|\" printablestring
    )\n   The optional teletex part is straightforward.  There is an (optional)\n
    \  sequence of printable strings which are mapped in order.  For\n   example:\n
    \     /PD-ADDRESS=The Dome|The Square|Richmond|England/\n   X.400 (1992) has introduced
    a string representation of OR Addresses\n   (see F.401, Annex B).  This has specified
    a number of string keywords\n   for attributes.  As earlier versions of this specification
    \ were an\n   input to this work, many of the keywords are the same.  To increase\n
    \  compatibility, the following alternative values shall be recognised\n   when
    mapping from RFC 822 to X.400.  These shall not be generated\n   when mapping
    from X.400 to RFC 822.  The following keyword\n   alternative table and the subsequent
    paragraph lists alternative\n   keywords.\n                        Keyword         Alternative\n
    \                   ADMD              A\n                    PRMD              P\n
    \                   GQ                Q\n                    X121              X.121\n
    \                   UA-ID             N-ID\n                    PD-OFFICE-NUM
    \    PD-OFFICE NUMBER\n                    PD-OFFICE-NUM     PD-OFN\n                    PD-EXT-ADDRESS
    \   PD-EA\n                    PD-EXT-DELIVERY   PD-ED\n                    PD-OFFICE
    \        PD-OF\n                    PD-STREET         PD-S\n                    PD-UNIQUE
    \        PD-U\n                    PD-LOCAL          PD-L\n                    PD-RESTANTE
    \      PD-R\n                    PD-BOX            PD-B\n                    PD-CODE
    \          PD-PC\n                    PD-SERVICE        PD-SN\n                    DD
    \               DDA\n                    NET-NUM           E.164\n                    NET-PSAP
    \         PSAP\n                    PD-ADDRESS        PD-A\n   When mapping from
    RFC 822 to X.400, the keywords defined in this\n   paragraph shall be recognized.
    \ The ordered keywords: OU1, OU2,\n   OU3, and OU4, shall be recognised.  If these
    are present, no\n   keyword OU shall be present.  These will be treated as ordered\n
    \  values of OU.  PD-A1, PD-A2, PD-A3, PD-A4, PD-A5, PD-A6 shall be\n   treated
    as ordered lines.  If present, these will be assembled\n   with separating line
    feeds to form a single physical address.  In\n   this case PD-ADDRESS (or PD-A)
    shall not be present.   Similarly,\n   there are ordered keywords for domain defined
    attributes: DD1,\n   DD2, DD3, DD4,\n   If ISDN is present, it may be interpreted
    as an E.163/164\n   address, using local heuristics to parse the string.  X.400\n
    \  defines the key, but does not give an interpretation of the\n   value.\n   For
    T-TY (Terminal Type), the X.400 recommended values are\n   preferred, but other
    values are allowed.  These values are: tlx\n   (3); ttx (4); g3fax (5); g4fax
    (6); ia5 (7); and vtx (8).\n"
  title: 4.1.1.  Basic OR Address Representation
- contents:
  - "4.1.2.  Encoding of Personal Name\n   Handling of Personal Name and Teletex Personal
    Name  is a common\n   requirement.   Therefore MIXER defines an alternative to
    the\n   EBNF.standard-type syntax, which utilises the \"human\" conventions for\n
    \  encoding these components.  A syntax is defined, which is designed to\n   provide
    a clean encoding for the common cases of OR Address\n   specification where:\n
    \  1.   There is no generational qualifier\n   2.   Initials, if present, contain
    only letters\n   3.   Given Name, if present, does not contain full stop (\".\"),\n
    \       and is at least two characters long.\n   4.   Surname does not contain
    full stop in the first two\n        characters.\n   5    If Surname is the only
    component, it does not contain full\n        stop.\n   The following EBNF is defined:\n
    \        encoded-pn      = [ given \".\" ] *( initial \".\" ) surname\n         given
    \          = 2*<ps-char not including \".\">\n         initial         = ALPHA\n
    \        surname         = printablestring\n   This is used to map from any string
    containing only printable string\n   characters to an OR address personal name.
    \ To map from a string to\n   OR Address components, parse the string according
    to the EBNF.  The\n   given name and surname are assigned directly.  All EBNF.initial\n
    \  tokens are concatenated without intervening full stops to generate\n   the
    initials component.\n   For an OR address which follows the above restrictions,
    a string is\n   derived in the natural manner.  In this case, the mapping will
    be\n   reversible.\n   For example:\n         GivenName       = \"Marshall\"\n
    \        Surname         = \"Rose\"\n         Maps with  \"Marshall.Rose\"\n         Initials
    \       = \"MT\"\n         Surname         = \"Rose\"\n         Maps with  \"M.T.Rose\"\n
    \        GivenName       = \"Marshall\"\n         Initials        = \"MT\"\n         Surname
    \        = \"Rose\"\n         Maps with  \"Marshall.M.T.Rose\"\n   Note that X.400
    suggests that Initials is used to encode all initials\n   except the surname (X.402
    section 18.3.12).  Therefore, the defined\n   encoding is \"natural\" when either
    GivenName or Initials, but not\n   both, are present.  The case where both are
    present can be encoded.\n"
  title: 4.1.2.  Encoding of Personal Name
- contents:
  - "4.1.3.  Standard Encoding of MTS.ORAddress\n   Given this structure, we can specify
    an EBNF representation of an OR\n   Address. The output format of addresses is
    defined by EBNF.std-or-\n   address.  The more flexible input format is defined
    by EBNF.std-or-\n   address-input. The input EBNF has been added subsequent to
    RFC 1327,\n   to reflect the formal incorporation of a number of heuristics.  The\n
    \  address element separator on input may be \"/\", \";\", or a mixture of\n   these.
    \ The output format is used in all examples.\n         std-or-address  = 1*( \"/\"
    attribute \"=\" value ) \"/\"\n         attribute       = standard-type\n                         /
    \"RFC-822\"\n                         / dd-key \".\" std-printablestring\n         std-or-address-input
    =  [ sep pair ] sep  pair *( sep pair )\n                                sep  [
    pair sep ]\n         sep             = \"/\" / \";\"\n         pair            =
    input-attribute \"=\" value\n         input-attribute = attribute\n                         /
    dd-key \":\" std-printablestring\n         standard-type   = key-string\n         dd-key
    \         = key-string\n         value           = std-printablestring\n         std-printablestring\n
    \                        = *( std-char / std-pair )\n         std-char        =
    <\"{\", \"}\", \"*\", and any ps-char\n                                         except
    \"/\" and \"=\" >\n         std-pair        = \"$\" ps-char\n   For address generation,
    the standard-type is any key defined in the\n   key table in Section 4.1, except
    PN, and DD.  For address parsing,\n   other key values from Section 4.1 are also
    valid.  The EBNF leads to\n   a set of attribute/value pairs. The value is interpreted
    according to\n   the EBNF encoding defined in the table.\n   If the standard-type
    is PN, the value is interpreted according to\n   EBNF.encoded-pn, and the components
    of MTS.PersonalName and/or\n   MTS.TeletexPersonalName derived accordingly.\n
    \  If dd-key is the recognised Domain Defined string (DD) or one of the\n   alternatives
    defined in Section 4.1, then the type and value are\n   interpreted according
    to the syntax implied from the encoding, and\n   aligned to either the teletex
    or printable string form.  Key and\n   value shall have the same encoding.\n   If
    value is \"RFC-822\", then the (printable string) Domain Defined\n   Type of \"RFC-822\"
    is assumed.  This is an optimised encoding of the\n   domain defined type defined
    by this specification.\n   The matching of all keywords shall be done in a case-independent\n
    \  manner.\n   EBNF.std-or-address uses the characters \"/\" and \"=\" as delimiters.\n
    \  Domain Defined Attributes and any value may contain these characters.\n   A
    quoting mechanism, using the non-printable string \"$\" is used to\n   allow these
    characters to be represented.\n   If an address of this syntax is parsed, and
    a country value is\n   present, but no ADMD, the string shall be interpreted as
    if an ADMD\n   value of single space had been specified.\n"
  title: 4.1.3.  Standard Encoding of MTS.ORAddress
- contents:
  - "4.2.  Global Address Mapping\n   From a user perspective, the ideal mapping  would
    be entirely\n   symmetrical and global, to enable addresses to be referred to\n
    \  transparently in the remote system, with the choice of gateway being\n   left
    to the Message Transfer Service.  There are two fundamental\n   reasons why this
    is not possible:\n   1.   The syntaxes are sufficiently different to make this\n
    \       impossible.\n   2    There is insufficient administrative co-operation
    between\n        the X.400 and RFC 822 name registration authorities for this\n
    \       to work.\n   Another way to view this situation is to see that there is
    not a full\n   global equivalence between X.400 and RFC 822 addressing.  To meet\n
    \  user needs to the extent possible, this specification provides for\n   equivalence
    where there is sufficient co-operation.  To be useful,\n   this equivalence shall
    be recognised and interpreted in the same way\n   by all gateways.  Therefore,
    an asymmetrical mapping is defined,\n   which can be symmetrical where there is
    appropriate administrative\n   co-operation.  Section 4.3 describes the asymetrical
    aspects.   This\n   section describes a mechanism to enable the administrative
    co-\n   ordination for symmetrical mappings.\n   In order to achieve a symmetrical
    mapping there is a need to define\n   an administrative equivalence between parts
    of the OR Address and\n   Domain namespaces.  Previous version of this specification
    did this\n   by definition of a global set of mappings.  MIXER defines the concept\n
    \  of a MIXER Conformant Global Address Mapping (MCGAM).  This acronym\n   is
    defined so that it is very clear what is being referenced.\n   The X.400 and Internet
    Mail address spaces are hierarchical.  It is\n   possible to define an equivalence
    between two points in the\n   hierarchies, such that addresses below that point
    can be derived in\n   an algorithmic manner.  An MCGAM is a mapping from a point
    in one\n   hierarchy to a point in the other hierarchy.  An \"MGGAM pair\" is
    a\n   pair of symmetrical mappings between two points.  To define an MCGAM,\n
    \  the following shall apply:\n   1.   The authority defining the MCGAM shall
    have responsibility\n        for BOTH of the namespaces between which the MCGAM
    is\n        defined.\n   2.   The authority defining the MCGAM is responsible
    to ensure\n        that addresses allocated below the two equivalence points\n
    \       conform to the rules set out below.\n   3.   The authority defining the
    MCGAM is responsible to ensure\n        that addresses which are generated according
    to the MCGAM\n        are routed correctly.\n   In general, MCGAMs will be independent.
    \  In some cases, a set of\n   MCGAMs may be related (e.g., where one MCGAM defines
    a mapping for an\n   organization and a second MCGAM defines an excpetion for
    a subtree\n   within the organization).   In this case, the related set of MCGAMs\n
    \  shall be treated as a single MCGAM for distribution purposes.\n   The existence
    of an MCGAM does not imply routability and access for\n   all users.\n   The authority
    defining an MCGAM may simply use this mapping locally.\n   This will often be
    the case in a \"local scenario\" gateway.   Because\n   of third party addressing,
    a MIXER gateway will work best with the\n   maximum number of MCGAMs.   Therefore,
    three mechanisms are defined\n   to enable publication and exchange of MCGAMs:\n
    \  1.   Distribution of text tables.  This is described in Appendix\n        F
    of this specification.\n   2.   Distribution by Domain Name Service.   This is
    described in\n        RFC 2163 [3].\n   3.   Distribution by X.500 Directory Service.
    \  This is defined\n        in RFC 2164 [26].\n   The following sections define
    how the MCGAM namespace equivalence is\n   modelled.  The Internet Domain Namespace
    defines a simple hierarchy.\n   For the purposes of this mapping, only parts of
    the namespace where\n   domains conform to the EBNF domain-syntax are allowed.\n
    \        domain-syntax   = alphanum [ *alphanumhyphen alphanum ]\n         alphanum
    \       = <ALPHA or DIGIT>\n         alphanumhyphen  = <ALPHA or DIGIT or HYPHEN>\n
    \  Although RFC 822 allows for a more general syntax, this restricted\n   syntax
    is used in MIXER as it is the one chosen by the various domain\n   service administrations.
    \ In practice, it reflects all RFC 822 usage.\n   The following OR Address attributes
    are considered as a hierarchy,\n   and may be specified by the domain.  They are
    (in order of the\n   hierarchy defined by MIXER):\n         Country, ADMD, PRMD,
    Organization, Organizational Units\n   There may be up to four ordered Organizational
    Units.   This\n   hierarchy reflects most usage of X.400, although X.400 may be
    used in\n   other ways. In particular, it covers the Mnemonic OR Address using
    a\n   1984 compatible encoding.  This is seen as the dominant form of OR\n   Address.
    MCGAMs may only be used when this hierarchy applies.\n   An equivalence mapping
    is defined between two nodes in the respective\n   hierarchies. For example:\n
    \        => \"AC.UK\" might be mapped with\n         PRMD=\"UK.AC\", ADMD=\"GOLD
    400\", C=\"GB\"\n   The mapping identifies that the management of these points
    in the\n   respective hierarchies is the same (or co-operate very closely).  The\n
    \  equivalence means that the namespaces below this equivalence point\n   map
    1:1, except where the mapping is overridden by further\n   equivalence mappings
    lower down the hierarchy.   This equivalence may\n   be achieved in three ways:\n
    \  1.   All of the nodes below this point are RFC 822, and the MIXER\n        mapping
    defines the X.400 addresses for these nodes.\n   2.   All of the nodes below this
    point are X.400, and the MIXER\n        mapping defines the  RFC 822 addresses
    for these nodes.\n   3.   There are X.400 and RFC 822 nodes below this point,
    and\n        addressing is managed in a manner which  ensures the\n        equivalence.
    \  The rules to achieve this are  defined by\n        MIXER.\n   Each of these
    ways gives a framework for MCGAM definition.\n   When an MCGAM is defined, a systematic
    mapping for the inferior nodes\n   in the two hierarchies follows.   This is a
    1:1 mapping between the\n   nodes in the subtrees.  For example, given the MCGAM
    pair defined\n   above:\n         the domain \"R-D.Salford.AC.UK\" algorithmically
    maps with\n         OU=\"R-D\", O=\"Salford\", PRMD=\"UK.AC\", ADMD=\"GOLD 400\",
    C=\"GB\"\n   Note that when an equivalence is defined, that this can be re-defined\n
    \  for lower points in the hierarchy.  However, it is not possible to\n   declare
    contained subtrees to be un-mappable.\n   The equivalence mapping also provides
    a mechanism to deal with\n   missing elements in the X.400 hierarchy (most commonly
    the PRMD,\n   which is the only element that may be ommitted when conforming to\n
    \  recent versions of X.400).  A domain may be associated with an\n   omitted
    attribute in conjunction with several present ones.  When\n   performing the algorithmic
    insertion of components lower in the\n   hierarchy, the omitted value shall be
    skipped.  For example:\n         If there is an MCGAM pair between domain HNE.EGM\"
    and \"O=HNE\",\n         \"ADMD=ECQ\", \"C=TC\", and omitted PRMD\n   then\n         \"ZI.HNE.EGM\"
    is algorithmically mapped with \"OU=I\", \"O=HNE\",\n         \"ADMD=ECQ\", \"C=TC\"\n
    \  Attributes may have null values, and  this is treated separately from\n   omitted
    attributes (while it is not ideal to make this distinction,\n   it is useful in
    practice).\n"
  title: 4.2.  Global Address Mapping
- contents:
  - "4.2.1.  Directory and Nameserver Mappings\n   When a set of MCGAMs are supported
    by X.500 or DNS, there is the\n   possibility that results will be indeterminate
    due to timeout.\n   Lookup shall be repeated until a value is determined, in order
    to\n   maintain  consistent gateway operation.\n   Where the mapping relates to
    an envelope address, the gateway shall\n   non-deliver messages according to the
    associated MTA's normal timeout\n   policy.  Where the mapping relates to addresses
    in the message\n   header, there shall be a timeout in the range of 1-4 hours
    or shorter\n   if this is required to maintain quality of service constraints.
    \  If\n   a mapping cannot be done in this time, address encapsulation shall be\n
    \  used.\n"
  title: 4.2.1.  Directory and Nameserver Mappings
- contents:
  - "4.3.  EBNF.822-address <-> MTS.ORAddress\n   This section defines the basic address
    mapping.\n"
  title: 4.3.  EBNF.822-address <-> MTS.ORAddress
- contents:
  - "4.3.1.  X.400 encoded in RFC 822\n   This section defines how X.400 addresses
    are represented in RFC 822\n   addresses.\n   The std-or-address syntax is  used
    to encode OR Address information\n   in the 822.local-part of EBNF.822-address.
    \ Where there is an\n   applicable equivalence mapping, further  OR Address information
    is\n   associated with the 822.domain component.  This cannot be used in the\n
    \  general case, due to character set problems, and to the variants of\n   X.400
    OR Addresses which use different attribute types.  The only way\n   to encode
    the full PrintableString character set in a domain is by\n   use of the 822.domain-ref
    syntax (i.e. 822.atom).  This is likely to\n   cause problems on many systems.
    \ The effective character set of\n   domains is in practice reduced from the RFC
    822 set, by restrictions\n   imposed by domain conventions and policy [10], and
    by the EBNF\n   definition in SMTP.\n   A generic 822.address consists of a 822.local-part
    and a sequence of\n   822.domains (e.g., <@domain1,@domain2:user@domain3>).  All
    except the\n   822.domain associated with the 822.local-part (domain3 in this
    case)\n   are considered to specify routing within the RFC 822 world, and will\n
    \  not be interpreted by the gateway (although they may have identified\n   the
    gateway from within the RFC 822 world).\n   The  822.domain associated with the
    822.local-part identifies the\n   gateway from within the RFC 822 world.  This
    final 822.domain may be\n   used to determine some number of OR Address attributes,
    where this\n   does not conflict with the first role.  RFC 822 routing to gateways\n
    \  will usually be set up to facilitate the 822.domain being used for\n   both
    purposes.\n   In the case that there is no applicable equivalence mapping, all
    of\n   the X.400 address is encoded in the 822.local-part and the 822.domain\n
    \  identifies the gateway to which the message is being sent.  This\n   technique
    may be used by the RFC 822 user for any X.400 address where\n   the equivalence
    mapping is not known.\n   In the case that there is an applicable MCGAM, the maximum
    number of\n   attributes are encoded in the 822.domain.  The remaining attributes\n
    \  are encoded on the LHS, using the EBNF.std-or-address syntax.  For\n   example:\n
    \        /I=J/S=Linnimouth/GQ=5/@Marketing.Widget.COM\n   encodes the MTS.ORAddress
    consisting of:\n         MTS.CountryName                       = \"TC\"\n         MTS.AdministrationDomainName
    \         = \"BTT\"\n         MTS.OrganizationName                  = \"Widget\"\n
    \        MTS.OrganizationalUnitNames.value     = \"Marketing\"\n         MTS.PersonalName.surname
    \             = \"Linnimouth\"\n         MTS.PersonalName.initials             =
    \"J\"\n         MTS.PersonalName.generation-qualifier = \"5\"\n   on the basis
    of an MCGAM pair between:\n         Domain: Widget.COM\n         OR Address: O=\"Widget\",
    ADMD=\"BTT\", C=\"TC\"\n   Given the OR address, the domain Widget.COM is determined
    from the\n   equivalence mapping and the next component is determined\n   algorithmically
    to give Marketing.Widget.COM.  The remaining\n   attributes are encoded on the
    LHS in 822.local-part.\n   There is a further mechanism to simplify the encoding
    of common\n   cases, where the only attributes to be encoded on the LHS are (non-\n
    \  Teletex) Personal Name attributes which comply with the restrictions\n   of
    4.1.2.  To achieve this, the 822.local-part shall be encoded as\n   EBNF.encoded-pn.
    \ In the previous example, if the GenerationQualifier\n   was not present in the
    OR Address, it would map with the RFC 822\n   address:  J.Linnimouth@Marketing.Widget.COM.\n
    \  From the standpoint of the RFC 822 Message Transfer System, the\n   domain
    specification is used to route the message in the standard\n   manner.  The standard
    domain mechanisms are used to select\n   appropriate gateways for the corresponding
    OR Address space.  It is\n   the responsibility of the management that defines
    the equivalence\n   mapping to define routing in the manner which will enable
    the message\n   to be delivered.\n"
  title: 4.3.1.  X.400 encoded in RFC 822
- contents:
  - "4.3.2.  RFC 822 encoded in X.400\n   The previous section showed a mapping from
    X.400 to RFC 822.  In the\n   case where  the mapping was symmetrical and based
    on the equivalence\n   mapping, this has also shown how RFC 822 is encoded in
    the X.400.\n   This equivalence cannot be used for all RFC 822 addresses.\n   The
    general case is mapped by use of domain defined attributes.  A\n   (Printable
    String) Domain defined type \"RFC-822\" is defined. The\n   associated attribute
    value is an ASCII string encoded according to\n   Section 3.3.3 of this specification.
    The interpretation of the ASCII\n   string follows RFC 822, and RFC 1123 [10,16].
    \ Domains shall always\n   be fully qualified.\n   Other OR Address attributes
    will be used to identify a context in\n   which the OR Address will be interpreted.
    \ This might be a Management\n   Domain, or some part of a Management Domain which
    identifies a\n   gateway MTA.  For example:\n         C               = \"GB\"\n
    \        ADMD            = \"GOLD 400\"\n         PRMD            = \"UK.AC\"\n
    \        O               = \"UCL\"\n         OU              = \"CS\"\n         \"RFC-822\"
    \     =  \"Jimmy(a)WIDGET-LABS.CO.UK\"\n   OR\n         C               = \"TC\"\n
    \        ADMD            = \"Wizz.mail\"\n         PRMD            = \"42\"\n
    \        \"rfc-822\"       = \"postel(a)venera.isi.edu\"\n   Note in each case
    the PrintableString encoding of \"@\" as \"(a)\".  In\n   the second example,
    the \"RFC-822\" domain defined attribute is\n   interpreted everywhere within
    the (Private) Management Domain.  In\n   the first example, further attributes
    are needed within the\n   Management Domain to identify a gateway.  Thus, this
    scheme can be\n   used with varying levels of Management Domain co-operation.\n
    \  There is a limit of 128 characters in the length of value of a domain\n   defined
    attribute, and an OR Address can have a maxmimum of four\n   domain defined attributes.
    \ Where the printable string generated from\n   the RFC 822 address exceeds 128
    characters, additional domain defined\n   attributes are used to enable up to
    512 characters to be encoded.\n   These attributes shall be filled completely
    before the next one is\n   started.   The (Printable String) DDA keywords are:
    \ RFC822C1;\n   RFC822C2; RFC822C3.  Longer addresses cannot be encoded.\n   MIXER
    defines a representation of RFC 822 addresses in printable\n   string domain defined
    attributes.  Teletex domain defined attributes\n   with a key of RFC-822, RFC822C1;
    RFC822C2; RFC822C3 shall not be\n   generated.  This is for backwards compatibility
    reasons.\n   Reception of these attributes in the manner defined below is\n   mandatory.
    \ This is to allow the possibility for future versions of\n   MIXER to allow generation
    of teletex domain defined attributes.\n   Where the values of all of these teletex
    domain defined attributes\n   are printable string characters, they shall be interpreted
    in the\n   same way as the printable string domain defined attributes.   If this\n
    \  is not the case, the printable string encoding translation shall be\n   omitted.
    \ If both teletex and printable string attributes are\n   present, this is valid
    if and only if they represent exactly the same\n   RFC 822 address.\n"
  title: 4.3.2.  RFC 822 encoded in X.400
- contents:
  - "4.3.3.  Component Ordering\n   In most cases, ordering of OR Address components
    is not significant\n   for the mappings specified.  However, Organizational Units
    (printable\n   string and teletex forms) and Domain Defined Attributes are specified\n
    \  as SEQUENCE in MTS.ORAddress, and so their order may be significant.\n   This
    specification needs to take account of this:\n   1.   To allow consistent mapping
    into the domain hierarchy\n   2.   To ensure preservation of order over multiple
    mappings.\n   There are three places where an order is specified:\n   1.   The
    text encoding (std-or-address) of MTS.ORAddress as used\n        in the local-part
    of an RFC 822 address.  An order is needed\n        for those components which
    may have multiple values\n        (Organizational Unit, and Domain Defined Attributes).
    When\n        generating an 822.std-or-address, components of a given type\n        shall
    be in hierarchical order with the most significant\n        component on the RHS
    (right hand side or domain part).  If\n        there is an Organization Attribute,
    it shall be to the right\n        of any Organizational Unit attributes.  These
    requirements\n        are for the following reasons:\n   -         Alignment to
    the hierarchy of other components in RFC\n             822 addresses (thus, Organizational
    Units will appear\n             in the same order, whether encoded on the RHS
    or LHS).\n   -         Backwards compatibility with RFC 987/1026.\n   -         To
    ensure that gateways generate consistent addresses.\n             This is both
    to help end users, and to generate\n             identical message ids.\n   Further,
    it is recommended that all other attributes are generated\n   according to this
    ordering, so that all attributes so encoded follow\n   a consistent hierarchy.
    \ When generating 822.msg-id, this order shall\n   be followed.\n   2.   For the
    Organizational Units (OU) in MTS.ORAddress, the\n        first OU in the SEQUENCE
    is the most significant, as specified\n        in X.400.\n        3.   For the
    Domain Defined Attributes in MTS.ORAddress, the\n        First Domain Defined
    Attribute in the SEQUENCE is the most\n        significant.\n   Note that although
    this ordering is mandatory for this mapping, MIXER\n   does not give additional
    implications on the ordering significance\n   within X.400.\n"
  title: 4.3.3.  Component Ordering
- contents:
  - "4.3.4.  RFC 822 -> X.400 Basic Address Mapping\n   There are two basic cases:\n
    \  1.   X.400 addresses encoded in RFC 822.  This will also include\n        RFC
    822 addresses which are given reversible encodings.\n   2.   \"Genuine\" RFC 822
    addresses.\n   The mapping shall proceed as follows, by first assuming case 1).\n
    \  STAGE I.\n   1.   If the 822-address is not of the form:\n         local-part
    \"@\" domain\n       take the domain which will be routed on and apply step 2
    of stage\n       1 to derive (a possibly null) set of attributes. Then go to stage\n
    \      II.\n       The gateway may  reduce a source route address to this form
    by\n       removal of all but the last domain.  In terms of the design\n       intentions
    of RFC 822, this would be an incorrect action. (Note\n       that an address of
    the form local%part@domain is not a source\n       route).  However, in most cases,
    it will provide a better service\n       to the end user, and is in line with
    the Internet Host\n       Requirements.  This is a reflection on the common inappropriate\n
    \      use of source routing in RFC 822 based systems, despite the\n       discussion
    in the Host Requirements [10].  Either approach, or\n       the intermediate approach
    of stripping only domain references\n       which reference the local gateway
    are conformant to this\n       specification.\n   2.   If the 822.local-part uses
    the 822.quoted-string encoding,\n        remove this quoting.  If the resulting
    unquoted\n        822.local-part has leading space, trailing space, or two\n        adjacent
    spaces go to stage II.\n   3.   If the unquoted 822.local-part contains any characters
    not\n        in PrintableString, \"{\", \"}\", \"*\", and \"$\", go to stage II.\n
    \  4.   Parse the (unquoted) 822.local-part according to the EBNF\n        EBNF.std-or-address-input.
    \ Checking of upper bounds shall\n        not be done at this point.  If this
    parse fails, parse the\n        local-part according to the EBNF EBNF.encoded-pn.
    \ If this\n        parse fails, go to stage II.  The result is a set of\n        type/value
    pairs.\n   5.   Associate the EBNF.attribute-value syntax (determined from\n        the
    identified type) with each value, and check that it\n        conforms.  If not,
    go to stage II.\n   6.   If the set of attributes forms a valid X.400 address,\n
    \       according to X.402, then go to step 9.  All forms of X.400\n        address
    are allowed at this stage.  Steps 7-8 default\n        attributes for certain
    types of OR Address.\n   7.   If the set of attributes cannot form a mnemonic
    form of\n        X.400 address after addition of attributes which may be\n        derived
    from the EBNF.domain (C, ADMD, PRMD, O, OU), go to\n        stage II.\n   8.   Attempt
    to parse EBNF.domain as:\n         *( domain-syntax \".\" ) known-domain\n        Where
    EBNF.known-domain is the longest possible match in the set\n        of MCGAMs
    being used by the gateway (described in Section 4.2).\n        EBNF.domain-syntax
    is the restricted domain syntax defined in\n        Section 4.2, to which all
    of the domain components shall conform\n        for the parse to be successful.
    \ If this fails, go to stage II.\n        For each component, systematically allocate
    the attribute\n        implied by each EBNF.domain-syntax component in the order:
    C,\n        ADMD, PRMD, O, OU.  Note that if the MCGAM used identifies an\n        \"omitted
    attribute\", then this attribute shall be omitted in the\n        systematic allocation.
    \ If this new component exceed an upper\n        bound (ADMD: 16; PRMD: 16; O:
    64; OU:  32) or it would lead to\n        more than four OUs, then go to stage
    II with the attributes\n        derived.\n        The attributes derived in this
    step (referred to as RHS\n        attributes) are merged with the ones derived
    from the LHS (step\n        6).  In some cases, not all of the RHF attributes
    are used.  LHS\n        attributes are all used.  C will not be in the LHS attributes.\n
    \       If ADMD is in the LHS attributes,  only C is taken from the RHS\n        attributes.
    If PRMD is in the LHS attributes, C and ADMD are\n        taken from the RHS attributes.
    \ If O is on the LHS, C, ADMD and\n        PRMD (if present) are taken from the
    RHS attributes.  In other\n        cases all RHS attributes are taken.\n   9.
    \  Ensure that the set of attributes conforms both to the\n        MTS.ORAddress
    specification and to the restrictions on this\n        set given in X.400, and
    that no upper bounds are exceeded\n        for any attribute.  If not go to stage
    II.\n   10.  Build the OR Address from this information.\n   STAGE II.\n   This
    will only be reached if the RFC 822 EBNF.822-address is not a\n   valid X.400
    encoding.  This implies that the address  refers to a\n   recipient on an RFC
    822 system or that the encoding of the address is\n   invalid.  Such addresses
    shall be encoded in an X.400 OR Address\n   using a domain defined attribute.\n
    \  1.   Convert the EBNF.822-address to PrintableString, as\n        specified
    in Chapter 3.\n   2.   Generate the \"RFC-822\" domain defined attribute  from
    this\n        string.\n   3.   Build the rest of the OR Address in the manner
    described\n        below.\n   It is not always possible to encode the domain defined
    attribute\n   due to length restrictions.  If the limit is exceeded by a\n   mapping
    at the MTS level, then the gateway shall reject the\n   message in question.  If
    this occurs at the IPMS level, then the\n   action will depend on the policy being
    taken for IPMS encoding,\n   which is discussed in Section 5.1.3.\n   Use Stage
    I, step 8, to generate a set of attributes to build the\n   remainder of the address.
    \ The administrative equivalence of the\n   mappings will ensure correct routing
    through X.400 to a gateway\n   back to RFC 822.\n   If Stage I, step 8 does not
    generate a set of attributes or\n   the address generated is unroutable, the remained
    of the OR\n   address is generated as follows.  The remainder of the OR address\n
    \  effectively identifies a source route to a gateway from the X.400\n   side.
    \ There are three cases, which are handled differently:\n   SMTP Return Address\n
    \     This shall be set up so that errors are returned through the\n      same
    gateway.  Therefore, the OR Address of the local\n      gateway shall be used.\n
    \  IPMS Addresses\n      These are optimised for replying.  In general, the message\n
    \     may end up anywhere within the X.400 world, and so this\n      optimisation
    identifies a gateway appropriate for  the RFC\n      822 address being converted.
    \ The 822.domain to which the\n      address would be routed is used to select
    an appropriate\n      gateway.\n      In this case, it may be useful to use a
    non-local gateway,\n      which will optimise the reply address.   This information\n
    \     may be looked up in gateway tables in a manner equivalent to\n      the
    MCGAM lookup.  Because of the similarity of lookup, the\n      three MCGAM lookup
    mechanisms (table, X.500, DNS) are also\n      available to look up this information.
    \  This information is\n      local, and a gateway may insert any appropriate
    \ (gateway)\n      OR Address.  The longest possible match on the 822.domain\n
    \     defines which gateway to use.  This mechanism is used for\n      any part
    of the X.400 namespace for which it is desirable to\n      identify a preferred
    X.400 gateway in order to optimise\n      routing.\n      If no mapping is found
    for the 822.domain, a default value\n      (typically that of the local gateway)
    is used.  It is never\n      appropriate to ignore the locally used MCGAMs.\n
    \  SMTP Recipient\n      As the RFC 822 and X.400 worlds are in principle fully\n
    \     connected, there is no technical reason for this situation\n      to occur.
    In practice, this is not the case.  In some cases,\n      routing may be configured
    to use X.400 to connect an RFC 822\n      island to the Internet.  The information
    that this part of\n      the domain space is to be routed by X.400 rather than\n
    \     remaining within the RFC 822 world shall be configured\n      privately
    into the gateway in question. X.400 routing shall\n      not make use of the presence
    of the RFC-822 DDA to perform\n      X.400 routing.  The OR address shall then
    be generated in\n      the same manner as for an IPMS address, using the locally\n
    \     available MCGAMs.  It is to support this case that the\n      definition
    of the global domain to gateway mapping is\n      important, as the use of this
    mapping will lead to a remote\n      X.400 address, which can be routed by X.400
    routing\n      procedures.  The information in this mapping shall not be\n      used
    as a basis for deciding to convert a message from RFC\n      822 to X.400.\n   Three
    examples are given, neither of which has applicable MCGAMs.\n   Example 1: (Address
    not in \"localpart\" \"@\" \"domainpart\")\n   @relay.co.uk:userb@host2\n            maps
    to\n   c=gb; a= ; p=uk.ac; o=mr; dd.rfc-822=(a)relay.co.uk:userb(a)host2;\n   Example
    2: (Address with non printablestring characters)\n   Tom_Harris@cs.widget.com\n
    \           maps to\n   c=us; a=MCI; P=relay; dd.rfc-822=Tom(u)Harris(a)cs.widget.com;\n
    \  Example 3: (Address with an entry for alter.net into the OR Address\n   of
    Preferred Gateway table, pointing to c=gb; A=BTglobal; P=relay)\n   postmaster@UK.alter.net\n
    \     maps to\n   c=gb; a=BTglobal; P=relay; dd.rfc-822=postmaster(a)UK.alter.net;\n"
  title: 4.3.4.  RFC 822 -> X.400 Basic Address Mapping
- contents:
  - "4.3.4.1.  Heuristic for mapping RFC 822 to X.400\n   The following heuristic,
    which  relates to ordering of address\n   components, may be used when mapping
    from RFC 822 to X.400.  The\n   ordering of attributes may be inverted or mixed,
    and so the following\n   heuristics may be applied:\n       If there is an Organization
    attribute to the left of any Org Unit\n       attribute, assume that the hierarchy
    is inverted.  This is to\n       facilitate the situation where a user has input
    the attributes in\n       reverse hierarchical order.  To do this the gateway
    shall first\n       map according to the order defined in 4.3.3.    If this mapping\n
    \      generates an address which X.400 address verification shows to be\n       invalid,
    this heuristic may be applied as an alternative to\n       immediate rejection
    of the address.\n"
  title: 4.3.4.1.  Heuristic for mapping RFC 822 to X.400
- contents:
  - "4.3.5.  X.400 -> RFC 822 Basic Address Mapping\n   There are two basic cases:\n
    \  1.   RFC 822 addresses encoded in X.400.\n   2.   \"Genuine\" X.400 addresses.
    \ This may include symmetrically\n        encoded RFC 822 addresses.\n   When
    an MTS Recipient OR Address is interpreted, gatewaying will be\n   selected if
    there is a single \"RFC-822\" domain defined attribute\n   present.  In this case,
    use mapping A and in other cases, use mapping\n   B.\n   RFC 1327 specified that
    this shall only be done when the gateway\n   identfied is local or otherwise known,
    and identified the approach\n   specified here as a pragmatic option.  Experience
    has shown that this\n   is effective in practice, despite theoretical problems.\n
    \  If a gateway wishes to make a mapping in a manner similar to RFC\n   1327,
    but does not wish for this global interpretation (e.g., to\n   support an RFC
    822 local system, which does not use global\n   addressing), then it may choose
    a private domain defined attribute,\n   different to \"RFC-822\".  An RFC 1327
    gateway might be configurable to\n   operate in this manner.\n   Mapping A\n   1.
    \  Map the domain defined attribute value to ASCII, as defined\n        in Chapter
    3, and drop all other attributes.\n   Mapping B\n   This is used for X.400 addresses
    which do not use the explicit RFC\n   822 encoding.\n   1.   For all string encoded
    attributes, remove any leading or\n        trailing spaces, and replace adjacent
    spaces with a single\n        space.\n        The only attribute which is permitted
    to have zero length is\n        the ADMD.  This shall be mapped onto a single
    space.\n        These transformations are for lookup only.   If an\n        EBNF.std-or-address
    mapping is used as in 4), then the\n        original values shall be used.\n   2.
    \  The numeric country codes may be mapped to the two letter\n        values (as
    defined in ISO 3166).  Global mappings are\n        usually only defined in terms
    of the ISO 3166 codes.\n   3.   Noting the hierarchy specified in 4.3.1 and including\n
    \       omitted attributes, determine the maximum set of attributes\n        which
    have an associated domain specification in the local\n        set of MCGAMs.  If
    no match is found, allocate the domain as\n        described below, and go to
    step 5. The default domain to be\n        used is the specification of the local
    gateway.   A gateway\n        may use other domains according to private mapping
    tables or\n        heuristics.   For example, it may choose a domain which it\n
    \       knows to provide a free gateway service to the mapped\n        address.\n
    \       In cases where the address refers to an X.400 UA, it is\n        important
    that the generated domain will correctly route to\n        a gateway.  In general,
    this is achieved by carefully co-\n        ordinating RFC 822 routing with the
    definition of the\n        MCGAMs, as there is no easy way for the gateway to
    make this\n        check.  One rule that shall be used is that domains with\n
    \       only one component will not route to a gateway.  If the\n        generated
    domain does not route correctly, the address is\n        treated as if no match
    is found.\n        The gateway may also make use of a mapping equivalent to the\n
    \       MCGAM mapping to determine the domain to use.  This mapping\n        is
    done from the OR Address hierarchy.   This is not a\n        global mapping, but
    is a routing style mapping from the OR\n        Address space, to enable a best
    choice domain to be\n        inserted.   This mapping is supported by the three
    MCGAM\n        lookup mechanisms.\n   4.   The mapping identified  in 3) gives
    a domain, and an OR\n        address prefix.  Follow the hierarchy: C, ADMD, PRMD,
    O, OU.\n        For each successive component below the OR address prefix, which\n
    \       conforms to the syntax EBNF.domain-syntax (as defined in 4.3.1),\n        allocate
    the next subdomain.  At least one attribute of the\n        X.400 address shall
    not be mapped onto subdomain, as 822.local-\n        part cannot be null.  If
    there are omitted attributes in the OR\n        address prefix, these will have
    correctly and uniquely mapped to\n        a domain component.   Where there is
    an attribute omitted below\n        the prefix, all attributes remaining in the
    OR address shall be\n        encoded on the LHS.  This is to ensure a reversible
    mapping. For\n        example, if there is an address /S=XX/O=YY/ADMD=A/C=NN/
    and a\n        mapping for /ADMD=A/C=NN/ is used, then /S=XX/O=YY/ is encoded\n
    \       on the LHS.\n   5.   If the address contains any attribute not used in
    mnemonic\n        form, then all of the attributes in the address shall be encoded\n
    \       on the LHS in EBNF.std-or-address syntax, as described below.\n        For
    addresses of mnemonic form, if the remaining components are\n        personal-name
    components, conforming to the restrictions of\n        4.2.1, then EBNF.encoded-pn
    is derived to form 822.local-part.\n        In other cases the remaining components
    are simply encoded as\n        822.local-part using the EBNF.std-or-address syntax.
    \ If\n        necessary, the 822.quoted-string encoding is used.  The\n        following
    are examples of legal quoting: \"a b\".c@x; \"a b.c\"@x.\n        Either form
    may be generated.  Generation of the latter style is\n        strongly recommended.\n
    \  Four examples are given.\n   Example 1: (Address with missing X.400 elements
    and no specific\n   mapping rule for \"o=sales; a=Master400; C=it\", where a mapping
    exists\n   for a=master400; C=it;)\n   S=Support; O=sales;  A=Master400; C=it;\n
    \      maps to\n   /S=Support/o=sales/@Master400.it\n   Example 2: (Address with
    illegal characters in RFC822 generated\n   domain if default hierarchical translation
    (specific mapping rule is\n   existing for c=fr; a=atlas; p=autoroutes) is used)\n
    \  S=renseignements; O=Region Parisienne; P=autoroutes; A=atlas; C=fr;\n       maps
    to\n   \"/S=renseignements/o=Region Parisienne/\"@autoroutes.fr\n   Example 3:
    \ (Address containing elements not mappable into RFC822\n   local part)\n   S=Rossi;
    DD.cap=20100; DD.ph1=Via Larga 11; DDA.city=Milano;\n   A=PtPostel; C=it;\n       maps
    to\n   \"/DD.cap=20100/DD.ph1=Via Larga\n   11/DD.city=Milano/S=Rossi/\"@ptpostel.it\n
    \  Example 4:   (Address with an entry for A=ATT; C=us; into the domain\n   of
    Preferred Gateway table, pointing to attmail.com)\n   G=Andy; S=Wharol; O=MMNY;
    A=ATT; C=us;\n      maps to\n   /G=Andy/S=Wharol/O=MMNY@attmail.com\n"
  title: 4.3.5.  X.400 -> RFC 822 Basic Address Mapping
- contents:
  - "4.4.  Repeated Mappings\n   There are two types of repeated mapping:\n   1.   A
    recursive mapping, where the repeat is within one gateway\n   2    A source route,
    where the repetition occurs across multiple\n        gateways\n"
  title: 4.4.  Repeated Mappings
- contents:
  - "4.4.1.  Recursive Mappings\n   It is possible to supply an address which is recursive
    at a single\n   gateway.  For example:\n              C          = \"XX\"\n              ADMD
    \      = \"YY\"\n              O          = \"ZZ\"\n              \"RFC-822\"
    \ = \"Smith(a)ZZ.YY.XX\"\n   This is mapped first to an RFC 822 address, and then
    back to the\n   X.400 address:\n              C          = \"XX\"\n              ADMD
    \      = \"YY\"\n              O          = \"ZZ\"\n              Surname    =
    \"Smith\"\n   In some situations this type of recursion may be frequent.  It is\n
    \  important where this occurs, that no unnecessary protocol conversion\n   occurs.
    This will minimise loss of service.\n"
  title: 4.4.1.  Recursive Mappings
- contents:
  - "4.4.2.  Source Routes\n   The mappings defined are symmetrical and reversible
    across a single\n   gateway.  The symmetry is particularly useful in cases of
    (mail\n   exploder type) distribution list expansion.  For example, an X.400\n
    \  user sends to a list on an RFC 822 system which he belongs to.  The\n   received
    message will have the originator and any 3rd party X.400 OR\n   Addresses in correct
    format (rather than doubly encoded).  In cases\n   (X.400 or RFC 822) where there
    is common agreement on gateway\n   identification, then this will apply to multiple
    gateways.\n   When a message traverses multiple gateways, the mapping will always\n
    \  be reversible, in that a reply can be generated which will correctly\n   reverse
    the path.  In many cases, the mapping will also be\n   symmetrical, which will
    appear clean to the end user.  For example,\n   if countries \"AB\" and \"XY\"
    have RFC 822 networks, but are\n   interconnected by X.400, the following may
    happen:  The originator\n   specifies:\n          Joe.Soap@Widget.PTT.XY\n   This
    is routed to a gateway, which generates:\n              C               = \"XY\"\n
    \             ADMD            = \"PTT\"\n              PRMD            = \"Griddle
    MHS Providers\"\n              Organization    = \"Widget Corporation\"\n              Surname
    \        = \"Soap\"\n              Given Name      = \"Joe\"\n   This is then
    routed to another gateway where the mapping is reversed\n   to give:\n          Joe.Soap@Widget.PTT.XY\n
    \  Here, use of the gateway is transparent.\n   Mappings will only be symmetrical
    where mapping equivalences are\n   defined. In other cases, the reversibility
    is more important, due to\n   the (far too frequent) cases where RFC 822 and X.400
    services are\n   partitioned.\n   The syntax may be used to source route.  THIS
    IS STRONGLY\n   DISCOURAGED.  For example:\n      X.400 -> RFC 822  -> X.400\n
    \     C             = \"UK\"\n      ADMD          = \"Gold 400\"\n      PRMD          =
    \"UK.AC\"\n      \"RFC-822\"     = \"/PN=Duval/DD.Title=Manager/(a)Inria.ATLAS.FR\"\n
    \  This will be sent to an arbitrary UK Academic Community gateway by\n   X.400.
    \ Then it will be sent by JNT Mail to another gateway\n   determined by the domain
    Inria.ATLAS.FR (FR.ATLAS.Inria).  This will\n   then derive the X.400 OR Address:\n
    \     C             = \"FR\"\n      ADMD          = \"ATLAS\"\n      PRMD          =
    \"Inria\"\n      PN.S          = \"Duval\"\n      \"Title\"       = \"Manager\"\n
    \  Similarly:\n   RFC 822 -> X.400 -> RFC 822\n   \"/RFC-822=jj(a)seismo.css.gov/PRMD=AC/ADMD=BT/C=GB/\"@monet.berkeley.edu\n
    \  This will be sent to monet.berkeley.edu by RFC 822, then to the\n   AC PRMD
    by X.400, and then to jj@seismo.css.gov by RFC 822.\n"
  title: 4.4.2.  Source Routes
- contents:
  - "4.5.  Directory Names\n   Directory Names are an optional part of OR Name, along
    with OR\n   Address.  The RFC 822 addresses are mapped onto the OR Address\n   component.
    As there is no functional mapping for the Directory Name\n   on the RFC 822 side,
    a textual mapping is used.  There is no\n   requirement for reversibility in terms
    of the goals of this\n   specification.  There may be some loss of functionality
    in terms of\n   third party recipients where only a directory name is given, but
    this\n   seems preferable to the significant extra complexity of adding a full\n
    \  mapping for Directory Names.\n   The Directory Name shall be represented within
    an RFC 822 comment\n   using the comaptible formats of RFC 1484 or RFC 1485.  It
    is\n   recommended that the directory string format of RFC 1485 is used\n   [24].
    \ The User Friendly Name form of RFC 1484 may be used [25].\n"
  title: 4.5.  Directory Names
- contents:
  - "4.6.  MTS Mappings\n   The basic mappings at the MTS level are:\n      1) SMTP
    originator ->\n                    MTS.PerMessageSubmissionFields.originator-name\n
    \        MTS.OtherMessageDeliveryFields.originator-name ->\n                    SMTP
    originator\n      2) SMTP recipient ->\n                    MTS.PerRecipientMessageSubmissionFields\n
    \        MTS.OtherMessageDeliveryFields.this-recipient-name ->\n                    SMTP
    recipient\n   SMTP recipients and return addresses are encoded as EBNF.822-address.\n
    \  The MTS Originator is always encoded as MTS.OriginatorName, which\n   maps
    onto MTS.ORAddressAndOptionalDirectoryName, which in turn maps\n   onto MTS.ORName.\n"
  title: 4.6.  MTS Mappings
- contents:
  - "4.6.1.  RFC 822 -> X.400 MTS Mappings\n   From the SMTP Originator, use the basic
    ORAddress mapping, to\n   generate MTS.PerMessageSubmissionFields.originator-name
    (MTS.ORName),\n   without a DirectoryName.\n   For recipients, the following settings
    are made for each component of\n   MTS.PerRecipientMessageSubmissionFields.\n
    \  recipient-name\n      This is derived from the SMTP recipient by the basic
    ORAddress\n      mapping.\n   originator-report-request\n      This may either
    be set to \"delivery-report\", or set according to\n      SMTP extensions as set
    out in Appendix A.\n   explicit-conversion\n      This optional component is omitted,
    as this service is not needed\n   extensions\n      The default value (no extensions)
    is used\n"
  title: 4.6.1.  RFC 822 -> X.400 MTS Mappings
- contents:
  - "4.6.2.  X.400 -> RFC 822 MTS Mappings\n   The basic functionality is to generate
    the SMTP originator and\n   recipients.  There is information present on the X.400
    side, which\n   cannot be mapped into analogous SMTP services.  For this reason,
    new\n   RFC 822 fields are added for the MTS Originator and Recipients.  The\n
    \  information discarded at the SMTP level will be present in these\n   fields.
    In some cases a (positive) delivery report will be generated.\n"
  title: 4.6.2.  X.400 -> RFC 822 MTS Mappings
- contents:
  - "4.6.2.1.  SMTP Mappings\n   Use the basic ORAddress mapping, to generate the
    SMTP originator\n   (return address) from MTS.OtherMessageDeliveryFields.originator-name\n
    \  (MTS.ORName).  If MTS.ORName.directory-name is present, it is\n   discarded.
    \ (Note that it will be presented to the user, as described\n   in 4.6.2.2).\n
    \  The mapping  uses the MTA level information, and maps each value of\n   MTA.PerRecipientMessageTransferFields.recipient-name,
    where the\n   responsibility bit is set, onto an SMTP recipient.\n      Note:The
    SMTP recipient is conceptually generated from\n      MTS.OtherMessageDeliveryFields.this-recipient-name.
    \ This is done\n      by taking MTS.OtherMessageDeliveryFields.this-recipient-name,
    and\n      generating an SMTP recipient according to the basic ORAddress\n      mapping,
    discarding MTS.ORName.directory-name if present.\n      However, if this model
    was followed exactly, there would be no\n      possibility to have multiple SMTP
    recipients on a single message.\n      This is unacceptable, and so layering is
    violated.\n"
  title: 4.6.2.1.  SMTP Mappings
- contents:
  - "4.6.2.2.  Generation of RFC 822 Headers\n   Not all per-recipient information
    can be passed at the SMTP level.\n   For this reason, two new RFC 822 headers
    are created, in order to\n   carry this information to the RFC 822 recipient.
    \ These fields are\n   \"X400-Originator:\"  and \"X400-Recipients:\".\n   The
    \"X400-Originator:\" field is set to the same value as the SMTP\n   originator.
    \ In addition, if\n   MTS.OtherMessageDeliveryFields.originator-name (MTS.ORName)
    contains\n   MTS.ORName.directory-name then this Directory Name shall be\n   represented
    in an 822.comment.\n   Recipient names, taken from each value of\n   MTS.OtherMessageDeliveryFields.this-recipient-name
    and\n   MTS.OtherMessageDeliveryFields.other-recipient-names are made\n   available
    to the RFC 822 user by use of the \"X400-Recipients:\" field.\n   By taking the
    recipients at the MTS level, disclosure of recipients\n   will be dealt with correctly.
    \ However, this conflicts with a desire\n   to optimise mail transfer.  There
    is no problem when disclosure of\n   recipients is allowed. Similarly, there is
    no problem if there is\n   only one RFC 822 recipient, as the \"X400-Recipients\"
    field is only\n   given one address.\n   There is a problem if there are multiple
    RFC 822 recipients, and\n   disclosure of recipients is prohibited.  In this case,
    discard the\n   per-recipient information.\n   If any MTS.ORName.directory-name
    is present, it shall be represented\n   in an 822.comment.\n   If MTS.OtherMessageDeliveryFields.orignally-intended-recipient-name\n
    \  is present, then there has been redirection,  or there has been\n   distribution
    list expansion.  Distribution list expansion is a per-\n   message option, and
    the information associated with this is\n   represented by the \"DL-Expansion-History:\"
    field described in Section\n   5.3.6.  Other information is represented in an
    822.comment associated\n   with MTS.OtherMessageDeliveryFields.this-recipient-name,
    The message\n   may be delivered to different RFC 822 recipients, and so several\n
    \  addresses in the \"X400-Recipients:\" field may have such comments.\n   The
    non-commented recipient is the RFC 822 recipient. The EBNF of the\n   comment
    is defined by redirect-comment.\n         redirect-comment  = redirect-first *(
    redirect-subsequent )\n         redirect-first = \"Originally To:\"  mailbox  \"Redirected
    on\"\n            date-time \"To:\"  redirection-reason\n         redirect-subsequent
    = mailbox  \"Redirected Again on\"\n            date-time \"To:\"  redirection-reason\n
    \        redirection-history-item = \"intended recipient\" mailbox\n            \"redirected
    to\"  redirection-reason\n            \"on\" date-time\n         redirection-reason
    =\n            \"Recipient Assigned Alternate Recipient\"\n            / \"Originator
    Requested Alternate Recipient\"\n            / \"Recipient MD Assigned Alternate
    Recipient\"\n            / \"Directory Look Up\"\n            / \"Alias\"\n   It
    is derived from\n   MTA.PerRecipientMessageTransferFields.extension.redirection-history.\n
    \  The values are taken from the X.400(92) Implementor's guide (Version\n   13,
    July 1995).   The first three values are in X.400(88).   The\n   fourth value
    is in X.400(92), but has the name \"recipient-directory-\n   substitution-alternate-recipient\".
    An example of this with two\n   redirects is:\n   X400-Recipients: postmaster@widget.com
    (Originally To:\n             sales-manager@sales.widget.com\n         Redirected
    on Thu, 30 May 91 14:39:40 +0100\n             To: Originator Requested Alternate
    Recipient\n             postmaster@sales.widget.com\n         Redirected Again
    on Thu, 30 May 91 14:41:20 +0100\n             To: Recipient MD Assigned Alternate
    Recipient)\n   In addition the following per-recipient services from\n   MTS.OtherMessageDeliveryFields.extensions
    are represented in comments\n   if they are used.  None of these services can
    be provided on RFC 822\n   networks, and so in general these will be informative
    strings\n   associated with other MTS recipients. In some cases, string values\n
    \  are defined.  For the remainder, the string value shall be chosen by\n   the
    implementor.   If the parameter has a default value, then no\n   comment shall
    be inserted when the parameter has that default value.\n   requested-delivery-method\n
    \  physical-forwarding-prohibited\n        \"(Physical Forwarding Prohibited)\".\n
    \  physical-forwarding-address-request\n        \"(Physical Forwarding Address
    Requested)\".\n   physical-delivery-modes\n   registered-mail-type\n   recipient-number-for-advice\n
    \  physical-rendition-attributes\n   physical-delivery-report-request\n       \"(Physical
    Delivery Report Requested)\".\n   proof-of-delivery-request\n       \"(Proof of
    Delivery Requested)\".\n"
  title: 4.6.2.2.  Generation of RFC 822 Headers
- contents:
  - "4.6.2.3.  Delivery Report Generation\n   If SMTP is used, the behaviour is specified
    in Appendix A.  In other\n   cases, if MTA.PerRecipientMessageTransferFields.per-recipient-\n
    \  indicators requires a positive delivery notification, this shall be\n   generated
    by the gateway.  Supplementary Information shall be set to\n   indicate that the
    report is gateway generated.  This information\n   shall include the name of the
    gateway generating the report.\n"
  title: 4.6.2.3.  Delivery Report Generation
- contents:
  - "4.6.3.  Message IDs (MTS)\n   A mapping from 822.msg-id to MTS.MTSIdentifier
    is defined.  The\n   reverse mapping is not needed, as MTS.MTSIdentifier is always
    mapped\n   onto new RFC 822 fields.  The value of MTS.MTSIdentifier.local-part\n
    \  will facilitate correlation of gateway errors.\n   To map from 822.msg-id,
    apply the standard mapping to 822.msg-id, in\n   order to generate an MTS.ORAddress.
    \ The Country, ADMD, and PRMD\n   components of this are used to generate MTS.MTSIdentifier.global-\n
    \  domain-identifier.  MTS.MTSIdentifier.local-identifier is set to the\n   822.msg-id,
    including the braces \"<\" and \">\".   If this string is\n   longer than MTS.ub-local-id-length
    (32), then it is truncated to this\n   length.\n   The reverse mapping is not
    used in this specification.  It would be\n   applicable where MTS.MTSIdentifier.local-identifier
    is of syntax\n   822.msg-id, and it algorithmically identifies MTS.MTSIdentifier.\n"
  title: 4.6.3.  Message IDs (MTS)
- contents:
  - "4.7.  IPMS Mappings\n   All RFC 822 addresses are assumed to use the 822.mailbox
    syntax.\n   This includes all 822.comments associated with the lexical tokens
    of\n   the 822.mailbox.  In the IPMS OR Names are encoded as MTS.ORName.\n   This
    is used within the  IPMS.ORDescriptor, IPMS.RecipientSpecifier,\n   and IPMS.IPMIdentifier.
    \ An asymmetrical mapping is defined between\n   these components.\n"
  title: 4.7.  IPMS Mappings
- contents:
  - "4.7.1.  RFC 822 -> X.400\n   To derive IPMS.ORDescriptor from an RFC 822 address.\n
    \  1.   Take the address, and extract an EBNF.822-address.  Any\n        source
    routing shall be removed.  This can be derived trivially\n        from either
    the 822.addr-spec or 822.route-addr syntax.  This is\n        mapped to MTS.ORName
    as described above, and used as\n        IMPS.ORDescriptor.formal-name.\n   2.
    \  A string shall be built consisting of (if present):\n   -         The 822.phrase
    component if the 822.address is an\n             822.phrase 822.route-addr construct.\n
    \  -         Any 822.comments, in order, retaining the parentheses.\n         This
    string is then encoded into T.61 using a human oriented\n         mapping (as
    described in Section 3.5).  If the string is not\n         null, it is assigned
    to IPMS.ORDescriptor.free-form-name.\n"
  - "3.   IPMS.ORDescriptor.telephone-number is omitted.\n   If IPMS.ORDescriptor
    is being used in IPMS.RecipientSpecifier,\n   IPMS.RecipientSpecifier.reply-request
    and\n   IPMS.RecipientSpecifier.notification-requests are set to default\n   values
    (false and none).\n   If the 822.group construct is present, any included 822.mailbox
    is\n   encoded as above to generate a separate IPMS.ORDescriptor.  The\n   822.group
    is  mapped to T.61 (as described in Section 3.5), and a\n   IPMS.ORDescriptor
    with only an free-form-name component built from\n   it.\n"
  title: 4.7.1.  RFC 822 -> X.400
- contents:
  - "4.7.2.  X.400 -> RFC 822\n   Mapping from IPMS.ORDescriptor to RFC 822 address.
    \ In the basic\n   case, where IPMS.ORDescriptor.formal-name is present, proceed
    as\n   follows.\n   1.   Encode IPMS.ORDescriptor.formal-name (MTS.ORName) as\n
    \       EBNF.822-address.\n   2a.  If IPMS.ORDescriptor.free-form-name is present,
    convert it\n        to ASCII or T.61 (Section 3.5), and use this as the 822.phrase\n
    \       component of 822.mailbox using the 822.phrase 822.route-addr\n        construct.\n
    \  2b.  If IPMS.ORDescriptor.free-form-name is absent.  If\n        EBNF.822-address
    is parsed as 822.addr-spec use this as the\n        encoding of 822.mailbox.  If
    EBNF.822-address is parsed as\n        822.route 822.addr-spec, then an 822.phrase
    taken from\n        822.local-part is added.\n   3    If IPMS.ORDescriptor.telephone-number
    is present, this is\n        placed in an 822.comment, with the string \"Tel \".
    \ The normal\n        international form of number is used.  For example:\n         (Tel
    +44-181-333-7777)\n   4.   If IPMS.ORDescriptor.formal-name.directory-name is
    present,\n        then a text representation is placed in a trailing 822.comment.\n
    \  5.   If IPMS.RecipientSpecifier.report-request has any non-\n        default
    values, then an 822.comment \"(Receipt Notification\n        Requested)\", and/or
    \"(Non Receipt Notification Requested)\",\n        and/or \"(IPM Return Requested)\"
    may be appended to the address.\n        \"(Receipt Notification Requested)\"
    may be used to infer \"(Non\n        Receipt Notification Requested)\".  The effort
    of correlating P1\n        and P2 information is too great to justify the gateway
    sending\n        Receipt Notifications.\n        In RFC 1327, inclusion of these
    comments was mandatory.\n        Experience has shown that the clutter and confusion
    caused to\n        RFC 822 users does not justify the information conveyed.\n
    \       Implementors are recommended to not include these comments.\n        Unless
    an application is found where retention of these comments\n        is desirable,
    they will be dropped from the next version.\n   6.   If IPMS.RecipientSpecifier.reply-request
    is True, an\n        822.comment \"(Reply requested)\"  is appended to the address.\n
    \  If IPMS.ORDescriptor.formal-name is absent, IPMS.ORDescriptor.free-\n   form-name
    is converted to ASCII (see section 3.5), and used as\n   822.phrase within the
    RFC 822 822.group syntax.  For example:\n         Free Form Name \":\" \";\"\n
    \  Steps 3-6 are then followed.\n"
  title: 4.7.2.  X.400 -> RFC 822
- contents:
  - "4.7.3.  IP Message IDs\n   There is a need to map both ways between 822.msg-id
    and\n   IPMS.IPMIdentifier.  This allows for X.400 Receipt Notifications,\n   Replies,
    and Cross References to reference an RFC 822 Message ID,\n   which is preferable
    to a gateway generated ID.  A reversible and\n   symmetrical mapping is defined.
    \ This provides fully reversible\n   mappings when messages pass multiple times
    across the X.400/RFC 822\n   boundary.\n   An important issue with messages identifiers
    is mapping to the exact\n   form, as many systems use these ids as uninterpreted
    keys.  The use\n   of table driven mappings is not always symmetrical, particularly
    in\n   the light of alternative domain names, and alternative management\n   domains.
    \ For this reason, a purely algorithmic mapping is used.  A\n   mapping which
    is simpler than that for addresses can be used for two\n   reasons:\n   -    There
    is no major requirement to make message IDs \"natural\"\n   -    There is no issue
    about being able to reply to message IDs.\n        (For addresses, creating a
    return path which works is more\n        important than being symmetrical).\n
    \  The mapping works by defining a way in which message IDs generated on\n   one
    side of the gateway can be represented on the other side in a\n   systematic manner.
    \ The mapping is defined so that the possibility of\n   clashes is low enough
    to be treated as impossible.\n"
  title: 4.7.3.  IP Message IDs
- contents:
  - "4.7.3.1.  822.msg-id represented in X.400\n   IPMS.IPMIdentifier.user is omitted.
    \ The IPMS.IPMIdentifier.user-\n   relative-identifier is set to a printable string
    encoding of the\n   822.msg-id with the angle braces (\"<\" and \">\") removed.
    \ The upper\n   bound on this component is 64.  The options for handling this
    are\n   discussed in Section 5.1.3.\n"
  title: 4.7.3.1.  822.msg-id represented in X.400
- contents:
  - "4.7.3.2.  IPMS.IPMIdentifier represented in RFC 822\n   The 822.domain of 822.msg-id
    is set to the value \"MHS\". The\n   822.local-part of 822.msg-id is constructed
    by building a string of\n   syntax EBNF.id-loc from IPMS.IPMIdentifier.\n          id-loc
    ::= [ printablestring ] \"*\"  [ std-or-address ]\n   EBNF.printablestring is
    the IPMS.IPMIdentifier.user-relative-\n   identifier, and EBNF.std-or-address
    being an encoding of the\n   IPMS.IPMIdentifier.user derived according to this
    specification.\n   822.local-part is derived from EBNF.id-loc, if necessary using
    the\n   822.quoted-string encoding.  For example:\n         <\"147*/S=Dietrich/O=Siemens/ADMD=DBP/C=DE/\"@MHS>\n"
  title: 4.7.3.2.  IPMS.IPMIdentifier represented in RFC 822
- contents:
  - "4.7.3.3.  822.msg-id -> IPMS.IPMIdentifier\n   If the 822.local-part can be parsed
    as:\n         [ printablestring ] \"*\"  [ std-or-address ]\n   and the 822.domain
    is \"MHS\", then this ID was X.400 generated.  If\n   EBNF.printablestring is
    present, the value is assigned to\n   IPMS.IPMIdentifier.user-relative-identifier.
    \ If EBNF.std-or-address\n   is present, the OR Address components derived from
    it are used to set\n   IPMS.IPMIdentifier.user.\n   Otherwise, this is an RFC
    822 generated ID.  In this case, set\n   IPMS.IPMIdentifier.user-relative-identifier
    to a printable string\n   encoding of the 822.msg-id without the angle braces
    and omit\n   IPMS.IPMID.user.\n"
  title: 4.7.3.3.  822.msg-id -> IPMS.IPMIdentifier
- contents:
  - "4.7.3.4.  IPMS.IPMIdentifier -> 822.msg-id\n   If IPMS.IPMIdentifier.user is
    absent, and IPMS.IPMIdentifier.user-\n   relative-identifier mapped to ASCII and
    angle braces added parses as\n   822.msg-id, then this is an RFC 822 generated
    ID.\n   Otherwise, the ID is X.400 generated.  Use the\n   IPMS.IPMIdentifier.user
    to generate an EBNF.std-or-address form\n   string.  Build the 822.local-part
    of the 822.msg-id with the syntax:\n         [ printablestring ] \"*\"  [ std-or-address
    ]\n   The printablestring is taken from IPMS.IPMIdentifier.user-relative-\n   identifier.
    \ Use 822.quoted-string if necessary.  The 822.msg-id is\n   generated with this
    822.local-part, and \"MHS\" as the 822.domain.\n"
  title: 4.7.3.4.  IPMS.IPMIdentifier -> 822.msg-id
- contents:
  - "4.7.3.5.  Phrase form\n   In \"In-Reply-To:\" and \"References:\", the encoding
    822.phrase may be\n   used as an alternative to 822.msg-id.  To map from 822.phrase
    to\n   IPMS.IPMIdentifier, assign IPMS.IPMIdentifier.user-relative-\n   identifier
    to the phrase.  When mapping from IPMS.IPMIdentifier for\n   \"In-Reply-To:\"
    and \"References:\", if IPMS.IPMIdentifier.user is\n   absent and IPMS.IPMIdentifier.user-relative-identifier
    does not parse\n   as 822.msg-id, generate an 822.phrase rather than adding the
    domain\n   MHS.\n"
  title: 4.7.3.5.  Phrase form
- contents:
  - "4.7.3.6.  RFC 987 backwards compatibility\n   The mapping defined here is different
    to that used in RFC 987, as the\n   RFC 987 mapping lead to changed message IDs
    in many cases.  Fixing\n   the problems is preferable to retaining backwards compatibility.
    \ An\n   implementation of this standard may recognise message IDs generated\n
    \  by RFC 987.  This is not recommended.\n   RFC 987 generated encodings may be
    recognised as follows.  When\n   mapping from X.400 to RFC 822, if the IPMS.IPMIdentifier.user-\n
    \  relative-identifier is \"RFC-822\" the id is RFC 987 generated. When\n   mapping
    from RFC 822 to X.400, if the 822.domain is not \"MHS\", and\n   the 822.local-part
    can be parsed as\n         [ printablestring ] \"*\"  [ std-or-address ]\n   then
    it is RFC 987 generated.  In each of these cases, it is\n   recommended to follow
    the RFC 987 rules.\n"
  title: 4.7.3.6.  RFC 987 backwards compatibility
- contents:
  - "Chapter 5 - Detailed Mappings\n   This chapter specifies  detailed mappings for
    the functions outlined\n   in Chapters 1 and 2.  It makes extensive use of the
    notations and\n   mappings defined in Chapters 3 and 4.\n"
  title: Chapter 5 - Detailed Mappings
- contents:
  - "5.1.  RFC 822 -> X.400: Detailed Mappings\n   The mapping of RFC 822/MIME messages
    to X.400 InterPersonal Messages\n   is described in Sections 5.1.1 to 5.1.7.   Mapping
    of NOTARY format\n   delivery status notifications, which are all messages of
    type\n   multipart/report and subtype delivery-status-notifications to X.400\n
    \  delivery reports is covered in Section 5.1.8.\n"
  title: '5.1.  RFC 822 -> X.400: Detailed Mappings'
- contents:
  - "5.1.1.  Basic Approach\n   A single IP Message is generated from an RFC 822 message.
    \ The RFC\n   822 headers are used to generate the IPMS.Heading.\n   Some RFC
    822 fields cannot be mapped onto a standard IPM Heading\n   field, and so an extended
    field is defined in Section 5.1.2.  This is\n   then used for fields which cannot
    be mapped onto existing services.\n   The message is submitted to the MTS, and
    the services required can be\n   defined by specifying MTS.MessageSubmissionEnvelope.
    \ A few\n   parameters of the MTA Abstract service are also specified, which are\n
    \  not in principle available to the MTS User.  Use of these services\n   allows
    RFC 822 MTA level parameters to be carried in the analogous\n   X.400 service
    elements.  The advantages of this mapping far outweigh\n   the layering violation.\n"
  title: 5.1.1.  Basic Approach
- contents:
  - "5.1.2.  X.400 Extension Field\n   An IPMS Extension is defined:\n   rfc-822-field
    HEADING-EXTENSION\n              VALUE RFC822FieldList\n              ::= id-rfc-822-field-list\n
    \  RFC822FieldList ::= SEQUENCE OF RFC822Field\n   RFC822Field ::= IA5String\n
    \  The Object Identifier id-rfc-822-field-list is defined in Appendix D.\n   To
    encode any RFC 822 Header using this extension, an RFC822Field\n   element is
    built using the 822.field omitting the trailing CRLF\n   (e.g., \"Fruit-Of-The-Day:
    Kiwi Fruit\"). All fields shall be unfolded.\n   There shall be no space before
    the \":\".  The reverse mapping builds\n   the RFC 822 field in a straightforward
    manner.  This RFC822Field is\n   appended to the RFC822FieldList, which is added
    to the IPM Heading as\n   an extension field.\n"
  title: 5.1.2.  X.400 Extension Field
- contents:
  - "5.1.3.  Generating the IPM\n   The IPM (IPMS Service Request) is generated according
    to the rules of\n   this section. The IPMS.IPM.body is generated from the RFC
    822 message\n   body in the manner described in Section 5.1.5.\n   If no specific
    1988 features are used, the IPM generated is encoded\n   as content type 2.  Otherwise,
    it is encoded as content type 22.  The\n   latter will always be the case if extension
    heading fields are\n   generated.\n   When generating the IPM, the issue of upper
    bounds are handled as\n   follows. Truncate fields to the upper bounds specified
    in X.400.\n   This will prevent problems with UAs which enforce upper bounds,
    but\n   will sometimes discard useful information.  This approach will cause\n
    \  more problems for some fields than others (e.g., truncating an OR\n   Address
    component that would be used to route a reply would be a more\n   severe problem
    than truncating a Free Form Name).  If the Free Form\n   name is truncated, it
    shall be done so that it does not break RFC 822\n   comments and RFC 1522 encoding.\n
    \  Note:This approach removes a choice of options given in RFC 1327,\n        based
    on operational experience.\n   The rest of this section concerns IPMS.IPM.heading
    (IPMS.Heading).\n   The only mandatory component of IPMS.Heading is the\n   IPMS.Heading.this-IPM
    (IPMS.IPMIdentifier).  A default is generated\n   by the gateway.  With the exception
    of \"Received:\", the values of\n   multiple fields are merged (e.g., If there
    are two \"To:\" fields, then\n   the mailboxes of both are merged to generate
    a single list which is\n   used in the IPMS.Heading.primary-recipients.  Information
    shall be\n   generated from the standard RFC 822 Headers as follows:\n   Date:\n
    \       Ignore (Handled at MTS level)\n   Received:\n        Ignore (Handled at
    MTA level)\n   Message-Id:\n        Mapped to IPMS.Heading.this-IPM.  For these,
    and all other\n        fields containing 822.msg-id the mappings of Chapter 4
    are used\n        for each 822.msg-id.\n   From:\n        If Sender: is present,
    this is mapped to\n        IPMS.Heading.authorizing-users.  If not, it is mapped
    to\n        IPMS.Heading.originator.  For this, and other components\n        containing
    addresses, the mappings of Chapter 4 are used for\n        each address.\n   Sender:\n
    \       Mapped to IPMS.Heading.originator.  Because X.400 does not have\n        the
    same From/Sender distinction as RFC 822, this mapping is not\n        always natural
    and may lead to unexpected results in some cases.\n   Reply-To:\n        Mapped
    to IPMS.Heading.reply-recipients.\n   To:  Mapped to IPMS.Heading.primary-recipients\n
    \  Cc:  Mapped to IPMS.Heading.copy-recipients.\n   Bcc: Mapped to IPMS.Heading.blind-copy-recipients
    if there is at\n        least one BCC: recipient.  If there are no recipients
    in this\n        field, it shall either be mapped to a zero length sequence or\n
    \       mapped to a single recipient that has a free from name \"BCC\" and\n        no
    other addressing information.  This alternate treatment is\n        allowed because
    some X.400 systems cannot handle a zero lenght\n        sequence of addresses.\n
    \  In-Reply-To:\n        If there is one value, it is mapped to IPMS.Heading.replied-to-\n
    \       IPM, using the 822.phrase or 822.msg-id mapping as appropriate.\n        If
    there are multiple values, this cannot be done as the X.400\n        heading is
    single valued. In this case no IPMS.Heading.replied-\n        to-IPM is generated
    and the values are mapped to\n        IPMS.Heading.related-IPMs, along with any
    values from a\n        \"References:\" field.\n   References:\n        Mapped
    to IPMS.Heading.related-IPMs.\n   Keywords:\n        Mapped onto a heading extension.\n
    \  Subject:\n        Mapped to IPMS.Heading.subject.  The field-body uses the
    human\n        oriented mapping referenced in Section 3.3.4.\n   Comments:\n        Mapped
    onto a heading extension.\n        This is a change from 1327, which specified
    to generate an\n        IPMS.BodyPart of type IPMS.IA5TextBodyPart with\n        IPMS.IA5TextBodyPart.parameters.repertoire
    set to the default\n        (ia5), containing the value of the fields, preceded
    by the\n        string \"Comments: \" and that this body part shall precede the\n
    \       other one. Experience has shown that this complexity is not\n        justified.
    \ This text is retained to facilitate backwards\n        compatibility.\n   Encrypted:\n
    \       Mapped onto a heading extension.\n   Resent-*\n        Mapped onto a heading
    extension.\n        Note that it would be possible to use a ForwardedIPMessage
    for\n        these fields, but the semantics are (arguably) slightly\n        different,
    and it is probably not worth the effort.\n   Content-Language:\n        This field
    is defined in RFC 1766 [7].  Map the first two\n        characters of each value
    given onto the IPM Languages extension.\n        If any comments or values longer
    than two characters occur, a\n        header extension shall also be generated.\n
    \  Other Fields\n        In particular X-* fields, and \"illegal\" fields in common
    usage\n        (e.g., \"Fruit-of-the-day:\") are mapped onto a heading extension,\n
    \       unless covered by another section or appendix of this\n        specification.
    \ The same treatment is applied to RFC 822 fields\n        where the content of
    the field does not conform to RFC 822\n        (e.g., a Date: field with unparseable
    syntax).\n   The mapping of the following headings is defined in RFC 2157.\n   MIME-Version:
    5\n   Content-Transfer-Encoding:\n   Content-Type\n   Content-ID\n   Content-Description\n"
  title: 5.1.3.  Generating the IPM
- contents:
  - "5.1.4.  Generating the IPM Body\n   Generation of the IPM Body is defined in
    RFC 2157.\n"
  title: 5.1.4.  Generating the IPM Body
- contents:
  - "5.1.5.  Mappings to the MTS Abstract Service\n   The MTS.MessageSubmissionEnvelope
    comprises\n   MTS.PerMessageSubmissionFields, and\n   MTS.PerRecipientMessageSubmissionFields.
    \ The mandatory parameters\n   are defaulted as follows.\n   MTS.PerMessageSubmissionFields.originator-name\n
    \     This is always generated from SMTP, as defined in Chapter 4.\n   MTS.PerMessageSubmissionFields.content-type\n
    \     Set to the value implied by the encoding of the IPM (2 or 22).\n   MTS.PerRecipientMessageSubmissionFields.recipient-name\n
    \     These will always be supplied from SMTP, as defined in Chapter 4.\n   Optional
    components are omitted, and default components defaulted.\n   This means that
    disclosure of recipients is prohibited and conversion\n   is allowed.  There are
    two exceptions to the defaulting. For\n   MTS.PerMessageSubmissionFields.per-message-indicators,
    the following\n   settings are made:\n   -    Alternate recipient is allowed,
    as it seems desirable to\n        maximise the opportunity for (reliable) delivery.\n
    \  If SMTP is used, Appendix A shall be followed in setting these\n   parameters.\n
    \  The trace is set to indicate conversion (described below) and the\n   encoded
    information types in the trace is derived from the message\n   generated by the
    gateway, and shall reflect all body parts (including\n   those in enclosed messages).
    \ In addition it shall include the\n   Encoded Information Type \"eit-mixer\",
    which is defined in Appendix D.\n   The presence of the EIT will indicate to the
    X.400 recipient that a\n   MIXER conversion has occurred.\n   MTS.PerMessageSubmissionFields.original-encoded-information-types\n
    \  will include all of the values used in the trace, unless specified\n   otherwise
    in RFC 2157.\n   This type of conversion will prevent the normal loop detection
    from\n   working in certain circumstances, and introduces the possiblity of\n
    \  gateway loops.  MIXER gateways shall therefore count the number of\n   MIXER
    conversions made.  If this count exceeds five in one direction,\n   the message
    shall be treated as if a loop has been detected.\n   The MTS.PerMessageSubmissionFields.content-correlator
    is encoded as\n   IA5String, and contains the Subject:, Message-ID:, Date:,  and
    To:\n   fields (if present) in this order.  This includes the strings\n   \"Subject:\",
    \"Date:\", \"To:\", \"Message-ID:\", and appropriate folding to\n   make the field
    appear readable.  This shall be truncated to MTS.ub-\n   content-correlator-length
    (512) characters.  In addition, if there is\n   a \"Subject:\" field, the MTS.PerMessageSubmissionFields.content-\n
    \  identifier, is set to a printable string representation of the\n   contents
    of it.   If the length of this string is greater than\n   MTS.ub-content-id-length
    (16), it shall be truncated to 13 characters\n   and the string \"...\" appended.
    Both are used, due to the much larger\n   upper bound of the content correlator,
    and that the content id is\n   available in X.400(1984).\n"
  title: 5.1.5.  Mappings to the MTS Abstract Service
- contents:
  - "5.1.6.  Mappings to the MTA Abstract Service\n   There is a need to map directly
    onto some aspects of the MTA Abstract\n   service, for the following reasons:\n
    \  -    So the  MTS Message Identifier can be generated from the RFC\n        822
    Message-ID:.\n   -    So that the submission date can be generated from the\n
    \       822.Date.\n   -    To prevent loss of trace information\n   -    To prevent
    RFC 822/X.400 looping caused by distribution\n        lists or redirects\n   The
    following mappings are defined.\n   Message-Id:\n      If this is present and
    no Resent: fields are present, the\n      MTA.PerMessageTransferFields.message-identifier
    may be generated\n      from it, using the mappings described in Chapter 4.\n
    \     This mapping arguably generates messages which do not conform to\n      US
    GOSIP (1984 version only), which states:\n      6.7.e MPDU Identifier Validation\n
    \     (1) Validation of the GlobalDomainIdentifier component of the MPDU\n      Identifier
    is performed on reception of a message (i.e. the result\n      of a TRANSFER.Indication).\n
    \     (2) The country name should be known to the validating domain, and\n      depending
    on the country name, validation of the\n      ADMD name may also be possible.\n
    \     (3) Additional validation of the GlobalDomainIdentifier is\n      performed
    against the corresponding first entry in the\n      TraceInformation. If inconsistencies
    are found during the\n      comparison, a non-delivery notice with the above defined
    reason\n      and diagnostic code is generated.\n      (4) A request will be generated
    to the CCITT for a more meaningful\n      diagnostic code (such as \"InconsistentMPUTIdentifier\").\n
    \  This applies to ADMDs only, and is specified in the 1984 version and\n   not
    the 1988 version. Conformance depends on the interpretation of\n   \"inconsistency\".
    \  The specification makes the most sensible choice,\n   and so is not being changed
    in the update from RFC 1327.\n   Date: (and Resent-Date:)\n      If one or more
    Resent-Date: fields is present, the most recent\n      Resent-Date: field shall
    be used instead of the Date: field in the\n      following description.\n      The
    Date: field is used to set the first component of\n      MTA.PerMessageTransferFields.trace-information\n
    \     (MTA.TraceInformationElement).  The SMTP originator is mapped into\n      an
    MTS.ORAddress, and used to derive\n      MTA.TraceInformationElement.global-domain-identifier.
    \ The\n      optional components of MTA.TraceInformationElement.domain-\n      supplied-information
    are omitted, and the mandatory components are\n      set as follows:\n      MTA.DomainSuppliedInformation.arrival-time\n
    \        This is set to the date derived from Date:\n      MTA.DomainSuppliedInformation.routing-action\n
    \        Set to relayed.\n      The first element of MTA.PerMessageTransferFields.internal-trace-\n
    \     information is generated in an analogous manner, although this can\n      be
    dropped later in certain circumstances (see the procedures for\n      \"Received:\").
    \ The MTA.InternalTraceInformationElement.mta-name is\n      derived from the
    822.domain in the 822 MTS Originator address.\n   Received:\n      All RFC 822
    trace is used to derive\n      MTA.PerMessageTransferFields.trace-information
    and\n      MTA.PerMessageTransferFields.internal-trace-information.\n      Processing
    of Received: lines  follows processing of Date:, and is\n      done from the bottom
    to the top of the RFC 822 header (i.e., in\n      chronological order).  When
    other trace elements (in particular\n      X400-Received:)  are processed the
    relative ordering (top to\n      bottom of the header) shall be retained correctly.\n
    \     The initial element of MTA.PerMessageTransferFields.trace-\n      information
    shall be generated from Date: as described above,\n      unless the message has
    previously been in X.400, when it will be\n      derived from the X.400 trace
    information.\n      For each  Received: field, the following processing shall
    be done.\n      If the \"by\"  part of the received is present and there is an\n
    \     available MCGAM which can map this domain, use it to derive an\n      MTS.GlobalDomainIdentifier.
    \ Otherwise MTS.GlobalDomainIdentifier\n      is set from local information.  If
    this is different from the one\n      in the last element of MTA.PerMessageTransferFields.trace-\n
    \     information (MTA.TraceInformationElement.global-domain-identifier)\n      create
    a new MTA.TraceInformationElement, and optionally remove\n      MTA.PerMessageTransferFields.internal-trace-information.\n
    \     Requirements on trace stripping are discussed below.\n      Then add a new
    element (MTA.InternalTraceInformationElement) to\n      MTA.PerMessageTransferFields.internal-trace-information,
    creating\n      this if needed.  This shall be done, even if nter-MD trace is\n
    \     created.  The MTA.InternalTraceInformationElement.global-domain-\n      identifier
    is set to the value derived.  The\n      MTA.InternalTraceInformationElement.mta-supplied-information\n
    \     (MTA.MTASuppliedInformation) is set as follows:\n         MTA.MTASuppliedInformation.arrival-time\n
    \           Derived from the date of the Received: line\n         MTA.MTASuppliedInformation.routing-action\n
    \           Set to relayed\n      The MTA.InternalTraceInformationElement.mta-name
    is taken from the\n      \"by\" component of the \"Received:\" field, truncated
    to MTS.ub-mta-\n      name-length (32).  For example:\n         Received: from
    computer-science.nottingham.ac.uk by\n            vs6.Cs.Ucl.AC.UK via Janet with
    NIFTP  id aa03794;\n            28 Mar 89 16:38 GMT\n   Generates the string\n
    \        vs6.Cs.Ucl.AC.UK\n   The gateway shall add in a single element of trace
    information,\n   reflecting the gateway's local information and the time of\n
    \  conversion.  The MTA.InternalTraceInformationElement.mta-supplied-\n   information
    (MTA.MTASuppliedInformation) is set as follows:\n   MTA.DomainSuppliedInformation.arrival-time\n
    \     Set to the time of conversion\n   MTA.DomainSuppliedInformation.routing-action\n
    \     Set to relayed\n   MTA.AdditionalAcctions.converted-encoded-information-types
    Set to\n   correct set of EITs for the message that is generated by the gateway.\n
    \  This trace element will thus reflect gateway operation as a\n   conversion.\n
    \  This trace generation will often lead to generation of substantial\n   amounts
    of trace information, which does not reflect X.400 transfers.\n   Stripping of
    some of this trace may be necessary in some operational\n   environments.   This
    stripping shall be considered a function of the\n   associated X.400 MTA, and
    not of the MIXER gateway.\n"
  title: 5.1.6.  Mappings to the MTA Abstract Service
- contents:
  - "5.1.7.  Mapping New Fields\n   This specification defines a number of new fields
    for Reports,\n   Notifications and IP Messages. A gateway conforming to this\n
    \  specification shall  map all of these fields to X.400, except as\n   defined
    below.\n   The mapping of two  extended fields is particularly important, in\n
    \  order to prevent looping.  \"DL-Expansion-History:\" is mapped to\n   MTA.PerMessageTransferFields.extensions.dl-expansion-history
    X400-\n   Received: shall be mapped to MTA.PerMessageTransferFields.trace-\n   information
    and MTA.PerMessageTransferFields.internal-trace-\n   information.  In cases where
    X400-Received: is present, the usual\n   mapping of Date: to generate the first
    element of trace shall not be\n   done.   This is because the message has come
    from X.400, and so the\n   first element of trace can be taken from the first
    X400-Received:.\n   The following fields shall not be mapped, and shall be\n   -
    \   Discarded-X400-MTS-Extensions:\n   -    Message-Type:\n   -    Discarded-X400-IPMS-Extensions:\n
    \  -    X400-Content-Type:\n   -    X400-Originator:\n   -    X400-Recipients:\n
    \  -    X400-MTS-Identifier:  Mapping this field would be useful in\n        some
    circumstances, but very dangerous in others (e.g.,\n        following an internet
    list expansion).  Therefore it is not\n        mapped.\n"
  title: 5.1.7.  Mapping New Fields
- contents:
  - '5.1.8.  Mapping Delivery Status Notifications to X.400

    '
  title: 5.1.8.  Mapping Delivery Status Notifications to X.400
- contents:
  - "5.1.8.1.  Basic Model\n   Internet Mail delivery status notifications (DSN) are
    mapped to X.400\n   delivery reports.   With message mapping, information without
    a\n   mapping is carried by an IPM Extension.   This cannot be done for\n   delivery
    reports.   Two mechanisms are used for information where\n   there is not a direct
    mapping.\n   The first mechanism is to define extensions, which allow all of the\n
    \  DSN information to be carried in the delivery report.  This is not\n   completely
    satisfactory for two reasons:\n   1.   User defined extensions are supported by
    the ISO version of\n        the standard, but not the CCITT one.  Therefore,\n
    \       implementation support for these extensions will not be\n        universal.\n
    \  2.   X.400 User Agent implementations will not in general\n        recognise
    these extensions.   Therefore, although the\n        information will be present,
    it will often not be available\n        to the user.    This may be very problematic,
    as this\n        information may be critical to diagnosing the reason for a\n
    \       failure.\n   Therefore a second mechanism is defined.  This shall always
    be used\n   when the DSN contains non-delivery information, and may be used in\n
    \  other cases.  This mechanism is to map the whole DSN (as if it were\n   an
    ordinary multipart) into the return of content.  This will make\n   the DSN information
    available as a text body part in the outer\n   message, with the real returned
    content as an enclosed message.  This\n   mechanism will ensure that information
    is not lost at the gateway.\n"
  title: 5.1.8.1.  Basic Model
- contents:
  - "5.1.8.2.  DSN Extensions\n   Two X.400 MTS extensions are defined as follows:\n
    \  dsn-header-list EXTENSION\n      RFC822FieldList\n      ::= id-dsn-header-list\n
    \  dsn-field-list EXTENSION\n      RFC822FieldList\n      ::= id-dsn-field-list\n
    \  The Object Identifiers id-dsn-header-list and id-dsn-field-list are\n   defined
    in Appendix D.  Theses extensions are used in the same way as\n   the IPM extension
    rfc-822-field, described in Section 5.1.2.   These\n   extensions may only be
    used with ISO-10021, and not X.400 (which does\n   not allow user extensions at
    the MTS level).\n"
  title: 5.1.8.2.  DSN Extensions
- contents:
  - "5.1.8.3.  DSN to Delivery Report Mapping\n   Some DSNs are mapped to Delivery
    Reports and some to IPMs, according\n   to the value of the action field.   The
    mapping to an IPM is exactly\n   as for a normal IPM mapping.   The choice of
    IPM and Delivery report\n   is made for each reported recipient.   If this choice
    is different\n   for different reported recipients both a Delivery Report and
    an IPM\n   shall be generated.\n   Reports are not be submitted in the X.400 model,
    and so the report\n   submission is considered in terms of the MTA Abstract Service.
    \ An\n   MTA.Report is constructed. The MTA.ReportTransferEnvelope.report-\n   identifier
    is generated from the Message-Id of the DSN (if present)\n   and otherwise generated
    as the MTA would generate one for a submitted\n   message.\n   The DSN has an
    RFC 822 header.  Trace is mapped in the same manner as\n   for a message to MTA.ReportTransferEnvelope.trace-information.
    \ All\n   other headers are used to create a dsn-header-list extension, which\n
    \  is added to MTA.PerReportTransferFields.extensions.  The DSN will\n   have
    a single SMTP recipient.   This is mapped to the\n   MTA.ReportTransferEnvelope.report-destination-name.\n
    \  The DSN is then treated as a normal MIME message, and an X.400 IPM is\n   generated.
    \  This IPM is used as\n   MTA.PerReportTransferFields.returned-content, and its
    type is used to\n   set MTA.PerReportTransferFields.content-type.  The DSN body
    part is\n   mapped as if it was IA5 text/plain.\n   The mandatory MTA.PerReportTransferFields.subject-identifier
    shall be\n   generated from the DSN.per-message-field original-envelope-id, if\n
    \  this starts with the string \"X400-MTS-Identifier: \", and derived from\n   the
    rest of the field, which is encoded as EBNF.mts-msg-id.  In other\n   cases, this
    field shall be generated by the MIXER Gateway.\n   All other mappings are made
    from the DSN body part. A dsn-field-list\n   extension is created and added to\n
    \  MTA.ReportTransferFields.extensions.  This is referred to as the per\n   report
    extension list.  The DSN.per-message-fields are mapped as\n   follows:\n   original-envelope-id-field\n
    \  reporting-mta-field\n   dsn-gateway-field\n   received-from-mta-field\n   arrival-date-field\n
    \  extension-field\n   other\n      All of these fields are added to the per report
    extension list.\n      Currently there are no other mappings defined.\n   Each
    reported recipient is considered in turn, and a\n   MTA.PerRecipientReportTransferFields
    created for each.  The\n   parameters of this are defaulted as follows:\n   originally-specified-recipient-number\n
    \     In general, these are not available, and so are assigned\n      incrementally.\n
    \  last-trace-information\n      The arrival-time is generated from DSN.arrival-date
    if present,\n      and if not from the Date: of the DSN.  This is a strucutred
    field,\n      and the Report element contains the key information on the\n      recipient.
    \ For a DeliveryReport, the type-ofMTS-user is defaulted\n      to public and
    the message-deliery-time is set to the same as the\n      arrival-time.  For a
    NonDeliveryReport, the code mappings are\n      define in Section 5.1.8.4.\n   A
    dsn-field-list extension is created  and added to\n   MTA.PerRecipientTransferFields.extensions.
    \ This is referred to as\n   the per recipient extension list.  The DSN.per-recipient-fields
    are\n   mapped as follows\n   original-recipient-field\n      Mapped to MTA.PerRecipientReportTransferFields.originally-\n
    \     intended-recipient-name.\n   final-recipient-field\n      Mapped to MTA.PerRecipientReportTransferFields.actual-recipient-\n
    \     name.\n   action-field\n      If this is set to \"failed\", a non-delivery
    report is generated.\n      If this is set to \"delivered\" a delivery report
    is generated.\n      Bit one or two of MTA.PerRecipientTransferFields.per-recipient-\n
    \     indicators is set accordingly.  This also controls the encoding of\n      MTA.PerRecipientTransferFields.last-trace-information,
    and the\n      selection of the report type.\n      For other values of the action-field
    (\"delayed\", \"relayed\",\n      \"expanded\"), an IPM is generated.   This enables
    the status\n      information to be communicated to the X.400 user, without the\n
    \     confusion of multiple delivery reports.\n   status-field\n      This is
    added to the per report extension list.  For non-delivery,\n      it is also used
    to generate the reason and diagnostic codes\n      contained within MTA.PerRecipientReportTransferFields.last-trace.\n
    \     The mappings are defined below.\n   remote-mta-field\n   diagnostic-code-field\n
    \  last-attempt-date-field\n   will-retry-until-field\n   extension-field\n   other\n
    \     All of these fields are added to the per recipient extension list.\n"
  title: 5.1.8.3.  DSN to Delivery Report Mapping
- contents:
  - "5.1.8.4.  Status Value Mappings\n   Status values are mapped to X.400 reason
    and diagnostic codes as\n   follows.\n   If a status value is found that is not
    in this table, the gateway may\n   use the same mapping as for \"X.n.0\" (1/None
    or 0/None), or it may map\n   to another, configurable code.  Implementors are
    requested to forward\n   new codes to the mixer list for inclusion in future versions
    of this\n   standard.  So for instance. \"5.2.37\", currently undefined, would
    map\n   onto the same as \"5.2.0\", namely 1/None.\n"
  - 'DSN code  Meaning                               X400 code Meaning

    '
  - 'X.0.0     Other status                          1/None

    '
  - 'X.1.0     Other Address Status                  1/None

    '
  - 'X.1.1     Bad mailbox address                   1/0     Unrecognized

    '
  - 'X.1.2     Bad system address                    1/0     Unrecognized

    '
  - 'X.1.3     Bad mailbox address syntax            1/0     Unrecognized

    '
  - 'X.1.4     Mailbox address ambiguous             1/1

    '
  - 'X.1.5     Only used for positive reports, not applicable

    '
  - 'X.1.6     Destination mailbox has moved         1/43  New addr unknown

    '
  - 'X.1.7     Bad sender''s mailbox address syntax   1/11  Invalid arguments

    '
  - 'X.1.8     Bad sender''s system address           1/11  Invalid arguments

    '
  - 'X.2.0     Other or undefined mailbox status     1/None

    '
  - 'X.2.1     Mailbox disabled, not accepting       1/4   Recipient unavail

    '
  - 'X.2.2     Mailbox full                          1/4

    '
  - 'X.2.3     Message length exceeds admin limit.   1/7     Content too long

    '
  - 'X.2.4     Mailing list expansion problem        1/30  DL expansion fail

    '
  - 'X.3.0     Other or undefined system status      0/None

    '
  - 'X.3.1     System full                           1/2     MTS congestion

    '
  - 'X.3.2     System not accepting network messages 1/2     MTS congestion

    '
  - 'X.3.3     System not capable of selected feat   1/18    Unsupp crit func

    '
  - 'X.3.4     Message too big for system            1/7

    '
  - 'X.3.5     System incorrectly configured      1/None

    '
  - 'X.4.0     Other or undefined network or routing 0/None

    '
  - 'X.4.1     No answer from host                   0/None

    '
  - 'X.4.2     Bad connection                        0/None

    '
  - 'X.4.3     Routing server failure                6/None  Dir op unsucc.

    '
  - 'X.4.4.    Unable to route                       0/None

    '
  - 'X.4.5     Network congestion                    1/2     MTS congest.

    '
  - 'X.4.6     Routing loop detected                 1/3

    '
  - 'X.4.7     Delivery time expired                 1/5

    '
  - 'X.5.0     Other or undefined protocol status    1/None

    '
  - 'X.5.1     Invalid command                       1/14    Protocol viol.

    '
  - 'X.5.2     Syntax error                          1/14

    '
  - 'X.5.3     Too many recipients                   1/16

    '
  - 'X.5.4     Invalid command arguments             1/14

    '
  - 'X.5.5     Wrong protocol version                1/18    Unsupp.crit.func

    '
  - 'X.6.0     Other or undefined media error        2/None  Conv. not perf

    '
  - 'X.6.1     Media not supported                   1/6     EIT unsupp.

    '
  - 'X.6.2     Conversion required and prohibited    1/9

    '
  - 'X.6.3     Conversion required but not supported 2/8

    '
  - 'X.6.4     Conversion with loss performed        POSITIVE only

    '
  - 'X.6.5     Conversion failed                  2/47   Unable to downgrade

    '
  - 'X.7.0     Other or undefined security status    1/46

    '
  - 'X.7.1     Delivery not authorized, message ref  1/29  No DL submit perm

    '
  - 'X.7.2     Mailing list expansion prohibited     1/28

    '
  - 'X.7.3     Security conversion req but not poss  1/46  Secure mess. error

    '
  - 'X.7.4     Security features not supported       1/46

    '
  - 'X.7.5     Cryptographic failure                 1/46

    '
  - 'X.7.6     Cryptographic algorithm not supported 1/46

    '
  - 'X.7.7     Message integrity failure             1/46

    '
  title: 5.1.8.4.  Status Value Mappings
- contents:
  - "5.1.8.5.  DSNs that originated in X.400\n   The mapping of X.400 delivery reports
    to DSNs will in general provide\n   sufficient information to make a useful reverse
    mapping.  Messages\n   will often be mapped multiple times, commonly due to forwarding\n
    \  messages and to distribution lists.   Multiple mappings for delivery\n   reports
    will be a good deal less common.  For this reason, the\n   reverse mapping of
    the X.400 DSN extensions defined in MIXER is\n   optional.\n"
  title: 5.1.8.5.  DSNs that originated in X.400
- contents:
  - "5.2.  Return of Contents\n   RFC 1327 offered two approaches for return of content,
    as this\n   service is optional in X.400 and expected in RFC 822.   MIXER simply\n
    \  requires that a gateway requests the return of content service from\n   X.400.\n"
  title: 5.2.  Return of Contents
- contents:
  - '5.3.  X.400 -> RFC 822: Detailed Mappings

    '
  title: '5.3.  X.400 -> RFC 822: Detailed Mappings'
- contents:
  - "5.3.1.  Basic Approach\n   A single RFC 822 message is generated from the incoming
    IP Message,\n   Report, or IP Notification.   All IPMS.BodyParts are mapped onto
    a\n   single RFC 822 body.  Other services are mapped onto RFC 822 header\n   fields.
    \ Where there is no appropriate existing field, new fields are\n   defined for
    IPMS, MTS and MTA services.\n   The gateway mechanisms will correspond to MTS
    Delivery.  As with\n   submission, there are aspects where the MTA (transfer)
    services are\n   also used. In particular, there is an optimisation to allow for\n
    \  multiple SMTP recipients.\n"
  title: 5.3.1.  Basic Approach
- contents:
  - "5.3.2.  RFC 822 Settings\n   An RFC 822 Message has a number of mandatory fields
    in the RFC 822\n   Header.  Some SMTP services mandate specification of an SMTP\n
    \  Originator.  Even in cases where this is optional, it is usually\n   desirable
    to specify a value.  The following defaults are defined,\n   which shall be used
    if the mappings specified do not derive a value:\n   SMTP Originator\n      If
    this is not generated by the mapping (e.g., for a Delivery\n      Report), a value
    pointing at a gateway administrator shall be\n      assigned.\n   Date:\n      A
    value will always be generated\n   From:\n      If this is not generated by the
    mapping, it is assigned equal to\n      the SMTP Originator.  If this is gateway
    generated, an appropriate\n      822.phrase shall be added.\n   At least one recipient
    field\n      If no recipient fields are generated, a field \"To: list:;\", shall\n
    \     be added.\n   This will ensure minimal RFC 822 compliance.  When generating
    RFC 822\n   headers, folding may be used.  It is recommended to do this,\n   following
    the guidelines of RFC 822.\n"
  title: 5.3.2.  RFC 822 Settings
- contents:
  - '5.3.3.  Basic Mappings

    '
  title: 5.3.3.  Basic Mappings
- contents:
  - "5.3.3.1.  Encoded Information Types\n   This mapping from MTS.EncodedInformationTypes
    is needed in several\n   disconnected places.  EBNF is defined as follows:\n      encoded-info
    \   = 1#encoded-type\n      encoded-type    = built-in-eit / object-identifier\n
    \     built-in-eit    = \"Undefined\"         ; undefined (0)\n                      /
    \"Telex\"             ; tLX (1)\n                      / \"IA5-Text\"          ;
    iA5Text (2)\n                      / \"G3-Fax\"            ; g3Fax (3)\n                      /
    \"TIF0\"              ; tIF0 (4)\n                      / \"Teletex\"           ;
    tTX (5)\n                      / \"Videotex\"          ; videotex (6)\n                      /
    \"Voice\"             ; voice (7)\n                      / \"SFD\"               ;
    sFD (8)\n                      / \"TIF1\"              ; tIF1 (9)\n   MTS.EncodedInformationTypes
    is mapped onto EBNF.encoded-info.\n   MTS.EncodedInformationTypes.non-basic-parameters
    is ignored.  Built\n   in types are mapped onto fixed strings (compatible with
    X.400(1984)\n   and RFC 987), and other types are mapped onto EBNF.object-identifier.\n"
  title: 5.3.3.1.  Encoded Information Types
- contents:
  - "5.3.3.2.  Global Domain Identifier\n   The following simple EBNF is used to represent\n
    \  MTS.GlobalDomainIdentifier:\n      global-id = std-or-address\n   This is encoded
    using the std-or-address syntax, for the attributes\n   within the Global Domain
    Identifier.\n"
  title: 5.3.3.2.  Global Domain Identifier
- contents:
  - "5.3.4.  Mappings from the IP Message\n   Consider that an IPM has to be mapped
    to RFC 822.  The IPMS.IPM\n   comprises an IPMS.IPM.heading and IPMS.IPM.body.
    \  The heading is\n   considered first.  Some EBNF for new fields is defined:\n"
  - "ipms-field = \"Supersedes\" \":\" 1*msg-id\n             / \"Expires\" \":\"
    date-time\n             / \"Reply-By\" \":\" date-time\n             / \"Importance\"
    \":\" importance\n             / \"Sensitivity\" \":\" sensitivity\n             /
    \"Autoforwarded\" \":\" boolean\n             / \"Incomplete-Copy\" \":\"\n             /
    \"Content-Language\" \":\" 1#language\n             / \"Message-Type\" \":\" message-type\n
    \            / \"Discarded-X400-IPMS-Extensions\" \":\" 1#object-identifier\n
    \            / \"Autosubmitted\" \":\" autosubmitted\n"
  - 'importance      = "low" / "normal" / "high"

    '
  - "sensitivity     = \"Personal\" / \"Private\" /\n                  \"Company-Confidential\"\n"
  - "language        = 2*ALPHA [ \"(\" language-description \")\" ]\n     language-description
    = printable-string\n"
  - "message-type    = \"Delivery Report\"\n                / \"InterPersonal Notification\"\n
    \               / \"Multiple Part\"\n"
  - "autosubmitted   = \"not-auto-submitted\"\n                / \"auto-generated\"\n
    \               / \"auto-replied\"\n                / \"auto-forwarded\"\n   The
    mappings and actions for the IPMS.Heading are now specified for\n   each element.
    \ Addresses and Message Identifiers are mapped according\n   to Chapter 4.  Other
    mappings are explained, or are straightforward\n   (algorithmic).  If a field
    with addresses contains zero elements, it\n   shall be discarded, except for IPMS.Heading.blind-copy-recipients,\n
    \  which can be mapped onto BCC: (the only RFC 822 field which allows\n   zero
    recipients).\n   IPMS.Heading.this-IPM\n      Mapped to \"Message-ID:\".\n   IPMS.Heading.originator\n
    \     If IPMS.Heading.authorizing-users is present this is mapped to\n      Sender:,
    if not to \"From:\".\n   IPMS.Heading.authorizing-users\n      Mapped to \"From:\".\n
    \  IPMS.Heading.primary-recipients\n      Mapped to \"To:\".\n   IPMS.Heading.copy-recipients\n
    \     Mapped to \"Cc:\".\n   IPMS.Heading.blind-copy-recipients\n      Mapped
    to \"Bcc:\".\n   IPMS.Heading.replied-to-ipm\n      Mapped to \"In-Reply-To:\".\n
    \  IPMS.Heading.obsoleted-IPMs\n      Mapped to the extended RFC 822 field \"Supersedes:\".
    \  The replaces\n      the RFC 1327 field \"Obsoletes:\".   Reverse mapping of
    the RFC 1327\n      field may be supported.\n   IPMS.Heading.related-IPMs\n      Mapped
    to \"References:\".\n   IPMS.Heading.subject\n      Mapped to \"Subject:\".  The
    contents are converted to ASCII or T.61\n      (as defined in Section 3.5).  CRLF
    will not be present in a valid\n      X.400 field.  Any CRLF present are not mapped,
    but are used as\n      points at which the subject field shall be folded, unless
    an RFC\n      1522 encoding is used.\n   IPMS.Heading.expiry-time\n      Mapped
    to the extended RFC 822 field \"Expires:\".  The replaces the\n      RFC 1327
    field \"Expiry-Date:\".   Reverse mapping of the RFC 1327\n      field may be
    supported.\n   IPMS.Heading.reply-time\n      Mapped to the extended RFC 822 field
    \"Reply-By:\".\n   IPMS.Heading.reply-recipients\n      Mapped to \"Reply-To:\".\n
    \  IPMS.Heading.importance\n      Mapped to the extended RFC 822 field \"Importance:\".\n
    \  IPMS.Heading.sensitivity\n      Mapped to the extended RFC 822 field \"Sensitivity:\".\n
    \  IPMS.Heading.autoforwarded\n      Mapped to the extended RFC 822 field \"Autoforwarded:\".\n
    \  The standard extensions (Annex H of X.420 / ISO 10021-7) are mapped\n   as
    follows:\n   incomplete-copy\n      Mapped to the extended RFC 822 field \"Incomplete-Copy:\".\n
    \  language\n      Mapped to the  RFC 822 field \"Content-Language:\", defined
    in RFC\n      1766 [7].  This mapping may be made without loss of information.\n
    \  auto-submitted\n      Map to the extended RFC 822 field \"Autosubmitted:\".\n
    \  If the RFC 822 extended header is found, this shall be mapped onto an\n   RFC
    822 header, as described in Section 5.1.2.\n   If a non-standard extension is
    found, it shall be discarded, unless\n   the gateway understands the extension
    and can perform an appropriate\n   mapping onto an RFC 822 header field.  If extensions
    are discarded,\n   the list is indicated in the extended RFC 822 field \"Discarded-X400-\n
    \  IPMS-Extensions:\".\n"
  title: 5.3.4.  Mappings from the IP Message
- contents:
  - "5.3.4.1.  Mapping the IPMS Body\n   The mapping of the IPMS Body is defined in
    RFC 2157.\n"
  title: 5.3.4.1.  Mapping the IPMS Body
- contents:
  - "5.3.4.2.  Example Message\n   An example message, illustrating a number of aspects
    is given below.\n"
  - "Received: from mhs-relay.ac.uk by bells.cs.ucl.ac.uk via JANET with\n          NIFTP
    id <7906-0@bells.cs.ucl.ac.uk>;\n          Thu, 30 May 1991 18:24:55 +0100\n"
  - "X400-Received: by mta \"mhs-relay.ac.uk\" in /PRMD=uk.ac/ADMD= /C=gb/;\n               Relayed;
    Thu, 30 May 1991 18:23:26 +0100\n"
  - "X400-Received: by /PRMD=HMG/ADMD=GOLD 400/C=GB/; Relayed;\n               Thu,
    30 May 1991 18:20:27 +0100\n"
  - 'Message-Type: Multiple Part

    '
  - 'Date: Thu, 30 May 1991 18:20:27 +0100

    '
  - 'X400-Originator: Stephen.Harrison@gosip-uk.hmg.gold-400.gb

    '
  - "X400-MTS-Identifier:\n     [/PRMD=HMG/ADMD=GOLD 400/C=GB/;PC1000-910530172027-57D8]\n"
  - 'Original-Encoded-Information-Types: ia5

    '
  - 'X400-Content-Type: P2-1984 (2)

    '
  - 'X400-Content-Identifier: Email Problems

    '
  - 'From: Stephen.Harrison@gosip-uk.hmg.gold-400.gb (Tel +44 71 217 3487)

    '
  - 'Message-ID: <PC1000-910530172027-57D8*@MHS>

    '
  - "To: Jim Craigie <NTIN36@gec-b.rutherford.ac.uk>,\n    Tony Bates <tony@ean-relay.ac.uk>,\n
    \   Steve Kille <S.Kille@cs.ucl.ac.uk>\n"
  - 'Subject: Email Problems

    '
  - 'Sender: Stephen.Harrison@gosip-uk.hmg.gold-400.gb

    '
  - 'MIME-Version: 1.0

    '
  - 'Content-Type: multipart/mixed; boundary=boundary-1

    '
  - '--boundary-1

    '
  - 'Content-Type: text/plain; charset=US-ASCII

    '
  - 'Hope you gentlemen.......

    '
  - 'Regards,

    '
  - 'Stephen Harrison

    '
  - 'UK GOSIP Project

    '
  - '--boundary-1

    '
  - 'Content-Type: message/rfc822

    '
  - 'From: Urs Eppenberger <Eppenberger@verw.switch.ch>

    '
  - 'Message-ID:

    '
  - '<562*/S=Eppenberger/OU=verw/O=switch/PRMD=SWITCH/ADMD=ARCOM/C=CH/@MHS>

    '
  - 'To: "Stephen.Harrison" <Stephen.Harrison@gosip-uk.hmg.gold-400.gb>

    '
  - 'Cc: kimura@bsdarc.bsd.fc.nec.co.jp

    '
  - 'Subject: Response to Email link

    '
  - 'Content-Type: multipart/mixed; boundary=boundary-2

    '
  - '--boundary-2

    '
  - 'Dear Mr Harrison......

    '
  - '--boundary-2--

    '
  - '--boundary-1--

    '
  title: 5.3.4.2.  Example Message
- contents:
  - "5.3.5.  Mappings from an IP Notification\n   Because of the service setting,
    IP Notifications will not usually\n   need to be mapped by a MIXER gateway.  A
    message is generated, with\n   the following fields:\n   From:\n      Set to the
    IPMS.IPN.ipn-originator.\n   To:  Set to the recipient from MTS.MessageSubmissionEnvelope.\n
    \     If there have been redirects, the original address shall be used.\n   Subject:\n
    \     Set to the string  \"X.400 Inter-Personal Notification\" for a\n      receipt
    notification and to \"X.400 Inter-Personal Notification\n      (failure)\" for
    a non-receipt notification.\n   Message-Type:\n      Set to \"InterPersonal Notification\"\n
    \  References:\n      Set to IPMS.IPN.subject-ipm\n   Discarded-X400-IPMS-Extensions:\n
    \     Used for any discarded IPN extensions.\n   The following EBNF is defined
    for the body of the Message.  This\n   format is defined to ensure that all information
    from an\n   interpersonal notification is available to the end user in a uniform\n
    \  manner.\n         ipn-body-format = ipn-description <CRLF>\n                         [
    ipn-extra-information <CRLF> ]\n                         [ ipn-content-return
    ]\n         ipn-description = ipn-receipt / ipn-non-receipt\n         ipn-receipt
    = \"Your message to:\" preferred-recipient <CRLF>\n                  \"was received
    at\" receipt-time <CRLF> <CRLF>\n                  \"This notification was generated\"\n
    \                  acknowledgement-mode <CRLF>\n                  \"The following
    extra information was given:\" <CRLF>\n                   ipn-suppl <CRLF>\n         ipn-non-receipt
    = \"Your message to:\"\n                      preferred-recipient <CRLF>\n                      ipn-reason\n
    \        ipn-reason = ipn-discarded / ipn-auto-forwarded\n         ipn-discarded
    = \"was discarded for the following reason:\"\n                          discard-reason
    <CRLF>\n         ipn-auto-forwarded = \"was automatically forwarded.\" <CRLF>\n
    \                             [ \"The following comment was made:\"\n                              auto-comment
    ]\n         ipn-extra-information =\n                \"The following information
    types were converted:\"\n                 encoded-info\n         ipn-content-return
    = \"The Original Message is not available\"\n                              / \"The
    Original Message follows:\"\n         preferred-recipient = mailbox\n         receipt-time
    \       = date-time\n         auto-comment        = printablestring\n         ipn-suppl
    \          = printablestring\n         discard-reason     = \"Expired\" / \"Obsoleted\"
    /\n                     \"User Subscription Terminated\" / \"IPM Deleted\"\n         acknowledgement-mode
    = \"Manually\" / \"Automatically\"\n   The mappings for elements of the common
    fields of IPMS.IPN\n   (IPMS.CommonFields) onto this structure and the message
    header are:\n   subject-ipm\n      Mapped to \"References:\"\n   ipn-originator\n
    \     Mapped  to \"From:\".\n   ipn-preferred-recipient\n      Mapped to EBNF.preferred-recipient\n
    \  conversion-eits\n      Mapped to EBNF.encoded-info in EBNF.ipn-extra-information\n
    \  The mappings for elements of IPMS.IPN.non-receipt-fields\n   (IPMS.NonReceiptFields)
    are:\n   non-receipt-reason\n      Used to select between EBNF.ipn-discarded and
    EBNF.ipn-auto-\n      forwarded\n   discard-reason\n      Mapped to EBNF.discard-reason\n
    \  auto-forward-comment\n      Mapped to EBNF.auto-comment\n   returned-ipm\n
    \     This applies only to non-receipt notifications.  EBNF.ipn-\n      content-return
    shall always be omitted for receipt notifications,\n      and always be present
    in non-receipt notifications.  If present,\n      the second option of EBNF.ipn-content-return
    is chosen, and the\n      message is included.  In this case, the message is formatted
    as\n      multipart/mixed, and the returned message included as\n      message/rfc822
    after the text body part. Otherwise the first\n      option is chosen.\n   The
    mappings for elements of IPMS.IPN.receipt-fields\n   (IPMS.ReceiptFields) are:\n
    \  receipt-time\n      Mapped to EBNF.receipt-time\n   acknowledgement-mode\n
    \     Mapped to EBNF.acknowledgement-mode\n   suppl-receipt-info\n      Mapped
    to EBNF.ipn-suppl\n   An example notification is:\n         From: Steve Kille
    <steve@cs.ucl.ac.uk>\n         To: Julian Onions <jpo@computer-science.nottingham.ac.uk>\n
    \        Subject: X.400 Inter-personal Notification\n         Message-Type: InterPersonal
    Notification\n         References: <1229.614418325@UK.AC.NOTT.CS>\n         Date:
    Wed, 21 Jun 89 08:45:25 +0100\n         Your message to: Steve Kille <steve@cs.ucl.ac.uk>\n
    \        was automatically forwarded.\n         The following comment was made:\n
    \           Sent on to a random destination\n         The following information
    types were converted: g3fax\n"
  title: 5.3.5.  Mappings from an IP Notification
- contents:
  - "5.3.6.  Mappings from the MTS Abstract Service\n   This section describes the
    MTS mappings for User Messages (IPM and\n   IPN).  This mapping is defined by
    specifying the mapping of\n   MTS.MessageDeliveryEnvelope.  The following extensions
    to RFC 822 are\n   defined to support this mapping:\n         mts-field = \"X400-MTS-Identifier\"
    \":\" mts-msg-id\n                   / \"X400-Originator\" \":\" mailbox\n                   /
    \"X400-Recipients\" \":\" 1#mailbox\n                   / \"Original-Encoded-Information-Types\"
    \":\"\n                      encoded-info\n                   / \"X400-Content-Type\"
    \":\" mts-content-type\n                   / \"X400-Content-Identifier\" \":\"
    printablestring\n                   / \"Priority\" \":\" priority\n                   /
    \"Originator-Return-Address\" \":\" 1#mailbox\n                   / \"DL-Expansion-History\"
    \":\" mailbox \";\" date-time\n                      \";\"\n                   /
    \"Conversion\" \":\" prohibition\n                   / \"Conversion-With-Loss\"
    \":\" prohibition\n                   / \"Delivery-Date\" \":\" date-time\n                   /
    \"Discarded-X400-MTS-Extensions\" \":\"\n                      1#( object-identifier
    / labelled-integer )\n         prohibition     = \"Prohibited\" / \"Allowed\"\n
    \        mts-msg-id       = \"[\" global-id \";\" *text \"]\"\n         mts-content-type
    = \"P2\" /  labelled-integer\n                          / object-identifier\n
    \        priority        = \"normal\" / \"non-urgent\" / \"urgent\"\n   The mappings
    for each element of MTS.MessageDeliveryEnvelope can now\n   be considered.  Where
    the specified action does not result in an\n   extended element being mapped,
    the criticality associated with this\n   element shall be considered.  If the
    element is marked as critical\n   for transfer or for delivery, the message shall
    be non delivered by\n   the gateway because a critical extension cannot be correctly
    handled.\n   MTS.MessageDeliveryEnvelope.message-delivery-identifier\n      Mapped
    to the extended RFC 822 field \"X400-MTS-Identifier:\".\n   MTS.MessageDeliveryEnvelope.message-delivery-time\n
    \     Discarded, as this time will be represented in an appropriate\n      trace
    element.\n   The mappings for elements of MTS.MessageDeliveryEnvelope.other-fields\n
    \  (MTS.OtherMessageDeliveryFields) are:\n   content-type\n      Mapped to the
    extended RFC 822 field \"X400-Content-Type:\".  The\n      string \"P2\" is retained
    for backwards compatibility with RFC 987.\n      This shall not be generated,
    and either the EBNF.labelled-integer\n      or EBNF.object-identifier encoding
    used.\n   originator-name\n      Mapped to the SMTP originator, and to the extended
    RFC 822 field\n      \"X400-Originator:\".  This is described in Section 4.6.2.\n
    \  original-encoded-information-types\n      Mapped to the extended RFC 822 field
    \"Original-Encoded-\n      Information-Types:\".\n   priority\n      Mapped to
    the extended RFC 822 field \"Priority:\".\n   delivery-flags\n      If the conversion-prohibited
    bit is set, add an extended RFC 822\n      field \"Conversion:\".\n   this-recipient-name
    and other-recipient-names\n      The handling of these elements is described in
    Section 4.6.2.\n   originally-intended-recipient-name\n      The handling of this
    element is described in Section 4.6.2.\n   converted-encoded-information-types\n
    \     Discarded.  This information will be mapped in the trace.\n   message-submission-time\n
    \     Mapped to Date:.\n   content-identifier\n      Mapped to the extended RFC
    822 field \"X400-Content-Identifier:\".\n      In RFC 1327, this was \"Content-Identifier:\".
    \ This has been\n      changed to avoid confusion with MIME defined fields.   Gateways\n
    \     which reverse map, may support the old field.\n   If any extensions (MTS.MessageDeliveryEnvelope.other-\n
    \  fields.extensions) are present, and they are marked as critical for\n   transfer
    or delivery, then the message shall be rejected.  The\n   extensions (MTS.MessageDeliveryEnvelope.other-fields.extensions)
    are\n   mapped as follows.\n   conversion-with-loss-prohibited\n      If set to
    MTS.ConversionWithLossProhibited.conversion-with-loss-\n      prohibited, then
    add the extended RFC 822 field \"Conversion-With-\n      Loss:\".\n   requested-delivery-method\n
    \     Mapped to a comment, as described in Section 4.6.2.2.\n   originator-return-address\n
    \     Mapped to the extended RFC 822 field \"Originator-Return-Address:\".\n   physical-forwarding-address-request\n
    \  physical-delivery-modes\n   registered-mail-type\n   recipient-number-for-advice\n
    \  physical-rendition-attributes\n   physical-delivery-report-request\n   physical-forwarding-prohibited\n
    \     These elements are only appropriate for physical delivery.\n      They are
    represented as comments in the \"X400-Recipients:\"\n      field, as described
    in Section 4.6.2.2.\n   originator-certificate\n   message-token\n   content-confidentiality-algorithm-identifier\n
    \  content-integrity-check\n   message-origin-authentication-check\n   message-security-label\n
    \  proof-of-delivery-request\n      These elements imply use of security services
    not available in the\n      RFC 822 environment.  If they are marked as critical
    for transfer\n      or delivery, then the message shall be rejected.  Otherwise
    they\n      are discarded.\n   redirection-history\n      This is described in
    Section 4.6.2.\n   dl-expansion-history\n      Each element is mapped to an extended
    RFC 822 field \"DL-\n      Expansion-History:\".  These fileds shall be ordered
    in the message\n      header, so that the most recent expansion comes first (same
    order\n      as trace).\n      If any MTS (or MTA) Extensions not specified in
    X.400 are present,\n      and they are marked as critical for transfer or delivery,
    then the\n      message shall be rejected.  If they are not so marked, they can\n
    \     safely be discarded.  The list of discarded fields shall be\n      indicated
    in the extended header \"Discarded-X400-MTS-Extensions:\".\n"
  title: 5.3.6.  Mappings from the MTS Abstract Service
- contents:
  - "5.3.7.  Mappings from the MTA Abstract Service\n   There are some mappings at
    the MTA Abstract Service level which are\n   done for IPM and IPN.  These can
    be derived from\n   MTA.MessageTransferEnvelope.  The reasons for the mappings
    at this\n   level, and the violation of layering are:\n   -    Allowing for multiple
    recipients to share a single RFC 822\n        message\n   -    Making the X.400
    trace information available on the RFC 822\n        side\n   -    Making any information
    on deferred delivery available\n   The SMTP recipients are calculated from the
    full list of X.400\n   recipients.  This is all of the members of\n   MTA.MessageTransferEnvelope.per-recipient-fields
    being passed through\n   the gateway, where the responsibility bit is set.  In
    some cases, a\n   different RFC 822 message would be calculated for each recipient,
    due\n   to differing service requests for each recipient.  As discussed in\n   4.6.2.2,
    this specification allows either for multiple messages to be\n   generated, or
    for the per-recipient information to be discarded.\n   The following EBNF is defined
    for extended RFC 822 headers:\n   mta-field       = \"X400-Received\" \":\" x400-trace\n
    \                  / \"Deferred-Delivery\" \":\" date-time\n                   /
    \"Latest-Delivery-Time\" \":\" date-time\n   x400-trace       = \"by\" md-and-mta
    \";\"\n                    [ \"deferred until\" date-time \";\" ]\n                    [
    \"converted\" \"(\" encoded-info \")\" \";\" ]\n                    [ \"attempted\"
    md-or-mta \";\"  ]\n                       action-list\n                    \";\"
    arrival-time\n   md-and-mta       = [ \"mta\" mta \"in\" ]  global-id\n   mta
    \             = word\n   arrival-time     = date-time\n   md-or-mta        = \"MD\"
    global-id\n                    / \"MTA\" mta\n   Action-list      = 1#action\n
    \  action           = \"Redirected\"\n                    / \"Expanded\"\n                    /
    \"Relayed\"\n                    / \"Rerouted\"\n   Note the EBNF.mta is encoded
    as 822.word.  If the character set does\n   not allow encoding as 822.atom, the
    822.quoted-string encoding is\n   used.\n   If MTA.PerMessageTransferFields.deferred-delivery-time
    is present, it\n   is used to generate a Deferred-Delivery: field.  X.400 does
    not make\n   this information available at the MTS level on delivery, because
    it\n   requires that this service is provided by the first MTA. In the event\n
    \  that the first MTA does not provide this service, the function may\n   optionally
    be implemented by the gateway: that is, the gateway may\n   hold the message until
    the time specified in the protocol element.\n   Thus, the value of this element
    will usually be in the past.  For\n   this reason, the extended RFC 822 field
    is primarily for information.\n   If MTA.PerMessageTransferFields.extensions.dl-expansion-prohibited
    is\n   present and set to dl-expansion-probited, the gateway may reject that\n
    \  message on the basis that it is unable to control distribution list\n   expansion
    beyond the gateway.  The service relating to this is\n   described in Section
    2.3.1.2.  This approach was not specified in RFC\n   1327.  If it is found to
    be useful, it may be made mandatory in\n   future versions of MIXER.\n   If MTA.PerMessageTransferFields.extensions.recipient-reassignment-\n
    \  prohibited is present and set to recipeint-reassignment-probited, the\n   gateway
    may reject that message on the basis that it is unable to\n   control distribution
    list expansion beyond the gateway.  The service\n   relating to this is described
    in Section 2.3.1.2.  This approach was\n   not specified in RFC 1327.  If it is
    found to be useful, it may be\n   made mandatory in future versions of MIXER.\n
    \  Merge MTA.PerMessageTransferFields.trace-information, and\n   MTA.PerMessageTransferFields.internal-trace-information
    to produce a\n   single ordered trace list.  If Internal trace from other management\n
    \  domains has not been stripped, this may require complex interleaving.\n   Where
    an element of internal trace and external trace are identical,\n   except for
    the MTA in the internal trace, only the internal trace\n   element shall be presented.
    Use this to generate a sequence of\n   \"X400-Received:\" fields. The only difference
    between external trace\n   and internal trace will be the extra MTA information
    in internal\n   trace elements.\n   When generating an RFC 822 message all trace
    fields (X400-Received\n   and Received) shall be at the beginning of the header,
    before any\n   other fields.  Trace shall be in chronological order, with the
    most\n   recent element at the front of the message.  This ordering is\n   determined
    from the order of the fields, not from timestamps in the\n   trace, as there is
    no guarantee of clock synchronisation.  A simple\n   example trace (external)
    is:\n   X400-Received: by /PRMD=UK.AC/ADMD=Gold 400/C=GB/ ; Relayed ;\n           Tue,
    20 Jun 89 19:25:11 +0100\n   A more complex example (internal):\n   X400-Received:
    by mta \"UK.AC.UCL.CS\" in\n          /PRMD=UK.AC/ADMD=Gold 400/C=GB/ ;\n          deferred
    until  Tue, 20 Jun 89 14:24:22 +0100 ;\n           converted (undefined, g3fax)
    ; attempted MD /ADMD=Foo/C=GB/ ;\n           Relayed, Expanded, Redirected ; Tue,
    20 Jun 89 19:25:11 +0100\n   The gateway itself shall add a single line of trace
    information,\n   indicating MIXER conversion by use of a comment.  For example:\n
    \  Received: from isode.com by isode.com\n          (MIXER Conversion following
    RFC 1327);\n          Thu, 2 Jan 1997 14:46:03 +0000\n   If SMTP is being used,
    Appendix A shall also be followed, which\n   includes optional mappings to extension
    parameters.\n"
  title: 5.3.7.  Mappings from the MTA Abstract Service
- contents:
  - "5.3.8.  Mappings from Report Delivery\n   that only reports destined for the
    MTS user will be mapped.  Some\n   additional services are also taken from the
    MTA service.  X.400\n   Delivery Reports are Mapped onto Delivery Status Notifications,
    as\n   defined by NOTARY [28].\n"
  title: 5.3.8.  Mappings from Report Delivery
- contents:
  - "5.3.8.1.  MTS Mappings\n   A Delivery Report service will be represented as\n
    \  MTS.ReportDeliveryEnvelope, which comprises of per-report-fields\n   (MTS.PerReportDeliveryFields)
    and per-recipient-fields.\n   The enclosing message is a MIME message of content
    type\n   multipart/report, with report-type=delivery-status, which is\n   generated
    with the following fields:\n   From:\n        An administrator at the gateway
    system.\n   To:  A mapping of the\n        MTA.ReportTransferEnvelope.report-destination-name.
    \ This is\n        also the SMTP recipient.\n   Message-Type:\n        Set to
    \"Delivery Report\".  This is strictly redundant, but\n        retained for backwards
    compatibility with RFC 1327.\n   Subject:\n        The EBNF for the subject line
    is:\n       subject-line  = \"Delivery-Report\" \"(\" status \")\"\n                       [
    \"for\" destination ]\n       status        = \"success\" / \"failure\" / \"success
    and failures\"\n       destination   = mailbox / \"MTA\" word\n   The subject
    is intended to give a clear indication as to the nature\n   of the message, and
    summarise its contents. EBNF.status is set\n   according to whether the recipients
    reported on are all successes,\n   all failures, or a mixture.  It is common for
    a report to reference a\n   single recipient, in which case a subject line giving
    using all of\n   the options of EBNF.status can be used.  This gives useful\n
    \  information to the recipient.  Where information varies between\n   reported
    recpients, the options cannot be used.  The EBNF.destination\n   is used to indicate
    the addresses in the reports.  If the report is\n   for a single address, EBNF.mailbox
    is used to give the RFC 822\n   representation of the address.  If all of the
    reported recpients\n   reference the same MTA this is included in EBNF.word.   The
    MTA is\n   determined from the delivery report's trace.\n   The format of the
    body of the message follows the NOTARY delivery\n   status notification format,
    and is defined to ensure that all\n   information is conveyed to the RFC 822 user
    in a consistent manner.\n   The format is structured as if it was a message coming
    from the\n   gateway, with three body parts. The first body part is ASCII text\n
    \  structured as follows:\n   1.   A few lines giving keywords to indicate the
    original\n        message.\n   2.   A human summary of the status of each recipient
    being\n        reported on.\n   The second (mandatory)  body part is the NOTARY
    delivery status\n   notification, which contains detailed information extracted
    from the\n   report.  This information may be critical to diagnosing an obscure\n
    \  problem.\n   The third (optional) body part contains the returned message (return\n
    \  of content).  This structure is useful to the RFC 822 recipient, as\n   it
    enables the original message to be extracted.  For negative\n   reports it shall
    be included if the original message is available.\n   For positive reports headers
    from the message shall be included if\n   the original message is available.\n
    \  The first body part containing the user oriented description is of\n   type
    text/plain.  The format of this body part is defined below as\n   EBNF.dr-user-info.\n
    \        dr-user-info = dr-summary <CRLF>\n                         dr-recipients
    <CRLF>\n                         dr-content-return\n         dr-content-return
    = \"The Original Message is not available\"\n              / \"The Original Message
    follows:\"\n         dr-summary = \"This report relates to your message:\" <CRLF>\n
    \                        content-correlator <CRLF> <CRLF>\n                      \"of\"
    date-time <CRLF> <CRLF>\n         dr-recipients = *(dr-recipient <CRLF> <CRLF>)\n
    \        dr-recipient = dr-recip-success / dr-recip-failure\n         dr-recip-success
    =\n                         \"Your message was successfully delivered to:\"\n
    \                         mailbox \"at\" date-time\n         dr-recip-failure
    = \"Your message was not delivered to:\"\n                                 mailbox
    <CRLF>\n                         \"for the following reason:\" *word report-point\n
    \        = [ \"mta\" mta-name \"in\" ] global-id content-correlator = *word\n
    \        mta-name = word\n   EBNF.dr-summary\n      The EBNF.content-correlator
    is taken from the content correlator\n      (or content identifier if there is
    no content correlator) and the\n      EBNF.date-time from the trace, as described
    in Section 5.3.8.3.\n      LWSP may be added to improve the layout of the body
    part.\n   EBNF.dr-recipients\n      There is an element for each recipient in
    the delivery report.  In\n      each case, EBNF.mailbox is taken from the RFC
    822 form of the\n      originally specified recipient, which is taken from the
    originally\n      specified recipient element if present or from the actual\n
    \     recipient.  When reporting success, the message delivery time is\n      used
    to derive EBNF.date-time.  When reporting failure, the\n      information includes
    a human readable interpretation of the X.400\n      diagnostic and reason codes,
    and the supplementary information.\n   EBNF.dr-content-return\n      This is set
    according to whether or not the content is being\n      returned.\n   The EBNF
    of this body part is designed for english-speaking users.\n   The language of
    the strings in the EBNF may be altered.\n   The EBNF used in the delivery status
    notification is:\n      dr-per-message-fields =\n         / \"X400-Conversion-Date\"
    \":\" date-time\n         / \"X400-Subject-Submision-Identifier\" \":\"\n                                   mts-msg-id\n
    \        / \"X400-Content-Identifier\" \":\" printablestring\n         / \"X400-Content-Type\"
    \":\" mts-content-type\n         / \"X400-Original-Encoded-Information-Types\"
    \":\"\n                              encoded-info\n         / \"X400-Originator-and-DL-Expansion-History\"
    \":\"\n                              mailbox \";\" date-time \";\"\n         /
    \"X400-Reporting-DL-Name\" \":\" mailbox\n         / \"X400-Content-Correlator\"
    \":\" content-correlator\n         / \"X400-Recipient-Info\" \":\" recipient-info\n
    \        / \"X400-Subject-Intermediate-Trace-Information\" \":\"\n                              x400-trace\n
    \        / dr-extensions\n      dr-per-recipient-fields =\n         / \"X400-Redirect-Recipient\"
    \":\" \"x400\" \";\" std-or\n         / \"X400-Mapped-Redirect-Recipient\" \":\"
    \"rfc822\" \";\" mailbox\n         / \"X400-Converted-EITs\" \":\" encoded-info
    \";\"\n         / \"X400-Delivery-Time\" \":\" date-time\n         / \"X400-Type-of-MTS-User\"
    \":\" labelled-integer\n         / \"X400-Last-Trace\" \":\" [ encoded-info ]
    date-time\n         / \"X400-Supplementary-Info\" \":\"\n               <\"> printablestring
    <\"> \";\"\n         / \"X400-Redirection-History\" \":\" redirect-history-item\n
    \        / \"X400-Physical-Forwarding-Address\" \":\" mailbox\n         / \"X400-Originally-Specified-Recipient-Number\"
    \":\"\n               integer\n         / dr-extensions\n      dr-extensions =
    \"X400-Discarded-DR-Extensions\" \":\"\n                        1# (object-identifier
    / labelled-integer)\n      dr-diagnostic = \"Reason\" labelled-integer-2\n                        [
    \";\" \"Diagnostic\" labelled-integer-2 ]\n   A body part of type delivery status,
    as defined by NOTARY, is\n   generated.  MIXER extends this delivery status notification
    (DSN)\n   specification, by defining additional per message fields in EBNF.dr-\n
    \  per-message-fields and additional per recipient fields in EBNF.dr-\n   per-recipient-fields.
    \  These are used as extensions to DSN.per-\n   message-fields and DSN.per-recipient-fields.
    \ MIXER also defines a\n   new NOTARY address type \"x400\", with encoding of
    EBNF.std-or.   A\n   directory name may be inluded as an RFC 822 comment.\n   The
    following DSN.per-message-fields are always generated:\n   DSN.reporting-mta-field\n
    \     The DSN.mta-name-type is set to \"x400\", and this string is\n      reserved
    by MIXER.  The DSN.mta-name has its syntax specified by\n      EBNF.report-point,
    with the information derived from the first\n      element of the DR's trace.\n
    \  DSN.arrival-date-field\n      This is derived from the date of the\n      MTA.PerRecipientReportTransferFields.last-trace-info.arrival-time\n
    \     of the first recipient in the report.\n   The following two EBNF.per-message-fields
    are generated by the MIXER\n   gateway:\n   DSN.dsn-gateway-field\n      The type
    is set to \"dns\" and the  domain  set to the local domain\n      of the gateway.\n
    \  X400-Conversion-Date:\n      The EBNF.date-time is set to the time of the MIXER
    conversion.\n   The elements of MTS.ReportDeliveryEnvelope.per-report-fields are\n
    \  mapped as follows onto the DSN per message fields as follows:\n   subject-submission-identifier\n
    \     Mapped to DSN.original-envelope-id-field.  The encoding of this\n      MTS
    Identifier follows the format EBNF.mts-msg-id.\n   content-identifier\n      Mapped
    to X400-Content-Identifier:\n   content-type\n      Mapped to X400-Content-Type:\n
    \  original-encoded-information-types\n      Mapped to X400-Encoded-Info:\n   The
    extensions from MTS.ReportDeliveryEnvelope.per-report-\n   fields.extensions are
    mapped as follows:\n   originator-and-DL-expansion-history\n      Each element
    is mapped to an \"X400-Originator-and-DL-Expansion-\n      History:\"  They shall
    be ordered so that the most recent expansion\n      comes first in the header
    (same order as trace).\n   reporting-DL-name\n      Mapped to X400-Reporting-DL-Name:\n
    \  content-correlator\n      If the content correlator starts with the string
    \"SMTP/NOTARY\n      ENVID: \", then the remainder of the content correlator is
    mapped\n      to the DSN original-envelope-id field.  If this is not the case,\n
    \     the content correlator is mapped to X400-Content-Correlator:,\n      provided
    that the encoding is IA5String (this will always be the\n      case).\n   message-security-label\n
    \  reporting-MTA-certificate\n   report-origin-authentication-check\n      These
    security parameters will not be present unless there is an\n      error in a remote
    MTA.  If they are present, they shall be\n      discarded in preference to discarding
    the whole report.  They\n      shall be listed in the X400-Discarded-DR-Extensions:
    field.\n   If there are any other DR extensions, they shall also be discarded\n
    \  and listed in the X400-Discarded-DR-Extensions: field.\n   For each element
    of MTS.ReportDeliveryEnvelope.per-recipient-fields,\n   a set of DSN.per-recipient-fields
    is generated.  The fields are\n   filled in as follows:\n   actual-recipient-name\n
    \     If originally-intended-recipient-name is not present, generate a\n      DSN.original-recipient-field
    fields, with DSN.address-type of\n      \"rfc822\", and with an RFC 822 mailbox
    generated from the address\n      encoded as specified by NOTARY.  Also generate
    a DSN.final-\n      recipient-field field, which holds the X.400 representation
    of the\n      same address.  If the directory name is present, it shall be added\n
    \     as a trailing comment in the X.400 form.\n      If originally-intended-recipient-name
    is present, generate an\n      \"X400-Mapped-Redirect-Recipient:\" field, with
    DSN.address-type of\n      \"rfc822\", and with an RFC 822 mailbox generated from
    the address\n      encoded as specified by NOTARY.  Also generate an \"X400-Redirect-\n
    \     Recipient:\" field, which holds the X.400 representation of the\n      same
    address.  If the directory name is present, it shall be added\n      as a trailing
    comment in the X.400 form.\n   report\n      If it is MTS.Report.delivery, then
    set DSN.action-field to\n      \"delivered\", and set \"X400-Delivery-Time:\"
    and \"X400-Type-of-MTS-\n      User:\" from the information in the report.  DSN.status
    field is\n      set to \"2.0.0\".\n      If it is MTS.Report.non-delivery, then
    set DSN.action-field to\n      \"failed\".   DSN.diagnostic-code-field is encoded
    according to the\n      syntax EBNF.dr-diagnostic, with the labelled integers
    set from the\n      reason and diagnostic codes.  DSN.status-field is derived
    from the\n      reason and diagnostic codes, as described below.\n   converted-encoded-information-types\n
    \     Set X400-Converted-EITs:\n   originally-intended-recipient\n      Generate
    a DSN.final-recipient-field field, with DSN.address-type\n      of \"rfc822\",
    and with an RFC 822 mailbox generated from the\n      address encoded as specified
    by NOTARY.  Also generate a\n      DSN.original-recipient-field field, which holds
    the X.400\n      representation of the same address.  If the directory name is\n
    \     present, it shall be added as a trailing comment in the X.400\n      form.\n
    \  supplementary-info\n      Set X400-Supplementary-Info:\n   redirection-history\n
    \     Generate an \"X400-Redirection-History:\" field for each redirect\n      history
    element.  The fields are ordered with the earliest\n      redirect first.\n   physical-forwarding-address\n
    \     Set X400-Physical-Forwarding-Address as a mailbox, with directory\n      name
    in comment if present.\n   recipient-certificate\n      Discard\n   proof-of-delivery\n
    \     Discard\n   Any unknown extensions shall be discarded, irrespective of\n
    \  criticality.  All discarded extensions shall be included in a \"X400-\n   Discarded-DR-Extensions:\"
    field.\n   The number from the MTA.PerRecipientReportTransferFields.originally-\n
    \  specified-recipient-number shall be mapped to \"X400-Originally-\n   Specified-Recipient-Number:\",
    in order to facilitate reverse mapping\n   of delivery reports.\n   The original
    message shall be included in the delivery status\n   notification if it is available.
    The original message will usually be\n   available at the gateway, as discussed
    in Section 5.2.  If the\n   original message is available, but is not a legal
    message format, a\n   dump of the ASN.1 may be included, encoded as application/octet-\n
    \  string.  This is recommended, but not required.\n   Where the original message
    is included, it shall be encoded according\n   to the MIME specifications as content
    type message/rfc822.\n"
  title: 5.3.8.1.  MTS Mappings
- contents:
  - "5.3.8.2.  Status Code Mappings\n   This section defines the mappings from X.400
    diagnostic and status\n   codes to the NOTARY Status field.\n"
  - 'C/D     X400 meaning                            DSN code        Means

    '
  - '0/Any   Transfer failure (may be temporary)     4.4.0 Other net/route

    '
  - '1/Any   Unable to transfer                      5.0.0 Other, unknown

    '
  - '2/Any   Conversion not performed                5.6.3 Conv not supported

    '
  - '3/Any   Physical rendition not performed        5.6.0 Other media error

    '
  - "4/Any   Physical delivery not performed         5.1.0 Other address\n                                                      status\n"
  - '5/Any   Restricted delivery                     5.7.1

    '
  - "6/Any   Directory operation unsuccessful        5.4.3 Routing server\n                                                      failure\n"
  - '7/Any   Deferred delivery not performed         5.3.3 Not capable

    '
  - '1/0     Unrecognized OR name                    5.1.1

    '
  - '1/1     Ambiguous OR name                       5.1.4

    '
  - '1/2     MTS congestion                          4.3.1

    '
  - '1/3     Loop detected                           5.4.6

    '
  - '1/4     Recipient unavailable                   4.2.1

    '
  - '1/5     Delivery time expired                   4.4.7

    '
  - '1/6     Encoded information types unsupported   5.6.1 Media unsupp.

    '
  - '1/7     Content too long                        5.2.3

    '
  - '2/8     Conversion impractical                  5.6.3

    '
  - '2/9     Conversion prohibited                   5.6.3

    '
  - '1/10    Implicit conversion not subscribed      5.6.3

    '
  - '1/11    Invalid arguments                       5.5.2

    '
  - '1/12    Content syntax error                    5.5.2

    '
  - '1/13    Size constraint violation               5.5.2

    '
  - '1/14    Protocol violation                      5.5.0

    '
  - '1/15    Content type not supported              5.6.1 Media unsupp.

    '
  - '1/16    Too many recipients                     5.5.3

    '
  - '1/17    No bilateral agreement                  5.4.4

    '
  - '1/18    Unsupported critical function           5.3.3 System not capable

    '
  - '2/19    Conversion with loss prohibited         5.6.2

    '
  - '2/20    Line too long                           5.6.0

    '
  - '2/21    Page split                              5.6.0

    '
  - '2/22    Pictorial symbol loss                   5.6.2

    '
  - '2/23    Punctuation symbol loss                 5.6.2

    '
  - '2/24    Alphabetic character loss               5.6.2

    '
  - '2/25    Multiple information loss               5.6.2

    '
  - '1/26    Recipient reassignment prohibited       5.4.0 Undefined net/route

    '
  - '1/27    Redirection loop detected               5.4.6

    '
  - '1/28    DL expansion prohibited                 5.7.2

    '
  - "1/29    No DL submit permission                 5.7.1 Delivery not\n                                                      authorized\n"
  - '1/30    DL expansion failure                    4.2.4

    '
  - "4/31    Physical rendition attrs not supported  5.6.0 Undefined media\n                                                      error\n"
  - "4/32-45 Various physical mail stuff             5.1.0 Other address\n                                                      status\n"
  - "1/43    New address unknown                     5.1.6 Destination mbox\n                                                      moved\n"
  - "1/46    Secure messaging error                  5.7.0 Other security\n                                                      status\n"
  - '2/47    Unable to downgrade                     5.3.3 System not capable

    '
  - '0/48    Unable to complete transfer             5.3.4 Message too big

    '
  - "0/49    Transfer attempts limit reached         4.4.7 Delivery time\n                                                      expired\n"
  title: 5.3.8.2.  Status Code Mappings
- contents:
  - "5.3.8.3.  MTA Mappings\n   The single SMTP recipient is constructed from\n   MTA.ReportTransferEnvelope.report-destination-name,
    using the\n   mappings of Chapter 4.  Unlike with a user message, this information\n
    \  is not available at the MTS level.\n   The following additional mappings are
    made, which results in fields\n   in the outer header of the DSN.\n   MTA.ReportTransferEnvelope.report-destination-name\n
    \     This is used to generate the To: field.\n   MTA.ReportTransferEnvelope.identifier\n
    \     Mapped to the extended RFC 822 field \"X400-MTS-Identifier:\".  It\n      may
    also be used to derive a \"Message-Id:\" field.\n   MTA.ReportTransferEnvelope.trace-information\n
    \     and\n   MTA.ReportTransferEnvelope.internal-trace-information\n      Mapped
    onto the extended RFC 822 field \"X400-Received:\", as\n      described in Section
    5.3.7.  Date: is generated from the first\n      element of trace.\n   The following
    additional mappings are made, which result in per\n   message fields in the DSN
    body part:\n   MTA.PerRecipientReportTransferFields.last-trace-information\n      Mapped
    to X400-Last-Trace:\".\n   MTA.PerReportTransferFields.subject-intermediate-trace-\n
    \     information Mapped to \"X400-Subject-Intermediate-Trace-\n      Information:\".
    These fields are ordered so that the most recent\n      trace element comes first.\n"
  title: 5.3.8.3.  MTA Mappings
- contents:
  - "5.3.8.4.  Example Delivery Reports\n   This section contains sample delivery
    reports.   These are the same\n   examples used in RFC 1327, and so they also
    illustrate the changes\n   between RFC 1327 and this document.  Example Delivery
    Report 1:\n   Received: from cs.ucl.ac.uk by bells.cs.ucl.ac.uk\n      via Delivery
    Reports Channel id <27699-0@bells.cs.ucl.ac.uk>;\n      Thu, 7 Feb 1991 15:48:39
    +0000 From: UCL-CS MTA\n   <postmaster@cs.ucl.ac.uk> To: S.Kille@cs.ucl.ac.uk
    Subject: Delivery\n   Report (failure) for H.Hildegard@bbn.com Message-Type: Delivery\n
    \  Report Date: Thu, 7 Feb 1991 15:48:39 +0000 Message-ID:\n   <\"bells.cs.u.694:07.01.91.15.48.34\"@cs.ucl.ac.uk>
    X400-Content-\n   Identifier: Greetings.  MIME-Version: 1.0 Content-Type:\n   multipart/report;
    report-type=delivery-status;\n       boundary=boundary-1\n   --boundary-1\n   This
    report relates to your message:\n           Greetings.\n           of Thu, 7 Feb
    1991 15:48:20 +0000\n   Your message was not delivered to\n           H.Hildegard@bbn.com
    for the following reason:\n           Bad Address\n           MTA 'bbn.com' gives
    error message  (USER) Unknown user name\n   in\n           \"H.Hildegard@bbn.com\"\n
    \  The Original Message follows:\n   --boundary-1 content-type: message/delivery-status\n
    \  Reporting-MTA: x400;  bells.cs.ucl.ac.uk in /PRMD=uk.ac/ADMD=gold\n   400/C=gb/
    Arrival-Date: Thu, 7 Feb 1991 15:48:34 +0000 DSN-Gateway:\n   dns;  bells.cs.ucl.ac.uk
    X400-Conversion-Date: Thu, 7 Feb 1991\n   15:48:40 +0000 Original-Envelope-Id:\n
    \           [/PRMD=uk.ac/ADMD=gold\n   400/C=gb/;<1803.665941698@UK.AC.UCL.CS>]
    X400-Content-Identifier:\n   Greetings.  X400-Subject-Intermediate-Trace-Information:\n
    \  /PRMD=uk.ac/ADMD=gold 400/C=gb/;\n            arrival Thu, 7 Feb 1991 15:48:20
    +0000 action Relayed X400-\n   Subject-Intermediate-Trace-Information:  /PRMD=uk.ac/ADMD=gold\n
    \  400/C=gb/;\n            arrival Thu, 7 Feb 1991 15:48:18 +0000 action Relayed\n
    \  Original-Recipient: rfc822; H.Hildegard@bbn.com Final-Recipient:\n   x400;\n
    \    /RFC-822=H.Hildegard(a)bbn.com/OU=cs/O=ucl/PRMD=uk.ac/ADMD=gold\n   400/C=gb/;
    Action: failure Status: 5.1.1 Diagnostic-Code: x400;\n   Reason 1 (Unable-To-Transfer);\n
    \       Diagnostic 0 (Unrecognised-ORName) X400-Last-Trace: (ia5) Thu, 7\n   Feb
    1991 15:48:18 +0000; X400-Originally-Specified-Recipient-Number:\n   1 X400-Supplementary-Info:
    \"MTA 'bbn.com' gives error message  (USER)\n       Unknown user name in \"H.Hildegard@bbn.com\"\";\n
    \  --boundary-1 Content-Type: message/rfc822\n   Received: from glenlivet.cs.ucl.ac.uk
    by bells.cs.ucl.ac.uk\n     with SMTP inbound id <27689-0@bells.cs.ucl.ac.uk>;\n
    \    Thu, 7 Feb 1991 15:48:21 +0000 To: H.Hildegard@bbn.com Subject:\n   Greetings.
    \ Phone: +44-71-380-7294 Date: Thu, 07 Feb 91 15:48:18\n   +0000 Message-ID: <1803.665941698@UK.AC.UCL.CS>
    From: Steve Kille\n   <S.Kille@cs.ucl.ac.uk>\n   Steve\n   --boundary-1--\n   Example
    Delivery Report 2:\n   Received: from cs.ucl.ac.uk by bells.cs.ucl.ac.uk\n     via
    Delivery Reports Channel id <27718-0@bells.cs.ucl.ac.uk>;\n     Thu, 7 Feb 1991
    15:49:11 +0000\n   X400-Received: by mta \"bells.cs.ucl.ac.uk\" in\n     /PRMD=uk.ac/ADMD=gold
    400/C=gb/;\n     Relayed; Thu, 7 Feb 1991 15:49:08 +0000\n   X400-Received: by
    /PRMD=DGC/ADMD=GOLD 400/C=GB/; Relayed;\n     Thu, 7 Feb 1991 15:48:40 +0000\n
    \  From: UCL-CS MTA <postmaster@cs.ucl.ac.uk>\n   To: S.Kille@cs.ucl.ac.uk\n   Subject:
    Delivery Report (failure) for\n            j.nosuchuser@dle.cambridge.DGC.gold-400.gb\n
    \  Message-Type: Delivery Report\n   Date: Thu, 7 Feb 1991 15:46:11 +0000\n   Message-ID:
    <\"DLE/910207154840Z/000\"@cs.ucl.ac.uk>\n   X400-Content-Identifier: A useful
    mess...\n   MIME-Version: 1.0\n   Content-Type: multipart/report; report-type=delivery-status;\n
    \      boundary=boundary-1\n   --boundary-1\n   This report relates to your message:\n
    \          A useful mess...\n           of Thu, 7 Feb 1991 15:43:20 +0000\n   Your
    message was not delivered to\n           j.nosuchuser@dle.cambridge.DGC.gold-400.gb\n
    \          for the following reason:\n           Bad Address\n           DG 21187:
    (CEO POA) Unknown addressee.\n   The Original Message is not available\n   --boundary-1\n
    \  content-type: message/delivery-status\n   Reporting-MTA: x400; /PRMD=DGC/ADMD=GOLD
    400/C=GB/\n   Arrival-Date: Thu, 7 Feb 1991 15:48:40 +0000\n   DSN-Gateway: dns;
    \ bells.cs.ucl.ac.uk\n   X400-Conversion-Date: Thu, 7 Feb 1991 15:49:12 +0000\n
    \  Original-Envelope-Id:\n     [/PRMD=uk.ac/ADMD=gold 400/C=gb/;<1796.665941626@UK.AC.UCL.CS>]\n
    \  X400-Content-Identifier: A useful mess...\n   Original-Recipient: rfc822; j.nosuchuser@dle.cambridge.DGC.gold-400.gb\n
    \  Final-Recipient: x400;\n     /I=j/S=nosuchuser/OU=dle/O=cambridge/PRMD=DGC/ADMD=GOLD
    400/C=GB/\n   Action: failure\n   Status: 5.1.1\n   Diagnostic-Code: x400; Reason
    1 (Unable-To-Transfer);\n       Diagnostic 0 (Unrecognised-ORName)\n   X400-Supplementary-Info:
    \"DG 21187: (CEO POA) Unknown addressee.\"\n   X400-Originally-Specified-Recipient-Number:
    1\n   --boundary-1--\n"
  title: 5.3.8.4.  Example Delivery Reports
- contents:
  - "5.3.9.  Probe\n   This is an MTS internal issue.  Any probe shall be serviced
    by the\n   gateway, as there is no equivalent RFC 822 functionality.  The value\n
    \  of the reply is dependent on whether the gateway could service an MTS\n   Message
    with the values specified in the probe.  The reply shall make\n   use of MTS.SupplementaryInformation
    to indicate that the probe was\n   serviced by the gateway.\n"
  title: 5.3.9.  Probe
- contents:
  - "Appendix A - Mappings Specific to SMTP\n   This Appendix is specific to the Simple
    Mail Transfer  Protocol (RFC\n   821).  It describes specific changes in the context
    of this protocol.\n   When MIXER is used with SMTP, conformance to this appendix
    is\n   mandatory.\n   1.  Probes\n   When servicing a probe, as described in section
    5.3.9, use may be\n   made of the SMTP VRFY command to increase the accuracy of
    information\n   contained in the delivery report.\n   2.  Long Lines\n   SMTP
    is a text oriented protocol, and is required to support a line\n   length of at
    least 1000 characters.   Some implementations do not\n   support line lengths
    greater than 1000 characters.   This can cause\n   problems.  Where body parts
    have long lines, it is recommended to use\n   a MIME encoding that folds lines
    (quoted printable).\n   3.  SMTP Extensions\n   There are several RFCs that specify
    extensions to SMTP. Most of these\n   are not relevant to MIXER.  The NOTARY work
    to support delivery\n   report defines extensions which are relevant [29].  Use
    of these\n   extensions by a MIXER gateway is optional.  If these extensions are\n
    \  used, they shall be used in the manner described below.\n   3.1.  SMTP Extension
    mapping to X.400\n   Mappings are defined for the following extensions:\n   NOTIFY\n
    \     This is used to set the report and non-delivery bits of\n      MTA.PerRecipientMessageTransferFields.per-recipient-indicators.\n
    \     If the value is NEVER, both bits are zero.  If SUCCESS is present,\n      the
    report bit is set.  Otherwise, the non-delivery-report bit is\n      set.  If
    the gateway uses the NOTIFY command, it shall perform\n      this mapping in all
    cases.\n   ORCPT\n      If the address type of the original recipient is \"x400\"
    or\n      \"rfc822\", this may be used at the MTS level, to generate an\n      element
    of redirection history, with the redirection date being\n      the date of conversion
    and the reason set to \"alias\".\n   ENVID\n      If present, this may be used
    to generate a content correlator.\n      This is used rather than the MTS Identifier,
    as the ENVID is\n      unique for the UA only and is likely to be too large to
    map to an\n      MTS identifier. The content correlator is encoded as an IA5 String\n
    \     containing the ENVID and prefixed by the string:\n                            \"SMTP/NOTARY
    ENVID: \"\n      If the ENVID starts with the string \"X400-MTS-Identifier: \",
    then\n      this ENVID was generated from an X.400 MTS Identifier.  The\n      reverse
    mapping defined in Section 3.2 of Appendix A shall not be\n      used, as this
    may cause problems in certain situations (e.g.,\n      where the message was expanded
    by an Internet mailing list).\n   3.2.  X.400 Mapping to SMTP Extensions\n   The
    following extensions may be used as a part of the MIXER mapping:\n   NOTIFY\n
    \     The originator-report and originator-non-delivery-report bits of\n      MTA.PerRecipientMessageTransferFields.per-recipient-indicators\n
    \     determine how this is used.   If both bits are zero, the parameter\n      is
    NEVER.  If the report bit is set, SUCCESS is used.   Otherwise,\n      FAILURE
    is used.  If this is done, the gateway shall not generate\n      a delivery report
    for this recipient, unless this is needed in the\n      case where the originating
    MTA service report requirements differ\n      from the user requirements.   Additional
    originating MTA\n      requrirements are satisfied by the gateway.\n   ORCPT\n
    \     If the MTS.perRecipientDeliveryFields.originally-intended-\n      recipient-name
    is present, the ORCPT command may be used to carry\n      this value, using the
    \"x400\" syntax.\n   ENVID\n      This may be generated, with the value taken
    from the\n      MTS.MessageDeliveryEnvelope.message-delivery-identifer.  If this\n
    \     is done, it shall be encoded as EBNF.mts-msg-id, preceded by the\n      string
    \"X400-MTS-Identifier: \".\n   RET\n      If MTA.PerMessageTransferFields.per-message-indicators.content-\n
    \     return-request is set to FALSE, the parameter RET may be set to\n      HDRS,
    to specify return of headers only.\n"
  title: Appendix A - Mappings Specific to SMTP
- contents:
  - "Appendix B - Mapping with X.400(1984)\n   This appendix defines modifications
    to the  mapping for use with\n   X.400(1984).\n   The X.400(1984) protocols are
    a proper subset of X.400(1988).  When\n   mapping from X.400(1984) to RFC 822,
    no changes to this specification\n   are needed.\n   When mapping from RFC 822
    to X.400(1984), no use can be made of 1988\n   specific features.   No use of
    such features is made at the MTS\n   level.  The heading extension feature is
    used at the IPMS level, and\n   this shall be replaced by the RFC 987 approach.
    \ All header\n   information which would usually be mapped into the rfc-822-heading-\n
    \  list extension is mapped into a single IA5 body part, which is the\n   first
    body part in the message.  This body part will start with the\n   string \"RFC-822-Headers:\"
    as the first line.  The headers then follow\n   this line.  This specification
    requires correct reverse mapping of\n   this format, either from 1988 or 1984.
    \ RFC 822 extended headers\n   which could be mapped into X.400(1988) elements,
    are also mapped to\n   the body part.\n   In an environment where RFC 822 is of
    major importance, it may be\n   desirable for downgrading to consider the case
    where the message was\n   originated in an RFC 822 system, and mapped according
    to this\n   specification.  The rfc-822-heading-list extension may be mapped\n
    \  according to this appendix.\n   When parsing std-or, the following restrictions
    shall be observed:\n   -    Only the 84/88 attributes identified in the table
    in\n        Section 4.2 are present.\n   -    No teletex encoding is allowed.\n
    \  If an address violates this, it shall be treated as an RFC 822\n   address,
    which will usually lead to encoding as a DDA \"RFC-822\".\n   It is possible that
    attributes of zero length may be present\n   in an OR Address.  This is not legal
    in 1988, except for ADMD\n   where the case is explicitly described in Section
    4.3.5.\n   Attributes of zero length are deprecated (the attribute shall be\n
    \  omitted), and will therefore be unusual.  However, some systems\n   generate
    them and rely on them.  Therefore, any null attribute\n   shall be enoded using
    the std-or encoding (e.g., /O=/).\n   If a non-Teletex Common Name (CN) is present,
    it shall be\n   mapped onto a Domain Defined Attribute \"Common\".  This is in
    line\n   with RFC 1328 on X.400 1988 to 1984 downgrading [22].\n   This specification
    defines a mapping of the Internet message\n   framework to X.400.  Body part mappings
    are defined in RFC\n   2157 [6], which relies on X.400(88) features.   Downgrading
    to\n   X.400(84) for body parts is defined in RFC 1496 (HARPOON), which\n   shall
    be followed in the context of this appendix [5].\n"
  title: Appendix B - Mapping with X.400(1984)
- contents:
  - "Appendix C - RFC 822 Extensions for X.400 access\n   This appendix defines a
    number of optional mappings which may be\n   provided to give access from RFC
    822 to a number of X.400 services.\n   These mappings are beyond the basic scope
    of this specification.\n   There has been a definite demand to use extended RFC
    822 as a\n   mechanism to access X.400, and these extensions provide access to\n
    \  certain features.  If this functionality is provided, this appendix\n   shall
    be followed.  The following headings are defined:\n         extended-heading =\n
    \            \"Prevent-NonDelivery-Report\" \":\"\n             / \"Generate-Delivery-Report\"
    \":\"\n             / \"Alternate-Recipient\" \":\" prohibition\n             /
    \"Disclose-Recipients\" \":\"  prohibition\n             / \"X400-Content-Return\"
    \":\" prohibition\n   Prevent-NonDelivery-Report and Generate-Delivery-Report
    allow setting\n   of MTS.PerRecipientSubmissionFields.originator-report-request.
    \ The\n   setting will be the same for all recipients.\n   Alternate-Recipient,
    Disclose-Recipients, and X400-Content-Return\n   allow for override of the default
    settings for\n   MTS.PerMessageIndicators.\n   Use of NOTARY mechanisms is a preferred
    meachanism for controlling\n   these parameters.\n"
  title: Appendix C - RFC 822 Extensions for X.400 access
- contents:
  - "Appendix D - Object Identifier Assignment\n   The following Object Identifiers
    shall be used.\n   internet ::= OBJECT IDENTIFIER  { iso org(3) dod(6) 1 } --
    from RFC\n   1155\n   mail OBJECT IDENTIFIER ::= { internet 7 }  -- IANA assigned\n
    \  mixer OBJECT IDENTIFIER ::= { mail mixer(1) } -- inherited from RFC\n   1495\n
    \  mixer-core OBJECT IDENTIFIER ::= { mixer core(3) }\n   id-rfc-822-field-list
    OBJECT IDENTIFIER ::= {mixer-core 2}\n   id-dsn-header-list OBJECT IDENTIFIER
    ::= {mixer-core 3}\n   id-dsn-field-list OBJECT IDENTIFIER ::= {mixer-core 4}\n
    \  eit-mixer OBJECT IDENTIFIER ::= {mixer-core 5}\n                  -- the MIXER
    pseudo-EIT\n   This object identifier for id-rfc-822-field-list is different to\n
    \  the one assigned in RFC 1327, which was erroneous.\n"
  title: Appendix D - Object Identifier Assignment
- contents:
  - "Appendix E - BNF Summary\n   boolean = \"TRUE\" / \"FALSE\"\n   numericstring
    = *(DIGIT / \" \")\n   printablestring  = *( ps-char )\n   ps-restricted-char
    \     = 1DIGIT /  1ALPHA / \" \" / \"'\" / \"+\"\n                             /
    \",\" / \"-\" / \".\" / \"/\" / \":\" / \"=\" / \"?\"\n   ps-delim         = \"(\"
    / \")\"\n   ps-char          = ps-delim / ps-restricted-char\n   ps-encoded       =
    *( ps-restricted-char / ps-encoded-char )\n   ps-encoded-char  = \"(a)\"               ;
    (@)\n                      / \"(p)\"               ; (%)\n                      /
    \"(b)\"               ; (!)\n                      / \"(q)\"               ; (\")\n
    \                     / \"(u)\"               ; (_)\n                      / \"(l)\"
    \              ; \"(\"\n                      / \"(r)\"               ; \")\"\n
    \                     / \"(\" 3DIGIT \")\"\n   teletex-string   = *( ps-char /
    t61-encoded )\n   t61-encoded      = \"{\" 1* t61-encoded-char \"}\"\n   t61-encoded-char
    = 3DIGIT\n   teletex-and-or-ps = [ printablestring ] [ \"*\" teletex-string ]\n
    \  labelled-integer ::= [ key-string ] \"(\" numericstring \")\"\n   labelled-integer-2
    ::= [ numericstring ] \"(\" key-string \")\"\n   key-string      = *key-char\n
    \  key-char        = <a-z, A-Z, 0-9, and \"-\">\n   object-identifier  ::= oid-comp
    object-identifier\n                          | oid-comp\n   oid-comp ::= [ key-string
    ] \"(\" numericstring \")\"\n   encoded-info    = 1#encoded-type\n   encoded-type
    \   = built-in-eit / object-identifier\n   built-in-eit    = \"Undefined\"         ;
    undefined (0)\n                   / \"Telex\"             ; tLX (1)\n                   /
    \"IA5-Text\"          ; iA5Text (2)\n                   / \"G3-Fax\"            ;
    g3Fax (3)\n                   / \"TIF0\"              ; tIF0 (4)\n                   /
    \"Teletex\"           ; tTX (5)\n                   / \"Videotex\"          ;
    videotex (6)\n                   / \"Voice\"             ; voice (7)\n                   /
    \"SFD\"               ; sFD (8)\n                   / \"TIF1\"              ;
    tIF1 (9)\n   encoded-pn      = [ given \".\" ] *( initial \".\" ) surname\n   given
    \          = 2*<ps-char not including \".\">\n   initial         = ALPHA\n   surname
    \        = printablestring\n   std-or-address  = 1*( \"/\" attribute \"=\" value
    ) \"/\"\n   attribute       = standard-type\n                   / \"RFC-822\"\n
    \                  / dd-key \".\" std-printablestring\n   std-or-address-input
    =  [ sep pair ] sep  pair *( sep pair )\n                          sep  [ pair
    sep ]\n   sep             = \"/\" / \";\"\n   pair            = input-attribute
    \"=\" value\n   input-attribute = attribute\n                   / dd-key \":\"
    std-printablestring\n   standard-type   = key-string\n   dd-key          = key-string\n
    \  value           = std-printablestring\n   std-printablestring\n                   =
    *( std-char / std-pair )\n   std-char        = <\"{\", \"}\", \"*\", and any ps-char\n
    \                                               except \"/\" and \"=\" >\n   std-pair
    \       = \"$\" ps-char\n   global-id = std-or-address\n   mta-field       = \"X400-Received\"
    \":\" x400-trace\n                   / \"Deferred-Delivery\" \":\" date-time\n
    \                  / \"Latest-Delivery-Time\" \":\" date-time\n   x400-trace       =
    \"by\" md-and-mta \";\"\n                    [ \"deferred until\" date-time \";\"
    ]\n                    [ \"converted\" \"(\" encoded-info \")\" \";\" ]\n                    [
    \"attempted\" md-or-mta \";\"  ]\n                       action-list\n                       \";\"
    arrival-time\n   md-and-mta       = [ \"mta\" mta \"in\" ]  global-id\n   mta
    \             = word\n   arrival-time     = date-time\n   md-or-mta        = \"MD\"
    global-id\n                    / \"MTA\" mta\n   Action-list      = 1#action\n
    \  action           = \"Redirected\"\n                    / \"Expanded\"\n                    /
    \"Relayed\"\n                    / \"Rerouted\"\n   dr-user-info = dr-summary
    <CRLF>\n                  dr-recipients <CRLF>\n                  dr-content-return\n
    \  dr-content-return = \"The Original Message is not available\"\n        / \"The
    Original Message follows:\"\n   dr-summary = \"This report relates to your message:\"
    <CRLF>\n                   content-correlator <CRLF> <CRLF>\n                \"of\"
    date-time <CRLF> <CRLF>\n   dr-recipients = *(dr-recipient <CRLF> <CRLF>)\n   dr-recipient
    = dr-recip-success / dr-recip-failure\n   dr-recip-success =\n                   \"Your
    message was successfully delivered to:\"\n                    mailbox \"at\" date-time\n
    \  dr-recip-failure = \"Your message was not delivered to:\"\n                           mailbox
    <CRLF>\n                   \"for the following reason:\" *word\n   report-point
    = [ \"mta\" mta-name \"in\" ] global-id\n   content-correlator = *word\n   mta-name
    = word\n      dr-per-message-fields =\n                / \"X400-Conversion-Date\"
    \":\" date-time\n                / \"X400-Subject-Submision-Identifier\" \":\"\n
    \                                     mts-msg-id\n                / \"X400-Content-Identifier\"
    \":\" printablestring\n                / \"X400-Content-Type\" \":\" mts-content-type\n
    \               / \"X400-Original-Encoded-Information-Types\" \":\"\n                              encoded-info\n
    \               / \"X400-Originator-and-DL-Expansion-History\" \":\"\n                              mailbox
    \";\" date-time \";\"\n                / \"X400-Reporting-DL-Name\" \":\" mailbox\n
    \               / \"X400-Content-Correlator\" \":\" content-correlator\n                /
    \"X400-Recipient-Info\" \":\" recipient-info\n                / \"X400-Subject-Intermediate-Trace-Information\"
    \":\"\n                                        x400-trace\n                / dr-extensions\n
    \     dr-per-recipient-fields =\n                / \"X400-Redirect-Recipient\"
    \":\" \"x400\" \";\" std-or\n                / \"X400-Mapped-Redirect-Recipient\"
    \":\" \"rfc822\" \";\"\n                      mailbox\n                / \"X400-Converted-EITs\"
    \":\" encoded-info \";\"\n                / \"X400-Delivery-Time\" \":\" date-time\n
    \               / \"X400-Type-of-MTS-User\" \":\" labelled-integer\n                /
    \"X400-Last-Trace\" \":\" [ encoded-info ] date-time\n                / \"X400-Supplementary-Info\"
    \":\"\n                      <\"> printablestring <\"> \";\"\n                /
    \"X400-Redirection-History\" \":\" redirect-history-item\n                / \"X400-Physical-Forwarding-Address\"
    \":\" mailbox\n                / \"X400-Originally-Specified-Recipient-Number\"
    \":\"\n                      integer\n                / dr-extensions\n      dr-extensions
    = \"X400-Discarded-DR-Extensions\" \":\"\n                        1# (object-identifier
    / labelled-integer)\n      dr-diagnostic = \"Reason\" labelled-integer-2\n                      [
    \";\" \"Diagnostic\" labelled-integer-2 ]\n      mts-field = \"X400-MTS-Identifier\"
    \":\" mts-msg-id\n                / \"X400-Originator\" \":\" mailbox\n                /
    \"X400-Recipients\" \":\" 1#mailbox\n                / \"Original-Encoded-Information-Types\"
    \":\"\n                                encoded-info\n                / \"X400-Content-Type\"
    \":\" mts-content-type\n                / \"X400-Content-Identifier\" \":\" printablestring\n
    \               / \"Priority\" \":\" priority\n                / \"Originator-Return-Address\"
    \":\" 1#mailbox\n                / \"DL-Expansion-History\" \":\" mailbox \";\"
    date-time \";\"\n                / \"Conversion\" \":\" prohibition\n                /
    \"Conversion-With-Loss\" \":\" prohibition\n                / \"Delivery-Date\"
    \":\" date-time\n                / \"Discarded-X400-MTS-Extensions\" \":\"\n                             1#(
    object-identifier / labelled-integer )\n      prohibition     = \"Prohibited\"
    / \"Allowed\"\n      mts-msg-id       = \"[\" global-id \";\" *text \"]\"\n      mts-content-type
    = \"P2\" /  labelled-integer\n                      / object-identifier\n      priority
    \       = \"normal\" / \"non-urgent\" / \"urgent\"\n      ipn-body-format = ipn-description
    <CRLF>\n                      [ ipn-extra-information <CRLF> ]\n                      [
    ipn-content-return ]\n      ipn-description = ipn-receipt / ipn-non-receipt\n
    \     ipn-receipt = \"Your message to:\" preferred-recipient <CRLF>\n               \"was
    received at\" receipt-time <CRLF> <CRLF>\n               \"This notification was
    generated\"\n                acknowledgement-mode <CRLF>\n               \"The
    following extra information was given:\" <CRLF>\n                ipn-suppl <CRLF>\n
    \     ipn-non-receipt = \"Your message to:\"\n              preferred-recipient
    <CRLF>\n              ipn-reason\n      ipn-reason = ipn-discarded / ipn-auto-forwarded\n
    \     ipn-discarded = \"was discarded for the following reason:\"\n                      discard-reason
    <CRLF>\n      ipn-auto-forwarded = \"was automatically forwarded.\" <CRLF>\n                      [
    \"The following comment was made:\"\n                              auto-comment
    ]\n      ipn-extra-information =\n               \"The following information types
    were converted:\"\n               encoded-info\n      ipn-content-return = \"The
    Original Message is not available\"\n                      / \"The Original Message
    follows:\"\n      preferred-recipient = mailbox\n      receipt-time        = date-time\n
    \     auto-comment        = printablestring\n      ipn-suppl           = printablestring\n
    \     discard-reason     = \"Expired\" / \"Obsoleted\" /\n                  \"User
    Subscription Terminated\" / \"IPM Deleted\"\n      acknowledgement-mode = \"Manually\"
    / \"Automatically\"\n      ipms-field = \"Supersedes\" \":\" 1*msg-id\n                 /
    \"Expires\" \":\" date-time\n                 / \"Reply-By\" \":\" date-time\n
    \                / \"Importance\" \":\" importance\n                 / \"Sensitivity\"
    \":\" sensitivity\n                 / \"Autoforwarded\" \":\" boolean\n                 /
    \"Incomplete-Copy\" \":\"\n                 / \"Content-Language\" \":\" 1#language\n
    \                / \"Message-Type\" \":\" message-type\n                 / \"Discarded-X400-IPMS-Extensions\"
    \":\"\n                       1#object-identifier\n                 / \"Autosubmitted\"
    \":\" autosubmitted\n      importance      = \"low\" / \"normal\" / \"high\"\n
    \     sensitivity     = \"Personal\" / \"Private\" /\n                             \"Company-Confidential\"\n
    \     language        = 2*ALPHA [ \"(\" language-description \")\" ]\n      language-description
    = printable-string\n      message-type    = \"Delivery Report\"\n                      /
    \"InterPersonal Notification\"\n                      / \"Multiple Part\"\n      autosubmitted
    \  = \"not-auto-submitted\"\n                      / \"auto-generated\"\n                      /
    \"auto-replied\"\n                      / \"auto-forwarded\"\n      redirect-comment
    \ = redirect-first *( redirect-subsequent )\n      redirect-first = \"Originally
    To:\"  mailbox  \"Redirected on\"\n               date-time \"To:\"  redirection-reason\n
    \     redirect-subsequent = mailbox  \"Redirected Again on\"\n               date-time
    \"To:\"  redirection-reason\n      redirection-history-item = \"intended recipient\"
    mailbox\n               \"redirected to\"  redirection-reason\n               \"on\"
    date-time\n      redirection-reason =\n               \"Recipient Assigned Alternate
    Recipient\"\n               / \"Originator Requested Alternate Recipient\"\n               /
    \"Recipient MD Assigned Alternate Recipient\"\n               / \"Directory Look
    Up\"\n               / \"Alias\"\n      subject-line  = \"Delivery-Report\" \"(\"
    status \")\"\n                      [ \"for\" destination ]\n      status        =
    \"success\" / \"failure\" / \"success and failures\"\n      destination   = mailbox
    / \"MTA\" word\n      extended-heading =\n          \"Prevent-NonDelivery-Report\"
    \":\"\n          / \"Generate-Delivery-Report\" \":\"\n          / \"Alternate-Recipient\"
    \":\" prohibition\n          / \"Disclose-Recipients\" \":\"  prohibition\n          /
    \"X400-Content-Return\" \":\" prohibition\n"
  title: Appendix E - BNF Summary
- contents:
  - 'Appendix F - Text format for MCGAM distribution

    '
  - "1.  Text Formats\n   This appendix defines text formats for exchange of four
    types of\n   mapping.\n   1.   Domain Name Space -> OR Address Space MCGAM\n   2.
    \  OR Address Space -> Domain Name Space MCGAM\n   3.   Domain Name Space -> OR
    Address of preferred gateway\n   4.   OR Address Space -> Domain Name of preferred
    gateway\n"
  - "2.  Mechanisms to register and to distribute MCGAMs\n   There is a well known
    set of MCGAM tables.\n   The global coordination of the mapping rules is a part
    of the DANTE\n   MailFLOW Project. New mapping rules may be defined by the authority\n
    \  responsible for the relevant name space. The rules need to be\n   registered
    with a national mapping registration authority, which in\n   turn passes them
    on to the central mapping registration authority.\n   All the collected mapping
    rules are merged together into the globally\n   coordinated mapping tables by
    the MailFLOW Project Team. The tables\n   are available from the national mapping
    registration authorities.\n   To get a contact address of the mapping registration
    authority for\n   the respective country or more information about the MailFLOW
    Project\n   contact:\n      SWITCH\n      MailFLOW Project Team\n      Limmatquai
    138\n      8001 Zuerich\n      Switzerland\n      email: mailflow@mailflow.dante.net\n
    \            S=MailFLOW;O=MailFLOW;P=DANTE;A=mailnet;C=fi;\n      fax:   +41 1
    268 15 68\n      tel:   +41 1 268 15 20\n"
  - "3.  Syntax Definitions\n   An address syntax is defined, which is compatible
    with the syntax\n   used for 822.domains.  By representing the OR addresses as
    domains,\n   all lookups can be mechanically implemented as domain -> domain\n
    \  mappings.  This syntax defined is initially for use in table format,\n   but
    the syntax is defined in a manner which makes it suitable to be\n   adapted for
    \ use with the  Domain Name Service.  This syntax allows\n   for a general representation
    of OR addresses, so that it can be used\n   in other applications.  Not all attributes
    are used in the table\n   formats defined.\n   To allow the mapping where a level
    of the hierarchy is omitted, the\n   pseudo-value \"@\" (not a printable string
    character) is used to\n   indicate omission of a level in the hierarchy.  This
    is distinct from\n   the form including the element with no value, although a
    correct\n   X.400 implementation will interpret both in the same manner.\n   This
    syntax is not intended to be handled by users.\n      dmn-or-address  = dmn-part
    *( \".\" dmn-part )\n      mn-part        = dmn-attribute \"$\" value\n      dmn-attribute
    \ = standard-type\n                      /  \"~\" dmn-printablestring\n      value
    \          = dmn-printablestring\n                      / \"@\"\n      dmn-printablestring
    =\n                      = *( dmn-char / dmn-pair )\n      dmn-char        = <\"{\",
    \"}\", \"*\", and any ps-char\n                                              except
    \".\">\n      dmn-pair        = \"\\.\"\n   An example usage:\n      ~ROLE$Big\\.Chief.ADMD$ATT.C$US\n
    \     PRMD$DEC.ADMD$@.C$US\n   The first example illustrates quoting of a \".\"
    and a domain define\n   attribute (ROLE).  The second  example illustrates omission
    of the\n   ADMD level. There shall be a strict ordering of all components in\n
    \  this table, with the most significant components on the RHS.   This\n   allows
    the encoding to be treated as a domain.\n   Various further restrictions are placed
    on the usage of dmn-or-\n   address in the address space mapping tables.\n   a.
    \  Only C, ADMD, PRMD, O, and up to four OUs may be used.\n   b.   No components
    shall be omitted from this hierarchy, although\n        the hierarchy may terminate
    at any level.  If the mapping is\n        to an omitted component, the \"@\" syntax
    is used.\n"
  - "4.  Table Lookups\n   When determining a match, there are aspects which apply
    to all\n   lookups.  Matches are always case independent. The key for all three\n
    \  tables is a domain. The longest possible match shall be obtained.\n   Suppose
    the table has two entries with the following keys:\n      K.L\n      J.K.L\n      Domain
    \"A.B.C\" will not return any matches.  Domain \"I.J.K.L\"\n      will match the
    entry \"J.K.L:.\n"
  - "5.  Domain -> OR Address MCGAM format\n   The BNF is:\n      domain-syntax \"#\"
    dmn-or-address \"#\"\n   EBNF.domain-syntax is defined in Section 4.2. Note that
    the trailing\n   \"#\" is used for clarity, as the dmn-or-address syntax might
    lead to\n   values with trailing blanks.  Lines starting with \"#\" are comments.\n
    \     For example:\n      AC.UK#PRMD$UK\\.AC.ADMD$GOLD 400.C$GB#\n      XEROX.COM#O$Xerox.ADMD$ATT.C$US#\n
    \     GMD.DE#O$@.PRMD$GMD.ADMD$DBP.C$DE#\n   A domain is looked up to determine
    the top levels of an OR Address.\n   Components of the domain which are not matched
    are used to build the\n   remainder of the OR address, as described in Section
    4.3.4.\n"
  - "6.  OR Address -> Domain MCGAM format\n   The syntax of this table is:\n      dmn-or-address
    \"#\" domain-syntax \"#\"\n      For example:\n      #\n      # Mapping table\n
    \     #\n      PRMD$UK\\.AC.ADMD$GOLD 400.C$GB#AC.UK#\n   The OR Address is used
    to generate a domain key.  It is important to\n   order the components correctly,
    and to fill in missing components in\n   the hierarchy.  Use of this mapping is
    described in Section 4.3.2.\n"
  - "7.  Domain -> OR Address of Preferred Gateway table\n   This uses the same format
    as the domain -> OR address MCGAM table.\n   In this case, the restriction to
    only use C/ADMD/PRMD/O/OU does not\n   apply.  Use of this mapping is described
    in Section 4.3.4. A domain\n   cannot appear in this table and in the domain to
    OR Address table.\n"
  - "8.  OR Addresss -> domain of Preferred Gateway table\n   This uses the same format
    as the OR Address -> domain MCGAM table.\n   Use of this mapping is described
    in Section 4.3.5. An OR Address\n   cannot appear in this table and in the OR
    Address to domain table.\n"
  title: Appendix F - Text format for MCGAM distribution
- contents:
  - "Appendix G - Conformance\n   This appendix defines a number of options, which
    a conforming gateway\n   shall specify.  Conformance to this specification shall
    not be\n   claimed if any of the mandatory features are not implemented.  A\n
    \  specification of conformance may list the service elements of Chapter\n   2,
    in order to be clear that full conformance is provied.  In\n   particular:\n   -
    \   Formats for all fields shall be followed.\n   -    The gateway shall enable
    MCGAMs to be used.\n   -    Formats for subject lines, delivery reports and IPNs
    shall\n        be followed.   A system which followed the syntax, but\n        translated
    text into a language other than english would be\n        conformant.\n   -    RFC
    1137 shall not be followed when mapping to SMTP.\n   -    All mappings of trace
    shall be implemented.\n   -    There shall be a mechanism to access all three
    global\n        mappings.\n   -    RFC 2157 shall be followed for mapping body
    parts.\n   -    When it is specified that a MIME format message is\n        generated,
    RFC 2045 shall be followed.\n   A gateway shall specify:\n   -    Which Interent
    Message Transport (822-MTS)  protocols are\n        supported.  If SMTP is supported,
    Appendex A of MIXER shall\n        be used.\n   -    Which X.400 versions  are
    supported (84, 88, 92).\n   -    Which mechanisms (table, X.500, DNS) are supported
    to access\n        MCGAMs.\n   -    The mechanism or mechanisms by which the global
    mapping\n        information is accessed.\n   The following are optional parts
    of this specification.  A conforming\n   implementation shall specify which of
    these it supports.\n   -    Support for the extension mappings of Appendix C.\n
    \  -    Support for returning illegal format content in a delivery\n        report\n
    \  -    Which address interpretation heuristics are supported\n        (4.3.4.1)\n
    \  -    If RFC 987 generated message ids are handled in a backwards\n        compatible
    manner (4.7.3.6)\n"
  title: Appendix G - Conformance
- contents:
  - "Appendix H - Change History: RFC 987, 1026, 1138, 1148\n   RFC 987 was the original
    document, and contained the key elements of\n   this specification.  It was specific
    to X.400(1984).  RFC 1026\n   specified a small number of necessary changes to
    RFC 987.\n   RFC 1138 was based on the RFC 987 work.  It contained an editorial\n
    \  error, and was reissued a few months later as RFC 1148.  RFC 1148\n   will
    be referred to here, as it is the document which is widely\n   referred to elsewhere.
    The major goal of RFC 1148 was to upgrade RFC\n   987 to X.400(1988).  It did
    this, but did not obsolete RFC 987, which\n   was recommended for use with X.400(1984).
    \ This appendix summarises\n   the changes made in going from RFC 987 to RFC 1148.\n
    \  RFC 1148 noted the following about its upgrade from RFC 987:\n   Unnecessary
    change is usually a bad idea.  Changes on the RFC 822\n   side are avoided as
    far as possible,  so that RFC 822 users do not\n   see arbitrary differences between
    systems conforming to this\n   specification, and those following RFC 987.  Changes
    on the X.400\n   side are minimised, but are more  acceptable, due to the mapping
    onto\n   a new set of services and protocols.\n"
  - "1.  Introduction\n   The model has shifted from a protocol based mapping to a
    service\n   based mapping.  This has increased the generality of the\n   specification,
    and improved the model.  This change affects the\n   entire document.\n   A restriction
    on scope has been added.\n"
  - "2.  Service Elements\n   -    The new service elements of X.400 are dealt with.\n
    \  -    A clear distinction is made between origination and\n        reception\n"
  - "3.  Basic Mappings\n   -    Add teletex support\n   -    Add object identifier
    support\n   -    Add labelled integer support\n   -    Make PrintableString <->
    ASCII mapping reversible\n   -    The printable string mapping is aligned to the
    NBS mapping\n        derived from RFC 987.\n"
  - "4.  Addressing\n   -    Support for new addressing attributes\n   -    The message
    ID mapping is changed to not be table driven\n"
  - "5.  Detailed Mappings\n   -    Define extended IPM Header, and use instead of
    second body\n        part for RFC 822 extensions\n   -    Realignment of element
    names\n   -    New syntax for reports, simplifying the header and\n        introducing
    a mandatory body format (the RFC 987 header\n        format was unusable)\n   -
    \   Drop complex autoforwarded mapping\n   -    Add full mapping for IP Notifications,
    defining a body\n        format\n   -    Adopt an MTS Identifier syntax in line
    with the OR Address\n        syntax\n   -    A new format for X400 Trace representation
    on the RFC 822\n        side\n"
  - "6.  Appendices\n   -    Move Appendix on restricted 822 mappings to a separate
    RFC\n   -    Delete Phonenet and SMTP Appendixes\n"
  title: 'Appendix H - Change History: RFC 987, 1026, 1138, 1148'
- contents:
  - 'Appendix I - Change History: RFC 1148 to RFC 1327

    '
  - "1.  General\n   -    The scope of the document was changed to cover X.400(1984),\n
    \       and so obsolete RFC 987.\n   -    Changes were made to allow usage to
    connect RFC 822 networks\n        using X.400\n   -    Text was tightened to be
    clear about optional and mandatory\n        aspects\n   -    A good deal of clarification\n
    \  -    A number of minor EBNF errors\n   -    Better examples are given\n   -
    \   Further X.400 upper bounds are handled correctly\n"
  - "2.  Basic Mappings\n   -    The encoding of object identifier is changed slightly\n"
  - "3.  Addressing\n   -    A global mapping of domain to preferred gateway is\n
    \       introduced.\n   -    An overflow mechanism is defined for RFC 822 addresses
    of\n        greater than 128 bytes\n   -    Changes were made to improve compatibility
    with the PDAM on\n        writing OR Addresses.\n   +         The PD and Terminal
    Type keywords were aligned to the\n             PDAM.  It is believed that minimal
    use has been made of\n             the RFC 1148 keywords.\n   +         P and
    A are allowed as alternate keys for PRMD and ADMD\n   +         Where keywords
    are different, the PDAM keywords are\n             alternatives on input.  This
    is mandatory.\n"
  - "4.  Detailed Mappings\n   -    The format of the Subject: lines is defined.\n
    \  -    Illegal use (repetition) of the heading EXTENSION is\n        corrected,
    and a new object identifier assigned.\n   -    The Delivery Report format is extensively
    revised in light\n        of operational experience.\n   -    The handling of
    redirects is significantly changed, as the\n        previous mechanism did not
    work.\n"
  - "5.  Appendices\n   -    An SMTP appendix is added, allowing optional use of the
    VRFY\n        command to improve probe information.\n   -    Handling of JNT Mail
    Acknowledge-To is changed slightly.\n   -    A DDA JNT-MAIL is allowed on input.\n
    \  -    The format definitions of Appendix F are explained further,\n        and
    a third table definition added.\n   -    An appendix on use with X.400(1984) is
    added.\n   -    Optional extensions are defined to give RFC 822 access to\n        further
    X.400 facilities.\n   -    An appendix on conformance is added.\n"
  title: 'Appendix I - Change History: RFC 1148 to RFC 1327'
- contents:
  - 'Appendix J - Change History: RFC 1327 to this Document

    '
  - "1.  General\n   This update is primarily for stability, and to fold in compatibility\n
    \  for MIME and to add support for the new NOTARY delivery status\n   notifications.
    \ Other general changes:\n   -    Various editorial updates\n   -    Minor EBNF
    errors\n   -    Reference to mapping table support by DNS and X.500.\n   -    Alignment
    to X.400(92)\n   -    Assignment of a new object identifier\n   -    Removal of
    specification relating to body mapping, which is\n        now defined in RFC 2157.\n"
  - "2.  Service Elements\n   -    Support of Auto-Submitted service\n"
  - "3.  Basic Mappings\n   -    Comments shall not be used in new headers, to remove
    parsing\n        ambiguity\n   -    RFC 1522 encoding may be used as an alternative
    to X.408\n        downgrade, where appropriate.\n   -    Correct handling of RFC
    822 four year dates.\n"
  - "4.  Addressing\n   -    Replaced the mandatory global address mapping with MCGAMs.\n
    \  -    Add codes and add a heuristic to align to the standard X.400\n        form
    of writing OR Addresses.\n   -    Improved text on ordering heuristic\n   -    Leading
    \"/\" interpretation added\n   -    All bar one of the address mapping heuristics
    made\n        mandatory.\n   -    Interpretation of domain defined attribute \"RFC-822\"
    made\n        mandatory in all cases\n   -    Make report request comments optional\n"
  - "5.  Detailed Mappings\n   -    Comments no longer maps to separate body part\n
    \  -    Allow Languages to be multi-valued\n   -    Change Content-Identifier
    to X400-Content-Identifier, in\n        order to avoid confusion with MIME.\n
    \  -    Reverse mapping of MIXER defined fields made mandatory\n   -    \"Expiry-Date:\"
    changed to \"Expires:\".\n   -    \"Obsoletes:\" changed to \"Supersedes:\".\n
    \  -    Define correct handling when \"Resent-Date:\" is present.\n"
  - "6.  Appendices\n   -    Change \"Content-Return\" to \"X400-Content-Return\"
    in Appendix\n        C.\n   -    Relaxation of restrictions on mapping 3 in Appendix
    F.\n   -    Add linkage to HARPOON in Appendix B.\n   -    RFC 2157 added to the
    conformance statement of Appendix\n         G.\n   -    Added Appendix L, with
    ASN. Summary.\n"
  title: 'Appendix J - Change History: RFC 1327 to this Document'
- contents:
  - "Appendix L - ASN.1 Summary\n   MIXER Definitions { iso org(3) dod(6) internet(1)
    mail(7)\n         mixer(1) mixer-core(3) definitions(1) }\n   DEFINITIONS IMPLICIT
    TAGS ::=\n   BEGIN\n   -- exports everything\n   IMPORTS\n   EXTENSION FROM\n
    \    MTSAbstractService {join-iso-ccit mhs-motis(6) mts(3)\n           modules(0)
    mts-abstract-service(1) }\n     HEADING-EXTENSION FROM\n       IPMSAbstractService
    {join-iso-ccit mhs-motis(6) ipms(1)\n             modules(0) abstract-service(3)
    }\n   rfc-822-field HEADING-EXTENSION\n           VALUE RFC822FieldList\n           ::=
    id-rfc-822-field-list\n   RFC822FieldList ::= SEQUENCE OF RFC822Field\n   RFC822Field
    ::= IA5String\n   dsn-header-list EXTENSION\n      RFC822FieldList\n      ::=
    id-dsn-header-list\n   dsn-field-list EXTENSION\n      RFC822FieldList\n      ::=
    id-dsn-field-list\n   internet ::= OBJECT IDENTIFIER  { iso org(3) dod(6) 1 }
    -- from RFC\n   1155\n   mail OBJECT IDENTIFIER ::= { internet 7 }  -- IANA assigned\n
    \  mixer OBJECT IDENTIFIER ::= { mail mixer(1) } -- inherited from RFC\n   1495\n
    \  mixer-core OBJECT IDENTIFIER ::= { mixer core(3) }\n   id-rfc-822-field-list
    OBJECT IDENTIFIER ::= {mixer-core 2}\n   id-dsn-header-list OBJECT IDENTIFIER
    ::= {mixer-core 3}\n   id-dsn-field-list OBJECT IDENTIFIER ::= {mixer-core 4}\n
    \  eit-mixer OBJECT IDENTIFIER ::= {mixer-core 5}\n                   -- the MIXER
    pseudo-EIT\n   END -- MIXER ASN.1\n"
  title: Appendix L - ASN.1 Summary
- contents:
  - "SECURITY CONSIDERATIONS\n   Security issues are not discussed in this memo.\n"
  title: SECURITY CONSIDERATIONS
- contents:
  - "AUTHOR'S ADDRESS\n   Steve Kille\n   Isode Ltd\n   The Dome\n   The Square\n
    \  Richmond\n   TW9 1DT\n   England\n   Phone: +44-181-332-9091\n   Internet EMail:
    S.Kille@ISODE.COM\n   X.400 Email: I=S; S=Kille; P=Isode; A=Mailnet; C=FI;\n   UFN:
    \ S.Kille, Isode, GB\n"
  title: AUTHOR'S ADDRESS
- contents:
  - "References\n   1.   CCITT , \"Recommendations X.400\", Message Handling Systems:\n
    \       System Model - Service Elements, October 1984.\n   2.   Allocchio, C.,
    \"MaXIM11 - Mapping between X.400 / Internet\n        Mail and Mail-11 mail\",
    RFC 2162, January 1998.\n   3.   Allocchio, C., \"Using the Internet DNS to Distribute
    MIXER\n        Conformant Global Address Mapping (MCGAM)\", RFC 2163,\n        January
    1998.\n   4.   Alvestrand, H., Kille, S., Miles, R., Rose, M., and S.\n        Thompson,
    \"Mapping between X.400 and RFC-822 Message\n        Bodies\", RFC 1495, August
    1993.\n   5.   Alvestrand, H., Romaguera, J., and K. Jordan, \"Rules for\n        Downgrading
    Messages for X.400(88) to X.400(84) When MIME\n        Content-Types are Present
    in the Messages (Harpoon)\", RFC\n        1496, August 1993.\n   6.   Alvestrand,
    H., and S. Thompson, \"Equivalences between X.400\n        and RFC-822 Message
    Bodies\", RFC 1494, August 1993.\n   7.   Alvestrand, H., \"Tags for the Identification
    of Languages\",\n        RFC 1766, March 1995.\n   8.   Alvestrand, H., \"Mapping
    between X.400 and RFC-822/MIME\n        Message Bodies\", RFC 2157, January 1998.\n
    \  9.   Freed, N., and N. Borenstein, \"Multipurpose Internet\n        Mail Extensions
    (MIME) Part One: Format of Internet Message\n        Bodies\", RFC 2045, November
    1996.\n   10.  Braden, R., \"Requirements for Internet Hosts -- Application\n
    \       and Support\", STD 3, RFC 1123, October 1989.\n   11.  CCITT/ISO, \"CCITT
    Recommendations X.420/ ISO/IEC 10021-7,\"\n        Message Handling Systems: Interpersonal
    Messaging System,\n        Dec 1988.\n   12.  CCITT/ISO, \"CCITT Recommendations
    X.411/ ISO/IEC 10021-4,\"\n        Message Handling Systems: Message Transfer
    System: Abstract\n        Service Definition and Procedures, Dec 1988.\n   13.
    \ CCITT/ISO, \"CCITT Recommendations X.400/ ISO/IEC 10021-1,\"\n        Message
    Handling: System and Service Overview , Dec 1988.\n   14.  CCITT/ISO, \"Specification
    of Abstract Syntax Notation One\n        (ASN.1),\" CCITT Recommendation X.208
    / ISO/IEC 8824, Dec\n        1988.\n   15.  CCITT/ISO, \"CCITT Recommendations
    X.400/ ISO/IEC 10021-1,\"\n        Message Handling: System and Service Overview
    , Dec 1992.\n   16.  Crocker, D., \"Standard of the Format of ARPA Internet Text\n
    \       Messages\", STD 11, RFC 822, August 1982.\n   17.  Kille, S., \"Mapping
    Between X.400 and RFC 822\", UK Academic\n        Community Report (MG.19) / RFC
    987, June 1986.\n   18.  Kille, S., \"Addendum to RFC 987\", UK Academic Community\n
    \       Report (MG.23) / RFC 1026, August 1987.\n   19.  Kille, S., \"Mapping
    Between X.400(1988) / ISO 10021 and RFC\n        822\", RFC 1138, October 1989.\n
    \  20.  Kille, S., \"Mapping Between X.400(1988) / ISO 10021 and RFC\n        822\",
    RFC 1148, March 1990.\n   21.  Kille, S., \"Mapping Between X.400(1988) / ISO
    10021 and RFC\n        822\", RFC 1327, May 1992.\n   22.  Kille, S., \"X.400
    1988 to 1984 downgrading\", RFC 1328, May\n        1992.\n   23.  Kille, S., \"A
    String Encoding of Presentation Address\", RFC\n        1278, November 1992.\n
    \  24.  Kille, S., \"A String Representation of Distinguished Name\",\n        RFC
    1485, January 1992.\n   25.  Kille, S., \"Using the OSI Directory to achieve User\n
    \       Friendly Naming\", RFC 1484, January 1992.\n   26.  Kille, S., \"Use of
    an X.500/LDAP directory to support MIXER\n        address mapping\", RFC 2164,
    January 1998.\n   27.  Koorland, N., \"Message Attachmment Work Group (MAWG):
    MAWG\n        Feasibility Project Guide,\" EMA Report, Version 1.5, Nov\n        1995.\n
    \  28.  Moore, K., and G. Vaudreuil, \"An Extensible Message Format for\n        Delivery
    Status Notifications\", RFC 1894, January 1996.\n   29.  Moore, K., \"SMTP Service
    Extensions for Delivery Status\n        Notifications\", RFC 1891, Januaty 1996.\n
    \  30.  Postel, J., \"SIMPLE MAIL TRANSFER PROTOCOL\", STD 10, RFC 821,\n        August
    1982.\n"
  title: References
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1998).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
