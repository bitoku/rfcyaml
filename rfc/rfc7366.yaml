- contents:
  - "        Encrypt-then-MAC for Transport Layer Security (TLS) and\n                Datagram
    Transport Layer Security (DTLS)\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document describes a means of negotiating the use of the\n
    \  encrypt-then-MAC security mechanism in place of the existing MAC-\n   then-encrypt
    mechanism in Transport Layer Security (TLS) and Datagram\n   Transport Layer Security
    (DTLS).  The MAC-then-encrypt mechanism has\n   been the subject of a number of
    security vulnerabilities over a\n   period of many years.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7366.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   2\n     1.1.  Conventions Used in This Document . . . . . . . . .
    . . .   2\n   2.  Negotiating Encrypt-then-MAC  . . . . . . . . . . . . . . .
    .   2\n     2.1.  Rationale . . . . . . . . . . . . . . . . . . . . . . . .   3\n
    \  3.  Applying Encrypt-then-MAC . . . . . . . . . . . . . . . . . .   3\n     3.1.
    \ Rehandshake Issues  . . . . . . . . . . . . . . . . . . .   5\n   4.  Security
    Considerations . . . . . . . . . . . . . . . . . . .   6\n   5.  IANA Considerations
    . . . . . . . . . . . . . . . . . . . . .   6\n   6.  Acknowledgements  . . .
    . . . . . . . . . . . . . . . . . . .   7\n   7.  References  . . . . . . . .
    . . . . . . . . . . . . . . . . .   7\n     7.1.  Normative References  . . .
    . . . . . . . . . . . . . . .   7\n     7.2.  Informative References  . . . .
    . . . . . . . . . . . . .   7\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   TLS [2] and DTLS [4] use a MAC-then-encrypt construction
    that was\n   regarded as secure at the time the original Secure Socket Layer (SSL)\n
    \  protocol was specified in the mid-1990s, but that is no longer\n   regarded
    as secure [5] [6].  This construction, as used in TLS and\n   later DTLS, has
    been the subject of numerous security vulnerabilities\n   and attacks stretching
    over a period of many years.  This document\n   specifies a means of switching
    to the more secure encrypt-then-MAC\n   construction as part of the TLS/DTLS handshake,
    replacing the current\n   MAC-then-encrypt construction.  (In this document, \"MAC\"
    refers to\n   \"Message Authentication Code\".)\n"
  - contents:
    - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST
      NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
      \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted
      as described in [1].\n"
    title: 1.1.  Conventions Used in This Document
  title: 1.  Introduction
- contents:
  - "2.  Negotiating Encrypt-then-MAC\n   The use of encrypt-then-MAC is negotiated
    via TLS/DTLS extensions as\n   defined in TLS [2].  On connecting, the client
    includes the\n   encrypt_then_mac extension in its client_hello if it wishes to
    use\n   encrypt-then-MAC rather than the default MAC-then-encrypt.  If the\n   server
    is capable of meeting this requirement, it responds with an\n   encrypt_then_mac
    in its server_hello.  The \"extension_type\" value for\n   this extension SHALL
    be 22 (0x16), and the \"extension_data\" field of\n   this extension SHALL be
    empty.  The client and server MUST NOT use\n   encrypt-then-MAC unless both sides
    have successfully exchanged\n   encrypt_then_mac extensions.\n"
  - contents:
    - "2.1.  Rationale\n   The use of TLS/DTLS extensions to negotiate an overall
      switch is\n   preferable to defining new ciphersuites because the latter would\n
      \  result in a Cartesian explosion of suites, potentially requiring\n   duplicating
      every single existing suite with a new one that uses\n   encrypt-then-MAC.  In
      contrast, the approach presented here requires\n   just a single new extension
      type with a corresponding minimal-length\n   extension sent by client and server.\n
      \  Another possibility for introducing encrypt-then-MAC would be to make\n   it
      part of TLS 1.3; however, this would require the implementation\n   and deployment
      of all of TLS 1.2 just to support a trivial code\n   change in the order of
      encryption and MAC'ing.  In contrast,\n   deploying encrypt-then-MAC via the
      TLS/DTLS extension mechanism\n   required changing less than a dozen lines of
      code in one\n   implementation (not including the handling for the new extension\n
      \  type, which was a further 50 or so lines of code).\n   The use of extensions
      precludes use with SSL 3.0, but then it's\n   likely that anything still using
      that protocol, which is nearly two\n   decades old, will be vulnerable to any
      number of other attacks\n   anyway, so there seems little point in bending over
      backwards to\n   accommodate SSL 3.0.\n"
    title: 2.1.  Rationale
  title: 2.  Negotiating Encrypt-then-MAC
- contents:
  - "3.  Applying Encrypt-then-MAC\n   Once the use of encrypt-then-MAC has been negotiated,
    processing of\n   TLS/DTLS packets switches from the standard:\n   encrypt( data
    || MAC || pad )\n   to the new:\n   encrypt( data || pad ) || MAC\n   with the
    MAC covering the entire packet up to the start of the MAC\n   value.  In TLS [2]
    notation, the MAC calculation for TLS 1.0 without\n   the explicit Initialization
    Vector (IV) is:\n   MAC(MAC_write_key, seq_num +\n       TLSCipherText.type +\n
    \      TLSCipherText.version +\n       TLSCipherText.length +\n       ENC(content
    + padding + padding_length));\n   and for TLS 1.1 and greater with an explicit
    IV is:\n   MAC(MAC_write_key, seq_num +\n       TLSCipherText.type +\n       TLSCipherText.version
    +\n       TLSCipherText.length +\n       IV +\n       ENC(content + padding +
    padding_length));\n   (For DTLS, the sequence number is replaced by the combined
    epoch and\n   sequence number as per DTLS [4].)  The final MAC value is then\n
    \  appended to the encrypted data and padding.  This calculation is\n   identical
    to the existing one, with the exception that the MAC\n   calculation is run over
    the payload ciphertext (the TLSCipherText\n   PDU) rather than the plaintext (the
    TLSCompressed PDU).\n   The overall TLS packet [2] is then:\n   struct {\n          ContentType
    type;\n          ProtocolVersion version;\n          uint16 length;\n          GenericBlockCipher
    fragment;\n          opaque MAC;\n          } TLSCiphertext;\n   The equivalent
    DTLS packet [4] is then:\n   struct {\n          ContentType type;\n          ProtocolVersion
    version;\n          uint16 epoch;\n          uint48 sequence_number;\n          uint16
    length;\n          GenericBlockCipher fragment;\n          opaque MAC;\n          }
    TLSCiphertext;\n   This is identical to the existing TLS/DTLS layout, with the
    only\n   difference being that the MAC value is moved outside the encrypted\n
    \  data.\n   Note from the GenericBlockCipher annotation that this only applies
    to\n   standard block ciphers that have distinct encrypt and MAC operations.\n
    \  It does not apply to GenericStreamCiphers or to GenericAEADCiphers\n   that
    already include integrity protection with the cipher.  If a\n   server receives
    an encrypt-then-MAC request extension from a client\n   and then selects a stream
    or Authenticated Encryption with Associated\n   Data (AEAD) ciphersuite, it MUST
    NOT send an encrypt-then-MAC\n   response extension back to the client.\n   Decryption
    reverses this processing.  The MAC SHALL be evaluated\n   before any further processing
    such as decryption is performed, and if\n   the MAC verification fails, then processing
    SHALL terminate\n   immediately.  For TLS, a fatal bad_record_mac MUST be generated
    [2].\n   For DTLS, the record MUST be discarded, and a fatal bad_record_mac\n
    \  MAY be generated [4].  This immediate response to a bad MAC\n   eliminates
    any timing channels that may be available through the use\n   of manipulated packet
    data.\n   Some implementations may prefer to use a truncated MAC rather than a\n
    \  full-length one.  In this case, they MAY negotiate the use of a\n   truncated
    MAC through the TLS truncated_hmac extension as defined in\n   TLS-Ext [3].\n"
  - contents:
    - "3.1.  Rehandshake Issues\n   The status of encrypt-then-MAC vs. MAC-then-encrypt
      can potentially\n   change during one or more rehandshakes.  Implementations
      SHOULD\n   retain the current session state across all rehandshakes for that\n
      \  session.  (In other words, if the mechanism for the current session\n   is
      X, then the renegotiated session should also use X.)  Although\n   implementations
      SHOULD NOT change the state during a rehandshake, if\n   they wish to be more
      flexible, then the following rules apply:\n   +------------------+---------------------+--------------------------+\n
      \  | Current Session  |     Renegotiated    |      Action to take      |\n   |
      \                 |       Session       |                          |\n   +------------------+---------------------+--------------------------+\n
      \  | MAC-then-encrypt |   MAC-then-encrypt  |        No change         |\n   |
      \                 |                     |                          |\n   | MAC-then-encrypt
      |   Encrypt-then-MAC  |        Upgrade to        |\n   |                  |
      \                    |     Encrypt-then-MAC     |\n   |                  |                     |
      \                         |\n   | Encrypt-then-MAC |   MAC-then-encrypt  |          Error
      \          |\n   |                  |                     |                          |\n
      \  | Encrypt-then-MAC |   Encrypt-then-MAC  |        No change         |\n   +------------------+---------------------+--------------------------+\n
      \              Table 1: Encrypt-then-MAC with Renegotiation\n   As the above
      table points out, implementations MUST NOT renegotiate a\n   downgrade from
      encrypt-then-MAC to MAC-then-encrypt.  Note that a\n   client or server that
      doesn't wish to implement the mechanism-change-\n   during-rehandshake ability
      can (as a client) not request a mechanism\n   change and (as a server) deny
      the mechanism change.\n   Note that these rules apply across potentially many
      rehandshakes.\n   For example, if a session were in the encrypt-then-MAC state
      and a\n   rehandshake selected a GenericAEADCiphers ciphersuite and a\n   subsequent
      rehandshake then selected a MAC-then-encrypt ciphersuite,\n   this would be
      an error since the renegotiation process has resulted\n   in a downgrade from
      encrypt-then-MAC to MAC-then-encrypt (via the\n   AEAD ciphersuite).\n   (As
      the text above has already pointed out, implementations SHOULD\n   avoid having
      to deal with these ciphersuite calisthenics by retaining\n   the initially negotiated
      mechanism across all rehandshakes.)\n   If an upgrade from MAC-then-encrypt
      to encrypt-then-MAC is negotiated\n   as per the second line in the table above,
      then the change will take\n   place in the first message that follows the Change
      Cipher Spec (CCS)\n   message.  In other words, all messages up to and including
      the CCS\n   will use MAC-then-encrypt, and then the message that follows will\n
      \  continue with encrypt-then-MAC.\n"
    title: 3.1.  Rehandshake Issues
  title: 3.  Applying Encrypt-then-MAC
- contents:
  - "4.  Security Considerations\n   This document defines encrypt-then-MAC, an improved
    security\n   mechanism to replace the current MAC-then-encrypt one.  Encrypt-then-\n
    \  MAC is regarded as more secure than the current mechanism [5] [6] and\n   should
    mitigate or eliminate a number of attacks on the current\n   mechanism, provided
    that the instructions on MAC processing given in\n   Section 3 are applied.\n
    \  An active attacker who can emulate a client or server with extension\n   intolerance
    may cause some implementations to fall back to older\n   protocol versions that
    don't support extensions, which will in turn\n   force a fallback to non-encrypt-then-MAC
    behaviour.  A\n   straightforward solution to this problem is to avoid fallback
    to\n   older, less secure protocol versions.  If fallback behaviour is\n   unavoidable,
    then mechanisms to address this issue, which affects all\n   capabilities that
    are negotiated via TLS extensions, are being\n   developed by the TLS working
    group [7].  Anyone concerned about this\n   type of attack should consult the
    TLS working group documents for\n   guidance on appropriate defence mechanisms.\n"
  title: 4.  Security Considerations
- contents:
  - "5.  IANA Considerations\n   IANA has added the extension code point 22 (0x16)
    for the\n   encrypt_then_mac extension to the TLS \"ExtensionType Values\" registry\n
    \  as specified in TLS [2].\n"
  title: 5.  IANA Considerations
- contents:
  - "6.  Acknowledgements\n   The author would like to thank Martin Rex, Dan Shumow,
    and the\n   members of the TLS mailing list for their feedback on this document.\n"
  title: 6.  Acknowledgements
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [1]  Bradner, S., \"Key words for use in RFCs
      to Indicate Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n   [2]
      \ Dierks, T. and E. Rescorla, \"The Transport Layer Security (TLS)\n        Protocol
      Version 1.2\", RFC 5246, August 2008.\n   [3]  Eastlake, D., \"Transport Layer
      Security (TLS) Extensions:\n        Extension Definitions\", RFC 6066, January
      2011.\n   [4]  Rescorla, E. and N. Modadugu, \"Datagram Transport Layer Security\n
      \       Version 1.2\", RFC 6347, January 2012.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [5]  Bellare, M. and C. Namprempre, \"Authenticated
      Encryption:\n        Relations among notions and analysis of the generic composition\n
      \       paradigm\", Proceedings of AsiaCrypt '00, Springer-Verlag LNCS\n        No.
      1976, p. 531, December 2000.\n   [6]  Krawczyk, H., \"The Order of Encryption
      and Authentication for\n        Protecting Communications (or: How Secure Is
      SSL?)\", Proceedings\n        of Crypto '01, Springer-Verlag LNCS No. 2139,
      p. 310, August\n        2001.\n   [7]  Moeller, B. and A. Langley, \"TLS Fallback
      Signaling Cipher Suite\n        Value (SCSV) for Preventing Protocol Downgrade
      Attacks\", Work in\n        Progress, July 2014.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Author's Address\n   Peter Gutmann\n   University of Auckland\n   Department
    of Computer Science\n   New Zealand\n   EMail: pgut001@cs.auckland.ac.nz\n"
  title: Author's Address
