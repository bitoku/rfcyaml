- contents:
  - '                          TN3270 Enhancements

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document describes a protocol that more fully supports 3270\n
    \  devices than do traditional tn3270 practices.  Specifically, it\n   defines
    a method of emulating both the terminal and printer members\n   of the 3270 family
    of devices via Telnet; it provides for the ability\n   of a Telnet client to request
    that it be assigned a specific device-\n   name (also referred to as \"LU name\"
    or \"network name\"); finally, it\n   adds support for a variety of functions
    such as the ATTN key, the\n   SYSREQ key, and SNA response handling.\n   This
    protocol is negotiated under the TN3270E Telnet Option, and is\n   unrelated to
    the Telnet 3270 Regime Option as defined in RFC 1041\n   [1].\n"
  title: Abstract
- contents:
  - "TABLE OF CONTENTS\n   1.  Introduction ...............................................
    \ 2\n      1.1  Changes to RFC 1647 ....................................  4\n
    \  2.  TN3270E OVERVIEW ...........................................  5\n   3.
    \ COMMAND NAMES AND CODES ....................................  6\n   4.  COMMAND
    MEANINGS ...........................................  7\n   5.  DEFAULT SPECIFICATION
    ......................................  9\n   6.  MOTIVATION .................................................
    \ 9\n   7.  TN3270E SUB-NEGOTIATION RULES ..............................  9\n
    \     7.1  DEVICE-TYPE Negotiation ................................  9\n          7.1.1
    Device Pools ...................................... 10\n          7.1.2 CONNECT
    Command ................................... 12\n          7.1.3 ASSOCIATE Command
    ................................. 12\n          7.1.4 Accepting a Request ...............................
    13\n          7.1.5 REJECT Command .................................... 13\n      7.2
    \ FUNCTIONS Negotiation .................................. 14\n          7.2.1
    Commands .......................................... 14\n          7.2.2 List of
    TN3270E Functions ......................... 16\n   8.  TN3270E DATA MESSAGES ......................................
    16\n      8.1  The TN3270E Message Header ............................. 18\n          8.1.1
    DATA-TYPE Field ................................... 18\n          8.1.2 REQUEST-FLAG
    Field ................................ 19\n          8.1.3 RESPONSE-FLAG Field
    ............................... 19\n          8.1.4 SEQ-NUMBER Field ..................................
    20\n   9.  BASIC TN3270E .............................................. 20\n      9.1
    \ 3270 Mode and NVT Mode ................................. 21\n   10. DETAILS
    OF PROCESSING TN3270E FUNCTIONS .................... 22\n      10.1 The SCS-CTL-CODES
    Function ............................. 22\n      10.2 The DATA-STREAM-CTL Function
    ........................... 23\n      10.3 The BIND-IMAGE Function ................................
    24\n      10.4 The RESPONSES Function ................................. 25\n         10.4.1
    Response Messages ................................. 26\n      10.5 The SYSREQ
    Function .................................... 28\n         10.5.1 Background ........................................
    28\n         10.5.2 TN3270E Implementation of SYSREQ .................. 29\n   11.
    THE 3270 ATTN KEY .......................................... 30\n   12. 3270 STRUCTURED
    FIELDS ..................................... 31\n   13. IMPLEMENTATION GUIDELINES
    .................................. 31\n      13.1 3270 Data Stream Notes .................................
    31\n      13.2 Negotiation of the TN3270E Telnet Option ............... 32\n      13.3
    A \"Keep-alive\" Mechanism ............................... 32\n      13.4 Examples
    ............................................... 32\n   14. SECURITY CONSIDERATIONS
    .................................... 36\n   15. REFERENCES .................................................
    36\n   16. AUTHOR'S NOTE .............................................. 37\n   17.
    AUTHOR'S ADDRESS ........................................... 37\n   18. Full Copyright
    Statement ................................... 38\n"
  title: TABLE OF CONTENTS
- contents:
  - "1.  Introduction\n   Traditionally, support for 3270 terminal emulation over
    Telnet has\n   been accomplished by the de facto standard of negotiating three\n
    \  separate Telnet Options - Terminal-Type [2], Binary Transmission [3],\n   and
    End of Record [4].  Note that there is no RFC that specifies this\n   negotiation
    as a standard.  RFC 1041 attempted to standardize the\n   method of negotiating
    3270 terminal support by defining the 3270\n   Regime Telnet Option.  Very few
    developers and vendors ever\n   implemented RFC 1041.\n   This document will refer
    to the existing practice of negotiating\n   these three Telnet Options before
    exchanging the 3270 data stream as\n   \"traditional tn3270\".  Traditional tn3270
    is documented in [10].\n   NOTE: Except where otherwise stated, this document
    does not\n   distinguish between Telnet servers that represent SNA devices and\n
    \  those that represent non-SNA 3270 devices.\n   All references in this document
    to the 3270 data stream, 3270 data\n   stream commands, orders, structured fields
    and the like rely on [5].\n   References to SNA Request and Response Units rely
    on [6].  References\n   to SNA versus non-SNA operation rely on [7].\n   The key
    words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\",
    \"SHOULD NOT\", \"RECOMMENDED\",  \"MAY\", and \"OPTIONAL\" in this\n   document
    are to be interpreted as described in RFC 2119.\n   There were several shortcomings
    in traditional tn3270; among them\n   were the following:\n    - It provided no
    capability for Telnet clients to emulate the 328x\n      class of printers.\n
    \   - There was no mechanism by which a Telnet client could request that\n      a
    connection be associated with a given 3270 device-name.  This\n      can be of
    importance when a terminal session is being established,\n      since many host
    applications behave differently depending on the\n      network name of the terminal.
    \ In the case of printer emulation,\n      this capability is an absolute necessity
    because a large number of\n      host applications have some method of pre-defining
    printer\n      destinations.\n    - The 3270 ATTN and SYSREQ keys were not universally
    supported.\n    - There was no support for the SNA positive/negative response\n
    \     process.  This is particularly important if printer emulation is\n      to
    function properly, but is also useful for some terminal\n      applications.  A
    positive response is used to indicate that the\n      previously received data
    has been successfully processed.  A\n      negative response indicates some sort
    of error has occurred while\n      processing the previously received data; this
    could be caused by\n      the host application building a 3270 data stream that
    contains an\n      invalid command, or by a mechanical error at the client side,\n
    \     among other things.\n    - There was no mechanism by which the client could
    access the SNA\n      Bind information.  The Bind image contains a detailed description\n
    \     of the session between the Telnet server and the host application.\n    -
    There was no mechanism by which the server could determine whether\n      a client
    supported 3270 structured fields, or a client could\n      request that it receive
    them.\n"
  - contents:
    - "1.1 Changes to RFC 1647\n   This document replaces RFC 1647; the following
      is a summary of the\n   changes that have been incorporated:\n   - Reworded
      the Introduction to refer to traditional tn3270 in the\n     past tense.\n     Affected
      sections: 1.\n   - Added this section documenting changes to RFC 1647\n     Affected
      sections: 1.1\n   - Clarified the specification of numeric literals contained
      in the\n     document.\n     Affected sections: 3. (first paragraph)\n   - Extensively
      revised several sections to\n     1) clarify the motivation behind and use of
      the ASSOCIATE\n        command\n     2) remove restrictive wording regarding
      the organization\n        and use of server maintained device pools\n     3)
      distinguish between device-names and resource-names in the\n        TN3270E
      device-type negotiation, and define a maximum length for\n        device-names
      and resource-names\n     Affected sections: 4. (DEVICE-TYPE REQUEST command)
      and 7.1.1\n                            through 7.1.6\n   - Corrected the erroneous
      specification of the format of the\n     function-list sent during TN3270E functions
      negotiation.\n     Affected sections: 7.2.1 (first paragraph)\n   - Added a
      statement addressing what a client or server should do\n     if an impasse is
      reached during TN3270E functions negotiation.\n     Affected sections: 7.2.1
      (last paragraph)\n   - Added a DATA-TYPE of PRINT-EOJ with a value of 0x08 to
      support\n     the end-of-job indication for printers.\n     Affected sections:
      8.1.1, 10.1, 10.2\n   - Clarified the description of the SEQ-NUMBER Field to
      state that\n     1) the field should be sent in network byte order (big endian)\n
      \    2) either byte that contains a 0xff must be doubled to 0xffff\n        before
      sending, and stripped back to 0xff after receipt.\n     Affected sections: 8.1.4\n
      \  - Defined the format and maximum length of the Bind image.\n     Affected
      sections: 10.3 (fourth paragraph)\n   - Clarified the misleading wording regarding
      allowable DATA-TYPEs\n     when BIND-IMAGE has been negotiated and a BIND has
      been sent.\n     Affected sections: 10.3 (last paragraph)\n   - Clarified the
      use of the SEQ-NUMBER field in regards to when it\n     should be reset to zero.\n
      \    Affected sections: 10.4 (last paragraph)\n   - Clarified the format of
      the data when the DATA-TYPE field is\n     SSCP-LU-DATA.\n     Affected sections:
      10.5.2 (fourth paragraph)\n   - Reworded the Security section to refer to Kerberos.\n
      \    Affected sections: 14.\n"
    title: 1.1 Changes to RFC 1647
  title: 1.  Introduction
- contents:
  - "2.  TN3270E Overview\n   In order to address these issues, this document proposes
    a new Telnet\n   Option - TN3270E.  Telnet clients and servers would be free to\n
    \  negotiate support of the TN3270E option or not. If either side does\n   not
    support TN3270E, traditional tn3270 can be used; otherwise, a\n   sub-negotiation
    will occur to determine what subset of TN3270E will\n   be used on the session.
    \ It is anticipated that a client or server\n   capable of both types of 3270
    emulation would attempt to negotiate\n   TN3270E first, and only negotiate traditional
    tn3270 if the other\n   side refuses TN3270E.\n   Once a client and server have
    agreed to use TN3270E, negotiation of\n   the TN3270E suboptions can begin.  The
    two major elements of TN3270E\n   sub-negotiation are:\n    - a device-type negotiation
    that is similar to, but somewhat\n      more complicated than, the existing Telnet
    Terminal-Type Option.\n    - the negotiation of a set of supported 3270 functions,
    such as\n      printer data stream type (3270 data stream or SNA Character\n      Stream),
    positive/negative response exchanges, device status\n      information, and the
    passing of BIND information from server to\n      client.\n   Successful negotiation
    of these two suboptions signals the beginning\n   of 3270 data stream transmission.
    In order to support several of the\n   new functions in TN3270E, each data message
    must be prefixed by a\n   header.  This header will contain flags and indicators
    that convey\n   such things as positive and negative responses and what type of
    data\n   follows the header (for example, 3270 data stream, SNA Character\n   Stream,
    or device status information).\n"
  title: 2.  TN3270E Overview
- contents:
  - "3.  Command Names and Codes\n   Please note that all numeric literals in this
    document specify\n   decimal values, unless they are preceded by \"0x\", in which
    case a\n   hexadecimal value is represented.\n       TN3270E            40\n         ASSOCIATE
    \         00\n         CONNECT            01\n         DEVICE-TYPE        02\n
    \        FUNCTIONS          03\n         IS                 04\n         REASON
    \            05\n         REJECT             06\n         REQUEST            07\n
    \        SEND               08\n       Reason-codes\n         CONN-PARTNER       00\n
    \        DEVICE-IN-USE      01\n         INV-ASSOCIATE      02\n         INV-NAME
    \          03\n         INV-DEVICE-TYPE    04\n         TYPE-NAME-ERROR    05\n
    \        UNKNOWN-ERROR      06\n         UNSUPPORTED-REQ    07\n       Function
    Names\n         BIND-IMAGE         00\n         DATA-STREAM-CTL    01\n         RESPONSES
    \         02\n         SCS-CTL-CODES      03\n         SYSREQ             04\n"
  title: 3.  Command Names and Codes
- contents:
  - "4.  Command Meanings\n   Refer to the Telnet Protocol Specification [8] for the
    meaning of\n   IAC, DO, WILL, etc.\n   IAC WILL TN3270E\n      The sender of this
    command is willing to send TN3270E information\n      in subsequent sub-negotiations.\n
    \  IAC WON'T TN3270E\n      The sender of this command refuses to send TN3270E
    information.\n   IAC DO TN3270E\n      The sender of this command is willing to
    receive TN3270E\n      information in subsequent sub-negotiations.\n   IAC DON'T
    TN3270E\n      The sender of this command refuses to receive TN3270E information.\n
    \  Note that while they are not explicitly negotiated, the equivalent of\n   the
    Telnet Binary Transmission Option [3] and the Telnet End of\n   Record Option
    [4] is implied in the negotiation of the TN3270E\n   Option.  That is, a party
    to the negotiation that agrees to support\n   TN3270E is automatically required
    to support bi-directional binary\n   and EOR transmissions.\n   IAC SB TN3270E
    SEND DEVICE-TYPE IAC SE\n      Only the server may send this command.  This command
    is used to\n      request that the client transmit a device-type and, optionally,\n
    \     device-name information.\n   IAC SB TN3270E DEVICE-TYPE REQUEST <device-type>\n
    \      [ [CONNECT <resource-name>] | [ASSOCIATE <device-name>] ] IAC SE\n      Only
    the client may send this command.  It is used in response to\n      the server's
    SEND DEVICE-TYPE command, as well as to suggest\n      another device-type after
    the server has sent a DEVICE-TYPE REJECT\n      command (see below).  This command
    requests emulation of a\n      specific 3270 device type and model.  The REQUEST
    command may\n      optionally include either the CONNECT or the ASSOCIATE command\n
    \     (but not both).  If present, CONNECT must be followed by\n      <resource-name>
    and ASSOCIATE must be followed by <device-name>.\n      (See the section entitled
    \"DEVICE-TYPE Negotiation\" for more\n      detailed information.)\n   IAC SB
    TN3270E DEVICE-TYPE IS <device-type> CONNECT\n       <device-name> IAC SE\n      Only
    the server may send this command.  This command is used to\n      accept a client's
    DEVICE-TYPE REQUEST command and to return the\n      server-defined device-name.\n
    \  IAC SB TN3270E DEVICE-TYPE REJECT REASON <reason-code> IAC SE\n      Only the
    server may send this command.  This command is used to\n      reject a client's
    DEVICE-TYPE REQUEST command.\n   IAC SB TN3270E FUNCTIONS REQUEST <function-list>
    IAC SE\n      Either side may send this command.  This command is used to\n      suggest
    a set of 3270 functions that will be supported on this\n      session.  It is
    also sent as an implicit rejection of a previous\n      FUNCTIONS REQUEST command
    sent by the other side (see the section\n      entitled \"FUNCTIONS Negotiation\"
    for more information).  Note that\n      when used to reject a FUNCTIONS REQUEST
    command, the function-list\n      must not be identical to that received in the
    previous REQUEST\n      command.\n   IAC SB TN3270E FUNCTIONS IS <function-list>
    IAC SE\n      Either side may send this command.  This command is sent as a\n
    \     response to a FUNCTIONS REQUEST command and implies acceptance of\n      the
    set of functions sent to it in the REQUEST command.  Note that\n      the list
    of functions in the FUNCTIONS IS command must match the\n      list that was received
    in the previous FUNCTIONS REQUEST command.\n"
  title: 4.  Command Meanings
- contents:
  - "5.  Default Specification\n   WON'T TN3270E\n   DON'T TN3270E\n   i.e., TN3270E
    will not be used.\n"
  title: 5.  Default Specification
- contents:
  - "6.  Motivation\n   See the section entitled \"Introduction\".\n"
  title: 6.  Motivation
- contents:
  - "7.  TN3270E Sub-negotiation Rules\n   Once it has been agreed that TN3270E will
    be supported, the first\n   sub-negotiation must concern the DEVICE-TYPE (and
    possibly device-\n   name) information.  Only after that has been successfully
    negotiated\n   can the client and server exchange FUNCTIONS information.  Only
    after\n   both DEVICE-TYPE and FUNCTIONS have been successfully negotiated can\n
    \  3270 data stream transmission occur.\n"
  - contents:
    - "7.1 DEVICE-TYPE Negotiation\n   Device-type names are NVT ASCII strings, all
      upper case.\n   Device-type (and device-name) negotiation begins when the server\n
      \  transmits the DEVICE-TYPE SEND command to the client.  The client\n   responds
      with the DEVICE-TYPE REQUEST command, which must include a\n   device-type and
      may include a resource-name or device-name request.\n   Valid device-types are:\n
      \    erminals: IBM-3278-2  IBM-3278-2-E  (24 row x 80 col display)\n               IBM-3278-3
      \ IBM-3278-3-E  (32 row x 80 col display)\n               IBM-3278-4  IBM-3278-4-E
      \ (43 row x 80 col display)\n               IBM-3278-5  IBM-3278-5-E  (27 row
      x 132 col display)\n               IBM-DYNAMIC            (no pre-defined display
      size)\n     printers: IBM-3287-1\n   Note that the use of '3278' and '3287'
      is NOT intended to exclude any\n   particular device capabilities; they are
      used here only because they\n   are commonly known designations for a terminal
      and a printer member\n   of the 3270 family of devices.  The intention is to
      simplify the\n   device-type negotiation (in comparison to traditional tn3270)
      by\n   minimizing the number of possible device-types, and by breaking the\n
      \  association of a specific piece of IBM hardware with a related set of\n   data
      stream capabilities.  For example, negotiation of device-type\n   IBM-3278-2-E
      does NOT in and of itself preclude the use of any of the\n   functions associated
      with a physical 3279 model S2B.  A client's\n   ability to support the more
      advanced functions of the 3270 data\n   stream will be indicated not by negotiation
      of an IBM device type and\n   model number, but rather by the combination of
      Read Partition Query\n   and Query Reply.\n   All of the terminal device-types
      support a \"primary\" display size of\n   24 rows by 80 columns.  The \"-3\",
      \"-4\" and \"-5\" types each support an\n   \"alternate\" display size as noted
      in the above list.  The IBM-DYNAMIC\n   device-type implies no pre-defined alternate
      display size; this value\n   will be passed from the client to host applications
      as part of the\n   Query Reply structured field, and it can represent any display
      size\n   the client and the host application can support.\n   Terminal device-types
      with the \"-E\" suffix should only be negotiated\n   by clients that are willing
      to support some subset of the 3270\n   \"extended data stream\".  This usually
      includes at a minimum support\n   for extended colors and highlighting, but
      may also include a number\n   of other functions, such as graphics capability,
      alternate character\n   sets, and partitions.\n   Clients that negotiate a terminal
      device-type with the \"-E\" suffix or\n   the DYNAMIC type, as well as those
      that negotiate a printer device-\n   type, must be able to accept and respond
      to a Read Partition Query\n   command (see the section entitled \"3270 Structured
      Fields\").  This\n   allows the client to indicate to host applications which
      subsets of\n   the 3270 extended data stream the client is willing to support.\n
      \  In a VTAM/SNA environment, negotiation of IBM-DYNAMIC as the device-\n   type
      should result in a Bind in which the Presentation Services Usage\n   screen
      field (the eleventh byte in the logmode's PSERVIC field) is\n   set to 0x03,
      indicating that the alternate screen size will be\n   determined by the Query
      Reply (Usable Area).\n"
    - contents:
      - "7.1.1 Device Pools\n   An explanation of the CONNECT and ASSOCIATE commands
        first requires a\n   discussion of the organization of terminal and printer
        device pools\n   that the server maintains and from which it selects device-names
        to\n   assign to session requests.  Definition of a few terms is also in\n
        \  order.\n   The terms \"device-name\", \"LU name\" and \"network name\"
        can be\n   considered interchangeable in this document.  They refer to a\n
        \  specific terminal or printer device.\n   The term \"resource-name\" is
        less specific; it may refer to a device-\n   name, but it may also be the
        name of a pool of printer or terminal\n   devices.  Such a named pool could
        serve to group devices with similar\n   operational or administrative characteristics.
        \ In fact, this\n   document places no restrictions on how a server makes
        use of\n   resource-names, so long as the server can take a resource-name\n
        \  specified by the client and use it to come up with a device-name to\n   assign
        to the session.  Note, however, that servers must avoid\n   allowing ambiguity;
        for example, they must not allow the definition\n   of a device-name with
        the same name as that of a pool of devices.\n   Device-names and resource-names
        are specified as NVT ASCII strings in\n   which upper and lower case are considered
        equivalent.  The length of\n   device-names and resource-names should not
        exceed 8 bytes.\n   A \"generic session request\" is one which includes neither
        the CONNECT\n   nor the ASSOCIATE command, while a \"specific session request\"
        is one\n   that includes either the CONNECT or the ASSOCIATE command.\n   If
        a TN3270E server wishes to support traditional tn3270 clients, it\n   must
        maintain a set of terminal device-names that can be used to\n   satisfy requests
        from such clients for terminal sessions.  This same\n   pool could be used
        to satisfy generic requests for terminal sessions\n   from TN3270E clients.\n
        \  The server may also maintain any number of other pools of device-\n   names.
        \ For example, there could be a pool of terminal device-names\n   reserved
        for a specific department within the organization, or a pool\n   of terminal
        device-names that have access to certain applications on\n   the host.\n   For
        any of these terminal device pools, the TN3270E server may also\n   have defined
        a \"partner\" or \"paired\" printer device for each terminal\n   in the pool.
        \ There should be a unique, one-to-one mapping between a\n   terminal and
        its associated printer.  The reasoning behind such a\n   configuration is
        to allow for those host applications that produce\n   printed output bound
        for a printer whose device-name is determined by\n   the device-name of the
        terminal that initiated the print request.\n   These printer devices can only
        be assigned to specific printer\n   session requests that use the ASSOCIATE
        command (see below).\n   In addition, the TN3270E server may also maintain
        one or more pools\n   of printer device-names that are not associated with
        any terminal.\n   These printer devices can only be assigned to specific printer\n
        \  session requests that use the CONNECT command (see below).  This\n   allows
        for those host applications that generate printed output bound\n   for a printer
        whose device-name is determined by something other than\n   the device-name
        of the terminal that initiated the print request (for\n   example, when the
        userid of the person signed on to a terminal\n   determines the print destination).
        \ It is also possible that a pool\n   of printer device-names could be maintained
        to satisfy generic\n   requests for printers (i.e., those that specify neither
        CONNECT nor\n   ASSOCIATE).\n"
      title: 7.1.1 Device Pools
    - contents:
      - "7.1.2 CONNECT Command\n   CONNECT can be used by the client in two ways:
        if the resource-name\n   it specifies is a device-name, then the client is
        requesting a\n   specific device-name.  If the specified resource-name is
        not a\n   device-name, then the client is requesting any one of the device-\n
        \  names associated with the resource-name.\n   In either case, the resource
        indicated by the specified resource-name\n   must not conflict with the device-type;
        e.g., if the client requests\n   DEVICE-TYPE IBM-3287-1 (a printer) and specifies
        CONNECT T1000001,\n   but T1000001 is a device-name defined at the host as
        a terminal, then\n   the server must deny the request.  Further, if the requested\n
        \  resource-name is a device-name already associated with some other\n   Telnet
        session, or if it is not defined to the server, the server\n   must deny the
        request.\n"
      title: 7.1.2 CONNECT Command
    - contents:
      - "7.1.3 ASSOCIATE Command\n   ASSOCIATE can be used by the client only when
        requesting a DEVICE-\n   TYPE that represents a printer, and the specified
        device-name must be\n   that of a terminal that was returned by the server
        in a previous\n   DEVICE-TYPE IS <device-type> CONNECT <device-name> command.\n
        \  The ASSOCIATE command requests that this session be assigned the\n   device-name
        of the printer that is paired with the terminal named in\n   the request.
        \ If the device-type does not represent a printer, or if\n   the device-name
        is not that of a terminal, then the server must deny\n   the request.  Also,
        if the server does not have defined a partner\n   printer for the specified
        terminal, it must deny the request.\n   The use of the ASSOCIATE command is
        to be as follows:  A client first\n   connects and requests a terminal from
        one of the terminal pools; it\n   then uses the terminal device-name returned
        by the server (see\n   \"Accepting a Request\", section 7.1.4 below) in a
        second session\n   request, this time asking for the printer that is paired
        with the\n   terminal session it just established.  This allows clients to\n
        \  associate a printer session with a terminal rather than having to\n   have
        prior knowledge of a printer device-name.\n"
      title: 7.1.3 ASSOCIATE Command
    - contents:
      - "7.1.4 Accepting a Request\n   The server must accept the client's request
        or deny it as a whole -\n   it cannot, for example, accept the DEVICE-TYPE
        request but deny the\n   CONNECT portion.\n   If the server wishes to accept
        the request, it sends back the\n   DEVICE-TYPE IS command confirming the requested
        device-type and the\n   CONNECT command specifying the device-name of the
        terminal or printer\n   assigned to this session.\n   Normally, the client
        should accept any DEVICE-TYPE IS <device-type>\n   CONNECT <device-name> sent
        by the server.  An exception to this would\n   be if the client must (e.g.,
        to satisfy local-site policy) be\n   connected to a specific LU name and is
        presented with a device-name\n   which does not match the one requested by
        the client (this could\n   happen, for example, if the client requested what
        it thought was a\n   device-name, but what was defined at the server as the
        name of a pool\n   of devices).  In this case, the client should reject the
        DEVICE-TYPE\n   IS command by terminating TN3270E negotiations.\n"
      title: 7.1.4 Accepting a Request
    - contents:
      - "7.1.5 REJECT Command\n   If the server wishes to deny the request, it sends
        back the DEVICE-\n   TYPE REJECT command with one of the following reason-codes:\n
        \  Reason code name         Explanation\n   ----------------         -----------------------------------\n
        \  INV-DEVICE-TYPE          The server does not support the\n                            requested
        device-type.\n   INV-NAME                 The resource-name or device-name\n
        \                           specified in the CONNECT or ASSOCIATE\n                            command
        is not known to the server.\n   DEVICE-IN-USE            The requested device-name
        is\n                            already associated with another\n                            session.\n
        \  TYPE-NAME-ERROR          The requested device-name or\n                            resource-name
        is incompatible\n                            with the requested device-type\n
        \                           (such as terminal/printer mismatch).\n   UNSUPPORTED-REQ
        \         The server is unable to satisfy\n                            the
        type of request sent by the\n                            client; e.g., a specific
        terminal\n                            or printer was requested but the\n                            server
        does not have any such pools of\n                            device-names
        defined to it, or the\n                            ASSOCIATE command was used
        but no\n                            partner printers are defined to the\n
        \                           server.\n   INV-ASSOCIATE            The client
        used the ASSOCIATE\n                            command and either the device-type\n
        \                           is not a printer or the device-name\n                            is
        not a terminal.\n   CONN-PARTNER             The client used the CONNECT command\n
        \                           to request a specific printer but\n                            the
        device-name requested is the\n                            partner to some
        terminal.\n   UNKNOWN-ERROR            Any other error in device type or\n
        \                           name processing has occurred.\n   The process
        of negotiating a device-type and device-name that are\n   acceptable to both
        client and server may entail several iterations of\n   DEVICE-TYPE REQUEST
        and DEVICE-TYPE REJECT commands.  The client must\n   make use of the reason-code
        specified by the server in any DEVICE-\n   TYPE REJECT command(s) to minimize
        the amount of negotiation\n   necessary.  For example, if the client initially
        requests that it be\n   assigned a specific terminal device-name via the CONNECT
        command, and\n   the server rejects the request with a reason-code of UNSUPPORTED-REQ,\n
        \  the client must make no further specific terminal requests in the\n   negotiations.
        \ If at any point in the process either side wishes to\n   \"bail out,\" it
        can simply send a WON'T (or DON'T) TN3270E command to\n   the other side.
        \ At this point both sides are free to negotiate other\n   Telnet options
        (including traditional tn3270).\n"
      title: 7.1.5 REJECT Command
    title: 7.1 DEVICE-TYPE Negotiation
  - contents:
    - "7.2 FUNCTIONS Negotiation\n   Once the DEVICE-TYPE negotiation has successfully
      completed (i.e,\n   when the client receives a DEVICE-TYPE IS command that is\n
      \  acceptable), the client must initiate the FUNCTIONS negotiation by\n   sending
      the FUNCTIONS REQUEST command to the server.  After this\n   initial REQUEST
      command, both sides are free to transmit FUNCTIONS\n   REQUEST and FUNCTIONS
      IS commands as needed.\n"
    - contents:
      - "7.2.1 Commands\n   The FUNCTIONS REQUEST command contains a list of the TN3270E\n
        \  functions that the sender would like to see supported on this\n   session.
        \ All functions not in the list are to be considered\n   unsupported.  The
        list is terminated by the IAC code that precedes\n   the SE command.  Functions
        may appear in any order in the list.\n   Upon receipt of a FUNCTIONS REQUEST
        command, the recipient has two\n   choices:\n   - it may respond in the positive
        (meaning it agrees to support\n     all functions in the list, and not to
        transmit any data related to\n     functions not in the list).  To do this,
        it sends the FUNCTIONS IS\n     command with the function-list exactly as
        it was received.  At this\n     point, FUNCTIONS negotiation has successfully
        completed.\n   - it may respond in the negative by sending a FUNCTIONS\n     REQUEST
        command in which the function-list differs from the one it\n     received
        (and not simply in the order of appearance of functions in\n     the list;
        at least one function must have been added to, or removed\n     from, the
        list).\n     To avoid endlessly looping, both parties must not add to the\n
        \    function-list it receives any function that it has previously added\n
        \    and that the other side has removed.\n     The process of sending FUNCTIONS
        REQUEST commands back and forth\n     continues until one side receives a
        function-list it is willing to\n     live with.  It uses the FUNCTIONS IS
        command to accept the list,\n     and, once this command is received by the
        other side, all necessary\n     negotiation has been completed.  At this point,
        3270 data stream\n     transmission can begin.\n     Note that it is possible
        that the function-list agreed to is null;\n     this is referred to as \"basic
        TN3270E\".  See the section entitled\n     \"Basic TN3270E\" for more information.\n
        \    If an impasse is reached during FUNCTIONS negotiation (for example,\n
        \    if a client requested and was granted a DEVICE-TYPE representing a\n
        \    printer, but refuses to accept either the SCS-CTL-CODES or DATA-\n     STREAM-CTL
        function), then the \"offended\" party should terminate\n     the negotiation
        by sending an IAC DON'T (or WON'T) TN3270E.\n"
      title: 7.2.1 Commands
    - contents:
      - "7.2.2 List of TN3270E Functions\n   The following list briefly describes
        the 3270 functions that may be\n   negotiated in the function-list:\n   Function
        Name       Description\n   -------------       -----------\n   SCS-CTL-CODES
        \      (Printer sessions only).  Allows the use\n                       of
        the SNA Character Stream (SCS) and SCS\n                       control codes
        on the session.  SCS is\n                       used with LU type 1 SNA sessions.\n
        \  DATA-STREAM-CTL     (Printer sessions only).  Allows the use\n                       of
        the standard 3270 data stream.  This\n                       corresponds to
        LU type 3 SNA sessions.\n   RESPONSES           Provides support for positive
        and\n                       negative response handling.  Allows the\n                       server
        to reflect to the client any and\n                       all definite, exception,
        and no response\n                       requests sent by the host application.\n
        \  BIND-IMAGE          Allows the server to send the SNA Bind\n                       image
        and Unbind notification to the\n                       client.\n   SYSREQ
        \             Allows the client and server to emulate\n                       some
        (or all, depending on the server) of\n                       the functions
        of the SYSREQ key in an SNA\n                       environment.\n   See the
        section entitled \"Details of Processing TN3270E Functions\"\n   for a more
        detailed explanation of the meaning and use of these\n   functions.\n   If
        in the process of functions negotiation an unrecognized function\n   code
        is recieved, the recipient should simply remove that function\n   code from
        the list and continue normal functions negotiation.\n"
      title: 7.2.2 List of TN3270E Functions
    title: 7.2 FUNCTIONS Negotiation
  title: 7.  TN3270E Sub-negotiation Rules
- contents:
  - "8.  TN3270E Data Messages\n   3270 device communications are generally understood
    to be block\n   oriented in nature.  That is, each partner buffers data until
    an\n   entire \"message\" has been built, at which point the data is sent to\n
    \  the other side.  The \"outbound message\" (from host to device)\n   consists
    of a 3270 command and a series of buffer orders, buffer\n   addresses, and data,
    while the \"inbound message\" contains only buffer\n   orders, addresses and data.
    \ The end of a message is understood to be\n   the last byte transmitted (note
    that this discussion disregards SNA\n   chaining).  The Telnet EOR command is
    used to delimit these natural\n   blocks of 3270 data within the Telnet data stream.\n
    \  In TN3270E, each 3270 message must be prefixed with a TN3270E header,\n   which
    consists of five bytes and whose format is defined below (see\n   the section
    entitled \"The TN3270E Message Header\").  A \"data message\"\n   in TN3270E therefore
    has the following construction:\n          <TN3270E Header><data><IAC EOR>\n   It
    should be noted that it is possible that, for certain message\n   types, there
    is no data portion present.  In this case, the TN3270E\n   data message consists
    of:\n          <TN3270E Header><IAC EOR>\n   If either side wishes to transmit
    the decimal value 255 and have it\n   interpreted as data, it must \"double\"
    this byte.  In other words, a\n   single occurrence of decimal 255 will be interpreted
    by the other\n   side as an IAC, while two successive bytes containing decimal
    255\n   will be treated as one data byte with a value of decimal 255.\n   It is
    strongly recommended that Telnet commands (other than IAC IAC)\n   should be sent
    between TN3270E data messages, with no header and no\n   trailing IAC EOR.  If
    a TN3270E data message containing either IAC IP\n   (to be interpreted as 3270
    Attention) or IAC AO (to be interpreted as\n   SYSREQ) is received, the receiver
    should defer processing the command\n   until the 3270 data has been processed
    (see the appropriate sections\n   for discussion of 3270 Attention and SYSREQ).
    \ If a TN3270E data\n   message containing any other IAC-command sequence (other
    than IAC\n   IAC) is received, it is implementation dependent when the IAC-command\n
    \  sequence will be processed, but it must be processed.  The receiver\n   may
    process it immediately, which in effect causes it to be processed\n   as if it
    had been received before the current TN3270E data message,\n   or the processing
    may be deferred until after the current TN3270E\n   data message has been processed.
    \ It is because of this ambiguity\n   that the presence of Telnet commands within
    a TN3270E data message\n   (i.e., between the header and the trailing IAC EOR)
    is not\n   recommended; neither clients nor servers should send such data.\n"
  - contents:
    - "8.1 The TN3270E Message Header\n   As stated earlier, each data message in
      TN3270E must be prefixed by a\n   header, which consists of five bytes and is
      formatted as follows:\n      -----------------------------------------------------------\n
      \     | DATA-TYPE | REQUEST-FLAG | RESPONSE-FLAG |  SEQ-NUMBER  |\n      -----------------------------------------------------------\n
      \        1 byte        1 byte         1 byte         2 bytes\n"
    - contents:
      - "8.1.1 DATA-TYPE Field\n   The DATA-TYPE field indicates how the data portion
        of the message is\n   to be interpreted by the receiver.  Possible values
        for the DATA-TYPE\n   field are:\n   Data-type Name   Code                Meaning\n
        \  --------------   ----   ---------------------------------\n   3270-DATA
        \       0x00   The data portion of the message\n                           contains
        only the 3270 data stream.\n   SCS-DATA         0x01   The data portion of
        the message\n                           contains SNA Character Stream data.\n
        \  RESPONSE         0x02   The data portion of the message\n                           constitutes
        device-status information\n                           and the RESPONSE-FLAG
        field indicates\n                           whether this is a positive or
        negative\n                           response (see below).\n   BIND-IMAGE
        \      0x03   The data portion of the message is\n                           the
        SNA bind image from the session\n                           established between
        the server and the\n                           host application.\n   UNBIND
        \          0x04   The data portion of the message is\n                           an
        Unbind reason code.\n   NVT-DATA         0x05   The data portion of the message
        is to\n                           be interpreted as NVT data.\n   REQUEST
        \         0x06   There is no data portion present in\n                           the
        message.  Only the REQUEST-FLAG\n                           field has any
        meaning.\n   SSCP-LU-DATA     0x07   The data portion of the message is\n
        \                          data from the SSCP-LU session.\n   PRINT-EOJ        0x08
        \  There is no data portion present in\n                           the message.
        \ This value can be sent\n                           only by the server, and
        only on a\n                           printer session.\n"
      title: 8.1.1 DATA-TYPE Field
    - contents:
      - "8.1.2 REQUEST-FLAG Field\n   The REQUEST-FLAG field only has meaning when
        the DATA-TYPE field has\n   a value of REQUEST; otherwise, the REQUEST-FLAG
        field must be ignored\n   by the receiver and should be set to 0x00 by the
        sender.  Possible\n   values for the REQUEST-FLAG field are:\n   Request-Flag
        Name   Code                Meaning\n   -----------------   ----   ---------------------------------\n
        \  ERR-COND-CLEARED    0x00   The client sends this to the server\n                              when
        some previously encountered\n                              printer error condition
        has been\n                              cleared.  (See the section entitled\n
        \                             \"The RESPONSES Function\" below.)\n"
      title: 8.1.2 REQUEST-FLAG Field
    - contents:
      - "8.1.3 RESPONSE-FLAG Field\n   The RESPONSE-FLAG field only has meaning for
        certain values of the\n   DATA-TYPE field.  For DATA-TYPE field values of
        3270-DATA and SCS-\n   DATA, the RESPONSE-FLAG is an indication of whether
        or not the sender\n   of the data expects to receive a response.  In this
        case the possible\n   values of RESPONSE-FLAG are:\n   Response-Flag Name
        \ Code                Meaning\n   ------------------  ----   ---------------------------------\n
        \  NO-RESPONSE         0x00   The sender does not expect the\n                              receiver
        to respond either\n                              positively or negatively
        to this\n                              message.  The receiver must\n                              therefore
        not send any response\n                              to this data-message.\n
        \  ERROR-RESPONSE      0x01   The sender only expects the\n                              receiver
        to respond to this message\n                              if some type of
        error occurred, in\n                              which case a negative response
        must\n                              be sent by the receiver.\n   ALWAYS-RESPONSE
        \    0x02   The sender expects the receiver to\n                              respond
        negatively if an error\n                              occurs, or positively
        if no errors\n                              occur.  One or the other must\n
        \                             always be sent by the receiver.\n   For a DATA-TYPE
        field value of RESPONSE, the RESPONSE-FLAG is an\n   actual response to a
        previous data message (which must by definition\n   have had a DATA-TYPE of
        either 3270-DATA or SCS-DATA and a RESPONSE-\n   FLAG value of either ERROR-RESPONSE
        or ALWAYS-RESPONSE).  In this\n   case the possible values of RESPONSE-FLAG
        are:\n   Response-Flag Name  Code                Meaning\n   ------------------
        \ ----   ---------------------------------\n   POSITIVE-RESPONSE   0x00   The
        previous message was received\n                              and executed
        successfully with\n                              no errors.\n   NEGATIVE-RESPONSE
        \  0x01   The previous message was received\n                              but
        an error(s) occurred while\n                              processing it.\n
        \  Accompanying status information will be found in the data portion of\n
        \  the message.\n   For any other values of the DATA-TYPE field, the RESPONSE-FLAG
        field\n   must be ignored by the receiver and should be set to 0x00 by the\n
        \  sender.\n"
      title: 8.1.3 RESPONSE-FLAG Field
    - contents:
      - "8.1.4 SEQ-NUMBER Field\n   The SEQ-NUMBER field is only used when the RESPONSES
        function has\n   been agreed to.  It contains a 2 byte binary number, and
        is used to\n   correlate positive and negative responses to the data messages
        for\n   which they were intended.  This field must be sent in network byte\n
        \  order (\"big endian\").  If either byte contains a 0xff, it should be\n
        \  doubled to 0xffff before sending and stripped back to 0xff upon\n   receipt;
        this is standard IAC escaping.  See the section entitled\n   \"The RESPONSES
        Function\" for further information on the use of the\n   SEQ-NUMBER field.
        \ When the RESPONSES function is not agreed to, this\n   field should always
        be set to 0x0000 by the sender and ignored by the\n   receiver.\n"
      title: 8.1.4 SEQ-NUMBER Field
    title: 8.1 The TN3270E Message Header
  title: 8.  TN3270E Data Messages
- contents:
  - "9.  Basic TN3270E\n   As has been stated earlier, whether or not the use of each
    of the\n   TN3270E functions is allowed on a session is negotiated when the\n
    \  connection is established.  It is possible that none of the functions\n   are
    agreed to (in this case, the function-list in the FUNCTIONS\n   REQUEST and FUNCTIONS
    IS commands is null).  This mode of operation\n   is referred to as \"basic TN3270E\".
    \ Note that, since neither the\n   SCS-CTL-CODES function nor the DATA-STREAM-CTL
    function is agreed to,\n   basic TN3270E refers to terminal sessions only.\n   Basic
    TN3270E requires the support of only the following TN3270E\n   header values:\n
    \            Header field         Value\n             ------------         -----\n
    \             DATA-TYPE          3270-DATA\n              DATA-TYPE          NVT-DATA\n
    \  The REQUEST-FLAG, RESPONSE-FLAG and SEQ-NUMBER fields are not used in\n   basic
    TN3270E.\n"
  - contents:
    - "9.1 3270 Mode and NVT Mode\n   At any given time, a TN3270E connection can
      be considered to be\n   operating in either \"3270 mode\" or \"NVT mode\".  In
      3270 mode, each\n   party may send data messages with the DATA-TYPE flag set
      to 3270-\n   DATA; sending a DATA-TYPE flag set to NVT-DATA constitutes a request\n
      \  to switch modes.  In NVT mode, each party may send data messages with\n   the
      DATA-TYPE flag set to NVT-DATA; sending 3270-DATA is a request to\n   switch
      modes.  The connection is initially in 3270 mode when TN3270E\n   operation
      is successfully negotiated.  When a party receives a\n   message with a DATA-TYPE
      different from the mode it is operating in,\n   the mode of operation for the
      connection is switched.  Switching\n   modes results in the client performing
      the equivalent of a 3270\n   Erase/Reset operation, as described in [5], using
      the default\n   partition (screen) size.  The server cannot assume the client\n
      \  preserves any attributes of the previous environment across a mode\n   switch.\n
      \  Note that even when sending NVT-DATA, each side should buffer data\n   until
      an entire message is built (for the client, this would normally\n   mean until
      the user presses Enter).  At that point, a complete\n   TN3270E data message
      should be built to transmit the NVT data.\n   Typically, NVT data is used by
      a server to interact with the user of\n   a client.  It allows the server to
      do this using a simple NVT data\n   stream, instead of requiring a 3270 data
      stream.  An example would be\n   a server which displays a list of 3270 applications
      to which it can\n   connect the client.  The server would use NVT data to display
      the\n   list and read the user's choice.  Then the server would connect to\n
      \  the application, and begin the exchange of 3270 data between the\n   application
      and the client.\n"
    title: 9.1 3270 Mode and NVT Mode
  title: 9.  Basic TN3270E
- contents:
  - "10.  Details of Processing TN3270E Functions\n   Agreement by both parties to
    a specific function in the FUNCTIONS\n   REQUEST function-list implies agreement
    by each party to support a\n   related set of values in the TN3270E header.  It
    also implies a\n   willingness to adhere to the rules governing the processing
    of data\n   messages with regard to the agreed upon function.  Either party that\n
    \  fails to accept header values associated either with agreed upon\n   functions
    or with basic TN3270E, or attempts to use header values\n   associated with a
    function that is not a part of basic TN3270E and\n   was not agreed upon, will
    be considered non-conforming and in\n   violation of the protocol.  The following
    sections detail for each\n   TN3270E function the associated header values and
    processing rules.\n"
  - contents:
    - "10.1 The SCS-CTL-CODES Function\n   This function can only be supported on
      a 3270 printer session.\n   Agreement to support this function requires that
      the party support\n   the following TN3270E header values:\n             Header
      field         Value\n             ------------         -----\n              DATA-TYPE
      \         SCS-DATA\n              DATA-TYPE          PRINT-EOJ\n   A client
      representing a printer device uses this function to indicate\n   its willingness
      to accept a data stream that includes SCS control\n   codes.  For the purposes
      of NVT mode versus 3270 mode, SCS-DATA must\n   be treated exactly like 3270-DATA
      (i.e., it can cause a switch from\n   NVT mode to 3270 mode).\n   When a printer
      device-type has been negotiated, either the SCS-CTL-\n   CODES function or the
      DATA-STREAM-CTL function, or both, must be\n   negotiated.  This enables the
      server to know when it should and\n   should not accept a session with a host
      application on behalf of the\n   client.  If only the SCS-CTL-CODES function
      is agreed to, then the\n   server will not establish sessions with host applications
      that would\n   send 3270 data stream control.  If both SCS-CTL-CODES and DATA-\n
      \  STREAM-CTL are agreed to, then the server will establish sessions\n   both
      with host applications that would send SCS control codes and\n   with those
      that would send 3270 orders.\n   The server should send a TN3270E message with
      DATA-TYPE set to\n   PRINT-EOJ at the end of each print job to indicate to the
      client that\n   it may now take whatever action is appropriate for its environment\n
      \  (e.g., close a disk or spool file, etc.).  The server may have\n   multiple
      criteria for determining when it should send a PRINT-EOJ,\n   such as receipt
      of SNA End Bracket from the host application, or\n   expiration of a pre-defined
      timeout value.\n"
    title: 10.1 The SCS-CTL-CODES Function
  - contents:
    - "10.2 The DATA-STREAM-CTL Function\n   This function can only be supported on
      a 3270 printer session.\n   Agreement to support this function requires that
      the party support\n   the following TN3270E header values:\n             Header
      field         Value\n             ------------         -----\n              DATA-TYPE
      \         3270-DATA\n              DATA-TYPE          PRINT-EOJ\n   A client
      representing a printer device uses this function to indicate\n   its willingness
      to accept a data stream that includes 3270 orders and\n   attributes.\n   When
      a printer device-type has been negotiated, either the SCS-CTL-\n   CODES function
      or the DATA-STREAM-CTL function, or both, must be\n   negotiated.  This enables
      the server to know when it should and\n   should not accept a session with a
      host application on behalf of the\n   client.  If only the DATA-STREAM-CTL function
      is agreed to, then the\n   server will not establish sessions with host applications
      that would\n   send SCS control codes in a data stream.  If both SCS-CTL-CODES
      and\n   DATA-STREAM-CTL are agreed to, then the server will establish\n   sessions
      both with host applications that would send SCS control\n   codes and with those
      that would send 3270 orders.\n   The server should send a TN3270E message with
      DATA-TYPE set to\n   PRINT-EOJ at the end of each print job to indicate to the
      client that\n   it may now take whatever action is appropriate for its environment\n
      \  (e.g., close a disk or spool file, etc.).  The server may have\n   multiple
      criteria for determining when it should send a PRINT-EOJ,\n   such as receipt
      of SNA End Bracket from the host application, or\n   expiration of a pre-defined
      timeout value.\n"
    title: 10.2 The DATA-STREAM-CTL Function
  - contents:
    - "10.3 The BIND-IMAGE Function\n   This function can only be supported when the
      TN3270E server\n   represents SNA terminals and printers.\n   Agreement to support
      this function requires that the party support\n   the following TN3270E header
      values:\n             Header field         Value\n             ------------
      \        -----\n              DATA-TYPE          BIND-IMAGE\n              DATA-TYPE
      \         UNBIND\n              DATA-TYPE          SSCP-LU-DATA\n   When BIND-IMAGE
      is in effect, the server must inform the client when\n   an SNA session has
      been established with a host application, and when\n   such a session has been
      terminated.  It uses DATA-TYPE values of\n   BIND-IMAGE and UNBIND to convey
      this information.\n   When establishing an SNA session on behalf of a client,
      the server\n   will receive a Bind RU from the host application.  It will also\n
      \  receive a Start Data Traffic RU.  Once both of these have been\n   responded
      to positively by the server, it must then inform the client\n   of the presence
      of this session by sending it a data message with the\n   DATA-TYPE flag set
      to BIND-IMAGE.  The data portion of this message\n   must contain the bind image
      exactly as it was received in the Bind RU\n   that the server accepted on behalf
      of the client.  The format and\n   maximum length of this bind image are defined
      in [6].\n   When an SNA session between the server and a host application is\n
      \  terminated, the server must send a data message to the client with\n   the
      DATA-TYPE flag set to UNBIND.  If the server was notified of the\n   session
      termination via an SNA Unbind RU, it should include the\n   Unbind reason code
      in the data portion of the message it sends to the\n   client.  If the server
      itself requested the SNA session termination\n   (for example, as part of SYSREQ
      key processing), it should set the\n   data portion of the UNBIND message to
      0x01, indicating \"normal end of\n   session\".\n   Another aspect of the BIND-IMAGE
      function alters the allowable DATA-\n   TYPE flag values slightly from the behavior
      described in the section\n   entitled \"Basic TN3270E\".  When BIND-IMAGE is
      in effect, data\n   messages with DATA-TYPE set to 3270-DATA or SCS-DATA are
      not allowed\n   before the first BIND-IMAGE is received by the client; only
      SSCP-LU-\n   DATA or NVT-DATA can be used to transmit user- oriented data.  The\n
      \  same applies to data messages exchanged after an UNBIND is sent and\n   before
      another BIND-IMAGE is received by the client.  Once the client\n   receives
      a BIND-IMAGE data message, the allowable DATA-TYPE values,\n   in addition to
      SSCP-LU-DATA, now include 3270-DATA and/or SCS-DATA,\n   depending on whether
      a terminal or printer device-type was\n   negotiated, and whether a printer
      client agreed to DATA-STREAM-CTL or\n   SCS-CTL-CODES, or both.  (See the section
      entitled \"The SYSREQ\n   Function\" for further discussion of the SSCP-LU session
      in an SNA\n   environment.)\n"
    title: 10.3 The BIND-IMAGE Function
  - contents:
    - "10.4 The RESPONSES Function\n   This function can be supported for both terminal
      and printer sessions\n   connected to both SNA and non-SNA servers.\n   Agreement
      to support this function requires that the party support\n   the following TN3270E
      header values:\n             Header field         Value\n             ------------
      \        -----\n              DATA-TYPE          RESPONSE\n              DATA-TYPE
      \         REQUEST\n              RESPONSE-FLAG      -all values-\n              REQUEST-FLAG
      \      ERR-COND-CLEARED\n              SEQ-NUMBER         binary values from
      0-32767\n   Whenever a data message is sent with a DATA-TYPE of either SCS-DATA\n
      \  or 3270-DATA, the sender must set the RESPONSE-FLAG field to either\n   NO-RESPONSE,
      ERROR-RESPONSE, or ALWAYS-RESPONSE.  It is anticipated\n   that the client side
      will normally set RESPONSE-FLAG to NO-RESPONSE.\n   The server, if it represents
      an SNA device, should set RESPONSE-FLAG\n   to reflect the response value set
      in the RH of the RU that generated\n   this data message - Definite Response
      resulting in a RESPONSE-FLAG\n   value of ALWAYS-RESPONSE, Exception Response
      resulting in ERROR-\n   RESPONSE being set, and No Response causing a setting
      of NO-RESPONSE.\n   A non-SNA server should set RESPONSE-FLAG to ERROR-RESPONSE.\n
      \  In addition, the sender must keep a count of the messages with a\n   DATA-TYPE
      of 3270-DATA or SCS-DATA that it sends on a given TN3270E\n   session.  This
      counter should start at zero for the first such\n   message, and be incremented
      by one for each subsequent message.  Note\n   that this counter is independent
      of any SNA sequence numbers, and\n   should not be reset to zero as a result
      of Bind or Unbind.  If the\n   counter reaches the maximum of 32767, it should
      be restarted at zero.\n   The sender must place this value in the SEQ-NUMBER
      field of the\n   TN3270E header before it sends the message.  Note that the
      SEQ-NUMBER\n   field must be set regardless of the value of the RESPONSE-FLAG
      field.\n"
    - contents:
      - "10.4.1 Response Messages\n   Whenever a data message with a DATA-TYPE of
        either SCS-DATA or 3270-\n   DATA is received, the receiver must attempt to
        process the data in\n   the data portion of the message, then determine whether
        or not it\n   should send a data message with a DATA-TYPE of RESPONSE.  If
        the data\n   message it has just processed had a RESPONSE-FLAG value of NO-\n
        \  RESPONSE, or if it had a value of ERROR-RESPONSE and there were no\n   errors
        encountered while processing the data, then no RESPONSE type\n   message should
        be sent.  Otherwise, a data message should be sent in\n   which the header
        DATA-TYPE field is set to RESPONSE, and in which the\n   SEQ-NUMBER field
        is a copy of the SEQ-NUMBER field from the message\n   to which this response
        corresponds.  The RESPONSE-FLAG field in this\n   header must have a value
        of either POSITIVE-RESPONSE or NEGATIVE-\n   RESPONSE.  A POSITIVE-RESPONSE
        should be sent if the previously\n   processed message's header specified
        ALWAYS-RESPONSE and no errors\n   were encountered in processing the data.
        \ A NEGATIVE-RESPONSE should\n   be sent when\n    1) the previously processed
        message specified ERROR-RESPONSE\n       or ALWAYS-RESPONSE and\n    2) some
        kind of error occurred while processing the data.\n   Normally only the client
        will be constructing and sending these\n   RESPONSE messages.  A negative
        response sent by the client to the\n   server is the equivalent of a Unit
        Check Status [7].  All references\n   to device status and sense codes in
        this section rely on [7].\n   The data portion of a RESPONSE message must
        consist of one byte of\n   binary data.  The value of this byte gives a more
        detailed account of\n   the results of having processed the previously received
        data message.\n   The possible values for this byte are:\n           For a
        RESPONSE-FLAG value of POSITIVE-RESPONSE -\n             Value            Meaning\n
        \            -----            -------\n             0x00      Successful completion
        (when sent by the client,\n                       this is equivalent to \"Device
        End\").\n           For a RESPONSE-FLAG value of NEGATIVE-RESPONSE -\n             Value
        \           Meaning\n             -----            -------\n             0x00
        \     An invalid 3270 command was received\n                       (equivalent
        to \"Command Reject\").\n             0x01      Printer is not ready (equivalent
        to\n                       \"Intervention Required\").\n             0x02
        \     An illegal 3270 buffer address or order\n                       sequence
        was received (equivalent to\n                       \"Operation Check\").\n
        \            0x03      Printer is powered off or not connected\n                       (equivalent
        to \"Component Disconnected\").\n   When the server receives any of the above
        responses, it should pass\n   along the appropriate information to the host
        application.  The\n   appropriate information is determined by whether the
        server\n   represents an SNA or a non-SNA device.\n   An SNA server should
        pass along a POSITIVE-RESPONSE from the client\n   as an SNA positive Response
        Unit to the host application.  It should\n   translate a NEGATIVE-RESPONSE
        from the client into an SNA negative\n   Response Unit in which the Sense
        Data Indicator bit is on and which\n   contains one of the following sense
        codes:\n          RESPONSE-FLAG        Equivalent        SNA Sense Code\n
        \         -------------        ----------        --------------\n              0x00
        \          Command Reject        0x10030000\n              0x01        Intervention
        Required    0x08020000\n              0x02           Operation Check       0x10050000\n
        \             0x03        Component Disconnected   0x08310000\n   A non-SNA
        server should pass along a POSITIVE-RESPONSE from the\n   client by setting
        the Device End Status bit on.  It should reflect a\n   NEGATIVE-RESPONSE from
        the client by setting the Unit Check Status\n   Bit on, and setting either
        the Command Reject, Intervention Required,\n   or Operation Check Sense bit
        on when responding to the Sense command.\n   In the case of Intervention Required
        or Component Disconnected being\n   passed by the server to the host application,
        the host would normally\n   refrain from sending any further data to the printer.
        \ If and when\n   the error condition at the client has been resolved, the
        client must\n   send to the server a data message whose header DATA-TYPE field
        is set\n   to REQUEST, and whose REQUEST-FLAG is set to ERR-COND-CLEARED.
        \ Note\n   that this message has no data portion.  Upon receipt of this message,\n
        \  the server should pass along the appropriate information to the host\n
        \  application so that it may resume sending printer output.  Again, the\n
        \  form of this information depends on whether the server represents an\n
        \  SNA or a non-SNA device.\n   An SNA server should reflect an ERR-COND-CLEARED
        to the host\n   application by sending an SNA LUSTAT RU with one of the following\n
        \  sense codes:\n    - if the previous error condition was an Intervention\n
        \     Required, the server should send sense code 0x00010000\n    - if the
        previous error condition was Component\n      Disconnected, the server should
        send sense code 0x082B0000\n   A non-SNA server should set the corresponding
        bits in the Ending\n   Status and Sense Condition bytes.\n"
      title: 10.4.1 Response Messages
    title: 10.4 The RESPONSES Function
  - contents:
    - "10.5 The SYSREQ Function\n   This function can only be supported when the TN3270E
      server\n   represents SNA devices.\n   Agreement to support this function requires
      that the party support\n   the following TN3270E header values:\n             Header
      field         Value\n             ------------         -----\n              DATA-TYPE
      \         SSCP-LU-DATA\n   The 3270 SYSREQ key can be useful in an SNA environment
      when the ATTN\n   key is not sufficient to terminate a process.  (See the section\n
      \  entitled \"The 3270 ATTN Key\" for more information.)\n"
    - contents:
      - "10.5.1 Background\n   In SNA, there is a session between the host application
        (the PLU, or\n   Primary Logical Unit) and the TN3270E server representing
        the client\n   (the SLU, or Secondary Logical Unit).  This is referred to
        as the\n   PLU-SLU session, and it is the one on which normal communications\n
        \  flow.  There is also a session between the host telecommunications\n   access
        method (the SSCP, or System Services Control Point) and the\n   SLU, and it
        is referred to as the SSCP-LU session.  This session is\n   used to carry
        various control information and is normally transparent\n   to the user; normal
        3270 data stream orders are not allowed in this\n   data.  For more information,
        refer to [7].\n   The terminal display and keyboard are usually \"owned\"
        by the PLU-SLU\n   session, meaning any data the user types is sent to the
        host\n   application.  The SYSREQ key is used to toggle ownership of the\n
        \  keyboard and display between the PLU-SLU session and the SSCP-LU\n   session.
        \ In other words, the user is able to press SYSREQ and then\n   communicate
        directly with the host SSCP.  The user may then enter any\n   valid Unformatted
        Systems Services commands, which are defined in the\n   USS table associated
        with the SLU.  The most common USS command users\n   employ is \"LOGOFF,\"
        which requests that the SSCP immediately\n   terminate the PLU-SLU session.
        \ The usual reason for requesting such\n   an action is that the host application
        (the PLU) has stopped\n   responding altogether.\n   Whenever the keyboard
        and display are owned by the SSCP-LU session,\n   no data is allowed to flow
        in either direction on the PLU-SLU\n   session.  Once \"in\" the SSCP-LU session,
        the user may decide to\n   switch back to the PLU-SLU session by again pressing
        the SYSREQ key.\n"
      title: 10.5.1 Background
    - contents:
      - "10.5.2 TN3270E Implementation of SYSREQ\n   The design of some TN3270E servers
        allows them to fully support the\n   SYSREQ key because they are allowed to
        send USS commands on the\n   SSCP-LU session.  Other TN3270E servers operate
        in an environment\n   which does not allow them to send USS commands to the
        SSCP; this\n   makes full support of the SYSREQ key impossible.  For such
        servers,\n   TN3270E provides for emulation of a minimal subset of functions,\n
        \  namely, for the sequence of pressing SYSREQ and typing LOGOFF that\n   many
        users employ to immediately terminate the PLU-SLU session.\n   The Telnet
        Abort Output (AO) command is the mechanism used to\n   implement SYSREQ key
        support in TN3270E because, in a real SNA\n   session, once the user presses
        the SYSREQ key, the host application\n   is prevented from sending any more
        output to the terminal (unless the\n   user presses SYSREQ a second time),
        but the user's process continues\n   to execute.\n   In order to implement
        SYSREQ key support, TN3270E clients that have\n   agreed to the SYSREQ function
        should provide a key (or combination of\n   keys) that is identified as mapping
        to the 3270 SYSREQ key.  When the\n   user presses this key(s), the client
        should transmit a Telnet AO\n   command to the server.\n   Upon receipt of
        the AO command, a TN3270E server that has agreed to\n   the SYSREQ function
        should enter what will be loosely termed\n   \"suspended mode\" for the connection.
        \ If a server that has not agreed\n   to the SYSREQ function receives an AO
        command, it should simply\n   ignore it.  Any attempt by the host application
        to send data to the\n   client while the connection is \"suspended\" should
        be responded to by\n   the server with a negative response, sense code 0x082D,
        indicating an\n   \"LU Busy\" condition.  The server should not transmit anything
        to the\n   client on behalf of the host application.  While the connection
        is\n   \"suspended,\" any data messages exchanged between the client and\n
        \  server should have the DATA-TYPE flag set to SSCP-LU-DATA; the data\n   stream
        will be as defined in [7], specifically the section entitled\n   \"Operation
        in SSCP-SLU Session.\"\n   At this point, the behavior of the server depends
        upon whether or not\n   it is allowed to send USS commands on the SSCP-LU
        session.  Servers\n   that have this ability should simply act as a vehicle
        for passing USS\n   commands and responses between the client and the SSCP.\n
        \  Servers that are not allowed to send USS commands on the SSCP-LU\n   session
        should behave as follows:\n   - if the user transmits the string LOGOFF (upper
        or lower case),\n     the server should send an Unbind SNA RU to the host
        application.\n     This will result in termination of the PLU-SLU session.
        \ If the\n     BIND-IMAGE function was agreed upon, then the server should
        also\n     send a data message to the client with the DATA-TYPE flag set to\n
        \    UNBIND and the data portion set to 0x01.\n   - if the user transmits
        anything other than LOGOFF, the server\n     should respond with the string
        \"COMMAND UNRECOGNIZED\" to the\n     client.  The server should not send
        anything to the host\n     application on behalf of the client.\n   Regardless
        of which kind of server is present (i.e., whether or not\n   it may send USS
        commands on the SSCP-LU session), while the\n   connection is suspended, the
        user may press the \"SYSREQ\" key again.\n   This will result in the transmission
        of another AO to the server.\n   The server should then send to the host application
        an LUSTAT RU with\n   a value of 0x082B indicating \"presentation space integrity
        lost\". The\n   server will then \"un-suspend\" the Telnet connection to the
        client,\n   meaning it will allow the host application to once again send
        data to\n   the client.\n"
      title: 10.5.2 TN3270E Implementation of SYSREQ
    title: 10.5 The SYSREQ Function
  title: 10.  Details of Processing TN3270E Functions
- contents:
  - "11.  The 3270 ATTN Key\n   The 3270 ATTN key is interpreted by many host applications
    in an SNA\n   environment as an indication that the user wishes to interrupt the\n
    \  execution of the current process.  The Telnet Interrupt Process (IP)\n   command
    was defined expressly for such a purpose, so it is used to\n   implement support
    for the 3270 ATTN key.  This requires two things:\n       - TN3270E clients should
    provide as part of their keyboard\n         mapping a single key or a combination
    of keys that map to the\n         3270 ATTN key.  When the user presses this key(s),
    the client\n         should transmit a Telnet IP command to the server.\n       -
    TN3270E servers should translate the IP command received from\n         a TN3270E
    client into the appropriate form and pass it along to\n         the host application
    as an ATTN key.  In other words, the\n         server representing an SLU in an
    SNA session should send a\n         SIGNAL RU to the host application.\n   The
    ATTN key is not supported in a non-SNA environment; therefore, a\n   TN3270E server
    representing non-SNA 3270 devices should ignore any\n   Telnet IP commands it
    receives from a client.\n"
  title: 11.  The 3270 ATTN Key
- contents:
  - "12.  3270 Structured Fields\n   3270 structured fields provide a much wider range
    of features than\n   \"old-style\" 3270 data, such as support for graphics, partitions
    and\n   IPDS printer data streams. It would be unreasonable to expect all\n   TN3270E
    clients to support all possible structured field functions,\n   yet there must
    be a mechanism by which those clients that are capable\n   of supporting some
    or all structured field functions can indicate\n   their wishes.\n   The design
    of 3270 structured fields provides a convenient means to\n   convey the level
    of support (including no support) for the various\n   structured field functions.
    \ This mechanism is the Read Partition\n   Query command, which is sent from the
    host application to the device.\n   The device responds with a Query Reply structured
    field(s) listing\n   which, if any, structured field functions it supports.\n
    \  The Query Reply is also used to indicate some device capabilities\n   which
    do not require the use of structured fields, such as extended\n   color support
    and extended highlighting capability.  Most host\n   applications will use Read
    Partition Query to precisely determine a\n   device's capabilities when there
    has been some indication that the\n   device supports the \"extended data stream\".\n
    \  Therefore, all TN3270E clients that negotiate a terminal device-type\n   that
    contains a \"-E\" suffix, the DYNAMIC terminal type, or a printer\n   device-type,
    must be able to respond to a Read Partition Query\n   command.  Note that these
    clients must support both the Read\n   Partition Query (Type 02), and all forms
    of the Read Partition Query\n   List (Type 03).\n"
  title: 12.  3270 Structured Fields
- contents:
  - '13.  Implementation Guidelines

    '
  - contents:
    - "13.1 3270 Data Stream Notes\n   Implementors of TN3270E clients should note
      that the command codes\n   for the various 3270 Read and Write commands have
      different values\n   depending on how the server is connected to the host (local
      versus\n   remote, SNA versus non-SNA).  Clients should be coded to check for\n
      \  the various possible values if they wish to be compatible with the\n   widest
      range of servers.  See [7] for further details.\n"
    title: 13.1 3270 Data Stream Notes
  - contents:
    - "13.2 Negotiation of the TN3270E Telnet Option\n   Since TN3270E is a Telnet
      Option governed by [8], both client and\n   server are free to attempt to initiate
      negotiation of TN3270E by\n   sending a DO TN3270E command.  However, just as
      is usually the case\n   with the Telnet DO TERMINAL-TYPE, it is anticipated
      that the server\n   will normally be the one sending the DO TN3270E, and the
      client will\n   be responding with a WILL or a WON'T TN3270E.\n"
    title: 13.2 Negotiation of the TN3270E Telnet Option
  - contents:
    - "13.3 A \"Keep-alive\" Mechanism\n   In many environments, it is very helpful
      to have in place a mechanism\n   that allows timely notification of the loss
      of a 3270 session.\n   TN3270E does not require that any form of keep-alive
      mechanism be\n   employed by either clients or servers, but implementors wishing
      to\n   support such a mechanism should consider the following guidelines.\n
      \  There are at least three possible means of providing a keep-alive\n   mechanism
      in TN3270E: the TCP Keepalive, the Telnet IAC NOP command\n   [8], and the Telnet
      DO TIMING-MARK option [9].  Each method has its\n   advantages and disadvantages.
      \ It is recommended that TN3270E clients\n   and servers that support keep-alives
      should support all three\n   methods, and that both sides should always respond
      to TIMING-MARKs.\n   Note that both clients and servers could be configured
      to \"actively\"\n   implement keep-alives.  That is, both sides could send a
      TIMING-MARK\n   or a NOP or issue a TCP Keepalive in order to determine whether
      or\n   not the partner is still alive.  Alternatively, network\n   administrators
      may wish to configure only one side to send keep-\n   alives; in this case,
      the other side would be a \"passive\" participant\n   which simply responds
      to the keep-alives it receives.\n   Implementors who want their code to be capable
      of being an \"active\"\n   keep-alive participant should make their client or
      server\n   configurable so that administrators can set which, if any, keep-alive\n
      \  mechanism should be employed, and how often it should be used.\n   Upon failure
      of a session on which keep-alives are used, both parties\n   should make the
      proper notifications.  A client should give the user\n   some indication of
      the failure, such as an error code in the Operator\n   Information Area of the
      screen.  A server should notify the host\n   application that the session has
      been terminated, for example by\n   sending an UNBIND with type CLEANUP in an
      SNA environment.\n"
    title: 13.3 A "Keep-alive" Mechanism
  - contents:
    - "13.4 Examples\n   The following example shows a TN3270E-capable server and
      a\n   traditional tn3270 client establishing a connection:\n        Server:
      \ IAC DO TN3270E\n        Client:  IAC WON'T TN3270E\n        Server:  IAC DO
      TERMINAL-TYPE\n        Client:  IAC WILL TERMINAL-TYPE\n        Server:  IAC
      SB TERMINAL-TYPE SEND IAC SE\n        Client:  IAC SB TERMINAL-TYPE IS IBM-3278-2
      IAC SE\n        Server:  IAC DO EOR IAC WILL EOR\n        Client:  IAC WILL
      EOR IAC DO EOR\n        Server:  IAC DO BINARY IAC WILL BINARY\n        Client:
      \ IAC WILL BINARY IAC DO BINARY\n           (3270 data stream is exchanged)\n
      \  The following example shows a TN3270E-capable server and a TN3270E-\n   capable
      client establishing a generic pool (non-specific) terminal\n   session:\n        Server:
      \ IAC DO TN3270E\n        Client:  IAC WILL TN3270E\n        Server:  IAC SB
      TN3270E SEND DEVICE-TYPE IAC SE\n        Client:  IAC SB TN3270E DEVICE-TYPE
      REQUEST IBM-3278-2 IAC SE\n        Server:  IAC SB TN3270E DEVICE-TYPE IS IBM-3278-2
      CONNECT\n                        anyterm IAC SE\n        Client:  IAC SB TN3270E
      FUNCTIONS REQUEST RESPONSES IAC SE\n        Server:  IAC SB TN3270E FUNCTIONS
      IS RESPONSES IAC SE\n           (3270 data stream is exchanged)\n   The following
      example shows a TN3270E-capable server and a TN3270E-\n   capable client establishing
      a terminal session where the client\n   requests a specific device-name:\n        Server:
      \ IAC DO TN3270E\n        Client:  IAC WILL TN3270E\n        Server:  IAC SB
      TN3270E SEND DEVICE-TYPE IAC SE\n        Client:  IAC SB TN3270E DEVICE-TYPE
      REQUEST IBM-3278-5-E\n                        CONNECT myterm IAC SE\n        Server:
      \ IAC SB TN3270E DEVICE-TYPE IS IBM-3278-5-E CONNECT\n                        myterm
      IAC SE\n        Client:  IAC SB TN3270E FUNCTIONS REQUEST RESPONSES\n                        BIND-IMAGE
      IAC SE\n        Server:  IAC SB TN3270E FUNCTIONS IS RESPONSES BIND-IMAGE\n
      \                       IAC SE\n           (3270 data stream is exchanged)\n
      \  The following example shows a TN3270E-capable server and a TN3270E-\n   capable
      client establishing a terminal session where the client\n   requests a resource-name
      and is returned a device-name chosen by the\n   server:\n       Server:  IAC
      DO TN3270E\n       Client:  IAC WILL TN3270E\n       Server:  IAC SB TN3270E
      SEND DEVICE-TYPE IAC SE\n       Client:  IAC SB TN3270E DEVICE-TYPE REQUEST
      IBM-3278-5-E\n                       CONNECT pool1 IAC SE\n       Server:  IAC
      SB TN3270E DEVICE-TYPE IS IBM-3278-5-E CONNECT\n                       term0013
      IAC SE\n       Client:  IAC SB TN3270E FUNCTIONS REQUEST BIND-IMAGE IAC SE\n
      \      Server:  IAC SB TN3270E FUNCTIONS IS BIND-IMAGE IAC SE\n          (3270
      data stream is exchanged)\n   The following example shows a TN3270E-capable
      server and a TN3270E-\n   capable client attempting to establish a terminal
      session; multiple\n   attempts are necessary because the device-name initially
      requested by\n   the client is already in use:\n        Server:  IAC DO TN3270E\n
      \       Client:  IAC WILL TN3270E\n        Server:  IAC SB TN3270E SEND DEVICE-TYPE
      IAC SE\n        Client:  IAC SB TN3270E DEVICE-TYPE REQUEST IBM-3278-5\n                        CONNECT
      myterm IAC SE\n        Server:  IAC SB TN3270E DEVICE-TYPE REJECT REASON\n                        DEVICE-IN-USE
      IAC SE\n        Client:  IAC SB TN3270E DEVICE-TYPE REQUEST IBM-3278-2\n                        CONNECT
      herterm IAC SE\n        Server:  IAC SB TN3270E DEVICE-TYPE IS IBM-3278-2 CONNECT\n
      \                       herterm IAC SE\n        Client:  IAC SB TN3270E FUNCTIONS
      REQUEST RESPONSES IAC SE\n        Server:  IAC SB TN3270E FUNCTIONS IS RESPONSES
      IAC SE\n           (3270 data stream is exchanged)\n   The following example
      shows a TN3270E-capable server and a TN3270E-\n   capable client establishing
      a printer session where the client\n   requests a specific device-name, and
      where some amount of 3270\n   function negotiation is required before an agreement
      is reached:\n        Server:  IAC DO TN3270E\n        Client:  IAC WILL TN3270E\n
      \       Server:  IAC SB TN3270E SEND DEVICE-TYPE IAC SE\n        Client:  IAC
      SB TN3270E DEVICE-TYPE REQUEST IBM-3287-1 CONNECT\n                        myprt
      IAC SE\n        Server:  IAC SB TN3270E DEVICE-TYPE IS IBM-3287-1 CONNECT\n
      \                       myprt IAC SE\n        Client:  IAC SB TN3270E FUNCTIONS
      REQUEST DATA-STREAM-CTL IAC\n        Server:  IAC SB TN3270E FUNCTIONS REQUEST
      DATA-STREAM-CTL\n                        RESPONSES IAC SE\n        Client:  IAC
      SB TN3270E FUNCTIONS REQUEST DATA-STREAM-CTL IAC\n        Server:  IAC SB TN3270E
      FUNCTIONS IS DATA-STREAM-CTL IAC SE\n           (3270 data stream is exchanged)\n
      \  The following example shows a TN3270E-capable server and a TN3270E-\n   capable
      client establishing first a specific terminal session, then a\n   printer session
      where the \"partner\" printer for the assigned terminal\n   is requested:\n
      \       Server:  IAC DO TN3270E\n        Client:  IAC WILL TN3270E\n        Server:
      \ IAC SB TN3270E SEND DEVICE-TYPE IAC SE\n        Client:  IAC SB TN3270E DEVICE-TYPE
      REQUEST IBM-3278-2 CONNECT\n                        termxyz IAC SE\n        Server:
      \ IAC SB TN3270E DEVICE-TYPE IS IBM-3278-2 CONNECT\n                        termxyz
      IAC SE\n        Client:  IAC SB TN3270E FUNCTIONS REQUEST RESPONSES IAC SE\n
      \       Server:  IAC SB TN3270E FUNCTIONS IS RESPONSES IAC SE\n           (3270
      data stream is exchanged)\n             .            .\n             .            .\n
      \          (user decides to request a printer session,\n            so client
      again connects to Telnet port on server)\n        Server:  IAC DO TN3270E\n
      \       Client:  IAC WILL TN3270E\n        Server:  IAC SB TN3270E SEND DEVICE-TYPE
      IAC SE\n        Client:  IAC SB TN3270E DEVICE-TYPE REQUEST IBM-3287-1\n                        ASSOCIATE
      termxyz IAC SE\n        Server:  IAC SB TN3270E DEVICE-TYPE IS IBM-3287-1 CONNECT\n
      \                       termxyz's-prt IAC SE\n        Client:  IAC SB TN3270E
      FUNCTIONS REQUEST SCS-CTL-CODES\n                        RESPONSES IAC SE\n
      \       Server:  IAC SB TN3270E FUNCTIONS IS SCS-CTL-CODES RESPONSES\n                        IAC
      SE\n           (3270 data stream is exchanged)\n   The following example shows
      a TN3270E-capable server and a TN3270E-\n   capable client establishing first
      a terminal session where a\n   resource-name was requested and a server chosen
      device-name was\n   returned, then a printer session where the \"partner\" printer
      for the\n   assigned terminal is requested:\n        Server:  IAC DO TN3270E\n
      \       Client:  IAC WILL TN3270E\n        Server:  IAC SB TN3270E SEND DEVICE-TYPE
      IAC SE\n        Client:  IAC SB TN3270E DEVICE-TYPE REQUEST IBM-3278-5 CONNECT\n
      \                       poolxyz IAC SE\n        Server:  IAC SB TN3270E DEVICE-TYPE
      IS IBM-3278-5 CONNECT\n                        terma IAC SE\n        Client:
      \ IAC SB TN3270E FUNCTIONS REQUEST RESPONSES IAC SE\n        Server:  IAC SB
      TN3270E FUNCTIONS IS RESPONSES IAC SE\n           (3270 data stream is exchanged)\n
      \            .            .\n             .            .\n           (user decides
      to request a printer session,\n            so client again connects to Telnet
      port on server)\n        Server:  IAC DO TN3270E\n        Client:  IAC WILL
      TN3270E\n        Server:  IAC SB TN3270E SEND DEVICE-TYPE IAC SE\n        Client:
      \ IAC SB TN3270E DEVICE-TYPE REQUEST IBM-3287-1\n                        ASSOCIATE
      terma IAC SE\n        Server:  IAC SB TN3270E DEVICE-TYPE IS IBM-3287-1 CONNECT\n
      \                       terma's-prt IAC SE\n        Client:  IAC SB TN3270E
      FUNCTIONS REQUEST SCS-CTL-CODES\n                        RESPONSES IAC SE\n
      \       Server:  IAC SB TN3270E FUNCTIONS IS SCS-CTL-CODES RESPONSES\n                        IAC
      SE\n           (3270 data stream is exchanged)\n"
    title: 13.4 Examples
  title: 13.  Implementation Guidelines
- contents:
  - "14.  Security Considerations\n   These extensions to telnet do not provide any
    security features\n   beyond that of ordinary telnet; so a TN3270E session is
    no more\n   secure than an ordinary telnet session.  Once standard authentication\n
    \  and/or privacy mechanisms for telnet have been defined, these may\n   also
    be usable by TN3270E.  One of the important uses of\n   authentication would be
    to answer the question of whether or not a\n   given user should be allowed to
    \"use\" a specific terminal or printer\n   device-name.\n"
  title: 14.  Security Considerations
- contents:
  - "15.  References\n   [1] Rekhter, J., \"Telnet 3270 Regime Option\", RFC 1041,
    January 1988.\n   [2] VanBokkelen, J., \"Telnet Terminal-Type Option\", RFC 1091,\n
    \  February 1989.\n   [3] Postel, J., and J. Reynolds, \"Telnet Binary Transmission\",
    STD\n   27, RFC 856, May 1983.\n   [4] Postel, J., \"Telnet End of Record Option\",
    RFC 885, December\n   1983.\n   [5] \"3270 Information Display System - Data Stream
    Programmer's\n   Reference\", publication number GA24-0059, IBM Corporation.\n
    \  [6] \"SNA Formats\", publication number GA27-3136, IBM Corporation.\n   [7]
    \"3174 Establishment Controller Functional Description\",\n   publication number
    GA23-0218, IBM Corporation.\n   [8] Postel, J., and J. Reynolds, \"Telnet Protocol
    Specification\", STD\n   8, RFC 854, May 1983.\n   [9] Postel, J., and J. Reynolds,
    \"Telnet Timing Mark Option\", STD 31,\n   RFC 860, May 1983.\n   [10] J. Penner,
    \"TN3270 Current Practices\", RFC 1576, January, 1994.\n"
  title: 15.  References
- contents:
  - "16.  Author's Note\n   Portions of this document were drawn from the following
    sources:\n    - A White Paper written by Owen Reddecliffe, WRQ Corporation,\n
    \     October 1991.\n    - Experimental work on the part of Cleve Graves and Michelle\n
    \     Angel, OpenConnect Systems, 1992 - 1993.\n    - Discussions at the 1993
    IETF meetings.\n    - Discussions on the \"TN3270E\" list, 1993-94 and 1997.\n"
  title: 16.  Author's Note
- contents:
  - "17. Author's Address\n    Bill Kelly\n    Division of University Computing\n
    \   144 Parker Hall\n    Auburn University, AL  36849\n    Phone: (334) 844-4512\n
    \   EMail: kellywh@mail.auburn.edu\n"
  title: 17. Author's Address
- contents:
  - "18.  Full Copyright Statement\n   Copyright (C) The Internet Society (1998).
    \ All Rights Reserved.\n   This document and translations of it may be copied
    and furnished to\n   others, and derivative works that comment on or otherwise
    explain it\n   or assist in its implementation may be prepared, copied, published\n
    \  and distributed, in whole or in part, without restriction of any\n   kind,
    provided that the above copyright notice and this paragraph are\n   included on
    all such copies and derivative works.  However, this\n   document itself may not
    be modified in any way, such as by removing\n   the copyright notice or references
    to the Internet Society or other\n   Internet organizations, except as needed
    for the purpose of\n   developing Internet standards in which case the procedures
    for\n   copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: 18.  Full Copyright Statement
