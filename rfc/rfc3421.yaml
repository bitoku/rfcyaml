- title: __initial_text__
  contents:
  - '   Select and Sort Extensions for the Service Location Protocol (SLP)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines two extensions (Select and Sort) for the\n\
    \   Service Location Protocol (SLP).  These extensions allow a User Agent\n  \
    \ (UA) to request that the Uniform Resource Locator (URL) entries in a\n   Service\
    \ Reply (SrvRply) be limited to the specified number, or be\n   sorted according\
    \ to the specified sort key list.  Using these two\n   extensions together can\
    \ facilitate discovering the best match, such\n   as finding a service that has\
    \ the maximum speed or the minimum load.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This document defines two extensions (Select and Sort) for\
    \ SLP\n   [RFC2608].  These extensions allow a UA to request that the URL\n  \
    \ entries in a SrvRply be limited to the specified number, or be sorted\n   according\
    \ to the specified sort key list.  A Directory Agent (DA) or\n   Service Agent\
    \ (SA) that supports the Select and/or Sort extensions\n   MUST include the attribute\
    \ keyword \"select-enabled\" and/or \"sort-\n   enabled\" in its advertisement\
    \ (DAAdvert or SAAdvert).  A UA SHOULD\n   check these attributes of the contacting\
    \ DA/SA before it uses the\n   Select and/or Sort extensions to query the DA/SA.\n\
    \   Using the Select extension, a UA can opt for finding just a few (not\n   necessarily\
    \ all) matching services, which is useful if the UA uses a\n   low-bandwidth channel.\
    \  Using the Sort extension, a UA can ask the\n   DA/SA to sort matching URL entries,\
    \ which helps the UA to choose a\n   service from multiple candidates.  Sorting\
    \ by the server is more\n   efficient than sorting by the client since for sorting\
    \ purposes, the\n   former does not need to pass the attributes of matching URLs\
    \ to the\n   client.  Furthermore, using the Select and Sort extensions together\n\
    \   can facilitate discovering the best match, such as finding a service\n   that\
    \ has the maximum speed or the minimum load, or has a speed\n   closest to a reference\
    \ value.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"\
    SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"\
    OPTIONAL\" in this\n   document are to be interpreted according to in BCP 14,\
    \ RFC 2119\n   [RFC2119].\n"
- title: 2. Select Extension
  contents:
  - "2. Select Extension\n    0                   1                   2          \
    \         3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \ | Select Extension ID = 0x4002  |  Next Extension Offset (NEO)  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | NEO, cont'd   |      Number of URL Entries    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                        Figure 1. Select Extension\n   The format of the Select\
    \ extension is shown in Figure 1.  A UA uses\n   this extension in a Service Request\
    \ (SrvRqst) to limit the maximum\n   number (say, n) of URL entries to be returned.\
    \  When a DA/SA receives\n   a SrvRqst with a Select extension, it MUST use a\
    \ Select extension in\n   the corresponding SrvRply to indicate the total number\
    \ (say, m) of\n   matching URL entries if the DA/SA supports this extension, otherwise\n\
    \   the DA/SA MUST set the error code in the corresponding SrvRply to\n   OPTION_NOT_UNDERSTOOD\
    \ [RFC2608].  If n < m, then only the first n\n   matching URL entries are returned,\
    \ else all m matching URL entries\n   are returned.  As a special case, a UA may\
    \ set n to zero to obtain\n   the number of matching URL entries without retrieving\
    \ the entries\n   themselves.\n   We denote a Select extension as Select(number).\
    \  Thus, Select(3)\n   means that the corresponding SrvRply can have at most three\
    \ URL\n   entries.\n"
- title: 3. Sort Extension
  contents:
  - "3. Sort Extension\n    0                   1                   2            \
    \       3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  Sort\
    \ Extension ID = 0x4003   |  Next Extension Offset (NEO)  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | NEO, cont'd   |   length of <sort-key-list>   |<sort-key-list>\\\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                         Figure 2. Sort Extension\n   The format of the Sort\
    \ extension is shown in Figure 2.  A UA uses\n   this extension in a SrvRqst to\
    \ request the URL entries in the\n   corresponding SrvRply be sorted according\
    \ to the sort-key-list. The\n   sort-key-list is defined using Augmented Backus-Naur\
    \ Form (ABNF)\n   [RFC2234] as follows:\n   sort-key-list  = sort-key / sort-key\
    \ \",\" sort-key-list\n   sort-key       = key-name \":\" type \":\" ordering\
    \ [\":\" ref-value]\n   key-name       = attr-tag from Section 5 of RFC 2608\n\
    \   type           = \"s\" / \"i\"\n                    ; \"s\" for string type\n\
    \                    ; \"i\" for integer type\n   ordering       = \"+\" / \"\
    -\"\n                    ; \"+\" for increasing order\n                    ; \"\
    -\" for decreasing order\n   ref-value      = intval from Section 5 of RFC 2608\n\
    \   Each sort-key in the sort-key-list has a key-name, a type specifier,\n   an\
    \ ordering specifier, and an optional reference value.  The key-name\n   MUST\
    \ be a valid attribute name, and its type is explicitly specified.\n   Although\
    \ SLP has five attribute types (integer, string, boolean,\n   opaque and keyword),\
    \ we only consider integer sort and string sort\n   since keyword attributes (they\
    \ have no values) never need to be\n   sorted, and boolean and opaque attributes\
    \ can be sorted as strings if\n   needed.  The integer sort uses the integerOrderingMatch\
    \ rule defined\n   in X.520 [X520], whereas the string sort is performed based\
    \ on\n   lexical ordering.  Strings are compared using the rules defined in\n\
    \   Section 6.4 of RFC 2608.\n   Only integer keys may have a reference value,\
    \ causing the sort to be\n   based on the distance to the reference value.  A\
    \ reference-based\n   sort, such as \"X:i:+:12\", requires the following two steps:\n\
    \   Step 1. For each matching service, if its attribute X has a value of\n   \
    \        x, then use |x-12| as its metric.\n   Step 2. Use the metrics obtained\
    \ in Step 1 to sort attribute X\n           for matching services.\n   The SLP\
    \ sort rules are adapted from the Lightweight Directory Access\n   Protocol (LDAP)\
    \ sort rules defined in RFC 2891 [RFC2891].  Note that\n   sort in SLP is a best\
    \ effort, no sort error will be returned from a\n   DA/SA to a UA.\n   (1) The\
    \ sort-key-list is in order of highest to lowest sort key\n       precedence (Section\
    \ 1.1 of RFC 2891).\n   (2) Each attribute SHOULD only occur in the sort-key-list\
    \ once\n       (Section 1.1 of RFC 2891).  If an attribute is included in the\n\
    \       sort-key-list multiple times, only its first occurrence is\n       considered,\
    \ all other occurrences are ignored.\n   (3) For a multi-valued attribute, the\
    \ least value in each entry\n       SHOULD be used in sort (Section 2.2 of RFC\
    \ 2891).\n   (4) An entry missing one or more of the sort keys is treated as\n\
    \       having NULLs for those missing keys (Section 2.2 of RFC 2891).\n   (5)\
    \ NULL is considered as a larger value than all other valid\n       values (Section\
    \ 2.2 of RFC 2891).\n   (6) As the attribute type in SLP is not enforced, an attribute\
    \ may\n       have inconsistent values.  For the purpose of sorting,\n       inconsistent\
    \ values may exist only when an attribute is\n       sorted as integer.  Inconsistent\
    \ values SHOULD be treated as\n       NULLs.\n   When a DA/SA receives a SrvRqst\
    \ with a Sort extension, it MUST set\n   the error code in the corresponding SrvRply\
    \ to OPTION_NOT_UNDERSTOOD\n   [RFC2608] if the DA/SA does not support the Sort\
    \ extension or cannot\n   perform the requested sort.  The DA/SA sets the error\
    \ code in the\n   corresponding SrvRply to zero if it has successfully processed\
    \ the\n   SrvRqst and performed the requested sort.\n   We denote a Sort extension\
    \ as Sort(sort-key-list).  The following\n   examples illustrate how to use the\
    \ Sort extension.\n   o Integer sort on speed (decreasing order).\n        Sort(speed:i:-)\n\
    \     [Note] \"i\" means integer sort, and \"-\" means decreasing order.\n   o\
    \ Integer sort on load (increasing order) and speed (decreasing\n     order).\n\
    \        Sort(load:i:+,speed:i:-)\n     [Note] \"+\" means increasing order.\n\
    \   o String sort on model (increasing order).\n        Sort(model:s:+)\n    \
    \ [Note] \"s\" means string sort.\n   o Integer sort on speed (increasing order),\
    \ based on a reference\n     value 12.\n        Sort(speed:i:+:12)\n     [Note]\
    \ For example, if we have four matching services, with the\n     \"speed\" attribute\
    \ as 8 (URL1), 10 (URL2), 12 (URL3), and 15 (URL4),\n     then the sorted URL\
    \ list will be \"URL3,URL2,URL4,URL1\" (based on\n     the metric ordering of\
    \ |12-12| < |12-10| < |12-15| < |12-8|).\n"
- title: 4. Using the Select and Sort Extensions Together
  contents:
  - "4. Using the Select and Sort Extensions Together\n   In addition to being used\
    \ individually, the Select and Sort\n   extensions can be used together to facilitate\
    \ discovering the best\n   match, such as finding a service with the maximum speed.\
    \  When these\n   two extensions appear in the same SrvRqst message, they MUST\
    \ be\n   processed in the order of their presence.  We show some examples\n  \
    \ next.\n   o Find the service with the minimum load\n        Sort(load:i:+)\n\
    \        Select(1)\n   o Find the three fastest services\n        Sort(speed:i:-)\n\
    \        Select(3)\n   o Find the service with the minimum load among the three\
    \ fastest\n        Sort(speed:i:-)\n        Select(3)\n        Sort(load:i:+)\n\
    \        Select(1)\n   o Find the service that has a speed closest to 12\n   \
    \     Sort(speed:i:+:12)\n        Select(1)\n"
- title: 5. IANA Considerations
  contents:
  - "5. IANA Considerations\n   The Select and Sort extension IDs, 0x4002 and 0x4003,\
    \ described in\n   Section 2 and Section 3, respectively, have been assigned by\
    \ IANA out\n   of the SLP extension space (RFC 2608, Section 9.1) reserved for\n\
    \   \"mandatory to implement\" extensions (i.e., the 0x4000-0x7FFF range).\n"
- title: 6. Security Considerations
  contents:
  - "6. Security Considerations\n   There are no new security issues beyond those\
    \ described in RFC 2608.\n"
- title: 7. Acknowledgments
  contents:
  - "7. Acknowledgments\n   Ira McDonald provided good suggestions.\n"
- title: 8. Normative References
  contents:
  - "8. Normative References\n   [RFC2608] Guttman, E., Perkins, C., Veizades, J.\
    \ and M. Day, \"Service\n             Location Protocol, Version 2\", RFC 2608,\
    \ June 1999.\n   [RFC2119] Bradner, S., \"Key words for use in RFCs to indicate\n\
    \             requirement levels\", BCP 14, RFC 2119, March 1997.\n"
- title: 9. Non-normative References
  contents:
  - "9. Non-normative References\n   [X520]    International Telephone Union, \"The\
    \ Directory: Selected\n             Attribute Types\", X.520, 1997.\n   [RFC2234]\
    \ Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n             Specifications:\
    \ ABNF\", RFC 2234, November 1997.\n   [RFC2891] Howes, T., Wahl, M. and A. Anantha,\
    \ \"LDAP Control Extension\n             for Server Side Sorting of Search Results\"\
    , RFC 2891,\n             August 2000.\n"
- title: 10. Authors' Addresses
  contents:
  - "10. Authors' Addresses\n   Weibin Zhao\n   Department of Computer Science\n \
    \  Columbia University\n   1214 Amsterdam Avenue, MC 0401\n   New York, NY 10027-7003\n\
    \   EMail: zwb@cs.columbia.edu\n   Henning Schulzrinne\n   Department of Computer\
    \ Science\n   Columbia University\n   1214 Amsterdam Avenue, MC 0401\n   New York,\
    \ NY 10027-7003\n   EMail: hgs@cs.columbia.edu\n   Erik Guttman\n   Sun Microsystems\n\
    \   Eichhoelzelstr. 7\n   74915 Waibstadt\n   Germany\n   EMail: Erik.Guttman@sun.com\n\
    \   Chatschik Bisdikian\n   IBM Corp.\n   Thomas J. Watson Research Center\n \
    \  19 Skyline Drive\n   Hawthorne, NY 10532, USA\n   EMail: bisdik@us.ibm.com\n\
    \   William F. Jerome\n   IBM Corp.\n   Thomas J. Watson Research Center\n   19\
    \ Skyline Drive\n   Hawthorne, NY 10532, USA\n   EMail: wfj@us.ibm.com\n"
- title: 11. Full Copyright Statement
  contents:
  - "11. Full Copyright Statement\n   Copyright (C) The Internet Society (2002). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
