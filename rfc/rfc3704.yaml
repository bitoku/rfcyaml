- title: __initial_text__
  contents:
  - '               Ingress Filtering for Multihomed Networks

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet Best Current Practices\
    \ for the\n   Internet Community, and requests discussion and suggestions for\n\
    \   improvements.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   BCP 38, RFC 2827, is designed to limit the impact of distributed\n\
    \   denial of service attacks, by denying traffic with spoofed addresses\n   access\
    \ to the network, and to help ensure that traffic is traceable\n   to its correct\
    \ source network.  As a side effect of protecting the\n   Internet against such\
    \ attacks, the network implementing the solution\n   also protects itself from\
    \ this and other attacks, such as spoofed\n   management access to networking\
    \ equipment.  There are cases when this\n   may create problems, e.g., with multihoming.\
    \  This document describes\n   the current ingress filtering operational mechanisms,\
    \ examines\n   generic issues related to ingress filtering, and delves into the\n\
    \   effects on multihoming in particular.  This memo updates RFC 2827.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Different Ways to Implement Ingress Filtering  . . .\
    \ . . . . .  4\n       2.1 Ingress Access Lists . . . . . . . . . . . . . . .\
    \ . . . .  4\n       2.2 Strict Reverse Path Forwarding . . . . . . . . . . .\
    \ . . .  5\n       2.3 Feasible Path Reverse Path Forwarding  . . . . . . . .\
    \ . .  6\n       2.4 Loose Reverse Path Forwarding  . . . . . . . . . . . . .\
    \ .  6\n       2.5 Loose Reverse Path Forwarding Ignoring Default Routes  . .\
    \  7\n   3.  Clarifying the Applicability of Ingress Filtering  . . . . . .  8\n\
    \       3.1 Ingress Filtering at Multiple Levels . . . . . . . . . . .  8\n  \
    \     3.2 Ingress Filtering to Protect Your Own Infrastructure . . .  8\n    \
    \   3.3 Ingress Filtering on Peering Links . . . . . . . . . . . .  9\n   4. \
    \ Solutions to Ingress Filtering with Multihoming  . . . . . . .  9\n       4.1\
    \ Use Loose RPF When Appropriate . . . . . . . . . . . . . . 10\n       4.2 Ensure\
    \ That Each ISP's Ingress Filter Is Complete  . . . . 11\n       4.3 Send Traffic\
    \ Using a Provider Prefix Only to That Provider 11\n   5.  Security Considerations\
    \  . . . . . . . . . . . . . . . . . . . 12\n   6.  Conclusions and Future Work\
    \  . . . . . . . . . . . . . . . . . 13\n   7.  Acknowledgements . . . . . . .\
    \ . . . . . . . . . . . . . . . . 14\n   8.  References . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . 14\n       8.1.  Normative References . . . .\
    \ . . . . . . . . . . . . . . 14\n       8.2.  Informative References . . . .\
    \ . . . . . . . . . . . . . 14\n   9.  Authors' Addresses . . . . . . . . . .\
    \ . . . . . . . . . . . . 15\n   10. Full Copyright Statement . . . . . . . .\
    \ . . . . . . . . . . . 16\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   BCP 38, RFC 2827 [1], is designed to limit the impact of\
    \ distributed\n   denial of service attacks, by denying traffic with spoofed addresses\n\
    \   access to the network, and to help ensure that traffic is traceable\n   to\
    \ its correct source network.  As a side effect of protecting the\n   Internet\
    \ against such attacks, the network implementing the solution\n   also protects\
    \ itself from this and other attacks, such as spoofed\n   management access to\
    \ networking equipment.  There are cases when this\n   may create problems, e.g.,\
    \ with multihoming.  This document describes\n   the current ingress filtering\
    \ operational mechanisms, examines\n   generic issues related to ingress filtering\
    \ and delves into the\n   effects on multihoming in particular.\n   RFC 2827 recommends\
    \ that ISPs police their customers' traffic by\n   dropping traffic entering their\
    \ networks that is coming from a source\n   address not legitimately in use by\
    \ the customer network.  The\n   filtering includes but is in no way limited to\
    \ the traffic whose\n   source address is a so-called \"Martian Address\" - an\
    \ address that is\n   reserved [3], including any address within 0.0.0.0/8, 10.0.0.0/8,\n\
    \   127.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16, 224.0.0.0/4, or\n   240.0.0.0/4.\n\
    \   The reasoning behind the ingress filtering procedure is that\n   Distributed\
    \ Denial of Service Attacks frequently spoof other systems'\n   source addresses,\
    \ placing a random number in the field.  In some\n   attacks, this random number\
    \ is deterministically within the target\n   network, simultaneously attacking\
    \ one or more machines and causing\n   those machines to attack others with ICMP\
    \ messages or other traffic;\n   in this case, the attacked sites can protect\
    \ themselves by proper\n   filtering, by verifying that their prefixes are not\
    \ used in the\n   source addresses in packets received from the Internet.  In\
    \ other\n   attacks, the source address is literally a random 32 bit number,\n\
    \   resulting in the source of the attack being difficult to trace.  If\n   the\
    \ traffic leaving an edge network and entering an ISP can be\n   limited to traffic\
    \ it is legitimately sending, attacks can be\n   somewhat mitigated: traffic with\
    \ random or improper source addresses\n   can be suppressed before it does significant\
    \ damage, and attacks can\n   be readily traced back to at least their source\
    \ networks.\n   This document is aimed at ISP and edge network operators who 1)\
    \ would\n   like to learn more of ingress filtering methods in general, or 2)\
    \ are\n   already using ingress filtering to some degree but who would like to\n\
    \   expand its use and want to avoid the pitfalls of ingress filtering in\n  \
    \ the multihomed/asymmetric scenarios.\n   In section 2, several different ways\
    \ to implement ingress filtering\n   are described and examined in the generic\
    \ context.  In section 3,\n   some clarifications on the applicability of ingress\
    \ filtering methods\n   are made.  In section 4, ingress filtering is analyzed\
    \ in detail from\n   the multihoming perspective.  In section 5, conclusions and\
    \ potential\n   future work items are identified.\n"
- title: 2.  Different Ways to Implement Ingress Filtering
  contents:
  - "2.  Different Ways to Implement Ingress Filtering\n   This section serves as\
    \ an introduction to different operational\n   techniques used to implement ingress\
    \ filtering as of writing this\n   memo.  The mechanisms are described and analyzed\
    \ in general terms,\n   and multihoming-specific issues are described in Section\
    \ 4.\n   There are at least five ways one can implement RFC 2827, with varying\n\
    \   impacts.  These include (the names are in relatively common usage):\n   o\
    \  Ingress Access Lists\n   o  Strict Reverse Path Forwarding\n   o  Feasible\
    \ Path Reverse Path Forwarding\n   o  Loose Reverse Path Forwarding\n   o  Loose\
    \ Reverse Path Forwarding ignoring default routes\n   Other mechanisms are also\
    \ possible, and indeed, there are a number of\n   techniques that might profit\
    \ from further study, specification,\n   implementation, and/or deployment; see\
    \ Section 6.  However, these are\n   out of scope.\n"
- title: 2.1.  Ingress Access Lists
  contents:
  - "2.1.  Ingress Access Lists\n   An Ingress Access List is a filter that checks\
    \ the source address of\n   every message received on a network interface against\
    \ a list of\n   acceptable prefixes, dropping any packet that does not match the\n\
    \   filter.  While this is by no means the only way to implement an\n   ingress\
    \ filter, it is the one proposed by RFC 2827 [1], and in some\n   sense the most\
    \ deterministic one.\n   However, Ingress Access Lists are typically maintained\
    \ manually; for\n   example, forgetting to have the list updated at the ISPs if\
    \ the set\n   of prefixes changes (e.g., as a result of multihoming) might lead\
    \ to\n   discarding the packets if they do not pass the ingress filter.\n   Naturally,\
    \ this problem is not limited to Ingress Access Lists -- it\n   is inherent to\
    \ Ingress Filtering when the ingress filter is not\n   complete.  However, usually\
    \ Ingress Access Lists are more difficult\n   to maintain than the other mechanisms,\
    \ and having an outdated list\n   can prevent legitimate access.\n"
- title: 2.2.  Strict Reverse Path Forwarding
  contents:
  - "2.2.  Strict Reverse Path Forwarding\n   Strict Reverse Path Forwarding (Strict\
    \ RPF) is a simple way to\n   implement an ingress filter.  It is conceptually\
    \ identical to using\n   access lists for ingress filtering, with the exception\
    \ that the\n   access list is dynamic.  This may also be used to avoid duplicate\n\
    \   configuration (e.g., maintaining both static routes or BGP prefix-\n   list\
    \ filters and interface access-lists).  The procedure is that the\n   source address\
    \ is looked up in the Forwarding Information Base (FIB)\n   - and if the packet\
    \ is received on the interface which would be used\n   to forward the traffic\
    \ to the source of the packet, it passes the\n   check.\n   Strict Reverse Path\
    \ Forwarding is a very reasonable approach in front\n   of any kind of edge network;\
    \ in particular, it is far superior to\n   Ingress Access Lists when the network\
    \ edge is advertising multiple\n   prefixes using BGP.  It makes for a simple,\
    \ cheap, fast, and dynamic\n   filter.\n   But Strict Reverse Path Forwarding\
    \ has some problems of its own.\n   First, the test is only applicable in places\
    \ where routing is\n   symmetrical - where IP datagrams in one direction and responses\
    \ from\n   the other deterministically follow the same path.  While this is\n\
    \   common at edge network interfaces to their ISP, it is in no sense\n   common\
    \ between ISPs, which normally use asymmetrical \"hot potato\"\n   routing.  Also,\
    \ if BGP is carrying prefixes and some legitimate\n   prefixes are not being advertised\
    \ or not being accepted by the ISP\n   under its policy, the effect is the same\
    \ as ingress filtering using\n   an incomplete access list: some legitimate traffic\
    \ is filtered for\n   lack of a route in the filtering router's Forwarding Information\n\
    \   Base.\n   There are operational techniques, especially with BGP but somewhat\n\
    \   applicable to other routing protocols as well, to make strict RPF\n   work\
    \ better in the case of asymmetric or multihomed traffic.  The ISP\n   assigns\
    \ a better metric which is not propagated outside of the\n   router, either a\
    \ vendor-specific \"weight\" or a protocol distance to\n   prefer the directly\
    \ received routes.  With BGP and sufficient\n   machinery in place, setting the\
    \ preferences could even be automated,\n   using BGP Communities [2].  That way,\
    \ the route will always be the\n   best one in the FIB, even in the scenarios\
    \ where only the primary\n   connectivity would be used and typically no packets\
    \ would pass\n   through the interface.  This method assumes that there is no\
    \ strict\n   RPF filtering between the primary and secondary edge routers; in\n\
    \   particular, when applied to multihoming to different ISPs, this\n   assumption\
    \ may fail.\n"
- title: 2.3.  Feasible Path Reverse Path Forwarding
  contents:
  - "2.3.  Feasible Path Reverse Path Forwarding\n   Feasible Path Reverse Path Forwarding\
    \ (Feasible RPF) is an extension\n   of Strict RPF.  The source address is still\
    \ looked up in the FIB (or\n   an equivalent, RPF-specific table) but instead\
    \ of just inserting one\n   best route there, the alternative paths (if any) have\
    \ been added as\n   well, and are valid for consideration.  The list is populated\
    \ using\n   routing-protocol specific methods, for example by including all or\
    \ N\n   (where N is less than all) feasible BGP paths in the Routing\n   Information\
    \ Base (RIB).  Sometimes this method has been implemented\n   as part of a Strict\
    \ RPF implementation.\n   In the case of asymmetric routing and/or multihoming\
    \ at the edge of\n   the network, this approach provides a way to relatively easily\n\
    \   address the biggest problems of Strict RPF.\n   It is critical to understand\
    \ the context in which Feasible RPF\n   operates.  The mechanism relies on consistent\
    \ route advertisements\n   (i.e., the same prefix(es), through all the paths)\
    \ propagating to all\n   the routers performing Feasible RPF checking.  For example,\
    \ this may\n   not hold e.g., in the case where a secondary ISP does not propagate\n\
    \   the BGP advertisement to the primary ISP e.g., due to route-maps or\n   other\
    \ routing policies not being up-to-date.  The failure modes are\n   typically\
    \ similar to \"operationally enhanced Strict RPF\", as\n   described above.\n\
    \   As a general guideline, if an advertisement is filtered, the packets\n   will\
    \ be filtered as well.\n   In consequence, properly defined, Feasible RPF is a\
    \ very powerful\n   tool in certain kinds of asymmetric routing scenarios, but\
    \ it is\n   important to understand its operational role and applicability\n \
    \  better.\n"
- title: 2.4.  Loose Reverse Path Forwarding
  contents:
  - "2.4.  Loose Reverse Path Forwarding\n   Loose Reverse Path Forwarding (Loose\
    \ RPF) is algorithmically similar\n   to strict RPF, but differs in that it checks\
    \ only for the existence\n   of a route (even a default route, if applicable),\
    \ not where the route\n   points to.  Practically, this could be considered as\
    \ a \"route\n   presence check\" (\"loose RPF is a misnomer in a sense because\
    \ there is\n   no \"reverse path\" check in the first place).\n   The questionable\
    \ benefit of Loose RPF is found in asymmetric routing\n   situations: a packet\
    \ is dropped if there is no route at all, such as\n   to \"Martian addresses\"\
    \ or addresses that are not currently routed,\n   but is not dropped if a route\
    \ exists.\n   Loose Reverse Path Forwarding has problems, however.  Since it\n\
    \   sacrifices directionality, it loses the ability to limit an edge\n   network's\
    \ traffic to traffic legitimately sourced from that network,\n   in most cases,\
    \ rendering the mechanism useless as an ingress\n   filtering mechanism.\n   Also,\
    \ many ISPs use default routes for various purposes such as\n   collecting illegitimate\
    \ traffic at so-called \"Honey Pot\" systems or\n   discarding any traffic they\
    \ do not have a \"real\" route to, and\n   smaller ISPs may well purchase transit\
    \ capabilities and use a default\n   route from a larger provider.  At least some\
    \ implementations of Loose\n   RPF check where the default route points to.  If\
    \ the route points to\n   the interface where Loose RPF is enabled, any packet\
    \ is allowed from\n   that interface; if it points nowhere or to some other interface,\
    \ the\n   packets with bogus source addresses will be discarded at the Loose\n\
    \   RPF interface even in the presence of a default route.  If such\n   fine-grained\
    \ checking is not implemented, presence of a default route\n   nullifies the effect\
    \ of Loose RPF completely.\n   One case where Loose RPF might fit well could be\
    \ an ISP filtering\n   packets from its upstream providers, to get rid of packets\
    \ with\n   \"Martian\" or other non-routed addresses.\n   If other approaches\
    \ are unsuitable, loose RPF could be used as a form\n   of contract verification:\
    \ the other network is presumably certifying\n   that it has provided appropriate\
    \ ingress filtering rules, so the\n   network doing the filtering need only verify\
    \ the fact and react if\n   any packets which would show a breach in the contract\
    \ are detected.\n   Of course, this mechanism would only show if the source addresses\n\
    \   used are \"martian\" or other unrouted addresses -- not if they are\n   from\
    \ someone else's address space.\n"
- title: 2.5.  Loose Reverse Path Forwarding Ignoring Default Routes
  contents:
  - "2.5.  Loose Reverse Path Forwarding Ignoring Default Routes\n   The fifth implementation\
    \ technique may be characterized as Loose RPF\n   ignoring default routes, i.e.,\
    \ an \"explicit route presence check\".\n   In this approach, the router looks\
    \ up the source address in the route\n   table, and preserves the packet if a\
    \ route is found.  However, in the\n   lookup, default routes are excluded.  Therefore,\
    \ the technique is\n   mostly usable in scenarios where default routes are used\
    \ only to\n   catch traffic with bogus source addresses, with an extensive (or\
    \ even\n   full) list of explicit routes to cover legitimate traffic.\n   Like\
    \ Loose RPF, this is useful in places where asymmetric routing is\n   found, such\
    \ as on inter-ISP links.  However, like Loose RPF, since it\n   sacrifices directionality,\
    \ it loses the ability to limit an edge\n   network's traffic to traffic legitimately\
    \ sourced from that network.\n"
- title: 3.  Clarifying the Applicability of Ingress Filtering
  contents:
  - "3.  Clarifying the Applicability of Ingress Filtering\n   What may not be readily\
    \ apparent is that ingress filtering is not\n   applied only at the \"last-mile\"\
    \ interface between the ISP and the end\n   user.  It's perfectly fine, and recommended,\
    \ to also perform ingress\n   filtering at the edges of ISPs where appropriate,\
    \ at the routers\n   connecting LANs to an enterprise network, etc. -- this increases\
    \ the\n   defense in depth.\n"
- title: 3.1.  Ingress Filtering at Multiple Levels
  contents:
  - "3.1.  Ingress Filtering at Multiple Levels\n   Because of wider deployment of\
    \ ingress filtering, the issue is\n   recursive.  Ingress filtering has to work\
    \ everywhere where it's used,\n   not just between the first two parties.  That\
    \ is, if a user\n   negotiates a special ingress filtering arrangement with his\
    \ ISP, he\n   should also ensure (or make sure the ISP ensures) that the same\n\
    \   arrangements also apply to the ISP's upstream and peering links, if\n   ingress\
    \ filtering is being used there -- or will get used, at some\n   point in the\
    \ future; similarly with the upstream ISPs and peers.\n   In consequence, manual\
    \ models which do not automatically propagate\n   the information to every party\
    \ where the packets would go and where\n   ingress filtering might be applied\
    \ have only limited generic\n   usefulness.\n"
- title: 3.2.  Ingress Filtering to Protect Your Own Infrastructure
  contents:
  - "3.2.  Ingress Filtering to Protect Your Own Infrastructure\n   Another feature\
    \ stemming from wider deployment of ingress filtering\n   may not be readily apparent.\
    \  The routers and other ISP\n   infrastructure are vulnerable to several kinds\
    \ of attacks.  The\n   threat is typically mitigated by restricting who can access\
    \ these\n   systems.\n   However, unless ingress filtering (or at least, a limited\
    \ subset of\n   it) has been deployed at every border (towards the customers,\
    \ peers\n   and upstreams) -- blocking the use of your own addresses as source\n\
    \   addresses -- the attackers may be able to circumvent the protections\n   of\
    \ the infrastructure gear.\n   Therefore, by deploying ingress filtering, one\
    \ does not just help the\n   Internet as a whole, but protects against several\
    \ classes of threats\n   to your own infrastructure as well.\n"
- title: 3.3.  Ingress Filtering on Peering Links
  contents:
  - "3.3.  Ingress Filtering on Peering Links\n   Ingress filtering on peering links,\
    \ whether by ISPs or by end-sites,\n   is not really that much different from\
    \ the more typical \"downstream\"\n   or \"upstream\" ingress filtering.\n   However,\
    \ it's important to note that with mixed upstream/downstream\n   and peering links,\
    \ the different links may have different properties\n   (e.g., relating to contracts,\
    \ trust, viability of the ingress\n   filtering mechanisms, etc.).  In the most\
    \ typical case, just using an\n   ingress filtering mechanism towards a peer (e.g.,\
    \ Strict RPF) works\n   just fine as long as the routing between the peers is\
    \ kept reasonably\n   symmetric.  It might even be considered useful to be able\
    \ to filter\n   out source addresses coming from an upstream link which should\
    \ have\n   come over a peering link (implying something like Strict RPF is used\n\
    \   towards the upstream) -- but this is a more complex topic and\n   considered\
    \ out of scope; see Section 6.\n"
- title: 4.  Solutions to Ingress Filtering with Multihoming
  contents:
  - "4.  Solutions to Ingress Filtering with Multihoming\n   First, one must ask why\
    \ a site multihomes; for example, the edge\n   network might:\n   o  use two ISPs\
    \ for backing up the Internet connectivity to ensure\n      robustness,\n   o\
    \  use whichever ISP is offering the fastest TCP service at the\n      moment,\n\
    \   o  need several points of access to the Internet in places where no\n    \
    \  one ISP offers service, or\n   o  be changing ISPs (and therefore multihoming\
    \ only temporarily).\n   One can imagine a number of approaches to working around\
    \ the\n   limitations of ingress filters for multihomed networks.  Options\n \
    \  include:\n   1.  Do not multihome.\n   2.  Do not use ingress filters.\n  \
    \ 3.  Accept that service will be incomplete.\n   4.  On some interfaces, weaken\
    \ ingress filtering by using an\n       appropriate form of loose RPF check, as\
    \ described in Section 4.1.\n   5.  Ensure, by BGP or by contract, that each ISP's\
    \ ingress filter is\n       complete, as described in Section 4.2.\n   6.  Ensure\
    \ that edge networks only deliver traffic to their ISPs that\n       will in fact\
    \ pass the ingress filter, as described in Section\n       4.3.\n   The first\
    \ three of these are obviously mentioned for completeness;\n   they are not and\
    \ cannot be viable positions; the final three are\n   considered below.\n   The\
    \ fourth and the fifth must be ensured in the upstream ISPs as\n   well, as described\
    \ in Section 3.1.\n   Next, we now look at the viable ways for dealing with the\
    \ side-\n   effects of ingress filters.\n"
- title: 4.1.  Use Loose RPF When Appropriate
  contents:
  - "4.1.  Use Loose RPF When Appropriate\n   Where asymmetric routing is preferred\
    \ or is unavoidable, ingress\n   filtering may be difficult to deploy using a\
    \ mechanism such as strict\n   RPF which requires the paths to be symmetrical.\
    \  In many cases, using\n   operational methods or feasible RPF may ensure the\
    \ ingress filter is\n   complete, like described below.  Failing that, the only\
    \ real options\n   are to not perform ingress filtering, use a manual access-list\n\
    \   (possibly in addition to some other mechanisms), or to using some\n   form\
    \ of Loose RPF check.\n   Failing to provide any ingress filter at all essentially\
    \ trusts the\n   downstream network to behave itself, which is not the wisest\
    \ course\n   of action.  However, especially in the case of very large networks\
    \ of\n   even hundreds or thousands of prefixes, maintaining manual access-\n\
    \   lists may be too much to ask.\n   The use of Loose RPF does not seem like\
    \ a good choice between the\n   edge network and the ISP, since it loses the directionality\
    \ of the\n   test.  This argues in favor of either using a complete filter in\
    \ the\n   upstream network or ensuring in the downstream network that packets\n\
    \   the upstream network will reject will never reach it.\n   Therefore, the use\
    \ of Loose RPF cannot be recommended, except as a\n   way to measure whether \"\
    martian\" or other unrouted addresses are\n   being used.\n"
- title: 4.2.  Ensure That Each ISP's Ingress Filter Is Complete
  contents:
  - "4.2.  Ensure That Each ISP's Ingress Filter Is Complete\n   For the edge network,\
    \ if multihoming is being used for robustness or\n   to change routing from time\
    \ to time depending on measured ISP\n   behavior, the simplest approach will be\
    \ to ensure that its ISPs in\n   fact carry its addresses in routing.  This will\
    \ often require the\n   edge network to use provider-independent prefixes and\
    \ exchange routes\n   with its ISPs with BGP, to ensure that its prefix is carried\
    \ upstream\n   to the major transit ISPs.  Of necessity, this implies that the\
    \ edge\n   network will be of a size and technical competence to qualify for a\n\
    \   separate address assignment and an autonomous system number from its\n   RIR.\n\
    \   There are a number of techniques which make it easier to ensure the\n   ISP's\
    \ ingress filter is complete.  Feasible RPF and Strict RPF with\n   operational\
    \ techniques both work quite well for multihomed or\n   asymmetric scenarios between\
    \ the ISP and an edge network.\n   When a routing protocol is not being used,\
    \ but rather the customer\n   information is generated from databases such as\
    \ Radius, TACACS, or\n   Diameter, the ingress filtering can be the most easily\
    \ ensured and\n   kept up-to-date with Strict RPF or Ingress Access Lists generated\n\
    \   automatically from such databases.\n"
- title: 4.3.  Send Traffic Using a Provider Prefix Only to That Provider
  contents:
  - "4.3.  Send Traffic Using a Provider Prefix Only to That Provider\n   For smaller\
    \ edge networks that use provider-based addressing and\n   whose ISPs implement\
    \ ingress filters (which they should do), the\n   third option is to route traffic\
    \ being sourced from a given\n   provider's address space to that provider.\n\
    \   This is not a complicated procedure, but requires careful planning\n   and\
    \ configuration.  For robustness, the edge network may choose to\n   connect to\
    \ each of its ISPs through two or more different Points of\n   Presence (POPs),\
    \ so that if one POP or line experiences an outage,\n   another link to the same\
    \ ISP can be used.  Alternatively, a set of\n   tunnels could be configured instead\
    \ of multiple connections to the\n   same ISP [4][5].  This way the edge routers\
    \ are configured to first\n   inspect the source address of a packet destined\
    \ to an ISP and shunt\n   it into the appropriate tunnel or interface toward the\
    \ ISP.\n   If such a scenario is applied exhaustively, so that an exit router\
    \ is\n   chosen in the edge network for every prefix the network uses, traffic\n\
    \   originating from any other prefix can be summarily discarded instead\n   of\
    \ sending it to an ISP.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   Ingress filtering is typically performed to ensure\
    \ that traffic\n   arriving on one network interface legitimately comes from a\
    \ computer\n   residing on a network reachable through that interface.\n   The\
    \ closer to the actual source ingress filtering is performed, the\n   more effective\
    \ it is.  One could wish that the first hop router would\n   ensure that traffic\
    \ being sourced from its neighboring end system was\n   correctly addressed; a\
    \ router further away can only ensure that it is\n   possible that there is such\
    \ a system within the indicated prefix.\n   Therefore, ingress filtering should\
    \ be done at multiple levels, with\n   different level of granularity.\n   It\
    \ bears to keep in mind that while one goal of ingress filtering is\n   to make\
    \ attacks traceable, it is impossible to know whether the\n   particular attacker\
    \ \"somewhere in the Internet\" is being ingress\n   filtered or not.  Therefore,\
    \ one can only guess whether the source\n   addresses have been spoofed or not:\
    \ in any case, getting a possible\n   lead -- e.g., to contact a potential source\
    \ to ask whether they're\n   observing an attack or not -- is still valuable,\
    \ and more so when the\n   ingress filtering gets more and more widely deployed.\n\
    \   In consequence, every administrative domain should try to ensure a\n   sufficient\
    \ level of ingress filtering on its borders.\n   Security properties and applicability\
    \ of different ingress filtering\n   types differ a lot.\n   o  Ingress Access\
    \ Lists require typically manual maintenance, but are\n      the most bulletproof\
    \ when done properly; typically, ingress access\n      lists are best fit between\
    \ the edge and the ISP when the\n      configuration is not too dynamic if strict\
    \ RPF is not an option,\n      between ISPs if the number of used prefixes is\
    \ low, or as an\n      additional layer of protection.\n   o  Strict RPF check\
    \ is a very easy and sure way to implement ingress\n      filtering.  It is typically\
    \ fit between the edge network and the\n      ISP.  In many cases, a simple strict\
    \ RPF can be augmented by\n      operational procedures in the case of asymmetric\
    \ traffic patterns,\n      or the feasible RPF technique to also account for other\n\
    \      alternative paths.\n   o  Feasible Path RPF check is an extension of Strict\
    \ RPF.  It is\n      suitable in all the scenarios where Strict RPF is, but multihomed\n\
    \      or asymmetric scenarios in particular.  However, one must remember\n  \
    \    that Feasible RPF assumes the consistent origination and\n      propagation\
    \ of routing information to work; the implications of\n      this must be understood\
    \ especially if a prefix advertisement\n      passes through third parties.\n\
    \   o  Loose RPF primarily filters out unrouted prefixes such as Martian\n   \
    \   addresses.  It can be applied in the upstream interfaces to reduce\n     \
    \ the size of DoS attacks with unrouted source addresses.  In the\n      downstream\
    \ interfaces it can only be used as a contract\n      verification, that the other\
    \ network has performed at least some\n      ingress filtering.\n   When weighing\
    \ the tradeoffs of different ingress filtering\n   mechanisms, the security properties\
    \ of a more relaxed approach should\n   be carefully considered before applying\
    \ it.  Especially when applied\n   by an ISP towards an edge network, there don't\
    \ seem to be many\n   reasons why a stricter form of ingress filtering would not\
    \ be\n   appropriate.\n"
- title: 6.  Conclusions and Future Work
  contents:
  - "6.  Conclusions and Future Work\n   This memo describes ingress filtering techniques\
    \ in general and the\n   options for multihomed networks in particular.\n   It\
    \ is important for ISPs to implement ingress filtering to prevent\n   spoofed\
    \ addresses being used, both to curtail DoS attacks and to make\n   them more\
    \ traceable, and to protect their own infrastructure.  This\n   memo describes\
    \ mechanisms that could be used to achieve that effect,\n   and the tradeoffs\
    \ of those mechanisms.\n   To summarize:\n   o  Ingress filtering should always\
    \ be done between the ISP and a\n      single-homed edge network.\n   o  Ingress\
    \ filtering with Feasible RPF or similar Strict RPF\n      techniques could almost\
    \ always be applied between the ISP and\n      multi-homed edge networks as well.\n\
    \   o  Both the ISPs and edge networks should verify that their own\n      addresses\
    \ are not being used in source addresses in the packets\n      coming from outside\
    \ their network.\n   o  Some form of ingress filtering is also reasonable between\
    \ ISPs,\n      especially if the number of prefixes is low.\n   This memo will\
    \ lower the bar for the adoption of ingress filtering\n   especially in the scenarios\
    \ like asymmetric/multihomed networks where\n   the general belief has been that\
    \ ingress filtering is difficult to\n   implement.\n   One can identify multiple\
    \ areas where additional work would be\n   useful:\n   o  Specify the mechanisms\
    \ in more detail: there is some variance\n      between implementations e.g.,\
    \ on whether traffic to multicast\n      destination addresses will always pass\
    \ the Strict RPF filter or\n      not.  By formally specifying the mechanisms\
    \ the implementations\n      might get harmonized.\n   o  Study and specify Routing\
    \ Information Base (RIB) -based RPF\n      mechanisms, e.g., Feasible Path RPF,\
    \ in more detail.  In\n      particular, consider under which assumptions these\
    \ mechanisms work\n      as intended and where they don't.\n   o  Write a more\
    \ generic note on the ingress filtering mechanisms than\n      this memo, after\
    \ the taxonomy and the details or the mechanisms\n      (points above) have been\
    \ fleshed out.\n   o  Consider the more complex case where a network has connectivity\n\
    \      with different properties (e.g., peers and upstreams), and wants\n    \
    \  to ensure that traffic sourced with a peer's address should not be\n      accepted\
    \ from the upstream.\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   Rob Austein, Barry Greene, Christoph Reichert, Daniel\
    \ Senie, Pedro\n   Roque, and Iljitsch van Beijnum reviewed this document and\
    \ helped in\n   improving it.  Thomas Narten, Ted Hardie, and Russ Housley provided\n\
    \   good feedback which boosted the document in its final stages.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [1]  Ferguson, P. and D. Senie, \"Network Ingress\
    \ Filtering: Defeating\n        Denial of Service Attacks which employ IP Source\
    \ Address\n        Spoofing\", BCP 38, RFC 2827, May 2000.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [2]  Chandrasekeran, R., Traina, P. and T. Li,\
    \ \"BGP Communities\n        Attribute\", RFC 1997, August 1996.\n   [3]  IANA,\
    \ \"Special-Use IPv4 Addresses\", RFC 3330, September 2002.\n   [4]  Bates, T.\
    \ and Y. Rekhter, \"Scalable Support for Multi-homed\n        Multi-provider Connectivity\"\
    , RFC 2260, January 1998.\n   [5]  Hagino, J. and H. Snyder, \"IPv6 Multihoming\
    \ Support at Site Exit\n        Routers\", RFC 3178, October 2001.\n"
- title: 9.  Authors' Addresses
  contents:
  - "9.  Authors' Addresses\n   Fred Baker\n   Cisco Systems\n   Santa Barbara, CA\
    \  93117\n   US\n   EMail: fred@cisco.com\n   Pekka Savola\n   CSC/FUNET\n   Espoo\n\
    \   Finland\n   EMail: psavola@funet.fi\n"
- title: 10.  Full Copyright Statement
  contents:
  - "10.  Full Copyright Statement\n   Copyright (C) The Internet Society (2004).\
    \  This document is subject\n   to the rights, licenses and restrictions contained\
    \ in BCP 78 and\n   except as set forth therein, the authors retain all their\
    \ rights.\n   This document and the information contained herein are provided\
    \ on an\n   \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n\
    \   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
