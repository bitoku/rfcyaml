Abstract Electronic commerce frequently requires a substantial exchange of information in order to complete a purchase or other transaction, especially the first time the parties communicate.
A standard set of hierarchically organized payment related information field names in an XML syntax is defined so that this task can be more easily automated.
This is the second version of an Electronic Commerce Modeling Language (ECML) and is intended to meet the requirements of RFC 3505.
Numerous parties are conducting business on the Internet using ad hoc fields and forms.
The data formats and structure can vary considerably from one party to another.
Where forms are filled out manually, some users find the diversity confusing, and the process of manually filling in these forms can be tedious and error prone.
Software tools, including electronic wallets, can help this situation.
Such tools can assist in conducting online transactions by storing billing, shipping, payment, preference, and similar information and using this information to complete the data sets required by interactions automatically.
For example, software that fills out forms has been successfully built into browsers, as proxy servers, as helper applications to browsers, as stand alone applications, as browser plug ins, and as server based applications.
But the proliferation of more automated transaction software has been hampered by the lack of standards.
ECML (Electronic Commerce Modeling Language) provides a set of hierarchical payment oriented data structures that will enable automated software, including electronic wallets from multiple vendors, to supply and query for needed data in a more uniform manner.
Version 2.0 extends ECML Versions 1.0
[RFC2706] and 1.1 [RFC3106] as described in the appendix to this document.
These enhancements include support for additional payment mechanisms and transaction information and use of XML as the exemplar syntax.
ECML is designed to provide a simple baseline useful in a variety of contexts.
Likely uses for ECML v2 are consumer payment information input and business to business transactions.
At this time, the first is still likely to occur through HTML forms.
The second is more likely to use XML documents.
History and Relationship to Other Standards
The ECML fields were initially derived from the W3C P3P base data schema [P3P.BASE] by the ECML Alliance as described in [RFC2706, RFC3106].
Technical development and change control of ECML was then transferred to the IETF.
In version 2, ECML is extended by the fields in a W3C P3P Note related to eCommerce [P3P.ECOM], by [ISO8583], and other sources.
Its primary exemplar form is now an XML syntax.
Field Definitions, DTD, and Schema ECML v2 is the definition and naming of a hierarchically structured set of fields and the provision of an optional XML syntax for their transmission.
These fields can be encoded in other syntaxes.
Regardless of the encoding used, the fields can be transmitted via a variety of protocols.
Section 2.1 below lists and describes the fields, Section 2.2.1 provides an XML DTD for use with the fields, and Section 2.2.2 provides an XML schema.
To conform to this document, field names must be named and hierarchically structured as closely to the structure and naming listed below as is practical given the syntax and transaction protocol in use.
This does not impose any restriction on human visible labeling of fields, just on their name or names and structure as used in on the wire communication.)
The fields are listed below, along with the minimum data entry size allowed.
Implementations may accept larger data sizes, if doing so makes sense, and, for some applications, they will need to allow for larger data sizes.
Appropriate data transmission mechanisms may use this to request and send aggregates, such as Ecom Payment Card ExpDate (to encompass all of a set of card expiry date components) or Ecom ShipTo (to encompass all the ship to address components that a consumer is willing to provide).
The labeling, marshalling, and unmarshalling of the components of such aggregates depend on the data transfer protocol used.
The suggested syntax is XML as specified in Section 2.2.
The table below is the ECML v2 field list.
The NAME column gives the structured string name of each field as explained above.
The MIN column below is the minimum data size that MUST be allowed for on data entry.
It is NOT the minimum size for valid contents of the field, and merchant software should, in many cases, be prepared to receive a longer or shorter value.
Merchants dealing with areas where, for example, the state/province name or phone number is longer than the MIN given below obviously must permit longer data entry.
In some cases, however, there is a maximum size that makes sense, and where this is the case, it is usually documented in a Note for the field.
15  (54) ship to middle name
Ecom ShipTo Postal Name Middle
15  ( 2) ship to last name
15  (54) ship to name suffix
Ecom ShipTo Postal Street Line1
( 4) ship to street line2
Ecom ShipTo Telecom Phone Number    10  ( 8) ship to email
15  (54) bill to middle name
Ecom BillTo Postal Name Middle
15  ( 2) bill to last name
20  ( 4) bill to street
( 5) bill to zip/postal code
Ecom BillTo Telecom Phone Number    10
Ecom ReceiptTo Postal Name Prefix    4  ( 1) receipt to first name
15  (54) receipt to middle name
15  ( 2) receipt to last name
Ecom ReceiptTo Postal Name Suffix    4  ( 3) receipt to company name
20  ( 4) receipt to street line2
20  ( 4) receipt to street line3
ReceiptTo Postal Street Line3  20  ( 4) receipt to city
( 6) receipt to country
2  ( 7) receipt to phone
Ecom ReceiptTo Telecom Phone Number 10  ( 8) receipt to email
(14) card expire date month
Ecom Payment Card ExpDate Month
(15) card expire date year
(15) card valid date year
(15) loyalty card expire year
(14) loyalty card valid month
Ecom Loyalty Card ValidFrom Month    2
(15) loyalty card valid year
(15) user data birth year
(25) transaction URL inquiry   Ecom Transaction Inquiry
The following fields are used to communicate between the merchant and a processor acting for the merchant (such a processor is commonly called an acquirer and is frequently a bank):
For example: Mr., Mrs., Ms., Dr.
This field is commonly omitted.
May also be used for middle initial.
For example: Ph.D., Jr. (Junior), 3rd, Esq.
This field is commonly omitted.
(4)  Address lines must be filled in the order line1, then line2, and last line3.
Thus, for example, it is an error for line1 to be null if line2 or line3 is not.
(5)  2 characters are the minimum for the US and Canada; other countries may require longer fields.
For the US, use 2  character US postal state abbreviation.
(6)  Minimum field lengths for Postal Code will vary according to the international market served.
Use 5 character postal code or 5 4 ZIP for the US and 6 character postal code for Canada.
The size given, 14, is believed to be the maximum required anywhere in the world.
(7)  Use [ISO3166] standard two letter country codes.
(8)  10 digits are the minimum for numbers within the North American Numbering Plan (<http://www.nanpa.com
It includes the US, Canada and a number of Caribbean and smaller Pacific nations, but not Cuba).
Other countries may require longer fields.
Telephone numbers are complicated by differing international access codes, variant punctuation of area/city codes within countries, etc.
Although it is desirable for telephone numbers to be in standard international format [E.164], it may be necessary to use heuristics or human examination based on the telephone number and addresses given to figure out how to call a customer, since people may enter local formatted numbers without area/access codes.
It is recommend that an "x" be placed before extension numbers and that the "x" and extension number appear after all other parts of the number.
The name of the cardholder as it appears on the card.
Use up to the first 4 letters of the association name (see also Note 102)
Diners Club DISC   Discover JCB
VISA   Visa (12) Includes the check digit at the end but no spaces or hyphens [ISO7812].
The min given, 19, is the longest number permitted under the ISO standard.
An additional cardholder verification number printed on the card (but not embossed or recorded on the magnetic stripe) such as the American Express CIV, MasterCard CVC2, and Visa CVV2 values.
The day of the month.
A leading zero is ignored, so, for example, 07 is valid for the seventh day of the month.
The month of the year.
Jan 1, Feb 2, March 3, etc.
A leading zero is ignored, so, for example, 07 is valid for July.
The value in the wallet cell is always four digits; e.g., 1999, 2000, 2001.
A space separated list of protocols available in connection with the specified card.
The following is the initial list of case  insensitive tokens: none set setcert iotp echeck simcard phoneid "Set" indicates that the card is usable with SET protocol (i.e., it is in a SET wallet) but that it does not have a SET certificate [SET].
"Setcert" indicates that the card is usable with SET and has a set certificate [SET].
"iotp" indicates that the IOTP protocol [RFC2801] is supported at the customer.
"echeck" indicates that the eCheck protocol [eCheck] is supported at the customer.
"simcard" indicates an ability to use the transaction instrument built into a Cellphone subscriber for identification.
"phoneid" indicates use for the transaction of a billable phone number.
"None" indicates that automatic field fill is operating but that there is no further information.
A unique order ID string generated by the consumer software.
The user ID and password fields can be used if the user has a pre established account with the merchant to which access is authenticated by such values.
For that use, one would expect an application to require exactly one user ID, and one password field be present.
URI [RFC3986] indicating version of this set of fields.
A string to identify the source and version of form fill software that is acting on behalf of a user.
Should contain company and/or product name and version; for example, "Wallets Inc., SuperFill, v42.7".
A flag to indicate that this web page/aggregate is the final one for this transaction.
The merchant domain name [RFC1034], such as www.merchant.example.
The domain name [RFC1034] of the gateway transaction processor that is actually accepting the payment on behalf of the merchant, such as www.processor.example.
A Transaction identification string whose format is specific to the processor.
A URL [RFC3986] that can be invoked to inquire about the transaction.
The amount of the transaction in ISO currency format [ISO4217].
This is the three letter ISO currency code [ISO4217].
For example, US dollars is USD.
The type of the transaction, if known.
Currently a value from the following list: debit credit (31)
A digital signature, base64 encoded [RFC2045].
The ReceiptTo fields are used when the BillTo entity, location, or address and the ReceiptTo entity, location, or address are different.
For example, when using some forms of Corporate Purchasing Cards or Agent Purchasing Cards, the individual card holder would be in the ReceiptTo fields, and the corporate or other owner would be in the BillTo fields.
An IETF Language Tag, as defined in [RFC3066].
User preferences, as specified by the merchant.
The Uniform Resource Locator [RFC3986] for accessing the customer's "wallet" software.
M male, F Female, U Unknown
An immutable device identification or serial number.
(38) User understandable device brand name.
[ISO8583] field "card acceptor terminal identification".
(40) [ISO8583] field "processing code".
[ISO8583] field "acquiring institution identification code".
(42) [ISO8583] field "forwarding institution identification code".
[ISO8583] field "system trace audit field".
(45) [ISO8583] field "point of sale date code".
(48) [ISO8583] field "date settlement".
(50) [ISO8583] field "trace 1 data".
[ISO8583] field "trace 2 data".
(52) User recognizable loyalty card brand name.
Values for this field are not controlled, and there is no IANA or other registry for them.
The card issuer number required by the UK based Switch and Solo acquirers.
"first name" and "last name" have been retained for compatibility with earlier versions of ECML.
However, "last name" should be understood to refer to family or inherited names(s), whereas "first name" is the first given or non  inherited name and "middle name" is the subsequent given or non inherited name or names, if any.
The Uniform Resource Locator [RFC3986] for accessing the user's X.509v3 certificate encoded as binary DER.
Meta Notes (referenced by other notes) (100) ECML, a basic field naming and structuring convention, does not impose any particular requirements on these URLs.
It is to be expected that most applications that make use of ECML will impose such limitations and perform checking to be sure that provided URLs conform to such limitations before attempting to invoke them.
This is a field that, when presented in a web page, is usually hidden.
An ASCII [ASCII] character string with no leading or trailing white space.
The following sections provide an XML DTD and an XML Schema that express the ECML fields with ECML v2 naming and ECML v2 hierarchical structure.
In case of conflict between this DTD and Schema, the Schema should prevail.
Note that the ECML v2 naming and structure may be used in non XML syntaxes.
The ECML v2 XML syntax is deliberately liberal because it is assumed that specific applications making use of ECML will impose their own additional constraints.
For internationalization of ECML, use the general XML character  encoding provisions [XML] (which mandate support of UTF 8 and UTF 16 and permit support of other character sets) and the xml:lang attribute, which may be used to specify language information.
The following is an XML DTD for ECML v2.
Name   Company   Street   City   StateProv )
ELEMENT Telecom ( #PCDATA   Phone )
ELEMENT Online ( #PCDATA   Email )
ELEMENT User ( #PCDATA   UserID   Password )
The following is an XML Schema for ECML v2.
xml version "1.0" encoding "utf 8"?
Electronic Commerce Modeling Language v2
xs "http://www.w3.org/2001/XMLSchema" elementFormDefault "qualified"> <xs:attribute name "Mode"
attribute name "id" type "xs:ID"/
extension base "xs:string"> <xs:attribute ref "Mode" use "optional"/>
attribute ref "id" use "optional"/
complexType mixed "true"> <xs:choice minOccurs "
> <xs:attribute ref "Mode" use "optional"/>
attribute ref "id" use "optional"/>
<xs:attribute name "ConsumerOrderID" use "optional"/>
<xs:attribute name "Merchant" use "optional"/>
<xs:attribute name "Processor" use "optional"/>
<xs:attribute name "SchemaVersion" type "xs:string" fixed "urn:ietf:params:ecml:
<xs:attribute name "WalletLocation" type "xs:anyURI" use "optional"/
complexType mixed "true"> <xs:choice minOccurs "
/xs:choice> <xs:attribute ref "Mode" use "
attribute ref "id" use "optional"/
> </xs:element> <xs:element name "
complexType mixed "true"> <xs:choice minOccurs "
/xs:choice> <xs:attribute ref "Mode" use "
attribute ref "id" use "optional"/
> </xs:element> <xs:element name "ReceiptTo">
complexType mixed "true"> <xs:choice minOccurs "
/xs:choice> <xs:attribute ref "Mode" use "
attribute ref "id" use "optional"/
complexType mixed "true"> <xs:choice minOccurs "
> <xs:attribute ref "Mode" use "optional"/>
attribute ref "id" use "optional"/>
<xs:attribute name "PostalCode" type "xs:NMTOKEN" use "optional"/>
<xs:attribute name "CountryCode" type "xs:NMTOKEN" use "
complexType mixed "true"> <xs:sequence maxOccurs "unbounded"> <xs:
complexType> <xs:attribute ref "Mode" use "optional"/>
attribute ref "id" use "optional"/>
<xs:attribute ref "Mode" use "optional"/
complexType mixed "true"> <xs:sequence maxOccurs "unbounded"> <xs:
complexType> <xs:attribute ref "Mode" use "optional"/>
attribute ref "id" use "optional"/>
<xs:attribute ref "Mode" use "optional"/
element ref "ValidDate" minOccurs "
<xs:attribute ref "Mode" use "optional"/>
attribute ref "id" use "optional"/>
<xs:attribute name "Name" use "optional"/>
<xs:attribute name "Type" type "xs:NMTOKEN" use "optional"/>
<xs:attribute name "Number" type "xs:
<xs:attribute name "Verification" type "xs:NMTOKEN" use "optional"/>
<xs:attribute name "Issuer" type "xs:NMTOKEN" use "optional"/
<xs:attribute ref "Mode" use "optional"/
element ref "ValidDate" minOccurs "
<xs:attribute ref "Mode" use "optional"/>
attribute ref "id" use "optional"/>
<xs:attribute name "Name" use "optional"/>
<xs:attribute name "Type" type "xs:NMTOKEN" use "optional"/>
<xs:attribute name "Number" type "xs:
<xs:attribute name "Verification" type "xs:NMTOKEN" use "optional"/
> </xs:element> <xs:element name "ExpDate"
complexType> <xs:attribute ref "Mode" use "optional"/>
attribute ref "id" use "optional"/>
<xs:attribute name "Day" type "xs:positiveInteger"/
<xs:attribute name "Month" type "xs:positiveInteger"/
<xs:attribute name "Year" type "xs:positiveInteger"/
complexType> <xs:attribute ref "Mode" use "optional"/>
attribute ref "id" use "optional"/>
<xs:attribute name "Day" type "xs:positiveInteger"/
<xs:attribute name "Month" type "xs:positiveInteger"/
<xs:attribute name "Year" type "xs:positiveInteger"/
complexType mixed "true"> <xs:choice minOccurs "
:choice> <xs:attribute ref "Mode" use "
attribute ref "id" use "optional"/>
attribute name "CertificateURL" type "xs:anyURI" use "optional"/>
<xs:attribute name "DataCountry" type "xs:NMTOKEN" use "optional"/>
<xs:attribute name "DataLanguage" type "xs:language" use "optional"/
complexType mixed "true"> <xs:choice minOccurs "
/xs:choice> <xs:attribute ref "Mode" use "
<xs:attribute name "Currency" type "xs:NMTOKEN" use "optional"/>
<xs:attribute name "Type" type "xs:NMTOKEN" use "optional"/
<xs:element ref "Effective" minOccurs "
<xs:element ref "Settle" minOccurs "
<xs:element ref "Capture" minOccurs "
<xs:attribute ref "Mode" use "optional"/>
attribute ref "id" use "optional"/
complexType mixed "true"> <xs:choice minOccurs "
> <xs:attribute ref "Mode" use "optional"/
complexType> <xs:attribute ref "Mode" use "optional"/>
attribute ref "id" use "optional"/>
<xs:attribute name "Data" use "optional"/
<xs:attribute ref "Mode" use "optional"/>
attribute ref "id" use "optional"/
element name "AAV" type "EcomSimpleText"/
complexType> <xs:attribute ref "Mode" use "optional"/>
attribute ref "id" use "optional"/>
<xs:attribute name "Day" type "xs:NMTOKEN"/
<xs:attribute name "Month" type "xs:NMTOKEN"/
<xs:attribute name "Year" type "xs:NMTOKEN"/
complexType> </xs:element> <xs:element name "City" type "EcomSimpleText"/
complexType> <xs:attribute ref "Mode" use "optional"/>
<xs:attribute name "Processing" use "optional"/>
<xs:attribute name "Approval" type "xs:NMTOKEN" use "optional"/>
<xs:attribute name "Retrieval" type "xs:NMTOKEN" use "optional"/>
<xs:attribute name "Action" type "xs:NMTOKEN" use "optional"/>
<xs:attribute name "Reason" type "xs:NMTOKEN" use "optional"/>
<xs:attribute name "POS" type "xs:NMTOKEN" use "optional"/
element name "Company" type "EcomSimpleText"/
complexType> <xs:attribute ref "Mode" use "optional"/>
attribute ref "id" use "optional"/>
<xs:attribute name "Day" type "xs:NMTOKEN"/
<xs:attribute name "Month" type "xs:NMTOKEN"/
<xs:attribute name "Year" type "xs:NMTOKEN"/
complexType> </xs:element> <xs:element name "Id"
complexType> <xs:attribute ref "Mode" use "optional"/>
attribute ref "id" use "optional"/>
<xs:attribute name "CID" type "xs:NMTOKEN" use "optional"/>
<xs:attribute name "Reference" type "xs:NMTOKEN" use "optional"/>
<xs:attribute name "Acquire" type "xs:NMTOKEN" use "optional"/>
:attribute ref "Mode" use "optional"/>
attribute ref "id" use "optional"/
complexType> </xs:element> <xs:element name "Name">
complexType> <xs:attribute ref "Mode" use "optional"/>
attribute ref "id" use "optional"/>
<xs:attribute name "Prefix" type "xs:NMTOKEN" use "optional"/>
"First" type "xs:NMTOKEN" use "optional"/>
attribute name "Middle" type "xs:
<xs:attribute name "Last" type "
<xs:attribute name "Suffix" type "xs:NMTOKEN" use "optional"/
element name "Password" type "EcomSimpleText"/
element name "PrivateUse" type "EcomSimpleText"/
element name "Response" type "EcomSimpleText"/
complexType> <xs:attribute ref "Mode" use "optional"/>
attribute ref "id" use "optional"/>
<xs:attribute name "Day" type "xs:NMTOKEN"/
<xs:attribute name "Month" type "xs:NMTOKEN"/
<xs:attribute name "Year" type "xs:NMTOKEN"/
complexType> </xs:element> <xs:element name "Signature"
extension base "xs:string"> <xs:attribute ref "Mode" use "optional"/>
attribute ref "id" use "optional"/
complexType> </xs:element> <xs:element name "StateProv" type "EcomSimpleText"/
complexType> <xs:attribute ref "Mode" use "optional"/>
attribute ref "id" use "optional"/>
attribute name "Line2" use "
<xs:attribute name "Line3" use "optional"/
element name "Trace" type "EcomSimpleText"/
element name "Track1" type "EcomSimpleText"/
element name "Track2" type "EcomSimpleText"/
Usage Notes for ECML v2
This section provides a general usage guide for ECML v2.
Presentation of the Fields ECML v2 merely names fields and specifies their content and hierarchical organization.
It does not constrain the order or completeness of communication of or query for these fields.
Some parties may wish to provide or ask for more information, and some for less by omitting fields.
Some may ask for the information they want in one interaction or web page, and others may ask for parts of the information at different times in multiple interactions or different web pages.
For example, it is common to ask for "ship to" information earlier so that the shipping cost can be computed before the payment method information.
Some parties may require that all the information they request be provided whereas others may make much of the information optional.
Every element may be flagged as a query or assertion by including, when XML syntax is in use, the optional Mode attribute with the value "Query" or "Assert" respectively.
The Mode attribute effects all descendant elements until overridden by a lower level element with a Mode attribute.
Thus it is easy to indicate that all of the elements in an ECML v2 structure are present as queries or assertions.
Query elements may have data content.
Such content SHOULD be interpreted as a default value to be returned if no better value is known.
There is no way with Version 2.0 of ECML to indicate what query fields a party considers mandatory to be answered.
From this point of view, all fields queried are optional to complete.
However, a party may give an error or re present a request for information if some field it requires is not completed, just as it may if a field is completed in a manner that it considers erroneous.
Methods and Flow of Setting the Fields A variety of methods of communication is possible between the parties by which each can indicate what fields it wants the other to provide.
Probably the easiest method for currently deployed mass software is through fields in an [HTML] form.
Other possibilities include using an [XML] exchange, the IOTP Authenticate transaction [RFC2801], or proprietary protocols.
So that browser software can tell what version it is dealing with, it is REQUIRED that the Ecom SchemaVersion field be included in every transaction when ECML is being used on the web.
Ecom SchemaVersion SHOULD appear on every web page that has any Ecom fields.
It is usually a hidden field in HTML Forms.
User action or the appearance of the Ecom SchemaVersion field are examples of triggers that can be used to initiate a facility capable of providing information in response to an ECML based query or of using information from ECML assertions.
Because some web software may require user activation, it is RECOMMENDED that there be at least one user visible Ecom field on every web page with any Ecom fields present when ECML is used via the web.
Under some circumstances, communications can proceed very slowly, so it may not be clear to an automated processing function when it is finished receiving ECML fields on a web page or the like.
For this reason, it is RECOMMENDED that the Ecom SchemaVersion field be the last Ecom field on a web page.
Transfer or requests for information can extend over several interactions or web pages.
Without further provision, a facility could either require re starting on each page or possibly violate or appear to violate privacy by continuing to provide personal data beyond the end of the transaction with a particular business.
For this reason, the Ecom TransactionComplete field, which is normally hidden when it is part of an HTML Form, is provided.
It is RECOMMENDED that it appear on the last interaction or web page involved in a transaction, just before an Ecom SchemaVersion field, so that multi interaction automated logic receives a hint as to when to stop if it chooses to check for this field.
4.  Security and Privacy Considerations
The information called for by many of these fields is sensitive.
It should be protected from unauthorized modification and kept confidential if it is stored in a location or transmitted over a channel where it might otherwise be observed.
In addition, the authenticity of the information will be a concern in many systems.
Mechanisms for such protection and authentication are not specified herein but might, depending on circumstances, include object security protocols (such as XMLDSIG [RFC3275], XML encryption [XMLENC], or CMS [RFC3852]), or channel security (such as TLS
Systems in which an ECML field or fields are stored and later forwarded will likely find object security the most appropriate.
When information is being requested from a user, the user's control over the release of such information is needed to protect the user's privacy.
Software that is installed on shared or public terminals should be configurable so that memory of any sensitive or individual identity information is fully disabled.
This is vital to protect the privacy of library patrons, students, and customers using public terminals, and of children who might, for example, use a form on a public terminal without realizing that their information is being stored.
When sensitive or individual identification information is stored, the operator or user should have an option to protect the information; for example, with a password without which the information will be unavailable, even to someone who has access to the file(s) in which it is being stored.
Any multi page/screen or other multi aggregate field fill in or data provision mechanism SHOULD check for the Ecom TransactionComplete field and cease automated fill when it is encountered until fill is further authorized.
It should be remembered that default, hidden, and other values transferred to another party may be maliciously modified before being returned.
The sections below provide for: 1.
registration of the ECML v2 XML schema contained in this document, 2.
a version URN for ECML versions, 3.
the subsidiary registration of particular ECML versions and the specific registration of Version 2.0, and 4.
three additional IANA registries for elements appearing in three ECML v2 fields.
The ECML v2 schema give in Section 2.2.2 above is registered as follows:
The XML Schema in Section 2.2.2 above.
As specified by the template below from [RFC3553], urn:ietf:params:ecml is permanently registered with sub registration via RFC publication.
Values subordinate to urn:ietf:params:ecml are registered by RFC publication.
As provided in [RFC3553], once such a value is registered, it may never change.
The subordinate value "v2.0" is hereby permanently registered so that the URN urn:ietf:params:ecml:v2.0 is used to indicate an ECML field or fields that conform to this specification.
Although it is not anticipated that deeper values subordinate to this URN will need to be registered, if necessary, they are registered by IESG approval.
There are three fields described in Section 2.1.2 that require the establishment of IANA registries as described below: Ecom Payment Card Type A registry of case insensitive alphanumeric ASCII [ASCII] card type designations from one to four characters in length with no white space.
See Section 2.1.2, Note 11, for the initial 12 designations.
Designations are added based on expert approval.
Applicants for registration will normally be required already to have an ISO Issuer Identification Number (IIN) or set of IINs.
This field holds a space separated list of protocols designated by case insensitive alphanumeric ASCII [ASCII] tokens from this registry or holds the token "none".
See Section 2.1.2, note 17, for the initial seven registered tokens (including "none") and further information.
Tokens are added to the registry based on expert approval.
Ecom Transaction Type A case insensitive alphabetic ASCII [ASCII] value indicating the type of transaction.
See Section 2.1.2, note 30, for the initial two registered values.
Values are added based on expert approval.
Changes from v1.1 to v2 Substantial rewording of text to change the emphasis from HTML Form Fields to XML Syntax.
Addition of the merchant   processor fields.
Addition of the Ecom Wallet Location and Ecom User Certificate URL fields.
Addition of the "Mode" attribute.
Addition of the ECom Payment Card IssueNumber, Loyalty Card fields, Device ID, Valid From, and User Data fields.
Addition of an XML schema.
Some minor fixes related to telephone numbers.
Addition of IANA Considerations section.
Updating of RFC references for obsoleted RFCs.
