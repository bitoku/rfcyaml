- title: __initial_text__
  contents:
  - '             Compressing IPX Headers Over WAN Media (CIPX)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state and\n   status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a method for compressing the headers of\
    \ IPX\n   datagrams (CIPX).  With this method, it is possible to\n   significantly\
    \ improve performance over lower speed wide area\n   network (WAN) media.  For\
    \ normal IPX packet traffic, CIPX can\n   provide a compression ratio of approximately\
    \ 2:1 including both IPX\n   header and data.  This method can be used on various\
    \ type of WAN\n   media, including those supporting PPP and X.25.\n   This memo\
    \ ia a product of the Point-to-Point Protocol Extensions\n   (PPPEXT) Working\
    \ Group of the IETF.  Comments should be sent to\n   the authors and the ietf-ppp@ucdavis.edu\
    \ mailing list.\n"
- title: Specification of Requirements
  contents:
  - "Specification of Requirements\n   In this document, several words are used to\
    \ signify the requirements\n   of the specification.  These words are often capitalized.\n\
    \    MUST\n      This word, or the adjective \"required\", means that the\n  \
    \    definition is an absolute requirement of the specification.\n    MUST NOT\n\
    \      This phrase means that the definition is an absolute\n      prohibition\
    \ of the specification.\n    SHOULD\n      This word, or the adjective \"recommended\"\
    , means that there\n      may exist valid reasons in particular circumstances\
    \ to\n      ignore this item, but the full implications should be\n      understood\
    \ and carefully weighed before choosing a\n      different course.\n    MAY\n\
    \      This word, or the adjective \"optional\", means that this\n      item is\
    \ one of an allowed set of alternatives.  An\n      implementation which does\
    \ not include this option MUST be\n      prepared to interoperate with another\
    \ implementation which\n      does include the option.\n"
- title: Introduction
  contents:
  - "Introduction\n   Internetwork Packet Exchange (IPX) is a protocol defined by\
    \ the\n   Novell Corporation [1].  It is derived from the Internet Datagram\n\
    \   Protocol (IDP) protocol of the Xerox Network Systems (XNS) family\n   of protocols.\
    \  IPX is a datagram, connectionless protocol that does\n   not require an acknowledgment\
    \ for each packet sent.  The IPX\n   protocol corresponds to the network layer\
    \ of the ISO model.\n   Usually, there is a transport layer protocol above IPX.\
    \  The most\n   common transport protocol is the Netware Core Protocol (NCP),\
    \ which\n   is used for file server access.  The Sequenced Packet Exchange\n \
    \  (SPX) is the reliable connection-based transport protocol commonly\n   used\
    \ by applications.\n   The IPX packet consists of a 30 octet IPX header, usually\
    \ followed\n   by the transport layer protocol header.  The NCP header is 6 octets\n\
    \   in length.  The SPX header is 12 octets in length.\n   Two strategies are\
    \ described below for compressing IPX headers.\n   This specification requires\
    \ that implementations of CIPX support\n   both IPX header compression strategies.\
    \  These header compression\n   algorithms are based on those Van Jacobson described\
    \ [2] for TCP/IP\n   packets.\n   The first strategy is to compress only the IPX\
    \ header.  This\n   compression algorithm can be used to compress any IPX packet,\n\
    \   without affecting the transport protocol.  This algorithm\n   compresses a\
    \ 30 octet IPX header into a one to seven octet header.\n   The second strategy\
    \ is to compress the combined IPX and NCP\n   headers.  This algorithm compresses\
    \ only NCP packets with NCP type\n   of 0x2222 and 0x3333.  This algorithm compresses\
    \ a 36 octet NCP/IPX\n   header into a one to eight octet header.\n   Lastly,\
    \ it is possible and many times desirable, to use this type\n   of header compression\
    \ in conjunction with some type of data\n   compression.\n   Data compression\
    \ technology takes many forms. Link bit stream\n   compression is a common approach\
    \ over very low speed asynchronous\n   links, normally performed by modems transparently.\
    \  Transparent bit\n   stream compression is also offered in some DSUs, routers\
    \ and\n   bridges.  Data compression can be provided using protocols such as\n\
    \   CCITT V.42bis[3], MNP 5, Lempel-Ziv, or LAPB[4].\n   When using both header\
    \ and data compression, the sequence of\n   compression is important.  When sending\
    \ packets, data compression\n   MUST be done after header compression.  Conversely\
    \ when receiving\n   packets, data decompression MUST be done before header\n\
    \   decompression.\n"
- title: IPX Compression Algorithm
  contents:
  - "IPX Compression Algorithm\n   The normal IPX header consists of the following\
    \ fields: checksum,\n   packet length, transport control (hop count), packet type,\n\
    \   destination and source address fields.\n                             +-----------------------+\n\
    \                             |       Checksum        |\n                    \
    \         +-----------------------+\n                             |     Packet\
    \ Length     |\n                             +-----------+-----------+\n     \
    \                        |    Hops   |Packet Type|\n                         \
    \    +-----------+-----------+\n                             |      Destination\
    \      |\n                             |        Address        |\n           \
    \                  |      (12 Octets)      |\n                             +-----------------------+\n\
    \                             |        Source         |\n                    \
    \         |        Address        |\n                             |      (12 Octets)\
    \      |\n                             +-----------------------+\n           \
    \                      IPX PACKET HEADER\n   The IPX header diagram above is shown\
    \ without the field alignment\n   details.  Consider each field of the IPX header\
    \ separately, and how\n   it typically changes.\n   Historically, Novell has not\
    \ used the Checksum field in the IPX\n   header, and has required that this field\
    \ be set to 0xFFFF.  Since the\n   Checksum field remains constant, it is clear\
    \ that the value can be\n   compressed.\n   Where Checksums are implemented (not\
    \ 0xFFFF), the Checksum MUST be\n   included in the compressed packet.  Recalculating\
    \ the checksum would\n   destroy the end-to-end reliability of the connection.\
    \  Note that\n   Checksums are now implemented in the Fault Tolerant Servers.\n\
    \   For most links, the Packet Length can be determined from the MAC\n   layer.\
    \  There are cases in which the length cannot be determined from\n   the MAC layer.\
    \  For example, some hardware devices pad packets to a\n   required minimum length.\
    \  For links where it is not possible to\n   determine the IPX packet length from\
    \ the MAC layer, packet length\n   needs to be included in the compressed packet.\n\
    \   The Transport Control (Hops) field usually does not change between\n   two\
    \ end-points.  For the purposes of compression, we will assume that\n   it never\
    \ changes, and will not examine this field when determining a\n   connection.\n\
    \   The Packet Type field is constant for any connection.\n   The Destination\
    \ and Source Address fields are each made up of 12\n   octets: Network (4 octets),\
    \ Node (6 octets), and Socket (2 octets)\n   fields.  An IPX connection is the\
    \ logical association between two\n   endpoints known by a given source and destination\
    \ address pair.  For\n   any specific IPX connection, the Destination and Source\
    \ Address\n   fields are constant.\n   Hence, the fields that may need to be included\
    \ in the compressed IPX\n   header are the Checksum and the Packet Length.\n \
    \  While using this IPX header compression algorithm, packets can be\n   lost.\
    \  The loss of an Initial packet presents a problem.  In this\n   case, if the\
    \ sender later tries to send a compressed packet, the\n   receiving end cannot\
    \ decompress the packet correctly.\n   Sufficient information is not available\
    \ in the IPX header to\n   determine when a re-transmission has occured.  For\
    \ this reason, it is\n   necessary that the sender of an Initial packet be guaranteed\
    \ that the\n   packet has been received.  Therefore, we provide a mechanism for\n\
    \   Confirmation of an Initial packet.\n"
- title: NCP/IPX Header Compression
  contents:
  - "NCP/IPX Header Compression\n   Since most IPX packets are Netware Core Protocol\
    \ packets (packet type\n   17), compressing the NCP header will give us added\
    \ performance.  A\n   minimal CIPX implementation MUST also implement NCP/IPX\
    \ compression.\n                                  +------------+\n           \
    \                       |    NCP     |\n                                  |  \
    \  Type    |\n                                  +------------+\n             \
    \                     |  Sequence  |\n                                  |   Number\
    \   |\n                                  +------------+\n                    \
    \              | Connection |\n                                  |(low octet)\
    \ |\n                                  +------------+\n                      \
    \            |   Task     |\n                                  |   Number   |\n\
    \                                  +------------+\n                          \
    \        | Connection |\n                                  |(high octet)|\n  \
    \                                +------------+\n                            \
    \        NCP HEADER\n   The NCP header is 6 octets in length consisting of the\
    \ following\n   fields: NCP type, sequence number, connection number and task\
    \ number.\n   The NCP type field values that are currently defined are:\n    \
    \         1111   Create Connection\n             2222   NCP request from workstation\n\
    \             3333   NCP reply from file server\n             5555   Destroy Connection\n\
    \             7777   Burst Mode Packet\n             9999   Server Busy Packet\n\
    \   This NCP header compression algorithm only compresses packets that\n   have\
    \ a type field value of 0x2222 or 0x3333.  If the NCP type is\n   0x2222, this\
    \ packet is a request from the client to the server.\n   Conversely if the NCP\
    \ type is 0x3333, this is a response from the\n   server to the client.  All other\
    \ types of NCP packets are not\n   compressed at the NCP level, but are compressed\
    \ at the IPX level.\n   The Create Connection (0x111), Destroy Connection (0x5555)\
    \ and Server\n   Busy (0x9999) packets are not exchanged frequently enough to\
    \ justify\n   special NCP compression.  The Burst Mode (0x7777) packet is discussed\n\
    \   below.\n   The connection number is a constant for a given connection.\n \
    \  The sequence number is increased by one for each new request.  Hence\n   the\
    \ sequence number can be determined implicitly.  The decompressor\n   increments\
    \ the sequence number for each compressed packet it receives\n   for a connection.\n\
    \   The task number can change unpredictably, although it might remain\n   constant\
    \ for several packets.  If the NCP task number is different\n   from the last\
    \ one for this connection, the NCP task number must be\n   included.\n   If the\
    \ NCP packet is lost, it will be retransmitted through the\n   normal transport\
    \ layer mechanisms.  The Initial NCP packet does not\n   require confirmation,\
    \ as a re-transmitted packet can be easily\n   identified.  This is accomplished\
    \ by comparing the sequence number of\n   the packet to the sequence number of\
    \ the previous packet.  If the\n   sequence number is not exactly one greater\
    \ than the previous packet,\n   a new Initial packet must be sent, although the\
    \ same connection slot\n   may be used.\n   In the event of compressed packet\
    \ loss, the sequence number will be\n   too small.  When the IPX Checksum is present,\
    \ the loss can be\n   determined at the destination system by an incorrect checksum.\
    \  When\n   there is no checksum present, the loss is more likely to be detected\n\
    \   upon receiving a later retransmission.\n"
- title: NCP Burst Mode Packets
  contents:
  - "NCP Burst Mode Packets\n   The burst mode protocol uses the NCP type value of\
    \ 0x7777.  This type\n   of packet does not have the normal NCP header described\
    \ above.\n   Instead, it has a 36 octet burst header.  The above NCP header\n\
    \   compression algorithm should not be used to compress this packet.\n   The\
    \ IPX header in this packet is still compressible with the IPX\n   header compression\
    \ algorithm described.\n"
- title: SPX Packets
  contents:
  - "SPX Packets\n      SPX packets are typically used by applications which require\n\
    \      reliable service such as print servers.  It is possible to apply a\n  \
    \    similar NCP/IPX technique to SPX/IPX packets.  At this time, we\n      have\
    \ not described such a mechanism.  The IPX header in this\n      packet is still\
    \ compressible with the IPX header compression\n      algorithm described.\n"
- title: Compression Header
  contents:
  - "Compression Header\n      IPX compression should be negotiated by some means\
    \ (eg. IPXCP or\n      IPXWAN).  Each end must negotiate the desired options,\
    \ such as the\n      maximum number of concurrent connections which will be maintained\n\
    \      in each direction.  Once IPX compression is negotiated, all IPX\n     \
    \ packets sent over that link have a CIPX header added to the\n      beginning\
    \ of the packet.  The CIPX header is variable in length.\n      The one octet\
    \ CIPX header is added even when a regular IPX packet\n      is sent over the\
    \ link.  By including the CIPX header on every\n      packet, we support the ability\
    \ to run CIPX over various WAN links\n      as if it were a normal IPX packet.\
    \  It does not rely on any new\n      link specific packet demultiplexing.\n \
    \     Implementations of this compression protocol must maintain send\n      and\
    \ receive tables indicating the state of each connection.  The\n      original\
    \ header for each connection is stored in a \"slot\".\n      Typically, each client-server\
    \ connection will use a separate slot.\n      Both sides keep a copy of the full\
    \ IPX header corresponding to\n      each slot.  The sending side (compressor)\
    \ uses this information to\n      determine the fields that have changed.  The\
    \ receiving side\n      (decompressor) uses this information to reconstruct the\
    \ original\n      packet header.\n      The CIPX packet header specifies the type\
    \ of the packet and any\n      options for that packet.  The minimum CIPX header\
    \ is one octet in\n      length.\n         7   6   5   4   3   2   1   0\n   \
    \    +---+---+---+---+---+---+---+---+\n       |   |   |   |   |   |   |   | \
    \  |\n       +---+---+---+---+---+---+---+---+\n         ^   ^   ^   ^   ^   ^\
    \   ^   ^\n         |   |   |   |   |   |   |   |\n         |   |   |   |   |___|___|___|___\
    \ Packet Type\n         |   |   |   |                    0    Compressed\n   \
    \      |   |   |   |                    1    Regular\n         |   |   |   | \
    \                   3    Confirmed Initial\n         |   |   |   |           \
    \         5    Confirm\n         |   |   |   |                    7    Unconfirmed\
    \ Initial\n         |   |   |   |                    9    Reject\n         | \
    \  |   |   |                   11-15 Reserved\n         |   |   |   |\n      \
    \   |__ |__ |__ |___________________ Packet Type Dependent Flags\n           \
    \                     FLAGS OCTET\n      As can be seen above, the low order bits\
    \ specify the packet type.\n      All Compressed packets have a lowest bit of\
    \ zero.  The other\n      packet types are odd numbers.\n      Note that the Flags\
    \ octet MUST NOT contain the value 0xFF.  This\n      is necessary to distinguish\
    \ the CIPX flags octet from a normal IPX\n      header with a 0xFFFF checksum\
    \ field.  It is important to be able\n      to recognize a normal IPX header regardless\
    \ of the state of\n      compression.  It is possible with some link layer protocols\
    \ such\n      as X.25 Permanent Virtual Circuits that one end of the link may\n\
    \      fail and start sending regular IPX packets without the CIPX\n      header.\
    \  CIPX implementations MUST recognize this situation and\n      renegotiate the\
    \ use of CIPX.\n      Each packet type has associated flag bits, which are called\
    \ Packet\n      Type Dependent Flags.  Different packet types have different\n\
    \      Packet Type Dependent Flags.  All bits that are reserved or are\n     \
    \ not specified must be set to zero.\n      Since none of the packet types other\
    \ than Compressed currently\n      uses any of the flag bits, the packet type\
    \ field could easily be\n      expanded.  Any future expansion must ensure that\
    \ at least one of\n      the bits in the Flags octet remains zero so the value\
    \ cannot be\n      0xFF.\n"
- title: Compressed Packet
  contents:
  - "Compressed Packet\n   This type of packet does not contain a packet header (either\
    \ 30 byte\n   IPX, or 36 byte NCP).  A slot number indicates to the receiver which\n\
    \   saved header to use to formulate the original packet header before\n   passing\
    \ the packet up to IPX.\n      ________________________________ Slot Number\n\
    \      |                                0    Assume same as last packet\n    \
    \  |                                1    Included in packet\n      |\n      |\
    \   ____________________________ Checksum\n      |   |                       \
    \     0    Assume 0xFFFF\n      |   |                            1    Included\
    \ in packet\n      |   |\n      |   |   ________________________ Length\n    \
    \  |   |   |                        0    Determine from MAC length\n      |  \
    \ |   |                        1    Included in packet\n      |   |   |\n    \
    \  |   |   |   ____________________ Task Number (NCP only)\n      |   |   |  \
    \ |                    0    Assume same as last packet\n      |   |   |   |  \
    \                  1    Included in packet\n      |   |   |   |\n      |   | \
    \  |   |   ________________ Reserved (Must be zero)\n      |   |   |   |   | \
    \  |   |\n      |   |   |   |   |   |   |   ____ Packet Type\n      |   |   |\
    \   |   |   |   |   |    0    Compressed Packet\n      v   v   v   v   v   v \
    \  v   v\n    +---+---+---+---+---+---+---+---+\n    |   |   |   |   | 0 | 0 |\
    \ 0 | 0 |\n    +---+---+---+---+---+---+---+---+\n      7   6   5   4   3   2\
    \   1   0\n   Consider each flag in the flags octet, looking at the high order\
    \ bits\n   working toward the lower order bits.  Each of the fields is optional,\n\
    \   but if present will be found in the same order in the compressed\n   packet\
    \ header.\n"
- title: Slot Number
  contents:
  - "Slot Number\n   The slot number flag indicates the slot number field is included\
    \ in\n   the compressed packet.  The slot number field is one octet in length\n\
    \   and specifies the number of the slot which corresponds to the Initial\n  \
    \ packet header.  Slots are numbered starting at zero and continue to\n   the\
    \ maximum number of slots minus one.\n   By default, slot compression is disabled.\
    \  If negotiated, slot\n   compression can be enabled for those slots which were\
    \ created by the\n   Unconfirmed Initial packet.  When set to one (1), the slot\
    \ number\n   flag indicates the inclusion of the the slot number in the compressed\n\
    \   packet.  When set to zero (0), the slot number flag indicates the\n   omission\
    \ of the the slot number and specifies the use of the same\n   slot number as\
    \ for the last packet.\n      Implementation Note:\n         Slot compression\
    \ MUST only be enabled in a receiver which can\n         account for all erroneous\
    \ and discarded packets.  When a packet\n         has been discarded, the slot\
    \ number is indeterminate for future\n         packets.  The decompressor MUST\
    \ discard all further packets\n         until a slot number is received.\n"
- title: Checksum
  contents:
  - "Checksum\n   When set to one (1), the checksum flag indicates the compressed\n\
    \   packet will include the 2 octet checksum.  When set to zero (0),\n   this\
    \ flag indicates the omission of the checksum and the decompressor\n   is to assume\
    \ the checksum is 0xFFFF.  Note that meaningful checksums\n   must be included\
    \ in the packet with the checksum flag set to one (1).\n"
- title: Length
  contents:
  - "Length\n   When set to one (1), the length flag indicates the inclusion of the\n\
    \   IPX data length field in the compressed packet.  When set to zero\n   (0),\
    \ the length flag indicates the omission of the IPX data length\n   field in the\
    \ compressed packet.\n   This is the Length field from the original IPX packet\
    \ header.  It\n   specifies the length of IPX header and data in the packet prior\
    \ to\n   compression.  It does not include the CIPX compression field such as\n\
    \   flags, slot number, checksum, length field, or the NCP task number.\n   Note\
    \ that it is preferable to determine the length field from the MAC\n   layer whenever\
    \ possible, by subtracting the length of the compression\n   header fields and\
    \ adding the length of the saved packet header.\n   Since every octet is significant\
    \ over lower speed WAN links, an\n   optimization is used in the specification\
    \ of the length.  It can be\n   specified as a one, two or three octet field.\
    \  If the length is in\n   the range 0 to 127, then it is specified as a one octet\
    \ field.  If\n   the length is in the range 128 to 16383, it is specified as a\
    \ two\n   octet field in high to low order, with the first octet in the range\n\
    \   128 to 191.  Otherwise, if the length is greater than 16383, the\n   first\
    \ octet contains 192, and the second and third octets contain the\n   full length.\
    \  (This scheme is extensible to 8 octets, but currently\n   is not required in\
    \ the IPX protocol suite.)\n   +-+-+-+-+-+-+-+-+\n   |0|   length    |   length\
    \ < 128\n   +-+-+-+-+-+-+-+-+\n   ONE OCTET LENGTH FIELD\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |1 0|          length           |   length < 16384\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   TWO OCTET LENGTH FIELD\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |1 1 0 0 0 0 0 0|            length             |  length < 65535\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   THREE OCTET LENGTH FIELD\n"
- title: Task Number
  contents:
  - "Task Number\n   When set to one (1), the NCP task number flag indicates the NCP\
    \ task\n   number is included in the compressed packet (see NCP/IPX compression\n\
    \   above).  When set to zero (0), the NCP task number flag indicates the\n  \
    \ omission of the NCP task number in the compressed packet.  When the\n   NCP\
    \ task number is not included in the compressed packet, we use the\n   same NCP\
    \ task number as that of last packet.\n   Based upon the bits set in the flags\
    \ octet, optional portions are\n   included in the compressed IPX header.  The\
    \ minimum compressed IPX\n   header contains only the Flags octet.  All fields\
    \ in the original IPX\n   header have been compressed out of the header.  The\
    \ maximum\n   compressed IPX header can include up to 7 octets, the Flags, Slot,\n\
    \   Checksum (2 octets), and Length (3 octets) fields, or 8 octets if the\n  \
    \ NCP Task Number is included.  The minimum and maximum compressed IPX\n   packets\
    \ are shown below.  Header fields are one octet in length\n   except where noted.\n\
    \        +--------+---------\n        | Flags  | DATA ...\n        |  0x00  |\n\
    \        +--------+---------\n        MINIMUM COMPRESSED IPX PACKET\n        +--------+--------+---------+---------+---------\n\
    \        | Flags  |  Slot  |Checksum | Length  | DATA ...\n        |  0xE0  |\
    \ Number |2 octets |3 octets |\n        +--------+--------+---------+---------+---------\n\
    \        MAXIMUM COMPRESSED IPX PACKET\n        +--------+--------+---------+---------+--------+---------\n\
    \        | Flags  |  Slot  |Checksum | Length  |NCP Task| DATA ...\n        |\
    \  0xF0  | Number |2 octets |3 octets | Number |\n        +--------+--------+---------+---------+--------+---------\n\
    \        MAXIMUM COMPRESSED NCP/IPX PACKET\n"
- title: Regular Packet
  contents:
  - "Regular Packet\n   The Regular packet type designates an IPX packet for which\
    \ no\n   compression is desired.  This type of packet is sent when a packet\n\
    \   cannot be compressed, or a decision is made not to compress it.\n        \
    \  7   6   5   4   3   2   1   0\n        +---+---+---+---+---+---+---+---+\n\
    \        | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 |\n        +---+---+---+---+---+---+---+---+\n\
    \          ^   ^   ^   ^   ^   ^   ^   ^\n          |   |   |   |   |   |   |\
    \   |\n          |   |   |   |   |___|___|___|___ Packet Type\n          |   |\
    \   |   |                    1    Regular\n          |   |   |   |\n         \
    \ |__ |__ |__ |___________________ Reserved (must be zero)\n   The Regular packet\
    \ is rarely sent.  Usually, the Regular packet is\n   sent when there is not enough\
    \ memory for the overhead of a new\n   compression slot.  Also, this type is included\
    \ for future unforeseen\n   changes to the IPX protocol which defeat the effectiveness\
    \ of\n   compression.\n      Implementation Note:\n         The Regular Packet\
    \ can be used for packets that are sporadic,\n         which are not worth setting-up\
    \ a compression slot.  This may be\n         hard to determine for specific protocols.\
    \  Various methods such\n         as hold-down and least-recently-used timers\
    \ are currently being\n         used.\n      On receipt, the 1 octet header is\
    \ simply removed and the packet\n      passed up to IPX.\n      The entire IPX\
    \ packet follows the single Flags octet.  Note for a\n      Regular Packet (not\
    \ compressed or uncompressed), the slot number\n      field is not included.\n"
- title: Confirmed Initial Packet
  contents:
  - "Confirmed Initial Packet\n   The Confirmed Initial packet type is used by the\
    \ compressor to inform\n   the decompressor of the original packet header which\
    \ will be used for\n   subsequent compression, and to request Confirmation.  The\
    \ high order\n   4 bits are reserved for expansion to support additional protocols.\n\
    \          7   6   5   4   3   2   1   0\n        +---+---+---+---+---+---+---+---+\n\
    \        | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 |\n        +---+---+---+---+---+---+---+---+\n\
    \          ^   ^   ^   ^   ^   ^   ^   ^\n          |   |   |   |   |   |   |\
    \   |\n          |   |   |   |   |___|___|___|___ Packet Type\n          |   |\
    \   |   |                    3     Confirmed Initial\n          |   |   |   |\n\
    \          |__ |__ |__ |___________________ 0     IPX Protocol\n             \
    \                              1-15  Reserved\n   This type of packet is sent\
    \ to inform the receiver to associate the\n   IPX packet header with a slot number.\
    \  This packet is sent each time\n   a different header format is sent for a given\
    \ slot, or when the\n   sender has not received a Confirmation Packet from the\
    \ receiver.\n   The Flags octet lower 4 bits indicate the Confirmed Initial CIPX\n\
    \   packet type.  The high order 4 bits are reserved for expansion to\n   support\
    \ additional protocols.  The Flags octet is always followed by\n   the Slot Number\
    \ and an ID field.  The ID field is one octet in\n   length.\n   For each slot,\
    \ the ID will increment with every new header sent.\n   Different slots may have\
    \ the same ID.  The combination of slot and ID\n   uniquely identify a header.\
    \  In practice, the ID octet can be any\n   number which is unique for a \"reasonably\
    \ long period\" of time.  A\n   reasonably long period is a function of transmission\
    \ speed, round\n   trip delays, and network load.  There must be very little chance\
    \ of\n   duplicate slot and ID combinations within this period.  Otherwise,\n\
    \   there is ambiguity as to which header is being identified.\n      Implementation\
    \ Note:\n         There is no requirement to hold or resend the Confirmed Initial\n\
    \         packet until confirmation.  When a new packet with the same IPX\n  \
    \       header is to be sent, another Confirmed Initial packet should\n      \
    \   be sent using the same slot, the same ID, and the new packet\n         data.\n\
    \         When a new packet with a different IPX header is to be sent, it\n  \
    \       may be sent using a slot which has not received confirmation.\n      \
    \   A Confirmed Initial packet is sent with the same slot, an\n         incremented\
    \ ID, and the new packet data.  Assuming a least-\n         recently-used policy\
    \ for selecting a slot for a new IPX header,\n         this provides the ability\
    \ to reuse slots when a Confirmed\n         Initial packet has been sent but not\
    \ confirmed.\n              +---------+---------+---------+-/       /-+----------\n\
    \              |  Flags  |   Slot  |   ID    |    IPX    |  DATA ...\n       \
    \       |   0x03  |  Number |         |   Header  |\n              +---------+---------+---------+-/\
    \       /-+----------\n"
- title: CONFIRMED INITIAL PACKET
  contents:
  - "CONFIRMED INITIAL PACKET\n   Note that a Confirmed Initial header is followed\
    \ by a complete IPX\n   packet.\n"
- title: Confirm Packet
  contents:
  - "Confirm Packet\n   The Confirm packet type is used by the decompressor to tell\
    \ the\n   compressor that it has received the Confirmed Initial packet.\n   When\
    \ the compressor receives this, it can start sending Compressed\n   frames.\n\
    \          7   6   5   4   3   2   1   0\n        +---+---+---+---+---+---+---+---+\n\
    \        | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 1 |\n        +---+---+---+---+---+---+---+---+\n\
    \          ^   ^   ^   ^   ^   ^   ^   ^\n          |   |   |   |   |   |   |\
    \   |\n          |   |   |   |   |___|___|___|___ Packet Type\n          |   |\
    \   |   |                    5    Confirm\n          |   |   |   |\n         \
    \ |__ |__ |__ |___________________ Reserved (must be zero)\n   A Confirm Packet\
    \ is exactly 3 octets in length.  It consists of the\n   Flags, Slot Number and\
    \ ID fields.  The Slot Number field contains the\n   number of the slot which\
    \ is being acknowledged.  The ID field\n   contains the ID of the Confirmed Initial\
    \ Packet which is being\n   acknowledged.\n        +---------+---------+----------+\n\
    \        |  Flags  |   Slot  |    ID    |\n        |   0x05  |  Number |     \
    \     |\n        +---------+---------+----------+\n"
- title: CONFIRM PACKET
  contents:
  - 'CONFIRM PACKET

    '
- title: Unconfirmed Initial Packet
  contents:
  - "Unconfirmed Initial Packet\n   The Unconfirmed Initial packet type is used by\
    \ the compressor to\n   inform the decompressor of the original packet header\
    \ which will be\n   used for subsequent compression while not requesting confirmation.\n\
    \   After sending an Unconfirmed Initial packet, the compressor may\n   immediately\
    \ send Compressed packets without confirmation.\n          7   6   5   4   3 \
    \  2   1   0\n        +---+---+---+---+---+---+---+---+\n        | 0 | 0 | 0 |\
    \ 0 | 0 | 1 | 1 | 1 |\n        +---+---+---+---+---+---+---+---+\n          ^\
    \   ^   ^   ^   ^   ^   ^   ^\n          |   |   |   |   |   |   |   |\n     \
    \     |   |   |   |   |___|___|___|___ Packet Type\n          |   |   |   |  \
    \                  7     Unconfirmed Initial\n          |   |   |   |\n      \
    \    |__ |__ |__ |___________________ 0     NCP Protocol\n                   \
    \                        1-15  Reserved\n   This type of packet is sent to inform\
    \ the receiver to associate the\n   IPX packet header with a slot number.  This\
    \ packet is sent each time\n   a different header format is sent for a given slot.\n\
    \   The Flags octet lower 4 bits indicate the Unconfirmed Initial CIPX\n   packet\
    \ type.  The high order 4 bits are reserved for expansion to\n   support additional\
    \ protocols.  The Flags octet is always followed by\n   the Slot Number.\n   \
    \     +---------+---------+-/        /-+-/       /-+---------\n        |  Flags\
    \  |   Slot  |    IPX     |    NCP    | NCP\n        |   0x07  |  Number |   Header\
    \   |   Header  | DATA ...\n        +---------+---------+-/        /-+-/     \
    \  /-+---------\n"
- title: UNCONFIRMED INITIAL PACKET
  contents:
  - "UNCONFIRMED INITIAL PACKET\n   Note that an Unconfirmed Initial header is followed\
    \ by a complete IPX\n   packet.\n"
- title: Reject Packet
  contents:
  - "Reject Packet\n   The Reject packet type is used by the decompressor to tell\
    \ the\n   compressor that it has received a CIPX packet with a header which it\n\
    \   does not support.  This is provided to regulate future extensions to\n   CIPX.\n\
    \          7   6   5   4   3   2   1   0\n        +---+---+---+---+---+---+---+---+\n\
    \        | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 1 |\n        +---+---+---+---+---+---+---+---+\n\
    \          ^   ^   ^   ^   ^   ^   ^   ^\n          |   |   |   |   |   |   |\
    \   |\n          |   |   |   |   |___|___|___|___ Packet Type\n          |   |\
    \   |   |                    9    Reject\n          |   |   |   |\n          |__\
    \ |__ |__ |___________________ Reserved (must be zero)\n   A Reject Packet is\
    \ exactly 3 octets in length.  It consists of the\n   Flags, Slot Number and Rejected\
    \ Flags fields.\n   The Slot Number field contains the number of the slot of the\
    \ packet\n   which is being rejected.  Since the actual packet type may be unknown\n\
    \   or misunderstood, this field actually contains the second octet of\n   the\
    \ rejected packet.  In the normal case of a known CIPX packet type,\n   this will\
    \ be the slot number of an initial packet.\n   The Rejected Flags field contains\
    \ the first octet of the packet being\n   rejected.  The packet type field is\
    \ left untouched.  Any flags which\n   are correctly recognized should be cleared.\
    \  The remaining flags\n   indicate specific features that are being rejected.\
    \  This information\n   should be sufficient for implementations to adjust the\
    \ use of certain\n   packet types or dependent flags.\n      Implementation Note:\n\
    \         The Flags value of 0xFF is not a valid CIPX packet type.\n         Hence,\
    \ such a packet type should be recognized as a standard\n         IPX header and\
    \ forwarded without CIPX processing to the\n         appropriate routines.  Under\
    \ no circumstances should a Flags\n         value of 0xFF be rejected in a Reject\
    \ Packet.\n              +---------+---------+----------+\n              |  Flags\
    \  |   Slot  | Rejected |\n              |   0x09  |  Number |  Flags   |\n  \
    \            +---------+---------+----------+\n              REJECT PACKET\n"
- title: Compression Negotiation over PPP Links
  contents:
  - "Compression Negotiation over PPP Links\n   For PPP links [5], the use of header\
    \ compression can be negotiated by\n   IPXCP [6].  By default, no compression\
    \ is enabled.\n   The IPX-Compression-Protocol Configuration Option is used to\
    \ indicate\n   the ability to receive compressed packets.  Each end of the link\
    \ must\n   separately request this option if bi-directional compression is\n \
    \  desired.\n   The PPP Protocol field is set to the same value as the usual IPX\n\
    \   packets, and all IPX packets sent over the link MUST conform to the\n   compressed\
    \ format.\n   A summary of the IPX-Compression-Protocol Configuration Option format\n\
    \   to negotiate Telebit IPX header compression (CIPX) is shown below.\n   The\
    \ fields are transmitted from left to right.\n         0                   1 \
    \                  2                   3\n         0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \        |     Type      |    Length     |    IPX-Compression-Protocol   |\n \
    \       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \      |  Max-Slot-Id  |    Options    |\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       Type\n           3\n       Length\n           6\n       IPX-Compression-Protocol\n\
    \           0002 (hex) for Telebit Compressed IPX headers (CIPX).\n        Max-Slot-Id\n\
    \           The Max-Slot-Id field is one octet and indicates the maximum\n   \
    \        slot identifier.  This is one less than the actual number of\n      \
    \     slots; the slot identifier has values from zero to Max-Slot-\n         \
    \  Id.\n"
- title: Options
  contents:
  - "Options\n   The Options field is one octet, and is comprised of the \"logical\
    \ or\"\n   of the following values:\n      0  No options.\n      1  The slot identifer\
    \ may be compressed.\n         The slot identifier must not be compressed if there\
    \ is no\n         ability for the PPP link level to indicate an error in\n   \
    \      reception to the decompression module.  Synchronization after\n       \
    \  errors depends on receiving a packet with the slot identifier.\n      2  Redefine\
    \ Compressed Packet type bits 1-3.\n         It was noted earlier that packet\
    \ types have been chosen such\n         that only the Compressed Packet type is\
    \ an even number value\n         with the lowest order bit of zero.  All other\
    \ packet types are\n         odd values with a lowest order bit of one.  The reason\
    \ for this\n         assignment was to make it possible to determine the Compressed\n\
    \         Packet type by examining only one bit.  This make it possible\n    \
    \     to use all the other 7 bits to indicate status in the\n         Compressed\
    \ Packet.  The 7 bits are composed of the upper 4 bits\n         which are permanently\
    \ defined to indicate packet dependent\n         flags, plus bits 1-3 which are\
    \ otherwise part of the Packet\n         Type.  The upper 4 bits are defined above.\
    \  The redefinition of\n         bits 1-3 of the Compressed Packet type is left\
    \ for future\n         expansion.\n               7   6   5   4   3   2   1  \
    \ 0\n             +---+---+---+---+---+---+---+---+\n             |   |   |  \
    \ |   |   |   |   | 0 |\n             +---+---+---+---+---+---+---+---+\n    \
    \           ^   ^   ^   ^   ^   ^   ^   ^\n               |   |   |   |   |  \
    \ |   |   |___ Packet Type\n               |   |   |   |   |   |   |        0\
    \    Compressed Packet\n               |   |   |   |   |   |   |\n           \
    \    |   |   |   |   |___|___|_______ Redefined bits\n               |   |   |\
    \   |\n               |___|___|___|___________________ Compressed Packet flags\n\
    \         By default, this feature in not enabled and this flag is\n         set\
    \ to zero.  When this flag is set to one, it indicates\n         the desire to\
    \ use this feature.\n"
- title: Compression Negotiation over IPXWAN Links
  contents:
  - "Compression Negotiation over IPXWAN Links\n   \"IPXWAN\" is the protocol Novell\
    \ uses to exchange necessary router\n   to router information prior to exchanging\
    \ standard IPX routing\n   information and traffic over WAN datalinks [7].  To\
    \ negotiate the\n   Telebit compression option, we use Novell's allocated option\
    \ number\n   for CIPX (00) in the IPXWAN timer request/response packet.\n   The\
    \ Timer Request packet contains the following Telebit compression\n   option:\n\
    \     WOption Number       80        - Define compression type\n     WAccept Option\
    \       01        - 0=No, 1=Yes, 3=N/A\n     WOption Data Len     00 03     -\
    \ Length of option\n     WOption Data         00        - Telebit's compression\
    \ (CIPX)\n     WOption Data         XX        - Compression options\n     WOption\
    \ Data         NN        - Compression slots\n   Where the WOption Data fields\
    \ are:\n     00   Telebit's compression option described in this\n          document\
    \ (CIPX).\n     XX   Compression options as defined below:\n             0x01\
    \   Compress slot ID when possible\n             0x02   Redefine Compressed Packet\
    \ type bits 1-3.\n     NN   The requested # of compression slots.\n     Accept\
    \ Option (for compression type) must be set to YES if the\n     option is supported\
    \ and NO if the option is not supported.  A Timer\n     Response must respond\
    \ with only one header compression type set to\n     YES.\n     The Timer Response\
    \ packet that accepts the option will look like\n     this:\n     WOption Number\
    \       80        - Define compression type\n     WAccept Option       01    \
    \    - 0=No, 1=Yes, 3=N/A\n     WOption Data Len     00 03     - Length of option\n\
    \     WOption Data         00        - Telebit's compression (CIPX)\n     WOption\
    \ Data         XX        - Compression options\n     WOption Data         NN \
    \       - Compression slots\n   Where the WOption Data fields are:\n     00  \
    \ Telebit's compression option described in this\n          document (CIPX).\n\
    \     XX   Compression options as defined below:\n             0x01   Compress\
    \ slot ID when possible\n             0x02   Redefine Compressed Packet type bits\
    \ 1-3.\n     NN   The negotiated # of slots (The lower of each side's\n      \
    \    requested number of slots)\n   IPX packets (except of course IPXWAN packets)\
    \ are not sent over the\n   link until the IPXWAN negotiations are completed.\
    \  Once IPXWAN\n   negotiations are completed, regular IPX packets can be sent\
    \ over the\n   link.\n   If both ends of the link agree on the compression options,\
    \ then the\n   IPX packets are sent using the specified options.  If either end\
    \ of\n   the link does not accept a compression option, then this compression\n\
    \   option will not be used.  Compression will be done using any\n   remaining\
    \ options.  Options, by definition, are not required.\n   Implementations MUST\
    \ support CIPX without any options.\n   It is the responsibility of the router\
    \ sending the IPXWAN Timer\n   Response to inform the other router of the options\
    \ that will be used.\n   The Timer Response MUST contain a subset of the options\
    \ received in a\n   Timer Request.\n   To be clear, IPXWAN is used to set up a\
    \ symmetrical compression link.\n   Compression is configured identically in both\
    \ directions.  Each end\n   will use the same number of slots and same compression\
    \ options.  It\n   is illegal for link ends to use different number of slots or\n\
    \   different options.\n"
- title: IPX Compression Performance
  contents:
  - "IPX Compression Performance\n   The performance of this algorithm will depend\
    \ on the number of active\n   connections and the number of slots negotiated.\
    \  If the number of\n   slots is greater than the number of connections, the hit\
    \ rate should\n   be very high giving a very high compression ratio.  The performance\n\
    \   also depends on the average size of the IPX packets.  If the average\n   size\
    \ of packets is small, then compression will result in a more\n   noticeable performance\
    \ improvement.\n                            avg_data_len + uncomp_header_len\n\
    \        Compression ratio = ----------------------------------\n            \
    \                avg_data_len + avg_comp_header_len\n   Where 'avg_data_len' is\
    \ the average length of data in the IPX packet,\n   and 'uncomp_head_len' is the\
    \ uncompressed header length which is\n   fixed at 30 octets.  Where 'avg_comp_header_len'\
    \ is the average\n   length of the compressed IPX header.  The length of the minimum\n\
    \   compressed IPX header is 1 octet.  The length of the maximum\n   compressed\
    \ NCP/IPX header is 8 octets (including the NCP task\n   number), but since no\
    \ implementation yet sends packets with a length\n   greater than 16K, 7 octets\
    \ is the commonly encountered maximum.\n   Perhaps a reasonable 'avg_comp_header_len'\
    \ is 2, assuming the\n   inclusion of the flag and slot number octets.\n   The\
    \ maximum length of the data in an IPX packet is 546 octets (576\n   octets -\
    \ 30 octet IPX header), although newer implementations may\n   send packets of\
    \ up to 4096 octets.  The minimum length of the data in\n   an IPX packet is 1\
    \ octet.  Within the normal distribution of small\n   NCP packets, perhaps a reasonable\
    \ 'avg_data_len' is 26 octets.\n                                 546 + 30\n  \
    \      Minimal Compression    = -------- =  1.04\n                           \
    \      546 + 6\n                                 1 + 30\n        Maximal Compression\
    \    = ------   = 15.50\n                                 1 + 1\n            \
    \                     26 + 30\n        Likely Compression     = -------  =  2.00\n\
    \                                 26 + 2\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   IPX provides some security features, which are fully\
    \ applicable to\n   CIPX.  CIPX does not significantly alter the basic security\
    \ of IPX.\n"
- title: References
  contents:
  - "References\n   [1] Novell Inc., \"IPX Router Specification\", September 1992,\
    \ Part\n       Number: 107-000029-001\n   [2] Jacobson, Van, \"Compressing TCP/IP\
    \ Headers for Low-Speed Serial\n       Links\", RFC 1144, February 1990\n   [3]\
    \ CCITT Recommendation V.42bis Error Correcting Procedures for DCEs\n       using\
    \ Error Correction Procedures\n   [4] ISO 7776, Information Processing Systems\
    \ - Data Communication -\n       High Level Data Link Control Procedures - Description\
    \ of the X.25\n       LAPB-Compatible DTE Data Link Procedures\n   [5] Simpson,\
    \ W. A., \"The Point-to-Point Protocol (PPP)\", RFC 1548,\n       December 1993\n\
    \   [6] Simpson, W. A., \"The PPP Internet Packet Exchange Control\n       Protocol\
    \ (IPXCP)\", RFC 1552, December 1993\n   [7] Allen, Michael, \"Novell IPX Over\
    \ Various WAN Media [IPXWAN]\",\n       RFC 1551, December 1993\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This compression algorithm incorporates many ideas from\
    \ the Van\n   Jacobson TCP/IP header compression algorithm.\n   Michael Allen\
    \ from Novell provided a lot of valuable feedback in the\n   design of this algorithm.\
    \  David Piscitello from Bellcore and Marty\n   Del Vecchio at Shiva Corp.  made\
    \ several good suggestions.  Bill\n   Simpson was very helpful in driving PPP,\
    \ and specifically IPXCP, on\n   the standards course.\n"
- title: Chair's Address
  contents:
  - "Chair's Address\n      Fred Baker\n      Advanced Computer Communications\n \
    \     315 Bollay Drive\n      Santa Barbara, California 93117\n      EMail: fbaker@acc.com\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n      Saroop Mathur\n      Telebit Corp.\n      1315 Chesapeake\
    \ Terrace\n      Sunnyvale, CA 94089-1100\n      EMail: mathur@telebit.com\n \
    \     Mark S. Lewis\n      Telebit Corp.\n      1315 Chesapeake Terrace\n    \
    \  Sunnyvale, CA 94089-1100\n      EMail: Mark.S.Lewis@telebit.com\n"
