- contents:
  - "                              Universitat Politecnica de Catalunya/i2CAT\n                   IPv6
    over BLUETOOTH(R) Low Energy\n"
  title: __initial_text__
- contents:
  - "Abstract\n   Bluetooth Smart is the brand name for the Bluetooth low energy\n
    \  feature in the Bluetooth specification defined by the Bluetooth\n   Special
    Interest Group.  The standard Bluetooth radio has been widely\n   implemented
    and available in mobile phones, notebook computers, audio\n   headsets, and many
    other devices.  The low-power version of Bluetooth\n   is a specification that
    enables the use of this air interface with\n   devices such as sensors, smart
    meters, appliances, etc.  The low-\n   power variant of Bluetooth has been standardized
    since revision 4.0\n   of the Bluetooth specifications, although version 4.1 or
    newer is\n   required for IPv6.  This document describes how IPv6 is transported\n
    \  over Bluetooth low energy using IPv6 over Low-power Wireless Personal\n   Area
    Network (6LoWPAN) techniques.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7668.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction  ...................................................3\n
    \    1.1. Terminology and Requirements Language .......................3\n   2.
    Bluetooth Low Energy  ...........................................4\n     2.1.
    Bluetooth LE Stack  .........................................4\n     2.2. Roles
    and Topology for Link Layer ...........................5\n     2.3. Bluetooth
    LE Device Addressing  .............................6\n     2.4. Bluetooth LE Packet
    Sizes and MTU ...........................6\n   3. Specification of IPv6 over Bluetooth
    Low Energy .................7\n      3.1. Protocol Stack .............................................8\n
    \     3.2. Link Model .................................................8\n           3.2.1.
    IPv6 Subnet Model and Internet Connectivity .........9\n           3.2.2. Stateless
    Address Autoconfiguration ................10\n           3.2.3. Neighbor Discovery
    .................................12\n           3.2.4. Header Compression .................................13\n
    \                 3.2.4.1. Remote Destination Example ................14\n                  3.2.4.2.
    Example of Registration of\n                           Multiple Addresses ........................15\n
    \          3.2.5. Unicast and Multicast Address Mapping ..............16\n   4.
    Security Considerations ........................................16\n   5. References
    .....................................................17\n      5.1. Normative
    References ......................................17\n      5.2. Informative References
    ....................................18\n   Acknowledgements ..................................................20\n
    \  Contributors ......................................................20\n   Authors'
    Addresses ................................................20\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Bluetooth Smart is the brand name for the Bluetooth low
    energy\n   feature (hereinafter, \"Bluetooth LE\") in the Bluetooth specification\n
    \  defined by the Bluetooth Special Interest Group [BTCorev4.1].\n   Bluetooth
    LE is a radio technology targeted for devices that operate\n   with very low-capacity
    (e.g., coin cell) batteries or minimalistic\n   power sources, which means that
    low power consumption is essential.\n   Bluetooth LE is an especially attractive
    technology for Internet of\n   Things applications, such as health monitors, environmental
    sensing,\n   proximity applications, and many others.\n   Considering the potential
    for the exponential growth in the number of\n   sensors and Internet connected
    devices, IPv6 is an ideal protocol for\n   communication with such devices due
    to the large address space it\n   provides.  In addition, IPv6 provides tools
    for stateless address\n   autoconfiguration, which is particularly suitable for
    sensor network\n   applications and nodes that have very limited processing power
    or\n   lack a full-fledged operating system or a user interface.\n   This document
    describes how IPv6 is transported over Bluetooth LE\n   connections using IPv6
    over Low-power Wireless Personal Area Network\n   (6LoWPAN) techniques.  RFCs
    4944 [RFC4944], 6282 [RFC6282], and 6775\n   [RFC6775] were developed for 6LoWPAN
    and specify the transmission of\n   IPv6 over IEEE 802.15.4 [IEEE802.15.4].  The
    Bluetooth LE link, in\n   many respects, has similar characteristics to that of
    IEEE 802.15.4,\n   and many of the mechanisms defined for IPv6 over IEEE 802.15.4
    can be\n   applied to the transmission of IPv6 on Bluetooth LE links.  This\n
    \  document specifies the details of IPv6 transmission over Bluetooth LE\n   links.\n"
  - contents:
    - "1.1.  Terminology and Requirements Language\n   The key words \"MUST\", \"MUST
      NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
      \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted
      as described in RFC 2119 [RFC2119].\n   The terms \"6LoWPAN Node (6LN)\", \"6LoWPAN
      Router (6LR)\", and \"6LoWPAN\n   Border Router (6LBR)\" are defined as in [RFC6775],
      with an addition\n   that Bluetooth LE central and Bluetooth LE peripheral (see\n
      \  Section 2.2) can both be either 6LN or 6LBR.\n   The acronyms \"DAC\", \"DAM\",
      \"SAC\", \"SAM\", and \"CID\" are used in this\n   document as defined in [RFC6282].
      \ They are expanded as follows:\n   o  Destination Address Compression (DAC)\n
      \  o  Destination Address Mode (DAM)\n   o  Source Address Compression (SAC)\n
      \  o  Source Address Mode (SAM)\n   o  Context Identifier (CID)\n"
    title: 1.1.  Terminology and Requirements Language
  title: 1.  Introduction
- contents:
  - "2.  Bluetooth Low Energy\n   Bluetooth LE is designed for transferring small
    amounts of data\n   infrequently at modest data rates with a very small energy\n
    \  expenditure per bit.  The Bluetooth Special Interest Group (Bluetooth\n   SIG)
    has introduced two trademarks: Bluetooth Smart for single-mode\n   devices (a
    device that only supports Bluetooth LE) and Bluetooth\n   Smart Ready for dual-mode
    devices (devices that support both\n   Bluetooth and Bluetooth LE; note that Bluetooth
    and Bluetooth LE are\n   different, non-interoperable radio technologies).  In
    the rest of\n   this document, the term \"Bluetooth LE\" is used regardless of
    whether\n   this technology is supported by a single-mode or dual-mode device.\n
    \  Bluetooth LE was introduced in Bluetooth 4.0, enhanced in Bluetooth\n   4.1
    [BTCorev4.1], and developed even further in successive versions.\n   Bluetooth
    SIG has also published the Internet Protocol Support\n   Profile (IPSP) [IPSP],
    which includes the Internet Protocol Support\n   Service (IPSS).  The IPSP enables
    discovery of IP-enabled devices and\n   establishment of a link-layer connection
    for transporting IPv6\n   packets.  IPv6 over Bluetooth LE is dependent on both
    Bluetooth 4.1\n   and IPSP 1.0 or more recent versions of either specification
    to\n   provide necessary capabilities.\n   Devices such as mobile phones, notebooks,
    tablets, smartwatches, and\n   other handheld computing devices that incorporate
    chipsets\n   implementing Bluetooth 4.1 or later will also have the low energy\n
    \  functionality of Bluetooth.  Bluetooth LE is also expected to be\n   included
    in many different types of accessories that collaborate with\n   mobile devices
    such as phones, tablets, and notebook computers.  An\n   example of a use case
    for a Bluetooth LE accessory is a heart rate\n   monitor that sends data via a
    mobile phone or smartwatch to a server\n   on the Internet or sends data directly
    to the device.\n"
  - contents:
    - "2.1.  Bluetooth LE Stack\n   The lower layer of the Bluetooth LE stack consists
      of the Physical\n   Layer (PHY), the Link Layer (LL), and a test interface called
      the\n   Direct Test Mode (DTM).  The Physical Layer transmits and receives\n
      \  the actual packets.  The Link Layer is responsible for providing\n   medium
      access, connection establishment, error control, and flow\n   control.  The
      Direct Test Mode is only used for testing purposes.\n   The upper layer consists
      of the Logical Link Control and Adaptation\n   Protocol (L2CAP), Attribute Protocol
      (ATT), Security Manager (SM),\n   Generic Attribute Profile (GATT), and Generic
      Access Profile (GAP) as\n   shown in Figure 1.  The Host Controller Interface
      (HCI) separates the\n   lower layers, often implemented in the Bluetooth controller,
      from\n   higher layers, often implemented in the host stack.  GATT and\n   Bluetooth
      LE profiles together enable the creation of applications in\n   a standardized
      way without using IP.  L2CAP provides multiplexing\n   capability by multiplexing
      the data channels from the above layers.\n   L2CAP also provides fragmentation
      and reassembly for large data\n   packets.  The Security Manager defines a protocol
      and mechanisms for\n   pairing, key distribution, and a security toolbox for
      the Bluetooth\n   LE device.\n        +-------------------------------------------------+\n
      \       |              Applications                       |\n        +---------------------------------------+---------+\n
      \       |        Generic Attribute Profile      | Generic |\n        +--------------------+------------------+
      Access  |\n        | Attribute Protocol | Security Manager | Profile |\n        +--------------------+------------------+---------+\n
      \       |  Logical Link Control and Adaptation Protocol   |\n   - - -+-----------------------+-------------------------+-
      - - HCI\n        |      Link Layer       |    Direct Test Mode     |\n        +-------------------------------------------------+\n
      \       |             Physical Layer                      |\n        +-------------------------------------------------+\n
      \                  Figure 1: Bluetooth LE Protocol Stack\n   As shown in Section
      3.1, IPv6 over Bluetooth LE requires an adapted\n   6LoWPAN layer that runs
      on top of Bluetooth LE L2CAP.\n"
    title: 2.1.  Bluetooth LE Stack
  - contents:
    - "2.2.  Roles and Topology for Link Layer\n   Bluetooth LE defines two GAP roles
      of relevance herein: the Bluetooth\n   LE central role and the Bluetooth LE
      peripheral role.  A device in\n   the central role (called \"central\" from
      now on) has traditionally\n   been able to manage multiple simultaneous connections
      with a number\n   of devices in the peripheral role (called \"peripherals\"
      from now on).\n   A peripheral is commonly connected to a single central, but
      with\n   versions of Bluetooth from 4.1 onwards, it can also connect to\n   multiple
      centrals at the same time.  In this document, for IPv6\n   networking purposes,
      the Bluetooth LE network (i.e., a Bluetooth LE\n   piconet) follows a star topology
      shown in the Figure 2, where a\n   router typically implements the Bluetooth
      LE central role and the\n   rest of nodes implement the Bluetooth LE peripheral
      role.  In the\n   future, mesh networking and/or parallel connectivity to multiple\n
      \  centrals at a time may be defined for IPv6 over Bluetooth LE.\n                  Peripheral
      --.      .-- Peripheral\n                                \\    /\n                Peripheral
      ---- Central ---- Peripheral\n                                /    \\\n                  Peripheral
      --'      '-- Peripheral\n                   Figure 2: Bluetooth LE Star Topology\n
      \  In Bluetooth LE, direct wireless communication only takes place\n   between
      a central and a peripheral.  This means that inherently the\n   Bluetooth LE
      star represents a hub-and-spokes link model.\n   Nevertheless, two peripherals
      may communicate through the central by\n   using IP routing functionality per
      this specification.\n"
    title: 2.2.  Roles and Topology for Link Layer
  - contents:
    - "2.3.  Bluetooth LE Device Addressing\n   Every Bluetooth LE device is identified
      by a 48-bit device address.\n   The Bluetooth specification [BTCorev4.1] describes
      the device address\n   of a Bluetooth LE device as follows: \"Devices are identified
      using a\n   device address.  Device addresses may be either a public device\n
      \  address or a random device address\".  The public device addresses are\n
      \  based on the IEEE 802 standard [IEEE802].  Random device addresses\n   and
      the Bluetooth LE privacy feature are described in the Bluetooth\n   Generic
      Access Profile, Sections 10.8 and 10.7 of [BTCorev4.1],\n   respectively.  There
      are two types of random device addresses: static\n   and private addresses.
      \ The private addresses are further divided\n   into two sub-types: resolvable
      or non-resolvable addresses, which are\n   explained in depth in the referenced
      Bluetooth specification.  Once a\n   static address is initialized, it does
      not change until the device is\n   power cycled.  The static address can be
      initialized to a new value\n   after each power cycle, but that is not mandatory.
      \ The recommended\n   time interval before randomizing new private address is
      15 minutes,\n   as determined by timer T_GAP(private_addr_int) in Table 17.1
      of the\n   Bluetooth Generic Access Profile [BTCorev4.1].  The selection of\n
      \  which device address types are used is implementation and deployment\n   specific.
      \ In random addresses, the first 46 bits are randomized, and\n   the last 2
      bits indicate the random address type.  Bluetooth LE does\n   not support avoidance
      or detection of device address collisions.\n   However, these 48-bit random
      device addresses have a very small\n   probability of being in conflict within
      a typical deployment.\n"
    title: 2.3.  Bluetooth LE Device Addressing
  - contents:
    - "2.4.  Bluetooth LE Packet Sizes and MTU\n   The optimal MTU defined for L2CAP
      fixed channels over Bluetooth LE is\n   27 octets, including the L2CAP header
      of 4 octets.  The default MTU\n   for Bluetooth LE is hence defined to be 27
      octets.  Therefore,\n   excluding the L2CAP header of 4 octets, a protocol data
      unit (PDU)\n   size of 23 octets is available for upper layers.  In order to
      be able\n   to transmit IPv6 packets of 1280 octets or larger, a link-layer\n
      \  fragmentation and reassembly solution is provided by the L2CAP layer.\n   The
      IPSP defines means for negotiating up a link-layer connection\n   that provides
      an MTU of 1280 octets or higher for the IPv6 layer\n   [IPSP].  The link-layer
      MTU is negotiated separately for each\n   direction.  Implementations that require
      an equal link-layer MTU for\n   the two directions SHALL use the smallest of
      the possibly different\n   MTU values.\n"
    title: 2.4.  Bluetooth LE Packet Sizes and MTU
  title: 2.  Bluetooth Low Energy
- contents:
  - "3.  Specification of IPv6 over Bluetooth Low Energy\n   Bluetooth LE technology
    sets strict requirements for low power\n   consumption and thus limits the allowed
    protocol overhead. 6LoWPAN\n   standards [RFC6775] [RFC6282] provide useful functionality
    for\n   reducing overhead, which is applied to Bluetooth LE.  This\n   functionality
    is comprised of link-local IPv6 addresses and stateless\n   IPv6 address autoconfiguration
    (see Section 3.2.2), Neighbor\n   Discovery (see Section 3.2.3), and header compression
    (see\n   Section 3.2.4).  Fragmentation features from 6LoWPAN standards are\n
    \  not used due to Bluetooth LE's link-layer fragmentation support (see\n   Section
    2.4).\n   A significant difference between IEEE 802.15.4 and Bluetooth LE is\n
    \  that the former supports both star and mesh topologies (and requires\n   a
    routing protocol), whereas Bluetooth LE does not currently support\n   the formation
    of multihop networks at the link layer.  However,\n   inter-peripheral communication
    through the central is enabled by\n   using IP routing functionality per this
    specification.\n   In Bluetooth LE, a central node is assumed to be less resource\n
    \  constrained than a peripheral node.  Hence, in the primary deployment\n   scenario,
    central and peripheral will act as 6LoWPAN Border Router\n   (6LBR) and a 6LoWPAN
    Node (6LN), respectively.\n   Before any IP-layer communications can take place
    over Bluetooth LE,\n   nodes enabled by Bluetooth LE such as 6LNs and 6LBRs have
    to find\n   each other and establish a suitable link-layer connection.  The\n
    \  discovery and Bluetooth LE connection setup procedures are documented\n   by
    the Bluetooth SIG in the IPSP specification [IPSP].\n   In the rare case of Bluetooth
    LE random device address conflict, a\n   6LBR can detect multiple 6LNs with the
    same Bluetooth LE device\n   address, as well as a 6LN with the same Bluetooth
    LE address as the\n   6LBR.  The 6LBR MUST ignore 6LNs with the same device address
    the\n   6LBR has, and the 6LBR MUST have at most one connection for a given\n
    \  Bluetooth LE device address at any given moment.  This will avoid\n   addressing
    conflicts within a Bluetooth LE network.\n"
  - contents:
    - "3.1.  Protocol Stack\n   Figure 3 illustrates how the IPv6 stack works in parallel
      to the GATT\n   stack on top of the Bluetooth LE L2CAP layer.  The GATT stack
      is\n   needed herein for discovering nodes supporting the Internet Protocol\n
      \  Support Service.  UDP and TCP are provided as examples of transport\n   protocols,
      but the stack can be used by any other upper-layer\n   protocol capable of running
      atop of IPv6.\n          +---------+  +----------------------------+\n          |
      \ IPSS   |  |       UDP/TCP/other        |\n          +---------+  +----------------------------+\n
      \         |  GATT   |  |            IPv6            |\n          +---------+
      \ +----------------------------+\n          |  ATT    |  |  6LoWPAN for Bluetooth
      LE  |\n          +---------+--+----------------------------+\n          |          Bluetooth
      LE L2CAP             |\n     -  - +-----------------------------------------+-
      - - HCI\n          |        Bluetooth LE Link Layer          |\n          +-----------------------------------------+\n
      \         |         Bluetooth LE Physical           |\n          +-----------------------------------------+\n
      \            Figure 3: IPv6 and IPSS on the Bluetooth LE Stack\n"
    title: 3.1.  Protocol Stack
  - contents:
    - "3.2.  Link Model\n   The distinct concepts of the IPv6 link (layer 3) and the
      physical\n   link (combination of PHY and Media Access Control (MAC)) need to
      be\n   clear, and their relationship has to be well understood in order to\n
      \  specify the addressing scheme for transmitting IPv6 packets over the\n   Bluetooth
      LE link.  RFC 4861 [RFC4861] defines a link as \"a\n   communication facility
      or medium over which nodes can communicate at\n   the link layer, i.e., the
      layer immediately below IP\".\n   In the case of Bluetooth LE, the 6LoWPAN layer
      is adapted to support\n   transmission of IPv6 packets over Bluetooth LE.  The
      IPSP defines all\n   steps required for setting up the Bluetooth LE connection
      over which\n   6LoWPAN can function [IPSP], including handling the link-layer\n
      \  fragmentation required on Bluetooth LE, as described in Section 2.4.\n   Even
      though MTUs larger than 1280 octets can be supported, use of a\n   1280-octet
      MTU is RECOMMENDED in order to avoid need for Path MTU\n   discovery procedures.\n
      \  While Bluetooth LE protocols, such as L2CAP, utilize little-endian\n   byte
      ordering, IPv6 packets MUST be transmitted in big-endian order\n   (network
      byte order).\n   Per this specification, the IPv6 header compression format
      specified\n   in RFC 6282 [RFC6282] MUST be used.  The IPv6 payload length can
      be\n   derived from the L2CAP header length and the possibly elided IPv6\n   address
      can be reconstructed from the link-layer address, used at the\n   time of Bluetooth
      LE connection establishment, from the HCI\n   Connection Handle during connection,
      compression context if any, and\n   address registration information (see Section
      3.2.3).\n   Bluetooth LE connections used to build a star topology are point-to-\n
      \  point in nature, as Bluetooth broadcast features are not used for\n   IPv6
      over Bluetooth LE (except for discovery of nodes supporting\n   IPSS).  After
      the peripheral and central have connected at the\n   Bluetooth LE level, the
      link can be considered up, and IPv6 address\n   configuration and transmission
      can begin.\n"
    - contents:
      - "3.2.1.  IPv6 Subnet Model and Internet Connectivity\n   In the Bluetooth
        LE piconet model (see Section 2.2), peripherals each\n   have a separate link
        to the central and the central acts as an IPv6\n   router rather than a link-layer
        switch.  As discussed in [RFC4903],\n   conventional usage of IPv6 anticipates
        IPv6 subnets spanning a single\n   link at the link layer.  As IPv6 over Bluetooth
        LE is intended for\n   constrained nodes, and for Internet of Things use cases
        and\n   environments, the complexity of implementing a separate subnet on\n
        \  each peripheral-central link and routing between the subnets appears\n
        \  to be excessive.  In the Bluetooth LE case, the benefits of treating\n
        \  the collection of point-to-point links between a central and its\n   connected
        peripherals as a single multilink subnet rather than a\n   multiplicity of
        separate subnets are considered to outweigh the\n   multilink model's drawbacks
        as described in [RFC4903].\n   Hence, a multilink model has been chosen, as
        further illustrated in\n   Figure 4.  Because of this, link-local multicast
        communications can\n   happen only within a single Bluetooth LE connection;
        thus, 6LN-to-6LN\n   communications using link-local addresses are not possible.
        6LNs\n   connected to the same 6LBR have to communicate with each other by\n
        \  using the shared prefix used on the subnet.  The 6LBR ensures address\n
        \  collisions do not occur (see Section 3.2.3) and forwards packets sent\n
        \  by one 6LN to another.\n   In a typical scenario, the Bluetooth LE network
        is connected to the\n   Internet as shown in the Figure 4.  In this scenario,
        the Bluetooth\n   LE star is deployed as one subnet, using one /64 IPv6 prefix,
        with\n   each spoke representing an individual link.  The 6LBR is acting as\n
        \  router and forwarding packets between 6LNs and to and from Internet.\n
        \                                            /\n            .---------------.
        \              /\n           /           6LN   \\             /\n          /
        \              \\   \\           /\n         |                 \\   |         /\n
        \        | 6LN -----------   6LBR ----- |  Internet\n         |     <--Link-->
        \ /   |         \\\n          \\               /   /           \\\n           \\
        \          6LN   /             \\\n            '---------------'               \\\n
        \                                            \\\n          <------ Subnet
        -----><-- IPv6 connection -->\n                                      to Internet\n
        \        Figure 4: Bluetooth LE Network Connected to the Internet\n   In some
        scenarios, the Bluetooth LE network may transiently or\n   permanently be
        an isolated network as shown in the Figure 5.  In this\n   case, the whole
        star consists of a single subnet with multiple links,\n   where 6LBR is at
        central, routing packets between 6LNs.  In the\n   simplest case, the isolated
        network has one 6LBR and one 6LN.\n                    .-------------------.\n
        \                  /                     \\\n                  /     6LN      6LN
        \     \\\n                 /        \\      /         \\\n                |
        \         \\    /           |\n                |   6LN --- 6LBR --- 6LN    |\n
        \               |          /    \\           |\n                 \\        /
        \     \\         /\n                  \\     6LN      6LN      /\n                   \\
        \                    /\n                    '-------------------'\n                <---------
        Subnet ---------->\n                  Figure 5: Isolated Bluetooth LE Network\n"
      title: 3.2.1.  IPv6 Subnet Model and Internet Connectivity
    - contents:
      - "3.2.2.  Stateless Address Autoconfiguration\n   At network interface initialization,
        both 6LN and 6LBR SHALL generate\n   and assign to the Bluetooth LE network
        interface IPv6 link-local\n   addresses [RFC4862] based on the 48-bit Bluetooth
        device addresses\n   (see Section 2.3) that were used for establishing the
        underlying\n   Bluetooth LE connection.  A 6LN and a 6LBR are RECOMMENDED
        to use\n   private Bluetooth device addresses.  A 6LN SHOULD pick a different\n
        \  Bluetooth device address for every Bluetooth LE connection with a\n   6LBR,
        and a 6LBR SHOULD periodically change its random Bluetooth\n   device address.
        \ Following the guidance of [RFC7136], a 64-bit\n   Interface Identifier (IID)
        is formed from the 48-bit Bluetooth device\n   address by inserting two octets,
        with hexadecimal values of 0xFF and\n   0xFE in the middle of the 48-bit Bluetooth
        device address as shown in\n   Figure 6.  In the figure, letter 'b' represents
        a bit from the\n   Bluetooth device address, copied as is without any changes
        on any\n   bit.  This means that no bit in the IID indicates whether the\n
        \  underlying Bluetooth device address is public or random.\n   |0              1|1
        \             3|3              4|4              6|\n   |0              5|6
        \             1|2              7|8              3|\n   +----------------+----------------+----------------+----------------+\n
        \  |bbbbbbbbbbbbbbbb|bbbbbbbb11111111|11111110bbbbbbbb|bbbbbbbbbbbbbbbb|\n
        \  +----------------+----------------+----------------+----------------+\n
        \        Figure 6: Formation of IID from Bluetooth Device Address\n   The
        IID is then prepended with the prefix fe80::/64, as described in\n   RFC 4291
        [RFC4291] and as depicted in Figure 7.  The same link-local\n   address SHALL
        be used for the lifetime of the Bluetooth LE L2CAP\n   channel.  (After a
        Bluetooth LE logical link has been established, it\n   is referenced with
        a Connection Handle in HCI.  Thus, possibly\n   changing device addresses
        do not impact data flows within existing\n   L2CAP channels.  Hence, there
        is no need to change IPv6 link-local\n   addresses even if devices change
        their random device addresses during\n   L2CAP channel lifetime).\n             10
        bits        54 bits             64 bits\n           +----------+-----------------+----------------------+\n
        \          |1111111010|       zeros     | Interface Identifier |\n           +----------+-----------------+----------------------+\n
        \            Figure 7: IPv6 Link-Local Address in Bluetooth LE\n   A 6LN MUST
        join the all-nodes multicast address.  There is no need\n   for 6LN to join
        the solicited-node multicast address, since 6LBR will\n   know device addresses
        and hence link-local addresses of all connected\n   6LNs.  The 6LBR will ensure
        no two devices with the same Bluetooth LE\n   device address are connected
        at the same time.  Detection of\n   duplicate link-local addresses is performed
        by the process on the\n   6LBR responsible for the discovery of IP-enabled
        Bluetooth LE nodes\n   and for starting Bluetooth LE connection establishment
        procedures.\n   This approach increases the complexity of 6LBR, but reduces
        power\n   consumption on both 6LN and 6LBR in the link establishment phase
        by\n   reducing the number of mandatory packet transmissions.\n   After link-local
        address configuration, the 6LN sends Router\n   Solicitation messages as described
        in [RFC4861], Section 6.3.7.\n   For non-link-local addresses, 6LNs SHOULD
        NOT be configured to embed\n   the Bluetooth device address in the IID by
        default.  Alternative\n   schemes such as Cryptographically Generated Addresses
        (CGAs)\n   [RFC3972], privacy extensions [RFC4941], Hash-Based Addresses (HBAs)\n
        \  [RFC5535], DHCPv6 [RFC3315], or static, semantically opaque addresses\n
        \  [RFC7217] SHOULD be used by default.  In situations where the\n   Bluetooth
        device address is known to be a private device address and/\n   or the header
        compression benefits of embedding the device address in\n   the IID are required
        to support deployment constraints, 6LNs MAY form\n   a 64-bit IID by utilizing
        the 48-bit Bluetooth device address.  The\n   non-link-local addresses that
        a 6LN generates MUST be registered with\n   the 6LBR as described in Section
        3.2.3.\n   The tool for a 6LBR to obtain an IPv6 prefix for numbering the\n
        \  Bluetooth LE network is out of scope of this document, but can be,\n   for
        example, accomplished via DHCPv6 Prefix Delegation [RFC3633] or\n   by using
        Unique Local IPv6 Unicast Addresses (ULAs) [RFC4193].  Due\n   to the link
        model of the Bluetooth LE (see Section 3.2.1) the 6LBR\n   MUST set the \"on-link\"
        flag (L) to zero in the Prefix Information\n   Option in Neighbor Discovery
        messages [RFC4861] (see Section 3.2.3).\n   This will cause 6LNs to always
        send packets to the 6LBR, including\n   the case when the destination is another
        6LN using the same prefix.\n"
      title: 3.2.2.  Stateless Address Autoconfiguration
    - contents:
      - "3.2.3.  Neighbor Discovery\n   'Neighbor Discovery Optimization for IPv6
        over Low-Power Wireless\n   Personal Area Networks (6LoWPANs)' [RFC6775] describes
        the neighbor\n   discovery approach as adapted for use in several 6LoWPAN
        topologies,\n   including the mesh topology.  Bluetooth LE does not support
        mesh\n   networks; hence, only those aspects that apply to a star topology
        are\n   considered.\n   The following aspects of the Neighbor Discovery optimizations\n
        \  [RFC6775] are applicable to Bluetooth LE 6LNs:\n   1.  A Bluetooth LE 6LN
        MUST NOT register its link-local address.  A\n       Bluetooth LE 6LN MUST
        register its non-link-local addresses with\n       the 6LBR by sending a Neighbor
        Solicitation (NS) message with the\n       Address Registration Option (ARO)
        and process the Neighbor\n       Advertisement (NA) accordingly.  The NS with
        the ARO option MUST\n       be sent irrespective of the method used to generate
        the IID.  If\n       the 6LN registers multiple addresses that are not based
        on\n       Bluetooth device address for the same compression context, the\n
        \      header compression efficiency will decrease (see Section 3.2.4).\n
        \  2.  For sending Router Solicitations and processing Router\n       Advertisements,
        the Bluetooth LE 6LNs MUST follow Sections 5.3\n       and 5.4 of [RFC6775],
        respectively.\n"
      title: 3.2.3.  Neighbor Discovery
    - contents:
      - "3.2.4.  Header Compression\n   Header compression as defined in RFC 6282
        [RFC6282], which specifies\n   the compression format for IPv6 datagrams on
        top of IEEE 802.15.4, is\n   REQUIRED as the basis for IPv6 header compression
        on top of Bluetooth\n   LE.  All headers MUST be compressed according to the
        encoding formats\n   described in RFC 6282 [RFC6282].\n   The Bluetooth LE's
        star topology structure and ARO can be exploited\n   in order to provide a
        mechanism for address compression.  The\n   following text describes the principles
        of IPv6 address compression\n   on top of Bluetooth LE.\n   The ARO option
        requires use of a 64-bit Extended Unique Identifier\n   (EUI-64) [RFC6775].
        \ In the case of Bluetooth LE, the field SHALL be\n   filled with the 48-bit
        device address used by the Bluetooth LE node\n   converted into 64-bit Modified
        EUI-64 format [RFC4291].\n   To enable efficient header compression, when
        the 6LBR sends a Router\n   Advertisement, it MUST include a 6LoWPAN Context
        Option (6CO)\n   [RFC6775] matching each address prefix advertised via a Prefix\n
        \  Information Option (PIO) [RFC4861] for use in stateless address\n   autoconfiguration.\n
        \  When a 6LN is sending a packet to a 6LBR, it MUST fully elide the\n   source
        address if it is a link-local address.  For other packets to\n   or through
        a 6LBR with a non-link-local source address that the 6LN\n   has registered
        with ARO to the 6LBR for the indicated prefix, the\n   source address MUST
        be fully elided if it is the latest address that\n   the 6LN has registered
        for the indicated prefix.  If a source non-\n   link-local address is not
        the latest registered, then the 64 bits of\n   the IID SHALL be fully carried
        in-line (SAM=01), or if the first 48\n   bits of the IID match with the latest
        registered address, then the\n   last 16 bits of the IID SHALL be carried
        in-line (SAM=10).  That is,\n   if SAC=0 and SAM=11, the 6LN MUST be using
        the link-local IPv6\n   address derived from the Bluetooth LE device address,
        and if SAC=1\n   and SAM=11, the 6LN MUST have registered the source IPv6
        address with\n   the prefix related to the compression context, and the 6LN
        MUST be\n   referring to the latest registered address related to the compression\n
        \  context.  The IPv6 address MUST be considered to be registered only\n   after
        the 6LBR has sent a Neighbor Advertisement with an ARO having\n   its status
        field set to success.  The destination IPv6 address MUST\n   be fully elided
        if the destination address is the 6LBR's link-local\n   address based on the
        6LBR's Bluetooth device address (DAC=0, DAM=11).\n   The destination IPv6
        address MUST be fully or partially elided if\n   context has been set up for
        the destination address, for example,\n   DAC=0 and DAM=01 when destination
        prefix is link-local, and DAC=1 and\n   DAM=01 if compression context has
        been configured for the destination\n   prefix used.\n   When a 6LBR is transmitting
        packets to a 6LN, it MUST fully elide the\n   source IID if the source IPv6
        address is the link-local address based\n   on the 6LBR's Bluetooth device
        address (SAC=0, SAM=11), and it MUST\n   elide the source prefix or address
        if a compression context related\n   to the IPv6 source address has been set
        up.  The 6LBR also MUST fully\n   elide the destination IPv6 address if it
        is the link-local address\n   based on the 6LN's Bluetooth device address
        (DAC=0, DAM=11), or if\n   the destination address is the latest registered
        by the 6LN with ARO\n   for the indicated context (DAC=1, DAM=11).  If the
        destination\n   address is a non-link-local address and not the latest registered,\n
        \  then the 6LN MUST either include the IID part fully in-line (DAM=01)\n
        \  or, if the first 48 bits of the IID match to the latest registered\n   address,
        then elide those 48 bits (DAM=10).\n"
      - contents:
        - "3.2.4.1.  Remote Destination Example\n   When a 6LN transmits an IPv6 packet
          to a remote destination using\n   global Unicast IPv6 addresses, if a context
          is defined for the 6LN's\n   global IPv6 address, the 6LN has to indicate
          this context in the\n   corresponding source fields of the compressed IPv6
          header as per\n   Section 3.1 of RFC 6282 [RFC6282] and has to elide the
          full IPv6\n   source address previously registered with ARO (if using the
          latest\n   registered address; otherwise, part or all of the IID may have
          to be\n   transmitted in-line).  For this, the 6LN MUST use the following\n
          \  settings in the IPv6 compressed header: SAC=1 and SAM=11.  The CID\n
          \  may be set 0 or 1, depending on which context is used.  In this case,\n
          \  the 6LBR can infer the elided IPv6 source address since 1) the 6LBR\n
          \  has previously assigned the prefix to the 6LNs; and 2) the 6LBR\n   maintains
          a Neighbor Cache that relates the device address and the\n   IID the device
          has registered with ARO.  If a context is defined for\n   the IPv6 destination
          address, the 6LN has to also indicate this\n   context in the corresponding
          destination fields of the compressed\n   IPv6 header, and elide the prefix
          of or the full destination IPv6\n   address.  For this, the 6LN MUST set
          the DAM field of the compressed\n   IPv6 header as DAM=01 (if the context
          covers a 64-bit prefix) or as\n   DAM=11 (if the context covers a full 128-bit
          address).  DAC MUST be\n   set to 1.  Note that when a context is defined
          for the IPv6\n   destination address, the 6LBR can infer the elided destination
          prefix\n   by using the context.\n   When a 6LBR receives an IPv6 packet
          sent by a remote node outside the\n   Bluetooth LE network, and the destination
          of the packet is a 6LN, if\n   a context is defined for the prefix of the
          6LN's global IPv6 address,\n   the 6LBR has to indicate this context in
          the corresponding\n   destination fields of the compressed IPv6 header.
          \ The 6LBR has to\n   elide the IPv6 destination address of the packet before
          forwarding\n   it, if the IPv6 destination address is inferable by the 6LN.
          \ For\n   this, the 6LBR will set the DAM field of the IPv6 compressed header\n
          \  as DAM=11 (if the address is the latest 6LN has registered).  DAC\n   needs
          to be set to 1.  If a context is defined for the IPv6 source\n   address,
          the 6LBR needs to indicate this context in the source fields\n   of the
          compressed IPv6 header and elide that prefix as well.  For\n   this, the
          6LBR needs to set the SAM field of the IPv6 compressed\n   header as SAM=01
          (if the context covers a 64-bit prefix) or SAM=11\n   (if the context covers
          a full 128-bit address).  SAC is to be set to\n   1.\n"
        title: 3.2.4.1.  Remote Destination Example
      - contents:
        - "3.2.4.2.  Example of Registration of Multiple Addresses\n   As described
          above, a 6LN can register multiple non-link-local\n   addresses that map
          to the same compression context.  From the\n   multiple address registered,
          only the latest address can be fully\n   elided (SAM=11, DAM=11), and the
          IIDs of previously registered\n   addresses have to be transmitted fully
          in-line (SAM=01, DAM=01) or,\n   in the best case, can be partially elided
          (SAM=10, DAM=10).  This is\n   illustrated in the example below:\n   1.
          \ The 6LN registers first address 2001:db8::1111:2222:3333:4444 to\n       a
          6LBR.  At this point the address can be fully elided using\n       SAC=1/SAM=11
          or DAC=1/DAM=11.\n   2.  The 6LN registers second address 2001:db8::1111:2222:3333:5555
          to\n       the 6LBR.  As the second address is now the latest registered,
          it\n       can be fully elided using SAC=1/SAM=11 or DAC=1/DAM=11.  The\n
          \      first address can now be partially elided using SAC=1/SAM=10 or\n
          \      DAC=1/DAM=10, as the first 112 bits of the address are the same\n
          \      between the first and the second registered addresses.\n   3.  Expiration
          of registration time for the first or the second\n       address has no
          impact on the compression.  Hence, even if the\n       most recently registered
          address expires, the first address can\n       only be partially elided
          (SAC=1/SAM=10, DAC=1/DAM=10).  The 6LN\n       can register a new address,
          or re-register an expired address, to\n       become able to again fully
          elide an address.\n"
        title: 3.2.4.2.  Example of Registration of Multiple Addresses
      title: 3.2.4.  Header Compression
    - contents:
      - "3.2.5.  Unicast and Multicast Address Mapping\n   The Bluetooth LE Link Layer
        does not support multicast.  Hence,\n   traffic is always unicast between
        two Bluetooth LE nodes.  Even in\n   the case where a 6LBR is attached to
        multiple 6LNs, the 6LBR cannot\n   do a multicast to all the connected 6LNs.
        \ If the 6LBR needs to send\n   a multicast packet to all its 6LNs, it has
        to replicate the packet\n   and unicast it on each link.  However, this may
        not be energy\n   efficient, and particular care must be taken if the central
        is\n   battery powered.  To further conserve power, the 6LBR MUST keep track\n
        \  of multicast listeners at Bluetooth LE link-level granularity (not at\n
        \  subnet granularity), and it MUST NOT forward multicast packets to\n   6LNs
        that have not registered as listeners for multicast groups the\n   packets
        belong to.  In the opposite direction, a 6LN always has to\n   send packets
        to or through the 6LBR.  Hence, when a 6LN needs to\n   transmit an IPv6 multicast
        packet, the 6LN will unicast the\n   corresponding Bluetooth LE packet to
        the 6LBR.\n"
      title: 3.2.5.  Unicast and Multicast Address Mapping
    title: 3.2.  Link Model
  title: 3.  Specification of IPv6 over Bluetooth Low Energy
- contents:
  - "4.  Security Considerations\n   The transmission of IPv6 over Bluetooth LE links
    and IPv6 over IEEE\n   802.15.4 have similar requirements and concerns for security.\n
    \  Security considerations for the Bluetooth LE Link Layer are covered\n   by
    the IPSP [IPSP].\n   Bluetooth LE Link Layer supports encryption and authentication
    by\n   using the Counter with CBC-MAC (CCM) mechanism [RFC3610] and a\n   128-bit
    AES block cipher.  Upper-layer security mechanisms may\n   exploit this functionality
    when it is available.  (Note: CCM does not\n   consume octets from the maximum
    per-packet L2CAP data size, since the\n   link-layer data unit has a specific
    field for them when they are\n   used.)\n   Key management in Bluetooth LE is
    provided by the Security Manager\n   Protocol (SMP), as defined in [BTCorev4.1].\n
    \  The Direct Test Mode offers two setup alternatives: with and without\n   accessible
    HCI.  In designs with accessible HCI, the so-called upper\n   tester communicates
    through the HCI (which may be supported by\n   Universal Asynchronous Receiver
    Transmitter (UART), Universal Serial\n   Bus (USB), and Secure Digital transports),
    with the Physical and Link\n   Layers of the Bluetooth LE device under test.  In
    designs without\n   accessible HCI, the upper tester communicates with the device
    under\n   test through a two-wire UART interface.  The Bluetooth specification\n
    \  [BTCorev4.1] does not provide security mechanisms for the\n   communication
    between the upper tester and the device under test in\n   either case.  Nevertheless,
    an attacker needs to physically connect a\n   device (via one of the wired HCI
    types) to the device under test to\n   be able to interact with the latter.\n
    \  The IPv6 link-local address configuration described in Section 3.2.2\n   only
    reveals information about the 6LN to the 6LBR that the 6LBR\n   already knows
    from the link-layer connection.  This means that a\n   device using Bluetooth
    privacy features reveals the same information\n   in its IPv6 link-local addresses
    as in its device addresses.\n   Respectively, a device not using privacy at the
    Bluetooth level will\n   not have privacy at the IPv6 link-local address either.
    \ For non-\n   link-local addresses, implementations are recommended not to embed\n
    \  the Bluetooth device address in the IID by default and instead\n   support,
    for example, [RFC3315], [RFC3972], [RFC4941], [RFC5535], or\n   [RFC7217].\n   A
    malicious 6LN may attempt to perform a denial-of-service attack on\n   the Bluetooth
    LE network, for example, by flooding packets.  This\n   sort of attack is mitigated
    by the fact that link-local multicast is\n   not bridged between Bluetooth LE
    links and by 6LBR being able to\n   rate-limit packets sent by each 6LN by making
    smart use of the\n   Bluetooth LE L2CAP credit-based flow-control mechanism.\n"
  title: 4.  Security Considerations
- contents:
  - '5.  References

    '
  - contents:
    - "5.1.  Normative References\n   [BTCorev4.1]\n              Bluetooth Special
      Interest Group, \"Bluetooth Core\n              Specification Version 4.1\",
      December 2013,\n              <https://www.bluetooth.org/en-us/specification/adopted-\n
      \             specifications>.\n   [IPSP]     Bluetooth Special Interest Group,
      \"Bluetooth Internet\n              Protocol Support Profile Specification Version
      1.0.0\",\n              December 2014, <https://www.bluetooth.org/en-\n              us/specification/adopted-specifications>.\n
      \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC4291]  Hinden,
      R. and S. Deering, \"IP Version 6 Addressing\n              Architecture\",
      RFC 4291, DOI 10.17487/RFC4291, February\n              2006, <http://www.rfc-editor.org/info/rfc4291>.\n
      \  [RFC4861]  Narten, T., Nordmark, E., Simpson, W., and H. Soliman,\n              \"Neighbor
      Discovery for IP version 6 (IPv6)\", RFC 4861,\n              DOI 10.17487/RFC4861,
      September 2007,\n              <http://www.rfc-editor.org/info/rfc4861>.\n   [RFC4862]
      \ Thomson, S., Narten, T., and T. Jinmei, \"IPv6 Stateless\n              Address
      Autoconfiguration\", RFC 4862,\n              DOI 10.17487/RFC4862, September
      2007,\n              <http://www.rfc-editor.org/info/rfc4862>.\n   [RFC6282]
      \ Hui, J., Ed. and P. Thubert, \"Compression Format for IPv6\n              Datagrams
      over IEEE 802.15.4-Based Networks\", RFC 6282,\n              DOI 10.17487/RFC6282,
      September 2011,\n              <http://www.rfc-editor.org/info/rfc6282>.\n   [RFC6775]
      \ Shelby, Z., Ed., Chakrabarti, S., Nordmark, E., and C.\n              Bormann,
      \"Neighbor Discovery Optimization for IPv6 over\n              Low-Power Wireless
      Personal Area Networks (6LoWPANs)\",\n              RFC 6775, DOI 10.17487/RFC6775,
      November 2012,\n              <http://www.rfc-editor.org/info/rfc6775>.\n   [RFC7136]
      \ Carpenter, B. and S. Jiang, \"Significance of IPv6\n              Interface
      Identifiers\", RFC 7136, DOI 10.17487/RFC7136,\n              February 2014,
      <http://www.rfc-editor.org/info/rfc7136>.\n"
    title: 5.1.  Normative References
  - contents:
    - "5.2.  Informative References\n   [IEEE802]  IEEE, \"IEEE Standard for Local
      and Metropolitan Area\n              Networks: Overview and Architecture\",
      IEEE 802,\n              DOI 10.1109/ieeestd.2002.93395,\n              <http://ieeexplore.ieee.org/servlet/opac?punumber=7732>.\n
      \  [IEEE802.15.4]\n              IEEE, \"IEEE Standard for Local and metropolitan
      area\n              networks--Part 15.4: Low-Rate Wireless Personal Area\n              Networks
      (LR-WPANs)\", IEEE 802.15.4,\n              DOI 10.1109/ieeestd.2011.6012487,\n
      \             <http://ieeexplore.ieee.org/servlet/\n              opac?punumber=6012485>.\n
      \  [RFC3315]  Droms, R., Ed., Bound, J., Volz, B., Lemon, T., Perkins,\n              C.,
      and M. Carney, \"Dynamic Host Configuration Protocol\n              for IPv6
      (DHCPv6)\", RFC 3315, DOI 10.17487/RFC3315, July\n              2003, <http://www.rfc-editor.org/info/rfc3315>.\n
      \  [RFC3610]  Whiting, D., Housley, R., and N. Ferguson, \"Counter with\n              CBC-MAC
      (CCM)\", RFC 3610, DOI 10.17487/RFC3610, September\n              2003, <http://www.rfc-editor.org/info/rfc3610>.\n
      \  [RFC3633]  Troan, O. and R. Droms, \"IPv6 Prefix Options for Dynamic\n              Host
      Configuration Protocol (DHCP) version 6\", RFC 3633,\n              DOI 10.17487/RFC3633,
      December 2003,\n              <http://www.rfc-editor.org/info/rfc3633>.\n   [RFC3972]
      \ Aura, T., \"Cryptographically Generated Addresses (CGA)\",\n              RFC
      3972, DOI 10.17487/RFC3972, March 2005,\n              <http://www.rfc-editor.org/info/rfc3972>.\n
      \  [RFC4193]  Hinden, R. and B. Haberman, \"Unique Local IPv6 Unicast\n              Addresses\",
      RFC 4193, DOI 10.17487/RFC4193, October 2005,\n              <http://www.rfc-editor.org/info/rfc4193>.\n
      \  [RFC4903]  Thaler, D., \"Multi-Link Subnet Issues\", RFC 4903,\n              DOI
      10.17487/RFC4903, June 2007,\n              <http://www.rfc-editor.org/info/rfc4903>.\n
      \  [RFC4941]  Narten, T., Draves, R., and S. Krishnan, \"Privacy\n              Extensions
      for Stateless Address Autoconfiguration in\n              IPv6\", RFC 4941,
      DOI 10.17487/RFC4941, September 2007,\n              <http://www.rfc-editor.org/info/rfc4941>.\n
      \  [RFC4944]  Montenegro, G., Kushalnagar, N., Hui, J., and D. Culler,\n              \"Transmission
      of IPv6 Packets over IEEE 802.15.4\n              Networks\", RFC 4944, DOI
      10.17487/RFC4944, September 2007,\n              <http://www.rfc-editor.org/info/rfc4944>.\n
      \  [RFC5535]  Bagnulo, M., \"Hash-Based Addresses (HBA)\", RFC 5535,\n              DOI
      10.17487/RFC5535, June 2009,\n              <http://www.rfc-editor.org/info/rfc5535>.\n
      \  [RFC7217]  Gont, F., \"A Method for Generating Semantically Opaque\n              Interface
      Identifiers with IPv6 Stateless Address\n              Autoconfiguration (SLAAC)\",
      RFC 7217,\n              DOI 10.17487/RFC7217, April 2014,\n              <http://www.rfc-editor.org/info/rfc7217>.\n"
    title: 5.2.  Informative References
  title: 5.  References
- contents:
  - "Acknowledgements\n   The Bluetooth, Bluetooth Smart, and Bluetooth Smart Ready
    marks are\n   registered trademarks owned by Bluetooth SIG, Inc.\n   Carsten Bormann,
    Samita Chakrabarti, Niclas Comstedt, Alissa Cooper,\n   Elwyn Davies, Brian Haberman,
    Marcel De Kogel, Jouni Korhonen, Chris\n   Lonvick, Erik Nordmark, Erik Rivard,
    Dave Thaler, Pascal Thubert,\n   Xavi Vilajosana, and Victor Zhodzishsky provided
    valuable feedback\n   for this document.\n   The authors would like to give special
    acknowledgements to Krishna\n   Shingala, Frank Berntsen, and Bluetooth SIG's
    Internet Working Group\n   for providing significant feedback and improvement
    proposals for this\n   document.\n   Carles Gomez has been supported in part by
    the Spanish Government\n   Ministerio de Economia y Competitividad through project\n
    \  TEC2012-32531, and FEDER.\n   Johanna Nieminen worked on this RFC in 2011-2012
    while at Nokia and\n   would like to thank Nokia for supporting the project.\n"
  title: Acknowledgements
- contents:
  - "Contributors\n   Kanji Kerai, Jari Mutikainen, David Canfeng-Chen, and Minjun
    Xi from\n   Nokia contributed significantly to this document.\n"
  title: Contributors
- contents:
  - "Authors' Addresses\n   Johanna Nieminen\n   TeliaSonera\n   Email: johannamaria.nieminen@gmail.com\n
    \  Teemu Savolainen\n   Nokia\n   Visiokatu 3\n   Tampere  33720\n   Finland\n
    \  Email: teemu.savolainen@nokia.com\n   Markus Isomaki\n   Nokia\n   Karaportti
    2-4\n   Espoo  02610\n   Finland\n   Email: markus.isomaki@nokia.com\n   Basavaraj
    Patil\n   AT&T\n   1410 East Renner Road\n   Richardson, TX  75082\n   United
    States\n   Email: basavaraj.patil@att.com\n   Zach Shelby\n   ARM\n   150 Rose
    Orchard Way\n   San Jose, CA  95134\n   United States\n   Email: zach.shelby@arm.com\n
    \  Carles Gomez\n   Universitat Politecnica de Catalunya/i2CAT\n   C/Esteve Terradas,
    7\n   Castelldefels  08860\n   Spain\n   Email: carlesgo@entel.upc.edu\n"
  title: Authors' Addresses
