- title: __initial_text__
  contents:
  - "              Dynamic Delegation Discovery System (DDDS)\n           Part Three:\
    \ The Domain Name System (DNS) Database\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a Dynamic Delegation Discovery System (DDDS)\n\
    \   Database using the Domain Name System (DNS) as a distributed database\n  \
    \ of Rules.  The Keys are domain-names and the Rules are encoded using\n   the\
    \ Naming Authority Pointer (NAPTR) Resource Record (RR).\n   Since this document\
    \ obsoletes RFC 2915, it is the official\n   specification for the NAPTR DNS Resource\
    \ Record.  It is also part of\n   a series that is completely specified in \"\
    Dynamic Delegation\n   Discovery System (DDDS) Part One: The Comprehensive DDDS\"\
    \ (RFC 3401).\n   It is very important to note that it is impossible to read and\n\
    \   understand any document in this series without reading the others.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.    Introduction . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.    Terminology  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   3.    DDDS Database Specification  . . . . . . . . . . . .\
    \ . . . .  3\n   4.    NAPTR RR Format  . . . . . . . . . . . . . . . . . . .\
    \ . . .  5\n   4.1   Packet Format  . . . . . . . . . . . . . . . . . . . . .\
    \ . .  5\n   4.2   Additional Information Processing  . . . . . . . . . . . .\
    \ .  7\n   4.2.1 Additional Section processing by DNS servers . . . . . . . .\
    \  7\n   4.2.2 Additional Section processing by resolver/applications . . .  7\n\
    \   4.3   Master File Format . . . . . . . . . . . . . . . . . . . . .  7\n  \
    \ 5.    Application Specifications . . . . . . . . . . . . . . . . .  8\n   6.\
    \    Examples . . . . . . . . . . . . . . . . . . . . . . . . . .  8\n   6.1 \
    \  URN Example  . . . . . . . . . . . . . . . . . . . . . . . .  8\n   6.2   E164\
    \ Example . . . . . . . . . . . . . . . . . . . . . . . . 10\n   7.    Advice\
    \ for DNS Administrators  . . . . . . . . . . . . . . . 10\n   8.    Notes  .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . 11\n   9.    IANA Considerations\
    \  . . . . . . . . . . . . . . . . . . . . 11\n   10.   Security Considerations\
    \  . . . . . . . . . . . . . . . . . . 11\n         References . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . 12\n         Author's Address . . . . . .\
    \ . . . . . . . . . . . . . . . . 13\n         Full Copyright Statement . . .\
    \ . . . . . . . . . . . . . . . 14\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The Dynamic Delegation Discovery System (DDDS) is used to\
    \ implement\n   lazy binding of strings to data, in order to support dynamically\n\
    \   configured delegation systems.  The DDDS functions by mapping some\n   unique\
    \ string to data stored within a DDDS Database by iteratively\n   applying string\
    \ transformation rules until a terminal condition is\n   reached.\n   This document\
    \ describes the way in which the Domain Name System (DNS)\n   is used as a data\
    \ store for the Rules that allow a DDDS Application\n   to function.  It does\
    \ not specify any particular application or usage\n   scenario.  The entire series\
    \ of documents is specified in \"Dynamic\n   Delegation Discovery System (DDDS)\
    \ Part One: The Comprehensive DDDS\"\n   (RFC 3401) [1].  It is very important\
    \ to note that it is impossible\n   to read and understand any document in that\
    \ series without reading\n   the related documents.\n   The Naming Authority Pointer\
    \ (NAPTR) DNS Resource Record (RR)\n   specified here was originally produced\
    \ by the URN Working Group as a\n   way to encode rule-sets in DNS so that the\
    \ delegated sections of a\n   Uniform Resource Identifiers (URI) could be decomposed\
    \ in such a way\n   that they could be changed and re-delegated over time.  The\
    \ result\n   was a Resource Record that included a regular expression that would\n\
    \   be used by a client program to rewrite a string into a domain name.\n   Regular\
    \ expressions were chosen for their compactness to expressivity\n   ratio allowing\
    \ for a great deal of information to be encoded in a\n   rather small DNS packet.\n\
    \   Over time this process was generalized for other Applications and\n   Rule\
    \ Databases.  This document defines a Rules Database absent any\n   particular\
    \ Application as there may be several Applications all\n   taking advantage of\
    \ this particular Rules Database.\n"
- title: 2. Terminology
  contents:
  - "2. Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [6].\n\
    \   All other terminology, especially capitalized terms, is taken from\n   [3].\n"
- title: 3. DDDS Database Specification
  contents:
  - "3. DDDS Database Specification\n   General Description:\n      This database\
    \ uses the Domain Name System (DNS) as specified in\n      [8] and [7].\n    \
    \  The character set used to specify the various values of the NAPTR\n      records\
    \ is UTF-8 [17].  Care must be taken to ensure that, in the\n      case where\
    \ either the input or the output to the substitution\n      expression contains\
    \ code points outside of the ASCII/Unicode\n      equivalence in UTF-8, any UTF-8\
    \ is interpreted as a series of\n      code-points instead of as a series of bytes.\
    \  This is to ensure\n      that the internationalized features of the POSIX Extended\
    \ Regular\n      Expressions are able to match their intended code-points.\n \
    \     Substitution expressions MUST NOT be written where they depend on\n    \
    \  a specific POSIX locale since this would cause substitution\n      expressions\
    \ to loose their ability to be universally applicable.\n      All DNS resource\
    \ records have a Time To Live (TTL) associated with\n      them.  When the number\
    \ of seconds has passed since the record was\n      retrieved the record is no\
    \ longer valid and a new query must be\n      used to retrieve the new records.\
    \  Thus, as mentioned in the DDDS\n      Algorithm, there can be the case where\
    \ a given Rule expires.  In\n      the case where an application attempts to fall\
    \ back to previously\n      retrieved sets of Rules (either in the case of a bad\
    \ delegation\n      path or some network or server failure) the application MUST\n\
    \      ensure that none of the records it is relying on have expired.  In\n  \
    \    the case where even a single record has expired, the application\n      is\
    \ required to start over at the beginning of the algorithm.\n   Key Format:\n\
    \      A Key is a validly constructed DNS domain-name.\n   Lookup Request:\n \
    \     In order to request a set of rules for a given Key, the client\n      issues\
    \ a request, following standard DNS rules, for NAPTR Resource\n      Records for\
    \ the given domain-name.\n   Lookup Response:\n      The response to a request\
    \ for a given Key (domain-name) will be a\n      series of NAPTR records.  The\
    \ format of a NAPTR Resource Record\n      can be found in Section 4.\n   Rule\
    \ Insertion Procedure:\n      Rules are inserted by adding new records to the\
    \ appropriate DNS\n      zone.  If a Rule produces a Key that exists in a particular\
    \ zone\n      then only the entity that has administrative control of that zone\n\
    \      can specify the Rule associated with that Key.\n   Collision Avoidance:\n\
    \      In the case where two Applications may use this Database (which is\n  \
    \    actually the case with the ENUM and URI Resolution Applications,\n      Section\
    \ 6.2), there is a chance of collision between rules where\n      two NAPTR records\
    \ appear in the same domain but they apply to more\n      than one Application.\
    \  There are three ways to avoid collisions:\n      *  create a new zone within\
    \ the domain in common that contains\n         only NAPTR records that are appropriate\
    \ for the application.\n         E.g., all URI Resolution records would exist\
    \ under\n         urires.example.com and all ENUM records would be under\n   \
    \      enum.example.com.  In the case where this is not possible due\n       \
    \  to lack of control over the upstream delegation the second\n         method\
    \ is used.\n      *  write the regular expression such that it contains enough\
    \ of\n         the Application Unique string to disambiguate it from any\n   \
    \      other.  For example, the URI Resolution Application would be\n        \
    \ able to use the scheme name on the left hand side to anchor the\n         regular\
    \ expression match to that scheme.  An ENUM specific\n         record in that\
    \ same zone would be able to anchor the left hand\n         side of the match\
    \ with the \"+\" character which is defined by\n         ENUM to be at the beginning\
    \ of every Application Unique String.\n         This way a given Application Unique\
    \ String can only match one\n         or the other record, not both.\n      *\
    \  if two Application use different Flags or Services values then\n         a\
    \ record from another Application will be ignored since it\n         doesn't apply\
    \ to the Services/Flags in question.\n"
- title: 4. NAPTR RR Format
  contents:
  - '4. NAPTR RR Format

    '
- title: 4.1 Packet Format
  contents:
  - "4.1 Packet Format\n   The packet format of the NAPTR RR is given below.  The\
    \ DNS type code\n   for NAPTR is 35.\n      The packet format for the NAPTR record\
    \ is as follows\n                                       1  1  1  1  1  1\n   \
    \      0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5\n       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \       |                     ORDER                     |\n       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \       |                   PREFERENCE                  |\n       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \       /                     FLAGS                     /\n       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \       /                   SERVICES                    /\n       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \       /                    REGEXP                     /\n       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \       /                  REPLACEMENT                  /\n       /          \
    \                                     /\n       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \   <character-string> and <domain-name> as used here are defined in RFC\n   1035\
    \ [7].\n   ORDER\n      A 16-bit unsigned integer specifying the order in which\
    \ the NAPTR\n      records MUST be processed in order to accurately represent\
    \ the\n      ordered list of Rules.  The ordering is from lowest to highest.\n\
    \      If two records have the same order value then they are considered\n   \
    \   to be the same rule and should be selected based on the\n      combination\
    \ of the Preference values and Services offered.\n   PREFERENCE\n      Although\
    \ it is called \"preference\" in deference to DNS\n      terminology, this field\
    \ is equivalent to the Priority value in the\n      DDDS Algorithm.  It is a 16-bit\
    \ unsigned integer that specifies\n      the order in which NAPTR records with\
    \ equal Order values SHOULD be\n      processed, low numbers being processed before\
    \ high numbers.  This\n      is similar to the preference field in an MX record,\
    \ and is used so\n      domain administrators can direct clients towards more\
    \ capable\n      hosts or lighter weight protocols.  A client MAY look at records\n\
    \      with higher preference values if it has a good reason to do so\n      such\
    \ as not supporting some protocol or service very well.\n      The important difference\
    \ between Order and Preference is that once\n      a match is found the client\
    \ MUST NOT consider records with a\n      different Order but they MAY process\
    \ records with the same Order\n      but different Preferences.  The only exception\
    \ to this is noted in\n      the second important Note in the DDDS algorithm specification\n\
    \      concerning allowing clients to use more complex Service\n      determination\
    \ between steps 3 and 4 in the algorithm.  Preference\n      is used to give communicate\
    \ a higher quality of service to rules\n      that are considered the same from\
    \ an authority standpoint but not\n      from a simple load balancing standpoint.\n\
    \      It is important to note that DNS contains several load balancing\n    \
    \  mechanisms and if load balancing among otherwise equal services\n      should\
    \ be needed then methods such as SRV records or multiple A\n      records should\
    \ be utilized to accomplish load balancing.\n   FLAGS\n      A <character-string>\
    \ containing flags to control aspects of the\n      rewriting and interpretation\
    \ of the fields in the record.  Flags\n      are single characters from the set\
    \ A-Z and 0-9.  The case of the\n      alphabetic characters is not significant.\
    \  The field can be empty.\n      It is up to the Application specifying how it\
    \ is using this\n      Database to define the Flags in this field.  It must define\
    \ which\n      ones are terminal and which ones are not.\n   SERVICES\n      A\
    \ <character-string> that specifies the Service Parameters\n      applicable to\
    \ this this delegation path.  It is up to the\n      Application Specification\
    \ to specify the values found in this\n      field.\n   REGEXP\n      A <character-string>\
    \ containing a substitution expression that is\n      applied to the original\
    \ string held by the client in order to\n      construct the next domain name\
    \ to lookup.  See the DDDS Algorithm\n      specification for the syntax of this\
    \ field.\n      As stated in the DDDS algorithm, The regular expressions MUST\
    \ NOT\n      be used in a cumulative fashion, that is, they should only be\n \
    \     applied to the original string held by the client, never to the\n      domain\
    \ name produced by a previous NAPTR rewrite.  The latter is\n      tempting in\
    \ some applications but experience has shown such use to\n      be extremely fault\
    \ sensitive, very error prone, and extremely\n      difficult to debug.\n   REPLACEMENT\n\
    \      A <domain-name> which is the next domain-name to query for\n      depending\
    \ on the potential values found in the flags field.  This\n      field is used\
    \ when the regular expression is a simple replacement\n      operation.  Any value\
    \ in this field MUST be a fully qualified\n      domain-name.  Name compression\
    \ is not to be used for this field.\n      This field and the REGEXP field together\
    \ make up the Substitution\n      Expression in the DDDS Algorithm.  It is simply\
    \ a historical\n      optimization specifically for DNS compression that this\
    \ field\n      exists.  The fields are also mutually exclusive.  If a record is\n\
    \      returned that has values for both fields then it is considered to\n   \
    \   be in error and SHOULD be either ignored or an error returned.\n"
- title: 4.2 Additional Information Processing
  contents:
  - "4.2 Additional Information Processing\n   Additional section processing requires\
    \ upgraded DNS servers, thus it\n   will take many years before applications can\
    \ expect to see relevant\n   records in the additional information section.\n"
- title: 4.2.1 Additional Section Processing by DNS Servers
  contents:
  - "4.2.1 Additional Section Processing by DNS Servers\n   DNS servers MAY add RRsets\
    \ to the additional information section that\n   are relevant to the answer and\
    \ have the same authenticity as the data\n   in the answer section.  Generally\
    \ this will be made up of A and SRV\n   records but the exact records depends\
    \ on the application.\n"
- title: 4.2.2 Additional Section Processing by Resolver/Applications
  contents:
  - "4.2.2 Additional Section Processing by Resolver/Applications\n   Applications\
    \ MAY inspect the Additional Information section for\n   relevant records but\
    \ Applications MUST NOT require that records of\n   any type be in the Additional\
    \ Information section of any DNS response\n   in order for clients to function.\
    \  All Applications must be capable\n   of handling responses from nameservers\
    \ that never fill in the\n   Additional Information part of a response.\n"
- title: 4.3 Master File Format
  contents:
  - "4.3 Master File Format\n   The master file format follows the standard rules\
    \ in RFC-1035.  Order\n   and preference, being 16-bit unsigned integers, shall\
    \ be an integer\n   between 0 and 65535.  The Flags and Services and Regexp fields\
    \ are\n   all quoted <character-string>s.  Since the Regexp field can contain\n\
    \   numerous backslashes and thus should be treated with care.  See\n   Section\
    \ 7 for how to correctly enter and escape the regular\n   expression.\n"
- title: 5. Application Specifications
  contents:
  - "5. Application Specifications\n   This DDDS Database is usable by any application\
    \ that makes use of the\n   DDDS algorithm.  In addition to the items required\
    \ to specify a DDDS\n   Application, an application wishing to use this Database\
    \ must also\n   define the following values:\n   o  What domain the Key that is\
    \ produced by the First Well Known Rule\n      belongs to.  Any application must\
    \ ensure that its rules do not\n      collide with rules used by another application\
    \ making use of this\n      Database.  For example, the 'foo' application might\
    \ have all of\n      its First Well Known Keys be found in the 'foo.net' zone.\n\
    \   o  What the allowed values for the Services and Protocols fields are.\n  \
    \ o  What the expected output is of the terminal rewrite rule in\n      addition\
    \ to how the Flags are actually encoded and utilized.\n"
- title: 6. Examples
  contents:
  - '6. Examples

    '
- title: 6.1 URN Example
  contents:
  - "6.1 URN Example\n   The NAPTR record was originally created for use with the\
    \ Uniform\n   Resource Name (URN) Resolver Discovery Service (RDS) [15].  This\n\
    \   example details how a particular URN would use the NAPTR record to\n   find\
    \ a resolver service that can answer questions about the URN.  See\n   [2] for\
    \ the definitive specification for this Application.\n   Consider a URN namespace\
    \ based on MIME Content-Ids (this is very\n   hypothetical so do not rely on this).\
    \  The URN might look like this:\n      urn:cid:199606121851.1@bar.example.com\n\
    \   This Application's First Well Known Rule is to extract the characters\n  \
    \ between the first and second colon.  For this URN that would be\n   'cid'. \
    \ The Application also specifies that, in order to build a\n   Database-valid\
    \ Key, the string 'urn.arpa' should be appended to the\n   result of the First\
    \ Well Known Rule.  The result is 'cid.urn.arpa'.\n   Next, the client queries\
    \ the DNS for NAPTR records for the domain-\n   name 'cid.urn.arpa'.  The result\
    \ is a single record:\n"
- title: cid.urn.arpa.
  contents:
  - "cid.urn.arpa.\n  ;;       order pref flags service        regexp           replacement\n\
    \  IN NAPTR 100   10   \"\"    \"\"  \"!^urn:cid:.+@([^\\.]+\\.)(.*)$!\\2!i\"\
    \    .\n   Since there is only one record, ordering the responses is not a\n \
    \  problem.  The replacement field is empty, so the pattern provided in\n   the\
    \ regexp field is used.  We apply that regexp to the entire URN to\n   see if\
    \ it matches, which it does.  The \\2 part of the substitution\n   expression\
    \ returns the string \"example.com\".  Since the flags field\n   is empty, the\
    \ lookup is not terminal and our next probe to DNS is for\n   more NAPTR records\
    \ where the new domain is 'example.com'.\n   Note that the rule does not extract\
    \ the full domain name from the\n   CID, instead it assumes the CID comes from\
    \ a host and extracts its\n   domain.  While all hosts, such as 'bar', could have\
    \ their very own\n   NAPTR, maintaining those records for all the machines at\
    \ a site could\n   be an intolerable burden.  Wildcards are not appropriate here\
    \ since\n   they only return results when there is no exactly matching names\n\
    \   already in the system.\n   The record returned from the query on \"example.com\"\
    \ might look like:\n"
- title: example.com.
  contents:
  - 'example.com.

    '
- title: ;;      order pref flags service           regexp replacement
  contents:
  - ';;      order pref flags service           regexp replacement

    '
- title: IN NAPTR 100  50  "a"    "z3950+N2L+N2C"     ""   cidserver.example.com.
  contents:
  - 'IN NAPTR 100  50  "a"    "z3950+N2L+N2C"     ""   cidserver.example.com.

    '
- title: IN NAPTR 100  50  "a"    "rcds+N2C"          ""   cidserver.example.com.
  contents:
  - 'IN NAPTR 100  50  "a"    "rcds+N2C"          ""   cidserver.example.com.

    '
- title: IN NAPTR 100  50  "s"    "http+N2L+N2C+N2R"  ""   www.example.com.
  contents:
  - "IN NAPTR 100  50  \"s\"    \"http+N2L+N2C+N2R\"  \"\"   www.example.com.\n  \
    \ Continuing with the example, note that the values of the order and\n   preference\
    \ fields are equal in all records, so the client is free to\n   pick any record.\
    \  The Application defines the flag 'a' to mean a\n   terminal lookup and that\
    \ the output of the rewrite will be a domain-\n   name for which an A record should\
    \ be queried.  Once the client has\n   done that, it has the following information:\
    \ the host, its IP\n   address, the protocol, and the services available via that\
    \ protocol.\n   Given these bits of information the client has enough to be able\
    \ to\n   contact that server and ask it questions about the URN.\n   Recall that\
    \ the regular expression used \\2 to extract a domain name\n   from the CID, and\
    \ \\. for matching the literal '.' characters\n   separating the domain name components.\
    \  Since '\\' is the escape\n   character, literal occurrences of a backslash\
    \ must be escaped by\n   another backslash.  For the case of the cid.urn.arpa\
    \ record above,\n   the regular expression entered into the master file should\
    \ be\n   \"!^urn:cid:.+@([^\\\\.]+\\\\.)(.*)$!\\\\2!i\".  When the client code\n\
    \   actually receives the record, the pattern will have been converted to\n  \
    \ \"!^urn:cid:.+@([^\\.]+\\.)(.*)$!\\2!i\".\n"
- title: 6.2 E164 Example
  contents:
  - "6.2 E164 Example\n   The ENUM Working Group in the IETF has specified a service\
    \ that\n   allows a telephone number to be mapped to a URI [18].  The\n   Application\
    \ Unique String for the ENUM Application is the E.164\n   telephone number with\
    \ the dashes removed.  The First Well Known Rule\n   is to remove all characters\
    \ from the the telephone number and then\n   use the entire number as the first\
    \ Key.  For example, the phone\n   number \"770-555-1212\" represented as an E.164\
    \ number would be \"+1-\n   770-555-1212\".  Converted to the Key it would be\
    \ \"17705551212\".\n   The ENUM Application at present only uses this Database.\
    \  It\n   specifies that, in order to convert the first Key into a form valid\n\
    \   for this Database, periods are inserted between each digit, the\n   entire\
    \ Key is inverted and then \"e164.arpa\" is appended to the end.\n   The above\
    \ telephone number would then read\n   \"2.1.2.1.5.5.5.0.7.7.1.e164.arpa.\". \
    \ This domain-name is then used to\n   retrieve Rewrite Rules as NAPTR records.\n\
    \   For this example telephone number we might get back the following\n   NAPTR\
    \ records:\n"
- title: $ORIGIN 2.1.2.1.5.5.5.0.7.7.1.e164.arpa.
  contents:
  - "$ORIGIN 2.1.2.1.5.5.5.0.7.7.1.e164.arpa.\n IN NAPTR 100 10 \"u\" \"sip+E2U\"\
    \  \"!^.*$!sip:information@foo.se!i\"     .\n IN NAPTR 102 10 \"u\" \"smtp+E2U\"\
    \ \"!^.*$!mailto:information@foo.se!i\"  .\n   Both the ENUM [18] and URI  Resolution\
    \ [4] Applications use the 'u'\n   flag.  This flag states that the Rule is terminal\
    \ and that the output\n   is a URI which contains the information needed to contact\
    \ that\n   telephone service.  ENUM also uses the same format for its Service\n\
    \   Parameters.  These state that the available protocols used to access\n   that\
    \ telephone's service are either the Session Initiation Protocol\n   or SMTP mail.\n"
- title: 7. Advice for DNS Administrators
  contents:
  - "7. Advice for DNS Administrators\n   Beware of regular expressions.  Not only\
    \ are they difficult to get\n   correct on their own, but there is the previously\
    \ mentioned\n   interaction with DNS.  Any backslashes in a regexp must be entered\n\
    \   twice in a zone file in order to appear once in a query response.\n   More\
    \ seriously, the need for double backslashes has probably not been\n   tested\
    \ by all implementors of DNS servers.\n   In order to mitigate zone file problems,\
    \ administrators should\n   encourage those writing rewrite rules to utilize the\
    \ 'default\n   delimiter' feature of the regular expression.  In the DDDS\n  \
    \ specification the regular expression starts with the character that\n   is to\
    \ be the delimiter.  Hence if the first character of the regular\n   expression\
    \ is an exclamation mark ('!') for example then the regular\n   expression can\
    \ usually be written with fewer backslashes.\n"
- title: 8. Notes
  contents:
  - "8. Notes\n   A client MUST process multiple NAPTR records in the order specified\n\
    \   by the \"order\" field, it MUST NOT simply use the first record that\n   provides\
    \ a known Service Parameter combination.\n   When multiple RRs have the same \"\
    order\" and all other criteria being\n   equal, the client should use the value\
    \ of the preference field to\n   select the next NAPTR to consider.  However,\
    \ because it will often be\n   the case where preferred protocols or services\
    \ exist, clients may use\n   this additional criteria to sort the records.\n \
    \  If the lookup after a rewrite fails, clients are strongly encouraged\n   to\
    \ report a failure, rather than backing up to pursue other rewrite\n   paths.\n"
- title: 9. IANA Considerations
  contents:
  - "9. IANA Considerations\n   The values for the Services and Flags fields will\
    \ be determined by\n   the Application that makes use of this DDDS Database. \
    \ Those values\n   may require a registration mechanism and thus may need some\
    \ IANA\n   resources.  This specification by itself does not.\n"
- title: 10. Security Considerations
  contents:
  - "10. Security Considerations\n   The NAPTR record, like any other DNS record,\
    \ can be signed and\n   validated according to the procedures specified in DNSSEC.\n\
    \   This Database makes identifiers from other namespaces subject to the\n   same\
    \ attacks as normal domain names.  Since they have not been easily\n   resolvable\
    \ before, this may or may not be considered a problem.\n   Regular expressions\
    \ should be checked for sanity, not blindly passed\n   to something like PERL\
    \ since arbitrary code can be included and\n   subsequently processed.\n"
- title: References
  contents:
  - "References\n   [1] Mealling, M., \"Dynamic Delegation Discovery System (DDDS)\
    \ Part\n       One: The Comprehensive DDDS\", RFC 3401, October 2002.\n   [2]\
    \ Mealling, M., \"Dynamic Delegation Discovery System (DDDS) Part\n       Two:\
    \ The Algorithm\", RFC 3402, October 2002.\n   [3] Mealling, M., \"Dynamic Delegation\
    \ Discovery System (DDDS) Part\n       Three: The Domain Name System (DNS) Database\"\
    , RFC 3403, October\n       2002.\n   [4] Mealling, M., \"Dynamic Delegation Discovery\
    \ System (DDDS) Part\n       Four: The Uniform Resource Identifiers (URI) Resolution\n\
    \       Application\", RFC 3404, October 2002.\n   [5] Mealling, M., \"Dynamic\
    \ Delegation Discovery System (DDDS) Part\n       Five: URI.ARPA Assignment Procedures\"\
    , RFC 3405, October 2002.\n   [6] Bradner, S., \"Key words for use in RFCs to\
    \ Indicate Requirement\n       Levels\", BCP 14, RFC 2119, March 1997.\n   [7]\
    \ Mockapetris, P., \"Domain names - implementation and\n       specification\"\
    , STD 13, RFC 1035, November 1987.\n   [8] Mockapetris, P., \"Domain names - concepts\
    \ and facilities\", STD\n       13, RFC 1034, November 1987.\n   [9] Gulbrandsen,\
    \ A., Vixie, P. and L. Esibov, \"A DNS RR for\n       specifying the location\
    \ of services (DNS SRV)\", RFC 2782,\n       February 2000.\n   [10] Crocker,\
    \ D., \"Augmented BNF for Syntax Specifications: ABNF\",\n        RFC 2234, November\
    \ 1997.\n   [11] Daniel, R., \"A Trivial Convention for using HTTP in URN\n  \
    \      Resolution\", RFC 2169, June 1997.\n   [12] IEEE, \"IEEE Standard for Information\
    \ Technology - Portable\n        Operating System Interface (POSIX) - Part 2:\
    \ Shell and Utilities\n        (Vol. 1)\", IEEE Std 1003.2-1992, January 1993.\n\
    \   [13] Berners-Lee, T., Fielding, R. and L. Masinter, \"Uniform Resource\n \
    \       Identifiers (URI): Generic Syntax\", RFC 2396, August 1998.\n   [14] Moats,\
    \ R., \"URN Syntax\", RFC 2141, May 1997.\n   [15] Sollins, K., \"Architectural\
    \ Principles of Uniform Resource Name\n        Resolution\", RFC 2276, January\
    \ 1998.\n   [16] Daniel, R. and M. Mealling, \"Resolution of Uniform Resource\n\
    \        Identifiers using the Domain Name System\", RFC 2168, June 1997.\n  \
    \ [17] Yergeau, F., \"UTF-8, a transformation format of ISO 10646\", RFC\n   \
    \     2279, January 1998.\n   [18] Faltstrom, P., \"E.164 number and DNS\", RFC\
    \ 2916, September 2000.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Michael Mealling\n   VeriSign\n   21345 Ridgetop Circle\n\
    \   Sterling, VA  20166\n   US\n   EMail: michael@neonym.net\n   URI:   http://www.verisignlabs.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2002).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
