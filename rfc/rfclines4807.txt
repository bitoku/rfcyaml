Abstract This document defines a Structure of Management Information Version 2 (SMIv2)
Management Information Base (MIB) module for configuring the security policy database of a device implementing the IPsec protocol.
The policy based packet filtering and the corresponding execution of actions described in this document are of a more general nature than for IPsec configuration alone, such as for configuration of a firewall.
This MIB module is designed to be extensible with other enterprise or standards based defined packet filters and actions.
This document defines a MIB module for configuration of an IPsec security policy database (SPD).
The IPsec model this MIB is designed to configure is based on the "IPsec Configuration Policy Model" (IPCP)
The IPCP's IPsec model is, in turn, derived from the Distributed Management Task Force's (DMTF)
and from the IPsec model specified in RFC 2401 [RFC2401].
RFC 2401 has been updated by RFC 4301 [RFC4301], but this implementation is based on RFC 2401.
The policy based packet filtering and the corresponding execution of actions configured by this MIB is of a more general nature than for IPsec configuration only, such as for configuration of a firewall.
It is possible to extend this MIB module and add other packet transforming actions that are performed conditionally on an interface's network traffic.
The IPsec  and IKE specific actions are as documented in [IPsec ACTION]
and [IKE ACTION], respectively, and are not documented in this document.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119
The Internet Standard Management Framework
For a detailed overview of the documents that describe the current Internet Standard Management Framework, please refer to section 7 of RFC 3410
[RFC3410] Managed objects are accessed via a virtual information store, termed the Management Information Base or MIB.
MIB objects are generally accessed through the Simple Network Management Protocol (SNMP).
Objects in the MIB are defined using the mechanisms defined in the Structure of Management Information (SMI).
This memo specifies a MIB module that is compliant to the SMIv2, which is described in STD 58, RFC 2578 [RFC2578], STD 58
, RFC 2579 [RFC2579] and STD 58, RFC 2580
Relationship to the DMTF Policy Model
The Distributed Management Task Force (DMTF) has created an object oriented model of IPsec policy information known as the IPsec Policy Model White Paper [IPPMWP].
The "IPsec Configuration Policy Model" (IPCP)
[RFC3585] is based, in large part, on the DMTF's IPsec policy model and on RFC 2401
The IPCP document describes a model for configuring IPsec.
This MIB module is a task specific derivation (i.e., an SMIv2 instantiation) of the IPCP's IPsec configuration model for use with Simple Network Management Protocol version 3 (SNMPv3).
The high level areas where this MIB module diverges from the IPCP model are:  Policies, Groups, Conditions, and some levels of Actions are generically named.
In other words, IPsec specific prefixes like "SA" (Security Association), or "IPsec", are not used.
This naming convention is used because packet classification and the matching of conditions to actions is more general than IPsec.
The tables in this document can possibly be reused by other packet  transforming actions, which need to conditionally act on packets matching filters.
Filters are implemented in a more generic and scalable manner, rather than enforcing the condition/filtering pairing of the IPCP and its restrictions upon the user.
This MIB module offers a compound filter object providing greater flexibility for complex filters than the IPCP.
The MIB module is modularized into several different parts: rules, filters, and actions.
The rules section associates endpoints and groups of rules, and consists of the spdEndpointToGroupTable, spdGroupContentsTable, and the spdRuleDefinitionTable.
Each row of the spdRuleDefinitionTable connects a filter to an action.
It should also be noted that by referencing the spdCompoundFilterTable, the spdRuleDefinitionTable's filter column can indicate a set of filters to be processed.
Likewise, by referencing the spdCompoundActionTable, the spdRuleDefinitionTable's action column can indicate multiple actions to be executed.
This MIB is structured to allow for reuse through the future creation of extension tables that provide additional filters and/or actions.
In fact, the companion documents to this one ([IPsec ACTION] and [IKE ACTION]) do just that and define IPsec  and IKE specific actions to be used within this SPD configuration MIB.
: it is expected that, in order to function properly, extension action MIBs may impose additional limitations on the objects in this MIB and how they can be used with the extended actions.
An extension action may only support a subset of the configuration options available in this MIB.
The filter section of the MIB module is composed of the different types of filters in the Policy Model.
It is made up of the spdTrueFilter, spdCompoundFilterTable, spdSubfiltersTable spdIpHeaderFilterTable, spdIpOffsetFilterTable, spdTimeFilterTable, spdIpsoHeaderFilterTable.
The action section of this MIB module contains only the simple static actions required for the firewall processing that an IPsec SPD implementation requires (e.g., accept, drop, log, etc.).
The companion documents of this document define the complex actions necessary for IPsec and IKE negotiations.
As may have been noticed above, the MIB uses recursion in a similar manner in several different places.
In particular, the spdGroupContentsTable, the spdCompoundFilterTable / spdSubfiltersTable combination, and the spdCompoundActionTable / spdSubactionsTable combination can reference themselves.
In the case of the spdGroupContentsTable, a row can indicate a rule (i.e., a row in the spdRuleDefinitionTable) or a group (i.e., another set of one or more rows in the spdGroupContentsTable).
This way, a group can contain a set of rules and sub groups.
Sub groups are just other groups defined in the spdGroupContentsTable.
There is no inherent MIB limit to the depth of nesting of groups.
combination and spdCompoundActionTable / spdSubactionsTable combination are designed almost identically, with one being for filters and the other for actions, respectively.
The following descriptions for the compound filter tables can be directly applied to the compound action tables.
The combination of the tables spdCompoundFilterTable and spdSubfiltersTable allow a user to create a set of filters that can be referenced from any table as a single filter.
A row in the spdCompoundFilterTable has the basic configuration information for the compound filter.
The index of spdCompoundFilterTable, spdCompFiltname, is also used as a partial index to reference a set of ordered rows in the spdSubfiltersTable.
Each row in spdSubfiltersTable points to a row in another filter table.
In this way, the set of rows in spdSubFiltersTable with a matching spdCompFiltName, together with the row in spdCompoundFilterTable indexed by spdCompFiltName, create a compound filter.
Note that it is possible for a row in the spdSubfiltersTable to point to a row in the spdCompoundFilterTable.
This recursion allows the creation of a filter set that includes other filter sets within it.
There is no inherent MIB limit to the nesting of compound filters within compound filters.
In order to use the tables contained in this document, a general understanding of firewall processing is helpful.
The processing of the security policy database (SPD) involves applying a set of SPD rules to an interface on a device.
The given set of rules to apply to any given interface is defined within the spdEndpointToGroupTable table.
This table maps a given interface to a group of rules.
In this table, the interface itself is specified using its assigned address.
There is also one group of rules per direction (ingress and egress).
Notational Conventions Notes about the following example operations: 1.
All the example operations in the following section make use of default values for all columns not listed.
The operations and column values given in the examples are the minimal SNMP Varbinds that must be sent to create a row.
The example operations are formatted such that a row (i.e., the table's Entry object) is operated on by using the indexes to that row and the column values for that row.
Below is a generic example of the notation used in the following section's examples of this MIB's usage.
This example indicates that the MIB row to be set is the row with the index values of value1 for index1, and value2 for index2.
Within this row, column1 is set to column value1, and column2 is set to column value2.
The below is a specific example of the notation used in the following section's examples of this MIB's usage.
This example represents the status column of a row in the IP  MIB::ipAddressTable table being set to deprecated.
The index values for this row are IPv4 and 192.0.2.1.
The example notation would look like the following:
Implementing an Example SPD Policy
As an example, let us define the following administrative policy: On the network interface with IP address
192.0.2.1, all traffic from host 192.0.2.6 will be dropped and all other traffic will be accepted.
This policy is enforced by setting the values in the MIB to do the following:  create a filter for 192.0.2.6  create a rule that connects the 192.0.2.6 filter to a packet drop action  create a rule that always accepts packets  group these rules together in the proper order so that the 192.0.2.6 drop rule is checked first.
connect this group of rules to the 192.0.2.1 interface
The first step to do this is creating the filter for the IPv4 address
Next, a rule is created to connect the above "192.0.2.6" filter to an action to "drop" the packet, as follows:
createAndGo Next, a rule is created that accepts all packets:
createAndGo Next, these two rules are grouped together.
Rule groups attached to an interface are processed one row at a time.
The rows are processed from lowest to highest spdGroupContPriority value.
Because the row that references the "accept all" rule should be processed last, it is given the higher spdGroupContPriority value.
createAndGo Finally, this group of rules is connected to the 192.0.2.1 interface as follows:
This completes the necessary steps to implement the policy.
Once all of these rules have been applied, the policy should take effect.
The following MIB Module imports from: [RFC2578], [RFC2579], [RFC2580], [RFC2863], [RFC3289], [RFC3411], and [RFC4001].
It also uses definitions from [RFC1108], [RFC3060], and [RFC3629].
TEXTUAL CONVENTION, RowStatus, TruthValue, TimeStamp, StorageType, VariablePointer FROM SNMPv2 TC
MODULE COMPLIANCE, OBJECT GROUP, NOTIFICATION GROUP FROM SNMPv2
MIB   [RFC2863] diffServMIBMultiFieldClfrGroup, IfDirection, diffServMultiFieldClfrNextFree FROM DIFFSERV
MIB   [RFC3289] InetAddressType, InetAddress FROM INET ADDRESS
Phone:  1 530 902 3131 Email:
Inc. P.O. Box 382 Davis, CA  95617
Phone:  1 530 792 1913
Robert Story Revelstone Software PO Box 1812 Tucker, GA 30085 Phone:
ARO 4300 S. Miami Blvd.
This MIB module defines configuration objects for managing IPsec Security Policies.
In general, this MIB can be implemented anywhere IPsec security services exist (e.g., bump in the wire, host, gateway, firewall, router, etc.).
This version of this MIB module is part of RFC 4807; see the RFC itself for full legal notices."
"The SpdBooleanOperator operator is used to specify whether sub components in a decision making process are ANDed or ORed together to decide if the resulting expression is true or false."
"The SpdAdminStatus is used to specify the administrative status of an object.
Objects that are disabled MUST NOT be used by the packet processing engine."
DISPLAY HINT "d" STATUS   current DESCRIPTION "SpdIPPacketLogging specifies whether an audit message SHOULD be logged if a packet is passed through a Security Association (SA) and if some of that packet is included in the log event.
A value of ' 1' indicates no logging.
A value of '0' or greater indicates that logging SHOULD be done and indicates the number of bytes starting at the beginning of the packet to place in the log.
Values greater than the size of the packet being processed indicate that the entire packet SHOULD be sent.
Examples: ' 1' no logging '0'  log but do not include any of the packet in the log '20' log and include the first 20 bytes of the packet in the log.
This property identifies an overall range of calendar dates and time.
In a boolean context, a value within this time range, inclusive, is considered true.
This information is encoded as an octet string using the UTF 8 transformation format described in STD 63, RFC 3629.
It uses the format suggested in RFC 3060.
An octet string represents a start date and time and an end date and time.
The first 'yyyymmddThhmmss' sub string indicates the start date and time.
The second 'yyyymmddThhmmss' sub string indicates the end date and time.
The character 'T' within these sub strings indicates the beginning of the time portion of each sub string.
The end date and time MUST be subsequent to the start date and time.
There are also two allowed substitutes for a 'yyyymmddThhmmss' sub string: one for the start date and time, and one for the end date and time.
If the start date and time are replaced with the string 'THISANDPRIOR', this sub string would indicate the current date and time and the previous dates and time.
If the end date and time are replaced with the string 'THISANDFUTURE', this sub string would indicate the current date and time and the subsequent dates and time.
Any of the following SHOULD be considered a 'wrongValue' error:
Setting a value with the end date and time earlier than or equal to the start date and time.
Setting the start date and time to 'THISANDFUTURE'.
Setting the end date and time to 'THISANDPRIOR'." REFERENCE "RFC 3060, 3269" SYNTAX
MAX ACCESS  read write STATUS
"This object indicates the global system policy group that is to be applied on ingress packets (i.e., arriving at an interface from a network) when a given endpoint does not contain a policy definition in the spdEndpointToGroupTable.
Its value can be used as an index into the spdGroupContentsTable to retrieve a list of policies.
A zero length string indicates that no system wide policy exists and the default policy of 'drop' SHOULD be executed for ingress packets until one is imposed by either this object or by the endpoint processing a given packet.
MAX ACCESS  read write STATUS
"This object indicates the policy group containing the global system policy that is to be applied on egress packets (i.e., packets leaving an interface and entering a network) when a given endpoint does not contain a policy definition in the spdEndpointToGroupTable.
Its value can be used as an index into the spdGroupContentsTable to retrieve a list of policies.
A zero length string indicates that no system wide policy exists and the default policy of 'drop' SHOULD be executed for egress packets until one is imposed by either this object or by the endpoint processing a given packet.
"This table maps policies (groupings) onto an endpoint (interface).
A policy group assigned to an endpoint is then used to control access to the network traffic passing through that endpoint.
If an endpoint has been configured with a policy group and no rule within that policy group matches that packet, the default action in this case SHALL be to drop the packet.
If no policy group has been assigned to an endpoint, then the policy group specified by spdIngressPolicyGroupName MUST be used on traffic inbound from the network through that endpoint, and the policy group specified by spdEgressPolicyGroupName MUST be used for traffic outbound to the network through that endpoint."
} spdEndpointToGroupEntry OBJECT TYPE SYNTAX
A mapping assigning a policy group to an endpoint.
"This object indicates which direction of packets crossing the interface are associated with which spdEndGroupName object.
Ingress packets, or packets into the device match when this value is inbound(1).
Egress packets or packets out of the device match when this value is outbound(2).
"This value matches the IF MIB's ifTable's ifIndex column and indicates the interface associated with a given endpoint.
This object can be used to uniquely identify an endpoint that a set of policy groups are applied to."
"The policy group name to apply at this endpoint.
The value of the spdEndGroupName object is then used as an index into the spdGroupContentsTable to come up with a list of rules that MUST be applied at this endpoint."
"The value of sysUpTime when this row was last modified or created either through SNMP SETs or by some other external means.
If this row has not been modified since the last re initialization of the network management subsystem, this object SHOULD have a zero value."
"The storage type for this row.
Rows in this table that were created through an external process MAY have a storage type of readOnly or permanent.
For a storage type of permanent, none of the columns have to be writable."
"This object indicates the conceptual status of this row.
The value of this object has no effect on whether other objects in this conceptual row can be modified.
This object is considered 'notReady' and MUST NOT be set to active until one or more active rows exist within the spdGroupContentsTable for the group referenced by the spdEndGroupName object."
"This table contains a list of rules and/or subgroups contained within a given policy group.
For a given value of spdGroupContName, the set of rows sharing that value forms a 'group'.
The rows in a group MUST be processed according to the value of the spdGroupContPriority object in each row.
The processing MUST be executed starting with the lowest value of spdGroupContPriority and in ascending order thereafter.
If an action is executed as the result of the processing of a row in a group, the processing of further rows in that group MUST stop.
Iterating to the next policy group row by finding the next largest spdGroupContPriority object SHALL only be done if no actions were run while processing the current row for a given packet."
"Defines a given sub component within a policy group.
A sub component is either a rule or another group as indicated by spdGroupContComponentType and referenced by spdGroupContComponentName.
"The administrative name of the group associated with this row.
A 'group' is formed by all the rows in this table that have the same value of this object."
"The priority (sequence number) of the sub component in a group that this row represents.
This value indicates the order that each row of this table MUST be processed from low to high.
For example, a row with a priority of 0 is processed before a row with a priority of 1, a 1 before a 2, etc."
spdGroupContFilter points to a filter that is evaluated to determine whether the spdGroupContComponentName within this row is exercised.
Managers can use this object to classify groups of rules, or subgroups, together in order to achieve a greater degree of control and optimization over the execution order of the items within the group.
If the filter evaluates to false, the rule or subgroup will be skipped and the next rule or subgroup will be evaluated instead.
This value can be used to indicate a scalar or row in a table.
When indicating a row in a table, this value MUST point to the first column instance in that row.
An example usage of this object would be to limit a group of rules to executing only when the IP packet being processed is designated to be processed by IKE.
This effectively creates a group of IKE specific rules.
The following tables and scalars can be pointed to by this column.
All but diffServMultiFieldClfrTable are defined in this MIB: diffServMultiFieldClfrTable spdIpOffsetFilterTable spdTimeFilterTable spdCompoundFilterTable spdTrueFilter
spdIpsoHeaderFilterTable Implementations MAY choose to provide support for other filter tables or scalars.
If this column is set to a VariablePointer value, which references a non existent row in an otherwise supported table, the inconsistentName exception MUST be returned.
If the table or scalar pointed to by the VariablePointer is not supported at all, then an inconsistentValue exception MUST be returned.
If, during packet processing, a row in this table is applied to a packet and the value of this column in that row references a non existent or non supported object, the packet MUST be dropped."
"Indicates whether the spdGroupContComponentName object is the name of another group defined within the spdGroupContentsTable or is the name of a rule defined within the spdRuleDefinitionTable.
"The name of the policy rule or subgroup contained within this row, as indicated by the spdGroupContComponentType object."
"The value of sysUpTime when this row was last modified or created either through SNMP SETs or by some other external means.
If this row has not been modified since the last re initialization of the network management subsystem, this object SHOULD have a zero value."
"The storage type for this row.
Rows in this table that were created through an external process MAY have a storage type of readOnly or permanent.
For a storage type of permanent, none of the columns have to be writable."
"This object indicates the conceptual status of this row.
The value of this object has no effect on whether other objects in this conceptual row can be modified.
This object MUST NOT be set to active until the row to which the spdGroupContComponentName points to exists and is active.
If active, this object MUST remain active unless one of the following two conditions are met: I.  No active row in spdEndpointToGroupTable exists that references this row's group (i.e., indicate this row's spdGroupContName).
Or at least one other active row in this table has a matching spdGroupContName.
If neither condition is met, an attempt to set this row to something other than active MUST result in an inconsistentValue error."
"This table defines a rule by associating a filter or a set of filters to an action to be executed."
A row defining a particular rule definition.
A rule definition binds a filter pointer to an action pointer.
spdRuleDefName is the administratively assigned name of the rule referred to by the spdGroupContComponentName object."
This field MAY be used for administrative tracking purposes.
The action will only execute if the filter referenced by this object evaluates to TRUE after first applying any negation required by the spdRuleDefFilterNegated object.
The following tables and scalars can be pointed to by this column.
All but diffServMultiFieldClfrTable are defined in this MIB.
Implementations MAY choose to provide support for other filter tables or scalars as well: diffServMultiFieldClfrTable spdIpOffsetFilterTable
If this column is set to a VariablePointer value, which references a non existent row in an otherwise supported table, the inconsistentName exception MUST be returned.
If the table or scalar pointed to by the VariablePointer is not supported at all, then an inconsistentValue exception MUST be returned.
If, during packet processing, this column has a value that references a non existent or non supported object, the packet MUST be dropped."
"spdRuleDefFilterNegated specifies whether or not the results of the filter referenced by the spdRuleDefFilter object is negated."
"This column points to the action to be taken.
It MAY, but is not limited to, point to a row in one of the following tables:
It MAY also point to one of the scalar objects beneath spdStaticActions.
If this object is set to a pointer to a row in an unsupported (or unknown) table, an inconsistentValue error MUST be returned.
If this object is set to point to a non existent row in an otherwise supported table, an inconsistentName error MUST be returned.
If, during packet processing, this column has a value that references a non existent or non supported object, the packet MUST be dropped."
"Indicates whether the current rule definition is considered active.
If the value is enabled, the rule MUST be evaluated when processing packets.
If the value is disabled, the packet processing MUST continue as if this rule's filter had effectively failed."
"The value of sysUpTime when this row was last modified or created either through SNMP SETs or by some other external means.
If this row has not been modified since the last re initialization of the network management subsystem, this object SHOULD have a zero value."
"The storage type for this row.
Rows in this table that were created through an external process MAY have a storage type of readOnly or permanent.
For a storage type of permanent, none of the columns have to be writable."
"This object indicates the conceptual status of this row.
The value of this object has no effect on whether other objects in this conceptual row can be modified.
This object MUST NOT be set to active until the containing conditions, filters, and actions have been defined.
Once active, it MUST remain active until no active policyGroupContents entries are referencing it.
A failed attempt to do so MUST return an inconsistentValue error."
"A table defining compound filters and their associated parameters.
A row in this table can be pointed to by a spdRuleDefFilter object."
An entry in the spdCompoundFilterTable.
Each entry in this table represents a compound filter.
A filter defined by this table is considered to have a TRUE return value if and only if: spdCompFiltLogicType is AND and all of the sub filters associated with it, as defined in the spdSubfiltersTable, are all true themselves (after applying any required negation, as defined by the ficFilterIsNegated object).
spdCompFiltLogicType is OR and at least one of the sub filters associated with it, as defined in the spdSubfiltersTable, is true itself (after applying any required negation, as defined by the ficFilterIsNegated object.
current DESCRIPTION "A user definable string.
This value is used as an index into this table."
{ spdCompoundFilterEntry 1 } spdCompFiltDescription OBJECT TYPE SYNTAX
This field MAY be used for your administrative tracking purposes.
"Indicates whether the sub component filters of this compound filter are functionally ANDed or ORed together.
"The value of sysUpTime when this row was last modified or created either through SNMP SETs or by some other external means.
If this row has not been modified since the last re initialization of the network management subsystem, this object SHOULD have a zero value."
"The storage type for this row.
Rows in this table that were created through an external process MAY have a storage type of readOnly or permanent.
For a storage type of permanent, none of the columns have to be writable."
"This object indicates the conceptual status of this row.
The value of this object has no effect on whether other objects in this conceptual row can be modified.
Once active, it MUST NOT have its value changed if any active rows in the spdRuleDefinitionTable are currently pointing at this row."
"This table defines a list of filters contained within a given compound filter defined in the spdCompoundFilterTable."
An entry in the spdSubfiltersTable.
There is an entry in this table for each sub filter of all compound filters present in the spdCompoundFilterTable.
"The priority of a given filter within a compound filter.
The order of execution is from lowest to highest priority value (i.e., priority 0 before priority 1, 1 before 2, etc.).
Implementations MAY choose to follow this ordering, as set by the manager that created the rows.
This can allow a manager to intelligently construct filter lists such that faster filters are evaluated first."
"The OID of the contained filter.
The value of this object is a VariablePointer that references the filter to be included in this compound filter.
The following tables and scalars can be pointed to by this column.
All but diffServMultiFieldClfrTable are defined in this MIB.
Implementations MAY choose to provide support for other filter tables or scalars as well: diffServMultiFieldClfrTable
If this column is set to a VariablePointer value that references a non existent row in an otherwise supported table, the inconsistentName exception MUST be returned.
If the table or scalar pointed to by the VariablePointer is not supported at all, then an inconsistentValue exception MUST be returned.
If, during packet processing, this column has a value that references a non existent or non supported object, the packet MUST be dropped."
"Indicates whether or not the result of applying this sub filter is negated.
"The value of sysUpTime when this row was last modified or created either through SNMP SETs or by some other external means.
If this row has not been modified since the last re initialization of the network management subsystem, this object SHOULD have a zero value."
"The storage type for this row.
Rows in this table that were created through an external process MAY have a storage type of readOnly or permanent.
For a storage type of permanent, none of the columns have to be writable."
5 } spdSubFiltRowStatus OBJECT TYPE SYNTAX
"This object indicates the conceptual status of this row.
The value of this object has no effect on whether other objects in this conceptual row can be modified.
This object cannot be made active until a filter referenced by the spdSubFiltSubfilter object is both defined and active.
An attempt to do so MUST result in an inconsistentValue error.
If active, this object MUST remain active unless one of the following two conditions are met:
I.  No active row in the SpdCompoundFilterTable exists that has a matching spdCompFiltName.
Or, at least one other active row in this table has a matching spdCompFiltName.
If neither condition is met, an attempt to set this row to something other than active MUST result in an inconsistentValue error."
"This scalar indicates a (automatic) true result for a filter.
That is, this is a filter that is always true; it is useful for adding as a default filter for a default action or a set of actions."
SEQUENCE OF SpdIpOffsetFilterEntry MAX ACCESS
"This table contains a list of filter definitions to be used within the spdRuleDefinitionTable or the spdSubfiltersTable.
This type of filter is used to compare an administrator specified octet string to the octets at a particular location in a packet."
A definition of a particular filter.
"The administrative name for this filter."
"This is the byte offset from the front of the entire IP packet where the value or arithmetic comparison is done.
A value of '0' indicates the first byte of the packet header.
If this value is greater than the length of the packet, the filter represented by this row should be considered to fail."
This defines the various tests that are used when evaluating a given filter.
The various tests definable in this table are as follows:
Tests if the OCTET STRING, 'spdIpOffFiltValue', matches a value in the packet starting at the given offset in the packet and comparing the entire OCTET STRING of 'spdIpOffFiltValue'.
Any values compared this way are assumed to be unsigned integer values in network byte order of the same length as 'spdIpOffFiltValue'.
: Tests if the OCTET STRING, 'spdIpOffFiltValue', does not match a value in the packet starting at the given offset in the packet and comparing to the entire OCTET STRING of 'spdIpOffFiltValue'.
Any values compared this way are assumed to be unsigned integer values in network byte order of the same length as 'spdIpOffFiltValue'.
the value starting at the given offset within the packet.
The value in the packet is assumed to be an unsigned integer in network byte order of the same length as 'spdIpOffFiltValue'.
the value starting at the given offset within the packet.
The value in the packet is assumed to be an unsigned integer in network byte order of the same length as 'spdIpOffFiltValue'.
the value starting at the given offset within the packet.
The value in the packet is assumed to be an unsigned integer in network byte order of the same length as 'spdIpOffFiltValue'.
the value starting at the given offset within the packet.
The value in the packet is assumed to be an unsigned integer in network byte order of the same length as 'spdIpOffFiltValue'."
spdIpOffFiltValue is used for match comparisons of a packet at spdIpOffFiltOffset."
"The value of sysUpTime when this row was last modified or created either through SNMP SETs or by some other external means.
If this row has not been modified since the last re initialization of the network management subsystem, this object SHOULD have a zero value."
"The storage type for this row.
Rows in this table that were created through an external process MAY have a storage type of readOnly or permanent.
For a storage type of permanent, none of the columns have to be writable."
} spdIpOffFiltRowStatus OBJECT TYPE SYNTAX
"This object indicates the conceptual status of this row.
The value of this object has no effect on whether other objects in this conceptual row can be modified.
If active, this object MUST remain active if it is referenced by an active row in another table.
An attempt to set it to anything other than active while it is referenced by an active row in another table MUST result in an inconsistentValue error."
Time/scheduling filter table   spdTimeFilterTable OBJECT
"Defines a table of filters that can be used to effectively enable or disable policies based on a valid time range."
A row describing a given time frame for which a policy is filtered on to activate or deactivate the rule.
If all the column objects in a row are true for the current time, the row evaluates as 'true'.
More explicitly, the time matching column objects in a row MUST be logically ANDed together to form the boolean true/false for the row.
current DESCRIPTION "An administratively assigned name for this filter."
The valid time period for this filter.
This column is considered 'true' if the current time is within the range of this object.
, june(5), july(6), august(7), september(8), october(9), november(10), december(11) }
This column evaluates to 'true' if the current month's bit is set.
It is a sequence of 64 BITS, where each BIT represents a corresponding day of the month in forward or reverse order.
Starting from the left most bit, the first 31 bits identify the day of the month, counting from the beginning of the month.
The following 31 bits (bits 32 62) indicate the day of the month, counting from the end of the month.
For months with fewer than 31 days, the bits that correspond to the non existent days of that month are ignored (e.g., for non leap year Februarys, bits 29 31 and 60 62 are ignored).
This column evaluates to 'true' if the current day of the month's bit is set.
For example, a value of 0X'80 00 00
00' indicates that this column evaluates to true on the first and last days of the month.
The last two bits in the string MUST be zero.
BITS { sunday(0), monday(1), tuesday(2), wednesday(3), thursday(4), friday(5), saturday(6)
This column evaluates to 'true' if the current day of the week's bit is set.
"Indicates the start and end time of the day for which this filter evaluates to true.
The date portions of the spdTimePeriod TC are ignored for purposes of evaluating this mask, and only the time specific portions are used.
This column evaluates to 'true' if the current time of day is within the range of the start and end times of the day indicated by this object.
"The value of sysUpTime when this row was last modified or created either through SNMP SETs or by some other external means.
If this row has not been modified since the last re initialization of the network management subsystem, this object SHOULD have a zero value."
"The storage type for this row.
Rows in this table that were created through an external process MAY have a storage type of readOnly or permanent.
For a storage type of permanent, none of the columns have to be writable."
"This object indicates the conceptual status of this row.
The value of this object has no effect on whether other objects in this conceptual row can be modified.
If active, this object MUST remain active if it is referenced by an active row in another table.
An attempt to set it to anything other than active while it is referenced by an active row in another table MUST result in an inconsistentValue error."
SEQUENCE OF SpdIpsoHeaderFilterEntry MAX ACCESS
"This table contains a list of IPSO header filter definitions to be used within the spdRuleDefinitionTable or the spdSubfiltersTable.
IPSO headers and their values are described in RFC 1108.
A definition of a particular filter.
"The administrative name for this filter."
"This object indicates which of the IPSO header field a packet is filtered on for this row.
If this object is set to classification(0), the spdIpsoHeadFiltClassification object indicates how the packet is filtered.
If this object is set to protectionAuthority(1), the spdIpsoHeadFiltProtectionAuth object indicates how the packet is filtered."
"This object indicates the IPSO classification header field value that the packet MUST have for this row to evaluate to 'true'.
The values of these enumerations are defined by RFC 1108.
"This object indicates the IPSO protection authority header field value that the packet MUST have for this row to evaluate to 'true'.
The values of these enumerations are defined by RFC 1108.
"The value of sysUpTime when this row was last modified or created either through SNMP SETs or by some other external means.
If this row has not been modified since the last re initialization of the network management subsystem, this object SHOULD have a zero value."
"The storage type for this row.
Rows in this table that were created through an external process MAY have a storage type of readOnly or permanent.
For a storage type of permanent, none of the columns have to be writable."
"This object indicates the conceptual status of this row.
The value of this object has no effect on whether other objects in this conceptual row can be modified.
However, this object MUST NOT be set to active if the requirements of the spdIpsoHeadFiltType object are not met.
Specifically, if the spdIpsoHeadFiltType bit for classification(0) is set, the spdIpsoHeadFiltClassification column MUST have a valid value for the row status to be set to active.
If the spdIpsoHeadFiltType bit for protectionAuthority(1) is set, the spdIpsoHeadFiltProtectionAuth column MUST have a valid value for the row status to be set to active.
If active, this object MUST remain active if it is referenced by an active row in another table.
An attempt to set it to anything other than active while it is referenced by an active row in another table MUST result in an inconsistentValue error."
current DESCRIPTION "Table used to allow multiple actions to be associated with a rule.
It uses the spdSubactionsTable to do this.
The rows from spdSubactionsTable that are partially indexed by spdCompActName form the set of compound actions to be performed.
The spdCompActExecutionStrategy column in this table indicates how those actions are processed."
current DESCRIPTION "A row in the spdCompoundActionTable.
"This is an administratively assigned name of this compound action."
"This object indicates how the sub actions are executed based on the success of the actions as they finish executing.
This parent action is always considered to have acted successfully.
doUntilSuccess  run each sub action until one succeeds, at which point stop processing the sub actions within this parent compound action.
If one of the sub actions did execute successfully, this parent action is also considered to have executed successfully.
run each sub action until one fails, at which point stop processing the sub actions within this compound action.
If any sub action fails, the result of this parent action is considered to have failed."
{ spdCompoundActionEntry 2 } spdCompActLastChanged OBJECT
"The value of sysUpTime when this row was last modified or created either through SNMP SETs or by some other external means.
If this row has not been modified since the last re initialization of the network management subsystem, this object SHOULD have a zero value."
"The storage type for this row.
Rows in this table that were created through an external process MAY have a storage type of readOnly or permanent.
For a storage type of permanent, none of the columns have to be writable."
"This object indicates the conceptual status of this row.
The value of this object has no effect on whether other objects in this conceptual row can be modified.
Once a row in the spdCompoundActionTable has been made active, this object MUST NOT be set to destroy without first destroying all the contained rows listed in the spdSubactionsTable."
"This table contains a list of the sub actions within a given compound action.
Compound actions executing these actions MUST execute them in series based on the spdSubActPriority value, with the lowest value executing first."
current DESCRIPTION "A row containing a reference to a given compound action sub action.
"The priority of a given sub action within a compound action.
The order in which sub actions MUST be executed are based on the value from this column, with the lowest numeric value executing first (i.e., priority 0 before priority 1, 1 before 2, etc.)."
"This column points to the action to be taken.
It MAY, but is not limited to, point to a row in one of the following tables:
It MAY also point to one of the scalar objects beneath spdStaticActions.
If this object is set to a pointer to a row in an unsupported (or unknown) table, an inconsistentValue error MUST be returned.
If this object is set to point to a non existent row in an otherwise supported table, an inconsistentName error MUST be returned.
If, during packet processing, this column has a value that references a non existent or non supported object, the packet MUST be dropped."
"The value of sysUpTime when this row was last modified or created either through SNMP SETs or by some other external means.
If this row has not been modified since the last re initialization of the network management subsystem, this object SHOULD have a zero value."
"The storage type for this row.
Rows in this table that were created through an external process MAY have a storage type of readOnly or permanent.
For a storage type of permanent, none of the columns have to be writable."
"This object indicates the conceptual status of this row.
The value of this object has no effect on whether other objects in this conceptual row can be modified.
If active, this object MUST remain active unless one of the following two conditions are met.
An attempt to set it to anything other than active while the following conditions are not met MUST result in an inconsistentValue error.
The two conditions are: I.
No active row in the spdCompoundActionTable exists which has a matching spdCompActName.
Or, at least one other active row in this table has a matching spdCompActName."
these are static actions that can be pointed to by the   spdRuleDefAction or the spdSubActSubActionName objects to   drop, accept, or reject packets.
13 } spdDropAction    OBJECT TYPE
"This scalar indicates that a packet MUST be dropped and SHOULD NOT have action/packet logging."
"This scalar indicates that a packet MUST be dropped and SHOULD have action/packet logging."
"This Scalar indicates that a packet MUST be accepted (pass through) and SHOULD NOT have action/packet logging."
"This scalar indicates that a packet MUST be accepted (pass through) and SHOULD have action/packet logging."
"Points to the action instance that was executed that resulted in the notification being sent."
spdNotificationVariables 1 } spdIPEndpointAddType OBJECT TYPE SYNTAX
"Contains the address type for the interface that the notification triggering packet is passing through."
"Contains the interface address for the interface that the notification triggering packet is passing through.
The format of this object is specified by the spdIPEndpointAddType object."
"Contains the source address type of the packet that triggered the notification."
"Contains the source address of the packet that triggered the notification.
The format of this object is specified by the spdIPSourceType object."
5 } spdIPDestinationType OBJECT TYPE SYNTAX
"Contains the destination address type of the packet that triggered the notification."
"Contains the destination address of the packet that triggered the notification.
The format of this object is specified by the spdIPDestinationType object."
"Indicates if the packet that triggered the action in questions was ingress (inbound) or egress (outbound)."
spdPacketPart is the front part of the full IP packet that triggered this notification.
The initial size limit is determined by the smaller of the size, indicated by: I.
The value of the object with the TC syntax 'SpdIPPacketLogging' that indicated the packet SHOULD be logged and II.
The size of the triggering packet.
The final limit is determined by the SNMP packet size when sending the notification.
The maximum size that can be included will be the smaller of the initial size, given the above, and the length that will fit in a single SNMP notification packet after the rest of the notification's objects and any other necessary packet data (headers encoding, etc.) have been included in the packet."
Only actions with logging enabled will result in this notification getting sent.
The object includes the spdActionExecuted object, which will indicate which action was executed within the scope of the rule.
Additionally, the spdIPSourceType, spdIPSourceAddress, spdIPDestinationType, and spdIPDestinationAddress objects are included to indicate the packet source and destination of the packet that triggered the action.
Finally, the spdIPEndpointAddType, spdIPEndpointAddress, and spdPacketDirection objects indicate which interface the executed action was associated with, and if the packet was ingress or egress through the endpoint.
A spdActionNotification SHOULD be limited to a maximum of one notification sent per minute for any action notifications that do not have any other configuration controlling their send rate.
Note that compound actions with multiple executed sub actions may result in multiple notifications being sent from a single rule execution."
Only SAs created by actions with packet logging enabled will result in this notification getting sent.
The objects sent MUST include the spdActionExecuted, which will indicate which action was executed within the scope of the rule.
Additionally, the spdIPSourceType, spdIPSourceAddress, spdIPDestinationType, and spdIPDestinationAddress objects MUST be included to indicate the packet source and destination of the packet that triggered the action.
The spdIPEndpointAddType, spdIPEndpointAddress, and spdPacketDirection objects are included to indicate which endpoint the packet was associated with.
Finally, spdPacketPart is included to enable sending a variable sized part of the front of the packet with the size dependent on the value of the object of TC syntax 'SpdIPPacketLogging', which indicated that logging should be done.
A spdPacketNotification SHOULD be limited to a maximum of one notification sent per minute for any action notifications that do not have any other configuration controlling their send rate.
An action notification SHOULD be limited to a maximum of one notification sent per minute for any action notifications that do not have any other configuration controlling their send rate."
"The compliance statement for SNMP entities that include an IPsec MIB implementation with Endpoint, Rules, and filters support.
When this MIB is implemented with support for read create, then such an implementation can claim full compliance.
Such devices can then be both monitored and configured with this MIB."
This Module MANDATORY GROUPS {
spdEndpointGroup, spdGroupContentsGroup, spdRuleDefinitionGroup, spdStaticFilterGroup, spdStaticActionGroup , diffServMIBMultiFieldClfrGroup } GROUP spdIpsecSystemPolicyNameGroup DESCRIPTION
"This group is mandatory for IPsec Policy implementations that support a system policy group name."
This group is mandatory for IPsec Policy implementations that support compound filters."
"This group is mandatory for IPsec Policy implementations that support IP Offset filters.
In general, this SHOULD be supported by a compliant IPsec Policy implementation."
This group is mandatory for IPsec Policy implementations that support time filters.
This group is mandatory for IPsec Policy implementations that support IPSO Header filters."
This group is mandatory for IPsec Policy implementations that support compound actions."
This object not required for compliance."
This object not required for compliance."
This object not required for compliance."
This object not required for compliance."
This object not required for compliance."
This object not required for compliance."
This object not required for compliance."
This object not required for compliance."
This object not required for compliance."
This object is not required for compliance."
The compliance statement for SNMP entities that support sending notifications when actions are invoked."
"The compliance statement for SNMP entities that include an IPsec MIB implementation with Endpoint, Rules, and filters support.
If this MIB is implemented without support for read create (i.e., in read only), it is not in full compliance, but it can claim read only compliance.
Such a device can then be monitored, but cannot be configured with this MIB."
This Module MANDATORY GROUPS {
spdEndpointGroup, spdGroupContentsGroup, spdRuleDefinitionGroup, spdStaticFilterGroup, spdStaticActionGroup , diffServMIBMultiFieldClfrGroup } GROUP spdIpsecSystemPolicyNameGroup DESCRIPTION
"This group is mandatory for IPsec Policy implementations that support a system policy group name."
This group is mandatory for IPsec Policy implementations that support compound filters."
"This group is mandatory for IPsec Policy implementations that support IP Offset filters.
In general, this SHOULD be supported by a compliant IPsec Policy implementation."
This group is mandatory for IPsec Policy implementations that support time filters.
This group is mandatory for IPsec Policy implementations that support IPSO Header filters."
This group is mandatory for IPsec Policy implementations that support compound actions."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
This object is not required for compliance."
"Write access is not required."
"Write access is not required."
"Write access is not required."
"Write access is not required."
"Write access is not required."
"Write access is not required."
"Write access is not required."
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
spdIpOffFiltLastChanged DESCRIPTION "This object is not required for compliance."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
"Write access is not required."
"Write access is not required."
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
"Write access is not required."
"Write access is not required."
This object is not required for compliance."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
spdRuleDefStorageType MIN ACCESS   read only DESCRIPTION
"Write access is not required."
This object is not required for compliance."
"Write access is not required."
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
"This object is not required for compliance."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
spdSubFiltSubfilter MIN ACCESS   read only DESCRIPTION
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
"Write access is not required."
"Write access is not required."
"Write access is not required."
"Write access is not required."
"Write access is not required."
OBJECT GROUP OBJECTS { spdEndGroupName, spdEndGroupLastChanged, spdEndGroupStorageType
, spdEndGroupRowStatus } STATUS current DESCRIPTION
"This group is made up of objects from the IPsec Policy Endpoint Table."
This group is made up of objects from the IPsec Policy Group Contents Table."
This group is made up of objects represent the System Policy Group Names."
GROUP OBJECTS { spdRuleDefDescription, spdRuleDefFilter, spdRuleDefFilterNegated, spdRuleDefAction, spdRuleDefAdminStatus, spdRuleDefLastChanged,
spdRuleDefStorageType, spdRuleDefRowStatus } STATUS current DESCRIPTION
"This group is made up of objects from the IPsec Policy Rule Definition Table."
"This group is made up of objects from the IPsec Policy Compound Filter Table and Sub Filter Table Group."
Currently this is just a true filter."
OBJECT GROUP OBJECTS { spdIpOffFiltOffset, spdIpOffFiltType, spdIpOffFiltValue, spdIpOffFiltLastChanged, spdIpOffFiltStorageType, spdIpOffFiltRowStatus } STATUS current DESCRIPTION
"This group is made up of objects from the IPsec Policy IP Offset Filter Table."
} spdTimeFilterGroup OBJECT GROUP OBJECTS { spdTimeFiltPeriod, spdTimeFiltMonthOfYearMask, spdTimeFiltDayOfMonthMask, spdTimeFiltDayOfWeekMask, spdTimeFiltTimeOfDayMask, spdTimeFiltLastChanged, spdTimeFiltStorageType, spdTimeFiltRowStatus } STATUS current DESCRIPTION "This group is made up of objects from the IPsec Policy Time Filter Table."
spdIpsoHeadFiltRowStatus } STATUS current DESCRIPTION
"This group is made up of objects from the IPsec Policy IPSO Header Filter Table."
OBJECT GROUP OBJECTS { spdDropAction, spdAcceptAction, spdDropActionLog, spdAcceptActionLog } STATUS current DESCRIPTION
"This group is made up of objects from the IPsec Policy Static Actions."
The IPsec Policy Compound Action Table and Actions In Compound Action Table Group."
spdPacketPart } STATUS current DESCRIPTION "This group is made up of all the Notification objects for this MIB."
This document defines a MIB module used to configure IPsec policy services.
Since IPsec provides network security services, all of its configuration data (e.g., this entire MIB) SHOULD be as secure or more secure than any of the security services IPsec provides.
There are two main threats you need to protect against when configuring IPsec devices.
Malicious Configuration: This MIB configures network security services.
If an attacker has SET access to any part of this MIB, the network security services configured by this MIB SHOULD be considered broken.
The network data sent through the associated gateway should no longer be considered as protected by IPsec (i.e., it is no longer confidential or authenticated).
Therefore, only the official administrators SHOULD be allowed to configure a device.
In other words, administrators' identities SHOULD be authenticated and their access rights checked before they are allowed to do device configuration.
The support for SET operations to the SPD MIB in a non secure environment, without proper protection, will invalidate the security of the network traffic affected by the SPD MIB.
Disclosure of Configuration: In general, malicious parties SHOULD NOT be able to read security configuration data while the data is in network transit.
An attacker reading the configuration data may be able to find misconfigurations in the MIB that enable attacks to the network or to the configured node.
Since this entire MIB is used for security configuration, it is highly RECOMMENDED that only authorized administrators are allowed to view data in this MIB.
In particular, malicious users SHOULD be prevented from reading SNMP packets containing this MIB's data.
SNMP GET data SHOULD be encrypted when sent across the network.
Also, only authorized administrators SHOULD be allowed SNMP GET access to any of the MIB objects.
SNMP versions prior to SNMPv3 do not include adequate security.
Even if the network itself is secure (e.g., by using IPsec), earlier versions of SNMP have virtually no control as to who on the secure network is allowed to access (i.e., read/change/create/delete)
the objects in this MIB module.
It is RECOMMENDED that implementers use the security features as provided by the SNMPv3 framework (see [RFC3410], section 8), including full support for the SNMPv3 cryptographic mechanisms (for authentication and privacy).
Further, deployment of SNMP versions prior to SNMPv3 is NOT RECOMMENDED.
Instead, it is RECOMMENDED to deploy SNMPv3 and to enable cryptographic security.
It is then a customer/operator responsibility to ensure that the SNMP entity giving access to an instance of this MIB module is properly configured to give access to the objects only to those principals (users) that have legitimate rights to GET or SET (change/create/delete) them.
Therefore, when configuring data in the IPSEC SPD MIB, you SHOULD use SNMP version 3.
The rest of this discussion assumes the use of SNMPv3.
This is a real strength, because it allows administrators the ability to load new IPsec configuration on a device and keep the conversation private and authenticated under the protection of SNMPv3 before any IPsec protections are available.
Once initial establishment of IPsec configuration on a device has been achieved, it would be possible to set up IPsec SAs to then also provide security and integrity services to the configuration conversation.
This may seem redundant at first, but will be shown to have a use for added privacy protection below.
The current SNMPv3 User Security Model provides for key based user authentication.
Typically, keys are derived from passwords (but are not required to be), and the keys are then used in Hashed Message Authentication Code (HMAC) algorithms (currently, MD5 and SHA 1 HMACs are defined) to authenticate all SNMP data.
Each SNMP device keeps a (configured) list of users and keys.
Under SNMPv3 user keys may be updated as often as an administrator cares to have users enter new passwords.
But Perfect Forward Secrecy for user keys in SNMPv3 is not yet provided by standards track documents, although RFC2786 defines an experimental method of doing so.
Protecting against Involuntary Disclosure While sending IPsec configuration data to a Policy Enforcement Point (PEP), there are a few critical parameters that MUST NOT be observed by third parties.
Specifically, except for public keys, keying information MUST NOT be allowed to be observed by third parties.
This includes IKE Pre Shared Keys and possibly the private key of a public/private key pair for use in a PKI.
Were either of those parameters to be known to a third party, they could then impersonate the device to other IKE peers.
Aside from those critical parameters, policy administrators have an interest in not divulging any of their policy configuration.
Any knowledge about a device's configuration could help an unfriendly party compromise that device.
SNMPv3 offers privacy security services, but at the time this document was written, the only standardized encryption algorithm supported by SNMPv3 is the DES encryption algorithm.
Support for other (stronger) cryptographic algorithms is in the works and may be completed by the time you read this.
As of October 2006, there is a stronger standards track algorithm: AES [RFC3826].
When configuring the IPsec policy using this MIB, policy administrators SHOULD use a privacy security service that is at least as strong as the desired IPsec policy, e.g., If an administrator were to use this MIB to configure an IPsec connection that utilizes a AES algorithms, the SNMP communication configuring the connection SHOULD be protected by an algorithm as strong or stronger than the AES algorithm.
Most vendors will not ship new products with a default SNMPv3 user/ password pair, but it is possible.
If a device does ship with a default user/password pair, policy administrators SHOULD either change the password or configure a new user, deleting the default user (or, at a minimum, restrict the access of the default user).
Most SNMPv3 distributions should, hopefully, require an out of band initialization over a trusted medium, such as a local console connection.
IANA Considerations Only two IANA considerations exist for this document.
The first is just the node number allocation of the IPSEC SPD MIB itself within the MIB 2 tree.
This is listed in the MIB definition in Section 6.
The IPSEC SPD MIB also allows for extension action MIBs.
Although additional actions are not required to use it, the node spdActions is allocated as a subtree under which IANA can assign additional actions.
The second IANA consideration is that IANA would be responsible for creating a new subregistry for and assigning nodes under the spdActions subtree.
This tree should have a prefix of iso.org.dod.internet.mgmt.mib 2.spdMIB.spdActions and be listed similar to the following:
A documented specification is required in order to assign a number.
The action and it's meaning can be specified in an RFC or in another publicly available reference.
The specification should have sufficient detail that interoperability between independent implementations is possible.
The product of the IETF or of another standards body is acceptable or an assignment can be accepted under the advice of a "designated expert".
(contact IANA for the current expert)
