- title: __initial_text__
  contents:
  - '                          IP Echo Host Service

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  This memo does not specify an Internet standard of any\n   kind.\
    \  Discussion and suggestions for improvement are requested.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes how to implement an IP echo host.  IP echo hosts\n\
    \   send back IP datagrams after exchanging the source and destination IP\n  \
    \ addresses.  The effect is that datagrams sent to the echo host are\n   sent\
    \ back to the source, as if they originated at the echo host.\n"
- title: Introduction
  contents:
  - "Introduction\n   An IP echo host returns IP datagrams to their original source\
    \ host,\n   with the IP source and destination addresses reversed, so that the\n\
    \   returning datagram appears to be coming from the echo host to the\n   original\
    \ source.  IP echo hosts are tremendously useful for debugging\n   applications\
    \ and protocols.  They allow researchers to create looped\n   back conversations\
    \ across the Internet, exposing their traffic to all\n   the vagaries of Internet\
    \ behavior (congestion, cross traffic,\n   variable round-trip times and the like)\
    \ without having to distribute\n   prototype software to a large number of test\
    \ machines.\n   IP echo hosts were heavily used on the Internet in the late 1970s\
    \ and\n   early 1980s to debug various Internet transport and application\n  \
    \ protocols.  But, for reasons unclear, at the current date there are\n   no echo\
    \ hosts on the Internet and few people are even aware of the\n   concept.  The\
    \ goal of this memo is to document the concept in the\n   hopes it will be revived.\n"
- title: Implementation Details
  contents:
  - "Implementation Details\n   While the basic idea of a echo host is simple, there\
    \ are a few\n   implementation details that require attention.  This section\n\
    \   describes those implementation details.  The presentation works from\n   the\
    \ simplest to most difficult issues.\n   The most straightforward situation is\
    \ when an echo host receives an\n   IP datagram with no options and whose protocol\
    \ field has a value\n   other than 1 (ICMP).  In this case, the echo host modifies\
    \ the header\n   by exchanging the source and destination addresses, decrements\
    \ the\n   TTL by one and updates the IP header checksum.  The host then\n   transmits\
    \ the updated IP datagram back to the original source of the\n   datagram.\n \
    \     NOTE: If the TTL is zero or less after decrementing, the datagram\n    \
    \  MUST not be echoed.  In general, an echo host is required to do\n      all\
    \ the various sanity checks that a router or host would do to an\n      IP datagram\
    \ before accepting the datagram for echoing (see STD 3,\n      RFC 1122, and RFC\
    \ 1812).\n      The TTL MUST be decremented for security reasons noted below.\n\
    \      Observe, however, that the effect is that hosts using an echo path\n  \
    \    through an echo host SHOULD set their TTL to twice the normal\n      value\
    \ to be sure of achieving connectivity over the echo path.\n   If an arriving\
    \ IP datagram has options, the echo host's\n   responsibilities are more complex.\
    \  In general, the IP source and\n   destination are always exchanged and TTL\
    \ and checksum updated, but in\n   certain situations, other special actions may\
    \ have to take place.\n   If the datagram contains an incomplete source route\
    \ option (i.e. the\n   echo host is not the final destination), the datagram MUST\
    \ be\n   discarded.  If the datagram contains a complete source route option,\n\
    \   the source route option MUST be reversed, and the datagram (with\n   source\
    \ and destination IP addresses exchanged and updated TTL) MUST\n   be sent back\
    \ along the reverse source route.\n   More generally, the goal with any option\
    \ is to update the option such\n   that when the echoed packet is received at\
    \ the original source, the\n   option fields will contain data which makes sense\
    \ for a datagram\n   originating at the echo host.\n   There is one option for\
    \ which it is unclear what the correct action.\n   The timestamp option is sometimes\
    \ used for round-trip time\n   estimation.  If the option is reset at the echo\
    \ host, then a history\n   of roughly half of the trip delay will be lost.  But\
    \ if the option is\n   not reset, then the timestamp option will appear inconsistent\
    \ with\n   the source and destination addresses of the datagram.  To try to\n\
    \   balance these two issues, the following rules are suggested:\n      1. If\
    \ the first entry in the timestamp option contains the IP\n      address of the\
    \ source host, the entry SHOULD be rewritten to\n      contain the IP address\
    \ of the echo host, and the timestamp option\n      pointer SHOULD be truncated\
    \ so that this timestamp is the only one\n      in the list.  (This rewrite makes\
    \ the option appear consistent\n      with the new source and destination IP addresses,\
    \ and retains the\n      source timestamp, while losing information about the\
    \ path to the\n      echo host).\n      2. If the first entry in the timestamp\
    \ option does not contain the\n      IP address of the source host, the entry\
    \ SHOULD be echoed back\n      unchanged. The echo host SHOULD NOT appear in the\
    \ timestamp\n      option.  (This approach retains the entire history of the path,\n\
    \      though observe that on a symmetric route, it means every router\n     \
    \ may appear twice in the path).\n   Finally, if the IP datagram contains an ICMP\
    \ packet (i.e. the IP\n   protocol field value is 1), the datagram SHOULD be discarded.\
    \  The\n   reason for this rule is that the most likely reason for receiving an\n\
    \   ICMP datagram is that an echoed datagram has encountered a problem at\n  \
    \ some router in the path and the router has sent back an ICMP\n   datagram. \
    \ Echoing the ICMP datagram back to the router may confuse\n   the router and\
    \ thus SHOULD be avoided.  (This rule simply follows the\n   Internet maxim of\
    \ being conservative in what we send).\n   However, in some cases the ICMP datagram\
    \ will have useful information\n   for the source host which it would be desirable\
    \ to echo.  A\n   sophisticated echo host MAY choose to echo ICMP datagrams according\n\
    \   to the following rules:\n      1. Any ICMP datagram in which the destination\
    \ address in the\n      encapsulated IP header (the header within the ICMP datagram)\n\
    \      matches the source address of the ICMP datagram MAY be safely\n      echoed.\n\
    \      2. ICMP Source Quench and ICMP Destination Unreachable with a code\n  \
    \    of 4 (fragmentation needed and DF set) MAY be sent to the\n      *destination*\
    \ of the encapsulated IP datagram if the source IP\n      address of the encapsulated\
    \ IP datagram is that of the echo host.\n      When the ICMP message is sent on,\
    \ it SHOULD be rewritten as an\n      ICMP message from the echo host to the source.\n\
    \      3. All other ICMP messages MUST be discarded.\n   These rules were chosen\
    \ to try to ensure that end-to-end ICMP\n   messages are passed through, as are\
    \ messages from routers which are\n   fairly safe and useful (or necessary) to\
    \ the end system, but that\n   potentially dangerous messages such as Redirects\
    \ are suppressed.\n   (The ICMP Destination Unreachable with code 4 is required\
    \ for MTU\n   discovery under RFC-1191).\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Echo hosts pose a number of security concerns related\
    \ to address\n   spoofing.\n   First, echo hosts provide obvious ways to extend\
    \ attacks that make\n   use of address spoofing.  A malevolent host can write\
    \ an third\n   party's IP address as the source address of a datagram sent to\
    \ an\n   echo host and thus cause the echo host to send a datagram to the\n  \
    \ third party.  In general, this trick does not create a new security\n   hole\
    \ (the malevolent host could just as well have sent the datagram\n   with a forged\
    \ source address straight to the third party host).  But\n   there are some new\
    \ twists to the problem.\n   One exception is if the echo host is a host inside\
    \ a firewall that\n   accepts datagrams from hosts outside the firewall.  In that\
    \ case, a\n   malevolent host outside the firewall may be able to use the echo\
    \ host\n   to make its packets appear to originate from inside the firewall\n\
    \   (from the echo host).  In general, a good firewall will catch these\n   cases\
    \ (the source address of the datagrams sent to the echo host will\n   be for a\
    \ host inside the firewall and testing for interior source\n   addresses on datagrams\
    \ arriving at an exterior interface is a\n   standard firewall filter) but since\
    \ the primary purpose of echo hosts\n   is for wide scale Internet testing, there\
    \ seems no reason to invite\n   danger.  So we recommend that echo hosts SHOULD\
    \ NOT be placed inside\n   firewalls.\n   Second, address spoofing can be used\
    \ to cause flooding of the\n   network.  In this case, a malevolent host sends\
    \ a datagram to an echo\n   host with the source address of another echo host.\
    \  This trick will\n   cause datagrams to circulate between the two echo hosts.\
    \  The\n   requirement that the echo host decrement the TTL by one ensures that\n\
    \   each datagram will eventually die, but a sufficiently malevolent host\n  \
    \ sending a large number of datagrams with high TTLs to an echo host\n   can cause\
    \ considerable disruption.  There are a number of possible\n   ways to repair\
    \ this problem (such as requiring sources to\n   authenticate themselves before\
    \ sending datagrams to be echoed).  A\n   simple protection is simply to limit\
    \ the number of packets echoed\n   back to any one source per second.  For instance,\
    \ one might limit a\n   source to a packet rate equal to 10% of the interface\
    \ bandwidth (for\n   a 10 Mb/s Ethernet this would be about 75 maximum sized packets\
    \ per\n   second).\n   One variation of this attack is to generate e-mail addressed\
    \ to the\n   echo host (e.g., user@echo.xxx.com).  This e-mail will loop over\
    \ the\n   network a number of times until the SMTP server determines the\n   message\
    \ has too many Received-From: lines.\n   A third variation of the flooding trick\
    \ is to place a multicast or\n   broadcast address as the source of the IP datagram\
    \ sent to an echo\n   server.  Since this results in an illegal arriving IP datagram,\
    \ the\n   echo server MUST discard the datagram.  (This warning serves as a\n\
    \   reminder that echo servers MUST do the standard checks for an illegal\n  \
    \ datagram before echoing).\n"
- title: Implementation Note
  contents:
  - "Implementation Note\n   Echo hosts are often implemented as virtual interfaces\
    \ on an existing\n   host or router.  One can think of the echo host's IP address\
    \ as a\n   second IP address for the host, with the semantics that all datagrams\n\
    \   sent to that address get echoed.  Observe that when an echo host is\n   supported\
    \ as a module within a larger host implementation, an easy\n   implementation\
    \ mistake to make is to accidentally put the non-echo\n   address of a host into\
    \ an echoed packet.  For a variety of reasons\n   (including security and correct\
    \ operation of echo paths) implementors\n   MUST ensure this NEVER happens.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This memo was stimulated by a conversation with Jon Crowcroft\
    \ in\n   which we both lamented the demise of some beloved IP echo hosts\n   (e.g.,\
    \ goonhilly-echo.arpa).  It has been considerably improved by\n   comments from\
    \ various members of the End2End-Interest mailing list,\n   including Bob Braden,\
    \ Mark Handley, Christian Huitema, Dave Mills,\n   Tim Salo, Vern Schryver, Lansing\
    \ Sloan, and Rich Stevens.\n   The author is emphatically not the inventor of\
    \ echo hosts.  Enquiries\n   to the usual suspects suggest that echo hosts were\
    \ created by persons\n   unknown (probably at BBN) very early in the development\
    \ of IP.  I'd\n   like to thank those persons who created echo hosts and apologize\
    \ for\n   any errors in describing their invention.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Craig Partridge\n   BBN Corporation\n   10 Moulton St\n\
    \   Cambridge MA 02138\n   EMail: craig@bbn.com\n"
