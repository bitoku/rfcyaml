Abstract This document is an implementation report for the Resource Public Key Infrastructure (RPKI) Router protocol as defined in RFC 6810.
The authors did not verify the accuracy of the information provided by respondents.
The respondents are experts with the implementations they reported on, and their responses are considered authoritative for the implementations for which their responses represent.
The respondents were asked to only use the "YES" answer if the feature had at least been tested in the lab.
In order to formally validate the origin Autonomous Systems (ASes) of BGP announcements, routers need a simple but reliable mechanism to receive Resource Public Key Infrastructure (RPKI)
[RFC6810] prefix origin data from a trusted cache.
The RPKI Router protocol defined in [RFC6810] provides a mechanism to deliver validated prefix origin data to routers.
This document provides an implementation report for the RPKI Router protocol as defined in RFC 6810 [RFC6810].
The authors did not verify the accuracy of the information provided by respondents or by any alternative means.
The respondents are experts with the implementations they reported on, and their responses are considered authoritative for the implementations for which their responses represent.
Respondents were asked to only use the "YES" answer if the feature had at least been tested in the lab.
Implementation Forms Contact and implementation information for person filling out this form
2.0.0 <https://github.com/RIPE NCC /rpki validator> Protocol Role:
Fabian Holler, Matthias Waehlisch Email:
HAW Hamburg, FU Berlin, RTRlib project
Client BBN Name: David Mandelberg, Andrew Chi Email: dmandelb@bbn.com
Raytheon/BBN Technologies Release: RPSTIR 0.2 <http://sourceforge.net/projects/rpstir/>
Protocol Data Units Does the implementation support Protocol Data Units (PDUs) as described in Section 5 of [RFC6810]?
No, Error PDU gets silently ignored.
Protocol Sequence Does the RPKI Router protocol implementation follow the four protocol sequences as outlined in Section 6 of [RFC6810]?
Typical Exchange S3:  No Incremental Update
Does not implement Serial Query, thus Incremental Update is never available, so responds to Serial Query with Cache Reset as described in Section 6.3 of [RFC6810] Note 2:  Sends Cache Reset in response to Serial Query when no data; sends Error Report PDU in response to Reset Query when no data.
Protocol Transport Does the RPKI Router protocol implementation support the different protocol transport mechanisms outlined in Section 7 of [RFC6810]?
Error Codes Does the RPKI Router protocol implementation support the different protocol error codes outlined in Section 10 of [RFC6810]?
fatal, so connection is dropped, but cache does not conclude it's inconsistent.
Incremental Updates Support Does the RPKI Router implementation support Incremental Updates as defined in Section 4 of [RFC6810]?
Session ID Support Session ID is used to indicate that the cache server may have restarted and that the incremental restart may not be possible.
Does the RPKI Router protocol implementation support the Session ID procedures outlined in Section 5.1 of [RFC6810]?
NO, using random, but will FIX 9.
Incremental Session Startup Support Does the RPKI Router protocol implementation support Incremental session startups with Serial Number and Session ID as defined in Section 5.3 of [RFC6810]?
Interoperable Implementations List other implementations with which you have tested the interoperability of the RPKI Router implementation.
Cisco Implementation Cisco: The Cisco IOS and IOS XR implementation should be interoperable with other vendor RPKI Router Protocol implementations.
In particular, we have tested our interoperability with rpki.net's RPKI Router implementation.
Juniper Implementation Juniper: The Juniper Networks,
Inc. JUNOS implementation should be interoperable with other vendor RPKI Router Protocol implementations.
In particular, we have tested our interoperability with rpki.net's and NCC's RPKI Router Cache implementation.
The rpki.net implementation should operate with other rpki  rtr implementations.
In particular, we have tested our rpki rtr server's interoperability with Cisco IOS, Cisco IOS XR, and Juniper.
RIPE NCC Implementation RIPE NCC:
The RIPE NCC validator has been tested by us with other rpki rtr implementations.
In particular, we have tested with RTRlib and CISCO IOS.
We received positive feedback from close contacts who tested our validator with JUNOS and Quagga.
The RTRlib has been tested by us with other rpki rtr implementations.
In particular, we have tested with rtr origin from rpki.net and RIPE NCC Validator.
BBN RPSTIR Implementation BBN RPSTIR
: We have not yet tested with any other implementations.
No new security issues are introduced to the RPKI Router protocol defined in [RFC6810].
