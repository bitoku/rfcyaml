- contents:
  - "                    Language Tags and Ranges in the\n              Lightweight
    Directory Access Protocol (LDAP)\n"
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   It is often desirable to be able to indicate the natural language\n
    \  associated with values held in a directory and to be able to query\n   the
    directory for values which fulfill the user's language needs.\n   This document
    details the use of Language Tags and Ranges in the\n   Lightweight Directory Access
    Protocol (LDAP).\n"
  title: Abstract
- contents:
  - "1.  Background and Intended Use\n   The Lightweight Directory Access Protocol
    (LDAP) [RFC3377] provides a\n   means for clients to interrogate and modify information
    stored in a\n   distributed directory system.  The information in the directory
    is\n   maintained as attributes of entries.  Most of these attributes have\n   syntaxes
    which are human-readable strings, and it is desirable to be\n   able to indicate
    the natural language associated with attribute\n   values.\n   This document describes
    how language tags and ranges [RFC3066] are\n   carried in LDAP and are to be interpreted
    by LDAP implementations.\n   All LDAP implementations MUST be prepared to accept
    language tags and\n   ranges.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in BCP
    14 [RFC2119].\n   This document replaces RFC 2596.  Appendix A summaries changes
    made\n   since RFC 2596.\n   Appendix B discusses differences from X.500(1997)
    \"contexts\"\n   mechanism.\n   Appendix A and B are provided for informational
    purposes only.\n   The remainder of this section provides a summary of Language
    Tags,\n   Language Ranges, and Attribute Descriptions.\n"
  - contents:
    - "1.1.  Language Tags\n   Section 2 of BCP 47 [RFC3066] describes the language
      tag format which\n   is used in LDAP.  Briefly, it is a string of [ASCII] letters
      and\n   hyphens.  Examples include \"fr\", \"en-US\" and \"ja-JP\".  Language
      tags\n   are case insensitive.  That is, the language tag \"en-us\" is the same\n
      \  as \"EN-US\".\n   Section 2 of this document details use of language tags
      in LDAP.\n"
    title: 1.1.  Language Tags
  - contents:
    - "1.2.  Language Ranges\n   Section 2.5 of BCP 47 [RFC3066] describes the language
      ranges.\n   Language ranges are used to specify sets of language tags.\n   A
      language range matches a language tag if it is exactly equal to the\n   tag,
      or if it is exactly equal to a prefix of the tag such that the\n   first character
      following the prefix is \"-\".  That is, the language\n   range \"de\" matches
      the language tags \"de\" and \"de-CH\" but not \"den\".\n   The special language
      range \"*\" matches all language tags.\n   Due to attribute description option
      naming restrictions in LDAP, this\n   document defines a different language
      range syntax.  However, the\n   semantics of language ranges in LDAP are consistent
      with BCP 47.\n   Section 3 of this document details use of language ranges in
      LDAP.\n"
    title: 1.2.  Language Ranges
  - contents:
    - "1.3.  Attribute Descriptions\n   This section provides an overview of attribute
      descriptions in LDAP.\n   LDAP attributes and attribute descriptions are defined
      in [RFC2251].\n   An attribute consists of a type, a set of zero or more associated\n
      \  tagging options, and a set of one or more values.  The type and the\n   options
      are combined into the AttributeDescription.\n   AttributeDescriptions can also
      contain options which are not part of\n   the attribute, but indicate some other
      function (such as range\n   assertion or transfer encoding).\n   An AttributeDescription
      with one or more tagging options is a direct\n   subtype of each AttributeDescription
      of the same type with all but\n   one of the tagging options.  If the AttributeDescription's
      type is a\n   direct subtype of some other type, then the AttributeDescription
      is\n   also a direct subtype of the AttributeDescription which consists of\n
      \  the supertype and all of the tagging options.  That is,\n   \"CN;x-bar;x-foo\"
      is a direct subtype of \"CN;x-bar\", \"CN;x-foo\", and\n   \"name;x-bar;x-foo\".
      \ Note that \"CN\" is a subtype of \"name\".\n"
    title: 1.3.  Attribute Descriptions
  title: 1.  Background and Intended Use
- contents:
  - "2.  Use of Language Tags in LDAP\n   This section describes how LDAP implementations
    MUST interpret\n   language tags in performing operations.\n   Servers which support
    storing attributes with language tag options in\n   the Directory Information
    Tree (DIT) SHOULD allow any attribute type\n   it recognizes that has the Directory
    String, IA5 String, or other\n   textual string syntaxes to have language tag
    options associated with\n   it.  Servers MAY allow language options to be associated
    with other\n   attributes types.\n   Clients SHOULD NOT assume servers are capable
    of storing attributes\n   with language tags in the directory.\n   Implementations
    MUST NOT otherwise interpret the structure of the tag\n   when comparing two tags,
    and MUST treat them simply as strings of\n   characters.  Implementations MUST
    allow any arbitrary string which\n   conforms to the syntax defined in BCP 47
    [RFC3066] to be used as a\n   language tag.\n"
  - contents:
    - "2.1.  Language Tag Options\n   A language tag option associates a natural language
      with values of an\n   attribute.  An attribute description may contain multiple
      language\n   tag options.  An entry may contain multiple attributes with same\n
      \  attribute type but different combinations of language tag (and other)\n   options.\n
      \  A language tag option conforms to the following ABNF [RFC2234]:\n      language-tag-option
      = \"lang-\" Language-Tag\n   where the Language-Tag production is as defined
      in BCP 47 [RFC3066].\n   This production and those it imports from [RFC2234]
      are provided here\n   for convenience:\n      Language-Tag = Primary-subtag
      *( \"-\" Subtag )\n      Primary-subtag = 1*8ALPHA\n      Subtag = 1*8(ALPHA
      / DIGIT)\n      ALPHA = %x41-5A / %x61-7A   ; A-Z / a-z\n      DIGIT = %x30-39
      \            ; 0-9\n   A language tag option is a tagging option.  A language
      tag option has\n   no effect on the syntax of the attribute's values nor their
      transfer\n   encoding.\n   Examples of valid AttributeDescription:\n      givenName;lang-en-US\n
      \     CN;lang-ja\n      SN;lang-de;lang-gem-PFL\n      O;lang-i-klingon;x-foobar\n
      \     description;x-foobar\n      CN\n   Notes: The last two have no language
      tag options.  The x-foobar\n          option is fictious and used for example
      purposes.\n"
    title: 2.1.  Language Tag Options
  - contents:
    - "2.2.  Search Filter\n   If language tag options are present in an AttributeDescription
      in an\n   assertion, then for each entry within scope, the values of each\n
      \  attribute whose AttributeDescription consists of the same attribute\n   type
      or its subtypes and contains each of the presented (and possibly\n   other)
      options is to be matched.\n   Thus, for example, a filter of an equality match
      of type\n   \"name;lang-en-US\" and assertion value \"Billy Ray\", against the\n
      \  following directory entry:\n   dn: SN=Ray,DC=example,DC=com\n   objectClass:
      person                 DOES NOT MATCH (wrong type)\n   objectClass: extensibleObject
      \      DOES NOT MATCH (wrong type)\n   name;lang-en-US: Billy Ray          MATCHES\n
      \  name;lang-en-US: Billy Bob          DOES NOT MATCH (wrong value)\n   CN;lang-en-US:
      Billy Ray            MATCHES\n   CN;lang-en-US;x-foobar: Billy Ray   MATCHES\n
      \  CN;lang-en;x-foobar: Billy Ray      DOES NOT MATCH (differing lang-)\n   CN;x-foobar:
      Billy Ray              DOES NOT MATCH (no lang-)\n   name: Billy Ray                     DOES
      NOT MATCH (no lang-)\n   SN;lang-en-GB;lang-en-US: Billy Ray MATCHES\n   SN:
      Ray                             DOES NOT MATCH (no lang-,\n                                           wrong
      value)\n   Note that \"CN\" and \"SN\" are subtypes of \"name\".\n   It is noted
      that providing a language tag option in a search filter\n   AttributeDescription
      will filter out desirable values where the tag\n   does not match exactly.  For
      example, the filter (name;lang-en=Billy\n   Ray) does NOT match the attribute
      \"name;lang-en-US:  Billy Ray\".\n   If the server does not support storing
      attributes with language tag\n   options in the DIT, then any assertion which
      includes a language tag\n   option will not match as such it is an unrecognized
      attribute type.\n   No error would be returned because of this; a presence assertion\n
      \  would evaluate to FALSE and all other assertions to Undefined.\n   If no
      options are specified in the assertion, then only the base\n   attribute type
      and the assertion value need match the value in the\n   directory.\n   Thus,
      for example, a filter of an equality match of type \"name\" and\n   assertion
      value \"Billy Ray\", against the following directory entry:\n      dn: SN=Ray,DC=example,DC=com\n
      \     objectClass: person                 DOES NOT MATCH (wrong type)\n      objectClass:
      extensibleObject       DOES NOT MATCH (wrong type)\n      name;lang-en-US: Billy
      Ray          MATCHES\n      name;lang-en-US: Billy Bob          DOES NOT MATCH
      (wrong value)\n      CN;lang-en-US;x-foobar: Billy Ray   MATCHES\n      CN;lang-en;x-foobar:
      Billy Ray      MATCHES\n      CN;x-foobar: Billy Ray              MATCHES\n
      \     name: Billy Ray                     MATCHES\n      SN;lang-en-GB;lang-en-US:
      Billy Ray MATCHES\n      SN: Ray                             DOES NOT MATCH
      (wrong value)\n"
    title: 2.2.  Search Filter
  - contents:
    - "2.3.  Requested Attributes in Search\n   Clients can provide language tag options
      in each AttributeDescription\n   in the requested attribute list in a search
      request.\n   If language tag options are provided in an attribute description,\n
      \  then only attributes in a directory entry whose attribute\n   descriptions
      have the same attribute type or its subtype and contains\n   each of the presented
      (and possibly other) language tag options are\n   to be returned.  Thus if a
      client requests just the attribute\n   \"name;lang-en\", the server would return
      \"name;lang-en\" and\n   \"CN;lang-en;lang-ja\" but not \"SN\" nor \"name;lang-fr\".\n
      \  Clients can provide in the attribute list multiple\n   AttributeDescriptions
      which have the same base attribute type but\n   different options.  For example,
      a client could provide both\n   \"name;lang-en\" and \"name;lang-fr\", and this
      would permit an attribute\n   with either language tag option to be returned.
      \ Note there would be\n   no need to provide both \"name\" and \"name;lang-en\"
      since all subtypes\n   of name would match \"name\".\n   If a server does not
      support storing attributes with language tag\n   options in the DIT, then any
      attribute descriptions in the list which\n   include language tag options are
      to be ignored, just as if they were\n   unknown attribute types.\n   If a request
      is made specifying all attributes or an attribute is\n   requested without providing
      a language tag option, then all attribute\n   values regardless of their language
      tag option are returned.\n   For example, if the client requests a \"description\"
      attribute, and a\n   matching entry contains the following attributes:\n      objectClass:
      top\n      objectClass: organization\n      O: Software GmbH\n      description:
      software products\n      description;lang-en: software products\n      description;lang-de:
      Softwareprodukte\n   The server would return:\n      description: software products\n
      \     description;lang-en: software products\n      description;lang-de: Softwareprodukte\n"
    title: 2.3.  Requested Attributes in Search
  - contents:
    - "2.4.  Compare\n   Language tag options can be present in an AttributeDescription
      used\n   in a compare request AttributeValueAssertion.  This is to be treated\n
      \  by servers the same as the use of language tag options in a search\n   filter
      with an equality match, as described in Section 2.2.  If there\n   is no attribute
      in the entry with the same attribute type or its\n   subtype and contains each
      of the presented (or possibly other)\n   language tag options, the noSuchAttributeType
      error will be returned.\n   Thus, for example, a compare request of type \"name\"
      and assertion\n   value \"Johann\", against an entry containing the following
      attributes:\n      objectClass: top\n      objectClass: person\n      givenName;lang-de-DE:
      Johann\n      CN: Johann Sibelius\n      SN: Sibelius\n   would cause the server
      to return compareTrue.\n   However, if the client issued a compare request of
      type\n   \"name;lang-de\" and assertion value \"Johann\" against the above entry,\n
      \  the request would fail with the noSuchAttributeType error.\n   If the server
      does not support storing attributes with language tag\n   options in the DIT,
      then any comparison which includes a language tag\n   option will always fail
      to locate an attribute, and\n   noSuchAttributeType will be returned.\n"
    title: 2.4.  Compare
  - contents:
    - "2.5.  Add Operation\n   Clients can provide language options in AttributeDescription
      in\n   attributes of a new entry to be created.\n   A client can provide multiple
      attributes with the same attribute type\n   and value, so long as each attribute
      has a different set of language\n   tag options.\n   For example, the following
      is a valid request:\n      dn: CN=John Smith,DC=example,DC=com\n      objectClass:
      residentialPerson\n      CN: John Smith\n      CN;lang-en: John Smith\n      SN:
      Smith\n      SN;lang-en: Smith\n      streetAddress: 1 University Street\n      streetAddress;lang-en-US:
      1 University Street\n      streetAddress;lang-fr: 1 rue Universite\n      houseIdentifier;lang-fr:
      9e etage\n   If a server does not support storing language tag options with\n
      \  attribute values in the DIT, then it MUST treat an\n   AttributeDescription
      with a language tag option as an unrecognized\n   attribute.  If the server
      forbids the addition of unrecognized\n   attributes then it MUST fail the add
      request with an appropriate\n   result code.\n"
    title: 2.5.  Add Operation
  - contents:
    - "2.6.  Modify Operation\n   A client can provide language tag options in an
      AttributeDescription\n   as part of a modification element in the modify operation.\n
      \  Attribute types and language tag options MUST match exactly against\n   values
      stored in the directory.  For example, if the modification is\n   a \"delete\",
      then if the stored values to be deleted have language tag\n   options, then
      those language tag options MUST be provided in the\n   modify operation, and
      if the stored values to be deleted do not have\n   any language tag option,
      then no language tag option is to be\n   provided.\n   If the server does not
      support storing language tag options with\n   attribute values in the DIT, then
      it MUST treat an\n   AttributeDescription with a language tag option as an unrecognized\n
      \  attribute, and MUST fail the request with an appropriate result code.\n"
    title: 2.6.  Modify Operation
  title: 2.  Use of Language Tags in LDAP
- contents:
  - "3.  Use of Language Ranges in LDAP\n   Since the publication of RFC 2596, it
    has become apparent that there\n   is a need to provide a mechanism for a client
    to request attributes\n   based upon set of language tag options whose tags all
    begin with the\n   same sequence of language sub-tags.\n   AttributeDescriptions
    containing language range options are intended\n   to be used in attribute value
    assertions, search attribute lists, and\n   other places where the client desires
    to provide an attribute\n   description matching of a range of language tags associated
    with\n   attributes.\n   A language range option conforms to the following ABNF
    [RFC2234]:\n      language-range-option = \"lang-\" [ Language-Tag \"-\" ]\n   where
    the Language-Tag production is as defined in BCP 47 [RFC3066].\n   This production
    and those it imports from [RFC2234] are provided in\n   Section 2.1 for convenience.\n
    \  A language range option matches a language tag option if the language\n   range
    option less the trailing \"-\" matches exactly the language tag\n   or if the
    language range option (including the trailing \"-\") matches\n   a prefix of the
    language tag option.  Note that the language range\n   option \"lang-\" matches
    all language tag options.\n   Examples of valid AttributeDescription containing
    language range\n   options:\n      givenName;lang-en-\n      CN;lang-\n      SN;lang-de-;lang-gem-\n
    \     O;lang-x-;x-foobar\n   A language range option is not a tagging option.
    \ Attributes cannot\n   be stored with language range options.  Any attempt to
    add or update\n   an attribute description with a language range option SHALL
    be\n   treated as an undefined attribute type and result in an error.\n   A language
    range option has no effect on the transfer encoding nor on\n   the syntax of the
    attribute values.\n   Servers SHOULD support assertion of language ranges for
    any attribute\n   type which they allow to be stored with language tags.\n"
  - contents:
    - "3.1.  Search Filter\n   If a language range option is present in an AttributeDescription
      in\n   an assertion, then for each entry within scope, the values of each\n
      \  attribute whose AttributeDescription consists of the same attribute\n   type
      or its subtypes and contains a language tag option matching the\n   language
      range option are to be returned.\n   Thus, for example, a filter of an equality
      match of type\n   \"name;lang-en-\" and assertion value \"Billy Ray\", against
      the\n   following directory entry:\n      dn: SN=Ray,DC=example,DC=com\n      objectClass:
      person                 DOES NOT MATCH (wrong type)\n      objectClass: extensibleObject
      \      DOES NOT MATCH (wrong type)\n      name;lang-en-US: Billy Ray          MATCHES\n
      \     name;lang-en-US: Billy Bob          DOES NOT MATCH (wrong value)\n      CN;lang-en-US:
      Billy Ray            MATCHES\n      CN;lang-en-US;x-foobar: Billy Ray   MATCHES\n
      \     CN;lang-en;x-foobar: Billy Ray      MATCHES\n      CN;x-foobar: Billy
      Ray              DOES NOT MATCH (no lang-)\n      name: Billy Ray                     DOES
      NOT MATCH (no lang-)\n      SN;lang-en-GB;lang-en-US: Billy Ray MATCHES\n      SN:
      Ray                             DOES NOT MATCH (no lang-,\n                                            wrong
      value)\n   Note that \"CN\" and \"SN\" are subtypes of \"name\".\n   If the
      server does not support storing attributes with language tag\n   options in
      the DIT, then any assertion which includes a language\n   range option will
      not match as it is an unrecognized attribute type.\n   No error would be returned
      because of this; a presence filter would\n   evaluate to FALSE and all other
      assertions to Undefined.\n"
    title: 3.1.  Search Filter
  - contents:
    - "3.2.  Requested Attributes in Search\n   Clients can provide language range
      options in each\n   AttributeDescription in the requested attribute list in
      a search\n   request.\n   If a language range option is provided in an attribute
      description,\n   then only attributes in a directory entry whose attribute\n
      \  descriptions have the same attribute type or its subtype and a\n   language
      tag option matching the provided language range option are\n   to be returned.
      \ Thus if a client requests just the attribute\n   \"name;lang-en-\", the server
      would return \"name;lang-en-US\" and\n   \"CN;lang-en;lang-ja\" but not \"SN\"
      nor \"name;lang-fr\".\n   Clients can provide in the attribute list multiple\n
      \  AttributeDescriptions which have the same base attribute type but\n   different
      options.  For example a client could provide both\n   \"name;lang-en-\" and
      \"name;lang-fr-\", and this would permit an\n   attribute whose type was name
      or subtype of name and with a language\n   tag option matching either language
      range option to be returned.\n   If a server does not support storing attributes
      with language tag\n   options in the DIT, then any attribute descriptions in
      the list which\n   include language range options are to be ignored, just as
      if they\n   were unknown attribute types.\n"
    title: 3.2.  Requested Attributes in Search
  - contents:
    - "3.3.  Compare\n   Language range options can be present in an AttributeDescription
      used\n   in a compare request AttributeValueAssertion.  This is to be treated\n
      \  by servers the same as the use of language range options in a search\n   filter
      with an equality match, as described in Section 3.1.  If there\n   is no attribute
      in the entry with the same subtype and a matching\n   language tag option, the
      noSuchAttributeType error will be returned.\n   Thus, for example, a compare
      request of type \"name;lang-\" and\n   assertion value \"Johann\", against the
      entry with the following\n   attributes:\n      objectClass: top\n      objectClass:
      person\n      givenName;lang-de-DE: Johann\n      CN: Johann Sibelius\n      SN:
      Sibelius\n   will cause the server to return compareTrue.  (Note that the language\n
      \  range option \"lang-\" matches any language tag option.)\n   However, if
      the client issued a compare request of type\n   \"name;lang-de\" and assertion
      value \"Sibelius\" against the above\n   entry, the request would fail with
      the noSuchAttributeType error.\n   If the server does not support storing attributes
      with language tag\n   options in the DIT, then any comparison which includes
      a language\n   range option will always fail to locate an attribute, and\n   noSuchAttributeType
      will be returned.\n"
    title: 3.3.  Compare
  title: 3.  Use of Language Ranges in LDAP
- contents:
  - "4.  Discovering Language Option Support\n   A server SHOULD indicate that it
    supports storing attributes with\n   language tag options in the DIT by publishing
    1.3.6.1.4.1.4203.1.5.4\n   as a value of the root DSE.\n   A server SHOULD indicate
    that it supports language range matching of\n   attributes with language tag options
    stored in the DIT by publishing\n   1.3.6.1.4.1.4203.1.5.5 as a value of the \"supportedFeatures\"\n
    \  [RFC3674] attribute in the root DSE.\n   A server MAY restrict use of language
    tag options to a subset of the\n   attribute types it recognizes.  This document
    does not define a\n   mechanism for determining which subset of attribute types
    can be used\n   with language tag options.\n"
  title: 4.  Discovering Language Option Support
- contents:
  - "5.  Interoperability with Non-supporting Implementations\n   Implementators of
    this specification should take care that their use\n   of language tag options
    does not impede proper function of\n   implementations which do not support language
    tags.\n   Per RFC 2251, \"an AttributeDescription with one or more options is\n
    \  treated as a subtype of the attribute type without any options.\"  A\n   non-supporting
    server will treat an AttributeDescription with any\n   language tag options as
    an unrecognized attribute type.  A non-\n   supporting client will either do the
    same, or will treat the\n   AttributeDescription as it would any other unknown
    subtype.\n   Typically, non-supporting clients simply ignore unrecognized subtypes\n
    \  (and unrecognized attribute types) of attributes they request.\n   To ensure
    proper function of non-supporting clients, supporting\n   clients SHOULD ensure
    that entries they populate with tagged values\n   are also populated with non-tagged
    values.\n   Additionally, supporting clients SHOULD be prepared to handle entries\n
    \  which are not populated with tagged values.\n"
  title: 5.  Interoperability with Non-supporting Implementations
- contents:
  - "6.  Security Considerations\n   Language tags and range options are used solely
    to indicate the\n   native language of values and in querying the directory for
    values\n   which fulfill the user's language needed.  These options are not\n
    \  known to raise specific security considerations.  However, the reader\n   should
    consider general directory security issues detailed in the\n   LDAP technical
    specification [RFC3377].\n"
  title: 6.  Security Considerations
- contents:
  - "7.  IANA Considerations\n   Registration of these protocol mechanisms [RFC3383]
    has been\n   completed by the IANA.\n   Subject: Request for LDAP Protocol Mechanism
    Registration\n   Object Identifier: 1.3.6.1.4.1.4203.1.5.4\n   Description: Language
    Tag Options\n   Object Identifier: 1.3.6.1.4.1.4203.1.5.5\n   Description: Language
    Range Options\n   Person & email address to contact for further information:\n
    \       Kurt Zeilenga <kurt@openldap.org>\n   Usage: Feature\n   Specification:
    RFC 3866\n   Author/Change Controller: IESG\n   Comments: none\n   These OIDs
    were assigned [ASSIGN] by OpenLDAP Foundation, under its\n   IANA-assigned private
    enterprise allocation [PRIVATE], for use in\n   this specification.\n"
  title: 7.  IANA Considerations
- contents:
  - "8.  Acknowledgments\n   This document is a revision of RFC 2596 by Mark Wahl
    and Tim Howes.\n   RFC 2596 was a product of the IETF ASID and LDAPEXT working
    groups.\n   This document also borrows from a number of IETF documents including\n
    \  BCP 47 by H. Alvestrand.\n"
  title: 8.  Acknowledgments
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [RFC2119]     Bradner, S., \"Key words for use
      in RFCs to Indicate\n                 Requirement Levels\", BCP 14, RFC 2119,
      March 1997.\n   [RFC2234]     Crocker, D., Ed. and P. Overell, \"Augmented BNF
      for\n                 Syntax Specifications: ABNF\", RFC 2234, November 1997.\n
      \  [RFC2251]     Wahl, M., Howes, T. and S. Kille, \"Lightweight\n                 Directory
      Access Protocol (v3)\", RFC 2251, December\n                 1997.\n   [RFC3066]
      \    Alvestrand, H., \"Tags for the Identification of\n                 Languages\",
      BCP 47, RFC 3066, January 2001.\n   [RFC3377]     Hodges, J. and R. Morgan,
      \"Lightweight Directory Access\n                 Protocol (v3): Technical Specification\",
      RFC 3377,\n                 September 2002.\n   [RFC3674]     Zeilenga, K.,
      \"Feature Discovery in Lightweight\n                 Directory Access Protocol
      (LDAP)\", RFC 3674, December\n                 2003.\n   [ASCII]       Coded
      Character Set--7-bit American Standard Code for\n                 Information
      Interchange, ANSI X3.4-1986.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [X.501]       International Telecommunication
      Union -\n                 Telecommunication Standardization Sector, \"The\n
      \                Directory -- Models,\" X.501(1997).\n   [RFC3383]     Zeilenga,
      K., \"Internet Assigned Numbers Authority\n                 (IANA) Considerations
      for Lightweight Directory Access\n                 Protocol (LDAP)\", BCP 64,
      RFC 3383, September 2002.\n   [ASSIGN]      OpenLDAP Foundation, \"OpenLDAP
      OID Delegations\",\n                 http://www.openldap.org/foundation/oid-delegate.txt.\n
      \  [PRIVATE]     IANA, \"Private Enterprise Numbers\",\n                 http://www.iana.org/assignments/enterprise-numbers.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Appendix A. Differences from RFC 2596\n   This document adds support for language
    ranges, provides a mechanism\n   that a client can use to discover whether a server
    supports language\n   tags and ranges, and clarifies how attributes with multiple
    language\n   tags are to be treated.  This document is a significant rewrite of\n
    \  RFC 2596.\n"
  title: Appendix A. Differences from RFC 2596
- contents:
  - "Appendix B. Differences from X.500(1997)\n   X.500(1997) [X.501] defines a different
    mechanism, contexts, as the\n   means of representing language tags (codes).  This
    section summarizes\n   the major differences in approach.\n   a) An X.500 operation
    which has specified a language code on a value\n      matches a value in the directory
    without a language code.\n   b) LDAP references BCP 47 [RFC3066], which allows
    for IANA\n      registration of new tags as well as unregistered tags.\n   c)
    LDAP supports language ranges (new in this revision).\n   d) LDAP does not allow
    language tags (and ranges) in distinguished\n      names.\n   e) X.500 describes
    subschema administration procedures to allow\n      language codes to be associated
    with particular attributes types.\n"
  title: Appendix B. Differences from X.500(1997)
- contents:
  - "Editor's Address\n   Kurt D. Zeilenga\n   OpenLDAP Foundation\n   EMail: Kurt@OpenLDAP.org\n"
  title: Editor's Address
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2004).  This
    document is subject\n   to the rights, licenses and restrictions contained in
    BCP 78, and\n   except as set forth therein, the authors retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
