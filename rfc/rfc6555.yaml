- title: __initial_text__
  contents:
  - '             Happy Eyeballs: Success with Dual-Stack Hosts

    '
- title: Abstract
  contents:
  - "Abstract\n   When a server's IPv4 path and protocol are working, but the server's\n\
    \   IPv6 path and protocol are not working, a dual-stack client\n   application\
    \ experiences significant connection delay compared to an\n   IPv4-only client.\
    \  This is undesirable because it causes the dual-\n   stack client to have a\
    \ worse user experience.  This document\n   specifies requirements for algorithms\
    \ that reduce this user-visible\n   delay and provides an algorithm.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6555.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n     1.1.  Additional Network and Host Traffic  . . . . . .\
    \ . . . . .  3\n   2.  Notational Conventions . . . . . . . . . . . . . . . .\
    \ . . . .  3\n   3.  Problem Statement  . . . . . . . . . . . . . . . . . . .\
    \ . . .  4\n     3.1.  Hostnames  . . . . . . . . . . . . . . . . . . . . . .\
    \ . .  4\n     3.2.  Delay When IPv6 Is Not Accessible  . . . . . . . . . . .\
    \ .  5\n   4.  Algorithm Requirements . . . . . . . . . . . . . . . . . . . .\
    \  6\n     4.1.  Delay IPv4 . . . . . . . . . . . . . . . . . . . . . . . .  7\n\
    \     4.2.  Stateful Behavior When IPv6 Fails  . . . . . . . . . . . .  8\n  \
    \   4.3.  Reset on Network (Re-)Initialization . . . . . . . . . . .  9\n    \
    \ 4.4.  Abandon Non-Winning Connections  . . . . . . . . . . . . .  9\n   5. \
    \ Additional Considerations  . . . . . . . . . . . . . . . . . . 10\n     5.1.\
    \  Determining Address Type . . . . . . . . . . . . . . . . . 10\n     5.2.  Debugging\
    \ and Troubleshooting  . . . . . . . . . . . . . . 10\n     5.3.  Three or More\
    \ Interfaces . . . . . . . . . . . . . . . . . 10\n     5.4.  A and AAAA Resource\
    \ Records  . . . . . . . . . . . . . . . 10\n     5.5.  Connection Timeout . .\
    \ . . . . . . . . . . . . . . . . . . 11\n     5.6.  Interaction with Same-Origin\
    \ Policy  . . . . . . . . . . . 11\n     5.7.  Implementation Strategies  . .\
    \ . . . . . . . . . . . . . . 12\n   6.  Example Algorithm  . . . . . . . . .\
    \ . . . . . . . . . . . . . 12\n   7.  Security Considerations  . . . . . . .\
    \ . . . . . . . . . . . . 12\n   8.  Acknowledgements . . . . . . . . . . . .\
    \ . . . . . . . . . . . 13\n   9.  References . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . 13\n     9.1.  Normative References . . . . . . . . . .\
    \ . . . . . . . . . 13\n     9.2.  Informative References . . . . . . . . . .\
    \ . . . . . . . . 13\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   In order to use applications over IPv6, it is necessary\
    \ that users\n   enjoy nearly identical performance as compared to IPv4.  A\n\
    \   combination of today's applications, IPv6 tunneling, IPv6 service\n   providers,\
    \ and some of today's content providers all cause the user\n   experience to suffer\
    \ (Section 3).  For IPv6, a content provider may\n   ensure a positive user experience\
    \ by using a DNS white list of IPv6\n   service providers who peer directly with\
    \ them (e.g., [WHITELIST]).\n   However, this does not scale well (to the number\
    \ of DNS servers\n   worldwide or the number of content providers worldwide) and\
    \ does\n   react to intermittent network path outages.\n   Instead, applications\
    \ reduce connection setup delays themselves, by\n   more aggressively making connections\
    \ on IPv6 and IPv4.  There are a\n   variety of algorithms that can be envisioned.\
    \  This document\n   specifies requirements for any such algorithm, with the goals\
    \ that\n   the network and servers not be inordinately harmed with a simple\n\
    \   doubling of traffic on IPv6 and IPv4 and the host's address\n   preference\
    \ be honored (e.g., [RFC3484]).\n"
- title: 1.1.  Additional Network and Host Traffic
  contents:
  - "1.1.  Additional Network and Host Traffic\n   Additional network traffic and\
    \ additional server load is created due\n   to the recommendations in this document,\
    \ especially when connections\n   to the preferred address family (usually IPv6)\
    \ are not completing\n   quickly.\n   The procedures described in this document\
    \ retain a quality user\n   experience while transitioning from IPv4-only to dual\
    \ stack, while\n   still giving IPv6 a slight preference over IPv4 (in order to\
    \ remove\n   load from IPv4 networks and, most importantly, to reduce the load\
    \ on\n   IPv4 network address translators).  The user experience is improved\n\
    \   to the slight detriment of the network, DNS server, and server that\n   are\
    \ serving the user.\n"
- title: 2.  Notational Conventions
  contents:
  - "2.  Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 3.  Problem Statement
  contents:
  - "3.  Problem Statement\n   The basis of the IPv6/IPv4 selection problem was first\
    \ described in\n   1994 in [RFC1671]:\n      The dual-stack code may get two addresses\
    \ back from DNS; which\n      does it use?  During the many years of transition\
    \ the Internet\n      will contain black holes.  For example, somewhere on the\
    \ way from\n      IPng host A to IPng host B there will sometimes (unpredictably)\
    \ be\n      IPv4-only routers which discard IPng packets.  Also, the state of\n\
    \      the DNS does not necessarily correspond to reality.  A host for\n     \
    \ which DNS claims to know an IPng address may in fact not be\n      running IPng\
    \ at a particular moment; thus an IPng packet to that\n      host will be discarded\
    \ on delivery.  Knowing that a host has both\n      IPv4 and IPng addresses gives\
    \ no information about black holes.  A\n      solution to this must be proposed\
    \ and it must not depend on\n      manually maintained information.  (If this\
    \ is not solved, the\n      dual-stack approach is no better than the packet translation\n\
    \      approach.)\n   As discussed in more detail in Section 3.1, it is important\
    \ that the\n   same hostname be used for IPv4 and IPv6.\n   As discussed in more\
    \ detail in Section 3.2, IPv6 connectivity is\n   broken to specific prefixes\
    \ or specific hosts or is slower than\n   native IPv4 connectivity.\n   The mechanism\
    \ described in this document is directly applicable to\n   connection-oriented\
    \ transports (e.g., TCP, SCTP), which is the scope\n   of this document.  For\
    \ connectionless transport protocols (e.g.,\n   UDP), a similar mechanism can\
    \ be used if the application has request/\n   response semantics (e.g., as done\
    \ by Interactive Connectivity\n   Establishment (ICE) to select a working IPv6\
    \ or IPv4 media path\n   [RFC6157]).\n"
- title: 3.1.  Hostnames
  contents:
  - "3.1.  Hostnames\n   Hostnames are often used between users to exchange pointers\
    \ to\n   content -- such as on social networks, email, instant messaging, or\n\
    \   other systems.  Using separate namespaces (e.g., \"ipv6.example.com\"),\n\
    \   which are only accessible with certain client technology (e.g., an\n   IPv6\
    \ client) and dependencies (e.g., a working IPv6 path), causes\n   namespace fragmentation\
    \ and reduces the ability for users to share\n   hostnames.  It also complicates\
    \ printed material that includes the\n   hostname.\n   The algorithm described\
    \ in this document allows production hostnames\n   to avoid these problematic\
    \ references to IPv4 or IPv6.\n"
- title: 3.2.  Delay When IPv6 Is Not Accessible
  contents:
  - "3.2.  Delay When IPv6 Is Not Accessible\n   When IPv6 connectivity is impaired,\
    \ today's IPv6-capable applications\n   (e.g., web browsers, email clients, instant\
    \ messaging clients) incur\n   many seconds of delay before falling back to IPv4.\
    \  This delays\n   overall application operation, including harming the user's\n\
    \   experience with IPv6, which will slow the acceptance of IPv6, because\n  \
    \ IPv6 is frequently disabled in its entirety on the end systems to\n   improve\
    \ the user experience.\n   Reasons for such failure include no connection to the\
    \ IPv6 Internet,\n   broken 6to4 or Teredo tunnels, and broken IPv6 peering. \
    \ The\n   following diagram shows this behavior.\n   The algorithm described in\
    \ this document allows clients to connect to\n   servers without significant delay,\
    \ even if a path or the server is\n   slow or down.\n           DNS Server   \
    \               Client                  Server\n               |             \
    \             |                       |\n         1.    |<--www.example.com A?-----|\
    \                       |\n         2.    |<--www.example.com AAAA?--|       \
    \                |\n         3.    |---192.0.2.1------------->|              \
    \         |\n         4.    |---2001:db8::1----------->|                     \
    \  |\n         5.    |                          |                       |\n  \
    \       6.    |                          |==TCP SYN, IPv6===>X   |\n         7.\
    \    |                          |==TCP SYN, IPv6===>X   |\n         8.    |  \
    \                        |==TCP SYN, IPv6===>X   |\n         9.    |         \
    \                 |                       |\n         10.   |                \
    \          |--TCP SYN, IPv4------->|\n         11.   |                       \
    \   |<-TCP SYN+ACK, IPv4----|\n         12.   |                          |--TCP\
    \ ACK, IPv4------->|\n                 Figure 1: Existing Behavior Message Flow\n\
    \   The client obtains the IPv4 and IPv6 records for the server (1-4).\n   The\
    \ client attempts to connect using IPv6 to the server, but the IPv6\n   path is\
    \ broken (6-8), which consumes several seconds of time.\n   Eventually, the client\
    \ attempts to connect using IPv4 (10), which\n   succeeds.\n   Delays experienced\
    \ by users of various browser and operating system\n   combinations have been\
    \ studied [Experiences].\n"
- title: 4.  Algorithm Requirements
  contents:
  - "4.  Algorithm Requirements\n   A \"Happy Eyeballs\" algorithm has two primary\
    \ goals:\n   1.  Provides fast connection for users, by quickly attempting to\n\
    \       connect using IPv6 and (if that connection attempt is not quickly\n  \
    \     successful) to connect using IPv4.\n   2.  Avoids thrashing the network,\
    \ by not (always) making simultaneous\n       connection attempts on both IPv6\
    \ and IPv4.\n   The basic idea is depicted in the following diagram:\n       \
    \    DNS Server                  Client                  Server\n            \
    \   |                          |                       |\n         1.    |<--www.example.com\
    \ A?-----|                       |\n         2.    |<--www.example.com AAAA?--|\
    \                       |\n         3.    |---192.0.2.1------------->|       \
    \                |\n         4.    |---2001:db8::1----------->|              \
    \         |\n         5.    |                          |                     \
    \  |\n         6.    |                          |==TCP SYN, IPv6===>X   |\n  \
    \       7.    |                          |--TCP SYN, IPv4------->|\n         8.\
    \    |                          |<-TCP SYN+ACK, IPv4----|\n         9.    |  \
    \                        |--TCP ACK, IPv4------->|\n        10.    |         \
    \                 |==TCP SYN, IPv6===>X   |\n               Figure 2: Happy Eyeballs\
    \ Flow 1, IPv6 Broken\n   In the diagram above, the client sends two TCP SYNs\
    \ at the same time\n   over IPv6 (6) and IPv4 (7).  In the diagram, the IPv6 path\
    \ is broken\n   but has little impact to the user because there is no long delay\n\
    \   before using IPv4.  The IPv6 path is retried until the application\n   gives\
    \ up (10).\n   After performing the above procedure, the client learns whether\n\
    \   connections to the host's IPv6 or IPv4 address were successful.  The\n   client\
    \ MUST cache information regarding the outcome of each\n   connection attempt,\
    \ and it uses that information to avoid thrashing\n   the network with subsequent\
    \ attempts.  In the example above, the\n   cache indicates that the IPv6 connection\
    \ attempt failed, and\n   therefore the system will prefer IPv4 instead.  Cache\
    \ entries should\n   be flushed when their age exceeds a system-defined maximum\
    \ on the\n   order of 10 minutes.\n           DNS Server                  Client\
    \                  Server\n               |                          |       \
    \                |\n         1.    |<--www.example.com A?-----|              \
    \         |\n         2.    |<--www.example.com AAAA?--|                     \
    \  |\n         3.    |---192.0.2.1------------->|                       |\n  \
    \       4.    |---2001:db8::1----------->|                       |\n         5.\
    \    |                          |                       |\n         6.    |  \
    \                        |==TCP SYN, IPv6=======>|\n         7.    |         \
    \                 |--TCP SYN, IPv4------->|\n         8.    |                \
    \          |<=TCP SYN+ACK, IPv6====|\n         9.    |                       \
    \   |<-TCP SYN+ACK, IPv4----|\n        10.    |                          |==TCP\
    \ ACK, IPv6=======>|\n        11.    |                          |--TCP ACK, IPv4------->|\n\
    \        12.    |                          |--TCP RST, IPv4------->|\n       \
    \        Figure 3: Happy Eyeballs Flow 2, IPv6 Working\n   The diagram above shows\
    \ a case where both IPv6 and IPv4 are working,\n   and IPv4 is abandoned (12).\n\
    \   Any Happy Eyeballs algorithm will persist in products for as long as\n   the\
    \ client host is dual-stacked, which will persist as long as there\n   are IPv4-only\
    \ servers on the Internet -- the so-called \"long tail\".\n   Over time, as most\
    \ content is available via IPv6, the amount of IPv4\n   traffic will decrease.\
    \  This means that the IPv4 infrastructure will,\n   over time, be sized to accommodate\
    \ that decreased (and decreasing)\n   amount of traffic.  It is critical that\
    \ a Happy Eyeballs algorithm\n   not cause a surge of unnecessary traffic on that\
    \ IPv4 infrastructure.\n   To meet that goal, compliant Happy Eyeballs algorithms\
    \ must adhere to\n   the requirements in this section.\n"
- title: 4.1.  Delay IPv4
  contents:
  - "4.1.  Delay IPv4\n   The transition to IPv6 is likely to produce a mix of different\
    \ hosts\n   within a subnetwork -- hosts that are IPv4-only, hosts that are IPv6-\n\
    \   only (e.g., sensors), and dual-stack hosts.  This mix of hosts will\n   exist\
    \ both within an administrative domain (a single home,\n   enterprise, hotel,\
    \ or coffee shop) and between administrative\n   domains.  For example, a single\
    \ home might have an IPv4-only\n   television in one room and a dual-stack television\
    \ in another room.\n   As another example, another subscriber might have hosts\
    \ that are all\n   capable of dual-stack operation.\n   Due to IPv4 exhaustion,\
    \ it is likely that a subscriber's hosts (both\n   IPv4-only hosts and dual-stack\
    \ hosts) will be sharing an IPv4 address\n   with other subscribers.  The dual-stack\
    \ hosts have an advantage: they\n   can utilize IPv6 or IPv4, which means they\
    \ can utilize the technique\n   described in this document.  The IPv4-only hosts\
    \ have a disadvantage:\n   they can only utilize IPv4.  If all hosts (dual-stack\
    \ and IPv4-only)\n   are using IPv4, there is additional contention for the shared\
    \ IPv4\n   address.  The IPv4-only hosts cannot avoid that contention (as they\n\
    \   can only use IPv4), while the dual-stack hosts can avoid it by using\n   IPv6.\n\
    \   As dual-stack hosts proliferate and content becomes available over\n   IPv6,\
    \ there will be proportionally less IPv4 traffic.  This is true\n   especially\
    \ for dual-stack hosts that do not implement Happy Eyeballs,\n   because those\
    \ dual-stack hosts have a very strong preference to use\n   IPv6 (with timeouts\
    \ in the tens of seconds before they will attempt\n   to use IPv4).\n   When deploying\
    \ IPv6, both content providers and Internet Service\n   Providers (who supply\
    \ mechanisms for IPv4 address sharing such as\n   Carrier-Grade NAT (CGN)) will\
    \ want to reduce their investment in IPv4\n   equipment -- load-balancers, peering\
    \ links, and address sharing\n   devices.  If a Happy Eyeballs implementation\
    \ treats IPv6 and IPv4\n   equally by connecting to whichever address family is\
    \ fastest, it will\n   contribute to load on IPv4.  This load impacts IPv4-only\
    \ devices (by\n   increasing contention of IPv4 address sharing and increasing\
    \ load on\n   IPv4 load-balancers).  Because of this, ISPs and content providers\n\
    \   will find it impossible to reduce their investment in IPv4 equipment.\n  \
    \ This means that costs to migrate to IPv6 are increased because the\n   investment\
    \ in IPv4 cannot be reduced.  Furthermore, using only a\n   metric that measures\
    \ the connection speed ignores the benefits that\n   IPv6 brings when compared\
    \ with IPv4 address sharing, such as improved\n   geo-location [RFC6269] and the\
    \ lack of fate-sharing due to traversing\n   a large translator.\n   Thus, to\
    \ avoid harming IPv4-only hosts, implementations MUST prefer\n   the first IP\
    \ address family returned by the host's address preference\n   policy, unless\
    \ implementing a stateful algorithm described in\n   Section 4.2.  This usually\
    \ means giving preference to IPv6 over IPv4,\n   although that preference can\
    \ be overridden by user configuration or\n   by network configuration [ADDR-SELECT].\
    \  If the host's policy is\n   unknown or not attainable, implementations MUST\
    \ prefer IPv6 over\n   IPv4.\n"
- title: 4.2.  Stateful Behavior When IPv6 Fails
  contents:
  - "4.2.  Stateful Behavior When IPv6 Fails\n   Some Happy Eyeballs algorithms are\
    \ stateful -- that is, the algorithm\n   will remember that IPv6 always fails,\
    \ or that IPv6 to certain\n   prefixes always fails, and so on.  This section\
    \ describes such\n   algorithms.  Stateless algorithms, which do not remember\
    \ the success/\n   failure of previous connections, are not discussed in this\
    \ section.\n   After making a connection attempt on the preferred address family\n\
    \   (e.g., IPv6) and failing to establish a connection within a certain\n   time\
    \ period (see Section 5.5), a Happy Eyeballs implementation will\n   decide to\
    \ initiate a second connection attempt using the same address\n   family or the\
    \ other address family.\n   Such an implementation MAY make subsequent connection\
    \ attempts (to\n   the same host or to other hosts) on the successful address\
    \ family\n   (e.g., IPv4).  So long as new connections are being attempted by\
    \ the\n   host, such an implementation MUST occasionally make connection\n   attempts\
    \ using the host's preferred address family, as it may have\n   become functional\
    \ again, and it SHOULD do so every 10 minutes.  The\n   10-minute delay before\
    \ retrying a failed address family avoids the\n   simple doubling of connection\
    \ attempts on both IPv6 and IPv4.\n   Implementation note: this can be achieved\
    \ by flushing Happy Eyeballs\n   state every 10 minutes, which does not significantly\
    \ harm the\n   application's subsequent connection setup time.  If connections\
    \ using\n   the preferred address family are again successful, the preferred\n\
    \   address family SHOULD be used for subsequent connections.  Because\n   this\
    \ implementation is stateful, it MAY track connection success (or\n   failure)\
    \ based on IPv6 or IPv4 prefix (e.g., connections to the same\n   prefix assigned\
    \ to the interface are successful whereas connections\n   to other prefixes are\
    \ failing).\n"
- title: 4.3.  Reset on Network (Re-)Initialization
  contents:
  - "4.3.  Reset on Network (Re-)Initialization\n   Because every network has different\
    \ characteristics (e.g., working or\n   broken IPv6 or IPv4 connectivity), a Happy\
    \ Eyeballs algorithm SHOULD\n   re-initialize when the interface is connected\
    \ to a new network.\n   Interfaces can determine network (re-)initialization by\
    \ a variety of\n   mechanisms (e.g., Detecting Network Attachment in IPv4 (DNAv4)\n\
    \   [RFC4436], DNAv6 [RFC6059]).\n   If the client application is a web browser,\
    \ see also Section 5.6.\n"
- title: 4.4.  Abandon Non-Winning Connections
  contents:
  - "4.4.  Abandon Non-Winning Connections\n   It is RECOMMENDED that the non-winning\
    \ connections be abandoned, even\n   though they could -- in some cases -- be\
    \ put to reasonable use.\n      Justification: This reduces the load on the server\
    \ (file\n      descriptors, TCP control blocks) and stateful middleboxes (NAT\
    \ and\n      firewalls).  Also, if the abandoned connection is IPv4, this\n  \
    \    reduces IPv4 address sharing contention.\n      HTTP: The design of some\
    \ sites can break because of HTTP cookies\n      that incorporate the client's\
    \ IP address and require all\n      connections be from the same IP address. \
    \ If some connections from\n      the same client are arriving from different\
    \ IP addresses (or\n      worse, different IP address families), such applications\
    \ will\n      break.  Additionally, for HTTP, using the non-winning connection\n\
    \      can interfere with the browser's same-origin policy (see\n      Section\
    \ 5.6).\n"
- title: 5.  Additional Considerations
  contents:
  - "5.  Additional Considerations\n   This section discusses considerations related\
    \ to Happy Eyeballs.\n"
- title: 5.1.  Determining Address Type
  contents:
  - "5.1.  Determining Address Type\n   For some transitional technologies such as\
    \ a dual-stack host, it is\n   easy for the application to recognize the native\
    \ IPv6 address\n   (learned via a AAAA query) and the native IPv4 address (learned\
    \ via\n   an A query).  While IPv6/IPv4 translation makes that difficult, IPv6/\n\
    \   IPv4 translators do not need to be deployed on networks with dual-\n   stack\
    \ clients because dual-stack clients can use their native IP\n   address family.\n"
- title: 5.2.  Debugging and Troubleshooting
  contents:
  - "5.2.  Debugging and Troubleshooting\n   This mechanism is aimed at ensuring a\
    \ reliable user experience\n   regardless of connectivity problems affecting any\
    \ single transport.\n   However, this naturally means that applications employing\
    \ these\n   techniques are by default less useful for diagnosing issues with a\n\
    \   particular address family.  To assist in that regard, the\n   implementations\
    \ MAY also provide a mechanism to disable their Happy\n   Eyeballs behavior via\
    \ a user setting, and to provide data useful for\n   debugging (e.g., a log or\
    \ way to review current preferences).\n"
- title: 5.3.  Three or More Interfaces
  contents:
  - "5.3.  Three or More Interfaces\n   A dual-stack host normally has two logical\
    \ interfaces: an IPv6\n   interface and an IPv4 interface.  However, a dual-stack\
    \ host might\n   have more than two logical interfaces because of a VPN (where\
    \ a third\n   interface is the tunnel address, often assigned by the remote\n\
    \   corporate network), because of multiple physical interfaces such as\n   wired\
    \ and wireless Ethernet, because the host belongs to multiple\n   VLANs, or other\
    \ reasons.  The interaction of Happy Eyeballs with more\n   than two logical interfaces\
    \ is for further study.\n"
- title: 5.4.  A and AAAA Resource Records
  contents:
  - "5.4.  A and AAAA Resource Records\n   It is possible that a DNS query for an\
    \ A or AAAA resource record will\n   return more than one A or AAAA address. \
    \ When this occurs, it is\n   RECOMMENDED that a Happy Eyeballs implementation\
    \ order the responses\n   following the host's address preference policy and then\
    \ try the first\n   address.  If that fails after a certain time (see Section\
    \ 5.5), the\n   next address SHOULD be the IPv4 address.\n   If that fails to\
    \ connect after a certain time (see Section 5.5), a\n   Happy Eyeballs implementation\
    \ SHOULD try the other addresses\n   returned; the order of these connection attempts\
    \ is not important.\n   On the Internet today, servers commonly have multiple\
    \ A records to\n   provide load-balancing across their servers.  This same technique\n\
    \   would be useful for AAAA records, as well.  However, if multiple AAAA\n  \
    \ records are returned to a client that is not using Happy Eyeballs and\n   that\
    \ has broken IPv6 connectivity, it will further increase the delay\n   to fall\
    \ back to IPv4.  Thus, web site operators with native IPv6\n   connectivity SHOULD\
    \ NOT offer multiple AAAA records.  If Happy\n   Eyeballs is widely deployed in\
    \ the future, this recommendation might\n   be revisited.\n"
- title: 5.5.  Connection Timeout
  contents:
  - "5.5.  Connection Timeout\n   The primary purpose of Happy Eyeballs is to reduce\
    \ the wait time for\n   a dual-stack connection to complete, especially when the\
    \ IPv6 path is\n   broken and IPv6 is preferred.  Aggressive timeouts (on the\
    \ order of\n   tens of milliseconds) achieve this goal, but at the cost of network\n\
    \   traffic.  This network traffic may be billable on certain networks,\n   will\
    \ create state on some middleboxes (e.g., firewalls, intrusion\n   detection systems,\
    \ NATs), and will consume ports if IPv4 addresses\n   are shared.  For these reasons,\
    \ it is RECOMMENDED that connection\n   attempts be paced to give connections\
    \ a chance to complete.  It is\n   RECOMMENDED that connection attempts be paced\
    \ 150-250 ms apart to\n   balance human factors against network load.  Stateful\
    \ algorithms are\n   expected to be more aggressive (that is, make connection\
    \ attempts\n   closer together), as stateful algorithms maintain an estimate of\
    \ the\n   expected connection completion time.\n"
- title: 5.6.  Interaction with Same-Origin Policy
  contents:
  - "5.6.  Interaction with Same-Origin Policy\n   Web browsers implement a same-origin\
    \ policy [RFC6454] that causes\n   subsequent connections to the same hostname\
    \ to go to the same IPv4\n   (or IPv6) address as the previous successful connection.\
    \  This is\n   done to prevent certain types of attacks.\n   The same-origin policy\
    \ harms user-visible responsiveness if a new\n   connection fails (e.g., due to\
    \ a transient event such as router\n   failure or load-balancer failure).  While\
    \ it is tempting to use Happy\n   Eyeballs to maintain responsiveness, web browsers\
    \ MUST NOT change\n   their same-origin policy because of Happy Eyeballs, as that\
    \ would\n   create an additional security exposure.\n"
- title: 5.7.  Implementation Strategies
  contents:
  - "5.7.  Implementation Strategies\n   The simplest venue for the implementation\
    \ of Happy Eyeballs is within\n   the application itself.  The algorithm specified\
    \ in this document is\n   relatively simple to implement and would require no\
    \ specific support\n   from the operating system beyond the commonly available\
    \ APIs that\n   provide transport service.  It could also be added to applications\
    \ by\n   way of a specific Happy Eyeballs API, replacing or augmenting the\n \
    \  transport service APIs.\n   To improve the IPv6 connectivity experience for\
    \ legacy applications\n   (e.g., applications that simply rely on the operating\
    \ system's\n   address preference order), operating systems may consider more\n\
    \   sophisticated approaches.  These can include changing default address\n  \
    \ selection sorting [RFC3484] based on configuration received from the\n   network,\
    \ or observing connection failures to IPv6 and IPV4\n   destinations.\n"
- title: 6.  Example Algorithm
  contents:
  - "6.  Example Algorithm\n   What follows is the algorithm implemented in Google\
    \ Chrome and\n   Mozilla Firefox.\n   1.  Call getaddinfo(), which returns a list\
    \ of IP addresses sorted by\n       the host's address preference policy.\n  \
    \ 2.  Initiate a connection attempt with the first address in that list\n    \
    \   (e.g., IPv6).\n   3.  If that connection does not complete within a short\
    \ period of\n       time (Firefox and Chrome use 300 ms), initiate a connection\n\
    \       attempt with the first address belonging to the other address\n      \
    \ family (e.g., IPv4).\n   4.  The first connection that is established is used.\
    \  The other\n       connection is discarded.\n   If an algorithm were to cache\
    \ connection success/failure, the caching\n   would occur after step 4 determined\
    \ which connection was successful.\n   Other example algorithms include [Perreault]\
    \ and [Andrews].\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   See Sections 4.4 and 5.6.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   The mechanism described in this paper was inspired by\
    \ Stuart\n   Cheshire's discussion at the IAB Plenary at IETF 72, the author's\n\
    \   understanding of Safari's operation with SRV records, ICE [RFC5245],\n   the\
    \ current IPv4/IPv6 behavior of SMTP mail transfer agents, and the\n   implementation\
    \ of Happy Eyeballs in Google Chrome and Mozilla\n   Firefox.\n   Thanks to Fred\
    \ Baker, Jeff Kinzli, Christian Kuhtz, and Iljitsch van\n   Beijnum for fostering\
    \ the creation of this document.\n   Thanks to Scott Brim, Rick Jones, Stig Venaas,\
    \ Erik Kline, Bjoern\n   Zeeb, Matt Miller, Dave Thaler, Dmitry Anipko, Brian\
    \ Carpenter, and\n   David Crocker for their feedback.\n   Thanks to Javier Ubillos,\
    \ Simon Perreault, and Mark Andrews for the\n   active feedback and the experimental\
    \ work on the independent\n   practical implementations that they created.\n \
    \  Also the authors would like to thank the following individuals who\n   participated\
    \ in various email discussions on this topic: Mohacsi\n   Janos, Pekka Savola,\
    \ Ted Lemon, Carlos Martinez-Cagnazzo, Simon\n   Perreault, Jack Bates, Jeroen\
    \ Massar, Fred Baker, Javier Ubillos,\n   Teemu Savolainen, Scott Brim, Erik Kline,\
    \ Cameron Byrne, Daniel\n   Roesen, Guillaume Leclanche, Mark Smith, Gert Doering,\
    \ Martin\n   Millnert, Tim Durack, and Matthew Palmer.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]     Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                 Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC3484]     Draves, R., \"Default Address Selection for Internet\n\
    \                 Protocol version 6 (IPv6)\", RFC 3484, February 2003.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [ADDR-SELECT] Matsumoto, A., Fujisaki, T., Kato,\
    \ J., and T. Chown,\n                 \"Distributing Address Selection Policy\
    \ using DHCPv6\",\n                 Work in Progress, February 2012.\n   [Andrews]\
    \     Andrews, M., \"How to connect to a multi-homed server\n                \
    \ over TCP\", January 2011, <http://www.isc.org/community/\n                 blog/201101/how-to-connect-to-a-multi-homed-server-\n\
    \                 over-tcp>.\n   [Experiences] Savolainen, T., Miettinen, N.,\
    \ Veikkolainen, S., Chown,\n                 T., and J. Morse, \"Experiences of\
    \ host behavior in\n                 broken IPv6 networks\", March 2011,\n   \
    \              <http://www.ietf.org/proceedings/80/slides/\n                 v6ops-12.pdf>.\n\
    \   [Perreault]   Perreault, S., \"Happy Eyeballs in Erlang\", February\n    \
    \             2011, <http://www.viagenie.ca/news/\n                 index.html#happy_eyeballs_erlang>.\n\
    \   [RFC1671]     Carpenter, B., \"IPng White Paper on Transition and\n      \
    \           Other Considerations\", RFC 1671, August 1994.\n   [RFC4436]     Aboba,\
    \ B., Carlson, J., and S. Cheshire, \"Detecting\n                 Network Attachment\
    \ in IPv4 (DNAv4)\", RFC 4436, March\n                 2006.\n   [RFC5245]   \
    \  Rosenberg, J., \"Interactive Connectivity Establishment\n                 (ICE):\
    \ A Protocol for Network Address Translator (NAT)\n                 Traversal\
    \ for Offer/Answer Protocols\", RFC 5245, April\n                 2010.\n   [RFC6059]\
    \     Krishnan, S. and G. Daley, \"Simple Procedures for\n                 Detecting\
    \ Network Attachment in IPv6\", RFC 6059,\n                 November 2010.\n \
    \  [RFC6157]     Camarillo, G., El Malki, K., and V. Gurbani, \"IPv6\n       \
    \          Transition in the Session Initiation Protocol (SIP)\",\n          \
    \       RFC 6157, April 2011.\n   [RFC6269]     Ford, M., Boucadair, M., Durand,\
    \ A., Levis, P., and P.\n                 Roberts, \"Issues with IP Address Sharing\"\
    , RFC 6269,\n                 June 2011.\n   [RFC6454]     Barth, A., \"The Web\
    \ Origin Concept\", RFC 6454, December\n                 2011.\n   [WHITELIST]\
    \   Google, \"Google over IPv6\",\n                 <http://www.google.com/intl/en/ipv6>.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Dan Wing\n   Cisco Systems, Inc.\n   170 West Tasman Drive\n\
    \   San Jose, CA  95134\n   USA\n   EMail: dwing@cisco.com\n   Andrew Yourtchenko\n\
    \   Cisco Systems, Inc.\n   De Kleetlaan, 7\n   Diegem  B-1831\n   Belgium\n \
    \  EMail: ayourtch@cisco.com\n"
