- title: __initial_text__
  contents:
  - '                  Inverse Address Resolution Protocol

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: 2.  Abstract
  contents:
  - "2.  Abstract\n   This memo describes additions to ARP that will allow a station\
    \ to\n   request a protocol address corresponding to a given hardware address.\n\
    \   Specifically, this applies to Frame Relay stations that may have a\n   Data\
    \ Link Connection Identifier (DLCI), the Frame Relay equivalent of\n   a hardware\
    \ address, associated with an established Permanent Virtual\n   Circuit (PVC),\
    \ but do not know the protocol address of the station on\n   the other side of\
    \ this connection.  It will also apply to other\n   networks with similar circumstances.\n\
    \   This memo replaces RFC 1293.  The changes from RFC 1293 are minor\n   changes\
    \ to formalize the language, the additions of a packet diagram\n   and an example\
    \ in section 7.2, and a new security section.\n"
- title: 3.  Conventions
  contents:
  - "3.  Conventions\n   The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT,\
    \ SHOULD,\n   SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL, when they appear in\
    \ this\n   document, are to be interpreted as described in [5].\n"
- title: 4.  Introduction
  contents:
  - "4.  Introduction\n   This document will rely heavily on Frame Relay as an example\
    \ of how\n   the Inverse Address Resolution Protocol (InARP) can be useful. It\
    \ is\n   not, however, intended that InARP be used exclusively with Frame\n  \
    \ Relay.  InARP may be used in any network that provides destination\n   hardware\
    \ addresses without indicating corresponding protocol\n   addresses.\n"
- title: 5.  Motivation
  contents:
  - "5.  Motivation\n   The motivation for the development of Inverse ARP is a result\
    \ of the\n   desire to make dynamic address resolution within Frame Relay both\n\
    \   possible and efficient.  Permanent virtual circuits (PVCs) and\n   eventually\
    \ switched virtual circuits (SVCs) are identified by a Data\n   Link Connection\
    \ Identifier (DLCI).  These DLCIs define a single\n   virtual connection through\
    \ the wide area network (WAN) and may be\n   thought of as the Frame Relay equivalent\
    \ to a hardware address.\n   Periodically, through the exchange of signaling messages,\
    \ a network\n   may announce a new virtual circuit with its corresponding DLCI.\n\
    \   Unfortunately, protocol addressing is not included in the\n   announcement.\
    \  The station receiving such an indication will learn of\n   the new connection,\
    \ but will not be able to address the other side.\n   Without a new configuration\
    \ or a mechanism for discovering the\n   protocol address of the other side, this\
    \ new virtual circuit is\n   unusable.\n   Other resolution methods were considered\
    \ to solve the problems, but\n   were rejected.  Reverse ARP [4], for example,\
    \ seemed like a good\n   candidate, but the response to a request is the protocol\
    \ address of\n   the requesting station, not the station receiving the request.\
    \  IP\n   specific mechanisms were limiting since they would not allow\n   resolution\
    \ of other protocols other than IP. For this reason, the ARP\n   protocol was\
    \ expanded.\n   Inverse Address Resolution Protocol (InARP) will allow a Frame\
    \ Relay\n   station to discover the protocol address of a station associated with\n\
    \   the virtual circuit.  It is more efficient than sending ARP messages\n   on\
    \ every VC for every address the system wants to resolve and it is\n   more flexible\
    \ than relying on static configuration.\n"
- title: 6.  Packet Format
  contents:
  - "6.  Packet Format\n   Inverse ARP is an extension of the existing ARP.  Therefore,\
    \ it has\n   the same format as standard ARP.\n      ar$hrd   16 bits        \
    \ Hardware type\n      ar$pro   16 bits         Protocol type\n      ar$hln  \
    \  8 bits         Byte length of each hardware address (n)\n      ar$pln    8\
    \ bits         Byte length of each protocol address (m)\n      ar$op    16 bits\
    \         Operation code\n      ar$sha    nbytes         source hardware address\n\
    \      ar$spa    mbytes         source protocol address\n      ar$tha    nbytes\
    \         target hardware address\n      ar$tpa    mbytes         target protocol\
    \ address\n   Possible values for hardware and protocol types are the same as\
    \ those\n   for ARP and may be found in the current Assigned Numbers RFC [2].\n\
    \   Length of the hardware and protocol address are dependent on the\n   environment\
    \ in which InARP is running.  For example, if IP is running\n   over Frame Relay,\
    \ the hardware address length is either 2, 3, or 4,\n   and the protocol address\
    \ length is 4.\n   The operation code indicates the type of message, request or\n\
    \   response.\n      InARP request  = 8\n      InARP response = 9\n   These values\
    \ were chosen so as not to conflict with other ARP\n   extensions.\n"
- title: 7.  Protocol Operation
  contents:
  - "7.  Protocol Operation\n   Basic InARP operates essentially the same as ARP with\
    \ the exception\n   that InARP does not broadcast requests.  This is because the\
    \ hardware\n   address of the destination station is already known.\n   When an\
    \ interface supporting InARP becomes active, it should initiate\n   the InARP\
    \ protocol and format InARP requests for each active PVC for\n   which InARP is\
    \ active.  To do this, a requesting station simply\n   formats a request by inserting\
    \ its source hardware, source protocol\n   addresses and the known target hardware\
    \ address.  It then zero fills\n   the target protocol address field.  Finally,\
    \ it will encapsulate the\n   packet for the specific network and send it directly\
    \ to the target\n   station.\n   Upon receiving an InARP request, a station may\
    \ put the requester's\n   protocol address/hardware address mapping into its ARP\
    \ cache as it\n   would any ARP request.  Unlike other ARP requests, however,\
    \ the\n   receiving station may assume that any InARP request it receives is\n\
    \   destined for it.  For every InARP request, the receiving station\n   should\
    \ format a proper response using the source addresses from the\n   request as\
    \ the target addresses of the response.  If the station is\n   unable or unwilling\
    \ to reply, it ignores the request.\n   When the requesting station receives the\
    \ InARP response, it may\n   complete the ARP table entry and use the provided\
    \ address\n   information.  Note: as with ARP, information learned via InARP may\
    \ be\n   aged or invalidated under certain circumstances.\n"
- title: 7.1.  Operation with Multi-Addressed Hosts
  contents:
  - "7.1.  Operation with Multi-Addressed Hosts\n   In the context of this discussion,\
    \ a multi-addressed host will refer\n   to a host that has multiple protocol addresses\
    \ assigned to a single\n   interface.  If such a station receives an InARP request,\
    \ it must\n   choose one address with which to respond.  To make such a selection,\n\
    \   the receiving station must first look at the protocol address of the\n   requesting\
    \ station, and then respond with the protocol address\n   corresponding to the\
    \ network of the requester.  For example, if the\n   requesting station is probing\
    \ for an IP address, the responding\n   multi-addressed station should respond\
    \ with an IP address which\n   corresponds to the same subnet as the requesting\
    \ station.  If the\n   station does not have an address that is appropriate for\
    \ the request\n   it should not respond.  In the IP example, if the receiving\
    \ station\n   does not have an IP address assigned to the interface that is a\
    \ part\n   of the requested subnet, the receiving station would not respond.\n\
    \   A multi-addressed host should send an InARP request for each of the\n   addresses\
    \ defined for the given interface.  It should be noted,\n   however, that the\
    \ receiving side may answer some or none of the\n   requests depending on its\
    \ configuration.\n"
- title: 7.2.  Protocol Operation Within Frame Relay
  contents:
  - "7.2.  Protocol Operation Within Frame Relay\n   One case where Inverse ARP can\
    \ be used is on a frame relay interface\n   which supports signaling of DLCIs\
    \ via a data link management\n   interface.  An InARP equipped station connected\
    \ to such an interface\n   will format an InARP request and address it to the\
    \ new virtual\n   circuit.  If the other side supports InARP, it may return a\
    \ response\n   indicating the protocol address requested.\n   In a frame relay\
    \ environment, InARP packets are encapsulated using\n   the NLPID/SNAP format\
    \ defined in [3] which indicates the ARP\n   protocol.  Specifically, the packet\
    \ encapsulation will be as follows:\n               +----------+----------+\n\
    \               |    Q.922 address    |\n               +----------+----------+\n\
    \               |ctrl 0x03 | pad 00   |\n               +----------+----------+\n\
    \               |nlpid 0x80| oui 0x00 |\n               +----------+         \
    \ +\n               | oui (cont) 0x00 00  |\n               +----------+----------+\n\
    \               | pid 0x08 06         |\n               +----------+----------+\n\
    \               |          .          |\n               |          .         \
    \ |\n   The format for an InARP request itself is defined by the following:\n\
    \      ar$hrd - 0x000F the value assigned to Frame Relay\n      ar$pro - protocol\
    \ type for which you are searching\n                  (i.e.  IP = 0x0800)\n  \
    \    ar$hln - 2,3, or 4 byte addressing length\n      ar$pln - byte length of\
    \ protocol address for which you\n                  are searching (for IP = 4)\n\
    \      ar$op  - 8; InARP request\n      ar$sha - Q.922 [6] address of requesting\
    \ station\n      ar$spa - protocol address of requesting station\n      ar$tha\
    \ - Q.922 address of newly announced virtual circuit\n      ar$tpa - 0; This is\
    \ what is being requested\n   The InARP response will be completed similarly.\n\
    \      ar$hrd - 0x000F the value assigned to Frame Relay\n      ar$pro - protocol\
    \ type for which you are searching\n                 (i.e.  IP = 0x0800)\n   \
    \   ar$hln - 2,3, or 4 byte addressing length\n      ar$pln - byte length of protocol\
    \ address for which you\n                 are searching (for IP = 4)\n      ar$op\
    \  - 9; InARP response\n      ar$sha - Q.922 address of responding station\n \
    \     ar$spa - protocol address requested\n      ar$tha - Q.922 address of requesting\
    \ station\n      ar$tpa - protocol address of requesting station\n   Note that\
    \ the Q.922 addresses specified have the C/R, FECN, BECN, and\n   DE bits set\
    \ to zero.\n   Procedures for using InARP over a Frame Relay network are as follows:\n\
    \   Because DLCIs within most Frame Relay networks have only local\n   significance,\
    \ an end station will not have a specific DLCI assigned\n   to itself.  Therefore,\
    \ such a station does not have an address to put\n   into the InARP request or\
    \ response.  Fortunately, the Frame Relay\n   network does provide a method for\
    \ obtaining the correct DLCIs. The\n   solution proposed for the locally addressed\
    \ Frame Relay network below\n   will work equally well for a network where DLCIs\
    \ have global\n   significance.\n   The DLCI carried within the Frame Relay header\
    \ is modified as it\n   traverses the network.  When the packet arrives at its\
    \ destination,\n   the DLCI has been set to the value that, from the standpoint\
    \ of the\n   receiving station, corresponds to the sending station.  For example,\n\
    \   in figure 1 below, if station A were to send a message to station B,\n   it\
    \ would place DLCI 50 in the Frame Relay header.  When station B\n   received\
    \ this message, however, the DLCI would have been modified by\n   the network\
    \ and would appear to B as DLCI 70.\n                           ~~~~~~~~~~~~~~~\n\
    \                          (                )\n        +-----+          (    \
    \              )             +-----+\n        |     |-50------(--------------------)---------70-|\
    \     |\n        |  A  |        (                      )           |  B  |\n \
    \       |     |-60-----(---------+            )           |     |\n        +-----+\
    \         (        |           )            +-----+\n                        \
    \ (       |          )\n                          (      |         )  <---Frame\
    \ Relay\n                           ~~~~~~~~~~~~~~~~         network\n       \
    \                          80\n                                 |\n          \
    \                    +-----+\n                              |     |\n        \
    \                      |  C  |\n                              |     |\n      \
    \                        +-----+\n                              Figure 1\n   \
    \   Lines between stations represent data link connections (DLCs).\n      The\
    \ numbers indicate the local DLCI associated with each\n      connection.\n  \
    \            DLCI to Q.922 Address Table for Figure 1\n              DLCI (decimal)\
    \  Q.922 address (hex)\n                   50              0x0C21\n          \
    \         60              0x0CC1\n                   70              0x1061\n\
    \                   80              0x1401\n      For authoritative description\
    \ of the correlation between DLCI and\n      Q.922 [6] addresses, the reader should\
    \ consult that specification.\n      A summary of the correlation is included\
    \ here for convenience. The\n      translation between DLCI and Q.922 address\
    \ is based on a two byte\n      address length using the Q.922 encoding format.\
    \  The format is:\n                8   7   6   5   4   3    2   1\n          \
    \    +------------------------+---+--+\n              |  DLCI (high order)   \
    \  |C/R|EA|\n              +--------------+----+----+---+--+\n              |\
    \ DLCI (lower) |FECN|BECN|DE |EA|\n              +--------------+----+----+---+--+\n\
    \      For InARP, the FECN, BECN, C/R and DE bits are assumed to be 0.\n   When\
    \ an InARP message reaches a destination, all hardware addresses\n   will be invalid.\
    \  The address found in the frame header will,\n   however, be correct. Though\
    \ it does violate the purity of layering,\n   Frame Relay may use the address\
    \ in the header as the sender hardware\n   address.  It should also be noted that\
    \ the target hardware address,\n   in both the InARP request and response, will\
    \ also be invalid.  This\n   should not cause problems since InARP does not rely\
    \ on these fields\n   and in fact, an implementation may zero fill or ignore the\
    \ target\n   hardware address field entirely.\n   Using figure 1 as an example,\
    \ station A may use Inverse ARP to\n   discover the protocol address of the station\
    \ associated with its DLCI\n   50.  The Inverse ARP request would be as follows:\n\
    \              InARP Request from A (DLCI 50)\n              ar$op   8       (InARP\
    \ request)\n              ar$sha  unknown\n              ar$spa  pA\n        \
    \      ar$tha  0x0C21  (DLCI 50)\n              ar$tpa  unknown\n   When Station\
    \ B receives this packet, it will modify the source\n   hardware address with\
    \ the Q.922 address from the Frame Relay header.\n   This way, the InARP request\
    \ from A will become:\n              ar$op   8       (InARP request)\n       \
    \       ar$sha  0x1061  (DLCI 70)\n              ar$spa  pA\n              ar$tha\
    \  0x0C21  (DLCI 50)\n              ar$tpa  unknown.\n   Station B will format\
    \ an Inverse ARP response and send it to station\n   A:\n              ar$op \
    \  9       (InARP response)\n              ar$sha  unknown\n              ar$spa\
    \  pB\n              ar$tha  0x1061  (DLCI 70)\n              ar$tpa  pA\n   The\
    \ source hardware address is unknown and when the response is\n   received, station\
    \ A will extract the address from the Frame Relay\n   header and place it in the\
    \ source hardware address field.  Therefore,\n   the response will become:\n \
    \             ar$op   9       (InARP response)\n              ar$sha  0x0C21 \
    \ (DLCI 50)\n              ar$spa  pB\n              ar$tha  0x1061  (DLCI 70)\n\
    \              ar$tpa  pA\n   This means that the Frame Relay interface must only\
    \ intervene in the\n   processing of incoming packets.\n   Also, see [3] for a\
    \ description of similar procedures for using ARP\n   [1] and RARP [4] with Frame\
    \ Relay.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   This document specifies a functional enhancement\
    \ to the ARP family of\n   protocols, and is subject to the same security constraints\
    \ that\n   affect ARP and similar address resolution protocols.  Because\n   authentication\
    \ is not a part of ARP, there are known security issues\n   relating to its use\
    \ (e.g., host impersonation).  No additional\n   security mechanisms have been\
    \ added to the ARP family of protocols by\n   this document.\n"
- title: 9.  References
  contents:
  - "9.  References\n   [1] Plummer, D., \"An Ethernet Address Resolution Protocol\
    \ - or -\n       Converting Network Protocol Addresses to 48.bit Ethernet Address\n\
    \       for Transmission on Ethernet Hardware\", STD 37, RFC 826, November\n \
    \      1982.\n   [2] Reynolds, J., and J. Postel, \"Assigned Numbers\", STD 2,\
    \ RFC 1700,\n       October 1994.  See also: http://www.iana.org/numbers.html\n\
    \   [3] Bradley, T., Brown, C., and A. Malis, \"Multiprotocol Interconnect\n \
    \      over Frame Relay\", RFC 1490, July 1993.\n   [4] Finlayson, R., Mann, R.,\
    \ Mogul, J., and M. Theimer, \"A Reverse\n       Address Resolution Protocol\"\
    , STD 38, RFC 903, June 1984.\n   [5] Bradner, S., \"Key words for use in RFCs\
    \ to Indicate Requirement\n       Levels\", BCP 14, RFC 2119, March 1997.\n  \
    \ [6] Information technology - Telecommunications and Information\n       Exchange\
    \ between systems - Protocol Identification in the Network\n       Layer, ISO/IEC\
    \ TR 9577: 1992.\n"
- title: 10.  Authors' Addresses
  contents:
  - "10.  Authors' Addresses\n   Terry Bradley\n   Avici Systems, Inc.\n   12 Elizabeth\
    \ Drive\n   Chelmsford, MA  01824\n   Phone: (978) 250-3344\n   EMail: tbradley@avici.com\n\
    \   Caralyn Brown\n   Consultant\n   EMail:  cbrown@juno.com\n   Andrew Malis\n\
    \   Ascend Communications, Inc.\n   1 Robbins Road\n   Westford, MA  01886\n \
    \  Phone:  (978) 952-7414\n   EMail:  malis@ascend.com\n"
- title: 11.  Full Copyright Statement
  contents:
  - "11.  Full Copyright Statement\n   Copyright (C) The Internet Society (1998).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
