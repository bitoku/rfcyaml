- title: __initial_text__
  contents:
  - "                  Integration of Resource Management\n                 and Session\
    \ Initiation Protocol (SIP)\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines a generic framework for preconditions, which\n\
    \   are extensible through IANA registration.  This document also\n   discusses\
    \ how network quality of service can be made a precondition\n   for establishment\
    \ of sessions initiated by the Session Initiation\n   Protocol (SIP).  These preconditions\
    \ require that the participant\n   reserve network resources before continuing\
    \ with the session.  We do\n   not define new quality of service reservation mechanisms;\
    \ these\n   preconditions simply require a participant to use existing resource\n\
    \   reservation mechanisms before beginning the session.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1 Introduction ...................................................\
    \  2\n   2 Terminology ....................................................  3\n\
    \   3 Overview .......................................................  3\n  \
    \ 4 SDP parameters .................................................  4\n   5\
    \ Usage of preconditions with offer/answer .......................  7\n   5.1\
    \ Generating an offer ..........................................  8\n   5.1.1\
    \ SDP encoding ...............................................  9\n   5.2 Generating\
    \ an Answer ......................................... 10\n   6 Suspending and\
    \ Resuming Session Establishment .................. 11\n   7 Status Confirmation\
    \ ............................................ 12\n   8 Refusing an offer ..............................................\
    \ 13\n   8.1 Rejecting a Media Stream ..................................... 14\n\
    \   9 Unknown Precondition Type ...................................... 15\n  \
    \ 10 Multiple Preconditions per Media Stream ....................... 15\n   11\
    \ Option Tag for Preconditions .................................. 16\n   12 Indicating\
    \ Capabilities ....................................... 16\n   13 Examples ......................................................\
    \ 16\n   13.1 End-to-end Status Type ...................................... 17\n\
    \   13.2 Segmented Status Type ....................................... 21\n  \
    \ 13.3 Offer in a SIP response ..................................... 23\n   14\
    \ Security Considerations ....................................... 26\n   15 IANA\
    \ Considerations ........................................... 26\n   16 Notice\
    \ Regarding Intellectual Property Rights ................. 27\n   17 References\
    \ .................................................... 27\n   18 Contributors\
    \ .................................................. 28\n   19 Acknowledgments\
    \ ............................................... 28\n   20 Authors' Addresses\
    \ ............................................ 29\n   21 Full Copyright Statement\
    \ ...................................... 30\n"
- title: 1 Introduction
  contents:
  - "1 Introduction\n   Some architectures require that at session establishment time,\
    \ once\n   the callee has been alerted, the chances of a session establishment\n\
    \   failure are minimum.  One source of failure is the inability to\n   reserve\
    \ network resources for a session.  In order to minimize \"ghost\n   rings\",\
    \ it is necessary to reserve network resources for the session\n   before the\
    \ callee is alerted.  However, the reservation of network\n   resources frequently\
    \ requires learning the IP address, port, and\n   session parameters from the\
    \ callee.  This information is obtained as\n   a result of the initial offer/answer\
    \ exchange carried in SIP.  This\n   exchange normally causes the \"phone to ring\"\
    , thus introducing a\n   chicken-and-egg problem: resources cannot be reserved\
    \ without\n   performing an initial offer/answer exchange, and the initial\n \
    \  offer/answer exchange can't be done without performing resource\n   reservation.\n\
    \   The solution is to introduce the concept of a precondition.  A\n   precondition\
    \ is a set of constraints about the session which are\n   introduced in the offer.\
    \  The recipient of the offer generates an\n   answer, but does not alert the\
    \ user or otherwise proceed with session\n   establishment.  That only occurs\
    \ when the preconditions are met.\n   This can be known through a local event\
    \ (such as a confirmation of a\n   resource reservation), or through a new offer\
    \ sent by the caller.\n   This document deals with sessions that use SIP [1] as\
    \ a signalling\n   protocol and SDP [2] to describe the parameters of the session.\n\
    \   We have chosen to include the quality of service preconditions in the\n  \
    \ SDP description rather than in the SIP header because preconditions\n   are\
    \ stream specific.\n"
- title: 2 Terminology
  contents:
  - "2 Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in BCP\
    \ 14, RFC 2119 [3].\n"
- title: 3 Overview
  contents:
  - "3 Overview\n   In order to ensure that session establishment does not take place\n\
    \   until certain preconditions are met, we distinguish between two\n   different\
    \ state variables that affect a particular media stream:\n   current status and\
    \ desired status.  This document defines the quality\n   of service status.\n\
    \   The desired status consists of a threshold for the current status.\n   Session\
    \ establishment stops until the current status reaches or\n   surpasses this threshold.\
    \  Once this threshold is reached or\n   surpassed, session establishment resumes.\n\
    \   For example, the following values for current and desired status\n   would\
    \ not allow session establishment to resume:\n      current status = resources\
    \ reserved in the send direction\n      desired status = resources reserved in\
    \ both (sendrecv) directions\n   On the other hand, the values of the example\
    \ below would make session\n   establishment resume:\n      current status = resources\
    \ reserved in both (sendrecv) directions\n      desired status = resources reserved\
    \ in the send direction\n   These two state variables define a certain piece of\
    \ state of a media\n   stream the same way the direction attribute or the codecs\
    \ in use\n   define other pieces of state.  Consequently, we treat these two new\n\
    \   variables in the same way as other SDP media attributes are treated\n   in\
    \ the offer/answer model used by SIP [4]: they are exchanged between\n   two user\
    \ agents using an offer and an answer in order to have a\n   shared view of the\
    \ status of the session.\n   Figure 1 shows a typical message exchange between\
    \ two SIP user agents\n   using preconditions.  A includes quality of service\
    \ preconditions in\n   the SDP of the initial INVITE.  A does not want B to be\
    \ alerted until\n   there are network resources reserved in both directions (sendrecv)\n\
    \   end-to-end.  B agrees to reserve network resources for this session\n   before\
    \ alerting the callee.  B will handle resource reservation in\n   the B->A direction,\
    \ but needs A to handle the A->B direction.  To\n   indicate so, B returns a 183\
    \ (Session Progress) response to A asking\n   A to start resource reservation\
    \ and to confirm to B as soon as the\n   A->B direction is ready for the session.\
    \  A and B both start resource\n   reservation.  B finishes reserving resources\
    \ in the B->A direction,\n   but does not alert the user yet, because network\
    \ resources in both\n   directions are needed.  When A finishes reserving resources\
    \ in the\n   A->B direction, it sends an UPDATE [5] to B.  B returns a 200 (OK)\n\
    \   response for the UPDATE, indicating that all the preconditions for\n   the\
    \ session have been met.  At this point in time, B starts alerting\n   the user,\
    \ and session establishment completes normally.\n"
- title: 4 SDP parameters
  contents:
  - "4 SDP parameters\n   We define the following media level SDP attributes:\n  \
    \    current-status     =  \"a=curr:\" precondition-type\n                   \
    \         SP status-type SP direction-tag\n      desired-status     =  \"a=des:\"\
    \ precondition-type\n                            SP strength-tag SP status-type\n\
    \                            SP direction-tag\n      confirm-status     =  \"\
    a=conf:\" precondition-type\n                            SP status-type SP direction-tag\n\
    \      precondition-type  =  \"qos\" | token\n      strength-tag       =  (\"\
    mandatory\" | \"optional\" | \"none\"\n                         =  | \"failure\"\
    \ | \"unknown\")\n      status-type        =  (\"e2e\" | \"local\" | \"remote\"\
    )\n      direction-tag      =  (\"none\" | \"send\" | \"recv\" | \"sendrecv\"\
    )\n      Current status: The current status attribute carries the current\n  \
    \          status of network resources for a particular media stream.\n      Desired\
    \ status: The desired status attribute carries the\n            preconditions\
    \ for a particular media stream.  When the\n            direction-tag of the current\
    \ status attribute, with a given\n            precondition-type/status-type for\
    \ a particular stream is\n            equal to (or better than) the direction-tag\
    \ of the desired\n            status attribute with the same precondition-type/status-\n\
    \            type, for that stream, then the preconditions are considered\n  \
    \          to be met for that stream.\n      Confirmation status: The confirmation\
    \ status attribute carries\n            threshold conditions for a media stream.\
    \  When the status of\n            network resources reach these conditions, the\
    \ peer user\n            agent will send an update of the session description\n\
    \            containing an updated current status attribute for this\n       \
    \     particular media stream.\n      Precondition type: This document defines\
    \ quality of service\n            preconditions.  Extensions may define other\
    \ types of\n            preconditions.\n      Strength tag: The strength-tag indicates\
    \ whether or not the callee\n            can be alerted, in case the network fails\
    \ to meet the\n            preconditions.\n      Status type: We define two types\
    \ of status: end-to-end and\n            segmented.  The end-to-end status reflects\
    \ the status of the\n            end-to-end reservation of resources.  The segmented\
    \ status\n            reflects the status of the access network reservations of\n\
    \            both user agents.  The end-to-end status corresponds to the\n   \
    \         tag \"e2e\", defined above and the segmented status to the\n       \
    \     tags \"local\" and \"remote\".  End-to-end status is useful when\n     \
    \       end-to-end resource reservation mechanisms are available.\n          \
    \  The segmented status is useful when one or both UAs perform\n            resource\
    \ reservations on their respective access networks.\n               A        \
    \                                    B\n               |                     \
    \                       |\n               |-------------(1) INVITE SDP1--------------->|\n\
    \               |                                            |\n             \
    \  |<------(2) 183 Session Progress SDP2--------|\n               |  ***     \
    \                            ***   |\n               |--*R*-----------(3) PRACK-------------*R*-->|\n\
    \               |  *E*                                 *E*   |\n             \
    \  |<-*S*-------(4) 200 OK (PRACK)--------*S*---|\n               |  *E*     \
    \                            *E*   |\n               |  *R*                  \
    \               *R*   |\n               |  *V*                               \
    \  *V*   |\n               |  *A*                                 *A*   |\n  \
    \             |  *T*                                 *T*   |\n               |\
    \  *I*                                 *I*   |\n               |  *O*        \
    \                         *O*   |\n               |  *N*                     \
    \            *N*   |\n               |  ***                                 ***\
    \   |\n               |  ***                                       |\n       \
    \        |  ***                                       |\n               |-------------(5)\
    \ UPDATE SDP3--------------->|\n               |                             \
    \               |\n               |<--------(6) 200 OK (UPDATE) SDP4-----------|\n\
    \               |                                            |\n             \
    \  |<-------------(7) 180 Ringing---------------|\n               |          \
    \                                  |\n               |-----------------(8) PRACK----------------->|\n\
    \               |                                            |\n             \
    \  |<------------(9) 200 OK (PRACK)-------------|\n               |          \
    \                                  |\n               |                       \
    \                     |\n               |                                    \
    \        |\n               |<-----------(10) 200 OK (INVITE)------------|\n  \
    \             |                                            |\n               |------------------(11)\
    \ ACK----------------->|\n               |                                   \
    \         |\n               |                                            |\n \
    \        Figure 1: Basic session establishment using preconditions\n      Direction\
    \ tag: The direction-tag indicates the direction in which\n            a particular\
    \ attribute (current, desired or confirmation\n            status) is applicable\
    \ to.\n   The values of the tags \"send\", \"recv\", \"local\" and \"remote\"\
    \ represent\n   the point of view of the entity generating the SDP description.\
    \  In\n   an offer, \"send\" is the direction offerer->answerer and \"local\"\
    \ is\n   the offerer's access network.  In an answer, \"send\" is the direction\n\
    \   answerer->offerer and \"local\" is the answerer's access network.\n   The\
    \ following example shows these new SDP attributes in two media\n   lines of a\
    \ session description:\n      m=audio 20000 RTP/AVP 0\n      a=curr:qos e2e send\n\
    \      a=des:qos optional e2e send\n      a=des:qos mandatory e2e recv\n     \
    \ m=audio 20002 RTP/AVP 0\n      a=curr:qos local sendrecv\n      a=curr:qos remote\
    \ none\n      a=des:qos optional local sendrecv\n      a=des:qos mandatory remote\
    \ sendrecv\n"
- title: 5 Usage of preconditions with offer/answer
  contents:
  - "5 Usage of preconditions with offer/answer\n   Parameter negotiation in SIP is\
    \ carried out using the offer/answer\n   model described in [4].  The idea behind\
    \ this model is to provide a\n   shared view of the session parameters for both\
    \ user agents once the\n   answer has been received by the offerer.  This section\
    \ describes\n   which values our new SDP attributes can take in an answer, depending\n\
    \   on their value in the offer.\n   To achieve a shared view of the status of\
    \ a media stream, we define a\n   model that consists of three tables: both user\
    \ agents implement a\n   local status table, and each offer/answer exchange has\
    \ a transaction\n   status table associated to it.  The offerer generates a transaction\n\
    \   status table, identical to its local status table, and sends it to\n   the\
    \ answerer in the offer.  The answerer uses the information of this\n   transaction\
    \ status table to update its local status table.  The\n   answerer also updates\
    \ the transaction status table fields that were\n   out of date and returns this\
    \ table to the offerer in the answer.  The\n   offerer can then update its local\
    \ status table with the information\n   received in the answer.  After this offer/answer\
    \ exchange, the local\n   status tables of both user agents are synchronised.\
    \  They now have a\n   common view of the status of the media stream.  Sessions\
    \ that involve\n   several media streams implement these tables per media stream.\
    \  Note,\n   however, that this is a model of user agent behavior, not of\n  \
    \ software.  An implementation is free to take any approach that\n   replicates\
    \ the external behavior this model defines.\n"
- title: 5.1 Generating an offer
  contents:
  - "5.1 Generating an offer\n   Both user agents MUST maintain a local precondition\
    \ status, which is\n   referred to as a \"local status table\".  Tables 1 and\
    \ 2 show the\n   format of these tables for both the end-to-end and the segmented\n\
    \   status types.  For the end-to-end status type, the table contains two\n  \
    \ rows; one for each direction (i.e., send and recv).  A value of \"yes\"\n  \
    \ in the \"Current\" field indicates the successful reservation of that\n   resource\
    \ in the corresponding direction.  \"No\" indicates that\n   resources have not\
    \ been reserved yet.  The \"Desired Strength\" field\n   indicates the strength\
    \ of the preconditions in the corresponding\n   direction.  The table for the\
    \ segmented status type contains four\n   rows: both directions in the local access\
    \ network and in the peer's\n   access network.  The meaning of the fields is\
    \ the same as in the\n   end-to-end case.\n   Before generating an offer, the\
    \ offerer MUST build a transaction\n   status table with the current and the desired\
    \ status, for each media\n   stream.  The different values of the strength-tag\
    \ for the desired\n   status attribute have the following semantics:\n      o\
    \  None: no resource reservation is needed.\n      o  Optional: the user agents\
    \ SHOULD try to provide resource\n         reservation, but the session can continue\
    \ regardless of whether\n         or not this provision is possible.\n      o\
    \  Mandatory: the user agents MUST provide resource reservation.\n         Otherwise,\
    \ session establishment MUST NOT continue.\n   The offerer then decides whether\
    \ it is going to use the end-to-end\n   status type or the segmented status type.\
    \  If the status type of the\n   media line will be end-to-end, the user agent\
    \ generates records with\n   the desired status and the current status for each\
    \ direction (send\n   and recv) independently, as shown in table 1:\n        \
    \          Direction  Current  Desired Strength\n                  ____________________________________\n\
    \                    send       no        mandatory\n                    recv\
    \       no        mandatory\n             Table 1: Table for the end-to-end status\
    \ type\n   If the status type of the media line will be segmented, the user\n\
    \   agent generates records with the desired status and the current\n   status\
    \ for each direction (send and recv) and each segment (local and\n   remote) independently,\
    \ as shown in table 2:\n                  Direction   Current  Desired Strength\n\
    \                  ______________________________________\n                  local\
    \ send     no           none\n                  local recv     no           none\n\
    \                  remote send    no         optional\n                  remote\
    \ recv    no           none\n               Table 2: Table for the segmented status\
    \ type\n   At the time of sending the offer, the offerer's local status table\n\
    \   and the transaction status table contain the same values.\n   With the transaction\
    \ status table, the user agent MUST generate the\n   current-status and the desired\
    \ status lines, following the syntax of\n   Section 4 and the rules described\
    \ below in Section 5.1.1.\n"
- title: 5.1.1 SDP encoding
  contents:
  - "5.1.1 SDP encoding\n   For the end-to-end status type, the user agent MUST generate\
    \ one\n   current status line with the tag \"e2e\" for the media stream.  If the\n\
    \   strength-tags for both directions are equal (e.g., both \"mandatory\")\n \
    \  in the transaction status table, the user agent MUST add one desired\n   status\
    \ line with the tag \"sendrecv\".  If both tags are different, the\n   user agent\
    \ MUST include two desired status lines, one with the tag\n   \"send\" and the\
    \ other with the tag \"recv\".\n      The semantics of two lines with the same\
    \ strength-tag, one with a\n      \"send\" tag and the other with a \"recv\" tag,\
    \ is the same as one\n      \"sendrecv\" line.  However, in order to achieve a\
    \ more compact\n      encoding, we have chosen to make the latter format mandatory.\n\
    \   For the segmented status type, the user agent MUST generate two\n   current\
    \ status lines: one with the tag \"local\" and the other with the\n   tag \"remote\"\
    .  The user agent MUST add one or two desired status\n   lines per segment (i.e.,\
    \ local and remote).  If, for a particular\n   segment (local or remote), the\
    \ tags for both directions in the\n   transaction status table are equal (e.g.,\
    \ both \"mandatory\"), the user\n   agent MUST add one desired status line with\
    \ the tag \"sendrecv\".  If\n   both tags are different, the user agent MUST include\
    \ two desired\n   status lines, one with the tag \"send\" and the other with the\
    \ tag\n   \"recv\".\n   Note that the rules above apply to the desired strength-tag\
    \ \"none\" as\n   well.  This way, a user agent that supports quality of service\
    \ but\n   does not intend to use them, adds desired status lines with the\n  \
    \ strength-tag \"none\".  Since this tag can be upgraded in the answer,\n   as\
    \ described in Section 5.2, the answerer can request quality of\n   service reservation\
    \ without a need of another offer/answer exchange.\n   The example below shows\
    \ the SDP corresponding to tables 1 and 2.\n      m=audio 20000 RTP/AVP 0\n  \
    \    a=curr:qos e2e none\n      a=des:qos mandatory e2e sendrecv\n      m=audio\
    \ 20002 RTP/AVP 0\n      a=curr:qos local none\n      a=curr:qos remote none\n\
    \      a=des:qos optional remote send\n      a=des:qos none remote recv\n    \
    \  a=des:qos none local sendrecv\n"
- title: 5.2 Generating an Answer
  contents:
  - "5.2 Generating an Answer\n   When the answerer receives the offer, it recreates\
    \ the transaction\n   status table using the SDP attributes contained in the offer.\
    \  The\n   answerer updates both its local status and the transaction status\n\
    \   table following the rules below:\n      Desired Strength: We define an absolute\
    \ ordering for the\n            strength-tags: \"none\", \"optional\" and \"mandatory\"\
    .\n            \"Mandatory\" is the tag with the highest grade and \"none\" the\n\
    \            tag with the lowest grade.  An answerer MAY upgrade the\n       \
    \     desired strength in any entry of the transaction status\n            table,\
    \ but it MUST NOT downgrade it.  Therefore, it is OK to\n            upgrade a\
    \ row from \"none\" to \"optional\", from \"none\" to\n            \"mandatory\"\
    , or from \"optional\" to \"mandatory\", but not the\n            other way around.\n\
    \      Current Status: For every row, the value of the \"Current\" field in\n\
    \            the transaction status table, and in the local status table\n   \
    \         of the answerer, have to be compared.  Table 3 shows the\n         \
    \   four possible combinations.  If both fields have the same\n            value\
    \ (two first rows of table 3), nothing needs to be\n            updated.  If the\
    \ \"Current\" field of the transaction status\n            table is \"Yes\", and\
    \ the field of the local status table is\n            \"No\" (third row of table\
    \ 3), the latter MUST be set to\n            \"Yes\".  If the \"Current\" field\
    \ of the transaction status\n            table is \"No\", and the field of the\
    \ local status table is\n            \"Yes\" (forth row of table 3), the answerer\
    \ needs to check if\n            it has local information (e.g., a confirmation\
    \ of a resource\n            reservation has been received) about that particular\
    \ current\n            status.  If it does, the \"Current\" field of the transaction\n\
    \            status table is set to \"Yes\".  If the answerer does not have\n\
    \            local information about that current status, the \"Current\"\n  \
    \          field of the local status table MUST be set to \"No\".\n   Transac.\
    \ status table  Local status table  New values transac./local\n   ____________________________________________________________________\n\
    \            no                    no                    no/no\n            yes\
    \                  yes                   yes/yes\n            yes            \
    \       no                   yes/yes\n            no                   yes   \
    \         depends on local info\n          Table 3: Possible values for the \"\
    Current\" fields\n   Once both tables have been updated, an answer MUST be generated\n\
    \   following the rules described in Section 5.1.1, taking into account\n   that\
    \ \"send\", \"recv\", \"local\" and \"remote\" tags have to be inverted in\n \
    \  the answer, as shown in table 4.\n                          Offer   Answer\n\
    \                          ______________\n                           send   \
    \ recv\n                           recv    send\n                          local\
    \   remote\n                          remote  local\n           Table 4: Values\
    \ of tags in offers and answers\n   At the time the answer is sent, the transaction\
    \ status table and the\n   answerer's local status table contain the same values.\
    \  Therefore,\n   this answer contains the shared view of the status of the media\
    \ line\n   in the current-status attribute and the negotiated strength and\n \
    \  direction-tags in the desired-status attribute.\n   If the resource reservation\
    \ mechanism used requires participation of\n   both user agents, the answerer\
    \ SHOULD start resource reservation\n   after having sent the answer and the offerer\
    \ SHOULD start resource\n   reservation as soon as the answer is received.  If\
    \ participation of\n   the peer user agent is not needed (e.g., segmented status\
    \ type), the\n   offerer MAY start resource reservation before sending the offer\
    \ and\n   the answerer MAY start it before sending the answer.\n   The status\
    \ of the resource reservation of a media line can change\n   between two consecutive\
    \ offer/answer exchanges.  Therefore, both user\n   agents MUST keep their local\
    \ status tables up to date, using local\n   information throughout the duration\
    \ of the session.\n"
- title: 6 Suspending and Resuming Session Establishment
  contents:
  - "6 Suspending and Resuming Session Establishment\n   A user agent server that\
    \ receives an offer with preconditions SHOULD\n   NOT alert the user until all\
    \ the mandatory preconditions are met;\n   session establishment is suspended\
    \ until that moment (e.g., a PSTN\n   gateway reserves resources without sending\
    \ signalling to the PSTN.)\n   A user agent server may receive an INVITE request\
    \ with no offer in\n   it.  In this case, following normal procedures defined\
    \ in [1] and\n   [5], the user agent server will provide an offer in a reliable\
    \ 1xx\n   response.  The user agent client will send the answer in another SIP\n\
    \   request (i.e., the PRACK for the 1xx).  If the offer and the answer\n   contain\
    \ preconditions, the user agent server SHOULD NOT alert the\n   user until all\
    \ the mandatory preconditions in the answer are met.\n         Note that in this\
    \ case, a user agent server providing an\n         initial offer with preconditions,\
    \ a 180 (Ringing) response with\n         preconditions will never be sent, since\
    \ the user agent server\n         cannot alert the user until all the preconditions\
    \ are met.\n   A UAS that is not capable of unilaterally meeting all of the\n\
    \   mandatory preconditions MUST include a confirm-status attribute in\n   the\
    \ SDP (offer or answer) that it sends (see Section 7).  Further,\n   the SDP (offer\
    \ or answer) that contains this confirm-status attribute\n   MUST be sent as soon\
    \ as allowed by the SIP offer/answer rules.\n   While session establishment is\
    \ suspended, user agents SHOULD not send\n   any data over any media stream. \
    \ In the case of RTP [6], neither RTP\n   nor RTCP packets are sent.\n   A user\
    \ agent server knows that all the preconditions are met for a\n   media line when\
    \ its local status table has a value of \"yes\" in all\n   the rows whose strength-tag\
    \ is \"mandatory\".  When the preconditions\n   of all the media lines of the\
    \ session are met, session establishment\n   SHOULD resume.\n   For an initial\
    \ INVITE, suspending and resuming session establishment\n   is very intuitive.\
    \  The callee will not be alerted until all the\n   mandatory preconditions are\
    \ met.  However, offers containing\n   preconditions sent in the middle of an\
    \ ongoing session need further\n   explanation.  Both user agents SHOULD continue\
    \ using the old session\n   parameters until all the mandatory preconditions are\
    \ met.  At that\n   moment, the user agents can begin using the new session parameters.\n\
    \   Section 13 contains an example of this situation.\n"
- title: 7 Status Confirmation
  contents:
  - "7 Status Confirmation\n   The confirm-status attribute MAY be used in both offers\
    \ and answers.\n   This attribute represents a threshold for the resource reservation.\n\
    \   When this threshold is reached or surpassed, the user agent MUST send\n  \
    \ an offer to the peer user agent, reflecting the new current status of\n   the\
    \ media line as soon as allowed by the SIP offer/answer rules.  If\n   this threshold\
    \ is crossed again (e.g., the network stops providing\n   resources for the media\
    \ stream), the user agent MUST send a new offer\n   as well, as soon as allowed\
    \ by the SIP offer/answer rules.\n   If a peer has requested confirmation on a\
    \ particular stream, an agent\n   MUST mark that stream with a flag in its local\
    \ status table.  When\n   all the rows with this flag have a \"Current\" value\
    \ of \"yes\", the user\n   agent MUST send a new offer to the peer.  This offer\
    \ will contain the\n   current status of resource reservation in the current-status\n\
    \   attributes.  Later, if any of the rows with this flag transition to\n   \"\
    No\", a new offer MUST be sent as well.\n   Confirmation attributes are not negotiated.\
    \  The answerer uses the\n   value of the confirm-status attribute in the offer,\
    \ and the offerer\n   uses the value of this attribute in the answer.\n   For\
    \ example, if a user agent receives an SDP description with the\n   following\
    \ attributes:\n         m=audio 20002 RTP/AVP 0\n         a=curr:qos local none\n\
    \         a=curr:qos remote none\n         a=des:qos mandatory local sendrecv\n\
    \         a=des:qos mandatory remote sendrecv\n         a=conf:qos remote sendrecv\n\
    \   It will send an offer as soon as it reserves resources in its access\n   network\
    \ (\"remote\" tag in the received message) for both directions\n   (sendrecv).\n"
- title: 8 Refusing an offer
  contents:
  - "8 Refusing an offer\n   We define a new SIP status code:\n         Server-Error\
    \ =  \"580\"  ;Precondition Failure\n   When a UAS, acting as an answerer, cannot\
    \ or is not willing to meet\n   the preconditions in the offer, it SHOULD reject\
    \ the offer by\n   returning a 580 (Precondition-Failure) response.\n   Using\
    \ the 580 (Precondition Failure) status code to refuse an offer\n   is useful\
    \ when the offer comes in an INVITE or in an UPDATE request.\n   However, SIP\
    \ does not provide a means to refuse offers that arrive in\n   a response (1xx\
    \ or 2xx) to an INVITE.  If a UAC generates an initial\n   INVITE without an offer\
    \ and receives an offer in a 1xx or 2xx\n   response which is not acceptable,\
    \ it SHOULD respond to this offer\n   with a correctly formed answer and immediately\
    \ send a CANCEL or a\n   BYE.\n   If the offer comes in a 1xx or 2xx response\
    \ to a re-INVITE, A would\n   not have a way to reject it without terminating\
    \ the session at the\n   same time.  The same recommendation given in Section\
    \ 15.2 of [1]\n   applies here:\n         \"The UAS MUST ensure that the session\
    \ description overlaps with\n         its previous session description in media\
    \ formats, transports,\n         other parameters that require support from the\
    \ peer.  This is\n         to avoid the need for the peer to reject the session\n\
    \         description.  If, however, it is unacceptable to A, A SHOULD\n     \
    \    generate an answer with a valid session description, and then\n         send\
    \ a BYE to terminate the session.\"\n   580 (Precondition Failure) responses and\
    \ BYE and CANCEL requests,\n   indicating failure to meet certain preconditions,\
    \ SHOULD contain an\n   SDP description, indicating which desired status triggered\
    \ the\n   failure.  Note that this SDP description is not an offer or an\n   answer,\
    \ since it does not lead to the establishment of a session.\n   The format of\
    \ such a description is based on the last SDP (an offer\n   or an answer) received\
    \ from the remote UA.\n   For each \"m=\" line in the last SDP description received,\
    \ there MUST\n   be a corresponding \"m=\" line in the SDP description indicating\n\
    \   failure.  This SDP description MUST contain exactly the same number\n   of\
    \ \"m=\" lines as the last SDP description received.  The port number\n   of every\
    \ \"m=\" line MUST be set to zero, but the connection address is\n   arbitrary.\n\
    \   The desired status line corresponding to the precondition that\n   triggered\
    \ the failure MUST use the \"failure\" strength-tag, as shown\n   in the example\
    \ below:\n         m=audio 20000 RTP/AVP 0\n         a=des:qos failure e2e send\n"
- title: 8.1 Rejecting a Media Stream
  contents:
  - "8.1 Rejecting a Media Stream\n   In the offer/answer model, when an answerer\
    \ wishes to reject a media\n   stream, it sets its port to zero.  The presence\
    \ of preconditions does\n   not change this behaviour; streams are still rejected\
    \ by setting\n   their port to zero.\n   Both the offerer and the answerer MUST\
    \ ignore all the preconditions\n   that affect a stream with its port set to zero.\
    \  They are not taken\n   into consideration to decide whether or not session\
    \ establishment can\n   resume.\n"
- title: 9 Unknown Precondition Type
  contents:
  - "9 Unknown Precondition Type\n   This document defines the \"qos\" tag for quality\
    \ of service\n   preconditions.  New precondition-types defined in the future\
    \ will\n   have new associated tags.  A UA that receives an unknown\n   precondition-type,\
    \ with a \"mandatory\" strength-tag in an offer, MUST\n   refuse the offer unless\
    \ the only unknown mandatory preconditions have\n   the \"local\" tag.  In this\
    \ case, the UA does not need to be involved\n   in order to meet the preconditions.\
    \  The UA will ask for confirmation\n   of the preconditions and, when the confirmation\
    \ arrives, it will\n   resume session establishment.\n   A UA refusing an offer\
    \ follows the rules described in section 8, but\n   instead of the tag \"failure\"\
    , it uses the tag \"unknown\", as shown in\n   the example below:\n         m=audio\
    \ 20000 RTP/AVP 0\n         a=des:foo unknown e2e send\n"
- title: 10 Multiple Preconditions per Media Stream
  contents:
  - "10 Multiple Preconditions per Media Stream\n   A media stream MAY contain multiple\
    \ preconditions. Different\n   preconditions MAY have the same precondition-type\
    \ and different\n   status-types (e.g., end to end and segmented quality of service\n\
    \   preconditions) or different precondition-types (this document only\n   defines\
    \ the \"qos\" precondition type, but extensions may define more\n   precondition-types\
    \ in the future).\n   All the preconditions for a media stream MUST be met in\
    \ order to\n   resume session establishment. The following example shows a session\n\
    \   description that uses both end-to-end and segmented status-types for\n   a\
    \ media stream.\n         m=audio 20000 RTP/AVP 0\n         a=curr:qos local none\n\
    \         a=curr:qos remote none\n         a=des:qos mandatory local sendrecv\n\
    \         a=des:qos mandatory remote sendrecv\n         a=curr:qos e2e none\n\
    \         a=des:qos optional e2e sendrecv\n"
- title: 11 Option Tag for Preconditions
  contents:
  - "11 Option Tag for Preconditions\n   We define the option tag \"precondition\"\
    \ for use in the Require and\n   Supported header fields.  An offerer MUST include\
    \ this tag in the\n   Require header field if the offer contains one or more \"\
    mandatory\"\n   strength-tags.  If all the strength-tags in the description are\n\
    \   \"optional\" or \"none\", the offerer MUST include this tag in either a\n\
    \   Supported header field or in a Require header field.  It is, however,\n  \
    \ RECOMMENDED that the Supported header field be used in this case.\n   The lack\
    \ of preconditions in the answer would indicate that the\n   answerer did not\
    \ support this extension.\n   The mapping of offers and answers to SIP requests\
    \ and responses is\n   performed following the rules given in [5]. Therefore,\
    \ a user agent\n   including preconditions in the SDP MUST support the PRACK and\
    \ UPDATE\n   methods. Consequently, it MUST include the \"100rel\" [7] tag in\
    \ the\n   Supported header field and SHOULD include an Allow header field with\n\
    \   the \"UPDATE\" tag [5].\n"
- title: 12 Indicating Capabilities
  contents:
  - "12 Indicating Capabilities\n   The offer/answer model [4] describes the format\
    \ of a session\n   description to indicate capabilities.  This format is used\
    \ in\n   responses to OPTIONS requests.  A UA that supports preconditions\n  \
    \ SHOULD add desired status lines indicating the precondition-types\n   supported\
    \ for each media stream.  These lines MUST have the \"none\"\n   strength-tag,\
    \ as shown in the example below:\n         m=audio 0 RTP/AVP 0\n         a=rtpmap:0\
    \ PCMU/8000\n         a=des:foo none e2e sendrecv\n         a=des:qos none local\
    \ sendrecv\n   Note that when this document was published, the precondition-type\n\
    \   \"foo\" has not been registered.  It is used here in the session\n   description\
    \ above to provide an example with multiple precondition-\n   types.\n   A UA\
    \ that supports this framework SHOULD add a \"precondition\" tag to\n   the Supported\
    \ header field of its responses to OPTIONS requests.\n"
- title: 13 Examples
  contents:
  - "13 Examples\n   The following examples cover both status types; end-to-end and\n\
    \   segmented.\n"
- title: 13.1 End-to-end Status Type
  contents:
  - "13.1 End-to-end Status Type\n   The call flow of Figure 2 shows a basic session\
    \ establishment using\n   the end-to-end status type.  The SDP descriptions of\
    \ this example are\n   shown below:\n   SDP1: A includes end-to-end quality of\
    \ service preconditions in the\n   initial offer.\n         m=audio 20000 RTP/AVP\
    \ 0\n         c=IN IP4 192.0.2.1\n         a=curr:qos e2e none\n         a=des:qos\
    \ mandatory e2e sendrecv\n   SDP2: Since B uses RSVP, it can know when resources\
    \ in its \"send\"\n   direction are available, because it will receive RESV messages\
    \ from\n   the network.  However, it does not know the status of the\n   reservations\
    \ in the other direction.  B requests confirmation for\n   resource reservations\
    \ in its \"recv\" direction to the peer user agent\n   A in its answer.\n    \
    \     m=audio 30000 RTP/AVP 0\n         c=IN IP4 192.0.2.4\n         a=curr:qos\
    \ e2e none\n         a=des:qos mandatory e2e sendrecv\n         a=conf:qos e2e\
    \ recv\n   After having sent the answer, B starts reserving network resources\n\
    \   for the media stream.  When A receives this answer (2), it starts\n   performing\
    \ resource reservation as well.  Both UAs use RSVP, so A\n   sends PATH messages\
    \ towards B and B sends PATH messages towards A.\n   As time passes, B receives\
    \ RESV messages confirming the reservation.\n   However, B waits until resources\
    \ in the other direction are reserved\n   as well, since it did not receive any\
    \ confirmation and the\n   preconditions still have not been met.\n   SDP3: When\
    \ A receives RESV messages, it sends an updated offer (5) to\n   B:\n        \
    \ m=audio 20000 RTP/AVP 0\n         c=IN IP4 192.0.2.1\n         a=curr:qos e2e\
    \ send\n         a=des:qos mandatory e2e sendrecv\n   SDP4: B responds with an\
    \ answer (6) which contains the current status\n   of the resource reservation\
    \ (i.e., sendrecv):\n         m=audio 30000 RTP/AVP 0\n         c=IN IP4 192.0.2.4\n\
    \         a=curr:qos e2e sendrecv\n         a=des:qos mandatory e2e sendrecv\n\
    \   At this point in time, session establishment resumes and B returns a\n   180\
    \ (Ringing) response (7).\n               A                                  \
    \          B\n               |                                            |\n\
    \               |-------------(1) INVITE SDP1--------------->|\n             \
    \  |                                            |\n               |<------(2)\
    \ 183 Session Progress SDP2--------|\n               |  ***                  \
    \               ***   |\n               |--*R*-----------(3) PRACK-------------*R*-->|\n\
    \               |  *E*                                 *E*   |\n             \
    \  |<-*S*-------(4) 200 OK (PRACK)--------*S*---|\n               |  *E*     \
    \                            *E*   |\n               |  *R*                  \
    \               *R*   |\n               |  *V*                               \
    \  *V*   |\n               |  *A*                                 *A*   |\n  \
    \             |  *T*                                 *T*   |\n               |\
    \  *I*                                 *I*   |\n               |  *O*        \
    \                         *O*   |\n               |  *N*                     \
    \            *N*   |\n               |  ***                                 ***\
    \   |\n               |  ***                                       |\n       \
    \        |  ***                                       |\n               |-------------(5)\
    \ UPDATE SDP3--------------->|\n               |                             \
    \               |\n               |<--------(6) 200 OK (UPDATE) SDP4-----------|\n\
    \               |                                            |\n             \
    \  |<-------------(7) 180 Ringing---------------|\n               |          \
    \                                  |\n               |-----------------(8) PRACK----------------->|\n\
    \               |                                            |\n             \
    \  |<------------(9) 200 OK (PRACK)-------------|\n               |          \
    \                                  |\n               |                       \
    \                     |\n               |                                    \
    \        |\n               |<-----------(10) 200 OK (INVITE)------------|\n  \
    \             |                                            |\n               |------------------(11)\
    \ ACK----------------->|\n               |                                   \
    \         |\n               |                                            |\n \
    \            Figure 2: Example using the end-to-end status type\n   Let's assume,\
    \ that in the middle of the session, A wishes to change\n   the IP address where\
    \ it is receiving media.  Figure 3 shows this\n   scenario.\n   SDP1: A includes\
    \ an offer in a re-INVITE (1).  A continues to receive\n   media on the old IP\
    \ address (192.0.2.1), but is ready to receive\n   media on the new one as well\
    \ (192.0.2.2):\n         m=audio 20000 RTP/AVP 0\n         c=IN IP4 192.0.2.2\n\
    \         a=curr:qos e2e none\n         a=des:qos mandatory e2e sendrecv\n   SDP2:\
    \ B includes a \"conf\" attribute in its answer.  B continues\n   sending media\
    \ to the old remote IP address (192.0.2.1)\n         m=audio 30000 RTP/AVP 0\n\
    \         c=IN IP4 192.0.2.4\n         a=curr:qos e2e none\n         a=des:qos\
    \ mandatory e2e sendrecv\n         a=conf:qos e2e recv\n   SDP3: When A receives\
    \ RESV messages it sends an updated offer (5) to\n   B:\n         m=audio 20000\
    \ RTP/AVP 0\n         c=IN IP4 192.0.2.2\n         a=curr:qos e2e send\n     \
    \    a=des:qos mandatory e2e sendrecv\n   SDP4: B responds with an answer (6),\
    \ indicating that the\n   preconditions have been met (current status \"sendrecv).\
    \  It is now\n   that B begins sending media to the new remote IP address (192.0.2.2).\n\
    \               A                                            B\n             \
    \  |                                            |\n               |-------------(1)\
    \ INVITE SDP1--------------->|\n               |                             \
    \               |\n               |<------(2) 183 Session Progress SDP2--------|\n\
    \               |  ***                                 ***   |\n             \
    \  |--*R*-----------(3) PRACK-------------*R*-->|\n               |  *E*     \
    \                            *E*   |\n               |<-*S*-------(4) 200 OK (PRACK)--------*S*---|\n\
    \               |  *E*                                 *E*   |\n             \
    \  |  *R*                                 *R*   |\n               |  *V*     \
    \                            *V*   |\n               |  *A*                  \
    \               *A*   |\n               |  *T*                               \
    \  *T*   |\n               |  *I*                                 *I*   |\n  \
    \             |  *O*                                 *O*   |\n               |\
    \  *N*                                 *N*   |\n               |  ***        \
    \                         ***   |\n               |  ***                     \
    \                  |\n               |  ***                                  \
    \     |\n               |-------------(5) UPDATE SDP3--------------->|\n     \
    \          |                                            |\n               |<--------(6)\
    \ 200 OK (UPDATE) SDP4-----------|\n               |                         \
    \                   |\n               |<-----------(7) 200 OK (INVITE)-------------|\n\
    \               |                                            |\n             \
    \  |------------------(8) ACK------------------>|\n               |          \
    \                                  |\n               |                       \
    \                     |\n             Figure 3: Session modification with preconditions\n\
    \         m=audio 30000 RTP/AVP 0\n         c=IN IP4 192.0.2.4\n         a=curr:qos\
    \ e2e sendrecv\n         a=des:qos mandatory e2e sendrecv\n"
- title: 13.2 Segmented Status Type
  contents:
  - "13.2 Segmented Status Type\n   The call flow of Figure 4 shows a basic session\
    \ establishment using\n   the segmented status type.  The SDP descriptions of\
    \ this example are\n   shown below:\n   SDP1: A includes local and remote QoS\
    \ preconditions in the initial\n   offer.  Before sending the initial offer, A\
    \ reserves resources in its\n   access network.  This is indicated in the local\
    \ current status of the\n   SDP below:\n         m=audio 20000 RTP/AVP 0 8\n \
    \        c=IN IP4 192.0.2.1\n         a=curr:qos local sendrecv\n         a=curr:qos\
    \ remote none\n         a=des:qos mandatory local sendrecv\n         a=des:qos\
    \ mandatory remote sendrecv\n   SDP2: B reserves resources in its access network\
    \ and, since all the\n   preconditions are met, returns an answer in a 180 (Ringing)\
    \ response\n   (3).\n         m=audio 30000 RTP/AVP 0 8\n         c=IN IP4 192.0.2.4\n\
    \         a=curr:qos local sendrecv\n         a=curr:qos remote sendrecv\n   \
    \      a=des:qos mandatory local sendrecv\n         a=des:qos mandatory remote\
    \ sendrecv\n   Let's assume that after receiving this response, A decides that\
    \ it\n   wants to use only PCM u-law (payload 0), as opposed to both PCM u-law\n\
    \   and A-law (payload 8).  It would send an UPDATE to B, possibly before\n  \
    \ receiving the 200 (OK) for the INVITE (5).  The SDP would look like:\n     \
    \    m=audio 20000 RTP/AVP 0\n         c=IN IP4 192.0.2.1\n         a=curr:qos\
    \ local sendrecv\n         a=curr:qos remote sendrecv\n         a=des:qos mandatory\
    \ local sendrecv\n         a=des:qos mandatory remote sendrecv\n   B would generate\
    \ an answer for this offer and place it in the 200\n   (OK) for the UPDATE.\n\
    \   Note that this last offer/answer to reduce the number of supported\n   codecs\
    \ may arrive to the user agent server after the 200 (OK)\n   response has been\
    \ generated.  This would mean that the session is\n   established before A has\
    \ reduced the number of supported codecs.  To\n   avoid this situation, the user\
    \ agent client could wait for the first\n   answer from the user agent before\
    \ setting its local current status to\n   \"sendrecv\".\n"
- title: 13.3 Offer in a SIP response
  contents:
  - "13.3 Offer in a SIP response\n   The call flow of Figure 5 shows a basic session\
    \ establishment where\n   the initial offer appears in a reliable 1xx response.\
    \  This example\n   uses the end-to-end status type.  The SDP descriptions of\
    \ this\n   example are shown below:\n   The first INVITE (1) does not contain\
    \ a session description.\n   Therefore, the initial offer is sent by B in a reliable\
    \ 183 (Session\n   Progress) response.\n   SDP1: B includes end-to-end quality\
    \ of service preconditions in the\n   initial offer.  Since B uses RSVP, it can\
    \ know when resources in its\n   \"send\" direction are available, because it\
    \ will receive RESV messages\n   from the network.  However, it does not know\
    \ the status of the\n   reservations in the other direction.  B requests confirmation\
    \ for\n   resource reservations in its \"recv\" direction, to the peer user agent\n\
    \   A, in its answer.\n         m=audio 30000 RTP/AVP 0\n         c=IN IP4 192.0.2.4\n\
    \         a=curr:qos e2e none\n         a=des:qos mandatory e2e sendrecv\n   \
    \      a=conf:qos e2e recv\n   SDP2: A includes its answer in the PRACK for the\
    \ 183 (Session\n   Progress) response.\n         m=audio 20000 RTP/AVP 0\n   \
    \      c=IN IP4 192.0.2.1\n         a=curr:qos e2e none\n         a=des:qos mandatory\
    \ e2e sendrecv\n               A                                            B\n\
    \               | ***                                        |\n             \
    \  | *R*                                        |\n               | *E*      \
    \                                  |\n               | *S*                   \
    \                     |\n               | *E*                                \
    \        |\n               | *R*                                        |\n  \
    \             | *V*                                        |\n               |\
    \ *A*                                        |\n               | *T*         \
    \                               |\n               | *I*                      \
    \                  |\n               | *O*                                   \
    \     |\n               | *N*                                        |\n     \
    \          | ***                                        |\n               |-------------(1)\
    \ INVITE SDP1--------------->|\n               |                             \
    \        ***    |\n               |                                     *R*  \
    \  |\n               |                                     *E*    |\n        \
    \       |                                     *S*    |\n               |     \
    \                                *E*    |\n               |                  \
    \                   *R*    |\n               |                               \
    \      *V*    |\n               |                                     *A*    |\n\
    \               |                                     *T*    |\n             \
    \  |                                     *I*    |\n               |          \
    \                           *O*    |\n               |                       \
    \              *N*    |\n               |                                    \
    \ ***    |\n               |<----------(2) 180 Ringing SDP2-------------|\n  \
    \             |                                            |\n               |----------------(3)\
    \ PRACK------------------>|\n               |                                \
    \            |\n               |<-----------(4) 200 OK (PRACK)--------------|\n\
    \               |                                            |\n             \
    \  |                                            |\n               |<-----------(5)\
    \ 200 OK (INVITE)-------------|\n               |                            \
    \                |\n               |------------------(6) ACK------------------>|\n\
    \               |                                            |\n             \
    \  |                                            |\n             Figure 4: Example\
    \ using the segmented status type\n               A                          \
    \                  B\n               |                                       \
    \     |\n               |----------------(1) INVITE----------------->|\n     \
    \          |                                            |\n               |<------(2)\
    \ 183 Session Progress SDP1--------|\n               |                       \
    \                     |\n               |---------------(3) PRACK SDP2-------------->|\n\
    \               |  ***                                 ***   |\n             \
    \  |<-*R*--------(4) 200 OK (PRACK)-------*R*---|\n               |  *E*     \
    \                            *E*   |\n               |  *S*                  \
    \               *S*   |\n               |  *E*                               \
    \  *E*   |\n               |  *R*                                 *R*   |\n  \
    \             |  *V*                                 *V*   |\n               |\
    \  *A*                                 *A*   |\n               |  *T*        \
    \                         *T*   |\n               |  *I*                     \
    \            *I*   |\n               |  *O*                                 *O*\
    \   |\n               |  *N*                                 *N*   |\n       \
    \        |  ***                                 ***   |\n               |-------------(5)\
    \ UPDATE SDP3----------***-->|\n               |                             \
    \         ***   |\n               |<--------(6) 200 OK (UPDATE) SDP4-----***---|\n\
    \               |                                      ***   |\n             \
    \  |                                      ***   |\n               |          \
    \                            ***   |\n               |<-------------(7) 180 Ringing---------------|\n\
    \               |                                            |\n             \
    \  |-----------------(8) PRACK----------------->|\n               |          \
    \                                  |\n               |<------------(9) 200 OK\
    \ (PRACK)-------------|\n               |                                    \
    \        |\n               |                                            |\n  \
    \             |                                            |\n               |<-----------(10)\
    \ 200 OK (INVITE)------------|\n               |                             \
    \               |\n               |------------------(11) ACK----------------->|\n\
    \               |                                            |\n          Figure\
    \ 5: Example of an initial offer in a 1xx response\n   After having sent the answer,\
    \ A starts reserving network resources\n   for the media stream.  When B receives\
    \ this answer (3), it starts\n   performing resource reservation as well.  Both\
    \ UAs use RSVP, so A\n   sends PATH messages towards B and B sends PATH messages\
    \ towards A.\n   SDP3: When A receives RESV messages, it sends an updated offer\
    \ (5) to\n   B:\n         m=audio 20000 RTP/AVP 0\n         c=IN IP4 192.0.2.1\n\
    \         a=curr:qos e2e send\n         a=des:qos mandatory e2e sendrecv\n   SDP4:\
    \ B responds with an answer (6) which contains the current status\n   of the resource\
    \ reservation (i.e., recv):\n         m=audio 30000 RTP/AVP 0\n         c=IN IP4\
    \ 192.0.2.4\n         a=curr:qos e2e recv\n         a=des:qos mandatory e2e sendrecv\n\
    \   As time passes, B receives RESV messages confirming the reservation.\n   At\
    \ this point in time, session establishment resumes and B returns a\n   180 (Ringing)\
    \ response (7).\n"
- title: 14 Security Considerations
  contents:
  - "14 Security Considerations\n   An entity in the middle of two user agents establishing\
    \ a session may\n   add desired-status attributes making session establishment\n\
    \   impossible.  It could also modify the content of the current-status\n   parameters\
    \ so that the session is established without meeting the\n   preconditions.  Integrity\
    \ protection can be used to avoid these\n   attacks.\n   An entity performing\
    \ resource reservations upon reception of\n   unauthenticated requests carrying\
    \ preconditions can be an easy target\n   for a denial of service attack.  Requests\
    \ with preconditions SHOULD\n   be authenticated.\n"
- title: 15 IANA Considerations
  contents:
  - "15 IANA Considerations\n   This document defines three media level SDP attributes:\
    \  desired-\n   status, current-status and conf-status.  Their format is defined\
    \ in\n   Section 4.\n   This document defines a framework for using preconditions\
    \ with SIP.\n   Precondition-types to be used with this framework are registered\
    \ by\n   the IANA when they are published in standards track RFCs.  The IANA\n\
    \   Considerations section of the RFC MUST include the following\n   information,\
    \ which appears in the IANA registry along with the RFC\n   number of the publication.\n\
    \      o  Name of the precondition-type. The name MAY be of any length,\n    \
    \     but SHOULD be no more than ten characters long.\n      o  Descriptive text\
    \ that describes the extension.\n   The only entry in the registry for the time\
    \ being is:\n   Pecondition-Type    Reference   Description\n   ----------------\
    \    ---------   -----------\n   qos                 RFC 3312    Quality of Service\
    \ preconditions\n   This document also defines a new SIP status code (580).  Its\
    \ default\n   reason phrase (Precondition Failure) is defined in section 8.\n\
    \   This document defines a SIP option tag (precondition) in section 11.\n"
- title: 16 Notice Regarding Intellectual Property Rights
  contents:
  - "16 Notice Regarding Intellectual Property Rights\n   The IETF has been notified\
    \ of intellectual property rights claimed in\n   regard to some or all of the\
    \ specification contained in this\n   document.  For more information consult\
    \ the online list of claimed\n   rights.\n"
- title: 17 References
  contents:
  - "17 References\n   [1] Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\
    \ A.,\n       Peterson, J., Sparks, R., Handley, M. and E. Schooler, \"SIP:\n\
    \       Session Initiation Protocol\", RFC 3261, June 2002.\n   [2] Handley, M.\
    \ and V. Jacobson, \"SDP: Session Description Protocol\",\n       RFC 2327, April\
    \ 1998.\n   [3] Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n\
    \       Levels\", BCP 14, RFC 2119, March 1997.\n   [4] Rosenberg, J. and H. Schulzrinne,\
    \ \"An Offer/Answer Model with\n       Session Description Protocol (SDP)\", RFC\
    \ 3264, June 2002.\n   [5] Rosenberg, J., \"The Session Initiation Protocol (SIP)\
    \ UPDATE\n       Method,\" RFC 3311, September 2002.\n   [6] Schulzrinne, S.,\
    \ Casner, S., Frederick, R. and V. Jacobson, \"RTP:\n       A Transport Protocol\
    \ for Real-Time Applications\", RFC 1889,\n       January 1996.\n   [7] Rosenberg,\
    \ J. and H. Schulzrinne, \"Reliability of Provisional\n       Responses in Session\
    \ Initiation Protocol (SIP)\", RFC 3262, June\n       2002.\n   [8] C. Kalmanek,\
    \ W. Marshall, P. Mishra, D. Nortz, and K. K.\n       Ramakrishnan, \"DOSA: an\
    \ architecture for providing robust IP\n       telephony service,\" in  Proceedings\
    \ of the Conference on Computer\n       Communications (IEEE Infocom), (Tel Aviv,\
    \ Israel), Mar. 2000.\n"
- title: 18 Contributors
  contents:
  - "18 Contributors\n   The following persons contributed and were co-authors on\
    \ earlier\n   versions of this spec:\n      K. K. Ramakrishnan (TeraOptic Networks),\
    \ Ed Miller (Terayon),\n      Glenn Russell (CableLabs), Burcak Beser (Pacific\
    \ Broadband\n      Communications), Mike Mannette (3Com), Kurt Steinbrenner (3Com),\n\
    \      Dave Oran (Cisco), Flemming Andreasen (Cisco), Michael Ramalho\n      (Cisco),\
    \ John Pickens (Com21), Poornima Lalwaney (Nokia), Jon\n      Fellows (Copper\
    \ Mountain Networks), Doc Evans (D. R. Evans\n      Consulting), Keith Kelly (NetSpeak),\
    \ Adam Roach (dynamicsoft),\n      Dean Willis (dynamicsoft), Steve Donovan (dynamicsoft),\
    \ Henning\n      Schulzrinne (Columbia University).\n   This \"manyfolks\" document\
    \ is the culmination of over two years of\n   work by many individuals, most are\
    \ listed here and in the following\n   acknowledgements section.  A special note\
    \ is due to Flemming\n   Andreasen, Burcak Beser, Dave Boardman, Bill Guckel,\
    \ Chuck Kalmanek,\n   Keith Kelly, Poornima Lalwaney, John Lawser, Bill Marshall,\
    \ Mike\n   Mannette, Dave Oran, K.K. Ramakrishnan, Michael Ramalho, Adam Roach,\n\
    \   Jonathan Rosenberg, and Henning Schulzrinne for spearheading the\n   initial\
    \ \"single INVITE\" quality of service preconditions work from\n   previous, non-SIP\
    \ compatible, \"two-stage Invite\" proposals.  These\n   \"two-stage INVITE\"\
    \ proposals had their origins from Distributed Call\n   Signaling work in PacketCable,\
    \ which, in turn, had architectural\n   elements from AT&T's Distributed Open\
    \ Systems Architecture (DOSA)\n   work [8].\n"
- title: 19 Acknowledgments
  contents:
  - "19 Acknowledgments\n   The Distributed Call Signaling work in the PacketCable\
    \ project is the\n   work of a large number of people, representing many different\n\
    \   companies.  The authors would like to recognize and thank the\n   following\
    \ for their assistance: John Wheeler, Motorola; David\n   Boardman, Daniel Paul,\
    \ Arris Interactive; Bill Blum, Jay Strater,\n   Jeff Ollis, Clive Holborow, General\
    \ Instruments; Doug Newlin, Guido\n   Schuster, Ikhlaq Sidhu, 3Com; Jiri Matousek,\
    \ Bay Networks; Farzi\n   Khazai, Nortel; John Chapman, Bill Guckel, Cisco; Chuck\
    \ Kalmanek,\n   Doug Nortz, John Lawser, James Cheng, Tung-Hai Hsiao, Partho Mishra,\n\
    \   AT&T; Telcordia Technologies; and Lucent Cable Communications.\n   Miguel\
    \ Angel Garcia-Martin, Rohan Mahy and Mark Watson provided\n   helpful comments\
    \ and suggestions.\n"
- title: 20 Authors' Addresses
  contents:
  - "20 Authors' Addresses\n   Gonzalo Camarillo\n   Ericsson\n   Advanced Signalling\
    \ Research Lab.\n   FIN-02420 Jorvas\n   Finland\n   EMail: Gonzalo.Camarillo@ericsson.com\n\
    \   Bill Marshall\n   AT&T\n   Florham Park, NJ 07932\n   USA\n   EMail: wtm@research.att.com\n\
    \   Jonathan Rosenberg\n   dynamicsoft\n   72 Eagle Rock Ave\n   East Hanover,\
    \ NJ 07936\n   USA\n   EMail: jdrosen@dynamicsoft.com\n"
- title: 21 Full Copyright Statement
  contents:
  - "21 Full Copyright Statement\n   Copyright (C) The Internet Society (2002).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
