Abstract This document describes the key chain YANG data model.
Key chains are commonly used for routing protocol authentication and other applications requiring symmetric keys.
A key chain is a list containing one or more elements containing a Key ID, key string, send/accept lifetimes, and the associated authentication or encryption algorithm.
By properly overlapping the send and accept lifetimes of multiple key chain elements, key strings and algorithms may be gracefully updated.
By representing them in a YANG data model, key distribution can be automated.
This document describes the key chain YANG [YANG 1.1] data model.
Key chains are commonly used for routing protocol authentication and other applications requiring symmetric keys.
A key chain is a list containing one or more elements containing a Key ID, key string, send/accept lifetimes, and the associated authentication or encryption algorithm.
By properly overlapping the send and accept lifetimes of multiple key chain elements, key strings and algorithms may be gracefully updated.
By representing them in a YANG data model, key distribution can be automated.
In some applications, the protocols do not use the key chain element key directly, but rather a key derivation function is used to derive a short lived key from the key chain element key (e.g., the master keys used in [TCP AO]).
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
[KEYWORDS UPD] when, and only when, they appear in all capitals, as shown here.
Tree Diagrams A simplified graphical representation of the complete data tree is presented in Section 3.3.
The following tree notation is used.
These YANG list keys should not be confused with the key chain keys.
This document describes a YANG [YANG 1.1] data model for key chains.
Key chains have been implemented and deployed by a large percentage of network equipment vendors.
Providing a standard YANG model will facilitate automated key distribution and non disruptive key rollover.
This will aid in tightening the security of the core routing infrastructure as recommended in [IAB REPORT].
A key chain is a list containing one or more elements containing a Key ID, key string, send/accept lifetimes, and the associated authentication or encryption algorithm.
A key chain can be used by any service or application requiring authentication or encryption using symmetric keys.
In essence, the key chain is a reusable key policy that can be referenced wherever it is required.
The key chain construct has been implemented by most networking vendors and deployed in many networks.
A conceptual representation of a crypto key table is described in [CRYPTO KEYTABLE].
The crypto key table includes keys as well as their corresponding lifetimes and algorithms.
Additionally, the key table includes key selection criteria and is designed for a deployment model where the details of the applications or services requiring authentication or encryption permeate into the key database.
The YANG key chain model described herein doesn't include key selection criteria or support this deployment model.
At the same time, it does not preclude it.
[YANG CRYPTO KEYTABLE] describes augmentations to the key chain YANG model in support of key selection criteria.
Applicability Other YANG modules may reference ietf key chain YANG module key chain names for authentication and encryption applications.
A YANG type has been provided to facilitate reference to the key chain name without having to specify the complete YANG XML Path Language (XPath) expression.
Graceful Key Rollover Using Key Chains Key chains may be used to gracefully update the key string and/or algorithm used by an application for authentication or encryption.
To achieve graceful key rollover,
the receiver MAY accept all the keys that have a valid accept lifetime, and the sender MAY send the key with the most recent send lifetime.
One scenario for facilitating key rollover is to: 1.
Distribute a key chain with a new key to all the routers or other network devices in the domain of that key chain.
The new key's accept lifetime should be such that it is accepted during the key rollover period.
The send lifetime should be a time in the future when it can be assured that all the routers in the domain of that key are upgraded.
This will have no immediate impact on the keys used for transmission.
Assure that all the network devices have been updated with the updated key chain and that their system times are roughly synchronized.
The system times of devices within an administrative domain are commonly synchronized (e.g., using the Network Time Protocol (NTP) [NTP PROTO]).
This also may be automated.
When the send lifetime of the new key becomes valid, the network devices within the domain of that key chain will use the new key for transmissions.
At some point in the future, a new key chain with the old key removed may be distributed to the network devices within the domain of the key chain.
However, this may be deferred until the next key rollover.
If this is done, the key chain will always include two keys: either the current and future key (during key rollovers) or the current and previous keys (between key rollovers).
Since the most recent send lifetime is defined as the one with the latest start time, specification of "always" will prevent using the graceful key rollover technique described above.
Other key configuration and usage scenarios are possible, but these are beyond the scope of this document.
Design of the Key Chain Model
The ietf key chain module contains a list of one or more keys indexed by a Key ID.
For some applications (e.g., OSPFv3 [OSPFV3 AUTH]), the Key ID is used to identify the key chain key to be used.
In addition to the Key ID, each key chain key includes a key string and a cryptographic algorithm.
Optionally, the key chain keys include send/accept lifetimes.
If the send/accept lifetime is unspecified, the key is always considered valid.
Note that different key values for transmission versus acceptance may be supported with multiple key chain elements.
The key used for transmission will have a valid send lifetime and invalid accept  lifetime (e.g., has an end time equal to the start time).
The key used for acceptance will have a valid accept lifetime and invalid send lifetime.
Due to the differences in key chain implementations across various vendors, some of the data elements are optional.
Finally, the crypto algorithm identities are provided for reuse when configuring legacy authentication and encryption not using key chains.
A key chain is identified by a unique name within the scope of the network device.
The "key chain ref" typedef SHOULD be used by other YANG modules when they need to reference a configured key chain.
The key chain operational state is included in the same tree as key chain configuration consistent with Network Management Datastore Architecture [NMDA].
The timestamp of the last key chain modification is also maintained in the operational state.
Additionally, the operational state includes an indication of whether or not a key chain key is valid for transmission or acceptance.
Key Chain Model Features Features are used to handle differences between vendor implementations.
For example, not all vendors support configuration of an acceptance tolerance or configuration of key strings in hexadecimal.
They are also used to support security requirements (e.g., TCP AO algorithms [TCP AO ALGORITHMS])
not yet implemented by vendors or implemented by only a single vendor.
It is common for an entity with sufficient permissions to read and store a device's configuration, which would include the contents of this model.
To avoid unnecessarily seeing and storing the keys in cleartext, this model provides the aes key wrap feature.
More details are described in the Security Considerations (Section 5).
rw aes key wrap {aes key wrap}?
Key Chain YANG Model <CODE BEGINS
> file "ietf key chain@2017 06 15.yang" module ietf key chain { yang version 1.1; namespace "urn:ietf:params:xml:ns:
Jeffrey Zhang <mailto:zzhang@juniper.net>"; description "
This YANG module defines the generic configuration data for key chains.
It is intended that the module will be extended by vendors to define vendor specific key chain configuration parameters.
2017 IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
This version of this YANG module is part of RFC 8177; see the RFC itself for full legal notices."
; } identity hmac sha 512 { base crypto algorithm; description "HMAC SHA 512 authentication algorithm."
; } identity cleartext { base crypto algorithm
; } description "This type is used by data models that need to reference configured key chains."
{ type yang:date and time; description "End time."
All configured key chains on the device."
When compared to ASCII, specification in hexadecimal affords greater key entropy with the same number of internal key string octets.
; } leaf accept lifetime active { type boolean; config false; description "Indicates if the accept lifetime of the key chain key is currently active."
The encrypted key strings are encoded as hexadecimal key strings using the hex key string leaf."; leaf enable { type boolean; default "false"; description "Enable AES Key Wrap encryption."
The YANG module defined in this document is designed to be accessed via network management protocols such as NETCONF [NETCONF] or RESTCONF [RESTCONF].
The lowest NETCONF layer is the secure transport layer, and the mandatory to implement secure transport is Secure Shell (SSH) [NETCONF SSH].
The lowest RESTCONF layer is HTTPS, and the mandatory to implement secure transport is TLS [TLS].
The NETCONF access control model [NETCONF ACM] provides the means to restrict access for particular NETCONF or RESTCONF users to a pre
configured subset of all available NETCONF or RESTCONF protocol operations and content.
The key strings are not accessible by default, and NETCONF access control model [NETCONF ACM] rules are required to configure or retrieve them.
When configured, the key strings can be encrypted using the AES Key Wrap algorithm [AES KEY WRAP].
The AES key encryption key (KEK) is not included in the YANG model and must be set or derived independent of key chain configuration.
When AES key encryption is used, the hex key string feature is also required since the encrypted keys will contain characters that are not representable in the YANG string built in type [YANG 1.1].
It is RECOMMENDED that key strings be encrypted using AES key encryption to prevent key chains from being retrieved and stored with the key strings in cleartext.
This recommendation is independent of the access protection that is availed from the NETCONF access control model (NACM)
The cleartext algorithm is included as a YANG feature.
Usage is NOT RECOMMENDED except in cases where the application and device have no other alternative (e.g., a legacy network device that must authenticate packets at intervals of 10 milliseconds or less for many peers using Bidirectional Forwarding Detection [BFD]).
Keys used with the cleartext algorithm are considered insecure and SHOULD NOT be reused with more secure algorithms.
Similarly, the MD5 and SHA 1 algorithms have been proven to be insecure ([Dobb96a], [Dobb96b], and [SHA SEC CON]), and usage is NOT RECOMMENDED.
Usage should be confined to deployments where it is required for backward compatibility.
Implementations with keys provided via this model should store them using best current security practices.
This document registers a URI in the "IETF XML Registry" [XML REGISTRY].
It follows the format in [XML REGISTRY].
N/A, the requested URI is an XML namespace.
This document registers a YANG module in the "YANG Module Names" registry [YANG 1.0].
name: ietf key chain namespace
yang:ietf key chain prefix: key chain reference:
RFC 8177 Appendix A.  Examples A.1.
Simple Key Chain with an Always Valid Single Key <?
xml version "1.0" encoding "utf 8"?
yang:ietf key chain"> <key chain
> A key chain with a single key that is always valid for transmission and reception.
> <lifetime> <send accept lifetime> <
> <crypto algorithm>hmac sha 256</crypto algorithm> <key string
</key chain> </key chains> </data
xml version "1.0" encoding "utf 8"?
yang:ietf key chain"> <key chain> <name
> A key chain where each key contains a different send time and accept time and a different algorithm illustrating algorithm agility.
> <lifetime> <send lifetime> <start date time>2017 01 01T00:00:00Z</start date time> <end date time>2017
01T00:00:00Z</end date time> </send lifetime> <accept lifetime> <start date time>2016 12 31T23:59:55Z</start date time
> <end date time>2017 02 01T00:00:05Z</end date time> </accept lifetime> </lifetime> <crypto algorithm>hmac sha 256</crypto algorithm
> <lifetime> <send lifetime> <start date time>2017 02 01T00:00:00Z</start date time
> <end date time>2017 03 01T00:00:00Z</end date time
> </send lifetime> <accept lifetime> <start date time>2017
31T23:59:55Z</start date time> <end date
time>2017 03 01T00:00:05Z</end date time>
> <key string> <hexadecimal string
</key chain> </key chains> </data
Key Chain with Independent Send and Accept Lifetimes <?
xml version "1.0" encoding "utf 8"?
yang:ietf key chain"> <key chain> <name
> A key chain where each key contains different send times and accept times.
> <lifetime> <send lifetime> <start date time>2017 01 01T00:00:00Z</start date time> <end date time>2017
01T00:00:00Z</end date time> </send lifetime> <accept lifetime> <start date time>2016 12 31T23:59:55Z</start date time
> <end date time>2017 02 01T00:00:05Z</end date time> </accept lifetime> </lifetime> <crypto algorithm>hmac sha 256</crypto algorithm
> <lifetime> <send lifetime> <start date time>2017 02 01T00:00:00Z</start date time
> <end date time>2017 03 01T00:00:00Z</end date time
> </send lifetime> <accept lifetime> <start date time>2017
31T23:59:55Z</start date time> <end date
time>2017 03 01T00:00:05Z</end date time>
</accept lifetime> </lifetime> <crypto algorithm>hmac sha 256</crypto algorithm> <
</key chain> </key chains> </data
Contributors Yi Yang SockRate Email: yi.yang@sockrate.com
