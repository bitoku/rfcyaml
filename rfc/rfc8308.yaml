- contents:
  - '        Extension Negotiation in the Secure Shell (SSH) Protocol

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This memo updates RFCs 4251, 4252, 4253, and 4254 by defining a\n
    \  mechanism for Secure Shell (SSH) clients and servers to exchange\n   information
    about supported protocol extensions confidentially after\n   SSH key exchange.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8308.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Overview and Rationale ..........................................3\n
    \     1.1. Requirements Terminology ...................................3\n      1.2.
    Wire Encoding Terminology ..................................3\n   2. Extension
    Negotiation Mechanism .................................3\n      2.1. Signaling
    of Extension Negotiation in SSH_MSG_KEXINIT ......3\n      2.2. Enabling Criteria
    ..........................................4\n      2.3. SSH_MSG_EXT_INFO Message
    ...................................4\n      2.4. Message Order ..............................................5\n
    \     2.5. Interpretation of Extension Names and Values ...............6\n   3.
    Initially Defined Extensions ....................................6\n      3.1.
    \"server-sig-algs\" ..........................................6\n      3.2. \"delay-compression\"
    ........................................7\n           3.2.1. Awkwardly Timed Key
    Re-Exchange .....................9\n           3.2.2. Subsequent Re-Exchange ..............................9\n
    \          3.2.3. Compatibility Note: OpenSSH up to Version 7.5 .......9\n      3.3.
    \"no-flow-control\" .........................................10\n           3.3.1.
    Prior \"No Flow Control\" Practice ...................10\n      3.4. \"elevation\"
    ...............................................11\n   4. IANA Considerations ............................................12\n
    \     4.1. Additions to Existing Registries ..........................12\n      4.2.
    New Registry: Extension Names .............................12\n           4.2.1.
    Future Assignments to Extension Names Registry .....12\n   5. Security Considerations
    ........................................12\n   6. References .....................................................13\n
    \     6.1. Normative References ......................................13\n      6.2.
    Informative References ....................................13\n   Acknowledgments
    ...................................................14\n   Author's Address ..................................................14\n"
  title: Table of Contents
- contents:
  - "1.  Overview and Rationale\n   Secure Shell (SSH) is a common protocol for secure
    communication on\n   the Internet.  The original design of the SSH transport layer\n
    \  [RFC4253] lacks proper extension negotiation.  Meanwhile, diverse\n   implementations
    take steps to ensure that known message types contain\n   no unrecognized information.
    \ This makes it difficult for\n   implementations to signal capabilities and negotiate
    extensions\n   without risking disconnection.  This obstacle has been recognized
    in\n   the process of updating SSH to support RSA signatures using SHA-256\n   and
    SHA-512 [RFC8332].  To avoid trial and error as well as\n   authentication penalties,
    a client must be able to discover public\n   key algorithms a server accepts.
    \ This extension mechanism permits\n   this discovery.\n   This memo updates RFCs
    4251, 4252, 4253, and 4254.\n"
  - contents:
    - "1.1.  Requirements Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT
      RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted
      as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear
      in all\n   capitals, as shown here.\n"
    title: 1.1.  Requirements Terminology
  - contents:
    - "1.2.  Wire Encoding Terminology\n   The wire encoding types in this document
      -- \"byte\", \"uint32\",\n   \"string\", \"boolean\", \"name-list\" -- have
      meanings as described in\n   [RFC4251].\n"
    title: 1.2.  Wire Encoding Terminology
  title: 1.  Overview and Rationale
- contents:
  - '2.  Extension Negotiation Mechanism

    '
  - contents:
    - "2.1.  Signaling of Extension Negotiation in SSH_MSG_KEXINIT\n   Applications
      implementing this mechanism MUST add one of the\n   following indicator names
      to the field kex_algorithms in the\n   SSH_MSG_KEXINIT message sent by the application
      in the first key\n   exchange:\n   o  When acting as server: \"ext-info-s\"\n
      \  o  When acting as client: \"ext-info-c\"\n   The indicator name is added
      without quotes and MAY be added at any\n   position in the name-list, subject
      to proper separation from other\n   names as per name-list conventions.\n   The
      names are added to the kex_algorithms field because this is one\n   of two name-list
      fields in SSH_MSG_KEXINIT that do not have a\n   separate copy for each data
      direction.\n   The indicator names inserted by the client and server are different\n
      \  to ensure these names will not produce a match and therefore not\n   affect
      the algorithm chosen in key exchange algorithm negotiation.\n   The inclusion
      of textual indicator names is intended to provide a\n   clue for implementers
      to discover this mechanism.\n"
    title: 2.1.  Signaling of Extension Negotiation in SSH_MSG_KEXINIT
  - contents:
    - "2.2.  Enabling Criteria\n   If a client or server offers \"ext-info-c\" or
      \"ext-info-s\"\n   respectively, it MUST be prepared to accept an SSH_MSG_EXT_INFO\n
      \  message from the peer.\n   A server only needs to send \"ext-info-s\" if
      it intends to process\n   SSH_MSG_EXT_INFO from the client.  A client only needs
      to send\n   \"ext-info-c\" if it plans to process SSH_MSG_EXT_INFO from the
      server.\n   If a server receives an \"ext-info-c\", or a client receives an\n
      \  \"ext-info-s\", it MAY send an SSH_MSG_EXT_INFO message but is not\n   required
      to do so.\n   Neither party needs to wait for the other's SSH_MSG_KEXINIT in
      order\n   to decide whether to send the appropriate indicator in its own\n   SSH_MSG_KEXINIT.\n
      \  Implementations MUST NOT send an incorrect indicator name for their\n   role.
      \ Implementations MAY disconnect if the counterparty sends an\n   incorrect
      indicator.  If \"ext-info-c\" or \"ext-info-s\" ends up being\n   negotiated
      as a key exchange method, the parties MUST disconnect.\n"
    title: 2.2.  Enabling Criteria
  - contents:
    - "2.3.  SSH_MSG_EXT_INFO Message\n   A party that received the \"ext-info-c\"
      or \"ext-info-s\" indicator MAY\n   send the following message:\n     byte       SSH_MSG_EXT_INFO
      (value 7)\n     uint32     nr-extensions\n     repeat the following 2 fields
      \"nr-extensions\" times:\n       string   extension-name\n       string   extension-value
      (binary)\n   Implementers should pay careful attention to Section 2.5, in\n
      \  particular to the requirement to tolerate any sequence of bytes\n   (including
      null bytes at any position) in an unknown extension's\n   extension-value.\n"
    title: 2.3.  SSH_MSG_EXT_INFO Message
  - contents:
    - "2.4.  Message Order\n   If a client sends SSH_MSG_EXT_INFO, it MUST send it
      as the next\n   packet following the client's first SSH_MSG_NEWKEYS message
      to the\n   server.\n   If a server sends SSH_MSG_EXT_INFO, it MAY send it at
      zero, one, or\n   both of the following opportunities:\n   o  As the next packet
      following the server's first SSH_MSG_NEWKEYS.\n      Where clients need information
      in the server's SSH_MSG_EXT_INFO to\n      authenticate, it is helpful if the
      server sends its\n      SSH_MSG_EXT_INFO not only as the next packet after\n
      \     SSH_MSG_NEWKEYS, but without delay.\n      Clients cannot rely on this
      because the server is not required to\n      send the message at this time;
      if sent, it may be delayed by the\n      network.  However, if a timely SSH_MSG_EXT_INFO
      is received, a\n      client can pipeline an authentication request after its\n
      \     SSH_MSG_SERVICE_REQUEST, even when it needs extension information.\n   o
      \ Immediately preceding the server's SSH_MSG_USERAUTH_SUCCESS, as\n      defined
      in [RFC4252].\n      The server MAY send SSH_MSG_EXT_INFO at this second opportunity,\n
      \     whether or not it sent it at the first.  A client that sent\n      \"ext-info-c\"
      MUST accept a server's SSH_MSG_EXT_INFO at both\n      opportunities but MUST
      NOT require it.\n      This allows a server to reveal support for additional
      extensions\n      that it was unwilling to reveal to an unauthenticated client.
      \ If\n      a server sends a second SSH_MSG_EXT_INFO, this replaces any\n      initial
      one, and both the client and the server re-evaluate\n      extensions in effect.
      \ The server's second SSH_MSG_EXT_INFO is\n      matched against the client's
      original.\n      The timing of the second opportunity is chosen for the following\n
      \     reasons.  If the message was sent earlier, it would not allow the\n      server
      to withhold information until the client has authenticated.\n      If it was
      sent later, a client that needs information from the\n      second SSH_MSG_EXT_INFO
      immediately after it authenticates would\n      have no way to reliably know
      whether to expect the message.\n"
    title: 2.4.  Message Order
  - contents:
    - "2.5.  Interpretation of Extension Names and Values\n   Each extension is identified
      by its extension-name and defines the\n   conditions under which the extension
      is considered to be in effect.\n   Applications MUST ignore unrecognized extension-names.\n
      \  When it is specified, an extension MAY dictate that, in order to take\n   effect,
      both parties must include it in their SSH_MSG_EXT_INFO or\n   that it is sufficient
      for only one party to include it.  However,\n   other rules MAY be specified.
      \ The relative order in which extensions\n   appear in an SSH_MSG_EXT_INFO message
      MUST be ignored.\n   Extension-value fields are interpreted as defined by their
      respective\n   extension.  This field MAY be empty if permitted by the extension.\n
      \  Applications that do not implement or recognize an extension MUST\n   ignore
      its extension-value, regardless of its size or content.\n   Applications MUST
      tolerate any sequence of bytes -- including null\n   bytes at any position --
      in an unknown extension's extension-value.\n   The cumulative size of an SSH_MSG_EXT_INFO
      message is limited only by\n   the maximum packet length that an implementation
      may apply in\n   accordance with [RFC4253].  Implementations MUST accept well-formed\n
      \  SSH_MSG_EXT_INFO messages up to the maximum packet length they\n   accept.\n"
    title: 2.5.  Interpretation of Extension Names and Values
  title: 2.  Extension Negotiation Mechanism
- contents:
  - '3.  Initially Defined Extensions

    '
  - contents:
    - "3.1.  \"server-sig-algs\"\n   This extension is sent with the following extension
      name and value:\n     string      \"server-sig-algs\"\n     name-list   public-key-algorithms-accepted\n
      \  The name-list type is a strict subset of the string type and is thus\n   permissible
      as an extension-value.  See [RFC4251] for more\n   information.\n   This extension
      is sent by the server and contains a list of public\n   key algorithms that
      the server is able to process as part of a\n   \"publickey\" authentication
      request.  If a client sends this\n   extension, the server MAY ignore it and
      MAY disconnect.\n   In this extension, a server MUST enumerate all public key
      algorithms\n   it might accept during user authentication.  However, early server\n
      \  implementations that do not enumerate all accepted algorithms do\n   exist.
      \ For this reason, a client MAY send a user authentication\n   request using
      a public key algorithm not included in \"server-sig-\n   algs\".\n   A client
      that wishes to proceed with public key authentication MAY\n   wait for the server's
      SSH_MSG_EXT_INFO so it can send a \"publickey\"\n   authentication request with
      an appropriate public key algorithm,\n   rather than resorting to trial and
      error.\n   Servers that implement public key authentication SHOULD implement\n
      \  this extension.\n   If a server does not send this extension, a client MUST
      NOT make any\n   assumptions about the server's public key algorithm support,
      and MAY\n   proceed with authentication requests using trial and error.  Note\n
      \  that implementations are known to exist that apply authentication\n   penalties
      if the client attempts to use an unexpected public key\n   algorithm.\n   Authentication
      penalties are applied by servers to deter brute-force\n   password guessing,
      username enumeration, and other types of behavior\n   deemed suspicious by server
      administrators or implementers.\n   Penalties may include automatic IP address
      throttling or blocking,\n   and they may trigger email alerts or auditing.\n"
    title: 3.1.  "server-sig-algs"
  - contents:
    - "3.2.  \"delay-compression\"\n   This extension MAY be sent by both parties
      as follows:\n     string         \"delay-compression\"\n     string:\n       name-list
      \   compression_algorithms_client_to_server\n       name-list    compression_algorithms_server_to_client\n
      \  The extension-value is a string that encodes two name-lists.  The\n   name-lists
      themselves have the encoding of strings.  For example, to\n   indicate a preference
      for algorithms \"foo,bar\" in the client-to-\n   server direction and \"bar,baz\"
      in the server-to-client direction, a\n   sender encodes the extension-value
      as follows (including its length):\n     00000016 00000007 666f6f2c626172 00000007
      6261722c62617a\n   This same encoding could be sent by either party -- client
      or server.\n   This extension allows the server and client to renegotiate\n
      \  compression algorithm support without having to conduct a key\n   re-exchange,
      which puts new algorithms into effect immediately upon\n   successful authentication.\n
      \  This extension takes effect only if both parties send it.  Name-lists\n   MAY
      include any compression algorithm that could have been negotiated\n   in SSH_MSG_KEXINIT,
      except algorithms that define their own delayed\n   compression semantics.  This
      means \"zlib,none\" is a valid algorithm\n   list in this context, but \"zlib@openssh.com\"
      is not.\n   If both parties send this extension, but the name-lists do not\n
      \  contain a common algorithm in either direction, the parties MUST\n   disconnect
      in the same way as if negotiation failed as part of\n   SSH_MSG_KEXINIT.\n   If
      this extension takes effect, the renegotiated compression\n   algorithm is activated
      for the very next SSH message after the\n   trigger message:\n   o  Sent by
      the server, the trigger message is\n      SSH_MSG_USERAUTH_SUCCESS.\n   o  Sent
      by the client, the trigger message is SSH_MSG_NEWCOMPRESS.\n   If this extension
      takes effect, the client MUST send the following\n   message within a reasonable
      number of outgoing SSH messages after\n   receiving SSH_MSG_USERAUTH_SUCCESS,
      but not necessarily as the first\n   such outgoing message:\n     byte       SSH_MSG_NEWCOMPRESS
      (value 8)\n   The purpose of SSH_MSG_NEWCOMPRESS is to avoid a race condition
      where\n   the server cannot reliably know whether a message sent by the client\n
      \  was sent before or after receiving the server's\n   SSH_MSG_USERAUTH_SUCCESS.
      \ For example, clients may send keep-alive\n   messages during logon processing.\n
      \  As is the case for all extensions unless otherwise noted, the server\n   MAY
      delay including this extension until its secondary\n   SSH_MSG_EXT_INFO, sent
      before SSH_MSG_USERAUTH_SUCCESS.  This allows\n   the server to avoid advertising
      compression until the client has\n   authenticated.\n   If the parties renegotiate
      compression using this extension in a\n   session where compression is already
      enabled and the renegotiated\n   algorithm is the same in one or both directions,
      then the internal\n   compression state MUST be reset for each direction at
      the time the\n   renegotiated algorithm takes effect.\n"
    - contents:
      - "3.2.1.  Awkwardly Timed Key Re-Exchange\n   A party that has signaled, or
        intends to signal, support for this\n   extension in an SSH session MUST NOT
        initiate key re-exchange in that\n   session until either of the following
        occurs:\n   o  This extension was negotiated, and the party that's about to
        start\n      key re-exchange already sent its trigger message for compression.\n
        \  o  The party has sent (if server) or received (if client) the message\n
        \     SSH_MSG_USERAUTH_SUCCESS, and this extension was not negotiated.\n   If
        a party violates this rule, the other party MAY disconnect.\n   In general,
        parties SHOULD NOT start key re-exchange before\n   successful user authentication
        but MAY tolerate it if not using this\n   extension.\n"
      title: 3.2.1.  Awkwardly Timed Key Re-Exchange
    - contents:
      - "3.2.2.  Subsequent Re-Exchange\n   In subsequent key re-exchanges that unambiguously
        begin after the\n   compression trigger messages, the compression algorithms
        negotiated\n   in re-exchange override the algorithms negotiated with this\n
        \  extension.\n"
      title: 3.2.2.  Subsequent Re-Exchange
    - contents:
      - "3.2.3.  Compatibility Note: OpenSSH up to Version 7.5\n   This extension
        uses a binary extension-value encoding.  OpenSSH\n   clients up to and including
        version 7.5 advertise support to receive\n   SSH_MSG_EXT_INFO but disconnect
        on receipt of an extension-value\n   containing null bytes.  This is an error
        fixed in OpenSSH\n   version 7.6.\n   Implementations that wish to interoperate
        with OpenSSH 7.5 and\n   earlier are advised to check the remote party's SSH
        version string\n   and omit this extension if an affected version is detected.
        \ Affected\n   versions do not implement this extension, so there is no harm
        in\n   omitting it.  The extension SHOULD NOT be omitted if the detected\n
        \  OpenSSH version is 7.6 or higher.  This would make it harder for the\n
        \  OpenSSH project to implement this extension in a higher version.\n"
      title: '3.2.3.  Compatibility Note: OpenSSH up to Version 7.5'
    title: 3.2.  "delay-compression"
  - contents:
    - "3.3.  \"no-flow-control\"\n   This extension is sent with the following extension
      name and value:\n     string      \"no-flow-control\"\n     string      choice
      of: \"p\" for preferred | \"s\" for supported\n   A party SHOULD send \"s\"
      if it supports \"no-flow-control\" but does not\n   prefer to enable it.  A
      party SHOULD send \"p\" if it prefers to enable\n   the extension if the other
      party supports it.  Parties MAY disconnect\n   if they receive a different extension
      value.\n   For this extension to take effect, the following must occur:\n   o
      \ This extension MUST be sent by both parties.\n   o  At least one party MUST
      have sent the value \"p\" (preferred).\n   If this extension takes effect, the
      \"initial window size\" fields in\n   SSH_MSG_CHANNEL_OPEN and SSH_MSG_CHANNEL_OPEN_CONFIRMATION,
      as\n   defined in [RFC4254], become meaningless.  The values of these fields\n
      \  MUST be ignored, and a channel behaves as if all window sizes are\n   infinite.
      \ Neither side is required to send any\n   SSH_MSG_CHANNEL_WINDOW_ADJUST messages,
      and if received, such\n   messages MUST be ignored.\n   This extension is intended
      for, but not limited to, use by file\n   transfer applications that are only
      going to use one channel and for\n   which the flow control provided by SSH
      is an impediment, rather than\n   a feature.\n   Implementations MUST refuse
      to open more than one simultaneous\n   channel when this extension is in effect.
      \ Nevertheless, server\n   implementations SHOULD support clients opening more
      than one\n   non-simultaneous channel.\n"
    - contents:
      - "3.3.1.  Prior \"No Flow Control\" Practice\n   Before this extension, some
        applications would simply not implement\n   SSH flow control, sending an initial
        channel window size of 2^32 - 1.\n   Applications SHOULD NOT do this for the
        following reasons:\n   o  It is plausible to transfer more than 2^32 bytes
        over a channel.\n      Such a channel will hang if the other party implements
        SSH flow\n      control according to [RFC4254].\n   o  Implementations that
        cannot handle large channel window sizes\n      exist, and they can exhibit
        non-graceful behaviors, including\n      disconnect.\n"
      title: 3.3.1.  Prior "No Flow Control" Practice
    title: 3.3.  "no-flow-control"
  - contents:
    - "3.4.  \"elevation\"\n   The terms \"elevation\" and \"elevated\" refer to an
      operating system\n   mechanism where an administrator's logon session is associated
      with\n   two security contexts: one limited and one with administrative\n   rights.
      \ To \"elevate\" such a session is to activate the security\n   context with
      full administrative rights.  For more information about\n   this mechanism on
      Windows, see [WINADMIN] and [WINTOKEN].\n   This extension MAY be sent by the
      client as follows:\n     string      \"elevation\"\n     string      choice
      of: \"y\" | \"n\" | \"d\"\n   A client sends \"y\" to indicate its preference
      that the session should\n   be elevated; \"n\" to not be elevated; and \"d\"
      for the server to use\n   its default behavior.  The server MAY disconnect if
      it receives a\n   different extension value.  If a client does not send the
      \"elevation\"\n   extension, the server SHOULD act as if \"d\" was sent.\n   If
      a client has included this extension, then after authentication, a\n   server
      that supports this extension SHOULD indicate to the client\n   whether elevation
      was done by sending the following global request:\n     byte        SSH_MSG_GLOBAL_REQUEST\n
      \    string      \"elevation\"\n     boolean     want reply = false\n     boolean
      \    elevation performed\n   Clients that implement this extension help reduce
      attack surface for\n   Windows servers that handle administrative logins.  Where
      clients do\n   not support this extension, servers must elevate sessions to
      allow\n   full access by administrative users always.  Where clients support\n
      \  this extension, sessions can be created without elevation unless\n   requested.\n"
    title: 3.4.  "elevation"
  title: 3.  Initially Defined Extensions
- contents:
  - '4.  IANA Considerations

    '
  - contents:
    - "4.1.  Additions to Existing Registries\n   IANA has added the following entries
      to the \"Message Numbers\"\n   registry [IANA-M] under the \"Secure Shell (SSH)
      Protocol Parameters\"\n   registry [RFC4250]:\n     Value    Message ID             Reference\n
      \    -----------------------------------------\n     7        SSH_MSG_EXT_INFO
      \      RFC 8308\n     8        SSH_MSG_NEWCOMPRESS    RFC 8308\n   IANA has
      also added the following entries to the \"Key Exchange Method\n   Names\" registry
      [IANA-KE]:\n     Method Name     Reference      Note\n     ------------------------------------------\n
      \    ext-info-s      RFC 8308       Section 2\n     ext-info-c      RFC 8308
      \      Section 2\n"
    title: 4.1.  Additions to Existing Registries
  - contents:
    - "4.2.  New Registry: Extension Names\n   Also under the \"Secure Shell (SSH)
      Protocol Parameters\" registry,\n   IANA has created a new \"Extension Names\"
      registry, with the following\n   initial content:\n     Extension Name       Reference
      \      Note\n     ------------------------------------------------\n     server-sig-algs
      \     RFC 8308        Section 3.1\n     delay-compression    RFC 8308        Section
      3.2\n     no-flow-control      RFC 8308        Section 3.3\n     elevation            RFC
      8308        Section 3.4\n"
    - contents:
      - "4.2.1.  Future Assignments to Extension Names Registry\n   Names in the \"Extension
        Names\" registry MUST follow the conventions\n   for names defined in [RFC4250],
        Section 4.6.1.\n   Requests for assignments of new non-local names in the
        \"Extension\n   Names\" registry (i.e., names not including the '@' character)
        MUST be\n   done using the IETF Review policy, as described in [RFC8126].\n"
      title: 4.2.1.  Future Assignments to Extension Names Registry
    title: '4.2.  New Registry: Extension Names'
  title: 4.  IANA Considerations
- contents:
  - "5.  Security Considerations\n   Security considerations are discussed throughout
    this document.  This\n   document updates the SSH protocol as defined in [RFC4251]
    and related\n   documents.  The security considerations of [RFC4251] apply.\n"
  title: 5.  Security Considerations
- contents:
  - '6.  References

    '
  - contents:
    - "6.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC4250]  Lehtinen, S. and C. Lonvick, Ed., \"The Secure Shell (SSH)\n              Protocol
      Assigned Numbers\", RFC 4250,\n              DOI 10.17487/RFC4250, January 2006,\n
      \             <https://www.rfc-editor.org/info/rfc4250>.\n   [RFC4251]  Ylonen,
      T. and C. Lonvick, Ed., \"The Secure Shell (SSH)\n              Protocol Architecture\",
      RFC 4251, DOI 10.17487/RFC4251,\n              January 2006, <https://www.rfc-editor.org/info/rfc4251>.\n
      \  [RFC4252]  Ylonen, T. and C. Lonvick, Ed., \"The Secure Shell (SSH)\n              Authentication
      Protocol\", RFC 4252, DOI 10.17487/RFC4252,\n              January 2006, <https://www.rfc-editor.org/info/rfc4252>.\n
      \  [RFC4253]  Ylonen, T. and C. Lonvick, Ed., \"The Secure Shell (SSH)\n              Transport
      Layer Protocol\", RFC 4253, DOI 10.17487/RFC4253,\n              January 2006,
      <https://www.rfc-editor.org/info/rfc4253>.\n   [RFC4254]  Ylonen, T. and C.
      Lonvick, Ed., \"The Secure Shell (SSH)\n              Connection Protocol\",
      RFC 4254, DOI 10.17487/RFC4254,\n              January 2006, <https://www.rfc-editor.org/info/rfc4254>.\n
      \  [RFC8126]  Cotton, M., Leiba, B., and T. Narten, \"Guidelines for\n              Writing
      an IANA Considerations Section in RFCs\", BCP 26,\n              RFC 8126, DOI
      10.17487/RFC8126, June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n"
    title: 6.1.  Normative References
  - contents:
    - "6.2.  Informative References\n   [IANA-KE]  IANA, \"Key Exchange Method Names\",\n
      \             <https://www.iana.org/assignments/ssh-parameters/>.\n   [IANA-M]
      \  IANA, \"Message Numbers\",\n              <https://www.iana.org/assignments/ssh-parameters/>.\n
      \  [RFC8332]  Bider, D., \"Use of RSA Keys with SHA-256 and SHA-512 in\n              the
      Secure Shell (SSH) Protocol\", RFC 8332,\n              DOI 10.17487/RFC8332,
      March 2018,\n              <https://www.rfc-editor.org/info/rfc8332>.\n   [WINADMIN]
      Microsoft, \"How to launch a process as a Full\n              Administrator
      when UAC is enabled?\", March 2013,\n              <https://blogs.msdn.microsoft.com/winsdk/2013/03/22/\n
      \             how-to-launch-a-process-as-a-full-administrator-when-\n              uac-is-enabled/>.\n
      \  [WINTOKEN] Microsoft, \"TOKEN_ELEVATION_TYPE enumeration\",\n              <https://msdn.microsoft.com/en-us/library/windows/desktop/\n
      \             bb530718.aspx>.\n"
    title: 6.2.  Informative References
  title: 6.  References
- contents:
  - "Acknowledgments\n   Thanks to Markus Friedl and Damien Miller for comments and
    initial\n   implementation.  Thanks to Peter Gutmann, Roumen Petrov, Mark D.\n
    \  Baushke, Daniel Migault, Eric Rescorla, Matthew A. Miller, Mirja\n   Kuehlewind,
    Adam Roach, Spencer Dawkins, Alexey Melnikov, and Ben\n   Campbell for reviews
    and feedback.\n"
  title: Acknowledgments
- contents:
  - "Author's Address\n   Denis Bider\n   Bitvise Limited\n   4105 Lombardy Court\n
    \  Colleyville, TX  76034\n   United States of America\n   Email: ietf-ssh3@denisbider.com\n
    \  URI:   https://www.bitvise.com/\n"
  title: Author's Address
