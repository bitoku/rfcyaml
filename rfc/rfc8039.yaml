- title: __initial_text__
  contents:
  - '                     Multipath Time Synchronization

    '
- title: Abstract
  contents:
  - "Abstract\n   Clock synchronization protocols are very widely used in IP-based\n\
    \   networks.  The Network Time Protocol (NTP) has been commonly deployed\n  \
    \ for many years, and the last few years have seen an increasingly\n   rapid deployment\
    \ of the Precision Time Protocol (PTP).  As time-\n   sensitive applications evolve,\
    \ clock accuracy requirements are\n   becoming increasingly stringent, requiring\
    \ the time synchronization\n   protocols to provide high accuracy.  This memo\
    \ describes a multipath\n   approach to PTP and NTP over IP networks, allowing\
    \ the protocols to\n   run concurrently over multiple communication paths between\
    \ the master\n   and slave clocks, without modifying these protocols.  The multipath\n\
    \   approach can significantly contribute to clock accuracy, security,\n   and\
    \ fault tolerance.  The multipath approach that is presented in\n   this document\
    \ enables backward compatibility with nodes that do not\n   support the multipath\
    \ functionality.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 7841.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8039.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Conventions Used in This Document ...............................4\n  \
    \    2.1. Abbreviations ..............................................4\n    \
    \  2.2. Terminology ................................................4\n   3. Multiple\
    \ Paths in IP Networks ...................................5\n      3.1. Load Balancing\
    \ .............................................5\n      3.2. Using Multiple Paths\
    \ Concurrently ..........................5\n      3.3. Two-Way Paths ..............................................5\n\
    \   4. Solution Overview ...............................................6\n  \
    \    4.1. Path Configuration and Identification ......................6\n    \
    \  4.2. Combining ..................................................6\n   5. Multipath\
    \ Time Synchronization over IP Networks .................7\n      5.1. Overview\
    \ ...................................................7\n      5.2. Single-Ended\
    \ Multipath Synchronization .....................8\n           5.2.1. Single-Ended\
    \ MPPTP Synchronization Message\n                  Exchange ............................................8\n\
    \           5.2.2. Single-Ended MPNTP Synchronization Message\n              \
    \    Exchange ............................................9\n      5.3. Dual-Ended\
    \ Multipath Synchronization ......................10\n           5.3.1. Dual-Ended\
    \ MPPTP Synchronization Message Exchange ..10\n           5.3.2. Dual-Ended MPNTP\
    \ Synchronization Message Exchange ..11\n      5.4. Using Traceroute for Path\
    \ Discovery .......................12\n      5.5. Using Unicast Discovery for\
    \ MPPTP .........................13\n   6. Combining Algorithm ............................................13\n\
    \   7. Security Considerations ........................................14\n  \
    \ 8. Scope of the Experiment ........................................14\n   9.\
    \ References .....................................................15\n      9.1.\
    \ Normative References ......................................15\n      9.2. Informative\
    \ References ....................................15\n   Acknowledgments ...................................................17\n\
    \   Authors' Addresses ................................................17\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The two most common time synchronization protocols in IP\
    \ networks are\n   (1) the Network Time Protocol [NTP] and (2) the Precision Time\n\
    \   Protocol (PTP) as defined in the IEEE 1588 standard [IEEE1588].\n   The accuracy\
    \ of the time synchronization protocols directly depends\n   on the stability\
    \ and the symmetry of propagation delays in both\n   directions between the master\
    \ and slave clocks.  Depending on the\n   nature of the underlying network, time\
    \ synchronization protocol\n   packets can be subject to variable network latency\
    \ or path asymmetry\n   (e.g., [ASYMMETRY] [ASYMMETRY2]).  As time-sensitive applications\n\
    \   evolve, accuracy requirements are becoming increasingly stringent.\n   Using\
    \ a single network path in a clock synchronization protocol\n   closely ties the\
    \ slave clock accuracy to the behavior of the specific\n   path, which may suffer\
    \ from temporal congestion, faults, or malicious\n   attacks.  Relying on multiple\
    \ clock servers, as in NTP, solves these\n   problems but requires active maintenance\
    \ of multiple accurate sources\n   in the network, which is not always possible.\
    \  The usage of\n   Transparent Clocks (TCs) in PTP solves the congestion problem\
    \ by\n   eliminating the queuing time from the delay calculations but does not\n\
    \   address security or fault-tolerance aspects.\n                           \
    \        ____\n                            ______/    \\_____\n              \
    \          ___/                 \\____\n                   ____/             \
    \             \\\n       ____       /           path 1              /        \
    \   ___\n      /    \\     /    ________________________    \\          /   \\\
    \n     /Master\\____\\___/                        \\____\\________/Slave\\\n \
    \    \\Clock /    /   \\________ _______________/     \\       \\Clock/\n    \
    \  \\____/     \\                                  /        \\__ /\n         \
    \         \\____       path 2             __/\n                       \\_______\
    \           ______/\n                               \\_________/\n           \
    \           Figure 1: Multipath Connection\n   Since master and slave clocks are\
    \ often connected through more than\n   one path in the network, as shown in Figure\
    \ 1, [SLAVEDIV] suggested\n   that a time synchronization protocol can be run\
    \ over multiple paths,\n   providing several advantages.  First, it can significantly\
    \ increase\n   the clock accuracy as shown in [SLAVEDIV].  Second, this approach\n\
    \   provides additional security, allowing the mitigation of\n   man-in-the-middle\
    \ attacks against the time synchronization protocol\n   [DELAY-ATT].  Third, using\
    \ multiple paths concurrently provides an\n   inherent failure protection mechanism.\n\
    \   This document introduces Multipath PTP (MPPTP) and Multipath NTP\n   (MPNTP).\
    \  The functionality of the multipath approach is defined at\n   the network layer\
    \ and does not require any changes in PTP or NTP.\n   MPPTP and MPNTP are defined\
    \ over IP networks.  As IP networks\n   typically combine ECMP routing, this property\
    \ is leveraged for the\n   multiple paths used in MPPTP and MPNTP.  The key property\
    \ of the\n   multipath approach is that clocks in the network can use more than\n\
    \   one IP address.  Each {master IP, slave IP} address pair defines a\n   path.\
    \  Depending on the network topology and configuration, the IP\n   combination\
    \ pairs can form multiple diverse paths used by the\n   multipath synchronization\
    \ protocols.  It has been shown [MULTI] that\n   using multiple IP addresses over\
    \ the wide Internet indeed allows two\n   endpoints to attain multiple diverse\
    \ paths.\n   This document introduces two variants of the multipath approach:\n\
    \   (1) a variant that requires both master and slave nodes to support\n   the\
    \ multipath functionality, referred to as the dual-ended variant,\n   and (2)\
    \ a backward-compatible variant that allows a multipath clock\n   to connect to\
    \ a conventional single-path clock, referred to as the\n   single-ended variant.\n"
- title: 2.  Conventions Used in This Document
  contents:
  - '2.  Conventions Used in This Document

    '
- title: 2.1.  Abbreviations
  contents:
  - "2.1.  Abbreviations\n   BMC      Best Master Clock [IEEE1588]\n   ECMP     Equal-Cost\
    \ Multipath\n   LAN      Local Area Network\n   MPNTP    Multipath Network Time\
    \ Protocol\n   MPPTP    Multipath Precision Time Protocol\n   NTP      Network\
    \ Time Protocol [NTP]\n   PTP      Precision Time Protocol [IEEE1588]\n"
- title: 2.2.  Terminology
  contents:
  - "2.2.  Terminology\n   In the NTP terminology, a time synchronization protocol\
    \ is run\n   between a client and a server, while PTP uses the terms 'master'\
    \ and\n   'slave'.  Throughout this document, the sections that refer to both\n\
    \   PTP and NTP generically use the terms 'master' and 'slave'.\n"
- title: 3.  Multiple Paths in IP Networks
  contents:
  - '3.  Multiple Paths in IP Networks

    '
- title: 3.1.  Load Balancing
  contents:
  - "3.1.  Load Balancing\n   Traffic sent across IP networks is often load-balanced\
    \ across\n   multiple paths.  The load-balancing decisions are typically based\
    \ on\n   packet header fields: source and destination addresses, Layer 4\n   ports,\
    \ the Flow Label field in IPv6, etc.\n   Three common load-balancing criteria\
    \ are per-destination, per-flow,\n   and per-packet.  The per-destination load\
    \ balancers take a\n   load-balancing decision based on the destination IP address.\n\
    \   Per-flow load balancers use various fields in the packet header,\n   e.g.,\
    \ IP addresses and Layer 4 ports, for the load-balancing\n   decision.  Per-packet\
    \ load balancers use flow-blind techniques such\n   as round-robin without basing\
    \ the choice on the packet content.\n"
- title: 3.2.  Using Multiple Paths Concurrently
  contents:
  - "3.2.  Using Multiple Paths Concurrently\n   To utilize the diverse paths that\
    \ traverse per-destination\n   load balancers or per-flow load balancers, the\
    \ packet transmitter can\n   vary the IP addresses in the packet header.  The\
    \ analysis in [PARIS2]\n   shows that a significant majority of the flows on the\
    \ Internet\n   traverse per-destination or per-flow load balancing.  It presents\n\
    \   statistics that 72% of the flows traverse per-destination\n   load balancing\
    \ and 39% of the flows traverse per-flow load balancing,\n   while only a negligible\
    \ part of the flows traverse per-packet\n   load balancing.  These statistics\
    \ show that the vast majority of the\n   traffic on the Internet is load-balanced\
    \ based on packet header\n   fields.\n   The approaches in this document are based\
    \ on varying the source and\n   destination IP addresses in the packet header.\
    \  Possible extensions\n   have been considered that also vary the UDP ports.\
    \  However, some of\n   the existing implementations of PTP and NTP use fixed\
    \ UDP port values\n   in both the source and destination UDP port fields and thus\
    \ do not\n   allow this approach.\n"
- title: 3.3.  Two-Way Paths
  contents:
  - "3.3.  Two-Way Paths\n   A key property of IP networks is that packets forwarded\
    \ from A to B\n   do not necessarily traverse the same path as packets from B\
    \ to A.\n   Thus, we define a two-way path for a master-slave connection as a\n\
    \   pair of one-way paths: the first from master to slave and the second\n   from\
    \ slave to master.\n   If possible, a traffic engineering approach can be used\
    \ to verify\n   that time synchronization traffic is always forwarded through\n\
    \   bidirectional two-way paths, i.e., that each two-way path uses the\n   same\
    \ route in the forward and reverse directions, thus allowing\n   propagation time\
    \ symmetry.  However, in the general case, two-way\n   paths do not necessarily\
    \ use the same path for the forward and\n   reverse directions.\n"
- title: 4.  Solution Overview
  contents:
  - "4.  Solution Overview\n   The multipath time synchronization protocols we present\
    \ here are\n   comprised of two building blocks: one is the path configuration\
    \ and\n   identification, and the other is the algorithm used by the slave to\n\
    \   combine the information received from the various paths.\n"
- title: 4.1.  Path Configuration and Identification
  contents:
  - "4.1.  Path Configuration and Identification\n   The master and slave clocks must\
    \ be able to determine the path of\n   transmitted protocol packets and to identify\
    \ the path of incoming\n   protocol packets.  A path is determined by a {master\
    \ IP, slave IP}\n   address pair.  The synchronization protocol message exchange\
    \ is run\n   independently through each path.\n   Each IP address pair defines\
    \ a two-way path and thus allows the\n   clocks to bind a transmitted packet to\
    \ a specific path or to identify\n   the path of an incoming packet.\n   If possible,\
    \ the routing tables across the network should be\n   configured with multiple\
    \ traffic-engineered paths between the pair of\n   clocks.  By carefully configuring\
    \ the routers in such networks, it is\n   possible to create diverse paths for\
    \ each of the IP address pairs\n   between two clocks in the network.  However,\
    \ in public and provider\n   networks, the load-balancing behavior is hidden from\
    \ the end users.\n   In this case, the actual number of paths may be less than\
    \ the number\n   of IP address pairs, since some of the address pairs may share\
    \ common\n   paths.\n"
- title: 4.2.  Combining
  contents:
  - "4.2.  Combining\n   Various methods can be used for combining the time information\n\
    \   received from the different paths.  The output of the combining\n   algorithm\
    \ is the accurate time offset.  Combining methods are further\n   discussed in\
    \ Section 6.\n"
- title: 5.  Multipath Time Synchronization over IP Networks
  contents:
  - '5.  Multipath Time Synchronization over IP Networks

    '
- title: 5.1.  Overview
  contents:
  - "5.1.  Overview\n   This section presents two variants of MPPTP and MPNTP: single-ended\n\
    \   multipath time synchronization and dual-ended multipath time\n   synchronization.\
    \  In the first variant, the multipath approach is\n   only implemented by the\
    \ slave, and the master is not aware of its\n   usage.  In the second variant,\
    \ all clocks use multiple paths.\n   The dual-ended variant provides higher path\
    \ diversity by using\n   multiple IP addresses at both ends, the master and slave,\
    \ while the\n   single-ended variant only uses multiple addresses at the slave.\n\
    \   Consequently, the single-ended approach can interoperate with\n   existing\
    \ implementations that do not use multiple paths.  The\n   dual-ended and single-ended\
    \ approaches can coexist in the same\n   network; each slave selects the connection(s)\
    \ it wants to make with\n   the available masters.  A dual-ended slave could switch\
    \ to\n   single-ended mode if it does not see any dual-ended masters\n   available.\
    \  A single-ended slave could connect to a single IP address\n   of a dual-ended\
    \ master.\n   Multipath time synchronization, in both variants, requires clocks\
    \ to\n   use multiple IP addresses.  Using multiple IP addresses introduces a\n\
    \   trade-off.  A large number of IP addresses allows a large number of\n   diverse\
    \ paths, providing the advantages of slave diversity discussed\n   in Section\
    \ 1.  On the other hand, a large number of IP addresses is\n   more costly, requires\
    \ the network topology to be more redundant, and\n   exacts extra management overhead.\n\
    \   If possible, the set of IP addresses for each clock should be chosen\n   in\
    \ a way that enables the establishment of paths that are the most\n   different.\
    \  If the load-balancing rules in the network are known, it\n   is possible to\
    \ choose the IP addresses in a way that enforces path\n   diversity.  However,\
    \ even if the load-balancing scheme is not known,\n   a careful choice of the\
    \ IP addresses can increase the probability of\n   path diversity.  For example,\
    \ choosing multiple addresses with\n   different prefixes is likely to produce\
    \ higher path diversity, as BGP\n   routers are more likely to route these different\
    \ prefixes through\n   different routes.\n   The use of Network Address Translation\
    \ (NAT) may significantly reduce\n   the effectiveness of multipath synchronization\
    \ in some cases.  For\n   example, if a master uses multiple IP addresses that\
    \ are translated\n   to a single IP address, the path diversity can be dramatically\n\
    \   reduced compared to a network that does not use NAT.  Thus, path\n   discovery\
    \ should be used to identify the possible paths between the\n   master and slave.\
    \  Path discovery is further discussed in\n   Section 5.4.\n   The concept of\
    \ using multiple IP addresses or multiple interfaces is\n   well established and\
    \ is being used today by various applications and\n   protocols, e.g., [MPTCP].\
    \  Using multiple interfaces introduces some\n   challenges and issues, which\
    \ were presented and discussed in [MIF].\n   The descriptions in this section\
    \ refer to the end-to-end scheme of\n   PTP but are similarly applicable to the\
    \ peer-to-peer scheme.  MPNTP,\n   as described in this document, refers to the\
    \ NTP client-server mode,\n   although the concepts described here can be extended\
    \ to include the\n   symmetric variant as well.\n   Multipath synchronization\
    \ by nature requires protocol messages to be\n   sent as unicast.  Specifically\
    \ in PTP, the following messages must be\n   sent as unicast in MPPTP: Sync, Delay_Req,\
    \ Delay_Resp, PDelay_Req,\n   PDelay_Resp, Follow_Up, and PDelay_Resp_Follow_Up.\
    \  Note that\n   [IEEE1588] allows these messages to be sent either as multicast\
    \ or as\n   unicast.\n"
- title: 5.2.  Single-Ended Multipath Synchronization
  contents:
  - "5.2.  Single-Ended Multipath Synchronization\n   In the single-ended approach,\
    \ only the slave is aware of the fact\n   that multiple paths are used, while\
    \ the master is agnostic to the\n   usage of multiple paths.  This approach allows\
    \ a hybrid network,\n   where some of the clocks are multipath clocks and others\
    \ are\n   conventional one-path clocks.  A single-ended multipath clock\n   presents\
    \ itself to the network as N independent clocks, using N IP\n   addresses, as\
    \ well as N clockIdentity [IEEE1588] values (in PTP).\n   Thus, the usage of multiple\
    \ slave identities by a slave clock is\n   transparent from the master's point\
    \ of view, such that it treats each\n   of the identities as a separate slave\
    \ clock.\n"
- title: 5.2.1.  Single-Ended MPPTP Synchronization Message Exchange
  contents:
  - "5.2.1.  Single-Ended MPPTP Synchronization Message Exchange\n   The single-ended\
    \ MPPTP message exchange procedure is as follows.\n   o  Each single-ended MPPTP\
    \ clock has a fixed set of N IP addresses\n      and N corresponding clockIdentities.\
    \  Each clock arbitrarily\n      defines one of its IP addresses and clockIdentity\
    \ values as the\n      clock primary identity.\n   o  A single-ended MPPTP port\
    \ sends Announce messages only from its\n      primary identity, according to\
    \ the BMC algorithm.\n   o  The BMC algorithm at each clock determines the master,\
    \ based on\n      the received Announce messages.\n   o  A single-ended MPPTP\
    \ port that is in the 'slave' state uses\n      unicast negotiation to request\
    \ the master to transmit unicast\n      messages to each of the N slave clockIdentity\
    \ values.  The slave\n      port periodically sends N Signaling messages to the\
    \ master, using\n      each of its N identities.  The Signaling message includes\
    \ the\n      REQUEST_UNICAST_TRANSMISSION TLV [IEEE1588].\n   o  The master periodically\
    \ sends unicast Sync messages from its\n      primary identity, identified by\
    \ the sourcePortIdentity [IEEE1588]\n      and IP address, to each of the slave\
    \ identities.\n   o  The slave, upon receiving a Sync message, identifies its\
    \ path\n      according to the destination IP address.  The slave sends a\n  \
    \    Delay_Req unicast message to the primary identity of the master.\n      The\
    \ Delay_Req is sent using the slave identity corresponding to\n      the path\
    \ through which the Sync was received.  Note that the rate\n      of Delay_Req\
    \ messages may be lower than the Sync message rate, and\n      thus a Sync message\
    \ is not necessarily followed by a Delay_Req.\n   o  The master, in response to\
    \ a Delay_Req message from the slave,\n      responds with a Delay_Resp message\
    \ using the IP address and\n      sourcePortIdentity from the Delay_Req message.\n\
    \   o  Upon receiving the Delay_Resp message, the slave identifies the\n     \
    \ path using the destination IP address and the\n      requestingPortIdentity\
    \ [IEEE1588].  The slave can then compute the\n      corresponding path delay\
    \ and the offset from the master.\n   o  The slave combines the information from\
    \ all negotiated paths.\n"
- title: 5.2.2.  Single-Ended MPNTP Synchronization Message Exchange
  contents:
  - "5.2.2.  Single-Ended MPNTP Synchronization Message Exchange\n   The single-ended\
    \ MPNTP message exchange procedure is as follows.\n   o  A single-ended MPNTP\
    \ client has N separate identities, i.e., N IP\n      addresses.  The assumption\
    \ is that the server information,\n      including its IP address, is known to\
    \ the NTP clients.  This is a\n      fair assumption, as typically the address(es)\
    \ of the NTP server(s)\n      is provided to the NTP client by configuration.\n\
    \   o  A single-ended MPNTP client initiates NTP with an NTP server\n      N times,\
    \ using each of its N identities.\n   o  NTP is maintained between the server\
    \ and each of the N client\n      identities.\n   o  The client sends NTP messages\
    \ to the master using each of its\n      N identities.\n   o  The server responds\
    \ to the client's NTP messages using the IP\n      address from the received NTP\
    \ packet.\n   o  The client, upon receiving an NTP packet, uses the IP destination\n\
    \      address to identify the path through which it came, and it uses\n     \
    \ the time information accordingly.\n   o  The client combines the information\
    \ from all paths.\n"
- title: 5.3.  Dual-Ended Multipath Synchronization
  contents:
  - "5.3.  Dual-Ended Multipath Synchronization\n   In dual-ended multipath synchronization,\
    \ each clock has N IP\n   addresses.  Time synchronization messages are exchanged\
    \ between some\n   of the combinations of {master IP, slave IP} addresses, allowing\n\
    \   multiple paths between the master and slave.  Note that the actual\n   number\
    \ of paths between the master and slave may be less than the\n   number of chosen\
    \ {master IP, slave IP} address pairs.\n   Once the multiple two-way connections\
    \ are established, a separate\n   synchronization protocol exchange instance is\
    \ run through each\n   of them.\n"
- title: 5.3.1.  Dual-Ended MPPTP Synchronization Message Exchange
  contents:
  - "5.3.1.  Dual-Ended MPPTP Synchronization Message Exchange\n   The dual-ended\
    \ MPPTP message exchange procedure is as follows.\n   o  Every clock has N IP\
    \ addresses but uses a single clockIdentity.\n   o  The BMC algorithm at each\
    \ clock determines the master.  The master\n      is identified by its clockIdentity,\
    \ allowing other clocks to know\n      the multiple IP addresses it uses.\n  \
    \ o  When a clock sends an Announce message, it sends it from each of\n      its\
    \ IP addresses with its clockIdentity.\n   o  A dual-ended MPPTP port that is\
    \ in the 'slave' state uses unicast\n      negotiation to request the master to\
    \ transmit unicast messages to\n      some or all of its N_s IP addresses.  This\
    \ negotiation is done\n      individually between a slave IP address and the corresponding\n\
    \      master IP address with which the slave desires a connection.  The\n   \
    \   slave port periodically sends Signaling messages to the master,\n      using\
    \ some or all of its N_s IP addresses as the source, to the\n      corresponding\
    \ master's N_m IP addresses.  The Signaling message\n      includes the REQUEST_UNICAST_TRANSMISSION\
    \ TLV [IEEE1588].\n      ('N_s' and 'N_m' indicate the number of IP addresses\
    \ of the slave\n      and master, respectively.)\n   o  The master periodically\
    \ sends unicast Sync messages from each of\n      its IP addresses to the corresponding\
    \ slave IP addresses for which\n      a unicast connection was negotiated.\n \
    \  o  The slave, upon receiving a Sync message, identifies its path\n      according\
    \ to the {source IP, destination IP} addresses.  The slave\n      sends a Delay_Req\
    \ unicast message, swapping the source and\n      destination IP addresses from\
    \ the Sync message.  Note that the\n      rate of Delay_Req messages may be lower\
    \ than the Sync message\n      rate, and thus a Sync message is not necessarily\
    \ followed by a\n      Delay_Req.\n   o  The master, in response to a Delay_Req\
    \ message from the slave,\n      responds with a Delay_Resp message using the\
    \ sourcePortIdentity\n      from the Delay_Req message and swapping the IP addresses\
    \ from the\n      Delay_Req.\n   o  Upon receiving the Delay_Resp message, the\
    \ slave identifies the\n      path using the {source IP, destination IP} address\
    \ pair.  The\n      slave can then compute the corresponding path delay and the\
    \ offset\n      from the master.\n   o  The slave combines the information from\
    \ all negotiated paths.\n"
- title: 5.3.2.  Dual-Ended MPNTP Synchronization Message Exchange
  contents:
  - "5.3.2.  Dual-Ended MPNTP Synchronization Message Exchange\n   The MPNTP message\
    \ exchange procedure is as follows.\n   o  Each NTP clock has a set of N IP addresses.\
    \  The assumption is\n      that the server information, including its multiple\
    \ IP addresses,\n      is known to the NTP clients.\n   o  The MPNTP client chooses\
    \ N_svr server IP addresses and N_c client\n      IP addresses and initiates the\
    \ N_svr*N_c instances of the\n      protocol, one for each {server IP, client\
    \ IP} address pair,\n      allowing the client to combine the information from\
    \ the N_s*N_c\n      paths.\n      ('N_svr' and 'N_c' indicate the number of IP\
    \ addresses of the\n      server and client, respectively, with which a client\
    \ chooses to\n      connect.)\n   o  The client sends NTP messages to the master\
    \ using each of the\n      source-destination address combinations.\n   o  The\
    \ server responds to the client's NTP messages using the IP\n      address combination\
    \ from the received NTP packet.\n   o  Using the {source IP, destination IP} address\
    \ pair in the received\n      packets, the client identifies the path and performs\
    \ its\n      computations for each of the paths accordingly.\n   o  The client\
    \ combines the information from all paths.\n"
- title: 5.4.  Using Traceroute for Path Discovery
  contents:
  - "5.4.  Using Traceroute for Path Discovery\n   The approach described thus far\
    \ uses multiple IP addresses in a\n   single clock to create multiple paths. \
    \ However, although each\n   two-way path is defined by a different {master IP,\
    \ slave IP} address\n   pair, some of the IP address pairs may traverse exactly\
    \ the same\n   network path, making them redundant.\n   Traceroute-based path\
    \ discovery can be used for filtering only the IP\n   addresses that obtain diverse\
    \ paths.  'Paris traceroute' [PARIS] and\n   'TraceFlow' [TRACEFLOW] are examples\
    \ of tools that discover the paths\n   between two points in the network.  It\
    \ should be noted that this\n   filtering approach is effective only if the Traceroute\
    \ implementation\n   uses the same IP addresses and UDP ports as the synchronization\n\
    \   protocol packets.  Since some Traceroute implementations vary the UDP\n  \
    \ ports, they may not be effective in identifying and filtering\n   redundant\
    \ paths in synchronization protocols.\n   Traceroute-based filtering can be implemented\
    \ by both master and\n   slave nodes, or it can be restricted to run only on slave\
    \ nodes to\n   reduce the overhead on the master.  For networks that guarantee\
    \ that\n   the path of the timing packets in the forward and reverse directions\n\
    \   are the same, path discovery should only be performed at the slave.\n   Since\
    \ network routes change over time, path discovery and redundant\n   path filtering\
    \ should be performed periodically.  Two {master IP,\n   slave IP} address pairs\
    \ that produce two diverse paths may be\n   rerouted to use the same paths.  Thus,\
    \ the set of addresses that are\n   used by each clock should be reassessed regularly.\n"
- title: 5.5.  Using Unicast Discovery for MPPTP
  contents:
  - "5.5.  Using Unicast Discovery for MPPTP\n   As presented above, MPPTP uses Announce\
    \ messages and the BMC\n   algorithm to discover the master.  The unicast discovery\
    \ option of\n   PTP can be used as an alternative.\n   When using unicast discovery,\
    \ the MPPTP slave ports maintain a list\n   of the IP addresses of the master.\
    \  The slave port uses unicast\n   negotiation to request unicast service from\
    \ the master as follows:\n   o  In single-ended MPPTP, the slave uses unicast\
    \ negotiation from\n      each of its identities to the master's (only) identity.\n\
    \   o  In dual-ended MPPTP, the slave uses unicast negotiation from its\n    \
    \  IP addresses, each to a corresponding master IP address, to\n      request\
    \ unicast synchronization messages.\n   Afterwards, the message exchange continues\
    \ as described in\n   Sections 5.2.1 and 5.3.1.\n   The unicast discovery option\
    \ can be used in networks that do not\n   support multicast or in networks in\
    \ which the master clocks are known\n   in advance.  In particular, unicast discovery\
    \ avoids multicasting\n   Announce messages.\n"
- title: 6.  Combining Algorithm
  contents:
  - "6.  Combining Algorithm\n   Previous sections discussed the methods of creating\
    \ the multiple\n   paths and obtaining the time information required by the slave\n\
    \   algorithm.  Once the time information is received through each of the\n  \
    \ paths, the slave should use a combining algorithm, which consolidates\n   the\
    \ information from the different paths into a single clock.\n   Various methods\
    \ have been suggested for combining information from\n   different paths or from\
    \ different clocks, e.g., [NTP] [SLAVEDIV]\n   [HIGH-AVAI] [KALMAN].  The choice\
    \ of the combining algorithm is local\n   to the slave and does not affect interoperability.\
    \  Hence, this\n   document does not define a specific method to be used by the\
    \ slave.\n   The combining algorithm should be chosen carefully based on the\n\
    \   system properties, as different combining algorithms provide\n   different\
    \ advantages.  For example, some combining algorithms (e.g.,\n   [NTP] [DELAY-ATT])\
    \ are intended to be robust in the face of security\n   attacks, while other combining\
    \ algorithms (e.g., [KALMAN]) are more\n   resilient to random delay variation.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   The security aspects of time synchronization\
    \ protocols are discussed\n   in detail in [RFC7384].  The methods described in\
    \ this document\n   propose to run a time synchronization protocol through redundant\n\
    \   paths and thus allow the detection and mitigation of\n   man-in-the-middle\
    \ attacks, as described in [DELAY-ATT].\n   Specifically, multipath synchronization\
    \ can mitigate the following\n   threats (as per [RFC7384]):\n   o  Packet manipulation\
    \ (Section 3.2.1 of [RFC7384]).\n   o  Packet interception and removal (Section\
    \ 3.2.5 of [RFC7384]).\n   o  Packet delay manipulation (Section 3.2.6 of [RFC7384]).\n\
    \   It should be noted that when using multiple paths, these paths may\n   partially\
    \ overlap, and thus an attack that takes place in a common\n   segment of these\
    \ paths is not mitigated by the redundancy.  Moreover,\n   an on-path attacker\
    \ may in some cases have access to more than one\n   router or may be able to\
    \ migrate from one router to another.\n   Therefore, when using multiple paths,\
    \ it is important for the paths\n   to be as diverse and as independent as possible,\
    \ making the\n   redundancy scheme more tolerant to on-path attacks.\n   It should\
    \ be noted that the multipath approach requires the master\n   (or NTP server)\
    \ to dedicate more resources to each slave (client)\n   than the conventional\
    \ single-path approach.  Hence, well-known\n   Distributed Denial-of-Service (DDoS)\
    \ attacks may potentially be\n   amplified when the multipath approach is enabled.\n"
- title: 8.  Scope of the Experiment
  contents:
  - "8.  Scope of the Experiment\n   This memo is published as an Experimental RFC.\
    \  The purpose of the\n   experimental period is to allow the community to analyze\
    \ and to\n   verify the methods defined in this document.  An experimental\n \
    \  evaluation of some of these methods has been published in [MULTI].\n   It is\
    \ expected that the experimental period will allow the methods to\n   be further\
    \ investigated and verified by the community.  The duration\n   of the experiment\
    \ is expected to be no less than two years from the\n   publication of this document.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [IEEE1588] IEEE Instrumentation and Measurement\
    \ Society, \"IEEE\n              Standard for a Precision Clock Synchronization\
    \ Protocol\n              for Networked Measurement and Control Systems\", IEEE\n\
    \              Std 1588-2008, DOI 10.1109/IEEESTD.2008.4579760.\n   [NTP]    \
    \  Mills, D., Martin, J., Ed., Burbank, J., and W. Kasch,\n              \"Network\
    \ Time Protocol Version 4: Protocol and Algorithms\n              Specification\"\
    , RFC 5905, DOI 10.17487/RFC5905, June 2010,\n              <http://www.rfc-editor.org/info/rfc5905>.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [ASYMMETRY]\n              He, Y., Faloutsos,\
    \ M., Krishnamurthy, S., and B. Huffaker,\n              \"On routing asymmetry\
    \ in the Internet\", IEEE GLOBECOM,\n              DOI 10.1109/GLOCOM.2005.1577769,\
    \ December 2005.\n   [ASYMMETRY2]\n              Pathak, A., Pucha, H., Zhang,\
    \ Y., Hu, C., and Z. Mao, \"A\n              measurement study of internet delay\
    \ asymmetry\",\n              International Conference on Passive and Active Network\n\
    \              Measurement 2008, DOI 10.1007/978-3-540-79232-1_19,\n         \
    \     April 2008.\n   [DELAY-ATT]\n              Mizrahi, T., \"A Game Theoretic\
    \ Analysis of Delay Attacks\n              against Time Synchronization Protocols\"\
    , IEEE\n              International Symposium on Precision Clock Synchronization\n\
    \              for Measurement, Control and Communication (ISPCS),\n         \
    \     DOI 10.1109/ISPCS.2012.6336612, September 2012.\n   [HIGH-AVAI]\n      \
    \        Ferrari, P., Flammini, A., Rinaldi, S., and G. Prytz,\n             \
    \ \"High availability IEEE 1588 nodes over IEEE 802.1 aq\n              Shortest\
    \ Path Bridging networks\", IEEE International\n              Symposium on Precision\
    \ Clock Synchronization for\n              Measurement, Control and Communication\
    \ (ISPCS),\n              DOI 10.1109/ISPCS.2013.6644760, September 2013.\n  \
    \ [KALMAN]   Giorgi, G. and C. Narduzzi, \"Kalman filtering for\n            \
    \  multi-path network synchronization\", IEEE International\n              Symposium\
    \ on Precision Clock Synchronization for\n              Measurement, Control and\
    \ Communication (ISPCS),\n              DOI 10.1109/ISPCS.2014.6948693, September\
    \ 2014.\n   [MIF]      Blanchet, M. and P. Seite, \"Multiple Interfaces and\n\
    \              Provisioning Domains Problem Statement\", RFC 6418,\n         \
    \     DOI 10.17487/RFC6418, November 2011,\n              <http://www.rfc-editor.org/info/rfc6418>.\n\
    \   [MPTCP]    Ford, A., Raiciu, C., Handley, M., and O. Bonaventure,\n      \
    \        \"TCP Extensions for Multipath Operation with Multiple\n            \
    \  Addresses\", RFC 6824, DOI 10.17487/RFC6824, January 2013,\n              <http://www.rfc-editor.org/info/rfc6824>.\n\
    \   [MULTI]    Shpiner, A., Revah, Y., and T. Mizrahi, \"Multi-path Time\n   \
    \           Protocols\", IEEE International Symposium on Precision\n         \
    \     Clock Synchronization for Measurement, Control and\n              Communication\
    \ (ISPCS), DOI 10.1109/ISPCS.2013.6644754,\n              September 2013.\n  \
    \ [PARIS]    Augustin, B., Friedman, T., and R. Teixeira, \"Measuring\n      \
    \        Load-balanced Paths in the Internet\", 7th ACM SIGCOMM\n            \
    \  conference on Internet measurement (IMC '07),\n              DOI 10.1145/1298306.1298329,\
    \ October 2007.\n   [PARIS2]   Augustin, B., Friedman, T., and R. Teixeira, \"\
    Measuring\n              Multipath Routing in the Internet\", IEEE/ACM Transactions\n\
    \              on Networking, 19(3), pp. 830-840,\n              DOI 10.1109/TNET.2010.2096232,\
    \ June 2011.\n   [RFC7384]  Mizrahi, T., \"Security Requirements of Time Protocols\
    \ in\n              Packet Switched Networks\", RFC 7384, DOI 10.17487/RFC7384,\n\
    \              October 2014, <http://www.rfc-editor.org/info/rfc7384>.\n   [SLAVEDIV]\
    \ Mizrahi, T., \"Slave Diversity: Using Multiple Paths to\n              Improve\
    \ the Accuracy of Clock Synchronization Protocols\",\n              IEEE International\
    \ Symposium on Precision Clock\n              Synchronization for Measurement,\
    \ Control and Communication\n              (ISPCS), DOI 10.1109/ISPCS.2012.6336621,\
    \ September 2012.\n   [TRACEFLOW]\n              Narasimhan, J., Venkataswami,\
    \ B., Groves, R., and P.\n              Hoose, \"Traceflow\", Work in Progress,\n\
    \              draft-janapath-intarea-traceflow-00, January 2012.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The authors would like to thank Yoram Revah for his contribution\
    \ to\n   this work.  The authors also gratefully acknowledge the useful\n   comments\
    \ provided by Peter Meyer, Doug Arnold, Joe Abley, Zhen Cao,\n   Watson Ladd,\
    \ and Mirja Kuehlewind, as well as other comments received\n   from the TICTOC\
    \ working group participants.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Alex Shpiner\n   Mellanox Technologies, Ltd.\n   Hakidma\
    \ 26\n   Ofer Industrial Park\n   Yokneam, 2069200\n   Israel\n   Email: alexshp@mellanox.com\n\
    \   Richard Tse\n   Microsemi\n   8555 Baxter Place\n   Burnaby, BC  V5A 4V7\n\
    \   Canada\n   Email: Richard.Tse@microsemi.com\n   Craig Schelp\n   Oracle\n\
    \   Email: craig.schelp@oracle.com\n   Tal Mizrahi\n   Marvell\n   6 Hamada St.\n\
    \   Yokneam, 2066721\n   Israel\n   Email: talmi@marvell.com\n"
