- title: __initial_text__
  contents:
  - "  Use of the SHAKE One-Way Hash Functions in the Cryptographic Message\n    \
    \                          Syntax (CMS)\n"
- title: Abstract
  contents:
  - "Abstract\n   This document updates the \"Cryptographic Message Syntax (CMS)\n\
    \   Algorithms\" (RFC 3370) and describes the conventions for using the\n   SHAKE\
    \ family of hash functions in the Cryptographic Message Syntax as\n   one-way\
    \ hash functions with the RSA Probabilistic Signature Scheme\n   (RSASSA-PSS)\
    \ and Elliptic Curve Digital Signature Algorithm (ECDSA).\n   The conventions\
    \ for the associated signer public keys in CMS are also\n   described.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8702.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n     1.1.  Terminology\n   2.  Identifiers\n\
    \   3.  Use in CMS\n     3.1.  Message Digests\n     3.2.  Signatures\n      \
    \ 3.2.1.  RSASSA-PSS Signatures\n       3.2.2.  ECDSA Signatures\n     3.3.  Public\
    \ Keys\n     3.4.  Message Authentication Codes\n   4.  IANA Considerations\n\
    \   5.  Security Considerations\n   6.  References\n     6.1.  Normative References\n\
    \     6.2.  Informative References\n   Appendix A.  ASN.1 Module\n   Acknowledgements\n\
    \   Authors' Addresses\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   \"Cryptographic Message Syntax (CMS)\" [RFC5652] describes\
    \ syntax used\n   to digitally sign, digest, authenticate, or encrypt arbitrary\
    \ message\n   contents.  \"Cryptographic Message Syntax (CMS) Algorithms\" [RFC3370]\n\
    \   defines the use of common cryptographic algorithms with CMS.  This\n   specification\
    \ updates RFC 3370 and describes the use of the SHAKE128\n   and SHAKE256 specified\
    \ in [SHA3] as new hash functions in CMS.  In\n   addition, it describes the use\
    \ of these functions with the RSA\n   Probabilistic Signature Scheme (RSASSA-PSS)\
    \ signature algorithm\n   [RFC8017] and the Elliptic Curve Digital Signature Algorithm\
    \ (ECDSA)\n   [X9.62] with the CMS signed-data content type.\n   In the SHA-3\
    \ family, two extendable-output functions (SHAKEs),\n   SHAKE128 and SHAKE256,\
    \ are defined.  Four other hash function\n   instances (SHA3-224, SHA3-256, SHA3-384,\
    \ and SHA3-512) are also\n   defined but are out of scope for this document. \
    \ A SHAKE is a\n   variable-length hash function defined as SHAKE(M, d) where\
    \ the output\n   is a d-bit-long digest of message M.  The corresponding collision\
    \ and\n   second-preimage-resistance strengths for SHAKE128 are min(d/2,128)\n\
    \   and min(d,128) bits, respectively (see Appendix A.1 of [SHA3]).  And\n   the\
    \ corresponding collision and second-preimage-resistance strengths\n   for SHAKE256\
    \ are min(d/2,256) and min(d,256) bits, respectively.  In\n   this specification,\
    \ we use d=256 (for SHAKE128) and d=512 (for\n   SHAKE256).\n   A SHAKE can be\
    \ used in CMS as the message digest function (to hash\n   the message to be signed)\
    \ in RSASSA-PSS and ECDSA, as the message\n   authentication code, and as the\
    \ mask generation function (MGF) in\n   RSASSA-PSS.  This specification describes\
    \ the identifiers for SHAKEs\n   to be used in CMS and their meanings.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT\
    \ RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 2.  Identifiers
  contents:
  - "2.  Identifiers\n   This section identifies eight new object identifiers (OIDs)\
    \ for using\n   SHAKE128 and SHAKE256 in CMS.\n   Two object identifiers for SHAKE128\
    \ and SHAKE256 hash functions are\n   defined in [shake-nist-oids], and we include\
    \ them here for\n   convenience.\n     id-shake128 OBJECT IDENTIFIER ::= { joint-iso-itu-t(2)\n\
    \          country(16) us(840) organization(1) gov(101) csor(3)\n          nistAlgorithm(4)\
    \ 2 11 }\n     id-shake256 OBJECT IDENTIFIER ::= { joint-iso-itu-t(2)\n      \
    \    country(16) us(840) organization(1) gov(101) csor(3)\n          nistAlgorithm(4)\
    \ 2 12 }\n   In this specification, when using the id-shake128 or id-shake256\n\
    \   algorithm identifiers, the parameters MUST be absent.  That is, the\n   identifier\
    \ SHALL be a SEQUENCE of one component, the OID.\n   [RFC8692] defines two identifiers\
    \ for RSASSA-PSS signatures using\n   SHAKEs, which we include here for convenience.\n\
    \     id-RSASSA-PSS-SHAKE128  OBJECT IDENTIFIER  ::=  { iso(1)\n             \
    \  identified-organization(3) dod(6) internet(1)\n               security(5) mechanisms(5)\
    \ pkix(7) algorithms(6) 30 }\n     id-RSASSA-PSS-SHAKE256  OBJECT IDENTIFIER \
    \ ::=  { iso(1)\n               identified-organization(3) dod(6) internet(1)\n\
    \               security(5) mechanisms(5) pkix(7) algorithms(6) 31 }\n   The same\
    \ RSASSA-PSS algorithm identifiers can be used for identifying\n   public keys\
    \ and signatures.\n   [RFC8692] also defines two algorithm identifiers of ECDSA\
    \ signatures\n   using SHAKEs, which we include here for convenience.\n     id-ecdsa-with-shake128\
    \ OBJECT IDENTIFIER  ::=  { iso(1)\n               identified-organization(3)\
    \ dod(6) internet(1)\n               security(5) mechanisms(5) pkix(7) algorithms(6)\
    \ 32 }\n     id-ecdsa-with-shake256 OBJECT IDENTIFIER  ::=  { iso(1)\n       \
    \        identified-organization(3) dod(6) internet(1)\n               security(5)\
    \ mechanisms(5) pkix(7) algorithms(6) 33 }\n   The parameters for the four RSASSA-PSS\
    \ and ECDSA identifiers MUST be\n   absent.  That is, each identifier SHALL be\
    \ a SEQUENCE of one\n   component, the OID.\n   In [shake-nist-oids], the National\
    \ Institute of Standards and\n   Technology (NIST) defines two object identifiers\
    \ for Keccak message\n   authentication codes (KMACs) using SHAKE128 and SHAKE256,\
    \ and we\n   include them here for convenience.\n      id-KmacWithSHAKE128 OBJECT\
    \ IDENTIFIER ::= { joint-iso-itu-t(2)\n          country(16) us(840) organization(1)\
    \ gov(101) csor(3)\n          nistAlgorithm(4) 2 19 }\n      id-KmacWithSHAKE256\
    \ OBJECT IDENTIFIER ::= { joint-iso-itu-t(2)\n          country(16) us(840) organization(1)\
    \ gov(101) csor(3)\n          nistAlgorithm(4) 2 20 }\n   The parameters for id-KmacWithSHAKE128\
    \ and id-KmacWithSHAKE256 are\n   OPTIONAL.\n   Sections 3.1, 3.2.1, 3.2.2, and\
    \ 3.4 specify the required output\n   length for each use of SHAKE128 or SHAKE256\
    \ in message digests,\n   RSASSA-PSS, ECDSA, and KMAC.\n"
- title: 3.  Use in CMS
  contents:
  - '3.  Use in CMS

    '
- title: 3.1.  Message Digests
  contents:
  - "3.1.  Message Digests\n   The id-shake128 and id-shake256 OIDs (see Section 2)\
    \ can be used as\n   the digest algorithm identifiers located in the SignedData,\n\
    \   SignerInfo, DigestedData, and the AuthenticatedData digestAlgorithm\n   fields\
    \ in CMS [RFC5652].  The OID encoding MUST omit the parameters\n   field and the\
    \ output length of SHAKE128 or SHAKE256 as the message\n   digest MUST be 32 or\
    \ 64 bytes, respectively.\n   The digest values are located in the DigestedData\
    \ field and the\n   Message Digest authenticated attribute included in the\n \
    \  signedAttributes of the SignedData signerInfos.  In addition, digest\n   values\
    \ are input to signature algorithms.  The digest algorithm MUST\n   be the same\
    \ as the message hash algorithms used in signatures.\n"
- title: 3.2.  Signatures
  contents:
  - "3.2.  Signatures\n   In CMS, signature algorithm identifiers are located in the\
    \ SignerInfo\n   signatureAlgorithm field of signed-data content type and\n  \
    \ countersignature attribute.  Signature values are located in the\n   SignerInfo\
    \ signature field of signed-data content type and\n   countersignature attribute.\n\
    \   Conforming implementations that process RSASSA-PSS and ECDSA with\n   SHAKE\
    \ signatures when processing CMS data MUST recognize the\n   corresponding OIDs\
    \ specified in Section 2.\n   When using RSASSA-PSS or ECDSA with SHAKEs, the\
    \ RSA modulus or ECDSA\n   curve order SHOULD be chosen in line with the SHAKE\
    \ output length.\n   Refer to Section 5 for more details.\n"
- title: 3.2.1.  RSASSA-PSS Signatures
  contents:
  - "3.2.1.  RSASSA-PSS Signatures\n   The RSASSA-PSS algorithm is defined in [RFC8017].\
    \  When id-RSASSA-\n   PSS-SHAKE128 or id-RSASSA-PSS-SHAKE256 (specified in Section\
    \ 2) is\n   used, the encoding MUST omit the parameters field.  That is, the\n\
    \   AlgorithmIdentifier SHALL be a SEQUENCE of one component: id-RSASSA-\n   PSS-SHAKE128\
    \ or id-RSASSA-PSS-SHAKE256.  [RFC4055] defines RSASSA-\n   PSS-params that are\
    \ used to define the algorithms and inputs to the\n   algorithm.  This specification\
    \ does not use parameters because the\n   hash, mask generation algorithm, trailer,\
    \ and salt are embedded in\n   the OID definition.\n   The hash algorithm used\
    \ to hash a message being signed and the hash\n   algorithm as the mask generation\
    \ function used in RSASSA-PSS MUST be\n   the same: both SHAKE128 or both SHAKE256.\
    \  The output length of the\n   hash algorithm that hashes the message SHALL be\
    \ 32 (for SHAKE128) or\n   64 bytes (for SHAKE256).\n   The mask generation function\
    \ takes an octet string of variable length\n   and a desired output length as\
    \ input, and outputs an octet string of\n   the desired length.  In RSASSA-PSS\
    \ with SHAKEs, the SHAKEs MUST be\n   used natively as the MGF, instead of the\
    \ MGF1 algorithm that uses the\n   hash function in multiple iterations, as specified\
    \ in Appendix B.2.1\n   of [RFC8017].  In other words, the MGF is defined as the\
    \ SHAKE128 or\n   SHAKE256 with input being the mgfSeed for id-RSASSA-PSS-SHAKE128\
    \ and\n   id-RSASSA-PSS-SHAKE256, respectively.  The mgfSeed is an octet string\n\
    \   used as the seed to generate the mask [RFC8017].  As explained in\n   Step\
    \ 9 of Section 9.1.1 of [RFC8017], the output length of the MGF is\n   emLen -\
    \ hLen - 1 bytes. emLen is the maximum message length\n   ceil((n-1)/8), where\
    \ n is the RSA modulus in bits. hLen is 32 and 64\n   bytes for id-RSASSA-PSS-SHAKE128\
    \ and id-RSASSA-PSS-SHAKE256,\n   respectively.  Thus, when SHAKE is used as the\
    \ MGF, the SHAKE output\n   length maskLen is (8*emLen - 264) or (8*emLen - 520)\
    \ bits,\n   respectively.  For example, when RSA modulus n is 2048, the output\n\
    \   length of SHAKE128 or SHAKE256 as the MGF will be 1784 or 1528 bits\n   when\
    \ id-RSASSA-PSS-SHAKE128 or id-RSASSA-PSS-SHAKE256 is used,\n   respectively.\n\
    \   The RSASSA-PSS saltLength MUST be 32 bytes for id-RSASSA-PSS-SHAKE128\n  \
    \ or 64 bytes for id-RSASSA-PSS-SHAKE256.  Finally, the trailerField\n   MUST\
    \ be 1, which represents the trailer field with hexadecimal value\n   0xBC [RFC8017].\n"
- title: 3.2.2.  ECDSA Signatures
  contents:
  - "3.2.2.  ECDSA Signatures\n   The Elliptic Curve Digital Signature Algorithm (ECDSA)\
    \ is defined in\n   [X9.62].  When the id-ecdsa-with-shake128 or id-ecdsa-with-shake256\n\
    \   (specified in Section 2) algorithm identifier appears, the respective\n  \
    \ SHAKE function is used as the hash.  The encoding MUST omit the\n   parameters\
    \ field.  That is, the AlgorithmIdentifier SHALL be a\n   SEQUENCE of one component,\
    \ the OID id-ecdsa-with-shake128 or id-\n   ecdsa-with-shake256.\n   For simplicity\
    \ and compliance with the ECDSA standard specification\n   [X9.62], the output\
    \ length of the hash function must be explicitly\n   determined.  The output length\
    \ for SHAKE128 or SHAKE256 used in ECDSA\n   MUST be 32 or 64 bytes, respectively.\n\
    \   Conforming Certification Authority (CA) implementations that generate\n  \
    \ ECDSA with SHAKE signatures in certificates or Certificate Revocation\n   Lists\
    \ (CRLs) SHOULD generate such signatures with a deterministically\n   generated,\
    \ nonrandom k in accordance with all the requirements\n   specified in [RFC6979].\
    \  They MAY also generate such signatures in\n   accordance with all other recommendations\
    \ in [X9.62] or [SEC1] if\n   they have a stated policy that requires conformance\
    \ to those\n   standards.  Those standards have not specified SHAKE128 and SHAKE256\n\
    \   as hash algorithm options.  However, SHAKE128 and SHAKE256 with\n   output\
    \ length being 32 and 64 octets, respectively, can be used\n   instead of 256\
    \ and 512-bit output hash algorithms, such as SHA256 and\n   SHA512.\n"
- title: 3.3.  Public Keys
  contents:
  - "3.3.  Public Keys\n   In CMS, the signer's public key algorithm identifiers are\
    \ located in\n   the OriginatorPublicKey's algorithm attribute.  The conventions\
    \ and\n   encoding for RSASSA-PSS and ECDSA public keys algorithm identifiers\n\
    \   are as specified in Section 2.3 of [RFC3279], Section 3.1 of\n   [RFC4055],\
    \ and Section 2.1 of [RFC5480].\n   Traditionally, the rsaEncryption object identifier\
    \ is used to\n   identify RSA public keys.  The rsaEncryption object identifier\n\
    \   continues to identify the public key when the RSA private key owner\n   does\
    \ not wish to limit the use of the public key exclusively to\n   RSASSA-PSS with\
    \ SHAKEs.  When the RSA private key owner wishes to\n   limit the use of the public\
    \ key exclusively to RSASSA-PSS, the\n   AlgorithmIdentifier for RSASSA-PSS defined\
    \ in Section 2 SHOULD be\n   used as the algorithm attribute in the OriginatorPublicKey\
    \ sequence.\n   Conforming client implementations that process RSASSA-PSS with\
    \ SHAKE\n   public keys in CMS message MUST recognize the corresponding OIDs in\n\
    \   Section 2.\n   Conforming implementations MUST specify and process the algorithms\n\
    \   explicitly by using the OIDs specified in Section 2 when encoding\n   ECDSA\
    \ with SHAKE public keys in CMS messages.\n   The identifier parameters, as explained\
    \ in Section 2, MUST be absent.\n"
- title: 3.4.  Message Authentication Codes
  contents:
  - "3.4.  Message Authentication Codes\n   Keccak message authentication code (KMAC)\
    \ is specified in\n   [SP800-185].  In CMS, KMAC algorithm identifiers are located\
    \ in the\n   AuthenticatedData macAlgorithm field.  The KMAC values are located\
    \ in\n   the AuthenticatedData mac field.\n   When the id-KmacWithSHAKE128 or\
    \ id-KmacWithSHAKE256 OID is used as\n   the MAC algorithm identifier, the parameters\
    \ field is optional\n   (absent or present).  If absent, the SHAKE256 output length\
    \ used in\n   KMAC is 32 or 64 bytes, respectively, and the customization string\
    \ is\n   an empty string by default.\n   Conforming implementations that process\
    \ KMACs with the SHAKEs when\n   processing CMS data MUST recognize these identifiers.\n\
    \   When calculating the KMAC output, the variable N is 0xD2B282C2, S is\n   an\
    \ empty string, and L (the integer representing the requested output\n   length\
    \ in bits) is 256 or 512 for KmacWithSHAKE128 or\n   KmacWithSHAKE256, respectively,\
    \ in this specification.\n"
- title: 4.  IANA Considerations
  contents:
  - "4.  IANA Considerations\n   One object identifier for the ASN.1 module in Appendix\
    \ A was updated\n   in the \"Structure of Management Information (SMI) Security\
    \ for S/MIME\n   Module Identifier (1.2.840.113549.1.9.16.0)\" registry:\n   |\
    \ Decimal |     Description      | References |\n   |    70   | CMSAlgsForSHAKE-2019\
    \ |  RFC 8702  |\n                       Table 1\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   This document updates [RFC3370].  The security\
    \ considerations section\n   of that document applies to this specification as\
    \ well.\n   NIST has defined appropriate use of the hash functions in terms of\n\
    \   the algorithm strengths and expected time frames for secure use in\n   Special\
    \ Publications (SPs) [SP800-78-4] and [SP800-107].  These\n   documents can be\
    \ used as guides to choose appropriate key sizes for\n   various security scenarios.\n\
    \   SHAKE128 with an output length of 32 bytes offers 128 bits of\n   collision\
    \ and preimage resistance.  Thus, SHAKE128 OIDs in this\n   specification are\
    \ RECOMMENDED with a 2048- (112-bit security) or\n   3072-bit (128-bit security)\
    \ RSA modulus or curves with a group order\n   of 256 bits (128-bit security).\
    \  SHAKE256 with a 64-byte output\n   length offers 256 bits of collision and\
    \ preimage resistance.  Thus,\n   the SHAKE256 OIDs in this specification are\
    \ RECOMMENDED with 4096-bit\n   RSA modulus or higher or curves with group order\
    \ of at least 512\n   bits, such as NIST curve P-521 (256-bit security).  Note\
    \ that we\n   recommended a 4096-bit RSA because we would need a 15360-bit modulus\n\
    \   for 256 bits of security, which is impractical for today's\n   technology.\n\
    \   When more than two parties share the same message-authentication key,\n  \
    \ data origin authentication is not provided.  Any party that knows the\n   message-authentication\
    \ key can compute a valid MAC; therefore, the\n   content could originate from\
    \ any one of the parties.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3370]  Housley, R., \"Cryptographic Message Syntax (CMS)\n           \
    \   Algorithms\", RFC 3370, DOI 10.17487/RFC3370, August 2002,\n             \
    \ <https://www.rfc-editor.org/info/rfc3370>.\n   [RFC4055]  Schaad, J., Kaliski,\
    \ B., and R. Housley, \"Additional\n              Algorithms and Identifiers for\
    \ RSA Cryptography for use in\n              the Internet X.509 Public Key Infrastructure\
    \ Certificate\n              and Certificate Revocation List (CRL) Profile\",\
    \ RFC 4055,\n              DOI 10.17487/RFC4055, June 2005,\n              <https://www.rfc-editor.org/info/rfc4055>.\n\
    \   [RFC5480]  Turner, S., Brown, D., Yiu, K., Housley, R., and T. Polk,\n   \
    \           \"Elliptic Curve Cryptography Subject Public Key\n              Information\"\
    , RFC 5480, DOI 10.17487/RFC5480, March 2009,\n              <https://www.rfc-editor.org/info/rfc5480>.\n\
    \   [RFC5652]  Housley, R., \"Cryptographic Message Syntax (CMS)\", STD 70,\n\
    \              RFC 5652, DOI 10.17487/RFC5652, September 2009,\n             \
    \ <https://www.rfc-editor.org/info/rfc5652>.\n   [RFC8017]  Moriarty, K., Ed.,\
    \ Kaliski, B., Jonsson, J., and A. Rusch,\n              \"PKCS #1: RSA Cryptography\
    \ Specifications Version 2.2\",\n              RFC 8017, DOI 10.17487/RFC8017,\
    \ November 2016,\n              <https://www.rfc-editor.org/info/rfc8017>.\n \
    \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n      \
    \        2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n         \
    \     May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n   [SHA3]     National\
    \ Institute of Standards and Technology (NIST),\n              \"SHA-3 Standard:\
    \ Permutation-Based Hash and Extendable-\n              Output Functions\", FIPS\
    \ PUB 202,\n              DOI 10.6028/NIST.FIPS.202, August 2015,\n          \
    \    <https://nvlpubs.nist.gov/nistpubs/FIPS/\n              NIST.FIPS.202.pdf>.\n\
    \   [SP800-185]\n              National Institute of Standards and Technology\
    \ (NIST),\n              \"SHA-3 Derived Functions: cSHAKE, KMAC, TupleHash and\n\
    \              ParallelHash\", NIST Special Publication 800-185,\n           \
    \   DOI 10.6028/NIST.SP.800-185, December 2016,\n              <http://nvlpubs.nist.gov/nistpubs/SpecialPublications/\n\
    \              NIST.SP.800-185.pdf>.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [CMS-SHA3] Housley, R., \"Use of the SHA3 One-way\
    \ Hash Functions in\n              the Cryptographic Message Syntax (CMS)\", Work\
    \ in Progress,\n              Internet-Draft, draft-housley-lamps-cms-sha3-hash-00,\
    \ 27\n              March 2017, <https://tools.ietf.org/html/draft-housley-\n\
    \              lamps-cms-sha3-hash-00>.\n   [RFC3279]  Bassham, L., Polk, W.,\
    \ and R. Housley, \"Algorithms and\n              Identifiers for the Internet\
    \ X.509 Public Key\n              Infrastructure Certificate and Certificate Revocation\
    \ List\n              (CRL) Profile\", RFC 3279, DOI 10.17487/RFC3279, April\n\
    \              2002, <https://www.rfc-editor.org/info/rfc3279>.\n   [RFC5753]\
    \  Turner, S. and D. Brown, \"Use of Elliptic Curve\n              Cryptography\
    \ (ECC) Algorithms in Cryptographic Message\n              Syntax (CMS)\", RFC\
    \ 5753, DOI 10.17487/RFC5753, January\n              2010, <https://www.rfc-editor.org/info/rfc5753>.\n\
    \   [RFC5911]  Hoffman, P. and J. Schaad, \"New ASN.1 Modules for\n          \
    \    Cryptographic Message Syntax (CMS) and S/MIME\", RFC 5911,\n            \
    \  DOI 10.17487/RFC5911, June 2010,\n              <https://www.rfc-editor.org/info/rfc5911>.\n\
    \   [RFC6268]  Schaad, J. and S. Turner, \"Additional New ASN.1 Modules\n    \
    \          for the Cryptographic Message Syntax (CMS) and the Public\n       \
    \       Key Infrastructure Using X.509 (PKIX)\", RFC 6268,\n              DOI\
    \ 10.17487/RFC6268, July 2011,\n              <https://www.rfc-editor.org/info/rfc6268>.\n\
    \   [RFC6979]  Pornin, T., \"Deterministic Usage of the Digital Signature\n  \
    \            Algorithm (DSA) and Elliptic Curve Digital Signature\n          \
    \    Algorithm (ECDSA)\", RFC 6979, DOI 10.17487/RFC6979, August\n           \
    \   2013, <https://www.rfc-editor.org/info/rfc6979>.\n   [RFC8692]  Kampanakis,\
    \ P. and Q. Dang, \"Internet X.509 Public Key\n              Infrastructure: Additional\
    \ Algorithm Identifiers for\n              RSASSA-PSS and ECDSA Using SHAKEs\"\
    , RFC 8692,\n              DOI 10.17487/RFC8692, December 2019,\n            \
    \  <https://www.rfc-editor.org/info/rfc8692>.\n   [SEC1]     Standards for Efficient\
    \ Cryptography Group, \"SEC 1:\n              Elliptic Curve Cryptography\", May\
    \ 2009,\n              <http://www.secg.org/sec1-v2.pdf>.\n   [shake-nist-oids]\n\
    \              National Institute of Standards and Technology (NIST),\n      \
    \        \"Computer Security Objects Register\", October 2019,\n             \
    \ <https://csrc.nist.gov/Projects/Computer-Security-Objects-\n              Register/Algorithm-Registration>.\n\
    \   [SP800-107]\n              National Institute of Standards and Technology\
    \ (NIST),\n              \"Recommendation for Applications Using Approved Hash\n\
    \              Algorithms\", Draft NIST Special Publication 800-107\n        \
    \      Revised, August 2012,\n              <https://nvlpubs.nist.gov/nistpubs/Legacy/SP/\n\
    \              nistspecialpublication800-107r1.pdf>.\n   [SP800-78-4]\n      \
    \        National Institute of Standards and Technology (NIST),\n            \
    \  \"Cryptographic Algorithms and Key Sizes for Personal\n              Identity\
    \ Verification\", NIST Special Publication 800-78-4,\n              DOI 10.6028/NIST.SP.800-78-4,\
    \ May 2015,\n              <https://nvlpubs.nist.gov/nistpubs/SpecialPublications/\n\
    \              NIST.SP.800-78-4.pdf>.\n   [X9.62]    American National Standard\
    \ for Financial Services (ANSI),\n              \"Public Key Cryptography for\
    \ the Financial Services\n              Industry: the Elliptic Curve Digital Signature\
    \ Algorithm\n              (ECDSA)\", ANSI X9.62, November 2005.\n"
- title: Appendix A.  ASN.1 Module
  contents:
  - "Appendix A.  ASN.1 Module\n   This appendix includes the ASN.1 modules for SHAKEs\
    \ in CMS.  This\n   module includes some ASN.1 from other standards for reference.\n\
    \   CMSAlgsForSHAKE-2019 { iso(1) member-body(2) us(840)\n        rsadsi(113549)\
    \ pkcs(1) pkcs-9(9) smime(16) modules(0)\n        id-mod-cms-shakes-2019(70) }\n\
    \   DEFINITIONS EXPLICIT TAGS ::=\n   BEGIN\n   -- EXPORTS ALL;\n   IMPORTS\n\
    \   DIGEST-ALGORITHM, MAC-ALGORITHM, SMIME-CAPS\n   FROM AlgorithmInformation-2009\n\
    \     { iso(1) identified-organization(3) dod(6) internet(1) security(5)\n   \
    \    mechanisms(5) pkix(7) id-mod(0)\n       id-mod-algorithmInformation-02(58)\
    \ }\n   RSAPublicKey, rsaEncryption, id-ecPublicKey\n   FROM PKIXAlgs-2009 { iso(1)\
    \ identified-organization(3) dod(6)\n        internet(1) security(5) mechanisms(5)\
    \ pkix(7) id-mod(0)\n        id-mod-pkix1-algorithms2008-02(56) }\n   sa-rsassapssWithSHAKE128,\
    \ sa-rsassapssWithSHAKE256,\n   sa-ecdsaWithSHAKE128, sa-ecdsaWithSHAKE256\n \
    \  FROM PKIXAlgsForSHAKE-2019 {\n      iso(1) identified-organization(3) dod(6)\n\
    \      internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)\n      id-mod-pkix1-shakes-2019(94)\
    \ } ;\n   -- Message digest Algorithms (mda-)\n   -- used in SignedData, SignerInfo,\
    \ DigestedData,\n   -- and the AuthenticatedData digestAlgorithm\n   -- fields\
    \ in CMS\n   --\n   --  This expands MessageAuthAlgs from [RFC5652] and\n   --\
    \  MessageDigestAlgs in [RFC5753]\n   --\n   -- MessageDigestAlgs DIGEST-ALGORITHM\
    \ ::= {\n   --  mda-shake128   |\n   --  mda-shake256,\n   --  ...\n   -- }\n\
    \   --\n   -- One-Way Hash Functions\n   -- SHAKE128\n   mda-shake128 DIGEST-ALGORITHM\
    \ ::= {\n     IDENTIFIER id-shake128  -- with output length 32 bytes.\n   }\n\
    \   id-shake128 OBJECT IDENTIFIER ::= { joint-iso-itu-t(2) country(16)\n   --\
    \ SHAKE256\n   mda-shake256 DIGEST-ALGORITHM ::= {\n     IDENTIFIER id-shake256\
    \  -- with output length 64 bytes.\n   }\n   id-shake256 OBJECT IDENTIFIER ::=\
    \ { joint-iso-itu-t(2) country(16)\n   --\n   -- Public key algorithm identifiers\
    \ located in the\n   -- OriginatorPublicKey's algorithm attribute in CMS.\n  \
    \ -- And Signature identifiers used in SignerInfo\n   -- signatureAlgorithm field\
    \ of signed-data content\n   -- type and countersignature attribute in CMS.\n\
    \   --\n   -- From RFC 5280, for reference:\n   -- rsaEncryption OBJECT IDENTIFIER\
    \ ::=  { pkcs-1 1 }\n      -- When the rsaEncryption algorithm identifier is used\n\
    \      -- for a public key, the AlgorithmIdentifier parameters\n      -- field\
    \ MUST contain NULL.\n   --\n   id-RSASSA-PSS-SHAKE128  OBJECT IDENTIFIER  ::=\
    \  { iso(1)\n            identified-organization(3) dod(6) internet(1)\n     \
    \       security(5) mechanisms(5) pkix(7) algorithms(6) 30 }\n   id-RSASSA-PSS-SHAKE256\
    \  OBJECT IDENTIFIER  ::=  { iso(1)\n            identified-organization(3) dod(6)\
    \ internet(1)\n            security(5) mechanisms(5) pkix(7) algorithms(6) 31\
    \ }\n      -- When the id-RSASSA-PSS-* algorithm identifiers are used\n      --\
    \ for a public key or signature in CMS, the AlgorithmIdentifier\n      -- parameters\
    \ field MUST be absent.  The message digest algorithm\n      -- used in RSASSA-PSS\
    \ MUST be SHAKE128 or SHAKE256 with a 32- or\n      -- 64-byte output length,\
    \ respectively.  The mask generation\n      -- function MUST be SHAKE128 or SHAKE256\
    \ with an output length\n      -- of (8*ceil((n-1)/8) - 264) or (8*ceil((n-1)/8)\
    \ - 520) bits,\n      -- respectively, where n is the RSA modulus in bits.\n \
    \     -- The RSASSA-PSS saltLength MUST be 32 or 64 bytes, respectively.\n   \
    \   -- The trailerField MUST be 1, which represents the trailer\n      -- field\
    \ with hexadecimal value 0xBC.  Regardless of\n      -- id-RSASSA-PSS-* or rsaEncryption\
    \ being used as the\n      -- AlgorithmIdentifier of the OriginatorPublicKey,\
    \ the RSA\n      -- public key MUST be encoded using the RSAPublicKey type.\n\
    \   -- From RFC 4055, for reference:\n   -- RSAPublicKey ::= SEQUENCE {\n   --\
    \   modulus INTEGER, -- -- n\n   --   publicExponent INTEGER } -- -- e\n   id-ecdsa-with-shake128\
    \ OBJECT IDENTIFIER  ::=  { iso(1)\n            identified-organization(3) dod(6)\
    \ internet(1)\n            security(5) mechanisms(5) pkix(7) algorithms(6) 32\
    \ }\n   id-ecdsa-with-shake256 OBJECT IDENTIFIER  ::=  { iso(1)\n            identified-organization(3)\
    \ dod(6) internet(1)\n            security(5) mechanisms(5) pkix(7) algorithms(6)\
    \ 33 }\n      -- When the id-ecdsa-with-shake* algorithm identifiers are\n   \
    \   -- used in CMS, the AlgorithmIdentifier parameters field\n      -- MUST be\
    \ absent and the signature algorithm should be\n      -- deterministic ECDSA [RFC6979].\
    \  The message digest MUST\n      -- be SHAKE128 or SHAKE256 with a 32- or 64-byte\
    \ output\n      -- length, respectively.  In both cases, the ECDSA public key,\n\
    \      -- MUST be encoded using the id-ecPublicKey type.\n   -- From RFC 5480,\
    \ for reference:\n   -- id-ecPublicKey OBJECT IDENTIFIER ::= {\n   --    iso(1)\
    \ member-body(2) us(840) ansi-X9-62(10045) keyType(2) 1 }\n        -- The id-ecPublicKey\
    \ parameters must be absent or present\n        -- and are defined as:\n   --\
    \ ECParameters ::= CHOICE {\n   --     namedCurve         OBJECT IDENTIFIER\n\
    \   --     -- -- implicitCurve   NULL\n   --     -- -- specifiedCurve  SpecifiedECDomain\n\
    \   --  }\n   -- This expands SignatureAlgs from [RFC5912]\n   --\n   -- SignatureAlgs\
    \ SIGNATURE-ALGORITHM ::= {\n   --   sa-rsassapssWithSHAKE128 |\n   --   sa-rsassapssWithSHAKE256\
    \ |\n   --   sa-ecdsaWithSHAKE128 |\n   --   sa-ecdsaWithSHAKE256,\n   --   ...\n\
    \   -- }\n   -- This expands MessageAuthAlgs from [RFC5652] and [RFC6268]\n  \
    \ --\n   -- Message Authentication (maca-) Algorithms\n   -- used in AuthenticatedData\
    \ macAlgorithm in CMS\n   --\n   MessageAuthAlgs MAC-ALGORITHM ::= {\n       maca-KMACwithSHAKE128\
    \   |\n       maca-KMACwithSHAKE256,\n       ...\n   }\n   -- This expands SMimeCaps\
    \ from [RFC5911]\n   --\n   SMimeCaps SMIME-CAPS ::= {\n      -- sa-rsassapssWithSHAKE128.&smimeCaps\
    \ |\n      -- sa-rsassapssWithSHAKE256.&smimeCaps |\n      -- sa-ecdsaWithSHAKE128.&smimeCaps\
    \ |\n      -- sa-ecdsaWithSHAKE256.&smimeCaps,\n      maca-KMACwithSHAKE128.&smimeCaps\
    \   |\n      maca-KMACwithSHAKE256.&smimeCaps,\n      ...\n    }\n   --\n   --\
    \ KMAC with SHAKE128\n   maca-KMACwithSHAKE128 MAC-ALGORITHM ::= {\n         IDENTIFIER\
    \ id-KMACWithSHAKE128\n         PARAMS TYPE KMACwithSHAKE128-params ARE optional\n\
    \           -- If KMACwithSHAKE128-params parameters are absent,\n           --\
    \ the SHAKE128 output length used in KMAC is 256 bits\n           -- and the customization\
    \ string is an empty string.\n         IS-KEYED-MAC TRUE\n         SMIME-CAPS\
    \ {IDENTIFIED BY id-KMACWithSHAKE128}\n   }\n   id-KMACWithSHAKE128 OBJECT IDENTIFIER\
    \ ::=  { joint-iso-itu-t(2)\n   KMACwithSHAKE128-params ::= SEQUENCE {\n     kMACOutputLength\
    \     INTEGER DEFAULT 256, -- Output length in bits\n     customizationString\
    \  OCTET STRING DEFAULT ''H\n   }\n   -- KMAC with SHAKE256\n   maca-KMACwithSHAKE256\
    \ MAC-ALGORITHM ::= {\n         IDENTIFIER id-KMACWithSHAKE256\n         PARAMS\
    \ TYPE KMACwithSHAKE256-params ARE optional\n            -- If KMACwithSHAKE256-params\
    \ parameters are absent,\n            -- the SHAKE256 output length used in KMAC\
    \ is 512 bits\n            -- and the customization string is an empty string.\n\
    \         IS-KEYED-MAC TRUE\n         SMIME-CAPS {IDENTIFIED BY id-KMACWithSHAKE256}\n\
    \   }\n   id-KMACWithSHAKE256 OBJECT IDENTIFIER ::=  { joint-iso-itu-t(2)\n  \
    \                             country(16) us(840) organization(1)\n          \
    \                     gov(101) csor(3) nistAlgorithm(4)\n                    \
    \           hashAlgs(2) 20 }\n   KMACwithSHAKE256-params ::= SEQUENCE {\n    \
    \  kMACOutputLength     INTEGER DEFAULT 512, -- Output length in bits\n      customizationString\
    \  OCTET STRING DEFAULT ''H\n   }\n   END\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This document is based on Russ Housley's document [CMS-SHA3].\
    \  It\n   replaces SHA3 hash functions by SHAKE128 and SHAKE256, as the LAMPS\n\
    \   WG agreed.\n   The authors would like to thank Russ Housley for his guidance\
    \ and\n   very valuable contributions with the ASN.1 module.  Valuable feedback\n\
    \   was also provided by Eric Rescorla.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Panos Kampanakis\n   Cisco Systems\n   Email: pkampana@cisco.com\n\
    \   Quynh Dang\n   NIST\n   100 Bureau Drive\n   Gaithersburg, MD 20899\n"
