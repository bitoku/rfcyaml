- title: __initial_text__
  contents:
  - '   Session Initiation Protocol (SIP) Extension for Instant Messaging

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   Instant Messaging (IM) refers to the transfer of messages between\n\
    \   users in near real-time.  These messages are usually, but not\n   required\
    \ to be, short.  IMs are often used in a conversational mode,\n   that is, the\
    \ transfer of messages back and forth is fast enough for\n   participants to maintain\
    \ an interactive conversation.\n   This document proposes the MESSAGE method,\
    \ an extension to the\n   Session Initiation Protocol (SIP) that allows the transfer\
    \ of Instant\n   Messages.  Since the MESSAGE request is an extension to SIP,\
    \ it\n   inherits all the request routing and security features of that\n   protocol.\
    \  MESSAGE requests carry the content in the form of MIME\n   body parts.  MESSAGE\
    \ requests do not themselves initiate a SIP\n   dialog; under normal usage each\
    \ Instant Message stands alone, much\n   like pager messages.  MESSAGE requests\
    \ may be sent in the context of\n   a dialog initiated by some other SIP request.\n"
- title: Terminology
  contents:
  - "Terminology\n   In this document, the key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    ,\n   \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT\n   RECOMMENDED\", \"MAY\" and \"OPTIONAL\" are to be interpreted as described\n\
    \   in BCP 14, RFC 2119 [6] and indicate requirement levels for compliant\n  \
    \ SIP implementations.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.    Introduction . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.    Scope of Applicability . . . . . . . . . . . . . .\
    \ . . . . .  3\n   3.    Overview of Operation  . . . . . . . . . . . . . . .\
    \ . . . .  4\n   4.    UAC Processing . . . . . . . . . . . . . . . . . . . .\
    \ . . .  5\n   5.    Use of Instant Message URIs  . . . . . . . . . . . . . .\
    \ . .  6\n   6.    Proxy Processing . . . . . . . . . . . . . . . . . . . . .\
    \ .  6\n   7.    UAS Processing . . . . . . . . . . . . . . . . . . . . . . .\
    \  7\n   8.    Congestion Control . . . . . . . . . . . . . . . . . . . . .  8\n\
    \   9.    Method Definition  . . . . . . . . . . . . . . . . . . . . .  9\n  \
    \ 10.   Example Messages . . . . . . . . . . . . . . . . . . . . . . 11\n   11.\
    \   Security Considerations  . . . . . . . . . . . . . . . . . . 13\n   11.1 \
    \ Outbound authentication  . . . . . . . . . . . . . . . . . . 13\n   11.2  SIPS\
    \ URIs  . . . . . . . . . . . . . . . . . . . . . . . . . 14\n   11.3  End-to-End\
    \ Protection  . . . . . . . . . . . . . . . . . . . 14\n   11.4  Replay Prevention\
    \  . . . . . . . . . . . . . . . . . . . . . 14\n   11.5  Using message/cpim bodies\
    \  . . . . . . . . . . . . . . . . . 15\n   12.   IANA Considerations  . . . .\
    \ . . . . . . . . . . . . . . . . 15\n   13.   Contributors . . . . . . . . .\
    \ . . . . . . . . . . . . . . . 15\n   14.   Acknowledgments  . . . . . . . .\
    \ . . . . . . . . . . . . . . 15\n   15.   Normative References . . . . . . .\
    \ . . . . . . . . . . . . . 16\n   16.   Informational References . . . . . .\
    \ . . . . . . . . . . . . 16\n   17.   Authors' Addresses . . . . . . . . . .\
    \ . . . . . . . . . . . 17\n   18.   Full Copyright Statement . . . . . . . .\
    \ . . . . . . . . . . 18\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   Instant Messaging (IM) is defined as the exchange of content\
    \ between\n   a set of participants in near real time.  Generally, the content\
    \ is\n   short text messages, although that need not be the case.  Generally,\n\
    \   the messages that are exchanged are not stored, but this also need\n   not\
    \ be the case.  IM differs from email in common usage in that\n   instant messages\
    \ are usually grouped together into brief live\n   conversations, consisting of\
    \ numerous small messages sent back and\n   forth.\n   Instant messaging as a\
    \ service has been in existence within intranets\n   and IP networks for quite\
    \ some time.  Early implementations include\n   zephyr [11], the UNIX talk application,\
    \ and IRC.  More recently, IM\n   has been used as a service coupled with presence\
    \ and buddy lists;\n   that is, when a friend comes online, a user can be made\
    \ aware of this\n   and have the option of sending the friend an instant message.\
    \  The\n   protocols for accomplishing this are all proprietary, which has\n \
    \  seriously hampered interoperability.\n   The integration of instant messaging,\
    \ presence, and session-oriented\n   communications is very powerful.  The Session\
    \ Initiation Protocol\n   (SIP) [1] provides mechanisms that are useful for presence\n\
    \   applications, and for session-oriented communication applications,\n   but\
    \ not for instant messages.\n   This document proposes an extension method for\
    \ SIP called the MESSAGE\n   method.  MESSAGE requests normally carry the instant\
    \ message content\n   in the request body.\n   RFC 2778 [3] and RFC 2779 [2] give\
    \ a model and requirements for\n   presence and instant messaging protocols. \
    \ Implementations of the\n   MESSAGE method SHALL support all the instant message\
    \ requirements in\n   RFC 2779 relevant to its scope of applicability.\n"
- title: 2. Scope of Applicability
  contents:
  - "2. Scope of Applicability\n   This document describes the use of the MESSAGE\
    \ method for sending\n   instant messages using a metaphor similar to that of\
    \ a two-way pager\n   or SMS enabled handset.  That is, there are no explicit\
    \ association\n   between messages.  Each IM stands alone--any sense of a\n  \
    \ \"conversation\" only exists in the client user interface, or perhaps\n   in\
    \ the user's own imagination.  We contrast this with a \"session\"\n   model,\
    \ where there is an explicit conversation with a clear beginning\n   and end.\
    \  In the SIP environment, an IM session would be a media\n   session initiated\
    \ with an INVITE transaction and terminated with a\n   BYE transaction.\n   There\
    \ is value in each model.  Most modern IM clients offer both user\n   experiences.\
    \  The user can choose to send an IM to a contact, or he\n   can choose to invite\
    \ one or more contacts to join a conversation.\n   The pager model makes sense\
    \ when the user wishes to send a small\n   number of short IMs to a single (or\
    \ small number of) recipients.  The\n   session model makes sense for extended\
    \ conversations, joining chat\n   groups, if there is a need to associate a conversation\
    \ with some\n   other SIP initiated session, etc.\n   This document addresses\
    \ the pager model only.  We recognize the value\n   of the session model as well,\
    \ but we do not define it here.  Such a\n   solution will require additional work\
    \ beyond that of this document.\n   The SIMPLE work group currently plans to address\
    \ IM sessions in a\n   separate document.\n   There may be a temptation to simulate\
    \ a session of IMs by initiating\n   a dialog, then sending MESSAGE requests in\
    \ the context of that\n   dialog.  This is not an adequate solution for IM sessions,\
    \ in that\n   this approach forces the MESSAGE requests to follow the same network\n\
    \   path as any other SIP requests, even though the MESSAGE requests\n   arguably\
    \ carry media rather than signaling.  IM applications are\n   typically high volume,\
    \ and we expect the IM volume in sessions to be\n   even higher.  This will likely\
    \ cause congestion problems if sent over\n   a transport without congestion control,\
    \ and there is no clear\n   mechanism in SIP to prevent some hop from forwarding\
    \ a MESSAGE\n   request over UDP.\n   Additionally, MESSAGE requests sent over\
    \ an existing dialog must, by\n   the nature of SIP, go to the same destination\
    \ as any other request\n   sent in that dialog.  This prevents any separation\
    \ between the IM\n   endpoint and the signaling endpoint.  This is not an acceptable\n\
    \   limitation for the session-model of instant messaging.\n   The authors recognize\
    \ that there may be valid reasons to send MESSAGE\n   requests in the context\
    \ of a dialog.  For example, one participant in\n   a voice session may wish to\
    \ send an IM to another participant, and\n   associate that IM with the session.\
    \  But implementations SHOULD NOT\n   create dialogs for the primary purpose of\
    \ associating MESSAGE\n   requests with one another.\n   Note that this statement\
    \ does not prohibit using SIP to initiate a\n   media session made up of IMs,\
    \ just like any other session.  Indeed,\n   we expect the solution for IM sessions\
    \ to use that metaphor.  The\n   reader should avoid confusing the concepts of\
    \ a SIP dialog and a\n   media session.\n"
- title: 3. Overview of Operation
  contents:
  - "3. Overview of Operation\n   When one user wishes to send an instant message\
    \ to another, the\n   sender formulates and issues a SIP request using the new\
    \ MESSAGE\n   method defined by this document.  The Request-URI of this request\n\
    \   will normally be the \"address of record\" for the recipient of the\n   instant\
    \ message, but it may be a device address in situations where\n   the client has\
    \ current information about the recipient's location.\n   For example, the client\
    \ could be coupled with a presence system that\n   supplies an up to date device\
    \ contact for a given address of record.\n   The body of the request will contain\
    \ the message to be delivered.\n   This body can be of any MIME type, including\
    \ message/cpim [7].  Since\n   the message/cpim format is expected to be supported\
    \ by other instant\n   message protocols, endpoints using different IM protocols,\
    \ but\n   otherwise supporting message/cpim body types, should be able to\n  \
    \ exchange messages without modification of the content by a gateway or\n   other\
    \ intermediary.  This helps to enable end-to-end security between\n   endpoints\
    \ that use different IM protocols.\n   The request may traverse a set of SIP proxies,\
    \ using a variety of\n   transports, before reaching its destination.  The destination\
    \ for\n   each hop is located using the address resolution rules detailed in\n\
    \   the Common Profile for Instant Messaging (CPIM) [8] and SIP\n   specifications.\
    \  During traversal, each proxy may rewrite the request\n   URI based on available\
    \ routing information.\n   Provisional and final responses to the request will\
    \ be returned to\n   the sender as with any other SIP request.  Normally, a 200\
    \ OK\n   response will be generated by the user agent of the request's final\n\
    \   recipient.  Note that this indicates that the user agent accepted the\n  \
    \ message, not that the user has seen it.\n   MESSAGE requests do not establish\
    \ dialogs.\n"
- title: 4. UAC Processing
  contents:
  - "4. UAC Processing\n   Unless stated otherwise in this document, MESSAGE requests\
    \ and\n   associated responses are constructed according to the rules in\n   section\
    \ 8.1 of the SIP specification [1].\n   All UACs which support the MESSAGE method\
    \ MUST be prepared to send\n   MESSAGE requests with a body of type text/plain.\
    \  They may send\n   bodies of type message/cpim [7].\n   MESSAGE requests do\
    \ not initiate dialogs.  User Agents MUST NOT\n   insert Contact header fields\
    \ into MESSAGE requests.\n   A UAC MAY associate a MESSAGE request with an existing\
    \ dialog.  If a\n   MESSAGE request is sent within a dialog, it is \"associated\"\
    \ with any\n   media session or sessions associated with that dialog.\n   If the\
    \ UAC receives a 200 OK response to a MESSAGE request, it may\n   assume the message\
    \ has been delivered to the final destination.  It\n   MUST NOT assume that the\
    \ recipient has actually read the instant\n   message.  If the UAC receives a\
    \ 202 Accepted response, the message\n   has been delivered to a gateway, store\
    \ and forward server, or some\n   other service that may eventually deliver the\
    \ message.  In this case,\n   the UAC MUST NOT assume the message has been delivered\
    \ to the final\n   destination.  If confirmation of delivery is required for a\
    \ message\n   that has been responded to with a 202 Accepted, that confirmation\n\
    \   must be delivered via some other mechanism, which is beyond the scope\n  \
    \ of this specification.\n   Note that a downstream proxy could fork a MESSAGE\
    \ request.  If this\n   occurs, the forking proxy will forward one final response\
    \ upstream,\n   even though it may receive multiple final responses.  The UAC\
    \ will\n   have no way to detect whether or not a fork occurs.  Therefore the\n\
    \   UAC MUST NOT assume that a given final response represents the only\n   UAS\
    \ that receives the request.  For example, multiple branches of a\n   fork could\
    \ have resulted in 2xx responses.  Even though the UAC only\n   sees one of those\
    \ responses, the request has in fact been received by\n   the second device as\
    \ well.\n   The UAC MAY add an Expires header field to limit the validity of the\n\
    \   message content.  If the UAC adds an Expires header field with a\n   non-zero\
    \ value, it SHOULD also add a Date header field containing the\n   time the message\
    \ is sent.\n"
- title: 5. Use of Instant Message URIs
  contents:
  - "5. Use of Instant Message URIs\n   An instant inbox may be most generally referenced\
    \ by an Instant\n   Message URI [8] in the form of \"im:user@domain\".  IM URIs\
    \ are\n   abstract, and will eventually be translated to concrete, protocol-\n\
    \   dependent URI.\n   If a UA is presented with an IM URI as the address for\
    \ an instant\n   message, it SHOULD resolve it to a SIP URI, and place the resulting\n\
    \   URI in the Request-URI of the MESSAGE request before sending.  If the\n  \
    \ UA is unable to resolve the IM URI, it MAY place the IM URI in the\n   Request-URI,\
    \ thus delegating the resolution to a downstream device\n   such as proxy or gateway.\
    \  Performing this translation as early as\n   possible allows SIP proxies, which\
    \ may be unaware of the im:\n   namespace, to route the requests normally.\n \
    \  MESSAGE requests also contain logical identifiers of the sender and\n   intended\
    \ recipient, in the form of the From and To header fields.\n   These identifiers\
    \ SHOULD contain SIP (or SIPS) URIs, but MAY include\n   IM URIs if the SIP URIs\
    \ are not known at the time of request\n   construction.\n   Record-Route and\
    \ Route header fields MUST NOT contain IM URIs.  These\n   header fields contain\
    \ concrete SIP or SIPS URIs according to the\n   rules of SIP [1].\n"
- title: 6. Proxy Processing
  contents:
  - "6. Proxy Processing\n   Proxies route MESSAGE requests according to the rules\
    \ of SIP [1].\n   Note that the MESSAGE request MAY fork; this allows for delivery\
    \ of\n   the message to several possible terminals where the user might be.  A\n\
    \   proxy forking a MESSAGE request follows the normal SIP rules for\n   forking\
    \ a non-INVITE request.  In particular, even if the fork\n   results in multiple\
    \ successful deliveries, the forking proxy will\n   only forward one final response\
    \ upstream.\n"
- title: 7. UAS Processing
  contents:
  - "7. UAS Processing\n   A UAS that receives a MESSAGE request processes it following\
    \ the\n   rules of SIP [1].\n   A UAS receiving a MESSAGE request SHOULD respond\
    \ with a final\n   response immediately.  Note, however, that the UAS is not obliged\
    \ to\n   display the message to the user either before or after responding\n \
    \  with a 200 OK.  That is, a 200 OK response does not necessarily mean\n   the\
    \ user has read the message.\n   A 2xx response to a MESSAGE request MUST NOT\
    \ contain a body.  A UAS\n   MUST NOT insert a Contact header field into a 2xx\
    \ response.\n   A UAS which is, in fact, a message relay, storing the message\
    \ and\n   forwarding it later on, or forwarding it into a non-SIP domain,\n  \
    \ SHOULD return a 202 (Accepted) [5] response indicating that the\n   message\
    \ was accepted, but end to end delivery has not been\n   guaranteed.\n   A 4xx\
    \ or 5xx response indicates that the message was not delivered\n   successfully.\
    \  A 6xx response means it was delivered successfully,\n   but refused.\n   A\
    \ UAS that supports the MESSAGE method MUST be prepared to receive\n   and render\
    \ bodies of type \"text/plain\", and may support reception and\n   rendering of\
    \ bodies of type \"message/cpim\" [7].\n   A MESSAGE request is said to be expired\
    \ if its expiration time has\n   passed. The expiration time is determined by\
    \ examining the Expires\n   header field, if present.  MESSAGE requests without\
    \ an Expires header\n   field do not expire.  If the MESSAGE request containing\
    \ an Expires\n   header field also contains a Date header field, the UAS SHOULD\n\
    \   interpret the Expires header field value as delta time from the Date\n   header\
    \ field value.  If the request does not contain a Date header\n   field, the UAS\
    \ SHOULD interpret the Expires header value as delta\n   time from the time the\
    \ UAS received the request.\n   If the MESSAGE expires before the UAS is able\
    \ to present the message\n   to the user, the UAS SHOULD handle the message based\
    \ on local policy.\n   This policy could mean: the message is deleted undisplayed,\n\
    \   the message is still displayed to the user, or some other policy may\n   be\
    \ invoked.  If the message is displayed, the UAS SHOULD clearly\n   indicate to\
    \ the user that the message has expired.\n   If the UAS is acting as a message\
    \ relay, and is unable to deliver the\n   message before expiration, it chooses\
    \ an action based on local\n   policy.  This action could involve deleting the\
    \ message undelivered,\n   delivering it as is, logging the expired message, or\
    \ any other local\n   policy.\n"
- title: 8. Congestion Control
  contents:
  - "8. Congestion Control\n   Existing IM services have a history of very high volume\
    \ usage.\n   Additionally, MESSAGE requests differ from other sorts of SIP\n \
    \  requests in that they carry media, in the form of IMs, as payload.\n   Conventional\
    \ SIP payloads carry signaling information about media,\n   but not media itself.\
    \  There is potential that when a SIP\n   infrastructure is shared between call\
    \ signaling and instant\n   messaging, the IM traffic will interfere with call\
    \ signaling traffic.\n   Congestion control in general is an issue that should\
    \ be addressed at\n   the SIP specification level rather than for an individual\
    \ method.\n   But since the traffic patterns are likely to be different for MESSAGE\n\
    \   than for most other methods, it makes sense to give MESSAGE special\n   consideration.\n\
    \   Whenever possible, MESSAGE requests SHOULD be sent over transports\n   that\
    \ implement end-to-end congestion control, such as TCP or SCTP.\n   However, SIP\
    \ does not provide a mechanism to prevent a downstream hop\n   from sending a\
    \ request over UDP.  Even the requirement to use TCP for\n   requests over a certain\
    \ size can be overridden by the receiver.\n   Therefore use of a congestion-controlled\
    \ transport by the UAC is not\n   sufficient.\n   The size of MESSAGE requests\
    \ outside of a media session MUST NOT\n   exceed 1300 bytes, unless the UAC has\
    \ positive knowledge that the\n   message will not traverse a congestion-unsafe\
    \ link at any hop, or\n   that the message size is at least 200 bytes less than\
    \ the lowest MTU\n   value found en route to the UAS.  Larger payloads may be\
    \ sent as part\n   of a media session, or using some type of content-indirection.\n\
    \      At the time of this writing, there is no mechanism for a UAC to\n     \
    \ gain such knowledge outside of trivial network architectures, or\n      networks\
    \ that are wholly controlled by a single administrative\n      domain.  But if\
    \ a mechanism for ensuring congestion-control at\n      each hop is created in\
    \ the future, MESSAGE clients can relax the\n      size limit without requiring\
    \ a change to this specification.  The\n      authors expect that such a mechanism\
    \ or mechanism will be created\n      in the near future.\n      There have been\
    \ discussions on making the 1300 byte limit based on\n      the path MTU to the\
    \ next hop SIP device.  The SIP specification\n      does exactly that, choosing\
    \ the limit 200 bytes less than the path\n      MTU, or 1300 bytes if the device\
    \ does not know the path MTU.\n      Transport decisions are made on a per-hop\
    \ basis.  However, the\n      point of this limit is to make sure that no upstream\
    \ proxy chooses\n      to send a MESSAGE request with large content over UDP.\
    \  Since,\n      except in trivial circumstances, a MESSAGE client is very unlikely\n\
    \      to know the MTU for upstream devices beyond the next hop, an MTU\n    \
    \  based limit is not very useful.\n   A UAC MUST NOT initiate a new out-of-dialog\
    \ MESSAGE transaction to a\n   given URI if there is a previous out-of-dialog\
    \ transaction pending\n   for the same URI.  Similarly, A UAC SHOULD NOT initiate\
    \ overlapping\n   MESSAGE transactions inside a dialog, and MUST NOT do so unless\
    \ the\n   route set for that dialog uses a congestion-controlled transport at\n\
    \   every hop.\n      The prohibition against overlapping MESSAGE request provides\
    \ some\n      degree of congestion-safe behavior.  A request and its associated\n\
    \      response must each cross the full path between the UAC and the\n      UAS.\
    \  The time required for this will increase as networks become\n      congested.\
    \  This provides an adaptive mechanism to slow the\n      introduction of new\
    \ MESSAGE requests to the same destination.\n   It has been suggested that provisional\
    \ responses should not be\n   allowed for pager-model MESSAGE requests.  However,\
    \ it is not\n   possible to require special treatment for MESSAGE, since many\
    \ proxy\n   servers will not be aware of the MESSAGE method.  Therefore MESSAGE\n\
    \   requests will receive the same provisional response treatment as any\n   other\
    \ non-INVITE method, as described in the SIP specification.\n"
- title: 9. Method Definition
  contents:
  - "9. Method Definition\n   This specification defines a new SIP method, MESSAGE.\
    \  The BNF for\n   this method is:\n      MESSAGEm = %x4D.45.53.53.41.47.45 ;MESSAGE\
    \ in caps\n   As with all other methods, the MESSAGE method name is case sensitive.\n\
    \   Tables 1 and 2 extend Tables 2 and 3 of SIP [1] by adding an\n   additional\
    \ column, defining the header fields that can be used in\n   MESSAGE requests\
    \ and responses.\n                   Header Field       where  proxy  MESSAGE\n\
    \                   __________________________________________\n             \
    \      Accept               R              -\n                   Accept      \
    \        2xx             -\n                   Accept              415       \
    \      m*\n                   Accept-Encoding      R              -\n        \
    \           Accept-Encoding     2xx             -\n                   Accept-Encoding\
    \     415             m*\n                   Accept-Language      R          \
    \    -\n                   Accept-Language     2xx             -\n           \
    \        Accept-Language     415             m*\n                   Alert-Info\
    \           R              -\n                   Alert-Info          180     \
    \        -\n                   Allow                R              o\n       \
    \            Allow               2xx             o\n                   Allow \
    \               r              o\n                   Allow               405 \
    \            m\n                   Authentication-Info 2xx             o\n   \
    \                Authorization        R              o\n                   Call-ID\
    \              c      r       m\n                   Call-Info                \
    \  ar       o\n                   Contact              R              -\n    \
    \               Contact             1xx             -\n                   Contact\
    \             2xx             -\n                   Contact             3xx  \
    \           o\n                   Contact             485             o\n    \
    \               Content-Disposition                 o\n                   Content-Encoding\
    \                    o\n                   Content-Language                  \
    \  o\n                   Content-Length             ar       t\n             \
    \      Content-Type                        *\n                   CSeq        \
    \        c       r       m\n                   Date                        a \
    \      o\n                   Error-Info       300-699    a       o\n         \
    \          Expires                             o\n                   From    \
    \            c       r       m\n                   In-Reply-To         R     \
    \          o\n                   Max-Forwards        R      amr      m\n     \
    \              Organization               ar       o\n                   Table\
    \ 1: Summary of header fields, A--O\n                   Header Field       where\
    \  proxy  MESSAGE\n                   __________________________________________\n\
    \                   Priority             R     ar         o\n                \
    \   Proxy-Authenticate  407    ar         m\n                   Proxy-Authenticate\
    \  401    ar         o\n                   Proxy-Authorization  R     dr     \
    \    o\n                   Proxy-Require        R     ar         o\n         \
    \          Record-Route               ar         -\n                   Reply-To\
    \                              o\n                   Require                 \
    \   ar         c\n                   Retry-After   404,413,480,486         o\n\
    \                                     500,503             o\n                \
    \                     600,603             o\n                   Route        \
    \        R     adr        o\n                   Server               r       \
    \         o\n                   Subject              R                o\n    \
    \               Timestamp                             o\n                   To\
    \                 c(1)     r         m\n                   Unsupported       \
    \  420               o\n                   User-Agent                        \
    \    o\n                   Via                  R     amr        m\n         \
    \          Via                 rc     dr         m\n                   Warning\
    \              r                o\n                   WWW-Authenticate    401\
    \    ar         m\n                   WWW-Authenticate    407    ar         o\n\
    \                 (1): copied  with  possible addition of tag\n              \
    \     Table 2: Summary of header fields, P--Z\n   A MESSAGE request MAY contain\
    \ a body, using the standard MIME header\n   fields to identify the content.\n"
- title: 10. Example Messages
  contents:
  - "10. Example Messages\n   An example message flow is shown in Figure 1.  The message\
    \ flow shows\n   an initial IM sent from User 1 to User 2, both users in the same\n\
    \   domain, \"domain\", through a single proxy.\n           |  F1 MESSAGE    \
    \      |                         |\n           |--------------------> |  F2 MESSAGE\
    \             |\n           |                      | ----------------------->|\n\
    \           |                      |                         |\n           | \
    \                     |  F3 200 OK              |\n           |              \
    \        | <-----------------------|\n           |  F4 200 OK           |    \
    \                     |\n           |<-------------------- |                 \
    \        |\n           |                      |                         |\n  \
    \         |                      |                         |\n           |   \
    \                   |                         |\n        User 1              \
    \    Proxy                    User 2\n                   Figure 1: Example Message\
    \ Flow\n   Message F1 looks like:\n   MESSAGE sip:user2@domain.com SIP/2.0\n \
    \  Via: SIP/2.0/TCP user1pc.domain.com;branch=z9hG4bK776sgdkse\n   Max-Forwards:\
    \ 70\n   From: sip:user1@domain.com;tag=49583\n   To: sip:user2@domain.com\n \
    \  Call-ID: asd88asd77a@1.2.3.4\n   CSeq: 1 MESSAGE\n   Content-Type: text/plain\n\
    \   Content-Length: 18\n   Watson, come here.\n   User1 forwards this message\
    \ to the server for domain.com.  The proxy\n   receives this request, and recognizes\
    \ that it is the server for\n   domain.com.  It looks up user2 in its database\
    \ (built up through\n   registrations), and finds a binding from sip:user2@domain.com\
    \ to\n   sip:user2@user2pc.domain.com.  It forwards the request to user2.  The\n\
    \   resulting message, F2, looks like:\n   MESSAGE sip:user2@domain.com SIP/2.0\n\
    \   Via: SIP/2.0/TCP proxy.domain.com;branch=z9hG4bK123dsghds\n   Via: SIP/2.0/TCP\
    \ user1pc.domain.com;branch=z9hG4bK776sgdkse;\n                              \
    \                received=1.2.3.4\n   Max-Forwards: 69\n   From: sip:user1@domain.com;tag=49394\n\
    \   To: sip:user2@domain.com\n   Call-ID: asd88asd77a@1.2.3.4\n   CSeq: 1 MESSAGE\n\
    \   Content-Type: text/plain\n   Content-Length: 18\n   Watson, come here.\n \
    \  The message is received by user2, displayed, and a response is\n   generated,\
    \ message F3, and sent to the proxy:\n   SIP/2.0 200 OK\n   Via: SIP/2.0/TCP proxy.domain.com;branch=z9hG4bK123dsghds;\n\
    \                                            received=192.0.2.1\n   Via: SIP/2.0/TCP\
    \ user1pc.domain.com;;branch=z9hG4bK776sgdkse;\n                             \
    \                  received=1.2.3.4\n   From: sip:user1@domain.com;tag=49394\n\
    \   To: sip:user2@domain.com;tag=ab8asdasd9\n   Call-ID: asd88asd77a@1.2.3.4\n\
    \   CSeq: 1 MESSAGE\n   Content-Length: 0\n   Note that most of the header fields\
    \ are simply reflected in the\n   response.  The proxy receives this response,\
    \ strips off the top Via,\n   and forwards to the address in the next Via, user1pc.domain.com,\
    \ the\n   result being message F4:\n   SIP/2.0 200 OK\n   Via: SIP/2.0/TCP user1pc.domain.com;branch=z9hG4bK776sgdkse;\n\
    \                                              received=1.2.3.4\n   From: sip:user1@domain.com;;tag=49394\n\
    \   To: sip:user2@domain.com;tag=ab8asdasd9\n   Call-ID: asd88asd77a@1.2.3.4\n\
    \   CSeq: 1 MESSAGE\n   Content-Length: 0\n"
- title: 11. Security Considerations
  contents:
  - "11. Security Considerations\n   In normal usage, most SIP requests are used to\
    \ setup and modify\n   communication sessions.  The actual communication between\n\
    \   participants happens in the media sessions, not in the SIP requests\n   themselves.\
    \  The MESSAGE method changes this assumption; MESSAGE\n   requests normally carry\
    \ the actual communication between participants\n   as payload.  This implies\
    \ that MESSAGE requests have a greater need\n   for security than most other SIP\
    \ requests.  In particular, UAs that\n   support the MESSAGE request MUST implement\
    \ end-to-end authentication,\n   body integrity, and body confidentiality mechanisms.\n"
- title: 11.1 Outbound Authentication
  contents:
  - "11.1 Outbound Authentication\n   When local proxies are used for transmission\
    \ of outbound messages,\n   proxy authentication, as specified in RFC 3261, is\
    \ RECOMMENDED.  This\n   is useful to verify the identity of the originator, and\
    \ prevent\n   spoofing and spamming at the originating network.\n"
- title: 11.2 SIPS URIs
  contents:
  - "11.2 SIPS URIs\n   The SIPS URI mechanism [1] allows a UA to assert that every\
    \ hop must\n   occur over a secure connection.  This provides some level of\n\
    \   integrity and privacy protection.  However, this requires the users\n   to\
    \ trust that each proxy in the request path is well-behaved, that\n   is, they\
    \ do not violate the rules for routing SIPS URIs.  Also, any\n   unencrypted bodies\
    \ are fully exposed to the proxies.\n   Additionally, the possibility of a forking\
    \ proxy allows a MESSAGE\n   request to be delivered to additional endpoints without\
    \ the knowledge\n   of the UAC.  If only hop-by-hop protection is used, the users\
    \ must\n   trust all proxies in the chain to not fork requests to unauthorized\n\
    \   destinations.\n"
- title: 11.3 End-to-End Protection
  contents:
  - "11.3 End-to-End Protection\n   When the goal is to remedy the concerns stated\
    \ above, the MESSAGE\n   bodies MUST be secured with S/MIME.  If bodies specified\
    \ in future to\n   be carried by the MESSAGE method have different means of providing\n\
    \   end-to-end security, their specification MUST describe the usage.\n   SIP\
    \ MESSAGE endpoints MUST support encryption (CMS EnvelopeData) and\n   S/MIME\
    \ signatures (CMS SignedData).\n   The S/MIME algorithms are set by RFC 3369 [4].\
    \  The AES [10]\n   algorithm should be preferred, as it is expected that AES\
    \ best suits\n   the capabilities of many platforms.  However, an IETF specification\n\
    \   for this is still incomplete as of the time of this writing.\n"
- title: 11.4 Replay Prevention
  contents:
  - "11.4 Replay Prevention\n   To prevent the replay of old SIP requests, all signed\
    \ MESSAGE\n   requests and responses MUST contain a Date header field covered\
    \ by\n   the message signature.  Any message with a date older than several\n\
    \   minutes in the past, or which is more than several minutes in the\n   future,\
    \ SHOULD be answered with a 400 (Incorrect Date or Time)\n   message, unless such\
    \ messages arrive repeatedly from the same source,\n   in which case they MAY\
    \ be discarded without sending a response.\n   Obviously, this replay attack prevention\
    \ mechanism does not work for\n   devices without clocks.\n   Note that there\
    \ are situations where an stale Date header field is\n   normal.  For example,\
    \ the MESSAGE request may have been stored in a\n   store and forward server while\
    \ the recipient was offline.  When the\n   recipient returns, that server might\
    \ then forward the message.  Final\n   receipt of the message would then occur\
    \ some time after it was\n   originally sent.\n   If a UAS receives a stale message\
    \ that can be confirmed to have come\n   from a known store and forward server\
    \ (perhaps over a TLS\n   connection), it makes sense for it to accept the message\
    \ normally.\n   Also, if one or more stale messages arrive shortly after an offline\n\
    \   period, the UAS MAY accept the message, but SHOULD warn the user that\n  \
    \ there is a risk the message has been replayed.\n"
- title: 11.5 Using message/cpim Bodies
  contents:
  - "11.5 Using message/cpim Bodies\n   The message/cpim format [7] allows for the\
    \ S/MIME protection of\n   metadata in addition to the message payload itself.\
    \  In many cases,\n   this metadata is redundant with SIP header fields.  Still,\n\
    \   message/cpim adds value in that the protection of metadata can extend\n  \
    \ across protocol boundaries.  For example, a signed message/cpim body\n   can\
    \ provide sender authentication using the message/cpim From header\n   field,\
    \ even if the message crosses a gateway to another CPIM\n   compliant instant\
    \ message service that does not understand SIP header\n   fields.\n"
- title: 12. IANA Considerations
  contents:
  - "12. IANA Considerations\n   This specification registers the MESSAGE method in\
    \ the\n   http://www.iana.org/assignments/sip-parameters/Method registry,\n  \
    \ according to the following information:\n   MESSAGE        [RFC3428]\n"
- title: 13. Contributors
  contents:
  - "13. Contributors\n   The following people made substantial contributions to this\
    \ work:\n   Bernard Aboba     Microsoft\n   Steve Donovan     dynamicsoft\n  \
    \ Jonathan Lennox   Columbia University\n   Dave Oran         Cisco\n   Robert\
    \ Sparks     dynamicsoft\n   Dean Willis       dynamicsoft\n"
- title: 14. Acknowledgments
  contents:
  - "14. Acknowledgments\n   The authors would like to thank the following people\
    \ for their\n   support of the concept of SIP for IM, support for this work, and\
    \ for\n   their useful comments and insights:\n      Jon Peterson     NeuStar\n\
    \      Sean Olson       Microsoft\n      Adam Roach       dynamicsoft\n      Billy\
    \ Biggs      University of Waterloo\n      Stuart Barkley   UUNet\n      Mauricio\
    \ Arango  SUN\n      Richard Shockey  NeuStar\n      Jorgen Bjorker   Hotsip\n\
    \      Henry Sinnreich  MCI Worldcom\n      Ronald Akers     Motorola\n      Torrey\
    \ Searle    Indigo Software\n      Rohan Mahy       Cisco\n      Christian Groves\
    \ Ericsson\n      Allison Mankin   ISI\n      Tan Ya-Ching     Siemens\n"
- title: 15.Normative References
  contents:
  - "15.Normative References\n   [1]  Rosenberg, J., Schulzrinne, H., Camarillo, G.,\
    \ Johnston, A.,\n        Peterson, J., Sparks, R., Handley, M. and E. Schooler,\
    \ \"SIP:\n        Session Initiation Protocol\", RFC 3261, June 2002.\n   [2]\
    \  Day, M., Aggarwal, S. and J. Vincent, \"Instant Messaging /\n        Presence\
    \ Protocol Requirements\", RFC 2779, February 2000.\n   [3]  Day, M., Rosenberg,\
    \ J. and H. Sugano, \"A Model for Presence and\n        Instant Messaging\", RFC\
    \ 2778, February 2000.\n   [4]  Housley, R., \"Cryptographic Message Syntax (CMS)\"\
    , RFC 3369,\n        August 2002.\n   [5]  Roach, A., \"Session Initiation Protocol\
    \ (SIP)-Specific Event\n        Notification\", RFC 3265, June 2002.\n   [6] \
    \ Bradner, S., \"Keywords for Use in RFC's to Indicate Requirement\n        Levels\"\
    , BCP 14, RFC 2119, March 1997.\n"
- title: 16. Informational References
  contents:
  - "16. Informational References\n   [7]  Atkins, D. and G. Klyne, \"Common Presence\
    \ and Instant Messaging\n        Message Format\", Work in Progress.\n   [8] \
    \ Crocker, D., Diacakis, A., Mazzoldi, F., Huitema, C., Klyne, G.,\n        Rose,\
    \ M., Rosenberg, J., Sparks, R., Sugano, H. and J. Peterson,\n        \"Address\
    \ Resolution for Instant Messaging and Presence\", Work in\n        Progress.\n\
    \   [9]  Rosenberg, J. and H. Schulzrinne, \"SIP Caller Preferences and\n    \
    \    Callee Capabilities\", Work in Progress.\n   [10] Schaad, J. and R. Housley,\
    \ \"Use of the AES Encryption Algorithm\n        and RSA-OAEP Key Transport in\
    \ CMS\", Work in Progress.\n   [11] DellaFera, C., Eichin, M., French, R., Jedlinski,\
    \ D., Kohl, J.\n        and W. Sommerfeld, \"The Zephyr notification service\"\
    , in USENIX\n        Winter Conference (Dallas, Texas), Feb. 1988.\n"
- title: 17. Authors' Addresses
  contents:
  - "17. Authors' Addresses\n   Ben Campbell\n   dynamicsoft\n   5100 Tennyson Parkway\n\
    \   Suite 1200\n   Plano, TX  75024\n   EMail: bcampbell@dynamicsoft.com\n   Jonathan\
    \ Rosenberg\n   dynamicsoft\n   72 Eagle Rock Avenue\n   First Floor\n   East\
    \ Hanover, NJ  07936\n   EMail: jdrosen@dynamicsoft.com\n   Henning Schulzrinne\n\
    \   Columbia University\n   M/S 0401\n   1214 Amsterdam Ave.\n   New York, NY\
    \  10027-7003\n   EMail: schulzrinne@cs.columbia.edu\n   Christian Huitema\n \
    \  Microsoft Corporation\n   One Microsoft Way\n   Redmond, WA  98052-6399\n \
    \  EMail: huitema@microsoft.com\n   David Gurle\n   Microsoft Corporation\n  \
    \ One Microsoft Way\n   Redmond, WA  98052-6399\n   EMail: dgurle@microsoft.com\n"
- title: 18. Full Copyright Statement
  contents:
  - "18. Full Copyright Statement\n   Copyright (C) The Internet Society (2002). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
