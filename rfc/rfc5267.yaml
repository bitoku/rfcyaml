- contents:
  - '                           Contexts for IMAP4

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Abstract\n   The IMAP4rev1 protocol has powerful search facilities as part of
    the\n   core protocol, but lacks the ability to create live, updated results\n
    \  that can be easily handled.  This memo provides such an extension,\n   and
    shows how it can be used to provide a facility similar to virtual\n   mailboxes.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  3\n   2.  Conventions Used in This Document  . . . . . . . . . .
    . . . .  3\n   3.  Extended Sort Syntax . . . . . . . . . . . . . . . . . . .
    . .  3\n     3.1.  ESORT Extension  . . . . . . . . . . . . . . . . . . . . .
    \ 4\n     3.2.  Ranges in Extended Sort Results  . . . . . . . . . . . . .  4\n
    \    3.3.  Extended SORT Example  . . . . . . . . . . . . . . . . . .  4\n   4.
    \ Contexts . . . . . . . . . . . . . . . . . . . . . . . . . . .  5\n     4.1.
    \ Overview . . . . . . . . . . . . . . . . . . . . . . . . .  5\n     4.2.  Context
    Hint . . . . . . . . . . . . . . . . . . . . . . .  5\n     4.3.  Notifications
    of Changes . . . . . . . . . . . . . . . . .  6\n       4.3.1.  Refusing to Update
    Contexts  . . . . . . . . . . . . .  7\n       4.3.2.  Common Features of ADDTO
    and REMOVEFROM  . . . . . . .  8\n       4.3.3.  ADDTO Return Data Item . . .
    . . . . . . . . . . . . .  8\n       4.3.4.  REMOVEFROM Return Data Item  . .
    . . . . . . . . . . .  9\n       4.3.5.  The CANCELUPDATE Command . . . . . .
    . . . . . . . . . 10\n     4.4.  Partial Results  . . . . . . . . . . . . . .
    . . . . . . . 10\n     4.5.  Caching Results  . . . . . . . . . . . . . . . .
    . . . . . 11\n   5.  Formal Syntax  . . . . . . . . . . . . . . . . . . . . .
    . . . 12\n   6.  Security Considerations  . . . . . . . . . . . . . . . . . .
    . 13\n   7.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 13\n
    \  8.  Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 13\n   9.
    \ References . . . . . . . . . . . . . . . . . . . . . . . . . . 14\n     9.1.
    \ Normative References . . . . . . . . . . . . . . . . . . . 14\n     9.2.  Informative
    References . . . . . . . . . . . . . . . . . . 14\n   Appendix A.  Cookbook  .
    . . . . . . . . . . . . . . . . . . . . . 15\n     A.1.  Virtual Mailboxes  .
    . . . . . . . . . . . . . . . . . . . 15\n     A.2.  Trash Mailboxes  . . . .
    . . . . . . . . . . . . . . . . . 15\n     A.3.  Immediate EXPUNGE Notifications
    \ . . . . . . . . . . . . . 15\n     A.4.  Monitoring Counts  . . . . . . . .
    . . . . . . . . . . . . 15\n     A.5.  Resynchronizing Contexts . . . . . . .
    . . . . . . . . . . 16\n   Appendix B.  Server Implementation Notes . . . . .
    . . . . . . . . 16\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Although the basic SEARCH command defined in [IMAP], and
    as enhanced\n   by [ESEARCH], is relatively compact in its representation, this\n
    \  reduction saves only a certain amount of data, and huge mailboxes\n   might
    overwhelm the storage available for results on even relatively\n   high-end desktop
    machines.\n   The SORT command defined in [SORT] provides useful features, but
    is\n   hard to use effectively on changing mailboxes over low-bandwidth\n   connections.\n
    \  This memo borrows concepts from [ACAP], such as providing a windowed\n   view
    onto search or sort results, and making updates that are\n   bandwidth and round-trip
    efficient.  These are provided by two\n   extensions: \"ESORT\" and \"CONTEXT\".\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions Used in This Document\n   In examples, \"C:\" and \"S:\" indicate
    lines sent by the client\n   messaging user agent and IMAP4rev1 ([IMAP]) server,
    respectively.\n   \"//\" indicates inline comments not part of the protocol exchange.\n
    \  Line breaks are liberally inserted for clarity.  Examples are\n   intended
    to be read in order, such that the state remains from one\n   example to the next.\n
    \  Although the examples show a server that supports [ESEARCH], this is\n   not
    a strict requirement of this specification.\n   The key words \"MUST\", \"MUST
    NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
    \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted
    as described in [KEYWORDS].\n   Other capitalized words are typically names of
    IMAP extensions or\n   commands -- these are uppercased for clarity only, and
    are case-\n   insensitive.\n"
  title: 2.  Conventions Used in This Document
- contents:
  - "3.  Extended Sort Syntax\n   Servers implementing the extended SORT provide a
    suite of extensions\n   to the SORT and UID SORT commands defined in [SORT].  This
    allows for\n   return options, as used with SEARCH and specified in [IMAP-ABNF],
    to\n   be used with SORT in a similar manner.\n   The SORT and UID SORT commands
    are extended by the addition of an\n   optional list of return options that follow
    a RETURN atom immediately\n   after the command.  If this is missing, the server
    will return\n   results as specified in [SORT].\n   The extended SORT command
    always returns results in the requested\n   sort order, but is otherwise identical
    in its behaviour to the\n   extended SEARCH command defined in [IMAP-ABNF], as
    extended by\n   [ESEARCH].  In particular, the extended SORT command returns results\n
    \  in an ESEARCH response.\n"
  - contents:
    - "3.1.  ESORT Extension\n   Servers advertising the capability \"ESORT\" support
      the return options\n   specified in [ESEARCH] in the SORT command.  These return
      options are\n   adapted as follows:\n   MIN\n      Return the message number/UID
      of the lowest sorted message\n      satisfying the search criteria.\n   MAX\n
      \     Return the message number/UID of the highest sorted message\n      satisfying
      the search criteria.\n   ALL\n      Return all message numbers/UIDs which match
      the search criteria,\n      in the requested sort order, using a sequence-set.
      \ Note the use\n      of ranges described below in Section 3.2.\n   COUNT\n
      \     As in [ESEARCH].\n"
    title: 3.1.  ESORT Extension
  - contents:
    - "3.2.  Ranges in Extended Sort Results\n   Any ranges given by the server, including
      those given as part of the\n   sequence-set, in an ESEARCH response resulting
      from an extended SORT\n   or UID SORT command, MUST be ordered in increasing
      numerical order\n   after expansion, as per usual [IMAP] rules.\n   In particular
      this means that 10:12 is equivalent to 12:10, and\n   10,11,12.  To avoid confusion,
      servers SHOULD present ranges only\n   when the first seq-number is lower than
      the second; that is, either\n   of the forms 10:12 or 10,11,12 is acceptable,
      but 12:10 SHOULD be\n   avoided.\n"
    title: 3.2.  Ranges in Extended Sort Results
  - contents:
    - "3.3.  Extended SORT Example\n   If the list of return options is present but
      empty, then the server\n   provides the ALL return data item in an ESEARCH response.
      \ This is\n   functionally equivalent to an unextended UID SORT command, but
      can\n   use a smaller representation:\n         C: E01 UID SORT RETURN () (REVERSE
      DATE) UTF-8 UNDELETED\n            UNKEYWORD $Junk\n         S: * ESEARCH (TAG
      \"E01\") UID ALL 23765,23764,23763,23761,[...]\n         S: E01 OK Sort completed\n
      \  Note that the initial three results are not represented as the range\n   23765:23763
      as mandated in Section 3.2.\n"
    title: 3.3.  Extended SORT Example
  title: 3.  Extended Sort Syntax
- contents:
  - '4.  Contexts

    '
  - contents:
    - "4.1.  Overview\n   The Contexts extension is present in any IMAP4rev1 server
      that\n   includes the string \"CONTEXT=SEARCH\", and/or \"CONTEXT=SORT\", within\n
      \  its advertised capabilities.\n   In the case of CONTEXT=SEARCH, the server
      supports the extended\n   SEARCH command syntax described in [IMAP-ABNF], and
      accepts three\n   additional return options.\n   Servers advertising CONTEXT=SORT
      also advertise the SORT capability,\n   as described in [SORT], support the
      extended SORT command syntax\n   described in Section 3, and accept three additional
      return options\n   for this extended SORT.\n   These additional return options
      allow for notifications of changes to\n   the results of SEARCH or SORT commands,
      and also allow for access to\n   partial results.\n   A server advertising the
      CONTEXT=SEARCH extension will order all\n   SEARCH results, whether from a UID
      SEARCH or SEARCH command, in\n   mailbox order -- that is, by message number
      and UID.  Therefore, the\n   UID SEARCH, SEARCH, UID SORT, or SORT command used
      -- collectively\n   known as the searching command -- will always have an order,
      the\n   requested order, which will be the mailbox order for UID SEARCH and\n
      \  SEARCH commands.\n   All of the return specifiers have no interaction with
      either each\n   other or any return specifiers defined in [ESEARCH] or Section
      3.1;\n   however, it is believed that implementations supporting CONTEXT will\n
      \  also support ESEARCH and ESORT.\n"
    title: 4.1.  Overview
  - contents:
    - "4.2.  Context Hint\n   The return option CONTEXT SHOULD be used by a client
      to indicate that\n   subsequent use of the search criteria are likely.  Servers
      MAY ignore\n   this return option or use it as a hint to maintain a full result\n
      \  cache, or index.\n   A client might choose to obtain a count of matching
      messages prior to\n   obtaining actual results.  Here, the client signals its
      intention to\n   fetch the results themselves:\n       C: A01 SEARCH RETURN
      (CONTEXT COUNT) UNDELETED\n          UNKEYWORD $Junk\n       S: * ESEARCH (TAG
      \"A01\") COUNT 23765\n       S: A01 OK Search completed.\n"
    title: 4.2.  Context Hint
  - contents:
    - "4.3.  Notifications of Changes\n   The search return option UPDATE, if used
      by a client, causes the\n   server to issue unsolicited notifications containing
      updates to the\n   results that would be returned by an unmodified searching
      command.\n   These update sets are carried in ADDTO and REMOVEFROM data items
      in\n   ESEARCH responses.\n   These ESEARCH responses carry a search correlator
      of the searching\n   command, hence clients MUST NOT reuse tags, as already
      specified in\n   Section 2.2.1 of [IMAP].  An attempt to use UPDATE where a
      tag is\n   already in use with a previous searching command that itself used\n
      \  UPDATE SHALL result in the server rejecting the searching command\n   with
      a BAD response.\n   Both ADDTO and REMOVEFROM data items SHOULD be delivered
      to clients\n   in a timely manner, as and when results change, whether by new\n
      \  messages arriving in the mailbox, metadata such as flags being\n   changed,
      or messages being expunged.\n   Typically, this would occur at the same time
      as the FETCH, EXISTS, or\n   EXPUNGE responses carrying the source of the change.\n
      \  Updates will cease when the mailbox is no longer selected, or when\n   the
      CANCELUPDATE command, defined in Section 4.3.5, is issued by the\n   client,
      whichever is sooner.\n   Unlike [ACAP], there is no requirement that a context
      need be created\n   with CONTEXT to use UPDATE, and in addition, the lack of
      UPDATE with\n   a CONTEXT does not affect the results caused by later searching\n
      \  commands -- there is no snapshot facility.\n   There is no interaction between
      UPDATE and any other return options;\n   therefore, use of RETURN (UPDATE MIN),
      for example, does not notify\n   about the minimum UID or sequence number, but
      notifies instead about\n   all changes to the set of matching messages.  In
      particular, this\n   means that a client using UPDATE and PARTIAL on the same
      search\n   program could receive notifications about messages that do not\n
      \  currently interest it.\n   Finally, as specified in the errata to [IMAP],
      any message sequence\n   numbers used in the search program are evaluated at
      the time the\n   command is received; therefore, if the messages referred to
      by such\n   message sequence numbers change, no notifications will be emitted.\n
      \  This time, the client will require notifications of updates and\n   chooses
      to obtain a count:\n       C: B01 UID SEARCH RETURN (UPDATE COUNT) DELETED\n
      \         KEYWORD $Junk\n       S: * ESEARCH (TAG \"B01\") COUNT 74\n       S:
      B01 OK Search completed, will notify.\n       // Note that the following is
      rejected, and has no effect:\n       C: B01 SORT RETURN (UPDATE) FLAGGED\n       S:
      B01 BAD Tag reuse\n"
    - contents:
      - "4.3.1.  Refusing to Update Contexts\n   In some cases, the server MAY refuse
        to provide updates, such as if\n   an internal limit on the number of update
        contexts is reached.  In\n   such a case, an untagged NO is generated during
        processing of the\n   command with a response-code of NOUPDATE.  The response-code\n
        \  contains, as argument, the tag of the search command for which the\n   server
        is refusing to honour the UPDATE request.\n   Other return options specified
        SHALL still be honoured.\n   Servers MUST provide at least one updating context
        per client, and\n   SHOULD provide more -- see Appendix B for strategies on
        reducing the\n   impact of additional updating contexts.  Since sorted contexts\n
        \  require a higher implementation cost than unsorted contexts, refusal\n
        \  to provide updates for a SORT command does not imply that SEARCH\n   contexts
        will also be refused.\n   This time, the client will require notifications
        of updates, and\n   chooses to obtain a count:\n       C: B02 UID SORT RETURN
        (UPDATE COUNT) UTF-8\n          KEYWORD $Junk\n       S: * ESEARCH (TAG \"B02\")
        COUNT 74\n       S: * NO [NOUPDATE \"B02\"] Too many contexts\n       S: B02
        OK Search completed, will not notify.\n   Client handling might be to retry
        with a UID SEARCH command, or else\n   cancel an existing context; see Section
        4.3.5.\n"
      title: 4.3.1.  Refusing to Update Contexts
    - contents:
      - "4.3.2.  Common Features of ADDTO and REMOVEFROM\n   The result update set
        included in the return data item is specified\n   as UIDs or message numbers,
        depending on how the UPDATE was\n   specified.  If the UPDATE was present
        in a SEARCH or SORT command,\n   the results will be message numbers; in a
        UID SEARCH or UID SORT\n   command, they will be UIDs.\n   The client MUST
        process ADDTO and REMOVEFROM return data items in the\n   order they appear,
        including those within a single ESEARCH response.\n   Correspondingly, servers
        MUST generate ADDTO and REMOVEFROM responses\n   such that the results are
        maintained in the requested order.\n   As with any response aside from EXPUNGE,
        ESEARCH responses carrying\n   ADDTO and/or REMOVEFROM return data items MAY
        be sent at any time.\n   In particular, servers MAY send such responses when
        no command is in\n   progress, during the processing of any command, or when
        the client is\n   using the IDLE facility described in [IDLE].  Implementors
        are\n   recommended to read [NOTIFY] as a mechanism for clients to signal\n
        \  servers that they are willing to process responses at any time, and\n   are
        also recommended to pay close attention to Section 5.3 of [IMAP].\n   It is
        anticipated that typical server implementations will emit ADDTO\n   when they
        normally emit the causal FETCH or EXISTS, and similarly\n   emit REMOVEFROM
        when they normally emit the causal FETCH or EXPUNGE.\n"
      title: 4.3.2.  Common Features of ADDTO and REMOVEFROM
    - contents:
      - "4.3.3.  ADDTO Return Data Item\n   The ADDTO return data item contains, as
        payload, a list containing\n   pairs of a context position and a set of result
        updates in the\n   requested order to be inserted at the context position.
        \ Where the\n   searching command is a SEARCH or UID SEARCH command, the context\n
        \  position MAY be zero.  Each pair is processed in the order that it\n   appears.\n
        \  Note that an ADDTO containing message sequence numbers added as a\n   result
        of those messages being delivered or appended MUST be sent\n   after the EXISTS
        notification itself, in order that those sequence\n   numbers are valid.\n
        \  If the context position is non-zero, the result update is inserted at\n
        \  the given context position, meaning that the first result in the set\n
        \  will occupy the new context position after insertion, and any prior\n   existing
        result at that context position will be shifted to a later\n   context position.\n
        \  Where the context position is zero, the client MAY insert the message\n
        \  numbers or UIDs in the result list such that the result list is\n   maintained
        in mailbox order.  In this case, servers are RECOMMENDED\n   to order the
        result update into mailbox order to produce the shortest\n   representation
        in set-syntax.\n       [...]\n       S: * 23762 FETCH (FLAGS (\\Deleted \\Seen))\n
        \      S: * 23763 FETCH (FLAGS ($Junk \\Seen))\n       S: * ESEARCH (TAG \"B01\")
        UID ADDTO (0 32768:32769)\n   Note that this example assumes messages 23762
        and 23763 with UIDs\n   32768 and 32769 (respectively) previously had neither
        \\Deleted nor\n   $Junk set.  Also note that only the ADDTO is included, and
        not the\n   (now changed) COUNT.\n   If the searching command \"C01\" initially
        generated a result list of\n   2734:2735, then the following three responses
        are equivalent, and\n   yield a result list of 2731:2735:\n       [...]\n
        \      S: * ESEARCH (TAG \"C01\") UID ADDTO (1 2733 1 2732 1 2731)\n       S:
        * ESEARCH (TAG \"C01\") UID ADDTO (1 2733) ADDTO (1 2731:2732)\n       S:
        * ESEARCH (TAG \"C01\") UID ADDTO (1 2731:2733)\n   The last is the preferred
        representation.\n"
      title: 4.3.3.  ADDTO Return Data Item
    - contents:
      - "4.3.4.  REMOVEFROM Return Data Item\n   The REMOVEFROM return data item contains,
        as payload, a list\n   containing pairs of a context position and a set of
        result updates in\n   the requested order to be removed starting from the
        context position.\n   Where the searching command is a SEARCH or UID SEARCH
        command, the\n   context position MAY be zero.  Each pair is processed in
        the order\n   that it appears.\n   If the context position is non-zero, the
        results are removed at the\n   given context position, meaning that the first
        result in the set will\n   occupy the given context position before removal,
        and any prior\n   existing result at that context position will be shifted
        to an\n   earlier context position.\n   Where the context position is zero,
        the client removes the message\n   numbers or UIDs in the result list wherever
        they occur, and servers\n   are RECOMMENDED to order the result list in mailbox
        order to obtain\n   the best benefit from the set-syntax.\n   Note that a
        REMOVEFROM containing message sequence numbers removed as\n   a result of
        those messages being expunged MUST be sent prior to the\n   expunge notification
        itself, in order that those sequence numbers\n   remain valid.\n   Here, a
        message in the result list is expunged.  The REMOVEFROM is\n   shown to happen
        without any command in progress; see Section 4.3.2.\n   Note that EXPUNGE
        responses do not have this property.\n       [...]\n       S: * ESEARCH (TAG
        \"B01\") UID REMOVEFROM (0 32768)\n       C: B03 NOOP\n       S: * 23762 EXPUNGE\n
        \      S: B03 OK Nothing done.\n"
      title: 4.3.4.  REMOVEFROM Return Data Item
    - contents:
      - "4.3.5.  The CANCELUPDATE Command\n   When a client no longer wishes to receive
        updates, it may issue the\n   CANCELUPDATE command, which will prevent all
        updates to the contexts\n   named in the arguments from being transmitted
        by the server.  The\n   command takes, as arguments, one or more tags of the
        commands used to\n   request updates.\n   The server MAY free any resource
        associated with a context so\n   disabled -- however, the client is free to
        issue further searching\n   commands with the same criteria and requested
        order, including\n   PARTIAL requests.\n       C: B04 CANCELUPDATE \"B01\"\n
        \      S: B04 OK No further updates.\n"
      title: 4.3.5.  The CANCELUPDATE Command
    title: 4.3.  Notifications of Changes
  - contents:
    - "4.4.  Partial Results\n   The PARTIAL search return option causes the server
      to provide in an\n   ESEARCH response a subset of the results denoted by the
      sequence\n   range given as the mandatory argument.  The first result is 1;
      thus,\n   the first 500 results would be obtained by a return option of\n   \"PARTIAL
      1:500\", and the second 500 by \"PARTIAL 501:1000\".  This\n   intentionally
      mirrors message sequence numbers.\n   A single command MUST NOT contain more
      than one PARTIAL or ALL search\n   return option -- that is, either one PARTIAL,
      one ALL, or neither\n   PARTIAL nor ALL is allowed.\n   For SEARCH results,
      the entire result list MUST be ordered in mailbox\n   order, that is, in UID
      or message sequence number order.\n   Where a PARTIAL search return option references
      results that do not\n   exist, by using a range which starts or ends higher
      than the current\n   number of results, then the server returns the results
      that are in\n   the set.  This yields a PARTIAL return data item that has, as\n
      \  payload, the original range and a potentially missing set of results\n   that
      may be shorter than the extent of the range.\n   Clients need not request PARTIAL
      results in any particular order.\n   Because mailboxes may change, clients will
      often wish to use PARTIAL\n   in combination with UPDATE, especially if the
      intent is to walk a\n   large set of results; however, these return options
      do not interact\n   -- the UPDATE will provide notifications for all matching
      results.\n       // Recall from A01 that there are 23764 results.\n       C:
      A02 UID SEARCH RETURN (PARTIAL 23500:24000) UNDELETED\n          UNKEYWORD $Junk\n
      \      C: A03 UID SEARCH RETURN (PARTIAL 1:500) UNDELETED\n          UNKEYWORD
      $Junk\n       C: A04 UID SEARCH RETURN (PARTIAL 24000:24500) UNDELETED\n          UNKEYWORD
      $Junk\n       S: * ESEARCH (TAG \"A02\") UID PARTIAL (23500:24000 ...)\n       //
      264 results in set syntax elided,\n       // this spans the end of the results.\n
      \      S: A02 OK Completed.\n       S: * ESEARCH (TAG \"A03\") UID PARTIAL (1:500
      ...)\n       // 500 results in set syntax elided.\n       S: A03 OK Completed.\n
      \      S: * ESEARCH (TAG \"A04\") UID PARTIAL (24000:24500 NIL)\n       // No
      results are present, this is beyond the end of the results.\n       S: A04 OK
      Completed.\n"
    title: 4.4.  Partial Results
  - contents:
    - "4.5.  Caching Results\n   Server implementations MAY cache results from a SEARCH
      or SORT,\n   whether or not hinted to by CONTEXT, in order to make subsequent\n
      \  searches more efficient, perhaps by recommencing a subsequent PARTIAL\n   search
      where a previous search left off.  However, servers MUST\n   behave identically
      whether or not internal caching is taking place;\n   therefore, any such cache
      is required to be updated as changes to the\n   mailbox occur.  An alternate
      strategy would be to discard results\n   when any change occurs to the mailbox.\n"
    title: 4.5.  Caching Results
  title: 4.  Contexts
- contents:
  - "5.  Formal Syntax\n   The collected formal syntax.  This uses ABNF as defined
    in [ABNF].\n   It includes definitions from [IMAP], [IMAP-ABNF], and [SORT].\n
    \  capability          =/ \"CONTEXT=SEARCH\" / \"CONTEXT=SORT\" / \"ESORT\"\n
    \      ;; <capability> from [IMAP]\n   command-select      =/ \"CANCELUPDATE\"
    1*(SP quoted)\n       ;; <command-select> from [IMAP]\n   context-position      =
    number\n       ;; Context position may be 0 for SEARCH result additions.\n       ;;
    <number> from [IMAP]\n   modifier-context    = \"CONTEXT\"\n   modifier-partial
    \   = \"PARTIAL\" SP partial-range\n   partial-range       = nz-number \":\" nz-number\n
    \      ;; A range 500:400 is the same as 400:500.\n       ;; This is similar to
    <seq-range> from [IMAP],\n       ;; but cannot contain \"*\".\n   modifier-update
    \    = \"UPDATE\"\n   search-return-opt   =/ modifier-context / modifier-partial
    /\n                          modifier-update\n       ;; All conform to <search-return-opt>,
    from [IMAP-ABNF]\n   resp-text-code      =/ \"NOUPDATE\" SP quoted\n       ;;
    <resp-text-code> from [IMAP]\n   ret-data-addto      = \"ADDTO\"\n                          SP
    \"(\" context-position SP sequence-set\n                          *(SP context-position
    SP sequence-set)\n                          \")\"\n       ;; <sequence-set> from
    [IMAP]\n   ret-data-partial    = \"PARTIAL\"\n                         SP \"(\"
    partial-range SP partial-results \")\"\n       ;; <partial-range> is the requested
    range.\n   partial-results     = sequence-set / \"NIL\"\n       ;; <sequence-set>
    from [IMAP]\n       ;; NIL indicates no results correspond to the requested range.\n
    \  ret-data-removefrom = \"REMOVEFROM\"\n                          SP \"(\" context-position
    SP sequence-set\n                          *(SP context-position SP sequence-set)\n
    \                         \")\"\n       ;; <sequence-set> from [IMAP]\n   search-return-data
    \ =/ ret-data-partial / ret-data-addto /\n                          ret-data-removefrom\n
    \      ;; All conform to <search-return-data>, from [IMAP-ABNF]\n   sort                =/
    extended-sort\n       ;; <sort> from [SORT]\n   extended-sort       = [\"UID\"
    SP] \"SORT\" search-return-opts\n                         SP sort-criteria SP
    search-criteria\n       ;; <search-return-opts> from [IMAP-ABNF]\n       ;; <sort-criteria>
    and <search-criteria> from [SORT]\n"
  title: 5.  Formal Syntax
- contents:
  - "6.  Security Considerations\n   This document defines additional IMAP4 capabilities.
    \ As such, it\n   does not change the underlying security considerations of [IMAP].\n
    \  The authors and reviewers believe that no new security issues are\n   introduced
    with these additional IMAP4 capabilities.\n   Creation of a large number of contexts
    may provide an avenue for\n   denial-of-service attacks by authorized users.  Implementors
    may\n   reduce this by limiting the number of contexts possible to create,\n   via
    the protocol features described in Section 4.3.1; by reducing the\n   impact of
    contexts by the implementation strategies described in\n   Appendix B; and by
    logging context creation and usage so that\n   administrative remedies may be
    applied.\n"
  title: 6.  Security Considerations
- contents:
  - "7.  IANA Considerations\n   IMAP4 capabilities are registered by publishing a
    Standards Track or\n   IESG-approved Experimental RFC.\n   This document defines
    the ESORT, CONTEXT=SEARCH, and CONTEXT=SORT\n   IMAP capabilities.  IANA has added
    them to the registry accordingly.\n"
  title: 7.  IANA Considerations
- contents:
  - "8.  Acknowledgements\n   Much of the design of this extension can be found in
    ACAP.  Valuable\n   comments, both in agreement and in dissent, were received
    from Alexey\n   Melnikov, Arnt Gulbrandsen, Cyrus Daboo, Filip Navara, Mark Crispin,\n
    \  Peter Coates, Philip Van Hoof, Randall Gellens, Timo Sirainen, Zoltan\n   Ordogh,
    and others, and many of these comments have had significant\n   influence on the
    design or the text.  The authors are grateful to all\n   those involved, including
    those not mentioned here.\n"
  title: 8.  Acknowledgements
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [ABNF]       Crocker, D. and P. Overell, \"Augmented
      BNF for Syntax\n                Specifications: ABNF\", STD 68, RFC 5234, January
      2008.\n   [ESEARCH]    Melnikov, A. and D. Cridland, \"IMAP4 Extension to SEARCH\n
      \               Command for Controlling What Kind of Information Is\n                Returned\",
      RFC 4731, November 2006.\n   [IMAP]       Crispin, M., \"INTERNET MESSAGE ACCESS
      PROTOCOL - VERSION\n                4rev1\", RFC 3501, March 2003.\n   [IMAP-ABNF]
      \ Melnikov, A. and C. Daboo, \"Collected Extensions to\n                IMAP4
      ABNF\", RFC 4466, April 2006.\n   [KEYWORDS]   Bradner, S., \"Key words for
      use in RFCs to Indicate\n                Requirement Levels\", BCP 14, RFC 2119,
      March 1997.\n   [SORT]       Crispin, M. and K. Murchison, \"Internet Message
      Access\n                Protocol - SORT and THREAD Extensions\", RFC 5256,\n
      \               June 2008.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [ACAP]       Newman, C. and J. Myers, \"ACAP
      -- Application\n                Configuration Access Protocol\", RFC 2244, November
      1997.\n   [IDLE]       Leiba, B., \"IMAP4 IDLE command\", RFC 2177, June 1997.\n
      \  [NOTIFY]     Melnikov, A., Gulbrandsen, A., and C. King, \"The IMAP\n                NOTIFY
      Extension\", Work in Progress, March 2008.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - 'Appendix A.  Cookbook

    '
  - contents:
    - "A.1.  Virtual Mailboxes\n   It is possible to use the facilities described
      within this memo to\n   create a facility largely similar to a virtual mailbox,
      but handled\n   on the client side.\n   Initially, the client SELECTs the real
      \"backing\" mailbox.  Next, it\n   can switch to a filtered view at any time
      by issuing a RETURN (COUNT\n   UPDATE CONTEXT), and using RETURN (PARTIAL x:y)
      as the user scrolls,\n   feeding the results into a FETCH as required to populate
      summary\n   views.\n   A typically useful view is \"UID SORT (DATE) RETURN (...)
      \ UTF-8\n   UNSEEN UNDELETED\", which can be used to show the mailbox sorted
      into\n   INTERNALDATE order, filtered to only show messages which are unread\n
      \  and not yet deleted.\n"
    title: A.1.  Virtual Mailboxes
  - contents:
    - "A.2.  Trash Mailboxes\n   Certain contexts are particularly useful for client
      developers\n   wishing to present something similar to the common trash mailbox\n
      \  metaphor in limited bandwidth.  The simple criteria of UNDELETED only\n   matches
      undeleted messages, and the corresponding DELETED search key\n   can be used
      to display a per-mailbox trash-like virtual mailbox.\n"
    title: A.2.  Trash Mailboxes
  - contents:
    - "A.3.  Immediate EXPUNGE Notifications\n   The command \"SEARCH RETURN (UPDATE)
      ALL\" can be used to create a\n   context that notifies immediately about expunged
      messages, yet will\n   not affect message sequence numbers until the normal
      EXPUNGE message\n   can be sent.  This may be useful for clients wishing to
      show this\n   behavior without losing the benefit of sequence numbering.\n"
    title: A.3.  Immediate EXPUNGE Notifications
  - contents:
    - "A.4.  Monitoring Counts\n   A client need not maintain any result cache at
      all, but instead it\n   can maintain a simple count of messages matching the
      search criteria.\n   Typically, this would use the SEARCH command, as opposed
      to UID\n   SEARCH, due to its smaller representation.  Such usage might prove\n
      \  useful in monitoring the number of flagged, but unanswered, messages,\n   for
      example, with \"SEARCH RETURN (UPDATE COUNT) FLAGGED UNANSWERED\".\n"
    title: A.4.  Monitoring Counts
  - contents:
    - "A.5.  Resynchronizing Contexts\n   The creation of a context, and immediate
      access to it, can all be\n   accomplished in a single round-trip.  Therefore,
      whilst it is\n   possible to elide resynchronization if no changes have occurred,
      it\n   is simpler in most cases to resynchronize by simply recreating the\n
      \  context.\n"
    title: A.5.  Resynchronizing Contexts
  title: Appendix A.  Cookbook
- contents:
  - "Appendix B.  Server Implementation Notes\n   Although a server may cache the
    results, this is neither mandated nor\n   required, especially when the client
    uses SEARCH or UID SEARCH\n   commands.  UPDATE processing, for example, can be
    achieved\n   efficiently by comparison of the old flag state (if any) and the
    new,\n   and PARTIAL can be achieved by re-running the search until the\n   suitable
    window is required.  This is a result of there being no\n   snapshot facility.\n
    \  For example, on a new message, the server can simply test for matches\n   against
    all current UPDATE context search programs, and for any that\n   match, send the
    ADDTO return data.\n   Similarly, for a flag change on an existing message, the
    server can\n   check whether the message matched with its old flags, whether it\n
    \  matches with new flags, and provide ADDTO or REMOVEFROM return data\n   accordingly
    if these results differ.\n   For PARTIAL requests, the server can perform a full
    search,\n   discarding results until the lower bound is hit, and stopping the\n
    \  search when sufficient results have been obtained.\n   With some additional
    state, it is possible to restart PARTIAL\n   searches, thus avoiding performing
    the initial discard phase.\n   For the best performance, however, caching the
    full search results is\n   needed, which can allow for faster responses at the
    expense of\n   memory.  One reasonable strategy would be to balance this trade-off\n
    \  at run-time, discarding search results after a suitable timeout, and\n   regenerating
    them as required.\n   This yields state requirements of storing the search program
    for any\n   UPDATE contexts, and optionally storing both search program and\n
    \  (updated) results for further contexts as required.\n   Note that in the absence
    of a server-side results cache, it may be\n   impossible to know if an expunged
    message previously matched unless\n   the original message is still available.
    \ Therefore, some\n   implementations may be forced into using a results cache
    in many\n   circumstances.\n   UPDATE contexts created with SORT or UID SORT will
    almost certainly\n   require some form of results caching, however.\n"
  title: Appendix B.  Server Implementation Notes
- contents:
  - "Authors' Addresses\n   Dave Cridland\n   Isode Limited\n   5 Castle Business
    Village\n   36, Station Road\n   Hampton, Middlesex  TW12 2BX\n   GB\n   EMail:
    dave.cridland@isode.com\n   Curtis King\n   Isode Limited\n   5 Castle Business
    Village\n   36, Station Road\n   Hampton, Middlesex  TW12 2BX\n   GB\n   EMail:
    cking@mumbo.ca\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
