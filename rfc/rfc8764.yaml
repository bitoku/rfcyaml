- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                       S. Cheshire
  contents:
  - "Independent Submission                                       S. Cheshire\n  \
    \              Apple's DNS Long-Lived Queries Protocol\n"
- title: Abstract
  contents:
  - "Abstract\n   Apple's DNS Long-Lived Queries (LLQ) is a mechanism for extending\
    \ the\n   DNS protocol to support change notification, thus allowing clients to\n\
    \   learn about changes to DNS data without polling the server.  From\n   2005\
    \ onwards, LLQ was implemented in Apple products including Mac OS\n   X, Bonjour\
    \ for Windows, and AirPort wireless base stations.  In 2020,\n   the LLQ protocol\
    \ was superseded by the IETF Standards Track RFC 8765,\n   \"DNS Push Notifications\"\
    , which builds on experience gained with the\n   LLQ protocol to create a superior\
    \ replacement.\n   The existing LLQ protocol deployed and used from 2005 to 2020\
    \ is\n   documented here to give background regarding the operational\n   experience\
    \ that informed the development of DNS Push Notifications,\n   and to help facilitate\
    \ a smooth transition from LLQ to DNS Push\n   Notifications.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not candidates for any level of Internet\
    \ Standard;\n   see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8764.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n     1.1.  Transition to DNS Push Notifications\n\
    \   2.  Conventions and Terminology Used in This Document\n   3.  Mechanisms\n\
    \     3.1.  Assigned Numbers\n     3.2.  Opt-RR Format\n   4.  LLQ Address and\
    \ Port Identification\n   5.  LLQ Setup\n     5.1.  Setup Message Retransmission\n\
    \     5.2.  LLQ Setup Four-Way Handshake\n       5.2.1.  Setup Request\n     \
    \  5.2.2.  Setup Challenge\n       5.2.3.  Challenge Response\n       5.2.4. \
    \ ACK + Answers\n     5.3.  Resource Record TTLs\n   6.  Event Responses\n   \
    \  6.1.  Add Events\n     6.2.  Remove Events\n     6.3.  Gratuitous Response\
    \ Acknowledgments\n   7.  LLQ Lease-Life Expiration\n     7.1.  Refresh Request\n\
    \     7.2.  LLQ Refresh Acknowledgment\n   8.  Security Considerations\n     8.1.\
    \  Server DoS\n     8.2.  Client Packet Storms\n     8.3.  Spoofing\n   9.  IANA\
    \ Considerations\n   10. References\n     10.1.  Normative References\n     10.2.\
    \  Informative References\n   Appendix A.  Problems with the LLQ Protocol\n  \
    \ Acknowledgments\n   Authors' Addresses\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   In dynamic environments, DNS-based Service Discovery [RFC6763]\n\
    \   benefits significantly from clients being able to learn about changes\n  \
    \ to DNS information via a mechanism that is both more timely and more\n   efficient\
    \ than simple polling.  Such a mechanism enables \"live\n   browses\" that (a)\
    \ learn when a new instance of a service appears, (b)\n   learn when an existing\
    \ service instance disappears from the network,\n   and (c) allows clients to\
    \ monitor status changes to a service\n   instance (e.g., printer ink levels).\
    \  Multicast DNS [RFC6762]\n   supports this natively.  When a device on the network\
    \ publishes or\n   deletes Multicast DNS records, these changes are multicast\
    \ to other\n   hosts on the network.  Those hosts deliver the change notifications\n\
    \   to interested clients (applications running on that host).  Hosts\n   also\
    \ send occasional queries to the network, in case gratuitous\n   announcements\
    \ are not received due to packet loss, and to detect\n   records lost due to their\
    \ publishers crashing or having become\n   disconnected from the network.\n  \
    \ This document defines an Apple extension to unicast DNS that enables\n   a client\
    \ to issue long-lived queries that allow a unicast DNS server\n   to notify clients\
    \ about changes to DNS data.  This is a more scalable\n   and practical solution\
    \ than can be achieved by polling of the name\n   server, because a low polling\
    \ rate could leave the client with stale\n   information, while a high polling\
    \ rate would have an adverse impact\n   on the network and server.\n   The mechanism\
    \ defined in this document is now being replaced by DNS\n   Push Notifications\
    \ [RFC8765] as explained in Section 1.1.\n"
- title: 1.1.  Transition to DNS Push Notifications
  contents:
  - "1.1.  Transition to DNS Push Notifications\n   The LLQ protocol enjoyed over\
    \ a decade of useful operation, enabling\n   timely live updates for the service\
    \ discovery user interface in\n   Apple's Back to My Mac [RFC6281] service.\n\
    \   However, some problems were discovered, as described in Appendix A.\n   This\
    \ operational experience with LLQ informed the design of its IETF\n   Standards\
    \ Track successor, DNS Push Notifications [RFC8765].  Since\n   no further work\
    \ is being done on the LLQ protocol, this LLQ\n   specification will not be updated\
    \ to remedy these problems.\n   All existing LLQ implementations are RECOMMENDED\
    \ to migrate to using\n   DNS Push Notifications instead.\n   Existing LLQ servers\
    \ are RECOMMENDED to implement and support DNS\n   Push Notifications so that\
    \ clients can begin migrating to the newer\n   protocol.\n   Existing LLQ clients\
    \ are RECOMMENDED to query for the\n   \"_dns-push-tls._tcp.<zone>\" SRV record\
    \ first, and then only if DNS\n   Push Notifications fail, fall back to query\
    \ for\n   \"_dns-llq._udp.<zone>\" instead.  Use of the \"_dns-llq._udp.<zone>\"\
    \n   SRV record is described in Section 4.\n   This will cause clients to prefer\
    \ the newer protocol when possible.\n   It is RECOMMENDED that clients always\
    \ attempt DNS Push Notifications\n   first for every new request, and only if\
    \ that fails, then fall back\n   to using LLQ.  Clients SHOULD NOT record that\
    \ a given server only\n   speaks LLQ and subsequently default to LLQ for that\
    \ server, since\n   server software gets updated and even a server that speaks\
    \ only LLQ\n   today may be updated to support DNS Push Notifications tomorrow.\n\
    \   New client and server implementations are RECOMMENDED to support only\n  \
    \ DNS Push Notifications.\n"
- title: 2.  Conventions and Terminology Used in This Document
  contents:
  - "2.  Conventions and Terminology Used in This Document\n   The key words \"MUST\"\
    , \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD\
    \ NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in\
    \ this document are to be interpreted as described in\n   BCP 14 [RFC2119] [RFC8174]\
    \ when, and only when, they appear in all\n   capitals, as shown here.\n"
- title: 3.  Mechanisms
  contents:
  - "3.  Mechanisms\n   DNS Long-Lived Queries (LLQ) are implemented using the standard\
    \ DNS\n   message format [RFC1035] in conjunction with an EDNS(0) OPT pseudo-RR\n\
    \   [RFC6891] with a new OPTION-CODE and OPTION-DATA format specified\n   here.\
    \  Encoding the LLQ request in an OPT pseudo-RR allows for\n   implementation\
    \ of LLQ with minimal modification to a name server's\n   front end.  If a DNS\
    \ query containing an LLQ option is sent to a\n   server that does not implement\
    \ LLQ, a server that complies with the\n   EDNS(0) specification [RFC6891] will\
    \ silently ignore the unrecognized\n   option and answer the request as a normal\
    \ DNS query without\n   establishing any long-lived state and without returning\
    \ an LLQ option\n   in its response.  If a DNS query containing an LLQ option\
    \ is sent to\n   a server that does not implement EDNS(0) at all, the server may\n\
    \   silently ignore the EDNS(0) OPT pseudo-RR or it may return a nonzero\n   RCODE.\
    \  However, in practice, this issue is mostly theoretical, since\n   having a\
    \ zone's _dns-llq._udp.<zone> SRV record target a host that\n   does not implement\
    \ LLQ is a configuration error.\n   Note that this protocol is designed for data\
    \ set sizes of a few dozen\n   resource records at most and change rates no more\
    \ than once every 10\n   seconds on average.  Data sets that frequently exceed\
    \ a single IP\n   packet, or that experience a rapid change rate, may have undesirable\n\
    \   performance implications.\n"
- title: 3.1.  Assigned Numbers
  contents:
  - "3.1.  Assigned Numbers\n   This section describes constants used in this document.\n\
    \      EDNS(0) OPTION-CODE (recorded with IANA):\n         LLQ               1\n\
    \      LLQ-PORT 5352 (recorded with IANA)\n      LLQ Opcodes (specific to this\
    \ LLQ EDNS(0) Option):\n         LLQ-SETUP         1\n         LLQ-REFRESH   \
    \    2\n         LLQ-EVENT         3\n      LLQ Error Codes (specific to this\
    \ LLQ EDNS(0) Option):\n         NO-ERROR          0\n         SERV-FULL     \
    \    1\n         STATIC            2\n         FORMAT-ERR        3\n         NO-SUCH-LLQ\
    \       4\n         BAD-VERS          5\n         UNKNOWN-ERR       6\n"
- title: 3.2.  Opt-RR Format
  contents:
  - "3.2.  Opt-RR Format\n   As required by the EDNS(0) specification [RFC6891], all\
    \ OPT\n   pseudo-RRs used in LLQs are formatted as follows:\n          | Field\
    \ Name | Field Type   | Description             |\n          | NAME       | domain\
    \ name  | MUST be 0 (root domain) |\n          | TYPE       | u_int16_t    | OPT\
    \ (41)                |\n          | CLASS      | u_int16_t    | 0*          \
    \            |\n          | TTL        | u_int32_t    | 0                    \
    \   |\n          | RDLEN      | u_int16_t    | length of all RDATA     |\n   \
    \       | RDATA      | octet stream | (see below)             |\n            \
    \           Table 1: OPT-RRs Used in LLQs\n   * The CLASS field indicates, as\
    \ per the EDNS(0) specification\n   [RFC6891], the sender's UDP payload size.\
    \  However, clients and\n   servers are not required to determine their reassembly\
    \ buffer size,\n   path MTU, etc., to support LLQ.  Thus, the sender of an LLQ\
    \ Request\n   or Response MAY set the CLASS field to 0.  The recipient MUST ignore\n\
    \   the class field if it is set to 0.\n   The RDATA of an EDNS(0) OPT pseudo-RR\
    \ consists of zero or more\n   options of the form { OPTION-CODE, OPTION-LENGTH,\
    \ OPTION-DATA }\n   packed together, with the RDLEN field set accordingly to indicate\
    \ the\n   total size.  An LLQ OPTION is illustrated below.  An EDNS(0) OPT\n \
    \  pseudo-RR may contain zero or more LLQ OPTIONS in addition to zero or\n   more\
    \ other EDNS(0) options.\n   | Field Name    | Field Type | Description      \
    \                   |\n   | OPTION-CODE   | u_int16_t  | LLQ (1)             \
    \                |\n   | OPTION-LENGTH | u_int16_t  | Length of following fields\
    \ (18)     |\n   | LLQ-VERSION   | u_int16_t  | Version of LLQ protocol implemented\
    \ |\n   | LLQ-OPCODE    | u_int16_t  | Identifies LLQ operation            |\n\
    \   | LLQ-ERROR     | u_int16_t  | Identifies LLQ errors               |\n   |\
    \ LLQ-ID        | u_int64_t  | Identifier for an LLQ               |\n   | LLQ-LEASE\
    \     | u_int32_t  | Requested or granted life of LLQ,   |\n                 \
    \          Table 2: LLQ OPTION\n   The size and meaning of the OPTION-CODE and\
    \ OPTION-LENGTH fields are\n   as described in the EDNS(0) specification [RFC6891].\
    \  The remainder\n   of the fields comprise the OPTION-DATA of the EDNS(0) LLQ\
    \ OPTION.\n   Since for LLQ the OPTION-DATA is a fixed size, in EDNS(0) LLQ OPTIONS\n\
    \   the OPTION-LENGTH field always has the value 18.\n   In keeping with Internet\
    \ convention, all multi-byte numeric\n   quantities (u_int16_t, u_int32_t, and\
    \ u_int64_t) are represented in\n   big endian byte order (most significant byte\
    \ first).\n"
- title: 4.  LLQ Address and Port Identification
  contents:
  - "4.  LLQ Address and Port Identification\n   The client requires a mechanism to\
    \ determine to which server it\n   should send LLQ operations.\n   Additionally,\
    \ some firewalls block direct communication with a name\n   server on port 53\
    \ to avoid spoof responses.  However, this direct\n   communication is necessary\
    \ for LLQs.  Thus, servers MAY listen for\n   LLQs on a different port (typically\
    \ 5352).  Clients, therefore, also\n   need a mechanism to determine to which\
    \ port to send LLQ operations.\n   The client determines the server responsible\
    \ for a given LLQ much as\n   a client determines to which server to send a DNS\
    \ dynamic update.\n   The client begins by sending a standard DNS query for the\
    \ name of the\n   LLQ, with type SOA.  If the record exists, then the server MUST\n\
    \   answer with that SOA record in the Answer section.  If a record of\n   type\
    \ SOA with the LLQ name does not exist, then the server SHOULD\n   include an\
    \ SOA record for that name's zone in the Authority section.\n   For example, a\
    \ query for \"_ftp._tcp.example.com\" with type SOA, when\n   there is no SOA\
    \ record with that name, might return an SOA record\n   named \"example.com\"\
    \ in the Authority section.  If the named SOA\n   record does not exist and the\
    \ server fails to include the enclosing\n   SOA record in the Authority section,\
    \ the client strips the leading\n   label from the name and tries again, repeating\
    \ until an answer is\n   received.\n   This iterative zone apex discovery algorithm\
    \ is described in more\n   detail in the DNS Push Notifications specification\
    \ [RFC8765].\n   Upon learning the zone apex (SOA), the client then constructs\
    \ and\n   sends an SRV query for the name, \"_dns-llq._udp.<zone>\",\n   e.g.,\
    \ \"_dns-llq._udp.example.com\".\n   An authoritative server for a zone implementing\
    \ LLQ MUST answer with\n   an SRV record [RFC2782] for this name.  The SRV RDATA\
    \ is as follows:\n    | PRIORITY | typically 0                               \
    \           |\n    | WEIGHT   | typically 0                                  \
    \        |\n    | PORT     | typically 53 or 5352                            \
    \     |\n    | TARGET   | name of server providing LLQs for the requested zone\
    \ |\n                             Table 3: SRV RDATA\n   The server SHOULD include\
    \ the address record(s) for the target host\n   in the Additional section of the\
    \ response.\n   If the server does not include the target host's address record(s)\
    \ in\n   the Additional section, the client SHOULD query explicitly for the\n\
    \   address record(s) with the name of the SRV target.\n   The client MUST send\
    \ all LLQ requests, refreshes, and acknowledgments\n   to the name server specified\
    \ in the SRV target, at the address\n   contained in the address record for that\
    \ target.  Note that the\n   queries described in this section (including those\
    \ for SOA and SRV\n   records) MAY be sent to an intermediate DNS recursive resolver\
    \ --\n   they need not be sent directly to the name server.\n   If, on issuing\
    \ the SRV query, the client receives a negative response\n   indicating that the\
    \ SRV record does not exist, the client SHOULD\n   conclude that the zone does\
    \ not support LLQ.  The client then SHOULD\n   NOT send an LLQ request for the\
    \ desired name, instead utilizing the\n   behavior for LLQ-unaware servers described\
    \ in Section 5, \"LLQ Setup\".\n   Servers should send all messages to the source\
    \ address and port of\n   the LLQ setup message received from the client.\n"
- title: 5.  LLQ Setup
  contents:
  - "5.  LLQ Setup\n   An LLQ is initiated by a client and is completed via a four-way\n\
    \   handshake.  This handshake provides resilience to packet loss,\n   demonstrates\
    \ client reachability, and reduces denial-of-service\n   attack opportunities\
    \ (see Section 8, \"Security Considerations\").\n"
- title: 5.1.  Setup Message Retransmission
  contents:
  - "5.1.  Setup Message Retransmission\n   LLQ Setup Requests and Responses sent\
    \ by the client SHOULD be\n   retransmitted if no acknowledgments are received.\
    \  The client SHOULD\n   retry up to two more times (for a total of 3 attempts)\
    \ before\n   considering the server down or unreachable.  The client MUST wait\
    \ at\n   least 2 seconds before the first retransmission and 4 seconds between\n\
    \   the first and second retransmissions.  The client SHOULD listen for a\n  \
    \ response for at least 8 seconds after the 3rd attempt before\n   considering\
    \ the server down or unreachable.  Upon determining a\n   server to be down, a\
    \ client MAY periodically attempt to re-initiate\n   an LLQ setup at a rate of\
    \ not more than once per hour.\n   Servers MUST NOT retransmit acknowledgments\
    \ that do not generate\n   responses from the client.  Retransmission in setup\
    \ is client driven,\n   freeing servers from maintaining timers for incomplete\
    \ LLQ setups.\n   If servers receive duplicate messages from clients (perhaps\
    \ due to\n   the loss of the server's responses mid-flight), the server MUST\n\
    \   resend its reply (possibly modifying the LLQ-LEASE as described in\n   Section\
    \ 5.2.4, \"ACK + Answers\").\n   Servers MUST NOT garbage collect LLQs that fail\
    \ to complete the four-\n   way handshake until the initially granted LLQ-LEASE\
    \ has elapsed.\n"
- title: 5.2.  LLQ Setup Four-Way Handshake
  contents:
  - "5.2.  LLQ Setup Four-Way Handshake\n   The four phases of the handshake include:\n\
    \      1) Setup Request        client to server, identifies LLQ(s)\n         \
    \                     requested\n      2) Setup Challenge      server to client,\
    \ provides unique\n                              identifiers for successful requested\
    \ LLQs,\n                              and error(s) for unsuccessful requested\n\
    \                              LLQs.\n      3) Challenge Response   client to\
    \ server, echoes identifier(s),\n                              demonstrating client's\
    \ reachability and\n                              willingness to participate\n\
    \      4) ACK + Answers        server to client, confirms setup and\n        \
    \                      provides initial answers\n"
- title: 5.2.1.  Setup Request
  contents:
  - "5.2.1.  Setup Request\n   A request for an LLQ is formatted like a standard DNS\
    \ query but with\n   an OPT pseudo-RR containing LLQ metadata in its Additional\
    \ section.\n   LLQ Setup Requests are identified by the LLQ-SETUP opcode and a\n\
    \   zero-valued LLQ-ID.\n   The request MAY contain multiple questions to set\
    \ up multiple LLQs.\n   A Setup Request consisting of multiple questions MUST\
    \ contain\n   multiple LLQ OPTIONS, one per question, with the LLQ OPTIONS in\
    \ the\n   same order as the questions they correspond to (i.e., the first LLQ\n\
    \   OPTION corresponds to the first question, the second LLQ OPTION\n   corresponds\
    \ to the second question, etc.).  If requesting multiple\n   LLQs, clients SHOULD\
    \ request the same LLQ-LEASE for each LLQ.\n   Requests over UDP MUST NOT contain\
    \ multiple questions if doing so\n   would cause the message to exceed a single\
    \ IP packet.\n   A client MUST NOT request multiple identical LLQs (i.e., containing\n\
    \   the same qname/type/class) from the same source IP address and port.\n   This\
    \ requirement is to avoid unnecessary load on servers.  In the\n   case of multiple\
    \ independent client implementations that may run on\n   the same device without\
    \ knowledge of each other, it is allowable if\n   they by chance send LLQ requests\
    \ for the same qname/type/class.\n   These independent implementations on the\
    \ same client will be using\n   different source ports.  Likewise, to the server,\
    \ multiple\n   independent clients behind the same NAT gateway will appear as\
    \ if\n   they were multiple independent clients using different ports on the\n\
    \   same host, and this is also allowable.\n   The query MUST NOT be for record\
    \ type ANY (255), class ANY (255), or\n   class NONE (0).\n     | Field Name \
    \   | Field Type | Description                     |\n     | OPTION-CODE   | u_int16_t\
    \  | LLQ (1)                         |\n     | OPTION-LENGTH | u_int16_t  | Length\
    \ of following fields (18) |\n     | LLQ-VERSION   | u_int16_t  | Version of LLQ\
    \ protocol         |\n     | LLQ-OPCODE    | u_int16_t  | LLQ-SETUP (1)      \
    \             |\n     | LLQ-ERROR     | u_int16_t  | NO-ERROR (0)            \
    \        |\n     | LLQ-ID        | u_int64_t  | 0                            \
    \   |\n     | LLQ-LEASE     | u_int32_t  | Desired life of LLQ request     |\n\
    \                 Table 4: Setup Request LLQ OPTION Format\n   The Setup Request\
    \ LLQ OPTION MUST be repeated once for each\n   additional query in the Question\
    \ section.\n"
- title: 5.2.2.  Setup Challenge
  contents:
  - "5.2.2.  Setup Challenge\n   Upon receiving an LLQ Setup Request, a server implementing\
    \ LLQs will\n   send a Setup Challenge to the requester (client).  An LLQ Setup\n\
    \   Challenge is a DNS response, with the DNS message ID matching that of\n  \
    \ the Setup Request, and with all questions contained in the Setup\n   Request\
    \ present in the Question section of the response.\n   Additionally, the challenge\
    \ contains a single OPT pseudo-RR with an\n   LLQ OPTION for each LLQ request,\
    \ indicating the success or failure of\n   each request.  The LLQ OPTIONS MUST\
    \ be in the same order as the\n   questions they correspond to.  Note that in\
    \ a Setup Request\n   containing multiple questions, some LLQs may succeed while\
    \ others may\n   fail.\n     | Field Name    | Field Type | Description      \
    \               |\n     | OPTION-CODE   | u_int16_t  | LLQ (1)               \
    \          |\n     | OPTION-LENGTH | u_int16_t  | Length of following fields (18)\
    \ |\n     | LLQ-VERSION   | u_int16_t  | Version of LLQ protocol         |\n \
    \    | LLQ-OPCODE    | u_int16_t  | LLQ-SETUP (1)                   |\n     |\
    \ LLQ-ERROR     | u_int16_t  | [As Appropriate]                |\n     | LLQ-ID\
    \        | u_int64_t  | [As Appropriate]                |\n     | LLQ-LEASE  \
    \   | u_int32_t  | [As Appropriate]                |\n                Table 5:\
    \ Setup Challenge LLQ OPTION Format\n   The Setup Challenge LLQ OPTION MUST be\
    \ repeated once for each query\n   in the Questions section of the Setup Challenge.\
    \  Further details for\n   LLQ-ERROR, LLQ-ID and LLQ-LEASE are given below.\n\
    \   LLQ-ERROR:\n      NO-ERROR:         The LLQ Setup Request was successful.\n\
    \      FORMAT-ERR:       The LLQ was improperly formatted.  Note that if\n   \
    \                     the rest of the DNS message is properly\n              \
    \          formatted, the DNS header error code MUST NOT\n                   \
    \     include a format error code, since to do so\n                        would\
    \ cause ambiguity between the case where a\n                        client sends\
    \ a valid LLQ Setup Request to a\n                        server that does not\
    \ understand LLQ and the case\n                        where a client sends a\
    \ malformed LLQ Setup\n                        Request to a server that does understand\
    \ LLQ.\n      SERV-FULL:        The server cannot grant the LLQ request because\n\
    \                        it is overloaded or the request exceeds the\n       \
    \                 server's rate limit (see Section 8, Security\n             \
    \           Considerations).  Upon returning this error, the\n               \
    \         server MUST include in the LLQ-LEASE field a\n                     \
    \   time interval, in seconds, after which the\n                        client\
    \ may retry the LLQ Setup.\n      STATIC:           The data for this name and\
    \ type is not expected\n                        to change frequently, and the\
    \ server, therefore,\n                        does not support the requested LLQ.\
    \  The client\n                        MUST honor the resource record TTLs returned\
    \ and\n                        MUST NOT poll sooner than indicated by those\n\
    \                        TTLs, nor should it retry the LLQ Setup for this\n  \
    \                      name and type.\n      BAD-VERS:         The protocol version\
    \ specified in the client's\n                        Setup Request is not supported\
    \ by the server.\n      UNKNOWN-ERR:      The LLQ was not granted for some other\
    \ reason\n                        not covered by the preceding error code values.\n\
    \   LLQ-ID:           On success, a random number generated by the server\n  \
    \                   that is unique on the server for the requested\n         \
    \            name/type/class.  The LLQ-ID SHOULD be an\n                     unpredictable\
    \ random number.  A possible method of\n                     allocating LLQ-IDs\
    \ with minimal bookkeeping would\n                     be to store the time, in\
    \ seconds since the Epoch,\n                     in the high 32 bits of the field,\
    \ and a\n                     cryptographically generated 32-bit random integer\n\
    \                     in the low 32 bits.\n                     On error, the\
    \ LLQ-ID is set to 0.\n   LLQ-LEASE:        On success, the actual life of the\
    \ LLQ, in seconds.\n                     Value may be greater than, less than,\
    \ or equal to\n                     the value requested by the client, as per\
    \ the\n                     server administrator's policy.  The server MAY\n \
    \                    discard the LLQ after this LLQ-LEASE expires unless\n   \
    \                  the LLQ has been renewed by the client (see\n             \
    \        Section 7, \"LLQ Lease-Life Expiration\").  The\n                   \
    \  server MUST NOT generate events (see Section 6,\n                     \"Event\
    \ Responses\") for expired LLQs.\n                     On SERV-FULL error, LLQ-LEASE\
    \ MUST be set to a time\n                     interval, in seconds, after which\
    \ the client may\n                     retry the LLQ Setup.\n                \
    \     On other errors, the LLQ-LEASE MUST be set to 0.\n"
- title: 5.2.3.  Challenge Response
  contents:
  - "5.2.3.  Challenge Response\n   Upon issuing a Setup Request, a client listens\
    \ for a Setup Challenge\n   (Section 5.2.2) retransmitting the Setup Request as\
    \ necessary\n   (Section 5.1).  After receiving a successful Setup Challenge,\
    \ the\n   client SHOULD send a Challenge Response to the server.  This\n   Challenge\
    \ Response is a DNS request with questions as in the Setup\n   Request and Setup\
    \ Challenge, and a single OPT pseudo-RR in the\n   Additional section, with the\
    \ LLQ OPTIONS corresponding to the LLQ\n   OPTIONS contained in the Setup Challenge\
    \ (i.e., echoing, for each LLQ\n   OPTION, the random LLQ-ID and the granted LLQ-LEASE).\
    \  If the\n   Challenge Response contains multiple questions, the first question\n\
    \   MUST correspond to the first LLQ OPTION, etc.\n   If the Setup Request for\
    \ a particular LLQ fails with a STATIC error,\n   the client MUST NOT poll the\
    \ server for that LLQ.  The client SHOULD\n   honor the resource record TTLs contained\
    \ in the response.\n   If a Setup Request fails with a SERV-FULL error, the client\
    \ MAY retry\n   the LLQ Setup Request (Section 5.2.1) after the time indicated\
    \ in the\n   LLQ-LEASE field.\n   If the Setup Request fails with an error other\
    \ than STATIC or\n   SERV-FULL, or the server is determined not to support LLQ\
    \ (i.e., the\n   client receives a DNS response with a nonzero RCODE, or a DNS\n\
    \   response containing no LLQ option), the client MAY poll the server\n   periodically\
    \ with standard DNS queries, inferring Add and Remove\n   Events (see Section\
    \ 6, \"Event Responses\") by comparing answers to\n   these queries.  The client\
    \ SHOULD NOT poll more than once every 15\n   minutes for a given query.  The\
    \ client MUST NOT poll if it receives a\n   STATIC error code in the acknowledgment.\n"
- title: 5.2.4.  ACK + Answers
  contents:
  - "5.2.4.  ACK + Answers\n   Upon receiving a correct Challenge Response, a server\
    \ MUST return an\n   acknowledgment, completing the LLQ setup, and provide all\
    \ current\n   answers to the question(s).\n   To acknowledge a successful Challenge\
    \ Response, i.e., a Challenge\n   Response in which the LLQ-ID and LLQ-LEASE echoed\
    \ by the client match\n   the values issued by the server, the server MUST send\
    \ a DNS response\n   containing all available answers to the question(s) contained\
    \ in the\n   original Setup Request, along with all additional resource records\n\
    \   appropriate for those answers in the Additional section.  The\n   Additional\
    \ section also contains LLQ OPTIONS formatted as follows:\n     | Field Name \
    \   | Field Type | Description                     |\n     | OPTION-CODE   | u_int16_t\
    \  | LLQ (1)                         |\n     | OPTION-LENGTH | u_int16_t  | Length\
    \ of following fields (18) |\n     | LLQ-VERSION   | u_int16_t  | Version of LLQ\
    \ protocol         |\n     | LLQ-OPCODE    | u_int16_t  | LLQ-SETUP (1)      \
    \             |\n     | LLQ-ERROR     | u_int16_t  | NO-ERROR (0)            \
    \        |\n     | LLQ-ID        | u_int64_t  | Originally granted ID, echoed\
    \   |\n     | LLQ-LEASE     | u_int32_t  | Remaining life of LLQ, in       |\n\
    \           Table 6: Successful ACK + Answers LLQ OPTION Format\n   If there is\
    \ a significant delay in receiving a Challenge Response, or\n   multiple Challenge\
    \ Responses are issued (possibly because they were\n   lost en route to the client,\
    \ causing the client to resend the\n   Challenge Response), the server MAY decrement\
    \ the LLQ-LEASE by the\n   time elapsed since the Setup Challenge was initially\
    \ issued.\n   If the setup is completed over UDP and all initially available\n\
    \   answers to the question(s), additional records, and the OPT pseudo-RR\n  \
    \ do not fit in a single IP packet, some or all additional records\n   (excluding\
    \ the OPT pseudo-RR) MUST be omitted.  If, after omission of\n   all additional\
    \ records, the answers still do not fit in a single\n   message, answers MUST\
    \ be removed until the message fits in a single\n   IP packet.  These answers\
    \ not delivered in the ACK + Answers MUST be\n   delivered without undue delay\
    \ to the client via Add Events\n   (Section 6, \"Event Responses\").\n"
- title: 5.3.  Resource Record TTLs
  contents:
  - "5.3.  Resource Record TTLs\n   The TTLs of resource records contained in answers\
    \ to successful LLQs\n   SHOULD be ignored by the client.  The client MAY cache\
    \ LLQ answers\n   until the client receives a gratuitous announcement (see Section\
    \ 6,\n   \"Event Responses\") indicating that the answer to the LLQ has changed.\n\
    \   The client SHOULD NOT cache answers after the LLQs LLQ-LEASE expires\n   without\
    \ being refreshed (see Section 7, \"LLQ Lease-Life Expiration\").\n   If an LLQ\
    \ request fails, the client SHOULD NOT cache answers for a\n   period longer than\
    \ the client's polling interval.\n   Note that resource records intended specifically\
    \ to be transmitted\n   via LLQs (e.g., DNS-based Service Discovery resource records)\
    \ may\n   have unusually short TTLs.  This is because it is assumed that the\n\
    \   records may change frequently, and that a client's cache coherence\n   will\
    \ be maintained via the LLQ and gratuitous responses.  Short TTLs\n   prevent\
    \ stale information from residing in intermediate DNS recursive\n   resolvers\
    \ that are not LLQ aware.\n   TTLs of resource records included in the Additional\
    \ section of an LLQ\n   response (which do not directly answer the LLQ) SHOULD\
    \ be honored by\n   the client.\n"
- title: 6.  Event Responses
  contents:
  - "6.  Event Responses\n   When a change (\"event\") occurs to a name server's zone,\
    \ the server\n   MUST check if the new or deleted resource records answer any\
    \ LLQs.\n   If so, the changes MUST be communicated to the LLQ requesters in the\n\
    \   form of a gratuitous DNS response sent to the client, with the\n   relevant\
    \ question(s) in the Question section, and the corresponding\n   answers in the\
    \ Answer section.  The response also includes an OPT\n   pseudo-RR in the Additional\
    \ section.  This OPT pseudo-RR contains, in\n   its RDATA, an LLQ OPTION for each\
    \ LLQ being answered in the message.\n   Each LLQ OPTION must include the LLQ-ID.\
    \  This reduces the potential\n   for spoof events being sent to a client.\n \
    \    | Field Name    | Field Type | Description                     |\n     |\
    \ OPTION-CODE   | u_int16_t  | LLQ (1)                         |\n     | OPTION-LENGTH\
    \ | u_int16_t  | Length of following fields (18) |\n     | LLQ-VERSION   | u_int16_t\
    \  | Version of LLQ protocol         |\n     | LLQ-OPCODE    | u_int16_t  | LLQ-EVENT\
    \ (3)                   |\n     | LLQ-ERROR     | u_int16_t  | NO-ERROR (0)  \
    \                  |\n     | LLQ-ID        | u_int64_t  | [As Appropriate]   \
    \             |\n     | LLQ-LEASE     | u_int32_t  | 0                       \
    \        |\n                Table 7: Event Response LLQ OPTION Format\n   Gratuitous\
    \ responses for a single LLQ MAY be batched such that\n   multiple changes are\
    \ communicated in a single message.  Responses\n   MUST NOT be batched if this\
    \ would cause a message that would\n   otherwise fit in a single IP packet to\
    \ be truncated.  While responses\n   MAY be deferred to provide opportunities\
    \ for batching, responses\n   SHOULD NOT be delayed, for purposes of batching,\
    \ for more than 30\n   seconds, as this would cause an unacceptable latency for\
    \ the client.\n   After sending a gratuitous response, the server MUST listen\
    \ for an\n   acknowledgment from the client.  If the client does not respond,\
    \ the\n   server MUST resend the response.  The server MUST resend two times\n\
    \   (for a total of 3 transmissions), after which the server MUST\n   consider\
    \ the client to be unreachable and delete its LLQ.  The server\n   MUST listen\
    \ for 2 seconds before resending the response, 4 more\n   seconds before resending\
    \ again, and must wait an additional 8 seconds\n   after the 3rd transmission\
    \ before terminating the LLQ.\n   The DNS message header of the response SHOULD\
    \ include an\n   unpredictable random number in the DNS message ID field, which\
    \ is to\n   be echoed in the client's acknowledgment.\n"
- title: 6.1.  Add Events
  contents:
  - "6.1.  Add Events\n   Add Events occur when a new resource record appears, usually\
    \ as the\n   result of a dynamic update [RFC2136], that answers an LLQ.  This\n\
    \   record must be sent in the Answer section of the event to the client.\n  \
    \ Records that normally accompany this record in responses MAY be\n   included\
    \ in the Additional section as per truncation restrictions\n   described above.\n"
- title: 6.2.  Remove Events
  contents:
  - "6.2.  Remove Events\n   Remove Events occur when a resource record previously\
    \ sent to a\n   client, either in an initial response or in an Add Event, becomes\n\
    \   invalid (normally as a result of being removed via a dynamic update).\n  \
    \ The deleted resource record is sent in the Answer section of the\n   event to\
    \ the client.  The resource record TTL is set to -1,\n   indicating that the record\
    \ has been removed.\n"
- title: 6.3.  Gratuitous Response Acknowledgments
  contents:
  - "6.3.  Gratuitous Response Acknowledgments\n   Upon receiving a gratuitous response\
    \ (\"event\"), the client MUST send\n   an acknowledgment to the server.  This\
    \ acknowledgment is a DNS\n   response echoing the OPT pseudo-RR contained in\
    \ the event, with the\n   message ID of the gratuitous response echoed in the\
    \ message header.\n   The acknowledgment MUST be sent to the source IP address\
    \ and port\n   from which the event originated.\n"
- title: 7.  LLQ Lease-Life Expiration
  contents:
  - '7.  LLQ Lease-Life Expiration

    '
- title: 7.1.  Refresh Request
  contents:
  - "7.1.  Refresh Request\n   If the client desires to maintain the LLQ beyond the\
    \ duration\n   specified in the LLQ-LEASE field of the ACK + Answers\n   (Section\
    \ 5.2.4), the client MUST send a Refresh Request.  A Refresh\n   Request is identical\
    \ to an LLQ Challenge Response (Section 5.2.3) but\n   with the LLQ-OPCODE set\
    \ to LLQ-REFRESH.  Unlike a Challenge Response,\n   a Refresh Request returns\
    \ no answers.\n   The client SHOULD refresh an LLQ when 80% of its LLQ-LEASE has\n\
    \   elapsed.\n   As a means of reducing network traffic, when constructing refresh\n\
    \   messages the client SHOULD include all LLQs established with a given\n   server,\
    \ even those not yet close to expiration.  However, at least\n   one LLQ MUST\
    \ have elapsed at least 80% of its original LLQ-LEASE.\n   The client MUST NOT\
    \ include additional LLQs if doing so would cause\n   the message to no longer\
    \ fit in a single IP packet.  In this case,\n   the LLQs furthest from expiration\
    \ should be omitted such that the\n   message fits in a single IP packet.  (These\
    \ LLQs SHOULD be refreshed\n   in a separate message when 80% of one or more of\
    \ their lease lives\n   have elapsed.)  When refreshing multiple LLQs simultaneously,\
    \ the\n   message contains multiple questions and a single OPT pseudo-RR with\n\
    \   multiple LLQ OPTIONS, one per question, with the LLQ OPTIONS in the\n   same\
    \ order as the questions they correspond to.\n   The client SHOULD specify the\
    \ original LLQ-LEASE granted in the LLQ\n   response as the desired LLQ-LEASE\
    \ in the Refresh Request.  If\n   refreshing multiple LLQs simultaneously, the\
    \ client SHOULD request\n   the same LLQ-LEASE for all LLQs being refreshed (with\
    \ the exception\n   of termination requests; see below).\n   To terminate an LLQ\
    \ prior to its scheduled expiration (for instance,\n   when the client terminates\
    \ a DNS-based Service Discovery browse\n   operation or when a client is about\
    \ to go to sleep or shut down), the\n   client specifies an LLQ-LEASE value of\
    \ 0.\n   The client MUST listen for an acknowledgment from the server.  The\n\
    \   client MAY retry up to two more times (for a total of 3 attempts)\n   before\
    \ considering the server down or unreachable.  The client MUST\n   NOT retry a\
    \ first time before 90% of the LLQ-LEASE has expired and\n   MUST NOT retry again\
    \ before 95% of the LLQ-LEASE has expired.  If the\n   server is determined to\
    \ be down, the client MAY periodically attempt\n   to re-establish the LLQ via\
    \ an LLQ Setup Request message.  The client\n   MUST NOT attempt the LLQ Setup\
    \ Request more than once per hour.\n"
- title: 7.2.  LLQ Refresh Acknowledgment
  contents:
  - "7.2.  LLQ Refresh Acknowledgment\n   Upon receiving an LLQ Refresh message, a\
    \ server MUST send an\n   acknowledgment of the Refresh.  This acknowledgment\
    \ is formatted like\n   the \"ACK + Answers\" message described in Section 5.2.4,\
    \ but with the\n   following variations:\n   *  It contains no answers.\n   *\
    \  The LLQ-OPCODE is set to LLQ-REFRESH.\n   *  NO-SUCH-LLQ MUST be returned as\
    \ an error code if the client\n      attempts to refresh an expired or non-existent\
    \ LLQ (as determined\n      by the LLQ-ID in the request).\n   *  The LLQ-ID in\
    \ the acknowledgment is set to the LLQ-ID in the\n      request.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   In datagram-based protocols (i.e., protocols\
    \ running over UDP, or\n   directly over IP, or similar), servers may be susceptible\
    \ to denial-\n   of-service (DoS) attacks, and clients may be subjected to packet\n\
    \   storms.  Carefully designed mechanisms are needed to limit potential\n   for\
    \ these attacks.\n   Note: This section contains no new protocol elements -- it\
    \ serves\n   only to explain the rationale behind protocol elements described\n\
    \   above as they relate to security.\n"
- title: 8.1.  Server DoS
  contents:
  - "8.1.  Server DoS\n   LLQs require that servers be stateful, maintaining entries\
    \ for each\n   LLQ over a potentially long period of time.  If unbounded in\n\
    \   quantity, these entries may overload the server.  By returning\n   SERV-FULL\
    \ in Setup Challenges, the server may limit the maximum\n   number of LLQs it\
    \ maintains.  Additionally, the server may return\n   SERV-FULL to limit the number\
    \ of LLQs requested for a single name and\n   type, or by a single client.  This\
    \ throttling may be in the form of a\n   hard limit, or, preferably, by token-bucket\
    \ rate limiting.  Such rate\n   limiting should occur rarely in normal use and\
    \ is intended to prevent\n   DoS attacks -- thus, it is not built into the protocol\
    \ explicitly but\n   is instead implemented at the discretion of an administrator\
    \ via the\n   SERV-FULL error and the LLQ-LEASE field to indicate a retry time\
    \ to\n   the client.\n"
- title: 8.2.  Client Packet Storms
  contents:
  - "8.2.  Client Packet Storms\n   In addition to protecting the server from DoS\
    \ attacks, the LLQ\n   protocol limits the ability of a malicious host to cause\
    \ the server\n   to flood a client with packets.  This is achieved via the four-way\n\
    \   handshake upon setup, demonstrating reachability and willingness of\n   the\
    \ client to participate, and by requiring that gratuitous responses\n   be ACK'd\
    \ by the client.\n   Additionally, rate limiting by LLQ client address, as described\
    \ in\n   Section 8.1, serves to limit the number of packets that can be\n   delivered\
    \ to an unsuspecting client.\n"
- title: 8.3.  Spoofing
  contents:
  - "8.3.  Spoofing\n   A large random ID greatly reduces the risk of an off-path\
    \ attacker\n   sending spoof packets to the client (containing spoof events) or\
    \ to\n   the server (containing phony requests or refreshes).\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   The EDNS(0) OPTION CODE 1 has already been assigned\
    \ for this DNS\n   extension.  IANA has updated the record in the \"DNS EDNS0\
    \ Option\n   Codes (OPT)\" registry from \"On-hold\" to \"Optional\" and has set\
    \ the\n   reference to this document.\n   TCP and UDP ports 5352 have already\
    \ been assigned for LLQ.  IANA has\n   added a reference to this document.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC1035]  Mockapetris, P., \"Domain names -\
    \ implementation and\n              specification\", STD 13, RFC 1035, DOI 10.17487/RFC1035,\n\
    \              November 1987, <https://www.rfc-editor.org/info/rfc1035>.\n   [RFC2119]\
    \  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement\
    \ Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n\
    \              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC2782]  Gulbrandsen,\
    \ A., Vixie, P., and L. Esibov, \"A DNS RR for\n              specifying the location\
    \ of services (DNS SRV)\", RFC 2782,\n              DOI 10.17487/RFC2782, February\
    \ 2000,\n              <https://www.rfc-editor.org/info/rfc2782>.\n   [RFC6891]\
    \  Damas, J., Graff, M., and P. Vixie, \"Extension Mechanisms\n              for\
    \ DNS (EDNS(0))\", STD 75, RFC 6891,\n              DOI 10.17487/RFC6891, April\
    \ 2013,\n              <https://www.rfc-editor.org/info/rfc6891>.\n   [RFC8174]\
    \  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119\
    \ Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,\
    \ <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8765]  Pusateri, T. and S.\
    \ Cheshire, \"DNS Push Notifications\",\n              RFC 8765, DOI 10.17487/RFC8765,\
    \ June 2020,\n              <https://www.rfc-editor.org/info/rfc8765>.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [RFC2136]  Vixie, P., Ed., Thomson, S., Rekhter,\
    \ Y., and J. Bound,\n              \"Dynamic Updates in the Domain Name System\
    \ (DNS UPDATE)\",\n              RFC 2136, DOI 10.17487/RFC2136, April 1997,\n\
    \              <https://www.rfc-editor.org/info/rfc2136>.\n   [RFC4787]  Audet,\
    \ F., Ed. and C. Jennings, \"Network Address\n              Translation (NAT)\
    \ Behavioral Requirements for Unicast\n              UDP\", BCP 127, RFC 4787,\
    \ DOI 10.17487/RFC4787, January\n              2007, <https://www.rfc-editor.org/info/rfc4787>.\n\
    \   [RFC4953]  Touch, J., \"Defending TCP Against Spoofing Attacks\",\n      \
    \        RFC 4953, DOI 10.17487/RFC4953, July 2007,\n              <https://www.rfc-editor.org/info/rfc4953>.\n\
    \   [RFC5382]  Guha, S., Ed., Biswas, K., Ford, B., Sivakumar, S., and P.\n  \
    \            Srisuresh, \"NAT Behavioral Requirements for TCP\", BCP 142,\n  \
    \            RFC 5382, DOI 10.17487/RFC5382, October 2008,\n              <https://www.rfc-editor.org/info/rfc5382>.\n\
    \   [RFC6281]  Cheshire, S., Zhu, Z., Wakikawa, R., and L. Zhang,\n          \
    \    \"Understanding Apple's Back to My Mac (BTMM) Service\",\n              RFC\
    \ 6281, DOI 10.17487/RFC6281, June 2011,\n              <https://www.rfc-editor.org/info/rfc6281>.\n\
    \   [RFC6762]  Cheshire, S. and M. Krochmal, \"Multicast DNS\", RFC 6762,\n  \
    \            DOI 10.17487/RFC6762, February 2013,\n              <https://www.rfc-editor.org/info/rfc6762>.\n\
    \   [RFC6763]  Cheshire, S. and M. Krochmal, \"DNS-Based Service\n           \
    \   Discovery\", RFC 6763, DOI 10.17487/RFC6763, February 2013,\n            \
    \  <https://www.rfc-editor.org/info/rfc6763>.\n   [RFC6886]  Cheshire, S. and\
    \ M. Krochmal, \"NAT Port Mapping Protocol\n              (NAT-PMP)\", RFC 6886,\
    \ DOI 10.17487/RFC6886, April 2013,\n              <https://www.rfc-editor.org/info/rfc6886>.\n\
    \   [RFC6887]  Wing, D., Ed., Cheshire, S., Boucadair, M., Penno, R., and\n  \
    \            P. Selkirk, \"Port Control Protocol (PCP)\", RFC 6887,\n        \
    \      DOI 10.17487/RFC6887, April 2013,\n              <https://www.rfc-editor.org/info/rfc6887>.\n\
    \   [RFC7857]  Penno, R., Perreault, S., Boucadair, M., Ed., Sivakumar,\n    \
    \          S., and K. Naito, \"Updates to Network Address Translation\n      \
    \        (NAT) Behavioral Requirements\", BCP 127, RFC 7857,\n              DOI\
    \ 10.17487/RFC7857, April 2016,\n              <https://www.rfc-editor.org/info/rfc7857>.\n\
    \   [RFC8490]  Bellis, R., Cheshire, S., Dickinson, J., Dickinson, S.,\n     \
    \         Lemon, T., and T. Pusateri, \"DNS Stateful Operations\",\n         \
    \     RFC 8490, DOI 10.17487/RFC8490, March 2019,\n              <https://www.rfc-editor.org/info/rfc8490>.\n\
    \   [SYN]      Eddy, W., \"Defenses Against TCP SYN Flooding Attacks\",\n    \
    \          Volume 9, Number 4, The Internet Protocol Journal, Cisco\n        \
    \      Systems, December 2006,\n              <https://www.cisco.com/web/about/ac123/ac147/\n\
    \              archived_issues/ipj_9-4/ipj_9-4.pdf>.\n"
- title: Appendix A.  Problems with the LLQ Protocol
  contents:
  - "Appendix A.  Problems with the LLQ Protocol\n   In the course of using LLQ since\
    \ 2005, some problems were discovered.\n   Since no further work is being done\
    \ on the LLQ protocol, this LLQ\n   specification will not be updated to remedy\
    \ these problems.\n   LLQ's IETF Standards Track successor, \"DNS Push Notifications\"\
    \n   [RFC8765], does not suffer from these problems, so all existing LLQ\n   implementations\
    \ are RECOMMENDED to migrate to using DNS Push\n   Notifications, and all new\
    \ implementations are RECOMMENDED to\n   implement DNS Push Notifications instead\
    \ of LLQ.\n   Known problems with LLQ are documented here as a cautionary tale\n\
    \   about the challenges of building an application protocol directly\n   using\
    \ datagrams (like IP or UDP) without the benefit of a mature and\n   thoroughly\
    \ reviewed intervening transport layer (such as TCP or\n   QUIC).\n   An LLQ \"\
    Setup Challenge\" message from server to client is identical\n   to an LLQ \"\
    ACK + Answers\" message from server to client when there\n   are no current answers\
    \ for the query.  If there is packet loss,\n   retransmission, and duplication\
    \ in the network, then a duplicated\n   \"Setup Challenge\" message arriving late\
    \ at the client would look like\n   an \"ACK + Answers\" message with no answers,\
    \ causing the client to\n   clear its cache of any records matching the query.\n\
    \   Section 5.1 of this LLQ specification states, \"Servers MUST NOT\n   garbage\
    \ collect LLQs that fail to complete the four-way handshake\n   until the initially\
    \ granted LLQ-LEASE has elapsed.\"  This is probably\n   a mistake since it exposes\
    \ LLQ servers to an easy resource-exhaustion\n   denial-of-service attack.  LLQ's\
    \ replacement, DNS Push Notifications\n   [RFC8765], is built using DNS Stateful\
    \ Operations [RFC8490], which\n   uses TLS over TCP; a benefit of building on\
    \ TCP is that there are\n   already established industry best practices to guard\
    \ against SYN\n   flooding and similar attacks [SYN] [RFC4953].\n   The attempts\
    \ here to pack multiple questions into a single UDP/IP\n   packet for efficiency\
    \ are awkward and lead to error-prone programming\n   to deal with cases where\
    \ some requests in a packet succeed and other\n   requests in the same packet\
    \ fail.  Fully specifying the correct\n   handling in all possible cases would\
    \ be a lot of work to document, a\n   lot of work to implement, and even more\
    \ work to thoroughly test.  DNS\n   Push Notifications [RFC8765] avoids this problem\
    \ by using an\n   underlying stream protocol (TLS/TCP) to deal with packing small\n\
    \   multiple messages into larger IP packets for efficiency.\n   In some cases,\
    \ initial LLQ answers are delivered in the \"ACK +\n   Answers\" message, and\
    \ in other cases, such as when all the initial\n   answers will not fit in a single\
    \ IP packet, some of the initial\n   answers are delivered in a subsequent \"\
    Add Event\" message.  Having\n   two different ways to accomplish the same thing\
    \ increases the\n   possibility for programming errors.  DNS Push Notifications\
    \ [RFC8765]\n   corrects this error by having only one single consistent way to\n\
    \   deliver results.\n   LLQ is built using UDP, and because UDP has no standardized\
    \ way of\n   indicating the start and end of a session, firewalls and NAT gateways\n\
    \   tend to be fairly aggressive about recycling UDP mappings that they\n   believe\
    \ to be disused [RFC4787] [RFC5382] [RFC7857].  Using a high\n   keepalive traffic\
    \ rate to maintain firewall or NAT mapping state\n   could remedy this but would\
    \ largely defeat the purpose of using LLQ\n   in the first place, which is to\
    \ provide efficient change notification\n   without wasteful polling.  Because\
    \ of this, existing LLQ clients use\n   the NAT Port Mapping Protocol (NAT-PMP)\
    \ [RFC6886] and/or Port Control\n   Protocol (PCP) [RFC6887] to establish longer\
    \ port mapping lifetimes.\n   This solves the problem but adds extra complexity\
    \ and doesn't work\n   with firewalls and NAT gateways that don't support NAT-PMP\
    \ or PCP.\n   By using TCP instead of UDP, the DNS Push Notifications protocol\n\
    \   benefits from better longevity of sessions through firewalls and NAT\n   gateways\
    \ that don't support NAT-PMP or PCP.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The concepts described in this document were originally explored,\n\
    \   developed, and implemented with help from Chris Sharp and Roger\n   Pantos.\n\
    \   Kiren Sekar made significant contributions to the first draft of this\n  \
    \ document and he wrote much of the code for the implementation of LLQ\n   that\
    \ shipped in Mac OS X 10.4 Tiger in April 2005.\n   Thanks to Independent Stream\
    \ Editor Adrian Farrel for his support and\n   assistance in the publication of\
    \ this RFC.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Stuart Cheshire\n   Apple Inc.\n   One Apple Park Way\n\
    \   Cupertino, CA 95014\n   United States of America\n   Phone: +1 (408) 996-1010\n\
    \   Email: cheshire@apple.com\n   Marc Krochmal\n   Apple Inc.\n   One Apple Park\
    \ Way\n   Cupertino, CA 95014\n   United States of America\n"
