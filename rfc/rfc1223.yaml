- title: __initial_text__
  contents:
  - '      OSI CLNS and LLC1 Protocols on Network Systems HYPERchannel

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   The intent of this document is to provide a complete\
    \ discussion of\n   the protocols and techniques used to transmit OSI CLNS and\
    \ LLC1\n   datagrams (and any associated higher level protocols) on Network\n\
    \   Systems Corporation's HYPERchannel equipment.  This document is\n   intended\
    \ for network planners and implementers who are already\n   familiar with the\
    \ OSI protocol suite and the techniques used to carry\n   OSI traffic on standard\
    \ networks such as 802.3.\n   This memo provides information for the Internet\
    \ community.  It does\n   not specify an Internet standard.  Distribution of this\
    \ memo is\n   unlimited.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n     Goals of this Document   . . . . . . . . . . . . . .\
    \ . . . . . . . 1\n     HYPERchannel Network Messages  . . . . . . . . . . . .\
    \ . . . . . . 2\n       Message Proper Header  . . . . . . . . . . . . . . . .\
    \ . . . . . 3\n       TO Addresses and Open Driver Architecture  . . . . . . .\
    \ . . . . 8\n     Broadcasting   . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . 9\n       ES-IS  . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . 9\n       IS-IS  . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \  11\n     References   . . . . . . . . . . . . . . . . . . . . . . . . . . \
    \ 12\n     Security Considerations  . . . . . . . . . . . . . . . . . . . .  12\n\
    \     Author's Address . . . . . . . . . . . . . . . . . . . . . . . .  12\n"
- title: Goals of this Document
  contents:
  - "Goals of this Document\n   In this document, we have three major technical objectives:\n\
    \   1.  To standardize the encapsulation of LLC1 packets over\n       HYPERchannel.\
    \  The format will be used for OSI CLNS and for\n       any other protocols using\
    \ LLC1 over HYPERchannel.  (Note\n       that if one desires to use the LLC1/SNAP\
    \ combination for\n       TCP/IP, this is the format to use.  This represents\
    \ an\n       alternative to the native mode for TCP/IP over HYPERchannel,\n  \
    \     allowing for sharing the medium at the LLC1 layer.)\n   2.  To describe\
    \ how multicast protocols such as ES-IS and IS-IS shall\n       operate over HYPERchannel.\
    \  As a medium, HYPERchannel does not\n       support either broadcast or multicast.\
    \  Therefore, special\n       techniques are needed to handle these protocols.\
    \  Note that these\n       techniques do not allow general multicast, although\
    \ any specific\n       problem may be solved by a generalization of these methods.\n\
    \   3.  To make use of a standardized \"message type\" field in bytes\n      \
    \ 8 and 9 of the HYPERchannel network message.  To permit better\n       interoperability,\
    \ NSC maintains a \"network protocol registry\"\n       where any interested party\
    \ may obtain a unique value in byte 8\n       (or bytes 8 and 9) for their own\
    \ public, private, commercial or\n       proprietary protocol.  Lists of assigned\
    \ protocol type numbers\n       and their \"owners\" would be periodically published\
    \ by NSC and\n       are available to interested parties.\n"
- title: HYPERchannel Network Messages
  contents:
  - "HYPERchannel Network Messages\n   Unlike most datagram delivery systems, the\
    \ HYPERchannel network\n   message consists of two parts:\n           Message\
    \ Proper\n          +--------------------+\n          |                    |\n\
    \          |                    |\n          |                    |\n        \
    \  |     16-64 bytes    |\n          |                    |\n          |     \
    \               |\n          |                    |\n          +--------------------+\n\
    \           Associated Data\n          +----------------------------------------------------+\n\
    \          |                                                    |\n          |\
    \                                                    |\n          |          \
    \                                          |\n          |                    \
    \                                |\n          |                              \
    \                      |\n          |                                        \
    \            |\n          |           Unlimited length                       \
    \  |\n          |                                                    |\n     \
    \     |                                                    |\n          |    \
    \                                                |\n          |              \
    \                                      |\n          |                        \
    \                            |\n          |                                  \
    \                  |\n          +----------------------------------------------------+\n\
    \   The first part is a message header that can be up to 64 bytes in\n   length.\
    \  The first 16 bytes contain information required for the\n   delivery of the\
    \ entire message, and the remainder can be used by\n   higher level protocols.\
    \  The second part of the message, the\n   \"Associated Data,\" can be optionally\
    \ included with the message\n   proper.  In most cases (transmission over HYPERchannel-50\
    \ trunks) the\n   length of the associated data is literally unlimited.  Others\
    \ (such\n   as HYPERchannel-10 or transmission within a local HYPERchannel-50\n\
    \   A400 adapter) limit the size of the Associated Data to 4K bytes.  If\n   the\
    \ information sent can be contained within the Message Proper, then\n   the Associated\
    \ Data need not be sent.\n   HYPERchannel lower link protocols treat messages\
    \ with and without\n   Associated Data quite differently;  \"Message only\" transmissions\
    \ are\n   sent using abbreviated protocols and can be queued in the receiving\n\
    \   network adapter, thus minimizing the elapsed time needed to send and\n   receive\
    \ the messages.  When associated data is provided, the\n   HYPERchannel-50 adapters\
    \ free their logical resources towards driving\n   the host interface and coaxial\
    \ trunks at maximum speed, so that data\n   can flow through the transmitting\
    \ channel, the coaxial cable, and the\n   receiving channel concurrently.  Thus\
    \ HYPERchannel-50 can approach\n   the nominal burst speed of the computer host\
    \ interface when sending\n   large data blocks over an extended period.\n"
- title: Message Proper Header
  contents:
  - "Message Proper Header\n   The first 16 bytes of the network Message Proper are\
    \ examined by the\n   network adapters to control delivery of the network message.\
    \  The\n   message format is as follows:\n  byte   Message Proper\n       +------------------------------------------------------------+\n\
    \    0  |      Trunks to Try           |        Message Flags        |\n     \
    \  |   TO trunks  |  FROM trunks  |                         |A/D|\n       +--------------+---------------+-------------------------+---+\n\
    \    2  |         TO Domain #          |         TO Network #        |\n     \
    \  |                              |                             |\n       +------------------------------+-----------------------------+\n\
    \    4  |         TO Unit #            |        Logical To           |\n     \
    \  |                              |         (port number)       |\n       +------------------------------+-----------------------------+\n\
    \    6  |        From Unit #           |        Logical From         |\n     \
    \  |                              |         (port number)       |\n       +------------------------------+-----------------------------+\n\
    \    8  |                         Message type                       |\n     \
    \  |                           0x0B01                           |\n       +------------------------------+-----------------------------+\n\
    \    10 |          FROM Domain #       |       FROM Network #        |\n     \
    \  |                              |                             |\n       +------------------------------+-----------------------------+\n\
    \    12 |          True Unit           |         age count           |\n     \
    \  |                              |                             |\n       +------------------------------+-----------------------------+\n\
    \    14 |      Header End Offset       |      Next Header Offset     |\n     \
    \  |        (16)                  |        (16)                 |\n       +------------------------------+-----------------------------+\n\
    \    16 |   LLC1 destination SAP       |   LLC1 source SAP           |\n     \
    \  |      (0xFE for CLNP)         |      (0xFE for CLNP)        |\n       +------------------------------+-----------------------------+\n\
    \    18 |   LLC1 function code         |                             |\n     \
    \  |      (0x03 for normal data)  |Start of upper layer protocol|\n       +------------------------------+\
    \                             +\n    20 |        from bytes 19-63 of the message\
    \ proper              |\n       |        and continuing in the associated data\
    \               |\n       |        (For OSI this is CLNP, then transport etc.)\
    \         |\n       +------------------------------+-----------------------------+\n"
- title: Trunks to Try
  contents:
  - "Trunks to Try\n   Consists of two four bit masks indicating which of four possible\n\
    \   HYPERchannel-50 coaxial data trunks are to be used to transmit the\n   message\
    \ and to return it.  If a bit in the mask is ON, then the\n   adapter firmware\
    \ will logically AND it with the mask of installed\n   trunk interfaces and use\
    \ the result as a candidate list of\n   interfaces.\n   Whenever one of the internal\
    \ \"frames\" are sent to communicate with\n   the destination adapter, the transmission\
    \ hardware electronically\n   selects the first non-busy trunk out of the list\
    \ of candidates.  Thus\n   selection of a data trunk is best performed by the\
    \ adapter itself\n   rather than by the host.  Dedicating trunks to specific applications\n\
    \   only makes sense in very critical real time applications such as\n   streaming\
    \ data directly from high speed overrunable peripherals.\n   A second Trunk mask\
    \ is provided for the receiving adapter when it\n   sends frames back to the transmitter,\
    \ as it is possible to build\n   asymmetric configurations of data trunks where\
    \ trunk 1 on one box is\n   connected to the trunk 3 interface of a second.  Such\
    \ configurations\n   are strongly discouraged, but the addressing structure supports\
    \ it if\n   needed.\n   The \"trunks to try\" field is only used by HYPERchannel-50.\
    \  To assure\n   maximum interoperability, a value of 0xFF should be placed in\
    \ this\n   field to assure delivery over any technology.  The newer DX series\n\
    \   units determine the trunk mask on their own, but this field is\n   preserved\
    \ for use with A series equipment.\n"
- title: Message Flags
  contents:
  - "Message Flags\n   Contains options in message delivery.  There are several bits\
    \ defined\n   by the hardware.  However, only the A/D bit will be described here.\n\
    \   Other bits are used only for special diagnostic or management\n   purposes.\
    \  If there is a need to set them, check the specific Network\n   Systems manuals\
    \ on their meanings.  In the absence of such need, all\n   bits other than A/D\
    \ shall be set to zero on transmission, and not\n   examined upon receipt of a\
    \ message.\n   ASSOCIATED DATA PRESENT (A/D) is ON if an Associated Data block\n\
    \   follows the Message Proper.  0 if only a message proper is present in\n  \
    \ the network message.  The value of this bit is enforced by the\n   network adapter\
    \ firmware.\n"
- title: TO Domain Number
  contents:
  - "TO Domain Number\n   This is the most significant byte of the four byte hyperchannel\n\
    \   address.  It selects an NSC addressing domain, among a set of\n   domains.\
    \  If this and the network number both refer to the local\n   domain and network,\
    \ they may be set to 0.\n"
- title: TO Network Number
  contents:
  - "TO Network Number\n   This is the destination network number.  It identifies\
    \ the network\n   within the selected domain, where the destination unit resides.\
    \  If\n   the destination is in the local domain and network, both the TO\n  \
    \ domain and TO network numbers may be set to zero.\n"
- title: TO Unit
  contents:
  - "TO Unit\n   Upon arrival at the destination domain and network, this is the unit\n\
    \   number of the destination HYPERchannel adapter.  The combination of\n   Domain,\
    \ Network, and Unit uniquely identify a single adapter in a\n   HYPERchannel network.\
    \  For compatibility with existing HYPERchannel\n   equipment, when sending a\
    \ message to a destination outside the local\n   domain and network, set this\
    \ byte to 0, and store the actual\n   destination unit number in the True Unit\
    \ field.\n"
- title: Logical To
  contents:
  - "Logical To\n   This field further identifies which process the message is intended\n\
    \   for.  With some hardware, the bottom bits select a machine from among\n  \
    \ several.  When sending a message to an N400, the bottom two bits of\n   this\
    \ field select which of four attached hosts the message is\n   destined for. \
    \ Within a host, the logical to field selects a\n   destination process.  This\
    \ is used in conjunction with the Message\n   Type field to insure that messages\
    \ are delivered to the correct\n   place.  The Logical TO field identifies a process,\
    \ which then checks\n   the Message Type to insure that it understands the message.\
    \  This\n   also allows for running two processes, both of which understand the\n\
    \   same protocol.\n"
- title: From Unit
  contents:
  - "From Unit\n   This identifies the Unit number from which this message was sent.\n"
- title: Logical From
  contents:
  - "Logical From\n   This identifies the host and process who originated this message.\n"
- title: Message Type
  contents:
  - "Message Type\n   The following two bytes are reserved for NSC.  Users have been\n\
    \   encouraged to put a zero in byte 8 and anything at all in byte 9 so\n   as\
    \ to not conflict with internal processing of messages by NSC\n   firmware.  In\
    \ the past, this field has been loosely defined as\n   carrying information of\
    \ interest to NSC equipment carrying the\n   message and not as a formal protocol\
    \ type field.  For example, an\n   0xFF00 in bytes 8 and 9 of the message will\
    \ cause the receiving\n   adapter to loop back the message without delivering\
    \ it to the\n   attached host.\n   NSC now uses both bytes 8 and 9 as a formal\
    \ \"protocol type\"\n   designator.  Major protocols will be assigned a unique\
    \ value in byte\n   8 that will (among good citizens) not duplicate a value generated\
    \ by\n   a different protocol.  Minor protocols will have 16 bit values\n   assigned\
    \ to them so that we won't run out when 256 protocols turn up.\n   Any interested\
    \ party could obtain a protocol number or numbers by\n   application to NSC. \
    \ In this document, protocol types specific to OSI\n   LLC1 are assigned.  Specifically,\
    \ the sixteen bit value 0x0B01 in\n   bytes 8 and 9 shall identify LLC1 packets.\n"
- title: True Unit
  contents:
  - "True Unit\n   This field is used to handle addressing outside of the local domain\n\
    \   and network.  For compatibility with previous NSC hardware, one may\n   not\
    \ put the destination unit number in the TO Unit field if the\n   destination\
    \ domain or network are not the local ones.  In that case,\n   one puts zero in\
    \ the TO Unit field, and puts the destination Unit\n   number into the TRUE unit\
    \ field.  NSC Link devices will adjust the\n   message when it arrives at the\
    \ destination domain and network so that\n   the destination unit number appears\
    \ in the TO Unit field.\n"
- title: Age Count
  contents:
  - "Age Count\n   This field serves as a \"time to live\" in that it prevents datagrams\n\
    \   from endlessly circulating about in an improperly configured network.\n  \
    \ Each time a message with this format passes through a bridge, the Age\n   Count\
    \ is decremented by one.  When the result is zero, the message is\n   discarded\
    \ by the bridge. Therefore, this byte should be set to 255\n   when a message\
    \ is originated, and ignored when a message is received.\n"
- title: Next Header Offset and Header End Offset
  contents:
  - "Next Header Offset and Header End Offset\n   These fields are used by the hardware\
    \ to determine if any special\n   addressing is present.  No special addressing\
    \ forms are permitted in\n   conjunction with LLC1.  Therefore, these fields shall\
    \ always be set\n   to 16.  Receivers may count on the LLC1 information beginning\
    \ at\n   offset 16 in the message proper.\n"
- title: LLC1 Data
  contents:
  - "LLC1 Data\n   The LLC1 Information begins at byte 16 of the message, for 3 bytes.\n\
    \   The contains the LLC1 destination and source SAPs, followed by the\n   LLC1\
    \ type identifier (usually 03 for unnumbered information.)\n"
- title: Higher Layer Protocol Data
  contents:
  - "Higher Layer Protocol Data\n   Higher layer protocol information follows immediately\
    \ after the LLC1\n   header in the message proper, and flows into the associated\
    \ data.\n   For purposes of this document, this is OSI CLNP, but it may be any\n\
    \   protocol which uses LLC1.\n"
- title: TO Addresses and Open Driver Architecture
  contents:
  - "TO Addresses and Open Driver Architecture\n   Since not all 16 bits of the TO\
    \ address are used for the physical\n   delivery of the network message, the remainder\
    \ are considered\n   \"logical\" in that their meaning is physically determined\
    \ by host\n   computer software or (in cases such as the FIPS data channel) by\n\
    \   hardware in the host interface.\n   Since HYPERchannel is and will be used\
    \ to support a large variety of\n   general and special purpose protocols, it\
    \ is desirable that several\n   independent protocol servers be able to independently\
    \ share the\n   HYPERchannel network interface.  The implementation of many of\
    \ NSC's\n   device drivers as well as those of other parties (such as Cray\n \
    \  Research) support this service.  Each protocol server that wishes to\n   send\
    \ or receive HYPERchannel network messages logically connects to a\n   HYPERchannel\
    \ device driver by specifying the complete 16 bit TO\n   address it will own in\
    \ the sense that any network message with that\n   TO address will be delivered\
    \ to that protocol server.\n   The logical TO field serves a function similar\
    \ to the TYPE byte in\n   the Ethernet message header, but differs from it in\
    \ that the width of\n   the logical TO field varies from host to host, and that\
    \ no values of\n   the logical TO address are reserved for particular protocols.\
    \  On the\n   other hand, it is possible to have several \"identical\" protocols\n\
    \   (such as two independent copies of OSI with different HYPERchannel\n   addresses)\
    \ sharing the same physical HYPERchannel interface.  This\n   makes NSC's addressing\
    \ approach identical to the OSI concept that the\n   protocol server to reach\
    \ is embedded within the address, rather than\n   the IP notion of addressing\
    \ a \"host\" and identifying a server through\n   a message type.\n   Since the\
    \ HYPERchannel header also has a \"message type\" field, there\n   is some ambiguity\
    \ concerning the respective roles of the message type\n   and logical TO fields:\n\
    \   o   The logical TO field is always used to identify the protocol server\n\
    \       which will receive the message.  Once a server has specified the\n   \
    \    complete TO address for the messages it wishes to receive, the\n       message\
    \ will not be delivered to a different protocol server\n       regardless of the\
    \ contents of the message type field.\n   o   Although the type field cannot change\
    \ the protocol server at the\n       final destination of the message, the type\
    \ field can be used by\n       intermediate processes on the network to process\
    \ the message\n       before it reaches the server destination.   An obvious example\n\
    \       is the 0xFF00 message loopback type function, where network\n       processing\
    \ to loop back the message results in nondelivery to\n       the TO address. \
    \ In the future, intermediate nodes may process\n       in transit messages based\
    \ on the message type only for purposes\n       such as security validation, aging\
    \ of certain datagrams, and\n       network management.\n"
- title: Broadcasting
  contents:
  - "Broadcasting\n   NSC message forwarding protocols use low level link protocols\
    \ to\n   negotiate transmission of a message to its next destination on the\n\
    \   network.  Furthermore, NSC network boxes often fan out so that\n   several\
    \ hosts share the same network transmission equipment as in the\n   A400 adapter.\
    \  Both these characteristics mean that providing a\n   genuine broadcast capability\
    \ is not a trivial task, and in fact no\n   NSC technology supports a broadcast\
    \ capability.\n   However, the OSI ES-IS and IS-IS protocols require a broadcast\n\
    \   capability to operate.  Therefore, in order to support these\n   protocols,\
    \ some form of broadcast emulation must be used.\n"
- title: ES-IS
  contents:
  - "ES-IS\n   The End System to Intermediate System routing protocol is used by end\n\
    \   systems to decide where to send packets.  In the specified protocol,\n   multicast\
    \ messages are used so that end systems learn about\n   intermediate systems,\
    \ and intermediate systems learn about end\n   systems.  End systems normally\
    \ then transmit any packets, whose\n   correct mac destination is unknown, to\
    \ a random intermediate system\n   which then forwards the packet and tells the\
    \ originator where to send\n   future packets.\n   There are two situations which\
    \ are distinct but related for support\n   of this protocol over HYPERchannel.\
    \  These are distinguished by\n   whether or not there are any real intermediate\
    \ systems on the\n   HYPERchannel network.\n   ES-IS with Intermediate Systems\n\
    \      If there are one or more intermediate systems on the HYPERchannel,\n  \
    \    then the behavior is simply to emulate multicast.\n      END SYSTEM SUPPORT\
    \ Each end system is profiled with a list of\n      intermediate systems on the\
    \ HYPERchannel.  It is desirable but not\n      necessary that this list be complete,\
    \ as the future support for\n      IS-IS will forward the necessary information\
    \ to all the\n      intermediate systems.  Given the profiled list, whenever the\
    \ end\n      system wishes to originate an ESH packet (End System Hello), it\n\
    \      will send individual copies to each intermediate system it knows\n    \
    \  about.\n      On most systems, these individual packets should be spaced out\
    \ in\n      time so as not to interfere with the normal transmission of OSI\n\
    \      and other HYPERchannel messages.  For end systems, an inter-packet\n  \
    \    time of 0.1 seconds is probably appropriate.\n      Note that if the End\
    \ System receives ISH packets (Intermediate\n      System Hello) from an IS on\
    \ HYPERchannel not in its static list,\n      it should add that to the list of\
    \ systems it will send ESH packets\n      to.  The address of the new intermediate\
    \ system should be\n      remembered for the holding time in the ISH, just as\
    \ with the\n      normal operation of ES-IS.\n      INTERMEDIATE SYSTEMS Intermediate\
    \ systems on the HYPERchannel\n      shall also be profiled with the addresses\
    \ of all the other\n      intermediate systems on the HYPERchannel.  This list\
    \ is used here\n      and in the IS-IS protocol.  For the IS-IS protocol operation,\
    \ it\n      is important that the list be complete.\n      The list of intermediate\
    \ systems is used, with ES-IS, by an\n      intermediate system only in that it\
    \ probably is also an end\n      system.  As such, it must send ESH packets to\
    \ all the other\n      intermediate systems.  (The presumption that an IS is also\
    \ an ES\n      is driven by the long term requirements for network management.\n\
    \      If you have an upper layer stack, such as is required for CMIP,\n     \
    \ you are an end system.)\n      Each intermediate system will keep a list of\
    \ the end systems it\n      knows about.  These are the systems it has received\
    \ ESH packets\n      from.  Whenever the IS sends ISH packets,  it sends them\n\
    \      individually to each ES it has heard from.  In addition, it sends\n   \
    \   the ISH to any end systems which it believes, on the basis of IS-\n      IS\
    \ or other methods, are on the HYPERchannel.\n      Note that these packets must\
    \ also be spread out in time to avoid\n      causing congestion.  However, given\
    \ that the number of these is\n      much higher than the number generated by\
    \ End Systems, the time\n      between transmissions should be selected by the\
    \ IS developer to\n      fit the sustainable I/O rates of the system.  Make sure\
    \ you can\n      get at the very least one, and preferably two or three, useful\n\
    \      packets in between each ISH copy being sent.\n   ES-IS without an Intermediate\
    \ System\n      When there is no intermediate system, one or more systems must\n\
    \      serve as address managers.  These are referred to in draft ISO OSI\n  \
    \    documents as SNARE, for SubNetwork Address Resolution Entities.\n      END\
    \ SYSTEM SUPPORT As in the previous case, each end system must\n      be profiled\
    \ with a list of intermediate systems.  This list must\n      contain all of the\
    \ systems which will be serving as address\n      managers on this network.  The\
    \ reason for this is that, since the\n      address managers are not true intermediate\
    \ systems, they are not\n      running IS-IS and will not be exchanging lists\
    \ of end systems they\n      know about. There may well be several systems for\
    \ redundancy and\n      reliability.\n      SNARE The systems selected as address\
    \ managers must appear, to the\n      other end systems, as intermediate systems.\
    \  This means that each\n      one must send out ISH packets to all the end systems\
    \ which it\n      hears from.  Each of these systems must record all the information\n\
    \      from the ESH packets they receive.  When a packet for an End\n      System\
    \ is received at a SNARE, it must behave as an IS.\n      Specifically, it must\
    \ forward the packet to the correct\n      destination end system, and send a\
    \ redirect message back to the\n      originator, informing the originator of\
    \ the correct SNPA\n      (HYPERchannel address) for the end system.\n      Note\
    \ that these systems are certainly end systems as well, and\n      must send ESH\
    \ packets to all the intermediate systems on the IS\n      list, which must be\
    \ complete.\n   ES-IS FORMAT SPECIFICATION\n      All ES-IS PDUS shall be formatted\
    \ as specified in ISO 9542.  They\n      are then sent using LLC1 and the encapsulation\
    \ specified earlier\n      in this document for transmitting LLC1 over HYPERchannel.\n\
    \      RD PDUS When generating Redirect pdus, which contain HYPERchannel\n   \
    \   SNPAs (addresses), the SNPA shall be represented in four bytes.\n      This\
    \ shall be used even on a small HYPERchannel network containing\n      only one\
    \ domain and one network number.\n      QC FUNCTION There is no support for the\
    \ ES-IS query configuration\n      capability when using HYPERchannel.  All systems\
    \ must have at\n      least one configured intermediate system, which shall be\
    \ either a\n      true IS or a SNARE.\n"
- title: IS-IS
  contents:
  - "IS-IS\n   The proposed IS-IS protocol for OSI (DP 10589) when run on a LAN\n\
    \   requires broadcast capability.  Because of the nature of the process\n   for\
    \ nominating the designated IS on a LAN, and other special features\n   of this\
    \ protocol, it is important never to partition the set of\n   intermediate systems\
    \ on a HYPERchannel network.\n   The implementation therefore is very simple.\
    \  An intermediate system\n   on HYPERchannel runs the IS-IS protocol directly.\
    \  However, when it\n   goes to send a message, it consults the profiled list\
    \ of all level 1\n   ISs on the HYPERchannel or of all level 2 ISs on the HYPERchannel,\n\
    \   and then sends individual copies of the message to each destination.\n   This\
    \ multiple transmission should be transparent to the IS-IS\n   protocol itself.\n\
    \   Note that as with ES-IS on an intermediate system, it is important to\n  \
    \ space out the individual message transmissions.  On most networks,\n   spacing\
    \ of 0.1 seconds will work well.\n"
- title: References
  contents:
  - 'References

    '
- title: +1+       ISO IS 9542 - End system to intermediate system routing
  contents:
  - "+1+       ISO IS 9542 - End system to intermediate system routing\n         \
    \ exchange protocol\n"
- title: +2+       ISO DP 10589 - Intermediate system to Intermediate system
  contents:
  - "+2+       ISO DP 10589 - Intermediate system to Intermediate system\n       \
    \   Infra-Domain routing exchange protocol\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Joel M. Halpern\n   Principal Engineer\n   Network Systems\
    \ Corporation MS033\n   7600 Boone Avenue North\n   Brooklyn Park, AN 55428\n\
    \   Phone: (612) 424-1606\n   Email: jmh@anubis.network.com\n"
