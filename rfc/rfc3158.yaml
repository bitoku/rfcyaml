- title: __initial_text__
  contents:
  - '                         RTP Testing Strategies

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes a possible testing strategy for RTP (real-time\n\
    \   transport protocol) implementations.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1 Introduction. . . . . . . . . . . . . . . . . . . . .\
    \ .  2\n   2 End systems . . . . . . . . . . . . . . . . . . . . . .  2\n    \
    \ 2.1  Media transport  . . . . . . . . . . . . . . . . .  3\n     2.2  RTP Header\
    \ Extension . . . . . . . . . . . . . . .  4\n     2.3  Basic RTCP   . . . . .\
    \ . . . . . . . . . . . . . .  4\n          2.3.1 Sender and receiver reports\
    \  . . . . . . . .  4\n          2.3.2 RTCP source description packets  . . .\
    \ . . .  6\n          2.3.3 RTCP BYE packets . . . . . . . . . . . . . .  7\n\
    \          2.3.4 Application defined RTCP packets . . . . . .  7\n     2.4  RTCP\
    \ transmission interval . . . . . . . . . . . .  7\n          2.4.1 Basic Behavior\
    \   . . . . . . . . . . . . . .  8\n          2.4.2 Step join backoff    . . .\
    \ . . . . . . . . .  9\n          2.4.3 Steady State Behavior    . . . . . . .\
    \ . . . 11\n          2.4.4 Reverse Reconsideration    . . . . . . . . . 12\n\
    \          2.4.5 BYE Reconsideration    . . . . . . . . . . . 13\n          2.4.6\
    \ Timing out members   . . . . . . . . . . . . 14\n          2.4.7 Rapid SR's\
    \   . . . . . . . . . . . . . . . . 15\n   3 RTP translators . . . . . . . . .\
    \ . . . . . . . . . . . 15\n   4 RTP mixers. . . . . . . . . . . . . . . . . .\
    \ . . . . . 17\n   5 SSRC collision detection. . . . . . . . . . . . . . . . 18\n\
    \   6 SSRC Randomization. . . . . . . . . . . . . . . . . . . 19\n   7 Security\
    \ Considerations . . . . . . . . . . . . . . . . 20\n   8 Authors' Addresses.\
    \ . . . . . . . . . . . . . . . . . . 20\n   9 References. . . . . . . . . . .\
    \ . . . . . . . . . . . . 21\n   Full Copyright Statement. . . . . . . . . . .\
    \ . . . . . . 22\n"
- title: 1 Introduction
  contents:
  - "1 Introduction\n   This memo describes a possible testing strategy for RTP [1]\n\
    \   implementations.  The tests are intended to help demonstrate\n   interoperability\
    \ of multiple implementations, and to illustrate\n   common implementation errors.\
    \  They are not intended to be an\n   exhaustive set of tests and passing these\
    \ tests does not necessarily\n   imply conformance to the complete RTP specification.\n"
- title: 2 End systems
  contents:
  - "2 End systems\n   The architecture for testing RTP end systems is shown in Figure\
    \ 1.\n                             +-----------------+\n                    +--------+\
    \ Test instrument +-----+\n                    |        +-----------------+  \
    \   |\n                    |                                |\n            +-------+--------+\
    \               +-------+--------+\n            |     First RTP  |           \
    \    |   Second RTP   |\n            | implementation |               | implementation\
    \ |\n            +----------------+               +----------------+\n       \
    \              Figure 1:  Testing architecture\n   Both RTP implementations send\
    \ packets to the test instrument, which\n   forwards packets from one implementation\
    \ to the other.  Unless\n   otherwise specified, packets are forwarded with no\
    \ additional delay\n   and without loss.  The test instrument is required to delay\
    \ or\n   discard packets in some of the tests.  The test instrument is\n   invisible\
    \ to the RTP implementations - it merely simulates poor\n   network conditions.\n\
    \   The test instrument is also capable of logging packet contents for\n   inspection\
    \ of their correctness.\n   A typical test setup might comprise three machines\
    \ on a single\n   Ethernet segment.  Two of these machines run the RTP implementations,\n\
    \   the third runs the test instrument.  The test instrument is an\n   application\
    \ level packet forwarder.  Both RTP implementations are\n   instructed to send\
    \ unicast RTP packets to the test instrument, which\n   forwards packets between\
    \ them.\n"
- title: 2.1 Media transport
  contents:
  - "2.1 Media transport\n   The aim of these tests is to show that basic media flows\
    \ can be\n   exchanged between the two RTP implementations.  The initial test\
    \ is\n   for the first RTP implementation to transmit and the second to\n   receive.\
    \  If this succeeds, the process is reversed, with the second\n   implementation\
    \ sending and the first receiving.\n   The receiving application should be able\
    \ to handle the following edge\n   cases, in addition to normal operation:\n \
    \     o  Verify reception of packets which contain padding.\n      o  Verify reception\
    \ of packets which have the marker bit set\n      o  Verify correct operation\
    \ during sequence number wrap-around.\n      o  Verify correct operation during\
    \ timestamp wrap-around.\n      o  Verify that the implementation correctly differentiates\
    \ packets\n         according to the payload type field.\n      o  Verify that\
    \ the implementation ignores packets with unsupported\n         payload types\n\
    \      o  Verify that the implementation can playout packets containing a\n  \
    \       CSRC list and non-zero CC field (see section 4).\n   The sending application\
    \ should be verified to correctly handle the\n   following edge cases:\n     \
    \ o  If padding is used, verify that the padding length indicator\n         (last\
    \ octet of the packet) is correctly set and that the length\n         of the data\
    \ section of the packet corresponds to that of this\n         particular payload\
    \ plus the padding.\n      o  Verify correct handling of the M bit, as defined\
    \ by the\n         profile.\n      o  Verify that the SSRC is chosen randomly.\n\
    \      o  Verify that the initial value of the sequence number is\n         randomly\
    \ selected.\n      o  Verify that the sequence number increments by one for each\n\
    \         packet sent.\n      o  Verify correct operation during sequence number\
    \ wrap-around.\n      o  Verify that the initial value of the timestamp is randomly\n\
    \         selected.\n      o  Verify correct increment of timestamp (dependent\
    \ on the payload\n         format).\n      o  Verify correct operation during\
    \ timestamp wrap-around.\n      o  Verify correct choice of payload type according\
    \ to the chosen\n         payload format, profile and any session level control\
    \ protocol.\n"
- title: 2.2 RTP Header Extension
  contents:
  - "2.2 RTP Header Extension\n   An RTP implementation which does not use an extended\
    \ header should be\n   able to process packets containing an extension header\
    \ by ignoring\n   the extension.\n   If an implementation makes use of the header\
    \ extension, it should be\n   verified that the profile specific field and the\
    \ length field of the\n   extension are set correctly, and that the length of\
    \ the packet is\n   consistent.\n"
- title: 2.3 Basic RTCP
  contents:
  - "2.3 Basic RTCP\n   An RTP implementation is required to send RTCP control packets\
    \ in\n   addition to data packets.  The architecture for testing basic RTCP\n\
    \   functions is that shown in Figure 1.\n"
- title: 2.3.1 Sender and receiver reports
  contents:
  - "2.3.1 Sender and receiver reports\n   The first test requires both implementations\
    \ to be run, but neither\n   sends data.  It should be verified that RTCP packets\
    \ are generated by\n   each implementation, and that those packets are correctly\
    \ received by\n   the other implementation.  It should also be verified that:\n\
    \      o  all RTCP packets sent are compound packets\n      o  all RTCP compound\
    \ packets start with an empty RR packet\n      o  all RTCP compound packets contain\
    \ an SDES CNAME packet\n   The first implementation should then be made to transmit\
    \ data\n   packets.  It should be verified that that implementation now\n   generates\
    \ SR packets in place of RR packets, and that the second\n   application now generates\
    \ RR packets containing a single report\n   block.  It should be verified that\
    \ these SR and RR packets are\n   correctly received.  The following features\
    \ of the SR packets should\n   also be verified:\n      o  that the length field\
    \ is consistent with both the length of the\n         packet and the RC field\n\
    \      o  that the SSRC in SR packets is consistent with that in the RTP\n   \
    \      data packets\n      o  that the NTP timestamp in the SR packets is sensible\
    \ (matches\n         the wall clock time on the sending machine)\n      o  that\
    \ the RTP timestamp in the SR packets is consistent with\n         that in the\
    \ RTP data packets\n      o  that the packet and octet count fields in the SR\
    \ packets are\n         consistent with the number of RTP data packets transmitted\n\
    \   In addition, the following features of the RR packets should also be\n   verified:\n\
    \      o  that the SSRC in the report block is consistent with that in\n     \
    \    the data packets being received\n      o  that the fraction lost is zero\n\
    \      o  that the cumulative number of packets lost is zero\n      o  that the\
    \ extended highest sequence number received is\n         consistent with the data\
    \ packets being received (provided the\n         round trip time between test\
    \ instrument and receiver is smaller\n         than the packet inter-arrival time,\
    \ this can be directly\n         checked by the test instrument).\n      o  that\
    \ the interarrival jitter is small (a precise value cannot\n         be given,\
    \ since it depends on the test instrument and network\n         conditions, but\
    \ very little jitter should be present in this\n         scenario).\n      o \
    \ that the last sender report timestamp is consistent with that\n         in the\
    \ SR packets (i.e., each RR passing through the test\n         instrument should\
    \ contain the middle 32 bits from the 64 bit\n         NTP timestamp of the last\
    \ SR packet which passed through the\n         test instrument in the opposite\
    \ direction).\n      o  that the delay since last SR field is sensible (an estimate\
    \ may\n         be made by timing the passage of an SR and corresponding RR\n\
    \         through the test instrument, this should closely agree with the\n  \
    \       DLSR field)\n   It should also be verified that the timestamps, packet\
    \ count and\n   octet count correctly wrap-around after the appropriate interval.\n\
    \   The next test is to show behavior in the presence of packet loss.\n   The\
    \ first implementation is made to transmit data packets, which are\n   received\
    \ by the second implementation.  This time, however, the test\n   instrument is\
    \ made to randomly drop a small fraction (1% is\n   suggested) of the data packets.\
    \  The second implementation should be\n   able to receive the data packets and\
    \ process them in a normal manner\n   (with, of course, some quality degradation).\
    \  The RR packets should\n   show a loss fraction corresponding to the drop rate\
    \ of the test\n   instrument and should show an increasing cumulative number of\
    \ packets\n   lost.\n   The loss rate in the test instrument is then returned\
    \ to zero and it\n   is made to delay each packet by some random amount (the exact\
    \ amount\n   depends on the media type, but a small fraction of the average\n\
    \   interarrival time is reasonable).  The effect of this should be to\n   increase\
    \ the reported interarrival jitter in the RR packets.\n   If these tests succeed,\
    \ the process should be repeated with the\n   second implementation transmitting\
    \ and the first receiving.\n"
- title: 2.3.2 RTCP source description packets
  contents:
  - "2.3.2 RTCP source description packets\n   Both implementations should be run,\
    \ but neither is required to\n   transmit data packets.  The RTCP packets should\
    \ be observed and it\n   should be verified that each compound packet contains\
    \ an SDES packet,\n   that that packet contains a CNAME item and that the CNAME\
    \ is chosen\n   according to the rules in the RTP specification and profile (in\
    \ many\n   cases the CNAME should be of the form `example@10.0.0.1' but this may\n\
    \   be overridden by a profile definition).\n   If an application supports additional\
    \ SDES items then it should be\n   verified that they are sent in addition to\
    \ the CNAME with some SDES\n   packets (the exact rate at which these additional\
    \ items are included\n   is dependent on the application and profile).\n   It\
    \ should be verified that an implementation can correctly receive\n   NAME, EMAIL,\
    \ PHONE, LOC, NOTE, TOOL and PRIV items, even if it does\n   not send them.  This\
    \ is because it may reasonably be expected to\n   interwork with other implementations\
    \ which support those items.\n   Receiving and ignoring such packets is valid\
    \ behavior.\n   It should be verified that an implementation correctly sets the\n\
    \   length fields in the SDES items it sends, and that the source count\n   and\
    \ packet length fields are correct.  It should be verified that\n   SDES fields\
    \ are not zero terminated.\n   It should be verified that an implementation correctly\
    \ receives SDES\n   items which do not terminate in a zero byte.\n"
- title: 2.3.3 RTCP BYE packets
  contents:
  - "2.3.3 RTCP BYE packets\n   Both implementations should be run, but neither is\
    \ required to\n   transmit data packets.  The first implementation is then made\
    \ to exit\n   and it should be verified that an RTCP BYE packet is sent.  It should\n\
    \   be verified that the second implementation reacts to this BYE packet\n   and\
    \ notes that the first implementation has left the session.\n   If the test succeeds,\
    \ the implementations should be restarted and the\n   process repeated with the\
    \ second implementation leaving the session.\n   It should be verified that implementations\
    \ handle BYE packets\n   containing the optional reason for leaving text (ignoring\
    \ the text is\n   acceptable).\n"
- title: 2.3.4 Application defined RTCP packets
  contents:
  - "2.3.4 Application defined RTCP packets\n   Tests for the correct response to\
    \ application defined packets are\n   difficult to specify, since the response\
    \ is clearly implementation\n   dependent.  It should be verified that an implementation\
    \ ignores APP\n   packets where the 4 octet name field is unrecognized.\n   Implementations\
    \ which use APP packets should verify that they behave\n   as expected.\n"
- title: 2.4 RTCP transmission interval
  contents:
  - "2.4 RTCP transmission interval\n   The basic architecture for performing tests\
    \ of the RTCP transmission\n   interval is shown in Figure 2.\n   The test instrument\
    \ is connected to the same LAN as the RTP\n   implementation being tested.  It\
    \ is assumed that the test instrument\n   is preconfigured with the addresses\
    \ and ports used by the RTP\n   implementation, and is also aware of the RTCP\
    \ bandwidth and\n   sender/receiver fractions.  The tests can be conducted using\
    \ either\n   multicast or unicast.\n   The test instrument must be capable of\
    \ sending arbitrarily crafted\n   RTP and RTCP packets to the RTP implementation.\
    \  The test instrument\n   should also be capable of receiving packets sent by\
    \ the RTP\n   implementation, parsing them, and computing metrics based on those\n\
    \   packets.\n                          +--------------+\n                   \
    \       |     test     |\n                          |  instrument  |\n       \
    \                   +-----+--------+\n                                |\n    \
    \          ------+-----------+-------------- LAN\n                    |\n    \
    \        +-------+--------+\n            |       RTP      |\n            | implementation\
    \ |\n            +----------------+\n            Figure 2:  Testing architecture\
    \ for RTCP\n   It is furthermore assumed that a number of basic controls over\
    \ the\n   RTP implementation exist.  These controls are:\n      o  the ability\
    \ to force the implementation to send or not send RTP\n         packets at any\
    \ desired point in time\n      o  the ability to force the application to terminate\
    \ its\n         involvement in the RTP session, and for this termination to be\n\
    \         known immediately to the test instrument\n      o  the ability to set\
    \ the session bandwidth and RTCP sender and\n         receiver fractions\n   The\
    \ second of these is required only for the test of BYE\n   reconsideration, and\
    \ is the only aspect of these tests not easily\n   implementable by pure automation.\
    \  It will generally require manual\n   intervention to terminate the session\
    \ from the RTP implementation and\n   to convey this to the test instrument through\
    \ some non-RTP means.\n"
- title: 2.4.1 Basic Behavior
  contents:
  - "2.4.1 Basic Behavior\n   The first test is to verify basic correctness of the\
    \ implementation\n   of the RTCP transmission rules.  This basic behavior consists\
    \ of:\n      o  periodic transmission of RTCP packets\n      o  randomization\
    \ of the interval for RTCP packet transmission\n      o  correct implementation\
    \ of the randomization interval\n         computations, with unconditional reconsideration\n\
    \   The RTP implementation acts as a receiver, and never sends any RTP\n   data\
    \ packets.  The implementation is configured with a large session\n   bandwidth,\
    \ say 1 Mbit/s.  This will cause the implementation to use\n   the minimal interval\
    \ of 5s rather than the small interval based on\n   the session bandwidth and\
    \ membership size.  The implementation will\n   generate RTCP packets at this\
    \ minimal interval, on average.  The test\n   instrument generates no packets,\
    \ but receives the RTCP packets\n   generated by the implementation.  When an\
    \ RTCP packet is received,\n   the time is noted by the test instrument.  The\
    \ difference in time\n   between each pair of subsequent packets (called the interval)\
    \ is\n   computed.  These intervals are stored, so that statistics based on\n\
    \   these intervals can be computed.  It is recommended that this\n   observation\
    \ process operate for at least 20 minutes.\n   An implementation passes this test\
    \ if the intervals have the\n   following properties:\n      o  the minimum interval\
    \ is never less than 2 seconds or more than\n         2.5 seconds;\n      o  the\
    \ maximum interval is never more than 7 seconds or less than\n         5.5 seconds;\n\
    \      o  the average interval is between 4.5 and 5.5 seconds;\n      o  the number\
    \ of intervals between x and x+500ms is less than the\n         number of intervals\
    \ between x+500ms and x+1s, for any x.\n   In particular, an implementation fails\
    \ if the packets are sent with a\n   constant interval.\n"
- title: 2.4.2 Step join backoff
  contents:
  - "2.4.2 Step join backoff\n   The main purpose of the reconsideration algorithm\
    \ is to avoid a flood\n   of packets that might occur when a large number of users\n\
    \   simultaneously join an RTP session.  Reconsideration therefore\n   exhibits\
    \ a backoff behavior in sending of RTCP packets when group\n   sizes increase.\
    \  This aspect of the algorithm can be tested in the\n   following manner.\n \
    \  The implementation begins operation.  The test instrument waits for\n   the\
    \ arrival of the first RTCP packet.  When it arrives, the test\n   instrument\
    \ notes the time and then immediately sends 100 RTCP RR\n   packets to the implementation,\
    \ each with a different SSRC and SDES\n   CNAME.  The test instrument should ensure\
    \ that each RTCP packet is of\n   the same length.  The instrument should then\
    \ wait until the next RTCP\n   packet is received from the implementation, and\
    \ the time of such\n   reception is noted.\n   Without reconsideration, the next\
    \ RTCP packet will arrive within a\n   short period of time.  With reconsideration,\
    \ transmission of this\n   packet will be delayed.  The earliest it can arrive\
    \ depends on the\n   RTCP session bandwidth, receiver fraction, and average RTCP\
    \ packet\n   size.  The RTP implementation should be using the exponential\n \
    \  averaging algorithm defined in the specification to compute the\n   average\
    \ RTCP packet size.  Since this is dominated by the received\n   packets (the\
    \ implementation has only sent one itself), the average\n   will be roughly equal\
    \ to the length of the RTCP packets sent by the\n   test instrument.  Therefore,\
    \ the minimum amount of time between the\n   first and second RTCP packets from\
    \ the implementation is:\n      T > 101 * S / ( B * Fr * (e-1.5) * 2 )\n   Where\
    \ S is the size of the RTCP packets sent by the test instrument,\n   B is the\
    \ RTCP bandwidth (normally five percent of the session\n   bandwidth), Fr is the\
    \ fraction of RTCP bandwidth allocated to\n   receivers (normally 75 percent),\
    \ and e is the natural exponent.\n   Without reconsideration, this minimum interval\
    \ Te would be much\n   smaller:\n      Te > MAX( [ S / ( B * Fr * (e-1.5) * 2\
    \ ) ] , [ 2.5 / (e-1.5) ] )\n   B should be chosen sufficiently small so that\
    \ T is around 60 seconds.\n   Reasonable choices for these parameters are B =\
    \ 950 bits per second,\n   and S = 1024 bits.  An implementation passes this test\
    \ if the\n   interval between packets is not less than T above, and not more than\n\
    \   3 times T.\n   Note: in all tests the value chosen for B, the RTCP bandwidth,\
    \ is\n   calculated including the lower layer UDP/IP headers.  In a typical\n\
    \   IPv4 based implementation, these comprise 28 octets per packet.  A\n   common\
    \ mistake is to forget that these are included when choosing the\n   size of packets\
    \ to transmit.\n   The test should be repeated for the case when the RTP implementation\n\
    \   is a sender.  This is accomplished by having the implementation send\n   RTP\
    \ packets at least once a second.  In this case, the interval\n   between the\
    \ first and second RTCP packets should be no less than:\n      T > S / ( B * Fs\
    \ * (e-1.5) * 2 )\n   Where Fs is the fraction of RTCP bandwidth allocated to\
    \ senders,\n   usually 25%.  Note that this value of T is significantly smaller\
    \ than\n   the interval for receivers.\n"
- title: 2.4.3 Steady State Behavior
  contents:
  - "2.4.3 Steady State Behavior\n   In addition to the basic behavior in section\
    \ 2.4.1, an implementation\n   should correctly implement a number of other, slightly\
    \ more advanced\n   features:\n      o  scale the RTCP interval with the group\
    \ size;\n      o  correctly divide bandwidth between senders and receivers;\n\
    \      o  correctly compute the RTCP interval when the user is a sender\n   The\
    \ implementation begins operation as a receiver.  The test\n   instrument waits\
    \ for the first RTCP packet from the implementation.\n   When it arrives, the\
    \ test instrument notes the time, and immediately\n   sends 50 RTCP RR packets\
    \ and 50 RTCP SR packets to the\n   implementation, each with a different SSRC\
    \ and SDES CNAME.  The test\n   instrument then sends 50 RTP packets, using the\
    \ 50 SSRC from the RTCP\n   SR packets.  The test instrument should ensure that\
    \ each RTCP packet\n   is of the same length.  The instrument should then wait\
    \ until the\n   next RTCP packet is received from the implementation, and the\
    \ time of\n   such reception is noted.  The difference between the reception of\
    \ the\n   RTCP packet and the reception of the previous is computed and stored.\n\
    \   In addition, after every RTCP packet reception, the 100 RTCP and 50\n   RTP\
    \ packets are retransmitted by the test instrument.  This ensures\n   that the\
    \ sender and member status of the 100 users does not time out.\n   The test instrument\
    \ should collect the interval measurements figures\n   for at least 100 RTCP packets.\n\
    \   With 50 senders, the implementation should not try to divide the RTCP\n  \
    \ bandwidth between senders and receivers, but rather group all users\n   together\
    \ and divide the RTCP bandwidth equally.  The test is deemed\n   successful if\
    \ the average RTCP interval is within 5% of:\n      T = 101* S/B\n   Where S is\
    \ the size of the RTCP packets sent by the test instrument,\n   and B is the RTCP\
    \ bandwidth.  B should be chosen sufficiently small\n   so that the value of T\
    \ is on the order of tens of seconds or more.\n   Reasonable values are S=1024\
    \ bits and B=3.4 kb/s.\n   The previous test is repeated.  However, the test instrument\
    \ sends 10\n   RTP packets instead of 50, and 10 RTCP SR and 90 RTCP RR instead\
    \ of\n   50 of each.  In addition, the implementation is made to send at least\n\
    \   one RTP packet between transmission of every one of its own RTCP\n   packets.\n\
    \   In this case, the average RTCP interval should be within 5% of:\n      T =\
    \ 11 * S / (B * Fs)\n   Where S is the size of the RTCP packets sent by the test\
    \ instrument,\n   B is the RTCP bandwidth, and Fs is the fraction of RTCP bandwidth\n\
    \   allocated for senders (normally 25%).  The values for B and S should\n   be\
    \ chosen small enough so that T is on the order of tens of seconds.\n   Reasonable\
    \ choices are S=1024 bits and B=1.5 kb/s.\n"
- title: 2.4.4 Reverse Reconsideration
  contents:
  - "2.4.4 Reverse Reconsideration\n   The reverse reconsideration algorithm is effectively\
    \ the opposite of\n   the normal reconsideration algorithm.  It causes the RTCP\
    \ interval to\n   be reduced more rapidly in response to decreases in the group\n\
    \   membership.  This is advantageous in that it keeps the RTCP\n   information\
    \ as fresh as possible, and helps avoids some premature\n   timeout problems.\n\
    \   In the first test, the implementation joins the session as a\n   receiver.\
    \  As soon as the implementation sends its first RTCP packet,\n   the test instrument\
    \ sends 100 RTCP RR packets, each of the same\n   length S, and a different SDES\
    \ CNAME and SSRC in each.  It then waits\n   for the implementation to send another\
    \ RTCP packet.  Once it does,\n   the test instrument sends 100 BYE packets, each\
    \ one containing a\n   different SSRC, but matching an SSRC from one of the initial\
    \ RTCP\n   packets.  Each BYE should also be the same size as the RTCP packets\n\
    \   sent by the test instrument.  This is easily accomplished by using a\n   BYE\
    \ reason to pad out the length.  The time of the next RTCP packet\n   from the\
    \ implementation is then noted.  The delay T between this (the\n   third RTCP\
    \ packet) and the previous should be no more than:\n      T < 3 * S / (B * Fr\
    \ * (e-1.5) * 2)\n   Where S is the size of the RTCP and BYE packets sent by the\
    \ test\n   instrument, B is the RTCP bandwidth, Fr is the fraction of the RTCP\n\
    \   bandwidth allocated to receivers, and e is the natural exponent.  B\n   should\
    \ be chosen such that T is on the order of tens of seconds.  A\n   reasonable\
    \ choice is S=1024 bits and B=168 bits per second.\n   This test demonstrates\
    \ basic correctness of implementation.  An\n   implementation without reverse\
    \ reconsideration will not send its next\n   RTCP packet for nearly 100 times\
    \ as long as the above amount.\n   In the second test, the implementation joins\
    \ the session as a\n   receiver.  As soon as it sends its first RTCP packet, the\
    \ test\n   instrument sends 100 RTCP RR packets, each of the same length S,\n\
    \   followed by 100 BYE packets, also of length S.  Each RTCP packet\n   carries\
    \ a different SDES CNAME and SSRC, and is matched with\n   precisely one BYE packet\
    \ with the same SSRC.  This will cause the\n   implementation to see a rapid increase\
    \ and then rapid drop in group\n   membership.\n   The test is deemed successful\
    \ if the next RTCP packet shows up T\n   seconds after the first, and T is within:\n\
    \      2.5 / (e-1.5) < T < 7.5 / (e-1.5)\n   This tests correctness of the maintenance\
    \ of the pmembers variable.\n   An incorrect implementation might try to execute\
    \ reverse\n   reconsideration every time a BYE is received, as opposed to only\
    \ when\n   the group membership drops below pmembers.  If an implementation did\n\
    \   this, it would end up sending an RTCP packet immediately after\n   receiving\
    \ the stream of BYE's.  For this test to work, B must be\n   chosen to be a large\
    \ value, around 1Mb/s.\n"
- title: 2.4.5 BYE Reconsideration
  contents:
  - "2.4.5 BYE Reconsideration\n   The BYE reconsideration algorithm works in much\
    \ the same fashion as\n   regular reconsideration, except applied to BYE packets.\
    \  When a user\n   leaves the group, instead of sending a BYE immediately, it\
    \ may delay\n   transmission of its BYE packet if others are sending BYE's.\n\
    \   The test for correctness of this algorithm is as follows.  The RTP\n   implementation\
    \ joins the group as a receiver.  The test instrument\n   waits for the first\
    \ RTCP packet.  When the test instrument receives\n   this packet, the test instrument\
    \ immediately sends 100 RTCP RR\n   packets, each of the same length S, and each\
    \ containing a different\n   SSRC and SDES CNAME.  Once the test instrument receives\
    \ the next RTCP\n   packet from the implementation, the RTP implementation is\
    \ made to\n   leave the RTP session, and this information is conveyed to the test\n\
    \   instrument through some non-RTP means.  The test instrument then\n   sends\
    \ 100 BYE packets, each with a different SSRC, and each matching\n   an SSRC from\
    \ a previously transmitted RTCP packet.  Each of these BYE\n   packets is also\
    \ of size S.  Immediately following the BYE packets,\n   the test instrument sends\
    \ 100 RTCP RR packets, using the same\n   SSRC/CNAMEs as the original 100 RTCP\
    \ packets.\n   The test is deemed successful if the implementation either never\n\
    \   sends a BYE, or if it does, the BYE is received by the test\n   instrument\
    \ not earlier than T seconds, and not later than 3 * T\n   seconds, after the\
    \ implementation left the session, where T is:\n      T = 100 * S / ( 2 * (e-1.5)\
    \ * B )\n   S is the size of the RTCP and BYE packets, e is the natural exponent,\n\
    \   B is the RTCP bandwidth, and Fr is the RTCP bandwidth fraction for\n   receivers.\
    \  S and B should be chosen so that T is on the order of 50\n   seconds.  A reasonable\
    \ choice is S=1024 bits and B=1.1 kb/s.\n   The transmission of the RTCP packets\
    \ is meant to verify that the\n   implementation is ignoring non-BYE RTCP packets\
    \ once it decides to\n   leave the group.\n"
- title: 2.4.6 Timing out members
  contents:
  - "2.4.6 Timing out members\n   Active RTP participants are supposed to send periodic\
    \ RTCP packets.\n   When a participant leaves the session, they may send a BYE,\
    \ however\n   this is not required.  Furthermore, BYE reconsideration may cause\
    \ a\n   BYE to never be sent.  As a result, participants must time out other\n\
    \   participants who have not sent an RTCP packet in a long time.\n   According\
    \ to the specification, participants who have not sent an\n   RTCP packet in the\
    \ last 5 intervals are timed out.  This test\n   verifies that these timeouts\
    \ are being performed correctly.\n   The RTP implementation joins a session as\
    \ a receiver.  The test\n   instrument waits for the first RTCP packet from the\
    \ implementation.\n   Once it arrives, the test instrument sends 100 RTCP RR packets,\
    \ each\n   with a different SDES and SSRC, and notes the time.  This will cause\n\
    \   the implementation to believe that there are now 101 group\n   participants,\
    \ causing it to increase its RTCP interval.  The test\n   instrument continues\
    \ to monitor the RTCP packets from the\n   implementation.  As each RTCP packet\
    \ is received, the time of its\n   reception is noted, and the interval between\
    \ RTCP packets is stored.\n   The 100 participants spoofed by the test instrument\
    \ should eventually\n   time out at the RTP implementation.  This should cause\
    \ the RTCP\n   interval to be reduced to its minimum.\n   The test is deemed successful\
    \ if the interval between RTCP packets\n   after the first is no less than:\n\
    \      Ti > 101 * S / ( 2 * (e-1.5) * B * Fr)\n   and this minimum interval is\
    \ sustained no later than Td seconds after\n   the transmission of the 100 RR's,\
    \ where Td is:\n      Td = 7 * 101 * S / ( B * Fr )\n   and the interval between\
    \ RTCP packets after this point is no less\n   than:\n      Tf > 2.5 / (e-1.5)\n\
    \   For this test to work, B and S must be chosen so Ti is on the order\n   of\
    \ minutes.  Recommended values are S = 1024 bits and B = 1.9 kbps.\n"
- title: 2.4.7 Rapid SR's
  contents:
  - "2.4.7 Rapid SR's\n   The minimum interval for RTCP packets can be reduced for\
    \ large\n   session bandwidths.  The reduction applies to senders only.  The\n\
    \   recommended algorithm for computing this minimum interval is 360\n   divided\
    \ by the RTP session bandwidth, in kbps.  For bandwidths larger\n   than 72 kbps,\
    \ this interval is less than 5 seconds.\n   This test verifies the ability of\
    \ an implementation to use a lower\n   RTCP minimum interval when it is a sender\
    \ in a high bandwidth\n   session.  The test can only be run on implementations\
    \ that support\n   this reduction, since it is optional.\n   The RTP implementation\
    \ is configured to join the session as a sender.\n   The session is configured\
    \ to use 360 kbps.  If the recommended\n   algorithm for computing the reduced\
    \ minimum interval is used, the\n   result is a 1 second interval.  If the RTP\
    \ implementation uses a\n   different algorithm, the session bandwidth should\
    \ be set in such a\n   way to cause the reduced minimum interval to be 1 second.\n\
    \   Once joining the session, the RTP implementation should begin to send\n  \
    \ both RTP and RTCP packets.  The interval between RTCP packets is\n   measured\
    \ and stored until 100 intervals have been collected.\n   The test is deemed successful\
    \ if the smallest interval is no less\n   than 1/2 a second, and the largest interval\
    \ is no more than 1.5\n   seconds.  The average should be close to 1 second.\n"
- title: 3 RTP translators
  contents:
  - "3 RTP translators\n   RTP translators should be tested in the same manner as\
    \ end systems,\n   with the addition of the tests described in this section.\n\
    \   The architecture for testing RTP translators is shown in Figure 3.\n     \
    \                        +-----------------+\n                    +--------+ \
    \ RTP Translator +-----+\n                    |        +-----------------+   \
    \  |\n                    |                                |\n            +-------+--------+\
    \               +-------+--------+\n            |     First RTP  |           \
    \    |   Second RTP   |\n            | implementation |               | implementation\
    \ |\n            +----------------+               +----------------+\n       \
    \       Figure 3:  Testing architecture for translators\n   The first RTP implementation\
    \ is instructed to send data to the\n   translator, which forwards the packets\
    \ to the other RTP\n   implementation, after translating then as desired.  It\
    \ should be\n   verified that the second implementation can playout the translated\n\
    \   packets.\n   It should be verified that the packets received by the second\n\
    \   implementation have the same SSRC as those sent by the first\n   implementation.\
    \  The CC should be zero and CSRC fields should not be\n   present in the translated\
    \ packets.  The other RTP header fields may\n   be rewritten by the translator,\
    \ depending on the translation being\n   performed, for example\n      o  the\
    \ payload type should change if the translator changes the\n         encoding\
    \ of the data\n      o  the timestamp may change if, for example, the encoding,\n\
    \         packetisation interval or framerate is changed\n      o  the sequence\
    \ number may change if the translator merges or\n         splits packets\n   \
    \   o  padding may be added or removed, in particular if the\n         translator\
    \ is adding or removing encryption\n      o  the marker bit may be rewritten\n\
    \   If the translator modifies the contents of the data packets it should\n  \
    \ be verified that the corresponding change is made to the RTCP\n   packets, and\
    \ that the receivers can correctly process the modified\n   RTCP packets.  In\
    \ particular\n      o  the SSRC is unchanged by the translator\n      o  if the\
    \ translator changes the data encoding it should also\n         change the octet\
    \ count field in the SR packets\n      o  if the translator combines multiple\
    \ data packets into one it\n         should also change the packet count field\
    \ in SR packets\n      o  if the translator changes the sampling frequency of\
    \ the data\n         packets it should also change the RTP timestamp field in\
    \ the SR\n         packets\n      o  if the translator combines multiple data\
    \ packets into one it\n         should also change the packet loss and extended\
    \ highest\n         sequence number fields of RR packets flowing back from the\n\
    \         receiver (it is legal for the translator to strip the report\n     \
    \    blocks and send empty SR/RR packets, but this should only be\n         done\
    \ if the transformation of the data is such that the\n         reception reports\
    \ cannot sensibly be translated)\n      o  the translator should forward SDES\
    \ CNAME packets\n      o  the translator may forward other SDES packets\n    \
    \  o  the translator should forward BYE packets unchanged\n      o  the translator\
    \ should forward APP packets unchanged\n   When the translator exits it should\
    \ be verified to send a BYE packet\n   to each receiver containing the SSRC of\
    \ the other receiver.  The\n   receivers should be verified to correctly process\
    \ this BYE packet\n   (this is different to the BYE test in section 2.3.3 since\
    \ multiple\n   SSRCs may be included in each BYE if the translator also sends\
    \ its\n   own RTCP information).\n"
- title: 4 RTP mixers
  contents:
  - "4 RTP mixers\n   RTP mixers should be tested in the same manner as end systems,\
    \ with\n   the addition of the tests described in this section.\n   The architecture\
    \ for testing RTP mixers is shown in Figure 4.\n   The first and second RTP implementations\
    \ are instructed to send data\n   packets to the RTP mixer.  The mixer combines\
    \ those packets and sends\n   them to the third RTP implementation.  The mixer\
    \ should also process\n   RTCP packets from the other implementations, and should\
    \ generate its\n   own RTCP reports.\n            +----------------+\n       \
    \     |   Second RTP   |\n            | implementation |\n            +-------+--------+\n\
    \                     |\n                     |       +-----------+\n        \
    \             +-------+ RTP Mixer +-----+\n                     |       +-----------+\
    \     |\n                     |                         |\n            +-------+--------+\
    \         +-------+--------+\n            |    First RTP   |         |    Third\
    \ RTP   |\n            | implementation |         | implementation |\n       \
    \     +----------------+         +----------------+\n             Figure 4:  Testing\
    \ architecture for mixers\n   It should be verified that the third RTP implementation\
    \ can playout\n   the mixed packets.  It should also be verified that\n      o\
    \  the CC field in the RTP packets received by the third\n         implementation\
    \ is set to 2\n      o  the RTP packets received by the third implementation contain\
    \ 2\n         CSRCs corresponding to the first and second RTP implementations\n\
    \      o  the RTP packets received by the third implementation contain an\n  \
    \       SSRC corresponding to that of the mixer\n   It should next be verified\
    \ that the mixer generates SR and RR packets\n   for each cloud.  The mixer should\
    \ generate RR packets in the\n   direction of the first and second implementations,\
    \ and SR packets in\n   the direction of the third implementation.\n   It should\
    \ be verified that the SR packets sent to the third\n   implementation do not\
    \ reference the first or second implementations,\n   and vice versa.\n   It should\
    \ be verified that SDES CNAME information is forwarded across\n   the mixer. \
    \ Other SDES fields may optionally be forwarded.\n   Finally, one of the implementations\
    \ should be quit, and it should be\n   verified that the other implementations\
    \ see the BYE packet.  This\n   implementation should then be restarted and the\
    \ mixer should be quit.\n   It should be verified that the implementations see\
    \ both the mixer and\n   the implementations on the other side of the mixer quit\
    \ (illustrating\n   response to BYE packets containing multiple sources).\n"
- title: 5 SSRC collision detection
  contents:
  - "5 SSRC collision detection\n   RTP has provision for the resolution of SSRC collisions.\
    \  These\n   collisions occur when two different session participants choose the\n\
    \   same SSRC.  In this case, both participants are supposed to send a\n   BYE,\
    \ leave the session, and rejoin with a different SSRC, but the\n   same CNAME.\
    \  The purpose of this test is to verify that this function\n   is present in\
    \ the implementation.\n   The test is straightforward.  The RTP implementation\
    \ is made to join\n   the multicast group as a receiver.  A test instrument waits\
    \ for the\n   first RTCP packet.  Once it arrives, the test instrument notes the\n\
    \   CNAME and SSRC from the RTCP packet.  The test instrument then\n   generates\
    \ an RTCP receiver report.  This receiver report contains an\n   SDES chunk with\
    \ an SSRC matching that of the RTP implementation, but\n   with a different CNAME.\
    \  At this point, the implementation should\n   send a BYE RTCP packet (containing\
    \ an SDES chunk with the old SSRC\n   and CNAME), and then rejoin, causing it\
    \ to send a receiver report\n   containing an SDES chunk, but with a new SSRC\
    \ and the same CNAME.\n   The test is deemed successful if the RTP implementation\
    \ sends the\n   RTCP BYE and RTCP RR as described above within one minute of\n\
    \   receiving the colliding RR from the test instrument.\n"
- title: 6 SSRC Randomization
  contents:
  - "6 SSRC Randomization\n   According to the RTP specification, SSRC's are supposed\
    \ to be chosen\n   randomly and uniformly over a 32 bit space.  This randomization\
    \ is\n   beneficial for several reasons:\n      o  It reduces the probability\
    \ of collisions in large groups.\n      o  It simplifies the process of group\
    \ sampling [3] which depends\n         on the uniform distribution of SSRC's across\
    \ the 32 bit space.\n   Unfortunately, verifying that a random number has 32 bits\
    \ of uniform\n   randomness requires a large number of samples.  The procedure\
    \ below\n   gives only a rough validation to the randomness used for generating\n\
    \   the SSRC.\n   The test runs as follows.  The RTP implementation joins the\
    \ group as\n   a receiver.  The test instrument waits for the first RTCP packet.\
    \  It\n   notes the SSRC in this RTCP packet.  The test is repeated 2500 times,\n\
    \   resulting in a collection of 2500 SSRC.\n   The are then placed into 25 bins.\
    \  An SSRC with value X is placed\n   into bin FLOOR(X/(2**32 / 25)).  The idea\
    \ is to break the 32 bit\n   space into 25 regions, and compute the number of\
    \ SSRC in each region.\n   Ideally, there should be 40 SSRC in each bin.  Of course,\
    \ the actual\n   number in each bin is a random variable whose expectation is\
    \ 40.\n   With 2500 SSRC, the coefficient of variation of the number of SSRC in\n\
    \   a bin is 0.1, which means the number should be between 36 and 44.\n   The\
    \ test is thus deemed successful if each bin has no less than 30\n   and no more\
    \ than 50 SSRC.\n   Running this test may require substantial amounts of time,\n\
    \   particularly if there is no automated way to have the implementation\n   join\
    \ the session.  In such a case, the test can be run fewer times.\n   With 26 tests,\
    \ half of the SSRC should be less than 2**31, and the\n   other half higher. \
    \ The coefficient of variation in this case is 0.2,\n   so the test is successful\
    \ if there are more than 8 SSRC less than\n   2**31, and less than 26.\n   In\
    \ general, if the SSRC is collected N times, and there are B bins,\n   the coefficient\
    \ of variation of the number of SSRC in each bin is\n   given by:\n      coeff\
    \ = SQRT( (B-1)/N )\n"
- title: 7 Security Considerations
  contents:
  - "7 Security Considerations\n   Implementations of RTP are subject to the security\
    \ considerations\n   mentioned in the RTP specification [1] and any applicable\
    \ RTP profile\n   (e.g., [2]).  There are no additional security considerations\
    \ implied\n   by the testing strategies described in this memo.\n"
- title: 8 Authors' Addresses
  contents:
  - "8 Authors' Addresses\n   Colin Perkins\n   USC Information Sciences Institute\n\
    \   3811 North Fairfax Drive\n   Suite 200\n   Arlington, VA 22203\n   EMail:\
    \  csp@isi.edu\n   Jonathan Rosenberg\n   dynamicsoft\n   72 Eagle Rock Ave.\n\
    \   First Floor\n   East Hanover, NJ 07936\n   EMail:  jdrosen@dynamicsoft.com\n\
    \   Henning Schulzrinne\n   Columbia University\n   M/S 0401\n   1214 Amsterdam\
    \ Ave.\n   New York, NY 10027-7003\n   EMail:  schulzrinne@cs.columbia.edu\n"
- title: 9 References
  contents:
  - "9 References\n   [1] Schulzrinne, H., Casner, S., Frederick R. and V. Jacobson,\
    \ \"RTP:\n       A Transport Protocol to Real-Time Applications\", Work in Progress\n\
    \       (update to RFC 1889), March 2001.\n   [2] Schulzrinne H. and S. Casner,\
    \ \"RTP Profile for Audio and Video\n       Conferences with Minimal Control\"\
    , Work in Progress (update to\n       RFC 1890), March 2001.\n   [3] Rosenberg,\
    \ J. and Schulzrinne, H. \"Sampling of the Group\n       Membership in RTP\",\
    \ RFC 2762, February 2000.\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
