- title: __initial_text__
  contents:
  - "    Use of the Elliptic Curve Diffie-Hellman Key Agreement Algorithm\n     with\
    \ X25519 and X448 in the Cryptographic Message Syntax (CMS)\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the conventions for using the Elliptic Curve\n\
    \   Diffie-Hellman (ECDH) key agreement algorithm with curve25519 and\n   curve448\
    \ in the Cryptographic Message Syntax (CMS).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by\n   the Internet Engineering\
    \ Steering Group (IESG).  Further\n   information on Internet Standards is available\
    \ in Section 2 of\n   RFC 7841.\n   Information about the current status of this\
    \ document, any\n   errata, and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8418.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Terminology ................................................3\n  \
    \    1.2. ASN.1 ......................................................3\n   2.\
    \ Key Agreement ...................................................3\n      2.1.\
    \ ANSI-X9.63-KDF .............................................4\n      2.2. HKDF\
    \ .......................................................5\n   3. Enveloped-data\
    \ Conventions ......................................5\n      3.1. EnvelopedData\
    \ Fields .......................................6\n      3.2. KeyAgreeRecipientInfo\
    \ Fields ...............................6\n   4. Authenticated-data Conventions\
    \ ..................................7\n      4.1. AuthenticatedData Fields ...................................8\n\
    \      4.2. KeyAgreeRecipientInfo Fields ...............................8\n  \
    \ 5. Authenticated-enveloped-data Conventions ........................8\n    \
    \  5.1. AuthEnvelopedData Fields ...................................8\n      5.2.\
    \ KeyAgreeRecipientInfo Fields ...............................8\n   6. Certificate\
    \ Conventions .........................................9\n   7. Key Agreement\
    \ Algorithm Identifiers .............................9\n   8. SMIMECapabilities\
    \ Attribute Conventions ........................10\n   9. Security Considerations\
    \ ........................................11\n   10. IANA Considerations ...........................................12\n\
    \   11. References ....................................................13\n  \
    \    11.1. Normative References .....................................13\n    \
    \  11.2. Informative References ...................................14\n   Appendix\
    \ A. ASN.1 Module ..........................................16\n   Acknowledgements\
    \ ..................................................18\n   Author's Address ..................................................18\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes the conventions for using Elliptic\
    \ Curve\n   Diffie-Hellman (ECDH) key agreement using curve25519 and curve448\n\
    \   [CURVES] in the Cryptographic Message Syntax (CMS) [CMS].  Key\n   agreement\
    \ is supported in three CMS content types: the enveloped-data\n   content type\
    \ [CMS], authenticated-data content type [CMS], and the\n   authenticated-enveloped-data\
    \ content type [AUTHENV].\n   The conventions for using some Elliptic Curve Cryptography\
    \ (ECC)\n   algorithms in CMS are described in [CMSECC].  These conventions cover\n\
    \   the use of ECDH with some curves other than curve25519 and curve448\n   [CURVES].\
    \  Those other curves are not deprecated.\n   Using curve25519 with Diffie-Hellman\
    \ key agreement is referred to as\n   \"X25519\".  Using curve448 with Diffie-Hellman\
    \ key agreement is\n   referred to as \"X448\".\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT\
    \ RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 1.2.  ASN.1
  contents:
  - "1.2.  ASN.1\n   CMS values are generated using ASN.1 [X680], which uses the Basic\n\
    \   Encoding Rules (BER) and the Distinguished Encoding Rules (DER)\n   [X690].\n"
- title: 2.  Key Agreement
  contents:
  - "2.  Key Agreement\n   In 1976, Diffie and Hellman described a means for two parties\
    \ to\n   agree upon a shared secret value in a manner that prevents\n   eavesdroppers\
    \ from learning the shared secret value [DH1976].  This\n   secret may then be\
    \ converted into pairwise symmetric keying material\n   for use with other cryptographic\
    \ algorithms.  Over the years, many\n   variants of this fundamental technique\
    \ have been developed.  This\n   document describes the conventions for using\
    \ Ephemeral-Static\n   Elliptic Curve Diffie-Hellman (ECDH) key agreement using\
    \ X25519 and\n   X448 [CURVES].\n   The originator MUST use an ephemeral public/private\
    \ key pair that is\n   generated on the same elliptic curve as the public key\
    \ of the\n   recipient.  The ephemeral key pair MUST be used for a single CMS-\n\
    \   protected content type, and then it MUST be discarded.  The\n   originator\
    \ obtains the recipient's static public key from the\n   recipient's certificate\
    \ [PROFILE].\n   X25519 is described in Section 6.1 of [CURVES], and X448 is described\n\
    \   in Section 6.2 of [CURVES].  Conforming implementations MUST check\n   whether\
    \ the computed Diffie-Hellman shared secret is the all-zero\n   value, and abort\
    \ if so, as described in Section 6 of [CURVES].  If an\n   alternative implementation\
    \ of these elliptic curves to that\n   documented in Section 6 of [CURVES] is\
    \ employed, then the additional\n   checks specified in Section 7 of [CURVES]\
    \ SHOULD be performed.\n   In [CURVES], the shared secret value that is produced\
    \ by ECDH is\n   called K.  (In some other specifications, the shared secret value\
    \ is\n   called Z.)  A Key Derivation Function (KDF) is used to produce a\n  \
    \ pairwise key-encryption key (KEK) from the shared secret value (K),\n   the\
    \ length of the KEK, and the DER-encoded ECC-CMS-SharedInfo\n   structure [CMSECC].\n\
    \   The ECC-CMS-SharedInfo definition from [CMSECC] is repeated here for\n   convenience.\n\
    \      ECC-CMS-SharedInfo ::= SEQUENCE {\n        keyInfo         AlgorithmIdentifier,\n\
    \        entityUInfo [0] EXPLICIT OCTET STRING OPTIONAL,\n        suppPubInfo\
    \ [2] EXPLICIT OCTET STRING  }\n   The ECC-CMS-SharedInfo keyInfo field contains\
    \ the object identifier\n   of the key-encryption algorithm and associated parameters.\
    \  This\n   algorithm will be used to wrap the content-encryption key.  For\n\
    \   example, the AES Key Wrap algorithm [AESKW] does not need parameters,\n  \
    \ so the algorithm identifier parameters are absent.\n   The ECC-CMS-SharedInfo\
    \ entityUInfo field optionally contains\n   additional keying material supplied\
    \ by the sending agent.  Note that\n   [CMS] requires implementations to accept\
    \ a KeyAgreeRecipientInfo\n   SEQUENCE that includes the ukm field.  If the ukm\
    \ field is present,\n   the ukm is placed in the entityUInfo field.  By including\
    \ the ukm, a\n   different KEK is generated even when the originator ephemeral\
    \ private\n   key is improperly used more than once.  Therefore, if the ukm field\n\
    \   is present, it MUST be selected in a manner that provides, with very\n   high\
    \ probability, a unique value; however, there is no security\n   benefit to using\
    \ a ukm value that is longer than the KEK that will be\n   produced by the KDF.\n\
    \   The ECC-CMS-SharedInfo suppPubInfo field contains the length of the\n   generated\
    \ KEK, in bits, represented as a 32-bit number in network\n   byte order.  For\
    \ example, the key length for AES-256 [AES] would be\n   0x00000100.\n"
- title: 2.1.  ANSI-X9.63-KDF
  contents:
  - "2.1.  ANSI-X9.63-KDF\n   The ANSI-X9.63-KDF key derivation function is a simple\
    \ construct\n   based on a one-way hash function described in American National\n\
    \   Standard X9.63 [X963].  This KDF is also described in Section 3.6.1\n   of\
    \ [SEC1].\n   Three values are concatenated to produce the input string to the\
    \ KDF:\n      1. The shared secret value generated by ECDH, K.\n      2. The iteration\
    \ counter, starting with one, as described below.\n      3. The DER-encoded ECC-CMS-SharedInfo\
    \ structure.\n   To generate a key-encryption key (KEK), the KDF generates one\
    \ or more\n   keying material (KM) blocks, with the counter starting at 0x00000001,\n\
    \   and incrementing the counter for each subsequent KM block until\n   enough\
    \ material has been generated.  The 32-bit counter is\n   represented in network\
    \ byte order.  The KM blocks are concatenated\n   left to right, and then the\
    \ leftmost portion of the result is used as\n   the pairwise key-encryption key,\
    \ KEK:\n      KM(i) = Hash(K || INT32(counter=i) || DER(ECC-CMS-SharedInfo))\n\
    \      KEK = KM(counter=1) || KM(counter=2) ...\n"
- title: 2.2.  HKDF
  contents:
  - "2.2.  HKDF\n   The Extract-and-Expand HMAC-based Key Derivation Function (HKDF)\
    \ is a\n   robust construct based on a one-way hash function described in RFC\n\
    \   5869 [HKDF].  HKDF is comprised of two steps: HKDF-Extract followed\n   by\
    \ HKDF-Expand.\n   Three values are used as inputs to the HKDF:\n      1. The\
    \ shared secret value generated by ECDH, K.\n      2. The length in octets of\
    \ the keying data to be generated.\n      3. The DER-encoded ECC-CMS-SharedInfo\
    \ structure.\n   The ECC-CMS-SharedInfo structure optionally includes the ukm.\
    \  If the\n   ukm is present, the ukm is also used as the HKDF salt.  HKDF uses\
    \ an\n   appropriate number of zero octets when no salt is provided.\n   The length\
    \ of the generated KEK is used in two places, once in bits\n   and once in octets.\
    \  The ECC-CMS-SharedInfo structure includes the\n   length of the generated KEK\
    \ in bits.  The HKDF-Expand function takes\n   an argument for the length of the\
    \ generated KEK in octets.\n   In summary, to produce the pairwise key-encryption\
    \ key, KEK:\n      if ukm is provided, then salt = ukm, else salt is not provided\n\
    \      PRK = HKDF-Extract(salt, K)\n      KEK = HKDF-Expand(PRK, DER(ECC-CMS-SharedInfo),\
    \ SizeInOctets(KEK))\n"
- title: 3. Enveloped-data Conventions
  contents:
  - "3. Enveloped-data Conventions\n   The CMS enveloped-data content type [CMS] consists\
    \ of an encrypted\n   content and wrapped content-encryption keys for one or more\n\
    \   recipients.  The ECDH key agreement algorithm is used to generate a\n   pairwise\
    \ KEK between the originator and a particular recipient.\n   Then, the KEK is\
    \ used to wrap the content-encryption key for that\n   recipient.  When there\
    \ is more than one recipient, the same content-\n   encryption key MUST be wrapped\
    \ for each of them.\n   A compliant implementation MUST meet the requirements\
    \ for\n   constructing an enveloped-data content type in Section 6 of [CMS].\n\
    \   A content-encryption key MUST be randomly generated for each instance\n  \
    \ of an enveloped-data content type.  The content-encryption key is\n   used to\
    \ encrypt the content.\n"
- title: 3.1.  EnvelopedData Fields
  contents:
  - "3.1.  EnvelopedData Fields\n   The enveloped-data content type is ASN.1 encoded\
    \ using the\n   EnvelopedData syntax.  The fields of the EnvelopedData syntax\
    \ MUST be\n   populated as described in Section 6 of [CMS].  The RecipientInfo\n\
    \   choice is described in Section 6.2 of [CMS], and repeated here for\n   convenience.\n\
    \      RecipientInfo ::= CHOICE {\n        ktri KeyTransRecipientInfo,\n     \
    \   kari [1] KeyAgreeRecipientInfo,\n        kekri [2] KEKRecipientInfo,\n   \
    \     pwri [3] PasswordRecipientinfo,\n        ori [4] OtherRecipientInfo }\n\
    \   For the recipients that use X25519 or X448, the RecipientInfo kari\n   choice\
    \ MUST be used.\n"
- title: 3.2.  KeyAgreeRecipientInfo Fields
  contents:
  - "3.2.  KeyAgreeRecipientInfo Fields\n   The fields of the KeyAgreeRecipientInfo\
    \ syntax MUST be populated as\n   described in this section when X25519 or X448\
    \ is employed for one or\n   more recipients.\n   The KeyAgreeRecipientInfo version\
    \ MUST be 3.\n   The KeyAgreeRecipientInfo originator provides three alternatives\
    \ for\n   identifying the originator's public key, and the originatorKey\n   alternative\
    \ MUST be used.  The originatorKey MUST contain an\n   ephemeral key for the originator.\
    \  The originatorKey algorithm field\n   MUST contain the id-X25519 or the id-X448\
    \ object identifier.  The\n   originator's ephemeral public key MUST be encoded\
    \ as an OCTET STRING.\n   The object identifiers for X25519 and X448 have been\
    \ assigned in\n   [RFC8410].  They are repeated below for convenience.\n   When\
    \ using X25519, the public key contains exactly 32 octets, and the\n   id-X25519\
    \ object identifier is used:\n      id-X25519 OBJECT IDENTIFIER ::= { 1 3 101\
    \ 110 }\n   When using X448, the public key contains exactly 56 octets, and the\n\
    \   id-X448 object identifier is used:\n      id-X448 OBJECT IDENTIFIER ::= {\
    \ 1 3 101 111 }\n   KeyAgreeRecipientInfo ukm is optional.  The processing of\
    \ the ukm\n   with the ANSI-X9.63-KDF key derivation function is described in\n\
    \   Section 2.1, and the processing of the ukm with the HKDF key\n   derivation\
    \ function is described in Section 2.2.\n   The KeyAgreeRecipientInfo keyEncryptionAlgorithm\
    \ MUST contain the\n   object identifier of the key-encryption algorithm that\
    \ will be used\n   to wrap the content-encryption key.  The conventions for using\n\
    \   AES-128, AES-192, and AES-256 in the key wrap mode are specified in\n   [CMSAES].\n\
    \   The KeyAgreeRecipientInfo recipientEncryptedKeys includes a recipient\n  \
    \ identifier and encrypted key for one or more recipients.  The\n   RecipientEncryptedKey\
    \ KeyAgreeRecipientIdentifier MUST contain either\n   the issuerAndSerialNumber\
    \ identifying the recipient's certificate or\n   the RecipientKeyIdentifier containing\
    \ the subject key identifier from\n   the recipient's certificate.  In both cases,\
    \ the recipient's\n   certificate contains the recipient's static X25519 or X448\
    \ public\n   key.  The RecipientEncryptedKey EncryptedKey MUST contain the\n \
    \  content-encryption key encrypted with the pairwise key-encryption key\n   using\
    \ the algorithm specified by the KeyWrapAlgorithm.\n"
- title: 4.  Authenticated-data Conventions
  contents:
  - "4.  Authenticated-data Conventions\n   The CMS authenticated-data content type\
    \ [CMS] consists of an\n   authenticated content, a message authentication code\
    \ (MAC), and\n   encrypted authentication keys for one or more recipients.  The\
    \ ECDH\n   key agreement algorithm is used to generate a pairwise KEK between\n\
    \   the originator and a particular recipient.  Then, the KEK is used to\n   wrap\
    \ the authentication key for that recipient.  When there is more\n   than one\
    \ recipient, the same authentication key MUST be wrapped for\n   each of them.\n\
    \   A compliant implementation MUST meet the requirements for\n   constructing\
    \ an authenticated-data content type in Section 9 of\n   [CMS].\n   An authentication\
    \ key MUST be randomly generated for each instance of\n   an authenticated-data\
    \ content type.  The authentication key is used\n   to compute the MAC over the\
    \ content.\n"
- title: 4.1.  AuthenticatedData Fields
  contents:
  - "4.1.  AuthenticatedData Fields\n   The authenticated-data content type is ASN.1\
    \ encoded using the\n   AuthenticatedData syntax.  The fields of the AuthenticatedData\
    \ syntax\n   MUST be populated as described in [CMS]; for the recipients that\
    \ use\n   X25519 or X448, the RecipientInfo kari choice MUST be used.\n"
- title: 4.2.  KeyAgreeRecipientInfo Fields
  contents:
  - "4.2.  KeyAgreeRecipientInfo Fields\n   The fields of the KeyAgreeRecipientInfo\
    \ syntax MUST be populated as\n   described in Section 3.2 of this document.\n"
- title: 5.  Authenticated-enveloped-data Conventions
  contents:
  - "5.  Authenticated-enveloped-data Conventions\n   The CMS authenticated-enveloped-data\
    \ content type [AUTHENV] consists\n   of an authenticated and encrypted content\
    \ and encrypted content-\n   authenticated-encryption keys for one or more recipients.\
    \  The ECDH\n   key agreement algorithm is used to generate a pairwise KEK between\n\
    \   the originator and a particular recipient.  Then, the KEK is used to\n   wrap\
    \ the content-authenticated-encryption key for that recipient.\n   When there\
    \ is more than one recipient, the same content-\n   authenticated-encryption key\
    \ MUST be wrapped for each of them.\n   A compliant implementation MUST meet the\
    \ requirements for\n   constructing an authenticated-data content type in Section\
    \ 2 of\n   [AUTHENV].\n   A content-authenticated-encryption key MUST be randomly\
    \ generated for\n   each instance of an authenticated-enveloped-data content type.\
    \  The\n   content-authenticated-encryption key is used to authenticate and\n\
    \   encrypt the content.\n"
- title: 5.1.  AuthEnvelopedData Fields
  contents:
  - "5.1.  AuthEnvelopedData Fields\n   The authenticated-enveloped-data content type\
    \ is ASN.1 encoded using\n   the AuthEnvelopedData syntax.  The fields of the\
    \ AuthEnvelopedData\n   syntax MUST be populated as described in [AUTHENV]; for\
    \ the\n   recipients that use X25519 or X448, the RecipientInfo kari choice\n\
    \   MUST be used.\n"
- title: 5.2.  KeyAgreeRecipientInfo Fields
  contents:
  - "5.2.  KeyAgreeRecipientInfo Fields\n   The fields of the KeyAgreeRecipientInfo\
    \ syntax MUST be populated as\n   described in Section 3.2 of this document.\n"
- title: 6.  Certificate Conventions
  contents:
  - "6.  Certificate Conventions\n   RFC 5280 [PROFILE] specifies the profile for\
    \ using X.509 Certificates\n   in Internet applications.  A recipient static public\
    \ key is needed\n   for X25519 or X448, and the originator obtains that public\
    \ key from\n   the recipient's certificate.  The conventions for carrying X25519\
    \ and\n   X448 public keys are specified in [RFC8410].\n"
- title: 7.  Key Agreement Algorithm Identifiers
  contents:
  - "7.  Key Agreement Algorithm Identifiers\n   The following object identifiers\
    \ are assigned in [CMSECC] to indicate\n   ECDH with ANSI-X9.63-KDF using various\
    \ one-way hash functions.  These\n   are expected to be used as AlgorithmIdentifiers\
    \ with a parameter that\n   specifies the key-encryption algorithm.  These are\
    \ repeated here for\n   convenience.\n      secg-scheme OBJECT IDENTIFIER ::=\
    \ {\n        iso(1) identified-organization(3) certicom(132) schemes(1) }\n  \
    \    dhSinglePass-stdDH-sha256kdf-scheme OBJECT IDENTIFIER ::= {\n        secg-scheme\
    \ 11 1 }\n      dhSinglePass-stdDH-sha384kdf-scheme OBJECT IDENTIFIER ::= {\n\
    \        secg-scheme 11 2 }\n      dhSinglePass-stdDH-sha512kdf-scheme OBJECT\
    \ IDENTIFIER ::= {\n        secg-scheme 11 3 }\n   The following object identifiers\
    \ are assigned to indicate ECDH with\n   HKDF using various one-way hash functions.\
    \  These are expected to be\n   used as AlgorithmIdentifiers with a parameter\
    \ that specifies the\n   key-encryption algorithm.\n      smime-alg OBJECT IDENTIFIER\
    \ ::= {\n         iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)\n     \
    \    pkcs-9(9) smime(16) alg(3) }\n      dhSinglePass-stdDH-hkdf-sha256-scheme\
    \ OBJECT IDENTIFIER ::= {\n         smime-alg 19 }\n      dhSinglePass-stdDH-hkdf-sha384-scheme\
    \ OBJECT IDENTIFIER ::= {\n         smime-alg 20 }\n      dhSinglePass-stdDH-hkdf-sha512-scheme\
    \ OBJECT IDENTIFIER ::= {\n         smime-alg 21 }\n"
- title: 8.  SMIMECapabilities Attribute Conventions
  contents:
  - "8.  SMIMECapabilities Attribute Conventions\n   A sending agent MAY announce\
    \ to other agents that it supports ECDH\n   key agreement using the SMIMECapabilities\
    \ signed attribute in a\n   signed message [SMIME] or a certificate [CERTCAP].\
    \  Following the\n   pattern established in [CMSECC], the SMIMECapabilities associated\n\
    \   with ECDH carries a DER-encoded object identifier that identifies\n   support\
    \ for ECDH in conjunction with a particular KDF, and it\n   includes a parameter\
    \ that names the key wrap algorithm.\n   The following SMIMECapabilities values\
    \ (in hexadecimal) from [CMSECC]\n   might be of interest to implementations that\
    \ support X25519 and X448:\n      ECDH with ANSI-X9.63-KDF using SHA-256; uses\
    \ AES-128 key wrap:\n         30 15 06 06 2B 81 04 01 0B 01 30 0B 06 09 60 86\
    \ 48 01 65 03 04\n         01 05\n      ECDH with ANSI-X9.63-KDF using SHA-384;\
    \ uses AES-128 key wrap:\n         30 15 06 06 2B 81 04 01 0B 02 30 0B 06 09 60\
    \ 86 48 01 65 03 04\n         01 05\n      ECDH with ANSI-X9.63-KDF using SHA-512;\
    \ uses AES-128 key wrap:\n         30 15 06 06 2B 81 04 01 0B 03 30 0B 06 09 60\
    \ 86 48 01 65 03 04\n         01 05\n      ECDH with ANSI-X9.63-KDF using SHA-256;\
    \ uses AES-256 key wrap:\n         30 15 06 06 2B 81 04 01 0B 01 30 0B 06 09 60\
    \ 86 48 01 65 03 04\n         01 2D\n      ECDH with ANSI-X9.63-KDF using SHA-384;\
    \ uses AES-256 key wrap:\n         30 15 06 06 2B 81 04 01 0B 02 30 0B 06 09 60\
    \ 86 48 01 65 03 04\n         01 2D\n      ECDH with ANSI-X9.63-KDF using SHA-512;\
    \ uses AES-256 key wrap:\n         30 15 06 06 2B 81 04 01 0B 03 30 0B 06 09 60\
    \ 86 48 01 65 03 04\n         01 2D\n   The following SMIMECapabilities values\
    \ (in hexadecimal) based on the\n   algorithm identifiers in Section 7 of this\
    \ document might be of\n   interest to implementations that support X25519 and\
    \ X448:\n      ECDH with HKDF using SHA-256; uses AES-128 key wrap:\n        \
    \ 30 1A 06 0B 2A 86 48 86 F7 0D 01 09 10 03 13 30 0B 06 09 60 86\n         48\
    \ 01 65 03 04 01 05\n      ECDH with HKDF using SHA-384; uses AES-128 key wrap:\n\
    \         30 1A 06 0B 2A 86 48 86 F7 0D 01 09 10 03 14 30 0B 06 09 60 86\n   \
    \      48 01 65 03 04 01 05\n      ECDH with HKDF using SHA-512; uses AES-128\
    \ key wrap:\n         30 1A 06 0B 2A 86 48 86 F7 0D 01 09 10 03 15 30 0B 06 09\
    \ 60 86\n         48 01 65 03 04 01 05\n      ECDH with HKDF using SHA-256; uses\
    \ AES-256 key wrap:\n         30 1A 06 0B 2A 86 48 86 F7 0D 01 09 10 03 13 30\
    \ 0B 06 09 60 86\n         48 01 65 03 04 01 2D\n      ECDH with HKDF using SHA-384;\
    \ uses AES-256 key wrap:\n         30 1A 06 0B 2A 86 48 86 F7 0D 01 09 10 03 14\
    \ 30 0B 06 09 60 86\n         48 01 65 03 04 01 2D\n      ECDH with HKDF using\
    \ SHA-512; uses AES-256 key wrap:\n         30 1A 06 0B 2A 86 48 86 F7 0D 01 09\
    \ 10 03 15 30 0B 06 09 60 86\n         48 01 65 03 04 01 2D\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   Please consult the security considerations of\
    \ [CMS] for security\n   considerations related to the enveloped-data content\
    \ type and the\n   authenticated-data content type.\n   Please consult the security\
    \ considerations of [AUTHENV] for security\n   considerations related to the authenticated-enveloped-data\
    \ content\n   type.\n   Please consult the security considerations of [CURVES]\
    \ for security\n   considerations related to the use of X25519 and X448.\n   The\
    \ originator uses an ephemeral public/private key pair that is\n   generated on\
    \ the same elliptic curve as the public key of the\n   recipient.  The ephemeral\
    \ key pair is used for a single CMS protected\n   content type, and then it is\
    \ discarded.  If the originator wants to\n   be able to decrypt the content (for\
    \ enveloped-data and authenticated-\n   enveloped-data) or check the authentication\
    \ (for authenticated-data),\n   then the originator needs to treat themselves\
    \ as a recipient.\n   As specified in [CMS], implementations MUST support processing\
    \ of the\n   KeyAgreeRecipientInfo ukm field; this ensures that interoperability\n\
    \   is not a concern whether the ukm is present or absent.  The ukm is\n   placed\
    \ in the entityUInfo field of the ECC-CMS-SharedInfo structure.\n   When present,\
    \ the ukm ensures that a different key-encryption key is\n   generated, even when\
    \ the originator ephemeral private key is\n   improperly used more than once.\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   One object identifier for the ASN.1 module in Appendix\
    \ A was assigned\n   in the \"SMI Security for S/MIME Module Identifiers\n   (1.2.840.113549.1.9.16.0)\"\
    \ registry on [IANA-SMI]:\n      id-mod-cms-ecdh-alg-2017 OBJECT IDENTIFIER ::=\
    \ {\n         iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)\n         pkcs-9(9)\
    \ smime(16) mod(0) 67 }\n   Three object identifiers for the Key Agreement Algorithm\
    \ Identifiers\n   in Section 7 were assigned in the \"SMI Security for S/MIME\
    \ Algorithms\n   (1.2.840.113549.1.9.16.3)\" registry on [IANA-SMI]:\n      smime-alg\
    \ OBJECT IDENTIFIER ::= {\n         iso(1) member-body(2) us(840) rsadsi(113549)\
    \ pkcs(1)\n         pkcs-9(9) smime(16) alg(3) }\n      dhSinglePass-stdDH-hkdf-sha256-scheme\
    \ OBJECT IDENTIFIER ::= {\n         smime-alg 19 }\n      dhSinglePass-stdDH-hkdf-sha384-scheme\
    \ OBJECT IDENTIFIER ::= {\n         smime-alg 20 }\n      dhSinglePass-stdDH-hkdf-sha512-scheme\
    \ OBJECT IDENTIFIER ::= {\n         smime-alg 21 }\n"
- title: 11. References
  contents:
  - '11. References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [AUTHENV]  Housley, R., \"Cryptographic Message\
    \ Syntax (CMS)\n              Authenticated-Enveloped-Data Content Type\", RFC\
    \ 5083,\n              DOI 10.17487/RFC5083, November 2007,\n              <https://www.rfc-editor.org/info/rfc5083>.\n\
    \   [CERTCAP]  Santesson, S., \"X.509 Certificate Extension for\n            \
    \  Secure/Multipurpose Internet Mail Extensions (S/MIME)\n              Capabilities\"\
    , RFC 4262, DOI 10.17487/RFC4262, December\n              2005, <https://www.rfc-editor.org/info/rfc4262>.\n\
    \   [CMS]      Housley, R., \"Cryptographic Message Syntax (CMS)\", STD 70,\n\
    \              RFC 5652, DOI 10.17487/RFC5652, September 2009,\n             \
    \ <https://www.rfc-editor.org/info/rfc5652>.\n   [CMSASN1]  Hoffman, P. and J.\
    \ Schaad, \"New ASN.1 Modules for\n              Cryptographic Message Syntax\
    \ (CMS) and S/MIME\", RFC 5911,\n              DOI 10.17487/RFC5911, June 2010,\n\
    \              <https://www.rfc-editor.org/info/rfc5911>.\n   [CMSECC]   Turner,\
    \ S. and D. Brown, \"Use of Elliptic Curve\n              Cryptography (ECC) Algorithms\
    \ in Cryptographic Message\n              Syntax (CMS)\", RFC 5753, DOI 10.17487/RFC5753,\
    \ January\n              2010, <https://www.rfc-editor.org/info/rfc5753>.\n  \
    \ [CURVES]   Langley, A., Hamburg, M., and S. Turner, \"Elliptic Curves\n    \
    \          for Security\", RFC 7748, DOI 10.17487/RFC7748, January\n         \
    \     2016, <https://www.rfc-editor.org/info/rfc7748>.\n   [HKDF]     Krawczyk,\
    \ H. and P. Eronen, \"HMAC-based Extract-and-Expand\n              Key Derivation\
    \ Function (HKDF)\", RFC 5869,\n              DOI 10.17487/RFC5869, May 2010,\n\
    \              <https://www.rfc-editor.org/info/rfc5869>.\n   [PROFILE]  Cooper,\
    \ D., Santesson, S., Farrell, S., Boeyen, S.,\n              Housley, R., and\
    \ W. Polk, \"Internet X.509 Public Key\n              Infrastructure Certificate\
    \ and Certificate Revocation List\n              (CRL) Profile\", RFC 5280, DOI\
    \ 10.17487/RFC5280, May 2008,\n              <https://www.rfc-editor.org/info/rfc5280>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC8174]\
    \  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119\
    \ Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,\
    \ <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8410]  Josefsson, S., and\
    \ J. Schaad, \"Algorithm Identifiers for\n              Ed25519,Ed448, Ed448ph,\
    \ X25519, and X448 for Use in the\n              Internet X.509 Public Key Infrastructure\"\
    , RFC 8410,\n              DOI 10.17487/RFC8410, August 2018,\n              <https://www.rfc-editor.org/info/rfc8410>.\n\
    \   [SEC1]     Standards for Efficient Cryptography, \"SEC 1: Elliptic\n     \
    \         Curve Cryptography\", Cericom Research, version 2.0, May\n         \
    \     2009, <http://www.secg.org/sec1-v2.pdf>.\n   [SMIME]    Ramsdell, B. and\
    \ S. Turner, \"Secure/Multipurpose Internet\n              Mail Extensions (S/MIME)\
    \ Version 3.2 Message\n              Specification\", RFC 5751, DOI 10.17487/RFC5751,\
    \ January\n              2010, <https://www.rfc-editor.org/info/rfc5751>.\n  \
    \ [X680]     ITU-T, \"Information technology -- Abstract Syntax Notation\n   \
    \           One (ASN.1): Specification of basic notation\", ITU-T\n          \
    \    Recommendation X.680, ISO/IEC 8824-1, August 2015,\n              <https://www.itu.int/rec/T-REC-X.680/en>.\n\
    \   [X690]     ITU-T, \"Information technology -- ASN.1 encoding rules:\n    \
    \          Specification of Basic Encoding Rules (BER), Canonical\n          \
    \    Encoding Rules (CER) and Distinguished Encoding Rules\n              (DER)\"\
    , ITU-T Recommendation X.690, ISO/IEC 8825-1, August\n              2015, <https://www.itu.int/rec/T-REC-X.690/en>.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [AES]      National Institute of Standards\
    \ and Technology, \"Advanced\n              Encryption Standard (AES)\", FIPS\
    \ PUB 197, November 2001.\n   [AESKW]    Schaad, J. and R. Housley, \"Advanced\
    \ Encryption Standard\n              (AES) Key Wrap Algorithm\", RFC 3394, DOI\
    \ 10.17487/RFC3394,\n              September 2002, <https://www.rfc-editor.org/info/rfc3394>.\n\
    \   [CMSAES]   Schaad, J., \"Use of the Advanced Encryption Standard (AES)\n \
    \             Encryption Algorithm in Cryptographic Message Syntax\n         \
    \     (CMS)\", RFC 3565, DOI 10.17487/RFC3565, July 2003,\n              <https://www.rfc-editor.org/info/rfc3565>.\n\
    \   [DH1976]   Diffie, W., and M. E. Hellman, \"New Directions in\n          \
    \    Cryptography\", IEEE Trans. on Info. Theory, Vol. IT-22,\n              November\
    \ 1976, pp. 644-654.\n   [IANA-SMI] IANA, \"Structure of Management Information\
    \ (SMI) Numbers\n              (MIB Module Registrations)\",\n              <https://www.iana.org/assignments/smi-numbers>.\n\
    \   [X963]     American National Standards Institute, \"Public-Key\n         \
    \     Cryptography for the Financial Services Industry: Key\n              Agreement\
    \ and Key Transport Using Elliptic Curve\n              Cryptography\", American\
    \ National Standard X9.63-2001,\n              November 2001.\n"
- title: Appendix A.  ASN.1 Module
  contents:
  - "Appendix A.  ASN.1 Module\n   CMSECDHAlgs-2017\n     { iso(1) member-body(2)\
    \ us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\n       smime(16) modules(0) id-mod-cms-ecdh-alg-2017(67)\
    \ }\n   DEFINITIONS IMPLICIT TAGS ::=\n   BEGIN\n   -- EXPORTS ALL\n   IMPORTS\n\
    \     KeyWrapAlgorithm\n       FROM CryptographicMessageSyntaxAlgorithms-2009\
    \  -- in [CMSASN1]\n         { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)\n\
    \           pkcs-9(9) smime(16) modules(0) id-mod-cmsalg-2001-02(37) }\n     KEY-AGREE,\
    \ SMIME-CAPS\n       FROM AlgorithmInformation-2009  -- in [CMSASN1]\n       \
    \  { iso(1) identified-organization(3) dod(6) internet(1)\n           security(5)\
    \ mechanisms(5) pkix(7) id-mod(0)\n           id-mod-algorithmInformation-02(58)\
    \ }\n     dhSinglePass-stdDH-sha256kdf-scheme,\n     dhSinglePass-stdDH-sha384kdf-scheme,\n\
    \     dhSinglePass-stdDH-sha512kdf-scheme,\n     kaa-dhSinglePass-stdDH-sha256kdf-scheme,\n\
    \     kaa-dhSinglePass-stdDH-sha384kdf-scheme,\n     kaa-dhSinglePass-stdDH-sha512kdf-scheme,\n\
    \     cap-kaa-dhSinglePass-stdDH-sha256kdf-scheme,\n     cap-kaa-dhSinglePass-stdDH-sha384kdf-scheme,\n\
    \     cap-kaa-dhSinglePass-stdDH-sha512kdf-scheme\n       FROM CMSECCAlgs-2009-02\
    \  -- in [CMSECC]\n         { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)\n\
    \           pkcs-9(9) smime(16) modules(0)\n           id-mod-cms-ecc-alg-2009-02(46)\
    \ }\n     ;\n   --\n   -- Object Identifiers\n   --\n   smime-alg OBJECT IDENTIFIER\
    \ ::= {\n      iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)\n      pkcs-9(9)\
    \ smime(16) alg(3) }\n   dhSinglePass-stdDH-hkdf-sha256-scheme OBJECT IDENTIFIER\
    \ ::= {\n      smime-alg 19 }\n   dhSinglePass-stdDH-hkdf-sha384-scheme OBJECT\
    \ IDENTIFIER ::= {\n      smime-alg 20 }\n   dhSinglePass-stdDH-hkdf-sha512-scheme\
    \ OBJECT IDENTIFIER ::= {\n      smime-alg 21 }\n   --\n   -- Extend the Key Agreement\
    \ Algorithms in [CMSECC]\n   --\n   KeyAgreementAlgs KEY-AGREE ::= { ...,\n  \
    \   kaa-dhSinglePass-stdDH-sha256kdf-scheme   |\n     kaa-dhSinglePass-stdDH-sha384kdf-scheme\
    \   |\n     kaa-dhSinglePass-stdDH-sha512kdf-scheme   |\n     kaa-dhSinglePass-stdDH-hkdf-sha256-scheme\
    \ |\n     kaa-dhSinglePass-stdDH-hkdf-sha384-scheme |\n     kaa-dhSinglePass-stdDH-hkdf-sha512-scheme\
    \ }\n   kaa-dhSinglePass-stdDH-hkdf-sha256-scheme KEY-AGREE ::= {\n     IDENTIFIER\
    \ dhSinglePass-stdDH-hkdf-sha256-scheme\n     PARAMS TYPE KeyWrapAlgorithm ARE\
    \ required\n     UKM -- TYPE unencoded data -- ARE preferredPresent\n     SMIME-CAPS\
    \ cap-kaa-dhSinglePass-stdDH-hkdf-sha256-scheme }\n   kaa-dhSinglePass-stdDH-hkdf-sha384-scheme\
    \ KEY-AGREE ::= {\n     IDENTIFIER dhSinglePass-stdDH-hkdf-sha384-scheme\n   \
    \  PARAMS TYPE KeyWrapAlgorithm ARE required\n     UKM -- TYPE unencoded data\
    \ -- ARE preferredPresent\n     SMIME-CAPS cap-kaa-dhSinglePass-stdDH-hkdf-sha384-scheme\
    \ }\n   kaa-dhSinglePass-stdDH-hkdf-sha512-scheme KEY-AGREE ::= {\n     IDENTIFIER\
    \ dhSinglePass-stdDH-hkdf-sha512-scheme\n     PARAMS TYPE KeyWrapAlgorithm ARE\
    \ required\n     UKM -- TYPE unencoded data -- ARE preferredPresent\n     SMIME-CAPS\
    \ cap-kaa-dhSinglePass-stdDH-hkdf-sha512-scheme }\n   --\n   -- Extend the S/MIME\
    \ CAPS in [CMSECC]\n   --\n   SMimeCAPS SMIME-CAPS ::= { ...,\n     kaa-dhSinglePass-stdDH-sha256kdf-scheme.&smimeCaps\
    \   |\n     kaa-dhSinglePass-stdDH-sha384kdf-scheme.&smimeCaps   |\n     kaa-dhSinglePass-stdDH-sha512kdf-scheme.&smimeCaps\
    \   |\n     kaa-dhSinglePass-stdDH-hkdf-sha256-scheme.&smimeCaps |\n     kaa-dhSinglePass-stdDH-hkdf-sha384-scheme.&smimeCaps\
    \ |\n     kaa-dhSinglePass-stdDH-hkdf-sha512-scheme.&smimeCaps }\n   cap-kaa-dhSinglePass-stdDH-hkdf-sha256-scheme\
    \ SMIME-CAPS ::= {\n     TYPE KeyWrapAlgorithm\n     IDENTIFIED BY dhSinglePass-stdDH-hkdf-sha256-scheme\
    \ }\n   cap-kaa-dhSinglePass-stdDH-hkdf-sha384-scheme SMIME-CAPS ::= {\n     TYPE\
    \ KeyWrapAlgorithm\n     IDENTIFIED BY dhSinglePass-stdDH-hkdf-sha384-scheme}\n\
    \   cap-kaa-dhSinglePass-stdDH-hkdf-sha512-scheme SMIME-CAPS ::= {\n     TYPE\
    \ KeyWrapAlgorithm\n     IDENTIFIED BY dhSinglePass-stdDH-hkdf-sha512-scheme }\n\
    \   END\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Many thanks to Roni Even, Daniel Migault, Eric Rescorla,\
    \ Jim Schaad,\n   Stefan Santesson, and Sean Turner for their review and insightful\n\
    \   suggestions.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Russ Housley\n   918 Spring Knoll Drive\n   Herndon, VA\
    \  20170\n   United States of America\n   Email: housley@vigilsec.com\n"
