- title: __initial_text__
  contents:
  - '               SMTP Service Extension for Authentication

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines a Simple Mail Transport Protocol (SMTP)\n\
    \   extension whereby an SMTP client may indicate an authentication\n   mechanism\
    \ to the server, perform an authentication protocol exchange,\n   and optionally\
    \ negotiate a security layer for subsequent protocol\n   interactions during this\
    \ session.  This extension includes a profile\n   of the Simple Authentication\
    \ and Security Layer (SASL) for SMTP.\n   This document obsoletes RFC 2554.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. How to Read This Document .......................................2\n  \
    \ 3. The Authentication Service Extension ............................3\n   4.\
    \ The AUTH Command ................................................3\n      4.1.\
    \ Examples ...................................................7\n   5. The AUTH\
    \ Parameter to the MAIL FROM command .....................9\n      5.1. Examples\
    \ ..................................................10\n   6. Status Codes ...................................................11\n\
    \   7. Additional requirements on servers .............................12\n  \
    \ 8. Formal Syntax ..................................................13\n   9.\
    \ Security Considerations ........................................14\n   10. IANA\
    \ Considerations ...........................................15\n   11. Normative\
    \ References ..........................................15\n   12. Informative\
    \ References ........................................16\n   13. Acknowledgments\
    \ ...............................................17\n   14. Additional Requirements\
    \ When Using SASL PLAIN over TLS ........17\n   15. Changes since RFC 2554 ........................................18\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document defines a Simple Mail Transport Protocol (SMTP)\n\
    \   extension whereby an SMTP client may indicate an authentication\n   mechanism\
    \ to the server, perform an authentication protocol exchange,\n   optionally negotiate\
    \ a security layer for subsequent protocol\n   interactions during this session\
    \ and, during a mail transaction,\n   optionally specify a mailbox associated\
    \ with the identity that\n   submitted the message to the mail delivery system.\n\
    \   This extension includes a profile of the Simple Authentication and\n   Security\
    \ Layer (SASL) for SMTP.\n   When compared to RFC 2554, this document deprecates\
    \ use of the 538\n   response code, adds a new Enhanced Status Code, adds a requirement\
    \ to\n   support SASLprep profile for preparing authorization identities,\n  \
    \ recommends use of RFC 3848 transmission types in the Received trace\n   header\
    \ field, and clarifies interaction with SMTP PIPELINING\n   [PIPELINING] extension.\n"
- title: 2.  How to Read This Document
  contents:
  - "2.  How to Read This Document\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [KEYWORDS].\n   In examples, \"C:\" and \"S:\" indicate lines sent by the\
    \ client and\n   server, respectively.\n"
- title: 3.  The Authentication Service Extension
  contents:
  - "3.  The Authentication Service Extension\n   1.  The name of this [SMTP] service\
    \ extension is \"Authentication\".\n   2.  The EHLO keyword value associated with\
    \ this extension is \"AUTH\".\n   3.  The AUTH EHLO keyword contains as a parameter\
    \ a space-separated\n       list of the names of available [SASL] mechanisms.\
    \  The list of\n       available mechanisms MAY change after a successful STARTTLS\n\
    \       command [SMTP-TLS].\n   4.  A new [SMTP] verb \"AUTH\" is defined.\n \
    \  5.  An optional parameter using the keyword \"AUTH\" is added to the\n    \
    \   MAIL FROM command, and extends the maximum line length of the\n       MAIL\
    \ FROM command by 500 characters.\n   6.  This extension is appropriate for the\
    \ submission protocol\n       [SUBMIT].\n"
- title: 4.  The AUTH Command
  contents:
  - "4.  The AUTH Command\n   AUTH mechanism [initial-response]\n      Arguments:\n\
    \          mechanism: A string identifying a [SASL] authentication\n         \
    \ mechanism.\n          initial-response: An optional initial client response.\
    \  If\n          present, this response MUST be encoded as described in Section\n\
    \          4 of [BASE64] or contain a single character \"=\".\n      Restrictions:\n\
    \          After an AUTH command has been successfully completed, no more\n  \
    \        AUTH commands may be issued in the same session.  After a\n         \
    \ successful AUTH command completes, a server MUST reject any\n          further\
    \ AUTH commands with a 503 reply.\n          The AUTH command is not permitted\
    \ during a mail transaction.\n          An AUTH command issued during a mail transaction\
    \ MUST be\n          rejected with a 503 reply.\n      Discussion:\n         \
    \ The AUTH command initiates a [SASL] authentication exchange\n          between\
    \ the client and the server.  The client identifies the\n          SASL mechanism\
    \ to use with the first parameter of the AUTH\n          command.  If the server\
    \ supports the requested authentication\n          mechanism, it performs the\
    \ SASL exchange to authenticate the\n          user.  Optionally, it also negotiates\
    \ a security layer for\n          subsequent protocol interactions during this\
    \ session.  If the\n          requested authentication mechanism is invalid (e.g.,\
    \ is not\n          supported or requires an encryption layer), the server rejects\n\
    \          the AUTH command with a 504 reply.  If the server supports the\n  \
    \        [ESMTP-CODES] extension, it SHOULD return a 5.5.4 enhanced\n        \
    \  response code.\n          The SASL authentication exchange consists of a series\
    \ of\n          server challenges and client responses that are specific to\n\
    \          the chosen [SASL] mechanism.\n          A server challenge is sent\
    \ as a 334 reply with the text part\n          containing the [BASE64] encoded\
    \ string supplied by the SASL\n          mechanism.  This challenge MUST NOT contain\
    \ any text other\n          than the BASE64 encoded challenge.\n          A client\
    \ response consists of a line containing a [BASE64]\n          encoded string.\
    \  If the client wishes to cancel the\n          authentication exchange, it issues\
    \ a line with a single \"*\".\n          If the server receives such a response,\
    \ it MUST reject the\n          AUTH command by sending a 501 reply.\n       \
    \   The optional initial response argument to the AUTH command is\n          used\
    \ to save a round-trip when using authentication mechanisms\n          that support\
    \ an initial client response.  If the initial\n          response argument is\
    \ omitted and the chosen mechanism requires\n          an initial client response,\
    \ the server MUST proceed as defined\n          in Section 5.1 of [SASL].  In\
    \ SMTP, a server challenge that\n          contains no data is defined as a 334\
    \ reply with no text part.\n          Note that there is still a space following\
    \ the reply code, so\n          the complete response line is \"334 \".\n    \
    \      Note that the AUTH command is still subject to the line length\n      \
    \    limitations defined in [SMTP].  If use of the initial response\n        \
    \  argument would cause the AUTH command to exceed this length,\n          the\
    \ client MUST NOT use the initial response parameter (and\n          instead proceed\
    \ as defined in Section 5.1 of [SASL]).\n          If the client is transmitting\
    \ an initial response of zero\n          length, it MUST instead transmit the\
    \ response as a single\n          equals sign (\"=\").  This indicates that the\
    \ response is\n          present, but contains no data.\n          If the client\
    \ uses an initial-response argument to the AUTH\n          command with a SASL\
    \ mechanism in which the client does not\n          begin the authentication exchange,\
    \ the server MUST reject the\n          AUTH command with a 501 reply.  Servers\
    \ using the enhanced\n          status codes extension [ESMTP-CODES] SHOULD return\
    \ an enhanced\n          status code of 5.7.0 in this case.\n          If the\
    \ server cannot [BASE64] decode any client response, it\n          MUST reject\
    \ the AUTH command with a 501 reply (and an enhanced\n          status code of\
    \ 5.5.2).  If the client cannot BASE64 decode any\n          of the server's challenges,\
    \ it MUST cancel the authentication\n          using the \"*\" response.  In particular,\
    \ servers and clients\n          MUST reject (and not ignore) any character not\
    \ explicitly\n          allowed by the BASE64 alphabet, and MUST reject any sequence\n\
    \          of BASE64 characters that contains the pad character ('=')\n      \
    \    anywhere other than the end of the string (e.g., \"=AAA\" and\n         \
    \ \"AAA=BBB\" are not allowed).\n          Note that these [BASE64] strings can\
    \ be much longer than\n          normal SMTP commands.  Clients and servers MUST\
    \ be able to\n          handle the maximum encoded size of challenges and responses\n\
    \          generated by their supported authentication mechanisms.  This\n   \
    \       requirement is independent of any line length limitations the\n      \
    \    client or server may have in other parts of its protocol\n          implementation.\
    \  (At the time of writing of this document,\n          12288 octets is considered\
    \ to be a sufficient line length\n          limit for handling of deployed authentication\
    \ mechanisms.)\n          If, during an authentication exchange, the server receives\
    \ a\n          line that is longer than the server's authentication buffer,\n\
    \          the server fails the AUTH command with the 500 reply.  Servers\n  \
    \        using the enhanced status codes extension [ESMTP-CODES] SHOULD\n    \
    \      return an enhanced status code of 5.5.6 in this case.\n          The authorization\
    \ identity generated by this [SASL] exchange\n          is a \"simple username\"\
    \ (in the sense defined in [SASLprep]),\n          and both client and server\
    \ SHOULD (*) use the [SASLprep]\n          profile of the [StringPrep] algorithm\
    \ to prepare these names\n          for transmission or comparison.  If preparation\
    \ of the\n          authorization identity fails or results in an empty string\n\
    \          (unless it was transmitted as the empty string), the server\n     \
    \     MUST fail the authentication.\n      (*) Note: Future revision of this specification\
    \ may change this\n      requirement to MUST.  Currently, the SHOULD is used in\
    \ order to\n      avoid breaking the majority of existing implementations.\n \
    \  If the server is unable to authenticate the client, it SHOULD reject\n   the\
    \ AUTH command with a 535 reply unless a more specific error code\n   is appropriate.\
    \  Should the client successfully complete the\n   exchange, the SMTP server issues\
    \ a 235 reply.  (Note that the SMTP\n   protocol doesn't support the SASL feature\
    \ of returning additional\n   data with a successful outcome.)  These status codes,\
    \ along with\n   others defined by this extension, are discussed in Section 6\
    \ of this\n   document.\n   If a security layer is negotiated during the SASL\
    \ exchange, it takes\n   effect for the client on the octet immediately following\
    \ the CRLF\n   that concludes the last response generated by the client.  For\
    \ the\n   server, it takes effect immediately following the CRLF of its success\n\
    \   reply.\n   When a security layer takes effect, the SMTP protocol is reset\
    \ to the\n   initial state (the state in SMTP after a server issues a 220 service\n\
    \   ready greeting).  The server MUST discard any knowledge obtained from\n  \
    \ the client, such as the EHLO argument, which was not obtained from\n   the SASL\
    \ negotiation itself.  Likewise, the client MUST discard any\n   knowledge obtained\
    \ from the server, such as the list of SMTP service\n   extensions, which was\
    \ not obtained from the SASL negotiation itself.\n   (Note that a client MAY compare\
    \ the advertised SASL mechanisms before\n   and after authentication in order\
    \ to detect an active down-\n   negotiation attack).\n   The client SHOULD send\
    \ an EHLO command as the first command after a\n   successful SASL negotiation\
    \ that results in the enabling of a\n   security layer.\n   When an entity (whether\
    \ it is the client or the server end) is\n   sending data, and both [TLS] and\
    \ SASL security layers are in effect,\n   the TLS encoding MUST be applied after\
    \ the SASL encoding, regardless\n   of the order in which the layers were negotiated.\n\
    \   The service name specified by this protocol's profile of SASL is\n   \"smtp\"\
    .  This service name is also to be used for the [SUBMIT]\n   protocol.\n   If\
    \ an AUTH command fails, the client MAY proceed without\n   authentication.  Alternatively,\
    \ the client MAY try another\n   authentication mechanism or present different\
    \ credentials by issuing\n   another AUTH\n   Note: A server implementation MUST\
    \ implement a configuration in which\n   it does NOT permit any plaintext password\
    \ mechanisms, unless either\n   the STARTTLS [SMTP-TLS] command has been negotiated\
    \ or some other\n   mechanism that protects the session from password snooping\
    \ has been\n   provided.  Server sites SHOULD NOT use any configuration which\n\
    \   permits a plaintext password mechanism without such a protection\n   mechanism\
    \ against password snooping.\n   To ensure interoperability, client and server\
    \ implementations of this\n   extension MUST implement the [PLAIN] SASL mechanism\
    \ running over TLS\n   [TLS] [SMTP-TLS].  See also Section 15 for additional requirements\
    \ on\n   implementations of [PLAIN] over [TLS].\n   Note that many existing client\
    \ and server implementations implement\n   CRAM-MD5 [CRAM-MD5] SASL mechanism.\
    \  In order to ensure\n   interoperability with deployed software, new implementations\
    \ MAY\n   implement it; however, implementations should be aware that this SASL\n\
    \   mechanism doesn't provide any server authentication.  Note that at\n   the\
    \ time of writing of this document the SASL Working Group is\n   working on several\
    \ replacement SASL mechanisms that provide server\n   authentication and other\
    \ features.\n   When the AUTH command is used together with the [PIPELINING]\n\
    \   extension, it MUST be the last command in a pipelined group of\n   commands.\
    \  The only exception to this rule is when the AUTH command\n   contains an initial\
    \ response for a SASL mechanism that allows the\n   client to send data first,\
    \ the SASL mechanism is known to complete in\n   one round-trip, and a security\
    \ layer is not negotiated by the client.\n   Two examples of such SASL mechanisms\
    \ are PLAIN [PLAIN] and EXTERNAL\n   [SASL].\n"
- title: 4.1. Examples
  contents:
  - "4.1. Examples\n   Here is an example of a client attempting AUTH using the [PLAIN]\
    \ SASL\n   mechanism under a TLS layer, and making use of the initial client\n\
    \   response:\n   S: 220-smtp.example.com ESMTP Server\n   C: EHLO client.example.com\n\
    \   S: 250-smtp.example.com Hello client.example.com\n   S: 250-AUTH GSSAPI DIGEST-MD5\n\
    \   S: 250-ENHANCEDSTATUSCODES\n   S: 250 STARTTLS\n   C: STARTTLS\n   S: 220\
    \ Ready to start TLS\n     ... TLS negotiation proceeds, further commands\n  \
    \       protected by TLS layer ...\n   C: EHLO client.example.com\n   S: 250-smtp.example.com\
    \ Hello client.example.com\n   S: 250 AUTH GSSAPI DIGEST-MD5 PLAIN\n   C: AUTH\
    \ PLAIN dGVzdAB0ZXN0ADEyMzQ=\n   S: 235 2.7.0 Authentication successful\n   Here\
    \ is another client that is attempting AUTH PLAIN under a TLS\n   layer, this\
    \ time without the initial response.  Parts of the\n   negotiation before the\
    \ TLS layer was established have been omitted:\n     ... TLS negotiation proceeds,\
    \ further commands\n         protected by TLS layer ...\n   C: EHLO client.example.com\n\
    \   S: 250-smtp.example.com Hello client.example.com\n   S: 250 AUTH GSSAPI DIGEST-MD5\
    \ PLAIN\n   C: AUTH PLAIN\n    (note: there is a single space following the 334\n\
    \     on the following line)\n   S: 334\n   C: dGVzdAB0ZXN0ADEyMzQ=\n   S: 235\
    \ 2.7.0 Authentication successful\n   Here is an example using CRAM-MD5 [CRAM-MD5],\
    \ a mechanism in which\n   the client does not begin the authentication exchange,\
    \ and includes a\n   server challenge:\n   S: 220-smtp.example.com ESMTP Server\n\
    \   C: EHLO client.example.com\n   S: 250-smtp.example.com Hello client.example.com\n\
    \   S: 250-AUTH DIGEST-MD5 CRAM-MD5\n   S: 250-ENHANCEDSTATUSCODES\n   S: 250\
    \ STARTTLS\n   C: AUTH CRAM-MD5\n   S: 334 PDQxOTI5NDIzNDEuMTI4Mjg0NzJAc291cmNlZm91ci5hbmRyZXcuY211LmVk\n\
    \      dT4=\n   C: cmpzMyBlYzNhNTlmZWQzOTVhYmExZWM2MzY3YzRmNGI0MWFjMA==\n   S:\
    \ 235 2.7.0 Authentication successful\n   Here is an example of a client attempting\
    \ AUTH EXTERNAL under TLS,\n   using the derived authorization ID (and thus a\
    \ zero-length initial\n   client response).\n   S: 220-smtp.example.com ESMTP\
    \ Server\n   C: EHLO client.example.com\n   S: 250-smtp.example.com Hello client.example.com\n\
    \   S: 250-AUTH GSSAPI DIGEST-MD5\n   S: 250-ENHANCEDSTATUSCODES\n   S: 250 STARTTLS\n\
    \   C: STARTTLS\n   S: 220 Ready to start TLS\n     ... TLS negotiation proceeds,\
    \ further commands\n         protected by TLS layer ...\n   C: EHLO client.example.com\n\
    \   S: 250-smtp.example.com Hello client.example.com\n   S: 250 AUTH EXTERNAL\
    \ GSSAPI DIGEST-MD5 PLAIN\n   C: AUTH EXTERNAL =\n   S: 235 2.7.0 Authentication\
    \ successful\n"
- title: 5.  The AUTH Parameter to the MAIL FROM command
  contents:
  - "5.  The AUTH Parameter to the MAIL FROM command\n   AUTH=mailbox\n   Arguments:\n\
    \        A <mailbox> (see Section 4.1.2 of [SMTP]) that is associated\n      \
    \  with the identity that submitted the message to the delivery\n        system,\
    \ or the two character sequence \"<>\" indicating such an\n        identity is\
    \ unknown or insufficiently authenticated.  To comply\n        with restrictions\
    \ imposed on ESMTP parameters, the <mailbox> is\n        encoded inside an xtext.\
    \  The syntax of an xtext is described in\n        Section 4 of [ESMTP-DSN].\n\
    \   Note:\n        For the purposes of this discussion, \"authenticated identity\"\
    \n        refers to the identity (if any) derived from the authorization\n   \
    \     identity of previous AUTH command, while the terms \"authorized\n      \
    \  identity\" and \"supplied <mailbox>\" refer to the sender identity\n      \
    \  that is being associated with a particular message.  Note that\n        one\
    \ authenticated identity may be able to identify messages as\n        being sent\
    \ by any number of authorized identities within a\n        single session.  For\
    \ example, this may be the case when an SMTP\n        server (one authenticated\
    \ identity) is processing its queue\n        (many messages with distinct authorized\
    \ identities).\n   Discussion:\n        The optional AUTH parameter to the MAIL\
    \ FROM command allows\n        cooperating agents in a trusted environment to\
    \ communicate the\n        authorization identity associated with individual messages.\n\
    \        If the server trusts the authenticated identity of the client to\n  \
    \      assert that the message was originally submitted by the supplied\n    \
    \    <mailbox>, then the server SHOULD supply the same <mailbox> in\n        an\
    \ AUTH parameter when relaying the message to any other server\n        which\
    \ supports the AUTH extension.\n        For this reason, servers that advertise\
    \ support for this\n        extension MUST support the AUTH parameter to the MAIL\
    \ FROM\n        command even when the client has not authenticated itself to the\n\
    \        server.\n        A MAIL FROM parameter of AUTH=<> indicates that the\
    \ original\n        submitter of the message is not known.  The server MUST NOT\n\
    \        treat the message as having been originally submitted by the\n      \
    \  authenticated identity that resulted from the AUTH command.\n        If the\
    \ AUTH parameter to the MAIL FROM command is not supplied,\n        the client\
    \ has authenticated, and the server believes the\n        message is an original\
    \ submission, the server MAY generate a\n        <mailbox> from the user's authenticated\
    \ identity for use in an\n        AUTH parameter when relaying the message to\
    \ any server which\n        supports the AUTH extension.  The generated <mailbox>\
    \ is\n        implementation specific, but it MUST conform to the syntax of\n\
    \        [SMTP].  If the implementation cannot generate a valid\n        <mailbox>,\
    \ it MUST transmit AUTH=<> when relaying this message.\n        If the server\
    \ does not sufficiently trust the authenticated\n        identity of the client,\
    \ or if the client is not authenticated,\n        then the server MUST behave\
    \ as if the AUTH=<> parameter was\n        supplied.  The server MAY, however,\
    \ write the value of any\n        supplied AUTH parameter to a log file.\n   \
    \     If an AUTH=<> parameter was supplied, either explicitly or due\n       \
    \ to the requirement in the previous paragraph, then the server\n        MUST\
    \ supply the AUTH=<> parameter when relaying the message to\n        any server\
    \ which it has authenticated to using the AUTH\n        extension.\n        A\
    \ server MAY treat expansion of a mailing list as a new\n        submission, setting\
    \ the AUTH parameter to the mailing list\n        address or mailing list administration\
    \ address when relaying the\n        message to list subscribers.\n        Note\
    \ that an implementation which is hard-coded to treat all\n        clients as\
    \ being insufficiently trusted is compliant with this\n        specification.\
    \  In that case, the implementation does nothing\n        more than parse and\
    \ discard syntactically valid AUTH parameters\n        to the MAIL FROM command,\
    \ and supply AUTH=<> parameters to any\n        servers that it authenticates\
    \ to.\n"
- title: 5.1.  Examples
  contents:
  - "5.1.  Examples\n   An example where the original identity of the sender is trusted\
    \ and\n   known:\n   C: MAIL FROM:<e=mc2@example.com> AUTH=e+3Dmc2@example.com\n\
    \   S: 250 OK\n   One example where the identity of the sender is not trusted\
    \ or is\n   otherwise being suppressed by the client:\n   C: MAIL FROM:<john+@example.org>\
    \ AUTH=<>\n   S: 250 OK\n"
- title: 6.  Status Codes
  contents:
  - "6.  Status Codes\n   The following error codes may be used to indicate various\
    \ success or\n   failure conditions.  Servers that return enhanced status codes\n\
    \   [ESMTP-CODES] SHOULD use the enhanced codes suggested here.\n   235 2.7.0\
    \  Authentication Succeeded\n   This response to the AUTH command indicates that\
    \ the authentication\n   was successful.\n   432 4.7.12  A password transition\
    \ is needed\n   This response to the AUTH command indicates that the user needs\
    \ to\n   transition to the selected authentication mechanism.  This is\n   typically\
    \ done by authenticating once using the [PLAIN]\n   authentication mechanism.\
    \  The selected mechanism SHOULD then work\n   for authentications in subsequent\
    \ sessions.\n   454 4.7.0  Temporary authentication failure\n   This response\
    \ to the AUTH command indicates that the authentication\n   failed due to a temporary\
    \ server failure.  The client SHOULD NOT\n   prompt the user for another password\
    \ in this case, and should instead\n   notify the user of server failure.\n  \
    \ 534 5.7.9  Authentication mechanism is too weak\n   This response to the AUTH\
    \ command indicates that the selected\n   authentication mechanism is weaker than\
    \ server policy permits for\n   that user.  The client SHOULD retry with a new\
    \ authentication\n   mechanism.\n   535 5.7.8  Authentication credentials invalid\n\
    \   This response to the AUTH command indicates that the authentication\n   failed\
    \ due to invalid or insufficient authentication credentials.  In\n   this case,\
    \ the client SHOULD ask the user to supply new credentials\n   (such as by presenting\
    \ a password dialog box).\n   500 5.5.6  Authentication Exchange line is too long\n\
    \   This response to the AUTH command indicates that the authentication\n   failed\
    \ due to the client sending a [BASE64] response that is longer\n   than the maximum\
    \ buffer size available for the currently selected\n   SASL mechanism.\n   530\
    \ 5.7.0  Authentication required\n   This response SHOULD be returned by any command\
    \ other than AUTH,\n   EHLO, HELO, NOOP, RSET, or QUIT when server policy requires\n\
    \   authentication in order to perform the requested action and\n   authentication\
    \ is not currently in force.\n   538 5.7.11  Encryption required for requested\
    \ authentication\n               mechanism\n   This response to the AUTH command\
    \ indicates that the selected\n   authentication mechanism may only be used when\
    \ the underlying SMTP\n   connection is encrypted.  Note that this response code\
    \ is documented\n   here for historical purposes only.  Modern implementations\
    \ SHOULD NOT\n   advertise mechanisms that are not permitted due to lack of\n\
    \   encryption, unless an encryption layer of sufficient strength is\n   currently\
    \ being employed.\n   This document adds several new enhanced status codes to\
    \ the list\n   defined in [ENHANCED]:\n   The following 3 Enhanced Status Codes\
    \ were defined above:\n       5.7.8 Authentication credentials invalid\n     \
    \  5.7.9 Authentication mechanism is too weak\n       5.7.11 Encryption required\
    \ for requested authentication mechanism\n   X.5.6     Authentication Exchange\
    \ line is too long\n   This enhanced status code SHOULD be returned when the server\
    \ fails\n   the AUTH command due to the client sending a [BASE64] response which\n\
    \   is longer than the maximum buffer size available for the currently\n   selected\
    \ SASL mechanism.  This is useful for both permanent and\n   persistent transient\
    \ errors.\n"
- title: 7.  Additional Requirements on Servers
  contents:
  - "7.  Additional Requirements on Servers\n   As described in Section 4.4 of [SMTP],\
    \ an SMTP server that receives a\n   message for delivery or further processing\
    \ MUST insert the\n   \"Received:\" header field at the beginning of the message\
    \ content.\n   This document places additional requirements on the content of\
    \ a\n   generated \"Received:\" header field.  Upon successful authentication,\n\
    \   a server SHOULD use the \"ESMTPA\" or the \"ESMTPSA\" [SMTP-TT] (when\n  \
    \ appropriate) keyword in the \"with\" clause of the Received header\n   field.\n"
- title: 8.  Formal Syntax
  contents:
  - "8.  Formal Syntax\n   The following syntax specification uses the Augmented Backus-Naur\n\
    \   Form notation as specified in [ABNF].  Non-terminals referenced but\n   not\
    \ defined below are as defined by [ABNF] or [SASL].  The non-\n   terminal <mailbox>\
    \ is defined in [SMTP].\n   Except as noted otherwise, all alphabetic characters\
    \ are case-\n   insensitive.  The use of upper or lower case characters to define\n\
    \   token strings is for editorial clarity only.  Implementations MUST\n   accept\
    \ these strings in a case-insensitive fashion.\n      hexchar         = \"+\"\
    \ HEXDIG HEXDIG\n      xchar           = %x21-2A / %x2C-3C / %x3E-7E\n       \
    \                 ;; US-ASCII except for \"+\", \"=\", SP, and CTL\n      xtext\
    \           = *(xchar / hexchar)\n                        ;; non-US-ASCII is only\
    \ allowed as hexchar\n      auth-command    = \"AUTH\" SP sasl-mech [SP initial-response]\n\
    \                        *(CRLF [base64]) [CRLF cancel-response]\n           \
    \             CRLF\n                        ;; <sasl-mech> is defined in [SASL]\n\
    \      auth-param      = \"AUTH=\" xtext\n                        ;; Parameter\
    \ to the MAIL FROM command.\n                        ;; This non-terminal complies\
    \ with\n                        ;; syntax defined by esmtp-param [SMTP].\n   \
    \                     ;;\n                        ;; The decoded form of the xtext\
    \ MUST be\n                        ;; either a <mailbox> or the two\n        \
    \                ;; characters \"<>\"\n      base64          = base64-terminal\
    \ /\n                        ( 1*(4base64-char) [base64-terminal] )\n      base64-char\
    \     = ALPHA / DIGIT / \"+\" / \"/\"\n                        ;; Case-sensitive\n\
    \      base64-terminal = (2base64-char \"==\") / (3base64-char \"=\")\n      continue-req\
    \    = \"334\" SP [base64] CRLF\n                        ;; Intermediate response\
    \ to the AUTH\n                        ;; command.\n                        ;;\
    \ This non-terminal complies with\n                        ;; syntax defined by\
    \ Reply-line [SMTP].\n      initial-response= base64 / \"=\"\n      cancel-response\
    \ = \"*\"\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   Security issues are discussed throughout this\
    \ memo.\n   If a client uses this extension to get an encrypted tunnel through\
    \ an\n   insecure network to a cooperating server, it needs to be configured\n\
    \   to never send mail to that server when the connection is not mutually\n  \
    \ authenticated and encrypted.  Otherwise, an attacker could steal the\n   client's\
    \ mail by hijacking the [SMTP] connection and either\n   pretending the server\
    \ does not support the Authentication extension\n   or causing all AUTH commands\
    \ to fail.\n   Before the [SASL] negotiation has begun, any protocol interactions\n\
    \   are performed in the clear and may be modified by an active attacker.\n  \
    \ For this reason, clients and servers MUST discard any knowledge\n   obtained\
    \ prior to the start of the SASL negotiation upon the\n   establishment of a security\
    \ layer.\n   This mechanism does not protect the TCP port, so an active attacker\n\
    \   may redirect a relay connection attempt (i.e., a connection between\n   two\
    \ Mail Transfer Agents (MTAs)) to the submission port [SUBMIT].\n   The AUTH=<>\
    \ parameter prevents such an attack from causing a relayed\n   message and, in\
    \ the absence of other envelope authentication, from\n   picking up the authentication\
    \ of the relay client.\n   A message submission client may require the user to\
    \ authenticate\n   whenever a suitable [SASL] mechanism is advertised.  Therefore,\
    \ it\n   may not be desirable for a submission server [SUBMIT] to advertise a\n\
    \   SASL mechanism when use of that mechanism grants the clients no\n   benefits\
    \ over anonymous submission.\n   Servers MAY implement a policy whereby the connection\
    \ is dropped\n   after a number of failed authentication attempts.  If they do\
    \ so,\n   they SHOULD NOT drop the connection until at least 3 attempts to\n \
    \  authenticate have failed.\n   If an implementation supports SASL mechanisms\
    \ that are vulnerable to\n   passive eavesdropping attacks (such as [PLAIN]),\
    \ then the\n   implementation MUST support at least one configuration where these\n\
    \   SASL mechanisms are not advertised or used without the presence of an\n  \
    \ external security layer such as [TLS].\n   This extension is not intended to\
    \ replace or be used instead of end-\n   to-end message signature and encryption\
    \ systems such as [S/MIME] or\n   [PGP].  This extension addresses a different\
    \ problem than end-to-end\n   systems; it has the following key differences:\n\
    \   1.  It is generally useful only within a trusted enclave.\n   2.  It protects\
    \ the entire envelope of a message, not just the\n       message's body.\n   3.\
    \  It authenticates the message submission, not authorship of the\n       message\
    \ content.\n   4.  When mutual authentication is used along with a security layer,\n\
    \       it can give the sender some assurance that the message was\n       successfully\
    \ delivered to the next hop.\n   Additional security considerations are mentioned\
    \ in the [SASL]\n   specification.  Additional security considerations specific\
    \ to a\n   particular SASL mechanism are described in the relevant\n   specification.\
    \  Additional security considerations for [PLAIN] over\n   [TLS] are mentioned\
    \ in Section 15 of this document.\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   IANA updated the entry for the \"smtp\" SASL protocol\
    \ name to point at\n   this document.\n   IANA updated the registration of the\
    \ Authentication SMTP service\n   extension as defined in Section 3 of this document.\
    \  This registry is\n   currently located at <http://www.iana.org/assignments/mail-\n\
    \   parameters>.\n"
- title: 11.  Normative References
  contents:
  - "11.  Normative References\n   [ABNF]        Crocker, D. and P. Overell, \"Augmented\
    \ BNF for Syntax\n                 Specifications: ABNF\", RFC 4234, October 2005.\n\
    \   [BASE64]      Josefsson, S., \"The Base16, Base32, and Base64 Data\n     \
    \            Encodings\", RFC 4648, October 2006.\n   [ESMTP-CODES] Freed, N.,\
    \ \"SMTP Service Extension for Returning\n                 Enhanced Error Codes\"\
    , RFC 2034, October 1996.\n   [ENHANCED]    Vaudreuil, G., \"Enhanced Mail System\
    \ Status Codes\", RFC\n                 3463, January 2003.\n   [ESMTP-DSN]  \
    \ Moore, K., \"Simple Mail Transfer Protocol (SMTP)\n                 Service\
    \ Extension Delivery Status Notifications\n                 (DSNs)\", RFC 3461,\
    \ January 2003.\n   [KEYWORDS]    Bradner, S., \"Key words for use in RFCs to\
    \ Indicate\n                 Requirement Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [SASL]        Melnikov, A. and K. Zeilenga, \"Simple Authentication\n    \
    \             and Security Layer (SASL)\", RFC 4422, June 2006.\n   [SASLprep]\
    \    Zeilenga, K., \"SASLprep: Stringprep Profile for User\n                 Names\
    \ and Passwords\", RFC 4013, February 2005.\n   [SMTP]        Klensin, J., \"\
    Simple Mail Transfer Protocol\", RFC 2821,\n                 April 2001.\n   [SMTP-TLS]\
    \    Hoffman, P., \"SMTP Service Extension for Secure SMTP\n                 over\
    \ Transport Layer Security\", RFC 3207, February\n                 2002.\n   [StringPrep]\
    \  Hoffman, P. and M. Blanchet, \"Preparation of\n                 Internationalized\
    \ Strings (\"stringprep\")\", RFC 3454,\n                 December 2002.\n   [SUBMIT]\
    \      Gellens, R. and J. Klensin, \"Message Submission for\n                \
    \ Mail\", RFC 4409, April 2006.\n   [SMTP-TT]     Newman, C., \"ESMTP and LMTP\
    \ Transmission Types\n                 Registration\", RFC 3848, July 2004.\n\
    \   [PLAIN]       Zeilenga, K., Ed., \"The PLAIN Simple Authentication and\n \
    \                Security Layer (SASL) Mechanism\", RFC 4616, August\n       \
    \          2006.\n   [X509]        Housley, R., Polk, W., Ford, W., and D. Solo,\
    \ \"Internet\n                 X.509 Public Key Infrastructure Certificate and\n\
    \                 Certificate Revocation List (CRL) Profile\", RFC 3280,\n   \
    \              April 2002.\n"
- title: 12.  Informative References
  contents:
  - "12.  Informative References\n   [PGP]         Elkins, M., \"MIME Security with\
    \ Pretty Good Privacy\n                 (PGP)\", RFC 2015, October 1996.\n   [S/MIME]\
    \      Ramsdell, B., Ed., \"Secure/Multipurpose Internet Mail\n              \
    \   Extensions (S/MIME) Version 3.1 Message Specification\",\n               \
    \  RFC 3851, July 2004.\n   [TLS]         Dierks, T. and E. Rescorla, \"The Transport\
    \ Layer\n                 Security (TLS) Protocol Version 1.1\", RFC 4346, April\n\
    \                 2006.\n   [PIPELINING]  Freed, N., \"SMTP Service Extension\
    \ for Command\n                 Pipelining\", STD 60, RFC 2920, September 2000.\n\
    \   [CRAM-MD5]    Klensin, J., Catoe, R., and P. Krumviede, \"IMAP/POP\n     \
    \            AUTHorize Extension for Simple Challenge/Response\", RFC\n      \
    \           2195, September 1997.\n"
- title: 13.  Acknowledgments
  contents:
  - "13.  Acknowledgments\n   The editors would like to acknowledge the contributions\
    \ of John Myers\n   and other contributors to RFC 2554, on which this document\
    \ draws from\n   heavily.\n   The editors would also like to thank Ken Murchison,\
    \ Mark Crispin,\n   Chris Newman, David Wilson, Dave Cridland, Frank Ellermann,\
    \ Ned\n   Freed, John Klensin, Tony Finch, Abhijit Menon-Sen, Philip Guenther,\n\
    \   Sam Hartman, Russ Housley, Cullen Jennings, and Lisa Dusseault for\n   the\
    \ time they devoted to reviewing of this document and/or for the\n   comments\
    \ received.\n"
- title: 14.  Additional Requirements When Using SASL PLAIN over TLS
  contents:
  - "14.  Additional Requirements When Using SASL PLAIN over TLS\n   This section\
    \ is normative for SMTP implementations that support SASL\n   [PLAIN] over [TLS].\n\
    \   If an SMTP client is willing to use SASL PLAIN over TLS to\n   authenticate\
    \ to the SMTP server, the client verifies the server\n   certificate according\
    \ to the rules of [X509].  If the server has not\n   provided any certificate,\
    \ or if the certificate verification fails,\n   the client MUST NOT attempt to\
    \ authenticate using the SASL PLAIN\n   mechanism.\n   After a successful [TLS]\
    \ negotiation, the client MUST check its\n   understanding of the server hostname\
    \ against the server's identity as\n   presented in the server Certificate message,\
    \ in order to prevent\n   man-in-the-middle attacks.  If the match fails, the\
    \ client MUST NOT\n   attempt to authenticate using the SASL PLAIN mechanism.\
    \  Matching is\n   performed according to the following rules:\n        The client\
    \ MUST use the server hostname it used to open the\n        connection as the\
    \ value to compare against the server name as\n        expressed in the server\
    \ certificate.  The client MUST NOT use\n        any form of the server hostname\
    \ derived from an insecure remote\n        source (e.g., insecure DNS lookup).\
    \  CNAME canonicalization is\n        not done.\n        If a subjectAltName extension\
    \ of type dNSName is present in the\n        certificate, it SHOULD be used as\
    \ the source of the server's\n        identity.\n        Matching is case-insensitive.\n\
    \        A \"*\" wildcard character MAY be used as the leftmost name\n       \
    \ component in the certificate.  For example, *.example.com would\n        match\
    \ a.example.com, foo.example.com, etc., but would not match\n        example.com.\n\
    \        If the certificate contains multiple names (e.g., more than one\n   \
    \     dNSName field), then a match with any one of the fields is\n        considered\
    \ acceptable.\n"
- title: 15.  Changes since RFC 2554
  contents:
  - "15.  Changes since RFC 2554\n   1.  Clarified that servers MUST support the use\
    \ of the AUTH=mailbox\n       parameter to MAIL FROM, even when the client is\
    \ not\n       authenticated.\n   2.  Clarified the initial-client-send requirements,\
    \ and give\n       additional examples.\n   3.  Updated references to newer versions\
    \ of various specifications.\n   4.  Required SASL PLAIN (over TLS) as mandatory-to-implement.\n\
    \   5.  Clarified that the mechanism list can change.\n   6.  Deprecated the use\
    \ of the 538 response code.\n   7.  Added the use of the SASLprep profile for\
    \ preparing authorization\n       identities.\n   8.  Substantial cleanup of response\
    \ codes and indicated suggested\n       enhanced response codes.  Also indicated\
    \ what response codes\n       should result in a client prompting the user for\
    \ new credentials.\n   9.  Updated ABNF section to use RFC 4234.\n   10. Clarified\
    \ interaction with SMTP PIPELINING extension.\n   11. Added a reference to RFC\
    \ 3848.\n   12. Added a new Enhanced Status Code for \"authentication line too\n\
    \       long\" case.\n   13. Other general editorial clarifications.\n"
- title: Editors' Addresses
  contents:
  - "Editors' Addresses\n   Robert Siemborski\n   Google, Inc.\n   1600 Ampitheatre\
    \ Parkway\n   Mountain View, CA 94043, USA\n   Phone: +1 650 623 6925\n   EMail:\
    \ robsiemb@google.com\n   Alexey Melnikov\n   Isode Limited\n   5 Castle Business\
    \ Village, 36 Station Road,\n   Hampton, Middlesex, TW12 2BX, UK\n   EMail: Alexey.Melnikov@isode.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
