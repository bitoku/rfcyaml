- contents:
  - '                Aggressive Use of DNSSEC-Validated Cache

    '
  title: __initial_text__
- contents:
  - "Abstract\n   The DNS relies upon caching to scale; however, the cache lookup\n
    \  generally requires an exact match.  This document specifies the use\n   of
    NSEC/NSEC3 resource records to allow DNSSEC-validating resolvers\n   to generate
    negative answers within a range and positive answers from\n   wildcards.  This
    increases performance, decreases latency, decreases\n   resource utilization on
    both authoritative and recursive servers, and\n   increases privacy.  Also, it
    may help increase resilience to certain\n   DoS attacks in some circumstances.\n
    \  This document updates RFC 4035 by allowing validating resolvers to\n   generate
    negative answers based upon NSEC/NSEC3 records and positive\n   answers in the
    presence of wildcards.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8198.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . . .
    . . .   3\n   3.  Problem Statement . . . . . . . . . . . . . . . . . . . . .
    .   3\n   4.  Background  . . . . . . . . . . . . . . . . . . . . . . . . .   4\n
    \  5.  Aggressive Use of DNSSEC-Validated Cache  . . . . . . . . . .   6\n     5.1.
    \ NSEC  . . . . . . . . . . . . . . . . . . . . . . . . . .   6\n     5.2.  NSEC3
    . . . . . . . . . . . . . . . . . . . . . . . . . .   6\n     5.3.  Wildcards
    . . . . . . . . . . . . . . . . . . . . . . . .   6\n     5.4.  Consideration
    on TTL  . . . . . . . . . . . . . . . . . .   7\n   6.  Benefits  . . . . . .
    . . . . . . . . . . . . . . . . . . . .   7\n   7.  Update to RFC 4035  . . .
    . . . . . . . . . . . . . . . . . .   8\n   8.  IANA Considerations . . . . .
    . . . . . . . . . . . . . . . .   9\n   9.  Security Considerations . . . . .
    . . . . . . . . . . . . . .   9\n   10. References  . . . . . . . . . . . . .
    . . . . . . . . . . . .   9\n     10.1.  Normative References . . . . . . . .
    . . . . . . . . . .   9\n     10.2.  Informative References . . . . . . . . .
    . . . . . . . .  10\n   Appendix A.  Detailed Implementation Notes  . . . . .
    . . . . . .  11\n   Appendix B.  Procedure for Determining ENT vs. NXDOMAIN with
    NSEC  11\n   Acknowledgments . . . . . . . . . . . . . . . . . . . . . . . . .
    \ 12\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  13\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   A DNS negative cache exists, and is used to cache the fact
    that an\n   RRset does not exist.  This method of negative caching requires exact\n
    \  matching; this leads to unnecessary additional lookups, increases\n   latency,
    leads to extra resource utilization on both authoritative\n   and recursive servers,
    and decreases privacy by leaking queries.\n   This document updates RFC 4035 to
    allow resolvers to use NSEC/NSEC3\n   resource records to synthesize negative
    answers from the information\n   they have in the cache.  This allows validating
    resolvers to respond\n   with a negative answer immediately if the name in question
    falls into\n   a range expressed by an NSEC/NSEC3 resource record already in the\n
    \  cache.  It also allows the synthesis of positive answers in the\n   presence
    of wildcard records.\n   Aggressive negative caching was first proposed in Section
    6 of DNSSEC\n   Lookaside Validation (DLV) [RFC5074] in order to find covering
    NSEC\n   records efficiently.\n   [RFC8020] and [RES-IMPROVE] propose steps to
    using NXDOMAIN\n   information for more effective caching.  This document takes
    this\n   technique further.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\",
    \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described
    in BCP\n   14 [RFC2119] [RFC8174] when, and only when, they appear in all\n   capitals,
    as shown here.\n   Many of the specialized terms used in this document are defined
    in\n   DNS Terminology [RFC7719].\n   The key words \"source of synthesis\" in
    this document are to be\n   interpreted as described in [RFC4592].\n"
  title: 2.  Terminology
- contents:
  - "3.  Problem Statement\n   The DNS negative cache caches negative (non-existent)
    information,\n   and requires an exact match in most instances [RFC2308].\n   Assume
    that the (DNSSEC-signed) \"example.com\" zone contains:\n   albatross.example.com.
    IN A 192.0.2.1\n   elephant.example.com.  IN A 192.0.2.2\n   zebra.example.com.
    \    IN A 192.0.2.3\n   If a validating resolver receives a query for cat.example.com,
    it\n   contacts its resolver (which may be itself) to query the example.com\n
    \  servers and will get back an NSEC record stating that there are no\n   records
    (alphabetically) between albatross and elephant, or an NSEC3\n   record stating
    there is nothing between two hashed names.  The\n   resolver then knows that cat.example.com
    does not exist; however, it\n   does not use the fact that the proof covers a
    range (albatross to\n   elephant) to suppress queries for other labels that fall
    within this\n   range.  This means that if the validating resolver gets a query
    for\n   ball.example.com (or dog.example.com) it will once again go off and\n
    \  query the example.com servers for these names.\n   Apart from wasting bandwidth,
    this also wastes resources on the\n   recursive server (it needs to keep state
    for outstanding queries),\n   wastes resources on the authoritative server (it
    has to answer\n   additional questions), increases latency (the end user has to
    wait\n   longer than necessary to get back an NXDOMAIN answer), can be used by\n
    \  attackers to cause a DoS, and also has privacy implications (e.g.,\n   typos
    leak out further than necessary).\n   Another example: assume that the (DNSSEC-signed)
    \"example.org\" zone\n   contains:\n   avocado.example.org.   IN A 192.0.2.1\n
    \  *.example.org.         IN A 192.0.2.2\n   zucchini.example.org.  IN A 192.0.2.3\n
    \  If a query is received for leek.example.org, the system contacts its\n   resolver
    (which may be itself) to query the example.org servers and\n   will get back an
    NSEC record stating that there are no records\n   (alphabetically) between avocado
    and zucchini (or an NSEC3 record\n   stating there is nothing between two hashed
    names), as well as an\n   answer for leek.example.org, with the label count of
    the signature\n   set to two (see [RFC7129], Section 5.3 for more details).\n
    \  If the validating resolver gets a query for banana.example.org, it\n   will
    once again go off and query the example.org servers for\n   banana.example.org
    (even though it already has proof that there is a\n   wildcard record) -- just
    like above, this has privacy implications,\n   wastes resources, can be used to
    contribute to a DoS, etc.\n"
  title: 3.  Problem Statement
- contents:
  - "4.  Background\n   DNSSEC [RFC4035] and [RFC5155] both provide \"authenticated
    denial of\n   existence\"; this is a cryptographic proof that the queried-for
    name\n   does not exist or the type does not exist.  Proof that a name does\n
    \  not exist is accomplished by providing a (DNSSEC-secured) record\n   containing
    the names that appear alphabetically before and after the\n   queried-for name.
    \ In the first example above, if the (DNSSEC-\n   validating) recursive server
    were to query for dog.example.com, it\n   would receive a (signed) NSEC record
    stating that there are no labels\n   between \"albatross\" and \"elephant\" (or,
    for NSEC3, a similar pair of\n   hashed names).  This is a signed, cryptographic
    proof that these\n   names are the ones before and after the queried-for label.
    \ As\n   dog.example.com falls within this range, the recursive server knows\n
    \  that dog.example.com really does not exist.  Proof that a type does\n   not
    exist is accomplished by providing a (DNSSEC-secured) record\n   containing the
    queried-for name, and a type bitmap that does not\n   include the requested type.\n
    \  This document specifies that this NSEC/NSEC3 record should be used to\n   generate
    negative answers for any queries that the validating server\n   receives that
    fall within the range covered by the record (for the\n   TTL for the record).
    \ This document also specifies that a positive\n   answer should be generated
    for any queries that the validating server\n   receives that are proven to be
    covered by a wildcard record.\n   Section 4.5 of [RFC4035] says:\n      In theory,
    a resolver could use wildcards or NSEC RRs to generate\n      positive and negative
    responses (respectively) until the TTL or\n      signatures on the records in
    question expire.  However, it seems\n      prudent for resolvers to avoid blocking
    new authoritative data or\n      synthesizing new data on their own.  Resolvers
    that follow this\n      recommendation will have a more consistent view of the
    namespace.\n   And, earlier, Section 4.5 of [RFC4035] says:\n      The reason
    for these recommendations is that, between the initial\n      query and the expiration
    of the data from the cache, the\n      authoritative data might have been changed
    (for example, via\n      dynamic update).\n   In other words, if a resolver generates
    negative answers from an NSEC\n   record, it will not send any queries for names
    within that NSEC range\n   (for the TTL).  If a new name is added to the zone
    during this\n   interval, the resolver will not know this.  Similarly, if the\n
    \  resolver is generating responses from a wildcard record, it will\n   continue
    to do so (for the TTL).\n   We believe that this recommendation can be relaxed
    because, in the\n   absence of this technique, a lookup for the exact name could
    have\n   come in during this interval, and so a negative answer could already\n
    \  be cached (see [RFC2308] for more background).  This means that zone\n   operators
    should have no expectation that an added name would work\n   immediately.  With
    DNSSEC and aggressive use of DNSSEC-validated\n   cache, the TTL of the NSEC/NSEC3
    record and the SOA.MINIMUM field are\n   the authoritative statement of how quickly
    a name can start working\n   within a zone.\n"
  title: 4.  Background
- contents:
  - "5.  Aggressive Use of DNSSEC-Validated Cache\n   This document relaxes the restriction
    given in Section 4.5 of\n   [RFC4035].  See Section 7 for more detail.\n   If
    the negative cache of the validating resolver has sufficient\n   information to
    validate the query, the resolver SHOULD use NSEC,\n   NSEC3, and wildcard records
    to synthesize answers as described in\n   this document.  Otherwise, it MUST fall
    back to send the query to the\n   authoritative DNS servers.\n"
  - contents:
    - "5.1.  NSEC\n   The validating resolver needs to check the existence of an NSEC
      RR\n   matching/covering the source of synthesis and an NSEC RR covering the\n
      \  query name.\n   If denial of existence can be determined according to the
      rules set\n   out in Section 5.4 of [RFC4035], using NSEC records in the cache,\n
      \  then the resolver can immediately return an NXDOMAIN or NODATA (as\n   appropriate)
      response.\n"
    title: 5.1.  NSEC
  - contents:
    - "5.2.  NSEC3\n   NSEC3 aggressive negative caching is more difficult than NSEC\n
      \  aggressive caching.  If the zone is signed with NSEC3, the validating\n   resolver
      needs to check the existence of non-terminals and wildcards\n   that derive
      from query names.\n   If denial of existence can be determined according to
      the rules set\n   out in [RFC5155], Sections 8.4, 8.5, 8.6, and 8.7, using NSEC3\n
      \  records in the cache, then the resolver can immediately return an\n   NXDOMAIN
      or NODATA response (as appropriate).\n   If a covering NSEC3 RR has an Opt-Out
      flag, the covering NSEC3 RR\n   does not prove the non-existence of the domain
      name and the\n   aggressive negative caching is not possible for the domain
      name.\n"
    title: 5.2.  NSEC3
  - contents:
    - "5.3.  Wildcards\n   The last paragraph of [RFC4035], Section 4.5 also discusses
      the use\n   of wildcards and NSEC RRs to generate positive responses and\n   recommends
      that it not be relied upon.  Just like the case for the\n   aggressive use of
      NSEC/NSEC3 for negative answers, we revise this\n   recommendation.\n   As long
      as the validating resolver can determine that a name would\n   not exist without
      the wildcard match, determined according to the\n   rules set out in Section
      5.3.4 of [RFC4035] (NSEC), or in Section 8.8\n   of [RFC5155], it SHOULD synthesize
      an answer (or NODATA response) for\n   that name using the cache-deduced wildcard.
      \ If the corresponding\n   wildcard record is not in the cache, it MUST fall
      back to send the\n   query to the authoritative DNS servers.\n"
    title: 5.3.  Wildcards
  - contents:
    - "5.4.  Consideration on TTL\n   The TTL value of negative information is especially
      important,\n   because newly added domain names cannot be used while the negative\n
      \  information is effective.\n   Section 5 of [RFC2308] suggests a maximum default
      negative cache TTL\n   value of 3 hours (10800).  It is RECOMMENDED that validating\n
      \  resolvers limit the maximum effective TTL value of negative responses\n   (NSEC/NSEC3
      RRs) to this same value.\n   Section 5 of [RFC2308] also states that a negative
      cache entry TTL is\n   taken from the minimum of the SOA.MINIMUM field and SOA's
      TTL.  This\n   can be less than the TTL of an NSEC or NSEC3 record, since their
      TTL\n   is equal to the SOA.MINIMUM field (see [RFC4035], Section 2.3 and\n
      \  [RFC5155], Section 3).\n   A resolver that supports aggressive use of NSEC
      and NSEC3 SHOULD\n   reduce the TTL of NSEC and NSEC3 records to match the SOA.MINIMUM\n
      \  field in the authority section of a negative response, if SOA.MINIMUM\n   is
      smaller.\n"
    title: 5.4.  Consideration on TTL
  title: 5.  Aggressive Use of DNSSEC-Validated Cache
- contents:
  - "6.  Benefits\n   The techniques described in this document provide a number of\n
    \  benefits, including (in no specific order):\n   Reduced latency:  By answering
    directly from cache, validating\n      resolvers can immediately inform clients
    that the name they are\n      looking for does not exist, improving the user experience.\n
    \  Decreased recursive server load:  By answering queries from the cache\n      by
    synthesizing answers, validating servers avoid having to send a\n      query and
    wait for a response.  In addition to decreasing the\n      bandwidth used, it
    also means that the server does not need to\n      allocate and maintain state,
    thereby decreasing memory and CPU\n      load.\n   Decreased authoritative server
    load:  Because recursive servers can\n      answer queries without asking the
    authoritative server, the\n      authoritative servers receive fewer queries.
    \ This decreases the\n      authoritative server bandwidth, queries per second,
    and CPU\n      utilization.\n   The scale of the benefit depends upon multiple
    factors, including the\n   query distribution.  For example, at the time of this
    writing, around\n   65% of queries to root name servers result in NXDOMAIN responses
    (see\n   statistics from [ROOT-SERVERS]); this technique will eliminate a\n   sizable
    quantity of these.\n   The technique described in this document may also mitigate
    so-called\n   \"random QNAME attacks\", in which attackers send many queries for\n
    \  random subdomains to resolvers.  As the resolver will not have the\n   answers
    cached, it has to ask external servers for each random query,\n   leading to a
    DoS on the authoritative servers (and often resolvers).\n   The technique may
    help mitigate these attacks by allowing the\n   resolver to answer directly from
    the cache for any random queries\n   that fall within already requested ranges.
    \ It will not always work\n   as an effective defense, not least because not many
    zones are DNSSEC\n   signed at all -- but it will still provide an additional
    layer of\n   defense.\n   As these benefits are only accrued by those using DNSSEC,
    it is hoped\n   that these techniques will lead to more DNSSEC deployment.\n"
  title: 6.  Benefits
- contents:
  - "7.  Update to RFC 4035\n   Section 4.5 of [RFC4035] shows that \"In theory, a
    resolver could use\n   wildcards or NSEC RRs to generate positive and negative
    responses\n   (respectively) until the TTL or signatures on the records in question\n
    \  expire.  However, it seems prudent for resolvers to avoid blocking\n   new
    authoritative data or synthesizing new data on their own.\n   Resolvers that follow
    this recommendation will have a more consistent\n   view of the namespace\".\n
    \  The paragraph is updated as follows:\n   +-----------------------------------------------------------------+\n
    \  |  Once the records are validated, DNSSEC-enabled validating      |\n   |  resolvers
    SHOULD use wildcards and NSEC/NSEC3 resource records |\n   |  to generate positive
    and negative responses until the          |\n   |  effective TTLs or signatures
    for those records expire.         |\n   +-----------------------------------------------------------------+\n"
  title: 7.  Update to RFC 4035
- contents:
  - "8.  IANA Considerations\n   This document does not require any IANA actions.\n"
  title: 8.  IANA Considerations
- contents:
  - "9.  Security Considerations\n   Use of NSEC/NSEC3 resource records without DNSSEC
    validation may\n   create serious security issues, and so this technique requires
    DNSSEC\n   validation.\n   Newly registered resource records may not be used immediately.\n
    \  However, choosing a suitable TTL value and a negative cache TTL value\n   (SOA.MINIMUM
    field) will mitigate the delay concern, and it is not a\n   security problem.\n
    \  It is also suggested to limit the maximum TTL value of NSEC/NSEC3\n   resource
    records in the negative cache to, for example, 10800 seconds\n   (3 hours), to
    mitigate this issue.\n   Although the TTL of NSEC/NSEC3 records is typically fairly
    short\n   (minutes or hours), their RRSIG expiration time can be much further\n
    \  in the future (weeks).  An attacker who is able to successfully spoof\n   responses
    might poison a cache with old NSEC/NSEC3 records.  If the\n   resolver is not
    making aggressive use of NSEC/NSEC3, the attacker has\n   to repeat the attack
    for every query.  If the resolver is making\n   aggressive use of NSEC/NSEC3,
    one successful attack would be able to\n   suppress many queries for new names,
    up to the negative TTL.\n"
  title: 9.  Security Considerations
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC2308]  Andrews, M., \"Negative Caching of DNS Queries (DNS\n              NCACHE)\",
      RFC 2308, DOI 10.17487/RFC2308, March 1998,\n              <http://www.rfc-editor.org/info/rfc2308>.\n
      \  [RFC4035]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n              Rose,
      \"Protocol Modifications for the DNS Security\n              Extensions\", RFC
      4035, DOI 10.17487/RFC4035, March 2005,\n              <http://www.rfc-editor.org/info/rfc4035>.\n
      \  [RFC4592]  Lewis, E., \"The Role of Wildcards in the Domain Name\n              System\",
      RFC 4592, DOI 10.17487/RFC4592, July 2006,\n              <http://www.rfc-editor.org/info/rfc4592>.\n
      \  [RFC5155]  Laurie, B., Sisson, G., Arends, R., and D. Blacka, \"DNS\n              Security
      (DNSSEC) Hashed Authenticated Denial of\n              Existence\", RFC 5155,
      DOI 10.17487/RFC5155, March 2008,\n              <http://www.rfc-editor.org/info/rfc5155>.\n
      \  [RFC7129]  Gieben, R. and W. Mekking, \"Authenticated Denial of\n              Existence
      in the DNS\", RFC 7129, DOI 10.17487/RFC7129,\n              February 2014,
      <http://www.rfc-editor.org/info/rfc7129>.\n   [RFC7719]  Hoffman, P., Sullivan,
      A., and K. Fujiwara, \"DNS\n              Terminology\", RFC 7719, DOI 10.17487/RFC7719,
      December\n              2015, <http://www.rfc-editor.org/info/rfc7719>.\n   [RFC8174]
      \ Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <http://www.rfc-editor.org/info/rfc8174>.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [RES-IMPROVE]\n              Vixie, P., Joffe,
      R., and F. Neves, \"Improvements to DNS\n              Resolvers for Resiliency,
      Robustness, and Responsiveness\",\n              Work in Progress, draft-vixie-dnsext-resimprove-00,
      June\n              2010.\n   [RFC5074]  Weiler, S., \"DNSSEC Lookaside Validation
      (DLV)\", RFC 5074,\n              DOI 10.17487/RFC5074, November 2007,\n              <http://www.rfc-editor.org/info/rfc5074>.\n
      \  [RFC8020]  Bortzmeyer, S. and S. Huque, \"NXDOMAIN: There Really Is\n              Nothing
      Underneath\", RFC 8020, DOI 10.17487/RFC8020,\n              November 2016,
      <http://www.rfc-editor.org/info/rfc8020>.\n   [ROOT-SERVERS]\n              \"Root
      Server Technical Operations Assn\",\n              <http://www.root-servers.org/>.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Appendix A.  Detailed Implementation Notes\n   o  Previously, cached negative
    responses were indexed by QNAME,\n      QCLASS, QTYPE, and the setting of the
    CD bit (see RFC 4035,\n      Section 4.7), and only queries matching the index
    key would be\n      answered from the cache.  With aggressive negative caching,
    the\n      validator, in addition to checking to see if the answer is in its\n
    \     cache before sending a query, checks to see whether any cached and\n      validated
    NSEC record denies the existence of the sought\n      record(s).  Using aggressive
    negative caching, a validator will\n      not make queries for any name covered
    by a cached and validated\n      NSEC record.  Furthermore, a validator answering
    queries from\n      clients will synthesize a negative answer (or NODATA response)\n
    \     whenever it has an applicable validated NSEC in its cache unless\n      the
    CD bit was set on the incoming query.  (Imported from\n      Section 6 of [RFC5074].)\n
    \  o  Implementing aggressive negative caching suggests that a validator\n      will
    need to build an ordered data structure of NSEC and NSEC3\n      records for each
    signer domain name of NSEC/NSEC3 records in order\n      to efficiently find covering
    NSEC/NSEC3 records.  Call the table\n      as \"NSEC_TABLE\".  (Imported from
    Section 6.1 of [RFC5074] and\n      expanded.)\n   o  The aggressive negative
    caching may be inserted at the cache\n      lookup part of the recursive resolvers.\n
    \  o  If errors happen in an aggressive negative caching algorithm,\n      resolvers
    MUST fall back to resolve the query as usual.  \"Resolve\n      the query as usual\"
    means that the resolver must process the query\n      as though it does not implement
    aggressive negative caching.\n"
  title: Appendix A.  Detailed Implementation Notes
- contents:
  - "Appendix B.  Procedure for Determining ENT vs. NXDOMAIN with NSEC\n   This procedure
    outlines how to determine if a given name does not\n   exist, or is an ENT (empty
    non-terminal; see [RFC5155], Section 1.3)\n   with NSEC.\n   If the NSEC record
    has not been verified as secure, discard it.\n   If the given name sorts before
    or matches the NSEC owner name,\n   discard it as it does not prove the NXDOMAIN
    or ENT.\n   If the given name is a subdomain of the NSEC owner name and the NS\n
    \  bit is present and the SOA bit is absent, then discard the NSEC as it\n   is
    from a parent zone.\n   If the next domain name sorts after the NSEC owner name
    and the given\n   name sorts after or matches next domain name, then discard the
    NSEC\n   record as it does not prove the NXDOMAIN or ENT.\n   If the next domain
    name sorts before or matches the NSEC owner name\n   and the given name is not
    a subdomain of the next domain name, then\n   discard the NSEC as it does not
    prove the NXDOMAIN or ENT.\n   You now have an NSEC record that proves the NXDOMAIN
    or ENT.\n   If the next domain name is a subdomain of the given name, you have
    an\n   ENT.  Otherwise, you have an NXDOMAIN.\n"
  title: Appendix B.  Procedure for Determining ENT vs. NXDOMAIN with NSEC
- contents:
  - "Acknowledgments\n   The authors gratefully acknowledge DNSSEC Lookaside Validation
    (DLV)\n   [RFC5074] author Samuel Weiler and the Unbound developers.\n   Thanks
    to Mark Andrews for providing the helpful notes for\n   implementors provided
    in Appendix B.\n   The authors would like to specifically thank Stephane Bortzmeyer
    (for\n   standing next to and helping edit), Ralph Dolmans, Tony Finch, Tatuya\n
    \  JINMEI for extensive review and comments, and also Mark Andrews,\n   Casey
    Deccio, Alexander Dupuy, Olafur Gudmundsson, Bob Harold, Shumon\n   Huque, John
    Levine, Pieter Lexis, Matthijs Mekking (who even sent\n   pull requests!), and
    Ondrej Sury.\n"
  title: Acknowledgments
- contents:
  - "Authors' Addresses\n   Kazunori Fujiwara\n   Japan Registry Services Co., Ltd.\n
    \  Chiyoda First Bldg. East 13F, 3-8-1 Nishi-Kanda\n   Chiyoda-ku, Tokyo  101-0065\n
    \  Japan\n   Phone: +81 3 5215 8451\n   Email: fujiwara@jprs.co.jp\n   Akira Kato\n
    \  Keio University/WIDE Project\n   Graduate School of Media Design, 4-1-1 Hiyoshi\n
    \  Kohoku, Yokohama  223-8526\n   Japan\n   Phone: +81 45 564 2490\n   Email:
    kato@wide.ad.jp\n   Warren Kumari\n   Google\n   1600 Amphitheatre Parkway\n   Mountain
    View, CA  94043\n   United States of America\n   Email: warren@kumari.net\n"
  title: Authors' Addresses
