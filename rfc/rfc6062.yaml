- contents:
  - ''
  title: __initial_text__
- contents:
  - 'Traversal Using Relays around NAT (TURN) Extensions for TCP Allocations

    '
  title: Traversal Using Relays around NAT (TURN) Extensions for TCP Allocations
- contents:
  - "Abstract\n   This specification defines an extension of Traversal Using Relays\n
    \  around NAT (TURN), a relay protocol for Network Address Translator\n   (NAT)
    traversal.  This extension allows a TURN client to request TCP\n   allocations,
    and defines new requests and indications for the TURN\n   server to open and accept
    TCP connections with the client's peers.\n   TURN and this extension both purposefully
    restrict the ways in which\n   the relayed address can be used.  In particular,
    it prevents users\n   from running general-purpose servers from ports obtained
    from the\n   TURN server.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6062.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  3\n   2.  Conventions  . . . . . . . . . . . . . . . . . . . . .
    . . . .  3\n   3.  Overview of Operation  . . . . . . . . . . . . . . . . . .
    . .  4\n   4.  Client Processing  . . . . . . . . . . . . . . . . . . . . . .
    \ 6\n     4.1.  Creating an Allocation . . . . . . . . . . . . . . . . . .  6\n
    \    4.2.  Refreshing an Allocation . . . . . . . . . . . . . . . . .  7\n     4.3.
    \ Initiating a Connection  . . . . . . . . . . . . . . . . .  7\n     4.4.  Receiving
    a Connection . . . . . . . . . . . . . . . . . .  7\n     4.5.  Sending and Receiving
    Data . . . . . . . . . . . . . . . .  8\n     4.6.  Data Connection Maintenance
    \ . . . . . . . . . . . . . . .  8\n   5.  TURN Server Behavior . . . . . . .
    . . . . . . . . . . . . . .  8\n     5.1.  Receiving a TCP Allocate Request .
    . . . . . . . . . . . .  8\n     5.2.  Receiving a Connect Request  . . . . .
    . . . . . . . . . .  9\n     5.3.  Receiving a TCP Connection on a Relayed Transport\n
    \          Address  . . . . . . . . . . . . . . . . . . . . . . . . . 10\n     5.4.
    \ Receiving a ConnectionBind Request . . . . . . . . . . . . 11\n     5.5.  Data
    Connection Maintenance  . . . . . . . . . . . . . . . 11\n   6.  IANA Considerations
    \ . . . . . . . . . . . . . . . . . . . . . 11\n     6.1.  New STUN Methods .
    . . . . . . . . . . . . . . . . . . . . 11\n     6.2.  New STUN Attributes  .
    . . . . . . . . . . . . . . . . . . 12\n       6.2.1.  CONNECTION-ID  . . . .
    . . . . . . . . . . . . . . . . 12\n     6.3.  New STUN Error Codes . . . . .
    . . . . . . . . . . . . . . 12\n   7.  Security Considerations  . . . . . . .
    . . . . . . . . . . . . 12\n   8.  Acknowledgements . . . . . . . . . . . . .
    . . . . . . . . . . 12\n   9.  References . . . . . . . . . . . . . . . . . .
    . . . . . . . . 12\n     9.1.  Normative References . . . . . . . . . . . . .
    . . . . . . 12\n     9.2.  Informative References . . . . . . . . . . . . . .
    . . . . 13\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Traversal Using Relays around NAT (TURN) [RFC5766] is an
    extension to\n   the Session Traversal Utilities for NAT [RFC5389] protocol.  TURN\n
    \  allows for clients to communicate with a TURN server and ask it to\n   allocate
    ports on one of its host interfaces, and then relay traffic\n   between that port
    and the client itself.  TURN, when used in concert\n   with STUN and Interactive
    Connectivity Establishment (ICE) [RFC5245],\n   forms a solution for NAT traversal
    for UDP-based media sessions.\n   However, TURN itself does not provide a way
    for a client to allocate\n   a TCP-based port on a TURN server.  Such an allocation
    is needed for\n   cases where a TCP-based session is desired with a peer, and
    NATs\n   prevent a direct TCP connection.  Examples include application\n   sharing
    between desktop softphones, or transmission of pictures\n   during a voice communications
    session.\n   This document defines an extension to TURN that allows a client to\n
    \  obtain a TCP allocation.  It also allows the client to initiate\n   outgoing
    TCP connections from that allocation to peers and to accept\n   incoming TCP connection
    requests from peers made towards that\n   allocation.\n   The term \"TCP allocation\"
    means a TURN allocation where TCP is used\n   as the transport protocol instead
    of UDP.  Such an allocation is\n   uniquely identified by its relayed transport
    address, which consists\n   of an IP address and TCP port (defined in [RFC5766]).\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in [RFC2119].\n"
  title: 2.  Conventions
- contents:
  - "3.  Overview of Operation\n                                                      +--------+\n
    \                                                     |        |\n                                                      |
    Peer1  |\n                                                   /  |        |\n                                                  /
    \  |        |\n                                                 /    +--------+\n
    \                                               /\n                                               /\n
    \                                             / Peer Data 1\n                                             /\n
    \     +--------+  Control       +--------+  /\n      |        | --------------
    |        | /\n      | Client | Client Data 1  | TURN   |\n      |        | --------------
    | Server | \\\n      |        | -------------- |        |  \\\n      +--------+
    Client Data 2  +--------+   \\\n                                              \\\n
    \                                              \\\n                                                \\
    \    +--------+\n                                                 \\    |        |\n
    \                                     Peer Data 2 \\   | Peer2  |\n                                                   \\
    \ |        |\n                                                      |        |\n
    \                                                     +--------+\n                         Figure
    1: TURN TCP Model\n   The overall model for TURN-TCP is shown in Figure 1.  The
    client will\n   have two different types of connections to its TURN server.  For
    each\n   allocated relayed transport address, it will have a single control\n
    \  connection.  Control connections are used to obtain allocations and\n   open
    up new connections.  Furthermore, for each connection to a peer,\n   the client
    will have a single connection to its TURN server.  These\n   connections are called
    data connections.  Consequently, there is a\n   data connection from the client
    to its TURN server (the client data\n   connection) and one from the TURN server
    to a peer (the peer data\n   connection).  Actual application data is sent on
    these connections.\n   Indeed, after an initial TURN message that binds the client
    data\n   connection to a peer data connection, only application data can be\n
    \  sent -- no TURN messaging.  This is in contrast to the control\n   connection,
    which only allows TURN messages and not application data.\n   To obtain a TCP-based
    allocation, a client first opens a TCP or TLS\n   connection to its TURN server.
    \ The client then sends an Allocate\n   request over that control connection.
    \ That request contains a\n   REQUESTED-TRANSPORT attribute, which indicates a
    TCP-based allocation\n   is desired.  A server that supports this extension will
    allocate a\n   TCP relayed transport address and begin listening for connection\n
    \  requests on it.  It then returns the allocated relayed transport\n   address
    to the client in the response to the Allocate request.  The\n   connection on
    which the Allocate request was sent is the control\n   connection.\n   If a client
    wishes to establish a TCP connection to a peer from that\n   relayed transport
    address, it issues a Connect request to the TURN\n   server over the control connection.
    \ That request contains an XOR-\n   PEER-ADDRESS attribute identifying the peer
    IP address and port\n   (i.e., its \"transport address\") to which a connection
    is to be made.\n   The TURN server attempts to open the TCP connection, and assuming
    it\n   succeeds, then responds to the Connect request with a success\n   response.
    \ The server also creates a connection identifier associated\n   with this connection
    and passes that connection identifier back to\n   the client in the success response.
    \ Note that a maximum of one\n   connection to a given peer transport address
    can be established per\n   allocation.\n      Note: Establishing a relayed connection
    from the client to a peer\n      is done in two steps.  First, the allocation
    is created, and\n      second, the connection is established.  Combining the two
    is not\n      desirable for NAT traversal.  It is expected that, between the\n
    \     first and second steps, the client will communicate off-band with\n      the
    peer (e.g., using ICE [RFC5245]) and tell it the relayed\n      transport address
    that the TURN server allocated and from which it\n      is about to initiate a
    connection.  The peer can then \"get ready\":\n      open holes in its firewall,
    try to poke holes in a NAT, attempt a\n      TCP simultaneous open, etc.\n   In
    order to actually send data on the new connection or otherwise\n   utilize it
    in any way, the client establishes a new TCP connection to\n   its TURN server.
    \ Once established, it issues a ConnectionBind\n   request to the server over
    this new connection.  That request echoes\n   back the connection identifier to
    the TURN server.  The TURN server\n   uses it to correlate the two connections.
    \ As a consequence, the TCP\n   connection to the peer is associated with a TCP
    connection to the\n   client one-to-one.  The two connections are now data connections.
    \ At\n   this point, if the server receives data from the peer, it forwards\n
    \  that data towards the client, without any kind of encapsulation.  Any\n   data
    received by the TURN server from the client over the client data\n   connection
    is forwarded to the peer, again without encapsulation or\n   framing of any kind.
    \ Once a connection has been bound using the\n   ConnectionBind request, TURN
    messaging is no longer permitted on the\n   connection.\n   In a similar way,
    when a peer opens a TCP connection towards the\n   relayed transport address,
    the server checks if there is a permission\n   in place for that peer.  If there
    is none, the connection is closed.\n   Permissions are created with the CreatePermission
    request sent over\n   the control connection, just as for UDP TURN.  If there
    is a\n   permission in place, the TURN server sends to the client a\n   ConnectionAttempt
    Indication over the control connection.  That\n   indication contains a connection
    identifier.  Once again, the client\n   initiates a separate TCP connection to
    its TURN server, and over that\n   connection, issues a ConnectionBind request.
    \ Once received, the TURN\n   server will begin relaying data back and forth.
    \ The server closes\n   the peer data connection if no ConnectionBind request
    is received\n   after a timeout.\n   If the client closes a client data connection,
    the corresponding peer\n   data connection is closed.  If the peer closes a peer
    data\n   connection, the corresponding client data connection is closed.  In\n
    \  this way, the status of the connection is directly known to the\n   client.\n
    \  The TURN server will relay the data between the client and peer data\n   connections.
    \ End-to-end flow control is maintained by the relay\n   process: if the relay
    process is no longer able to write data to the\n   destination of the relayed
    data, the relay process stops reading data\n   from the source.\n"
  title: 3.  Overview of Operation
- contents:
  - '4.  Client Processing

    '
  - contents:
    - "4.1.  Creating an Allocation\n   To create a TCP allocation, a client MUST
      initiate a new TCP or TLS\n   connection to its TURN server, identical to the
      TCP or TLS procedures\n   defined in [RFC5766].  TCP allocations cannot be obtained
      using a UDP\n   association between client and server.\n   Once set up, a client
      MUST send a TURN Allocate request.  That\n   request MUST contain a REQUESTED-TRANSPORT
      attribute whose value is\n   6, corresponding to TCP.\n   The request MUST NOT
      include a DONT-FRAGMENT, RESERVATION-TOKEN, or\n   EVEN-PORT attribute.  The
      corresponding features are specific to UDP-\n   based capabilities and are not
      utilized by TURN-TCP.  However, a\n   LIFETIME attribute MAY be included, with
      semantics identical to the\n   UDP case.\n   The procedures for authentication
      of the Allocate request and\n   processing of success and failure responses
      are identical to those\n   for UDP.\n   Once a success response is received,
      the TCP connection to the TURN\n   server is called the control connection for
      that allocation.\n"
    title: 4.1.  Creating an Allocation
  - contents:
    - "4.2.  Refreshing an Allocation\n   The procedures for refreshing an allocation
      are identical to those\n   for UDP.  Note that the Refresh MUST be sent on the
      control\n   connection.\n"
    title: 4.2.  Refreshing an Allocation
  - contents:
    - "4.3.  Initiating a Connection\n   To initiate a TCP connection to a peer, a
      client MUST send a Connect\n   request over the control connection for the desired
      allocation.  The\n   Connect request MUST include an XOR-PEER-ADDRESS attribute
      containing\n   the transport address of the peer to which a connection is desired.\n
      \  If the connection is successfully established, the client will\n   receive
      a success response.  That response will contain a\n   CONNECTION-ID attribute.
      \ The client MUST initiate a new TCP\n   connection to the server, utilizing
      the same destination transport\n   address to which the control connection was
      established.  This\n   connection MUST be made using a different local transport
      address.\n   Authentication of the client by the server MUST use the same method\n
      \  and credentials as for the control connection.  Once established, the\n   client
      MUST send a ConnectionBind request over the new connection.\n   That request
      MUST include the CONNECTION-ID attribute, echoed from\n   the Connect Success
      response.  When a response to the ConnectionBind\n   request is received, if
      it is a success, the TCP connection on which\n   it was sent is called the client
      data connection corresponding to the\n   peer.\n   If the result of the Connect
      request was an Error Response, and the\n   response code was 447 (Connection
      Timeout or Failure), it means that\n   the TURN server was unable to connect
      to the peer.  The client MAY\n   retry with the same XOR-PEER-ADDRESS attribute,
      but MUST wait at\n   least 10 seconds.\n   As with any other request, multiple
      Connect requests MAY be sent\n   simultaneously.  However, Connect requests
      with the same XOR-PEER-\n   ADDRESS parameter MUST NOT be sent simultaneously.\n"
    title: 4.3.  Initiating a Connection
  - contents:
    - "4.4.  Receiving a Connection\n   After an Allocate request is successfully
      processed by the server,\n   the client will start receiving a ConnectionAttempt
      indication each\n   time a peer for which a permission has been installed attempts
      a new\n   connection to the relayed transport address.  This indication will\n
      \  contain CONNECTION-ID and XOR-PEER-ADDRESS attributes.  If the client\n   wishes
      to accept this connection, it MUST initiate a new TCP\n   connection to the
      server, utilizing the same destination transport\n   address to which the control
      connection was established.  This\n   connection MUST be made using a different
      local transport address.\n   Authentication of the client by the server MUST
      use the same method\n   and credentials as for the control connection.  Once
      established, the\n   client MUST send a ConnectionBind request over the new
      connection.\n   That request MUST include the CONNECTION-ID attribute, echoed
      from\n   the ConnectionAttempt indication.  When a response to the\n   ConnectionBind
      request is received, if it is a success, the TCP\n   connection on which it
      was sent is called the client data connection\n   corresponding to the peer.\n"
    title: 4.4.  Receiving a Connection
  - contents:
    - "4.5.  Sending and Receiving Data\n   Once a client data connection is established,
      data sent on it by the\n   client will be relayed as-is to the peer by the server.
      \ Similarly,\n   data sent by the peer to the server will be relayed as-is to
      the\n   client over the data connection.\n"
    title: 4.5.  Sending and Receiving Data
  - contents:
    - "4.6.  Data Connection Maintenance\n   The client MUST refresh the allocation
      (corresponding to a data\n   connection) using the Refresh request as defined
      in [RFC5766] for as\n   long as it wants to keep the data connection alive.\n
      \  When the client wishes to terminate its relayed connection to the\n   peer,
      it closes the data connection to the server.\n      Note: No mechanism for keeping
      alive the NAT bindings (potentially\n      on the client data connection as
      well as on the peer data\n      connection) is included.  This service is not
      provided by TURN-\n      TCP.  If such a feature is deemed necessary, it can
      be implemented\n      higher up the stack, in the application protocol being
      tunneled\n      inside TURN-TCP.  Also, TCP keep-alives MAY be used to keep
      the\n      NAT bindings on the client data connection alive.\n"
    title: 4.6.  Data Connection Maintenance
  title: 4.  Client Processing
- contents:
  - '5.  TURN Server Behavior

    '
  - contents:
    - "5.1.  Receiving a TCP Allocate Request\n   The process is similar to that defined
      in [RFC5766], Section 6.2,\n   with the following exceptions:\n   1.  If the
      REQUESTED-TRANSPORT attribute is included and specifies a\n       protocol other
      than UDP or TCP, the server MUST reject the\n       request with a 442 (Unsupported
      Transport Protocol) error.  If\n       the value is UDP, and if UDP transport
      is allowed by local\n       policy, the server MUST continue with the procedures
      of [RFC5766]\n       instead of this document.  If the value is UDP, and if
      UDP\n       transport is forbidden by local policy, the server MUST reject\n
      \      the request with a 403 (Forbidden) error.\n   2.  If the client connection
      transport is not TCP or TLS, the server\n       MUST reject the request with
      a 400 (Bad Request) error.\n   3.  If the request contains the DONT-FRAGMENT,
      EVEN-PORT, or\n       RESERVATION-TOKEN attribute, the server MUST reject the
      request\n       with a 400 (Bad Request) error.\n   4.  A TCP relayed transport
      address MUST be allocated instead of a\n       UDP one.\n   5.  The RESERVATION-TOKEN
      attribute MUST NOT be present in the\n       success response.\n   If all checks
      pass, the server MUST start accepting incoming TCP\n   connections on the relayed
      transport address.  Refer to Section 5.3\n   for details.\n"
    title: 5.1.  Receiving a TCP Allocate Request
  - contents:
    - "5.2.  Receiving a Connect Request\n   When the server receives a Connect request,
      it processes the request\n   as follows.\n   If the request is received on a
      TCP connection for which no\n   allocation exists, the server MUST return a
      437 (Allocation Mismatch)\n   error.\n   If the server is currently processing
      a Connect request for this\n   allocation with the same XOR-PEER-ADDRESS, it
      MUST return a 446\n   (Connection Already Exists) error.\n   If the server has
      already successfully processed a Connect request\n   for this allocation with
      the same XOR-PEER-ADDRESS, and the resulting\n   client and peer data connections
      are either pending or active, it\n   MUST return a 446 (Connection Already Exists)
      error.\n   If the request does not contain an XOR-PEER-ADDRESS attribute, or
      if\n   such attribute is invalid, the server MUST return a 400 (Bad Request)\n
      \  error.\n   If the new connection is forbidden by local policy, the server
      MUST\n   reject the request with a 403 (Forbidden) error.\n   Otherwise, the
      server MUST initiate an outgoing TCP connection.  The\n   local endpoint is
      the relayed transport address associated with the\n   allocation.  The remote
      endpoint is the one indicated by the XOR-\n   PEER-ADDRESS attribute.  If the
      connection attempt fails or times\n   out, the server MUST return a 447 (Connection
      Timeout or Failure)\n   error.  The timeout value MUST be at least 30 seconds.\n
      \  If the connection is successful, it is now called a peer data\n   connection.
      \ The server MUST buffer any data received from the\n   client.  The server
      adjusts its advertised TCP receive window to\n   reflect the amount of empty
      buffer space.\n   The server MUST include the CONNECTION-ID attribute in the
      Connect\n   success response.  The attribute's value MUST uniquely identify
      the\n   peer data connection.\n   If no ConnectionBind request associated with
      this peer data\n   connection is received after 30 seconds, the peer data connection\n
      \  MUST be closed.\n"
    title: 5.2.  Receiving a Connect Request
  - contents:
    - "5.3.  Receiving a TCP Connection on a Relayed Transport Address\n   When a
      server receives an incoming TCP connection on a relayed\n   transport address,
      it processes the request as follows.\n   The server MUST accept the connection.
      \ If it is not successful,\n   nothing is sent to the client over the control
      connection.\n   If the connection is successfully accepted, it is now called
      a peer\n   data connection.  The server MUST buffer any data received from the\n
      \  peer.  The server adjusts its advertised TCP receive window to\n   reflect
      the amount of empty buffer space.\n   If no permission for this peer has been
      installed for this\n   allocation, the server MUST close the connection with
      the peer\n   immediately after it has been accepted.\n   Otherwise, the server
      sends a ConnectionAttempt indication to the\n   client over the control connection.
      \ The indication MUST include an\n   XOR-PEER-ADDRESS attribute containing the
      peer's transport address,\n   as well as a CONNECTION-ID attribute uniquely
      identifying the peer\n   data connection.\n   If no ConnectionBind request associated
      with this peer data\n   connection is received after 30 seconds, the peer data
      connection\n   MUST be closed.\n"
    title: 5.3.  Receiving a TCP Connection on a Relayed Transport Address
  - contents:
    - "5.4.  Receiving a ConnectionBind Request\n   When a server receives a ConnectionBind
      request, it processes the\n   request as follows.\n   If the client connection
      transport is not TCP or TLS, the server MUST\n   return a 400 (Bad Request)
      error.\n   If the request does not contain the CONNECTION-ID attribute, or if\n
      \  this attribute does not refer to an existing pending connection, the\n   server
      MUST return a 400 (Bad Request) error.\n   Otherwise, the client connection
      is now called a client data\n   connection.  Data received on it MUST be sent
      as-is to the associated\n   peer data connection.\n   Data received on the associated
      peer data connection MUST be sent\n   as-is on this client data connection.
      \ This includes data that was\n   received after the associated Connect or request
      was successfully\n   processed and before this ConnectionBind request was received.\n"
    title: 5.4.  Receiving a ConnectionBind Request
  - contents:
    - "5.5.  Data Connection Maintenance\n   If the allocation associated with a data
      connection expires, the data\n   connection MUST be closed.\n   When a client
      data connection is closed, the server MUST close the\n   corresponding peer
      data connection.\n   When a peer data connection is closed, the server MUST
      close the\n   corresponding client data connection.\n"
    title: 5.5.  Data Connection Maintenance
  title: 5.  TURN Server Behavior
- contents:
  - "6.  IANA Considerations\n   This specification defines several new STUN methods,
    STUN attributes,\n   and STUN error codes.  IANA added these new protocol elements
    to the\n   Session Traversal Utilities for NAT (STUN) Parameters registry.\n"
  - contents:
    - "6.1.  New STUN Methods\n   This section lists the codepoints for the new STUN
      methods defined in\n   this specification.  See Sections 4 and 5 for the semantics
      of these\n   new methods.\n   0x000a :  Connect\n   0x000b :  ConnectionBind\n
      \  0x000c :  ConnectionAttempt\n"
    title: 6.1.  New STUN Methods
  - contents:
    - "6.2.  New STUN Attributes\n   This STUN extension defines the following new
      attributes:\n   0x002a :  CONNECTION-ID\n"
    - contents:
      - "6.2.1.  CONNECTION-ID\n   The CONNECTION-ID attribute uniquely identifies
        a peer data\n   connection.  It is a 32-bit unsigned integral value.\n"
      title: 6.2.1.  CONNECTION-ID
    title: 6.2.  New STUN Attributes
  - contents:
    - "6.3.  New STUN Error Codes\n   446    Connection Already Exists\n   447    Connection
      Timeout or Failure\n"
    title: 6.3.  New STUN Error Codes
  title: 6.  IANA Considerations
- contents:
  - "7.  Security Considerations\n   After a TCP connection is established between
    the server and a peer,\n   and before a ConnectionBind request is received from
    the client, the\n   server buffers all data received from the peer.  This protocol\n
    \  specification lets the server drop the connection if the buffer size\n   is
    about to exceed a limit defined by local policy.  This policy\n   should ensure
    that memory resources are not exceeded.  See also\n   [RFC4732], Section 2.1.3.\n
    \  All the security considerations applicable to STUN [RFC5389] and TURN\n   [RFC5766]
    are applicable to this document as well.\n"
  title: 7.  Security Considerations
- contents:
  - "8.  Acknowledgements\n   Thanks to Rohan Mahy and Philip Matthews for their initial
    work on\n   getting this document started.\n   The authors would also like to
    thank Alfred E. Heggestad, Ari\n   Keranen, Marc Petit-Huguenin, Dave Thaler,
    and Dan Wing for their\n   comments and suggestions.\n"
  title: 8.  Acknowledgements
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC5389]  Rosenberg, J., Mahy, R., Matthews, P., and D. Wing,\n              \"Session
      Traversal Utilities for NAT (STUN)\", RFC 5389,\n              October 2008.\n
      \  [RFC5766]  Mahy, R., Matthews, P., and J. Rosenberg, \"Traversal Using\n
      \             Relays around NAT (TURN): Relay Extensions to Session\n              Traversal
      Utilities for NAT (STUN)\", RFC 5766, April 2010.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [RFC4732]  Handley, M., Rescorla, E., and
      IAB, \"Internet Denial-of-\n              Service Considerations\", RFC 4732,
      December 2006.\n   [RFC5245]  Rosenberg, J., \"Interactive Connectivity Establishment\n
      \             (ICE): A Protocol for Network Address Translator (NAT)\n              Traversal
      for Offer/Answer Protocols\", RFC 5245,\n              April 2010.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Authors' Addresses\n   Simon Perreault (editor)\n   Viagenie\n   2875 boul. Laurier,
    suite D2-630\n   Quebec, QC  G1V 2M2\n   Canada\n   Phone: +1 418 656 9254\n   EMail:
    simon.perreault@viagenie.ca\n   URI:   http://www.viagenie.ca\n   Jonathan Rosenberg\n
    \  jdrosen.net\n   Monmouth, NJ\n   US\n   EMail: jdrosen@jdrosen.net\n   URI:
    \  http://www.jdrosen.net\n"
  title: Authors' Addresses
