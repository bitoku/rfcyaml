- title: __initial_text__
  contents:
  - '      Internet Message Access Protocol (IMAP) - URLAUTH Extension

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the URLAUTH extension to the Internet Message\n\
    \   Access Protocol (IMAP) (RFC 3501) and the IMAP URL Scheme (IMAPURL)\n   (RFC\
    \ 2192).  This extension provides a means by which an IMAP client\n   can use\
    \ URLs carrying authorization to access limited message data on\n   the IMAP server.\n\
    \   An IMAP server that supports this extension indicates this with a\n   capability\
    \ name of \"URLAUTH\".\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   In [IMAPURL], a URL of the form imap://fred@example.com/INBOX/;uid=20\n\
    \   requires authorization as userid \"fred\".  However, [IMAPURL] implies\n \
    \  that it only supports authentication and confuses the concepts of\n   authentication\
    \ and authorization.\n   The URLAUTH extension defines an authorization mechanism\
    \ for IMAP\n   URLs to replace [IMAPURL]'s authentication-only mechanism.  URLAUTH\n\
    \   conveys authorization in the URL string itself and reuses a portion\n   of\
    \ the syntax of the [IMAPURL] authentication mechanism to convey the\n   authorization\
    \ identity (which also defines the default namespace in\n   [IMAP]).\n   The URLAUTH\
    \ extension provides a means by which an authorized user of\n   an IMAP server\
    \ can create URLAUTH-authorized IMAP URLs.  A URLAUTH-\n   authorized URL conveys\
    \ authorization (not authentication) to the data\n   addressed by that URL.  This\
    \ URL can be used in another IMAP session\n   to access specific content on the\
    \ IMAP server, without otherwise\n   providing authorization to any other data\
    \ (such as other data in the\n   mailbox specified in the URL) owned by the authorizing\
    \ user.\n   Conceptually, a URLAUTH-authorized URL can be thought of as a \"pawn\n\
    \   ticket\" that carries no authentication information and can be\n   redeemed\
    \ by whomever presents it.  However, unlike a pawn ticket,\n   URLAUTH has optional\
    \ mechanisms to restrict the usage of a URLAUTH-\n   authorized URL.  Using these\
    \ mechanisms, URLAUTH-authorized URLs can\n   be usable by:\n      . anonymous\
    \ (the \"pawn ticket\" model)\n      . authenticated users only\n      . a specific\
    \ authenticated user only\n      . message submission acting on behalf of a specific\
    \ user only\n   There is also a mechanism for expiration.\n   A URLAUTH-authorized\
    \ URL can be used in the argument to the BURL\n   command in message composition,\
    \ as described in [BURL], for such\n   purposes as allowing a client (with limited\
    \ memory or other\n   resources) to submit a message forward or to resend from\
    \ an IMAP\n   mailbox without requiring the client to fetch that message data.\n\
    \   The URLAUTH is generated using an authorization mechanism name and an\n  \
    \ authorization token, which is generated using a secret mailbox access\n   key.\
    \  An IMAP client can request that the server generate and assign\n   a new mailbox\
    \ access key (thus effectively revoking all current URLs\n   using URLAUTH with\
    \ the old mailbox access key) but cannot set the\n   mailbox access key to a key\
    \ of its own choosing.\n"
- title: 1.1.  Conventions Used in this Document
  contents:
  - "1.1.  Conventions Used in this Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"SHOULD\", \"SHOULD NOT\", and \"MAY\"\n   in this document are to be interpreted\
    \ as defined in [KEYWORDS].\n   The formal syntax uses the Augmented Backus-Naur\
    \ Form (ABNF) notation\n   including the core rules defined in Appendix A of [ABNF].\n\
    \   In examples, \"C:\" and \"S:\" indicate lines sent by the client and\n   server,\
    \ respectively.  If a single \"C:\" or \"S:\" label applies to\n   multiple lines,\
    \ then the line breaks between those lines are for\n   editorial clarity only\
    \ and are not part of the actual protocol\n   exchange.\n"
- title: 2.  Concepts
  contents:
  - '2.  Concepts

    '
- title: 2.1.  URLAUTH
  contents:
  - "2.1.  URLAUTH\n   The URLAUTH is a component, appended at the end of a URL, that\n\
    \   conveys authorization to access the data addressed by that URL.  It\n   contains\
    \ an authorized access identifier, an authorization mechanism\n   name, and an\
    \ authorization token.  The authorization token is\n   generated from the URL,\
    \ the authorized access identifier, the\n   authorization mechanism name, and\
    \ a mailbox access key.\n"
- title: 2.2.  Mailbox Access Key
  contents:
  - "2.2.  Mailbox Access Key\n   The mailbox access key is a random string with at\
    \ least 128 bits of\n   entropy.  It is generated by software (not by the human\
    \ user) and\n   MUST be unpredictable.\n   Each user has a table of mailboxes\
    \ and an associated mailbox access\n   key for each mailbox.  Consequently, the\
    \ mailbox access key is per-\n   user and per-mailbox.  In other words, two users\
    \ sharing the same\n   mailbox each have a different mailbox access key for that\
    \ mailbox,\n   and each mailbox accessed by a single user also has a different\n\
    \   mailbox access key.\n"
- title: 2.3.  Authorized Access Identifier
  contents:
  - "2.3.  Authorized Access Identifier\n   The authorized access identifier restricts\
    \ use of the URLAUTH\n   authorized URL to certain users authorized on the server,\
    \ as\n   described in section 3.\n"
- title: 2.4.  Authorization Mechanism
  contents:
  - "2.4.  Authorization Mechanism\n   The authorization mechanism is the algorithm\
    \ by which the URLAUTH is\n   generated and subsequently verified, using the mailbox\
    \ access key.\n"
- title: 2.4.1.  INTERNAL Authorization Mechanism
  contents:
  - "2.4.1.  INTERNAL Authorization Mechanism\n   This specification defines the INTERNAL\
    \ mechanism, which uses a token\n   generation algorithm of the server's choosing\
    \ and does not involve\n   disclosure of the mailbox access key to the client.\n\
    \      Note: The token generation algorithm chosen by the server\n      implementation\
    \ should be modern and reasonably secure.  At the\n      time of the writing of\
    \ this document, an [HMAC] such as HMAC-SHA1\n      is recommended.\n      If\
    \ it becomes necessary to change the token generation algorithm\n      of the\
    \ INTERNAL mechanism (e.g., because an attack against the\n      current algorithm\
    \ has been discovered), all currently existing\n      URLAUTH-authorized URLs\
    \ are invalidated by the change in\n      algorithm.  Since this would be an unpleasant\
    \ surprise to\n      applications that depend upon the validity of a URLAUTH-authorized\n\
    \      URL, and there is no good way to do a bulk update of existing\n      deployed\
    \ URLs, it is best to avoid this situation by using a\n      secure algorithm\
    \ as opposed to one that is \"good enough\".\n      Server implementations SHOULD\
    \ consider the possibility of changing\n      the algorithm.  In some cases, it\
    \ may be desirable to implement\n      the change of algorithm in a way that newly-generated\
    \ tokens use\n      the new algorithm, but that for a limited period of time tokens\n\
    \      using either the new or old algorithm can be validated.\n      Consequently,\
    \ the server SHOULD incorporate some means of\n      identifying the token generation\
    \ algorithm within the token.\n   Although this specification is extensible for\
    \ other mechanisms, none\n   are defined in this document.  In addition to the\
    \ mechanism name\n   itself, other mechanisms may have mechanism-specific data,\
    \ which is\n   to be interpreted according to the definition of that mechanism.\n"
- title: 2.5.  Authorization Token
  contents:
  - "2.5.  Authorization Token\n   The authorization token is a deterministic string\
    \ of at least 128\n   bits that an entity with knowledge of the secret mailbox\
    \ access key\n   and URL authorization mechanism can use to verify the URL.\n"
- title: 3.  IMAP URL Extensions
  contents:
  - "3.  IMAP URL Extensions\n   [IMAPURL] is extended by allowing the addition of\n\
    \   \";EXPIRE=<datetime>\" and \";URLAUTH=<access>:<mech>:<token>\" to IMAP\n\
    \   URLs that refer to a specific message or message parts.\n   The URLAUTH is\
    \ comprised of \";URLAUTH=<access>:<mech>:<token>\" and\n   MUST be at the end\
    \ of the URL.\n   URLAUTH does not apply to, and MUST NOT be used with, any IMAP\
    \ URL\n   that refers to an entire IMAP server, a list of mailboxes, an entire\n\
    \   IMAP mailbox, or IMAP search results.\n   When \";EXPIRE=<datetime>\" is used,\
    \ this indicates the latest date and\n   time that the URL is valid.  After that\
    \ date and time, the URL has\n   expired, and server implementations MUST reject\
    \ the URL.  If\n   \";EXPIRE=<datetime>\" is not used, the URL has no expiration,\
    \ but\n   still can be revoked as discussed below.\n   The URLAUTH takes the form\
    \ \";URLAUTH=<access>:<mech>:<token>\".  It is\n   composed of three parts.  The\
    \ <access> portion provides the\n   authorized access identifiers, which may constrain\
    \ the operations and\n   users that are permitted to use this URL.  The <mech>\
    \ portion\n   provides the authorization mechanism used by the IMAP server to\n\
    \   generate the authorization token that follows.  The <token> portion\n   provides\
    \ the authorization token.\n   The \"submit+\" access identifier prefix, followed\
    \ by a userid,\n   indicates that only a userid authorized as a message submission\n\
    \   entity on behalf of the specified userid is permitted to use this\n   URL.\
    \  The IMAP server does not validate the specified userid but does\n   validate\
    \ that the IMAP session has an authorization identity that is\n   authorized as\
    \ a message submission entity.  The authorized message\n   submission entity MUST\
    \ validate the userid prior to contacting the\n   IMAP server.\n   The \"user+\"\
    \ access identifier prefix, followed by a userid, indicates\n   that use of this\
    \ URL is limited to IMAP sessions that are logged in\n   as the specified userid\
    \ (that is, have authorization identity as that\n   userid).\n      Note: If a\
    \ SASL mechanism that provides both authorization and\n      authentication identifiers\
    \ is used to authenticate to the IMAP\n      server, the \"user+\" access identifier\
    \ MUST match the authorization\n      identifier.\n   The \"authuser\" access\
    \ identifier indicates that use of this URL is\n   limited to IMAP sessions that\
    \ are logged in as an authorized user\n   (that is, have authorization identity\
    \ as an authorized user) of that\n   IMAP server.  Use of this URL is prohibited\
    \ to anonymous IMAP\n   sessions.\n   The \"anonymous\" access identifier indicates\
    \ that use of this URL is\n   not restricted by session authorization identity;\
    \ that is, any IMAP\n   session in authenticated or selected state (as defined\
    \ in [IMAP]),\n   including anonymous sessions, may issue a URLFETCH using this\
    \ URL.\n   The authorization token is represented as an ASCII-encoded\n   hexadecimal\
    \ string, which is used to authorize the URL.  The length\n   and the calculation\
    \ of the authorization token depends upon the\n   mechanism used; but, in all\
    \ cases, the authorization token is at\n   least 128 bits (and therefore at least\
    \ 32 hexadecimal digits).\n"
- title: 4.  Discussion of URLAUTH Authorization Issues
  contents:
  - "4.  Discussion of URLAUTH Authorization Issues\n   In [IMAPURL], the userid before\
    \ the \"@\" in the URL has two purposes:\n      1) It provides context for user-specific\
    \ mailbox paths such as\n         \"INBOX\".\n      2) It specifies that resolution\
    \ of the URL requires logging in as\n         that user and limits use of that\
    \ URL to only that user.\n   An obvious limitation of using the same field for\
    \ both purposes is\n   that the URL can only be resolved by the mailbox owner.\n\
    \   URLAUTH overrides the second purpose of the userid in the IMAP URL\n   and\
    \ by default permits the URL to be resolved by any user permitted\n   by the access\
    \ identifier.\n   The \"user+<userid>\" access identifier limits resolution of\
    \ that URL\n   to a particular userid, whereas the \"submit+<userid>\" access\n\
    \   identifier is more general and simply requires that the session be\n   authorized\
    \ by a user that has been granted a \"submit\" role within the\n   authentication\
    \ system.  Use of either of these access identifiers\n   makes it impossible for\
    \ an attacker, spying on the session, to use\n   the same URL, either directly\
    \ or by submission to a message\n   submission entity.\n   The \"authuser\" and\
    \ \"anonymous\" access identifiers do not have this\n   level of protection and\
    \ should be used with caution.  These access\n   identifiers are primarily useful\
    \ for public export of data from an\n   IMAP server, without requiring that it\
    \ be copied to a web or\n   anonymous FTP server.  Refer to the Security Considerations\
    \ for more\n   details.\n"
- title: 5.  Generation of URLAUTH-Authorized URLs
  contents:
  - "5.  Generation of URLAUTH-Authorized URLs\n   A URLAUTH-authorized URL is generated\
    \ from an initial URL as follows:\n   An initial URL is built, ending with \"\
    ;URLAUTH=<access>\" but without\n   the \":<mech>:<token>\" components.  An authorization\
    \ mechanism is\n   selected and used to calculate the authorization token, with\
    \ the\n   initial URL as the data and a secret known to the IMAP server as the\n\
    \   key.  The URLAUTH-authorized URL is generated by taking the initial\n   URL\
    \ and appending \":\", the URL authorization mechanism name, \":\", and\n   the\
    \ ASCII-encoded hexadecimal representation of the authorization\n   token.\n \
    \     Note: ASCII-encoded hexadecimal is used instead of BASE64 because\n    \
    \  a BASE64 representation may have \"=\" padding characters, which\n      would\
    \ be problematic in a URL.\n   In the INTERNAL mechanism, the mailbox access key\
    \ for that mailbox is\n   the secret known to the IMAP server, and a server-selected\
    \ algorithm\n   is used as described in section 2.4.1.\n"
- title: 6.  Validation of URLAUTH-authorized URLs
  contents:
  - "6.  Validation of URLAUTH-authorized URLs\n   A URLAUTH-authorized URL is validated\
    \ as follows:\n   The URL is split at the \":\" that separates \"<access>\" from\n\
    \   \"<mech>:<token>\" in the \";URLAUTH=<access>:<mech>:<token>\" portion of\n\
    \   the URL.  The \"<mech>:<token>\" portion is first parsed and saved as\n  \
    \ the authorization mechanism and the authorization token.  The URL is\n   truncated,\
    \ discarding the \":\" described above, to create a \"rump URL\"\n   (the URL\
    \ minus the \":\" and the \"<mech>:<token>\" portion).  The rump\n   URL is then\
    \ analyzed to identify the mailbox.\n   If the mailbox cannot be identified, an\
    \ authorization token is\n   calculated on the rump URL, using random \"plausible\"\
    \ keys (selected\n   by the server) as needed, before returning a validation failure.\n\
    \   This prevents timing attacks aimed at identifying mailbox names.\n   If the\
    \ mailbox can be identified, the authorization token is\n   calculated on the\
    \ rump URL and a secret known to the IMAP server\n   using the given URL authorization\
    \ mechanism.  Validation is\n   successful if, and only if, the calculated authorization\
    \ token for\n   that mechanism matches the authorization token supplied in\n \
    \  \";URLAUTH=<access>:<mech>:<token>\".\n   Removal of the \":<mech>:<token>\"\
    \ portion of the URL MUST be the only\n   operation applied to the URLAUTH-authorized\
    \ URL to get the rump URL.\n   In particular, URL percent escape decoding and\
    \ case-folding\n   (including to the domain part of the URL) MUST NOT occur.\n\
    \   In the INTERNAL mechanism, the mailbox access key for that mailbox is\n  \
    \ used as the secret known to the IMAP server, and the same server-\n   selected\
    \ algorithm used for generating URLs is used to calculate the\n   authorization\
    \ token for verification.\n"
- title: 7.  Additional Commands
  contents:
  - "7.  Additional Commands\n   These commands are extensions to the [IMAP] base\
    \ protocol.\n   The section headings of these commands are intended to correspond\n\
    \   with where they would be located in the base protocol document if\n   they\
    \ were part of that document.\n"
- title: BASE.6.3.RESETKEY.  RESETKEY Command
  contents:
  - "BASE.6.3.RESETKEY.  RESETKEY Command\n   Arguments:  optional mailbox name\n\
    \               optional mechanism name(s)\n   Responses:  none other than in\
    \ result\n   Result:     OK - RESETKEY completed, URLMECH containing new data\n\
    \               NO - RESETKEY error: can't change key of that mailbox\n      \
    \         BAD - command unknown or arguments invalid\n   The RESETKEY command\
    \ has two forms.\n   The first form accepts a mailbox name as an argument and\
    \ generates a\n   new mailbox access key for the given mailbox in the user's mailbox\n\
    \   access key table, replacing any previous mailbox access key (and\n   revoking\
    \ any URLs that were authorized with a URLAUTH using that key)\n   in that table.\
    \  By default, the mailbox access key is generated for\n   the INTERNAL mechanism;\
    \ other mechanisms can be specified with the\n   optional mechanism argument.\n\
    \   The second form, with no arguments, removes all mailbox access keys\n   in\
    \ the user's mailbox access key table, revoking all URLs currently\n   authorized\
    \ using URLAUTH by the user.\n   Any current IMAP session logged in as the user\
    \ that has the mailbox\n   selected will receive an untagged OK response with\
    \ the URLMECH status\n   response code (see section BASE.7.1.URLMECH for more\
    \ details about\n   the URLMECH status response code).\n   Example:\n      C:\
    \ a31 RESETKEY\n      S: a31 OK All keys removed\n      C: a32 RESETKEY INBOX\n\
    \      S: a32 OK [URLMECH INTERNAL] mechs\n      C: a33 RESETKEY INBOX XSAMPLE\n\
    \      S: a33 OK [URLMECH INTERNAL XSAMPLE=P34OKhO7VEkCbsiYY8rGEg==] done\n"
- title: BASE.6.3.GENURLAUTH.  GENURLAUTH Command
  contents:
  - "BASE.6.3.GENURLAUTH.  GENURLAUTH Command\n      Argument:   one or more URL/mechanism\
    \ pairs\n      Response:   untagged response: GENURLAUTH\n      Result:     OK\
    \ - GENURLAUTH completed\n                  NO - GENURLAUTH error: can't generate\
    \ a URLAUTH\n                  BAD - command unknown or arguments invalid\n  \
    \ The GENURLAUTH command requests that the server generate a URLAUTH-\n   authorized\
    \ URL for each of the given URLs using the given URL\n   authorization mechanism.\n\
    \   The server MUST validate each supplied URL as follows:\n      (1) The mailbox\
    \ component of the URL MUST refer to an existing\n          mailbox.\n      (2)\
    \ The server component of the URL MUST contain a valid userid\n          that\
    \ identifies the owner of the mailbox access key table that\n          will be\
    \ used to generate the URLAUTH-authorized URL.  As a\n          consequence, the\
    \ iserver rule of [IMAPURL] is modified so that\n          iuserauth is mandatory.\n\
    \             Note: the server component of the URL is generally the\n       \
    \      logged in userid and server.  If not, then the logged in\n            \
    \ userid and server MUST have owner-type access to the\n             mailbox access\
    \ key table owned by the userid and server\n             indicated by the server\
    \ component of the URL.\n      (3) There is a valid access identifier that, in\
    \ the case of\n          \"submit+\" and \"user+\", will contain a valid userid.\
    \  This\n          userid is not necessarily the same as the owner userid\n  \
    \        described in (2).\n      (4) The server MAY also verify that the iuid\
    \ and/or isection\n          components (if present) are valid.\n   If any of\
    \ the above checks fail, the server MUST return a tagged BAD\n   response with\
    \ the following exception.  If an invalid userid is\n   supplied as the mailbox\
    \ access key owner and/or as part of the access\n   identifier, the server MAY\
    \ issue a tagged OK response with a\n   generated mailbox key that always fails\
    \ validation when used with a\n   URLFETCH command.  This exception prevents an\
    \ attacker from\n   validating userids.\n   If there is currently no mailbox access\
    \ key for the given mailbox in\n   the owner's mailbox access key table, one is\
    \ automatically generated.\n   That is, it is not necessary to use RESETKEY prior\
    \ to first-time use\n   of GENURLAUTH.\n   If the command is successful, a GENURLAUTH\
    \ response code is returned\n   listing the requested URLs as URLAUTH-authorized\
    \ URLs.\n   Examples:\n      C: a775 GENURLAUTH \"imap://joe@example.com/INBOX/;uid=20/\n\
    \         ;section=1.2\" INTERNAL\n      S: a775 BAD missing access identifier\
    \ in supplied URL\n      C: a776 GENURLAUTH \"imap://example.com/Shared/;uid=20/\n\
    \         ;section=1.2;urlauth=submit+fred\" INTERNAL\n      S: a776 BAD missing\
    \ owner username in supplied URL\n      C: a777 GENURLAUTH \"imap://joe@example.com/INBOX/;uid=20/\n\
    \         ;section=1.2;urlauth=submit+fred\" INTERNAL\n      S: * GENURLAUTH \"\
    imap://joe@example.com/INBOX/;uid=20/;section=1.2\n         ;urlauth=submit+fred:internal:91354a473744909de610943775f92038\"\
    \n      S: a777 OK GENURLAUTH completed\n"
- title: BASE.6.3.URLFETCH.  URLFETCH Command
  contents:
  - "BASE.6.3.URLFETCH.  URLFETCH Command\n      Argument:   one or more URLs\n  \
    \    Response:   untagged response: URLFETCH\n      Result:     OK - urlfetch\
    \ completed\n                  NO - urlfetch failed due to server internal error\n\
    \                  BAD - command unknown or arguments invalid\n   The URLFETCH\
    \ command requests that the server return the text data\n   associated with the\
    \ specified IMAP URLs, as described in [IMAPURL]\n   and extended by this document.\
    \  The data is returned for all\n   validated URLs, regardless of whether or not\
    \ the session would\n   otherwise be able to access the mailbox containing that\
    \ data via\n   SELECT or EXAMINE.\n      Note: This command does not require that\
    \ the URL refer to the\n      selected mailbox; nor does it require that any mailbox\
    \ be\n      selected.  It also does not in any way interfere with any selected\n\
    \      mailbox.\n   The URLFETCH command effectively executes with the access\
    \ of the\n   userid in the server component of the URL (which is generally the\n\
    \   userid that issued the GENURLAUTH).  By itself, the URLAUTH does NOT\n   grant\
    \ access to the data; once validated, it grants whatever access\n   to the data\
    \ is held by the userid in the server component of the URL.\n   That access may\
    \ have changed since the GENURLAUTH was done.\n   The URLFETCH command MUST return\
    \ an untagged URLFETCH response and a\n   tagged OK response to any URLFETCH command\
    \ that is syntactically\n   valid.  A NO response indicates a server internal\
    \ failure that may be\n   resolved on later retry.\n      Note: The possibility\
    \ of a NO response is to accommodate\n      implementations that would otherwise\
    \ have to issue an untagged BYE\n      with a fatal error due to an inability\
    \ to respond to a valid\n      request.  In an ideal world, a server SHOULD NOT\
    \ issue a NO\n      response.\n   The server MUST return NIL for any IMAP URL\
    \ that references an entire\n   IMAP server, a list of mailboxes, an entire IMAP\
    \ mailbox, or IMAP\n   search results.\n   Example:\n      Note: For clarity,\
    \ this example uses the LOGIN command, which\n      SHOULD NOT be used over a\
    \ non-encrypted communication path.\n      This example is of a submit server,\
    \ obtaining a message segment\n      for a message that it has already validated\
    \ was submitted by\n      \"fred\".\n      S: * OK [CAPABILITY IMAP4REV1 URLAUTH]\
    \ example.com IMAP server\n      C: a001 LOGIN submitserver secret\n      S: a001\
    \ OK submitserver logged in\n      C: a002 URLFETCH \"imap://joe@example.com/INBOX/;uid=20/\n\
    \         ;section=1.2;urlauth=submit+fred:internal\n         :91354a473744909de610943775f92038\"\
    \n      S: * URLFETCH \"imap://joe@example.com/INBOX/;uid=20/;section=1.2\n  \
    \       ;urlauth=submit+fred:internal\n         :91354a473744909de610943775f92038\"\
    \ {28}\n      S: Si vis pacem, para bellum.\n      S:\n      S: a002 OK URLFETCH\
    \ completed\n"
- title: 8.  Additional Responses
  contents:
  - "8.  Additional Responses\n   These responses are extensions to the [IMAP] base\
    \ protocol.\n   The section headings of these responses are intended to correspond\n\
    \   with where they would be located in the base protocol document if\n   they\
    \ were part of that document.\n"
- title: BASE.7.1.URLMECH.  URLMECH Status Response Code
  contents:
  - "BASE.7.1.URLMECH.  URLMECH Status Response Code\n   The URLMECH status response\
    \ code is followed by a list of URL\n   authorization mechanism names.  Mechanism\
    \ names other than INTERNAL\n   may be appended with an \"=\" and BASE64-encoded\
    \ form of mechanism-\n   specific data.\n   This status response code is returned\
    \ in an untagged OK response in\n   response to a RESETKEY, SELECT, or EXAMINE\
    \ command.  In the case of\n   the RESETKEY command, this status response code\
    \ can be sent in the\n   tagged OK response instead of requiring a separate untagged\
    \ OK\n   response.\n   Example:\n      C: a33 RESETKEY INBOX XSAMPLE\n      S:\
    \ a33 OK [URLMECH INTERNAL XSAMPLE=P34OKhO7VEkCbsiYY8rGEg==] done\n   In this\
    \ example, the server supports the INTERNAL mechanism and an\n   experimental\
    \ mechanism called XSAMPLE, which also holds some\n   mechanism-specific data\
    \ (the name \"XSAMPLE\" is for illustrative\n   purposes only).\n"
- title: BASE.7.4.GENURLAUTH.   GENURLAUTH Response
  contents:
  - "BASE.7.4.GENURLAUTH.   GENURLAUTH Response\n   Contents:   One or more URLs\n\
    \   The GENURLAUTH response returns the URLAUTH-authorized URL(s)\n   requested\
    \ by a GENURLAUTH command.\n   Example:\n      C: a777 GENURLAUTH \"imap://joe@example.com/INBOX/;uid=20/\n\
    \         ;section=1.2;urlauth=submit+fred\" INTERNAL\n      S: * GENURLAUTH \"\
    imap://joe@example.com/INBOX/;uid=20/;section=1.2\n         ;urlauth=submit+fred:internal:91354a473744909de610943775f92038\"\
    \n      S: a777 OK GENURLAUTH completed\n"
- title: BASE.7.4.URLFETCH.  URLFETCH Response
  contents:
  - "BASE.7.4.URLFETCH.  URLFETCH Response\n   Contents:   One or more URL/nstring\
    \ pairs\n   The URLFETCH response returns the message text data associated with\n\
    \   one or more IMAP URLs, as described in [IMAPURL] and extended by this\n  \
    \ document.  This response occurs as the result of a URLFETCH command.\n   The\
    \ returned data string is NIL if the URL is invalid for any reason\n   (including\
    \ validation failure).  If the URL is valid, but the IMAP\n   fetch of the body\
    \ part returned NIL (this should not happen), the\n   returned data string should\
    \ be the empty string (\"\") and not NIL.\n      Note: This command does not require\
    \ that the URL refer to the\n      selected mailbox; nor does it require that\
    \ any mailbox be\n      selected.  It also does not in any way interfere with\
    \ any selected\n      mailbox.\n   Example:\n      C: a002 URLFETCH \"imap://joe@example.com/INBOX/;uid=20/\n\
    \         ;section=1.2;urlauth=submit+fred:internal\n         :91354a473744909de610943775f92038\"\
    \n      S: * URLFETCH \"imap://joe@example.com/INBOX/;uid=20/;section=1.2\n  \
    \       ;urlauth=submit+fred:internal\n         :91354a473744909de610943775f92038\"\
    \ {28}\n      S: Si vis pacem, para bellum.\n      S:\n      S: a002 OK URLFETCH\
    \ completed\n"
- title: 9.  Formal Syntax
  contents:
  - "9.  Formal Syntax\n   The following syntax specification uses the Augmented Backus-Naur\n\
    \   Form (ABNF) notation as specified in [ABNF].\n   The following modifications\
    \ are made to the Formal Syntax in [IMAP]:\n"
- title: resetkey        = "RESETKEY" [SP mailbox *(SP mechanism)]
  contents:
  - 'resetkey        = "RESETKEY" [SP mailbox *(SP mechanism)]

    '
- title: capability      =/ "URLAUTH"
  contents:
  - 'capability      =/ "URLAUTH"

    '
- title: command-auth    =/ resetkey / genurlauth / urlfetch
  contents:
  - 'command-auth    =/ resetkey / genurlauth / urlfetch

    '
- title: resp-text-code  =/ "URLMECH" SP "INTERNAL" *(SP mechanism ["=" base64])
  contents:
  - 'resp-text-code  =/ "URLMECH" SP "INTERNAL" *(SP mechanism ["=" base64])

    '
- title: genurlauth      = "GENURLAUTH" 1*(SP url-rump SP mechanism)
  contents:
  - 'genurlauth      = "GENURLAUTH" 1*(SP url-rump SP mechanism)

    '
- title: genurlauth-data = "*" SP "GENURLAUTH" 1*(SP url-full)
  contents:
  - 'genurlauth-data = "*" SP "GENURLAUTH" 1*(SP url-full)

    '
- title: url-full        = astring
  contents:
  - "url-full        = astring\n                     ; contains authimapurlfull as\
    \ defined below\n"
- title: url-rump        = astring
  contents:
  - "url-rump        = astring\n                     ; contains authimapurlrump as\
    \ defined below\n"
- title: urlfetch        = "URLFETCH" 1*(SP url-full)
  contents:
  - 'urlfetch        = "URLFETCH" 1*(SP url-full)

    '
- title: urlfetch-data   = "*" SP "URLFETCH" 1*(SP url-full SP nstring)
  contents:
  - "urlfetch-data   = \"*\" SP \"URLFETCH\" 1*(SP url-full SP nstring)\n   The following\
    \ extensions are made to the Formal Syntax in [IMAPURL]:\n"
- title: authimapurl     = "imap://" enc-user [iauth] "@" hostport "/"
  contents:
  - "authimapurl     = \"imap://\" enc-user [iauth] \"@\" hostport \"/\"\n       \
    \              imessagepart\n                     ; replaces \"imapurl\" and \"\
    iserver\" rules for\n                     ; URLAUTH authorized URLs\n"
- title: authimapurlfull = authimapurl iurlauth
  contents:
  - 'authimapurlfull = authimapurl iurlauth

    '
- title: authimapurlrump = authimapurl iurlauth-rump
  contents:
  - 'authimapurlrump = authimapurl iurlauth-rump

    '
- title: enc-urlauth     = 32*HEXDIG
  contents:
  - 'enc-urlauth     = 32*HEXDIG

    '
- title: enc-user        = 1*achar
  contents:
  - "enc-user        = 1*achar\n                     ; same as \"enc_user\" in RFC\
    \ 2192\n"
- title: iurlauth        = iurlauth-rump ":" mechanism ":" enc-urlauth
  contents:
  - 'iurlauth        = iurlauth-rump ":" mechanism ":" enc-urlauth

    '
- title: iurlauth-rump   = [expire] ";URLAUTH=" access
  contents:
  - 'iurlauth-rump   = [expire] ";URLAUTH=" access

    '
- title: access          = ("submit+" enc-user) / ("user+" enc-user) /
  contents:
  - "access          = (\"submit+\" enc-user) / (\"user+\" enc-user) /\n         \
    \           \"authuser\" / \"anonymous\"\n"
- title: expire          = ";EXPIRE=" date-time
  contents:
  - "expire          = \";EXPIRE=\" date-time\n                      ; date-time defined\
    \ in [DATETIME]\n"
- title: mechanism       = "INTERNAL" / 1*(ALPHA / DIGIT / "-" / ".")
  contents:
  - "mechanism       = \"INTERNAL\" / 1*(ALPHA / DIGIT / \"-\" / \".\")\n        \
    \             ; case-insensitive\n                     ; new mechanisms MUST be\
    \ registered with IANA\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   Security considerations are discussed throughout\
    \ this memo.\n   The mailbox access key SHOULD have at least 128 bits of entropy\n\
    \   (refer to [RANDOM] for more details) and MUST be unpredictable.\n   The server\
    \ implementation of the INTERNAL mechanism SHOULD consider\n   the possibility\
    \ of needing to change the token generation algorithm,\n   and SHOULD incorporate\
    \ some means of identifying the token generation\n   algorithm within the token.\n\
    \   The URLMECH status response code may expose sensitive data in the\n   mechanism-specific\
    \ data for mechanisms other than INTERNAL.  A server\n   implementation MUST implement\
    \ a configuration that will not return a\n   URLMECH status response code unless\
    \ some mechanism is provided that\n   protects the session from snooping, such\
    \ as a TLS or SASL security\n   layer that provides confidentiality protection.\n\
    \   The calculation of an authorization token with a \"plausible\" key if\n  \
    \ the mailbox can not be identified is necessary to avoid attacks in\n   which\
    \ the server is probed to see if a particular mailbox exists on\n   the server\
    \ by measuring the amount of time taken to reject a known\n   bad name versus\
    \ some other name.\n   To protect against a computational denial-of-service attack,\
    \ a server\n   MAY impose progressively longer delays on multiple URL requests\
    \ that\n   fail validation.\n   The decision to use the \"authuser\" access identifier\
    \ should be made\n   with caution.  An \"authuser\" access identifier can be used\
    \ by any\n   authorized user of the IMAP server; therefore, use of this access\n\
    \   identifier should be limited to content that may be disclosed to any\n   authorized\
    \ user of the IMAP server.\n   The decision to use the \"anonymous\" access identifier\
    \ should be made\n   with extreme caution.  An \"anonymous\" access identifier\
    \ can be used\n   by anyone; therefore, use of this access identifier should be\
    \ limited\n   to content that may be disclosed to anyone.  Many IMAP servers do\
    \ not\n   permit anonymous access; in this case, the \"anonymous\" access\n  \
    \ identifier is equivalent to \"authuser\", but this MUST NOT be relied\n   upon.\n\
    \   Although this specification does not prohibit the theoretical\n   capability\
    \ to generate a URL with a server component other than the\n   logged in userid\
    \ and server, this capability should only be provided\n   when the logged in userid/server\
    \ has been authorized as equivalent to\n   the server component userid/server,\
    \ or otherwise has access to that\n   userid/server mailbox access key table.\n"
- title: 11.  IANA Considerations
  contents:
  - "11.  IANA Considerations\n   This document constitutes registration of the URLAUTH\
    \ capability in\n   the imap4-capabilities registry.\n   URLAUTH authorization\
    \ mechanisms are registered by publishing a\n   standards track or IESG-approved\
    \ experimental RFC.  The registry is\n   currently located at:\n"
- title: http://www.iana.org/assignments/urlauth-authorization-mechanism-registry
  contents:
  - "http://www.iana.org/assignments/urlauth-authorization-mechanism-registry\n  \
    \ This registry is case-insensitive.\n   This document constitutes registration\
    \ of the INTERNAL URLAUTH\n   authorization mechanism.\n   IMAP URLAUTH Authorization\
    \ Mechanism Registry\n      Mechanism Name           Reference\n      --------------\
    \           ---------\n      INTERNAL                 [RFC4467]\n"
- title: 12.  Normative References
  contents:
  - "12.  Normative References\n   [ABNF]     Crocker, D. and P. Overell, \"Augmented\
    \ BNF for Syntax\n              Specifications: ABNF\", RFC 4234, October 2005.\n\
    \   [BURL]     Newman, C., \"Message Submission BURL Extension\", RFC 4468,\n\
    \              May 2006.\n   [DATETIME] Klyne, G. and C. Newman, \"Date and Time\
    \ on the Internet:\n              Timestamps\", RFC 3339, July 2002.\n   [IMAP]\
    \     Crispin, M., \"Internet Message Access Protocol - Version\n            \
    \  4rev1\", RFC 3501, March 2003.\n   [IMAPURL]  Newman, C., \"IMAP URL Scheme\"\
    , RFC 2192, September 1997.\n   [KEYWORDS] Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n"
- title: 13.  Informative References
  contents:
  - "13.  Informative References\n   [HMAC]     Krawczyk, H., Bellare, M., and R.\
    \ Canetti, \"HMAC: Keyed-\n              Hashing for Message Authentication\"\
    , RFC 2104, February\n              1997.\n   [RANDOM]   Eastlake, D., 3rd, Schiller,\
    \ J., and S. Crocker,\n              \"Randomness Requirements for Security\"\
    , BCP 106, RFC 4086,\n              June 2005.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Mark R. Crispin\n   Networks and Distributed Computing\n\
    \   University of Washington\n   4545 15th Avenue NE\n   Seattle, WA  98105-4527\n\
    \   Phone: (206) 543-5762\n   EMail: MRC@CAC.Washington.EDU\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
