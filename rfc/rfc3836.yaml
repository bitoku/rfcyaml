- title: __initial_text__
  contents:
  - "          Requirements for Open Pluggable Edge Services (OPES)\n            \
    \               Callout Protocols\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies the requirements that the OPES (Open\n \
    \  Pluggable Edge Services) callout protocol must satisfy in order to\n   support\
    \ the remote execution of OPES services.  The requirements are\n   intended to\
    \ help evaluate possible protocol candidates, as well as to\n   guide the development\
    \ of such protocols.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Terminology . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  Introduction. . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   2\n   3.  Functional Requirements . . . . . . . . . . . . . . . .\
    \ . . .   3\n       3.1.  Reliability . . . . . . . . . . . . . . . . . . . .\
    \ . .   3\n       3.2.  Congestion Avoidance  . . . . . . . . . . . . . . . .\
    \ .   3\n       3.3.  Callout Transactions  . . . . . . . . . . . . . . . . .\
    \   3\n       3.4.  Callout Connections . . . . . . . . . . . . . . . . . .  \
    \ 4\n       3.5.  Asynchronous Message Exchange . . . . . . . . . . . . .   5\n\
    \       3.6.  Message Segmentation  . . . . . . . . . . . . . . . . .   5\n  \
    \     3.7.  Support for Keep-Alive Mechanism  . . . . . . . . . . .   6\n    \
    \   3.8.  Operation in NAT Environments . . . . . . . . . . . . .   6\n      \
    \ 3.9.  Multiple Callout Servers  . . . . . . . . . . . . . . .   6\n       3.10.\
    \ Multiple OPES Processors  . . . . . . . . . . . . . . .   6\n       3.11. Support\
    \ for Different Application Protocols . . . . . .   7\n       3.12. Capability\
    \ and Parameter Negotiations . . . . . . . . .   7\n       3.13. Meta Data and\
    \ Instructions  . . . . . . . . . . . . . .   8\n   4.  Performance Requirements\
    \  . . . . . . . . . . . . . . . . . .   9\n       4.1.  Protocol Efficiency .\
    \ . . . . . . . . . . . . . . . . .   9\n   5.  Security Requirements . . . .\
    \ . . . . . . . . . . . . . . . .   9\n       5.1.  Authentication, Confidentiality,\
    \ and Integrity  . . . .   9\n       5.2.  Hop-by-Hop Confidentiality. . . . .\
    \ . . . . . . . . . .  10\n       5.3.  Operation Across Untrusted Domains. .\
    \ . . . . . . . . .  10\n       5.4.  Privacy . . . . . . . . . . . . . . . .\
    \ . . . . . . . .  10\n   6.  Security Considerations . . . . . . . . . . . .\
    \ . . . . . . .  10\n   7.  References. . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  10\n       7.1.  Normative References. . . . . . . . . . . . .\
    \ . . . . .  10\n       7.2.  Informative References. . . . . . . . . . . . .\
    \ . . . .  11\n   8.  Acknowledgments . . . . . . . . . . . . . . . . . . . .\
    \ . . .  11\n   9.  Authors' Addresses. . . . . . . . . . . . . . . . . . . .\
    \ . .  12\n   10. Full Copyright Statement. . . . . . . . . . . . . . . . . .\
    \ .  13\n"
- title: 1.  Terminology
  contents:
  - "1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in BCP\
    \ 14, RFC 2119 [2].\n"
- title: 2.  Introduction
  contents:
  - "2.  Introduction\n   The Open Pluggable Edge Services (OPES) architecture [1]\
    \ enables\n   cooperative application services (OPES services) between a data\n\
    \   provider, a data consumer, and zero or more OPES processors.  The\n   application\
    \ services under consideration analyze, and possibly\n   transform, application-level\
    \ messages exchanged between the data\n   provider and the data consumer.\n  \
    \ The execution of such services is governed by a set of rules\n   installed on\
    \ the OPES processor.  The enforcement of rules can\n   trigger the execution\
    \ of service applications local to the OPES\n   processor.  Alternatively, the\
    \ OPES processor can distribute the\n   responsibility of service execution by\
    \ communicating and\n   collaborating with one or more remote callout servers.\
    \  As described\n   in [1], an OPES processor communicates with and invokes services\
    \ on a\n   callout server by using a callout protocol.  This document presents\n\
    \   the requirements for such a protocol.\n   The requirements in this document\
    \ are divided into three categories -\n   functional requirements, performance\
    \ requirements, and security\n   requirements.  Each requirement is presented\
    \ as one or more\n   statements, followed by brief explanatory material as appropriate.\n"
- title: 3.  Functional Requirements
  contents:
  - '3.  Functional Requirements

    '
- title: 3.1.  Reliability
  contents:
  - "3.1.  Reliability\n   The OPES callout protocol MUST be able to provide ordered\
    \ reliability\n   for the communication between an OPES processor and callout\
    \ server.\n   Additionally, the callout protocol SHOULD be able to provide\n \
    \  unordered reliability.\n   In order to satisfy the reliability requirements,\
    \ the callout\n   protocol SHOULD specify that it must be used with a transport\n\
    \   protocol that provides ordered/unordered reliability at the\n   transport-layer,\
    \ for example TCP [6] or SCTP [7].\n"
- title: 3.2.  Congestion Avoidance
  contents:
  - "3.2.  Congestion Avoidance\n   The OPES callout protocol MUST ensure that congestion\
    \ avoidance\n   matching the standard of RFC 2914 [4] is applied on all communication\n\
    \   between the OPES processor and callout server.  For this purpose, the\n  \
    \ callout protocol SHOULD use a congestion-controlled transport-layer\n   protocol,\
    \ presumably either TCP [6] or SCTP [7].\n"
- title: 3.3.  Callout Transactions
  contents:
  - "3.3.  Callout Transactions\n   The OPES callout protocol MUST enable an OPES\
    \ processor and a callout\n   server to perform callout transactions with the\
    \ purpose of exchanging\n   partial or complete application-level protocol messages\
    \ (or\n   modifications thereof).  More specifically, the callout protocol MUST\n\
    \   enable an OPES processor to forward a partial or complete application\n  \
    \ message to a callout server so that one or more OPES services can\n   process\
    \ the forwarded application message (or parts thereof).  The\n   result of the\
    \ service operation may be a modified application\n   message.  The callout protocol\
    \ MUST therefore enable the callout\n   server to return a modified application\
    \ message or the modified parts\n   of an application message to the OPES processor.\
    \  Additionally, the\n   callout protocol MUST enable a callout server to report\
    \ the result of\n   a callout transaction (e.g., in the form of a status code)\
    \ back to\n   the OPES processor.\n   A callout transaction is defined as a message\
    \ exchange between an\n   OPES processor and a callout server consisting of a\
    \ callout request\n   and a callout response.  Both, the callout request and the\
    \ callout\n   response MAY each consist of one or more callout protocol messages,\n\
    \   i.e. a series of protocol messages.  A callout request MUST always\n   contain\
    \ a partial or complete application message.  A callout\n   response MUST always\
    \ indicate the result of the callout transaction.\n   A callout response MAY contain\
    \ a modified application message.\n   Callout transactions are always initiated\
    \ by a callout request from\n   an OPES processor and are typically terminated\
    \ by a callout response\n   from a callout server.  The OPES callout protocol\
    \ MUST, however, also\n   provide a mechanism that allows either endpoint of a\
    \ callout\n   transaction to terminate a callout transaction before a callout\n\
    \   request or response has been completely received by the corresponding\n  \
    \ callout endpoint.  Such a mechanism MUST ensure that a premature\n   termination\
    \ of a callout transaction does not result in the loss of\n   application message\
    \ data.\n   A premature termination of a callout transaction is required to\n\
    \   support OPES services, which may terminate even before they have\n   processed\
    \ the entire application message.  Content analysis services,\n   for example,\
    \ may be able to classify a Web object after having\n   processed just the first\
    \ few bytes of a Web object.\n"
- title: 3.4.  Callout Connections
  contents:
  - "3.4.  Callout Connections\n   The OPES callout protocol MUST enable an OPES processor\
    \ and a callout\n   server to perform multiple callout transactions over a callout\n\
    \   connection.  Additionally, the callout protocol MUST provide a method\n  \
    \ of associating callout transactions with callout connections.  A\n   callout\
    \ connection is defined as a logical connection at the\n   application-layer between\
    \ an OPES processor and a callout server.  A\n   callout connection MAY have certain\
    \ parameters associated with it,\n   for example parameters that control the fail-over\
    \ behavior of\n   connection endpoints.  Callout connection-specific parameters\
    \ MAY be\n   negotiated between OPES processors and callout servers (see Section\n\
    \   3.12).\n   The OPES callout protocol MAY choose to multiplex multiple callout\n\
    \   connections over a single transport-layer connection if a flow\n   control\
    \ mechanism that guarantees fairness among multiplexed callout\n   connections\
    \ is applied.\n   Callout connections MUST always be initiated by an OPES processor.\
    \  A\n   callout connection MAY be closed by either endpoint of the\n   connection,\
    \ provided that doing so does not affect the normal\n   operation of on-going\
    \ callout transactions associated with the\n   callout connection.\n"
- title: 3.5.  Asynchronous Message Exchange
  contents:
  - "3.5.  Asynchronous Message Exchange\n   The OPES callout protocol MUST support\
    \ an asynchronous message\n   exchange over callout connections.\n   In order\
    \ to allow asynchronous processing on the OPES processor and\n   callout server,\
    \ it MUST be possible to separate request issuance from\n   response processing.\
    \  The protocol MUST therefore allow multiple\n   outstanding callout requests\
    \ and provide a method of correlating\n   callout responses with callout requests.\n\
    \   Additionally, the callout protocol MUST enable a callout server to\n   respond\
    \ to a callout request before it has received the entire\n   request.\n"
- title: 3.6.  Message Segmentation
  contents:
  - "3.6.  Message Segmentation\n   The OPES callout protocol MUST allow an OPES processor\
    \ to forward an\n   application message to a callout server in a series of smaller\n\
    \   message fragments.  The callout protocol MUST further enable the\n   receiving\
    \ callout server to re-assemble the fragmented application\n   message.\n   Likewise,\
    \ the callout protocol MUST enable a callout server to return\n   an application\
    \ message to an OPES processor in a series of smaller\n   message fragments. \
    \ The callout protocol MUST enable the receiving\n   OPES processor to re-assemble\
    \ the fragmented application message.\n   Depending on the application-layer protocol\
    \ used on the data path,\n   application messages may be very large in size (for\
    \ example in the\n   case of audio/video streams) or of unknown size.  In both\
    \ cases, the\n   OPES processor has to initiate a callout transaction before it\
    \ has\n   received the entire application message to avoid long delays for the\n\
    \   data consumer.  The OPES processor MUST therefore be able to forward\n   fragments\
    \ or chunks of an application message to a callout server as\n   it receives them\
    \ from the data provider or consumer.  Likewise, the\n   callout server MUST be\
    \ able to process and return application message\n   fragments as it receives\
    \ them from the OPES processor.\n   Application message segmentation is also required\
    \ if the OPES callout\n   protocol provides a flow control mechanism in order\
    \ to multiplex\n   multiple callout connections over a single transport-layer\
    \ connection\n   (see Section 3.4).\n"
- title: 3.7.  Support for Keep-Alive Mechanism
  contents:
  - "3.7.  Support for Keep-Alive Mechanism\n   The OPES callout protocol MUST provide\
    \ a keep-alive mechanism which,\n   if used, would allow both endpoints of a callout\
    \ connection to detect\n   a failure of the other endpoint, even in the absence\
    \ of callout\n   transactions.  The callout protocol MAY specify that keep-alive\n\
    \   messages be exchanged over existing callout connections or a separate\n  \
    \ connection between OPES processor and callout server.  The callout\n   protocol\
    \ MAY also specify that the use of the keep-alive mechanism is\n   optional.\n\
    \   The detection of a callout server failure may enable an OPES\n   processor\
    \ to establish a callout connection with a stand-by callout\n   server so that\
    \ future callout transactions do not result in the loss\n   of application message\
    \ data.  The detection of the failure of an OPES\n   processor may enable a callout\
    \ server to release resources which\n   would otherwise not be available for callout\
    \ transactions with other\n   OPES processors.\n"
- title: 3.8.  Operation in NAT Environments
  contents:
  - "3.8.  Operation in NAT Environments\n   The OPES protocol SHOULD be NAT-friendly,\
    \ i.e., its operation should\n   not be compromised by the presence of one or\
    \ more NAT devices in the\n   path between an OPES processor and a callout server.\n"
- title: 3.9.  Multiple Callout Servers
  contents:
  - "3.9.  Multiple Callout Servers\n   The OPES callout protocol MUST allow an OPES\
    \ processor to\n   simultaneously communicate with more than one callout server.\n\
    \   In larger networks, OPES services are likely to be hosted by\n   different\
    \ callout servers.  Therefore, an OPES processor will likely\n   have to communicate\
    \ with multiple callout servers.  The protocol\n   design MUST enable an OPES\
    \ processor to do so.\n"
- title: 3.10.  Multiple OPES Processors
  contents:
  - "3.10.  Multiple OPES Processors\n   The OPES callout protocol MUST allow a callout\
    \ server to\n   simultaneously communicate with more than one OPES processor.\n\
    \   The protocol design MUST support a scenario in which multiple OPES\n   processors\
    \ use the services of a single callout server.\n"
- title: 3.11.  Support for Different Application Protocols
  contents:
  - "3.11.  Support for Different Application Protocols\n   The OPES callout protocol\
    \ SHOULD be application protocol-agnostic,\n   i.e., it SHOULD not make any assumptions\
    \ about the characteristics of\n   the application-layer protocol used on the\
    \ data path between the data\n   provider and data consumer.  At a minimum, the\
    \ callout protocol MUST\n   be compatible with HTTP [5].\n   The OPES entities\
    \ on the data path may use different application-\n   layer protocols, including,\
    \ but not limited to, HTTP [5] and RTP [8].\n   It would be desirable to be able\
    \ to use the same OPES callout\n   protocol for any such application-layer protocol.\n"
- title: 3.12.  Capability and Parameter Negotiations
  contents:
  - "3.12.  Capability and Parameter Negotiations\n   The OPES callout protocol MUST\
    \ support the negotiation of\n   capabilities and callout connection parameters\
    \ between an OPES\n   processor and a callout server.  This implies that the OPES\
    \ processor\n   and the callout server MUST be able to exchange their capabilities\n\
    \   and preferences.  Then they MUST be able to engage in a deterministic\n  \
    \ negotiation process that terminates either with the two endpoints\n   agreeing\
    \ on the capabilities and parameters to be used for future\n   callout connections/transactions\
    \ or with a determination that their\n   capabilities are incompatible.\n   Capabilities\
    \ and parameters that could be negotiated between an OPES\n   processor and a\
    \ callout server include (but are not limited to):\n   callout protocol version,\
    \ fail-over behavior, heartbeat rate for\n   keep-alive messages, security-related\
    \ parameters, etc.\n   The callout protocol MUST NOT use negotiation to determine\
    \ the\n   transport protocol to be used for callout connections.  The callout\n\
    \   protocol MAY, however, specify that a certain application message\n   protocol\
    \ (e.g., HTTP [5], RTP [8]) requires the use of a certain\n   transport protocol\
    \ (e.g., TCP [6], SCTP [7]).\n   Callout connection parameters may also pertain\
    \ to the characteristics\n   of OPES callout services if, for example, callout\
    \ connections are\n   associated with one or more specific OPES services.  An\
    \ OPES\n   service-specific parameter may, for example, specify which parts of\n\
    \   an application message an OPES service requires for its operation.\n   Callout\
    \ connection parameters MUST be negotiated on a per-callout\n   connection basis\
    \ and before any callout transactions are performed\n   over the corresponding\
    \ callout connection.  Other parameters and\n   capabilities, such as the fail-over\
    \ behavior, MAY be negotiated\n   between the two endpoints independently of callout\
    \ connections.\n   The parties to a callout protocol MAY use callout connections\
    \ to\n   negotiate all or some of their capabilities and parameters.\n   Alternatively,\
    \ a separate control connection MAY be used for this\n   purpose.\n"
- title: 3.13.  Meta Data and Instructions
  contents:
  - "3.13.  Meta Data and Instructions\n   The OPES callout protocol MUST provide\
    \ a mechanism for the endpoints\n   of a particular callout transaction to include\
    \ metadata and\n   instructions for the OPES processor or callout server in callout\n\
    \   requests and responses.\n   Specifically, the callout protocol MUST enable\
    \ an OPES processor to\n   include information about the forwarded application\
    \ message in a\n   callout request, e.g.  in order to specify the type of forwarded\n\
    \   application message or to specify what part(s) of the application\n   message\
    \ are forwarded to the callout server.  Likewise, the callout\n   server MUST\
    \ be able to include information about the returned\n   application message.\n\
    \   The OPES processor MUST further be able to include an ordered list of\n  \
    \ one or more uniquely specified OPES services which are to be\n   performed on\
    \ the forwarded application message in the specified\n   order.  However, as the\
    \ callout protocol MAY also choose to associate\n   callout connections with specific\
    \ OPES services, there may not be a\n   need to identify OPES services on a per-callout\
    \ transaction basis.\n   Additionally, the OPES callout protocol MUST allow the\
    \ callout server\n   to indicate to the OPES processor the cacheability of callout\n\
    \   responses.  This implies that callout responses may have to carry\n   cache-control\
    \ instructions for the OPES processor.\n   The OPES callout protocol MUST further\
    \ enable the OPES processor to\n   indicate to the callout server if it has kept\
    \ a local copy of the\n   forwarded application message (or parts thereof).  This\
    \ information\n   enables the callout server to determine whether the forwarded\n\
    \   application message must be returned to the OPES processor, even if\n   it\
    \ has not been modified by an OPES service.\n   The OPES callout protocol MUST\
    \ also allow OPES processors to comply\n   with the tracing requirements of the\
    \ OPES architecture as laid out in\n   [1] and [3].  This implies that the callout\
    \ protocol MUST enable a\n   callout server to convey to the OPES processor information\
    \ about the\n   OPES service operations performed on the forwarded application\n\
    \   message.\n"
- title: 4.  Performance Requirements
  contents:
  - '4.  Performance Requirements

    '
- title: 4.1.  Protocol Efficiency
  contents:
  - "4.1.  Protocol Efficiency\n   The OPES callout protocol SHOULD have minimal latency.\
    \  For example,\n   the size and complexity of its headers could be minimized.\n\
    \   Because OPES callout transactions add latency to application protocol\n  \
    \ transactions on the data path, callout protocol efficiency is crucial\n   to\
    \ overall performance.\n"
- title: 5.  Security Requirements
  contents:
  - "5.  Security Requirements\n   In the absence of any security mechanisms, sensitive\
    \ information\n   might be communicated between the OPES processor and the callout\n\
    \   server in violation of either endpoint's security and privacy policy,\n  \
    \ through misconfiguration or deliberate insider attack.  By using\n   strong\
    \ authentication, message encryption, and integrity checks, this\n   threat can\
    \ be minimized to a smaller set of insiders and/or operator\n   configuration\
    \ errors.\n   The OPES processor and the callout servers SHOULD have enforceable\n\
    \   policies that limit the parties they communicate with and that\n   determine\
    \ the protections to use based on identities of the endpoints\n   and other data\
    \ (such as enduser policies).  In order to enforce the\n   policies, they MUST\
    \ be able to authenticate the callout protocol\n   endpoints using cryptographic\
    \ methods.\n"
- title: 5.1.  Authentication, Confidentiality, and Integrity
  contents:
  - "5.1.  Authentication, Confidentiality, and Integrity\n   The parties to the callout\
    \ protocol MUST have a sound basis for\n   binding authenticated identities to\
    \ the protocol endpoints, and they\n   MUST verify that these identities are consistent\
    \ with their security\n   policies.\n   The OPES callout protocol MUST provide\
    \ for message authentication,\n   confidentiality, and integrity between the OPES\
    \ processor and the\n   callout server.  It MUST provide mutual authentication.\
    \  For this\n   purpose, the callout protocol SHOULD use existing security\n \
    \  mechanisms.  The callout protocol specification is not required to\n   specify\
    \ the security mechanisms, but it MAY instead refer to a\n   lower-level security\
    \ protocol and discuss how its mechanisms are to\n   be used with the callout\
    \ protocol.\n"
- title: 5.2.  Hop-by-Hop Confidentiality
  contents:
  - "5.2.  Hop-by-Hop Confidentiality\n   If hop-by-hop encryption is a requirement\
    \ for the content path, then\n   this confidentiality MUST be extended to the\
    \ communication between\n   the OPES processor and the callout server.  While\
    \ it is recommended\n   that the communication between the OPES processor and\
    \ callout server\n   always be encrypted, encryption MAY be optional if both the\
    \ OPES\n   processor and the callout server are co-located together in a single\n\
    \   administrative domain with strong confidentiality guarantees.\n   In order\
    \ to minimize data exposure, the callout protocol MUST use a\n   different encryption\
    \ key for each encrypted content stream.\n"
- title: 5.3.  Operation Across Untrusted Domains
  contents:
  - "5.3.  Operation Across Untrusted Domains\n   The OPES callout protocol MUST operate\
    \ securely across untrusted\n   domains between the OPES processor and the callout\
    \ server.\n   If the communication channels between the OPES processor and callout\n\
    \   server cross outside of the organization which is responsible for the\n  \
    \ OPES services,  then endpoint authentication and message protection\n   (confidentiality\
    \ and integrity) MUST be used.\n"
- title: 5.4.  Privacy
  contents:
  - "5.4.  Privacy\n   Any communication carrying information relevant to privacy\
    \ policies\n   MUST protect the data using encryption.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The security requirements for the OPES callout\
    \ protocol are discussed\n   in Section 5.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [1]  Barbir, A., Penno, R., Chen, R., Hofmann,\
    \ M., and H. Orman, \"An\n        Architecture for Open Pluggable Edge Services\
    \ (OPES)\", RFC 3835,\n        August 2004.\n   [2]  Bradner, S., \"Key words\
    \ for use in RFCs to Indicate Requirement\n        Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [3]  Floyd, S. and L. Daigle, \"IAB Architectural and Policy\n\
    \        Considerations for Open Pluggable Edge Services\", RFC 3238,\n      \
    \  January 2002.\n   [4]  Floyd, S. and L. Daigle, \"IAB Architectural and Policy\n\
    \        Considerations for Open Pluggable Edge Services\", RFC 3238,\n      \
    \  January 2002.\n   [5]  Fielding,  R., Gettys, J., Mogul, J., Frystyk, H., Masinter,\
    \ L.,\n        Leach, P., and T. Berners-Lee, \"Hypertext Transfer Protocol --\n\
    \        HTTP/1.1\", RFC 2616, June 1999.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [6]  Postel, J., \"Transmission Control Protocol\"\
    , STD 7, RFC 793,\n        September 1981.\n   [7]  Stewart, R., Xie, Q., Morneault,\
    \ K., Sharp, C., Schwarzbauer,\n        H., Taylor, T., Rytina, I., Kalla, M.,\
    \ Zhang, L., and V. Paxson,\n        \"Stream Control Transmission Protocol\"\
    , RFC 2960, October 2000.\n   [8]  Schulzrinne, H.,  Casner, S., Frederick, R.,\
    \ and V. Jacobson,\n        \"RTP: A Transport Protocol for Real-Time Applications\"\
    , RFC\n        3550, July 2003.\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   Parts of this document are based on previous work by\
    \ Anca Dracinschi\n   Sailer, Volker Hilt, and Rama R. Menon.\n   The authors\
    \ would like to thank the participants of the OPES WG for\n   their comments on\
    \ this document.\n"
- title: 9.  Authors' Addresses
  contents:
  - "9.  Authors' Addresses\n   Andre Beck\n   Lucent Technologies\n   101 Crawfords\
    \ Corner Road\n   Holmdel, NJ  07733\n   US\n   EMail: abeck@bell-labs.com\n \
    \  Markus Hofmann\n   Lucent Technologies\n   Room 4F-513\n   101 Crawfords Corner\
    \ Road\n   Holmdel, NJ  07733\n   US\n   Phone: +1 732 332 5983\n   EMail: hofmann@bell-labs.com\n\
    \   Hilarie Orman\n   Purple Streak Development\n   EMail: ho@alum.mit.edu\n \
    \  URI:   http://www.purplestreak.com\n   Reinaldo Penno\n   Nortel Networks\n\
    \   600 Technology Park Drive\n   Billerica, MA 01821\n   US\n   EMail: rpenno@nortelnetworks.com\n\
    \   Andreas Terzis\n   Computer Science Department\n   Johns Hopkins University\n\
    \   3400 North Charles Street, 224 NEB\n   Baltimore, MD 21218\n   Phone: +1 410\
    \ 516 5847\n   EMail: terzis@cs.jhu.edu\n"
- title: 10.  Full Copyright Statement
  contents:
  - "10.  Full Copyright Statement\n   Copyright (C) The Internet Society (2004).\
    \  This document is subject\n   to the rights, licenses and restrictions contained\
    \ in BCP 78, and\n   except as set forth therein, the authors retain all their\
    \ rights.\n   This document and the information contained herein are provided\
    \ on an\n   \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n\
    \   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
