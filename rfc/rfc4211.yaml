- contents:
  - "               Internet X.509 Public Key Infrastructure\n               Certificate
    Request Message Format (CRMF)\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document describes the Certificate Request Message Format (CRMF)\n
    \  syntax and semantics.  This syntax is used to convey a request for a\n   certificate
    to a Certification Authority (CA), possibly via a\n   Registration Authority (RA),
    for the purposes of X.509 certificate\n   production.  The request will typically
    include a public key and the\n   associated registration information.  This document
    does not define a\n   certificate request protocol.\n"
  title: Abstract
- contents:
  - "Table Of Contents\n   1. Introduction and Terminology ....................................3\n
    \  2. Overview ........................................................3\n      2.1.
    Changes since RFC 2511 .....................................4\n   3. CertReqMessage
    Syntax ...........................................4\n   4. Proof-of-Possession
    (POP) .......................................5\n      4.1. Signature Key POP ..........................................7\n
    \     4.2. Key Encipherment Keys ......................................9\n           4.2.1.
    Private Key Info Content Type ......................11\n           4.2.2. Private
    Key Structures .............................12\n           4.2.3. Challenge-Response
    Guidelines ......................13\n      4.3. Key Agreement Keys ........................................14\n
    \     4.4. Use of Password-Based MAC .................................14\n   5.
    CertRequest syntax .............................................16\n   6. Controls
    Syntax ................................................18\n      6.1. Registration
    Token Control ................................18\n      6.2. Authenticator Control
    .....................................19\n      6.3. Publication Information Control
    ...........................19\n      6.4. Archive Options Control ...................................21\n
    \     6.5. OldCert ID Control ........................................23\n      6.6.
    Protocol Encryption Key Control ...........................23\n   7. RegInfo Controls
    ...............................................23\n      7.1. utf8Pairs .................................................23\n
    \     7.2. certReq ...................................................24\n   8.
    Object Identifiers .............................................24\n   9. Security
    Considerations ........................................25\n   10. References ....................................................26\n
    \     10.1. Normative References .....................................26\n      10.2.
    Informative References ...................................27\n   11. Acknowledgements
    ..............................................28\n   Appendix A.  Use of RegInfo
    for Name-Value Pairs ..................29\n      A.1.  Defined Names ............................................29\n
    \     A.2.  IssuerName, SubjectName, and Validity Value Encoding .....29\n   Appendix
    B.  ASN.1 Structures and OIDs ............................32\n   Appendix C.  Why
    do Proof-of-Possession (POP) .....................38\n"
  title: Table Of Contents
- contents:
  - "1.  Introduction and Terminology\n   This document describes the Certificate
    Request Message Format\n   (CRMF).  A Certificate Request Message object is used
    within a\n   protocol to convey a request for a certificate to a Certification\n
    \  Authority (CA), possibly via a Registration Authority (RA), for the\n   purposes
    of X.509 certificate production.  The request will typically\n   include a public
    key and the associated registration information.\n   The certificate request object
    defined in this document is not a\n   stand-alone protocol.  The information defined
    in this document is\n   designed to be used by an externally defined Certificate
    Request\n   Protocol (CRP).  The referencing protocol is expected to define what\n
    \  algorithms are used, and what registration information and control\n   structures
    are defined.  Many of the requirements in this document\n   refer to the referencing
    Certificate Request Protocol (CRP).\n   Certificate requests may be submitted
    by an RA requesting a\n   certificate on behalf of a Subject, by a CA requesting
    a cross-\n   certificate from another CA, or directly by an End Entity (EE).\n
    \  The key words \"MUST\", \"REQUIRED\", \"SHOULD\", \"RECOMMENDED\", and \"MAY\"\n
    \  in this document (in uppercase, as shown) are to be interpreted as\n   described
    in RFC 2119 [RFC2119].\n"
  title: 1.  Introduction and Terminology
- contents:
  - "2.  Overview\n   Construction of a certification request involves the following
    steps:\n   a)  A CertRequest object is constructed.  This object may include the\n
    \      public key, all or a portion of the Subject name, other requested\n       certificate
    fields, and additional control information related to\n       the registration
    process.  Depending on the CRP, this information\n       can be specified by the
    Subject and potentially modified by an\n       RA, or specified by the RA based
    on knowledge of the Subject or\n       documentation presented by the Subject.\n
    \  b)  If required, a proof-of-possession (of the private key\n       corresponding
    to the public key for which a certificate is being\n       requested) value is
    calculated.\n   c)  Additional registration information can be combined with the\n
    \      proof-of-possession value and the CertRequest structure to form a\n       CertReqMessage.
    \ Additional registration information can be added\n       by both the Subject
    and an RA.\n   d)  The CertReqMessage is securely communicated to a CA.  Specific\n
    \      means of secure transport are to be specified by each CRP that\n       refers
    to this document.\n"
  - contents:
    - "2.1.  Changes since RFC 2511\n   1.  Addition of an introduction section.\n
      \  2.  Addition of the concept of a CRP and language relating to CRPs.\n   3.
      \ In section 6.2, changed regToken to authenticator.\n   4.  Add information
      describing the contents of the EncryptedValue\n       structure.\n   5.  Changed
      name and contents of OID {id-regInfo 1}.\n   6.  Added text detailing what goes
      into the fields of the different\n       structures defined in the document.\n
      \  7.  Replaced Appendix A with a reference to [RFC2875].  The only\n       difference
      is that the old text specified to use subject alt name\n       instead of subject
      name if subject name was empty.  This is not\n       possible for a CA certificate
      issued using PKIX.  It would\n       however be useful to update RFC 2875 to
      have this fallback\n       position.\n   7.  Insert Appendix C describing why
      POP is necessary and what some\n       of the different POP attacks are.\n   8.
      \ pop field in the CertReqMsg structure has been renamed to popo to\n       avoid
      confusion between POP and pop.\n   9.  The use of the EncryptedValue structure
      has been deprecated in\n       favor of the EnvelopedData structure.\n   10.
      \ Add details on how private keys are to be structured when\n       encrypted.\n
      \  11.  Allow for POP on key agreement algorithms other than DH.\n"
    title: 2.1.  Changes since RFC 2511
  title: 2.  Overview
- contents:
  - "3.  CertReqMessage Syntax\n   A certificate request message is composed of the
    certificate request,\n   an optional proof-of-possession field, and an optional
    registration\n   information field.\n   CertReqMessages ::= SEQUENCE SIZE (1..MAX)
    OF CertReqMsg\n   CertReqMsg ::= SEQUENCE {\n      certReq   CertRequest,\n      popo
    \      ProofOfPossession  OPTIONAL,\n      -- content depends upon key type\n
    \     regInfo   SEQUENCE SIZE(1..MAX) of AttributeTypeAndValue OPTIONAL\n   }\n
    \  The fields of CertReqMsg have the following meaning:\n      certReq contains
    the template of the certificate being requested.\n      The template is filled
    in by (or on behalf of) the Subject.  Not\n      all fields within the template
    need to be specified.  Details on\n      this field are found in section 5.\n
    \     popo contains the value used to demonstrate that the entity that\n      will
    be identified as the Subject of the certificate is actually\n      in possession
    of the corresponding private key.  This field varies\n      in structure and content
    based on the public key algorithm and the\n      mode (encryption vs. signature)
    in which the algorithm is used, as\n      specified in the KeyUsage field of the
    certificate to be issued.\n      Details on this field are found in section 4.\n
    \     regInfo field SHOULD contain only supplementary information\n      relating
    to the context of the certificate request, where such\n      information is required
    to fulfill the request.  This information\n      might include subscriber contact
    information, billing information,\n      or other ancillary information useful
    to fulfillment of the\n      request.\n   Information directly related to certificate
    content SHOULD be\n   included in the certReq content.  However, inclusion of
    additional\n   certReq content by RAs can invalidate the popo field (depending
    on\n   the details of the POP method used).  Therefore, data intended for\n   certificate
    content MAY be provided in regInfo.\n   It is the responsibility of a referencing
    CRP to define the details\n   of what can be specified in the regInfo field.  This
    document\n   describes one method of encoding the information found in this field.\n
    \  Details on this encoding are found in Appendix A.\n"
  title: 3.  CertReqMessage Syntax
- contents:
  - "4.  Proof-of-Possession (POP)\n   In order to prevent certain attacks (see Appendix
    C) and to allow a\n   CA/RA to properly check the validity of the binding between
    a subject\n   and a key pair, the PKI management structures specified here make
    it\n   possible for a subject to prove that it has possession of (i.e., is\n   able
    to use) the private key corresponding to the public key for\n   which a certificate
    is requested.  A given CRP is free to choose how\n   to enforce POP (e.g., out-of-band
    procedural means versus the CRMF\n   in-band message) in its certification exchanges.
    \ Within a given CRP,\n   CAs and RAs are free to choose from among the POP methods
    provided\n   (i.e., this is a policy issue local to an RA/CA).  A CRP SHOULD\n
    \  define either which POP methods are required, or specify a mechanism\n   for
    clients to discover the POP methods supported.\n   Any CRP referencing this document
    MUST enforce POP by some means.\n   There are currently many non-PKIX operational
    protocols in use\n   (various electronic mail protocols are one example) that
    do not\n   explicitly check the binding between the end entity and the private\n
    \  key.  Until operational protocols that do verify the binding (for\n   signature,
    encryption, and key agreement key pairs) exist, and are\n   ubiquitous, this binding
    cannot be assumed to have been verified by\n   the CA/RA.  Therefore, one cannot
    truly know if the binding of the\n   public key and the identity in the certificate
    is actually correct.\n   POP is accomplished in different ways depending on the
    type of key\n   for which a certificate is requested.  If a key can be used for\n
    \  multiple purposes (e.g., a signing and decryption RSA key), then any\n   of
    the methods MAY be used.  Protocol designers need to be aware that\n   there can
    be hardware limitations on what POP methods may be usable,\n   e.g., if the private
    key is maintained in a hardware token.\n   This specification allows for cases
    where POP is validated by the CA,\n   the RA, or both.  Some policies require
    the CA to verify POP during\n   certificate issuance, in which case the RA MUST
    forward the end\n   entity's CertRequest and ProofOfPossession fields unaltered
    to the\n   CA.  (In this case, the RA could verify the POP and reject failing\n
    \  certificate requests rather than forwarding them to the CA.)  If the\n   CA
    is not required by policy to verify POP, then the RA SHOULD\n   forward the end
    entity's request and proof, unaltered, to the CA as\n   above.  If this is not
    possible (for example because the RA verifies\n   POP by an out-of-band method),
    then the RA uses the raVerified\n   element to attest to the CA that the required
    proof has been\n   validated.  If the CA/RA uses an out-of-band method to verify
    POP\n   (such as physical delivery of CA/RA-generated private keys), then the\n
    \  ProofOfPossession field is omitted.\n   ProofOfPossession ::= CHOICE {\n       raVerified
    \       [0] NULL,\n       signature         [1] POPOSigningKey,\n       keyEncipherment
    \  [2] POPOPrivKey,\n       keyAgreement      [3] POPOPrivKey }\n   The fields
    of ProofOfPossession have the following meaning:\n      raVerified indicates that
    the RA has performed the POP required on\n      the certificate request.  This
    field is used by an RA when 1) the\n      CA is not required to do its own POP
    verification and 2) the RA\n      needs to change the contents of the certReq
    field.  CRPs MUST\n      provide a method for the RA to sign the ProofOfPossession.
    \ A\n      requestor MUST NOT set this field and an RA/CA MUST NOT accept a\n
    \     ProofOfPossession where the requestor sets this field.\n      signature
    is used for performing POP with signature keys.  The\n      details of this field
    are covered in section 4.1.\n      keyEncipherment is used for performing POP
    with key encipherment\n      encryption based keys (i.e., RSA).  The details of
    this field are\n      covered in section 4.2.\n      keyAgreement is used for
    performing POP with key agreement type\n      encryption keys (i.e., DH).  The
    details of this field are covered\n      in section 4.3.\n"
  - contents:
    - "4.1.  Signature Key POP\n   POP for a signature key is accomplished by performing
      a signature\n   operation on a piece of data containing the identity for which
      the\n   certificate is desired.\n   There are three cases that need to be looked
      at when doing a POP for\n   a signature key:\n   1.  The certificate subject
      has not yet established an authenticated\n       identity with a CA/RA, but
      has a password and identity string\n       from the CA/RA.  In this case, the
      POPOSigningKeyInput structure\n       would be filled out using the publicKeyMAC
      choice for authInfo,\n       and the password and identity would be used to
      compute the\n       publicKeyMAC value.  The public key for the certificate
      being\n       requested would be placed in both the POPOSigningKeyInput and
      the\n       Certificate Template structures.  The signature field is computed\n
      \      over the DER-encoded POPOSigningKeyInput structure.\n   2.  The CA/RA
      has established an authenticated identity for the\n       certificate subject,
      but the requestor is not placing it into the\n       certificate request.  In
      this case, the POPOSigningKeyInput\n       structure would be filled out using
      the sender choice for\n       authInfo.  The public key for the certificate
      being requested\n       would be placed in both the POPOSigningKeyInput and
      the\n       Certificate Template structures.  The signature field is computed\n
      \      over the DER-encoded POPOSigningKeyInput structure.\n   3.  The certificate
      subject places its name in the Certificate\n       Template structure along
      with the public key.  In this case the\n       poposkInput field is omitted
      from the POPOSigningKey structure.\n       The signature field is computed over
      the DER-encoded certificate\n       template structure.\n   POPOSigningKey ::=
      SEQUENCE {\n       poposkInput         [0] POPOSigningKeyInput OPTIONAL,\n       algorithmIdentifier
      \    AlgorithmIdentifier,\n       signature               BIT STRING }\n   The
      fields of POPOSigningKey have the following meaning:\n      poposkInput contains
      the data to be signed, when present.  This\n      field MUST be present when
      the certificate template does not\n      contain both the public key value and
      a subject name value.\n      algorithmIdentifier identifiers the signature algorithm
      and an\n      associated parameters used to produce the POP value.\n      signature
      contains the POP value produce.  If poposkInput is\n      present, the signature
      is computed over the DER-encoded value of\n      poposkInput.  If poposkInput
      is absent, the signature is computed\n      over the DER-encoded value of certReq.\n
      \  POPOSigningKeyInput ::= SEQUENCE {\n       authInfo            CHOICE {\n
      \          sender              [0] GeneralName,\n           -- used only if
      an authenticated identity has been\n           -- established for the sender
      (e.g., a DN from a\n           -- previously-issued and currently-valid certificate)\n
      \          publicKeyMAC        PKMACValue },\n           -- used if no authenticated
      GeneralName currently exists for\n           -- the sender; publicKeyMAC contains
      a password-based MAC\n           -- on the DER-encoded value of publicKey\n
      \      publicKey           SubjectPublicKeyInfo }  -- from CertTemplate\n   The
      fields of POPOSigningKeyInput have the following meaning:\n      sender contains
      an authenticated identity that has been previously\n      established for the
      subject.\n      publicKeyMAC contains a computed value that uses a shared secret\n
      \     between the CA/RA and the certificate requestor.\n      publicKey contains
      a copy of the public key from the certificate\n      template.  This MUST be
      exactly the same value as is contained in\n      the certificate template.\n
      \  PKMACValue ::= SEQUENCE {\n      algId  AlgorithmIdentifier,\n      value
      \ BIT STRING }\n   The fields of PKMACValue have the following meaning:\n      algId
      identifies the algorithm used to compute the MAC value.  All\n      implementations
      MUST support id-PasswordBasedMAC.  The details on\n      this algorithm are
      presented in section 4.4.\n      value contains the computed MAC value.  The
      MAC value is computed\n      over the DER-encoded public key of the certificate
      subject.\n   The CA/RA identifies the shared secret to be used by looking at
      1)\n   the general name field in the certificate request or 2) either the\n
      \  regToken (see section 6.1) or authToken (see section 6.2) controls.\n"
    title: 4.1.  Signature Key POP
  - contents:
    - "4.2.  Key Encipherment Keys\n   POP for key encipherment keys is accomplished
      by one of three\n   different methods.  The private key can be provided to the
      CA/RA, an\n   encrypted challenge from the CA/RA can be decrypted (direct method),\n
      \  or the created certificate can be returned encrypted and used as the\n   challenge
      response (indirect method).\n   POPOPrivKey ::= CHOICE {\n       thisMessage
      \      [0] BIT STRING,   -- deprecated\n       subsequentMessage [1] SubsequentMessage,\n
      \      dhMAC             [2] BIT STRING,   -- deprecated\n       agreeMAC          [3]
      PKMACValue,\n       encryptedKey      [4] EnvelopedData }\n     -- for keyAgreement
      (only), possession is proven in this message\n     -- (which contains a MAC
      (over the DER-encoded value of the\n     -- certReq parameter in CertReqMsg,
      which must include both subject\n     -- and publicKey) based on a key derived
      from the end entity's\n     -- private DH key and the CA's public DH key);\n
      \    -- the dhMAC value MUST be calculated as per the directions given\n     --
      in RFC 2875 for static DH proof-of-possession.\n   SubsequentMessage ::= INTEGER
      {\n       encrCert (0),\n       challengeResp (1) }\n   The fields of POPOPrivKey
      have the following meaning:\n      thisMessage contains the encrypted private
      key for which a\n      certificate is to be issued.  The possession of the private
      key is\n      proved by providing it to the CA/RA.  This field was incorrectly\n
      \     typed when the specification was first written.  The correct way\n      to
      use this field is to create an EncryptedValue structure where\n      the encrypted
      content is the private key, the EncryptedValue\n      structure is then wrapped
      in the BIT STRING type.  This field has\n      been deprecated in favor of encryptedKey.\n
      \     subsequentMessage is used to indicate that the POP will be\n      completed
      by decrypting a message from the CA/RA and returning a\n      response.  The
      type of message to be decrypted is indicated by the\n      value used.\n         encrCert
      indicates that the certificate issued is to be\n         returned in an encrypted
      form.  The requestor is required to\n         decrypt the certificate and prove
      success to the CA/RA.  The\n         details of this are provided by the CRP.\n
      \        challengeResponse indicates that a challenge message is to be\n         sent
      from the CA/RA to the requestor.  The details of the\n         challenge message
      and the response are to be provided by the\n         CRP.\n      dhMAC is used
      for Diffie-Hellman key agreement keys.  It contains\n      a computed MAC that
      is obtained by using the requestor's private\n      key and the CA/RA public
      key.  The use of this field is deprecated\n      in favor of the agreeMAC field.
      \ Details are covered in section\n      4.3.\n      agreeMAC is used for key
      agreement keys.  It contains a computed\n      MAC that is obtained by using
      the requestor's private key and a\n      matching CA/RA public key.  Details
      are covered in section 4.3.\n         macAlg contains the algorithm identifying
      the method used to\n         compute the MAC value.\n         macValue contains
      the computed MAC value.\n      encryptedKey contains the encrypted private key
      matching the\n      public key for which the certificate is to be issued.  It
      also\n      contains an identification value to indicate it was constructed
      by\n      the requestor of the certificate.  The enveloped content type MUST\n
      \     be id-ct-encKeyWithID.\n   It is expected that protocols that incorporate
      this specification\n   will include the confirmation and challenge-response
      messages\n   necessary for a complete protocol.\n"
    - contents:
      - "4.2.1.  Private Key Info Content Type\n   This content type is used for 1)
        proving possession of private keys\n   and 2) escrow of private keys (using
        the archive options control in\n   section 6.4).  This structure is based
        on the private key info\n   structure from [PKCS8] but has one deliberate
        difference.  There is a\n   potential attack on escrow agents if they decrypt
        the private key but\n   don't know to whom the encrypted key is supposed to
        belong.  An\n   attacker could intercept the encrypted private key, build
        a\n   certificate request around it and then ask for a recovery operation\n
        \  on the private key.\n   This content type and its structure are:\n      id-ct-encKeyWithID
        OBJECT IDENTIFIER ::= {id-ct 21}\n      EncKeyWithID ::= SEQUENCE {\n        privateKey
        \          PrivateKeyInfo,\n        identifier CHOICE {\n          string
        \              UTF8String,\n          generalName          GeneralName\n        }
        OPTIONAL\n      }\n      PrivateKeyInfo ::= SEQUENCE {\n         version                   INTEGER,\n
        \        privateKeyAlgorithm       AlgorithmIdentifier,\n         privateKey
        \               OCTET STRING,\n         attributes                [0] IMPLICIT
        Attributes OPTIONAL\n      }\n   Attributes ::= SET OF Attribute\n   The fields
        of EncKeyWithID are defined as:\n      privateKey contains the encoded private
        key.  Definitions for\n      three private key formats are included in this
        document.\n      Specifications for asymmetric algorithms need to include
        both the\n      public and private key definitions for consistency.\n      identifier
        contains a name that the CA/RA can associate with the\n      requestor.  This
        will generally be either the DN of a certificate\n      or a text token passed
        and known to both the requestor and the\n      CA/RA.  This field MUST be
        present if the purpose is to prove\n      possession of the private key.  The
        field SHOULD be present if\n      archiving a key and the archive agent is
        expected to decrypt the\n      key.\n   The fields of PrivatekeyInfo are define
        as:\n      version MUST be the value 0\n      privateKeyAlgorithm contains
        the identifier for the private key\n      object\n      privateKey is an octet
        string whose contents is the private key\n      and whose format is defined
        by the value of privateKeyAlgorithm.\n      attributes is a set of attributes.
        \ They are extended information\n      that is part of the private key information.\n"
      title: 4.2.1.  Private Key Info Content Type
    - contents:
      - "4.2.2.  Private Key Structures\n   We are defining the structures here to
        be used for three algorithms.\n"
      - contents:
        - "4.2.2.1.  D-H Private Keys\n   When creating a PrivateKeyInfo for a D-H
          key, the following rules\n   apply:\n     1. The privateKeyAlgorithm MUST
          be set to id-dh-private-number.\n        The parameter for id-dh-private-number
          is DomainParameters\n        (imported from [PKIXALG]).\n     2. The ASN
          structure for privateKey MUST be\n        DH-PrivateKey ::= INTEGER\n     3.
          The attributes field MUST be omitted.\n"
        title: 4.2.2.1.  D-H Private Keys
      - contents:
        - "4.2.2.2.  DSA Private Keys\n   When creating a PrivateKeyInfo for a DSA
          key, the following rules\n   apply:\n     1. The privateKeyAlgorithm MUST
          be set to id-dsa.  The parameters\n        for id-dsa is Dss-Parms (imported
          from [PKIXALG]).\n     2. The ASN structure for privateKey MUST be\n        DSA-PrivateKey
          ::= INTEGER\n     3. The attributes field MUST be omitted.\n"
        title: 4.2.2.2.  DSA Private Keys
      - contents:
        - "4.2.2.3.  RSA Private Keys\n   When creating a PrivateKeyInfo for an RSA
          key, the following rules\n   apply:\n     1. The privateKeyAlgorithm MUST
          be set to rsaEncryption.\n     2. The ASN structure for privateKey MUST
          be RSAPrivateKey (defined\n        in [PKCS1])\n     3. The attributes field
          MUST be omitted.\n"
        title: 4.2.2.3.  RSA Private Keys
      title: 4.2.2.  Private Key Structures
    - contents:
      - "4.2.3.  Challenge-Response Guidelines\n   The following provides guidelines
        to enrollment protocol authors\n   about how an indirect proof-of-possession
        is expected to work and\n   about some of the areas where one needs to be
        careful in crafting the\n   messages to implement this POP method.\n   1.
        \ The original enrollment request includes a proof of identity of\n       some
        type and the public portion of the encryption key.  Note\n       that the
        proof of identity needs to cover the public portion of\n       the encryption
        key to prevent substitution attacks (where the\n       attacker changes your
        public key for his public key).\n   2.  The response message from the server
        includes an encrypted data\n       value of some type.  That value needs to
        be authenticated in some\n       fashion as having come from the server.  The
        specification needs\n       to include the specifics of how this value is
        returned for the\n       different key types.  For RSA keys, the value can
        be specified as\n       being directly encrypted by the RSA public key; this
        will not\n       work for a D-H key where you need to specify an indirect\n
        \      mechanism to encrypt the value.\n   3.  The second request message
        includes a hash of the decrypted\n       value.  This message MUST NOT be
        just the hash of the encrypted\n       value, as one should never \"sign\"
        a completely random value.  It\n       is desirable to include information
        such as the identity string\n       in the hashing process so that this can
        be made explicitly.  This\n       returned value MUST be included in a second
        proof of identity.\n   It is strongly suggested that transaction identifiers
        and nonce\n   values be required when performing indirect POP, as this allows
        for\n   1) tying the different messages in the process together and 2)\n   letting
        each entity inject some amount of random data into the\n   process of doing
        identity proofs.\n"
      title: 4.2.3.  Challenge-Response Guidelines
    title: 4.2.  Key Encipherment Keys
  - contents:
    - "4.3.  Key Agreement Keys\n   POP for key agreement keys is accomplished by
      one of four different\n   methods.  The first three are identical to those presented
      above for\n   key encryption keys.  The fourth method takes advantage of the
      fact\n   that a shared secret is produced and that the value can be used to\n
      \  MAC information.\n   When the direct or indirect encryption methods presented
      above are\n   used, the CA/RA will need to create an ephemeral key for those
      cases\n   where the encryption algorithm parameters do not match between the\n
      \  CA/RA and the requestor.\n   The end entity may also MAC the certificate
      request (using a shared\n   secret key derived from computation) as a fourth
      alternative for\n   demonstrating POP.  This option may be used only if the
      CA/RA already\n   has a certificate that is known to the end entity and if the
      Subject\n   is able to use the CA/RA's parameters.\n   For the DH key agreement
      algorithm, all implementations MUST support\n   the static DH Proof-of-Possession.
      \ Details on this algorithm can be\n   found in section 3 of [RFC2875].  NOTE:
      If either the subject or\n   issuer name in the CA certificate is empty, then
      the alternative name\n   should be used in its place.\n"
    title: 4.3.  Key Agreement Keys
  - contents:
    - "4.4.  Use of Password-Based MAC\n   This MAC algorithm was designed to take
      a shared secret (a password)\n   and use it to compute a check value over a
      piece of information.  The\n   assumption is that, without the password, the
      correct check value\n   cannot be computed.  The algorithm computes the one-way
      function\n   multiple times in order to slow down any dictionary attacks against\n
      \  the password value.\n   The algorithm identifier and parameter structure
      used for Password-\n   Based MAC is:\n      id-PasswordBasedMAC OBJECT IDENTIFIER
      ::=\n                                         { 1 2 840 113533 7 66 13}\n      PBMParameter
      ::= SEQUENCE {\n         salt                OCTET STRING,\n         owf                 AlgorithmIdentifier,\n
      \        iterationCount      INTEGER,\n         mac                 AlgorithmIdentifier\n
      \        )\n   The fields of PEMParameter have the following meaning:\n      salt
      contains a randomly generated value used in computing the key\n      of the
      MAC process.  The salt SHOULD be at least 8 octets (64\n      bits) long.\n
      \     owf identifies the algorithm and associated parameters used to\n      compute
      the key used in the MAC process.  All implementations MUST\n      support SHA-1.\n
      \     iterationCount identifies the number of times the hash is applied\n      during
      the key computation process.  The iterationCount MUST be a\n      minimum of
      100.  Many people suggest using values as high as 1000\n      iterations as
      the minimum value.  The trade off here is between\n      protection of the password
      from attacks and the time spent by the\n      server processing all of the different
      iterations in deriving\n      passwords.  Hashing is generally considered a
      cheap operation but\n      this may not be true with all hash functions in the
      future.\n      mac identifies the algorithm and associated parameters of the
      MAC\n      function to be used.  All implementations MUST support HMAC-SHA1\n
      \     [HMAC].  All implementations SHOULD support DES-MAC and Triple-\n      DES-MAC
      [PKCS11].\n   The following is pseudo-code for the algorithm:\n   Inputs:\n
      \         pw   - an octet string containing the user's password\n          data
      - an octet string containing the value to be MAC-ed\n          Iter - iteration
      count\n   Output:\n          MAC  - an octet string containing the resultant
      MAC value\n   1.  Generate a random salt value S\n   2.  Append the salt to
      the pw.  K = pw || salt.\n   3.  Hash the value of K.  K = HASH(K)\n   4.  If
      Iter is greater than zero.  Iter = Iter - 1.  Goto step 3.\n   5.  Compute an
      HMAC as documented in [HMAC].\n       MAC = HASH( K XOR opad, HASH( K XOR ipad,
      data) )\n       Where opad and ipad are defined in [HMAC].\n"
    title: 4.4.  Use of Password-Based MAC
  title: 4.  Proof-of-Possession (POP)
- contents:
  - "5.  CertRequest syntax\n   The CertRequest syntax consists of a request identifier,
    a template\n   of certificate content, and an optional sequence of control\n   information.\n
    \  CertRequest ::= SEQUENCE {\n      certReqId     INTEGER,        -- ID for matching
    request and reply\n      certTemplate  CertTemplate, --Selected fields of cert
    to be issued\n      controls      Controls OPTIONAL } -- Attributes affecting
    issuance\n   CertTemplate ::= SEQUENCE {\n      version      [0] Version               OPTIONAL,\n
    \     serialNumber [1] INTEGER               OPTIONAL,\n      signingAlg   [2]
    AlgorithmIdentifier   OPTIONAL,\n      issuer       [3] Name                  OPTIONAL,\n
    \     validity     [4] OptionalValidity      OPTIONAL,\n      subject      [5]
    Name                  OPTIONAL,\n      publicKey    [6] SubjectPublicKeyInfo  OPTIONAL,\n
    \     issuerUID    [7] UniqueIdentifier      OPTIONAL,\n      subjectUID   [8]
    UniqueIdentifier      OPTIONAL,\n      extensions   [9] Extensions            OPTIONAL
    }\n   OptionalValidity ::= SEQUENCE {\n      notBefore  [0] Time OPTIONAL,\n      notAfter
    \  [1] Time OPTIONAL } --at least one must be present\n   Time ::= CHOICE {\n
    \     utcTime        UTCTime,\n      generalTime    GeneralizedTime }\n   The
    fields of CertRequest have the following meaning:\n      certReqId contains an
    integer value that is used by the\n      certificate requestor to associate a
    specific certificate request\n      with a certificate response.\n      certTemplate
    contains a template of an X.509 certificate.  The\n      requestor fills in those
    fields for which specific values are\n      desired.  Details on the fields are
    given below.\n      controls contains attributes that are not part of the certificate,\n
    \     but control the context in which the certificate is to be issued.\n      Details
    on the controls defined in this document can be found in\n      section 6.  Other
    documents may define other controls.  CRPs are\n      responsible for specifying
    which controls are required.\n   The fields of CertTemplate have the following
    meaning:\n      version MUST be 2 if supplied.  It SHOULD be omitted.\n      serialNumber
    MUST be omitted.  This field is assigned by the CA\n      during certificate creation.\n
    \     signingAlg MUST be omitted.  This field is assigned by the CA\n      during
    certificate creation.\n      issuer is normally omitted.  It would be filled in
    with the CA\n      that the requestor desires to issue the certificate in situations\n
    \     where an RA is servicing more than one CA.\n      validity is normally omitted.
    \ It can be used to request that\n      certificates either start at some point
    in the future or expire at\n      some specific time.  A case where this field
    would commonly be\n      used is when a cross certificate is issued for a CA.
    \ In this case\n      the validity of an existing certificate would be placed
    in this\n      field so that the new certificate would have the same validity\n
    \     period as the existing certificate.  If validity is not omitted,\n      then
    at least one of the sub-fields MUST be specified.  The sub-\n      fields are
    as follows:\n         notBefore contains the requested start time of the certificate.\n
    \        The time follows the same rules as the notBefore time in\n         [PROFILE].\n
    \        notAfter contains the requested expiration time of the\n         certificate.
    \ The time follows the same rules as the notAfter\n         time in [PROFILE].\n
    \     subject is filled in with the suggested name for the requestor.\n      This
    would normally be filled in by a name that has been\n      previously issued to
    the requestor by the CA.\n      publicKey contains the public key for which the
    certificate is\n      being created.  This field MUST be filled in if the requestor\n
    \     generates its own key.  The field is omitted if the key is\n      generated
    by the RA/CA.\n      issuerUID MUST be omitted.  This field has been deprecated
    in\n      [PROFILE].\n      subjectUID MUST be omitted.  This field has been deprecated
    in\n      [PROFILE].\n      extensions contains extensions that the requestor
    wants to have\n      placed in the certificate.  These extensions would generally
    deal\n      with things such as setting the key usage to keyEncipherment.\n   With
    the exception of the publicKey field, the CA/RA is permitted to\n   alter any
    requested field.  The returned certificate needs to be\n   checked by the requestor
    to see if the fields have been set in an\n   acceptable manner.  CA/RA SHOULD
    use the template fields if possible.\n   There are cases where all fields of the
    template can be omitted.  If\n   the key generation is being done at the CA/RA
    and the identity proof\n   is placed in a different location (such as the id-regCtrl-regToken\n
    \  below), then there are no fields that need to be specified by the\n   certificate
    requestor.\n"
  title: 5.  CertRequest syntax
- contents:
  - "6.  Controls Syntax\n   The generator of a CertRequest may include one or more
    control values\n   pertaining to the processing of the request.\n   Controls  ::=
    SEQUENCE SIZE(1..MAX) OF AttributeTypeAndValue\n   The following controls are
    defined by this document:  regToken\n   (section 6.1); authenticator (section
    6.2); pkiPublicationInfo\n   (section 6.3); pkiArchiveOptions (section 6.4); oldCertID
    (section\n   6.5); protocolEncrKey (section 6.6).  Each CRP MUST define the set
    of\n   controls supported by that protocol.  Additional controls may be\n   defined
    by additional RFCs or by the CRP protocol itself.\n"
  - contents:
    - "6.1.  Registration Token Control\n   A regToken control contains one-time information
      (either based on a\n   secret value or other shared information) intended to
      be used by the\n   CA to verify the identity of the subject prior to issuing
      a\n   certificate.  Upon receipt of a certification request containing a\n   value
      for regToken, the receiving CA verifies the information in\n   order to confirm
      the identity claimed in the certification request.\n   The value for regToken
      may be generated by the CA and provided out of\n   band to the subscriber, or
      may otherwise be available to both the CA\n   and the subscriber.  The security
      of any out-of-band exchange should\n   be commensurate with the risk that the
      CA will tolerate with regard\n   to accepting an intercepted value from someone
      other than the\n   intended subscriber.  The regToken value is not encrypted
      on return,\n   if the data is considered to be sensitive, it needs to be shrouded
      by\n   the requestor.\n   The regToken control is used only for initialization
      of an end entity\n   into the PKI, whereas the authenticator control (see section
      7.2) can\n   be used for the initial as well as subsequent certification requests.\n
      \  In some instances of use the value for regToken could be a text\n   string
      or a numeric quantity such as a random number.  In the latter\n   case, the
      value is encoded as a text string representation of the\n   binary quantity.
      \ The encoding of regToken SHALL be UTF8String.\n   id-regCtrl-regToken            OBJECT
      IDENTIFIER ::= { id-regCtrl 1 }\n   Without prior agreement between the subscriber
      and CA agents, this\n   value would be a textual shared secret of some type.
      \ If a computed\n   value based on that shared secret is to be used instead,
      it is\n   suggested that the CRP define a new registration control for that\n
      \  specific computation.\n"
    title: 6.1.  Registration Token Control
  - contents:
    - "6.2.  Authenticator Control\n   An authenticator control contains information
      used on an ongoing\n   basis to establish a non-cryptographic check of identity
      in\n   communication with the CA.  Examples include:  mother's maiden name,\n
      \  last four digits of social security number, or other knowledge-based\n   information
      shared with the subscriber's CA; a hash of such\n   information; or other information
      produced for this purpose.  The\n   value for an authenticator control may be
      generated by the subscriber\n   or by the CA.\n   In some instances of use,
      the value for authenticator could be a text\n   string or a numeric quantity
      such as a random number.  The value in\n   the latter case is encoded as a text
      string representation of the\n   binary quantity.  The encoding of authenticator
      SHALL be UTF8String.\n   id-regCtrl-authenticator       OBJECT IDENTIFIER ::=
      { id-regCtrl 2 }\n   When deciding whether to use an authenticator or a regToken,
      use the\n   following guidelines.  If the value is a one-time usage value, then\n
      \  regToken would be used.  If the value has a long-term usage, then the\n   authenticator
      control would be used.\n"
    title: 6.2.  Authenticator Control
  - contents:
    - "6.3.  Publication Information Control\n   The pkiPublicationInfo control enables
      subscribers to influence the\n   CA/RA's publication of the certificate.  This
      control is considered\n   advisory and can be ignored by CAs/RAs.  It is defined
      by the\n   following OID and syntax:\n   id-regCtrl-pkiPublicationInfo  OBJECT
      IDENTIFIER ::= { id-regCtrl 3 }\n   PKIPublicationInfo ::= SEQUENCE {\n        action
      \    INTEGER {\n                     dontPublish (0),\n                     pleasePublish
      (1) },\n        pubInfos  SEQUENCE SIZE (1..MAX) OF SinglePubInfo OPTIONAL }\n
      \  SinglePubInfo ::= SEQUENCE {\n         pubMethod    INTEGER {\n             dontCare
      \   (0),\n             x500        (1),\n             web         (2),\n             ldap
      \       (3) },\n         pubLocation  GeneralName OPTIONAL }\n   The fields
      of PKIPublicationInfo have the following meaning:\n      action indicates whether
      or not the requestor wishes the CA/RA to\n      publish the certificate.  The
      values and their means are:\n         dontPublish indicates that the requester
      wishes the CA/RA not\n         to publish the certificate (this may indicate
      that the\n         requester intends to publish the certificate him/herself).
      \ If\n         dontPublish is used, the pubInfos field MUST be omitted.\n         pleasePublish
      indicates that the requestor wishes the CA/RA to\n         publish the certificate.\n
      \     pubInfos holds the locations where the requestor desires the CA/RA\n      to
      publish the certificate.  This field is omitted if the\n      dontPublish choice
      is selected.  If the requestor wants to specify\n      some locations for the
      certificate to be published, and to allow\n      the CA/RA to publish in other
      locations, it would specify multiple\n      values of the SinglePubInfo structure,
      one of which would be\n      dontCare.\n   The fields of SinglePubInfo have
      the following meaning:\n      pubMethod indicates the address type for the location
      at which the\n      requestor desires the certificate to be placed by the CA/RA.\n
      \        dontCare indicates that the CA/RA can publish the certificate\n         in
      whatever locations it chooses.  If dontCare is used, the\n         pubInfos
      field MUST be omitted.\n         x500 indicates that the requestor wishes for
      the CA/RA to\n         publish the certificate in a specific location.  The
      location\n         is indicated in the x500 field of pubLocation.\n         ldap
      indicates that the requestor wishes for the CA/RA to\n         publish the certificate
      in a specific location.  The location\n         is indicated in the ldap field
      of pubLocation.\n         web indicates that the requestor wishes for the CA/RA
      to\n         publish the certificate in a specific location.  The location\n
      \        is indicated in the http field of pubLocation.\n      pubLocation contains
      the address at which the certificate is to be\n      placed.  The choice in
      the general name field is dictated by the\n      pubMethod selection in this
      structure.\n   Publication locations can be supplied in any order.  All locations\n
      \  are to be processed by the CA for purposes of publication.\n"
    title: 6.3.  Publication Information Control
  - contents:
    - "6.4.  Archive Options Control\n   The pkiArchiveOptions control enables subscribers
      to supply\n   information needed to establish an archive of the private key\n
      \  corresponding to the public key of the certification request.  It is\n   defined
      by the following OID and syntax:\n   id-regCtrl-pkiArchiveOptions   OBJECT IDENTIFIER
      ::= { id-regCtrl 4 }\n   PKIArchiveOptions ::= CHOICE {\n      encryptedPrivKey
      \    [0] EncryptedKey,\n      -- the actual value of the private key\n      keyGenParameters
      \    [1] KeyGenParameters,\n      -- parameters which allow the private key
      to be re-generated\n      archiveRemGenPrivKey [2] BOOLEAN }\n      -- set to
      TRUE if sender wishes receiver to archive the private\n      -- key of a key
      pair that the receiver generates in response to\n      -- this request; set
      to FALSE if no archival is desired.\n   EncryptedKey ::= CHOICE {\n      encryptedValue
      \       EncryptedValue, -- deprecated\n      envelopedData     [0] EnvelopedData
      }\n      -- The encrypted private key MUST be placed in the envelopedData\n
      \     -- encryptedContentInfo encryptedContent OCTET STRING.\n   EncryptedValue
      ::= SEQUENCE {\n      intendedAlg   [0] AlgorithmIdentifier  OPTIONAL,\n      --
      the intended algorithm for which the value will be used\n      symmAlg       [1]
      AlgorithmIdentifier  OPTIONAL,\n      -- the symmetric algorithm used to encrypt
      the value\n      encSymmKey    [2] BIT STRING           OPTIONAL,\n      --
      the (encrypted) symmetric key used to encrypt the value\n      keyAlg        [3]
      AlgorithmIdentifier  OPTIONAL,\n      -- algorithm used to encrypt the symmetric
      key\n      valueHint     [4] OCTET STRING         OPTIONAL,\n      -- a brief
      description or identifier of the encValue content\n      -- (may be meaningful
      only to the sending entity, and used only\n      -- if EncryptedValue might
      be re-examined by the sending entity\n      -- in the future)\n      encValue
      \      BIT STRING }\n   -- The use of the EncryptedValue field has been deprecated
      in favor\n   -- of the EnvelopedData structure.\n   --\n   -- When EncryptedValue
      is used to carry a private key (as opposed to\n   -- a certificate), implementations
      MUST support the encValue field\n   -- containing an encrypted PrivateKeyInfo
      as defined in [PKCS11],\n   -- section 12.11.  If encValue contains some other
      format/encoding\n   -- for the private key, the first octet of valueHint MAY
      be used\n   -- to indicate the format/encoding (but note that the possible values\n
      \  -- of this octet are not specified at this time).  In all cases, the\n   --
      intendedAlg field MUST be used to indicate at least the OID of\n   -- the intended
      algorithm of the private key, unless this information\n   -- is known a priori
      to both sender and receiver by some other means.\n   KeyGenParameters ::= OCTET
      STRING\n   The fields of PKIArchiveOptions have the following meaning:\n      encryptedPrivKey
      contains an encrypted version of the private key.\n      keyGenParameters contains
      the information needed by the requestor\n      to regenerate the private key.
      \ As an example, for many RSA\n      implementations one could send the first
      random number(s) tested\n      for primality.  The structure to go here is not
      defined by this\n      document.  CRPs that define content for this structure
      MUST define\n      not only the content that is to go here, but also how that
      data is\n      shrouded from unauthorized access.\n      archiveRemGenPrivKey
      indicates that the requestor desires that the\n      key generated by the CA/RA
      on the requestor's behalf be archived.\n   The fields of EncryptedKey have the
      following meaning:\n      encryptedValue is longer used.  This field has been
      deprecated\n      along with the EncryptedValue structure.\n      envelopedData
      contains the encrypted value of the private key.\n      CPRs that use this structure
      MUST define the entity or entities\n      for whom the data is to be encrypted
      (the EE, escrow agents, CAs)\n      and how that key or set of keys is to be
      determined.  Details on\n      constructing an EnvelopedData structure are found
      in [CMS].  The\n      encrypted content MUST be an id-ct-encKeyWithID.  The
      identifier\n      can be omitted unless this structure is also being used to
      do\n      proof-of-possession.\n"
    title: 6.4.  Archive Options Control
  - contents:
    - "6.5.  OldCert ID Control\n   If present, the OldCertID control specifies the
      certificate to be\n   updated by the current certification request.  The OID
      and syntax is:\n   id-regCtrl-oldCertID           OBJECT IDENTIFIER ::= { id-regCtrl
      5 }\n   CertId ::= SEQUENCE {\n         issuer           GeneralName,\n         serialNumber
      \    INTEGER\n     }\n"
    title: 6.5.  OldCert ID Control
  - contents:
    - "6.6.  Protocol Encryption Key Control\n   If present, the protocolEncrKey control
      specifies a key that the CA\n   is to use in encrypting a response to CertReqMessages.
      \ The OID for\n   this control is id-regCtrl-protocolEncrKey.  The parameter
      structure\n   for this field is SubjectPublicKeyInfo.  (This structure is defined\n
      \  in [PROFILE].)\n   id-regCtrl-protocolEncrKey     OBJECT IDENTIFIER ::= {
      id-regCtrl 6 }\n   This control is used when a CA has information to send to
      the\n   subscriber that needs to be encrypted.  Such information includes a\n
      \  private key generated by the CA for use by the subscriber.\n"
    title: 6.6.  Protocol Encryption Key Control
  title: 6.  Controls Syntax
- contents:
  - "7.  RegInfo Controls\n   This section documents the controls that are to be placed
    in the\n   regInfo field of the CertReqMsg structure.\n"
  - contents:
    - "7.1.  utf8Pairs\n   This control is used to convey text-based information from
      the\n   Subject to an RA to a CA issuing a certificate.  The OID for this\n
      \  structure is id-regInfo-utf8Paris and has a type of UTF8String.\n      id-regInfo-utf8Pairs
      \   OBJECT IDENTIFIER ::= { id-regInfo 1 }\n   The name is terminated by the
      question mark character ('?').  The\n   value is terminated by the percent character
      '%'.  Name value pairs\n   can be repeated.  Thus the syntax is:\n      Name?Value%[Name?Value%]*\n
      \  The %xx mechanism of [RFC1738] is used to encode '?' (%3f) and '%'\n   (%25)
      if they are not being used for their reserved purpose.  Names\n   MUST NOT start
      with a numeric character.\n   This control can appear multiple times in the
      regInfo structure.\n   Resolution of conflicts of information is a matter of
      local policy on\n   the RA/CA.\n   Appendix A contains a set of common names
      and data formats\n   corresponding to fields that commonly appear in certificates
      and\n   directories.\n"
    title: 7.1.  utf8Pairs
  - contents:
    - "7.2.  certReq\n   This control is designed to deal with the problem where an
      RA needs\n   to modify the certificate template proposed by a Subject, but the\n
      \  Subject used the certificate template as part of its POP calculation.\n   In
      this case, the RA can place a new certificate template in the\n   regInfo sequence.\n
      \  This control has the OID id-regInfo-certReq and the structure\n   CertRequest.
      \ There can only be one instance of this attribute in the\n   regInfo sequence.
      \ If this control exists in the regInfo structure,\n   then the certificate
      template in the request is ignored.  The RA MUST\n   copy all data from the
      core template to this attribute.\n      id-regInfo-certReq       OBJECT IDENTIFIER
      ::= { id-regInfo 2 }\n"
    title: 7.2.  certReq
  title: 7.  RegInfo Controls
- contents:
  - "8.  Object Identifiers\n   The OID id-pkix has the value\n   id-pkix  OBJECT
    IDENTIFIER  ::= { iso(1) identified-organization(3)\n   dod(6) internet(1) security(5)
    mechanisms(5) pkix(7) }\n   -- arc for Internet X.509 PKI protocols and their
    components\n   id-pkip  OBJECT IDENTIFIER :: { id-pkix pkip(5) }\n   -- arc for
    Registration Controls in CRMF\n   id-regCtrl  OBJECT IDENTIFIER ::= { id-pkip
    regCtrl(1) }\n   -- arc for Registration Info in CRMF\n   id-regInfo       OBJECT
    IDENTIFIER ::= { id-pkip id-regInfo(2) }\n"
  title: 8.  Object Identifiers
- contents:
  - "9.  Security Considerations\n   Enrollment protocols, by their very nature, involve
    large amounts of\n   private information.  This can include private keys, identity\n
    \  numbers, credit card numbers, and the like.  The security of any CRP\n   is
    based on the security mechanisms of the protocol and/or process\n   used to communicate
    between CAs, RAs and EEs.  All protocols must\n   provide for masking, either
    via encryption or off-line processing, of\n   all subscriber-sensitive information.\n
    \  Many enrollment protocols provide for the initial establishment of\n   identity
    between the CA/RA and the EE by the use of a token.\n   Generally this token is
    delivered using an out-of-band delivery\n   method (such as the governmental mail
    system).  The security of any\n   out-of-band exchange needs to be commensurate
    with the risk that the\n   CA/RA will tolerate with regard to interception of
    the token by a\n   third party.\n   Implementation must implement Proof-of-Possession
    (POP) values during\n   certificate enrollment processes.  A good POP algorithm
    needs to\n   provide proof of two things: 1) that the key is tied to a specific\n
    \  user and 2) that the user has use of the key in question.  Failure to\n   implement
    POP allows people to create certificates where the public\n   key and the name
    values do not correctly bind.  This allows for\n   impersonation on signature
    keys and interception of encrypted\n   messages.\n   Implementations must use
    high entropy random number generators in\n   producing private keys.  Implementations
    must randomly generate\n   content-encryption keys, message-authentication keys,
    initialization\n   vectors (IVs), salt, and padding.  The use of inadequate pseudo-\n
    \  random number generators (PRNGs) to generate cryptographic keys can\n   result
    in little or no security.  An attacker may find it much easier\n   to reproduce
    the PRNG environment that produced the keys, searching\n   the resulting small
    set of possibilities, rather than brute force\n   searching the whole key space.
    \ The generation of quality random\n   numbers is difficult.  RFC 4086 [RANDOM]
    offers important guidance in\n   this area and Appendix 3 of FIPS Pub 186 [DSS]
    provides one quality\n   PRNG technique.\n   Implementations must protect private
    keys.  The compromise of a\n   signer's private key permits third parties to masquerade
    as the\n   signer.  The compromise of a decryption private key allows for\n   interception
    of messages by a third party.\n   One feature of the certificate message request
    syntax is for the key\n   generation to be performed remotely from the creation
    of the\n   certificate request.  This feature should never be used for\n   generation
    of signing keys.  If signing keys are generated for the\n   user, then an element
    of repudiation comes into play.  The user can\n   claim that an item was signed
    by the entity that generated the key as\n   well as any entity that might have
    seen the key value during transfer\n   from the generator the to EE.  Care must
    be taken to protect\n   encryption keys by the remote key generator to protect
    against\n   interception of the keys by a third party.  This means that the\n
    \  encryption algorithms used need to be secure, and a content\n   encryption
    key or a key encryption key must be used to mask the\n   private key during transport
    back to the user.  CRP protocols must\n   never assume that a signature key generated
    by the user can be used\n   to decrypt the package in which an encryption private
    key is\n   transported.\n   This document describes a method by which key escrow
    may be done.\n   There are several issues that need to be taken into account when\n
    \  doing key escrow.  First, the client must be able to correctly\n   identify
    the entity to which a key is to be escrowed or the CRP must\n   provide a method
    by which the client can discover this information.\n   A CRP cannot assume that
    the key escrow agent and the CA are the same\n   entity and thus have the same
    names.  Second, the algorithms used to\n   mask the private key or other key generation
    information during\n   transport to the escrow agent need to be commensurate with
    the value\n   of the data being protected by the key.  Third, the escrow agent\n
    \  needs to provide sufficient safeguards that an escrowed key is\n   returned
    only to entities that should be able to obtain the private\n   key.  Generally,
    this should be restricted to the entity that\n   escrowed the data.  Fourth, the
    escrow data base needs to be stored\n   in a secure manner.  One common method
    for doing this is to re-\n   encrypt the data to keys that only the escrow agent
    has access to.\n   In this case, one may need to escrow the escrow agent key as
    well.\n   Access to either the escrow agent or the archived key would amount to\n
    \  access to all private keys that have been escrowed with that agent.\n"
  title: 9.  Security Considerations
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [PKCS1]   Jonsson, J. and B. Kaliski, \"Public-Key
      Cryptography\n             Standards (PKCS) #1: RSA Cryptography Specifications\n
      \            Version 2.1\", RFC 3447, February 2003.\n   [HMAC]    Krawczyk,
      H., Bellare, M., and R. Canetti, \"HMAC:\n             Keyed-Hashing for Message
      Authentication\", RFC 2104,\n             February 1997.\n   [PKCS11]  RSA Laboratories,
      The Public-Key Cryptography Standards -\n             \"PKCS #11 v2.11:  Cryptographic
      Token Interface Standard\",\n             RSA Security Inc., June 2001.\n   [RFC2119]
      Bradner, S., \"Key words for use in RFCs to Indicate\n             Requirement
      Levels\", BCP 14, RFC 2119, March 1997.\n   [PROFILE] Housley, R., Polk, W.,
      Ford, W., and D. Solo, \"Internet\n             X.509 Public Key Infrastructure
      Certificate and Certificate\n             Revocation List (CRL) Profile\", RFC
      3280, April 2002.\n   [PKIXALG] Bassham, L., Polk, W., and R. Housley, \"Algorithms
      and\n             Identifiers for the Internet X.509 Public Key\n             Infrastructure
      Certificate and Certificate Revocation List\n             (CRL) Profile\", RFC
      3279, April 2002.\n   [CMS]     Housley, R., \"Cryptographic Message Syntax
      (CMS)\", RFC\n             3852, July 2004.\n   [RFC2875] Prafullchandra, H.
      and J. Schaad, \"Diffie-Hellman\n             Proof-of-Possession Algorithms\",
      RFC 2875, July 2000.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [DSS]     National Institute of Standards
      and Technology, FIPS Pub\n             186: Digital Signature Standard, May
      1994.\n   [PKCS8]   RSA Laboratories, \"PKCS #8: Private-Key Information Syntax\n
      \            Standard\", PKCS #8 v1.2, November 1993.\n   [RANDOM]  Eastlake,
      D., 3rd, Schiller, J., and S. Crocker,\n             \"Randomness Requirements
      for Security\", BCP 106, RFC 4086,\n             June 2005.\n   [RFC2202] Cheng,
      P. and R. Glenn, \"Test Cases for HMAC-MD5 and\n             HMAC-SHA-1\", RFC
      2202, September 1997.\n   [RFC1738] Berners-Lee, T., Masinter, L., and M. McCahill,
      \"Uniform\n             Resource Locators (URL)\", RFC 1738, December 1994.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "11.  Acknowledgements\n   The working group would like to thank Michael Myers,
    Carlisle Adams,\n   Dave Solo, and David Kemp, who authored the original version
    of this\n   document.\n   The working group also gratefully acknowledges the contributions
    of\n   Barbara Fox, Warwick Ford, Russ Housley, and John Pawling, whose\n   review
    and comments significantly clarified and improved the utility\n   of this specification.
    \ The members of the ca-talk mailing list also\n   provided significant input
    with respect to interoperability testing.\n   The text of Appendix C (Why do POP)
    was taken from an e-mail message\n   by Al Arsenault and was originally part of
    the PKIX Roadmap document.\n"
  title: 11.  Acknowledgements
- contents:
  - "Appendix A.  Use of RegInfo for Name-Value Pairs\n   The \"value\" field of the
    id-regInfo-utf8Pairs string (with \"tag\"\n   field equal to 12 and appropriate
    \"length\" field) will contain a\n   series of UTF-8 name/value pairs.\n   This
    Appendix lists some common examples of such pairs for the\n   purpose of promoting
    interoperability among independent\n   implementations of this specification.
    \ It is recognized that this\n   list is not exhaustive and will grow with time
    and implementation\n   experience.\n"
  - contents:
    - "A.1.  Defined Names\n   The following table defines a recommended set of named
      elements.  The\n   value in the column \"Name Value\" is the exact text string
      that will\n   appear in the regInfo.\n      Name Value\n      ----------\n      version
      \           -- version of this variation of regInfo use\n      corp_company
      \      -- company affiliation of subscriber\n      org_unit           -- organizational
      unit\n      mail_firstName     -- personal name component\n      mail_middleName
      \   -- personal name component\n      mail_lastName      -- personal name component\n
      \     mail_email         -- subscriber's email address\n      jobTitle           --
      job title of subscriber\n      employeeID         -- employee identification
      number or string\n      mailStop           -- mail stop\n      issuerName         --
      name of CA\n      subjectName        -- name of Subject\n      validity           --
      validity interval\n   For example:\n      version?1%corp_company?Example, Inc.%org_unit?Engineering%\n
      \     mail_firstName?John%mail_lastName?Smith%jobTitle?Team Leader%\n      mail_email?john@example.com%\n"
    title: A.1.  Defined Names
  - contents:
    - "A.2.  IssuerName, SubjectName, and Validity Value Encoding\n   When they appear
      in id-regInfo-utf8Pairs syntax as named elements,\n   the encoding of values
      for issuerName, subjectName, and validity\n   SHALL use the following syntax.
      \ The characters [] indicate an\n   optional field, ::= and | have their usual
      BNF meanings, and all\n   other symbols (except spaces, which are insignificant)
      outside non-\n   terminal names are terminals.  Alphabetics are case-sensitive.\n
      \     issuerName  ::= <names>\n      subjectName ::= <names>\n      <names>
      \    ::= <name> | <names>:<name>\n      <validity>  ::= validity ? [<notbefore>]-[<notafter>]\n
      \     <notbefore> ::= <time>\n      <notafter>  ::= <time>\n   Where <time>
      is UTC time in the form YYYYMMDD[HH[MM[SS]]].  HH, MM,\n   and SS default to
      00 and are omitted if at the and of value 00.\n   Example validity encoding:\n
      \     validity?-19991231%\n   is a validity interval with no value for notBefore,
      and a value of\n   December 31, 1999 for notAfter.\n   Each name comprises a
      single character name form identifier, followed\n   by a name value of one or
      more UTF-8 characters.  Within a name\n   value, when it is necessary to disambiguate
      a character that has\n   formatting significance at an outer level, the escape
      sequence %xx\n   SHALL be used, where xx represents the hex value for the encoding\n
      \  concerned.  The percent symbol is represented by %%.\n      <name> ::= X<xname>|O<oname>|E<ename>|D<dname>|U<uname>|I<iname>\n
      \  Name forms and value formats are as follows:\n   X.500 directory name form
      (identifier \"X\"):\n      <xname> ::= <rdns>\n      <rdns>  ::= <rdn> | <rdns>
      , <rdn>\n      <rdn>   ::= <avas>\n      <avas>  ::= <ava> | <avas> + <ava>\n
      \     <ava>   ::= <attyp> = <avalue>\n      <attyp> ::= OID.<oid> | <stdat>\n
      \  Standard attribute type <stdat> is an alphabetic attribute type\n   identifier
      from the following set:\n      C      (country)\n      L      (locality)\n      ST
      \    (state or province)\n      O      (organization)\n      OU     (organizational
      unit)\n      CN     (common name)\n      STREET (street address)\n      E      (E-mail
      address).\n   <avalue> is a name component in the form of a UTF-8 character
      string\n   of 1 to 64 characters, with the restriction that in the IA5 subset
      of\n   UTF-8 only the characters of ASN.1 PrintableString may be used.\n   Other
      name form (identifier \"O\"):\n      <oname> ::= <oid> , <utf8string>\n   E-mail
      address (rfc822name) name form (identifier \"E\"):\n      <ename> ::= <ia5string>\n
      \  DNS name form (identifier \"D\"):\n      <dname> ::= <ia5string>\n   URI
      name form (identifier \"U\"):\n      <uname> ::= <ia5string>\n   IP address
      (identifier \"I\"):\n      <iname> ::= <oid>\n   For example:\n      issuerName?XOU=Our
      CA,O=Example,C=US% subjectName?XCN=John Smith,\n      O=Example, C=US, E=john@example.com%\n"
    title: A.2.  IssuerName, SubjectName, and Validity Value Encoding
  title: Appendix A.  Use of RegInfo for Name-Value Pairs
- contents:
  - 'Appendix B.  ASN.1 Structures and OIDs

    '
  - 'PKIXCRMF-2005 {iso(1) identified-organization(3) dod(6) internet(1)

    '
  - 'security(5) mechanisms(5) pkix(7) id-mod(0) id-mod-crmf2005(36)}

    '
  - 'DEFINITIONS IMPLICIT TAGS ::=

    '
  - 'BEGIN

    '
  - "IMPORTS\n  -- Directory Authentication Framework (X.509)\n     Version, AlgorithmIdentifier,
    Name, Time,\n     SubjectPublicKeyInfo, Extensions, UniqueIdentifier, Attribute\n
    \       FROM PKIX1Explicit88 {iso(1) identified-organization(3) dod(6)\n            internet(1)
    security(5) mechanisms(5) pkix(7) id-mod(0)\n            id-pkix1-explicit(18)}
    -- found in [PROFILE]\n  -- Certificate Extensions (X.509)\n     GeneralName\n
    \       FROM PKIX1Implicit88 {iso(1) identified-organization(3) dod(6)\n               internet(1)
    security(5) mechanisms(5) pkix(7) id-mod(0)\n               id-pkix1-implicit(19)}
    \ -- found in [PROFILE]\n  -- Cryptographic Message Syntax\n     EnvelopedData\n
    \       FROM CryptographicMessageSyntax2004 { iso(1) member-body(2)\n             us(840)
    rsadsi(113549) pkcs(1) pkcs-9(9) smime(16)\n             modules(0) cms-2004(24)
    };  -- found in [CMS]\n"
  - '-- The following definition may be uncommented for use with

    '
  - '-- ASN.1 compilers that do not understand UTF8String.

    '
  - "-- UTF8String ::= [UNIVERSAL 12] IMPLICIT OCTET STRING\n       -- The contents
    of this type correspond to RFC 2279.\n"
  - 'id-pkix  OBJECT IDENTIFIER  ::= { iso(1) identified-organization(3)

    '
  - 'dod(6) internet(1) security(5) mechanisms(5) 7 }

    '
  - '-- arc for Internet X.509 PKI protocols and their components

    '
  - 'id-pkip  OBJECT IDENTIFIER ::= { id-pkix 5 }

    '
  - "id-smime OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n             us(840)
    rsadsi(113549) pkcs(1) pkcs9(9) 16 }\n"
  - 'id-ct   OBJECT IDENTIFIER ::= { id-smime  1 }  -- content types

    '
  - '-- Core definitions for this module

    '
  - 'CertReqMessages ::= SEQUENCE SIZE (1..MAX) OF CertReqMsg

    '
  - "CertReqMsg ::= SEQUENCE {\n certReq   CertRequest,\n popo       ProofOfPossession
    \ OPTIONAL,\n -- content depends upon key type\n regInfo   SEQUENCE SIZE(1..MAX)
    OF AttributeTypeAndValue OPTIONAL }\n"
  - "CertRequest ::= SEQUENCE {\n certReqId     INTEGER,          -- ID for matching
    request and reply\n certTemplate  CertTemplate,  -- Selected fields of cert to
    be issued\n controls      Controls OPTIONAL }   -- Attributes affecting issuance\n"
  - "CertTemplate ::= SEQUENCE {\n version      [0] Version               OPTIONAL,\n
    serialNumber [1] INTEGER               OPTIONAL,\n signingAlg   [2] AlgorithmIdentifier
    \  OPTIONAL,\n issuer       [3] Name                  OPTIONAL,\n validity     [4]
    OptionalValidity      OPTIONAL,\n subject      [5] Name                  OPTIONAL,\n
    publicKey    [6] SubjectPublicKeyInfo  OPTIONAL,\n issuerUID    [7] UniqueIdentifier
    \     OPTIONAL,\n subjectUID   [8] UniqueIdentifier      OPTIONAL,\n extensions
    \  [9] Extensions            OPTIONAL }\n"
  - "OptionalValidity ::= SEQUENCE {\n notBefore  [0] Time OPTIONAL,\n notAfter   [1]
    Time OPTIONAL } -- at least one MUST be present\n"
  - 'Controls  ::= SEQUENCE SIZE(1..MAX) OF AttributeTypeAndValue

    '
  - "AttributeTypeAndValue ::= SEQUENCE {\n type         OBJECT IDENTIFIER,\n value
    \       ANY DEFINED BY type }\n"
  - "ProofOfPossession ::= CHOICE {\n raVerified        [0] NULL,\n -- used if the
    RA has already verified that the requester is in\n -- possession of the private
    key\n signature         [1] POPOSigningKey,\n keyEncipherment   [2] POPOPrivKey,\n
    keyAgreement      [3] POPOPrivKey }\n"
  - "POPOSigningKey ::= SEQUENCE {\n poposkInput           [0] POPOSigningKeyInput
    OPTIONAL,\n algorithmIdentifier   AlgorithmIdentifier,\n signature             BIT
    STRING }\n -- The signature (using \"algorithmIdentifier\") is on the\n -- DER-encoded
    value of poposkInput.  NOTE: If the CertReqMsg\n -- certReq CertTemplate contains
    the subject and publicKey values,\n -- then poposkInput MUST be omitted and the
    signature MUST be\n -- computed over the DER-encoded value of CertReqMsg certReq.
    \ If\n -- the CertReqMsg certReq CertTemplate does not contain both the\n -- public
    key and subject values (i.e., if it contains only one\n -- of these, or neither),
    then poposkInput MUST be present and\n -- MUST be signed.\n"
  - "POPOSigningKeyInput ::= SEQUENCE {\n authInfo            CHOICE {\n     sender
    \             [0] GeneralName,\n     -- used only if an authenticated identity
    has been\n     -- established for the sender (e.g., a DN from a\n     -- previously-issued
    and currently-valid certificate)\n     publicKeyMAC        PKMACValue },\n     --
    used if no authenticated GeneralName currently exists for\n     -- the sender;
    publicKeyMAC contains a password-based MAC\n     -- on the DER-encoded value of
    publicKey\n publicKey           SubjectPublicKeyInfo }  -- from CertTemplate\n"
  - 'PKMACValue ::= SEQUENCE {

    '
  - 'algId  AlgorithmIdentifier,

    '
  - '-- algorithm value shall be PasswordBasedMac {1 2 840 113533 7 66 13}

    '
  - '-- parameter value is PBMParameter

    '
  - 'value  BIT STRING }

    '
  - "PBMParameter ::= SEQUENCE {\n   salt                OCTET STRING,\n   owf                 AlgorithmIdentifier,\n
    \  -- AlgId for a One-Way Function (SHA-1 recommended)\n   iterationCount      INTEGER,\n
    \  -- number of times the OWF is applied\n   mac                 AlgorithmIdentifier\n
    \  -- the MAC AlgId (e.g., DES-MAC, Triple-DES-MAC [PKCS11],\n"
  - '}   -- or HMAC [HMAC, RFC2202])

    '
  - "POPOPrivKey ::= CHOICE {\n thisMessage       [0] BIT STRING,         -- Deprecated\n
    -- possession is proven in this message (which contains the private\n -- key itself
    (encrypted for the CA))\n subsequentMessage [1] SubsequentMessage,\n -- possession
    will be proven in a subsequent message\n dhMAC             [2] BIT STRING,         --
    Deprecated\n agreeMAC          [3] PKMACValue,\n encryptedKey      [4] EnvelopedData
    }\n -- for keyAgreement (only), possession is proven in this message\n -- (which
    contains a MAC (over the DER-encoded value of the\n -- certReq parameter in CertReqMsg,
    which MUST include both subject\n -- and publicKey) based on a key derived from
    the end entity's\n -- private DH key and the CA's public DH key);\n"
  - "SubsequentMessage ::= INTEGER {\n encrCert (0),\n -- requests that resulting
    certificate be encrypted for the\n -- end entity (following which, POP will be
    proven in a\n -- confirmation message)\n challengeResp (1) }\n -- requests that
    CA engage in challenge-response exchange with\n -- end entity in order to prove
    private key possession\n"
  - '-- Object identifier assignments --

    '
  - '-- Registration Controls in CRMF

    '
  - 'id-regCtrl OBJECT IDENTIFIER ::= { id-pkip 1 }

    '
  - 'id-regCtrl-regToken OBJECT IDENTIFIER ::= { id-regCtrl 1 }

    '
  - '--with syntax:

    '
  - 'RegToken ::= UTF8String

    '
  - 'id-regCtrl-authenticator OBJECT IDENTIFIER ::= { id-regCtrl 2 }

    '
  - '--with syntax:

    '
  - 'Authenticator ::= UTF8String

    '
  - 'id-regCtrl-pkiPublicationInfo OBJECT IDENTIFIER ::= { id-regCtrl 3 }

    '
  - '--with syntax:

    '
  - 'PKIPublicationInfo ::= SEQUENCE {

    '
  - "action     INTEGER {\n             dontPublish (0),\n             pleasePublish
    (1) },\n"
  - "pubInfos  SEQUENCE SIZE (1..MAX) OF SinglePubInfo OPTIONAL }\n  -- pubInfos MUST
    NOT be present if action is \"dontPublish\"\n  -- (if action is \"pleasePublish\"
    and pubInfos is omitted,\n  -- \"dontCare\" is assumed)\n"
  - "SinglePubInfo ::= SEQUENCE {\n pubMethod    INTEGER {\n     dontCare    (0),\n
    \    x500        (1),\n     web         (2),\n     ldap        (3) },\n pubLocation
    \ GeneralName OPTIONAL }\n"
  - 'id-regCtrl-pkiArchiveOptions     OBJECT IDENTIFIER ::= { id-regCtrl 4 }

    '
  - '--with syntax:

    '
  - "PKIArchiveOptions ::= CHOICE {\n encryptedPrivKey     [0] EncryptedKey,\n --
    the actual value of the private key\n keyGenParameters     [1] KeyGenParameters,\n
    -- parameters that allow the private key to be re-generated\n archiveRemGenPrivKey
    [2] BOOLEAN }\n -- set to TRUE if sender wishes receiver to archive the private\n
    -- key of a key pair that the receiver generates in response to\n -- this request;
    set to FALSE if no archival is desired.\n"
  - "EncryptedKey ::= CHOICE {\n encryptedValue        EncryptedValue,   -- Deprecated\n
    envelopedData     [0] EnvelopedData }\n -- The encrypted private key MUST be placed
    in the envelopedData\n -- encryptedContentInfo encryptedContent OCTET STRING.\n"
  - "EncryptedValue ::= SEQUENCE {\n intendedAlg   [0] AlgorithmIdentifier  OPTIONAL,\n
    -- the intended algorithm for which the value will be used\n symmAlg       [1]
    AlgorithmIdentifier  OPTIONAL,\n -- the symmetric algorithm used to encrypt the
    value\n encSymmKey    [2] BIT STRING           OPTIONAL,\n -- the (encrypted)
    symmetric key used to encrypt the value\n keyAlg        [3] AlgorithmIdentifier
    \ OPTIONAL,\n -- algorithm used to encrypt the symmetric key\n valueHint     [4]
    OCTET STRING         OPTIONAL,\n -- a brief description or identifier of the encValue
    content\n -- (may be meaningful only to the sending entity, and used only\n --
    if EncryptedValue might be re-examined by the sending entity\n -- in the future)\n
    encValue       BIT STRING }\n -- the encrypted value itself\n"
  - '-- When EncryptedValue is used to carry a private key (as opposed to

    '
  - '-- a certificate), implementations MUST support the encValue field

    '
  - '-- containing an encrypted PrivateKeyInfo as defined in [PKCS11],

    '
  - '-- section 12.11.  If encValue contains some other format/encoding

    '
  - '-- for the private key, the first octet of valueHint MAY be used

    '
  - '-- to indicate the format/encoding (but note that the possible values

    '
  - '-- of this octet are not specified at this time).  In all cases, the

    '
  - '-- intendedAlg field MUST be used to indicate at least the OID of

    '
  - '-- the intended algorithm of the private key, unless this information

    '
  - '-- is known a priori to both sender and receiver by some other means.

    '
  - 'KeyGenParameters ::= OCTET STRING

    '
  - 'id-regCtrl-oldCertID          OBJECT IDENTIFIER ::= { id-regCtrl 5 }

    '
  - '--with syntax:

    '
  - 'OldCertId ::= CertId

    '
  - "CertId ::= SEQUENCE {\n issuer           GeneralName,\n serialNumber     INTEGER
    }\n"
  - 'id-regCtrl-protocolEncrKey    OBJECT IDENTIFIER ::= { id-regCtrl 6 }

    '
  - '--with syntax:

    '
  - 'ProtocolEncrKey ::= SubjectPublicKeyInfo

    '
  - '-- Registration Info in CRMF

    '
  - 'id-regInfo OBJECT IDENTIFIER ::= { id-pkip 2 }

    '
  - 'id-regInfo-utf8Pairs    OBJECT IDENTIFIER ::= { id-regInfo 1 }

    '
  - '--with syntax

    '
  - 'UTF8Pairs ::= UTF8String

    '
  - 'id-regInfo-certReq       OBJECT IDENTIFIER ::= { id-regInfo 2 }

    '
  - '--with syntax

    '
  - 'CertReq ::= CertRequest

    '
  - '-- id-ct-encKeyWithID is a new content type used for CMS objects.

    '
  - '-- it contains both a private key and an identifier for key escrow

    '
  - '-- agents to check against recovery requestors.

    '
  - 'id-ct-encKeyWithID OBJECT IDENTIFIER ::= {id-ct 21}

    '
  - "EncKeyWithID ::= SEQUENCE {\n  privateKey           PrivateKeyInfo,\n  identifier
    CHOICE {\n    string             UTF8String,\n    generalName        GeneralName\n
    \ } OPTIONAL\n"
  - '}

    '
  - "PrivateKeyInfo ::= SEQUENCE {\n   version                   INTEGER,\n   privateKeyAlgorithm
    \      AlgorithmIdentifier,\n   privateKey                OCTET STRING,\n   attributes
    \               [0] IMPLICIT Attributes OPTIONAL\n"
  - '}

    '
  - 'Attributes ::= SET OF Attribute

    '
  - 'END

    '
  title: Appendix B.  ASN.1 Structures and OIDs
- contents:
  - "Appendix C.  Why do Proof-of-Possession (POP)\n   Proof-of-Possession, or POP,
    means that the CA is adequately\n   convinced that the entity requesting a certificate
    for the public key\n   Y, has access to the corresponding private key X.\n   POP
    is important because it provides an appropriate level of\n   assurance of the
    correct operation of the PKI as a whole.  At its\n   lowest level, POP counters
    the \"self-inflicted denial of service\";\n   that is, an entity voluntarily gets
    a certificate that cannot be used\n   to sign or encrypt/decrypt information.
    \ However, as the following\n   two examples demonstrate, POP also counters less
    direct, but more\n   severe, threats:\n      POP for signing keys: it is important
    to provide POP for keys used\n      to sign material, in order to provide non-repudiation
    of\n      transactions.  For example, suppose Alice legitimately has private\n
    \     key X and its corresponding public key Y.  Alice has a certificate\n      from
    Charlie, a CA, containing Y.  Alice uses X to sign a\n      transaction T.  Without
    POP, Mal could also get a certificate from\n      Charlie containing the same
    public key, Y.  Now, there are two\n      possible threats: Mal could claim to
    have been the real signer of\n      T; or Alice can falsely deny signing T, claiming
    that it was\n      instead Mal.  Since no one can reliably prove that Mal did
    or did\n      not ever possess X, neither of these claims can be refuted, and\n
    \     thus the service provided by and the confidence in the PKI has\n      been
    defeated.  (Of course, if Mal really did possess X, Alice's\n      private key,
    then no POP mechanism in the world will help, but\n      that is a different problem.)\n
    \     Note that one level of protection can be gained by having Alice\n      (as
    the true signer of the transaction) include in the signed\n      information,
    her certificate or an identifier of her certificate\n      (e.g., a hash of her
    certificate).  This might make it more\n      difficult for Mal to claim authorship;
    he would have to assert\n      that he incorrectly included Alice's certificate,
    rather than his\n      own.  However, it would not stop Alice from falsely repudiating\n
    \     her actions.  Since the certificate itself is a public item, Mal\n      indeed
    could have inserted Alice's certificate or identifier into\n      the signed transaction,
    and thus its presence does not indicate\n      that Alice was the one who participated
    in the now-repudiated\n      transaction.  The only reliable way to stop this
    attack is to\n      require that Mal prove he possesses X before his certificate
    is\n      issued.\n      For signing keys used only for authentication, and not
    for non-\n      repudiation, the threat is lower because users may not care about\n
    \     Alice's after-the-fact repudiation, and thus POP becomes less\n      important.
    \ However, POP SHOULD still be done wherever feasible in\n      this environment,
    by either off-line or on-line means.\n      POP for key management keys:  Similarly,
    POP for key management\n      keys (that is, keys used for either key agreement
    or key exchange)\n      can help to prevent undermining confidence in the PKI.
    \ Suppose\n      that Al is a new instructor in the Computer Science Department
    of\n      a local university.  Al has created a draft final exam for the\n      Introduction
    to Networking course he is teaching.  He wants to\n      send a copy of the draft
    final to Dorothy, the Department Head,\n      for her review prior to giving the
    exam.  This exam will of course\n      be encrypted, as several students have
    access to the computer\n      system.  However, a quick search of the certificate
    repository\n      (e.g., search the repository for all records with\n      subjectPublicKey=Dorothy's-value)
    turns up the fact that several\n      students have certificates containing the
    same public key\n      management key as Dorothy.  At this point, if no POP has
    been done\n      by the CA, Al has no way of knowing whether all of the students\n
    \     have simply created these certificates without knowing the\n      corresponding
    private key (and thus it is safe to send the\n      encrypted exam to Dorothy),
    or whether the students have somehow\n      acquired Dorothy's private key (and
    thus it is certainly not safe\n      to send the exam).  Thus, the service to
    be provided by the PKI\n      allowing users to communicate with one another,
    with confidence in\n      who they are communicating with, has been totally defeated.
    \ If\n      the CA is providing POP, then either no students will have such\n
    \     certificates, or Al can know with certainty that the students do\n      indeed
    know Dorothy's private key, and act accordingly.\n"
  title: Appendix C.  Why do Proof-of-Possession (POP)
- contents:
  - "Author's Address\n   Jim Schaad\n   Soaring Hawk Consulting\n   PO Box 675\n
    \  Gold Bar, WA 98251\n   EMail: jimsch@exmsft.com\n"
  title: Author's Address
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
