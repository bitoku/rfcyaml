- title: __initial_text__
  contents:
  - '                         Telnet X.3 PAD Option

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC proposes a new option to Telnet for the Internet\
    \ community,\n   and requests discussion and suggestions for improvements.\n \
    \  Distribution of this memo is unlimited.\n"
- title: 1.  Command name and code
  contents:
  - "1.  Command name and code\n   X.3-PAD                30\n"
- title: 2.  Command meanings
  contents:
  - "2.  Command meanings\n   IAC  DO     X.3-PAD\n      The issuing telnet requests\
    \ that its peer perform X.3-PAD\n      functions, or accepts an offer to do so.\n\
    \   IAC  DON'T  X.3-PAD\n      The issuing telnet demands that its peer not perform\
    \ or cease\n      performing X.3-PAD functions.\n   IAC  WILL   X.3-PAD\n    \
    \  The issuing telnet offers to perform X.3-PAD functions or confirms\n      that\
    \ it will do so.\n   IAC  WON'T  X.3-PAD\n      The issuing telnet refuses to\
    \ perform X.3-PAD functions or\n      indicates that it is ceasing to handle them.\n\
    \   Typically a server (host) telnet will use DO and DON'T, while a\n   client\
    \ (user) telnet will use WILL and WON'T.  For convenience, in\n   the rest of\
    \ this RFC 'host' and 'user' telnets refer to those saying\n   'DO X.3-PAD' or\
    \ 'WILL X.3-PAD' respectively.\n   Both telnet peers may use this option without\
    \ confusion, as all\n   messages unambiguously identify whether they come from\
    \ the host\n   (\"DO\") or the user (\"WILL\") side.\n      Once DO and WILL have\
    \ been exchanged, the host (\"DO\") telnet may\n      send the following messages:\n\
    \   IAC SB  X.3-PAD  SET           <param1> <value1> ...  IAC SE\n   IAC SB  X.3-PAD\
    \  RESPONSE-SET  <param1> <value1> ...  IAC SE\n   IAC SB  X.3-PAD  SEND     \
    \     IAC SE\n      while the user (\"WILL\") telnet may send the following messages:\n\
    \   IAC SB  X.3-PAD  IS            <param1> <value1> ...  IAC SE\n   IAC SB  X.3-PAD\
    \  RESPONSE-IS   <param1> <value1> ...  IAC SE\n   The code for SET          is\
    \ 0\n   The code for RESPONSE-SET is 1\n   The code for IS           is 2\n  \
    \ The code for RESPONSE-IS  is 3\n   The code for SEND         is 4\n      Messages\
    \ listing parameter-value pairs may contain any number of\n      such pairs, including\
    \ zero.  Each parameter and each value\n      occupies one octet, except that\
    \ 255 (IAC) is doubled wherever it\n      appears.\n"
- title: 3.  Default conditions
  contents:
  - "3.  Default conditions\n   The initial state is DON'T X.3-PAD, WON'T X.3-PAD.\
    \  This RFC does not\n   specify default values for most X.3 parameters.  If the\
    \ host telnet\n   wishes a particular initial state (as it normally will), it\
    \ should\n   negotiate for it after exchange of DO/WILL messages.\n   X.3-PAD\
    \ parameter values need not be preserved except when DO/WILL\n   X.3-PAD is in\
    \ effect.  Thus if a host enables (\"DO\") X.3-PAD,\n   negotiates about some\
    \ parameters, then for some reason disables\n   (\"DONT\") and later re-enables\
    \ X.3-PAD, it must renegotiate any\n   parameters it cares about.\n   Keeping\
    \ in mind that the host telnet may not recognize all the\n   parameters known\
    \ to the user telnet, it is suggested that the user\n   telnet's initial parameters\
    \ allow a reasonable level of service even\n   if they are never changed (e.g.,\
    \ it would be unwise to begin with all\n   data forwarding conditions disabled).\
    \  Extensions to X.3 should\n   default to states resembling normal X.3 service\
    \ where possible.\n"
- title: 4.  Motivation for the option
  contents:
  - "4.  Motivation for the option\n   Where interactive terminals (or computers simulating\
    \ them) are\n   attached to host computers across a network, it is often desirable\
    \ to\n   provide them the same services as have long been provided for\n   terminals\
    \ directly attached to those hosts.\n   Many systems handle this by simply leaving\
    \ all character processing\n   to the host running the applications.  Each character\
    \ typed by the\n   user is sent, often in its own packet, immediately to the host.\
    \  This\n   gives good control over interaction, but can cause a significant load\n\
    \   on hosts and networks.  Long-distance packet networks tend to be\n   unreasonably\
    \ slow or expensive or both when used in this mode.\n   Suitable character processing\
    \ on the client (near the user's\n   terminal) can greatly improve the situation.\
    \  Unfortunately for\n   standardization efforts, there are many possible approaches\
    \ with\n   differing purposes.\n   Some have already been proposed as Telnet options.\
    \  The Remote\n   Controlled Transmission and Echo option, [3], provides fine\
    \ control\n   over local buffering and echoing.  The SUPDUP option, [4], offers\
    \ a\n   variety of input and display functions in terminal-independent form.\n\
    \   This RFC's proposal is intended to support efficient, approximate\n   emulation,\
    \ across a Telnet connection, of a host's normal handling of\n   character-oriented\
    \ terminals.  Ideally, a user and an application\n   program would not need to\
    \ know whether they were linked by an RS-232\n   line or a TCP/IP network, except\
    \ where the medium required a\n   distinction (e.g., when establishing a connection).\n\
    \   Server implementors would wish for enough to emulate, purely locally,\n  \
    \ everything offered by their host's operating system; on the other\n   hand,\
    \ a standard calling on user telnets to provide all terminal\n   handling functions\
    \ of all known operating systems will find few\n   implementors.  One might settle\
    \ on a subset of common operations, but\n   which ones?\n   The CCITT world has\
    \ used one approach to these problems: the set of\n   PAD services defined by\
    \ recommendation X.3.  This RFC proposes that\n   the Internet community adopt\
    \ that solution to handle the same\n   problems under Telnet.  It is fairly simple,\
    \ widely known and used,\n   extensible, and solves most of the relevant problems.\n\
    \   Adopting X.3 would have another advantage.  X.25 is the dominant\n   worldwide\
    \ standard interface between commercial packet networks and\n   Internet systems,\
    \ as evidenced by the DDN's adoption of X.25 basic\n   and standard services as\
    \ replacements for BBN 1822 and HDH.  Telnet\n   and X.3 PAD traffic will have\
    \ to coexist on X.25 networks; there will\n   be a consequential desire for effective\
    \ interoperation at the virtual\n   terminal level.  Extending Telnet along these\
    \ lines would vastly\n   simplify bridging the two.\n   Described here is a scheme\
    \ for implementing X.3 services and\n   negotiating their parameters across a\
    \ Telnet connection.\n"
- title: 5.  Description of the option
  contents:
  - "5.  Description of the option\n   Many, though not all, X.3 services are meaningful\
    \ in the context of\n   remote terminal processing; for some, it may be desirable\
    \ to allow\n   local control (by the user) but not remote control (by the server\n\
    \   host).  Some functions may not be provided, or provided in only\n   limited\
    \ form, by particular implementations.  In general, an\n   implementation should\
    \ follow the Telnet norm of requesting desired\n   service but continuing to function\
    \ somehow in case it is not\n   available.\n   Negotiations are asymmetrical.\
    \  Since the user telnet is charged with\n   local character handling while engaged\
    \ in the session with the remote\n   host, the X.3 parameters \"belong\" to the\
    \ user side.  The host telnet\n   requests parameter changes with SET or RESPONSE-SET\
    \ messages.  Host\n   requests might be on behalf of an application program, for\
    \ example,\n   disabling local echo while a password is being entered.  The user\n\
    \   telnet should give its \"best effort\" to accommodate these requests,\n  \
    \ but guarantees nothing except accurate status reporting.\n   A user telnet may\
    \ allow the local user to request parameter changes\n   too, though this RFC does\
    \ not specify a way.\n   Where requests conflict, or where a user telnet cannot\
    \ satisfy a\n   request, the user telnet has the last word, since it does the\n\
    \   relevant character processing.  It may allow control from the host\n   only,\
    \ from the user only, may seek a compromise type of processing\n   and so on,\
    \ at the implementor's discretion.\n   Host (\"DO\") telnets may also ask the\
    \ user telnet to SEND its current\n   parameter values.  The user (\"WILL\") telnet\
    \ must reply to each SEND\n   message with a RESPONSE-IS message listing the values\
    \ of all the\n   parameters it knows about.  It is strongly recommended that all\n\
    \   parameters known to the telnet implementor be included in this list,\n   even\
    \ if their values cannot be changed.  The intent is to give the\n   host telnet\
    \ the most complete information possible about the style of\n   interaction which\
    \ the user telnet is providing.\n   If possible, user telnets should also inform\
    \ the server host (with an\n   IS message) whenever local conditions (e.g., user\
    \ requests) change a\n   parameter's state.  This may not be feasible in some\
    \ circumstances,\n   and such behavior is negotiable -- see the discussion of\
    \ parameter 0.\n   Note that there are no \"error\" messages defined in section\
    \ 2.  Almost\n   all detectable errors (use of nonexisistent parameters or undefined\n\
    \   values for known parameters) are indistinguishable from valid uses of\n  \
    \ options known to one peer but not the other.  Hosts will normally\n   wish to\
    \ poll the user telnet's state after making a request anyway,\n   so error responses\
    \ do not seem to be needed.\n   The protocol messages listed in section 2 are\
    \ to be used as follows.\n   SET and RESPONSE-SET ask the user telnet to change\
    \ its values for the\n   given X.3 parameters.  The user telnet ignores unrecognized\n\
    \   parameters; it sends no reply.  The host sends SET to begin a\n   negotiation,\
    \ when some event on the host side causes a change in the\n   desired set of parameters.\
    \  The host sends RESPONSE-SET to continue\n   negotiation, when it is dissatisfied\
    \ with the user telnet's choice of\n   parameters indicated in a RESPONSE-IS message.\
    \  Typically, the host\n   will test the user telnet's chosen behavior by issuing\
    \ a SEND message\n   following the SET or RESPONSE-SET, though the user telnet\
    \ should not\n   rely on this.\n   A SEND message from the host demands that the\
    \ user telnet send\n   RESPONSE-IS.\n   IS and RESPONSE-IS inform the host telnet\
    \ of the current states of\n   some or all of the user telnet's parameters.  The\
    \ user telnet sends\n   IS when the user telnet changes a parameter for some local\
    \ reason,\n   e.g., at a request from the (human) user.  An IS message may but\
    \ need\n   not list all parameters, e.g., it might list just those which\n   changed.\n\
    \   It sends RESPONSE-IS in answer to each SEND request from the host.\n   Every\
    \ RESPONSE-IS should list ALL X.3-PAD parameters known to the\n   user telnet\
    \ implementor, even those which cannot be changed.  Any\n   host requests (SET\
    \ or RESPONSE-SET) received before a SEND message\n   should be processed before\
    \ sending the answering RESPONSE-IS, so that\n   their effects are reflected in\
    \ the parameter values indicated there.\n   To permit synchronization (which SEND\
    \ is this an answer to?), the\n   user telnet should count SEND messages, and\
    \ send exactly one\n   RESPONSE-IS per SEND.\n   One might think that this protocol\
    \ could be implemented with only\n   SET, SEND and IS messages.  The seemingly\
    \ redundant RESPONSE-SET and\n   RESPONSE-IS codes are needed to let both the\
    \ user and host telnets\n   distinguish new peer requests from attempts to renegotiate\
    \ previous\n   actions, while preventing potential infinite negotiation loops.\n\
    \   SET and IS messages are sent when the host or user telnet wishes to\n   inform\
    \ its peer of a change in the X.3 processing mode desired by\n   some higher level\
    \ entity.  This might happen at initialization, or on\n   user or application-program\
    \ request.  The important thing is that\n   these messages are NOT sent merely\
    \ in response to another X.3-PAD\n   message from the peer.\n   RESPONSE-SET and\
    \ RESPONSE-IS messages should be sent in reply to a\n   peer's [RESPONSE-]IS or\
    \ SEND message.  They reflect negotiation at\n   the telnet level, rather than\
    \ changes in the higher-level\n   environment.  A host which sends a SEND message\
    \ may complain about\n   the status indicated in the answering RESPONSE-IS by\
    \ sending\n   RESPONSE-SET but not SET.\n   Under this scheme, a possible rule\
    \ for preventing infinite\n   negotiations would be for the host to send at most\
    \ zero, one, or some\n   fixed number, of RESPONSE-SET messages following receipt\
    \ of one IS\n   message or one higher-level host-side request.  After that, the\
    \ host\n   telnet simply accepts the user telnet's last offer as well as it can.\n\
    \   Note that only the host needs to worry about loop prevention, since\n   it\
    \ does all the asking.\n   A given parameter should not be listed more than once\
    \ in a single\n   message.\n   A sample negotiation might look like this.  (Here\
    \ line breaks are not\n   meaningful; ASCII carriage returns and line feeds are\
    \ indicated by\n   <CR> and <LF>; other characters stand for themselves.  In the\
    \ IAC SB\n   octet values.)\n         Host:   <CR><LF>%\n                    \
    \                      (User types \"cd gibber<CR>\")\n         User:   cd gibber<CR><LF>\n\
    \         Host:   Password required.<CR>LF>\n                                \
    \               (Host disables echoing)\n              IAC SB X.3-PAD SET 2 0\
    \ IAC SE\n                                               (Host polls for status)\n\
    \              IAC SB X.3-PAD SEND IAC SE\n         User:                    \
    \    (User telnet has disabled local\n                                       echo.\
    \  Note that some\n                                       parameters (e.g., 9,\
    \ 10, 11)\n                                       are not present, presumably\n\
    \                                       unimplemented, and a few\n           \
    \                            extension parameters\n                          \
    \             (129, 134) in extension\n                                      \
    \ set 1 are also defined.)\n               IAC SB X.3-PAD RESPONSE-IS 1 29 2 0\
    \ 3 2 4 0 5 0 7 17 8 0\n                                         12 0 13 3 15\
    \ 1 16 8 17 21 18 0\n                                         128 1 129 23 134\
    \ 1 IAC SE\n         Host:    password:\n                                    \
    \          (User types \"squeak<CR>\",\n         User:    squeak<CR><LF>     \
    \             which is not echoed.)\n         Host:                          \
    \      (Host re-enables echoing)\n                  IAC SB X.3-PAD SET 2 1 IAC\
    \ SE\n                                              (Host polls for status)\n\
    \                  IAC SB X.3-PAD SEND IAC SE\n         User:\n              \
    \  IAC SB X.3-PAD RESPONSE-IS 1 29 2 1 3 2 4 0 5 0 7 17 8 0\n                \
    \                          12 0 13 3 15 1 16 8 17 21 18 0\n                  \
    \                        128 1 129 23 134 1 IAC SE\n"
- title: 6.  Parameters
  contents:
  - "6.  Parameters\n   In outline, the X.3-PAD option uses the following parameters.\n\
    \      Parameter 0 indicates whether the user telnet notifies the host\n     \
    \ about parameter changes made for local reasons.\n      Parameters 1 through\
    \ 22 are basically those of CCITT X.3, with\n      some changes in interpretation;\
    \ they are listed in detail below.\n      Parameters 23 through 127 are reserved\
    \ for potential extensions to\n      CCITT's X.3 definition.\n      Parameter\
    \ 128 selects an \"extension set\", determining the meaning\n      of parameters\
    \ 129 through 255.  One extension set is proposed in\n      this RFC, others may\
    \ be added.  The extension mechanism is\n      explained under parameter 128's\
    \ description.\n      Parameters 129 through 255 are meaningful only when defined\
    \ in the\n      extension set indicated by the current value of parameter 128.\n\
    \   It should NOT be assumed that all implementations will necessarily\n   support\
    \ all parameters defined here, or all values of those\n   parameters.  Supported\
    \ parameter/value combinations, however, should\n   behave as described here.\n\
    \   The following parameter is specific to this Telnet option.\n   Parameter 0\
    \ -- Notify host of user-initiated parameter changes.\n     Code 0 -- Host is\
    \ not notified.\n     Code 1 -- User telnet notifies host by sending IS message.\n\
    \     If the user telnet, for some local reason, changes a parameter,\n     should\
    \ it send an IS message to the host?  This is desirable, since\n     the host\
    \ telnet cannot be sure of knowing the user telnet's current\n     status otherwise.\
    \  On the other hand, some user telnets may be\n     unable to send notification.\
    \  Consider a user calling from an X.25\n     PAD through an X.25-to-telnet gateway.\
    \  The user may change local\n     PAD parameters freely, but since normal PADs\
    \ send no message when\n     this happens, the gateway cannot inform the host\
    \ telnet.  Moreover,\n     some sloppy host telnets may not wish to know about\
    \ user parameter\n     changes.\n     In normal usage, the host will ask to SET\
    \ parameter 0 to its\n     preferred state upon initialization; the user telnet\
    \ accepts the\n     setting if it can; then the host polls (using SEND) for the\
    \ user\n     telnet's decision.  A disappointed host might periodically poll for\n\
    \     changes, or admonish the (human) user not to change parameters, or\n   \
    \  remain silent and simply work oddly if changes are made.\n"
- title: The following parameters are as defined by the 1984 CCITT X.3 standard.
  contents:
  - 'The following parameters are as defined by the 1984 CCITT X.3 standard.

    '
- title: Numbers are in decimal.
  contents:
  - 'Numbers are in decimal.

    '
- title: Parameter 1 -- Character to escape to local telnet command mode.
  contents:
  - "Parameter 1 -- Character to escape to local telnet command mode.\n     Code 0\
    \ -- No ASCII character performs this function (though\n               some special\
    \ mechanism, e.g., a function key, still may).\n     Code 1 -- DLE (ASCII code\
    \ 16).\n     Codes 32 through 126 -- ASCII code of the character.\n     Codes\
    \ 2 through 31 are not defined by X.3, but might also be taken\n     to refer\
    \ to the corresponding ASCII control characters.  X.3 seems\n     to be unable\
    \ to name SOH (control-A) as a command escape character.\n"
- title: Parameter 2 -- Local echo of characters typed by the user.
  contents:
  - "Parameter 2 -- Local echo of characters typed by the user.\n     Code 0 -- No\
    \ local echo.\n     Code 1 -- Local echo.\n     Several echoing styles are possible.\
    \  Parameter 13 selects whether\n     a carriage return echoes as itself or as\
    \ CR LF.  Parameter 20 may\n     suppress echoing of particular ASCII characters.\
    \  The extension\n     parameter 134 selects a style for echoing non-printing\
    \ characters\n     such as ESC.\n"
- title: Parameter 3 -- Set of forwarding characters.
  contents:
  - "Parameter 3 -- Set of forwarding characters.\n     The value is bit-encoded;\
    \ each nonzero bit specifies a set of\n     characters.  The user telnet should\
    \ accept characters from the\n     user's keyboard, buffering them until it receives\
    \ any of the\n     specified characters (or until some other forwarding condition\
    \ is\n     satisfied, see below), and then sending the buffer to the host.\n \
    \    It may forward earlier if necessary, e.g., if it runs out of buffer\n   \
    \  space.  It MUST eventually forward after receiving one of the\n     indicated\
    \ characters.\n     Code 0 -- No forwarding characters.\n     Code 1 -- Alphanumeric\
    \ characters (a-z, A-Z, 0-9).\n     Code 2 -- CR.\n     Code 4 -- ESC, BEL, ENQ,\
    \ ACK.\n     Code 8 -- DEL, CAN, DC2.\n     Code 16 -- ETX, EOT.\n     Code 32\
    \ -- HT, LF, VT, FF.\n     Code 64 -- ASCII character codes 0 through 31 not listed\
    \ above.\n     Note that there is no way provided here to forward on printable,\n\
    \     non-alphanumeric characters (punctuation marks).\n     Codes may be added\
    \ to select the union of the associated sets of\n     characters.\n"
- title: Parameter 4 -- Forward after idle time.
  contents:
  - "Parameter 4 -- Forward after idle time.\n     When this parameter is nonzero,\
    \ the user telnet sends its input\n     buffer to the host after a given period\
    \ in which no characters are\n     typed, even if no forwarding character was\
    \ received.\n     Code 0 -- Infinite time limit.\n     Codes 1 through 255 --\
    \ Time limit in 1/20 second units.\n     The value \"1\" may be taken to mean\
    \ \"forward immediately\" if timed\n     input is inconvenient to provide.  For\
    \ other values, when timing is\n     available but the exact requested value is\
    \ not, rounding to larger\n     time delays is suggested.  If timing is requested\
    \ but none is\n     available, immediate forwarding on every character is much\n\
    \     preferred over an infinite time limit.\n     Note the interaction with parameter\
    \ 15, Local editing, and the\n     notes made under that heading.\n"
- title: Parameter 5 -- Flow control of user-to-host data.
  contents:
  - "Parameter 5 -- Flow control of user-to-host data.\n     A user telnet may be\
    \ overwhelmed by data typed by the user.  If\n     parameter 5 is 1, it may output\
    \ X-OFF (DC3, ASCII code 19) to ask\n     the user to suspend input and X-ON (DC1,\
    \ ASCII code 17) when the\n     user may resume typing.\n     Code 0 -- X-OFF\
    \ and X-ON considered normal output data.\n     Code 1 -- X-OFF and X-ON used\
    \ to control user input.\n     The extension parameters 130 and 131, if defined,\
    \ specify other\n     codes to be used instead of ASCII DC3 and DC1.\n"
- title: Parameter 6, referring to messages sent from the PAD to the user,
  contents:
  - "Parameter 6, referring to messages sent from the PAD to the user,\n         \
    \       does not seem to be relevant in this context.\n"
- title: Parameter 7 -- Function of Break, Interrupt, Attention, etc.
  contents:
  - "Parameter 7 -- Function of Break, Interrupt, Attention, etc.\n     This parameter\
    \ describes handling of some special key or other\n     character, implementation-defined,\
    \ on the user's keyboard.  It is\n     bit-encoded; codes may be added to select\
    \ multiple functions.\n     Multiple functions may be performed in any order.\
    \  Any messages\n     generated should be promptly sent to the host.\n     Code\
    \ 0 -- No action.\n     Code 1 -- Send interrupt packet (Telnet IAC IP).\n   \
    \  Code 2 -- Reset (break Telnet connection).\n     Code 4 -- Discard input from\
    \ user not yet consumed by host.\n     Code 8 -- Escape to local Telnet command\
    \ mode.\n     Code 16 -- Discard output from host (see parameter 8).\n     The\
    \ X.25 'Interrupt', 'Reset', and 'Indication of Break' messages\n     are here\
    \ translated to Telnet equivalents.  See section 8 for\n     suggestions on discarding\
    \ input and output.\n"
- title: Parameter 8 -- Discarding output from host.
  contents:
  - "Parameter 8 -- Discarding output from host.\n     This parameter is intended\
    \ as a flag, indicating whether host\n     output is being ignored.\n     Code\
    \ 0 -- Host output is sent to user.\n     Code 1 -- Host output is discarded.\n\
    \     This parameter is normally used in conjunction with parameter 7\n     when\
    \ the 16's bit (Discard output on Break/Interrupt/Attention) is\n     set.  An\
    \ implementation is suggested in section 8 of this RFC.\n     Note that, if a\
    \ signal from the user causes parameter 8 to be\n     changed and parameter 0\
    \ is set to 1, an X.3-PAD IS message should\n     be sent to the host.\n"
- title: Parameter 9 -- Padding after carriage return.
  contents:
  - "Parameter 9 -- Padding after carriage return.\n     This parameter selects insertion\
    \ of ASCII NUL padding characters\n     after output of each carriage return.\n\
    \     Codes 0 through 7 -- Insert that many padding characters.\n"
- title: Parameter 10 -- Line folding.
  contents:
  - "Parameter 10 -- Line folding.\n     Output lines may be folded (e.g., by insertion\
    \ of carriage return\n     and line feed) when they exceed a specified width.\n\
    \     Code 0 -- No output line folding.\n     Codes 1 through 255 -- Fold lines\
    \ after that many characters.\n"
- title: Parameter 11 -- Bit rate.
  contents:
  - "Parameter 11 -- Bit rate.\n     This parameter indicates the serial data rate\
    \ of the user's\n     terminal, if any.  Though CCITT X.3 considers this parameter\
    \ to be\n     read-only, it may be meaningful to allow the host to set as well\
    \ as\n     read this value, thus changing the user's line speed dynamically.\n\
    \     Code 0 -- 110 bps            Code 10 -- 50 bps\n     Code 1 -- 134.5 bps\
    \          Code 11 -- 75 bps in, 1200 out\n     Code 2 -- 300 bps            Code\
    \ 12 -- 2400 bps\n     Code 3 -- 1200 bps           Code 13 -- 4800 bps\n    \
    \ Code 4 -- 600 bps            Code 14 -- 9600 bps\n     Code 5 -- 75 bps    \
    \         Code 15 -- 19200 bps\n     Code 6 -- 150 bps            Code 16 -- 48000\
    \ bps\n     Code 7 -- 1800 bps           Code 17 -- 56000 bps\n     Code 8 --\
    \ 200 bps            Code 18 -- 64000 bps\n     Code 9 -- 100 bps\n"
- title: Parameter 12 -- Flow control of host-to-user data.
  contents:
  - "Parameter 12 -- Flow control of host-to-user data.\n     When this parameter\
    \ is 1, the user may type X-OFF (DC3, ASCII code\n     19) to suspend printing\
    \ output, and X-ON (DC1, ASCII code 17) to\n     resume output.\n     Code 0 --\
    \ X-OFF and X-ON are sent as data to host.\n     Code 1 -- X-OFF and X-ON control\
    \ output.\n     See also the extension parameters 130, 131 and 132.\n"
- title: Parameter 13 -- Line feed insertion; Telnet CR LF vs CR NUL.
  contents:
  - "Parameter 13 -- Line feed insertion; Telnet CR LF vs CR NUL.\n     The CCITT\
    \ uses this parameter to select whether a typed CR should\n     be sent as CR\
    \ or CR-LF, whether an output CR should have a LF\n     printed after it, and\
    \ whether an echoed CR should be echoed with an\n     accompanying LF.\n     Here,\
    \ it resolves the questions of mapping between the Telnet CR-LF\n     sequence\
    \ and single ASCII codes (i.e., when the user presses the\n     carriage return\
    \ key, should CR LF or CR NUL be sent to the host?\n     When the host sends CR\
    \ LF, should the user see CR LF or merely CR?)\n     The value is bit-encoded;\
    \ codes may be added to select multiple\n     functions.\n     Code 0 -- No line\
    \ feed insertion\n               (typed CR sent as CR NUL; host CR LF printed\
    \ as CR).\n     Code 1 -- Add line feed on output (host CR LF printed as CR LF).\n\
    \     Code 2 -- Add line feed on input (typed CR sent as CR LF to host).\n   \
    \  Code 4 -- When echoing a typed CR locally, echo as CR LF.\n     Note the interaction\
    \ with the TRANSMIT-BINARY Telnet option [5].\n     If the host has said WILL\
    \ TRANSMIT-BINARY, then CR has no special\n     meaning on output; it always stands\
    \ for the single character CR\n     regardless of this parameter's value.  If\
    \ the user telnet has said\n     WILL TRANSMIT-BINARY, a typed CR should likewise\
    \ always be sent as\n     itself and not as CR LF or CR NUL.\n"
- title: Parameter 14 -- Output padding after line feed.
  contents:
  - "Parameter 14 -- Output padding after line feed.\n     Gives the number of ASCII\
    \ NUL padding characters to be sent to the\n     user's terminal after each output\
    \ line feed.\n     Codes 0 through 7 -- Send that many padding characters.\n"
- title: Parameter 15 -- Local editing.
  contents:
  - "Parameter 15 -- Local editing.\n     If this parameter is 1, the character delete,\
    \ line delete and line\n     reprint functions (parameters 16, 17 and 18), if\
    \ implemented,\n     should be enabled.  Data should be sent to the host when\
    \ a\n     forwarding character (see parameter 3) is typed or in case the user\n\
    \     telnet's input buffer becomes full.\n     Note the interaction with parameter\
    \ 4, Forward after idle time.\n     User telnets need not handle the case where\
    \ idle-time forwarding\n     and local editing are both enabled, i.e., the host\
    \ should\n     explicitly request changing parameter 4 to 0 along with setting\n\
    \     parameter 15 to 1.\n     Code 0 -- No input editing.  Any editing characters\
    \ are considered\n               data.\n     Code 1 -- Input editing.  Editing\
    \ characters edit the input buffer.\n"
- title: Parameter 16 -- Character-delete character.
  contents:
  - "Parameter 16 -- Character-delete character.\n     While local editing (parameter\
    \ 15) is enabled, typing this\n     character erases the last character in the\
    \ editing buffer, if any.\n     When editing is disabled, this character is not\
    \ treated specially.\n     Code 0 -- No character has this function.\n     Codes\
    \ 1 through 127 -- ASCII code of character-delete character.\n     See also parameter\
    \ 19.\n"
- title: Parameter 17 -- Line-delete character.
  contents:
  - "Parameter 17 -- Line-delete character.\n     While local editing (parameter 15)\
    \ is enabled, this character\n     erases the entire contents of the editing buffer.\
    \  When editing is\n     disabled, this character is not treated specially.\n\
    \     Code 0 -- No character has this function.\n     Codes 1 through 127 -- ASCII\
    \ code of line-delete character.\n     See also parameter 19.\n"
- title: Parameter 18 -- Line-display character.
  contents:
  - "Parameter 18 -- Line-display character.\n     While local editing (parameter\
    \ 15) is enabled, typing this\n     character causes the current contents of the\
    \ editing buffer to be\n     printed on the user's terminal; nothing is sent to\
    \ the host.  When\n     editing is disabled, this character is not treated specially.\n\
    \     Code 0 -- No character has this function.\n     Codes 1 through 127 -- ASCII\
    \ code of line-display character.\n"
- title: Parameter 19 -- Editing service signals.
  contents:
  - "Parameter 19 -- Editing service signals.\n     This determines what is echoed\
    \ to the user when local editing is\n     enabled and the character-delete or\
    \ line-delete character is\n     entered.\n     Code 0 -- Nothing is echoed.\n\
    \     Code 1 -- Editing style is suitable for printing terminals.\n     Code 2\
    \ -- Editing style is suitable for display terminals.\n     Codes 8 and 32-126\
    \ -- Echo that ASCII character for\n               character-delete.\n     X.3\
    \ is specific on handling character- and line-deletion.  If\n     parameter 19\
    \ is 1, echo character-delete with a \"line delete with\n     three X's followed\
    \ by CR LF.  If 2, a character-delete echoes BS\n     SPACE BS, while a line delete\
    \ echoes enough BS SPACE BS's to erase\n     the entire line.  If 8 or 32-126,\
    \ character-delete echoes that\n     character, and line delete echoes XXX CR\
    \ LF.  An extension\n     parameter could override these, selecting other styles\
    \ if desired,\n     though none is proposed here.\n"
- title: Parameter 20 -- Echo mask.
  contents:
  - "Parameter 20 -- Echo mask.\n     When local echoing, parameter 2, is enabled,\
    \ each nonzero bit in\n     this bit-encoded parameter's value suppresses echoing\
    \ of some\n     subset of ASCII characters.  Adding values suppresses echo for\
    \ the\n     union of the specified subsets.\n     Code 0   --  all ASCII characters\
    \ are echoed.\n     Code 1   --  CR is not echoed.\n     Code 2   --  LF is not\
    \ echoed.\n     Code 4   --  VT, HT, and FF are not echoed.\n     Code 8   --\
    \  BEL and BS are not echoed.\n     Code 16  --  ESC and ENQ are not echoed.\n\
    \     Code 32  --  ACK, NAK, STX, SOH, EOT, ETB and ETX are not echoed.\n    \
    \ Code 64  --  Editing characters are not echoed.\n     Code 128 --  other non-printing\
    \ ASCII characters, and DEL, not\n                  echoed.\n     Nothing is echoed\
    \ when parameter 2 is 0.  Some characters should\n     not be echoed regardless\
    \ of parameter 20.  If any of parameters 5,\n     12, or 22 are enabled (non-zero),\
    \ then the XON and XOFF characters\n     should not be echoed.  Nor should the\
    \ escape-to-local command mode\n     character, parameter 1.\n"
- title: Parameter 21 -- Parity.
  contents:
  - "Parameter 21 -- Parity.\n     This parameter determines whether parity is checked\
    \ on user input\n     and generated on output to the user.  Values may be added\
    \ to select\n     both.\n     Code 0 -- Parity neither generated nor checked.\n\
    \     Code 1 -- Even parity checked on input.\n     Code 2 -- Even parity generated\
    \ on output.\n"
- title: Parameter 22 -- Page wait.
  contents:
  - "Parameter 22 -- Page wait.\n     If enabled, this parameter causes the user telnet\
    \ to pause after\n     every N lines of output as if X-OFF had been received.\
    \  Output\n     resumes when X-ON is typed.\n     Code 0 -- No pause.\n     Codes\
    \ 1-255 -- Pause after output of that many line feeds.\n     See also parameters\
    \ 130, 131 and 132.\n"
- title: The following parameters are not part of CCITT X.3, but use the
  contents:
  - 'The following parameters are not part of CCITT X.3, but use the

    '
- title: extension mechanism proposed for this Telnet option.
  contents:
  - 'extension mechanism proposed for this Telnet option.

    '
- title: Parameter 128 -- Extension set number.
  contents:
  - "Parameter 128 -- Extension set number.\n     This parameter selects one of a\
    \ potentially large number of\n     \"extension sets\" -- more or less coherent\
    \ collections of parameters\n     added to the basic X.3 family.  User telnets\
    \ may support several\n     extension sets.  The host may determine whether a\
    \ particular one is\n     supported by trying to set parameter 128.  The user\
    \ telnet should\n     accept the value if it provides some or all of the parameters\
    \ in\n     that set.\n     Extension sets might be defined for a variety of purposes.\
    \  For\n     example, Berkeley UNIX tty emulation, VMS emulation, Telenet's\n\
    \     extended parameters, French national PDN parameters, and so on.\n     Initial\
    \ values need not be specified for extension parameters\n     (i.e., a host should\
    \ explicitly negotiate for their values after\n     selecting an extension set).\
    \  However, it is recommended that\n     default settings give service that resembles\
    \ normal CCITT X.3\n     behavior where possible.\n     Extension sets are mutually\
    \ exclusive.  Different sets may use the\n     same parameters (from 129 through\
    \ 255) for different purposes.\n     Only one extension set is in effect at a\
    \ time.  That is, if a host\n     requests service X from extension set A, then\
    \ switches to extension\n     set B and requests its service Y, it should not\
    \ expect that service\n     X is still being provided.\n     Some values of this\
    \ parameter are reserved:\n     Code 0 -- Null extension set.  Only (a subset\
    \ of) the basic CCITT\n                 X.3 parameters is provided.  Every user\
    \ telnet should\n                 accept this setting.\n     Code 1 -- (A subset\
    \ of) the extension set 1 parameters described\n                 below is provided.\n\
    \     Code 255 -- Reserved for purely local (e.g., to a site), non-\n        \
    \         standard collections of extensions.\n     Other extension sets may be\
    \ proposed and assigned set numbers in\n     the range 2 through 254.\n      \
    \    Set number are registered with the Internet Assigned Numbers\n          Coordinator\
    \ at USC-ISI.  Please contact:\n               Joyce K. Reynolds\n           \
    \    USC Information Sciences Institute\n               Suite 1001\n         \
    \      4676 Admiralty Way\n               Marina del Rey, CA  90292-6695\n   \
    \            213-822-1511   JKReynolds@ISI.EDU\n"
- title: The following parameters form extension set number 1.
  contents:
  - 'The following parameters form extension set number 1.

    '
- title: Parameter 129, extension set 1 -- Word-delete character.
  contents:
  - "Parameter 129, extension set 1 -- Word-delete character.\n     Typing this character\
    \ while local editing is enabled causes the\n     last word in the editing buffer\
    \ to be erased.  Several definitions\n     for a \"word\" are in common use; this\
    \ RFC does not specify one.\n     There should be an indication to the user of\
    \ what was erased.  When\n     editing is disabled, this character is not treated\
    \ specially.\n     Code 0 -- No character has this function.\n     Codes 1 through\
    \ 127 -- ASCII code of word-delete character.\n"
- title: Parameter 130, extension set 1 -- Flow control OFF character.
  contents:
  - "Parameter 130, extension set 1 -- Flow control OFF character.\n     Parameter\
    \ 131, extension set 1 -- Flow control ON character.\n     Typing these characters\
    \ while parameter 12 is enabled cause output\n     to be suspended or resumed,\
    \ respectively.  The user telnet may send\n     them to the user while parameter\
    \ 5 is enabled to ask the user to\n     cease or resume supplying input.\n   \
    \  If defined, these parameters should have default values of 19\n     (ASCII\
    \ DC3) for parameter 130, and 17 (ASCII DC1) for parameter\n     131.\n     Code\
    \ 0 -- No character has this function.\n     Codes 1 through 127 -- Function performed\
    \ by that ASCII code.\n"
- title: Parameter 132, extension set 1 -- Host-to-user flow control convention.
  contents:
  - "Parameter 132, extension set 1 -- Host-to-user flow control convention.\n   \
    \  Some styles of flow control accept only a particular character\n     (e.g.,\
    \ X-ON) to resume output; others resume on receipt of any\n     character.  This\
    \ parameter selects which to use.  The default\n     should be zero, as this matches\
    \ the X.3 convention.\n     Code 0 -- Resume output only when correct character\
    \ is received.\n     Code 1 -- Resume output when any character is received.\n"
- title: Parameter 133, extension set 1 -- Alternate Attention, etc., character.
  contents:
  - "Parameter 133, extension set 1 -- Alternate Attention, etc., character.\n   \
    \  This character serves as a synonym for the Break, Attention, etc.,\n     key\
    \ whose function is given by parameter 7.\n     Code 0 -- No ASCII character has\
    \ this function\n               (there may still be a special key or other mechanism).\n\
    \     Codes 1 through 127 -- ASCII code of the character.\n"
- title: Parameter 134, extension set 1 -- Local echo style.
  contents:
  - "Parameter 134, extension set 1 -- Local echo style.\n     This parameter selects\
    \ how non-printing characters should be\n     echoed, when parameter 2 is set\
    \ to 1.  The default should be zero,\n     where all characters are simply echoed\
    \ as themselves (except\n     possibly carriage return; see parameter 13).\n \
    \    Code 0 -- All characters echo as themselves.\n     Code 1 -- Non-editing\
    \ control characters echo as ^X for some\n               printable character X.\n\
    \     See also parameters 2, Local echo, and 20, Echo mask, which may\n     suppress\
    \ echo of some or all characters regardless of this\n     parameter.\n"
- title: Parameter 135, extension set 1 -- Accept following character as data.
  contents:
  - "Parameter 135, extension set 1 -- Accept following character as data.\n     After\
    \ typing this character, the next character entered is accepted\n     as data\
    \ for transmission to the host even if it would normally have\n     a special\
    \ meaning.\n     The default should be zero.\n     Code 0 -- No character has\
    \ this function.\n     Codes 1 through 127 -- ASCII code of the character.\n"
- title: Parameter 136, extension set 1 -- Character to toggle discarding output.
  contents:
  - "Parameter 136, extension set 1 -- Character to toggle discarding output.\n  \
    \   Typing this character changes the state of parameter 8 (discarding\n     host-to-user\
    \ output) from 0 to 1 or from 1 to 0.  Thus an\n     indeterminate amount of host\
    \ output, received between successive\n     instances of this character, will\
    \ be discarded.\n     As usual, the host should be notified of each change if\
    \ parameter 0\n     is set to 1.  The host might wish to send SET messages at\n\
    \     appropriate points (e.g., preceding command prompts) to re-enable\n    \
    \ output.\n     The default should be zero.\n     Code 0 -- No character performs\
    \ this function (though another\n     mechanism still may do so).\n     Codes\
    \ 1 through 127 -- Typing that character toggles parameter 8.\n"
- title: Parameter 137, extension set 1 -- User-to-host bits per character.
  contents:
  - 'Parameter 137, extension set 1 -- User-to-host bits per character.

    '
- title: Parameter 138, extension set 1 -- Host-to-user bits per character.
  contents:
  - "Parameter 138, extension set 1 -- Host-to-user bits per character.\n     These\
    \ parameters determine whether, for example, a full 8-bit input\n     or output\
    \ data path is available, or whether the most significant\n     bit(s) of input\
    \ or output data is stripped.  Typical values would\n     be 7 or 8.\n     Note\
    \ that an 8-bit data path does not by itself imply transparent\n     input/output;\
    \ CR -> CR LF translation, XON/XOFF interpretation,\n     parity and so on must\
    \ also be disabled to achieve this.\n"
- title: 7.  Subsets, Extensions and Conflicts
  contents:
  - "7.  Subsets, Extensions and Conflicts\n   An option as complex (and easy to extend)\
    \ as this one, needs a policy\n   for what subsets and extensions are allowed,\
    \ and recommendations for\n   negotiating one's way through a maze of partial\
    \ implementations.  In\n   short, what does it mean to say DO or WILL X.3-PAD?\n\
    \   A basic principle is that, since hardly any user telnet\n   implementation\
    \ will provide all possible features, a host cannot\n   expect to get precisely\
    \ any desired kind of service.\n    [This may be an arguable point.  The CCITT\
    \ defines a mandatory\n    subset of supported values for each X.3 parameter,\
    \ with further\n    values optional.  For example, the set of forwarding characters,\n\
    \    parameter 4, must accept at least the values 0 (none), 2 (carriage\n    return),\
    \ and 126 (any control character or DEL).  Though it would be\n    possible to\
    \ adopt the CCITT's set of mandatory values there, I don't\n    think that would\
    \ be desirable for two reasons.\n    First, some of the features specified (e.g.,\
    \ timed input) may be\n    hard to implement in some environments, and may well\
    \ not be\n    necessary for many applications.\n    Second, this option provides\
    \ for definition of entirely new\n    parameters.  Unlike the X.3 case, one peer\
    \ may use parameters whose\n    very existence is unknown to the other.  So one\
    \ cannot specify\n    mandatory or default values for ALL parameters.]\n   On\
    \ the other hand, a host is at least entitled to know what kind of\n   service\
    \ is being provided to the ultimate user.  A user telnet's\n   status report may\
    \ be incomplete (not describing features its\n   implementor did not know of);\
    \ it may not describe the style of\n   interaction the host (or user, or application)\
    \ would wish for, but it\n   should at least describe reality.\n   For telnet\
    \ parameters with a range of possible values, if a user\n   telnet implements\
    \ only one \"enabled\" and one \"disabled\" value, it\n   should choose the \"\
    enabled\" value when asked for a setting it cannot\n   supply.  A VMS telnet,\
    \ for example, might allow only DEL or nothing\n   as the character-delete code.\
    \  If a host asks it to use \"backspace\",\n   it should choose DEL rather than\
    \ nothing. The host may then interpret\n   this contrary behavior as indicating\
    \ a preferred value.\n   The problem of conflicting parameters, where several\
    \ parameters\n   control overlapping services and may conflict, is a serious one.\
    \ The\n   extension set scheme (see parameter 128) is intended to limit the\n\
    \   problem.  Each extension set's parameters should be selfconsistent\n   and\
    \ consistent with the CCITT X.3 parameters, but separate extension\n   sets need\
    \ not be concerned with each other's parameters.\n   Where parameters might conflict,\
    \ it is important to specify priority\n   as part of the parameters' description.\
    \  For example, among\n   parameters 2 (Local echo), 20 (Echo mask), and extension\
    \ set 1's 134\n   (Local echo style), Echo mask is significant only if Local echo\
    \ is\n   enabled, and Local echo style applies only to characters selected for\n\
    \   echoing by the first two parameters.\n   This option's functions overlap with\
    \ those of some existing Telnet\n   options, for example, ECHO (which can be interpreted\
    \ to affect local\n   echo and possibly local line editing), NAOCRD and NAOLFD\
    \ [6]\n   (specifying padding after output carriage returns and line feeds),\n\
    \   TRANSMIT-BINARY, Remote Controlled Transmission and Echo [3], and\n   SUPDUP\
    \ [4].\n   Where X.3-PAD completely subsumes the function of another option, as\n\
    \   for ECHO, NAOCRD and NAOLFD, it's probably best to let the X.3-PAD\n   option,\
    \ where acceptable to both sides, supplant them and to refuse\n   the other option.\n\
    \   The TRANSMIT-BINARY option can change (actually suppress) the\n   interpretation\
    \ of some bits of parameter 13 related to Telnet newline\n   encoding, as mentioned\
    \ under that parameter.  As such it is\n   compatible with this option but must\
    \ be kept in mind.\n   RCTE would be a much more difficult case, since its service\
    \ does not\n   fit into this option's scheme and vice versa.  However, it probably\n\
    \   is unimportant because of the scarcity of RCTE implementations.\n   Some existing\
    \ Telnet options can serve related but complementary\n   functions, for example\
    \ NAOHTS [7] for output tab handling, or\n   TERMINAL-TYPE [8].\n"
- title: 8.  Implementation suggestions
  contents:
  - "8.  Implementation suggestions\n     It is strongly recommended that a user telnet\
    \ support at least the\n     combination with parameters 2=0, 3=126, and 4=1 (no\
    \ local echo,\n     forward immediately or nearly so on any input character) so\
    \ that a\n     dissatisfied host has the option of backing off and doing its own\n\
    \     character handling.\n     The \"discard output\" function invoked by the\
    \ Break, Interrupt,\n     Attention, etc., key if the 16's bit is set in parameter\
    \ 7 may be\n     implemented as follows.\n           1.  When the key is pressed,\
    \ set parameter 8 to 1, begin\n               discarding output, send IAC SB X.3-PAD\
    \ IS  8 1  IAC SE to\n               notify the host.  (It may not need to know,\
    \ but the\n               message should be sent for consistency.)\n         \
    \  2.  Send IAC DO TIMING-MARK.\n           3.  Send any other messages associated\
    \ with the key (e.g.,\n               IAC IP).\n           4.  Eventually, the\
    \ host should send either IAC WILL\n               TIMING-MARK or IAC WON'T TIMING-MARK,\
    \ even if it knows\n               nothing about the TIMING-MARK option.  It will\
    \ probably\n               appear close, in the output stream, to the point where\n\
    \               the host recognized any associated messages (e.g., IP).\n    \
    \           When the TIMING-MARK arrives, reset parameter 8 to 0 and\n       \
    \        cease discarding output.  Send IAC SB X.3-PAD IS  8 0\n             \
    \  IAC SE.\n   The Telnet SYNCH mechanism (see [2]) may be employed in concert\
    \ with\n   such a scheme.  A closed-loop flush, though, will be more effective\n\
    \   at discarding excess output than SYNCH used alone.  Provision of some\n  \
    \ such mechanism for discarding unwanted output, e.g., after\n   interrupting\
    \ the host, is heartily recommended.\n   Discarding input is less clear cut. \
    \ Certainly, any buffered data not\n   yet sent should be discarded; one might\
    \ also use SYNCH to encourage\n   the host telnet to discard more.\n"
- title: 9.  References
  contents:
  - "9.  References\n     1.  Recommendation X.3, from International Telecommunications\
    \ Union\n         CCITT Red Book, volume VIII, fascicle VIII.2, 1984.\n     2.\
    \  Postel, J., and J. Reynolds, \"Telnet Protocol Specification\",\n         RFC-854,\
    \ USC Information Sciences Institute, May 1983.\n     3.  Postel, J., and D. Crocker,\
    \ \"Remote Controlled Transmission and\n         Echoing Telnet Option\", RFC-726\
    \ and NIC-39237, SRI-ARC, March\n         1977.\n     4.  Crispin, M., \"SUPDUP\
    \ Protocol\", RFC-734 and NIC-41953, SU-AI\n         October 1977; Crispin, M.,\
    \ \"Telnet SUPDUP Option\", RFC-736 and\n         NIC-42213, SU-AI, October 1977;\
    \ also Greenberg, B., \"Telnet\n         SUPDUP-OUTPUT Option\", RFC-749 and NIC-45499,\
    \ MIT-Multics,\n         September 1978.\n     5.  Postel, J., and J. Reynolds,\
    \ \"Telnet Binary Transmission\n         Option\", RFC-856, USC Information Sciences\
    \ Institute, May 1983.\n     6.  Crocker, D., \"Telnet Output Linefeed Disposition\
    \ Option\", RFC-\n         658 and NIC-31161, UCLA-NMC, October 1974; and \"Telnet\
    \ Output\n         Carriage Return Disposition Option\", RFC-652 and NIC-31155,\n\
    \         UCLA-NMC, October 1974.\n     7.  Crocker, D., \"Telnet Output Horizontal\
    \ Tab Stops Option\", RFC-\n         653 and NIC-31156, UCLA-NMC, October 1974.\
    \  [RFC numbers 652\n         through 658 (NIC 31155 through 31161) are in a similar\
    \ vein.]\n     8.  Solomon, M., and E. Wimmers, \"Telnet Terminal Type Option\"\
    ,\n         RFC-884, University of Wisconsin - Madison, December 1983.\n"
