- title: __initial_text__
  contents:
  - "                    Generic Packet Tunneling in IPv6\n                      \
    \       Specification\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines the model and generic mechanisms for IPv6\n\
    \   encapsulation of Internet packets, such as IPv6 and IPv4.  The model\n   and\
    \ mechanisms can be applied to other protocol packets as well, such\n   as AppleTalk,\
    \ IPX, CLNP, or others.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n       6.3 IPv6 Tunnel Hop Limit...................................19\n\
    \       6.4 IPv6 Tunnel Packet Traffic Class........................20\n     \
    \  6.5 IPv6 Tunnel Flow Label..................................20\n       6.6\
    \ IPv6 Tunnel Encapsulation Limit.........................20\n       6.7 IPv6\
    \ Tunnel MTU.........................................20\n   7. IPv6 Tunnel Packet\
    \ Size Issues...............................21\n       7.1 IPv6 Tunnel Packet\
    \ Fragmentation........................21\n       7.2 IPv4 Tunnel Packet Fragmentation........................22\n\
    \   8. IPv6 Tunnel Error Reporting and Processing...................22\n     \
    \  8.1 Tunnel ICMP Messages....................................27\n       8.2\
    \ ICMP Messages for IPv6 Original Packets.................28\n       8.3 ICMP\
    \ Messages for IPv4 Original Packets.................29\n       8.4 ICMP Messages\
    \ for Nested Tunnel Packets.................30\n   9. Security Considerations......................................30\n\
    \   10. Acknowledgments.............................................31\n   11.\
    \ References..................................................31\n   Authors'\
    \ Addresses..............................................32\n   Appendix A. Risk\
    \ Factors in Recursive Encapsulation.............33\n   Full Copyright Statement........................................36\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This document specifies a method and generic mechanisms by\
    \ which a\n   packet is encapsulated and carried as payload within an IPv6 packet.\n\
    \   The resulting packet is called an IPv6 tunnel packet. The forwarding\n   path\
    \ between the source and destination of the tunnel packet is\n   called an IPv6\
    \ tunnel. The technique is called IPv6 tunneling.\n   A typical scenario for IPv6\
    \ tunneling is the case in which an\n   intermediate node exerts explicit routing\
    \ control by specifying\n   particular forwarding paths for selected packets.\
    \  This control is\n   achieved by prepending IPv6 headers to each of the selected\
    \ original\n   packets. These prepended headers identify the forwarding paths.\n\
    \   In addition to the description of generic IPv6 tunneling mechanisms,\n   which\
    \ is the focus of this document, specific mechanisms for\n   tunneling IPv6 and\
    \ IPv4 packets are also described herein.\n   The keywords MUST, MUST NOT, MAY,\
    \ OPTIONAL, REQUIRED, RECOMMENDED,\n   SHALL, SHALL NOT, SHOULD, SHOULD NOT are\
    \ to be interpreted as defined\n   in RFC 2119.\n"
- title: 2. Terminology
  contents:
  - "2. Terminology\n   original packet\n        a packet that undergoes encapsulation.\n\
    \   original header\n        the header of an original packet.\n   tunnel\n  \
    \      a forwarding path between two nodes on which the payloads of\n        packets\
    \ are original packets.\n   tunnel end-node\n        a node where a tunnel begins\
    \ or ends.\n   tunnel header\n        the header prepended to the original packet\
    \ during\n        encapsulation.  It specifies the tunnel end-points as source\
    \ and\n        destination.\n   tunnel packet\n        a packet that encapsulates\
    \ an original packet.\n   tunnel entry-point\n        the tunnel end-node where\
    \ an original packet is encapsulated.\n   tunnel exit-point\n        the tunnel\
    \ end-node where a tunnel packet is decapsulated.\n   IPv6 tunnel\n        a tunnel\
    \ configured as a virtual link between two IPv6 nodes, on\n        which the encapsulating\
    \ protocol is IPv6.\n   tunnel MTU\n        the maximum size of a tunnel packet\
    \ payload without requiring\n        fragmentation, that is, the Path MTU between\
    \ the tunnel entry-\n        point and the tunnel exit-point nodes minus the size\
    \ of the\n        tunnel header.\n   tunnel hop limit\n        the maximum number\
    \ of hops that a tunnel packet can travel from\n        the tunnel entry-point\
    \ to the tunnel exit-point.\n   inner tunnel\n        a tunnel that is a hop (virtual\
    \ link) of another tunnel.\n   outer tunnel\n        a tunnel containing one or\
    \ more inner tunnels.\n   nested tunnel packet\n        a tunnel packet that has\
    \ as payload a tunnel packet.\n   nested tunnel header\n        the tunnel header\
    \ of a nested tunnel packet.\n   nested encapsulation\n        encapsulation of\
    \ an encapsulated packet.\n   recursive encapsulation\n        encapsulation of\
    \ a packet that reenters a tunnel before exiting\n        it.\n   tunnel encapsulation\
    \ limit\n        the maximum number of nested encapsulations of a packet.\n"
- title: 3. IPv6 Tunneling
  contents:
  - "3. IPv6 Tunneling\n   IPv6 tunneling is a technique for establishing a \"virtual\
    \ link\"\n   between two IPv6 nodes for transmitting data packets as payloads\
    \ of\n   IPv6 packets (see Fig.1).  From the point of view of the two nodes,\n\
    \   this \"virtual link\", called an IPv6 tunnel, appears as a point to\n   point\
    \ link on which IPv6 acts like a link-layer protocol.  The two\n   IPv6 nodes\
    \ play specific roles.  One node encapsulates original\n   packets received from\
    \ other nodes or from itself and forwards the\n   resulting tunnel packets through\
    \ the tunnel.  The other node\n   decapsulates the received tunnel packets and\
    \ forwards the resulting\n   original packets towards their destinations, possibly\
    \ itself. The\n   encapsulator node is called the tunnel entry-point node, and\
    \ it is\n   the source of the tunnel packets. The decapsulator node is called\
    \ the\n   tunnel exit-point, and it is the destination of the tunnel packets.\n\
    \   Note:\n   This document refers in particular to tunnels between two nodes\n\
    \   identified by unicast addresses - such tunnels look like \"virtual\n   point\
    \ to point links\". The mechanisms described herein apply also to\n   tunnels\
    \ in which the exit-point nodes are identified by other types\n   of addresses,\
    \ such as anycast or multicast.  These tunnels may look\n   like \"virtual point\
    \ to multipoint links\". At the time of writing this\n   document, IPv6 anycast\
    \ addresses are a subject of ongoing\n   specification and experimental work.\n\
    \                   Tunnel from node B to node C\n                    <---------------------->\n\
    \                 Tunnel                     Tunnel\n                 Entry-Point\
    \                Exit-Point\n                 Node                       Node\n\
    \  +-+            +-+                        +-+            +-+\n  |A|-->--//-->--|B|=====>=====//=====>=====|C|-->--//-->--|D|\n\
    \  +-+            +-+                        +-+            +-+\n  Original  \
    \                                               Original\n  Packet           \
    \                                        Packet\n  Source                    \
    \                               Destination\n  Node                          \
    \                           Node\n                          Fig.1 Tunnel\n   An\
    \ IPv6 tunnel is a unidirectional mechanism - tunnel packet flow\n   takes place\
    \ in one direction between the IPv6 tunnel entry-point and\n   exit-point nodes\
    \ (see Fig.1).\n                   Tunnel from Node B to Node C\n            \
    \        <------------------------>\n                 Tunnel                 \
    \     Tunnel\n  Original       Entry-Point                 Exit-Point     Original\n\
    \  Packet         Node                        Node           Packet\n  Source\
    \                                                    Destination\n  Node     \
    \                                                 Node\n  +-+            +-+ \
    \                        +-+            +-+\n  | |-->--//-->--| |=====>=====//=====>======|\
    \ |-->--//-->--| |\n  |A|            |B|                         |C|         \
    \   |D|\n  | |--<--//--<--| |=====<=====//=====<======| |--<--//--<--| |\n  +-+\
    \            +-+                         +-+            +-+\n  Original      \
    \                                            Original\n  Packet              \
    \                                      Packet\n  Destination    Tunnel       \
    \               Tunnel         Source\n  Node           Exit-Point           \
    \       Entry-Point    Node\n                 Node                        Node\n\
    \                   <------------------------->\n                  Tunnel from\
    \ Node C to Node B\n              Fig.2 Bi-directional Tunneling Mechanism\n \
    \  Bi-directional tunneling is achieved by merging two unidirectional\n   mechanisms,\
    \ that is, configuring two tunnels, each in opposite\n   direction to the other\
    \ - the entry-point node of one tunnel is the\n   exit-point node of the other\
    \ tunnel (see Fig.2).\n"
- title: 3.1 IPv6 Encapsulation
  contents:
  - "3.1 IPv6 Encapsulation\n   IPv6 encapsulation consists of prepending to the original\
    \ packet an\n   IPv6 header and, optionally, a set of IPv6 extension headers (see\n\
    \   Fig.3), which are collectively called tunnel IPv6 headers.  The\n   encapsulation\
    \ takes place in an IPv6 tunnel entry-point node, as the\n   result of an original\
    \ packet being forwarded onto the virtual link\n   represented by the tunnel.\
    \ The original packet is processed during\n   forwarding according to the forwarding\
    \ rules of the protocol of that\n   packet. For instance if the original packet\
    \ is an:\n    (a)  IPv6 packet, the IPv6 original header hop limit is  decremented\n\
    \         by one.\n    (b)  IPv4 packet, the IPv4 original header time to live\
    \ field (TTL)\n         is decremented by one.\n   At encapsulation, the source\
    \ field of the tunnel IPv6 header is\n   filled with an IPv6 address of the tunnel\
    \ entry-point node, and the\n   destination field with an IPv6 address of the\
    \ tunnel exit-point.\n   Subsequently, the tunnel packet resulting from encapsulation\
    \ is sent\n   towards the tunnel exit-point node.\n                          \
    \  +----------------------------------//-----+\n                            |\
    \ Original |                              |\n                            |   \
    \       |   Original Packet Payload    |\n                            | Header\
    \   |                              |\n                            +----------------------------------//-----+\n\
    \                             <            Original Packet            >\n    \
    \                                          |\n                               \
    \               v\n       <Tunnel IPv6 Headers> <       Original Packet      \
    \           >\n      +---------+ - - - - - +-------------------------//--------------+\n\
    \      | IPv6    | IPv6      |                                         |\n   \
    \   |         | Extension |        Original Packet                  |\n      |\
    \ Header  | Headers   |                                         |\n      +---------+\
    \ - - - - - +-------------------------//--------------+\n       <            \
    \              Tunnel IPv6 Packet                 >\n                       Fig.3\
    \ Encapsulating a Packet\n   Tunnel extension headers should appear in the order\
    \ recommended by\n   the specifications that define the extension headers, such\
    \ as [IPv6-\n   Spec].\n   A source of original packets and a tunnel entry-point\
    \ that\n   encapsulates those packets can be the same node.\n"
- title: 3.2 Packet Processing in Tunnels
  contents:
  - "3.2 Packet Processing in Tunnels\n   The intermediate nodes in the tunnel process\
    \ the IPv6 tunnel packets\n   according to the IPv6 protocol.  For example, a\
    \ tunnel Hop by Hop\n   Options extension header is processed by each receiving\
    \ node in the\n   tunnel; a tunnel Routing extension header identifies the intermediate\n\
    \   processing nodes, and controls at a finer granularity the forwarding\n   path\
    \ of the tunnel packet through the tunnel; a tunnel Destination\n   Options extension\
    \ header is processed at the tunnel exit-point node.\n"
- title: 3.3 IPv6 Decapsulation
  contents:
  - "3.3 IPv6 Decapsulation\n   Decapsulation is graphically shown in Fig.4:\n   \
    \  +---------+- - - - - -+----------------------------------//-----+\n     | IPv6\
    \    | IPv6      |                                         |\n     |         |\
    \ Extension |        Original Packet                  |\n     | Header  | Headers\
    \   |                                         |\n     +---------+- - - - - -+----------------------------------//-----+\n\
    \      <                      Tunnel IPv6 Packet                     >\n     \
    \                                 |\n                                      v\n\
    \                           +----------------------------------//-----+\n    \
    \                       | Original |                              |\n        \
    \                   |          |   Original Packet Payload    |\n            \
    \               | Headers  |                              |\n                \
    \           +----------------------------------//-----+\n                    \
    \        <            Original Packet            >\n                     Fig.4\
    \ Decapsulating a Packet\n   Upon receiving an IPv6 packet destined to an IPv6\
    \ address of a tunnel\n   exit-point node, its IPv6 protocol layer processes the\
    \ tunnel\n   headers. The strict left-to-right processing rules for extension\n\
    \   headers is applied. When processing is complete, control is handed to\n  \
    \ the next protocol engine, which is identified by the Next Header\n   field value\
    \ in the last header processed. If this is set to a tunnel\n   protocol value,\
    \ the tunnel protocol engine discards the tunnel\n   headers and passes the resulting\
    \ original packet to the Internet or\n   lower layer protocol identified by that\
    \ value for further processing.\n   For example, in the case the Next Header field\
    \ has the IPv6 Tunnel\n   Protocol value, the resulting original packet is passed\
    \ to the IPv6\n   protocol layer.\n   The tunnel exit-point node, which decapsulates\
    \ the tunnel packets,\n   and the destination node, which receives the resulting\
    \ original\n   packets can be the same node.\n"
- title: 3.4 IPv6 Tunnel Protocol Engine
  contents:
  - "3.4 IPv6 Tunnel Protocol Engine\n   Packet flow (paths #1-7) through the IPv6\
    \ Tunnel Protocol Engine on a\n   node is graphically shown in Fig.5:\n   Note:\n\
    \   In Fig.5, the Upper-Layer Protocols box represents transport\n   protocols\
    \ such as TCP, UDP, control protocols such as ICMP, routing\n   protocols such\
    \ as OSPF, and internet or lower-layer protocol being\n   \"tunneled\" over IPv6,\
    \ such as IPv4, IPX, etc.  The Link-Layer\n   Protocols box represents Ethernet,\
    \ Token Ring, FDDI, PPP, X.25, Frame\n   Relay, ATM, etc..., as well as internet\
    \ layer \"tunnels\" such as IPv4\n   tunnels.\n   The IPv6 tunnel protocol engine\
    \ acts as both an \"upper-layer\" and a\n   \"link-layer\", each with a specific\
    \ input and output as follows:\n   (u.i) \"tunnel upper-layer input\" - consists\
    \ of  tunnel  IPv6  packets\n         that are going to be decapsulated.  The\
    \ tunnel packets are\n         incoming through the IPv6 layer from:\n       \
    \  (u.i.1) a link-layer - (path #1, Fig.5)\n                 These are tunnel\
    \ packets destined to this node and will\n                 undergo decapsulation.\n\
    \         (u.i.2) a tunnel link-layer - (path #7, Fig.5)\n                 These\
    \ are tunnel packets that underwent one or more\n                 decapsulations\
    \ on this node, that is, the packets had\n                 one or more nested\
    \ tunnel headers and one nested tunnel\n                 header was just discarded.\
    \ This node is the exit-point\n                 of both an outer tunnel and one\
    \ or more of its inner\n                 tunnels.\n         For both above cases\
    \ the resulting original packets are passed\n         back to the IPv6 layer as\
    \ \"tunnel link-layer\" output for\n         further processing (see b.2).\n \
    \     +-----------------------+   +-----------------------------------+\n    \
    \  | Upper-Layer Protocols |   | IPv6 Tunnel Upper-Layer           |\n      |\
    \                       |   |                                   |\n      |   \
    \                    |   | ---<-------------------<-------   |\n      |      \
    \                 |   | | ---->---|------>---------   |   |\n      |         \
    \              |   | | |       | |             |   |   |\n      +-----------------------+\
    \   +-----------------------+   |   |   |\n         | |             | |      \
    \  | |       | |         |   v   ^   |\n         v ^             v ^        v\
    \ ^       v ^  Tunnel |   |   |   |\n         | |             | |        | | \
    \      | |  Packets|   |   |   |\n      +---------------------------------------------+\
    \     |   |   |   |\n      |  | |             | |       / /        | |   |   \
    \  |   D   E   |\n      |  v ^    IPv6     | --<-3--/-/--<----  | |   |     |\
    \   E   N   |\n      |  | |    Layer    ---->-4-/-/--->-- |  | |   |     |   C\
    \   C   |\n      |  v ^                    / /      | |  | |   |     |   A   A\
    \   |\n      |  | |                   2 1       | |  | |   |     |   P   P   |\n\
    \      |  v ^     -----<---5---/-/-<----  v ^  v ^   |     |   S   S   |\n   \
    \   |  | |     | -->---6---/-/-->-- |  | |  | |   |     |   U   U   |\n      |\
    \  v ^     | |        / /     6 5  4 3  8 7   |     |   L   L   |\n      |  |\
    \ |     | |       / /      | |  | |  | |   |     |   A   A   |\n      |  v ^ \
    \    v ^      / /       v ^  | |  | |   |     |   T   T   |\n      +---------------------------------------------+\
    \     |   E   E   |\n         | |     | |     | |        | |  | |  | |       \
    \  |   |   |   |\n         v ^     v ^     v ^        v ^  v ^  v ^ Original|\
    \   |   |   |\n         | |     | |     | |        | |  | |  | | Packets |   v\
    \   ^   |\n      +-----------------------+   +-----------------------+   |   |\
    \   |\n      |                       |   | | |  | |  | |             |   |   |\n\
    \      |                       |   | | ---|----|-------<--------   |   |\n   \
    \   |                       |   | --->--------------->------>----   |\n      |\
    \                       |   |                                   |\n      | Link-Layer\
    \ Protocols  |   | IPv6 Tunnel Link-Layer            |\n      +-----------------------+\
    \   +-----------------------------------+\n     Fig.5 Packet Flow in the IPv6\
    \ Tunneling Protocol Engine on a Node\n   (u.o) \"tunnel upper-layer output\"\
    \ - consists of tunnel IPv6 packets\n         that are passed through the IPv6\
    \ layer down to:\n         (u.o.1) a link-layer - (path #2, Fig.5)\n         \
    \        These packets underwent encapsulation and are sent\n                \
    \ towards the tunnel exit-point\n         (u.o.2) a tunnel link-layer - (path\
    \ #8, Fig.5)\n                 These tunnel packets undergo nested encapsulation.\n\
    \                 This node is the entry-point node of both an outer\n       \
    \          tunnel and one or more of its inner tunnel.\n   Implementation Note:\n\
    \   The tunnel upper-layer input and output can be implemented similar\n   to\
    \ the input and output of the other upper-layer protocols.\n   The tunnel link-layer\
    \ input and output are as follows:\n   (l.i) \"tunnel link-layer input\" - consists\
    \ of original IPv6  packets\n         that are going to be encapsulated.\n   \
    \      The original packets are incoming through the IPv6 layer from:\n      \
    \   (l.i.1) an upper-layer - (path #4, Fig.5)\n                 These are original\
    \ packets originating on this node\n                 that undergo encapsulation.\
    \ The original packet source\n                 and tunnel entry-point are the\
    \ same node.\n         (l.i.2) a link-layer - (path #6, Fig.5)\n             \
    \    These are original packets incoming from a different\n                 node\
    \ that undergo encapsulation on this tunnel entry-\n                 point node.\n\
    \         (l.i.3) a tunnel upper-layer - (path #8, Fig.5)\n                 These\
    \ packets are tunnel packets that undergo nested\n                 encapsulation.\
    \  This node is the entry-point node of\n                 both an outer tunnel\
    \ and one or more of its inner\n                 tunnels.\n         The resulting\
    \ tunnel packets are passed as tunnel  upper-layer\n         output packets through\
    \ the IPv6 layer (see u.o) down to:\n   (l.o) \"tunnel link-layer output\" - consists\
    \ of original IPv6 packets\n   resulting from decapsulation. These packets are\
    \ passed through the\n   IPv6 layer to:\n   (l.o.1) an upper-layer - (path #3,\
    \ Fig.5)\n                 These original packets are destined to this node.\n\
    \         (l.o.2) a link-layer - (path #5, Fig.5)\n                 These original\
    \ packets are destined to another node;\n                 they are transmitted\
    \ on a link towards their\n                 destination.\n         (l.o.3) a tunnel\
    \ upper-layer - (path #7, Fig.5)\n                 These packets undergo another\
    \ decapsulation; they were\n                 nested tunnel packets.  This node\
    \ is both the exit-\n                 point node of an outer tunnel and one or\
    \ more inner\n                 tunnels.\n      Implementation Note:\n      The\
    \ tunnel link-layer input and output can be implemented similar\n      to the\
    \ input and output of other link-layer protocols, for\n      instance, associating\
    \ an interface or pseudo-interface with the\n      IPv6 tunnel.\n      The selection\
    \ of the \"IPv6 tunnel link\" over other links results\n      from the packet\
    \ forwarding decision taken based on the content of\n      the node's routing\
    \ table.\n"
- title: 4. Nested Encapsulation
  contents:
  - "4. Nested Encapsulation\n   Nested IPv6 encapsulation is the encapsulation of\
    \ a tunnel packet.\n   It takes place when a hop of an IPv6 tunnel is a tunnel.\
    \ The tunnel\n   containing a tunnel is called an outer tunnel. The tunnel contained\n\
    \   in the outer tunnel is called an inner tunnel - see Fig.6. Inner\n   tunnels\
    \ and their outer tunnels are nested tunnels.\n   The entry-point node of an \"\
    inner IPv6 tunnel\" receives tunnel IPv6\n   packets encapsulated by the \"outer\
    \ IPv6 tunnel\" entry-point node. The\n   \"inner tunnel entry-point node\" treats\
    \ the receiving tunnel packets\n   as original packets and performs encapsulation.\
    \  The resulting\n   packets are \"tunnel packets\" for the \"inner IPv6 tunnel\"\
    , and \"nested\n   tunnel packets\" for the \"outer IPv6 tunnel\".\n         \
    \        Outer Tunnel\n                 <------------------------------------->\n\
    \                 <--links--><-virtual link-><--links--->\n                  \
    \            Inner Tunnel\n             Outer Tunnel                         \
    \ Outer Tunnel\n             Entry-Point                           Exit-Point\n\
    \             Node                                  Node\n  +-+        +-+   \
    \     +-+            +-+         +-+        +-+\n  | |        | |        | | \
    \           | |         | |        | |\n  | |->-//->-| |=>=//=>=| |**>**//**>**|\
    \ |=>=//=>==| |->-//->-| |\n  | |        | |        | |            | |       \
    \  | |        | |\n  +-+        +-+        +-+            +-+         +-+    \
    \    +-+\n"
- title: Original                Inner Tunnel   Inner Tunnel         Original
  contents:
  - 'Original                Inner Tunnel   Inner Tunnel         Original

    '
- title: Packet                  Entry-Point    Exit-Point           Packet
  contents:
  - 'Packet                  Entry-Point    Exit-Point           Packet

    '
- title: Source                  Node           Node                 Destination
  contents:
  - 'Source                  Node           Node                 Destination

    '
- title: Node                                                        Node
  contents:
  - "Node                                                        Node\n          \
    \            Fig.6. Nested Encapsulation\n"
- title: 4.1 Limiting Nested Encapsulation
  contents:
  - "4.1 Limiting Nested Encapsulation\n   A tunnel IPv6 packet is limited to the\
    \ maximum IPv6 packet size\n   [IPv6-Spec].  Each encapsulation adds to the size\
    \ of an encapsulated\n   packet the size of the tunnel IPv6 headers. Consequently,\
    \ the number\n   of tunnel headers, and therefore, the number of nested encapsulations\n\
    \   is limited by the maximum packet size.  However this limit is so\n   large\
    \ (more than 1600 encapsulations for an original packet of\n   minimum size) that\
    \ it is not an effective limit in most cases.\n   The increase in the size of\
    \ a tunnel IPv6 packet due to nested\n   encapsulations may require fragmentation\
    \ [IPv6-Spec] at a tunnel\n   entry point - see section 7.  Furthermore, each\
    \ fragmentation, due to\n   nested encapsulation, of an already fragmented tunnel\
    \ packet results\n   in a doubling of the number of fragments.  Moreover, it is\
    \ probable\n   that once this fragmentation begins, each new nested encapsulation\n\
    \   results in yet additional fragmentation.  Therefore limiting nested\n   encapsulation\
    \ is recommended.\n   The proposed mechanism for limiting excessive nested encapsulation\
    \ is\n   a \"Tunnel Encapsulation Limit\" option, which is carried in an IPv6\n\
    \   Destination Options extension header accompanying an encapsulating\n   IPv6\
    \ header.\n"
- title: 4.1.1 Tunnel Encapsulation Limit Option
  contents:
  - "4.1.1 Tunnel Encapsulation Limit Option\n   A tunnel entry-point node may be\
    \ configured to include a Tunnel\n   Encapsulation Limit option as part of the\
    \ information prepended to\n   all packets entering a tunnel at that node.  The\
    \ Tunnel Encapsulaton\n   Limit option is carried in a Destination Options extension\
    \ header\n   [IPv6-Spec] placed between the encapsulating IPv6 header and the\
    \ IPv6\n   header of the original packet.  (Other IPv6 extension headers may\n\
    \   also be present preceding or following the Destination Options\n   extension\
    \ header, depending on configuration information at the\n   tunnel entry-point\
    \ node.)\n   The Tunnel Encapsulation Limit option specifies how many additional\n\
    \   levels of encapsulation are permitted to be prepended to the packet\n   --\
    \ or, in other words, how many further levels of nesting the packet\n   is permitted\
    \ to undergo -- not counting the encapsulation in which\n   the option itself\
    \ is contained.  For example, a Tunnel Encapsulation\n   Limit option containing\
    \ a limit value of zero means that a packet\n   carrying that option may not enter\
    \ another tunnel before exiting the\n   current tunnel.\n   The Tunnel Encapsulation\
    \ Limit option has the following format:\n      Option Type     Opt Data Len \
    \  Opt Data Len\n    0 1 2 3 4 5 6 7\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0 0 0 0 0 1 0 0|       1       | Tun Encap Lim |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Option Type decimal value 4\n                       - the highest-order\
    \ two bits - set to 00 -\n                       indicate \"skip over this option\
    \ if the option is\n                       not recognized\".\n               \
    \         - the third-highest-order bit - set to 0 -\n                       indicates\
    \ that the option data in this option\n                       does not change\
    \ en route to the packet's\n                       destination [IPv6-Spec].\n\
    \      Opt Data Len value 1 - the data portion of the Option is one octet\n  \
    \                     long.\n      Opt Data Value the Tunnel Encapsulation Limit\
    \ value - 8-bit\n                       unsigned integer specifying how many further\n\
    \                       levels of encapsulation are permitted for the\n   Tunnel\
    \ Encapsulation Limit options are of interest only to tunnel\n   entry points.\
    \  A tunnel entry-point node is required to execute the\n   following procedure\
    \ for every packet entering a tunnel at that node:\n        (a)  Examine the packet\
    \ to see if a Tunnel  Encapsulation  Limit\n             option is present following\
    \ its IPv6 header.  The headers\n             following the IPv6 header must be\
    \ examined in strict\n             \"left-to-right\" order, with the examination\
    \ stopping as\n             soon as any one of the following headers is encountered:\n\
    \             (i) a Destination Options extension header containing a\n      \
    \       Tunnel Encapsulation Limit, (ii) another IPv6 header, (iii)\n        \
    \     a non-extension header, such as TCP, UDP, or ICMP, or (iv)\n           \
    \  a header that cannot be parsed because it is encrypted or\n             its\
    \ type is unknown.  (Note that this requirment is an\n             exception to\
    \ the general IPv6 rule that a Destination\n             Options extension header\
    \ need only be examined by a\n             packet's destination node.  An alternative\
    \ and \"cleaner\"\n             approach would have been to use a Hop-by-Hop extension\n\
    \             header for this purpose, but that would have imposed an\n      \
    \       undesirable extra processing burden, and possible\n             consequent\
    \ extra delay, at every IPv6 node along the path\n             of a tunnel.)\n\
    \        (b) If a Tunnel Encapsulation Limit option is found in the\n        \
    \     packet entering the tunnel and its limit value is zero, the\n          \
    \   packet is discarded and an ICMP Parameter Problem message\n             [ICMP-Spec]\
    \ is sent to the source of the packet, which is\n             the previous tunnel\
    \ entry-point node.  The Code field of\n             the Parameter Problem message\
    \ is set to zero (\"erroneous\n             header field encountered\") and the\
    \ Pointer field is set to\n             point to the third octet of the Tunnel\
    \ Encapsulation Limit\n             option (i.e., the octet containing the limit\
    \ value of\n             zero).\n        (c) If a Tunnel Encapsulation Limit option\
    \ is found in the\n             packet entering the tunnel and its limit value\
    \ is non-zero,\n             an additional Tunnel Encapsulation Limit option must\
    \ be\n             included as part of the encapsulating headers being added\n\
    \             at this entry point.  The limit value in the encapsulating\n   \
    \          option is set to one less than the limit value found in the\n     \
    \        packet being encapsulated.\n        (d) If a Tunnel Encapsulation Limit\
    \ option is not found in the\n             packet entering the tunnel and if an\
    \ encapsulation limit\n             has been configured for this tunnel, a Tunnel\
    \ Encapsulation\n             Limit option must be included as part of the encapsulating\n\
    \             headers being added at this entry point.  The limit value\n    \
    \         in the option is set to the configured limit.\n        (e)  If a Tunnel\
    \ Encapsulation Limit option is not found in  the\n             packet  entering\
    \  the  tunnel and if no encapsulation limit\n             has  been  configured\
    \  for  this  tunnel,  then  no  Tunnel\n             Encapsulation  Limit  option\
    \  is  included  as  part of the\n             encapsulating headers being added\
    \ at this entry point.\n   A Tunnel Encapsulation Limit option added at a tunnel\
    \ entry-point\n   node is removed as part of the decapsulation process at that\
    \ tunnel's\n   exit-point node.\n   Two cases of encapsulation that should be\
    \ avoided are described\n   below:\n"
- title: 4.1.2 Loopback Encapsulation
  contents:
  - "4.1.2 Loopback Encapsulation\n   A particular case of encapsulation which must\
    \ be avoided is the\n   loopback encapsulation.  Loopback encapsulation takes\
    \ place when a\n   tunnel IPv6 entry-point node encapsulates tunnel IPv6 packets\n\
    \   originated from itself, and destined to itself.  This can generate an\n  \
    \ infinite processing loop in the entry-point node.\n   To avoid such a case,\
    \ it is recommended that an implementation have a\n   mechanism that checks and\
    \ rejects the configuration of a tunnel in\n   which both the entry-point and\
    \ exit-point node addresses belong to\n   the same node. It is also recommended\
    \ that the encapsulating engine\n   check for and reject the encapsulation of\
    \ a packet that has the pair\n   of tunnel entry-point and exit-point addresses\
    \ identical with the\n   pair of original packet source and final destination\
    \ addresses.\n"
- title: 4.1.3 Routing-Loop Nested Encapsulation
  contents:
  - "4.1.3 Routing-Loop Nested Encapsulation\n   In the case of a forwarding path\
    \ with multiple-level nested tunnels,\n   a routing-loop from an inner tunnel\
    \ to an outer tunnel is\n   particularly dangerous when packets from the inner\
    \ tunnels reenter an\n   outer tunnel from which they have not yet exited. In\
    \ such a case, the\n   nested encapsulation becomes a recursive encapsulation\
    \ with the\n   negative effects described in 4.1.  Because each nested encapsulation\n\
    \   adds a tunnel header with a new hop limit value, the IPv6 hop limit\n   mechanism\
    \ cannot control the number of times the packet reaches the\n   outer tunnel entry-point\
    \ node, and thus cannot control the number of\n   recursive encapsulations.\n\
    \   When the path of a packet from source to final destination includes\n   tunnels,\
    \ the maximum number of hops that the packet can traverse\n   should be controlled\
    \ by two mechanisms used together to avoid the\n   negative effects of recursive\
    \ encapsulation in routing loops:\n        (a)  the original packet hop limit.\n\
    \             It is decremented at each forwarding operation performed on\n  \
    \           an original packet. This includes each encapsulation of the\n    \
    \         original packet. It does not include nested encapsulations\n       \
    \      of the original packet\n        (b)  the tunnel IPv6 packet encapsulation\
    \ limit.\n             It is decremented at each nested encapsulation of the\n\
    \             packet.\n   For a discussion of the excessive encapsulation risk\
    \ factors in\n   nested encapsulation see Appendix A.\n"
- title: 5. Tunnel IPv6 Header
  contents:
  - "5. Tunnel IPv6 Header\n   The tunnel entry-point node fills out a tunnel IPv6\
    \ main header\n   [IPv6-Spec] as follows:\n          Version:\n            value\
    \ 6\n          Traffic Class:\n            Depending on the entry-point node tunnel\
    \ configuration, the\n            traffic class can be set to that of either the\
    \ original\n            packet or a pre-configured value - see section 6.4.\n\
    \          Flow Label:\n            Depending on the entry-point node tunnel configuration,\
    \ the\n            flow label can be set to a pre-configured value. The typical\n\
    \            value is zero - see section 6.5.\n          Payload Length:\n   \
    \         The original packet length, plus the length of the\n            encapsulating\
    \ (prepended) IPv6 extension headers, if any.\n          Next Header:\n      \
    \      The next header value according to [IPv6-Spec] from the\n            Assigned\
    \ Numbers RFC [RFC-1700 or its successors].\n            For example, if the original\
    \ packet is an IPv6 packet, this\n            is set to:\n                 - decimal\
    \ value 41 (Assigned Next Header number for\n                 IPv6) - if there\
    \ are no tunnel extension headers.\n                 - value 0 (Assigned Next\
    \ Header number for IPv6 Hop by\n                 Hop Options extension header)\
    \ - if a hop by hop options\n                 extension header immediately follows\
    \ the tunnel IPv6\n                 header.\n                 - decimal value\
    \ 60 (Assigned Next Header number for\n                 IPv6 Destination Options\
    \ extension header) - if a\n                 destination options extension header\
    \ immediately\n                 follows the tunnel IPv6 header.\n          Hop\
    \ Limit:\n            The tunnel IPv6 header hop limit is set to a pre-configured\n\
    \            value - see section 6.3.\n            The default value for hosts\
    \ is the Neighbor Discovery\n            advertised hop limit [ND-Spec].  The\
    \ default value for\n            routers is the default IPv6 Hop Limit value from\
    \ the\n            Assigned Numbers RFC (64 at the time of writing this\n    \
    \        document).\n          Source Address:\n            An IPv6 address of\
    \ the outgoing interface of the tunnel\n            entry-point node.  This address\
    \ is configured as the tunnel\n            entry-point node address - see section\
    \ 6.1.\n          Destination Address:\n            An IPv6 address of the tunnel\
    \ exit-point node. This address\n            is configured as the tunnel exit-point\
    \ node address - see\n            section 6.2.\n"
- title: 5.1 Tunnel IPv6 Extension Headers
  contents:
  - "5.1 Tunnel IPv6 Extension Headers\n   Depending on IPv6 node configuration parameters,\
    \ a tunnel entry-point\n   node may append to the tunnel IPv6 main header one\
    \ or more IPv6\n   extension headers, such as a Hop-by-Hop Options header, a Routing\n\
    \   header, or others.\n   To limit the number of nested encapsulations of a packet,\
    \ if it was\n   configured to do so - see section 6.6 - a tunnel entry-point includes\n\
    \   a Destination Options extension header containing a Tunnel\n   Encapsulation\
    \ Limit option. If that option is the only option present\n   in the Destination\
    \ Options header, the header has the following\n   format:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Next Header  |Hdr Ext Len = 0| Opt Type = 4  |Opt Data Len=1 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Tun Encap Lim |PadN Opt Type=1|Opt Data Len=1 |       0       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \          Next Header:\n            Identifies the type of the original packet\
    \ header.  For\n            example, if the original packet is an IPv6 packet,\
    \ the next\n            header protocol value is set to decimal value 41 (Assigned\n\
    \            payload type number for IPv6).\n          Hdr Ext Len:\n        \
    \    Length of the Destination Options extension header in 8-\n            octet\
    \ units, not including the first 8 octets. Set to value\n            0, if no\
    \ other options are present in this destination\n            options header.\n\
    \          Option Type:\n            value 4 - see section 4.1.1.\n          Opt\
    \ Data Len:\n            value 1 - see section 4.1.1.\n          Tun Encap Lim:\n\
    \            8 bit unsigned integer - see section 4.1.1.\n          Option Type:\n\
    \            value 1 - PadN option, to align the  header  following\n        \
    \    this header.\n          Opt Data Len:\n            value 1 - one octet of\
    \ option data.\n          Option Data:\n            value 0 - one zero-valued\
    \ octet.\n"
- title: 6. IPv6 Tunnel State Variables
  contents:
  - "6. IPv6 Tunnel State Variables\n   The IPv6 tunnel state variables, some of which\
    \ are or may be\n   configured on the tunnel entry-point node, are:\n"
- title: 6.1 IPv6 Tunnel Entry-Point Node Address
  contents:
  - "6.1 IPv6 Tunnel Entry-Point Node Address\n   The tunnel entry-point node address\
    \ is one of the valid IPv6 unicast\n   addresses of the entry-point node - the\
    \ validation of the address at\n   tunnel configuration time is recommended.\n\
    \   The tunnel entry-point node address is copied to the source address\n   field\
    \ in the tunnel IPv6 header during packet encapsulation.\n"
- title: 6.2 IPv6 Tunnel Exit-Point Node Address
  contents:
  - "6.2 IPv6 Tunnel Exit-Point Node Address\n   The tunnel exit-point node address\
    \ is used as IPv6 destination\n   address for the tunnel IPv6 header. A tunnel\
    \ acts like a virtual\n   point to point link between the entry-point node and\
    \ exit-point node.\n   The tunnel exit-point node address is copied to the destination\n\
    \   address field in the tunnel IPv6 header during packet encapsulation.\n   The\
    \ configuration of the tunnel entry-point and exit-point addresses\n   is not\
    \ subject to IPv6 Autoconfiguration or IPv6 Neighbor Discovery.\n"
- title: 6.3 IPv6 Tunnel Hop Limit
  contents:
  - "6.3 IPv6 Tunnel Hop Limit\n   An IPv6 tunnel is modeled as a \"single-hop virtual\
    \ link\" tunnel, in\n   which the passing of the original packet through the tunnel\
    \ is like\n   the passing of the original packet over a one hop link, regardless\
    \ of\n   the number of hops in the IPv6 tunnel.\n   The \"single-hop\" mechanism\
    \ should be implemented by having the tunnel\n   entry point node set a tunnel\
    \ IPv6 header hop limit independently of\n   the hop limit of the original header.\n\
    \   The \"single-hop\" mechanism hides from the original IPv6 packets the\n  \
    \ number of IPv6 hops of the tunnel.\n   It is recommended that the tunnel hop\
    \ limit be configured with a\n   value that ensures:\n        (a)  that tunnel\
    \ IPv6 packets can reach  the  tunnel  exit-point\n             node\n       \
    \ (b)  a quick expiration of the tunnel packet if a  routing  loop\n         \
    \    occurs within the IPv6 tunnel.\n   The tunnel hop limit default value for\
    \ hosts is the IPv6 Neighbor\n   Discovery advertised hop limit [ND-Spec].  The\
    \ tunnel hop limit\n   default value for routers is the default IPv6 Hop Limit\
    \ value from\n   the Assigned Numbers RFC (64 at the time of writing this document).\n\
    \   The tunnel hop limit is copied into the hop limit field of the tunnel\n  \
    \ IPv6 header of each packet encapsulated by the tunnel entry-point\n   node.\n"
- title: 6.4 IPv6 Tunnel Packet Traffic Class
  contents:
  - "6.4 IPv6 Tunnel Packet Traffic Class\n   The IPv6 Tunnel Packet Traffic Class\
    \ indicates the value that a\n   tunnel entry-point node sets in the Traffic Class\
    \ field of a tunnel\n   header. The default value is zero.  The configured Packet\
    \ Traffic\n   Class can also indicate whether the value of the Traffic Class field\n\
    \   in the tunnel header is copied from the original header, or it is set\n  \
    \ to the pre-configured value.\n"
- title: 6.5 IPv6 Tunnel Flow Label
  contents:
  - "6.5 IPv6 Tunnel Flow Label\n   The IPv6 Tunnel Flow Label indicates the value\
    \ that a tunnel entry-\n   point node sets in the flow label of a tunnel header.\
    \ The default\n   value is zero.\n"
- title: 6.6 IPv6 Tunnel Encapsulation Limit
  contents:
  - "6.6 IPv6 Tunnel Encapsulation Limit\n   The Tunnel Encapsulation Limit value\
    \ can indicate whether the entry-\n   point node is configured to limit the number\
    \ of encapsulations of\n   tunnel packets originating on that node.  The IPv6\
    \ Tunnel\n   Encapsulation Limit is the maximum number of additional\n   encapsulations\
    \ permitted for packets undergoing encapsulation at that\n   entry-point node.\
    \ Recommended default value is 4. An entry-point node\n   configured to limit\
    \ the number of nested encapsulations prepends a\n   Destination Options extension\
    \ header containing a Tunnel\n   Encapsulation Limit option to an original packet\
    \ undergoing\n   encapsulation - see sections 4.1 and 4.1.1.\n"
- title: 6.7 IPv6 Tunnel MTU
  contents:
  - "6.7 IPv6 Tunnel MTU\n   The tunnel MTU is set dynamically to the Path MTU between\
    \ the tunnel\n   entry-point and the tunnel exit-point nodes, minus the size of\
    \ the\n   tunnel headers: the maximum size of a tunnel packet payload that can\n\
    \   be sent through the tunnel without fragmentation [IPv6-Spec]. The\n   tunnel\
    \ entry-point node performs Path MTU discovery on the path\n   between the tunnel\
    \ entry-point and exit-point nodes [PMTU-Spec],\n   [ICMP-Spec]. The tunnel MTU\
    \ of a nested tunnel is the tunnel MTU of\n   the outer tunnel minus the size\
    \ of the nested tunnel headers.\n"
- title: 7. IPv6 Tunnel Packet Size Issues
  contents:
  - "7. IPv6 Tunnel Packet Size Issues\n   Prepending a tunnel header increases the\
    \ size of a packet, therefore\n   a tunnel packet resulting from the encapsulation\
    \ of an IPv6 original\n   packet may require fragmentation.\n   A tunnel IPv6\
    \ packet resulting from the encapsulation of an original\n   packet is considered\
    \ an IPv6 packet originating from the tunnel\n   entry-point node. Therefore,\
    \ like any source of an IPv6 packet, a\n   tunnel entry-point node must support\
    \ fragmentation of tunnel IPv6\n   packets.\n   A tunnel intermediate node that\
    \ forwards a tunnel packet to another\n   node in the tunnel follows the general\
    \ IPv6 rule that it must not\n   fragment a packet undergoing forwarding.\n  \
    \ A tunnel exit-point node receiving tunnel packets at the end of the\n   tunnel\
    \ for decapsulation applies the strict left-to-right processing\n   rules for\
    \ extension headers. In the case of a fragmented tunnel\n   packet, the fragments\
    \ are reassembled into a complete tunnel packet\n   before determining that an\
    \ embedded packet is present.\n   Note:\n   A particular problem arises when the\
    \ destination of a fragmented\n   tunnel packet is an exit-point node identified\
    \ by an anycast address.\n   The problem, which is similar to that of original\
    \ fragmented IPv6\n   packets destined to nodes identified by an anycast address,\
    \ is that\n   all the fragments of a packet must arrive at the same destination\n\
    \   node for that node to be able to perform a successful reassembly, a\n   requirement\
    \ that is not necessarily satisfied by packets sent to an\n   anycast address.\n"
- title: 7.1 IPv6 Tunnel Packet Fragmentation
  contents:
  - "7.1 IPv6 Tunnel Packet Fragmentation\n   When an IPv6 original packet enters\
    \ a tunnel, if the original packet\n   size exceeds the tunnel MTU (i.e., the\
    \ Path MTU between the tunnel\n   entry-point and the tunnel exit-point, minus\
    \ the size of the tunnel\n   header(s)), it is handled as follows:\n        (a)\
    \  if the original IPv6 packet size is larger  than  the  IPv6\n             minimum\
    \ link MTU [IPv6-Spec], the entry-point node discards\n             the packet\
    \ and sends an ICMPv6 \"Packet Too Big\" message to\n             the source address\
    \ of the original packet with the\n             recommended MTU size field set\
    \ to the tunnel MTU or the\n             IPv6 minimum link MTU, whichever is larger,\
    \ i.e. max\n             (tunnel MTU, IPv6 minimum link MTU).  Also see sections\
    \ 6.7\n             and 8.2.\n        (b)  if the original IPv6 packet is equal\
    \ or  smaller  than  the\n             IPv6 minimum link MTU, the tunnel entry-point\
    \ node\n             encapsulates the original packet, and subsequently\n    \
    \         fragments the resulting IPv6 tunnel packet into IPv6\n             fragments\
    \ that do not exceed the Path MTU to the tunnel\n             exit-point.\n"
- title: 7.2 IPv4 Tunnel Packet Fragmentation
  contents:
  - "7.2 IPv4 Tunnel Packet Fragmentation\n   When an IPv4 original packet enters\
    \ a tunnel, if the original packet\n   size exceeds the tunnel MTU (i.e., the\
    \ Path MTU between the tunnel\n   entry-point and the tunnel exit-point, minus\
    \ the size of the tunnel\n   header(s)), it is handled as follows:\n        (a)\
    \  if in the original IPv4 packet header the Don't Fragment  -\n             DF\
    \ - bit flag is SET, the entry-point node discards the\n             packet and\
    \ returns an ICMP message.  The ICMP message has\n             the type = \"unreachable\"\
    , the code = \"packet too big\", and\n             the recommended MTU size field\
    \ set to the size of the\n             tunnel MTU - see sections 6.7 and 8.3.\n\
    \        (b)  if in the original packet header the Don't Fragment - DF  -\n  \
    \           bit flag is CLEAR, the tunnel entry-point node encapsulates\n    \
    \         the original packet, and subsequently fragments the\n             resulting\
    \ IPv6 tunnel packet into IPv6 fragments that do\n             not exceed the\
    \ Path MTU to the tunnel exit-point.\n"
- title: 8. IPv6 Tunnel Error Processing and Reporting
  contents:
  - "8. IPv6 Tunnel Error Processing and Reporting\n   IPv6 Tunneling follows the\
    \ general rule that an error detected during\n   the processing of an IPv6 packet\
    \ is reported through an ICMP message\n   to the source of the packet.\n   On\
    \ a forwarding path that includes IPv6 tunnels, an error detected by\n   a node\
    \ that is not in any tunnel is directly reported to the source\n   of the original\
    \ IPv6 packet.\n   An error detected by a node inside a tunnel is reported to\
    \ the source\n   of the tunnel packet, that is, the tunnel entry-point node. \
    \ The ICMP\n   message sent to the tunnel entry-point node has as ICMP payload\
    \ the\n   tunnel IPv6 packet that has the original packet as its payload.\n  \
    \ The cause of a packet error encountered inside a tunnel can be a\n   problem\
    \ with:\n        (a)  the tunnel header, or\n        (b)  the tunnel packet.\n\
    \   Both tunnel header and tunnel packet problems are reported to the\n   tunnel\
    \ entry-point node.\n   If a tunnel packet problem is a consequence of a problem\
    \ with the\n   original packet, which is the payload of the tunnel packet, then\
    \ the\n   problem is also reported to the source of the original packet.\n   To\
    \ report a problem detected inside the tunnel to the source of an\n   original\
    \ packet, the tunnel entry point node must relay the ICMP\n   message received\
    \ from inside the tunnel to the source of that\n   original IPv6 packet.\n   An\
    \ example of the processing that can take place in the error\n   reporting mechanism\
    \ of a node is illustrated in Fig.7, and Fig.8:\n   Fig.7 path #0 and Fig.8 (a)\
    \ - The IPv6 tunnel entry-point receives an\n   ICMP packet from inside the tunnel,\
    \ marked Tunnel ICMPv6 Message in\n   Fig.7. The tunnel entry-point node IPv6\
    \ layer passes the received\n   ICMP message to the ICMPv6 Input. The ICMPv6 Input,\
    \ based on the ICMP\n   type and code [ICMP-Spec] generates an internal \"error\
    \ code\".\n   Fig.7 path #1 - The internal error code, is passed with the \"ICMPv6\n\
    \   message payload\" to the upper-layer protocol - in this case the IPv6\n  \
    \ tunnel upper-layer error input.\n +-------+   +-------+   +-----------------------+\n\
    \ | Upper |   | Upper |   | Upper                 |\n | Layer |   | Layer |  \
    \ | Layer                 |\n | Proto.|   | Proto |   | IPv6 Tunnel          \
    \ |\n | Error |   | Error |   | Error                 |\n | Input |   | Input\
    \ |   | Input                 |\n |       |   |       |   |       Decapsulate\
    \     |\n |       |   |       |   |  -->--ICMPv6--#2->--  |\n |       |   |  \
    \     |   |  |    Payload      |  |\n +-------+   +-------+   +--|-----------------|--+\n\
    \     |           |          |                 |\n     ^           ^         \
    \ ^                 v\n     |           |          |                 |\n     --------------------#1--\
    \    -----Orig.Packet?--- - - - - - - -\n              #1                #3  Int.Error\
    \ Code, #5             |\n"
- title: Int.Error Code,^                 v  Source Address, v              v
  contents:
  - 'Int.Error Code,^                 v  Source Address, v              v

    '
- title: ICMPv6 Payload |            IPv6 |  Orig. Packet    | IPv4         |
  contents:
  - "ICMPv6 Payload |            IPv6 |  Orig. Packet    | IPv4         |\n      +--------------+\
    \    +------------+     +------------+    + - - +\n      |              |    |\
    \            |     |            |\n      | ICMP v6      |    | ICMP v6    |  \
    \   | ICMP v4    |    |     |\n      | Input        |    | Err Report |     |\
    \ Err Report |\n      |  -  -  -  -  +----+  -  -  -  -|     +  -  -  -  -+  \
    \  + - - +\n      |                                |     |            |\n    \
    \  |            IPv6 Layer          |     | IPv4 Layer |    |     |\n      | \
    \                               |     |            |\n      +--------------------------------+\
    \     +------------+    + - - +\n            |                    |          \
    \        |\n            ^                    V                  V\n          \
    \  #0                   #4                 #6\n            |                 \
    \   |                  |\n       Tunnel ICMPv6          ICMPv6             ICMPv4\n\
    \         Message              Message            Message\n            |     \
    \               |                  |\n   Fig.7 Error Reporting Flow in a Node\
    \ (IPv6 Tunneling Protocol Engine)\n   Fig.7 path #2 and Fig.8 (b) - The IPv6\
    \ tunnel error input\n   decapsulates the tunnel IPv6 packet, which is the ICMPv6\
    \ message\n   payload, obtaining the original packet, and thus the original headers\n\
    \   and dispatches the \"internal error code\", the source address from the\n\
    \   original packet header, and the original packet, down to the error\n   report\
    \ block of the protocol identified by the Next Header field in\n   the tunnel\
    \ header immediately preceding the original packet in the\n   ICMP message payload.\n\
    \   From here the processing depends on the protocol of the original\n   packet:\n\
    \        (a)  - for an IPv6 original packet\n     Fig.7 path #3 and Fig.8 (c.1)-\
    \ for an IPv6 original packet, the\n     ICMPv6 error report builds an ICMP message\
    \ of a type and code\n     according to the \"internal error code\", containing\
    \ the \"original\n     packet\" as ICMP payload.\n     Fig.7 path #4 and Fig.8\
    \ (d.1)- The ICMP message has the tunnel\n     entry-point node address as source\
    \ address, and the original packet\n     source node address as destination address.\
    \ The tunnel entry-point\n     node sends the ICMP message to the source node\
    \ of the original\n     packet.\n        (b)  - for an IPv4 original packet\n\
    \     Fig.7 path #5 and Fig.8 (c.2) - for an IPv4 original packet, the\n     ICMPv4\
    \ error report builds an ICMP message of a type and code\n     derived from the\
    \ the \"internal error code\", containing the\n     \"original packet\" as ICMP\
    \ payload.\n     Fig.7 path #6 and Fig.8 (d.2) - The ICMP message has the tunnel\n\
    \     entry-point node IPv4 address as source address, and the original\n    \
    \ packet IPv4 source node address as destination address. The tunnel\n     entry-point\
    \ node sends the ICMP message to the source node of the\n     original packet.\n\
    \   A graphical description of the header processing taking place is  the\n  \
    \ following:\n    <                     Tunnel Packet                        \
    \        >\n   +--------+- - - - - -+--------+------------------------------//------+\n\
    \   | IPv6   | IPv6      | ICMP   |             Tunnel                   |\n"
- title: (a)|        | Extension |        |             IPv6                     |
  contents:
  - "(a)|        | Extension |        |             IPv6                     |\n \
    \  | Header | Headers   | Header |             Packet in error          |\n  \
    \ +--------+- - - - - -+--------+------------------------------//------+\n   \
    \ < Tunnel Headers   > <       Tunnel ICMP Message                   >\n     \
    \                             <         ICMPv6 Message Payload     >\n       \
    \                          |\n                                 v\n        <  \
    \                  Tunnel ICMP Message                   >\n                 \
    \       <       Tunnel IPv6 Packet in Error        >\n       +--------+      +---------+\
    \      +----------+--------//------+\n       | ICMP   |      | Tunnel  |     \
    \ | Original | Original       |\n"
- title: (b)    |        |  +   | IPv6    |  +   |          | Packet         |
  contents:
  - "(b)    |        |  +   | IPv6    |  +   |          | Packet         |\n     \
    \  | Header |      | Headers |      | Headers  | Payload        |\n       +--------+\
    \      +---------+      +----------+--------//------+\n           |          \
    \                   <Original Packet in Error >\n           -----------------\
    \              |\n                           |              |\n             --------------|---------------\n\
    \             |             |\n             V             V\n       +---------+\
    \      +--------+      +-------------------//------+\n       | New     |     \
    \ | ICMP   |      |                           |\n"
- title: (c.1)  | IPv6    |  +   |        |  +   | Orig. Packet in Error     |
  contents:
  - "(c.1)  | IPv6    |  +   |        |  +   | Orig. Packet in Error     |\n     \
    \  | Headers |      | Header |      |                           |\n       +---------+\
    \      +--------+      +-------------------//------+\n                       \
    \      |\n                             v\n                 +---------+--------+-------------------//------+\n\
    \                 | New     | ICMP   |  Original                 |\n"
- title: (d.1)            | IPv6    |        |                           |
  contents:
  - "(d.1)            | IPv6    |        |                           |\n         \
    \        | Headers | Header |  Packet in Error          |\n                 +---------+--------+-------------------//------+\n\
    \                  <             New ICMP Message               >\n          \
    \        or for an IPv4 original packet\n       +---------+      +--------+  \
    \    +-------------------//------+\n       | New     |      | ICMP   |      |\
    \                           |\n"
- title: (c.2)  | IPv4    |  +   |        |  +   | Orig. Packet in Error     |
  contents:
  - "(c.2)  | IPv4    |  +   |        |  +   | Orig. Packet in Error     |\n     \
    \  | Header  |      | Header |      |                           |\n       +---------+\
    \      +--------+      +-------------------//------+\n                       \
    \      |\n                             v\n                 +---------+--------+-------------------//------+\n\
    \                 | New     | ICMP   |  Original                 |\n"
- title: (d.2)            | IPv4    |        |                           |
  contents:
  - "(d.2)            | IPv4    |        |                           |\n         \
    \        | Header  | Header |  Packet in Error          |\n                 +---------+--------+-------------------//------+\n\
    \                  <             New ICMP Message               >\n          \
    \      Fig.8 ICMP Error Reporting and Processing\n"
- title: 8.1 Tunnel ICMP Messages
  contents:
  - "8.1 Tunnel ICMP Messages\n   The tunnel ICMP messages that are reported to the\
    \ source of the\n   original packet are:\n        hop limit exceeded\n       \
    \      The tunnel has a misconfigured hop limit, or contains a\n             routing\
    \ loop, and packets do not reach the tunnel exit-\n             point node. This\
    \ problem is reported to the tunnel entry-\n             point node, where the\
    \ tunnel hop limit can be reconfigured\n             to a higher value. The problem\
    \ is further reported to the\n             source of the original packet as described\
    \ in section 8.2,\n             or 8.3.\n        unreachable node\n          \
    \   One of the nodes in the tunnel is not or is no longer\n             reachable.\
    \  This problem is reported to the tunnel entry-\n             point node, which\
    \ should be reconfigured with a valid and\n             active path between the\
    \ entry and exit-point of the tunnel.\n             The problem is further reported\
    \ to the source of the\n             original packet as described in section 8.2,\
    \ or 8.3.\n        parameter problem\n             A Parameter Problem ICMP message\
    \ pointing to a valid Tunnel\n             Encapsulation Limit Destination header\
    \ with a Tun Encap Lim\n             field value set to one is an indication that\
    \ the tunnel\n             packet exceeded the maximum number of encapsulations\n\
    \             allowed. The problem is further reported to the source of\n    \
    \         the original packet as described in section 8.2, or 8.3.\n   The above\
    \ three problems detected inside the tunnel, which are a\n   tunnel configuration\
    \ and a tunnel topology problem, are reported to\n   the source of the original\
    \ IPv6 packet, as a tunnel generic\n   \"unreachable\" problem caused by a \"\
    link problem\" - see section 8.2\n   and 8.3.\n        packet too big\n      \
    \       The tunnel packet exceeds the tunnel Path MTU.\n             The information\
    \ carried by this type of ICMP message is\n             used as follows:\n   \
    \          - by a receiving tunnel entry-point node to set or adjust\n       \
    \      the tunnel MTU\n             - by a sending tunnel entry-point node to\
    \ indicate to the\n             source of an original packet the MTU size that\
    \ should be\n             used in sending IPv6 packets towards the tunnel entry-point\n\
    \             node.\n"
- title: 8.2 ICMP Messages for IPv6 Original Packets
  contents:
  - "8.2 ICMP Messages for IPv6 Original Packets\n   The tunnel entry-point node builds\
    \ the ICMP and IPv6 headers of the\n   ICMP message that is sent to the source\
    \ of the original packet as\n   follows:\n   IPv6 Fields:\n   Source Address\n\
    \                  A valid unicast IPv6 address of the outgoing\n            \
    \      interface.\n   Destination Address\n                  Copied from the Source\
    \ Address field of the Original\n                  IPv6 header.\n   ICMP Fields:\n\
    \   For any of the following tunnel ICMP error messages:\n     \"hop limit exceeded\"\
    \n     \"unreachable node\"\n     \"parameter problem\" - pointing to a valid\
    \ Tunnel Encapsulation\n     Limit destination header with the Tun Encap Lim field\
    \ set to a\n     value zero:\n     Type           1 - unreachable node\n     Code\
    \           3 - address unreachable\n   For tunnel ICMP error message \"packet\
    \ too big\":\n     Type           2 - packet too big\n     Code           0\n\
    \     MTU            The MTU field from the tunnel ICMP message minus\n      \
    \              the length of the tunnel headers.\n   According to the general\
    \ rules described in 7.1, an ICMP \"packet too\n   big\" message is sent to the\
    \ source of the original packet only if the\n   original packet size is larger\
    \ than the minimum link MTU size\n   required for IPv6 [IPv6-Spec].\n"
- title: 8.3 ICMP Messages for IPv4 Original Packets
  contents:
  - "8.3 ICMP Messages for IPv4 Original Packets\n   The tunnel entry-point node builds\
    \ the ICMP and IPv4 header of the\n   ICMP message that is sent to the source\
    \ of the original packet as\n   follows:\n   IPv4 Fields:\n   Source Address\n\
    \                  A valid unicast IPv4 address of the outgoing\n            \
    \      interface.\n   Destination Address\n                  Copied from the Source\
    \ Address field of the Original\n                  IPv4 header.\n   ICMP Fields:\n\
    \   For any of the following tunnel ICMP error messages:\n     \"hop limit exceeded\"\
    \n     \"unreachable node\"\n     \"parameter problem\" - pointing to a valid\
    \ Tunnel Enacpsulation\n     Limit destination header with the Tun Encap Lim field\
    \ set to a\n     value zero:\n     Type           3 - destination unreachable\n\
    \     Code           1 - host unreachable\n   For a tunnel ICMP error message\
    \ \"packet too big\":\n     Type           3 - destination unreachable\n     Code\
    \           4 - packet too big\n     MTU            The MTU field from the tunnel\
    \ ICMP message minus\n                    the length of the tunnel headers.\n\
    \   According to the general rules described in section 7.2, an ICMP\n   \"packet\
    \ too big\" message is sent to the original IPv4 packet source\n   node if the\
    \ the original IPv4 header has the DF - don't fragment -\n   bit flag SET.\n"
- title: 8.4 ICMP Messages for Nested Tunnel Packets
  contents:
  - "8.4 ICMP Messages for Nested Tunnel Packets\n   In case of an error uncovered\
    \ with a nested tunnel packet, the inner\n   tunnel entry-point, which receives\
    \ the ICMP error message from the\n   inner tunnel reporting node, relays the\
    \ ICMP message to the outer\n   tunnel entry-point following the mechanisms described\
    \ in sections\n   8.,8.1, 8.2, and 8.3. Further, the outer tunnel entry-point\
    \ relays\n   the ICMP message to the source of the original packet, following\
    \ the\n   same mechanisms.\n"
- title: 9. Security Considerations
  contents:
  - "9. Security Considerations\n   An IPv6 tunnel can be secured by securing the\
    \ IPv6 path between the\n   tunnel entry-point and exit-point node. The security\
    \ architecture,\n   mechanisms, and services are described in [RFC2401], [RFC2402],\
    \ and\n   [RFC2406].  A secure IPv6 tunnel may act as a gateway-to-gateway\n \
    \  secure path as described in [RFC2401].\n   For a secure IPv6 tunnel, in addition\
    \ to the mechanisms described\n   earlier in this document, the entry-point node\
    \ of the tunnel performs\n   security algorithms on the packet and prepends as\
    \ part of the tunnel\n   headers one or more security headers in conformance with\
    \ [IPv6-Spec],\n   [RFC2401], and [RFC2402], or [RFC2406].\n   The exit-point\
    \ node of a secure IPv6 tunnel performs security\n   algorithms and processes\
    \ the tunnel security header[s] as part of the\n   tunnel headers processing described\
    \ earlier, and in conformance with\n   [RFC2401], and [RFC2402], or [RFC2406].\
    \  The exit-point node discards\n   the tunnel security header[s] with the rest\
    \ of the tunnel headers\n   after tunnel headers processing completion.\n   The\
    \ degree of integrity, authentication, and confidentiality and the\n   security\
    \ processing performed on a tunnel packet at the entry-point\n   and exit-point\
    \ node of a secure IPv6 tunnel depend on the type of\n   security header - authentication\
    \ (AH) or encryption (ESP) - and\n   parameters configured in the Security Association\
    \ for the tunnel.\n   There is no dependency or interaction between the security\
    \ level and\n   mechanisms applied to the tunnel packets and the security applied\
    \ to\n   the original packets which are the payloads of the tunnel packets.\n\
    \   In case of nested tunnels, each inner tunnel may have its own set of\n   security\
    \ services, independently from those of the outer tunnels, or\n   of those between\
    \ the source and destination of the original packet.\n"
- title: 10. Acknowledgments
  contents:
  - "10. Acknowledgments\n   This document is partially derived from several discussions\
    \ about\n   IPv6 tunneling on the IPng Working Group Mailing List and from\n \
    \  feedback from the IPng Working Group to an IPv6 presentation that\n   focused\
    \ on IPv6 tunneling at the 33rd IETF, in Stockholm, in July\n   1995.\n   Additionally,\
    \ the following documents that focused on tunneling or\n   encapsulation were\
    \ helpful references: RFC 1933 (R. Gilligan, E.\n   Nordmark), RFC 1241 (R. Woodburn,\
    \ D. Mills), RFC 1326 (P.  Tsuchiya),\n   RFC 1701, RFC 1702 (S. Hanks, D. Farinacci,\
    \ P. Traina), RFC 1853 (W.\n   Simpson), as well as RFC 2003 (C. Perkins).\n \
    \  Brian Carpenter, Richard Draves, Bob Hinden, Thomas Narten, Erik\n   Nordmark\
    \ (in alphabetical order) gave valuable reviewing comments and\n   suggestions\
    \ for the improvement of this document. Scott Bradner, Ross\n   Callon, Dimitry\
    \ Haskin, Paul Traina, and James Watt (in alphabetical\n   order) shared their\
    \ view or experience on matters of concern in this\n   document.  Judith Grossman\
    \ provided a sample of her many years of\n   editorial and writing experience\
    \ as well as a good amount of probing\n   technical questions.\n"
- title: 11. References
  contents:
  - "11. References\n   [IPv6-Spec] Deering, S. and R. Hinden, \"Internet Protocol\n\
    \               Version 6 (IPv6) Specification\", RFC 2460, December 1998.\n \
    \  [ICMP-Spec] Conta, A. and S. Deering \"Internet Control Message\n         \
    \      Protocol for the Internet Protocol Version 6 (IPv6)\", RFC\n          \
    \     2463, December 1998.\n   [ND-Spec]   Narten, T., Nordmark, E., and W. Simpson\
    \ \"Neighbor\n               Discovery for IP Version 6 (IPv6)\", RFC 2461, December\n\
    \               1998.\n   [PMTU-Spec] McCann, J., Deering, S. and J. Mogul, \"\
    Path MTU Discovery\n               for IP Version 6 (IPv6)\", RFC 1981, August\
    \ 1996.\n   [RFC2401]   Atkinson, R., \"Security Architecture for the Internet\n\
    \               Protocol\", RFC 2401, November 1998.\n   [RFC2402]   Atkinson,\
    \ R., \"IP Authentication Header\", RFC 2402,\n               November 1998.\n\
    \   [RFC2406]   Atkinson, R., \"IP Encapsulation Security Payload (ESP)\",\n \
    \              RFC 2406, November 1998.\n   [RFC-1853]  Simpson, W., \"IP in IP\
    \ Tunneling\", RFC 1853, October\n               1995.\n   [Assign-Nr] Reynolds,\
    \ J. and J. Postel, \"Assigned Numbers\", STD 2,\n               RFC 1700, October\
    \ 1994.  See also:\n               http://www.iana.org/numbers.html\n   [RFC2119]\
    \   Bradner, S., \"Key words for use in RFCs to indicate\n               Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Alex Conta\n   Lucent Technologies Inc.\n   300 Baker\
    \ Ave\n   Concord, MA 01742-2168\n   +1-978-287-2842\n   EMail: aconta@lucent.com\n\
    \   Stephen Deering\n   Cisco Systems\n   170 West Tasman Dr\n   San Jose, CA\
    \ 95132-1706\n   Phone: +1-408-527-8213\n   EMail: deering@cisco.com\n"
- title: Appendix A
  contents:
  - 'Appendix A

    '
- title: A.1   Risk Factors in Nested Encapsulation
  contents:
  - "A.1   Risk Factors in Nested Encapsulation\n   Nested encapsulations of a packet\
    \ become a recursive encapsulation if\n   the packet reenters an outer tunnel\
    \ before exiting it. The cases\n   which present a high risk of recursive encapsulation\
    \ are those in\n   which a tunnel entry-point node cannot determine whether a\
    \ packet\n   that undergoes encapsulation reenters the tunnel before exiting it.\n\
    \   Routing loops that cause tunnel packets to reenter a tunnel before\n   exiting\
    \ it are certainly the major cause of the problem.  But since\n   routing loops\
    \ exist, and happen, it is important to understand and\n   describe, the cases\
    \ in which the risk for recursive encapsulation is\n   higher.\n   There are two\
    \ significant elements that determine the risk factor of\n   routing loop recursive\
    \ encapsulation:\n        (a)  the type of tunnel,\n        (b) the type of route\
    \ to the tunnel exit-point, which\n             determines the packet forwarding\
    \ through the tunnel, that\n             is, over the tunnel virtual-link.\n"
- title: A.1.1  Risk Factor in Nested Encapsulation - type of tunnel.
  contents:
  - "A.1.1  Risk Factor in Nested Encapsulation - type of tunnel.\n   The type of\
    \ tunnels which were identified as a high risk factor for\n   recursive encapsulation\
    \ in routing loops are:\n              \"inner tunnels with identical exit-points\"\
    .\n   Since the source and destination of an original packet is the main\n   information\
    \ used to decide whether to forward a packet through a\n   tunnel or not, a recursive\
    \ encapsulation can be avoided in case of a\n   single tunnel (non-inner), by\
    \ checking that the packet to be\n   encapsulated is not originated on the entry-point\
    \ node.  This\n   mechanism is suggested in [RFC-1853].\n   However, this type\
    \ of protection does not seem to work well in case\n   of inner tunnels with different\
    \ entry-points, and identical exit-\n   points.\n   Inner tunnels with different\
    \ entry-points and identical exit-points\n   introduce ambiguity in deciding whether\
    \ to encapsulate a packet, when\n   a packet encapsulated in an inner tunnel reaches\
    \ the entry-point node\n   of an outer tunnel by means of a routing loop. Because\
    \ the source of\n   the tunnel packet is the inner tunnel entry-point node which\
    \ is\n   different than the entry-point node of the outer tunnel, the source\n\
    \   address checking (mentioned above) fails to detect an invalid\n   encapsulation,\
    \ and as a consequence the tunnel packet gets\n   encapsulated at the outer tunnel\
    \ each time it reaches it through the\n   routing loop.\n"
- title: A.1.2  Risk Factor in Nested Encapsulation - type of route.
  contents:
  - "A.1.2  Risk Factor in Nested Encapsulation - type of route.\n   The type of route\
    \ to a tunnel exit-point node has been also\n   identified as a high risk factor\
    \ of recursive encapsulation in\n   routing loops.\n   One type of route to a\
    \ tunnel exit-point node is a route to a\n   specified destination node, that\
    \ is, the destination is a valid\n   specified IPv6 address (route to node). Such\
    \ a route can be selected\n   based on the longest match of an original packet\
    \ destination address\n   with the destination address stored in the tunnel entry-point\
    \ node\n   routing table entry for that route. The packet forwarded on such a\n\
    \   route is first encapsulated and then forwarded towards the tunnel\n   exit-point\
    \ node.\n   Another type of route to a tunnel exit-point node is a route to a\n\
    \   specified prefix-net, that is, the destination is a valid specified\n   IPv6\
    \ prefix (route to net). Such a route can be selected based on the\n   longest\
    \ path match of an original packet destination address with the\n   prefix destination\
    \ stored in the tunnel entry-point node routing\n   table entry for that route.\
    \ The packet forwarded on such a route is\n   first encapsulated and then forwarded\
    \ towards the tunnel exit-point\n   node.\n   And finally another type of route\
    \ to a tunnel exit-point is a default\n   route, or a route to an unspecified\
    \ destination. This route is\n   selected when no-other match for the destination\
    \ of the original\n   packet has been found in the routing table. A tunnel that\
    \ is the\n   first hop of a default route is a \"default tunnel\".\n   If the\
    \ route to a tunnel exit-point is a route to node, the risk\n   factor for recursive\
    \ encapsulation is minimum.\n   If the route to a tunnel exit-point is a route\
    \ to net, the risk\n   factor for recursive encapsulation is medium. There is\
    \ a range of\n   destination addresses that will match the prefix the route is\n\
    \   associated with.  If one or more inner tunnels with different tunnel\n   entry-points\
    \ have exit-point node addresses that match the route to\n   net of an outer tunnel\
    \ exit-point, then a recursive encapsulation may\n   occur if a tunnel packet\
    \ gets diverted from inside such an inner\n   tunnel to the entry-point of the\
    \ outer tunnel that has a route to its\n   exit-point that matches the exit-point\
    \ of an inner tunnel.\n   If the route to a tunnel exit-point is a default route,\
    \ the risk\n   factor for recursive encapsulation is maximum. Packets are forwarded\n\
    \   through a default tunnel for lack of a better route.  In many\n   situations,\
    \ forwarding through a default tunnel can happen for a wide\n   range of destination\
    \ addresses which at the maximum extent is the\n   entire Internet minus the node's\
    \ link. As consequence, it is likely\n   that in a routing loop case, if a tunnel\
    \ packet gets diverted from an\n   inner tunnel to an outer tunnel entry-point\
    \ in which the tunnel is a\n   default tunnel, the packet will be once more encapsulated,\
    \ because\n   the default routing mechanism will not be able to discern\n   differently,\
    \ based on the destination.\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1998).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
