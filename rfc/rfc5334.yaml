- contents:
  - '                            Ogg Media Types

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Abstract\n   This document describes the registration of media types for the
    Ogg\n   container format and conformance requirements for implementations of\n
    \  these types.  This document obsoletes RFC 3534.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.     Introduction  . . . . . . . . . . . . . . . . .
    . . . . . .  2\n   2.     Changes Since RFC 3534  . . . . . . . . . . . . . .
    . . . .  2\n   3.     Conformance and Document Conventions  . . . . . . . . .
    . .  3\n   4.     Deployed Media Types and Compatibility  . . . . . . . . . .
    \ 3\n   5.     Relation between the Media Types  . . . . . . . . . . . . .  5\n
    \  6.     Encoding Considerations . . . . . . . . . . . . . . . . . .  5\n   7.
    \    Security Considerations . . . . . . . . . . . . . . . . . .  6\n   8.     Interoperability
    Considerations . . . . . . . . . . . . . .  7\n   9.     IANA Considerations .
    . . . . . . . . . . . . . . . . . . .  7\n   10.    Ogg Media Types . . . . .
    . . . . . . . . . . . . . . . . .  7\n   10.1.  application/ogg . . . . . . .
    . . . . . . . . . . . . . . .  7\n   10.2.  video/ogg . . . . . . . . . . . .
    . . . . . . . . . . . . .  8\n   10.3.  audio/ogg . . . . . . . . . . . . . .
    . . . . . . . . . . .  9\n   11.    Acknowledgements  . . . . . . . . . . . .
    . . . . . . . . . 10\n   12.    Copying Conditions  . . . . . . . . . . . . .
    . . . . . . . 10\n   13.    References  . . . . . . . . . . . . . . . . . . .
    . . . . . 11\n   13.1.  Normative References  . . . . . . . . . . . . . . . .
    . . . 11\n   13.2.  Informative References  . . . . . . . . . . . . . . . . .
    . 11\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document describes media types for Ogg, a data encapsulation\n
    \  format defined by the Xiph.Org Foundation for public use.  Refer to\n   \"Introduction\"
    in [RFC3533] and \"Overview\" in [Ogg] for background\n   information on this
    container format.\n   Binary data contained in Ogg, such as Vorbis and Theora,
    has\n   historically been interchanged using the application/ogg media type\n
    \  as defined by [RFC3534].  This document obsoletes [RFC3534] and\n   defines
    three media types for different types of content in Ogg to\n   reflect this usage
    in the IANA media type registry, to foster\n   interoperability by defining underspecified
    aspects, and to provide\n   general security considerations.\n   The Ogg container
    format is known to contain [Theora] or [Dirac]\n   video, [Speex] (narrow-band
    and wide-band) speech, [Vorbis] or [FLAC]\n   audio, and [CMML] timed text/metadata.
    \ As Ogg encapsulates binary\n   data, it is possible to include any other type
    of video, audio,\n   image, text, or, generally speaking, any time-continuously
    sampled\n   data.\n   While raw packets from these data sources may be used directly
    by\n   transport mechanisms that provide their own framing and packet-\n   separation
    mechanisms (such as UDP datagrams or RTP), Ogg is a\n   solution for stream based
    storage (such as files) and transport (such\n   as TCP streams or pipes).  The
    media types defined in this document\n   are needed to correctly identify such
    content when it is served over\n   HTTP, included in multi-part documents, or
    used in other places where\n   media types [RFC2045] are used.\n"
  title: 1.  Introduction
- contents:
  - "2.  Changes Since RFC 3534\n   o  The type \"application/ogg\" is redefined.\n
    \  o  The types \"video/ogg\" and \"audio/ogg\" are defined.\n   o  New file extensions
    are defined.\n   o  New Macintosh file type codes are defined.\n   o  The codecs
    parameter is defined for optional use.\n   o  The Ogg Skeleton extension becomes
    a recommended addition for\n      content served under the new types.\n"
  title: 2.  Changes Since RFC 3534
- contents:
  - "3.  Conformance and Document Conventions\n   The key words \"MUST\", \"MUST NOT\",
    \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
    \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described
    in BCP 14, [RFC2119] and\n   indicate requirement levels for compliant implementations.\n
    \  Requirements apply to all implementations unless otherwise stated.\n   An implementation
    is a software module that supports one of the media\n   types defined in this
    document.  Software modules may support\n   multiple media types, but conformance
    is considered individually for\n   each type.\n   Implementations that fail to
    satisfy one or more \"MUST\" requirements\n   are considered non-compliant.  Implementations
    that satisfy all\n   \"MUST\" requirements, but fail to satisfy one or more \"SHOULD\"\n
    \  requirements, are said to be \"conditionally compliant\".  All other\n   implementations
    are \"unconditionally compliant\".\n"
  title: 3.  Conformance and Document Conventions
- contents:
  - "4.  Deployed Media Types and Compatibility\n   The application/ogg media type
    has been used in an ad hoc fashion to\n   label and exchange multimedia content
    in Ogg containers.\n   Use of the \"application\" top-level type for this kind
    of content is\n   known to be problematic, in particular since it obfuscates video
    and\n   audio content.  This document thus defines the media types,\n   o  video/ogg\n
    \  o  audio/ogg\n   which are intended for common use and SHOULD be used when
    dealing\n   with video or audio content, respectively.  This document also\n   obsoletes
    the [RFC3534] definition of application/ogg and marks it\n   for complex data
    (e.g., multitrack visual, audio, textual, and other\n   time-continuously sampled
    data), which is not clearly video or audio\n   data and thus not suited for either
    the video/ogg or audio/ogg types.\n   Refer to the following section for more
    details.\n   An Ogg bitstream generally consists of one or more logical bitstreams\n
    \  that each consist of a series of header and data pages packetising\n   time-continuous
    binary data [RFC3533].  The content types of the\n   logical bitstreams may be
    identified without decoding the header\n   pages of the logical bitstreams through
    use of a [Skeleton]\n   bitstream.  Using Ogg Skeleton is REQUIRED for content
    served under\n   the application/ogg type and RECOMMENDED for video/ogg and audio/ogg,\n
    \  as Skeleton contains identifiers to describe the different\n   encapsulated
    data.\n   Furthermore, it is RECOMMENDED that implementations that identify a\n
    \  logical bitstream that they cannot decode SHOULD ignore it, while\n   continuing
    to decode the ones they can.  Such precaution ensures\n   backward and forward
    compatibility with existing and future data.\n   These media types can optionally
    use the \"codecs\" parameter described\n   in [RFC4281].  Codecs encapsulated
    in Ogg require a text identifier\n   at the beginning of the first header page,
    hence a machine-readable\n   method to identify the encapsulated codecs would
    be through this\n   header.  The following table illustrates how those header
    values map\n   into strings that are used in the \"codecs\" parameter when dealing\n
    \  with Ogg media types.\n        Codec Identifier             | Codecs Parameter\n
    \      -----------------------------------------------------------\n        char[5]:
    'BBCD\\0'            | dirac\n        char[5]: '\\177FLAC'          | flac\n        char[7]:
    '\\x80theora'        | theora\n        char[7]: '\\x01vorbis'        | vorbis\n
    \       char[8]: 'CELT    '          | celt\n        char[8]: 'CMML\\0\\0\\0\\0'
    \     | cmml\n        char[8]: '\\213JNG\\r\\n\\032\\n' | jng\n        char[8]:
    '\\x80kate\\0\\0\\0'    | kate\n        char[8]: 'OggMIDI\\0'         | midi\n
    \       char[8]: '\\212MNG\\r\\n\\032\\n' | mng\n        char[8]: 'PCM     '          |
    pcm\n        char[8]: '\\211PNG\\r\\n\\032\\n' | png\n        char[8]: 'Speex
    \  '          | speex\n        char[8]: 'YUV4MPEG'          | yuv4mpeg\n   An
    up-to-date version of this table is kept at Xiph.org (see\n   [Codecs]).\n   Possible
    examples include:\n   o  application/ogg; codecs=\"theora, cmml, ecmascript\"\n
    \  o  video/ogg; codecs=\"theora, vorbis\"\n   o  audio/ogg; codecs=speex\n"
  title: 4.  Deployed Media Types and Compatibility
- contents:
  - "5.  Relation between the Media Types\n   As stated in the previous section, this
    document describes three\n   media types that are targeted at different data encapsulated
    in Ogg.\n   Since Ogg is capable of encapsulating any kind of data, the multiple\n
    \  usage scenarios have revealed interoperability issues between\n   implementations
    when dealing with content served solely under the\n   application/ogg type.\n
    \  While this document does redefine the earlier definition of\n   application/ogg,
    this media type will continue to embrace the widest\n   net possible of content
    with the video/ogg and audio/ogg types being\n   smaller subsets of it.  However,
    the video/ogg and audio/ogg types\n   take precedence in a subset of the usages,
    specifically when serving\n   multimedia content that is not complex enough to
    warrant the use of\n   application/ogg.  Following this line of thought, the audio/ogg
    type\n   is an even smaller subset within video/ogg, as it is not intended to\n
    \  refer to visual content.\n   As such, the application/ogg type is the recommended
    choice to serve\n   content aimed at scientific and other applications that require\n
    \  various multiplexed signals or streams of continuous data, with or\n   without
    scriptable control of content.  For bitstreams containing\n   visual, timed text,
    and any other type of material that requires a\n   visual interface, but that
    is not complex enough to warrant serving\n   under application/ogg, the video/ogg
    type is recommended.  In\n   situations where the Ogg bitstream predominantly
    contains audio data\n   (lyrics, metadata, or cover art notwithstanding), it is
    recommended\n   to use the audio/ogg type.\n"
  title: 5.  Relation between the Media Types
- contents:
  - "6.  Encoding Considerations\n   Binary: The content consists of an unrestricted
    sequence of octets.\n   Note:\n   o  Ogg encapsulated content is binary data and
    should be transmitted\n      in a suitable encoding without CR/LF conversion,
    7-bit stripping,\n      etc.; base64 [RFC4648] is generally preferred for binary-to-text\n
    \     encoding.\n   o  Media types described in this document are used for stream
    based\n      storage (such as files) and transport (such as TCP streams or\n      pipes);
    separate types are used to identify codecs such as in\n      real-time applications
    for the RTP payload formats of Theora\n      [ThRTP] video, Vorbis [RFC5215],
    or Speex [SpRTP] audio, as well\n      as for identification of encapsulated data
    within Ogg through\n      Skeleton.\n"
  title: 6.  Encoding Considerations
- contents:
  - "7.  Security Considerations\n   Refer to [RFC3552] for a discussion of terminology
    used in this\n   section.\n   The Ogg encapsulation format is a container and
    only a carrier of\n   content (such as audio, video, and displayable text data)
    with a very\n   rigid definition.  This format in itself is not more vulnerable
    than\n   any other content framing mechanism.\n   Ogg does not provide for any
    generic encryption or signing of itself\n   or its contained bitstreams.  However,
    it encapsulates any kind of\n   binary content and is thus able to contain encrypted
    and signed\n   content data.  It is also possible to add an external security\n
    \  mechanism that encrypts or signs an Ogg bitstream and thus provides\n   content
    confidentiality and authenticity.\n   As Ogg encapsulates binary data, it is possible
    to include executable\n   content in an Ogg bitstream.  Implementations SHOULD
    NOT execute such\n   content without prior validation of its origin by the end-user.\n
    \  Issues may arise on applications that use Ogg for streaming or file\n   transfer
    in a networking scenario.  In such cases, implementations\n   decoding Ogg and
    its encapsulated bitstreams have to ensure correct\n   handling of manipulated
    bitstreams, of buffer overflows, and similar\n   issues.\n   It is also possible
    to author malicious Ogg bitstreams, which attempt\n   to call for an excessively
    large picture size, high sampling-rate\n   audio, etc.  Implementations SHOULD
    protect themselves against this\n   kind of attack.\n   Ogg has an extensible
    structure, so that it is theoretically possible\n   that metadata fields or media
    formats might be defined in the future\n   which might be used to induce particular
    actions on the part of the\n   recipient, thus presenting additional security
    risks.  However, this\n   type of capability is currently not supported in the
    referenced\n   specification.\n   Implementations may fail to implement a specific
    security model or\n   other means to prevent possibly dangerous operations.  Such
    failure\n   might possibly be exploited to gain unauthorized access to a system\n
    \  or sensitive information; such failure constitutes an unknown factor\n   and
    is thus considered out of the scope of this document.\n"
  title: 7.  Security Considerations
- contents:
  - "8.  Interoperability Considerations\n   The Ogg container format is device-,
    platform-, and vendor-neutral\n   and has proved to be widely implementable across
    different computing\n   platforms through a wide range of encoders and decoders.
    \ A broadly\n   portable reference implementation [libogg] is available under
    the\n   revised (3-clause) BSD license, which is a Free Software license.\n   The
    Xiph.Org Foundation has defined the specification,\n   interoperability, and conformance
    and conducts regular\n   interoperability testing.\n   The use of the Ogg Skeleton
    extension has been confirmed to not cause\n   interoperability issues with existing
    implementations.  Third parties\n   are, however, welcome to conduct their own
    testing.\n"
  title: 8.  Interoperability Considerations
- contents:
  - "9.  IANA Considerations\n   In accordance with the procedures set forth in [RFC4288],
    this\n   document registers two new media types and redefines the existing\n   application/ogg
    as defined in the following section.\n"
  title: 9.  IANA Considerations
- contents:
  - '10.  Ogg Media Types

    '
  - contents:
    - "10.1.  application/ogg\n   Type name: application\n   Subtype name: ogg\n   Required
      parameters: none\n   Optional parameters: codecs, whose syntax is defined in
      RFC 4281.\n   See section 4 of RFC 5334 for a list of allowed values.\n   Encoding
      considerations: See section 6 of RFC 5334.\n   Security considerations: See
      section 7 of RFC 5334.\n   Interoperability considerations: None, as noted in
      section 8 of RFC\n   5334.\n   Published specification: RFC 3533\n   Applications
      which use this media type: Scientific and otherwise that\n   require various
      multiplexed signals or streams of data, with or\n   without scriptable control
      of content.\n   Additional information:\n   Magic number(s): The first four
      bytes, 0x4f 0x67 0x67 0x53,\n   correspond to the string \"OggS\".\n   File
      extension(s): .ogx\n      RFC 3534 defined the file extension .ogg for application/ogg,\n
      \     which RFC 5334 obsoletes in favor of .ogx due to concerns where,\n      historically,
      some implementations expect .ogg files to be solely\n      Vorbis-encoded audio.\n
      \  Macintosh File Type Code(s): OggX\n   Person & Email address to contact for
      further information: See\n   \"Authors' Addresses\" section.\n   Intended usage:
      COMMON\n   Restrictions on usage: The type application/ogg SHOULD only be used\n
      \  in situations where it is not appropriate to serve data under the\n   video/ogg
      or audio/ogg types.  Data served under the application/ogg\n   type SHOULD use
      the .ogx file extension and MUST contain an Ogg\n   Skeleton logical bitstream
      to identify all other contained logical\n   bitstreams.\n   Author: See \"Authors'
      Addresses\" section.\n   Change controller: The Xiph.Org Foundation.\n"
    title: 10.1.  application/ogg
  - contents:
    - "10.2.  video/ogg\n   Type name: video\n   Subtype name: ogg\n   Required parameters:
      none\n   Optional parameters: codecs, whose syntax is defined in RFC 4281.\n
      \  See section 4 of RFC 5334 for a list of allowed values.\n   Encoding considerations:
      See section 6 of RFC 5334.\n   Security considerations: See section 7 of RFC
      5334.\n   Interoperability considerations: None, as noted in section 8 of RFC\n
      \  5334.\n   Published specification: RFC 3533\n   Applications which use this
      media type: Multimedia applications,\n   including embedded, streaming, and
      conferencing tools.\n   Additional information:\n   Magic number(s): The first
      four bytes, 0x4f 0x67 0x67 0x53,\n   correspond to the string \"OggS\".\n   File
      extension(s): .ogv\n   Macintosh File Type Code(s): OggV\n   Person & Email
      address to contact for further information: See\n   \"Authors' Addresses\" section.\n
      \  Intended usage: COMMON\n   Restrictions on usage: The type \"video/ogg\"
      SHOULD be used for Ogg\n   bitstreams containing visual, audio, timed text,
      or any other type of\n   material that requires a visual interface.  It is intended
      for\n   content not complex enough to warrant serving under \"application/\n
      \  ogg\"; for example, a combination of Theora video, Vorbis audio,\n   Skeleton
      metadata, and CMML captioning.  Data served under the type\n   \"video/ogg\"
      SHOULD contain an Ogg Skeleton logical bitstream.\n   Implementations interacting
      with the type \"video/ogg\" SHOULD support\n   multiplexed bitstreams.\n   Author:
      See \"Authors' Addresses\" section.\n   Change controller: The Xiph.Org Foundation.\n"
    title: 10.2.  video/ogg
  - contents:
    - "10.3.  audio/ogg\n   Type name: audio\n   Subtype name: ogg\n   Required parameters:
      none\n   Optional parameters: codecs, whose syntax is defined in RFC 4281.\n
      \  See section 4 of RFC 5334 for a list of allowed values.\n   Encoding considerations:
      See section 6 of RFC 5334.\n   Security considerations: See section 7 of RFC
      5334.\n   Interoperability considerations: None, as noted in section 8 of RFC\n
      \  5334.\n   Published specification: RFC 3533\n   Applications which use this
      media type: Multimedia applications,\n   including embedded, streaming, and
      conferencing tools.\n   Additional information:\n   Magic number(s): The first
      four bytes, 0x4f 0x67 0x67 0x53,\n   correspond to the string \"OggS\".\n   File
      extension(s): .oga, .ogg, .spx\n   Macintosh File Type Code(s): OggA\n   Person
      & Email address to contact for further information: See\n   \"Authors' Addresses\"
      section.\n   Intended usage: COMMON\n   Restrictions on usage: The type \"audio/ogg\"
      SHOULD be used when the\n   Ogg bitstream predominantly contains audio data.
      \ Content served\n   under the \"audio/ogg\" type SHOULD have an Ogg Skeleton
      logical\n   bitstream when using the default .oga file extension.  The .ogg
      and\n   .spx file extensions indicate a specialization that requires no\n   Skeleton
      due to backward compatibility concerns with existing\n   implementations.  In
      particular, .ogg is used for Ogg files that\n   contain only a Vorbis bitstream,
      while .spx is used for Ogg files\n   that contain only a Speex bitstream.\n
      \  Author: See \"Authors' Addresses\" section.\n   Change controller: The Xiph.Org
      Foundation.\n"
    title: 10.3.  audio/ogg
  title: 10.  Ogg Media Types
- contents:
  - "11.  Acknowledgements\n   The authors gratefully acknowledge the contributions
    of Magnus\n   Westerlund, Alfred Hoenes, and Peter Saint-Andre.\n"
  title: 11.  Acknowledgements
- contents:
  - "12.  Copying Conditions\n   The authors agree to grant third parties the irrevocable
    right to\n   copy, use and distribute the work, with or without modification,
    in\n   any medium, without royalty, provided that, unless separate\n   permission
    is granted, redistributed modified works do not contain\n   misleading author,
    version, name of work, or endorsement information.\n"
  title: 12.  Copying Conditions
- contents:
  - '13.  References

    '
  - contents:
    - "13.1.  Normative References\n   [RFC2045]   Freed, N. and N. Borenstein, \"Multipurpose
      Internet Mail\n               Extensions (MIME) Part One: Format of Internet
      Message\n               Bodies\", RFC 2045, November 1996.\n   [RFC2119]   Bradner,
      S., \"Key words for use in RFCs to Indicate\n               Requirement Levels\",
      BCP 14, RFC 2119, March 1997.\n   [RFC3533]   Pfeiffer, S., \"The Ogg Encapsulation
      Format Version 0\",\n               RFC 3533, May 2003.\n   [RFC4281]   Gellens,
      R., Singer, D., and P. Frojdh, \"The Codecs\n               Parameter for \"Bucket\"
      Media Types\", RFC 4281,\n               November 2005.\n   [RFC4288]   Freed,
      N. and J. Klensin, \"Media Type Specifications and\n               Registration
      Procedures\", BCP 13, RFC 4288,\n               December 2005.\n"
    title: 13.1.  Normative References
  - contents:
    - "13.2.  Informative References\n   [CMML]      Pfeiffer, S., Parker, C., and
      A. Pang, \"The Continuous\n               Media Markup Language (CMML)\", Work
      in Progress,\n               March 2006.\n   [Codecs]    Pfeiffer, S. and I.
      Goncalves, \"Specification of MIME\n               types and respective codecs
      parameter\", July 2008,\n               <http://wiki.xiph.org/index.php/MIMETypesCodecs>.\n
      \  [Dirac]     Dirac Group, \"Dirac Specification\",\n               <http://diracvideo.org/specifications/>.\n
      \  [FLAC]      Coalson, J., \"The FLAC Format\",\n               <http://flac.sourceforge.net/format.html>.\n
      \  [libogg]    Xiph.Org Foundation, \"The libogg API\", June 2000,\n               <http://xiph.org/ogg/doc/libogg>.\n
      \  [Ogg]       Xiph.Org Foundation, \"Ogg bitstream documentation: Ogg\n               logical
      and physical bitstream overview, Ogg logical\n               bitstream framing,
      Ogg multi-stream multiplexing\",\n               <http://xiph.org/ogg/doc>.\n
      \  [RFC3534]   Walleij, L., \"The application/ogg Media Type\", RFC 3534,\n
      \              May 2003.\n   [RFC3552]   Rescorla, E. and B. Korver, \"Guidelines
      for Writing RFC\n               Text on Security Considerations\", BCP 72, RFC
      3552,\n               July 2003.\n   [RFC4648]   Josefsson, S., \"The Base16,
      Base32, and Base64 Data\n               Encodings\", RFC 4648, October 2006.\n
      \  [RFC5215]   Barbato, L., \"RTP Payload Format for Vorbis Encoded\n               Audio\",
      RFC 5215, August 2008.\n   [Skeleton]  Pfeiffer, S. and C. Parker, \"The Ogg
      Skeleton Metadata\n               Bitstream\", November 2007,\n               <http://xiph.org/ogg/doc/skeleton.html>.\n
      \  [Speex]     Valin, J., \"The Speex Codec Manual\", February 2002,\n               <http://speex.org/docs/manual/speex-manual>.\n
      \  [SpRTP]     Herlein, G., Valin, J., Heggestad, A., and A. Moizard,\n               \"RTP
      Payload Format for the Speex Codec\", Work\n               in Progress, February
      2008.\n   [Theora]    Xiph.Org Foundation, \"Theora Specification\",\n               October
      2007, <http://theora.org/doc/Theora.pdf>.\n   [ThRTP]     Barbato, L., \"RTP
      Payload Format for Theora Encoded\n               Video\", Work in Progress,
      June 2006.\n   [Vorbis]    Xiph.Org Foundation, \"Vorbis I Specification\",
      July 2004,\n               <http://xiph.org/vorbis/doc/Vorbis_I_spec.html>.\n"
    title: 13.2.  Informative References
  title: 13.  References
- contents:
  - "Authors' Addresses\n   Ivo Emanuel Goncalves\n   Xiph.Org Foundation\n   21 College
    Hill Road\n   Somerville, MA  02144\n   US\n   EMail: justivo@gmail.com\n   URI:
    \  xmpp:justivo@gmail.com\n   Silvia Pfeiffer\n   Xiph.Org Foundation\n   EMail:
    silvia@annodex.net\n   URI:   http://annodex.net/\n   Christopher Montgomery\n
    \  Xiph.Org Foundation\n   EMail: monty@xiph.org\n   URI:   http://xiph.org\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
