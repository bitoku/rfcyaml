- title: __initial_text__
  contents:
  - '                   IBM''s iSeries Telnet Enhancements

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2006).\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This RFC is not a candidate for any level of Internet Standard.\
    \  The\n   IETF disclaims any knowledge of the fitness of this RFC for any\n \
    \  purpose and in particular notes that the decision to publish is not\n   based\
    \ on IETF review for such things as security, congestion control,\n   or inappropriate\
    \ interaction with deployed protocols.  The RFC Editor\n   has chosen to publish\
    \ this document at its discretion.  Readers of\n   this document should exercise\
    \ caution in evaluating its value for\n   implementation and deployment.  See\
    \ RFC 3932 for more information.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the interface to the Telnet server on IBM's\n\
    \   iSeries line of midrange business computers.  This interface allows\n   Telnet\
    \ clients to request a Telnet terminal or printer session using\n   specific session\
    \ attributes related to device names, encryption,\n   language support, auto-sign-on,\
    \ response codes, session association,\n   etc.\n   These support functions are\
    \ implemented primarily using the Telnet\n   Environment option negotiation RFC\
    \ 1572 to define new USERVAR\n   variables that will be recognized by iSeries\
    \ Telnet server.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Standard Telnet Option Negotiation ..............................3\n  \
    \ 3. Enhanced Telnet Option Negotiation ..............................4\n   4.\
    \ Enhanced Display Emulation Support ..............................7\n   5. Enhanced\
    \ Display Auto-Sign-On and Password Encryption ...........9\n      5.1. Data Encryption\
    \ Standard (DES) Password Substitutes .......13\n      5.2. Secure Hash Algorithm\
    \ (SHA) Password Substitutes ..........16\n   6. Kerberos Services Ticket Automatic\
    \ Sign-On Support .............18\n   7. Device Name Collision Processing ...............................21\n\
    \   8. Enhanced Printer Emulation Support .............................22\n  \
    \ 9. Telnet Printer Terminal Types ..................................23\n   10.\
    \ Startup Response Record for Printer and Display Devices .......25\n      10.1.\
    \ Example of a Success Response Record .....................26\n      10.2. Example\
    \ of an Error Response Record ......................27\n      10.3. Example of\
    \ a Response Record with Device Name Retry ......28\n      10.4. Response Codes\
    \ ...........................................31\n   11. Printer Steady-State Pass-Through\
    \ Interface ...................33\n      11.1. Example of a Print Record ................................35\n\
    \      11.2. Example of a Print Complete Record .......................37\n  \
    \    11.3. Example of a Null Print Record ...........................37\n   12.\
    \ End-to-End Print Example ......................................39\n   13. Security\
    \ Considerations .......................................44\n   14. IANA Considerations\
    \ ...........................................44\n   15. Normative References ..........................................44\n\
    \   16. Informative References ........................................44\n  \
    \ 17. Relation to Other RFCs ........................................45\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The iSeries Telnet server enables clients to negotiate both\
    \ terminal\n   and printer device names through Telnet Environment Options\n \
    \  Negotiations [RFC1572].\n   This allows Telnet servers and clients to exchange\
    \ environment\n   information using a set of standard or custom variables.  By\
    \ using a\n   combination of both standard VARs and custom USERVARs, the iSeries\n\
    \   Telnet server allows client Telnet to request a pre-defined specific\n   device\
    \ by name.\n   If no pre-defined device exists, then the device will be created,\n\
    \   with client Telnet having the option to negotiate device attributes,\n   such\
    \ as the code page, character set, keyboard type, etc.\n   Since printers can\
    \ now be negotiated as a device name, new terminal\n   types have been defined\
    \ to request printers.  For example, you can\n   now negotiate \"IBM-3812-1\"\
    \ and \"IBM-5553-B01\" as valid TERMINAL-TYPE\n   options [RFC1091].\n   Finally,\
    \ the iSeries Telnet server will allow exchange of user\n   profile and password\
    \ information, where the password may be in either\n   plain text or encrypted\
    \ form.  If a valid combination of profile and\n   password is received, then\
    \ the client is allowed to bypass the sign-\n   on panel.  The local server setting\
    \ of the QRMTSIGN system value must\n   be either *VERIFY or *SAMEPRF for the\
    \ bypass of the sign-on panel to\n   succeed.\n"
- title: 2.  Standard Telnet Option Negotiation
  contents:
  - "2.  Standard Telnet Option Negotiation\n   Telnet server option negotiation [RFC855]\
    \ typically begins with the\n   issuance, by the server, of an invitation to engage\
    \ in terminal type\n   negotiation with the Telnet client (DO TERMINAL-TYPE) [RFC1091].\
    \  The\n   client and server then enter into a series of sub-negotiations to\n\
    \   determine the level of terminal support that will be used.  After the\n  \
    \ terminal type is agreed upon, the client and server will normally\n   negotiate\
    \ a required set of additional options (EOR [RFC885], BINARY\n   [RFC856], SGA\
    \ [RFC858]) that are required to support \"transparent\n   mode\" or full screen\
    \ 5250/3270 block mode support.  As soon as the\n   required options have been\
    \ negotiated, the server will suspend\n   further negotiations and begin with\
    \ initializing the actual virtual\n   device on the iSeries.  A typical exchange\
    \ might start as follows:\n   iSeries Telnet server             Enhanced Telnet\
    \ client\n   --------------------------        -------------------------\n   IAC\
    \ DO TERMINAL-TYPE        -->\n                               <--   IAC WILL TERMINAL-TYPE\n\
    \   IAC SB TERMINAL-TYPE SEND\n   IAC SE                      -->\n          \
    \                           IAC SB TERMINAL-TYPE IS\n                        \
    \       <--   IBM-5555-C01 IAC SE\n   IAC DO EOR                  -->\n      \
    \                         <--   IAC WILL EOR\n                               <--\
    \   IAC DO EOR\n   IAC WILL EOR                -->\n                         \
    \       .\n                                .\n   (other negotiations)        \
    \ .\n   Actual bytes transmitted in the above example are shown in hex below.\n\
    \   iSeries Telnet server             Enhanced Telnet client\n   --------------------------\
    \        -------------------------\n   FF FD 18                    -->\n     \
    \                          <--   FF FB 18\n   FF FA 18 01 FF F0           -->\n\
    \                                     FF FA 18 00 49 42 4D 2D\n              \
    \                       35 35 35 35 2D 43 30 31\n                            \
    \   <--   FF F0\n   FF FD 19                    -->\n                        \
    \       <--   FF FB 19\n                               <--   FF FD 19\n   FF FB\
    \ 19                    -->\n                                .\n             \
    \                   .\n   (other negotiations)         .\n   Some negotiations\
    \ are symmetrical between client and server, and some\n   are negotiated in one\
    \ direction only.  Also, it is permissible and\n   common practice to bundle more\
    \ than one response or request, or to\n   combine a request with a response, so\
    \ in practice the actual exchange\n   may look different from what is shown above.\n"
- title: 3.  Enhanced Telnet Option Negotiation
  contents:
  - "3.  Enhanced Telnet Option Negotiation\n   In order to accommodate the new environment\
    \ option negotiations, the\n   server will bundle an environment option invitation\
    \ along with the\n   standard terminal type invitation request to the client.\n\
    \   A client should either send a negative acknowledgment (WONT NEW-\n   ENVIRON),\
    \ or at some point after completing terminal-type\n   negotiations, but before\
    \ completing the full set of negotiations\n   required for 5250 transparent mode,\
    \ engage in environment option\n   sub-negotiation with the server.  A maximum\
    \ of 1024 bytes of\n   environment strings may be sent to the server.  A recommended\n\
    \   sequence might look like the following:\n   iSeries Telnet server        \
    \     Enhanced Telnet client\n   --------------------------        -------------------------\n\
    \   IAC DO NEW-ENVIRON\n   IAC DO TERMINAL-TYPE        -->\n   (2 requests bundled)\n\
    \                               <--   IAC WILL NEW-ENVIRON\n   IAC SB NEW-ENVIRON\
    \ SEND\n   VAR IAC SE                  -->\n                                 \
    \    IAC SB NEW-ENVIRON IS\n                                     VAR \"USER\"\
    \ VALUE \"JONES\"\n                                     USERVAR \"DEVNAME\"\n\
    \                                     VALUE \"MYDEVICE07\"\n                 \
    \              <--   IAC SE\n                               <--   IAC WILL TERMINAL-TYPE\n\
    \                                     (do the terminal type\n                \
    \                     sequence first)\n   IAC SB TERMINAL-TYPE SEND\n   IAC SE\
    \                      -->\n                                     IAC SB TERMINAL-TYPE\
    \ IS\n                               <--   IBM-5555-C01 IAC SE\n             \
    \                        (terminal type negotiations\n                       \
    \              completed)\n   IAC DO EOR                  -->\n   (server will\
    \ continue\n   with normal transparent\n   mode negotiations)\n              \
    \                 <--   IAC WILL EOR\n                                .\n    \
    \                            .\n   (other negotiations)         .\n   Actual bytes\
    \ transmitted in the above example are shown in hex below.\n   iSeries Telnet\
    \ server             Enhanced Telnet client\n   --------------------------   \
    \     -------------------------\n   FF FD 27\n   FF FD 18                    -->\n\
    \   (2 requests bundled)\n                               <--   FF FB 27\n   FF\
    \ FA 27 01 00 FF F0        -->\n                                     FF FA 27\
    \ 00 00 55 53 45\n                                     52 01 4A 4F 4E 45 53 03\n\
    \                                     44 45 56 4E 41 4D 45 01\n              \
    \                       4D 59 44 45 56 49 43 45\n                            \
    \   <--   30 37 FF F0\n                               <--   FF FB 18\n       \
    \                              (do the terminal type\n                       \
    \              sequence first)\n   FF FA 18 01 FF F0           -->\n         \
    \                            FF FA 18 00 49 42 4D 2D\n                       \
    \              35 35 35 35 2D 43 30 31\n                               <--   FF\
    \ F0\n   FF FD 19                    -->\n   (server will continue\n   with normal\
    \ transparent\n   mode negotiations)\n                               <--   FF\
    \ FB 19\n                                .\n                                .\n\
    \   (other negotiations)         .\n   Telnet environment options defines 6 standard\
    \ VARs: USER, JOB, ACCT,\n   PRINTER, SYSTEMTYPE, and DISPLAY.  The USER standard\
    \ VAR will hold\n   the value of the iSeries user profile name to be used in auto-sign-on\n\
    \   requests.  The Telnet server will make no direct use of the\n   additional\
    \ 5 VARs, nor are any of them required to be sent.  All\n   standard VARs and\
    \ their values that are received by the Telnet server\n   will be placed in a\
    \ buffer, along with any USERVARs received\n   (described below), and made available\
    \ to a registered initialization\n   exit program to be used for any purpose desired.\n\
    \   There are some reasons you may want to send NEW-ENVIRON negotiations\n   prior\
    \ to TERMINAL-TYPE negotiations.  With an iSeries Telnet server,\n   several virtual\
    \ device modes can be negotiated: 1) VTxxx device, 2)\n   3270 device, and 3)\
    \ 5250 device (includes Network Station).  The\n   virtual device mode selected\
    \ depends on the TERMINAL-TYPE negotiated\n   plus any other Telnet option negotiations\
    \ necessary to support those\n   modes.  The iSeries Telnet server will create\
    \ the desired virtual\n   device at the first opportunity it thinks it has all\
    \ the requested\n   attributes needed to create the device.  This can be as early\
    \ as\n   completion of the TERMINAL-TYPE negotiations.\n   For the case of Transparent\
    \ mode (5250 device), the moment TERMINAL-\n   TYPE, BINARY, and EOR options are\
    \ negotiated, the Telnet server will\n   go create the virtual device.  Receiving\
    \ any NEW-ENVIRON negotiations\n   after these option negotiations are complete\
    \ will result in the NEW-\n   ENVIRON negotiations having no effect on device\
    \ attributes, as the\n   virtual device will have already been created.\n   So,\
    \ for Transparent mode, NEW-ENVIRON negotiations are effectively\n   closed once\
    \ EOR is negotiated, since EOR is generally the last option\n   done.\n   For\
    \ other devices modes (such as VTxxx or 3270), you cannot be sure\n   when the\
    \ iSeries Telnet server thinks it has all the attributes to\n   create the device.\
    \  Recall that NEW-ENVIRON negotiations are\n   optional, and therefore the iSeries\
    \ Telnet server need not wait for\n   any NEW-ENVIRON options prior to creating\
    \ the virtual device.  It is\n   in the clients' best interest to send NEW-ENVIRON\
    \ negotiations as\n   soon as possible, preferably before TERMINAL-TYPE is negotiated.\n\
    \   That way, the client can be sure that the requested attributes were\n   received\
    \ before the virtual device is created.\n"
- title: 4.  Enhanced Display Emulation Support
  contents:
  - "4.  Enhanced Display Emulation Support\n   Telnet environment option USERVARs\
    \ have been defined to allow a\n   compliant Telnet client more control over the\
    \ Telnet server virtual\n   device on the iSeries and to provide information to\
    \ the Telnet server\n   about the client.  These USERVARs allow the client Telnet\
    \ to create\n   or select a previously created virtual device.  If the virtual\
    \ device\n   does not exist and must be created, then the USERVAR variables are\n\
    \   used to create and initialize the device attributes.  If the virtual\n   device\
    \ already exists, the device attributes are modified.\n   The USERVARs defined\
    \ to accomplish this are:\n   USERVAR        VALUE              EXAMPLE      \
    \   DESCRIPTION\n   --------       ----------------   --------------  -------------------\n\
    \   DEVNAME        us-ascii char(x)   MYDEVICE07      Display device name\n  \
    \ KBDTYPE        us-ascii char(3)   USB             Keyboard type\n   CODEPAGE\
    \       us-ascii char(y)   437             Code page\n   CHARSET        us-ascii\
    \ char(y)   1212            Character set\n   IBMSENDCONFREC us-ascii char(3)\
    \   YES | NO        Startup Response\n                                       \
    \                Record desired\n   IBMASSOCPRT    us_ascii char(x)   RFCPRT \
    \         Printer associated\n                                               \
    \        with display\n                                                      \
    \ device\n   x - up to a maximum of 10 characters\n   y - up to a maximum of 5\
    \ characters\n   For a description of the KBDTYPE, CODEPAGE, and CHARSET parameters\n\
    \   and their permissible values, refer to Chapter 8 in the\n   Communications\
    \ Configuration Reference [COMM-CONFIG] and also to\n   Appendix C in National\
    \ Language Support [NLS-SUPPORT].\n   The CODEPAGE and CHARSET USERVARs must be\
    \ associated with a KBDTYPE\n   USERVAR.  If either CODEPAGE or CHARSET are sent\
    \ without KBDTYPE,\n   they will default to system values.  A default value for\
    \ KBDTYPE can\n   be sent to force CODEPAGE and CHARSET values to be used.\n \
    \  iSeries system objects such as device names, user profiles, plain\n   text\
    \ passwords, programs, libraries, etc., are required to be\n   specified in English\
    \ uppercase.  This includes:\n      any letter (A-Z), any number (0-9), special\
    \ characters (# $ _ @)\n   Therefore, where us-ascii is specified for VAR or USERVAR\
    \ values, it\n   is recommended that uppercase ASCII values be sent, which will\
    \ be\n   converted to Extended Binary Coded Decimal Interchange Code (EBCDIC)\n\
    \   by the Telnet server.\n   A special case occurs for encrypted passwords (described\
    \ in the next\n   section), where both the initial password and user profile used\
    \ to\n   build the encrypted password must be EBCDIC English uppercase, in\n \
    \  order to be properly authenticated by the Telnet server.\n   The IBMASSOCPRT\
    \ USERVAR is used to provide the device name of a\n   printer that will be associated\
    \ with the display device that is\n   created.  The device description of the\
    \ printer name provided must\n   currently exist on the Telnet server system.\
    \  The IBMSENDCONFREC\n   USERVAR is used by the enhanced Telnet client to inform\
    \ the Telnet\n   server that a display Startup Response Record should be sent\
    \ to the\n   client.  This record communicates the name of the actual display\n\
    \   device acquired.  If the attempt is unsuccessful, the reason code\n   will\
    \ be set to provide additional information on why the attempt\n   failed.  In\
    \ addition to the device name and reason code, the Startup\n   Response Record\
    \ will contain the name of the Telnet server system.\n   For more details on the\
    \ Startup Response Record, see Section 11 of\n   this document.\n"
- title: 5.  Enhanced Display Auto-Sign-On and Password Encryption
  contents:
  - "5.  Enhanced Display Auto-Sign-On and Password Encryption\n   To allow password\
    \ encryption, new IBMRSEED and IBMSUBSPW USERVARs\n   will be used to exchange\
    \ seed and substitute passwords information.\n   IBMRSEED will carry a random\
    \ seed to be used in both the Data\n   Encryption Standard (DES) and Secure Hash\
    \ Algorithm (SHA) password\n   encryption, and IBMSUBSPW will carry the encrypted\
    \ copy of the\n   password.\n   The DES encryption would use the same 7-step DES-based\
    \ password\n   substitution scheme as APPC and Client Access.  For a description\
    \ of\n   DES encryption, refer to Federal Information Processing Standards\n \
    \  Publications (FIPS) 46-2 [FIPS-46-2] and 81 [FIPS-81].\n   The SHA encryption\
    \ is described in Federal Information Processing\n   Standards Publication 180-1\
    \ [FIPS-180-1].\n   The FIPS documents can be found at the Federal Information\
    \ Processing\n   Standards Publications link:\n      http://www.itl.nist.gov/fipspubs/by-num.htm\n\
    \   If encrypted password exchange is not required, plain text password\n   exchange\
    \ is permitted using the same USERVARs defined for encryption.\n   For this case,\
    \ the random client seed should be set either to an\n   empty value (preferred\
    \ method) or to hexadecimal zeros to indicate\n   the password is not encrypted,\
    \ but is plain text.\n   It should be noted that security of plain text password\
    \ exchange\n   cannot be guaranteed unless the network is physically protected\
    \ or a\n   trusted network (such as an intranet).  If your network is vulnerable\n\
    \   to IP address spoofing or directly connected to the Internet, you\n   should\
    \ engage in encrypted password exchange to validate a client's\n   identity.\n\
    \   Additional VARs and USERVARs have also been defined to allow an\n   auto-sign-on\
    \ user greater control over their startup environment,\n   similar to what is\
    \ supported using the Open Virtual Terminal\n   (QTVOPNVT) API [SYSTEM-API].\n\
    \   The standard VARs supported to accomplish this are:\n   VAR        VALUE \
    \             EXAMPLE           DESCRIPTION\n   --------   ----------------  \
    \ ----------------  -------------------\n   USER       us-ascii char(x)   USERXYZ\
    \           User profile name\n   x - up to a maximum of 10 characters\n   The\
    \ custom USERVARs defined to accomplish this are:\n   USERVAR       VALUE    \
    \          EXAMPLE            DESCRIPTION\n   --------      ---------------- \
    \  ----------------   -----------------\n   IBMRSEED      binary(8)          8-byte\
    \ hex field   Random client\n                                                \
    \         seed\n   IBMSUBSPW     binary(128)        128-byte hex field Substitute\n\
    \                                                         password\n   IBMCURLIB\
    \     us-ascii char(x)   QGPL               Current library\n   IBMIMENU     \
    \ us-ascii char(x)   MAIN               Initial menu\n   IBMPROGRAM    us-ascii\
    \ char(x)   QCMD               Program to call\n   x - up to a maximum of 10 characters\n\
    \   In order to communicate the server random seed value to the client,\n   the\
    \ server will request a USERVAR name made up of a fixed part (the 8\n   characters\
    \ \"IBMRSEED\") immediately followed by an 8-byte hexadecimal\n   variable part,\
    \ which is the server random seed.  The client generates\n   its own 8-byte random\
    \ seed value and uses both seeds to encrypt the\n   password.  Both the encrypted\
    \ password and the client random seed\n   value are then sent to the server for\
    \ authentication.  Telnet\n   environment option rules will need to be adhered\
    \ to when transmitting\n   the client random seed and substituted password values\
    \ to the server.\n   Specifically, since a typical environment string is a variable\
    \ length\n   hexadecimal field, the hexadecimal fields are required to be escaped\n\
    \   and/or byte stuffed according to the RFC 854 [RFC854], where any\n   single\
    \ byte could be misconstrued as a Telnet IAC or other Telnet\n   option negotiation\
    \ control character.  The client must escape and/or\n   byte stuff any bytes that\
    \ could be seen as a Telnet environment\n   option, specifically VAR, VALUE, ESC,\
    \ and USERVAR.\n   If you use the IBMSENDCONFREC USERVAR, as described in Section\
    \ 5 of\n   this document, with a value of YES along with the automatic sign-on\n\
    \   USERVARs described above, you will receive a Startup Response Record\n   that\
    \ will contain a response code informing your Telnet client of the\n   success\
    \ or failure of the automatic sign-on attempt.  See Section 11\n   of this document\
    \ for details on the Startup Response Record.\n   The following illustrates the\
    \ encrypted case:\n   iSeries Telnet server            Enhanced Telnet client\n\
    \   --------------------------       -------------------------------\n   IAC DO\
    \ NEW-ENVIRON          -->\n                               <--  IAC WILL NEW-ENVIRON\n\
    \   IAC SB NEW-ENVIRON SEND\n   USERVAR \"IBMRSEEDxxxxxxxx\"\n   USERVAR \"IBMSUBSPW\"\
    \n   VAR USERVAR IAC SE          -->\n                                    IAC\
    \ SB NEW-ENVIRON IS\n                                    VAR \"USER\" VALUE \"\
    DUMMYUSR\"\n                                    USERVAR \"IBMRSEED\" VALUE \"\
    yyyyyyyy\"\n                                    USERVAR \"IBMSUBSPW\" VALUE \"\
    zzzzzzzz\"\n                               <--  IAC SE\n                     \
    \           .\n                                .\n   (other negotiations)    \
    \     .\n   In this example, \"xxxxxxxx\" is an 8-byte hexadecimal random server\n\
    \   seed, \"yyyyyyyy\" is an 8-byte hexadecimal random client seed, and\n   \"\
    zzzzzzzz\" is an 8-byte hexadecimal encrypted password (if the DES\n   encryption\
    \ algorithm was used) or a 20-byte hexadecimal encrypted\n   password (if the\
    \ SHA encryption algorithm was used).  If the password\n   is not valid, then\
    \ the sign-on panel is not bypassed.  If the\n   password is expired, then the\
    \ sign-on panel is not bypassed.\n   Actual bytes transmitted in the above example\
    \ are shown in hex below,\n   where the server seed is \"7D3E488F18080404\", the\
    \ client seed is\n   \"4E4142334E414233\", and the DES encrypted password is\n\
    \   \"DFB0402F22ABA3BA\".  The user profile used to generate the encrypted\n \
    \  password is \"44554D4D59555352\" (DUMMYUSR), with a plain text password\n \
    \  of \"44554D4D595057\" (DUMMYPW).\n   iSeries Telnet server            Enhanced\
    \ Telnet client\n   --------------------------       -------------------------\n\
    \   FF FD 27                    -->\n                               <--  FF FB\
    \ 27\n   FF FA 27 01 03 49 42 4D\n   52 53 45 45 44 7D 3E 48\n   8F 18 08 04 04\
    \ 03 49 42\n   4D 53 55 42 53 50 57 03\n   00 FF F0                    -->\n \
    \                                   FF FA 27 00 00 55 53 45\n                \
    \                    52 01 44 55 4D 4D 59 55\n                               \
    \     53 52 03 49 42 4D 52 53\n                                    45 45 44 01\
    \ 4E 41 42 33\n                                    4E 41 42 33 03 49 42 4D\n \
    \                                   53 55 42 53 50 57 01 DF\n                \
    \                    B0 40 2F 22 AB A3 BA FF\n                               <--\
    \  F0\n   The following illustrates the plain text case:\n   iSeries Telnet server\
    \            Enhanced Telnet client\n   --------------------------       -------------------------\n\
    \   IAC DO NEW-ENVIRON          -->\n                               <--  IAC WILL\
    \ NEW-ENVIRON\n   IAC SB NEW-ENVIRON SEND\n   USERVAR \"IBMRSEEDxxxxxxxx\"\n \
    \  USERVAR \"IBMSUBSPW\"\n   VAR USERVAR IAC SE          -->\n               \
    \                     IAC SB NEW-ENVIRON IS\n                                \
    \    VAR \"USER\" VALUE \"DUMMYUSR\"\n                                    USERVAR\
    \ \"IBMRSEED\" VALUE\n                                    USERVAR \"IBMSUBSPW\"\
    \ VALUE \"yyyyyyyy\"\n                               <--  IAC SE\n           \
    \                     .\n                                .\n   (other negotiations)\
    \         .\n   In this example, \"xxxxxxxx\" is an 8-byte hexadecimal random\
    \ server\n   seed, and \"yyyyyyyyyy\" is a 128-byte us-ascii client plain text\n\
    \   password.  If the password has expired, then the sign-on panel is not\n  \
    \ bypassed.\n   Actual bytes transmitted in the above example are shown in hex\
    \ below,\n   where the server seed is \"7D3E488F18080404\", the client seed is\n\
    \   empty, and the plain text password is \"44554D4D595057\" (DUMMYPW).\n   The\
    \ user profile used is \"44554D4D59555352\" (DUMMYUSR).\n   iSeries Telnet server\
    \            Enhanced Telnet client\n   --------------------------       -------------------------\n\
    \   FF FD 27                    -->\n                               <--  FF FB\
    \ 27\n   FF FA 27 01 03 49 42 4D\n   52 53 45 45 44 7D 3E 48\n   8F 18 08 04 04\
    \ 03 49 42\n   4D 53 55 42 53 50 57 03\n   00 FF F0                    -->\n \
    \                                   FF FA 27 00 00 55 53 45\n                \
    \                    52 01 44 55 4D 4D 59 55\n                               \
    \     53 52 03 49 42 4D 52 53\n                                    45 45 44 01\
    \ 03 49 42 4D\n                                    53 55 42 53 50 57 01 44\n \
    \                              <--  55 4D 4D 59 50 57 FF F0\n"
- title: 5.1.  Data Encryption Standard (DES) Password Substitutes
  contents:
  - "5.1.  Data Encryption Standard (DES) Password Substitutes\n   Both APPC and Client\
    \ Access use well-known DES encryption algorithms\n   to create encrypted passwords.\
    \  A Network Station or Enhanced Client\n   can generate compatible encrypted\
    \ passwords if it follows these\n   steps, details of which can be found in the\
    \ Federal Information\n   Processing Standards 46-2 [FIPS-46-2].\n   1) Padded_PW\
    \ = Left justified user password padded to the right with\n      '40'X to 8 bytes.\n\
    \      The user's password must be left justified in an 8-byte variable\n    \
    \  and padded to the right with '40'X up to an 8-byte length.  If the\n      user's\
    \ password is 8 bytes in length, no padding will occur.  For\n      computing\
    \ password substitutes for passwords of length 9 and 10,\n      see \"Handling\
    \ passwords of length 9 and 10\" below.  Passwords less\n      than 1 byte or\
    \ greater than 10 bytes in length are not valid.\n      Please note that if password\
    \ is not in EBCDIC, it must be\n      converted to EBCDIC uppercase.\n   2) XOR_PW\
    \ = Padded_PW xor '5555555555555555'X\n      The padded password is Exclusive\
    \ OR'ed with 8 bytes of '55'X.\n   3) SHIFT_RESULT = XOR_PW << 1\n      The entire\
    \ 8-byte result is shifted 1 bit to the left; the left-\n      most bit value\
    \ is discarded, and the rightmost bit value is\n      cleared to 0.\n   4) PW_TOKEN\
    \ = DES_ECB_mode(SHIFT_RESULT,              /* key  */\n                     \
    \         userID_in_EBCDIC_uppercase /* data */ )\n      This shifted result is\
    \ used as key to the Data Encryption Standard\n      (Federal Information Processing\
    \ Standards 46-2 [FIPS-46-2]) to\n      encipher the user identifier.  When the\
    \ user identifier is less\n      than 8 bytes, it is left justified in an 8-byte\
    \ variable and\n      padded to the right with '40'X.  When the user identifier\
    \ is 9 or\n      10 bytes, it is first padded to the right with '40'X to a length\n\
    \      of 10 bytes.  Then bytes 9 and 10 are \"folded\" into bytes 1-8\n     \
    \ using the following algorithm:\n        Bit 0 is the high-order bit (i.e., has\
    \ value of '80'X).\n        Byte 1, bits 0 and 1 are replaced with byte 1, bits\
    \ 0 and 1\n        Exclusive OR'ed with byte 9, bits 0 and 1.\n        Byte 2,\
    \ bits 0 and 1 are replaced with byte 2, bits 0 and 1\n        Exclusive OR'ed\
    \ with byte 9, bits 2 and 3.\n        Byte 3, bits 0 and 1 are replaced with byte\
    \ 3, bits 0 and 1\n        Exclusive OR'ed with byte 9, bits 4 and 5.\n      \
    \  Byte 4, bits 0 and 1 are replaced with byte 4, bits 0 and 1\n        Exclusive\
    \ OR'ed with byte 9, bits 6 and 7.\n        Byte 5, bits 0 and 1 are replaced\
    \ with byte 5, bits 0 and 1\n        Exclusive OR'ed with byte 10, bits 0 and\
    \ 1.\n        Byte 6, bits 0 and 1 are replaced with byte 6, bits 0 and 1\n  \
    \      Exclusive OR'ed with byte 10, bits 2 and 3.\n        Byte 7, bits 0 and\
    \ 1 are replaced with byte 7, bits 0 and 1\n        Exclusive OR'ed with byte\
    \ 10, bits 4 and 5.\n        Byte 8, bits 0 and 1 are replaced with byte 8, bits\
    \ 0 and 1\n        Exclusive OR'ed with byte 10, bits 6 and 7.\n      User identifiers\
    \ greater than 10 bytes or less than 1 byte are not\n      the result of this\
    \ encryption ID, known as PW_TOKEN in the paper.\n   5) Increment PWSEQs and store\
    \ it.\n      Each LU must maintain a pair of sequence numbers for ATTACHs sent\n\
    \      and received on each session.  Each time an ATTACH is generated,\n    \
    \  (and password substitutes are in use on the session) the sending\n      sequence\
    \ number, PWSEQs, is incremented and saved for the next\n      time.  Both values\
    \ are set to zero at BIND time.  So the first use\n      of PWSEQs has the value\
    \ of 1 and increases by one with each use.\n      A new field is added to the\
    \ ATTACH to carry this sequence number.\n      However, in certain error conditions,\
    \ it is possible for the\n      sending side to increment the sequence number,\
    \ and the receiver\n      may not increment it.  When the sender sends a subsequent\
    \ ATTACH,\n      the receiver will detect a missing sequence.  This is allowed.\n\
    \      However the sequence number received must always be larger than\n     \
    \ the previous one, even if some are missing.\n      The maximum number of consecutive\
    \ missing sequence numbers allowed\n      is 16.  If this is exceeded, the session\
    \ is unbound with a\n      protocol violation.\n      Note: The sequence number\
    \ must be incremented for every ATTACH\n      sent.  However, the sequence number\
    \ field is only required to be\n      included in the FMH5 if a password substitute\
    \ is sent (byte 4, bit\n      3 on).\n   6) RDrSEQ = RDr + PWSEQs  /* RDr is server\
    \ seed. */\n      The current value of PWSEQs is added to RDr, the random value\n\
    \      received from the partner LU on this session, yielding RDrSEQ,\n      essentially\
    \ a predictably modified value of the random value\n      received from the partner\
    \ LU at BIND time.\n   7) PW_SUB = DES_CBC_mode(PW_TOKEN,        /* key      */\n\
    \                            (RDrSEQ,         /* 8 bytes  */\n               \
    \              RDs,            /* 8 bytes  */\n                             ID\
    \ xor RDrSEQ,  /* 16 bytes */\n                             PWSEQs,         /*\
    \ 8 bytes  */\n                             )               /* data     */\n \
    \                           )\n        The PW_TOKEN is used as a key to the DES\
    \ function to generate an\n        8-byte value for the following string of inputs.\
    \  The DES CBC\n        mode Initialization Vector (IV) used is 8 bytes of '00'X.\n\
    \          RDrSEQ: the random data value received from the partner LU\n      \
    \            plus the sequence number.\n          RDs:    the random data value\
    \ sent to the partner LU on BIND\n                  for this session.\n      \
    \    A 16-byte value created by:\n                  - padding the user identifier\
    \ with '40'X to a length\n                    of 16 bytes.\n                 \
    \ - Exclusive OR'ing the two 8-byte halves of the padded\n                   \
    \ user identifier with the RDrSEQ value.\n                    Note: User ID must\
    \ first be converted to EBCDIC\n                    uppercase.\n          PWSEQs:\
    \ the sequence number.\n      This is similar to the process used on LU-LU verification\
    \ as\n      described in the Enhanced LU-LU Bind Security.  The resulting\n  \
    \    enciphered random data is the 'password substitute'.\n   8) Handling passwords\
    \ of length 9 and 10\n      1. Generate PW_TOKENa by using characters 1 to 8 of\
    \ the password\n         and steps 1-4 from the previous section.\n      2. Generate\
    \ PW_TOKENb by using characters 9 and 10 and steps 1-4\n         from the previous\
    \ section.  In this case, Padded_PW from step 1\n         will be characters 9\
    \ and 10 padded to the right with '40'X, for\n         a total length of 8.\n\
    \      3. PW_TOKEN = PW_TOKENa xor PW_TOKENb\n      4. Now compute PW_SUB by performing\
    \ steps 5-7 from the previous\n         section.\n   9) Example DES Password Substitute\
    \ Calculation\n      ID:           USER123\n      Password:     ABCDEFG\n    \
    \  Server seed:  '7D4C2319F28004B2'X\n      Client seed:  '08BEF662D851F4B1'X\n\
    \      PWSEQs:       1     (PWSEQs is a sequence number needed in the\n      \
    \                     7-step encryption, and it is always one)\n      DES Encrypted\
    \ Password should be: '5A58BD50E4DD9B5F'X\n"
- title: 5.2.  Secure Hash Algorithm (SHA) Password Substitutes
  contents:
  - "5.2.  Secure Hash Algorithm (SHA) Password Substitutes\n   A Network Station\
    \ or Enhanced Client can generate SHA encrypted\n   passwords if it follows these\
    \ steps.\n   1) Convert the user identifier to uppercase UNICODE format (if it\
    \ is\n      not already in this format).\n      The user identifier must be left\
    \ justified in a 10-byte variable\n      and padded to the right with '40'X up\
    \ to a 10-byte length prior to\n      converting it to UNICODE.  If the user's\
    \ password is 10 bytes in\n      length, no padding will occur.  User identifiers\
    \ of less than 1\n      byte or greater than 10 bytes in length are not valid.\
    \  The user\n      identifier will be 20 bytes in length after conversion to UNICODE,\n\
    \      so the variable that will hold the UNICODE user identifier should\n   \
    \   have a length of 20 bytes.\n   2) Ensure the password is in UNICODE format\
    \ (if it is not already in\n      this format).\n      The user's password must\
    \ be left justified in a 128-byte variable.\n      It does not need to be padded\
    \ to the right with '40'X up to a\n      128-byte length.  Passwords less than\
    \ 1 byte or greater than 128\n      bytes in length are not valid. The password\
    \ will be 2 times its\n      original length after conversion to UNICODE, so the\
    \ maximum length\n      of the variable that will hold the UNICODE password is\
    \ 256 bytes.\n   3) Create a 20-byte password token as follows:\n      PW_token\
    \ = SHA-1(uppercase_unicode_userid,         /* 20 bytes */\n                 \
    \      unicode_password)      /* from 2 to 256 bytes */\n      The actual routine\
    \ to be used to perform the SHA-1 processing is\n      dependent on the programming\
    \ language being used.  For example, if\n      using the Java language, then use\
    \ the java.security class to\n      perform the actual SHA-1 processing.\n   \
    \   The PW_token will be used in subsequent step to actually generate\n      the\
    \ final substitute password.\n   4) Increment PWSEQs and store it.\n   5) Create\
    \ the 20-byte substitute password as follows:\n      PW_SUB = SHA-1(PW_token,\
    \                        /* 20 bytes */\n                     serverseed,    \
    \                  /*  8 bytes */\n                     clientseed,          \
    \            /*  8 bytes */\n                     uppercase_unicode_userid,  \
    \      /* 20 bytes */\n                     PWSEQ)                           /*\
    \  8 bytes */\n      The actual routine to be used to perform the SHA-1 processing\
    \ is\n      dependent on the programming language being used.  For example, if\n\
    \      using the Java language, then use the java.security class to\n      perform\
    \ the actual SHA-1 processing.\n   6) Example SHA Password Substitute Calculation\n\
    \      ID:           USER123\n      Password:     AbCdEfGh123?+\n      Server\
    \ seed:  '3E3A71C78795E5F5'X\n      Client seed:  'B1C806D5D377D994'X\n      PWSEQs:\
    \       1     (PWSEQs is a sequence number needed in the\n                   \
    \        SHA encryption, and it is always one)\n      SHA Encrypted Password should\
    \ be:\n               'E7FAB5F034BEDA42E91F439DD07532A24140E3DD'X\n"
- title: 6.  Kerberos Services Ticket Automatic Sign-On Support
  contents:
  - "6.  Kerberos Services Ticket Automatic Sign-On Support\n   An iSeries Telnet\
    \ server specific USERVAR defined below will contain\n   the complete Generic\
    \ Security Services (GSS) token for use on the\n   iSeries.  Enhanced Telnet clients\
    \ will need to obtain the Kerberos\n   services ticket from a Key Distribution\
    \ Center (KDC).  Implementation\n   steps for acquiring the Kerberos services\
    \ ticket will be limited to\n   the Microsoft Security Support Provider Interface\
    \ (SSPI) example\n   below.  For information on Kerberos services tickets, refer\
    \ to your\n   Network Authentication Service (NAS) documentation.\n   The custom\
    \ USERVAR defined is:\n   USERVAR   VALUE         EXAMPLE              DESCRIPTION\n\
    \   --------- ------------- -------------------- -------------------\n   IBMTICKET\
    \ binary(16384) 16384-byte hex field Kerberos services token\n   Several other\
    \ USERVARs, as defined in Section 6, can be used along\n   with the IBMTICKET\
    \ USERVAR to allow a user greater control over their\n   startup environment.\n\
    \   The custom USERVARs defined to accomplish this are:\n   USERVAR       VALUE\
    \              EXAMPLE            DESCRIPTION\n   --------      ----------------\
    \   ----------------   -----------------\n   IBMCURLIB     us-ascii char(x)  \
    \ QGPL               Current library\n   IBMIMENU      us-ascii char(x)   MAIN\
    \               Initial menu\n   IBMPROGRAM    us-ascii char(x)   QCMD       \
    \        Program to call\n   x - up to a maximum of 10 characters\n   If you use\
    \ the IBMSENDCONFREC USERVAR, as described in Section 5,\n   with a value of YES\
    \ along with the Kerberos ticket USERVARs described\n   above, you will receive\
    \ a Startup Response Record that will contain a\n   response code informing your\
    \ Telnet client of the success or failure\n   of the Kerberos validation attempt.\
    \  See Section 11 for details on\n   the Startup Response Record.\n   The following\
    \ Microsoft SSPI example illustrates how to get the\n   client security token,\
    \ which contains the Kerberos services ticket.\n   1) Get a handle to the user's\
    \ credentials:\n      PSecurityFunctionTable pSSPI_;\n      CredHandle credHandle;\n\
    \      TimeStamp  timeStamp;\n      ss = pSSPI_->AcquireCredentialsHandle(\n \
    \                  NULL,                 // Principal\n                   \"Kerberos\"\
    ,           // PackageName\n                   SECPKG_CRED_OUTBOUND, // CredentialUse\n\
    \                   NULL,                 // LogonID\n                   NULL,\
    \                 // AuthData\n                   NULL,                 // GetKeyFnc\n\
    \                   NULL,                 // GetKeyArg\n                   &credHandle,\
    \          // CredHandle\n                   &timeStamp);          // ExpireTime\n\
    \   2) Initialize security context to \"request delegation\".  Mutual\n      authentication\
    \ is also requested, although it is not required and\n      may not be performed.\n\
    \      CtxtHandle newContext;\n      unsigned long contextAttr;\n      unsigned\
    \ char token[16384] ;\n      unsigned long tokenLen = sizeof(token);\n      SecBuffer\
    \ sbo = {tokenLen, SECBUFFER_TOKEN, token};\n      SecBufferDesc sbdo = {SECBUFFER_VERSION,\
    \ 1, &sbo}\n      pSSPI_->InitializeSecurityContext(\n              &credHandle,\
    \               // CredHandle\n              NULL,                      // Context\n\
    \              \"krbsrv400/fullyqualifiedLowerCaseSystemName\",\n            \
    \                             // ServicePrincipalName\n              ISC_REQ_CONNECTION|ISC_REQ_DELEGATE|ISC_REQ_MUTUAL_AUTH,\n\
    \                                         // ContextRequest\n              NULL,\
    \                      // Reserved\n              SECURITY_NATIVE_DREP,      //\
    \ DataRep\n              NULL,                      // Input\n              NULL,\
    \                      // Reserved\n              &newContext,               //\
    \ NewContext\n              &sbdo,                     // Output\n           \
    \   &contextAttr,              // ContextAttr\n              &timeStamp);    \
    \           // ExpireTime\n   3) Free the user credentials handle with FreeCredentialsHandle().\n\
    \   4) Send security token to Telnet Server (padded with escape\n      characters).\n\
    \   The following illustrates the Kerberos Token Negotiation:\n   iSeries Telnet\
    \ server            Enhanced Telnet client\n   --------------------------    \
    \   -------------------------------\n   IAC DO NEW-ENVIRON          -->\n    \
    \                           <--  IAC WILL NEW-ENVIRON\n   IAC SB NEW-ENVIRON SEND\n\
    \   USERVAR \"IBMRSEEDxxxxxxxx\"\n   VAR USERVAR IAC SE          -->\n       \
    \                             IAC SB NEW-ENVIRON IS\n                        \
    \            USERVAR \"IBMTICKET\" VALUE\n                                   \
    \ \"zzzzzzzz...\"\n                               <--  IAC SE\n              \
    \                  .\n                                .\n   (other negotiations)\
    \         .\n   In this example, \"xxxxxxxx\" is an 8-byte hexadecimal random\
    \ server\n   seed, and \"zzzzzzzz...\" is the complete Kerberos services token.\
    \  If\n   the Kerberos services token is not valid, then the sign-on panel is\n\
    \   not bypassed.  It should be noted that for the Kerberos token a\n   random\
    \ server seed is not needed, although it will be sent by the\n   Telnet Server.\n\
    \   Actual bytes transmitted in the above example are shown in hex below,\n  \
    \ where the server seed is \"7D3E488F18080404\", and the Kerberos\n   services\
    \ token starts with \"DFB0402F22ABA3BA...\".  The complete\n   Kerberos services\
    \ token is not shown here, as the length of the token\n   could be 16384 bytes\
    \ and would make this document extremely large.\n   As described in Section 6,\
    \ the client must escape and/or byte stuff\n   any Kerberos token bytes, which\
    \ could be seen as a Telnet environment\n   option [RFC1572], specifically VAR,\
    \ VALUE, ESC, and USERVAR.\n   iSeries Telnet server            Enhanced Telnet\
    \ client\n   --------------------------       -------------------------\n   FF\
    \ FD 27                    -->\n                               <--  FF FB 27\n\
    \   FF FA 27 01 03 49 42 4D\n   52 53 45 45 44 7D 3E 48\n   8F 18 08 04 04 00\
    \ 03 FF\n   F0                          -->\n                                \
    \    FF FA 27 00 03 49 42 4D\n                                    54 49 43 48\
    \ 45 54 01 DF\n                                    B0 40 2F 22 AB A3 BA...\n \
    \                              <--  FF F0\n"
- title: 7.  Device Name Collision Processing
  contents:
  - "7.  Device Name Collision Processing\n   Device name collision occurs when a\
    \ Telnet client sends the Telnet\n   server a virtual device name that it wants\
    \ to use, but that device is\n   already in use on the server.  When this occurs,\
    \ the Telnet server\n   sends a request to the client asking it to try another\
    \ device name.\n   The environment option negotiation uses the USERVAR name of\
    \ DEVNAME\n   to communicate the virtual device name.  The following shows how\
    \ the\n   Telnet server will request the Telnet client to send a different\n \
    \  DEVNAME when device name collision occurs.\n   iSeries Telnet server      \
    \      Enhanced Telnet client\n   --------------------------       -------------------------\n\
    \   IAC SB NEW-ENVIRON SEND\n   VAR USERVAR IAC SE         -->\n   Server requests\
    \ all environment variables be sent.\n                                    IAC\
    \ SB NEW-ENVIRON IS USERVAR\n                                    \"DEVNAME\" VALUE\
    \ \"MYDEVICE1\"\n                                    USERVAR \"xxxxx\" VALUE \"\
    xxx\"\n                                    ...\n                             \
    \ <--   IAC SE\n   Client sends all environment variables, including DEVNAME.\
    \  Server\n   tries to select device MYDEVICE1.  If the device is already in use,\n\
    \   server requests DEVNAME be sent again.\n   IAC SB NEW-ENVIRON SEND\n   USERVAR\
    \ \"DEVNAME\" IAC SE   -->\n   Server sends a request for a single environment\
    \ variable: DEVNAME\n                                    IAC SB NEW-ENVIRON IS\
    \ USERVAR\n                              <--   \"DEVNAME\" VALUE \"MYDEVICE2\"\
    \ IAC SE\n   Client sends one environment variable, calculating a new value of\n\
    \   MYDEVICE2.  If MYDEVICE2 is different from the last request, then\n   server\
    \ tries to select device MYDEVICE2, else server disconnects\n   client.  If MYDEVICE2\
    \ is also in use, server will send DEVNAME\n   request again and keep doing so\
    \ until it receives a device that is\n   not in use, or the same device name twice\
    \ in row.\n"
- title: 8.  Enhanced Printer Emulation Support
  contents:
  - "8.  Enhanced Printer Emulation Support\n   Telnet environment option USERVARs\
    \ have been defined to allow a\n   compliant Telnet client more control over the\
    \ Telnet server virtual\n   device on the iSeries.  These USERVARs allow the client\
    \ Telnet to\n   select a previously created virtual device or auto-create a new\n\
    \   virtual device with requested attributes.\n   This makes the enhancements\
    \ available to any Telnet client that\n   chooses to support the new negotiations.\n\
    \   The USERVARs defined to accomplish this are:\n   USERVAR       VALUE     \
    \       EXAMPLE           DESCRIPTION\n   ------------- ---------------- ----------------\
    \  -------------------\n   DEVNAME       us-ascii char(x) PRINTER1          Printer\
    \ device name\n   IBMIGCFEAT    us-ascii char(6) 2424J0            IGC feature\
    \ (DBCS)\n   IBMMSGQNAME   us-ascii char(x) QSYSOPR           *MSGQ name\n   IBMMSGQLIB\
    \    us-ascii char(x) QSYS              *MSGQ library\n   IBMFONT       us-ascii\
    \ char(x) 12                Font\n   IBMFORMFEED   us-ascii char(1) C | U | A\
    \         Formfeed\n   IBMTRANSFORM  us-ascii char(1) 1 | 0             Transform\n\
    \   IBMMFRTYPMDL  us-ascii char(x) *IBM42023         Mfg. type and model\n   IBMPPRSRC1\
    \    binary(1)        1-byte hex field  Paper source 1\n   IBMPPRSRC2    binary(1)\
    \        1-byte hex field  Paper source 2\n   IBMENVELOPE   binary(1)        1-byte\
    \ hex field  Envelope hopper\n   IBMASCII899   us-ascii char(1) 1 | 0        \
    \     ASCII 899 support\n   IBMWSCSTNAME  us-ascii char(x) *NONE             WSCST\
    \ name\n   IBMWSCSTLIB   us-ascii char(x) *LIBL             WSCST library\n  \
    \ x - up to a maximum of 10 characters\n   The \"IBM\" prefix on the USERVARs\
    \ denotes iSeries-specific attributes.\n   The DEVNAME USERVAR is used for both\
    \ displays and printers.  The\n   IBMFONT and IBMASCII899 are used only for SBCS\
    \ environments.\n   For a description of most of these parameters (drop the \"\
    IBM\" from\n   the USERVAR) and their permissible values, refer to Chapter 8 in\
    \ the\n   Communications Configuration Reference [COMM-CONFIG].\n   The IBMIGCFEAT\
    \ supports the following variable DBCS language\n   identifiers in position 5\
    \ (positions 1-4 must be '2424'; position 6\n   must be '0'):\n       'J' = Japanese\
    \              'K' = Korean\n       'C' = Traditional Chinese   'S' = Simplified\
    \ Chinese\n   The IBMTRANSFORM and IBMASCII899 values correspond to:\n       '1'\
    \ = Yes  '0' = No\n   The IBMFORMFEED values correspond to:\n       'C' = Continuous\
    \  'U' = Cut  'A' = Autocut\n   The IBMPPRSRC1, IBMPPRSRC2, and IBMENVELOPE custom\
    \ USERVARs do not\n   map directly to their descriptions in Chapter 8 in the Communications\n\
    \   Configuration Reference [COMM-CONFIG].  To map these, use the index\n   listed\
    \ here:\n   IBMPPRSRC1    HEX     IBMPPRSRC2    HEX     IBMENVELOPE    HEX\n \
    \  ----------   -----    ----------   -----    -----------   -----\n   *NONE \
    \       'FF'X    *NONE        'FF'X    *NONE         'FF'X\n   *MFRTYPMDL   '00'X\
    \    *MFRTYPMDL   '00'X    *MFRTYPMDL    '00'X\n   *LETTER      '01'X    *LETTER\
    \      '01'X    *B5           '06'X\n   *LEGAL       '02'X    *LEGAL       '02'X\
    \    *MONARCH      '09'X\n   *EXECUTIVE   '03'X    *EXECUTIVE   '03'X    *NUMBER9\
    \      '0A'X\n   *A4          '04'X    *A4          '04'X    *NUMBER10     '0B'X\n\
    \   *A5          '05'X    *A5          '05'X    *C5           '0C'X\n   *B5  \
    \        '06'X    *B5          '06'X    *DL           '0D'X\n   *CONT80      '07'X\
    \    *CONT80      '07'X\n   *CONT132     '08'X    *CONT132     '08'X\n   *A3 \
    \         '0E'X    *A3          '0E'X\n   *B4          '0F'X    *B4          '0F'X\n\
    \   *LEDGER      '10'X    *LEDGER      '10'X\n"
- title: 9.  Telnet Printer Terminal Types
  contents:
  - "9.  Telnet Printer Terminal Types\n   New Telnet options are defined for the\
    \ printer pass-through mode of\n   operation.  To enable printer pass-through\
    \ mode, both the client and\n   server must agree to support at least the Transmit-Binary,\
    \ End-Of-\n   Record, and Terminal-Type Telnet options.  The following are new\n\
    \   terminal types for printers:\n   TERMINAL-TYPE  DESCRIPTION\n   -------------\
    \  -------------------\n   IBM-5553-B01   Double-Byte printer\n   IBM-3812-1 \
    \    Single-Byte printer\n   Specific characteristics of the IBM-5553-B01 or IBM-3812-1\
    \ printers\n   are specified through the USERVAR IBMMFRTYPMDL, which specifies\
    \ the\n   manufacturer type and model.\n   An example of a typical negotiation\
    \ process to establish printer\n   pass-through mode of operation is shown below.\
    \  In this example, the\n   server initiates the negotiation by sending the DO\
    \ TERMINAL-TYPE\n   request.\n   For DBCS environments, if IBMTRANSFORM is set\
    \ to 1 (use Host Print\n   Transform), then the virtual device created is 3812,\
    \ not 5553.\n   Therefore, IBM-3812-1 (and not IBM-5553-B01) should be negotiated\
    \ for\n   TERMINAL-TYPE.\n   iSeries Telnet server           Enhanced Telnet client\n\
    \   --------------------------      --------------------------\n   IAC DO NEW-ENVIRON\
    \         -->\n                              <--  IAC WILL NEW-ENVIRON\n   IAC\
    \ SB NEW-ENVIRON SEND\n   VAR USERVAR IAC SE         -->\n                   \
    \                IAC SB NEW-ENVIRON IS\n                                   USERVAR\
    \ \"DEVNAME\" VALUE \"PCPRINTER\"\n                                   USERVAR\
    \ \"IBMMSGQNAME\" VALUE \"QSYSOPR\"\n                                   USERVAR\
    \ \"IBMMSGQLIB\" VALUE \"*LIBL\"\n                                   USERVAR \"\
    IBMTRANSFORM\" VALUE \"0\"\n                                   USERVAR \"IBMFONT\"\
    \ VALUE \"12\"\n                                   USERVAR \"IBMFORMFEED\" VALUE\
    \ \"C\"\n                                   USERVAR \"IBMPPRSRC1\" VALUE ESC '01'X\n\
    \                                   USERVAR \"IBMPPRSRC2\" VALUE '04'X\n     \
    \                              USERVAR \"IBMENVELOPE\" VALUE IAC 'FF'X\n     \
    \                         <--  IAC SE\n   IAC DO TERMINAL-TYPE       -->\n   \
    \                           <--  IAC WILL TERMINAL-TYPE\n   IAC SB TERMINAL-TYPE\
    \ SEND\n   IAC SE                     -->\n                                  \
    \ IAC SB TERMINAL-TYPE IS IBM-3812-1\n                              <--  IAC SE\n\
    \   IAC DO BINARY              -->\n                              <--  IAC WILL\
    \ BINARY\n   IAC DO EOR                 -->\n                              <--\
    \  IAC WILL EOR\n   Some points about the above example.  The IBMPPRSRC1 value\
    \ requires\n   escaping the value using ESC according to Telnet environment options\n\
    \   [RFC1572].  The IBMPPRSRC2 does not require an ESC character since\n   '04'X\
    \ has no conflict with environment options.  Finally, to send\n   'FF'X for the\
    \ IBMENVELOPE value, escape the 'FF'X value by using\n   another 'FF'X (called\
    \ \"doubling\"), so as not to have the value\n   interpreted as a Telnet character\
    \ per the Telnet protocol\n   specification [RFC854].\n   Actual bytes transmitted\
    \ in the above example are shown in hex below.\n   iSeries Telnet server     \
    \       Enhanced Telnet client\n   --------------------------       --------------------------\n\
    \   FF FD 27                    -->\n                               <--  FF FB\
    \ 27\n   FF FA 27 01 00 03 FF F0     -->\n                                   \
    \ FF FA 27 00 03 44 45 56\n                                    4E 41 4D 45 01\
    \ 50 43 50\n                                    52 49 4E 54 45 52 03 49\n    \
    \                                42 4D 4D 53 47 51 4E 41\n                   \
    \                 4D 45 01 51 53 59 53 4F\n                                  \
    \  50 52 03 49 42 4D 4D 53\n                                    47 51 4C 49 42\
    \ 01 2A 4C\n                                    49 42 4C 03 49 42 4D 54\n    \
    \                                52 41 4E 53 46 4F 52 4D\n                   \
    \                 01 30 03 49 42 4D 46 4F\n                                  \
    \  4E 54 01 31 32 03 49 42\n                                    4D 46 4F 52 4D\
    \ 46 45 45\n                                    44 01 43 03 49 42 4D 50\n    \
    \                                50 52 53 52 43 31 01 02\n                   \
    \                 01 03 49 42 4D 50 50 52\n                                  \
    \  53 52 43 32 01 04 03 49\n                                    42 4D 45 4E 56\
    \ 45 4C 4F\n                               <--  50 45 01 FF FF FF F0\n   FF FD\
    \ 18                    -->\n                               <--  FF FB 18\n  \
    \ FF FA 18 01 FF F0           -->\n                                    FF FA 18\
    \ 00 49 42 4D 2D\n                               <--  33 38 31 32 2D 31 FF F0\n\
    \   FF FD 00                    -->\n                               <--  FF FB\
    \ 00\n   FF FD 19                    -->\n                                   \
    \ FF FB 19\n"
- title: 10.  Startup Response Record for Printer and Display Devices
  contents:
  - "10.  Startup Response Record for Printer and Display Devices\n   Once Telnet\
    \ negotiation for a 5250 pass-through mode is completed,\n   the iSeries Telnet\
    \ server will initiate a virtual device (printer or\n   display) power-on sequence\
    \ on behalf of the Telnet client.  The\n   Telnet server will supply a Startup\
    \ Response Record to the Telnet\n   client with the status of the device power-on\
    \ sequence, indicating\n   success or failure of the virtual device power-on sequence.\n\
    \   This section shows an example of two Startup Response Records.  The\n   source\
    \ device is a type 3812 model 01 printer with the name\n   \"PCPRINTER\" on the\
    \ target system \"TARGET\".\n   Figure 1 shows an example of a successful response;\
    \ Figure 2 shows an\n   example of an error response.\n"
- title: 10.1.  Example of a Success Response Record
  contents:
  - "10.1.  Example of a Success Response Record\n   The response record in Figure\
    \ 1 was sent by an iSeries at Release\n   V4R2.  It is an example of the target\
    \ sending back a successful\n   Startup Response Record.\n   +------------------------------------------------------------------+\n\
    \   |       +-----  Pass-Through header                                |\n   |\
    \       |          +---  Response data                             |\n   |   \
    \    |          |            +----  Start diagnostic information|\n   |      \
    \ |          |            |                                  |\n   | +----------++----------++---------------------------------------\
    \ |\n   | |          ||          ||                                        |\n\
    \   | 004912A090000560060020C0003D0000C9F9F0F2E3C1D9C7C5E34040D7C3D7D9 |\n   |\
    \                                 |      | T A R G E T     P C P R |\n   |   \
    \                              +------+                         |\n   |      \
    \                     Response Code (I902)                   |\n   |         \
    \                                                         |\n   | ----------------------------------------------------------------\
    \ |\n   |                                                                  |\n\
    \   | C9D5E3C5D9400000000000000000000000000000000000000000000000000000 |\n   |\
    \  I N T E R                                                       |\n   |   \
    \                                                               |\n   |      \
    \            +------- End of diagnostic information          |\n   |         \
    \         |                                               |\n   | -----------------+\
    \                                               |\n   |                  |   \
    \                                            |\n   | 000000000000000000      \
    \                                         |\n   +------------------------------------------------------------------+\n\
    \             Figure 1.  Example of a success response record\n   - '0049'X =\
    \ Length pass-through data, including this length field\n   - '12A0'X = GDS LU6.2\
    \ header\n   - '90000560060020C0003D0000'X = Fixed value fields\n   - 'C9F9F0F2'X\
    \                 = Response Code (I902)\n   - 'E3C1D9C7C5E34040'X         = System\
    \ Name (TARGET)\n   - 'D7C3D7D9C9D5E3C5D940'X     = Object Name (PCPRINTER)\n"
- title: 10.2.  Example of an Error Response Record
  contents:
  - "10.2.  Example of an Error Response Record\n   The response record in Figure\
    \ 2 is one that reports an error.  The\n   virtual device named \"PCPRINTER\"\
    \ is not available on the target\n   system \"TARGET\" because the device is not\
    \ available.  You would\n   normally see this error if the printer were already\
    \ assigned to\n   another Telnet session.\n   +------------------------------------------------------------------+\n\
    \   |       +-----  Pass-Through header                                |\n   |\
    \       |          +---  Response data                             |\n   |   \
    \    |          |            +----  Start diagnostic information|\n   |      \
    \ |          |            |                                  |\n   | +----------++----------++---------------------------------------\
    \ |\n   | |          ||          ||                                        |\n\
    \   | 004912A09000056006008200003D0000F8F9F0F2E3C1D9C7C5E34040D7C3D7D9 |\n   |\
    \                                 |      | T A R G E T     P C P R |\n   |   \
    \                              +------+                         |\n   |      \
    \                     Response Code (8902)                   |\n   |         \
    \                                                         |\n   | ----------------------------------------------------------------\
    \ |\n   |                                                                  |\n\
    \   | C9D5E3C5D9400000000000000000000000000000000000000000000000000000 |\n   |\
    \  I N T E R                                                       |\n   |   \
    \                                                               |\n   |      \
    \            +------- End of diagnostic information          |\n   |         \
    \         |                                               |\n   | -----------------+\
    \                                               |\n   |                  |   \
    \                                            |\n   | 000000000000000000      \
    \                                         |\n   +------------------------------------------------------------------+\n\
    \             Figure 2.  Example of an error response record\n   - '0049'X = Length\
    \ pass-through data, including this length field\n   - '12A0'X = GDS LU6.2 header\n\
    \   - '90000560060020C0003D0000'X = Fixed value fields\n   - 'F8F9F0F2'X     \
    \            = Response Code (8902)\n   - 'E3C1D9C7C5E34040'X         = System\
    \ Name (TARGET)\n   - 'D7C3D7D9C9D5E3C5D940'X     = Object Name (PCPRINTER)\n"
- title: 10.3.  Example of a Response Record with Device Name Retry
  contents:
  - "10.3.  Example of a Response Record with Device Name Retry\n   The Response Record\
    \ can be used in conjunction with the DEVNAME\n   Environment variable to allow\
    \ client emulators to inform users of\n   connection failures.  In addition, this\
    \ combination could be used by\n   client emulators that accept multiple device\
    \ names to try on session\n   connections.  The client would be able to walk through\
    \ a list of\n   possible device names and provide feedback based on the response\n\
    \   code(s) received for each device name that was rejected.\n   The following\
    \ sequence shows a negotiation between the client and the\n   server in which\
    \ a named device \"RFCTEST\" is requested by the client.\n   The device name is\
    \ already assigned to an existing condition.  The\n   server responds with the\
    \ Response Record showing an 8902 response\n   code.  The client could use this\
    \ information to inform the user that\n   the device name just tried was already\
    \ in use.  Following the\n   Response Record the server would then invite the\
    \ client to try\n   another device name.  Because the same device name was used\
    \ again by\n   the client, the server closed the session.\n   iSeries Telnet server\
    \            Enhanced Telnet client\n   --------------------------       -------------------------\n\
    \   IAC DO NEW-ENVIRON          -->\n                               <--   IAC\
    \ WILL NEW-ENVIRON\n   IAC DO TERMINAL-TYPE        -->\n                     \
    \          <--   IAC WILL TERMINAL-TYPE\n   IAC SB NEW-ENVIRON SEND\n   USERVAR\
    \ \"IBMRSEEDxxxxxxxx\"\n   VAR USERVAR IAC SE          -->\n                 \
    \                    IAC SB NEW-ENVIRON IS\n                                 \
    \    USERVAR \"DEVNAME\"\n                                     VALUE \"RFCTEST\"\
    \n                                     USERVAR \"IBMSENDCONFREC\"\n          \
    \                           VALUE \"YES\"\n                               <--\
    \   IAC SE\n   IAC SB TERMINAL-TYPE SEND\n   IAC SE                      -->\n\
    \                                     IAC SB TERMINAL-TYPE IS\n              \
    \                 <--   IBM-3180-2 IAC SE\n                                  \
    \   (terminal type negotiations\n                                     completed)\n\
    \   IAC DO EOR                  -->\n                               <--   IAC\
    \ WILL EOR\n   IAC WILL EOR                -->\n                             \
    \  <--   IAC DO EOR\n   IAC DO BINARY               -->\n                    \
    \           <--   IAC WILL BINARY\n   IAC WILL BINARY             -->\n      \
    \                         <--   IAC DO BINARY\n   (73 BYTE RFC 1205 RECORD\n \
    \  WITH 8902 ERROR CODE)       -->\n   IAC SB NEW-ENVIRON SEND\n   USERVAR \"\
    DEVNAME\"\n   IAC SE                      -->\n                              \
    \       IAC SB NEW-ENVIRON IS\n                                     USERVAR \"\
    DEVNAME\"\n                                     VALUE \"RFCTEST\"\n          \
    \                           USERVAR \"IBMSENDCONFREC\"\n                     \
    \                VALUE \"YES\"\n                               <--   IAC SE\n\
    \   (server closes connection)\n   Actual bytes transmitted in the above example\
    \ are shown in hex below.\n   iSeries Telnet server            Enhanced Telnet\
    \ client\n   --------------------------       --------------------------\n   FF\
    \ FD 27                    -->\n                               <--  FF FB 27\n\
    \   FF FD 18                    -->\n                               <--  FF FB\
    \ 18\n   FF FA 27 01 03 49 42 4D\n   52 53 45 45 44 C4 96 67\n   76 9A 23 E3 34\
    \ 00 03 FF\n   F0                          -->\n                             \
    \       FF FA 27 00 03 44 45 56\n                                    4E 41 4D\
    \ 45 01 52 46 43\n                                    54 45 53 54 03 49 42 4D\n\
    \                                    53 45 4E 44 43 4F 4E 46\n               \
    \                     52 45 43 01 59 45 53 FF\n                              \
    \ <--  F0\n   FF FA 18 01 FF F0           -->\n                              \
    \ <--  FF FA 18 00 49 42 4D 2D\n                                    33 31 38 30\
    \ 2D 32 FF F0\n   FF FD 19                    -->\n                          \
    \     <--  FF FB 19\n   FF FB 19                    -->\n                    \
    \           <--  FF FD 19\n   FF FD 00                    -->\n              \
    \                 <--  FF FB 00\n   FF FB 00                    -->\n        \
    \                       <--  FF FD 00\n   00 49 12 A0 90 00 05 60\n   06 00 20\
    \ C0 00 3D 00 00\n   F8 F9 F0 F2 D9 E2 F0 F3\n   F5 40 40 40 00 00 00 00\n   00\
    \ 00 00 00 00 00 00 00\n   00 00 00 00 00 00 00 00\n   00 00 00 00 00 00 00 00\n\
    \   00 00 00 00 00 00 00 00\n   00 00 00 00 00 00 00 00\n   00 FF EF         \
    \           -->\n   FF FA 27 01 03 44 45 56\n   4E 41 4D 45 FF F0           -->\n\
    \                               <--  FF FA 27 00 03 44 45 56\n               \
    \                     4E 41 4D 45 01 52 46 43\n                              \
    \      54 45 53 54 03 49 42 4D\n                                    53 45 4E 44\
    \ 43 4F 4E 46\n                                    52 45 43 01 59 45 53 FF\n \
    \                                   F0\n"
- title: 10.4.  Response Codes
  contents:
  - "10.4.  Response Codes\n   The Start-Up Response Record success response codes:\n\
    \   CODE    DESCRIPTION\n   ----    ------------------------------------------------------\n\
    \   I901    Virtual device has less function than source device.\n   I902    Session\
    \ successfully started.\n   I906    Automatic sign-on requested, but not allowed.\n\
    \           Session still allowed; a sign-on screen will be\n           coming.\n\
    \   The Start-Up Response Record error response codes:\n   CODE    DESCRIPTION\n\
    \   ----    ------------------------------------------------------\n   2702  \
    \  Device description not found.\n   2703    Controller description not found.\n\
    \   2777    Damaged device description.\n   8901    Device not varied on.\n  \
    \ 8902    Device not available.\n   8903    Device not valid for session.\n  \
    \ 8906    Session initiation failed.\n   8907    Session failure.\n   8910   \
    \ Controller not valid for session.\n   8916    No matching device found.\n  \
    \ 8917    Not authorized to object.\n   8918    Job canceled.\n   8920    Object\
    \ partially damaged.\n   8921    Communications error.\n   8922    Negative response\
    \ received.\n   8923    Start-up record built incorrectly.\n   8925    Creation\
    \ of device failed.\n   8928    Change of device failed.\n   8929    Vary on or\
    \ vary off failed.\n   8930    Message queue does not exist.\n   8934    Start-up\
    \ for S/36 WSF received.\n   8935    Session rejected.\n   8936    Security failure\
    \ on session attempt.\n   8937    Automatic sign-on rejected.\n   8940    Automatic\
    \ configuration failed or not allowed.\n   I904    Source system at incompatible\
    \ release.\n   The Start-Up Response Record error response codes for non-Kerberos\n\
    \   Services Token automatic sign-on:\n      CODE    DESCRIPTION\n      ---- \
    \   ------------------------------------------------------\n      0001    System\
    \ error.\n      0002    Userid unknown.\n      0003    Userid disabled.\n    \
    \  0004    Invalid password/passphrase/token.\n      0005    Password/passphrase/token\
    \ is expired.\n      0006    Pre-V2R2 password.\n      0008    Next invalid password/passphrase/token\
    \ will revoke userid.\n   The Start-Up Response Record error response codes for\
    \ Kerberos\n   Services Token automatic sign-on support:\n   CODE    DESCRIPTION\n\
    \   ----    ------------------------------------------------------\n   0001  \
    \  User profile is disabled.\n   0002    Kerberos principal maps to a system user\
    \ profile.\n   0003    Enterprise Identity Map (EIM) configuration error.\n  \
    \ 0004    EIM does not map Kerberos principal to user profile.\n   0005    EIM\
    \ maps Kerberos principal to multiple user profiles.\n   0006    EIM maps Kerberos\
    \ principal to user profile not found on\n           system.\n   1000    None\
    \ of the requested mechanisms are supported by the\n           local system.\n\
    \   2000    The input name is not formatted properly or is not valid.\n   6000\
    \    The received input token contains an incorrect signature.\n   7000    No\
    \ credentials available or credentials valid for context\n           init only.\n\
    \   9000    Consistency checks performed on the input token failed.\n   A000 \
    \   Consistency checks on the cred structure failed.\n   B000    Credentials are\
    \ no longer valid.\n   D000    The runtime failed for reasons that are not defined\
    \ at the\n           GSS level.\n   In the case where the USERVAR, DEVNAME USERVAR,\
    \ IBMSENDCONFREC\n   USERVAR, IBMSUBSPW USERVAR, and IBMRSEED USERVAR are all\
    \ used\n   together, any device errors will take precedence over automatic\n \
    \  sign-on errors.  That is:\n   1) If the requested named device is not available\
    \ or an error occurs\n      when attempting to create the device on the server\
    \ system, a\n      device related return code (i.e., 8902) will be sent to the\
    \ client\n      system in the display confirmation record.\n   2) If the requested\
    \ named device is available or no errors occur when\n      attempting to create\
    \ the device on the server system, an automatic\n      sign-on return code (i.e.,\
    \ 0002) will be sent to the client system\n      in the display confirmation record.\n"
- title: 11.  Printer Steady-State Pass-Through Interface
  contents:
  - "11.  Printer Steady-State Pass-Through Interface\n   The information in this\
    \ section applies to the pass-through session\n   after the receipt of startup\
    \ confirmation records is complete.\n   Following is the printer header interface\
    \ used by Telnet.\n   +------------------------------------------------------------------+\n\
    \   |   +-- Length of structure (LLLL)                                 |\n   |\
    \   |                                                              |\n   |   |\
    \    +-- GDS identifier                                        |\n   |   |   \
    \ |                                                         |\n   |   |    | \
    \   +-- Data flow record                                 |\n   |   |    |    |\
    \                                                    |\n   |   |    |    |   +--\
    \ Length of pass-through specific header (LL)  |\n   |   |    |    |   |     \
    \                                           |\n   |   |    |    |   |   +-- Flags\
    \                                    |\n   |   |    |    |   |   |           \
    \                                 |\n   |   |    |    |   |   |   +-- Printer\
    \ operation code               |\n   |   |    |    |   |   |   |             \
    \                           |\n   |   |    |    |   |   |   |      +-- Diagnostic\
    \ field - zero pad to|\n   |   |    |    |   |   |   |      |   LL specified \
    \                 |\n   |   |    |    |   |   |   |      |                   \
    \              |\n   |   |    |    |   |   |   |      |            +-- Printer\
    \ data     |\n   |   |    |    |   |   |   |      |            |             \
    \       |\n   | +--+ +--+ +--+ ++ +--+ ++ +----------+ +----------------+    \
    \    |\n   | |  | |  | |  | || |  | || |          | |                |       \
    \ |\n   | xxxx 12A0 xxxx xx xxxx xx xxxxxxxxxxxx ... print data ...        |\n\
    \   |                                                                  |\n   +------------------------------------------------------------------+\n\
    \           Figure 3.  Layout of the printer pass-through header\n   BYTES 0-1:\
    \   Length of structure including this field (LLLL)\n   BYTES 2-3:   GDS Identifier\
    \ ('12A0'X)\n   BYTE 4-5:    Data flow record\n                This field contains\
    \ flags that describe what type of\n                data pass-through should be\
    \ expected to be found\n                following this header.  Generally, bits\
    \ 0-2 in the first\n                byte are mutually exclusive (that is, if one\
    \ of them is\n                set to '1'B, the rest will be set to '0'B.) The\
    \ bits and\n                their meanings follow.\n                BIT      \
    \ DESCRIPTION\n                0         Start-Up confirmation\n             \
    \   1         Termination record\n                2         Start-Up Record\n\
    \                3         Diagnostic information included\n                4\
    \ - 5     Reserved\n                6         Reserved\n                7    \
    \     Printer record\n                8 - 13    Reserved\n                14 \
    \       Client-originated (inbound) printer record\n                15       \
    \ Server-originated (outbound) printer record\n   BYTE 6:      Length printer\
    \ pass-through header including this field\n                (LL)\n   BYTES 7-8:\
    \   Flags\n     BYTE 7 BITS:  xxxx x111 --> Reserved\n                   xxxx\
    \ 1xxx --> Last of chain\n                   xxx1 xxxx --> First of chain\n  \
    \                 xx1x xxxx --> Printer now ready\n                   x1xx xxxx\
    \ --> Intervention Required\n                   1xxx xxxx --> Error Indicator\n\
    \     BYTE 8 BITS:  xxxx xxxx --> Reserved\n   BYTE 9:      Printer operation\
    \ code\n                '01'X  Print/Print complete\n                '02'X  Clear\
    \ Print Buffers\n   BYTE 10-LL:  Diagnostic information (Note 1)\n     If BYTE\
    \ 7 = xx1x xxxx, then bytes 10-LL may contain:\n        Printer ready        \
    \        C9 00 00 00 02\n     If BYTE 7 = x1xx xxxx, then bytes 10-LL may contain:\
    \ (Note 2)\n        Command/parameter not valid  C9 00 03 02 2x\n        Print\
    \ check                  C9 00 03 02 3x\n        Forms check                 \
    \ C9 00 03 02 4x\n        Normal periodic condition    C9 00 03 02 5x\n      \
    \  Data stream error            C9 00 03 02 6x\n        Machine/print/ribbon check\
    \   C9 00 03 02 8x\n     If BYTE 7 = 1xxx xxxx, then bytes 10-LL may contain:\
    \ (Note 3)\n        Cancel                       08 11 02 00\n        Invalid\
    \ print parameter      08 11 02 29\n        Invalid print command        08 11\
    \ 02 28\n   Diagnostic information notes:\n   1.  LL is the length of the structure\
    \ defined in Byte 6.  If no\n       additional data is present, the remainder\
    \ of the structure must\n       be padded with zeroes.\n   2.  These are printer\
    \ SIGNAL commands.  Further information on these\n       commands may be obtained\
    \ from the 5494 Remote Control Unit\n       Functions Reference guide [5494-CU].\
    \  Refer to your iSeries\n       printer documentation for more specific information\
    \ on these data\n       stream exceptions.  The following are some 3812 and 5553\
    \ errors\n       that may be seen:\n       Machine check              C9 00 03\
    \ 02 11\n       Graphics check             C9 00 03 02 26\n       Print check\
    \                C9 00 03 02 31\n       Form jam                   C9 00 03 02\
    \ 41\n       Paper jam                  C9 00 03 02 47\n       End of forms  \
    \             C9 00 03 02 50\n       Printer not ready          C9 00 03 02 51\n\
    \       Data stream - class 1      C9 00 03 02 66 loss of text\n       Data stream\
    \ - class 2      C9 00 03 02 67 text appearance\n       Data stream - class 3\
    \      C9 00 03 02 68 multibyte control error\n       Data stream - class 4  \
    \    C9 00 03 02 69 multibyte control parm\n       Cover unexpectedly open   \
    \ C9 00 03 02 81\n       Machine check              C9 00 03 02 86\n       Machine\
    \ check              C9 00 03 02 87\n       Ribbon check               C9 00 03\
    \ 02 88\n   3.  These are printer negative responses.  Further information on\n\
    \       these commands may be obtained from the 5494 Remote Control Unit\n   \
    \    Functions Reference guide [5494-CU].\n       The print data will start in\
    \ byte LL+1.\n"
- title: 11.1.  Example of a Print Record
  contents:
  - "11.1.  Example of a Print Record\n   Figure 4 shows the server sending the client\
    \ data with a print\n   record.  This is normally seen following receipt of a\
    \ Success\n   Response Record, such as the example in Figure 1.\n  +--------------------------------------------------------------------+\n\
    \  |   +-- Length of structure (LLLL)                                   |\n  |\
    \   |    +-- GDS identifier                                          |\n  |  \
    \ |    |    +-- Data flow record                                   |\n  |   |\
    \    |    |   +-- Length of pass-through specific header (LL)    |\n  |   |  \
    \  |    |   |   +-- Flags                                      |\n  |   |    |\
    \    |   |   |   +-- Printer operation code                 |\n  |   |    |  \
    \  |   |   |   |      +-- Zero pad to LL specified (0A)   |\n  |   |    |    |\
    \   |   |   |      |            +-- Printer data       |\n  |   |    |    |  \
    \ |   |   |      |            |                      |\n  | +--+ +--+ +--+ ++\
    \ +--+ ++ +----------+ +---------------------------|\n  | |  | |  | |  | || |\
    \  | || |          | |                           |\n  | 0085 12A0 0101 0A 1800\
    \ 01 000000000000 34C4012BD20345FF2BD2044C0002|\n  |                         \
    \                                           |\n  | ------------------------------------------------------------\
    \       |\n  |                                                               \
    \     |\n  | 2BD2040D00002BD20A8501010201030204022BD20309022BD2061100014A    \
    \   |\n  |                                                                   \
    \ |\n  | ------------------------------------------------------------       |\n\
    \  |                                                                    |\n  |\
    \ 402BD20601010000012BD306F60000FFFF2BD20A48000001000000010100       |\n  |  \
    \                                                                  |\n  | ------------------------------------------------------------\
    \       |\n  |                                                               \
    \     |\n  | 2BD10705000B0090012BD2044900F02BD206404A403DE02BD2041500F034    \
    \   |\n  |                                                                   \
    \ |\n  |    end of printer data                                             |\n\
    \  | -------------------------+                                         |\n  |\
    \                          |                                         |\n  | C4012BD10381FF002BC8034001\
    \                                         |\n  +--------------------------------------------------------------------+\n\
    \          Figure 4.  Server sending client data with a print record\n   - '0085'X\
    \         = Logical record length, including this byte (LLLL)\n   - '12A0'X  \
    \       = GDS LU6.2 header\n   - '0101'X         = Data flow record (server to\
    \ client)\n   - '0A'X           = Length of pass-through specific header (LL)\n\
    \   - '1800'X         = First of chain / Last of chain indicators\n   - '01'X\
    \           = Print\n   - '000000000000'X = Zero pad header to LL specified\n\
    \   - '34C401'X       = First piece of data for spooled data\n   - Remainder is\
    \ printer data/commands/orders\n"
- title: 11.2.  Example of a Print Complete Record
  contents:
  - "11.2.  Example of a Print Complete Record\n   Figure 5 shows the client sending\
    \ the server a print complete record.\n   This would normally follow receipt of\
    \ a print record, such as the\n   example in Figure 4.  This indicates successful\
    \ completion of a print\n   request.\n   +-------------------------------------------------------------------+\n\
    \   |   +-- Length of structure (LLLL)                                  |\n  \
    \ |   |    +-- GDS identifier                                         |\n   |\
    \   |    |    +-- Data flow record                                  |\n   |  \
    \ |    |    |   +-- Length of pass-through specific header (LL)   |\n   |   |\
    \    |    |   |   +-- Flags                                     |\n   |   |  \
    \  |    |   |   |   +-- Printer operation code                |\n   |   |    |\
    \    |   |   |   |                                         |\n   | +--+ +--+ +--+\
    \ ++ +--+ ++                                         |\n   | |  | |  | |  | ||\
    \ |  | ||                                         |\n   | 000A 12A0 0102 04 0000\
    \ 01                                         |\n   +-------------------------------------------------------------------+\n\
    \         Figure 5.  Client sending server a print complete record\n   - '000A'X\
    \ = Logical record length, including this byte (LLLL)\n   - '12A0'X = GDS LU6.2\
    \ header\n   - '0102'X = Data flow response record (client to server)\n   - '04'X\
    \   = Length of pass-through specific header (LL)\n   - '0000'X = Good Response\n\
    \   - '01'X   = Print Complete\n"
- title: 11.3.  Example of a Null Print Record
  contents:
  - "11.3.  Example of a Null Print Record\n   Figure 6 shows the server sending the\
    \ client a null print record.\n   The null print record is the last print command\
    \ the server sends to\n   the client for a print job, and it indicates to the\
    \ printer that\n   there is no more data.  The null data byte '00'X is optional\
    \ and in\n   some cases may be omitted (in particular, this scenario occurs in\n\
    \   DBCS print streams).\n   This example would normally follow any number of\
    \ print records, such\n   as the example in Figure 4.  This indicates successful\
    \ completion of\n   a print job.  The client normally responds to this null print\
    \ record\n   with another print complete record, such as in Figure 5.\n   +------------------------------------------------------------------+\n\
    \   |   +-- Length of structure (LLLL)                                 |\n   |\
    \   |    +-- GDS identifier                                        |\n   |   |\
    \    |    +-- Data flow record                                 |\n   |   |   \
    \ |    |   +-- Length of pass-through specific header (LL)  |\n   |   |    | \
    \   |   |   +-- Flags                                    |\n   |   |    |    |\
    \   |   |   +-- Printer operation code               |\n   |   |    |    |   |\
    \   |   |      +-- Zero pad to LL specified (0A) |\n   |   |    |    |   |   |\
    \   |      |        +-- Printer data         |\n   |   |    |    |   |   |   |\
    \      |        |                        |\n   | +--+ +--+ +--+ ++ +--+ ++ +----------+\
    \ ++                        |\n   | |  | |  | |  | || |  | || |          | ||\
    \                        |\n   | 0011 12A0 0101 0A 0800 01 000000000000 00   \
    \                     |\n   +------------------------------------------------------------------+\n\
    \           Figure 6.  Server sending client a null print record\n   - '0011'X\
    \         = Logical record length, including this byte\n   - '12A0'X         =\
    \ GDS LU6.2 header\n   - '0101'X         = Data flow record\n   - '0A'X      \
    \     = Length of pass-through specific header (LL)\n   - '0800'X         = Last\
    \ of Chain\n   - '01'X           = Print\n   - '000000000000'X = Zero pad header\
    \ to LL specified\n   - '00'X           = Null data byte\n"
- title: 12.  End-to-End Print Example
  contents:
  - "12.  End-to-End Print Example\n   The next example shows a full print exchange\
    \ between a Telnet client\n   and server for a 526 byte spooled file.  Selective\
    \ translation of the\n   hexadecimal streams into 1) Telnet negotiations and 2)\
    \ ASCII/EBCDIC\n   characters is done to aid readability.  Telnet negotiations\
    \ are\n   delimited by '(' and ')' parenthesis characters; ASCII/EBCDIC\n   conversions\
    \ are bracketed by '|' vertical bar characters.\n   iSeries Telnet server    \
    \           Enhanced Telnet client\n   -------------------------------     ---------------------------------\n\
    \   FFFD27                          -->\n   (IAC DO NEW-ENVIRON)\n           \
    \                        <-- FFFB27\n                                       (IAC\
    \ WILL NEW-ENVIRON)\n   FFFD18FFFA270103 49424D5253454544\n   7EA5DFDDFD300404\
    \ 0003FFF0       -->\n   (IAC DO TERMINAL-TYPE\n   IAC SB NEW-ENVIRON SEND USERVAR\n\
    \   IBMRSEED xxxxxxxx VAR USERVAR\n   IAC SE)\n                              \
    \     <-- FFFB18\n                                       (IAC WILL TERMINAL-TYPE)\n\
    \   FFFA1801FFF0                    -->\n   (IAC SB TERMINAL-TYPE SEND IAC\n \
    \   SE)\n                                       FFFA27000349424D 52534545447EA5DF\n\
    \                                       DDFD300404000344 45564E414D450144\n  \
    \                                     554D4D5950525403 49424D4D5347514E\n    \
    \                                   414D450151535953 4F50520349424D4D\n      \
    \                                 5347514C4942012A 4C49424C0349424D\n        \
    \                               464F4E5401313103 49424D5452414E53\n          \
    \                             464F524D01310349 424D4D4652545950\n            \
    \                           4D444C012A485049 490349424D505052\n              \
    \                         5352433101020103 49424D5050525352\n                \
    \                       433201040349424D 454E56454C4F5045\n                  \
    \                     01FFFF0349424D41 5343494938393901\n                    \
    \               <-- 30FFF0\n                                       (IAC SB NEW-ENVIRON\
    \ IS USERVAR\n                                        IBMRSEED xxxxxxxx VAR\n\
    \                                        USERVAR DEVNAME VALUE DUMMYPRT\n    \
    \                                    USERVAR IBMMSGQNAME VALUE\n             \
    \                           QSYSOPR\n                                        USERVAR\
    \ IBMMSGQLIB VALUE *LIBL\n                                        USERVAR IBMFONT\
    \ VALUE 11\n                                        USERVAR IBMTRANSFORM VALUE\
    \ 1\n                                        USERVAR IBMMFRTYPMDL VALUE *HPII\n\
    \                                        USERVAR IBMPPRSRC1 VALUE\n          \
    \                              ESC '01'X\n                                   \
    \     USERVAR IBMPPRSRC2 VALUE '04'X\n                                       \
    \ USERVAR IBMENVELOPE VALUE IAC\n                                        USERVAR\
    \ IBMASCII899 VALUE 0\n                                        IAC SE)\n     \
    \                              <-- FFFA180049424D2D 333831322D31FFF0\n       \
    \                                (IAC SB TERMINAL-TYPE IS\n                  \
    \                      IBM-3812-1 IAC SE)\n   FFFD19                         \
    \ -->\n   (IAC DO EOR)\n                                   <-- FFFB19\n      \
    \                                 (IAC WILL EOR)\n   FFFB19                  \
    \        -->\n   (IAC WILL EOR)\n                                   <-- FFFD19\n\
    \                                       (IAC DO EOR)\n   FFFD00              \
    \            -->\n   (IAC DO BINARY)\n                                   <-- FFFB00\n\
    \                                       (IAC WILL BINARY)\n   FFFB00         \
    \                 -->\n   (IAC WILL BINARY)\n                                \
    \   <-- FFFD00\n                                       (IAC DO BINARY)\n   004912A090000560\
    \ 060020C0003D0000     |       -   {    |\n   C9F9F0F2C5D3C3D9 E3D7F0F6C4E4D4D4\
    \     |I902ELCRTP06DUMM| (EBCDIC)\n   E8D7D9E340400000 0000000000000000     |YPRT\
    \            |\n   0000000000000000 0000000000000000     |                |\n\
    \   0000000000000000 00FFEF           --> |                |\n   (73-byte startup\
    \ success response\n    record ... IAC EOR)\n   00DF12A001010A18 0001000000000000\
    \     |                |\n   03CD1B451B283130 551B287330703130     |   E (10U\
    \ (s0p10| (ASCII)\n   2E30306831327630 733062303033541B     |.00h12v0s0b003T |\n\
    \   287330421B266440 1B266C304F1B266C     |(s0B &d@ &l0O &l|\n   303038431B266C30\
    \ 3035431B28733070     |008C &l005C (s0p|\n   31372E3130683130 7630733062303030\
    \     |17.10h10v0s0b000|\n   541B283130551B28 73307031372E3130     |T (10U (s0p17.10|\n\
    \   6831307630733062 303030541B287330     |h10v0s0b000T (s0|\n   421B2664401B266C\
    \ 314F1B266C303035     |B &d@ &l1O &l005|\n   431B287330703137 2E31306831307630\
    \     |C (s0p17.10h10v0|\n   733062303030541B 266C314F1B287330     |s0b000T &l1O\
    \ (s0|\n   7031372E31306831 3076307330623030     |p17.10h10v0s0b00|\n   30541B2873307031\
    \ 372E313068313076     |0T (s0p17.10h10v|\n   3073306230303054 1B266C30303543FF\
    \     |0s0b000T &l005C |\n   EF                                --> |         \
    \       |\n   (... 223-byte print record ...\n    ... first of chain ...\n   \
    \ ... last of chain ... IAC EOR)\n                                     <-- 000A12A001020400\
    \ 0001FFEF\n                                         (10-byte print complete header)\n\
    \   031012A001010A10 0001000000000000     |                |\n   03FFFF1B451B2831\
    \ 30551B2873307031     |    E (10U (s0p1| (ASCII)\n   372E313068313076 3073306230303054\
    \     |7.10h10v0s0b000T|\n   1B287330421B2664 401B266C314F1B26     | (s0B &d@\
    \ &l1O &|\n   6C303035431B266C 31481B266C314F1B     |l005C &l1H &l1O |\n   266C3032411B266C\
    \ 31431B266C303030     |&l02A &l1C &l000|\n   38451B266C303038 431B266C30303439\
    \     |8E &l008C &l0049|\n   461B266130521B26 6C303035430A0A0A     |F &a0R &l005C\
    \   |\n   0A0A0A0A1B26612B 3030303130561B26     |     &a+00010V &|\n   6C303035431B2661\
    \ 2B30303231364820     |l005C &a+00216H |\n   2020202020202020 2020202020202020\
    \     |                |\n   2020202020205072 696E74204B657920     |      Print\
    \ Key |\n   4F75747075742020 2020202020202020     |Output          |\n   2020202020202020\
    \ 2020202020202020     |                |\n   2020202020205061 6765202020310D0A\
    \     |      Page   1  |\n   1B26612B30303231 3648202020203537     | &a+00216H\
    \    57|\n   3639535331205634 52334D3020393830     |69SS1 V4R3M0 980|\n   373203FFFF392020\
    \ 2020202020202020     |72   9          |\n   202020202020454C 4352545030362020\
    \     |      ELCRTP06  |\n   2020202020202020 202030332F33312F     |         \
    \ 03/31/|\n   3939202031363A33 303A34350D0A1B26     |99  16:30:45   &|\n   612B303032313648\
    \ 0D0A1B26612B3030     |a+00216H   &a+00|\n   3231364820202020 446973706C617920\
    \     |216H    Display |\n   4465766963652020 2E202E202E202E20     |Device  .\
    \ . . . |\n   2E203A2020515041 444556303033510D     |. :  QPADEV003Q |\n   0A1B26612B303032\
    \ 3136482020202055     |  &a+00216H    U|\n   73657220202E202E 202E202E202E202E\
    \     |ser  . . . . . .|\n   202E202E202E202E 203A202052434153     | . . . . :\
    \  RCAS|\n   54524F0D0A1B2661 2B3030323136480D     |TRO   &a+00216H |\n   0A1B26612B303032\
    \ 313648204D41494E     |  &a+00216H MAIN|\n   2020202020202020 2020202020202020\
    \     |                |\n   2020202020202020 20202041532F3430     |         \
    \  AS/40|\n   30204D61696E204D 656E750D0A1B2661     |0 Main Menu   &a|\n   2B30303203FFFF31\
    \ 3648202020202020     |+002   16H      |\n   2020202020202020 2020202020202020\
    \     |                |\n   2020202020202020 2020202020202020     |         \
    \       |\n   2020202020202020 2020202020202020     |                |\n   2020202020202053\
    \ 797374656D3A2020     |       System:  |\n   20454C4352545030 360D0A1B26612B30\
    \     | ELCRTP06   &a+0|\n   3032313648205365 6C656374206F6E65     |0216H Select\
    \ one|\n   206F662074686520 666F6C6C6F77696E     | of the followin|\n   673A0D0A1B26612B\
    \ 3030323136480D0A     |g:   &a+00216H  |\n   1B26612B30303231 3648202020202020\
    \     | &a+00216H      |\n   312E205573657220 7461736B730D0A1B     |1. User tasks\
    \   |\n   26612B3030323136 4820202020202032     |&a+00216H      2|\n   2E204F6666696365\
    \ 207461736B730D0A     |. Office tasks  |\n   1B26612B30303231 36480D0A1B26612B\
    \     | &a+00216H   &a+|\n   3030323136482020 20202020342E2046     |00216H   \
    \   4. F|\n   696C65732C206C69 627261726965732C     |iles, libraries,|\n   20616EFFEF\
    \                            | an             |\n   (... 784-byte print record\
    \ ...\n    ... first of chain ... IAC EOR)\n                                 \
    \    <-- 000A12A001020400 0001FFEF\n                                         (10-byte\
    \ print complete header)\n   020312A001010A00 0001000000000000     |         \
    \       |\n   64206603FFFF6F6C 646572730D0A1B26     |d f   olders   &| (ASCII)\n\
    \   612B303032313648 0D0A1B26612B3030     |a+00216H   &a+00|\n   3231364820202020\
    \ 2020362E20436F6D     |216H      6. Com|\n   6D756E6963617469 6F6E730D0A1B2661\
    \     |munications   &a|\n   2B3030323136480D 0A1B26612B303032     |+00216H  \
    \ &a+002|\n   3136482020202020 20382E2050726F62     |16H      8. Prob|\n   6C656D2068616E64\
    \ 6C696E670D0A1B26     |lem handling   &|\n   612B303032313648 202020202020392E\
    \     |a+00216H      9.|\n   20446973706C6179 2061206D656E750D     | Display a\
    \ menu |\n   0A1B26612B303032 3136482020202020     |  &a+00216H     |\n   31302E20496E666F\
    \ 726D6174696F6E20     |10. Information |\n   417373697374616E 74206F7074696F6E\
    \     |Assistant option|\n   730D0A1B26612B30 3032313648202020     |s   &a+00216H\
    \   |\n   202031312E20436C 69656E7420416363     |  11. Client Acc|\n   6573732F34303020\
    \ 7461736B730D0A1B     |ess/400 tasks   |\n   26612B3030323136 480D0A1B26612B30\
    \     |&a+00216H   &a+0|\n   303231364803ED20 2020202039302E20     |0216H    \
    \   90. |\n   5369676E206F6666 0D0A1B26612B3030     |Sign off   &a+00|\n   323136480D0A1B26\
    \ 612B303032313648     |216H   &a+00216H|\n   2053656C65637469 6F6E206F7220636F\
    \     | Selection or co|\n   6D6D616E640D0A1B 26612B3030323136     |mmand   &a+00216|\n\
    \   48203D3D3D3E0D0A 1B26612B30303231     |H ===>   &a+0021|\n   36480D0A1B26612B\
    \ 3030323136482046     |6H   &a+00216H F|\n   333D457869742020 2046343D50726F6D\
    \     |3=Exit   F4=Prom|\n   707420202046393D 5265747269657665     |pt   F9=Retrieve|\n\
    \   2020204631323D43 616E63656C202020     |   F12=Cancel   |\n   4631333D496E666F\
    \ 726D6174696F6E20     |F13=Information |\n   417373697374616E 740D0A1B26612B30\
    \     |Assistant   &a+0|\n   3032313648204632 333D53657420696E     |0216H F23=Set\
    \ in|\n   697469616C206D65 6E750D0A1B26612B     |itial menu   &a+|\n   3030323136480D0A\
    \ 1B26612B30303231     |00216H   &a+0021|\n   36480D0CFFEF                   \
    \       |6H              |\n   (... 515-byte print record ...\n    IAC EOR)\n\
    \                                     <-- 000A12A001020400 0001FFEF\n        \
    \                                 (10-byte print complete header)\n   001412A001010A00\
    \ 0001000000000000     |                |\n   03021B45FFEF                   \
    \       |   E            |  (ASCII)\n   (... 20-byte print record ...\n    IAC\
    \ EOR)\n                                     <-- 000A12A001020400 0001FFEF\n \
    \                                        (10-byte print complete header)\n   001112A001010A08\
    \ 0001000000000000\n   00FFEF                            -->\n   (... 17-byte\
    \ NULL print record ...\n    ... last of chain ... IAC EOR)\n                \
    \                     <-- 000A12A001020400 0001FFEF\n                        \
    \                 (10-byte print complete header)\n"
- title: 13.  Security Considerations
  contents:
  - "13.  Security Considerations\n   The auto-sign-on feature provided by this RFC\
    \ describes a way to\n   encrypt your login password.  However, while passwords\
    \ can now be\n   encrypted by using the IBMRSEED and IBMSUBSPW USERVAR negotiations,\n\
    \   users should understand that only the login passwords are encrypted\n   and\
    \ not the entire Telnet session.  Encryption of the Telnet session\n   requires\
    \ that another protocol layer, such as SSL, be added.\n   The auto-sign-on feature\
    \ supports plain text passwords, encrypted\n   passwords, and Kerberos tokens.\
    \  However, using plain text passwords\n   is strongly discouraged.  iSeries system\
    \ administrators may want to\n   configure their systems to reject plain text\
    \ passwords.\n"
- title: 14.  IANA Considerations
  contents:
  - "14.  IANA Considerations\n   IANA registered the terminal types \"IBM-3812-1\"\
    \ and \"IBM-5553-B01\" as\n   a terminal type [RFC1091].  They are used when communicating\
    \ with\n   iSeries Telnet servers.\n"
- title: 15.  Normative References
  contents:
  - "15.  Normative References\n   [RFC854]      Postel, J. and J. Reynolds, \"Telnet\
    \ Protocol\n                 Specification\", STD 8, RFC 854, May 1983.\n   [RFC855]\
    \      Postel, J. and J. Reynolds, \"Telnet Option\n                 Specifications\"\
    , STD 8, RFC 855, May 1983.\n   [RFC1091]     VanBokkelen, J., \"Telnet terminal-type\
    \ option\", RFC\n                 1091, February 1989.\n   [RFC1205]     Chmielewski,\
    \ P., \"5250 Telnet Interface\", RFC 1205,\n                 February 1991.\n\
    \   [RFC1572]     Alexander, S., \"Telnet Environment Option\", RFC 1572,\n  \
    \               January 1994.\n   [RFC2877]     Murphy, T., Jr., Rieth, P., and\
    \ J. Stevens, \"5250\n                 Telnet Enhancements\", RFC 2877, July 2000.\n"
- title: 16.  Informative References
  contents:
  - "16.  Informative References\n   [RFC856]      Postel, J. and J. Reynolds, \"\
    Telnet Binary\n                 Transmission\", STD 27, RFC 856, May 1983.\n \
    \  [RFC858]      Postel, J. and J. Reynolds, \"Telnet Supress Go Ahead\n     \
    \            Option\", STD 29, RFC 858, May 1983.\n   [RFC885]      Postel, J.,\
    \ \"Telnet end of record option\", RFC 885,\n                 December 1983.\n\
    \   [5494-CU]     IBM, \"5494 Remote Control Unit, Functions Reference\",\n  \
    \               SC30-3533-04, August 1995.\n   [SYSTEM-API]  IBM, \"AS/400 System\
    \ API Reference\", SC41-5801-01,\n                 February 1998.\n   [COMM-CONFIG]\
    \ IBM, \"AS/400 Communications Configuration\",\n                 SC41-5401-00,\
    \ August 1997.\n   [NLS-SUPPORT] IBM, \"AS/400 National Language Support\", SC41-5101-01,\n\
    \                 February 1998.\n   [FIPS-46-2]   Data Encryption Standard (DES),\
    \ Federal Information\n                 Processing Standards Publication 46-2,\
    \ January 22,\n                 1988.\n   [FIPS-81]     DES Modes of Operation,\
    \ Federal Information Processing\n                 Standards Publication 81, December\
    \ 1980.\n   [FIPS-180-1]  Secure Hash Standard, Federal Information Processing\n\
    \                 Standards Publication 180-1, May 11, 1993.\n"
- title: 17.  Relation to Other RFCs
  contents:
  - "17.  Relation to Other RFCs\n   This RFC relies on the 5250 Telnet Interface\
    \ [RFC1205] in all\n   examples.\n   This RFC replaces 5250 Telnet Enhancements\
    \ [RFC2877], adding new\n   sections for Kerberos, SHA-1, security and IANA considerations.\n\
    \   Minor corrections and additional examples were also added.\n   Informative\
    \ references have been removed.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Thomas E. Murphy, Jr.\n   IBM Corporation\n   2455 South\
    \ Road\n   Poughkeepsie, NY 12601\n   Phone:  (845) 435-7063\n   Fax:    (845)\
    \ 432-9414\n   EMail:  murphyte@us.ibm.com\n   Paul F. Rieth\n   IBM Corporation\n\
    \   3605 Highway 52 North\n   Rochester, MN 55901\n   Phone:  (507) 253-5218\n\
    \   Fax:    (507) 253-5156\n   EMail:  rieth@us.ibm.com\n   Jeffrey S. Stevens\n\
    \   IBM Corporation\n   3605 Highway 52 North\n   Rochester, MN 55901\n   Phone:\
    \  (507) 253-5337\n   Fax:    (507) 253-5156\n   EMail:  jssteven@us.ibm.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2006).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78\
    \ and at www.rfc-editor.org/copyright.html, and\n   except as set forth therein,\
    \ the authors retain all their rights.\n   This document and the information contained\
    \ herein are provided on an\n   \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION\
    \ HE/SHE REPRESENTS\n   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE\
    \ IETF TRUST,\n   AND THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES,\n\
    \   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT\n   THE\
    \ USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY\n   IMPLIED\
    \ WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR\n   PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
