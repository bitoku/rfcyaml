- contents:
  - '     Port Control Protocol (PCP) Extension for Port-Set Allocation

    '
  title: __initial_text__
- contents:
  - "Abstract\n   In some use cases, e.g., Lightweight 4over6, the client may require\n
    \  not just one port, but a port set.  This document defines an\n   extension
    to the Port Control Protocol (PCP) that allows clients to\n   manipulate a set
    of ports as a whole.  This is accomplished using a\n   new MAP option: PORT_SET.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7753.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n
    \     1.1. Applications Using Port Sets ...............................4\n      1.2.
    Lightweight 4over6 .........................................4\n      1.3. Firewall
    Control ...........................................4\n      1.4. Discovering Stateless
    Port-Set Mappings ....................5\n   2. The Need for PORT_SET ...........................................5\n
    \  3. Terminology .....................................................6\n   4.
    The PORT_SET Option .............................................6\n      4.1.
    Client Behavior ............................................8\n      4.2. Server
    Behavior ............................................8\n      4.3. Absence of
    Capability Discovery ............................9\n      4.4. Port-Set Renewal
    and Deletion .............................10\n           4.4.1. Overlap Conditions
    .................................10\n   5. Examples .......................................................10\n
    \     5.1. Simple Request on Network Address Translator\n           IPv4/IPv4
    (NAT44) .........................................10\n      5.2. Stateless Mapping
    Discovery ...............................12\n      5.3. Resolving Overlap .........................................13\n
    \  6. Operational Considerations .....................................13\n      6.1.
    Limits and Quotas .........................................13\n      6.2. High
    Availability .........................................13\n      6.3. Idempotence
    ...............................................13\n      6.4. What should a PCP
    client do when it receives fewer\n           ports than requested? .....................................15\n
    \  7. Security Considerations ........................................15\n   8.
    IANA Considerations ............................................16\n   9. References
    .....................................................16\n      9.1. Normative
    References ......................................16\n      9.2. Informative References
    ....................................16\n   Acknowledgements ..................................................17\n
    \  Contributors ......................................................17\n   Authors'
    Addresses ................................................18\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document extends the Port Control Protocol (PCP) [RFC6887]
    with\n   the ability to retrieve a set of ports using a single request.  It\n
    \  does so by defining a new PORT_SET option.\n   This section describes a few
    of the possible envisioned use cases.\n   Note that the PCP extension defined
    in this document is generic and\n   is expected to be applicable to other use
    cases.\n"
  - contents:
    - "1.1.  Applications Using Port Sets\n   Some applications require not just one
      port, but a port set.  One\n   example is a Session Initiation Protocol (SIP)
      User Agent Server\n   (UAS) [RFC3261] expecting to handle multiple concurrent
      calls,\n   including media termination.  When the UAS receives a call, it needs\n
      \  to signal media port numbers to its peer.  Generating individual PCP\n   MAP
      requests for each of the media ports during call setup would\n   introduce unwanted
      latency and increased signaling load.  Instead,\n   the server can pre-allocate
      a set of ports such that no PCP exchange\n   is needed during call setup.\n"
    title: 1.1.  Applications Using Port Sets
  - contents:
    - "1.2.  Lightweight 4over6\n   In the Lightweight 4over6 (lw4o6) [RFC7596] architecture,
      shared\n   global addresses can be allocated to customers.  This allows moving\n
      \  the Network Address Translation (NAT) function, otherwise\n   accomplished
      by a Carrier-Grade NAT (CGN) [RFC6888], to the Customer\n   Premises Equipment
      (CPE).  This provides more control over the NAT\n   function to the user, and
      more scalability to the Internet Service\n   Provider (ISP).\n   In the lw4o6
      architecture, the PCP-controlled device corresponds to\n   the Lightweight Address
      Family Transition Router (lwAFTR), and the\n   PCP client corresponds to the
      Lightweight B4 (lwB4).  The PCP client\n   sends a PCP MAP request containing
      a PORT_SET option to trigger\n   shared address allocation on the Lightweight
      AFTR (lwAFTR).  The PCP\n   response contains the shared address information,
      including the port\n   set allocated to the Lightweight B4 (lwB4).\n"
    title: 1.2.  Lightweight 4over6
  - contents:
    - "1.3.  Firewall Control\n   Port sets are often used in firewall rules.  For
      example, defining a\n   range for Real-time Transport Protocol (RTP) [RFC3550]
      traffic is\n   common practice.  The PCP MAP request can already be used for\n
      \  firewall control.  The PORT_SET option brings the additional ability\n   to
      manipulate firewall rules operating on port sets instead of single\n   ports.\n"
    title: 1.3.  Firewall Control
  - contents:
    - "1.4.  Discovering Stateless Port-Set Mappings\n   A PCP MAP request can be
      used to retrieve a mapping from a stateless\n   device (i.e., one that does
      not establish any per-flow state, and\n   simply rewrites the address and/or
      port in a purely algorithmic\n   fashion, including no rewriting).  Similarly,
      a PCP MAP request with\n   a PORT_SET request can be used to discover a port-set
      mapping from a\n   stateless device.  See Section 5.2 for an example.\n"
    title: 1.4.  Discovering Stateless Port-Set Mappings
  title: 1.  Introduction
- contents:
  - "2.  The Need for PORT_SET\n   Multiple PCP MAP requests can be used to manipulate
    a set of ports;\n   this has roughly the same effect as a single use of a PCP
    MAP request\n   with a PORT_SET option.  However, use of the PORT_SET option is
    more\n   efficient when considering the following aspects:\n   Network Traffic:
    \ A single request uses fewer network resources than\n      multiple requests.\n
    \  Latency:  Even though PCP MAP requests can be sent in parallel, we\n      can
    expect the total processing time to be longer for multiple\n      requests than
    for a single one.\n   Server-side efficiency:  Some PCP-controlled devices can
    allocate\n      port sets in a manner such that data passing through the device
    is\n      processed much more efficiently than the equivalent using\n      individual
    port allocations.  For example, a CGN having a \"bulk\"\n      port allocation
    scheme (see [RFC6888], Section 5) often has this\n      property.\n   Server-side
    scalability:  The number of state table entries in PCP-\n      controlled devices
    is often a limiting factor.  Allocating port\n      sets in a single request can
    result in a single mapping entry\n      being used, therefore allowing greater
    scalability.\n   Therefore, while it is functionally possible to obtain the same\n
    \  results using plain MAP, the extension proposed in this document\n   allows
    greater efficiency, scalability, and simplicity, while\n   lowering latency and
    necessary network traffic.\n   In addition, PORT_SET supports parity preservation.
    \ Some protocols\n   (e.g., RTP [RFC3550]) assign meaning to a port number's parity.
    \ When\n   mapping sets of ports for the purpose of using such kind of protocol,\n
    \  preserving parity can be necessary.\n"
  title: 2.  The Need for PORT_SET
- contents:
  - "3.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in [RFC2119].\n"
  title: 3.  Terminology
- contents:
  - "4.  The PORT_SET Option\n   Option Name:  PORT_SET\n   Number:  130 (see Section
    8)\n   Purpose:  To map sets of ports.\n   Valid for Opcodes:  MAP\n   Length:
    \ 5 bytes\n   May appear in:  Both requests and responses\n   Maximum occurrences:
    \ 1\n   The PORT_SET option indicates that the PCP client wishes to reserve a\n
    \  set of ports.  The requested number of ports in that set is indicated\n   in
    the option.\n   The maximum occurrences of the PORT_SET option MUST be limited
    to 1.\n   The reason is that the Suggested External Port Set depends on the\n
    \  data contained in the MAP Opcode header.  Having two PORT_SET options\n   with
    a single MAP Opcode header would imply having two overlapping\n   Suggested External
    Port Sets.\n   Note that the option number is in the \"optional to process\" range\n
    \  (128-191), meaning that a PCP MAP request with a PORT_SET option will\n   be
    interpreted by a PCP server that does not support PORT_SET as a\n   single-port
    PCP MAP request, as if the PORT_SET option was absent.\n   The PORT_SET option
    is formatted as shown in Figure 1.\n    0                   1                   2
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |Option Code=130|   Reserved    |        Option Length=5        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |        Port Set Size          |      First Internal Port      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |  Reserved   |P|\n   +-+-+-+-+-+-+-+-+\n                         Figure 1:
    PORT_SET Option\n   The fields are as follows:\n   Port Set Size:  A 16-bit unsigned
    integer.  Number of ports\n      requested.  MUST NOT be zero.\n   First Internal
    Port:  In a request, this field MUST be set equal to\n      the Internal Port
    field in the MAP Opcode by the PCP client.  In a\n      response, this field indicates
    the First Internal Port of the port\n      set mapped by the PCP server, which
    may differ from the value sent\n      in the request.  That is to be contrasted
    to the Internal Port\n      field, which by necessity is always identical in matched
    requests\n      and responses.\n   Reserved:  MUST be set to zero when sending;
    MUST be ignored when\n      receiving.\n   P (parity bit):  1 if parity preservation
    is requested; 0 otherwise.\n      See [RFC4787], Section 4.2.2.\n   Note that
    Option Code, Reserved, and Option Length are as described\n   in [RFC6887], Section
    7.3.\n   The Internal Port Set is defined as being the range of Port Set Size\n
    \  ports starting from the First Internal Port.  The Suggested External\n   Port
    Set is defined as being the range of Port Set Size ports\n   starting from the
    Suggested External Port.  Similarly, the Assigned\n   External Port Set is defined
    as being the range of Port Set Size\n   ports starting from the Assigned External
    Port.  The Internal Port\n   Set returned in a response and the Assigned External
    Port Set have\n   the same size.\n   The Suggested External Port corresponds to
    the first port in the\n   Suggested External Port Set.  Its purpose is for clients
    to be able\n   to regenerate previous mappings after state loss.  When such an
    event\n   happens, clients may attempt to regenerate identical mappings by\n   suggesting
    the same External Port Set as before the state loss.  Note\n   that there is no
    guarantee that the allocated External Port Set will\n   be the one suggested by
    the client.\n"
  - contents:
    - "4.1.  Client Behavior\n   To retrieve a set of ports, the PCP client adds a
      PORT_SET option to\n   its PCP MAP request.  If parity preservation is required
      (i.e., an\n   even port to be mapped to an even port and an odd port to be mapped\n
      \  to an odd port), the PCP client MUST set the parity bit (to 1) to ask\n   the
      PCP server to preserve the port parity.\n   The PCP client MUST NOT include
      more than one PORT_SET option in a\n   PCP MAP request.  If several port sets
      are needed, the PCP client\n   MUST issue separate PCP MAP requests, each potentially
      including a\n   PORT_SET option.  These individual PCP MAP requests MUST include\n
      \  distinct Internal Ports.\n   If the PCP client does not know the exact number
      of ports it\n   requires, it MAY then set the Port Set Size to 0xffff, indicating\n
      \  that it is willing to accept as many ports as the PCP server can\n   offer.\n
      \  A PCP client SHOULD NOT send a PORT_SET option for single-port PCP\n   MAP
      requests (including creation, renewal, and deletion), because\n   that needlessly
      increases processing on the server.\n   PREFER_FAILURE MUST NOT appear in a
      request with a PORT_SET option.\n   As a reminder, PREFER_FAILURE was specifically
      designed for the\n   Universal Plug and Play (UPnP) Internet Gateway Device
      - Port Control\n   Protocol Interworking Function (IGD-PCP IWF) [RFC6970].  The
      reasons\n   for not recommending the use of PREFER_FAILURE are discussed in\n
      \  Section 13.2 of [RFC6887].\n   When the PCP-controlled device supports delegation
      of multiple port\n   sets for a given PCP client, the PCP client MAY re-initiate
      a PCP\n   request to get another port set when it has exhausted all the ports\n
      \  within the port set.\n"
    title: 4.1.  Client Behavior
  - contents:
    - "4.2.  Server Behavior\n   In addition to regular PCP MAP request processing,
      the following\n   checks are made upon receipt of a PORT_SET option with a non-zero\n
      \  Requested Lifetime:\n   o  If multiple PORT_SET options are present in a
      single PCP MAP\n      request, a MALFORMED_OPTION error is returned.\n   o  If
      the Port Set Size is zero, a MALFORMED_OPTION error is\n      returned.\n   o
      \ If a PREFER_FAILURE option is present, a MALFORMED_OPTION error is\n      returned.\n
      \  The PCP server MAY map fewer ports than the value of Port Set Size\n   from
      the request.  It MUST NOT map more ports than the PCP client\n   asked for.
      \ Internal Ports outside the range of Port Set Size ports\n   starting from
      the Internal Port MUST NOT be mapped by the PCP server.\n   If the requested
      port set cannot be fully satisfied, the PCP server\n   SHOULD map as many ports
      as possible and SHOULD map at least one port\n   (which is the same behavior
      as if Port Set Size is set to 1).\n   If the PCP server ends up mapping only
      a single port, for any reason,\n   the PORT_SET option MUST NOT be present in
      the response.  In\n   particular, if the PCP server receives a single-port PCP
      MAP request\n   that includes a PORT_SET option, the PORT_SET option is silently\n
      \  ignored, and the request is handled as a single-port PCP MAP request.\n   If
      the port parity preservation is requested (P = 1), the PCP server\n   MAY preserve
      port parity.  In that case, the External Port is set to\n   a value having the
      same parity as the First Internal Port.\n   If the mapping is successful, the
      MAP response's Assigned External\n   Port is set to the first port in the External
      Port Set, and the\n   PORT_SET option's Port Set Size is set to the number of
      ports in the\n   mapped port set.  The First Internal Port field is set to the
      first\n   port in the Internal Port Set.\n"
    title: 4.2.  Server Behavior
  - contents:
    - "4.3.  Absence of Capability Discovery\n   A PCP client that wishes to make
      use of a port set includes the\n   PORT_SET option.  If no PORT_SET option is
      present in the response,\n   the PCP client cannot conclude that the PCP server
      does not support\n   the PORT_SET option.  It may just be that the PCP server
      does support\n   PORT_SET but decided to allocate only a single port, for reasons
      that\n   are its own.  If the client wishes to obtain more ports, it MAY send\n
      \  additional PCP MAP requests (see Section 6.4), which the PCP server\n   may
      or may not grant according to local policy.\n   If port-set capability is added
      to or removed from a running PCP\n   server, the server MAY reset its Epoch
      time and send an ANNOUNCE\n   message as described in the PCP specification
      ([RFC6887],\n   Section 14.1).  This causes PCP clients to retry, and those
      using\n   PORT_SET will now receive a different response.\n"
    title: 4.3.  Absence of Capability Discovery
  - contents:
    - "4.4.  Port-Set Renewal and Deletion\n   Port-set mappings are renewed and deleted
      as a single entity.  That\n   is, the lifetime of all port mappings in the set
      is set to the\n   Assigned Lifetime at once.\n   A PCP client attempting to
      refresh or delete a port-set mapping MUST\n   include the PORT_SET option in
      its request.\n"
    - contents:
      - "4.4.1.  Overlap Conditions\n   Port-set PCP MAP requests can overlap with
        existing single-port or\n   port-set mappings.  This can happen either by
        mistake or after a PCP\n   client becomes out of sync with server state.\n
        \  If a PCP server receives a PCP MAP request, with or without a\n   PORT_SET
        option, that tries to map one or more Internal Ports or port\n   sets belonging
        to already-existing mappings, then the request is\n   considered to be a refresh
        request applying those mappings.  Each of\n   the matching port or port-set
        mappings is processed independently, as\n   if a separate refresh request
        had been received.  The processing is\n   as described in Section 15 of [RFC6887].
        \ The PCP server sends a\n   Mapping Update message for each of the mappings.\n"
      title: 4.4.1.  Overlap Conditions
    title: 4.4.  Port-Set Renewal and Deletion
  title: 4.  The PORT_SET Option
- contents:
  - '5.  Examples

    '
  - contents:
    - "5.1.  Simple Request on Network Address Translator IPv4/IPv4 (NAT44)\n   An
      application requires a range of 100 IPv4 UDP ports to be mapped to\n   itself.
      \ The application running on the host has created sockets\n   bound to IPv4
      UDP ports 50,000 to 50,099 for this purpose.  It does\n   not care about which
      External Port numbers are allocated.  The PCP\n   client sends a PCP request
      with the following parameters over IPv4:\n   o  MAP Opcode\n      Mapping Nonce:
      \ <a random nonce>\n      Protocol:  17\n      Internal Port:  50,000\n      Suggested
      External Port:  0\n      Suggested External IP Address:  ::ffff:0.0.0.0\n   o
      \ PORT_SET Option\n      Port Set Size:  100\n      First Internal Port:  50,000\n
      \     P: 0\n   The PCP server is unable to fulfill the request fully: it is\n
      \  configured by local policy to only allocate 32 ports per user.  Since\n   the
      PREFER_FAILURE option is absent from the request, it decides to\n   map UDP
      ports 37,056 to 37,087 on external address 192.0.2.3 to\n   Internal Ports 50,000
      to 50,031.  After setting up the mapping in the\n   NAT44 device it controls,
      it replies with the following PCP response:\n   o  MAP Opcode\n      Mapping
      Nonce:  <copied from the request>\n      Protocol:  17\n      Internal Port:
      \ 50,000\n      Assigned External Port:  37,056\n      Assigned External IP
      Address:  ::ffff:192.0.2.3\n   o  PORT_SET Option\n      Port Set Size:  32\n
      \     First Internal Port:  50,000\n      P: 0\n   Upon receiving this response,
      the host decides that 32 ports is good\n   enough for its purposes.  It closes
      sockets bound to ports 50,032 to\n   50,099, sets up a refresh timer, and starts
      using the port range it\n   has just been assigned.\n"
    title: 5.1.  Simple Request on Network Address Translator IPv4/IPv4 (NAT44)
  - contents:
    - "5.2.  Stateless Mapping Discovery\n   A host wants to discover a stateless
      NAT44 mapping pointing to it.\n   To do so, it sends the following request over
      IPv4:\n   o  MAP Opcode\n      Mapping Nonce:  <a random nonce>\n      Protocol:
      \ 0\n      Internal Port:  1\n      Suggested External Port:  0\n      Suggested
      External IP Address:  ::ffff:0.0.0.0\n   o  PORT_SET Option\n      Port Set
      Size:  65,535\n      First Internal Port:  1\n      P: 0\n   The PCP server
      sends the following response:\n   o  MAP Opcode\n      Mapping Nonce:  <copied
      from the request>\n      Protocol:  0\n      Internal Port:  1\n      Assigned
      External Port:  26,624\n      Assigned External IP Address:  ::ffff:192.0.2.5\n
      \  o  PORT_SET Option\n      Port Set Size:  2048\n      First Internal Port:
      \ 26,624\n      P: 0\n   From this response, the host understands that a 2048-port
      stateless\n   mapping is pointing to itself, starting from port 26,624 on external\n
      \  IP address 192.0.2.5.\n"
    title: 5.2.  Stateless Mapping Discovery
  - contents:
    - "5.3.  Resolving Overlap\n   This example relates to Section 4.4.1.\n   Suppose
      Internal Port 100 is mapped to External Port 100 and port set\n   101-199 is
      mapped to External Port Set 201-299.  The PCP server\n   receives a PCP MAP
      request with Internal Port = 100, External Port =\n   0, and a PORT_SET option
      with Port Set Size = 100.  The request's\n   Mapping Nonce is equal to those
      of the existing single-port and port-\n   set mappings.  This request is therefore
      treated as two refresh\n   requests, the first one applying to the single-port
      mapping and the\n   second one applying to the port-set mapping.  The PCP server
      updates\n   the lifetimes of both mappings as usual and then sends two responses:\n
      \  the first one contains Internal Port = 100, External Port = 100, and\n   no
      PORT_SET option, while the second one contains Internal Port =\n   101, External
      Port = 201, and a PORT_SET option with Port Set Size =\n   99.\n"
    title: 5.3.  Resolving Overlap
  title: 5.  Examples
- contents:
  - '6.  Operational Considerations

    '
  - contents:
    - "6.1.  Limits and Quotas\n   It is up to the PCP server to determine the port-set
      quota, if any,\n   for each PCP client.\n   If the PCP server is configured
      to allocate multiple port-set\n   allocations for one subscriber, the same Assigned
      External IP Address\n   SHOULD be assigned to the subscriber in multiple port-set
      responses.\n   To optimize the number of mapping entries maintained by the PCP\n
      \  server, it is RECOMMENDED to configure the PCP server to assign the\n   maximum
      allowed Port Set Size in a single response.  This policy\n   SHOULD be configurable.\n"
    title: 6.1.  Limits and Quotas
  - contents:
    - "6.2.  High Availability\n   The failover mechanism in MAP (Section 14 of [RFC6887])
      can also be\n   applied to port sets.\n"
    title: 6.2.  High Availability
  - contents:
    - "6.3.  Idempotence\n   A core, desirable property of PCP is idempotence.  In
      a nutshell,\n   requests produce the same results whether they are executed
      once or\n   multiple times.  This property is preserved with the PORT_SET option,\n
      \  with the following caveat: the order in which the PCP server receives\n   requests
      with overlapping Internal Port Sets will affect the mappings\n   being created
      and the responses received.\n   For example, suppose these two requests are
      sent by a PCP client:\n   Request A:  Internal Port Set 1-10\n   Request B:
      \ Internal Port Set 5-14\n   The PCP server's actions will depend on which request
      is received\n   first.  Suppose that A is received before B:\n   Upon reception
      of A:  Internal Ports 1-10 are mapped.  A success\n      response containing
      the following fields is sent:\n      Internal Port:  1\n      First Internal
      Port:  1\n      Port Set Size:  10\n   Upon reception of B:  The request matches
      mapping A.  The request is\n      interpreted as a refresh request for mapping
      A, and a response\n      containing the following fields is sent:\n      Internal
      Port:  5\n      First Internal Port:  1\n      Port Set Size:  10\n   If the
      order of reception is reversed (B before A), the created\n   mapping will be
      different, and the First Internal Port in both\n   responses would then be 5.\n
      \  To avoid surprises, PCP clients MUST ensure that port-set mapping\n   requests
      do not inadvertently overlap.  For example, a host's\n   operating system could
      include a central PCP client process through\n   which port-set mapping requests
      would be arbitrated.  Alternatively,\n   individual PCP clients running on the
      same host would be required to\n   acquire the Internal Ports from the operating
      system (e.g., a call to\n   the bind() function from the BSD API) before trying
      to map them with\n   PCP.\n"
    title: 6.3.  Idempotence
  - contents:
    - "6.4.  What should a PCP client do when it receives fewer ports than\n      requested?\n
      \  Suppose a PCP client asks for 16 ports and receives 8.  What should\n   it
      do?  Should it consider this a final answer?  Should it try a\n   second request,
      asking for 8 more ports?  Should it fall back to 8\n   individual PCP MAP requests?
      \ This document leaves the answers to be\n   implementation specific but describes
      issues to be considered when\n   answering them.\n   First, the PCP server has
      decided to allocate 8 ports for some\n   reason.  It may be that allocation
      sizes have been limited by the PCP\n   server's administrator.  It may be that
      the PCP client has reached a\n   quota.  It may be that these 8 ports were the
      last contiguous ones\n   available.  Depending on the reason, asking for more
      ports may or may\n   not be likely to actually yield more ports.  However, the
      PCP client\n   has no way of knowing.\n   Second, not all PCP clients asking
      for N ports actually need all N\n   ports to function correctly.  For example,
      a DNS resolver could ask\n   for N ports to be used for source-port randomization.
      \ If fewer than\n   N ports are received, the DNS resolver will still work correctly,
      but\n   source-port randomization will be slightly less efficient, having\n
      \  fewer bits to play with.  In that case, it would not make much sense\n   to
      ask for more ports.\n   Finally, asking for more ports could be considered abuse.
      \ External\n   Ports are a resource that is to be shared among multiple PCP
      clients.\n   A PCP client trying to obtain more than its fair share could trigger\n
      \  countermeasures according to local policy.\n   In conclusion, it is expected
      that, for most applications, asking for\n   more ports would not yield benefits
      justifying the additional costs.\n"
    title: 6.4.  What should a PCP client do when it receives fewer ports than
  title: 6.  Operational Considerations
- contents:
  - "7.  Security Considerations\n   The security considerations discussed in [RFC6887]
    apply to this\n   extension.\n   As described in Section 4.4.1, a single PCP request
    using the\n   PORT_SET option may result in multiple responses.  For this to\n
    \  happen, it is necessary that the request contain the nonce associated\n   with
    multiple mappings on the server.  Therefore, an on-path attacker\n   could use
    an eavesdropped nonce to mount an amplification attack.\n   Use of PCP authentication
    ([RFC6887], Section 18) eliminates this\n   attack vector.\n   In order to prevent
    a PCP client from controlling all ports bound to\n   a shared IP address, port
    quotas should be configured on the PCP\n   server (Section 17.2 of [RFC6887]).\n"
  title: 7.  Security Considerations
- contents:
  - "8.  IANA Considerations\n   IANA has allocated value 130 in the \"PCP Options\"
    registry at\n   <http://www.iana.org/assignments/pcp-parameters> for the new PCP\n
    \  option defined in Section 4.\n"
  title: 8.  IANA Considerations
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC6887]  Wing, D., Ed., Cheshire, S., Boucadair, M., Penno, R., and\n              P.
      Selkirk, \"Port Control Protocol (PCP)\", RFC 6887,\n              DOI 10.17487/RFC6887,
      April 2013,\n              <http://www.rfc-editor.org/info/rfc6887>.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [RFC3261]  Rosenberg, J., Schulzrinne, H.,
      Camarillo, G., Johnston,\n              A., Peterson, J., Sparks, R., Handley,
      M., and E.\n              Schooler, \"SIP: Session Initiation Protocol\", RFC
      3261,\n              DOI 10.17487/RFC3261, June 2002,\n              <http://www.rfc-editor.org/info/rfc3261>.\n
      \  [RFC3550]  Schulzrinne, H., Casner, S., Frederick, R., and V.\n              Jacobson,
      \"RTP: A Transport Protocol for Real-Time\n              Applications\", STD
      64, RFC 3550, DOI 10.17487/RFC3550,\n              July 2003, <http://www.rfc-editor.org/info/rfc3550>.\n
      \  [RFC4787]  Audet, F., Ed. and C. Jennings, \"Network Address\n              Translation
      (NAT) Behavioral Requirements for Unicast\n              UDP\", BCP 127, RFC
      4787, DOI 10.17487/RFC4787, January\n              2007, <http://www.rfc-editor.org/info/rfc4787>.\n
      \  [RFC6888]  Perreault, S., Ed., Yamagata, I., Miyakawa, S., Nakagawa,\n              A.,
      and H. Ashida, \"Common Requirements for Carrier-Grade\n              NATs (CGNs)\",
      BCP 127, RFC 6888, DOI 10.17487/RFC6888,\n              April 2013, <http://www.rfc-editor.org/info/rfc6888>.\n
      \  [RFC6970]  Boucadair, M., Penno, R., and D. Wing, \"Universal Plug and\n
      \             Play (UPnP) Internet Gateway Device - Port Control\n              Protocol
      Interworking Function (IGD-PCP IWF)\", RFC 6970,\n              DOI 10.17487/RFC6970,
      July 2013,\n              <http://www.rfc-editor.org/info/rfc6970>.\n   [RFC7596]
      \ Cui, Y., Sun, Q., Boucadair, M., Tsou, T., Lee, Y., and I.\n              Farrer,
      \"Lightweight 4over6: An Extension to the Dual-\n              Stack Lite Architecture\",
      RFC 7596, DOI 10.17487/RFC7596,\n              July 2015, <http://www.rfc-editor.org/info/rfc7596>.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Acknowledgements\n   The authors would like to express sincere appreciation to
    Alain\n   Durand, Cong Liu, Dan Wing, Dave Thaler, Peter Koch, Reinaldo Penno,\n
    \  Sam Hartman, Stuart Cheshire, Ted Lemon, Yoshihiro Ohba, Meral\n   Shirazipour,
    Jouni Korhonen, and Ben Campbell for their useful\n   comments and suggestions.\n"
  title: Acknowledgements
- contents:
  - "Contributors\n   The following individuals contributed to this document:\n   Yunqing
    Chen\n   China Telecom\n   Room 502, No.118, Xizhimennei Street\n   Beijing 100035\n
    \  China\n   Chongfeng Xie\n   China Telecom\n   Room 502, No.118, Xizhimennei
    Street\n   Beijing 100035\n   China\n   Yong Cui\n   Tsinghua University\n   Beijing
    100084\n   China\n   Phone: +86-10-62603059\n   Email: yong@csnet1.cs.tsinghua.edu.cn\n
    \  Qi Sun\n   Tsinghua University\n   Beijing 100084\n   China\n   Phone: +86-10-62785822\n
    \  Email: sunqibupt@gmail.com\n   Gabor Bajko\n   Mediatek Inc.\n   Email: gabor.bajko@mediatek.com\n
    \  Xiaohong Deng\n   France Telecom\n   Email: xiaohong.deng@orange-ftgroup.com\n"
  title: Contributors
- contents:
  - "Authors' Addresses\n   Qiong Sun\n   China Telecom\n   China\n   Phone: 86 10
    58552936\n   Email: sunqiong@ctbri.com.cn\n   Mohamed Boucadair\n   France Telecom\n
    \  Rennes  35000\n   France\n   Email: mohamed.boucadair@orange.com\n   Senthil
    Sivakumar\n   Cisco Systems\n   7100-8 Kit Creek Road\n   Research Triangle Park,
    NC  27709\n   United States\n   Phone: +1 919 392 5158\n   Email: ssenthil@cisco.com\n
    \  Cathy Zhou\n   Huawei Technologies\n   Bantian, Longgang District\n   Shenzhen
    \ 518129\n   China\n   Email: cathy.zhou@huawei.com\n   Tina Tsou\n   Philips
    Lighting\n   3 Burlington Woods Dr #4t\n   Burlington, MA  01803\n   United States\n
    \  Phone: +1 617-423-9999\n   Email: tina.tsou@philips.com\n   Simon Perreault\n
    \  Jive Communications\n   Quebec, QC\n   Canada\n   Email: sperreault@jive.com\n"
  title: Authors' Addresses
