- contents:
  - "               The Protocol Independent Multicast (PIM)\n                         Join
    Attribute Format\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2008 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   A \"Protocol Independent Multicast - Sparse Mode\" Join message
    sent by\n   a given node identifies one or more multicast distribution trees that\n
    \  that node wishes to join.  Each tree is identified by the combination\n   of
    a multicast group address and a source address (where the source\n   address is
    possibly a \"wild card\").  Under certain conditions it can\n   be useful, when
    joining a tree, to specify additional information\n   related to the construction
    of the tree.  However, there has been no\n   way to do so until now.  This document
    describes a modification of\n   the Join message that allows a node to associate
    attributes with a\n   particular tree.  The attributes are encoded in Type-Length-Value\n
    \  format.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \  2. Specification of Requirements ...................................3\n   3.
    Use of Join Attributes ..........................................3\n      3.1.
    Sending Join Attributes ....................................3\n      3.2. The
    Join Attribute Option in the PIM Hello .................4\n      3.3. Receiving
    Join Attributes ..................................4\n           3.3.1. General
    Considerations ..............................4\n           3.3.2. Transitive and
    Non-Transitive Attributes ............5\n           3.3.3. Conflicting Attributes
    ..............................5\n           3.3.4. Attribute Change ....................................6\n
    \     3.4. PIM Attribute Packet Format ................................7\n           3.4.1.
    PIM Join Packet Format ..............................7\n           3.4.2. PIM
    Join Attribute Hello Option .....................8\n   4. IANA Considerations
    .............................................8\n   5. Security Considerations
    .........................................9\n   6. Acknowledgments .................................................9\n
    \  7. Normative References ............................................9\n   8.
    Informative References ..........................................9\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   In the protocol known as \"Protocol Independent Multicast
    - Sparse\n   Mode\" [RFC4601] (henceforth referred to as \"PIM\"), a Join message\n
    \  sent by a given node may identify one or more multicast distribution\n   trees
    that that node wishes to join.  Each tree is identified by the\n   combination
    of a multicast group address and a source address (where\n   the source address
    is possibly a \"wild card\").  Under certain\n   conditions it can be useful,
    when joining a tree, to specify\n   additional information related to the construction
    of the tree.\n   However, there has been no way to do so until now.  This document\n
    \  describes a modification of the Join message that allows a node to\n   associate
    an attribute, encoded in Type-Length-Value (TLV) format,\n   with a particular
    tree that it wishes to join.  These attributes are\n   known as \"PIM Join Attributes\".\n
    \  In the PIM Join message, the Source Address is identified by being\n   encoded
    as an \"Encoded-Source Address\" ([RFC4601], section 4.9.1).\n   Each Encoded-Source
    Address occurs in the context of a particular\n   group address, represented as
    an \"Encoded-Group Address\".  Together,\n   the Encoded-Source Address and the
    Encoded-Group Address identify a\n   multicast distribution tree.  The Encoded-Source
    Address contains an\n   \"encoding type\" field.  The only value defined in [RFC4601]
    is 0.\n   This specification is the first to assign another encoding type\n   value.\n
    \  In order to associate TLVs with a particular tree, this specification\n   defines
    a new encoding type for the Encoded-Source Address: type 1.\n   When type 1 is
    used, the Encoded-Source Address may contain a\n   sequence of \"Join Attributes\",
    each of which is encoded as a TLV.\n   Then the type 1 Encoded-Source Address,
    in the context of the\n   associated Encoded-Group Address, identifies a multicast
    distribution\n   tree and specifies (via the Join Attribute TLVs) the attributes
    that\n   apply to the tree.  Apart from the fact that the type 1 Encoded-\n   Source
    Address may contain Join Attributes, it is otherwise identical\n   to the type
    0 Encoded-Source Address.\n   This document does not contain the specification
    for any particular\n   Join Attribute.  It specifies how Join Attributes are to
    be encoded\n   into the Join messages and it specifies generic procedures that
    are\n   common to all Join Attributes.  The content and purpose of any\n   particular
    Join Attribute is outside the scope of this document.\n   The use of Join Attributes
    in \"Protocol Independent Multicast - Dense\n   Mode\" [RFC3973] is not considered.\n"
  title: 1.  Introduction
- contents:
  - "2.  Specification of Requirements\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
  title: 2.  Specification of Requirements
- contents:
  - '3.  Use of Join Attributes

    '
  - contents:
    - "3.1.  Sending Join Attributes\n   Join Attributes are encoded as TLVs into
      the Encoded-Source Address\n   field of a PIM Join message, as specified in
      section 3.4.1 below.\n   Each attribute applies to the same multicast distribution
      tree that\n   is identified by the combination of the Encoded-Source Address
      and\n   the associated Encoded-Group Address.  The multicast distribution\n
      \  tree may be either a source-specific tree or a shared tree.\n   The encoding
      of the \"source address\" field within the Encoded-Source\n   Address is exactly
      the same for a type 1 Encoded-Source Address as\n   for a type 0 Encoded-Source
      Address, specified in [RFC4601].\n   A type 1 Encoded-Source Address MUST contain
      at least one Join\n   Attribute.  The way to specify that there are no Join
      Attributes for\n   a particular tree is to use the type 0 Encoded-Source Address.\n
      \  Multiple Join Attributes of the same type or of different types may\n   occur
      within a single Encoded-Source Address.  This specification\n   does not require
      all attributes of a given type to occur\n   contiguously.  There is no header
      field that specifies the number of\n   attributes; rather the last attribute
      is specially marked as such.\n   Any PIM router that does not understand the
      type 1 Encoded-Source\n   Address will not be able to process a PIM Join message
      that contains\n   it.  Further, if the use of any particular Join Attribute
      affects the\n   construction of the multicast distribution tree, the tree may
      not be\n   formed correctly unless the attribute is understood by all PIM\n
      \  routers that receive it.  As a consequence, attributes are only\n   useful
      within a single administrative domain (or perhaps a small set\n   of contiguous,
      cooperating administrative domains) where it can be\n   determined a priori
      that all deployed PIM routers understand the type\n   1 Encoded-Source Address,
      as well as whatever specific attributes are\n   in use.\n"
    title: 3.1.  Sending Join Attributes
  - contents:
    - "3.2.  The Join Attribute Option in the PIM Hello\n   To ensure that a type
      1 Encoded-Source Address is not sent to a PIM\n   neighbor that does not understand
      this encoding, a new PIM Hello\n   option, the \"Join Attribute\" option, is
      defined.  This option MUST be\n   included in the PIM Hellos of any PIM router
      that is willing to\n   receive type 1 Encoded-Source Address.  A PIM router
      MUST NOT send a\n   type 1 Encoded-Source Address out any interface on which
      there is a\n   PIM neighbor that has not included this option in its Hellos.
      \ (Even\n   a router that is not the upstream neighbor must be able parse the\n
      \  packet in order to do Join suppression or overriding.)\n   Note that a PIM
      router that sends the \"Join Attribute\" Hello option\n   does not necessarily
      understand every possible attribute type.  As\n   there is no immediate way
      to act on a neighbor's inability to process\n   certain attribute types, it
      is not desired to have a Hello option for\n   each possible attribute type.\n"
    title: 3.2.  The Join Attribute Option in the PIM Hello
  - contents:
    - '3.3.  Receiving Join Attributes

      '
    - contents:
      - "3.3.1.  General Considerations\n   A PIM router that receives a type 1 Encoded-Source
        Address MUST\n   examine all the attributes in the order in which they appear.\n
        \  The specification for a given attribute type MUST specify the\n   procedure
        to apply if there are multiple instances of that attribute\n   type.\n   Processing
        an attribute may affect the following:\n   - the construction of the associated
        multicast distribution tree,\n   - the processing of other attributes of the
        same type that also occur\n     in the type 1 Encoded-Source Address, and\n
        \  - the forwarding (or not) of the attribute itself and/or other\n     attributes
        of the same type that also occur in the type 1 Encoded-\n     Source Address.\n
        \  If the processing of a received attribute has any effect on the\n   construction
        of the multicast distribution tree or on the set of\n   attributes that are
        forwarded up the tree, then state MUST be\n   maintained associating the received
        attribute with the adjacency or\n   adjacencies from which it was received.\n"
      title: 3.3.1.  General Considerations
    - contents:
      - "3.3.2.  Transitive and Non-Transitive Attributes\n   If a PIM router understands
        a particular attribute type, the\n   attribute is processed as specified above.\n
        \  If a PIM router does not understand the type of a particular\n   attribute,
        the PIM router either forwards that attribute or discards\n   it, depending
        upon the setting of the attribute's F-bit.  If the\n   F-bit is set, then
        the router MUST forward the attribute; if the\n   F-bit is clear, then the
        router MUST discard it.\n   If one or more non-transitive attributes are discarded,
        the rest of\n   the Join Attributes (if any) are still forwarded.  If there
        are no\n   Join Attributes left to forward, a Join with a type 0 Encoded-Source\n
        \  Address field MUST be forwarded.\n"
      title: 3.3.2.  Transitive and Non-Transitive Attributes
    - contents:
      - "3.3.3.  Conflicting Attributes\n   It is possible that a router receives
        conflicting attribute\n   information from different downstream routers.  Conflicts
        only occur\n   with attributes of the same type.\n       ( Edge A1 )            (
        Edge B1 )---- [R1]\n      /           \\          /\n     /             \\
        \       /\n   [S]              ( Core )\n     \\             /        \\\n
        \     \\           /          \\\n       ( Edge A2 )            ( Edge B2
        )---- [R2]\n                                 Figure 1\n   As an example, consider
        Figure 1 and suppose a Join Attribute is used\n   to indicate a choice of
        exit router.  There are 2 receivers for the\n   same group connected to Edge
        B1 and B2.  Suppose that edge router B1\n   prefers A1 and B2 prefers A2 as
        exit points to reach the source S.\n   If both Edge B1 and B2 send a Join
        including an attribute to prefer\n   their exit router in the network and
        they cross the same core router,\n   the core router will get conflicting
        attribute information for the\n   source.  If this happens, we use the attribute
        from the PIM adjacency\n   with the numerically smallest IP address.  In the
        case of IPv6, the\n   link local address will be used.  When two neighbors
        have the same IP\n   address, either for IPv4 or IPv6, the interface index
        MUST be used as\n   a tie breaker.  The attributes from other sending routers
        MAY be\n   remembered; that way, if the adjacency that supplied the selected\n
        \  attribute gets pruned or expires, we are able to immediately use the\n
        \  attribute that was sent by the adjacency that is next in the order of\n
        \  preference.  This enables us to converge quickly without waiting for\n
        \  the next periodic update.\n   When a particular attribute type is specified,
        the specification MAY\n   include a conflict resolution procedure specific
        to that type.  If\n   so, that conflict resolution procedure MUST be used
        instead of the\n   procedure described in this section.\n   It is possible
        that a router will receive, from two different\n   adjacencies, transitive
        attributes of a given type.  If the router\n   does not understand attributes
        of that type and if the two\n   adjacencies have not sent the exact same set
        of attributes of that\n   type, then the conflict resolution procedure described
        in this\n   section MUST be applied to those attributes.  Two adjacencies
        are\n   said to have sent the exact same set of attributes of a given type
        if\n   they have sent the same number of instances of that attribute and if\n
        \  corresponding instances are byte-for-byte identical.\n"
      title: 3.3.3.  Conflicting Attributes
    - contents:
      - "3.3.4.  Attribute Change\n   A PIM router may decide to change the set of
        attributes it has\n   associated with a given multicast distribution tree.
        \ This can happen\n   if one of its downstream neighbors on the tree has changed
        the set of\n   attributes.  It can also happen as a result of processing the\n
        \  attributes.  It can also happen for reasons outside the scope of this\n
        \  specification (such as a change in configuration).\n   If a PIM router
        needs to change the set of attributes for a given\n   tree but does not change
        its upstream neighbor for that tree, it MUST\n   send a new Join for that
        tree, specifying the new set of attributes.\n   If the new set of attributes
        is the null set, the type 0 Encoded-\n   Source format MUST be used.\n   If
        a PIM router needs to change the set of attributes for a given\n   tree and
        as a result changes its upstream neighbor for that tree, it\n   sends a Prune
        to the old upstream neighbor.  The Prune does not need\n   to carry any attributes.\n
        \  When a PIM router receives a Join for a given tree and the Join does\n
        \  not contain exactly the same set of attributes as the prior Join, the\n
        \  set of attributes in the new Join becomes the entire new set of\n   attributes.
        \ No attribute information from the prior Join is\n   retained.  There is
        no way to advertise incremental changes to the\n   set of attributes; any
        attributes that are no longer present are\n   considered to have been withdrawn.
        \ If, as the result of receiving a\n   Join, a PIM router determines that
        the set of attributes has changed,\n   it will need to send a new Join upstream
        that contains the new set of\n   attributes.  (Of course, the procedures for
        resolving attribute\n   conflicts may need to be applied first.)\n   When
        a PIM router R1 receives a Prune for a given tree from a given\n   downstream
        neighbor R2, where R2 had previously sent attributes\n   applying to that
        tree, those attributes are considered to have been\n   withdrawn.  Depending
        on the attributes that R1 has received from its\n   other downstream neighbors
        (if any) on the tree, R1 may determine\n   that the set of attributes applying
        to the tree has changed, in which\n   case it needs to send a new Join, with
        the new attribute set, to its\n   upstream neighbor on the tree.\n"
      title: 3.3.4.  Attribute Change
    title: 3.3.  Receiving Join Attributes
  - contents:
    - '3.4.  PIM Attribute Packet Format

      '
    - contents:
      - "3.4.1.  PIM Join Packet Format\n   There is no space in the default PIM source
        encoding to include an\n   attribute field.  Therefore we introduce a new
        source encoding type.\n   The attributes are formatted as TLVs.  The new Encoded-Source
        Address\n   looks like this:\n    0                   1                   2
        \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  | Addr Family   | Encoding Type | Rsrvd   |S|W|R|  Mask Len     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |               Source Address\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+.....\n
        \  |F|E| Attr_Type | Length        | Value\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+.....\n
        \  |F|E| Attr_Type | Length        | Value\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+.....\n
        \       .                    .                     .\n        .                    .
        \                    .\n   - Encoding Type: 1\n   - F-bit, Transitive Attribute.
        \ If this bit is set, the attribute is\n     a transitive attribute; otherwise,
        it is a non-transitive\n     attribute.  See section 3.3.2.\n   - E-bit, End
        of Attributes.  If this bit is set, then this is the\n     last Join Attribute
        appearing in this Encoded-Source Address field.\n   - \"Attr_Type\", a 6-bit
        field identifying the type of the Attribute.\n   - Length field, a 1-octet
        field specifying the length in octets,\n     encoded as an unsigned binary
        integer, of the value field.\n   The other fields are the same as described
        in [RFC4601].\n"
      title: 3.4.1.  PIM Join Packet Format
    - contents:
      - "3.4.2.  PIM Join Attribute Hello Option\n    0                   1                   2
        \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |      OptionType = 26           |      OptionLength = 0        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  - Option type: 26.\n"
      title: 3.4.2.  PIM Join Attribute Hello Option
    title: 3.4.  PIM Attribute Packet Format
  title: 3.  Use of Join Attributes
- contents:
  - "4.  IANA Considerations\n   A new IANA registry has been created for \"PIM Join
    Attribute Types\".\n   These are values of the \"Attr_Type\" field depicted in
    section 3.4.1.\n   Assignments are to be made according to the policy \"IETF Review\"
    as\n   defined in [RFC5226].\n   IANA has assigned the PIM Hello option value
    26 to the \"Join\n   Attribute\" option, with this document as the reference.\n
    \  [RFC4601] should have, but did not, create a registry for the\n   \"Encoding
    Type\" field of the Encoded-Source Address format defined\n   therein.  IANA has
    set up a registry for this, referencing both this\n   document and [RFC4601].
    \ Assignments should be made according to the\n   policy \"IETF Review\" as defined
    in [RFC5226].  Two encoding types are\n   defined:\n   - The encoding type 0 has
    been allocated, defined as \"native encoding\n     for the address family\", and
    [RFC4601] is the reference.\n   - The encoding type 1 has been allocated, defined
    as \"native encoding\n     for the address family, but with zero or more PIM Join
    Attributes\n     present\", and this document is the reference.\n"
  title: 4.  IANA Considerations
- contents:
  - "5.  Security Considerations\n   Security of the Join Attribute is only guaranteed
    by the security of\n   the PIM packet, so the security considerations for PIM
    Join packets\n   as described in [RFC4601] apply here.  Additional security\n
    \  considerations may apply to specific attributes; if so, these will\n   need
    to be documented in the specification of those attributes.\n   Security considerations
    from [RFC5015] may apply as well.\n"
  title: 5.  Security Considerations
- contents:
  - "6.  Acknowledgments\n   The authors would like to thank Stig Venaas, James Lingard,
    Bharat\n   Joshi, Marshall Eubanks, Pekka Savola, Tom Pusateri, and Elwyn Davies\n
    \  for their input.\n"
  title: 6.  Acknowledgments
- contents:
  - "7.  Normative References\n   [RFC2119] Bradner, S., \"Key words for use in RFCs
    to Indicate\n             Requirement Levels\", BCP 14, RFC 2119, March 1997.\n
    \  [RFC4601] Fenner, B., Handley, M., Holbrook, H., and I. Kouvelas,\n             \"Protocol
    Independent Multicast - Sparse Mode (PIM-SM):\n             Protocol Specification
    (Revised)\", RFC 4601, August 2006.\n"
  title: 7.  Normative References
- contents:
  - "8.  Informative References\n   [RFC3973] Adams, A., Nicholas, J., and W. Siadak,
    \"Protocol\n             Independent Multicast - Dense Mode (PIM-DM): Protocol\n
    \            Specification (Revised)\", RFC 3973, January 2005.\n   [RFC5015]
    Handley, M., Kouvelas, I., Speakman, T., and L. Vicisano,\n             \"Bidirectional
    Protocol Independent Multicast (BIDIR-PIM)\",\n             RFC 5015, October
    2007.\n   [RFC5226] Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n
    \            IANA Considerations Section in RFCs\", BCP 26, RFC 5226, May\n             2008.\n"
  title: 8.  Informative References
- contents:
  - "Authors' Addresses\n   Arjen Boers\n   Cisco Systems, Inc.\n   Avda. Diagnoal,
    682\n   Barcelona 08034\n   EMail: aboers@cisco.com\n   IJsbrand Wijnands\n   Cisco
    Systems, Inc.\n   De kleetlaan 6a\n   Diegem  1831\n   Belgium\n   EMail: ice@cisco.com\n
    \  Eric C. Rosen\n   Cisco Systems, Inc.\n   1414 Massachusetts Avenue\n   Boxborough,
    MA, 01719\n   EMail: erosen@cisco.com\n"
  title: Authors' Addresses
