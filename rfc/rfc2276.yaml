- title: __initial_text__
  contents:
  - '      Architectural Principles of Uniform Resource Name Resolution

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document addresses the issues of the discovery of URN (Uniform\n\
    \   Resource Name) resolver services that in turn will directly translate\n  \
    \ URNs into URLs (Uniform Resource Locators) and URCs (Uniform Resource\n   Characteristics).\
    \  The document falls into three major parts, the\n   assumptions underlying the\
    \ work, the guidelines in order to be a\n   viable Resolver Discovery Service\
    \ or RDS, and a framework for\n   designing RDSs.  The guidelines fall into three\
    \ principle areas:\n   evolvability, usability, and security and privacy.  An\
    \ RDS that is\n   compliant with the framework will not necessarily be compliant\
    \ with\n   the guidelines.  Compliance with the guidelines will need to be\n \
    \  validated separately.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.    Introduction..................................................2\n\
    \   2.    Assumptions...................................................5\n  \
    \ 3.    Guidelines....................................................7\n   3.1\
    \   Evolution.....................................................7\n   3.2  \
    \ Usability....................................................10\n   3.2.1 The\
    \ Publisher................................................11\n   3.2.2 The Client...................................................12\n\
    \   3.2.3 The Management...............................................13\n  \
    \ 3.3   Security and Privacy.........................................14\n   4.\
    \    The Framework................................................18\n   5.  \
    \  Acknowledgements.............................................23\n   6.    References...................................................23\n\
    \   7.    Author's Address.............................................23\n  \
    \ 8.    Full Copyright Statement.....................................24\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The purpose of this document is to lay out the engineering\
    \ criteria\n   for what we will call here a Resolver Discovery Service (RDS),\
    \ a\n   service to help in the learning about URN (Uniform Resource Name)\n  \
    \ resolvers.  The term \"resolver\" is used in this document to indicate\n   a\
    \ service that translates URNs to URLs (Uniform Resource Locators) or\n   URCs\
    \ (Uniform Resource Characteristics).  Some resolvers may provide\n   direct access\
    \ to resources as well.  An RDS helps in finding a\n   resolver to contact for\
    \ further resolution.  It is worth noting that\n   some RDS designs may also incorporate\
    \ resolver functionality.  This\n   function of URN resolution is a component\
    \ of the realization of an\n   information infrastructure.  In the case of this\
    \ work, that\n   infrastructure is to be available, \"in the Internet\" or globally,\
    \ and\n   hence the solutions to the problems we are addressing must be\n   globally\
    \ scalable.  In this document, we are focussing specifically\n   on the design\
    \ of RDS schemes.\n   The Uniform Resource Identifier Working Group defined a\
    \ naming\n   architecture, as demonstrated in a series of three RFCs 1736 [1],\n\
    \   1737 [2], and 1738 [3].  Although several further documents are\n   needed\
    \ to complete the description of that architecture, it\n   incorporates three\
    \ core functions often associated with \"naming\":\n   identification, location,\
    \ and mnemonics or semantics.  By location,\n   we mean fully-qualified Domain\
    \ Names or IP addresses, possibly\n   extended with TCP ports and/or local identifiers,\
    \ such as pathnames.\n   Names may provide the ability to distinguish one resource\
    \ from\n   another, by distinguishing their \"names\".  Names may help to provide\n\
    \   access to a resource by including \"location\" information.  In\n   addition,\
    \ names may have other semantic or mnemonic information that\n   either helps\
    \ human users remember or figure out the names, or\n   includes other semantic\
    \ information about the resource being named.\n   The URI working group concluded\
    \ that there was need for persistent,\n   globally unique identifiers, distinct\
    \ from location or other semantic\n   information; these were called URNs.  These\
    \ \"names\" provide identity,\n   in that if two of them are \"the same\" (under\
    \ some simple rule of\n   canonicalization), they identify the same resource.\
    \  Furthermore, the\n   group decided that these \"names\" were generally to be\
    \ for machine,\n   rather than human, consumption.  Finally, with these guidelines\
    \ for\n   RDS's, this group has recognized the value of the separation of name\n\
    \   assignment management from name resolution management.\n   In contrast to\
    \ URNs, one can imagine a variety human-friendly naming\n   (HFN) schemes supporting\
    \ different suites of applications and user\n   communities.  These will need\
    \ to provide mappings to URNs in tighter\n   or looser couplings, depending on\
    \ the namespace.  It is these HFNs\n   that will be mnemonic, content-full, and\
    \ perhaps mutable, to track\n   changes in use and semantics.  They may provide\
    \ nicknaming and other\n   aliasing, relative or short names, context sensitive\
    \ names,\n   descriptive names, etc.  Their definition is not part of this effort,\n\
    \   but will clearly play an important role in the long run.\n   URNs as described\
    \ in RFC 1737 are defined globally; they are\n   ubiquitous in that a URN anywhere\
    \ in any context identifies the same\n   resource.  Given this requirement on\
    \ URNs, one must ask about its\n   implication for an RDS.  Does ubiquity imply\
    \ a guarantee of RDS\n   resolution everywhere?  Does ubiquity imply resolution\
    \ to the same\n   information about resolution everywhere?  In both cases the\
    \ answer is\n   probably not.  One cannot make global, systemic guarantees, except\
    \ at\n   an expense beyond reason.  In addition there may be policy as well as\n\
    \   technical reasons for not resolving in the same way everywhere.  It\n   is\
    \ quite possible that the resolution of a URN to an instance of a\n   resource\
    \ may reach different instances or copies under different\n   conditions.  Thus,\
    \ although a URN anywhere refers to the same\n   resource, in some environments\
    \ under some conditions, and at\n   different times, due to either the vagaries\
    \ of network conditions or\n   policy controls a URN may sometimes be resolvable\
    \ and other times or\n   places not.  Ubiquitous resolution cannot be assumed\
    \ simply because\n   naming is ubiquitous.  On the other hand wide deployment\
    \ and usage\n   will be an important feature of any RDS design.\n   Within the\
    \ URI community there has been a concept used frequently\n   that for lack of\
    \ a better term we will call a _hint_.  A hint is\n   something that helps in\
    \ the resolution of a URN; in theory we map\n   URNs to hints as an interim stage\
    \ in accessing a resource.  In\n   practice, an RDS may map a URN directly into\
    \ the resource itself if\n   it chooses to.  It is very likely that there will\
    \ be hints that are\n   applicable to large sets of URNs, for example, a hint\
    \ that indicates\n   that all URNs with a certain prefix or suffix can be resolved\
    \ by a\n   particular resolver.  A hint may also have meta-information\n   associated\
    \ with it, such as an expiration time or certification of\n   authenticity.  We\
    \ expect that these will stay with a hint rather than\n   being managed elsewhere.\
    \  We will assume in all further discussion of\n   hints that they include any\
    \ necessary meta-information as well as the\n   hint information itself.  Examples\
    \ of hints are: 1) the URN of a\n   resolver service that may further resolve\
    \ the URN, 2) the address of\n   such a service, 3) a location at which the resource\
    \ was previously\n   found.  The defining feature of hints is that they are only\
    \ hints;\n   they may be out of date, temporarily invalid, or only applicable\n\
    \   within a specific locality.  They do not provide a guarantee of\n   access,\
    \ but they probably will help in the resolution process.  By\n   whatever means\
    \ available, a set of hints may be discovered.  Some\n   combination of software\
    \ and human choice will determine which hints\n   will be tried and in what order.\n\
    \   We must assume that most resolutions of URNs will be provided by the\n   use\
    \ of locally stored hints, because maintaining a database of\n   globally available,\
    \ completely up-to-date location information is\n   infeasible for performance\
    \ reasons.  There are a number of\n   circumstances in which one can imagine that\
    \ hints become invalid,\n   either because a resource has moved or because a different\
    \ URN\n   resolver service has taken over the responsibility for resolution of\n\
    \   the URN.  Hints may be found in a variety of places.  It is generally\n  \
    \ assumed that a well engineered system will maintain or cache a set of\n   hints\
    \ for each URN at each location where that URN is found.  These\n   may have been\
    \ acquired from the owner of the resources, a\n   recommendation of the resource,\
    \ or one of many other sources.  In\n   addition, for those situations in which\
    \ those hints found locally\n   fail, a well engineered system will provide a\
    \ fall-back mechanism for\n   discovering further hints.  It is this fall-back\
    \ mechanism, an RDS,\n   that is being addressed in this document.  As with all\
    \ hints, there\n   can never be a guarantee that access to a resource will be\
    \ available\n   to all clients, even if the resource is accessible to some.  However,\n\
    \   an RDS is expected to work with reasonably high reliability, and,\n   hence,\
    \ may result in increased response time.\n   The remainder of this document falls\
    \ into three sections.  The first\n   identifies several sets of assumptions underlying\
    \ this work.  There\n   are three general assumptions:\n      * URNs are persistent;\n\
    \      * URN assignment can be delegated;\n      * Decisions can be made independently,\
    \ enabling isolation from\n        decisions of one's peers.\n   The next section\
    \ lays out three central principles Resolver Discovery\n   Service design.  For\
    \ each of these, we have identified a number of\n   more specific guidelines that\
    \ further define and refine the general\n   principle.  This section is probably\
    \ the most critical of the\n   document, because one must hold any proposed RDS\
    \ scheme up against\n   these principles and corollary guidelines to learn whether\
    \ or not it\n   is adequate.  The three central principles can be summarized as:\n\
    \      1) An RDS must allow for evolution and evolvability;\n      2) Usability\
    \ of an RDS with regard to each of the sets of\n         constituents involved\
    \ in the identification and location or\n         resources is paramount;\n  \
    \    3) It is centrally important that the security and privacy needs\n      \
    \   of all constituents be feasibly supported, to the degree\n         possible.\n\
    \   Each of the three major subsections of the guidelines section begins\n   with\
    \ a summary list of the more detailed guidelines identified in\n   that section.\n\
    \   The final section of the document lays out a framework for such RDSs.\n  \
    \ The purpose of this last section is to bound the search space for RDS\n   schemes.\
    \  The RDS designer should be aware that meeting the\n   guidelines is of primary\
    \ importance; it is possible to meet them\n   without conforming to the framework.\
    \  As will be discussed further in\n   this last section, designing within the\
    \ framework does not guarantee\n   compliance, so compliance evaluation must also\
    \ be part of the process\n   of evaluation of a scheme.\n"
- title: 2. Assumptions
  contents:
  - "2. Assumptions\n   Based on previous internet drafts and discussion in both the\
    \ URN BOFs\n   and on the URN WG mailing list, three major areas of assumptions\
    \ are\n   apparent: longevity, delegation, and independence.  Each will be\n \
    \  discussed separately.\n   The URN requirements [2] state that a URN is to be\
    \ a \"persistent\n   identifier\".  It is probably the case that nothing will\
    \ last forever,\n   but in the time frame of resources, users of those resources,\
    \ and the\n   systems to support the resources, the identifier should be considered\n\
    \   to be persistent or have a longer lifetime than those other entities.\n  \
    \ There are two assumptions that are implied by longevity of URNs:\n   mobility\
    \ and evolution.  Mobility will occur because resources may\n   move from one\
    \ machine to another, owners of resources may move among\n   organizations, or\
    \ the organizations themselves may merge, partition,\n   or otherwise transforms\
    \ themselves.  The Internet is continually\n   evolving; protocols are being revised,\
    \ new ones created, while\n   security policies and mechanisms evolve as well.\
    \  These are only\n   examples.  In general, we must assume that almost any piece\
    \ of the\n   supporting infrastructure of URN resolution will evolve.  In order\
    \ to\n   deal with both the mobility and evolution assumptions that derive\n \
    \  from the assumption of longevity, we must assume that users and their\n   applications\
    \ can remain independent of these mutating details of the\n   supporting infrastructure.\n\
    \   The second assumption is that naming and resolution authorities may\n   delegate\
    \ some of their authority or responsibility; in both cases,\n   the delegation\
    \ of such authority is the only known method of allowing\n   for the kind of scaling\
    \ expected.  It is important to note that a\n   significant feature of this work\
    \ is the potential to separate name\n   assignment, the job of labelling a resource\
    \ with a URN, from name\n   resolution, the job of discovering the resource given\
    \ the URN.  In\n   both cases, we expect multi-tiered delegation.  There may be\
    \ RDS\n   schemes that merge these two sets of responsibilities and delegation\n\
    \   relationships; by doing so, they bind together or overload two\n   distinctly\
    \ different activities, thus probably impeding growth.\n   The third assumption\
    \ is independence or isolation of one authority\n   from another and, at least\
    \ to some extent, from its parent.  When one\n   authority delegates some of its\
    \ rights and responsibilities to\n   another authority, the delegatee can operate\
    \ in that domain\n   independently of its peers and within bounds specified by\
    \ the\n   delegation, independently of the delegator.  This isolation is\n   critically\
    \ important in order to allow for independence of policy and\n   mechanism.\n\
    \   This third assumption has several corollaries.  First, we assume that\n  \
    \ the publisher of a resource can choose resolver services,\n   independently\
    \ of choices made by others.  At any given time, the\n   owner of a namespace\
    \ may choose a particular URN resolver service for\n   that delegated namespace.\
    \  Such a URN resolver service may be outside\n   the RDS service model, and only\
    \ identified or located by the RDS\n   service.  Second, it must be possible to\
    \ make a choice among RDS\n   services.  The existence of multiple RDS services\
    \ may arise from the\n   evolution of an RDS service, or development of new ones.\
    \  Although at\n   any given time there is likely to be only one or a small set\
    \ of such\n   services, the number is likely to increase during a transition period\n\
    \   from one architecture to another.  Thus, it must be assumed that\n   clients\
    \ can make a choice among a probably very small set of RDSs.\n   Third, there\
    \ must be independence in the choice about levels and\n   models of security and\
    \ authenticity required.  This choice may be\n   made by the owner of a naming\
    \ subspace, in controlling who can modify\n   hints in that subspace.  A naming\
    \ authority may delegate this choice\n   to the owners of the resources named\
    \ by the names it has assigned.\n   There may be limitations on this freedom of\
    \ choice in order to allow\n   other participants to have the level of security\
    \ and authenticity\n   they require, for example, in order to maintain the integrity\
    \ of the\n   RDS infrastructure as a whole.  Fourth, there is an assumption of\n\
    \   independence of choice of the rule of canonicalization of URNs within\n  \
    \ a namespace, limited by any restrictions or constraints that may have\n   been\
    \ set by its parent namespace.  This is a choice held by naming\n   authorities\
    \ over their own subnamespaces.  Rules for canonicalization\n   will be discussed\
    \ further in the framework section below.  Thus,\n   there are assumptions of\
    \ independence and isolation to allow for\n   delegated, independent authority\
    \ in a variety of domains.\n   The modularity assumptions of delegation and isolation\
    \ imply\n   independence of decision and implementation, leading to a\n   decentralization\
    \ that provides a certain degree of safety from denial\n   of service.  Based\
    \ on these these assumptions in conjunction with\n   that of longevity and those\
    \ for URLs and URNs as detailed in RFCs\n   1736 and 1737, we can now turn to\
    \ the guidelines for an RDS.\n"
- title: 3. Guidelines
  contents:
  - "3. Guidelines\n   The guidelines applying to an RDS center around three important\n\
    \   design principles in the areas of evolvability, usability, and\n   security\
    \ and privacy.  At its core the function of an RDS is to\n   provide hints for\
    \ accessing a resource given a URN for it.  These\n   hints may range in applicability\
    \ from local to global, and from\n   short-lived to long-lived.  They also may\
    \ vary in their degree of\n   verifiable authenticity.  While it may be neither\
    \ feasible nor\n   necessary that initial implementations support every guideline,\
    \ every\n   implementation must support evolution to systems that do support the\n\
    \   guidelines more fully.\n   It is important to note that there are requirements,\
    \ not applicable\n   specifically to an RDS that must also be met.  A whole URN\
    \ system\n   will consist of names in namespaces, the resolution information for\n\
    \   them, and the mapping from names in the namespaces to resolution\n   information\
    \ (or hints).  URNs themselves must meet the requirements\n   of RFC 1737.  In\
    \ addition, namespaces themselves must meet certain\n   requirements as described\
    \ by the URN Working Group [4].  Although all\n   these requirements and guidelines\
    \ are not described here, they must\n   be supported to provide an acceptable\
    \ system.\n   Each section below begins with a summary of the points made in that\n\
    \   section.  There is some degree of overlap among the areas, such as in\n  \
    \ allowing for the evolution of security mechanisms, etc., and hence\n   issues\
    \ may be addressed in more than one section.  It is also\n   important to recognize\
    \ that conformance with the guidelines will\n   often be subjective.  As with\
    \ many IETF guidelines and requirements,\n   many of these are not quantifiable\
    \ and hence conformance is a\n   judgment call and a matter of degree.  Lastly,\
    \ the reader may find\n   that some of them are those of general applicability\
    \ to distributed\n   systems and some are specific to URN resolution.  Those of\
    \ general\n   applicability are included for completeness and are not distinguished\n\
    \   as such.\n"
- title: 3.1 Evolution
  contents:
  - "3.1 Evolution\n   The issues in the area of the first principle, that of evolvability,\n\
    \   are:\n       1.1) An RDS must be able to support scaling in at least three\n\
    \            dimensions: the number of resources for which URNs will be\n    \
    \        required, the number of publishers and users of those\n            resources,\
    \ and the complexity of the delegation, as\n            authority for resolution\
    \ grows and possibly reflects\n            delegation in naming authority;\n \
    \      1.2) A hint resolution environment must support evolution of\n        \
    \    mechanisms, specifically for:\n            * a growing set of URN schemes;\n\
    \            * new kinds local URN resolver services;\n            * new authentication\
    \ schemes;\n            * alternative RDS schemes active simultaneously;\n   \
    \    1.3) An RDS must allow the development and deployment of\n            administrative\
    \ control mechanisms to manage human behavior\n            with respect to limited\
    \ resources.\n   One of the lessons of the Internet that we must incorporate into\
    \ the\n   development of mechanisms for resolving URNs is that we must be\n  \
    \ prepared for change.  Such changes may happen slowly enough to be\n   considered\
    \ evolutionary modifications of existing services, or\n   dramatically enough\
    \ to be considered revolutionary.  They may\n   permeate the Internet universe\
    \ bit by bit, living side by side with\n   earlier services or they may take the\
    \ Internet by storm, causing an\n   apparent complete transformation over a short\
    \ period of time.  There\n   are several directions in which we can predict the\
    \ need for\n   evolution.  At the very least, the community and the mechanisms\n\
    \   proposed should be prepared for these.\n   First, scaling is a primary issue\
    \ in conjunction with evolution.  The\n   number of users, both human and electronic,\
    \ as well as the number of\n   resources will continue to grow exponentially for\
    \ the near term, at\n   least.  Hence the number of URNs will also increase similarly.\
    \  In\n   addition, with growth in sheer numbers is likely to come growth in\n\
    \   the delegation of both naming authority and resolution authority.\n   These\
    \ facts mean that an RDS design must be prepared to handle\n   increasing numbers\
    \ of requests for inclusion, update and resolution,\n   in a set of RDS servers\
    \ perhaps inter-related in more complex ways.\n   This is not to say that there\
    \ will necessarily be more updates or\n   resolutions per URN; we cannot predict\
    \ that at this time.  But, even\n   so, the infrastructure may become more complex\
    \ due to delegation,\n   which may (as can be seen in Section 4 on the framework)\
    \ lead to more\n   complex rules for rewriting or extracting terms for staged\n\
    \   resolution.  Any design is likely to perform less well above some set\n  \
    \ of limits, so it is worth considering the growth limitations of each\n   design\
    \ alternative.\n   Second, we expect there to be additions and changes to the\n\
    \   mechanisms.  The community already understands that there must be a\n   capacity\
    \ for new URN schemes, as described in [4].  A URN scheme will\n   define a set\
    \ of URNs that meet the URN requirements [2], but may have\n   further constraints\
    \ on the internal structure of the URN. The\n   intention is that URN schemes\
    \ can be free to specify parts of the URN\n   that are left opaque in the larger\
    \ picture.  In fact, a URN scheme\n   may choose to make public or keep private\
    \ the algorithms for any such\n   \"opaque\" part of the URN.  In any case, we\
    \ must be prepared for a\n   growing number of URN schemes.\n   Often in conjunction\
    \ with a new URN scheme, but possibly\n   independently of any particular URN\
    \ scheme, new kinds of resolver\n   services may evolve.  For example, one can\
    \ imagine a specialized\n   resolver service based on the particular structure\
    \ of ISBNs that\n   improves the efficiency of finding documents given their ISBNs.\n\
    \   Alternatively, one can also imagine a general purpose resolver\n   service\
    \ that trades performance for generality; although it exhibits\n   only average\
    \ performance resolving ISBNs, it makes up for this\n   weakness by understanding\
    \ all existing URN schemes, so that its\n   clients can use the same service to\
    \ resolve URNs regardless of naming\n   scheme.  In this context, there will always\
    \ be room for improvement\n   of services, through improved performance, better\
    \ adaptability to new\n   URN schemes, or lower cost, for example.  New models\
    \ for URN\n   resolution will evolve and we must be prepared to allow for their\n\
    \   participation in the overall resolution of URNs.\n   If we begin with one\
    \ overall plan for URN resolution, into which the\n   enhancements described above\
    \ may fit, we must also be prepared for an\n   evolution in the authentication\
    \ schemes that will be considered\n   either useful or necessary in the future.\
    \  There is no single\n   globally accepted authentication scheme, and there may\
    \ never be one.\n   Even if one does exist at some point in time, we must always\
    \ be\n   prepared to move on to newer and better schemes, as the old ones\n  \
    \ become too easily spoofed or guessed.\n   In terms of mechanism, although we\
    \ may develop and deploy a single\n   RDS scheme initially, we must be prepared\
    \ for that top level model to\n   evolve.  Thus, if the RDS model supports an\
    \ apparently centralized\n   (from a policy standpoint) scheme for inserting and\
    \ modifying\n   authoritative information, over time we must be prepared to evolve\
    \ to\n   a different model, perhaps one that has a more distributed model of\n\
    \   authority and authenticity.  If the model has no core but rather a\n   cascaded\
    \ partial discovery of information, we may find that this\n   becomes unmanageable\
    \ with an increase in scaling.  Whatever the\n   model, we must be prepared for\
    \ it to evolve with changes in scaling,\n   performance, and policy constraints\
    \ such as security and cost.\n   The third evolutionary issue is even more mechanical\
    \ than the others.\n   At any point in time, the community is likely to be supporting\
    \ a\n   compromise position with respect to resolution.  We will probably be\n\
    \   operating in a situation balanced between feasibility and the ideal,\n   perhaps\
    \ with policy controls used to help stabilize use of the\n   service.  Ideally,\
    \ the service would be providing exactly what the\n   customers wanted and they\
    \ in turn would not request more support than\n   they need, but it seems extremely\
    \ unlikely.  Since we will almost\n   always be in a situation in which some service\
    \ provision resources\n   will be in short supply, some form of policy controls\
    \ will generally\n   be necessary.  Some policy controls may be realized as mechanisms\n\
    \   within the servers or in the details of protocols, while others may\n   only\
    \ be realized externally to the system.  For example, suppose hint\n   entries\
    \ are being submitted in such volume that the hint servers are\n   using up their\
    \ excess capacity and need more disk space.  Two\n   suggestions for policy control\
    \ are pricing and administrative.  As\n   technology changes and the balance of\
    \ which resources are in short\n   supply changes, the mechanisms and policies\
    \ for controlling their use\n   must evolve as well.\n"
- title: 3.2 Usability
  contents:
  - "3.2 Usability\n   To summarize, the usability guidelines fall into three areas\
    \ based on\n   participation in hint management and discovery:\n       2.1) The\
    \ publisher\n          2.1.1) URN to hint resolution must be correct and efficient\n\
    \                 with very high probability;\n          2.1.2) Publishers must\
    \ be able to select and move among URN\n                 resolver services to\
    \ locate their resources;\n          2.1.3) Publishers must be able to arrange\
    \ for multiple access\n                 points for their location information;\n\
    \          2.1.4) Publishers should be able to provide hints with\n          \
    \       varying lifetimes;\n          2.1.5) It must be relatively easy for publishers\
    \ to specify\n                 to the management and observe their hint information\
    \ as\n                 well as any security constraints they need for their\n\
    \                 hints.\n       2.2) The client\n          2.2.1) The interface\
    \ to the RDS must be simple, effective,\n                 and efficient;\n   \
    \       2.2.2) The client and client applications must be able to\n          \
    \       understand the information stored in and provided by\n               \
    \  the RDS easily, in order to be able to make informed\n                 choices.\n\
    \       2.3) The management\n          2.3.1) The management of hints must be\
    \ as unobtrusive as\n                 possible, avoiding using too many network\
    \ resources;\n          2.3.2) The management of hints must allow for administrative\n\
    \                 controls that encourage certain sorts of behavior\n        \
    \         deemed necessary to meet other requirements;\n          2.3.3) The configuration\
    \ and verification of configuration of\n                 individual RDS servers\
    \ must be simple enough not to\n                 discourage configuration and\
    \ verification.\n   Usability can be evaluated from three distinct perspectives:\
    \ those of\n   a publisher wishing to make a piece of information public, those\
    \ of a\n   client requesting URN resolution, and those of the provider or\n  \
    \ manager of resolution information.  We will separately address the\n   usability\
    \ issues from each of these three perspectives.  It is\n   important to recognize\
    \ that these may be sitautions in which\n   interests of some of the participants\
    \ (for exampel a use and a\n   publisher) may be in conflict; some resolution\
    \ will be needed.\n   It is worth noting that there are two additional sorts of\n\
    \   participants in the whole naming process, as discussed in the URN WG.\n  \
    \ They are the naming authorities which choose and assign names, and\n   the authors\
    \ who include URNs in their resources.  These two are not\n   relevant to the\
    \ design of an RDS and hence are not discussed further\n   here.\n"
- title: 3.2.1 The Publisher
  contents:
  - "3.2.1 The Publisher\n   The publisher must be able to make URNs known to potential\
    \ customers.\n   From the perspective of a publisher, it is of primary importance\
    \ that\n   URNs be correctly and efficiently resolvable by potential clients\n\
    \   with very high probability.  Publishers stand to gain from long-lived\n  \
    \ URNs, since they increase the chance that references continue to\n   point to\
    \ their published resources.\n   The publisher must also be able to choose easily\
    \ among a variety of\n   potential services that might translate URNs to location\
    \ information.\n   In order to allow for this mobility among resolvers, the RDS\n\
    \   architecture must support such transitions, within policy control\n   bounds.\
    \  It is worth noting that although multiple listing services\n   are available\
    \ in telephone books, they are generally accompanied by a\n   fee.  There is nothing\
    \ preventing there being fees collected for\n   similar sorts of services with\
    \ respect to URNs.\n   The publisher must be able to arrange for multiple access\
    \ points to a\n   published resource.  For this to be useful, resolver services\
    \ should\n   be prepared to provide different resolution or hint information to\n\
    \   different clients, based on a variety of information including\n   location\
    \ and the various access privileges the client might have.  It\n   is important\
    \ to note that this may have serious implications for\n   caching this information.\
    \  For example, companies might arrange for\n   locally replicated copies of popular\
    \ resources, and would like to\n   provide access to the local copies only for\
    \ their own employees.\n   This is distinct from access control on the resource\
    \ as a whole, and\n   may be applied differently to different copies.\n   The\
    \ publisher should be able to provide both long and short term\n   location information\
    \ about accessing the resource.  Long term\n   information is likely to be such\
    \ information as the long term address\n   of a resource itself or the location\
    \ or identity of a resolver\n   service with which the publisher has a long term\
    \ relationship.  One\n   can imagine that the arrangement with such a long term\n\
    \   \"authoritative\" resolver service might be a guarantee of reliability,\n\
    \   resiliency to failure, and atomic updates.  Shorter term information\n   is\
    \ useful for short term changes in services or to avoid short lived\n   congestion\
    \ or failure problems.  For example, if the actual\n   repository of the resource\
    \ is temporarily inaccessible, the resource\n   might be made available from another\
    \ repository.  This short term\n   information can be viewed as temporary refinements\
    \ of the longer term\n   information, and as such should be more easily and quickly\
    \ made\n   available, but may be less reliable.  Some RDS designs may not\n  \
    \ distinguish between these two extremes.\n   Lastly, the publishers will be the\
    \ source of much hint information\n   that will be stored and served by the manager\
    \ of the infrastructure.\n   Despite the fact that many publishers will not understand\
    \ the details\n   of the RDS mechanism, it must be easy and straightforward for\
    \ them to\n   install hint information.  This means that in general any one who\n\
    \   wishes to publish and to whom the privilege of resolution has been\n   extended\
    \ through delegation, can do so.  The publisher must be able\n   not only to express\
    \ hints, but also to verify that what is being\n   served by the manager is correct.\
    \  Furthermore, to the extent that\n   there are security constraints on hint\
    \ information, the publisher\n   must be able to both express them and verify\
    \ compliance with them\n   easily.\n"
- title: 3.2.2 The Client
  contents:
  - "3.2.2 The Client\n   From the perspective of the client, simplicity and usability\
    \ are\n   paramount.  Of critical importance to serving clients effectively is\n\
    \   that there be an efficient protocol through which the client can\n   acquire\
    \ hint information.  Since resolving the name is only the first\n   step on the\
    \ way to getting access to a resource, the amount of time\n   spent on it must\
    \ be minimized.\n   Furthermore, it will be important to be able to build simple,\n\
    \   standard interfaces to the RDS so that both the client and\n   applications\
    \ on the client's behalf can interpret hints and\n   subsequently make informed\
    \ choices.  The client, perhaps with the\n   assistance of the application, must\
    \ be able to specify preferences\n   and priorities and then apply them.  If the\
    \ ordering of hints is only\n   partial, the client may become directly\n   involved\
    \ in the choice and interpretation of them and hence they must\n   be understandable\
    \ to that client.  On the other hand, in general it\n   should be possible to\
    \ configure default preferences, with individual\n   preferences viewed as overriding\
    \ any defaults.\n   From the client's perspective, although URNs will provide\
    \ important\n   functionality, the client is most likely to interact directly\
    \ only\n   with human friendly names (HFNs).  As in direct human interaction\n\
    \   (not computer mediated), the sharing of names will be on a small,\n   private,\
    \ or domain specific scale.  HFNs will be the sorts of\n   references and names\
    \ that are easy to remember, type, choose among,\n   assign, etc.  There will\
    \ also need to be a number of mechanisms for\n   mapping HFNs to URNs.  Such services\
    \ as \"yellow pages\" or \"search\n   tools\" fall into this category.  Although\
    \ we are mentioning HFNs\n   here, it is important to recognize that HFNs and\
    \ the mappings from\n   HFNs to URNs is and must remain a separate functionality\
    \ from an RDS.\n   Hence, although HFNs will be critical to clients, they do not\
    \ fall\n   into the domain of this document.\n"
- title: 3.2.3 The Management
  contents:
  - "3.2.3 The Management\n   Finally, we must address the usability concerns with\
    \ respect to the\n   management of the hint infrastructure itself.  What we are\
    \ terming\n   \"management\" is a service that is distinct from publishing; it\
    \ is the\n   core of an RDS.  It involves the storage and provision of hints to\n\
    \   the clients, so that they can find published resources.  It also\n   provides\
    \ security with respect to name resolution to the extent that\n   there is a commitment\
    \ for provision of such security; this is\n   addressed in Section 3.3 below.\n\
    \   The management of hints must be as unobtrusive as possible. First,\n   its\
    \ infrastructure (hint storage servers and distribution protocols)\n   must have\
    \ as little impact as possible on other network activities.\n   It must be remembered\
    \ that this is an auxiliary activity and must\n   remain in the background.\n\
    \   Second, in order to make hint management feasible, there may need to\n   be\
    \ a system for administrative incentives and disincentives such as\n   pricing\
    \ or legal restrictions.  Recovering the cost of running the\n   system is only\
    \ one reason for levying charges.  The introduction of\n   payments often has\
    \ an impact on social behavior.  It may be necessary\n   to discourage certain\
    \ forms of behavior that when out of control have\n   serious negative impact\
    \ on the whole community.  At the same time,\n   any administrative policies should\
    \ encourage behavior that benefits\n   the community as a whole.  Thus, for example,\
    \ a small one-time charge\n   for authoritatively storing a hint might encourage\
    \ conservative use\n   of hints.  If we assume that there is a fixed cost for\
    \ managing a\n   hint, then the broader its applicability across the URN space,\
    \ the\n   more cost effective it is.  That is, when one hint can serve for a\n\
    \   whole collection of URNs, there will be an incentive to submit one\n   general\
    \ hint over a large number of more specific hints.  Similar\n   policies can be\
    \ instituted to discourage the frequent changing of\n   hints.  In these ways\
    \ and others, behavior benefitting the community\n   as a whole can be encouraged.\n\
    \   Lastly, symmetric to issues of usability for publishers, it must also\n  \
    \ be simple for the management to configure the mapping of URNs to\n   hints.\
    \  It must be easy both to understand the configuration and to\n   verify that\
    \ configuration is correct.  With respect to management,\n   this issue may have\
    \ an impact not only on the information itself but\n   also on how it is partitioned\
    \ among network servers that\n   collaboratively provide the management service\
    \ or RDS.  For example,\n   it should be straightforward to bring up a server\
    \ and verify that the\n   data it is managing is correct.  Although this is not\
    \ a guideline, it\n   is worth nothing that since we are discussing a global and\
    \ probably\n   growing service, encouraging volunteer participants suggests that,\
    \ as\n   with the DNS, such volunteers can feel confident about the service\n\
    \   they are providing and its benefit to both themselves and the rest of\n  \
    \ the community.\n"
- title: 3.3 Security and Privacy
  contents:
  - "3.3 Security and Privacy\n   In summary, security and privacy guidelines can\
    \ be identified as some\n   degree of protection from threats.  The guidelines\
    \ that fall under\n   this third principle, that of security, are all stated in\
    \ terms of\n   possibilities or options for users of the service to require and\n\
    \   utilize.  Hence they address the availability of functionality, but\n   not\
    \ for the use of it.  We recognize that all security is a matter of\n   degree\
    \ and compromise.  These may not satisfy all potential\n   customers, and there\
    \ is no intention here to prevent the building of\n   more secure servers with\
    \ more secure protocols to suit their needs.\n   These are intended to satisfy\
    \ the needs of the general public.\n       3.1) It must be possible to create\
    \ authoritative versions of a\n            hint with access-to-modification privileges\
    \ controlled;\n       3.2) It must be possible to determine the identity of servers\
    \ or\n            avoid contact with unauthenticated servers;\n       3.3) It\
    \ must be possible to reduce the threat of denial of\n            service by broad\
    \ distribution of information across servers;\n       3.4) It must be possible\
    \ within the bounds of organizational\n            policy criteria to provide\
    \ at least some degree of privacy\n            for traffic;\n       3.5) It must\
    \ be possible for publishers to keep private certain\n            information\
    \ such as an overall picture of the resources they\n            are publishing\
    \ and the identity of their clients;\n       3.6) It must be possible for publishers\
    \ to be able to restrict\n            access to the resolution of the URNs for\
    \ the resources they\n            publish, if they wish.\n   When one discusses\
    \ security, one of the primary issues is an\n   enumeration of the threats being\
    \ considered for mitigation.  The\n   tradeoffs often include cost in money and\
    \ computational and\n   communications resources, ease of use, likelihood of use,\
    \ and\n   effectiveness of the mechanisms proposed.  With this in mind, let us\n\
    \   consider a set of threats.\n   Voydock and Kent [5] provide a useful catalog\
    \ of potential threats.\n   Of these the passive threats to privacy or confidentiality\
    \ and the\n   active threats to authenticity and integrity are probably the most\n\
    \   important to consider here.  To the extent that spurious association\n   causes\
    \ threats to the privacy, authenticity, or integrity with\n   respect to information\
    \ within servers managing data, it is also\n   important.  Denial of service is\
    \ probably the most difficult of these\n   areas of threats both to detect and\
    \ to prevent, and we will therefore\n   set it aside for the present as well,\
    \ although it will be seen that\n   solutions to other problems will also mitigate\
    \ some of the problems\n   of denial of service.  Furthermore, because this is\
    \ intended to be\n   provide a global service to meet the needs of a variety of\n\
    \   communities, the engineering tradeoffs will be different for\n   different\
    \ clients.  Hence the guidelines are stated in terms of, \"It\n   must be possible...\"\
    \  It is important to note that the information of\n   concern here is hint information,\
    \ which by nature is not guaranteed\n   to be correct or up-to-date; therefore,\
    \ it is unlikely to be worth\n   putting too much expense into the correctness\
    \ of hints, because there\n   is no guarantee that they are still correct anyway.\
    \  The exact choice\n   of degree of privacy, authenticity, and integrity must\
    \ be determined\n   by the needs of the client and the availability of services\
    \ from the\n   server.\n   To avoid confusion it is valuable to highlight the\
    \ meanings of terms\n   that have different meanings in other contexts.  In this\
    \ case, the\n   term \"authoritative\" as it is used here connotes the taking\
    \ of an\n   action or stamp of approval by a principal (again in the security\n\
    \   sense) that has the right to perform such an act of approval.  It has\n  \
    \ no implication of correctness of information, but only perhaps an\n   implication\
    \ of who claimed it to be correct.  In contrast, the term\n   is often also used\
    \ simply to refer to a primary copy of a piece of\n   information for which there\
    \ may also be secondary or cached copies\n   available.  In this discussion of\
    \ security we use the former meaning,\n   although it may also be important to\
    \ be able to learn about whether a\n   piece of information is from a primary\
    \ source or not and request that\n   it be primary.  This second meaning arises\
    \ elsewhere in the document\n   and is so noted there.\n   It is also important\
    \ to distinguish various possible meanings for\n   \"access control\".  There\
    \ are two areas in which distinctions can be\n   made.  First, there is the question\
    \ of the kind of access control\n   that is being addressed, for example, in terms\
    \ of hints whether it is\n   read access, read and modify access, or read with\
    \ verification for\n   authenticity.  Second, there is the question of to what\
    \ access is\n   being controlled.  In the context of naming it might be the names\n\
    \   themselves (not the case for URNs), the mapping of URNs to hints (the\n  \
    \ business of an RDS), the mapping of URNs to addresses (not the\n   business\
    \ of an RDS as will be discussed below in terms of privacy),\n   or the resource\
    \ itself (unrelated to naming or name resolution at\n   all).  We attempt to be\
    \ clear about what is meant when using \"access\n   control\".\n   There is one\
    \ further issue to address at this point, the distinction\n   between mechanism\
    \ and policy.  In general, a policy is realized by\n   means of a set of mechanisms.\
    \  In the case of an RDS there may be\n   policies internal to the RDS that it\
    \ needs to have supported in order\n   to do its business as it sees fit.  Since,\
    \ in general it is in the\n   business of storing and distributing information,\
    \ most of its\n   security policies may have to do with maintaining its own integrity,\n\
    \   and are rather limited.  Beyond that, to the degree possible, it\n   should\
    \ impose no policy on its customers, the publishers and users.\n   It is they\
    \ that may have policies that they would like supported by\n   the RDS.  To that\
    \ end, an RDS should provide a spectrum of \"tools\" or\n   mechanisms that the\
    \ customers can cause to be deployed on their\n   behalf to realize policies.\
    \  An RDS may not provide all that is\n   needed by a customer.  A customer may\
    \ have different requirements\n   within his or her administrative bounds than\
    \ outside.  Thus, \"it must\n   be possible...\"  captures the idea that the RDS\
    \ must generally\n   provide the tools to implement policies as needed by the\
    \ customers.\n   The first approach to URN resolution is to discover local hints.\
    \  In\n   order for hints to be discovered locally, they will need to be as\n\
    \   widely distributed as possible to what is considered to be local for\n   every\
    \ locale.  The drawback of such wide distribution is the wide\n   distribution\
    \ of updates, causing network traffic problems or delays\n   in delivering updates.\
    \  An alternative model would concentrate hint\n   information in servers, thus\
    \ requiring that update information only\n   be distributed to these servers.\
    \  In such a model the vulnerable\n   points are the sources of the information\
    \ and the distribution\n   network among them.  Attackers on the integrity of\
    \ the information\n   stored in a server may come in the form of masquerading\
    \ as the owner\n   or the server of the information.  Wide replication of information\n\
    \   among servers increases the difficult of masquerading at all the\n   locations\
    \ of the information as well as reducing the threat of denial\n   service.  These\
    \ lead us to three identifiable guidelines for our\n   security model:\n   * ACCESS\
    \ CONTROL ON HINTS: It must be possible to create an\n     authoritative version\
    \ of each hint with change control limited only\n     to those principals with\
    \ the right to modify it.  The choice of who\n     those principals are or whether\
    \ they are unlimited must be made by\n     the publisher of a hint.\n   * SERVER\
    \ AUTHENTICITY: Servers and clients must be able to learn the\n     identity of\
    \ the servers with which they communicate.  This will be\n     a matter of degree\
    \ and it is possible that there will be more\n     trustworthy, but less accessible\
    \ servers, supported by a larger\n     cluster of less authenticatable servers\
    \ that are more widely\n     available.  In the worst case, if the client receives\
    \ what appears\n     to be unvalidated information, the client should assume that\
    \ the\n     hint may be inaccurate and confirmation of the data might be sought\n\
    \     from more reliable but less accessible sources.\n   * SERVER DISTRIBUTION:\
    \ Broad availability will provide resistance to\n     denial of service.  It is\
    \ only to the extent that the services are\n     available that they provide any\
    \ degree of trustworthiness.  In\n     addition, the distribution of services\
    \ will reduce vulnerability of\n     the whole community, by reducing the trust\
    \ put in any single\n     server.  This must be mitigated by the fact that to\
    \ the extent\n     trust is based on a linked set of servers, if any one fails,\
    \ the\n     whole chain of trust fails; the more elements there are in such a\n\
    \     chain, the more vulnerable it may become.\n   Privacy can be a double-edged\
    \ sword.  For example, on one hand, an\n   organization may consider it critically\
    \ important that its\n   competitors not be able to read its traffic.  On the\
    \ other hand, it\n   may also consider it important to be able to monitor exactly\
    \ what its\n   employees are transmitting to and from whom, for a variety of reasons\n\
    \   such as reducing the probability that its employees are giving or\n   selling\
    \ the company's secrets to verifying that employees are not\n   using company\
    \ resources for private endeavor.  Thus, although there\n   are likely to be needs\
    \ for privacy and confidentiality, what they\n   are, who controls them and how,\
    \ and by what mechanisms vary widely\n   enough that it is difficult to say anything\
    \ concrete about them here.\n   The privacy of publishers is much easier to address.\
    \  Since they are\n   trying to publish something, in general privacy is probably\
    \ not\n   desired.  However, publishers do have information that they might\n\
    \   like to keep private: information about who their clients are, and\n   information\
    \ about what names exist in their namespace.  The\n   information about who their\
    \ clients are may be difficult to collect\n   depending on the implementation\
    \ of the resolution system.  For\n   example, if the resolution information relating\
    \ to a given publisher\n   is widely replicated, the hits to _each_ replicated\
    \ copy would need\n   to be recorded.  Of course, determining if a specific client\
    \ is\n   requesting a given name can be approached from the other direction,\n\
    \   by watching the client as we saw above.\n   There are likely to be some publishers\
    \ publishing for a restricted\n   audience.  To the extent they want to restrict\
    \ access to a resource,\n   that is the responsibility of the repository providing\
    \ and\n   restricting access to the resource.  If they wish to keep the name\n\
    \   and hints for a resource private, a public RDS may be inadequate for\n   their\
    \ needs.  In general, it is intended for those who want customers\n   to find\
    \ their resources in an unconstrained fashion.\n   The final privacy issue for\
    \ publishers has to do with access control\n   over URN resolution.  This issue\
    \ is dependent on the implementation\n   of the publisher's authoritative (in\
    \ the sense of \"primary) URN\n   resolver server.  URN resolver servers can be\
    \ designed to require\n   proof of identity in order to be issued resolution information;\
    \ if\n   the client does not have permission to access the URN requested, the\n\
    \   service denies that such a URN exists.  An encrypted protocol can\n   also\
    \ be used so that both the request and the response are obscured.\n   Encryption\
    \ is possible in this case because the identity of the final\n   recipient is\
    \ known (i.e.  the URN server).  Thus, access control over\n   URN resolution\
    \ can and should be provided by resolver servers rather\n   than an RDS.\n"
- title: 4. The Framework
  contents:
  - "4. The Framework\n   With these assumptions and guidelines in mind, we conclude\
    \ with a\n   general framework within which RDS designs may fall.  As stated\n\
    \   earlier, although this framework is put forth as a suggested guide\n   for\
    \ RDS designers, compliance with it will in no way guarantee\n   compliance with\
    \ the guidelines.  Such an evaluation must be performed\n   separately.  All such\
    \ lack of compliance should be clearly\n   documented.\n   The design of the framework\
    \ is based on the syntax of a URN as\n   documented in RFC-2141 [6].  This is:\n\
    \                              URN:<NID>:<NSS>\n   where URN: is a prefix on all\
    \ URNs, NID is the namespace identifier,\n   and NSS is the namespace specific\
    \ string.  The prefix identifies each\n   URN as such.  The NID determines the\
    \ general syntax for all URNs\n   within its namespace.  The NSS is probably partitioned\
    \ into a set of\n   delegated and subdelegated namespaces, and this is possibly\
    \ reflected\n   in further syntax specifications.  In more complex environments,\
    \ each\n   delegated namespace will be permitted to choose the syntax of the\n\
    \   variable part of the namespace that has been delegated to it.  In\n   simpler\
    \ namespaces, the syntax will be restricted completely by the\n   parent namespace.\
    \  For example, although the DNS does not meet all\n   the requirements for URNs,\
    \ it has a completely restricted syntax,\n   such that any further structuring\
    \ must be done only by adding further\n   refinements to the left, maintaining\
    \ the high order to low order,\n   right to left structure.  A delegated syntax\
    \ might be one in which a\n   host is named by the DNS, but to the right of that\
    \ and separated by\n   an \"@\" is a string whose internal ordering is defined\
    \ by the file\n   system on the host, which may be defined high order to low order,\n\
    \   left to right.  Of course, much more complex and nested syntaxes\n   should\
    \ be possible, especially given the need to grandfather\n   namespaces.  In order\
    \ to resolve URNs, rules will be needed for two\n   reasons.  One is simply to\
    \ canonicalize those namespaces that do not\n   fall into a straightforward (probably\
    \ right to left or left to right)\n   ordering of the components of a URN, as\
    \ determined by the delegated\n   naming authorities involved.  It is also possible\
    \ that rules will be\n   needed in order to derive from URNs the names of RDS\
    \ servers to be\n   used in stages.\n                            URN:<NID><NSS>\n\
    \                                 |\n                                 |\n    \
    \                             |\n                                 |\n        \
    \                         v\n                       +-------------------+\n  \
    \                     |Global NID registry|\n                       +-------------------+\n\
    \                                 |\n                                 |\n    \
    \                             |\n              (return rule or URN resolver service\
    \ reference)\n                                 |\n                           \
    \      +----------------------------------+\n                                \
    \ |                                  |\n                       +->(apply rule\
    \ to determine RDS server)      |\n                       |         |        \
    \                          |\n                       |         |             \
    \                     |\n                       |         |                  \
    \                |\n                       |    +----------+                 \
    \           |\n                       |    |RDS server|          +-----------------+\n\
    \                       |    +----------+          |\n                       |\
    \      |   |               v\n                       |      |   |   (set of choices)\n\
    \                       |      |   +----+----------(...)--------+\n          \
    \             |   (rule)      |                       |\n                    \
    \   |      |        |                       |\n                       |      |\
    \        |                       |\n                       +------+        | \
    \                      |\n                                       v           \
    \            v\n                                  +----------+            +----------+\n\
    \                                  |URN       |            |URN       |\n    \
    \                              |resolver  |            |resolver  |\n        \
    \                          |service   |            |service   |\n            \
    \                      +----------+            +----------+\n                \
    \       Figure 1: An RDS framework\n   The NID defines a top level syntax.  This\
    \ syntax will determine\n   whether the NID alone or in conjunction with some\
    \ extraction from the\n   NSS (for the top level naming authority name) is to\
    \ be used to\n   identify the first level server to be contacted.  At each stage\
    \ of\n   the lookup either a new rule for generating the strings used in yet\n\
    \   another lookup (the strings being the identity of another RDS server\n   and\
    \ possibly a string to be resolved if it is different than the\n   original URN)\
    \ or a reference outside the RDS to a URN resolver\n   service, sidestepping any\
    \ further use of the RDS scheme.  Figure 1\n   depicts this process.\n   There\
    \ are several points worth noting about the RDS framework.\n   First, it leaves\
    \ open the determination of the protocols, data\n   organization, distribution\
    \ and replication needed to support a\n   particular RDS scheme.  Second, it leaves\
    \ open the location of the\n   computations engendered by the rules.  Third, it\
    \ leaves open the\n   possibility that partitioning (distribution) of the RDS\
    \ database need\n   not be on the same boundaries as the name delegation.  This\
    \ may seem\n   radical to some, but if the information is stored in balanced B-trees\n\
    \   for example, the partitioning may not be along those naming authority\n  \
    \ delegation boundaries (see [7]).  Lastly, it leaves open access to\n   the Global\
    \ NID Registry.  Is this distributed to every client, or\n   managed in widely\
    \ distributed servers?  It is important to note that\n   it is the intention here\
    \ that a single RDS scheme is likely to\n   support names from many or all naming\
    \ schemes, as embodied in their\n   NIDs.\n   One concept that has not been addressed\
    \ in Figure 1 is that there may\n   be more than one RDS available at any given\
    \ time, in order to allow\n   for evolution to new schemes.  Thus, the picture\
    \ should probably look\n   more like Figure 2.\n                         URN:<NID>:<NSS>\n\
    \                               |\n                               |\n        \
    \           +-----------+-------(...)-------+\n                   |          \
    \                     |\n                   |                               |\n\
    \                   |                               |\n                   v  \
    \                             v\n         +---------------------+        +---------------------+\n\
    \         |Global NID registry 1|        |Global NID registry N|\n         +---------------------+\
    \        +---------------------+\n                   .                       \
    \        .\n                   .                               .\n           \
    \        .                               .\n             Figure 2: More than one\
    \ co-existing RDS scheme\n   If we are to support more than one co-existing RDS\
    \ scheme, there will\n   need to be coordination among them with respect to storage\
    \ and\n   propagation of information and modifications.  The issue is that\n \
    \  generally it should be assumed that all information should be\n   available\
    \ through any operational RDS scheme.  One cannot expect\n   potential publishers\
    \ to submit updates to more than one RDS scheme.\n   Hence there will need to\
    \ be a straightforward mapping of information\n   from one to the other of these\
    \ schemes.  It is possible that that\n   transformation will only go in one direction,\
    \ because a newer RDS\n   service is replacing an older one, which is not kept\
    \ up to date, in\n   order to encourage transfer to the newer one.  Thus, at some\
    \ point,\n   updates may be made only to the newer one and not be made available\n\
    \   to the older one, as is often done with library catalogs.\n   This framework\
    \ is presented in order to suggest to RDS scheme\n   designers a direction in\
    \ which to start designing.  It should be\n   obvious to the reader that adherence\
    \ to this framework will in no way\n   guarantee compliance with the guidelines\
    \ or even the assumptions\n   described in Sections 2 and 3.  These must be reviewed\
    \ independently\n   as part of the design process.  There is no single correct\
    \ design\n   that will conform to these guidelines.  Furthermore, it is assumed\n\
    \   that preliminary proposals may not meet all the guidelines, but\n   should\
    \ be expected to itemized and justify any lack of compliance.\n"
- title: 5. Acknowledgments
  contents:
  - "5. Acknowledgments\n   Foremost acknowledgment for this document goes to Lewis\
    \ Girod, as my\n   co-author on a preliminary URN requirements document and for\
    \ his\n   insightful comments on this version of the document.  Thanks also go\n\
    \   to Ron Daniel especially for his many comments on my writing.  In\n   addition,\
    \ I recognize the contributors to a previous URN framework\n   document, the \"\
    Knoxville\" group.  There are too many of you to\n   acknowledge here individually,\
    \ but thank you.  Finally, I must thank\n   the contributors to the URN working\
    \ group and mailing list (urn-\n   ietf@bunyip.com), for your animated discussions\
    \ on these and related\n   topics.\n"
- title: 6. References
  contents:
  - "6. References\n   [1] Kunze, J., \"Functional Recommendations for Internet Resource\n\
    \   Locators\", RFC 1736, February 1995.\n   [2] Sollins, K., and L. Masinter,\
    \ \"Functional Requirements for\n   Uniform Resource Names\", RFC 1738, December\
    \ 1994.\n   [3] Berners-Lee, T., Masinter, L., and M. McCahill, \"Uniform Resource\n\
    \   Locators (URL)\", RFC 1738, December 1994.\n   [4] URN Working Group, \"Namespace\
    \ Identifier Requirements for URN\n   Services,\" Work in Progress.\n   [5] Voydock,\
    \ V. L., and Kent, S. T., \"Security Mechanisms in High-\n   Level Protocols\"\
    , ACM Computing Surveys, v. 15, No. 2, June, 1983,\n   pp. 135-171.\n   [6] Moats,\
    \ R., \"URN Syntax\", RFC 2141, May 1997.\n   [7] Slottow, E.G., \"Engineering\
    \ a Global Resolution Service,\" MIT-\n   LCS-TR712, June, 1997.  Currently available\
    \ as\n   <http://ana.lcs.mit.edu/anaweb/ps-papers/tr-712.ps> or\n   <http://ana.lcs.mit.edu/anaweb/pdf-papers/tr712.pdf>.\n"
- title: 7. Author's Address
  contents:
  - "7. Author's Address\n   Karen Sollins\n   MIT Laboratory for Computer Science\n\
    \   545 Technology Sq.\n   Cambridge, MA 02139\n   Phone: +1 617 253 6006\n  \
    \ EMail: sollins@lcs.mit.edu\n"
- title: 8.  Full Copyright Statement
  contents:
  - "8.  Full Copyright Statement\n   Copyright (C) The Internet Society (1998). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
