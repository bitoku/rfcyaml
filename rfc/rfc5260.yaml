- title: __initial_text__
  contents:
  - '            Sieve Email Filtering: Date and Index Extensions

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the \"date\" and \"index\" extensions to\
    \ the\n   Sieve email filtering language.  The \"date\" extension gives Sieve\
    \ the\n   ability to test date and time values in various ways.  The \"index\"\
    \n   extension provides a means to limit header and address tests to\n   specific\
    \ instances of header fields when header fields are repeated.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  Conventions Used in This Document  . . . . . . . . .\
    \ . . . . .  2\n   3.  Capability Identifiers . . . . . . . . . . . . . . . .\
    \ . . . .  3\n   4.  Date Test  . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  3\n     4.1.  Zone and Originalzone Arguments  . . . . . . . . . . .\
    \ . .  4\n     4.2.  Date-part Argument . . . . . . . . . . . . . . . . . . .\
    \ .  4\n     4.3.  Comparator Interactions with Date-part Arguments . . . . .\
    \  5\n     4.4.  Examples . . . . . . . . . . . . . . . . . . . . . . . . .  6\n\
    \   5.  Currentdate Test . . . . . . . . . . . . . . . . . . . . . . .  6\n  \
    \   5.1.  Examples . . . . . . . . . . . . . . . . . . . . . . . . .  6\n   6.\
    \  Index Extension  . . . . . . . . . . . . . . . . . . . . . . .  7\n     6.1.\
    \  Example  . . . . . . . . . . . . . . . . . . . . . . . . .  8\n   7.  Security\
    \ Considerations  . . . . . . . . . . . . . . . . . . .  8\n   8.  IANA Considerations\
    \  . . . . . . . . . . . . . . . . . . . . .  9\n   9.  References . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . .  9\n     9.1.  Normative References\
    \ . . . . . . . . . . . . . . . . . . .  9\n     9.2.  Informative References\
    \ . . . . . . . . . . . . . . . . . . 10\n   Appendix A.  Julian Date Conversions\
    \ . . . . . . . . . . . . . . . 11\n   Appendix B.  Acknowledgements  . . . .\
    \ . . . . . . . . . . . . . . 12\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Sieve [RFC5228] is a language for filtering email messages\
    \ at or\n   around the time of final delivery.  It is designed to be\n   implementable\
    \ on either a mail client or mail server.  It is meant to\n   be extensible, simple,\
    \ and independent of access protocol, mail\n   architecture, and operating system.\
    \  It is suitable for running on a\n   mail server where users may not be allowed\
    \ to execute arbitrary\n   programs, such as on black box Internet Message Access\
    \ Protocol\n   [RFC3501] servers, as it does not have user-controlled loops or\
    \ the\n   ability to run external programs.\n   The \"date\" extension provides\
    \ a new date test to extract and match\n   date/time information from structured\
    \ header fields.  The date test\n   is similar in concept to the address test\
    \ specified in [RFC5228],\n   which performs similar operations on addresses in\
    \ header fields.\n   The \"date\" extension also provides a currentdate test that\
    \ operates\n   on the date and time when the Sieve script is executed.\n   Some\
    \ header fields containing date/time information, e.g., Received:,\n   naturally\
    \ occur more than once in a single header.  In such cases it\n   is useful to\
    \ be able to restrict the date test to some subset of the\n   fields that are\
    \ present.  For example, it may be useful to apply a\n   date test to the last\
    \ (earliest) Received: field.  Additionally, it\n   may also be useful to apply\
    \ similar restrictions to either the header\n   or address tests specified in\
    \ [RFC5228].\n   For this reason, this specification also defines an \"index\"\
    \n   extension.  This extension adds two additional tagged arguments\n   :index\
    \ and :last to the header, address, and date tests.  If present,\n   these arguments\
    \ specify which occurrence of the named header field is\n   to be tested.\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n   The terms used to describe the various components\
    \ of the Sieve\n   language are taken from Section 1.1 of [RFC5228].  Section\
    \ 2 of the\n   same document describes basic Sieve language syntax and semantics.\n\
    \   The date-time syntactic element defined using ABNF notation [RFC5234]\n  \
    \ in [RFC3339] is also used here.\n"
- title: 3.  Capability Identifiers
  contents:
  - "3.  Capability Identifiers\n   The capability strings associated with the two\
    \ extensions defined in\n   this document are \"date\" and \"index\".\n"
- title: 4.  Date Test
  contents:
  - "4.  Date Test\n   Usage:   date [<\":zone\" <time-zone: string>> / \":originalzone\"\
    ]\n                 [COMPARATOR] [MATCH-TYPE] <header-name: string>\n        \
    \         <date-part: string> <key-list: string-list>\n   The date test matches\
    \ date/time information derived from headers\n   containing [RFC2822] date-time\
    \ values.  The date/time information is\n   extracted from the header, shifted\
    \ to the specified time zone, and\n   the value of the given date-part is determined.\
    \  The test returns\n   true if the resulting string matches any of the strings\
    \ specified in\n   the key-list, as controlled by the comparator and match keywords.\n\
    \   The date test returns false unconditionally if the specified header\n   field\
    \ does not exist, the field exists but does not contain a\n   syntactically valid\
    \ date-time specification, the date-time isn't\n   valid according to the rules\
    \ of the calendar system (e.g., January\n   32nd, February 29 in a non-leap year),\
    \ or the resulting string fails\n   to match any key-list value.\n   The type\
    \ of match defaults to \":is\" and the default comparator is\n   \"i;ascii-casemap\"\
    .\n   Unlike the header and address tests, the date test can only be\n   applied\
    \ to a single header field at a time.  If multiple header\n   fields with the\
    \ same name are present, only the first field that is\n   found is used.  (Note,\
    \ however, that this behavior can be modified\n   with the \"index\" extension\
    \ defined below.)  These restrictions\n   simplify the test and keep the meaning\
    \ clear.\n   The \"relational\" extension [RFC5231] adds a match type called\n\
    \   \":count\".  The count of a date test is 1 if the specified field\n   exists\
    \ and contains a valid date; 0, otherwise.\n   Implementations MUST support extraction\
    \ of RFC 2822 date-time\n   information that either makes up the entire header\
    \ field (e.g., as it\n   does in a standard Date: header field) or appears at\
    \ the end of a\n   header field following a semicolon (e.g., as it does in a standard\n\
    \   Received: header field).  Implementations MAY support extraction of\n   date\
    \ and time information in RFC2822 or other formats that appears in\n   other positions\
    \ in header field content.  In the case of a field\n   containing more than one\
    \ date or time value, the last one that\n   appears SHOULD be used.\n"
- title: 4.1.  Zone and Originalzone Arguments
  contents:
  - "4.1.  Zone and Originalzone Arguments\n   The :originalzone argument specifies\
    \ that the time zone offset\n   originally in the extracted date-time value should\
    \ be retained.  The\n   :zone argument specifies a specific time zone offset that\
    \ the date-\n   time value is to be shifted to prior to testing.  It is an error\
    \ to\n   specify both :zone and :originalzone.\n   The value of time-zone MUST\
    \ be an offset relative to UTC with the\n   following syntax:\n       time-zone\
    \  =  ( \"+\" / \"-\" ) 4DIGIT\n   The \"+\" or \"-\" indicates whether the time-of-day\
    \ is ahead of (i.e.,\n   east of) or behind (i.e., west of) UTC.  The first two\
    \ digits\n   indicate the number of hours difference from Universal Time, and\
    \ the\n   last two digits indicate the number of minutes difference from\n   Universal\
    \ Time.  Note that this agrees with the RFC 2822 format for\n   time zone offsets,\
    \ not the ISO 8601 format.\n   If both the :zone and :originalzone arguments are\
    \ omitted, the local\n   time zone MUST be used.\n"
- title: 4.2.  Date-part Argument
  contents:
  - "4.2.  Date-part Argument\n   The date-part argument specifies a particular part\
    \ of the resulting\n   date/time value to match against the key-list.  Possible\
    \ case-\n   insensitive values are:\n     \"year\"      => the year, \"0000\"\
    \ .. \"9999\".\n     \"month\"     => the month, \"01\" .. \"12\".\n     \"day\"\
    \       => the day, \"01\" .. \"31\".\n     \"date\"      => the date in \"yyyy-mm-dd\"\
    \ format.\n     \"julian\"    => the Modified Julian Day, that is, the date\n\
    \                    expressed as an integer number of days since\n          \
    \          00:00 UTC on November 17, 1858 (using the Gregorian\n             \
    \       calendar).  This corresponds to the regular\n                    Julian\
    \ Day minus 2400000.5.  Sample routines to\n                    convert to and\
    \ from modified Julian dates are\n                    given in Appendix A.\n \
    \    \"hour\"      => the hour, \"00\" .. \"23\".\n     \"minute\"    => the minute,\
    \ \"00\" .. \"59\".\n     \"second\"    => the second, \"00\" .. \"60\".\n   \
    \  \"time\"      => the time in \"hh:mm:ss\" format.\n     \"iso8601\"   => the\
    \ date and time in restricted ISO 8601 format.\n     \"std11\"     => the date\
    \ and time in a format appropriate\n                    for use in a Date: header\
    \ field [RFC2822].\n     \"zone\"      => the time zone in use.  If the user specified\
    \ a\n                    time zone with \":zone\", \"zone\" will\n           \
    \         contain that value.  If :originalzone is specified\n               \
    \     this value will be the original zone specified\n                    in the\
    \ date-time value.  If neither argument is\n                    specified the\
    \ value will be the server's default\n                    time zone in offset\
    \ format \"+hhmm\" or \"-hhmm\".  An\n                    offset of 0 (Zulu) always\
    \ has a positive sign.\n     \"weekday\"   => the day of the week expressed as\
    \ an integer between\n                    \"0\" and \"6\". \"0\" is Sunday, \"\
    1\" is Monday, etc.\n   The restricted ISO 8601 format is specified by the date-time\
    \ ABNF\n   production given in [RFC3339], Section 5.6, with the added\n   restrictions\
    \ that the letters \"T\" and \"Z\" MUST be in upper case, and\n   a time zone\
    \ offset of zero MUST be represented by \"Z\" and not\n   \"+00:00\".\n"
- title: 4.3.  Comparator Interactions with Date-part Arguments
  contents:
  - "4.3.  Comparator Interactions with Date-part Arguments\n   Not all comparators\
    \ are suitable with all date-part arguments.  In\n   general, the date-parts can\
    \ be compared and tested for equality with\n   either \"i;ascii-casemap\" (the\
    \ default) or \"i;octet\", but there are\n   two exceptions:\n   julian  This\
    \ is an integer, and may or may not have leading zeros.\n           As such, \"\
    i;ascii-numeric\" is almost certainly the best\n           comparator to use with\
    \ it.\n   std11   This is provided as a means to obtain date/time values in a\n\
    \           format appropriate for inclusion in email header fields.  The\n  \
    \         wide range of possible syntaxes for a std11 date/time --\n         \
    \  which implementations of this extension are free to use when\n           composing\
    \ a std11 string -- makes this format a poor choice\n           for comparisons.\
    \  Nevertheless, if a comparison must be\n           performed, this is case-insensitive,\
    \ and therefore \"i;ascii-\n           casemap\" needs to be used.\n   \"year\"\
    , \"month\", \"day\", \"hour\", \"minute\", \"second\" and \"weekday\" all\n \
    \  use fixed-width string representations of integers, and can therefore\n   be\
    \ compared with \"i;octet\", \"i;ascii-casemap\", and \"i;ascii-numeric\"\n  \
    \ with equivalent results.\n   \"date\" and \"time\" also use fixed-width string\
    \ representations of\n   integers, and can therefore be compared with \"i;octet\"\
    \ and \"i;ascii-\n   casemap\"; however, \"i;ascii-numeric\" can't be used with\
    \ it, as\n   \"i;ascii-numeric\" doesn't allow for non-digit characters.\n"
- title: 4.4.  Examples
  contents:
  - "4.4.  Examples\n   The Date: field can be checked to test when the sender claims\
    \ to have\n   created the message and act accordingly:\n     require [\"date\"\
    , \"relational\", \"fileinto\"];\n     if allof(header :is \"from\" \"boss@example.com\"\
    ,\n              date :value \"ge\" :originalzone \"date\" \"hour\" \"09\",\n\
    \              date :value \"lt\" :originalzone \"date\" \"hour\" \"17\")\n  \
    \   { fileinto \"urgent\"; }\n   Testing the initial Received: field can provide\
    \ an indication of when\n   a message was actually received by the local system:\n\
    \     require [\"date\", \"relational\", \"fileinto\"];\n     if anyof(date :is\
    \ \"received\" \"weekday\" \"0\",\n              date :is \"received\" \"weekday\"\
    \ \"6\")\n     { fileinto \"weekend\"; }\n"
- title: 5.  Currentdate Test
  contents:
  - "5.  Currentdate Test\n   Usage:   currentdate [\":zone\" <time-zone: string>]\n\
    \                        [COMPARATOR] [MATCH-TYPE]\n                        <date-part:\
    \ string>\n                        <key-list: string-list>\n   The currentdate\
    \ test is similar to the date test, except that it\n   operates on the current\
    \ date/time rather than a value extracted from\n   the message header.  In particular,\
    \ the \":zone\" and date-part\n   arguments are the same as those in the date\
    \ test.\n   All currentdate tests in a single Sieve script MUST refer to the same\n\
    \   point in time during execution of the script.\n   The :count value of a currentdate\
    \ test is always 1.\n"
- title: 5.1.  Examples
  contents:
  - "5.1.  Examples\n   The simplest use of currentdate is to have an action that\
    \ only\n   operates at certain times.  For example, a user might want to have\n\
    \   messages redirected to their pager after business hours and on\n   weekends:\n\
    \     require [\"date\", \"relational\"];\n     if anyof(currentdate :is \"weekday\"\
    \ \"0\",\n              currentdate :is \"weekday\" \"6\",\n              currentdate\
    \ :value \"lt\" \"hour\" \"09\",\n              currentdate :value \"ge\" \"hour\"\
    \ \"17\")\n     { redirect \"pager@example.com\"; }\n   Currentdate can be used\
    \ to set up vacation [RFC5230] responses in\n   advance and to stop response generation\
    \ automatically:\n     require [\"date\", \"relational\", \"vacation\"];\n   \
    \  if allof(currentdate :value \"ge\" \"date\" \"2007-06-30\",\n             \
    \ currentdate :value \"le\" \"date\" \"2007-07-07\")\n     { vacation :days 7\
    \  \"I'm away during the first week in July.\"; }\n   Currentdate may also be\
    \ used in conjunction with the variables\n   extension to pass time-dependent\
    \ arguments to other tests and\n   actions.  The following Sieve places messages\
    \ in a folder named\n   according to the current month and year:\n     require\
    \ [\"date\", \"variables\", \"fileinto\"];\n     if currentdate :matches \"month\"\
    \ \"*\" { set \"month\" \"${1}\"; }\n     if currentdate :matches \"year\"  \"\
    *\" { set \"year\"  \"${1}\"; }\n     fileinto \"${month}-${year}\";\n   Finally,\
    \ currentdate can be used in conjunction with the editheader\n   extension to\
    \ insert a header-field containing date/time information:\n      require [\"variables\"\
    , \"date\", \"editheader\"];\n      if currentdate :matches \"std11\" \"*\"\n\
    \        {addheader \"Processing-date\" \"${0}\";}\n"
- title: 6.  Index Extension
  contents:
  - "6.  Index Extension\n   The \"index\" extension, if specified, adds optional\
    \ :index and :last\n   arguments to the header, address, and date tests as follows:\n\
    \   Syntax:   date [\":index\" <fieldno: number> [\":last\"]]\n              \
    \    [<\":zone\" <time-zone: string>> / \":originalzone\"]\n                 \
    \ [COMPARATOR] [MATCH-TYPE] <header-name: string>\n                  <date-part:\
    \ string> <key-list: string-list>\n   Syntax:   header [\":index\" <fieldno: number>\
    \ [\":last\"]]\n                    [COMPARATOR] [MATCH-TYPE]\n              \
    \      <header-names: string-list> <key-list: string-list>\n   Syntax:   address\
    \ [\":index\" <fieldno: number> [\":last\"]]\n                     [ADDRESS-PART]\
    \ [COMPARATOR] [MATCH-TYPE]\n                     <header-list: string-list> <key-list:\
    \ string-list>\n   If :index <fieldno> is specified, the attempts to match a value\
    \ are\n   limited to the header field fieldno (beginning at 1, the first named\n\
    \   header field).  If :last is also specified, the count is backwards; 1\n  \
    \ denotes the last named header field, 2 the second to last, and so on.\n   Specifying\
    \ :last without :index is an error.\n   :index only counts separate header fields,\
    \ not multiple occurrences\n   within a single field.  In particular, :index cannot\
    \ be used to test\n   a specific address in an address list contained within a\
    \ single\n   header field.\n   Both header and address allow the specification\
    \ of more than one\n   header field name.  If more than one header field name\
    \ is specified,\n   all the named header fields are counted in the order specified\
    \ by the\n   header-list.\n"
- title: 6.1.  Example
  contents:
  - "6.1.  Example\n   Mail delivery may involve multiple hops, resulting in the Received:\n\
    \   field containing information about when a message first entered the\n   local\
    \ administrative domain being the second or subsequent field in\n   the message.\
    \  As long as the field offset is consistent, it can be\n   tested:\n     # Implement\
    \ the Internet-Draft cutoff date check assuming the\n     # second Received: field\
    \ specifies when the message first\n     # entered the local email infrastructure.\n\
    \     require [\"date\", \"relational\", \"index\"];\n     if date :value \"gt\"\
    \ :index 2 :zone \"-0500\" \"received\"\n             \"iso8601\" \"2007-02-26T09:00:00-05:00\"\
    ,\n     { redirect \"aftercutoff@example.org\"; }\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   The facilities defined here, like the facilities\
    \ in the base Sieve\n   specification, operate on message header information that\
    \ can easily\n   be forged.  Note, however, that some fields are inherently more\n\
    \   reliable than others.  For example, the Date: field is typically\n   inserted\
    \ by the message sender and can be altered at any point.  By\n   contrast, the\
    \ uppermost Received: field is typically inserted by the\n   local mail system\
    \ and is therefore difficult for the sender or an\n   intermediary to falsify.\n\
    \   Use of the currentdate test makes script behavior inherently less\n   predictable\
    \ and harder to analyze.  This may have consequences for\n   systems that use\
    \ script analysis to try and spot problematic scripts.\n   All of the security\
    \ considerations given in the base Sieve\n   specification also apply to these\
    \ extensions.\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   The following templates specify the IANA registrations\
    \ of the two\n   Sieve extensions specified in this document:\n      To: iana@iana.org\n\
    \      Subject: Registration of new Sieve extensions\n      Capability name: date\n\
    \      Description:     The \"date\" extension gives Sieve the ability\n     \
    \                  to test date and time values.\n      RFC number:      RFC 5260\n\
    \      Contact address: Sieve discussion list <ietf-mta-filters@imc.org>\n   \
    \   Capability name: index\n      Description:     The \"index\" extension provides\
    \ a means to\n                       limit header and address tests to specific\n\
    \                       instances when more than one field of a\n            \
    \           given type is present.\n      RFC number:      RFC 5260\n      Contact\
    \ address: Sieve discussion list <ietf-mta-filters@imc.org>\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [CALGO199]  Tantzen, R., \"Algorithm 199: Conversions\
    \ Between Calendar\n               Date and Julian Day Number\", Collected Algorithms\
    \ from\n               CACM 199.\n   [RFC2119]   Bradner, S., \"Key words for\
    \ use in RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC2822]   Resnick, P., \"Internet Message Format\", RFC 2822,\n\
    \               April 2001.\n   [RFC3339]   Klyne, G., Ed. and C. Newman, \"Date\
    \ and Time on the\n               Internet: Timestamps\", RFC 3339, July 2002.\n\
    \   [RFC5228]   Guenther, P. and T. Showalter, \"Sieve: An Email Filtering\n \
    \              Language\", RFC 5228, January 2008.\n   [RFC5231]   Segmuller,\
    \ W. and B. Leiba, \"Sieve Email Filtering:\n               Relational Extension\"\
    , RFC 5231, January 2008.\n   [RFC5234]   Crocker, D. and P. Overell, \"Augmented\
    \ BNF for Syntax\n               Specifications: ABNF\", STD 68, RFC 5234, January\
    \ 2008.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [RFC3501]   Crispin, M., \"INTERNET MESSAGE\
    \ ACCESS PROTOCOL - VERSION\n               4rev1\", RFC 3501, March 2003.\n \
    \  [RFC5230]   Showalter, T. and N. Freed, \"Sieve Email Filtering:\n        \
    \       Vacation Extension\", RFC 5230, January 2008.\n"
- title: Appendix A.  Julian Date Conversions
  contents:
  - "Appendix A.  Julian Date Conversions\n   The following C routines show how to\
    \ translate day/month/year\n   information to and from modified Julian dates.\
    \  These routines are\n   straightforward translations of the Algol routines specified\
    \ in CACM\n   Algorithm 199 [CALGO199].\n   Given the day, month, and year, jday\
    \ returns the modified Julian\n   date.\n   int jday(int year, int month, int\
    \ day)\n   {\n       int j, c, ya;\n       if (month > 2)\n           month -=\
    \ 3;\n       else\n       {\n           month += 9;\n           year--;\n    \
    \   }\n       c = year / 100;\n       ya = year - c * 100;\n       return (c *\
    \ 146097 / 4 + ya * 1461 / 4 + (month * 153 + 2) / 5 +\n               day + 1721119);\n\
    \   }\n   Given j, the modified Julian date, jdate returns the day, month, and\n\
    \   year.\n   void jdate(int j, int *year, int *month, int *day)\n   {\n     \
    \  int y, m, d;\n       j -= 1721119;\n       y = (j * 4 - 1) / 146097;\n    \
    \   j = j * 4 - y * 146097 - 1;\n       d = j / 4;\n       j = (d * 4 + 3) / 1461;\n\
    \       d = d * 4 - j * 1461 + 3;\n       d = (d + 4) / 4;\n       m = (d * 5\
    \ - 3) / 153;\n       d = d * 5 - m * 153 - 3;\n       *day = (d + 5) / 5;\n \
    \      *year = y * 100 + j;\n       if (m < 10)\n           *month = m + 3;\n\
    \       else\n       {\n           *month = m - 9;\n           *year += 1;\n \
    \      }\n   }\n"
- title: Appendix B.  Acknowledgements
  contents:
  - "Appendix B.  Acknowledgements\n   Dave Cridland contributed the text describing\
    \ the proper comparators\n   to use with different date-parts.  Cyrus Daboo, Frank\
    \ Ellerman,\n   Alexey Melnikov, Chris Newman, Dilyan Palauzov, and Aaron Stone\n\
    \   provided helpful suggestions and corrections.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Ned Freed\n   Sun Microsystems\n   800 Royal Oaks\n   Monrovia,\
    \ CA  91016-6347\n   USA\n   Phone: +1 909 457 4293\n   EMail: ned.freed@mrochek.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
