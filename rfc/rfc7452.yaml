- title: __initial_text__
  contents:
  - ''
- title: Internet Architecture Board (IAB)                          H. Tschofenig
  contents:
  - "Internet Architecture Board (IAB)                          H. Tschofenig\n  \
    \      Architectural Considerations in Smart Object Networking\n"
- title: Abstract
  contents:
  - "Abstract\n   The term \"Internet of Things\" (IoT) denotes a trend where a large\n\
    \   number of embedded devices employ communication services offered by\n   Internet\
    \ protocols.  Many of these devices, often called \"smart\n   objects\", are not\
    \ directly operated by humans but exist as components\n   in buildings or vehicles,\
    \ or are spread out in the environment.\n   Following the theme \"Everything that\
    \ can be connected will be\n   connected\", engineers and researchers designing\
    \ smart object networks\n   need to decide how to achieve this in practice.\n\
    \   This document offers guidance to engineers designing Internet-\n   connected\
    \ smart objects.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Architecture Board (IAB)\n   and represents information that\
    \ the IAB has deemed valuable to\n   provide for permanent record.  It represents\
    \ the consensus of the\n   Internet Architecture Board (IAB).  Documents approved\
    \ for\n   publication by the IAB are not a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7452.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  Smart Object Communication Patterns . . . . . . . . .\
    \ . . . .   4\n     2.1.  Device-to-Device Communication Pattern  . . . . . .\
    \ . . .   4\n     2.2.  Device-to-Cloud Communication Pattern . . . . . . . .\
    \ . .   6\n     2.3.  Device-to-Gateway Communication Pattern . . . . . . . .\
    \ .   7\n     2.4.  Back-End Data Sharing Pattern . . . . . . . . . . . . . .\
    \   9\n   3.  Reuse Internet Protocols  . . . . . . . . . . . . . . . . . .  10\n\
    \   4.  The Deployed Internet Matters . . . . . . . . . . . . . . . .  13\n  \
    \ 5.  Design for Change . . . . . . . . . . . . . . . . . . . . . .  14\n   6.\
    \  Security Considerations . . . . . . . . . . . . . . . . . . .  16\n   7.  Privacy\
    \ Considerations  . . . . . . . . . . . . . . . . . . .  18\n   8.  Informative\
    \ References  . . . . . . . . . . . . . . . . . . .  19\n   Appendix A.  IAB Members\
    \ at the Time of Approval  . . . . . . . .  23\n   Acknowledgements  . . . . .\
    \ . . . . . . . . . . . . . . . . . . .  23\n   Authors' Addresses  . . . . .\
    \ . . . . . . . . . . . . . . . . . .  24\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   RFC 6574 [RFC6574] refers to smart objects as devices with\n\
    \   constraints on energy, bandwidth, memory, size, cost, etc.  This is a\n  \
    \ fuzzy definition, as there is clearly a continuum in device\n   capabilities\
    \ and there is no hard line to draw between devices that\n   can run Internet\
    \ protocols and those that can't.\n   Interconnecting smart objects with the Internet\
    \ enables exciting new\n   use cases and products.  An increasing number of products\
    \ put the\n   Internet Protocol Suite on smaller and smaller devices and offer\
    \ the\n   ability to process, visualize, and gain insight from the collected\n\
    \   sensor data.  The network effect can be increased if the data\n   collected\
    \ from many different devices can be combined.\n   Developing embedded systems\
    \ is a complex task, and designers must\n   make a number of design decisions\
    \ such as:\n   o  How long is the device designed to operate?\n   o  How does\
    \ it interact with the physical world?  Is it a sensor or\n      actuator or both?\n\
    \   o  How many \"owners\" does it have?  One?  Many?  Is the owner likely\n \
    \     to change over the lifetime of the device?\n   o  Is it continuously or\
    \ intermittently powered?  Does it sleep?\n   o  Is it connected to a network,\
    \ and if so, how?\n   o  Will it be physically accessible for direct maintenance\
    \ after\n      deployment?  How does that affect the security model?\n   While\
    \ developing embedded systems is itself a complex task, designing\n   Internet-connected\
    \ smart objects is even harder since it requires\n   expertise with Internet protocols\
    \ in addition to software programming\n   and hardware skills.  To simplify the\
    \ development task, and thereby\n   to lower the cost of developing new products\
    \ and prototypes, we\n   believe that reuse of prior work is essential.  Therefore,\
    \ we provide\n   high-level guidance on the use of Internet technology for the\n\
    \   development of smart objects, and connected systems in general.\n   Utilize\
    \ Existing Design Patterns\n      Design patterns are generally reusable solutions\
    \ to a commonly\n      occurring design problem (see [Gamma] for more discussion).\n\
    \      Existing smart object deployments show communication patterns that\n  \
    \    can be reused by engineers with the benefit of lowering the design\n    \
    \  effort.  As discussed in the sections below, individual patterns\n      also\
    \ have an implication on the required interoperability between\n      the different\
    \ entities.  Depending on the desired functionality,\n      already-existing patterns\
    \ can be reused and adjusted.  Section 2\n      talks about various communication\
    \ patterns.\n   Reuse Internet Protocols\n      Most smart object deployments\
    \ can make use of the already-\n      standardized Internet Protocol Suite.  Internet\
    \ protocols can be\n      applied to almost any environment due to their generic\
    \ design and\n      typically offer plenty of potential for reconfiguration, which\n\
    \      allows them to be tailored for the specific needs.  Section 3\n      discusses\
    \ this topic.\n   The Deployed Internet Matters\n      When connecting smart objects\
    \ to the Internet, take existing\n      deployment into consideration to avoid\
    \ unpleasant surprises.\n      Assuming an ideal, clean-slate deployment is, in\
    \ many cases, far\n      too optimistic since the already-deployed infrastructure\
    \ is\n      convenient to use.  In Section 4, we highlight the importance of\n\
    \      this topic.\n   Design for Change\n      The Internet infrastructure, applications,\
    \ and preferred building\n      blocks evolve over time.  Especially long-lived\
    \ smart object\n      deployments need to take this change into account, and Section\
    \ 5\n      is dedicated to that topic.\n"
- title: 2.  Smart Object Communication Patterns
  contents:
  - "2.  Smart Object Communication Patterns\n   This section illustrates a number\
    \ of communication patterns utilized\n   in the smart object environment.  It\
    \ is possible that more than one\n   pattern can be applied at the same time in\
    \ a product.  Developers\n   reusing those patterns will benefit from the experience\
    \ of others as\n   well as from documentation, source code, and available products.\n"
- title: 2.1.  Device-to-Device Communication Pattern
  contents:
  - "2.1.  Device-to-Device Communication Pattern\n   Figure 1 illustrates a communication\
    \ pattern where two devices\n   developed by different manufacturers are desired\
    \ to interoperate and\n   communicate directly.  To pick an example from [RFC6574],\
    \ consider a\n   light switch that talks to a light bulb with the requirement\
    \ that\n   each may be manufactured by a different company, represented as\n \
    \  Manufacturer A and B.  Other cases can be found with fitness\n   equipment,\
    \ such as heart rate monitors and cadence sensors.\n                        _,,,,\
    \    ,,,,\n                       /     -'``    \\\n                      |  Wireless\
    \    |\n                      \\  Network     |\n                      /     \
    \          \\\n    ,''''''''|       /                 .       ,''''''''|\n   \
    \ | Light  | ------|------------------\\------| Light  |\n    | Bulb   |     \
    \   .                 |      | Switch |\n    |........'         `'-          \
    \    /      |........'\n                          \\      _-...-`\n    Manufacturer\
    \           `. ,.'              Manufacturer\n        A                    ` \
    \                     B\n             Figure 1: Device-to-Device Communication\
    \ Pattern\n   In order to fulfill the promise that devices from different\n  \
    \ manufacturers are able to communicate out of the box, these vendors\n   need\
    \ to agree on the protocol stack.  They need to make decisions\n   about the following\
    \ protocol-design aspects:\n   o  Which physical layer(s) should be supported?\
    \  Does it use low-\n      power radio technologies (e.g., Bluetooth Smart, IEEE\
    \ 802.15.4)?\n   o  Can devices be IPv6-only, or must they also support IPv4 for\n\
    \      backward-compatibility reasons?  What IPv4-IPv6 transition\n      technologies\
    \ are needed?\n   o  Which IP address configuration mechanism(s) is integrated\
    \ into the\n      device?\n   o  Which communication architectures shall be supported?\
    \  Which\n      devices are constrained, and what are those constraints?  Is there\n\
    \      a classical client-server model or rather a peer-to-peer model?\n   o \
    \ Is there a need for a service-discovery mechanism to allow users\n      to discover\
    \ light bulbs they have in their home or office?\n   o  Which transport-layer\
    \ protocol (e.g., UDP) is used for conveying\n      the sensor readings/commands?\n\
    \   o  Which application-layer protocol is used (for example, the\n      Constrained\
    \ Application Protocol (CoAP) [RFC7252])?\n   o  What information model is used\
    \ for expressing the different light\n      levels?\n   o  What data model is\
    \ used to encode information?  (See [RFC3444] for\n      a discussion about the\
    \ difference between data models and\n      information models.)\n   o  Finally,\
    \ security and privacy require careful thought.  This\n      includes questions\
    \ like: What are the security threats?  What\n      security services need to\
    \ be provided to deal with the identified\n      threats?  Where do the security\
    \ credentials come from?  At what\n      layer(s) in the protocol stack should\
    \ the security mechanism(s)\n      reside?  What privacy implications are caused\
    \ by various design\n      decisions?\n   This list is not meant to be exhaustive\
    \ but aims to illustrate that\n   for every usage scenario, many design decisions\
    \ will have to be made\n   in order to accommodate the constrained nature of a\
    \ specific device\n   in a certain usage scenario.  Standardizing such a complete\
    \ solution\n   to accomplish a full level of interoperability between two devices\n\
    \   manufactured by different vendors takes time, but there are obvious\n   rewards\
    \ for end customers and vendors.\n"
- title: 2.2.  Device-to-Cloud Communication Pattern
  contents:
  - "2.2.  Device-to-Cloud Communication Pattern\n   Figure 2 shows a communication\
    \ pattern for uploading sensor data to\n   an application service provider.  Often\
    \ the application service\n   provider (example.com in our illustration) also\
    \ sells smart objects.\n   In that case, the entire communication happens internal\
    \ to the\n   provider and no need for interoperability arises.  Still, it is\n\
    \   useful for example.com to reuse existing specifications to lower the\n   design,\
    \ implementation, testing, and development effort.\n   While this pattern allows\
    \ using IP-based communication end to end, it\n   may still lead to silos.  To\
    \ prevent silos, example.com may allow\n   third-party device vendors to connect\
    \ to their server infrastructure\n   as well.  For those cases, the protocol interface\
    \ used to communicate\n   with the server infrastructure needs to be made available,\
    \ and\n   various standards are available, such as CoAP, Datagram Transport\n\
    \   Layer Security (DTLS) [RFC6347], UDP, IP, etc., as shown in Figure 2.\n  \
    \ A frequent concern from end users is that a change in the business\n   model\
    \ (or bankruptcy) of the IoT device/service provide might make\n   the hardware\
    \ become unusable.  Companies might consider the\n   possibility of releasing\
    \ their source code for the IoT device or\n   allowing other IoT operating systems\
    \ (plus application software) to\n   be installed on the IoT device.\n   Similarly,\
    \ in many situations it is desirable to change which cloud\n   service a device\
    \ connects to, such as when an application service\n   provider changes its hosting\
    \ provider.  Again, standard Internet\n   protocols are needed.\n   Since the\
    \ access networks to which various smart objects are\n   connected are typically\
    \ not under the control of the application\n   service provider, commonly used\
    \ radio technologies (such as WLAN,\n   wired Ethernet, and cellular radio) together\
    \ with the network access\n   authentication technology have to be reused.  The\
    \ same applies to\n   standards used for IP address configuration.\n         \
    \   .................\n            |  Application  |\n            |  Service \
    \     |\n            |  Provider     |\n            |  example.com  |\n      \
    \      |_______________|\n                _,   .\n     HTTP     ,'      `.   \
    \     CoAP\n     TLS    _,'          `.     DTLS\n     TCP  ,'               `._\
    \  UDP\n     IP -'                    - IP\n    ,'''''''''''''|       ,'''''''''''''''''|\n\
    \    | Device with |       | Device with     |\n    | Temperature |       | Carbon\
    \ Monoxide |\n    | Sensor      |       | Sensor          |\n    |.............'\
    \       |.................'\n   TLS = Transport Layer Security\n             \
    \ Figure 2: Device-to-Cloud Communication Pattern\n"
- title: 2.3.  Device-to-Gateway Communication Pattern
  contents:
  - "2.3.  Device-to-Gateway Communication Pattern\n   The device-to-cloud communication\
    \ pattern, described in Section 2.2,\n   is convenient for vendors of smart objects\
    \ and works well if they\n   choose a radio technology that is widely deployed\
    \ in the targeted\n   market, such as Wi-Fi based on IEEE 802.11 for smart home\
    \ use cases.\n   Sometimes, less-widely-available radio technologies are needed\
    \ (such\n   as IEEE 802.15.4) or special application-layer functionality (e.g.,\n\
    \   local authentication and authorization) has to be provided or\n   interoperability\
    \ is needed with legacy, non-IP-based devices.  In\n   those cases, some form\
    \ of gateway has to be introduced into the\n   communication architecture that\
    \ bridges between the different\n   technologies and performs other networking\
    \ and security\n   functionality.  Figure 3 shows this pattern graphically.  Often,\n\
    \   these gateways are provided by the same vendor that offers the IoT\n   product,\
    \ for example, because of the use of proprietary protocols, to\n   lower the dependency\
    \ on other vendors or to avoid potential\n   interoperability problems.  It is\
    \ expected that in the future, more\n   generic gateways will be deployed to lower\
    \ cost and infrastructure\n   complexity for end consumers, enterprises, and industrial\n\
    \   environments.  Such generic gateways are more likely to exist if IoT\n   device\
    \ designs make use of generic Internet protocols and not require\n   application-layer\
    \ gateways that translate one application-layer\n   protocol to another one. \
    \ The use of application-layer gateways will,\n   in general, lead to a more fragile\
    \ deployment, as has been observed\n   in the past with [RFC3724] and [RFC3238].\n\
    \   This communication pattern can frequently be found with smart object\n   deployments\
    \ that require remote configuration capabilities and real-\n   time interactions.\
    \  The gateway is thereby assumed to be always\n   connected to the Internet.\n\
    \                .................\n                |  Application  |\n      \
    \          |  Service      |\n                |  Provider     |\n            \
    \    |  example.com  |\n                |_______________|\n                  \
    \     |\n                       |\n                       | IPv4/IPv6\n      \
    \          .................\n                |    Local      |\n            \
    \    |   Gateway     |\n                |               |\n                |_______________|\n\
    \                   _,         .\n     HTTP       ,'              `.         CoAP\n\
    \     TLS      _,' Bluetooth Smart  `.      DTLS\n     TCP    ,'     IEEE 802.11\
    \       `._   UDP\n     IPv6 -'       IEEE 802.15.4         - IPv6\n    ,'''''''''''''|\
    \          ,'''''''''''''''''|\n    | Device with |          | Device with   \
    \  |\n    | Temperature |          | Carbon Monoxide |\n    | Sensor      |  \
    \        | Sensor          |\n    |.............'          |.................'\n\
    \             Figure 3: Device-to-Gateway Communication Pattern\n   If the gateway\
    \ is mobile, such as when the gateway is a smartphone,\n   connectivity between\
    \ the devices and the Internet may be\n   intermittent.  This limits the applicability\
    \ of such a communication\n   pattern but is nevertheless very common with wearables\
    \ and other IoT\n   devices that do not need always-on Internet or real-time Internet\n\
    \   connectivity.  From an interoperability point of view, it is worth\n   noting\
    \ that smartphones, with their sophisticated software update\n   mechanism via\
    \ app stores, allow new functionality to be updated\n   regularly at the smartphone\
    \ and sometimes even at the IoT device.\n   With special apps that are tailored\
    \ to each specific IoT device,\n   interoperability is mainly a concern with regard\
    \ to the lower layers\n   of the protocol stack, such as the radio interface,\
    \ and less so at\n   the application layer (if users are willing to download a\
    \ new app for\n   each IoT device).\n   It is also worth pointing out that a gateway\
    \ allows supporting both\n   IPv6 and IPv4 (for compatibility with legacy application\
    \ service\n   providers) externally, while allowing devices to be IPv6-only to\n\
    \   reduce footprint requirements.  If devices do not have the resources\n   to\
    \ support both IPv4 and IPv6 themselves, being IPv6-only (rather\n   than IPv4-only)\
    \ with a gateway enables the most flexibility, avoiding\n   the need to update\
    \ devices to support IPv6 later, whereas IPv4\n   address exhaustion makes it\
    \ ill-suited to scale to smart object\n   networks.  See [RFC6540] for further\
    \ discussion.\n"
- title: 2.4.  Back-End Data Sharing Pattern
  contents:
  - "2.4.  Back-End Data Sharing Pattern\n   The device-to-cloud pattern often leads\
    \ to silos; IoT devices upload\n   data only to a single application service provider.\
    \  However, users\n   often demand the ability to export and to analyze data in\
    \ combination\n   with data from other sources.  Hence, the desire for granting\
    \ access\n   to the uploaded sensor data to third parties arises.  This design\
    \ is\n   shown in Figure 4.  This pattern is known from the Web in case of\n \
    \  mashups and is, therefore, reapplied to the smart object context.  To\n   offer\
    \ familiarity for developers, typically a RESTful API design in\n   combination\
    \ with a federated authentication and authorization\n   technology (like OAuth\
    \ 2.0 [RFC6749]) is reused.  While this offers\n   reuse at the level of building\
    \ blocks, the entire protocol stack\n   (including the information/data model\
    \ and RESTful Web APIs) is often\n   not standardized.\n                     \
    \                         .................\n                                \
    \              |  Application  |\n                                           \
    \  .|  Service      |\n                                          ,-` |  Provider\
    \     |\n                                        .`    | b-example.com |\n   \
    \                                  ,-`      |_______________|\n              \
    \                     .`\n             .................  ,-`\n             |\
    \  Application  |-` HTTPS\n             |  Service      |   OAuth 2.0\n      \
    \       |  Provider     |   JSON\n             |  example.com  |-,\n         \
    \    |_______________|  '.\n                  _,              `',\n          \
    \      ,'                   '.\n             _,' CoAP or               `',   \
    \ .................\n           ,'   HTTP                      '.  |  Application\
    \  |\n         -'                                 `'|  Service      |\n      ,''''''''|\
    \                              |  Provider     |\n      | Light  |           \
    \                   | c-example.com |\n      | Sensor |                      \
    \        |_______________|\n      |........'\n                  Figure 4: Back-End\
    \ Data Sharing Pattern\n"
- title: 3.  Reuse Internet Protocols
  contents:
  - "3.  Reuse Internet Protocols\n   When discussing the need for reuse of available\
    \ standards versus\n   extending or redesigning protocols, it is useful to look\
    \ back at the\n   criteria for success of the Internet.\n   RFC 1958 [RFC1958]\
    \ provides lessons from the early days of the\n   Internet and says:\n      The\
    \ Internet and its architecture have grown in evolutionary\n      fashion from\
    \ modest beginnings, rather than from a Grand Plan.\n   And adds:\n      A good\
    \ analogy for the development of the Internet is that of\n      constantly renewing\
    \ the individual streets and buildings of a\n      city, rather than razing the\
    \ city and rebuilding it.\n   Yet, because building very small, battery-powered\
    \ devices is\n   challenging, it may be difficult to resist the temptation to\
    \ build\n   solutions tailored to specific applications, or even to redesign\n\
    \   networks from scratch to suit a particular application.\n   While developing\
    \ consensus-based standards in an open and transparent\n   process takes longer\
    \ than developing proprietary solutions, the\n   resulting solutions often remain\
    \ relevant over a longer period of\n   time.\n   RFC 1263 [RFC1263] considers\
    \ protocol-design strategy and the\n   decision to design new protocols or to\
    \ use existing protocols in a\n   non-backward compatible way:\n      We hope\
    \ to be able to design and distribute protocols in less time\n      than it takes\
    \ a standards committee to agree on an acceptable\n      meeting time.  This is\
    \ inevitable because the basic problem with\n      networking is the standardization\
    \ process.  Over the last several\n      years, there has been a push in the research\
    \ community for\n      lightweight protocols, when in fact what is needed are\
    \ lightweight\n      standards.  Also note that we have not proposed to implement\
    \ some\n      entirely new set of 'superior' communications protocols, we have\n\
    \      simply proposed a system for making necessary changes to the\n      existing\
    \ protocol suites fast enough to keep up with the\n      underlying change in\
    \ the network.  In fact, the first standards\n      organization that realizes\
    \ that the primary impediment to\n      standardization is poor logistical support\
    \ will probably win.\n   While [RFC1263] was written in 1991 when the standardization\
    \ process\n   was more lightweight than today, these thoughts remain relevant\
    \ in\n   smart object development.\n   Interestingly, a large number of already-standardized\
    \ protocols are\n   relevant for smart object deployments.  RFC 6272 [RFC6272],\
    \ for\n   example, made the attempt to identify relevant IETF specifications\n\
    \   for use in smart grids.\n   Still, many commercial products contain proprietary\
    \ or industry-\n   specific protocol mechanisms, and researchers have made several\n\
    \   attempts to design new architectures for the entire Internet system.\n   There\
    \ are several architectural concerns that deserve to be\n   highlighted:\n   Vertical\
    \ Profiles\n      The discussions at the IAB workshop (see Section 3.1.2 of\n\
    \      [RFC6574]) revealed the preference of many participants to develop\n  \
    \    domain-specific profiles that select a minimum subset of protocols\n    \
    \  needed for a specific operating environment.  Various\n      standardization\
    \ organizations and industry fora are currently\n      engaged in activities of\
    \ defining their preferred profile(s).\n      Ultimately, however, the number\
    \ of domains where smart objects can\n      be used is essentially unbounded.\
    \  There is also an ever-evolving\n      set of protocols and protocol extensions.\n\
    \      However, merely changing the networking protocol to IP does not\n     \
    \ necessarily bring the kinds of benefits that industries are\n      looking for\
    \ in their evolving smart object deployments.  In\n      particular, a profile\
    \ is rigid and leaves little room for\n      interoperability among slightly differing\
    \ or competing technology\n      variations.  As an example, Layer 1 through 7\
    \ type profiles do not\n      account for the possibility that some devices may\
    \ use different\n      physical media than others, and that in such situations,\
    \ a simple\n      router could still provide an ability to communicate between\
    \ the\n      parties.\n   Industry-Specific Solutions\n      The Internet Protocol\
    \ Suite is more extensive than merely the use\n      of IP.  Often, significant\
    \ benefits can be gained from using\n      additional, widely available, generic\
    \ technologies, such as the\n      Web. Benefits from using these kinds of tools\
    \ include access to a\n      large available workforce, software, and education\
    \ already geared\n      towards employing the technology.\n   Tight Coupling\n\
    \      Many applications are built around a specific set of servers,\n      devices,\
    \ and users.  However, often the same data and devices\n      could be useful\
    \ for many purposes, some of which may not be easily\n      identifiable at the\
    \ time the devices are deployed.\n   In addition to the architectural concerns,\
    \ developing new protocols\n   and mechanisms is generally more risky and expensive\
    \ than reusing\n   existing standards, due to the additional costs involved in\
    \ design,\n   implementation, testing, and deployment.  Secondary costs, such\
    \ as\n   the training of technical staff and, in the worst case, the training\n\
    \   of end users, can be substantial.\n   As a result, while there are some cases\
    \ where specific solutions are\n   needed, the benefits of general-purpose technology\
    \ are often\n   compelling, be it choosing IP over some more specific communication\n\
    \   mechanism, a widely deployed link layer (such as wireless LAN) over a\n  \
    \ more specific one, web technology over application-specific\n   protocols, and\
    \ so on.\n   However, when employing these technologies, it is important to\n\
    \   embrace them in their entirety, allowing for the architectural\n   flexibility\
    \ that is built into them.  As an example, it rarely makes\n   sense to limit\
    \ communications to on-link or to specific media.\n   Design your applications\
    \ so that the participating devices can easily\n   interact with multiple other\
    \ applications.\n"
- title: 4.  The Deployed Internet Matters
  contents:
  - "4.  The Deployed Internet Matters\n   Despite the applicability of Internet protocols\
    \ for smart objects,\n   picking the specific protocols for a particular use case\
    \ can be\n   tricky.  As the Internet has evolved, certain protocols and protocol\n\
    \   extensions have become the norm, and others have become difficult to\n   use\
    \ in all circumstances.\n   Taking into account these constraints is particularly\
    \ important for\n   smart objects, as there is often a desire to employ specific\
    \ features\n   to support smart object communication.  For instance, from a pure\n\
    \   protocol-specification perspective, some transport protocols may be\n   more\
    \ desirable than others.  These constraints apply both to the use\n   of existing\
    \ protocols as well as designing new ones on top of the\n   Internet protocol\
    \ stack.\n   The following list illustrates a few of those constraints, but every\n\
    \   communication protocol comes with its own challenges.\n   In 2005, Fonseca,\
    \ et al.  [IPoptions] studied the usage of IP\n   options-enabled packets in the\
    \ Internet and found that overall,\n   approximately half of Internet paths drop\
    \ packets with options,\n   making extensions using IP options \"less ideal\"\
    \ for extending IP.\n   In 2010, Honda, et al.  [HomeGateway] tested 34 different\
    \ home\n   gateways regarding their packet dropping policy of UDP, TCP, the\n\
    \   Datagram Congestion Control Protocol (DCCP), the Stream Control\n   Transmission\
    \ Protocol (SCTP), ICMP, and various timeout behavior.\n   For example, more than\
    \ half of the tested devices do not conform to\n   the IETF-recommended timeouts\
    \ for UDP, and for TCP the measured\n   timeouts are highly variable, ranging\
    \ from less than 4 minutes to\n   longer than 25 hours.  For NAT traversal of\
    \ DCCP and SCTP, the\n   situation is poor.  None of the tested devices, for example,\
    \ allowed\n   establishing a DCCP connection.\n   In 2011, the behavior of networks\
    \ with regard to various TCP\n   extensions was tested in [TCPextensions]: \"\
    From our results we\n   conclude that the middleboxes implementing layer 4 functionality\
    \ are\n   very common -- at least 25% of paths interfered with TCP in some way\n\
    \   beyond basic firewalling.\"\n   Extending protocols to fulfill new uses and\
    \ to add new functionality\n   may range from very easy to difficult, as [RFC6709]\
    \ explains in great\n   detail.  A challenge many protocol designers are facing\
    \ is to ensure\n   incremental deployability and interoperability with incumbent\n\
    \   elements in a number of areas.  In various cases, the effort it takes\n  \
    \ to design incrementally deployable protocols has not been taken\n   seriously\
    \ enough at the outset.  RFC 5218 on \"What Makes For a\n   Successful Protocol\"\
    \ [RFC5218] defines wildly successful protocols as\n   protocols that are widely\
    \ deployed beyond their envisioned use cases.\n   As these examples illustrate,\
    \ protocol architects have to take\n   developments in the greater Internet into\
    \ account, as not all\n   features can be expected to be usable in all environments.\
    \  For\n   instance, middleboxes [RFC3234] complicate the use of extensions in\n\
    \   basic IP protocols and transport layers.\n   RFC 1958 [RFC1958] considers\
    \ this aspect and says \"... the community\n   believes that the goal is connectivity,\
    \ the tool is the Internet\n   Protocol, and the intelligence is end to end rather\
    \ than hidden in\n   the network.\"  This statement is challenged more than ever\
    \ with the\n   perceived need to develop intermediaries interacting with less\n\
    \   intelligent end devices.  However, RFC 3724 [RFC3724] has this to say\n  \
    \ about this crucial aspect: \"One desirable consequence of the\n   end-to-end\
    \ principle is protection of innovation.  Requiring\n   modification in the network\
    \ in order to deploy new services is still\n   typically more difficult than modifying\
    \ end nodes.\"  Even this\n   statement will become challenged, as large numbers\
    \ of devices are\n   deployed, and it indeed might be the case that changing those\
    \ devices\n   will be hard.  But RFC 4924 [RFC4924] adds that a network that does\n\
    \   not filter or transform the data that it carries may be said to be\n   \"\
    transparent\" or \"oblivious\" to the content of packets.  Networks\n   that provide\
    \ oblivious transport enable the deployment of new\n   services without requiring\
    \ changes to the core.  It is this\n   flexibility that is perhaps both the Internet's\
    \ most essential\n   characteristic as well as one of the most important contributors\
    \ to\n   its success.\n"
- title: 5.  Design for Change
  contents:
  - "5.  Design for Change\n   How to embrace rapid innovation and at the same time\
    \ accomplish a\n   high level of interoperability is one of the key aspects for\n\
    \   competing in the marketplace.  RFC 1263 [RFC1263] points out that\n   \"protocol\
    \ change happens and is currently happening at a very\n   respectable clip...We\
    \ simply propose [for engineers developing the\n   technology] to explicitly deal\
    \ with the changes rather [than] keep\n   trying to hold back the flood.\"\n \
    \  In [Tussles], Clark, et al. suggest to \"design for variation in\n   outcome,\
    \ so that the outcome can be different in different places,\n   and the tussle\
    \ takes place within the design, not by distorting or\n   violating it.  Do not\
    \ design so as to dictate the outcome.  Rigid\n   designs will be broken; designs\
    \ that permit variation will flex under\n   pressure and survive.\"  The term\
    \ \"tussle\" refers to the process\n   whereby different parties, which are part\
    \ of the Internet milieu and\n   have interests that may be adverse to each other,\
    \ adapt their mix of\n   mechanisms to try to achieve their conflicting goals,\
    \ and others\n   respond by adapting the mechanisms to push back.\n   In order\
    \ to accomplish this, Clark, et al. suggest to:\n   1.  Break complex systems\
    \ into modular parts, so that one tussle does\n       not spill over and distort\
    \ unrelated issues.\n   2.  Design for choice to permit the different players\
    \ to express\n       their preferences.  Choice often requires open interfaces.\n\
    \   The main challenge with the suggested approach is predicting how\n   conflicts\
    \ among the different players will evolve.  Since tussles\n   evolve over time,\
    \ there will be changes to the architecture, too.  It\n   is certainly difficult\
    \ to pick the right set of building blocks and\n   to develop a communication\
    \ architecture that will last a long time,\n   and many smart object deployments\
    \ are envisioned to be rather long\n   lived.\n   Luckily, the design of the system\
    \ does not need to be cast in stone\n   during the design phase.  It may adjust\
    \ dynamically since many of the\n   protocols allow for configurability and dynamic\
    \ discovery.  But,\n   ultimately, software update mechanisms may provide the\
    \ flexibility\n   needed to deal with more substantial changes.\n   A solid software\
    \ update mechanism is needed not only for dealing with\n   the changing Internet\
    \ communication environment and for\n   interoperability improvements but also\
    \ for adding new features and\n   for fixing security bugs.  This approach may\
    \ appear to be in conflict\n   with classes of severely restricted devices since,\
    \ in addition to a\n   software update mechanism, spare flash and RAM capacity\
    \ is needed.\n   It is, however, a trade-off worth thinking about since better\
    \ product\n   support comes with a price.\n   As technology keeps advancing, the\
    \ constraints that technology places\n   on devices evolve as well.  Microelectronics\
    \ have become more capable\n   as time goes by, often making it possible for new\
    \ devices to be both\n   less expensive and more capable than their predecessors.\
    \  This trend\n   can, however, be in some cases offset by the desire to embed\n\
    \   communications technology in even smaller and cheaper objects.  But\n   it\
    \ is important to design communications technology not just for\n   today's constraints\
    \ but also for tomorrow's.  This is particularly\n   important since the cost\
    \ of a product is not only determined by the\n   cost of hardware but also by\
    \ the cost of not reusing already-\n   available protocol stacks and software\
    \ libraries by developing custom\n   solutions.\n   Software updates are common\
    \ in operating systems and application\n   programs today.  Without them, most\
    \ devices would pose a latent risk\n   to the Internet at large.  Arguably, the\
    \ JavaScript-based web employs\n   a very rapid software update mechanism with\
    \ code being provided by\n   many different parties (e.g., by websites loaded\
    \ into the browser or\n   by smartphone apps).\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   Security is often even more important for smart\
    \ objects than for more\n   traditional computing systems, since interacting directly\
    \ with the\n   physical world can present greater dangers, and smart objects often\n\
    \   operate autonomously without any human interaction for a long time\n   period.\
    \  The problem is compounded by the fact that there are often\n   fewer resources\
    \ available in constrained devices to actually\n   implement security (e.g., see\
    \ the discussion of \"Class 0 devices\" in\n   Section 3 of [RFC7228]).  As such,\
    \ it is critical to design for\n   security, taking into account a number of key\
    \ considerations:\n   o  A key part of any smart object design is the problem\
    \ of how to\n      establish trust for a smart object.  Typically, bootstrapping\n\
    \      trust involves giving the device the credentials it needs to\n      operate\
    \ within a larger network of devices or services.\n   o  Smart objects will, in\
    \ many cases, be deployed in places where\n      additional physical security\
    \ is difficult or impossible.\n      Designers should take into account that any\
    \ such device can and\n      will be compromised by an attacker with direct physical\
    \ access.\n      Thus, trust models should distinguish between devices susceptible\n\
    \      to physical compromise and devices with some level of physical\n      security.\
    \  Physical attacks, such as timing, power analysis, and\n      glitching, are\
    \ commonly applied to extract secrets\n      [PhysicalAttacks].\n   o  Smart objects\
    \ will, in many cases, be deployed as collections of\n      identical or near\
    \ identical devices.  Protocols should be designed\n      so that a compromise\
    \ of a single device does not result in\n      compromise of the entire collection,\
    \ especially since the\n      compromise of a large number of devices can enable\
    \ additional\n      attacks such as a distributed denial of service.  Sharing\
    \ secret\n      keys across an entire product family is, therefore, also\n   \
    \   problematic since compromise of a single device might leave all\n      devices\
    \ from that product family vulnerable.\n   o  Smart objects will, in many cases,\
    \ be deployed in ways that the\n      designer never considered.  Designers should\
    \ either seek to\n      minimize the impact of misuse of their systems and devices\
    \ or\n      implement controls to prevent such misuse where applicable.\n   o\
    \  It is anticipated that smart objects will be deployed with a long\n      (e.g.,\
    \ 5-40 years) life cycle.  Any security mechanism chosen at\n      the outset\
    \ may not be \"good enough\" for the full lifespan of the\n      device.  Thus,\
    \ long-lived devices should start with good security\n      and provide a path\
    \ to deploy new security mechanisms over the\n      lifetime of the device.\n\
    \   o  Security protocols often rely on random numbers, and offering\n      randomness\
    \ in embedded devices is challenging.  For this reason,\n      it is important\
    \ to consider the use of hardware-based random\n      number generators during\
    \ early states of the design process.\n   A more detailed security discussion\
    \ can be found in the \"Report from\n   the Smart Object Security Workshop\" [RFC7397]\
    \ that was held prior to\n   the IETF meeting in Paris, March 2012, and in the\
    \ report from the\n   National Science Foundation's \"Cybersecurity Ideas Lab\"\
    \ workshop\n   [NSF] that was held in February 2014.  For example, [NSF] includes,\n\
    \   among other recommendations, these recommendations specific to the\n   Internet\
    \ of Things:\n      Enhance the Security of the Internet of Things by Identifying\n\
    \      Enclaves: The security challenges posed by the emerging Internet\n    \
    \  of Things should be addressed now, to prepare before it is fully\n      upon\
    \ us.  By identifying specific use segments, or \"enclaves\",\n      Internet\
    \ of Things infrastructure stakeholders can address the\n      security requirements\
    \ and devise event remediations for that\n      enclave.\n      Create a Framework\
    \ for Managing Software Updates: The Internet of\n      Things will challenge\
    \ our current channels for distributing\n      security updates.  An environment\
    \ must be developed for\n      distributing security patches that scales to a\
    \ world where almost\n      everything is connected to the Internet and many \"\
    things\" are\n      largely unattended.\n   Finally, we reiterate that use of\
    \ standards that have gotten wide\n   review can often avoid a number of security\
    \ issues that could\n   otherwise arise.  Section 3.3 of [RFC6574] reminds us\
    \ about the IETF\n   work style regarding security:\n      In the development\
    \ of smart object applications, as with any other\n      protocol application\
    \ solution, security has to be considered early\n      in the design process.\
    \  As such, the recommendations currently\n      provided to IETF protocol architects,\
    \ such as RFC 3552 [RFC3552],\n      and RFC 4101 [RFC4101], apply also to the\
    \ smart object space.\n   In the IETF, security functionality is incorporated\
    \ into each\n   protocol as appropriate, to deal with threats that are specific\
    \ to\n   them.  It is extremely unlikely that there is a one-size-fits-all\n \
    \  security solution given the large number of choices for the 'right'\n   protocol\
    \ architecture (particularly at the application layer).  For\n   this purpose,\
    \ [RFC6272] offers a survey of IETF security mechanisms\n   instead of suggesting\
    \ a preferred one.\n"
- title: 7.  Privacy Considerations
  contents:
  - "7.  Privacy Considerations\n   This document mainly focuses on an engineering\
    \ audience, i.e., those\n   who are designing smart object protocols and architectures.\
    \  Since\n   there is no value-free design, privacy-related decisions also have\
    \ to\n   be made, even if they are just implicit in the reuse of certain\n   technologies.\
    \  RFC 6973 [RFC6973] and the threat model in\n   [CONFIDENTIALITY] were written\
    \ as guidance specifically for that\n   audience and are also applicable to the\
    \ smart object context.\n   For those looking at privacy from a deployment point\
    \ of view, the\n   following additional guidelines are suggested:\n   Transparency:\
    \  Transparency of data collection and processing is key\n      to avoid unpleasant\
    \ surprises for owners and users of smart\n      objects.  Users and impacted\
    \ parties must be put in a position to\n      understand what items of personal\
    \ data concerning them are\n      collected and stored, as well for what purposes\
    \ they are sought.\n   Data Collection / Use Limitation:  Smart objects should\
    \ only store\n      personal data that is adequate, relevant, and not excessive\
    \ in\n      relation to the purpose(s) for which they are processed.  The use\n\
    \      of anonymized data should be preferred wherever possible.\n   Data Access:\
    \  Before deployment starts, it is necessary to consider\n      who can access\
    \ personal data collected by smart objects and under\n      which conditions.\
    \  Appropriate and clear procedures should be\n      established in order to allow\
    \ data subjects to properly exercise\n      their rights.\n   Data Security: \
    \  Standardized data security measures to prevent\n      unlawful access, alteration,\
    \ or loss of smart object data need to\n      be defined and deployed.  Robust\
    \ cryptographic techniques and\n      proper authentication frameworks have to\
    \ be used to limit the risk\n      of unintended data transfers or unauthorized\
    \ access.\n   A more detailed treatment of privacy considerations that extend\n\
    \   beyond engineering can be found in a publication from the Article 29\n   Working\
    \ Party [WP223].\n"
- title: 8.  Informative References
  contents:
  - "8.  Informative References\n   [CONFIDENTIALITY]\n              Barnes, R., Schneier,\
    \ B., Jennings, C., Hardie, T.,\n              Trammell, B., Huitema, C., and\
    \ D. Borkmann,\n              \"Confidentiality in the Face of Pervasive Surveillance:\
    \ A\n              Threat Model and Problem Statement\", Work in Progress,\n \
    \             draft-iab-privsec-confidentiality-threat-04, March 2015.\n   [Gamma]\
    \    Gamma, E., \"Design Patterns: Elements of Reusable Object-\n            \
    \  Oriented Software\", 1995.\n   [HomeGateway]\n              Eggert, L., \"\
    An Experimental Study of Home Gateway\n              Characteristics\", In Proceedings\
    \ of the 10th annual\n              Internet Measurement Conference, 2010,\n \
    \             <http://eggert.org/papers/2010-imc-hgw-study.pdf>.\n   [IPoptions]\n\
    \              Fonseca, R., Porter, G., Katz, R., Shenker, S., and I.\n      \
    \        Stoica, \"IP options are not an option\", Technical Report\n        \
    \      UCB/EECS2005-24, 2005,\n              <http://citeseer.ist.psu.edu/viewdoc/\n\
    \              summary?doi=10.1.1.123.4251>.\n   [NSF]      National Science Foundation,\
    \ \"Interdisciplinary Pathways\n              towards a More Secure Internet\"\
    , A report on the NSF-\n              sponsored Cybersecurity Ideas Lab held in\
    \ Arlington,\n              Virginia, February 2014, <http://www.nsf.gov/cise/news/\n\
    \              CybersecurityIdeasLab_July2014.pdf>.\n   [PhysicalAttacks]\n  \
    \            Koeune, F. and F. Standaert, \"A Tutorial on Physical\n         \
    \     Security and Side-Channel Attacks\", in Foundations of\n              Security\
    \ Analysis and Design III: FOSAD 2004/2005 Tutorial\n              Lectures; Lecture\
    \ Notes in Computer Science, Vol. 3655,\n              pp. 78-108, September 2005,\n\
    \              <http://link.springer.com/chapter/10.1007%2F11554578_3>.\n   [RFC1263]\
    \  O'Malley, S. and L. Peterson, \"TCP Extensions Considered\n              Harmful\"\
    , RFC 1263, October 1991,\n              <http://www.rfc-editor.org/info/rfc1263>.\n\
    \   [RFC1958]  Carpenter, B., \"Architectural Principles of the Internet\",\n\
    \              RFC 1958, June 1996,\n              <http://www.rfc-editor.org/info/rfc1958>.\n\
    \   [RFC3234]  Carpenter, B. and S. Brim, \"Middleboxes: Taxonomy and\n      \
    \        Issues\", RFC 3234, February 2002,\n              <http://www.rfc-editor.org/info/rfc3234>.\n\
    \   [RFC3238]  Floyd, S. and L. Daigle, \"IAB Architectural and Policy\n     \
    \         Considerations for Open Pluggable Edge Services\", RFC\n           \
    \   3238, January 2002,\n              <http://www.rfc-editor.org/info/rfc3238>.\n\
    \   [RFC3444]  Pras, A. and J. Schoenwaelder, \"On the Difference between\n  \
    \            Information Models and Data Models\", RFC 3444, January\n       \
    \       2003, <http://www.rfc-editor.org/info/rfc3444>.\n   [RFC3552]  Rescorla,\
    \ E. and B. Korver, \"Guidelines for Writing RFC\n              Text on Security\
    \ Considerations\", BCP 72, RFC 3552, July\n              2003, <http://www.rfc-editor.org/info/rfc3552>.\n\
    \   [RFC3724]  Kempf, J., Austein, R., and IAB, \"The Rise of the Middle\n   \
    \           and the Future of End-to-End: Reflections on the Evolution\n     \
    \         of the Internet Architecture\", RFC 3724, March 2004,\n            \
    \  <http://www.rfc-editor.org/info/rfc3724>.\n   [RFC4101]  Rescorla, E. and IAB,\
    \ \"Writing Protocol Models\", RFC 4101,\n              June 2005, <http://www.rfc-editor.org/info/rfc4101>.\n\
    \   [RFC4924]  Aboba, B. and E. Davies, \"Reflections on Internet\n          \
    \    Transparency\", RFC 4924, July 2007,\n              <http://www.rfc-editor.org/info/rfc4924>.\n\
    \   [RFC5218]  Thaler, D. and B. Aboba, \"What Makes For a Successful\n      \
    \        Protocol?\", RFC 5218, July 2008,\n              <http://www.rfc-editor.org/info/rfc5218>.\n\
    \   [RFC6272]  Baker, F. and D. Meyer, \"Internet Protocols for the Smart\n  \
    \            Grid\", RFC 6272, June 2011,\n              <http://www.rfc-editor.org/info/rfc6272>.\n\
    \   [RFC6347]  Rescorla, E. and N. Modadugu, \"Datagram Transport Layer\n    \
    \          Security Version 1.2\", RFC 6347, January 2012,\n              <http://www.rfc-editor.org/info/rfc6347>.\n\
    \   [RFC6540]  George, W., Donley, C., Liljenstolpe, C., and L. Howard,\n    \
    \          \"IPv6 Support Required for All IP-Capable Nodes\", BCP 177,\n    \
    \          RFC 6540, April 2012,\n              <http://www.rfc-editor.org/info/rfc6540>.\n\
    \   [RFC6574]  Tschofenig, H. and J. Arkko, \"Report from the Smart Object\n \
    \             Workshop\", RFC 6574, April 2012,\n              <http://www.rfc-editor.org/info/rfc6574>.\n\
    \   [RFC6709]  Carpenter, B., Aboba, B., and S. Cheshire, \"Design\n         \
    \     Considerations for Protocol Extensions\", RFC 6709,\n              September\
    \ 2012, <http://www.rfc-editor.org/info/rfc6709>.\n   [RFC6749]  Hardt, D., \"\
    The OAuth 2.0 Authorization Framework\", RFC\n              6749, October 2012,\n\
    \              <http://www.rfc-editor.org/info/rfc6749>.\n   [RFC6973]  Cooper,\
    \ A., Tschofenig, H., Aboba, B., Peterson, J.,\n              Morris, J., Hansen,\
    \ M., and R. Smith, \"Privacy\n              Considerations for Internet Protocols\"\
    , RFC 6973, July\n              2013, <http://www.rfc-editor.org/info/rfc6973>.\n\
    \   [RFC7228]  Bormann, C., Ersue, M., and A. Keranen, \"Terminology for\n   \
    \           Constrained-Node Networks\", RFC 7228, May 2014,\n              <http://www.rfc-editor.org/info/rfc7228>.\n\
    \   [RFC7252]  Shelby, Z., Hartke, K., and C. Bormann, \"The Constrained\n   \
    \           Application Protocol (CoAP)\", RFC 7252, June 2014,\n            \
    \  <http://www.rfc-editor.org/info/rfc7252>.\n   [RFC7397]  Gilger, J. and H.\
    \ Tschofenig, \"Report from the Smart\n              Object Security Workshop\"\
    , RFC 7397, December 2014,\n              <http://www.rfc-editor.org/info/rfc7397>.\n\
    \   [TCPextensions]\n              Honda, M., Nishida, Y., Greenhalgh, A., Handley,\
    \ M., and\n              H. Tokuda, \"Is it Still Possible to Extend TCP?\", In\n\
    \              Proceedings of the ACM Internet Measurement Conference\n      \
    \        (IMC), Berlin, Germany, November 2011,\n              <http://conferences.sigcomm.org/imc/2011/docs/p181.pdf>.\n\
    \   [Tussles]  Clark, D., Wroclawski, J., Sollins, K., and R. Braden,\n      \
    \        \"Tussle in Cyberspace: Defining Tomorrow's Internet\", In\n        \
    \      Proceedings of ACM SIGCOMM, 2002,\n              <http://conferences.sigcomm.org/sigcomm/2002/papers/\n\
    \              tussle.html>.\n   [WP223]    Article 29 Data Protection Working\
    \ Party, \"Opinion 8/2014\n              on the Recent Developments on the Internet\
    \ of Things\", 14/\n              EN, WP 223, September 2014, <http://ec.europa.eu/justice/\n\
    \              data-protection/article-29/documentation/\n              opinion-recommendation/files/2014/wp223_en.pdf>.\n"
- title: Appendix A.  IAB Members at the Time of Approval
  contents:
  - "Appendix A.  IAB Members at the Time of Approval\n   Jari Arkko\n   Mary Barnes\n\
    \   Marc Blanchet\n   Joel Halpern\n   Ted Hardie\n   Joe Hildebrand\n   Russ\
    \ Housley\n   Eliot Lear\n   Xing Li\n   Erik Nordmark\n   Andrew Sullivan\n \
    \  Dave Thaler\n   Brian Trammell\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   We would like to thank the participants of the IAB Smart\
    \ Object\n   workshop for their input to the overall discussion about smart\n\
    \   objects.\n   Furthermore, we would like to thank Mike St. Johns, Jan Holler,\n\
    \   Patrick Wetterwald, Atte Lansisalmi, Hannu Flinck, Bernard Aboba,\n   Markku\
    \ Tuohino, Wes George, Robert Sparks, S.  Moonsesamy, Dave\n   Crocker, and Steve\
    \ Crocker in particular for their review comments.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Hannes Tschofenig\n   ARM Ltd.\n   6060 Hall in Tirol\n\
    \   Austria\n   EMail: Hannes.Tschofenig@gmx.net\n   URI:   http://www.tschofenig.priv.at\n\
    \   Jari Arkko\n   Jorvas  02420\n   Finland\n   EMail: jari.arkko@piuha.net\n\
    \   Dave Thaler\n   One Microsoft Way\n   Redmond, WA  98052\n   United States\n\
    \   EMail: dthaler@microsoft.com\n   Danny McPherson\n   12061 Bluemont Way\n\
    \   Reston, VA  20190\n   United States\n   EMail: dmcpherson@verisign.com\n"
