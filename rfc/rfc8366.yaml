- contents:
  - '             A Voucher Artifact for Bootstrapping Protocols

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines a strategy to securely assign a pledge to
    an\n   owner using an artifact signed, directly or indirectly, by the\n   pledge's
    manufacturer.  This artifact is known as a \"voucher\".\n   This document defines
    an artifact format as a YANG-defined JSON\n   document that has been signed using
    a Cryptographic Message Syntax\n   (CMS) structure.  Other YANG-derived formats
    are possible.  The\n   voucher artifact is normally generated by the pledge's
    manufacturer\n   (i.e., the Manufacturer Authorized Signing Authority (MASA)).\n
    \  This document only defines the voucher artifact, leaving it to other\n   documents
    to describe specialized protocols for accessing it.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8366.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . . .
    . . .   3\n   3.  Requirements Language . . . . . . . . . . . . . . . . . . .
    .   5\n   4.  Survey of Voucher Types . . . . . . . . . . . . . . . . . . .   5\n
    \  5.  Voucher Artifact  . . . . . . . . . . . . . . . . . . . . . .   7\n     5.1.
    \ Tree Diagram  . . . . . . . . . . . . . . . . . . . . . .   8\n     5.2.  Examples
    \ . . . . . . . . . . . . . . . . . . . . . . . .   8\n     5.3.  YANG Module
    . . . . . . . . . . . . . . . . . . . . . . .   9\n     5.4.  CMS Format Voucher
    Artifact . . . . . . . . . . . . . . .  15\n   6.  Design Considerations . . .
    . . . . . . . . . . . . . . . . .  16\n     6.1.  Renewals Instead of Revocations
    . . . . . . . . . . . . .  16\n     6.2.  Voucher Per Pledge  . . . . . . . .
    . . . . . . . . . . .  17\n   7.  Security Considerations . . . . . . . . . .
    . . . . . . . . .  17\n     7.1.  Clock Sensitivity . . . . . . . . . . . . .
    . . . . . . .  17\n     7.2.  Protect Voucher PKI in HSM  . . . . . . . . . .
    . . . . .  17\n     7.3.  Test Domain Certificate Validity When Signing . . .
    . . .  17\n     7.4.  YANG Module Security Considerations . . . . . . . . . .
    .  18\n   8.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  18\n
    \    8.1.  The IETF XML Registry . . . . . . . . . . . . . . . . . .  18\n     8.2.
    \ The YANG Module Names Registry  . . . . . . . . . . . . .  19\n     8.3.  The
    Media Types Registry  . . . . . . . . . . . . . . . .  19\n     8.4.  The SMI
    Security for S/MIME CMS Content Type Registry . .  20\n   9.  References  . .
    . . . . . . . . . . . . . . . . . . . . . . .  20\n     9.1.  Normative References
    \ . . . . . . . . . . . . . . . . . .  20\n     9.2.  Informative References  .
    . . . . . . . . . . . . . . . .  21\n   Acknowledgements  . . . . . . . . . .
    . . . . . . . . . . . . . .  23\n   Authors' Addresses  . . . . . . . . . . .
    . . . . . . . . . . . .  23\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document defines a strategy to securely assign a candidate\n
    \  device (pledge) to an owner using an artifact signed, directly or\n   indirectly,
    by the pledge's manufacturer, i.e., the Manufacturer\n   Authorized Signing Authority
    (MASA).  This artifact is known as the\n   \"voucher\".\n   The voucher artifact
    is a JSON [RFC8259] document that conforms with\n   a data model described by
    YANG [RFC7950], is encoded using the rules\n   defined in [RFC8259], and is signed
    using (by default) a CMS\n   structure [RFC5652].\n   The primary purpose of a
    voucher is to securely convey a certificate,\n   the \"pinned-domain-cert\", that
    a pledge can use to authenticate\n   subsequent interactions.  A voucher may be
    useful in several\n   contexts, but the driving motivation herein is to support
    secure\n   bootstrapping mechanisms.  Assigning ownership is important to\n   bootstrapping
    mechanisms so that the pledge can authenticate the\n   network that is trying
    to take control of it.\n   The lifetimes of vouchers may vary.  In some bootstrapping
    protocols,\n   the vouchers may include a nonce restricting them to a single use,\n
    \  whereas the vouchers in other bootstrapping protocols may have an\n   indicated
    lifetime.  In order to support long lifetimes, this\n   document recommends using
    short lifetimes with programmatic renewal,\n   see Section 6.1.\n   This document
    only defines the voucher artifact, leaving it to other\n   documents to describe
    specialized protocols for accessing it.  Some\n   bootstrapping protocols using
    the voucher artifact defined in this\n   document include: [ZERO-TOUCH], [SECUREJOIN],
    and [KEYINFRA]).\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   This document uses the following terms:\n   Artifact:  Used
    throughout to represent the voucher as instantiated\n      in the form of a signed
    structure.\n   Domain:  The set of entities or infrastructure under common\n      administrative
    control.  The goal of the bootstrapping protocol is\n      to enable a pledge
    to discover and join a domain.\n   Imprint:  The process where a device obtains
    the cryptographic key\n      material to identify and trust future interactions
    with a network.\n      This term is taken from Konrad Lorenz's work in biology
    with new\n      ducklings: \"during a critical period, the duckling would assume\n
    \     that anything that looks like a mother duck is in fact their\n      mother\"
    [Stajano99theresurrecting].  An equivalent for a device is\n      to obtain the
    fingerprint of the network's root certification\n      authority certificate.
    \ A device that imprints on an attacker\n      suffers a similar fate to a duckling
    that imprints on a hungry\n      wolf.  Imprinting is a term from psychology and
    ethology, as\n      described in [imprinting].\n   Join Registrar (and Coordinator):
    \ A representative of the domain\n      that is configured, perhaps autonomically,
    to decide whether a new\n      device is allowed to join the domain.  The administrator
    of the\n      domain interfaces with a join registrar (and Coordinator) to\n      control
    this process.  Typically, a join registrar is \"inside\" its\n      domain.  For
    simplicity, this document often refers to this as\n      just \"registrar\".\n
    \  MASA (Manufacturer Authorized Signing Authority):  The entity that,\n      for
    the purpose of this document, signs the vouchers for a\n      manufacturer's pledges.
    \ In some bootstrapping protocols, the MASA\n      may have an Internet presence
    and be integral to the bootstrapping\n      process, whereas in other protocols
    the MASA may be an offline\n      service that has no active role in the bootstrapping
    process.\n   Owner:  The entity that controls the private key of the \"pinned-\n
    \     domain-cert\" certificate conveyed by the voucher.\n   Pledge:  The prospective
    device attempting to find and securely join\n      a domain.  When shipped, it
    only trusts authorized representatives\n      of the manufacturer.\n   Registrar:
    \ See join registrar.\n   TOFU (Trust on First Use):  Where a pledge device makes
    no security\n      decisions but rather simply trusts the first domain entity
    it is\n      contacted by.  Used similarly to [RFC7435].  This is also known as\n
    \     the \"resurrecting duckling\" model.\n   Voucher:  A signed statement from
    the MASA service that indicates to\n      a pledge the cryptographic identity
    of the domain it should trust.\n"
  title: 2.  Terminology
- contents:
  - "3.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT
    RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted
    as described in BCP\n   14 [RFC2119] [RFC8174] when, and only when, they appear
    in all\n   capitals, as shown here.\n"
  title: 3.  Requirements Language
- contents:
  - "4.  Survey of Voucher Types\n   A voucher is a cryptographically protected statement
    to the pledge\n   device authorizing a zero-touch \"imprint\" on the join registrar
    of\n   the domain.  The specific information a voucher provides is\n   influenced
    by the bootstrapping use case.\n   The voucher can impart the following information
    to the join\n   registrar and pledge:\n   Assertion Basis:  Indicates the method
    that protects the imprint\n      (this is distinct from the voucher signature
    that protects the\n      voucher itself).  This might include manufacturer-asserted\n
    \     ownership verification, assured logging operations, or reliance on\n      pledge
    endpoint behavior such as secure root of trust of\n      measurement.  The join
    registrar might use this information.  Only\n      some methods are normatively
    defined in this document.  Other\n      methods are left for future work.\n   Authentication
    of Join Registrar:  Indicates how the pledge can\n      authenticate the join
    registrar.  This document defines a\n      mechanism to pin the domain certificate.
    \ Pinning a symmetric key,\n      a raw key, or \"CN-ID\" or \"DNS-ID\" information
    (as defined in\n      [RFC6125]) is left for future work.\n   Anti-Replay Protections:
    \ Time- or nonce-based information to\n      constrain the voucher to time periods
    or bootstrap attempts.\n   A number of bootstrapping scenarios can be met using
    differing\n   combinations of this information.  All scenarios address the primary\n
    \  threat of a Man-in-The-Middle (MiTM) registrar gaining control over\n   the
    pledge device.  The following combinations are \"types\" of\n   vouchers:\n                |Assertion
    \  |Registrar ID    | Validity    |\n   Voucher      |Log-|Veri-  |Trust  |CN-ID
    or| RTC | Nonce |\n   Type         | ged|  fied |Anchor |DNS-ID  |     |       |\n
    \  ---------------------------------------------------------|\n   Audit        |
    \ X |       | X     |        |     | X     |\n   -------------|----|-------|-------|--------|-----|-------|\n
    \  Nonceless    |  X |       | X     |        | X   |       |\n   Audit        |
    \   |       |       |        |     |       |\n   -------------|----|-------|-------|--------|-----|-------|\n
    \  Owner Audit  |  X |   X   | X     |        | X   | X     |\n   -------------|----|-------|-------|--------|-----|-------|\n
    \  Owner ID     |    |   X   | X     |  X     | X   |       |\n   -------------|----|-------|----------------|-----|-------|\n
    \  Bearer       |  X |       |   wildcard     | optional    |\n   out-of-scope
    |    |       |                |             |\n   -------------|----|-------|----------------|-------------|\n
    \  NOTE: All voucher types include a 'pledge ID serial-number'\n         (not
    shown here for space reasons).\n   Audit Voucher:  An Audit Voucher is named after
    the logging assertion\n      mechanisms that the registrar then \"audits\" to
    enforce local\n      policy.  The registrar mitigates a MiTM registrar by auditing
    that\n      an unknown MiTM registrar does not appear in the log entries.\n      This
    does not directly prevent the MiTM but provides a response\n      mechanism that
    ensures the MiTM is unsuccessful.  The advantage is\n      that actual ownership
    knowledge is not required on the MASA\n      service.\n   Nonceless Audit Voucher:
    \ An Audit Voucher without a validity period\n      statement.  Fundamentally,
    it is the same as an Audit Voucher\n      except that it can be issued in advance
    to support network\n      partitions or to provide a permanent voucher for remote\n
    \     deployments.\n   Ownership Audit Voucher:  An Audit Voucher where the MASA
    service has\n      verified the registrar as the authorized owner.  The MASA service\n
    \     mitigates a MiTM registrar by refusing to generate Audit Vouchers\n      for
    unauthorized registrars.  The registrar uses audit techniques\n      to supplement
    the MASA.  This provides an ideal sharing of policy\n      decisions and enforcement
    between the vendor and the owner.\n   Ownership ID Voucher:  Named after inclusion
    of the pledge's CN-ID or\n      DNS-ID within the voucher.  The MASA service mitigates
    a MiTM\n      registrar by identifying the specific registrar (via WebPKI)\n      authorized
    to own the pledge.\n   Bearer Voucher:  A Bearer Voucher is named after the inclusion
    of a\n      registrar ID wildcard.  Because the registrar identity is not\n      indicated,
    this voucher type must be treated as a secret and\n      protected from exposure
    as any 'bearer' of the voucher can claim\n      the pledge device.  Publishing
    a nonceless bearer voucher\n      effectively turns the specified pledge into
    a \"TOFU\" device with\n      minimal mitigation against MiTM registrars.  Bearer
    vouchers are\n      out of scope.\n"
  title: 4.  Survey of Voucher Types
- contents:
  - "5.  Voucher Artifact\n   The voucher's primary purpose is to securely assign
    a pledge to an\n   owner.  The voucher informs the pledge which entity it should\n
    \  consider to be its owner.\n   This document defines a voucher that is a JSON-encoded
    instance of\n   the YANG module defined in Section 5.3 that has been, by default,
    CMS\n   signed.\n   This format is described here as a practical basis for some
    uses\n   (such as in NETCONF), but more to clearly indicate what vouchers look\n
    \  like in practice.  This description also serves to validate the YANG\n   data
    model.\n   Future work is expected to define new mappings of the voucher to\n
    \  Concise Binary Object Representation (CBOR) (from JSON) and to change\n   the
    signature container from CMS to JSON Object Signing and\n   Encryption (JOSE)
    or CBOR Object Signing and Encryption (COSE).  XML\n   or ASN.1 formats are also
    conceivable.\n   This document defines a media type and a filename extension for
    the\n   CMS-encoded JSON type.  Future documents on additional formats would\n
    \  define additional media types.  Signaling is in the form of a MIME\n   Content-Type,
    an HTTP Accept: header, or more mundane methods like\n   use of a filename extension
    when a voucher is transferred on a USB\n   key.\n"
  - contents:
    - "5.1.  Tree Diagram\n   The following tree diagram illustrates a high-level
      view of a voucher\n   document.  The notation used in this diagram is described
      in\n   [RFC8340].  Each node in the diagram is fully described by the YANG\n
      \  module in Section 5.3.  Please review the YANG module for a detailed\n   description
      of the voucher format.\n   module: ietf-voucher\n     yang-data voucher-artifact:\n
      \        +---- voucher\n            +---- created-on                       yang:date-and-time\n
      \           +---- expires-on?                      yang:date-and-time\n            +----
      assertion                        enumeration\n            +---- serial-number
      \                   string\n            +---- idevid-issuer?                   binary\n
      \           +---- pinned-domain-cert               binary\n            +----
      domain-cert-revocation-checks?   boolean\n            +---- nonce?                           binary\n
      \           +---- last-renewal-date?               yang:date-and-time\n"
    title: 5.1.  Tree Diagram
  - contents:
    - "5.2.  Examples\n   This section provides voucher examples for illustration
      purposes.\n   These examples conform to the encoding rules defined in [RFC8259].\n
      \  The following example illustrates an ephemeral voucher (uses a\n   nonce).
      \ The MASA generated this voucher using the 'logged' assertion\n   type, knowing
      that it would be suitable for the pledge making the\n   request.\n   {\n     \"ietf-voucher:voucher\":
      {\n       \"created-on\": \"2016-10-07T19:31:42Z\",\n       \"assertion\": \"logged\",\n
      \      \"serial-number\": \"JADA123456789\",\n       \"idevid-issuer\": \"base64encodedvalue==\",\n
      \      \"pinned-domain-cert\": \"base64encodedvalue==\",\n       \"nonce\":
      \"base64encodedvalue==\"\n     }\n   }\n   The following example illustrates
      a non-ephemeral voucher (no nonce).\n   While the voucher itself expires after
      two weeks, it presumably can\n   be renewed for up to a year.  The MASA generated
      this voucher using\n   the 'verified' assertion type, which should satisfy all
      pledges.\n   {\n     \"ietf-voucher:voucher\": {\n       \"created-on\": \"2016-10-07T19:31:42Z\",\n
      \      \"expires-on\": \"2016-10-21T19:31:42Z\",\n       \"assertion\": \"verified\",\n
      \      \"serial-number\": \"JADA123456789\",\n       \"idevid-issuer\": \"base64encodedvalue==\",\n
      \      \"pinned-domain-cert\": \"base64encodedvalue==\",\n       \"domain-cert-revocation-checks\":
      \"true\",\n       \"last-renewal-date\": \"2017-10-07T19:31:42Z\"\n     }\n
      \  }\n"
    title: 5.2.  Examples
  - contents:
    - "5.3.  YANG Module\n   Following is a YANG [RFC7950] module formally describing
      the\n   voucher's JSON document structure.\n"
    - '<CODE BEGINS> file "ietf-voucher@2018-05-09.yang"

      '
    - "module ietf-voucher {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-voucher\";\n
      \ prefix vch;\n  import ietf-yang-types {\n    prefix yang;\n    reference \"RFC
      6991: Common YANG Data Types\";\n  }\n  import ietf-restconf {\n    prefix rc;\n
      \   description\n      \"This import statement is only present to access\n       the
      yang-data extension defined in RFC 8040.\";\n    reference \"RFC 8040: RESTCONF
      Protocol\";\n  }\n  organization\n    \"IETF ANIMA Working Group\";\n  contact\n
      \   \"WG Web:   <https://datatracker.ietf.org/wg/anima/>\n     WG List:  <mailto:anima@ietf.org>\n
      \    Author:   Kent Watsen\n               <mailto:kwatsen@juniper.net>\n     Author:
      \  Max Pritikin\n               <mailto:pritikin@cisco.com>\n     Author:   Michael
      Richardson\n               <mailto:mcr+ietf@sandelman.ca>\n     Author:   Toerless
      Eckert\n               <mailto:tte+ietf@cs.fau.de>\";\n  description\n    \"This
      module defines the format for a voucher, which is produced by\n     a pledge's
      manufacturer or delegate (MASA) to securely assign a\n     pledge to an 'owner',
      so that the pledge may establish a secure\n     connection to the owner's network
      infrastructure.\n     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',
      'SHALL\n     NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',\n
      \    'MAY', and 'OPTIONAL' in this document are to be interpreted as\n     described
      in BCP 14 (RFC 2119) (RFC 8174) when, and only when, they\n     appear in all
      capitals, as shown here.\n     Copyright (c) 2018 IETF Trust and the persons
      identified as\n     authors of the code.  All rights reserved.\n     Redistribution
      and use in source and binary forms, with or without\n     modification, is permitted
      pursuant to, and subject to the license\n     terms contained in, the Simplified
      BSD License set forth in Section\n     4.c of the IETF Trust's Legal Provisions
      Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n
      \    This version of this YANG module is part of RFC 8366; see the RFC\n     itself
      for full legal notices.\";\n  revision 2018-05-09 {\n    description\n      \"Initial
      version\";\n    reference \"RFC 8366: Voucher Profile for Bootstrapping Protocols\";\n
      \ }\n  // Top-level statement\n  rc:yang-data voucher-artifact {\n    uses voucher-artifact-grouping;\n
      \ }\n  // Grouping defined for future augmentations\n  grouping voucher-artifact-grouping
      {\n    description\n      \"Grouping to allow reuse/extensions in future work.\";\n
      \   container voucher {\n      description\n        \"A voucher assigns a pledge
      to an owner (pinned-domain-cert).\";\n      leaf created-on {\n        type
      yang:date-and-time;\n        mandatory true;\n        description\n          \"A
      value indicating the date this voucher was created.  This\n           node is
      primarily for human consumption and auditing.  Future\n           work MAY create
      verification requirements based on this\n           node.\";\n      }\n      leaf
      expires-on {\n        type yang:date-and-time;\n        must 'not(../nonce)';\n
      \       description\n          \"A value indicating when this voucher expires.
      \ The node is\n           optional as not all pledges support expirations, such
      as\n           pledges lacking a reliable clock.\n           If this field exists,
      then the pledges MUST ensure that\n           the expires-on time has not yet
      passed.  A pledge without\n           an accurate clock cannot meet this requirement.\n
      \          The expires-on value MUST NOT exceed the expiration date\n           of
      any of the listed 'pinned-domain-cert' certificates.\";\n      }\n      leaf
      assertion {\n        type enumeration {\n          enum verified {\n            description\n
      \             \"Indicates that the ownership has been positively\n               verified
      by the MASA (e.g., through sales channel\n               integration).\";\n
      \         }\n          enum logged {\n            description\n              \"Indicates
      that the voucher has been issued after\n               minimal verification
      of ownership or control.  The\n               issuance has been logged for detection
      of\n               potential security issues (e.g., recipients of\n               vouchers
      might verify for themselves that unexpected\n               vouchers are not
      in the log).  This is similar to\n               unsecured trust-on-first-use
      principles but with the\n               logging providing a basis for detecting
      unexpected\n               events.\";\n          }\n          enum proximity
      {\n            description\n              \"Indicates that the voucher has been
      issued after\n               the MASA verified a proximity proof provided by
      the\n               device and target domain.  The issuance has been logged\n
      \              for detection of potential security issues.  This is\n               stronger
      than just logging, because it requires some\n               verification that
      the pledge and owner are\n               in communication but is still dependent
      on analysis of\n               the logs to detect unexpected events.\";\n          }\n
      \       }\n        mandatory true;\n        description\n          \"The assertion
      is a statement from the MASA regarding how\n           the owner was verified.
      \ This statement enables pledges\n           to support more detailed policy
      checks.  Pledges MUST\n           ensure that the assertion provided is acceptable,
      per\n           local policy, before processing the voucher.\";\n      }\n      leaf
      serial-number {\n        type string;\n        mandatory true;\n        description\n
      \         \"The serial-number of the hardware.  When processing a\n           voucher,
      a pledge MUST ensure that its serial-number\n           matches this value.
      \ If no match occurs, then the\n           pledge MUST NOT process this voucher.\";\n
      \     }\n      leaf idevid-issuer {\n        type binary;\n        description\n
      \         \"The Authority Key Identifier OCTET STRING (as defined in\n           Section
      4.2.1.1 of RFC 5280) from the pledge's IDevID\n           certificate.  Optional
      since some serial-numbers are\n           already unique within the scope of
      a MASA.\n           Inclusion of the statistically unique key identifier\n           ensures
      statistically unique identification of the hardware.\n           When processing
      a voucher, a pledge MUST ensure that its\n           IDevID Authority Key Identifier
      matches this value.  If no\n           match occurs, then the pledge MUST NOT
      process this voucher.\n           When issuing a voucher, the MASA MUST ensure
      that this field\n           is populated for serial-numbers that are not otherwise
      unique\n           within the scope of the MASA.\";\n      }\n      leaf pinned-domain-cert
      {\n        type binary;\n        mandatory true;\n        description\n          \"An
      X.509 v3 certificate structure, as specified by RFC 5280,\n           using
      Distinguished Encoding Rules (DER) encoding, as defined\n           in ITU-T
      X.690.\n           This certificate is used by a pledge to trust a Public Key\n
      \          Infrastructure in order to verify a domain certificate\n           supplied
      to the pledge separately by the bootstrapping\n           protocol.  The domain
      certificate MUST have this certificate\n           somewhere in its chain of
      certificates.  This certificate\n           MAY be an end-entity certificate,
      including a self-signed\n           entity.\";\n        reference\n          \"RFC
      5280:\n             Internet X.509 Public Key Infrastructure Certificate\n             and
      Certificate Revocation List (CRL) Profile.\n           ITU-T X.690:\n              Information
      technology - ASN.1 encoding rules:\n              Specification of Basic Encoding
      Rules (BER),\n              Canonical Encoding Rules (CER) and Distinguished\n
      \             Encoding Rules (DER).\";\n      }\n      leaf domain-cert-revocation-checks
      {\n        type boolean;\n        description\n          \"A processing instruction
      to the pledge that it MUST (true)\n           or MUST NOT (false) verify the
      revocation status for the\n           pinned domain certificate.  If this field
      is not set, then\n           normal PKIX behavior applies to validation of the
      domain\n           certificate.\";\n      }\n      leaf nonce {\n        type
      binary {\n          length \"8..32\";\n        }\n        must 'not(../expires-on)';\n
      \       description\n          \"A value that can be used by a pledge in some
      bootstrapping\n           protocols to enable anti-replay protection.  This
      node is\n           optional because it is not used by all bootstrapping\n           protocols.\n
      \          When present, the pledge MUST compare the provided nonce\n           value
      with another value that the pledge randomly generated\n           and sent to
      a bootstrap server in an earlier bootstrapping\n           message.  If the
      values do not match, then the pledge MUST\n           NOT process this voucher.\";\n
      \     }\n      leaf last-renewal-date {\n        type yang:date-and-time;\n
      \       must '../expires-on';\n        description\n          \"The date that
      the MASA projects to be the last date it\n           will renew a voucher on.
      \ This field is merely informative;\n           it is not processed by pledges.\n
      \          Circumstances may occur after a voucher is generated that\n           may
      alter a voucher's validity period.  For instance, a\n           vendor may associate
      validity periods with support contracts,\n           which may be terminated
      or extended over time.\";\n      }\n    } // end voucher\n  } // end voucher-grouping\n"
    - '}

      '
    - '<CODE ENDS>

      '
    title: 5.3.  YANG Module
  - contents:
    - "5.4.  CMS Format Voucher Artifact\n   The IETF evolution of PKCS#7 is CMS [RFC5652].
      \ A CMS-signed voucher,\n   the default type, contains a ContentInfo structure
      with the voucher\n   content.  An eContentType of 40 indicates that the content
      is a JSON-\n   encoded voucher.\n   The signing structure is a CMS SignedData
      structure, as specified by\n   Section 5.1 of [RFC5652], encoded using ASN.1
      Distinguished Encoding\n   Rules (DER), as specified in ITU-T X.690 [ITU.X690.2015].\n
      \  To facilitate interoperability, Section 8.3 in this document\n   registers
      the media type \"application/voucher-cms+json\" and the\n   filename extension
      \".vcj\".\n   The CMS structure MUST contain a 'signerInfo' structure, as described\n
      \  in Section 5.1 of [RFC5652], containing the signature generated over\n   the
      content using a private key trusted by the recipient.  Normally,\n   the recipient
      is the pledge and the signer is the MASA.  Another\n   possible use could be
      as a \"signed voucher request\" format\n   originating from the pledge or registrar
      toward the MASA.  Within\n   this document, the signer is assumed to be the
      MASA.\n   Note that Section 5.1 of [RFC5652] includes a discussion about how
      to\n   validate a CMS object, which is really a PKCS7 object (cmsVersion=1).\n
      \  Intermediate systems (such the Bootstrapping Remote Secure Key\n   Infrastructures
      (BRSKI) registrar) that might need to evaluate the\n   voucher in flight MUST
      be prepared for such an older format.  No\n   signaling is necessary, as the
      manufacturer knows the capabilities of\n   the pledge and will use an appropriate
      format voucher for each\n   pledge.\n   The CMS structure SHOULD also contain
      all of the certificates leading\n   up to and including the signer's trust anchor
      certificate known to\n   the recipient.  The inclusion of the trust anchor is
      unusual in many\n   applications, but third parties cannot accurately audit
      the\n   transaction without it.\n   The CMS structure MAY also contain revocation
      objects for any\n   intermediate certificate authorities (CAs) between the voucher
      issuer\n   and the trust anchor known to the recipient.  However, the use of\n
      \  CRLs and other validity mechanisms is discouraged, as the pledge is\n   unlikely
      to be able to perform online checks and is unlikely to have\n   a trusted clock
      source.  As described below, the use of short-lived\n   vouchers and/or a pledge-provided
      nonce provides a freshness\n   guarantee.\n"
    title: 5.4.  CMS Format Voucher Artifact
  title: 5.  Voucher Artifact
- contents:
  - '6.  Design Considerations

    '
  - contents:
    - "6.1.  Renewals Instead of Revocations\n   The lifetimes of vouchers may vary.
      \ In some bootstrapping protocols,\n   the vouchers may be created and consumed
      immediately, whereas in\n   other bootstrapping solutions, there may be a significant
      time delay\n   between when a voucher is created and when it is consumed.  In
      cases\n   when there is a time delay, there is a need for the pledge to ensure\n
      \  that the assertions made when the voucher was created are still\n   valid.\n
      \  A revocation artifact is generally used to verify the continued\n   validity
      of an assertion such as a PKIX certificate, web token, or a\n   \"voucher\".
      \ With this approach, a potentially long-lived assertion is\n   paired with
      a reasonably fresh revocation status check to ensure that\n   the assertion
      is still valid.  However, this approach increases\n   solution complexity, as
      it introduces the need for additional\n   protocols and code paths to distribute
      and process the revocations.\n   Addressing the shortcomings of revocations,
      this document recommends\n   instead the use of lightweight renewals of short-lived
      non-revocable\n   vouchers.  That is, rather than issue a long-lived voucher,
      where the\n   'expires-on' leaf is set to some distant date, the expectation
      is for\n   the MASA to instead issue a short-lived voucher, where the 'expires-\n
      \  on' leaf is set to a relatively near date, along with a promise\n   (reflected
      in the 'last-renewal-date' field) to reissue the voucher\n   again when needed.
      \ Importantly, while issuing the initial voucher\n   may incur heavyweight verification
      checks (\"Are you who you say you\n   are?\"  \"Does the pledge actually belong
      to you?\"), reissuing the\n   voucher should be a lightweight process, as it
      ostensibly only\n   updates the voucher's validity period.  With this approach,
      there is\n   only the one artifact, and only one code path is needed to process\n
      \  it; there is no possibility of a pledge choosing to skip the\n   revocation
      status check because, for instance, the OCSP Responder is\n   not reachable.\n
      \  While this document recommends issuing short-lived vouchers, the\n   voucher
      artifact does not restrict the ability to create long-lived\n   voucher, if
      required; however, no revocation method is described.\n   Note that a voucher
      may be signed by a chain of intermediate CAs\n   leading up to the trust anchor
      certificate known by the pledge.  Even\n   though the voucher itself is not
      revocable, it may still be revoked,\n   per se, if one of the intermediate CA
      certificates is revoked.\n"
    title: 6.1.  Renewals Instead of Revocations
  - contents:
    - "6.2.  Voucher Per Pledge\n   The solution described herein originally enabled
      a single voucher to\n   apply to many pledges, using lists of regular expressions
      to\n   represent ranges of serial-numbers.  However, it was determined that\n
      \  blocking the renewal of a voucher that applied to many devices would\n   be
      excessive when only the ownership for a single pledge needed to be\n   blocked.
      \ Thus, the voucher format now only supports a single serial-\n   number to
      be listed.\n"
    title: 6.2.  Voucher Per Pledge
  title: 6.  Design Considerations
- contents:
  - '7.  Security Considerations

    '
  - contents:
    - "7.1.  Clock Sensitivity\n   An attacker could use an expired voucher to gain
      control over a\n   device that has no understanding of time.  The device cannot
      trust\n   NTP as a time reference, as an attacker could control the NTP stream.\n
      \  There are three things to defend against this: 1) devices are\n   required
      to verify that the expires-on field has not yet passed, 2)\n   devices without
      access to time can use nonces to get ephemeral\n   vouchers, and 3) vouchers
      without expiration times may be used, which\n   will appear in the audit log,
      informing the security decision.\n   This document defines a voucher format
      that contains time values for\n   expirations, which require an accurate clock
      in order to be processed\n   correctly.  Vendors planning on issuing vouchers
      with expiration\n   values must ensure that devices have an accurate clock when
      shipped\n   from manufacturing facilities and take steps to prevent clock\n
      \  tampering.  If it is not possible to ensure clock accuracy, then\n   vouchers
      with expirations should not be issued.\n"
    title: 7.1.  Clock Sensitivity
  - contents:
    - "7.2.  Protect Voucher PKI in HSM\n   Pursuant the recommendation made in Section
      6.1 for the MASA to be\n   deployed as an online voucher signing service, it
      is RECOMMENDED that\n   the MASA's private key used for signing vouchers is
      protected by a\n   hardware security module (HSM).\n"
    title: 7.2.  Protect Voucher PKI in HSM
  - contents:
    - "7.3.  Test Domain Certificate Validity When Signing\n   If a domain certificate
      is compromised, then any outstanding vouchers\n   for that domain could be used
      by the attacker.  The domain\n   administrator is clearly expected to initiate
      revocation of any\n   domain identity certificates (as is normal in PKI solutions).\n
      \  Similarly,they are expected to contact the MASA to indicate that an\n   outstanding
      (presumably short lifetime) voucher should be blocked\n   from automated renewal.
      \ Protocols for voucher distribution are\n   RECOMMENDED to check for revocation
      of domain identity certificates\n   before the signing of vouchers.\n"
    title: 7.3.  Test Domain Certificate Validity When Signing
  - contents:
    - "7.4.  YANG Module Security Considerations\n   The YANG module specified in
      this document defines the schema for\n   data that is subsequently encapsulated
      by a CMS signed-data content\n   type, as described in Section 5 of [RFC5652].
      \ As such, all of the\n   YANG modeled data is protected from modification.\n
      \  Implementations should be aware that the signed data is only\n   protected
      from external modification; the data is still visible.\n   This potential disclosure
      of information doesn't affect security so\n   much as privacy.  In particular,
      adversaries can glean information\n   such as which devices belong to which
      organizations and which CRL\n   Distribution Point and/or OCSP Responder URLs
      are accessed to\n   validate the vouchers.  When privacy is important, the CMS
      signed-\n   data content type SHOULD be encrypted, either by conveying it via
      a\n   mutually authenticated secure transport protocol (e.g., TLS\n   [RFC5246])
      or by encapsulating the signed-data content type with an\n   enveloped-data
      content type (Section 6 of [RFC5652]), though details\n   for how to do this
      are outside the scope of this document.\n   The use of YANG to define data structures,
      via the 'yang-data'\n   statement, is relatively new and distinct from the traditional
      use of\n   YANG to define an API accessed by network management protocols such\n
      \  as NETCONF [RFC6241] and RESTCONF [RFC8040].  For this reason, these\n   guidelines
      do not follow template described by Section 3.7 of\n   [YANG-GUIDE].\n"
    title: 7.4.  YANG Module Security Considerations
  title: 7.  Security Considerations
- contents:
  - '8.  IANA Considerations

    '
  - contents:
    - "8.1.  The IETF XML Registry\n   This document registers a URI in the \"IETF
      XML Registry\" [RFC3688].\n   IANA has registered the following:\n      URI:
      urn:ietf:params:xml:ns:yang:ietf-voucher\n      Registrant Contact: The ANIMA
      WG of the IETF.\n      XML: N/A, the requested URI is an XML namespace.\n"
    title: 8.1.  The IETF XML Registry
  - contents:
    - "8.2.  The YANG Module Names Registry\n   This document registers a YANG module
      in the \"YANG Module Names\"\n   registry [RFC6020].  IANA has registered the
      following:\n      name:         ietf-voucher\n      namespace:    urn:ietf:params:xml:ns:yang:ietf-voucher\n
      \     prefix:       vch\n      reference:    RFC 8366\n"
    title: 8.2.  The YANG Module Names Registry
  - contents:
    - "8.3.  The Media Types Registry\n   This document registers a new media type
      in the \"Media Types\"\n   registry [RFC6838].  IANA has registered the following:\n
      \  Type name:  application\n   Subtype name:  voucher-cms+json\n   Required
      parameters:  none\n   Optional parameters:  none\n   Encoding considerations:
      \ CMS-signed JSON vouchers are ASN.1/DER\n      encoded.\n   Security considerations:
      \ See Section 7\n   Interoperability considerations:  The format is designed
      to be\n      broadly interoperable.\n   Published specification:  RFC 8366\n
      \  Applications that use this media type:  ANIMA, 6tisch, and NETCONF\n      zero-touch
      imprinting systems.\n   Fragment identifier considerations:  none\n   Additional
      information:\n      Deprecated alias names for this type:  none\n      Magic
      number(s):  None\n      File extension(s):  .vcj\n      Macintosh file type
      code(s):  none\n   Person and email address to contact for further information:\n
      \     IETF ANIMA WG\n   Intended usage:  LIMITED\n   Restrictions on usage:
      \ NONE\n   Author:  ANIMA WG\n   Change controller:  IETF\n   Provisional registration?
      (standards tree only):  NO\n"
    title: 8.3.  The Media Types Registry
  - contents:
    - "8.4.  The SMI Security for S/MIME CMS Content Type Registry\n   IANA has registered
      the following OID in the \"SMI Security for S/MIME\n   CMS Content Type (1.2.840.113549.1.9.16.1)\"
      registry:\n             Decimal  Description                             References\n
      \            -------  --------------------------------------  ----------\n             40
      \      id-ct-animaJSONVoucher                  RFC 8366\n"
    title: 8.4.  The SMI Security for S/MIME CMS Content Type Registry
  title: 8.  IANA Considerations
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [ITU.X690.2015]\n                International
      Telecommunication Union, \"Information\n                Technology - ASN.1 encoding
      rules: Specification of\n                Basic Encoding Rules (BER), Canonical
      Encoding Rules\n                (CER) and Distinguished Encoding Rules (DER)\",
      ITU-T\n                Recommendation X.690, ISO/IEC 8825-1, August 2015,\n
      \               <https://www.itu.int/rec/T-REC-X.690/>.\n   [RFC2119]    Bradner,
      S., \"Key words for use in RFCs to Indicate\n                Requirement Levels\",
      BCP 14, RFC 2119,\n                DOI 10.17487/RFC2119, March 1997,\n                <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC5652]    Housley, R., \"Cryptographic Message Syntax (CMS)\",\n                STD
      70, RFC 5652, DOI 10.17487/RFC5652, September 2009,\n                <https://www.rfc-editor.org/info/rfc5652>.\n
      \  [RFC6020]    Bjorklund, M., Ed., \"YANG - A Data Modeling Language for\n
      \               the Network Configuration Protocol (NETCONF)\", RFC 6020,\n
      \               DOI 10.17487/RFC6020, October 2010,\n                <https://www.rfc-editor.org/info/rfc6020>.\n
      \  [RFC7950]    Bjorklund, M., Ed., \"The YANG 1.1 Data Modeling\n                Language\",
      RFC 7950, DOI 10.17487/RFC7950, August 2016,\n                <https://www.rfc-editor.org/info/rfc7950>.\n
      \  [RFC8174]    Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n                2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n                May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8259]    Bray, T., Ed., \"The
      JavaScript Object Notation (JSON)\n                Data Interchange Format\",
      STD 90, RFC 8259,\n                DOI 10.17487/RFC8259, December 2017,\n                <https://www.rfc-editor.org/info/rfc8259>.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [imprinting] Wikipedia, \"Wikipedia article:
      Imprinting\", February\n                2018, <https://en.wikipedia.org/w/index.php?title=\n
      \               Imprinting_(psychology)&oldid=825757556>.\n   [KEYINFRA]   Pritikin,
      M., Richardson, M., Behringer, M., Bjarnason,\n                S., and K. Watsen,
      \"Bootstrapping Remote Secure Key\n                Infrastructures (BRSKI)\",
      Work in Progress,\n                draft-ietf-anima-bootstrapping-keyinfra-12,
      March 2018.\n   [RFC3688]    Mealling, M., \"The IETF XML Registry\", BCP 81,
      RFC 3688,\n                DOI 10.17487/RFC3688, January 2004,\n                <https://www.rfc-editor.org/info/rfc3688>.\n
      \  [RFC5246]    Dierks, T. and E. Rescorla, \"The Transport Layer\n                Security
      (TLS) Protocol Version 1.2\", RFC 5246,\n                DOI 10.17487/RFC5246,
      August 2008,\n                <https://www.rfc-editor.org/info/rfc5246>.\n   [RFC6125]
      \   Saint-Andre, P. and J. Hodges, \"Representation and\n                Verification
      of Domain-Based Application Service\n                Identity within Internet
      Public Key Infrastructure Using\n                X.509 (PKIX) Certificates in
      the Context of Transport\n                Layer Security (TLS)\", RFC 6125,
      DOI 10.17487/RFC6125,\n                March 2011, <https://www.rfc-editor.org/info/rfc6125>.\n
      \  [RFC6241]    Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J.,\n                Ed.,
      and A. Bierman, Ed., \"Network Configuration\n                Protocol (NETCONF)\",
      RFC 6241, DOI 10.17487/RFC6241,\n                June 2011, <https://www.rfc-editor.org/info/rfc6241>.\n
      \  [RFC6838]    Freed, N., Klensin, J., and T. Hansen, \"Media Type\n                Specifications
      and Registration Procedures\", BCP 13,\n                RFC 6838, DOI 10.17487/RFC6838,
      January 2013,\n                <https://www.rfc-editor.org/info/rfc6838>.\n
      \  [RFC7435]    Dukhovni, V., \"Opportunistic Security: Some Protection\n                Most
      of the Time\", RFC 7435, DOI 10.17487/RFC7435,\n                December 2014,\n
      \               <https://www.rfc-editor.org/info/rfc7435>.\n   [RFC8040]    Bierman,
      A., Bjorklund, M., and K. Watsen, \"RESTCONF\n                Protocol\", RFC
      8040, DOI 10.17487/RFC8040, January 2017,\n                <https://www.rfc-editor.org/info/rfc8040>.\n
      \  [RFC8340]    Bjorklund, M. and L. Berger, Ed., \"YANG Tree Diagrams\",\n
      \               BCP 215, RFC 8340, DOI 10.17487/RFC8340, March 2018,\n                <https://www.rfc-editor.org/info/rfc8340>.\n
      \  [SECUREJOIN] Richardson, M., \"6tisch Secure Join protocol\", Work in\n                Progress,
      draft-ietf-6tisch-dtsecurity-secure-join-01,\n                February 2017.\n
      \  [Stajano99theresurrecting]\n                Stajano, F. and R. Anderson,
      \"The Resurrecting Duckling:\n                Security Issues for Ad-Hoc Wireless
      Networks\", 1999,\n                <https://www.cl.cam.ac.uk/research/dtg/www/files/\n
      \               publications/public/files/tr.1999.2.pdf>.\n   [YANG-GUIDE] Bierman,
      A., \"Guidelines for Authors and Reviewers of\n                YANG Data Model
      Documents\", Work in Progress,\n                draft-ietf-netmod-rfc6087bis-20,
      March 2018.\n   [ZERO-TOUCH] Watsen, K., Abrahamsson, M., and I. Farrer, \"Zero
      Touch\n                Provisioning for Networking Devices\", Work in Progress,\n
      \               draft-ietf-netconf-zerotouch-21, March 2018.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Acknowledgements\n   The authors would like to thank for following for lively
    discussions\n   on list and in the halls (ordered by last name): William Atwood,\n
    \  Toerless Eckert, and Sheng Jiang.\n   Russ Housley provided the upgrade from
    PKCS7 to CMS (RFC 5652) along\n   with the detailed CMS structure diagram.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Kent Watsen\n   Juniper Networks\n   Email: kwatsen@juniper.net\n
    \  Michael C. Richardson\n   Sandelman Software\n   Email: mcr+ietf@sandelman.ca\n
    \  URI:   http://www.sandelman.ca/\n   Max Pritikin\n   Cisco Systems\n   Email:
    pritikin@cisco.com\n   Toerless Eckert\n   Huawei USA - Futurewei Technologies
    Inc.\n   2330 Central Expy\n   Santa Clara  95050\n   United States of America\n
    \  Email: tte+ietf@cs.fau.de, toerless.eckert@huawei.com\n"
  title: Authors' Addresses
