- title: __initial_text__
  contents:
  - '               Session Traversal Utilities for NAT (STUN)

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   Session Traversal Utilities for NAT (STUN) is a protocol that serves\n\
    \   as a tool for other protocols in dealing with Network Address\n   Translator\
    \ (NAT) traversal.  It can be used by an endpoint to\n   determine the IP address\
    \ and port allocated to it by a NAT.  It can\n   also be used to check connectivity\
    \ between two endpoints, and as a\n   keep-alive protocol to maintain NAT bindings.\
    \  STUN works with many\n   existing NATs, and does not require any special behavior\
    \ from them.\n   STUN is not a NAT traversal solution by itself.  Rather, it is\
    \ a tool\n   to be used in the context of a NAT traversal solution.  This is an\n\
    \   important change from the previous version of this specification (RFC\n  \
    \ 3489), which presented STUN as a complete solution.\n   This document obsoletes\
    \ RFC 3489.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n        7.2.1. Sending over UDP ...................................13\n\
    \        7.2.2. Sending over TCP or TLS-over-TCP ...................14\n   7.3.\
    \ Receiving a STUN Message ..................................16\n        7.3.1.\
    \ Processing a Request ...............................17\n               7.3.1.1.\
    \ Forming a Success or Error Response .......18\n               7.3.1.2. Sending\
    \ the Success or Error Response .....19\n        7.3.2. Processing an Indication\
    \ ...........................19\n        7.3.3. Processing a Success Response\
    \ ......................19\n        7.3.4. Processing an Error Response .......................20\n"
- title: 8. FINGERPRINT Mechanism ..........................................20
  contents:
  - '8. FINGERPRINT Mechanism ..........................................20

    '
- title: 9. DNS Discovery of a Server ......................................21
  contents:
  - '9. DNS Discovery of a Server ......................................21

    '
- title: 10. Authentication and Message-Integrity Mechanisms ...............22
  contents:
  - "10. Authentication and Message-Integrity Mechanisms ...............22\n   10.1.\
    \ Short-Term Credential Mechanism ..........................22\n        10.1.1.\
    \ Forming a Request or Indication ...................23\n        10.1.2. Receiving\
    \ a Request or Indication .................23\n        10.1.3. Receiving a Response\
    \ ..............................24\n   10.2. Long-Term Credential Mechanism ...........................24\n\
    \        10.2.1. Forming a Request .................................25\n     \
    \          10.2.1.1. First Request ............................25\n          \
    \     10.2.1.2. Subsequent Requests ......................26\n        10.2.2.\
    \ Receiving a Request ...............................26\n        10.2.3. Receiving\
    \ a Response ..............................27\n"
- title: 11. ALTERNATE-SERVER Mechanism ....................................28
  contents:
  - '11. ALTERNATE-SERVER Mechanism ....................................28

    '
- title: 12. Backwards Compatibility with RFC 3489 .........................28
  contents:
  - "12. Backwards Compatibility with RFC 3489 .........................28\n   12.1.\
    \ Changes to Client Processing .............................29\n   12.2. Changes\
    \ to Server Processing .............................29\n"
- title: 13. Basic Server Behavior .........................................30
  contents:
  - '13. Basic Server Behavior .........................................30

    '
- title: 14. STUN Usages ...................................................30
  contents:
  - '14. STUN Usages ...................................................30

    '
- title: 15. STUN Attributes ...............................................31
  contents:
  - "15. STUN Attributes ...............................................31\n   15.1.\
    \ MAPPED-ADDRESS ...........................................32\n   15.2. XOR-MAPPED-ADDRESS\
    \ .......................................33\n   15.3. USERNAME .................................................34\n\
    \   15.4. MESSAGE-INTEGRITY ........................................34\n   15.5.\
    \ FINGERPRINT ..............................................36\n   15.6. ERROR-CODE\
    \ ...............................................36\n   15.7. REALM ....................................................38\n\
    \   15.8. NONCE ....................................................38\n   15.9.\
    \ UNKNOWN-ATTRIBUTES .......................................38\n   15.10. SOFTWARE\
    \ ................................................39\n   15.11. ALTERNATE-SERVER\
    \ ........................................39\n"
- title: 16. Security Considerations .......................................39
  contents:
  - "16. Security Considerations .......................................39\n   16.1.\
    \ Attacks against the Protocol .............................39\n        16.1.1.\
    \ Outside Attacks ...................................39\n        16.1.2. Inside\
    \ Attacks ....................................40\n   16.2. Attacks Affecting the\
    \ Usage ..............................40\n        16.2.1. Attack I: Distributed\
    \ DoS (DDoS) against a\n                Target ............................................41\n\
    \        16.2.2. Attack II: Silencing a Client .....................41\n     \
    \   16.2.3. Attack III: Assuming the Identity of a Client .....42\n        16.2.4.\
    \ Attack IV: Eavesdropping ..........................42\n   16.3. Hash Agility\
    \ Plan ........................................42\n"
- title: 17. IAB Considerations ............................................42
  contents:
  - '17. IAB Considerations ............................................42

    '
- title: 18. IANA Considerations ...........................................43
  contents:
  - "18. IANA Considerations ...........................................43\n   18.1.\
    \ STUN Methods Registry ....................................43\n   18.2. STUN\
    \ Attribute Registry ..................................43\n   18.3. STUN Error\
    \ Code Registry .................................44\n   18.4. STUN UDP and TCP\
    \ Port Numbers ............................45\n"
- title: 19. Changes since RFC 3489 ........................................45
  contents:
  - '19. Changes since RFC 3489 ........................................45

    '
- title: 20. Contributors ..................................................47
  contents:
  - '20. Contributors ..................................................47

    '
- title: 21. Acknowledgements ..............................................47
  contents:
  - '21. Acknowledgements ..............................................47

    '
- title: 22. References ....................................................47
  contents:
  - "22. References ....................................................47\n   22.1.\
    \ Normative References .....................................47\n   22.2. Informative\
    \ References ...................................48\n"
- title: Appendix A. C Snippet to Determine STUN Message Types .............50
  contents:
  - 'Appendix A. C Snippet to Determine STUN Message Types .............50

    '
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The protocol defined in this specification, Session Traversal\n\
    \   Utilities for NAT, provides a tool for dealing with NATs.  It\n   provides\
    \ a means for an endpoint to determine the IP address and port\n   allocated by\
    \ a NAT that corresponds to its private IP address and\n   port.  It also provides\
    \ a way for an endpoint to keep a NAT binding\n   alive.  With some extensions,\
    \ the protocol can be used to do\n   connectivity checks between two endpoints\
    \ [MMUSIC-ICE], or to relay\n   packets between two endpoints [BEHAVE-TURN].\n\
    \   In keeping with its tool nature, this specification defines an\n   extensible\
    \ packet format, defines operation over several transport\n   protocols, and provides\
    \ for two forms of authentication.\n   STUN is intended to be used in context\
    \ of one or more NAT traversal\n   solutions.  These solutions are known as STUN\
    \ usages.  Each usage\n   describes how STUN is utilized to achieve the NAT traversal\
    \ solution.\n   Typically, a usage indicates when STUN messages get sent, which\n\
    \   optional attributes to include, what server is used, and what\n   authentication\
    \ mechanism is to be used.  Interactive Connectivity\n   Establishment (ICE) [MMUSIC-ICE]\
    \ is one usage of STUN.  SIP Outbound\n   [SIP-OUTBOUND] is another usage of STUN.\
    \  In some cases, a usage will\n   require extensions to STUN.  A STUN extension\
    \ can be in the form of\n   new methods, attributes, or error response codes.\
    \  More information\n   on STUN usages can be found in Section 14.\n"
- title: 2.  Evolution from RFC 3489
  contents:
  - "2.  Evolution from RFC 3489\n   STUN was originally defined in RFC 3489 [RFC3489].\
    \  That\n   specification, sometimes referred to as \"classic STUN\", represented\n\
    \   itself as a complete solution to the NAT traversal problem.  In that\n   solution,\
    \ a client would discover whether it was behind a NAT,\n   determine its NAT type,\
    \ discover its IP address and port on the\n   public side of the outermost NAT,\
    \ and then utilize that IP address\n   and port within the body of protocols,\
    \ such as the Session Initiation\n   Protocol (SIP) [RFC3261].  However, experience\
    \ since the publication\n   of RFC 3489 has found that classic STUN simply does\
    \ not work\n   sufficiently well to be a deployable solution.  The address and\
    \ port\n   learned through classic STUN are sometimes usable for communications\n\
    \   with a peer, and sometimes not.  Classic STUN provided no way to\n   discover\
    \ whether it would, in fact, work or not, and it provided no\n   remedy in cases\
    \ where it did not.  Furthermore, classic STUN's\n   algorithm for classification\
    \ of NAT types was found to be faulty, as\n   many NATs did not fit cleanly into\
    \ the types defined there.\n   Classic STUN also had a security vulnerability\
    \ -- attackers could\n   provide the client with incorrect mapped addresses under\
    \ certain\n   topologies and constraints, and this was fundamentally not solvable\n\
    \   through any cryptographic means.  Though this problem remains with\n   this\
    \ specification, those attacks are now mitigated through the use\n   of more complete\
    \ solutions that make use of STUN.\n   For these reasons, this specification obsoletes\
    \ RFC 3489, and instead\n   describes STUN as a tool that is utilized as part\
    \ of a complete NAT\n   traversal solution.  ICE [MMUSIC-ICE] is a complete NAT\
    \ traversal\n   solution for protocols based on the offer/answer [RFC3264]\n \
    \  methodology, such as SIP.  SIP Outbound [SIP-OUTBOUND] is a complete\n   solution\
    \ for traversal of SIP signaling, and it uses STUN in a very\n   different way.\
    \  Though it is possible that a protocol may be able to\n   use STUN by itself\
    \ (classic STUN) as a traversal solution, such usage\n   is not described here\
    \ and is strongly discouraged for the reasons\n   described above.\n   The on-the-wire\
    \ protocol described here is changed only slightly from\n   classic STUN.  The\
    \ protocol now runs over TCP in addition to UDP.\n   Extensibility was added to\
    \ the protocol in a more structured way.  A\n   magic cookie mechanism for demultiplexing\
    \ STUN with application\n   protocols was added by stealing 32 bits from the 128-bit\
    \ transaction\n   ID defined in RFC 3489, allowing the change to be backwards\n\
    \   compatible.  Mapped addresses are encoded using a new exclusive-or\n   format.\
    \  There are other, more minor changes.  See Section 19 for a\n   more complete\
    \ listing.\n   Due to the change in scope, STUN has also been renamed from \"\
    Simple\n   Traversal of UDP through NAT\" to \"Session Traversal Utilities for\n\
    \   NAT\".  The acronym remains STUN, which is all anyone ever remembers\n   anyway.\n"
- title: 3.  Overview of Operation
  contents:
  - "3.  Overview of Operation\n   This section is descriptive only.\n           \
    \                    /-----\\\n                             // STUN  \\\\\n  \
    \                          |   Server  |\n                             \\\\  \
    \     //\n                               \\-----/\n                          +--------------+\
    \             Public Internet\n          ................|     NAT 2    |.......................\n\
    \                          +--------------+\n                          +--------------+\
    \             Private NET 2\n          ................|     NAT 1    |.......................\n\
    \                          +--------------+\n                              /-----\\\
    \n                            //  STUN \\\\\n                           |    Client\
    \ |\n                            \\\\       //               Private NET 1\n \
    \                             \\-----/\n                 Figure 1: One Possible\
    \ STUN Configuration\n   One possible STUN configuration is shown in Figure 1.\
    \  In this\n   configuration, there are two entities (called STUN agents) that\n\
    \   implement the STUN protocol.  The lower agent in the figure is the\n   client,\
    \ and is connected to private network 1.  This network connects\n   to private\
    \ network 2 through NAT 1.  Private network 2 connects to\n   the public Internet\
    \ through NAT 2.  The upper agent in the figure is\n   the server, and resides\
    \ on the public Internet.\n   STUN is a client-server protocol.  It supports two\
    \ types of\n   transactions.  One is a request/response transaction in which a\n\
    \   client sends a request to a server, and the server returns a\n   response.\
    \  The second is an indication transaction in which either\n   agent -- client\
    \ or server -- sends an indication that generates no\n   response.  Both types\
    \ of transactions include a transaction ID, which\n   is a randomly selected 96-bit\
    \ number.  For request/response\n   transactions, this transaction ID allows the\
    \ client to associate the\n   response with the request that generated it; for\
    \ indications, the\n   transaction ID serves as a debugging aid.\n   All STUN\
    \ messages start with a fixed header that includes a method, a\n   class, and\
    \ the transaction ID.  The method indicates which of the\n   various requests\
    \ or indications this is; this specification defines\n   just one method, Binding,\
    \ but other methods are expected to be\n   defined in other documents.  The class\
    \ indicates whether this is a\n   request, a success response, an error response,\
    \ or an indication.\n   Following the fixed header comes zero or more attributes,\
    \ which are\n   Type-Length-Value extensions that convey additional information\
    \ for\n   the specific message.\n   This document defines a single method called\
    \ Binding.  The Binding\n   method can be used either in request/response transactions\
    \ or in\n   indication transactions.  When used in request/response transactions,\n\
    \   the Binding method can be used to determine the particular \"binding\"\n \
    \  a NAT has allocated to a STUN client.  When used in either request/\n   response\
    \ or in indication transactions, the Binding method can also\n   be used to keep\
    \ these \"bindings\" alive.\n   In the Binding request/response transaction, a\
    \ Binding request is\n   sent from a STUN client to a STUN server.  When the Binding\
    \ request\n   arrives at the STUN server, it may have passed through one or more\n\
    \   NATs between the STUN client and the STUN server (in Figure 1, there\n   were\
    \ two such NATs).  As the Binding request message passes through a\n   NAT, the\
    \ NAT will modify the source transport address (that is, the\n   source IP address\
    \ and the source port) of the packet.  As a result,\n   the source transport address\
    \ of the request received by the server\n   will be the public IP address and\
    \ port created by the NAT closest to\n   the server.  This is called a reflexive\
    \ transport address.  The STUN\n   server copies that source transport address\
    \ into an XOR-MAPPED-\n   ADDRESS attribute in the STUN Binding response and sends\
    \ the Binding\n   response back to the STUN client.  As this packet passes back\
    \ through\n   a NAT, the NAT will modify the destination transport address in\
    \ the\n   IP header, but the transport address in the XOR-MAPPED-ADDRESS\n   attribute\
    \ within the body of the STUN response will remain untouched.\n   In this way,\
    \ the client can learn its reflexive transport address\n   allocated by the outermost\
    \ NAT with respect to the STUN server.\n   In some usages, STUN must be multiplexed\
    \ with other protocols (e.g.,\n   [MMUSIC-ICE], [SIP-OUTBOUND]).  In these usages,\
    \ there must be a way\n   to inspect a packet and determine if it is a STUN packet\
    \ or not.\n   STUN provides three fields in the STUN header with fixed values\
    \ that\n   can be used for this purpose.  If this is not sufficient, then STUN\n\
    \   packets can also contain a FINGERPRINT value, which can further be\n   used\
    \ to distinguish the packets.\n   STUN defines a set of optional procedures that\
    \ a usage can decide to\n   use, called mechanisms.  These mechanisms include\
    \ DNS discovery, a\n   redirection technique to an alternate server, a fingerprint\
    \ attribute\n   for demultiplexing, and two authentication and message-integrity\n\
    \   exchanges.  The authentication mechanisms revolve around the use of a\n  \
    \ username, password, and message-integrity value.  Two authentication\n   mechanisms,\
    \ the long-term credential mechanism and the short-term\n   credential mechanism,\
    \ are defined in this specification.  Each usage\n   specifies the mechanisms\
    \ allowed with that usage.\n   In the long-term credential mechanism, the client\
    \ and server share a\n   pre-provisioned username and password and perform a digest\
    \ challenge/\n   response exchange inspired by (but differing in details) to the\
    \ one\n   defined for HTTP [RFC2617].  In the short-term credential mechanism,\n\
    \   the client and the server exchange a username and password through\n   some\
    \ out-of-band method prior to the STUN exchange.  For example, in\n   the ICE\
    \ usage [MMUSIC-ICE] the two endpoints use out-of-band\n   signaling to exchange\
    \ a username and password.  These are used to\n   integrity protect and authenticate\
    \ the request and response.  There\n   is no challenge or nonce used.\n"
- title: 4.  Terminology
  contents:
  - "4.  Terminology\n   In this document, the key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\",\n   \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\",\n   and \"OPTIONAL\" are to be interpreted as described in BCP 14,\
    \ RFC 2119\n   [RFC2119] and indicate requirement levels for compliant STUN\n\
    \   implementations.\n"
- title: 5.  Definitions
  contents:
  - "5.  Definitions\n   STUN Agent:  A STUN agent is an entity that implements the\
    \ STUN\n      protocol.  The entity can be either a STUN client or a STUN\n  \
    \    server.\n   STUN Client:  A STUN client is an entity that sends STUN requests\
    \ and\n      receives STUN responses.  A STUN client can also send indications.\n\
    \      In this specification, the terms STUN client and client are\n      synonymous.\n\
    \   STUN Server:  A STUN server is an entity that receives STUN requests\n   \
    \   and sends STUN responses.  A STUN server can also send\n      indications.\
    \  In this specification, the terms STUN server and\n      server are synonymous.\n\
    \   Transport Address:  The combination of an IP address and port number\n   \
    \   (such as a UDP or TCP port number).\n   Reflexive Transport Address:  A transport\
    \ address learned by a client\n      that identifies that client as seen by another\
    \ host on an IP\n      network, typically a STUN server.  When there is an intervening\n\
    \      NAT between the client and the other host, the reflexive transport\n  \
    \    address represents the mapped address allocated to the client on\n      the\
    \ public side of the NAT.  Reflexive transport addresses are\n      learned from\
    \ the mapped address attribute (MAPPED-ADDRESS or XOR-\n      MAPPED-ADDRESS)\
    \ in STUN responses.\n   Mapped Address:  Same meaning as reflexive address. \
    \ This term is\n      retained only for historic reasons and due to the naming\
    \ of the\n      MAPPED-ADDRESS and XOR-MAPPED-ADDRESS attributes.\n   Long-Term\
    \ Credential:  A username and associated password that\n      represent a shared\
    \ secret between client and server.  Long-term\n      credentials are generally\
    \ granted to the client when a subscriber\n      enrolls in a service and persist\
    \ until the subscriber leaves the\n      service or explicitly changes the credential.\n\
    \   Long-Term Password:  The password from a long-term credential.\n   Short-Term\
    \ Credential:  A temporary username and associated password\n      that represent\
    \ a shared secret between client and server.  Short-\n      term credentials are\
    \ obtained through some kind of protocol\n      mechanism between the client and\
    \ server, preceding the STUN\n      exchange.  A short-term credential has an\
    \ explicit temporal scope,\n      which may be based on a specific amount of time\
    \ (such as 5\n      minutes) or on an event (such as termination of a SIP dialog).\n\
    \      The specific scope of a short-term credential is defined by the\n     \
    \ application usage.\n   Short-Term Password:  The password component of a short-term\n\
    \      credential.\n   STUN Indication:  A STUN message that does not receive\
    \ a response.\n   Attribute:  The STUN term for a Type-Length-Value (TLV) object\
    \ that\n      can be added to a STUN message.  Attributes are divided into two\n\
    \      types: comprehension-required and comprehension-optional.  STUN\n     \
    \ agents can safely ignore comprehension-optional attributes they\n      don't\
    \ understand, but cannot successfully process a message if it\n      contains\
    \ comprehension-required attributes that are not\n      understood.\n   RTO: \
    \ Retransmission TimeOut, which defines the initial period of\n      time between\
    \ transmission of a request and the first retransmit of\n      that request.\n"
- title: 6.  STUN Message Structure
  contents:
  - "6.  STUN Message Structure\n   STUN messages are encoded in binary using network-oriented\
    \ format\n   (most significant byte or octet first, also commonly known as big-\n\
    \   endian).  The transmission order is described in detail in Appendix B\n  \
    \ of RFC 791 [RFC0791].  Unless otherwise noted, numeric constants are\n   in\
    \ decimal (base 10).\n   All STUN messages MUST start with a 20-byte header followed\
    \ by zero\n   or more Attributes.  The STUN header contains a STUN message type,\n\
    \   magic cookie, transaction ID, and message length.\n       0              \
    \     1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |0 0|     STUN Message Type     |         Message Length        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                         Magic Cookie                          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   |                     Transaction ID (96 bits)                  |\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                  Figure 2: Format of STUN Message Header\n   The most significant\
    \ 2 bits of every STUN message MUST be zeroes.\n   This can be used to differentiate\
    \ STUN packets from other protocols\n   when STUN is multiplexed with other protocols\
    \ on the same port.\n   The message type defines the message class (request, success\n\
    \   response, failure response, or indication) and the message method\n   (the\
    \ primary function) of the STUN message.  Although there are four\n   message\
    \ classes, there are only two types of transactions in STUN:\n   request/response\
    \ transactions (which consist of a request message and\n   a response message)\
    \ and indication transactions (which consist of a\n   single indication message).\
    \  Response classes are split into error\n   and success responses to aid in quickly\
    \ processing the STUN message.\n   The message type field is decomposed further\
    \ into the following\n   structure:\n                        0               \
    \  1\n                        2  3  4 5 6 7 8 9 0 1 2 3 4 5\n                \
    \       +--+--+-+-+-+-+-+-+-+-+-+-+-+-+\n                       |M |M |M|M|M|C|M|M|M|C|M|M|M|M|\n\
    \                       |11|10|9|8|7|1|6|5|4|0|3|2|1|0|\n                    \
    \   +--+--+-+-+-+-+-+-+-+-+-+-+-+-+\n                Figure 3: Format of STUN\
    \ Message Type Field\n   Here the bits in the message type field are shown as\
    \ most significant\n   (M11) through least significant (M0).  M11 through M0 represent\
    \ a 12-\n   bit encoding of the method.  C1 and C0 represent a 2-bit encoding\
    \ of\n   the class.  A class of 0b00 is a request, a class of 0b01 is an\n   indication,\
    \ a class of 0b10 is a success response, and a class of\n   0b11 is an error response.\
    \  This specification defines a single\n   method, Binding.  The method and class\
    \ are orthogonal, so that for\n   each method, a request, success response, error\
    \ response, and\n   indication are possible for that method.  Extensions defining\
    \ new\n   methods MUST indicate which classes are permitted for that method.\n\
    \   For example, a Binding request has class=0b00 (request) and\n   method=0b000000000001\
    \ (Binding) and is encoded into the first 16 bits\n   as 0x0001.  A Binding response\
    \ has class=0b10 (success response) and\n   method=0b000000000001, and is encoded\
    \ into the first 16 bits as\n   0x0101.\n      Note: This unfortunate encoding\
    \ is due to assignment of values in\n      [RFC3489] that did not consider encoding\
    \ Indications, Success, and\n      Errors using bit fields.\n   The magic cookie\
    \ field MUST contain the fixed value 0x2112A442 in\n   network byte order.  In\
    \ RFC 3489 [RFC3489], this field was part of\n   the transaction ID; placing the\
    \ magic cookie in this location allows\n   a server to detect if the client will\
    \ understand certain attributes\n   that were added in this revised specification.\
    \  In addition, it aids\n   in distinguishing STUN packets from packets of other\
    \ protocols when\n   STUN is multiplexed with those other protocols on the same\
    \ port.\n   The transaction ID is a 96-bit identifier, used to uniquely identify\n\
    \   STUN transactions.  For request/response transactions, the\n   transaction\
    \ ID is chosen by the STUN client for the request and\n   echoed by the server\
    \ in the response.  For indications, it is chosen\n   by the agent sending the\
    \ indication.  It primarily serves to\n   correlate requests with responses, though\
    \ it also plays a small role\n   in helping to prevent certain types of attacks.\
    \  The server also uses\n   the transaction ID as a key to identify each transaction\
    \ uniquely\n   across all clients.  As such, the transaction ID MUST be uniformly\n\
    \   and randomly chosen from the interval 0 .. 2**96-1, and SHOULD be\n   cryptographically\
    \ random.  Resends of the same request reuse the same\n   transaction ID, but\
    \ the client MUST choose a new transaction ID for\n   new transactions unless\
    \ the new request is bit-wise identical to the\n   previous request and sent from\
    \ the same transport address to the same\n   IP address.  Success and error responses\
    \ MUST carry the same\n   transaction ID as their corresponding request.  When\
    \ an agent is\n   acting as a STUN server and STUN client on the same port, the\n\
    \   transaction IDs in requests sent by the agent have no relationship to\n  \
    \ the transaction IDs in requests received by the agent.\n   The message length\
    \ MUST contain the size, in bytes, of the message\n   not including the 20-byte\
    \ STUN header.  Since all STUN attributes are\n   padded to a multiple of 4 bytes,\
    \ the last 2 bits of this field are\n   always zero.  This provides another way\
    \ to distinguish STUN packets\n   from packets of other protocols.\n   Following\
    \ the STUN fixed portion of the header are zero or more\n   attributes.  Each\
    \ attribute is TLV (Type-Length-Value) encoded.  The\n   details of the encoding,\
    \ and of the attributes themselves are given\n   in Section 15.\n"
- title: 7.  Base Protocol Procedures
  contents:
  - "7.  Base Protocol Procedures\n   This section defines the base procedures of\
    \ the STUN protocol.  It\n   describes how messages are formed, how they are sent,\
    \ and how they\n   are processed when they are received.  It also defines the\
    \ detailed\n   processing of the Binding method.  Other sections in this document\n\
    \   describe optional procedures that a usage may elect to use in certain\n  \
    \ situations.  Other documents may define other extensions to STUN, by\n   adding\
    \ new methods, new attributes, or new error response codes.\n"
- title: 7.1.  Forming a Request or an Indication
  contents:
  - "7.1.  Forming a Request or an Indication\n   When formulating a request or indication\
    \ message, the agent MUST\n   follow the rules in Section 6 when creating the\
    \ header.  In addition,\n   the message class MUST be either \"Request\" or \"\
    Indication\" (as\n   appropriate), and the method must be either Binding or some\
    \ method\n   defined in another document.\n   The agent then adds any attributes\
    \ specified by the method or the\n   usage.  For example, some usages may specify\
    \ that the agent use an\n   authentication method (Section 10) or the FINGERPRINT\
    \ attribute\n   (Section 8).\n   If the agent is sending a request, it SHOULD\
    \ add a SOFTWARE attribute\n   to the request.  Agents MAY include a SOFTWARE\
    \ attribute in\n   indications, depending on the method.  Extensions to STUN should\n\
    \   discuss whether SOFTWARE is useful in new indications.\n   For the Binding\
    \ method with no authentication, no attributes are\n   required unless the usage\
    \ specifies otherwise.\n   All STUN messages sent over UDP SHOULD be less than\
    \ the path MTU, if\n   known.  If the path MTU is unknown, messages SHOULD be\
    \ the smaller of\n   576 bytes and the first-hop MTU for IPv4 [RFC1122] and 1280\
    \ bytes for\n   IPv6 [RFC2460].  This value corresponds to the overall size of\
    \ the IP\n   packet.  Consequently, for IPv4, the actual STUN message would need\n\
    \   to be less than 548 bytes (576 minus 20-byte IP header, minus 8-byte\n   UDP\
    \ header, assuming no IP options are used).  STUN provides no\n   ability to handle\
    \ the case where the request is under the MTU but the\n   response would be larger\
    \ than the MTU.  It is not envisioned that\n   this limitation will be an issue\
    \ for STUN.  The MTU limitation is a\n   SHOULD, and not a MUST, to account for\
    \ cases where STUN itself is\n   being used to probe for MTU characteristics [BEHAVE-NAT].\
    \  Outside of\n   this or similar applications, the MTU constraint MUST be followed.\n"
- title: 7.2.  Sending the Request or Indication
  contents:
  - "7.2.  Sending the Request or Indication\n   The agent then sends the request\
    \ or indication.  This document\n   specifies how to send STUN messages over UDP,\
    \ TCP, or TLS-over-TCP;\n   other transport protocols may be added in the future.\
    \  The STUN usage\n   must specify which transport protocol is used, and how the\
    \ agent\n   determines the IP address and port of the recipient.  Section 9\n\
    \   describes a DNS-based method of determining the IP address and port\n   of\
    \ a server that a usage may elect to use.  STUN may be used with\n   anycast addresses,\
    \ but only with UDP and in usages where\n   authentication is not used.\n   At\
    \ any time, a client MAY have multiple outstanding STUN requests\n   with the\
    \ same STUN server (that is, multiple transactions in\n   progress, with different\
    \ transaction IDs).  Absent other limits to\n   the rate of new transactions (such\
    \ as those specified by ICE for\n   connectivity checks or when STUN is run over\
    \ TCP), a client SHOULD\n   space new transactions to a server by RTO and SHOULD\
    \ limit itself to\n   ten outstanding transactions to the same server.\n"
- title: 7.2.1.  Sending over UDP
  contents:
  - "7.2.1.  Sending over UDP\n   When running STUN over UDP, it is possible that\
    \ the STUN message\n   might be dropped by the network.  Reliability of STUN request/\n\
    \   response transactions is accomplished through retransmissions of the\n   request\
    \ message by the client application itself.  STUN indications\n   are not retransmitted;\
    \ thus, indication transactions over UDP are not\n   reliable.\n   A client SHOULD\
    \ retransmit a STUN request message starting with an\n   interval of RTO (\"Retransmission\
    \ TimeOut\"), doubling after each\n   retransmission.  The RTO is an estimate\
    \ of the round-trip time (RTT),\n   and is computed as described in RFC 2988 [RFC2988],\
    \ with two\n   exceptions.  First, the initial value for RTO SHOULD be configurable\n\
    \   (rather than the 3 s recommended in RFC 2988) and SHOULD be greater\n   than\
    \ 500 ms.  The exception cases for this \"SHOULD\" are when other\n   mechanisms\
    \ are used to derive congestion thresholds (such as the ones\n   defined in ICE\
    \ for fixed rate streams), or when STUN is used in non-\n   Internet environments\
    \ with known network capacities.  In fixed-line\n   access links, a value of 500\
    \ ms is RECOMMENDED.  Second, the value of\n   RTO SHOULD NOT be rounded up to\
    \ the nearest second.  Rather, a 1 ms\n   accuracy SHOULD be maintained.  As with\
    \ TCP, the usage of Karn's\n   algorithm is RECOMMENDED [KARN87].  When applied\
    \ to STUN, it means\n   that RTT estimates SHOULD NOT be computed from STUN transactions\
    \ that\n   result in the retransmission of a request.\n   The value for RTO SHOULD\
    \ be cached by a client after the completion\n   of the transaction, and used\
    \ as the starting value for RTO for the\n   next transaction to the same server\
    \ (based on equality of IP\n   address).  The value SHOULD be considered stale\
    \ and discarded after\n   10 minutes.\n   Retransmissions continue until a response\
    \ is received, or until a\n   total of Rc requests have been sent.  Rc SHOULD\
    \ be configurable and\n   SHOULD have a default of 7.  If, after the last request,\
    \ a duration\n   equal to Rm times the RTO has passed without a response (providing\n\
    \   ample time to get a response if only this final request actually\n   succeeds),\
    \ the client SHOULD consider the transaction to have failed.\n   Rm SHOULD be\
    \ configurable and SHOULD have a default of 16.  A STUN\n   transaction over UDP\
    \ is also considered failed if there has been a\n   hard ICMP error [RFC1122].\
    \  For example, assuming an RTO of 500 ms,\n   requests would be sent at times\
    \ 0 ms, 500 ms, 1500 ms, 3500 ms, 7500\n   ms, 15500 ms, and 31500 ms.  If the\
    \ client has not received a\n   response after 39500 ms, the client will consider\
    \ the transaction to\n   have timed out.\n"
- title: 7.2.2.  Sending over TCP or TLS-over-TCP
  contents:
  - "7.2.2.  Sending over TCP or TLS-over-TCP\n   For TCP and TLS-over-TCP, the client\
    \ opens a TCP connection to the\n   server.\n   In some usages of STUN, STUN is\
    \ sent as the only protocol over the\n   TCP connection.  In this case, it can\
    \ be sent without the aid of any\n   additional framing or demultiplexing.  In\
    \ other usages, or with other\n   extensions, it may be multiplexed with other\
    \ data over a TCP\n   connection.  In that case, STUN MUST be run on top of some\
    \ kind of\n   framing protocol, specified by the usage or extension, which allows\n\
    \   for the agent to extract complete STUN messages and complete\n   application\
    \ layer messages.  The STUN service running on the well-\n   known port or ports\
    \ discovered through the DNS procedures in\n   Section 9 is for STUN alone, and\
    \ not for STUN multiplexed with other\n   data.  Consequently, no framing protocols\
    \ are used in connections to\n   those servers.  When additional framing is utilized,\
    \ the usage will\n   specify how the client knows to apply it and what port to\
    \ connect to.\n   For example, in the case of ICE connectivity checks, this information\n\
    \   is learned through out-of-band negotiation between client and server.\n  \
    \ When STUN is run by itself over TLS-over-TCP, the\n   TLS_RSA_WITH_AES_128_CBC_SHA\
    \ ciphersuite MUST be implemented at a\n   minimum.  Implementations MAY also\
    \ support any other ciphersuite.\n   When it receives the TLS Certificate message,\
    \ the client SHOULD\n   verify the certificate and inspect the site identified\
    \ by the\n   certificate.  If the certificate is invalid or revoked, or if it\
    \ does\n   not identify the appropriate party, the client MUST NOT send the STUN\n\
    \   message or otherwise proceed with the STUN transaction.  The client\n   MUST\
    \ verify the identity of the server.  To do that, it follows the\n   identification\
    \ procedures defined in Section 3.1 of RFC 2818\n   [RFC2818].  Those procedures\
    \ assume the client is dereferencing a\n   URI.  For purposes of usage with this\
    \ specification, the client\n   treats the domain name or IP address used in Section\
    \ 8.1 as the host\n   portion of the URI that has been dereferenced.  Alternatively,\
    \ a\n   client MAY be configured with a set of domains or IP addresses that\n\
    \   are trusted; if a certificate is received that identifies one of\n   those\
    \ domains or IP addresses, the client considers the identity of\n   the server\
    \ to be verified.\n   When STUN is run multiplexed with other protocols over a\
    \ TLS-over-TCP\n   connection, the mandatory ciphersuites and TLS handling procedures\n\
    \   operate as defined by those protocols.\n   Reliability of STUN over TCP and\
    \ TLS-over-TCP is handled by TCP\n   itself, and there are no retransmissions\
    \ at the STUN protocol level.\n   However, for a request/response transaction,\
    \ if the client has not\n   received a response by Ti seconds after it sent the\
    \ SYN to establish\n   the connection, it considers the transaction to have timed\
    \ out.  Ti\n   SHOULD be configurable and SHOULD have a default of 39.5s.  This\n\
    \   value has been chosen to equalize the TCP and UDP timeouts for the\n   default\
    \ initial RTO.\n   In addition, if the client is unable to establish the TCP connection,\n\
    \   or the TCP connection is reset or fails before a response is\n   received,\
    \ any request/response transaction in progress is considered\n   to have failed.\n\
    \   The client MAY send multiple transactions over a single TCP (or TLS-\n   over-TCP)\
    \ connection, and it MAY send another request before\n   receiving a response\
    \ to the previous.  The client SHOULD keep the\n   connection open until it:\n\
    \   o  has no further STUN requests or indications to send over that\n      connection,\
    \ and\n   o  has no plans to use any resources (such as a mapped address\n   \
    \   (MAPPED-ADDRESS or XOR-MAPPED-ADDRESS) or relayed address\n      [BEHAVE-TURN])\
    \ that were learned though STUN requests sent over\n      that connection, and\n\
    \   o  if multiplexing other application protocols over that port, has\n     \
    \ finished using that other application, and\n   o  if using that learned port\
    \ with a remote peer, has established\n      communications with that remote peer,\
    \ as is required by some TCP\n      NAT traversal techniques (e.g., [MMUSIC-ICE-TCP]).\n\
    \   At the server end, the server SHOULD keep the connection open, and\n   let\
    \ the client close it, unless the server has determined that the\n   connection\
    \ has timed out (for example, due to the client\n   disconnecting from the network).\
    \  Bindings learned by the client will\n   remain valid in intervening NATs only\
    \ while the connection remains\n   open.  Only the client knows how long it needs\
    \ the binding.  The\n   server SHOULD NOT close a connection if a request was\
    \ received over\n   that connection for which a response was not sent.  A server\
    \ MUST NOT\n   ever open a connection back towards the client in order to send\
    \ a\n   response.  Servers SHOULD follow best practices regarding connection\n\
    \   management in cases of overload.\n"
- title: 7.3.  Receiving a STUN Message
  contents:
  - "7.3.  Receiving a STUN Message\n   This section specifies the processing of a\
    \ STUN message.  The\n   processing specified here is for STUN messages as defined\
    \ in this\n   specification; additional rules for backwards compatibility are\n\
    \   defined in Section 12.  Those additional procedures are optional, and\n  \
    \ usages can elect to utilize them.  First, a set of processing\n   operations\
    \ is applied that is independent of the class.  This is\n   followed by class-specific\
    \ processing, described in the subsections\n   that follow.\n   When a STUN agent\
    \ receives a STUN message, it first checks that the\n   message obeys the rules\
    \ of Section 6.  It checks that the first two\n   bits are 0, that the magic cookie\
    \ field has the correct value, that\n   the message length is sensible, and that\
    \ the method value is a\n   supported method.  It checks that the message class\
    \ is allowed for\n   the particular method.  If the message class is \"Success\
    \ Response\" or\n   \"Error Response\", the agent checks that the transaction\
    \ ID matches a\n   transaction that is still in progress.  If the FINGERPRINT\
    \ extension\n   is being used, the agent checks that the FINGERPRINT attribute\
    \ is\n   present and contains the correct value.  If any errors are detected,\n\
    \   the message is silently discarded.  In the case when STUN is being\n   multiplexed\
    \ with another protocol, an error may indicate that this is\n   not really a STUN\
    \ message; in this case, the agent should try to\n   parse the message as a different\
    \ protocol.\n   The STUN agent then does any checks that are required by a\n \
    \  authentication mechanism that the usage has specified (see\n   Section 10).\n\
    \   Once the authentication checks are done, the STUN agent checks for\n   unknown\
    \ attributes and known-but-unexpected attributes in the\n   message.  Unknown\
    \ comprehension-optional attributes MUST be ignored\n   by the agent.  Known-but-unexpected\
    \ attributes SHOULD be ignored by\n   the agent.  Unknown comprehension-required\
    \ attributes cause\n   processing that depends on the message class and is described\
    \ below.\n   At this point, further processing depends on the message class of\
    \ the\n   request.\n"
- title: 7.3.1.  Processing a Request
  contents:
  - "7.3.1.  Processing a Request\n   If the request contains one or more unknown\
    \ comprehension-required\n   attributes, the server replies with an error response\
    \ with an error\n   code of 420 (Unknown Attribute), and includes an UNKNOWN-ATTRIBUTES\n\
    \   attribute in the response that lists the unknown comprehension-\n   required\
    \ attributes.\n   The server then does any additional checking that the method\
    \ or the\n   specific usage requires.  If all the checks succeed, the server\n\
    \   formulates a success response as described below.\n   When run over UDP, a\
    \ request received by the server could be the\n   first request of a transaction,\
    \ or a retransmission.  The server MUST\n   respond to retransmissions such that\
    \ the following property is\n   preserved: if the client receives the response\
    \ to the retransmission\n   and not the response that was sent to the original\
    \ request, the\n   overall state on the client and server is identical to the\
    \ case where\n   only the response to the original retransmission is received,\
    \ or\n   where both responses are received (in which case the client will use\n\
    \   the first).  The easiest way to meet this requirement is for the\n   server\
    \ to remember all transaction IDs received over UDP and their\n   corresponding\
    \ responses in the last 40 seconds.  However, this\n   requires the server to\
    \ hold state, and will be inappropriate for any\n   requests which are not authenticated.\
    \  Another way is to reprocess\n   the request and recompute the response.  The\
    \ latter technique MUST\n   only be applied to requests that are idempotent (a\
    \ request is\n   considered idempotent when the same request can be safely repeated\n\
    \   without impacting the overall state of the system) and result in the\n   same\
    \ success response for the same request.  The Binding method is\n   considered\
    \ to be idempotent.  Note that there are certain rare\n   network events that\
    \ could cause the reflexive transport address value\n   to change, resulting in\
    \ a different mapped address in different\n   success responses.  Extensions to\
    \ STUN MUST discuss the implications\n   of request retransmissions on servers\
    \ that do not store transaction\n   state.\n"
- title: 7.3.1.1.  Forming a Success or Error Response
  contents:
  - "7.3.1.1.  Forming a Success or Error Response\n   When forming the response (success\
    \ or error), the server follows the\n   rules of Section 6.  The method of the\
    \ response is the same as that\n   of the request, and the message class is either\
    \ \"Success Response\" or\n   \"Error Response\".\n   For an error response, the\
    \ server MUST add an ERROR-CODE attribute\n   containing the error code specified\
    \ in the processing above.  The\n   reason phrase is not fixed, but SHOULD be\
    \ something suitable for the\n   error code.  For certain errors, additional attributes\
    \ are added to\n   the message.  These attributes are spelled out in the description\n\
    \   where the error code is specified.  For example, for an error code of\n  \
    \ 420 (Unknown Attribute), the server MUST include an UNKNOWN-\n   ATTRIBUTES\
    \ attribute.  Certain authentication errors also cause\n   attributes to be added\
    \ (see Section 10).  Extensions may define other\n   errors and/or additional\
    \ attributes to add in error cases.\n   If the server authenticated the request\
    \ using an authentication\n   mechanism, then the server SHOULD add the appropriate\
    \ authentication\n   attributes to the response (see Section 10).\n   The server\
    \ also adds any attributes required by the specific method\n   or usage.  In addition,\
    \ the server SHOULD add a SOFTWARE attribute to\n   the message.\n   For the Binding\
    \ method, no additional checking is required unless the\n   usage specifies otherwise.\
    \  When forming the success response, the\n   server adds a XOR-MAPPED-ADDRESS\
    \ attribute to the response, where the\n   contents of the attribute are the source\
    \ transport address of the\n   request message.  For UDP, this is the source IP\
    \ address and source\n   UDP port of the request message.  For TCP and TLS-over-TCP,\
    \ this is\n   the source IP address and source TCP port of the TCP connection\
    \ as\n   seen by the server.\n"
- title: 7.3.1.2.  Sending the Success or Error Response
  contents:
  - "7.3.1.2.  Sending the Success or Error Response\n   The response (success or\
    \ error) is sent over the same transport as\n   the request was received on. \
    \ If the request was received over UDP,\n   the destination IP address and port\
    \ of the response are the source IP\n   address and port of the received request\
    \ message, and the source IP\n   address and port of the response are equal to\
    \ the destination IP\n   address and port of the received request message.  If\
    \ the request was\n   received over TCP or TLS-over-TCP, the response is sent\
    \ back on the\n   same TCP connection as the request was received on.\n"
- title: 7.3.2.  Processing an Indication
  contents:
  - "7.3.2.  Processing an Indication\n   If the indication contains unknown comprehension-required\
    \ attributes,\n   the indication is discarded and processing ceases.\n   The agent\
    \ then does any additional checking that the method or the\n   specific usage\
    \ requires.  If all the checks succeed, the agent then\n   processes the indication.\
    \  No response is generated for an\n   indication.\n   For the Binding method,\
    \ no additional checking or processing is\n   required, unless the usage specifies\
    \ otherwise.  The mere receipt of\n   the message by the agent has refreshed the\
    \ \"bindings\" in the\n   intervening NATs.\n   Since indications are not re-transmitted\
    \ over UDP (unlike requests),\n   there is no need to handle re-transmissions\
    \ of indications at the\n   sending agent.\n"
- title: 7.3.3.  Processing a Success Response
  contents:
  - "7.3.3.  Processing a Success Response\n   If the success response contains unknown\
    \ comprehension-required\n   attributes, the response is discarded and the transaction\
    \ is\n   considered to have failed.\n   The client then does any additional checking\
    \ that the method or the\n   specific usage requires.  If all the checks succeed,\
    \ the client then\n   processes the success response.\n   For the Binding method,\
    \ the client checks that the XOR-MAPPED-ADDRESS\n   attribute is present in the\
    \ response.  The client checks the address\n   family specified.  If it is an\
    \ unsupported address family, the\n   attribute SHOULD be ignored.  If it is an\
    \ unexpected but supported\n   address family (for example, the Binding transaction\
    \ was sent over\n   IPv4, but the address family specified is IPv6), then the\
    \ client MAY\n   accept and use the value.\n"
- title: 7.3.4.  Processing an Error Response
  contents:
  - "7.3.4.  Processing an Error Response\n   If the error response contains unknown\
    \ comprehension-required\n   attributes, or if the error response does not contain\
    \ an ERROR-CODE\n   attribute, then the transaction is simply considered to have\
    \ failed.\n   The client then does any processing specified by the authentication\n\
    \   mechanism (see Section 10).  This may result in a new transaction\n   attempt.\n\
    \   The processing at this point depends on the error code, the method,\n   and\
    \ the usage; the following are the default rules:\n   o  If the error code is\
    \ 300 through 399, the client SHOULD consider\n      the transaction as failed\
    \ unless the ALTERNATE-SERVER extension is\n      being used.  See Section 11.\n\
    \   o  If the error code is 400 through 499, the client declares the\n      transaction\
    \ failed; in the case of 420 (Unknown Attribute), the\n      response should contain\
    \ a UNKNOWN-ATTRIBUTES attribute that gives\n      additional information.\n \
    \  o  If the error code is 500 through 599, the client MAY resend the\n      request;\
    \ clients that do so MUST limit the number of times they do\n      this.\n   Any\
    \ other error code causes the client to consider the transaction\n   failed.\n"
- title: 8.  FINGERPRINT Mechanism
  contents:
  - "8.  FINGERPRINT Mechanism\n   This section describes an optional mechanism for\
    \ STUN that aids in\n   distinguishing STUN messages from packets of other protocols\
    \ when the\n   two are multiplexed on the same transport address.  This mechanism\
    \ is\n   optional, and a STUN usage must describe if and when it is used.  The\n\
    \   FINGERPRINT mechanism is not backwards compatible with RFC 3489, and\n   cannot\
    \ be used in environments where such compatibility is required.\n   In some usages,\
    \ STUN messages are multiplexed on the same transport\n   address as other protocols,\
    \ such as the Real Time Transport Protocol\n   (RTP).  In order to apply the processing\
    \ described in Section 7, STUN\n   messages must first be separated from the application\
    \ packets.\n   Section 6 describes three fixed fields in the STUN header that\
    \ can be\n   used for this purpose.  However, in some cases, these three fixed\n\
    \   fields may not be sufficient.\n   When the FINGERPRINT extension is used,\
    \ an agent includes the\n   FINGERPRINT attribute in messages it sends to another\
    \ agent.\n   Section 15.5 describes the placement and value of this attribute.\n\
    \   When the agent receives what it believes is a STUN message, then, in\n   addition\
    \ to other basic checks, the agent also checks that the\n   message contains a\
    \ FINGERPRINT attribute and that the attribute\n   contains the correct value.\
    \  Section 7.3 describes when in the\n   overall processing of a STUN message\
    \ the FINGERPRINT check is\n   performed.  This additional check helps the agent\
    \ detect messages of\n   other protocols that might otherwise seem to be STUN\
    \ messages.\n"
- title: 9.  DNS Discovery of a Server
  contents:
  - "9.  DNS Discovery of a Server\n   This section describes an optional procedure\
    \ for STUN that allows a\n   client to use DNS to determine the IP address and\
    \ port of a server.\n   A STUN usage must describe if and when this extension\
    \ is used.  To\n   use this procedure, the client must know a server's domain\
    \ name and a\n   service name; the usage must also describe how the client obtains\n\
    \   these.  Hard-coding the domain name of the server into software is\n   NOT\
    \ RECOMMENDED in case the domain name is lost or needs to change\n   for legal\
    \ or other reasons.\n   When a client wishes to locate a STUN server in the public\
    \ Internet\n   that accepts Binding request/response transactions, the SRV service\n\
    \   name is \"stun\".  When it wishes to locate a STUN server that accepts\n \
    \  Binding request/response transactions over a TLS session, the SRV\n   service\
    \ name is \"stuns\".  STUN usages MAY define additional DNS SRV\n   service names.\n\
    \   The domain name is resolved to a transport address using the SRV\n   procedures\
    \ specified in [RFC2782].  The DNS SRV service name is the\n   service name provided\
    \ as input to this procedure.  The protocol in\n   the SRV lookup is the transport\
    \ protocol the client will run STUN\n   over: \"udp\" for UDP and \"tcp\" for\
    \ TCP.  Note that only \"tcp\" is\n   defined with \"stuns\" at this time.\n \
    \  The procedures of RFC 2782 are followed to determine the server to\n   contact.\
    \  RFC 2782 spells out the details of how a set of SRV records\n   is sorted and\
    \ then tried.  However, RFC 2782 only states that the\n   client should \"try\
    \ to connect to the (protocol, address, service)\"\n   without giving any details\
    \ on what happens in the event of failure.\n   When following these procedures,\
    \ if the STUN transaction times out\n   without receipt of a response, the client\
    \ SHOULD retry the request to\n   the next server in the ordered defined by RFC\
    \ 2782.  Such a retry is\n   only possible for request/response transmissions,\
    \ since indication\n   transactions generate no response or timeout.\n   The default\
    \ port for STUN requests is 3478, for both TCP and UDP.\n   Administrators of\
    \ STUN servers SHOULD use this port in their SRV\n   records for UDP and TCP.\
    \  In all cases, the port in DNS MUST reflect\n   the one on which the server\
    \ is listening.  The default port for STUN\n   over TLS is 5349.  Servers can\
    \ run STUN over TLS on the same port as\n   STUN over TCP if the server software\
    \ supports determining whether the\n   initial message is a TLS or STUN message.\n\
    \   If no SRV records were found, the client performs an A or AAAA record\n  \
    \ lookup of the domain name.  The result will be a list of IP\n   addresses, each\
    \ of which can be contacted at the default port using\n   UDP or TCP, independent\
    \ of the STUN usage.  For usages that require\n   TLS, the client connects to\
    \ one of the IP addresses using the default\n   STUN over TLS port.\n"
- title: 10.  Authentication and Message-Integrity Mechanisms
  contents:
  - "10.  Authentication and Message-Integrity Mechanisms\n   This section defines\
    \ two mechanisms for STUN that a client and server\n   can use to provide authentication\
    \ and message integrity; these two\n   mechanisms are known as the short-term\
    \ credential mechanism and the\n   long-term credential mechanism.  These two\
    \ mechanisms are optional,\n   and each usage must specify if and when these mechanisms\
    \ are used.\n   Consequently, both clients and servers will know which mechanism\
    \ (if\n   any) to follow based on knowledge of which usage applies.  For\n   example,\
    \ a STUN server on the public Internet supporting ICE would\n   have no authentication,\
    \ whereas the STUN server functionality in an\n   agent supporting connectivity\
    \ checks would utilize short-term\n   credentials.  An overview of these two mechanisms\
    \ is given in\n   Section 3.\n   Each mechanism specifies the additional processing\
    \ required to use\n   that mechanism, extending the processing specified in Section\
    \ 7.  The\n   additional processing occurs in three different places: when forming\n\
    \   a message, when receiving a message immediately after the basic\n   checks\
    \ have been performed, and when doing the detailed processing of\n   error responses.\n"
- title: 10.1.  Short-Term Credential Mechanism
  contents:
  - "10.1.  Short-Term Credential Mechanism\n   The short-term credential mechanism\
    \ assumes that, prior to the STUN\n   transaction, the client and server have\
    \ used some other protocol to\n   exchange a credential in the form of a username\
    \ and password.  This\n   credential is time-limited.  The time limit is defined\
    \ by the usage.\n   As an example, in the ICE usage [MMUSIC-ICE], the two endpoints\
    \ use\n   out-of-band signaling to agree on a username and password, and this\n\
    \   username and password are applicable for the duration of the media\n   session.\n\
    \   This credential is used to form a message-integrity check in each\n   request\
    \ and in many responses.  There is no challenge and response as\n   in the long-term\
    \ mechanism; consequently, replay is prevented by\n   virtue of the time-limited\
    \ nature of the credential.\n"
- title: 10.1.1.  Forming a Request or Indication
  contents:
  - "10.1.1.  Forming a Request or Indication\n   For a request or indication message,\
    \ the agent MUST include the\n   USERNAME and MESSAGE-INTEGRITY attributes in\
    \ the message.  The HMAC\n   for the MESSAGE-INTEGRITY attribute is computed as\
    \ described in\n   Section 15.4.  Note that the password is never included in\
    \ the\n   request or indication.\n"
- title: 10.1.2.  Receiving a Request or Indication
  contents:
  - "10.1.2.  Receiving a Request or Indication\n   After the agent has done the basic\
    \ processing of a message, the agent\n   performs the checks listed below in order\
    \ specified:\n   o  If the message does not contain both a MESSAGE-INTEGRITY and\
    \ a\n      USERNAME attribute:\n      *  If the message is a request, the server\
    \ MUST reject the request\n         with an error response.  This response MUST\
    \ use an error code\n         of 400 (Bad Request).\n      *  If the message is\
    \ an indication, the agent MUST silently\n         discard the indication.\n \
    \  o  If the USERNAME does not contain a username value currently valid\n    \
    \  within the server:\n      *  If the message is a request, the server MUST reject\
    \ the request\n         with an error response.  This response MUST use an error\
    \ code\n         of 401 (Unauthorized).\n      *  If the message is an indication,\
    \ the agent MUST silently\n         discard the indication.\n   o  Using the password\
    \ associated with the username, compute the value\n      for the message integrity\
    \ as described in Section 15.4.  If the\n      resulting value does not match\
    \ the contents of the MESSAGE-\n      INTEGRITY attribute:\n      *  If the message\
    \ is a request, the server MUST reject the request\n         with an error response.\
    \  This response MUST use an error code\n         of 401 (Unauthorized).\n   \
    \   *  If the message is an indication, the agent MUST silently\n         discard\
    \ the indication.\n   If these checks pass, the agent continues to process the\
    \ request or\n   indication.  Any response generated by a server MUST include\
    \ the\n   MESSAGE-INTEGRITY attribute, computed using the password utilized to\n\
    \   authenticate the request.  The response MUST NOT contain the USERNAME\n  \
    \ attribute.\n   If any of the checks fail, a server MUST NOT include a MESSAGE-\n\
    \   INTEGRITY or USERNAME attribute in the error response.  This is\n   because,\
    \ in these failure cases, the server cannot determine the\n   shared secret necessary\
    \ to compute MESSAGE-INTEGRITY.\n"
- title: 10.1.3.  Receiving a Response
  contents:
  - "10.1.3.  Receiving a Response\n   The client looks for the MESSAGE-INTEGRITY\
    \ attribute in the response.\n   If present, the client computes the message integrity\
    \ over the\n   response as defined in Section 15.4, using the same password it\n\
    \   utilized for the request.  If the resulting value matches the\n   contents\
    \ of the MESSAGE-INTEGRITY attribute, the response is\n   considered authenticated.\
    \  If the value does not match, or if\n   MESSAGE-INTEGRITY was absent, the response\
    \ MUST be discarded, as if\n   it was never received.  This means that retransmits,\
    \ if applicable,\n   will continue.\n"
- title: 10.2.  Long-Term Credential Mechanism
  contents:
  - "10.2.  Long-Term Credential Mechanism\n   The long-term credential mechanism\
    \ relies on a long-term credential,\n   in the form of a username and password\
    \ that are shared between client\n   and server.  The credential is considered\
    \ long-term since it is\n   assumed that it is provisioned for a user, and remains\
    \ in effect\n   until the user is no longer a subscriber of the system, or is\n\
    \   changed.  This is basically a traditional \"log-in\" username and\n   password\
    \ given to users.\n   Because these usernames and passwords are expected to be\
    \ valid for\n   extended periods of time, replay prevention is provided in the\
    \ form\n   of a digest challenge.  In this mechanism, the client initially sends\n\
    \   a request, without offering any credentials or any integrity checks.\n   The\
    \ server rejects this request, providing the user a realm (used to\n   guide the\
    \ user or agent in selection of a username and password) and\n   a nonce.  The\
    \ nonce provides the replay protection.  It is a cookie,\n   selected by the server,\
    \ and encoded in such a way as to indicate a\n   duration of validity or client\
    \ identity from which it is valid.  The\n   client retries the request, this time\
    \ including its username and the\n   realm, and echoing the nonce provided by\
    \ the server.  The client also\n   includes a message-integrity, which provides\
    \ an HMAC over the entire\n   request, including the nonce.  The server validates\
    \ the nonce and\n   checks the message integrity.  If they match, the request\
    \ is\n   authenticated.  If the nonce is no longer valid, it is considered\n \
    \  \"stale\", and the server rejects the request, providing a new nonce.\n   In\
    \ subsequent requests to the same server, the client reuses the\n   nonce, username,\
    \ realm, and password it used previously.  In this\n   way, subsequent requests\
    \ are not rejected until the nonce becomes\n   invalid by the server, in which\
    \ case the rejection provides a new\n   nonce to the client.\n   Note that the\
    \ long-term credential mechanism cannot be used to\n   protect indications, since\
    \ indications cannot be challenged.  Usages\n   utilizing indications must either\
    \ use a short-term credential or omit\n   authentication and message integrity\
    \ for them.\n   Since the long-term credential mechanism is susceptible to offline\n\
    \   dictionary attacks, deployments SHOULD utilize passwords that are\n   difficult\
    \ to guess.  In cases where the credentials are not entered\n   by the user, but\
    \ are rather placed on a client device during device\n   provisioning, the password\
    \ SHOULD have at least 128 bits of\n   randomness.  In cases where the credentials\
    \ are entered by the user,\n   they should follow best current practices around\
    \ password structure.\n"
- title: 10.2.1.  Forming a Request
  contents:
  - "10.2.1.  Forming a Request\n   There are two cases when forming a request.  In\
    \ the first case, this\n   is the first request from the client to the server\
    \ (as identified by\n   its IP address and port).  In the second case, the client\
    \ is\n   submitting a subsequent request once a previous request/response\n  \
    \ transaction has completed successfully.  Forming a request as a\n   consequence\
    \ of a 401 or 438 error response is covered in\n   Section 10.2.3 and is not considered\
    \ a \"subsequent request\" and thus\n   does not utilize the rules described in\
    \ Section 10.2.1.2.\n"
- title: 10.2.1.1.  First Request
  contents:
  - "10.2.1.1.  First Request\n   If the client has not completed a successful request/response\n\
    \   transaction with the server (as identified by hostname, if the DNS\n   procedures\
    \ of Section 9 are used, else IP address if not), it SHOULD\n   omit the USERNAME,\
    \ MESSAGE-INTEGRITY, REALM, and NONCE attributes.\n   In other words, the very\
    \ first request is sent as if there were no\n   authentication or message integrity\
    \ applied.\n"
- title: 10.2.1.2.  Subsequent Requests
  contents:
  - "10.2.1.2.  Subsequent Requests\n   Once a request/response transaction has completed\
    \ successfully, the\n   client will have been presented a realm and nonce by the\
    \ server, and\n   selected a username and password with which it authenticated.\
    \  The\n   client SHOULD cache the username, password, realm, and nonce for\n\
    \   subsequent communications with the server.  When the client sends a\n   subsequent\
    \ request, it SHOULD include the USERNAME, REALM, and NONCE\n   attributes with\
    \ these cached values.  It SHOULD include a MESSAGE-\n   INTEGRITY attribute,\
    \ computed as described in Section 15.4 using the\n   cached password.\n"
- title: 10.2.2.  Receiving a Request
  contents:
  - "10.2.2.  Receiving a Request\n   After the server has done the basic processing\
    \ of a request, it\n   performs the checks listed below in the order specified:\n\
    \   o  If the message does not contain a MESSAGE-INTEGRITY attribute, the\n  \
    \    server MUST generate an error response with an error code of 401\n      (Unauthorized).\
    \  This response MUST include a REALM value.  It is\n      RECOMMENDED that the\
    \ REALM value be the domain name of the\n      provider of the STUN server.  The\
    \ response MUST include a NONCE,\n      selected by the server.  The response\
    \ SHOULD NOT contain a\n      USERNAME or MESSAGE-INTEGRITY attribute.\n   o \
    \ If the message contains a MESSAGE-INTEGRITY attribute, but is\n      missing\
    \ the USERNAME, REALM, or NONCE attribute, the server MUST\n      generate an\
    \ error response with an error code of 400 (Bad\n      Request).  This response\
    \ SHOULD NOT include a USERNAME, NONCE,\n      REALM, or MESSAGE-INTEGRITY attribute.\n\
    \   o  If the NONCE is no longer valid, the server MUST generate an error\n  \
    \    response with an error code of 438 (Stale Nonce).  This response\n      MUST\
    \ include NONCE and REALM attributes and SHOULD NOT include the\n      USERNAME\
    \ or MESSAGE-INTEGRITY attribute.  Servers can invalidate\n      nonces in order\
    \ to provide additional security.  See Section 4.3\n      of [RFC2617] for guidelines.\n\
    \   o  If the username in the USERNAME attribute is not valid, the server\n  \
    \    MUST generate an error response with an error code of 401\n      (Unauthorized).\
    \  This response MUST include a REALM value.  It is\n      RECOMMENDED that the\
    \ REALM value be the domain name of the\n      provider of the STUN server.  The\
    \ response MUST include a NONCE,\n      selected by the server.  The response\
    \ SHOULD NOT contain a\n      USERNAME or MESSAGE-INTEGRITY attribute.\n   o \
    \ Using the password associated with the username in the USERNAME\n      attribute,\
    \ compute the value for the message integrity as\n      described in Section 15.4.\
    \  If the resulting value does not match\n      the contents of the MESSAGE-INTEGRITY\
    \ attribute, the server MUST\n      reject the request with an error response.\
    \  This response MUST use\n      an error code of 401 (Unauthorized).  It MUST\
    \ include REALM and\n      NONCE attributes and SHOULD NOT include the USERNAME\
    \ or MESSAGE-\n      INTEGRITY attribute.\n   If these checks pass, the server\
    \ continues to process the request.\n   Any response generated by the server (excepting\
    \ the cases described\n   above) MUST include the MESSAGE-INTEGRITY attribute,\
    \ computed using\n   the username and password utilized to authenticate the request.\
    \  The\n   REALM, NONCE, and USERNAME attributes SHOULD NOT be included.\n"
- title: 10.2.3.  Receiving a Response
  contents:
  - "10.2.3.  Receiving a Response\n   If the response is an error response with an\
    \ error code of 401\n   (Unauthorized), the client SHOULD retry the request with\
    \ a new\n   transaction.  This request MUST contain a USERNAME, determined by\
    \ the\n   client as the appropriate username for the REALM from the error\n  \
    \ response.  The request MUST contain the REALM, copied from the error\n   response.\
    \  The request MUST contain the NONCE, copied from the error\n   response.  The\
    \ request MUST contain the MESSAGE-INTEGRITY attribute,\n   computed using the\
    \ password associated with the username in the\n   USERNAME attribute.  The client\
    \ MUST NOT perform this retry if it is\n   not changing the USERNAME or REALM\
    \ or its associated password, from\n   the previous attempt.\n   If the response\
    \ is an error response with an error code of 438 (Stale\n   Nonce), the client\
    \ MUST retry the request, using the new NONCE\n   supplied in the 438 (Stale Nonce)\
    \ response.  This retry MUST also\n   include the USERNAME, REALM, and MESSAGE-INTEGRITY.\n\
    \   The client looks for the MESSAGE-INTEGRITY attribute in the response\n   (either\
    \ success or failure).  If present, the client computes the\n   message integrity\
    \ over the response as defined in Section 15.4, using\n   the same password it\
    \ utilized for the request.  If the resulting\n   value matches the contents of\
    \ the MESSAGE-INTEGRITY attribute, the\n   response is considered authenticated.\
    \  If the value does not match,\n   or if MESSAGE-INTEGRITY was absent, the response\
    \ MUST be discarded,\n   as if it was never received.  This means that retransmits,\
    \ if\n   applicable, will continue.\n"
- title: 11.  ALTERNATE-SERVER Mechanism
  contents:
  - "11.  ALTERNATE-SERVER Mechanism\n   This section describes a mechanism in STUN\
    \ that allows a server to\n   redirect a client to another server.  This extension\
    \ is optional, and\n   a usage must define if and when this extension is used.\n\
    \   A server using this extension redirects a client to another server by\n  \
    \ replying to a request message with an error response message with an\n   error\
    \ code of 300 (Try Alternate).  The server MUST include an\n   ALTERNATE-SERVER\
    \ attribute in the error response.  The error response\n   message MAY be authenticated;\
    \ however, there are uses cases for\n   ALTERNATE-SERVER where authentication\
    \ of the response is not possible\n   or practical.\n   A client using this extension\
    \ handles a 300 (Try Alternate) error\n   code as follows.  The client looks for\
    \ an ALTERNATE-SERVER attribute\n   in the error response.  If one is found, then\
    \ the client considers\n   the current transaction as failed, and reattempts the\
    \ request with\n   the server specified in the attribute, using the same transport\n\
    \   protocol used for the previous request.  That request, if\n   authenticated,\
    \ MUST utilize the same credentials that the client\n   would have used in the\
    \ request to the server that performed the\n   redirection.  If the client has\
    \ been redirected to a server on which\n   it has already tried this request within\
    \ the last five minutes, it\n   MUST ignore the redirection and consider the transaction\
    \ to have\n   failed.  This prevents infinite ping-ponging between servers in\
    \ case\n   of redirection loops.\n"
- title: 12.  Backwards Compatibility with RFC 3489
  contents:
  - "12.  Backwards Compatibility with RFC 3489\n   This section defines procedures\
    \ that allow a degree of backwards\n   compatibility with the original protocol\
    \ defined in RFC 3489\n   [RFC3489].  This mechanism is optional, meant to be\
    \ utilized only in\n   cases where a new client can connect to an old server,\
    \ or vice versa.\n   A usage must define if and when this procedure is used.\n\
    \   Section 19 lists all the changes between this specification and RFC\n   3489\
    \ [RFC3489].  However, not all of these differences are important,\n   because\
    \ \"classic STUN\" was only used in a few specific ways.  For the\n   purposes\
    \ of this extension, the important changes are the following.\n   In RFC 3489:\n\
    \   o  UDP was the only supported transport.\n   o  The field that is now the\
    \ magic cookie field was a part of the\n      transaction ID field, and transaction\
    \ IDs were 128 bits long.\n   o  The XOR-MAPPED-ADDRESS attribute did not exist,\
    \ and the Binding\n      method used the MAPPED-ADDRESS attribute instead.\n \
    \  o  There were three comprehension-required attributes, RESPONSE-\n      ADDRESS,\
    \ CHANGE-REQUEST, and CHANGED-ADDRESS, that have been\n      removed from this\
    \ specification.\n      *  CHANGE-REQUEST and CHANGED-ADDRESS are now part of\
    \ the NAT\n         Behavior Discovery usage [BEHAVE-NAT], and the other is\n\
    \         deprecated.\n"
- title: 12.1.  Changes to Client Processing
  contents:
  - "12.1.  Changes to Client Processing\n   A client that wants to interoperate with\
    \ an [RFC3489] server SHOULD\n   send a request message that uses the Binding\
    \ method, contains no\n   attributes, and uses UDP as the transport protocol to\
    \ the server.  If\n   successful, the success response received from the server\
    \ will\n   contain a MAPPED-ADDRESS attribute rather than an XOR-MAPPED-ADDRESS\n\
    \   attribute.  A client seeking to interoperate with an older server\n   MUST\
    \ be prepared to receive either.  Furthermore, the client MUST\n   ignore any\
    \ Reserved comprehension-required attributes that might\n   appear in the response.\
    \  Of the Reserved attributes in Section 18.2,\n   0x0002, 0x0004, 0x0005, and\
    \ 0x000B may appear in Binding responses\n   from a server compliant to RFC 3489.\
    \  Other than this change, the\n   processing of the response is identical to\
    \ the procedures described\n   above.\n"
- title: 12.2.  Changes to Server Processing
  contents:
  - "12.2.  Changes to Server Processing\n   A STUN server can detect when a given\
    \ Binding request message was\n   sent from an RFC 3489 [RFC3489] client by the\
    \ absence of the correct\n   value in the magic cookie field.  When the server\
    \ detects an RFC 3489\n   client, it SHOULD copy the value seen in the magic cookie\
    \ field in\n   the Binding request to the magic cookie field in the Binding response\n\
    \   message, and insert a MAPPED-ADDRESS attribute instead of an XOR-\n   MAPPED-ADDRESS\
    \ attribute.\n   The client might, in rare situations, include either the RESPONSE-\n\
    \   ADDRESS or CHANGE-REQUEST attributes.  In these situations, the\n   server\
    \ will view these as unknown comprehension-required attributes\n   and reply with\
    \ an error response.  Since the mechanisms utilizing\n   those attributes are\
    \ no longer supported, this behavior is\n   acceptable.\n   The RFC 3489 version\
    \ of STUN lacks both the magic cookie and the\n   FINGERPRINT attribute that allows\
    \ for a very high probability of\n   correctly identifying STUN messages when\
    \ multiplexed with other\n   protocols.  Therefore, STUN implementations that\
    \ are backwards\n   compatible with RFC 3489 SHOULD NOT be used in cases where\
    \ STUN will\n   be multiplexed with another protocol.  However, that should not\
    \ be an\n   issue as such multiplexing was not available in RFC 3489.\n"
- title: 13.  Basic Server Behavior
  contents:
  - "13.  Basic Server Behavior\n   This section defines the behavior of a basic,\
    \ stand-alone STUN\n   server.  A basic STUN server provides clients with server\
    \ reflexive\n   transport addresses by receiving and replying to STUN Binding\n\
    \   requests.\n   The STUN server MUST support the Binding method.  It SHOULD\
    \ NOT\n   utilize the short-term or long-term credential mechanism.  This is\n\
    \   because the work involved in authenticating the request is more than\n   the\
    \ work in simply processing it.  It SHOULD NOT utilize the\n   ALTERNATE-SERVER\
    \ mechanism for the same reason.  It MUST support UDP\n   and TCP.  It MAY support\
    \ STUN over TCP/TLS; however, TLS provides\n   minimal security benefits in this\
    \ basic mode of operation.  It MAY\n   utilize the FINGERPRINT mechanism but MUST\
    \ NOT require it.  Since the\n   stand-alone server only runs STUN, FINGERPRINT\
    \ provides no benefit.\n   Requiring it would break compatibility with RFC 3489,\
    \ and such\n   compatibility is desirable in a stand-alone server.  Stand-alone\
    \ STUN\n   servers SHOULD support backwards compatibility with [RFC3489]\n   clients,\
    \ as described in Section 12.\n   It is RECOMMENDED that administrators of STUN\
    \ servers provide DNS\n   entries for those servers as described in Section 9.\n\
    \   A basic STUN server is not a solution for NAT traversal by itself.\n   However,\
    \ it can be utilized as part of a solution through STUN\n   usages.  This is discussed\
    \ further in Section 14.\n"
- title: 14.  STUN Usages
  contents:
  - "14.  STUN Usages\n   STUN by itself is not a solution to the NAT traversal problem.\n\
    \   Rather, STUN defines a tool that can be used inside a larger\n   solution.\
    \  The term \"STUN usage\" is used for any solution that uses\n   STUN as a component.\n\
    \   At the time of writing, three STUN usages are defined: Interactive\n   Connectivity\
    \ Establishment (ICE) [MMUSIC-ICE], Client-initiated\n   connections for SIP [SIP-OUTBOUND],\
    \ and NAT Behavior Discovery\n   [BEHAVE-NAT].  Other STUN usages may be defined\
    \ in the future.\n   A STUN usage defines how STUN is actually utilized -- when\
    \ to send\n   requests, what to do with the responses, and which optional\n  \
    \ procedures defined here (or in an extension to STUN) are to be used.\n   A usage\
    \ would also define:\n   o  Which STUN methods are used.\n   o  What authentication\
    \ and message-integrity mechanisms are used.\n   o  The considerations around\
    \ manual vs. automatic key derivation for\n      the integrity mechanism, as discussed\
    \ in [RFC4107].\n   o  What mechanisms are used to distinguish STUN messages from\
    \ other\n      messages.  When STUN is run over TCP, a framing mechanism may be\n\
    \      required.\n   o  How a STUN client determines the IP address and port of\
    \ the STUN\n      server.\n   o  Whether backwards compatibility to RFC 3489 is\
    \ required.\n   o  What optional attributes defined here (such as FINGERPRINT\
    \ and\n      ALTERNATE-SERVER) or in other extensions are required.\n   In addition,\
    \ any STUN usage must consider the security implications\n   of using STUN in\
    \ that usage.  A number of attacks against STUN are\n   known (see the Security\
    \ Considerations section in this document), and\n   any usage must consider how\
    \ these attacks can be thwarted or\n   mitigated.\n   Finally, a usage must consider\
    \ whether its usage of STUN is an\n   example of the Unilateral Self-Address Fixing\
    \ approach to NAT\n   traversal, and if so, address the questions raised in RFC\
    \ 3424\n   [RFC3424].\n"
- title: 15.  STUN Attributes
  contents:
  - "15.  STUN Attributes\n   After the STUN header are zero or more attributes. \
    \ Each attribute\n   MUST be TLV encoded, with a 16-bit type, 16-bit length, and\
    \ value.\n   Each STUN attribute MUST end on a 32-bit boundary.  As mentioned\n\
    \   above, all fields in an attribute are transmitted most significant\n   bit\
    \ first.\n       0                   1                   2                   3\n\
    \       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \         Type                  |            Length             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                         Value (variable)                ....\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                    Figure 4: Format of STUN Attributes\n   The value in the\
    \ length field MUST contain the length of the Value\n   part of the attribute,\
    \ prior to padding, measured in bytes.  Since\n   STUN aligns attributes on 32-bit\
    \ boundaries, attributes whose content\n   is not a multiple of 4 bytes are padded\
    \ with 1, 2, or 3 bytes of\n   padding so that its value contains a multiple of\
    \ 4 bytes.  The\n   padding bits are ignored, and may be any value.\n   Any attribute\
    \ type MAY appear more than once in a STUN message.\n   Unless specified otherwise,\
    \ the order of appearance is significant:\n   only the first occurrence needs\
    \ to be processed by a receiver, and\n   any duplicates MAY be ignored by a receiver.\n\
    \   To allow future revisions of this specification to add new attributes\n  \
    \ if needed, the attribute space is divided into two ranges.\n   Attributes with\
    \ type values between 0x0000 and 0x7FFF are\n   comprehension-required attributes,\
    \ which means that the STUN agent\n   cannot successfully process the message\
    \ unless it understands the\n   attribute.  Attributes with type values between\
    \ 0x8000 and 0xFFFF are\n   comprehension-optional attributes, which means that\
    \ those attributes\n   can be ignored by the STUN agent if it does not understand\
    \ them.\n   The set of STUN attribute types is maintained by IANA.  The initial\n\
    \   set defined by this specification is found in Section 18.2.\n   The rest of\
    \ this section describes the format of the various\n   attributes defined in this\
    \ specification.\n"
- title: 15.1.  MAPPED-ADDRESS
  contents:
  - "15.1.  MAPPED-ADDRESS\n   The MAPPED-ADDRESS attribute indicates a reflexive\
    \ transport address\n   of the client.  It consists of an 8-bit address family\
    \ and a 16-bit\n   port, followed by a fixed-length value representing the IP\
    \ address.\n   If the address family is IPv4, the address MUST be 32 bits.  If\
    \ the\n   address family is IPv6, the address MUST be 128 bits.  All fields\n\
    \   must be in network byte order.\n   The format of the MAPPED-ADDRESS attribute\
    \ is:\n       0                   1                   2                   3\n\
    \       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |0\
    \ 0 0 0 0 0 0 0|    Family     |           Port                |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   |                 Address (32 bits or 128 bits)                 |\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \               Figure 5: Format of MAPPED-ADDRESS Attribute\n   The address family\
    \ can take on the following values:\n   0x01:IPv4\n   0x02:IPv6\n   The first\
    \ 8 bits of the MAPPED-ADDRESS MUST be set to 0 and MUST be\n   ignored by receivers.\
    \  These bits are present for aligning parameters\n   on natural 32-bit boundaries.\n\
    \   This attribute is used only by servers for achieving backwards\n   compatibility\
    \ with RFC 3489 [RFC3489] clients.\n"
- title: 15.2.  XOR-MAPPED-ADDRESS
  contents:
  - "15.2.  XOR-MAPPED-ADDRESS\n   The XOR-MAPPED-ADDRESS attribute is identical to\
    \ the MAPPED-ADDRESS\n   attribute, except that the reflexive transport address\
    \ is obfuscated\n   through the XOR function.\n   The format of the XOR-MAPPED-ADDRESS\
    \ is:\n      0                   1                   2                   3\n \
    \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |x x x x x x x x|    Family     |         X-Port                |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \              X-Address (Variable)\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \             Figure 6: Format of XOR-MAPPED-ADDRESS Attribute\n   The Family\
    \ represents the IP address family, and is encoded\n   identically to the Family\
    \ in MAPPED-ADDRESS.\n   X-Port is computed by taking the mapped port in host\
    \ byte order,\n   XOR'ing it with the most significant 16 bits of the magic cookie,\
    \ and\n   then the converting the result to network byte order.  If the IP\n \
    \  address family is IPv4, X-Address is computed by taking the mapped IP\n   address\
    \ in host byte order, XOR'ing it with the magic cookie, and\n   converting the\
    \ result to network byte order.  If the IP address\n   family is IPv6, X-Address\
    \ is computed by taking the mapped IP address\n   in host byte order, XOR'ing\
    \ it with the concatenation of the magic\n   cookie and the 96-bit transaction\
    \ ID, and converting the result to\n   network byte order.\n   The rules for encoding\
    \ and processing the first 8 bits of the\n   attribute's value, the rules for\
    \ handling multiple occurrences of the\n   attribute, and the rules for processing\
    \ address families are the same\n   as for MAPPED-ADDRESS.\n   Note: XOR-MAPPED-ADDRESS\
    \ and MAPPED-ADDRESS differ only in their\n   encoding of the transport address.\
    \  The former encodes the transport\n   address by exclusive-or'ing it with the\
    \ magic cookie.  The latter\n   encodes it directly in binary.  RFC 3489 originally\
    \ specified only\n   MAPPED-ADDRESS.  However, deployment experience found that\
    \ some NATs\n   rewrite the 32-bit binary payloads containing the NAT's public\
    \ IP\n   address, such as STUN's MAPPED-ADDRESS attribute, in the well-meaning\n\
    \   but misguided attempt at providing a generic ALG function.  Such\n   behavior\
    \ interferes with the operation of STUN and also causes\n   failure of STUN's\
    \ message-integrity checking.\n"
- title: 15.3.  USERNAME
  contents:
  - "15.3.  USERNAME\n   The USERNAME attribute is used for message integrity.  It\
    \ identifies\n   the username and password combination used in the message-integrity\n\
    \   check.\n   The value of USERNAME is a variable-length value.  It MUST contain\
    \ a\n   UTF-8 [RFC3629] encoded sequence of less than 513 bytes, and MUST\n  \
    \ have been processed using SASLprep [RFC4013].\n"
- title: 15.4.  MESSAGE-INTEGRITY
  contents:
  - "15.4.  MESSAGE-INTEGRITY\n   The MESSAGE-INTEGRITY attribute contains an HMAC-SHA1\
    \ [RFC2104] of\n   the STUN message.  The MESSAGE-INTEGRITY attribute can be present\
    \ in\n   any STUN message type.  Since it uses the SHA1 hash, the HMAC will be\n\
    \   20 bytes.  The text used as input to HMAC is the STUN message,\n   including\
    \ the header, up to and including the attribute preceding the\n   MESSAGE-INTEGRITY\
    \ attribute.  With the exception of the FINGERPRINT\n   attribute, which appears\
    \ after MESSAGE-INTEGRITY, agents MUST ignore\n   all other attributes that follow\
    \ MESSAGE-INTEGRITY.\n   The key for the HMAC depends on whether long-term or\
    \ short-term\n   credentials are in use.  For long-term credentials, the key is\
    \ 16\n   bytes:\n            key = MD5(username \":\" realm \":\" SASLprep(password))\n\
    \   That is, the 16-byte key is formed by taking the MD5 hash of the\n   result\
    \ of concatenating the following five fields: (1) the username,\n   with any quotes\
    \ and trailing nulls removed, as taken from the\n   USERNAME attribute (in which\
    \ case SASLprep has already been applied);\n   (2) a single colon; (3) the realm,\
    \ with any quotes and trailing nulls\n   removed; (4) a single colon; and (5)\
    \ the password, with any trailing\n   nulls removed and after processing using\
    \ SASLprep.  For example, if\n   the username was 'user', the realm was 'realm',\
    \ and the password was\n   'pass', then the 16-byte HMAC key would be the result\
    \ of performing\n   an MD5 hash on the string 'user:realm:pass', the resulting\
    \ hash being\n   0x8493fbc53ba582fb4c044c456bdc40eb.\n   For short-term credentials:\n\
    \                          key = SASLprep(password)\n   where MD5 is defined in\
    \ RFC 1321 [RFC1321] and SASLprep() is defined\n   in RFC 4013 [RFC4013].\n  \
    \ The structure of the key when used with long-term credentials\n   facilitates\
    \ deployment in systems that also utilize SIP.  Typically,\n   SIP systems utilizing\
    \ SIP's digest authentication mechanism do not\n   actually store the password\
    \ in the database.  Rather, they store a\n   value called H(A1), which is equal\
    \ to the key defined above.\n   Based on the rules above, the hash used to construct\
    \ MESSAGE-\n   INTEGRITY includes the length field from the STUN message header.\n\
    \   Prior to performing the hash, the MESSAGE-INTEGRITY attribute MUST be\n  \
    \ inserted into the message (with dummy content).  The length MUST then\n   be\
    \ set to point to the length of the message up to, and including,\n   the MESSAGE-INTEGRITY\
    \ attribute itself, but excluding any attributes\n   after it.  Once the computation\
    \ is performed, the value of the\n   MESSAGE-INTEGRITY attribute can be filled\
    \ in, and the value of the\n   length in the STUN header can be set to its correct\
    \ value -- the\n   length of the entire message.  Similarly, when validating the\n\
    \   MESSAGE-INTEGRITY, the length field should be adjusted to point to\n   the\
    \ end of the MESSAGE-INTEGRITY attribute prior to calculating the\n   HMAC.  Such\
    \ adjustment is necessary when attributes, such as\n   FINGERPRINT, appear after\
    \ MESSAGE-INTEGRITY.\n"
- title: 15.5.  FINGERPRINT
  contents:
  - "15.5.  FINGERPRINT\n   The FINGERPRINT attribute MAY be present in all STUN messages.\
    \  The\n   value of the attribute is computed as the CRC-32 of the STUN message\n\
    \   up to (but excluding) the FINGERPRINT attribute itself, XOR'ed with\n   the\
    \ 32-bit value 0x5354554e (the XOR helps in cases where an\n   application packet\
    \ is also using CRC-32 in it).  The 32-bit CRC is\n   the one defined in ITU V.42\
    \ [ITU.V42.2002], which has a generator\n   polynomial of x32+x26+x23+x22+x16+x12+x11+x10+x8+x7+x5+x4+x2+x+1.\n\
    \   When present, the FINGERPRINT attribute MUST be the last attribute in\n  \
    \ the message, and thus will appear after MESSAGE-INTEGRITY.\n   The FINGERPRINT\
    \ attribute can aid in distinguishing STUN packets from\n   packets of other protocols.\
    \  See Section 8.\n   As with MESSAGE-INTEGRITY, the CRC used in the FINGERPRINT\
    \ attribute\n   covers the length field from the STUN message header.  Therefore,\n\
    \   this value must be correct and include the CRC attribute as part of\n   the\
    \ message length, prior to computation of the CRC.  When using the\n   FINGERPRINT\
    \ attribute in a message, the attribute is first placed\n   into the message with\
    \ a dummy value, then the CRC is computed, and\n   then the value of the attribute\
    \ is updated.  If the MESSAGE-INTEGRITY\n   attribute is also present, then it\
    \ must be present with the correct\n   message-integrity value before the CRC\
    \ is computed, since the CRC is\n   done over the value of the MESSAGE-INTEGRITY\
    \ attribute as well.\n"
- title: 15.6.  ERROR-CODE
  contents:
  - "15.6.  ERROR-CODE\n   The ERROR-CODE attribute is used in error response messages.\
    \  It\n   contains a numeric error code value in the range of 300 to 699 plus\
    \ a\n   textual reason phrase encoded in UTF-8 [RFC3629], and is consistent\n\
    \   in its code assignments and semantics with SIP [RFC3261] and HTTP\n   [RFC2616].\
    \  The reason phrase is meant for user consumption, and can\n   be anything appropriate\
    \ for the error code.  Recommended reason\n   phrases for the defined error codes\
    \ are included in the IANA registry\n   for error codes.  The reason phrase MUST\
    \ be a UTF-8 [RFC3629] encoded\n   sequence of less than 128 characters (which\
    \ can be as long as 763\n   bytes).\n       0                   1            \
    \       2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |           Reserved, should be 0         |Class|     Number    |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \      Reason Phrase (variable)                                ..\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                      Figure 7: ERROR-CODE Attribute\n   To facilitate processing,\
    \ the class of the error code (the hundreds\n   digit) is encoded separately from\
    \ the rest of the code, as shown in\n   Figure 7.\n   The Reserved bits SHOULD\
    \ be 0, and are for alignment on 32-bit\n   boundaries.  Receivers MUST ignore\
    \ these bits.  The Class represents\n   the hundreds digit of the error code.\
    \  The value MUST be between 3\n   and 6.  The Number represents the error code\
    \ modulo 100, and its\n   value MUST be between 0 and 99.\n   The following error\
    \ codes, along with their recommended reason\n   phrases, are defined:\n   300\
    \  Try Alternate: The client should contact an alternate server for\n        this\
    \ request.  This error response MUST only be sent if the\n        request included\
    \ a USERNAME attribute and a valid MESSAGE-\n        INTEGRITY attribute; otherwise,\
    \ it MUST NOT be sent and error\n        code 400 (Bad Request) is suggested.\
    \  This error response MUST\n        be protected with the MESSAGE-INTEGRITY attribute,\
    \ and receivers\n        MUST validate the MESSAGE-INTEGRITY of this response\
    \ before\n        redirecting themselves to an alternate server.\n           \
    \  Note: Failure to generate and validate message integrity\n             for\
    \ a 300 response allows an on-path attacker to falsify a\n             300 response\
    \ thus causing subsequent STUN messages to be\n             sent to a victim.\n\
    \   400  Bad Request: The request was malformed.  The client SHOULD NOT\n    \
    \    retry the request without modification from the previous\n        attempt.\
    \  The server may not be able to generate a valid\n        MESSAGE-INTEGRITY for\
    \ this error, so the client MUST NOT expect\n        a valid MESSAGE-INTEGRITY\
    \ attribute on this response.\n   401  Unauthorized: The request did not contain\
    \ the correct\n        credentials to proceed.  The client should retry the request\n\
    \        with proper credentials.\n   420  Unknown Attribute: The server received\
    \ a STUN packet containing\n        a comprehension-required attribute that it\
    \ did not understand.\n        The server MUST put this unknown attribute in the\
    \ UNKNOWN-\n        ATTRIBUTE attribute of its error response.\n   438  Stale\
    \ Nonce: The NONCE used by the client was no longer valid.\n        The client\
    \ should retry, using the NONCE provided in the\n        response.\n   500  Server\
    \ Error: The server has suffered a temporary error.  The\n        client should\
    \ try again.\n"
- title: 15.7.  REALM
  contents:
  - "15.7.  REALM\n   The REALM attribute may be present in requests and responses.\
    \  It\n   contains text that meets the grammar for \"realm-value\" as described\n\
    \   in RFC 3261 [RFC3261] but without the double quotes and their\n   surrounding\
    \ whitespace.  That is, it is an unquoted realm-value (and\n   is therefore a\
    \ sequence of qdtext or quoted-pair).  It MUST be a\n   UTF-8 [RFC3629] encoded\
    \ sequence of less than 128 characters (which\n   can be as long as 763 bytes),\
    \ and MUST have been processed using\n   SASLprep [RFC4013].\n   Presence of the\
    \ REALM attribute in a request indicates that long-term\n   credentials are being\
    \ used for authentication.  Presence in certain\n   error responses indicates\
    \ that the server wishes the client to use a\n   long-term credential for authentication.\n"
- title: 15.8.  NONCE
  contents:
  - "15.8.  NONCE\n   The NONCE attribute may be present in requests and responses.\
    \  It\n   contains a sequence of qdtext or quoted-pair, which are defined in\n\
    \   RFC 3261 [RFC3261].  Note that this means that the NONCE attribute\n   will\
    \ not contain actual quote characters.  See RFC 2617 [RFC2617],\n   Section 4.3,\
    \ for guidance on selection of nonce values in a server.\n   It MUST be less than\
    \ 128 characters (which can be as long as 763\n   bytes).\n"
- title: 15.9.  UNKNOWN-ATTRIBUTES
  contents:
  - "15.9.  UNKNOWN-ATTRIBUTES\n   The UNKNOWN-ATTRIBUTES attribute is present only\
    \ in an error response\n   when the response code in the ERROR-CODE attribute\
    \ is 420.\n   The attribute contains a list of 16-bit values, each of which\n\
    \   represents an attribute type that was not understood by the server.\n    \
    \   0                   1                   2                   3\n       0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |      Attribute 1 Type           |     Attribute 2 Type        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \      Attribute 3 Type           |     Attribute 4 Type    ...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \             Figure 8: Format of UNKNOWN-ATTRIBUTES Attribute\n      Note: In\
    \ [RFC3489], this field was padded to 32 by duplicating the\n      last attribute.\
    \  In this version of the specification, the normal\n      padding rules for attributes\
    \ are used instead.\n"
- title: 15.10.  SOFTWARE
  contents:
  - "15.10.  SOFTWARE\n   The SOFTWARE attribute contains a textual description of\
    \ the software\n   being used by the agent sending the message.  It is used by\
    \ clients\n   and servers.  Its value SHOULD include manufacturer and version\n\
    \   number.  The attribute has no impact on operation of the protocol,\n   and\
    \ serves only as a tool for diagnostic and debugging purposes.  The\n   value\
    \ of SOFTWARE is variable length.  It MUST be a UTF-8 [RFC3629]\n   encoded sequence\
    \ of less than 128 characters (which can be as long as\n   763 bytes).\n"
- title: 15.11.  ALTERNATE-SERVER
  contents:
  - "15.11.  ALTERNATE-SERVER\n   The alternate server represents an alternate transport\
    \ address\n   identifying a different STUN server that the STUN client should\
    \ try.\n   It is encoded in the same way as MAPPED-ADDRESS, and thus refers to\
    \ a\n   single server by IP address.  The IP address family MUST be identical\n\
    \   to that of the source IP address of the request.\n"
- title: 16.  Security Considerations
  contents:
  - '16.  Security Considerations

    '
- title: 16.1.  Attacks against the Protocol
  contents:
  - '16.1.  Attacks against the Protocol

    '
- title: 16.1.1.  Outside Attacks
  contents:
  - "16.1.1.  Outside Attacks\n   An attacker can try to modify STUN messages in transit,\
    \ in order to\n   cause a failure in STUN operation.  These attacks are detected\
    \ for\n   both requests and responses through the message-integrity mechanism,\n\
    \   using either a short-term or long-term credential.  Of course, once\n   detected,\
    \ the manipulated packets will be dropped, causing the STUN\n   transaction to\
    \ effectively fail.  This attack is possible only by an\n   on-path attacker.\n\
    \   An attacker that can observe, but not modify, STUN messages in-\n   transit\
    \ (for example, an attacker present on a shared access medium,\n   such as Wi-Fi),\
    \ can see a STUN request, and then immediately send a\n   STUN response, typically\
    \ an error response, in order to disrupt STUN\n   processing.  This attack is\
    \ also prevented for messages that utilize\n   MESSAGE-INTEGRITY.  However, some\
    \ error responses, those related to\n   authentication in particular, cannot be\
    \ protected by MESSAGE-\n   INTEGRITY.  When STUN itself is run over a secure\
    \ transport protocol\n   (e.g., TLS), these attacks are completely mitigated.\n\
    \   Depending on the STUN usage, these attacks may be of minimal\n   consequence\
    \ and thus do not require message integrity to mitigate.\n   For example, when\
    \ STUN is used to a basic STUN server to discover a\n   server reflexive candidate\
    \ for usage with ICE, authentication and\n   message integrity are not required\
    \ since these attacks are detected\n   during the connectivity check phase.  The\
    \ connectivity checks\n   themselves, however, require protection for proper operation\
    \ of ICE\n   overall.  As described in Section 14, STUN usages describe when\n\
    \   authentication and message integrity are needed.\n   Since STUN uses the HMAC\
    \ of a shared secret for authentication and\n   integrity protection, it is subject\
    \ to offline dictionary attacks.\n   When authentication is utilized, it SHOULD\
    \ be with a strong password\n   that is not readily subject to offline dictionary\
    \ attacks.\n   Protection of the channel itself, using TLS, mitigates these attacks.\n\
    \   However, STUN is most often run over UDP and in those cases, strong\n   passwords\
    \ are the only way to protect against these attacks.\n"
- title: 16.1.2.  Inside Attacks
  contents:
  - "16.1.2.  Inside Attacks\n   A rogue client may try to launch a DoS attack against\
    \ a server by\n   sending it a large number of STUN requests.  Fortunately, STUN\n\
    \   requests can be processed statelessly by a server, making such\n   attacks\
    \ hard to launch.\n   A rogue client may use a STUN server as a reflector, sending\
    \ it\n   requests with a falsified source IP address and port.  In such a\n  \
    \ case, the response would be delivered to that source IP and port.\n   There\
    \ is no amplification of the number of packets with this attack\n   (the STUN\
    \ server sends one packet for each packet sent by the\n   client), though there\
    \ is a small increase in the amount of data,\n   since STUN responses are typically\
    \ larger than requests.  This attack\n   is mitigated by ingress source address\
    \ filtering.\n   Revealing the specific software version of the agent through\
    \ the\n   SOFTWARE attribute might allow them to become more vulnerable to\n \
    \  attacks against software that is known to contain security holes.\n   Implementers\
    \ SHOULD make usage of the SOFTWARE attribute a\n   configurable option.\n"
- title: 16.2.  Attacks Affecting the Usage
  contents:
  - "16.2.  Attacks Affecting the Usage\n   This section lists attacks that might\
    \ be launched against a usage of\n   STUN.  Each STUN usage must consider whether\
    \ these attacks are\n   applicable to it, and if so, discuss counter-measures.\n\
    \   Most of the attacks in this section revolve around an attacker\n   modifying\
    \ the reflexive address learned by a STUN client through a\n   Binding request/response\
    \ transaction.  Since the usage of the\n   reflexive address is a function of\
    \ the usage, the applicability and\n   remediation of these attacks are usage-specific.\
    \  In common\n   situations, modification of the reflexive address by an on-path\n\
    \   attacker is easy to do.  Consider, for example, the common situation\n   where\
    \ STUN is run directly over UDP.  In this case, an on-path\n   attacker can modify\
    \ the source IP address of the Binding request\n   before it arrives at the STUN\
    \ server.  The STUN server will then\n   return this IP address in the XOR-MAPPED-ADDRESS\
    \ attribute to the\n   client, and send the response back to that (falsified)\
    \ IP address and\n   port.  If the attacker can also intercept this response,\
    \ it can\n   direct it back towards the client.  Protecting against this attack\
    \ by\n   using a message-integrity check is impossible, since a message-\n   integrity\
    \ value cannot cover the source IP address, since the\n   intervening NAT must\
    \ be able to modify this value.  Instead, one\n   solution to preventing the attacks\
    \ listed below is for the client to\n   verify the reflexive address learned,\
    \ as is done in ICE [MMUSIC-ICE].\n   Other usages may use other means to prevent\
    \ these attacks.\n"
- title: '16.2.1.  Attack I: Distributed DoS (DDoS) against a Target'
  contents:
  - "16.2.1.  Attack I: Distributed DoS (DDoS) against a Target\n   In this attack,\
    \ the attacker provides one or more clients with the\n   same faked reflexive\
    \ address that points to the intended target.\n   This will trick the STUN clients\
    \ into thinking that their reflexive\n   addresses are equal to that of the target.\
    \  If the clients hand out\n   that reflexive address in order to receive traffic\
    \ on it (for\n   example, in SIP messages), the traffic will instead be sent to\
    \ the\n   target.  This attack can provide substantial amplification,\n   especially\
    \ when used with clients that are using STUN to enable\n   multimedia applications.\
    \  However, it can only be launched against\n   targets for which packets from\
    \ the STUN server to the target pass\n   through the attacker, limiting the cases\
    \ in which it is possible.\n"
- title: '16.2.2.  Attack II: Silencing a Client'
  contents:
  - "16.2.2.  Attack II: Silencing a Client\n   In this attack, the attacker provides\
    \ a STUN client with a faked\n   reflexive address.  The reflexive address it\
    \ provides is a transport\n   address that routes to nowhere.  As a result, the\
    \ client won't\n   receive any of the packets it expects to receive when it hands\
    \ out\n   the reflexive address.  This exploitation is not very interesting for\n\
    \   the attacker.  It impacts a single client, which is frequently not\n   the\
    \ desired target.  Moreover, any attacker that can mount the attack\n   could\
    \ also deny service to the client by other means, such as\n   preventing the client\
    \ from receiving any response from the STUN\n   server, or even a DHCP server.\
    \  As with the attack in Section 16.2.1,\n   this attack is only possible when\
    \ the attacker is on path for packets\n   sent from the STUN server towards this\
    \ unused IP address.\n"
- title: '16.2.3.  Attack III: Assuming the Identity of a Client'
  contents:
  - "16.2.3.  Attack III: Assuming the Identity of a Client\n   This attack is similar\
    \ to attack II.  However, the faked reflexive\n   address points to the attacker\
    \ itself.  This allows the attacker to\n   receive traffic that was destined for\
    \ the client.\n"
- title: '16.2.4.  Attack IV: Eavesdropping'
  contents:
  - "16.2.4.  Attack IV: Eavesdropping\n   In this attack, the attacker forces the\
    \ client to use a reflexive\n   address that routes to itself.  It then forwards\
    \ any packets it\n   receives to the client.  This attack would allow the attacker\
    \ to\n   observe all packets sent to the client.  However, in order to launch\n\
    \   the attack, the attacker must have already been able to observe\n   packets\
    \ from the client to the STUN server.  In most cases (such as\n   when the attack\
    \ is launched from an access network), this means that\n   the attacker could\
    \ already observe packets sent to the client.  This\n   attack is, as a result,\
    \ only useful for observing traffic by\n   attackers on the path from the client\
    \ to the STUN server, but not\n   generally on the path of packets being routed\
    \ towards the client.\n"
- title: 16.3.  Hash Agility Plan
  contents:
  - "16.3.  Hash Agility Plan\n   This specification uses HMAC-SHA-1 for computation\
    \ of the message\n   integrity.  If, at a later time, HMAC-SHA-1 is found to be\n\
    \   compromised, the following is the remedy that will be applied.\n   We will\
    \ define a STUN extension that introduces a new message-\n   integrity attribute,\
    \ computed using a new hash.  Clients would be\n   required to include both the\
    \ new and old message-integrity attributes\n   in their requests or indications.\
    \  A new server will utilize the new\n   message-integrity attribute, and an old\
    \ one, the old.  After a\n   transition period where mixed implementations are\
    \ in deployment, the\n   old message-integrity attribute will be deprecated by\
    \ another\n   specification, and clients will cease including it in requests.\n\
    \   It is also important to note that the HMAC is done using a key that\n   is\
    \ itself computed using an MD5 of the user's password.  The choice\n   of the\
    \ MD5 hash was made because of the existence of legacy databases\n   that store\
    \ passwords in that form.  If future work finds that an HMAC\n   of an MD5 input\
    \ is not secure, and a different hash is needed, it can\n   also be changed using\
    \ this plan.  However, this would require\n   administrators to repopulate their\
    \ databases.\n"
- title: 17.  IAB Considerations
  contents:
  - "17.  IAB Considerations\n   The IAB has studied the problem of Unilateral Self-Address\
    \ Fixing\n   (UNSAF), which is the general process by which a client attempts\
    \ to\n   determine its address in another realm on the other side of a NAT\n \
    \  through a collaborative protocol reflection mechanism (RFC3424\n   [RFC3424]).\
    \  STUN can be used to perform this function using a\n   Binding request/response\
    \ transaction if one agent is behind a NAT and\n   the other is on the public\
    \ side of the NAT.\n   The IAB has mandated that protocols developed for this\
    \ purpose\n   document a specific set of considerations.  Because some STUN usages\n\
    \   provide UNSAF functions (such as ICE [MMUSIC-ICE] ), and others do\n   not\
    \ (such as SIP Outbound [SIP-OUTBOUND]), answers to these\n   considerations need\
    \ to be addressed by the usages themselves.\n"
- title: 18.  IANA Considerations
  contents:
  - "18.  IANA Considerations\n   IANA has created three new registries: a \"STUN\
    \ Methods Registry\", a\n   \"STUN Attributes Registry\", and a \"STUN Error Codes\
    \ Registry\".  IANA\n   has also changed the name of the assigned IANA port for\
    \ STUN from\n   \"nat-stun-port\" to \"stun\".\n"
- title: 18.1.  STUN Methods Registry
  contents:
  - "18.1.  STUN Methods Registry\n   A STUN method is a hex number in the range 0x000\
    \ - 0xFFF.  The\n   encoding of STUN method into a STUN message is described in\n\
    \   Section 6.\n   The initial STUN methods are:\n   0x000: (Reserved)\n   0x001:\
    \ Binding\n   0x002: (Reserved; was SharedSecret)\n   STUN methods in the range\
    \ 0x000 - 0x7FF are assigned by IETF Review\n   [RFC5226].  STUN methods in the\
    \ range 0x800 - 0xFFF are assigned by\n   Designated Expert [RFC5226].  The responsibility\
    \ of the expert is to\n   verify that the selected codepoint(s) are not in use\
    \ and that the\n   request is not for an abnormally large number of codepoints.\n\
    \   Technical review of the extension itself is outside the scope of the\n   designated\
    \ expert responsibility.\n"
- title: 18.2.  STUN Attribute Registry
  contents:
  - "18.2.  STUN Attribute Registry\n   A STUN Attribute type is a hex number in the\
    \ range 0x0000 - 0xFFFF.\n   STUN attribute types in the range 0x0000 - 0x7FFF\
    \ are considered\n   comprehension-required; STUN attribute types in the range\
    \ 0x8000 -\n   0xFFFF are considered comprehension-optional.  A STUN agent handles\n\
    \   unknown comprehension-required and comprehension-optional attributes\n   differently.\n\
    \   The initial STUN Attributes types are:\n   Comprehension-required range (0x0000-0x7FFF):\n\
    \     0x0000: (Reserved)\n     0x0001: MAPPED-ADDRESS\n     0x0002: (Reserved;\
    \ was RESPONSE-ADDRESS)\n     0x0003: (Reserved; was CHANGE-ADDRESS)\n     0x0004:\
    \ (Reserved; was SOURCE-ADDRESS)\n     0x0005: (Reserved; was CHANGED-ADDRESS)\n\
    \     0x0006: USERNAME\n     0x0007: (Reserved; was PASSWORD)\n     0x0008: MESSAGE-INTEGRITY\n\
    \     0x0009: ERROR-CODE\n     0x000A: UNKNOWN-ATTRIBUTES\n     0x000B: (Reserved;\
    \ was REFLECTED-FROM)\n     0x0014: REALM\n     0x0015: NONCE\n     0x0020: XOR-MAPPED-ADDRESS\n\
    \   Comprehension-optional range (0x8000-0xFFFF)\n     0x8022: SOFTWARE\n    \
    \ 0x8023: ALTERNATE-SERVER\n     0x8028: FINGERPRINT\n   STUN Attribute types\
    \ in the first half of the comprehension-required\n   range (0x0000 - 0x3FFF)\
    \ and in the first half of the comprehension-\n   optional range (0x8000 - 0xBFFF)\
    \ are assigned by IETF Review\n   [RFC5226].  STUN Attribute types in the second\
    \ half of the\n   comprehension-required range (0x4000 - 0x7FFF) and in the second\
    \ half\n   of the comprehension-optional range (0xC000 - 0xFFFF) are assigned\
    \ by\n   Designated Expert [RFC5226].  The responsibility of the expert is to\n\
    \   verify that the selected codepoint(s) are not in use, and that the\n   request\
    \ is not for an abnormally large number of codepoints.\n   Technical review of\
    \ the extension itself is outside the scope of the\n   designated expert responsibility.\n"
- title: 18.3.  STUN Error Code Registry
  contents:
  - "18.3.  STUN Error Code Registry\n   A STUN error code is a number in the range\
    \ 0 - 699.  STUN error codes\n   are accompanied by a textual reason phrase in\
    \ UTF-8 [RFC3629] that is\n   intended only for human consumption and can be anything\
    \ appropriate;\n   this document proposes only suggested values.\n   STUN error\
    \ codes are consistent in codepoint assignments and\n   semantics with SIP [RFC3261]\
    \ and HTTP [RFC2616].\n   The initial values in this registry are given in Section\
    \ 15.6.\n   New STUN error codes are assigned based on IETF Review [RFC5226].\n\
    \   The specification must carefully consider how clients that do not\n   understand\
    \ this error code will process it before granting the\n   request.  See the rules\
    \ in Section 7.3.4.\n"
- title: 18.4.  STUN UDP and TCP Port Numbers
  contents:
  - "18.4.  STUN UDP and TCP Port Numbers\n   IANA has previously assigned port 3478\
    \ for STUN.  This port appears\n   in the IANA registry under the moniker \"nat-stun-port\"\
    .  In order to\n   align the DNS SRV procedures with the registered protocol service,\n\
    \   IANA is requested to change the name of protocol assigned to port\n   3478\
    \ from \"nat-stun-port\" to \"stun\", and the textual name from\n   \"Simple Traversal\
    \ of UDP Through NAT (STUN)\" to \"Session Traversal\n   Utilities for NAT\",\
    \ so that the IANA port registry would read:\n   stun   3478/tcp   Session Traversal\
    \ Utilities for NAT (STUN) port\n   stun   3478/udp   Session Traversal Utilities\
    \ for NAT (STUN) port\n   In addition, IANA has assigned port number 5349 for\
    \ the \"stuns\"\n   service, defined over TCP and UDP.  The UDP port is not currently\n\
    \   defined; however, it is reserved for future use.\n"
- title: 19.  Changes since RFC 3489
  contents:
  - "19.  Changes since RFC 3489\n   This specification obsoletes RFC 3489 [RFC3489].\
    \  This specification\n   differs from RFC 3489 in the following ways:\n   o \
    \ Removed the notion that STUN is a complete NAT traversal solution.\n      STUN\
    \ is now a tool that can be used to produce a NAT traversal\n      solution. \
    \ As a consequence, changed the name of the protocol to\n      Session Traversal\
    \ Utilities for NAT.\n   o  Introduced the concept of STUN usages, and described\
    \ what a usage\n      of STUN must document.\n   o  Removed the usage of STUN\
    \ for NAT type detection and binding\n      lifetime discovery.  These techniques\
    \ have proven overly brittle\n      due to wider variations in the types of NAT\
    \ devices than described\n      in this document.  Removed the RESPONSE-ADDRESS,\
    \ CHANGED-ADDRESS,\n      CHANGE-REQUEST, SOURCE-ADDRESS, and REFLECTED-FROM attributes.\n\
    \   o  Added a fixed 32-bit magic cookie and reduced length of\n      transaction\
    \ ID by 32 bits.  The magic cookie begins at the same\n      offset as the original\
    \ transaction ID.\n   o  Added the XOR-MAPPED-ADDRESS attribute, which is included\
    \ in\n      Binding responses if the magic cookie is present in the request.\n\
    \      Otherwise, the RFC 3489 behavior is retained (that is, Binding\n      response\
    \ includes MAPPED-ADDRESS).  See discussion in XOR-MAPPED-\n      ADDRESS regarding\
    \ this change.\n   o  Introduced formal structure into the message type header\
    \ field,\n      with an explicit pair of bits for indication of request, response,\n\
    \      error response, or indication.  Consequently, the message type\n      field\
    \ is split into the class (one of the previous four) and\n      method.\n   o\
    \  Explicitly point out that the most significant 2 bits of STUN are\n      0b00,\
    \ allowing easy differentiation with RTP packets when used\n      with ICE.\n\
    \   o  Added the FINGERPRINT attribute to provide a method of definitely\n   \
    \   detecting the difference between STUN and another protocol when\n      the\
    \ two protocols are multiplexed together.\n   o  Added support for IPv6.  Made\
    \ it clear that an IPv4 client could\n      get a v6 mapped address, and vice\
    \ versa.\n   o  Added long-term-credential-based authentication.\n   o  Added\
    \ the SOFTWARE, REALM, NONCE, and ALTERNATE-SERVER attributes.\n   o  Removed\
    \ the SharedSecret method, and thus the PASSWORD attribute.\n      This method\
    \ was almost never implemented and is not needed with\n      current usages.\n\
    \   o  Removed recommendation to continue listening for STUN responses\n     \
    \ for 10 seconds in an attempt to recognize an attack.\n   o  Changed transaction\
    \ timers to be more TCP friendly.\n   o  Removed the STUN example that centered\
    \ around the separation of\n      the control and media planes.  Instead, provided\
    \ more information\n      on using STUN with protocols.\n   o  Defined a generic\
    \ padding mechanism that changes the\n      interpretation of the length attribute.\
    \  This would, in theory,\n      break backwards compatibility.  However, the\
    \ mechanism in RFC 3489\n      never worked for the few attributes that weren't\
    \ aligned naturally\n      on 32-bit boundaries.\n   o  REALM, SERVER, reason\
    \ phrases, and NONCE limited to 127\n      characters.  USERNAME to 513 bytes.\n\
    \   o  Changed the DNS SRV procedures for TCP and TLS.  UDP remains the\n    \
    \  same as before.\n"
- title: 20.  Contributors
  contents:
  - "20.  Contributors\n   Christian Huitema and Joel Weinberger were original co-authors\
    \ of RFC\n   3489.\n"
- title: 21.  Acknowledgements
  contents:
  - "21.  Acknowledgements\n   The authors would like to thank Cedric Aoun, Pete Cordell,\
    \ Cullen\n   Jennings, Bob Penfield, Xavier Marjou, Magnus Westerlund, Miguel\n\
    \   Garcia, Bruce Lowekamp, and Chris Sullivan for their comments, and\n   Baruch\
    \ Sterman and Alan Hawrylyshen for initial implementations.\n   Thanks for Leslie\
    \ Daigle, Allison Mankin, Eric Rescorla, and Henning\n   Schulzrinne for IESG\
    \ and IAB input on this work.\n"
- title: 22.  References
  contents:
  - '22.  References

    '
- title: 22.1.  Normative References
  contents:
  - "22.1.  Normative References\n   [ITU.V42.2002]    International Telecommunications\
    \ Union, \"Error-\n                     correcting Procedures for DCEs Using Asynchronous-\n\
    \                     to-Synchronous Conversion\", ITU-T Recommendation\n    \
    \                 V.42, March 2002.\n   [RFC0791]         Postel, J., \"Internet\
    \ Protocol\", STD 5, RFC 791,\n                     September 1981.\n   [RFC1122]\
    \         Braden, R., \"Requirements for Internet Hosts -\n                  \
    \   Communication Layers\", STD 3, RFC 1122,\n                     October 1989.\n\
    \   [RFC1321]         Rivest, R., \"The MD5 Message-Digest Algorithm\",\n    \
    \                 RFC 1321, April 1992.\n   [RFC2104]         Krawczyk, H., Bellare,\
    \ M., and R. Canetti, \"HMAC:\n                     Keyed-Hashing for Message\
    \ Authentication\",\n                     RFC 2104, February 1997.\n   [RFC2119]\
    \         Bradner, S., \"Key words for use in RFCs to Indicate\n             \
    \        Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2460]   \
    \      Deering, S. and R. Hinden, \"Internet Protocol,\n                     Version\
    \ 6 (IPv6) Specification\", RFC 2460,\n                     December 1998.\n \
    \  [RFC2617]         Franks, J., Hallam-Baker, P., Hostetler, J.,\n          \
    \           Lawrence, S., Leach, P., Luotonen, A., and L.\n                  \
    \   Stewart, \"HTTP Authentication: Basic and Digest\n                     Access\
    \ Authentication\", RFC 2617, June 1999.\n   [RFC2782]         Gulbrandsen, A.,\
    \ Vixie, P., and L. Esibov, \"A DNS\n                     RR for specifying the\
    \ location of services (DNS\n                     SRV)\", RFC 2782, February 2000.\n\
    \   [RFC2818]         Rescorla, E., \"HTTP Over TLS\", RFC 2818, May 2000.\n \
    \  [RFC2988]         Paxson, V. and M. Allman, \"Computing TCP's\n           \
    \          Retransmission Timer\", RFC 2988, November 2000.\n   [RFC3629]    \
    \     Yergeau, F., \"UTF-8, a transformation format of ISO\n                 \
    \    10646\", STD 63, RFC 3629, November 2003.\n   [RFC4013]         Zeilenga,\
    \ K., \"SASLprep: Stringprep Profile for\n                     User Names and\
    \ Passwords\", RFC 4013, February 2005.\n"
- title: 22.2.  Informative References
  contents:
  - "22.2.  Informative References\n   [BEHAVE-NAT]      MacDonald, D. and B. Lowekamp,\
    \ \"NAT Behavior\n                     Discovery Using STUN\", Work in Progress,\
    \ July 2008.\n   [BEHAVE-TURN]     Rosenberg, J., Mahy, R., and P. Matthews,\n\
    \                     \"Traversal Using Relays around NAT (TURN): Relay\n    \
    \                 Extensions to Session  Traversal Utilities for NAT\n       \
    \              (STUN)\", Work in Progress, July 2008.\n   [KARN87]          Karn,\
    \ P. and C. Partridge, \"Improving Round-Trip\n                     Time Estimates\
    \ in Reliable Transport Protocols\",\n                     SIGCOMM 1987, August\
    \ 1987.\n   [MMUSIC-ICE]      Rosenberg, J., \"Interactive Connectivity\n    \
    \                 Establishment (ICE): A Protocol for Network Address\n      \
    \               Translator (NAT) Traversal for Offer/Answer\n                \
    \     Protocols\", Work in Progress, October 2007.\n   [MMUSIC-ICE-TCP]  Rosenberg,\
    \ J., \"TCP Candidates with Interactive\n                     Connectivity Establishment\
    \ (ICE)\", Work\n                     in Progress, July 2008.\n   [RFC2616]  \
    \       Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n                  \
    \   Masinter, L., Leach, P., and T. Berners-Lee,\n                     \"Hypertext\
    \ Transfer Protocol -- HTTP/1.1\",\n                     RFC 2616, June 1999.\n\
    \   [RFC3261]         Rosenberg, J., Schulzrinne, H., Camarillo, G.,\n       \
    \              Johnston, A., Peterson, J., Sparks, R., Handley,\n            \
    \         M., and E. Schooler, \"SIP: Session Initiation\n                   \
    \  Protocol\", RFC 3261, June 2002.\n   [RFC3264]         Rosenberg, J. and H.\
    \ Schulzrinne, \"An Offer/Answer\n                     Model with Session Description\
    \ Protocol (SDP)\",\n                     RFC 3264, June 2002.\n   [RFC3424] \
    \        Daigle, L. and IAB, \"IAB Considerations for\n                     UNilateral\
    \ Self-Address Fixing (UNSAF) Across\n                     Network Address Translation\"\
    , RFC 3424,\n                     November 2002.\n   [RFC3489]         Rosenberg,\
    \ J., Weinberger, J., Huitema, C., and R.\n                     Mahy, \"STUN -\
    \ Simple Traversal of User Datagram\n                     Protocol (UDP) Through\
    \ Network Address Translators\n                     (NATs)\", RFC 3489, March\
    \ 2003.\n   [RFC4107]         Bellovin, S. and R. Housley, \"Guidelines for\n\
    \                     Cryptographic Key Management\", BCP 107, RFC 4107,\n   \
    \                  June 2005.\n   [RFC5226]         Narten, T. and H. Alvestrand,\
    \ \"Guidelines for\n                     Writing an IANA Considerations Section\
    \ in RFCs\",\n                     BCP 26, RFC 5226, May 2008.\n   [SIP-OUTBOUND]\
    \    Jennings, C. and R. Mahy, \"Managing Client\n                     Initiated\
    \ Connections in the Session Initiation\n                     Protocol  (SIP)\"\
    , Work in Progress, June 2008.\n"
- title: Appendix A.  C Snippet to Determine STUN Message Types
  contents:
  - "Appendix A.  C Snippet to Determine STUN Message Types\n   Given a 16-bit STUN\
    \ message type value in host byte order in msg_type\n   parameter, below are C\
    \ macros to determine the STUN message types:\n   #define IS_REQUEST(msg_type)\
    \       (((msg_type) & 0x0110) == 0x0000)\n   #define IS_INDICATION(msg_type)\
    \    (((msg_type) & 0x0110) == 0x0010)\n   #define IS_SUCCESS_RESP(msg_type) \
    \ (((msg_type) & 0x0110) == 0x0100)\n   #define IS_ERR_RESP(msg_type)      (((msg_type)\
    \ & 0x0110) == 0x0110)\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jonathan Rosenberg\n   Cisco\n   Edison, NJ\n   US\n \
    \  EMail: jdrosen@cisco.com\n   URI:   http://www.jdrosen.net\n   Rohan Mahy\n\
    \   Unaffiliated\n   EMail: rohan@ekabal.com\n   Philip Matthews\n   Unaffiliated\n\
    \   EMail: philip_matthews@magma.ca\n   Dan Wing\n   Cisco\n   771 Alder Drive\n\
    \   San Jose, CA  95035\n   US\n   EMail: dwing@cisco.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
