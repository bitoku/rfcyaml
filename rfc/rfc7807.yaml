- title: __initial_text__
  contents:
  - '                     Problem Details for HTTP APIs

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines a \"problem detail\" as a way to carry machine-\n\
    \   readable details of errors in a HTTP response to avoid the need to\n   define\
    \ new error response formats for HTTP APIs.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7807.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  Requirements  . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   3\n   3.  The Problem Details JSON Object . . . . . . . . . . . .\
    \ . . .   3\n     3.1.  Members of a Problem Details Object . . . . . . . . .\
    \ . .   5\n     3.2.  Extension Members . . . . . . . . . . . . . . . . . . .\
    \ .   6\n   4.  Defining New Problem Types  . . . . . . . . . . . . . . . . .\
    \   6\n     4.1.  Example . . . . . . . . . . . . . . . . . . . . . . . . .  \
    \ 7\n     4.2.  Predefined Problem Types  . . . . . . . . . . . . . . . .   8\n\
    \   5.  Security Considerations . . . . . . . . . . . . . . . . . . .   8\n  \
    \ 6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   9\n    \
    \ 6.1.  application/problem+json  . . . . . . . . . . . . . . . .   9\n     6.2.\
    \  application/problem+xml . . . . . . . . . . . . . . . . .  10\n   7.  References\
    \  . . . . . . . . . . . . . . . . . . . . . . . . .  11\n     7.1.  Normative\
    \ References  . . . . . . . . . . . . . . . . . .  11\n     7.2.  Informative\
    \ References  . . . . . . . . . . . . . . . . .  12\n   Appendix A.  HTTP Problems\
    \ and XML  . . . . . . . . . . . . . . .  14\n   Appendix B.  Using Problem Details\
    \ with Other Formats . . . . . .  15\n   Acknowledgements  . . . . . . . . . .\
    \ . . . . . . . . . . . . . .  16\n   Authors' Addresses  . . . . . . . . . .\
    \ . . . . . . . . . . . . .  16\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   HTTP [RFC7230] status codes are sometimes not sufficient\
    \ to convey\n   enough information about an error to be helpful.  While humans\
    \ behind\n   Web browsers can be informed about the nature of the problem with\
    \ an\n   HTML [W3C.REC-html5-20141028] response body, non-human consumers of\n\
    \   so-called \"HTTP APIs\" are usually not.\n   This specification defines simple\
    \ JSON [RFC7159] and XML\n   [W3C.REC-xml-20081126] document formats to suit this\
    \ purpose.  They\n   are designed to be reused by HTTP APIs, which can identify\
    \ distinct\n   \"problem types\" specific to their needs.\n   Thus, API clients\
    \ can be informed of both the high-level error class\n   (using the status code)\
    \ and the finer-grained details of the problem\n   (using one of these formats).\n\
    \   For example, consider a response that indicates that the client's\n   account\
    \ doesn't have enough credit.  The 403 Forbidden status code\n   might be deemed\
    \ most appropriate to use, as it will inform HTTP-\n   generic software (such\
    \ as client libraries, caches, and proxies) of\n   the general semantics of the\
    \ response.\n   However, that doesn't give the API client enough information about\n\
    \   why the request was forbidden, the applicable account balance, or how\n  \
    \ to correct the problem.  If these details are included in the\n   response body\
    \ in a machine-readable format, the client can treat it\n   appropriately; for\
    \ example, triggering a transfer of more credit into\n   the account.\n   This\
    \ specification does this by identifying a specific type of\n   problem (e.g.,\
    \ \"out of credit\") with a URI [RFC3986]; HTTP APIs can\n   do this by nominating\
    \ new URIs under their control, or by reusing\n   existing ones.\n   Additionally,\
    \ problem details can contain other information, such as\n   a URI that identifies\
    \ the specific occurrence of the problem\n   (effectively giving an identifier\
    \ to the concept \"The time Joe didn't\n   have enough credit last Thursday\"\
    ), which can be useful for support\n   or forensic purposes.\n   The data model\
    \ for problem details is a JSON [RFC7159] object; when\n   formatted as a JSON\
    \ document, it uses the \"application/problem+json\"\n   media type.  Appendix\
    \ A defines how to express them in an equivalent\n   XML format, which uses the\
    \ \"application/problem+xml\" media type.\n   Note that problem details are (naturally)\
    \ not the only way to convey\n   the details of a problem in HTTP; if the response\
    \ is still a\n   representation of a resource, for example, it's often preferable\
    \ to\n   accommodate describing the relevant details in that application's\n \
    \  format.  Likewise, in many situations, there is an appropriate HTTP\n   status\
    \ code that does not require extra detail to be conveyed.\n   Instead, the aim\
    \ of this specification is to define common error\n   formats for those applications\
    \ that need one, so that they aren't\n   required to define their own, or worse,\
    \ tempted to redefine the\n   semantics of existing HTTP status codes.  Even if\
    \ an application\n   chooses not to use it to convey errors, reviewing its design\
    \ can help\n   guide the design decisions faced when conveying errors in an existing\n\
    \   format.\n"
- title: 2.  Requirements
  contents:
  - "2.  Requirements\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
- title: 3.  The Problem Details JSON Object
  contents:
  - "3.  The Problem Details JSON Object\n   The canonical model for problem details\
    \ is a JSON [RFC7159] object.\n   When serialized as a JSON document, that format\
    \ is identified with\n   the \"application/problem+json\" media type.\n   For\
    \ example, an HTTP response carrying JSON problem details:\n   HTTP/1.1 403 Forbidden\n\
    \   Content-Type: application/problem+json\n   Content-Language: en\n   {\n  \
    \  \"type\": \"https://example.com/probs/out-of-credit\",\n    \"title\": \"You\
    \ do not have enough credit.\",\n    \"detail\": \"Your current balance is 30,\
    \ but that costs 50.\",\n    \"instance\": \"/account/12345/msgs/abc\",\n    \"\
    balance\": 30,\n    \"accounts\": [\"/account/12345\",\n                 \"/account/67890\"\
    ]\n   }\n   Here, the out-of-credit problem (identified by its type URI)\n   indicates\
    \ the reason for the 403 in \"title\", gives a reference for\n   the specific\
    \ problem occurrence with \"instance\", gives occurrence-\n   specific details\
    \ in \"detail\", and adds two extensions; \"balance\"\n   conveys the account's\
    \ balance, and \"accounts\" gives links where the\n   account can be topped up.\n\
    \   The ability to convey problem-specific extensions allows more than\n   one\
    \ problem to be conveyed.  For example:\n   HTTP/1.1 400 Bad Request\n   Content-Type:\
    \ application/problem+json\n   Content-Language: en\n   {\n   \"type\": \"https://example.net/validation-error\"\
    ,\n   \"title\": \"Your request parameters didn't validate.\",\n   \"invalid-params\"\
    : [ {\n                         \"name\": \"age\",\n                         \"\
    reason\": \"must be a positive integer\"\n                       },\n        \
    \               {\n                         \"name\": \"color\",\n           \
    \              \"reason\": \"must be 'green', 'red' or 'blue'\"}\n           \
    \          ]\n   }\n   Note that this requires each of the subproblems to be similar\
    \ enough\n   to use the same HTTP status code.  If they do not, the 207 (Multi-\n\
    \   Status) [RFC4918] code could be used to encapsulate multiple status\n   messages.\n"
- title: 3.1.  Members of a Problem Details Object
  contents:
  - "3.1.  Members of a Problem Details Object\n   A problem details object can have\
    \ the following members:\n   o  \"type\" (string) - A URI reference [RFC3986]\
    \ that identifies the\n      problem type.  This specification encourages that,\
    \ when\n      dereferenced, it provide human-readable documentation for the\n\
    \      problem type (e.g., using HTML [W3C.REC-html5-20141028]).  When\n     \
    \ this member is not present, its value is assumed to be\n      \"about:blank\"\
    .\n   o  \"title\" (string) - A short, human-readable summary of the problem\n\
    \      type.  It SHOULD NOT change from occurrence to occurrence of the\n    \
    \  problem, except for purposes of localization (e.g., using\n      proactive\
    \ content negotiation; see [RFC7231], Section 3.4).\n   o  \"status\" (number)\
    \ - The HTTP status code ([RFC7231], Section 6)\n      generated by the origin\
    \ server for this occurrence of the problem.\n   o  \"detail\" (string) - A human-readable\
    \ explanation specific to this\n      occurrence of the problem.\n   o  \"instance\"\
    \ (string) - A URI reference that identifies the specific\n      occurrence of\
    \ the problem.  It may or may not yield further\n      information if dereferenced.\n\
    \   Consumers MUST use the \"type\" string as the primary identifier for\n   the\
    \ problem type; the \"title\" string is advisory and included only\n   for users\
    \ who are not aware of the semantics of the URI and do not\n   have the ability\
    \ to discover them (e.g., offline log analysis).\n   Consumers SHOULD NOT automatically\
    \ dereference the type URI.\n   The \"status\" member, if present, is only advisory;\
    \ it conveys the\n   HTTP status code used for the convenience of the consumer.\n\
    \   Generators MUST use the same status code in the actual HTTP response,\n  \
    \ to assure that generic HTTP software that does not understand this\n   format\
    \ still behaves correctly.  See Section 5 for further caveats\n   regarding its\
    \ use.\n   Consumers can use the status member to determine what the original\n\
    \   status code used by the generator was, in cases where it has been\n   changed\
    \ (e.g., by an intermediary or cache), and when message bodies\n   persist without\
    \ HTTP information.  Generic HTTP software will still\n   use the HTTP status\
    \ code.\n   The \"detail\" member, if present, ought to focus on helping the client\n\
    \   correct the problem, rather than giving debugging information.\n   Consumers\
    \ SHOULD NOT parse the \"detail\" member for information;\n   extensions are more\
    \ suitable and less error-prone ways to obtain such\n   information.\n   Note\
    \ that both \"type\" and \"instance\" accept relative URIs; this means\n   that\
    \ they must be resolved relative to the document's base URI, as\n   per [RFC3986],\
    \ Section 5.\n"
- title: 3.2.  Extension Members
  contents:
  - "3.2.  Extension Members\n   Problem type definitions MAY extend the problem details\
    \ object with\n   additional members.\n   For example, our \"out of credit\" problem\
    \ above defines two such\n   extensions -- \"balance\" and \"accounts\" to convey\
    \ additional, problem-\n   specific information.\n   Clients consuming problem\
    \ details MUST ignore any such extensions\n   that they don't recognize; this\
    \ allows problem types to evolve and\n   include additional information in the\
    \ future.\n   Note that because extensions are effectively put into a namespace\
    \ by\n   the problem type, it is not possible to define new \"standard\" members\n\
    \   without defining a new media type.\n"
- title: 4.  Defining New Problem Types
  contents:
  - "4.  Defining New Problem Types\n   When an HTTP API needs to define a response\
    \ that indicates an error\n   condition, it might be appropriate to do so by defining\
    \ a new problem\n   type.\n   Before doing so, it's important to understand what\
    \ they are good for,\n   and what's better left to other mechanisms.\n   Problem\
    \ details are not a debugging tool for the underlying\n   implementation; rather,\
    \ they are a way to expose greater detail about\n   the HTTP interface itself.\
    \  Designers of new problem types need to\n   carefully consider the Security\
    \ Considerations (Section 5), in\n   particular, the risk of exposing attack vectors\
    \ by exposing\n   implementation internals through error messages.\n   Likewise,\
    \ truly generic problems -- i.e., conditions that could\n   potentially apply\
    \ to any resource on the Web -- are usually better\n   expressed as plain status\
    \ codes.  For example, a \"write access\n   disallowed\" problem is probably unnecessary,\
    \ since a 403 Forbidden\n   status code in response to a PUT request is self-explanatory.\n\
    \   Finally, an application might have a more appropriate way to carry an\n  \
    \ error in a format that it already defines.  Problem details are\n   intended\
    \ to avoid the necessity of establishing new \"fault\" or\n   \"error\" document\
    \ formats, not to replace existing domain-specific\n   formats.\n   That said,\
    \ it is possible to add support for problem details to\n   existing HTTP APIs\
    \ using HTTP content negotiation (e.g., using the\n   Accept request header to\
    \ indicate a preference for this format; see\n   [RFC7231], Section 5.3.2).\n\
    \   New problem type definitions MUST document:\n   1.  a type URI (typically,\
    \ with the \"http\" or \"https\" scheme),\n   2.  a title that appropriately describes\
    \ it (think short), and\n   3.  the HTTP status code for it to be used with.\n\
    \   Problem type definitions MAY specify the use of the Retry-After\n   response\
    \ header ([RFC7231], Section 7.1.3) in appropriate\n   circumstances.\n   A problem's\
    \ type URI SHOULD resolve to HTML [W3C.REC-html5-20141028]\n   documentation that\
    \ explains how to resolve the problem.\n   A problem type definition MAY specify\
    \ additional members on the\n   problem details object.  For example, an extension\
    \ might use typed\n   links [RFC5988] to another resource that can be used by\
    \ machines to\n   resolve the problem.\n   If such additional members are defined,\
    \ their names SHOULD start with\n   a letter (ALPHA, as per [RFC5234], Appendix\
    \ B.1) and SHOULD consist\n   of characters from ALPHA, DIGIT ([RFC5234], Appendix\
    \ B.1), and \"_\"\n   (so that it can be serialized in formats other than JSON),\
    \ and they\n   SHOULD be three characters or longer.\n"
- title: 4.1.  Example
  contents:
  - "4.1.  Example\n   For example, if you are publishing an HTTP API to your online\n\
    \   shopping cart, you might need to indicate that the user is out of\n   credit\
    \ (our example from above), and therefore cannot make the\n   purchase.\n   If\
    \ you already have an application-specific format that can\n   accommodate this\
    \ information, it's probably best to do that.\n   However, if you don't, you might\
    \ consider using one of the problem\n   details formats -- JSON if your API is\
    \ JSON-based, or XML if it uses\n   that format.\n   To do so, you might look\
    \ for an already-defined type URI that suits\n   your purposes.  If one is available,\
    \ you can reuse that URI.\n   If one isn't available, you could mint and document\
    \ a new type URI\n   (which ought to be under your control and stable over time),\
    \ an\n   appropriate title and the HTTP status code that it will be used with,\n\
    \   along with what it means and how it should be handled.\n   In summary: an\
    \ instance URI will always identify a specific\n   occurrence of a problem.  On\
    \ the other hand, type URIs can be reused\n   if an appropriate description of\
    \ a problem type is already available\n   someplace else, or they can be created\
    \ for new problem types.\n"
- title: 4.2.  Predefined Problem Types
  contents:
  - "4.2.  Predefined Problem Types\n   This specification reserves the use of one\
    \ URI as a problem type:\n   The \"about:blank\" URI [RFC6694], when used as a\
    \ problem type,\n   indicates that the problem has no additional semantics beyond\
    \ that of\n   the HTTP status code.\n   When \"about:blank\" is used, the title\
    \ SHOULD be the same as the\n   recommended HTTP status phrase for that code (e.g.,\
    \ \"Not Found\" for\n   404, and so on), although it MAY be localized to suit\
    \ client\n   preferences (expressed with the Accept-Language request header).\n\
    \   Please note that according to how the \"type\" member is defined\n   (Section\
    \ 3.1), the \"about:blank\" URI is the default value for that\n   member.  Consequently,\
    \ any problem details object not carrying an\n   explicit \"type\" member implicitly\
    \ uses this URI.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   When defining a new problem type, the information\
    \ included must be\n   carefully vetted.  Likewise, when actually generating a\
    \ problem --\n   however it is serialized -- the details given must also be\n\
    \   scrutinized.\n   Risks include leaking information that can be exploited to\
    \ compromise\n   the system, access to the system, or the privacy of users of\
    \ the\n   system.\n   Generators providing links to occurrence information are\
    \ encouraged\n   to avoid making implementation details such as a stack dump available\n\
    \   through the HTTP interface, since this can expose sensitive details\n   of\
    \ the server implementation, its data, and so on.\n   The \"status\" member duplicates\
    \ the information available in the HTTP\n   status code itself, thereby bringing\
    \ the possibility of disagreement\n   between the two.  Their relative precedence\
    \ is not clear, since a\n   disagreement might indicate that (for example) an\
    \ intermediary has\n   modified the HTTP status code in transit (e.g., by a proxy\
    \ or cache).\n   As such, those defining problem types as well as generators and\n\
    \   consumers of problems need to be aware that generic software (such as\n  \
    \ proxies, load balancers, firewalls, and virus scanners) are unlikely\n   to\
    \ know of or respect the status code conveyed in this member.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   This specification defines two new Internet media\
    \ types [RFC6838].\n"
- title: 6.1.  application/problem+json
  contents:
  - "6.1.  application/problem+json\n   Type name:  application\n   Subtype name:\
    \  problem+json\n   Required parameters:  None\n   Optional parameters:  None;\
    \ unrecognized parameters should be ignored\n   Encoding considerations:  Same\
    \ as [RFC7159]\n   Security considerations:  see Section 5 of this document\n\
    \   Interoperability considerations:  None\n   Published specification:  RFC 7807\
    \ (this document)\n   Applications that use this media type:  HTTP\n   Fragment\
    \ identifier considerations:  Same as for application/json\n      ([RFC7159])\n\
    \   Additional information:\n      Deprecated alias names for this type:  n/a\n\
    \      Magic number(s):  n/a\n      File extension(s):  n/a\n      Macintosh file\
    \ type code(s):  n/a\n   Person and email address to contact for further information:\n\
    \      Mark Nottingham <mnot@mnot.net>\n   Intended usage:  COMMON\n   Restrictions\
    \ on usage:  None.\n   Author:  Mark Nottingham <mnot@mnot.net>\n   Change controller:\
    \  IESG\n"
- title: 6.2.  application/problem+xml
  contents:
  - "6.2.  application/problem+xml\n   Type name:  application\n   Subtype name: \
    \ problem+xml\n   Required parameters:  None\n   Optional parameters:  None; unrecognized\
    \ parameters should be ignored\n   Encoding considerations:  Same as [RFC7303]\n\
    \   Security considerations:  see Section 5 of this document\n   Interoperability\
    \ considerations:  None\n   Published specification:  RFC 7807 (this document)\n\
    \   Applications that use this media type:  HTTP\n   Fragment identifier considerations:\
    \  Same as for application/xml (as\n      specified by Section 5 of [RFC7303])\n\
    \   Additional information:\n      Deprecated alias names for this type:  n/a\n\
    \      Magic number(s):  n/a\n      File extension(s):  n/a\n      Macintosh file\
    \ type code(s):  n/a\n   Person and email address to contact for further information:\n\
    \      Mark Nottingham <mnot@mnot.net>\n   Intended usage:  COMMON\n   Restrictions\
    \ on usage:  None.\n   Author:  Mark Nottingham <mnot@mnot.net>\n   Change controller:\
    \  IESG\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n   \
    \           Resource Identifier (URI): Generic Syntax\", STD 66,\n           \
    \   RFC 3986, DOI 10.17487/RFC3986, January 2005,\n              <http://www.rfc-editor.org/info/rfc3986>.\n\
    \   [RFC5234]  Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n \
    \             Specifications: ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234,\
    \ January 2008,\n              <http://www.rfc-editor.org/info/rfc5234>.\n   [RFC7159]\
    \  Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data\n             \
    \ Interchange Format\", RFC 7159, DOI 10.17487/RFC7159, March\n              2014,\
    \ <http://www.rfc-editor.org/info/rfc7159>.\n   [RFC7230]  Fielding, R., Ed. and\
    \ J. Reschke, Ed., \"Hypertext Transfer\n              Protocol (HTTP/1.1): Message\
    \ Syntax and Routing\",\n              RFC 7230, DOI 10.17487/RFC7230, June 2014,\n\
    \              <http://www.rfc-editor.org/info/rfc7230>.\n   [RFC7231]  Fielding,\
    \ R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol (HTTP/1.1):\
    \ Semantics and Content\", RFC 7231,\n              DOI 10.17487/RFC7231, June\
    \ 2014,\n              <http://www.rfc-editor.org/info/rfc7231>.\n   [W3C.REC-xml-20081126]\n\
    \              Bray, T., Paoli, J., Sperberg-McQueen, M., Maler, E., and\n   \
    \           F. Yergeau, \"Extensible Markup Language (XML) 1.0 (Fifth\n      \
    \        Edition)\", W3C Recommendation REC-xml-20081126, November\n         \
    \     2008, <http://www.w3.org/TR/2008/REC-xml-20081126>.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [ISO-19757-2]\n              International Organization\
    \ for Standardization,\n              \"Information Technology --- Document Schema\
    \ Definition\n              Languages (DSDL) --- Part 2: Grammar-based Validation\
    \ ---\n              RELAX NG\", ISO/IEC 19757-2, 2003.\n   [RFC4918]  Dusseault,\
    \ L., Ed., \"HTTP Extensions for Web Distributed\n              Authoring and\
    \ Versioning (WebDAV)\", RFC 4918,\n              DOI 10.17487/RFC4918, June 2007,\n\
    \              <http://www.rfc-editor.org/info/rfc4918>.\n   [RFC5988]  Nottingham,\
    \ M., \"Web Linking\", RFC 5988,\n              DOI 10.17487/RFC5988, October\
    \ 2010,\n              <http://www.rfc-editor.org/info/rfc5988>.\n   [RFC6694]\
    \  Moonesamy, S., Ed., \"The \"about\" URI Scheme\", RFC 6694,\n             \
    \ DOI 10.17487/RFC6694, August 2012,\n              <http://www.rfc-editor.org/info/rfc6694>.\n\
    \   [RFC6838]  Freed, N., Klensin, J., and T. Hansen, \"Media Type\n         \
    \     Specifications and Registration Procedures\", BCP 13,\n              RFC\
    \ 6838, DOI 10.17487/RFC6838, January 2013,\n              <http://www.rfc-editor.org/info/rfc6838>.\n\
    \   [RFC7303]  Thompson, H. and C. Lilley, \"XML Media Types\", RFC 7303,\n  \
    \            DOI 10.17487/RFC7303, July 2014,\n              <http://www.rfc-editor.org/info/rfc7303>.\n\
    \   [W3C.REC-html5-20141028]\n              Hickson, I., Berjon, R., Faulkner,\
    \ S., Leithead, T.,\n              Navara, E., O'Connor, E., and S. Pfeiffer,\
    \ \"HTML5\", W3C\n              Recommendation REC-html5-20141028, October 2014,\n\
    \              <http://www.w3.org/TR/2014/REC-html5-20141028>.\n   [W3C.REC-rdfa-core-20130822]\n\
    \              Adida, B., Birbeck, M., McCarron, S., and I. Herman, \"RDFa\n \
    \             Core 1.1 - Second Edition\", W3C Recommendation\n              REC-rdfa-core-20130822,\
    \ August 2013,\n              <http://www.w3.org/TR/2013/REC-rdfa-core-20130822>.\n\
    \   [W3C.REC-xml-stylesheet-20101028]\n              Clark, J., Pieters, S., and\
    \ H. Thompson, \"Associating\n              Style Sheets with XML documents 1.0\
    \ (Second Edition)\", W3C\n              Recommendation REC-xml-stylesheet-20101028,\
    \ October 2010,\n              <http://www.w3.org/TR/2010/REC-xml-stylesheet-20101028>.\n"
- title: Appendix A.  HTTP Problems and XML
  contents:
  - "Appendix A.  HTTP Problems and XML\n   Some HTTP-based APIs use XML [W3C.REC-xml-20081126]\
    \ as their primary\n   format convention.  Such APIs can express problem details\
    \ using the\n   format defined in this appendix.\n   The RELAX NG schema [ISO-19757-2]\
    \ for the XML format is as follows.\n   Keep in mind that this schema is only\
    \ meant as documentation, and not\n   as a normative schema that captures all\
    \ constraints of the XML\n   format.  Also, it would be possible to use other\
    \ XML schema languages\n   to define a similar set of constraints (depending on\
    \ the features of\n   the chosen schema language).\n      default namespace ns\
    \ = \"urn:ietf:rfc:7807\"\n      start = problem\n      problem =\n        element\
    \ problem {\n          (  element  type            { xsd:anyURI }?\n         \
    \  & element  title           { xsd:string }?\n           & element  detail  \
    \        { xsd:string }?\n           & element  status          { xsd:positiveInteger\
    \ }?\n           & element  instance        { xsd:anyURI }? ),\n          anyNsElement\n\
    \        }\n      anyNsElement =\n        (  element    ns:*  { anyNsElement |\
    \ text }\n         | attribute  *     { text })*\n   The media type for this format\
    \ is \"application/problem+xml\".\n   Extension arrays and objects are serialized\
    \ into the XML format by\n   considering an element containing a child or children\
    \ to represent an\n   object, except for elements that contain only child element(s)\
    \ named\n   'i', which are considered arrays.  For example, the example above\n\
    \   appears in XML as follows:\n   HTTP/1.1 403 Forbidden\n   Content-Type: application/problem+xml\n\
    \   Content-Language: en\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <problem\
    \ xmlns=\"urn:ietf:rfc:7807\">\n     <type>https://example.com/probs/out-of-credit</type>\n\
    \     <title>You do not have enough credit.</title>\n     <detail>Your current\
    \ balance is 30, but that costs 50.</detail>\n     <instance>https://example.net/account/12345/msgs/abc</instance>\n\
    \     <balance>30</balance>\n     <accounts>\n       <i>https://example.net/account/12345</i>\n\
    \       <i>https://example.net/account/67890</i>\n     </accounts>\n   </problem>\n\
    \   Note that this format uses an XML namespace.  This is primarily to\n   allow\
    \ embedding it into other XML-based formats; it does not imply\n   that it can\
    \ or should be extended with elements or attributes in\n   other namespaces. \
    \ The RELAX NG schema explicitly only allows\n   elements from the one namespace\
    \ used in the XML format.  Any\n   extension arrays and objects MUST be serialized\
    \ into XML markup using\n   only that namespace.\n   When using the XML format,\
    \ it is possible to embed an XML processing\n   instruction in the XML that instructs\
    \ clients to transform the XML,\n   using the referenced XSLT code [W3C.REC-xml-stylesheet-20101028].\
    \  If\n   this code is transforming the XML into (X)HTML, then it is possible\n\
    \   to serve the XML format, and yet have clients capable of performing\n   the\
    \ transformation display human-friendly (X)HTML that is rendered\n   and displayed\
    \ at the client.  Note that when using this method, it is\n   advisable to use\
    \ XSLT 1.0 in order to maximize the number of clients\n   capable of executing\
    \ the XSLT code.\n"
- title: Appendix B.  Using Problem Details with Other Formats
  contents:
  - "Appendix B.  Using Problem Details with Other Formats\n   In some situations,\
    \ it can be advantageous to embed problem details\n   in formats other than those\
    \ described here.  For example, an API that\n   uses HTML [W3C.REC-html5-20141028]\
    \ might want to also use HTML for\n   expressing its problem details.\n   Problem\
    \ details can be embedded in other formats either by\n   encapsulating one of\
    \ the existing serializations (JSON or XML) into\n   that format or by translating\
    \ the model of a problem detail (as\n   specified in Section 3) into the format's\
    \ conventions.\n   For example, in HTML, a problem could be embedded by encapsulating\n\
    \   JSON in a script tag:\n          <script type=\"application/problem+json\"\
    >\n            {\n             \"type\": \"https://example.com/probs/out-of-credit\"\
    ,\n             \"title\": \"You do not have enough credit.\",\n             \"\
    detail\": \"Your current balance is 30, but that costs 50.\",\n             \"\
    instance\": \"/account/12345/msgs/abc\",\n             \"balance\": 30,\n    \
    \         \"accounts\": [\"/account/12345\",\n                          \"/account/67890\"\
    ]\n            }\n          </script>\n   or by inventing a mapping into RDFa\
    \ [W3C.REC-rdfa-core-20130822].\n   This specification does not make specific\
    \ recommendations regarding\n   embedding problem details in other formats; the\
    \ appropriate way to\n   embed them depends both upon the format in use and application\
    \ of\n   that format.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to thank Jan Algermissen, Subbu Allamaraju,\n\
    \   Mike Amundsen, Roy Fielding, Eran Hammer, Sam Johnston, Mike McCall,\n   Julian\
    \ Reschke, and James Snell for review of this specification.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Mark Nottingham\n   Akamai\n   Email: mnot@mnot.net\n\
    \   URI:   https://www.mnot.net/\n   Erik Wilde\n   Email: erik.wilde@dret.net\n\
    \   URI:   http://dret.net/netdret/\n"
