- title: __initial_text__
  contents:
  - "           Forwarding and Control Element Separation (ForCES)\n             \
    \            Packet Parallelization\n"
- title: Abstract
  contents:
  - "Abstract\n   Many network devices support parallel packet processing.  This\n\
    \   document describes how Forwarding and Control Element Separation\n   (ForCES)\
    \ can model a network device's parallelization datapath using\n   constructs defined\
    \ by the ForCES model (RFC 5812) and controlled via\n   the ForCES protocol (RFC\
    \ 5810).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7409.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   4\n     1.1.  Requirements Language . . . . . . . . . . . . . .\
    \ . . . .   4\n     1.2.  Definitions . . . . . . . . . . . . . . . . . . . .\
    \ . . .   4\n   2.  Packet Parallelization  . . . . . . . . . . . . . . . . .\
    \ . .   5\n     2.1.  CoreParallelization LFB . . . . . . . . . . . . . . . .\
    \ .   7\n     2.2.  Parallelization Metadata  . . . . . . . . . . . . . . . .\
    \  10\n   3.  Parallel Base Types . . . . . . . . . . . . . . . . . . . . .  11\n\
    \     3.1.  Frame Types . . . . . . . . . . . . . . . . . . . . . . .  11\n  \
    \   3.2.  Data Types  . . . . . . . . . . . . . . . . . . . . . . .  11\n    \
    \ 3.3.  Metadata Types  . . . . . . . . . . . . . . . . . . . . .  12\n   4. \
    \ Parallel LFBs . . . . . . . . . . . . . . . . . . . . . . . .  12\n     4.1.\
    \  Splitter  . . . . . . . . . . . . . . . . . . . . . . . .  12\n       4.1.1.\
    \  Data Handling . . . . . . . . . . . . . . . . . . . .  13\n       4.1.2.  Components\
    \  . . . . . . . . . . . . . . . . . . . . .  13\n       4.1.3.  Capabilities\
    \  . . . . . . . . . . . . . . . . . . . .  13\n       4.1.4.  Events  . . . .\
    \ . . . . . . . . . . . . . . . . . . .  13\n     4.2.  Merger  . . . . . . .\
    \ . . . . . . . . . . . . . . . . . .  14\n       4.2.1.  Data Handling . . .\
    \ . . . . . . . . . . . . . . . . .  14\n       4.2.2.  Components  . . . . .\
    \ . . . . . . . . . . . . . . . .  15\n       4.2.3.  Capabilities  . . . . .\
    \ . . . . . . . . . . . . . . .  15\n       4.2.4.  Events  . . . . . . . . .\
    \ . . . . . . . . . . . . . .  16\n     4.3.  CoreParallelization . . . . . .\
    \ . . . . . . . . . . . . .  16\n       4.3.1.  Data Handling . . . . . . . .\
    \ . . . . . . . . . . . .  16\n       4.3.2.  Components  . . . . . . . . . .\
    \ . . . . . . . . . . .  16\n       4.3.3.  Capabilities  . . . . . . . . . .\
    \ . . . . . . . . . .  16\n       4.3.4.  Events  . . . . . . . . . . . . . .\
    \ . . . . . . . . .  17\n   5.  XML for Parallel LFB Library  . . . . . . . .\
    \ . . . . . . . .  17\n   6.  IANA Considerations . . . . . . . . . . . . . .\
    \ . . . . . . .  25\n     6.1.  LFB Class Names and LFB Class Identifiers . .\
    \ . . . . . .  25\n     6.2.  Metadata ID . . . . . . . . . . . . . . . . . .\
    \ . . . . .  26\n   7.  Security Considerations . . . . . . . . . . . . . . .\
    \ . . . .  26\n   8.  References  . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  26\n     8.1.  Normative References  . . . . . . . . . . . . . . . .\
    \ . .  26\n     8.2.  Informative References  . . . . . . . . . . . . . . . .\
    \ .  27\n   Acknowledgments   . . . . . . . . . . . . . . . . . . . . . . . .\
    \  27\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  27\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   A lot of network devices can process packets in a parallel\
    \ manner.\n   The Forwarding and Control Element Separation (ForCES) model\n \
    \  [RFC5812] presents a formal way to describe the Forwarding Plane's\n   datapath\
    \ with Logical Function Blocks (LFBs) using XML.  This\n   document describes\
    \ how packet parallelization can be described with\n   the ForCES model.\n   The\
    \ modeling concept has been influenced by Cilk [Cilk].  Cilk is a\n   programming\
    \ language that has been in development since 1994 at the\n   Massachusetts Institute\
    \ of Technology (MIT) Laboratory.  Cilk allows\n   programmers to identify elements\
    \ that can be executed in parallel.\n   The two Cilk concepts used in this document\
    \ are \"spawn\" and \"sync\":\n   spawn being the place where parallel tasks can\
    \ start and sync being\n   the place where the parallel task finishes and must\
    \ collect all\n   parallel output (see Section 1.2 for the definitions of both\
    \ \"task\"\n   and \"task correclator\").\n   This document is Experimental; thus,\
    \ the LFB Class IDs will not be\n   included in the Standard Action's values.\
    \  Therefore, the LFB Class\n   IDs must have a value larger than 65535, and the\
    \ LFB names must begin\n   with the prefix 'Ext-'.  However, for brevity, when\
    \ we refer to the\n   LFB Class names in the text of this document (not the formal\n\
    \   definitions), the 'Ext-' prefix will be omitted.\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 1.2.  Definitions
  contents:
  - "1.2.  Definitions\n   This document follows the terminology defined by the ForCES\
    \ model in\n   [RFC5812].  In particular, the reader is expected to be familiar\
    \ with\n   the following terms:\n      FE\n      CE\n      FE Model\n      LFB\
    \ Class (or type)\n      LFB Instance\n      LFB Model\n      Element\n      Attribute\n\
    \      LFB Metadata\n      ForCES Component\n      LFB Class Library\n   This\
    \ document also introduces the following terms:\n   Chunk:             Pieces\
    \ of a packet.\n   Task:              Grouping of packets or chunks belonging\
    \ to the\n                      same packet that are processed in parallel.\n\
    \   Task Correlator:   A 32-bit identifier that uniquely distinguishes\n     \
    \                 tasks.\n   Split Type:        A parallel type where the packets\
    \ are split into\n                      chunks to be processed in parallel.  Each\
    \ task in\n                      a split type is composed only of chunks.\n  \
    \ Flood Type:        A parallel type where the packets are copied as-is\n    \
    \                  to downstream LFBs to be processed in parallel.\n         \
    \             Each task in a flood type is composed only of\n                \
    \      packets.\n"
- title: 2.  Packet Parallelization
  contents:
  - "2.  Packet Parallelization\n   This document addresses the following two types\
    \ of packet\n   parallelization:\n   1.  Flood: Where a copy of a packet is sent\
    \ to multiple LFBs to be\n       processed in parallel.\n   2.  Split: Where the\
    \ packet will be split into chunks of equal size\n       specified by the CE and\
    \ sent to multiple LFB instances, probably\n       of the same LFB class, to be\
    \ processed in parallel.\n   It must be noted that the process of copying the\
    \ packet in the flood\n   parallel type is implementation dependent and is loosely\
    \ defined\n   here.  An implementer may either decide to physically copy the packet\n\
    \   and send all packets on the parallel paths or decide to logically\n   copy\
    \ the packet by simply sending, for example, pointers to the same\n   packet provided\
    \ that the necessary interlocks are taken into account.\n   The implementer has\
    \ to take into account the device's characteristics\n   to decide which approach\
    \ fits best to the device.\n   In the split parallel type, while harder, the implementer\
    \ may also\n   decide to logically split the packet and send, for example, pointers\n\
    \   to parts of the packet, provided that the necessary interlocks are\n   managed.\
    \  In addition, how chunks are distributed to the LFBs (e.g.,\n   which chunk\
    \ to which LFB) is implementation dependent.  For example,\n   while usually chunks\
    \ are sent to the same LFB class, the number of\n   LFB instances may not be equal\
    \ to the number of chunks.  It is up to\n   the implementer to decide how these\
    \ chunks will be sent, for example,\n   in a round-robin fashion.\n   This document\
    \ introduces two LFBs that are used before and after the\n   parallelization occurs:\n\
    \   1.  Splitter: Similar to Cilk's spawn, a splitter is an LFB that will\n  \
    \     split the path of a packet that will be sent to multiple\n       downstream\
    \ LFBs to be processed in parallel.\n   2.  Merger: Similar to Cilk's sync, a\
    \ merger is an LFB that will\n       receive packets or chunks of the same initial\
    \ packet and merge\n       them and the results into one packet.\n   Both parallel\
    \ packet distribution types can currently be achieved\n   with the ForCES model.\
    \  The Splitter LFB has one group output that\n   produces either chunks or packets\
    \ to be sent to LFBs for processing,\n   and the Merger LFB has one group input\
    \ that expects either packets or\n   chunks to aggregate all the parallel packets\
    \ or chunks and produce a\n   single packet.\n   Figure 1 shows a simple example\
    \ of a split parallel datapath along\n   with the Splitter and Merger LFB.  The\
    \ example in Figure 1 depicts\n   multiple regular expression (regex) match LFBs\
    \ that perform match\n   operations on parts of the original packet.  Figure 2\
    \ shows an\n   example of a flood parallel datapath along with the Splitter and\n\
    \   Merger LFB.  The example in Figure 2 depicts a path that will\n   classify\
    \ an IPv4 packet while also performing metering; on the other\n   path, the IPv4\
    \ Time to Live (TTL) field will be decremented.\n                      C1+M  \
    \ +------------+  C1+M\n                       +---->| Regex LFB  |----+\n   \
    \     +----------+   |     +------------+    |       +----------+\n        | \
    \         |---+                       +------>|          |\n     P  |        \
    \  |  C2+M   +------------+  C2+M      |          | P\n    --->| Splitter |-------->|\
    \ Regex LFB  |----------->|  Merger  |--->\n        |   LFB    |  CN+M   +------------+\
    \  CN+M      |   LFB    |\n        |          |---+                       +------>|\
    \          |\n        +----------+   |     +------------+    |       +----------+\n\
    \                       +---->| Regex LFB  |----+\n                          \
    \   +------------+\n                Figure 1: Simple Split Parallel Processing\n\
    \        +----------+    +------------+    +-------+    +----------+\n       \
    \ |          |P+M | Classifier |P+M | Meter |P+M |          |\n     P  |     \
    \     |--->|     LFB    |--->|  LFB  |--->|          | P\n    --->| Splitter |\
    \    +------------+    +-------+    |  Merger  |--->\n        |   LFB    |   \
    \                                |   LFB    |\n        |          |P+M       +------------+\
    \       P+M |          |\n        |          |--------->|  IPv4 TTL  |---------->|\
    \          |\n        +----------+          |  Decrement |           +----------+\n\
    \                              |    LFB     |\n                              +------------+\n\
    \                Figure 2: Simple Flood Parallel Processing\n   This version of\
    \ the modeling framework does not allow for nested\n   parallel datapath topologies.\
    \  This decision was reached by the\n   authors and the ForCES working group,\
    \ as there was no strong use case\n   or need at decision time.  This led to a\
    \ simpler metadata definition,\n   which is required to be transported between\
    \ the splitter and the\n   corresponding merger.  If there is a need for nested\
    \ parallel\n   datapaths, a new version of a splitter and merger will need to\
    \ be\n   defined, as well as an augmentation to the defined metadata.\n"
- title: 2.1.  CoreParallelization LFB
  contents:
  - "2.1.  CoreParallelization LFB\n   One important element to a developer is the\
    \ ability to define which\n   LFBs can be used in a parallel mode, which LFBs\
    \ can be parallelized\n   with which, as well as the order in which parallel LFBs\
    \ can be\n   assembled.\n   To access the parallelization details, we opted for\
    \ defining a new\n   LFB class: the CoreParallelization LFB.  This choice was\
    \ an\n   alternative to making another change to the core FEObject LFB.  The\n\
    \   CoreParallelization exists merely to define the capabilities for an\n   FE's\
    \ LFB parallelization.  A CE using the ForCES protocol [RFC5810]\n   can check\
    \ the existence of this LFB class in the FEObject's\n   SupportedLFBs component.\
    \  The existence of the CoreParallelization\n   LFB will indicate to the CE that\
    \ the specific FE supports\n   parallelization.  There MUST be only one instance\
    \ of the\n   CoreParallelization LFB per FE.\n   The topology of the parallel\
    \ datapath can be deferred and manipulated\n   from the FEObject LFB's LFBTopology.\n\
    \   The CoreParallelization requires only one capability in order to\n   specify\
    \ each LFB that can be used in a parallel mode:\n   o  The Name of the LFB.\n\
    \   o  The Class ID of the LFB.\n   o  The Version of the LFB.\n   o  The number\
    \ of instances that class can support in parallel.\n   o  A list of LFB classes\
    \ that can follow this LFB class in a pipeline\n      for a parallel path.\n \
    \  o  A list of LFB classes that can exist before this LFB class in a\n      pipeline\
    \ for a parallel path.\n   o  A list of LFB classes that can process packets or\
    \ chunks in\n      parallel with this LFB class.\n      <!-- Datatype -->\n  \
    \    <dataTypeDef>\n         <name>ParallelLFBType</name>\n         <synopsis>Table\
    \ entry for parallel LFBs</synopsis>\n         <struct>\n            <component\
    \ componentID=\"1\">\n               <name>LFBName</name>\n               <synopsis>The\
    \ name of an LFB Class</synopsis>\n               <typeRef>string</typeRef>\n\
    \            </component>\n            <component componentID=\"2\">\n       \
    \        <name>LFBClassID</name>\n               <synopsis>The id of the LFB Class</synopsis>\n\
    \               <typeRef>uint32</typeRef>\n            </component>\n        \
    \    <component componentID=\"3\">\n               <name>LFBVersion</name>\n \
    \              <synopsis>The version of the LFB Class used by this FE\n      \
    \         </synopsis>\n               <typeRef>string</typeRef>\n            </component>\n\
    \            <component componentID=\"4\">\n               <name>LFBParallelOccurrenceLimit</name>\n\
    \               <synopsis>The upper limit of instances of the same\n         \
    \         parallel LFBs of this class</synopsis>\n               <optional />\n\
    \               <typeRef>uint32</typeRef>\n            </component>\n        \
    \    <component componentID=\"5\">\n               <name>AllowedParallelAfters</name>\n\
    \               <synopsis>List of LFB Classes that can follow this LFB\n     \
    \             in a parallel pipeline</synopsis>\n               <optional />\n\
    \               <array>\n                  <typeRef>uint32</typeRef>\n       \
    \        </array>\n            </component>\n            <component componentID=\"\
    6\">\n               <name>AllowedParallelBefores</name>\n               <synopsis>List\
    \ of LFB Classes that this LFB class can\n                  follow in a parallel\
    \ pipeline</synopsis>\n               <optional />\n               <array>\n \
    \                 <typeRef>uint32</typeRef>\n               </array>\n       \
    \     </component>\n            <component componentID=\"7\">\n              \
    \ <name>AllowedParallel</name>\n               <synopsis>List of LFB Classes that\
    \ this LFB class can run\n                  in parallel with</synopsis>\n    \
    \           <array>\n                  <typeRef>uint32</typeRef>\n           \
    \    </array>\n            </component>\n         </struct>\n      </dataTypeDef>\n\
    \      <!-- Capability -->\n            <capability componentID=\"32\">\n    \
    \           <name>ParallelLFBs</name>\n               <synopsis>List of all supported\
    \ parallel LFBs</synopsis>\n               <array type=\"Variable-size\">\n  \
    \                <typeRef>ParallelLFBType</typeRef>\n               </array>\n\
    \            </capability>\n           Figure 3: XML Definitions for CoreParallelization\
    \ LFB\n"
- title: 2.2.  Parallelization Metadata
  contents:
  - "2.2.  Parallelization Metadata\n   It is expected that the splitting and merging\
    \ mechanisms are an\n   implementation issue.  This document plays the role of\
    \ defining the\n   operational parameters for the splitting and merging: namely,\
    \ the\n   size of the chunks, what happens if a packet or chunk has been marked\n\
    \   as invalid, and whether the merge LFB should wait for all packets or\n   chunks\
    \ to arrive.  The following metadata set is defined as a struct:\n   1.  ParallelType\
    \ - Flood or split\n   2.  TaskCorrelator - Identify packets or chunks that belonged\
    \ to the\n       initial packet that entered the Splitter LFB\n   3.  ParallelNum\
    \ - Sequence number of the packet or the chunk for a\n       specific task\n \
    \  4.  ParallelPartsCount - Total number of packets or chunks for a\n       specific\
    \ task\n   This metadata is produced from the Splitter LFB, is opaque to LFBs\
    \ in\n   parallel paths, and is passed along to the Merger LFB without being\n\
    \   consumed.\n   In the case in which an LFB decides that a packet/chunk has\
    \ to be\n   dropped, the LFB MAY drop the packet/chunk, but the metadata MUST\
    \ be\n   sent to the Merger LFB's InvalidIn input port for merging purposes.\n\
    \   Additional metadata produced by LFBs inside a datapath MAY be\n   aggregated\
    \ within the Merger LFB and sent on after the merging\n   process.  In case of\
    \ receiving the same metadata definition with\n   multiple values, the Merger\
    \ LFB MUST keep the first received from a\n   valid packet or chunk.\n"
- title: 3.  Parallel Base Types
  contents:
  - '3.  Parallel Base Types

    '
- title: 3.1.  Frame Types
  contents:
  - "3.1.  Frame Types\n   One frame type has been defined in this library.\n   +-----------+-------------------------------------------------------+\n\
    \   | Frame     | Synopsis                                              |\n  \
    \ | Name      |                                                       |\n   +-----------+-------------------------------------------------------+\n\
    \   | Chunk     | A chunk is a frame that is part of an original larger |\n  \
    \ |           | frame.                                                |\n   +-----------+-------------------------------------------------------+\n\
    \                           Parallel Frame Types\n"
- title: 3.2.  Data Types
  contents:
  - "3.2.  Data Types\n   One data type has been defined in this library.\n   +---------------+------------------------+--------------------------+\n\
    \   | DataType Name | Type                   | Synopsis                 |\n  \
    \ +---------------+------------------------+--------------------------+\n   |\
    \ ParallelTypes | Atomic uchar.  Special | The type of              |\n   |  \
    \             | Values Flood (0),      | parallelization this     |\n   |    \
    \           | Split (1).             | packet will go through.  |\n   +---------------+------------------------+--------------------------+\n\
    \                            Parallel Data Types\n"
- title: 3.3.  Metadata Types
  contents:
  - "3.3.  Metadata Types\n   The following metadata structure with ID 16, using the\
    \ ForCES model\n   extension [RFC7408], is defined for the parallelization library:\n\
    \   +--------------------+--------+----+--------------------------------+\n  \
    \ |   Metadata Name    |  Type  | ID |            Synopsis            |\n   +--------------------+--------+----+--------------------------------+\n\
    \   |    ParallelType    | uchar  | 1  |  The type of parallelization   |\n  \
    \ |                    |        |    | this packet will go through. 0 |\n   |\
    \                    |        |    |    for flood, 1 for split.     |\n   |  \
    \                  |        |    |                                |\n   |   TaskCorrelator\
    \   | uint32 | 2  |  An identification number to   |\n   |                   \
    \ |        |    |   specify that a packet or a   |\n   |                    |\
    \        |    |   chunk belongs to the same    |\n   |                    |  \
    \      |    |         parallel task.         |\n   |                    |    \
    \    |    |                                |\n   |    ParallelNum     | uint32\
    \ | 3  |    Defines the number of a     |\n   |                    |        |\
    \    | specific packet or chunk of a  |\n   |                    |        |  \
    \  |         specific task.         |\n   |                    |        |    |\
    \                                |\n   | ParallelPartsCount | uint32 | 4  |  Defines\
    \ the total number of   |\n   |                    |        |    |    packets\
    \ or chunks for a     |\n   |                    |        |    |         specific\
    \ task.         |\n   +--------------------+--------+----+--------------------------------+\n\
    \                      Metadata Structure for Merging\n"
- title: 4.  Parallel LFBs
  contents:
  - '4.  Parallel LFBs

    '
- title: 4.1.  Splitter
  contents:
  - "4.1.  Splitter\n   The Splitter LFB takes part in parallelizing the processing\
    \ datapath\n   by sending either the same packet (Figure 2) or chunks (Figure\
    \ 1) of\n   the same packet to multiple LFBs.\n                             +---------------+\n\
    \                  SplitterIn |               | SplitterOut\n                \
    \  ---------->| Splitter LFB  |------------->\n                             |\
    \               |\n                             +---------------+\n          \
    \                Figure 4: Splitter LFB\n"
- title: 4.1.1.  Data Handling
  contents:
  - "4.1.1.  Data Handling\n   The Splitter LFB receives any kind of packet via the\
    \ singleton input,\n   Input.  Depending upon the CE's configuration of the ParallelType\n\
    \   component, if the parallel type is of type flood (0), the same packet\n  \
    \ MUST be sent through all instances of the group output \"SplitterOut\".\n  \
    \ If the parallel type is of type split (1), then the packet will be\n   split\
    \ into same size chunks except for the last, which MAY be\n   smaller, with the\
    \ max size being defined by the ChunkSize component.\n   Chunks MAY be sent out\
    \ in a round-robin fashion through instances of\n   the group output \"ParallelOut\"\
    \ or in any other way defined by the\n   implementer.  Each packet or chunk will\
    \ be accompanied by the\n   following metadata set as a struct:\n   o  ParallelType\
    \ - The parallel type: split or flood.\n   o  ParallelID - Generated by the Splitter\
    \ LFB to identify which\n      chunks or packets belong to the same parallel task.\n\
    \   o  ParallelNum - Each chunk or packet of a parallel ID will be\n      assigned\
    \ a number in order for the Merger LFB to know when it has\n      gathered them\
    \ all along with the ParallelPartsCount metadata.\n   o  ParallelPartsCount -\
    \ The number of chunks or packets for the\n      specific task.\n"
- title: 4.1.2.  Components
  contents:
  - "4.1.2.  Components\n   The Splitter LFB has only two components.  The first is\
    \ the\n   ParallelType, a uint32 that defines how the packet will be processed\n\
    \   by the Splitter LFB.  The second is the ChunkSize, a uint32 that\n   specifies\
    \ the size of each chunk when a packet is split into multiple\n   same-size chunks.\
    \  The last chunk MAY be smaller than the value of\n   the ChunkSize.\n"
- title: 4.1.3.  Capabilities
  contents:
  - "4.1.3.  Capabilities\n   This LFB has only one capability specified; the MinMaxChunkSize\
    \ is a\n   struct of two uint32s to specify the minimum and maximum chunk size.\n"
- title: 4.1.4.  Events
  contents:
  - "4.1.4.  Events\n   This LFB has no events specified.\n"
- title: 4.2.  Merger
  contents:
  - "4.2.  Merger\n   The Merger LFB is the synchronization point for multiple packets\
    \ or\n   packet chunks of the same task emanating out of the parallel path, as\n\
    \   illustrated in Figure 1 and Figure 2.\n                               +-------------+\n\
    \                      MergerIn |             |\n                     --------->|\
    \             | MergerOut\n                               | Merger LFB  |----------->\n\
    \                     InvalidIn |             |\n                     --------->|\
    \             |\n                               +-------------+\n            \
    \               Figure 5: Merger LFB\n"
- title: 4.2.1.  Data Handling
  contents:
  - "4.2.1.  Data Handling\n   The Merger LFB receives either a packet or a chunk\
    \ via the group\n   input ParallelIn, along with the ParallelType metadata, the\n\
    \   TaskCorrelator, the ParallelNum, and the ParallelPartsCount.\n   In the case\
    \ in which an upstream LFB has dropped a packet or a chunk,\n   the Merger LFB\
    \ MAY receive only the metadata, both the metadata and\n   the packet, or the\
    \ chunk through the InvalidIn group input port.  It\n   SHOULD receive a metadata\
    \ specifying the error code.  Currently\n   defined metadata in the Base LFB Library\
    \ [RFC6956] are the\n   ExceptionID and the ValidateErrorID.\n   If the MergeWaitType\
    \ is set to false, the Merger LFB will initiate\n   the merge process upon receiving\
    \ the first packet.  If false, for\n   each task identified by the task correlator,\
    \ it will wait for all\n   packets/chunks to arrive unless the MergeWaitTimeoutTimer\
    \ timer\n   expires.  If the MergeWaitTimeoutTimer has expired, the Merger MUST\n\
    \   consider the rest of the packets/chunks that have not been received\n   as\
    \ invalid, and it MUST handle the packets according to the\n   InvalidAction value.\n\
    \   If one packet or chunk has been received through the InvalidIn port,\n   then\
    \ the merging procedure will handle the packets/chunks according\n   to the InvalidAction\
    \ value.  If the InvalidAction component has been\n   set to 0, then if one packet\
    \ or chunk is not valid, all will be\n   dropped or else the process will initiate.\
    \  Once the merging process\n   has been completed, the resulting packet will\
    \ be sent via the\n   singleton output port MergerOut.\n   If the Merger LFB receives\
    \ different values for the same metadata\n   from different packets or chunks\
    \ that have the same task correlator,\n   then the Merger LFB will use the first\
    \ metadata from a packet or\n   chunk that entered the LFB through the MergerIn\
    \ input port.\n"
- title: 4.2.2.  Components
  contents:
  - "4.2.2.  Components\n   This LFB has the following components specified:\n   1.\
    \  InvalidAction: A uchar defining what the Merge LFB will do if an\n       invalid\
    \ chunk or packet is received.  If set to 0 (DropAll), the\n       merge will\
    \ be considered invalid and all chunks or packets will\n       be dropped.  If\
    \ set to 1 (Continue), the merge will continue.\n   2.  MergeWaitTimeoutTimer:\
    \ A uint32 defining the amount of time, in\n       milliseconds, that the Merger\
    \ will wait for all packets or chunks\n       within the same task to arrive before\
    \ considering them invalid.\n       The MergeWaitTimeoutTimer starts as soon as\
    \ the first chunk or\n       packet of a parallel task arrives.\n   3.  MergeWaitType:\
    \ A boolean.  If true, the Merger LFB will wait for\n       all packets or chunks\
    \ to be received prior to performing the\n       merge.  If false, when one packet\
    \ or a chunk with a response is\n       received by the merge LFB, it will start\
    \ with the merge process.\n   4.  InvalidMergesCounter: A uint32 that counts the\
    \ number of merges\n       where there is at least one packet or chunk that entered\
    \ the\n       Merger LFB through the InvalidIn input port.\n   5.  InvalidTotalCounter:\
    \ A uint32 that counts the number of merges\n       where all packets/chunks entered\
    \ the Merger LFB through the\n       InvalidIn input port.\n   6.  InvalidIDCounters:\
    \ A struct of two arrays.  Each array has a\n       uint32 per row.  Each array\
    \ counts the number of invalid merges\n       where at least one packet or chunk\
    \ entered through InvalidID per\n       error ID.  The first array is the InvalidExceptionID\
    \ and the\n       second is the InvalidValidateErrorID.\n"
- title: 4.2.3.  Capabilities
  contents:
  - "4.2.3.  Capabilities\n   This LFB has no capabilities specified.\n"
- title: 4.2.4.  Events
  contents:
  - "4.2.4.  Events\n   This LFB specifies only two events.  The first detects whether\
    \ the\n   InvalidMergesCounter has exceeded a specific value, and the second\n\
    \   detects whether the InvalidAllCounter has exceeded a specific value.\n   Both\
    \ error reports will send the respective counter value.  Event\n   Filters can\
    \ be used to limit the number of messages\n"
- title: 4.3.  CoreParallelization
  contents:
  - "4.3.  CoreParallelization\n   A core LFB that specifies that the FE supports\
    \ parallelization\n   instead of updating the FEObject LFB\n"
- title: 4.3.1.  Data Handling
  contents:
  - "4.3.1.  Data Handling\n   The CoreParallelization does not handle data.\n"
- title: 4.3.2.  Components
  contents:
  - "4.3.2.  Components\n   This LFB has no components specified.\n"
- title: 4.3.3.  Capabilities
  contents:
  - "4.3.3.  Capabilities\n   This LFB has only one capability specified.  The ParallelLFBs\
    \ is a\n   table which lists all the LFBs that can be parallelized.  Each row\
    \ of\n   the table contains:\n   1.  LFBName: A string.  The Name of the parallel\
    \ LFB.\n   2.  LFBClassID: A uint32.  The Class ID of the parallel LFB.\n   3.\
    \  LFBVersion: A string.  The Version of the parallel LFB.\n   4.  LFBParallelOccurrenceLimit:\
    \ A uint32.  The upper limit of\n       instances of the same parallel LFBs of\
    \ this class.\n   5.  AllowedParallelAfters: A table of uint32s (LFB Class IDs).\
    \  A\n       list of LFB classes that can follow this LFB class in a pipeline\n\
    \       for a parallel path.\n   6.  AllowedParallelBefores: A table of uint32s\
    \ (LFB Class IDs).  A\n       list of LFB classes that can exist before this LFB\
    \ class in a\n       pipeline for a parallel path.\n   7.  AllowedParallel: A\
    \ table of uint32s (LFB Class IDs).  A list of\n       LFB classes that can process\
    \ packets or chunks in parallel with\n       this LFB class.\n"
- title: 4.3.4.  Events
  contents:
  - "4.3.4.  Events\n   This LFB specifies no events.\n"
- title: 5.  XML for Parallel LFB Library
  contents:
  - "5.  XML for Parallel LFB Library\n  <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n  <LFBLibrary xmlns=\"urn:ietf:params:xml:ns:forces:lfbmodel:1.1\"\n     xmlns:xsi=\"\
    http://www.w3.org/2001/XMLSchema-instance\"\n     xsi:schemaLocation=\"urn:ietf:params:xml:ns:forces:lfbmodel:1.1\"\
    \n     provides=\"Parallel\">\n    <load library=\"BaseTypeLibrary\" location=\"\
    BaseTypeLibrary.LFB\"/>\n    <frameDefs>\n      <frameDef>\n        <name>Chunk</name>\n\
    \        <synopsis>A chunk is a frame that is part of an original\n          \
    \    larger frame</synopsis>\n      </frameDef>\n    </frameDefs>\n    <dataTypeDefs>\n\
    \      <dataTypeDef>\n        <name>ParallelTypes</name>\n        <synopsis>The\
    \ type of parallelization this packet will go\n              through</synopsis>\n\
    \        <atomic>\n          <baseType>uchar</baseType>\n          <specialValues>\n\
    \            <specialValue value=\"0\">\n              <name>Flood</name>\n  \
    \            <synopsis>The packet/chunk has been sent as a whole\n           \
    \            to multiple recipients</synopsis>\n            </specialValue>\n\
    \            <specialValue value=\"1\">\n              <name>Split</name>\n  \
    \            <synopsis>The packet/chunk has been split into\n                \
    \       multiple chunks and sent to recipients</synopsis>\n            </specialValue>\n\
    \          </specialValues>\n        </atomic>\n      </dataTypeDef>\n      <dataTypeDef>\n\
    \        <name>ParallelLFBType</name>\n        <synopsis>Table entry for parallel\
    \ LFBs</synopsis>\n        <struct>\n          <component componentID=\"1\">\n\
    \            <name>LFBName</name>\n            <synopsis>The name of an LFB Class</synopsis>\n\
    \            <typeRef>string</typeRef>\n          </component>\n          <component\
    \ componentID=\"2\">\n            <name>LFBClassID</name>\n            <synopsis>The\
    \ ID of the LFB Class</synopsis>\n            <typeRef>uint32</typeRef>\n    \
    \      </component>\n          <component componentID=\"3\">\n            <name>LFBVersion</name>\n\
    \            <synopsis>The version of the LFB Class used by this FE\n        \
    \       </synopsis>\n            <typeRef>string</typeRef>\n          </component>\n\
    \          <component componentID=\"4\">\n            <name>LFBParallelOccurrenceLimit</name>\n\
    \            <synopsis>The upper limit of instances of the same\n            \
    \      parallel LFBs of this class</synopsis>\n            <optional/>\n     \
    \       <typeRef>uint32</typeRef>\n          </component>\n          <component\
    \ componentID=\"5\">\n            <name>AllowedParallelAfters</name>\n       \
    \     <synopsis>List of LFB Classes that can follow this LFB\n               \
    \   in a parallel pipeline</synopsis>\n            <optional/>\n            <array>\n\
    \              <typeRef>uint32</typeRef>\n            </array>\n          </component>\n\
    \          <component componentID=\"6\">\n            <name>AllowedParallelBefores</name>\n\
    \            <synopsis>List of LFB Classes that this LFB Class can\n         \
    \         follow in a parallel pipeline</synopsis>\n            <optional/>\n\
    \            <array>\n              <typeRef>uint32</typeRef>\n            </array>\n\
    \          </component>\n          <component componentID=\"7\">\n           \
    \ <name>AllowedParallel</name>\n            <synopsis>List of LFB Classes that\
    \ this LFB Class can be run\n                  in parallel with</synopsis>\n \
    \           <array>\n              <typeRef>uint32</typeRef>\n            </array>\n\
    \          </component>\n        </struct>\n      </dataTypeDef>\n    </dataTypeDefs>\n\
    \    <metadataDefs>\n      <metadataDef>\n        <name>ParallelMetadataSet</name>\n\
    \        <synopsis>A metadata set for parallelization-related LFBs\n         \
    \  </synopsis>\n        <metadataID>32</metadataID>\n        <struct>\n      \
    \    <component componentID=\"1\">\n            <name>ParallelType</name>\n  \
    \          <synopsis>The type of parallelization this packet/chunk\n         \
    \           has gone through</synopsis>\n            <typeRef>ParallelTypes</typeRef>\n\
    \          </component>\n          <component componentID=\"2\">\n           \
    \ <name>TaskCorrelator</name>\n            <synopsis>An identification number\
    \ to specify that\n                    packets or chunks originate from the same\
    \ packet.\n                 </synopsis>\n            <typeRef>uint32</typeRef>\n\
    \          </component>\n          <component componentID=\"3\">\n           \
    \ <name>ParallelNum</name>\n            <synopsis>Defines the number of the specific\
    \ packet or\n                    chunk of the specific parallel ID.</synopsis>\n\
    \            <typeRef>uint32</typeRef>\n          </component>\n          <component\
    \ componentID=\"4\">\n            <name>ParallelPartsCount</name>\n          \
    \  <synopsis>Defines the total number of packets or chunks\n                 \
    \   for the specific parallel ID.</synopsis>\n            <typeRef>uint32</typeRef>\n\
    \          </component>\n        </struct>\n      </metadataDef>\n    </metadataDefs>\n\
    \    <LFBClassDefs>\n      <LFBClassDef LFBClassID=\"65537\">\n        <name>Ext-Splitter</name>\n\
    \        <synopsis>A Splitter LFB takes part in parallelizing the\n          \
    \    processing datapath.  It will either send the same packet\n             \
    \ or chunks of one packet to multiple LFBs</synopsis>\n        <version>1.0</version>\n\
    \        <inputPorts>\n          <inputPort>\n            <name>SplitterIn</name>\n\
    \            <synopsis>An input port expecting any kind of frame\n           \
    \      </synopsis>\n            <expectation>\n              <frameExpected>\n\
    \                <ref>Arbitrary</ref>\n              </frameExpected>\n      \
    \      </expectation>\n          </inputPort>\n        </inputPorts>\n       \
    \ <outputPorts>\n          <outputPort group=\"true\">\n            <name>SplitterOut</name>\n\
    \            <synopsis>A parallel output port that sends the same\n          \
    \          packet to all output instances or chunks of the same\n            \
    \        packet to output instances.  Each chunk is sent only\n              \
    \      once by the LFB.</synopsis>\n            <product>\n              <frameProduced>\n\
    \                <ref>Arbitrary</ref>\n                <ref>Chunk</ref>\n    \
    \          </frameProduced>\n              <metadataProduced>\n              \
    \  <ref>ParallelMetadataSet</ref>\n              </metadataProduced>\n       \
    \     </product>\n          </outputPort>\n        </outputPorts>\n        <components>\n\
    \          <component componentID=\"1\" access=\"read-write\">\n            <name>ParallelType</name>\n\
    \            <synopsis>The type of parallelization this packet will\n        \
    \            go through</synopsis>\n            <typeRef>ParallelTypes</typeRef>\n\
    \          </component>\n          <component componentID=\"2\" access=\"read-write\"\
    >\n            <name>ChunkSize</name>\n            <synopsis>The size of a chunk\
    \ when a packet is split\n                    into multiple chunks of the same\
    \ size</synopsis>\n            <typeRef>uint32</typeRef>\n          </component>\n\
    \        </components>\n        <capabilities>\n          <capability componentID=\"\
    31\">\n            <name>MinMaxChunkSize</name>\n            <synopsis>The minimum\
    \ and maximum size of a chunk\n                    capable of split by this LFB</synopsis>\n\
    \            <struct>\n              <component componentID=\"1\">\n         \
    \       <name>MinChunkSize</name>\n                <synopsis>Minimum chunk size</synopsis>\n\
    \                <optional/>\n                <typeRef>uint32</typeRef>\n    \
    \          </component>\n              <component componentID=\"2\">\n       \
    \         <name>MaxChunkSize</name>\n                <synopsis>Maximum chunk size</synopsis>\n\
    \                <typeRef>uint32</typeRef>\n              </component>\n     \
    \       </struct>\n          </capability>\n        </capabilities>\n      </LFBClassDef>\n\
    \      <LFBClassDef LFBClassID=\"65538\">\n        <name>Ext-Merger</name>\n \
    \       <synopsis>A Merger LFB receives multiple packets or multiple\n       \
    \       chunks of the same packet and merge them into one merged\n           \
    \   packet</synopsis>\n        <version>1.0</version>\n        <inputPorts>\n\
    \          <inputPort group=\"true\">\n            <name>MergerIn</name>\n   \
    \         <synopsis>A parallel input port that accepts packets\n             \
    \       or chunks from all output instances</synopsis>\n            <expectation>\n\
    \              <frameExpected>\n                <ref>Arbitrary</ref>\n       \
    \         <ref>Chunk</ref>\n              </frameExpected>\n              <metadataExpected>\n\
    \                <ref>ParallelMetadataSet</ref>\n              </metadataExpected>\n\
    \            </expectation>\n          </inputPort>\n          <inputPort group=\"\
    true\">\n            <name>InvalidIn</name>\n            <synopsis>When a packet\
    \ is sent out of an error port of\n                    an LFB in a parallel path,\
    \ it will be sent to this\n                    output port in the Merger LFB</synopsis>\n\
    \            <expectation>\n              <frameExpected>\n                <ref>Arbitrary</ref>\n\
    \                <ref>Chunk</ref>\n              </frameExpected>\n          \
    \    <metadataExpected>\n                <one-of>\n                  <ref>ExceptionID</ref>\n\
    \                  <ref>ValidateErrorID</ref>\n                </one-of>\n   \
    \           </metadataExpected>\n            </expectation>\n          </inputPort>\n\
    \        </inputPorts>\n        <outputPorts>\n          <outputPort>\n      \
    \      <name>MergerOut</name>\n            <synopsis>An output port expecting\
    \ any kind of frame\n                 </synopsis>\n            <product>\n   \
    \           <frameProduced>\n                <ref>Arbitrary</ref>\n          \
    \    </frameProduced>\n            </product>\n          </outputPort>\n     \
    \   </outputPorts>\n        <components>\n          <component componentID=\"\
    1\" access=\"read-write\">\n            <name>InvalidAction</name>\n         \
    \   <synopsis>What the Merge LFB will do if an invalid\n                    chunk\
    \ or packet is received</synopsis>\n            <atomic>\n              <baseType>uchar</baseType>\n\
    \              <specialValues>\n                <specialValue value=\"0\">\n \
    \                 <name>DropAll</name>\n                  <synopsis>Drop all packets\
    \ or chunks\n                          </synopsis>\n                </specialValue>\n\
    \                <specialValue value=\"1\">\n                  <name>Continue</name>\n\
    \                  <synopsis>Continue with the merge</synopsis>\n            \
    \    </specialValue>\n              </specialValues>\n            </atomic>\n\
    \          </component>\n          <component componentID=\"2\" access=\"read-write\"\
    >\n            <name>MergeWaitType</name>\n            <synopsis>Whether the Merge\
    \ LFB will wait for all\n                    packets or chunks to be received\
    \ prior to sending\n                    out a response</synopsis>\n          \
    \  <typeRef>boolean</typeRef>\n          </component>\n          <component componentID=\"\
    3\" access=\"read-write\">\n            <name>MergeWaitTimeoutTimer</name>\n \
    \           <synopsis>The time that the Merger will wait\n            for all\
    \ packets or chunks within the same task to arrive\n            before considering\
    \ them invalid.</synopsis>\n            <typeRef>uint32</typeRef>\n          </component>\n\
    \          <component componentID=\"4\" access=\"read-reset\">\n            <name>InvalidMergesCounter</name>\n\
    \            <synopsis>Counts the number of merges where there is at\n       \
    \             least one packet/chunk that entered the Merger LFB\n           \
    \         through the InvalidIn input port</synopsis>\n            <typeRef>uint32</typeRef>\n\
    \          </component>\n          <component componentID=\"5\" access=\"read-reset\"\
    >\n            <name>InvalidTotalCounter</name>\n            <synopsis>Counts\
    \ the number of merges where all\n                    packets/chunks entered the\
    \ Merger LFB through the\n                    InvalidIn input port</synopsis>\n\
    \            <typeRef>uint32</typeRef>\n          </component>\n          <component\
    \ componentID=\"6\" access=\"read-reset\">\n            <name>InvalidIDCounters</name>\n\
    \            <synopsis>Counts the number of invalid merges where at\n        \
    \            least one packet/chunk entered through InvalidID per\n          \
    \          error ID</synopsis>\n            <struct>\n              <component\
    \ componentID=\"1\">\n                <name>InvalidExceptionID</name>\n      \
    \          <synopsis>Per Exception ID</synopsis>\n                <array>\n  \
    \                <typeRef>uint32</typeRef>\n                </array>\n       \
    \       </component>\n              <component componentID=\"2\">\n          \
    \      <name>InvalidValidateErrorID</name>\n                <synopsis>Per Validate\
    \ Error ID</synopsis>\n                <array>\n                  <typeRef>uint32</typeRef>\n\
    \                </array>\n              </component>\n            </struct>\n\
    \          </component>\n        </components>\n        <events baseID=\"30\"\
    >\n          <event eventID=\"1\">\n            <name>ManyInvalids</name>\n  \
    \          <synopsis>An event that specifies if there are too many\n         \
    \           invalids</synopsis>\n            <eventTarget>\n              <eventField>InvalidCounter</eventField>\n\
    \            </eventTarget>\n            <eventGreaterThan/>\n            <eventReports>\n\
    \              <eventReport>\n                <eventField>InvalidMergesCounter</eventField>\n\
    \              </eventReport>\n            </eventReports>\n          </event>\n\
    \          <event eventID=\"2\">\n            <name>ManyTotalInvalids</name>\n\
    \            <synopsis>An event that specifies if there are too many\n       \
    \             invalids</synopsis>\n            <eventTarget>\n              <eventField>InvalidTotalCounter</eventField>\n\
    \            </eventTarget>\n            <eventGreaterThan/>\n            <eventReports>\n\
    \              <eventReport>\n                <eventField>InvalidTotalCounter</eventField>\n\
    \              </eventReport>\n            </eventReports>\n          </event>\n\
    \        </events>\n      </LFBClassDef>\n      <LFBClassDef LFBClassID=\"65539\"\
    >\n        <name>Ext-CoreParallelization</name>\n        <synopsis>A core LFB\
    \ that specifies that the FE supports\n          parallelization instead of updating\
    \ the FEObject\n          LFB</synopsis>\n        <version>1.0</version>\n   \
    \     <capabilities>\n          <capability componentID=\"10\">\n            <name>ParallelLFBs</name>\n\
    \            <synopsis>A table that lists all the LFBs that can be\n         \
    \       parallelized</synopsis>\n            <array>\n              <typeRef>ParallelLFBType</typeRef>\n\
    \            </array>\n          </capability>\n        </capabilities>\n    \
    \  </LFBClassDef>\n    </LFBClassDefs>\n  </LFBLibrary>\n                    \
    \  Figure 6: Parallel LFB Library\n"
- title: 6.  IANA Considerations
  contents:
  - '6.  IANA Considerations

    '
- title: 6.1.  LFB Class Names and LFB Class Identifiers
  contents:
  - "6.1.  LFB Class Names and LFB Class Identifiers\n   LFB classes defined by this\
    \ document do not belong to LFBs defined by\n   Standards Action.  As such, the\
    \ corresponding values assigned in the\n   \"Logical Functional Block (LFB) Class\
    \ Names and Class Identifiers\"\n   registry at <http://www.iana.org/assignments/forces>\
    \ are above 65535.\n   This specification includes the following LFB class names\
    \ and LFB\n   class identifiers:\n   +-------+---------------------+-------+-----------------+---------+\n\
    \   | LFB   |  LFB Class Name     |  LFB  |  Description    |   Ref   |\n   |\
    \ Class |                     |Version|                 |         |\n   | ID \
    \   |                     |       |                 |         |\n   +-------+---------------------+-------+-----------------+---------+\n\
    \   | 65537 |   Ext-Splitter      |  1.0  | A Splitter LFB  |   RFC   |\n   |\
    \       |                     |       |  will send      |   7409  |\n   |    \
    \   |                     |       |either the same  |         |\n   |       |\
    \                     |       |   packet or     |         |\n   |       |    \
    \                 |       | chunks of one   |         |\n   |       |        \
    \             |       |   packet to     |         |\n   |       |            \
    \         |       | multiple LFBs.  |         |\n   +-------+---------------------+-------+-----------------+---------+\n\
    \   | 65538 |    Ext-Merger       |   1.0 |  A Merger LFB   |   RFC   |\n   |\
    \       |                     |       |    receives     |   7409  |\n   |    \
    \   |                     |       |    multiple     |         |\n   |       |\
    \                     |       |   packets or    |         |\n   |       |    \
    \                 |       |    multiple     |         |\n   |       |        \
    \             |       | chunks of the   |         |\n   |       |            \
    \         |       |  same packet    |         |\n   |       |                \
    \     |       |   and merges    |         |\n   |       |                    \
    \ |       | them into one.  |         |\n   +-------+---------------------+-------+-----------------+---------+\n\
    \   | 65539 | Ext-                |   1.0 | A core LFB to   |   RFC   |\n   |\
    \       | CoreParallelization |       | signify the     |   7409  |\n   |    \
    \   |                     |       | parallelization |         |\n   |       |\
    \                     |       |   capability    |         |\n   +-------+---------------------+-------+-----------------+---------+\n\
    \     Logical Functional Block (LFB) Class Names and Class Identifiers\n"
- title: 6.2.  Metadata ID
  contents:
  - "6.2.  Metadata ID\n   The Metadata ID namespace is 32-bits long.  Values assigned\
    \ by this\n   specification are:\n             +------------+---------------------+-----------+\n\
    \             |   Value    |         Name        | Reference |\n             +------------+---------------------+-----------+\n\
    \             | 0x00000010 | ParallelMetadataSet |  RFC 7409 |\n             +------------+---------------------+-----------+\n\
    \                Metadata ID Assigned by this Specification\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   This document does not alter either the ForCES\
    \ model [RFC5812] or the\n   ForCES protocol [RFC5810].  As such, it has no impact\
    \ on their\n   security considerations.  This document simply defines the\n  \
    \ operational parameters and capabilities of LFBs that perform\n   parallelization\
    \ and not how parallelization is implemented.  Finally,\n   this document does\
    \ not attempt to analyze the presence or possibility\n   of security interactions\
    \ created by allowing parallel operations on\n   packets.  Any such issues, if\
    \ they exist, are for the designers of\n   the particular data path, not the general\
    \ mechanism.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC5810]\
    \  Doria, A., Hadi Salim, J., Haas, R., Khosravi, H., Wang,\n              W.,\
    \ Dong, L., Gopal, R., and J. Halpern, \"Forwarding and\n              Control\
    \ Element Separation (ForCES) Protocol\n              Specification\", RFC 5810,\
    \ March 2010,\n              <http://www.rfc-editor.org/info/rfc5810>.\n   [RFC5812]\
    \  Halpern, J. and J. Hadi Salim, \"Forwarding and Control\n              Element\
    \ Separation (ForCES) Forwarding Element Model\", RFC\n              5812, March\
    \ 2010,\n              <http://www.rfc-editor.org/info/rfc5812>.\n   [RFC6956]\
    \  Wang, W., Haleplidis, E., Ogawa, K., Li, C., and J.\n              Halpern,\
    \ \"Forwarding and Control Element Separation\n              (ForCES) Logical\
    \ Function Block (LFB) Library\", RFC 6956,\n              June 2013, <http://www.rfc-editor.org/info/rfc6956>.\n\
    \   [RFC7408]  Haleplidis, E., \"Forwarding and Control Element Separation\n \
    \             (ForCES) Model Extension\", RFC 7408, November 2014,\n         \
    \     <http://www.rfc-editor.org/info/rfc7408>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [Cilk]     Massachusetts Institute of Technology,\
    \ \"The Cilk Project\",\n              <http://supertech.csail.mit.edu/cilk/>.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The authors would like to thank Edward Crabbe for the initial\n\
    \   discussion that led to the creation of this document.  They also\n   thank\
    \ Jamal Hadi Salim and Dave Hood for comments and discussions and\n   Adrian Farrel\
    \ for his AD review that made this document better.\n   Finally, the authors thank\
    \ Francis Dupont for his Gen-Art review and\n   Magnus Nystroem for his security\
    \ review both of which refined this\n   document to its final shape.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Evangelos Haleplidis\n   University of Patras\n   Department\
    \ of Electrical and Computer Engineering\n   Patras  26500\n   Greece\n   EMail:\
    \ ehalep@ece.upatras.gr\n   Joel Halpern\n   Ericsson\n   P.O. Box 6049\n   Leesburg,\
    \ VA  20178\n   United States\n   Phone: +1 703 371 3043\n   EMail: joel.halpern@ericsson.com\n"
