- title: __initial_text__
  contents:
  - '                         OpenPGP Message Format

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This document defines many tag values, yet it doesn't describe\
    \ a\n   mechanism for adding new tags (for new features).  Traditionally the\n\
    \   Internet Assigned Numbers Authority (IANA) handles the allocation of\n   new\
    \ values for future expansion and RFCs usually define the procedure\n   to be\
    \ used by the IANA.  However, there are subtle (and not so\n   subtle) interactions\
    \ that may occur in this protocol between new\n   features and existing features\
    \ which result in a significant\n   reduction in over all security.  Therefore,\
    \ this document does not\n   define an extension procedure.  Instead requests\
    \ to define new tag\n   values (say for new encryption algorithms for example)\
    \ should be\n   forwarded to the IESG Security Area Directors for consideration\
    \ or\n   forwarding to the appropriate IETF Working Group for consideration.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document is maintained in order to publish all necessary\n\
    \   information needed to develop interoperable applications based on the\n  \
    \ OpenPGP format. It is not a step-by-step cookbook for writing an\n   application.\
    \ It describes only the format and methods needed to read,\n   check, generate,\
    \ and write conforming packets crossing any network.\n   It does not deal with\
    \ storage and implementation questions.  It does,\n   however, discuss implementation\
    \ issues necessary to avoid security\n   flaws.\n   Open-PGP software uses a combination\
    \ of strong public-key and\n   symmetric cryptography to provide security services\
    \ for electronic\n   communications and data storage.  These services include\n\
    \   confidentiality, key management, authentication, and digital\n   signatures.\
    \ This document specifies the message formats used in\n   OpenPGP.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n            Status of this Memo                          \
    \             1\n            IESG Note                                       \
    \          1\n            Abstract                                           \
    \       1\n            Table of Contents                                     \
    \    2\n   1.       Introduction                                             \
    \ 4\n   1.1.     Terms                                                     5\n\
    \   2.       General functions                                         5\n   2.1.\
    \     Confidentiality via Encryption                            5\n   2.2.   \
    \  Authentication via Digital signature                      6\n   2.3.     Compression\
    \                                               7\n   2.4.     Conversion to Radix-64\
    \                                    7\n   2.5.     Signature-Only Applications\
    \                               7\n   3.       Data Element Formats          \
    \                            7\n   3.1.     Scalar numbers                   \
    \                         8\n   3.2.     Multi-Precision Integers            \
    \                      8\n   3.3.     Key IDs                                \
    \                   8\n   3.4.     Text                                      \
    \                8\n   3.5.     Time fields                                  \
    \             9\n   3.6.     String-to-key (S2K) specifiers                  \
    \          9\n   3.6.1.   String-to-key (S2k) specifier types                \
    \       9\n   3.6.1.1. Simple S2K                                            \
    \    9\n   3.6.1.2. Salted S2K                                               10\n\
    \   3.6.1.3. Iterated and Salted S2K                                  10\n   3.6.2.\
    \   String-to-key usage                                      11\n   3.6.2.1. Secret\
    \ key encryption                                    11\n   3.6.2.2. Symmetric-key\
    \ message encryption                         11\n   4.       Packet Syntax   \
    \                                         12\n   4.1.     Overview           \
    \                                      12\n   4.2.     Packet Headers        \
    \                                   12\n   4.2.1.   Old-Format Packet Lengths\
    \                                13\n   4.2.2.   New-Format Packet Lengths   \
    \                             13\n   4.2.2.1. One-Octet Lengths              \
    \                          14\n   4.2.2.2. Two-Octet Lengths                 \
    \                       14\n   4.2.2.3. Five-Octet Lengths                   \
    \                    14\n   4.2.2.4. Partial Body Lengths                    \
    \                 14\n   4.2.3.   Packet Length Examples                     \
    \              14\n   4.3.     Packet Tags                                   \
    \           15\n   5.       Packet Types                                     \
    \        16\n   5.1.     Public-Key Encrypted Session Key Packets (Tag 1)    \
    \     16\n   5.2.     Signature Packet (Tag 2)                               \
    \  17\n   5.2.1.   Signature Types                                          17\n\
    \   5.2.2.   Version 3 Signature Packet Format                        19\n   5.2.3.\
    \   Version 4 Signature Packet Format                        21\n   5.2.3.1. Signature\
    \ Subpacket Specification                        22\n   5.2.3.2. Signature Subpacket\
    \ Types                                24\n   5.2.3.3. Signature creation time\
    \                                  25\n   5.2.3.4. Issuer                    \
    \                               25\n   5.2.3.5. Key expiration time          \
    \                            25\n   5.2.3.6. Preferred symmetric algorithms  \
    \                         25\n   5.2.3.7. Preferred hash algorithms          \
    \                      25\n   5.2.3.8. Preferred compression algorithms      \
    \                   26\n   5.2.3.9. Signature expiration time                \
    \                26\n   5.2.3.10.Exportable Certification                    \
    \             26\n   5.2.3.11.Revocable                                      \
    \          27\n   5.2.3.12.Trust signature                                   \
    \       27\n   5.2.3.13.Regular expression                                   \
    \    27\n   5.2.3.14.Revocation key                                          \
    \ 27\n   5.2.3.15.Notation Data                                            28\n\
    \   5.2.3.16.Key server preferences                                   28\n   5.2.3.17.Preferred\
    \ key server                                     29\n   5.2.3.18.Primary user\
    \ id                                          29\n   5.2.3.19.Policy URL     \
    \                                          29\n   5.2.3.20.Key Flags         \
    \                                       29\n   5.2.3.21.Signer's User ID     \
    \                                    30\n   5.2.3.22.Reason for Revocation   \
    \                                 30\n   5.2.4.   Computing Signatures       \
    \                              31\n   5.2.4.1. Subpacket Hints               \
    \                           32\n   5.3.     Symmetric-Key Encrypted Session-Key\
    \ Packets (Tag 3)      32\n   5.4.     One-Pass Signature Packets (Tag 4)    \
    \                   33\n   5.5.     Key Material Packet                      \
    \                34\n   5.5.1.   Key Packet Variants                         \
    \             34\n   5.5.1.1. Public Key Packet (Tag 6)                      \
    \          34\n   5.5.1.2. Public Subkey Packet (Tag 14)                     \
    \       34\n   5.5.1.3. Secret Key Packet (Tag 5)                            \
    \    35\n   5.5.1.4. Secret Subkey Packet (Tag 7)                            \
    \ 35\n   5.5.2.   Public Key Packet Formats                                35\n\
    \   5.5.3.   Secret Key Packet Formats                                37\n   5.6.\
    \     Compressed Data Packet (Tag 8)                           38\n   5.7.   \
    \  Symmetrically Encrypted Data Packet (Tag 9)              39\n   5.8.     Marker\
    \ Packet (Obsolete Literal Packet) (Tag 10)         39\n   5.9.     Literal Data\
    \ Packet (Tag 11)                             40\n   5.10.    Trust Packet (Tag\
    \ 12)                                    40\n   5.11.    User ID Packet (Tag 13)\
    \                                  41\n   6.       Radix-64 Conversions      \
    \                               41\n   6.1.     An Implementation of the CRC-24\
    \ in \"C\"                   42\n   6.2.     Forming ASCII Armor             \
    \                         42\n   6.3.     Encoding Binary in Radix-64        \
    \                      44\n   6.4.     Decoding Radix-64                     \
    \                   46\n   6.5.     Examples of Radix-64                     \
    \                46\n   6.6.     Example of an ASCII Armored Message         \
    \             47\n   7.       Cleartext signature framework                  \
    \          47\n   7.1.     Dash-Escaped Text                                 \
    \       47\n   8.       Regular Expressions                                  \
    \    48\n   9.       Constants                                               \
    \ 49\n   9.1.     Public Key Algorithms                                    49\n\
    \   9.2.     Symmetric Key Algorithms                                 49\n   9.3.\
    \     Compression Algorithms                                   50\n   9.4.   \
    \  Hash Algorithms                                          50\n   10.      Packet\
    \ Composition                                       50\n   10.1.    Transferable\
    \ Public Keys                                 50\n   10.2.    OpenPGP Messages\
    \                                         52\n   10.3.    Detached Signatures\
    \                                      52\n   11.      Enhanced Key Formats  \
    \                                   52\n   11.1.    Key Structures           \
    \                                52\n   11.2.    Key IDs and Fingerprints    \
    \                             53\n   12.      Notes on Algorithms            \
    \                          54\n   12.1.    Symmetric Algorithm Preferences   \
    \                       54\n   12.2.    Other Algorithm Preferences          \
    \                    55\n   12.2.1.  Compression Preferences                 \
    \                 56\n   12.2.2.  Hash Algorithm Preferences                 \
    \              56\n   12.3.    Plaintext                                     \
    \           56\n   12.4.    RSA                                              \
    \        56\n   12.5.    Elgamal                                             \
    \     57\n   12.6.    DSA                                                    \
    \  58\n   12.7.    Reserved Algorithm Numbers                               58\n\
    \   12.8.    OpenPGP CFB mode                                         58\n   13.\
    \      Security Considerations                                  59\n   14.   \
    \   Implementation Nits                                      60\n   15.      Authors\
    \ and Working Group Chair                          62\n   16.      References\
    \                                               63\n   17.      Full Copyright\
    \ Statement                                 65\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This document provides information on the message-exchange\
    \ packet\n   formats used by OpenPGP to provide encryption, decryption, signing,\n\
    \   and key management functions. It builds on the foundation provided in\n  \
    \ RFC 1991 \"PGP Message Exchange Formats.\"\n"
- title: 1.1. Terms
  contents:
  - "1.1. Terms\n     * OpenPGP - This is a definition for security software that\
    \ uses\n       PGP 5.x as a basis.\n     * PGP - Pretty Good Privacy. PGP is a\
    \ family of software systems\n       developed by Philip R. Zimmermann from which\
    \ OpenPGP is based.\n     * PGP 2.6.x - This version of PGP has many variants,\
    \ hence the term\n       PGP 2.6.x. It used only RSA, MD5, and IDEA for its cryptographic\n\
    \       transforms. An informational RFC, RFC 1991, was written\n       describing\
    \ this version of PGP.\n     * PGP 5.x - This version of PGP is formerly known\
    \ as \"PGP 3\" in the\n       community and also in the predecessor of this document,\
    \ RFC 1991.\n       It has new formats and corrects a number of problems in the\
    \ PGP\n       2.6.x design. It is referred to here as PGP 5.x because that\n \
    \      software was the first release of the \"PGP 3\" code base.\n   \"PGP\"\
    , \"Pretty Good\", and \"Pretty Good Privacy\" are trademarks of\n   Network Associates,\
    \ Inc. and are used with permission.\n   This document uses the terms \"MUST\"\
    , \"SHOULD\", and \"MAY\" as defined\n   in RFC 2119, along with the negated forms\
    \ of those terms.\n"
- title: 2. General functions
  contents:
  - "2. General functions\n   OpenPGP provides data integrity services for messages\
    \ and data files\n   by using these core technologies:\n     - digital signatures\n\
    \     - encryption\n     - compression\n     - radix-64 conversion\n   In addition,\
    \ OpenPGP provides key management and certificate\n   services, but many of these\
    \ are beyond the scope of this document.\n"
- title: 2.1. Confidentiality via Encryption
  contents:
  - "2.1. Confidentiality via Encryption\n   OpenPGP uses two encryption methods to\
    \ provide confidentiality:\n   symmetric-key encryption and public key encryption.\
    \ With public-key\n   encryption, the object is encrypted using a symmetric encryption\n\
    \   algorithm.  Each symmetric key is used only once. A new \"session key\"\n\
    \   is generated as a random number for each message. Since it is used\n   only\
    \ once, the session key is bound to the message and transmitted\n   with it. \
    \ To protect the key, it is encrypted with the receiver's\n   public key. The\
    \ sequence is as follows:\n   1.  The sender creates a message.\n   2.  The sending\
    \ OpenPGP generates a random number to be used as a\n       session key for this\
    \ message only.\n   3.  The session key is encrypted using each recipient's public\
    \ key.\n       These \"encrypted session keys\" start the message.\n   4.  The\
    \ sending OpenPGP encrypts the message using the session key,\n       which forms\
    \ the remainder of the message. Note that the message\n       is also usually\
    \ compressed.\n   5.  The receiving OpenPGP decrypts the session key using the\n\
    \       recipient's private key.\n   6.  The receiving OpenPGP decrypts the message\
    \ using the session key.\n       If the message was compressed, it will be decompressed.\n\
    \   With symmetric-key encryption, an object may be encrypted with a\n   symmetric\
    \ key derived from a passphrase (or other shared secret), or\n   a two-stage mechanism\
    \ similar to the public-key method described\n   above in which a session key\
    \ is itself encrypted with a symmetric\n   algorithm keyed from a shared secret.\n\
    \   Both digital signature and confidentiality services may be applied to\n  \
    \ the same message. First, a signature is generated for the message and\n   attached\
    \ to the message. Then, the message plus signature is\n   encrypted using a symmetric\
    \ session key. Finally, the session key is\n   encrypted using public-key encryption\
    \ and prefixed to the encrypted\n   block.\n"
- title: 2.2. Authentication via Digital signature
  contents:
  - "2.2. Authentication via Digital signature\n   The digital signature uses a hash\
    \ code or message digest algorithm,\n   and a public-key signature algorithm.\
    \ The sequence is as follows:\n   1.  The sender creates a message.\n   2.  The\
    \ sending software generates a hash code of the message.\n   3.  The sending software\
    \ generates a signature from the hash code\n       using the sender's private\
    \ key.\n   4.  The binary signature is attached to the message.\n   5.  The receiving\
    \ software keeps a copy of the message signature.\n   6.  The receiving software\
    \ generates a new hash code for the\n       received message and verifies it using\
    \ the message's signature.\n       If the verification is successful, the message\
    \ is accepted as\n       authentic.\n"
- title: 2.3. Compression
  contents:
  - "2.3. Compression\n   OpenPGP implementations MAY compress the message after applying\
    \ the\n   signature but before encryption.\n"
- title: 2.4. Conversion to Radix-64
  contents:
  - "2.4. Conversion to Radix-64\n   OpenPGP's underlying native representation for\
    \ encrypted messages,\n   signature certificates, and keys is a stream of arbitrary\
    \ octets.\n   Some systems only permit the use of blocks consisting of seven-bit,\n\
    \   printable text. For transporting OpenPGP's native raw binary octets\n   through\
    \ channels that are not safe to raw binary data, a printable\n   encoding of these\
    \ binary octets is needed.  OpenPGP provides the\n   service of converting the\
    \ raw 8-bit binary octet stream to a stream\n   of printable ASCII characters,\
    \ called Radix-64 encoding or ASCII\n   Armor.\n   Implementations SHOULD provide\
    \ Radix-64 conversions.\n   Note that many applications, particularly messaging\
    \ applications,\n   will want more advanced features as described in the OpenPGP-MIME\n\
    \   document, RFC 2015. An application that implements OpenPGP for\n   messaging\
    \ SHOULD implement OpenPGP-MIME.\n"
- title: 2.5. Signature-Only Applications
  contents:
  - "2.5. Signature-Only Applications\n   OpenPGP is designed for applications that\
    \ use both encryption and\n   signatures, but there are a number of problems that\
    \ are solved by a\n   signature-only implementation. Although this specification\
    \ requires\n   both encryption and signatures, it is reasonable for there to be\n\
    \   subset implementations that are non-comformant only in that they omit\n  \
    \ encryption.\n"
- title: 3. Data Element Formats
  contents:
  - "3. Data Element Formats\n   This section describes the data elements used by\
    \ OpenPGP.\n"
- title: 3.1. Scalar numbers
  contents:
  - "3.1. Scalar numbers\n   Scalar numbers are unsigned, and are always stored in\
    \ big-endian\n   format. Using n[k] to refer to the kth octet being interpreted,\
    \ the\n   value of a two-octet scalar is ((n[0] << 8) + n[1]). The value of a\n\
    \   four-octet scalar is ((n[0] << 24) + (n[1] << 16) + (n[2] << 8) +\n   n[3]).\n"
- title: 3.2. Multi-Precision Integers
  contents:
  - "3.2. Multi-Precision Integers\n   Multi-Precision Integers (also called MPIs)\
    \ are unsigned integers\n   used to hold large integers such as the ones used\
    \ in cryptographic\n   calculations.\n   An MPI consists of two pieces: a two-octet\
    \ scalar that is the length\n   of the MPI in bits followed by a string of octets\
    \ that contain the\n   actual integer.\n   These octets form a big-endian number;\
    \ a big-endian number can be\n   made into an MPI by prefixing it with the appropriate\
    \ length.\n   Examples:\n   (all numbers are in hexadecimal)\n   The string of\
    \ octets [00 01 01] forms an MPI with the value 1. The\n   string [00 09 01 FF]\
    \ forms an MPI with the value of 511.\n   Additional rules:\n   The size of an\
    \ MPI is ((MPI.length + 7) / 8) + 2 octets.\n   The length field of an MPI describes\
    \ the length starting from its\n   most significant non-zero bit. Thus, the MPI\
    \ [00 02 01] is not formed\n   correctly. It should be [00 01 01].\n"
- title: 3.3. Key IDs
  contents:
  - "3.3. Key IDs\n   A Key ID is an eight-octet scalar that identifies a key.\n \
    \  Implementations SHOULD NOT assume that Key IDs are unique. The\n   section,\
    \ \"Enhanced Key Formats\" below describes how Key IDs are\n   formed.\n"
- title: 3.4. Text
  contents:
  - "3.4. Text\n   The default character set for text is the UTF-8 [RFC2279] encoding\
    \ of\n   Unicode [ISO10646].\n"
- title: 3.5. Time fields
  contents:
  - "3.5. Time fields\n   A time field is an unsigned four-octet number containing\
    \ the number\n   of seconds elapsed since midnight, 1 January 1970 UTC.\n"
- title: 3.6. String-to-key (S2K) specifiers
  contents:
  - "3.6. String-to-key (S2K) specifiers\n   String-to-key (S2K) specifiers are used\
    \ to convert passphrase strings\n   into symmetric-key encryption/decryption keys.\
    \  They are used in two\n   places, currently: to encrypt the secret part of private\
    \ keys in the\n   private keyring, and to convert passphrases to encryption keys\
    \ for\n   symmetrically encrypted messages.\n"
- title: 3.6.1. String-to-key (S2k) specifier types
  contents:
  - "3.6.1. String-to-key (S2k) specifier types\n   There are three types of S2K specifiers\
    \ currently supported, as\n   follows:\n"
- title: 3.6.1.1. Simple S2K
  contents:
  - "3.6.1.1. Simple S2K\n   This directly hashes the string to produce the key data.\
    \  See below\n   for how this hashing is done.\n       Octet 0:        0x00\n\
    \       Octet 1:        hash algorithm\n   Simple S2K hashes the passphrase to\
    \ produce the session key.  The\n   manner in which this is done depends on the\
    \ size of the session key\n   (which will depend on the cipher used) and the size\
    \ of the hash\n   algorithm's output. If the hash size is greater than or equal\
    \ to the\n   session key size, the high-order (leftmost) octets of the hash are\n\
    \   used as the key.\n   If the hash size is less than the key size, multiple\
    \ instances of the\n   hash context are created -- enough to produce the required\
    \ key data.\n   These instances are preloaded with 0, 1, 2, ... octets of zeros\
    \ (that\n   is to say, the first instance has no preloading, the second gets\n\
    \   preloaded with 1 octet of zero, the third is preloaded with two\n   octets\
    \ of zeros, and so forth).\n   As the data is hashed, it is given independently\
    \ to each hash\n   context. Since the contexts have been initialized differently,\
    \ they\n   will each produce different hash output.  Once the passphrase is\n\
    \   hashed, the output data from the multiple hashes is concatenated,\n   first\
    \ hash leftmost, to produce the key data, with any excess octets\n   on the right\
    \ discarded.\n"
- title: 3.6.1.2. Salted S2K
  contents:
  - "3.6.1.2. Salted S2K\n   This includes a \"salt\" value in the S2K specifier --\
    \ some arbitrary\n   data -- that gets hashed along with the passphrase string,\
    \ to help\n   prevent dictionary attacks.\n       Octet 0:        0x01\n     \
    \  Octet 1:        hash algorithm\n       Octets 2-9:     8-octet salt value\n\
    \   Salted S2K is exactly like Simple S2K, except that the input to the\n   hash\
    \ function(s) consists of the 8 octets of salt from the S2K\n   specifier, followed\
    \ by the passphrase.\n"
- title: 3.6.1.3. Iterated and Salted S2K
  contents:
  - "3.6.1.3. Iterated and Salted S2K\n   This includes both a salt and an octet count.\
    \  The salt is combined\n   with the passphrase and the resulting value is hashed\
    \ repeatedly.\n   This further increases the amount of work an attacker must do\
    \ to try\n   dictionary attacks.\n       Octet  0:        0x03\n       Octet \
    \ 1:        hash algorithm\n       Octets 2-9:      8-octet salt value\n     \
    \  Octet  10:       count, a one-octet, coded value\n   The count is coded into\
    \ a one-octet number using the following\n   formula:\n       #define EXPBIAS\
    \ 6\n           count = ((Int32)16 + (c & 15)) << ((c >> 4) + EXPBIAS);\n   The\
    \ above formula is in C, where \"Int32\" is a type for a 32-bit\n   integer, and\
    \ the variable \"c\" is the coded count, Octet 10.\n   Iterated-Salted S2K hashes\
    \ the passphrase and salt data multiple\n   times. The total number of octets\
    \ to be hashed is specified in the\n   encoded count in the S2K specifier.  Note\
    \ that the resulting count\n   value is an octet count of how many octets will\
    \ be hashed, not an\n   iteration count.\n   Initially, one or more hash contexts\
    \ are set up as with the other S2K\n   algorithms, depending on how many octets\
    \ of key data are needed.\n   Then the salt, followed by the passphrase data is\
    \ repeatedly hashed\n   until the number of octets specified by the octet count\
    \ has been\n   hashed.  The one exception is that if the octet count is less than\n\
    \   the size of the salt plus passphrase, the full salt plus passphrase\n   will\
    \ be hashed even though that is greater than the octet count.\n   After the hashing\
    \ is done the data is unloaded from the hash\n   context(s) as with the other\
    \ S2K algorithms.\n"
- title: 3.6.2. String-to-key usage
  contents:
  - "3.6.2. String-to-key usage\n   Implementations SHOULD use salted or iterated-and-salted\
    \ S2K\n   specifiers, as simple S2K specifiers are more vulnerable to\n   dictionary\
    \ attacks.\n"
- title: 3.6.2.1. Secret key encryption
  contents:
  - "3.6.2.1. Secret key encryption\n   An S2K specifier can be stored in the secret\
    \ keyring to specify how\n   to convert the passphrase to a key that unlocks the\
    \ secret data.\n   Older versions of PGP just stored a cipher algorithm octet\
    \ preceding\n   the secret data or a zero to indicate that the secret data was\n\
    \   unencrypted. The MD5 hash function was always used to convert the\n   passphrase\
    \ to a key for the specified cipher algorithm.\n   For compatibility, when an\
    \ S2K specifier is used, the special value\n   255 is stored in the position where\
    \ the hash algorithm octet would\n   have been in the old data structure.  This\
    \ is then followed\n   immediately by a one-octet algorithm identifier, and then\
    \ by the S2K\n   specifier as encoded above.\n   Therefore, preceding the secret\
    \ data there will be one of these\n   possibilities:\n       0:           secret\
    \ data is unencrypted (no pass phrase)\n       255:         followed by algorithm\
    \ octet and S2K specifier\n       Cipher alg:  use Simple S2K algorithm using\
    \ MD5 hash\n   This last possibility, the cipher algorithm number with an implicit\n\
    \   use of MD5 and IDEA, is provided for backward compatibility; it MAY\n   be\
    \ understood, but SHOULD NOT be generated, and is deprecated.\n   These are followed\
    \ by an 8-octet Initial Vector for the decryption of\n   the secret values, if\
    \ they are encrypted, and then the secret key\n   values themselves.\n"
- title: 3.6.2.2. Symmetric-key message encryption
  contents:
  - "3.6.2.2. Symmetric-key message encryption\n   OpenPGP can create a Symmetric-key\
    \ Encrypted Session Key (ESK) packet\n   at the front of a message.  This is used\
    \ to allow S2K specifiers to\n   be used for the passphrase conversion or to create\
    \ messages with a\n   mix of symmetric-key ESKs and public-key ESKs. This allows\
    \ a message\n   to be decrypted either with a passphrase or a public key.\n  \
    \ PGP 2.X always used IDEA with Simple string-to-key conversion when\n   encrypting\
    \ a message with a symmetric algorithm. This is deprecated,\n   but MAY be used\
    \ for backward-compatibility.\n"
- title: 4. Packet Syntax
  contents:
  - "4. Packet Syntax\n   This section describes the packets used by OpenPGP.\n"
- title: 4.1. Overview
  contents:
  - "4.1. Overview\n   An OpenPGP message is constructed from a number of records\
    \ that are\n   traditionally called packets. A packet is a chunk of data that\
    \ has a\n   tag specifying its meaning. An OpenPGP message, keyring, certificate,\n\
    \   and so forth consists of a number of packets. Some of those packets\n   may\
    \ contain other OpenPGP packets (for example, a compressed data\n   packet, when\
    \ uncompressed, contains OpenPGP packets).\n   Each packet consists of a packet\
    \ header, followed by the packet body.\n   The packet header is of variable length.\n"
- title: 4.2. Packet Headers
  contents:
  - "4.2. Packet Headers\n   The first octet of the packet header is called the \"\
    Packet Tag.\" It\n   determines the format of the header and denotes the packet\
    \ contents.\n   The remainder of the packet header is the length of the packet.\n\
    \   Note that the most significant bit is the left-most bit, called bit\n   7.\
    \ A mask for this bit is 0x80 in hexadecimal.\n              +---------------+\n\
    \         PTag |7 6 5 4 3 2 1 0|\n              +---------------+\n         Bit\
    \ 7 -- Always one\n         Bit 6 -- New packet format if set\n   PGP 2.6.x only\
    \ uses old format packets. Thus, software that\n   interoperates with those versions\
    \ of PGP must only use old format\n   packets. If interoperability is not an issue,\
    \ either format may be\n   used. Note that old format packets have four bits of\
    \ content tags,\n   and new format packets have six; some features cannot be used\
    \ and\n   still be backward-compatible.\n   Old format packets contain:\n    \
    \     Bits 5-2 -- content tag\n         Bits 1-0 - length-type\n   New format\
    \ packets contain:\n         Bits 5-0 -- content tag\n"
- title: 4.2.1. Old-Format Packet Lengths
  contents:
  - "4.2.1. Old-Format Packet Lengths\n   The meaning of the length-type in old-format\
    \ packets is:\n   0 - The packet has a one-octet length. The header is 2 octets\
    \ long.\n   1 - The packet has a two-octet length. The header is 3 octets long.\n\
    \   2 - The packet has a four-octet length. The header is 5 octets long.\n   3\
    \ - The packet is of indeterminate length.  The header is 1 octet\n       long,\
    \ and the implementation must determine how long the packet\n       is. If the\
    \ packet is in a file, this means that the packet\n       extends until the end\
    \ of the file. In general, an implementation\n       SHOULD NOT use indeterminate\
    \ length packets except where the end\n       of the data will be clear from the\
    \ context, and even then it is\n       better to use a definite length, or a new-format\
    \ header. The\n       new-format headers described below have a mechanism for\
    \ precisely\n       encoding data of indeterminate length.\n"
- title: 4.2.2. New-Format Packet Lengths
  contents:
  - "4.2.2. New-Format Packet Lengths\n   New format packets have four possible ways\
    \ of encoding length:\n    1. A one-octet Body Length header encodes packet lengths\
    \ of up to\n       191 octets.\n   2. A two-octet Body Length header encodes packet\
    \ lengths of 192 to\n       8383 octets.\n    3. A five-octet Body Length header\
    \ encodes packet lengths of up to\n       4,294,967,295 (0xFFFFFFFF) octets in\
    \ length. (This actually\n       encodes a four-octet scalar number.)\n    4.\
    \ When the length of the packet body is not known in advance by the\n       issuer,\
    \ Partial Body Length headers encode a packet of\n       indeterminate length,\
    \ effectively making it a stream.\n"
- title: 4.2.2.1. One-Octet Lengths
  contents:
  - "4.2.2.1. One-Octet Lengths\n   A one-octet Body Length header encodes a length\
    \ of from 0 to 191\n   octets. This type of length header is recognized because\
    \ the one\n   octet value is less than 192.  The body length is equal to:\n  \
    \     bodyLen = 1st_octet;\n"
- title: 4.2.2.2. Two-Octet Lengths
  contents:
  - "4.2.2.2. Two-Octet Lengths\n   A two-octet Body Length header encodes a length\
    \ of from 192 to 8383\n   octets.  It is recognized because its first octet is\
    \ in the range 192\n   to 223.  The body length is equal to:\n       bodyLen =\
    \ ((1st_octet - 192) << 8) + (2nd_octet) + 192\n"
- title: 4.2.2.3. Five-Octet Lengths
  contents:
  - "4.2.2.3. Five-Octet Lengths\n   A five-octet Body Length header consists of a\
    \ single octet holding\n   the value 255, followed by a four-octet scalar. The\
    \ body length is\n   equal to:\n       bodyLen = (2nd_octet << 24) | (3rd_octet\
    \ << 16) |\n                 (4th_octet << 8)  | 5th_octet\n"
- title: 4.2.2.4. Partial Body Lengths
  contents:
  - "4.2.2.4. Partial Body Lengths\n   A Partial Body Length header is one octet long\
    \ and encodes the length\n   of only part of the data packet. This length is a\
    \ power of 2, from 1\n   to 1,073,741,824 (2 to the 30th power).  It is recognized\
    \ by its one\n   octet value that is greater than or equal to 224, and less than\
    \ 255.\n   The partial body length is equal to:\n       partialBodyLen = 1 <<\
    \ (1st_octet & 0x1f);\n   Each Partial Body Length header is followed by a portion\
    \ of the\n   packet body data. The Partial Body Length header specifies this\n\
    \   portion's length. Another length header (of one of the three types --\n  \
    \ one octet, two-octet, or partial) follows that portion. The last\n   length\
    \ header in the packet MUST NOT be a partial Body Length header.\n   Partial Body\
    \ Length headers may only be used for the non-final parts\n   of the packet.\n"
- title: 4.2.3. Packet Length Examples
  contents:
  - "4.2.3. Packet Length Examples\n   These examples show ways that new-format packets\
    \ might encode the\n   packet lengths.\n   A packet with length 100 may have its\
    \ length encoded in one octet:\n   0x64. This is followed by 100 octets of data.\n\
    \   A packet with length 1723 may have its length coded in two octets:\n   0xC5,\
    \ 0xFB.  This header is followed by the 1723 octets of data.\n   A packet with\
    \ length 100000 may have its length encoded in five\n   octets: 0xFF, 0x00, 0x01,\
    \ 0x86, 0xA0.\n   It might also be encoded in the following octet stream: 0xEF,\
    \ first\n   32768 octets of data; 0xE1, next two octets of data; 0xE0, next one\n\
    \   octet of data; 0xF0, next 65536 octets of data; 0xC5, 0xDD, last 1693\n  \
    \ octets of data.  This is just one possible encoding, and many\n   variations\
    \ are possible on the size of the Partial Body Length\n   headers, as long as\
    \ a regular Body Length header encodes the last\n   portion of the data. Note\
    \ also that the last Body Length header can\n   be a zero-length header.\n   An\
    \ implementation MAY use Partial Body Lengths for data packets, be\n   they literal,\
    \ compressed, or encrypted. The first partial length MUST\n   be at least 512\
    \ octets long. Partial Body Lengths MUST NOT be used\n   for any other packet\
    \ types.\n   Please note that in all of these explanations, the total length of\n\
    \   the packet is the length of the header(s) plus the length of the\n   body.\n"
- title: 4.3. Packet Tags
  contents:
  - "4.3. Packet Tags\n   The packet tag denotes what type of packet the body holds.\
    \ Note that\n   old format headers can only have tags less than 16, whereas new\n\
    \   format headers can have tags as great as 63. The defined tags (in\n   decimal)\
    \ are:\n       0        -- Reserved - a packet tag must not have this value\n\
    \       1        -- Public-Key Encrypted Session Key Packet\n       2        --\
    \ Signature Packet\n       3        -- Symmetric-Key Encrypted Session Key Packet\n\
    \       4        -- One-Pass Signature Packet\n       5        -- Secret Key Packet\n\
    \       6        -- Public Key Packet\n       7        -- Secret Subkey Packet\n\
    \       8        -- Compressed Data Packet\n       9        -- Symmetrically Encrypted\
    \ Data Packet\n       10       -- Marker Packet\n       11       -- Literal Data\
    \ Packet\n       12       -- Trust Packet\n       13       -- User ID Packet\n\
    \       14       -- Public Subkey Packet\n       60 to 63 -- Private or Experimental\
    \ Values\n"
- title: 5. Packet Types
  contents:
  - '5. Packet Types

    '
- title: 5.1. Public-Key Encrypted Session Key Packets (Tag 1)
  contents:
  - "5.1. Public-Key Encrypted Session Key Packets (Tag 1)\n   A Public-Key Encrypted\
    \ Session Key packet holds the session key used\n   to encrypt a message. Zero\
    \ or more Encrypted Session Key packets\n   (either Public-Key or Symmetric-Key)\
    \ may precede a Symmetrically\n   Encrypted Data Packet, which holds an encrypted\
    \ message.  The message\n   is encrypted with the session key, and the session\
    \ key is itself\n   encrypted and stored in the Encrypted Session Key packet(s).\
    \  The\n   Symmetrically Encrypted Data Packet is preceded by one Public-Key\n\
    \   Encrypted Session Key packet for each OpenPGP key to which the\n   message\
    \ is encrypted.  The recipient of the message finds a session\n   key that is\
    \ encrypted to their public key, decrypts the session key,\n   and then uses the\
    \ session key to decrypt the message.\n   The body of this packet consists of:\n\
    \     - A one-octet number giving the version number of the packet type.\n   \
    \    The currently defined value for packet version is 3. An\n       implementation\
    \ should accept, but not generate a version of 2,\n       which is equivalent\
    \ to V3 in all other respects.\n     - An eight-octet number that gives the key\
    \ ID of the public key\n       that the session key is encrypted to.\n     - A\
    \ one-octet number giving the public key algorithm used.\n     - A string of octets\
    \ that is the encrypted session key. This string\n       takes up the remainder\
    \ of the packet, and its contents are\n       dependent on the public key algorithm\
    \ used.\n   Algorithm Specific Fields for RSA encryption\n     - multiprecision\
    \ integer (MPI) of RSA encrypted value m**e mod n.\n   Algorithm Specific Fields\
    \ for Elgamal encryption:\n     - MPI of Elgamal (Diffie-Hellman) value g**k mod\
    \ p.\n     - MPI of Elgamal (Diffie-Hellman) value m * y**k mod p.\n   The value\
    \ \"m\" in the above formulas is derived from the session key\n   as follows.\
    \  First the session key is prefixed with a one-octet\n   algorithm identifier\
    \ that specifies the symmetric encryption\n   algorithm used to encrypt the following\
    \ Symmetrically Encrypted Data\n   Packet.  Then a two-octet checksum is appended\
    \ which is equal to the\n   sum of the preceding session key octets, not including\
    \ the algorithm\n   identifier, modulo 65536.  This value is then padded as described\
    \ in\n   PKCS-1 block type 02 [RFC2313] to form the \"m\" value used in the\n\
    \   formulas above.\n   Note that when an implementation forms several PKESKs\
    \ with one\n   session key, forming a message that can be decrypted by several\
    \ keys,\n   the implementation MUST make new PKCS-1 padding for each key.\n  \
    \ An implementation MAY accept or use a Key ID of zero as a \"wild card\"\n  \
    \ or \"speculative\" Key ID. In this case, the receiving implementation\n   would\
    \ try all available private keys, checking for a valid decrypted\n   session key.\
    \ This format helps reduce traffic analysis of messages.\n"
- title: 5.2. Signature Packet (Tag 2)
  contents:
  - "5.2. Signature Packet (Tag 2)\n   A signature packet describes a binding between\
    \ some public key and\n   some data. The most common signatures are a signature\
    \ of a file or a\n   block of text, and a signature that is a certification of\
    \ a user ID.\n   Two versions of signature packets are defined.  Version 3 provides\n\
    \   basic signature information, while version 4 provides an expandable\n   format\
    \ with subpackets that can specify more information about the\n   signature. PGP\
    \ 2.6.x only accepts version 3 signatures.\n   Implementations MUST accept V3\
    \ signatures. Implementations SHOULD\n   generate V4 signatures.  Implementations\
    \ MAY generate a V3 signature\n   that can be verified by PGP 2.6.x.\n   Note\
    \ that if an implementation is creating an encrypted and signed\n   message that\
    \ is encrypted to a V3 key, it is reasonable to create a\n   V3 signature.\n"
- title: 5.2.1. Signature Types
  contents:
  - "5.2.1. Signature Types\n   There are a number of possible meanings for a signature,\
    \ which are\n   specified in a signature type octet in any given signature. These\n\
    \   meanings are:\n   0x00: Signature of a binary document.\n         Typically,\
    \ this means the signer owns it, created it, or\n         certifies that it has\
    \ not been modified.\n   0x01: Signature of a canonical text document.\n     \
    \    Typically, this means the signer owns it, created it, or\n         certifies\
    \ that it has not been modified.  The signature is\n         calculated over the\
    \ text data with its line endings converted\n         to <CR><LF> and trailing\
    \ blanks removed.\n   0x02: Standalone signature.\n         This signature is\
    \ a signature of only its own subpacket\n         contents. It is calculated identically\
    \ to a signature over a\n         zero-length binary document. Note that it doesn't\
    \ make sense to\n         have a V3 standalone signature.\n   0x10: Generic certification\
    \ of a User ID and Public Key packet.\n         The issuer of this certification\
    \ does not make any particular\n         assertion as to how well the certifier\
    \ has checked that the\n         owner of the key is in fact the person described\
    \ by the user\n         ID.  Note that all PGP \"key signatures\" are this type\
    \ of\n         certification.\n   0x11: Persona certification of a User ID and\
    \ Public Key packet.\n         The issuer of this certification has not done any\
    \ verification\n         of the claim that the owner of this key is the user ID\n\
    \         specified.\n   0x12: Casual certification of a User ID and Public Key\
    \ packet.\n         The issuer of this certification has done some casual\n  \
    \       verification of the claim of identity.\n   0x13: Positive certification\
    \ of a User ID and Public Key packet.\n         The issuer of this certification\
    \ has done substantial\n         verification of the claim of identity.\n    \
    \     Please note that the vagueness of these certification claims is\n      \
    \   not a flaw, but a feature of the system. Because PGP places\n         final\
    \ authority for validity upon the receiver of a\n         certification, it may\
    \ be that one authority's casual\n         certification might be more rigorous\
    \ than some other\n         authority's positive certification. These classifications\
    \ allow\n         a certification authority to issue fine-grained claims.\n  \
    \ 0x18: Subkey Binding Signature\n         This signature is a statement by the\
    \ top-level signing key\n         indicates that it owns the subkey. This signature\
    \ is calculated\n         directly on the subkey itself, not on any User ID or\
    \ other\n         packets.\n   0x1F: Signature directly on a key\n         This\
    \ signature is calculated directly on a key.  It binds the\n         information\
    \ in the signature subpackets to the key, and is\n         appropriate to be used\
    \ for subpackets that provide information\n         about the key, such as the\
    \ revocation key subpacket. It is also\n         appropriate for statements that\
    \ non-self certifiers want to\n         make about the key itself, rather than\
    \ the binding between a\n         key and a name.\n   0x20: Key revocation signature\n\
    \         The signature is calculated directly on the key being revoked.\n   \
    \      A revoked key is not to be used.  Only revocation signatures by\n     \
    \    the key being revoked, or by an authorized revocation key,\n         should\
    \ be considered valid revocation signatures.\n   0x28: Subkey revocation signature\n\
    \         The signature is calculated directly on the subkey being\n         revoked.\
    \  A revoked subkey is not to be used.  Only revocation\n         signatures by\
    \ the top-level signature key that is bound to this\n         subkey, or by an\
    \ authorized revocation key, should be\n         considered valid revocation signatures.\n\
    \   0x30: Certification revocation signature\n         This signature revokes\
    \ an earlier user ID certification\n         signature (signature class 0x10 through\
    \ 0x13). It should be\n         issued by the same key that issued the revoked\
    \ signature or an\n         authorized revocation key The signature should have\
    \ a later\n         creation date than the signature it revokes.\n   0x40: Timestamp\
    \ signature.\n         This signature is only meaningful for the timestamp contained\n\
    \         in it.\n"
- title: 5.2.2. Version 3 Signature Packet Format
  contents:
  - "5.2.2. Version 3 Signature Packet Format\n   The body of a version 3 Signature\
    \ Packet contains:\n     - One-octet version number (3).\n     - One-octet length\
    \ of following hashed material.  MUST be 5.\n         - One-octet signature type.\n\
    \         - Four-octet creation time.\n     - Eight-octet key ID of signer.\n\
    \     - One-octet public key algorithm.\n     - One-octet hash algorithm.\n  \
    \   - Two-octet field holding left 16 bits of signed hash value.\n     - One or\
    \ more multi-precision integers comprising the signature.\n       This portion\
    \ is algorithm specific, as described below.\n   The data being signed is hashed,\
    \ and then the signature type and\n   creation time from the signature packet\
    \ are hashed (5 additional\n   octets).  The resulting hash value is used in the\
    \ signature\n   algorithm. The high 16 bits (first two octets) of the hash are\n\
    \   included in the signature packet to provide a quick test to reject\n   some\
    \ invalid signatures.\n   Algorithm Specific Fields for RSA signatures:\n    \
    \ - multiprecision integer (MPI) of RSA signature value m**d.\n   Algorithm Specific\
    \ Fields for DSA signatures:\n     - MPI of DSA value r.\n     - MPI of DSA value\
    \ s.\n   The signature calculation is based on a hash of the signed data, as\n\
    \   described above.  The details of the calculation are different for\n   DSA\
    \ signature than for RSA signatures.\n   With RSA signatures, the hash value is\
    \ encoded as described in PKCS-1\n   section 10.1.2, \"Data encoding\", producing\
    \ an ASN.1 value of type\n   DigestInfo, and then padded using PKCS-1 block type\
    \ 01 [RFC2313].\n   This requires inserting the hash value as an octet string\
    \ into an\n   ASN.1 structure. The object identifier for the type of hash being\n\
    \   used is included in the structure.  The hexadecimal representations\n   for\
    \ the currently defined hash algorithms are:\n     - MD2:        0x2A, 0x86, 0x48,\
    \ 0x86, 0xF7, 0x0D, 0x02, 0x02\n     - MD5:        0x2A, 0x86, 0x48, 0x86, 0xF7,\
    \ 0x0D, 0x02, 0x05\n     - RIPEMD-160: 0x2B, 0x24, 0x03, 0x02, 0x01\n     - SHA-1:\
    \      0x2B, 0x0E, 0x03, 0x02, 0x1A\n   The ASN.1 OIDs are:\n     - MD2:     \
    \   1.2.840.113549.2.2\n     - MD5:        1.2.840.113549.2.5\n     - RIPEMD-160:\
    \ 1.3.36.3.2.1\n     - SHA-1:      1.3.14.3.2.26\n   The full hash prefixes for\
    \ these are:\n       MD2:        0x30, 0x20, 0x30, 0x0C, 0x06, 0x08, 0x2A, 0x86,\n\
    \                   0x48, 0x86, 0xF7, 0x0D, 0x02, 0x02, 0x05, 0x00,\n        \
    \           0x04, 0x10\n       MD5:        0x30, 0x20, 0x30, 0x0C, 0x06, 0x08,\
    \ 0x2A, 0x86,\n                   0x48, 0x86, 0xF7, 0x0D, 0x02, 0x05, 0x05, 0x00,\n\
    \                   0x04, 0x10\n       RIPEMD-160: 0x30, 0x21, 0x30, 0x09, 0x06,\
    \ 0x05, 0x2B, 0x24,\n                   0x03, 0x02, 0x01, 0x05, 0x00, 0x04, 0x14\n\
    \       SHA-1:      0x30, 0x21, 0x30, 0x09, 0x06, 0x05, 0x2b, 0x0E,\n        \
    \           0x03, 0x02, 0x1A, 0x05, 0x00, 0x04, 0x14\n   DSA signatures MUST use\
    \ hashes with a size of 160 bits, to match q,\n   the size of the group generated\
    \ by the DSA key's generator value.\n   The hash function result is treated as\
    \ a 160 bit number and used\n   directly in the DSA signature algorithm.\n"
- title: 5.2.3. Version 4 Signature Packet Format
  contents:
  - "5.2.3. Version 4 Signature Packet Format\n   The body of a version 4 Signature\
    \ Packet contains:\n     - One-octet version number (4).\n     - One-octet signature\
    \ type.\n     - One-octet public key algorithm.\n     - One-octet hash algorithm.\n\
    \     - Two-octet scalar octet count for following hashed subpacket\n       data.\
    \ Note that this is the length in octets of all of the hashed\n       subpackets;\
    \ a pointer incremented by this number will skip over\n       the hashed subpackets.\n\
    \     - Hashed subpacket data. (zero or more subpackets)\n     - Two-octet scalar\
    \ octet count for following unhashed subpacket\n       data. Note that this is\
    \ the length in octets of all of the\n       unhashed subpackets; a pointer incremented\
    \ by this number will\n       skip over the unhashed subpackets.\n     - Unhashed\
    \ subpacket data. (zero or more subpackets)\n     - Two-octet field holding left\
    \ 16 bits of signed hash value.\n     - One or more multi-precision integers comprising\
    \ the signature.\n       This portion is algorithm specific, as described above.\n\
    \   The data being signed is hashed, and then the signature data from the\n  \
    \ version number through the hashed subpacket data (inclusive) is\n   hashed.\
    \ The resulting hash value is what is signed.  The left 16 bits\n   of the hash\
    \ are included in the signature packet to provide a quick\n   test to reject some\
    \ invalid signatures.\n   There are two fields consisting of signature subpackets.\
    \  The first\n   field is hashed with the rest of the signature data, while the\
    \ second\n   is unhashed.  The second set of subpackets is not cryptographically\n\
    \   protected by the signature and should include only advisory\n   information.\n\
    \   The algorithms for converting the hash function result to a signature\n  \
    \ are described in a section below.\n"
- title: 5.2.3.1. Signature Subpacket Specification
  contents:
  - "5.2.3.1. Signature Subpacket Specification\n   The subpacket fields consist of\
    \ zero or more signature subpackets.\n   Each set of subpackets is preceded by\
    \ a two-octet scalar count of the\n   length of the set of subpackets.\n   Each\
    \ subpacket consists of a subpacket header and a body.  The header\n   consists\
    \ of:\n     - the subpacket length (1,  2, or 5 octets)\n     - the subpacket\
    \ type (1 octet)\n   and is followed by the subpacket specific data.\n   The length\
    \ includes the type octet but not this length. Its format is\n   similar to the\
    \ \"new\" format packet header lengths, but cannot have\n   partial body lengths.\
    \ That is:\n       if the 1st octet <  192, then\n           lengthOfLength =\
    \ 1\n           subpacketLen = 1st_octet\n       if the 1st octet >= 192 and <\
    \ 255, then\n           lengthOfLength = 2\n           subpacketLen = ((1st_octet\
    \ - 192) << 8) + (2nd_octet) + 192\n       if the 1st octet = 255, then\n    \
    \       lengthOfLength = 5\n           subpacket length = [four-octet scalar starting\
    \ at 2nd_octet]\n   The value of the subpacket type octet may be:\n       2 =\
    \ signature creation time\n       3 = signature expiration time\n       4 = exportable\
    \ certification\n       5 = trust signature\n       6 = regular expression\n \
    \      7 = revocable\n       9 = key expiration time\n       10 = placeholder\
    \ for backward compatibility\n       11 = preferred symmetric algorithms\n   \
    \    12 = revocation key\n       16 = issuer key ID\n       20 = notation data\n\
    \       21 = preferred hash algorithms\n       22 = preferred compression algorithms\n\
    \       23 = key server preferences\n       24 = preferred key server\n      \
    \ 25 = primary user id\n       26 = policy URL\n       27 = key flags\n      \
    \ 28 = signer's user id\n       29 = reason for revocation\n       100 to 110\
    \ = internal or user-defined\n   An implementation SHOULD ignore any subpacket\
    \ of a type that it does\n   not recognize.\n   Bit 7 of the subpacket type is\
    \ the \"critical\" bit.  If set, it\n   denotes that the subpacket is one that\
    \ is critical for the evaluator\n   of the signature to recognize.  If a subpacket\
    \ is encountered that is\n   marked critical but is unknown to the evaluating\
    \ software, the\n   evaluator SHOULD consider the signature to be in error.\n\
    \   An evaluator may \"recognize\" a subpacket, but not implement it. The\n  \
    \ purpose of the critical bit is to allow the signer to tell an\n   evaluator\
    \ that it would prefer a new, unknown feature to generate an\n   error than be\
    \ ignored.\n   Implementations SHOULD implement \"preferences\".\n"
- title: 5.2.3.2. Signature Subpacket Types
  contents:
  - "5.2.3.2. Signature Subpacket Types\n   A number of subpackets are currently defined.\
    \  Some subpackets apply\n   to the signature itself and some are attributes of\
    \ the key.\n   Subpackets that are found on a self-signature are placed on a user\
    \ id\n   certification made by the key itself. Note that a key may have more\n\
    \   than one user id, and thus may have more than one self-signature, and\n  \
    \ differing subpackets.\n   A self-signature is a binding signature made by the\
    \ key the signature\n   refers to. There are three types of self-signatures, the\n\
    \   certification signatures (types 0x10-0x13), the direct-key signature\n   (type\
    \ 0x1f), and the subkey binding signature (type 0x18). For\n   certification self-signatures,\
    \ each user ID may have a self-\n   signature, and thus different subpackets in\
    \ those self-signatures.\n   For subkey binding signatures, each subkey in fact\
    \ has a self-\n   signature. Subpackets that appear in a certification self-signature\n\
    \   apply to the username, and subpackets that appear in the subkey\n   self-signature\
    \ apply to the subkey. Lastly, subpackets on the direct\n   key signature apply\
    \ to the entire key.\n   Implementing software should interpret a self-signature's\
    \ preference\n   subpackets as narrowly as possible. For example, suppose a key\
    \ has\n   two usernames, Alice and Bob. Suppose that Alice prefers the\n   symmetric\
    \ algorithm CAST5, and Bob prefers IDEA or Triple-DES. If the\n   software locates\
    \ this key via Alice's name, then the preferred\n   algorithm is CAST5, if software\
    \ locates the key via Bob's name, then\n   the preferred algorithm is IDEA. If\
    \ the key is located by key id,\n   then algorithm of the default user id of the\
    \ key provides the default\n   symmetric algorithm.\n   A subpacket may be found\
    \ either in the hashed or unhashed subpacket\n   sections of a signature. If a\
    \ subpacket is not hashed, then the\n   information in it cannot be considered\
    \ definitive because it is not\n   part of the signature proper.\n"
- title: 5.2.3.3. Signature creation time
  contents:
  - "5.2.3.3. Signature creation time\n   (4 octet time field)\n   The time the signature\
    \ was made.\n   MUST be present in the hashed area.\n"
- title: 5.2.3.4. Issuer
  contents:
  - "5.2.3.4. Issuer\n   (8 octet key ID)\n   The OpenPGP key ID of the key issuing\
    \ the signature.\n"
- title: 5.2.3.5. Key expiration time
  contents:
  - "5.2.3.5. Key expiration time\n   (4 octet time field)\n   The validity period\
    \ of the key.  This is the number of seconds after\n   the key creation time that\
    \ the key expires.  If this is not present\n   or has a value of zero, the key\
    \ never expires. This is found only on\n   a self-signature.\n"
- title: 5.2.3.6. Preferred symmetric algorithms
  contents:
  - "5.2.3.6. Preferred symmetric algorithms\n   (sequence of one-octet values)\n\
    \   Symmetric algorithm numbers that indicate which algorithms the key\n   holder\
    \ prefers to use.  The subpacket body is an ordered list of\n   octets with the\
    \ most preferred listed first. It is assumed that only\n   algorithms listed are\
    \ supported by the recipient's software.\n   Algorithm numbers in section 9. This\
    \ is only found on a self-\n   signature.\n"
- title: 5.2.3.7. Preferred hash algorithms
  contents:
  - "5.2.3.7. Preferred hash algorithms\n   (array of one-octet values)\n   Message\
    \ digest algorithm numbers that indicate which algorithms the\n   key holder prefers\
    \ to receive. Like the preferred symmetric\n   algorithms, the list is ordered.\
    \ Algorithm numbers are in section 6.\n   This is only found on a self-signature.\n"
- title: 5.2.3.8. Preferred compression algorithms
  contents:
  - "5.2.3.8. Preferred compression algorithms\n   (array of one-octet values)\n \
    \  Compression algorithm numbers that indicate which algorithms the key\n   holder\
    \ prefers to use. Like the preferred symmetric algorithms, the\n   list is ordered.\
    \ Algorithm numbers are in section 6. If this\n   subpacket is not included, ZIP\
    \ is preferred. A zero denotes that\n   uncompressed data is preferred; the key\
    \ holder's software might have\n   no compression software in that implementation.\
    \ This is only found on\n   a self-signature.\n"
- title: 5.2.3.9. Signature expiration time
  contents:
  - "5.2.3.9. Signature expiration time\n   (4 octet time field)\n   The validity\
    \ period of the signature.  This is the number of seconds\n   after the signature\
    \ creation time that the signature expires. If this\n   is not present or has\
    \ a value of zero, it never expires.\n"
- title: 5.2.3.10. Exportable Certification
  contents:
  - "5.2.3.10. Exportable Certification\n   (1 octet of exportability, 0 for not,\
    \ 1 for exportable)\n   This subpacket denotes whether a certification signature\
    \ is\n   \"exportable\", to be used by other users than the signature's issuer.\n\
    \   The packet body contains a boolean flag indicating whether the\n   signature\
    \ is exportable. If this packet is not present, the\n   certification is exportable;\
    \ it is equivalent to a flag containing a\n   1.\n   Non-exportable, or \"local\"\
    , certifications are signatures made by a\n   user to mark a key as valid within\
    \ that user's implementation only.\n   Thus, when an implementation prepares a\
    \ user's copy of a key for\n   transport to another user (this is the process\
    \ of \"exporting\" the\n   key), any local certification signatures are deleted\
    \ from the key.\n   The receiver of a transported key \"imports\" it, and likewise\
    \ trims\n   any local certifications. In normal operation, there won't be any,\n\
    \   assuming the import is performed on an exported key. However, there\n   are\
    \ instances where this can reasonably happen. For example, if an\n   implementation\
    \ allows keys to be imported from a key database in\n   addition to an exported\
    \ key, then this situation can arise.\n   Some implementations do not represent\
    \ the interest of a single user\n   (for example, a key server). Such implementations\
    \ always trim local\n   certifications from any key they handle.\n"
- title: 5.2.3.11. Revocable
  contents:
  - "5.2.3.11. Revocable\n   (1 octet of revocability, 0 for not, 1 for revocable)\n\
    \   Signature's revocability status.  Packet body contains a boolean flag\n  \
    \ indicating whether the signature is revocable.  Signatures that are\n   not\
    \ revocable have any later revocation signatures ignored.  They\n   represent\
    \ a commitment by the signer that he cannot revoke his\n   signature for the life\
    \ of his key.  If this packet is not present,\n   the signature is revocable.\n"
- title: 5.2.3.12. Trust signature
  contents:
  - "5.2.3.12. Trust signature\n   (1 octet \"level\" (depth), 1 octet of trust amount)\n\
    \   Signer asserts that the key is not only valid, but also trustworthy,\n   at\
    \ the specified level.  Level 0 has the same meaning as an ordinary\n   validity\
    \ signature.  Level 1 means that the signed key is asserted to\n   be a valid\
    \ trusted introducer, with the 2nd octet of the body\n   specifying the degree\
    \ of trust. Level 2 means that the signed key is\n   asserted to be trusted to\
    \ issue level 1 trust signatures, i.e. that\n   it is a \"meta introducer\". Generally,\
    \ a level n trust signature\n   asserts that a key is trusted to issue level n-1\
    \ trust signatures.\n   The trust amount is in a range from 0-255, interpreted\
    \ such that\n   values less than 120 indicate partial trust and values of 120\
    \ or\n   greater indicate complete trust.  Implementations SHOULD emit values\n\
    \   of 60 for partial trust and 120 for complete trust.\n"
- title: 5.2.3.13. Regular expression
  contents:
  - "5.2.3.13. Regular expression\n   (null-terminated regular expression)\n   Used\
    \ in conjunction with trust signature packets (of level > 0) to\n   limit the\
    \ scope of trust that is extended.  Only signatures by the\n   target key on user\
    \ IDs that match the regular expression in the body\n   of this packet have trust\
    \ extended by the trust signature subpacket.\n   The regular expression uses the\
    \ same syntax as the Henry Spencer's\n   \"almost public domain\" regular expression\
    \ package. A description of\n   the syntax is found in a section below.\n"
- title: 5.2.3.14. Revocation key
  contents:
  - "5.2.3.14. Revocation key\n   (1 octet of class, 1 octet of algid, 20 octets of\
    \ fingerprint)\n   Authorizes the specified key to issue revocation signatures\
    \ for this\n   key.  Class octet must have bit 0x80 set. If the bit 0x40 is set,\n\
    \   then this means that the revocation information is sensitive.  Other\n   bits\
    \ are for future expansion to other kinds of authorizations. This\n   is found\
    \ on a self-signature.\n   If the \"sensitive\" flag is set, the keyholder feels\
    \ this subpacket\n   contains private trust information that describes a real-world\n\
    \   sensitive relationship. If this flag is set, implementations SHOULD\n   NOT\
    \ export this signature to other users except in cases where the\n   data needs\
    \ to be available: when the signature is being sent to the\n   designated revoker,\
    \ or when it is accompanied by a revocation\n   signature from that revoker. \
    \ Note that it may be appropriate to\n   isolate this subpacket within a separate\
    \ signature so that it is not\n   combined with other subpackets that need to\
    \ be exported.\n"
- title: 5.2.3.15. Notation Data
  contents:
  - "5.2.3.15. Notation Data\n       (4 octets of flags, 2 octets of name length (M),\n\
    \                           2 octets of value length (N),\n                  \
    \         M octets of name data,\n                           N octets of value\
    \ data)\n   This subpacket describes a \"notation\" on the signature that the\n\
    \   issuer wishes to make. The notation has a name and a value, each of\n   which\
    \ are strings of octets. There may be more than one notation in a\n   signature.\
    \ Notations can be used for any extension the issuer of the\n   signature cares\
    \ to make. The \"flags\" field holds four octets of\n   flags.\n   All undefined\
    \ flags MUST be zero. Defined flags are:\n       First octet: 0x80 = human-readable.\
    \ This note is text, a note\n                           from one person to another,\
    \ and has no\n                           meaning to software.\n       Other octets:\
    \ none.\n"
- title: 5.2.3.16. Key server preferences
  contents:
  - "5.2.3.16. Key server preferences\n   (N octets of flags)\n   This is a list of\
    \ flags that indicate preferences that the key holder\n   has about how the key\
    \ is handled on a key server. All undefined flags\n   MUST be zero.\n   First\
    \ octet: 0x80 = No-modify\n       the key holder requests that this key only be\
    \ modified or updated\n       by the key holder or an administrator of the key\
    \ server.\n   This is found only on a self-signature.\n"
- title: 5.2.3.17. Preferred key server
  contents:
  - "5.2.3.17. Preferred key server\n   (String)\n   This is a URL of a key server\
    \ that the key holder prefers be used for\n   updates. Note that keys with multiple\
    \ user ids can have a preferred\n   key server for each user id. Note also that\
    \ since this is a URL, the\n   key server can actually be a copy of the key retrieved\
    \ by ftp, http,\n   finger, etc.\n"
- title: 5.2.3.18. Primary user id
  contents:
  - "5.2.3.18. Primary user id\n   (1 octet, boolean)\n   This is a flag in a user\
    \ id's self signature that states whether this\n   user id is the main user id\
    \ for this key. It is reasonable for an\n   implementation to resolve ambiguities\
    \ in preferences, etc. by\n   referring to the primary user id. If this flag is\
    \ absent, its value\n   is zero. If more than one user id in a key is marked as\
    \ primary, the\n   implementation may resolve the ambiguity in any way it sees\
    \ fit.\n"
- title: 5.2.3.19. Policy URL
  contents:
  - "5.2.3.19. Policy URL\n   (String)\n   This subpacket contains a URL of a document\
    \ that describes the policy\n   that the signature was issued under.\n"
- title: 5.2.3.20. Key Flags
  contents:
  - "5.2.3.20. Key Flags\n   (Octet string)\n   This subpacket contains a list of\
    \ binary flags that hold information\n   about a key. It is a string of octets,\
    \ and an implementation MUST NOT\n   assume a fixed size. This is so it can grow\
    \ over time. If a list is\n   shorter than an implementation expects, the unstated\
    \ flags are\n   considered to be zero. The defined flags are:\n       First octet:\n\
    \       0x01 - This key may be used to certify other keys.\n       0x02 - This\
    \ key may be used to sign data.\n       0x04 - This key may be used to encrypt\
    \ communications.\n       0x08 - This key may be used to encrypt storage.\n  \
    \     0x10 - The private component of this key may have been split by a\n    \
    \   secret-sharing mechanism.\n       0x80 - The private component of this key\
    \ may be in the possession\n       of more than one person.\n   Usage notes:\n\
    \   The flags in this packet may appear in self-signatures or in\n   certification\
    \ signatures. They mean different things depending on who\n   is making the statement\
    \ -- for example, a certification signature\n   that has the \"sign data\" flag\
    \ is stating that the certification is\n   for that use. On the other hand, the\
    \ \"communications encryption\" flag\n   in a self-signature is stating a preference\
    \ that a given key be used\n   for communications. Note however, that it is a\
    \ thorny issue to\n   determine what is \"communications\" and what is \"storage.\"\
    \ This\n   decision is left wholly up to the implementation; the authors of this\n\
    \   document do not claim any special wisdom on the issue, and realize\n   that\
    \ accepted opinion may change.\n   The \"split key\" (0x10) and \"group key\"\
    \ (0x80) flags are placed on a\n   self-signature only; they are meaningless on\
    \ a certification\n   signature. They SHOULD be placed only on a direct-key signature\
    \ (type\n   0x1f) or a subkey signature (type 0x18), one that refers to the key\n\
    \   the flag applies to.\n"
- title: 5.2.3.21. Signer's User ID
  contents:
  - "5.2.3.21. Signer's User ID\n   This subpacket allows a keyholder to state which\
    \ user id is\n   responsible for the signing. Many keyholders use a single key\
    \ for\n   different purposes, such as business communications as well as\n   personal\
    \ communications. This subpacket allows such a keyholder to\n   state which of\
    \ their roles is making a signature.\n"
- title: 5.2.3.22. Reason for Revocation
  contents:
  - "5.2.3.22. Reason for Revocation\n   (1 octet of revocation code, N octets of\
    \ reason string)\n   This subpacket is used only in key revocation and certification\n\
    \   revocation signatures. It describes the reason why the key or\n   certificate\
    \ was revoked.\n   The first octet contains a machine-readable code that denotes\
    \ the\n   reason for the revocation:\n       0x00 - No reason specified (key revocations\
    \ or cert revocations)\n       0x01 - Key is superceded (key revocations)\n  \
    \     0x02 - Key material has been compromised (key revocations)\n       0x03\
    \ - Key is no longer used (key revocations)\n       0x20 - User id information\
    \ is no longer valid (cert revocations)\n   Following the revocation code is a\
    \ string of octets which gives\n   information about the reason for revocation\
    \ in human-readable form\n   (UTF-8). The string may be null, that is, of zero\
    \ length. The length\n   of the subpacket is the length of the reason string plus\
    \ one.\n"
- title: 5.2.4. Computing Signatures
  contents:
  - "5.2.4. Computing Signatures\n   All signatures are formed by producing a hash\
    \ over the signature\n   data, and then using the resulting hash in the signature\
    \ algorithm.\n   The signature data is simple to compute for document signatures\n\
    \   (types 0x00 and 0x01), for which the document itself is the data.\n   For\
    \ standalone signatures, this is a null string.\n   When a signature is made over\
    \ a key, the hash data starts with the\n   octet 0x99, followed by a two-octet\
    \ length of the key, and then body\n   of the key packet. (Note that this is an\
    \ old-style packet header for\n   a key packet with two-octet length.) A subkey\
    \ signature (type 0x18)\n   then hashes the subkey, using the same format as the\
    \ main key. Key\n   revocation signatures (types 0x20 and 0x28) hash only the\
    \ key being\n   revoked.\n   A certification signature (type 0x10 through 0x13)\
    \ hashes the user id\n   being bound to the key into the hash context after the\
    \ above data. A\n   V3 certification hashes the contents of the name packet, without\
    \ any\n   header. A V4 certification hashes the constant 0xb4 (which is an\n \
    \  old-style packet header with the length-of-length set to zero), a\n   four-octet\
    \ number giving the length of the username, and then the\n   username data.\n\
    \   Once the data body is hashed, then a trailer is hashed. A V3\n   signature\
    \ hashes five octets of the packet body, starting from the\n   signature type\
    \ field. This data is the signature type, followed by\n   the four-octet signature\
    \ time. A V4 signature hashes the packet body\n   starting from its first field,\
    \ the version number, through the end of\n   the hashed subpacket data. Thus,\
    \ the fields hashed are the signature\n   version, the signature type, the public\
    \ key algorithm, the hash\n   algorithm, the hashed subpacket length, and the\
    \ hashed subpacket\n   body.\n   V4 signatures also hash in a final trailer of\
    \ six octets: the version\n   of the signature packet, i.e. 0x04; 0xFF; a four-octet,\
    \ big-endian\n   number that is the length of the hashed data from the signature\n\
    \   packet (note that this number does not include these final six\n   octets.\n\
    \   After all this has been hashed, the resulting hash field is used in\n   the\
    \ signature algorithm, and placed at the end of the signature\n   packet.\n"
- title: 5.2.4.1. Subpacket Hints
  contents:
  - "5.2.4.1. Subpacket Hints\n   An implementation SHOULD put the two mandatory subpackets,\
    \ creation\n   time and issuer, as the first subpackets in the subpacket list,\n\
    \   simply to make it easier for the implementer to find them.\n   It is certainly\
    \ possible for a signature to contain conflicting\n   information in subpackets.\
    \ For example, a signature may contain\n   multiple copies of a preference or\
    \ multiple expiration times. In most\n   cases, an implementation SHOULD use the\
    \ last subpacket in the\n   signature, but MAY use any conflict resolution scheme\
    \ that makes more\n   sense. Please note that we are intentionally leaving conflict\n\
    \   resolution to the implementer; most conflicts are simply syntax\n   errors,\
    \ and the wishy-washy language here allows a receiver to be\n   generous in what\
    \ they accept, while putting pressure on a creator to\n   be stingy in what they\
    \ generate.\n   Some apparent conflicts may actually make sense -- for example,\n\
    \   suppose a keyholder has an V3 key and a V4 key that share the same\n   RSA\
    \ key material. Either of these keys can verify a signature created\n   by the\
    \ other, and it may be reasonable for a signature to contain an\n   issuer subpacket\
    \ for each key, as a way of explicitly tying those\n   keys to the signature.\n"
- title: 5.3. Symmetric-Key Encrypted Session-Key Packets (Tag 3)
  contents:
  - "5.3. Symmetric-Key Encrypted Session-Key Packets (Tag 3)\n   The Symmetric-Key\
    \ Encrypted Session Key packet holds the symmetric-\n   key encryption of a session\
    \ key used to encrypt a message.  Zero or\n   more Encrypted Session Key packets\
    \ and/or Symmetric-Key Encrypted\n   Session Key packets may precede a Symmetrically\
    \ Encrypted Data Packet\n   that holds an encrypted message.  The message is encrypted\
    \ with a\n   session key, and the session key is itself encrypted and stored in\n\
    \   the Encrypted Session Key packet or the Symmetric-Key Encrypted\n   Session\
    \ Key packet.\n   If the Symmetrically Encrypted Data Packet is preceded by one\
    \ or more\n   Symmetric-Key Encrypted Session Key packets, each specifies a\n\
    \   passphrase that may be used to decrypt the message.  This allows a\n   message\
    \ to be encrypted to a number of public keys, and also to one\n   or more pass\
    \ phrases. This packet type is new, and is not generated\n   by PGP 2.x or PGP\
    \ 5.0.\n   The body of this packet consists of:\n     - A one-octet version number.\
    \ The only currently defined version\n       is 4.\n     - A one-octet number\
    \ describing the symmetric algorithm used.\n     - A string-to-key (S2K) specifier,\
    \ length as defined above.\n     - Optionally, the encrypted session key itself,\
    \ which is decrypted\n       with the string-to-key object.\n   If the encrypted\
    \ session key is not present (which can be detected on\n   the basis of packet\
    \ length and S2K specifier size), then the S2K\n   algorithm applied to the passphrase\
    \ produces the session key for\n   decrypting the file, using the symmetric cipher\
    \ algorithm from the\n   Symmetric-Key Encrypted Session Key packet.\n   If the\
    \ encrypted session key is present, the result of applying the\n   S2K algorithm\
    \ to the passphrase is used to decrypt just that\n   encrypted session key field,\
    \ using CFB mode with an IV of all zeros.\n    The decryption result consists\
    \ of a one-octet algorithm identifier\n   that specifies the symmetric-key encryption\
    \ algorithm used to encrypt\n   the following Symmetrically Encrypted Data Packet,\
    \ followed by the\n   session key octets themselves.\n   Note: because an all-zero\
    \ IV is used for this decryption, the S2K\n   specifier MUST use a salt value,\
    \ either a Salted S2K or an Iterated-\n   Salted S2K.  The salt value will insure\
    \ that the decryption key is\n   not repeated even if the passphrase is reused.\n"
- title: 5.4. One-Pass Signature Packets (Tag 4)
  contents:
  - "5.4. One-Pass Signature Packets (Tag 4)\n   The One-Pass Signature packet precedes\
    \ the signed data and contains\n   enough information to allow the receiver to\
    \ begin calculating any\n   hashes needed to verify the signature.  It allows\
    \ the Signature\n   Packet to be placed at the end of the message, so that the\
    \ signer can\n   compute the entire signed message in one pass.\n   A One-Pass\
    \ Signature does not interoperate with PGP 2.6.x or earlier.\n   The body of this\
    \ packet consists of:\n     - A one-octet version number. The current version\
    \ is 3.\n     - A one-octet signature type. Signature types are described in\n\
    \       section 5.2.1.\n     - A one-octet number describing the hash algorithm\
    \ used.\n     - A one-octet number describing the public key algorithm used.\n\
    \     - An eight-octet number holding the key ID of the signing key.\n     - A\
    \ one-octet number holding a flag showing whether the signature\n       is nested.\
    \  A zero value indicates that the next packet is\n       another One-Pass Signature\
    \ packet that describes another\n       signature to be applied to the same message\
    \ data.\n   Note that if a message contains more than one one-pass signature,\n\
    \   then the signature packets bracket the message; that is, the first\n   signature\
    \ packet after the message corresponds to the last one-pass\n   packet and the\
    \ final signature packet corresponds to the first one-\n   pass packet.\n"
- title: 5.5. Key Material Packet
  contents:
  - "5.5. Key Material Packet\n   A key material packet contains all the information\
    \ about a public or\n   private key.  There are four variants of this packet type,\
    \ and two\n   major versions. Consequently, this section is complex.\n"
- title: 5.5.1. Key Packet Variants
  contents:
  - '5.5.1. Key Packet Variants

    '
- title: 5.5.1.1. Public Key Packet (Tag 6)
  contents:
  - "5.5.1.1. Public Key Packet (Tag 6)\n   A Public Key packet starts a series of\
    \ packets that forms an OpenPGP\n   key (sometimes called an OpenPGP certificate).\n"
- title: 5.5.1.2. Public Subkey Packet (Tag 14)
  contents:
  - "5.5.1.2. Public Subkey Packet (Tag 14)\n   A Public Subkey packet (tag 14) has\
    \ exactly the same format as a\n   Public Key packet, but denotes a subkey. One\
    \ or more subkeys may be\n   associated with a top-level key.  By convention,\
    \ the top-level key\n   provides signature services, and the subkeys provide encryption\n\
    \   services.\n   Note: in PGP 2.6.x, tag 14 was intended to indicate a comment\
    \ packet.\n   This tag was selected for reuse because no previous version of PGP\n\
    \   ever emitted comment packets but they did properly ignore them.\n   Public\
    \ Subkey packets are ignored by PGP 2.6.x and do not cause it to\n   fail, providing\
    \ a limited degree of backward compatibility.\n"
- title: 5.5.1.3. Secret Key Packet (Tag 5)
  contents:
  - "5.5.1.3. Secret Key Packet (Tag 5)\n   A Secret Key packet contains all the information\
    \ that is found in a\n   Public Key packet, including the public key material,\
    \ but also\n   includes the secret key material after all the public key fields.\n"
- title: 5.5.1.4. Secret Subkey Packet (Tag 7)
  contents:
  - "5.5.1.4. Secret Subkey Packet (Tag 7)\n   A Secret Subkey packet (tag 7) is the\
    \ subkey analog of the Secret Key\n   packet, and has exactly the same format.\n"
- title: 5.5.2. Public Key Packet Formats
  contents:
  - "5.5.2. Public Key Packet Formats\n   There are two versions of key-material packets.\
    \ Version 3 packets\n   were first generated by PGP 2.6. Version 2 packets are\
    \ identical in\n   format to Version 3 packets, but are generated by PGP 2.5 or\
    \ before.\n   V2 packets are deprecated and they MUST NOT be generated.  PGP 5.0\n\
    \   introduced version 4 packets, with new fields and semantics.  PGP\n   2.6.x\
    \ will not accept key-material packets with versions greater than\n   3.\n   OpenPGP\
    \ implementations SHOULD create keys with version 4 format. An\n   implementation\
    \ MAY generate a V3 key to ensure interoperability with\n   old software; note,\
    \ however, that V4 keys correct some security\n   deficiencies in V3 keys. These\
    \ deficiencies are described below. An\n   implementation MUST NOT create a V3\
    \ key with a public key algorithm\n   other than RSA.\n   A version 3 public key\
    \ or public subkey packet contains:\n     - A one-octet version number (3).\n\
    \     - A four-octet number denoting the time that the key was created.\n    \
    \ - A two-octet number denoting the time in days that this key is\n       valid.\
    \ If this number is zero, then it does not expire.\n     - A one-octet number\
    \ denoting the public key algorithm of this key\n     - A series of multi-precision\
    \ integers comprising the key\n       material:\n         - a multiprecision integer\
    \ (MPI) of RSA public modulus n;\n         - an MPI of RSA public encryption exponent\
    \ e.\n   V3 keys SHOULD only be used for backward compatibility because of\n \
    \  three weaknesses in them. First, it is relatively easy to construct a\n   V3\
    \ key that has the same key ID as any other key because the key ID\n   is simply\
    \ the low 64 bits of the public modulus. Secondly, because\n   the fingerprint\
    \ of a V3 key hashes the key material, but not its\n   length, which increases\
    \ the opportunity for fingerprint collisions.\n   Third, there are minor weaknesses\
    \ in the MD5 hash algorithm that make\n   developers prefer other algorithms.\
    \ See below for a fuller discussion\n   of key IDs and fingerprints.\n   The version\
    \ 4 format is similar to the version 3 format except for\n   the absence of a\
    \ validity period.  This has been moved to the\n   signature packet.  In addition,\
    \ fingerprints of version 4 keys are\n   calculated differently from version 3\
    \ keys, as described in section\n   \"Enhanced Key Formats.\"\n   A version 4\
    \ packet contains:\n     - A one-octet version number (4).\n     - A four-octet\
    \ number denoting the time that the key was created.\n     - A one-octet number\
    \ denoting the public key algorithm of this key\n     - A series of multi-precision\
    \ integers comprising the key\n       material.  This algorithm-specific portion\
    \ is:\n       Algorithm Specific Fields for RSA public keys:\n         - multiprecision\
    \ integer (MPI) of RSA public modulus n;\n         - MPI of RSA public encryption\
    \ exponent e.\n       Algorithm Specific Fields for DSA public keys:\n       \
    \  - MPI of DSA prime p;\n         - MPI of DSA group order q (q is a prime divisor\
    \ of p-1);\n         - MPI of DSA group generator g;\n         - MPI of DSA public\
    \ key value y (= g**x where x is secret).\n       Algorithm Specific Fields for\
    \ Elgamal public keys:\n         - MPI of Elgamal prime p;\n         - MPI of\
    \ Elgamal group generator g;\n         - MPI of Elgamal public key value y (=\
    \ g**x where x is\n           secret).\n"
- title: 5.5.3. Secret Key Packet Formats
  contents:
  - "5.5.3. Secret Key Packet Formats\n   The Secret Key and Secret Subkey packets\
    \ contain all the data of the\n   Public Key and Public Subkey packets, with additional\
    \ algorithm-\n   specific secret key data appended, in encrypted form.\n   The\
    \ packet contains:\n     - A Public Key or Public Subkey packet, as described\
    \ above\n     - One octet indicating string-to-key usage conventions.  0\n   \
    \    indicates that the secret key data is not encrypted.  255\n       indicates\
    \ that a string-to-key specifier is being given.  Any\n       other value is a\
    \ symmetric-key encryption algorithm specifier.\n     - [Optional] If string-to-key\
    \ usage octet was 255, a one-octet\n       symmetric encryption algorithm.\n \
    \    - [Optional] If string-to-key usage octet was 255, a string-to-key\n    \
    \   specifier.  The length of the string-to-key specifier is implied\n       by\
    \ its type, as described above.\n     - [Optional] If secret data is encrypted,\
    \ eight-octet Initial\n       Vector (IV).\n     - Encrypted multi-precision integers\
    \ comprising the secret key\n       data. These algorithm-specific fields are\
    \ as described below.\n     - Two-octet checksum of the plaintext of the algorithm-specific\n\
    \       portion (sum of all octets, mod 65536).\n       Algorithm Specific Fields\
    \ for RSA secret keys:\n       - multiprecision integer (MPI) of RSA secret exponent\
    \ d.\n       - MPI of RSA secret prime value p.\n       - MPI of RSA secret prime\
    \ value q (p < q).\n       - MPI of u, the multiplicative inverse of p, mod q.\n\
    \       Algorithm Specific Fields for DSA secret keys:\n       - MPI of DSA secret\
    \ exponent x.\n       Algorithm Specific Fields for Elgamal secret keys:\n   \
    \    - MPI of Elgamal secret exponent x.\n   Secret MPI values can be encrypted\
    \ using a passphrase.  If a string-\n   to-key specifier is given, that describes\
    \ the algorithm for\n   converting the passphrase to a key, else a simple MD5\
    \ hash of the\n   passphrase is used.  Implementations SHOULD use a string-to-key\n\
    \   specifier; the simple hash is for backward compatibility. The cipher\n   for\
    \ encrypting the MPIs is specified in the secret key packet.\n   Encryption/decryption\
    \ of the secret data is done in CFB mode using\n   the key created from the passphrase\
    \ and the Initial Vector from the\n   packet. A different mode is used with V3\
    \ keys (which are only RSA)\n   than with other key formats. With V3 keys, the\
    \ MPI bit count prefix\n   (i.e., the first two octets) is not encrypted.  Only\
    \ the MPI non-\n   prefix data is encrypted.  Furthermore, the CFB state is\n\
    \   resynchronized at the beginning of each new MPI value, so that the\n   CFB\
    \ block boundary is aligned with the start of the MPI data.\n   With V4 keys,\
    \ a simpler method is used.  All secret MPI values are\n   encrypted in CFB mode,\
    \ including the MPI bitcount prefix.\n   The 16-bit checksum that follows the\
    \ algorithm-specific portion is\n   the algebraic sum, mod 65536, of the plaintext\
    \ of all the algorithm-\n   specific octets (including MPI prefix and data). \
    \ With V3 keys, the\n   checksum is stored in the clear.  With V4 keys, the checksum\
    \ is\n   encrypted like the algorithm-specific data.  This value is used to\n\
    \   check that the passphrase was correct.\n"
- title: 5.6. Compressed Data Packet (Tag 8)
  contents:
  - "5.6. Compressed Data Packet (Tag 8)\n   The Compressed Data packet contains compressed\
    \ data. Typically, this\n   packet is found as the contents of an encrypted packet,\
    \ or following\n   a Signature or One-Pass Signature packet, and contains literal\
    \ data\n   packets.\n   The body of this packet consists of:\n     - One octet\
    \ that gives the algorithm used to compress the packet.\n     - The remainder\
    \ of the packet is compressed data.\n   A Compressed Data Packet's body contains\
    \ an block that compresses\n   some set of packets. See section \"Packet Composition\"\
    \ for details on\n   how messages are formed.\n   ZIP-compressed packets are compressed\
    \ with raw RFC 1951 DEFLATE\n   blocks. Note that PGP V2.6 uses 13 bits of compression.\
    \ If an\n   implementation uses more bits of compression, PGP V2.6 cannot\n  \
    \ decompress it.\n   ZLIB-compressed packets are compressed with RFC 1950 ZLIB-style\n\
    \   blocks.\n"
- title: 5.7. Symmetrically Encrypted Data Packet (Tag 9)
  contents:
  - "5.7. Symmetrically Encrypted Data Packet (Tag 9)\n   The Symmetrically Encrypted\
    \ Data packet contains data encrypted with\n   a symmetric-key algorithm. When\
    \ it has been decrypted, it will\n   typically contain other packets (often literal\
    \ data packets or\n   compressed data packets).\n   The body of this packet consists\
    \ of:\n     - Encrypted data, the output of the selected symmetric-key cipher\n\
    \       operating in PGP's variant of Cipher Feedback (CFB) mode.\n   The symmetric\
    \ cipher used may be specified in an Public-Key or\n   Symmetric-Key Encrypted\
    \ Session Key packet that precedes the\n   Symmetrically Encrypted Data Packet.\
    \  In that case, the cipher\n   algorithm octet is prefixed to the session key\
    \ before it is\n   encrypted.  If no packets of these types precede the encrypted\
    \ data,\n   the IDEA algorithm is used with the session key calculated as the\
    \ MD5\n   hash of the passphrase.\n   The data is encrypted in CFB mode, with\
    \ a CFB shift size equal to the\n   cipher's block size.  The Initial Vector (IV)\
    \ is specified as all\n   zeros.  Instead of using an IV, OpenPGP prefixes a 10-octet\
    \ string to\n   the data before it is encrypted.  The first eight octets are random,\n\
    \   and the 9th and 10th octets are copies of the 7th and 8th octets,\n   respectively.\
    \ After encrypting the first 10 octets, the CFB state is\n   resynchronized if\
    \ the cipher block size is 8 octets or less.  The\n   last 8 octets of ciphertext\
    \ are passed through the cipher and the\n   block boundary is reset.\n   The repetition\
    \ of 16 bits in the 80 bits of random data prefixed to\n   the message allows\
    \ the receiver to immediately check whether the\n   session key is incorrect.\n"
- title: 5.8. Marker Packet (Obsolete Literal Packet) (Tag 10)
  contents:
  - "5.8. Marker Packet (Obsolete Literal Packet) (Tag 10)\n   An experimental version\
    \ of PGP used this packet as the Literal\n   packet, but no released version of\
    \ PGP generated Literal packets with\n   this tag. With PGP 5.x, this packet has\
    \ been re-assigned and is\n   reserved for use as the Marker packet.\n   The body\
    \ of this packet consists of:\n     - The three octets 0x50, 0x47, 0x50 (which\
    \ spell \"PGP\" in UTF-8).\n   Such a packet MUST be ignored when received.  It\
    \ may be placed at the\n   beginning of a message that uses features not available\
    \ in PGP 2.6.x\n   in order to cause that version to report that newer software\
    \ is\n   necessary to process the message.\n"
- title: 5.9. Literal Data Packet (Tag 11)
  contents:
  - "5.9. Literal Data Packet (Tag 11)\n   A Literal Data packet contains the body\
    \ of a message; data that is\n   not to be further interpreted.\n   The body of\
    \ this packet consists of:\n     - A one-octet field that describes how the data\
    \ is formatted.\n   If it is a 'b' (0x62), then the literal packet contains binary\
    \ data.\n   If it is a 't' (0x74), then it contains text data, and thus may need\n\
    \   line ends converted to local form, or other text-mode changes.  RFC\n   1991\
    \ also defined a value of 'l' as a 'local' mode for machine-local\n   conversions.\
    \  This use is now deprecated.\n     - File name as a string (one-octet length,\
    \ followed by file name),\n       if the encrypted data should be saved as a file.\n\
    \   If the special name \"_CONSOLE\" is used, the message is considered to\n \
    \  be \"for your eyes only\".  This advises that the message data is\n   unusually\
    \ sensitive, and the receiving program should process it more\n   carefully, perhaps\
    \ avoiding storing the received data to disk, for\n   example.\n     - A four-octet\
    \ number that indicates the modification date of the\n       file, or the creation\
    \ time of the packet, or a zero that\n       indicates the present time.\n   \
    \  - The remainder of the packet is literal data.\n   Text data is stored with\
    \ <CR><LF> text endings (i.e. network-normal\n   line endings).  These should\
    \ be converted to native line endings by\n   the receiving software.\n"
- title: 5.10. Trust Packet (Tag 12)
  contents:
  - "5.10. Trust Packet (Tag 12)\n   The Trust packet is used only within keyrings\
    \ and is not normally\n   exported.  Trust packets contain data that record the\
    \ user's\n   specifications of which key holders are trustworthy introducers,\n\
    \   along with other information that implementing software uses for\n   trust\
    \ information.\n   Trust packets SHOULD NOT be emitted to output streams that\
    \ are\n   transferred to other users, and they SHOULD be ignored on any input\n\
    \   other than local keyring files.\n"
- title: 5.11. User ID Packet (Tag 13)
  contents:
  - "5.11. User ID Packet (Tag 13)\n   A User ID packet consists of data that is intended\
    \ to represent the\n   name and email address of the key holder.  By convention,\
    \ it includes\n   an RFC 822 mail name, but there are no restrictions on its content.\n\
    \   The packet length in the header specifies the length of the user id.\n   If\
    \ it is text, it is encoded in UTF-8.\n"
- title: 6. Radix-64 Conversions
  contents:
  - "6. Radix-64 Conversions\n   As stated in the introduction, OpenPGP's underlying\
    \ native\n   representation for objects is a stream of arbitrary octets, and some\n\
    \   systems desire these objects to be immune to damage caused by\n   character\
    \ set translation, data conversions, etc.\n   In principle, any printable encoding\
    \ scheme that met the requirements\n   of the unsafe channel would suffice, since\
    \ it would not change the\n   underlying binary bit streams of the native OpenPGP\
    \ data structures.\n   The OpenPGP standard specifies one such printable encoding\
    \ scheme to\n   ensure interoperability.\n   OpenPGP's Radix-64 encoding is composed\
    \ of two parts: a base64\n   encoding of the binary data, and a checksum.  The\
    \ base64 encoding is\n   identical to the MIME base64 content-transfer-encoding\
    \ [RFC2231,\n   Section 6.8]. An OpenPGP implementation MAY use ASCII Armor to\n\
    \   protect the raw binary data.\n   The checksum is a 24-bit CRC converted to\
    \ four characters of radix-64\n   encoding by the same MIME base64 transformation,\
    \ preceded by an\n   equals sign (=).  The CRC is computed by using the generator\
    \ 0x864CFB\n   and an initialization of 0xB704CE.  The accumulation is done on\
    \ the\n   data before it is converted to radix-64, rather than on the converted\n\
    \   data.  A sample implementation of this algorithm is in the next\n   section.\n\
    \   The checksum with its leading equal sign MAY appear on the first line\n  \
    \ after the Base64 encoded data.\n   Rationale for CRC-24: The size of 24 bits\
    \ fits evenly into printable\n   base64.  The nonzero initialization can detect\
    \ more errors than a\n   zero initialization.\n"
- title: 6.1. An Implementation of the CRC-24 in "C"
  contents:
  - "6.1. An Implementation of the CRC-24 in \"C\"\n       #define CRC24_INIT 0xb704ceL\n\
    \       #define CRC24_POLY 0x1864cfbL\n       typedef long crc24;\n       crc24\
    \ crc_octets(unsigned char *octets, size_t len)\n       {\n           crc24 crc\
    \ = CRC24_INIT;\n           int i;\n           while (len--) {\n             \
    \  crc ^= (*octets++) << 16;\n               for (i = 0; i < 8; i++) {\n     \
    \              crc <<= 1;\n                   if (crc & 0x1000000)\n         \
    \              crc ^= CRC24_POLY;\n               }\n           }\n          \
    \ return crc & 0xffffffL;\n       }\n"
- title: 6.2. Forming ASCII Armor
  contents:
  - "6.2. Forming ASCII Armor\n   When OpenPGP encodes data into ASCII Armor, it puts\
    \ specific headers\n   around the data, so OpenPGP can reconstruct the data later.\
    \ OpenPGP\n   informs the user what kind of data is encoded in the ASCII armor\n\
    \   through the use of the headers.\n   Concatenating the following data creates\
    \ ASCII Armor:\n     - An Armor Header Line, appropriate for the type of data\n\
    \     - Armor Headers\n     - A blank (zero-length, or containing only whitespace)\
    \ line\n     - The ASCII-Armored data\n     - An Armor Checksum\n     - The Armor\
    \ Tail, which depends on the Armor Header Line.\n   An Armor Header Line consists\
    \ of the appropriate header line text\n   surrounded by five (5) dashes ('-',\
    \ 0x2D) on either side of the\n   header line text.  The header line text is chosen\
    \ based upon the type\n   of data that is being encoded in Armor, and how it is\
    \ being encoded.\n   Header line texts include the following strings:\n   BEGIN\
    \ PGP MESSAGE\n       Used for signed, encrypted, or compressed files.\n   BEGIN\
    \ PGP PUBLIC KEY BLOCK\n       Used for armoring public keys\n   BEGIN PGP PRIVATE\
    \ KEY BLOCK\n       Used for armoring private keys\n   BEGIN PGP MESSAGE, PART\
    \ X/Y\n       Used for multi-part messages, where the armor is split amongst Y\n\
    \       parts, and this is the Xth part out of Y.\n   BEGIN PGP MESSAGE, PART\
    \ X\n       Used for multi-part messages, where this is the Xth part of an\n \
    \      unspecified number of parts. Requires the MESSAGE-ID Armor Header\n   \
    \    to be used.\n   BEGIN PGP SIGNATURE\n       Used for detached signatures,\
    \ OpenPGP/MIME signatures, and\n       natures following clearsigned messages.\
    \ Note that PGP 2.x s BEGIN\n       PGP MESSAGE for detached signatures.\n   The\
    \ Armor Headers are pairs of strings that can give the user or the\n   receiving\
    \ OpenPGP implementation some information about how to decode\n   or use the message.\
    \  The Armor Headers are a part of the armor, not a\n   part of the message, and\
    \ hence are not protected by any signatures\n   applied to the message.\n   The\
    \ format of an Armor Header is that of a key-value pair.  A colon\n   (':' 0x38)\
    \ and a single space (0x20) separate the key and value.\n   OpenPGP should consider\
    \ improperly formatted Armor Headers to be\n   corruption of the ASCII Armor.\
    \  Unknown keys should be reported to\n   the user, but OpenPGP should continue\
    \ to process the message.\n   Currently defined Armor Header Keys are:\n     -\
    \ \"Version\", that states the OpenPGP Version used to encode the\n       message.\n\
    \     - \"Comment\", a user-defined comment.\n     - \"MessageID\", a 32-character\
    \ string of printable characters.  The\n       string must be the same for all\
    \ parts of a multi-part message\n       that uses the \"PART X\" Armor Header.\
    \  MessageID strings should be\n       unique enough that the recipient of the\
    \ mail can associate all\n       the parts of a message with each other. A good\
    \ checksum or\n       cryptographic hash function is sufficient.\n     - \"Hash\"\
    , a comma-separated list of hash algorithms used in this\n       message. This\
    \ is used only in clear-signed messages.\n     - \"Charset\", a description of\
    \ the character set that the plaintext\n       is in. Please note that OpenPGP\
    \ defines text to be in UTF-8 by\n       default. An implementation will get best\
    \ results by translating\n       into and out of UTF-8. However, there are many\
    \ instances where\n       this is easier said than done. Also, there are communities\
    \ of\n       users who have no need for UTF-8 because they are all happy with\n\
    \       a character set like ISO Latin-5 or a Japanese character set. In\n   \
    \    such instances, an implementation MAY override the UTF-8 default\n      \
    \ by using this header key. An implementation MAY implement this\n       key and\
    \ any translations it cares to; an implementation MAY\n       ignore it and assume\
    \ all text is UTF-8.\n       The MessageID SHOULD NOT appear unless it is in a\
    \ multi-part\n       message. If it appears at all, it MUST be computed from the\n\
    \       finished (encrypted, signed, etc.) message in a deterministic\n      \
    \ fashion, rather than contain a purely random value.  This is to\n       allow\
    \ the legitimate recipient to determine that the MessageID\n       cannot serve\
    \ as a covert means of leaking cryptographic key\n       information.\n   The\
    \ Armor Tail Line is composed in the same manner as the Armor\n   Header Line,\
    \ except the string \"BEGIN\" is replaced by the string\n   \"END.\"\n"
- title: 6.3. Encoding Binary in Radix-64
  contents:
  - "6.3. Encoding Binary in Radix-64\n   The encoding process represents 24-bit groups\
    \ of input bits as output\n   strings of 4 encoded characters. Proceeding from\
    \ left to right, a\n   24-bit input group is formed by concatenating three 8-bit\
    \ input\n   groups. These 24 bits are then treated as four concatenated 6-bit\n\
    \   groups, each of which is translated into a single digit in the\n   Radix-64\
    \ alphabet. When encoding a bit stream with the Radix-64\n   encoding, the bit\
    \ stream must be presumed to be ordered with the\n   most-significant-bit first.\
    \ That is, the first bit in the stream will\n   be the high-order bit in the first\
    \ 8-bit octet, and the eighth bit\n   will be the low-order bit in the first 8-bit\
    \ octet, and so on.\n         +--first octet--+-second octet--+--third octet--+\n\
    \         |7 6 5 4 3 2 1 0|7 6 5 4 3 2 1 0|7 6 5 4 3 2 1 0|\n         +-----------+---+-------+-------+---+-----------+\n\
    \         |5 4 3 2 1 0|5 4 3 2 1 0|5 4 3 2 1 0|5 4 3 2 1 0|\n         +--1.index--+--2.index--+--3.index--+--4.index--+\n\
    \   Each 6-bit group is used as an index into an array of 64 printable\n   characters\
    \ from the table below. The character referenced by the\n   index is placed in\
    \ the output string.\n     Value Encoding  Value Encoding  Value Encoding  Value\
    \ Encoding\n         0 A            17 R            34 i            51 z\n   \
    \      1 B            18 S            35 j            52 0\n         2 C     \
    \       19 T            36 k            53 1\n         3 D            20 U   \
    \         37 l            54 2\n         4 E            21 V            38 m \
    \           55 3\n         5 F            22 W            39 n            56 4\n\
    \         6 G            23 X            40 o            57 5\n         7 H  \
    \          24 Y            41 p            58 6\n         8 I            25 Z\
    \            42 q            59 7\n         9 J            26 a            43\
    \ r            60 8\n        10 K            27 b            44 s            61\
    \ 9\n        11 L            28 c            45 t            62 +\n        12\
    \ M            29 d            46 u            63 /\n        13 N            30\
    \ e            47 v\n        14 O            31 f            48 w         (pad)\
    \ =\n        15 P            32 g            49 x\n        16 Q            33\
    \ h            50 y\n   The encoded output stream must be represented in lines\
    \ of no more\n   than 76 characters each.\n   Special processing is performed\
    \ if fewer than 24 bits are available\n   at the end of the data being encoded.\
    \ There are three possibilities:\n    1. The last data group has 24 bits (3 octets).\
    \ No special\n       processing is needed.\n    2. The last data group has 16\
    \ bits (2 octets). The first two 6-bit\n       groups are processed as above.\
    \ The third (incomplete) data group\n       has two zero-value bits added to it,\
    \ and is processed as above.\n       A pad character (=) is added to the output.\n\
    \    3. The last data group has 8 bits (1 octet). The first 6-bit group\n    \
    \   is processed as above. The second (incomplete) data group has\n       four\
    \ zero-value bits added to it, and is processed as above. Two\n       pad characters\
    \ (=) are added to the output.\n"
- title: 6.4. Decoding Radix-64
  contents:
  - "6.4. Decoding Radix-64\n   Any characters outside of the base64 alphabet are\
    \ ignored in Radix-64\n   data. Decoding software must ignore all line breaks\
    \ or other\n   characters not found in the table above.\n   In Radix-64 data,\
    \ characters other than those in the table, line\n   breaks, and other white space\
    \ probably indicate a transmission error,\n   about which a warning message or\
    \ even a message rejection might be\n   appropriate under some circumstances.\n\
    \   Because it is used only for padding at the end of the data, the\n   occurrence\
    \ of any \"=\" characters may be taken as evidence that the\n   end of the data\
    \ has been reached (without truncation in transit). No\n   such assurance is possible,\
    \ however, when the number of octets\n   transmitted was a multiple of three and\
    \ no \"=\" characters are\n   present.\n"
- title: 6.5. Examples of Radix-64
  contents:
  - "6.5. Examples of Radix-64\n       Input data:  0x14fb9c03d97e\n       Hex:  \
    \   1   4    f   b    9   c     | 0   3    d   9    7   e\n       8-bit:   00010100\
    \ 11111011 10011100  | 00000011 11011001\n       11111110\n       6-bit:   000101\
    \ 001111 101110 011100 | 000000 111101 100111\n       111110\n       Decimal:\
    \ 5      15     46     28       0      61     37     62\n       Output:  F   \
    \   P      u      c        A      9      l      +\n       Input data:  0x14fb9c03d9\n\
    \       Hex:     1   4    f   b    9   c     | 0   3    d   9\n       8-bit: \
    \  00010100 11111011 10011100  | 00000011 11011001\n                         \
    \                              pad with 00\n       6-bit:   000101 001111 101110\
    \ 011100 | 000000 111101 100100\n       Decimal: 5      15     46     28     \
    \  0      61     36\n                                                        \
    \  pad with =\n       Output:  F      P      u      c        A      9      k \
    \     =\n       Input data:  0x14fb9c03\n       Hex:     1   4    f   b    9 \
    \  c     | 0   3\n       8-bit:   00010100 11111011 10011100  | 00000011\n   \
    \                                           pad with 0000\n       6-bit:   000101\
    \ 001111 101110 011100 | 000000 110000\n       Decimal: 5      15     46     28\
    \       0      48\n                                                   pad with\
    \ =      =\n       Output:  F      P      u      c        A      w      =    \
    \  =\n"
- title: 6.6. Example of an ASCII Armored Message
  contents:
  - "6.6. Example of an ASCII Armored Message\n  -----BEGIN PGP MESSAGE-----\n  Version:\
    \ OpenPrivacy 0.99\n  yDgBO22WxBHv7O8X7O/jygAEzol56iUKiXmV+XmpCtmpqQUKiQrFqclFqUDBovzS\n\
    \  vBSFjNSiVHsuAA==\n  =njUN\n  -----END PGP MESSAGE-----\n   Note that this example\
    \ is indented by two spaces.\n"
- title: 7. Cleartext signature framework
  contents:
  - "7. Cleartext signature framework\n   It is desirable to sign a textual octet\
    \ stream without ASCII armoring\n   the stream itself, so the signed text is still\
    \ readable without\n   special software. In order to bind a signature to such\
    \ a cleartext,\n   this framework is used.  (Note that RFC 2015 defines another\
    \ way to\n   clear sign messages for environments that support MIME.)\n   The\
    \ cleartext signed message consists of:\n     - The cleartext header '-----BEGIN\
    \ PGP SIGNED MESSAGE-----' on a\n       single line,\n     - One or more \"Hash\"\
    \ Armor Headers,\n     - Exactly one empty line not included into the message\
    \ digest,\n     - The dash-escaped cleartext that is included into the message\n\
    \       digest,\n     - The ASCII armored signature(s) including the '-----BEGIN\
    \ PGP\n       SIGNATURE-----' Armor Header and Armor Tail Lines.\n   If the \"\
    Hash\" armor header is given, the specified message digest\n   algorithm is used\
    \ for the signature. If there are no such headers,\n   MD5 is used, an implementation\
    \ MAY omit them for V2.x compatibility.\n   If more than one message digest is\
    \ used in the signature, the \"Hash\"\n   armor header contains a comma-delimited\
    \ list of used message digests.\n   Current message digest names are described\
    \ below with the algorithm\n   IDs.\n"
- title: 7.1. Dash-Escaped Text
  contents:
  - "7.1. Dash-Escaped Text\n   The cleartext content of the message must also be\
    \ dash-escaped.\n   Dash escaped cleartext is the ordinary cleartext where every\
    \ line\n   starting with a dash '-' (0x2D) is prefixed by the sequence dash '-'\n\
    \   (0x2D) and space ' ' (0x20). This prevents the parser from\n   recognizing\
    \ armor headers of the cleartext itself. The message digest\n   is computed using\
    \ the cleartext itself, not the dash escaped form.\n   As with binary signatures\
    \ on text documents, a cleartext signature is\n   calculated on the text using\
    \ canonical <CR><LF> line endings.  The\n   line ending (i.e. the <CR><LF>) before\
    \ the '-----BEGIN PGP\n   SIGNATURE-----' line that terminates the signed text\
    \ is not\n   considered part of the signed text.\n   Also, any trailing whitespace\
    \ (spaces, and tabs, 0x09) at the end of\n   any line is ignored when the cleartext\
    \ signature is calculated.\n"
- title: 8. Regular Expressions
  contents:
  - "8. Regular Expressions\n   A regular expression is zero or more branches, separated\
    \ by '|'. It\n   matches anything that matches one of the branches.\n   A branch\
    \ is zero or more pieces, concatenated. It matches a match for\n   the first,\
    \ followed by a match for the second, etc.\n   A piece is an atom possibly followed\
    \ by '*', '+', or '?'. An atom\n   followed by '*' matches a sequence of 0 or\
    \ more matches of the atom.\n   An atom followed by '+' matches a sequence of\
    \ 1 or more matches of\n   the atom. An atom followed by '?' matches a match of\
    \ the atom, or the\n   null string.\n   An atom is a regular expression in parentheses\
    \ (matching a match for\n   the regular expression), a range (see below), '.'\
    \ (matching any\n   single character), '^' (matching the null string at the beginning\
    \ of\n   the input string), '$' (matching the null string at the end of the\n\
    \   input string), a '\\' followed by a single character (matching that\n   character),\
    \ or a single character with no other significance\n   (matching that character).\n\
    \   A range is a sequence of characters enclosed in '[]'. It normally\n   matches\
    \ any single character from the sequence. If the sequence\n   begins with '^',\
    \ it matches any single character not from the rest of\n   the sequence. If two\
    \ characters in the sequence are separated by '-',\n   this is shorthand for the\
    \ full list of ASCII characters between them\n   (e.g. '[0-9]' matches any decimal\
    \ digit). To include a literal ']' in\n   the sequence, make it the first character\
    \ (following a possible '^').\n   To include a literal '-', make it the first\
    \ or last character.\n"
- title: 9. Constants
  contents:
  - "9. Constants\n   This section describes the constants used in OpenPGP.\n   Note\
    \ that these tables are not exhaustive lists; an implementation\n   MAY implement\
    \ an algorithm not on these lists.\n   See the section \"Notes on Algorithms\"\
    \ below for more discussion of\n   the algorithms.\n"
- title: 9.1. Public Key Algorithms
  contents:
  - "9.1. Public Key Algorithms\n       ID           Algorithm\n       --        \
    \   ---------\n       1          - RSA (Encrypt or Sign)\n       2          -\
    \ RSA Encrypt-Only\n       3          - RSA Sign-Only\n       16         - Elgamal\
    \ (Encrypt-Only), see [ELGAMAL]\n       17         - DSA (Digital Signature Standard)\n\
    \       18         - Reserved for Elliptic Curve\n       19         - Reserved\
    \ for ECDSA\n       20         - Elgamal (Encrypt or Sign)\n       21        \
    \ - Reserved for Diffie-Hellman (X9.42,\n                    as defined for IETF-S/MIME)\n\
    \       100 to 110 - Private/Experimental algorithm.\n   Implementations MUST\
    \ implement DSA for signatures, and Elgamal for\n   encryption. Implementations\
    \ SHOULD implement RSA keys.\n   Implementations MAY implement any other algorithm.\n"
- title: 9.2. Symmetric Key Algorithms
  contents:
  - "9.2. Symmetric Key Algorithms\n       ID           Algorithm\n       --     \
    \      ---------\n       0          - Plaintext or unencrypted data\n       1\
    \          - IDEA [IDEA]\n       2          - Triple-DES (DES-EDE, as per spec\
    \ -\n                    168 bit key derived from 192)\n       3          - CAST5\
    \ (128 bit key, as per RFC 2144)\n       4          - Blowfish (128 bit key, 16\
    \ rounds) [BLOWFISH]\n       5          - SAFER-SK128 (13 rounds) [SAFER]\n  \
    \     6          - Reserved for DES/SK\n       7          - Reserved for AES with\
    \ 128-bit key\n       8          - Reserved for AES with 192-bit key\n       9\
    \          - Reserved for AES with 256-bit key\n       100 to 110 - Private/Experimental\
    \ algorithm.\n   Implementations MUST implement Triple-DES. Implementations SHOULD\n\
    \   implement IDEA and CAST5.Implementations MAY implement any other\n   algorithm.\n"
- title: 9.3. Compression Algorithms
  contents:
  - "9.3. Compression Algorithms\n       ID           Algorithm\n       --       \
    \    ---------\n       0          - Uncompressed\n       1          - ZIP (RFC\
    \ 1951)\n       2          - ZLIB (RFC 1950)\n       100 to 110 - Private/Experimental\
    \ algorithm.\n   Implementations MUST implement uncompressed data. Implementations\n\
    \   SHOULD implement ZIP. Implementations MAY implement ZLIB.\n"
- title: 9.4. Hash Algorithms
  contents:
  - "9.4. Hash Algorithms\n       ID           Algorithm                         \
    \     Text Name\n       --           ---------                              ----\
    \ ----\n       1          - MD5                                    \"MD5\"\n \
    \      2          - SHA-1                                  \"SHA1\"\n       3\
    \          - RIPE-MD/160                            \"RIPEMD160\"\n       4  \
    \        - Reserved for double-width SHA (experimental)\n       5          - MD2\
    \                                    \"MD2\"\n       6          - Reserved for\
    \ TIGER/192                 \"TIGER192\"\n       7          - Reserved for HAVAL\
    \ (5 pass, 160-bit)\n       \"HAVAL-5-160\"\n       100 to 110 - Private/Experimental\
    \ algorithm.\n   Implementations MUST implement SHA-1. Implementations SHOULD\n\
    \   implement MD5.\n"
- title: 10. Packet Composition
  contents:
  - "10. Packet Composition\n   OpenPGP packets are assembled into sequences in order\
    \ to create\n   messages and to transfer keys.  Not all possible packet sequences\
    \ are\n   meaningful and correct.  This describes the rules for how packets\n\
    \   should be placed into sequences.\n"
- title: 10.1. Transferable Public Keys
  contents:
  - "10.1. Transferable Public Keys\n   OpenPGP users may transfer public keys. The\
    \ essential elements of a\n   transferable public key are:\n     - One Public\
    \ Key packet\n     - Zero or more revocation signatures\n     - One or more User\
    \ ID packets\n     - After each User ID packet, zero or more signature packets\n\
    \       (certifications)\n     - Zero or more Subkey packets\n     - After each\
    \ Subkey packet, one signature packet, optionally a\n       revocation.\n   The\
    \ Public Key packet occurs first.  Each of the following User ID\n   packets provides\
    \ the identity of the owner of this public key.  If\n   there are multiple User\
    \ ID packets, this corresponds to multiple\n   means of identifying the same unique\
    \ individual user; for example, a\n   user may have more than one email address,\
    \ and construct a User ID\n   for each one.\n   Immediately following each User\
    \ ID packet, there are zero or more\n   signature packets. Each signature packet\
    \ is calculated on the\n   immediately preceding User ID packet and the initial\
    \ Public Key\n   packet. The signature serves to certify the corresponding public\
    \ key\n   and user ID.  In effect, the signer is testifying to his or her\n  \
    \ belief that this public key belongs to the user identified by this\n   user\
    \ ID.\n   After the User ID packets there may be one or more Subkey packets.\n\
    \   In general, subkeys are provided in cases where the top-level public\n   key\
    \ is a signature-only key.  However, any V4 key may have subkeys,\n   and the\
    \ subkeys may be encryption-only keys, signature-only keys, or\n   general-purpose\
    \ keys.\n   Each Subkey packet must be followed by one Signature packet, which\n\
    \   should be a subkey binding signature issued by the top level key.\n   Subkey\
    \ and Key packets may each be followed by a revocation Signature\n   packet to\
    \ indicate that the key is revoked.  Revocation signatures\n   are only accepted\
    \ if they are issued by the key itself, or by a key\n   that is authorized to\
    \ issue revocations via a revocation key\n   subpacket in a self-signature by\
    \ the top level key.\n   Transferable public key packet sequences may be concatenated\
    \ to allow\n   transferring multiple public keys in one operation.\n"
- title: 10.2. OpenPGP Messages
  contents:
  - "10.2. OpenPGP Messages\n   An OpenPGP message is a packet or sequence of packets\
    \ that\n   corresponds to the following grammatical rules (comma represents\n\
    \   sequential composition, and vertical bar separates alternatives):\n   OpenPGP\
    \ Message :- Encrypted Message | Signed Message |\n                      Compressed\
    \ Message | Literal Message.\n   Compressed Message :- Compressed Data Packet.\n\
    \   Literal Message :- Literal Data Packet.\n   ESK :- Public Key Encrypted Session\
    \ Key Packet |\n          Symmetric-Key Encrypted Session Key Packet.\n   ESK\
    \ Sequence :- ESK | ESK Sequence, ESK.\n   Encrypted Message :- Symmetrically\
    \ Encrypted Data Packet |\n               ESK Sequence, Symmetrically Encrypted\
    \ Data Packet.\n   One-Pass Signed Message :- One-Pass Signature Packet,\n   \
    \            OpenPGP Message, Corresponding Signature Packet.\n   Signed Message\
    \ :- Signature Packet, OpenPGP Message |\n               One-Pass Signed Message.\n\
    \   In addition, decrypting a Symmetrically Encrypted Data packet and\n   decompressing\
    \ a Compressed Data packet must yield a valid OpenPGP\n   Message.\n"
- title: 10.3. Detached Signatures
  contents:
  - "10.3. Detached Signatures\n   Some OpenPGP applications use so-called \"detached\
    \ signatures.\" For\n   example, a program bundle may contain a file, and with\
    \ it a second\n   file that is a detached signature of the first file. These detached\n\
    \   signatures are simply a signature packet stored separately from the\n   data\
    \ that they are a signature of.\n"
- title: 11. Enhanced Key Formats
  contents:
  - '11. Enhanced Key Formats

    '
- title: 11.1. Key Structures
  contents:
  - "11.1. Key Structures\n   The format of an OpenPGP V3 key is as follows.  Entries\
    \ in square\n   brackets are optional and ellipses indicate repetition.\n    \
    \       RSA Public Key\n              [Revocation Self Signature]\n          \
    \     User ID [Signature ...]\n              [User ID [Signature ...] ...]\n \
    \  Each signature certifies the RSA public key and the preceding user\n   ID.\
    \ The RSA public key can have many user IDs and each user ID can\n   have many\
    \ signatures.\n   The format of an OpenPGP V4 key that uses two public keys is\
    \ similar\n   except that the other keys are added to the end as 'subkeys' of\
    \ the\n   primary key.\n           Primary-Key\n              [Revocation Self\
    \ Signature]\n              [Direct Key Self Signature...]\n               User\
    \ ID [Signature ...]\n              [User ID [Signature ...] ...]\n          \
    \    [[Subkey [Binding-Signature-Revocation]\n                      Primary-Key-Binding-Signature]\
    \ ...]\n   A subkey always has a single signature after it that is issued using\n\
    \   the primary key to tie the two keys together.  This binding signature\n  \
    \ may be in either V3 or V4 format, but V4 is preferred, of course.\n   In the\
    \ above diagram, if the binding signature of a subkey has been\n   revoked, the\
    \ revoked binding signature may be removed, leaving only\n   one signature.\n\
    \   In a key that has a main key and subkeys, the primary key MUST be a\n   key\
    \ capable of signing. The subkeys may be keys of any other type.\n   There may\
    \ be other constructions of V4 keys, too. For example, there\n   may be a single-key\
    \ RSA key in V4 format, a DSA primary key with an\n   RSA encryption key, or RSA\
    \ primary key with an Elgamal subkey, etc.\n   It is also possible to have a signature-only\
    \ subkey. This permits a\n   primary key that collects certifications (key signatures)\
    \ but is used\n   only used for certifying subkeys that are used for encryption\
    \ and\n   signatures.\n"
- title: 11.2. Key IDs and Fingerprints
  contents:
  - "11.2. Key IDs and Fingerprints\n   For a V3 key, the eight-octet key ID consists\
    \ of the low 64 bits of\n   the public modulus of the RSA key.\n   The fingerprint\
    \ of a V3 key is formed by hashing the body (but not\n   the two-octet length)\
    \ of the MPIs that form the key material (public\n   modulus n, followed by exponent\
    \ e) with MD5.\n   A V4 fingerprint is the 160-bit SHA-1 hash of the one-octet\
    \ Packet\n   Tag, followed by the two-octet packet length, followed by the entire\n\
    \   Public Key packet starting with the version field.  The key ID is the\n  \
    \ low order 64 bits of the fingerprint.  Here are the fields of the\n   hash material,\
    \ with the example of a DSA key:\n  a.1) 0x99 (1 octet)\n  a.2) high order length\
    \ octet of (b)-(f) (1 octet)\n  a.3) low order length octet of (b)-(f) (1 octet)\n\
    \    b) version number = 4 (1 octet);\n    c) time stamp of key creation (4 octets);\n\
    \    d) algorithm (1 octet): 17 = DSA (example);\n    e) Algorithm specific fields.\n\
    \   Algorithm Specific Fields for DSA keys (example):\n  e.1) MPI of DSA prime\
    \ p;\n  e.2) MPI of DSA group order q (q is a prime divisor of p-1);\n  e.3) MPI\
    \ of DSA group generator g;\n  e.4) MPI of DSA public key value y (= g**x where\
    \ x is secret).\n   Note that it is possible for there to be collisions of key\
    \ IDs -- two\n   different keys with the same key ID. Note that there is a much\n\
    \   smaller, but still non-zero probability that two different keys have\n   the\
    \ same fingerprint.\n   Also note that if V3 and V4 format keys share the same\
    \ RSA key\n   material, they will have different key ids as well as different\n\
    \   fingerprints.\n"
- title: 12. Notes on Algorithms
  contents:
  - '12. Notes on Algorithms

    '
- title: 12.1. Symmetric Algorithm Preferences
  contents:
  - "12.1. Symmetric Algorithm Preferences\n   The symmetric algorithm preference\
    \ is an ordered list of algorithms\n   that the keyholder accepts. Since it is\
    \ found on a self-signature, it\n   is possible that a keyholder may have different\
    \ preferences. For\n   example, Alice may have TripleDES only specified for \"\
    alice@work.com\"\n   but CAST5, Blowfish, and TripleDES specified for \"alice@home.org\"\
    .\n   Note that it is also possible for preferences to be in a subkey's\n   binding\
    \ signature.\n   Since TripleDES is the MUST-implement algorithm, if it is not\n\
    \   explicitly in the list, it is tacitly at the end. However, it is good\n  \
    \ form to place it there explicitly. Note also that if an\n   implementation does\
    \ not implement the preference, then it is\n   implicitly a TripleDES-only implementation.\n\
    \   An implementation MUST not use a symmetric algorithm that is not in\n   the\
    \ recipient's preference list. When encrypting to more than one\n   recipient,\
    \ the implementation finds a suitable algorithm by taking\n   the intersection\
    \ of the preferences of the recipients. Note that the\n   MUST-implement algorithm,\
    \ TripleDES, ensures that the intersection is\n   not null. The implementation\
    \ may use any mechanism to pick an\n   algorithm in the intersection.\n   If an\
    \ implementation can decrypt a message that a keyholder doesn't\n   have in their\
    \ preferences, the implementation SHOULD decrypt the\n   message anyway, but MUST\
    \ warn the keyholder than protocol has been\n   violated. (For example, suppose\
    \ that Alice, above, has software that\n   implements all algorithms in this specification.\
    \ Nonetheless, she\n   prefers subsets for work or home. If she is sent a message\
    \ encrypted\n   with IDEA, which is not in her preferences, the software warns\
    \ her\n   that someone sent her an IDEA-encrypted message, but it would ideally\n\
    \   decrypt it anyway.)\n   An implementation that is striving for backward compatibility\
    \ MAY\n   consider a V3 key with a V3 self-signature to be an implicit\n   preference\
    \ for IDEA, and no ability to do TripleDES. This is\n   technically non-compliant,\
    \ but an implementation MAY violate the\n   above rule in this case only and use\
    \ IDEA to encrypt the message,\n   provided that the message creator is warned.\
    \ Ideally, though, the\n   implementation would follow the rule by actually generating\
    \ two\n   messages, because it is possible that the OpenPGP user's\n   implementation\
    \ does not have IDEA, and thus could not read the\n   message. Consequently, an\
    \ implementation MAY, but SHOULD NOT use IDEA\n   in an algorithm conflict with\
    \ a V3 key.\n"
- title: 12.2. Other Algorithm Preferences
  contents:
  - "12.2. Other Algorithm Preferences\n   Other algorithm preferences work similarly\
    \ to the symmetric algorithm\n   preference, in that they specify which algorithms\
    \ the keyholder\n   accepts. There are two interesting cases that other comments\
    \ need to\n   be made about, though, the compression preferences and the hash\n\
    \   preferences.\n"
- title: 12.2.1. Compression Preferences
  contents:
  - "12.2.1. Compression Preferences\n   Compression has been an integral part of\
    \ PGP since its first days.\n   OpenPGP and all previous versions of PGP have\
    \ offered compression.\n   And in this specification, the default is for messages\
    \ to be\n   compressed, although an implementation is not required to do so.\n\
    \   Consequently, the compression preference gives a way for a keyholder\n   to\
    \ request that messages not be compressed, presumably because they\n   are using\
    \ a minimal implementation that does not include compression.\n   Additionally,\
    \ this gives a keyholder a way to state that it can\n   support alternate algorithms.\n\
    \   Like the algorithm preferences, an implementation MUST NOT use an\n   algorithm\
    \ that is not in the preference vector. If the preferences\n   are not present,\
    \ then they are assumed to be [ZIP(1),\n   UNCOMPRESSED(0)].\n"
- title: 12.2.2. Hash Algorithm Preferences
  contents:
  - "12.2.2. Hash Algorithm Preferences\n   Typically, the choice of a hash algorithm\
    \ is something the signer\n   does, rather than the verifier, because a signer\
    \ does not typically\n   know who is going to be verifying the signature. This\
    \ preference,\n   though, allows a protocol based upon digital signatures ease\
    \ in\n   negotiation.\n   Thus, if Alice is authenticating herself to Bob with\
    \ a signature, it\n   makes sense for her to use a hash algorithm that Bob's software\
    \ uses.\n   This preference allows Bob to state in his key which algorithms Alice\n\
    \   may use.\n"
- title: 12.3. Plaintext
  contents:
  - "12.3. Plaintext\n   Algorithm 0, \"plaintext\", may only be used to denote secret\
    \ keys that\n   are stored in the clear. Implementations must not use plaintext\
    \ in\n   Symmetrically Encrypted Data Packets; they must use Literal Data\n  \
    \ Packets to encode unencrypted or literal data.\n"
- title: 12.4. RSA
  contents:
  - "12.4. RSA\n   There are algorithm types for RSA-signature-only, and RSA-encrypt-\n\
    \   only keys. These types are deprecated. The \"key flags\" subpacket in a\n\
    \   signature is a much better way to express the same idea, and\n   generalizes\
    \ it to all algorithms. An implementation SHOULD NOT create\n   such a key, but\
    \ MAY interpret it.\n   An implementation SHOULD NOT implement RSA keys of size\
    \ less than 768\n   bits.\n   It is permissible for an implementation to support\
    \ RSA merely for\n   backward compatibility; for example, such an implementation\
    \ would\n   support V3 keys with IDEA symmetric cryptography. Note that this is\n\
    \   an exception to the other MUST-implement rules. An implementation\n   that\
    \ supports RSA in V4 keys MUST implement the MUST-implement\n   features.\n"
- title: 12.5. Elgamal
  contents:
  - "12.5. Elgamal\n   If an Elgamal key is to be used for both signing and encryption,\n\
    \   extra care must be taken in creating the key.\n   An ElGamal key consists\
    \ of a generator g, a prime modulus p, a secret\n   exponent x, and a public value\
    \ y = g^x mod p.\n   The generator and prime must be chosen so that solving the\
    \ discrete\n   log problem is intractable.  The group g should generate the\n\
    \   multiplicative group mod p-1 or a large subgroup of it, and the order\n  \
    \ of g should have at least one large prime factor.  A good choice is\n   to use\
    \ a \"strong\" Sophie-Germain prime in choosing p, so that both p\n   and (p-1)/2\
    \ are primes. In fact, this choice is so good that\n   implementors SHOULD do\
    \ it, as it avoids a small subgroup attack.\n   In addition, a result of Bleichenbacher\
    \ [BLEICHENBACHER] shows that\n   if the generator g has only small prime factors,\
    \ and if g divides the\n   order of the group it generates, then signatures can\
    \ be forged.  In\n   particular, choosing g=2 is a bad choice if the group order\
    \ may be\n   even. On the other hand, a generator of 2 is a fine choice for an\n\
    \   encryption-only key, as this will make the encryption faster.\n   While verifying\
    \ Elgamal signatures, note that it is important to test\n   that r and s are less\
    \ than p.  If this test is not done then\n   signatures can be trivially forged\
    \ by using large r values of\n   approximately twice the length of p.  This attack\
    \ is also discussed\n   in the Bleichenbacher paper.\n   Details on safe use of\
    \ Elgamal signatures may be found in [MENEZES],\n   which discusses all the weaknesses\
    \ described above.\n   If an implementation allows Elgamal signatures, then it\
    \ MUST use the\n   algorithm identifier 20 for an Elgamal public key that can\
    \ sign.\n   An implementation SHOULD NOT implement Elgamal keys of size less than\n\
    \   768 bits. For long-term security, Elgamal keys should be 1024 bits or\n  \
    \ longer.\n"
- title: 12.6. DSA
  contents:
  - "12.6. DSA\n   An implementation SHOULD NOT implement DSA keys of size less than\
    \ 768\n   bits. Note that present DSA is limited to a maximum of 1024 bit keys,\n\
    \   which are recommended for long-term use.\n"
- title: 12.7. Reserved Algorithm Numbers
  contents:
  - "12.7. Reserved Algorithm Numbers\n   A number of algorithm IDs have been reserved\
    \ for algorithms that\n   would be useful to use in an OpenPGP implementation,\
    \ yet there are\n   issues that prevent an implementor from actually implementing\
    \ the\n   algorithm. These are marked in the Public Algorithms section as\n  \
    \ \"(reserved for)\".\n   The reserved public key algorithms, Elliptic Curve (18),\
    \ ECDSA (19),\n   and X9.42 (21) do not have the necessary parameters, parameter\
    \ order,\n   or semantics defined.\n   The reserved symmetric key algorithm, DES/SK\
    \ (6), does not have\n   semantics defined.\n   The reserved hash algorithms,\
    \ TIGER192 (6), and HAVAL-5-160 (7), do\n   not have OIDs. The reserved algorithm\
    \ number 4, reserved for a\n   double-width variant of SHA1, is not presently\
    \ defined.\n   We have reserver three algorithm IDs for the US NIST's Advanced\n\
    \   Encryption Standard. This algorithm will work with (at least) 128,\n   192,\
    \ and 256-bit keys. We expect that this algorithm will be selected\n   from the\
    \ candidate algorithms in the year 2000.\n"
- title: 12.8. OpenPGP CFB mode
  contents:
  - "12.8. OpenPGP CFB mode\n   OpenPGP does symmetric encryption using a variant\
    \ of Cipher Feedback\n   Mode (CFB mode). This section describes the procedure\
    \ it uses in\n   detail. This mode is what is used for Symmetrically Encrypted\
    \ Data\n   Packets; the mechanism used for encrypting secret key material is\n\
    \   similar, but described in those sections above.\n   OpenPGP CFB mode uses\
    \ an initialization vector (IV) of all zeros, and\n   prefixes the plaintext with\
    \ ten octets of random data, such that\n   octets 9 and 10 match octets 7 and\
    \ 8.  It does a CFB \"resync\" after\n   encrypting those ten octets.\n   Note\
    \ that for an algorithm that has a larger block size than 64 bits,\n   the equivalent\
    \ function will be done with that entire block.  For\n   example, a 16-octet block\
    \ algorithm would operate on 16 octets, and\n   then produce two octets of check,\
    \ and then work on 16-octet blocks.\n   Step by step, here is the procedure:\n\
    \   1.  The feedback register (FR) is set to the IV, which is all zeros.\n   2.\
    \  FR is encrypted to produce FRE (FR Encrypted).  This is the\n       encryption\
    \ of an all-zero value.\n   3.  FRE is xored with the first 8 octets of random\
    \ data prefixed to\n       the plaintext to produce C1-C8, the first 8 octets\
    \ of ciphertext.\n   4.  FR is loaded with C1-C8.\n   5.  FR is encrypted to produce\
    \ FRE, the encryption of the first 8\n       octets of ciphertext.\n   6.  The\
    \ left two octets of FRE get xored with the next two octets of\n       data that\
    \ were prefixed to the plaintext.  This produces C9-C10,\n       the next two\
    \ octets of ciphertext.\n   7.  (The resync step) FR is loaded with C3-C10.\n\
    \   8.  FR is encrypted to produce FRE.\n   9.  FRE is xored with the first 8\
    \ octets of the given plaintext, now\n       that we have finished encrypting\
    \ the 10 octets of prefixed data.\n       This produces C11-C18, the next 8 octets\
    \ of ciphertext.\n   10.  FR is loaded with C11-C18\n   11.  FR is encrypted to\
    \ produce FRE.\n   12.  FRE is xored with the next 8 octets of plaintext, to produce\
    \ the\n       next 8 octets of ciphertext.  These are loaded into FR and the\n\
    \       process is repeated until the plaintext is used up.\n"
- title: 13. Security Considerations
  contents:
  - "13. Security Considerations\n   As with any technology involving cryptography,\
    \ you should check the\n   current literature to determine if any algorithms used\
    \ here have been\n   found to be vulnerable to attack.\n   This specification\
    \ uses Public Key Cryptography technologies.\n   Possession of the private key\
    \ portion of a public-private key pair is\n   assumed to be controlled by the\
    \ proper party or parties.\n   Certain operations in this specification involve\
    \ the use of random\n   numbers.  An appropriate entropy source should be used\
    \ to generate\n   these numbers.  See RFC 1750.\n   The MD5 hash algorithm has\
    \ been found to have weaknesses (pseudo-\n   collisions in the compress function)\
    \ that make some people deprecate\n   its use.  They consider the SHA-1 algorithm\
    \ better.\n   Many security protocol designers think that it is a bad idea to\
    \ use a\n   single key for both privacy (encryption) and integrity (signatures).\n\
    \   In fact, this was one of the motivating forces behind the V4 key\n   format\
    \ with separate signature and encryption keys. If you as an\n   implementor promote\
    \ dual-use keys, you should at least be aware of\n   this controversy.\n   The\
    \ DSA algorithm will work with any 160-bit hash, but it is\n   sensitive to the\
    \ quality of the hash algorithm, if the hash algorithm\n   is broken, it can leak\
    \ the secret key. The Digital Signature Standard\n   (DSS) specifies that DSA\
    \ be used with SHA-1.  RIPEMD-160 is\n   considered by many cryptographers to\
    \ be as strong. An implementation\n   should take care which hash algorithms are\
    \ used with DSA, as a weak\n   hash can not only allow a signature to be forged,\
    \ but could leak the\n   secret key. These same considerations about the quality\
    \ of the hash\n   algorithm apply to Elgamal signatures.\n   If you are building\
    \ an authentication system, the recipient may\n   specify a preferred signing\
    \ algorithm. However, the signer would be\n   foolish to use a weak algorithm\
    \ simply because the recipient requests\n   it.\n   Some of the encryption algorithms\
    \ mentioned in this document have\n   been analyzed less than others.  For example,\
    \ although CAST5 is\n   presently considered strong, it has been analyzed less\
    \ than Triple-\n   DES. Other algorithms may have other controversies surrounding\
    \ them.\n   Some technologies mentioned here may be subject to government control\n\
    \   in some countries.\n"
- title: 14. Implementation Nits
  contents:
  - "14. Implementation Nits\n   This section is a collection of comments to help\
    \ an implementer,\n   particularly with an eye to backward compatibility. Previous\n\
    \   implementations of PGP are not OpenPGP-compliant. Often the\n   differences\
    \ are small, but small differences are frequently more\n   vexing than large differences.\
    \ Thus, this list of potential problems\n   and gotchas for a developer who is\
    \ trying to be backward-compatible.\n     * PGP 5.x does not accept V4 signatures\
    \ for anything other than\n       key material.\n     * PGP 5.x does not recognize\
    \ the \"five-octet\" lengths in new-format\n       headers or in signature subpacket\
    \ lengths.\n     * PGP 5.0 rejects an encrypted session key if the keylength differs\n\
    \       from the S2K symmetric algorithm. This is a bug in its validation\n  \
    \     function.\n     * PGP 5.0 does not handle multiple one-pass signature headers\
    \ and\n       trailers. Signing one will compress the one-pass signed literal\n\
    \       and prefix a V3 signature instead of doing a nested one-pass\n       signature.\n\
    \     * When exporting a private key, PGP 2.x generates the header \"BEGIN\n \
    \      PGP SECRET KEY BLOCK\" instead of \"BEGIN PGP PRIVATE KEY BLOCK\".\n  \
    \     All previous versions ignore the implied data type, and look\n       directly\
    \ at the packet data type.\n     * In a clear-signed signature, PGP 5.0 will figure\
    \ out the correct\n       hash algorithm if there is no \"Hash:\" header, but\
    \ it will reject\n       a mismatch between the header and the actual algorithm\
    \ used. The\n       \"standard\" (i.e. Zimmermann/Finney/et al.) version of PGP\
    \ 2.x\n       rejects the \"Hash:\" header and assumes MD5. There are a number\
    \ of\n       enhanced variants of PGP 2.6.x that have been modified for SHA-1\n\
    \       signatures.\n     * PGP 5.0 can read an RSA key in V4 format, but can\
    \ only recognize\n       it with a V3 keyid, and can properly use only a V3 format\
    \ RSA\n       key.\n     * Neither PGP 5.x nor PGP 6.0 recognize Elgamal Encrypt\
    \ and Sign\n       keys. They only handle Elgamal Encrypt-only keys.\n     * There\
    \ are many ways possible for two keys to have the same key\n       material, but\
    \ different fingerprints (and thus key ids). Perhaps\n       the most interesting\
    \ is an RSA key that has been \"upgraded\" to V4\n       format, but since a V4\
    \ fingerprint is constructed by hashing the\n       key creation time along with\
    \ other things, two V4 keys created at\n       different times, yet with the same\
    \ key material will have\n       different fingerprints.\n     * If an implementation\
    \ is using zlib to interoperate with PGP 2.x,\n       then the \"windowBits\"\
    \ parameter should be set to -13.\n"
- title: 15. Authors and Working Group Chair
  contents:
  - "15. Authors and Working Group Chair\n   The working group can be contacted via\
    \ the current chair:\n   John W. Noerenberg, II\n   Qualcomm, Inc\n   6455 Lusk\
    \ Blvd\n   San Diego, CA 92131 USA\n   Phone: +1 619-658-3510\n   EMail: jwn2@qualcomm.com\n\
    \   The principal authors of this memo are:\n   Jon Callas\n   Network Associates,\
    \ Inc.\n   3965 Freedom Circle\n   Santa Clara, CA 95054, USA\n   Phone: +1 408-346-5860\n\
    \   EMail: jon@pgp.com, jcallas@nai.com\n   Lutz Donnerhacke\n   IKS GmbH\n  \
    \ Wildenbruchstr. 15\n   07745 Jena, Germany\n   Phone: +49-3641-675642\n   EMail:\
    \ lutz@iks-jena.de\n   Hal Finney\n   Network Associates, Inc.\n   3965 Freedom\
    \ Circle\n   Santa Clara, CA 95054, USA\n   EMail: hal@pgp.com\n   Rodney Thayer\n\
    \   EIS Corporation\n   Clearwater, FL 33767, USA\n   EMail: rodney@unitran.com\n\
    \   This memo also draws on much previous work from a number of other\n   authors\
    \ who include: Derek Atkins, Charles Breed, Dave Del Torto,\n   Marc Dyksterhouse,\
    \ Gail Haspert, Gene Hoffman, Paul Hoffman, Raph\n   Levien, Colin Plumb, Will\
    \ Price, William Stallings, Mark Weaver, and\n   Philip R. Zimmermann.\n"
- title: 16. References
  contents:
  - "16. References\n   [BLEICHENBACHER] Bleichenbacher, Daniel, \"Generating ElGamal\n\
    \                    signatures without knowing the secret key,\"\n          \
    \          Eurocrypt 96.  Note that the version in the\n                    proceedings\
    \ has an error.  A revised version is\n                    available at the time\
    \ of writing from\n                    <ftp://ftp.inf.ethz.ch/pub/publications/papers/ti/isc\n\
    \                    /ElGamal.ps>\n   [BLOWFISH]       Schneier, B. \"Description\
    \ of a New Variable-Length\n                    Key, 64-Bit Block Cipher (Blowfish)\"\
    \ Fast Software\n                    Encryption, Cambridge Security Workshop Proceedings\n\
    \                    (December 1993), Springer-Verlag, 1994, pp191-204\n     \
    \               <http://www.counterpane.com/bfsverlag.html>\n   [DONNERHACKE]\
    \    Donnerhacke, L., et. al, \"PGP263in - an improved\n                    international\
    \ version of PGP\", ftp://ftp.iks-\n                    jena.de/mitarb/lutz/crypt/software/pgp/\n\
    \   [ELGAMAL]        T. ElGamal, \"A Public-Key Cryptosystem and a\n         \
    \           Signature Scheme Based on Discrete Logarithms,\" IEEE\n          \
    \          Transactions on Information Theory, v. IT-31, n. 4,\n             \
    \       1985, pp. 469-472.\n   [IDEA]           Lai, X, \"On the design and security\
    \ of block\n                    ciphers\", ETH Series in Information Processing,\
    \ J.L.\n                    Massey (editor), Vol. 1, Hartung-Gorre Verlag\n  \
    \                  Knostanz, Technische Hochschule (Zurich), 1992\n   [ISO-10646]\
    \      ISO/IEC 10646-1:1993. International Standard --\n                    Information\
    \ technology -- Universal Multiple-Octet\n                    Coded Character\
    \ Set (UCS) -- Part 1: Architecture\n                    and Basic Multilingual\
    \ Plane.  UTF-8 is described in\n                    Annex R, adopted but not\
    \ yet published.  UTF-16 is\n                    described in Annex Q, adopted\
    \ but not yet published.\n   [MENEZES]        Alfred Menezes, Paul van Oorschot,\
    \ and Scott\n                    Vanstone, \"Handbook of Applied Cryptography,\"\
    \ CRC\n                    Press, 1996.\n   [RFC822]         Crocker, D., \"Standard\
    \ for the format of ARPA\n                    Internet text messages\", STD 11,\
    \ RFC 822, August\n                    1982.\n   [RFC1423]        Balenson, D.,\
    \ \"Privacy Enhancement for Internet\n                    Electronic Mail: Part\
    \ III: Algorithms, Modes, and\n                    Identifiers\", RFC 1423, October\
    \ 1993.\n   [RFC1641]        Goldsmith, D. and M. Davis, \"Using Unicode with\n\
    \                    MIME\", RFC 1641, July 1994.\n   [RFC1750]        Eastlake,\
    \ D., Crocker, S. and J. Schiller,\n                    \"Randomness Recommendations\
    \ for Security\", RFC 1750,\n                    December 1994.\n   [RFC1951]\
    \        Deutsch, P., \"DEFLATE Compressed Data Format\n                    Specification\
    \ version 1.3.\", RFC 1951, May 1996.\n   [RFC1983]        Malkin, G., \"Internet\
    \ Users' Glossary\", FYI 18, RFC\n                    1983, August 1996.\n   [RFC1991]\
    \        Atkins, D., Stallings, W. and P. Zimmermann, \"PGP\n                \
    \    Message Exchange Formats\", RFC 1991, August 1996.\n   [RFC2015]        Elkins,\
    \ M., \"MIME Security with Pretty Good Privacy\n                    (PGP)\", RFC\
    \ 2015, October 1996.\n   [RFC2231]        Borenstein, N. and N. Freed, \"Multipurpose\
    \ Internet\n                    Mail Extensions (MIME) Part One: Format of Internet\n\
    \                    Message Bodies.\", RFC 2231, November 1996.\n   [RFC2119]\
    \        Bradner, S., \"Key words for use in RFCs to Indicate\n              \
    \      Requirement Level\", BCP 14, RFC 2119, March 1997.\n   [RFC2144]      \
    \  Adams, C., \"The CAST-128 Encryption Algorithm\", RFC\n                   \
    \ 2144, May 1997.\n   [RFC2279]        Yergeau., F., \"UTF-8, a transformation\
    \ format of\n                    Unicode and ISO 10646\", RFC 2279, January 1998.\n\
    \   [RFC2313]        Kaliski, B., \"PKCS #1: RSA Encryption Standard\n       \
    \             version 1.5\", RFC 2313, March 1998.\n   [SAFER]          Massey,\
    \ J.L. \"SAFER K-64: One Year Later\", B.\n                    Preneel, editor,\
    \ Fast Software Encryption, Second\n                    International Workshop\
    \ (LNCS 1008) pp212-241,\n                    Springer-Verlag 1995\n"
- title: 17.  Full Copyright Statement
  contents:
  - "17.  Full Copyright Statement\n   Copyright (C) The Internet Society (1998).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
