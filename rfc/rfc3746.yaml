- title: __initial_text__
  contents:
  - '     Forwarding and Control Element Separation (ForCES) Framework

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines the architectural framework for the ForCES\n\
    \   (Forwarding and Control Element Separation) network elements, and\n   identifies\
    \ the associated entities and their interactions.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Definitions. . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n       1.1. Conventions used in this document . . . . . . .\
    \ . . . . .  2\n       1.2. Terminologies . . . . . . . . . . . . . . . . . .\
    \ . . . .  3\n   2.  Introduction to Forwarding and Control Element Separation\n\
    \       (ForCES) . . . . . . . . . . . . . . . . . . . . . . . . . . .  5\n  \
    \ 3.  Architecture . . . . . . . . . . . . . . . . . . . . . . . . .  8\n    \
    \   3.1. Control Elements and Fr Reference Point . . . . . . . . . 10\n      \
    \ 3.2. Forwarding Elements and Fi reference point. . . . . . . . 11\n       3.3.\
    \ CE Managers . . . . . . . . . . . . . . . . . . . . . . . 14\n       3.4. FE\
    \ Managers . . . . . . . . . . . . . . . . . . . . . . . 14\n   4.  Operational\
    \ Phases . . . . . . . . . . . . . . . . . . . . . . 15\n       4.1. Pre-association\
    \ Phase . . . . . . . . . . . . . . . . . . 15\n            4.1.1. Fl Reference\
    \ Point . . . . . . . . . . . . . . . . 15\n            4.1.2. Ff Reference Point\
    \ . . . . . . . . . . . . . . . . 16\n            4.1.3. Fc Reference Point .\
    \ . . . . . . . . . . . . . . . 17\n       4.2. Post-association Phase and Fp\
    \ reference point . . . . . . 17\n            4.2.1. Proximity and Interconnect\
    \ between CEs and FEs . . 18\n            4.2.2. Association Establishment. .\
    \ . . . . . . . . . . . 18\n            4.2.3. Steady-state Communication . .\
    \ . . . . . . . . . . 19\n            4.2.4. Data Packets across Fp reference\
    \ point . . . . . . 21\n            4.2.5. Proxy FE . . . . . . . . . . . . .\
    \ . . . . . . . . 22\n       4.3. Association Re-establishment. . . . . . . .\
    \ . . . . . . . 22\n            4.3.1. CE graceful restart. . . . . . . . . .\
    \ . . . . . . 23\n            4.3.2. FE restart . . . . . . . . . . . . . . .\
    \ . . . . . 24\n   5.  Applicability to RFC 1812. . . . . . . . . . . . . . .\
    \ . . . . 25\n       5.1. General Router Requirements . . . . . . . . . . . .\
    \ . . . 25\n       5.2. Link Layer. . . . . . . . . . . . . . . . . . . . . .\
    \ . . 26\n       5.3. Internet Layer Protocols. . . . . . . . . . . . . . . .\
    \ . 27\n       5.4. Internet Layer Forwarding . . . . . . . . . . . . . . . .\
    \ 27\n       5.5. Transport Layer . . . . . . . . . . . . . . . . . . . . . 28\n\
    \       5.6. Application Layer -- Routing Protocols. . . . . . . . . . 29\n  \
    \     5.7. Application Layer -- Network Management Protocol. . . . . 29\n   6.\
    \  Summary. . . . . . . . . . . . . . . . . . . . . . . . . . . . 29\n   7.  Acknowledgements\
    \ . . . . . . . . . . . . . . . . . . . . . . . 30\n   8.  Security Considerations.\
    \ . . . . . . . . . . . . . . . . . . . 30\n       8.1. Analysis of Potential\
    \ Threats Introduced by ForCES. . . . 31\n            8.1.1. \"Join\" or \"Remove\"\
    \ Message Flooding on CEs . . . . 31\n            8.1.2. Impersonation Attack\
    \ . . . . . . . . . . . . . . . 31\n            8.1.3. Replay Attack. . . . .\
    \ . . . . . . . . . . . . . . 31\n            8.1.4. Attack during Fail Over.\
    \ . . . . . . . . . . . . . 32\n            8.1.5. Data Integrity . . . . . .\
    \ . . . . . . . . . . . . 32\n            8.1.6. Data Confidentiality . . . .\
    \ . . . . . . . . . . . 32\n            8.1.7. Sharing security parameters. .\
    \ . . . . . . . . . . 33\n            8.1.8. Denial of Service Attack via External\
    \ Interface. . 33\n       8.2. Security Recommendations for ForCES . . . . . .\
    \ . . . . . 33\n            8.2.1. Using TLS with ForCES. . . . . . . . . . .\
    \ . . . . 34\n            8.2.2. Using IPsec with ForCES. . . . . . . . . . .\
    \ . . . 35\n   9.  References . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . 37\n       9.1. Normative References. . . . . . . . . . . . . . . . . .\
    \ . 37\n       9.2. Informative References. . . . . . . . . . . . . . . . . .\
    \ 37\n   10. Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . 39\n\
    \   11. Full Copyright Statement . . . . . . . . . . . . . . . . . . . 40\n"
- title: 1.  Definitions
  contents:
  - '1.  Definitions

    '
- title: 1.1.  Conventions used in this document
  contents:
  - "1.1.  Conventions used in this document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in BCP 14, RFC 2119 [1].\n"
- title: 1.2.  Terminologies
  contents:
  - "1.2.  Terminologies\n   A set of terminology associated with the ForCES requirements\
    \ is\n   defined in [4] and we only include the definitions that are most\n  \
    \ relevant to this document here.\n   Addressable Entity (AE) - An entity that\
    \ is directly addressable\n   given some interconnect technology.  For example,\
    \ on IP networks, it\n   is a device to which we can communicate using an IP address;\
    \ on a\n   switch fabric, it is a device to which we can communicate using a\n\
    \   switch fabric port number.\n   Physical Forwarding Element (PFE) - An AE that\
    \ includes hardware used\n   to provide per-packet processing and handling.  This\
    \ hardware may\n   consist of (but is not limited to) network processors, ASICs\n\
    \   (Application-Specific Integrated Circuits), or general purpose\n   processors,\
    \ installed on line cards, daughter boards, mezzanine\n   cards, or in stand-alone\
    \ boxes.\n   PFE Partition - A logical partition of a PFE consisting of some\n\
    \   subset of each of the resources (e.g., ports, memory, forwarding\n   table\
    \ entries) available on the PFE.  This concept is analogous to\n   that of the\
    \ resources assigned to a virtual switching element as\n   described in [9].\n\
    \   Physical Control Element (PCE) - An AE that includes hardware used to\n  \
    \ provide control functionality.  This hardware typically includes a\n   general\
    \ purpose processor.\n   PCE Partition - A logical partition of a PCE consisting\
    \ of some\n   subset of each of the resources available on the PCE.\n   Forwarding\
    \ Element (FE) - A logical entity that implements the ForCES\n   Protocol.  FEs\
    \ use the underlying hardware to provide per-packet\n   processing and handling\
    \ as directed by a CE via the ForCES Protocol.\n   FEs may happen to be a single\
    \ blade (or PFE), a partition of a PFE,\n   or multiple PFEs.\n   Control Element\
    \ (CE) - A logical entity that implements the ForCES\n   Protocol and uses it\
    \ to instruct one or more FEs on how to process\n   packets.  CEs handle functionality\
    \ such as the execution of control\n   and signaling protocols.  CEs may consist\
    \ of PCE partitions or whole\n   PCEs.\n   ForCES Network Element (NE) - An entity\
    \ composed of one or more CEs\n   and one or more FEs.  An NE usually hides its\
    \ internal organization\n   from external entities and represents a single point\
    \ of management to\n   entities outside the NE.\n   Pre-association Phase - The\
    \ period of time during which an FE Manager\n   (see below) and a CE Manager (see\
    \ below) are determining whether an\n   FE and a CE should be part of the same\
    \ network element.  It is\n   possible for some elements of the NE to be in pre-association\
    \ phase\n   while other elements are in the post-association phase.\n   Post-association\
    \ Phase - The period of time during which an FE knows\n   which CE is to control\
    \ it and vice versa, including the time during\n   which the CE and FE are establishing\
    \ communication with one another.\n   ForCES Protocol - While there may be multiple\
    \ protocols used within\n   the overall ForCES architecture, the term \"ForCES\
    \ Protocol\" refers\n   only to the ForCES post-association phase protocol (see\
    \ below).\n   ForCES Post-Association Phase Protocol - The protocol used for post-\n\
    \   association phase communication between CEs and FEs.  This protocol\n   does\
    \ not apply to CE-to-CE communication, FE-to-FE communication, or\n   to communication\
    \ between FE and CE managers.  The ForCES Protocol is\n   a master-slave protocol\
    \ in which FEs are slaves and CEs are masters.\n   This protocol includes both\
    \ the management of the communication\n   channel (e.g., connection establishment,\
    \ heartbeats) and the control\n   messages themselves.  This protocol could be\
    \ a single protocol or\n   could consist of multiple protocols working together,\
    \ and may be\n   unicast or multicast based.  A separate protocol document will\n\
    \   specify this information.\n   FE Manager - A logical entity that operates\
    \ in the pre-association\n   phase and is responsible for determining to which\
    \ CE(s) an FE should\n   communicate.  This process is called CE discovery and\
    \ may involve the\n   FE manager learning the capabilities of available CEs. \
    \ An FE manager\n   may use anything from a static configuration to a pre-association\n\
    \   phase protocol (see below) to determine which CE(s) to use; however,\n   this\
    \ is currently out of scope.  Being a logical entity, an FE\n   manager might\
    \ be physically combined with any of the other logical\n   entities mentioned\
    \ in this section.\n   CE Manager - A logical entity that operates in the pre-association\n\
    \   phase and is responsible for determining to which FE(s) a CE should\n   communicate.\
    \  This process is called FE discovery and may involve the\n   CE manager learning\
    \ the capabilities of available FEs.  A CE manager\n   may use anything from a\
    \ static configuration to a pre-association\n   phase protocol (see below) to\
    \ determine which FE to use; however,\n   this is currently out of scope.  Being\
    \ a logical entity, a CE manager\n   might be physically combined with any of\
    \ the other logical entities\n   mentioned in this section.\n   Pre-association\
    \ Phase Protocol - A protocol between FE managers and\n   CE managers that is\
    \ used to determine which CEs or FEs to use.  A\n   pre-association phase protocol\
    \ may include a CE and/or FE capability\n   discovery mechanism.  Note that this\
    \ capability discovery process is\n   wholly separate from (and does not replace)\
    \ that used within the\n   ForCES Protocol.  However, the two capability discovery\
    \ mechanisms\n   may utilize the same FE model.\n   FE Model - A model that describes\
    \ the logical processing functions of\n   an FE.\n   ForCES Protocol Element -\
    \ An FE or CE.\n   Intra-FE topology - Representation of how a single FE is realized\
    \ by\n   combining possibly multiple logical functional blocks along multiple\n\
    \   data paths.  This is defined by the FE model.\n   FE Topology - Representation\
    \ of how the multiple FEs in a single NE\n   are interconnected.  Sometimes it\
    \ is called inter-FE topology, to be\n   distinguished from intra-FE topology\
    \ used by the FE model.\n   Inter-FE topology - See FE Topology.\n"
- title: 2.  Introduction to Forwarding and Control Element Separation (ForCES)
  contents:
  - "2.  Introduction to Forwarding and Control Element Separation (ForCES)\n   An\
    \ IP network element (NE) appears to external entities as a\n   monolithic piece\
    \ of network equipment, e.g., a router, NAT, firewall,\n   or load balancer. \
    \ Internally, however, an IP network element (NE)\n   (such as a router) is composed\
    \ of numerous logically separated\n   entities that cooperate to provide a given\
    \ functionality (such as\n   routing).  Two types of network element components\
    \ exist: control\n   element (CE) in control plane and forwarding element (FE)\
    \ in\n   forwarding plane (or data plane).  Forwarding elements are typically\n\
    \   ASIC, network-processor, or general-purpose processor-based devices\n   that\
    \ handle data path operations for each packet.  Control elements\n   are typically\
    \ based on general-purpose processors that provide\n   control functionality,\
    \ like routing and signaling protocols.\n   ForCES aims to define a framework\
    \ and associated protocol(s) to\n   standardize information exchange between the\
    \ control and forwarding\n   plane.  Having standard mechanisms allows CEs and\
    \ FEs to become\n   physically separated standard components.  This physical separation\n\
    \   accrues several benefits to the ForCES architecture.  Separate\n   components\
    \ would allow component vendors to specialize in one\n   component without having\
    \ to become experts in all components.\n   Standard protocol also allows the CEs\
    \ and FEs from different\n   component vendors to interoperate with each other\
    \ and hence it\n   becomes possible for system vendors to integrate together the\
    \ CEs and\n   FEs from different component suppliers.  This interoperability\n\
    \   translates into increased design choices and flexibility for the\n   system\
    \ vendors.  Overall, ForCES will enable rapid innovation in both\n   the control\
    \ and forwarding planes while maintaining interoperability.\n   Scalability is\
    \ also easily provided by this architecture in that\n   additional forwarding\
    \ or control capacity can be added to existing\n   network elements without the\
    \ need for forklift upgrades.\n      -------------------------       -------------------------\n\
    \      |  Control Blade A      |       |  Control Blade B      |\n      |    \
    \   (CE)            |       |          (CE)         |\n      -------------------------\
    \       -------------------------\n              ^   |                       \
    \    ^    |\n              |   |                           |    |\n          \
    \    |   V                           |    V\n      ---------------------------------------------------------\n\
    \      |               Switch Fabric Backplane                 |\n      ---------------------------------------------------------\n\
    \             ^  |            ^  |                   ^  |\n             |  | \
    \           |  |     . . .         |  |\n             |  V            |  V   \
    \                |  V\n         ------------    ------------           ------------\n\
    \         |Router    |    |Router    |           |Router    |\n         |Blade\
    \ #1  |    |Blade #2  |           |Blade #N  |\n         |   (FE)   |    |   (FE)\
    \   |           |   (FE)   |\n         ------------    ------------          \
    \ ------------\n             ^  |            ^  |                   ^  |\n   \
    \          |  |            |  |     . . .         |  |\n             |  V    \
    \        |  V                   |  V\n      Figure 1. A router configuration example\
    \ with separate blades.\n   One example of such physical separation is at the\
    \ blade level. Figure\n   1 shows such an example configuration of a router, with\
    \ two control\n   blades and multiple forwarding blades, all interconnected into\
    \ a\n   switch fabric backplane.  In such a chassis configuration, the\n   control\
    \ blades are the CEs while the router blades are the FEs, and\n   the switch fabric\
    \ backplane provides the physical interconnect for\n   all the blades.  Control\
    \ blade A may be the primary CE while control\n   blade B may be the backup CE\
    \ providing redundancy.  It is also\n   possible to have a redundant switch fabric\
    \ for high availability\n   support.  Routers today with this kind of configuration\
    \ use\n   proprietary interfaces for messaging between CEs and FEs.  The goal\n\
    \   of ForCES is to replace such proprietary interfaces with a standard\n   protocol.\
    \  With a standard protocol like ForCES implemented on all\n   blades, it becomes\
    \ possible for control blades from vendor X and\n   forwarding blades from vendor\
    \ Y to work seamlessly together in one\n   chassis.\n          -------       \
    \  -------\n          | CE1 |         | CE2 |\n          -------         -------\n\
    \             ^               ^\n             |               |\n            \
    \ V               V\n      ============================================ Ethernet\n\
    \          ^       ^       . . .   ^\n          |       |               |\n  \
    \        V       V               V\n       -------  -------         --------\n\
    \       | FE#1|  | FE#2|         | FE#n |\n       -------  -------         --------\n\
    \         ^  |     ^  |            ^  |\n         |  |     |  |            | \
    \ |\n         |  V     |  V            |  V\n      Figure 2. A router configuration\
    \ example with separate boxes.\n   Another level of physical separation between\
    \ the CEs and FEs can be\n   at the box level.  In such a configuration, all the\
    \ CEs and FEs are\n   physically separated boxes, interconnected with some kind\
    \ of high\n   speed LAN connection (like Gigabit Ethernet).  These separated CEs\n\
    \   and FEs are only one hop away from each other within a local area\n   network.\
    \  The CEs and FEs communicate to each other by running\n   ForCES, and the collection\
    \ of these CEs and FEs together become one\n   routing unit to the external world.\
    \  Figure 2 shows such an example.\n   In both examples shown here, the same physical\
    \ interconnect is used\n   for both CE-to-FE and FE-to-FE communication.  However,\
    \ that does not\n   have to be the case.  One reason to use different interconnects\
    \ is\n   that the CE-to-FE interconnect does not have to be as fast as the\n \
    \  FE-to-FE interconnect, so the more faster and more expensive\n   connections\
    \ can be saved for FE-to-FE.  The separate interconnects\n   may also provide\
    \ reliability and redundancy benefits for the NE.\n   Some examples of control\
    \ functions that can be implemented in the CE\n   include routing protocols like\
    \ RIP, OSPF, and BGP, control and\n   signaling protocols like RSVP (Resource\
    \ Reservation Protocol), LDP\n   (Label Distribution Protocol) for MPLS, etc.\
    \  Examples of forwarding\n   functions in the FE include LPM (longest prefix\
    \ match) forwarder,\n   classifiers, traffic shaper, meter, NAT (Network Address\n\
    \   Translators), etc.  Figure 3 provides example functions in both CE\n   and\
    \ FE.  Any given NE may contain one or many of these CE and FE\n   functions in\
    \ it.  The diagram also shows that the ForCES Protocol is\n   used to transport\
    \ both the control messages for ForCES itself and the\n   data packets that are\
    \ originated/destined from/to the control\n   functions in the CE (e.g., routing\
    \ packets).  Section 4.2.4 provides\n   more detail on this.\n      -------------------------------------------------\n\
    \      |       |       |       |       |       |       |\n      |OSPF   |RIP \
    \   |BGP    |RSVP   |LDP    |. . .  |\n      |       |       |       |       |\
    \       |       |\n      -------------------------------------------------\n \
    \     |               ForCES Interface                |\n      -------------------------------------------------\n\
    \                              ^   ^\n                      ForCES  |   |data\n\
    \                      control |   |packets\n                      messages| \
    \  |(e.g., routing packets)\n                              v   v\n      -------------------------------------------------\n\
    \      |               ForCES Interface                |\n      -------------------------------------------------\n\
    \      |       |       |       |       |       |       |\n      |LPM Fwd|Meter\
    \  |Shaper |NAT    |Classi-|. . .  |\n      |       |       |       |       |fier\
    \   |       |\n      -------------------------------------------------\n     \
    \ |               FE resources                    |\n      -------------------------------------------------\n\
    \           Figure 3. Examples of CE and FE functions.\n   A set of requirements\
    \ for control and forwarding separation is\n   identified in [4].  This document\
    \ describes a ForCES architecture\n   that satisfies the architectural requirements\
    \ of [4] and defines a\n   framework for ForCES network elements and the associated\
    \ entities to\n   facilitate protocol definition.  Whenever necessary, this document\n\
    \   uses many examples to illustrate the issues and/or possible solutions\n  \
    \ in ForCES.  These examples are intended to be just examples, and\n   should\
    \ not be taken as the only or definite ways of doing certain\n   things.  It is\
    \ expected that a separate document will be produced by\n   the ForCES working\
    \ group to specify the ForCES Protocol.\n"
- title: 3.  Architecture
  contents:
  - "3.  Architecture\n   This section defines the ForCES architectural framework\
    \ and the\n   associated logical components.  This ForCES framework defines\n\
    \   components of ForCES NEs, including several ancillary components.\n   These\
    \ components may be connected in different kinds of topologies\n   for flexible\
    \ packet processing.\n                          ---------------------------------------\n\
    \                          | ForCES Network Element              |\n   --------------\
    \   Fc    | --------------      --------------  |\n   | CE Manager |---------+-|\
    \     CE 1   |------|    CE 2    |  |\n   --------------         | |         \
    \   |  Fr  |            |  |\n         |                | --------------     \
    \ --------------  |\n         | Fl             |         |  |    Fp       /  \
    \        |\n         |                |       Fp|  |----------| /           |\n\
    \         |                |         |             |/            |\n         |\
    \                |         |             |             |\n         |         \
    \       |         |     Fp     /|----|        |\n         |                | \
    \        |  /--------/      |        |\n   --------------     Ff  | --------------\
    \      --------------  |\n   | FE Manager |---------+-|     FE 1   |  Fi  |  \
    \   FE 2   |  |\n   --------------         | |            |------|           \
    \ |  |\n                          | --------------      --------------  |\n  \
    \                        |   |  |  |  |          |  |  |  |    |\n           \
    \               ----+--+--+--+----------+--+--+--+-----\n                    \
    \          |  |  |  |          |  |  |  |\n                              |  |\
    \  |  |          |  |  |  |\n                                Fi/f            \
    \       Fi/f\n       Fp: CE-FE interface\n       Fi: FE-FE interface\n       Fr:\
    \ CE-CE interface\n       Fc: Interface between the CE Manager and a CE\n    \
    \   Ff: Interface between the FE Manager and an FE\n       Fl: Interface between\
    \ the CE Manager and the FE Manager\n       Fi/f: FE external interface\n    \
    \        Figure 4. ForCES Architectural Diagram\n   The diagram in Figure 4 shows\
    \ the logical components of the ForCES\n   architecture and their relationships.\
    \  There are two kinds of\n   components inside a ForCES network element: control\
    \ element (CE) and\n   forwarding element (FE).  The framework allows multiple\
    \ instances of\n   CE and FE inside one NE.  Each FE contains one or more physical\
    \ media\n   interfaces for receiving and transmitting packets from/to the\n  \
    \ external world.  The aggregation of these FE interfaces becomes the\n   NE's\
    \ external interfaces.  In addition to the external interfaces,\n   there must\
    \ also exist some kind of interconnect within the NE so that\n   the CE and FE\
    \ can communicate with each other, and one FE can forward\n   packets to another\
    \ FE.  The diagram also shows two entities outside\n   of the ForCES NE: CE Manager\
    \ and FE Manager.  These two ancillary\n   entities provide configuration to the\
    \ corresponding CE or FE in the\n   pre-association phase (see Section 4.1).\n\
    \   For convenience, the logical interactions between these components\n   are\
    \ labeled by reference points Fp, Fc, Ff, Fr, Fl, and Fi, as shown\n   in Figure\
    \ 4.  The FE external interfaces are labeled as Fi/f.  More\n   detail is provided\
    \ in Section 3 and 4 for each of these reference\n   points.  All these reference\
    \ points are important in understanding\n   the ForCES architecture, however,\
    \ the ForCES Protocol is only defined\n   over one reference point -- Fp.\n  \
    \ The interface between two ForCES NEs is identical to the interface\n   between\
    \ two conventional routers and these two NEs exchange the\n   protocol packets\
    \ through the external interfaces at Fi/f.  ForCES NEs\n   connect to existing\
    \ routers transparently.\n"
- title: 3.1.  Control Elements and Fr Reference Point
  contents:
  - "3.1.  Control Elements and Fr Reference Point\n   It is not necessary to define\
    \ any protocols across the Fr reference\n   point to enable control and forwarding\
    \ separation for simple\n   configurations like single CE and multiple FEs.  However,\
    \ this\n   architecture permits multiple CEs to be present in a network element.\n\
    \   In cases where an implementation uses multiple CEs, the invariant\n   that\
    \ the CEs and FEs together appear as a single NE must be\n   maintained.\n   Multiple\
    \ CEs may be used for redundancy, load sharing, distributed\n   control, or other\
    \ purposes.  Redundancy is the case where one or more\n   CEs are prepared to\
    \ take over should an active CE fail.  Load sharing\n   is the case where two\
    \ or more CEs are concurrently active and any\n   request that can be serviced\
    \ by one of the CEs can also be serviced\n   by any of the other CEs.  For both\
    \ redundancy and load sharing, the\n   CEs involved are equivalently capable.\
    \  The only difference between\n   these two cases is in terms of how many active\
    \ CEs there are\n   simultaneously.  Distributed control is the case where two\
    \ or more\n   CEs are concurrently active but certain requests can only be serviced\n\
    \   by certain CEs.\n   When multiple CEs are employed in a ForCES NE, their internal\n\
    \   organization is considered an implementation issue that is beyond the\n  \
    \ scope of ForCES.  CEs are wholly responsible for coordinating amongst\n   themselves\
    \ via the Fr reference point to provide consistency and\n   synchronization. \
    \ However, ForCES does not define the implementation\n   or protocols used between\
    \ CEs, nor does it define how to distribute\n   functionality among CEs.  Nevertheless,\
    \ ForCES will support\n   mechanisms for CE redundancy or fail over, and it is\
    \ expected that\n   vendors will provide redundancy or fail over solutions within\
    \ this\n   framework.\n"
- title: 3.2.  Forwarding Elements and Fi reference point
  contents:
  - "3.2.  Forwarding Elements and Fi reference point\n   An FE is a logical entity\
    \ that implements the ForCES Protocol and\n   uses the underlying hardware to\
    \ provide per-packet processing and\n   handling as directed by a CE.  It is possible\
    \ to partition one\n   physical FE into multiple logical FEs.  It is also possible\
    \ for one\n   FE to use multiple physical FEs.  The mapping between physical FE(s)\n\
    \   and logical FE(s) is beyond the scope of ForCES.  For example, a\n   logical\
    \ partition of a physical FE can be created by assigning some\n   portion of each\
    \ of the resources (e.g., ports, memory, forwarding\n   table entries) available\
    \ on the ForCES physical FE to each of the\n   logical FEs.  Such a concept of\
    \ FE virtualization is analogous to a\n   virtual switching element as described\
    \ in [9].  If FE virtualization\n   occurs only in the pre-association phase,\
    \ it has no impact on ForCES.\n   However, if FE virtualization results in a resource\
    \ change taken from\n   an existing FE (already participating in ForCES post-association\n\
    \   phase), the ForCES Protocol needs to be able to inform the CE of such\n  \
    \ a change via asynchronous messages (see [4], Section 5, requirement\n   #6).\n\
    \   FEs perform all packet processing functions as directed by CEs.  FEs\n   have\
    \ no initiative of their own.  Instead, FEs are slaves and only do\n   as they\
    \ are told.  FEs may communicate with one or more CEs\n   concurrently across\
    \ reference point Fp.  FEs have no notion of CE\n   redundancy, load sharing,\
    \ or distributed control.  Instead, FEs\n   accept commands from any CE authorized\
    \ to control them, and it is up\n   to the CEs to coordinate among themselves\
    \ to achieve redundancy, load\n   sharing, or distributed control.  The idea is\
    \ to keep FEs as simple\n   and dumb as possible so that FEs can focus their resources\
    \ on the\n   packet processing functions.  Unless otherwise configured or\n  \
    \ determined by a ForCEs Protocol exchange, each FE will process\n   authorized\
    \ incoming commands directed at it as it receives them on a\n   first come first\
    \ serve basis.\n   For example, in Figure 5, FE1 and FE2 can be configured to\
    \ accept\n   commands from both the primary CE (CE1) and the backup CE (CE2).\n\
    \   Upon detection of CE1 failure, perhaps across the Fr or Fp reference\n   point,\
    \ CE2 is configured to take over activities of CE1.  This is\n   beyond the scope\
    \ of ForCES and is not discussed further.\n   Distributed control can be achieved\
    \ in a similar fashion, without\n   much intelligence on the part of FEs.  For\
    \ example, FEs can be\n   configured to detect RSVP and BGP protocol packets,\
    \ and forward RSVP\n   packets to one CE and BGP packets to another CE.  Hence,\
    \ FEs may need\n   to do packet filtering for forwarding packets to specific CEs.\n\
    \      -------   Fr  -------\n      | CE1 | ------| CE2 |\n      -------     \
    \  -------\n        |   \\      /   |\n        |    \\    /    |\n        |  \
    \   \\  /     |\n        |      \\/Fp    |\n        |      /\\      |\n      \
    \  |     /  \\     |\n        |    /    \\    |\n      -------  Fi   -------\n\
    \      | FE1 |<----->| FE2 |\n      -------       -------\n      Figure 5. CE\
    \ redundancy example.\n   This architecture permits multiple FEs to be present\
    \ in an NE.  [4]\n   dictates that the ForCES Protocol must be able to scale to\
    \ at least\n   hundreds of FEs (see [4] Section 5, requirement #11).  Each of\
    \ these\n   FEs may potentially have a different set of packet processing\n  \
    \ functions, with different media interfaces.  FEs are responsible for\n   basic\
    \ maintenance of layer-2 connectivity with other FEs and with\n   external entities.\
    \  Many layer-2 media include sophisticated control\n   protocols.  The FORCES\
    \ Protocol (over the Fp reference point) will be\n   able to carry messages for\
    \ such protocols so that, in keeping with\n   the dumb FE model, the CE can provide\
    \ appropriate intelligence and\n   control over these media.\n   When multiple\
    \ FEs are present, ForCES requires that packets must be\n   able to arrive at\
    \ the NE by one FE and leave the NE via a different\n   FE (See [4], Section 5,\
    \ Requirement #3).  Packets that enter the NE\n   via one FE and leave the NE\
    \ via a different FE are transferred\n   between FEs across the Fi reference point.\
    \  The Fi reference point\n   could be used by FEs to discover their (inter-FE)\
    \ topology, perhaps\n   during the pre-association phase.  The Fi reference point\
    \ is a\n   separate protocol from the Fp reference point and is not currently\n\
    \   defined by the ForCES Protocol.\n   FEs could be connected in different kinds\
    \ of topologies and packet\n   processing may spread across several FEs in the\
    \ topology.  Hence,\n   logical packet flow may be different from physical FE\
    \ topology.\n   Figure 6 provides some topology examples.  When it is necessary\
    \ to\n   forward packets between FEs, the CE needs to understand the FE\n   topology.\
    \  The FE topology may be queried from the FEs by the CEs via\n   the ForCES Protocol,\
    \ but the FEs are not required to provide that\n   information to the CEs.  So,\
    \ the FE topology information may also be\n   gathered by other means outside\
    \ of the ForCES Protocol (like inter-FE\n   topology discovery protocol).\n  \
    \          -----------------\n            |      CE       |\n            -----------------\n\
    \             ^      ^      ^\n            /       |       \\\n           /  \
    \      v        \\\n          /      -------      \\\n         /    +->| FE3 |<-+\
    \    \\\n        /     |  |     |  |     \\\n       v      |  -------  |     \
    \ v\n     -------  |           |  -------\n     | FE1 |<-+           +->| FE2\
    \ |\n     |     |<--------------->|     |\n     -------                 -------\n\
    \        ^  |                   ^  |\n        |  |                   |  |\n  \
    \      |  v                   |  v\n    (a) Full mesh among FE1, FE2, and FE3\n\
    \                -----------\n                |   CE    |\n                -----------\n\
    \               ^ ^       ^ ^\n              /  |       |  \\\n       /------\
    \   |       |   ------\\\n       v         v       v          v\n   -------  \
    \ -------   -------   -------\n   | FE1 |<->| FE2 |<->| FE3 |<->| FE4 |\n   -------\
    \   -------   -------   -------\n     ^  |     ^  |       ^  |     ^  |\n    \
    \ |  |     |  |       |  |     |  |\n     |  v     |  v       |  v     |  v\n\
    \   (b) Multiple FEs in a daisy chain\n                   ^ |\n              \
    \     | v\n                -----------\n                |   FE1   |<-----------------------|\n\
    \                -----------                        |\n                  ^   \
    \ ^                           |\n                 /      \\                  \
    \        |\n          | ^   /        \\   ^ |                   V\n          v\
    \ |  v          v  | v                ----------\n        ---------        ---------\
    \              |        |\n        | FE2   |        |  FE3  |<------------>| \
    \  CE   |\n        ---------        ---------              |        |\n      \
    \      ^  ^          ^                     ----------\n            |   \\    \
    \    /                        ^  ^\n            |    \\      /               \
    \          |  |\n            |    v     v                          |  |\n    \
    \        |   -----------                       |  |\n            |   |   FE4 \
    \  |<----------------------|  |\n            |   -----------                 \
    \         |\n            |      |  ^                              |\n        \
    \    |      v  |                              |\n            |               \
    \                         |\n            |----------------------------------------|\n\
    \        (c) Multiple FEs connected by a ring\n        Figure 6. Some examples\
    \ of FE topology\n"
- title: 3.3.  CE Managers
  contents:
  - "3.3.  CE Managers\n   CE managers are responsible for determining which FEs a\
    \ CE should\n   control.  It is legitimate for CE managers to be hard-coded with\
    \ the\n   knowledge of with which FEs its CEs should communicate with.  A CE\n\
    \   manager may also be physically embedded into a CE and be implemented\n   as\
    \ a simple keypad or other direct configuration mechanism on the CE.\n   Finally,\
    \ CE managers may be physically and logically separate\n   entities that configure\
    \ the CE with FE information via such\n   mechanisms as COPS-PR [7] or SNMP [5].\n"
- title: 3.4.  FE Managers
  contents:
  - "3.4.  FE Managers\n   FE managers are responsible for determining with which\
    \ CE any\n   particular FE should initially communicate.  Like CE managers, no\n\
    \   restrictions are placed on how an FE manager decides with which CE\n   its\
    \ FEs should communicate, nor are restrictions placed on how FE\n   managers are\
    \ implemented.  Each FE should have one and only one FE\n   manager, while different\
    \ FEs may have the same or different FE\n   manager(s).  Each manager can choose\
    \ to exist and operate\n   independently of other manager.\n"
- title: 4.  Operational Phases
  contents:
  - "4.  Operational Phases\n   Both FEs and CEs require some configuration to be\
    \ in place before\n   they can start information exchange and function as a coherent\n\
    \   network element.  Two operational phases are identified in this\n   framework:\
    \ pre-association and post-association.\n"
- title: 4.1.  Pre-association Phase
  contents:
  - "4.1.  Pre-association Phase\n   The Pre-association phase is the period of time\
    \ during which an FE\n   Manager and a CE Manager are determining whether an FE\
    \ and a CE\n   should be part of the same network element.  The protocols used\n\
    \   during this phase may include all or some of the message exchange\n   over\
    \ Fl, Ff, and Fc reference points.  However, all these may be\n   optional and\
    \ none of this is within the scope of the ForCES Protocol.\n"
- title: 4.1.1.  Fl Reference Point
  contents:
  - "4.1.1.  Fl Reference Point\n   CE managers and FE managers may communicate across\
    \ the Fl reference\n   point in the pre-association phase in order to determine\
    \ whether an\n   individual CE and FE, or a set of CEs and FEs should be associated.\n\
    \   Communication across the Fl reference point is optional in this\n   architecture.\
    \  No requirements are placed on this reference point.\n   CE managers and FE\
    \ managers may be operated by different entities.\n   The operator of the CE manager\
    \ may not want to divulge, except to\n   specified FE managers, any characteristics\
    \ of the CEs it manages.\n   Similarly, the operator of the FE manager may not\
    \ want to divulge FE\n   characteristics, except to authorized entities.  As such,\
    \ CE managers\n   and FE managers may need to authenticate one another.  Subsequent\n\
    \   communication between CE managers and FE managers may require other\n   security\
    \ functions such as privacy, non-repudiation, freshness, and\n   integrity.\n\
    \   FE Manager      FE               CE Manager     CE\n    |              | \
    \                |             |\n    |              |                 |     \
    \        |\n    |(security exchange)             |             |\n   1|<------------------------------>|\
    \             |\n    |              |                 |             |\n    |(a\
    \ list of CEs and their attributes)          |\n   2|<-------------------------------|\
    \             |\n    |              |                 |             |\n    |(a\
    \ list of FEs and their attributes)          |\n   3|------------------------------->|\
    \             |\n    |              |                 |             |\n    | \
    \             |                 |             |\n    |<----------------Fl------------>|\
    \             |\n   Figure 7. An example of a message exchange over the Fl reference\n\
    \             point\n   Once the necessary security functions have been performed,\
    \ the CE and\n   FE managers communicate to determine which CEs and FEs should\n\
    \   communicate with each other.  At the very minimum, the CE and FE\n   managers\
    \ need to learn of the existence of available FEs and CEs\n   respectively.  This\
    \ discovery process may entail one or both managers\n   learning the capabilities\
    \ of the discovered ForCES protocol elements.\n   Figure 7 shows an example of\
    \ a possible message exchange between the\n   CE manager and FE manager over the\
    \ Fl reference point.\n"
- title: 4.1.2.  Ff Reference Point
  contents:
  - "4.1.2.  Ff Reference Point\n   The Ff reference point is used to inform forwarding\
    \ elements of the\n   association decisions made by the FE manager in the pre-association\n\
    \   phase.  Only authorized entities may instruct an FE with respect to\n   which\
    \ CE should control it.  Therefore, privacy, integrity,\n   freshness, and authentication\
    \ are necessary between the FE manager\n   and FEs when the FE manager is remote\
    \ to the FE.  Once the\n   appropriate security has been established, the FE manager\
    \ instructs\n   the FEs across this reference point to join a new NE or to disconnect\n\
    \   from an existing NE.  The FE Manager could also assign unique FE\n   identifiers\
    \ to the FEs using this reference point.  The FE\n   identifiers are useful in\
    \ the post association phase to express FE\n   topology.  Figure 8 shows example\
    \ of a message exchange over the Ff\n   reference point.\n   FE Manager      FE\
    \               CE Manager     CE\n    |              |                |     \
    \        |\n    |              |                |             |\n    |(security\
    \ exchange)            |(security exchange)\n   1|<------------>|authentication\
    \ 1|<----------->|authentication\n    |              |                |      \
    \       |\n    |(FE ID, attributes)            |(CE ID, attributes)\n   2|<-------------|request\
    \        2|<------------|request\n    |              |                |      \
    \       |\n   3|------------->|response       3|------------>|response\n    |(corresponding\
    \ CE ID)          |(corresponding FE ID)\n    |              |               \
    \ |             |\n    |              |                |             |\n    |<-----Ff----->|\
    \                |<-----Fc---->|\n         Figure 8. Examples of a message exchange\n\
    \                   over the Ff and Fc reference points\n   Note that the FE manager\
    \ function may be co-located with the FE (such\n   as by manual keypad entry of\
    \ the CE IP address), in which case this\n   reference point is reduced to a built-in\
    \ function.\n"
- title: 4.1.3.  Fc Reference Point
  contents:
  - "4.1.3.  Fc Reference Point\n   The Fc reference point is used to inform control\
    \ elements of the\n   association decisions made by CE managers in the pre-association\n\
    \   phase.  When the CE manager is remote, only authorized entities may\n   instruct\
    \ a CE to control certain FEs.  Privacy, integrity, freshness,\n   and authentication\
    \ are also required across this reference point in\n   such a configuration. \
    \ Once appropriate security has been\n   established, the CE manager instructs\
    \ the CEs as to which FEs they\n   should control and how they should control\
    \ them.  Figure 8 shows\n   example of a message exchange over the Fc reference\
    \ point.\n   As with the FE manager and FEs, configurations are possible where\
    \ the\n   CE manager and CE are co-located and no protocol is used for this\n\
    \   function.\n"
- title: 4.2.  Post-association Phase and Fp reference point
  contents:
  - "4.2.  Post-association Phase and Fp reference point\n   The Post-association\
    \ phase is the period of time during which an FE\n   and CE have been configured\
    \ with information necessary to contact\n   each other and includes both association\
    \ establishment and steady-\n   state communication.  The communication between\
    \ CE and FE is\n   performed across the Fp (\"p\" meaning protocol) reference\
    \ point.\n   ForCES Protocol is exclusively used for all communication across\
    \ the\n   Fp reference point.\n"
- title: 4.2.1.  Proximity and Interconnect between CEs and FEs
  contents:
  - "4.2.1.  Proximity and Interconnect between CEs and FEs\n   The ForCES Working\
    \ Group has made a conscious decision that the first\n   version of ForCES will\
    \ be focused on \"very close\" CE/FE localities in\n   IP networks.  Very Close\
    \ localities consist of control and forwarding\n   elements that are either components\
    \ in the same physical box, or\n   separated at most by one local network hop\
    \ ([8]).  CEs and FEs can be\n   connected by a variety of interconnect technologies,\
    \ including\n   Ethernet connections, backplanes, ATM (cell) fabrics, etc.  ForCES\n\
    \   should be able to support each of these interconnects (see [4]\n   Section\
    \ 5, requirement #1).  When the CEs and FEs are separated\n   beyond a single\
    \ L3 routing hop, the ForCES Protocol will make use of\n   an existing RFC 2914\
    \ [3] compliant L4 protocol with adequate\n   reliability, security, and congestion\
    \ control (e.g., TCP, SCTP) for\n   transport purposes.\n"
- title: 4.2.2.  Association Establishment
  contents:
  - "4.2.2.  Association Establishment\n                FE                      CE\n\
    \                |                       |\n                |(Security exchange.)\
    \   |\n               1|<--------------------->|\n                |          \
    \             |\n                |(Let me join the NE please.)\n             \
    \  2|---------------------->|\n                |                       |\n   \
    \             |(What kind of FE are you? -- capability query)\n              \
    \ 3|<----------------------|\n                |                       |\n    \
    \            |(Here is my FE functions/state: use model to\n   describe)\n   \
    \            4|---------------------->|\n                |                   \
    \    |\n                |(Initial config for FE -- optional)\n               5|<----------------------|\n\
    \                |                       |\n                |(I am ready to go.\
    \ Shall I?)\n               6|---------------------->|\n                |    \
    \                   |\n                |(Go ahead!)            |\n           \
    \    7|<----------------------|\n                |                       |\n \
    \  Figure 9. Example of a message exchange between CE and FE\n             over\
    \ Fp to establish an NE association\n   As an example, figure 9 shows some of\
    \ the message exchange that may\n   happen before the association between the\
    \ CE and FE is fully\n   established.  Either the CE or FE can initiate the connection.\n\
    \   Security handshake is necessary to authenticate the two communication\n  \
    \ endpoints to each other before any further message exchange can\n   happen.\
    \  The security handshake should include mutual authentication\n   and authorization\
    \ between the CE and FE, but the exact details depend\n   on the security solution\
    \ chosen by the ForCES Protocol.\n   Authorization can be as simple as checking\
    \ against the list of\n   authorized end points provided by the FE or CE manager\
    \ during the\n   pre-association phase.  Both authentication and authorization\
    \ must be\n   successful before the association can be established.  If either\n\
    \   authentication or authorization fails, the end point must not be\n   allowed\
    \ to join the NE.  After the successful security handshake,\n   message authentication\
    \ and confidentiality are still necessary for\n   the on-going information exchange\
    \ between the CE and FE, unless some\n   form of physical security exists.  Whenever\
    \ a packet fails\n   authentication, it must be dropped and a notification may\
    \ be sent to\n   alert the sender of the potential attack.  Section 8 provides\
    \ more\n   details on the security considerations for ForCES.\n   After the successful\
    \ security handshake, the FE needs to inform the\n   CE of its own capability\
    \ and optionally its topology in relation to\n   other FEs.  The capability of\
    \ the FE shall be represented by the FE\n   model, as required in [4] (Section\
    \ 6, requirement #1).  The model\n   would allow an FE to describe what kind of\
    \ packet processing\n   functions it contains, in what order the processing happens,\
    \ what\n   kinds of configurable parameters it allows, what statistics it\n  \
    \ collects, and what events it might throw, etc.  Once such information\n   is\
    \ available to the CE, the CE may choose to send some initial or\n   default configuration\
    \ to the FE so that the FE can start receiving\n   and processing packets correctly.\
    \  Such initialization may not be\n   necessary if the FE already obtains the\
    \ information from its own\n   bootstrap process.  Once the necessary initial\
    \ information is\n   exchanged, the process of association is completed.  Packet\n\
    \   processing and forwarding at the FE cannot begin until association is\n  \
    \ established.  After the association is established, the CE and FE\n   enter\
    \ steady-state communication.\n"
- title: 4.2.3.  Steady-state Communication
  contents:
  - "4.2.3.  Steady-state Communication\n   Once an association is established between\
    \ the CE and FE, the ForCES\n   Protocol is used by the CE and FE over the Fp\
    \ reference point to\n   exchange information to facilitate packet processing.\n\
    \           FE                      CE\n           |                       |\n\
    \           |(Add these new routes.)|\n          1|<----------------------|\n\
    \           |                       |\n           |(Successful.)          |\n\
    \          2|---------------------->|\n           |                       |\n\
    \           |                       |\n           |(Query some stats.)    |\n\
    \          1|<----------------------|\n           |                       |\n\
    \           |(Reply with stats collected.)\n          2|---------------------->|\n\
    \           |                       |\n           |                       |\n\
    \           |(My port is down, with port #.)\n          1|---------------------->|\n\
    \           |                       |\n           |(Here is a new forwarding table)\n\
    \          2|<----------------------|\n           |                       |\n\
    \   Figure 10. Examples of a message exchange between CE and FE\n            \
    \  over Fp during steady-state communication\n   Based on the information acquired\
    \ through CEs' control processing,\n   CEs will frequently need to manipulate\
    \ the packet-forwarding\n   behaviors of their FE(s) by sending instructions to\
    \ FEs.  For\n   example, Figure 10 shows message exchange examples in which the\
    \ CE\n   sends new routes to the FE so that the FE can add them to its\n   forwarding\
    \ table.  The CE may query the FE for statistics collected\n   by the FE and the\
    \ FE may notify the CE of important events such as\n   port failure.\n"
- title: 4.2.4.  Data Packets across Fp reference point
  contents:
  - "4.2.4.  Data Packets across Fp reference point\n   ---------------------    \
    \       ----------------------\n   |                   |           |         \
    \           |\n   |    +--------+     |           |     +--------+     |\n   |\
    \    |CE(BGP) |     |           |     |CE(BGP) |     |\n   |    +--------+   \
    \  |           |     +--------+     |\n   |        |          |           |  \
    \        ^         |\n   |        |Fp        |           |          |Fp      \
    \ |\n   |        v          |           |          |         |\n   |    +--------+\
    \     |           |     +--------+     |\n   |    |  FE    |     |           |\
    \     |   FE   |     |\n   |    +--------+     |           |     +--------+  \
    \   |\n   |        |          |           |          ^         |\n   | Router\
    \ |          |           | Router   |         |\n   | A      |          |    \
    \       | B        |         |\n   ---------+-----------           -----------+----------\n\
    \            v                                 ^\n            |              \
    \                   |\n            |                                 |\n     \
    \       ------------------->---------------\n   Figure 11. Example to show data\
    \ packet flow between two NEs.\n   Control plane protocol packets (such as RIP,\
    \ OSPF messages) addressed\n   to any of NE's interfaces are typically redirected\
    \ by the receiving\n   FE to its CE, and CE may originate packets and have its\
    \ FE deliver\n   them to other NEs.  Therefore, the ForCES Protocol over Fp not\
    \ only\n   transports the ForCES Protocol messages between CEs and FEs, but also\n\
    \   encapsulates the data packets from control plane protocols.\n   Moreover,\
    \ one FE may be controlled by multiple CEs for distributed\n   control.  In this\
    \ configuration, the control protocols supported by\n   the FORCES NEs may spread\
    \ across multiple CEs.  For example, one CE\n   may support routing protocols\
    \ like OSPF and BGP, while a signaling\n   and admission control protocol like\
    \ RSVP is supported in another CE.\n   FEs are configured to recognize and filter\
    \ these protocol packets and\n   forward them to the corresponding CE.\n   Figure\
    \ 11 shows one example of how the BGP packets originated by\n   router A are passed\
    \ to router B.  In this example, the ForCES\n   Protocol is used to transport\
    \ the packets from the CE to the FE\n   inside router A, and then from the FE\
    \ to the CE inside router B.  In\n   light of the fact that the ForCES Protocol\
    \ is responsible for\n   transporting both the control messages and the data packets\
    \ between\n   the CE and FE over the Fp reference point, it is possible to use\n\
    \   either a single protocol or multiple protocols.\n"
- title: 4.2.5.  Proxy FE
  contents:
  - "4.2.5.  Proxy FE\n   In the case where a physical FE cannot implement (e.g.,\
    \ due to the\n   lack of a general purpose CPU) the ForCES Protocol directly,\
    \ a proxy\n   FE can be used to terminate the Fp reference point instead of the\n\
    \   physical FE.  This allows the CE to communicate to the physical FE\n   via\
    \ the proxy by using ForCES, while the proxy manipulates the\n   physical FE using\
    \ some intermediary form of communication (e.g., a\n   non-ForCES protocol or\
    \ DMA).  In such an implementation, the\n   combination of the proxy and the physical\
    \ FE becomes one logical FE\n   entity.  It is also possible for one proxy to\
    \ act on behalf of\n   multiple physical FEs.\n   One needs to be aware of the\
    \ security implication introduced by the\n   proxy FE.  Since the physical FE\
    \ is not capable of implementing\n   ForCES itself, the security mechanism of\
    \ ForCES can only secure the\n   communication channel between the CE and the\
    \ proxy FE, but not all\n   the way to the physical FE.  It is recommended that\
    \ other security\n   mechanisms (including physical security property) be employed\
    \ to\n   ensure the security between the CE and the physical FE.\n"
- title: 4.3.  Association Re-establishment
  contents:
  - "4.3.  Association Re-establishment\n   FEs and CEs may join and leave NEs dynamically\
    \ (see [4] Section 5,\n   requirements #12).  When an FE or CE leaves the NE,\
    \ the association\n   with the NE is broken.  If the leaving party rejoins an\
    \ NE later, to\n   re-establish the association, it may need to re-enter the pre-\n\
    \   association phase.  Loss of association can also happen unexpectedly\n   due\
    \ to a loss of connection between the CE and the FE.  Therefore,\n   the framework\
    \ allows the bi-directional transition between these two\n   phases, but the ForCES\
    \ Protocol is only applicable for the post-\n   association phase.  However, the\
    \ protocol should provide mechanisms\n   to support association re-establishment.\
    \  This includes the ability\n   for CEs and FEs to determine when there is a\
    \ loss of association\n   between them, and to restore association and efficient\
    \ state\n   (re)synchronization mechanisms (see [4] Section 5, requirement #7).\n\
    \   Note that security association and state must also be re-established\n   to\
    \ guarantee the same level of security (including both\n   authentication and\
    \ authorization) exists before and after the\n   association re-establishment.\n\
    \   When an FE leaves or joins an existing NE that is already in\n   operation,\
    \ the CE needs to be aware of the impact on FE topology and\n   deal with the\
    \ change accordingly.\n"
- title: 4.3.1. CE graceful restart
  contents:
  - "4.3.1. CE graceful restart\n   The failure and restart of the CE in a router\
    \ can potentially cause\n   much stress and disruption on the control plane throughout\
    \ a network\n   because in restarting a CE for any reason, the router loses routing\n\
    \   adjacencies or sessions with its routing neighbors.  Neighbors who\n   detect\
    \ the lost adjacency normally re-compute new routes and then\n   send routing\
    \ updates to their own neighbors to communicate the lost\n   adjacency.  Their\
    \ neighbors do the same thing to propagate throughout\n   the network.  In the\
    \ meantime, the restarting router cannot receive\n   traffic from other routers\
    \ because the neighbors have stopped using\n   the router's previously advertised\
    \ routes.  When the restarting\n   router restores adjacencies, neighbors must\
    \ once again re-compute new\n   routes and send out additional routing updates.\
    \  The restarting\n   router is unable to forward packets until it has re-established\n\
    \   routing adjacencies with neighbors, received route updates through\n   these\
    \ adjacencies, and computed new routes.  Until convergence takes\n   place throughout\
    \ the network, packets may be lost in transient black\n   holes or forwarding\
    \ loops.\n   A high availability mechanism known as the \"graceful restart\" has\n\
    \   been used by the IP routing protocols (OSPF [11], BGP [12], IS-IS\n   [13])\
    \ and MPLS label distribution protocol (LDP [10]) to help\n   minimize the negative\
    \ effects on routing throughout an entire network\n   caused by a restarting router.\
    \  Route flap on neighboring routers is\n   avoided, and a restarting router can\
    \ continue to forward packets that\n   would otherwise be dropped.\n   While the\
    \ details differ from protocol to protocol, the general idea\n   behind the graceful\
    \ restart mechanism remains the same.  With the\n   graceful restart, a restarting\
    \ router can inform its neighbors when\n   it restarts.  The neighbors may detect\
    \ the lost adjacency but do not\n   recompute new routes or send routing updates\
    \ to their neighbors.  The\n   neighbors also hold on to the routes received from\
    \ the restarting\n   router before restart and assume they are still valid for\
    \ a limited\n   time.  By doing so, the restarting router's FEs can also continue\
    \ to\n   receive and forward traffic from other neighbors for a limited time\n\
    \   by using the routes they already have.  The restarting router then\n   re-establishes\
    \ routing adjacencies, downloads updated routes from all\n   its neighbors, recomputes\
    \ new routes, and uses them to replace the\n   older routes it was using.  It\
    \ then sends these updated routes to its\n   neighbors and signals the completion\
    \ of the graceful restart process.\n   Non-stop forwarding is a requirement for\
    \ graceful restart.  It is\n   necessary so a router can continue to forward packets\
    \ while it is\n   downloading routing information and recomputing new routes.\
    \  This\n   ensures that packets will not be dropped.  As one can see, one of\
    \ the\n   benefits afforded by the separation of CE and FE is exactly the\n  \
    \ ability of non-stop forwarding in the face of the CE failure and\n   restart.\
    \  The support of dynamic changes to CE/FE association in\n   ForCES also makes\
    \ it compatible with high availability mechanisms,\n   such as graceful restart.\n\
    \   ForCES should be able to support a CE graceful restart easily.  When\n   the\
    \ association is established the first time, the CE must inform the\n   FEs what\
    \ to do in the case of a CE failure.  If graceful restart is\n   not supported,\
    \ the FEs may be told to stop packet processing all\n   together if its CE fails.\
    \  If graceful restart is supported, the FEs\n   should be told to cache and hold\
    \ on to its FE state, including the\n   forwarding tables across the restarts.\
    \  A timer must be included so\n   that the timeout causes such a cached state\
    \ to eventually expire.\n   Those timers should be settable by the CE.\n"
- title: 4.3.2.  FE restart
  contents:
  - "4.3.2.  FE restart\n   In the same example in Figure 5, assuming CE1 is the working\
    \ CE for\n   the moment, what would happen if one of the FEs, say FE1, leaves\
    \ the\n   NE temporarily?  FE1 may voluntarily decide to leave the association.\n\
    \   Alternatively, FE1 may stop functioning simply due to unexpected\n   failure.\
    \  In the former case, CE1 receives a \"leave-association\n   request\" from FE1.\
    \  In the latter, CE1 detects the failure of FE1 by\n   some other means.  In\
    \ both cases, CE1 must inform the routing\n   protocols of such an event, most\
    \ likely prompting a reachability and\n   SPF (Shortest Path First) recalculation\
    \ and associated downloading of\n   new FIBs from CE1 to the other remaining FEs\
    \ (only FE2 in this\n   example).  Such recalculation and FIB updates will also\
    \ be propagated\n   from CE1 to the NE's neighbors that are affected by the connectivity\n\
    \   of FE1.\n   When FE1 decides to rejoin again, or when it restarts again after\
    \ the\n   failure, FE1 needs to re-discover its master (CE).  This can be\n  \
    \ achieved by several means.  It may re-enter the pre-association phase\n   and\
    \ get that information from its FE manager.  It may retrieve the\n   previous\
    \ CE information from its cache, if it can validate the\n   information freshness.\
    \  Once it discovers its CE, it starts message\n   exchange with the CE to re-establish\
    \ the association, as outlined in\n   Figure 9, with the possible exception that\
    \ it might be able to bypass\n   the transport of the complete initial configuration.\
    \  Suppose that\n   FE1 still has its routing table and other state information\
    \ from the\n   last association.  Instead of re-sending all the information, it\
    \ may\n   be able to use a more efficient mechanism to re-sync the state with\n\
    \   its CE, if such a mechanism is supported by the ForCES Protocol.  For\n  \
    \ example, CRC-32 of the state might give a quick indication of whether\n   or\
    \ not the state is in-sync with its CE.  By comparing its state with\n   the CE\
    \ first, it sends an information update\n   only if it is needed.  The ForCES\
    \ Protocol may choose to implement\n   similar optimization  mechanisms, but it\
    \ may also choose not to, as\n   this is not a requirement.\n"
- title: 5.  Applicability to RFC 1812
  contents:
  - "5.  Applicability to RFC 1812\n   [4] Section 5, requirement #9 dictates \"Any\
    \ proposed ForCES\n   architecture must explain how that architecture supports\
    \ all of the\n   router functions as defined in RFC 1812.\"  RFC 1812 [2] discusses\n\
    \   many important requirements for IPv4 routers from the link layer to\n   the\
    \ application layer.  This section addresses the relevant\n   requirements in\
    \ RFC 1812 for implementing IPv4 routers based on\n   ForCES architecture and\
    \ explains how ForCES satisfies these\n   requirements by providing guidelines\
    \ on how to separate the\n   functionalities required into the forwarding plane\
    \ and control plane.\n   In general, the forwarding plane carries out the bulk\
    \ of the per-\n   packet processing that is required at line speed, while the\
    \ control\n   plane carries most of the computationally complex operations that\
    \ are\n   typical of the control and signaling protocols.  However, it is\n  \
    \ impossible to draw a rigid line to divide the processing into CEs and\n   FEs\
    \ cleanly and the ForCES architecture should not limit the\n   innovative approaches\
    \ in control and forwarding plane separation.  As\n   more and more processing\
    \ power is available in the FEs, some of the\n   control functions that traditionally\
    \ are performed by CEs may now be\n   moved to FEs for better performance and\
    \ scalability.  Such offloaded\n   functions may include part of ICMP or TCP processing,\
    \ or part of\n   routing protocols.  Once off-loaded onto the forwarding plane,\
    \ such\n   CE functions, even though logically belonging to the control plane,\n\
    \   now become part of the FE functions.  Just like the other logical\n   functions\
    \ performed by FEs, such off-loaded functions must be\n   expressed as part of\
    \ the FE model so that the CEs can decide how to\n   best take advantage of these\
    \ off-loaded functions when present on the\n   FEs.\n"
- title: 5.1.  General Router Requirements
  contents:
  - "5.1.  General Router Requirements\n   Routers have at least two or more logical\
    \ interfaces.  When CEs and\n   FEs are separated by ForCES within a single NE,\
    \ some additional\n   interfaces are needed for intra-NE communications, as illustrated\
    \ in\n   figure 12.  This NE contains one CE and two FEs.  Each FE has four\n\
    \   interfaces; two of them are used for receiving and transmitting\n   packets\
    \ to the external world, while the other two are for intra-NE\n   connections.\
    \  CE has two logical interfaces #9 and #10, connected to\n   interfaces #3 and\
    \ #6 from FE1 and FE2, respectively.  Interface #4\n   and #5 are connected for\
    \ FE1-FE2 communication.  Therefore, this\n   router NE provides four external\
    \ interfaces (#1, 2, 7, and 8).\n      ---------------------------------\n   \
    \   |               router NE       |\n      |   -----------   -----------   |\n\
    \      |   |   FE1   |   |   FE2   |   |\n      |   -----------   -----------\
    \   |\n      |   1| 2| 3| 4|   5| 6| 7| 8|   |\n      |    |  |  |  |    |  |\
    \  |  |   |\n      |    |  |  |  +----+  |  |  |   |\n      |    |  |  |     \
    \     |  |  |   |\n      |    |  | 9|        10|  |  |   |\n      |    |  | --------------\
    \ |  |   |\n      |    |  | |    CE      | |  |   |\n      |    |  | --------------\
    \ |  |   |\n      |    |  |                |  |   |\n      -----+--+----------------+--+----\n\
    \           |  |                |  |\n           |  |                |  |\n  \
    \    Figure 12. A router NE example with four interfaces.\n   IPv4 routers must\
    \ implement IP to support its packet forwarding\n   function, which is driven\
    \ by its FIB (Forwarding Information Base).\n   This Internet layer forwarding\
    \ (see RFC 1812 [2] Section 5)\n   functionality naturally belongs to FEs in the\
    \ ForCES architecture.\n   A router may implement transport layer protocols (like\
    \ TCP and UDP)\n   that are required to support application layer protocols (see\
    \ RFC\n   1812 [2] Section 6).  One important class of application protocols is\n\
    \   routing protocols (see RFC 1812 [2] Section 7).  In the ForCES\n   architecture,\
    \ routing protocols are naturally implemented by CEs.\n   Routing protocols require\
    \ that routers communicate with each other.\n   This communication between CEs\
    \ in different routers is supported in\n   ForCES by FEs' ability to redirect\
    \ data packets addressed to routers\n   (i.e., NEs), and the CEs' ability to originate\
    \ packets and have them\n   delivered by their FEs.  This communication occurs\
    \ across the Fp\n   reference point inside each router and between neighboring\
    \ routers'\n   external interfaces, as illustrated in Figure 11.\n"
- title: 5.2.  Link Layer
  contents:
  - "5.2.  Link Layer\n   Since FEs own all the external interfaces for the router,\
    \ FEs need to\n   conform to the link layer requirements in RFC 1812 [2].  Arguably,\n\
    \   ARP support may be implemented in either CEs or FEs.  As we will see\n   later,\
    \ a number of behaviors that RFC 1812 mandates fall into this\n   category --\
    \ they may be performed by the FE and may be performed by\n   the CE.  A general\
    \ guideline is needed to ensure interoperability\n   between separated control\
    \ and forwarding planes.  The guideline we\n   offer here is that CEs MUST be\
    \ capable of these kinds of operations\n   while FEs MAY choose to implement them.\
    \  The FE model should indicate\n   its capabilities in this regard so that CEs\
    \ can decide where these\n   functions are implemented.\n   Interface parameters,\
    \ including MTU, IP address, etc., must be\n   configurable by CEs via ForCES.\
    \  CEs must be able to determine\n   whether a physical interface in an FE is\
    \ available to send packets or\n   not.  FEs must also inform CEs of the status\
    \ change of the interfaces\n   (like link up/down) via ForCES.\n"
- title: 5.3.  Internet Layer Protocols
  contents:
  - "5.3.  Internet Layer Protocols\n   Both FEs and CEs must implement the IP protocol\
    \ and all mandatory\n   extensions as RFC 1812 specified.  CEs should implement\
    \ IP options\n   like source route and record route while FEs may choose to implement\n\
    \   those as well.  The timestamp option should be implemented by FEs to\n   insert\
    \ the timestamp most accurately.  The FE must interpret the IP\n   options that\
    \ it understands and preserve the rest unchanged for use\n   by CEs.  Both FEs\
    \ and CEs might choose to silently discard packets\n   without sending ICMP errors,\
    \ but such events should be logged and\n   counted.  FEs may report statistics\
    \ for such events to CEs via\n   ForCES.\n   When multiple FEs are involved to\
    \ process packets, the appearance of\n   a single NE must be strictly maintained.\
    \  For example, Time-To-Live\n   (TTL) must be decremented only once within a\
    \ single NE.  For example,\n   it can be always decremented by the last FE with\
    \ egress function.\n   FEs must receive and process normally any packets with\
    \ a broadcast\n   destination address or a multicast destination address that\
    \ the\n   router has asked to receive.  When IP multicast is supported in\n  \
    \ routers, IGMP is implemented in CEs.  CEs are also required of ICMP\n   support,\
    \ while it is optional for FEs to support ICMP.  Such an\n   option can be communicated\
    \ to CEs as part of the FE model. Therefore,\n   FEs can always rely upon CEs\
    \ to send out ICMP error messages, but FEs\n   also have the option of generating\
    \ ICMP error messages themselves.\n"
- title: 5.4.  Internet Layer Forwarding
  contents:
  - "5.4.  Internet Layer Forwarding\n   IP forwarding is implemented by FEs.  When\
    \ the routing table is\n   updated at the CEs, ForCES is used to send the new\
    \ route entries from\n   the CEs to FEs.  Each FE has its own forwarding table\
    \ and uses this\n   table to direct packets to the next hop interface.\n   Upon\
    \ receiving IP packets, the FE verifies the IP header and\n   processes most of\
    \ the IP options.  Some options cannot be processed\n   until the routing decision\
    \ has been made.  The routing decision is\n   made after examining the destination\
    \ IP address.  If the destination\n   address belongs to the router itself, the\
    \ packets are filtered and\n   either processed locally or forwarded to the CE,\
    \ depending upon the\n   instructions set-up by the CE.  Otherwise, the FE determines\
    \ the next\n   hop IP address by looking in its forwarding table.  The FE also\n\
    \   determines the network interface it uses to send the packets.\n   Sometimes\
    \ an FE may need to forward the packets to another FE before\n   packets can be\
    \ forwarded out to the next hop.  Right before packets\n   are forwarded out to\
    \ the next hop, the FE decrements TTL by 1 and\n   processes any IP options that\
    \ could not be processed before.  The FE\n   performs IP fragmentation if necessary,\
    \ determines the link layer\n   address (e.g., by ARP), and encapsulates the IP\
    \ datagram (or each of\n   the fragments thereof) in an appropriate link layer\
    \ frame and queues\n   it for output on the interface selected.\n   Other options\
    \ mentioned in RFC 1812 [2] for IP forwarding may also be\n   implemented at FEs,\
    \ for example, packet filtering.\n   FEs typically forward packets destined locally\
    \ to CEs.  FEs may also\n   forward exceptional packets (packets that FEs do not\
    \ know how to\n   handle) to CEs.  CEs are required to handle packets forwarded\
    \ by FEs\n   for whatever reason.  It might be necessary for ForCES to attach\
    \ some\n   meta-data with the packets to indicate the reasons of forwarding from\n\
    \   FEs to CEs.  Upon receiving packets with meta-data from FEs, CEs can\n   decide\
    \ to either process the packets themselves, or pass the packets\n   to the upper\
    \ layer protocols including routing and management\n   protocols.  If CEs are\
    \ to process the packets by themselves, CEs may\n   choose to discard the packets,\
    \ or modify and re-send the packets.\n   CEs may also originate new packets and\
    \ deliver them to FEs for\n   further forwarding.\n   Any state change during\
    \ router operation must also be handled\n   correctly according to RFC 1812. \
    \ For example, when an FE ceases\n   forwarding, the entire NE may continue forwarding\
    \ packets, but it\n   needs to stop advertising routes that are affected by the\
    \ failed FE.\n"
- title: 5.5.  Transport Layer
  contents:
  - "5.5.  Transport Layer\n   The Transport layer is typically implemented at CEs\
    \ to support higher\n   layer application protocols like routing protocols.  In\
    \ practice,\n   this means that most CEs implement both the Transmission Control\n\
    \   Protocol (TCP) and the User Datagram Protocol (UDP).\n   Both CEs and FEs\
    \ need to implement the ForCES Protocol.  If some\n   layer-4 transport is used\
    \ to support ForCES, then both CEs and FEs\n   need to implement the L4 transport\
    \ and ForCES Protocols.\n"
- title: 5.6.  Application Layer -- Routing Protocols
  contents:
  - "5.6.  Application Layer -- Routing Protocols\n   Interior and exterior routing\
    \ protocols are implemented on CEs.  The\n   routing packets originated by CEs\
    \ are forwarded to FEs for delivery.\n   The results of such protocols (like forwarding\
    \ table updates) are\n   communicated to FEs via ForCES.\n   For performance or\
    \ scalability reasons, portions of the control plane\n   functions that need faster\
    \ response may be moved from the CEs and\n   off-loaded onto the FEs.  For example,\
    \ in OSPF, the Hello protocol\n   packets are generated and processed periodically.\
    \  When done at the\n   CEs, the inbound Hello packets have to traverse from the\
    \ external\n   interfaces at the FEs to the CEs via the internal CE-FE channel.\n\
    \   Similarly, the outbound Hello packets have to go from the CEs to the\n   FEs\
    \ and to the external interfaces.  Frequent Hello updates place\n   heavy processing\
    \ overhead on the CEs and can overwhelm the CE-FE\n   channel as well.  Since\
    \ typically there are far more FEs than CEs in\n   a router, the off-loaded Hello\
    \ packets are processed in a much more\n   distributed and scalable fashion. \
    \ By expressing such off-loaded\n   functions in the FE model, we can ensure interoperability.\
    \  However,\n   the exact description of the off-loaded functionality corresponding\n\
    \   to the off-loaded functions expressed in the FE model are not part of\n  \
    \ the model itself and will need to be worked out as a separate\n   specification.\n"
- title: 5.7.  Application Layer -- Network Management Protocol
  contents:
  - "5.7.  Application Layer -- Network Management Protocol\n   RFC 1812 [2] also\
    \ dictates that \"Routers MUST be manageable by SNMP\".\n   In general, for the\
    \ post-association phase, most external management\n   tasks (including SNMP)\
    \ should be done through interaction with the CE\n   in order to support the appearance\
    \ of a single functional device.\n   Therefore, it is recommended that an SNMP\
    \ agent be implemented by CEs\n   and that the SNMP messages received by FEs be\
    \ redirected to their\n   CEs. AgentX framework defined in RFC 2741 ([6]) may\
    \ be applied here\n   such that CEs act in the role of master agent to process\
    \ SNMP\n   protocol messages while FEs act in the role of subagent to provide\n\
    \   access to the MIB objects residing on FEs.  AgentX protocol messages\n   between\
    \ the master agent (CE) and the subagent (FE) are encapsulated\n   and transported\
    \ via ForCES, just like data packets from any other\n   application layer protocols.\n"
- title: 6.  Summary
  contents:
  - "6.  Summary\n   This document defines an architectural framework for ForCES.\
    \  It\n   identifies the relevant components for a ForCES network element,\n \
    \  including (one or more) FEs, (one or more) CEs, one optional FE\n   manager,\
    \ and one optional CE manager.  It also identifies the\n   interaction among these\
    \ components and discusses all the major\n   reference points.  It is important\
    \ to point out that, among all the\n   reference points, only the Fp interface\
    \ between CEs and FEs is within\n   the scope of ForCES.  ForCES alone may not\
    \ be enough to support all\n   desirable NE configurations.  However, we believe\
    \ that ForCES over an\n   Fp interface is the most important element in realizing\
    \ physical\n   separation and interoperability of CEs and FEs, and hence the first\n\
    \   interface that ought to be standardized.  Simple and useful\n   configurations\
    \ can still be implemented with only CE-FE interface\n   being standardized, e.g.,\
    \ single CE with full-meshed FEs.\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   Joel M. Halpern gave us many insightful comments and\
    \ suggestions and\n   pointed out several major issues.  T. Sridhar suggested\
    \ that the\n   AgentX protocol could be used with SNMP to manage the ForCES network\n\
    \   elements.  Susan Hares pointed out the issue of graceful restart with\n  \
    \ ForCES.  Russ Housley, Avri Doria, Jamal Hadi Salim, and many others\n   in\
    \ the ForCES mailing list also provided valuable feedback.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   The NE administrator has the freedom to determine\
    \ the exact security\n   configuration that is needed for the specific deployment.\
    \ For\n   example, ForCES may be deployed between CEs and FEs connected to each\n\
    \   other inside a box over a backplane.  In such a scenario, physical\n   security\
    \ of the box ensures that most of the attacks, such as man-\n   in-the-middle,\
    \ snooping, and impersonation, are not possible, and\n   hence the ForCES architecture\
    \ may rely on the physical security of\n   the box to defend against these attacks\
    \ and protocol mechanisms may\n   be turned off.  However, it is also shown that\
    \ denial of service\n   attacks via external interfaces as described below in\
    \ Section 8.1.8\n   is still a potential threat, even for such an \"all-in-one-box\"\
    \n   deployment scenario and hence the rate limiting mechanism is still\n   necessary.\
    \  This is just one example to show that it is important to\n   assess the security\
    \ needs of the ForCES-enabled network elements\n   under different deployment\
    \ scenarios.  It should be possible for the\n   administrator to configure the\
    \ level of security needed for the\n   ForCES Protocol.\n   In general, the physical\
    \ separation of two entities usually results\n   in a potentially insecure link\
    \ between the two entities and hence\n   much stricter security measurements are\
    \ required.  For example, we\n   pointed out in Section 4.1 that authentication\
    \ becomes necessary\n   between the CE manager and FE manager, between the CE\
    \ and CE manager,\n   and between the FE and FE manager in some configurations.\
    \  The\n   physical separation of the CE and FE also imposes serious security\n\
    \   requirements for the ForCES Protocol over the Fp interface.  This\n   section\
    \ first attempts to describe the security threats that may be\n   introduced by\
    \ the physical separation of the FEs and CEs, and then it\n   provides recommendations\
    \ and guidelines for the secure operation and\n   management of the ForCES Protocol\
    \ over the Fp interface based on\n   existing standard security solutions.\n"
- title: 8.1.  Analysis of Potential Threats Introduced by ForCES
  contents:
  - "8.1.  Analysis of Potential Threats Introduced by ForCES\n   This section provides\
    \ the threat analysis for ForCES, with a focus on\n   the Fp interface.  Each\
    \ threat is described in detail with the\n   effects on the ForCES Protocol entities\
    \ or/and the NE as a whole, and\n   the required functionalities that need to\
    \ be in place to defend the\n   threat.\n"
- title: 8.1.1.  "Join" or "Remove" Message Flooding on CEs
  contents:
  - "8.1.1.  \"Join\" or \"Remove\" Message Flooding on CEs\n   Threats:  A malicious\
    \ node could send a stream of false \"join NE\" or\n   \"remove from NE\" requests\
    \ on behalf of a non-existent or unauthorized\n   FE to legitimate CEs at a very\
    \ rapid rate, and thereby creating\n   unnecessary state in the CEs.\n   Effects:\
    \ If maintaining state for non-existent or unauthorized FEs, a\n   CE may become\
    \ unavailable for other processing and hence suffer from\n   a denial of service\
    \ (DoS) attack similar to the TCP SYN DoS.  If\n   multiple CEs are used, the\
    \ unnecessary state information may also be\n   conveyed to multiple CEs via the\
    \ Fr interface (e.g., from the active\n   CE to the stand-by CE) and hence subject\
    \ multiple CEs to a DoS\n   attack.\n   Requirement: A CE that receives a \"join\"\
    \ or \"remove\" request should\n   not create any state information until it has\
    \ authenticated the FE\n   endpoint.\n"
- title: 8.1.2.  Impersonation Attack
  contents:
  - "8.1.2.  Impersonation Attack\n   Threats: A malicious node can impersonate a\
    \ CE or FE and send out\n   false messages.\n   Effects: The whole NE could be\
    \ compromised.\n   Requirement: The CE or FE must authenticate the message as\
    \ having\n   come from an FE or CE on the list of the authorized ForCES elements\n\
    \   (provided by the CE or FE Manager in the pre-association phase)\n   before\
    \ accepting and processing it.\n"
- title: 8.1.3.  Replay Attack
  contents:
  - "8.1.3.  Replay Attack\n   Threat: A malicious node could replay the entire message\
    \ previously\n   sent by an FE or CE entity to get around authentication.\n  \
    \ Effect: The NE could be compromised.\n   Requirement: A replay protection mechanism\
    \ needs to be part of the\n   security solution to defend against this attack.\n"
- title: 8.1.4.  Attack during Fail Over
  contents:
  - "8.1.4.  Attack during Fail Over\n   Threat: A malicious node may exploit the\
    \ CE fail-over mechanism to\n   take over the control of NE.  For example, suppose\
    \ two CEs, say CE-A\n   and CE-B, are controlling several FEs.  CE-A is active\
    \ and CE-B is\n   stand-by.  When CE-A fails, CE-B is taking over the active CE\n\
    \   position.  The FEs already had a trusted relationship with CE-A, but\n   the\
    \ FEs may not have the same trusted relationship established with\n   CE-B prior\
    \ to the fail-over.  A malicious node can take over as CE-B\n   if such a trusted\
    \ relationship has not been established prior to or\n   during the fail-over.\n\
    \   Effect: The NE may be compromised after such insecure fail-over.\n   Requirement:\
    \ The level of trust between the stand-by CE and the FEs\n   must be as strong\
    \ as the one between the active CE and the FEs.  The\n   security association\
    \ between the FEs and the stand-by CE may be\n   established prior to fail-over.\
    \  If not already in place, such\n   security association must be re-established\
    \ before the stand-by CE\n   takes over.\n"
- title: 8.1.5.  Data Integrity
  contents:
  - "8.1.5.  Data Integrity\n   Threats: A malicious node may inject false messages\
    \ to a legitimate\n   CE or FE.\n   Effect: An FE or CE receives the fabricated\
    \ packet and performs an\n   incorrect or catastrophic operation.\n   Requirement:\
    \ Protocol messages require integrity protection.\n"
- title: 8.1.6.  Data Confidentiality
  contents:
  - "8.1.6.  Data Confidentiality\n   Threat: When FE and CE are physically separated,\
    \ a malicious node may\n   eavesdrop the messages in transit.  Some of the messages\
    \ are critical\n   to the functioning of the whole network, while others may contain\n\
    \   confidential business data.  Leaking of such information may result\n   in\
    \ compromise even beyond the immediate CE or FE.\n   Effect: Sensitive information\
    \ might be exposed between the CE and FE.\n   Requirement: Data confidentiality\
    \ between the FE and CE must be\n   available for sensitive information.\n"
- title: 8.1.7.  Sharing security parameters
  contents:
  - "8.1.7.  Sharing security parameters\n   Threat: Consider a scenario where several\
    \ FEs are communicating to\n   the same CE and sharing the same authentication\
    \ keys for the Fp\n   interface.  If any FE or CE is compromised, all other entities\
    \ are\n   compromised.\n   Effect: The whole NE is compromised.\n   Recommendation:\
    \ To avoid this side effect, it's better to configure\n   different security parameters\
    \ for each FE-CE communication over the\n   Fp interface.\n"
- title: 8.1.8.  Denial of Service Attack via External Interface
  contents:
  - "8.1.8.  Denial of Service Attack via External Interface\n   Threat: When an FE\
    \ receives a packet that is destined for its CE, the\n   FE forwards the packet\
    \ over the Fp interface.  A malicious node can\n   generate a huge message storm\
    \ like routing protocol packets etc.\n   through the external Fi/f interface so\
    \ that the FE has to process and\n   forward all packets to the CE through the\
    \ Fp interface.\n   Effect: The CE encounters resource exhaustion and bandwidth\n\
    \   starvation on Fp interface due to an overwhelming number of packets\n   from\
    \ FEs.\n   Requirement: Some sort of rate limiting mechanism MUST be in place\
    \ at\n   both the FE and CE.  The Rate Limiter SHOULD be configured at the FE\n\
    \   for each message type being received through the Fi/f interface.\n"
- title: 8.2.  Security Recommendations for ForCES
  contents:
  - "8.2.  Security Recommendations for ForCES\n   The requirements document [4] suggested\
    \ that the ForCES Protocol\n   should support reliability over the Fp interface,\
    \ but no particular\n   transport protocol is yet specified for ForCES.  This\
    \ framework\n   document does not intend to specify the particular transport either,\n\
    \   and so we only provide recommendations and guidelines based on the\n   existing\
    \ standard security protocols [18] that can work with the\n   common transport\
    \ candidates suitable for ForCES.\n   We review two existing security protocol\
    \ solutions, namely IPsec (IP\n   Security) [15] and TLS (Transport Layer Security)\
    \ [14].  TLS works\n   with reliable transports such as TCP or SCTP for unicast,\
    \ while IPsec\n   can be used with any transport (UDP, TCP, SCTP) and supports\
    \ both\n   unicast and multicast.  Both TLS and IPsec can be used potentially\
    \ to\n   satisfy all of the security requirements for the ForCES Protocol.  In\n\
    \   addition, other approaches that satisfy the requirements can be used\n   as\
    \ well, but are not documented here, including the use of L2\n   security mechanisms\
    \ for a given L2 interconnect technology.\n   When ForCES is deployed between\
    \ CEs and FEs inside a box or a\n   physically secured room, authentication, confidentiality,\
    \ and\n   integrity may be provided by the physical security of the box.  Thus,\n\
    \   the security mechanisms may be turned off, depending on the\n   networking\
    \ topology and its administration policy.  However, it is\n   important to realize\
    \ that even if the NE is in a single-box, the DoS\n   attacks as described in\
    \ Section 8.1.8 can still be launched through\n   the Fi/f interfaces.  Therefore,\
    \ it is important to have the\n   corresponding counter-measurement in place,\
    \ even for single-box\n   deployment.\n"
- title: 8.2.1.  Using TLS with ForCES
  contents:
  - "8.2.1.  Using TLS with ForCES\n   TLS [14] can be used if a reliable unicast\
    \ transport such as TCP or\n   SCTP is used for ForCES over the Fp interface.\
    \  The TLS handshake\n   protocol is used during the association establishment\
    \ or re-\n   establishment phase to negotiate a TLS session between the CE and\
    \ FE.\n   Once the session is in place, the TLS record protocol is used to\n \
    \  secure ForCES communication messages between the CE and FE.\n   A basic outline\
    \ of how TLS can be used with ForCES is described\n   below.  Steps 1) through\
    \ 7) complete the security handshake as\n   illustrated in Figure 9, while step\
    \ 8) is for all further\n   communication between the CE and FE, including the\
    \ rest of the\n   messages after the security handshake shown in Figure 9 and\
    \ the\n   steady-state communication shown in Figure 10.\n   1) During the Pre-association\
    \ phase, all FEs are configured with the\n      CEs (including both the active\
    \ CE and the standby CE).\n   2) The FE establishes a TLS connection with the\
    \ CE (master) and\n      negotiates a cipher suite.\n   3) The FE (slave) gets\
    \ the CE certificate, validates the signature,\n      checks the expiration date,\
    \ and checks whether the certificate has\n      been revoked.\n   4) The CE (master)\
    \ gets the FE certificate and performs the same\n      validation as the FE in\
    \ step 3).\n   5) If any of the checks fail in step 3) or step 4), the endpoint\
    \ must\n      generate an error message and abort.\n   6) After successful mutual\
    \ authentication, a TLS session is\n      established between the CE and FE.\n\
    \   7) The FE sends a \"join NE\" message to the CE.\n   8) The FE and CE use\
    \ the TLS session for further communication.\n   Note that there are different\
    \ ways for the CE and FE to validate a\n   received certificate.  One way is to\
    \ configure the FE Manager or CE\n   Manager or other central component as CA,\
    \ so that the CE or FE can\n   query this pre-configured CA to validate that the\
    \ certificate has not\n   been revoked.  Another way is to have the CE and FE\
    \ directly\n   configure a list of valid certificates in the pre-association phase.\n\
    \   In the case of fail-over, it is the responsibility of the active CE\n   and\
    \ the standby CE to synchronize ForCES states, including the TLS\n   states to\
    \ minimize the state re-establishment during fail-over.  Care\n   must be taken\
    \ to ensure that the standby CE is also authenticated in\n   the same way as the\
    \ active CE, either before or during the fail-over.\n"
- title: 8.2.2.  Using IPsec with ForCES
  contents:
  - "8.2.2.  Using IPsec with ForCES\n   IPsec [15] can be used with any transport\
    \ protocol, such as UDP,\n   SCTP, and TCP, over the Fp interface for ForCES.\
    \  When using IPsec,\n   we recommend using ESP in the transport mode for ForCES\
    \ because\n   message confidentiality is required for ForCES.\n   IPsec can be\
    \ used with both manual and automated SA and cryptographic\n   key management.\
    \  But IPsec's replay protection mechanisms are not\n   available if manual key\
    \ management is used.  Hence, automatic key\n   management is recommended if replay\
    \ protection is deemed important.\n   Otherwise, manual key management might be\
    \ sufficient for some\n   deployment scenarios, especially when the number of\
    \ CEs and FEs is\n   relatively small.  It is recommended that the keys be changed\n\
    \   periodically, even for manual key management.\n   IPsec can support both unicast\
    \ and multicast transport.  At the time\n   this document was published, the MSEC\
    \ working group was actively\n   working on standardizing protocols to provide\
    \ multicast security\n   [17].  Multicast-based solutions relying on IPsec should\
    \ specify how\n   to meet the security requirements in [4].\n   Unlike TLS, IPsec\
    \ provides security services between the CE and FE at\n   IP level, so the security\
    \ handshake, as illustrated in Figure 9\n   amounts to a \"no-op\" when manual\
    \ key management is used.  The\n   following outlines the steps taken for ForCES\
    \ in such a case.\n   1) During the Pre-association phase, all the FEs are configured\
    \ with\n      CEs (including the active CE and standby CE) and SA parameters\n\
    \      manually.\n   2) The FE sends a \"join NE\" message to the CE.  This message\
    \ and all\n      others that follow are afforded security service according to\
    \ the\n      manually configured IPsec SA parameters, but replay protection is\n\
    \      not available.\n   It is up to the administrator to decide whether to share\
    \ the same key\n   across multiple FE-CE communication, but it is recommended\
    \ that\n   different keys be used.  Similarly, it is recommended that different\n\
    \   keys be used for inbound and outbound traffic.\n   If automatic key management\
    \ is needed, IKE [16] can be used for that\n   purpose.  Other automatic key distribution\
    \ techniques, such as\n   Kerberos, may be used as well.  The key exchange process\
    \ constitutes\n   the security handshake as illustrated in Figure 9.  The following\n\
    \   shows the steps involved in using IKE with IPsec for ForCES.  Steps\n   1)\
    \ to 6) constitute the security handshake in Figure 9.\n   1) During the Pre-association\
    \ phase, all FEs are configured with the\n      CEs (including active CE and standby\
    \ CE), IPsec policy etc.\n   2) The FE kicks off the IKE process and tries to\
    \ establish an IPsec\n      SA with the CE (master).  The FE (Slave) gets the\
    \ CE certificate\n      as part of the IKE negotiation.  The FE validates the\
    \ signature,\n      checks the expiration date, and checks whether the certificate\
    \ has\n      been revoked.\n   3) The CE (master) gets the FE certificate and\
    \ performs the same\n      check as the FE in step 2).\n   4) If any of the checks\
    \ fail in step 2) or step 3), the endpoint must\n      generate an error message\
    \ and abort.\n   5) After successful mutual authentication, the IPsec session\
    \ is\n      established between the CE and FE.\n   6) The FE sends a \"join NE\"\
    \ message to the CE.  No SADB entry is\n      created in FE yet.\n   7) The FE\
    \ and CE use the IPsec session for further communication.\n   The FE Manager,\
    \ CE Manager, or other central component can be used as\n   a CA for validating\
    \ CE and FE certificates during the IKE process.\n   Alternatively, during the\
    \ pre-association phase, the CE and FE can be\n   configured directly with the\
    \ required information, such as\n   certificates or passwords etc., depending\
    \ upon the type of\n   authentication that administrator wants to configure.\n\
    \   In the case of fail-over, it is the responsibility of the active CE\n   and\
    \ standby CE to synchronize ForCES states and IPsec states to\n   minimize the\
    \ state re-establishment during fail-over.  Alternatively,\n   the FE needs to\
    \ establish a different IPsec SA during the startup\n   operation itself with\
    \ each CE.  This will minimize the periodic state\n   transfer across the IPsec\
    \ layer though the Fr (CE-CE) Interface.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [1]  Bradner, S., \"Key words for use in RFCs\
    \ to Indicate Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n \
    \  [2]  Baker, F., Ed., \"Requirements for IP Version 4 Routers\", RFC\n     \
    \   1812, June 1995.\n   [3]  Floyd, S., \"Congestion Control Principles\", BCP\
    \ 41, RFC 2914,\n        September 2000.\n   [4]  Khosravi, H. and Anderson, T.,\
    \ Eds., \"Requirements for\n        Separation of IP Control and Forwarding\"\
    , RFC 3654, November\n        2003.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [5]  Case, J., Mundy, R., Partain, D. and B.\
    \ Stewart, \"Introduction\n        and Applicability Statements for Internet Standard\
    \ Management\n        Framework\", RFC 3410, December 2002.\n   [6]  Daniele,\
    \ M., Wijnen, B., Ellison, M. and D. Francisco, \"Agent\n        Extensibility\
    \ (AgentX) Protocol Version 1\", RFC 2741, January\n        2000.\n   [7]  Chan,\
    \ K., Seligson, J., Durham, D., Gai, S., McCloghrie, K.,\n        Herzog, S.,\
    \ Reichmeyer, F., Yavatkar, R. and A. Smith, \"COPS\n        Usage for Policy\
    \ Provisioning (COPS-PR)\", RFC 3084, March 2001.\n   [8]  Crouch, A. et al.,\
    \ \"ForCES Applicability Statement\", Work in\n        Progress.\n   [9]  Anderson,\
    \ T. and J. Buerkle, \"Requirements for the Dynamic\n        Partitioning of Switching\
    \ Elements\", RFC 3532, May 2003.\n   [10] Leelanivas, M., Rekhter, Y. and R.\
    \ Aggarwal, \"Graceful Restart\n        Mechanism for Label Distribution Protocol\"\
    , RFC 3478, February\n        2003.\n   [11] Moy, J., Pillay-Esnault, P. and A.\
    \ Lindem, \"Graceful OSPF\n        Restart\", RFC 3623, November 2003.\n   [12]\
    \ Sangli, S. et al., \"Graceful Restart Mechanism for BGP\", Work in\n       \
    \ Progress.\n   [13] Shand, M. and L. Ginsberg, \"Restart Signaling for IS-IS\"\
    , Work\n        in Progress.\n   [14] Dierks, T. and C. Allen, \"The TLS Protocol\
    \ Version 1.0\", RFC\n        2246, January 1999.\n   [15] Kent, S. and R. Atkinson,\
    \ \"Security Architecture for the\n        Internet Protocol\", RFC 2401, November\
    \ 1998.\n   [16] Harkins, D. and D. Carrel, \"The Internet Key Exchange (IKE)\"\
    ,\n        RFC 2409, November 1998.\n   [17] Hardjono, T. and Weis, B. \"The Multicast\
    \ Group Security\n        Architecture\", RFC 3740, March 2004.\n   [18] Bellovin,\
    \ S., Schiller, J. and C. Kaufman, Eds., \"Security\n        Mechanisms for the\
    \ Internet\", RFC 3631, December 2003.\n"
- title: 10.  Authors' Addresses
  contents:
  - "10.  Authors' Addresses\n   L. Lily Yang\n   Intel Corp., MS JF3-206,\n   2111\
    \ NE 25th Avenue\n   Hillsboro, OR 97124, USA\n   Phone: +1 503 264 8813\n   EMail:\
    \ lily.l.yang@intel.com\n   Ram Dantu\n   Department of Computer Science,\n  \
    \ University of North Texas,\n   Denton, TX 76203, USA\n   Phone: +1 940 565 2822\n\
    \   EMail: rdantu@unt.edu\n   Todd A. Anderson\n   Intel Corp.\n   2111 NE 25th\
    \ Avenue\n   Hillsboro, OR 97124, USA\n   Phone: +1 503 712 1760\n   EMail: todd.a.anderson@intel.com\n\
    \   Ram Gopal\n   Nokia Research Center\n   5, Wayside Road,\n   Burlington, MA\
    \ 01803, USA\n   Phone: +1 781 993 3685\n   EMail: ram.gopal@nokia.com\n"
- title: 11.  Full Copyright Statement
  contents:
  - "11.  Full Copyright Statement\n   Copyright (C) The Internet Society (2004).\
    \  This document is subject\n   to the rights, licenses and restrictions contained\
    \ in BCP 78, and\n   except as set forth therein, the authors retain all their\
    \ rights.\n   This document and the information contained herein are provided\
    \ on an\n   \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE\n   REPRESENTS\
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE\n   INTERNET ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed\n   to pertain to the implementation or use of the technology\n   described\
    \ in this document or the extent to which any license\n   under such rights might\
    \ or might not be available; nor does it\n   represent that it has made any independent\
    \ effort to identify any\n   such rights.  Information on the procedures with\
    \ respect to\n   rights in RFC documents can be found in BCP 78 and BCP 79.\n\
    \   Copies of IPR disclosures made to the IETF Secretariat and any\n   assurances\
    \ of licenses to be made available, or the result of an\n   attempt made to obtain\
    \ a general license or permission for the use\n   of such proprietary rights by\
    \ implementers or users of this\n   specification can be obtained from the IETF\
    \ on-line IPR repository\n   at http://www.ietf.org/ipr.\n   The IETF invites\
    \ any interested party to bring to its attention\n   any copyrights, patents or\
    \ patent applications, or other\n   proprietary rights that may cover technology\
    \ that may be required\n   to implement this standard.  Please address the information\
    \ to the\n   IETF at ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
