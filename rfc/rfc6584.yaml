- contents:
  - ''
  title: __initial_text__
- contents:
  - "Simple Authentication Schemes for the Asynchronous Layered Coding (ALC)\n         and
    NACK-Oriented Reliable Multicast (NORM) Protocols\n"
  title: Simple Authentication Schemes for the Asynchronous Layered Coding (ALC)
- contents:
  - "Abstract\n   This document introduces four schemes that provide per-packet\n
    \  authentication, integrity, and anti-replay services in the context of\n   the
    Asynchronous Layered Coding (ALC) and NACK-Oriented Reliable\n   Multicast (NORM)
    protocols.  The first scheme is based on RSA Digital\n   Signatures.  The second
    scheme relies on the Elliptic Curve Digital\n   Signature Algorithm (ECDSA).  The
    third scheme relies on a Group-\n   keyed Message Authentication Code (MAC).  Finally,
    the fourth scheme\n   merges the Digital Signature and group schemes.  These schemes
    have\n   different target use cases, and they do not all provide the same\n   service.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6584.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n
    \     1.1. Scope of This Document .....................................6\n      1.2.
    Terminology, Notations, and Definitions ....................6\n   2. Authentication
    Scheme Identification with the ASID Field ........7\n   3. RSA Digital Signature
    Scheme ....................................8\n      3.1. Authentication Header
    Extension Format .....................8\n      3.2. Parameters ................................................10\n
    \     3.3. Processing ................................................11\n           3.3.1.
    Signature Processing ...............................11\n           3.3.2. Anti-Replay
    Processing .............................12\n      3.4. In Practice ...............................................13\n
    \  4. Elliptic Curve Digital Signature Scheme ........................14\n      4.1.
    Authentication Header Extension Format ....................14\n      4.2. Parameters
    ................................................15\n      4.3. Processing ................................................15\n
    \          4.3.1. Signature Processing ...............................15\n           4.3.2.
    Anti-Replay Processing .............................16\n      4.4. In Practice
    ...............................................16\n   5. Group-Keyed Message Authentication
    Code (MAC) Scheme ...........17\n      5.1. Authentication Header Extension Format
    ....................17\n      5.2. Parameters ................................................19\n
    \     5.3. Processing ................................................20\n           5.3.1.
    Signature Processing ...............................20\n           5.3.2. Anti-Replay
    Processing .............................20\n      5.4. In Practice ...............................................20\n
    \  6. Combined Use of the RSA/ECC Digital Signatures and\n      Group-Keyed MAC
    Schemes ........................................21\n      6.1. Authentication
    Header Extension Format ....................21\n      6.2. Parameters ................................................23\n
    \     6.3. Processing ................................................23\n           6.3.1.
    Signature Processing ...............................23\n           6.3.2. Anti-Replay
    Processing .............................24\n      6.4. In Practice ...............................................24\n
    \  7. Security Considerations ........................................25\n      7.1.
    Dealing with DoS Attacks ..................................25\n      7.2. Dealing
    with Replay Attacks ...............................26\n           7.2.1. Impacts
    of Replay Attacks on the Simple\n                  Authentication Schemes .............................26\n
    \          7.2.2. Impacts of Replay Attacks on NORM ..................26\n           7.2.3.
    Impacts of Replay Attacks on ALC ...................27\n      7.3. Dealing with
    Attacks on the Parameters Sent Out-of-Band ...28\n   8. Acknowledgments ................................................28\n
    \  9. References .....................................................28\n      9.1.
    Normative References ......................................28\n      9.2. Informative
    References ....................................29\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Many applications using multicast and broadcast communications\n
    \  require that each receiver be able to authenticate the source of any\n   packet
    it receives, to check its integrity.  For instance, ALC\n   [RFC5775] and NORM
    [RFC5740] are two Content Delivery Protocols\n   (CDPs) designed to reliably transfer
    objects (e.g., files) between a\n   session's sender and several receivers.\n
    \  The NORM protocol is based on bidirectional transmissions.  With\n   NORM,
    each receiver acknowledges data received or, in the case of\n   packet erasures,
    asks for retransmissions.  On the contrary, the ALC\n   protocol defines unidirectional
    transmissions.  With ALC, reliability\n   can be achieved by means of cyclic transmissions
    of the content\n   within a carousel, or by the use of proactive Forward Error\n
    \  Correction (FEC) codes, or by the joint use of these mechanisms.\n   Being
    purely unidirectional, ALC is massively scalable, while NORM is\n   intrinsically
    limited in terms of the number of receivers that can be\n   handled in a session.
    \ Both protocols have in common the fact that\n   they operate at the application
    level, on top of an erasure channel\n   (e.g., the Internet) where packets can
    be lost (erased) during the\n   transmission.\n   With these CDPs, an attacker
    might impersonate the ALC or NORM\n   session sender and inject forged packets
    to the receivers, thereby\n   corrupting the objects reconstructed by the receivers.
    \ An attacker\n   might also impersonate a NORM session receiver and inject forged\n
    \  feedback packets to the NORM sender.\n   In the case of group communications,
    several solutions exist to\n   provide the receiver some guaranties on the integrity
    of the packets\n   it receives and on the identity of the sender of these packets.\n
    \  These solutions have different features that make them more or less\n   suited
    to a given use case:\n   o  Digital Signatures [RFC4359] (see Sections 3 and 4
    of this\n      document): This scheme is well suited to low data rate flows, when\n
    \     a packet sender authentication and packet integrity service is\n      needed.
    \ However, Digital Signatures based on RSA asymmetric\n      cryptography are
    limited by high computational costs and high\n      transmission overheads.  The
    use of ECC (Elliptic Curve\n      Cryptography) [RFC6090] significantly relaxes
    these constraints.\n      For instance, the following key lengths provide equivalent\n
    \     security: a 1024-bit RSA key versus a 160-bit ECC key, or a\n      2048-bit
    RSA key versus a 224-bit ECC key.  However, RSA puts more\n      load on the signer
    but much less load on the verifier, whereas ECC\n      puts more similar load
    on both; hence, with many verifiers, more\n      CPU is consumed overall.\n   o
    \ Group-keyed Message Authentication Codes (MACs) (see Section 5):\n      This
    scheme is well suited to high data rate flows, when\n      transmission overheads
    must be minimized.  However, this scheme\n      cannot protect against attacks
    coming from inside the group, where\n      a group member impersonates the sender
    and sends forged messages\n      to other receivers.\n   o  TESLA (Timed Efficient
    Stream Loss-tolerant Authentication)\n      [RFC4082] [RFC5776]: This scheme is
    well suited to high data rate\n      flows, when transmission overheads must be
    minimized, and when a\n      packet sender authentication and packet integrity
    service is\n      needed.  The price is an increased complexity -- in particular,\n
    \     the need to loosely synchronize the receivers and the sender -- as\n      well
    as the need to wait for the key to be disclosed before being\n      able to authenticate
    a packet (i.e., the authentication check is\n      delayed).\n   The following
    table summarizes the pros and cons of each\n   authentication/integrity scheme
    used at the application/transport\n   level (where \"-\" means con, \"0\" means
    neutral, and \"+\" means pro):\n   +-----------------+-------------+-------------+-------------+-------+\n
    \  |                 | RSA Digital | ECC Digital | Group-Keyed | TESLA |\n   |
    \                |  Signature  |  Signature  |     MAC     |       |\n   +-----------------+-------------+-------------+-------------+-------+\n
    \  | Sender auth and |     Yes     |     Yes     |  No (group  |  Yes  |\n   |
    packet          |             |             |  security)  |       |\n   | integrity
    \      |             |             |             |       |\n   | Non-delayed     |
    \    Yes     |     Yes     |     Yes     |   No  |\n   | authentication  |             |
    \            |             |       |\n   | Anti-replay     |     Opt     |     Opt
    \    |     Opt     |   No  |\n   | protection      |             |             |
    \            |       |\n   | Processing load |      -      |  sender: -, |      +
    \     |   +   |\n   |                 |             |   recv: 0   |             |
    \      |\n   | Transmission    |      -      |      0      |      +      |   +
    \  |\n   | overhead        |             |             |             |       |\n
    \  | Complexity      |      +      |      +      |      +      |   -   |\n   +-----------------+-------------+-------------+-------------+-------+\n
    \  Several authentication schemes MAY be used in the same ALC or NORM\n   session,
    even on the same communication path.  This is made possible\n   through a dedicated
    identifier, the \"ASID\" (Authentication Scheme\n   IDentifier), that is present
    in each HET=1 (EXT_AUTH) header\n   extension and that tells a receiver how to
    interpret this HET=1\n   header extension.  This is discussed in Section 2.\n
    \  All the applications built on top of ALC and NORM directly benefit\n   from
    the source authentication and packet integrity services defined\n   in this document.
    \ For instance, this is the case of the File\n   Delivery over Unidirectional
    Transport (FLUTE) application\n   [RMT-FLUTE], which is built on top of ALC.\n
    \  The current specification assumes that several parameters (like\n   keying
    material) are communicated out-of-band, sometimes securely,\n   between the sender
    and the receivers.  This is detailed in\n   Sections 3.2, 4.2, 5.2, and 6.2.\n"
  - contents:
    - "1.1.  Scope of This Document\n   [RFC5776] explains how to use TESLA in the
      context of the ALC and\n   NORM protocols.\n   The current document specifies
      the use of the Digital Signature based\n   on RSA asymmetric cryptography, the
      Elliptic Curve Digital Signature\n   Algorithm (ECDSA), and Group-keyed MAC
      schemes.  The current document\n   also specifies the joint use of Digital Signature
      and Group-keyed MAC\n   schemes.\n   Unlike the TESLA scheme, this specification
      considers the\n   authentication/integrity of the packets generated by the session's\n
      \  sender as well as those generated by the receivers (NORM).\n"
    title: 1.1.  Scope of This Document
  - contents:
    - "1.2.  Terminology, Notations, and Definitions\n   The key words \"MUST\", \"MUST
      NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
      \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted
      as described in [RFC2119].\n   The following notations and definitions are used
      throughout this\n   document:\n   o  MAC is the Message Authentication Code;\n
      \  o  HMAC is the Keyed-Hash Message Authentication Code;\n   o  \"sender\"
      denotes the sender of a packet that needs the\n      authentication/integrity
      check service.  It can be an ALC or NORM\n      session sender, or a NORM session
      receiver in the case of feedback\n      traffic;\n   o  \"receiver\" denotes
      the receiver of a packet that needs the\n      authentication/integrity check
      service.  It can be an ALC or NORM\n      session receiver, or a NORM session
      sender in the case of feedback\n      traffic;\n   o  \"ASID\" is the Authentication
      Scheme IDentifier.\n   Key definitions for Digital Signatures are as follows:\n
      \  o  The public key is used by a receiver to check a packet's\n      signature.
      \ This key MUST be communicated to all receivers before\n      starting the
      session;\n   o  The private key is used by a sender to generate a packet's\n
      \     signature;\n   o  The private key and public key length are expressed
      in bits.  For\n      security considerations [RFC5751], when using RSA, RSASSA-PSS,
      and\n      Digital Signature Algorithm (DSA) signatures, key sizes of length\n
      \     strictly inferior to 1024 bits SHOULD NOT be used.  Key sizes of\n      length
      between 1024 and 2048 bits inclusive SHOULD be used.  Key\n      sizes of length
      strictly superior to 2048 bits MAY be used.\n   Key definitions for Group-keyed
      MAC are as follows:\n   o  The shared group key is used by the senders and the
      receivers.\n      This key MUST be communicated to all group members,\n      confidentially,
      before starting the session;\n   o  The group key length is expressed in bits;\n
      \  o  n_m is the length of the truncated output of the MAC [RFC2104].\n      Only
      the n_m leftmost bits (most significant bits) of the MAC\n      output are kept.\n"
    title: 1.2.  Terminology, Notations, and Definitions
  title: 1.  Introduction
- contents:
  - "2.  Authentication Scheme Identification with the ASID Field\n   As mentioned
    in Section 1, several authentication schemes MAY be used\n   in the same ALC or
    NORM session, even on the same communication path\n   (i.e., from a sender to
    a receiver, or vice versa).  All the schemes\n   mentioned in Section 1 (some
    of which are specified in this document)\n   use the same HET=1 (EXT_AUTH) Authentication
    Header extension\n   mechanism defined in [RFC5651].  Therefore, the same 4-bit
    ASID field\n   has been reserved in all the specifications (see Sections 3.1,
    4.1,\n   5.1, and 6.1, as well as Section 5.1 of [RFC5776]).  For a given ALC\n
    \  or NORM session, the ASID value contained in an incoming packet\n   enables
    a receiver to differentiate the actual use and format of the\n   contents of the
    HET=1 (EXT_AUTH) header extension.\n   The association between the ASID value
    and the actual authentication\n   scheme of a given ALC or NORM session is defined
    at session startup\n   and communicated to all the session members by an out-of-band\n
    \  mechanism.  This association is per ALC or NORM session, and\n   different
    sessions MAY reuse the same ASID values for different\n   authentication schemes.\n
    \  With ALC, the ASID value is scoped by the {sender IP address;\n   Transport
    Session Identifier (TSI)} tuple [RFC5651] that fully\n   identifies an ALC session.
    \ Since [RFC5651] requires that \"the TSI\n   MUST be unique among all sessions
    served by the sender during the\n   period when the session is active, and for
    a large period of time\n   preceding and following when the session is active\",
    there is no risk\n   of confusion between different sessions.  This is in line
    with\n   Section 7.2.3.\n   With NORM, there is no session identifier within NORM
    packets.\n   Therefore, depending on whether an Any Source Multicast (ASM) or\n
    \  Source Specific Multicast (SSM) group communication is used, the ASID\n   value
    is scoped either by the {destination multicast address;\n   destination port number}
    or {source IP address; destination multicast\n   address; destination port number}
    tuple that fully identifies a NORM\n   session [RFC5740].  Care should be taken
    that the above tuples remain\n   unique, within a given scope and for a sufficient
    period of time\n   preceding, during, and following when the session is active,
    to avoid\n   confusion between different sessions.  However, this is a\n   recommendation
    for NORM sessions, rather than something specific to\n   an authentication scheme.
    \ Note also that the ASID value is not\n   scoped by the {source_id; instance_id}
    tuple, which uniquely\n   identifies a host's participation in a NORM session,
    rather than the\n   session itself (Section 7.2.2).\n   In any case, because this
    ASID field is 4 bits long, there is a\n   maximum of 16 authentication schemes
    per ALC or NORM session.\n"
  title: 2.  Authentication Scheme Identification with the ASID Field
- contents:
  - '3.  RSA Digital Signature Scheme

    '
  - contents:
    - "3.1.  Authentication Header Extension Format\n   The integration of Digital
      Signatures is similar in ALC and NORM and\n   relies on the header extension
      mechanism defined in both protocols.\n   More precisely, this document details
      the HET=1 (EXT_AUTH) header\n   extension defined in [RFC5651].\n   Several
      fields are added, in addition to the HET (Header Extension\n   Type) and HEL
      (Header Extension Length) fields (Figure 1).\n    0                   1                   2
      \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |   HET (=1)    |      HEL      |  ASID | rsvd|A|               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+R+
      \              +\n   ~                  anti-replay Sequence Number (SN)             ~\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                                                               |\n
      \  ~                                                               ~\n   |                           Signature
      \                          |\n   +                                               +-+-+-+-+-+-+-+-+\n
      \  |                                               |    Padding    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   Figure 1: Format of the Digital Signature EXT_AUTH Header Extension\n   The
      fields of the Digital Signature EXT_AUTH header extension are as\n   follows:\n
      \  ASID (4 bits):\n      The ASID identifies the source authentication scheme
      or protocol\n      in use.  The association between the ASID value and the actual\n
      \     authentication scheme is defined out-of-band, at session startup.\n   rsvd
      (Reserved) (3 bits):\n      This is a reserved field that MUST be set to zero
      and ignored by\n      receivers.\n   AR (anti-replay) (1 bit):\n      The AR
      field, when set to 0, indicates that the anti-replay\n      service is not used.
      \ When set to 1, it indicates that the\n      anti-replay service is used.\n
      \  SN (Sequence Number) (8 or 40 bits):\n      The SN field contains an optional
      Sequence Number.  When AR = 0,\n      this is an 8-bit field that MUST be set
      to zero.  No anti-replay\n      mechanism is used in that case.  When AR = 1,
      this is a 40-bit\n      field (32 bits + 8 bits), and all of the 40 bits MUST
      be\n      considered by the anti-replay mechanism.\n   Signature (variable size,
      multiple of 32 bits):\n      The Signature field contains a Digital Signature
      of the message.\n      If need be, this field is padded (with 0) up to a multiple
      of\n      32 bits.\n"
    title: 3.1.  Authentication Header Extension Format
  - contents:
    - "3.2.  Parameters\n   Several parameters MUST be initialized by an out-of-band
      mechanism.\n   The sender or group controller\n   o  MUST communicate its public
      key, for each receiver to be able to\n      verify the signature of the packets
      received.  For security\n      reasons [RFC5751], the use of key sizes between
      1024 and 2048 bits\n      inclusive is RECOMMENDED.  Key sizes inferior to 1024
      bits SHOULD\n      NOT be used.  Key sizes above 2048 bits MAY be used.  As
      a side\n      effect, the receivers also know the key length and the signature\n
      \     length, the two parameters being equal;\n   o  MAY communicate a certificate
      (which also means that a PKI has\n      been set up), for each receiver to be
      able to check the sender's\n      public key;\n   o  MUST communicate the signature-encoding
      algorithm.  For instance,\n      [RFC3447] defines the RSASSA-PKCS1-v1_5 and
      RSASSA-PSS algorithms\n      that are usually used for that purpose;\n   o  MUST
      communicate the One-way Hash Function -- for instance, SHA-1,\n      SHA-224,
      SHA-256, SHA-384, or SHA-512.  Because of security\n      threats on SHA-1,
      the use of SHA-256 is RECOMMENDED [RFC6194];\n   o  MUST associate a value to
      the ASID field of the EXT_AUTH header\n      extension (Section 3.1);\n   o
      \ MUST communicate whether or not the anti-replay service is used\n      for
      this session.\n   These parameters MUST be communicated to all receivers before
      they\n   can authenticate the incoming packets.  For instance, it can be\n   communicated
      in the session description, or initialized in a static\n   way on the receivers,
      or communicated by means of an appropriate\n   protocol.  The details of this
      out-of-band mechanism are beyond the\n   scope of this document.\n"
    title: 3.2.  Parameters
  - contents:
    - '3.3.  Processing

      '
    - contents:
      - "3.3.1.  Signature Processing\n   The computation of the Digital Signature,
        using the private key, MUST\n   include the ALC or NORM header (with the various
        header extensions)\n   and the payload when applicable.  The UDP/IP/MAC headers
        MUST NOT be\n   included.  During this computation, the Signature field MUST
        be set\n   to 0.\n   Several signature-encoding algorithms can be used, including\n
        \  RSASSA-PKCS1-v1_5 and RSASSA-PSS.  With these encodings, several\n   one-way
        hash functions can be used, like SHA-256.\n   First, let us consider a packet
        sender.  More specifically, as noted\n   in [RFC4359], Digital Signature generation
        is performed as described\n   in Section 8.2.1 of [RFC3447] (RSASSA-PKCS1-v1_5)
        and in\n   Section 8.1.1 of [RFC3447] (RSASSA-PSS).  The authenticated portion\n
        \  of the packet is used as the message M, which is passed to the\n   signature
        generation function.  The signer's RSA private key is\n   passed as K.  In
        summary (when SHA-256 is used), the signature\n   generation process computes
        a SHA-256 hash of the authenticated\n   packet bytes, signs the SHA-256 hash
        using the private key, and\n   encodes the result with the specified RSA encoding
        type.  This\n   process results in a value S, which is the Digital Signature
        to be\n   included in the packet.\n   With RSASSA-PKCS1-v1_5 and RSASSA-PSS
        signatures, the size of the\n   signature is equal to the \"RSA modulus\",
        unless the RSA modulus is\n   not a multiple of 8 bits.  In that case, the
        Digital Signature (also\n   called the Integrity Check Value (ICV) in [RFC4359])
        MUST be\n   prepended with between 1 and 7 bits set to zero such that the
        Digital\n   Signature is a multiple of 8 bits [RFC4359].  The key length,
        which\n   in practice is also equal to the RSA modulus, has major security\n
        \  implications.  [RFC4359] explains how to choose this value, depending\n
        \  on the maximum expected lifetime of the session.  This choice is\n   beyond
        the scope of this document.\n   Now, let us consider a receiver.  As noted
        in [RFC4359], Digital\n   Signature verification is performed as described
        in Section 8.2.2 of\n   [RFC3447] (RSASSA-PKCS1-v1_5) and Section 8.1.2 of
        [RFC3447]\n   (RSASSA-PSS).  Upon receipt, the Digital Signature is passed
        to the\n   verification function as S.  The authenticated portion of the packet\n
        \  is used as the message M, and the RSA public key is passed as (n, e).\n
        \  In summary (when SHA-256 is used), the verification function computes\n
        \  a SHA-256 hash of the authenticated packet bytes, decrypts the\n   SHA-256
        hash in the packet using the sender's public key, and\n   validates that the
        appropriate encoding was applied.  The two SHA-256\n   hashes are compared,
        and if they are identical, the validation is\n   successful.\n"
      title: 3.3.1.  Signature Processing
    - contents:
      - "3.3.2.  Anti-Replay Processing\n   Let us assume the anti-replay service
        is used.  The principles are\n   similar to the Sequence Number mechanism
        described in [RFC4303], with\n   the exception that the present document uses
        a 40-bit field that\n   contains all the bits of the Sequence Number counter.\n
        \  At the sender, the mechanism works as follows (Section 2.2 of\n   [RFC4303]).
        \ The sender's Sequence Number counter is initialized to 0\n   at session
        startup.  The sender increments the Sequence Number\n   counter for this session
        and inserts the value into the SN field.\n   Thus, the first packet sent will
        contain an SN of 1.  The SN value of\n   the Authentication Header extension
        MUST be initialized before the\n   signature generation process, in order
        to enable a receiver to check\n   the SN value during the integrity verification
        process.\n   The sender SHOULD ensure that the counter does not cycle before\n
        \  inserting the new value in the SN field.  Failing to follow this rule\n
        \  would enable an attacker to replay a packet sent during the previous\n
        \  cycle; i.e., it would limit the anti-replay service to a single SN\n   cycle.
        \ Since the Sequence Number is contained in a 40-bit field, it\n   is expected
        that cycling will never happen in most situations.  For\n   instance, on a
        10-Gbps network, with small packets (i.e., 64 bytes\n   long), cycling will
        happen after slightly more than 15 hours.\n   At the receiver, the mechanism
        works as follows (Section 3.4.3 and\n   Appendix A2 of [RFC4303]).  For each
        received packet, the receiver\n   MUST verify that the packet contains a Sequence
        Number that does not\n   duplicate the Sequence Number of any other packets
        received during\n   the session.  If this preliminary check fails, the packet
        is\n   discarded, thus avoiding the need for any cryptographic operations
        by\n   the receiver.  If the preliminary check is successful, the receiver\n
        \  cannot yet modify its local counter, because the integrity of the\n   Sequence
        Number has not been verified at this point.\n   Duplicates are rejected through
        the use of a sliding receive window.\n   The \"right\" edge of the window
        represents the highest, validated\n   Sequence Number value received on this
        session.  Packets that contain\n   Sequence Numbers lower than the \"left\"
        edge of the window are\n   rejected.  Packets falling within the window are
        checked against a\n   list of received packets within the window (how this
        list is managed\n   is a local, implementation-based decision).  This window
        limits how\n   far out of order a packet can be, relative to the packet with
        the\n   highest Sequence Number that has been authenticated so far.\n   If
        the received packet falls within the window and is not a\n   duplicate, or
        if the packet is to the right of the window, then the\n   receiver proceeds
        to integrity verification.  If the integrity check\n   fails, the receiver
        MUST discard the received packet as invalid;\n   otherwise, the receive window
        is updated and packet processing\n   continues.\n"
      title: 3.3.2.  Anti-Replay Processing
    title: 3.3.  Processing
  - contents:
    - "3.4.  In Practice\n   Each packet sent MUST contain exactly one Digital Signature
      EXT_AUTH\n   header extension.  A receiver MUST drop all the packets that do
      not\n   contain a Digital Signature EXT_AUTH header extension.\n   All receivers
      MUST recognize EXT_AUTH but might not be able to parse\n   its content, for
      instance, because they do not support Digital\n   Signatures.  In that case,
      the Digital Signature EXT_AUTH header\n   extension is ignored.\n   If the anti-replay
      mechanism is used, each packet sent MUST contain a\n   valid Sequence Number.
      \ All the packets that fail to contain a valid\n   Sequence Number MUST be immediately
      dropped.\n   For instance, Figure 2 shows the Digital Signature EXT_AUTH header\n
      \  extension when using 128-byte (1024-bit) key Digital Signatures\n   (which
      also means that the Signature field is 128 bytes long).  The\n   Digital Signature
      EXT_AUTH header extension is then 132 bytes long.\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |   HET (=1)    |   HEL (=33)   |  ASID |  0  |0|      0        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      ---\n   |                                                               | ^
      1\n   +                                                               + | 2\n
      \  |                                                               | | 8\n   .
      \                                                              . |\n   .                      Signature
      (128 bytes)                    . | b\n   .                                                               .
      | y\n   |                                                               | |
      t\n   +                                                               + | e\n
      \  |                                                               | v s\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      ---\n        Figure 2: Example: Format of the Digital Signature EXT_AUTH\n                Header
      Extension Using 1024-Bit Signatures,\n                    without Any Anti-Replay
      Protection\n"
    title: 3.4.  In Practice
  title: 3.  RSA Digital Signature Scheme
- contents:
  - "4.  Elliptic Curve Digital Signature Scheme\n   This document focuses on the
    Elliptic Curve Digital Signature\n   Algorithm (ECDSA).  However, [RFC6090] describes
    alternative elliptic\n   curve techniques, like KT-I signatures.  The use of such
    alternatives\n   is not considered in this document, but may be added in the future.\n"
  - contents:
    - "4.1.  Authentication Header Extension Format\n   The integration of ECC Digital
      Signatures is similar to that of RSA\n   Digital Signatures.  Several fields
      are added, in addition to the HET\n   and HEL fields, as illustrated in Figure
      1.\n   The fields of the Digital Signature EXT_AUTH header extension are as\n
      \  follows:\n   ASID (4 bits):\n      The ASID identifies the source authentication
      scheme or protocol\n      in use.  The association between the ASID value and
      the actual\n      authentication scheme is defined out-of-band, at session startup.\n
      \  rsvd (3 bits):\n      This is a reserved field that MUST be set to zero and
      ignored by\n      receivers.\n   AR (1 bit):\n      The AR field, when set to
      0, indicates that the anti-replay\n      service is not used.  When set to 1,
      it indicates that the\n      anti-replay service is used.\n   SN (8 or 40 bits):\n
      \     The SN field contains an optional Sequence Number.  When AR = 0,\n      this
      is an 8-bit field that MUST be set to zero.  No anti-replay\n      mechanism
      is used in that case.  When AR = 1, this is a 40-bit\n      field (32 bits +
      8 bits), and all of the 40 bits MUST be\n      considered by the anti-replay
      mechanism.\n   Signature (variable size, multiple of 32 bits):\n      The Signature
      field contains a Digital Signature of the message.\n      If need be, this field
      is padded (with 0) up to a multiple of\n      32 bits.\n"
    title: 4.1.  Authentication Header Extension Format
  - contents:
    - "4.2.  Parameters\n   Several parameters MUST be initialized by an out-of-band
      mechanism.\n   The sender or group controller\n   o  MUST communicate its public
      key, for each receiver to be able to\n      verify the signature of the packets
      received.  As a side effect,\n      the receivers also know the key length and
      the signature length,\n      the two parameters being equal;\n   o  MAY communicate
      a certificate (which also means that a PKI has\n      been set up), for each
      receiver to be able to check the sender's\n      public key;\n   o  MUST communicate
      the message digest algorithm;\n   o  MUST communicate the elliptic curve;\n
      \  o  MUST associate a value to the ASID field of the EXT_AUTH header\n      extension
      (Section 3.1);\n   o  MUST communicate whether or not the anti-replay service
      is used\n      for this session.\n   These parameters MUST be communicated to
      all receivers before they\n   can authenticate the incoming packets.  For instance,
      it can be\n   communicated in the session description, or initialized in a static\n
      \  way on the receivers, or communicated by means of an appropriate\n   protocol.
      \ The details of this out-of-band mechanism are beyond the\n   scope of this
      document.\n"
    title: 4.2.  Parameters
  - contents:
    - '4.3.  Processing

      '
    - contents:
      - "4.3.1.  Signature Processing\n   The computation of the ECC Digital Signature,
        using the private key,\n   MUST include the ALC or NORM header (with the various
        header\n   extensions) and the payload when applicable.  The UDP/IP/MAC headers\n
        \  MUST NOT be included.  During this computation, the Signature field\n   MUST
        be set to 0.\n   Several elliptic curve groups can be used, as well as several
        hash\n   algorithms.  In practice, both choices are related, and there is
        a\n   minimum hash algorithm size for any key length.  Using a larger hash\n
        \  algorithm and then truncating the output is also feasible; however,\n   it
        consumes more processing power than is necessary.  In order to\n   promote
        interoperability, [RFC4754] and [RFC5480] list several\n   possible choices
        (see table below).\n   +---------------------------+--------+------------------+-----------+\n
        \  |     Digital Signature     |   Key  |  Message Digest  |  Elliptic |\n
        \  |  Algorithm Name [RFC4754] |  Size  |     Algorithm    |   Curve   |\n
        \  +---------------------------+--------+------------------+-----------+\n
        \  |    ECDSA-256 (default)    |   256  |      SHA-256     | secp256r1 |\n
        \  |         ECDSA-384         |   384  |      SHA-384     | secp384r1 |\n
        \  |         ECDSA-521         |   512  |      SHA-512     | secp521r1 |\n
        \  +---------------------------+--------+------------------+-----------+\n
        \  ECDSA-256, ECDSA-384, and ECDSA-521 are designed to offer security\n   comparable
        with AES-128, AES-192, and AES-256, respectively\n   [RFC4754].  Among them,
        the use of ECDSA-256/secp256r1 is\n   RECOMMENDED.\n"
      title: 4.3.1.  Signature Processing
    - contents:
      - "4.3.2.  Anti-Replay Processing\n   The anti-replay processing follows the
        principles described in\n   Section 3.3.2.\n"
      title: 4.3.2.  Anti-Replay Processing
    title: 4.3.  Processing
  - contents:
    - "4.4.  In Practice\n   Each packet sent MUST contain exactly one ECC Digital
      Signature\n   EXT_AUTH header extension.  A receiver MUST drop all the packets
      that\n   do not contain an ECC Digital Signature EXT_AUTH header extension.\n
      \  All receivers MUST recognize EXT_AUTH but might not be able to parse\n   its
      content, for instance, because they do not support ECC Digital\n   Signatures.
      \ In that case, the Digital Signature EXT_AUTH header\n   extension is ignored.\n
      \  If the anti-replay mechanism is used, each packet sent MUST contain a\n   valid
      Sequence Number.  All the packets that fail to contain a valid\n   Sequence
      Number MUST be immediately dropped.\n   For instance, Figure 3 shows the Digital
      Signature EXT_AUTH header\n   extension when using ECDSA-256 (256-bit) ECC Digital
      Signatures.\n   The ECC Digital Signature EXT_AUTH header extension is then
      36 bytes\n   long.\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |   HET (=1)    |   HEL (=9)    |  ASID |  0  |0|      0        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      ---\n   |                                                               | ^
      3\n   +                                                               + | 2\n
      \  .                                                               . |\n   .
      \                     Signature (32 bytes)                     . | b\n   .                                                               .
      | y\n   |                                                               | |
      t\n   +                                                               + | e\n
      \  |                                                               | v s\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      ---\n      Figure 3: Example: Format of the ECC Digital Signature EXT_AUTH\n
      \              Header Extension Using ECDSA-256 Signatures,\n                    without
      Any Anti-Replay Protection\n"
    title: 4.4.  In Practice
  title: 4.  Elliptic Curve Digital Signature Scheme
- contents:
  - '5.  Group-Keyed Message Authentication Code (MAC) Scheme

    '
  - contents:
    - "5.1.  Authentication Header Extension Format\n   The integration of Group-keyed
      MAC is similar in ALC and NORM and\n   relies on the header extension mechanism
      defined in both protocols.\n   More precisely, this document details the HET=1
      (EXT_AUTH) header\n   extension defined in [RFC5651].\n   Several fields are
      added, in addition to the HET and HEL fields\n   (Figure 4).\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |   HET (=1)    |      HEL      |  ASID | rsvd|A|               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+R+
      \              +\n   ~                  anti-replay Sequence Number (SN)             ~\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                                                               |\n
      \  ~                                                               ~\n   |                        Group-keyed
      MAC                        |\n   +                                               +-+-+-+-+-+-+-+-+\n
      \  |                                               |    Padding    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    Figure 4: Format of the Group-Keyed MAC EXT_AUTH Header Extension\n   The
      fields of the Group-keyed MAC EXT_AUTH header extension are as\n   follows:\n
      \  ASID (4 bits):\n      The ASID identifies the source authentication scheme
      or protocol\n      in use.  The association between the ASID value and the actual\n
      \     authentication scheme is defined out-of-band, at session startup.\n   rsvd
      (3 bits):\n      This is a reserved field that MUST be set to zero and ignored
      by\n      receivers.\n   AR (1 bit):\n      The AR field, when set to 0, indicates
      that the anti-replay\n      service is not used.  When set to 1, it indicates
      that the\n      anti-replay service is used.\n   SN (8 or 40 bits):\n      The
      SN field contains an optional Sequence Number.  When AR = 0,\n      this is
      an 8-bit field that MUST be set to zero.  No anti-replay\n      mechanism is
      used in that case.  When AR = 1, this is a 40-bit\n      field (32 bits + 8
      bits), and all of the 40 bits MUST be\n      considered by the anti-replay mechanism.\n
      \  Group-keyed MAC (variable size, multiple of 32 bits):\n      The Group-keyed
      MAC field contains a truncated Group-keyed MAC of\n      the message.  If need
      be, this field is padded (with 0) up to a\n      multiple of 32 bits.\n"
    title: 5.1.  Authentication Header Extension Format
  - contents:
    - "5.2.  Parameters\n   Several parameters MUST be initialized by an out-of-band
      mechanism.\n   The sender or group controller\n   o  MUST communicate the Cryptographic
      MAC Function -- for instance,\n      HMAC-SHA-1, HMAC-SHA-224, HMAC-SHA-256,
      HMAC-SHA-384, or\n      HMAC-SHA-512.  As a side effect, with these functions,
      the\n      receivers also know the key length and the non-truncated MAC\n      output
      length.  Because of security threats on SHA-1, the use of\n      HMAC-SHA-256
      is RECOMMENDED [RFC6194];\n   o  MUST communicate the length of the truncated
      output of the MAC,\n      n_m, which depends on the Cryptographic MAC Function
      chosen.  Only\n      the n_m leftmost bits (most significant bits) of the MAC
      output\n      are kept.  Of course, n_m MUST be less than or equal to the key\n
      \     length;\n   o  MUST communicate the group key to the receivers, confidentially,\n
      \     before starting the session.  This key might have to be\n      periodically
      refreshed for improved robustness;\n   o  MUST associate a value to the ASID
      field of the EXT_AUTH header\n      extension (Section 5.1);\n   o  MUST communicate
      whether or not the anti-replay service is used\n      for this session.\n   These
      parameters MUST be communicated to all receivers before they\n   can authenticate
      the incoming packets.  For instance, it can be\n   communicated in the session
      description, or initialized in a static\n   way on the receivers, or communicated
      by means of an appropriate\n   protocol (this will often be the case when periodic
      re-keying is\n   required).  The details of this out-of-band mechanism are beyond
      the\n   scope of this document.\n"
    title: 5.2.  Parameters
  - contents:
    - '5.3.  Processing

      '
    - contents:
      - "5.3.1.  Signature Processing\n   The computation of the Group-keyed MAC,
        using the group key, includes\n   the ALC or NORM header (with the various
        header extensions) and the\n   payload when applicable.  The UDP/IP/MAC headers
        are not included.\n   During this computation, the weak Group-keyed MAC field
        MUST be set\n   to 0.  Then, the sender truncates the MAC output to keep the
        n_m most\n   significant bits and stores the result in the Group-keyed MAC\n
        \  Authentication Header.\n   Upon receiving this packet, the receiver computes
        the Group-keyed\n   MAC, using the group key, and compares it to the value
        carried in the\n   packet.  During this computation, the Group-keyed MAC field
        MUST also\n   be set to 0.  If the check fails, the packet MUST be immediately\n
        \  dropped.\n   [RFC2104] explains that it is current practice to truncate
        the MAC\n   output, on condition that the truncated output length, n_m, be
        not\n   less than half the length of the hash and not less than 80 bits.\n
        \  However, this choice is beyond the scope of this document.\n"
      title: 5.3.1.  Signature Processing
    - contents:
      - "5.3.2.  Anti-Replay Processing\n   The anti-replay processing follows the
        principles described in\n   Section 3.3.2.\n"
      title: 5.3.2.  Anti-Replay Processing
    title: 5.3.  Processing
  - contents:
    - "5.4.  In Practice\n   Each packet sent MUST contain exactly one Group-keyed
      MAC EXT_AUTH\n   header extension.  A receiver MUST drop packets that do not
      contain a\n   Group-keyed MAC EXT_AUTH header extension.\n   All receivers MUST
      recognize EXT_AUTH but might not be able to parse\n   its content, for instance,
      because they do not support Group-keyed\n   MAC.  In that case, the Group-keyed
      MAC EXT_AUTH extension is\n   ignored.\n   If the anti-replay mechanism is used,
      each packet sent MUST contain a\n   valid Sequence Number.  All the packets
      that fail to contain a valid\n   Sequence Number MUST be immediately dropped.\n
      \  For instance, Figure 5 shows the Group-keyed MAC EXT_AUTH header\n   extension
      when using HMAC-SHA-256.  The Group-keyed MAC EXT_AUTH\n   header extension
      is then 16 bytes long.\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |   HET (=1)    |    HEL (=4)   |  ASID |  0  |0|      0        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                                                               |\n   +                                                               +\n
      \  |                   Group-keyed MAC (16 bytes)                  |\n   +                                                               +\n
      \  |                                                               |\n   +                                                               +\n
      \  |                                                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    Figure 5: Example: Format of the Group-Keyed MAC EXT_AUTH Header\n     Extension
      Using HMAC-SHA-256, without Any Anti-Replay Protection\n"
    title: 5.4.  In Practice
  title: 5.  Group-Keyed Message Authentication Code (MAC) Scheme
- contents:
  - "6.  Combined Use of the RSA/ECC Digital Signatures and Group-Keyed MAC\n    Schemes\n"
  - contents:
    - "6.1.  Authentication Header Extension Format\n   The integration of combined
      RSA/ECC Digital Signatures and\n   Group-keyed MAC schemes is similar in ALC
      and NORM and relies on the\n   header extension mechanism defined in both protocols.
      \ More\n   precisely, this document details the HET=1 (EXT_AUTH) header\n   extension
      defined in [RFC5651].\n   Several fields are added, in addition to the HET and
      HEL fields\n   (Figure 6).\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |   HET (=1)    |      HEL      |  ASID | rsvd|A|               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+R+
      \              +\n   |                  anti-replay Sequence Number (SN)             |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                                                               |\n
      \  ~                                                               ~\n   |                           Signature
      \                          |\n   +                                               +-+-+-+-+-+-+-+-+\n
      \  |                                               |    Padding    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                        Group-keyed MAC                        |\n   ~                                                               ~\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     Figure
      6: Format of the Group-Keyed MAC EXT_AUTH Header Extension\n   The fields of
      the Group-keyed MAC EXT_AUTH header extension are as\n   follows:\n   ASID (4
      bits):\n      The ASID identifies the source authentication scheme or protocol\n
      \     in use.  The association between the ASID value and the actual\n      authentication
      scheme is defined out-of-band, at session startup.\n   rsvd (3 bits):\n      This
      is a reserved field that MUST be set to zero and ignored by\n      receivers.\n
      \  AR (1 bit):\n      The AR field MUST be set to 1, indicating that the anti-replay\n
      \     service is used (see Section 6.3).\n   SN (8 or 40 bits):\n      The SN
      field contains a Sequence Number.  Since AR = 1, this is a\n      40-bit field
      (32 bits + 8 bits), and all of the 40 bits MUST be\n      considered by the
      anti-replay mechanism.\n   Signature (variable size, multiple of 32 bits):\n
      \     The Signature field contains a Digital Signature of the message.\n      If
      need be, this field is padded (with 0) up to a multiple of\n      32 bits.\n
      \  Group-keyed MAC (variable size, multiple of 32 bits, by default\n   32 bits):\n
      \     The Group-keyed MAC field contains a truncated Group-keyed MAC of\n      the
      message.\n"
    title: 6.1.  Authentication Header Extension Format
  - contents:
    - "6.2.  Parameters\n   Several parameters MUST be initialized by an out-of-band
      mechanism,\n   as defined in Sections 3.2, 4.2, and 5.2.\n"
    title: 6.2.  Parameters
  - contents:
    - "6.3.  Processing\n   In some situations, it can be interesting to use both
      authentication\n   schemes.  The goal of the Group-keyed MAC is to mitigate
      denial-of-\n   service (DoS) attacks coming from attackers that are not group\n
      \  members [RFC4082], by adding a light authentication scheme as a\n   front-end.\n"
    - contents:
      - "6.3.1.  Signature Processing\n   Before sending a message, the sender sets
        the Signature field and\n   Group-keyed MAC field to zero.  Then, the sender
        computes the\n   signature as detailed in Section 3.3 or in Section 4.3 and
        stores the\n   value in the Signature field.  Then, the sender computes the\n
        \  Group-keyed MAC as detailed in Section 5.3 and stores the value in\n   the
        Group-keyed MAC field.  The (RSA or ECC) Digital Signature value\n   is therefore
        protected by the Group-keyed MAC, which avoids DoS\n   attacks where the attacker
        corrupts the Digital Signature itself.\n   Upon receiving the packet, the
        receiver first checks the Group-keyed\n   MAC, as detailed in Section 5.3.
        \ If the check fails, the packet MUST\n   be immediately dropped.  Otherwise,
        the receiver checks the Digital\n   Signature, as detailed in Section 3.3.
        \ If the check fails, the\n   packet MUST be immediately dropped.\n   This
        scheme features a few limits:\n   o  The Group-keyed MAC is of no help if
        a group member (who knows the\n      group key) impersonates the sender and
        sends forged messages to\n      other receivers.  DoS attacks are still feasible;\n
        \  o  It requires an additional MAC computing for each packet, both at\n      the
        sender and receiver sides;\n   o  It increases the size of the Authentication
        Headers.  In order to\n      limit this problem, the length of the truncated
        output of the MAC,\n      n_m, SHOULD be kept small (see Section 9.5 of [RFC3711]).
        \ In the\n      current specification, n_m MUST be a multiple of 32 bits,
        and the\n      default value is 32 bits.  As a side effect, with n_m = 32
        bits,\n      the authentication service is significantly weakened, since the\n
        \     probability that any packet would be successfully forged is one in\n
        \     2^32.  Since the Group-keyed MAC check is only a pre-check that is\n
        \     followed by the standard signature authentication check, this is\n      not
        considered to be an issue.\n   For a given use case, the benefits brought
        by the Group-keyed MAC\n   must be balanced against these limitations.\n"
      title: 6.3.1.  Signature Processing
    - contents:
      - "6.3.2.  Anti-Replay Processing\n   The anti-replay processing follows the
        principles described in\n   Section 3.3.2.  Here, an anti-replay service MUST
        be used.  Indeed,\n   failing to enable anti-replay protection would facilitate
        DoS\n   attacks, since all replayed (but otherwise valid) packets would pass\n
        \  the light authentication scheme and oblige a receiver to perform a\n   complex
        signature verification.\n"
      title: 6.3.2.  Anti-Replay Processing
    title: 6.3.  Processing
  - contents:
    - "6.4.  In Practice\n   Each packet sent MUST contain exactly one combined Digital
      Signature/\n   Group-keyed MAC EXT_AUTH header extension.  A receiver MUST drop\n
      \  packets that do not contain a combined Digital Signature/Group-keyed\n   MAC
      EXT_AUTH header extension.\n   All receivers MUST recognize EXT_AUTH but might
      not be able to parse\n   its content, for instance, because they do not support
      combined\n   Digital Signature/Group-keyed MAC.  In that case, the combined\n
      \  Digital Signature/Group-keyed MAC EXT_AUTH extension is ignored.\n   Since
      the anti-replay mechanism MUST be used, each packet sent MUST\n   contain a
      valid Sequence Number.  All the packets that fail to\n   contain a valid Sequence
      Number MUST be immediately dropped.\n   It is RECOMMENDED that the n_m parameter
      of the group authentication\n   scheme be small, and by default equal to 32
      bits (Section 6.3).\n   For instance, Figure 7 shows the combined Digital Signature/\n
      \  Group-keyed MAC EXT_AUTH header extension when using 128-byte\n   (1024-bit)
      key RSA Digital Signatures (which also means that the\n   Signature field is
      128 bytes long).  The EXT_AUTH header extension is\n   then 140 bytes long.\n
      \   0                   1                   2                   3\n    0 1 2
      3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |   HET (=1)    |   HEL (=35)   |  ASID |  0  |1|               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \              +\n   |                  anti-replay Sequence Number (SN)             |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ---\n   |
      \                                                              | ^ 1\n   +                                                               +
      | 2\n   |                                                               | |
      8\n   .                                                               . |\n
      \  .                      Signature (128 bytes)                    . | b\n   .
      \                                                              . | y\n   |                                                               |
      | t\n   +                                                               + |
      e\n   |                                                               | v s\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ---\n   |
      \                   Group-keyed MAC (32 bits)                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      ---\n     Figure 7: Example: Format of the Combined RSA Digital Signature/\n
      \  Group-Keyed MAC EXT_AUTH Header Extension Using 1024-Bit Signatures,\n                        with
      Anti-Replay Protection\n"
    title: 6.4.  In Practice
  title: 6.  Combined Use of the RSA/ECC Digital Signatures and Group-Keyed MAC
- contents:
  - '7.  Security Considerations

    '
  - contents:
    - "7.1.  Dealing with DoS Attacks\n   Let us consider packets secured through
      the use of a Digital\n   Signature scheme first.  Because faked packets are
      easy to create but\n   checking them requires computation of a costly Digital
      Signature,\n   this scheme introduces new opportunities for an attacker to mount
      DoS\n   attacks.  More precisely, an attacker can easily saturate the\n   processing
      capabilities of the receiver.\n   In order to mitigate these attacks, it is
      RECOMMENDED that the\n   combined Digital Signature/Group-keyed MAC scheme (Section
      6.3) be\n   used.  However, no mitigation is possible if a group member acts
      as\n   an attacker.  Additionally, even if checking a Group-keyed MAC is\n   significantly
      faster than checking a Digital Signature, there are\n   practical limits on
      how many Group-keyed MACs can be checked per time\n   unit.  Therefore, it is
      RECOMMENDED that limiting the number of\n   authentication checks per time unit
      be done when the number of\n   incoming packets that fail the authentication
      check exceeds a given\n   threshold (i.e., in the case of a DoS attack).\n   The
      RECOMMENDED action of limiting the number of checks per time unit\n   under
      (presumed) attack situations can be extended to the other\n   authentication
      schemes.\n"
    title: 7.1.  Dealing with DoS Attacks
  - contents:
    - "7.2.  Dealing with Replay Attacks\n   Replay attacks involve an attacker storing
      a valid message and\n   replaying it later.  It is RECOMMENDED that the anti-replay
      service\n   defined in this document be used with the signature and Group-keyed\n
      \  MAC solutions, and this anti-replay service MUST be used in the case\n   of
      a combined use of signatures and Group-keyed MAC schemes (see\n   Section 6.3.2).\n
      \  The following section details some of the potential consequences of\n   not
      using anti-replay protection.\n"
    - contents:
      - "7.2.1.  Impacts of Replay Attacks on the Simple Authentication Schemes\n
        \  Since all the above authentication schemes are stateless, replay\n   attacks
        have no impact on these schemes.\n"
      title: 7.2.1.  Impacts of Replay Attacks on the Simple Authentication Schemes
    - contents:
      - "7.2.2.  Impacts of Replay Attacks on NORM\n   In this subsection, we review
        the potential impacts of a replay\n   attack on the NORM component.  Note
        that we do not consider here the\n   protocols that could be used along with
        NORM -- for instance,\n   congestion control protocols.\n   First, let us
        consider replay attacks within a given NORM session.\n   As NORM is a stateful
        protocol, replaying a packet may have\n   consequences.\n   NORM defines a
        \"sequence\" field that may be used to protect against\n   replay attacks
        [RFC5740] within a given NORM session.  This sequence\n   field is a 16-bit
        value that is set by the message originator (sender\n   or receiver) as a
        monotonically increasing number incremented with\n   each NORM message transmitted.
        \ Using this field for anti-replay\n   protection would be possible if there
        is no wrapping to zero, i.e.,\n   would only be possible if at most 65535
        packets are sent; this may be\n   true for some use cases but not for the
        general case.  Using this\n   field for anti-replay protection would also
        be possible if the keying\n   material is updated before wrapping to zero
        happens; this may be true\n   for some use cases but not for the general case.\n
        \  Now, let us consider replay attacks across several NORM sessions.  A\n
        \  host participating in a NORM session is uniquely identified by the\n   {source_id;
        instance_id} tuple.  Therefore, when a given host\n   participates in several
        NORM sessions, it is RECOMMENDED that\n   instance_id be changed for each
        NORM instance.  It is also\n   RECOMMENDED, when the Group-keyed MAC authentication/integrity
        check\n   scheme is used, that the shared group key be changed across sessions.\n
        \  Therefore, NORM can be made robust when confronted with replay\n   attacks
        across different sessions.\n"
      title: 7.2.2.  Impacts of Replay Attacks on NORM
    - contents:
      - "7.2.3.  Impacts of Replay Attacks on ALC\n   In this subsection, we review
        the potential impacts of a replay\n   attack on the ALC component.  Note that
        we do not consider here the\n   protocols that could be used along with ALC
        -- for instance, layered\n   or wave-based congestion control protocols.\n
        \  First, let us consider replay attacks within a given ALC session:\n   o
        \ Replayed encoding symbol: A replayed encoding symbol (coming from\n      a
        replayed data packet) is detected, thanks to the object/block/\n      symbol
        identifiers, and is silently discarded.\n   o  Replayed control information:\n
        \     *  At the end of the session, a \"close session\" (A flag) packet is\n
        \        sent.  Replaying a packet containing this flag has no impact,\n         since
        the receivers have already left the session.\n      *  Similarly, replaying
        a packet containing a \"close object\"\n         (B flag) has no impact, since
        this object is probably already\n         marked as closed by the receiver.\n
        \     *  Timing information sent as part of a Layered Coding Transport\n         (LCT)
        EXT_TIME header extension [RFC5651] may be more sensitive\n         to replay
        attacks.  For instance, replaying a packet containing\n         an ERT (Expected
        Residual Time) may mislead a receiver to\n         believe an object transmission
        will continue for some time\n         whereas the transmission of symbols
        for this object is about to\n         stop.  Replaying a packet containing
        a Sender Current Time\n         (SCT) is easily identified if the receiver
        verifies that time\n         progresses upon receiving such EXT_TIME header
        extensions.\n         Replaying a packet containing a Session Last Changed
        (SLC) is\n         easily identified if the receiver verifies the chronology
        upon\n         receiving such EXT_TIME header extensions.\n   This analysis
        shows that ALC might be, to a limited extent, sensitive\n   to replay attacks
        within the same session if timing information is\n   used.  Otherwise, ALC
        is robust when confronted with replay attacks\n   within the same session.\n
        \  Now, let us consider replay attacks across several ALC sessions.  An\n
        \  ALC session is uniquely identified by the {sender IP address; TSI}\n   tuple.
        \ Therefore, when a given sender creates several sessions, the\n   TSI MUST
        be changed for each ALC session, so that each TSI is unique\n   among all
        active sessions of this sender and for a long period of\n   time preceding
        and following when the session is active [RFC5651].\n   Therefore, ALC can
        be made robust when confronted with replay attacks\n   across different sessions.
        \ Of course, when the Group-keyed MAC\n   authentication/integrity check scheme
        is used, the shared group key\n   SHOULD be changed across sessions if the
        set of receivers changes.\n"
      title: 7.2.3.  Impacts of Replay Attacks on ALC
    title: 7.2.  Dealing with Replay Attacks
  - contents:
    - "7.3.  Dealing with Attacks on the Parameters Sent Out-of-Band\n   This specification
      requires that several parameters be communicated\n   to the receiver(s) via
      an out-of-band mechanism that is beyond the\n   scope of this document.  This
      is in particular the case for the\n   mapping between an ASID value and the
      associated authentication\n   scheme (Section 1).  Since this mapping is critical,
      this information\n   SHOULD be carried in a secure way from the sender to the
      receiver(s).\n"
    title: 7.3.  Dealing with Attacks on the Parameters Sent Out-of-Band
  title: 7.  Security Considerations
- contents:
  - "8.  Acknowledgments\n   The author is grateful to the authors of [RFC4303], [RFC4359],\n
    \  [RFC4754], and [RFC5480]; their documents inspired several sections\n   of
    the present document.  The author is also grateful to all the IESG\n   members,
    and in particular to David Harrington, Stephen Farrell, and\n   Sean Turner for
    their very detailed reviews.\n"
  title: 8.  Acknowledgments
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [RFC2104]    Krawczyk, H., Bellare, M., and
      R. Canetti, \"HMAC: Keyed-\n                Hashing for Message Authentication\",
      RFC 2104,\n                February 1997.\n   [RFC2119]    Bradner, S., \"Key
      words for use in RFCs to Indicate\n                Requirement Levels\", BCP
      14, RFC 2119, March 1997.\n   [RFC5651]    Luby, M., Watson, M., and L. Vicisano,
      \"Layered Coding\n                Transport (LCT) Building Block\", RFC 5651,
      October 2009.\n   [RFC5740]    Adamson, B., Bormann, C., Handley, M., and J.
      Macker,\n                \"NACK-Oriented Reliable Multicast (NORM) Transport\n
      \               Protocol\", RFC 5740, November 2009.\n   [RFC5775]    Luby,
      M., Watson, M., and L. Vicisano, \"Asynchronous\n                Layered Coding
      (ALC) Protocol Instantiation\", RFC 5775,\n                April 2010.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [RFC3447]    Jonsson, J. and B. Kaliski, \"Public-Key
      Cryptography\n                Standards (PKCS) #1: RSA Cryptography Specifications\n
      \               Version 2.1\", RFC 3447, February 2003.\n   [RFC3711]    Baugher,
      M., McGrew, D., Naslund, M., Carrara, E., and\n                K. Norrman, \"The
      Secure Real-time Transport Protocol\n                (SRTP)\", RFC 3711, March
      2004.\n   [RFC4082]    Perrig, A., Song, D., Canetti, R., Tygar, J., and B.\n
      \               Briscoe, \"Timed Efficient Stream Loss-Tolerant\n                Authentication
      (TESLA): Multicast Source Authentication\n                Transform Introduction\",
      RFC 4082, June 2005.\n   [RFC4303]    Kent, S., \"IP Encapsulating Security
      Payload (ESP)\",\n                RFC 4303, December 2005.\n   [RFC4359]    Weis,
      B., \"The Use of RSA/SHA-1 Signatures within\n                Encapsulating
      Security Payload (ESP) and Authentication\n                Header (AH)\", RFC
      4359, January 2006.\n   [RFC4754]    Fu, D. and J. Solinas, \"IKE and IKEv2
      Authentication\n                Using the Elliptic Curve Digital Signature Algorithm\n
      \               (ECDSA)\", RFC 4754, January 2007.\n   [RFC5480]    Turner,
      S., Brown, D., Yiu, K., Housley, R., and T.\n                Polk, \"Elliptic
      Curve Cryptography Subject Public Key\n                Information\", RFC 5480,
      March 2009.\n   [RFC5751]    Ramsdell, B. and S. Turner, \"Secure/Multipurpose\n
      \               Internet Mail Extensions (S/MIME) Version 3.2 Message\n                Specification\",
      RFC 5751, January 2010.\n   [RFC5776]    Roca, V., Francillon, A., and S. Faurite,
      \"Use of Timed\n                Efficient Stream Loss-Tolerant Authentication
      (TESLA) in\n                the Asynchronous Layered Coding (ALC) and NACK-Oriented\n
      \               Reliable Multicast (NORM) Protocols\", RFC 5776,\n                April
      2010.\n   [RFC6090]    McGrew, D., Igoe, K., and M. Salter, \"Fundamental\n
      \               Elliptic Curve Cryptography Algorithms\", RFC 6090,\n                February
      2011.\n   [RFC6194]    Polk, T., Chen, L., Turner, S., and P. Hoffman,\n                \"Security
      Considerations for the SHA-0 and SHA-1\n                Message-Digest Algorithms\",
      RFC 6194, March 2011.\n   [RMT-FLUTE]  Paila, T., Walsh, R., Luby, M., Roca,
      V., and R.\n                Lehtonen, \"FLUTE - File Delivery over Unidirectional\n
      \               Transport\", Work in Progress, March 2012.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Author's Address\n   Vincent Roca\n   INRIA\n   655, av. de l'Europe\n   Inovallee;
    Montbonnot\n   ST ISMIER cedex  38334\n   France\n   EMail: vincent.roca@inria.fr\n
    \  URI:   http://planete.inrialpes.fr/people/roca/\n"
  title: Author's Address
