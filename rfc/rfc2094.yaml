- title: __initial_text__
  contents:
  - '           Group Key Management Protocol (GKMP) Architecture

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  This memo does not specify an Internet standard of any\n   kind.\
    \  Discussion and suggestions for improvement are requested.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Table of Contents
  contents:
  - 'Table of Contents

    '
- title: Abstract
  contents:
  - "Abstract\n   This specification proposes a protocol to create grouped symmetric\n\
    \   keys and distribute them amongst communicating peers. This protocol\n   has\
    \ the following advantages: 1) virtually invisible to operator, 2)\n   no central\
    \ key distribution site is needed, 3) only group members\n   have the key, 4)\
    \ sender or receiver oriented operation, 5) can make\n   use of multicast communications\
    \ protocols.\n"
- title: 1 Introduction
  contents:
  - "1 Introduction\n   This document describes an architecture for the management\
    \ of\n   cryptographic keys for multicast communications.  We identify the\n \
    \  roles and responsibilities of communications system elements in\n   accomplishing\
    \ multicast key management, define security and\n   functional requirements of\
    \ each, and provide a detailed introduction\n   to the Group Key Management Protocol\
    \ (GKMP) which provides the\n   ability to create and distribute keys within arbitrary-sized\
    \ groups\n   without the intervention of a global/centralized key manager.  The\n\
    \   GKMP combines techniques developed for creation of pairwise keys with\n  \
    \ techniques used to distribute keys from a KDC (i.e., symmetric\n   encryption\
    \ of keys) to distribute symmetric key to a group of hosts.\n"
- title: 1.1 Multicast Communications Environments
  contents:
  - "1.1 Multicast Communications Environments\n   The work leading to this report\
    \ was primarily concerned with military\n   command and control and weapons control\
    \ systems, these systems tend\n   to have top--down, commander--commanded, communications\
    \ flows.  The\n   choice of what parties will be members of a particular communication\n\
    \   (a multicast group for example) is at the discretion of the \"higher\"\n \
    \  level party(ies).  This \"sender-initiated\" (assuming the higher-level\n \
    \  party is sending) model maps well to broadcast (as in\n   electromagnetic,\
    \ free-space, transmission) and circuit switched\n   communications media (e.g.,\
    \ video teleconferencing, ATM multicast).\n   In looking to apply this technology\
    \ to the Internet, a somewhat\n   different model appears to be at work (at least\
    \ for some portion of\n   Internet multicast traffic).  IDRP and Distance Vector\
    \ Multicast\n   Routing Protocol (DVMRP) use multicast as a mechanism for parties\
    \ to\n   relay common information to their peers.  Each party both sends and\n\
    \   receives information in the multicast channel.  As appropriate, a\n   party\
    \ may choose to leave or join the communication without the\n   express permission\
    \ of any of the other parties (this begs the\n   question of meta-authorizations\
    \ which allow the parties to\n   cooperate).  More interestingly, the multicast\
    \ IP model has the\n   receiver telling the network to add it to the distribution\
    \ for a\n   particular multicast address, whether it exists yet or not, and the\n\
    \   transmitter not being consulted as to the addition of the receiver.\n   Other\
    \ applications of multicast communications in the Internet, for\n   example NASA\
    \ Select broadcasts, can be viewed as implementing the\n   sender model since\
    \ the sender selects the broadcast time, channel,\n   and content, though not\
    \ the destinations.\n   It is our intention to provide key management services\
    \ which support\n   both communications (and implied access control) models and\
    \ operate\n   in either a circuit switched or packet switched environment.\n"
- title: 1.2 Security for Multicast
  contents:
  - "1.2 Security for Multicast\n   Multicast communications, as with unicast, may\
    \ require any of the\n   security services defined in ISO 7498, access control,\
    \ data\n   confidentiality, traffic confidentiality, integrity/data\n   authentication,\
    \ source authentication, sender and receiver non-\n   repudiation and service\
    \ assurance.  From the perspective of key\n   management processes, only data\
    \ confidentiality, data authentication,\n   and source authentication can be supported.\
    \  The other services,\n   traffic confidentiality, non-repudiation, and service\
    \ assurance must\n   be provided by the communications protocol, they may rely\
    \ on\n   cryptographic services but are not guaranteed by them.\n"
- title: 2 Multicast Key Management Architectures
  contents:
  - '2 Multicast Key Management Architectures

    '
- title: 2.1 Current Operations
  contents:
  - "2.1 Current Operations\n   There are several electronic mechanisms for generating\
    \ and\n   distributing symmetric keys to several computers (i.e.,\n   communications\
    \ groups).  These techniques, generally, rely on a key\n   distribution center\
    \ (KDC) to act as a go between in setting up the\n   symmetric key groups.  Military\
    \ systems, such as BLACKER, STU-\n   II/BELLFIELD, and EKMS, and commercial systems,\
    \ such as X9.17 and\n   Kerberos, all operate using dedicated KDCs.  A group key\
    \ request is\n   sent to the KDC via various means (on- or off-line) The KDC acting\
    \ as\n   an access controller decides whether or not the request is proper\n \
    \  (i.e., all members of a group are cleared to receive all the data on\n   a\
    \ group).  The KDC would then call up each individual member of the\n   group\
    \ and down load the symmetric key.  When each member had the key\n   the KDC would\
    \ notify the requester.  Then secure group communication\n   could begin.  While\
    \ this was certainly faster then anything that\n   requires human intervention.\
    \  It still requires quite a bit of set-up\n   time.  Also, a third party, whose\
    \ primary interest isn't the\n   communication, needs to get involved.\n   Pairwise\
    \ keys can be created autonomously by the host on a network by\n   using any number\
    \ of key generation protocols (FireFly, Diffe-Hellman,\n   RSA). These protocols\
    \ all rely on cooperative key generation\n   algorithms to create a cryptographic\
    \ key.  These algorithms rely on\n   random information generated by each host.\
    \  These algorithms also\n   rely on peer review of permissions to ensure that\
    \ the communication\n   partners are who they claim to be and have authorization\
    \ to receive\n   the information being transmitted.  This peer review process\
    \ relies\n   on a trusted authority assigning permissions to each host in the\n\
    \   network that wants the ability to create these keys.  The real beauty\n  \
    \ of these pairwise key management protocols is that they can be\n   integrated\
    \ into the communication protocol or the application.  This\n   means that the\
    \ key management becomes relatively invisible to the\n   people in the system.\n"
- title: 2.2 GKMP-Based Operations
  contents:
  - "2.2 GKMP-Based Operations\n   The GKMP described below, delegates the access\
    \ control, key\n   generation, and distribution functions to the communicating\
    \ entities\n   themselves rather than relying on a third party (KDC) for these\n\
    \   functions.  As prelude to actually distributing key, a few things\n   must\
    \ be assumed (for purposes of this document): there exists a\n   \"security manager\"\
    \ responsible for creating and distributing to\n   parties authentic identification\
    \ and security permission information\n   (The security manager function may be\
    \ accomplished through a strictly\n   hierarchical system (a la STU-III) or a\
    \ more ad hoc system of\n   cooperating peer \"domain managers,\" the implementation\
    \ of the\n   certification hierarchy is not addressed in this document.);\n  \
    \ communicating parties are online for the keys formed and distributed\n   by\
    \ the GKMP.\n"
- title: 2.2.1 Sender Initiated Operations
  contents:
  - "2.2.1 Sender Initiated Operations\n   This section describes the basic operational\
    \ concept for multicast\n   key management for sender initiated multicast support.\
    \  This model of\n   multicast communications was the basis for our original work\
    \ on\n   multicast key management.  From a security viewpoint the sending\n  \
    \ application is able to control access to the transmission through\n   both key\
    \ distribution and communications distribution (not sending\n   the transmission\
    \ to some addresses).\n   Identification of Group Key Controller -- The originator\
    \ of the\n   multicast group creates or obtains a group management certificate\n\
    \   from its certification hierarchy.  The certificate identifies the\n   holder\
    \ as responsible for generation and distribution of the group\n   key (Naming\
    \ standards are not addressed here, the name should reflect\n   the naming structures\
    \ appropriate for the supported cryptographic\n   service.  For example, IP-level\
    \ encryptors should use naming\n   reflecting \"host\" identities (IP addresses,\
    \ or DNS host names), RTP\n   encryptor would use session names).  The originator\
    \ relays the\n   membership list to the Group Key Management (GKM) application.\n\
    \   Group Key Creation --   The GKM application, operating on behalf of\n   the\
    \ originator, selects one member of the group, contacts it, and\n   creates a\
    \ Group Key Packet (GKP). A GKP contains the current group\n   traffic encrypting\
    \ key (GTEK) and future group key encrypting key\n   (GKEK). The GKM application\
    \ then identifies itself as the group key\n   controller, which the member validates,\
    \ under cover of the GTEK.\n        Group Key Packet (GKP) = [GTEKn,GKEKn+1]\n\
    \   As part of group key packet formation, usage parameters, appropriate\n   for\
    \ the underlying crypto-system, are selected.  Unlike normal\n   parameter negotiation,\
    \ where common security-level/range, and\n   services are arrived at, the originator's\
    \ GKM application selects\n   these parameters and the member must comply.\n \
    \  Group Key Distribution --   After creation of the GKP, the group\n   controller\
    \ contacts each member of the group, creates a Session Key\n   Package (SKP),\
    \ validates their permissions (check member's\n   certificate against group parameters),\
    \ and create a Group Rekey\n   Package for that member.  A SKP contains a session\
    \ TEK and a session\n   KEK for a particular member.  A GRP contains the GKP encrypted\
    \ in a\n   KEK and signed using the originator's certificate.\n        Session\
    \ Key Package (SKP) = [STEK, SKEK]\n        Group Rekey Package (GRP) = {[GKP]KEK}\
    \ SignatureController\n   Group Rekey --   When the group needs to be rekeyed,\
    \ the originating\n   GKM application selects a member, creates a new GKP, creates\
    \ a new\n   GRP (which is encrypted in the previously distributed next GKEK) and\n\
    \   broadcasts it to the group.\n   This procedure is fairly complex, but other\
    \ than for the distribution\n   of site-specific certificates, no centralized\
    \ key management\n   resources are needed.  The only parties to the key management\n\
    \   communications are the same parties which will be participating in\n   the\
    \ group.\n"
- title: 2.2.2 Receiver Initiated Operations
  contents:
  - "2.2.2 Receiver Initiated Operations\n   This section describes key management\
    \ operational concept for\n   receiver initiated multicast communication support.\
    \  The receiver\n   initiated model presents some interesting problems from a\
    \ security\n   view point since the end-participants are not known a priori. \
    \ Also,\n   in a purely receiver initiated application (such as DVMRP), there\
    \ is\n   no concept of an \"originator\" and the participants in the group may\n\
    \   be quite dynamic with participants changing on a minute by minute\n   basis.\n\
    \   For secure group communications to take place, all members must\n   obtain\
    \ the same key.  This may be achieved by either using\n   deterministic key generation\
    \ techniques (using a secret, shared seed)\n   or by making one member of the\
    \ group responsible for creation of the\n   key.  The use of a deterministic key\
    \ generator presents security\n   problems, particularly regarding loss of the\
    \ seed (it compromises\n   both past and future traffic).  The assignment of a\
    \ member to the\n   role of key \"controller\" also presents drawbacks, but these\
    \ relate to\n   determining which one should be the controller and the need for\
    \ each\n   member to contact him.  The remainder of this discussion will look\
    \ at\n   how the \"controller\" concept from above could work in the receiver\n\
    \   initiated case.\n   Selection of Group Key Controller --   A group member\
    \ will be made\n   responsible for initial group establishment and periodic generation\n\
    \   and dissemination of new GRPs.  There is no need for the selected\n   controller\
    \ to be the controller for all time, but at any one time\n   only one controller\
    \ may be active for each group.  Selection of\n   controller may be made through\
    \ a voting system, by a simple default\n   (the first to transmit to the group\
    \ is the controller), or\n   configuration.\n   The current controller's identity\
    \ must be made available to all\n   members, and potential members, for initial\
    \ group key load and error\n   recovery.  The information may be relayed by broacast\
    \ on a key\n   management \"channel,\" or through a directory service.\n   Group\
    \ Key Creation --   The GKP is created and distributed in much\n   the same way\
    \ as in sender initiated operations.  The controller\n   creates a GKP with the\
    \ first group member to initiate contact.  The\n   GKM application then identifies\
    \ itself as the group key controller,\n   which the member validates, under cover\
    \ of the GTEK. Parameter\n   negotiation is performed and the first group member\
    \ is keyed.\n   Group Key Distribution --   After creation of the GKP, as other\n\
    \   members contact the controller, a SKP is created, member permissions\n   are\
    \ validated and a GRP is loaded to the member.\n   For widely distributed groups,\
    \ a form of distributed dissemination\n   may be used.  Some number of regional\
    \ GKM applications are enabled\n   with the ability to validate the permissions\
    \ of new members and upon\n   validation send to them the current GKP.(Access\
    \ control is not\n   defined in this document, but it is assumed that both hierarchical\n\
    \   and discretionaly (rule-based and identity-based) access control will\n  \
    \ be supported.) These regional key distributors perform the same\n   functions\
    \ as the controller, except that they do not create the GKP.\n   This concept\
    \ can be expanded to the point where all current members\n   are capable of downloading\
    \ the GKP, and passing on that capability.\n   Group Rekey --   When the group\
    \ need rekeying the procedure would be\n   identical to the sender initiated case.\
    \  The controlling GKM\n   application selects a member, creates a new GKP, creates\
    \ a new GRP\n   (which is encrypted in the previously distributed next GKEK) and\n\
    \   broadcasts it to the group.\n"
- title: 2.3 GKMP Features
  contents:
  - "2.3 GKMP Features\n   This section highlights areas which we believe the GKMP\
    \ approach has\n   advantages over the \"traditional\" KDC based approaches.\n"
- title: 2.3.1 Multicast
  contents:
  - "2.3.1 Multicast\n   Multicast protocols are a growing area of interest for the\
    \ Internet.\n   The largest benefit of a multicast protocol is the ability of\
    \ several\n   receivers to simultaneously get the same transmission.  If the\n\
    \   transmission is of a sensitive nature, it should be encrypted.  This\n   means\
    \ that the all members of the group must share the same\n   encryption key to\
    \ take benefit of the multicast transmission.\n   To date the only way of setting\
    \ up a group of symmetric keys is with\n   the assistance of a centralized key\
    \ management facility.  This\n   facility would act as a key broker creating a\
    \ distributing key to\n   qualified group members.  There are several problems\
    \ with this\n   centralized concept.  These problems give rise to many of the\n\
    \   following motivations for creating a distributed key management\n   protocol.\n"
- title: 2.3.2 Increase the autonomy of key groups
  contents:
  - "2.3.2 Increase the autonomy of key groups\n   The GKMP proposes to extend the\
    \ pairwise key paradigm to grouped\n   keys.  This protocol can be integrated\
    \ into the communication\n   protocols or applications and can become invisible\
    \ to the host's\n   operator.  We will use peer review to enforce our security\
    \ policy.\n   The GKMP allows any host on a network to create and manage a secure\n\
    \   group.  Maintenance of these group keys can be performed by the hosts\n  \
    \ interested in the group.  The groups themselves will be relatively\n   autonomous.\
    \  This simplifies the installation of this technology\n   allowing more host\
    \ to use secure multicast communications.\n"
- title: 2.3.3 Latency
  contents:
  - "2.3.3 Latency\n   Latency refers to the time to set-up or tear down or to re-key\
    \ a\n   group.  In short this corresponds to the length of time it would take\n\
    \   to set-up a multicast address.\n   The GKMP can allow delegation of group\
    \ creation authority to any host\n   in the network.  In essence, when a host\
    \ needs a group it will have\n   the tools needed to create that group and manage\
    \ it.  Additionally,\n   since the host only needs to create a single group it\
    \ can concentrate\n   on that particular group.\n   In the current centralized\
    \ key distribution approach.  The group must\n   be requested from the central\
    \ site.  The central site would process\n   that request in accordance with it's\
    \ priority and current workload.\n   Latencies would develop if the workload of\
    \ the central site gets\n   unwieldy or if the communications to the site become\
    \ overloaded.\n"
- title: 2.3.4 Extendibility
  contents:
  - "2.3.4 Extendibility\n   One of the problems with a centralized key distribution\
    \ system is the\n   concentration of key management workload at a single site.\
    \  The\n   process of creating key groups -- key creation, access review,\n  \
    \ communication to group members takes time and effort.  As the number\n   of\
    \ groups on the network grows and the number of group members group.\n   The workload\
    \ at that central sight quickly reaches capacity.\n   GKMP should allow a great\
    \ number of groups to exist on the Internet\n   without overloading any particular\
    \ host.  Delegation of the net wide\n   group creation and management workload\
    \ places the burden of\n   maintaining groups on the hosts interested in using\
    \ those groups.\n   Not only is this more efficient, but it places the burden\
    \ in an\n   appropriate location.\n   The GKMP distributes the communication requirements\
    \ to manage groups\n   across the network.  Each group manages the group using\
    \ the same\n   communication resources needed to pass traffic.  It is likely that\
    \ if\n   a communication group can support the traffic of a group, it will be\n\
    \   able to support the minimal traffic needed to management the keys for\n  \
    \ that group.\n   GKMP provides it's own access control, based on signed netwide\n\
    \   permission certificates.  This partially disseminates the burden of\n   access\
    \ control and permission management.  A system wide authority\n   must assign\
    \ the permission certificates, but day to day access\n   control decisions are\
    \ a GKMP responsibility.\n"
- title: 2.3.5 Operating expense
  contents:
  - "2.3.5 Operating expense\n   A centralized key distribution site contains, at\
    \ one time or another,\n   the keys for the net.  This is a valuable target for\
    \ someone to\n   compromise.  To protect this site physical and procedural security\n\
    \   mechanisms are employed (e.g., guards, fences, intrusion alarms, two\n   person\
    \ safes, no-alone zones).  These mechanisms do not come cheap.\n   Allowing the\
    \ hosts to create and manage their keys eliminates the\n   need for an on-line\
    \ centralized key distribution site.  The protocol\n   approach restricts access\
    \ to the keys to the hosts using them (the\n   minimal set).  Since, the encryption\
    \ mechanisms will have already\n   incurred the cost to be physically secured\
    \ there is no additional\n   cost levied on the system by the key management system.\n"
- title: 2.3.6 Communication Resources
  contents:
  - "2.3.6 Communication Resources\n   Because a centralized site is involved in creating,\
    \ distributing,\n   rekeying, and providing access control for every group, it\
    \ is\n   frequently accessed.  The communication resources available to this\n\
    \   site often become a bottle neck for the groups.  Therefore a big pipe\n  \
    \ is usually installed to this facility.\n   The GKMP proposes delegating most\
    \ of the key creation, distribution,\n   rekey and access control mission to the\
    \ hosts that need the secure\n   communication.  There no longer is a single third\
    \ party that must be\n   consulted prior to every group key management action.\
    \  Hence, the\n   communications requirements to manage the keys have shifted\
    \ to the\n   groups themselves.  The need for special high capacity communications\n\
    \   has been eliminated.\n"
- title: 2.3.7 Reliability
  contents:
  - "2.3.7 Reliability\n   Delegating key management responsibility to the groups\
    \ eliminates the\n   centralized key management site as a single point of failure.\
    \  The\n   groups that will use the key are responsible for it.  If the\n   communications\
    \ system fails for the key management it is also down\n   for the communications.\n\
    \   The GKMP will attempt to delegate as many functions to the group as\n   possible.\
    \  There will be some functions which still need to be\n   performed outside of\
    \ the group (granting of privileges).  These\n   functions can still fail.  The\
    \ GKMP will operate on the old set of\n   permissions.  These functions need not\
    \ be in-line.  They are\n   performed separate from the key management actions\
    \ and are not\n   crucial to day-to-day operation.\n"
- title: 2.3.8 Security
  contents:
  - "2.3.8 Security\n   People are the most risky element for security.  A distributed\n\
    \   protocol eliminates many people from the key distribution chain.\n   This\
    \ limits \"exposure\" of the key.\n"
- title: 3 GKMP Protocol Overview
  contents:
  - '3 GKMP Protocol Overview

    '
- title: 3.1 Supporting functions
  contents:
  - "3.1 Supporting functions\n   A secure key management protocol needs a number\
    \ of supporting\n   functions, especially in a military environment.  The two\
    \ major\n   support functions are security management and network group\n   management.\
    \  In the commercial world a company could provide these\n   support functions.\n\
    \   The issue of Security Management is permission management, in a\n   military\
    \ environment separation of data occurs along classical\n   classification lines\
    \ (i.e., TOP SECRET to UNCLASSIFIED). In the\n   commercial world these levels\
    \ are proprietary or need to know access.\n   Network group management provides\
    \ an interface to the communications\n   system and control of network resources.\
    \  Some entity either a\n   commercial or military system, the host or network\
    \ operations center,\n   must provide the key management protocol with a list\
    \ of the group\n   members.  Also, if the network resources, bandwidth and processing,\n\
    \   are considered scarce a management structure must allocate them.\n"
- title: 3.1.1 Security management
  contents:
  - "3.1.1 Security management\n   Security management is a role performed for the\
    \ entire network.  It\n   involves netwide issues of permission management, initialization\
    \ of\n   software, and compromise recovery.  The GKMP relies on security\n   management\
    \ to operate.  Refer to figure 1:  Security management view.\n   The GKMP must\
    \ assume trusted handling of the protocol software prior\n   and during installation.\
    \  If the GKMP is to use peer to peer access\n   control the system must control\
    \ the assignment of permissions.  These\n   permissions must be monitored and\
    \ updated as needed.  Finally,\n   overview of these permissions must include\
    \ the maintenance of a\n   Certificate Revocation List.\n   Secure start-up  We\
    \ need to control the process of loading GKMP\n   software onto a host and initializing\
    \ it.  The protocol needs keys,\n   Security Manager --> --> --> --> --> --> -->\
    \ --> --> --> --> Network\n                                   Permissions\n  \
    \                                 Secure Start-ups\n                         \
    \          Compromise recovery\n                    Figure 1:  Security Management\
    \ View\n   public and private, to operate.  It also must have identify\n   information\
    \ of the host on whose behalf it will act.\n   There are some life cycle and security\
    \ concerns with the software\n   while in transit, stored, distributed, and installed.\
    \  A one time\n   start-up procedure must verify the identity of the host.  Procedural\n\
    \   and physical identification techniques will verify the identity of\n   the\
    \ host (i.e., the Armed Forces Courier Service (ARFCS) accounting,\n   or registered\
    \ mail).  Upon key delivery the security manager logs\n   it's receipt and assumes\
    \ responsibility for the key.\n   After proper installation of the software a\
    \ paper trail verifies the\n   recipient.  The computer would initiate an association\
    \ with the\n   security management function to initialize the protocol software\n\
    \   (create a unique public and private key pair for network operation\n   and\
    \ receive network permissions).  This activation process uses keys\n   distributed\
    \ with the software (good only for initialization) to\n   secure an exchange with\
    \ the security manager.  The host then creates\n   a unique public and private\
    \ pair and sends the public key to the\n   security manager.  The security manager\
    \ creates a credential that\n   uniquely identifies the host and it permissions.\
    \  This credential is\n   signed by the security management with its private key\
    \ and can be\n   verified by all net members with the public key.\n   Permission\
    \ management  Each host on the network is given a\n   permissions certificate\
    \ signed by the security management which\n   uniquely identify that host and\
    \ identifies the access permissions it\n   is allowed.  These permission certificates\
    \ are used by the network\n   hosts to assign permissions to other hosts.\n  \
    \ This process assigns permissions to equipment or human beings in\n   accordance\
    \ with their duties.  This process involves security\n   clearances and human\
    \ judgment therefore it is outside the scope of\n   this protocol.\n   The security\
    \ management function, especially in military operations,\n   would be responsible\
    \ for managing permissions and classifications at\n   each host.  In the commercial\
    \ world, permission management\n   corresponds to projects or duties.\n   Compromise\
    \ recovery management  If a group member is found\n   compromised, the protocol\
    \ must facilitate the exclusion of the\n   compromised member and return to secure\
    \ operations.  The security\n   management function will provide control of compromise\
    \ recovery.\n   Usually, physical inspections or accounting techniques find\n\
    \   compromises.  These separate systems report the compromise to the key\n  \
    \ management system.  We must assume the loss of all key resident at\n   that\
    \ host.  The security management function will rescind the\n   permission allocated\
    \ to this compromised host.  We create a list of\n   all know compromised hosts\
    \ and distribution that list across the\n   network.  Each host is then responsible\
    \ for reviewing the propriety\n   of each association and enforcing access control\
    \ to data.\n"
- title: 3.1.2 Group management
  contents:
  - "3.1.2 Group management\n   The group manager interacts with other management\
    \ functions in the\n   network to provide the GKMP with group membership lists\
    \ and group\n   relevant commands.  The GKMP deals strictly with cryptographic\
    \ key.\n   It relies on external communication and network management services\n\
    \   to supply network related information.  Primarily, it relies on the\n   network\
    \ management service to provide it with the addresses of group\n   members (if\
    \ the group is sender initiated).\n   The GKMP allows an external entity to determine\
    \ the controller of a\n   group.  The controller of the group should be able to\
    \ handle the\n   additional processing and communication requirements associated\
    \ with\n   the role.  If this is not a necessary function given the\n   implementation,\
    \ this assignment of controller duties can be set to\n   some automated default.\
    \  However, even if defaulted some external\n   management entity determines how\
    \ the role of controller is allocated.\n   The group manager can receive group\
    \ progress reports from the group\n   controller.  The GKMP provides a service\
    \ for the network.  It makes\n   sense that someone in the network is interested\
    \ in the progress of\n   this service.  The GKMP can provide progress reports.\
    \  It is up to\n   the network management to determine the manner and recipient\
    \ of the\n   reports.  Reference figure 2:  Network manager interaction.\n   Group\
    \ Manager --> --> --> --> --> --> --> --> -->Network Manager\n           /\\\n\
    \           |\n           |       Commands, Role assignments\n           |   \
    \    Group member list, Reports\n           |\n           \\/\n   {[Group Controller]\
    \     Network}\n                  Figure 2:  Network Manager Interaction\n   Group\
    \ to member mapping  When the GKMP is implemented in sender\n   initiated group\
    \ establishment mode, a list of group member addresses\n   must be provided as\
    \ part of the group establishment command.  The\n   GKMP will use these addresses\
    \ to contact the group members and create\n   the group.\n   The creation of groups\
    \ involves the assignment of a group address,\n   update of router databases,\
    \ and distribution of this group address to\n   the group members.  This is a\
    \ classic function of network management.\n   The GKMP group controller would\
    \ be another recipient of this\n   information.\n   Protocol role allocation \
    \ The Group Management Protocol assigns roles\n   to members of a particular group.\
    \  These roles are binary one is\n   either the control over the group or a member\
    \ of a group.  Some\n   external entity will allocate the identity of the group\
    \ controller\n   and group receiver.  This is a desirable aspect because some\n\
    \   computers are more capable (i.e., central site, great deal of process\n  \
    \ power available to control a group).  We allow some external entity\n   to allocate\
    \ these roles to individual group members, this is\n   important in the military\
    \ application do to the fact that in a\n   commercial application the allocating\
    \ authority and group controller\n   may very well always be the same.\n   Group\
    \ key progress reporting  The Group Key Management Protocol has\n   to be able\
    \ to report to somebody.  If we create a group, we should\n   report it to group\
    \ requester.  Contrarily if we are not able to\n   Network = {[(Group 1 controller)\
    \ Group 1 members],\n   [(Group 2 controller) Group 2 members],\n   [(Group 3\
    \ controller) Group 3 members], }\n                  Figure 3:  Distributed Group\
    \ Management\n   create a group we should report that especially since failure\
    \ to\n   create a group at least as a first study will highly correlate with a\n\
    \   failure of the underlying communications.  The Group Key Management\n   Protocol\
    \ does not have an ability to fix the underlying\n   communications so the communication\
    \ management function must deal\n   with these failures.\n"
- title: 3.2 Protocol Roles
  contents:
  - "3.2 Protocol Roles\n   Creation and distribution of grouped key require assignment\
    \ of roles.\n   These identify what functions the individual hosts perform in\
    \ the\n   protocol.  The two primary roles are those of controller and\n   receiver.\
    \  The controller initiates the creation of the key, forms\n   the key distribution\
    \ messages, and collects acknowledgment of key\n   receipt from the receivers.\
    \  The receivers wait for a distribution\n   message, decrypt, validate, and acknowledge\
    \ the receipt of new key.\n   One of the essential concepts behind the GKMP is\
    \ delegation of group\n   control.  Since each host in the network has the capability\
    \ to act as\n   a group controller, the processing and communication requirements\
    \ of\n   controlling the groups in the network can be distributed equitably\n\
    \   throughout the network.  This avoids potential single points of\n   failure,\
    \ communication congestion, and processor overloading.  Refer\n   to figure 3:\
    \  Distributed group management.\n"
- title: 3.2.1 Group controller
  contents:
  - "3.2.1 Group controller\n   The group controller is the a group member with authority\
    \ to perform\n   critical protocol actions (i.e., create key, distribute key,\
    \ create\n   group rekey messages, and report on the progress of these actions).\n\
    \   All group members have the capability to be a group controller and\n   could\
    \ assume this duty upon assignment.\n   The group controller helps the cryptographic\
    \ group reach and maintain\n   key synchronization.  A group must operate on the\
    \ same symmetric\n   cryptographic key.  If part of the group loses or inappropriately\n\
    \   changes it's key, it will not be able to send or receive data to\n   another\
    \ host operating on the correct key.  Therefor, it is important\n   that those\
    \ operations that create or change key are unambiguous and\n   controlled (i.e.,\
    \ it would not be appropriate for multiple hosts to\n   try to rekey a net simultaneously).\n"
- title: 3.2.2 Group receiver
  contents:
  - "3.2.2 Group receiver\n   Simply stated a group receiver is any group member who\
    \ is not acting\n   as the controller.  The group receivers will:  assist the\
    \ controller\n   in creating key, validate the controller authorization to perform\n\
    \   actions, accept key from the controller, request key from the\n   controller,\
    \ maintain local CRL lists, perform peer review of key\n   management actions,\
    \ and manage local key.\n"
- title: 3.3 Scenarios
  contents:
  - '3.3 Scenarios

    '
- title: 3.3.1 Group establishment
  contents:
  - "3.3.1 Group establishment\n   The protocol to establish a group of host that\
    \ share a cryptographic\n   key must create a high quality key, verify that all\
    \ intended\n   recipients have permission to join the group, distribute the key\
    \ to\n   all qualified members, and report on the progress.  This process\n  \
    \ consists of two phases:  creation of the key and distribution of the\n   key.\
    \  Refer to figure 4:  Group Establishment.\n   The group establishment process\
    \ is proceeds in the following manner.\n   First, a \"create group\" command is\
    \ issued to the group commander.\n   The group controller validates the command\
    \ to ensure it came from an\n   authorized commander and the group is within the\
    \ controller's\n   permission range.  Next, the controller creates a key.  Then\
    \ that key\n   is passed to the group members, after they pass the peer to peer\n\
    \   review process.\n   Group Controller\n           |\n           |\n       \
    \    \\/      Create group keys\n           |--> --> --> --> --> --> -->Group\
    \ member\n           |\n           |\n           \\/      Distribute keys\n  \
    \         |--> --> --> --> --> --> --> Group member\n           |\n          \
    \ |\n           \\/      Distribute keys\n           |--> --> --> --> --> -->\
    \ --> Group member\n           |\n           |\n           \\/      Distribute\
    \ keys\n           |--> --> --> --> --> --> --> Group member\n               \
    \       Figure 4:  Group Establishment\n   Validate command  The create group\
    \ command is signed by the group\n   commander ( they may be the same device).\
    \  This signature should be\n   asymmetric in nature.  The public key to validate\
    \ this command can be\n   sent with the command itself, if the public bound to\
    \ the identity of\n   the commander.\n   The group controller receives the command.\
    \  It verifies that the\n   signature, thereby ensuring the message was sent by\
    \ the claimed\n   source and the message has not been modified in transit.\n \
    \  Creation of group keys  The controller initiates the creation of two\n   keys\
    \ for use in the group.  The creation of a cryptographic key\n   requires that\
    \ the key be sufficiently random.  Randomizers, capable\n   of creating high grade\
    \ cryptographic key, tend to be hardware based\n   and are not likely to be practical\
    \ for this protocol.  There are\n   several established key creation protocols\
    \ based in software (e.g.,\n   Diffe-Hellman, FireFly, RSA). All these software\
    \ based algorithms\n   involve two hosts cooperating to create a cryptographic\
    \ key.  These\n   software algorithms are more appropriate for this protocol.\n\
    \   Also important, in the creation of these keys, is verification of the\n  \
    \ authorization of the key creation partner.  Authorization to posses\n   the\
    \ keys include permissions that equal or exceed the group traffic\n   and identity\
    \ verification.\n   Distribution of group keys  The controller distributes the\
    \ group keys\n   to the net members.  The controller must verify the identity\
    \ and\n   permissions of each member prior to the key being distributed.\n   \
    \                        Rekey Group\n   Group Controller --> --> --> --> -->\
    \ -->{Group (group member 1-n)}\n                          Figure 5:  Group Rekey\n\
    \   Likewise, the net member must verify the controller's identity,\n   authorization\
    \ to perform this action, and permissions.\n   The key being distributed is the\
    \ same level as the data that it will\n   encrypt.  Hence, we must encrypt the\
    \ key during distribution.  If no\n   suitable key exists between the controller\
    \ and member, a new key must\n   be created.  This new key is cooperatively created\
    \ between the\n   controller and net member in a similar manner as the net keys.\n\
    \   The controller creates a message for encryption in the key held\n   between\
    \ the controller and member.  This message will include key\n   management information\
    \ and the keys.\n"
- title: 3.3.2 Group rekey
  contents:
  - "3.3.2 Group rekey\n   Cryptographic key has a life span.  New key must replace\
    \ \"old\" key\n   prior to the end of its cryptographic life.  This process is\
    \ rekey.\n   Rekey has the advantage of using an existing cryptographic\n   association\
    \ to distribute key.  Also, there is no requirement to\n   verify the identity\
    \ and authorization for the other members.\n   Identify and authorization are\
    \ assumed.\n   A group rekey consists of two stages.  First the Group Controller\n\
    \   creates new group keys.  Second these \"new\" keys are sent to the\n   Group\
    \ Members in a multicast message.  Refer to figure 5:  Group\n   Rekey.\n   Creation\
    \ of group keys  The controller of the rekey will create the\n   new keys in exactly\
    \ the same manner as used during group\n   establishment.\n   Distribution of\
    \ group keys  The GKMP creates a message for the group\n   address.  This message\
    \ uses one of the keys distributed during group\n   establishment to encrypt the\
    \ new keys.  It also contains an\n   authorization token identifying the controller\
    \ as the rekey agent and\n   new management data.  All members of the group using\
    \ a multicast\n   protocol (if one exists) accept this message.\n   The message\
    \ which rekeys the group encrypts the new keys in the\n   existing KEK. Since\
    \ all group members possess the KEK the entire\n   group can decrypt this message.\n\
    \   The token authorizing the group controller to perform this rekey is\n   also\
    \ included.  This token is asymmetrically signed by the group\n   commander. \
    \ It uniquely identifies the group controller's authority\n   to rekey this group.\
    \  It also identifies the group the level of\n   traffic and rekey interval.\n"
- title: 3.3.3 Deletion
  contents:
  - "3.3.3 Deletion\n   It is desirable to be able to delete group members for either\n\
    \   administrative purposes or security reasons.  Administrative deletion\n  \
    \ is the deletion of a trusted group member.  It is possible to confirm\n   the\
    \ deletion of trusted group members.  Security relevant deletion is\n   the deletion\
    \ of an untrusted member.  It assumes that the member is\n   ignore all deletion\
    \ commands.\n   Administrative delete  Administrative deletion removes the group\
    \ keys\n   from trusted group members.  This deletion consists of two messages\n\
    \   the first sends a command to the group encrypted in the groups TEK.\n   The\
    \ command essentially says:  acknowledge receipt and then delete\n   group keys.\
    \  This command is signed by the group controller to\n   prevent unauthorized\
    \ deletions.\n   The acknowledgment message is also encrypted under the group\
    \ TEK and\n   is sent to acknowledge receipt of the command.  We could acknowledge\n\
    \   accomplishment of the command if the net is willing to accept the\n   burden\
    \ of creating pairwise keys between the exiting group members\n   and the group\
    \ controller.\n   Compromise recovery  Compromise recovery is the deletion of\
    \ untrusted\n   group members.  This actually involves the creation of an entirely\n\
    \   new group, without the untrusted member.  Once the new group is\n   created,\
    \ net operations can be shifted to the new group, effectively\n   denying the\
    \ untrusted member access to the data.\n   There is always a trade-off between\
    \ security and continued net\n   operations when a member is found to be compromised.\
    \  The security\n   first position states that if a member is compromised, the\
    \ group must\n   be destroyed and then a new secure group created.  However,\n\
    \   operational concerns sometimes out weigh the security concerns.  The\n   operational\
    \ position is that the group will continue to operate with\n   the compromised\
    \ member and will shift to a new secure group when it\n   becomes available.\n\
    \   The GKMP does not mandate either position.  However, the speed and\n   flexibility\
    \ of the GKMP does allow a new secure group to be created\n   quickly.  Thereby,\
    \ restricting the potential damage done by a\n   compromised member.\n   Once\
    \ a member is found to be compromised, that members certificate is\n   added to\
    \ a Certificate Revocation List (CRL). The CRL is an\n   asymmetrically signed\
    \ piece of data, signed by a security manager.\n   The list is made up of compromised\
    \ resource ID's, a version of the\n   CRL, and perhaps an identifier of the security\
    \ manager.  The CRL is\n   accessed every time a new key is negotiated.  If one\
    \ of the key\n   creators is on the CRL the key is destroyed and interaction\n\
    \   terminated.\n   The idea behind a CRL is each host would keep records of all\
    \ open\n   associations and compromised resources.  The host would then make\n\
    \   sure that it does not have and will not create a secure association\n   open\
    \ with anyone who is on the CRL. The CRL concept of becomes more\n   complicated\
    \ in the case of groups.  This is because it is not\n   necessary for every member\
    \ in the group to know who the other group\n   members are.  Hence, a group member\
    \ does not have sufficient\n   information to identify compromised group associations.\
    \  The GKMP\n   proposes that the group controllers be responsible for reviewing\
    \ the\n   CRL and taking appropriate actions should a group member be\n   compromised.\n\
    \   Another issue with CRLs is the speed that they can be distributed\n   across\
    \ a network.  Every time a key is created the cooperating hosts\n   exchange the\
    \ version number of their current CRL. If the versions do\n   not match.  The\
    \ most current version is passed to the host with the\n   old version.  Hence,\
    \ CRLs propagate when keys are created.  If this\n   is infrequently and there\
    \ is a single CRL insertion point, the list\n   may take a few days to move across\
    \ the net.  The GKMP allows a\n   speedier distribution of the CRL.\n   The GKMP\
    \ delegates control of groups to specific group controllers (a\n   subset of the\
    \ network).  These controllers are responsible for\n   maintaining the security\
    \ of the group.  If quicker distribution of\n   the CRL were desired, the CRL\
    \ generator ( security management\n   function could seed the CRL at these controllers.\
    \  Controllers are\n   points of key management activity and are logical CRL staging\
    \ areas.\n"
- title: 4 Issues
  contents:
  - "4 Issues\n   What are the unresolved issues with this protocol?\n"
- title: 4.1 Access Control
  contents:
  - "4.1 Access Control\n   One interesting issue with a grouped key protocol is access\
    \ control.\n   This is because we are moving away from having humans in the loop\
    \ or\n   having a central authority to check the propriety of the group.\n   The\
    \ group protocol must police itself.  It must ensure that each\n   member of a\
    \ group meets the classic military access control policy (\n   i.e., a group member`s\
    \ classification level must be higher or equal\n   to the classification of the\
    \ group that it's in).\n   Is allocation of permissions by a higher authority\
    \ sufficient to\n   provide access control?  Or is a more discretionary mechanism\n\
    \   necessary?\n"
- title: 4.2 MLS
  contents:
  - "4.2 MLS\n   A GKMP must be capable of operating in a multi-level secure\n   environment.\
    \  The integration of a key management protocol capable of\n   creating keys of\
    \ several different classifications with an operating\n   system capable of operating\
    \ with multiple classifications in non-\n   trivial.\n   Classified label standards\
    \ needed to be incorporated.  The\n   classification labels used by the key management\
    \ protocol should\n   coincide with the labels used by the MLS operating system.\
    \  These\n   interoperability issues need to be addressed.\n"
- title: 4.3 Error Conditions
  contents:
  - "4.3 Error Conditions\n   A group protocol is more complex than a pairwise protocol\
    \ hence there\n   are more possible error conditions.  In a pairwise protocol\
    \ you have\n   two parties; they must communicate between themselves.  It is\n\
    \   relatively simple to define an take care of all the potential error\n   conditions.\n\
    \   One assumption with any group protocol is the underlying internet is,\n  \
    \ to some degree, always broken.  The protocol designer has to assume\n   that\
    \ messages will be delayed or destroyed in transit, all member\n   will not receive\
    \ all multicast messages, and acknowledgment of\n   actions may not be delivered.\
    \  This assumption is important if a\n   protocol uses multicast functions to\
    \ speed-up actions.\n   The protocol must provide recovery mechanisms to allow\
    \ group members\n   to recover from loss of messages.  It must recover in a way\
    \ that is\n   transparent to the host and underlying communications network.\n\
    \   For example, there is an issue whether or not we can create an\n   application\
    \ layer acknowledgment of multi-cast actions.  The issue\n   deals with the required\
    \ bandwidth that acknowledgment would take up.\n   It may be much more friendly\
    \ to the underlying communications systems\n   to have each member identify potential\
    \ errors and correct them in a\n   pairwise manner.  The task of handling error\
    \ conditions in a key\n   management protocol is double difficult because many\
    \ error conditions\n   can be induced error condition (invoked by a third party\
    \ trying to\n   break the security of that system) to retrieve there key that\
    \ is in\n   transit or to block the successful dissemination of a key thereby\n\
    \   attacking the system security mechanism.\n"
- title: 4.4 Commercial vs.  Military
  contents:
  - "4.4 Commercial vs.  Military\n   Commercial and military key management differ\
    \ in many ways.\n   Commercial Key management protocols tend to emphasize inter-\n\
    \   operability, freedom of action, and performance.  Military systems\n   tend\
    \ to emphasize security and control of operations.\n   There will be a difference\
    \ in cryptographic algorithms.  The military\n   protocol would certainly use\
    \ high grade encryption because of\n   protecting classified information.  The\
    \ commercial system would\n   probably using algorithms.  and techniques certified\
    \ for unclassified\n   communication systems.  The main difference is in the algorithms\n\
    \   length and type.\n   A military protocol would require more management and\
    \ structure than\n   a commercial one.  The military has always adopted a hierarchical\n\
    \   communication structure and the commercial system, especially if you\n   look\
    \ at the internet, work mainly by anarchist style.\n"
- title: 4.4.1 Algorithm Type
  contents:
  - "4.4.1 Algorithm Type\n   Another difference between military and commercial key\
    \ management is\n   the type of cryptographic algorithms.  The commercial world\
    \ uses\n   encryption algorithms like DES and in the future Skipjack.  The\n \
    \  military uses other cryptographic algorithms that differ in key\n   length\
    \ and have more restrictions.  An example of this would be the\n   identification\
    \ of ACCORDION, as a military key encryption algorithm\n   as used in the EKMS\
    \ program run by NSA.\n   Any experiments with a grouped key management protocol\
    \ must consider\n   the differences between military and commercial algorithms.\
    \  The\n   commercial algorithms tend to be quicker to implement, run faster,\n\
    \   involve less processing time, and allows an unclassified experiment.\n   However,\
    \ we must be careful not paint an unrealistic picture of the\n   performance of\
    \ the protocol based on these commercial algorithms.  A\n   military algorithm\
    \ tends to be more cumbersome to process, slow to\n   process, require more bandwidth,\
    \ a lot of unpleasant characteristics\n   from the commercial stand point, but\
    \ allow for a higher grade of\n   cryptographic security.  One way of dealing\
    \ with the disparity\n   between algorithms is to use the commercial cryptographic\
    \ algorithms\n   and leave the fields the size used by a comparative DOD cryptographic\n\
    \   algorithms and insert delays to simulate DOD algorithm processing\n   times.\n"
- title: 4.4.2 Management Philosophy
  contents:
  - "4.4.2 Management Philosophy\n   Management for a military network is far more\
    \ structured than a\n   commercial network.  A military network would restrict\
    \ the creation\n   of network groups, the rekeying of those groups, and access\
    \ to the\n   data contained in those groups.  In contrast the commercial world\n\
    \   would enable any member in the network to create a group and allow\n   any\
    \ other member of the net to join that group.\n   The group Key Management Protocol\
    \ must allow for both these\n   architectures i.e., all for very structure command\
    \ control hierarchy\n   and another free form group creation.\n"
- title: 4.5 Receiver Initiated Operations
  contents:
  - "4.5 Receiver Initiated Operations\n   How do they actually work, what are the\
    \ performance trades,\n   experimentation needed.\n   Who is the group leader?\n\
    \   How do we elect a new leader?\n   Will multiple leaders be created?\n   Will\
    \ rule based access control allow fine enough access disgression?\n   Methods\
    \ for distributed GKP/GRP dissemination need to be examined.\n   This includes:\n\
    \    o  resolving group identification issues, such as how to notify\n       potential\
    \ members of membership requirements without compromising\n       any security-relevant\
    \ information about the group;\n    o  approaches for rapidly identifying GKP/GRP\
    \ sources must be\n       developed, such as a \"Key ARP\" whereby a new member\
    \ broadcasts\n       into the group a request for key service and existing members\n\
    \       resolve which will provide service; and,\n    o  Security effects of distributing\
    \ access control decisions must\n       also be reviewed.\n"
- title: 5 Security Considerations
  contents:
  - "5 Security Considerations\n   This document, in entirety, concerns security.\n"
- title: 6 Addresses of Authors
  contents:
  - "6 Addresses of Authors\n   Hugh Harney\n   SPARTA, Inc.\n   Secure Systems Engineering\
    \ Division\n   9861 Broken Land Parkway, Suite 300\n   Columbia, MD 21046-1170\n\
    \   United States\n   telephone:        +1 410 381 9400 (ext.  203)\n   electronic\
    \ mail:  hh@columbia.sparta.com\n   Carl Muckenhirn\n   SPARTA, Inc.\n   Secure\
    \ Systems Engineering Division\n   9861 Broken Land Parkway, Suite 300\n   Columbia,\
    \ MD 21046-1170\n   United States\n   telephone:        +1 410 381 9400 (ext.\
    \  208)\n   electronic mail:  cfm@columbia.sparta.com\n"
