- title: __initial_text__
  contents:
  - '           Using the NETCONF Protocol over Secure Shell (SSH)

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes a method for invoking and running the Network\n\
    \   Configuration Protocol (NETCONF) within a Secure Shell (SSH) session\n   as\
    \ an SSH subsystem.  This document obsoletes RFC 4742.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6242.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  Requirements Terminology . . . . . . . . . . . . . .\
    \ . . . . .  2\n   3.  Starting NETCONF over SSH  . . . . . . . . . . . . . .\
    \ . . . .  2\n     3.1.  Capabilities Exchange  . . . . . . . . . . . . . . .\
    \ . . .  3\n   4.  Using NETCONF over SSH . . . . . . . . . . . . . . . . . .\
    \ . .  4\n     4.1.  Framing Protocol . . . . . . . . . . . . . . . . . . . .\
    \ .  5\n     4.2.  Chunked Framing Mechanism  . . . . . . . . . . . . . . . .\
    \  5\n     4.3.  End-of-Message Framing Mechanism . . . . . . . . . . . . .  7\n\
    \   5.  Exiting the NETCONF Subsystem  . . . . . . . . . . . . . . . .  8\n  \
    \ 6.  Security Considerations  . . . . . . . . . . . . . . . . . . .  8\n   7.\
    \  IANA Considerations  . . . . . . . . . . . . . . . . . . . . .  9\n   8.  Acknowledgements\
    \ . . . . . . . . . . . . . . . . . . . . . . . 10\n   9.  References . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . 10\n     9.1.  Normative References\
    \ . . . . . . . . . . . . . . . . . . . 10\n     9.2.  Informative References\
    \ . . . . . . . . . . . . . . . . . . 10\n   Appendix A.  Changes from RFC 4742\
    \ . . . . . . . . . . . . . . . . 11\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The NETCONF protocol [RFC6241] is an XML-based protocol\
    \ used to\n   manage the configuration of networking equipment.  NETCONF is defined\n\
    \   to be session-layer and transport independent, allowing mappings to\n   be\
    \ defined for multiple session-layer or transport protocols.  This\n   document\
    \ defines how NETCONF can be used within a Secure Shell (SSH)\n   session, using\
    \ the SSH connection protocol [RFC4254] over the SSH\n   transport protocol [RFC4253].\
    \  This mapping will allow NETCONF to be\n   executed from a secure shell session\
    \ by a user or application.\n   Although this document gives specific examples\
    \ of how NETCONF\n   messages are sent over an SSH connection, use of this transport\
    \ is\n   not restricted to the messages shown in the examples below.  This\n \
    \  transport can be used for any NETCONF message.\n"
- title: 2.  Requirements Terminology
  contents:
  - "2.  Requirements Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 3.  Starting NETCONF over SSH
  contents:
  - "3.  Starting NETCONF over SSH\n   To run NETCONF over SSH, the SSH client will\
    \ first establish an SSH\n   transport connection using the SSH transport protocol,\
    \ and the SSH\n   client and SSH server will exchange keys for message integrity\
    \ and\n   encryption.  The SSH client will then invoke the \"ssh-userauth\"\n\
    \   service to authenticate the user, as described in the SSH\n   authentication\
    \ protocol [RFC4252].  Once the user has been\n   successfully authenticated,\
    \ the SSH client will invoke the\n   \"ssh-connection\" service, also known as\
    \ the SSH connection protocol.\n   The username provided by the SSH implementation\
    \ will be made\n   available to the NETCONF message layer as the NETCONF username\n\
    \   without modification.  If the username does not comply to the NETCONF\n  \
    \ requirements on usernames [RFC6241], i.e., the username is not\n   representable\
    \ in XML, the SSH session MUST be dropped.  Any\n   transformations applied to\
    \ the authenticated identity of the SSH\n   client made by the SSH server (e.g.,\
    \ via authentication services or\n   mappings to system accounts) are outside\
    \ the scope of this document.\n   After the ssh-connection service is established,\
    \ the SSH client will\n   open a channel of type \"session\", which will result\
    \ in an SSH\n   session.\n   Once the SSH session has been established, the NETCONF\
    \ client will\n   invoke NETCONF as an SSH subsystem called \"netconf\".  Subsystem\n\
    \   support is a feature of SSH version 2 (SSHv2) and is not included in\n   SSHv1.\
    \  Running NETCONF as an SSH subsystem avoids the need for the\n   script to recognize\
    \ shell prompts or skip over extraneous\n   information, such as a system message\
    \ that is sent at shell start-up.\n   In order to allow NETCONF traffic to be\
    \ easily identified and\n   filtered by firewalls and other network devices, NETCONF\
    \ servers MUST\n   default to providing access to the \"netconf\" SSH subsystem\
    \ only when\n   the SSH session is established using the IANA-assigned TCP port\
    \ 830.\n   Servers SHOULD be configurable to allow access to the netconf SSH\n\
    \   subsystem over other ports.\n   A user (or application) could use the following\
    \ command line to\n   invoke NETCONF as an SSH subsystem on the IANA-assigned\
    \ port:\n   [user@client]$ ssh -s server.example.org -p 830 netconf\n   Note that\
    \ the -s option causes the command (\"netconf\") to be invoked\n   as an SSH subsystem.\n"
- title: 3.1.  Capabilities Exchange
  contents:
  - "3.1.  Capabilities Exchange\n   As specified in [RFC6241], the NETCONF server\
    \ indicates its\n   capabilities by sending an XML document containing a <hello>\
    \ element\n   as soon as the NETCONF session is established.  The NETCONF client\n\
    \   can parse this message to determine which NETCONF capabilities are\n   supported\
    \ by the NETCONF server.\n   As [RFC6241] states, the NETCONF client also sends\
    \ an XML document\n   containing a <hello> element to indicate the NETCONF client's\n\
    \   capabilities to the NETCONF server.  The document containing the\n   <hello>\
    \ element is the first XML document that the NETCONF client\n   sends after the\
    \ NETCONF session is established.\n   The following example shows a capability\
    \ exchange.  Data sent by the\n   NETCONF client are marked with \"C:\", and data\
    \ sent by the NETCONF\n   server are marked with \"S:\".\n   S: <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n   S: <hello xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n   S:   <capabilities>\n   S:     <capability>\n   S:       urn:ietf:params:netconf:base:1.1\n\
    \   S:     </capability>\n   S:     <capability>\n   S:       urn:ietf:params:ns:netconf:capability:startup:1.0\n\
    \   S:     </capability>\n   S:   </capabilities>\n   S:   <session-id>4</session-id>\n\
    \   S: </hello>\n   S: ]]>]]>\n   C: <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n   C: <hello xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n   C:   <capabilities>\n\
    \   C:     <capability>\n   C:       urn:ietf:params:netconf:base:1.1\n   C: \
    \    </capability>\n   C:   </capabilities>\n   C: </hello>\n   C: ]]>]]>\n  \
    \ Although the example shows the NETCONF server sending a <hello>\n   message\
    \ followed by the NETCONF client's <hello> message, both sides\n   will send the\
    \ message as soon as the NETCONF subsystem is\n   initialized, perhaps simultaneously.\n"
- title: 4.  Using NETCONF over SSH
  contents:
  - "4.  Using NETCONF over SSH\n   A NETCONF over SSH session consists of a NETCONF\
    \ client and NETCONF\n   server exchanging complete XML documents.  Once the session\
    \ has been\n   established and capabilities have been exchanged, the NETCONF client\n\
    \   will send complete XML documents containing <rpc> elements to the\n   server,\
    \ and the NETCONF server will respond with complete XML\n   documents containing\
    \ <rpc-reply> elements.\n"
- title: 4.1.  Framing Protocol
  contents:
  - "4.1.  Framing Protocol\n   The previous version of this document defined the\
    \ character sequence\n   \"]]>]]>\" as a message separator, under the assumption\
    \ that it could\n   not be found in well-formed XML documents.  However, this\
    \ assumption\n   is not correct.  It can legally appear in XML attributes, comments,\n\
    \   and processing instructions.  In order to solve this problem, and at\n   the\
    \ same time be compatible with existing implementations, this\n   document defines\
    \ the following framing protocol.\n   The <hello> message MUST be followed by\
    \ the character sequence\n   ]]>]]>.  Upon reception of the <hello> message, the\
    \ receiving peer's\n   SSH Transport layer conceptually passes the <hello> message\
    \ to the\n   Messages layer.  If the :base:1.1 capability is advertised by both\n\
    \   peers, the chunked framing mechanism (see Section 4.2) is used for\n   the\
    \ remainder of the NETCONF session.  Otherwise, the old end-of-\n   message-based\
    \ mechanism (see Section 4.3) is used.\n"
- title: 4.2.  Chunked Framing Mechanism
  contents:
  - "4.2.  Chunked Framing Mechanism\n   This mechanism encodes all NETCONF messages\
    \ with a chunked framing.\n   Specifically, the message follows the ABNF [RFC5234]\
    \ rule Chunked-\n   Message:\n        Chunked-Message = 1*chunk\n            \
    \              end-of-chunks\n        chunk           = LF HASH chunk-size LF\n\
    \                          chunk-data\n        chunk-size      = 1*DIGIT1 0*DIGIT\n\
    \        chunk-data      = 1*OCTET\n        end-of-chunks   = LF HASH HASH LF\n\
    \        DIGIT1          = %x31-39\n        DIGIT           = %x30-39\n      \
    \  HASH            = %x23\n        LF              = %x0A\n        OCTET     \
    \      = %x00-FF\n   The chunk-size field is a string of decimal digits indicating\
    \ the\n   number of octets in chunk-data.  Leading zeros are prohibited, and\n\
    \   the maximum allowed chunk-size value is 4294967295.\n   As an example, the\
    \ message:\n       <rpc message-id=\"102\"\n            xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n         <close-session/>\n       </rpc>\n   could be encoded as (using '\\\
    n' as a visible representation of the\n   LineFeed character):\n   C:  \\n#4\\\
    n\n   C:  <rpc\n   C:  \\n#18\\n\n   C:   message-id=\"102\"\\n\n   C:  \\n#79\\\
    n\n   C:       xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\\n\n   C:  \
    \  <close-session/>\\n\n   C:  </rpc>\n   C:  \\n##\\n\n   Conceptually, the SSH\
    \ Transport layer encodes messages sent by the\n   Messages layer, and decodes\
    \ messages received on the SSH channel\n   before passing them to the Messages\
    \ layer.\n   The examples for the chunked framing mechanism show all LineFeeds,\n\
    \   even those that are not used as part of the framing mechanism.  Note\n   that\
    \ the SSH transport does not interpret the XML content; thus, it\n   does not\
    \ care about any optional XML-specific LineFeeds.\n   In the second and third\
    \ chunks quoted above, each line is terminated\n   by a LineFeed.  For all the\
    \ XML lines (except the last one), this\n   example treats the LineFeed as part\
    \ of the chunk-data and so\n   contributing to the chunk-size.\n   Note that there\
    \ is no LineFeed character after the <rpc> end tag in\n   this message.  The LineFeed\
    \ required by the start of the end-of-\n   chunks block immediately follows the\
    \ last '>' character in the\n   message.\n   If the chunk-size and the chunk-size\
    \ value respectively are invalid\n   or if an error occurs during the decoding\
    \ process, the peer MUST\n   terminate the NETCONF session by closing the corresponding\
    \ SSH\n   channel.  Implementations MUST ensure they are not vulnerable for a\n\
    \   buffer overrun.\n"
- title: 4.3.  End-of-Message Framing Mechanism
  contents:
  - "4.3.  End-of-Message Framing Mechanism\n   This mechanism exists for backwards\
    \ compatibility with\n   implementations of previous versions of this document.\
    \  It is only\n   used when the remote peer does not advertise a base protocol\
    \ version\n   supporting chunked encoding, i.e., a NETCONF implementation only\n\
    \   supporting :base:1.0.\n   When this mechanism is used, the special character\
    \ sequence ]]>]]>,\n   MUST be sent by both the NETCONF client and the NETCONF\
    \ server after\n   each message (XML document) in the NETCONF exchange.  Conceptually,\n\
    \   the SSH Transport layer passes any data found in between the ]]>]]>\n   characters\
    \ to the Messages layer.\n   A NETCONF over SSH session, using the backwards-compatible\
    \ end-of-\n   message framing to retrieve a set of configuration information,\
    \ might\n   look like this:\n   C: <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\
    \   C: <rpc message-id=\"105\"\n   C: xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n   C:   <get-config>\n   C:     <source><running/></source>\n   C:     <config\
    \ xmlns=\"http://example.com/schema/1.2/config\">\n   C:      <users/>\n   C:\
    \     </config>\n   C:   </get-config>\n   C: </rpc>\n   C: ]]>]]>\n   S: <?xml\
    \ version=\"1.0\" encoding=\"UTF-8\"?>\n   S: <rpc-reply message-id=\"105\"\n\
    \   S: xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n   S:   <config xmlns=\"\
    http://example.com/schema/1.2/config\">\n   S:     <users>\n   S:       <user><name>root</name><type>superuser</type></user>\n\
    \   S:       <user><name>fred</name><type>admin</type></user>\n   S:       <user><name>barney</name><type>admin</type></user>\n\
    \   S:     </users>\n   S:   </config>\n   S: </rpc-reply>\n   S: ]]>]]>\n"
- title: 5.  Exiting the NETCONF Subsystem
  contents:
  - "5.  Exiting the NETCONF Subsystem\n   Exiting NETCONF is accomplished using the\
    \ <close-session> operation.\n   A NETCONF server will process NETCONF messages\
    \ from the NETCONF\n   client in the order in which they are received.  When the\
    \ NETCONF\n   server processes a <close-session> operation, the NETCONF server\n\
    \   SHALL respond and close the SSH session channel.  The NETCONF server\n   MUST\
    \ NOT process any NETCONF messages received after the\n   <close-session> operation.\n\
    \   To continue the example used in Section 4.2, an existing NETCONF\n   subsystem\
    \ session could be closed as follows:\n   C: \\n#140\\n\n   C: <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\\n\n   C: <rpc message-id=\"106\"\\n\n   C:      xmlns=\"\
    urn:ietf:params:xml:ns:netconf:base:1.0\">\\n\n   C:   <close-session/>\\n\n \
    \  C: </rpc>\n   C: \\n##\\n\n   S: \\n#139\\n\n   S: <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\\n\n   S: <rpc-reply id=\"106\"\\n\n   S:            xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\\n\n   S:   <ok/>\\n\n   S: </rpc-reply>\n   S: \\n##\\n\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   NETCONF is used to access configuration and state\
    \ information and to\n   modify configuration information, so the ability to access\
    \ this\n   protocol should be limited to users and systems that are authorized\n\
    \   to view the NETCONF server's configuration and state or to modify the\n  \
    \ NETCONF server's configuration.\n   The identity of the SSH server MUST be verified\
    \ and authenticated by\n   the SSH client according to local policy before password-based\n\
    \   authentication data or any configuration or state data is sent to or\n   received\
    \ from the SSH server.  The identity of the SSH client MUST\n   also be verified\
    \ and authenticated by the SSH server according to\n   local policy to ensure\
    \ that the incoming SSH client request is\n   legitimate before any configuration\
    \ or state data is sent to or\n   received from the SSH client.  Neither side\
    \ should establish a\n   NETCONF over SSH connection with an unknown, unexpected,\
    \ or incorrect\n   identity on the opposite side.\n   Configuration or state data\
    \ may include sensitive information, such\n   as usernames or security keys. \
    \ So, NETCONF requires communications\n   channels that provide strong encryption\
    \ for data privacy.  This\n   document defines a NETCONF over SSH mapping that\
    \ provides for support\n   of strong encryption and authentication.\n   This document\
    \ requires that SSH servers default to allowing access to\n   the \"netconf\"\
    \ SSH subsystem only when using a specific TCP port\n   assigned by IANA for this\
    \ purpose.  This will allow NETCONF over SSH\n   traffic to be easily identified\
    \ and filtered by firewalls and other\n   network nodes.  However, it will also\
    \ allow NETCONF over SSH traffic\n   to be more easily identified by attackers.\n\
    \   This document also recommends that SSH servers be configurable to\n   allow\
    \ access to the \"netconf\" SSH subsystem over other ports.  Use of\n   that configuration\
    \ option without corresponding changes to firewall\n   or network device configuration\
    \ may unintentionally result in the\n   ability for nodes outside of the firewall\
    \ or other administrative\n   boundaries to gain access to the \"netconf\" SSH\
    \ subsystem.\n   RFC 4742 assumes that the end-of-message (EOM) sequence, ]]>]]>,\n\
    \   cannot appear in any well-formed XML document, which turned out to be\n  \
    \ mistaken.  The EOM sequence can cause operational problems and open\n   space\
    \ for attacks if sent deliberately in RPC messages.  It is\n   however believed\
    \ that the associated threat is not very high.  This\n   document still uses the\
    \ EOM sequence for the initial <hello> message\n   to avoid incompatibility with\
    \ existing implementations.  When both\n   peers implement base:1.1 capability,\
    \ a proper framing protocol\n   (chunked framing mechanism; see Section 4.2) is\
    \ used for the rest of\n   the NETCONF session, to avoid injection attacks.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   Based on the previous version of this document, RFC\
    \ 4742, IANA\n   assigned the TCP port 830 as the default port for NETCONF over\
    \ SSH\n   sessions.\n   IANA had also assigned \"netconf\" as an SSH Subsystem\
    \ Name, as defined\n   in [RFC4250], as follows:\n              Subsystem Name\
    \                  Reference\n              --------------                  ---------\n\
    \              netconf                         RFC 4742\n   IANA updated these\
    \ allocations to refer to this document.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   Ted Goddard was a co-author on earlier versions of this\
    \ document.\n   This document was written using the xml2rfc tool described in\
    \ RFC\n   2629 [RFC2629].\n   Extensive input was received from the other members\
    \ of the NETCONF\n   design team, including: Andy Bierman, Weijing Chen, Rob Enns,\
    \ Wes\n   Hardaker, David Harrington, Eliot Lear, Simon Leinen, Phil Shafer,\n\
    \   Juergen Schoenwaelder, and Steve Waldbusser.  The following people\n   have\
    \ also reviewed this document and provided valuable input: Olafur\n   Gudmundsson,\
    \ Sam Hartman, Scott Hollenbeck, Bill Sommerfeld, Balazs\n   Lengyel, Bert Wijnen,\
    \ Mehmet Ersue, Martin Bjorklund, Lada Lothka,\n   Kent Watsen, and Tom Petch.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC4250]  Lehtinen, S. and C. Lonvick, \"The Secure Shell (SSH)\n\
    \              Protocol Assigned Numbers\", RFC 4250, January 2006.\n   [RFC4252]\
    \  Ylonen, T. and C. Lonvick, \"The Secure Shell (SSH)\n              Authentication\
    \ Protocol\", RFC 4252, January 2006.\n   [RFC4253]  Ylonen, T. and C. Lonvick,\
    \ \"The Secure Shell (SSH)\n              Transport Layer Protocol\", RFC 4253,\
    \ January 2006.\n   [RFC4254]  Ylonen, T. and C. Lonvick, \"The Secure Shell (SSH)\n\
    \              Connection Protocol\", RFC 4254, January 2006.\n   [RFC5234]  Crocker,\
    \ D. and P. Overell, \"Augmented BNF for Syntax\n              Specifications:\
    \ ABNF\", STD 68, RFC 5234, January 2008.\n   [RFC6241]  Enns, R., Ed., Bjorklund,\
    \ M., Ed., Schoenwaelder, J., Ed.,\n              and A.  Bierman, Ed., \"Network\
    \ Configuration Protocol\n              (NETCONF)\", RFC 6241, June 2011.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [RFC2629]  Rose, M., \"Writing I-Ds and RFCs\
    \ using XML\", RFC 2629,\n              June 1999.\n"
- title: Appendix A.  Changes from RFC 4742
  contents:
  - "Appendix A.  Changes from RFC 4742\n   This section lists major changes between\
    \ this document and RFC 4742.\n   o  Introduced the new chunked framing mechanism\
    \ to solve known\n      security issues with the EOM framing.\n   o  Extended\
    \ text in Security Considerations; added text on EOM\n      issues.\n   o  Added\
    \ examples to show new chunked encoding properly; highlighted\n      the location\
    \ of new lines.\n   o  Added text for NETCONF username handling following the\n\
    \      requirements on usernames in [RFC6241].\n   o  Changed use of the terms\
    \ \"client/server\" and \"manager/agent\" to\n      \"SSH client/server\" and\
    \ \"NETCONF client/server\".\n   o  Consistently used the term \"operation\",\
    \ instead of \"command\" or\n      \"message\".\n   o  Integrated errata verified\
    \ for RFC 4742 as of the date of\n      publication of this document.  See errata\
    \ for RFC 4742 at\n      http://www.rfc-editor.org.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Margaret Wasserman\n   Painless Security, LLC\n   356 Abbott\
    \ Street\n   North Andover, MA  01845\n   USA\n   Phone: +1 781 405-7464\n   EMail:\
    \ mrw@painless-security.com\n   URI:   http://www.painless-security.com\n"
