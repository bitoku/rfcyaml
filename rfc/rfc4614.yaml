- title: __initial_text__
  contents:
  - "           A Roadmap for Transmission Control Protocol (TCP)\n              \
    \          Specification Documents\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document contains a \"roadmap\" to the Requests for Comments\
    \ (RFC)\n   documents relating to the Internet's Transmission Control Protocol\n\
    \   (TCP).  This roadmap provides a brief summary of the documents\n   defining\
    \ TCP and various TCP extensions that have accumulated in the\n   RFC series.\
    \  This serves as a guide and quick reference for both TCP\n   implementers and\
    \ other parties who desire information contained in\n   the TCP-related RFCs.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Basic Functionality .............................................4\n  \
    \ 3. Recommended Enhancements ........................................6\n    \
    \  3.1. Congestion Control and Loss Recovery Extensions ............7\n      3.2.\
    \ SACK-Based Loss Recovery and Congestion Control ............8\n      3.3. Dealing\
    \ with Forged Segments ...............................9\n   4. Experimental Extensions\
    \ ........................................10\n   5. Historic Extensions ............................................13\n\
    \   6. Support Documents ..............................................14\n  \
    \    6.1. Foundational Works ........................................15\n    \
    \  6.2. Difficult Network Environments ............................16\n      6.3.\
    \ Implementation Advice .....................................19\n      6.4. Management\
    \ Information Bases ..............................20\n      6.5. Tools and Tutorials\
    \ .......................................22\n      6.6. Case Studies ..............................................22\n\
    \   7. Undocumented TCP Features ......................................23\n  \
    \ 8. Security Considerations ........................................24\n   9.\
    \ Acknowledgments ................................................24\n   10. Informative\
    \ References ........................................25\n      10.1. Basic Functionality\
    \ ......................................25\n      10.2. Recommended Enhancements\
    \ .................................25\n      10.3. Experimental Extensions ..................................26\n\
    \      10.4. Historic Extensions ......................................27\n  \
    \    10.5. Support Documents ........................................28\n    \
    \  10.6. Informative References Outside the RFC Series ............31\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   A correct and efficient implementation of the Transmission\
    \ Control\n   Protocol (TCP) is a critical part of the software of most Internet\n\
    \   hosts.  As TCP has evolved over the years, many distinct documents\n   have\
    \ become part of the accepted standard for TCP.  At the same time,\n   a large\
    \ number of more experimental modifications to TCP have also\n   been published\
    \ in the RFC series, along with informational notes,\n   case studies, and other\
    \ advice.\n   As an introduction to newcomers and an attempt to organize the\n\
    \   plethora of information for old hands, this document contains a\n   \"roadmap\"\
    \ to the TCP-related RFCs.  It provides a brief summary of\n   the RFC documents\
    \ that define TCP.  This should provide guidance to\n   implementers on the relevance\
    \ and significance of the standards-track\n   extensions, informational notes,\
    \ and best current practices that\n   relate to TCP.\n   This document is not\
    \ an update of RFC 1122 and is not a rigorous\n   standard for what needs to be\
    \ implemented in TCP.  This document is\n   merely an informational roadmap that\
    \ captures, organizes, and\n   summarizes most of the RFC documents that a TCP\
    \ implementer,\n   experimenter, or student should be aware of.  Particular comments\
    \ or\n   broad categorizations that this document makes about individual\n   mechanisms\
    \ and behaviors are not to be taken as definitive, nor\n   should the content\
    \ of this document alone influence implementation\n   decisions.\n   This roadmap\
    \ includes a brief description of the contents of each\n   TCP-related RFC.  In\
    \ some cases, we simply supply the abstract or a\n   key summary sentence from\
    \ the text as a terse description.  In\n   addition, a letter code after an RFC\
    \ number indicates its category in\n   the RFC series (see BCP 9 [RFC2026] for\
    \ explanation of these\n   categories):\n      S - Standards Track (Proposed Standard,\
    \ Draft Standard, or\n          Standard)\n      E - Experimental\n      B - Best\
    \ Current Practice\n      I - Informational\n   Note that the category of an RFC\
    \ does not necessarily reflect its\n   current relevance.  For instance, RFC 2581\
    \ is nearly universally\n   deployed although it is only a Proposed Standard.\
    \  Similarly, some\n   Informational RFCs contain significant technical proposals\
    \ for\n   changing TCP.\n   This roadmap is divided into four main sections. \
    \ Section 2 lists the\n   RFCs that describe absolutely required TCP behaviors\
    \ for proper\n   functioning and interoperability.  Further RFCs that describe\n\
    \   strongly encouraged, but non-essential, behaviors are listed in\n   Section\
    \ 3.  Experimental extensions that are not yet standard\n   practices, but that\
    \ potentially could be in the future, are described\n   in Section 4.\n   The\
    \ reader will probably notice that these three sections are broadly\n   equivalent\
    \ to MUST/SHOULD/MAY specifications (per RFC 2119), and\n   although the authors\
    \ support this intuition, this document is merely\n   descriptive; it does not\
    \ represent a binding standards-track\n   position.  Individual implementers still\
    \ need to examine the\n   standards documents themselves to evaluate specific\
    \ requirement\n   levels.\n   A small number of older experimental extensions\
    \ that have not been\n   widely implemented, deployed, and used are noted in Section\
    \ 5.  Many\n   other supporting documents that are relevant to the development,\n\
    \   implementation, and deployment of TCP are described in Section 6.\n   Within\
    \ each section, RFCs are listed in the chronological order of\n   their publication\
    \ dates.\n   A small number of fairly ubiquitous important implementation\n  \
    \ practices that are not currently documented in the RFC series are\n   listed\
    \ in Section 7.\n"
- title: 2.  Basic Functionality
  contents:
  - "2.  Basic Functionality\n   A small number of documents compose the core specification\
    \ of TCP.\n   These define the required basic functionalities of TCP's header\n\
    \   parsing, state machine, congestion control, and retransmission\n   timeout\
    \ computation.  These base specifications must be correctly\n   followed for interoperability.\n\
    \   RFC 793 S: \"Transmission Control Protocol\", STD 7 (September 1981)\n   \
    \   This is the fundamental TCP specification document [RFC0793].\n      Written\
    \ by Jon Postel as part of the Internet protocol suite's\n      core, it describes\
    \ the TCP packet format, the TCP state machine\n      and event processing, and\
    \ TCP's semantics for data transmission,\n      reliability, flow control, multiplexing,\
    \ and acknowledgment.\n      Section 3.6 of RFC 793, describing TCP's handling\
    \ of the IP\n      precedence and security compartment, is mostly irrelevant today.\n\
    \      RFC 2873 changed the IP precedence handling, and the security\n      compartment\
    \ portion of the API is no longer implemented or used.\n      In addition, RFC\
    \ 793 did not describe any congestion control\n      mechanism.  Otherwise, however,\
    \ the majority of this document\n      still accurately describes modern TCPs.\
    \  RFC 793 is the last of a\n      series of developmental TCP specifications,\
    \ starting in the\n      Internet Experimental Notes (IENs) and continuing in\
    \ the RFC\n      series.\n   RFC 1122 S: \"Requirements for Internet Hosts - Communication\
    \ Layers\"\n   (October 1989)\n      This document [RFC1122] updates and clarifies\
    \ RFC 793, fixing some\n      specification bugs and oversights.  It also explains\
    \ some features\n      such as keep-alives and Karn's and Jacobson's RTO estimation\n\
    \      algorithms [KP87][Jac88][JK92].  ICMP interactions are mentioned,\n   \
    \   and some tips are given for efficient implementation.  RFC 1122 is\n     \
    \ an Applicability Statement, listing the various features that\n      MUST, SHOULD,\
    \ MAY, SHOULD NOT, and MUST NOT be present in\n      standards-conforming TCP\
    \ implementations.  Unlike a purely\n      informational \"roadmap\", this Applicability\
    \ Statement is a\n      standards document and gives formal rules for implementation.\n\
    \   RFC 2460 S: \"Internet Protocol, Version 6 (IPv6) Specification\n   (December\
    \ 1998)\n      This document [RFC2460] is of relevance to TCP because it defines\n\
    \      how the pseudo-header for TCP's checksum computation is derived\n     \
    \ when 128-bit IPv6 addresses are used instead of 32-bit IPv4\n      addresses.\
    \  Additionally, RFC 2675 describes TCP changes required\n      to support IPv6\
    \ jumbograms.\n   RFC 2581 S: \"TCP Congestion Control\" (April 1999)\n      Although\
    \ RFC 793 did not contain any congestion control\n      mechanisms, today congestion\
    \ control is a required component of\n      TCP implementations.  This document\
    \ [RFC2581] defines the current\n      versions of Van Jacobson's congestion avoidance\
    \ and control\n      mechanisms for TCP, based on his 1988 SIGCOMM paper [Jac88].\
    \  RFC\n      2001 was a conceptual precursor that was obsoleted by RFC 2581.\n\
    \      A number of behaviors that together constitute what the community\n   \
    \   refers to as \"Reno TCP\" are described in RFC 2581.  The name\n      \"Reno\"\
    \ comes from the Net/2 release of the 4.3 BSD operating\n      system.  This is\
    \ generally regarded as the least common\n      denominator among TCP flavors\
    \ currently found running on Internet\n      hosts.  Reno TCP includes the congestion\
    \ control features of slow\n      start, congestion avoidance, fast retransmit,\
    \ and fast recovery.\n      RFC 1122 mandates the implementation of a congestion\
    \ control\n      mechanism, and RFC 2581 details the currently accepted mechanism.\n\
    \      RFC 2581 differs slightly from the other documents listed in this\n   \
    \   section, as it does not affect the ability of two TCP endpoints to\n     \
    \ communicate; however, congestion control remains a critical\n      component\
    \ of any widely deployed TCP implementation and is\n      required for the avoidance\
    \ of congestion collapse and to ensure\n      fairness among competing flows.\n\
    \   RFC 2873 S: \"TCP Processing of the IPv4 Precedence Field\" (June 2000)\n\
    \      This document [RFC2873] removes from the TCP specification all\n      processing\
    \ of the precedence bits of the TOS byte of the IP\n      header.  This resolves\
    \ a conflict over the use of these bits\n      between RFC 793 and Differentiated\
    \ Services [RFC2474].\n   RFC 2988 S: \"Computing TCP's Retransmission Timer\"\
    \ (November 2000)\n      Abstract: \"This document defines the standard algorithm\
    \ that\n      Transmission Control Protocol (TCP) senders are required to use\
    \ to\n      compute and manage their retransmission timer.  It expands on the\n\
    \      discussion in section 4.2.3.1 of RFC 1122 and upgrades the\n      requirement\
    \ of supporting the algorithm from a SHOULD to a MUST.\"\n      [RFC2988]\n"
- title: 3.  Recommended Enhancements
  contents:
  - "3.  Recommended Enhancements\n   This section describes recommended TCP modifications\
    \ that improve\n   performance and security.  RFCs 1323 and 3168 represent fundamental\n\
    \   changes to the protocol.  RFC 1323, based on RFCs 1072 and 1185,\n   allows\
    \ better utilization of high bandwidth-delay product paths by\n   providing some\
    \ needed mechanisms for high-rate transfers.  RFC 3168\n   describes a change\
    \ to the Internet's architecture, whereby routers\n   signal end-hosts of growing\
    \ congestion levels and can do so before\n   packet losses are forced.  Section\
    \ 3.1 lists improvements in the\n   congestion control and loss recovery mechanisms\
    \ specified in RFC\n   2581.  Section 3.2 describes further refinements that make\
    \ use of\n   selective acknowledgments.  Section 3.3 deals with the problem of\n\
    \   preventing forged segments.\n   RFC 1323 S:  \"TCP Extensions for High Performance\"\
    \ (May 1992)\n      This document [RFC1323] defines TCP extensions for window\
    \ scaling,\n      timestamps, and protection against wrapped sequence numbers,\
    \ for\n      efficient and safe operation over paths with large bandwidth-delay\n\
    \      products.  These extensions are commonly found in currently used\n    \
    \  systems; however, they may require manual tuning and\n      configuration.\
    \  One issue in this specification that is still\n      under discussion concerns\
    \ a modification to the algorithm for\n      estimating the mean RTT when timestamps\
    \ are used.\n   RFC 2675 S: \"IPv6 Jumbograms\" (August 1999)\n      IPv6 supports\
    \ longer datagrams than were allowed in IPv4.  These\n      are known as Jumbograms,\
    \ and use with TCP has necessitated changes\n      to the handling of TCP's MSS\
    \ and Urgent fields (both 16 bits).\n      This document [RFC2675] explains those\
    \ changes.  Although it\n      describes changes to basic header semantics, these\
    \ changes should\n      only affect the use of very large segments, such as IPv6\n\
    \      jumbograms, which are currently rarely used in the general\n      Internet.\
    \  Supporting the behavior described in this document does\n      not affect interoperability\
    \ with other TCP implementations when\n      IPv4 or non-jumbogram IPv6 is used.\
    \  This document states that\n      jumbograms are to only be used when it can\
    \ be guaranteed that all\n      receiving nodes, including each router in the\
    \ end-to-end path,\n      will support jumbograms.  If even a single node that\
    \ does not\n      support jumbograms is attached to a local network, then no host\
    \ on\n      that network may use jumbograms.  This explains why jumbogram use\n\
    \      has been rare, and why this document is considered a performance\n    \
    \  optimization and not part of TCP over IPv6's basic functionality.\n   RFC 3168\
    \ S: \"The Addition of Explicit Congestion Notification (ECN)\n   to IP\" (September\
    \ 2001)\n      This document [RFC3168] defines a means for end hosts to detect\n\
    \      congestion before congested routers are forced to discard packets.\n  \
    \    Although congestion notification takes place at the IP level, ECN\n     \
    \ requires support at the transport level (e.g., in TCP) to echo the\n      bits\
    \ and adapt the sending rate.  This document updates RFC 793 to\n      define\
    \ two previously unused flag bits in the TCP header for ECN\n      support.  RFC\
    \ 3540 provides a supplementary (experimental) means\n      for more secure use\
    \ of ECN, and RFC 2884 provides some sample\n      results from using ECN.\n"
- title: 3.1.  Congestion Control and Loss Recovery Extensions
  contents:
  - "3.1.  Congestion Control and Loss Recovery Extensions\n   Two of the most important\
    \ aspects of TCP are its congestion control\n   and loss recovery features.  TCP\
    \ traditionally treats lost packets as\n   indicating congestion-related loss,\
    \ and cannot distinguish between\n   congestion-related loss and loss due to transmission\
    \ errors.  Even\n   when ECN is in use, there is a rather intimate coupling between\n\
    \   congestion control and loss recovery mechanisms.  There are several\n   extensions\
    \ to both features, and more often than not, a particular\n   extension applies\
    \ to both.  In this sub-section, we group\n   enhancements to either congestion\
    \ control, loss recovery, or both,\n   which can be performed unilaterally; that\
    \ is, without negotiating\n   support between endpoints.  In the next sub-section,\
    \ we group the\n   extensions that specify or rely on the SACK option, which must\
    \ be\n   negotiated bilaterally.  TCP implementations should include the\n   enhancements\
    \ from both sub-sections so that TCP senders can perform\n   well without regard\
    \ to the feature sets of other hosts they connect\n   to.  For example, if SACK\
    \ use is not successfully negotiated, a host\n   should use the NewReno behavior\
    \ as a fall back.\n   RFC 3042 S: \"Enhancing TCP's Loss Recovery Using Limited\
    \ Transmit\"\n   (January 2001)\n      Abstract: \"This document proposes Limited\
    \ Transmit, a new\n      Transmission Control Protocol (TCP) mechanism that can\
    \ be used to\n      more effectively recover lost segments when a connection's\n\
    \      congestion window is small, or when a large number of segments are\n  \
    \    lost in a single transmission window.\"  [RFC3042] Tests from 2004\n    \
    \  showed that Limited Transmit was deployed in roughly one third of\n      the\
    \ web servers tested [MAF04].\n   RFC 3390 S: \"Increasing TCP's Initial Window\"\
    \ (October 2002)\n      This document [RFC3390] updates RFC 2581 to permit an\
    \ initial TCP\n      window of three or four segments during the slow-start phase,\n\
    \      depending on the segment size.\n   RFC 3782 S: \"The NewReno Modification\
    \ to TCP's Fast Recovery\n   Algorithm\" (April 2004)\n      This document [RFC3782]\
    \ specifies a modification to the standard\n      Reno fast recovery algorithm,\
    \ whereby a TCP sender can use partial\n      acknowledgments to make inferences\
    \ determining the next segment to\n      send in situations where SACK would be\
    \ helpful but isn't\n      available.  Although it is only a slight modification,\
    \ the NewReno\n      behavior can make a significant difference in performance\
    \ when\n      multiple segments are lost from a single window of data.\n"
- title: 3.2.  SACK-Based Loss Recovery and Congestion Control
  contents:
  - "3.2.  SACK-Based Loss Recovery and Congestion Control\n   The base TCP specification\
    \ in RFC 793 provided only a simple\n   cumulative acknowledgment mechanism. \
    \ However, a selective\n   acknowledgment (SACK) mechanism provides performance\
    \ improvement in\n   the presence of multiple packet losses from the same flight,\
    \ more\n   than outweighing the modest increase in complexity.  A TCP should be\n\
    \   expected to implement SACK; however, SACK is a negotiated option and\n   is\
    \ only used if support is advertised by both sides of a connection.\n   RFC 2018\
    \ S: \"TCP Selective Acknowledgment Options\" (October 1996)\n      This document\
    \ [RFC2018] defines the basic selective acknowledgment\n      (SACK) mechanism\
    \ for TCP.\n   RFC 2883 S: \"An Extension to the Selective Acknowledgement (SACK)\n\
    \   Option for TCP\" (July 2000)\n      This document [RFC2883] extends RFC 2018\
    \ to cover the case of\n      acknowledging duplicate segments.\n   RFC 3517 S:\
    \ \"A Conservative Selective Acknowledgment (SACK)-based\n   Loss Recovery Algorithm\
    \ for TCP\" (April 2003)\n      This document [RFC3517] describes a relatively\
    \ sophisticated\n      algorithm that a TCP sender can use for loss recovery when\
    \ SACK\n      reports more than one segment lost from a single flight of data.\n\
    \      Although support for the exchange of SACK information is widely\n     \
    \ implemented, not all implementations use an algorithm as\n      sophisticated\
    \ as that described in RFC 3517.\n"
- title: 3.3.  Dealing with Forged Segments
  contents:
  - "3.3.  Dealing with Forged Segments\n   By default, TCP lacks any cryptographic\
    \ structures to differentiate\n   legitimate segments and those spoofed from malicious\
    \ hosts.  Spoofing\n   valid segments requires correctly guessing a number of\
    \ fields.  The\n   documents in this sub-section describe ways to make that guessing\n\
    \   harder, or to prevent it from being able to affect a connection\n   negatively.\n\
    \   The TCPM working group is currently in progress towards fully\n   understanding\
    \ and defining mechanisms for preventing spoofing attacks\n   (including both\
    \ spoofed TCP segments and ICMP datagrams).  Some of\n   the solutions being considered\
    \ rely on TCP modifications, whereas\n   others rely on security at lower layers\
    \ (like IPsec) for protection.\n   RFC 1948 I: \"Defending Against Sequence Number\
    \ Attacks\" (May 1996)\n      This document [RFC1948] describes the TCP vulnerability\
    \ that\n      allows an attacker to send forged TCP packets, by guessing the\n\
    \      initial sequence number in the three-way handshake.  Simple\n      defenses\
    \ against exploitation are then described.  Some variation\n      is implemented\
    \ in most currently used operating systems.\n   RFC 2385 S: \"Protection of BGP\
    \ Sessions via the TCP MD5 Signature\n   Option\" (August 1998)\n      From document:\
    \ \"This document describes current existing practice\n      for securing BGP\
    \ against certain simple attacks.  It is understood\n      to have security weaknesses\
    \ against concerted attacks.\n      This memo describes a TCP extension to enhance\
    \ security for BGP.\n      It defines a new TCP option for carrying an MD5 digest\
    \ in a TCP\n      segment.  This digest acts like a signature for that segment,\n\
    \      incorporating information known only to the connection end points.\n  \
    \    Since BGP uses TCP as its transport, using this option in the way\n     \
    \ described in this paper significantly reduces the danger from\n      certain\
    \ security attacks on BGP.\"  [RFC2385]\n      TCP MD5 options are currently only\
    \ used in very limited contexts,\n      primarily for defending BGP exchanges\
    \ between routers.  Some\n      deployment notes for those using TCP MD5 are found\
    \ in the later\n      RFC 3562, \"Key Management Considerations for the TCP MD5\
    \ Signature\n      Option\" [RFC3562].  RFC 4278 deprecates the use of TCP MD5\
    \ outside\n      BGP [RFC4278].\n"
- title: 4.  Experimental Extensions
  contents:
  - "4.  Experimental Extensions\n   The RFCs in this section are still experimental,\
    \ but they may become\n   proposed standards in the future.  At least part of\
    \ the reason that\n   they are still experimental is to gain more wide-scale experience\n\
    \   with them before a standards track decision is made.  By their\n   publication\
    \ as experimental RFCs, it is hoped that the community of\n   TCP researchers\
    \ will analyze and test the contents of these RFCs.\n   Although experimentation\
    \ is encouraged, there is not yet formal\n   consensus that these are fully logical\
    \ and safe behaviors.  Wide-\n   scale deployment of implementations that use\
    \ these features should be\n   well thought-out in terms of consequences.\n  \
    \ RFC 2140 I: \"TCP Control Block Interdependence\" (April 1997)\n      This document\
    \ [RFC2140] suggests how TCP connections between the\n      same endpoints might\
    \ share information, such as their congestion\n      control state.  To some degree,\
    \ this is done in practice by a few\n      operating systems; for example, Linux\
    \ currently has a destination\n      cache.  Although this RFC is technically\
    \ informational, the\n      concepts it describes are in experimental use, so\
    \ we include it in\n      this section.\n      A related proposal, the Congestion\
    \ Manager, is specified in RFC\n      3124 [RFC3124].  The idea behind the Congestion\
    \ Manager, moving\n      congestion control outside of individual TCP connections,\n\
    \      represents a modification to the core of TCP, which supports\n      sharing\
    \ information among TCP connections as well.  Although a\n      Proposed Standard,\
    \ some pieces of the Congestion Manager support\n      architecture have not been\
    \ specified yet, and it has not achieved\n      use or implementation beyond experimental\
    \ stacks, so it is not\n      listed among the standard TCP enhancements in this\
    \ roadmap.\n   RFC 2861 E: \"TCP Congestion Window Validation\" (June 2000)\n\
    \      This document [RFC2861] suggests reducing the congestion window\n     \
    \ over time when no packets are flowing.  This behavior is more\n      aggressive\
    \ than that specified in RFC 2581, which says that a TCP\n      sender SHOULD\
    \ set its congestion window to the initial window\n      after an idle period\
    \ of an RTO or greater.\n   RFC 3465 E: \"TCP Congestion Control with Appropriate\
    \ Byte Counting\n   (ABC)\" (February 2003)\n      This document [RFC3465] suggests\
    \ that congestion control use the\n      number of bytes acknowledged instead\
    \ of the number of\n      acknowledgments received.  This has been implemented\
    \ in Linux.\n      The ABC mechanism behaves differently from the standard method\n\
    \      when there is not a one-to-one relationship between data segments\n   \
    \   and acknowledgments.  ABC still operates within the accepted\n      guidelines,\
    \ but is more robust to delayed ACKs and ACK-division\n      [SCWA99][RFC3449].\n\
    \   RFC 3522 E: \"The Eifel Detection Algorithm for TCP\" (April 2003)\n     \
    \ The Eifel detection algorithm [RFC3522] allows a TCP sender to\n      detect\
    \ a posteriori whether it has entered loss recovery\n      unnecessarily.\n  \
    \ RFC 3540 E: \"Robust Explicit Congestion Notification (ECN) signaling\n   with\
    \ Nonces\" (June 2003)\n      This document [RFC3540] suggests a modified ECN\
    \ to address\n      security concerns and updates RFC 3168.\n   RFC 3649 E: \"\
    HighSpeed TCP for Large Congestion Windows\" (December\n   2003)\n      This document\
    \ [RFC3649] suggests a modification to TCP's steady-\n      state behavior to\
    \ use very large windows efficiently.\n   RFC 3708 E: \"Using TCP Duplicate Selective\
    \ Acknowledgement (DSACKs)\n   and Stream Control Transmission Protocol (SCTP)\
    \ Duplicate\n   Transmission Sequence Numbers (TSNs) to Detect Spurious\n   Retransmissions\"\
    \ (February 2004)\n      Abstract: \"TCP and Stream Control Transmission Protocol\
    \ (SCTP)\n      provide notification of duplicate segment receipt through\n  \
    \    Duplicate Selective Acknowledgement (DSACKs) and Duplicate\n      Transmission\
    \ Sequence Number (TSN) notification, respectively.\n      This document presents\
    \ conservative methods of using this\n      information to identify unnecessary\
    \ retransmissions for various\n      applications.\"  [RFC3708]\n   RFC 3742 E:\
    \ \"Limited Slow-Start for TCP with Large Congestion\n   Windows\" (March 2004)\n\
    \      This document [RFC3742] describes a more conservative slow-start\n    \
    \  behavior to prevent massive packet losses when a connection uses a\n      very\
    \ large window.\n   RFC 4015 S: \"The Eifel Response Algorithm for TCP\" (February\
    \ 2005)\n      This document [RFC4015] describes the response portion of the\n\
    \      Eifel algorithm, which can be used in conjunction with one of\n      several\
    \ methods of detecting when loss recovery has been\n      spuriously entered,\
    \ such as the Eifel detection algorithm in RFC\n      3522, the algorithm in RFC\
    \ 3708, or F-RTO in RFC 4138.\n      Abstract: \"Based on an appropriate detection\
    \ algorithm, the Eifel\n      response algorithm provides a way for a TCP sender\
    \ to respond to a\n      detected spurious timeout.  It adapts the retransmission\
    \ timer to\n      avoid further spurious timeouts, and can avoid - depending on\
    \ the\n      detection algorithm - the often unnecessary go-back-N retransmits\n\
    \      that would otherwise be sent.  In addition, the Eifel response\n      algorithm\
    \ restores the congestion control state in such a way that\n      packet bursts\
    \ are avoided.\"\n      RFC 4015 is itself a Proposed Standard.  The consensus\
    \ of the TCPM\n      working group was to place it in this section of the roadmap\n\
    \      document due to three factors.\n      1.  RFC 4015 operates on the output\
    \ of a detection algorithm, for\n          which there is currently no available\
    \ mechanism on the\n          standards track.\n      2.  The working group was\
    \ not aware of any wide deployment and use\n          of RFC 4015.\n      3. \
    \ The consensus of the working group, after a discussion of the\n          known\
    \ Intellectual Property Rights claims on the techniques\n          described in\
    \ RFC 4015, identified this section of the roadmap\n          as an appropriate\
    \ location.\n   RFC 4138 E: \"Forward RTO-Recovery (F-RTO): An Algorithm for Detecting\n\
    \   Spurious Retransmission Timeouts with TCP and the Stream Control\n   Transmission\
    \ Protocol\" (August 2005)\n      The F-RTO detection algorithm [RFC4138] provides\
    \ another option\n      for inferring spurious retransmission timeouts.  Unlike\
    \ some\n      similar detection methods, F-RTO does not rely on the use of any\n\
    \      TCP options.\n"
- title: 5.  Historic Extensions
  contents:
  - "5.  Historic Extensions\n   The RFCs listed here define extensions that have\
    \ thus far failed to\n   arouse substantial interest from implementers, or that\
    \ were found to\n   be defective for general use.\n   RFC 1106 \"TCP Big Window\
    \ and NAK Options\" (June 1989): found\n   defective\n      This RFC [RFC1106]\
    \ defined an alternative to the Window Scale\n      option for using large windows\
    \ and described the \"negative\n      acknowledgement\" or NAK option.  There\
    \ is a comparison of NAK and\n      SACK methods, and early discussion of TCP\
    \ over satellite issues.\n      RFC 1110 explains some problems with the approaches\
    \ described in\n      RFC 1106.  The options described in this document have not\
    \ been\n      adopted by the larger community, although NAKs are used in the\n\
    \      SCPS-TP adaptation of TCP for satellite and spacecraft use,\n      developed\
    \ by the Consultative Committee for Space Data Systems\n      (CCSDS).\n   RFC\
    \ 1110 \"A Problem with the TCP Big Window Option\" (August 1989):\n   deprecates\
    \ RFC 1106\n      Abstract: \"The TCP Big Window option discussed in RFC 1106\
    \ will\n      not work properly in an Internet environment which has both a high\n\
    \      bandwidth * delay product and the possibility of disordering and\n    \
    \  duplicating packets.  In such networks, the window size must not\n      be\
    \ increased without a similar increase in the sequence number\n      space.  Therefore,\
    \ a different approach to big windows should be\n      taken in the Internet.\"\
    \  [RFC1110]\n   RFC 1146 E \"TCP Alternate Checksum Options\" (March 1990): lack\
    \ of\n   interest\n      This document [RFC1146] defined more robust TCP checksums\
    \ than the\n      16-bit ones-complement in use today.  A typographical error\
    \ in RFC\n      1145 is fixed in RFC 1146; otherwise, the documents are the same.\n\
    \   RFC 1263 \"TCP Extensions Considered Harmful\" (October 1991) - lack of\n\
    \   interest\n      This document [RFC1263] argues against \"backwards compatible\"\
    \ TCP\n      extensions.  Specifically mentioned are several TCP enhancements\n\
    \      that have been successful, including timestamps, window scaling,\n    \
    \  PAWS, and SACK.  RFC 1263 presents an alternative approach called\n      \"\
    protocol evolution\", whereby several evolutionary versions of TCP\n      would\
    \ exist on hosts.  These distinct TCP versions would represent\n      upgrades\
    \ to each other and could be header-incompatible.\n      Interoperability would\
    \ be provided by having a virtualization\n      layer select the right TCP version\
    \ for a particular connection.\n      This idea did not catch on with the community,\
    \ although the type\n      of extensions RFC 1263 specifically targeted as harmful\
    \ did become\n      popular.\n   RFC 1379 I \"Extending TCP for Transactions --\
    \ Concepts\" (November\n   1992): found defective\n      See RFC 1644.\n   RFC\
    \ 1644 E \"T/TCP -- TCP Extensions for Transactions Functional\n   Specification\"\
    \ (July 1994): found defective\n      The inventors of TCP believed that cached\
    \ connection state could\n      have been used to eliminate TCP's 3-way handshake,\
    \ to support\n      two-packet request/response exchanges.  RFCs 1379 [RFC1379]\
    \ and\n      1644 [RFC1644] show that this is far from simple.  Furthermore,\n\
    \      T/TCP floundered on the ease of denial-of-service attacks that can\n  \
    \    result.  One idea pioneered by T/TCP lives on in RFC 2140, in the\n     \
    \ sharing of state across connections.\n   RFC 1693 E \"An Extension to TCP: Partial\
    \ Order Service\" (November\n   1994): lack of interest\n      This document [RFC1693]\
    \ defines a TCP extension for applications\n      that do not care about the order\
    \ in which application-layer\n      objects are received.  Examples are multimedia\
    \ and database\n      applications.  In practice, these applications either accept\
    \ the\n      possible performance loss because of TCP's strict ordering or use\n\
    \      more specialized transport protocols.\n"
- title: 6.  Support Documents
  contents:
  - "6.  Support Documents\n   This section contains several classes of documents\
    \ that do not\n   necessarily define current protocol behaviors, but that are\n\
    \   nevertheless of interest to TCP implementers.  Section 6.1 describes\n   several\
    \ foundational RFCs that give modern readers a better\n   understanding of the\
    \ principles underlying TCP's behaviors and\n   development over the years.  The\
    \ documents listed in Section 6.2\n   provide advice on using TCP in various types\
    \ of network situations\n   that pose challenges above those of typical wired\
    \ links.  Some\n   implementation notes can be found in Section 6.3.  The TCP\
    \ Management\n   Information Bases are described in Section 6.4.  RFCs that describe\n\
    \   tools for testing and debugging TCP implementations or that contain\n   high-level\
    \ tutorials on the protocol are listed Section 6.5, and\n   Section 6.6 lists\
    \ a number of case studies that have explored TCP\n   performance.\n"
- title: 6.1.  Foundational Works
  contents:
  - "6.1.  Foundational Works\n   The documents listed in this section contain information\
    \ that is\n   largely duplicated by the standards documents previously discussed.\n\
    \   However, some of them contain a greater depth of problem statement\n   explanation\
    \ or other context.  Particularly, RFCs 813 - 817 (known as\n   the \"Dave Clark\
    \ Five\") describe some early problems and solutions\n   (RFC 815 only describes\
    \ the reassembly of IP fragments and is not\n   included in this TCP roadmap).\n\
    \   RFC 813: \"Window and Acknowledgement Strategy in TCP\" (July 1982)\n    \
    \  This document [RFC0813] contains an early discussion of Silly\n      Window\
    \ Syndrome and its avoidance and motivates and describes the\n      use of delayed\
    \ acknowledgments.\n   RFC 814: \"Name, Addresses, Ports, and Routes\" (July 1982)\n\
    \      Suggestions and guidance for the design of tables and algorithms\n    \
    \  to keep track of various identifiers within a TCP/IP\n      implementation\
    \ are provided by this document [RFC0814].\n   RFC 816: \"Fault Isolation and\
    \ Recovery\" (July 1982)\n      In this document [RFC0816], TCP's response to\
    \ indications of\n      network error conditions such as timeouts or received\
    \ ICMP\n      messages is discussed.\n   RFC 817: \"Modularity and Efficiency\
    \ in Protocol Implementation\" (July\n   1982)\n      This document [RFC0817]\
    \ contains implementation suggestions that\n      are general and not TCP specific.\
    \  However, they have been used to\n      develop TCP implementations and to describe\
    \ some performance\n      implications of the interactions between various layers\
    \ in the\n      Internet stack.\n   RFC 872: \"TCP-ON-A-LAN\" (September 1982)\n\
    \      Conclusion: \"The sometimes-expressed fear that using TCP on a\n      local\
    \ net is a bad idea is unfounded.\"  [RFC0872]\n   RFC 896: \"Congestion Control\
    \ in IP/TCP Internetworks\" (January 1984)\n      This document  [RFC0896] contains\
    \ some early experiences with\n      congestion collapse and some initial thoughts\
    \ on how to avoid it\n      using congestion control in TCP.\n   RFC 964: \"Some\
    \ Problems with the Specification of the Military\n   Standard Transmission Control\
    \ Protocol\" (November 1985)\n      This document [RFC0964] points out several\
    \ specification bugs in\n      the US Military's MIL-STD-1778 document, which\
    \ was intended as a\n      successor to RFC 793.  This serves to remind us of\
    \ the difficulty\n      in specification writing (even when we work from existing\n\
    \      documents!).\n   RFC 1072: \"TCP Extensions for Long-Delay Paths\" (October\
    \ 1988)\n      This document [RFC1072] contains early explanations of the\n  \
    \    mechanisms that were later described by RFCs 1323 and 2018, which\n     \
    \ obsolete it.\n   RFC 1185: \"TCP Extension for High-Speed Paths\" (October 1990)\n\
    \      This document [RFC1185] builds on RFC 1072 to describe more\n      advanced\
    \ strategies for dealing with sequence number wrapping and\n      detecting duplicates\
    \ from earlier connections.  This document was\n      obsoleted by RFC 1323.\n\
    \   RFC 2914 B: \"Congestion Control Principles\" (September 2000)\n      This\
    \ document [RFC2914] motivates the use of end-to-end congestion\n      control\
    \ for preventing congestion collapse and providing fairness\n      to TCP.\n"
- title: 6.2.  Difficult Network Environments
  contents:
  - "6.2.  Difficult Network Environments\n   As the internetworking field has explored\
    \ wireless, satellite,\n   cellular telephone, and other kinds of link-layer technologies,\
    \ a\n   large body of work has built up on enhancing TCP performance for such\n\
    \   links.  The RFCs listed in this section describe some of these more\n   challenging\
    \ network environments and how TCP interacts with them.\n   RFC 2488 B: \"Enhancing\
    \ TCP Over Satellite Channels using Standard\n   Mechanisms\" (January 1999)\n\
    \      From abstract: \"While TCP works over satellite channels there are\n  \
    \    several IETF standardized mechanisms that enable TCP to more\n      effectively\
    \ utilize the available capacity of the network path.\n      This document outlines\
    \ some of these TCP mitigations.  At this\n      time, all mitigations discussed\
    \ in this document are IETF\n      standards track mechanisms (or are compliant\
    \ with IETF\n      standards).\"  [RFC2488]\n   RFC 2757 I: \"Long Thin Networks\"\
    \ (January 2000)\n      Several methods of improving TCP performance over long\
    \ thin\n      networks, such as geosynchronous satellite links, are discussed\
    \ in\n      this document [RFC2757].  A particular set of TCP options is\n   \
    \   developed that should work well in such environments and be safe\n      to\
    \ use in the global Internet.  The implications of such\n      environments have\
    \ been further discussed in RFC 3150 and RFC 3155,\n      and these documents\
    \ should be preferred where there is overlap\n      between them and RFC 2757.\n\
    \   RFC 2760 I: \"Ongoing TCP Research Related to Satellites\" (February\n   2000)\n\
    \      This document [RFC2760] discusses the advantages and disadvantages\n  \
    \    of several different experimental means of improving TCP\n      performance\
    \ over long-delay or error-prone paths.  These include\n      T/TCP, larger initial\
    \ windows, byte counting, delayed\n      acknowledgments, slow start thresholds,\
    \ NewReno and SACK-based\n      loss recovery, FACK [MM96], ECN, various corruption-detection\n\
    \      mechanisms, congestion avoidance changes for fairness, use of\n      multiple\
    \ parallel flows, pacing, header compression, state\n      sharing, and ACK congestion\
    \ control, filtering, and\n      reconstruction.  Although RFC 2488 looks at standard\
    \ extensions,\n      this document focuses on more experimental means of performance\n\
    \      enhancement.\n   RFC 3135 I: \"Performance Enhancing Proxies Intended to\
    \ Mitigate\n   Link-Related Degradations\" (June 2001)\n      From abstract: \"\
    This document is a survey of Performance Enhancing\n      Proxies (PEPs) often\
    \ employed to improve degraded TCP performance\n      caused by characteristics\
    \ of specific link environments, for\n      example, in satellite, wireless WAN,\
    \ and wireless LAN\n      environments.  Different types of Performance Enhancing\
    \ Proxies\n      are described as well as the mechanisms used to improve\n   \
    \   performance.\"  [RFC3135]\n   RFC 3150 B: \"End-to-end Performance Implications\
    \ of Slow Links\" (July\n   2001)\n      From abstract: \"This document makes\
    \ performance-related\n      recommendations for users of network paths that traverse\
    \ \"very low\n      bit-rate\" links....This recommendation may be useful in any\n\
    \      network where hosts can saturate available bandwidth, but the\n      design\
    \ space for this recommendation explicitly includes\n      connections that traverse\
    \ 56 Kb/second modem links or 4.8 Kb/\n      second wireless access links - both\
    \ of which are widely deployed.\"\n      [RFC3150]\n   RFC 3155 B: \"End-to-end\
    \ Performance Implications of Links with\n   Errors\" (August 2001)\n      From\
    \ abstract: \"This document discusses the specific TCP\n      mechanisms that\
    \ are problematic in environments with high\n      uncorrected error rates, and\
    \ discusses what can be done to\n      mitigate the problems without introducing\
    \ intermediate devices\n      into the connection.\"  [RFC3155]\n   RFC 3366 \"\
    Advice to link designers on link Automatic Repeat reQuest\n   (ARQ)\" (August\
    \ 2002)\n      From abstract: \"This document provides advice to the designers\
    \ of\n      digital communication equipment and link-layer protocols employing\n\
    \      link-layer Automatic Repeat reQuest (ARQ) techniques.  This\n      document\
    \ presumes that the designers wish to support Internet\n      protocols, but may\
    \ be unfamiliar with the architecture of the\n      Internet and with the implications\
    \ of their design choices for the\n      performance and efficiency of Internet\
    \ traffic carried over their\n      links.\"  [RFC3366]\n   RFC 3449 B: \"TCP\
    \ Performance Implications of Network Path Asymmetry\"\n   (December 2002)\n \
    \     From abstract: \"This document describes TCP performance problems\n    \
    \  that arise because of asymmetric effects.  These problems arise in\n      several\
    \ access networks, including bandwidth-asymmetric networks\n      and packet radio\
    \ subnetworks, for different underlying reasons.\n      However, the end result\
    \ on TCP performance is the same in both\n      cases: performance often degrades\
    \ significantly because of\n      imperfection and variability in the ACK feedback\
    \ from the receiver\n      to the sender.\n      The document details several\
    \ mitigations to these effects, which\n      have either been proposed or evaluated\
    \ in the literature, or are\n      currently deployed in networks.\"  [RFC3449]\n\
    \   RFC 3481 B: \"TCP over Second (2.5G) and Third (3G) Generation\n   Wireless\
    \ Networks\" (February 2003)\n      From abstract: \"This document describes a\
    \ profile for optimizing\n      TCP to adapt so that it handles paths including\
    \ second (2.5G) and\n      third (3G) generation wireless networks.\"  [RFC3481]\n\
    \   RFC 3819 B: \"Advice for Internet Subnetwork Designers\" (July 2004)\n   \
    \   This document [RFC3819] describes how TCP performance can be\n      negatively\
    \ affected by some particular lower-layer behaviors and\n      provides guidance\
    \ in designing lower-layer networks and protocols\n      to be amicable to TCP.\n"
- title: 6.3.  Implementation Advice
  contents:
  - "6.3.  Implementation Advice\n   RFC 879: \"The TCP Maximum Segment Size and Related\
    \ Topics\" (November\n   1983)\n      Abstract: \"This memo discusses the TCP\
    \ Maximum Segment Size Option\n      and related topics.  The purposes is to clarify\
    \ some aspects of\n      TCP and its interaction with IP.  This memo is a clarification\
    \ to\n      the TCP specification, and contains information that may be\n    \
    \  considered as 'advice to implementers'.\"  [RFC0879]\n   RFC 1071: \"Computing\
    \ the Internet Checksum\" (September 1988)\n      This document [RFC1071] lists\
    \ a number of implementation\n      techniques for efficiently computing the Internet\
    \ checksum (used\n      by TCP).\n   RFC 1624 I: \"Computation of the Internet\
    \ Checksum via Incremental\n   Update\" (May 1994)\n      Incrementally updating\
    \ the Internet checksum is useful to routers\n      in updating IP checksums.\
    \  Some middleboxes that alter TCP headers\n      may also be able to update the\
    \ TCP checksum incrementally.  This\n      document [RFC1624] expands upon the\
    \ explanation of the incremental\n      update procedure in RFC 1071.\n   RFC\
    \ 1936 I: \"Implementing the Internet Checksum in Hardware\" (April\n   1996)\n\
    \      This document [RFC1936] describes the motivation for implementing\n   \
    \   the Internet checksum in hardware, rather than in software, and\n      provides\
    \ an implementation example.\n   RFC 2525 I: \"Known TCP Implementation Problems\"\
    \ (March 1999)\n      From abstract: \"This memo catalogs a number of known TCP\n\
    \      implementation problems.  The goal in doing so is to improve\n      conditions\
    \ in the existing Internet by enhancing the quality of\n      current TCP/IP implementations.\"\
    \  [RFC2525]\n   RFC 2923 I: \"TCP Problems with Path MTU Discovery\" (September\
    \ 2000)\n      From abstract: \"This memo catalogs several known Transmission\n\
    \      Control Protocol (TCP) implementation problems dealing with Path\n    \
    \  Maximum Transmission Unit Discovery (PMTUD), including the long-\n      standing\
    \ black hole problem, stretch acknowlegements (ACKs) due to\n      confusion between\
    \ Maximum Segment Size (MSS) and segment size, and\n      MSS advertisement based\
    \ on PMTU.\"  [RFC2923]\n   RFC 3360 B: \"Inappropriate TCP Resets Considered\
    \ Harmful\" (August\n   2002)\n      This document [RFC3360] is a plea that firewall\
    \ vendors not send\n      gratuitous TCP RST (Reset) packets when unassigned TCP\
    \ header bits\n      are used.  This practice prevents desirable extension and\n\
    \      evolution of the protocol and thus is potentially harmful to the\n    \
    \  future of the Internet.\n   RFC 3493 I: \"Basic Socket Interface Extensions\
    \ for IPv6\" (February\n   2003)\n      This document [RFC3493] describes the\
    \ de facto standard sockets\n      API for programming with TCP.  This API is\
    \ implemented nearly\n      ubiquitously in modern operating systems and programming\n\
    \      languages.\n"
- title: 6.4.  Management Information Bases
  contents:
  - "6.4.  Management Information Bases\n   The first MIB module defined for use with\
    \ Simple Network Management\n   Protocol (SNMP) (in RFC 1066 and its update, RFC\
    \ 1156) was a single\n   monolithic MIB module, called MIB-I.  This evolved over\
    \ time to be\n   MIB-II (RFC 1213).  It then became apparent that having a single\n\
    \   monolithic MIB module was not scalable, given the number and breadth\n   of\
    \ MIB data definitions that needed to be included.  Thus, additional\n   MIB modules\
    \ were defined, and those parts of MIB-II that needed to\n   evolve were split\
    \ off.  Eventually, the remaining parts of MIB-II\n   were also split off, the\
    \ TCP-specific part being documented in RFC\n   2012.\n   RFC 2012 was obsoleted\
    \ by RFC 4022, which is the primary TCP MIB\n   document today.  MIB-I, defined\
    \ in RFC 1156, has been obsoleted by\n   the MIB-II specification in RFC 1213.\
    \  For current TCP implementers,\n   RFC 4022 should be supported.\n   RFC 1066:\
    \ \"Management Information Base for Network Management of\n   TCP/IP-based Internets\"\
    \ (August 1988)\n      This document [RFC1066] was the description of the TCP\
    \ MIB.  It\n      was obsoleted by RFC 1156.\n   RFC 1156 S: \"Management Information\
    \ Base for Network Management of\n   TCP/IP-based Internets\" (May 1990)\n   \
    \   This document [RFC1156] describes the required MIB fields for TCP\n      implementations,\
    \ with minor corrections and no technical changes\n      from RFC 1066, which\
    \ it obsoletes.  This is the standards track\n      document for MIB-I.\n   RFC\
    \ 1213 S: \"Management Information Base for Network Management of\n   TCP/IP-based\
    \ Internets: MIB-II\" (March 1991)\n      This document [RFC1213] describes the\
    \ second version of the MIB in\n      a monolithic form.  RFC 2012 updates this\
    \ document by splitting\n      out the TCP-specific portions.\n   RFC 2012 S:\
    \ \"SNMPv2 Management Information Base for the Transmission\n   Control Protocol\
    \ using SMIv2\" (November 1996)\n      This document [RFC2012] defined the TCP\
    \ MIB, in an update to RFC\n      1213.  It is now obsoleted by RFC 4022.\n  \
    \ RFC 2452 S: \"IP Version 6 Management Information Base for the\n   Transmission\
    \ Control Protocol\" (December 1998)\n      This document [RFC2452] augments RFC\
    \ 2012 by adding an IPv6-\n      specific connection table.  The rest of 2012\
    \ holds for any IP\n      version.  RFC 2012 is now obsoleted by RFC 4022.\n \
    \     Although it is a standards track document, RFC 2452 is considered\n    \
    \  a historic mistake by the MIB community, as it is based on the\n      idea\
    \ of parallel IPv4 and IPv6 structures.  Although IPv6 requires\n      new structures,\
    \ the community has decided to define a single\n      generic structure for both\
    \ IPv4 and IPv6.  This will aid in\n      definition, implementation, and transition\
    \ between IPv4 and IPv6.\n   RFC 4022 S: \"Management Information Base for the\
    \ Transmission Control\n   Protocol (TCP)\" (March 2005)\n      This document\
    \ [RFC4022] obsoletes RFC 2012 and RFC 2452 and\n      specifies the current standard\
    \ for the TCP MIB that should be\n      deployed.\n"
- title: 6.5.  Tools and Tutorials
  contents:
  - "6.5.  Tools and Tutorials\n   RFC 1180 I: \"TCP/IP Tutorial\" (January 1991)\n\
    \      This document [RFC1180] is an extremely brief overview of the\n      TCP/IP\
    \ protocol suite as a whole.  It gives some explanation as to\n      how and where\
    \ TCP fits in.\n   RFC 1470 I: \"FYI on a Network Management Tool Catalog: Tools\
    \ for\n   Monitoring and Debugging TCP/IP Internets and Interconnected Devices\"\
    \n   (June 1993)\n      A few of the tools that this document [RFC1470] describes\
    \ are\n      still maintained and in use today; for example, ttcp and tcpdump.\n\
    \      However, many of the tools described do not relate specifically to\n  \
    \    TCP and are no longer used or easily available.\n   RFC 2398 I: \"Some Testing\
    \ Tools for TCP Implementors\" (August 1998)\n      This document [RFC2398] describes\
    \ a number of TCP packet\n      generation and analysis tools.  Although some\
    \ of these tools are\n      no longer readily available or widely used, for the\
    \ most part they\n      are still relevant and usable.\n"
- title: 6.6.  Case Studies
  contents:
  - "6.6.  Case Studies\n   RFC 1337 I: \"TIME-WAIT Assassination Hazards in TCP\"\
    \ (May 1992)\n      This document [RFC1337] points out a problem with acting on\n\
    \      received reset segments while one is in the TIME-WAIT state.  The\n   \
    \   main recommendation is that hosts in TIME-WAIT ignore resets.\n      This\
    \ recommendation might not currently be widely implemented.\n   RFC 2415 I: \"\
    Simulation Studies of Increased Initial TCP Window Size\"\n   (September 1998)\n\
    \      This document [RFC2415] presents results of some simulations using\n  \
    \    TCP initial windows greater than 1 segment.  The analysis\n      indicates\
    \ that user-perceived performance can be improved by\n      increasing the initial\
    \ window to 3 segments.\n   RFC 2416 I: \"When TCP Starts Up With Four Packets\
    \ Into Only Three\n   Buffers\" (September 1998)\n      This document [RFC2416]\
    \ uses simulation results to clear up some\n      concerns about using an initial\
    \ window of 4 segments when the\n      network path has less provisioning.\n \
    \  RFC 2884 I: \"Performance Evaluation of Explicit Congestion\n   Notification\
    \ (ECN) in IP Networks\" (July 2000)\n      This document [RFC2884] describes\
    \ experimental results that show\n      some improvements to the performance of\
    \ both short- and long-lived\n      connections due to ECN.\n"
- title: 7.  Undocumented TCP Features
  contents:
  - "7.  Undocumented TCP Features\n   There are a few important implementation tactics\
    \ for the TCP that\n   have not yet been described in any RFC.  Although this\
    \ roadmap is\n   primarily concerned with mapping the TCP RFCs, this section is\n\
    \   included because an implementer needs to be aware of these important\n   issues.\n\
    \   SYN Cookies\n      A mechanism known as \"SYN cookies\" is widely used to\
    \ thwart TCP\n      SYN flooding attacks, in which an attacker sends a flood of\
    \ SYNs\n      to a victim but fails to complete the 3-way handshake.  The result\n\
    \      is exhaustion of resources at the server.  The SYN cookie\n      mechanism\
    \ allows the server to return a cleverly chosen initial\n      sequence number\
    \ that has all the required state for the secure\n      completion of the handshake.\
    \  Then the server can avoid saving\n      connection state during the 3-way handshake\
    \ and thus survive a SYN\n      flooding attack.\n      A web search for \"SYN\
    \ cookies\" will reveal a number of useful\n      descriptions of this mechanism,\
    \ although there is currently no RFC\n      on the matter.\n   Header Prediction\n\
    \      Header prediction is a trick to speed up the processing of\n      segments.\
    \  Van Jacobson and Mike Karels developed the technique in\n      the late 1980s.\
    \  The basic idea is that some processing time can\n      be saved when most of\
    \ a segment's fields can be predicted from\n      previous segments.  A good description\
    \ of this was sent to the\n      TCP-IP mailing list by Van Jacobson on March\
    \ 9, 1988:\n         Quite a bit of the speedup comes from an algorithm that we\n\
    \         ('we' refers to collaborator Mike Karels and myself) are\n         calling\
    \ \"header prediction\".  The idea is that if you're in the\n         middle of\
    \ a bulk data transfer and have just seen a packet, you\n         know what the\
    \ next packet is going to look like:  It will look\n         just like the current\
    \ packet with either the sequence number or\n         ack number updated (depending\
    \ on whether you're the sender or\n         receiver).  Combining this with the\
    \ \"Use hints\" epigram from\n         Butler Lampson's classic \"Epigrams for\
    \ System Designers\", you\n         start to think of the tcp state (rcv.nxt,\
    \ snd.una, etc.) as\n         \"hints\" about what the next packet should look\
    \ like.\n         If you arrange those \"hints\" so they match the layout of a\
    \ tcp\n         packet header, it takes a single 14-byte compare to see if your\n\
    \         prediction is correct (3 longword compares to pick up the send\n   \
    \      & ack sequence numbers, header length, flags and window, plus a\n     \
    \    short compare on the length).  If the prediction is correct,\n         there's\
    \ a single test on the length to see if you're the sender\n         or receiver\
    \ followed by the appropriate processing.  E.g., if\n         the length is non-zero\
    \ (you're the receiver), checksum and\n         append the data to the socket\
    \ buffer then wake any process\n         that's sleeping on the buffer.  Update\
    \ rcv.nxt by the length of\n         this packet (this updates your \"prediction\"\
    \ of the next\n         packet).  Check if you can handle another packet the same\
    \ size\n         as the current one.  If not, set one of the unused flag bits\
    \ in\n         your header prediction to guarantee that the prediction will\n\
    \         fail on the next packet and force you to go through full\n         protocol\
    \ processing.  Otherwise, you're done with this packet.\n         So, the *total*\
    \ tcp protocol processing, exclusive of\n         checksumming, is on the order\
    \ of 6 compares and an add.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   This document introduces no new security considerations.\
    \  Each RFC\n   listed in this document attempts to address the security\n   considerations\
    \ of the specification it contains.\n"
- title: 9.  Acknowledgments
  contents:
  - "9.  Acknowledgments\n   This document grew out of a discussion on the end2end-interest\n\
    \   mailing list, the public list of the End-to-End Research Group of the\n  \
    \ IRTF, and continued development under the IETF's TCP Maintenance and\n   Minor\
    \ Extensions (TCPM) working group.  We thank Joe Touch, Reiner\n   Ludwig, Pekka\
    \ Savola, Gorry Fairhurst, and Sally Floyd for their\n   contributions, in particular.\
    \  The chairs of the TCPM working group,\n   Mark Allman and Ted Faber, have been\
    \ instrumental in the development\n   of this document.  Keith McCloghrie provided\
    \ some useful notes and\n   clarification on the various MIB-related RFCs.\n"
- title: 10.  Informative References
  contents:
  - '10.  Informative References

    '
- title: 10.1.  Basic Functionality
  contents:
  - "10.1.  Basic Functionality\n   [RFC0793]  Postel, J., \"Transmission Control\
    \ Protocol\", STD 7, RFC\n              793, September 1981.\n   [RFC1122]  Braden,\
    \ R., \"Requirements for Internet Hosts -\n              Communication Layers\"\
    , STD 3, RFC 1122, October 1989.\n   [RFC2026]  Bradner, S., \"The Internet Standards\
    \ Process -- Revision\n              3\", BCP 9, RFC 2026, October 1996.\n   [RFC2460]\
    \  Deering, S. and R. Hinden, \"Internet Protocol, Version 6\n              (IPv6)\
    \ Specification\", RFC 2460, December 1998.\n   [RFC2474]  Nichols, K., Blake,\
    \ S., Baker, F., and D. Black,\n              \"Definition of the Differentiated\
    \ Services Field (DS\n              Field) in the IPv4 and IPv6 Headers\", RFC\
    \ 2474, December\n              1998.\n   [RFC2581]  Allman, M., Paxson, V., and\
    \ W. Stevens, \"TCP Congestion\n              Control\", RFC 2581, April 1999.\n\
    \   [RFC2675]  Borman, D., Deering, S., and R. Hinden, \"IPv6 Jumbograms\",\n\
    \              RFC 2675, August 1999.\n   [RFC2873]  Xiao, X., Hannan, A., Paxson,\
    \ V., and E. Crabbe, \"TCP\n              Processing of the IPv4 Precedence Field\"\
    , RFC 2873, June\n              2000.\n   [RFC2988]  Paxson, V. and M. Allman,\
    \ \"Computing TCP's Retransmission\n              Timer\", RFC 2988, November\
    \ 2000.\n"
- title: 10.2.  Recommended Enhancements
  contents:
  - "10.2.  Recommended Enhancements\n   [RFC1323]  Jacobson, V., Braden, R., and\
    \ D. Borman, \"TCP Extensions\n              for High Performance\", RFC 1323,\
    \ May 1992.\n   [RFC1948]  Bellovin, S., \"Defending Against Sequence Number Attacks\"\
    ,\n              RFC 1948, May 1996.\n   [RFC2018]  Mathis, M., Mahdavi, J., Floyd,\
    \ S., and A. Romanow, \"TCP\n              Selective Acknowledgment Options\"\
    , RFC 2018, October 1996.\n   [RFC2385]  Heffernan, A., \"Protection of BGP Sessions\
    \ via the TCP MD5\n              Signature Option\", RFC 2385, August 1998.\n\
    \   [RFC2883]  Floyd, S., Mahdavi, J., Mathis, M., and M. Podolsky, \"An\n   \
    \           Extension to the Selective Acknowledgement (SACK) Option\n       \
    \       for TCP\", RFC 2883, July 2000.\n   [RFC3042]  Allman, M., Balakrishnan,\
    \ H., and S. Floyd, \"Enhancing\n              TCP's Loss Recovery Using Limited\
    \ Transmit\", RFC 3042,\n              January 2001.\n   [RFC3168]  Ramakrishnan,\
    \ K., Floyd, S., and D. Black, \"The Addition\n              of Explicit Congestion\
    \ Notification (ECN) to IP\", RFC\n              3168, September 2001.\n   [RFC3390]\
    \  Allman, M., Floyd, S., and C. Partridge, \"Increasing TCP's\n             \
    \ Initial Window\", RFC 3390, October 2002.\n   [RFC3517]  Blanton, E., Allman,\
    \ M., Fall, K., and L. Wang, \"A\n              Conservative Selective Acknowledgment\
    \ (SACK)-based Loss\n              Recovery Algorithm for TCP\", RFC 3517, April\
    \ 2003.\n   [RFC3562]  Leech, M., \"Key Management Considerations for the TCP\
    \ MD5\n              Signature Option\", RFC 3562, July 2003.\n   [RFC3782]  Floyd,\
    \ S., Henderson, T., and A. Gurtov, \"The NewReno\n              Modification\
    \ to TCP's Fast Recovery Algorithm\", RFC 3782,\n              April 2004.\n \
    \  [RFC4015]  Ludwig, R. and A. Gurtov, \"The Eifel Response Algorithm\n     \
    \         for TCP\", RFC 4015, February 2005.\n   [RFC4278]  Bellovin, S. and\
    \ A. Zinin, \"Standards Maturity Variance\n              Regarding the TCP MD5\
    \ Signature Option (RFC 2385) and the\n              BGP-4 Specification\", RFC\
    \ 4278, January 2006.\n"
- title: 10.3.  Experimental Extensions
  contents:
  - "10.3.  Experimental Extensions\n   [RFC2140]  Touch, J., \"TCP Control Block\
    \ Interdependence\", RFC 2140,\n              April 1997.\n   [RFC2861]  Handley,\
    \ M., Padhye, J., and S. Floyd, \"TCP Congestion\n              Window Validation\"\
    , RFC 2861, June 2000.\n   [RFC3124]  Balakrishnan, H. and S. Seshan, \"The Congestion\
    \ Manager\",\n              RFC 3124, June 2001.\n   [RFC3465]  Allman, M., \"\
    TCP Congestion Control with Appropriate Byte\n              Counting (ABC)\",\
    \ RFC 3465, February 2003.\n   [RFC3522]  Ludwig, R. and M. Meyer, \"The Eifel\
    \ Detection Algorithm\n              for TCP\", RFC 3522, April 2003.\n   [RFC3540]\
    \  Spring, N., Wetherall, D., and D. Ely, \"Robust Explicit\n              Congestion\
    \ Notification (ECN) Signaling with Nonces\", RFC\n              3540, June 2003.\n\
    \   [RFC3649]  Floyd, S., \"HighSpeed TCP for Large Congestion Windows\",\n  \
    \            RFC 3649, December 2003.\n   [RFC3708]  Blanton, E. and M. Allman,\
    \ \"Using TCP Duplicate Selective\n              Acknowledgement (DSACKs) and\
    \ Stream Control Transmission\n              Protocol (SCTP) Duplicate Transmission\
    \ Sequence Numbers\n              (TSNs) to Detect Spurious Retransmissions\"\
    , RFC 3708,\n              February 2004.\n   [RFC3742]  Floyd, S., \"Limited\
    \ Slow-Start for TCP with Large\n              Congestion Windows\", RFC 3742,\
    \ March 2004.\n   [RFC4138]  Sarolahti, P. and M. Kojo, \"Forward RTO-Recovery\
    \ (F-RTO):\n              An Algorithm for Detecting Spurious Retransmission\n\
    \              Timeouts with TCP and the Stream Control Transmission\n       \
    \       Protocol (SCTP)\", RFC 4138, August 2005.\n"
- title: 10.4.  Historic Extensions
  contents:
  - "10.4.  Historic Extensions\n   [RFC1106]  Fox, R., \"TCP big window and NAK options\"\
    , RFC 1106, June\n              1989.\n   [RFC1110]  McKenzie, A., \"Problem with\
    \ the TCP big window option\",\n              RFC 1110, August 1989.\n   [RFC1146]\
    \  Zweig, J. and C. Partridge, \"TCP alternate checksum\n              options\"\
    , RFC 1146, March 1990.\n   [RFC1263]  O'Malley, S. and L. Peterson, \"TCP Extensions\
    \ Considered\n              Harmful\", RFC 1263, October 1991.\n   [RFC1379] \
    \ Braden, R., \"Extending TCP for Transactions -- Concepts\",\n              RFC\
    \ 1379, November 1992.\n   [RFC1644]  Braden, R., \"T/TCP -- TCP Extensions for\
    \ Transactions\n              Functional Specification\", RFC 1644, July 1994.\n\
    \   [RFC1693]  Connolly, T., Amer, P., and P. Conrad, \"An Extension to\n    \
    \          TCP : Partial Order Service\", RFC 1693, November 1994.\n"
- title: 10.5.  Support Documents
  contents:
  - "10.5.  Support Documents\n   [RFC0813]  Clark, D., \"Window and Acknowledgement\
    \ Strategy in TCP\",\n              RFC 813, July 1982.\n   [RFC0814]  Clark,\
    \ D., \"Name, addresses, ports, and routes\", RFC 814,\n              July 1982.\n\
    \   [RFC0816]  Clark, D., \"Fault isolation and recovery\", RFC 816, July\n  \
    \            1982.\n   [RFC0817]  Clark, D., \"Modularity and efficiency in protocol\n\
    \              implementation\", RFC 817, July 1982.\n   [RFC0872]  Padlipsky,\
    \ M., \"TCP-on-a-LAN\", RFC 872, September 1982.\n   [RFC0879]  Postel, J., \"\
    TCP maximum segment size and related topics\",\n              RFC 879, November\
    \ 1983.\n   [RFC0896]  Nagle, J., \"Congestion control in IP/TCP internetworks\"\
    ,\n              RFC 896, January 1984.\n   [RFC0964]  Sidhu, D. and T. Blumer,\
    \ \"Some problems with the\n              specification of the Military Standard\
    \ Transmission\n              Control Protocol\", RFC 964, November 1985.\n  \
    \ [RFC1066]  McCloghrie, K. and M. Rose, \"Management Information Base\n     \
    \         for Network Management of TCP/IP-based internets\", RFC\n          \
    \    1066, August 1988.\n   [RFC1071]  Braden, R., Borman, D., and C. Partridge,\
    \ \"Computing the\n              Internet checksum\", RFC 1071, September 1988.\n\
    \   [RFC1072]  Jacobson, V. and R. Braden, \"TCP extensions for long-delay\n \
    \             paths\", RFC 1072, October 1988.\n   [RFC1156]  McCloghrie, K. and\
    \ M. Rose, \"Management Information Base\n              for network management\
    \ of TCP/IP-based internets\", RFC\n              1156, May 1990.\n   [RFC1180]\
    \  Socolofsky, T. and C. Kale, \"TCP/IP tutorial\", RFC 1180,\n              January\
    \ 1991.\n   [RFC1185]  Jacobson, V., Braden, B., and L. Zhang, \"TCP Extension\
    \ for\n              High-Speed Paths\", RFC 1185, October 1990.\n   [RFC1213]\
    \  McCloghrie, K. and M. Rose, \"Management Information Base\n              for\
    \ Network Management of TCP/IP-based internets: MIB-II\",\n              STD 17,\
    \ RFC 1213, March 1991.\n   [RFC1337]  Braden, R., \"TIME-WAIT Assassination Hazards\
    \ in TCP\", RFC\n              1337, May 1992.\n   [RFC1470]  Enger, R. and J.\
    \ Reynolds, \"FYI on a Network Management\n              Tool Catalog: Tools for\
    \ Monitoring and Debugging TCP/IP\n              Internets and Interconnected\
    \ Devices\", FYI 2, RFC 1470,\n              June 1993.\n   [RFC1624]  Rijsinghani,\
    \ A., \"Computation of the Internet Checksum via\n              Incremental Update\"\
    , RFC 1624, May 1994.\n   [RFC1936]  Touch, J. and B. Parham, \"Implementing the\
    \ Internet\n              Checksum in Hardware\", RFC 1936, April 1996.\n   [RFC2012]\
    \  McCloghrie, K., \"SNMPv2 Management Information Base for\n              the\
    \ Transmission Control Protocol using SMIv2\", RFC 2012,\n              November\
    \ 1996.\n   [RFC2398]  Parker, S. and C. Schmechel, \"Some Testing Tools for TCP\n\
    \              Implementors\", RFC 2398, August 1998.\n   [RFC2415]  Poduri, K.\
    \ and K. Nichols, \"Simulation Studies of\n              Increased Initial TCP\
    \ Window Size\", RFC 2415, September\n              1998.\n   [RFC2416]  Shepard,\
    \ T. and C. Partridge, \"When TCP Starts Up With\n              Four Packets Into\
    \ Only Three Buffers\", RFC 2416, September\n              1998.\n   [RFC2452]\
    \  Daniele, M., \"IP Version 6 Management Information Base for\n             \
    \ the Transmission Control Protocol\", RFC 2452, December\n              1998.\n\
    \   [RFC2488]  Allman, M., Glover, D., and L. Sanchez, \"Enhancing TCP\n     \
    \         Over Satellite Channels using Standard Mechanisms\", BCP\n         \
    \     28, RFC 2488, January 1999.\n   [RFC2525]  Paxson, V., Allman, M., Dawson,\
    \ S., Fenner, W., Griner,\n              J., Heavens, I., Lahey, K., Semke, J.,\
    \ and B. Volz, \"Known\n              TCP Implementation Problems\", RFC 2525,\
    \ March 1999.\n   [RFC2757]  Montenegro, G., Dawkins, S., Kojo, M., Magret, V.,\
    \ and N.\n              Vaidya, \"Long Thin Networks\", RFC 2757, January 2000.\n\
    \   [RFC2760]  Allman, M., Dawkins, S., Glover, D., Griner, J., Tran, D.,\n  \
    \            Henderson, T., Heidemann, J., Touch, J., Kruse, H.,\n           \
    \   Ostermann, S., Scott, K., and J. Semke, \"Ongoing TCP\n              Research\
    \ Related to Satellites\", RFC 2760, February 2000.\n   [RFC2884]  Hadi Salim,\
    \ J. and U. Ahmed, \"Performance Evaluation of\n              Explicit Congestion\
    \ Notification (ECN) in IP Networks\",\n              RFC 2884, July 2000.\n \
    \  [RFC2914]  Floyd, S., \"Congestion Control Principles\", BCP 41, RFC\n    \
    \          2914, September 2000.\n   [RFC2923]  Lahey, K., \"TCP Problems with\
    \ Path MTU Discovery\", RFC\n              2923, September 2000.\n   [RFC3135]\
    \  Border, J., Kojo, M., Griner, J., Montenegro, G., and Z.\n              Shelby,\
    \ \"Performance Enhancing Proxies Intended to\n              Mitigate Link-Related\
    \ Degradations\", RFC 3135, June 2001.\n   [RFC3150]  Dawkins, S., Montenegro,\
    \ G., Kojo, M., and V. Magret,\n              \"End-to-end Performance Implications\
    \ of Slow Links\", BCP\n              48, RFC 3150, July 2001.\n   [RFC3155] \
    \ Dawkins, S., Montenegro, G., Kojo, M., Magret, V., and N.\n              Vaidya,\
    \ \"End-to-end Performance Implications of Links with\n              Errors\"\
    , BCP 50, RFC 3155, August 2001.\n   [RFC3360]  Floyd, S., \"Inappropriate TCP\
    \ Resets Considered Harmful\",\n              BCP 60, RFC 3360, August 2002.\n\
    \   [RFC3366]  Fairhurst, G. and L. Wood, \"Advice to link designers on\n    \
    \          link Automatic Repeat reQuest (ARQ)\", BCP 62, RFC 3366,\n        \
    \      August 2002.\n   [RFC3449]  Balakrishnan, H., Padmanabhan, V., Fairhurst,\
    \ G., and M.\n              Sooriyabandara, \"TCP Performance Implications of\
    \ Network\n              Path Asymmetry\", BCP 69, RFC 3449, December 2002.\n\
    \   [RFC3481]  Inamura, H., Montenegro, G., Ludwig, R., Gurtov, A., and\n    \
    \          F. Khafizov, \"TCP over Second (2.5G) and Third (3G)\n            \
    \  Generation Wireless Networks\", BCP 71, RFC 3481, February\n              2003.\n\
    \   [RFC3493]  Gilligan, R., Thomson, S., Bound, J., McCann, J., and W.\n    \
    \          Stevens, \"Basic Socket Interface Extensions for IPv6\", RFC\n    \
    \          3493, February 2003.\n   [RFC3819]  Karn, P., Bormann, C., Fairhurst,\
    \ G., Grossman, D.,\n              Ludwig, R., Mahdavi, J., Montenegro, G., Touch,\
    \ J., and L.\n              Wood, \"Advice for Internet Subnetwork Designers\"\
    , BCP 89,\n              RFC 3819, July 2004.\n   [RFC4022]  Raghunarayan, R.,\
    \ \"Management Information Base for the\n              Transmission Control Protocol\
    \ (TCP)\", RFC 4022, March\n              2005.\n"
- title: 10.6.  Informative References Outside the RFC Series
  contents:
  - "10.6.  Informative References Outside the RFC Series\n   [JK92]     Jacobson,\
    \ V. and M. Karels, \"Congestion Avoidance and\n              Control\", This\
    \ paper is a revised version of [Jac88], that\n              includes an additional\
    \ appendix.  This paper has not been\n              traditionally published, but\
    \ is currently available at\n              ftp://ftp.ee.lbl.gov/papers/congavoid.ps.Z.\
    \ 1992.\n   [Jac88]    Jacobson, V., \"Congestion Avoidance and Control\", ACM\n\
    \              SIGCOMM 1988 Proceedings, in ACM Computer Communication\n     \
    \         Review, 18 (4), pp. 314-329, August 1988.\n   [KP87]     Karn, P. and\
    \ C. Partridge, \"Round Trip Time Estimation\",\n              ACM SIGCOMM 1987\
    \ Proceedings, in ACM Computer\n              Communication Review, 17 (5), pp.\
    \ 2-7, August 1987\n   [MAF04]    Medina, A., Allman, M., and S. Floyd, \"Measuring\
    \ the\n              Evolution of Transport Protocols in the Internet\", ACM\n\
    \              Computer Communication Review, 35 (2), April 2005.\n   [MM96] \
    \    Mathis, M. and J. Mahdavi, \"Forward Acknowledgement:\n              Refining\
    \ TCP Congestion Control\", ACM SIGCOMM 1996\n              Proceedings, in ACM\
    \ Computer Communication Review 26 (4),\n              pp. 281-292, October 1996.\n\
    \   [SCWA99]   Savage, S., Cardwell, N., Wetherall, D., and T. Anderson,\n   \
    \           \"TCP Congestion Control with a Misbehaving Receiver\", ACM\n    \
    \          Computer Communication Review, 29 (5), pp. 71-78, October\n       \
    \       1999.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Martin H. Duke\n   The Boeing Company\n   PO Box 3707,\
    \ MC 7L-49\n   Seattle, WA  98124-2207\n   Phone: 425-373-2852\n   EMail: martin.duke@boeing.com\n\
    \   Robert Braden\n   USC Information Sciences Institute\n   Marina del Rey, CA\
    \  90292-6695\n   Phone: 310-448-9173\n   EMail: braden@isi.edu\n   Wesley M.\
    \ Eddy\n   Verizon Federal Network Systems\n   21000 Brookpark Rd, MS 54-5\n \
    \  Cleveland, OH  44135\n   Phone: 216-433-6682\n   EMail: weddy@grc.nasa.gov\n\
    \   Ethan Blanton\n   Purdue University Computer Science\n   250 N. University\
    \ St.\n   West Lafayette, IN  47907\n   EMail: eblanton@cs.purdue.edu\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
