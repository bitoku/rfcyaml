- contents:
  - "           Measurement of Round-Trip Time and Fractional Loss\n            Using
    Session Traversal Utilities for NAT (STUN)\n"
  title: __initial_text__
- contents:
  - "Abstract\n   A host with multiple interfaces needs to choose the best interface\n
    \  for communication.  Oftentimes, this decision is based on a static\n   configuration
    and does not consider the path characteristics, which\n   may affect the user
    experience.\n   This document describes a mechanism for an endpoint to measure
    the\n   path characteristics fractional loss and RTT using Session Traversal\n
    \  Utilities for NAT (STUN) messages.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7982.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n   2.  Notational Conventions  . . . . . . . . . . . . . . . .
    . . .   4\n   3.  Measuring RTT and Fractional Loss . . . . . . . . . . . . .
    .   4\n     3.1.  TRANSACTION_TRANSMIT_COUNTER Attribute  . . . . . . . . .   4\n
    \    3.2.  Usage in Requests . . . . . . . . . . . . . . . . . . . .   5\n     3.3.
    \ Usage in Responses  . . . . . . . . . . . . . . . . . . .   5\n     3.4.  Example
    Operation . . . . . . . . . . . . . . . . . . . .   6\n   4.  IANA Considerations
    . . . . . . . . . . . . . . . . . . . . .   7\n   5.  Security Considerations
    . . . . . . . . . . . . . . . . . . .   7\n   6.  References  . . . . . . . .
    . . . . . . . . . . . . . . . . .   8\n     6.1.  Normative References  . . .
    . . . . . . . . . . . . . . .   8\n     6.2.  Informative References  . . . .
    . . . . . . . . . . . . .   9\n   Acknowledgements  . . . . . . . . . . . . .
    . . . . . . . . . . .   9\n   Authors' Addresses  . . . . . . . . . . . . . .
    . . . . . . . . .  10\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document extends STUN [RFC5389] to make it possible
    to correlate\n   STUN responses to specific requests when retransmits occur.  This\n
    \  assists the client in determining path characteristics like round-\n   trip
    time (RTT) and fractional packet loss.\n   The TRANSACTION_TRANSMIT_COUNTER attribute
    introduced in Section 3.1\n   can be used in Interactive Connectivity Establishment
    (ICE) [RFC5245]\n   connectivity checks (STUN Binding request and response).  It
    can also\n   be used with Traversal Using Relays around NAT (TURN) [RFC5766] by\n
    \  adding this attribute to Allocate requests and responses to measure\n   loss
    and RTT between the client and the respective TURN server.\n   ICE is a mechanism
    commonly used in Voice over IP (VoIP) applications\n   to traverse NATs, and it
    uses a static prioritization formula to\n   order the candidate pairs and perform
    connectivity checks, in which\n   the most preferred address pairs are tested
    first, and when a\n   sufficiently good pair is discovered, that pair is used
    for\n   communications and then further connectivity tests are stopped.\n   When
    multiple paths are available for communication, the endpoint\n   sends ICE connectivity
    checks across each path (candidate pair).\n   Choosing the path with the lowest
    round-trip time is a reasonable\n   approach, but retransmits can cause an otherwise
    good path to appear\n   flawed.  However, STUN's retransmission algorithm [RFC5389]
    cannot\n   determine the round-trip time (RTT) if a STUN request packet is\n   retransmitted
    because each request and retransmission packet is\n   identical.  Further, several
    STUN requests may be sent before the\n   connectivity between candidate pairs
    are ascertained (see Section 16\n   of [RFC5245]).  To resolve the issue of identical
    request and\n   response packets in a STUN transaction, this document changes
    the\n   retransmission behavior for idempotent packets.  Using the mechanism\n
    \  described herein, a client can determine RTT as well as get a hint\n   regarding
    which path direction caused packet loss.  This is achieved\n   by defining a new
    STUN attribute and requires compliant STUN (TURN\n   and ICE) endpoints to count
    request packets.\n   The mechanisms described in this document can be used by
    the\n   controlling agent to influence the ICE candidate pair selection.  How\n
    \  ICE will actually use this information to improve the active\n   candidate
    pair selection is outside the scope of this document.\n"
  title: 1.  Introduction
- contents:
  - "2.  Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n
    \  This specification uses terminology defined in ICE [RFC5245] and STUN\n   [RFC5389].\n"
  title: 2.  Notational Conventions
- contents:
  - "3.  Measuring RTT and Fractional Loss\n   This document defines a new comprehension-optional
    STUN attribute\n   TRANSACTION_TRANSMIT_COUNTER with a STUN Type 0x8025.  This
    type is\n   in the comprehension-optional range, which means that STUN agents
    can\n   safely ignore the attribute.  If ICE is in use, it will fall back to\n
    \  normal procedures.\n   If a client wishes to measure RTT, it inserts the\n
    \  TRANSACTION_TRANSMIT_COUNTER attribute in a STUN request.  In this\n   attribute,
    the client sends the number of times the STUN request is\n   transmitted with
    the same transaction ID.  The server would echo back\n   the transmission count
    in the response so that the client can\n   distinguish between STUN responses
    coming from retransmitted\n   requests.  Hence, the endpoint can use the STUN
    requests and\n   responses to determine the round-trip time (RTT).  The server
    may\n   also convey the number of responses it has sent for the STUN request\n
    \  to the client.  Further, this information enables the client to get a\n   hint
    regarding in which direction the packet loss occurred.  In some\n   cases, it
    is impossible to distinguish between packet reordering and\n   packet loss.  However,
    if this information is collected as network\n   metrics from several clients over
    a longer time period, it will be\n   easier to detect a pattern that can provide
    useful information.\n"
  - contents:
    - "3.1.  TRANSACTION_TRANSMIT_COUNTER Attribute\n   The TRANSACTION_TRANSMIT_COUNTER
      attribute in a STUN request takes a\n   32-bit value.  This document updates
      one of the STUN message\n   structuring rules explained in Section 6 of [RFC5389]
      wherein\n   retransmission of the same request reuses the same transaction ID
      and\n   is bit-wise identical to the previous request.  For idempotent\n   packets,
      the Req and Resp fields in the TRANSACTION_TRANSMIT_COUNTER\n   attribute will
      be incremented by 1 by the client or server for every\n   transmission with
      the same transaction ID.  Any retransmitted STUN\n   request MUST be bit-wise
      identical to the previous request except for\n   the values in the TRANSACTION_TRANSMIT_COUNTER
      attribute.\n   The IANA-assigned STUN type for the new attribute is 0x8025.\n
      \  The format of the value in the TRANSACTION_TRANSMIT_COUNTER attribute\n   in
      the request is:\n       0                   1                   2                   3\n
      \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |        Reserved (Padding)     |    Req        |     Resp      |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \       Figure 1: TRANSACTION_TRANSMIT_COUNTER Attribute in Request\n   The
      fields are described below:\n   Req:  Number of times the request is transmitted
      with the same\n      transaction ID to the server.\n   Resp:  Number of times
      a response with the same transaction ID is\n      sent from the server.  MUST
      be set to zero in requests and ignored\n      by the receiver.\n   The padding
      is necessary to hit the 32-bit boundary needed for STUN\n   attributes.  The
      padding bits are ignored, but to allow for future\n   reuse of these bits, they
      MUST be set to zero.\n"
    title: 3.1.  TRANSACTION_TRANSMIT_COUNTER Attribute
  - contents:
    - "3.2.  Usage in Requests\n   When sending a STUN request, the TRANSACTION_TRANSMIT_COUNTER\n
      \  Attribute allows a client to indicate to the server that it wants to\n   measure
      RTT and get a hint about the direction of any packet loss.\n   The client MUST
      populate the Req value in the\n   TRANSACTION_TRANSMIT_COUNTER.  This value
      MUST reflect the number of\n   requests that have been transmitted to the server.
      \ Therefore, the\n   initial value for the first request sent is 1.  The first
      retransmit\n   will set the value to 2 and so on.\n   The Resp field in the
      attribute MUST be set to zero in the request.\n"
    title: 3.2.  Usage in Requests
  - contents:
    - "3.3.  Usage in Responses\n   When a server receives a STUN request that includes
      a\n   TRANSACTION_TRANSMIT_COUNTER attribute, it processes the request as\n
      \  per the STUN protocol [RFC5389] plus the specific rules mentioned\n   here.
      \ The server checks the following:\n   o  If the TRANSACTION_TRANSMIT_COUNTER
      attribute is not recognized,\n      ignore the attribute because its type indicates
      that it is\n      comprehension-optional.  This should be the existing behavior
      as\n      explained in Section 7.3 of [RFC5389].\n   o  The server that supports
      the TRANSACTION_TRANSMIT_COUNTER\n      attribute MUST echo back the Req field
      in the response using a\n      TRANSACTION_TRANSMIT_COUNTER attribute.\n   o
      \ If the server is stateless or does not want to remember the\n      transaction
      ID, then it populates value 0 for the Resp field in\n      the TRANSACTION_TRANSMIT_COUNTER
      attribute sent in the response.\n      If the server is stateful, then it populates
      the Resp field with\n      the number of responses it has sent for the STUN
      request.\n   A client that receives a STUN response with a\n   TRANSACTION_TRANSMIT_COUNTER
      can check the values in the Req field to\n   accurately calculate the RTT if
      retransmits are occurring.\n   If the server sending the STUN response is stateless,
      the value of\n   the Resp field will always be 0.  If the server keeps state
      of the\n   numbers of STUN requests with that same transaction ID, the value\n
      \  will reflect how many packets the server has seen and responded to.\n   This
      gives the client a hint about in which direction loss occurred.\n   See Section
      3.4 for more details.\n"
    title: 3.3.  Usage in Responses
  - contents:
    - "3.4.  Example Operation\n   An example operation, when a server is stateful,
      is described in\n   Figure 2.  In the first case, all the requests and responses
      are\n   received correctly.\n   In the case of upstream loss, the first request
      is lost, but the\n   second one is received correctly.  The client, upon receiving
      the\n   response, notes that while two requests were sent, only one was\n   received
      by the server.  The server also realizes that the value in\n   the Req field
      does not match the number of received requests,\n   therefore one request was
      lost.  This may also occur at startup in\n   the presence of firewalls or NATs
      that block unsolicited incoming\n   traffic.\n   In the case of downstream loss,
      the responses get lost, the client\n   expecting multiple responses notes that,
      while the server responded\n   to three requests, only one response was received.\n
      \  In the case of loss in both directions, requests and responses get\n   lost
      in tandem, the server notes that one request packet was not\n   received, while
      the client expecting three responses received only\n   one, and then it notes
      that one request and response packet were\n   lost.\n   |     Normal    |  Upstream
      loss | Downstream loss | Both upstream &|\n   |               |                |
      \                | downstream loss|\n   | Client Server |  Client Server |  Client
      \ Server |  Client Server |\n   |+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+|\n
      \  | 1        1,1  |  1        x    |  1         1,1  |  1        x    |\n   |
      \  1,1         |                |    x            |                |\n   |               |
      \ 2        2,1  |  2         2,2  |  2        2,1  |\n   |               |    2,1
      \        |    x            |    x           |\n   |               |                |
      \ 3         3,3  |  3        3,2  |\n   |               |                |    3,3
      \         |    3,2         |\n         Figure 2: Retransmit Operation between
      Client and Server\n   Another example is when the client sends two requests
      but the second\n   request arrives at the server before the first request because
      of\n   out-of-order delivery.  In this case, the stateful server populates\n
      \  value 1 for the Resp field in the TRANSACTION_TRANSMIT_COUNTER\n   attribute
      sent in response to the second request and value 2 for the\n   Resp field in
      the TRANSACTION_TRANSMIT_COUNTER attribute sent in\n   response to the first
      request.\n   The intention with this mechanism is not to carry out comprehensive\n
      \  and accurate measurements regarding in what direction loss is\n   occurring.
      \ In some cases, it might not be able to distinguish the\n   difference between
      downstream loss and packet reordering.\n"
    title: 3.4.  Example Operation
  title: 3.  Measuring RTT and Fractional Loss
- contents:
  - "4.  IANA Considerations\n   This document defines the TRANSACTION_TRANSMIT_COUNTER
    STUN\n   attribute, described in Section 3.  IANA has allocated the\n   comprehension-optional
    codepoint 0x8025 for this attribute.\n"
  title: 4.  IANA Considerations
- contents:
  - "5.  Security Considerations\n   Security considerations discussed in [RFC5389]
    are to be taken into\n   account.  STUN requires that the 96-bit transaction ID
    be uniformly\n   and randomly chosen from the interval 0 .. 2**96-1, and be\n
    \  cryptographically strong.  This is good enough security against an\n   off-path
    attacker.  An on-path attacker can either inject a fake\n   response or modify
    the values in the TRANSACTION_TRANSMIT_COUNTER\n   attribute to mislead the client
    and server.  This attack can be\n   mitigated using STUN authentication.  As the\n
    \  TRANSACTION_TRANSMIT_COUNTER is expected to be used between peers\n   using
    ICE, and ICE uses a STUN short-term credential mechanism, the\n   risk of an on-path
    attack influencing the messages is minimal.  If\n   the TRANSACTION_TRANSMIT_COUNTER
    is used with an Allocate request,\n   one of the following mechanisms can be used
    to prevent attackers from\n   trying to impersonate a TURN server and sending
    a bogus\n   TRANSACTION_TRANSMIT_COUNTER attribute in the Allocate response:\n
    \  1) the STUN long-term credential mechanism, 2) the STUN Extension for\n   Third-Party
    Authorization [RFC7635], or 3) a TLS or DTLS connection\n   between the TURN client
    and the TURN server.  However, an attacker\n   could corrupt, remove, or delay
    an ICE request or response, in order\n   to discourage that path from being used.\n
    \  If not encrypted, the information sent in any STUN packet can\n   potentially
    be observed passively and used for reconnaissance and\n   later attacks.\n"
  title: 5.  Security Considerations
- contents:
  - '6.  References

    '
  - contents:
    - "6.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC5245]  Rosenberg, J., \"Interactive Connectivity Establishment\n              (ICE):
      A Protocol for Network Address Translator (NAT)\n              Traversal for
      Offer/Answer Protocols\", RFC 5245,\n              DOI 10.17487/RFC5245, April
      2010,\n              <http://www.rfc-editor.org/info/rfc5245>.\n   [RFC5389]
      \ Rosenberg, J., Mahy, R., Matthews, P., and D. Wing,\n              \"Session
      Traversal Utilities for NAT (STUN)\", RFC 5389,\n              DOI 10.17487/RFC5389,
      October 2008,\n              <http://www.rfc-editor.org/info/rfc5389>.\n   [RFC5766]
      \ Mahy, R., Matthews, P., and J. Rosenberg, \"Traversal Using\n              Relays
      around NAT (TURN): Relay Extensions to Session\n              Traversal Utilities
      for NAT (STUN)\", RFC 5766,\n              DOI 10.17487/RFC5766, April 2010,\n
      \             <http://www.rfc-editor.org/info/rfc5766>.\n"
    title: 6.1.  Normative References
  - contents:
    - "6.2.  Informative References\n   [RFC7635]  Reddy, T., Patil, P., Ravindranath,
      R., and J. Uberti,\n              \"Session Traversal Utilities for NAT (STUN)
      Extension for\n              Third-Party Authorization\", RFC 7635,\n              DOI
      10.17487/RFC7635, August 2015,\n              <http://www.rfc-editor.org/info/rfc7635>.\n"
    title: 6.2.  Informative References
  title: 6.  References
- contents:
  - "Acknowledgements\n   Thanks to Brandon Williams, Simon Perreault, Aijun Wang,
    Martin\n   Thomson, Oleg Moskalenko, Ram Mohan Ravindranath, Spencer Dawkins,\n
    \  Suresh Krishnan, Ben Campbell, Mirja Kuehlewind, Lionel Morand,\n   Kathleen
    Moriarty, and Alissa Cooper for their valuable input and\n   comments.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Paal-Erik Martinsen\n   Cisco Systems, Inc.\n   Philip
    Pedersens vei 22\n   Lysaker, Akershus  1325\n   Norway\n   Email: palmarti@cisco.com\n
    \  Tirumaleswar Reddy\n   Cisco Systems, Inc.\n   Cessna Business Park, Varthur
    Hobli\n   Sarjapur Marathalli Outer Ring Road\n   Bangalore, Karnataka  560103\n
    \  India\n   Email: tireddy@cisco.com\n   Dan Wing\n   Email: dwing-ietf@fuggles.com\n
    \  Varun Singh\n   CALLSTATS I/O Oy\n   Runeberginkatu 4c A 4\n   Helsinki  00100\n
    \  Finland\n   Email: varun@callstats.io\n   URI:   https://www.callstats.io/about\n"
  title: Authors' Addresses
