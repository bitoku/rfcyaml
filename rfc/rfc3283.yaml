- title: __initial_text__
  contents:
  - '                     Guide to Internet Calendaring

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the various Internet calendaring and\n \
    \  scheduling standards and works in progress, and the relationships\n   between\
    \ them.  Its intent is to provide a context for these\n   documents, assist in\
    \ their understanding, and potentially aid in the\n   design of standards-based\
    \ calendaring and scheduling systems.  The\n   standards addressed are RFC 2445\
    \ (iCalendar), RFC 2446 (iTIP), and\n   RFC 2447 (iMIP).  The work in progress\
    \ addressed is \"Calendar Access\n   Protocol\" (CAP).  This document also describes\
    \ issues and problems\n   that are not solved by these protocols, and that could\
    \ be targets for\n   future work.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.    Introduction . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   1.1   Terminology  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  2\n   1.2   Concepts and Relationships . . . . . . . . . . . . .\
    \ . . . .  4\n   2.    Requirements . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  4\n   2.1   Fundamental Needs  . . . . . . . . . . . . . . . . . . .\
    \ . .  4\n   2.2   Protocol Requirements  . . . . . . . . . . . . . . . . . .\
    \ .  5\n   3.    Solutions  . . . . . . . . . . . . . . . . . . . . . . . . .\
    \  7\n   3.1   Examples . . . . . . . . . . . . . . . . . . . . . . . . . .  7\n\
    \   3.2   Systems  . . . . . . . . . . . . . . . . . . . . . . . . . .  8\n  \
    \ 3.2.1 Standalone Single-user System  . . . . . . . . . . . . . . .  8\n   3.2.2\
    \ Single-user Systems Communicating  . . . . . . . . . . . . .  8\n   3.2.3 Single-user\
    \ with Multiple CUAs . . . . . . . . . . . . . . .  9\n   3.2.4 Single-user with\
    \ Multiple Calendars  . . . . . . . . . . . .  9\n   3.2.5 Users Communicating\
    \ on a Multi-user System . . . . . . . . . 10\n   3.2.6 Users Communicating through\
    \ Different Multi-user Systems . . 10\n   4.    Important Aspects  . . . . . .\
    \ . . . . . . . . . . . . . . . 10\n   4.1   Timezones  . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . 10\n   4.2   Choice of Transport  . . . . . . .\
    \ . . . . . . . . . . . . . 11\n   4.3   Security . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . 11\n   4.4   Amount of data . . . . . . . . . . . .\
    \ . . . . . . . . . . . 11\n   4.5   Recurring Components . . . . . . . . . .\
    \ . . . . . . . . . . 11\n   5.    Open Issues  . . . . . . . . . . . . . . .\
    \ . . . . . . . . . 11\n   5.1   Scheduling People, not Calendars . . . . . .\
    \ . . . . . . . . 12\n   5.2   Administration . . . . . . . . . . . . . . . .\
    \ . . . . . . . 12\n   5.3   Notification . . . . . . . . . . . . . . . . . .\
    \ . . . . . . 12\n   6.    Security Considerations  . . . . . . . . . . . . .\
    \ . . . . . 12\n   6.1   Access Control . . . . . . . . . . . . . . . . . . .\
    \ . . . . 12\n   6.2   Authentication . . . . . . . . . . . . . . . . . . . .\
    \ . . . 12\n   6.3   Using E-mail . . . . . . . . . . . . . . . . . . . . . .\
    \ . . 13\n   6.4   Other Issues . . . . . . . . . . . . . . . . . . . . . . .\
    \ . 13\n         Acknowledgments  . . . . . . . . . . . . . . . . . . . . . .\
    \ 13\n         References . . . . . . . . . . . . . . . . . . . . . . . . . 14\n\
    \         Authors' Addresses . . . . . . . . . . . . . . . . . . . . . 15\n  \
    \       Full Copyright Statement . . . . . . . . . . . . . . . . . . 16\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   Calendaring and scheduling protocols are intended to aid\
    \ individuals\n   in obtaining calendaring information and scheduling meetings\
    \ across\n   the Internet, to aid organizations in providing calendaring\n   information\
    \ on the Internet, and to provide for organizations looking\n   for a calendaring\
    \ and scheduling solution to deploy internally.\n   It is the intent of this document\
    \ to provide a context for these\n   documents, assist in their understanding,\
    \ and potentially help in the\n   design of standards-based calendaring and scheduling\
    \ systems.\n   Problems not solved by these protocols, as well as security issues\
    \ to\n   be kept in mind, are discussed at the end of the document.\n"
- title: 1.1 Terminology
  contents:
  - "1.1 Terminology\n   This memo uses much of the same terminology as iCalendar\
    \ [RFC-2445],\n   iTIP [RFC-2446], iMIP [RFC-2447], and [CAP].  The following\n\
    \   definitions are provided as an introduction; the definitions in the\n   protocol\
    \ specifications themselves should be considered canonical.\n   Calendar\n   \
    \   A collection of events, to-dos, journal entries, etc.  A calendar\n      could\
    \ be the content of a person or resource's agenda; it could\n      also be a collection\
    \ of data serving a more specialized need.\n      Calendars are the basic storage\
    \ containers for calendaring\n      information.\n   Calendar Access Rights\n\
    \      A set of rules defining who may perform what operations, such as\n    \
    \  reading or writing information, on a given calendar.\n   Calendar Service\n\
    \      A running server application that provides access to a number of\n    \
    \  calendar stores.\n   Calendar Store (CS)\n      A data store of a calendar\
    \ service.  A calendar service may have\n      several calendar stores, and each\
    \ store may contain several\n      calendars, as well as properties and components\
    \ outside of those\n      calendars.\n   Calendar User (CU)\n      An entity (often\
    \ a human) that accesses calendar information.\n   Calendar User Agent (CUA)\n\
    \      Software with which the calendar user communicates with a calendar\n  \
    \    service or local calendar store to access calendar information.\n   Component\n\
    \      A piece of calendar data such as an event, a to-do or an alarm.\n     \
    \ Information about components is stored as properties of those\n      components.\n\
    \   Delegator\n      A calendar user who has assigned his or her participation\
    \ in a\n      scheduled calendar component (e.g.  a VEVENT) to another calendar\n\
    \      user (sometimes called the delegate or delegatee).  An example of\n   \
    \   a delegator is a busy executive sending an employee to a meeting\n      in\
    \ his or her place.\n   Delegate\n      A calendar user (sometimes called the\
    \ delegatee) who has been\n      assigned to participate in a scheduled calendar\
    \ component (e.g. a\n      VEVENT) in place of one of the attendees in that component\n\
    \      (sometimes called the delegator).  An example of a delegate is a\n    \
    \  team member sent to a particular meeting.\n   Designate\n      A calendar user\
    \ authorized to act on behalf of another calendar\n      user.  An example of\
    \ a designate is an assistant scheduling\n      meetings for his or her superior.\n\
    \   Local Store\n      A CS that is on the same device as the CUA.\n   Property\n\
    \      A description of some element of a component, such as a start\n      time,\
    \ title or location.\n   Remote Store\n      A CS that is not on the same device\
    \ as the CUA.\n"
- title: 1.2 Concepts and Relationships
  contents:
  - "1.2 Concepts and Relationships\n   iCalendar is the language used to describe\
    \ calendar objects.  iTIP\n   describes a way to use the iCalendar language to\
    \ do scheduling.  iMIP\n   describes how to do iTIP scheduling via e-mail.  CAP\
    \ describes a way\n   to use the iCalendar language to access a calendar store\
    \ in real-\n   time.\n   The relationship between calendaring protocols is similar\
    \ to that\n   between e-mail protocols.  In those terms, iCalendar is analogous\
    \ to\n   RFC 2822, iTIP and iMIP are analogous to the Simple Mail Transfer\n \
    \  Protocol (SMTP), and CAP is analogous to the Post Office Protocol\n   (POP)\
    \ or Internet Message Access Protocol (IMAP).\n"
- title: 2. Requirements
  contents:
  - '2. Requirements

    '
- title: 2.1 Fundamental Needs
  contents:
  - "2.1 Fundamental Needs\n   The following scenarios illustrate people and organizations'\
    \ basic\n   calendaring and scheduling needs:\n      a] A doctor wishes to keep\
    \ track of all her appointments.\n      Need: To read and manipulate one's own\
    \ calendar with only one CUA.\n      b] A busy musician wants to maintain her\
    \ schedule with multiple\n      devices, such as through an Internet-based agenda\
    \ and with a PDA.\n      Need: To read and manipulate one's own calendar, possibly\
    \ with\n      solutions from different vendors.\n      c] A software development\
    \ team wishes to more effectively schedule\n      their time through viewing each\
    \ other's calendar information.\n      Need: To share calendar information between\
    \ users of the same\n      calendar service.\n      d] A teacher wants his students\
    \ to schedule appointments during\n      his office hours.\n      Need: To schedule\
    \ calendar events, to-dos and journals with other\n      users of the same calendar\
    \ service.\n      e] A movie theater wants to publish its schedule for prospective\n\
    \      customers.\n      Need: To share calendar information with users of other\
    \ calendar\n      services, possibly from a number of different vendors.\n   \
    \   f] A social club wants to schedule calendar entries effectively\n      with\
    \ its members.\n      Need: To schedule calendar events and to-dos with users\
    \ of other\n      calendar services, possibly from a number of different vendors.\n"
- title: 2.2 Protocol Requirements
  contents:
  - "2.2 Protocol Requirements\n   Some of these needs can be met by proprietary solutions\
    \ (a, c, d),\n   but others can not (b, e, f).  These latter scenarios show that\n\
    \   standard protocols are required for accessing information in a\n   calendar\
    \ store and scheduling calendar entries.  In addition, these\n   protocols require\
    \ a common data format for representing calendar\n   information.\n   These requirements\
    \ are met by the following protocol specifications.\n      - Data format: iCalendar\
    \ [RFC-2445]\n      iCalendar [RFC-2445] provides a data format for representing\n\
    \      calendar information, to be used and exchanged by other protocols.\n  \
    \    iCalendar [RFC-2445] can also be used in other contexts, such as a\n    \
    \  drag-and-drop interface, or an export/import feature.  All the\n      other\
    \ calendaring protocols depend on iCalendar [RFC-2445], so all\n      elements\
    \ of a standards-based calendaring and scheduling systems\n      will have to\
    \ be able to interpret iCalendar [RFC-2445].\n      - Scheduling protocol: iTIP\
    \ [RFC-2446]\n      iTIP [RFC-2446] describes the messages used to schedule calendar\n\
    \      events.  Within iTIP messages, events are represented in iCalendar\n  \
    \    [RFC-2445] format, and have semantics that identify the message as\n    \
    \  being an invitation to a meeting, an acceptance of an invitation,\n      or\
    \ the assignment of a task.\n      iTIP [RFC-2446] messages are used in the scheduling\
    \ workflow,\n      where users exchange messages in order to organize things such\
    \ as\n      events and to-dos.  CUAs generate and interpret iTIP [RFC-2446]\n\
    \      messages at the direction of the calendar user.  With iTIP [RFC-\n    \
    \  2446] users can create, modify, delete, reply to, counter, and\n      decline\
    \ counters to the various iCalendar [RFC-2445] components.\n      Furthermore,\
    \ users can also request the free/busy time of other\n      people.\n      iTIP\
    \ [RFC-2446] is transport-independent, and has one specified\n      transport\
    \ binding: iMIP [RFC-2447] binds iTIP to e-mail.  In\n      addition [CAP] will\
    \ provide a real-time binding of iTIP [RFC-\n      2446], allowing CUAs to perform\
    \ calendar management and scheduling\n      over a single connection.\n      -\
    \ Calendar management protocol: [CAP]\n      [CAP] describes the messages used\
    \ to manage calendars on a\n      calendar store.  These messages use iCalendar\
    \ [RFC-2445] to\n      describe various components such as events and to-dos.\
    \  These\n      messages make it possible to perform iTIP [RFC-2446] operations,\n\
    \      as well as other operations relating to a calendar store such as\n    \
    \  searching, creating calendars, specifying calendar properties, and\n      specifying\
    \ calendar access rights.\n"
- title: 3. Solutions
  contents:
  - '3. Solutions

    '
- title: 3.1 Examples
  contents:
  - "3.1 Examples\n   Returning to the scenarios presented in section 2.1, the calendaring\n\
    \   protocols can be used in the following ways:\n      a] The doctor can use\
    \ a proprietary CUA with a local store, and\n      perhaps use iCalendar [RFC-2445]\
    \ as a storage mechanism.  This\n      would allow her to easily import her data\
    \ store into another\n      application that supports iCalendar [RFC-2445].\n\
    \      b] The musician who wishes to access her agenda from anywhere can\n   \
    \   use a [CAP]-enabled calendar service accessible over the Internet.\n     \
    \ She can then use any available [CAP] clients to access the data.\n      A proprietary\
    \ system that provides access through a Web-based\n      interface could also\
    \ be employed, but the use of [CAP] would be\n      superior in that it would\
    \ allow the use of third party\n      applications, such as PDA synchronization\
    \ tools.\n      c] The development team can use a calendar service which supports\n\
    \      [CAP], and each member can use a [CAP]-enabled CUA of their\n      choice.\n\
    \      Alternatively, each member could use an iMIP [RFC-2447]-enabled\n     \
    \ CUA, and they could book meetings over e-mail.  This solution has\n      the\
    \ drawback that it is difficult to examine other users' agendas,\n      making\
    \ the organization of meetings more difficult.\n      Proprietary solutions are\
    \ also available, but they require that\n      all members use clients by the\
    \ same vendor, and disallow the use\n      of third party applications.\n    \
    \  d] The teacher can set up a calendar service, and have students\n      book\
    \ time through any of the iTIP [RFC-2446] bindings.  [CAP]\n      provides real-time\
    \ access, but could require additional\n      configuration.  iMIP [RFC-2447]\
    \ would be the easiest to configure,\n      but may require more e-mail processing.\n\
    \      If [CAP] access is provided then determining the state of the\n      teacher's\
    \ schedule is straightforward.  If not, this can be\n      determined through\
    \ iTIP [RFC-2446] free/busy requests.  Non-\n      standard methods could also\
    \ be employed, such as serving up\n      iCalendar [RFC-2445], HTML, or XML over\
    \ HTTP.\n      A proprietary system could also be used, but would require that\n\
    \      all students be able to use software from a specific vendor.\n      e]\
    \ [CAP] would be preferred for publishing a movie theater's\n      schedule, since\
    \ it provides advanced access and search\n      capabilities.  It also allows\
    \ easy integration with customers'\n      calendar systems.\n      Non-standard\
    \ methods such as serving data over HTTP could also be\n      employed, but would\
    \ be harder to integrate with customers'\n      systems.\n      Using a completely\
    \ proprietary solution would be very difficult,\n      if not impossible, since\
    \ it would require every user to install\n      and use the proprietary software.\n\
    \      f] The social club could distribute meeting information in the\n      form\
    \ of iTIP [RFC-2446] messages, sent via e-mail using iMIP\n      [RFC-2447]. \
    \ The club could distribute meeting invitations, as\n      well as a full published\
    \ agenda.\n      Alternatively, the club could provide access to a [CAP]-enabled\n\
    \      calendar service.  However, this solution would be more expensive\n   \
    \   since it requires the maintenance of a server.\n"
- title: 3.2 Systems
  contents:
  - "3.2 Systems\n   The following diagrams illustrate possible systems and their\
    \ usage of\n   the various protocols.\n"
- title: 3.2.1 Standalone Single-user System
  contents:
  - "3.2.1 Standalone Single-user System\n   A single user system that does not communicate\
    \ with other systems\n   need not employ any of the protocols.  However, it may\
    \ use iCalendar\n   [RFC-2445] as a data format in some places.\n          -----------\
    \       O\n         | CUA w/    |     -+- user\n         |local store|      A\n\
    \          -----------      / \\\n"
- title: 3.2.2 Single-user Systems Communicating
  contents:
  - "3.2.2 Single-user Systems Communicating\n   Users with single-user systems may\
    \ schedule meetings with each others\n   using iTIP [RFC-2446].  The easiest binding\
    \ of iTIP [RFC-2446] to use\n   would be iMIP [RFC-2447], since messages can be\
    \ held in the users'\n   mail queues, which we assume to already exist.  [CAP]\
    \ could also be\n   used.\n          O   -----------                    -----------\
    \   O\n         -+- | CUA w/    | -----[iMIP]----- | CUA w/    | -+- user\n  \
    \        A  |local store|     Internet     |local store|  A\n         / \\  -----------\
    \                    -----------  / \\\n"
- title: 3.2.3 Single-user with Multiple CUAs
  contents:
  - "3.2.3 Single-user with Multiple CUAs\n   A single user may use more than one\
    \ CUA to access his or her\n   calendar.  The user may use a PDA, a Web client,\
    \ a PC, or some other\n   device, depending on accessibility.  Some of these clients\
    \ may have\n   local stores and others may not.  Those with local stores need\
    \ to\n   synchronize the data on the CUA with the data on the CS.\n          \
    \      -----------\n               |   CUA w   | -----[CAP]----------+\n     \
    \          |local store|                     |\n          O     -----------  \
    \                  ----------\n         -+-                                  |\
    \   CS     |\n          A                                   |          |\n   \
    \      / \\                                   ----------\n                -----------\
    \                      |\n               |  CUA w/o  | -----[CAP]----------+\n\
    \               |local store|\n                -----------\n"
- title: 3.2.4 Single-user with Multiple Calendars
  contents:
  - "3.2.4 Single-user with Multiple Calendars\n   A single user may have many independent\
    \ calendars; for example, one\n   may contain work-related information and another\
    \ personal\n   information.  The CUA may or may not have a local store.  If it\
    \ does,\n   then it needs to synchronize the data of the CUA with the data on\n\
    \   both of the CS.\n                                               ----------\n\
    \                     +------------[CAP]------ |   CS     |\n                \
    \     |                        |          |\n          O     -----------     \
    \               ----------\n         -+-   |  CUA      |\n          A    |   \
    \        |\n         / \\    -----------\n                     |             \
    \            ----------\n                     +------------[CAP]------ |   CS\
    \     |\n                                              |          |\n        \
    \                                       ----------\n"
- title: 3.2.5 Users Communicating on a Multi-user System
  contents:
  - "3.2.5 Users Communicating on a Multi-user System\n   Users on a multi-user system\
    \ may schedule meetings with each other\n   using [CAP]-enabled CUAs and services.\
    \  The CUAs may or may not have\n   local stores.  Those with local stores need\
    \ to synchronize the data\n   on the CUAs with the data on the CS.\n         \
    \ O     -----------\n         -+-   |   CUA w   | -----[CAP]----------+\n    \
    \      A    |local store|                     |\n         / \\    -----------\
    \                    ----------\n                                            \
    \  |   CS     |\n                                              |          |\n\
    \                                               ----------\n          O     -----------\
    \                      |\n         -+-   |  CUA w/o  | -----[CAP]----------+\n\
    \          A    |local store|\n         / \\    -----------\n"
- title: 3.2.6 Users Communicating through Different Multi-user Systems
  contents:
  - "3.2.6 Users Communicating through Different Multi-user Systems\n   Users on a\
    \ multi-user system may need to schedule meetings with users\n   on a different\
    \ multi-user system.  The services can communicate using\n   [CAP] or iMIP [RFC-2447].\n\
    \          O     -----------                    ----------\n         -+-   | \
    \  CUA w   | -----[CAP]-------|   CS     |\n          A    |local store|     \
    \             |          |\n         / \\    -----------                    ----------\n\
    \                                                   |\n                      \
    \                       [CAP] or [iMIP]\n                                    \
    \               |\n          O     -----------                    ----------\n\
    \         -+-   |  CUA w/o  | -----[CAP]-------|   CS     |\n          A    |local\
    \ store|                  |          |\n         / \\    -----------         \
    \           ----------\n"
- title: 4. Important Aspects
  contents:
  - "4. Important Aspects\n   There are a number of important aspects of these calendaring\n\
    \   standards of which people, especially implementers, should be aware.\n"
- title: 4.1 Timezones
  contents:
  - "4.1 Timezones\n   The dates and times in components can refer to a specific time\
    \ zone.\n   Time zones can be defined in a central store, or they may be defined\n\
    \   by a user to fit his or her needs.  All users and applications should\n  \
    \ be aware of time zones and time zone differences.  New time zones may\n   need\
    \ to be added, and others removed.  Two different vendors may\n   describe the\
    \ same time zone differently (such as by using a different\n   name).\n"
- title: 4.2 Choice of Transport
  contents:
  - "4.2 Choice of Transport\n   There are issues to be aware of in choosing between\
    \ a network\n   protocol such as [CAP], or a store and forward protocol, such\
    \ as iMIP\n   [RFC-2447].\n   The use of a network (\"on-the-wire\") mechanism\
    \ may require some\n   organizations to make provisions to allow calendaring traffic\
    \ to\n   traverse a corporate firewall on the required ports.  Depending on\n\
    \   the organizational culture, this may be a challenging social\n   exercise.\n\
    \   The use of an email-based mechanism exposes time-sensitive data to\n   unbounded\
    \ latency.  Large or heavily utilized mail systems may\n   experience an unacceptable\
    \ delay in message receipt.\n"
- title: 4.3 Security
  contents:
  - "4.3 Security\n   See the \"Security Considerations\" (Section 6) section below.\n"
- title: 4.4 Amount of data
  contents:
  - "4.4 Amount of data\n   In some cases, a component may be very large, for instance,\
    \ a\n   component with a very large attachment.  Some applications may be\n  \
    \ low-bandwidth or may be limited in the amount of data they can store.\n   Maximum\
    \ component size may be set in [CAP].  It can also be\n   controlled in iMIP [RFC-2447]\
    \ by restricting the maximum size of the\n   e-mail that the application can download.\n"
- title: 4.5 Recurring Components
  contents:
  - "4.5 Recurring Components\n   In iCAL [RFC-2445], one can specify complex recurrence\
    \ rules for\n   VEVENTs, VTODOs, and VJOURNALs.  One must be careful to correctly\n\
    \   interpret these recurrence rules and pay extra attention to being\n   able\
    \ to interoperate using them.\n"
- title: 5. Open Issues
  contents:
  - "5. Open Issues\n   Many issues are not currently resolved by these protocols,\
    \ and many\n   desirable features are not yet provided.  Some of the more prominent\n\
    \   ones are outlined below.\n"
- title: 5.1 Scheduling People, not Calendars
  contents:
  - "5.1 Scheduling People, not Calendars\n   Meetings are scheduled with people;\
    \ however, people may have many\n   calendars, and may store these calendars in\
    \ many places.  There may\n   also be many routes to contact them.  The calendaring\
    \ protocols do\n   not attempt to provide unique access for contacting a given\
    \ person.\n   Instead, 'calendar addresses' are booked, which may be e-mail\n\
    \   addresses or individual calendars.  It is up to the users themselves\n   to\
    \ orchestrate mechanisms to ensure that the bookings go to the right\n   place.\n"
- title: 5.2 Administration
  contents:
  - "5.2 Administration\n   The calendaring protocols do not address the issues of\
    \ administering\n   users and calendars on a calendar service.  This must be handled\
    \ by\n   proprietary mechanisms for each implementation.\n"
- title: 5.3 Notification
  contents:
  - "5.3 Notification\n   People often wish to be notified of upcoming events, new\
    \ events, or\n   changes to existing events.  The calendaring protocols do not\
    \ attempt\n   to address these needs in a real-time system.  Instead, the ability\n\
    \   to store alarm information on events is provided, which can be used\n   to\
    \ provide client-side notification of upcoming events.  To organize\n   notification\
    \ of new or changed events, clients have to poll the data\n   store.\n"
- title: 6. Security Considerations
  contents:
  - '6. Security Considerations

    '
- title: 6.1 Access Control
  contents:
  - "6.1 Access Control\n   There has to be reasonable granularity in the configuration\
    \ options\n   for access to data through [CAP], so that what should be released\
    \ to\n   requesters is released, and what shouldn't is not.  Details of\n   handling\
    \ this are described in [CAP].\n"
- title: 6.2 Authentication
  contents:
  - "6.2 Authentication\n   Access control must be coupled with a good authentication\
    \ system, so\n   that the right people get the right information.  For [CAP],\
    \ this\n   means requiring authentication before any database access can be\n\
    \   performed, and checking access rights and authentication credentials\n   before\
    \ releasing information.  [CAP] uses the Simple Authentication\n   Security Layer\
    \ (SASL) for this authentication.  In iMIP [RFC-2447],\n   this may present some\
    \ challenges, as authentication is often not a\n   consideration in store-and-forward\
    \ protocols.\n   Authentication is also important for scheduling, in that receivers\
    \ of\n   scheduling messages should be able to validate the apparent sender.\n\
    \   Since scheduling messages are wrapped in MIME [RFC-2045], signing and\n  \
    \ encryption are freely available.  For messages transmitted over mail,\n   this\
    \ is the only available alternative.  It is suggested that\n   developers take\
    \ care in implementing the security features in iMIP\n   [RFC-2447], bearing in\
    \ mind that the concept and need may be foreign\n   or non-obvious to users, yet\
    \ essential for the system to function as\n   they might expect.\n   The real-time\
    \ protocols provide for the authentication of users, and\n   the preservation\
    \ of that authentication information, allowing for\n   validation by the receiving\
    \ end-user or server.\n"
- title: 6.3 Using E-mail
  contents:
  - "6.3 Using E-mail\n   Because scheduling information can be transmitted over mail\
    \ without\n   any authentication information, e-mail spoofing is extremely easy\
    \ if\n   the receiver is not checking for authentication.  It is suggested\n \
    \  that implementers consider requiring authentication as a default,\n   using\
    \ mechanisms such as are described in Section 3 of iMIP [RFC-\n   2447].  The\
    \ use of e-mail, and the potential for anonymous\n   connections, means that 'calendar\
    \ spam' is possible.  Developers\n   should consider this threat when designing\
    \ systems, particularly\n   those that allow for automated request processing.\n"
- title: 6.4 Other Issues
  contents:
  - "6.4 Other Issues\n   The current security context should be obvious to users.\
    \  Because the\n   underlying mechanisms may not be clear to users, efforts to\
    \ make\n   clear the current state in the UI should be made.  One example of\n\
    \   this is the 'lock' icon used in some Web browsers during secure\n   connections.\n\
    \   With both iMIP [RFC-2447] and [CAP], the possibilities of Denial of\n   Service\
    \ attacks must be considered.  The ability to flood a calendar\n   system with\
    \ bogus requests is likely to be exploited once these\n   systems become widely\
    \ deployed, and detection and recovery methods\n   will need to be considered.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Thanks to the following, who have participated in the development\
    \ of\n   this document:\n      Eric Busboom, Pat Egen, David Madeo, Shawn Packwood,\
    \ Bruce Kahn,\n      Alan Davies, Robb Surridge.\n"
- title: References
  contents:
  - "References\n   [RFC-2445] Dawson, F. and D. Stenerson, \"Internet Calendaring\
    \ and\n              Scheduling Core Object Specification - iCalendar\", RFC\n\
    \              2445, November 1998.\n   [RFC-2446] Silverberg, S., Mansour, S.,\
    \ Dawson, F. and R. Hopson,\n              \"iCalendar Transport-Independent Interoperability\
    \ Protocol\n              (iTIP):  Scheduling Events, Busy Time, To-dos and Journal\n\
    \              Entries\", RFC 2446, November 1998.\n   [RFC-2447] Dawson, F.,\
    \ Mansour, S. and S. Silverberg, \"iCalendar\n              Message-Based Interoperability\
    \ Protocol - iMIP\", RFC 2447,\n              November 1998.\n   [RFC-2045] Freed,\
    \ N. and N. Borenstein, \"Multipurpose Internet Mail\n              Extensions\
    \ (MIME) - Part One: Format of Internet Message\n              Bodies\", RFC 2045,\
    \ November 1996.\n   [CAP]      Mansour, S., Royer, D., Babics, G., and Hill,\
    \ P.,\n              \"Calendar Access Protocol (CAP)\", Work in Progress.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Bob Mahoney\n   MIT\n   E40-327\n   77 Massachusetts Avenue\n\
    \   Cambridge, MA  02139\n   US\n   Phone: (617) 253-0774\n   EMail: bobmah@mit.edu\n\
    \   George Babics\n   Steltor\n   2000 Peel Street\n   Montreal, Quebec  H3A 2W5\n\
    \   CA\n   Phone: (514) 733-8500 x4201\n   EMail: georgeb@steltor.com\n   Alexander\
    \ Taler\n   EMail: alex@0--0.org\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2002).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
