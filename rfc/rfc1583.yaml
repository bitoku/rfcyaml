- title: __initial_text__
  contents:
  - '                             OSPF Version 2

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n    This document specifies an Internet standards track\
    \ protocol for the\n    Internet community, and requests discussion and suggestions\
    \ for\n    improvements.  Please refer to the current edition of the \"Internet\n\
    \    Official Protocol Standards\" (STD 1) for the standardization state\n   \
    \ and status of this protocol.  Distribution of this memo is\n    unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n    This memo documents version 2 of the OSPF protocol.  OSPF is a\n\
    \    link-state routing protocol.  It is designed to be run internal to a\n  \
    \  single Autonomous System.  Each OSPF router maintains an identical\n    database\
    \ describing the Autonomous System's topology.  From this\n    database, a routing\
    \ table is calculated by constructing a shortest-\n    path tree.\n    OSPF recalculates\
    \ routes quickly in the face of topological changes,\n    utilizing a minimum\
    \ of routing protocol traffic.  OSPF provides\n    support for equal-cost multipath.\
    \  Separate routes can be calculated\n    for each IP Type of Service.  An area\
    \ routing capability is\n    provided, enabling an additional level of routing\
    \ protection and a\n    reduction in routing protocol traffic.  In addition, all\
    \ OSPF\n    routing protocol exchanges are authenticated.\n    OSPF Version 2\
    \ was originally documented in RFC 1247. The\n    differences between RFC 1247\
    \ and this memo are explained in Appendix\n    E. The differences consist of bug\
    \ fixes and clarifications, and are\n    backward-compatible in nature. Implementations\
    \ of RFC 1247 and of\n    this memo will interoperate.\n    Please send comments\
    \ to ospf@gated.cornell.edu.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n    1       Introduction ...........................................\
    \ 5\n    1.1     Protocol Overview ...................................... 5\n\
    \    1.2     Definitions of commonly used terms ..................... 6\n    1.3\
    \     Brief history of link-state routing technology ......... 9\n    1.4    \
    \ Organization of this document .......................... 9\n    2       The\
    \ Topological Database .............................. 10\n    2.1     The shortest-path\
    \ tree ................................ 13\n    2.2     Use of external routing\
    \ information ................... 16\n    2.3     Equal-cost multipath ..................................\
    \ 20\n    2.4     TOS-based routing ..................................... 20\n\
    \    3       Splitting the AS into Areas ........................... 21\n    3.1\
    \     The backbone of the Autonomous System ................. 22\n    3.2    \
    \ Inter-area routing .................................... 22\n    3.3     Classification\
    \ of routers ............................. 23\n    3.4     A sample area configuration\
    \ ........................... 24\n    3.5     IP subnetting support .................................\
    \ 30\n    3.6     Supporting stub areas ................................. 31\n\
    \    3.7     Partitions of areas ................................... 32\n    4\
    \       Functional Summary .................................... 34\n    4.1  \
    \   Inter-area routing .................................... 35\n    4.2     AS\
    \ external routes .................................... 35\n    4.3     Routing\
    \ protocol packets .............................. 35\n    4.4     Basic implementation\
    \ requirements ..................... 38\n    4.5     Optional OSPF capabilities\
    \ ............................ 39\n    5       Protocol data structures ..............................\
    \ 41\n    6       The Area Data Structure ............................... 42\n\
    \    7       Bringing Up Adjacencies ............................... 45\n    7.1\
    \     The Hello Protocol .................................... 45\n    7.2    \
    \ The Synchronization of Databases ...................... 46\n    7.3     The\
    \ Designated Router ................................. 47\n    7.4     The Backup\
    \ Designated Router .......................... 48\n    7.5     The graph of adjacencies\
    \ .............................. 49\n    8       Protocol Packet Processing ............................\
    \ 50\n    8.1     Sending protocol packets .............................. 51\n\
    \    8.2     Receiving protocol packets ............................ 53\n    9\
    \       The Interface Data Structure .......................... 55\n    9.1  \
    \   Interface states ...................................... 58\n    9.2     Events\
    \ causing interface state changes ................ 61\n    9.3     The Interface\
    \ state machine ........................... 62\n    9.4     Electing the Designated\
    \ Router ........................ 65\n    9.5     Sending Hello packets .................................\
    \ 67\n    9.5.1   Sending Hello packets on non-broadcast networks ....... 68\n\
    \    10      The Neighbor Data Structure ........................... 69\n    10.1\
    \    Neighbor states ....................................... 72\n    10.2    Events\
    \ causing neighbor state changes ................. 75\n    10.3    The Neighbor\
    \ state machine ............................ 77\n    10.4    Whether to become\
    \ adjacent ............................ 83\n    10.5    Receiving Hello Packets\
    \ ............................... 83\n    10.6    Receiving Database Description\
    \ Packets ................ 86\n    10.7    Receiving Link State Request Packets\
    \ .................. 89\n    10.8    Sending Database Description Packets ..................\
    \ 89\n    10.9    Sending Link State Request Packets .................... 90\n\
    \    10.10   An Example ............................................ 91\n    11\
    \      The Routing Table Structure ........................... 93\n    11.1  \
    \  Routing table lookup .................................. 96\n    11.2    Sample\
    \ routing table, without areas ................... 97\n    11.3    Sample routing\
    \ table, with areas ...................... 98\n    12      Link State Advertisements\
    \ ............................ 100\n    12.1    The Link State Advertisement Header\
    \ .................. 101\n    12.1.1  LS age ...............................................\
    \ 102\n    12.1.2  Options .............................................. 102\n\
    \    12.1.3  LS type .............................................. 103\n    12.1.4\
    \  Link State ID ........................................ 103\n    12.1.5  Advertising\
    \ Router ................................... 105\n    12.1.6  LS sequence number\
    \ ................................... 105\n    12.1.7  LS checksum ..........................................\
    \ 106\n    12.2    The link state database .............................. 107\n\
    \    12.3    Representation of TOS ................................ 108\n    12.4\
    \    Originating link state advertisements ................ 109\n    12.4.1  Router\
    \ links ......................................... 112\n    12.4.2  Network links\
    \ ........................................ 118\n    12.4.3  Summary links ........................................\
    \ 120\n    12.4.4  Originating summary links into stub areas ............ 123\n\
    \    12.4.5  AS external links .................................... 124\n    13\
    \      The Flooding Procedure ............................... 126\n    13.1  \
    \  Determining which link state is newer ................ 130\n    13.2    Installing\
    \ link state advertisements in the database . 130\n    13.3    Next step in the\
    \ flooding procedure .................. 131\n    13.4    Receiving self-originated\
    \ link state ................. 134\n    13.5    Sending Link State Acknowledgment\
    \ packets ............ 135\n    13.6    Retransmitting link state advertisements\
    \ ............. 136\n    13.7    Receiving link state acknowledgments .................\
    \ 138\n    14      Aging The Link State Database ........................ 139\n\
    \    14.1    Premature aging of advertisements .................... 139\n    15\
    \      Virtual Links ........................................ 140\n    16    \
    \  Calculation Of The Routing Table ..................... 142\n    16.1    Calculating\
    \ the shortest-path tree for an area ....... 143\n    16.1.1  The next hop calculation\
    \ ............................. 149\n    16.2    Calculating the inter-area routes\
    \ .................... 150\n    16.3    Examining transit areas' summary links\
    \ ............... 152\n    16.4    Calculating AS external routes .......................\
    \ 154\n    16.5    Incremental updates -- summary link advertisements ... 156\n\
    \    16.6    Incremental updates -- AS external link advertisements 157\n    16.7\
    \    Events generated as a result of routing table changes  157\n    16.8    Equal-cost\
    \ multipath ................................. 158\n    16.9    Building the non-zero-TOS\
    \ portion of the routing table 158\n            Footnotes ............................................\
    \ 161\n            References ........................................... 164\n\
    \    A       OSPF data formats .................................... 166\n    A.1\
    \     Encapsulation of OSPF packets ........................ 166\n    A.2    \
    \ The Options field .................................... 168\n    A.3     OSPF\
    \ Packet Formats .................................. 170\n    A.3.1   The OSPF\
    \ packet header ............................... 171\n    A.3.2   The Hello packet\
    \ ..................................... 173\n    A.3.3   The Database Description\
    \ packet ...................... 175\n    A.3.4   The Link State Request packet\
    \ ........................ 177\n    A.3.5   The Link State Update packet .........................\
    \ 179\n    A.3.6   The Link State Acknowledgment packet ................. 181\n\
    \    A.4     Link state advertisement formats ..................... 183\n    A.4.1\
    \   The Link State Advertisement header .................. 184\n    A.4.2   Router\
    \ links advertisements .......................... 186\n    A.4.3   Network links\
    \ advertisements ......................... 190\n    A.4.4   Summary link advertisements\
    \ .......................... 192\n    A.4.5   AS external link advertisements\
    \ ...................... 194\n    B       Architectural Constants ..............................\
    \ 196\n    C       Configurable Constants ............................... 198\n\
    \    C.1     Global parameters .................................... 198\n    C.2\
    \     Area parameters ...................................... 198\n    C.3    \
    \ Router interface parameters .......................... 200\n    C.4     Virtual\
    \ link parameters .............................. 202\n    C.5     Non-broadcast,\
    \ multi-access network parameters ....... 203\n    C.6     Host route parameters\
    \ ................................ 203\n    D       Authentication .......................................\
    \ 205\n    D.1     AuType 0 -- No authentication ........................ 205\n\
    \    D.2     AuType 1 -- Simple password .......................... 205\n    E\
    \       Differences from RFC 1247 ............................ 207\n    E.1  \
    \   A fix for a problem with OSPF Virtual links .......... 207\n    E.2     Supporting\
    \ supernetting and subnet 0 ................. 208\n    E.3     Obsoleting LSInfinity\
    \ in router links advertisements . 209\n    E.4     TOS encoding updated .................................\
    \ 209\n    E.5     Summarizing routes into transit areas ................ 210\n\
    \    E.6     Summarizing routes into stub areas ................... 210\n    E.7\
    \     Flushing anomalous network links advertisements ...... 210\n    E.8    \
    \ Required Statistics appendix deleted ................. 211\n    E.9     Other\
    \ changes ........................................ 211\n    F.      An algorithm\
    \ for assigning Link State IDs ............ 213\n            Security Considerations\
    \ .............................. 216\n            Author's Address .....................................\
    \ 216\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n    This document is a specification of the Open Shortest Path\
    \ First\n    (OSPF) TCP/IP internet routing protocol.  OSPF is classified as an\n\
    \    Interior Gateway Protocol (IGP).  This means that it distributes\n    routing\
    \ information between routers belonging to a single Autonomous\n    System.  The\
    \ OSPF protocol is based on link-state or SPF technology.\n    This is a departure\
    \ from the Bellman-Ford base used by traditional\n    TCP/IP internet routing\
    \ protocols.\n    The OSPF protocol was developed by the OSPF working group of\
    \ the\n    Internet Engineering Task Force.  It has been designed expressly for\n\
    \    the TCP/IP internet environment, including explicit support for IP\n    subnetting,\
    \ TOS-based routing and the tagging of externally-derived\n    routing information.\
    \  OSPF also provides for the authentication of\n    routing updates, and utilizes\
    \ IP multicast when sending/receiving\n    the updates.  In addition, much work\
    \ has been done to produce a\n    protocol that responds quickly to topology changes,\
    \ yet involves\n    small amounts of routing protocol traffic.\n    The author\
    \ would like to thank Fred Baker, Jeffrey Burgan, Rob\n    Coltun, Dino Farinacci,\
    \ Vince Fuller, Phanindra Jujjavarapu, Milo\n    Medin, Kannan Varadhan and the\
    \ rest of the OSPF working group for\n    the ideas and support they have given\
    \ to this project.\n    1.1.  Protocol overview\n        OSPF routes IP packets\
    \ based solely on the destination IP\n        address and IP Type of Service found\
    \ in the IP packet header.\n        IP packets are routed \"as is\" -- they are\
    \ not encapsulated in\n        any further protocol headers as they transit the\
    \ Autonomous\n        System.  OSPF is a dynamic routing protocol.  It quickly\
    \ detects\n        topological changes in the AS (such as router interface\n \
    \       failures) and calculates new loop-free routes after a period of\n    \
    \    convergence.  This period of convergence is short and involves a\n      \
    \  minimum of routing traffic.\n        In a link-state routing protocol, each\
    \ router maintains a\n        database describing the Autonomous System's topology.\
    \  Each\n        participating router has an identical database.  Each individual\n\
    \        piece of this database is a particular router's local state\n       \
    \ (e.g., the router's usable interfaces and reachable neighbors).\n        The\
    \ router distributes its local state throughout the Autonomous\n        System\
    \ by flooding.\n        All routers run the exact same algorithm, in parallel.\
    \  From the\n        topological database, each router constructs a tree of shortest\n\
    \        paths with itself as root.  This shortest-path tree gives the\n     \
    \   route to each destination in the Autonomous System.  Externally\n        derived\
    \ routing information appears on the tree as leaves.\n        OSPF calculates\
    \ separate routes for each Type of Service (TOS).\n        When several equal-cost\
    \ routes to a destination exist, traffic\n        is distributed equally among\
    \ them.  The cost of a route is\n        described by a single dimensionless metric.\n\
    \        OSPF allows sets of networks to be grouped together.  Such a\n      \
    \  grouping is called an area.  The topology of an area is hidden\n        from\
    \ the rest of the Autonomous System.  This information hiding\n        enables\
    \ a significant reduction in routing traffic.  Also,\n        routing within the\
    \ area is determined only by the area's own\n        topology, lending the area\
    \ protection from bad routing data.  An\n        area is a generalization of an\
    \ IP subnetted network.\n        OSPF enables the flexible configuration of IP\
    \ subnets.  Each\n        route distributed by OSPF has a destination and mask.\
    \  Two\n        different subnets of the same IP network number may have\n   \
    \     different sizes (i.e., different masks).  This is commonly\n        referred\
    \ to as variable length subnetting.  A packet is routed\n        to the best (i.e.,\
    \ longest or most specific) match.  Host routes\n        are considered to be\
    \ subnets whose masks are \"all ones\"\n        (0xffffffff).\n        All OSPF\
    \ protocol exchanges are authenticated.  This means that\n        only trusted\
    \ routers can participate in the Autonomous System's\n        routing.  A variety\
    \ of authentication schemes can be used; a\n        single authentication scheme\
    \ is configured for each area.  This\n        enables some areas to use much stricter\
    \ authentication than\n        others.\n        Externally derived routing data\
    \ (e.g., routes learned from the\n        Exterior Gateway Protocol (EGP)) is\
    \ passed transparently\n        throughout the Autonomous System.  This externally\
    \ derived data\n        is kept separate from the OSPF protocol's link state data.\
    \  Each\n        external route can also be tagged by the advertising router,\n\
    \        enabling the passing of additional information between routers\n    \
    \    on the boundaries of the Autonomous System.\n    1.2.  Definitions of commonly\
    \ used terms\n        This section provides definitions for terms that have a\
    \ specific\n        meaning to the OSPF protocol and that are used throughout\
    \ the\n        text.  The reader unfamiliar with the Internet Protocol Suite is\n\
    \        referred to [RS-85-153] for an introduction to IP.\n        Router\n\
    \            A level three Internet Protocol packet switch.  Formerly\n      \
    \      called a gateway in much of the IP literature.\n        Autonomous System\n\
    \            A group of routers exchanging routing information via a\n       \
    \     common routing protocol.  Abbreviated as AS.\n        Interior Gateway Protocol\n\
    \            The routing protocol spoken by the routers belonging to an\n    \
    \        Autonomous system.  Abbreviated as IGP.  Each Autonomous\n          \
    \  System has a single IGP.  Separate Autonomous Systems may be\n            running\
    \ different IGPs.\n        Router ID\n            A 32-bit number assigned to\
    \ each router running the OSPF\n            protocol.  This number uniquely identifies\
    \ the router within\n            an Autonomous System.\n        Network\n    \
    \        In this memo, an IP network/subnet/supernet.  It is possible\n      \
    \      for one physical network to be assigned multiple IP\n            network/subnet\
    \ numbers.  We consider these to be separate\n            networks.  Point-to-point\
    \ physical networks are an exception\n            - they are considered a single\
    \ network no matter how many\n            (if any at all) IP network/subnet numbers\
    \ are assigned to\n            them.\n        Network mask\n            A 32-bit\
    \ number indicating the range of IP addresses\n            residing on a single\
    \ IP network/subnet/supernet.  This\n            specification displays network\
    \ masks as hexadecimal numbers.\n            For example, the network mask for\
    \ a class C IP network is\n            displayed as 0xffffff00.  Such a mask is\
    \ often displayed\n            elsewhere in the literature as 255.255.255.0.\n\
    \        Multi-access networks\n            Those physical networks that support\
    \ the attachment of\n            multiple (more than two) routers.  Each pair\
    \ of routers on\n            such a network is assumed to be able to communicate\
    \ directly\n            (e.g., multi-drop networks are excluded).\n        Interface\n\
    \            The connection between a router and one of its attached\n       \
    \     networks.  An interface has state information associated\n            with\
    \ it, which is obtained from the underlying lower level\n            protocols\
    \ and the routing protocol itself.  An interface to\n            a network has\
    \ associated with it a single IP address and\n            mask (unless the network\
    \ is an unnumbered point-to-point\n            network).  An interface is sometimes\
    \ also referred to as a\n            link.\n        Neighboring routers\n    \
    \        Two routers that have interfaces to a common network.  On\n         \
    \   multi-access networks, neighbors are dynamically discovered\n            by\
    \ OSPF's Hello Protocol.\n        Adjacency\n            A relationship formed\
    \ between selected neighboring routers\n            for the purpose of exchanging\
    \ routing information.  Not\n            every pair of neighboring routers become\
    \ adjacent.\n        Link state advertisement\n            Describes the local\
    \ state of a router or network.  This\n            includes the state of the router's\
    \ interfaces and\n            adjacencies.  Each link state advertisement is flooded\n\
    \            throughout the routing domain.  The collected link state\n      \
    \      advertisements of all routers and networks forms the\n            protocol's\
    \ topological database.\n        Hello Protocol\n            The part of the OSPF\
    \ protocol used to establish and maintain\n            neighbor relationships.\
    \  On multi-access networks the Hello\n            Protocol can also dynamically\
    \ discover neighboring routers.\n        Designated Router\n            Each multi-access\
    \ network that has at least two attached\n            routers has a Designated\
    \ Router.  The Designated Router\n            generates a link state advertisement\
    \ for the multi-access\n            network and has other special responsibilities\
    \ in the\n            running of the protocol.  The Designated Router is elected\n\
    \            by the Hello Protocol.\n            The Designated Router concept\
    \ enables a reduction in the\n            number of adjacencies required on a\
    \ multi-access network.\n            This in turn reduces the amount of routing\
    \ protocol traffic\n            and the size of the topological database.\n  \
    \      Lower-level protocols\n            The underlying network access protocols\
    \ that provide\n            services to the Internet Protocol and in turn the\
    \ OSPF\n            protocol.  Examples of these are the X.25 packet and frame\n\
    \            levels for X.25 PDNs, and the ethernet data link layer for\n    \
    \        ethernets.\n    1.3.  Brief history of link-state routing technology\n\
    \        OSPF is a link state routing protocol.  Such protocols are also\n   \
    \     referred to in the literature as SPF-based or distributed-\n        database\
    \ protocols.  This section gives a brief description of\n        the developments\
    \ in link-state technology that have influenced\n        the OSPF protocol.\n\
    \        The first link-state routing protocol was developed for use in\n    \
    \    the ARPANET packet switching network.  This protocol is\n        described\
    \ in [McQuillan].  It has formed the starting point for\n        all other link-state\
    \ protocols.  The homogeneous Arpanet\n        environment, i.e., single-vendor\
    \ packet switches connected by\n        synchronous serial lines, simplified the\
    \ design and\n        implementation of the original protocol.\n        Modifications\
    \ to this protocol were proposed in [Perlman].\n        These modifications dealt\
    \ with increasing the fault tolerance of\n        the routing protocol through,\
    \ among other things, adding a\n        checksum to the link state advertisements\
    \ (thereby detecting\n        database corruption).  The paper also included means\
    \ for\n        reducing the routing traffic overhead in a link-state protocol.\n\
    \        This was accomplished by introducing mechanisms which enabled\n     \
    \   the interval between link state advertisement originations to be\n       \
    \ increased by an order of magnitude.\n        A link-state algorithm has also\
    \ been proposed for use as an ISO\n        IS-IS routing protocol.  This protocol\
    \ is described in [DEC].\n        The protocol includes methods for data and routing\
    \ traffic\n        reduction when operating over broadcast networks.  This is\n\
    \        accomplished by election of a Designated Router for each\n        broadcast\
    \ network, which then originates a link state\n        advertisement for the network.\n\
    \        The OSPF subcommittee of the IETF has extended this work in\n       \
    \ developing the OSPF protocol.  The Designated Router concept has\n        been\
    \ greatly enhanced to further reduce the amount of routing\n        traffic required.\
    \  Multicast capabilities are utilized for\n        additional routing bandwidth\
    \ reduction.  An area routing scheme\n        has been developed enabling information\n\
    \        hiding/protection/reduction.  Finally, the algorithm has been\n     \
    \   modified for efficient operation in TCP/IP internets.\n    1.4.  Organization\
    \ of this document\n        The first three sections of this specification give\
    \ a general\n        overview of the protocol's capabilities and functions.  Sections\n\
    \        4-16 explain the protocol's mechanisms in detail.  Packet\n        formats,\
    \ protocol constants and configuration items are\n        specified in the appendices.\n\
    \        Labels such as HelloInterval encountered in the text refer to\n     \
    \   protocol constants.  They may or may not be configurable.  The\n        architectural\
    \ constants are explained in Appendix B.  The\n        configurable constants\
    \ are explained in Appendix C.\n        The detailed specification of the protocol\
    \ is presented in terms\n        of data structures.  This is done in order to\
    \ make the\n        explanation more precise.  Implementations of the protocol\
    \ are\n        required to support the functionality described, but need not\n\
    \        use the precise data structures that appear in this memo.\n"
- title: 2.  The Topological Database
  contents:
  - "2.  The Topological Database\n    The Autonomous System's topological database\
    \ describes a directed\n    graph.  The vertices of the graph consist of routers\
    \ and networks.\n    A graph edge connects two routers when they are attached\
    \ via a\n    physical point-to-point network.  An edge connecting a router to\
    \ a\n    network indicates that the router has an interface on the network.\n\
    \    The vertices of the graph can be further typed according to\n    function.\
    \  Only some of these types carry transit data traffic; that\n    is, traffic\
    \ that is neither locally originated nor locally destined.\n    Vertices that\
    \ can carry transit traffic are indicated on the graph\n    by having both incoming\
    \ and outgoing edges.\n                     Vertex type   Vertex name    Transit?\n\
    \                     _____________________________________\n                \
    \     1             Router         yes\n                     2             Network\
    \        yes\n                     3             Stub network   no\n         \
    \                 Table 1: OSPF vertex types.\n    OSPF supports the following\
    \ types of physical networks:\n    Point-to-point networks\n        A network\
    \ that joins a single pair of routers.  A 56Kb serial\n        line is an example\
    \ of a point-to-point network.\n    Broadcast networks\n        Networks supporting\
    \ many (more than two) attached routers,\n        together with the capability\
    \ to address a single physical\n        message to all of the attached routers\
    \ (broadcast).  Neighboring\n        routers are discovered dynamically on these\
    \ nets using OSPF's\n        Hello Protocol.  The Hello Protocol itself takes\
    \ advantage of\n        the broadcast capability.  The protocol makes further\
    \ use of\n        multicast capabilities, if they exist.  An ethernet is an\n\
    \        example of a broadcast network.\n    Non-broadcast networks\n       \
    \ Networks supporting many (more than two) routers, but having no\n        broadcast\
    \ capability.  Neighboring routers are also discovered\n        on these nets\
    \ using OSPF's Hello Protocol.  However, due to the\n        lack of broadcast\
    \ capability, some configuration information is\n        necessary for the correct\
    \ operation of the Hello Protocol.  On\n        these networks, OSPF protocol\
    \ packets that are normally\n        multicast need to be sent to each neighboring\
    \ router, in turn.\n        An X.25 Public Data Network (PDN) is an example of\
    \ a non-\n        broadcast network.\n    The neighborhood of each network node\
    \ in the graph depends on\n    whether the network has multi-access capabilities\
    \ (either broadcast\n    or non-broadcast) and, if so, the number of routers having\
    \ an\n    interface to the network.  The three cases are depicted in Figure 1.\n\
    \    Rectangles indicate routers.  Circles and oblongs indicate multi-\n    access\
    \ networks.  Router names are prefixed with the letters RT and\n    network names\
    \ with the letter N.  Router interface names are\n    prefixed by the letter I.\
    \  Lines between routers indicate point-to-\n    point networks.  The left side\
    \ of the figure shows a network with\n    its connected routers, with the resulting\
    \ graph shown on the right.\n    Two routers joined by a point-to-point network\
    \ are represented in\n    the directed graph as being directly connected by a\
    \ pair of edges,\n    one in each direction.  Interfaces to physical point-to-point\n\
    \    networks need not be assigned IP addresses.  Such a point-to-point\n    network\
    \ is called unnumbered.  The graphical representation of\n    point-to-point networks\
    \ is designed so that unnumbered networks can\n    be supported naturally.  When\
    \ interface addresses exist, they are\n    modelled as stub routes.  Note that\
    \ each router would then have a\n    stub connection to the other router's interface\
    \ address (see Figure\n    1).\n    When multiple routers are attached to a multi-access\
    \ network, the\n    directed graph shows all routers bidirectionally connected\
    \ to the\n    network vertex (again, see Figure 1).  If only a single router is\n\
    \    attached to a multi-access network, the network will appear in the\n    \
    \                                              **FROM**\n                    \
    \                       *      |RT1|RT2|\n                +---+Ia    +---+   \
    \        *   ------------\n                |RT1|------|RT2|           T   RT1|\
    \   | X |\n                +---+    Ib+---+           O   RT2| X |   |\n     \
    \                                      *    Ia|   | X |\n                    \
    \                       *    Ib| X |   |\n                     Physical point-to-point\
    \ networks\n                                                  **FROM**\n     \
    \           +---+      +---+\n                |RT3|      |RT4|              |RT3|RT4|RT5|RT6|N2\
    \ |\n                +---+      +---+        *  ------------------------\n   \
    \               |    N2    |          *  RT3|   |   |   |   | X |\n          \
    \  +----------------------+    T  RT4|   |   |   |   | X |\n                 \
    \ |          |          O  RT5|   |   |   |   | X |\n                +---+   \
    \   +---+        *  RT6|   |   |   |   | X |\n                |RT5|      |RT6|\
    \        *   N2| X | X | X | X |   |\n                +---+      +---+\n     \
    \                     Multi-access networks\n                                \
    \                  **FROM**\n                      +---+                *\n  \
    \                    |RT7|                *      |RT7| N3|\n                 \
    \     +---+                T   ------------\n                        |       \
    \           O   RT7|   |   |\n            +----------------------+       *   \
    \ N3| X |   |\n                       N3                  *\n                \
    \       Stub multi-access networks\n                    Figure 1: Network map\
    \ components\n             Networks and routers are represented by vertices.\n\
    \             An edge connects Vertex A to Vertex B iff the\n             intersection\
    \ of Column A and Row B is marked with\n                                  an X.\n\
    \    directed graph as a stub connection.\n    Each network (stub or transit)\
    \ in the graph has an IP address and\n    associated network mask.  The mask indicates\
    \ the number of nodes on\n    the network.  Hosts attached directly to routers\
    \ (referred to as\n    host routes) appear on the graph as stub networks.  The\
    \ network mask\n    for a host route is always 0xffffffff, which indicates the\
    \ presence\n    of a single node.\n    Figure 2 shows a sample map of an Autonomous\
    \ System.  The rectangle\n    labelled H1 indicates a host, which has a SLIP connection\
    \ to Router\n    RT12.  Router RT12 is therefore advertising a host route.  Lines\n\
    \    between routers indicate physical point-to-point networks.  The only\n  \
    \  point-to-point network that has been assigned interface addresses is\n    the\
    \ one joining Routers RT6 and RT10.  Routers RT5 and RT7 have EGP\n    connections\
    \ to other Autonomous Systems.  A set of EGP-learned\n    routes have been displayed\
    \ for both of these routers.\n    A cost is associated with the output side of\
    \ each router interface.\n    This cost is configurable by the system administrator.\
    \  The lower\n    the cost, the more likely the interface is to be used to forward\n\
    \    data traffic.  Costs are also associated with the externally derived\n  \
    \  routing data (e.g., the EGP-learned routes).\n    The directed graph resulting\
    \ from the map in Figure 2 is depicted in\n    Figure 3.  Arcs are labelled with\
    \ the cost of the corresponding\n    router output interface.  Arcs having no\
    \ labelled cost have a cost\n    of 0.  Note that arcs leading from networks to\
    \ routers always have\n    cost 0; they are significant nonetheless.  Note also\
    \ that the\n    externally derived routing data appears on the graph as stubs.\n\
    \    The topological database (or what has been referred to above as the\n   \
    \ directed graph) is pieced together from link state advertisements\n    generated\
    \ by the routers.  The neighborhood of each transit vertex\n    is represented\
    \ in a single, separate link state advertisement.\n    Figure 4 shows graphically\
    \ the link state representation of the two\n    kinds of transit vertices: routers\
    \ and multi-access networks.\n    Router RT12 has an interface to two broadcast\
    \ networks and a SLIP\n    line to a host.  Network N6 is a broadcast network\
    \ with three\n    attached routers.  The cost of all links from Network N6 to\
    \ its\n    attached routers is 0.  Note that the link state advertisement for\n\
    \    Network N6 is actually generated by one of the attached routers: the\n  \
    \  router that has been elected Designated Router for the network.\n    2.1. \
    \ The shortest-path tree\n        When no OSPF areas are configured, each router\
    \ in the Autonomous\n        System has an identical topological database, leading\
    \ to an\n                 +\n                 | 3+---+                     N12\
    \      N14\n               N1|--|RT1|\\ 1                    \\ N13 /\n      \
    \           |  +---+ \\                     8\\ |8/8\n                 +     \
    \    \\ ____                 \\|/\n                            /    \\   1+---+8\
    \    8+---+6\n                           *  N3  *---|RT4|------|RT5|--------+\n\
    \                            \\____/    +---+      +---+        |\n          \
    \        +         /   |                  |7         |\n                  | 3+---+\
    \ /    |                  |          |\n                N2|--|RT2|/1    |1   \
    \              |6         |\n                  |  +---+    +---+8            6+---+\
    \        |\n                  +           |RT3|--------------|RT6|        |\n\
    \                              +---+              +---+        |\n           \
    \                     |2               Ia|7         |\n                      \
    \          |                  |          |\n                           +---------+\
    \             |          |\n                               N4                \
    \  |          |\n                                                   |        \
    \  |\n                                                   |          |\n      \
    \                 N11                         |          |\n                 \
    \  +---------+                     |          |\n                        |   \
    \                       |          |    N12\n                        |3      \
    \                   |          |6 2/\n                      +---+            \
    \            |        +---+/\n                      |RT9|                    \
    \    |        |RT7|---N15\n                      +---+                       \
    \ |        +---+ 9\n                        |1                   +     |     \
    \     |1\n                       _|__                  |   Ib|5       __|_\n \
    \                     /    \\      1+----+2   |  3+----+1   /    \\\n        \
    \             *  N9  *------|RT11|----|---|RT10|---*  N6  *\n                \
    \      \\____/       +----+    |   +----+    \\____/\n                       \
    \ |                    |                |\n                        |1        \
    \           +                |1\n             +--+   10+----+                N8\
    \              +---+\n             |H1|-----|RT12|                           \
    \     |RT8|\n             +--+SLIP +----+                                +---+\n\
    \                        |2                                    |4\n          \
    \              |                                     |\n                   +---------+\
    \                            +--------+\n                       N10          \
    \                          N7\n                    Figure 2: A sample Autonomous\
    \ System\n                                **FROM**\n                 |RT|RT|RT|RT|RT|RT|RT|RT|RT|RT|RT|RT|\n\
    \                 |1 |2 |3 |4 |5 |6 |7 |8 |9 |10|11|12|N3|N6|N8|N9|\n        \
    \      ----- ---------------------------------------------\n              RT1|\
    \  |  |  |  |  |  |  |  |  |  |  |  |0 |  |  |  |\n              RT2|  |  |  |\
    \  |  |  |  |  |  |  |  |  |0 |  |  |  |\n              RT3|  |  |  |  |  |6 |\
    \  |  |  |  |  |  |0 |  |  |  |\n              RT4|  |  |  |  |8 |  |  |  |  |\
    \  |  |  |0 |  |  |  |\n              RT5|  |  |  |8 |  |6 |6 |  |  |  |  |  |\
    \  |  |  |  |\n              RT6|  |  |8 |  |7 |  |  |  |  |5 |  |  |  |  |  |\
    \  |\n              RT7|  |  |  |  |6 |  |  |  |  |  |  |  |  |0 |  |  |\n   \
    \       *   RT8|  |  |  |  |  |  |  |  |  |  |  |  |  |0 |  |  |\n          *\
    \   RT9|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |0 |\n          T  RT10| \
    \ |  |  |  |  |7 |  |  |  |  |  |  |  |0 |0 |  |\n          O  RT11|  |  |  |\
    \  |  |  |  |  |  |  |  |  |  |  |0 |0 |\n          *  RT12|  |  |  |  |  |  |\
    \  |  |  |  |  |  |  |  |  |0 |\n          *    N1|3 |  |  |  |  |  |  |  |  |\
    \  |  |  |  |  |  |  |\n               N2|  |3 |  |  |  |  |  |  |  |  |  |  |\
    \  |  |  |  |\n               N3|1 |1 |1 |1 |  |  |  |  |  |  |  |  |  |  |  |\
    \  |\n               N4|  |  |2 |  |  |  |  |  |  |  |  |  |  |  |  |  |\n   \
    \            N6|  |  |  |  |  |  |1 |1 |  |1 |  |  |  |  |  |  |\n           \
    \    N7|  |  |  |  |  |  |  |4 |  |  |  |  |  |  |  |  |\n               N8| \
    \ |  |  |  |  |  |  |  |  |3 |2 |  |  |  |  |  |\n               N9|  |  |  |\
    \  |  |  |  |  |1 |  |1 |1 |  |  |  |  |\n              N10|  |  |  |  |  |  |\
    \  |  |  |  |  |2 |  |  |  |  |\n              N11|  |  |  |  |  |  |  |  |3 |\
    \  |  |  |  |  |  |  |\n              N12|  |  |  |  |8 |  |2 |  |  |  |  |  |\
    \  |  |  |  |\n              N13|  |  |  |  |8 |  |  |  |  |  |  |  |  |  |  |\
    \  |\n              N14|  |  |  |  |8 |  |  |  |  |  |  |  |  |  |  |  |\n   \
    \           N15|  |  |  |  |  |  |9 |  |  |  |  |  |  |  |  |  |\n           \
    \    H1|  |  |  |  |  |  |  |  |  |  |  |10|  |  |  |  |\n                   \
    \  Figure 3: The resulting directed graph\n                 Networks and routers\
    \ are represented by vertices.\n                 An edge of cost X connects Vertex\
    \ A to Vertex B iff\n                 the intersection of Column A and Row B is\
    \ marked\n                                     with an X.\n                  \
    \   **FROM**                       **FROM**\n                  |RT12|N9|N10|H1|\
    \             |RT9|RT11|RT12|N9|\n           *  --------------------         \
    \ *  ----------------------\n           *  RT12|    |  |   |  |          *   RT9|\
    \   |    |    |0 |\n           T    N9|1   |  |   |  |          T  RT11|   | \
    \   |    |0 |\n           O   N10|2   |  |   |  |          O  RT12|   |    | \
    \   |0 |\n           *    H1|10  |  |   |  |          *    N9|   |    |    | \
    \ |\n           *                                *\n                RT12's router\
    \ links            N9's network links\n                   advertisement      \
    \            advertisement\n                  Figure 4: Individual link state\
    \ components\n              Networks and routers are represented by vertices.\n\
    \              An edge of cost X connects Vertex A to Vertex B iff\n         \
    \     the intersection of Column A and Row B is marked\n                     \
    \             with an X.\n        identical graphical representation.  A router\
    \ generates its\n        routing table from this graph by calculating a tree of\
    \ shortest\n        paths with the router itself as root.  Obviously, the shortest-\n\
    \        path tree depends on the router doing the calculation.  The\n       \
    \ shortest-path tree for Router RT6 in our example is depicted in\n        Figure\
    \ 5.\n        The tree gives the entire route to any destination network or\n\
    \        host.  However, only the next hop to the destination is used in\n   \
    \     the forwarding process.  Note also that the best route to any\n        router\
    \ has also been calculated.  For the processing of external\n        data, we\
    \ note the next hop and distance to any router\n        advertising external routes.\
    \  The resulting routing table for\n        Router RT6 is pictured in Table 2.\
    \  Note that there is a\n        separate route for each end of a numbered serial\
    \ line (in this\n        case, the serial line between Routers RT6 and RT10).\n\
    \        Routes to networks belonging to other AS'es (such as N12) appear\n  \
    \      as dashed lines on the shortest path tree in Figure 5.  Use of\n      \
    \  this externally derived routing information is considered in the\n        next\
    \ section.\n    2.2.  Use of external routing information\n        After the tree\
    \ is created the external routing information is\n        examined.  This external\
    \ routing information may originate from\n        another routing protocol such\
    \ as EGP, or be statically\n                                RT6(origin)\n    \
    \                RT5 o------------o-----------o Ib\n                       /|\\\
    \    6      |\\     7\n                     8/8|8\\          | \\\n          \
    \           /  |  \\         |  \\\n                    o   |   o        |   \\\
    7\n                   N12  o  N14       |    \\\n                       N13  \
    \      2  |     \\\n                            N4 o-----o RT3  \\\n         \
    \                           /        \\    5\n                               \
    \   1/     RT10 o-------o Ia\n                                  /           |\\\
    \n                       RT4 o-----o N3        3| \\1\n                      \
    \          /|            |  \\ N6     RT7\n                               / |\
    \         N8 o   o---------o\n                              /  |            |\
    \   |        /|\n                         RT2 o   o RT1        |   |      2/ |9\n\
    \                            /    |            |   |RT8   /  |\n             \
    \              /3    |3      RT11 o   o     o   o\n                          /\
    \      |            |   |    N12 N15\n                      N2 o       o N1  \
    \      1|   |4\n                                              |   |\n        \
    \                                   N9 o   o N7\n                            \
    \                 /|\n                                            / |\n      \
    \                  N11      RT9       /  |RT12\n                         o--------o-------o\
    \   o--------o H1\n                             3                |   10\n    \
    \                                          |2\n                              \
    \                |\n                                              o N10\n    \
    \                 Figure 5: The SPF tree for Router RT6\n              Edges that\
    \ are not marked with a cost have a cost of\n              of zero (these are\
    \ network-to-router links). Routes\n              to networks N12-N15 are external\
    \ information that is\n                         considered in Section 2.2\n  \
    \                 Destination   Next  Hop   Distance\n                   __________________________________\n\
    \                   N1            RT3         10\n                   N2      \
    \      RT3         10\n                   N3            RT3         7\n      \
    \             N4            RT3         8\n                   Ib            *\
    \           7\n                   Ia            RT10        12\n             \
    \      N6            RT10        8\n                   N7            RT10    \
    \    12\n                   N8            RT10        10\n                   N9\
    \            RT10        11\n                   N10           RT10        13\n\
    \                   N11           RT10        14\n                   H1      \
    \      RT10        21\n                   __________________________________\n\
    \                   RT5           RT5         6\n                   RT7      \
    \     RT10        8\n    Table 2: The portion of Router RT6's routing table listing\
    \ local\n                             destinations.\n        configured (static\
    \ routes).  Default routes can also be included\n        as part of the Autonomous\
    \ System's external routing information.\n        External routing information\
    \ is flooded unaltered throughout the\n        AS.  In our example, all the routers\
    \ in the Autonomous System\n        know that Router RT7 has two external routes,\
    \ with metrics 2 and\n        9.\n        OSPF supports two types of external\
    \ metrics.  Type 1 external\n        metrics are equivalent to the link state\
    \ metric.  Type 2\n        external metrics are greater than the cost of any path\
    \ internal\n        to the AS.  Use of Type 2 external metrics assumes that routing\n\
    \        between AS'es is the major cost of routing a packet, and\n        eliminates\
    \ the need for conversion of external costs to internal\n        link state metrics.\n\
    \        As an example of Type 1 external metric processing, suppose that\n  \
    \      the Routers RT7 and RT5 in Figure 2 are advertising Type 1\n        external\
    \ metrics.  For each external route, the distance from\n        Router RT6 is\
    \ calculated as the sum of the external route's cost\n        and the distance\
    \ from Router RT6 to the advertising router.  For\n        every external destination,\
    \ the router advertising the shortest\n        route is discovered, and the next\
    \ hop to the advertising router\n        becomes the next hop to the destination.\n\
    \        Both Router RT5 and RT7 are advertising an external route to\n      \
    \  destination Network N12.  Router RT7 is preferred since it is\n        advertising\
    \ N12 at a distance of 10 (8+2) to Router RT6, which\n        is better than Router\
    \ RT5's 14 (6+8).  Table 3 shows the entries\n        that are added to the routing\
    \ table when external routes are\n        examined:\n                        \
    \ Destination   Next  Hop   Distance\n                         __________________________________\n\
    \                         N12           RT10        10\n                     \
    \    N13           RT5         14\n                         N14           RT5\
    \         14\n                         N15           RT10        17\n        \
    \         Table 3: The portion of Router RT6's routing table\n               \
    \            listing external destinations.\n        Processing of Type 2 external\
    \ metrics is simpler.  The AS\n        boundary router advertising the smallest\
    \ external metric is\n        chosen, regardless of the internal distance to the\
    \ AS boundary\n        router.  Suppose in our example both Router RT5 and Router\
    \ RT7\n        were advertising Type 2 external routes.  Then all traffic\n  \
    \      destined for Network N12 would be forwarded to Router RT7, since\n    \
    \    2 < 8.  When several equal-cost Type 2 routes exist, the\n        internal\
    \ distance to the advertising routers is used to break\n        the tie.\n   \
    \     Both Type 1 and Type 2 external metrics can be present in the AS\n     \
    \   at the same time.  In that event, Type 1 external metrics always\n       \
    \ take precedence.\n        This section has assumed that packets destined for\
    \ external\n        destinations are always routed through the advertising AS\n\
    \        boundary router.  This is not always desirable.  For example,\n     \
    \   suppose in Figure 2 there is an additional router attached to\n        Network\
    \ N6, called Router RTX.  Suppose further that RTX does\n        not participate\
    \ in OSPF routing, but does exchange EGP\n        information with the AS boundary\
    \ router RT7.  Then, Router RT7\n        would end up advertising OSPF external\
    \ routes for all\n        destinations that should be routed to RTX.  An extra\
    \ hop will\n        sometimes be introduced if packets for these destinations\
    \ need\n        always be routed first to Router RT7 (the advertising router).\n\
    \        To deal with this situation, the OSPF protocol allows an AS\n       \
    \ boundary router to specify a \"forwarding address\" in its\n        external\
    \ advertisements.  In the above example, Router RT7 would\n        specify RTX's\
    \ IP address as the \"forwarding address\" for all\n        those destinations\
    \ whose packets should be routed directly to\n        RTX.\n        The \"forwarding\
    \ address\" has one other application.  It enables\n        routers in the Autonomous\
    \ System's interior to function as\n        \"route servers\".  For example, in\
    \ Figure 2 the router RT6 could\n        become a route server, gaining external\
    \ routing information\n        through a combination of static configuration and\
    \ external\n        routing protocols.  RT6 would then start advertising itself\
    \ as\n        an AS boundary router, and would originate a collection of OSPF\n\
    \        external advertisements.  In each external advertisement, Router\n  \
    \      RT6 would specify the correct Autonomous System exit point to\n       \
    \ use for the destination through appropriate setting of the\n        advertisement's\
    \ \"forwarding address\" field.\n    2.3.  Equal-cost multipath\n        The above\
    \ discussion has been simplified by considering only a\n        single route to\
    \ any destination.  In reality, if multiple\n        equal-cost routes to a destination\
    \ exist, they are all\n        discovered and used.  This requires no conceptual\
    \ changes to the\n        algorithm, and its discussion is postponed until we\
    \ consider the\n        tree-building process in more detail.\n        With equal\
    \ cost multipath, a router potentially has several\n        available next hops\
    \ towards any given destination.\n    2.4.  TOS-based routing\n        OSPF can\
    \ calculate a separate set of routes for each IP Type of\n        Service. This\
    \ means that, for any destination, there can\n        potentially be multiple\
    \ routing table entries, one for each IP\n        TOS. The IP TOS values are represented\
    \ in OSPF exactly as they\n        appear in the IP packet header.\n        Up\
    \ to this point, all examples shown have assumed that routes do\n        not vary\
    \ on TOS.  In order to differentiate routes based on TOS,\n        separate interface\
    \ costs can be configured for each TOS.  For\n        example, in Figure 2 there\
    \ could be multiple costs (one for each\n        TOS) listed for each interface.\
    \  A cost for TOS 0 must always be\n        specified.\n        When interface\
    \ costs vary based on TOS, a separate shortest path\n        tree is calculated\
    \ for each TOS (see Section 2.1).  In addition,\n        external costs can vary\
    \ based on TOS.  For example, in Figure 2\n        Router RT7 could advertise\
    \ a separate type 1 external metric for\n        each TOS.  Then, when calculating\
    \ the TOS X distance to Network\n        N15 the cost of the shortest TOS X path\
    \ to RT7 would be added to\n        the TOS X cost advertised by RT7 for Network\
    \ N15 (see Section\n        2.2).\n        All OSPF implementations must be capable\
    \ of calculating routes\n        based on TOS.  However, OSPF routers can be configured\
    \ to route\n        all packets on the TOS 0 path (see Appendix C), eliminating\
    \ the\n        need to calculate non-zero TOS paths.  This can be used to\n  \
    \      conserve routing table space and processing resources in the\n        router.\
    \  These TOS-0-only routers can be mixed with routers that\n        do route based\
    \ on TOS.  TOS-0-only routers will be avoided as\n        much as possible when\
    \ forwarding traffic requesting a non-zero\n        TOS.\n        It may be the\
    \ case that no path exists for some non-zero TOS,\n        even if the router\
    \ is calculating non-zero TOS paths.  In that\n        case, packets requesting\
    \ that non-zero TOS are routed along the\n        TOS 0 path (see Section 11.1).\n"
- title: 3.  Splitting the AS into Areas
  contents:
  - "3.  Splitting the AS into Areas\n    OSPF allows collections of contiguous networks\
    \ and hosts to be\n    grouped together.  Such a group, together with the routers\
    \ having\n    interfaces to any one of the included networks, is called an area.\n\
    \    Each area runs a separate copy of the basic link-state routing\n    algorithm.\
    \  This means that each area has its own topological\n    database and corresponding\
    \ graph, as explained in the previous\n    section.\n    The topology of an area\
    \ is invisible from the outside of the area.\n    Conversely, routers internal\
    \ to a given area know nothing of the\n    detailed topology external to the area.\
    \  This isolation of knowledge\n    enables the protocol to effect a marked reduction\
    \ in routing traffic\n    as compared to treating the entire Autonomous System\
    \ as a single\n    link-state domain.\n    With the introduction of areas, it\
    \ is no longer true that all\n    routers in the AS have an identical topological\
    \ database.  A router\n    actually has a separate topological database for each\
    \ area it is\n    connected to.  (Routers connected to multiple areas are called\
    \ area\n    border routers).  Two routers belonging to the same area have, for\n\
    \    that area, identical area topological databases.\n    Routing in the Autonomous\
    \ System takes place on two levels,\n    depending on whether the source and destination\
    \ of a packet reside\n    in the same area (intra-area routing is used) or different\
    \ areas\n    (inter-area routing is used).  In intra-area routing, the packet\
    \ is\n    routed solely on information obtained within the area; no routing\n\
    \    information obtained from outside the area can be used.  This\n    protects\
    \ intra-area routing from the injection of bad routing\n    information.  We discuss\
    \ inter-area routing in Section 3.2.\n    3.1.  The backbone of the Autonomous\
    \ System\n        The backbone consists of those networks not contained in any\n\
    \        area, their attached routers, and those routers that belong to\n    \
    \    multiple areas.  The backbone must be contiguous.\n        It is possible\
    \ to define areas in such a way that the backbone\n        is no longer contiguous.\
    \  In this case the system administrator\n        must restore backbone connectivity\
    \ by configuring virtual links.\n        Virtual links can be configured between\
    \ any two backbone routers\n        that have an interface to a common non-backbone\
    \ area.  Virtual\n        links belong to the backbone.  The protocol treats two\
    \ routers\n        joined by a virtual link as if they were connected by an\n\
    \        unnumbered point-to-point network.  On the graph of the\n        backbone,\
    \ two such routers are joined by arcs whose costs are\n        the intra-area\
    \ distances between the two routers.  The routing\n        protocol traffic that\
    \ flows along the virtual link uses intra-\n        area routing only.\n     \
    \   The backbone is responsible for distributing routing information\n       \
    \ between areas.  The backbone itself has all of the properties of\n        an\
    \ area.  The topology of the backbone is invisible to each of\n        the areas,\
    \ while the backbone itself knows nothing of the\n        topology of the areas.\n\
    \    3.2.  Inter-area routing\n        When routing a packet between two areas\
    \ the backbone is used.\n        The path that the packet will travel can be broken\
    \ up into three\n        contiguous pieces: an intra-area path from the source\
    \ to an area\n        border router, a backbone path between the source and\n\
    \        destination areas, and then another intra-area path to the\n        destination.\
    \  The algorithm finds the set of such paths that\n        have the smallest cost.\n\
    \        Looking at this another way, inter-area routing can be pictured\n   \
    \     as forcing a star configuration on the Autonomous System, with\n       \
    \ the backbone as hub and each of the areas as spokes.\n        The topology of\
    \ the backbone dictates the backbone paths used\n        between areas.  The topology\
    \ of the backbone can be enhanced by\n        adding virtual links.  This gives\
    \ the system administrator some\n        control over the routes taken by inter-area\
    \ traffic.\n        The correct area border router to use as the packet exits\
    \ the\n        source area is chosen in exactly the same way routers\n       \
    \ advertising external routes are chosen.  Each area border router\n        in\
    \ an area summarizes for the area its cost to all networks\n        external to\
    \ the area.  After the SPF tree is calculated for the\n        area, routes to\
    \ all other networks are calculated by examining\n        the summaries of the\
    \ area border routers.\n    3.3.  Classification of routers\n        Before the\
    \ introduction of areas, the only OSPF routers having a\n        specialized function\
    \ were those advertising external routing\n        information, such as Router\
    \ RT5 in Figure 2.  When the AS is\n        split into OSPF areas, the routers\
    \ are further divided according\n        to function into the following four overlapping\
    \ categories:\n        Internal routers\n            A router with all directly\
    \ connected networks belonging to\n            the same area.  Routers with only\
    \ backbone interfaces also\n            belong to this category.  These routers\
    \ run a single copy of\n            the basic routing algorithm.\n        Area\
    \ border routers\n            A router that attaches to multiple areas.  Area\
    \ border\n            routers run multiple copies of the basic algorithm, one\
    \ copy\n            for each attached area and an additional copy for the\n  \
    \          backbone.  Area border routers condense the topological\n         \
    \   information of their attached areas for distribution to the\n            backbone.\
    \  The backbone in turn distributes the information\n            to the other\
    \ areas.\n        Backbone routers\n            A router that has an interface\
    \ to the backbone.  This\n            includes all routers that interface to more\
    \ than one area\n            (i.e., area border routers).  However, backbone routers\
    \ do\n            not have to be area border routers.  Routers with all\n    \
    \        interfaces connected to the backbone are considered to be\n         \
    \   internal routers.\n        AS boundary routers\n            A router that\
    \ exchanges routing information with routers\n            belonging to other Autonomous\
    \ Systems.  Such a router has AS\n            external routes that are advertised\
    \ throughout the\n            Autonomous System.  The path to each AS boundary\
    \ router is\n            known by every router in the AS.  This classification\
    \ is\n            completely independent of the previous classifications: AS\n\
    \            boundary routers may be internal or area border routers, and\n  \
    \          may or may not participate in the backbone.\n    3.4.  A sample area\
    \ configuration\n        Figure 6 shows a sample area configuration.  The first\
    \ area\n        consists of networks N1-N4, along with their attached routers\n\
    \        RT1-RT4.  The second area consists of networks N6-N8, along with\n  \
    \      their attached routers RT7, RT8, RT10 and RT11.  The third area\n     \
    \   consists of networks N9-N11 and Host H1, along with their\n        attached\
    \ routers RT9, RT11 and RT12.  The third area has been\n        configured so\
    \ that networks N9-N11 and Host H1 will all be\n        grouped into a single\
    \ route, when advertised external to the\n        area (see Section 3.5 for more\
    \ details).\n        In Figure 6, Routers RT1, RT2, RT5, RT6, RT8, RT9 and RT12\
    \ are\n        internal routers.  Routers RT3, RT4, RT7, RT10 and RT11 are area\n\
    \        border routers.  Finally, as before, Routers RT5 and RT7 are AS\n   \
    \     boundary routers.\n        Figure 7 shows the resulting topological database\
    \ for the Area\n        1.  The figure completely describes that area's intra-area\n\
    \        routing.  It also shows the complete view of the internet for\n     \
    \   the two internal routers RT1 and RT2.  It is the job of the area\n       \
    \ border routers, RT3 and RT4, to advertise into Area 1 the\n        distances\
    \ to all destinations external to the area.  These are\n        indicated in Figure\
    \ 7 by the dashed stub routes.  Also, RT3 and\n        RT4 must advertise into\
    \ Area 1 the location of the AS boundary\n        routers RT5 and RT7.  Finally,\
    \ external advertisements from RT5\n        and RT7 are flooded throughout the\
    \ entire AS, and in particular\n        throughout Area 1.  These advertisements\
    \ are included in Area\n        1's database, and yield routes to Networks N12-N15.\n\
    \        Routers RT3 and RT4 must also summarize Area 1's topology for\n     \
    \   distribution to the backbone.  Their backbone advertisements are\n       \
    \ shown in Table 4.  These summaries show which networks are\n        contained\
    \ in Area 1 (i.e., Networks N1-N4), and the distance to\n        these networks\
    \ from the routers RT3 and RT4 respectively.\n             ...........................\n\
    \             .   +                     .\n             .   | 3+---+         \
    \     .      N12      N14\n             . N1|--|RT1|\\ 1           .        \\\
    \ N13 /\n             .   |  +---+ \\            .        8\\ |8/8\n         \
    \    .   +         \\ ____      .          \\|/\n             .              /\
    \    \\   1+---+8    8+---+6\n             .             *  N3  *---|RT4|------|RT5|--------+\n\
    \             .              \\____/    +---+      +---+        |\n          \
    \   .    +         /      \\   .           |7         |\n             .    | 3+---+\
    \ /        \\  .           |          |\n             .  N2|--|RT2|/1        1\\\
    \ .           |6         |\n             .    |  +---+            +---+8    6+---+\
    \        |\n             .    +                   |RT3|------|RT6|        |\n\
    \             .                        +---+      +---+        |\n           \
    \  .                      2/ .         Ia|7         |\n             .        \
    \              /  .           |          |\n             .             +---------+\
    \ .           |          |\n             .Area 1           N4      .         \
    \  |          |\n             ...........................           |        \
    \  |\n          ..........................               |          |\n      \
    \    .            N11         .               |          |\n          .      \
    \  +---------+     .               |          |\n          .             |   \
    \       .               |          |    N12\n          .             |3      \
    \   .             Ib|5         |6 2/\n          .           +---+        .   \
    \          +----+     +---+/\n          .           |RT9|        .    .........|RT10|.....|RT7|---N15.\n\
    \          .           +---+        .    .        +----+     +---+ 9    .\n  \
    \        .             |1         .    .    +  /3    1\\      |1       .\n   \
    \       .            _|__        .    .    | /        \\   __|_       .\n    \
    \      .           /    \\      1+----+2   |/          \\ /    \\      .\n   \
    \       .          *  N9  *------|RT11|----|            *  N6  *     .\n     \
    \     .           \\____/       +----+    |             \\____/      .\n     \
    \     .             |          .    .    |                |        .\n       \
    \   .             |1         .    .    +                |1       .\n         \
    \ .  +--+   10+----+       .    .   N8              +---+      .\n          .\
    \  |H1|-----|RT12|       .    .                   |RT8|      .\n          .  +--+SLIP\
    \ +----+       .    .                   +---+      .\n          .            \
    \ |2         .    .                     |4       .\n          .             |\
    \          .    .                     |        .\n          .        +---------+\
    \     .    .                 +--------+   .\n          .            N10      \
    \   .    .                     N7       .\n          .                       \
    \ .    .Area 2                        .\n          .Area 3                  .\
    \    ................................\n          ..........................\n\
    \                    Figure 6: A sample OSPF area configuration\n            \
    \         Network   RT3 adv.   RT4 adv.\n                     _____________________________\n\
    \                     N1        4          4\n                     N2        4\
    \          4\n                     N3        1          1\n                  \
    \   N4        2          3\n              Table 4: Networks advertised to the\
    \ backbone\n                        by Routers RT3 and RT4.\n        The topological\
    \ database for the backbone is shown in Figure 8.\n        The set of routers\
    \ pictured are the backbone routers.  Router\n        RT11 is a backbone router\
    \ because it belongs to two areas.  In\n        order to make the backbone connected,\
    \ a virtual link has been\n        configured between Routers R10 and R11.\n \
    \       Again, Routers RT3, RT4, RT7, RT10 and RT11 are area border\n        routers.\
    \  As Routers RT3 and RT4 did above, they have condensed\n        the routing\
    \ information of their attached areas for distribution\n        via the backbone;\
    \ these are the dashed stubs that appear in\n        Figure 8.  Remember that\
    \ the third area has been configured to\n        condense Networks N9-N11 and\
    \ Host H1 into a single route.  This\n        yields a single dashed line for\
    \ networks N9-N11 and Host H1 in\n        Figure 8.  Routers RT5 and RT7 are AS\
    \ boundary routers; their\n        externally derived information also appears\
    \ on the graph in\n        Figure 8 as stubs.\n        The backbone enables the\
    \ exchange of summary information between\n        area border routers.  Every\
    \ area border router hears the area\n        summaries from all other area border\
    \ routers.  It then forms a\n        picture of the distance to all networks outside\
    \ of its area by\n        examining the collected advertisements, and adding in\
    \ the\n        backbone distance to each advertising router.\n        Again using\
    \ Routers RT3 and RT4 as an example, the procedure\n        goes as follows: They\
    \ first calculate the SPF tree for the\n        backbone.  This gives the distances\
    \ to all other area border\n        routers.  Also noted are the distances to\
    \ networks (Ia and Ib)\n        and AS boundary routers (RT5 and RT7) that belong\
    \ to the\n        backbone.  This calculation is shown in Table 5.\n        Next,\
    \ by looking at the area summaries from these area border\n        routers, RT3\
    \ and RT4 can determine the distance to all networks\n        outside their area.\
    \  These distances are then advertised\n        internally to the area by RT3\
    \ and RT4.  The advertisements that\n        Router RT3 and RT4 will make into\
    \ Area 1 are shown in Table 6.\n                               **FROM**\n    \
    \                      |RT|RT|RT|RT|RT|RT|\n                          |1 |2 |3\
    \ |4 |5 |7 |N3|\n                       ----- -------------------\n          \
    \             RT1|  |  |  |  |  |  |0 |\n                       RT2|  |  |  |\
    \  |  |  |0 |\n                       RT3|  |  |  |  |  |  |0 |\n            \
    \       *   RT4|  |  |  |  |  |  |0 |\n                   *   RT5|  |  |14|8 |\
    \  |  |  |\n                   T   RT7|  |  |20|14|  |  |  |\n               \
    \    O    N1|3 |  |  |  |  |  |  |\n                   *    N2|  |3 |  |  |  |\
    \  |  |\n                   *    N3|1 |1 |1 |1 |  |  |  |\n                  \
    \      N4|  |  |2 |  |  |  |  |\n                     Ia,Ib|  |  |15|22|  |  |\
    \  |\n                        N6|  |  |16|15|  |  |  |\n                     \
    \   N7|  |  |20|19|  |  |  |\n                        N8|  |  |18|18|  |  |  |\n\
    \                 N9-N11,H1|  |  |19|16|  |  |  |\n                       N12|\
    \  |  |  |  |8 |2 |  |\n                       N13|  |  |  |  |8 |  |  |\n   \
    \                    N14|  |  |  |  |8 |  |  |\n                       N15|  |\
    \  |  |  |  |9 |  |\n                      Figure 7: Area 1's Database.\n    \
    \          Networks and routers are represented by vertices.\n              An\
    \ edge of cost X connects Vertex A to Vertex B iff\n              the intersection\
    \ of Column A and Row B is marked\n                               with an X.\n\
    \                                  **FROM**\n                            |RT|RT|RT|RT|RT|RT|RT\n\
    \                            |3 |4 |5 |6 |7 |10|11|\n                        \
    \ ------------------------\n                         RT3|  |  |  |6 |  |  |  |\n\
    \                         RT4|  |  |8 |  |  |  |  |\n                        \
    \ RT5|  |8 |  |6 |6 |  |  |\n                         RT6|8 |  |7 |  |  |5 | \
    \ |\n                         RT7|  |  |6 |  |  |  |  |\n                    \
    \ *  RT10|  |  |  |7 |  |  |2 |\n                     *  RT11|  |  |  |  |  |3\
    \ |  |\n                     T    N1|4 |4 |  |  |  |  |  |\n                 \
    \    O    N2|4 |4 |  |  |  |  |  |\n                     *    N3|1 |1 |  |  |\
    \  |  |  |\n                     *    N4|2 |3 |  |  |  |  |  |\n             \
    \             Ia|  |  |  |  |  |5 |  |\n                          Ib|  |  |  |7\
    \ |  |  |  |\n                          N6|  |  |  |  |1 |1 |3 |\n           \
    \               N7|  |  |  |  |5 |5 |7 |\n                          N8|  |  |\
    \  |  |4 |3 |2 |\n                   N9-N11,H1|  |  |  |  |  |  |1 |\n       \
    \                  N12|  |  |8 |  |2 |  |  |\n                         N13|  |\
    \  |8 |  |  |  |  |\n                         N14|  |  |8 |  |  |  |  |\n    \
    \                     N15|  |  |  |  |9 |  |  |\n                     Figure 8:\
    \ The backbone's database.\n              Networks and routers are represented\
    \ by vertices.\n              An edge of cost X connects Vertex A to Vertex B\
    \ iff\n              the intersection of Column A and Row B is marked\n      \
    \                           with an X.\n                 Area  border   dist \
    \ from   dist  from\n                 router         RT3          RT4\n      \
    \           ______________________________________\n                 to  RT3 \
    \       *            21\n                 to  RT4        22           *\n    \
    \             to  RT7        20           14\n                 to  RT10      \
    \ 15           22\n                 to  RT11       18           25\n         \
    \        ______________________________________\n                 to  Ia     \
    \    20           27\n                 to  Ib         15           22\n      \
    \           ______________________________________\n                 to  RT5 \
    \       14           8\n                 to  RT7        20           14\n    \
    \             Table 5: Backbone distances calculated\n                       \
    \ by Routers RT3 and RT4.\n        Note that Table 6 assumes that an area range\
    \ has been configured\n        for the backbone which groups Ia and Ib into a\
    \ single\n        advertisement.\n        The information imported into Area 1\
    \ by Routers RT3 and RT4\n        enables an internal router, such as RT1, to\
    \ choose an area\n        border router intelligently.  Router RT1 would use RT4\
    \ for\n        traffic to Network N6, RT3 for traffic to Network N10, and would\n\
    \        load share between the two for traffic to Network N8.\n             \
    \      Destination   RT3 adv.   RT4 adv.\n                   _________________________________\n\
    \                   Ia,Ib         15         22\n                   N6       \
    \     16         15\n                   N7            20         19\n        \
    \           N8            18         18\n                   N9-N11,H1     19 \
    \        26\n                   _________________________________\n          \
    \         RT5           14         8\n                   RT7           20    \
    \     14\n              Table 6: Destinations advertised into Area 1\n       \
    \                 by Routers RT3 and RT4.\n        Router RT1 can also determine\
    \ in this manner the shortest path\n        to the AS boundary routers RT5 and\
    \ RT7.  Then, by looking at RT5\n        and RT7's external advertisements, Router\
    \ RT1 can decide between\n        RT5 or RT7 when sending to a destination in\
    \ another Autonomous\n        System (one of the networks N12-N15).\n        Note\
    \ that a failure of the line between Routers RT6 and RT10\n        will cause\
    \ the backbone to become disconnected.  Configuring a\n        virtual link between\
    \ Routers RT7 and RT10 will give the backbone\n        more connectivity and more\
    \ resistance to such failures. Also, a\n        virtual link between RT7 and RT10\
    \ would allow a much shorter\n        path between the third area (containing\
    \ N9) and the router RT7,\n        which is advertising a good route to external\
    \ network N12.\n    3.5.  IP subnetting support\n        OSPF attaches an IP address\
    \ mask to each advertised route.  The\n        mask indicates the range of addresses\
    \ being described by the\n        particular route.  For example, a summary advertisement\
    \ for the\n        destination 128.185.0.0 with a mask of 0xffff0000 actually\
    \ is\n        describing a single route to the collection of destinations\n  \
    \      128.185.0.0 - 128.185.255.255.  Similarly, host routes are\n        always\
    \ advertised with a mask of 0xffffffff, indicating the\n        presence of only\
    \ a single destination.\n        Including the mask with each advertised destination\
    \ enables the\n        implementation of what is commonly referred to as variable-\n\
    \        length subnetting.  This means that a single IP class A, B, or C\n  \
    \      network number can be broken up into many subnets of various\n        sizes.\
    \  For example, the network 128.185.0.0 could be broken up\n        into 62 variable-sized\
    \ subnets: 15 subnets of size 4K, 15\n        subnets of size 256, and 32 subnets\
    \ of size 8.  Table 7 shows\n        some of the resulting network addresses together\
    \ with their\n        masks:\n                  Network address   IP address mask\
    \   Subnet size\n                  _______________________________________________\n\
    \                  128.185.16.0      0xfffff000        4K\n                  128.185.1.0\
    \       0xffffff00        256\n                  128.185.0.8       0xfffffff8\
    \        8\n                         Table 7: Some sample subnet sizes.\n    \
    \    There are many possible ways of dividing up a class A, B, and C\n       \
    \ network into variable sized subnets.  The precise procedure for\n        doing\
    \ so is beyond the scope of this specification.  This\n        specification however\
    \ establishes the following guideline: When\n        an IP packet is forwarded,\
    \ it is always forwarded to the network\n        that is the best match for the\
    \ packet's destination.  Here best\n        match is synonymous with the longest\
    \ or most specific match.\n        For example, the default route with destination\
    \ of 0.0.0.0 and\n        mask 0x00000000 is always a match for every IP destination.\
    \  Yet\n        it is always less specific than any other match.  Subnet masks\n\
    \        must be assigned so that the best match for any IP destination\n    \
    \    is unambiguous.\n        The OSPF area concept is modelled after an IP subnetted\
    \ network.\n        OSPF areas have been loosely defined to be a collection of\n\
    \        networks.  In actuality, an OSPF area is specified to be a list\n   \
    \     of address ranges (see Section C.2 for more details).  Each\n        address\
    \ range is defined as an [address,mask] pair.  Many\n        separate networks\
    \ may then be contained in a single address\n        range, just as a subnetted\
    \ network is composed of many separate\n        subnets.  Area border routers\
    \ then summarize the area contents\n        (for distribution to the backbone)\
    \ by advertising a single route\n        for each address range.  The cost of\
    \ the route is the minimum\n        cost to any of the networks falling in the\
    \ specified range.\n        For example, an IP subnetted network can be configured\
    \ as a\n        single OSPF area.  In that case, the area would be defined as\
    \ a\n        single address range: a class A, B, or C network number along\n \
    \       with its natural IP mask.  Inside the area, any number of\n        variable\
    \ sized subnets could be defined.  External to the area,\n        a single route\
    \ for the entire subnetted network would be\n        distributed, hiding even\
    \ the fact that the network is subnetted\n        at all.  The cost of this route\
    \ is the minimum of the set of\n        costs to the component subnets.\n    3.6.\
    \  Supporting stub areas\n        In some Autonomous Systems, the majority of\
    \ the topological\n        database may consist of AS external advertisements.\
    \  An OSPF AS\n        external advertisement is usually flooded throughout the\
    \ entire\n        AS.  However, OSPF allows certain areas to be configured as\n\
    \        \"stub areas\".  AS external advertisements are not flooded\n       \
    \ into/throughout stub areas; routing to AS external destinations\n        in\
    \ these areas is based on a (per-area) default only.  This\n        reduces the\
    \ topological database size, and therefore the memory\n        requirements, for\
    \ a stub area's internal routers.\n        In order to take advantage of the OSPF\
    \ stub area support,\n        default routing must be used in the stub area. \
    \ This is\n        accomplished as follows.  One or more of the stub area's area\n\
    \        border routers must advertise a default route into the stub area\n  \
    \      via summary link advertisements.  These summary defaults are\n        flooded\
    \ throughout the stub area, but no further.  (For this\n        reason these defaults\
    \ pertain only to the particular stub area).\n        These summary default routes\
    \ will match any destination that is\n        not explicitly reachable by an intra-area\
    \ or inter-area path\n        (i.e., AS external destinations).\n        An area\
    \ can be configured as stub when there is a single exit\n        point from the\
    \ area, or when the choice of exit point need not\n        be made on a per-external-destination\
    \ basis.  For example, Area\n        3 in Figure 6 could be configured as a stub\
    \ area, because all\n        external traffic must travel though its single area\
    \ border\n        router RT11.  If Area 3 were configured as a stub, Router RT11\n\
    \        would advertise a default route for distribution inside Area 3\n    \
    \    (in a summary link advertisement), instead of flooding the AS\n        external\
    \ advertisements for Networks N12-N15 into/throughout the\n        area.\n   \
    \     The OSPF protocol ensures that all routers belonging to an area\n      \
    \  agree on whether the area has been configured as a stub.  This\n        guarantees\
    \ that no confusion will arise in the flooding of AS\n        external advertisements.\n\
    \        There are a couple of restrictions on the use of stub areas.\n      \
    \  Virtual links cannot be configured through stub areas.  In\n        addition,\
    \ AS boundary routers cannot be placed internal to stub\n        areas.\n    3.7.\
    \  Partitions of areas\n        OSPF does not actively attempt to repair area\
    \ partitions.  When\n        an area becomes partitioned, each component simply\
    \ becomes a\n        separate area.  The backbone then performs routing between\
    \ the\n        new areas.  Some destinations reachable via intra-area routing\n\
    \        before the partition will now require inter-area routing.\n        In\
    \ the previous section, an area was described as a list of\n        address ranges.\
    \  Any particular address range must still be\n        completely contained in\
    \ a single component of the area\n        partition.  This has to do with the\
    \ way the area contents are\n        summarized to the backbone.  Also, the backbone\
    \ itself must not\n        partition.  If it does, parts of the Autonomous System\
    \ will\n        become unreachable.  Backbone partitions can be repaired by\n\
    \        configuring virtual links (see Section 15).\n        Another way to think\
    \ about area partitions is to look at the\n        Autonomous System graph that\
    \ was introduced in Section 2.  Area\n        IDs can be viewed as colors for\
    \ the graph's edges.[1] Each edge\n        of the graph connects to a network,\
    \ or is itself a point-to-\n        point network.  In either case, the edge is\
    \ colored with the\n        network's Area ID.\n        A group of edges, all\
    \ having the same color, and interconnected\n        by vertices, represents an\
    \ area.  If the topology of the\n        Autonomous System is intact, the graph\
    \ will have several regions\n        of color, each color being a distinct Area\
    \ ID.\n        When the AS topology changes, one of the areas may become\n   \
    \     partitioned.  The graph of the AS will then have multiple\n        regions\
    \ of the same color (Area ID).  The routing in the\n        Autonomous System\
    \ will continue to function as long as these\n        regions of same color are\
    \ connected by the single backbone\n        region.\n"
- title: 4.  Functional Summary
  contents:
  - "4.  Functional Summary\n    A separate copy of OSPF's basic routing algorithm\
    \ runs in each area.\n    Routers having interfaces to multiple areas run multiple\
    \ copies of\n    the algorithm.  A brief summary of the routing algorithm follows.\n\
    \    When a router starts, it first initializes the routing protocol data\n  \
    \  structures.  The router then waits for indications from the lower-\n    level\
    \ protocols that its interfaces are functional.\n    A router then uses the OSPF's\
    \ Hello Protocol to acquire neighbors.\n    The router sends Hello packets to\
    \ its neighbors, and in turn\n    receives their Hello packets.  On broadcast\
    \ and point-to-point\n    networks, the router dynamically detects its neighboring\
    \ routers by\n    sending its Hello packets to the multicast address AllSPFRouters.\n\
    \    On non-broadcast networks, some configuration information is\n    necessary\
    \ in order to discover neighbors.  On all multi-access\n    networks (broadcast\
    \ or non-broadcast), the Hello Protocol also\n    elects a Designated router for\
    \ the network.\n    The router will attempt to form adjacencies with some of its\
    \ newly\n    acquired neighbors.  Topological databases are synchronized between\n\
    \    pairs of adjacent routers.  On multi-access networks, the Designated\n  \
    \  Router determines which routers should become adjacent.\n    Adjacencies control\
    \ the distribution of routing protocol packets.\n    Routing protocol packets\
    \ are sent and received only on adjacencies.\n    In particular, distribution\
    \ of topological database updates proceeds\n    along adjacencies.\n    A router\
    \ periodically advertises its state, which is also called\n    link state.  Link\
    \ state is also advertised when a router's state\n    changes.  A router's adjacencies\
    \ are reflected in the contents of\n    its link state advertisements.  This relationship\
    \ between\n    adjacencies and link state allows the protocol to detect dead\n\
    \    routers in a timely fashion.\n    Link state advertisements are flooded throughout\
    \ the area.  The\n    flooding algorithm is reliable, ensuring that all routers\
    \ in an area\n    have exactly the same topological database.  This database consists\n\
    \    of the collection of link state advertisements received from each\n    router\
    \ belonging to the area.  From this database each router\n    calculates a shortest-path\
    \ tree, with itself as root.  This\n    shortest-path tree in turn yields a routing\
    \ table for the protocol.\n    4.1.  Inter-area routing\n        The previous\
    \ section described the operation of the protocol\n        within a single area.\
    \  For intra-area routing, no other routing\n        information is pertinent.\
    \  In order to be able to route to\n        destinations outside of the area,\
    \ the area border routers inject\n        additional routing information into\
    \ the area.  This additional\n        information is a distillation of the rest\
    \ of the Autonomous\n        System's topology.\n        This distillation is\
    \ accomplished as follows: Each area border\n        router is by definition connected\
    \ to the backbone.  Each area\n        border router summarizes the topology of\
    \ its attached areas for\n        transmission on the backbone, and hence to all\
    \ other area border\n        routers.  An area border router then has complete\
    \ topological\n        information concerning the backbone, and the area summaries\
    \ from\n        each of the other area border routers.  From this information,\n\
    \        the router calculates paths to all destinations not contained in\n  \
    \      its attached areas.  The router then advertises these paths into\n    \
    \    its attached areas.  This enables the area's internal routers to\n      \
    \  pick the best exit router when forwarding traffic to\n        destinations\
    \ in other areas.\n    4.2.  AS external routes\n        Routers that have information\
    \ regarding other Autonomous Systems\n        can flood this information throughout\
    \ the AS.  This external\n        routing information is distributed verbatim\
    \ to every\n        participating router.  There is one exception: external routing\n\
    \        information is not flooded into \"stub\" areas (see Section 3.6).\n \
    \       To utilize external routing information, the path to all routers\n   \
    \     advertising external information must be known throughout the AS\n     \
    \   (excepting the stub areas).  For that reason, the locations of\n        these\
    \ AS boundary routers are summarized by the (non-stub) area\n        border routers.\n\
    \    4.3.  Routing protocol packets\n        The OSPF protocol runs directly over\
    \ IP, using IP protocol 89.\n        OSPF does not provide any explicit fragmentation/reassembly\n\
    \        support.  When fragmentation is necessary, IP\n        fragmentation/reassembly\
    \ is used.  OSPF protocol packets have\n        been designed so that large protocol\
    \ packets can generally be\n        split into several smaller protocol packets.\
    \  This practice is\n        recommended; IP fragmentation should be avoided whenever\n\
    \        possible.\n        Routing protocol packets should always be sent with\
    \ the IP TOS\n        field set to 0.  If at all possible, routing protocol packets\n\
    \        should be given preference over regular IP data traffic, both\n     \
    \   when being sent and received.  As an aid to accomplishing this,\n        OSPF\
    \ protocol packets should have their IP precedence field set\n        to the value\
    \ Internetwork Control (see [RFC 791]).\n        All OSPF protocol packets share\
    \ a common protocol header that is\n        described in Appendix A.  The OSPF\
    \ packet types are listed below\n        in Table 8.  Their formats are also described\
    \ in Appendix A.\n             Type   Packet  name           Protocol  function\n\
    \             __________________________________________________________\n   \
    \          1      Hello                  Discover/maintain  neighbors\n      \
    \       2      Database Description   Summarize database contents\n          \
    \   3      Link State Request     Database download\n             4      Link\
    \ State Update      Database update\n             5      Link State Ack      \
    \   Flooding acknowledgment\n                            Table 8: OSPF packet\
    \ types.\n        OSPF's Hello protocol uses Hello packets to discover and\n \
    \       maintain neighbor relationships.  The Database Description and\n     \
    \   Link State Request packets are used in the forming of\n        adjacencies.\
    \  OSPF's reliable update mechanism is implemented by\n        the Link State\
    \ Update and Link State Acknowledgment packets.\n        Each Link State Update\
    \ packet carries a set of new link state\n        advertisements one hop further\
    \ away from their point of\n        origination.  A single Link State Update packet\
    \ may contain the\n        link state advertisements of several routers.  Each\n\
    \        advertisement is tagged with the ID of the originating router\n     \
    \   and a checksum of its link state contents.  The five different\n        types\
    \ of OSPF link state advertisements are listed below in\n        Table 9.\n  \
    \      As mentioned above, OSPF routing packets (with the exception of\n     \
    \   Hellos) are sent only over adjacencies.  Note that this means\n        that\
    \ all OSPF protocol packets travel a single IP hop, except\n        those that\
    \ are sent over virtual adjacencies.  The IP source\n        address of an OSPF\
    \ protocol packet is one end of a router\n        adjacency, and the IP destination\
    \ address is either the other\n       LS     Advertisement      Advertisement\
    \ description\n       type   name\n       _________________________________________________________\n\
    \       1      Router links       Originated by all routers.\n              advertisements\
    \     This advertisement describes\n                                 the collected\
    \ states of the\n                                 router's interfaces to an\n\
    \                                 area. Flooded throughout a\n               \
    \                  single area only.\n       _________________________________________________________\n\
    \       2      Network links      Originated for multi-access\n              advertisements\
    \     networks by the Designated\n                                 Router. This\
    \ advertisement\n                                 contains the list of routers\n\
    \                                 connected to the network.\n                \
    \                 Flooded throughout a single\n                              \
    \   area only.\n       _________________________________________________________\n\
    \       3,4    Summary link       Originated by area border\n              advertisements\
    \     routers, and flooded through-\n                                 out the\
    \ advertisement's\n                                 associated area. Each summary\n\
    \                                 link advertisement describes\n             \
    \                    a route to a destination out-\n                         \
    \        side the area, yet still inside\n                                 the\
    \ AS (i.e., an inter-area\n                                 route). Type 3 advertisements\n\
    \                                 describe routes to networks.\n             \
    \                    Type 4 advertisements describe\n                        \
    \         routes to AS boundary routers.\n       _________________________________________________________\n\
    \       5      AS external link   Originated by AS boundary\n              advertisements\
    \     routers, and flooded through-\n                                 out the\
    \ AS. Each AS external\n                                 link advertisement describes\n\
    \                                 a route to a destination in\n              \
    \                   another Autonomous System.\n                             \
    \    Default routes for the AS can\n                                 also be described\
    \ by AS\n                                 external link advertisements.\n    \
    \            Table 9: OSPF link state advertisements.\n        end of the adjacency\
    \ or an IP multicast address.\n    4.4.  Basic implementation requirements\n \
    \       An implementation of OSPF requires the following pieces of\n        system\
    \ support:\n        Timers\n            Two different kind of timers are required.\
    \  The first kind,\n            called single shot timers, fire once and cause\
    \ a protocol\n            event to be processed.  The second kind, called interval\n\
    \            timers, fire at continuous intervals.  These are used for\n     \
    \       the sending of packets at regular intervals.  A good example\n       \
    \     of this is the regular broadcast of Hello packets (on\n            broadcast\
    \ networks).  The granularity of both kinds of\n            timers is one second.\n\
    \            Interval timers should be implemented to avoid drift.  In\n     \
    \       some router implementations, packet processing can affect\n          \
    \  timer execution.  When multiple routers are attached to a\n            single\
    \ network, all doing broadcasts, this can lead to the\n            synchronization\
    \ of routing packets (which should be\n            avoided).  If timers cannot\
    \ be implemented to avoid drift,\n            small random amounts should be added\
    \ to/subtracted from the\n            timer interval at each firing.\n       \
    \ IP multicast\n            Certain OSPF packets take the form of IP multicast\n\
    \            datagrams.  Support for receiving and sending IP multicast\n    \
    \        datagrams, along with the appropriate lower-level protocol\n        \
    \    support, is required.  The IP multicast datagrams used by\n            OSPF\
    \ never travel more than one hop. For this reason, the\n            ability to\
    \ forward IP multicast datagrams is not required.\n            For information\
    \ on IP multicast, see [RFC 1112].\n        Variable-length subnet support\n \
    \           The router's IP protocol support must include the ability to\n   \
    \         divide a single IP class A, B, or C network number into many\n     \
    \       subnets of various sizes.  This is commonly called\n            variable-length\
    \ subnetting; see Section 3.5 for details.\n        IP supernetting support\n\
    \            The router's IP protocol support must include the ability to\n  \
    \          aggregate contiguous collections of IP class A, B, and C\n        \
    \    networks into larger quantities called supernets.\n            Supernetting\
    \ has been proposed as one way to improve the\n            scaling of IP routing\
    \ in the worldwide Internet. For more\n            information on IP supernetting,\
    \ see [RFC 1519].\n        Lower-level protocol support\n            The lower\
    \ level protocols referred to here are the network\n            access protocols,\
    \ such as the Ethernet data link layer.\n            Indications must be passed\
    \ from these protocols to OSPF as\n            the network interface goes up and\
    \ down.  For example, on an\n            ethernet it would be valuable to know\
    \ when the ethernet\n            transceiver cable becomes unplugged.\n      \
    \  Non-broadcast lower-level protocol support\n            Remember that non-broadcast\
    \ networks are multi-access\n            networks such as a X.25 PDN.  On these\
    \ networks, the Hello\n            Protocol can be aided by providing an indication\
    \ to OSPF\n            when an attempt is made to send a packet to a dead or non-\n\
    \            existent router.  For example, on an X.25 PDN a dead\n          \
    \  neighboring router may be indicated by the reception of a\n            X.25\
    \ clear with an appropriate cause and diagnostic, and\n            this information\
    \ would be passed to OSPF.\n        List manipulation primitives\n           \
    \ Much of the OSPF functionality is described in terms of its\n            operation\
    \ on lists of link state advertisements.  For\n            example, the collection\
    \ of advertisements that will be\n            retransmitted to an adjacent router\
    \ until acknowledged are\n            described as a list.  Any particular advertisement\
    \ may be on\n            many such lists.  An OSPF implementation needs to be\
    \ able to\n            manipulate these lists, adding and deleting constituent\n\
    \            advertisements as necessary.\n        Tasking support\n         \
    \   Certain procedures described in this specification invoke\n            other\
    \ procedures.  At times, these other procedures should\n            be executed\
    \ in-line, that is, before the current procedure\n            is finished.  This\
    \ is indicated in the text by instructions\n            to execute a procedure.\
    \  At other times, the other\n            procedures are to be executed only when\
    \ the current\n            procedure has finished.  This is indicated by instructions\n\
    \            to schedule a task.\n    4.5.  Optional OSPF capabilities\n     \
    \   The OSPF protocol defines several optional capabilities.  A\n        router\
    \ indicates the optional capabilities that it supports in\n        its OSPF Hello\
    \ packets, Database Description packets and in its\n        link state advertisements.\
    \  This enables routers supporting a\n        mix of optional capabilities to\
    \ coexist in a single Autonomous\n        System.\n        Some capabilities must\
    \ be supported by all routers attached to a\n        specific area.  In this case,\
    \ a router will not accept a\n        neighbor's Hello Packet unless there is\
    \ a match in reported\n        capabilities (i.e., a capability mismatch prevents\
    \ a neighbor\n        relationship from forming).  An example of this is the\n\
    \        ExternalRoutingCapability (see below).\n        Other capabilities can\
    \ be negotiated during the Database\n        Exchange process.  This is accomplished\
    \ by specifying the\n        optional capabilities in Database Description packets.\
    \  A\n        capability mismatch with a neighbor in this case will result in\n\
    \        only a subset of link state advertisements being exchanged\n        between\
    \ the two neighbors.\n        The routing table build process can also be affected\
    \ by the\n        presence/absence of optional capabilities.  For example, since\n\
    \        the optional capabilities are reported in link state\n        advertisements,\
    \ routers incapable of certain functions can be\n        avoided when building\
    \ the shortest path tree.  An example of\n        this is the TOS routing capability\
    \ (see below).\n        The current OSPF optional capabilities are listed below.\
    \  See\n        Section A.2 for more information.\n        ExternalRoutingCapability\n\
    \            Entire OSPF areas can be configured as \"stubs\" (see Section\n \
    \           3.6).  AS external advertisements will not be flooded into\n     \
    \       stub areas.  This capability is represented by the E-bit in\n        \
    \    the OSPF options field (see Section A.2).  In order to\n            ensure\
    \ consistent configuration of stub areas, all routers\n            interfacing\
    \ to such an area must have the E-bit clear in\n            their Hello packets\
    \ (see Sections 9.5 and 10.5).\n        TOS capability\n            All OSPF implementations\
    \ must be able to calculate separate\n            routes based on IP Type of Service.\
    \  However, to save\n            routing table space and processing resources,\
    \ an OSPF router\n            can be configured to ignore TOS when forwarding\
    \ packets.  In\n            this case, the router calculates routes for TOS 0\
    \ only.\n            This capability is represented by the T-bit in the OSPF\n\
    \            options field (see Section A.2).  TOS-capable routers will\n    \
    \        attempt to avoid non-TOS-capable routers when calculating\n         \
    \   non-zero TOS paths.\n"
- title: 5.  Protocol Data Structures
  contents:
  - "5.  Protocol Data Structures\n    The OSPF protocol is described in this specification\
    \ in terms of its\n    operation on various protocol data structures.  The following\
    \ list\n    comprises the top-level OSPF data structures.  Any initialization\n\
    \    that needs to be done is noted.  OSPF areas, interfaces and\n    neighbors\
    \ also have associated data structures that are described\n    later in this specification.\n\
    \    Router ID\n        A 32-bit number that uniquely identifies this router in\
    \ the AS.\n        One possible implementation strategy would be to use the\n\
    \        smallest IP interface address belonging to the router. If a\n       \
    \ router's OSPF Router ID is changed, the router's OSPF software\n        should\
    \ be restarted before the new Router ID takes effect.\n        Before restarting\
    \ in order to change its Router ID, the router\n        should flush its self-originated\
    \ link state advertisements from\n        the routing domain (see Section 14.1),\
    \ or they will persist for\n        up to MaxAge minutes.\n    Area structures\n\
    \        Each one of the areas to which the router is connected has its\n    \
    \    own data structure.  This data structure describes the working\n        of\
    \ the basic algorithm.  Remember that each area runs a separate\n        copy\
    \ of the basic algorithm.\n    Backbone (area) structure\n        The basic algorithm\
    \ operates on the backbone as if it were an\n        area.  For this reason the\
    \ backbone is represented as an area\n        structure.\n    Virtual links configured\n\
    \        The virtual links configured with this router as one endpoint.\n    \
    \    In order to have configured virtual links, the router itself\n        must\
    \ be an area border router.  Virtual links are identified by\n        the Router\
    \ ID of the other endpoint -- which is another area\n        border router.  These\
    \ two endpoint routers must be attached to a\n        common area, called the\
    \ virtual link's Transit area.  Virtual\n        links are part of the backbone,\
    \ and behave as if they were\n        unnumbered point-to-point networks between\
    \ the two routers.  A\n        virtual link uses the intra-area routing of its\
    \ Transit area to\n        forward packets.  Virtual links are brought up and\
    \ down through\n        the building of the shortest-path trees for the Transit\
    \ area.\n    List of external routes\n        These are routes to destinations\
    \ external to the Autonomous\n        System, that have been gained either through\
    \ direct experience\n        with another routing protocol (such as EGP), or through\n\
    \        configuration information, or through a combination of the two\n    \
    \    (e.g., dynamic external information to be advertised by OSPF\n        with\
    \ configured metric). Any router having these external routes\n        is called\
    \ an AS boundary router.  These routes are advertised by\n        the router into\
    \ the OSPF routing domain via AS external link\n        advertisements.\n    List\
    \ of AS external link advertisements\n        Part of the topological database.\
    \  These have originated from\n        the AS boundary routers.  They comprise\
    \ routes to destinations\n        external to the Autonomous System.  Note that,\
    \ if the router is\n        itself an AS boundary router, some of these AS external\
    \ link\n        advertisements have been self-originated.\n    The routing table\n\
    \        Derived from the topological database.  Each destination that\n     \
    \   the router can forward to is represented by a cost and a set of\n        paths.\
    \  A path is described by its type and next hop.  For more\n        information,\
    \ see Section 11.\n    TOS capability\n        This item indicates whether the\
    \ router will calculate separate\n        routes based on TOS.  This is a configurable\
    \ parameter.  For\n        more information, see Sections 4.5 and 16.9.\n    Figure\
    \ 9 shows the collection of data structures present in a\n    typical router.\
    \  The router pictured is RT10, from the map in Figure\n    6.  Note that Router\
    \ RT10 has a virtual link configured to Router\n    RT11, with Area 2 as the link's\
    \ Transit area.  This is indicated by\n    the dashed line in Figure 9.  When\
    \ the virtual link becomes active,\n    through the building of the shortest path\
    \ tree for Area 2, it\n    becomes an interface to the backbone (see the two backbone\n\
    \    interfaces depicted in Figure 9).\n"
- title: 6.  The Area Data Structure
  contents:
  - "6.  The Area Data Structure\n    The area data structure contains all the information\
    \ used to run the\n    basic routing algorithm. Each area maintains its own topological\n\
    \    database. A network belongs to a single area, and a router interface\n  \
    \  connects to a single area. Each router adjacency also belongs to a\n    single\
    \ area.\n    The OSPF backbone has all the properties of an area.  For that\n\
    \    reason it is also represented by an area data structure.  Note that\n   \
    \ some items in the structure apply differently to the backbone than\n    to non-backbone\
    \ areas.\n                              +----+\n                             \
    \ |RT10|------+\n                              +----+       \\+-------------+\n\
    \                             /      \\       |Routing Table|\n              \
    \              /        \\      +-------------+\n                           /\
    \          \\\n              +------+    /            \\    +--------+\n     \
    \         |Area 2|---+              +---|Backbone|\n              +------+***********+\
    \          +--------+\n             /        \\           *        /         \
    \ \\\n            /          \\           *      /            \\\n       +---------+\
    \  +---------+    +------------+       +------------+\n       |Interface|  |Interface|\
    \    |Virtual Link|       |Interface Ib|\n       |  to N6  |  |  to N8  |    |\
    \   to RT11  |       +------------+\n       +---------+  +---------+    +------------+\
    \             |\n           /  \\           |               |                \
    \   |\n          /    \\          |               |                   |\n   +--------+\
    \ +--------+  |        +-------------+      +------------+\n   |Neighbor| |Neighbor|\
    \  |        |Neighbor RT11|      |Neighbor RT6|\n   |  RT8   | |  RT7   |  | \
    \       +-------------+      +------------+\n   +--------+ +--------+  |\n   \
    \                       |\n                     +-------------+\n            \
    \         |Neighbor RT11|\n                     +-------------+\n            \
    \    Figure 9: Router RT10's Data structures\n    The area topological (or link\
    \ state) database consists of the\n    collection of router links, network links\
    \ and summary link\n    advertisements that have originated from the area's routers.\
    \  This\n    information is flooded throughout a single area only.  The list of\n\
    \    AS external link advertisements (see Section 5) is also considered\n    to\
    \ be part of each area's topological database.\n    Area ID\n        A 32-bit\
    \ number identifying the area.  0.0.0.0 is reserved for\n        the Area ID of\
    \ the backbone.  If assigning subnetted networks as\n        separate areas, the\
    \ IP network number could be used as the Area\n        ID.\n    List of component\
    \ address ranges\n        The address ranges that define the area.  Each address\
    \ range is\n        specified by an [address,mask] pair and a status indication\
    \ of\n        either Advertise or DoNotAdvertise (see Section 12.4.3). Each\n\
    \        network is then assigned to an area depending on the address\n      \
    \  range that it falls into (specified address ranges are not\n        allowed\
    \ to overlap).  As an example, if an IP subnetted network\n        is to be its\
    \ own separate OSPF area, the area is defined to\n        consist of a single\
    \ address range - an IP network number with\n        its natural (class A, B or\
    \ C) mask.\n    Associated router interfaces\n        This router's interfaces\
    \ connecting to the area.  A router\n        interface belongs to one and only\
    \ one area (or the backbone).\n        For the backbone structure this list includes\
    \ all the virtual\n        links.  A virtual link is identified by the Router\
    \ ID of its\n        other endpoint; its cost is the cost of the shortest intra-area\n\
    \        path through the Transit area that exists between the two\n        routers.\n\
    \    List of router links advertisements\n        A router links advertisement\
    \ is generated by each router in the\n        area.  It describes the state of\
    \ the router's interfaces to the\n        area.\n    List of network links advertisements\n\
    \        One network links advertisement is generated for each transit\n     \
    \   multi-access network in the area.  A network links advertisement\n       \
    \ describes the set of routers currently connected to the network.\n    List of\
    \ summary link advertisements\n        Summary link advertisements originate from\
    \ the area's area\n        border routers.  They describe routes to destinations\
    \ internal\n        to the Autonomous System, yet external to the area.\n    Shortest-path\
    \ tree\n        The shortest-path tree for the area, with this router itself as\n\
    \        root.  Derived from the collected router links and network links\n  \
    \      advertisements by the Dijkstra algorithm (see Section 16.1).\n    AuType\n\
    \        The type of authentication used for this area.  Authentication\n    \
    \    types are defined in Appendix D.  All OSPF packet exchanges are\n       \
    \ authenticated.  Different authentication schemes may be used in\n        different\
    \ areas.\n    TransitCapability\n        Set to TRUE if and only if there are\
    \ one or more active virtual\n        links using the area as a Transit area.\
    \ Equivalently, this\n        parameter indicates whether the area can carry data\
    \ traffic that\n        neither originates nor terminates in the area itself.\
    \ This\n        parameter is calculated when the area's shortest-path tree is\n\
    \        built (see Section 16.1, and is used as an input to a subsequent\n  \
    \      step of the routing table build process (see Section 16.3).\n    ExternalRoutingCapability\n\
    \        Whether AS external advertisements will be flooded\n        into/throughout\
    \ the area.  This is a configurable parameter.  If\n        AS external advertisements\
    \ are excluded from the area, the area\n        is called a \"stub\".  Internal\
    \ to stub areas, routing to AS\n        external destinations will be based solely\
    \ on a default summary\n        route.  The backbone cannot be configured as a\
    \ stub area.  Also,\n        virtual links cannot be configured through stub areas.\
    \  For more\n        information, see Section 3.6.\n    StubDefaultCost\n    \
    \    If the area has been configured as a stub area, and the router\n        itself\
    \ is an area border router, then the StubDefaultCost\n        indicates the cost\
    \ of the default summary link that the router\n        should advertise into the\
    \ area.  There can be a separate cost\n        configured for each IP TOS.  See\
    \ Section 12.4.3 for more\n        information.\n    Unless otherwise specified,\
    \ the remaining sections of this document\n    refer to the operation of the protocol\
    \ in a single area.\n"
- title: 7.  Bringing Up Adjacencies
  contents:
  - "7.  Bringing Up Adjacencies\n    OSPF creates adjacencies between neighboring\
    \ routers for the purpose\n    of exchanging routing information.  Not every two\
    \ neighboring\n    routers will become adjacent.  This section covers the generalities\n\
    \    involved in creating adjacencies.  For further details consult\n    Section\
    \ 10.\n    7.1.  The Hello Protocol\n        The Hello Protocol is responsible\
    \ for establishing and\n        maintaining neighbor relationships.  It also ensures\
    \ that\n        communication between neighbors is bidirectional.  Hello packets\n\
    \        are sent periodically out all router interfaces.  Bidirectional\n   \
    \     communication is indicated when the router sees itself listed in\n     \
    \   the neighbor's Hello Packet.\n        On multi-access networks, the Hello\
    \ Protocol elects a Designated\n        Router for the network.  Among other things,\
    \ the Designated\n        Router controls what adjacencies will be formed over\
    \ the network\n        (see below).\n        The Hello Protocol works differently\
    \ on broadcast networks, as\n        compared to non-broadcast networks.  On broadcast\
    \ networks, each\n        router advertises itself by periodically multicasting\
    \ Hello\n        Packets.  This allows neighbors to be discovered dynamically.\n\
    \        These Hello Packets contain the router's view of the Designated\n   \
    \     Router's identity, and the list of routers whose Hello Packets\n       \
    \ have been seen recently.\n        On non-broadcast networks some configuration\
    \ information is\n        necessary for the operation of the Hello Protocol. \
    \ Each router\n        that may potentially become Designated Router has a list\
    \ of all\n        other routers attached to the network.  A router, having\n \
    \       Designated Router potential, sends Hello Packets to all other\n      \
    \  potential Designated Routers when its interface to the non-\n        broadcast\
    \ network first becomes operational.  This is an attempt\n        to find the\
    \ Designated Router for the network.  If the router\n        itself is elected\
    \ Designated Router, it begins sending Hello\n        Packets to all other routers\
    \ attached to the network.\n        After a neighbor has been discovered, bidirectional\n\
    \        communication ensured, and (if on a multi-access network) a\n       \
    \ Designated Router elected, a decision is made regarding whether\n        or\
    \ not an adjacency should be formed with the neighbor (see\n        Section 10.4).\
    \  An attempt is always made to establish\n        adjacencies over point-to-point\
    \ networks and virtual links.  The\n        first step in bringing up an adjacency\
    \ is to synchronize the\n        neighbors' topological databases.  This is covered\
    \ in the next\n        section.\n    7.2.  The Synchronization of Databases\n\
    \        In a link-state routing algorithm, it is very important for all\n   \
    \     routers' topological databases to stay synchronized.  OSPF\n        simplifies\
    \ this by requiring only adjacent routers to remain\n        synchronized.  The\
    \ synchronization process begins as soon as the\n        routers attempt to bring\
    \ up the adjacency.  Each router\n        describes its database by sending a\
    \ sequence of Database\n        Description packets to its neighbor.  Each Database\
    \ Description\n        Packet describes a set of link state advertisements belonging\
    \ to\n        the router's database.  When the neighbor sees a link state\n  \
    \      advertisement that is more recent than its own database copy, it\n    \
    \    makes a note that this newer advertisement should be requested.\n       \
    \ This sending and receiving of Database Description packets is\n        called\
    \ the \"Database Exchange Process\".  During this process,\n        the two routers\
    \ form a master/slave relationship.  Each Database\n        Description Packet\
    \ has a sequence number.  Database Description\n        Packets sent by the master\
    \ (polls) are acknowledged by the slave\n        through echoing of the sequence\
    \ number.  Both polls and their\n        responses contain summaries of link state\
    \ data.  The master is\n        the only one allowed to retransmit Database Description\
    \ Packets.\n        It does so only at fixed intervals, the length of which is\
    \ the\n        configured constant RxmtInterval.\n        Each Database Description\
    \ contains an indication that there are\n        more packets to follow --- the\
    \ M-bit.  The Database Exchange\n        Process is over when a router has received\
    \ and sent Database\n        Description Packets with the M-bit off.\n       \
    \ During and after the Database Exchange Process, each router has\n        a list\
    \ of those link state advertisements for which the neighbor\n        has more\
    \ up-to-date instances.  These advertisements are\n        requested in Link State\
    \ Request Packets.  Link State Request\n        packets that are not satisfied\
    \ are retransmitted at fixed\n        intervals of time RxmtInterval.  When the\
    \ Database Description\n        Process has completed and all Link State Requests\
    \ have been\n        satisfied, the databases are deemed synchronized and the\
    \ routers\n        are marked fully adjacent.  At this time the adjacency is fully\n\
    \        functional and is advertised in the two routers' link state\n       \
    \ advertisements.\n        The adjacency is used by the flooding procedure as\
    \ soon as the\n        Database Exchange Process begins.  This simplifies database\n\
    \        synchronization, and guarantees that it finishes in a\n        predictable\
    \ period of time.\n    7.3.  The Designated Router\n        Every multi-access\
    \ network has a Designated Router.  The\n        Designated Router performs two\
    \ main functions for the routing\n        protocol:\n        o   The Designated\
    \ Router originates a network links\n            advertisement on behalf of the\
    \ network.  This advertisement\n            lists the set of routers (including\
    \ the Designated Router\n            itself) currently attached to the network.\
    \  The Link State\n            ID for this advertisement (see Section 12.1.4)\
    \ is the IP\n            interface address of the Designated Router.  The IP network\n\
    \            number can then be obtained by using the subnet/network\n       \
    \     mask.\n        o   The Designated Router becomes adjacent to all other routers\n\
    \            on the network.  Since the link state databases are\n           \
    \ synchronized across adjacencies (through adjacency bring-up\n            and\
    \ then the flooding procedure), the Designated Router\n            plays a central\
    \ part in the synchronization process.\n        The Designated Router is elected\
    \ by the Hello Protocol.  A\n        router's Hello Packet contains its Router\
    \ Priority, which is\n        configurable on a per-interface basis.  In general,\
    \ when a\n        router's interface to a network first becomes functional, it\n\
    \        checks to see whether there is currently a Designated Router for\n  \
    \      the network.  If there is, it accepts that Designated Router,\n       \
    \ regardless of its Router Priority.  (This makes it harder to\n        predict\
    \ the identity of the Designated Router, but ensures that\n        the Designated\
    \ Router changes less often.  See below.)\n        Otherwise, the router itself\
    \ becomes Designated Router if it has\n        the highest Router Priority on\
    \ the network.  A more detailed\n        (and more accurate) description of Designated\
    \ Router election is\n        presented in Section 9.4.\n        The Designated\
    \ Router is the endpoint of many adjacencies.  In\n        order to optimize the\
    \ flooding procedure on broadcast networks,\n        the Designated Router multicasts\
    \ its Link State Update Packets\n        to the address AllSPFRouters, rather\
    \ than sending separate\n        packets over each adjacency.\n        Section\
    \ 2 of this document discusses the directed graph\n        representation of an\
    \ area.  Router nodes are labelled with their\n        Router ID.  Multi-access\
    \ network nodes are actually labelled\n        with the IP address of their Designated\
    \ Router.  It follows that\n        when the Designated Router changes, it appears\
    \ as if the network\n        node on the graph is replaced by an entirely new\
    \ node.  This\n        will cause the network and all its attached routers to\
    \ originate\n        new link state advertisements.  Until the topological databases\n\
    \        again converge, some temporary loss of connectivity may result.\n   \
    \     This may result in ICMP unreachable messages being sent in\n        response\
    \ to data traffic.  For that reason, the Designated\n        Router should change\
    \ only infrequently.  Router Priorities\n        should be configured so that\
    \ the most dependable router on a\n        network eventually becomes Designated\
    \ Router.\n    7.4.  The Backup Designated Router\n        In order to make the\
    \ transition to a new Designated Router\n        smoother, there is a Backup Designated\
    \ Router for each multi-\n        access network.  The Backup Designated Router\
    \ is also adjacent\n        to all routers on the network, and becomes Designated\
    \ Router\n        when the previous Designated Router fails.  If there were no\n\
    \        Backup Designated Router, when a new Designated Router became\n     \
    \   necessary, new adjacencies would have to be formed between the\n        new\
    \ Designated Router and all other routers attached to the\n        network.  Part\
    \ of the adjacency forming process is the\n        synchronizing of topological\
    \ databases, which can potentially\n        take quite a long time.  During this\
    \ time, the network would not\n        be available for transit data traffic.\
    \  The Backup Designated\n        obviates the need to form these adjacencies,\
    \ since they already\n        exist.  This means the period of disruption in transit\
    \ traffic\n        lasts only as long as it takes to flood the new link state\n\
    \        advertisements (which announce the new Designated Router).\n        The\
    \ Backup Designated Router does not generate a network links\n        advertisement\
    \ for the network.  (If it did, the transition to a\n        new Designated Router\
    \ would be even faster.  However, this is a\n        tradeoff between database\
    \ size and speed of convergence when the\n        Designated Router disappears.)\n\
    \        The Backup Designated Router is also elected by the Hello\n        Protocol.\
    \  Each Hello Packet has a field that specifies the\n        Backup Designated\
    \ Router for the network.\n        In some steps of the flooding procedure, the\
    \ Backup Designated\n        Router plays a passive role, letting the Designated\
    \ Router do\n        more of the work.  This cuts down on the amount of local\
    \ routing\n        traffic.  See Section 13.3 for more information.\n    7.5.\
    \  The graph of adjacencies\n        An adjacency is bound to the network that\
    \ the two routers have\n        in common.  If two routers have multiple networks\
    \ in common,\n        they may have multiple adjacencies between them.\n     \
    \   One can picture the collection of adjacencies on a network as\n        forming\
    \ an undirected graph.  The vertices consist of routers,\n        with an edge\
    \ joining two routers if they are adjacent.  The\n        graph of adjacencies\
    \ describes the flow of routing protocol\n        packets, and in particular Link\
    \ State Update Packets, through\n        the Autonomous System.\n        Two graphs\
    \ are possible, depending on whether the common network\n        is multi-access.\
    \  On physical point-to-point networks (and\n        virtual links), the two routers\
    \ joined by the network will be\n        adjacent after their databases have been\
    \ synchronized.  On\n        multi-access networks, both the Designated Router\
    \ and the Backup\n        Designated Router are adjacent to all other routers\
    \ attached to\n        the network, and these account for all adjacencies.\n \
    \       These graphs are shown in Figure 10.  It is assumed that Router\n    \
    \    RT7 has become the Designated Router, and Router RT3 the Backup\n       \
    \ Designated Router, for the Network N2.  The Backup Designated\n        Router\
    \ performs a lesser function during the flooding procedure\n        than the Designated\
    \ Router (see Section 13.3).  This is the\n        reason for the dashed lines\
    \ connecting the Backup Designated\n        Router RT3.\n"
- title: 8.  Protocol Packet Processing
  contents:
  - "8.  Protocol Packet Processing\n    This section discusses the general processing\
    \ of OSPF routing\n    protocol packets.  It is very important that the router\
    \ topological\n    databases remain synchronized.  For this reason, routing protocol\n\
    \    packets should get preferential treatment over ordinary data\n    packets,\
    \ both in sending and receiving.\n    Routing protocol packets are sent along\
    \ adjacencies only (with the\n          +---+            +---+\n          |RT1|------------|RT2|\
    \            o---------------o\n          +---+    N1      +---+           RT1\
    \             RT2\n                                                 RT7\n    \
    \                                              o---------+\n            +---+\
    \   +---+   +---+                /|\\        |\n            |RT7|   |RT3|   |RT4|\
    \               / | \\       |\n            +---+   +---+   +---+            \
    \  /  |  \\      |\n              |       |       |               /   |   \\ \
    \    |\n         +-----------------------+        RT5o RT6o    oRT4 |\n      \
    \            |       |     N2            *   *   *     |\n                +---+\
    \   +---+                  *  *  *      |\n                |RT5|   |RT6|     \
    \              * * *       |\n                +---+   +---+                  \
    \  ***        |\n                                                  o---------+\n\
    \                                                 RT3\n                  Figure\
    \ 10: The graph of adjacencies\n    exception of Hello packets, which are used\
    \ to discover the\n    adjacencies).  This means that all routing protocol packets\
    \ travel a\n    single IP hop, except those sent over virtual links.\n    All\
    \ routing protocol packets begin with a standard header.  The\n    sections below\
    \ give the details on how to fill in and verify this\n    standard header.  Then,\
    \ for each packet type, the section is listed\n    that gives more details on\
    \ that particular packet type's processing.\n    8.1.  Sending protocol packets\n\
    \        When a router sends a routing protocol packet, it fills in the\n    \
    \    fields of the standard OSPF packet header as follows.  For more\n       \
    \ details on the header format consult Section A.3.1:\n        Version #\n   \
    \         Set to 2, the version number of the protocol as documented\n       \
    \     in this specification.\n        Packet type\n            The type of OSPF\
    \ packet, such as Link state Update or Hello\n            Packet.\n        Packet\
    \ length\n            The length of the entire OSPF packet in bytes, including\
    \ the\n            standard OSPF packet header.\n        Router ID\n         \
    \   The identity of the router itself (who is originating the\n            packet).\n\
    \        Area ID\n            The OSPF area that the packet is being sent into.\n\
    \        Checksum\n            The standard IP 16-bit one's complement checksum\
    \ of the\n            entire OSPF packet, excluding the 64-bit authentication\n\
    \            field.  This checksum should be calculated before handing\n     \
    \       the packet to the appropriate authentication procedure.\n        AuType\
    \ and Authentication\n            Each OSPF packet exchange is authenticated.\
    \  Authentication\n            types are assigned by the protocol and documented\
    \ in\n            Appendix D.  A different authentication scheme can be used\n\
    \            for each OSPF area.  The 64-bit authentication field is set\n   \
    \         by the appropriate authentication procedure (determined by\n       \
    \     AuType).  This procedure should be the last called when\n            forming\
    \ the packet to be sent.  The setting of the\n            authentication field\
    \ is determined by the packet contents\n            and the authentication key\
    \ (which is configurable on a per-\n            interface basis).\n        The\
    \ IP destination address for the packet is selected as\n        follows.  On physical\
    \ point-to-point networks, the IP\n        destination is always set to the address\
    \ AllSPFRouters.  On all\n        other network types (including virtual links),\
    \ the majority of\n        OSPF packets are sent as unicasts, i.e., sent directly\
    \ to the\n        other end of the adjacency.  In this case, the IP destination\
    \ is\n        just the Neighbor IP address associated with the other end of\n\
    \        the adjacency (see Section 10).  The only packets not sent as\n     \
    \   unicasts are on broadcast networks; on these networks Hello\n        packets\
    \ are sent to the multicast destination AllSPFRouters, the\n        Designated\
    \ Router and its Backup send both Link State Update\n        Packets and Link\
    \ State Acknowledgment Packets to the multicast\n        address AllSPFRouters,\
    \ while all other routers send both their\n        Link State Update and Link\
    \ State Acknowledgment Packets to the\n        multicast address AllDRouters.\n\
    \        Retransmissions of Link State Update packets are ALWAYS sent as\n   \
    \     unicasts.\n        The IP source address should be set to the IP address\
    \ of the\n        sending interface.  Interfaces to unnumbered point-to-point\n\
    \        networks have no associated IP address.  On these interfaces,\n     \
    \   the IP source should be set to any of the other IP addresses\n        belonging\
    \ to the router.  For this reason, there must be at\n        least one IP address\
    \ assigned to the router.[2] Note that, for\n        most purposes, virtual links\
    \ act precisely the same as\n        unnumbered point-to-point networks.  However,\
    \ each virtual link\n        does have an IP interface address (discovered during\
    \ the routing\n        table build process) which is used as the IP source when\
    \ sending\n        packets over the virtual link.\n        For more information\
    \ on the format of specific OSPF packet\n        types, consult the sections listed\
    \ in Table 10.\n             Type   Packet name            detailed section (transmit)\n\
    \             _________________________________________________________\n    \
    \         1      Hello                  Section  9.5\n             2      Database\
    \ description   Section 10.8\n             3      Link state request     Section\
    \ 10.9\n             4      Link state update      Section 13.3\n            \
    \ 5      Link state ack         Section 13.5\n            Table 10: Sections describing\
    \ OSPF protocol packet transmission.\n    8.2.  Receiving protocol packets\n \
    \       Whenever a protocol packet is received by the router it is\n        marked\
    \ with the interface it was received on.  For routers that\n        have virtual\
    \ links configured, it may not be immediately obvious\n        which interface\
    \ to associate the packet with.  For example,\n        consider the Router RT11\
    \ depicted in Figure 6.  If RT11 receives\n        an OSPF protocol packet on\
    \ its interface to Network N8, it may\n        want to associate the packet with\
    \ the interface to Area 2, or\n        with the virtual link to Router RT10 (which\
    \ is part of the\n        backbone).  In the following, we assume that the packet\
    \ is\n        initially associated with the non-virtual  link.[3]\n        In\
    \ order for the packet to be accepted at the IP level, it must\n        pass a\
    \ number of tests, even before the packet is passed to OSPF\n        for processing:\n\
    \        o   The IP checksum must be correct.\n        o   The packet's IP destination\
    \ address must be the IP address\n            of the receiving interface, or one\
    \ of the IP multicast\n            addresses AllSPFRouters or AllDRouters.\n \
    \       o   The IP protocol specified must be OSPF (89).\n        o   Locally\
    \ originated packets should not be passed on to OSPF.\n            That is, the\
    \ source IP address should be examined to make\n            sure this is not a\
    \ multicast packet that the router itself\n            generated.\n        Next,\
    \ the OSPF packet header is verified.  The fields specified\n        in the header\
    \ must match those configured for the receiving\n        interface.  If they do\
    \ not, the packet should be discarded:\n        o   The version number field must\
    \ specify protocol version 2.\n        o   The 16-bit one's complement checksum\
    \ of the OSPF packet's\n            contents must be verified.  Remember that\
    \ the 64-bit\n            authentication field must be excluded from the checksum\n\
    \            calculation.\n        o   The Area ID found in the OSPF header must\
    \ be verified.  If\n            both of the following cases fail, the packet should\
    \ be\n            discarded.  The Area ID specified in the header must either:\n\
    \            (1) Match the Area ID of the receiving interface.  In this\n    \
    \            case, the packet has been sent over a single hop.\n             \
    \   Therefore, the packet's IP source address must be on the\n               \
    \ same network as the receiving interface.  This can be\n                determined\
    \ by comparing the packet's IP source address\n                to the interface's\
    \ IP address, after masking both\n                addresses with the interface\
    \ mask.  This comparison\n                should not be performed on point-to-point\
    \ networks. On\n                point-to-point networks, the interface addresses\
    \ of each\n                end of the link are assigned independently, if they\
    \ are\n                assigned at all.\n            (2) Indicate the backbone.\
    \  In this case, the packet has\n                been sent over a virtual link.\
    \  The receiving router\n                must be an area border router, and the\
    \ Router ID\n                specified in the packet (the source router) must\
    \ be the\n                other end of a configured virtual link.  The receiving\n\
    \                interface must also attach to the virtual link's\n          \
    \      configured Transit area.  If all of these checks\n                succeed,\
    \ the packet is accepted and is from now on\n                associated with the\
    \ virtual link (and the backbone\n                area).\n        o   Packets\
    \ whose IP destination is AllDRouters should only be\n            accepted if\
    \ the state of the receiving interface is DR or\n            Backup (see Section\
    \ 9.1).\n        o   The AuType specified in the packet must match the AuType\n\
    \            specified for the associated area.\n        Next, the packet must\
    \ be authenticated.  This depends on the\n        AuType specified (see Appendix\
    \ D).  The authentication procedure\n        may use an Authentication key, which\
    \ can be configured on a\n        per-interface basis.  If the authentication\
    \ fails, the packet\n        should be discarded.\n        If the packet type\
    \ is Hello, it should then be further processed\n        by the Hello Protocol\
    \ (see Section 10.5).  All other packet\n        types are sent/received only\
    \ on adjacencies.  This means that\n        the packet must have been sent by\
    \ one of the router's active\n        neighbors.  If the receiving interface is\
    \ a multi-access network\n        (either broadcast or non-broadcast) the sender\
    \ is identified by\n        the IP source address found in the packet's IP header.\
    \  If the\n        receiving interface is a point-to-point link or a virtual link,\n\
    \        the sender is identified by the Router ID (source router) found\n   \
    \     in the packet's OSPF header.  The data structure associated with\n     \
    \   the receiving interface contains the list of active neighbors.\n        Packets\
    \ not matching any active neighbor are discarded.\n        At this point all received\
    \ protocol packets are associated with\n        an active neighbor.  For the further\
    \ input processing of\n        specific packet types, consult the sections listed\
    \ in Table 11.\n              Type   Packet name            detailed section (receive)\n\
    \              ________________________________________________________\n    \
    \          1      Hello                  Section 10.5\n              2      Database\
    \ description   Section 10.6\n              3      Link state request     Section\
    \ 10.7\n              4      Link state update      Section 13\n             \
    \ 5      Link state ack         Section 13.7\n            Table 11: Sections describing\
    \ OSPF protocol packet reception.\n"
- title: 9.  The Interface Data Structure
  contents:
  - "9.  The Interface Data Structure\n    An OSPF interface is the connection between\
    \ a router and a network.\n    There is a single OSPF interface structure for\
    \ each attached\n    network; each interface structure has at most one IP interface\n\
    \    address (see below).  The support for multiple addresses on a single\n  \
    \  network is a matter for future consideration.\n    An OSPF interface can be\
    \ considered to belong to the area that\n    contains the attached network.  All\
    \ routing protocol packets\n    originated by the router over this interface are\
    \ labelled with the\n    interface's Area ID.  One or more router adjacencies\
    \ may develop\n    over an interface.  A router's link state advertisements reflect\
    \ the\n    state of its interfaces and their associated adjacencies.\n    The\
    \ following data items are associated with an interface.  Note\n    that a number\
    \ of these items are actually configuration for the\n    attached network; those\
    \ items must be the same for all routers\n    connected to the network.\n    Type\n\
    \        The kind of network to which the interface attaches.  Its value\n   \
    \     is either broadcast, non-broadcast yet still multi-access,\n        point-to-point\
    \ or virtual link.\n    State\n        The functional level of an interface. \
    \ State determines whether\n        or not full adjacencies are allowed to form\
    \ over the interface.\n        State is also reflected in the router's link state\n\
    \        advertisements.\n    IP interface address\n        The IP address associated\
    \ with the interface.  This appears as\n        the IP source address in all routing\
    \ protocol packets originated\n        over this interface.  Interfaces to unnumbered\
    \ point-to-point\n        networks do not have an associated IP address.\n   \
    \ IP interface mask\n        Also referred to as the subnet mask, this indicates\
    \ the portion\n        of the IP interface address that identifies the attached\n\
    \        network.  Masking the IP interface address with the IP interface\n  \
    \      mask yields the IP network number of the attached network.  On\n      \
    \  point-to-point networks and virtual links, the IP interface mask\n        is\
    \ not defined. On these networks, the link itself is not\n        assigned an\
    \ IP network number, and so the addresses of each side\n        of the link are\
    \ assigned independently, if they are assigned at\n        all.\n    Area ID\n\
    \        The Area ID of the area to which the attached network belongs.\n    \
    \    All routing protocol packets originating from the interface are\n       \
    \ labelled with this Area ID.\n    HelloInterval\n        The length of time,\
    \ in seconds, between the Hello packets that\n        the router sends on the\
    \ interface.  Advertised in Hello packets\n        sent out this interface.\n\
    \    RouterDeadInterval\n        The number of seconds before the router's neighbors\
    \ will declare\n        it down, when they stop hearing the router's Hello Packets.\n\
    \        Advertised in Hello packets sent out this interface.\n    InfTransDelay\n\
    \        The estimated number of seconds it takes to transmit a Link\n       \
    \ State Update Packet over this interface.  Link state\n        advertisements\
    \ contained in the Link State Update packet will\n        have their age incremented\
    \ by this amount before transmission.\n        This value should take into account\
    \ transmission and propagation\n        delays; it must be greater than zero.\n\
    \    Router Priority\n        An 8-bit unsigned integer.  When two routers attached\
    \ to a\n        network both attempt to become Designated Router, the one with\n\
    \        the highest Router Priority takes precedence.  A router whose\n     \
    \   Router Priority is set to 0 is ineligible to become Designated\n        Router\
    \ on the attached network.  Advertised in Hello packets\n        sent out this\
    \ interface.\n    Hello Timer\n        An interval timer that causes the interface\
    \ to send a Hello\n        packet.  This timer fires every HelloInterval seconds.\
    \  Note\n        that on non-broadcast networks a separate Hello packet is sent\n\
    \        to each qualified neighbor.\n    Wait Timer\n        A single shot timer\
    \ that causes the interface to exit the\n        Waiting state, and as a consequence\
    \ select a Designated Router\n        on the network.  The length of the timer\
    \ is RouterDeadInterval\n        seconds.\n    List of neighboring routers\n \
    \       The other routers attached to this network.  On multi-access\n       \
    \ networks, this list is formed by the Hello Protocol.\n        Adjacencies will\
    \ be formed to some of these neighbors.  The set\n        of adjacent neighbors\
    \ can be determined by an examination of all\n        of the neighbors' states.\n\
    \    Designated Router\n        The Designated Router selected for the attached\
    \ network.  The\n        Designated Router is selected on all multi-access networks\
    \ by\n        the Hello Protocol.  Two pieces of identification are kept for\n\
    \        the Designated Router: its Router ID and its IP interface\n        address\
    \ on the network.  The Designated Router advertises link\n        state for the\
    \ network; this network link state advertisement is\n        labelled with the\
    \ Designated Router's IP address.  The\n        Designated Router is initialized\
    \ to 0.0.0.0, which indicates the\n        lack of a Designated Router.\n    Backup\
    \ Designated Router\n        The Backup Designated Router is also selected on\
    \ all multi-\n        access networks by the Hello Protocol.  All routers on the\n\
    \        attached network become adjacent to both the Designated Router\n    \
    \    and the Backup Designated Router.  The Backup Designated Router\n       \
    \ becomes Designated Router when the current Designated Router\n        fails.\
    \  The Backup Designated Router is initialized to 0.0.0.0,\n        indicating\
    \ the lack of a Backup Designated Router.\n    Interface output cost(s)\n    \
    \    The cost of sending a data packet on the interface, expressed in\n      \
    \  the link state metric.  This is advertised as the link cost for\n        this\
    \ interface in the router links advertisement.  There may be\n        a separate\
    \ cost for each IP Type of Service.  The cost of an\n        interface must be\
    \ greater than zero.\n    RxmtInterval\n        The number of seconds between\
    \ link state advertisement\n        retransmissions, for adjacencies belonging\
    \ to this interface.\n        Also used when retransmitting Database Description\
    \ and Link\n        State Request Packets.\n    Authentication key\n        This\
    \ configured data allows the authentication procedure to\n        generate and/or\
    \ verify the Authentication field in the OSPF\n        header.  The Authentication\
    \ key can be configured on a per-\n        interface basis.  For example, if the\
    \ AuType indicates simple\n        password, the Authentication key would be a\
    \ 64-bit password.\n        This key would be inserted directly into the OSPF\
    \ header when\n        originating routing protocol packets, and there could be\
    \ a\n        separate password for each network.\n    9.1.  Interface states\n\
    \        The various states that router interfaces may attain is\n        documented\
    \ in this section.  The states are listed in order of\n        progressing functionality.\
    \  For example, the inoperative state\n        is listed first, followed by a\
    \ list of intermediate states\n        before the final, fully functional state\
    \ is achieved.  The\n        specification makes use of this ordering by sometimes\
    \ making\n        references such as \"those interfaces in state greater than\
    \ X\".\n        Figure 11 shows the graph of interface state changes.  The arcs\n\
    \        of the graph are labelled with the event causing the state\n        change.\
    \  These events are documented in Section 9.2.  The\n        interface state machine\
    \ is described in more detail in Section\n        9.3.\n                     \
    \             +----+   UnloopInd   +--------+\n                              \
    \    |Down|<--------------|Loopback|\n                                  +----+\
    \               +--------+\n                                     |\n         \
    \                            |InterfaceUp\n                          +-------+\
    \  |               +--------------+\n                          |Waiting|<-+-------------->|Point-to-point|\n\
    \                          +-------+                  +--------------+\n     \
    \                         |\n                     WaitTimer|BackupSeen\n     \
    \                         |\n                              |\n               \
    \               |   NeighborChange\n          +------+           +-+<----------------\
    \ +-------+\n          |Backup|<----------|?|----------------->|DROther|\n   \
    \       +------+---------->+-+<-----+           +-------+\n                  \
    \  Neighbor  |       |\n                    Change    |       |Neighbor\n    \
    \                          |       |Change\n                              |  \
    \   +--+\n                              +---->|DR|\n                         \
    \           +--+\n                      Figure 11: Interface State changes\n \
    \                In addition to the state transitions pictured,\n            \
    \     Event InterfaceDown always forces Down State, and\n                 Event\
    \ LoopInd always forces Loopback State\n        Down\n            This is the\
    \ initial interface state.  In this state, the\n            lower-level protocols\
    \ have indicated that the interface is\n            unusable.  No protocol traffic\
    \ at all will be sent or\n            received on such a interface.  In this state,\
    \ interface\n            parameters should be set to their initial values.  All\n\
    \            interface timers should be disabled, and there should be no\n   \
    \         adjacencies associated with the interface.\n        Loopback\n     \
    \       In this state, the router's interface to the network is\n            looped\
    \ back.  The interface may be looped back in hardware\n            or software.\
    \  The interface will be unavailable for regular\n            data traffic.  However,\
    \ it may still be desirable to gain\n            information on the quality of\
    \ this interface, either through\n            sending ICMP pings to the interface\
    \ or through something\n            like a bit error test.  For this reason, IP\
    \ packets may\n            still be addressed to an interface in Loopback state.\
    \  To\n            facilitate this, such interfaces are advertised in router\n\
    \            links advertisements as single host routes, whose\n            destination\
    \ is the IP interface address.[4]\n        Waiting\n            In this state,\
    \ the router is trying to determine the\n            identity of the (Backup)\
    \ Designated Router for the network.\n            To do this, the router monitors\
    \ the Hello Packets it\n            receives.  The router is not allowed to elect\
    \ a Backup\n            Designated Router nor a Designated Router until it\n \
    \           transitions out of Waiting state.  This prevents unnecessary\n   \
    \         changes of (Backup) Designated Router.\n        Point-to-point\n   \
    \         In this state, the interface is operational, and connects\n        \
    \    either to a physical point-to-point network or to a virtual\n           \
    \ link.  Upon entering this state, the router attempts to form\n            an\
    \ adjacency with the neighboring router.  Hello Packets are\n            sent\
    \ to the neighbor every HelloInterval seconds.\n        DR Other\n           \
    \ The interface is to a multi-access network on which another\n            router\
    \ has been selected to be the Designated Router.  In\n            this state,\
    \ the router itself has not been selected Backup\n            Designated Router\
    \ either.  The router forms adjacencies to\n            both the Designated Router\
    \ and the Backup Designated Router\n            (if they exist).\n        Backup\n\
    \            In this state, the router itself is the Backup Designated\n     \
    \       Router on the attached network.  It will be promoted to\n            Designated\
    \ Router when the present Designated Router fails.\n            The router establishes\
    \ adjacencies to all other routers\n            attached to the network.  The\
    \ Backup Designated Router\n            performs slightly different functions\
    \ during the Flooding\n            Procedure, as compared to the Designated Router\
    \ (see Section\n            13.3).  See Section 7.4 for more details on the functions\n\
    \            performed by the Backup Designated Router.\n        DR  In this state,\
    \ this router itself is the Designated Router\n            on the attached network.\
    \  Adjacencies are established to all\n            other routers attached to the\
    \ network.  The router must also\n            originate a network links advertisement\
    \ for the network\n            node.  The advertisement will contain links to\
    \ all routers\n            (including the Designated Router itself) attached to\
    \ the\n            network.  See Section 7.3 for more details on the functions\n\
    \            performed by the Designated Router.\n    9.2.  Events causing interface\
    \ state changes\n        State changes can be effected by a number of events.\
    \  These\n        events are pictured as the labelled arcs in Figure 11.  The\n\
    \        label definitions are listed below.  For a detailed explanation\n   \
    \     of the effect of these events on OSPF protocol operation,\n        consult\
    \ Section 9.3.\n        InterfaceUp\n            Lower-level protocols have indicated\
    \ that the network\n            interface is operational.  This enables the interface\
    \ to\n            transition out of Down state.  On virtual links, the\n     \
    \       interface operational indication is actually a result of the\n       \
    \     shortest path calculation (see Section 16.7).\n        WaitTimer\n     \
    \       The Wait Timer has fired, indicating the end of the waiting\n        \
    \    period that is required before electing a (Backup)\n            Designated\
    \ Router.\n        BackupSeen\n            The router has detected the existence\
    \ or non-existence of a\n            Backup Designated Router for the network.\
    \  This is done in\n            one of two ways.  First, an Hello Packet may be\
    \ received\n            from a neighbor claiming to be itself the Backup Designated\n\
    \            Router.  Alternatively, an Hello Packet may be received from\n  \
    \          a neighbor claiming to be itself the Designated Router, and\n     \
    \       indicating that there is no Backup Designated Router.  In\n          \
    \  either case there must be bidirectional communication with\n            the\
    \ neighbor, i.e., the router must also appear in the\n            neighbor's Hello\
    \ Packet.  This event signals an end to the\n            Waiting state.\n    \
    \    NeighborChange\n            There has been a change in the set of bidirectional\n\
    \            neighbors associated with the interface.  The (Backup)\n        \
    \    Designated Router needs to be recalculated.  The following\n            neighbor\
    \ changes lead to the NeighborChange event.  For an\n            explanation of\
    \ neighbor states, see Section 10.1.\n            o   Bidirectional communication\
    \ has been established to a\n                neighbor.  In other words, the state\
    \ of the neighbor has\n                transitioned to 2-Way or higher.\n    \
    \        o   There is no longer bidirectional communication with a\n         \
    \       neighbor.  In other words, the state of the neighbor has\n           \
    \     transitioned to Init or lower.\n            o   One of the bidirectional\
    \ neighbors is newly declaring\n                itself as either Designated Router\
    \ or Backup Designated\n                Router.  This is detected through examination\
    \ of that\n                neighbor's Hello Packets.\n            o   One of the\
    \ bidirectional neighbors is no longer\n                declaring itself as Designated\
    \ Router, or is no longer\n                declaring itself as Backup Designated\
    \ Router.  This is\n                again detected through examination of that\
    \ neighbor's\n                Hello Packets.\n            o   The advertised Router\
    \ Priority for a bidirectional\n                neighbor has changed.  This is\
    \ again detected through\n                examination of that neighbor's Hello\
    \ Packets.\n        LoopInd\n            An indication has been received that\
    \ the interface is now\n            looped back to itself.  This indication can\
    \ be received\n            either from network management or from the lower level\n\
    \            protocols.\n        UnloopInd\n            An indication has been\
    \ received that the interface is no\n            longer looped back.  As with\
    \ the LoopInd event, this\n            indication can be received either from\
    \ network management or\n            from the lower level protocols.\n       \
    \ InterfaceDown\n            Lower-level protocols indicate that this interface\
    \ is no\n            longer functional.  No matter what the current interface\n\
    \            state is, the new interface state will be Down.\n    9.3.  The Interface\
    \ state machine\n        A detailed description of the interface state changes\
    \ follows.\n        Each state change is invoked by an event (Section 9.2).  This\n\
    \        event may produce different effects, depending on the current\n     \
    \   state of the interface.  For this reason, the state machine\n        below\
    \ is organized by current interface state and received\n        event.  Each entry\
    \ in the state machine describes the resulting\n        new interface state and\
    \ the required set of additional actions.\n        When an interface's state changes,\
    \ it may be necessary to\n        originate a new router links advertisement.\
    \  See Section 12.4\n        for more details.\n        Some of the required actions\
    \ below involve generating events for\n        the neighbor state machine.  For\
    \ example, when an interface\n        becomes inoperative, all neighbor connections\
    \ associated with\n        the interface must be destroyed.  For more information\
    \ on the\n        neighbor state machine, see Section 10.3.\n         State(s):\
    \  Down\n            Event:  InterfaceUp\n        New state:  Depends upon action\
    \ routine\n           Action:  Start the interval Hello Timer, enabling the\n\
    \                    periodic sending of Hello packets out the interface.\n  \
    \                  If the attached network is a physical point-to-point\n    \
    \                network or virtual link, the interface state\n              \
    \      transitions to Point-to-Point.  Else, if the router\n                 \
    \   is not eligible to become Designated Router the\n                    interface\
    \ state transitions to DR Other.\n                    Otherwise, the attached\
    \ network is multi-access and\n                    the router is eligible to become\
    \ Designated Router.\n                    In this case, in an attempt to discover\
    \ the attached\n                    network's Designated Router the interface\
    \ state is\n                    set to Waiting and the single shot Wait Timer\
    \ is\n                    started.  If in addition the attached network is\n \
    \                   non-broadcast, examine the configured list of\n          \
    \          neighbors for this interface and generate the\n                   \
    \ neighbor event Start for each neighbor that is also\n                    eligible\
    \ to become Designated Router.\n         State(s):  Waiting\n            Event:\
    \  BackupSeen\n        New state:  Depends upon action routine.\n           Action:\
    \  Calculate the attached network's Backup Designated\n                    Router\
    \ and Designated Router, as shown in Section\n                    9.4.  As a result\
    \ of this calculation, the new state\n                    of the interface will\
    \ be either DR Other, Backup or\n                    DR.\n         State(s): \
    \ Waiting\n            Event:  WaitTimer\n        New state:  Depends upon action\
    \ routine.\n           Action:  Calculate the attached network's Backup Designated\n\
    \                    Router and Designated Router, as shown in Section\n     \
    \               9.4.  As a result of this calculation, the new state\n       \
    \             of the interface will be either DR Other, Backup or\n          \
    \          DR.\n         State(s):  DR Other, Backup or DR\n            Event:\
    \  NeighborChange\n        New state:  Depends upon action routine.\n        \
    \   Action:  Recalculate the attached network's Backup Designated\n          \
    \          Router and Designated Router, as shown in Section\n               \
    \     9.4.  As a result of this calculation, the new state\n                 \
    \   of the interface will be either DR Other, Backup or\n                    DR.\n\
    \         State(s):  Any State\n            Event:  InterfaceDown\n        New\
    \ state:  Down\n           Action:  All interface variables are reset, and interface\n\
    \                    timers disabled.  Also, all neighbor connections\n      \
    \              associated with the interface are destroyed.  This\n          \
    \          is done by generating the event KillNbr on all\n                  \
    \  associated neighbors (see Section 10.2).\n         State(s):  Any State\n \
    \           Event:  LoopInd\n        New state:  Loopback\n           Action:\
    \  Since this interface is no longer connected to the\n                    attached\
    \ network the actions associated with the\n                    above InterfaceDown\
    \ event are executed.\n         State(s):  Loopback\n            Event:  UnloopInd\n\
    \        New state:  Down\n           Action:  No actions are necessary.  For\
    \ example, the\n                    interface variables have already been reset\
    \ upon\n                    entering the Loopback state.  Note that reception\
    \ of\n                    an InterfaceUp event is necessary before the\n     \
    \               interface again becomes fully functional.\n    9.4.  Electing\
    \ the Designated Router\n        This section describes the algorithm used for\
    \ calculating a\n        network's Designated Router and Backup Designated Router.\
    \  This\n        algorithm is invoked by the Interface state machine.  The\n \
    \       initial time a router runs the election algorithm for a network,\n   \
    \     the network's Designated Router and Backup Designated Router are\n     \
    \   initialized to 0.0.0.0.  This indicates the lack of both a\n        Designated\
    \ Router and a Backup Designated Router.\n        The Designated Router election\
    \ algorithm proceeds as follows:\n        Call the router doing the calculation\
    \ Router X.  The list of\n        neighbors attached to the network and having\
    \ established\n        bidirectional communication with Router X is examined.\
    \  This\n        list is precisely the collection of Router X's neighbors (on\n\
    \        this network) whose state is greater than or equal to 2-Way (see\n  \
    \      Section 10.1).  Router X itself is also considered to be on the\n     \
    \   list.  Discard all routers from the list that are ineligible to\n        become\
    \ Designated Router.  (Routers having Router Priority of 0\n        are ineligible\
    \ to become Designated Router.)  The following\n        steps are then executed,\
    \ considering only those routers that\n        remain on the list:\n        (1)\
    \ Note the current values for the network's Designated Router\n            and\
    \ Backup Designated Router.  This is used later for\n            comparison purposes.\n\
    \        (2) Calculate the new Backup Designated Router for the network\n    \
    \        as follows.  Only those routers on the list that have not\n         \
    \   declared themselves to be Designated Router are eligible to\n            become\
    \ Backup Designated Router.  If one or more of these\n            routers have\
    \ declared themselves Backup Designated Router\n            (i.e., they are currently\
    \ listing themselves as Backup\n            Designated Router, but not as Designated\
    \ Router, in their\n            Hello Packets) the one having highest Router Priority\
    \ is\n            declared to be Backup Designated Router.  In case of a tie,\n\
    \            the one having the highest Router ID is chosen.  If no\n        \
    \    routers have declared themselves Backup Designated Router,\n            choose\
    \ the router having highest Router Priority, (again\n            excluding those\
    \ routers who have declared themselves\n            Designated Router), and again\
    \ use the Router ID to break\n            ties.\n        (3) Calculate the new\
    \ Designated Router for the network as\n            follows.  If one or more of\
    \ the routers have declared\n            themselves Designated Router (i.e., they\
    \ are currently\n            listing themselves as Designated Router in their\
    \ Hello\n            Packets) the one having highest Router Priority is declared\n\
    \            to be Designated Router.  In case of a tie, the one having\n    \
    \        the highest Router ID is chosen.  If no routers have\n            declared\
    \ themselves Designated Router, assign the Designated\n            Router to be\
    \ the same as the newly elected Backup Designated\n            Router.\n     \
    \   (4) If Router X is now newly the Designated Router or newly the\n        \
    \    Backup Designated Router, or is now no longer the Designated\n          \
    \  Router or no longer the Backup Designated Router, repeat\n            steps\
    \ 2 and 3, and then proceed to step 5.  For example, if\n            Router X\
    \ is now the Designated Router, when step 2 is\n            repeated X will no\
    \ longer be eligible for Backup Designated\n            Router election.  Among\
    \ other things, this will ensure that\n            no router will declare itself\
    \ both Backup Designated Router\n            and Designated Router.[5]\n     \
    \   (5) As a result of these calculations, the router itself may now\n       \
    \     be Designated Router or Backup Designated Router.  See\n            Sections\
    \ 7.3 and 7.4 for the additional duties this would\n            entail.  The router's\
    \ interface state should be set\n            accordingly.  If the router itself\
    \ is now Designated Router,\n            the new interface state is DR.  If the\
    \ router itself is now\n            Backup Designated Router, the new interface\
    \ state is Backup.\n            Otherwise, the new interface state is DR Other.\n\
    \        (6) If the attached network is non-broadcast, and the router\n      \
    \      itself has just become either Designated Router or Backup\n           \
    \ Designated Router, it must start sending Hello Packets to\n            those\
    \ neighbors that are not eligible to become Designated\n            Router (see\
    \ Section 9.5.1).  This is done by invoking the\n            neighbor event Start\
    \ for each neighbor having a Router\n            Priority of 0.\n        (7) If\
    \ the above calculations have caused the identity of either\n            the Designated\
    \ Router or Backup Designated Router to change,\n            the set of adjacencies\
    \ associated with this interface will\n            need to be modified.  Some\
    \ adjacencies may need to be\n            formed, and others may need to be broken.\
    \  To accomplish\n            this, invoke the event AdjOK?  on all neighbors\
    \ whose state\n            is at least 2-Way.  This will cause their eligibility\
    \ for\n            adjacency to be reexamined (see Sections 10.3 and 10.4).\n\
    \        The reason behind the election algorithm's complexity is the\n      \
    \  desire for an orderly transition from Backup Designated Router\n        to\
    \ Designated Router, when the current Designated Router fails.\n        This orderly\
    \ transition is ensured through the introduction of\n        hysteresis: no new\
    \ Backup Designated Router can be chosen until\n        the old Backup accepts\
    \ its new Designated Router\n        responsibilities.\n        The above procedure\
    \ may elect the same router to be both\n        Designated Router and Backup Designated\
    \ Router, although that\n        router will never be the calculating router (Router\
    \ X) itself.\n        The elected Designated Router may not be the router having\
    \ the\n        highest Router Priority, nor will the Backup Designated Router\n\
    \        necessarily have the second highest Router Priority.  If Router\n   \
    \     X is not itself eligible to become Designated Router, it is\n        possible\
    \ that neither a Backup Designated Router nor a\n        Designated Router will\
    \ be selected in the above procedure.  Note\n        also that if Router X is\
    \ the only attached router that is\n        eligible to become Designated Router,\
    \ it will select itself as\n        Designated Router and there will be no Backup\
    \ Designated Router\n        for the network.\n    9.5.  Sending Hello packets\n\
    \        Hello packets are sent out each functioning router interface.\n     \
    \   They are used to discover and maintain neighbor\n        relationships.[6]\
    \ On multi-access networks, Hello Packets are\n        also used to elect the\
    \ Designated Router and Backup Designated\n        Router, and in that way determine\
    \ what adjacencies should be\n        formed.\n        The format of an Hello\
    \ packet is detailed in Section A.3.2.  The\n        Hello Packet contains the\
    \ router's Router Priority (used in\n        choosing the Designated Router),\
    \ and the interval between Hello\n        Packets sent out the interface (HelloInterval).\
    \  The Hello\n        Packet also indicates how often a neighbor must be heard\
    \ from to\n        remain active (RouterDeadInterval).  Both HelloInterval and\n\
    \        RouterDeadInterval must be the same for all routers attached to\n   \
    \     a common network.  The Hello packet also contains the IP address\n     \
    \   mask of the attached network (Network Mask).  On unnumbered\n        point-to-point\
    \ networks and on virtual links this field should\n        be set to 0.0.0.0.\n\
    \        The Hello packet's Options field describes the router's optional\n  \
    \      OSPF capabilities.  There are currently two optional\n        capabilities\
    \ defined (see Sections 4.5 and A.2).  The T-bit of\n        the Options field\
    \ should be set if the router is capable of\n        calculating separate routes\
    \ for each IP TOS.  The E-bit should\n        be set if and only if the attached\
    \ area is capable of processing\n        AS external advertisements (i.e., it\
    \ is not a stub area).  If\n        the E-bit is set incorrectly the neighboring\
    \ routers will refuse\n        to accept the Hello Packet (see Section 10.5).\
    \  The rest of the\n        Hello Packet's Options field should be set to zero.\n\
    \        In order to ensure two-way communication between adjacent\n        routers,\
    \ the Hello packet contains the list of all routers from\n        which Hello\
    \ Packets have been seen recently.  The Hello packet\n        also contains the\
    \ router's current choice for Designated Router\n        and Backup Designated\
    \ Router.  A value of 0.0.0.0 in these\n        fields means that one has not\
    \ yet been selected.\n        On broadcast networks and physical point-to-point\
    \ networks,\n        Hello packets are sent every HelloInterval seconds to the\
    \ IP\n        multicast address AllSPFRouters.  On virtual links, Hello\n    \
    \    packets are sent as unicasts (addressed directly to the other\n        end\
    \ of the virtual link) every HelloInterval seconds.  On non-\n        broadcast\
    \ networks, the sending of Hello packets is more\n        complicated.  This will\
    \ be covered in the next section.\n        9.5.1.  Sending Hello packets on non-broadcast\
    \ networks\n            Static configuration information is necessary in order\
    \ for\n            the Hello Protocol to function on non-broadcast networks\n\
    \            (see Section C.5).  Every attached router which is eligible\n   \
    \         to become Designated Router has a configured list of all of\n      \
    \      its neighbors on the network.  Each listed neighbor is\n            labelled\
    \ with its Designated Router eligibility.\n            The interface state must\
    \ be at least Waiting for any Hello\n            Packets to be sent.  Hello Packets\
    \ are then sent directly\n            (as unicasts) to some subset of a router's\
    \ neighbors.\n            Sometimes an Hello Packet is sent periodically on a\
    \ timer;\n            at other times it is sent as a response to a received Hello\n\
    \            Packet.  A router's hello-sending behavior varies depending\n   \
    \         on whether the router itself is eligible to become\n            Designated\
    \ Router.\n            If the router is eligible to become Designated Router,\
    \ it\n            must periodically send Hello Packets to all neighbors that\n\
    \            are also eligible.  In addition, if the router is itself the\n  \
    \          Designated Router or Backup Designated Router, it must also\n     \
    \       send periodic Hello Packets to all other neighbors.  This\n          \
    \  means that any two eligible routers are always exchanging\n            Hello\
    \ Packets, which is necessary for the correct operation\n            of the Designated\
    \ Router election algorithm.  To minimize\n            the number of Hello Packets\
    \ sent, the number of eligible\n            routers on a non-broadcast network\
    \ should be kept small.\n            If the router is not eligible to become Designated\
    \ Router,\n            it must periodically send Hello Packets to both the\n \
    \           Designated Router and the Backup Designated Router (if they\n    \
    \        exist).  It must also send an Hello Packet in reply to an\n         \
    \   Hello Packet received from any eligible neighbor (other than\n           \
    \ the current Designated Router and Backup Designated Router).\n            This\
    \ is needed to establish an initial bidirectional\n            relationship with\
    \ any potential Designated Router.\n            When sending Hello packets periodically\
    \ to any neighbor, the\n            interval between Hello Packets is determined\
    \ by the\n            neighbor's state.  If the neighbor is in state Down, Hello\n\
    \            Packets are sent every PollInterval seconds.  Otherwise,\n      \
    \      Hello Packets are sent every HelloInterval seconds.\n"
- title: 10.  The Neighbor Data Structure
  contents:
  - "10.  The Neighbor Data Structure\n    An OSPF router converses with its neighboring\
    \ routers.  Each\n    separate conversation is described by a \"neighbor data\
    \ structure\".\n    Each conversation is bound to a particular OSPF router interface,\n\
    \    and is identified either by the neighboring router's OSPF Router ID\n   \
    \ or by its Neighbor IP address (see below).  Thus if the OSPF router\n    and\
    \ another router have multiple attached networks in common,\n    multiple conversations\
    \ ensue, each described by a unique neighbor\n    data structure.  Each separate\
    \ conversation is loosely referred to\n    in the text as being a separate \"\
    neighbor\".\n    The neighbor data structure contains all information pertinent\
    \ to\n    the forming or formed adjacency between the two neighbors.\n    (However,\
    \ remember that not all neighbors become adjacent.)  An\n    adjacency can be\
    \ viewed as a highly developed conversation between\n    two routers.\n    State\n\
    \        The functional level of the neighbor conversation.  This is\n       \
    \ described in more detail in Section 10.1.\n    Inactivity Timer\n        A single\
    \ shot timer whose firing indicates that no Hello Packet\n        has been seen\
    \ from this neighbor recently.  The length of the\n        timer is RouterDeadInterval\
    \ seconds.\n    Master/Slave\n        When the two neighbors are exchanging databases,\
    \ they form a\n        master/slave relationship.  The master sends the first\
    \ Database\n        Description Packet, and is the only part that is allowed to\n\
    \        retransmit.  The slave can only respond to the master's Database\n  \
    \      Description Packets.  The master/slave relationship is\n        negotiated\
    \ in state ExStart.\n    DD Sequence Number\n        A 32-bit number identifying\
    \ individual Database Description\n        packets.  When the neighbor state ExStart\
    \ is entered, the DD\n        sequence number should be set to a value not previously\
    \ seen by\n        the neighboring router.  One possible scheme is to use the\n\
    \        machine's time of day counter.  The DD sequence number is then\n    \
    \    incremented by the master with each new Database Description\n        packet\
    \ sent.  The slave's DD sequence number indicates the last\n        packet received\
    \ from the master.  Only one packet is allowed\n        outstanding at a time.\n\
    \    Neighbor ID\n        The OSPF Router ID of the neighboring router.  The Neighbor\
    \ ID\n        is learned when Hello packets are received from the neighbor, or\n\
    \        is configured if this is a virtual adjacency (see Section C.4).\n   \
    \ Neighbor Priority\n        The Router Priority of the neighboring router.  Contained\
    \ in the\n        neighbor's Hello packets, this item is used when selecting the\n\
    \        Designated Router for the attached network.\n    Neighbor IP address\n\
    \        The IP address of the neighboring router's interface to the\n       \
    \ attached network.  Used as the Destination IP address when\n        protocol\
    \ packets are sent as unicasts along this adjacency.\n        Also used in router\
    \ links advertisements as the Link ID for the\n        attached network if the\
    \ neighboring router is selected to be\n        Designated Router (see Section\
    \ 12.4.1).  The Neighbor IP address\n        is learned when Hello packets are\
    \ received from the neighbor.\n        For virtual links, the Neighbor IP address\
    \ is learned during the\n        routing table build process (see Section 15).\n\
    \    Neighbor Options\n        The optional OSPF capabilities supported by the\
    \ neighbor.\n        Learned during the Database Exchange process (see Section\
    \ 10.6).\n        The neighbor's optional OSPF capabilities are also listed in\
    \ its\n        Hello packets.  This enables received Hello Packets to be\n   \
    \     rejected (i.e., neighbor relationships will not even start to\n        form)\
    \ if there is a mismatch in certain crucial OSPF\n        capabilities (see Section\
    \ 10.5).  The optional OSPF capabilities\n        are documented in Section 4.5.\n\
    \    Neighbor's Designated Router\n        The neighbor's idea of the Designated\
    \ Router.  If this is the\n        neighbor itself, this is important in the local\
    \ calculation of\n        the Designated Router.  Defined only on multi-access\
    \ networks.\n    Neighbor's Backup Designated Router\n        The neighbor's idea\
    \ of the Backup Designated Router.  If this is\n        the neighbor itself, this\
    \ is important in the local calculation\n        of the Backup Designated Router.\
    \  Defined only on multi-access\n        networks.\n    The next set of variables\
    \ are lists of link state advertisements.\n    These lists describe subsets of\
    \ the area topological database.\n    There can be five distinct types of link\
    \ state advertisements in an\n    area topological database: router links, network\
    \ links, and Type 3\n    and 4 summary links (all stored in the area data structure),\
    \ and AS\n    external links (stored in the global data structure).\n    Link\
    \ state retransmission list\n        The list of link state advertisements that\
    \ have been flooded but\n        not acknowledged on this adjacency.  These will\
    \ be retransmitted\n        at intervals until they are acknowledged, or until\
    \ the adjacency\n        is destroyed.\n    Database summary list\n        The\
    \ complete list of link state advertisements that make up the\n        area topological\
    \ database, at the moment the neighbor goes into\n        Database Exchange state.\
    \  This list is sent to the neighbor in\n        Database Description packets.\n\
    \    Link state request list\n        The list of link state advertisements that\
    \ need to be received\n        from this neighbor in order to synchronize the\
    \ two neighbors'\n        topological databases.  This list is created as Database\n\
    \        Description packets are received, and is then sent to the\n        neighbor\
    \ in Link State Request packets.  The list is depleted as\n        appropriate\
    \ Link State Update packets are received.\n    10.1.  Neighbor states\n      \
    \  The state of a neighbor (really, the state of a conversation\n        being\
    \ held with a neighboring router) is documented in the\n        following sections.\
    \  The states are listed in order of\n        progressing functionality.  For\
    \ example, the inoperative state\n        is listed first, followed by a list\
    \ of intermediate states\n        before the final, fully functional state is\
    \ achieved.  The\n        specification makes use of this ordering by sometimes\
    \ making\n        references such as \"those neighbors/adjacencies in state greater\n\
    \        than X\".  Figures 12 and 13 show the graph of neighbor state\n     \
    \   changes.  The arcs of the graphs are labelled with the event\n        causing\
    \ the state change.  The neighbor events are documented in\n        Section 10.2.\n\
    \        The graph in Figure 12 shows the state changes effected by the\n    \
    \    Hello Protocol.  The Hello Protocol is responsible for neighbor\n       \
    \                            +----+\n                                   |Down|\n\
    \                                   +----+\n                                 \
    \    |                               | Start\n                               \
    \      |        +-------+\n                             Hello   |   +---->|Attempt|\n\
    \                            Received |         +-------+\n                  \
    \                   |             |\n                             +----+<-+  \
    \           |HelloReceived\n                             |Init|<---------------+\n\
    \                             +----+<--------+\n                             \
    \   |           |\n                                |2-Way      |1-Way\n      \
    \                          |Received   |Received\n                           \
    \     |           |\n              +-------+         |        +-----+\n      \
    \        |ExStart|<--------+------->|2-Way|\n              +-------+         \
    \         +-----+\n              Figure 12: Neighbor state changes (Hello Protocol)\n\
    \                  In addition to the state transitions pictured,\n          \
    \        Event KillNbr always forces Down State,\n                  Event InactivityTimer\
    \ always forces Down State,\n                  Event LLDown always forces Down\
    \ State\n        acquisition and maintenance, and for ensuring two way\n     \
    \   communication between neighbors.\n        The graph in Figure 13 shows the\
    \ forming of an adjacency.  Not\n        every two neighboring routers become\
    \ adjacent (see Section\n        10.4).  The adjacency starts to form when the\
    \ neighbor is in\n        state ExStart.  After the two routers discover their\n\
    \        master/slave status, the state transitions to Exchange.  At this\n  \
    \      point the neighbor starts to be used in the flooding procedure,\n     \
    \   and the two neighboring routers begin synchronizing their\n        databases.\
    \  When this synchronization is finished, the neighbor\n        is in state Full\
    \ and we say that the two routers are fully\n        adjacent.  At this point\
    \ the adjacency is listed in link state\n        advertisements.\n        For\
    \ a more detailed description of neighbor state changes,\n        together with\
    \ the additional actions involved in each change,\n        see Section 10.3.\n\
    \                                  +-------+\n                               \
    \   |ExStart|\n                                  +-------+\n                 \
    \                   |\n                     NegotiationDone|\n               \
    \                     +->+--------+\n                                       |Exchange|\n\
    \                                    +--+--------+\n                         \
    \           |\n                            Exchange|\n                       \
    \       Done  |\n                    +----+          |      +-------+\n      \
    \              |Full|<---------+----->|Loading|\n                    +----+<-+\
    \              +-------+\n                            |  LoadingDone     |\n \
    \                           +------------------+\n            Figure 13: Neighbor\
    \ state changes (Database Exchange)\n                In addition to the state\
    \ transitions pictured,\n                Event SeqNumberMismatch forces ExStart\
    \ state,\n                Event BadLSReq forces ExStart state,\n             \
    \   Event 1-Way forces Init state,\n                Event KillNbr always forces\
    \ Down State,\n                Event InactivityTimer always forces Down State,\n\
    \                Event LLDown always forces Down State,\n                Event\
    \ AdjOK? leads to adjacency forming/breaking\n        Down\n            This is\
    \ the initial state of a neighbor conversation.  It\n            indicates that\
    \ there has been no recent information received\n            from the neighbor.\
    \  On non-broadcast networks, Hello packets\n            may still be sent to\
    \ \"Down\" neighbors, although at a reduced\n            frequency (see Section\
    \ 9.5.1).\n        Attempt\n            This state is only valid for neighbors\
    \ attached to non-\n            broadcast networks.  It indicates that no recent\
    \ information\n            has been received from the neighbor, but that a more\n\
    \            concerted effort should be made to contact the neighbor.\n      \
    \      This is done by sending the neighbor Hello packets at\n            intervals\
    \ of HelloInterval (see Section 9.5.1).\n        Init\n            In this state,\
    \ an Hello packet has recently been seen from\n            the neighbor.  However,\
    \ bidirectional communication has not\n            yet been established with the\
    \ neighbor (i.e., the router\n            itself did not appear in the neighbor's\
    \ Hello packet).  All\n            neighbors in this state (or higher) are listed\
    \ in the Hello\n            packets sent from the associated interface.\n    \
    \    2-Way\n            In this state, communication between the two routers is\n\
    \            bidirectional.  This has been assured by the operation of\n     \
    \       the Hello Protocol.  This is the most advanced state short\n         \
    \   of beginning adjacency establishment.  The (Backup)\n            Designated\
    \ Router is selected from the set of neighbors in\n            state 2-Way or\
    \ greater.\n        ExStart\n            This is the first step in creating an\
    \ adjacency between the\n            two neighboring routers.  The goal of this\
    \ step is to decide\n            which router is the master, and to decide upon\
    \ the initial\n            DD sequence number.  Neighbor conversations in this\
    \ state or\n            greater are called adjacencies.\n        Exchange\n  \
    \          In this state the router is describing its entire link state\n    \
    \        database by sending Database Description packets to the\n           \
    \ neighbor.  Each Database Description Packet has a DD\n            sequence number,\
    \ and is explicitly acknowledged.  Only one\n            Database Description\
    \ Packet is allowed outstanding at any\n            one time.  In this state,\
    \ Link State Request Packets may\n            also be sent asking for the neighbor's\
    \ more recent\n            advertisements.  All adjacencies in Exchange state\
    \ or\n            greater are used by the flooding procedure.  In fact, these\n\
    \            adjacencies are fully capable of transmitting and receiving\n   \
    \         all types of OSPF routing protocol packets.\n        Loading\n     \
    \       In this state, Link State Request packets are sent to the\n          \
    \  neighbor asking for the more recent advertisements that have\n            been\
    \ discovered (but not yet received) in the Exchange\n            state.\n    \
    \    Full\n            In this state, the neighboring routers are fully adjacent.\n\
    \            These adjacencies will now appear in router links and\n         \
    \   network links advertisements.\n    10.2.  Events causing neighbor state changes\n\
    \        State changes can be effected by a number of events.  These\n       \
    \ events are shown in the labels of the arcs in Figures 12 and 13.\n        The\
    \ label definitions are as follows:\n        HelloReceived\n            A Hello\
    \ packet has been received from a neighbor.\n        Start\n            This is\
    \ an indication that Hello Packets should now be sent\n            to the neighbor\
    \ at intervals of HelloInterval seconds.  This\n            event is generated\
    \ only for neighbors associated with non-\n            broadcast networks.\n \
    \       2-WayReceived\n            Bidirectional communication has been realized\
    \ between the\n            two neighboring routers.  This is indicated by this\
    \ router\n            seeing itself in the other's Hello packet.\n        NegotiationDone\n\
    \            The Master/Slave relationship has been negotiated, and DD\n     \
    \       sequence numbers have been exchanged.  This signals the\n            start\
    \ of the sending/receiving of Database Description\n            packets.  For\
    \ more information on the generation of this\n            event, consult Section\
    \ 10.8.\n        ExchangeDone\n            Both routers have successfully transmitted\
    \ a full sequence\n            of Database Description packets.  Each router now\
    \ knows what\n            parts of its link state database are out of date.  For\
    \ more\n            information on the generation of this event, consult Section\n\
    \            10.8.\n        BadLSReq\n            A Link State Request has been\
    \ received for a link state\n            advertisement not contained in the database.\
    \  This indicates\n            an error in the Database Exchange process.\n  \
    \      Loading Done\n            Link State Updates have been received for all\
    \ out-of-date\n            portions of the database.  This is indicated by the\
    \ Link\n            state request list becoming empty after the Database\n   \
    \         Exchange process has completed.\n        AdjOK?\n            A decision\
    \ must be made (again) as to whether an adjacency\n            should be established/maintained\
    \ with the neighbor.  This\n            event will start some adjacencies forming,\
    \ and destroy\n            others.\n        The following events cause well developed\
    \ neighbors to revert to\n        lesser states.  Unlike the above events, these\
    \ events may occur\n        when the neighbor conversation is in any of a number\
    \ of states.\n        SeqNumberMismatch\n            A Database Description packet\
    \ has been received that either\n            a) has an unexpected DD sequence\
    \ number, b) unexpectedly has\n            the Init bit set or c) has an Options\
    \ field differing from\n            the last Options field received in a Database\
    \ Description\n            packet.  Any of these conditions indicate that some\
    \ error\n            has occurred during adjacency establishment.\n        1-Way\n\
    \            An Hello packet has been received from the neighbor, in\n       \
    \     which this router is not mentioned.  This indicates that\n            communication\
    \ with the neighbor is not bidirectional.\n        KillNbr\n            This \
    \ is  an  indication that  all  communication  with  the\n            neighbor\
    \  is now  impossible,  forcing  the  neighbor  to\n            revert  to  Down\
    \  state.\n        InactivityTimer\n            The inactivity Timer has fired.\
    \  This means that no Hello\n            packets have been seen recently from\
    \ the neighbor.  The\n            neighbor reverts to Down state.\n        LLDown\n\
    \            This is an indication from the lower level protocols that\n     \
    \       the neighbor is now unreachable.  For example, on an X.25\n          \
    \  network this could be indicated by an X.25 clear indication\n            with\
    \ appropriate cause and diagnostic fields.  This event\n            forces the\
    \ neighbor into Down state.\n    10.3.  The Neighbor state machine\n        A\
    \ detailed description of the neighbor state changes follows.\n        Each state\
    \ change is invoked by an event (Section 10.2).  This\n        event may produce\
    \ different effects, depending on the current\n        state of the neighbor.\
    \  For this reason, the state machine below\n        is organized by current neighbor\
    \ state and received event.  Each\n        entry in the state machine describes\
    \ the resulting new neighbor\n        state and the required set of additional\
    \ actions.\n        When a neighbor's state changes, it may be necessary to rerun\n\
    \        the Designated Router election algorithm.  This is determined by\n  \
    \      whether the interface NeighborChange event is generated (see\n        Section\
    \ 9.2).  Also, if the Interface is in DR state (the router\n        is itself\
    \ Designated Router), changes in neighbor state may\n        cause a new network\
    \ links advertisement to be originated (see\n        Section 12.4).\n        When\
    \ the neighbor state machine needs to invoke the interface\n        state machine,\
    \ it should be done as a scheduled task (see\n        Section 4.4).  This simplifies\
    \ things, by ensuring that neither\n        state machine will be executed recursively.\n\
    \         State(s):  Down\n            Event:  Start\n        New state:  Attempt\n\
    \           Action:  Send an Hello Packet to the neighbor (this neighbor\n   \
    \                 is always associated with a non-broadcast network)\n       \
    \             and start the Inactivity Timer for the neighbor.\n             \
    \       The timer's later firing would indicate that\n                    communication\
    \ with the neighbor was not attained.\n         State(s):  Attempt\n         \
    \   Event:  HelloReceived\n        New state:  Init\n           Action:  Restart\
    \ the Inactivity Timer for the neighbor, since\n                    the neighbor\
    \ has now been heard from.\n         State(s):  Down\n            Event:  HelloReceived\n\
    \        New state:  Init\n           Action:  Start the Inactivity Timer for\
    \ the neighbor.  The\n                    timer's later firing would indicate\
    \ that the\n                    neighbor is dead.\n         State(s):  Init or\
    \ greater\n            Event:  HelloReceived\n        New state:  No state change.\n\
    \           Action:  Restart the Inactivity Timer for the neighbor, since\n  \
    \                  the neighbor has again been heard from.\n         State(s):\
    \  Init\n            Event:  2-WayReceived\n        New state:  Depends upon action\
    \ routine.\n           Action:  Determine whether an adjacency should be established\n\
    \                    with the neighbor (see Section 10.4).  If not, the\n    \
    \                new neighbor state is 2-Way.\n                    Otherwise (an\
    \ adjacency should be established) the\n                    neighbor state transitions\
    \ to ExStart.  Upon\n                    entering this state, the router increments\
    \ the DD\n                    sequence number for this neighbor.  If this is the\n\
    \                    first time that an adjacency has been attempted, the\n  \
    \                  DD sequence number should be assigned some unique\n       \
    \             value (like the time of day clock).  It then\n                 \
    \   declares itself master (sets the master/slave bit to\n                   \
    \ master), and starts sending Database Description\n                    Packets,\
    \ with the initialize (I), more (M) and\n                    master (MS) bits\
    \ set.  This Database Description\n                    Packet should be otherwise\
    \ empty.  This Database\n                    Description Packet should be retransmitted\
    \ at\n                    intervals of RxmtInterval until the next state is\n\
    \                    entered (see Section 10.8).\n         State(s):  ExStart\n\
    \            Event:  NegotiationDone\n        New state:  Exchange\n         \
    \  Action:  The router must list the contents of its entire area\n           \
    \         link state database in the neighbor Database summary\n             \
    \       list.  The area link state database consists of the\n                \
    \    router links, network links and summary links\n                    contained\
    \ in the area structure, along with the AS\n                    external links\
    \ contained in the global structure.\n                    AS external link advertisements\
    \ are omitted from a\n                    virtual neighbor's Database summary\
    \ list.  AS\n                    external advertisements are omitted from the\n\
    \                    Database summary list if the area has been\n            \
    \        configured as a stub (see Section 3.6).\n                    Advertisements\
    \ whose age is equal to MaxAge are\n                    instead added to the neighbor's\
    \ Link state\n                    retransmission list.  A summary of the Database\n\
    \                    summary list will be sent to the neighbor in\n          \
    \          Database Description packets.  Each Database\n                    Description\
    \ Packet has a DD sequence number, and is\n                    explicitly acknowledged.\
    \  Only one Database\n                    Description Packet is allowed outstanding\
    \ at any one\n                    time.  For more detail on the sending and receiving\n\
    \                    of Database Description packets, see Sections 10.8\n    \
    \                and 10.6.\n         State(s):  Exchange\n            Event: \
    \ ExchangeDone\n        New state:  Depends upon action routine.\n           Action:\
    \  If the neighbor Link state request list is empty,\n                    the\
    \ new neighbor state is Full.  No other action is\n                    required.\
    \  This is an adjacency's final state.\n                    Otherwise, the new\
    \ neighbor state is Loading.  Start\n                    (or continue) sending\
    \ Link State Request packets to\n                    the neighbor (see Section\
    \ 10.9).  These are requests\n                    for the neighbor's more recent\
    \ advertisements (which\n                    were discovered but not yet received\
    \ in the Exchange\n                    state).  These advertisements are listed\
    \ in the Link\n                    state request list associated with the neighbor.\n\
    \         State(s):  Loading\n            Event:  Loading Done\n        New state:\
    \  Full\n           Action:  No action required.  This is an adjacency's final\n\
    \                    state.\n         State(s):  2-Way\n            Event:  AdjOK?\n\
    \        New state:  Depends upon action routine.\n           Action:  Determine\
    \ whether an adjacency should be formed with\n                    the neighboring\
    \ router (see Section 10.4).  If not,\n                    the neighbor state\
    \ remains at 2-Way.  Otherwise,\n                    transition the neighbor state\
    \ to ExStart and perform\n                    the actions associated with the\
    \ above state machine\n                    entry for state Init and event 2-WayReceived.\n\
    \         State(s):  ExStart or greater\n            Event:  AdjOK?\n        New\
    \ state:  Depends upon action routine.\n           Action:  Determine whether\
    \ the neighboring router should\n                    still be adjacent.  If yes,\
    \ there is no state change\n                    and no further action is necessary.\n\
    \                    Otherwise, the (possibly partially formed) adjacency\n  \
    \                  must be destroyed.  The neighbor state transitions\n      \
    \              to 2-Way.  The Link state retransmission list,\n              \
    \      Database summary list and Link state request list\n                   \
    \ are cleared of link state advertisements.\n         State(s):  Exchange or greater\n\
    \            Event:  SeqNumberMismatch\n        New state:  ExStart\n        \
    \   Action:  The (possibly partially formed) adjacency is torn\n             \
    \       down, and then an attempt is made at\n                    reestablishment.\
    \  The neighbor state first\n                    transitions to ExStart.  The\
    \ Link state\n                    retransmission list, Database summary list and\
    \ Link\n                    state request list are cleared of link state\n   \
    \                 advertisements.  Then the router increments the DD\n       \
    \             sequence number for this neighbor, declares itself\n           \
    \         master (sets the master/slave bit to master), and\n                \
    \    starts sending Database Description Packets, with\n                    the\
    \ initialize (I), more (M) and master (MS) bits\n                    set.  This\
    \ Database Description Packet should be\n                    otherwise empty (see\
    \ Section 10.8).\n         State(s):  Exchange or greater\n            Event:\
    \  BadLSReq\n        New state:  ExStart\n           Action:  The action for event\
    \ BadLSReq is exactly the same as\n                    for the neighbor event\
    \ SeqNumberMismatch.  The\n                    (possibly partially formed) adjacency\
    \ is torn down,\n                    and then an attempt is made at reestablishment.\
    \  For\n                    more information, see the neighbor state machine\n\
    \                    entry that is invoked when event SeqNumberMismatch\n    \
    \                is generated in state Exchange or greater.\n         State(s):\
    \  Any state\n            Event:  KillNbr\n        New state:  Down\n        \
    \   Action:  The Link state retransmission list, Database summary\n          \
    \          list and Link state request list are cleared of link\n            \
    \        state advertisements.  Also, the Inactivity Timer is\n              \
    \      disabled.\n         State(s):  Any state\n            Event:  LLDown\n\
    \        New state:  Down\n           Action:  The Link state retransmission list,\
    \ Database summary\n                    list and Link state request list are cleared\
    \ of link\n                    state advertisements.  Also, the Inactivity Timer\
    \ is\n                    disabled.\n         State(s):  Any state\n         \
    \   Event:  InactivityTimer\n        New state:  Down\n           Action:  The\
    \ Link state retransmission list, Database summary\n                    list and\
    \ Link state request list are cleared of link\n                    state advertisements.\n\
    \         State(s):  2-Way or greater\n            Event:  1-WayReceived\n   \
    \     New state:  Init\n           Action:  The Link state retransmission list,\
    \ Database summary\n                    list and Link state request list are cleared\
    \ of link\n                    state advertisements.\n         State(s):  2-Way\
    \ or greater\n            Event:  2-WayReceived\n        New state:  No state\
    \ change.\n           Action:  No action required.\n         State(s):  Init\n\
    \            Event:  1-WayReceived\n        New state:  No state change.\n   \
    \        Action:  No action required.\n    10.4.  Whether to become adjacent\n\
    \        Adjacencies are established with some subset of the router's\n      \
    \  neighbors.  Routers connected by point-to-point networks and\n        virtual\
    \ links always become adjacent.  On multi-access networks,\n        all routers\
    \ become adjacent to both the Designated Router and\n        the Backup Designated\
    \ Router.\n        The adjacency-forming decision occurs in two places in the\n\
    \        neighbor state machine.  First, when bidirectional communication\n  \
    \      is initially established with the neighbor, and secondly, when\n      \
    \  the identity of the attached network's (Backup) Designated\n        Router\
    \ changes.  If the decision is made to not attempt an\n        adjacency, the\
    \ state of the neighbor communication stops at 2-\n        Way.\n        An adjacency\
    \ should be established with a bidirectional neighbor\n        when at least one\
    \ of the following conditions holds:\n        o   The underlying network type\
    \ is point-to-point\n        o   The underlying network type is virtual link\n\
    \        o   The router itself is the Designated Router\n        o   The router\
    \ itself is the Backup Designated Router\n        o   The neighboring router is\
    \ the Designated Router\n        o   The neighboring router is the Backup Designated\
    \ Router\n    10.5.  Receiving Hello Packets\n        This section explains the\
    \ detailed processing of a received\n        Hello Packet.  (See Section A.3.2\
    \ for the format of Hello\n        packets.)  The generic input processing of\
    \ OSPF packets will\n        have checked the validity of the IP header and the\
    \ OSPF packet\n        header.  Next, the values of the Network Mask, HelloInterval,\n\
    \        and RouterDeadInterval fields in the received Hello packet must\n   \
    \     be checked against the values configured for the receiving\n        interface.\
    \  Any mismatch causes processing to stop and the\n        packet to be dropped.\
    \  In other words, the above fields are\n        really describing the attached\
    \ network's configuration. However,\n        there is one exception to the above\
    \ rule: on point-to-point\n        networks and on virtual links, the Network\
    \ Mask in the received\n        Hello Packet should be ignored.\n        The receiving\
    \ interface attaches to a single OSPF area (this\n        could be the backbone).\
    \  The setting of the E-bit found in the\n        Hello Packet's Options field\
    \ must match this area's\n        ExternalRoutingCapability.  If AS external advertisements\
    \ are\n        not flooded into/throughout the area (i.e, the area is a \"stub\"\
    )\n        the E-bit must be clear in received Hello Packets, otherwise the\n\
    \        E-bit must be set.  A mismatch causes processing to stop and the\n  \
    \      packet to be dropped.  The setting of the rest of the bits in\n       \
    \ the Hello Packet's Options field should be ignored.\n        At this point,\
    \ an attempt is made to match the source of the\n        Hello Packet to one of\
    \ the receiving interface's neighbors.  If\n        the receiving interface is\
    \ a multi-access network (either\n        broadcast or non-broadcast) the source\
    \ is identified by the IP\n        source address found in the Hello's IP header.\
    \  If the receiving\n        interface is a point-to-point link or a virtual link,\
    \ the source\n        is identified by the Router ID found in the Hello's OSPF\
    \ packet\n        header.  The interface's current list of neighbors is contained\n\
    \        in the interface's data structure.  If a matching neighbor\n        structure\
    \ cannot be found, (i.e., this is the first time the\n        neighbor has been\
    \ detected), one is created.  The initial state\n        of a newly created neighbor\
    \ is set to Down.\n        When receiving an Hello Packet from a neighbor on a\
    \ multi-access\n        network (broadcast or non-broadcast), set the neighbor\n\
    \        structure's Neighbor ID equal to the Router ID found in the\n       \
    \ packet's OSPF header.  When receiving an Hello on a point-to-\n        point\
    \ network (but not on a virtual link) set the neighbor\n        structure's Neighbor\
    \ IP address to the packet's IP source\n        address.\n        Now the rest\
    \ of the Hello Packet is examined, generating events\n        to be given to the\
    \ neighbor and interface state machines.  These\n        state machines are specified\
    \ either to be executed or scheduled\n        (see Section 4.4).  For example,\
    \ by specifying below that the\n        neighbor state machine be executed in\
    \ line, several neighbor\n        state transitions may be effected by a single\
    \ received Hello:\n        o   Each Hello Packet causes the neighbor state machine\
    \ to be\n            executed with the event HelloReceived.\n        o   Then\
    \ the list of neighbors contained in the Hello Packet is\n            examined.\
    \  If the router itself appears in this list, the\n            neighbor state\
    \ machine should be executed with the event 2-\n            WayReceived.  Otherwise,\
    \ the neighbor state machine should\n            be executed with the event 1-WayReceived,\
    \ and the processing\n            of the packet stops.\n        o   Next, the\
    \ Hello Packet's Router Priority field is examined.\n            If this field\
    \ is different than the one previously received\n            from the neighbor,\
    \ the receiving interface's state machine\n            is scheduled with the event\
    \ NeighborChange.  In any case,\n            the Router Priority field in the\
    \ neighbor data structure\n            should be updated accordingly.\n      \
    \  o   Next the Designated Router field in the Hello Packet is\n            examined.\
    \  If the neighbor is both declaring itself to be\n            Designated Router\
    \ (Designated Router field = Neighbor IP\n            address) and the Backup\
    \ Designated Router field in the\n            packet is equal to 0.0.0.0 and the\
    \ receiving interface is in\n            state Waiting, the receiving interface's\
    \ state machine is\n            scheduled with the event BackupSeen.  Otherwise,\
    \ if the\n            neighbor is declaring itself to be Designated Router and\
    \ it\n            had not previously, or the neighbor is not declaring itself\n\
    \            Designated Router where it had previously, the receiving\n      \
    \      interface's state machine is scheduled with the event\n            NeighborChange.\
    \  In any case, the Neighbors' Designated\n            Router item in the neighbor\
    \ structure is updated\n            accordingly.\n        o   Finally, the Backup\
    \ Designated Router field in the Hello\n            Packet is examined.  If the\
    \ neighbor is declaring itself to\n            be Backup Designated Router (Backup\
    \ Designated Router field\n            = Neighbor IP address) and the receiving\
    \ interface is in\n            state Waiting, the receiving interface's state\
    \ machine is\n            scheduled with the event BackupSeen.  Otherwise, if\
    \ the\n            neighbor is declaring itself to be Backup Designated Router\n\
    \            and it had not previously, or the neighbor is not declaring\n   \
    \         itself Backup Designated Router where it had previously, the\n     \
    \       receiving interface's state machine is scheduled with the\n          \
    \  event NeighborChange.  In any case, the Neighbor's Backup\n            Designated\
    \ Router item in the neighbor structure is updated\n            accordingly.\n\
    \        On non-broadcast multi-access networks, receipt of an Hello\n       \
    \ Packet may also cause an Hello Packet to be sent back to the\n        neighbor\
    \ in response. See Section 9.5.1 for more details.\n    10.6.  Receiving Database\
    \ Description Packets\n        This section explains the detailed processing of\
    \ a received\n        Database Description Packet.  The incoming Database Description\n\
    \        Packet has already been associated with a neighbor and receiving\n  \
    \      interface by the generic input packet processing (Section 8.2).\n     \
    \   The further processing of the Database Description Packet\n        depends\
    \ on the neighbor state.  If the neighbor's state is Down\n        or Attempt\
    \ the packet should be ignored.  Otherwise, if the\n        state is:\n      \
    \  Init\n            The neighbor state machine should be executed with the event\n\
    \            2-WayReceived.  This causes an immediate state change to\n      \
    \      either state 2-Way or state ExStart. If the new state is\n            ExStart,\
    \ the processing of the current packet should then\n            continue in this\
    \ new state by falling through to case\n            ExStart below.\n        2-Way\n\
    \            The packet should be ignored.  Database Description Packets\n   \
    \         are used only for the purpose of bringing up adjacencies.[7]\n     \
    \   ExStart\n            If the received packet matches one of the following cases,\n\
    \            then the neighbor state machine should be executed with the\n   \
    \         event NegotiationDone (causing the state to transition to\n        \
    \    Exchange), the packet's Options field should be recorded in\n           \
    \ the neighbor structure's Neighbor Options field and the\n            packet\
    \ should be accepted as next in sequence and processed\n            further (see\
    \ below).  Otherwise, the packet should be\n            ignored.\n           \
    \ o   The initialize(I), more (M) and master(MS) bits are set,\n             \
    \   the contents of the packet are empty, and the neighbor's\n               \
    \ Router ID is larger than the router's own.  In this case\n                the\
    \ router is now Slave.  Set the master/slave bit to\n                slave, and\
    \ set the DD sequence number to that specified\n                by the master.\n\
    \            o   The initialize(I) and master(MS) bits are off, the\n        \
    \        packet's DD sequence number equals the router's own DD\n            \
    \    sequence number (indicating acknowledgment) and the\n                neighbor's\
    \ Router ID is smaller than the router's own.\n                In this case the\
    \ router is Master.\n        Exchange\n            If the state of the MS-bit\
    \ is inconsistent with the\n            master/slave state of the connection,\
    \ generate the neighbor\n            event SeqNumberMismatch and stop processing\
    \ the packet.\n            Otherwise:\n            o   If the initialize(I) bit\
    \ is set, generate the neighbor\n                event SeqNumberMismatch and stop\
    \ processing the packet.\n            o   If the packet's Options field indicates\
    \ a different set\n                of optional OSPF capabilities than were previously\n\
    \                received from the neighbor (recorded in the Neighbor\n      \
    \          Options field of the neighbor structure), generate the\n          \
    \      neighbor event SeqNumberMismatch and stop processing the\n            \
    \    packet.\n            o   If the router is master, and the packet's DD sequence\n\
    \                number equals the router's own DD sequence number (this\n   \
    \             packet is the next in sequence) the packet should be\n         \
    \       accepted and its contents processed (below).\n            o   If the router\
    \ is master, and the packet's DD sequence\n                number is one less\
    \ than the router's DD sequence number,\n                the packet is a duplicate.\
    \  Duplicates should be\n                discarded by the master.\n          \
    \  o   If the router is slave, and the packet's DD sequence\n                number\
    \ is one more than the router's own DD sequence\n                number (this\
    \ packet is the next in sequence) the packet\n                should be accepted\
    \ and its contents processed (below).\n            o   If the router is slave,\
    \ and the packet's DD sequence\n                number is equal to the router's\
    \ DD sequence number, the\n                packet is a duplicate.  The slave must\
    \ respond to\n                duplicates by repeating the last Database Description\n\
    \                packet that it had sent.\n            o   Else, generate the\
    \ neighbor event SeqNumberMismatch and\n                stop processing the packet.\n\
    \        Loading or Full\n            In this state, the router has sent and received\
    \ an entire\n            sequence of Database Description Packets.  The only packets\n\
    \            received should be duplicates (see above).  In particular,\n    \
    \        the packet's Options field should match the set of optional\n       \
    \     OSPF capabilities previously indicated by the neighbor\n            (stored\
    \ in the neighbor structure's Neighbor Options field).\n            Any other\
    \ packets received, including the reception of a\n            packet with the\
    \ Initialize(I) bit set, should generate the\n            neighbor event SeqNumberMismatch.[8]\
    \ Duplicates should be\n            discarded by the master.  The slave must respond\
    \ to\n            duplicates by repeating the last Database Description packet\n\
    \            that it had sent.\n        When the router accepts a received Database\
    \ Description Packet\n        as the next in sequence the packet contents are\
    \ processed as\n        follows.  For each link state advertisement listed, the\n\
    \        advertisement's LS type is checked for validity.  If the LS type\n  \
    \      is unknown (e.g., not one of the LS types 1-5 defined by this\n       \
    \ specification), or if this is a AS external advertisement (LS\n        type\
    \ = 5) and the neighbor is associated with a stub area,\n        generate the\
    \ neighbor event SeqNumberMismatch and stop\n        processing the packet.  Otherwise,\
    \ the router looks up the\n        advertisement in its database to see whether\
    \ it also has an\n        instance of the link state advertisement.  If it does\
    \ not, or if\n        the database copy is less recent (see Section 13.1), the\
    \ link\n        state advertisement is put on the Link state request list so\n\
    \        that it can be requested (immediately or at some later time) in\n   \
    \     Link State Request Packets.\n        When the router accepts a received\
    \ Database Description Packet\n        as the next in sequence, it also performs\
    \ the following actions,\n        depending on whether it is master or slave:\n\
    \        Master\n            Increments the DD sequence number.  If the router\
    \ has\n            already sent its entire sequence of Database Description\n\
    \            Packets, and the just accepted packet has the more bit (M)\n    \
    \        set to 0, the neighbor event ExchangeDone is generated.\n           \
    \ Otherwise, it should send a new Database Description to the\n            slave.\n\
    \        Slave\n            Sets the DD sequence number to the DD sequence number\n\
    \            appearing in the received packet.  The slave must send a\n      \
    \      Database Description Packet in reply.  If the received\n            packet\
    \ has the more bit (M) set to 0, and the packet to be\n            sent by the\
    \ slave will also have the M-bit set to 0, the\n            neighbor event ExchangeDone\
    \ is generated.  Note that the\n            slave always generates this event\
    \ before the master.\n    10.7.  Receiving Link State Request Packets\n      \
    \  This section explains the detailed processing of received Link\n        State\
    \ Request packets.  Received Link State Request Packets\n        specify a list\
    \ of link state advertisements that the neighbor\n        wishes to receive. \
    \ Link State Request Packets should be\n        accepted when the neighbor is\
    \ in states Exchange, Loading, or\n        Full.  In all other states Link State\
    \ Request Packets should be\n        ignored.\n        Each link state advertisement\
    \ specified in the Link State\n        Request packet should be located in the\
    \ router's database, and\n        copied into Link State Update packets for transmission\
    \ to the\n        neighbor.  These link state advertisements should NOT be placed\n\
    \        on the Link state retransmission list for the neighbor.  If a\n     \
    \   link state advertisement cannot be found in the database,\n        something\
    \ has gone wrong with the Database Exchange process, and\n        neighbor event\
    \ BadLSReq should be generated.\n    10.8.  Sending Database Description Packets\n\
    \        This section describes how Database Description Packets are sent\n  \
    \      to a neighbor.  The router's optional OSPF capabilities (see\n        Section\
    \ 4.5) are transmitted to the neighbor in the Options\n        field of the Database\
    \ Description packet.  The router should\n        maintain the same set of optional\
    \ capabilities throughout the\n        Database Exchange and flooding procedures.\
    \  If for some reason\n        the router's optional capabilities change, the\
    \ Database Exchange\n        procedure should be restarted by reverting to neighbor\
    \ state\n        ExStart.  There are currently two optional capabilities defined.\n\
    \        The T-bit should be set if and only if the router is capable of\n   \
    \     calculating separate routes for each IP TOS.  The E-bit should\n       \
    \ be set if and only if the attached network belongs to a non-stub\n        area.\
    \  The rest of the Options field should be set to zero.\n        The sending of\
    \ Database Description packets depends on the\n        neighbor's state.  In state\
    \ ExStart the router sends empty\n        Database Description packets, with the\
    \ initialize (I), more (M)\n        and master (MS) bits set.  These packets are\
    \ retransmitted every\n        RxmtInterval seconds.\n        In state Exchange\
    \ the Database Description Packets actually\n        contain summaries of the\
    \ link state information contained in the\n        router's database.  Each link\
    \ state advertisement in the area's\n        topological database (at the time\
    \ the neighbor transitions into\n        Exchange state) is listed in the neighbor\
    \ Database summary list.\n        When a new Database Description Packet is to\
    \ be sent, the\n        packet's DD sequence number is incremented, and the (new)\
    \ top of\n        the Database summary list is described by the packet.  Items\
    \ are\n        removed from the Database summary list when the previous packet\n\
    \        is acknowledged.\n        In state Exchange, the determination of when\
    \ to send a Database\n        Description packet depends on whether the router\
    \ is master or\n        slave:\n        Master\n            Database Description\
    \ packets are sent when either a) the\n            slave acknowledges the previous\
    \ Database Description packet\n            by echoing the DD sequence number or\
    \ b) RxmtInterval seconds\n            elapse without an acknowledgment, in which\
    \ case the previous\n            Database Description packet is retransmitted.\n\
    \        Slave\n            Database Description packets are sent only in response\
    \ to\n            Database Description packets received from the master.  If\n\
    \            the Database Description packet received from the master is\n   \
    \         new, a new Database Description packet is sent, otherwise\n        \
    \    the previous Database Description packet is resent.\n        In states Loading\
    \ and Full the slave must resend its last\n        Database Description packet\
    \ in response to duplicate Database\n        Description packets received from\
    \ the master.  For this reason\n        the slave must wait RouterDeadInterval\
    \ seconds before freeing\n        the last Database Description packet.  Reception\
    \ of a Database\n        Description packet from the master after this interval\
    \ will\n        generate a SeqNumberMismatch neighbor event.\n    10.9.  Sending\
    \ Link State Request Packets\n        In neighbor states Exchange or Loading,\
    \ the Link state request\n        list contains a list of those link state advertisements\
    \ that\n        need to be obtained from the neighbor.  To request these\n   \
    \     advertisements, a router sends the neighbor the beginning of the\n     \
    \   Link state request list, packaged in a Link State Request\n        packet.\n\
    \        When the neighbor responds to these requests with the proper\n      \
    \  Link State Update packet(s), the Link state request list is\n        truncated\
    \ and a new Link State Request packet is sent.  This\n        process continues\
    \ until the Link state request list becomes\n        empty.  Unsatisfied Link\
    \ State Request packets are retransmitted\n        at intervals of RxmtInterval.\
    \  There should be at most one Link\n        State Request packet outstanding\
    \ at any one time.\n        When the Link state request list becomes empty, and\
    \ the neighbor\n        state is Loading (i.e., a complete sequence of Database\n\
    \        Description packets has been sent to and received from the\n        neighbor),\
    \ the Loading Done neighbor event is generated.\n    10.10.  An Example\n    \
    \    Figure 14 shows an example of an adjacency forming.  Routers RT1\n      \
    \  and RT2 are both connected to a broadcast network.  It is\n        assumed\
    \ that RT2 is the Designated Router for the network, and\n        that RT2 has\
    \ a higher Router ID than Router RT1.\n        The neighbor state changes realized\
    \ by each router are listed on\n        the sides of the figure.\n        At the\
    \ beginning of Figure 14, Router RT1's interface to the\n        network becomes\
    \ operational.  It begins sending Hello Packets,\n        although it doesn't\
    \ know the identity of the Designated Router\n        or of any other neighboring\
    \ routers.  Router RT2 hears this\n        hello (moving the neighbor to Init\
    \ state), and in its next Hello\n        Packet indicates that it is itself the\
    \ Designated Router and\n        that it has heard Hello Packets from RT1.  This\
    \ in turn causes\n        RT1 to go to state ExStart, as it starts to bring up\
    \ the\n        adjacency.\n        RT1 begins by asserting itself as the master.\
    \  When it sees that\n        RT2 is indeed the master (because of RT2's higher\
    \ Router ID),\n        RT1 transitions to slave state and adopts its neighbor's\
    \ DD\n        sequence number.  Database Description packets are then\n      \
    \  exchanged, with polls coming from the master (RT2) and responses\n        from\
    \ the slave (RT1).  This sequence of Database Description\n        Packets ends\
    \ when both the poll and associated response has the\n        M-bit off.\n   \
    \     In this example, it is assumed that RT2 has a completely up to\n       \
    \ date database.  In that case, RT2 goes immediately into Full\n        state.\
    \  RT1 will go into Full state after updating the necessary\n        parts of\
    \ its database.  This is done by sending Link State\n        Request Packets,\
    \ and receiving Link State Update Packets in\n        response.  Note that, while\
    \ RT1 has waited until a complete set\n        of Database Description Packets\
    \ has been received (from RT2)\n        before sending any Link State Request\
    \ Packets, this need not be\n        the case.  RT1 could have interleaved the\
    \ sending of Link State\n        Request Packets with the reception of Database\
    \ Description\n            +---+                                         +---+\n\
    \            |RT1|                                         |RT2|\n           \
    \ +---+                                         +---+\n            Down      \
    \                                    Down\n                            Hello(DR=0,seen=0)\n\
    \                       ------------------------------>\n                    \
    \     Hello (DR=RT2,seen=RT1,...)      Init\n                       <------------------------------\n\
    \            ExStart        D-D (Seq=x,I,M,Master)\n                       ------------------------------>\n\
    \                           D-D (Seq=y,I,M,Master)         ExStart\n         \
    \              <------------------------------\n            Exchange       D-D\
    \ (Seq=y,M,Slave)\n                       ------------------------------>\n  \
    \                         D-D (Seq=y+1,M,Master)         Exchange\n          \
    \             <------------------------------\n                           D-D\
    \ (Seq=y+1,M,Slave)\n                       ------------------------------>\n\
    \                                     ...\n                                  \
    \   ...\n                                     ...\n                          \
    \ D-D (Seq=y+n, Master)\n                       <------------------------------\n\
    \                           D-D (Seq=y+n, Slave)\n             Loading   ------------------------------>\n\
    \                                 LS Request                Full\n           \
    \            ------------------------------>\n                               \
    \  LS Update\n                       <------------------------------\n       \
    \                          LS Request\n                       ------------------------------>\n\
    \                                 LS Update\n                       <------------------------------\n\
    \             Full\n                   Figure 14: An adjacency bring-up example\n\
    \        Packets.\n"
- title: 11.  The Routing Table Structure
  contents:
  - "11.  The Routing Table Structure\n    The routing table data structure contains\
    \ all the information\n    necessary to forward an IP data packet toward its destination.\
    \  Each\n    routing table entry describes the collection of best paths to a\n\
    \    particular destination.  When forwarding an IP data packet, the\n    routing\
    \ table entry providing the best match for the packet's IP\n    destination is\
    \ located.  The matching routing table entry then\n    provides the next hop towards\
    \ the packet's destination.  OSPF also\n    provides for the existence of a default\
    \ route (Destination ID =\n    DefaultDestination, Address Mask =  0x00000000).\
    \  When the default\n    route exists, it matches all IP destinations (although\
    \ any other\n    matching entry is a better match).  Finding the routing table\
    \ entry\n    that best matches an IP destination is further described in Section\n\
    \    11.1.\n    There is a single routing table in each router.  Two sample routing\n\
    \    tables are described in Sections 11.2 and 11.3.  The building of the\n  \
    \  routing table is discussed in Section 16.\n    The rest of this section defines\
    \ the fields found in a routing table\n    entry.  The first set of fields describes\
    \ the routing table entry's\n    destination.\n    Destination Type\n        The\
    \ destination can be one of three types.  Only the first type,\n        Network,\
    \ is actually used when forwarding IP data traffic.  The\n        other destinations\
    \ are used solely as intermediate steps in the\n        routing table build process.\n\
    \        Network\n            A range of IP addresses, to which IP data traffic\
    \ may be\n            forwarded.  This includes IP networks (class A, B, or C),\
    \ IP\n            subnets, IP supernets and single IP hosts.  The default\n  \
    \          route also falls in this category.\n        Area border router\n  \
    \          Routers that are connected to multiple OSPF areas.  Such\n        \
    \    routers originate summary link advertisements.  These\n            routing\
    \ table entries are used when calculating the inter-\n            area routes\
    \ (see Section 16.2).  These routing table entries\n            may also be associated\
    \ with configured virtual links.\n        AS boundary router\n            Routers\
    \ that originate AS external link advertisements.\n            These routing table\
    \ entries are used when calculating the AS\n            external routes (see Section\
    \ 16.4).\n    Destination ID\n        The destination's identifier or name.  This\
    \ depends on the\n        Destination Type.  For networks, the identifier is their\n\
    \        associated IP address.  For all other types, the identifier is\n    \
    \    the OSPF Router ID.[9]\n    Address Mask\n        Only defined for networks.\
    \  The network's IP address together\n        with its address mask defines a\
    \ range of IP addresses.  For IP\n        subnets, the address mask is referred\
    \ to as the subnet mask.\n        For host routes, the mask is \"all ones\" (0xffffffff).\n\
    \    Optional Capabilities\n        When the destination is a router (either an\
    \ area border router\n        or an AS boundary router) this field indicates the\
    \ optional OSPF\n        capabilities supported by the destination router.  The\
    \ two\n        optional capabilities currently defined by this specification\n\
    \        are the ability to route based on IP TOS and the ability to\n       \
    \ process AS external link advertisements.  For a further\n        discussion\
    \ of OSPF's optional capabilities, see Section 4.5.\n    The set of paths to use\
    \ for a destination may vary based on IP Type\n    of Service and the OSPF area\
    \ to which the paths belong.  This means\n    that there may be multiple routing\
    \ table entries for the same\n    destination, depending on the values of the\
    \ next two fields.\n    Type of Service\n        There can be a separate set of\
    \ routes for each IP Type of\n        Service.  The encoding of TOS in OSPF link\
    \ state advertisements\n        is described in Section 12.3.\n    Area\n    \
    \    This field indicates the area whose link state information has\n        led\
    \ to the routing table entry's collection of paths.  This is\n        called the\
    \ entry's associated area.  For sets of AS external\n        paths, this field\
    \ is not defined.  For destinations of type\n        \"area border router\", there\
    \ may be separate sets of paths (and\n        therefore separate routing table\
    \ entries) associated with each\n        of several areas.  This will happen when\
    \ two area border routers\n        share multiple areas in common.  For all other\
    \ destination\n        types, only the set of paths associated with the best area\
    \ (the\n        one providing the shortest route) is kept.\n    The rest of the\
    \ routing table entry describes the set of paths to\n    the destination.  The\
    \ following fields pertain to the set of paths\n    as a whole.  In other words,\
    \ each one of the paths contained in a\n    routing table entry is of the same\
    \ path-type and cost (see below).\n    Path-type\n        There are four possible\
    \ types of paths used to route traffic to\n        the destination, listed here\
    \ in order of preference: intra-area,\n        inter-area, type 1 external or\
    \ type 2 external.  Intra-area\n        paths indicate destinations belonging\
    \ to one of the router's\n        attached areas.  Inter-area paths are paths\
    \ to destinations in\n        other OSPF areas.  These are discovered through\
    \ the examination\n        of received summary link advertisements.  AS external\
    \ paths are\n        paths to destinations external to the AS.  These are detected\n\
    \        through the examination of received AS external link\n        advertisements.\n\
    \    Cost\n        The link state cost of the path to the destination.  For all\n\
    \        paths except type 2 external paths this describes the entire\n      \
    \  path's cost.  For Type 2 external paths, this field describes\n        the\
    \ cost of the portion of the path internal to the AS.  This\n        cost is calculated\
    \ as the sum of the costs of the path's\n        constituent links.\n    Type\
    \ 2 cost\n        Only valid for type 2 external paths.  For these paths, this\n\
    \        field indicates the cost of the path's external portion.  This\n    \
    \    cost has been advertised by an AS boundary router, and is the\n        most\
    \ significant part of the total path cost.  For example, a\n        type 2 external\
    \ path with type 2 cost of 5 is always preferred\n        over a path with type\
    \ 2 cost of 10, regardless of the cost of\n        the two paths' internal components.\n\
    \    Link State Origin\n        Valid only for intra-area paths, this field indicates\
    \ the link\n        state advertisement (router links or network links) that\n\
    \        directly references the destination.  For example, if the\n        destination\
    \ is a transit network, this is the transit network's\n        network links advertisement.\
    \  If the destination is a stub\n        network, this is the router links advertisement\
    \ for the attached\n        router.  The advertisement is discovered during the\
    \ shortest-\n        path tree calculation (see Section 16.1).  Multiple\n   \
    \     advertisements may reference the destination, however a tie-\n        breaking\
    \ scheme always reduces the choice to a single\n        advertisement. The Link\
    \ State Origin field is not used by the\n        OSPF protocol, but it is used\
    \ by the routing table calculation\n        in OSPF's Multicast routing extensions\
    \ (MOSPF).\n    When multiple paths of equal path-type and cost exist to a\n \
    \   destination (called elsewhere \"equal-cost\" paths), they are stored\n   \
    \ in a single routing table entry.  Each one of the \"equal-cost\" paths\n   \
    \ is distinguished by the following fields:\n    Next hop\n        The outgoing\
    \ router interface to use when forwarding traffic to\n        the destination.\
    \  On multi-access networks, the next hop also\n        includes the IP address\
    \ of the next router (if any) in the path\n        towards the destination.  This\
    \ next router will always be one of\n        the adjacent neighbors.\n    Advertising\
    \ router\n        Valid only for inter-area and AS external paths.  This field\n\
    \        indicates the Router ID of the router advertising the summary\n     \
    \   link or AS external link that led to this path.\n    11.1.  Routing table\
    \ lookup\n        When an IP data packet is received, an OSPF router finds the\n\
    \        routing table entry that best matches the packet's destination.\n   \
    \     This routing table entry then provides the outgoing interface\n        and\
    \ next hop router to use in forwarding the packet. This\n        section describes\
    \ the process of finding the best matching\n        routing table entry. The process\
    \ consists of a number of steps,\n        wherein the collection of routing table\
    \ entries is progressively\n        pruned. In the end, the single routing table\
    \ entry remaining is\n        the called best match.\n        Note that the steps\
    \ described below may fail to produce a best\n        match routing table entry\
    \ (i.e., all existing routing table\n        entries are pruned for some reason\
    \ or another). In this case,\n        the packet's IP destination is considered\
    \ unreachable. Instead\n        of being forwarded, the packet should be dropped\
    \ and an ICMP\n        destination unreachable message should be returned to the\n\
    \        packet's source.\n        (1) Select the complete set of \"matching\"\
    \ routing table entries\n            from the routing table.  Each routing table\
    \ entry describes\n            a (set of) path(s) to a range of IP addresses.\
    \ If the data\n            packet's IP destination falls into an entry's range\
    \ of IP\n            addresses, the routing table entry is called a match. (It\
    \ is\n            quite likely that multiple entries will match the data\n   \
    \         packet.  For example, a default route will match all\n            packets.)\n\
    \        (2) Suppose that the packet's IP destination falls into one of\n    \
    \        the router's configured area address ranges (see Section\n          \
    \  3.5), and that the particular area address range is active.\n            This\
    \ means that there are one or more reachable (by intra-\n            area paths)\
    \ networks contained in the area address range.\n            The packet's IP destination\
    \ is then required to belong to\n            one of these constituent networks.\
    \ For this reason, only\n            matching routing table entries with path-type\
    \ of intra-area\n            are considered (all others are pruned). If no such\
    \ matching\n            entries exist, the destination is unreachable (see above).\n\
    \            Otherwise, skip to step 4.\n        (3) Reduce the set of matching\
    \ entries to those having the most\n            preferential path-type (see Section\
    \ 11). OSPF has a four\n            level hierarchy of paths. Intra-area paths\
    \ are the most\n            preferred, followed in order by inter-area, type 1\
    \ external\n            and type 2 external paths.\n        (4) Select the remaining\
    \ routing table entry that provides the\n            longest (most specific) match.\
    \ Another way of saying this is\n            to choose the remaining entry that\
    \ specifies the narrowest\n            range of IP addresses.[10] For example,\
    \ the entry for the\n            address/mask pair of (128.185.1.0, 0xffffff00)\
    \ is more\n            specific than an entry for the pair (128.185.0.0,\n   \
    \         0xffff0000). The default route is the least specific match,\n      \
    \      since it matches all destinations.\n        (5) At this point, there may\
    \ still be multiple routing table\n            entries remaining. Each routing\
    \ entry will specify the same\n            range of IP addresses, but a different\
    \ IP Type of Service.\n            Select the routing table entry whose TOS value\
    \ matches the\n            TOS found in the packet header. If there is no routing\
    \ table\n            entry for this TOS, select the routing table entry for TOS\n\
    \            0. In other words, packets requesting TOS X are routed along\n  \
    \          the TOS 0 path if a TOS X path does not exist.\n    11.2.  Sample routing\
    \ table, without areas\n        Consider the Autonomous System pictured in Figure\
    \ 2.  No OSPF\n        areas have been configured.  A single metric is shown per\n\
    \        outbound interface, indicating that routes will not vary based\n    \
    \    on TOS.  The calculation of Router RT6's routing table proceeds\n       \
    \ as described in Section 2.1.  The resulting routing table is\n        shown\
    \ in Table 12.  Destination types are abbreviated: Network\n        as \"N\",\
    \ area border router as \"BR\" and AS boundary router as\n        \"ASBR\".\n\
    \        There are no instances of multiple equal-cost shortest paths in\n   \
    \     this example.  Also, since there are no areas, there are no\n        inter-area\
    \ paths.\n        Routers RT5 and RT7 are AS boundary routers.  Intra-area routes\n\
    \        have been calculated to Routers RT5 and RT7.  This allows\n        external\
    \ routes to be calculated to the destinations advertised\n        by RT5 and RT7\
    \ (i.e., Networks N12, N13, N14 and N15).  It is\n        assumed all AS external\
    \ advertisements originated by RT5 and RT7\n        are advertising type 1 external\
    \ metrics.  This results in type 1\n        external paths being calculated to\
    \ destinations N12-N15.\n    11.3.  Sample routing table, with areas\n       \
    \ Consider the previous example, this time split into OSPF areas.\n        An\
    \ OSPF area configuration is pictured in Figure 6.  Router\n        RT4's routing\
    \ table will be described for this area\n        configuration.  Router RT4 has\
    \ a connection to Area 1 and a\n        backbone connection.  This causes Router\
    \ RT4 to view the AS as\n        the concatenation of the two graphs shown in\
    \ Figures 7 and 8.\n        The resulting routing table is displayed in Table\
    \ 13.\n        Again, Routers RT5 and RT7 are AS boundary routers.  Routers\n\
    \        RT3, RT4, RT7, RT10 and RT11 are area border routers.  Note that\n  \
    \      there are two routing table entries (in this case having\n        identical\
    \ paths) for Router RT7, in its dual capacities as an\n        area border router\
    \ and an AS boundary router.  Note also that\n        there are two routing entries\
    \ for the area border router RT3,\n        since it has two areas in common with\
    \ RT4 (Area 1 and the\n        backbone).\n        Backbone paths have been calculated\
    \ to all area border routers\n        (BR).  These are used when determining the\
    \ inter-area routes.\n        Note that all of the inter-area routes are associated\
    \ with the\n        backbone; this is always the case when the calculating router\
    \ is\n        itself an area border router.  Routing information is condensed\n\
    \        at area boundaries.  In this example, we assume that Area 3 has\n   \
    \     been defined so that networks N9-N11 and the host route to H1\n        are\
    \ all condensed to a single route when advertised into the\n        backbone (by\
    \ Router RT11).  Note that the cost of this route is\n      Type   Dest   Area\
    \   Path  Type    Cost   Next     Adv.\n                                     \
    \           Hop(s)   Router(s)\n      ____________________________________________________________\n\
    \      N      N1     0      intra-area    10     RT3      *\n      N      N2 \
    \    0      intra-area    10     RT3      *\n      N      N3     0      intra-area\
    \    7      RT3      *\n      N      N4     0      intra-area    8      RT3  \
    \    *\n      N      Ib     0      intra-area    7      *        *\n      N  \
    \    Ia     0      intra-area    12     RT10     *\n      N      N6     0    \
    \  intra-area    8      RT10     *\n      N      N7     0      intra-area    12\
    \     RT10     *\n      N      N8     0      intra-area    10     RT10     *\n\
    \      N      N9     0      intra-area    11     RT10     *\n      N      N10\
    \    0      intra-area    13     RT10     *\n      N      N11    0      intra-area\
    \    14     RT10     *\n      N      H1     0      intra-area    21     RT10 \
    \    *\n      ASBR   RT5    0      intra-area    6      RT5      *\n      ASBR\
    \   RT7    0      intra-area    8      RT10     *\n      ____________________________________________________________\n\
    \      N      N12    *      type 1 ext.   10     RT10     RT7\n      N      N13\
    \    *      type 1 ext.   14     RT5      RT5\n      N      N14    *      type\
    \ 1 ext.   14     RT5      RT5\n      N      N15    *      type 1 ext.   17  \
    \   RT10     RT7\n               Table 12: The routing table for Router RT6\n\
    \                         (no configured areas).\n        the minimum of the set\
    \ of costs to its individual components.\n        There is a virtual link configured\
    \ between Routers RT10 and\n        RT11.  Without this configured virtual link,\
    \ RT11 would be\n        unable to advertise a route for networks N9-N11 and Host\
    \ H1 into\n        the backbone, and there would not be an entry for these networks\n\
    \        in Router RT4's routing table.\n        In this example there are two\
    \ equal-cost paths to Network N12.\n        However, they both use the same next\
    \ hop (Router RT5).\n        Router RT4's routing table would improve (i.e., some\
    \ of the\n        paths in the routing table would become shorter) if an\n   \
    \     additional virtual link were configured between Router RT4 and\n       \
    \ Router RT3.  The new virtual link would itself be associated\n        with the\
    \ first entry for area border router RT3 in Table 13 (an\n   Type   Dest     \
    \   Area   Path  Type    Cost   Next      Adv.\n                             \
    \                     Hops(s)   Router(s)\n   __________________________________________________________________\n\
    \   N      N1          1      intra-area    4      RT1       *\n   N      N2 \
    \         1      intra-area    4      RT2       *\n   N      N3          1   \
    \   intra-area    1      *         *\n   N      N4          1      intra-area\
    \    3      RT3       *\n   BR     RT3         1      intra-area    1      * \
    \        *\n   __________________________________________________________________\n\
    \   N      Ib          0      intra-area    22     RT5       *\n   N      Ia \
    \         0      intra-area    27     RT5       *\n   BR     RT3         0   \
    \   intra-area    21     RT5       *\n   BR     RT7         0      intra-area\
    \    14     RT5       *\n   BR     RT10        0      intra-area    22     RT5\
    \       *\n   BR     RT11        0      intra-area    25     RT5       *\n   ASBR\
    \   RT5         0      intra-area    8      *         *\n   ASBR   RT7       \
    \  0      intra-area    14     RT5       *\n   __________________________________________________________________\n\
    \   N      N6          0      inter-area    15     RT5       RT7\n   N      N7\
    \          0      inter-area    19     RT5       RT7\n   N      N8          0\
    \      inter-area    18     RT5       RT7\n   N      N9-N11,H1   0      inter-area\
    \    26     RT5       RT11\n   __________________________________________________________________\n\
    \   N      N12         *      type 1 ext.   16     RT5       RT5,RT7\n   N   \
    \   N13         *      type 1 ext.   16     RT5       RT5\n   N      N14     \
    \    *      type 1 ext.   16     RT5       RT5\n   N      N15         *      type\
    \ 1 ext.   23     RT5       RT7\n                  Table 13: Router RT4's routing\
    \ table\n                       in the presence of areas.\n        intra-area\
    \ path through Area 1).  This would yield a cost of 1\n        for the virtual\
    \ link.  The routing table entries changes that\n        would be caused by the\
    \ addition of this virtual link are shown\n        in Table 14.\n"
- title: 12.  Link State Advertisements
  contents:
  - "12.  Link State Advertisements\n    Each router in the Autonomous System originates\
    \ one or more link\n    state advertisements.  There are five distinct types of\
    \ link state\n    advertisements, which are described in Section 4.3.  The collection\n\
    \    of link state advertisements forms the link state or topological\n    database.\
    \  Each separate type of advertisement has a separate\n    Type   Dest       \
    \ Area   Path  Type   Cost   Next     Adv.\n                                 \
    \                 Hop(s)   Router(s)\n    ________________________________________________________________\n\
    \    N      Ib          0      intra-area   16     RT3      *\n    N      Ia \
    \         0      intra-area   21     RT3      *\n    BR     RT3         0    \
    \  intra-area   1      *        *\n    BR     RT10        0      intra-area  \
    \ 16     RT3      *\n    BR     RT11        0      intra-area   19     RT3   \
    \   *\n    ________________________________________________________________\n\
    \    N      N9-N11,H1   0      inter-area   20     RT3      RT11\n           \
    \       Table 14: Changes resulting from an\n                        additional\
    \ virtual link.\n    function.  Router links and network links advertisements\
    \ describe\n    how an area's routers and networks are interconnected.  Summary\
    \ link\n    advertisements provide a way of condensing an area's routing\n   \
    \ information.  AS external advertisements provide a way of\n    transparently\
    \ advertising externally-derived routing information\n    throughout the Autonomous\
    \ System.\n    Each link state advertisement begins with a standard 20-byte header.\n\
    \    This link state advertisement header is discussed below.\n    12.1.  The\
    \ Link State Advertisement Header\n        The link state advertisement header\
    \ contains the LS type, Link\n        State ID and Advertising Router fields.\
    \  The combination of\n        these three fields uniquely identifies the link\
    \ state\n        advertisement.\n        There may be several instances of an\
    \ advertisement present in\n        the Autonomous System, all at the same time.\
    \  It must then be\n        determined which instance is more recent.  This determination\
    \ is\n        made by examining the LS sequence, LS checksum and LS age\n    \
    \    fields.  These fields are also contained in the 20-byte link\n        state\
    \ advertisement header.\n        Several of the OSPF packet types list link state\
    \ advertisements.\n        When the instance is not important, an advertisement\
    \ is referred\n        to by its LS type, Link State ID and Advertising Router\
    \ (see\n        Link State Request Packets).  Otherwise, the LS sequence number,\n\
    \        LS age and LS checksum fields must also be referenced.\n        A detailed\
    \ explanation of the fields contained in the link state\n        advertisement\
    \ header follows.\n        12.1.1.  LS age\n            This field is the age\
    \ of the link state advertisement in\n            seconds.  It should be processed\
    \ as an unsigned 16-bit\n            integer.  It is set to 0 when the link state\
    \ advertisement\n            is originated.  It must be incremented by InfTransDelay\
    \ on\n            every hop of the flooding procedure.  Link state\n         \
    \   advertisements are also aged as they are held in each\n            router's\
    \ database.\n            The age of a link state advertisement is never incremented\n\
    \            past MaxAge.  Advertisements having age MaxAge are not used\n   \
    \         in the routing table calculation.  When an advertisement's\n       \
    \     age first reaches MaxAge, it is reflooded.  A link state\n            advertisement\
    \ of age MaxAge is finally flushed from the\n            database when it is no\
    \ longer needed to ensure database\n            synchronization.  For more information\
    \ on the aging of link\n            state advertisements, consult Section 14.\n\
    \            The LS age field is examined when a router receives two\n       \
    \     instances of a link state advertisement, both having\n            identical\
    \ LS sequence numbers and LS checksums.  An instance\n            of age MaxAge\
    \ is then always accepted as most recent; this\n            allows old advertisements\
    \ to be flushed quickly from the\n            routing domain.  Otherwise, if the\
    \ ages differ by more than\n            MaxAgeDiff, the instance having the smaller\
    \ age is accepted\n            as most recent.[11] See Section 13.1 for more details.\n\
    \        12.1.2.  Options\n            The Options field in the link state advertisement\
    \ header\n            indicates which optional capabilities are associated with\n\
    \            the advertisement.  OSPF's optional capabilities are\n          \
    \  described in Section 4.5.  There are currently two optional\n            capabilities\
    \ defined; they are represented by the T-bit and\n            E-bit found in the\
    \ Options field.  The rest of the Options\n            field should be set to\
    \ zero.\n            The E-bit represents OSPF's ExternalRoutingCapability.  This\n\
    \            bit should be set in all advertisements associated with the\n   \
    \         backbone, and all advertisements associated with non-stub\n        \
    \    areas (see Section 3.6).  It should also be set in all AS\n            external\
    \ link advertisements.  It should be reset in all\n            router links, network\
    \ links and summary link advertisements\n            associated with a stub area.\
    \  For all link state\n            advertisements, the setting of the E-bit is\
    \ for\n            informational purposes only; it does not affect the routing\n\
    \            table calculation.\n            The T-bit represents OSPF's TOS routing\
    \ capability.  This\n            bit should be set in a router links advertisement\
    \ if and\n            only if the router is capable of calculating separate routes\n\
    \            for each IP TOS (see Section 2.4).  The T-bit should always\n   \
    \         be set in network links advertisements.  It should be set in\n     \
    \       summary link and AS external link advertisements if and only\n       \
    \     if the advertisement describes paths for all TOS values,\n            instead\
    \ of just the TOS 0 path.  Note that, with the T-bit\n            set, there may\
    \ still be only a single metric in the\n            advertisement (the TOS 0 metric).\
    \  This would mean that\n            paths for non-zero TOS exist, but are equivalent\
    \ to the TOS\n            0 path.  A link state advertisement's T-bit is examined\
    \ when\n            calculating the routing table's non-zero TOS paths (see\n\
    \            Section 16.9).\n        12.1.3.  LS type\n            The LS type\
    \ field dictates the format and function of the\n            link state advertisement.\
    \  Advertisements of different types\n            have different names (e.g.,\
    \ router links or network links).\n            All advertisement types, except\
    \ the AS external link\n            advertisements (LS type = 5), are flooded\
    \ throughout a\n            single area only.  AS external link advertisements\
    \ are\n            flooded throughout the entire Autonomous System, excepting\n\
    \            stub areas (see Section 3.6).  Each separate advertisement\n    \
    \        type is briefly described below in Table 15.\n        12.1.4.  Link State\
    \ ID\n            This field identifies the piece of the routing domain that\n\
    \            is being described by the advertisement.  Depending on the\n    \
    \        advertisement's LS type, the Link State ID takes on the\n           \
    \ values listed in Table 16.\n            Actually, for Type 3 summary link (LS\
    \ type = 3)\n            advertisements and AS external link (LS type = 5)\n \
    \           advertisements, the Link State ID may additionally have one\n    \
    \        or more of the destination network's \"host\" bits set. For\n       \
    \     example, when originating an AS external link for the\n            network\
    \ 10.0.0.0 with mask of 255.0.0.0, the Link State ID\n           LS Type   Advertisement\
    \ description\n           __________________________________________________\n\
    \           1         These are the router links\n                     advertisements.\
    \ They describe the\n                     collected states of the router's\n \
    \                    interfaces. For more information,\n                     consult\
    \ Section 12.4.1.\n           __________________________________________________\n\
    \           2         These are the network links\n                     advertisements.\
    \ They describe the set\n                     of routers attached to the network.\
    \ For\n                     more information, consult\n                     Section\
    \ 12.4.2.\n           __________________________________________________\n   \
    \        3 or 4    These are the summary link\n                     advertisements.\
    \ They describe\n                     inter-area routes, and enable the\n    \
    \                 condensation of routing information at\n                   \
    \  area borders. Originated by area border\n                     routers, the\
    \ Type 3 advertisements\n                     describe routes to networks while\
    \ the\n                     Type 4 advertisements describe routes to\n       \
    \              AS boundary routers.\n           __________________________________________________\n\
    \           5         These are the AS external link\n                     advertisements.\
    \ Originated by AS\n                     boundary routers, they describe routes\n\
    \                     to destinations external to the\n                     Autonomous\
    \ System. A default route for\n                     the Autonomous System can\
    \ also be\n                     described by an AS external link\n           \
    \          advertisement.\n               Table 15: OSPF link state advertisements.\n\
    \            LS Type   Link State ID\n            _______________________________________________\n\
    \            1         The originating router's Router ID.\n            2    \
    \     The IP interface address of the\n                      network's Designated\
    \ Router.\n            3         The destination network's IP address.\n     \
    \       4         The Router ID of the described AS\n                      boundary\
    \ router.\n            5         The destination network's IP address.\n     \
    \         Table 16: The advertisement's Link State ID.\n            can be set\
    \ to anything in the range 10.0.0.0 through\n            10.255.255.255 inclusive\
    \ (although 10.0.0.0 should be used\n            whenever possible). The freedom\
    \ to set certain host bits\n            allows a router to originate separate\
    \ advertisements for two\n            networks having the same address but different\
    \ masks. See\n            Appendix F for details.\n            When the link state\
    \ advertisement is describing a network\n            (LS type = 2, 3 or 5), the\
    \ network's IP address is easily\n            derived by masking the Link State\
    \ ID with the network/subnet\n            mask contained in the body of the link\
    \ state advertisement.\n            When the link state advertisement is describing\
    \ a router (LS\n            type = 1 or 4), the Link State ID is always the described\n\
    \            router's OSPF Router ID.\n            When an AS external advertisement\
    \ (LS Type = 5) is\n            describing a default route, its Link State ID\
    \ is set to\n            DefaultDestination (0.0.0.0).\n        12.1.5.  Advertising\
    \ Router\n            This field specifies the OSPF Router ID of the\n       \
    \     advertisement's originator.  For router links\n            advertisements,\
    \ this field is identical to the Link State ID\n            field.  Network link\
    \ advertisements are originated by the\n            network's Designated Router.\
    \  Summary link advertisements\n            are originated by area border routers.\
    \  AS external link\n            advertisements are originated by AS boundary\
    \ routers.\n        12.1.6.  LS sequence number\n            The sequence number\
    \ field is a signed 32-bit integer.  It is\n            used to detect old and\
    \ duplicate link state advertisements.\n            The space of sequence numbers\
    \ is linearly ordered.  The\n            larger the sequence number (when compared\
    \ as signed 32-bit\n            integers) the more recent the advertisement. \
    \ To describe to\n            sequence number space more precisely, let N refer\
    \ in the\n            discussion below to the constant 2**31.\n            The\
    \ sequence number -N (0x80000000) is reserved (and\n            unused).  This\
    \ leaves -N + 1 (0x80000001) as the smallest\n            (and therefore oldest)\
    \ sequence number.  A router uses this\n            sequence number the first\
    \ time it originates any link state\n            advertisement.  Afterwards, the\
    \ advertisement's sequence\n            number is incremented each time the router\
    \ originates a new\n            instance of the advertisement.  When an attempt\
    \ is made to\n            increment the sequence number past the maximum value\
    \ of N -\n            1 (0x7fffffff), the current instance of the advertisement\n\
    \            must first be flushed from the routing domain.  This is done\n  \
    \          by prematurely aging the advertisement (see Section 14.1)\n       \
    \     and reflooding it.  As soon as this flood has been\n            acknowledged\
    \ by all adjacent neighbors, a new instance can\n            be originated with\
    \ sequence number of -N + 1 (0x80000001).\n            The router may be forced\
    \ to promote the sequence number of\n            one of its advertisements when\
    \ a more recent instance of the\n            advertisement is unexpectedly received\
    \ during the flooding\n            process.  This should be a rare event.  This\
    \ may indicate\n            that an out-of-date advertisement, originated by the\
    \ router\n            itself before its last restart/reload, still exists in the\n\
    \            Autonomous System.  For more information see Section 13.4.\n    \
    \    12.1.7.  LS checksum\n            This field is the checksum of the complete\
    \ contents of the\n            advertisement, excepting the LS age field.  The\
    \ LS age field\n            is excepted so that an advertisement's age can be\n\
    \            incremented without updating the checksum.  The checksum\n      \
    \      used is the same that is used for ISO connectionless\n            datagrams;\
    \ it is commonly referred to as the Fletcher\n            checksum.  It is documented\
    \ in Annex B of [RFC 905].  The\n            link state advertisement header also\
    \ contains the length of\n            the advertisement in bytes; subtracting\
    \ the size of the LS\n            age field (two bytes) yields the amount of data\
    \ to checksum.\n            The checksum is used to detect data corruption of\
    \ an\n            advertisement.  This corruption can occur while an\n       \
    \     advertisement is being flooded, or while it is being held in\n         \
    \   a router's memory.  The LS checksum field cannot take on the\n           \
    \ value of zero; the occurrence of such a value should be\n            considered\
    \ a checksum failure.  In other words, calculation\n            of the checksum\
    \ is not optional.\n            The checksum of a link state advertisement is\
    \ verified in\n            two cases: a) when it is received in a Link State Update\n\
    \            Packet and b) at times during the aging of the link state\n     \
    \       database.  The detection of a checksum failure leads to\n            separate\
    \ actions in each case.  See Sections 13 and 14 for\n            more details.\n\
    \            Whenever the LS sequence number field indicates that two\n      \
    \      instances of an advertisement are the same, the LS checksum\n         \
    \   field is examined.  If there is a difference, the instance\n            with\
    \ the larger LS checksum is considered to be most\n            recent.[12] See\
    \ Section 13.1 for more details.\n    12.2.  The link state database\n       \
    \ A router has a separate link state database for every area to\n        which\
    \ it belongs.  The link state database has been referred to\n        elsewhere\
    \ in the text as the topological database.  All routers\n        belonging to\
    \ the same area have identical topological databases\n        for the area.\n\
    \        The databases for each individual area are always dealt with\n      \
    \  separately.  The shortest path calculation is performed\n        separately\
    \ for each area (see Section 16).  Components of the\n        area topological\
    \ database are flooded throughout the area only.\n        Finally, when an adjacency\
    \ (belonging to Area A) is being\n        brought up, only the database for Area\
    \ A is synchronized between\n        the two routers.\n        The area database\
    \ is composed of router links advertisements,\n        network links advertisements,\
    \ and summary link advertisements\n        (all listed in the area data structure).\
    \  In addition, external\n        routes (AS external advertisements) are included\
    \ in all non-stub\n        area databases (see Section 3.6).\n        An implementation\
    \ of OSPF must be able to access individual\n        pieces of an area database.\
    \  This lookup function is based on an\n        advertisement's LS type, Link\
    \ State ID and Advertising\n        Router.[13] There will be a single instance\
    \ (the most up-to-\n        date) of each link state advertisement in the database.\
    \  The\n        database lookup function is invoked during the link state\n  \
    \      flooding procedure (Section 13) and the routing table\n        calculation\
    \ (Section 16).  In addition, using this lookup\n        function the router can\
    \ determine whether it has itself ever\n        originated a particular link state\
    \ advertisement, and if so,\n        with what LS sequence number.\n        A\
    \ link state advertisement is added to a router's database when\n        either\
    \ a) it is received during the flooding process (Section\n        13) or b) it\
    \ is originated by the router itself (Section 12.4).\n        A link state advertisement\
    \ is deleted from a router's database\n        when either a) it has been overwritten\
    \ by a newer instance\n        during the flooding process (Section 13) or b)\
    \ the router\n        originates a newer instance of one of its self-originated\n\
    \        advertisements (Section 12.4) or c) the advertisement ages out\n    \
    \    and is flushed from the routing domain (Section 14).  Whenever a\n      \
    \  link state advertisement is deleted from the database it must\n        also\
    \ be removed from all neighbors' Link state retransmission\n        lists (see\
    \ Section 10).\n    12.3.  Representation of TOS\n        All OSPF link state\
    \ advertisements (with the exception of\n        network links advertisements)\
    \ specify metrics.  In router links\n        advertisements, the metrics indicate\
    \ the costs of the described\n        interfaces.  In summary link and AS external\
    \ link\n        advertisements, the metric indicates the cost of the described\n\
    \        path.  In all of these advertisements, a separate metric can be\n   \
    \     specified for each IP TOS.  The encoding of TOS in OSPF link\n        state\
    \ advertisements is specified in Table 17. That table\n        relates the OSPF\
    \ encoding to the IP packet header's TOS field\n        (defined in [RFC 1349]).\
    \  The OSPF encoding is expressed as a\n        decimal integer, and the IP packet\
    \ header's TOS field is\n        expressed in the binary TOS values used in [RFC\
    \ 1349].\n                    OSPF encoding   RFC 1349 TOS values\n          \
    \          ___________________________________________\n                    0\
    \               0000 normal service\n                    2               0001\
    \ minimize monetary cost\n                    4               0010 maximize reliability\n\
    \                    6               0011\n                    8             \
    \  0100 maximize throughput\n                    10              0101\n      \
    \              12              0110\n                    14              0111\n\
    \                    16              1000 minimize delay\n                   \
    \ 18              1001\n                    20              1010\n           \
    \         22              1011\n                    24              1100\n   \
    \                 26              1101\n                    28              1110\n\
    \                    30              1111\n                        Table 17: Representing\
    \ TOS in OSPF.\n        Each OSPF link state advertisement must specify the TOS\
    \ 0\n        metric.  Other TOS metrics, if they appear, must appear in order\n\
    \        of increasing TOS encoding.  For example, the TOS 8 (maximize\n     \
    \   throughput) metric must always appear before the TOS 16\n        (minimize\
    \ delay) metric when both are specified.  If a metric\n        for some non-zero\
    \ TOS is not specified, its cost defaults to the\n        cost for TOS 0, unless\
    \ the T-bit is reset in the advertisement's\n        Options field (see Section\
    \ 12.1.2 for more details).\n    12.4.  Originating link state advertisements\n\
    \        Into any given OSPF area, a router will originate several link\n    \
    \    state advertisements.  Each router originates a router links\n        advertisement.\
    \  If the router is also the Designated Router for\n        any of the area's\
    \ networks, it will originate network links\n        advertisements for those\
    \ networks.\n        Area border routers originate a single summary link\n   \
    \     advertisement for each known inter-area destination.  AS\n        boundary\
    \ routers originate a single AS external link\n        advertisement for each\
    \ known AS external destination.\n        Destinations are advertised one at a\
    \ time so that the change in\n        any single route can be flooded without\
    \ reflooding the entire\n        collection of routes.  During the flooding procedure,\
    \ many link\n        state advertisements can be carried by a single Link State\n\
    \        Update packet.\n        As an example, consider Router RT4 in Figure\
    \ 6.  It is an area\n        border router, having a connection to Area 1 and\
    \ the backbone.\n        Router RT4 originates 5 distinct link state advertisements\
    \ into\n        the backbone (one router links, and one summary link for each\
    \ of\n        the networks N1-N4).  Router RT4 will also originate 8 distinct\n\
    \        link state advertisements into Area 1 (one router links and\n       \
    \ seven summary link advertisements as pictured in Figure 7).  If\n        RT4\
    \ has been selected as Designated Router for Network N3, it\n        will also\
    \ originate a network links advertisement for N3 into\n        Area 1.\n     \
    \   In this same figure, Router RT5 will be originating 3 distinct\n        AS\
    \ external link advertisements (one for each of the networks\n        N12-N14).\
    \  These will be flooded throughout the entire AS,\n        assuming that none\
    \ of the areas have been configured as stubs.\n        However, if area 3 has\
    \ been configured as a stub area, the\n        external advertisements for networks\
    \ N12-N14 will not be flooded\n        into area 3 (see Section 3.6).  Instead,\
    \ Router RT11 would\n        originate a default summary link advertisement that\
    \ would be\n        flooded throughout area 3 (see Section 12.4.3).  This instructs\n\
    \        all of area 3's internal routers to send their AS external\n        traffic\
    \ to RT11.\n        Whenever a new instance of a link state advertisement is\n\
    \        originated, its LS sequence number is incremented, its LS age is\n  \
    \      set to 0, its LS checksum is calculated, and the advertisement\n      \
    \  is added to the link state database and flooded out the\n        appropriate\
    \ interfaces.  See Section 13.2 for details concerning\n        the installation\
    \ of the advertisement into the link state\n        database.  See Section 13.3\
    \ for details concerning the flooding\n        of newly originated advertisements.\n\
    \        The ten events that can cause a new instance of a link state\n      \
    \  advertisement to be originated are:\n        (1) The LS age field of one of\
    \ the router's self-originated\n            advertisements reaches the value LSRefreshTime.\
    \ In this\n            case, a new instance of the link state advertisement is\n\
    \            originated, even though the contents of the advertisement\n     \
    \       (apart from the link state advertisement header) will be the\n       \
    \     same.  This guarantees periodic originations of all link\n            state\
    \ advertisements. This periodic updating of link state\n            advertisements\
    \ adds robustness to the link state algorithm.\n            Link state advertisements\
    \ that solely describe unreachable\n            destinations should not be refreshed,\
    \ but should instead be\n            flushed from the routing domain (see Section\
    \ 14.1).\n        When whatever is being described by a link state advertisement\n\
    \        changes, a new advertisement is originated.  However, two\n        instances\
    \ of the same link state advertisement may not be\n        originated within the\
    \ time period MinLSInterval.  This may\n        require that the generation of\
    \ the next instance be delayed by\n        up to MinLSInterval.  The following\
    \ events may cause the\n        contents of a link state advertisement to change.\
    \  These events\n        should cause new originations if and only if the contents\
    \ of the\n        new advertisement would be different:\n        (2) An interface's\
    \ state changes (see Section 9.1).  This may\n            mean that it is necessary\
    \ to produce a new instance of the\n            router links advertisement.\n\
    \        (3) An attached network's Designated Router changes.  A new\n       \
    \     router links advertisement should be originated.  Also, if\n           \
    \ the router itself is now the Designated Router, a new\n            network links\
    \ advertisement should be produced.  If the\n            router itself is no longer\
    \ the Designated Router, any\n            network links advertisement that it\
    \ might have originated\n            for the network should be flushed from the\
    \ routing domain\n            (see Section 14.1).\n        (4) One of the neighboring\
    \ routers changes to/from the FULL\n            state.  This may mean that it\
    \ is necessary to produce a new\n            instance of the router links advertisement.\
    \  Also, if the\n            router is itself the Designated Router for the attached\n\
    \            network, a new network links advertisement should be\n          \
    \  produced.\n        The next four events concern area border routers only:\n\
    \        (5) An intra-area route has been added/deleted/modified in the\n    \
    \        routing table.  This may cause a new instance of a summary\n        \
    \    links advertisement (for this route) to be originated in\n            each\
    \ attached area (possibly including the backbone).\n        (6) An inter-area\
    \ route has been added/deleted/modified in the\n            routing table.  This\
    \ may cause a new instance of a summary\n            links advertisement (for\
    \ this route) to be originated in\n            each attached area (but NEVER for\
    \ the backbone).\n        (7) The router becomes newly attached to an area.  The\
    \ router\n            must then originate summary link advertisements into the\n\
    \            newly attached area for all pertinent intra-area and inter-\n   \
    \         area routes in the router's routing table.  See Section\n          \
    \  12.4.3 for more details.\n        (8) When the state of one of the router's\
    \ configured virtual\n            links changes, it may be necessary to originate\
    \ a new router\n            links advertisement into the virtual link's transit\
    \ area\n            (see the discussion of the router links advertisement's bit\n\
    \            V in Section 12.4.1), as well as originating a new router\n     \
    \       links advertisement into the backbone.\n        The last two events concern\
    \ AS boundary routers (and former AS\n        boundary routers) only:\n      \
    \  (9) An external route gained through direct experience with an\n          \
    \  external routing protocol (like EGP) changes.  This will\n            cause\
    \ an AS boundary router to originate a new instance of\n            an AS external\
    \ link advertisement.\n        (10)\n            A router ceases to be an AS boundary\
    \ router, perhaps after\n            restarting. In this situation the router\
    \ should flush all AS\n            external link advertisements that it had previously\n\
    \            originated.  These advertisements can be flushed via the\n      \
    \      premature aging procedure specified in Section 14.1.\n        The construction\
    \ of each type of link state advertisement is\n        explained in detail below.\
    \  In general, these sections describe\n        the contents of the advertisement\
    \ body (i.e., the part coming\n        after the 20-byte advertisement header).\
    \  For information\n        concerning the building of the link state advertisement\
    \ header,\n        see Section 12.1.\n        12.4.1.  Router links\n        \
    \    A router originates a router links advertisement for each\n            area\
    \ that it belongs to.  Such an advertisement describes\n            the collected\
    \ states of the router's links to the area.  The\n            advertisement is\
    \ flooded throughout the particular area, and\n            no further.\n     \
    \             ....................................\n                  . 192.1.2\
    \                   Area 1 .\n                  .     +                      \
    \      .\n                  .     |                            .\n           \
    \       .     | 3+---+1                    .\n                  .  N1 |--|RT1|-----+\
    \               .\n                  .     |  +---+                    .\n   \
    \               .     |                _______N3  .\n                  .     +\
    \               /          .  1+---+\n                  .                    \
    \ * 192.1.1 *------|RT4|\n                  .     +               /_______/  \
    \ .   +---+\n                  .     |              /     |       .\n        \
    \          .     | 3+---+1     /      |       .\n                  .  N2 |--|RT2|-----+\
    \      1|       .\n                  .     |  +---+           +---+8    .    \
    \     6+---+\n                  .     |                  |RT3|----------------|RT6|\n\
    \                  .     +                  +---+     .          +---+\n     \
    \             . 192.1.3                  |2      .   18.10.0.6|7\n           \
    \       .                          |       .            |\n                  .\
    \                   +------------+ .\n                  .                    \
    \ 192.1.4 (N4) .\n                  ....................................\n   \
    \                 Figure 15: Area 1 with IP addresses shown\n            The format\
    \ of a router links advertisement is shown in\n            Appendix A (Section\
    \ A.4.2).  The first 20 bytes of the\n            advertisement consist of the\
    \ generic link state\n            advertisement header that was discussed in Section\
    \ 12.1.\n            Router links advertisements have LS type = 1.  The router\n\
    \            indicates whether it is willing to calculate separate routes\n  \
    \          for each IP TOS by setting (or resetting) the T-bit of the\n      \
    \      link state advertisement's Options field.\n            A router also indicates\
    \ whether it is an area border router,\n            or an AS boundary router,\
    \ by setting the appropriate bits\n            (bit B and bit E, respectively)\
    \ in its router links\n            advertisements. This enables paths to those\
    \ types of routers\n            to be saved in the routing table, for later processing\
    \ of\n            summary link advertisements and AS external link\n         \
    \   advertisements.  Bit B should be set whenever the router is\n            actively\
    \ attached to two or more areas, even if the router\n            is not currently\
    \ attached to the OSPF backbone area.  Bit E\n            should never be set\
    \ in a router links advertisement for a\n            stub area (stub areas cannot\
    \ contain AS boundary routers).\n            In addition, the router sets bit\
    \ V in its router links\n            advertisement for Area A if and only if it\
    \ is the endpoint\n            of an active virtual link using Area A as its Transit\
    \ area.\n            This enables the other routers attached to Area A to\n  \
    \          discover whether the area supports any virtual links (i.e.,\n     \
    \       is a transit area).\n            The router links advertisement then describes\
    \ the router's\n            working connections (i.e., interfaces or links) to\
    \ the area.\n            Each link is typed according to the kind of attached\n\
    \            network.  Each link is also labelled with its Link ID.  This\n  \
    \          Link ID gives a name to the entity that is on the other end\n     \
    \       of the link.  Table 18 summarizes the values used for the\n          \
    \  Type and Link ID fields.\n                   Link type   Description      \
    \ Link ID\n                   __________________________________________________\n\
    \                   1           Point-to-point    Neighbor Router ID\n       \
    \                        link\n                   2           Link to transit\
    \   Interface address of\n                               network           Designated\
    \ Router\n                   3           Link to stub      IP network number\n\
    \                               network\n                   4           Virtual\
    \ link      Neighbor Router ID\n                           Table 18: Link descriptions\
    \ in the\n                              router links advertisement.\n        \
    \    In addition, the Link Data field is specified for each link.\n          \
    \  This field gives 32 bits of extra information for the link.\n            For\
    \ links to transit networks, numbered links to routers and\n            virtual\
    \ links, this field specifies the IP interface address\n            of the associated\
    \ router interface (this is needed by the\n            routing table calculation,\
    \ see Section 16.1.1).  For links\n            to stub networks, this field specifies\
    \ the network's IP\n            address mask.  For unnumbered point-to-point networks,\
    \ the\n            Link Data field should be set to the unnumbered interface's\n\
    \            MIB-II [RFC 1213] ifIndex value.\n            Finally, the cost of\
    \ using the link for output (possibly\n            specifying a different cost\
    \ for each Type of Service) is\n            specified.  The output cost of a link\
    \ is configurable.  It\n            must always be non-zero.\n            To further\
    \ describe the process of building the list of link\n            descriptions,\
    \ suppose a router wishes to build a router\n            links advertisement for\
    \ Area A.  The router examines its\n            collection of interface data structures.\
    \  For each\n            interface, the following steps are taken:\n         \
    \   o   If the attached network does not belong to Area A, no\n              \
    \  links are added to the advertisement, and the next\n                interface\
    \ should be examined.\n            o   Else, if the state of the interface is\
    \ Down, no links\n                are added.\n            o   Else, if the state\
    \ of the interface is Point-to-Point,\n                then add links according\
    \ to the following:\n                -   If the neighboring router is fully adjacent,\
    \ add a\n                    Type 1 link (point-to-point) if this is an interface\n\
    \                    to a point-to-point network, or add a Type 4 link\n     \
    \               (virtual link) if this is a virtual link.  The Link\n        \
    \            ID should be set to the Router ID of the neighboring\n          \
    \          router. For virtual links and numbered point-to-\n                \
    \    point networks, the Link Data should specify the IP\n                   \
    \ interface address. For unnumbered point-to-point\n                    networks,\
    \ the Link Data field should specify the\n                    interface's MIB-II\
    \ [RFC 1213] ifIndex value.\n                -   If this is a numbered point-to-point\
    \ network (i.e,\n                    not a virtual link and not an unnumbered\
    \ point-to-\n                    point network) and the neighboring router's IP\n\
    \                    address is known, add a Type 3 link (stub network)\n    \
    \                whose Link ID is the neighbor's IP address, whose\n         \
    \           Link Data is the mask 0xffffffff indicating a host\n             \
    \       route, and whose cost is the interface's configured\n                \
    \    output cost.\n            o   Else if the state of the interface is Loopback,\
    \ add a\n                Type 3 link (stub network) as long as this is not an\n\
    \                interface to an unnumbered serial line.  The Link ID\n      \
    \          should be set to the IP interface address, the Link Data\n        \
    \        set to the mask 0xffffffff (indicating a host route),\n             \
    \   and the cost set to 0.\n            o   Else if the state of the interface\
    \ is Waiting, add a\n                Type 3 link (stub network) whose Link ID\
    \ is the IP\n                network number of the attached network and whose\
    \ Link\n                Data is the attached network's address mask.\n       \
    \     o   Else, there has been a Designated Router selected for\n            \
    \    the attached network.  If the router is fully adjacent\n                to\
    \ the Designated Router, or if the router itself is\n                Designated\
    \ Router and is fully adjacent to at least one\n                other router,\
    \ add a single Type 2 link (transit network)\n                whose Link ID is\
    \ the IP interface address of the\n                attached network's Designated\
    \ Router (which may be the\n                router itself) and whose Link Data\
    \ is the router's own\n                IP interface address.  Otherwise, add a\
    \ link as if the\n                interface state were Waiting (see above).\n\
    \            Unless otherwise specified, the cost of each link generated\n   \
    \         by the above procedure is equal to the output cost of the\n        \
    \    associated interface.  Note that in the case of serial\n            lines,\
    \ multiple links may be generated by a single\n            interface.\n      \
    \      After consideration of all the router interfaces, host links\n        \
    \    are added to the advertisement by examining the list of\n            attached\
    \ hosts.  A host route is represented as a Type 3\n            link (stub network)\
    \ whose Link ID is the host's IP address\n            and whose Link Data is the\
    \ mask of all ones (0xffffffff).\n            As an example, consider the router\
    \ links advertisements\n            generated by Router RT3, as pictured in Figure\
    \ 6.  The area\n            containing Router RT3 (Area 1) has been redrawn, with\
    \ actual\n            network addresses, in Figure 15.  Assume that the last byte\n\
    \            of all of RT3's interface addresses is 3, giving it the\n       \
    \     interface addresses 192.1.1.3 and 192.1.4.3, and that the\n            other\
    \ routers have similar addressing schemes.  In addition,\n            assume that\
    \ all links are functional, and that Router IDs\n            are assigned as the\
    \ smallest IP interface address.\n            RT3 originates two router links\
    \ advertisements, one for Area\n            1 and one for the backbone.  Assume\
    \ that Router RT4 has been\n            selected as the Designated router for\
    \ network 192.1.1.0.\n            RT3's router links advertisement for Area 1\
    \ is then shown\n            below.  It indicates that RT3 has two connections\
    \ to Area 1,\n            the first a link to the transit network 192.1.1.0 and\
    \ the\n            second a link to the stub network 192.1.4.0.  Note that the\n\
    \            transit network is identified by the IP interface of its\n      \
    \      Designated Router (i.e., the Link ID = 192.1.1.4 which is\n           \
    \ the Designated Router RT4's IP interface to 192.1.1.0).\n            Note also\
    \ that RT3 has indicated that it is capable of\n            calculating separate\
    \ routes based on IP TOS, through setting\n            the T-bit in the Options\
    \ field.  It has also indicated that\n            it is an area border router.\n\
    \              ; RT3's router links advertisement for Area 1\n              LS\
    \ age = 0                     ;always true on origination\n              Options\
    \ = (T-bit|E-bit)        ;TOS-capable\n              LS type = 1             \
    \       ;indicates router links\n              Link State ID = 192.1.1.3     \
    \ ;RT3's Router ID\n              Advertising Router = 192.1.1.3 ;RT3's Router\
    \ ID\n              bit E = 0                      ;not an AS boundary router\n\
    \              bit B = 1                      ;area border router\n          \
    \    #links = 2\n                     Link ID = 192.1.1.4     ;IP address of Desig.\
    \ Rtr.\n                     Link Data = 192.1.1.3   ;RT3's IP interface to net\n\
    \                     Type = 2                ;connects to transit network\n \
    \                    # other metrics = 0\n                     TOS 0 metric =\
    \ 1\n                     Link ID = 192.1.4.0     ;IP Network number\n       \
    \              Link Data = 0xffffff00  ;Network mask\n                     Type\
    \ = 3                ;connects to stub network\n                     # other metrics\
    \ = 0\n                     TOS 0 metric = 2\n            Next RT3's router links\
    \ advertisement for the backbone is\n            shown.  It indicates that RT3\
    \ has a single attachment to the\n            backbone.  This attachment is via\
    \ an unnumbered point-to-\n            point link to Router RT6.  RT3 has again\
    \ indicated that it\n            is TOS-capable, and that it is an area border\
    \ router.\n              ; RT3's router links advertisement for the backbone\n\
    \              LS age = 0                     ;always true on origination\n  \
    \            Options = (T-bit|E-bit)        ;TOS-capable\n              LS type\
    \ = 1                    ;indicates router links\n              Link State ID\
    \ = 192.1.1.3      ;RT3's router ID\n              Advertising Router = 192.1.1.3\
    \ ;RT3's router ID\n              bit E = 0                      ;not an AS boundary\
    \ router\n              bit B = 1                      ;area border router\n \
    \             #links = 1\n                     Link ID = 18.10.0.6     ;Neighbor's\
    \ Router ID\n                     Link Data = 0.0.0.3     ;MIB-II ifIndex of P-P\
    \ link\n                     Type = 1                ;connects to router\n   \
    \                  # other metrics = 0\n                     TOS 0 metric = 8\n\
    \            Even though Router RT3 has indicated that it is TOS-capable\n   \
    \         in the above examples, only a single metric (the TOS 0\n           \
    \ metric) has been specified for each interface.  Different\n            metrics\
    \ can be specified for each TOS.  The encoding of TOS\n            in OSPF link\
    \ state advertisements is described in Section\n            12.3.\n          \
    \  As an example, suppose the point-to-point link between\n            Routers\
    \ RT3 and RT6 in Figure 15 is a satellite link.  The\n            AS administrator\
    \ may want to encourage the use of the line\n            for high bandwidth traffic.\
    \  This would be done by setting\n            the metric artificially low for\
    \ the appropriate TOS value.\n            Router RT3 would then originate the\
    \ following router links\n            advertisement for the backbone (TOS 8 =\
    \ maximize\n            throughput):\n              ; RT3's router links advertisement\
    \ for the backbone\n              LS age = 0                  ;always true on\
    \ origination\n              Options = (T-bit|E-bit)     ;TOS-capable\n      \
    \        LS type = 1                 ;indicates router links\n              Link\
    \ State ID = 192.1.1.3   ;RT3's Router ID\n              Advertising Router =\
    \ 192.1.1.3\n              bit E = 0                   ;not an AS boundary router\n\
    \              bit B = 1                   ;area border router\n             \
    \ #links = 1\n                     Link ID = 18.10.0.6  ;Neighbor's Router ID\n\
    \                     Link Data = 0.0.0.3  ;MIB-II ifIndex of P-P link\n     \
    \                Type = 1             ;connects to router\n                  \
    \   # other metrics = 1\n                     TOS 0 metric = 8\n             \
    \                TOS = 8      ;maximize throughput\n                         \
    \    metric = 1   ;traffic preferred\n        12.4.2.  Network links\n       \
    \     A network links advertisement is generated for every transit\n         \
    \   multi-access network.  (A transit network is a network\n            having\
    \ two or more attached routers).  The network links\n            advertisement\
    \ describes all the routers that are attached to\n            the network.\n \
    \           The Designated Router for the network originates the\n           \
    \ advertisement.  The Designated Router originates the\n            advertisement\
    \ only if it is fully adjacent to at least one\n            other router on the\
    \ network.  The network links\n            advertisement is flooded throughout\
    \ the area that contains\n            the transit network, and no further.  The\
    \ networks links\n            advertisement lists those routers that are fully\
    \ adjacent to\n            the Designated Router; each fully adjacent router is\n\
    \            identified by its OSPF Router ID.  The Designated Router\n      \
    \      includes itself in this list.\n            The Link State ID for a network\
    \ links advertisement is the\n            IP interface address of the Designated\
    \ Router.  This value,\n            masked by the network's address mask (which\
    \ is also\n            contained in the network links advertisement) yields the\n\
    \            network's IP address.\n            A router that has formerly been\
    \ the Designated Router for a\n            network, but is no longer, should flush\
    \ the network links\n            advertisement that it had previously originated.\
    \  This\n            advertisement is no longer used in the routing table\n  \
    \          calculation.  It is flushed by prematurely incrementing the\n     \
    \       advertisement's age to MaxAge and reflooding (see Section\n          \
    \  14.1). In addition, in those rare cases where a router's\n            Router\
    \ ID has changed, any network links advertisements that\n            were originated\
    \ with the router's previous Router ID must be\n            flushed. Since the\
    \ router may have no idea what it's\n            previous Router ID might have\
    \ been, these network links\n            advertisements are indicated by having\
    \ their Link State ID\n            equal to one of the router's IP interface addresses\
    \ and\n            their Advertising Router not equal to the router's current\n\
    \            Router ID (see Section 13.4 for more details).\n            As an\
    \ example of a network links advertisement, again\n            consider the area\
    \ configuration in Figure 6.  Network links\n            advertisements are originated\
    \ for Network N3 in Area 1,\n            Networks N6 and N8 in Area 2, and Network\
    \ N9 in Area 3.\n            Assuming that Router RT4 has been selected as the\
    \ Designated\n            Router for Network N3, the following network links\n\
    \            advertisement is generated by RT4 on behalf of Network N3\n     \
    \       (see Figure 15 for the address assignments):\n              ; network\
    \ links advertisement for Network N3\n              LS age = 0               \
    \      ;always true on origination\n              Options = (T-bit|E-bit)    \
    \    ;TOS-capable\n              LS type = 2                    ;indicates network\
    \ links\n              Link State ID = 192.1.1.4      ;IP address of Desig. Rtr.\n\
    \              Advertising Router = 192.1.1.4 ;RT4's Router ID\n             \
    \ Network Mask = 0xffffff00\n                     Attached Router = 192.1.1.4\
    \    ;Router ID\n                     Attached Router = 192.1.1.1    ;Router ID\n\
    \                     Attached Router = 192.1.1.2    ;Router ID\n            \
    \         Attached Router = 192.1.1.3    ;Router ID\n        12.4.3.  Summary\
    \ links\n            Each summary link advertisement describes a route to a\n\
    \            single destination.  Summary link advertisements are flooded\n  \
    \          throughout a single area only.  The destination described is\n    \
    \        one that is external to the area, yet still belonging to the\n      \
    \      Autonomous System.\n            Summary link advertisements are originated\
    \ by area border\n            routers.  The precise summary routes to advertise\
    \ into an\n            area are determined by examining the routing table structure\n\
    \            (see Section 11) in accordance with the algorithm described\n   \
    \         below. Note that only intra-area routes are advertised into\n      \
    \      the backbone, while both intra-area and inter-area routes\n           \
    \ are advertised into the other areas.\n            To determine which routes\
    \ to advertise into an attached Area\n            A, each routing table entry\
    \ is processed as follows.\n            Remember that each routing table entry\
    \ describes a set of\n            equal-cost best paths to a particular destination:\n\
    \            o   Only Destination Types of network and AS boundary router\n  \
    \              are advertised in summary link advertisements.  If the\n      \
    \          routing table entry's Destination Type is area border\n           \
    \     router, examine the next routing table entry.\n            o   AS external\
    \ routes are never advertised in summary link\n                advertisements.\
    \  If the routing table entry has Path-\n                type of type 1 external\
    \ or type 2 external, examine the\n                next routing table entry.\n\
    \            o   Else, if the area associated with this set of paths is\n    \
    \            the Area A itself, do not generate a summary link\n             \
    \   advertisement for the route.[14]\n            o   Else, if the next hops associated\
    \ with this set of paths\n                belong to Area A itself, do not generate\
    \ a summary link\n                advertisement for the route.[15] This is the\
    \ logical\n                equivalent of a Distance Vector protocol's split horizon\n\
    \                logic.\n            o   Else, if the routing table cost equals\
    \ or exceeds the\n                value LSInfinity, a summary link advertisement\
    \ cannot be\n                generated for this route.\n            o   Else,\
    \ if the destination of this route is an AS boundary\n                router,\
    \ generate a Type 4 link state advertisement for\n                the destination,\
    \ with Link State ID equal to the AS\n                boundary router's Router\
    \ ID and metric equal to the\n                routing table entry's cost.  These\
    \ advertisements should\n                not be generated if Area A has been configured\
    \ as a stub\n                area.\n            o   Else, the Destination type\
    \ is network. If this is an\n                inter-area route, generate a Type\
    \ 3 advertisement for\n                the destination, with Link State ID equal\
    \ to the\n                network's address (if necessary, the Link State ID can\n\
    \                also have one or more of the network's host bits set;\n     \
    \           see Appendix F for details) and metric equal to the\n            \
    \    routing table cost.\n            o   The one remaining case is an intra-area\
    \ route to a\n                network.  This means that the network is contained\
    \ in\n                one of the router's directly attached areas.  In\n     \
    \           general, this information must be condensed before\n             \
    \   appearing in summary link advertisements.  Remember that\n               \
    \ an area has been defined as a list of address ranges,\n                each\
    \ range consisting of an [address,mask] pair and a\n                status indication\
    \ of either Advertise or DoNotAdvertise.\n                At most a single Type\
    \ 3 advertisement is made for each\n                range. When the range's status\
    \ indicates Advertise, a\n                Type 3 advertisement is generated with\
    \ Link State ID\n                equal to the range's address (if necessary, the\
    \ Link\n                State ID can also have one or more of the range's \"host\"\
    \n                bits set; see Appendix F for details) and cost equal to\n  \
    \              the smallest cost of any of the component networks. When\n    \
    \            the range's status indicates DoNotAdvertise, the Type 3\n       \
    \         advertisement is suppressed and the component networks\n           \
    \     remain hidden from other areas.\n                By default, if a network\
    \ is not contained in any\n                explicitly configured address range,\
    \ a Type 3\n                advertisement is generated with Link State ID equal\
    \ to\n                the network's address (if necessary, the Link State ID\n\
    \                can also have one or more of the network's \"host\" bits\n  \
    \              set; see Appendix F for details) and metric equal to the\n    \
    \            network's routing table cost.\n                If virtual links are\
    \ being used to provide/increase\n                connectivity of the backbone,\
    \ routing information\n                concerning the backbone networks should\
    \ not be condensed\n                before being summarized into the virtual links'\
    \ Transit\n                areas. Nor should the advertisement of backbone networks\n\
    \                into Transit areas be suppressed.  In other words, the\n    \
    \            backbone's configured ranges should be ignored when\n           \
    \     originating summary links into Transit areas.  The\n                existence\
    \ of virtual links is determined during the\n                shortest path calculation\
    \ for the Transit areas (see\n                Section 16.1).\n            If a\
    \ router advertises a summary advertisement for a\n            destination which\
    \ then becomes unreachable, the router must\n            then flush the advertisement\
    \ from the routing domain by\n            setting its age to MaxAge and reflooding\
    \ (see Section 14.1).\n            Also, if the destination is still reachable,\
    \ yet can no\n            longer be advertised according to the above procedure\
    \ (e.g.,\n            it is now an inter-area route, when it used to be an intra-\n\
    \            area route associated with some non-backbone area; it would\n   \
    \         thus no longer be advertisable to the backbone), the\n            advertisement\
    \ should also be flushed from the routing\n            domain.\n            For\
    \ an example of summary link advertisements, consider\n            again the area\
    \ configuration in Figure 6.  Routers RT3, RT4,\n            RT7, RT10 and RT11\
    \ are all area border routers, and\n            therefore are originating summary\
    \ link advertisements.\n            Consider in particular Router RT4.  Its routing\
    \ table was\n            calculated as the example in Section 11.3.  RT4 originates\n\
    \            summary link advertisements into both the backbone and Area\n   \
    \         1.  Into the backbone, Router RT4 originates separate\n            advertisements\
    \ for each of the networks N1-N4.  Into Area 1,\n            Router RT4 originates\
    \ separate advertisements for networks\n            N6-N8 and the AS boundary\
    \ routers RT5,RT7.  It also\n            condenses host routes Ia and Ib into\
    \ a single summary link\n            advertisement.  Finally, the routes to networks\
    \ N9,N10,N11\n            and Host H1 are advertised by a single summary link\n\
    \            advertisement.  This condensation was originally performed\n    \
    \        by the router RT11.\n            These advertisements are illustrated\
    \ graphically in Figures\n            7 and 8.  Two of the summary link advertisements\
    \ originated\n            by Router RT4 follow.  The actual IP addresses for the\n\
    \            networks and routers in question have been assigned in\n        \
    \    Figure 15.\n              ; summary link advertisement for Network N1,\n\
    \              ; originated by Router RT4 into the backbone\n              LS\
    \ age = 0                  ;always true on origination\n              Options\
    \ = (T-bit|E-bit)     ;TOS-capable\n              LS type = 3                \
    \ ;summary link to IP net\n              Link State ID = 192.1.2.0   ;N1's IP\
    \ network number\n              Advertising Router = 192.1.1.4       ;RT4's ID\n\
    \                     TOS = 0\n                     metric = 4\n             \
    \ ; summary link advertisement for AS boundary router RT7\n              ; originated\
    \ by Router RT4 into Area 1\n              LS age = 0                  ;always\
    \ true on origination\n              Options = (T-bit|E-bit)     ;TOS-capable\n\
    \              LS type = 4                 ;summary link to ASBR\n           \
    \   Link State ID = Router RT7's ID\n              Advertising Router = 192.1.1.4\
    \       ;RT4's ID\n                     TOS = 0\n                     metric =\
    \ 14\n            Summary link advertisements pertain to a single destination\n\
    \            (IP network or AS boundary router).  However, for a single\n    \
    \        destination there may be separate sets of paths, and\n            therefore\
    \ separate routing table entries, for each Type of\n            Service.  All\
    \ these entries must be considered when building\n            the summary link\
    \ advertisement for the destination; a single\n            advertisement must\
    \ specify the separate costs (if they\n            exist) for each TOS.  The encoding\
    \ of TOS in OSPF link state\n            advertisements is described in Section\
    \ 12.3.\n            Clearing the T-bit in the Options field of a summary link\n\
    \            advertisement indicates that there is a TOS 0 path to the\n     \
    \       destination, but no paths for non-zero TOS.  This can happen\n       \
    \     when non-TOS-capable routers exist in the routing domain\n            (see\
    \ Section 2.4).\n        12.4.4.  Originating summary links into stub areas\n\
    \            The algorithm in Section 12.4.3 is optional when Area A is\n    \
    \        an OSPF stub area. Area border routers connecting to a stub\n       \
    \     area can originate summary link advertisements into the area\n         \
    \   according to the above Section's algorithm, or can choose to\n           \
    \ originate only a subset of the advertisements, possibly\n            under configuration\
    \ control.  The fewer advertisements\n            originated, the smaller the\
    \ stub area's link state database,\n            further reducing the demands on\
    \ its routers' resources.\n            However, omitting advertisements may also\
    \ lead to sub-\n            optimal inter-area routing, although routing will\
    \ continue\n            to function.\n            As specified in Section 12.4.3,\
    \ Type 4 link state\n            advertisements (ASBR summary links) are never\
    \ originated\n            into stub areas.\n            In a stub area, instead\
    \ of importing external routes each\n            area border router originates\
    \ a \"default summary link\" into\n            the area. The Link State ID for\
    \ the default summary link is\n            set to DefaultDestination, and the\
    \ metric set to the (per-\n            area) configurable parameter StubDefaultCost.\
    \  Note that\n            StubDefaultCost need not be configured identically in\
    \ all of\n            the stub area's area border routers.\n        12.4.5.  AS\
    \ external links\n            AS external link advertisements describe routes\
    \ to\n            destinations external to the Autonomous System.  Most AS\n \
    \           external link advertisements describe routes to specific\n       \
    \     external destinations; in these cases the advertisement's\n            Link\
    \ State ID is set to the destination network's IP address\n            (if necessary,\
    \ the Link State ID can also have one or more\n            of the network's \"\
    host\" bits set; see Appendix F for\n            details).  However, a default\
    \ route for the Autonomous\n            System can be described in an AS external\
    \ link advertisement\n            by setting the advertisement's Link State ID\
    \ to\n            DefaultDestination (0.0.0.0).  AS external link\n          \
    \  advertisements are originated by AS boundary routers.  An AS\n            boundary\
    \ router originates a single AS external link\n            advertisement for each\
    \ external route that it has learned,\n            either through another routing\
    \ protocol (such as EGP), or\n            through configuration information.\n\
    \            In general, AS external link advertisements are the only\n      \
    \      type of link state advertisements that are flooded\n            throughout\
    \ the entire Autonomous System; all other types of\n            link state advertisements\
    \ are specific to a single area.\n            However, AS external link advertisements\
    \ are not flooded\n            into/throughout stub areas (see Section 3.6). \
    \ This enables\n            a reduction in link state database size for routers\
    \ internal\n            to stub areas.\n            The metric that is advertised\
    \ for an external route can be\n            one of two types.  Type 1 metrics\
    \ are comparable to the link\n            state metric.  Type 2 metrics are assumed\
    \ to be larger than\n            the cost of any intra-AS path.  As with summary\
    \ link\n            advertisements, if separate paths exist based on TOS,\n  \
    \          separate TOS costs can be included in the AS external link\n      \
    \      advertisement.  The encoding of TOS in OSPF link state\n            advertisements\
    \ is described in Section 12.3.  If the T-bit\n            of the advertisement's\
    \ Options field is clear, no non-zero\n            TOS paths to the destination\
    \ exist.\n            If a router advertises an AS external link advertisement\
    \ for\n            a destination which then becomes unreachable, the router\n\
    \            must then flush the advertisement from the routing domain by\n  \
    \          setting its age to MaxAge and reflooding (see Section 14.1).\n    \
    \        For an example of AS external link advertisements, consider\n       \
    \     once again the AS pictured in Figure 6.  There are two AS\n            boundary\
    \ routers: RT5 and RT7.  Router RT5 originates three\n            external link\
    \ advertisements, for networks N12-N14.  Router\n            RT7 originates two\
    \ external link advertisements, for\n            networks N12 and N15.  Assume\
    \ that RT7 has learned its route\n            to N12 via EGP, and that it wishes\
    \ to advertise a Type 2\n            metric to the AS.  RT7 would then originate\
    \ the following\n            advertisement for N12:\n              ; AS external\
    \ link advertisement for Network N12,\n              ; originated by Router RT7\n\
    \              LS age = 0                  ;always true on origination\n     \
    \         Options = (T-bit|E-bit)     ;TOS-capable\n              LS type = 5\
    \                 ;indicates AS external link\n              Link State ID = N12's\
    \ IP network number\n              Advertising Router = Router RT7's ID\n    \
    \                 bit E = 1            ;Type 2 metric\n                     TOS\
    \ = 0\n                     metric = 2\n                     Forwarding address\
    \ = 0.0.0.0\n            In the above example, the forwarding address field has\
    \ been\n            set to 0.0.0.0, indicating that packets for the external\n\
    \            destination should be forwarded to the advertising OSPF\n       \
    \     router (RT7).  This is not always desirable.  Consider the\n           \
    \ example pictured in Figure 16.  There are three OSPF routers\n            (RTA,\
    \ RTB and RTC) connected to a common network.  Only one\n            of these\
    \ routers, RTA, is exchanging EGP information with\n            the non-OSPF router\
    \ RTX.  RTA must then originate AS\n            external link advertisements for\
    \ those destinations it has\n            learned from RTX.  By using the AS external\
    \ link\n            advertisement's forwarding address field, RTA can specify\n\
    \            that packets for these destinations be forwarded directly to\n  \
    \          RTX.  Without this feature, Routers RTB and RTC would take\n      \
    \      an extra hop to get to these destinations.\n            Note that when\
    \ the forwarding address field is non-zero, it\n            should point to a\
    \ router belonging to another Autonomous\n            System.\n            A forwarding\
    \ address can also be specified for the default\n            route.  For example,\
    \ in figure 16 RTA may want to specify\n            that all externally-destined\
    \ packets should by default be\n            forwarded to its EGP peer RTX.  The\
    \ resulting AS external\n            link advertisement is pictured below.  Note\
    \ that the Link\n            State ID is set to DefaultDestination.\n        \
    \      ; Default route, originated by Router RTA\n              ; Packets forwarded\
    \ through RTX\n              LS age = 0                  ;always true on origination\n\
    \              Options = (T-bit|E-bit)          ;TOS-capable\n              LS\
    \ type = 5                 ;indicates AS external link\n              Link State\
    \ ID = DefaultDestination  ; default route\n              Advertising Router =\
    \ Router RTA's ID\n                     bit E = 1            ;Type 2 metric\n\
    \                     TOS = 0\n                     metric = 1\n             \
    \        Forwarding address = RTX's IP address\n            In figure 16, suppose\
    \ instead that both RTA and RTB exchange\n            EGP information with RTX.\
    \  In this case, RTA and RTB would\n            originate the same set of AS external\
    \ link advertisements.\n            These advertisements, if they specify the\
    \ same metric, would\n            be functionally equivalent since they would\
    \ specify the same\n            destination and forwarding address (RTX).  This\
    \ leads to a\n            clear duplication of effort.  If only one of RTA or\
    \ RTB\n            originated the set of external advertisements, the routing\n\
    \            would remain the same, and the size of the link state\n         \
    \   database would decrease.  However, it must be unambiguously\n            defined\
    \ as to which router originates the advertisements\n            (otherwise neither\
    \ may, or the identity of the originator\n            may oscillate).  The following\
    \ rule is thereby established:\n            if two routers, both reachable from\
    \ one another, originate\n            functionally equivalent AS external advertisements\
    \ (i.e.,\n            same destination, cost and non-zero forwarding address),\n\
    \            then the advertisement originated by the router having the\n    \
    \        highest OSPF Router ID is used.  The router having the lower\n      \
    \      OSPF Router ID can then flush its advertisement.  Flushing a\n        \
    \    link state advertisement is discussed in Section 14.1.\n"
- title: 13.  The Flooding Procedure
  contents:
  - "13.  The Flooding Procedure\n    Link State Update packets provide the mechanism\
    \ for flooding link\n    state advertisements.  A Link State Update packet may\
    \ contain\n    several distinct advertisements, and floods each advertisement\
    \ one\n    hop further from its point of origination.  To make the flooding\n\
    \    procedure reliable, each advertisement must be acknowledged\n    separately.\
    \  Acknowledgments are transmitted in Link State\n    Acknowledgment packets.\
    \  Many separate acknowledgments can also be\n                               \
    \ +\n                                |\n                      +---+.....|.EGP\n\
    \                      |RTA|-----|.....+---+\n                      +---+    \
    \ |-----|RTX|\n                                |     +---+\n                 \
    \     +---+     |\n                      |RTB|-----|\n                      +---+\
    \     |\n                                |\n                      +---+     |\n\
    \                      |RTC|-----|\n                      +---+     |\n      \
    \                          |\n                                +\n            \
    \   Figure 16: Forwarding address example\n    grouped together into a single\
    \ packet.\n    The flooding procedure starts when a Link State Update packet has\n\
    \    been received.  Many consistency checks have been made on the\n    received\
    \ packet before being handed to the flooding procedure (see\n    Section 8.2).\
    \  In particular, the Link State Update packet has been\n    associated with a\
    \ particular neighbor, and a particular area.  If\n    the neighbor is in a lesser\
    \ state than Exchange, the packet should\n    be dropped without further processing.\n\
    \    All types of link state advertisements, other than AS external link\n   \
    \ advertisements, are associated with a specific area.  However, link\n    state\
    \ advertisements do not contain an area field.  A link state\n    advertisement's\
    \ area must be deduced from the Link State Update\n    packet header.\n    For\
    \ each link state advertisement contained in the packet, the\n    following steps\
    \ are taken:\n    (1) Validate the advertisement's LS checksum.  If the checksum\
    \ turns\n        out to be invalid, discard the advertisement and get the next\n\
    \        one from the Link State Update packet.\n    (2) Examine the link state\
    \ advertisement's LS type.  If the LS type\n        is unknown, discard the advertisement\
    \ and get the next one from\n        the Link State Update Packet.  This specification\
    \ defines LS\n        types 1-5 (see Section 4.3).\n    (3) Else if this is a\
    \ AS external link advertisement (LS type = 5),\n        and the area has been\
    \ configured as a stub area, discard the\n        advertisement and get the next\
    \ one from the Link State Update\n        Packet.  AS external link advertisements\
    \ are not flooded\n        into/throughout stub areas (see Section 3.6).\n   \
    \ (4) Else if the advertisement's LS age is equal to MaxAge, and there\n     \
    \   is currently no instance of the advertisement in the router's\n        link\
    \ state database, then take the following actions:\n        (a) Acknowledge the\
    \ receipt of the advertisement by sending a\n            Link State Acknowledgment\
    \ packet back to the sending\n            neighbor (see Section 13.5).\n     \
    \   (b) Purge all outstanding requests for equal or previous\n            instances\
    \ of the advertisement from the sending neighbor's\n            Link State Request\
    \ list (see Section 10).\n        (c) If the sending neighbor is in state Exchange\
    \ or in state\n            Loading, then install the MaxAge advertisement in the\
    \ link\n            state database.  Otherwise, simply discard the\n         \
    \   advertisement.  In either case, examine the next\n            advertisement\
    \ (if any) listed in the Link State Update\n            packet.\n    (5) Otherwise,\
    \ find the instance of this advertisement that is\n        currently contained\
    \ in the router's link state database.  If\n        there is no database copy,\
    \ or the received advertisement is more\n        recent than the database copy\
    \ (see Section 13.1 below for the\n        determination of which advertisement\
    \ is more recent) the\n        following steps must be performed:\n        (a)\
    \ If there is already a database copy, and if the database\n            copy was\
    \ installed less than MinLSInterval seconds ago,\n            discard the new\
    \ advertisement (without acknowledging it) and\n            examine the next advertisement\
    \ (if any) listed in the Link\n            State Update packet.\n        (b) Otherwise\
    \ immediately flood the new advertisement out some\n            subset of the\
    \ router's interfaces (see Section 13.3).  In\n            some cases (e.g., the\
    \ state of the receiving interface is DR\n            and the advertisement was\
    \ received from a router other than\n            the Backup DR) the advertisement\
    \ will be flooded back out\n            the receiving interface.  This occurrence\
    \ should be noted\n            for later use by the acknowledgment process (Section\
    \ 13.5).\n        (c) Remove the current database copy from all neighbors' Link\n\
    \            state retransmission lists.\n        (d) Install the new advertisement\
    \ in the link state database\n            (replacing the current database copy).\
    \  This may cause the\n            routing table calculation to be scheduled.\
    \  In addition,\n            timestamp the new advertisement with the current\
    \ time (i.e.,\n            the time it was received).  The flooding procedure\
    \ cannot\n            overwrite the newly installed advertisement until\n    \
    \        MinLSInterval seconds have elapsed.  The advertisement\n            installation\
    \ process is discussed further in Section 13.2.\n        (e) Possibly acknowledge\
    \ the receipt of the advertisement by\n            sending a Link State Acknowledgment\
    \ packet back out the\n            receiving interface.  This is explained below\
    \ in Section\n            13.5.\n        (f) If this new link state advertisement\
    \ indicates that it was\n            originated by the receiving router itself\
    \ (i.e., is\n            considered a self-originated advertisement), the router\
    \ must\n            take special action, either updating the advertisement or\
    \ in\n            some cases flushing it from the routing domain. For a\n    \
    \        description of how self-originated advertisements are\n            detected\
    \ and subsequently handled, see Section 13.4.\n    (6) Else, if there is an instance\
    \ of the advertisement on the\n        sending neighbor's Link state request list,\
    \ an error has\n        occurred in the Database Exchange process.  In this case,\n\
    \        restart the Database Exchange process by generating the neighbor\n  \
    \      event BadLSReq for the sending neighbor and stop processing the\n     \
    \   Link State Update packet.\n    (7) Else, if the received advertisement is\
    \ the same instance as the\n        database copy (i.e., neither one is more recent)\
    \ the following\n        two steps should be performed:\n        (a) If the advertisement\
    \ is listed in the Link state\n            retransmission list for the receiving\
    \ adjacency, the router\n            itself is expecting an acknowledgment for\
    \ this\n            advertisement.  The router should treat the received\n   \
    \         advertisement as an acknowledgment, by removing the\n            advertisement\
    \ from the Link state retransmission list.  This\n            is termed an \"\
    implied acknowledgment\".  Its occurrence\n            should be noted for later\
    \ use by the acknowledgment process\n            (Section 13.5).\n        (b)\
    \ Possibly acknowledge the receipt of the advertisement by\n            sending\
    \ a Link State Acknowledgment packet back out the\n            receiving interface.\
    \  This is explained below in Section\n            13.5.\n    (8) Else, the database\
    \ copy is more recent.  Note an unusual event\n        to network management,\
    \ discard the advertisement and process the\n        next link state advertisement\
    \ contained in the Link State Update\n        packet.\n    13.1.  Determining\
    \ which link state is newer\n        When a router encounters two instances of\
    \ a link state\n        advertisement, it must determine which is more recent.\
    \  This\n        occurred above when comparing a received advertisement to its\n\
    \        database copy.  This comparison must also be done during the\n      \
    \  Database Exchange procedure which occurs during adjacency\n        bring-up.\n\
    \        A link state advertisement is identified by its LS type, Link\n     \
    \   State ID and Advertising Router.  For two instances of the same\n        advertisement,\
    \ the LS sequence number, LS age, and LS checksum\n        fields are used to\
    \ determine which instance is more recent:\n        o   The advertisement having\
    \ the newer LS sequence number is\n            more recent.  See Section 12.1.6\
    \ for an explanation of the\n            LS sequence number space.  If both instances\
    \ have the same\n            LS sequence number, then:\n        o   If the two\
    \ instances have different LS checksums, then the\n            instance having\
    \ the larger LS checksum (when considered as a\n            16-bit unsigned integer)\
    \ is considered more recent.\n        o   Else, if only one of the instances has\
    \ its LS age field set\n            to MaxAge, the instance of age MaxAge is considered\
    \ to be\n            more recent.\n        o   Else, if the LS age fields of the\
    \ two instances differ by\n            more than MaxAgeDiff, the instance having\
    \ the smaller\n            (younger) LS age is considered to be more recent.\n\
    \        o   Else, the two instances are considered to be identical.\n    13.2.\
    \  Installing link state advertisements in the database\n        Installing a\
    \ new link state advertisement in the database,\n        either as the result\
    \ of flooding or a newly self-originated\n        advertisement, may cause the\
    \ OSPF routing table structure to be\n        recalculated.  The contents of the\
    \ new advertisement should be\n        compared to the old instance, if present.\
    \  If there is no\n        difference, there is no need to recalculate the routing\
    \ table.\n        (Note that even if the contents are the same, the LS checksum\n\
    \        will probably be different, since the checksum covers the LS\n      \
    \  sequence number.)\n        If the contents are different, the following pieces\
    \ of the\n        routing table must be recalculated, depending on the new\n \
    \       advertisement's LS type field:\n        Router links and network links\
    \ advertisements\n            The entire routing table must be recalculated, starting\
    \ with\n            the shortest path calculations for each area (not just the\n\
    \            area whose topological database has changed).  The reason\n     \
    \       that the shortest path calculation cannot be restricted to\n         \
    \   the single changed area has to do with the fact that AS\n            boundary\
    \ routers may belong to multiple areas.  A change in\n            the area currently\
    \ providing the best route may force the\n            router to use an intra-area\
    \ route provided by a different\n            area.[16]\n        Summary link advertisements\n\
    \            The best route to the destination described by the summary\n    \
    \        link advertisement must be recalculated (see Section 16.5).\n       \
    \     If this destination is an AS boundary router, it may also be\n         \
    \   necessary to re-examine all the AS external link\n            advertisements.\n\
    \        AS external link advertisements\n            The best route to the destination\
    \ described by the AS\n            external link advertisement must be recalculated\
    \ (see\n            Section 16.6).\n        Also, any old instance of the advertisement\
    \ must be removed from\n        the database when the new advertisement is installed.\
    \  This old\n        instance must also be removed from all neighbors' Link state\n\
    \        retransmission lists (see Section 10).\n    13.3.  Next step in the flooding\
    \ procedure\n        When a new (and more recent) advertisement has been received,\
    \ it\n        must be flooded out some set of the router's interfaces.  This\n\
    \        section describes the second part of flooding procedure (the\n      \
    \  first part being the processing that occurred in Section 13),\n        namely,\
    \ selecting the outgoing interfaces and adding the\n        advertisement to the\
    \ appropriate neighbors' Link state\n        retransmission lists.  Also included\
    \ in this part of the\n        flooding procedure is the maintenance of the neighbors'\
    \ Link\n        state request lists.\n        This section is equally applicable\
    \ to the flooding of an\n        advertisement that the router itself has just\
    \ originated (see\n        Section 12.4).  For these advertisements, this section\
    \ provides\n        the entirety of the flooding procedure (i.e., the processing\
    \ of\n        Section 13 is not performed, since, for example, the\n        advertisement\
    \ has not been received from a neighbor and\n        therefore does not need to\
    \ be acknowledged).\n        Depending upon the advertisement's LS type, the advertisement\n\
    \        can be flooded out only certain interfaces.  These interfaces,\n    \
    \    defined by the following, are called the eligible interfaces:\n        AS\
    \ external link advertisements (LS Type = 5)\n            AS external link advertisements\
    \ are flooded throughout the\n            entire AS, with the exception of stub\
    \ areas (see Section\n            3.6).  The eligible interfaces are all the router's\n\
    \            interfaces, excluding virtual links and those interfaces\n      \
    \      attaching to stub areas.\n        All other LS types\n            All other\
    \ types are specific to a single area (Area A).  The\n            eligible interfaces\
    \ are all those interfaces attaching to\n            the Area A.  If Area A is\
    \ the backbone, this includes all\n            the virtual links.\n        Link\
    \ state databases must remain synchronized over all\n        adjacencies associated\
    \ with the above eligible interfaces.  This\n        is accomplished by executing\
    \ the following steps on each\n        eligible interface.  It should be noted\
    \ that this procedure may\n        decide not to flood a link state advertisement\
    \ out a particular\n        interface, if there is a high probability that the\
    \ attached\n        neighbors have already received the advertisement.  However,\
    \ in\n        these cases the flooding procedure must be absolutely sure that\n\
    \        the neighbors eventually do receive the advertisement, so the\n     \
    \   advertisement is still added to each adjacency's Link state\n        retransmission\
    \ list.  For each eligible interface:\n        (1) Each of the neighbors attached\
    \ to this interface are\n            examined, to determine whether they must\
    \ receive the new\n            advertisement.  The following steps are executed\
    \ for each\n            neighbor:\n            (a) If the neighbor is in a lesser\
    \ state than Exchange, it\n                does not participate in flooding, and\
    \ the next neighbor\n                should be examined.\n            (b) Else,\
    \ if the adjacency is not yet full (neighbor state\n                is Exchange\
    \ or Loading), examine the Link state request\n                list associated\
    \ with this adjacency.  If there is an\n                instance of the new advertisement\
    \ on the list, it\n                indicates that the neighboring router has an\
    \ instance of\n                the advertisement already.  Compare the new\n \
    \               advertisement to the neighbor's copy:\n                o   If\
    \ the new advertisement is less recent, then\n                    examine the\
    \ next neighbor.\n                o   If the two copies are the same instance,\
    \ then delete\n                    the advertisement from the Link state request\
    \ list,\n                    and examine the next neighbor.[17]\n            \
    \    o   Else, the new advertisement is more recent.  Delete\n               \
    \     the advertisement from the Link state request list.\n            (c) If\
    \ the new advertisement was received from this\n                neighbor, examine\
    \ the next neighbor.\n            (d) At this point we are not positive that the\
    \ neighbor has\n                an up-to-date instance of this new advertisement.\
    \  Add\n                the new advertisement to the Link state retransmission\n\
    \                list for the adjacency.  This ensures that the flooding\n   \
    \             procedure is reliable; the advertisement will be\n             \
    \   retransmitted at intervals until an acknowledgment is\n                seen\
    \ from the neighbor.\n        (2) The router must now decide whether to flood\
    \ the new link\n            state advertisement out this interface.  If in the\
    \ previous\n            step, the link state advertisement was NOT added to any\
    \ of\n            the Link state retransmission lists, there is no need to\n \
    \           flood the advertisement out the interface and the next\n         \
    \   interface should be examined.\n        (3) If the new advertisement was received\
    \ on this interface, and\n            it was received from either the Designated\
    \ Router or the\n            Backup Designated Router, chances are that all the\
    \ neighbors\n            have received the advertisement already.  Therefore,\
    \ examine\n            the next interface.\n        (4) If the new advertisement\
    \ was received on this interface, and\n            the interface state is Backup\
    \ (i.e., the router itself is\n            the Backup Designated Router), examine\
    \ the next interface.\n            The Designated Router will do the flooding\
    \ on this\n            interface.  If the Designated Router fails, this router\
    \ will\n            end up retransmitting the updates.\n        (5) If this step\
    \ is reached, the advertisement must be flooded\n            out the interface.\
    \  Send a Link State Update packet (with\n            the new advertisement as\
    \ contents) out the interface.  The\n            advertisement's LS age must be\
    \ incremented by InfTransDelay\n            (which must be > 0) when copied into\
    \ the outgoing Link State\n            Update packet (until the LS age field reaches\
    \ its maximum\n            value of MaxAge).\n            On broadcast networks,\
    \ the Link State Update packets are\n            multicast.  The destination IP\
    \ address specified for the\n            Link State Update Packet depends on the\
    \ state of the\n            interface.  If the interface state is DR or Backup,\
    \ the\n            address AllSPFRouters should be used.  Otherwise, the\n   \
    \         address AllDRouters should be used.\n            On non-broadcast, multi-access\
    \ networks, separate Link State\n            Update packets must be sent, as unicasts,\
    \ to each adjacent\n            neighbor (i.e., those in state Exchange or greater).\
    \  The\n            destination IP addresses for these packets are the\n     \
    \       neighbors' IP addresses.\n    13.4.  Receiving self-originated link state\n\
    \        It is a common occurrence for a router to receive self-\n        originated\
    \ link state advertisements via the flooding procedure.\n        A self-originated\
    \ advertisement is detected when either 1) the\n        advertisement's Advertising\
    \ Router is equal to the router's own\n        Router ID or 2) the advertisement\
    \ is a network links\n        advertisement and its Link State ID is equal to\
    \ one of the\n        router's own IP interface addresses.\n        However, if\
    \ the received self-originated advertisement is newer\n        than the last instance\
    \ that the router actually originated, the\n        router must take special action.\
    \  The reception of such an\n        advertisement indicates that there are link\
    \ state advertisements\n        in the routing domain that were originated before\
    \ the last time\n        the router was restarted. In most cases, the router must\
    \ then\n        advance the advertisement's LS sequence number one past the\n\
    \        received LS sequence number, and originate a new instance of the\n  \
    \      advertisement.\n        It may be the case the router no longer wishes\
    \ to originate the\n        received advertisement. Possible examples include:\
    \ 1) the\n        advertisement is a summary link or AS external link and the\n\
    \        router no longer has an (advertisable) route to the destination,\n  \
    \      2) the advertisement is a network links advertisement but the\n       \
    \ router is no longer Designated Router for the network or 3) the\n        advertisement\
    \ is a network links advertisement whose Link State\n        ID is one of the\
    \ router's own IP interface addresses but whose\n        Advertising Router is\
    \ not equal to the router's own Router ID\n        (this latter case should be\
    \ rare, and it indicates that the\n        router's Router ID has changed since\
    \ originating the\n        advertisement).  In all these cases, instead of updating\
    \ the\n        advertisement, the advertisement should be flushed from the\n \
    \       routing domain by incrementing the received advertisement's LS\n     \
    \   age to MaxAge and reflooding (see Section 14.1).\n    13.5.  Sending Link\
    \ State Acknowledgment packets\n        Each newly received link state advertisement\
    \ must be\n        acknowledged.  This is usually done by sending Link State\n\
    \        Acknowledgment packets.  However, acknowledgments can also be\n     \
    \   accomplished implicitly by sending Link State Update packets\n        (see\
    \ step 7a of Section 13).\n        Many acknowledgments may be grouped together\
    \ into a single Link\n        State Acknowledgment packet.  Such a packet is sent\
    \ back out the\n        interface that has received the advertisements.  The packet\
    \ can\n        be sent in one of two ways: delayed and sent on an interval\n \
    \       timer, or sent directly (as a unicast) to a particular neighbor.\n   \
    \     The particular acknowledgment strategy used depends on the\n        circumstances\
    \ surrounding the receipt of the advertisement.\n        Sending delayed acknowledgments\
    \ accomplishes several things: it\n        facilitates the packaging of multiple\
    \ acknowledgments in a\n        single Link State Acknowledgment packet; it enables\
    \ a single\n        Link State Acknowledgment packet to indicate acknowledgments\
    \ to\n        several neighbors at once (through multicasting); and it\n     \
    \   randomizes the Link State Acknowledgment packets sent by the\n        various\
    \ routers attached to a multi-access network.  The fixed\n        interval between\
    \ a router's delayed transmissions must be short\n        (less than RxmtInterval)\
    \ or needless retransmissions will ensue.\n        Direct acknowledgments are\
    \ sent to a particular neighbor in\n        response to the receipt of duplicate\
    \ link state advertisements.\n        These acknowledgments are sent as unicasts,\
    \ and are sent\n        immediately when the duplicate is received.\n        The\
    \ precise procedure for sending Link State Acknowledgment\n        packets is\
    \ described in Table 19.  The circumstances surrounding\n        the receipt of\
    \ the advertisement are listed in the left column.\n        The acknowledgment\
    \ action then taken is listed in one of the two\n        right columns.  This\
    \ action depends on the state of the\n        concerned interface; interfaces\
    \ in state Backup behave\n        differently from interfaces in all other states.\
    \  Delayed\n        acknowledgments must be delivered to all adjacent routers\n\
    \        associated with the interface.  On broadcast networks, this is\n    \
    \    accomplished by sending the delayed Link State Acknowledgment\n        packets\
    \ as multicasts.  The Destination IP address used depends\n        on the state\
    \ of the interface.  If the state is DR or Backup,\n        the destination AllSPFRouters\
    \ is used.  In other states, the\n        destination AllDRouters is used.  On\
    \ non-broadcast networks,\n        delayed Link State Acknowledgment packets must\
    \ be unicast\n        separately over each adjacency (i.e., neighbor whose state\
    \ is >=\n        Exchange).\n        The reasoning behind sending the above packets\
    \ as multicasts is\n        best explained by an example.  Consider the network\n\
    \        configuration depicted in Figure 15.  Suppose RT4 has been\n        elected\
    \ as Designated Router, and RT3 as Backup Designated\n        Router for the network\
    \ N3.  When Router RT4 floods a new\n        advertisement to Network N3, it is\
    \ received by routers RT1, RT2,\n        and RT3.  These routers will not flood\
    \ the advertisement back\n        onto net N3, but they still must ensure that\
    \ their topological\n        databases remain synchronized with their adjacent\
    \ neighbors.  So\n        RT1, RT2, and RT4 are waiting to see an acknowledgment\
    \ from RT3.\n        Likewise, RT4 and RT3 are both waiting to see acknowledgments\n\
    \        from RT1 and RT2.  This is best achieved by sending the\n        acknowledgments\
    \ as multicasts.\n        The reason that the acknowledgment logic for Backup\
    \ DRs is\n        slightly different is because they perform differently during\n\
    \        the flooding of link state advertisements (see Section 13.3,\n      \
    \  step 4).\n    13.6.  Retransmitting link state advertisements\n        Advertisements\
    \ flooded out an adjacency are placed on the\n        adjacency's Link state retransmission\
    \ list.  In order to ensure\n        that flooding is reliable, these advertisements\
    \ are\n        retransmitted until they are acknowledged.  The length of time\n\
    \        between retransmissions is a configurable per-interface value,\n    \
    \    RxmtInterval.  If this is set too low for an interface, needless\n      \
    \  retransmissions will ensue.  If the value is set too high, the\n        speed\
    \ of the flooding, in the face of lost packets, may be\n                     \
    \               Action taken in state\n    Circumstances          Backup     \
    \           All other states\n    _______________________________________________________________\n\
    \    Advertisement  has     No  acknowledgment    No  acknowledgment\n    been\
    \  flooded back     sent.                 sent.\n    out receiving  in-\n    terface\
    \  (see Sec-\n    tion 13, step 5b).\n    _______________________________________________________________\n\
    \    Advertisement   is     Delayed acknowledg-   Delayed       ack-\n    more\
    \  recent  than     ment sent if adver-   nowledgment sent.\n    database copy,\
    \ but     tisement   received\n    was   not  flooded     from    Designated\n\
    \    back out receiving     Router,  otherwise\n    interface              do\
    \ nothing\n    _______________________________________________________________\n\
    \    Advertisement is a     Delayed acknowledg-   No  acknowledgment\n    duplicate,\
    \ and was     ment sent if adver-   sent.\n    treated as an  im-     tisement\
    \   received\n    plied  acknowledg-     from    Designated\n    ment (see  Section\
    \     Router,  otherwise\n    13, step 7a).          do nothing\n    _______________________________________________________________\n\
    \    Advertisement is a     Direct acknowledg-    Direct acknowledg-\n    duplicate,\
    \ and was     ment sent.            ment sent.\n    not treated as  an\n    implied\
    \       ack-\n    nowledgment.\n    _______________________________________________________________\n\
    \    Advertisement's LS     Direct acknowledg-    Direct acknowledg-\n    age\
    \ is equal to        ment sent.            ment sent.\n    MaxAge, and there is\n\
    \    no current instance\n    of the advertisement\n    in the link state\n  \
    \  database (see\n    Section 13, step 4).\n             Table 19: Sending link\
    \ state acknowledgements.\n        affected.\n        Several retransmitted advertisements\
    \ may fit into a single Link\n        State Update packet.  When advertisements\
    \ are to be\n        retransmitted, only the number fitting in a single Link State\n\
    \        Update packet should be transmitted.  Another packet of\n        retransmissions\
    \ can be sent when some of the advertisements are\n        acknowledged, or on\
    \ the next firing of the retransmission timer.\n        Link State Update Packets\
    \ carrying retransmissions are always\n        sent as unicasts (directly to the\
    \ physical address of the\n        neighbor).  They are never sent as multicasts.\
    \  Each\n        advertisement's LS age must be incremented by InfTransDelay\n\
    \        (which must be > 0) when copied into the outgoing Link State\n      \
    \  Update packet (until the LS age field reaches its maximum value\n        of\
    \ MaxAge).\n        If the adjacent router goes down, retransmissions may occur\n\
    \        until the adjacency is destroyed by OSPF's Hello Protocol.  When\n  \
    \      the adjacency is destroyed, the Link state retransmission list\n      \
    \  is cleared.\n    13.7.  Receiving link state acknowledgments\n        Many\
    \ consistency checks have been made on a received Link State\n        Acknowledgment\
    \ packet before it is handed to the flooding\n        procedure.  In particular,\
    \ it has been associated with a\n        particular neighbor.  If this neighbor\
    \ is in a lesser state than\n        Exchange, the Link State Acknowledgment packet\
    \ is discarded.\n        Otherwise, for each acknowledgment in the Link State\n\
    \        Acknowledgment packet, the following steps are performed:\n        o\
    \   Does the advertisement acknowledged have an instance on the\n            Link\
    \ state retransmission list for the neighbor?  If not,\n            examine the\
    \ next acknowledgment.  Otherwise:\n        o   If the acknowledgment is for the\
    \ same instance that is\n            contained on the list, remove the item from\
    \ the list and\n            examine the next acknowledgment.  Otherwise:\n   \
    \     o   Log the questionable acknowledgment, and examine the next\n        \
    \    one.\n"
- title: 14.  Aging The Link State Database
  contents:
  - "14.  Aging The Link State Database\n    Each link state advertisement has an\
    \ LS age field.  The LS age is\n    expressed in seconds.  An advertisement's\
    \ LS age field is\n    incremented while it is contained in a router's database.\
    \  Also,\n    when copied into a Link State Update Packet for flooding out a\n\
    \    particular interface, the advertisement's LS age is incremented by\n    InfTransDelay.\n\
    \    An advertisement's LS age is never incremented past the value\n    MaxAge.\
    \  Advertisements having age MaxAge are not used in the\n    routing table calculation.\
    \  As a router ages its link state\n    database, an advertisement's LS age may\
    \ reach MaxAge.[18] At this\n    time, the router must attempt to flush the advertisement\
    \ from the\n    routing domain.  This is done simply by reflooding the MaxAge\n\
    \    advertisement just as if it was a newly originated advertisement\n    (see\
    \ Section 13.3).\n    When creating a Database summary list for a newly forming\
    \ adjacency,\n    any MaxAge advertisements present in the link state database\
    \ are\n    added to the neighbor's Link state retransmission list instead of\n\
    \    the neighbor's Database summary list.  See Section 10.3 for more\n    details.\n\
    \    A MaxAge advertisement must be removed immediately from the router's\n  \
    \  link state database as soon as both a) it is no longer contained on\n    any\
    \ neighbor Link state retransmission lists and b) none of the\n    router's neighbors\
    \ are in states Exchange or Loading.\n    When, in the process of aging the link\
    \ state database, an\n    advertisement's LS age hits a multiple of CheckAge,\
    \ its LS checksum\n    should be verified.  If the LS checksum is incorrect, a\
    \ program or\n    memory error has been detected, and at the very least the router\n\
    \    itself should be restarted.\n    14.1.  Premature aging of advertisements\n\
    \        A link state advertisement can be flushed from the routing\n        domain\
    \ by setting its LS age to MaxAge and reflooding the\n        advertisement. \
    \ This procedure follows the same course as\n        flushing an advertisement\
    \ whose LS age has naturally reached the\n        value MaxAge (see Section 14).\
    \  In particular, the MaxAge\n        advertisement is removed from the router's\
    \ link state database\n        as soon as a) it is no longer contained on any\
    \ neighbor Link\n        state retransmission lists and b) none of the router's\
    \ neighbors\n        are in states Exchange or Loading.  We call the setting of\
    \ an\n        advertisement's LS age to MaxAge premature aging.\n        Premature\
    \ aging is used when it is time for a self-originated\n        advertisement's\
    \ sequence number field to wrap.  At this point,\n        the current advertisement\
    \ instance (having LS sequence number of\n        0x7fffffff) must be prematurely\
    \ aged and flushed from the\n        routing domain before a new instance with\
    \ sequence number\n        0x80000001 can be originated.  See Section 12.1.6 for\
    \ more\n        information.\n        Premature aging can also be used when, for\
    \ example, one of the\n        router's previously advertised external routes\
    \ is no longer\n        reachable.  In this circumstance, the router can flush\
    \ its\n        external advertisement from the routing domain via premature\n\
    \        aging. This procedure is preferable to the alternative, which is\n  \
    \      to originate a new advertisement for the destination specifying\n     \
    \   a metric of LSInfinity.  Premature aging is also be used when\n        unexpectedly\
    \ receiving self-originated advertisements during the\n        flooding procedure\
    \ (see Section 13.4).\n        A router may only prematurely age its own self-originated\
    \ link\n        state advertisements. The router may not prematurely age\n   \
    \     advertisements that have been originated by other routers. An\n        advertisement\
    \ is considered self-originated when either 1) the\n        advertisement's Advertising\
    \ Router is equal to the router's own\n        Router ID or 2) the advertisement\
    \ is a network links\n        advertisement and its Link State ID is equal to\
    \ one of the\n        router's own IP interface addresses.\n"
- title: 15.  Virtual Links
  contents:
  - "15.  Virtual Links\n    The single backbone area (Area ID = 0.0.0.0) cannot be\
    \ disconnected,\n    or some areas of the Autonomous System will become unreachable.\
    \  To\n    establish/maintain connectivity of the backbone, virtual links can\n\
    \    be configured through non-backbone areas.  Virtual links serve to\n    connect\
    \ physically separate components of the backbone.  The two\n    endpoints of a\
    \ virtual link are area border routers.  The virtual\n    link must be configured\
    \ in both routers.  The configuration\n    information in each router consists\
    \ of the other virtual endpoint\n    (the other area border router), and the non-backbone\
    \ area the two\n    routers have in common (called the transit area).  Virtual\
    \ links\n    cannot be configured through stub areas (see Section 3.6).\n    The\
    \ virtual link is treated as if it were an unnumbered point-to-\n    point network\
    \ (belonging to the backbone) joining the two area\n    border routers.  An attempt\
    \ is made to establish an adjacency over\n    the virtual link.  When this adjacency\
    \ is established, the virtual\n    link will be included in backbone router links\
    \ advertisements, and\n    OSPF packets pertaining to the backbone area will flow\
    \ over the\n    adjacency.  Such an adjacency has been referred to in this document\n\
    \    as a \"virtual adjacency\".\n    In each endpoint router, the cost and viability\
    \ of the virtual link\n    is discovered by examining the routing table entry\
    \ for the other\n    endpoint router.  (The entry's associated area must be the\n\
    \    configured transit area).  Actually, there may be a separate routing\n  \
    \  table entry for each Type of Service.  These are called the virtual\n    link's\
    \ corresponding routing table entries.  The InterfaceUp event\n    occurs for\
    \ a virtual link when its corresponding TOS 0 routing table\n    entry becomes\
    \ reachable.  Conversely, the InterfaceDown event occurs\n    when its TOS 0 routing\
    \ table entry becomes unreachable.[19] In other\n    words, the virtual link's\
    \ viability is determined by the existence\n    of an intra-area path, through\
    \ the transit area, between the two\n    endpoints.  Note that a virtual link\
    \ whose underlying path has cost\n    greater than hexadecimal 0xffff (the maximum\
    \ size of an interface\n    cost in a router links advertisement) should be considered\n\
    \    inoperational (i.e., treated the same as if the path did not exist).\n  \
    \  The other details concerning virtual links are as follows:\n    o   AS external\
    \ links are NEVER flooded over virtual adjacencies.\n        This would be duplication\
    \ of effort, since the same AS external\n        links are already flooded throughout\
    \ the virtual link's transit\n        area.  For this same reason, AS external\
    \ link advertisements are\n        not summarized over virtual adjacencies during\
    \ the Database\n        Exchange process.\n    o   The cost of a virtual link\
    \ is NOT configured.  It is defined to\n        be the cost of the intra-area\
    \ path between the two defining area\n        border routers.  This cost appears\
    \ in the virtual link's\n        corresponding routing table entry.  When the\
    \ cost of a virtual\n        link changes, a new router links advertisement should\
    \ be\n        originated for the backbone area.\n    o   Just as the virtual link's\
    \ cost and viability are determined by\n        the routing table build process\
    \ (through construction of the\n        routing table entry for the other endpoint),\
    \ so are the IP\n        interface address for the virtual interface and the virtual\n\
    \        neighbor's IP address.  These are used when sending OSPF\n        protocol\
    \ packets over the virtual link. Note that when one (or\n        both) of the\
    \ virtual link endpoints connect to the transit area\n        via an unnumbered\
    \ point-to-point link, it may be impossible to\n        calculate either the virtual\
    \ interface's IP address and/or the\n        virtual neighbor's IP address, thereby\
    \ causing the virtual link\n        to fail.\n    o   In each endpoint's router\
    \ links advertisement for the backbone,\n        the virtual link is represented\
    \ as a Type 4 link whose Link ID\n        is set to the virtual neighbor's OSPF\
    \ Router ID and whose Link\n        Data is set to the virtual interface's IP\
    \ address.  See Section\n        12.4.1 for more information. Note that it may\
    \ be the case that\n        there is a TOS 0 path, but no non-zero TOS paths,\
    \ between the\n        two endpoint routers.  In this case, both routers must\
    \ revert to\n        being non-TOS-capable, clearing the T-bit in the Options\
    \ field\n        of their backbone router links advertisements.\n    o   When\
    \ virtual links are configured for the backbone, information\n        concerning\
    \ backbone networks should not be condensed before\n        being summarized for\
    \ the transit areas.  In other words, each\n        backbone network should be\
    \ advertised into the transit areas in\n        a separate summary link advertisement,\
    \ regardless of the\n        backbone's configured area address ranges.  See Section\
    \ 12.4.3\n        for more information.\n    o   The time between link state retransmissions,\
    \ RxmtInterval, is\n        configured for a virtual link.  This should be well\
    \ over the\n        expected round-trip delay between the two routers.  This may\
    \ be\n        hard to estimate for a virtual link; it is better to err on the\n\
    \        side of making it too large.\n"
- title: 16.  Calculation Of The Routing Table
  contents:
  - "16.  Calculation Of The Routing Table\n    This section details the OSPF routing\
    \ table calculation.  Using its\n    attached areas' link state databases as input,\
    \ a router runs the\n    following algorithm, building its routing table step\
    \ by step.  At\n    each step, the router must access individual pieces of the\
    \ link\n    state databases (e.g., a router links advertisement originated by\
    \ a\n    certain router).  This access is performed by the lookup function\n \
    \   discussed in Section 12.2.  The lookup process may return a link\n    state\
    \ advertisement whose LS age is equal to MaxAge.  Such an\n    advertisement should\
    \ not be used in the routing table calculation,\n    and is treated just as if\
    \ the lookup process had failed.\n    The OSPF routing table's organization is\
    \ explained in Section 11.\n    Two examples of the routing table build process\
    \ are presented in\n    Sections 11.2 and 11.3.  This process can be broken into\
    \ the\n    following steps:\n    (1) The present routing table is invalidated.\
    \  The routing table is\n        built again from scratch.  The old routing table\
    \ is saved so\n        that changes in routing table entries can be identified.\n\
    \    (2) The intra-area routes are calculated by building the shortest-\n    \
    \    path tree for each attached area.  In particular, all routing\n        table\
    \ entries whose Destination Type is \"area border router\" are\n        calculated\
    \ in this step.  This step is described in two parts.\n        At first the tree\
    \ is constructed by only considering those links\n        between routers and\
    \ transit networks.  Then the stub networks\n        are incorporated into the\
    \ tree. During the area's shortest-path\n        tree calculation, the area's\
    \ TransitCapability is also\n        calculated for later use in Step 4.\n   \
    \ (3) The inter-area routes are calculated, through examination of\n        summary\
    \ link advertisements.  If the router is attached to\n        multiple areas (i.e.,\
    \ it is an area border router), only\n        backbone summary link advertisements\
    \ are examined.\n    (4) In area border routers connecting to one or more transit\
    \ areas\n        (i.e, non-backbone areas whose TransitCapability is found to\
    \ be\n        TRUE), the transit areas' summary link advertisements are\n    \
    \    examined to see whether better paths exist using the transit\n        areas\
    \ than were found in Steps 2-3 above.\n    (5) Routes to external destinations\
    \ are calculated, through\n        examination of AS external link advertisements.\
    \  The locations\n        of the AS boundary routers (which originate the AS external\
    \ link\n        advertisements) have been determined in steps 2-4.\n    Steps\
    \ 2-5 are explained in further detail below.  The explanations\n    describe the\
    \ calculations for TOS 0 only.  It may also be necessary\n    to perform each\
    \ step (separately) for each of the non-zero TOS\n    values.[20] For more information\
    \ concerning the building of non-zero\n    TOS routes see Section 16.9.\n    Changes\
    \ made to routing table entries as a result of these\n    calculations can cause\
    \ the OSPF protocol to take further actions.\n    For example, a change to an\
    \ intra-area route will cause an area\n    border router to originate new summary\
    \ link advertisements (see\n    Section 12.4).  See Section 16.7 for a complete\
    \ list of the OSPF\n    protocol actions resulting from routing table changes.\n\
    \    16.1.  Calculating the shortest-path tree for an area\n        This calculation\
    \ yields the set of intra-area routes associated\n        with an area (called\
    \ hereafter Area A).  A router calculates the\n        shortest-path tree using\
    \ itself as the root.[21] The formation\n        of the shortest path tree is\
    \ done here in two stages.  In the\n        first stage, only links between routers\
    \ and transit networks are\n        considered.  Using the Dijkstra algorithm,\
    \ a tree is formed from\n        this subset of the link state database.  In the\
    \ second stage,\n        leaves are added to the tree by considering the links\
    \ to stub\n        networks.\n        The procedure will be explained using the\
    \ graph terminology that\n        was introduced in Section 2.  The area's link\
    \ state database is\n        represented as a directed graph.  The graph's vertices\
    \ are\n        routers, transit networks and stub networks.  The first stage of\n\
    \        the procedure concerns only the transit vertices (routers and\n     \
    \   transit networks) and their connecting links.  Throughout the\n        shortest\
    \ path calculation, the following data is also associated\n        with each transit\
    \ vertex:\n        Vertex (node) ID\n            A 32-bit number uniquely identifying\
    \ the vertex.  For router\n            vertices this is the router's OSPF Router\
    \ ID.  For network\n            vertices, this is the IP address of the network's\
    \ Designated\n            Router.\n        A link state advertisement\n      \
    \      Each transit vertex has an associated link state\n            advertisement.\
    \  For router vertices, this is a router links\n            advertisement.  For\
    \ transit networks, this is a network\n            links advertisement (which\
    \ is actually originated by the\n            network's Designated Router).  In\
    \ any case, the\n            advertisement's Link State ID is always equal to\
    \ the above\n            Vertex ID.\n        List of next hops\n            The\
    \ list of next hops for the current set of shortest paths\n            from the\
    \ root to this vertex.  There can be multiple\n            shortest paths due\
    \ to the equal-cost multipath capability.\n            Each next hop indicates\
    \ the outgoing router interface to use\n            when forwarding traffic to\
    \ the destination.  On multi-access\n            networks, the next hop also includes\
    \ the IP address of the\n            next router (if any) in the path towards\
    \ the destination.\n        Distance from root\n            The link state cost\
    \ of the current set of shortest paths\n            from the root to the vertex.\
    \  The link state cost of a path\n            is calculated as the sum of the\
    \ costs of the path's\n            constituent links (as advertised in router\
    \ links and network\n            links advertisements).  One path is said to be\
    \ \"shorter\"\n            than another if it has a smaller link state cost.\n\
    \        The first stage of the procedure (i.e., the Dijkstra algorithm)\n   \
    \     can now be summarized as follows. At each iteration of the\n        algorithm,\
    \ there is a list of candidate vertices.  Paths from\n        the root to these\
    \ vertices have been found, but not necessarily\n        the shortest ones.  However,\
    \ the paths to the candidate vertex\n        that is closest to the root are guaranteed\
    \ to be shortest; this\n        vertex is added to the shortest-path tree, removed\
    \ from the\n        candidate list, and its adjacent vertices are examined for\n\
    \        possible addition to/modification of the candidate list.  The\n     \
    \   algorithm then iterates again.  It terminates when the candidate\n       \
    \ list becomes empty.\n        The following steps describe the algorithm in detail.\
    \  Remember\n        that we are computing the shortest path tree for Area A.\
    \  All\n        references to link state database lookup below are from Area A's\n\
    \        database.\n        (1) Initialize the algorithm's data structures.  Clear\
    \ the list\n            of candidate vertices.  Initialize the shortest-path tree\
    \ to\n            only the root (which is the router doing the calculation).\n\
    \            Set Area A's TransitCapability to FALSE.\n        (2) Call the vertex\
    \ just added to the tree vertex V.  Examine\n            the link state advertisement\
    \ associated with vertex V.  This\n            is a lookup in the Area A's link\
    \ state database based on the\n            Vertex ID.  If this is a router links\
    \ advertisement, and bit\n            V of the router links advertisement (see\
    \ Section A.4.2) is\n            set, set Area A's TransitCapability to TRUE.\
    \  In any case,\n            each link described by the advertisement gives the\
    \ cost to\n            an adjacent vertex.  For each described link, (say it joins\n\
    \            vertex V to vertex W):\n            (a) If this is a link to a stub\
    \ network, examine the next\n                link in V's advertisement.  Links\
    \ to stub networks will\n                be considered in the second stage of\
    \ the shortest path\n                calculation.\n            (b) Otherwise,\
    \ W is a transit vertex (router or transit\n                network).  Look up\
    \ the vertex W's link state\n                advertisement (router links or network\
    \ links) in Area\n                A's link state database.  If the advertisement\
    \ does not\n                exist, or its LS age is equal to MaxAge, or it does\
    \ not\n                have a link back to vertex V, examine the next link in\n\
    \                V's advertisement.[22]\n            (c) If vertex W is already\
    \ on the shortest-path tree,\n                examine the next link in the advertisement.\n\
    \            (d) Calculate the link state cost D of the resulting path\n     \
    \           from the root to vertex W.  D is equal to the sum of the\n       \
    \         link state cost of the (already calculated) shortest\n             \
    \   path to vertex V and the advertised cost of the link\n                between\
    \ vertices V and W.  If D is:\n                o   Greater than the value that\
    \ already appears for\n                    vertex W on the candidate list, then\
    \ examine the\n                    next link.\n                o   Equal to the\
    \ value that appears for vertex W on the\n                    candidate list,\
    \ calculate the set of next hops that\n                    result from using the\
    \ advertised link.  Input to\n                    this calculation is the destination\
    \ (W), and its\n                    parent (V).  This calculation is shown in\
    \ Section\n                    16.1.1.  This set of hops should be added to the\n\
    \                    next hop values that appear for W on the candidate\n    \
    \                list.\n                o   Less than the value that appears for\
    \ vertex W on the\n                    candidate list, or if W does not yet appear\
    \ on the\n                    candidate list, then set the entry for W on the\n\
    \                    candidate list to indicate a distance of D from the\n   \
    \                 root.  Also calculate the list of next hops that\n         \
    \           result from using the advertised link, setting the\n             \
    \       next hop values for W accordingly.  The next hop\n                   \
    \ calculation is described in Section 16.1.1; it takes\n                    as\
    \ input the destination (W) and its parent (V).\n        (3) If at this step the\
    \ candidate list is empty, the shortest-\n            path tree (of transit vertices)\
    \ has been completely built\n            and this stage of the procedure terminates.\
    \  Otherwise,\n            choose the vertex belonging to the candidate list that\
    \ is\n            closest to the root, and add it to the shortest-path tree\n\
    \            (removing it from the candidate list in the process). Note\n    \
    \        that when there is a choice of vertices closest to the root,\n      \
    \      network vertices must be chosen before router vertices in\n           \
    \ order to necessarily find all equal-cost paths. This is\n            consistent\
    \ with the tie-breakers that were introduced in the\n            modified Dijkstra\
    \ algorithm used by OSPF's Multicast routing\n            extensions (MOSPF).\n\
    \        (4) Possibly modify the routing table.  For those routing table\n   \
    \         entries modified, the associated area will be set to Area A,\n     \
    \       the path type will be set to intra-area, and the cost will\n         \
    \   be set to the newly discovered shortest path's calculated\n            distance.\n\
    \            If the newly added vertex is an area border router (call it\n   \
    \         ABR), a routing table entry is added whose destination type\n      \
    \      is \"area border router\". The Options field found in the\n           \
    \ associated router links advertisement is copied into the\n            routing\
    \ table entry's Optional capabilities field. If in\n            addition ABR is\
    \ the endpoint of one of the calculating\n            router's configured virtual\
    \ links that uses Area A as its\n            Transit area: the virtual link is\
    \ declared up, the IP\n            address of the virtual interface is set to\
    \ the IP address of\n            the outgoing interface calculated above for ABR,\
    \ and the\n            virtual neighbor's IP address is set to the ABR interface\n\
    \            address (contained in ABR's router links advertisement) that\n  \
    \          points back to the root of the shortest-path tree;\n            equivalently,\
    \ this is the interface that points back to\n            ABR's parent vertex on\
    \ the shortest-path tree (similar to\n            the calculation in Section 16.1.1).\n\
    \            If the newly added vertex is an AS boundary router, the\n       \
    \     routing table entry of type \"AS boundary router\" for the\n           \
    \ destination is located.  Since routers can belong to more\n            than\
    \ one area, it is possible that several sets of intra-\n            area paths\
    \ exist to the AS boundary router, each set using a\n            different area.\
    \  However, the AS boundary router's routing\n            table entry must indicate\
    \ a set of paths which utilize a\n            single area.  The area leading to\
    \ the routing table entry is\n            selected as follows: The area providing\
    \ the shortest path is\n            always chosen; if more than one area provides\
    \ paths with the\n            same minimum cost, the area with the largest OSPF\
    \ Area ID\n            (when considered as an unsigned 32-bit integer) is chosen.\n\
    \            Note that whenever an AS boundary router's routing table\n      \
    \      entry is added/modified, the Options found in the associated\n        \
    \    router links advertisement is copied into the routing table\n           \
    \ entry's Optional capabilities field.\n            If the newly added vertex\
    \ is a transit network, the routing\n            table entry for the network is\
    \ located.  The entry's\n            Destination ID is the IP network number,\
    \ which can be\n            obtained by masking the Vertex ID (Link State ID)\
    \ with its\n            associated subnet mask (found in the body of the associated\n\
    \            network links advertisement).  If the routing table entry\n     \
    \       already exists (i.e., there is already an intra-area route\n         \
    \   to the destination installed in the routing table), multiple\n           \
    \ vertices have mapped to the same IP network.  For example,\n            this\
    \ can occur when a new Designated Router is being\n            established.  In\
    \ this case, the current routing table entry\n            should be overwritten\
    \ if and only if the newly found path is\n            just as short and the current\
    \ routing table entry's Link\n            State Origin has a smaller Link State\
    \ ID than the newly\n            added vertex' link state advertisement.\n   \
    \         If there is no routing table entry for the network (the\n          \
    \  usual case), a routing table entry for the IP network should\n            be\
    \ added.  The routing table entry's Link State Origin\n            should be set\
    \ to the newly added vertex' link state\n            advertisement.\n        (5)\
    \ Iterate the algorithm by returning to Step 2.\n        The stub networks are\
    \ added to the tree in the procedure's\n        second stage.  In this stage,\
    \ all router vertices are again\n        examined.  Those that have been determined\
    \ to be unreachable in\n        the above first phase are discarded.  For each\
    \ reachable router\n        vertex (call it V), the associated router links advertisement\
    \ is\n        found in the link state database.  Each stub network link\n    \
    \    appearing in the advertisement is then examined, and the\n        following\
    \ steps are executed:\n        (1) Calculate the distance D of stub network from\
    \ the root.  D\n            is equal to the distance from the root to the router\
    \ vertex\n            (calculated in stage 1), plus the stub network link's\n\
    \            advertised cost.  Compare this distance to the current best\n   \
    \         cost to the stub network.  This is done by looking up the\n        \
    \    stub network's current routing table entry.  If the\n            calculated\
    \ distance D is larger, go on to examine the next\n            stub network link\
    \ in the advertisement.\n        (2) If this step is reached, the stub network's\
    \ routing table\n            entry must be updated.  Calculate the set of next\
    \ hops that\n            would result from using the stub network link.  This\n\
    \            calculation is shown in Section 16.1.1; input to this\n         \
    \   calculation is the destination (the stub network) and the\n            parent\
    \ vertex (the router vertex).  If the distance D is the\n            same as the\
    \ current routing table cost, simply add this set\n            of next hops to\
    \ the routing table entry's list of next hops.\n            In this case, the\
    \ routing table already has a Link State\n            Origin.  If this Link State\
    \ Origin is a router links\n            advertisement whose Link State ID is smaller\
    \ than V's Router\n            ID, reset the Link State Origin to V's router links\n\
    \            advertisement.\n            Otherwise D is smaller than the routing\
    \ table cost.\n            Overwrite the current routing table entry by setting\
    \ the\n            routing table entry's cost to D, and by setting the entry's\n\
    \            list of next hops to the newly calculated set.  Set the\n       \
    \     routing table entry's Link State Origin to V's router links\n          \
    \  advertisement.  Then go on to examine the next stub network\n            link.\n\
    \        For all routing table entries added/modified in the second\n        stage,\
    \ the associated area will be set to Area A and the path\n        type will be\
    \ set to intra-area.  When the list of reachable\n        router links is exhausted,\
    \ the second stage is completed.  At\n        this time, all intra-area routes\
    \ associated with Area A have\n        been determined.\n        The specification\
    \ does not require that the above two stage\n        method be used to calculate\
    \ the shortest path tree.  However, if\n        another algorithm is used, an\
    \ identical tree must be produced.\n        For this reason, it is important to\
    \ note that links between\n        transit vertices must be bidirectional in ordered\
    \ to be included\n        in the above tree.  It should also be mentioned that\
    \ more\n        efficient algorithms exist for calculating the tree; for\n   \
    \     example, the incremental SPF algorithm described in [BBN].\n        16.1.1.\
    \  The next hop calculation\n            This section explains how to calculate\
    \ the current set of\n            next hops to use for a destination.  Each next\
    \ hop consists\n            of the outgoing interface to use in forwarding packets\
    \ to\n            the destination together with the next hop router (if any).\n\
    \            The next hop calculation is invoked each time a shorter path\n  \
    \          to the destination is discovered.  This can happen in either\n    \
    \        stage of the shortest-path tree calculation (see Section\n          \
    \  16.1).  In stage 1 of the shortest-path tree calculation a\n            shorter\
    \ path is found as the destination is added to the\n            candidate list,\
    \ or when the destination's entry on the\n            candidate list is modified\
    \ (Step 2d of Stage 1).  In stage 2\n            a shorter path is discovered\
    \ each time the destination's\n            routing table entry is modified (Step\
    \ 2 of Stage 2).\n            The set of next hops to use for the destination\
    \ may be\n            recalculated several times during the shortest-path tree\n\
    \            calculation, as shorter and shorter paths are discovered.\n     \
    \       In the end, the destination's routing table entry will\n            always\
    \ reflect the next hops resulting from the absolute\n            shortest path(s).\n\
    \            Input to the next hop calculation is a) the destination and\n   \
    \         b) its parent in the current shortest path between the root\n      \
    \      (the calculating router) and the destination.  The parent is\n        \
    \    always a transit vertex (i.e., always a router or a transit\n           \
    \ network).\n            If there is at least one intervening router in the current\n\
    \            shortest path between the destination and the root, the\n       \
    \     destination simply inherits the set of next hops from the\n            parent.\
    \  Otherwise, there are two cases.  In the first case,\n            the parent\
    \ vertex is the root (the calculating router\n            itself).  This means\
    \ that the destination is either a\n            directly connected network or\
    \ directly connected router.\n            The next hop in this case is simply\
    \ the OSPF interface\n            connecting to the network/router; no next hop\
    \ router is\n            required. If the connecting OSPF interface in this case\
    \ is a\n            virtual link, the setting of the next hop should be deferred\n\
    \            until the calculation in Section 16.3.\n            In the second\
    \ case, the parent vertex is a network that\n            directly connects the\
    \ calculating router to the destination\n            router.  The list of next\
    \ hops is then determined by\n            examining the destination's router links\
    \ advertisement.  For\n            each link in the advertisement that points\
    \ back to the\n            parent network, the link's Link Data field provides\
    \ the IP\n            address of a next hop router.  The outgoing interface to\
    \ use\n            can then be derived from the next hop IP address (or it can\n\
    \            be inherited from the parent network).\n    16.2.  Calculating the\
    \ inter-area routes\n        The inter-area routes are calculated by examining\
    \ summary link\n        advertisements.  If the router has active attachments\
    \ to\n        multiple areas, only backbone summary link advertisements are\n\
    \        examined.  Routers attached to a single area examine that area's\n  \
    \      summary links.  In either case, the summary links examined below\n    \
    \    are all part of a single area's link state database (call it\n        Area\
    \ A).\n        Summary link advertisements are originated by the area border\n\
    \        routers.  Each summary link advertisement in Area A is\n        considered\
    \ in turn.  Remember that the destination described by\n        a summary link\
    \ advertisement is either a network (Type 3 summary\n        link advertisements)\
    \ or an AS boundary router (Type 4 summary\n        link advertisements).  For\
    \ each summary link advertisement:\n        (1) If the cost specified by the advertisement\
    \ is LSInfinity, or\n            if the advertisement's LS age is equal to MaxAge,\
    \ then\n            examine the the next advertisement.\n        (2) If the advertisement\
    \ was originated by the calculating\n            router itself, examine the next\
    \ advertisement.\n        (3) If the collection of destinations described by the\
    \ summary\n            link advertisement falls into one of the router's configured\n\
    \            area address ranges (see Section 3.5) and the particular\n      \
    \      area address range is active, the summary link advertisement\n        \
    \    should be ignored.  Active means that there are one or more\n           \
    \ reachable (by intra-area paths) networks contained in the\n            area\
    \ range.  In this case, all addresses in the area range\n            are assumed\
    \ to be either reachable via intra-area paths, or\n            else to be unreachable\
    \ by any other means.\n        (4) Else, call the destination described by the\
    \ advertisement N\n            (for Type 3 summary links, N's address is obtained\
    \ by\n            masking the advertisement's Link State ID with the\n       \
    \     network/subnet mask contained in the body of the\n            advertisement),\
    \ and the area border originating the\n            advertisement BR.  Look up\
    \ the routing table entry for BR\n            having Area A as its associated\
    \ area.  If no such entry\n            exists for router BR (i.e., BR is unreachable\
    \ in Area A), do\n            nothing with this advertisement and consider the\
    \ next in the\n            list.  Else, this advertisement describes an inter-area\
    \ path\n            to destination N, whose cost is the distance to BR plus the\n\
    \            cost specified in the advertisement. Call the cost of this\n    \
    \        inter-area path IAC.\n        (5) Next, look up the routing table entry\
    \ for the destination N.\n            (The entry's Destination Type is either\
    \ Network or AS\n            boundary router.)  If no entry exists for N or if\
    \ the\n            entry's path type is \"type 1 external\" or \"type 2 external\"\
    ,\n            then install the inter-area path to N, with associated area\n \
    \           Area A, cost IAC, next hop equal to the list of next hops to\n   \
    \         router BR, and Advertising router equal to BR.\n        (6) Else, if\
    \ the paths present in the table are intra-area\n            paths, do nothing\
    \ with the advertisement (intra-area paths\n            are always preferred).\n\
    \        (7) Else, the paths present in the routing table are also\n         \
    \   inter-area paths.  Install the new path through BR if it is\n            cheaper,\
    \ overriding the paths in the routing table.\n            Otherwise, if the new\
    \ path is the same cost, add it to the\n            list of paths that appear\
    \ in the routing table entry.\n    16.3.  Examining transit areas' summary links\n\
    \        This step is only performed by area border routers attached to\n    \
    \    one or more transit areas. Transit areas are those areas\n        supporting\
    \ one or more virtual links; their TransitCapability\n        parameter has been\
    \ set to TRUE in Step 2 of the Dijkstra\n        algorithm (see Section 16.1).\
    \ They are the only non-backbone\n        areas that can carry data traffic that\
    \ neither originates nor\n        terminates in the area itself.\n        The\
    \ purpose of the calculation below is to examine the transit\n        areas to\
    \ see whether they provide any better (shorter) paths\n        than the paths\
    \ previously calculated in Sections 16.1 and 16.2.\n        Any paths found that\
    \ are better than or equal to previously\n        discovered paths are installed\
    \ in the routing table.\n        The calculation proceeds as follows. All the\
    \ transit areas'\n        summary link advertisements are examined in turn.  Each\
    \ such\n        summary link advertisement describes a route through a transit\n\
    \        area Area A to a Network N (N's address is obtained by masking\n    \
    \    the advertisement's Link State ID with the network/subnet mask\n        contained\
    \ in the body of the advertisement) or in the case of a\n        Type 4 summary\
    \ link advertisement, to an AS boundary router N.\n        Suppose also that the\
    \ summary link advertisement was originated\n        by an area border router\
    \ BR.\n        (1) If the cost advertised by the summary link advertisement is\n\
    \            LSInfinity, or if the advertisement's LS age is equal to\n      \
    \      MaxAge, then examine the next advertisement.\n        (2) If the summary\
    \ link advertisement was originated by the\n            calculating router itself,\
    \ examine the next advertisement.\n        (3) Look up the routing table entry\
    \ for N. If it does not exist,\n            or if the route type is other than\
    \ intra-area or inter-area,\n            or if the area associated with the routing\
    \ table entry is\n            not the backbone area, then examine the next advertisement.\n\
    \            In other words, this calculation only updates backbone\n        \
    \    intra-area routes found in Section 16.1 and inter-area\n            routes\
    \ found in Section 16.2.\n        (4) Look up the routing table entry for the\
    \ advertising router\n            BR associated with the Area A. If it is unreachable,\
    \ examine\n            the next advertisement. Otherwise, the cost to destination\
    \ N\n            is the sum of the cost in BR's Area A routing table entry\n \
    \           and the cost advertised in the advertisement. Call this cost\n   \
    \         IAC.\n        (5) If this cost is less than the cost occurring in N's\
    \ routing\n            table entry, overwrite N's list of next hops with those\
    \ used\n            for BR, and set N's routing table cost to IAC. Else, if IAC\n\
    \            is the same as N's current cost, add BR's list of next hops\n   \
    \         to N's list of next hops. In any case, the area associated\n       \
    \     with N's routing table entry must remain the backbone area,\n          \
    \  and the path type (either intra-area or inter-area) must\n            also\
    \ remain the same.\n        It is important to note that the above calculation\
    \ never makes\n        unreachable destinations reachable, but instead just potentially\n\
    \        finds better paths to already reachable destinations. Also,\n       \
    \ unlike Section 16.3 of [RFC 1247], the above calculation\n        installs any\
    \ better cost found into the routing table entry,\n        from which it may be\
    \ readvertised in summary link advertisements\n        to other areas.\n     \
    \   As an example of the calculation, consider the Autonomous System\n       \
    \ pictured in Figure 17.  There is a single non-backbone area\n        (Area 1)\
    \ that physically divides the backbone into two separate\n        pieces. To maintain\
    \ connectivity of the backbone, a virtual link\n        has been configured between\
    \ routers RT1 and RT4. On the right\n        side of the figure, Network N1 belongs\
    \ to the backbone. The\n        dotted lines indicate that there is a much shorter\
    \ intra-area\n                      ........................\n               \
    \       . Area 1 (transit)     .            +\n                      .       \
    \               .            |\n                      .      +---+1        1+---+100\
    \      |\n                      .      |RT2|----------|RT4|=========|\n      \
    \                .    1/+---+********* +---+         |\n                     \
    \ .    /*******          .            |\n                      .  1/*Virtual \
    \         .            |\n                   1+---+/*  Link            .     \
    \    Net|work\n             =======|RT1|*                   .            | N1\n\
    \                    +---+\\                   .            |\n              \
    \        .   \\                  .            |\n                      .    \\\
    \                 .            |\n                      .    1\\+---+1       \
    \ 1+---+20       |\n                      .      |RT3|----------|RT5|=========|\n\
    \                      .      +---+          +---+         |\n               \
    \       .                      .            |\n                      ........................\
    \            +\n                    Figure 17: Routing through transit areas\n\
    \        backbone path between router RT5 and Network N1 (cost 20) than\n    \
    \    there is between Router RT4 and Network N1 (cost 100). Both\n        Router\
    \ RT4 and Router RT5 will inject summary link\n        advertisements for Network\
    \ N1 into Area 1.\n        After the shortest-path tree has been calculated for\
    \ the\n        backbone in Section 16.1, Router RT1 (left end of the virtual\n\
    \        link) will have calculated a path through Router RT4 for all\n      \
    \  data traffic destined for Network N1. However, since Router RT5\n        is\
    \ so much closer to Network N1, all routers internal to Area 1\n        (e.g.,\
    \ Routers RT2 and RT3) will forward their Network N1\n        traffic towards\
    \ Router RT5, instead of RT4. And indeed, after\n        examining Area 1's summary\
    \ link advertisements by the above\n        calculation, Router RT1 will also\
    \ forward Network N1 traffic\n        towards RT5. Note that in this example the\
    \ virtual link enables\n        Network N1 traffic to be forwarded through the\
    \ transit area Area\n        1, but the actual path the data traffic takes does\
    \ not follow\n        the virtual link.  In other words, virtual links allow transit\n\
    \        traffic to be forwarded through an area, but do not dictate the\n   \
    \     precise path that the traffic will take.\n    16.4.  Calculating AS external\
    \ routes\n        AS external routes are calculated by examining AS external link\n\
    \        advertisements.  Each of the AS external link advertisements is\n   \
    \     considered in turn.  Most AS external link advertisements\n        describe\
    \ routes to specific IP destinations.  An AS external\n        link advertisement\
    \ can also describe a default route for the\n        Autonomous System (Destination\
    \ ID = DefaultDestination,\n        network/subnet mask = 0x00000000).  For each\
    \ AS external link\n        advertisement:\n        (1) If the cost specified\
    \ by the advertisement is LSInfinity, or\n            if the advertisement's LS\
    \ age is equal to MaxAge, then\n            examine the next advertisement.\n\
    \        (2) If the advertisement was originated by the calculating\n        \
    \    router itself, examine the next advertisement.\n        (3) Call the destination\
    \ described by the advertisement N.  N's\n            address is obtained by masking\
    \ the advertisement's Link\n            State ID with the network/subnet mask\
    \ contained in the body\n            of the advertisement.  Look up the routing\
    \ table entry for\n            the AS boundary router (ASBR) that originated the\n\
    \            advertisement. If no entry exists for router ASBR (i.e.,\n      \
    \      ASBR is unreachable), do nothing with this advertisement and\n        \
    \    consider the next in the list.\n            Else, this advertisement describes\
    \ an AS external path to\n            destination N.  Examine the forwarding address\
    \ specified in\n            the AS external link advertisement.  This indicates\
    \ the IP\n            address to which packets for the destination should be\n\
    \            forwarded.  If the forwarding address is set to 0.0.0.0,\n      \
    \      packets should be sent to the ASBR itself.  Otherwise, look\n         \
    \   up the forwarding address in the routing table.[23] An\n            intra-area\
    \ or inter-area path must exist to the forwarding\n            address.  If no\
    \ such path exists, do nothing with the\n            advertisement and consider\
    \ the next in the list.\n            Call the routing table distance to the forwarding\
    \ address X\n            (when the forwarding address is set to 0.0.0.0, this\
    \ is the\n            distance to the ASBR itself), and the cost specified in\
    \ the\n            advertisement Y.  X is in terms of the link state metric,\n\
    \            and Y is a type 1 or 2 external metric.\n        (4) Next, look up\
    \ the routing table entry for the destination N.\n            If no entry exists\
    \ for N, install the AS external path to N,\n            with next hop equal to\
    \ the list of next hops to the\n            forwarding address, and advertising\
    \ router equal to ASBR.\n            If the external metric type is 1, then the\
    \ path-type is set\n            to type 1 external and the cost is equal to X+Y.\
    \  If the\n            external metric type is 2, the path-type is set to type\
    \ 2\n            external, the link state component of the route's cost is X,\n\
    \            and the type 2 cost is Y.\n        (5) Else, if the paths present\
    \ in the table are not type 1 or\n            type 2 external paths, do nothing\
    \ (AS external paths have\n            the lowest priority).\n        (6) Otherwise,\
    \ compare the cost of this new AS external path to\n            the ones present\
    \ in the table.  Type 1 external paths are\n            always shorter than type\
    \ 2 external paths.  Type 1 external\n            paths are compared by looking\
    \ at the sum of the distance to\n            the forwarding address and the advertised\
    \ type 1 metric\n            (X+Y).  Type 2 external paths are compared by looking\
    \ at the\n            advertised type 2 metrics, and then if necessary, the\n\
    \            distance to the forwarding addresses.\n            If the new path\
    \ is shorter, it replaces the present paths in\n            the routing table\
    \ entry.  If the new path is the same cost,\n            it is added to the routing\
    \ table entry's list of paths.\n    16.5.  Incremental updates -- summary link\
    \ advertisements\n        When a new summary link advertisement is received, it\
    \ is not\n        necessary to recalculate the entire routing table.  Call the\n\
    \        destination described by the summary link advertisement N (N's\n    \
    \    address is obtained by masking the advertisement's Link State ID\n      \
    \  with the network/subnet mask contained in the body of the\n        advertisement),\
    \ and let Area A be the area to which the\n        advertisement belongs. There\
    \ are then two separate cases:\n        Case 1: Area A is the backbone and/or\
    \ the router is not an area\n            border router.\n            In this case,\
    \ the following calculations must be performed.\n            First, if there is\
    \ presently an inter-area route to the\n            destination N, N's routing\
    \ table entry is invalidated,\n            saving the entry's values for later\
    \ comparisons. Then the\n            calculation in Section 16.2 is run again\
    \ for the single\n            destination N. In this calculation, all of Area\
    \ A's summary\n            link advertisements that describe a route to N are\
    \ examined.\n            In addition, if the router is an area border router attached\n\
    \            to one or more transit areas, the calculation in Section\n      \
    \      16.3 must be run again for the single destination.  If the\n          \
    \  results of these calculations have changed the cost/path to\n            an\
    \ AS boundary router (as would be the case for a Type 4\n            summary link\
    \ advertisement) or to any forwarding addresses,\n            all AS external\
    \ link advertisements will have to be\n            reexamined by rerunning the\
    \ calculation in Section 16.4.\n            Otherwise, if N is now newly unreachable,\
    \ the calculation in\n            Section 16.4 must be rerun for the single destination\
    \ N, in\n            case an alternate external route to N exists.\n        Case\
    \ 2: Area A is a transit area and the router is an area\n            border router.\n\
    \            In this case, the following calculations must be performed.\n   \
    \         First, if N's routing table entry presently contains one or\n      \
    \      more inter-area paths that utilize the transit area Area A,\n         \
    \   these paths should be removed. If this removes all paths\n            from\
    \ the routing table entry, the entry should be\n            invalidated.  The\
    \ entry's old values should be saved for\n            later comparisons. Next\
    \ the calculation in Section 16.3 must\n            be run again for the single\
    \ destination N. If the results of\n            this calculation have caused the\
    \ cost to N to increase, the\n            complete routing table calculation must\
    \ be rerun starting\n            with the Dijkstra algorithm specified in Section\
    \ 16.1.\n            Otherwise, if the cost/path to an AS boundary router (as\n\
    \            would be the case for a Type 4 summary link advertisement)\n    \
    \        or to any forwarding addresses has changed, all AS external\n       \
    \     link advertisements will have to be reexamined by rerunning\n          \
    \  the calculation in Section 16.4.  Otherwise, if N is now\n            newly\
    \ unreachable, the calculation in Section 16.4 must be\n            rerun for\
    \ the single destination N, in case an alternate\n            external route to\
    \ N exists.\n    16.6.  Incremental updates -- AS external link advertisements\n\
    \        When a new AS external link advertisement is received, it is not\n  \
    \      necessary to recalculate the entire routing table.  Call the\n        destination\
    \ described by the AS external link advertisement N.\n        N's address is obtained\
    \ by masking the advertisement's Link\n        State ID with the network/subnet\
    \ mask contained in the body of\n        the advertisement. If there is already\
    \ an intra-area or inter-\n        area route to the destination, no recalculation\
    \ is necessary\n        (internal routes take precedence).\n        Otherwise,\
    \ the procedure in Section 16.4 will have to be\n        performed, but only for\
    \ those AS external link advertisements\n        whose destination is N.  Before\
    \ this procedure is performed, the\n        present routing table entry for N\
    \ should be invalidated.\n    16.7.  Events generated as a result of routing table\
    \ changes\n        Changes to routing table entries sometimes cause the OSPF area\n\
    \        border routers to take additional actions.  These routers need\n    \
    \    to act on the following routing table changes:\n        o   The cost or path\
    \ type of a routing table entry has changed.\n            If the destination described\
    \ by this entry is a Network or\n            AS boundary router, and this is not\
    \ simply a change of AS\n            external routes, new summary link advertisements\
    \ may have to\n            be generated (potentially one for each attached area,\n\
    \            including the backbone).  See Section 12.4.3 for more\n         \
    \   information.  If a previously advertised entry has been\n            deleted,\
    \ or is no longer advertisable to a particular area,\n            the advertisement\
    \ must be flushed from the routing domain by\n            setting its LS age to\
    \ MaxAge and reflooding (see Section\n            14.1).\n        o   A routing\
    \ table entry associated with a configured virtual\n            link has changed.\
    \  The destination of such a routing table\n            entry is an area border\
    \ router.  The change indicates a\n            modification to the virtual link's\
    \ cost or viability.\n            If the entry indicates that the area border\
    \ router is newly\n            reachable (via TOS 0), the corresponding virtual\
    \ link is now\n            operational.  An InterfaceUp event should be generated\
    \ for\n            the virtual link, which will cause a virtual adjacency to\n\
    \            begin to form (see Section 10.3).  At this time the virtual\n   \
    \         link's IP interface address and the virtual neighbor's\n           \
    \ Neighbor IP address are also calculated.\n            If the entry indicates\
    \ that the area border router is no\n            longer reachable (via TOS 0),\
    \ the virtual link and its\n            associated adjacency should be destroyed.\
    \  This means an\n            InterfaceDown event should be generated for the\
    \ associated\n            virtual link.\n            If the cost of the entry\
    \ has changed, and there is a fully\n            established virtual adjacency,\
    \ a new router links\n            advertisement for the backbone must be originated.\
    \  This in\n            turn may cause further routing table changes.\n    16.8.\
    \  Equal-cost multipath\n        The OSPF protocol maintains multiple equal-cost\
    \ routes to all\n        destinations.  This can be seen in the steps used above\
    \ to\n        calculate the routing table, and in the definition of the\n    \
    \    routing table structure.\n        Each one of the multiple routes will be\
    \ of the same type\n        (intra-area, inter-area, type 1 external or type 2\
    \ external),\n        cost, and will have the same associated area.  However,\
    \ each\n        route specifies a separate next hop and Advertising router.\n\
    \        There is no requirement that a router running OSPF keep track of\n  \
    \      all possible equal-cost routes to a destination.  An\n        implementation\
    \ may choose to keep only a fixed number of routes\n        to any given destination.\
    \  This does not affect any of the\n        algorithms presented in this specification.\n\
    \    16.9.  Building the non-zero-TOS portion of the routing table\n        The\
    \ OSPF protocol can calculate a different set of routes for\n        each IP TOS\
    \ (see Section 2.4).  Support for TOS-based routing is\n        optional.  TOS-capable\
    \ and non-TOS-capable routers can be mixed\n        in an OSPF routing domain.\
    \  Routers not supporting TOS calculate\n        only the TOS 0 route to each\
    \ destination.  These routes are then\n        used to forward all data traffic,\
    \ regardless of the TOS\n        indications in the data packet's IP header. \
    \ A router that does\n        not support TOS indicates this fact to the other\
    \ OSPF routers by\n        clearing the T-bit in the Options field of its router\
    \ links\n        advertisement.\n        The above sections detailing the routing\
    \ table calculations\n        handle the TOS 0 case only.  In general, for routers\
    \ supporting\n        TOS-based routing, each piece of the routing table calculation\n\
    \        must be rerun separately for the non-zero TOS values.  When\n       \
    \ calculating routes for TOS X, only TOS X metrics can be used.\n        Any link\
    \ state advertisement may specify a separate cost for\n        each TOS (a cost\
    \ for TOS 0 must always be specified).  The\n        encoding of TOS in OSPF link\
    \ state advertisements is described\n        in Section 12.3.\n        An advertisement\
    \ can specify that it is restricted to TOS 0\n        (i.e., non-zero TOS is not\
    \ handled) by clearing the T-bit in the\n        link state advertisement's Option\
    \ field.  Such advertisements\n        are not used when calculating routes for\
    \ non-zero TOS.  For this\n        reason, it is possible that a destination is\
    \ unreachable for\n        some non-zero TOS.  In this case, the TOS 0 path is\
    \ used when\n        forwarding packets (see Section 11.1).\n        The following\
    \ lists the modifications needed when running the\n        routing table calculation\
    \ for a non-zero TOS value (called TOS\n        X).  In general, routers and advertisements\
    \ that do not support\n        TOS are omitted from the calculation.\n       \
    \ Calculating the shortest-path tree (Section  16.1).\n            Routers that\
    \ do not support TOS-based routing should be\n            omitted from the shortest-path\
    \ tree calculation.  These\n            routers are identified as those having\
    \ the T-bit reset in\n            the Options field of their router links advertisements.\n\
    \            Such routers should never be added to the Dijktra\n            algorithm's\
    \ candidate list, nor should their router links\n            advertisements be\
    \ examined when adding the stub networks to\n            the tree.  In particular,\
    \ if the T-bit is reset in the\n            calculating router's own router links\
    \ advertisement, it does\n            not run the shortest-path tree calculation\
    \ for non-zero TOS\n            values.\n        Calculating the inter-area routes\
    \ (Section  16.2).\n            Inter-area paths are the concatenation of a path\
    \ to an area\n            border router with a summary link.  When calculating\
    \ TOS X\n            routes, both path components must also specify TOS X.  In\n\
    \            other words, only TOS X paths to the area border router are\n   \
    \         examined, and the area border router must be advertising a\n       \
    \     TOS X route to the destination.  Note that this means that\n           \
    \ summary link advertisements having the T-bit reset in their\n            Options\
    \ field are not considered.\n        Examining transit areas' summary links (Section\
    \ 16.3).\n            This calculation again considers the concatenation of a\
    \ path\n            to an area border router with a summary link.  As with\n \
    \           inter-area routes, only TOS X paths to the area border\n         \
    \   router are examined, and the area border router must be\n            advertising\
    \ a TOS X route to the destination.\n        Calculating AS external routes (Section\
    \ 16.4).\n            This calculation considers the concatenation of a path to\
    \ a\n            forwarding address with an AS external link.  Only TOS X\n  \
    \          paths to the forwarding address are examined, and the AS\n        \
    \    boundary router must be advertising a TOS X route to the\n            destination.\
    \  Note that this means that AS external link\n            advertisements having\
    \ the T-bit reset in their Options field\n            are not considered.\n  \
    \          In addition, the advertising AS boundary router must also be\n    \
    \        reachable for its advertisements to be considered (see\n            Section\
    \ 16.4).  However, if the advertising router and the\n            forwarding address\
    \ are not one in the same, the advertising\n            router need only be reachable\
    \ via TOS 0.\n"
- title: Footnotes
  contents:
  - "Footnotes\n    [1]The graph's vertices represent either routers, transit networks,\n\
    \    or stub networks.  Since routers may belong to multiple areas, it is\n  \
    \  not possible to color the graph's vertices.\n    [2]It is possible for all\
    \ of a router's interfaces to be unnumbered\n    point-to-point links.  In this\
    \ case, an IP address must be assigned\n    to the router.  This address will\
    \ then be advertised in the router's\n    router links advertisement as a host\
    \ route.\n    [3]Note that in these cases both interfaces, the non-virtual and\
    \ the\n    virtual, would have the same IP address.\n    [4]Note that no host\
    \ route is generated for, and no IP packets can\n    be addressed to, interfaces\
    \ to unnumbered point-to-point networks.\n    This is regardless of such an interface's\
    \ state.\n    [5]It is instructive to see what happens when the Designated Router\n\
    \    for the network crashes.  Call the Designated Router for the network\n  \
    \  RT1, and the Backup Designated Router RT2.  If Router RT1 crashes\n    (or\
    \ maybe its interface to the network dies), the other routers on\n    the network\
    \ will detect RT1's absence within RouterDeadInterval\n    seconds.  All routers\
    \ may not detect this at precisely the same\n    time; the routers that detect\
    \ RT1's absence before RT2 does will,\n    for a time, select RT2 to be both Designated\
    \ Router and Backup\n    Designated Router.  When RT2 detects that RT1 is gone\
    \ it will move\n    itself to Designated Router.  At this time, the remaining\
    \ router\n    having highest Router Priority will be selected as Backup Designated\n\
    \    Router.\n    [6]On point-to-point networks, the lower level protocols indicate\n\
    \    whether the neighbor is up and running.  Likewise, existence of the\n   \
    \ neighbor on virtual links is indicated by the routing table\n    calculation.\
    \  However, in both these cases, the Hello Protocol is\n    still used.  This\
    \ ensures that communication between the neighbors\n    is bidirectional, and\
    \ that each of the neighbors has a functioning\n    routing protocol layer.\n\
    \    [7]When the identity of the Designated Router is changing, it may be\n  \
    \  quite common for a neighbor in this state to send the router a\n    Database\
    \ Description packet; this means that there is some momentary\n    disagreement\
    \ on the Designated Router's identity.\n    [8]Note that it is possible for a\
    \ router to resynchronize any of its\n    fully established adjacencies by setting\
    \ the adjacency's state back\n    to ExStart.  This will cause the other end of\
    \ the adjacency to\n    process a SeqNumberMismatch event, and therefore to also\
    \ go back to\n    ExStart state.\n    [9]The address space of IP networks and\
    \ the address space of OSPF\n    Router IDs may overlap.  That is, a network may\
    \ have an IP address\n    which is identical (when considered as a 32-bit number)\
    \ to some\n    router's Router ID.\n    [10]It is assumed that, for two different\
    \ address ranges matching\n    the destination, one range is more specific than\
    \ the other. Non-\n    contiguous subnet masks can be configured to violate this\n\
    \    assumption. Such subnet mask configurations cannot be handled by the\n  \
    \  OSPF protocol.\n    [11]MaxAgeDiff is an architectural constant.  It indicates\
    \ the\n    maximum dispersion of ages, in seconds, that can occur for a single\n\
    \    link state instance as it is flooded throughout the routing domain.\n   \
    \ If two advertisements differ by more than this, they are assumed to\n    be\
    \ different instances of the same advertisement.  This can occur\n    when a router\
    \ restarts and loses track of the advertisement's\n    previous LS sequence number.\
    \  See Section 13.4 for more details.\n    [12]When two advertisements have different\
    \ LS checksums, they are\n    assumed to be separate instances.  This can occur\
    \ when a router\n    restarts, and loses track of the advertisement's previous\
    \ LS\n    sequence number.  In the case where the two advertisements have the\n\
    \    same LS sequence number, it is not possible to determine which link\n   \
    \ state is actually newer.  If the wrong advertisement is accepted as\n    newer,\
    \ the originating router will originate another instance.  See\n    Section 13.4\
    \ for further details.\n    [13]There is one instance where a lookup must be done\
    \ based on\n    partial information.  This is during the routing table calculation,\n\
    \    when a network links advertisement must be found based solely on its\n  \
    \  Link State ID.  The lookup in this case is still well defined, since\n    no\
    \ two network links advertisements can have the same Link State ID.\n    [14]This\
    \ clause covers the case: Inter-area routes are not\n    summarized to the backbone.\
    \  This is because inter-area routes are\n    always associated with the backbone\
    \ area.\n    [15]This clause is only invoked when Area A is a Transit area\n \
    \   supporting one or more virtual links. For example, in the area\n    configuration\
    \ of Figure 6, Router RT11 need only originate a single\n    summary link having\
    \ the (collapsed) destination N9-N11,H1 into its\n    connected Transit area Area\
    \ 2, since all of its other eligible\n    routes have next hops belonging to Area\
    \ 2 (and as such only need be\n    advertised by other area border routers; in\
    \ this case, Routers RT10\n    and RT7).\n    [16]By keeping more information\
    \ in the routing table, it is possible\n    for an implementation to recalculate\
    \ the shortest path tree only for\n    a single area.  In fact, there are incremental\
    \ algorithms that allow\n    an implementation to recalculate only a portion of\
    \ a single area's\n    shortest path tree [BBN].  However, these algorithms are\
    \ beyond the\n    scope of this specification.\n    [17]This is how the Link state\
    \ request list is emptied, which\n    eventually causes the neighbor state to\
    \ transition to Full.  See\n    Section 10.9 for more details.\n    [18]It should\
    \ be a relatively rare occurrence for an advertisement's\n    LS age to reach\
    \ MaxAge in this fashion.  Usually, the advertisement\n    will be replaced by\
    \ a more recent instance before it ages out.\n    [19]Only the TOS 0 routes are\
    \ important here because all OSPF\n    protocol packets are sent with TOS = 0.\
    \  See Appendix A.\n    [20]It may be the case that paths to certain destinations\
    \ do not\n    vary based on TOS.  For these destinations, the routing calculation\n\
    \    need not be repeated for each TOS value.  In addition, there need\n    only\
    \ be a single routing table entry for these destinations (instead\n    of a separate\
    \ entry for each TOS value).\n    [21]Strictly speaking, because of equal-cost\
    \ multipath, the\n    algorithm does not create a tree.  We continue to use the\
    \ \"tree\"\n    terminology because that is what occurs most often in the existing\n\
    \    literature.\n    [22]Note that the presence of any link back to V is sufficient;\
    \ it\n    need not be the matching half of the link under consideration from V\n\
    \    to W. This is enough to ensure that, before data traffic flows\n    between\
    \ a pair of neighboring routers, their link state databases\n    will be synchronized.\n\
    \    [23]When the forwarding address is non-zero, it should point to a\n    router\
    \ belonging to another Autonomous System.  See Section 12.4.5\n    for more details.\n"
- title: References
  contents:
  - "References\n    [BBN]           McQuillan, J., I. Richer and E. Rosen, \"ARPANET\n\
    \                    Routing Algorithm Improvements\", BBN Technical\n       \
    \             Report 3803, April 1978.\n    [DEC]           Digital Equipment\
    \ Corporation, \"Information\n                    processing systems -- Data communications\
    \ --\n                    Intermediate System to Intermediate System Intra-\n\
    \                    Domain Routing Protocol\", October 1987.\n    [McQuillan]\
    \     McQuillan, J. et.al., \"The New Routing Algorithm for\n                \
    \    the Arpanet\", IEEE Transactions on Communications,\n                   \
    \ May 1980.\n    [Perlman]       Perlman, R., \"Fault-Tolerant Broadcast of Routing\n\
    \                    Information\", Computer Networks, December 1983.\n    [RFC\
    \ 791]       Postel, J., \"Internet Protocol\", STD 5, RFC 791,\n            \
    \        USC/Information Sciences Institute, September 1981.\n    [RFC 905]  \
    \     McKenzie, A., \"ISO Transport Protocol specification\n                 \
    \   ISO DP 8073\", RFC 905, ISO, April 1984.\n    [RFC 1112]      Deering, S.,\
    \ \"Host extensions for IP multicasting\",\n                    STD 5, RFC 1112,\
    \ Stanford University, May 1988.\n    [RFC 1213]      McCloghrie, K., and M. Rose,\
    \ \"Management Information\n                    Base for network management of\
    \ TCP/IP-based\n                    internets: MIB-II\", STD 17, RFC 1213, Hughes\
    \ LAN\n                    Systems, Performance Systems International, March\n\
    \                    1991.\n    [RFC 1247]      Moy, J., \"OSPF Version 2\", RFC\
    \ 1247, Proteon, Inc.,\n                    July 1991.\n    [RFC 1519]      Fuller,\
    \ V., T. Li, J. Yu, and K. Varadhan,\n                    \"Classless Inter-Domain\
    \ Routing (CIDR): an Address\n                    Assignment and Aggregation Strategy\"\
    , RFC1519,\n                    BARRNet, cisco, MERIT, OARnet, September 1993.\n\
    \    [RFC 1340]      Reynolds, J., and J. Postel, \"Assigned Numbers\", STD\n\
    \                    2, RFC 1340, USC/Information Sciences Institute,\n      \
    \              July 1992.\n    [RFC 1349]      Almquist, P., \"Type of Service\
    \ in the Internet\n                    Protocol Suite\", RFC 1349, July 1992.\n\
    \    [RS-85-153]     Leiner, B., et.al., \"The DARPA Internet Protocol\n     \
    \               Suite\", DDN Protocol Handbook, April 1985.\n"
- title: A. OSPF data formats
  contents:
  - "A. OSPF data formats\n    This appendix describes the format of OSPF protocol\
    \ packets and OSPF\n    link state advertisements.  The OSPF protocol runs directly\
    \ over the\n    IP network layer.  Before any data formats are described, the\n\
    \    details of the OSPF encapsulation are explained.\n    Next the OSPF Options\
    \ field is described.  This field describes\n    various capabilities that may\
    \ or may not be supported by pieces of\n    the OSPF routing domain. The OSPF\
    \ Options field is contained in OSPF\n    Hello packets, Database Description\
    \ packets and in OSPF link state\n    advertisements.\n    OSPF packet formats\
    \ are detailed in Section A.3.  A description of\n    OSPF link state advertisements\
    \ appears in Section A.4.\n"
- title: A.1 Encapsulation of OSPF packets
  contents:
  - "A.1 Encapsulation of OSPF packets\n    OSPF runs directly over the Internet Protocol's\
    \ network layer.  OSPF\n    packets are therefore encapsulated solely by IP and\
    \ local data-link\n    headers.\n    OSPF does not define a way to fragment its\
    \ protocol packets, and\n    depends on IP fragmentation when transmitting packets\
    \ larger than\n    the network MTU.  The OSPF packet types that are likely to\
    \ be large\n    (Database Description Packets, Link State Request, Link State\n\
    \    Update, and Link State Acknowledgment packets) can usually be split\n   \
    \ into several separate protocol packets, without loss of\n    functionality.\
    \  This is recommended; IP fragmentation should be\n    avoided whenever possible.\
    \  Using this reasoning, an attempt should\n    be made to limit the sizes of\
    \ packets sent over virtual links to 576\n    bytes.  However, if necessary, the\
    \ length of OSPF packets can be up\n    to 65,535 bytes (including the IP header).\n\
    \    The other important features of OSPF's IP encapsulation are:\n    o   Use\
    \ of IP multicast.  Some OSPF messages are multicast, when\n        sent over\
    \ multi-access networks.  Two distinct IP multicast\n        addresses are used.\
    \  Packets sent to these multicast addresses\n        should never be forwarded;\
    \ they are meant to travel a single hop\n        only.  To ensure that these packets\
    \ will not travel multiple\n        hops, their IP TTL must be set to 1.\n   \
    \     AllSPFRouters\n            This multicast address has been assigned the\
    \ value\n            224.0.0.5.  All routers running OSPF should be prepared to\n\
    \            receive packets sent to this address.  Hello packets are\n      \
    \      always sent to this destination.  Also, certain OSPF\n            protocol\
    \ packets are sent to this address during the\n            flooding procedure.\n\
    \        AllDRouters\n            This multicast address has been assigned the\
    \ value\n            224.0.0.6.  Both the Designated Router and Backup Designated\n\
    \            Router must be prepared to receive packets destined to this\n   \
    \         address.  Certain OSPF protocol packets are sent to this\n         \
    \   address during the flooding procedure.\n    o   OSPF is IP protocol number\
    \ 89.  This number has been registered\n        with the Network Information Center.\
    \  IP protocol number\n        assignments are documented in [RFC 1340].\n   \
    \ o   Routing protocol packets are sent with IP TOS of 0.  The OSPF\n        protocol\
    \ supports TOS-based routing.  Routes to any particular\n        destination may\
    \ vary based on TOS.  However, all OSPF routing\n        protocol packets are\
    \ sent using the normal service TOS value of\n        binary 0000 defined in [RFC\
    \ 1349].\n    o   Routing protocol packets are sent with IP precedence set to\n\
    \        Internetwork Control.  OSPF protocol packets should be given\n      \
    \  precedence over regular IP data traffic, in both sending and\n        receiving.\
    \  Setting the IP precedence field in the IP header to\n        Internetwork Control\
    \ [RFC 791] may help implement this\n        objective.\n"
- title: A.2 The Options field
  contents:
  - "A.2 The Options field\n    The OSPF Options field is present in OSPF Hello packets,\
    \ Database\n    Description packets and all link state advertisements.  The Options\n\
    \    field enables OSPF routers to support (or not support) optional\n    capabilities,\
    \ and to communicate their capability level to other\n    OSPF routers.  Through\
    \ this mechanism routers of differing\n    capabilities can be mixed within an\
    \ OSPF routing domain.\n    When used in Hello packets, the Options field allows\
    \ a router to\n    reject a neighbor because of a capability mismatch.  Alternatively,\n\
    \    when capabilities are exchanged in Database Description packets a\n    router\
    \ can choose not to forward certain link state advertisements\n    to a neighbor\
    \ because of its reduced functionality.  Lastly, listing\n    capabilities in\
    \ link state advertisements allows routers to route\n    traffic around reduced\
    \ functionality routers, by excluding them from\n    parts of the routing table\
    \ calculation.\n    Two capabilities are currently defined.  For each capability,\
    \ the\n    effect of the capability's appearance (or lack of appearance) in\n\
    \    Hello packets, Database Description packets and link state\n    advertisements\
    \ is specified below.  For example, the\n    ExternalRoutingCapability (below\
    \ called the E-bit) has meaning only\n    in OSPF Hello Packets.  Routers should\
    \ reset (i.e.  clear) the\n    unassigned part of the capability field when sending\
    \ Hello packets\n    or Database Description packets and when originating link\
    \ state\n    advertisements.\n    Additional capabilities may be assigned in the\
    \ future.  Routers\n    encountering unrecognized capabilities in received Hello\
    \ Packets,\n    Database Description packets or link state advertisements should\n\
    \    ignore the capability and process the packet/advertisement normally.\n  \
    \                             +-+-+-+-+-+-+-+-+\n                            \
    \   | | | | | | |E|T|\n                               +-+-+-+-+-+-+-+-+\n    \
    \                         The Options field\n    T-bit\n        This describes\
    \ the router's TOS capability.  If the T-bit is\n        reset, then the router\
    \ supports only a single TOS (TOS 0).  Such\n        a router is also said to\
    \ be incapable of TOS-routing, and\n        elsewhere in this document referred\
    \ to as a TOS-0-only router.\n        The absence of the T-bit in a router links\
    \ advertisement causes\n        the router to be skipped when building a non-zero\
    \ TOS shortest-\n        path tree (see Section 16.9).  In other words, routers\
    \ incapable\n        of TOS routing will be avoided as much as possible when\n\
    \        forwarding data traffic requesting a non-zero TOS.  The absence\n   \
    \     of the T-bit in a summary link advertisement or an AS external\n       \
    \ link advertisement indicates that the advertisement is\n        describing a\
    \ TOS 0 route only (and not routes for non-zero TOS).\n    E-bit\n        This\
    \ bit reflects the associated area's\n        ExternalRoutingCapability.  AS external\
    \ link advertisements are\n        not flooded into/through OSPF stub areas (see\
    \ Section 3.6).  The\n        E-bit ensures that all members of a stub area agree\
    \ on that\n        area's configuration.  The E-bit is meaningful only in OSPF\n\
    \        Hello packets.  When the E-bit is reset in the Hello packet sent\n  \
    \      out a particular interface, it means that the router will\n        neither\
    \ send nor receive AS external link state advertisements\n        on that interface\
    \ (in other words, the interface connects to a\n        stub area).  Two routers\
    \ will not become neighbors unless they\n        agree on the state of the E-bit.\n"
- title: A.3 OSPF Packet Formats
  contents:
  - "A.3 OSPF Packet Formats\n    There are five distinct OSPF packet types.  All\
    \ OSPF packet types\n    begin with a standard 24 byte header.  This header is\
    \ described\n    first.  Each packet type is then described in a succeeding section.\n\
    \    In these sections each packet's division into fields is displayed,\n    and\
    \ then the field definitions are enumerated.\n    All OSPF packet types (other\
    \ than the OSPF Hello packets) deal with\n    lists of link state advertisements.\
    \  For example, Link State Update\n    packets implement the flooding of advertisements\
    \ throughout the OSPF\n    routing domain.  Because of this, OSPF protocol packets\
    \ cannot be\n    parsed unless the format of link state advertisements is also\n\
    \    understood.  The format of Link state advertisements is described in\n  \
    \  Section A.4.\n    The receive processing of OSPF packets is detailed in Section\
    \ 8.2.\n    The sending of OSPF packets is explained in Section 8.1.\n"
- title: A.3.1 The OSPF packet header
  contents:
  - "A.3.1 The OSPF packet header\n    Every OSPF packet starts with a common 24 byte\
    \ header.  This header\n    contains all the necessary information to determine\
    \ whether the\n    packet should be accepted for further processing.  This\n \
    \   determination is described in Section 8.2 of the specification.\n        0\
    \                   1                   2                   3\n        0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |   Version #   |     Type      |         Packet length         |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                          Router ID                            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                           Area ID                             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |           Checksum            |             AuType            |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                       Authentication                          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                       Authentication                          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    Version #\n        The OSPF version number.  This specification documents\
    \ version 2\n        of the protocol.\n    Type\n        The OSPF packet types\
    \ are as follows.  The format of each of\n        these packet types is described\
    \ in a succeeding section.\n                          Type   Description\n   \
    \                       ________________________________\n                   \
    \       1      Hello\n                          2      Database Description\n\
    \                          3      Link State Request\n                       \
    \   4      Link State Update\n                          5      Link State Acknowledgment\n\
    \    Packet length\n        The length of the protocol packet in bytes.  This\
    \ length\n        includes the standard OSPF header.\n    Router ID\n        The\
    \ Router ID of the packet's source.  In OSPF, the source and\n        destination\
    \ of a routing protocol packet are the two ends of an\n        (potential) adjacency.\n\
    \    Area ID\n        A 32 bit number identifying the area that this packet belongs\n\
    \        to.  All OSPF packets are associated with a single area.  Most\n    \
    \    travel a single hop only.  Packets travelling over a virtual\n        link\
    \ are labelled with the backbone Area ID of 0.0.0.0.\n    Checksum\n        The\
    \ standard IP checksum of the entire contents of the packet,\n        starting\
    \ with the OSPF packet header but excluding the 64-bit\n        authentication\
    \ field.  This checksum is calculated as the 16-bit\n        one's complement\
    \ of the one's complement sum of all the 16-bit\n        words in the packet,\
    \ excepting the authentication field.  If the\n        packet's length is not\
    \ an integral number of 16-bit words, the\n        packet is padded with a byte\
    \ of zero before checksumming.\n    AuType\n        Identifies the authentication\
    \ scheme to be used for the packet.\n        Authentication is discussed in Appendix\
    \ D of the specification.\n        Consult Appendix D for a list of the currently\
    \ defined\n        authentication types.\n    Authentication\n        A 64-bit\
    \ field for use by the authentication scheme.\n"
- title: A.3.2 The Hello packet
  contents:
  - "A.3.2 The Hello packet\n    Hello packets are OSPF packet type 1.  These packets\
    \ are sent\n    periodically on all interfaces (including virtual links) in order\
    \ to\n    establish and maintain neighbor relationships.  In addition, Hello\n\
    \    Packets are multicast on those physical networks having a multicast\n   \
    \ or broadcast capability, enabling dynamic discovery of neighboring\n    routers.\n\
    \    All routers connected to a common network must agree on certain\n    parameters\
    \ (Network mask, HelloInterval and RouterDeadInterval).\n    These parameters\
    \ are included in Hello packets, so that differences\n    can inhibit the forming\
    \ of neighbor relationships.  A detailed\n    explanation of the receive processing\
    \ for Hello packets is presented\n    in Section 10.5.  The sending of Hello packets\
    \ is covered in Section\n    9.5.\n        0                   1             \
    \      2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |   Version #   |       1       |         Packet length         |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                          Router ID                            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                           Area ID                             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |           Checksum            |             AuType            |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                       Authentication                          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                       Authentication                          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                        Network Mask                           |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |         HelloInterval         |    Options    |    Rtr Pri    |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                     RouterDeadInterval                        |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                      Designated Router                        |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                   Backup Designated Router                    |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                          Neighbor                             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                              ...                              |\n  \
    \  Network mask\n        The network mask associated with this interface.  For\
    \ example,\n        if the interface is to a class B network whose third byte\
    \ is\n        used for subnetting, the network mask is 0xffffff00.\n    Options\n\
    \        The optional capabilities supported by the router, as documented\n  \
    \      in Section A.2.\n    HelloInterval\n        The number of seconds between\
    \ this router's Hello packets.\n    Rtr Pri\n        This router's Router Priority.\
    \  Used in (Backup) Designated\n        Router election.  If set to 0, the router\
    \ will be ineligible to\n        become (Backup) Designated Router.\n    RouterDeadInterval\n\
    \        The number of seconds before declaring a silent router down.\n    Designated\
    \ Router\n        The identity of the Designated Router for this network, in the\n\
    \        view of the advertising router.  The Designated Router is\n        identified\
    \ here by its IP interface address on the network.  Set\n        to 0.0.0.0 if\
    \ there is no Designated Router.\n    Backup Designated Router\n        The identity\
    \ of the Backup Designated Router for this network,\n        in the view of the\
    \ advertising router.  The Backup Designated\n        Router is identified here\
    \ by its IP interface address on the\n        network.  Set to 0.0.0.0 if there\
    \ is no Backup Designated\n        Router.\n    Neighbor\n        The Router IDs\
    \ of each router from whom valid Hello packets have\n        been seen recently\
    \ on the network.  Recently means in the last\n        RouterDeadInterval seconds.\n"
- title: A.3.3 The Database Description packet
  contents:
  - "A.3.3 The Database Description packet\n    Database Description packets are OSPF\
    \ packet type 2.  These packets\n    are exchanged when an adjacency is being\
    \ initialized.  They describe\n    the contents of the topological database. \
    \ Multiple packets may be\n    used to describe the database.  For this purpose\
    \ a poll-response\n    procedure is used.  One of the routers is designated to\
    \ be master,\n    the other a slave.  The master sends Database Description packets\n\
    \    (polls) which are acknowledged by Database Description packets sent\n   \
    \ by the slave (responses).  The responses are linked to the polls via\n    the\
    \ packets' DD sequence numbers.\n        0                   1               \
    \    2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |   Version #   |       2       |         Packet length         |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                          Router ID                            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                           Area ID                             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |           Checksum            |             AuType            |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                       Authentication                          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                       Authentication                          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |       0       |       0       |    Options    |0|0|0|0|0|I|M|MS\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                     DD sequence number                        |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                                                               |\n       +- \
    \                                                            -+\n       |    \
    \                         A                                 |\n       +-     \
    \            Link State Advertisement                    -+\n       |        \
    \                   Header                              |\n       +-         \
    \                                                    -+\n       |            \
    \                                                   |\n       +-             \
    \                                                -+\n       |                \
    \                                               |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                              ...                              |\n  \
    \  The format of the Database Description packet is very similar to\n    both\
    \ the Link State Request and Link State Acknowledgment packets.\n    The main\
    \ part of all three is a list of items, each item describing\n    a piece of the\
    \ topological database.  The sending of Database\n    Description Packets is documented\
    \ in Section 10.8.  The reception of\n    Database Description packets is documented\
    \ in Section 10.6.\n    0   These fields are reserved.  They must be 0.\n    Options\n\
    \        The optional capabilities supported by the router, as documented\n  \
    \      in Section A.2.\n    I-bit\n        The Init bit.  When set to 1, this\
    \ packet is the first in the\n        sequence of Database Description Packets.\n\
    \    M-bit\n        The More bit.  When set to 1, it indicates that more Database\n\
    \        Description Packets are to follow.\n    MS-bit\n        The Master/Slave\
    \ bit.  When set to 1, it indicates that the\n        router is the master during\
    \ the Database Exchange process.\n        Otherwise, the router is the slave.\n\
    \    DD sequence number\n        Used to sequence the collection of Database Description\
    \ Packets.\n        The initial value (indicated by the Init bit being set) should\n\
    \        be unique.  The DD sequence number then increments until the\n      \
    \  complete database description has been sent.\n    The rest of the packet consists\
    \ of a (possibly partial) list of the\n    topological database's pieces.  Each\
    \ link state advertisement in the\n    database is described by its link state\
    \ advertisement header.  The\n    link state advertisement header is documented\
    \ in Section A.4.1.  It\n    contains all the information required to uniquely\
    \ identify both the\n    advertisement and the advertisement's current instance.\n"
- title: A.3.4 The Link State Request packet
  contents:
  - "A.3.4 The Link State Request packet\n    Link State Request packets are OSPF\
    \ packet type 3.  After exchanging\n    Database Description packets with a neighboring\
    \ router, a router may\n    find that parts of its topological database are out\
    \ of date.  The\n    Link State Request packet is used to request the pieces of\
    \ the\n    neighbor's database that are more up to date.  Multiple Link State\n\
    \    Request packets may need to be used.  The sending of Link State\n    Request\
    \ packets is the last step in bringing up an adjacency.\n    A router that sends\
    \ a Link State Request packet has in mind the\n    precise instance of the database\
    \ pieces it is requesting, defined by\n    LS sequence number, LS checksum, and\
    \ LS age, although these fields\n    are not specified in the Link State Request\
    \ Packet itself.  The\n    router may receive even more recent instances in response.\n\
    \    The sending of Link State Request packets is documented in Section\n    10.9.\
    \  The reception of Link State Request packets is documented in\n    Section 10.7.\n\
    \        0                   1                   2                   3\n     \
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |   Version #   |       3       |         Packet length         |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                          Router ID                            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                           Area ID                             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |           Checksum            |             AuType            |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                       Authentication                          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                       Authentication                          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                          LS type                              |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                       Link State ID                           |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                     Advertising Router                        |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                              ...                              |\n  \
    \  Each advertisement requested is specified by its LS type, Link State\n    ID,\
    \ and Advertising Router.  This uniquely identifies the\n    advertisement, but\
    \ not its instance.  Link State Request packets are\n    understood to be requests\
    \ for the most recent instance (whatever\n    that might be).\n"
- title: A.3.5 The Link State Update packet
  contents:
  - "A.3.5 The Link State Update packet\n    Link State Update packets are OSPF packet\
    \ type 4.  These packets\n    implement the flooding of link state advertisements.\
    \  Each Link\n    State Update packet carries a collection of link state\n   \
    \ advertisements one hop further from its origin.  Several link state\n    advertisements\
    \ may be included in a single packet.\n    Link State Update packets are multicast\
    \ on those physical networks\n    that support multicast/broadcast.  In order\
    \ to make the flooding\n    procedure reliable, flooded advertisements are acknowledged\
    \ in Link\n    State Acknowledgment packets.  If retransmission of certain\n \
    \   advertisements is necessary, the retransmitted advertisements are\n    always\
    \ carried by unicast Link State Update packets.  For more\n    information on\
    \ the reliable flooding of link state advertisements,\n    consult Section 13.\n\
    \        0                   1                   2                   3\n     \
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |   Version #   |       4       |         Packet length         |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                          Router ID                            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                           Area ID                             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |           Checksum            |             AuType            |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                       Authentication                          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                       Authentication                          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                      # advertisements                         |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                                                               |\n      \
    \ +-                                                            +-+\n       |\
    \                  Link state advertisements                    |\n       +- \
    \                                                           +-+\n       |    \
    \                          ...                              |\n    # advertisements\n\
    \        The number of link state advertisements included in this update.\n  \
    \  The body of the Link State Update packet consists of a list of link\n    state\
    \ advertisements.  Each advertisement begins with a common 20\n    byte header,\
    \ the link state advertisement header.  This header is\n    described in Section\
    \ A.4.1.  Otherwise, the format of each of the\n    five types of link state advertisements\
    \ is different.  Their formats\n    are described in Section A.4.\n"
- title: A.3.6 The Link State Acknowledgment packet
  contents:
  - "A.3.6 The Link State Acknowledgment packet\n    Link State Acknowledgment Packets\
    \ are OSPF packet type 5.  To make\n    the flooding of link state advertisements\
    \ reliable, flooded\n    advertisements are explicitly acknowledged.  This acknowledgment\
    \ is\n    accomplished through the sending and receiving of Link State\n    Acknowledgment\
    \ packets.  Multiple link state advertisements can be\n    acknowledged in a single\
    \ Link State Acknowledgment packet.\n    Depending on the state of the sending\
    \ interface and the source of\n    the advertisements being acknowledged, a Link\
    \ State Acknowledgment\n    packet is sent either to the multicast address AllSPFRouters,\
    \ to the\n    multicast address AllDRouters, or as a unicast.  The sending of\
    \ Link\n    State Acknowledgement packets is documented in Section 13.5.  The\n\
    \    reception of Link State Acknowledgement packets is documented in\n    Section\
    \ 13.7.\n    The format of this packet is similar to that of the Data Description\n\
    \    packet.  The body of both packets is simply a list of link state\n    advertisement\
    \ headers.\n        0                   1                   2                \
    \   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \     |   Version #   |       5       |         Packet length         |\n    \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \ |                          Router ID                            |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                           Area ID                             |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |           Checksum            |             AuType            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                       Authentication                          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                       Authentication                          |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                                                               |\n      \
    \ +-                                                             -+\n       |\
    \                             A                                 |\n       +- \
    \                Link State Advertisement                    -+\n       |    \
    \                       Header                              |\n       +-     \
    \                                                        -+\n       |        \
    \                                                       |\n       +-         \
    \                                                    -+\n       |            \
    \                                                   |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                              ...                              |\n  \
    \  Each acknowledged link state advertisement is described by its link\n    state\
    \ advertisement header.  The link state advertisement header is\n    documented\
    \ in Section A.4.1.  It contains all the information\n    required to uniquely\
    \ identify both the advertisement and the\n    advertisement's current instance.\n"
- title: A.4 Link state advertisement formats
  contents:
  - "A.4 Link state advertisement formats\n    There are five distinct types of link\
    \ state advertisements.  Each\n    link state advertisement begins with a standard\
    \ 20-byte link state\n    advertisement header.  This header is explained in Section\
    \ A.4.1.\n    Succeeding sections then diagram the separate link state\n    advertisement\
    \ types.\n    Each link state advertisement describes a piece of the OSPF routing\n\
    \    domain.  Every router originates a router links advertisement.  In\n    addition,\
    \ whenever the router is elected Designated Router, it\n    originates a network\
    \ links advertisement.  Other types of link state\n    advertisements may also\
    \ be originated (see Section 12.4).  All link\n    state advertisements are then\
    \ flooded throughout the OSPF routing\n    domain.  The flooding algorithm is\
    \ reliable, ensuring that all\n    routers have the same collection of link state\
    \ advertisements.  (See\n    Section 13 for more information concerning the flooding\
    \ algorithm).\n    This collection of advertisements is called the link state\
    \ (or\n    topological) database.\n    From the link state database, each router\
    \ constructs a shortest path\n    tree with itself as root.  This yields a routing\
    \ table (see Section\n    11).  For the details of the routing table build process,\
    \ see\n    Section 16.\n"
- title: A.4.1 The Link State Advertisement header
  contents:
  - "A.4.1 The Link State Advertisement header\n    All link state advertisements\
    \ begin with a common 20 byte header.\n    This header contains enough information\
    \ to uniquely identify the\n    advertisement (LS type, Link State ID, and Advertising\
    \ Router).\n    Multiple instances of the link state advertisement may exist in\
    \ the\n    routing domain at the same time.  It is then necessary to determine\n\
    \    which instance is more recent.  This is accomplished by examining\n    the\
    \ LS age, LS sequence number and LS checksum fields that are also\n    contained\
    \ in the link state advertisement header.\n        0                   1     \
    \              2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |            LS age             |    Options    |    LS type    |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                        Link State ID                          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                     Advertising Router                        |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                     LS sequence number                        |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |         LS checksum           |             length            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    LS age\n\
    \        The time in seconds since the link state advertisement was\n        originated.\n\
    \    Options\n        The optional capabilities supported by the described portion\
    \ of\n        the routing domain.  OSPF's optional capabilities are documented\n\
    \        in Section A.2.\n    LS type\n        The type of the link state advertisement.\
    \  Each link state type\n        has a separate advertisement format.  The link\
    \ state types are\n        as follows (see Section 12.1.3 for further explanation):\n\
    \                        LS Type   Description\n                        ___________________________________\n\
    \                        1         Router links\n                        2   \
    \      Network links\n                        3         Summary link (IP network)\n\
    \                        4         Summary link (ASBR)\n                     \
    \   5         AS external link\n    Link State ID\n        This field identifies\
    \ the portion of the internet environment\n        that is being described by\
    \ the advertisement.  The contents of\n        this field depend on the advertisement's\
    \ LS type.  For example,\n        in network links advertisements the Link State\
    \ ID is set to the\n        IP interface address of the network's Designated Router\
    \ (from\n        which the network's IP address can be derived).  The Link State\n\
    \        ID is further discussed in Section 12.1.4.\n    Advertising Router\n\
    \        The Router ID of the router that originated the link state\n        advertisement.\
    \  For example, in network links advertisements\n        this field is set to\
    \ the Router ID of the network's Designated\n        Router.\n    LS sequence\
    \ number\n        Detects old or duplicate link state advertisements.  Successive\n\
    \        instances of a link state advertisement are given successive LS\n   \
    \     sequence numbers.  See Section 12.1.6 for more details.\n    LS checksum\n\
    \        The Fletcher checksum of the complete contents of the link state\n  \
    \      advertisement, including the link state advertisement header but\n    \
    \    excepting the LS age field. See Section 12.1.7 for more details.\n    length\n\
    \        The length in bytes of the link state advertisement.  This\n        includes\
    \ the 20 byte link state advertisement header.\n"
- title: A.4.2 Router links advertisements
  contents:
  - "A.4.2 Router links advertisements\n    Router links advertisements are the Type\
    \ 1 link state\n    advertisements.  Each router in an area originates a router\
    \ links\n    advertisement.  The advertisement describes the state and cost of\n\
    \    the router's links (i.e., interfaces) to the area.  All of the\n    router's\
    \ links to the area must be described in a single router\n    links advertisement.\
    \  For details concerning the construction of\n    router links advertisements,\
    \ see Section 12.4.1.\n        0                   1                   2     \
    \              3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |            LS age             |     Options   |       1       |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                        Link State ID                          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                     Advertising Router                        |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                     LS sequence number                        |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |         LS checksum           |             length            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \    0    |V|E|B|        0      |            # links            |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                          Link ID                              |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                         Link Data                             |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \     Type      |     # TOS     |        TOS 0 metric           |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |      TOS      |        0      |            metric             |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                              ...                              |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \      TOS      |        0      |            metric             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                          Link ID                              |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                         Link Data                             |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                              ...                              |\n    In router\
    \ links advertisements, the Link State ID field is set to\n    the router's OSPF\
    \ Router ID.  The T-bit is set in the\n    advertisement's Option field if and\
    \ only if the router is able to\n    calculate a separate set of routes for each\
    \ IP TOS.  Router links\n    advertisements are flooded throughout a single area\
    \ only.\n    bit V\n        When set, the router is an endpoint of an active virtual\
    \ link\n        that is using the described area as a Transit area (V is for\n\
    \        virtual link endpoint).\n    bit E\n        When set, the router is an\
    \ AS boundary router (E is for\n        external)\n    bit B\n        When set,\
    \ the router is an area border router (B is for border)\n    # links\n       \
    \ The number of router links described by this advertisement.\n        This must\
    \ be the total collection of router links (i.e.,\n        interfaces) to the area.\n\
    \    The following fields are used to describe each router link (i.e.,\n    interface).\
    \ Each router link is typed (see the below Type field).\n    The Type field indicates\
    \ the kind of link being described.  It may\n    be a link to a transit network,\
    \ to another router or to a stub\n    network.  The values of all the other fields\
    \ describing a router\n    link depend on the link's Type.  For example, each\
    \ link has an\n    associated 32-bit data field.  For links to stub networks this\
    \ field\n    specifies the network's IP address mask.  For other link types the\n\
    \    Link Data specifies the router's associated IP interface address.\n    Type\n\
    \        A quick description of the router link.  One of the following.\n    \
    \    Note that host routes are classified as links to stub networks\n        whose\
    \ network mask is 0xffffffff.\n                 Type   Description\n         \
    \        __________________________________________________\n                \
    \ 1      Point-to-point connection to another router\n                 2     \
    \ Connection to a transit network\n                 3      Connection to a stub\
    \ network\n                 4      Virtual link\n    Link ID\n        Identifies\
    \ the object that this router link connects to.  Value\n        depends on the\
    \ link's Type.  When connecting to an object that\n        also originates a link\
    \ state advertisement (i.e., another router\n        or a transit network) the\
    \ Link ID is equal to the neighboring\n        advertisement's Link State ID.\
    \  This provides the key for\n        looking up said advertisement in the link\
    \ state database.  See\n        Section 12.2 for more details.\n             \
    \          Type   Link ID\n                       ______________________________________\n\
    \                       1      Neighboring router's Router ID\n              \
    \         2      IP address of Designated Router\n                       3   \
    \   IP network/subnet number\n                       4      Neighboring router's\
    \ Router ID\n    Link Data\n        Contents again depend on the link's Type field.\
    \ For connections\n        to stub networks, it specifies the network's IP address\
    \ mask.\n        For unnumbered point-to-point connections, it specifies the\n\
    \        interface's MIB-II [RFC 1213] ifIndex value. For the other link\n   \
    \     types it specifies the router's associated IP interface address.\n     \
    \   This latter piece of information is needed during the routing\n        table\
    \ build process, when calculating the IP address of the next\n        hop. See\
    \ Section 16.1.1 for more details.\n    # TOS\n        The number of different\
    \ TOS metrics given for this link, not\n        counting the required metric for\
    \ TOS 0.  For example, if no\n        additional TOS metrics are given, this field\
    \ should be set to 0.\n    TOS 0 metric\n        The cost of using this router\
    \ link for TOS 0.\n    For each link, separate metrics may be specified for each\
    \ Type of\n    Service (TOS).  The metric for TOS 0 must always be included, and\n\
    \    was discussed above.  Metrics for non-zero TOS are described below.\n   \
    \ The encoding of TOS in OSPF link state advertisements is described\n    in Section\
    \ 12.3.  Note that the cost for non-zero TOS values that\n    are not specified\
    \ defaults to the TOS 0 cost.  Metrics must be\n    listed in order of increasing\
    \ TOS encoding.  For example, the metric\n    for TOS 16 must always follow the\
    \ metric for TOS 8 when both are\n    specified.\n    TOS IP Type of Service that\
    \ this metric refers to.  The encoding of\n        TOS in OSPF link state advertisements\
    \ is described in Section\n        12.3.\n    metric\n        The cost of using\
    \ this outbound router link, for traffic of the\n        specified TOS.\n"
- title: A.4.3 Network links advertisements
  contents:
  - "A.4.3 Network links advertisements\n    Network links advertisements are the\
    \ Type 2 link state\n    advertisements.  A network links advertisement is originated\
    \ for\n    each transit network in the area.  A transit network is a multi-\n\
    \    access network that has more than one attached router.  The network\n   \
    \ links advertisement is originated by the network's Designated\n    Router. \
    \ The advertisement describes all routers attached to the\n    network, including\
    \ the Designated Router itself.  The\n    advertisement's Link State ID field\
    \ lists the IP interface address\n    of the Designated Router.\n    The distance\
    \ from the network to all attached routers is zero, for\n    all Types of Service.\
    \  This is why the TOS and metric fields need\n    not be specified in the network\
    \ links advertisement.  For details\n    concerning the construction of network\
    \ links advertisements, see\n    Section 12.4.2.\n        0                  \
    \ 1                   2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |            LS age             |      Options  |      2        |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                        Link State ID                          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                     Advertising Router                        |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                     LS sequence number                        |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |         LS checksum           |             length            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                         Network Mask                          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                        Attached Router                        |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                              ...                              |\n    Network\
    \ Mask\n        The IP address mask for the network.  For example, a class A\n\
    \        network would have the mask 0xff000000.\n    Attached Router\n      \
    \  The Router IDs of each of the routers attached to the network.\n        Actually,\
    \ only those routers that are fully adjacent to the\n        Designated Router\
    \ are listed.  The Designated Router includes\n        itself in this list.  The\
    \ number of routers included can be\n        deduced from the link state advertisement\
    \ header's length field.\n"
- title: A.4.4 Summary link advertisements
  contents:
  - "A.4.4 Summary link advertisements\n    Summary link advertisements are the Type\
    \ 3 and 4 link state\n    advertisements.  These advertisements are originated\
    \ by area border\n    routers.  A separate summary link advertisement is made\
    \ for each\n    destination (known to the router) which belongs to the AS, yet\
    \ is\n    outside the area.  For details concerning the construction of\n    summary\
    \ link advertisements, see Section 12.4.3.\n    Type 3 link state advertisements\
    \ are used when the destination is an\n    IP network.  In this case the advertisement's\
    \ Link State ID field is\n    an IP network number (if necessary, the Link State\
    \ ID can also have\n    one or more of the network's \"host\" bits set; see Appendix\
    \ F for\n    details). When the destination is an AS boundary router, a Type 4\n\
    \    advertisement is used, and the Link State ID field is the AS\n    boundary\
    \ router's OSPF Router ID.  (To see why it is necessary to\n    advertise the\
    \ location of each ASBR, consult Section 16.4.)  Other\n    than the difference\
    \ in the Link State ID field, the format of Type 3\n    and 4 link state advertisements\
    \ is identical.\n        0                   1                   2           \
    \        3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |            LS age             |     Options   |    3 or 4     |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                        Link State ID                          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                     Advertising Router                        |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                     LS sequence number                        |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |         LS checksum           |             length            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                         Network Mask                          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |     TOS       |                  metric                       |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                              ...                              |\n    For\
    \ stub areas, Type 3 summary link advertisements can also be used\n    to describe\
    \ a (per-area) default route.  Default summary routes are\n    used in stub areas\
    \ instead of flooding a complete set of external\n    routes.  When describing\
    \ a default summary route, the\n    advertisement's Link State ID is always set\
    \ to DefaultDestination\n    (0.0.0.0) and the Network Mask is set to 0.0.0.0.\n\
    \    Separate costs may be advertised for each IP Type of Service.  The\n    encoding\
    \ of TOS in OSPF link state advertisements is described in\n    Section 12.3.\
    \  Note that the cost for TOS 0 must be included, and is\n    always listed first.\
    \  If the T-bit is reset in the advertisement's\n    Option field, only a route\
    \ for TOS 0 is described by the\n    advertisement.  Otherwise, routes for the\
    \ other TOS values are also\n    described; if a cost for a certain TOS is not\
    \ included, its cost\n    defaults to that specified for TOS 0.\n    Network Mask\n\
    \        For Type 3 link state advertisements, this indicates the\n        destination\
    \ network's IP address mask.  For example, when\n        advertising the location\
    \ of a class A network the value\n        0xff000000 would be used.  This field\
    \ is not meaningful and must\n        be zero for Type 4 link state advertisements.\n\
    \    For each specified Type of Service, the following fields are\n    defined.\
    \  The number of TOS routes included can be calculated from\n    the link state\
    \ advertisement header's length field.  Values for TOS\n    0 must be specified;\
    \ they are listed first.  Other values must be\n    listed in order of increasing\
    \ TOS encoding.  For example, the cost\n    for TOS 16 must always follow the\
    \ cost for TOS 8 when both are\n    specified.\n    TOS The Type of Service that\
    \ the following cost concerns.  The\n        encoding of TOS in OSPF link state\
    \ advertisements is described\n        in Section 12.3.\n    metric\n        The\
    \ cost of this route.  Expressed in the same units as the\n        interface costs\
    \ in the router links advertisements.\n"
- title: A.4.5 AS external link advertisements
  contents:
  - "A.4.5 AS external link advertisements\n    AS external link advertisements are\
    \ the Type 5 link state\n    advertisements.  These advertisements are originated\
    \ by AS boundary\n    routers.  A separate advertisement is made for each destination\n\
    \    (known to the router) which is external to the AS.  For details\n    concerning\
    \ the construction of AS external link advertisements, see\n    Section 12.4.3.\n\
    \    AS external link advertisements usually describe a particular\n    external\
    \ destination.  For these advertisements the Link State ID\n    field specifies\
    \ an IP network number (if necessary, the Link State\n    ID can also have one\
    \ or more of the network's \"host\" bits set; see\n    Appendix F for details).\
    \  AS external link advertisements are also\n    used to describe a default route.\
    \  Default routes are used when no\n    specific route exists to the destination.\
    \  When describing a default\n    route, the Link State ID is always set to DefaultDestination\n\
    \    (0.0.0.0) and the Network Mask is set to 0.0.0.0.\n        0            \
    \       1                   2                   3\n        0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |            LS age             |     Options   |      5        |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                        Link State ID                          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                     Advertising Router                        |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                     LS sequence number                        |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |         LS checksum           |             length            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                         Network Mask                          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |E|    TOS      |                  metric                       |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                      Forwarding address                       |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                      External Route Tag                       |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                              ...                              |\n  \
    \  Separate costs may be advertised for each IP Type of Service.  The\n    encoding\
    \ of TOS in OSPF link state advertisements is described in\n    Section 12.3.\
    \  Note that the cost for TOS 0 must be included, and is\n    always listed first.\
    \  If the T-bit is reset in the advertisement's\n    Option field, only a route\
    \ for TOS 0 is described by the\n    advertisement.  Otherwise, routes for the\
    \ other TOS values are also\n    described; if a cost for a certain TOS is not\
    \ included, its cost\n    defaults to that specified for TOS 0.\n    Network Mask\n\
    \        The IP address mask for the advertised destination.  For\n        example,\
    \ when advertising a class A network the mask 0xff000000\n        would be used.\n\
    \    For each specified Type of Service, the following fields are\n    defined.\
    \  The number of TOS routes included can be calculated from\n    the link state\
    \ advertisement header's length field.  Values for TOS\n    0 must be specified;\
    \ they are listed first.  Other values must be\n    listed in order of increasing\
    \ TOS encoding.  For example, the cost\n    for TOS 16 must always follow the\
    \ cost for TOS 8 when both are\n    specified.\n    bit E\n        The type of\
    \ external metric.  If bit E is set, the metric\n        specified is a Type 2\
    \ external metric.  This means the metric is\n        considered larger than any\
    \ link state path.  If bit E is zero,\n        the specified metric is a Type\
    \ 1 external metric.  This means\n        that is is comparable directly (without\
    \ translation) to the link\n        state metric.\n    Forwarding address\n  \
    \      Data traffic for the advertised destination will be forwarded to\n    \
    \    this address.  If the Forwarding address is set to 0.0.0.0, data\n      \
    \  traffic will be forwarded instead to the advertisement's\n        originator\
    \ (i.e., the responsible AS boundary router).\n    TOS The Type of Service that\
    \ the following cost concerns.  The\n        encoding of TOS in OSPF link state\
    \ advertisements is described\n        in Section 12.3.\n    metric\n        The\
    \ cost of this route.  Interpretation depends on the external\n        type indication\
    \ (bit E above).\n    External Route Tag\n        A 32-bit field attached to each\
    \ external route.  This is not\n        used by the OSPF protocol itself.  It\
    \ may be used to communicate\n        information between AS boundary routers;\
    \ the precise nature of\n        such information is outside the scope of this\
    \ specification.\n"
- title: B. Architectural Constants
  contents:
  - "B. Architectural Constants\n    Several OSPF protocol parameters have fixed architectural\
    \ values.\n    These parameters have been referred to in the text by names such\
    \ as\n    LSRefreshTime.  The same naming convention is used for the\n    configurable\
    \ protocol parameters.  They are defined in Appendix C.\n    The name of each\
    \ architectural constant follows, together with its\n    value and a short description\
    \ of its function.\n    LSRefreshTime\n        The maximum time between distinct\
    \ originations of any particular\n        link state advertisement.  When the\
    \ LS age field of one of the\n        router's self-originated advertisements\
    \ reaches the value\n        LSRefreshTime, a new instance of the link state advertisement\
    \ is\n        originated, even though the contents of the advertisement (apart\n\
    \        from the link state header) will be the same.  The value of\n       \
    \ LSRefreshTime is set to 30 minutes.\n    MinLSInterval\n        The minimum\
    \ time between distinct originations of any particular\n        link state advertisement.\
    \  The value of MinLSInterval is set to\n        5 seconds.\n    MaxAge\n    \
    \    The maximum age that a link state advertisement can attain. When\n      \
    \  an advertisement's LS age field reaches MaxAge, it is reflooded\n        in\
    \ an attempt to flush the advertisement from the routing domain\n        (See\
    \ Section 14). Advertisements of age MaxAge are not used in\n        the routing\
    \ table calculation.  The value of MaxAge must be\n        greater than LSRefreshTime.\
    \  The value of MaxAge is set to 1\n        hour.\n    CheckAge\n        When\
    \ the age of a link state advertisement (that is contained in\n        the link\
    \ state database) hits a multiple of CheckAge, the\n        advertisement's checksum\
    \ is verified.  An incorrect checksum at\n        this time indicates a serious\
    \ error.  The value of CheckAge is\n        set to 5 minutes.\n    MaxAgeDiff\n\
    \        The maximum time dispersion that can occur, as a link state\n       \
    \ advertisement is flooded throughout the AS.  Most of this time\n        is accounted\
    \ for by the link state advertisements sitting on\n        router output queues\
    \ (and therefore not aging) during the\n        flooding process.  The value of\
    \ MaxAgeDiff is set to 15 minutes.\n    LSInfinity\n        The metric value indicating\
    \ that the destination described by a\n        link state advertisement is unreachable.\
    \ Used in summary link\n        advertisements and AS external link advertisements\
    \ as an\n        alternative to premature aging (see Section 14.1). It is defined\n\
    \        to be the 24-bit binary value of all ones: 0xffffff.\n    DefaultDestination\n\
    \        The Destination ID that indicates the default route.  This route\n  \
    \      is used when no other matching routing table entry can be found.\n    \
    \    The default destination can only be advertised in AS external\n        link\
    \ advertisements and in stub areas' type 3 summary link\n        advertisements.\
    \  Its value is the IP address 0.0.0.0.\n"
- title: C. Configurable Constants
  contents:
  - "C. Configurable Constants\n    The OSPF protocol has quite a few configurable\
    \ parameters.  These\n    parameters are listed below.  They are grouped into\
    \ general\n    functional categories (area parameters, interface parameters, etc.).\n\
    \    Sample values are given for some of the parameters.\n    Some parameter settings\
    \ need to be consistent among groups of\n    routers.  For example, all routers\
    \ in an area must agree on that\n    area's parameters, and all routers attached\
    \ to a network must agree\n    on that network's IP network number and mask.\n\
    \    Some parameters may be determined by router algorithms outside of\n    this\
    \ specification (e.g., the address of a host connected to the\n    router via\
    \ a SLIP line).  From OSPF's point of view, these items are\n    still configurable.\n\
    \    C.1 Global parameters\n        In general, a separate copy of the OSPF protocol\
    \ is run for each\n        area.  Because of this, most configuration parameters\
    \ are\n        defined on a per-area basis.  The few global configuration\n  \
    \      parameters are listed below.\n        Router ID\n            This is a\
    \ 32-bit number that uniquely identifies the router\n            in the Autonomous\
    \ System.  One algorithm for Router ID\n            assignment is to choose the\
    \ largest or smallest IP address\n            assigned to the router.  If a router's\
    \ OSPF Router ID is\n            changed, the router's OSPF software should be\
    \ restarted\n            before the new Router ID takes effect. Before restarting\
    \ in\n            order to change its Router ID, the router should flush its\n\
    \            self-originated link state advertisements from the routing\n    \
    \        domain (see Section 14.1), or they will persist for up to\n         \
    \   MaxAge minutes.\n        TOS capability\n            This item indicates whether\
    \ the router will calculate\n            separate routes based on TOS.  For more\
    \ information, see\n            Sections 4.5 and 16.9.\n    C.2 Area parameters\n\
    \        All routers belonging to an area must agree on that area's\n        configuration.\
    \  Disagreements between two routers will lead to\n        an inability for adjacencies\
    \ to form between them, with a\n        resulting hindrance to the flow of routing\
    \ protocol and data\n        traffic.  The following items must be configured\
    \ for an area:\n        Area ID\n            This is a 32-bit number that identifies\
    \ the area.  The Area\n            ID of 0.0.0.0 is reserved for the backbone.\
    \  If the area\n            represents a subnetted network, the IP network number\
    \ of the\n            subnetted network may be used for the Area ID.\n       \
    \ List of address ranges\n            An OSPF area is defined as a list of address\
    \ ranges. Each\n            address range consists of the following items:\n \
    \           [IP address, mask]\n                    Describes the collection of\
    \ IP addresses contained\n                    in the address range. Networks and\
    \ hosts are\n                    assigned to an area depending on whether their\n\
    \                    addresses fall into one of the area's defining\n        \
    \            address ranges.  Routers are viewed as belonging to\n           \
    \         multiple areas, depending on their attached\n                    networks'\
    \ area membership.\n            Status  Set to either Advertise or DoNotAdvertise.\
    \  Routing\n                    information is condensed at area boundaries.\n\
    \                    External to the area, at most a single route is\n       \
    \             advertised (via a summary link advertisement) for\n            \
    \        each address range. The route is advertised if and\n                \
    \    only if the address range's Status is set to\n                    Advertise.\
    \  Unadvertised ranges allow the existence\n                    of certain networks\
    \ to be intentionally hidden from\n                    other areas. Status is\
    \ set to Advertise by default.\n            As an example, suppose an IP subnetted\
    \ network is to be its\n            own OSPF area.  The area would be configured\
    \ as a single\n            address range, whose IP address is the address of the\n\
    \            subnetted network, and whose mask is the natural class A, B,\n  \
    \          or C address mask.  A single route would be advertised\n          \
    \  external to the area, describing the entire subnetted\n            network.\n\
    \        AuType\n            Each area can be configured for a separate type of\n\
    \            authentication.  See Appendix D for a discussion of the\n       \
    \     defined authentication types.\n        ExternalRoutingCapability\n     \
    \       Whether AS external advertisements will be flooded\n            into/throughout\
    \ the area.  If AS external advertisements are\n            excluded from the\
    \ area, the area is called a \"stub\".\n            Internal to stub areas, routing\
    \ to external destinations\n            will be based solely on a default summary\
    \ route.  The\n            backbone cannot be configured as a stub area.  Also,\
    \ virtual\n            links cannot be configured through stub areas.  For more\n\
    \            information, see Section 3.6.\n        StubDefaultCost\n        \
    \    If the area has been configured as a stub area, and the\n            router\
    \ itself is an area border router, then the\n            StubDefaultCost indicates\
    \ the cost of the default summary\n            link that the router should advertise\
    \ into the area.  There\n            can be a separate cost configured for each\
    \ IP TOS.  See\n            Section 12.4.3 for more information.\n    C.3 Router\
    \ interface parameters\n        Some of the configurable router interface parameters\
    \ (such as IP\n        interface address and subnet mask) actually imply properties\
    \ of\n        the attached networks, and therefore must be consistent across\n\
    \        all the routers attached to that network.  The parameters that\n    \
    \    must be configured for a router interface are:\n        IP interface address\n\
    \            The IP protocol address for this interface.  This uniquely\n    \
    \        identifies the router over the entire internet.  An IP\n            address\
    \ is not required on serial lines.  Such a serial line\n            is called\
    \ \"unnumbered\".\n        IP interface mask\n            Also referred to as\
    \ the subnet mask, this indicates the\n            portion of the IP interface\
    \ address that identifies the\n            attached network.  Masking the IP interface\
    \ address with the\n            IP interface mask yields the IP network number\
    \ of the\n            attached network.  On point-to-point networks and virtual\n\
    \            links, the IP interface mask is not defined. On these\n         \
    \   networks, the link itself is not assigned an IP network\n            number,\
    \ and so the addresses of each side of the link are\n            assigned independently,\
    \ if they are assigned at all.\n        Interface output cost(s)\n           \
    \ The cost of sending a packet on the interface, expressed in\n            the\
    \ link state metric.  This is advertised as the link cost\n            for this\
    \ interface in the router's router links\n            advertisement.  There may\
    \ be a separate cost for each IP\n            Type of Service.  The interface\
    \ output cost(s) must always\n            be greater than 0.\n        RxmtInterval\n\
    \            The number of seconds between link state advertisement\n        \
    \    retransmissions, for adjacencies belonging to this\n            interface.\
    \  Also used when retransmitting Database\n            Description and Link State\
    \ Request Packets.  This should be\n            well over the expected round-trip\
    \ delay between any two\n            routers on the attached network.  The setting\
    \ of this value\n            should be conservative or needless retransmissions\
    \ will\n            result.  It will need to be larger on low speed serial lines\n\
    \            and virtual links.  Sample value for a local area network: 5\n  \
    \          seconds.\n        InfTransDelay\n            The estimated number of\
    \ seconds it takes to transmit a Link\n            State Update Packet over this\
    \ interface.  Link state\n            advertisements contained in the update packet\
    \ must have\n            their age incremented by this amount before transmission.\n\
    \            This value should take into account the transmission and\n      \
    \      propagation delays of the interface.  It must be greater\n            than\
    \ 0.  Sample value for a local area network: 1 second.\n        Router Priority\n\
    \            An 8-bit unsigned integer.  When two routers attached to a\n    \
    \        network both attempt to become Designated Router, the one\n         \
    \   with the highest Router Priority takes precedence.  If there\n           \
    \ is still a tie, the router with the highest Router ID takes\n            precedence.\
    \  A router whose Router Priority is set to 0 is\n            ineligible to become\
    \ Designated Router on the attached\n            network.  Router Priority is\
    \ only configured for interfaces\n            to multi-access networks.\n    \
    \    HelloInterval\n            The length of time, in seconds, between the Hello\
    \ Packets\n            that the router sends on the interface.  This value is\n\
    \            advertised in the router's Hello Packets.  It must be the\n     \
    \       same for all routers attached to a common network.  The\n            smaller\
    \ the HelloInterval, the faster topological changes\n            will be detected,\
    \ but more OSPF routing protocol traffic\n            will ensue.  Sample value\
    \ for a X.25 PDN network: 30\n            seconds.  Sample value for a local area\
    \ network: 10 seconds.\n        RouterDeadInterval\n            After ceasing\
    \ to hear a router's Hello Packets, the number\n            of seconds before\
    \ its neighbors declare the router down.\n            This is also advertised\
    \ in the router's Hello Packets in\n            their RouterDeadInterval field.\
    \  This should be some\n            multiple of the HelloInterval (say 4).  This\
    \ value again\n            must be the same for all routers attached to a common\n\
    \            network.\n        Authentication key\n            This configured\
    \ data allows the authentication procedure to\n            generate and/or verify\
    \ the authentication field in the OSPF\n            header.  This value again\
    \ must be the same for all routers\n            attached to a common network.\
    \  For example, if the AuType\n            indicates simple password, the Authentication\
    \ key would be a\n            64-bit password. This key would be inserted directly\
    \ into\n            the OSPF header when originating routing protocol packets.\n\
    \            There could be a separate password for each network.\n    C.4 Virtual\
    \ link parameters\n        Virtual links are used to restore/increase connectivity\
    \ of the\n        backbone.  Virtual links may be configured between any pair\
    \ of\n        area border routers having interfaces to a common (non-backbone)\n\
    \        area.  The virtual link appears as an unnumbered point-to-point\n   \
    \     link in the graph for the backbone.  The virtual link must be\n        configured\
    \ in both of the area border routers.\n        A virtual link appears in router\
    \ links advertisements (for the\n        backbone) as if it were a separate router\
    \ interface to the\n        backbone.  As such, it has all of the parameters associated\
    \ with\n        a router interface (see Section C.3).  Although a virtual link\n\
    \        acts like an unnumbered point-to-point link, it does have an\n      \
    \  associated IP interface address.  This address is used as the IP\n        source\
    \ in OSPF protocol packets it sends along the virtual link,\n        and is set\
    \ dynamically during the routing table build process.\n        Interface output\
    \ cost is also set dynamically on virtual links\n        to be the cost of the\
    \ intra-area path between the two routers.\n        The parameter RxmtInterval\
    \ must be configured, and should be\n        well over the expected round-trip\
    \ delay between the two routers.\n        This may be hard to estimate for a virtual\
    \ link; it is better to\n        err on the side of making it too large.  Router\
    \ Priority is not\n        used on virtual links.\n        A virtual link is defined\
    \ by the following two configurable\n        parameters: the Router ID of the\
    \ virtual link's other endpoint,\n        and the (non-backbone) area through\
    \ which the virtual link runs\n        (referred to as the virtual link's Transit\
    \ area).  Virtual links\n        cannot be configured through stub areas.\n  \
    \  C.5 Non-broadcast, multi-access network parameters\n        OSPF treats a non-broadcast,\
    \ multi-access network much like it\n        treats a broadcast network.  Since\
    \ there may be many routers\n        attached to the network, a Designated Router\
    \ is selected for the\n        network.  This Designated Router then originates\
    \ a networks\n        links advertisement, which lists all routers attached to\
    \ the\n        non-broadcast network.\n        However, due to the lack of broadcast\
    \ capabilities, it is\n        necessary to use configuration parameters in the\
    \ Designated\n        Router selection.  These parameters need only be configured\
    \ in\n        those routers that are themselves eligible to become Designated\n\
    \        Router (i.e., those router's whose Router Priority for the\n        network\
    \ is non-zero):\n        List of all other attached routers\n            The list\
    \ of all other routers attached to the non-broadcast\n            network.  Each\
    \ router is listed by its IP interface address\n            on the network.  Also,\
    \ for each router listed, that router's\n            eligibility to become Designated\
    \ Router must be defined.\n            When an interface to a non-broadcast network\
    \ comes up, the\n            router sends Hello Packets only to those neighbors\
    \ eligible\n            to become Designated Router, until the identity of the\n\
    \            Designated Router is discovered.\n        PollInterval\n        \
    \    If a neighboring router has become inactive (Hello Packets\n            have\
    \ not been seen for RouterDeadInterval seconds), it may\n            still be\
    \ necessary to send Hello Packets to the dead\n            neighbor.  These Hello\
    \ Packets will be sent at the reduced\n            rate PollInterval, which should\
    \ be much larger than\n            HelloInterval.  Sample value for a PDN X.25\
    \ network: 2\n            minutes.\n    C.6 Host route parameters\n        Host\
    \ routes are advertised in router links advertisements as\n        stub networks\
    \ with mask 0xffffffff.  They indicate either router\n        interfaces to point-to-point\
    \ networks, looped router interfaces,\n        or IP hosts that are directly connected\
    \ to the router (e.g., via\n        a SLIP line).  For each host directly connected\
    \ to the router,\n        the following items must be configured:\n        Host\
    \ IP address\n            The IP address of the host.\n        Cost of link to\
    \ host\n            The cost of sending a packet to the host, in terms of the\n\
    \            link state metric.  There may be multiple costs configured,\n   \
    \         one for each IP TOS.  However, since the host probably has\n       \
    \     only a single connection to the internet, the actual\n            configured\
    \ cost(s) in many cases is unimportant (i.e., will\n            have no effect\
    \ on routing).\n"
- title: D. Authentication
  contents:
  - "D. Authentication\n    All OSPF protocol exchanges are authenticated.  The OSPF\
    \ packet\n    header (see Section A.3.1) includes an authentication type field,\n\
    \    and 64-bits of data for use by the appropriate authentication scheme\n  \
    \  (determined by the type field).\n    The authentication type is configurable\
    \ on a per-area basis.\n    Additional authentication data is configurable on\
    \ a per-interface\n    basis.  For example, if an area uses a simple password\
    \ scheme for\n    authentication, a separate password may be configured for each\n\
    \    network contained in the area.\n    Authentication types 0 and 1 are defined\
    \ by this specification.  All\n    other authentication types are reserved for\
    \ definition by the IANA\n    (iana@ISI.EDU).  The current list of authentication\
    \ types is\n    described below in Table 20.\n                  AuType       Description\n\
    \                  ___________________________________________\n             \
    \     0            No authentication\n                  1            Simple password\n\
    \                  All others   Reserved for assignment by the\n             \
    \                  IANA (iana@ISI.EDU)\n                      Table 20: OSPF authentication\
    \ types.\n    D.1 AuType 0 -- No authentication\n        Use of this authentication\
    \ type means that routing exchanges in\n        the area are not authenticated.\
    \  The 64-bit field in the OSPF\n        header can contain anything; it is not\
    \ examined on packet\n        reception.\n    D.2 AuType 1 -- Simple password\n\
    \        Using this authentication type, a 64-bit field is configured on\n   \
    \     a per-network basis.  All packets sent on a particular network\n       \
    \ must have this configured value in their OSPF header 64-bit\n        authentication\
    \ field.  This essentially serves as a \"clear\" 64-\n        bit password.\n\
    \        This guards against routers inadvertently joining the area.\n       \
    \ They must first be configured with their attached networks'\n        passwords\
    \ before they can participate in the routing domain.\n"
- title: E. Differences from RFC 1247
  contents:
  - "E. Differences from RFC 1247\n    This section documents the differences between\
    \ this memo and RFC\n    1247.  These differences include a fix for a problem\
    \ involving OSPF\n    virtual links, together with minor enhancements and clarifications\n\
    \    to the protocol. All differences are backward-compatible.\n    Implementations\
    \ of this memo and of RFC 1247 will interoperate.\n    E.1 A fix for a problem\
    \ with OSPF Virtual links\n        In RFC 1247, certain configurations of OSPF\
    \ virtual links can\n        cause routing loops. The root of the problem is that\
    \ while there\n        is an information mismatch at the boundary of any virtual\
    \ link's\n        Transit area, a backbone path can still cross the boundary.\
    \ RFC\n        1247 attempted to compensate for this information mismatch by\n\
    \        adjusting any backbone path as it enters the transit area (see\n    \
    \    Section 16.3 in RFC 1247). However, this proved not to be\n        enough.\
    \ This memo fixes the problem by having all area border\n        routers determine,\
    \ by looking at summary links, whether better\n        backbone paths can be found\
    \ through the transit areas.\n        This fix simplifies the OSPF virtual link\
    \ logic, and consists of\n        the following components:\n        o   A new\
    \ bit has been defined in the router links\n            advertisement, called\
    \ bit V. Bit V is set in a router's\n            router links advertisement for\
    \ Area A if and only if the\n            router is an endpoint of an active virtual\
    \ link that uses\n            Area A as its Transit area (see Sections 12.4.1\
    \ and A.4.2).\n            This enables the other routers attached to Area A to\n\
    \            discover whether the area supports any virtual links (i.e.,\n   \
    \         is a transit area). This discovery is done during the\n            calculation\
    \ of Area A's shortest-path tree (see Section\n            16.1).\n        o \
    \  To aid in the description of the algorithm, a new parameter\n            has\
    \ been added to the OSPF area structure:\n            TransitCapability. This\
    \ parameter indicates whether the area\n            supports any active virtual\
    \ links. Equivalently, it\n            indicates whether the area can carry traffic\
    \ that neither\n            originates nor terminates in the area itself.\n  \
    \      o   The calculation in Section 16.3 of RFC 1247 has been\n            replaced.\
    \ The new calculation, performed by area border\n            routers only, examines\
    \ the summary links belonging to all\n            attached transit areas to see\
    \ whether the transit areas can\n            provide better paths than those already\
    \ found in Sections\n            16.1 and 16.2.\n        o   The incremental calculations\
    \ in Section 16.5 have been\n            updated as a result of the new calculations\
    \ in Section 16.3.\n    E.2 Supporting supernetting and subnet 0\n        In RFC\
    \ 1247, an OSPF router cannot originate separate AS\n        external link advertisements\
    \ (or separate summary link\n        advertisements) for two networks that have\
    \ the same address but\n        different masks. This situation can arise when\
    \ subnet 0 of a\n        network has been assigned (a practice that is generally\n\
    \        discouraged), or when using supernetting as described in [RFC\n     \
    \   1519] (a practice that is generally encouraged to reduce the\n        size\
    \ of routing tables), or even when in transition from one\n        mask to another\
    \ on a subnet.  Using supernetting as an example,\n        you might want to aggregate\
    \ the four class C networks\n        192.9.4.0-192.9.7.0, advertising one route\
    \ for the aggregation\n        and another for the single class C network 192.9.4.0.\n\
    \        The reason behind this limitation is that in RFC 1247, the Link\n   \
    \     State ID of AS external link advertisements and summary link\n        advertisements\
    \ is set equal to the described network's IP\n        address. In the above example,\
    \ RFC 1247 would assign both\n        advertisements the Link State ID of 192.9.4.0,\
    \ making them in\n        essence the same advertisement. This memo fixes the\
    \ problem by\n        relaxing the setting of the Link State ID so that any of\
    \ the\n        \"host\" bits of the network address can also be set. This allows\n\
    \        you to disambiguate advertisements for networks having the same\n   \
    \     address but different masks. Given an AS external link\n        advertisement\
    \ (or a summary link advertisement), the described\n        network's address\
    \ can now be obtained by masking the Link State\n        ID with the network mask\
    \ carried in the body of the\n        advertisement.  Again using the above example,\
    \ the aggregate can\n        now be advertised using a Link State ID of 192.9.4.0\
    \ and the\n        single class C network advertised simultaneously using the\
    \ Link\n        State ID of 192.9.4.255.\n        Appendix F gives one possible\
    \ algorithm for setting one or more\n        \"host\" bits in the Link State ID\
    \ in order to disambiguate\n        advertisements. It should be noted that this\
    \ is a local\n        decision. Each router in an OSPF system is free to use its\
    \ own\n        algorithm, since only those advertisements originated by the\n\
    \        router itself are affected.\n        It is believed that this change\
    \ will be more or less compatible\n        with implementations of RFC 1247. Implementations\
    \ of RFC 1247\n        will probably either a) install routing table entries that\
    \ won't\n        be used or b) do the correct processing as outlined in this memo\n\
    \        or c) mark the advertisement as unusable when presented with a\n    \
    \    Link State ID that has one or more of the host bits set.\n        However,\
    \ in the interest of interoperability, implementations of\n        this memo should\
    \ only set the host bits in Link State IDs when\n        absolutely necessary.\n\
    \        The change affects Sections 12.1.4, 12.4.3, 12.4.5, 16.2, 16.3,\n   \
    \     16.4, 16.5, 16.6, A.4.4 and A.4.5.\n    E.3 Obsoleting LSInfinity in router\
    \ links advertisements\n        The metric of LSInfinity can no longer be used\
    \ in router links\n        advertisements to indicate unusable links. This is\
    \ being done\n        for several reasons:\n        o   It removes any possible\
    \ confusion in an OSPF area as to just\n            which routers/networks are\
    \ reachable in the area. For\n            example, the above virtual link fix\
    \ relies on detecting the\n            existence of virtual links when running\
    \ the Dijkstra.\n            However, when one-directional links (i.e., cost of\n\
    \            LSInfinity in one direction, but not the other) are\n           \
    \ possible, some routers may detect the existence of virtual\n            links\
    \ while others may not. This may defeat the fix for the\n            virtual link\
    \ problem.\n        o   It also helps OSPF's Multicast routing extensions (MOSPF),\n\
    \            because one-way reachability can lead to places that are\n      \
    \      reachable via unicast but not multicast, or vice versa.\n        The two\
    \ prior justifications for using LSInfinity in router\n        links advertisements\
    \ were 1) it was a way to not support TOS\n        before TOS was optional and\
    \ 2) it went along with strong TOS\n        interpretations. These justifications\
    \ are no longer valid.\n        However, LSInfinity will continue to mean \"unreachable\"\
    \ in\n        summary link advertisements and AS external link advertisements,\n\
    \        as some implementations use this as an alternative to the\n        premature\
    \ aging procedure specified in Section 14.1.\n        This change has one other\
    \ side effect. When two routers are\n        connected via a virtual link whose\
    \ underlying path is non-TOS-\n        capable, they must now revert to being\
    \ non-TOS-capable routers\n        themselves, instead of the previous behavior\
    \ of advertising the\n        non-zero TOS costs of the virtual link as LSInfinity.\
    \ See\n        Section 15 for details.\n    E.4 TOS encoding updated\n       \
    \ The encoding of TOS in OSPF link state advertisements has been\n        updated\
    \ to reflect the new TOS value (minimize monetary cost)\n        defined by [RFC\
    \ 1349]. The OSPF encoding is defined in Section\n        12.3, which is identical\
    \ in content to Section A.5 of [RFC\n        1349].\n    E.5 Summarizing routes\
    \ into transit areas\n        RFC 1247 mandated that routes associated with Area\
    \ A are never\n        summarized back into Area A. However, this memo further\
    \ reduces\n        the number of summary links originated by refusing to summarize\n\
    \        into Area A those routes having next hops belonging to Area A.\n    \
    \    This is an optimization over RFC 1247 behavior when virtual\n        links\
    \ are present.  For example, in the area configuration of\n        Figure 6, Router\
    \ RT11 need only originate a single summary link\n        having the (collapsed)\
    \ destination N9-N11,H1 into its connected\n        transit area Area 2, since\
    \ all of its other eligible routes have\n        next hops belonging to Area 2\
    \ (and as such only need be\n        advertised by other area border routers;\
    \ in this case, Routers\n        RT10 and RT7). This is the logical equivalent\
    \ of a Distance\n        Vector protocol's split horizon logic.\n        This\
    \ change appears in Section 12.4.3.\n    E.6 Summarizing routes into stub areas\n\
    \        RFC 1247 mandated that area border routers attached to stub\n       \
    \ areas must summarize all inter-area routes into the stub areas.\n        However,\
    \ while area border routers connected to OSPF stub areas\n        must originate\
    \ default summary links into the stub area, they\n        need not summarize other\
    \ routes into the stub area. The amount\n        of summarization done into stub\
    \ areas can instead be put under\n        configuration control. The network administrator\
    \ can then make\n        the trade-off between optimal routing and database size.\n\
    \        This change appears in Sections 12.4.3 and 12.4.4.\n    E.7 Flushing\
    \ anomalous network links advertisements\n        Text was added indicating that\
    \ a network links advertisement\n        whose Link State ID is equal to one of\
    \ the router's own IP\n        interface addresses should be considered to be\
    \ self-originated,\n        regardless of the setting of the advertisement's Advertising\n\
    \        Router. If the Advertising Router of such an advertisement is\n     \
    \   not equal to the router's own Router ID, the advertisement\n        should\
    \ be flushed from the routing domain using the premature\n        aging procedure\
    \ specified in Section 14.1. This case should be\n        rare, and it indicates\
    \ that the router's Router ID has changed\n        since originating the advertisement.\n\
    \        Failure to flush these anomalous advertisements could lead to\n     \
    \   multiple network links advertisements having the same Link State\n       \
    \ ID. This in turn could cause the Dijkstra calculation in Section\n        16.1\
    \ to fail, since it would be impossible to tell which network\n        links advertisement\
    \ is valid (i.e., more recent).\n        This change appears in Sections 13.4\
    \ and 14.1.\n    E.8 Required Statistics appendix deleted\n        Appendix D\
    \ of RFC 1247, which specified a list of required\n        statistics for an OSPF\
    \ implementation, has been deleted. That\n        appendix has been superseded\
    \ by the two documents: the OSPF\n        Version 2 Management Information Base\
    \ and the OSPF Version 2\n        Traps.\n    E.9 Other changes\n        The following\
    \ small changes were also made to RFC 1247:\n        o   When representing unnumbered\
    \ point-to-point networks in\n            router links advertisements, the corresponding\
    \ Link Data\n            field should be set to the unnumbered interface's MIB-II\n\
    \            [RFC 1213] ifIndex value.\n        o   A comment was added to Step\
    \ 3 of the Dijkstra algorithm in\n            Section 16.1. When removing vertices\
    \ from the candidate\n            list, and when there is a choice of vertices\
    \ closest to the\n            root, network vertices must be chosen before router\
    \ vertices\n            in order to necessarily find all equal-cost paths.\n \
    \       o   A comment was added to Section 12.4.3 noting that a summary\n    \
    \        link advertisement cannot express a reachable destination\n         \
    \   whose path cost equals or exceeds LSInfinity.\n        o   A comment was added\
    \ to Section 15 noting that a virtual link\n            whose underlying path\
    \ has cost greater than hexadecimal\n            0xffff (the maximum size of an\
    \ interface cost in a router\n            links advertisement) should be considered\
    \ inoperational.\n        o   An option was added to the definition of area address\n\
    \            ranges, allowing the network administrator to specify that a\n  \
    \          particular range should not be advertised to other OSPF\n         \
    \   areas. This enables the existence of certain networks to be\n            hidden\
    \ from other areas. This change appears in Sections\n            12.4.3 and C.2.\n\
    \        o   A note was added reminding implementors that bit E (the AS\n    \
    \        boundary router indication) should never be set in a router\n       \
    \     links advertisement for a stub area, since stub areas cannot\n         \
    \   contain AS boundary routers.  This change appears in Section\n           \
    \ 12.4.1.\n"
- title: F. An algorithm for assigning Link State IDs
  contents:
  - "F. An algorithm for assigning Link State IDs\n    In RFC 1247, the Link State\
    \ ID in AS external link advertisements\n    and summary link advertisements is\
    \ set to the described network's IP\n    address. This memo relaxes that requirement,\
    \ allowing one or more of\n    the network's host bits to be set in the Link State\
    \ ID. This allows\n    the router to originate separate advertisements for networks\
    \ having\n    the same addresses, yet different masks. Such networks can occur\
    \ in\n    the presence of supernetting and subnet 0s (see Section E.2 for more\n\
    \    information).\n    This appendix gives one possible algorithm for setting\
    \ the host bits\n    in Link State IDs.  The choice of such an algorithm is a\
    \ local\n    decision. Separate routers are free to use different algorithms,\n\
    \    since the only advertisements affected are the ones that the router\n   \
    \ itself originates. The only requirement on the algorithms used is\n    that\
    \ the network's IP address should be used as the Link State ID\n    (the RFC 1247\
    \ behavior) whenever possible.\n    The algorithm below is stated for AS external\
    \ link advertisements.\n    This is only for clarity; the exact same algorithm\
    \ can be used for\n    summary link advertisements. Suppose that the router wishes\
    \ to\n    originate an AS external link advertisement for a network having\n \
    \   address NA and mask NM1. The following steps are then used to\n    determine\
    \ the advertisement's Link State ID:\n    (1) Determine whether the router is\
    \ already originating an AS\n        external link advertisement with Link State\
    \ ID equal to NA (in\n        such an advertisement the router itself will be\
    \ listed as the\n        advertisement's Advertising Router).  If not, set the\
    \ Link State\n        ID equal to NA (the RFC 1247 behavior) and the algorithm\n\
    \        terminates. Otherwise,\n    (2) Obtain the network mask from the body\
    \ of the already existing AS\n        external link advertisement. Call this mask\
    \ NM2. There are then\n        two cases:\n        o   NM1 is longer (i.e., more\
    \ specific) than NM2. In this case,\n            set the Link State ID in the\
    \ new advertisement to be the\n            network [NA,NM1] with all the host\
    \ bits set (i.e., equal to\n            NA or'ed together with all the bits that\
    \ are not set in NM1,\n            which is network [NA,NM1]'s broadcast address).\n\
    \        o   NM2 is longer than NM1. In this case, change the existing\n     \
    \       advertisement (having Link State ID of NA) to reference the\n        \
    \    new network [NA,NM1] by incrementing the sequence number,\n            changing\
    \ the mask in the body to NM1 and using the cost for\n            the new network.\
    \ Then originate a new advertisement for the\n            old network [NA,NM2],\
    \ with Link State ID equal to NA or'ed\n            together with the bits that\
    \ are not set in NM2 (i.e.,\n            network [NA,NM2]'s broadcast address).\n\
    \    The above algorithm assumes that all masks are contiguous; this\n    ensures\
    \ that when two networks have the same address, one mask is\n    more specific\
    \ than the other. The algorithm also assumes that no\n    network exists having\
    \ an address equal to another network's\n    broadcast address. Given these two\
    \ assumptions, the above algorithm\n    always produces unique Link State IDs.\
    \ The above algorithm can also\n    be reworded as follows: When originating an\
    \ AS external link state\n    advertisement, try to use the network number as\
    \ the Link State ID.\n    If that produces a conflict, examine the two networks\
    \ in conflict.\n    One will be a subset of the other. For the less specific network,\n\
    \    use the network number as the Link State ID and for the more\n    specific\
    \ use the network's broadcast address instead (i.e., flip all\n    the \"host\"\
    \ bits to 1).  If the most specific network was originated\n    first, this will\
    \ cause you to originate two link state\n    advertisements at once.\n    As an\
    \ example of the algorithm, consider its operation when the\n    following sequence\
    \ of events occurs in a single router (Router A).\n    (1) Router A wants to originate\
    \ an AS external link advertisement\n        for [10.0.0.0,255.255.255.0]:\n \
    \       (a) A Link State ID of 10.0.0.0 is used.\n    (2) Router A then wants\
    \ to originate an AS external link\n        advertisement for [10.0.0.0,255.255.0.0]:\n\
    \        (a) The advertisement for [10.0.0,0,255.255.255.0] is\n            reoriginated\
    \ using a new Link State ID of 10.0.0.255.\n        (b) A Link State ID of 10.0.0.0\
    \ is used for\n            [10.0.0.0,255.255.0.0].\n    (3) Router A then wants\
    \ to originate an AS external link\n        advertisement for [10.0.0.0,255.0.0.0]:\n\
    \        (a) The advertisement for [10.0.0.0,255.255.0.0] is reoriginated\n  \
    \          using a new Link State ID of 10.0.255.255.\n        (b) A Link State\
    \ ID of 10.0.0.0 is used for\n            [10.0.0.0,255.0.0.0].\n        (c) The\
    \ network [10.0.0.0,255.255.255.0] keeps its Link State ID\n            of 10.0.0.255.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n    All OSPF protocol exchanges are authenticated. This\
    \ is accomplished\n    through authentication fields contained in the OSPF packet\
    \ header.\n    For more information, see Sections 8.1, 8.2, and Appendix D.\n"
- title: Author's Address
  contents:
  - "Author's Address\n    John Moy\n    Proteon, Inc.\n    9 Technology Drive\n \
    \   Westborough, MA 01581\n    Phone: 508-898-2800\n    Fax:   508-898-3176\n\
    \    Email: jmoy@proteon.com\n"
