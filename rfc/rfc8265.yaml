- title: __initial_text__
  contents:
  - " Preparation, Enforcement, and Comparison of Internationalized Strings\n    \
    \              Representing Usernames and Passwords\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes updated methods for handling Unicode strings\n\
    \   representing usernames and passwords.  The previous approach was\n   known\
    \ as SASLprep (RFC 4013) and was based on Stringprep (RFC 3454).\n   The methods\
    \ specified in this document provide a more sustainable\n   approach to the handling\
    \ of internationalized usernames and\n   passwords.  This document obsoletes RFC\
    \ 7613.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8265.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   4\n   3.  Usernames . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   5\n     3.1.  Definition  . . . . . . . . . . . . . . . . . . . . .\
    \ . .   5\n     3.2.  Case Mapping vs. Case Preservation  . . . . . . . . . .\
    \ .   6\n     3.3.  UsernameCaseMapped Profile  . . . . . . . . . . . . . . .\
    \   7\n       3.3.1.  Rules . . . . . . . . . . . . . . . . . . . . . . . .  \
    \ 7\n       3.3.2.  Preparation . . . . . . . . . . . . . . . . . . . . .   8\n\
    \       3.3.3.  Enforcement . . . . . . . . . . . . . . . . . . . . .   8\n  \
    \     3.3.4.  Comparison  . . . . . . . . . . . . . . . . . . . . .   9\n    \
    \ 3.4.  UsernameCasePreserved Profile . . . . . . . . . . . . . .   9\n      \
    \ 3.4.1.  Rules . . . . . . . . . . . . . . . . . . . . . . . .   9\n       3.4.2.\
    \  Preparation . . . . . . . . . . . . . . . . . . . . .   9\n       3.4.3.  Enforcement\
    \ . . . . . . . . . . . . . . . . . . . . .  10\n       3.4.4.  Comparison  .\
    \ . . . . . . . . . . . . . . . . . . . .  10\n     3.5.  Application-Layer Constructs\
    \  . . . . . . . . . . . . . .  11\n     3.6.  Examples  . . . . . . . . . . .\
    \ . . . . . . . . . . . . .  11\n   4.  Passwords . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . .  13\n     4.1.  Definition  . . . . . . . . . . . .\
    \ . . . . . . . . . . .  13\n     4.2.  OpaqueString Profile  . . . . . . . .\
    \ . . . . . . . . . .  14\n       4.2.1.  Preparation . . . . . . . . . . . .\
    \ . . . . . . . . .  14\n       4.2.2.  Enforcement . . . . . . . . . . . . .\
    \ . . . . . . . .  14\n       4.2.3.  Comparison  . . . . . . . . . . . . . .\
    \ . . . . . . .  15\n     4.3.  Examples  . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  15\n   5.  Use in Application Protocols  . . . . . . . . . . .\
    \ . . . . .  16\n   6.  Migration . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  17\n     6.1.  Usernames . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  17\n     6.2.  Passwords . . . . . . . . . . . . . . . . . . . . . .\
    \ . .  19\n   7.  IANA Considerations . . . . . . . . . . . . . . . . . . . .\
    \ .  20\n     7.1.  UsernameCaseMapped Profile  . . . . . . . . . . . . . . .\
    \  20\n     7.2.  UsernameCasePreserved Profile . . . . . . . . . . . . . .  20\n\
    \     7.3.  OpaqueString Profile  . . . . . . . . . . . . . . . . . .  21\n  \
    \   7.4.  Stringprep Profile  . . . . . . . . . . . . . . . . . . .  22\n   8.\
    \  Security Considerations . . . . . . . . . . . . . . . . . . .  22\n     8.1.\
    \  Password/Passphrase Strength  . . . . . . . . . . . . . .  22\n     8.2.  Password/Passphrase\
    \ Comparison  . . . . . . . . . . . . .  22\n     8.3.  Identifier Comparison\
    \ . . . . . . . . . . . . . . . . . .  22\n     8.4.  Reuse of PRECIS . . . .\
    \ . . . . . . . . . . . . . . . . .  22\n     8.5.  Reuse of Unicode  . . . .\
    \ . . . . . . . . . . . . . . . .  22\n   9.  References  . . . . . . . . . .\
    \ . . . . . . . . . . . . . . .  23\n     9.1.  Normative References  . . . .\
    \ . . . . . . . . . . . . . .  23\n     9.2.  Informative References  . . . .\
    \ . . . . . . . . . . . . .  24\n   Appendix A.  Changes from RFC 7613  . . .\
    \ . . . . . . . . . . . .  25\n   Acknowledgements  . . . . . . . . . . . . .\
    \ . . . . . . . . . . .  26\n   Authors' Addresses  . . . . . . . . . . . . .\
    \ . . . . . . . . . .  26\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Usernames and passwords are widely used for authentication\
    \ and\n   authorization on the Internet, either directly when provided in\n  \
    \ plaintext (as in the PLAIN Simple Authentication and Security Layer\n   (SASL)\
    \ mechanism [RFC4616] and the HTTP Basic scheme [RFC7617]) or\n   indirectly when\
    \ provided as the input to a cryptographic algorithm\n   such as a hash function\
    \ (as in the Salted Challenge Response\n   Authentication Mechanism (SCRAM) SASL\
    \ mechanism [RFC5802] and the\n   HTTP Digest scheme [RFC7616]).\n   To increase\
    \ the likelihood that the input and comparison of usernames\n   and passwords\
    \ will work in ways that make sense for typical users\n   throughout the world,\
    \ this document defines rules for handling\n   internationalized strings that\
    \ represent usernames and passwords.\n   Such strings consist of code points from\
    \ the Unicode coded character\n   set [Unicode], with special attention to code\
    \ points outside the\n   ASCII range [RFC20].  The rules for handling such strings\
    \ are\n   specified through profiles of the string classes defined in the\n  \
    \ preparation, enforcement, and comparison of internationalized strings\n   (PRECIS)\
    \ framework specification [RFC8264].\n   Profiles of the PRECIS framework enable\
    \ software to handle Unicode\n   code points outside the ASCII range in an automated\
    \ way, so that such\n   code points are treated carefully and consistently in\
    \ application\n   protocols.  In large measure, these profiles are designed to\
    \ protect\n   application developers from the potentially negative consequences\
    \ of\n   supporting the full range of Unicode code points.  For instance, in\n\
    \   almost all application protocols it would be dangerous to treat the\n   Unicode\
    \ code point \"\xB9\" (SUPERSCRIPT ONE, U+00B9) as equivalent to \"1\"\n   (DIGIT\
    \ ONE, U+0031), because that would result in false accepts\n   during comparison,\
    \ authentication, and authorization (e.g., an\n   attacker could easily spoof\
    \ an account \"user1@example.com\").\n   Whereas a naive use of Unicode would\
    \ make such attacks trivially\n   easy, the PRECIS profile defined here for usernames\
    \ generally\n   protects applications from inadvertently causing such problems.\n\
    \   (Similar considerations apply to passwords, although here it is\n   desirable\
    \ to support a wider range of characters so as to maximize\n   entropy for purposes\
    \ of authentication.)\n   The methods defined here might be applicable wherever\
    \ usernames or\n   passwords are used.  However, the methods are not intended\
    \ for use in\n   preparing strings that are not usernames (e.g., Lightweight Directory\n\
    \   Access Protocol (LDAP) distinguished names), nor in cases where\n   identifiers\
    \ or secrets are not strings (e.g., keys and certificates)\n   or require specialized\
    \ handling.\n   Although the historical predecessor of this document was the SASLprep\n\
    \   profile of Stringprep [RFC3454]), the approach defined here can be\n   used\
    \ by technologies other than SASL [RFC4422], such as HTTP\n   authentication as\
    \ specified in [RFC7617] and [RFC7616].\n   This document does not modify the\
    \ handling of internationalized\n   strings in usernames and passwords as prescribed\
    \ by existing\n   application protocols that use SASLprep.  If the community that\
    \ uses\n   such an application protocol wishes to modernize its handling of\n\
    \   internationalized strings to use PRECIS instead of Stringprep, it\n   needs\
    \ to explicitly update the existing application protocol\n   definition (one example\
    \ is [RFC7622]).  Non-coordinated updates to\n   protocol implementations are\
    \ discouraged because they can have a\n   negative impact on interoperability\
    \ and security.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   A \"username\" or \"user identifier\" is a string of characters\n\
    \   designating an account on a computing device or system, often but not\n  \
    \ necessarily for use by a person.  Although some devices and systems\n   might\
    \ allow a username to be part or all of a person's name and a\n   person might\
    \ want their account designator to be part or all of their\n   name, because of\
    \ the complexities involved, that outcome is not\n   guaranteed for all human\
    \ names on all computing devices or systems\n   that follow the rules defined\
    \ in this specification.  Protocol\n   designers and application developers who\
    \ wish to allow a wider range\n   of characters are encouraged to consider a separation\
    \ between more\n   restrictive account identifiers and more expressive display\
    \ names or\n   nicknames (see [RFC8266]).\n   A \"password\" is a string of characters\
    \ that allows access to a\n   computing device or system, often associated with\
    \ a particular\n   username.  A password is not literally limited to a word, because\
    \ a\n   password could be a passphrase consisting of more than one word,\n   perhaps\
    \ separated by spaces, punctuation, or other non-alphanumeric\n   characters.\n\
    \   Some SASL mechanisms (e.g., CRAM-MD5, DIGEST-MD5, and SCRAM) specify\n   that\
    \ the authentication identity used in the context of such\n   mechanisms is a\
    \ \"simple username\" (see Section 2 of [RFC4422] as well\n   as [RFC4013]). \
    \ Various application technologies also assume that the\n   identity of a user\
    \ or account takes the form of a username (e.g.,\n   authentication for the Hypertext\
    \ Transfer Protocol as specified in\n   [RFC7617] and [RFC7616]), whether or not\
    \ they use SASL.  Note well\n   that the exact form of a username in any particular\
    \ SASL mechanism or\n   application technology is a matter for implementation\
    \ and deployment;\n   note also that a username does not necessarily map to any\
    \ particular\n   application identifier.\n   Many important terms used in this\
    \ document are defined in [RFC5890],\n   [RFC6365], [RFC8264], and [Unicode].\
    \  The term \"non-ASCII space\"\n   refers to any Unicode code point having a\
    \ Unicode general category of\n   \"Zs\", naturally with the exception of SPACE\
    \ (U+0020).\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\"\
    , \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described\
    \ in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n\
    \   capitals, as shown here.\n"
- title: 3.  Usernames
  contents:
  - '3.  Usernames

    '
- title: 3.1.  Definition
  contents:
  - "3.1.  Definition\n   This document specifies that a username is a string of Unicode\
    \ code\n   points [Unicode] that is structured as an ordered sequence of\n   \"\
    userparts\" and expressed in a standard Unicode Encoding Form (such\n   as UTF-8\
    \ [RFC3629]).  A userpart is allowed to contain only code\n   points that are\
    \ allowed by the PRECIS IdentifierClass defined in\n   Section 4.2 of [RFC8264]\
    \ and thus consists almost exclusively of\n   letters and digits.  A username\
    \ can consist of a single userpart or a\n   space-separated sequence of userparts.\n\
    \   The syntax for a username is defined as follows, using the Augmented\n   Backus-Naur\
    \ Form (ABNF) [RFC5234].\n      username   = userpart *(1*SP userpart)\n     \
    \ userpart   = 1*(idpoint)\n                   ;\n                   ; an \"idpoint\"\
    \ is a Unicode code point that\n                   ; can be contained in a string\
    \ conforming to\n                   ; the PRECIS IdentifierClass\n           \
    \        ;\n   All code points and blocks not explicitly allowed in the PRECIS\n\
    \   IdentifierClass are disallowed; this includes private-use code\n   points,\
    \ surrogate code points, and the other code points and blocks\n   that were defined\
    \ as \"Prohibited Output\" in Section 2.3 of [RFC4013]\n   (when corrected per\
    \ [Err1812]).  In addition, common constructions\n   such as \"user@example.com\"\
    \ (e.g., the Network Access Identifier from\n   [RFC7542]) are allowed as usernames\
    \ under this specification, as they\n   were under [RFC4013].\n      Implementation\
    \ Note: The username construct defined in this\n      document does not necessarily\
    \ match what all deployed applications\n      might refer to as a \"username\"\
    \ or \"userid\" but instead provides a\n      relatively safe subset of Unicode\
    \ code points that can be used in\n      existing SASL mechanisms and in application\
    \ protocols that use\n      SASL, and even in most application protocols that\
    \ do not currently\n      use SASL.\n   A username MUST NOT be zero bytes in length.\
    \  This rule is to be\n   enforced after any normalization and mapping of code\
    \ points.\n   This specification defines two profiles for usernames: the\n   UsernameCaseMapped\
    \ profile performs case mapping, and the\n   UsernameCasePreserved performs case\
    \ preservation (see further\n   discussion under Section 3.2).\n   In protocols\
    \ that provide usernames as input to a cryptographic\n   algorithm such as a hash\
    \ function, the client will need to perform\n   enforcement of the rules for the\
    \ UsernameCaseMapped or\n   UsernameCasePreserved profile before applying the\
    \ algorithm.\n"
- title: 3.2.  Case Mapping vs. Case Preservation
  contents:
  - "3.2.  Case Mapping vs. Case Preservation\n   In order to accommodate the widest\
    \ range of username constructs in\n   applications, this document defines two\
    \ username profiles:\n   UsernameCaseMapped and UsernameCasePreserved.  These\
    \ two profiles\n   differ only in their use (or not) of the Case Mapping Rule\
    \ and are\n   otherwise identical.\n   Case mapping is a matter for the application\
    \ protocol, protocol\n   implementation, or end deployment.  In general, this\
    \ document\n   suggests that it is preferable to apply the UsernameCaseMapped\n\
    \   profile and therefore perform case mapping, because not doing so can\n   lead\
    \ to false accepts during authentication and authorization (as\n   described in\
    \ [RFC6943]) and can result in confusion among end users,\n   given the prevalence\
    \ of case mapping in many existing protocols and\n   applications.  However, there\
    \ can be good reasons to apply the\n   UsernameCasePreserved profile and thus\
    \ not perform case mapping, such\n   as backward compatibility with deployed infrastructure.\n\
    \   In particular:\n   o  SASL mechanisms that follow the recommendations in this\
    \ document\n      MUST specify whether and when case mapping is to be applied\
    \ to\n      authentication identifiers.  Because case mapping results in\n   \
    \   information loss, in order to retain that information for as long\n      as\
    \ possible during processing, implementations SHOULD delay any\n      case mapping\
    \ to the last possible moment, such as when doing a\n      lookup by username,\
    \ performing username comparisons, or generating\n      a cryptographic salt from\
    \ a username (if the last possible moment\n      happens on a server, then decisions\
    \ about case mapping can be a\n      matter of service deployment policy).  In\
    \ keeping with [RFC4422],\n      SASL mechanisms are not to apply this or any\
    \ other profile to\n      authorization identifiers, only to authentication identifiers.\n\
    \   o  Application protocols that use SASL (such as IMAP [RFC3501] and\n     \
    \ the Extensible Messaging and Presence Protocol (XMPP) [RFC6120])\n      and\
    \ that directly reuse this profile MUST specify whether or not\n      case mapping\
    \ is to be applied to authorization identifiers.  Such\n      \"SASL application\
    \ protocols\" SHOULD delay any case mapping of\n      authorization identifiers\
    \ to the last possible moment, which\n      happens to necessarily be on the server\
    \ side (this enables\n      decisions about case mapping to be a matter of service\
    \ deployment\n      policy).  In keeping with [RFC4422], SASL application protocols\n\
    \      are not to apply this or any other profile to authentication\n      identifiers,\
    \ only to authorization identifiers.\n   o  Application protocols that do not\
    \ use SASL (such as HTTP\n      authentication with the HTTP Basic and Digest\
    \ schemes as specified\n      in [RFC7617] and [RFC7616]) but that directly reuse\
    \ this profile\n      MUST specify whether and when case mapping is to be applied\
    \ to\n      authentication identifiers or authorization identifiers, or both.\n\
    \      Such \"non-SASL application protocols\" SHOULD delay any case\n      mapping\
    \ to the last possible moment, such as when doing a lookup\n      by username,\
    \ performing username comparisons, or generating a\n      cryptographic salt from\
    \ a username (if the last possible moment\n      happens on the server, then decisions\
    \ about case mapping can be a\n      matter of service deployment policy).\n \
    \  If the specification for a SASL mechanism, SASL application protocol,\n   or\
    \ non-SASL application protocol uses the UsernameCaseMapped profile,\n   it MUST\
    \ clearly describe whether case mapping is to be applied at the\n   level of the\
    \ protocol itself, implementations thereof, or service\n   deployments (each of\
    \ these approaches can be legitimate, depending on\n   the application in question).\n"
- title: 3.3.  UsernameCaseMapped Profile
  contents:
  - '3.3.  UsernameCaseMapped Profile

    '
- title: 3.3.1.  Rules
  contents:
  - "3.3.1.  Rules\n   The following rules are defined for use within the UsernameCaseMapped\n\
    \   profile of the PRECIS IdentifierClass.\n   1.  Width Mapping Rule: Map fullwidth\
    \ and halfwidth code points to\n       their decomposition mappings (see Unicode\
    \ Standard Annex #11\n       [UAX11]).\n   2.  Additional Mapping Rule: There\
    \ is no additional mapping rule.\n   3.  Case Mapping Rule: Map uppercase and\
    \ titlecase code points to\n       their lowercase equivalents, preferably using\
    \ the Unicode\n       toLowerCase() operation as defined in the Unicode Standard\n\
    \       [Unicode]; see further discussion in Section 3.2.\n   4.  Normalization\
    \ Rule: Apply Unicode Normalization Form C (NFC) to\n       all strings.\n   5.\
    \  Directionality Rule: Apply the \"Bidi Rule\" defined in [RFC5893]\n       to\
    \ strings that contain right-to-left code points (i.e., each of\n       the six\
    \ conditions of the Bidi Rule must be satisfied); for\n       strings that do\
    \ not contain right-to-left code points, there is\n       no special processing\
    \ for directionality.\n"
- title: 3.3.2.  Preparation
  contents:
  - "3.3.2.  Preparation\n   An entity that prepares an input string for subsequent\
    \ enforcement\n   according to this profile MUST proceed as follows (applying\
    \ the steps\n   in the order shown).\n   1.  Apply the width mapping rule specified\
    \ in Section 3.3.1.  It is\n       necessary to apply the rule at this point because\
    \ otherwise the\n       PRECIS \"HasCompat\" category specified in Section 9.17\
    \ of\n       [RFC8264] would forbid fullwidth and halfwidth code points.\n   2.\
    \  Ensure that the string consists only of Unicode code points that\n       are\
    \ explicitly allowed by the PRECIS IdentifierClass defined in\n       Section\
    \ 4.2 of [RFC8264].\n"
- title: 3.3.3.  Enforcement
  contents:
  - "3.3.3.  Enforcement\n   An entity that performs enforcement according to this\
    \ profile MUST\n   prepare an input string as described in Section 3.3.2 and MUST\
    \ also\n   apply the following rules specified in Section 3.3.1 in the order\n\
    \   shown:\n   1.  Case Mapping Rule\n   2.  Normalization Rule\n   3.  Directionality\
    \ Rule\n   After all of the foregoing rules have been enforced, the entity MUST\n\
    \   ensure that the username is not zero bytes in length (this is done\n   after\
    \ enforcing the rules to prevent applications from mistakenly\n   omitting a username\
    \ entirely, because when internationalized strings\n   are accepted, a non-empty\
    \ sequence of characters can result in a\n   zero-length username after canonicalization).\n\
    \   The result of the foregoing operations is an output string that\n   conforms\
    \ to the UsernameCaseMapped profile.  Until an implementation\n   produces such\
    \ an output string, it MUST NOT treat the string as\n   conforming (in particular,\
    \ it MUST NOT assume that an input string is\n   conforming before the enforcement\
    \ operation has been completed).\n"
- title: 3.3.4.  Comparison
  contents:
  - "3.3.4.  Comparison\n   An entity that performs comparison of two strings according\
    \ to this\n   profile MUST prepare each string as specified in Section 3.3.2 and\n\
    \   then MUST enforce the rules specified in Section 3.3.3.  The two\n   strings\
    \ are to be considered equivalent if and only if they are an\n   exact octet-for-octet\
    \ match (sometimes called \"bit-string identity\").\n   Until an implementation\
    \ determines whether two strings are to be\n   considered equivalent, it MUST\
    \ NOT treat them as equivalent (in\n   particular, it MUST NOT assume that two\
    \ input strings are equivalent\n   before the comparison operation has been completed).\n"
- title: 3.4.  UsernameCasePreserved Profile
  contents:
  - '3.4.  UsernameCasePreserved Profile

    '
- title: 3.4.1.  Rules
  contents:
  - "3.4.1.  Rules\n   The following rules are defined for use within the\n   UsernameCasePreserved\
    \ profile of the PRECIS IdentifierClass.\n   1.  Width Mapping Rule: Map fullwidth\
    \ and halfwidth code points to\n       their decomposition mappings (see Unicode\
    \ Standard Annex #11\n       [UAX11]).\n   2.  Additional Mapping Rule: There\
    \ is no additional mapping rule.\n   3.  Case Mapping Rule: There is no case mapping\
    \ rule.\n   4.  Normalization Rule: Apply Unicode Normalization Form C (NFC) to\n\
    \       all strings.\n   5.  Directionality Rule: Apply the \"Bidi Rule\" defined\
    \ in [RFC5893]\n       to strings that contain right-to-left code points (i.e.,\
    \ each of\n       the six conditions of the Bidi Rule must be satisfied); for\n\
    \       strings that do not contain right-to-left code points, there is\n    \
    \   no special processing for directionality.\n"
- title: 3.4.2.  Preparation
  contents:
  - "3.4.2.  Preparation\n   An entity that prepares a string for subsequent enforcement\
    \ according\n   to this profile MUST proceed as follows (applying the steps in\
    \ the\n   order shown).\n   1.  Apply the width mapping rule specified in Section\
    \ 3.4.1.  It is\n       necessary to apply the rule at this point because otherwise\
    \ the\n       PRECIS \"HasCompat\" category specified in Section 9.17 of\n   \
    \    [RFC8264] would forbid fullwidth and halfwidth code points.\n   2.  Ensure\
    \ that the string consists only of Unicode code points that\n       are explicitly\
    \ allowed by the PRECIS IdentifierClass defined in\n       Section 4.2 of [RFC8264].\n"
- title: 3.4.3.  Enforcement
  contents:
  - "3.4.3.  Enforcement\n   An entity that performs enforcement according to this\
    \ profile MUST\n   prepare a string as described in Section 3.4.2 and MUST also\
    \ apply\n   the following rules specified in Section 3.4.1 in the order shown:\n\
    \   1.  Normalization Rule\n   2.  Directionality Rule\n   After all of the foregoing\
    \ rules have been enforced, the entity MUST\n   ensure that the username is not\
    \ zero bytes in length (this is done\n   after enforcing the rules to prevent\
    \ applications from mistakenly\n   omitting a username entirely, because when\
    \ internationalized strings\n   are accepted, a non-empty sequence of characters\
    \ can result in a\n   zero-length username after canonicalization).\n   The result\
    \ of the foregoing operations is an output string that\n   conforms to the UsernameCasePreserved\
    \ profile.  Until an\n   implementation produces such an output string, it MUST\
    \ NOT treat the\n   string as conforming (in particular, it MUST NOT assume that\
    \ an input\n   string is conforming before the enforcement operation has been\n\
    \   completed).\n"
- title: 3.4.4.  Comparison
  contents:
  - "3.4.4.  Comparison\n   An entity that performs comparison of two strings according\
    \ to this\n   profile MUST prepare each string as specified in Section 3.4.2 and\n\
    \   then MUST enforce the rules specified in Section 3.4.3.  The two\n   strings\
    \ are to be considered equivalent if and only if they are an\n   exact octet-for-octet\
    \ match (sometimes called \"bit-string identity\").\n   Until an implementation\
    \ determines whether two strings are to be\n   considered equivalent, it MUST\
    \ NOT treat them as equivalent (in\n   particular, it MUST NOT assume that two\
    \ input strings are equivalent\n   before the comparison operation has been completed).\n"
- title: 3.5.  Application-Layer Constructs
  contents:
  - "3.5.  Application-Layer Constructs\n   Both the UsernameCaseMapped and UsernameCasePreserved\
    \ profiles enable\n   an application protocol, implementation, or deployment to\
    \ create\n   application-layer constructs such as a username that is a space-\n\
    \   separated set of userparts like \"Firstname Middlename Lastname\".\n   Such\
    \ a construct is not a profile of the PRECIS IdentifierClass,\n   because SPACE\
    \ (U+0020) is not allowed in the IdentifierClass;\n   however, it can be created\
    \ at the application layer because SPACE\n   (U+0020) can be used as a separator\
    \ between instances of the PRECIS\n   IdentifierClass (e.g., userparts as defined\
    \ in this specification).\n"
- title: 3.6.  Examples
  contents:
  - "3.6.  Examples\n   The following examples illustrate a small number of userparts\
    \ (not\n   usernames) that are consistent with the format defined above (note\n\
    \   that the characters \"<\" and \">\" are used here to delineate the actual\n\
    \   userparts and are not part of the userpart strings).\n      +--------------------------+---------------------------------+\n\
    \      | # | Userpart             | Notes                           |\n      +--------------------------+---------------------------------+\n\
    \      | 1 | <juliet@example.com> | The \"at\" sign (\"@\") is allowed  |\n  \
    \    |   |                      | in the PRECIS IdentifierClass   |\n      +--------------------------+---------------------------------+\n\
    \      | 2 | <fussball>           |                                 |\n      +--------------------------+---------------------------------+\n\
    \      | 3 | <fu\xDFball>            | The third character is LATIN    |\n   \
    \   |   |                      | SMALL LETTER SHARP S (U+00DF)   |\n      +--------------------------+---------------------------------+\n\
    \      | 4 | <\u03C0>                  | A userpart of GREEK SMALL       |\n \
    \     |   |                      | LETTER PI (U+03C0)              |\n      +--------------------------+---------------------------------+\n\
    \      | 5 | <\u03A3>                  | A userpart of GREEK CAPITAL     |\n \
    \     |   |                      | LETTER SIGMA (U+03A3)           |\n      +--------------------------+---------------------------------+\n\
    \      | 6 | <\u03C3>                  | A userpart of GREEK SMALL       |\n \
    \     |   |                      | LETTER SIGMA (U+03C3)           |\n      +--------------------------+---------------------------------+\n\
    \      | 7 | <\u03C2>                  | A userpart of GREEK SMALL       |\n \
    \     |   |                      | LETTER FINAL SIGMA (U+03C2)     |\n      +--------------------------+---------------------------------+\n\
    \                   Table 1: A Sample of Legal Userparts\n   Regarding examples\
    \ 2 and 3: although in German writing the character\n   eszett \"\xDF\" (LATIN\
    \ SMALL LETTER SHARP S, U+00DF) can mostly be used\n   interchangeably with the\
    \ two characters \"ss\", the userparts in these\n   examples are different and\
    \ (if desired) a server would need to\n   enforce a registration policy that disallows\
    \ one of them if the other\n   is registered.\n   Regarding examples 5, 6, and\
    \ 7: optional case mapping of \"\u03A3\" (GREEK\n   CAPITAL LETTER SIGMA, U+03A3)\
    \ to the lowercase character \"\u03C3\" (GREEK\n   SMALL LETTER SIGMA, U+03C3)\
    \ during comparison would result in\n   matching the userparts in examples 5 and\
    \ 6; however, because the\n   PRECIS mapping rules do not account for the special\
    \ status of the\n   character \"\u03C2\" (GREEK SMALL LETTER FINAL SIGMA, U+03C2),\
    \ the userparts\n   in examples 5 and 7 or examples 6 and 7 would not be matched\
    \ during\n   comparison.\n   The following examples illustrate strings that are\
    \ not valid\n   userparts (not usernames) because they violate the format defined\n\
    \   above.\n      +--------------------------+---------------------------------+\n\
    \      | # | Non-Userpart String  | Notes                           |\n      +--------------------------+---------------------------------+\n\
    \      | 8 | <foo bar>            | SPACE (U+0020) is disallowed in |\n      |\
    \   |                      | the userpart                    |\n      +--------------------------+---------------------------------+\n\
    \      | 9 | <>                   | Zero-length userpart            |\n      +--------------------------+---------------------------------+\n\
    \      | 10| <henry\u2163>            | The sixth character is ROMAN    |\n  \
    \    |   |                      | NUMERAL FOUR (U+2163)           |\n      +--------------------------+---------------------------------+\n\
    \      | 11| <\u221E>                  | A userpart of INFINITY (U+221E) |\n \
    \     +--------------------------+---------------------------------+\n       Table\
    \ 2: A Sample of Strings That Violate the Userpart Rules\n   Regarding example\
    \ 8: although this is not a valid userpart, it is a\n   valid username because\
    \ it is a space-separated sequence of userparts.\n   Regarding example 10: the\
    \ character \"\u2163\" (ROMAN NUMERAL FOUR, U+2163)\n   has a compatibility equivalent\
    \ of the characters \"I\" (LATIN CAPITAL\n   LETTER I, U+0049) and \"V\" (LATIN\
    \ CAPITAL LETTER V, U+0056), but code\n   points with compatibility equivalents\
    \ are not allowed in the PRECIS\n   IdentifierClass.\n   Regarding example 11:\
    \ symbol characters such as \"\u221E\" (INFINITY,\n   U+221E) are not allowed\
    \ in the PRECIS IdentifierClass.\n"
- title: 4.  Passwords
  contents:
  - '4.  Passwords

    '
- title: 4.1.  Definition
  contents:
  - "4.1.  Definition\n   This document specifies that a password is a string of Unicode\
    \ code\n   points [Unicode] that is conformant to the OpaqueString profile\n \
    \  (specified below) of the PRECIS FreeformClass defined in Section 4.3\n   of\
    \ [RFC8264] and expressed in a standard Unicode Encoding Form (such\n   as UTF-8\
    \ [RFC3629]).\n   The syntax for a password is defined as follows, using the Augmented\n\
    \   Backus-Naur Form (ABNF) [RFC5234].\n      password   = 1*(freepoint)\n   \
    \                ;\n                   ; a \"freepoint\" is a Unicode code point\
    \ that\n                   ; can be contained in a string conforming to\n    \
    \               ; the PRECIS FreeformClass\n                   ;\n   All code\
    \ points and blocks not explicitly allowed in the PRECIS\n   FreeformClass are\
    \ disallowed; this includes private-use code points,\n   surrogate code points,\
    \ and the other code points and blocks defined\n   as \"Prohibited Output\" in\
    \ Section 2.3 of [RFC4013] (when corrected\n   per [Err1812]).\n   A password\
    \ MUST NOT be zero bytes in length.  This rule is to be\n   enforced after any\
    \ normalization and mapping of code points.\n      Note: Some existing systems\
    \ allow an empty string in places where\n      a password would be expected (e.g.,\
    \ command-line tools that might\n      be called from an automated script, or\
    \ servers that might need to\n      be restarted without human intervention).\
    \  From the perspective of\n      this document (and RFC 4013 before it), these\
    \ empty strings are\n      not passwords but are workarounds for the practical\
    \ difficulty of\n      using passwords in certain scenarios.\n      Note: The\
    \ prohibition of zero-length passwords is not a\n      recommendation regarding\
    \ password strength (because a password of\n      only one byte is highly insecure)\
    \ but is meant to prevent\n      applications from mistakenly omitting a password\
    \ entirely; such an\n      outcome is possible when internationalized strings\
    \ are accepted,\n      because a non-empty sequence of characters can result in\
    \ a zero-\n      length password after canonicalization.\n   In protocols that\
    \ provide passwords as input to a cryptographic\n   algorithm such as a hash function,\
    \ the client will need to perform\n   enforcement of the rules for the OpaqueString\
    \ profile before applying\n   the algorithm, because the password is not available\
    \ to the server in\n   plaintext form.\n"
- title: 4.2.  OpaqueString Profile
  contents:
  - "4.2.  OpaqueString Profile\n   The definition of the OpaqueString profile is\
    \ provided in the\n   following sections, including detailed information about\
    \ preparation,\n   enforcement, and comparison (for details on the distinction\
    \ between\n   these actions, refer to [RFC8264]).\n"
- title: 4.2.1.  Preparation
  contents:
  - "4.2.1.  Preparation\n   An entity that prepares a string according to this profile\
    \ MUST\n   ensure that the string consists only of Unicode code points that are\n\
    \   explicitly allowed by the FreeformClass string class defined in\n   [RFC8264].\n"
- title: 4.2.2.  Enforcement
  contents:
  - "4.2.2.  Enforcement\n   An entity that performs enforcement according to this\
    \ profile MUST\n   prepare a string as described in Section 4.2.1 and MUST also\
    \ apply\n   the rules specified below for the OpaqueString profile (these rules\n\
    \   MUST be applied in the order shown):\n   1.  Width Mapping Rule: Fullwidth\
    \ and halfwidth code points MUST NOT\n       be mapped to their decomposition\
    \ mappings (see Unicode Standard\n       Annex #11 [UAX11]).\n   2.  Additional\
    \ Mapping Rule: Any instances of non-ASCII space MUST be\n       mapped to SPACE\
    \ (U+0020); a non-ASCII space is any Unicode code\n       point having a Unicode\
    \ general category of \"Zs\", with the\n       exception of SPACE (U+0020).  As\
    \ was the case in RFC 4013, the\n       inclusion of only SPACE (U+0020) prevents\
    \ confusion with various\n       non-ASCII space code points, many of which are\
    \ difficult to\n       reproduce across different input methods.\n   3.  Case\
    \ Mapping Rule: There is no case mapping rule (because mapping\n       uppercase\
    \ and titlecase code points to their lowercase\n       equivalents would lead\
    \ to false accepts and thus to reduced\n       security).\n   4.  Normalization\
    \ Rule: Unicode Normalization Form C (NFC) MUST be\n       applied to all strings.\n\
    \   5.  Directionality Rule: There is no directionality rule.  The \"Bidi\n  \
    \     Rule\" (defined in [RFC5893]) and similar rules are unnecessary\n      \
    \ and inapplicable to passwords, because they can reduce the\n       repertoire\
    \ of characters that are allowed in a string and\n       therefore reduce the\
    \ amount of entropy that is possible in a\n       password.  Such rules are intended\
    \ to minimize the possibility\n       that the same string will be displayed differently\
    \ on a layout\n       system set for right-to-left display and a layout system\
    \ set for\n       left-to-right display; however, passwords are typically not\n\
    \       displayed at all and are rarely meant to be interoperable across\n   \
    \    different layout systems in the way that non-secret strings like\n      \
    \ domain names and usernames are.  Furthermore, it is perfectly\n       acceptable\
    \ for opaque strings other than passwords to be\n       presented differently\
    \ in different layout systems, as long as the\n       presentation is consistent\
    \ in any given layout system.\n   The result of the foregoing operations is an\
    \ output string that\n   conforms to the OpaqueString profile.  Until an implementation\n\
    \   produces such an output string, it MUST NOT treat the string as\n   conforming\
    \ (in particular, it MUST NOT assume that an input string is\n   conforming before\
    \ the enforcement operation has been completed).\n"
- title: 4.2.3.  Comparison
  contents:
  - "4.2.3.  Comparison\n   An entity that performs comparison of two strings according\
    \ to this\n   profile MUST prepare each string as specified in Section 4.2.1 and\n\
    \   then MUST enforce the rules specified in Section 4.2.2.  The two\n   strings\
    \ are to be considered equivalent if and only if they are an\n   exact octet-for-octet\
    \ match (sometimes called \"bit-string identity\").\n   Until an implementation\
    \ determines whether two strings are to be\n   considered equivalent, it MUST\
    \ NOT treat them as equivalent (in\n   particular, it MUST NOT assume that two\
    \ input strings are equivalent\n   before the comparison operation has been completed).\n\
    \   See Section 8.2 regarding comparison of passwords and passphrases.\n"
- title: 4.3.  Examples
  contents:
  - "4.3.  Examples\n   The following examples illustrate a small number of passwords\
    \ that\n   are consistent with the format defined above (note that the\n   characters\
    \ \"<\" and \">\" are used here to delineate the actual\n   passwords and are\
    \ not part of the password strings).\n   +------------------------------------+------------------------------+\n\
    \   | # | Password                       | Notes                        |\n  \
    \ +------------------------------------+------------------------------+\n   |\
    \ 12| <correct horse battery staple> | SPACE (U+0020) is allowed    |\n   +------------------------------------+------------------------------+\n\
    \   | 13| <Correct Horse Battery Staple> | Differs by case from         |\n  \
    \ |   |                                | example 12                   |\n   +------------------------------------+------------------------------+\n\
    \   | 14| <\u03C0\xDF\xE5>                          | Non-ASCII letters are OK\
    \     |\n   |   |                                | (e.g., GREEK SMALL LETTER \
    \   |\n   |   |                                | PI (U+03C0))                \
    \ |\n   +------------------------------------+------------------------------+\n\
    \   | 15| <Jack of \u2666s>                   | Symbols are OK (e.g., BLACK  |\n\
    \   |   |                                | DIAMOND SUIT (U+2666))       |\n  \
    \ +------------------------------------+------------------------------+\n   |\
    \ 16| <foo\u1680bar>                      | OGHAM SPACE MARK (U+1680) is |\n \
    \  |   |                                | mapped to SPACE (U+0020);    |\n   |\
    \   |                                | thus, the full string is     |\n   |  \
    \ |                                | mapped to <foo bar>          |\n   +------------------------------------+------------------------------+\n\
    \                   Table 3: A Sample of Legal Passwords\n   The following examples\
    \ illustrate strings that are not valid\n   passwords because they violate the\
    \ format defined above.\n   +------------------------------------+------------------------------+\n\
    \   | # | Password                       | Notes                        |\n  \
    \ +------------------------------------+------------------------------+\n   |\
    \ 17| <>                             | Zero-length passwords are    |\n   |  \
    \ |                                | disallowed                   |\n   +------------------------------------+------------------------------+\n\
    \   | 18| <my cat is a &#x9;by>          | Control characters like TAB  |\n  \
    \ |   |                                | (U+0009) are disallowed      |\n   +------------------------------------+------------------------------+\n\
    \       Table 4: A Sample of Strings That Violate the Password Rules\n   Note:\
    \ Following the \"XML Notation\" used in [RFC3987], the character\n   TAB (U+0009)\
    \ in example 18 is represented as &#x9 because otherwise\n   it could not be shown\
    \ in running text.\n"
- title: 5.  Use in Application Protocols
  contents:
  - "5.  Use in Application Protocols\n   This specification defines only the PRECIS-based\
    \ rules for the\n   handling of strings conforming to the UsernameCaseMapped and\n\
    \   UsernameCasePreserved profiles of the PRECIS IdentifierClass, and\n   strings\
    \ conforming to the OpaqueString profile of the PRECIS\n   FreeformClass.  It\
    \ is the responsibility of an application protocol\n   to specify the protocol\
    \ slots in which such strings can appear, the\n   entities that are expected to\
    \ enforce the rules governing such\n   strings, and at what points during protocol\
    \ processing or interface\n   handling the rules need to be enforced.  See Section\
    \ 6 of [RFC8264]\n   for guidelines on using PRECIS profiles in applications.\n\
    \   Above and beyond the PRECIS-based rules specified here, application\n   protocols\
    \ can also define application-specific rules governing such\n   strings (rules\
    \ regarding minimum or maximum length, further\n   restrictions on allowable code\
    \ points or character ranges, safeguards\n   to mitigate the effects of visually\
    \ similar characters, etc.),\n   application-layer constructs (see Section 3.5),\
    \ and related matters.\n   Some PRECIS profile definitions encourage entities\
    \ that enforce the\n   rules to be liberal in what they accept.  However, for\
    \ usernames and\n   passwords such a policy can be problematic, because it can\
    \ lead to\n   false accepts.  An in-depth discussion can be found in [RFC6943].\n\
    \   Applying the rules for any given PRECIS profile is not necessarily an\n  \
    \ idempotent procedure for all code points.  Therefore, an\n   implementation\
    \ SHOULD apply the rules repeatedly until the output\n   string is stable; if\
    \ the output string does not stabilize after\n   reapplying the rules three (3)\
    \ additional times after the first\n   application, the implementation SHOULD\
    \ terminate application of the\n   rules and reject the input string as invalid.\n"
- title: 6.  Migration
  contents:
  - "6.  Migration\n   The rules defined in this specification differ slightly from\
    \ those\n   defined by the SASLprep specification [RFC4013] (but not from\n  \
    \ [RFC7613]).  In order to smooth the process of migrating from\n   SASLprep to\
    \ the approach defined herein, the following sections\n   describe these differences,\
    \ along with their implications for\n   migration, in more detail.\n"
- title: 6.1.  Usernames
  contents:
  - "6.1.  Usernames\n   Deployments that currently use SASLprep for handling usernames\
    \ might\n   need to scrub existing data when they migrate to the rules defined\
    \ in\n   this specification.  In particular:\n   o  SASLprep specified the use\
    \ of Unicode Normalization Form KC\n      (NFKC), whereas the UsernameCaseMapped\
    \ and UsernameCasePreserved\n      profiles employ Unicode Normalization Form\
    \ C (NFC).  In practice,\n      this change is unlikely to cause significant problems,\
    \ because\n      NFKC provides methods for mapping Unicode code points with\n\
    \      compatibility equivalents to those equivalents, whereas the PRECIS\n  \
    \    IdentifierClass entirely disallows Unicode code points with\n      compatibility\
    \ equivalents (i.e., during comparison, NFKC is more\n      \"aggressive\" about\
    \ finding matches than NFC).  A few examples\n      might suffice to indicate\
    \ the nature of the problem:\n      1.  \"\u017F\" (LATIN SMALL LETTER LONG S,\
    \ U+017F) is compatibility\n          equivalent to \"s\" (LATIN SMALL LETTER\
    \ S, U+0073).\n      2.  \"\u2163\" (ROMAN NUMERAL FOUR, U+2163) is compatibility\
    \ equivalent\n          to \"I\" (LATIN CAPITAL LETTER I, U+0049) and \"V\" (LATIN\
    \ CAPITAL\n          LETTER V, U+0056).\n      3.  \"\uFB01\" (LATIN SMALL LIGATURE\
    \ FI, U+FB01) is compatibility\n          equivalent to \"f\" (LATIN SMALL LETTER\
    \ F, U+0066) and \"i\"\n          (LATIN SMALL LETTER I, U+0069).\n      Under\
    \ SASLprep, the use of NFKC also handled the mapping of\n      fullwidth and halfwidth\
    \ code points to their decomposition\n      mappings.\n      For migration purposes,\
    \ operators might want to search their\n      database of usernames for names\
    \ containing Unicode code points\n      with compatibility equivalents and, where\
    \ there is no conflict,\n      map those code points to their equivalents.  Naturally,\
    \ it is\n      possible that during this process the operator will discover\n\
    \      conflicting usernames; for instance, \"HENRYIV\" with the last two\n  \
    \    code points being LATIN CAPITAL LETTER I (U+0049) and LATIN\n      CAPITAL\
    \ LETTER V (U+0056) as opposed to \"HENRY\u2163\" with the last\n      character\
    \ being \"\u2163\" (ROMAN NUMERAL FOUR, U+2163), which is\n      compatibility\
    \ equivalent to U+0049 and U+0056).  In these cases,\n      the operator will\
    \ need to determine how to proceed, for instance,\n      by disabling the account\
    \ whose name contains a Unicode code point\n      with a compatibility equivalent.\
    \  Such cases are probably rare,\n      but it is important for operators to be\
    \ aware of them.\n   o  SASLprep mapped the \"characters commonly mapped to nothing\"\
    \ (from\n      Appendix B.1 of [RFC3454]) to nothing, whereas the PRECIS\n   \
    \   IdentifierClass entirely disallows most of these code points,\n      which\
    \ correspond to the code points from the PRECIS \"M\" category\n      defined\
    \ under Section 9.13 of [RFC8264].  For migration purposes,\n      the operator\
    \ might want to remove from usernames any code points\n      contained in the\
    \ PRECIS \"M\" category (e.g., SOFT HYPHEN (U+00AD)).\n      Because these code\
    \ points would have been \"mapped to nothing\" in\n      Stringprep, in practice\
    \ a user would not notice the difference if,\n      upon migration to PRECIS,\
    \ the code points are removed.\n   o  SASLprep allowed uppercase and titlecase\
    \ code points, whereas the\n      UsernameCaseMapped profile maps uppercase and\
    \ titlecase code\n      points to their lowercase equivalents (by contrast, the\n\
    \      UsernameCasePreserved profile matches SASLprep in this regard).\n     \
    \ For migration purposes, the operator can use either the\n      UsernameCaseMapped\
    \ profile (thus losing the case information) or\n      the UsernameCasePreserved\
    \ profile (thus ignoring case difference\n      when comparing usernames).\n"
- title: 6.2.  Passwords
  contents:
  - "6.2.  Passwords\n   Depending on local service policy, migration from SASLprep\
    \ to this\n   specification might not involve any scrubbing of data (because\n\
    \   passwords might not be stored in the clear anyway); however, service\n   providers\
    \ need to be aware of possible issues that might arise during\n   migration. \
    \ In particular:\n   o  SASLprep specified the use of Unicode Normalization Form\
    \ KC\n      (NFKC), whereas the OpaqueString profile employs Unicode\n      Normalization\
    \ Form C (NFC).  Because NFKC is more aggressive about\n      finding matches\
    \ than NFC, in practice this change is unlikely to\n      cause significant problems\
    \ and indeed has the security benefit of\n      probably resulting in fewer false\
    \ accepts when comparing\n      passwords.  A few examples might suffice to indicate\
    \ the nature of\n      the problem:\n      1.  \"\u017F\" (LATIN SMALL LETTER\
    \ LONG S, U+017F) is compatibility\n          equivalent to \"s\" (LATIN SMALL\
    \ LETTER S, U+0073).\n      2.  \"\u2163\" (ROMAN NUMERAL FOUR, U+2163) is compatibility\
    \ equivalent\n          to \"I\" (LATIN CAPITAL LETTER I, U+0049) and \"V\" (LATIN\
    \ CAPITAL\n          LETTER V, U+0056).\n      3.  \"\uFB01\" (LATIN SMALL LIGATURE\
    \ FI, U+FB01) is compatibility\n          equivalent to \"f\" (LATIN SMALL LETTER\
    \ F, U+0066) and \"i\"\n          (LATIN SMALL LETTER I, U+0069).\n      Under\
    \ SASLprep, the use of NFKC also handled the mapping of\n      fullwidth and halfwidth\
    \ code points to their decomposition\n      mappings.  Although it is expected\
    \ that code points with\n      compatibility equivalents are rare in existing\
    \ passwords, some\n      passwords that matched when SASLprep was used might no\
    \ longer work\n      when the rules in this specification are applied.\n   o \
    \ SASLprep mapped the \"characters commonly mapped to nothing\" (from\n      Appendix\
    \ B.1 of [RFC3454]) to nothing, whereas the PRECIS\n      FreeformClass entirely\
    \ disallows such code points, which\n      correspond to the code points from\
    \ the PRECIS \"M\" category defined\n      under Section 9.13 of [RFC8264].  In\
    \ practice, this change will\n      probably have no effect on comparison, but\
    \ user-oriented software\n      might reject such code points instead of ignoring\
    \ them during\n      password preparation.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   IANA has made the updates described below.\n"
- title: 7.1.  UsernameCaseMapped Profile
  contents:
  - "7.1.  UsernameCaseMapped Profile\n   IANA has added the following entry to the\
    \ \"PRECIS Profiles\" registry.\n   Name:  UsernameCaseMapped.\n   Base Class:\
    \  IdentifierClass.\n   Applicability:  Usernames in security and application\
    \ protocols.\n   Replaces:  The SASLprep profile of Stringprep.\n   Width Mapping\
    \ Rule:  Map fullwidth and halfwidth code points to their\n      decomposition\
    \ mappings.\n   Additional Mapping Rule:  None.\n   Case Mapping Rule:  Map uppercase\
    \ and titlecase code points to\n      lowercase.\n   Normalization Rule:  NFC.\n\
    \   Directionality Rule:  The \"Bidi Rule\" defined in RFC 5893 applies.\n   Enforcement:\
    \  To be defined by security or application protocols that\n      use this profile.\n\
    \   Specification:  Section 3.3 of RFC 8265.\n"
- title: 7.2.  UsernameCasePreserved Profile
  contents:
  - "7.2.  UsernameCasePreserved Profile\n   IANA has added the following entry to\
    \ the \"PRECIS Profiles\" registry.\n   Name:  UsernameCasePreserved.\n   Base\
    \ Class:  IdentifierClass.\n   Applicability:  Usernames in security and application\
    \ protocols.\n   Replaces:  The SASLprep profile of Stringprep.\n   Width Mapping\
    \ Rule:  Map fullwidth and halfwidth code points to their\n      decomposition\
    \ mappings.\n   Additional Mapping Rule:  None.\n   Case Mapping Rule:  None.\n\
    \   Normalization Rule:  NFC.\n   Directionality Rule:  The \"Bidi Rule\" defined\
    \ in RFC 5893 applies.\n   Enforcement:  To be defined by security or application\
    \ protocols that\n      use this profile.\n   Specification:  Section 3.4 of RFC\
    \ 8265.\n"
- title: 7.3.  OpaqueString Profile
  contents:
  - "7.3.  OpaqueString Profile\n   IANA has added the following entry to the \"PRECIS\
    \ Profiles\" registry.\n   Name:  OpaqueString.\n   Base Class:  FreeformClass.\n\
    \   Applicability:  Passwords and other opaque strings in security and\n     \
    \ application protocols.\n   Replaces:  The SASLprep profile of Stringprep.\n\
    \   Width Mapping Rule:  None.\n   Additional Mapping Rule:  Map non-ASCII space\
    \ code points to SPACE\n      (U+0020).\n   Case Mapping Rule:  None.\n   Normalization\
    \ Rule:  NFC.\n   Directionality Rule:  None.\n   Enforcement:  To be defined\
    \ by security or application protocols that\n      use this profile.\n   Specification:\
    \  Section 4.2 of RFC 8265.\n"
- title: 7.4.  Stringprep Profile
  contents:
  - "7.4.  Stringprep Profile\n   The Stringprep specification [RFC3454] did not provide\
    \ for entries in\n   the \"Stringprep Profiles\" registry to have any state except\
    \ \"Current\"\n   or \"Not Current\".  Because RFC 7613 obsoleted RFC 4013, which\n\
    \   registered the SASLprep profile of Stringprep, IANA previously marked\n  \
    \ that profile as \"Not Current\" and cited RFC 7613 as an additional\n   reference.\
    \  IANA has modified the profile so that the current\n   document is now cited\
    \ as the additional reference.\n"
- title: 8.  Security Considerations
  contents:
  - '8.  Security Considerations

    '
- title: 8.1.  Password/Passphrase Strength
  contents:
  - "8.1.  Password/Passphrase Strength\n   The ability to include a wide range of\
    \ characters in passwords and\n   passphrases can increase the potential for creating\
    \ a strong password\n   with high entropy.  However, in practice, the ability\
    \ to include such\n   characters ought to be weighed against the possible need\
    \ to reproduce\n   them on various devices using various input methods.\n"
- title: 8.2.  Password/Passphrase Comparison
  contents:
  - "8.2.  Password/Passphrase Comparison\n   In systems that conform to modern best\
    \ practices for security,\n   verification of passwords during authentication\
    \ will not use the\n   comparison defined in Section 4.2.3.  Instead, because\
    \ the system\n   performs cryptographic calculations to verify the password, it\
    \ will\n   prepare the password as defined in Section 4.2.1 and enforce the\n\
    \   rules as defined in Section 4.2.2 before performing the relevant\n   calculations.\n"
- title: 8.3.  Identifier Comparison
  contents:
  - "8.3.  Identifier Comparison\n   The process of comparing identifiers (such as\
    \ SASL simple usernames,\n   authentication identifiers, and authorization identifiers)\
    \ can lead\n   to either false rejects or false accepts, both of which have security\n\
    \   implications.  A more detailed discussion can be found in [RFC6943].\n"
- title: 8.4.  Reuse of PRECIS
  contents:
  - "8.4.  Reuse of PRECIS\n   The security considerations described in [RFC8264]\
    \ apply to the\n   IdentifierClass and FreeformClass string classes used in this\n\
    \   document for usernames and passwords, respectively.\n"
- title: 8.5.  Reuse of Unicode
  contents:
  - "8.5.  Reuse of Unicode\n   The security considerations described in [UTS39] apply\
    \ to the use of\n   Unicode code points in usernames and passwords.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3629]  Yergeau, F., \"UTF-8, a transformation format of ISO\n        \
    \      10646\", STD 63, RFC 3629, DOI 10.17487/RFC3629, November\n           \
    \   2003, <https://www.rfc-editor.org/info/rfc3629>.\n   [RFC5234]  Crocker, D.,\
    \ Ed. and P. Overell, \"Augmented BNF for Syntax\n              Specifications:\
    \ ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234, January 2008,\n\
    \              <https://www.rfc-editor.org/info/rfc5234>.\n   [RFC5890]  Klensin,\
    \ J., \"Internationalized Domain Names for\n              Applications (IDNA):\
    \ Definitions and Document Framework\",\n              RFC 5890, DOI 10.17487/RFC5890,\
    \ August 2010,\n              <https://www.rfc-editor.org/info/rfc5890>.\n   [RFC6365]\
    \  Hoffman, P. and J. Klensin, \"Terminology Used in\n              Internationalization\
    \ in the IETF\", BCP 166, RFC 6365,\n              DOI 10.17487/RFC6365, September\
    \ 2011,\n              <https://www.rfc-editor.org/info/rfc6365>.\n   [RFC8174]\
    \  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119\
    \ Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,\
    \ <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8264]  Saint-Andre, P. and\
    \ M. Blanchet, \"PRECIS Framework:\n              Preparation, Enforcement, and\
    \ Comparison of\n              Internationalized Strings in Application Protocols\"\
    ,\n              RFC 8264, DOI 10.17487/RFC8264, October 2017,\n             \
    \ <https://www.rfc-editor.org/info/rfc8264>.\n   [UAX11]    Unicode Standard Annex\
    \ #11, \"East Asian Width\", edited by\n              Ken Lunde.  An integral\
    \ part of The Unicode Standard,\n              <http://unicode.org/reports/tr11/>.\n\
    \   [Unicode]  The Unicode Consortium, \"The Unicode Standard\",\n           \
    \   <http://www.unicode.org/versions/latest/>.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [Err1812]  RFC Errata, Erratum ID 1812, RFC\
    \ 4013,\n              <https://www.rfc-editor.org/errata/eid1812>.\n   [RFC20]\
    \    Cerf, V., \"ASCII format for network interchange\", STD 80,\n           \
    \   RFC 20, DOI 10.17487/RFC0020, October 1969,\n              <https://www.rfc-editor.org/info/rfc20>.\n\
    \   [RFC3454]  Hoffman, P. and M. Blanchet, \"Preparation of\n              Internationalized\
    \ Strings (\"stringprep\")\", RFC 3454,\n              DOI 10.17487/RFC3454, December\
    \ 2002,\n              <https://www.rfc-editor.org/info/rfc3454>.\n   [RFC3501]\
    \  Crispin, M., \"INTERNET MESSAGE ACCESS PROTOCOL - VERSION\n              4rev1\"\
    , RFC 3501, DOI 10.17487/RFC3501, March 2003,\n              <https://www.rfc-editor.org/info/rfc3501>.\n\
    \   [RFC3987]  Duerst, M. and M. Suignard, \"Internationalized Resource\n    \
    \          Identifiers (IRIs)\", RFC 3987, DOI 10.17487/RFC3987,\n           \
    \   January 2005, <https://www.rfc-editor.org/info/rfc3987>.\n   [RFC4013]  Zeilenga,\
    \ K., \"SASLprep: Stringprep Profile for User Names\n              and Passwords\"\
    , RFC 4013, DOI 10.17487/RFC4013, February\n              2005, <https://www.rfc-editor.org/info/rfc4013>.\n\
    \   [RFC4422]  Melnikov, A., Ed. and K. Zeilenga, Ed., \"Simple\n            \
    \  Authentication and Security Layer (SASL)\", RFC 4422,\n              DOI 10.17487/RFC4422,\
    \ June 2006,\n              <https://www.rfc-editor.org/info/rfc4422>.\n   [RFC4616]\
    \  Zeilenga, K., Ed., \"The PLAIN Simple Authentication and\n              Security\
    \ Layer (SASL) Mechanism\", RFC 4616,\n              DOI 10.17487/RFC4616, August\
    \ 2006,\n              <https://www.rfc-editor.org/info/rfc4616>.\n   [RFC5802]\
    \  Newman, C., Menon-Sen, A., Melnikov, A., and N. Williams,\n              \"\
    Salted Challenge Response Authentication Mechanism\n              (SCRAM) SASL\
    \ and GSS-API Mechanisms\", RFC 5802,\n              DOI 10.17487/RFC5802, July\
    \ 2010,\n              <https://www.rfc-editor.org/info/rfc5802>.\n   [RFC5893]\
    \  Alvestrand, H., Ed. and C. Karp, \"Right-to-Left Scripts\n              for\
    \ Internationalized Domain Names for Applications\n              (IDNA)\", RFC\
    \ 5893, DOI 10.17487/RFC5893, August 2010,\n              <https://www.rfc-editor.org/info/rfc5893>.\n\
    \   [RFC6120]  Saint-Andre, P., \"Extensible Messaging and Presence\n        \
    \      Protocol (XMPP): Core\", RFC 6120, DOI 10.17487/RFC6120,\n            \
    \  March 2011, <https://www.rfc-editor.org/info/rfc6120>.\n   [RFC6943]  Thaler,\
    \ D., Ed., \"Issues in Identifier Comparison for\n              Security Purposes\"\
    , RFC 6943, DOI 10.17487/RFC6943, May\n              2013, <https://www.rfc-editor.org/info/rfc6943>.\n\
    \   [RFC7542]  DeKok, A., \"The Network Access Identifier\", RFC 7542,\n     \
    \         DOI 10.17487/RFC7542, May 2015,\n              <https://www.rfc-editor.org/info/rfc7542>.\n\
    \   [RFC7613]  Saint-Andre, P. and A. Melnikov, \"Preparation,\n             \
    \ Enforcement, and Comparison of Internationalized Strings\n              Representing\
    \ Usernames and Passwords\", RFC 7613,\n              DOI 10.17487/RFC7613, August\
    \ 2015,\n              <https://www.rfc-editor.org/info/rfc7613>.\n   [RFC7616]\
    \  Shekh-Yusef, R., Ed., Ahrens, D., and S. Bremer, \"HTTP\n              Digest\
    \ Access Authentication\", RFC 7616,\n              DOI 10.17487/RFC7616, September\
    \ 2015,\n              <https://www.rfc-editor.org/info/rfc7616>.\n   [RFC7617]\
    \  Reschke, J., \"The 'Basic' HTTP Authentication Scheme\",\n              RFC\
    \ 7617, DOI 10.17487/RFC7617, September 2015,\n              <https://www.rfc-editor.org/info/rfc7617>.\n\
    \   [RFC7622]  Saint-Andre, P., \"Extensible Messaging and Presence\n        \
    \      Protocol (XMPP): Address Format\", RFC 7622,\n              DOI 10.17487/RFC7622,\
    \ September 2015,\n              <https://www.rfc-editor.org/info/rfc7622>.\n\
    \   [RFC8266]  Saint-Andre, P., \"Preparation, Enforcement, and Comparison\n \
    \             of Internationalized Strings Representing Nicknames\",\n       \
    \       RFC 8266, DOI 10.17487/RFC8266, October 2017,\n              <https://www.rfc-editor.org/info/rfc8266>.\n\
    \   [UTS39]    Unicode Technical Standard #39, \"Unicode Security\n          \
    \    Mechanisms\", edited by Mark Davis and Michel Suignard,\n              <http://unicode.org/reports/tr39/>.\n"
- title: Appendix A.  Changes from RFC 7613
  contents:
  - "Appendix A.  Changes from RFC 7613\n   The following changes were made from [RFC7613].\n\
    \   o  Corrected the order of operations for the UsernameCaseMapped\n      profile\
    \ to ensure consistency with [RFC8264].\n   o  In accordance with working group\
    \ discussions and updates to\n      [RFC8264], removed the use of the Unicode\
    \ toCaseFold() operation\n      in favor of the Unicode toLowerCase() operation.\n\
    \   o  Modified the presentation (but not the content) of the rules.\n   o  Removed\
    \ UTF-8 as a mandatory encoding, because that is a matter\n      for the application.\n\
    \   o  Clarified several editorial matters.\n   o  Updated references.\n   See\
    \ [RFC7613] for a description of the differences from [RFC4013].\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Thanks to Christian Schudt and Sam Whited for their bug\
    \ reports and\n   feedback.\n   See [RFC7613] for acknowledgements related to\
    \ the specification that\n   this document supersedes.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Peter Saint-Andre\n   Jabber.org\n   P.O. Box 787\n  \
    \ Parker, CO  80134\n   United States of America\n   Phone: +1 720 256 6756\n\
    \   Email: stpeter@jabber.org\n   URI:   https://www.jabber.org/\n   Alexey Melnikov\n\
    \   Isode Ltd\n   5 Castle Business Village\n   36 Station Road\n   Hampton, Middlesex\
    \  TW12 2BX\n   United Kingdom\n   Email: Alexey.Melnikov@isode.com\n"
