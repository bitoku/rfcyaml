- title: __initial_text__
  contents:
  - "           Web Distributed Authoring and Versioning (WebDAV)\n              \
    \        Ordered Collections Protocol\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This specification extends the Web Distributed Authoring and\n \
    \  Versioning (WebDAV) Protocol to support the server-side ordering of\n   collection\
    \ members.  Of particular interest are orderings that are\n   not based on property\
    \ values, and so cannot be achieved using a\n   search protocol's ordering option\
    \ and cannot be maintained\n   automatically by the server.  Protocol elements\
    \ are defined to let\n   clients specify the position in the ordering of each\
    \ collection\n   member, as well as the semantics governing the ordering.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Notational Conventions . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Introduction . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   3.  Terminology  . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  4\n   4.  Overview of Ordered Collections  . . . . . . . . . . . .\
    \ . . .  5\n       4.1.  Additional Collection properties . . . . . . . . . .\
    \ . .  6\n             4.1.1.  DAV:ordering-type (protected). . . . . . . . .\
    \ .  6\n   5.  Creating an Ordered Collection . . . . . . . . . . . . . . . .\
    \  7\n       5.1.  Overview . . . . . . . . . . . . . . . . . . . . . . . .  7\n\
    \       5.2.  Example: Creating an Ordered Collection. . . . . . . . .  8\n  \
    \ 6.  Setting the Position of a Collection Member. . . . . . . . . .  8\n    \
    \   6.1.  Overview . . . . . . . . . . . . . . . . . . . . . . . .  8\n      \
    \ 6.2.  Examples: Setting the Position of a Collection Member. . 10\n       6.3.\
    \  Examples: Renaming a member of an ordered collection . . 10\n   7.  Changing\
    \ a Collection Ordering: ORDERPATCH method. . . . . . . 11\n       7.1.  Example:\
    \ Changing a Collection Ordering. . . . . . . . . 13\n       7.2.  Example: Failure\
    \ of an ORDERPATCH Request. . . . . . . . 14\n   8.  Listing the Members of an\
    \ Ordered Collection . . . . . . . . . 16\n       8.1.  Example: PROPFIND on an\
    \ Ordered Collection . . . . . . . 17\n   9.  Relationship to versioned collections.\
    \ . . . . . . . . . . . . 19\n       9.1.  Collection Version Properties. . .\
    \ . . . . . . . . . . . 20\n             9.1.1.  Additional semantics for\n  \
    \                   DAV:version-controlled-binding-set (protected) . 20\n    \
    \         9.1.2.  DAV:ordering-type (protected). . . . . . . . . . 20\n      \
    \ 9.2.  Additional CHECKIN semantics . . . . . . . . . . . . . . 20\n       9.3.\
    \  Additional CHECKOUT Semantics. . . . . . . . . . . . . . 20\n       9.4.  Additional\
    \ UNCHECKOUT, UPDATE, and MERGE Semantics . . . 21\n   10. Capability Discovery\
    \ . . . . . . . . . . . . . . . . . . . . . 21\n       10.1. Example: Using OPTIONS\
    \ for the Discovery of Support for\n             Ordering . . . . . . . . . .\
    \ . . . . . . . . . . . . . . 22\n       10.2. Example: Using Live Properties\
    \ for the Discovery of\n             Ordering . . . . . . . . . . . . . . . .\
    \ . . . . . . . . 22\n   11. Security Considerations. . . . . . . . . . . . .\
    \ . . . . . . . 23\n       11.1.  Denial of Service and DAV:ordering-type . .\
    \ . . . . . . 23\n   12. Internationalization Considerations. . . . . . . . .\
    \ . . . . . 24\n   13. IANA Considerations. . . . . . . . . . . . . . . . . .\
    \ . . . . 24\n   14. Intellectual Property Statement. . . . . . . . . . . . .\
    \ . . . 25\n   15. Contributors . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . 25\n   16. Acknowledgements . . . . . . . . . . . . . . . . . . . . . .\
    \ . 25\n   17. Normative References . . . . . . . . . . . . . . . . . . . . .\
    \ 26\n   A.  Extensions to the WebDAV Document Type Definition. . . . . . . 27\n\
    \   Index. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27\n  \
    \ Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . 29\n   Full\
    \ Copyright Statement . . . . . . . . . . . . . . . . . . . . . 30\n"
- title: 1.  Notational Conventions
  contents:
  - "1.  Notational Conventions\n   Since this document describes a set of extensions\
    \ to the WebDAV\n   Distributed Authoring Protocol [RFC2518], which is itself\
    \ an\n   extension to the HTTP/1.1 protocol, the augmented BNF used here to\n\
    \   describe protocol elements is exactly the same as described in\n   Section\
    \ 2.1 of HTTP [RFC2616].  Since this augmented BNF uses the\n   basic production\
    \ rules provided in Section 2.2 of HTTP, these rules\n   apply to this document\
    \ as well.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",\
    \ \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n\
    \   This document uses XML DTD fragments as a purely notational\n   convention.\
    \  WebDAV request and response bodies can not be validated\n   due to the specific\
    \ extensibility rules defined in section 23 of\n   [RFC2518] and due to the fact\
    \ that all XML elements defined by this\n   specification use the XML namespace\
    \ name \"DAV:\".  In particular:\n   1. element names use the \"DAV:\" namespace,\n\
    \   2. element ordering is irrelevant,\n   3. extension elements (elements not\
    \ already defined as valid child\n      elements) may be added anywhere, except\
    \ where explicitly stated\n      otherwise,\n   4. extension attributes (attributes\
    \ not already defined as valid for\n      this element) may be added anywhere,\
    \ except where explicitly\n      stated otherwise.\n"
- title: 2.  Introduction
  contents:
  - "2.  Introduction\n   This specification builds on the collection infrastructure\
    \ provided\n   by the WebDAV Distributed Authoring Protocol, adding support for\
    \ the\n   server-side ordering of collection members.\n   There are many scenarios\
    \ in which it is useful to impose an ordering\n   on a collection at the server,\
    \ such as expressing a recommended\n   access order, or a revision history order.\
    \  The members of a\n   collection might represent the pages of a book, which\
    \ need to be\n   presented in order if they are to make sense, or an instructor\
    \ might\n   create a collection of course readings that she wants to be displayed\n\
    \   in the order they are to be read.\n   Orderings may be based on property values,\
    \ but this is not always the\n   case.  The resources in the collection may not\
    \ have properties that\n   can be used to support the desired ordering.  Orderings\
    \ based on\n   properties can be obtained using a search protocol's ordering option,\n\
    \   but orderings not based on properties cannot.  These orderings\n   generally\
    \ need to be maintained by a human user.\n   The ordering protocol defined here\
    \ focuses on support for such\n   human-maintained orderings.  Its protocol elements\
    \ allow clients to\n   specify the position of each collection member in the collection's\n\
    \   ordering, as well as the semantics governing the order.  The protocol\n  \
    \ is designed to allow additional support in the future for orderings\n   that\
    \ are maintained automatically by the server.\n   The remainder of this document\
    \ is structured as follows: Section 3\n   defines terminology that will be used\
    \ throughout the specification.\n   Section 4 provides an overview of ordered\
    \ collections.  Section 5\n   describes how to create an ordered collection, and\
    \ Section 6\n   discusses how to set a member's position in the ordering of a\n\
    \   collection.  Section 7 explains how to change a collection ordering.\n   Section\
    \ 8 discusses listing the members of an ordered collection.\n   Section 9 discusses\
    \ the impact on version-controlled collections (as\n   defined in [RFC3253]).\
    \  Section 10 describes capability discovery.\n   Sections 11 through 13 discuss\
    \ security, internationalization, and\n   IANA considerations.  The remaining\
    \ sections provide supporting\n   information.\n"
- title: 3.  Terminology
  contents:
  - "3.  Terminology\n   The terminology used here follows that in [RFC2518] and [RFC3253].\n\
    \   Definitions of the terms resource, Uniform Resource Identifier (URI),\n  \
    \ and Uniform Resource Locator (URL) are provided in [RFC2396].\n   Ordered Collection\n\
    \      A collection for which the results from a PROPFIND request are\n      guaranteed\
    \ to be in the order specified for that collection.\n   Unordered Collection\n\
    \      A collection for which the client cannot depend on the\n      repeatability\
    \ of the ordering of results from a PROPFIND request.\n   Client-Maintained Ordering\n\
    \      An ordering of collection members that is maintained on the server\n  \
    \    based on client requests specifying the position of each\n      collection\
    \ member in the ordering.\n   Server-Maintained Ordering\n      An ordering of\
    \ collection members that is maintained automatically\n      by the server, based\
    \ on a client's choice of ordering semantics.\n   Ordering Semantics\n      In\
    \ general, ordering semantics are the set of structures or\n      meanings applied\
    \ to the ordering of the member of a specific\n      collection.  Within this\
    \ document, \"ordering semantics\" refers\n      specifically to the structure\
    \ specified in the DAV:ordering-type\n      property.  See Section 4.1.1 for more\
    \ information on\n      DAV:ordering-type.\n   This document uses the terms \"\
    precondition\", \"postcondition\" and\n   \"protected property\" as defined in\
    \ [RFC3253].  Servers MUST report\n   pre-/postcondition failures as described\
    \ in section 1.6 of this\n   document.\n"
- title: 4.  Overview of Ordered Collections
  contents:
  - "4.  Overview of Ordered Collections\n   If a collection is not ordered, the client\
    \ cannot depend on the\n   repeatability of the ordering of results from a PROPFIND\
    \ request.  By\n   specifying an ordering for a collection, a client requires\
    \ the server\n   to follow that ordering whenever it responds to a PROPFIND request\
    \ on\n   that collection.\n   Server-side orderings may be client-maintained or\
    \ server-maintained.\n   For client-maintained orderings, a client must specify\
    \ the ordering\n   position of each of the collection's members, either when the\
    \ member\n   is added to the collection (using the Position header (Section 6))\
    \ or\n   later (using the ORDERPATCH (Section 7) method).  For server-\n   maintained\
    \ orderings, the server automatically positions each of the\n   collection's members\
    \ according to the ordering semantics.  This\n   specification supports only client-maintained\
    \ orderings, but is\n   designed to allow the future extension with server-maintained\n\
    \   orderings.\n   A collection that supports ordering is not required to be ordered.\n\
    \   If a collection is ordered, each of its internal member URIs MUST\n   appear\
    \ in the ordering exactly once, and the ordering MUST NOT\n   include any URIs\
    \ that are not internal members of the collection.\n   The server is responsible\
    \ for enforcing these constraints on\n   orderings.  The server MUST remove an\
    \ internal member URI from the\n   ordering when it is removed from the collection.\
    \  Removing an\n   internal member MUST NOT affect the ordering of the remaining\n\
    \   internal members.  The server MUST add an internal member URI to the\n   ordering\
    \ when it is added to the collection.\n   Only one ordering can be attached to\
    \ any collection.  Multiple\n   orderings of the same resources can be achieved\
    \ by creating multiple\n   collections referencing those resources, and attaching\
    \ a different\n   ordering to each collection.\n   An ordering is considered to\
    \ be part of the state of a collection\n   resource.  Consequently, the ordering\
    \ is the same no matter which URI\n   is used to access the collection and is\
    \ protected by locks or access\n   control constraints on the collection.\n"
- title: 4.1.  Additional Collection properties
  contents:
  - "4.1.  Additional Collection properties\n   A DAV:allprop PROPFIND request SHOULD\
    \ NOT return any of the\n   properties defined in this document.\n"
- title: 4.1.1.  DAV:ordering-type (protected)
  contents:
  - "4.1.1.  DAV:ordering-type (protected)\n   The DAV:ordering-type property indicates\
    \ whether the collection is\n   ordered and, if so, uniquely identifies the semantics\
    \ of the\n   ordering.  It may also point to an explanation of the semantics in\n\
    \   human and/or machine-readable form.  At a minimum, this allows human\n   users\
    \ who add members to the collection to understand where to\n   position them in\
    \ the ordering.  This property cannot be set using\n   PROPPATCH.  Its value can\
    \ only be set by including the Ordering-Type\n   header with a MKCOL request or\
    \ by submitting an ORDERPATCH request.\n   Ordering types are identified by URIs\
    \ that uniquely identify the\n   semantics of the collection's ordering.  The\
    \ following two URIs are\n   predefined:\n   DAV:custom: The value DAV:custom\
    \ indicates that the collection is\n      ordered, but the semantics governing\
    \ the ordering are not being\n      advertised.\n   DAV:unordered: The value DAV:unordered\
    \ indicates that the collection\n      is not ordered.  That is, the client cannot\
    \ depend on the\n      repeatability of the ordering of results from a PROPFIND\
    \ request.\n   An ordering-aware client interacting with an ordering-unaware server\n\
    \   (e.g., one that is implemented only according to [RFC2518]) SHOULD\n   assume\
    \ that the collection is unordered if a collection does not have\n   the DAV:ordering-type\
    \ property.\n   <!ELEMENT ordering-type (href) >\n"
- title: 5.  Creating an Ordered Collection
  contents:
  - '5.  Creating an Ordered Collection

    '
- title: 5.1.  Overview
  contents:
  - "5.1.  Overview\n   When a collection is created, the client MAY request that\
    \ it be\n   ordered and specify the semantics of the ordering by using the new\n\
    \   Ordering-Type header (defined below) with a MKCOL request.\n   For collections\
    \ that are ordered, the client SHOULD identify the\n   semantics of the ordering\
    \ with a URI in the Ordering-Type header,\n   although the client MAY simply set\
    \ the header value to DAV:custom to\n   indicate that the collection is ordered\
    \ but the semantics of the\n   ordering are not being advertised.  Setting the\
    \ value to a URI that\n   identifies the ordering semantics provides the information\
    \ a human\n   user or software package needs to insert new collection members\
    \ into\n   the ordering intelligently.  Although the URI in the Ordering-Type\n\
    \   header MAY point to a resource that contains a definition of the\n   semantics\
    \ of the ordering, clients SHOULD NOT access that resource to\n   avoid overburdening\
    \ its server.  A value of DAV:unordered in the\n   Ordering-Type header indicates\
    \ that the client wants the collection\n   to be unordered.  If the Ordering-Type\
    \ header is not present, the\n   collection will be unordered.\n   Additional\
    \ Marshalling:\n      Ordering-Type = \"Ordering-Type\" \":\" absoluteURI\n  \
    \    ; absoluteURI: see RFC2396, section 3\n      The URI \"DAV:unordered\" indicates\
    \ that the collection is not\n      ordered, while \"DAV:custom\" indicates that\
    \ the collection is to be\n      ordered, but the semantics of the ordering is\
    \ not being\n      advertised.  Any other URI value indicates that the collection\
    \ is\n      ordered, and identifies the semantics of the ordering.\n   Additional\
    \ Preconditions:\n      (DAV:ordered-collections-supported): the server MUST support\n\
    \      ordered collections in the part of the URL namespace identified by\n  \
    \    the request URL.\n   Additional Postconditions:\n      (DAV:ordering-type-set):\
    \ if the Ordering-Type header was present,\n      the request MUST have created\
    \ a new collection resource with the\n      DAV:ordering-type being set according\
    \ to the Ordering-Type request\n      header.  The collection MUST be ordered\
    \ unless the ordering type\n      is \"DAV:unordered\".\n"
- title: '5.2.  Example: Creating an Ordered Collection'
  contents:
  - "5.2.  Example: Creating an Ordered Collection\n   >> Request:\n   MKCOL /theNorth/\
    \ HTTP/1.1\n   Host: example.org\n   Ordering-Type: http://example.org/orderings/compass.html\n\
    \    >> Response:\n   HTTP/1.1 201 Created\n   In this example, a new ordered\
    \ collection was created.  Its\n   DAV:ordering-type property has the URI from\
    \ the Ordering-Type header\n   as its value http://example.org/orderings/compass.html.\
    \  In this\n   case, the URI identifies the semantics governing a client-maintained\n\
    \   ordering.  As new members are added to the collection, clients or end\n  \
    \ users can use the semantics to determine where to position the new\n   members\
    \ in the ordering.\n"
- title: 6.  Setting the Position of a Collection Member
  contents:
  - '6.  Setting the Position of a Collection Member

    '
- title: 6.1.  Overview
  contents:
  - "6.1.  Overview\n   When a new member is added to a collection with a client-maintained\n\
    \   ordering (for example, with PUT, COPY, or MKCOL), its position in the\n  \
    \ ordering can be set with the new Position header.  The Position\n   header allows\
    \ the client to specify that an internal member URI\n   should be first in the\
    \ collection's ordering, last in the\n   collection's ordering, immediately before\
    \ some other internal member\n   URI in the collection's ordering, or immediately\
    \ after some other\n   internal member URI in the collection's ordering.\n   If\
    \ the Position request header is not used when adding a member to an\n   ordered\
    \ collection, then:\n   o  If the request is replacing an existing resource, the\
    \ server MUST\n      preserve the present ordering.\n   o  If the request is adding\
    \ a new internal member URI to the\n      collection, the server MUST append the\
    \ new member to the end of\n      the ordering.\n   Note to implementers: this\
    \ specification does not mandate a specific\n   implementation of MOVE operations\
    \ within the same parent collection.\n   Therefore, servers may either implement\
    \ this as a simple rename\n   operation (preserving the collection member's position),\
    \ or as a\n   sequence of \"remove\" and \"add\" (causing the semantics of \"\
    adding a\n   new member\" to apply).  Future revisions of this specification may\n\
    \   specify this behaviour more precisely based on future implementation\n   experience.\n\
    \   Additional Marshalling:\n      Position = \"Position\" \":\" (\"first\" |\
    \ \"last\" |\n                                ((\"before\" | \"after\") segment))\n\
    \      segment is defined in Section 3.3 of [RFC2396].\n      The segment is interpreted\
    \ relative to the collection to which the\n      new member is being added.\n\
    \      When the Position header is present, the server MUST insert the\n     \
    \ new member into the ordering at the specified location.\n      The \"first\"\
    \ keyword indicates that the new member is placed in the\n      beginning position\
    \ in the collection's ordering, while \"last\"\n      indicates that the new member\
    \ is placed in the final position in\n      the collection's ordering.  The \"\
    before\" keyword indicates that\n      the new member is added to the collection's\
    \ ordering immediately\n      prior to the position of the member identified in\
    \ the segment.\n      Likewise, the \"after\" keyword indicates that the new member\
    \ is\n      added to the collection's ordering immediately following the\n   \
    \   position of the member identified in the segment.\n      If the request is\
    \ replacing an existing resource and the Position\n      header is present, the\
    \ server MUST remove the internal member URI\n      from its current position,\
    \ and insert it at the newly requested\n      position.\n   Additional Preconditions:\n\
    \      (DAV:collection-must-be-ordered): the target collection MUST be\n     \
    \ ordered.\n      (DAV:segment-must-identify-member): the referenced segment MUST\n\
    \      identify a resource that exists and is different from the affected\n  \
    \    resource.\n   Additional Postconditions:\n      (DAV:position-set): if a\
    \ Position header is present, the request\n      MUST create the new collection\
    \ member at the specified position.\n"
- title: '6.2.  Examples: Setting the Position of a Collection Member'
  contents:
  - "6.2.  Examples: Setting the Position of a Collection Member\n   >> Request:\n\
    \   COPY /~user/dav/spec08.html HTTP/1.1\n   Host: example.org\n   Destination:\
    \ http://example.org/~slein/dav/spec08.html\n   Position: after requirements.html\n\
    \    >> Response:\n   HTTP/1.1 201 Created\n   This request resulted in the creation\
    \ of a new resource at\n   example.org/~slein/dav/spec08.html.  The Position header\
    \ in this\n   example caused the server to set its position in the ordering of\
    \ the\n   /~slein/dav/ collection immediately after requirements.html.\n   >>\
    \ Request:\n   MOVE /i-d/draft-webdav-prot-08.txt HTTP/1.1\n   Host: example.org\n\
    \   Destination: http://example.org/~user/dav/draft-webdav-prot-08.txt\n   Position:\
    \ first\n    >> Response:\n   HTTP/1.1 409 Conflict\n   Content-Type: text/xml;\
    \ charset=\"utf-8\"\n   Content-Length: xxxx\n   <?xml version=\"1.0\" encoding=\"\
    utf-8\" ?>\n   <D:error xmlns:D=\"DAV:\">\n     <D:collection-must-be-ordered/>\n\
    \   </D:error>\n   In this case, the server returned a 409 (Conflict) status code\n\
    \   because the /~user/dav/ collection is an unordered collection.\n   Consequently,\
    \ the server was unable to satisfy the Position header.\n"
- title: '6.3.  Examples: Renaming a member of an ordered collection'
  contents:
  - "6.3.  Examples: Renaming a member of an ordered collection\n   The following\
    \ sequence of requests will rename a collection member\n   while preserving its\
    \ position, independently of how the server\n   implements the MOVE operation:\n\
    \   1. PROPFIND collection with depth 1, retrieving the DAV:ordering-type\n  \
    \    property (an interactive client has already likely done this in\n      order\
    \ to display the collection's content).\n   2. If the DAV:ordering-type property\
    \ is present and does not equal\n      \"dav:unordered\" (thus if the collection\
    \ is ordered), determine the\n      current position (such as \"first\" or \"\
    after x\") and setup the\n      Position header accordingly.\n   3. Perform the\
    \ MOVE operation, optionally supplying the Position\n      header computed in\
    \ the previous step.\n"
- title: '7.  Changing a Collection Ordering: ORDERPATCH method'
  contents:
  - "7.  Changing a Collection Ordering: ORDERPATCH method\n   The ORDERPATCH method\
    \ is used to change the ordering semantics of a\n   collection, to change the\
    \ order of the collection's members in the\n   ordering, or both.\n   The server\
    \ MUST apply the changes in the order they appear in the\n   order XML element.\
    \  The server MUST either apply all the changes or\n   apply none of them.  If\
    \ any error occurs during processing, all\n   executed changes MUST be undone\
    \ and a proper error result returned.\n   If an ORDERPATCH request changes the\
    \ ordering semantics, but does not\n   completely specify the order of the collection\
    \ members, the server\n   MUST assign a position in the ordering to each collection\
    \ member for\n   which a position was not specified.  These server-assigned positions\n\
    \   MUST follow the last position specified by the client.  The result is\n  \
    \ that all members for which the client specified a position are at the\n   beginning\
    \ of the ordering, followed by any members for which the\n   server assigned positions.\
    \  Note that the ordering of the server-\n   assigned positions is not defined\
    \ by this document, therefore servers\n   can use whatever rule seems reasonable\
    \ (for instance, alphabetically\n   or by creation date).\n   If an ORDERPATCH\
    \ request does not change the ordering semantics, any\n   member positions not\
    \ specified in the request MUST remain unchanged.\n   A request to reposition\
    \ a collection member to the same place in the\n   ordering is not an error.\n\
    \   If an ORDERPATCH request fails, the server state preceding the\n   request\
    \ MUST be restored.\n   Additional Marshalling:\n      The request body MUST be\
    \ DAV:orderpatch element.\n      <!ELEMENT orderpatch (ordering-type?, order-member*)\
    \ >\n      <!ELEMENT order-member (segment, position) >\n      <!ELEMENT position\
    \ (first | last | before | after)>\n      <!ELEMENT segment (#PCDATA)>\n     \
    \ <!ELEMENT first EMPTY >\n      <!ELEMENT last EMPTY >\n      <!ELEMENT before\
    \ segment >\n      <!ELEMENT after segment >\n      PCDATA value: segment, as\
    \ defined in section 3.3 of [RFC2396].\n      The DAV:ordering-type property is\
    \ modified according to the\n      DAV:ordering-type element.\n      The ordering\
    \ of internal member URIs in the collection identified\n      by the Request-URI\
    \ is changed based on instructions in the order-\n      member XML elements. \
    \ Specifically, in the order that they appear\n      in the request.  The order-member\
    \ XML elements identify the\n      internal member URIs whose positions are to\
    \ be changed, and\n      describe their new positions in the ordering.  Each new\
    \ position\n      can be specified as first in the ordering, last in the ordering,\n\
    \      immediately before some other internal member URI, or immediately\n   \
    \   after some other internal member URI.\n      If a response body for a successful\
    \ request is included, it MUST\n      be a DAV:orderpatch-response XML element.\
    \  Note that this document\n      does not define any elements for the ORDERPATCH\
    \ response body, but\n      the DAV:orderpatch-response element is defined to\
    \ ensure\n      interoperability between future extensions that do define elements\n\
    \      for the ORDERPATCH response body.\n      <!ELEMENT orderpatch-response\
    \ ANY>\n      Since multiple changes can be requested in a single ORDERPATCH\n\
    \      request, the server MUST return a 207 (Multi-Status) response\n      (defined\
    \ in [RFC2518]), containing DAV:response elements for\n      either the request-URI\
    \ (when the DAV:ordering-type could not be\n      modified) or URIs of collection\
    \ members to be repositioned (when\n      an individual positioning request expressed\
    \ as DAV:order-member\n      could not be fulfilled) if any problems are encountered.\n\
    \   Preconditions:\n      (DAV:collection-must-be-ordered): see Section 6.1.\n\
    \      (DAV:segment-must-identify-member): see Section 6.1.\n   Postconditions:\n\
    \      (DAV:ordering-type-set): if the request body contained a\n      DAV:ordering-type\
    \ element, the request MUST have set the\n      DAV:ordering-type property of\
    \ the collection to the value\n      specified in the request.\n      (DAV:ordering-modified):\
    \ if the request body contained DAV:order-\n      member elements, the request\
    \ MUST have set the ordering of\n      internal member URIs in the collection\
    \ identified by the request-\n      URI based upon the instructions in the DAV:order-member\
    \ elements.\n"
- title: '7.1.  Example: Changing a Collection Ordering'
  contents:
  - "7.1.  Example: Changing a Collection Ordering\n   Consider an ordered collection\
    \ /coll-1, with bindings ordered as\n   follows:\n   three.html\n   four.html\n\
    \   one.html\n   two.html\n    >> Request:\n   ORDERPATCH /coll-1/ HTTP/1.1\n\
    \   Host: example.org\n   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length:\
    \ xxx\n   <?xml version=\"1.0\" ?>\n   <d:orderpatch xmlns:d=\"DAV:\">\n     \
    \ <d:ordering-type>\n         <d:href>http://example.org/inorder.ord</d:href>\n\
    \      </d:ordering-type>\n      <d:order-member>\n         <d:segment>two.html</d:segment>\n\
    \         <d:position><d:first/></d:position>\n      </d:order-member>\n     \
    \ <d:order-member>\n         <d:segment>one.html</d:segment>\n         <d:position><d:first/></d:position>\n\
    \      </d:order-member>\n      <d:order-member>\n         <d:segment>three.html</d:segment>\n\
    \         <d:position><d:last/></d:position>\n      </d:order-member>\n      <d:order-member>\n\
    \         <d:segment>four.html</d:segment>\n         <d:position><d:last/></d:position>\n\
    \      </d:order-member>\n   </d:orderpatch>\n    >> Response:\n   HTTP/1.1 200\
    \ OK\n   In this example, after the request has been processed, the\n   collection's\
    \ ordering semantics are identified by the URI http://\n   example.org/inorder.ord.\
    \  The value of the collection's\n   DAV:ordering-type property has been set to\
    \ this URI.  The request\n   also contains instructions for changing the positions\
    \ of the\n   collection's internal member URIs in the ordering to comply with\
    \ the\n   new ordering semantics.  As the DAV:order-member elements are\n   required\
    \ to be processed in the order they appear in the request,\n   two.html is moved\
    \ to the beginning of the ordering, and then one.html\n   is moved to the beginning\
    \ of the ordering.  Then three.html is moved\n   to the end of the ordering, and\
    \ finally four.html is moved to the end\n   of the ordering.  After the request\
    \ has been processed, the\n   collection's ordering is as follows:\n   one.html\n\
    \   two.html\n   three.html\n   four.html\n"
- title: '7.2.  Example: Failure of an ORDERPATCH Request'
  contents:
  - "7.2.  Example: Failure of an ORDERPATCH Request\n   Consider a collection /coll-1/\
    \ with members ordered as follows:\n   nunavut.map\n   nunavut.img\n   baffin.map\n\
    \   baffin.desc\n   baffin.img\n   iqaluit.map\n   nunavut.desc\n   iqaluit.img\n\
    \   iqaluit.desc\n    >> Request:\n   ORDERPATCH /coll-1/ HTTP/1.1\n   Host: www.nunanet.com\n\
    \   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length: xxx\n   <?xml\
    \ version=\"1.0\" ?>\n   <d:orderpatch xmlns:d=\"DAV:\">\n      <d:order-member>\n\
    \         <d:segment>nunavut.desc</d:segment>\n         <d:position>\n       \
    \     <d:after>\n               <d:segment>nunavut.map</d:segment>\n         \
    \   </d:after>\n         </d:position>\n      </d:order-member>\n      <d:order-member>\n\
    \         <d:segment>iqaluit.map</d:segment>\n         <d:position>\n        \
    \    <d:after>\n               <d:segment>pangnirtung.img</d:segment>\n      \
    \      </d:after>\n         </d:position>\n      </d:order-member>\n   </d:orderpatch>\n\
    \    >> Response:\n   HTTP/1.1 207 Multi-Status\n   Content-Type: text/xml; charset=\"\
    utf-8\"\n   Content-Length: xxx\n   <?xml version=\"1.0\" ?>\n   <d:multistatus\
    \ xmlns:d=\"DAV:\">\n     <d:response>\n       <d:href>http://www.nunanet.com/coll-1/iqaluit.map</d:href>\n\
    \       <d:status>HTTP/1.1 403 Forbidden</d:status>\n       <d:responsedescription>\n\
    \         <d:error><d:segment-must-identify-member/></d:error>\n         pangnirtung.img\
    \ is not a collection member.\n       </d:responsedescription>\n     </d:response>\n\
    \   </d:multistatus>\n   In this example, the client attempted to position iqaluit.map\
    \ after a\n   URI that is not an internal member of the collection /coll-1/. \
    \ The\n   server responded to this client error with a 403 (Forbidden) status\n\
    \   code, indicating the failed precondition DAV:segment-must-identify-\n   member.\
    \  Because ORDERPATCH is an atomic method, the request to\n   reposition nunavut.desc\
    \ (which would otherwise have succeeded) failed\n   as well, but does not need\
    \ to be expressed in the multistatus\n   response body.\n"
- title: 8.  Listing the Members of an Ordered Collection
  contents:
  - "8.  Listing the Members of an Ordered Collection\n   A PROPFIND request is used\
    \ to retrieve a listing of the members of an\n   ordered collection, just as it\
    \ is used to retrieve a listing of the\n   members of an unordered collection.\n\
    \   However, when responding to a PROPFIND on an ordered collection, the\n   server\
    \ MUST order the response elements according to the ordering\n   defined on the\
    \ collection.  If a collection is unordered, the client\n   cannot depend on the\
    \ repeatability of the ordering of results from a\n   PROPFIND request.\n   In\
    \ a response to a PROPFIND with Depth: infinity, members of\n   different collections\
    \ may be interleaved.  That is, the server is not\n   required to do a breadth-first\
    \ traversal.  The only requirement is\n   that the members of any ordered collection\
    \ appear in the order\n   defined for that collection.  Thus, for the hierarchy\
    \ illustrated in\n   the following figure, where collection A is an ordered collection\n\
    \   with the ordering B C D,\n                          A\n                  \
    \       /|\\\n                        / | \\\n                       B  C  D\n\
    \                      /  /|\\\n                     E  F G H\n   it would be\
    \ acceptable for the server to return response elements in\n   the order A B E\
    \ C F G H D or \"A B E C H G F D\" as well (if C is\n   unordered).  In this response,\
    \ B, C, and D appear in the correct\n   order, separated by members of other collections.\
    \  Clients can use a\n   series of Depth: 1 PROPFIND requests to avoid the complexity\
    \ of\n   processing Depth: infinity responses based on depth-first traversals.\n"
- title: '8.1.  Example: PROPFIND on an Ordered Collection'
  contents:
  - "8.1.  Example: PROPFIND on an Ordered Collection\n   Suppose a PROPFIND request\
    \ is submitted to /MyColl/, which has its\n   members ordered as follows.\n  \
    \ /MyColl/\n      lakehazen.html\n      siorapaluk.html\n      iqaluit.html\n\
    \      newyork.html\n    >> Request:\n   PROPFIND /MyColl/ HTTP/1.1\n   Host:\
    \ example.org\n   Depth: 1\n   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length:\
    \ xxxx\n   <?xml version=\"1.0\" ?>\n   <D:propfind xmlns:D=\"DAV:\">\n     <D:prop\
    \ xmlns:J=\"http://example.org/jsprops/\">\n       <D:ordering-type/>\n      \
    \ <D:resourcetype/>\n       <J:latitude/>\n    </D:prop>\n   </D:propfind>\n \
    \   >> Response:\n   HTTP/1.1 207 Multi-Status\n   Content-Type: text/xml; charset=\"\
    utf-8\"\n   Content-Length: xxxx\n   <?xml version=\"1.0\" ?>\n   <D:multistatus\
    \ xmlns:D=\"DAV:\"\n                  xmlns:J=\"http://example.org/jsprops/\"\
    >\n      <D:response>\n         <D:href>http://example.org/MyColl/</D:href>\n\
    \         <D:propstat>\n            <D:prop>\n               <D:ordering-type>\n\
    \                  <D:href>DAV:custom</D:href>\n               </D:ordering-type>\n\
    \               <D:resourcetype><D:collection/></D:resourcetype>\n           \
    \ </D:prop>\n            <D:status>HTTP/1.1 200 OK</D:status>\n         </D:propstat>\n\
    \         <D:propstat>\n            <D:prop>\n               <J:latitude/>\n \
    \           </D:prop>\n            <D:status>HTTP/1.1 404 Not Found</D:status>\n\
    \         </D:propstat>\n      </D:response>\n      <D:response>\n         <D:href>http://example.org/MyColl/lakehazen.html</D:href>\n\
    \         <D:propstat>\n            <D:prop>\n               <D:resourcetype/>\n\
    \               <J:latitude>82N</J:latitude>\n            </D:prop>\n        \
    \    <D:status>HTTP/1.1 200 OK</D:status>\n         </D:propstat>\n         <D:propstat>\n\
    \            <D:prop>\n               <D:ordering-type/>\n            </D:prop>\n\
    \            <D:status>HTTP/1.1 404 Not Found</D:status>\n         </D:propstat>\n\
    \      </D:response>\n      <D:response>\n         <D:href\n         >http://example.org/MyColl/siorapaluk.html</D:href>\n\
    \         <D:propstat>\n            <D:prop>\n               <D:resourcetype/>\n\
    \               <J:latitude>78N</J:latitude>\n            </D:prop>\n        \
    \    <D:status>HTTP/1.1 200 OK</D:status>\n         </D:propstat>\n         <D:propstat>\n\
    \            <D:prop>\n               <D:ordering-type/>\n            </D:prop>\n\
    \            <D:status>HTTP/1.1 404 Not Found</D:status>\n         </D:propstat>\n\
    \      </D:response>\n      <D:response>\n         <D:href>http://example.org/MyColl/iqaluit.html</D:href>\n\
    \         <D:propstat>\n            <D:prop>\n               <D:resourcetype/>\n\
    \               <J:latitude>62N</J:latitude>\n            </D:prop>\n        \
    \    <D:status>HTTP/1.1 200 OK</D:status>\n         </D:propstat>\n         <D:propstat>\n\
    \            <D:prop>\n               <D:ordering-type/>\n            </D:prop>\n\
    \            <D:status>HTTP/1.1 404 Not Found</D:status>\n         </D:propstat>\n\
    \      </D:response>\n      <D:response>\n         <D:href>http://example.org/MyColl/newyork.html</D:href>\n\
    \         <D:propstat>\n            <D:prop>\n               <D:resourcetype/>\n\
    \               <J:latitude>45N</J:latitude>\n            </D:prop>\n        \
    \    <D:status>HTTP/1.1 200 OK</D:status>\n         <D:propstat>\n           \
    \ <D:prop>\n               <D:ordering-type/>\n            </D:prop>\n       \
    \     <D:status>HTTP/1.1 404 Not Found</D:status>\n         </D:propstat>\n  \
    \       </D:propstat>\n      </D:response>\n   </D:multistatus>\n   In this example,\
    \ the server responded with a list of the collection\n   members in the order\
    \ defined for the collection.\n"
- title: 9.  Relationship to versioned collections
  contents:
  - "9.  Relationship to versioned collections\n   The Versioning Extensions to WebDAV\
    \ [RFC3253] introduce the concept\n   of versioned collections, recording both\
    \ the dead properties and the\n   set of internal version-controlled bindings.\
    \  This section defines\n   how this feature interacts with ordered collections.\n\
    \   This specification considers both the ordering type (DAV:ordering-\n   type\
    \ property) and the ordering of collection members to be part of\n   the state\
    \ of a collection.  Therefore, both MUST be recorded upon\n   CHECKIN or VERSION-CONTROL,\
    \ and both MUST be restored upon CHECKOUT,\n   UNCHECKOUT or UPDATE (where for\
    \ compatibility with RFC 3253, only the\n   ordering of version-controlled members\
    \ needs to be maintained).\n"
- title: 9.1.  Collection Version Properties
  contents:
  - '9.1.  Collection Version Properties

    '
- title: 9.1.1.  Additional semantics for DAV:version-controlled-binding-set
  contents:
  - "9.1.1.  Additional semantics for DAV:version-controlled-binding-set\n       \
    \ (protected)\n   For ordered collections, the DAV:version-controlled-binding\
    \ elements\n   MUST appear in the ordering defined for the checked-in ordered\n\
    \   collection.\n"
- title: 9.1.2.  DAV:ordering-type (protected)
  contents:
  - "9.1.2.  DAV:ordering-type (protected)\n   The DAV:ordering-type property records\
    \ the DAV:ordering-type property\n   of the checked-in ordered collection.\n"
- title: 9.2.  Additional CHECKIN semantics
  contents:
  - "9.2.  Additional CHECKIN semantics\n   Additional Postconditions:\n      (DAV:initialize-version-controlled-bindings-ordered):\
    \ If the\n      request-URL identified a both ordered and version-controlled\n\
    \      collection, then the child elements of DAV:version-controlled-\n      binding-set\
    \ of the new collection version MUST appear in the\n      ordering defined for\
    \ that collection.\n      (DAV:initialize-collection-version-ordering-type): If\
    \ the\n      request-URL identified a both ordered and version-controlled\n  \
    \    collection, then the DAV:ordering-type property of the new\n      collection\
    \ version MUST be a copy of the collection's\n      DAV:ordering-type property.\n"
- title: 9.3.  Additional CHECKOUT Semantics
  contents:
  - "9.3.  Additional CHECKOUT Semantics\n   Additional Postconditions:\n      (DAV:initialize-version-history-bindings-ordered):\
    \ If the request\n      has been applied to a collection version with a DAV:ordering-type\n\
    \      other than \"DAV:unordered\", the bindings in the new working\n      collection\
    \ MUST be ordered according to the collection version's\n      DAV:version-controlled-binding-set\
    \ property.\n      (DAV:initialize-ordering-type): If the request has been applied\
    \ to\n      a collection version, the DAV:ordering-type property of the new\n\
    \      working collection MUST be initialized from the collection\n      version's\
    \ DAV:ordering-type property.\n"
- title: 9.4.  Additional UNCHECKOUT, UPDATE, and MERGE Semantics
  contents:
  - "9.4.  Additional UNCHECKOUT, UPDATE, and MERGE Semantics\n   Additional Postconditions:\n\
    \      (DAV:update-version-controlled-collection-members-ordered): If the\n  \
    \    request modified the DAV:checked-in version of a version-\n      controlled\
    \ collection and the DAV:ordering-type for the checked-in\n      version is not\
    \ unordered (\"DAV:unordered\"), the version-controlled\n      members MUST be\
    \ ordered according to the checked-in version's\n      DAV:version-controlled-binding-set\
    \ property.  The ordering of\n      non-version-controlled members is server-defined.\n\
    \      (DAV:update-version-ordering-type): If the request modified the\n     \
    \ DAV:checked-in version of a version-controlled collection, the\n      DAV:ordering-type\
    \ property MUST be updated from the checked-in\n      version's property.\n"
- title: 10.  Capability Discovery
  contents:
  - "10.  Capability Discovery\n   Sections 9.1 and 15 of [RFC2518] describe the use\
    \ of compliance\n   classes with the DAV header in responses to OPTIONS, indicating\
    \ which\n   parts of the Web Distributed Authoring protocols the resource\n  \
    \ supports.  This specification defines an OPTIONAL extension to\n   [RFC2518].\
    \  It defines a new compliance class, called ordered-\n   collections, for use\
    \ with the DAV header in responses to OPTIONS\n   requests.  If a collection resource\
    \ does support ordering, its\n   response to an OPTIONS request may indicate that\
    \ it does, by listing\n   the new ORDERPATCH method as one it supports, and by\
    \ listing the new\n   ordered-collections compliance class in the DAV header.\n\
    \   When responding to an OPTIONS request, only a collection or a null\n   resource\
    \ can include ordered-collections in the value of the DAV\n   header.  By including\
    \ ordered-collections, the resource indicates\n   that its internal member URIs\
    \ can be ordered.  It implies nothing\n   about whether any collections identified\
    \ by its internal member URIs\n   can be ordered.\n   Furthermore, RFC 3253 [RFC3253]\
    \ introduces the live properties\n   DAV:supported-method-set (section 3.1.3)\
    \ and DAV:supported-live-\n   property-set (section 3.1.4).  Servers MUST support\
    \ these properties\n   as defined in RFC 3253.\n"
- title: '10.1.  Example: Using OPTIONS for the Discovery of Support for'
  contents:
  - "10.1.  Example: Using OPTIONS for the Discovery of Support for\n       Ordering\n\
    \    >> Request:\n   OPTIONS /somecollection/ HTTP/1.1\n   Host: example.org\n\
    \    >> Response:\n   HTTP/1.1 200 OK\n   Allow: OPTIONS, GET, HEAD, POST, PUT,\
    \ DELETE, TRACE, COPY, MOVE\n   Allow: MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK,\
    \ ORDERPATCH\n   DAV: 1, 2, ordered-collections\n   The DAV header in the response\
    \ indicates that the resource\n   /somecollection/ is level 1 and level 2 compliant,\
    \ as defined in\n   [RFC2518].  In addition, /somecollection/ supports ordering.\
    \  The\n   Allow header indicates that ORDERPATCH requests can be submitted to\n\
    \   /somecollection/.\n"
- title: '10.2.  Example: Using Live Properties for the Discovery of Ordering'
  contents:
  - "10.2.  Example: Using Live Properties for the Discovery of Ordering\n    >> Request:\n\
    \   PROPFIND /somecollection HTTP/1.1\n   Depth: 0\n   Content-Type: text/xml;\
    \ charset=\"utf-8\"\n   Content-Length: xxx\n   <?xml version=\"1.0\" encoding=\"\
    UTF-8\" ?>\n   <propfind xmlns=\"DAV:\">\n     <prop>\n       <supported-live-property-set/>\n\
    \       <supported-method-set/>\n     </prop>\n   </propfind>\n    >> Response:\n\
    \   HTTP/1.1 207 Multi-Status\n   Content-Type: text/xml; charset=\"utf-8\"\n\
    \   Content-Length: xxx\n   <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n   <multistatus\
    \ xmlns=\"DAV:\">\n     <response>\n       <href>http://example.org/somecollection</href>\n\
    \       <propstat>\n         <prop>\n           <supported-live-property-set>\n\
    \             <supported-live-property>\n               <prop><ordering-type/></prop>\n\
    \             </supported-live-property>\n             <!-- ... other live properties\
    \ omitted for brevity ... -->\n           </supported-live-property-set>\n   \
    \        <supported-method-set>\n             <supported-method name=\"COPY\"\
    \ />\n             <supported-method name=\"DELETE\" />\n             <supported-method\
    \ name=\"GET\" />\n             <supported-method name=\"HEAD\" />\n         \
    \    <supported-method name=\"LOCK\" />\n             <supported-method name=\"\
    MKCOL\" />\n             <supported-method name=\"MOVE\" />\n             <supported-method\
    \ name=\"OPTIONS\" />\n             <supported-method name=\"ORDERPATCH\" />\n\
    \             <supported-method name=\"POST\" />\n             <supported-method\
    \ name=\"PROPFIND\" />\n             <supported-method name=\"PROPPATCH\" />\n\
    \             <supported-method name=\"PUT\" />\n             <supported-method\
    \ name=\"TRACE\" />\n             <supported-method name=\"UNLOCK\" />\n     \
    \      </supported-method-set>\n         </prop>\n         <status>HTTP/1.1 200\
    \ OK</status>\n       </propstat>\n     </response>\n   </multistatus>\n   Note\
    \ that actual responses MUST contain a complete list of supported\n   live properties.\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   This section is provided to make WebDAV implementers\
    \ aware of the\n   security implications of this protocol.\n   All of the security\
    \ considerations of HTTP/1.1 and the WebDAV\n   Distributed Authoring Protocol\
    \ specification also apply to this\n   protocol specification.  In addition, ordered\
    \ collections introduce a\n   new security concern.  This issue is detailed here.\n"
- title: 11.1.  Denial of Service and DAV:ordering-type
  contents:
  - "11.1.  Denial of Service and DAV:ordering-type\n   There may be some risk of\
    \ denial of service at sites that are\n   advertised in the DAV:ordering-type\
    \ property of collections.\n   However, it is anticipated that widely-deployed\
    \ applications will use\n   hard-coded values for frequently-used ordering semantics\
    \ rather than\n   looking up the semantics at the location specified by DAV:ordering-\n\
    \   type.  This risk will be further reduced if clients observe the\n   recommendation\
    \ of Section 5.1 that requests not be sent to the URI in\n   DAV:ordering-type.\n"
- title: 12.  Internationalization Considerations
  contents:
  - "12.  Internationalization Considerations\n   This specification follows the practices\
    \ of [RFC2518] by encoding all\n   human-readable content using [XML] and in the\
    \ treatment of names.\n   Consequently, this specification complies with the IETF\
    \ Character Set\n   Policy [RFC2277].\n   WebDAV applications MUST support the\
    \ character set tagging, character\n   set encoding, and the language tagging\
    \ functionality of the XML\n   specification.  This constraint ensures that the\
    \ human-readable\n   content of this specification complies with [RFC2277].\n\
    \   As in [RFC2518], names in this specification fall into three\n   categories:\
    \ names of protocol elements such as methods and headers,\n   names of XML elements,\
    \ and names of properties.  The naming of\n   protocol elements follows the precedent\
    \ of HTTP using English names\n   encoded in USASCII for methods and headers.\
    \  The names of XML\n   elements used in this specification are English names\
    \ encoded in\n   UTF-8.\n   For error reporting, [RFC2518] follows the convention\
    \ of HTTP/1.1\n   status codes, including with each status code a short, English\n\
    \   description of the code (e.g., 423 Locked).  Internationalized\n   applications\
    \ will ignore this message, and display an appropriate\n   message in the user's\
    \ language and character set.\n   This specification introduces no new strings\
    \ that are displayed to\n   users as part of normal, error-free operation of the\
    \ protocol.\n   For the rationale of these decisions and advice for application\n\
    \   implementers, see [RFC2518].\n"
- title: 13.  IANA Considerations
  contents:
  - "13.  IANA Considerations\n   This document uses the namespaces defined by [RFC2518]\
    \ for properties\n   and XML elements.  All other IANA considerations mentioned\
    \ in\n   [RFC2518] also apply to this document.\n"
- title: 14.  Intellectual Property Statement
  contents:
  - "14.  Intellectual Property Statement\n   The IETF takes no position regarding\
    \ the validity or scope of any\n   intellectual property or other rights that\
    \ might be claimed to\n   pertain to the implementation or use of the technology\
    \ described in\n   this document or the extent to which any license under such\
    \ rights\n   might or might not be available; neither does it represent that it\n\
    \   has made any effort to identify any such rights.  Information on the\n   IETF's\
    \ procedures with respect to rights in standards-track and\n   standards-related\
    \ documentation can be found in BCP-11.  Copies of\n   claims of rights made available\
    \ for publication and any assurances of\n   licenses to be made available, or\
    \ the result of an attempt made to\n   obtain a general license or permission\
    \ for the use of such\n   proprietary rights by implementors or users of this\
    \ specification can\n   be obtained from the IETF Secretariat.\n   The IETF invites\
    \ any interested party to bring to its attention any\n   copyrights, patents or\
    \ patent applications, or other proprietary\n   rights which may cover technology\
    \ that may be required to practice\n   this standard.  Please address the information\
    \ to the IETF Executive\n   Director.\n"
- title: 15.  Contributors
  contents:
  - "15.  Contributors\n   This document has benefited from significant contributions\
    \ from Geoff\n   Clemm, Jason Crawford, Jim Davis, Chuck Fay and Judith Slein.\n"
- title: 16.  Acknowledgements
  contents:
  - "16.  Acknowledgements\n   This document has benefited from thoughtful discussion\
    \ by Jim Amsden,\n   Steve Carter, Tyson Chihaya, Ken Coar, Ellis Cohen, Bruce\
    \ Cragun,\n   Spencer Dawkins, Mark Day, Rajiv Dulepet, David Durand, Lisa\n \
    \  Dusseault, Roy Fielding, Yaron Goland, Fred Hitt, Alex Hopmann,\n   Marcus\
    \ Jager, Chris Kaler, Manoj Kasichainula, Rohit Khare, Daniel\n   LaLiberte, Steve\
    \ Martin, Larry Masinter, Jeff McAffer, Surendra\n   Koduru Reddy, Max Rible,\
    \ Sam Ruby, Bradley Sergeant, Nick Shelness,\n   John Stracke, John Tigue, John\
    \ Turner, Kevin Wiggen, and others.\n"
- title: 17.  Normative References
  contents:
  - "17.  Normative References\n   [RFC2119] Bradner, S., \"Key words for use in RFCs\
    \ to Indicate\n             Requirement Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [RFC2277] Alvestrand, H., \"IETF Policy on Character Sets and\n          \
    \   Languages\", BCP 18, RFC 2277, January 1998.\n   [RFC2396] Berners-Lee, T.,\
    \ Fielding, R. and L. Masinter, \"Uniform\n             Resource Identifiers (URI):\
    \ Generic Syntax\", RFC 2396,\n             August 1998.\n   [RFC2518] Goland,\
    \ Y., Whitehead, E., Faizi, A., Carter, S. and D.\n             Jensen, \"HTTP\
    \ Extensions for Distributed Authoring --\n             WEBDAV\", RFC 2518, February\
    \ 1999.\n   [RFC2616] Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter,\n\
    \             L., Leach, P. and T. Berners-Lee, \"Hypertext Transfer\n       \
    \      Protocol -- HTTP/1.1\", RFC 2616, June 1999.\n   [RFC3253] Clemm, G., Amsden,\
    \ J., Ellison, T., Kaler, C. and J.\n             Whitehead, \"Versioning Extensions\
    \ to WebDAV (Web\n             Distributed Authoring and Versioning)\", RFC 3253,\
    \ March\n             2002.\n   [XML]     Bray, T., Paoli, J., Sperberg-McQueen,\
    \ C. and E. Maler,\n             \"Extensible Markup Language (XML) 1.0 (2nd ed)\"\
    , W3C REC-\n             xml, October 2000, <http://www.w3.org/TR/2000/REC-xml-\n\
    \             20001006>.\n"
- title: Appendix A. Extensions to the WebDAV Document Type Definition
  contents:
  - "Appendix A. Extensions to the WebDAV Document Type Definition\n   <!ELEMENT orderpatch\
    \ (ordering-type?, order-member*) >\n   <!ELEMENT order-member (segment, position)\
    \ >\n   <!ELEMENT ordering-type (href) >\n   <!ELEMENT position (first | last\
    \ | before | after)>\n   <!ELEMENT first EMPTY >\n   <!ELEMENT last EMPTY >\n\
    \   <!ELEMENT before segment >\n   <!ELEMENT after segment >\n   <!ELEMENT segment\
    \ (#PCDATA)>\n"
- title: Index
  contents:
  - "Index\n   C\n      Client-Maintained Ordering  4\n      Condition Names\n   \
    \      DAV:collection-must-be-ordered (pre)  9\n         DAV:initialize-collection-version-ordering-type\
    \ (post)  20\n         DAV:initialize-ordering-type (post)  21\n         DAV:initialize-version-controlled-bindings-ordered\
    \ (post)  20\n         DAV:initialize-version-history-bindings-ordered (post)\
    \  20\n         DAV:ordered-collections-supported (pre)  7\n         DAV:ordering-modified\
    \ (post)  13\n         DAV:ordering-type-set (post)  7, 13\n         DAV:position-set\
    \ (post)  9\n         DAV:segment-must-identify-member (pre)  9\n         DAV:update-version-controlled-collection-members-ordered\n\
    \             (post) 21\n         DAV:update-version-ordering-type (post)  21\n\
    \   D\n      DAV header\n         compliance class 'ordered-collections'  21\n\
    \      DAV:collection-must-be-ordered precondition  9\n      DAV:custom ordering\
    \ type  6\n      DAV:initialize-collection-version-ordering-type postcondition\
    \  20\n      DAV:initialize-ordering-type postcondition  21\n      DAV:initialize-version-controlled-bindings-ordered\n\
    \          postcondition 20\n      DAV:initialize-version-history-bindings-ordered\
    \ postcondition  20\n      DAV:ordered-collections-supported precondition  7\n\
    \      DAV:ordering-modified postcondition  13\n      DAV:ordering-type property\
    \  6\n      DAV:ordering-type-set postcondition  7, 13\n      DAV:position-set\
    \ postcondition  9\n      DAV:segment-must-identify-member precondition  9\n \
    \     DAV:unordered ordering type  6\n      DAV:update-version-controlled-collection-members-ordered\n\
    \          postcondition  21\n      DAV:update-version-ordering-type postcondition\
    \  21\n   H\n      Headers\n         Ordering-Type  7\n         Position  9\n\
    \   M\n      Methods\n         ORDERPATCH  11\n   O\n      Ordered Collection\
    \  4\n      Ordering Semantics  5\n      Ordering-Type header  7\n      ORDERPATCH\
    \ method  11\n   P\n      Position header  9\n      Properties\n         DAV:ordering-type\
    \  6\n   S\n      Server-Maintained Ordering  5\n   U\n      Unordered Collection\
    \  4\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jim Whitehead\n   UC Santa Cruz, Dept. of Computer Science\n\
    \   1156 High Street\n   Santa Cruz, CA  95064\n   US\n   EMail: ejw@cse.ucsc.edu\n\
    \   Julian F. Reschke, Ed.\n   greenbytes GmbH\n   Salzmannstrasse 152\n   Muenster,\
    \ NW  48159\n   Germany\n   Phone: +49 251 2807760\n   Fax:   +49 251 2807761\n\
    \   EMail: julian.reschke@greenbytes.de\n   URI:   http://greenbytes.de/tech/webdav/\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2003).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assignees.\n\
    \   This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
