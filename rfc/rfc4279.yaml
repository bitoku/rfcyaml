- title: __initial_text__
  contents:
  - '     Pre-Shared Key Ciphersuites for Transport Layer Security (TLS)

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies three sets of new ciphersuites for the\n\
    \   Transport Layer Security (TLS) protocol to support authentication\n   based\
    \ on pre-shared keys (PSKs).  These pre-shared keys are symmetric\n   keys, shared\
    \ in advance among the communicating parties.  The first\n   set of ciphersuites\
    \ uses only symmetric key operations for\n   authentication.  The second set uses\
    \ a Diffie-Hellman exchange\n   authenticated with a pre-shared key, and the third\
    \ set combines\n   public key authentication of the server with pre-shared key\n\
    \   authentication of the client.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Applicability Statement ....................................3\n  \
    \    1.2. Conventions Used in This Document ..........................4\n   2.\
    \ PSK Key Exchange Algorithm ......................................4\n   3. DHE_PSK\
    \ Key Exchange Algorithm ..................................6\n   4. RSA_PSK Key\
    \ Exchange Algorithm ..................................7\n   5. Conformance Requirements\
    \ ........................................8\n      5.1. PSK Identity Encoding\
    \ ......................................8\n      5.2. Identity Hint ..............................................9\n\
    \      5.3. Requirements for TLS Implementations .......................9\n  \
    \    5.4. Requirements for Management Interfaces .....................9\n   6.\
    \ IANA Considerations ............................................10\n   7. Security\
    \ Considerations ........................................10\n      7.1. Perfect\
    \ Forward Secrecy (PFS) .............................10\n      7.2. Brute-Force\
    \ and Dictionary Attacks ........................10\n      7.3. Identity Privacy\
    \ ..........................................11\n      7.4. Implementation Notes\
    \ ......................................11\n   8. Acknowledgements ...............................................11\n\
    \   9. References .....................................................12\n  \
    \    9.1. Normative References ......................................12\n    \
    \  9.2. Informative References ....................................12\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Usually, TLS uses public key certificates [TLS] or Kerberos\
    \ [KERB]\n   for authentication.  This document describes how to use symmetric\n\
    \   keys (later called pre-shared keys or PSKs), shared in advance among\n   the\
    \ communicating parties, to establish a TLS connection.\n   There are basically\
    \ two reasons why one might want to do this:\n   o  First, using pre-shared keys\
    \ can, depending on the ciphersuite,\n      avoid the need for public key operations.\
    \  This is useful if TLS\n      is used in performance-constrained environments\
    \ with limited CPU\n      power.\n   o  Second, pre-shared keys may be more convenient\
    \ from a key\n      management point of view.  For instance, in closed environments\n\
    \      where the connections are mostly configured manually in advance,\n    \
    \  it may be easier to configure a PSK than to use certificates.\n      Another\
    \ case is when the parties already have a mechanism for\n      setting up a shared\
    \ secret key, and that mechanism could be used\n      to \"bootstrap\" a key for\
    \ authenticating a TLS connection.\n   This document specifies three sets of new\
    \ ciphersuites for TLS.\n   These ciphersuites use new key exchange algorithms,\
    \ and reuse\n   existing cipher and MAC algorithms from [TLS] and [AES].  A summary\n\
    \   of these ciphersuites is shown below.\n      CipherSuite                 \
    \       Key Exchange  Cipher       Hash\n      TLS_PSK_WITH_RC4_128_SHA      \
    \     PSK           RC4_128       SHA\n      TLS_PSK_WITH_3DES_EDE_CBC_SHA   \
    \   PSK           3DES_EDE_CBC  SHA\n      TLS_PSK_WITH_AES_128_CBC_SHA      \
    \ PSK           AES_128_CBC   SHA\n      TLS_PSK_WITH_AES_256_CBC_SHA       PSK\
    \           AES_256_CBC   SHA\n      TLS_DHE_PSK_WITH_RC4_128_SHA       DHE_PSK\
    \       RC4_128       SHA\n      TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA  DHE_PSK  \
    \     3DES_EDE_CBC  SHA\n      TLS_DHE_PSK_WITH_AES_128_CBC_SHA   DHE_PSK    \
    \   AES_128_CBC   SHA\n      TLS_DHE_PSK_WITH_AES_256_CBC_SHA   DHE_PSK      \
    \ AES_256_CBC   SHA\n      TLS_RSA_PSK_WITH_RC4_128_SHA       RSA_PSK       RC4_128\
    \       SHA\n      TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA  RSA_PSK       3DES_EDE_CBC\
    \  SHA\n      TLS_RSA_PSK_WITH_AES_128_CBC_SHA   RSA_PSK       AES_128_CBC   SHA\n\
    \      TLS_RSA_PSK_WITH_AES_256_CBC_SHA   RSA_PSK       AES_256_CBC   SHA\n  \
    \ The ciphersuites in Section 2 (with PSK key exchange algorithm) use\n   only\
    \ symmetric key algorithms and are thus especially suitable for\n   performance-constrained\
    \ environments.\n   The ciphersuites in Section 3 (with DHE_PSK key exchange algorithm)\n\
    \   use a PSK to authenticate a Diffie-Hellman exchange.  These\n   ciphersuites\
    \ protect against dictionary attacks by passive\n   eavesdroppers (but not active\
    \ attackers) and also provide Perfect\n   Forward Secrecy (PFS).\n   The ciphersuites\
    \ in Section 4 (with RSA_PSK key exchange algorithm)\n   combine public-key-based\
    \ authentication of the server (using RSA and\n   certificates) with mutual authentication\
    \ using a PSK.\n"
- title: 1.1.  Applicability Statement
  contents:
  - "1.1.  Applicability Statement\n   The ciphersuites defined in this document are\
    \ intended for a rather\n   limited set of applications, usually involving only\
    \ a very small\n   number of clients and servers.  Even in such environments,\
    \ other\n   alternatives may be more appropriate.\n   If the main goal is to avoid\
    \ Public-Key Infrastructures (PKIs),\n   another possibility worth considering\
    \ is using self-signed\n   certificates with public key fingerprints.  Instead\
    \ of manually\n   configuring a shared secret in, for instance, some configuration\n\
    \   file, a fingerprint (hash) of the other party's public key (or\n   certificate)\
    \ could be placed there instead.\n   It is also possible to use the SRP (Secure\
    \ Remote Password)\n   ciphersuites for shared secret authentication [SRP].  SRP\
    \ was\n   designed to be used with passwords, and it incorporates protection\n\
    \   against dictionary attacks.  However, it is computationally more\n   expensive\
    \ than the PSK ciphersuites in Section 2.\n"
- title: 1.2.  Conventions Used in This Document
  contents:
  - "1.2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [KEYWORDS].\n"
- title: 2.  PSK Key Exchange Algorithm
  contents:
  - "2.  PSK Key Exchange Algorithm\n   This section defines the PSK key exchange\
    \ algorithm and associated\n   ciphersuites.  These ciphersuites use only symmetric\
    \ key algorithms.\n   It is assumed that the reader is familiar with the ordinary\
    \ TLS\n   handshake, shown below.  The elements in parenthesis are not included\n\
    \   when the PSK key exchange algorithm is used, and \"*\" indicates a\n   situation-dependent\
    \ message that is not always sent.\n      Client                             \
    \                  Server\n      ------                                      \
    \         ------\n      ClientHello                  -------->\n             \
    \                                         ServerHello\n                      \
    \                              (Certificate)\n                               \
    \                ServerKeyExchange*\n                                        \
    \     (CertificateRequest)\n                                   <--------     \
    \ ServerHelloDone\n      (Certificate)\n      ClientKeyExchange\n      (CertificateVerify)\n\
    \      ChangeCipherSpec\n      Finished                     -------->\n      \
    \                                           ChangeCipherSpec\n               \
    \                    <--------             Finished\n      Application Data  \
    \           <------->     Application Data\n   The client indicates its willingness\
    \ to use pre-shared key\n   authentication by including one or more PSK ciphersuites\
    \ in the\n   ClientHello message.  If the TLS server also wants to use pre-shared\n\
    \   keys, it selects one of the PSK ciphersuites, places the selected\n   ciphersuite\
    \ in the ServerHello message, and includes an appropriate\n   ServerKeyExchange\
    \ message (see below).  The Certificate and\n   CertificateRequest payloads are\
    \ omitted from the response.\n   Both clients and servers may have pre-shared\
    \ keys with several\n   different parties.  The client indicates which key to\
    \ use by\n   including a \"PSK identity\" in the ClientKeyExchange message (note\n\
    \   that unlike in [SHAREDKEYS], the session_id field in ClientHello\n   message\
    \ keeps its usual meaning).  To help the client in selecting\n   which identity\
    \ to use, the server can provide a \"PSK identity hint\"\n   in the ServerKeyExchange\
    \ message.  If no hint is provided, the\n   ServerKeyExchange message is omitted.\
    \  See Section 5 for a more\n   detailed description of these fields.\n   The\
    \ format of the ServerKeyExchange and ClientKeyExchange messages is\n   shown\
    \ below.\n      struct {\n          select (KeyExchangeAlgorithm) {\n        \
    \      /* other cases for rsa, diffie_hellman, etc. */\n              case psk:\
    \  /* NEW */\n                  opaque psk_identity_hint<0..2^16-1>;\n       \
    \   };\n      } ServerKeyExchange;\n      struct {\n          select (KeyExchangeAlgorithm)\
    \ {\n              /* other cases for rsa, diffie_hellman, etc. */\n         \
    \     case psk:   /* NEW */\n                  opaque psk_identity<0..2^16-1>;\n\
    \          } exchange_keys;\n      } ClientKeyExchange;\n   The premaster secret\
    \ is formed as follows: if the PSK is N octets\n   long, concatenate a uint16\
    \ with the value N, N zero octets, a second\n   uint16 with the value N, and the\
    \ PSK itself.\n      Note 1: All the ciphersuites in this document share the same\n\
    \      general structure for the premaster secret, namely,\n         struct {\n\
    \             opaque other_secret<0..2^16-1>;\n             opaque psk<0..2^16-1>;\n\
    \         };\n      Here \"other_secret\" either is zeroes (plain PSK case) or\
    \ comes\n      from the Diffie-Hellman or RSA exchange (DHE_PSK and RSA_PSK,\n\
    \      respectively).  See Sections 3 and 4 for a more detailed\n      description.\n\
    \      Note 2: Using zeroes for \"other_secret\" effectively means that\n    \
    \  only the HMAC-SHA1 part (but not the HMAC-MD5 part) of the TLS PRF\n      is\
    \ used when constructing the master secret.  This was considered\n      more elegant\
    \ from an analytical viewpoint than, for instance,\n      using the same key for\
    \ both the HMAC-MD5 and HMAC-SHA1 parts.  See\n      [KRAWCZYK] for a more detailed\
    \ rationale.\n   The TLS handshake is authenticated using the Finished messages\
    \ as\n   usual.\n   If the server does not recognize the PSK identity, it MAY\
    \ respond\n   with an \"unknown_psk_identity\" alert message.  Alternatively,\
    \ if the\n   server wishes to hide the fact that the PSK identity was not known,\n\
    \   it MAY continue the protocol as if the PSK identity existed but the\n   key\
    \ was incorrect: that is, respond with a \"decrypt_error\" alert.\n"
- title: 3.  DHE_PSK Key Exchange Algorithm
  contents:
  - "3.  DHE_PSK Key Exchange Algorithm\n   This section defines additional ciphersuites\
    \ that use a PSK to\n   authenticate a Diffie-Hellman exchange.  These ciphersuites\
    \ give some\n   additional protection against dictionary attacks and also provide\n\
    \   Perfect Forward Secrecy (PFS).  See Section 7 for discussion of\n   related\
    \ security considerations.\n   When these ciphersuites are used, the ServerKeyExchange\
    \ and\n   ClientKeyExchange messages also include the Diffie-Hellman\n   parameters.\
    \  The PSK identity and identity hint fields have the same\n   meaning as in the\
    \ previous section (note that the ServerKeyExchange\n   message is always sent,\
    \ even if no PSK identity hint is provided).\n   The format of the ServerKeyExchange\
    \ and ClientKeyExchange messages is\n   shown below.\n      struct {\n       \
    \   select (KeyExchangeAlgorithm) {\n              /* other cases for rsa, diffie_hellman,\
    \ etc. */\n              case diffie_hellman_psk:  /* NEW */\n               \
    \   opaque psk_identity_hint<0..2^16-1>;\n                  ServerDHParams params;\n\
    \          };\n      } ServerKeyExchange;\n      struct {\n          select (KeyExchangeAlgorithm)\
    \ {\n              /* other cases for rsa, diffie_hellman, etc. */\n         \
    \     case diffie_hellman_psk:   /* NEW */\n                  opaque psk_identity<0..2^16-1>;\n\
    \                  ClientDiffieHellmanPublic public;\n          } exchange_keys;\n\
    \      } ClientKeyExchange;\n   The premaster secret is formed as follows.  First,\
    \ perform the\n   Diffie-Hellman computation in the same way as for other\n  \
    \ Diffie-Hellman-based ciphersuites in [TLS].  Let Z be the value\n   produced\
    \ by this computation (with leading zero bytes stripped as in\n   other Diffie-Hellman-based\
    \ ciphersuites).  Concatenate a uint16\n   containing the length of Z (in octets),\
    \ Z itself, a uint16 containing\n   the length of the PSK (in octets), and the\
    \ PSK itself.\n   This corresponds to the general structure for the premaster\
    \ secrets\n   (see Note 1 in Section 2) in this document, with \"other_secret\"\
    \n   containing Z.\n"
- title: 4.  RSA_PSK Key Exchange Algorithm
  contents:
  - "4.  RSA_PSK Key Exchange Algorithm\n   The ciphersuites in this section use RSA\
    \ and certificates to\n   authenticate the server, in addition to using a PSK.\n\
    \   As in normal RSA ciphersuites, the server must send a Certificate\n   message.\
    \  The format of the ServerKeyExchange and ClientKeyExchange\n   messages is shown\
    \ below.  If no PSK identity hint is provided, the\n   ServerKeyExchange message\
    \ is omitted.\n      struct {\n          select (KeyExchangeAlgorithm) {\n   \
    \           /* other cases for rsa, diffie_hellman, etc. */\n              case\
    \ rsa_psk:  /* NEW */\n                  opaque psk_identity_hint<0..2^16-1>;\n\
    \          };\n      } ServerKeyExchange;\n      struct {\n          select (KeyExchangeAlgorithm)\
    \ {\n              /* other cases for rsa, diffie_hellman, etc. */\n         \
    \     case rsa_psk:   /* NEW */\n                  opaque psk_identity<0..2^16-1>;\n\
    \                  EncryptedPreMasterSecret;\n          } exchange_keys;\n   \
    \   } ClientKeyExchange;\n   The EncryptedPreMasterSecret field sent from the\
    \ client to the server\n   contains a 2-byte version number and a 46-byte random\
    \ value,\n   encrypted using the server's RSA public key as described in Section\n\
    \   7.4.7.1 of [TLS].  The actual premaster secret is formed by both\n   parties\
    \ as follows: concatenate a uint16 with the value 48, the\n   2-byte version number\
    \ and the 46-byte random value, a uint16\n   containing the length of the PSK\
    \ (in octets), and the PSK itself.\n   (The premaster secret is thus 52 octets\
    \ longer than the PSK.)\n   This corresponds to the general structure for the\
    \ premaster secrets\n   (see Note 1 in Section 2) in this document, with \"other_secret\"\
    \n   containing both the 2-byte version number and the 46-byte random\n   value.\n\
    \   Neither the normal RSA ciphersuites nor these RSA_PSK ciphersuites\n   themselves\
    \ specify what the certificates contain (in addition to the\n   RSA public key),\
    \ or how the certificates are to be validated.  In\n   particular, it is possible\
    \ to use the RSA_PSK ciphersuites with\n   unvalidated self-signed certificates\
    \ to provide somewhat similar\n   protection against dictionary attacks, as the\
    \ DHE_PSK ciphersuites\n   define in Section 3.\n"
- title: 5.  Conformance Requirements
  contents:
  - "5.  Conformance Requirements\n   It is expected that different types of identities\
    \ are useful for\n   different applications running over TLS.  This document does\
    \ not\n   therefore mandate the use of any particular type of identity (such as\n\
    \   IPv4 address or Fully Qualified Domain Name (FQDN)).\n   However, the TLS\
    \ client and server clearly have to agree on the\n   identities and keys to be\
    \ used.  To improve interoperability, this\n   document places requirements on\
    \ how the identity is encoded in the\n   protocol, and what kinds of identities\
    \ and keys implementations have\n   to support.\n   The requirements for implementations\
    \ are divided into two categories,\n   requirements for TLS implementations and\
    \ management interfaces.  In\n   this context, \"TLS implementation\" refers to\
    \ a TLS library or module\n   that is intended to be used for several different\
    \ purposes, while\n   \"management interface\" would typically be implemented\
    \ by a particular\n   application that uses TLS.\n   This document does not specify\
    \ how the server stores the keys and\n   identities, or how exactly it finds the\
    \ key corresponding to the\n   identity it receives.  For instance, if the identity\
    \ is a domain\n   name, it might be appropriate to do a case-insensitive lookup.\
    \  It is\n   RECOMMENDED that before looking up the key, the server processes\
    \ the\n   PSK identity with a stringprep profile [STRINGPREP] appropriate for\n\
    \   the identity in question (such as Nameprep [NAMEPREP] for components\n   of\
    \ domain names or SASLprep for usernames [SASLPREP]).\n"
- title: 5.1.  PSK Identity Encoding
  contents:
  - "5.1.  PSK Identity Encoding\n   The PSK identity MUST be first converted to a\
    \ character string, and\n   then encoded to octets using UTF-8 [UTF8].  For instance,\n\
    \   o  IPv4 addresses are sent as dotted-decimal strings (e.g.,\n      \"192.0.2.1\"\
    ), not as 32-bit integers in network byte order.\n   o  Domain names are sent\
    \ in their usual text form [DNS] (e.g.,\n      \"www.example.com\" or \"embedded\\\
    .dot.example.net\"), not in DNS\n      protocol format.\n   o  X.500 Distinguished\
    \ Names are sent in their string representation\n      [LDAPDN], not as BER-encoded\
    \ ASN.1.\n   This encoding is clearly not optimal for many types of identities.\n\
    \   It was chosen to avoid identity-type-specific parsing and encoding\n   code\
    \ in implementations where the identity is configured by a person\n   using some\
    \ kind of management interface.  Requiring such identity-\n   type-specific code\
    \ would also increase the chances for\n   interoperability problems resulting\
    \ from different implementations\n   supporting different identity types.\n"
- title: 5.2.  Identity Hint
  contents:
  - "5.2.  Identity Hint\n   In the absence of an application profile specification\
    \ specifying\n   otherwise, servers SHOULD NOT provide an identity hint and clients\n\
    \   MUST ignore the identity hint field.  Applications that do use this\n   field\
    \ MUST specify its contents, how the value is chosen by the TLS\n   server, and\
    \ what the TLS client is expected to do with the value.\n"
- title: 5.3.  Requirements for TLS Implementations
  contents:
  - "5.3.  Requirements for TLS Implementations\n   TLS implementations supporting\
    \ these ciphersuites MUST support\n   arbitrary PSK identities up to 128 octets\
    \ in length, and arbitrary\n   PSKs up to 64 octets in length.  Supporting longer\
    \ identities and\n   keys is RECOMMENDED.\n"
- title: 5.4.  Requirements for Management Interfaces
  contents:
  - "5.4.  Requirements for Management Interfaces\n   In the absence of an application\
    \ profile specification specifying\n   otherwise, a management interface for entering\
    \ the PSK and/or PSK\n   identity MUST support the following:\n   o  Entering\
    \ PSK identities consisting of up to 128 printable Unicode\n      characters.\
    \  Supporting as wide a character repertoire and as long\n      identities as\
    \ feasible is RECOMMENDED.\n   o  Entering PSKs up to 64 octets in length as ASCII\
    \ strings and in\n      hexadecimal encoding.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   IANA does not currently have a registry for TLS ciphersuite\
    \ or alert\n   numbers, so there are no IANA actions associated with this document.\n\
    \   For easier reference in the future, the ciphersuite numbers defined\n   in\
    \ this document are summarized below.\n      CipherSuite TLS_PSK_WITH_RC4_128_SHA\
    \          = { 0x00, 0x8A };\n      CipherSuite TLS_PSK_WITH_3DES_EDE_CBC_SHA\
    \     = { 0x00, 0x8B };\n      CipherSuite TLS_PSK_WITH_AES_128_CBC_SHA      =\
    \ { 0x00, 0x8C };\n      CipherSuite TLS_PSK_WITH_AES_256_CBC_SHA      = { 0x00,\
    \ 0x8D };\n      CipherSuite TLS_DHE_PSK_WITH_RC4_128_SHA      = { 0x00, 0x8E\
    \ };\n      CipherSuite TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA = { 0x00, 0x8F };\n\
    \      CipherSuite TLS_DHE_PSK_WITH_AES_128_CBC_SHA  = { 0x00, 0x90 };\n     \
    \ CipherSuite TLS_DHE_PSK_WITH_AES_256_CBC_SHA  = { 0x00, 0x91 };\n      CipherSuite\
    \ TLS_RSA_PSK_WITH_RC4_128_SHA      = { 0x00, 0x92 };\n      CipherSuite TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA\
    \ = { 0x00, 0x93 };\n      CipherSuite TLS_RSA_PSK_WITH_AES_128_CBC_SHA  = { 0x00,\
    \ 0x94 };\n      CipherSuite TLS_RSA_PSK_WITH_AES_256_CBC_SHA  = { 0x00, 0x95\
    \ };\n   This document also defines a new TLS alert message,\n   unknown_psk_identity(115).\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   As with all schemes involving shared keys, special\
    \ care should be\n   taken to protect the shared values and to limit their exposure\
    \ over\n   time.\n"
- title: 7.1.  Perfect Forward Secrecy (PFS)
  contents:
  - "7.1.  Perfect Forward Secrecy (PFS)\n   The PSK and RSA_PSK ciphersuites defined\
    \ in this document do not\n   provide Perfect Forward Secrecy (PFS).  That is,\
    \ if the shared secret\n   key (in PSK ciphersuites), or both the shared secret\
    \ key and the RSA\n   private key (in RSA_PSK ciphersuites), is somehow compromised,\
    \ an\n   attacker can decrypt old conversations.\n   The DHE_PSK ciphersuites\
    \ provide Perfect Forward Secrecy if a fresh\n   Diffie-Hellman private key is\
    \ generated for each handshake.\n"
- title: 7.2.  Brute-Force and Dictionary Attacks
  contents:
  - "7.2.  Brute-Force and Dictionary Attacks\n   Use of a fixed shared secret of\
    \ limited entropy (for example, a PSK\n   that is relatively short, or was chosen\
    \ by a human and thus may\n   contain less entropy than its length would imply)\
    \ may allow an\n   attacker to perform a brute-force or dictionary attack to recover\
    \ the\n   secret.  This may be either an off-line attack (against a captured\n\
    \   TLS handshake messages) or an on-line attack where the attacker\n   attempts\
    \ to connect to the server and tries different keys.\n   For the PSK ciphersuites,\
    \ an attacker can get the information\n   required for an off-line attack by eavesdropping\
    \ on a TLS handshake,\n   or by getting a valid client to attempt connection with\
    \ the attacker\n   (by tricking the client to connect to the wrong address, or\
    \ by\n   intercepting a connection attempt to the correct address, for\n   instance).\n\
    \   For the DHE_PSK ciphersuites, an attacker can obtain the information\n   by\
    \ getting a valid client to attempt connection with the attacker.\n   Passive\
    \ eavesdropping alone is not sufficient.\n   For the RSA_PSK ciphersuites, only\
    \ the server (authenticated using\n   RSA and certificates) can obtain sufficient\
    \ information for an\n   off-line attack.\n   It is RECOMMENDED that implementations\
    \ that allow the administrator\n   to manually configure the PSK also provide\
    \ a functionality for\n   generating a new random PSK, taking [RANDOMNESS] into\
    \ account.\n"
- title: 7.3.  Identity Privacy
  contents:
  - "7.3.  Identity Privacy\n   The PSK identity is sent in cleartext.  Although using\
    \ a user name or\n   other similar string as the PSK identity is the most straightforward\n\
    \   option, it may lead to problems in some environments since an\n   eavesdropper\
    \ is able to identify the communicating parties.  Even\n   when the identity does\
    \ not reveal any information itself, reusing the\n   same identity over time may\
    \ eventually allow an attacker to perform\n   traffic analysis to identify the\
    \ parties.  It should be noted that\n   this is no worse than client certificates,\
    \ since they are also sent\n   in cleartext.\n"
- title: 7.4.  Implementation Notes
  contents:
  - "7.4.  Implementation Notes\n   The implementation notes in [TLS11] about correct\
    \ implementation and\n   use of RSA (including Section 7.4.7.1) and Diffie-Hellman\
    \ (including\n   Appendix F.1.1.3) apply to the DHE_PSK and RSA_PSK ciphersuites\
    \ as\n   well.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   The protocol defined in this document is heavily based\
    \ on work by Tim\n   Dierks and Peter Gutmann, and borrows some text from [SHAREDKEYS]\
    \ and\n   [AES].  The DHE_PSK and RSA_PSK ciphersuites are based on earlier\n\
    \   work in [KEYEX].\n   Valuable feedback was also provided by Bernard Aboba,\
    \ Lakshminath\n   Dondeti, Philip Ginzboorg, Peter Gutmann, Sam Hartman, Russ\
    \ Housley,\n   David Jablon, Nikos Mavroyanopoulos, Bodo Moeller, Eric Rescorla,\
    \ and\n   Mika Tervonen.\n   When the first version of this document was almost\
    \ ready, the authors\n   learned that something similar had been proposed already\
    \ in 1996\n   [PASSAUTH].  However, this document is not intended for web password\n\
    \   authentication, but rather for other uses of TLS.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [AES]        Chown, P., \"Advanced Encryption\
    \ Standard (AES)\n                Ciphersuites for Transport Layer Security (TLS)\"\
    , RFC\n                3268, June 2002.\n   [KEYWORDS]   Bradner, S., \"Key words\
    \ for use in RFCs to Indicate\n                Requirement Levels\", BCP 14, RFC\
    \ 2119, March 1997.\n   [RANDOMNESS] Eastlake, D., 3rd, Schiller, J., and S. Crocker,\n\
    \                \"Randomness Requirements for Security\", BCP 106, RFC\n    \
    \            4086, June 2005.\n   [TLS]        Dierks, T. and C. Allen, \"The\
    \ TLS Protocol Version 1.0\",\n                RFC 2246, January 1999.\n   [UTF8]\
    \       Yergeau, F., \"UTF-8, a transformation format of ISO\n               \
    \ 10646\", STD 63, RFC 3629, November 2003.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [DNS]        Mockapetris, P., \"Domain names\
    \ - implementation and\n                specification\", STD 13, RFC 1035, November\
    \ 1987.\n   [KERB]       Medvinsky, A. and M. Hur, \"Addition of Kerberos Cipher\n\
    \                Suites to Transport Layer Security (TLS)\", RFC 2712,\n     \
    \           October 1999.\n   [KEYEX]      Badra, M., Cherkaoui, O., Hajjeh, I.\
    \ and A. Serhrouchni,\n                \"Pre-Shared-Key key Exchange methods for\
    \ TLS\", Work in\n                Progress, August 2004.\n   [KRAWCZYK]   Krawczyk,\
    \ H., \"Re: TLS shared keys PRF\", message on\n                ietf-tls@lists.certicom.com\
    \ mailing list 2004-01-13,\n                http://www.imc.org/ietf-tls/mail-archive/msg04098.html.\n\
    \   [LDAPDN]     Zeilenga, K., \"LDAP: String Representation of\n            \
    \    Distinguished Names\", Work in Progress, February 2005.\n   [NAMEPREP]  \
    \ Hoffman, P. and M. Blanchet, \"Nameprep: A Stringprep\n                Profile\
    \ for Internationalized Domain Names (IDN)\", RFC\n                3491, March\
    \ 2003.\n   [PASSAUTH]   Simon, D., \"Addition of Shared Key Authentication to\n\
    \                Transport Layer Security (TLS)\", Work in Progress,\n       \
    \         November 1996.\n   [SASLPREP]   Zeilenga, K., \"SASLprep: Stringprep\
    \ Profile for User\n                Names and Passwords\", RFC 4013, February\
    \ 2005.\n   [SHAREDKEYS] Gutmann, P., \"Use of Shared Keys in the TLS Protocol\"\
    ,\n                Work in Progress, October 2003.\n   [SRP]        Taylor, D.,\
    \ Wu, T., Mavroyanopoulos, N. and T. Perrin,\n                \"Using SRP for\
    \ TLS Authentication\", Work in Progress,\n                March 2005.\n   [STRINGPREP]\
    \ Hoffman, P. and M. Blanchet, \"Preparation of\n                Internationalized\
    \ Strings (\"stringprep\")\", RFC 3454,\n                December 2002.\n   [TLS11]\
    \      Dierks, T. and E. Rescorla, \"The TLS Protocol Version\n              \
    \  1.1\", Work in Progress, June 2005.\n"
- title: Authors' and Contributors' Addresses
  contents:
  - "Authors' and Contributors' Addresses\n   Pasi Eronen\n   Nokia Research Center\n\
    \   P.O. Box 407\n   FIN-00045 Nokia Group\n   Finland\n   EMail: pasi.eronen@nokia.com\n\
    \   Hannes Tschofenig\n   Siemens\n   Otto-Hahn-Ring 6\n   Munich, Bayern  81739\n\
    \   Germany\n   EMail: Hannes.Tschofenig@siemens.com\n   Mohamad Badra\n   ENST\
    \ Paris\n   46 rue Barrault\n   75634 Paris\n   France\n   EMail: Mohamad.Badra@enst.fr\n\
    \   Omar Cherkaoui\n   UQAM University\n   Montreal (Quebec)\n   Canada\n   EMail:\
    \ cherkaoui.omar@uqam.ca\n   Ibrahim Hajjeh\n   ESRGroups\n   17 passage Barrault\n\
    \   75013 Paris\n   France\n   EMail: Ibrahim.Hajjeh@esrgroups.org\n   Ahmed Serhrouchni\n\
    \   ENST Paris\n   46 rue Barrault\n   75634 Paris\n   France\n   EMail: Ahmed.Serhrouchni@enst.fr\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
