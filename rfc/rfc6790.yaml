- contents:
  - '              The Use of Entropy Labels in MPLS Forwarding

    '
  title: __initial_text__
- contents:
  - "Abstract\n   Load balancing is a powerful tool for engineering traffic across
    a\n   network.  This memo suggests ways of improving load balancing across\n   MPLS
    networks using the concept of \"entropy labels\".  It defines the\n   concept,
    describes why entropy labels are useful, enumerates\n   properties of entropy
    labels that allow maximal benefit, and shows\n   how they can be signaled and
    used for various applications.  This\n   document updates RFCs 3031, 3107, 3209,
    and 5036.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6790.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Conventions Used ...........................................4\n      1.2.
    Motivation .................................................6\n   2. Approaches
    ......................................................7\n   3. Entropy Labels
    and Their Structure ..............................8\n   4. Data Plane Processing
    of Entropy Labels .........................9\n      4.1. Egress LSR .................................................9\n
    \     4.2. Ingress LSR ...............................................10\n      4.3.
    Transit LSR ...............................................11\n      4.4. Penultimate
    Hop LSR .......................................12\n   5. Signaling for Entropy
    Labels ...................................12\n      5.1. LDP Signaling .............................................12\n
    \          5.1.1. Processing the ELC TLV .............................13\n      5.2.
    BGP Signaling .............................................13\n      5.3. RSVP-TE
    Signaling .........................................14\n      5.4. Multicast LSPs
    and Entropy Labels .........................15\n   6. Operations, Administration,
    and Maintenance (OAM) and\n      Entropy Labels .................................................15\n
    \  7. MPLS-TP and Entropy Labels .....................................16\n   8.
    Entropy Labels in Various Scenarios ............................16\n      8.1.
    LDP Tunnel ................................................17\n      8.2. LDP
    over RSVP-TE ..........................................20\n      8.3. MPLS Applications
    .........................................20\n   9. Security Considerations ........................................20\n
    \  10. IANA Considerations ...........................................21\n      10.1.
    Reserved Label for ELI ...................................21\n      10.2. LDP
    Entropy Label Capability TLV .........................21\n      10.3. BGP Entropy
    Label Capability Attribute ...................21\n      10.4. RSVP-TE Entropy
    Label Capability Flag ....................22\n   11. Acknowledgments ...............................................22\n
    \  12. References ....................................................22\n      12.1.
    Normative References .....................................22\n      12.2. Informative
    References ...................................23\n   Appendix A. Applicability
    of LDP Entropy Label Capability TLV .....24\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Load balancing, or multi-pathing, is an attempt to balance
    traffic\n   across a network by allowing the traffic to use multiple paths.  Load\n
    \  balancing has several benefits: it eases capacity planning, it can\n   help
    absorb traffic surges by spreading them across multiple paths,\n   and it allows
    better resilience by offering alternate paths in the\n   event of a link or node
    failure.\n   As providers scale their networks, they use several techniques to\n
    \  achieve greater bandwidth between nodes.  Two widely used techniques\n   are:
    Link Aggregation Group (LAG) and Equal Cost Multi-Path (ECMP).\n   LAG is used
    to bond together several physical circuits between two\n   adjacent nodes so they
    appear to higher-layer protocols as a single,\n   higher-bandwidth \"virtual\"
    pipe.  ECMP is used between two nodes\n   separated by one or more hops, to allow
    load balancing over several\n   shortest paths in the network.  This is typically
    obtained by\n   arranging IGP metrics such that there are several equal cost paths\n
    \  between source-destination pairs.  Both of these techniques may, and\n   often
    do, coexist in differing parts of a given provider's network,\n   depending on
    various choices made by the provider.\n   A very important requirement when load
    balancing is that packets\n   belonging to a given \"flow\" must be mapped to
    the same path, i.e.,\n   the same exact sequence of links across the network.
    \ This is to\n   avoid jitter, latency, and reordering issues for the flow.  What\n
    \  constitutes a flow varies considerably.  A common example of a flow\n   is
    a TCP session.  Other examples are a Layer 2 Tunneling Protocol\n   (L2TP) session
    corresponding to a given broadband user or traffic\n   within an ATM virtual circuit.\n
    \  To meet this requirement, a node uses certain fields, termed \"keys\",\n   within
    a packet's header as input to a load-balancing function\n   (typically a hash
    function) that selects the path for all packets in\n   a given flow.  The keys
    chosen for the load-balancing function depend\n   on the packet type; a typical
    set (for IP packets) is the IP source\n   and destination addresses, the protocol
    type, and (for TCP and UDP\n   traffic) the source and destination port numbers.
    \ An overly\n   conservative choice of fields may lead to many flows mapping to
    the\n   same hash value (and consequently poorer load balancing); an overly\n
    \  aggressive choice may map a flow to multiple values, potentially\n   violating
    the above requirement.\n   For MPLS networks, most of the same principles (and
    benefits) apply.\n   However, finding useful keys in a packet for the purpose
    of load\n   balancing can be more of a challenge.  In many cases, MPLS\n   encapsulation
    may require fairly deep inspection of packets to find\n   these keys at transit
    Label Switching Routers (LSRs).\n   One way to eliminate the need for this deep
    inspection is to have the\n   ingress LSR of an MPLS Label Switched Path extract
    the appropriate\n   keys from a given packet, input them to its load-balancing
    function,\n   and place the result in an additional label, termed the \"entropy\n
    \  label\", as part of the MPLS label stack it pushes onto that packet.\n   The
    entire label stack of the MPLS packet can then be used by transit\n   LSRs to
    perform load balancing, as the entropy label introduces the\n   right level of
    \"entropy\" into the label stack.\n   There are five key reasons why this is beneficial:\n
    \  1.  At the ingress LSR, MPLS encapsulation hasn't yet occurred, so\n       deep
    inspection is not necessary.\n   2.  The ingress LSR has more context and information
    about incoming\n       packets than transit LSRs.\n   3.  Ingress LSRs usually
    operate at lower bandwidths than transit\n       LSRs, allowing them to do more
    work per packet.\n   4.  Transit LSRs do not need to perform deep packet inspection
    and\n       can load balance effectively using only a packet's MPLS label\n       stack.\n
    \  5.  Transit LSRs, not having the full context that an ingress LSR\n       does,
    have the hard choice between potentially misinterpreting\n       fields in a packet
    as valid keys for load balancing (causing\n       packet-ordering problems) or
    adopting a conservative approach\n       (giving rise to sub-optimal load balancing).
    \ Entropy labels\n       relieve them of making this choice.\n   This memo describes
    why entropy labels are needed and defines the\n   properties of entropy labels,
    in particular, how they are generated\n   and received and the expected behavior
    of transit LSRs.  Finally, it\n   describes in general how signaling works and
    what needs to be\n   signaled as well as specifics for the signaling of entropy
    labels for\n   LDP [RFC5036], BGP [RFC4271], and RSVP - Traffic Engineering\n
    \  (RSVP-TE) [RFC3209].\n"
  - contents:
    - "1.1.  Conventions Used\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
      and \"OPTIONAL\" in this\n   document are to be interpreted as described in
      [RFC2119].\n   The following acronyms/initialisms are used:\n      BoS: Bottom
      of Stack\n      CE: Customer Edge\n      ECMP: Equal Cost Multi-Path\n      EL:
      Entropy Label\n      ELC: Entropy Label Capability\n      ELI: Entropy Label
      Indicator\n      FEC: Forwarding Equivalence Class\n      LAG: Link Aggregation
      Group\n      LER: Label Edge Router\n      LSP: Label Switched Path\n      LSR:
      Label Switching Router\n      PE: Provider Edge\n      PW: Pseudowire\n      PHP:
      Penultimate Hop Popping\n      TC: Traffic Class\n      TTL: Time to Live\n
      \     UHP: Ultimate Hop Popping\n      VPLS: Virtual Private LAN (Local Area
      Network) Service\n      VPN: Virtual Private Network\n   The term \"ingress
      LSR\" (or \"egress LSR\") is used interchangeably with\n   \"ingress LER\" (or
      \"egress LER\").  The term \"application\" throughout\n   the text refers to
      an MPLS application (such as a VPN or VPLS).\n   A label stack (say of three
      labels) is denoted by <L1, L2, L3>, where\n   L1 is the \"outermost\" label
      and L3 the \"innermost\" (closest to the\n   payload).  Packet flows are depicted
      left to right, and signaling is\n   shown right to left (unless otherwise indicated).\n
      \  The term \"label\" is used both for the entire 32-bit label stack entry\n
      \  and the 20-bit label field within a label stack entry.  It should be\n   clear
      from the context which is meant.\n"
    title: 1.1.  Conventions Used
  - contents:
    - "1.2.  Motivation\n   MPLS is a very successful generic forwarding substrate
      that\n   transports several dozen types of protocols, most notably: IP, PWs,\n
      \  VPLS, and IP VPNs.  Within each type of protocol, there typically\n   exist
      several variants, each with a different set of load-balancing\n   keys, e.g.,
      IPv4, IPv6, IPv6 in IPv4, etc. for IP and Ethernet; ATM,\n   Frame-Relay, etc.
      for PWs.  There are also several different types of\n   Ethernet over PW encapsulation,
      ATM over PW encapsulation, etc.\n   Finally, given the popularity of MPLS, it
      is likely that it will\n   continue to be extended to transport new protocols.\n
      \  Currently, each transit LSR along the path of a given LSP has to try\n   to
      infer the underlying protocol within an MPLS packet in order to\n   extract
      appropriate keys for load balancing.  Unfortunately, if the\n   transit LSR
      is unable to infer the MPLS packet's protocol (as is\n   often the case), it
      will typically use the topmost (or all) MPLS\n   labels in the label stack as
      keys for the load-balancing function.\n   The result may be an extremely inequitable
      distribution of traffic\n   across equal cost paths exiting that LSR.  This
      is because MPLS\n   labels are generally fairly coarse-grained forwarding labels
      that\n   typically describe a next hop, or provide some demultiplexing and/or\n
      \  forwarding function, and do not describe the packet's underlying\n   protocol.\n
      \  On the other hand, an ingress LSR (e.g., a PE router) has detailed\n   knowledge
      of a packet's contents, typically through a priori\n   configuration of the
      encapsulations that are expected at a given\n   PE-CE interface, (e.g., IPv4,
      IPv6, VPLS, etc.).  They may also have\n   more flexible forwarding hardware,
      depending on implementation\n   details.  PE routers need this information and
      these capabilities to:\n   a.  apply the required services for the CE;\n   b.
      \ discern the packet's Class of Service (CoS) forwarding treatment;\n   c.  apply
      filters to forward or block traffic to/from the CE;\n   d.  forward routing/control
      traffic to an onboard management\n       processor; and,\n   e.  load balance
      the traffic on its uplinks to transit LSRs (e.g., P\n       routers).\n   By
      knowing the expected encapsulation types, an ingress LSR router\n   can apply
      a more specific set of payload parsing routines to extract\n   the keys appropriate
      for a given protocol.  This allows for\n   significantly improved accuracy in
      determining the appropriate load-\n   balancing behavior for each protocol.\n
      \  If the ingress LSR were to capture the flow information so gathered\n   in
      a convenient form for downstream transit LSRs, transit LSRs could\n   remain
      completely oblivious to the contents of each MPLS packet and\n   use only the
      captured flow information to perform load balancing.  In\n   particular, there
      will be no reason to duplicate an ingress LSR's\n   complex packet/payload parsing
      functionality in a transit LSR.  This\n   will result in less complex transit
      LSRs, enabling them to more\n   easily scale to higher forwarding rates, larger
      port density, lower\n   power consumption, etc.  The idea in this memo is to
      capture this\n   flow information as a label, the so-called \"entropy label\".\n
      \  Ingress LSRs can also adapt more readily to new protocols and extract\n   the
      appropriate keys to use for load-balancing packets of those\n   protocols.  This
      means that deploying new protocols or services in\n   edge devices requires
      fewer concomitant changes in the core,\n   resulting in higher edge-service
      velocity and, at the same time, more\n   stable core networks.\n"
    title: 1.2.  Motivation
  title: 1.  Introduction
- contents:
  - "2.  Approaches\n   There are two main approaches to encoding load-balancing information\n
    \  in the label stack.  The first allocates multiple labels for a\n   particular
    Forwarding Equivalence Class (FEC).  These labels are\n   equivalent in terms
    of forwarding semantics, but having multiple\n   labels allows flexibility in
    assigning labels to flows belonging to\n   the same FEC.  This approach has the
    advantage that the label stack\n   has the same depth whether or not one uses
    label-based load\n   balancing; consequently, there is no change to forwarding
    operations\n   on transit and egress LSRs.  However, it has a major drawback in
    that\n   there is a significant increase in both signaling and forwarding\n   state.\n
    \  The other approach encodes the load-balancing information as an\n   additional
    label in the label stack, thus increasing the depth of the\n   label stack by
    one.  With this approach, there is minimal change to\n   signaling state for a
    FEC; also, there is no change in forwarding\n   operations in transit LSRs and
    no increase of forwarding state in any\n   LSR.  The only purpose of the additional
    label is to increase the\n   entropy in the label stack, so this is called an
    \"entropy label\".\n   This memo focuses solely on this approach.\n   This latter
    approach uses upstream-generated entropy labels, which\n   may conflict with downstream-allocated
    application labels.  There are\n   a few approaches to deal with this: 1) allocate
    a pair of labels for\n   each FEC, one that must have an entropy label below it
    and one that\n   must not; 2) use a label (the \"Entropy Label Indicator\") to
    indicate\n   that the next label is an entropy label; and 3) allow entropy labels\n
    \  only where there is no possible confusion.  The first doubles control\n   and
    data plane state in the network; the last is too restrictive.\n   The approach
    taken here is the second.  In making both the above\n   choices, the trade-off
    is to increase label stack depth rather than\n   control and data plane state
    in the network.\n   Finally, one may choose to associate ELs with MPLS tunnels
    (LSPs) or\n   with MPLS applications (e.g., VPNs).  (What this entails is described\n
    \  in later sections.)  We take the former approach, for the following\n   reasons:\n
    \  1.  There are a small number of tunneling protocols for MPLS, but a\n       large
    and growing number of applications.  Defining ELs on a\n       tunnel basis means
    simpler standards, lower development,\n       interoperability, and testing efforts.\n
    \  2.  As a consequence, there will be much less churn in the network as\n       new
    applications (services) are defined and deployed.\n   3.  Processing application
    labels in the data plane is more complex\n       than processing tunnel labels.
    \ Thus, it is preferable to burden\n       the latter rather than the former with
    EL processing.\n   4.  Associating ELs with tunnels makes it simpler to deal with\n
    \      hierarchy, be it LDP-over-RSVP-TE or Carrier's Carrier VPNs.\n       Each
    layer in the hierarchy can choose independently whether or\n       not they want
    ELs.\n   The cost of this approach is that ELIs will be mandatory; again, the\n
    \  trade-off is the size of the label stack.  To summarize, the net\n   increase
    in the label stack to use entropy labels is two: one\n   reserved label for the
    ELI and the entropy label itself.\n"
  title: 2.  Approaches
- contents:
  - "3.  Entropy Labels and Their Structure\n   An entropy label (as used here) is
    a label:\n   1.  that is not used for forwarding;\n   2.  that is not signaled;
    and\n   3.  whose only purpose in the label stack is to provide \"entropy\" to\n
    \      improve load balancing.\n   Entropy labels are generated by an ingress
    LSR, based entirely on\n   load-balancing information.  However, they MUST NOT
    have values in\n   the reserved label space (0-15) [RFC3032].\n   Since entropy
    labels are generated by an ingress LSR, an egress LSR\n   MUST be able to distinguish
    unambiguously between entropy labels and\n   application labels.  To accomplish
    this, it is REQUIRED that the\n   label immediately preceding an Entropy Label
    (EL) in the MPLS label\n   stack be an Entropy Label Indicator (ELI), where preceding
    means\n   closer to the top of the label stack (farther from bottom of stack\n
    \  indication).  The ELI is a reserved label with value 7.  How to set\n   values
    of the TTL, TC, and \"Bottom of Stack\" (BoS) fields [RFC3032]\n   for the ELI
    and for ELs is discussed in Section 4.2.\n   Entropy labels are useful for pseudowires
    [RFC4447].  [RFC6391]\n   explains how entropy labels can be used for pseudowires
    that are of\n   the RFC 4447 style and is therefore complementary to this memo,
    which\n   focuses on how entropy labels can be used for tunnels and thus for\n
    \  all other MPLS applications.\n"
  title: 3.  Entropy Labels and Their Structure
- contents:
  - '4.  Data Plane Processing of Entropy Labels

    '
  - contents:
    - "4.1.  Egress LSR\n   Suppose egress LSR Y is capable of processing entropy
      labels for a\n   tunnel.  Y indicates this to all ingresses via signaling (see\n
      \  Section 5).  Y MUST be prepared to deal both with packets with an\n   imposed
      EL and those without; the ELI will distinguish these cases.\n   If a particular
      ingress chooses not to impose an EL, Y's processing\n   of the received label
      stack (which might be empty) is as if Y chose\n   not to accept ELs.\n   If
      an ingress LSR X chooses to impose an EL, then Y will receive a\n   tunnel termination
      packet with label stack <TL, ELI, EL> <remaining\n   packet header>.  Y recognizes
      TL as the label it distributed to its\n   upstreams for the tunnel and pops
      it.  (Note that TL may be the\n   implicit null label, in which case it doesn't
      appear in the label\n   stack.)  Y then recognizes the ELI and pops two labels:
      the ELI and\n   the EL.  Y then processes the remaining packet header as normal;
      this\n   may require further processing of tunnel termination, perhaps with\n
      \  further ELI+EL pairs.  When processing the final tunnel termination,\n   Y
      MAY enqueue the packet based on that tunnel TL's or ELI's TC value\n   and MAY
      use the tunnel TL's or ELI's TTL to compute the TTL of the\n   remaining packet
      header.  The EL's TTL MUST be ignored.\n   If any ELI processed by Y has the
      BoS bit set, Y MUST discard the\n   packet and MAY log an error.  The EL's BoS
      bit will indicate whether\n   or not there are more labels in the stack.\n"
    title: 4.1.  Egress LSR
  - contents:
    - "4.2.  Ingress LSR\n   If an egress LSR Y indicates via signaling that it can
      process ELs on\n   a particular tunnel, an ingress LSR X can choose whether
      or not to\n   insert ELs for packets going into that tunnel.  Y MUST handle
      both\n   cases.\n   The steps that X performs to insert ELs are as follows:\n
      \  1.  On an incoming packet, identify the application to which the\n       packet
      belongs; based on this, pick appropriate fields as input\n       to the load-balancing
      function; apply the load-balancing function\n       to these input fields and
      let LB be the output.\n   2.  Determine the application label AL (if any).  Push
      <AL> onto the\n       packet.\n   3.  Based on the application, the load-balancing
      output LB and other\n       factors, determine the egress LSR Y, the tunnel
      to Y, the\n       specific interface to the next hop, and thus the tunnel label
      TL.\n       Use LB to generate the entropy label EL.\n   4.  If, for the chosen
      tunnel, Y has not indicated that it can\n       process ELs, push <TL> onto
      the packet.  If Y has indicated that\n       it can process ELs for the tunnel,
      push <TL, ELI, EL> onto the\n       packet.  X SHOULD put the same TTL and TC
      fields for the ELI as\n       it does for TL.  X MAY choose different values
      for the TTL and TC\n       fields if it is known that the ELI will not be exposed
      as the top\n       label at any point along the LSP (as may happen in cases
      where\n       PHP is used and the ELI and EL are not stripped at the\n       penultimate
      hop (see Section 4.4).  The BoS bit for the ELI MUST\n       be zero (i.e.,
      BoS is not set).  The TTL for the EL MUST be zero\n       to ensure that it
      is not used inadvertently for forwarding.  The\n       TC for the EL may be
      any value.  The BoS bit for the EL depends\n       on whether or not there are
      more labels in the label stack.\n   5.  X then determines whether further tunnel
      hierarchy is needed; if\n       so, X goes back to step 3, possibly with a new
      egress Y for the\n       new tunnel.  Otherwise, X is done and sends out the
      packet.\n   Notes:\n   a.  X computes load-balancing information and generates
      the EL based\n       on the incoming application packet, even though the signaling
      of\n       EL capability is associated with tunnels.\n   b.  X MAY insert several
      entropy labels in the stack (each, of\n       course, preceded by an ELI), potentially
      one for each\n       hierarchical tunnel, provided that the egress for that
      tunnel has\n       indicated that it can process ELs for that tunnel.\n   c.
      \ X MUST NOT include an entropy label for a given tunnel unless the\n       egress
      LSR Y has indicated that it can process entropy labels for\n       that tunnel.\n
      \  d.  The signaling and use of entropy labels in one direction\n       (signaling
      from Y to X and data path from X to Y) is completely\n       independent of
      the signaling and use of entropy labels in the\n       reverse direction (signaling
      from X to Y and data path from Y to\n       X).\n"
    title: 4.2.  Ingress LSR
  - contents:
    - "4.3.  Transit LSR\n   Transit LSRs MAY operate with no change in forwarding
      behavior.  The\n   following are suggestions for optimizations that improve
      load\n   balancing, reduce the amount of packet data processed, and/or enhance\n
      \  backward compatibility.\n   If a transit LSR recognizes the ELI, it MAY choose
      to load balance\n   solely on the following label (the EL); otherwise, it SHOULD
      use as\n   much of the whole label stack as feasible as keys for the load-\n
      \  balancing function.  In any case, reserved labels MUST NOT be used as\n   keys
      for the load-balancing function.\n   Some transit LSRs look beyond the label
      stack for better load-\n   balancing information.  This is a simple, backward-compatible\n
      \  approach in networks where some ingress LSRs impose ELs and others\n   don't.
      \ However, this is of limited incremental value if an EL is\n   indeed present
      and requires more packet processing from the LSR.  A\n   transit LSR MAY choose
      to parse the label stack for the presence of\n   the ELI and look beyond the
      label stack only if it does not find it,\n   thus retaining the old behavior
      when needed, yet avoiding unnecessary\n   work if not needed.\n   As stated
      in Sections 4.1 and 5, an egress LSR that signals both ELC\n   and implicit
      null MUST pop the ELI and the next label (which should\n   be the EL), if it
      encounters a packet with the ELI as the topmost\n   label.  Any other LSR (including
      PHP LSRs) MUST drop such packets, as\n   per Section 3.18 of [RFC3031].\n"
    title: 4.3.  Transit LSR
  - contents:
    - "4.4.  Penultimate Hop LSR\n   No change is needed at penultimate hop LSRs.
      \ However, a PHP LSR that\n   recognizes the ELI MAY choose to pop the ELI and
      following label\n   (which should be an entropy label) in addition to popping
      the tunnel\n   label, provided that doing so doesn't diminish its ability to
      load\n   balance on the next hop.\n"
    title: 4.4.  Penultimate Hop LSR
  title: 4.  Data Plane Processing of Entropy Labels
- contents:
  - "5.  Signaling for Entropy Labels\n   An egress LSR Y can signal to ingress LSR(s)
    its ability to process\n   entropy labels (henceforth called \"Entropy Label Capability\"
    or ELC)\n   on a given tunnel.  In particular, even if Y signals an implicit null\n
    \  label, indicating that PHP is to be performed, Y MUST be prepared to\n   pop
    the ELI and EL.\n   Note that Entropy Label Capability may be asymmetric: if LSRs
    X and Y\n   are at opposite ends of a tunnel, X may be able to process entropy\n
    \  labels, whereas Y may not.  The signaling extensions below allow for\n   this
    asymmetry.\n   For an illustration of signaling and forwarding with entropy labels,\n
    \  see Section 8.\n"
  - contents:
    - "5.1.  LDP Signaling\n   A new LDP TLV [RFC5036] is defined to signal an egress's
      ability to\n   process entropy labels.  This is called the ELC TLV and may appear
      as\n   an Optional Parameter of the Label Mapping Message TLV.\n   The presence
      of the ELC TLV in a Label Mapping Message indicates to\n   ingress LSRs that
      the egress LSR can process entropy labels for the\n   associated LDP tunnel.
      \ The ELC TLV has Type 0x0206 and Length 0.\n   The structure of the ELC TLV
      is shown below.\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |U|F|        Type 0x0206        |           Length (0)          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                 Figure 1: Entropy Label Capability TLV\n   where:\n      U:
      Unknown bit.  This bit MUST be set to 1.  If the ELC TLV is not\n      understood
      by the receiver, then it MUST be ignored.\n      F: Forward bit.  This bit MUST
      be set be set to 1.  Since the ELC\n      TLV is going to be propagated hop-by-hop,
      it should be forwarded\n      even by nodes that may not understand it.\n      Type:
      Type field (0x0206)\n      Length: Length field.  This field specifies the total
      length in\n      octets of the ELC TLV and is currently defined to be 0.\n"
    - contents:
      - "5.1.1.  Processing the ELC TLV\n   An LSR that receives a Label Mapping with
        the ELC TLV but does not\n   understand it MUST propagate it intact to its
        neighbors and MUST NOT\n   send a notification to the sender (following the
        meaning of the U-\n   and F-bits).\n   An LSR X may receive multiple Label
        Mappings for a given FEC F from\n   its neighbors.  In its turn, X may advertise
        a Label Mapping for F to\n   its neighbors.  If X understands the ELC TLV,
        and if any of the\n   advertisements it received for FEC F does not include
        the ELC TLV, X\n   MUST NOT include the ELC TLV in its own advertisements
        of F.  If all\n   the advertised Mappings for F include the ELC TLV, then
        X MUST\n   advertise its Mapping for F with the ELC TLV.  If any of X's\n
        \  neighbors resends its Mapping, sends a new Mapping or sends a Label\n   Withdraw
        for a previously advertised Mapping for F, X MUST re-\n   evaluate the status
        of ELC for FEC F, and, if there is a change, X\n   MUST re-advertise its Mapping
        for F with the updated status of ELC.\n"
      title: 5.1.1.  Processing the ELC TLV
    title: 5.1.  LDP Signaling
  - contents:
    - "5.2.  BGP Signaling\n   When BGP [RFC4271] is used for distributing Network
      Layer\n   Reachability Information (NLRI) as described in, for example,\n   [RFC3107],
      the BGP UPDATE message may include the ELC attribute as\n   part of the Path
      Attributes.  This is an optional, transitive BGP\n   attribute of value 28.
      \ The inclusion of this attribute with an NLRI\n   indicates that the advertising
      BGP router can process entropy labels\n   as an egress LSR for all routes in
      that NLRI.\n   A BGP speaker S that originates an UPDATE should include the
      ELC\n   attribute only if both of the following are true:\n   A1:  S sets the
      BGP NEXT_HOP attribute to itself AND\n   A2:  S can process entropy labels.\n
      \  Suppose a BGP speaker T receives an UPDATE U with the ELC attribute.\n   T
      has two choices.  T can simply re-advertise U with the ELC\n   attribute if
      either of the following is true:\n   B1:  T does not change the NEXT_HOP attribute
      OR\n   B2:  T simply swaps labels without popping the entire label stack and\n
      \       processing the payload below.\n   An example of the use of B1 is Route
      Reflectors.\n   However, if T changes the NEXT_HOP attribute for U and in the
      data\n   plane pops the entire label stack to process the payload, T MAY\n   include
      an ELC attribute for UPDATE U' if both of the following are\n   true:\n   C1:
      \ T sets the NEXT_HOP attribute of U' to itself AND\n   C2:  T can process entropy
      labels.\n   Otherwise, T MUST remove the ELC attribute.\n"
    title: 5.2.  BGP Signaling
  - contents:
    - "5.3.  RSVP-TE Signaling\n   Entropy label support is signaled in RSVP-TE [RFC3209]
      using the\n   Entropy Label Capability (ELC) flag in the Attribute Flags TLV
      of the\n   LSP_ATTRIBUTES object [RFC5420].  The presence of the ELC flag in
      a\n   Path message indicates that the ingress can process entropy labels in\n
      \  the upstream direction; this only makes sense for a bidirectional LSP\n   and
      MUST be ignored otherwise.  The presence of the ELC flag in a\n   Resv message
      indicates that the egress can process entropy labels in\n   the downstream direction.\n
      \  The bit number for the ELC flag is 9.\n"
    title: 5.3.  RSVP-TE Signaling
  - contents:
    - "5.4.  Multicast LSPs and Entropy Labels\n   Multicast LSPs [RFC4875] [RFC6388]
      typically do not use ECMP for load\n   balancing, as the combination of replication
      and multi-pathing can\n   lead to duplicate traffic delivery.  However, these
      LSPs can traverse\n   bundled links [RFC4201] and LAGs.  In both these cases,
      load\n   balancing is useful, and hence entropy labels can be of value for\n
      \  multicast LSPs.\n   The methodology defined for entropy labels here will
      be used for\n   multicast LSPs; however, the details of signaling and processing
      ELs\n   for multicast LSPs will be specified in a future document.\n"
    title: 5.4.  Multicast LSPs and Entropy Labels
  title: 5.  Signaling for Entropy Labels
- contents:
  - "6.  Operations, Administration, and Maintenance (OAM) and Entropy Labels\n   Generally,
    OAM comprises a set of functions operating in the data\n   plane to allow a network
    operator to monitor its network\n   infrastructure and to implement mechanisms
    in order to enhance the\n   general behavior and the level of performance of its
    network, e.g.,\n   the efficient and automatic detection, localization, diagnosis,
    and\n   handling of defects.\n   Currently defined OAM mechanisms for MPLS include
    LSP ping/traceroute\n   [RFC4379] and Bidirectional Forwarding Detection (BFD)
    for MPLS\n   [RFC5884].  The latter provides connectivity verification between
    the\n   endpoints of an LSP, and recommends establishing a separate BFD\n   session
    for every path between the endpoints.\n   The LSP traceroute procedures of [RFC4379]
    allow an ingress LSR to\n   obtain label ranges that can be used to send packets
    on every path to\n   the egress LSR.  It works by having the ingress LSR sequentially
    ask\n   the transit LSRs along a particular path to a given egress LSR to\n   return
    a label range such that the inclusion of a label in that range\n   in a packet
    will cause the replying transit LSR to send that packet\n   out the egress interface
    for that path.  The ingress provides the\n   label range returned by transit LSR
    N to transit LSR N + 1, which\n   returns a label range that is less than or equal
    in span to the range\n   provided to it.  This process iterates until the penultimate
    transit\n   LSR replies to the ingress LSR with a label range that is acceptable\n
    \  to it and to all LSRs along path preceding it for forwarding a packet\n   along
    the path.\n   However, the LSP traceroute procedures do not specify where in the\n
    \  label stack the value from the label range is to be placed, whether\n   deep
    packet inspection is allowed, and if so, which keys and key\n   values are to
    be used.\n   This memo updates LSP traceroute by specifying that the value from\n
    \  the label range is to be placed in the entropy label.  Deep packet\n   inspection
    is thus not necessary, although an LSR may use it,\n   provided it does so consistently,
    i.e., if the label range to go to a\n   given downstream LSR is computed with
    deep packet inspection, then\n   the data path should use the same approach and
    the same keys.\n   In order to have a BFD session on a given path, a value from
    the\n   label range for that path should be used as the EL value for BFD\n   packets
    sent on that path.\n"
  title: 6.  Operations, Administration, and Maintenance (OAM) and Entropy Labels
- contents:
  - "7.  MPLS-TP and Entropy Labels\n   Since the MPLS Transport Profile (MPLS-TP)
    does not use ECMP, entropy\n   labels are not applicable to an MPLS-TP deployment.\n"
  title: 7.  MPLS-TP and Entropy Labels
- contents:
  - "8.  Entropy Labels in Various Scenarios\n   This section describes the use of
    entropy labels in various\n   scenarios.  The material in this section is illustrative
    and offers\n   guidance to implementations, but it does not form a normative part
    of\n   this specification.\n   In the figures below, the following conventions
    are used to depict\n   processing between X and Y.  Note that control plane signaling
    goes\n   right to left, whereas data plane processing goes left to right.\n   Protocols\n
    \  Y:        <--- [L, E]                         Y signals L to X\n       X -------------
    Y\n   Data Plane:\n   X-Y:  <L, ELI, EL>                            Label Stack
    from X -> Y\n   Label Stack Operations:\n   X:  +<L, ELI, EL>                             X
    pushes <L, ELI, EL>\n   Y:                  -<L, ELI, EL>             Y pops <L,
    ELI, EL>\n   This means that Y signals to X label L for an LDP tunnel.  E can
    be\n   one of:\n      0: meaning egress is NOT entropy label capable or\n      1:
    meaning egress is entropy label capable\n   The line with LS: shows the label
    stack on the wire.  Below that is\n   the operation that each LSR does in the
    data plane, where + means\n   push the following label stack, - means pop the
    following label\n   stack, L~L' means swap L with L'.\n"
  - contents:
    - "8.1.  LDP Tunnel\n   The following figures illustrate several simple intra-AS
      LDP tunnels.\n   The first diagram shows ultimate hop popping (UHP) with the
      ingress\n   inserting an EL, the second UHP with no ELs, the third PHP with
      ELs,\n   and finally, PHP with no ELs, but also with an application label AL\n
      \  (which could, for example, be a VPN label).\n   Note that, in all the cases
      below, the MPLS application does not\n   matter; it may be that X pushes some
      more labels (perhaps for a VPN\n   or VPLS) below the ones shown, and Y pops
      them.\n   A:        <--- [TL4, 1]\n   B:                     <-- [TL3, 1]\n
      \  W:                           <-- [TL2, 1]\n   Y:                                        <--
      [TL0, 1]\n       X --------------- A --------- B --- W ---------- Y\n   Data
      Plane:\n   X-A:   <TL4, ELI, EL>\n   A-B:                     <TL3,ELI,EL>\n
      \  B-W:                                 <TL2,ELI,EL>\n   W-Y:                                       <TL0,ELI,EL>\n
      \  Label Stack Operations:\n   X:  +<TL4, ELI, EL>\n   A:                    TL4~TL3\n
      \  B:                                TL3~TL2\n   W:                                      TL2~TL0\n
      \  Y:                                                   -<TL0, ELI, EL>\n                Figure
      2: LDP with UHP; Ingress Inserts ELs\n   A:        <--- [TL4, 1]\n   B:                     <--
      [TL3, 1]\n   W:                           <-- [TL2, 1]\n   Y:                                        <--
      [TL0, 1]\n       X --------------- A --------- B --- W ---------- Y\n   Data
      Plane:\n   X-A:       <TL4>\n   A-B:                      <TL3>\n   B-W:                                 <TL2>\n
      \  W-Y:                                         <TL0>\n   Label Stack Operations:\n
      \  X:  +<TL4>\n   A:                    TL4~TL3\n   B:                                TL3~TL2\n
      \  W:                                      TL2~TL0\n   Y:                                                   -<TL0>\n
      \           Figure 3: LDP with UHP; Ingress Does Not Insert ELs\n   Note that
      in Figure 3, above, the Egress Y is signaling it is EL-\n   capable, but the
      Ingress X has chosen not to insert ELs.\n   A:        <--- [TL4, 1]\n   B:                     <--
      [TL3, 1]\n   W:                           <-- [TL2, 1]\n   Y:                                          <--
      [3, 1]\n       X --------------- A --------- B --- W ---------- Y\n   Data Plane:\n
      \  X-A:   <TL4, ELI, EL>\n   A-B:                     <TL3,ELI,EL>\n   B-W:
      \                                <TL2,ELI,EL>\n   W-Y:                                       <ELI,EL>\n
      \  Label Stack Operations:\n   X:  +<TL4, ELI, EL>\n   A:                    TL4~TL3\n
      \  B:                                TL3~TL2\n   W:                                      -TL2\n
      \  Y:                                                   -<ELI, EL>\n                Figure
      4: LDP with PHP; Ingress Inserts ELs\n   A:        <--- [TL4, 1]\n   B:                     <--
      [TL3, 1]\n   W:                           <-- [TL2, 1]\n   Y:                                          <--
      [3, 1]\n   VPN:  <------------------------------------------ [AL]\n       X
      --------------- A --------- B --- W ---------- Y\n   Data Plane:\n   X-A:   <TL4,
      AL>\n   A-B:                     <TL3, AL>\n   B-W:                                 <TL2,
      AL>\n   W-Y:                                       <AL>\n   Label Stack Operations:\n
      \  X:  +<TL4, AL>\n   A:                    TL4~TL3\n   B:                                TL3~TL2\n
      \  W:                                      -TL2\n   Y:                                                   -<AL>\n
      \        Figure 5: LDP with PHP + VPN; Ingress Does Not Insert ELs\n   Note
      that in Figure 5, above, the Egress Y is signaling it is EL-\n   capable, but
      the Ingress X has chosen not to insert ELs.\n   A:        <--- [TL4, 1]\n   B:
      \                       <-- [TL3, 1]\n   W:                              <--
      [TL2, 1]\n   Y:                                             <-- [3, 1]\n   VPN:
      \ <--------------------------------------------- [AL]\n       X ---------------
      A ------------ B --- W ---------- Y\n   Data Plane:\n   X-A:   <TL4,ELI,EL,AL>\n
      \  A-B:                     <TL3,ELI,EL,AL>\n   B-W:                                    <TL2,ELI,EL,AL>\n
      \  W-Y:                                          <ELI,EL,AL>\n   Label Stack
      Operations:\n   X:  +<TL4,ELI,EL,AL>\n   A:                    TL4~TL3\n   B:
      \                                  TL3~TL2\n   W:                                         -TL2\n
      \  Y:                                                      -<ELI,EL,AL>\n             Figure
      6: LDP with PHP + VPN; Ingress Inserts ELs\n"
    title: 8.1.  LDP Tunnel
  - contents:
    - "8.2.  LDP over RSVP-TE\n   Figure 7 illustrates \"LDP over RSVP-TE\" tunnels.
      \ X and Y are the\n   ingress and egress (respectively) of the LDP tunnel; A
      and W are the\n   ingress and egress of the RSVP-TE tunnel.  It is assumed that
      both\n   the LDP and RSVP-TE tunnels have PHP.\n   LDP:       <--- [L4, 1]  <-------
      [L3, 1]  <--- [3, 1]\n   RSVP-TE:                <-- [Rn, 0]\n                                  <--
      [3, 0]\n       X --------------- A --------- B --- W ---------- Y\n   Data Plane:\n
      \  X-A:   <L4, ELI, EL>\n   A-B:                     <Rn,L3,ELI,EL>\n   B-W:
      \                                <L3,ELI,EL>\n   W-Y:                                       <ELI,EL>\n
      \  Label Stack Operations:\n   X:  +<L4, ELI, EL>\n   A:                    <L4~L3>+Rn\n
      \  B:                                -Rn\n   W:                                      -L3\n
      \  Y:                                                   -<ELI, EL>\n          Figure
      7: LDP with ELs over RSVP-TE Tunnels without ELs\n"
    title: 8.2.  LDP over RSVP-TE
  - contents:
    - "8.3.  MPLS Applications\n   For each unicast tunnel starting at an ingress
      LSR X, X must remember\n   whether the egress for that tunnel can process entropy
      labels.  X\n   does not have to keep state per application running over that
      tunnel.\n   However, an ingress PE can choose on a per-application basis whether\n
      \  or not to insert ELs.  For example, X may have an application for\n   which
      it does not wish to use ECMP (e.g., circuit emulation) or for\n   which it does
      not know which keys to use for load balancing (e.g.,\n   Appletalk over a pseudowire).
      \ In either of those cases, X may choose\n   not to insert entropy labels but
      may choose to insert entropy labels\n   for an IP VPN over the same tunnel.\n"
    title: 8.3.  MPLS Applications
  title: 8.  Entropy Labels in Various Scenarios
- contents:
  - "9.  Security Considerations\n   This document describes advertisement of the
    capability to support\n   receipt of entropy labels that an ingress LSR may insert
    in MPLS\n   packets in order to allow transit LSRs to attain better load\n   balancing
    across LAG and/or ECMP paths in the network.\n   This document does not introduce
    new security vulnerabilities to LDP,\n   BGP or RSVP-TE.  Please refer to the
    Security Considerations sections\n   of these protocols ([RFC5036], [RFC4271],
    and [RFC3209]) for security\n   mechanisms applicable to each.\n   Given that
    there is no end-user control over the values used for\n   entropy labels, there
    is little risk of entropy label forgery, which\n   could cause uneven load balancing
    in the network.  Note that if the\n   EL value is calculated only based on packet
    headers, then a\n   relatively efficient wiretapping interface could be added
    depending\n   on the function used to generate the EL value.  An implementation
    may\n   protect against this by adding some other input to the generation of\n
    \  the EL values that would make it harder to build a table of EL values\n   to
    tap given knowledge of the keys from the packet.  For example, the\n   ingress
    LSR could generate a random input to the EL generation\n   process.  In practice,
    many ECMP hashing algorithms contain a random\n   factor in any case so as to
    avoid polarization issues.\n   If Entropy Label Capability is not signaled from
    an egress PE to an\n   ingress PE, due to, for example, malicious configuration
    activity on\n   the egress PE, then the PE will fall back to not using entropy
    labels\n   for load balancing traffic over LAG or ECMP paths, which is, in\n   general,
    no worse than the behavior observed in current production\n   networks.  That
    said, it is recommended that operators monitor\n   changes to PE configurations
    and, more importantly, the fairness of\n   load distribution over LAG or ECMP
    paths.  If the fairness of load\n   distribution over a set of paths changes that
    could indicate a\n   misconfiguration, bug, or other non-optimal behavior on their
    PEs,\n   and they should take corrective action.\n"
  title: 9.  Security Considerations
- contents:
  - '10.  IANA Considerations

    '
  - contents:
    - "10.1.  Reserved Label for ELI\n   IANA has allocated a reserved label for the
      Entropy Label Indicator\n   (ELI) from the \"Multiprotocol Label Switching Architecture
      (MPLS)\n   Label Values\" registry.\n"
    title: 10.1.  Reserved Label for ELI
  - contents:
    - "10.2.  LDP Entropy Label Capability TLV\n   IANA has allocated the value of
      0x0206 from the IETF Consensus range\n   (0x0001-0x07FF) in the \"TLV Type Name
      Space\" registry as the \"Entropy\n   Label Capability TLV\".\n"
    title: 10.2.  LDP Entropy Label Capability TLV
  - contents:
    - "10.3.  BGP Entropy Label Capability Attribute\n   IANA has allocated the Path
      Attribute Type Code 28 from the \"BGP Path\n   Attributes\" registry as the
      \"BGP Entropy Label Capability Attribute\".\n"
    title: 10.3.  BGP Entropy Label Capability Attribute
  - contents:
    - "10.4.  RSVP-TE Entropy Label Capability Flag\n   IANA has allocated a new bit
      from the \"Attribute Flags\" sub-registry\n   of the \"Resource Reservation
      Protocol-Traffic Engineering (RSVP-TE)\n   Parameters\" registry.\n   Bit |
      Name                     | Attribute  | Attribute  | RRO\n   No  |                          |
      Flags Path | Flags Resv |\n   ----+--------------------------+------------+------------+-----\n
      \   9   Entropy Label Capability       Yes          Yes       No\n"
    title: 10.4.  RSVP-TE Entropy Label Capability Flag
  title: 10.  IANA Considerations
- contents:
  - "11.  Acknowledgments\n   We wish to thank Ulrich Drafz for his contributions,
    as well as the\n   entire \"hash label\" team for their valuable comments and
    discussion.\n   Sincere thanks to Nischal Sheth for his many suggestions and comments\n
    \  and for his careful reading of the document, especially with regard\n   to
    data plane processing of entropy labels.\n   Most of the work Kireeti Kompella
    did on this document was done while\n   he was at Juniper Networks.  He has since
    moved to Contrail Systems.\n"
  title: 11.  Acknowledgments
- contents:
  - '12.  References

    '
  - contents:
    - "12.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC3031]  Rosen, E., Viswanathan, A., and R. Callon, \"Multiprotocol\n
      \             Label Switching Architecture\", RFC 3031, January 2001.\n   [RFC3032]
      \ Rosen, E., Tappan, D., Fedorkow, G., Rekhter, Y.,\n              Farinacci,
      D., Li, T., and A. Conta, \"MPLS Label Stack\n              Encoding\", RFC
      3032, January 2001.\n   [RFC3107]  Rekhter, Y. and E. Rosen, \"Carrying Label
      Information in\n              BGP-4\", RFC 3107, May 2001.\n   [RFC3209]  Awduche,
      D., Berger, L., Gan, D., Li, T., Srinivasan, V.,\n              and G. Swallow,
      \"RSVP-TE: Extensions to RSVP for LSP\n              Tunnels\", RFC 3209, December
      2001.\n   [RFC5036]  Andersson, L., Minei, I., and B. Thomas, \"LDP\n              Specification\",
      RFC 5036, October 2007.\n   [RFC5420]  Farrel, A., Papadimitriou, D., Vasseur,
      JP., and A.\n              Ayyangarps, \"Encoding of Attributes for MPLS LSP\n
      \             Establishment Using Resource Reservation Protocol Traffic\n              Engineering
      (RSVP-TE)\", RFC 5420, February 2009.\n"
    title: 12.1.  Normative References
  - contents:
    - "12.2.  Informative References\n   [RFC4201]  Kompella, K., Rekhter, Y., and
      L. Berger, \"Link Bundling\n              in MPLS Traffic Engineering (TE)\",
      RFC 4201, October 2005.\n   [RFC4271]  Rekhter, Y., Li, T., and S. Hares, \"A
      Border Gateway\n              Protocol 4 (BGP-4)\", RFC 4271, January 2006.\n
      \  [RFC4379]  Kompella, K. and G. Swallow, \"Detecting Multi-Protocol\n              Label
      Switched (MPLS) Data Plane Failures\", RFC 4379,\n              February 2006.\n
      \  [RFC4447]  Martini, L., Rosen, E., El-Aawar, N., Smith, T., and G.\n              Heron,
      \"Pseudowire Setup and Maintenance Using the Label\n              Distribution
      Protocol (LDP)\", RFC 4447, April 2006.\n   [RFC4875]  Aggarwal, R., Papadimitriou,
      D., and S. Yasukawa,\n              \"Extensions to Resource Reservation Protocol
      - Traffic\n              Engineering (RSVP-TE) for Point-to-Multipoint TE Label\n
      \             Switched Paths (LSPs)\", RFC 4875, May 2007.\n   [RFC5884]  Aggarwal,
      R., Kompella, K., Nadeau, T., and G. Swallow,\n              \"Bidirectional
      Forwarding Detection (BFD) for MPLS Label\n              Switched Paths (LSPs)\",
      RFC 5884, June 2010.\n   [RFC6388]  Wijnands, IJ., Minei, I., Kompella, K.,
      and B. Thomas,\n              \"Label Distribution Protocol Extensions for Point-to-\n
      \             Multipoint and Multipoint-to-Multipoint Label Switched\n              Paths\",
      RFC 6388, November 2011.\n   [RFC6391]  Bryant, S., Filsfils, C., Drafz, U.,
      Kompella, V., Regan,\n              J., and S. Amante, \"Flow-Aware Transport
      of Pseudowires\n              over an MPLS Packet Switched Network\", RFC 6391,\n
      \             November 2011.\n"
    title: 12.2.  Informative References
  title: 12.  References
- contents:
  - "Appendix A.  Applicability of LDP Entropy Label Capability TLV\n   In the case
    of unlabeled IPv4 (Internet) traffic, the best practice\n   is for an egress LSR
    to propagate eBGP learned routes within a\n   Service Provider's Autonomous System
    after resetting the BGP next-hop\n   attribute to one of its loopback IP addresses.
    \ That loopback IP\n   address is injected into the Service Provider's IGP and,\n
    \  concurrently, a label assigned to it via LDP.  Thus, when an ingress\n   LSR
    is performing a forwarding lookup for a BGP destination, it\n   recursively resolves
    the associated next hop to a loopback IP address\n   and associated LDP label
    of the egress LSR.\n   Thus, in the context of unlabeled IPv4 traffic, the LDP
    Entropy Label\n   Capability TLV will typically be applied only to the FEC for
    the\n   loopback IP address of the egress LSR, and the egress LSR need not\n   announce
    an Entropy Label Capability for the eBGP learned route.\n"
  title: Appendix A.  Applicability of LDP Entropy Label Capability TLV
- contents:
  - "Authors' Addresses\n   Kireeti Kompella\n   Contrail Systems\n   2350 Mission
    College Blvd.\n   Santa Clara, CA  95054\n   US\n   EMail: kireeti.kompella@gmail.com\n
    \  John Drake\n   Juniper Networks\n   1194 N. Mathilda Ave.\n   Sunnyvale, CA
    \ 94089\n   US\n   EMail: jdrake@juniper.net\n   Shane Amante\n   Level 3 Communications,
    Inc.\n   1025 Eldorado Blvd\n   Broomfield, CO  80021\n   US\n   EMail: shane@level3.net\n
    \  Wim Henderickx\n   Alcatel-Lucent\n   Copernicuslaan 50\n   2018 Antwerp\n
    \  Belgium\n   EMail: wim.henderickx@alcatel-lucent.com\n   Lucy Yong\n   Huawei
    USA\n   5340 Legacy Dr.\n   Plano, TX  75024\n   US\n   EMail: lucy.yong@huawei.com\n"
  title: Authors' Addresses
