- title: __initial_text__
  contents:
  - "            Specification of the Unified User-Level Protocol\n   After many discussions\
    \ of my RFC 451, I discovered that the \"Unified\n   User-Level Protocol\" proposed\
    \ therein had evolved into what had\n   always been its underlying motivation,\
    \ a common command language.\n   There are several reasons why this latter approach\
    \ satisfies the\n   original goals of the UULP and goes beyond them into even\
    \ more useful\n   areas:\n   1. User convenience.  As evidenced by the good response\
    \ to the common\n   editor \"neted\", the Network Working Group has come to acknowledge\
    \ the\n   fact that the convenience of non-system programmer users of the\n  \
    \ Network must be served.  Allowing users to invoke the same generic\n   functions\
    \ -- including \"batch\" jobs -- irrespective of which Server\n   Host they happen\
    \ to be using is surely a compelling initial\n   justification for a common command\
    \ language.  Note that the concern\n   with generic functions -- which \"all\"\
    \ Servers do, one way or another\n   -- is intended to emphasize the common command\
    \ subset aspects of the\n   language, rather than the \"linguistic\" elegance\
    \ of it all.  The\n   attempt is to specify an easy way of getting many things\
    \ done, not a\n   complicated way of getting \"everything\" done.\n   2. \"Resource\
    \ sharing\".  Another area which is receiving attention in\n   the NWG of late\
    \ is that of \"automatic\" or program-driven invocation\n   of resources on foreign\
    \ systems.  A common intermediate\n   representation of some sort is clearly necessary\
    \ to perform such\n   functions if we are to avoid the old \"n by m problem\"\
    \ of the Telnet\n   Protocol -- in this case, n Hosts would otherwise have to\
    \ keep track\n   of m command languages.  For the common intermediate representation\n\
    \   to be human-usable seems to kill two birds with one stone, as\n   expanded\
    \ upon in the next point.\n   3. Economy of mechanism.  In RFC 451, I advanced\
    \ the claim that a\n   single user-level protocol which connected via socket 1\
    \ and Telnet\n   would offer economy of mechanism in that new responders would\
    \ not be\n   required to service Initial Connection Protocols on socket after\n\
    \   socket as protocol after protocol evolved.  This consideration still\n   applies,\
    \ but an even greater economy is visible when we consider the\n   context of resource\
    \ sharing.  For if the common command language is\n   designed for direct employment\
    \ by users, as the present proposal is,\n   there is no need for users on terminal\
    \ support \"mini-Hosts\" (e.g.,\n   ANTS and TIPs) to require an intermediary\
    \ server when all they\n   actually want is to work on a particular Server in\
    \ the common\n   language.  (This is especially true in light of the fact that\
    \ many\n   such users are not professional programmers -- and are familiar with\n\
    \   no command language.)  That is, if resource sharing is achieved by an\n  \
    \ intermediate language which is only suitable for programs, you would\n   have\
    \ to learn the native command language of Server B if you didn't\n   want to incur\
    \ the expense of using Server A only to get at generic\n   functions on Server\
    \ B.  (And you might still have to learn the native\n   language of Server A,\
    \ even if the expense of using two Servers where\n   one would do isn't a factor.)\n\
    \   4. Front-ending.  Another benefit of the common command language\n   proposed\
    \ here is that it is by and large intended to lend itself to\n   implementation\
    \ by front-ending onto existing commands.  Thus, the\n   unpleasant necessity\
    \ of throwing out existing implementations is\n   minimized.  Indeed, the approach\
    \ taken is a conscious effort to come\n   up with a common command language by\
    \ addition to \"native\" command\n   languages rather than by replacement, for\
    \ the compelling reason that\n   it would be unworkable as well as ill-advised\
    \ to attempt to legislate\n   the richness represented by existing command languages\
    \ out of\n   existence.  Further, as it is a closed environment, no naming\n \
    \  conflicts with native commands would arise.\n   5. Accounting and authentication.\
    \  As evidenced by the spate of RFCs\n   about the implications of the FTP in\
    \ regard to both accounting for\n   use of Network services and authenticating\
    \ users' identifications\n   (Bressler's RFC 487, Pogran's RFC 501, and my RFC\
    \ 505 -- and even\n   491), this area is still up in the air.  The generic login\
    \ command\n   proposed here should help matters, as it allows the Server to\n\
    \   associate an appropriate process with the connection while actuating\n   appropriate\
    \ accounting and access control as well, if it chooses.\n   6. Process-process\
    \ functions.  By enabling the invocation of foreign\n   object programs, the present\
    \ proposal offers a rubric in which such\n   process-to-process functions as \"\
    parallelism\" can be performed.  (See\n   the discussion of the \"call\" command,\
    \ below.)  Note that the UULP is\n   not being advanced as a panacea: It is assumed\
    \ that the actual\n   transactions carried out are most likely not going to be\
    \ in the\n   common command language (although some certainly could be); however,\n\
    \   what is furnished is a known way of getting the presumably special-\n   cased\
    \ programs executing elsewhere.  Also, it offers a convenient\n   environment\
    \ into which can be placed such new functions, which we\n   would like to have\
    \ become generic, as Day's File Access Protocol.\n   All of which seems to be\
    \ a fair amount of mileage to get out of a\n   distaste for remembering whether\
    \ you find out who's logged in by\n   saying \"systat\", \"users\", \"s.who:c\"\
    , \"listf tty\", or \"who\"....\n"
- title: Context
  contents:
  - "Context\n   Although ultimately intended to become the general responder to the\n\
    \   Initial Connection Protocol, the UULP is initially to be a Telnet\n   Protocol\
    \ \"negotiated option\".  When the option is enabled, the Server\n   Host will\
    \ furnish a command environment which supports the common\n   conventions and\
    \ commands discussed herein.\n   In a sense, the UULP is a \"selector\".  That\
    \ is, the common command\n   subset includes commands to exit from the common\
    \ command environment\n   and enter various other environments, along the lines\
    \ of CCN's\n   current Telnet Server.  To exit from the UULP environment to the\n\
    \   \"native\" command processor, the UULP command is \"local\" (see also the\n\
    \   discussion of Case, below).  Note that all commands terminate in\n   Telnet\
    \ \"Newline\" (currently cr-lf), unless altered by the \"eol\"\n   command (below);\
    \ internal separator is space (blank).  (Entrance into\n   other environments\
    \ -- such as the FTP Server -- is discussed below.)\n   There are two reasons\
    \ for introducing a mechanism other than the\n   apparently natural one of simply\
    \ de-negotiating the option: First, it\n   is bound to be more convenient for\
    \ the user to type a command than to\n   escape to his User Telnet program to\
    \ cause the option disabling.\n   Second, it is hoped that eventually the UULP\
    \ will be legislated to be\n   the default environment encountered by any Network\
    \ login, in which\n   case the natural way to enter the Server's \"native\" command\n\
    \   environment would be by UULP command.\n      Note: all UULP commands discussed\
    \ herein are listed in Appendix 1,\n      categorized as to optionality, with\
    \ brief descriptions given.  The\n      appendix may be taken as a first-pass\
    \ UULP Users' Manual.\n"
- title: Responses
  contents:
  - "Responses\n   Any optional commands which are not supported by a particular Server\n\
    \   are to be responded to by a message of the form \"Not implemented:\n   commandname.\"\
    , where the variable is the name of the command which\n   was requested.  Note\
    \ that throughout this document, all literals must\n   be sent exactly as specified,\
    \ so as to allow for the possibility of\n   Servers' being driven by programs\
    \ (including \"automata\" or \"command\n   macros\") in addition to \"live\" users.\n\
    \   In general, the view has been taken here that a small number of\n   literal,\
    \ constrained responses is superior to a vast variety of\n   numerically coded\
    \ responses in which text may vary.  Again, the\n   motivation is to achieve an\
    \ economy of mechanism.  For on the coded\n   model, there must be a coordinator\
    \ of code assignments, which is just\n   as well avoided.  Further, as has been\
    \ experienced in the use of the\n   FTP, when there are many codes there are many\
    \ ambiguities.  (The\n   sender may have a perfectly valid case for choosing,\
    \ say, 452, while\n   the receiver may have an equally good interpretation of\
    \ the codes'\n   definitions for expecting, say, 453.)  Experience with a related\n\
    \   \"error table\" mechanism on Multics also bears out the assertion that\n \
    \  coded responses create both managerial and technical problems.  A\n   final\
    \ objection to numeric codes might be considered irrelevant by\n   live some,\
    \ but I think that the aesthetics of the situation do merit\n   some attention.\
    \  And when the common command language is being\n   employed by live users, it\
    \ seems to me that they would only be\n   distracted by all those numbers flying\
    \ around.  (Nor can we assume\n   that the numbers could be stripped by their\
    \ \"User UULP\", for one of\n   the basic goals here is to make it straightforward\
    \ enough for a user\n   at a TIP to deal with.)\n"
- title: Arguments
  contents:
  - "Arguments\n   During the review process, it became evident that some global\n\
    \   comments on arguments were in order.  Two areas in particular appear\n   to\
    \ have led to some confusion: the strategy of specification of\n   arguments on\
    \ the command line, and the question of \"control\n   arguments\".  On the first\
    \ score, the goal of \"front-endability\" must\n   be recalled.  Consider two\
    \ native implementations of a particular\n   command, one of which (A) expects\
    \ to collect its arguments by\n   interrogation of the user, and the other of\
    \ which (B) expects to\n   receive them on invocation (being invoked as a closed\
    \ subroutine).\n   Now, it is easy to imagine that a \"Server UULP\" could feed\
    \ the\n   arguments to A as needed without requiring A to be rewritten, but it\n\
    \   is quite difficult to see how B could be made to interrogate for\n   arguments\
    \ without extensive rewriting.  Therefore, a \"least common\n   denominator\"\
    \ approach of specifying arguments in advance incurs the\n   minimum cost in terms\
    \ of reworking existing implementations.\n   On the second score, I have borrowed\
    \ a notion from the Multics\n   command language's convention called \"control\
    \ arguments\" because it\n   seems to be quite convenient in actual practice.\
    \  The key is that\n   some arguments are meant as literals, usually specifying\
    \ a mode or\n   control function to the command, while others are variables,\n\
    \   specifying something like a particular file name or user identifier.\n   A\
    \ common example is a \"mail\" command, where the variables are the\n   user identifiers\
    \ and the Host identifiers, and the \"control argument\"\n   is the designator\
    \ that user identifiers have ceased and Host\n   identifiers have begun.  The\
    \ convention used here is to begin the\n   control argument with a hyphen, as\
    \ this character never seems to be\n   used to begin variable arguments.  Thus,\
    \ we use \"-at\" in the mail\n   example.  Although it is not a deep philosophical\
    \ point, this\n   approach does relieve argument lists of order-dependency, and\
    \ feels\n   right to me.\n"
- title: Case
  contents:
  - "Case\n   Although it appears to have been legislated out of existence by the\n\
    \   specification of the Network Virtual Terminal's keyboard in the\n   Telnet\
    \ Protocol, the question of what to do about users at upper-\n   case-only terminals\
    \ remains a thorny one in practice.  There are two\n   aspects to consider: the\
    \ alphabetic case of commands, and the ability\n   to cause \"case-mapping\" in\
    \ order to allow lower-case input.  Some\n   Servers have no local problems with\
    \ the first aspect, as they operate\n   internally in all upper-case or all lower-case\
    \ and merely map all\n   input appropriately.  (Problems do arise, though, when\
    \ one is using\n   the User FTP on such a system to deal with a mixed-case system,\
    \ for\n   example.) Other Servers, however, attach the normal linguistic\n   significance\
    \ to case.  (E.g., Smith's name is \"Smith\" -- not \"SMITH\",\n   and not \"\
    smith\".)  To minimise superfluous processing for those\n   Servers which are\
    \ indifferent to case, all UULP commands are to be\n   recognized as such whether\
    \ they arrive as all upper-case or all\n   lower-case.  (They will be shown here\
    \ as all lower merely for typing\n   convenience.) Note that arbitrarily mixed\
    \ case is not recognized, as\n   it is an unwarranted assumption about local implementation\
    \ to suppose\n   that input will necessarily be case-mapped.\n   On the second\
    \ aspect, any Server which does distinguish between\n   upper- and lower-case\
    \ in commands' arguments (a.k.a. parameters) must\n   furnish a UULP \"map\" command\
    \ as specified in Appendix 2 in order to\n   support logins from upper-case-only\
    \ terminals attached to User Hosts\n   which either do not support the Telnet\
    \ Protocol's dictum that all 128\n   ASCII codes must be generable, or support\
    \ it awkwardly.  This seems a\n   simpler and preferable solution than the alternative\
    \ of legislating\n   that upper-case Network-wide personal identifiers (and perhaps\
    \ even\n   Network Virtual Path Names) be pre-conditions to a usable common\n\
    \   command subset.  (As noted below, these latter concepts will fit in\n   smoothly\
    \ when they are agreed upon.  The point here, though, is that\n   we need not\
    \ deprive ourselves of the benefits of a UULP until they\n   are agreed upon.)\n"
- title: User Names
  contents:
  - "User Names\n   As implied above, the various Servers have their various ways\
    \ of\n   expressing users' names.  Clearly, the principle of economy of memory\n\
    \   dictates that there should be a common intermediate representation of\n  \
    \ names in and for the Network.  It is probably also clear that this\n   representation\
    \ will be based upon the Network Information Center's\n   \"NIC ID's\".  However,\
    \ it is unfortunately amply clear than an\n   acceptable mechanism for securing\
    \ up-to-date information cannot be\n   legislated here - much less a mechanism\
    \ for securely updating the\n   implied data base.  Therefore, at this stage it\
    \ seems to be the\n   sensible thing to specify only the UULP syntax for conveying\
    \ to the\n   Server the fact that it is to treat a user name as a Network-wide\n\
    \   name rather than as a local name, and let the supporting mechanisms\n   evolve\
    \ as they may.\n   The prefacing of a name with an asterisk (\"*\") denotes a\
    \ Network-wide\n   name.  (Such names may be either all upper-case or all lower-case,\
    \ as\n   with UULP commands' names.) The name \"*free\" is explicitly reserved\n\
    \   to mean that (in the context of logging in) a login is desired on a\n   supported\
    \ or sampling account, if such an account is available.  The\n   response if no\
    \ such account is available is to be \"Invalid ident:\n   *free.\"  When Network-wide\
    \ names are generally available Servers will\n   either map them into local names\
    \ or cause them to be registered as\n   local names as they prefer.  The point\
    \ is that a Network-wide name\n   will be \"made to work\" by the Server in the\
    \ context of the UULP.\n"
- title: Special Characters and Signals
  contents:
  - "Special Characters and Signals\n   Another area in which the facts of life must\
    \ outweigh the letter of\n   the Telnet Protocol if the user's convenience is\
    \ to be served is that\n   of \"erase\" and \"kill\" characters.  It is possible\
    \ that User Telnets\n   will uniformly facilitate the transmission of the Telnet\
    \ control\n   codes for generic character erase and generic line kill.  It is\n\
    \   certain, however, that User Telnets will differ -- and users will, if\n  \
    \ they use more than one User Telnet, be again placed in the\n   uncomfortable\
    \ position of having to develop too many sets of\n   reflexes.  Therefore, the\
    \ UULP will optionally support the following\n   commands: \"erase char\" and\
    \ \"kill char\", where char is a printable\n   ASCII character (to avoid possible\
    \ conflicts with \"control\n   characters\" which are recognized in the innermost\
    \ areas of particular\n   operating systems).  Presumably, unwary users can be\
    \ instructed not\n   to choose an alphabetic, so as to avoid being placed in a\
    \ position\n   where they cannot invoke certain commands (erase and kill themselves,\n\
    \   for example, in which case they couldn't be changed).\n   These commands are\
    \ supplements to the related Telnet control codes,\n   and have the same meanings.\
    \  The point here is that it may be far\n   more convenient for a user to be able\
    \ to say \"erase #\" and get the\n   \"#\" to be recognized as the erase character\
    \ by the Server than for\n   the user to get his User Telnet to send the Telnet\
    \ equivalent.  The\n   commands are designated as optional because they may lead\
    \ to severe\n   implementation problems on some Servers, and because the equivalent\n\
    \   functions do, after all, exist in Telnet.\n      Note: the erasing is assumed\
    \ to be performed \"as early as\n      possible\".  That is, the sequence \"erase\
    \ x\" \"erase x\" should come\n      out equivalent to \"erase x\" \"erase\" --\
    \ the second appearance of\n      \"x\" resulting in the erasing of the space\
    \ in the command line.\n      Presumably, this is a sufficiently uncommon path\
    \ that anomalous\n      results would be tolerated by the user community, but\
    \ the intent\n      ought to be clear.\n   The Telnet \"synch\" and \"break\"\
    \ mechanisms are, by their very nature,\n   best left to Telnet.  End of line,\
    \ however, might well be a different\n   story.  Therefore, as a potential convenience,\
    \ the UULP optionally\n   supports \"eol char\" to ask the Server to treat char\
    \ as the end of\n   line character thenceforth.  To revert to Telnet Newline,\
    \ \"eol\"\n   (i.e., no argument, current terminator).\n"
- title: Prompts
  contents:
  - "Prompts\n   Another aspect in which Servers vary while being the same is how\
    \ they\n   indicate \"being at command level\".  Some output \"ready messages\"\
    ;\n   others, \"prompt characters\".  For the UULP, where some functions will\n\
    \   be performed by means of a command's logging in to another system,\n   the\
    \ ability to specify a known prompt character is extremely\n   desirable.  The\
    \ UULP command is \"prompt char\" where char is the\n   character which is to\
    \ be sent when the user's process (on the Server)\n   is at command level.  It\
    \ is explicitly permitted to prefix char to a\n   line consisting of a \"native\"\
    \ prompt or ready message.  Also, this\n   command is explicitly acknowledged\
    \ to be permissible prior to login.\n   (Again, warning must be made of the bad\
    \ results which can ensue if an\n   alphabetic character is chosen.)\n      Note:\
    \ \"prompt\", \"eol\", \"erase\", and \"kill\" may all be re-invoked\n      with\
    \ a new value of char in order to change the relevant setting;\n      all may\
    \ be turned off by invocation with no argument.\n"
- title: Login
  contents:
  - "Login\n   Perhaps the stickiest wicket of them all is the attempt to specify\
    \ a\n   generic login, but here we go.  The UULP login command is \"login\n  \
    \ userident\", where userident is either a locally-acceptable user\n   identifier\
    \ or a Network-wide identifier as discussed above.  Note\n   that for utility\
    \ in contexts to be discussed later, the locally-\n   acceptable form must not\
    \ contain spaces.  Servers may respond to the\n   login attempt with arbitrary\
    \ text (such as a \"message of the day\"),\n   but some line of the response must\
    \ be one of the following: a prompt\n   (as discussed above; indicating, in the\
    \ present context, successful\n   login); \"Password:\"; or \"Invalid ident: userident.\"\
    \  When passwords\n   are required, it is the Server's responsibility either to\
    \ send a mask\n   or to successfully negotiate the Hide Your Input option.\n \
    \  Note that \"login *free\" is specifically defined to require no\n   password.\
    \  (If a \"freeloader\" has access to a User Telnet and has\n   learned of the\
    \ \"*free\" syntax, it is fruitless to assume that he\n   couldn't have also read\
    \ the common password.) If a password must be\n   given, acceptable responses\
    \ are arbitrary text containing a line\n   beginning either with a prompt or with\
    \ \"Login unsuccessful.\" or with\n   \"Account:\".  If an account is requested,\
    \ the responses must be either\n   the \"Login unsuccessful\" message or the text\
    \ containing a prompt\n   already described.  If any errors occur during the login\
    \ sequence,\n   users are to re-try by starting from the login command.  (I.e.,\
    \ it is\n   not required that the Server \"remember\" idents or passwords.)\n\
    \   It is explicitly acknowledged that an acceptable response to \"login\n   *free\"\
    \ is \"Limited access only.\" (followed by a prompt).  This is\n   intended to\
    \ warn (human) users that the free account on the Server in\n   question exists\
    \ only to allow such functions as accepting mail and\n   telling if a particular\
    \ user happens to be logged in.  (For\n   objections to \"loginless\" performance\
    \ of such tasks, see RFC 491.\n   Note also that nothing here says that a Server\
    \ must do anything other\n   than return a prompt in response to \"login *free\"\
    \ in the event that\n   loginless operation is natural to it.)  Given the UULP\
    \ login\n   discipline and the \"prompt\" command, it is reasonably straightforward\n\
    \   for a program to login on a free account and perform one of these\n   functions,\
    \ for if the login command succeeded, the program will \"see\"\n   a guaranteed\
    \ prompt character.\n   To make life simpler for those Hosts which normally have\
    \ some sort of\n   \"daemon\" process service mail and the like, a further expansion\
    \ to\n   login is in order.  The point here is that some Hosts may not know\n\
    \   what sort of process to pass an unqualified \"login *free\" to, whereas\n\
    \   they'd be sure what to do with an explicit request to process mail,\n   do\
    \ a who command, or set up console to console communications.\n   Therefore, UULP\
    \ \"login\" will allow a \"control argument\" (as discussed\n   above) of either\
    \ \"-mail\", \"-who\", or \"-concom\", and the respective\n   UULP commands involved\
    \ must use the respective strings in any login\n   line they transmit.  Again,\
    \ nothing is being said about what a Server\n   has to do with the information,\
    \ but some Servers need/want it.\n"
- title: Usage Information
  contents:
  - "Usage Information\n   Most Servers offer some sort of on-line documentation,\
    \ from calling\n   sequences of commands to entire users' manuals.  There are\
    \ two sorts\n   of information of interest in the UULP environment: \"normal\"\
    \ system\n   information, and information about the particular Server's UULP\n\
    \   implementation.  To learn how to get descriptions of \"native\"\n   commands,\
    \ the UULP command is \"help -sys\" (abbreviation: \"?\").  Note\n   that \"-sys\"\
    \ is viewed as a \"control argument\" and as such prefaced by\n   a hyphen (\"\
    -\") to facilitate distinction from other sorts of name\n   (e.g., command names).\
    \  To get a description of the Server's UULP\n   implementation, \"help -uulp\"\
    .  To get a description of a particular\n   UULP command's implementation, \"\
    help comname\".  To be reminded of how\n   to use the help command, \"help\".\n\
    \      Note: as with command names and Network-wide user names, control\n    \
    \  arguments may be either all upper-case or all lower-case.\n   It is specifically\
    \ acknowledged that \"No peculiarities.\" is an\n   appropriate response to \"\
    help comname\" if nothing of interest need be\n   said about the Server's implementation\
    \ of the UULP command in\n   question.  (After all, we're sparing users the necessity\
    \ of studying\n   a dozen or so users' manuals; the least they can do is to read\
    \ the\n   UULP command list.)  Appropriate information for less taciturn Hosts\n\
    \   to furnish would be such data as local command invoked (if such be\n   the\
    \ case), argument syntax (e.g., pathname description, or name of\n   help file\
    \ about pathnames), \"To be implemented.\", or even \"Not to be\n   implemented.\"\
    \n"
- title: '"Mail"'
  contents:
  - "\"Mail\"\n   Even though a separate mail protocol is being evolved for general\n\
    \   purposes, the UULP needs to address this topic as, by virtue of being\n  \
    \ login based, it allows systems which do access control and sender\n   authentication\
    \ on mail to make these abilities available to users\n   within its framework\
    \ of generic functions.  Therefore, to read one's\n   mailbox, the UULP command\
    \ is \"readmail\".  To have \"live\" input\n   collected and sent to a local user,\
    \ \"mail userident\"; to a remote\n   user, \"mail userident -at hostname\", where\
    \ the arguments have the\n   \"obvious\" meanings.  To send a previously-created\
    \ file, \"mail -f\n   filename userident -at hostname\".  Several useridents may\
    \ be\n   furnished; the delimiter is space (blank).  Similar considerations\n\
    \   apply to hostnames.  If both are lists, they sould be treated\n   pairwise.\
    \  (A more elaborate syntax could be invented to deal with\n   the desire to send\
    \ to several users at a given host and then to other\n   users at other hosts,\
    \ but it seems unnecessary to do so at this\n   point, for multiple invocations\
    \ would get the job done.)\n   The mail command prefaces the message with a line\
    \ identifying the\n   sender (Host and time desirable, but not mandatory).  For\
    \ \"live\"\n   collection, the end of message is indicated by a line consisting\
    \ of\n   only a period (\".\") followed by the regnant line terminator (usually\n\
    \   the Telnet Newline, but see also the discussion of the eol command).\n   If\
    \ remote mail is not successfully transmitted, it is to be saved in\n   a local\
    \ file and that file's name is to be output as part of the\n   failure message.\
    \  (\"Queueing\" for later transmission is admired, but\n   not required.) The\
    \ transmission mechanism will follow the general\n   mail protocol.  Note that\
    \ when invoked with a \"-at\" clause, the mail\n   command will send \"login *free\
    \ -mail\" to the remote Host(s), followed\n   by a mail command with no \"-at\"\
    \ clause.\n   A desirable, but not required, embellishment to \"readmail\" would\
    \ be\n   the accepting of a Host name (\"-at hostname\") to cause the local Host\n\
    \   to go off to the named Host (via \"login *free -mail\") and check for\n  \
    \ mail there.  Several hostnames could, of course, be specified.  A\n   further\
    \ embellishment, which would probably be quite expensive, would\n   be to accept\
    \ \"-all\" as a request to check all Hosts (or, perhaps, all\n   Hosts known to\
    \ have a free account for the purpose) for mail.\n"
- title: Direct Communication
  contents:
  - "Direct Communication\n   The ability to exchange messages directly with other\
    \ logged in users\n   is apparently greatly prized by many users.  Therefore,\
    \ despite the\n   fact that there is a sense in which this function is not within\
    \ the\n   purview of the UULP, we will address it, after a digression.\n     \
    \ Digression: The UULP assumes that there can be straightforward\n      \"front\
    \ ends\" at the various Servers which translate generic\n      function calls\
    \ in a common spelling to calls for specific, pre-\n      existing \"native\"\
    \ functions.  In the area of console to console\n      communications, however,\
    \ this premise does not really hold.  The\n      problem is that both major \"\
    native\" implementations known to the\n      author are seriously flawed.  The\
    \ TENEX \"link\" mechanism is both\n      insecure (you've got no business seeing\
    \ everything I type even if\n      I'm careless enough to let you) and inconvenient\
    \ (why should I be\n      forced to remember that pesky semi-colon?  how do I\
    \ get back into\n      phase after I've forgotten one?).  It is also likely to\
    \ be\n      extremely difficult to simulate on systems which do not force\n  \
    \    Network I/O through local TTY buffers, even if the user interface\n     \
    \ were not subject to criticism.  The Multics \"send_message\"\n      mechanism,\
    \ on the other hand, has a more sophisticated design, but\n      is absurdly expensive.\
    \  Therefore, the UULP mechanism to be\n      described assumes that, for this\
    \ function, new local\n      implementations will be developed to support it.\n\
    \   To permit console to console communications: \"concom -on\"; to refuse,\n\
    \   \"concom -off\".  Default is off.  To enter message-sending mode:\n   \"concom\
    \ userident -at hostname\" (\"-at\" clause is optional).  To exit\n   from message-sending\
    \ mode, type a line consisting of only a period\n   (cf.  Mail, above).  While\
    \ in message-sending mode, each line will be\n   transmitted as a unit.  The first\
    \ message sent by concom must be\n   prefaced by an identifying line, beginning\
    \ \"From:\" and containing an\n   appropriate address to which to reply.  The\
    \ closing period-only line\n   should be transmitted, so as to allow the other\
    \ concom to close as\n   well.  Acceptable error response is \"Not available:\
    \ userident.\"\n   (which neither confirms nor denies the existence of the particular\n\
    \   user -- a matter of concern on the security front).  The command\n   must,\
    \ of course, do whatever is necessary to transmit the messages;\n   i.e., if locally\
    \ invoked, access the local mechanism, and if invoked\n   for remote communications,\
    \ access the remote Host's concom command\n   (via \"login *free -concom\"). \
    \ Thus, a user at a TIP would use the\n   local form of concom on the Host of\
    \ the other party if this is\n   convenient, or would use the remote form on his\
    \ \"usual\" Server if the\n   direct use is inconvenient for some reason (such\
    \ as having no account\n   there, say).\n   The prerequisites for establishing\
    \ communications are to find out if\n   the user is logged in, and what \"address\"\
    \ to use if so.  The\n   mechanism for gathering this information is an expanded\
    \ \"who\"\n   command.  (Note that \"who\" is the UULP command to invoke the generic\n\
    \   who's logged in function, with no constraints on format of reply.)\n   The\
    \ syntax is \"who userident -at hostname\", where both arguments may\n   be multiple.\
    \  If no \"-at\" clause, then check local Host only.\n   Response must begin \"\
    From hostname: userident:\" followed by either an\n   appropriate address (e.g.,\
    \ \"ll\" if local \"concom\" uses TTY numbers\n   and userident is logged in on\
    \ TTY ll), or \"Not available.\"\n   As with mail, a \"-all\" embellishment might\
    \ be pleasant.  Note that\n   the search for the specified user(s) -- whether\
    \ or not \"-all\" is used\n   -- still assumes that a \"login *free -who\" login\
    \ will be used on the\n   appropriate remote Host(s), followed by \"who userident\"\
    .  This is why\n   responses to the expanded who command must be so rigidly specified.\n\
    \   Note also that regardless of whether the inquiry is made in terms of\n   Network-wide\
    \ or local user name, the response must be appropriate for\n   use in \"concom\"\
    .\n   \"Good\" concom implementations will presumably do an expanded who\n   command\
    \ automatically, so as to spare the user the necessity of\n   having to do it\
    \ separately.  Indeed, the -concom control argument to\n   login is defined to\
    \ imply the ability to do a who as well as a concom\n   to cater to this possibility.\
    \  It is tempting to legislate that such\n   an approach be the rule, but the\
    \ implementation implications are not\n   quite clear enough to do so.  The implicit\
    \ who should be viewed as a\n   strong hint to implementers, though.\n"
- title: File Creation and Manipulation
  contents:
  - "File Creation and Manipulation\n   The common command subset must furnish the\
    \ ability to create and\n   manipulate files.  Creation is necessary in order\
    \ to send mail on the\n   one hand, and to produce source files for subsequent\
    \ compilation on\n   the other hand.  Manipulation (such as copying, renaming,\
    \ typing out,\n   and the like) is necessary both as a convenience aspect for\
    \ users who\n   seek to operate only in the common command language and as a means\
    \ of\n   performing desired batch functions (see below).  For file\n   manipulation\
    \ commands, the user could enter the File Transfer\n   Protocol environment. \
    \ However, the FTP user interface is constrained\n   by a very high degree of\
    \ program-drivability.  It is also lacks\n   abbreviations and suffers from the\
    \ lack of mnemonicity dictated by\n   limiting command names to four characters.\
    \  Further, some valuable\n   functions (such as causing a file to be typed out)\
    \ are not dealt\n   with.  Therefore, various UULP file manipulation commands\
    \ are given\n   in Appendix 1.  They need not be addressed in detail here.  However,\n\
    \   some context would be useful:\n   The file manipulation commands assume that\
    \ all Servers have some\n   notion roughly corresponding to \"the user's working\
    \ directory\".  All\n   file names, whether the yet to be invented Network Virtual\
    \ Pathname\n   or the \"local\" variety, are taken to refer to files in this directory\n\
    \   unless otherwise indicated.  That is, the user should not have to\n   furnish\
    \ \"dsk:\" or the like; it is taken as given that when he refers\n   to file \"\
    x\" he means \"the file named 'x' in my current working\n   directory\" and the\
    \ Server \"knows\" what that means.\n   At the present stage of development of\
    \ the UULP, it does not seem\n   fruitful to go into a reasoned explication of\
    \ the following\n   statement.  For now, suffice it to say that those file manipulation\n\
    \   commands (a copy of a foreign file, for example) which need to employ\n  \
    \ the FTP do employ the FTP and let it go at that.  As the context and\n   implications\
    \ of the protocol become more widely understood, the\n   detailed implementation\
    \ notes will be added to the file commands --\n   and refined for the other commands,\
    \ doubtless.  In a way, the common\n   file commands may be viewed as a kind of\
    \ \"User FTP\" of known human\n   interface when they deal with foreign files.\
    \  (And, of course, until\n   there's a Network virtual pathname, the issue doesn't\
    \ really arise.)\n   I expect that an \"identify\" command might be desirable,\
    \ so that UULP\n   commands which have to access other Servers in turn on behalf\
    \ of the\n   specific current user can have the necessary login information\n\
    \   available to them.  Such a command is included in Appendix 1, but\n   should\
    \ rank as speculation for now.\n   On the topic of file creation, matters are\
    \ rather complicated.  It is\n   clear that the ability to create files in the\
    \ UULP environment is\n   extremely desirable.  It is also clear that using mail\
    \ to a fake\n   address to get the file created, then renaming the \"unsent mail\"\
    \ file\n   is too byzantine to expect users to do.  Unfortunately, it is not\n\
    \   clear exactly what the alternative is.  That is, it's fairly clear\n   that\
    \ we need a common editor, but it's not at all clear which editor\n   it should\
    \ be.\n   Two widely-known editors come to mind: TECO and QED.  However, not\n\
    \   everybody has them.  Even if everybody did, the \"dialects\" problem is\n\
    \   bound to be a large one.  Even if all the relevant system programmers\n  \
    \ could agree, there remains the question of whether the intended user\n   population\
    \ would be willing to bother learning a language as complex\n   as TECO or QED.\
    \  Therefore an optional UULP command to be called\n   \"neted\" is proposed.\
    \  (See also RFC 569.) This editor is a line-\n   oriented context editor (no\
    \ \"regular expressions\", but also no line\n   numbers).  It is copiously documented\
    \ in Chapter 4 or the Multics\n   Programmers' Manual, including an annotated\
    \ listing of the (PL/I)\n   source code.  A simple user's guide has been prepared\
    \ (see Appendix\n   3).  Several implementations already exist, and commitments\
    \ have been\n   made for more.  It may also be repugnant to some of the system\n\
    \   programmers who would be called upon to implement it -- which is why\n   it\
    \ is optional, until and unless higher authority makes it mandatory.\n"
- title: Other Protocols
  contents:
  - "Other Protocols\n   The nominal initial impetus for proposing a UULP was to allow\
    \ new\n   Network user protocols to be invokable through a common mechanism,\n\
    \   rather than requiring a new responding mechanism to be built for a\n   new\
    \ contact socket for each new protocol.  Although this goal has\n   been shunted\
    \ into the background by the admission of the true goal of\n   the UULP, it has\
    \ not been dropped completely.  Therefore, to enter\n   the FTP Server environment,\
    \ the UULP command is \"ftp\"; to enter the\n   RJE Server environment, the UULP\
    \ command is \"rje\".  Exit is as per\n   the respective protocols.  (Where possible,\
    \ exit should be back to\n   the UULP environment.)\n"
- title: Invoking Foreign Programs
  contents:
  - "Invoking Foreign Programs\n   There are two broad contexts in which it is desirable\
    \ to cause a\n   specific local program to be invoked from the common command\n\
    \   environment: The User side of the connection may itself be a program,\n  \
    \ and the desired Server side program a specifically cooperating one;\n   this\
    \ is the more sophisticated context, of course.  The less\n   sophisticated context\
    \ assumes that the User side is a \"live\" user,\n   and the desire is to invoke\
    \ a compiler or an object program the user\n   has already compiled in the common\
    \ language -- again as a convenience\n   to the user so that he may operate in\
    \ a sort of \"Server-transparent\"\n   mode.  (The latter case also covers \"\
    batch\" use of the Server; see\n   below.)  In both contexts, the important role\
    \ of the UULP is to\n   specify the mechanisms through which the particular programs\
    \ may be\n   invoked, irrespective of the idiosyncrasies of the Servers' command\n\
    \   languages.\n   Programming languages are much too big a problem to tackle\
    \ here.\n   However, assuming that a user somehow manages to create a source\n\
    \   program, he still wants some commonality of spelling in invoking the\n   appropriate\
    \ compiler, or even the object program.  As an optional but\n   strongly recommended\
    \ UULP command, then, \"call name\" should invoke\n   object program name (where\
    \ the named program may be a \"native\"\n   command with arguments specified as\
    \ appropriate).  The values \"pl1\",\n   \"-basic\", \"-fortran\", \"-lisp\",\
    \ etc., should be recognized as\n   requesting the invocation of the appropriate\
    \ language processor (to\n   operate on a named source file or interpretively/interactively\
    \ if no\n   source file was named), with \"reasonable\" defaults in effect.  Note\n\
    \   that this all is meant to imply that \"native\" commands are not\n   directly\
    \ invokable from the UULP environment (other than by \"call\"),\n   to avoid potential\
    \ naming conflicts between system commands and new\n   UULP commands.\n      Note\
    \ that the \"call\" command in the UULP environment constitutes a\n      rubric\
    \ for \"parallel\" computation, given any ad hoc convention for\n      the return\
    \ of completion information.  (Writing on the Telnet\n      write socket plus\
    \ 2 would seem appropriate, provided the initiator\n      has the ability to \"\
    listen\" for the rfc; but even a response in\n      the data stream as a special-cased\
    \ program is assumed on the\n      \"user\"side anyway.)\n"
- title: Other Matters
  contents:
  - "Other Matters\n   The topic of \"batch\" mode merits some attention.  As with\
    \ the file\n   manipulation commands, more consultation is necessary for a firm\n\
    \   spec.  However, I suspect that a \"-batch\" control argument to login\n  \
    \ should initiate batch mode processing by the Server, and given the\n   call\
    \ and identify commands all we might then require is a convention\n   for designating\
    \ the output file in order to return it via a copy\n   command in the \"job\"\
    \ itself (if output is to be returned rather than\n   stored at the Server). \
    \ Of course, -batch will probably need some\n   substructure as to password and\
    \ timing matters.  More details will\n   emerge in this area in future iterations.\n\
    \   An admittedly fictionalized scenario might look like this:\n   login Me -batch\
    \ -pw xxx -shift 3\n   copy *452<me>source.text source.pl2\n   call -pl2 source\n\
    \   call source input output\n   identify Me2 yyy\n   copy output *555>root>Me>output452\n\
    \   logout\n   where user \"Me\" wants the Server receiving the commands (either\n\
    \   directly from him at a TIP or perhaps from some other Server on which\n  \
    \ he has created a file containing them) to set up a batch job for him,\n   with\
    \ password \"xxx\", to be run on Shift 3 (whenever that is).  The\n   job first\
    \ copies file \"source.text\" from directory \"<me>\" on Host 452\n   into local\
    \ file \"source.pl2\", then compiles it with the local PL2\n   compiler, executes\
    \ it (assuming a \"Not found\" response would go into\n   a known file if compilation\
    \ had failed) with specified arguments\n   (presumably the names of files for\
    \ input and output), then copies the\n   \"output\" file to Host 555's file hierarchy\
    \ at the indicated place,\n   using the user identifier \"Me2\" and the password\
    \ \"yyy\".  It's not\n   elegant, but it ought to work.\n   Finally, on the topic\
    \ of logging out, the UULP command is \"logout\".\n   The Server must close the\
    \ Telnet connection after doing whatever is\n   appropriate to effect a logout.\
    \  To retain the Telnet connection,\n   \"logout -save\".  Having the Server close\
    \ is viewed as a convenience\n   for the user, in that it spares him the necessity\
    \ of causing his User\n   Telnet to close.  It is also desirable for program-driven\n\
    \   applications, so as not to leave the connections \"dangling\" and not\n  \
    \ to require possibly complex negotiations with the User side to break\n   the\
    \ connection.\n"
- title: APPENDIX 1.  THE COMMON COMMAND SUBSET
  contents:
  - "APPENDIX 1.  THE COMMON COMMAND SUBSET\n   Syntax                           \
    \                        Opt\n   I. \"Set-up\" Commands\n   login id arg\n   The\
    \ id may be Network-wide or Host-specific.\n   \"*free\" is reserved.\n   The\
    \ arg may be \"-mail\", \"-who\", \"-concom\",\n   \"-batch\", or may be absent.\n\
    \   Result is to be either logged in or passed off to appropriate daemon.\n  \
    \ prompt char\n   Specifies that char is to become or\n   precede the normal prompt\
    \ message.\n   Acceptable prior to login.\n   erase char                     \
    \                           X\n   Specifies that char is the erase character.\n\
    \   Invocation with no argument reverts to default.\n   kill char            \
    \                                     X\n   Specifies that char is the kill character.\n\
    \   Invocation with no argument reverts to default.\n   eol char             \
    \                                     X\n   Specifies that char is the newline\
    \ character.\n   Invocation with no argument reverts to default.\n   local\n \
    \  Enter the local command environment.\n   ftp\n   Enter the FTP environment.\n\
    \   rje\n   Enter the RJE environment.\n   logout\n   Logout and sever the Telnet\
    \ connection.\n   logout -save\n   Logout but keep the Telnet connection.\n  \
    \ map\n   Apply the case-mapping conventions of Appendix 2.\n   Required on Hosts\
    \ to which case is significant.\n   identify id arg                          \
    \                  X\n   Specifies that id is to be used as the user\n   identifier\
    \ in any \"fanout\" logins required.\n   If arg is specified, it is to be either\
    \ the\n   password to be used in such logins or \"-pw\", in\n   which case the\
    \ Server will furnish a mask or negotiate the Hide Your\n   Input Telnet option;\
    \ if no arg, then no password is to be furnished\n   on fanout logins.\n   Default\
    \ id is \"*free\".\n   II.  Communications Commands\n   readmail\n   Type out\
    \ \"mailbox\".\n   readmail (id) -at host                                    \
    \ X\n   Type out \"mailbox\" on remote Host host.\n   Multiple Hosts may be specified,\n\
    \   separated by spaces (blanks).\n   Implies ability to change working directory\n\
    \   at host to directory implied by known\n   user identifier, or (optionally)\
    \ by id.\n   readmail -all                                              XX\n \
    \  Search for mail.\n   Extremely optional.\n   mail id\n   Collect input until\
    \ line consisting of\n   only a period (\".\") for mailing to local\n   user specified\
    \ by id.\n   mail -f file id\n   Send contents of specified file to specified\n\
    \   local user.\n   mail id -at host\n   Collect input until line consisting of\n\
    \   only a period (\".\") for mailing to remote\n   user(s) at specified Host(s).\
    \ Both id and\n   host may be multiple, separated by spaces.\n   (If multiple,\
    \ they should be taken pairwise.)\n   mail -f file id -at host\n   Send contents\
    \ of specified file to specified\n   remote user(s).\n   who\n   The generic who's\
    \ logged in command.\n   who id\n   Is id logged in? Constrained responses.\n\
    \   who id -at host\n   Is the specified user logged in at the\n   specified host.\
    \ Constrained responses.\n   concom -on\n   Enable console to console communications.\n\
    \   concom -off\n   Disable console to console communications.\n   concom id\n\
    \   Send messages to specified local user\n   until line consisting of only a\
    \ period (\".\").\n   concom id -at host\n   Send messages to specified remote\
    \ user.\n   III.  File Commands\n   type path\n   Type out the contents of the\
    \ specified file.\n   Pathname may be local or Network-wide.\n   Default to current\
    \ working directory.\n   listdir\n   List the contents of the current working\
    \ directory.  (Local format\n   acceptable.)\n   listdir path\n   List the contents\
    \ of the specified directory.\n   rename old new\n   Change the specified file's\
    \ name as indicated.\n   addname old new                                     \
    \        X\n   Give the specified file the specified extra name.\n   delete path\n\
    \   Get rid of the specified file.\n   (\"Expunge\" if necessary.)\n   copy from\
    \ to\n   Make a copy of the file specified by the first pathname at the second\n\
    \   pathname.\n   link from to                                               \
    \ X\n   If your file system has such a concept, make a \"link\" between the two\n\
    \   pathnames.  If no second argument,\n   use same entry name in working directory.\n\
    \   status path st                                              X\n   If your\
    \ file system has such a concept, give status information about\n   the specified\
    \ file or directory.\n   changewd path                                       \
    \        X\n   If no argument, return to the \"home\" directory.\n   typewd\n\
    \   Type out the pathname of the current working directory.\n   neted path\n \
    \  See Appendix 3.\n   IV.  Invoking \"Native\" Programs\n   call name (args)\n\
    \   Invoke the specified program with the\n   specified arguments (if any).\n\
    \   The following names are reserved to indicate the\n   invocation of the corresponding\
    \ language processor: \"-pl1\", \"-basic\",\n   \"-fortran\", \"-lisp\".\n   (If\
    \ no source file indicated, invoke \"interpretively\" if possible.)\n   V. On-line\
    \ Documentation\n   help name\n   Type out information about the specified UULP\
    \ command.  If name is\n   \"-sys\", type out information about how to use the\
    \ local system's help\n   mechanism; if\n   \"uulp\", about the local system's\
    \ UULP implementation.  If no name\n   given,  describe the command itself.\n"
- title: APPENDIX 2.  MAP COMMAND CONVENTIONS
  contents:
  - "APPENDIX 2.  MAP COMMAND CONVENTIONS\n   This appendix will eventually contain\
    \ the case-mapping conventions\n   detailed in RFC 411.\n"
- title: APPENDIX 3.  EDIT COMMAND REQUESTS
  contents:
  - "APPENDIX 3.  EDIT COMMAND REQUESTS\n   This appendix will eventually contain\
    \ descriptions of the neted\n   command requests (a draft of which now exists),\
    \ or a reference to the\n   Resource Notebook version, if that gets published\
    \ first.  For now, it\n   should be sufficient to point out that the requests\
    \ are basically\n   locate, next, top, change, save, and quit -- i.e., it's the\
    \ \"old-\n   fashioned\" flavor of context editor.\n   [Optical character recognition\
    \ and initial proofreading performed\n   11/20-21/04 by The Author.  A few original\
    \ typos were corrected; some\n   may remain.]\n"
