- title: __initial_text__
  contents:
  - "                  A User Agent Configuration Mechanism\n                 For\
    \ Multimedia Mail Format Information\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard.  Distribution of this memo is\n\
    \   unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo suggests a file format to be used to inform multiple mail\n\
    \   reading user agent programs about the locally-installed facilities\n   for\
    \ handling mail in various formats.  The mechanism is explicitly\n   designed\
    \ to work with mail systems based Internet mail as defined by\n   RFC's 821 (STD\
    \ 10), 822 (STD 11), 934, 1049 (STD 11), 1113, and the\n   Multipurpose Internet\
    \ Mail Extensions, known as MIME.  However, with\n   some extensions it could\
    \ probably be made to work for X.400-based\n   mail systems as well.  The format\
    \ and mechanism are proposed in a\n   manner that is generally operating-system\
    \ independent.  However,\n   certain implementation details will inevitably reflect\
    \ operating\n   system differences, some of which will have to be handled in a\n\
    \   uniform manner for each operating system.  This memo makes such\n   situations\
    \ explicit, and, in an appendix, suggests a standard\n   behavior under the UNIX\
    \ operating system.\n"
- title: Introduction
  contents:
  - "Introduction\n   The electronic mail world is in the midst of a transition from\n\
    \   single-part text-only mail to multi-part, multi-media mail.  In\n   support\
    \ of this transition, various extensions to RFC 821 and RFC 822\n   have been\
    \ proposed and/or adopted, notably including MIME [RFC-1521].\n   Various parties\
    \ have demonstrated extremely high-functionality\n   multimedia mail, but the\
    \ problem of mail interchange between\n   different user agents has been severe.\
    \  In general, only text\n   messages have been shared between user agents that\
    \ were not\n   explicitly designed to work together.  This limitation is not\n\
    \   compatible with a smooth transition to a multi-media mail world.\n   One approach\
    \ to this transition is to modify diverse sets of mail\n   reading user agents\
    \ so that, when they need to display mail of an\n   unfamiliar (non-text) type,\
    \ they consult an external file for\n   information on how to display that file.\
    \  That file might say, for\n   example, that if the content-type of a message\
    \ is \"foo\" it can be\n   displayed to the user via the \"displayfoo\" program.\n\
    \   This approach means that, with a one-time modification, a wide\n   variety\
    \ of mail reading programs can be given the ability to display\n   a wide variety\
    \ of types of message.  Moreover, extending the set of\n   media types supported\
    \ at a site becomes a simple matter of installing\n   a binary and adding a single\
    \ line to a configuration file.  Crucial\n   to this scheme, however, is that\
    \ all of the user agents agree on a\n   common representation and source for the\
    \ configuration file.  This\n   memo proposes such a common representation.\n"
- title: Location of Configuration Information
  contents:
  - "Location of Configuration Information\n   Each user agent must clearly obtain\
    \ the configuration information\n   from a common location, if the same information\
    \ is to be used to\n   configure all user agents.  However, individual users should\
    \ be able\n   to override or augment a site's configuration.  The configuration\n\
    \   information should therefore be obtained from a designated set of\n   locations.\
    \  The overall configuration will be obtained through the\n   virtual concatenation\
    \ of several individual configuration files known\n   as mailcap files.  The configuration\
    \ information will be obtained\n   from the FIRST matching entry in a mailcap\
    \ file, where \"matching\"\n   depends on both a matching content-type specification,\
    \ an entry\n   containing sufficient information for the purposes of the application\n\
    \   doing the searching, and the success of any test in the \"test=\"\n   field,\
    \ if present.\n   The precise location of the mailcap files is operating-system\n\
    \   dependent.  A standard location for UNIX is specified in Appendix A.\n"
- title: Overall Format of a Mailcap File
  contents:
  - "Overall Format of a Mailcap File\n   Each mailcap file consists of a set of entries\
    \ that describe the\n   proper handling of one media type at the local site.\n\
    \   For example, one line might tell how to display a message in Group\n   III\
    \ fax format.  A mailcap file consists of a sequence of such\n   individual entries,\
    \ separated by newlines (according to the operating\n   system's newline conventions).\
    \ Blank lines and lines that start with\n   the \"#\" character (ASCII 35) are\
    \ considered comments, and are\n   ignored.  Long entries may be continued on\
    \ multiple lines if each\n   non-terminal line ends with a backslash character\
    \ ('\\', ASCII 92), in\n   which case the multiple lines are to be treated as\
    \ a single mailcap\n   entry.  Note that for such \"continued\" lines, the backslash\
    \ must be\n   the last character on the line to be continued.\n   Thus the overall\
    \ format of a mailcap file is given, in the modified\n   BNF of RFC 822, as:\n\
    \         Mailcap-File = *Mailcap-Line\n         Mailcap-Line = Comment / Mailcap-Entry\n\
    \         Comment = NEWLINE  /  \"#\" *CHAR NEWLINE\n         NEWLINE = <newline\
    \ as defined by OS convention>\n   Note that the above specification implies that\
    \ comments must appear\n   on lines all to themselves, with a \"#\" character\
    \ as the first\n   character on each comment line.\n"
- title: Format of a Mailcap Entry
  contents:
  - "Format of a Mailcap Entry\n   Each mailcap entry consists of a number of fields,\
    \ separated by\n   semi-colons.  The first two fields are required, and must occur\
    \ in\n   the specified order.  The remaining fields are optional, and may\n  \
    \ appear in any order.\n   The first field is the content-type, which indicates\
    \ the type of data\n   this mailcap entry describes how to handle.  It is to be\
    \ matched\n   against the type/subtype specification in the \"Content-Type\" header\n\
    \   field of an Internet mail message.  If the subtype is specified as\n   \"\
    *\", it is intended to match all subtypes of the named content-type.\n   The second\
    \ field, view-command, is a specification of how the message\n   or body part\
    \ can be viewed at the local site.  Although the syntax of\n   this field is fully\
    \ specified, the semantics of program execution are\n   necessarily somewhat operating\
    \ system dependent.  UNIX semantics are\n   given in Appendix A.\n   The optional\
    \ fields, which may be given in any order, are as follows:\n   -- The \"compose\"\
    \ field may be used to specify a program that can be\n      used to compose a\
    \ new body or body part in the given format.  Its\n      intended use is to support\
    \ mail composing agents that support the\n      composition of multiple types\
    \ of mail using external composing\n      agents.  As with the view-command, the\
    \ semantics of program\n      execution are operating system dependent, with UNIX\
    \ semantics\n      specified in Appendix A.  The result of the composing program\
    \ may\n      be data that is not yet suitable for mail transport -- that is, a\n\
    \      Content-Transfer-Encoding may need to be applied to the data.\n   -- The\
    \ \"composetyped\" field is similar to the \"compose\" field, but is\n      to\
    \ be used when the composing program needs to specify the\n      Content-type\
    \ header field to be applied to the composed data.  The\n      \"compose\" field\
    \ is simpler, and is preferred for use with existing\n      (non-mail-oriented)\
    \ programs for composing data in a given format.\n      The \"composetyped\" field\
    \ is necessary when the Content-type\n      information must include auxilliary\
    \ parameters, and the\n      composition program must then know enough about mail\
    \ formats to\n      produce output that includes the mail type information.\n\
    \   -- The \"edit\" field may be used to specify a program that can be used\n\
    \      to edit a body or body part in the given format.  In many cases,\n    \
    \  it may be identical in content to the \"compose\" field, and shares\n     \
    \ the operating-system dependent semantics for program execution.\n   -- The \"\
    print\" field may be used to specify a program that can be\n      used to print\
    \ a message or body part in the given format.  As with\n      the view-command,\
    \ the semantics of program execution are operating\n      system dependent, with\
    \ UNIX semantics specified in Appendix A.\n   -- The \"test\" field may be used\
    \ to test some external condition\n      (e.g., the machine architecture, or the\
    \ window system in use) to\n      determine whether or not the mailcap line applies.\
    \  It specifies a\n      program to be run to test some condition.  The semantics\
    \ of\n      execution and of the value returned by the test program are\n    \
    \  operating system dependent, with UNIX semantics specified in\n      Appendix\
    \ A.  If the test fails, a subsequent mailcap entry should\n      be sought. \
    \ Multiple test fields are not permitted -- since a test\n      can call a program,\
    \ it can already be arbitrarily complex.\n   -- The \"needsterminal\" field indicates\
    \ that the view-command must be\n      run on an interactive terminal.  This is\
    \ needed to inform window-\n      oriented user agents that an interactive terminal\
    \ is needed.  (The\n      decision is not left exclusively to the view-command\
    \ because in\n      some circumstances it may not be possible for such programs\
    \ to\n      tell whether or not they are on interactive terminals.)  The\n   \
    \   needsterminal command should be assumed to apply to the compose\n      and\
    \ edit commands, too, if they exist.  Note that this is NOT a\n      test -- it\
    \ is a requirement for the environment in which the\n      program will be executed,\
    \ and should typically cause the creation\n      of a terminal window when not\
    \ executed on either a real terminal\n      or a terminal window.\n   -- The \"\
    copiousoutput\" field indicates that the output from the\n      view-command will\
    \ be an extended stream of output, and is to be\n      interpreted as advice to\
    \ the UA (User Agent mail-reading program)\n      that the output should be either\
    \ paged or made scrollable. Note\n      that it is probably a mistake if needsterminal\
    \ and copiousoutput\n      are both specified.\n   -- The \"description\" field\
    \ simply provides a textual description,\n      optionally quoted, that describes\
    \ the type of data, to be used\n      optionally by mail readers that wish to\
    \ describe the data before\n      offering to display it.\n   -- The \"textualnewlines\"\
    \ field, if set to any non-zero value,\n      indicates that this type of data\
    \ is line-oriented and that, if\n      encoded in base64, all newlines should\
    \ be converted to canonical\n      form (CRLF) before encoding, and will be in\
    \ that form after\n      decoding.  In general, this field is needed only if there\
    \ is\n      line-oriented data of some type other than text/* or non-line-\n \
    \     oriented data that is a subtype of text.\n   -- The \"x11-bitmap\" field\
    \ names a file, in X11 bitmap (xbm) format,\n      which points to an appropriate\
    \ icon to be used to visually denote\n      the presence of this kind of data.\n\
    \   -- The \"nametemplate\" field gives a file name format, in which %s\n    \
    \  will be replaced by a short unique string to give the name of the\n      temporary\
    \ file to be passed to the viewing command.  This is only\n      expected to be\
    \ relevant in environments where filename extensions\n      are meaningful, e.g.,\
    \ one coulld specify that a GIF file being\n      passed to a gif viewer should\
    \ have a name eding in \".gif\" by using\n      \"nametemplate=%s.gif\".\n   Any\
    \ other fields beginning with \"x-\" may be included for local or\n   mailer-specific\
    \ extensions of this format.  Implementations should\n   simply ignore all such\
    \ unrecognized fields to permit such extensions,\n   some of which might be standardized\
    \ in a future version of this\n   document.\n   Some of the fields above, such\
    \ as \"needsterminal\", apply to the\n   actions of the view-command, edit-command,\
    \ and compose-command,\n   alike.  In some unusual cases, this may not be desirable,\
    \ but\n   differentiation can be accomplished via separate mailcap entries,\n\
    \   taking advantage of the fact that subsequent mailcap entries are\n   searched\
    \ if an earlier mailcap entry does not provide enough\n   information:\n     \
    \  application/postscript; ps-to-terminal %s;\\ needsterminal\n       application/postscript;\
    \ ps-to-terminal %s; \\compose=idraw %s\n   In RFC 822 modified BNF, the following\
    \ grammar describes a mailcap\n   entry:\n         Mailcap-Entry = typefield ;\
    \ view-command\n                             [\";\" 1#field]\n         typefield\
    \ = propertype / implicit-wild\n         propertype = type \"/\" wildsubtype\n\
    \         implicitwild = type\n         wildsubtype = subtype / \"*\"\n      \
    \   view-command = mtext\n         mtext = *mchar\n         mchar = schar / qchar\n\
    \         schar = * <any CHAR except \";\",\"\\\", and CTLS>\n         qchar =\
    \ \"\\\" CHAR ; may quote any char\n         field = flag / namedfield\n     \
    \    namedfield = fieldname \"=\" mtext\n         flag = \"needsterminal\"   ;\
    \ All these literals are to\n              / \"copiousoutput\"   ; be interpreted\
    \ as\n              / x-token           ; case-insensitive\n         fieldname\
    \ =    / \"compose\"      ;Also all of these\n                        / \"composetyped\"\
    \ ;are case-insensitive.\n                        / \"print\"\n              \
    \          / \"edit\"\n                        / \"test\"\n                  \
    \      / \"x11-bitmap\"\n                        / \"textualnewlines\"\n     \
    \                   / \"description\"\n                        / x-token\n   Note\
    \ that \"type\", \"subtype\", and \"x-token\" are defined in MIME.  Note\n   also\
    \ that while the definition of \"schar\" includes the percent sign,\n   \"%\"\
    , this character has a special meaning in at least the UNIX\n   semantics, and\
    \ will therefore need to be quoted as a qchar to be used\n   literally.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The author wishes to thank Malcolm Bjorn Gillies, Dan Heller,\
    \ Olle\n   Jaernefors, Keith Moore, Luc Rooijakkers, and the other members of\n\
    \   the IETF task force on mail extensions for their comments on earlier\n   versions\
    \ of this draft.  If other acknowledgements were neglected,\n   please let me\
    \ know, as it was surely accidental.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo. \
    \ However, the use of\n   the mechanisms described in this memo can make it easier\
    \ for\n   implementations to slip into the kind of security problems discussed\n\
    \   in the MIME document.  Implementors and mailcap administrators should\n  \
    \ be aware of these security considerations, and in particular should\n   exercise\
    \ caution in the choice of programs to be listed in a mailcap\n   file for automatic\
    \ execution.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Nathaniel S. Borenstein\n   MRE 2D-296, Bellcore\n   445\
    \ South St.\n   Morristown, NJ 07962-1910\n   EMail: nsb@bellcore.com\n   Phone:\
    \ +1 201 829 4270\n   Fax:  +1 201 829 7019\n"
- title: 'Appendix A:  Implementation Details for UNIX'
  contents:
  - "Appendix A:  Implementation Details for UNIX\n   Although this memo fully specifies\
    \ a syntax for \"mailcap\" files, the\n   semantics of the mailcap file are of\
    \ necessity operating-system\n   dependent in four respects.  In order to clarify\
    \ the intent, and to\n   promote a standard usage, this appendix proposes a UNIX\
    \ semantics for\n   these four cases.  If a mailcap mechanism is implemented on\
    \ non-UNIX\n   systems, similar semantic decisions should be made and published.\n"
- title: Location of the Mailcap File(s)
  contents:
  - "Location of the Mailcap File(s)\n   For UNIX, a path search of mailcap files\
    \ is specified.  The default\n   path search is specified as including at least\
    \ the following:\n   $HOME/.mailcap:/etc/mailcap:/usr/etc/mailcap:/usr/local/etc/mailcap\n\
    \   However, this path may itself be overridden by a path specified by\n   the\
    \ MAILCAPS environment variable.\n"
- title: Semantics of executable commands
  contents:
  - "Semantics of executable commands\n   Several portions of a mailcap entry specify\
    \ commands to be executed.\n   In particular, the mandatory second fie ld, the\
    \ view-command, takes a\n   command to be executed, as do the optional print,\
    \ edit, test, and\n   compose fields.\n   On a UNIX system, such commands will\
    \ each be a full shell command\n   line, including the path name for a program\
    \ and its arguments.\n   (Because of differences in shells and the implementation\
    \ and behavior\n   of the same shell from one system to another, it is specified\
    \ that\n   the command line be intended as input to the Bourne shell, i.e., that\n\
    \   it is implicitly preceded by \"/bin/sh -c \" on the command line.)\n   The\
    \ two characters \"%s\", if used, will be replaced by the name of a\n   file for\
    \ the actual mail body data.  In the case of the edit adn\n   view-command, the\
    \ body part will be passed to this command as\n   standard input unless one or\
    \ more instances of \"%s\" appear in the\n   view-command, in which case %s will\
    \ be replaced by the name of a file\n   containing the body part, a file which\
    \ may have to be created before\n   the view-command program is executed.  (Such\
    \ files cannot be presumed\n   to continue to exist after the view-command program\
    \ exits.  Thus a\n   view-command that wishes to exit and continue processing\
    \ in the\n   background should take care to save the data first.)  In the case\
    \ of\n   the compose and composetyped commands, %s should be replaced by the\n\
    \   name of a file to which the composed data should be written by the\n   programs\
    \ named in the compose or composedtyped commands.  Thus, the\n   calling program\
    \ will look in that file later in order to retrieve the\n   composed data. If\
    \ %s does not appear in the compose or composetyped\n   commands, then the composed\
    \ data will be assumed to be written by the\n   composing programs to standard\
    \ output.\n   Furthermore, any occurrence of \"%t\" will be replaced by the content-\n\
    \   type and subtype specification.  (That is, if the content-type is\n   \"text/plain\"\
    , then %t will be replaced by \"text/plain\".)  A literal %\n   character may\
    \ be quoted as \\%.  Finally, named parameters from the\n   Content-type field\
    \ may be placed in the command execution line using\n   \"%{\" followed by the\
    \ parameter name and a closing \"}\" character.  The\n   entire parameter should\
    \ appear as a single command line argument,\n   regardless of embedded spaces.\
    \  Thus, if the message has a Content-\n   type line of:\n         Content-type:\
    \  multipart/mixed; boundary=42\n   and the mailcap file has a line of:\n    \
    \     multipart/*; /usr/local/bin/showmulti \\\n           %t %{boundary}\n  \
    \ then the equivalent  of  the  following  command  should  be\n   executed:\n\
    \        /usr/local/bin/showmulti multipart/mixed 42\n   If the content-type is\
    \ \"multipart\" (any subtype), then the two\n   characters \"%n\" will be replaced\
    \ by an integer giving the number of\n   sub-parts within the multipart entity.\
    \  Also, the two characters \"%F\"\n   will be replaced by a set of arguments,\
    \ twice as many arguments as\n   the number of sub-parts, consisting of alternating\
    \ content-types and\n   file names for each part in turn.  Thus if multipart entity\
    \ has three\n   parts, \"%F\" will be replaced by the equivalent of \"content-type1\n\
    \   file-name1 content-type2 file-name2 content-type3 file-name3\".\n"
- title: Semantics of the "test" field
  contents:
  - "Semantics of the \"test\" field\n   The \"test\" field specifies a program to\
    \ be used to test whether or\n   not the current mailcap line applies.  This can\
    \ be used, for example,\n   to have a mailcap line that only applies if the X\
    \ window system is\n   running, or if the user is running on a SPARCstation with\
    \ a\n   /dev/audio.  The value of the \"test\" field is a program to run to\n\
    \   test such a condition.  The precise program to run and arguments to\n   give\
    \ it are determined as specified in the previous section.  The\n   test program\
    \ should return an exit code of zero if the condition is\n   true, and a non-zero\
    \ code otherwise.\n"
- title: Semantics of the "compose" field
  contents:
  - "Semantics of the \"compose\" field\n   On UNIX, the composing program is expected\
    \ to produce a data stream\n   for such a body part as its standard output.  The\
    \ program will be\n   executed with the command line arguments determined as specified\n\
    \   above.  The data returned via its standard output will be given a\n   Content-Type\
    \ field that has no supplementary parameters.  For\n   example, the following\
    \ mailcap entry:\n        audio/basic; /usr/local/bin/showaudio %t\n         \
    \ compose = /usr/local/bin/recordaudio\n   would result in tagging the data composed\
    \ by the \"recordaudio\"\n   program as:\n        Content-Type: audio/basic\n\
    \   If this is unacceptable -- for example, in the case of multipart mail\n  \
    \ a \"boundary\" parameter is required -- then the \"compose\" field cannot\n\
    \   be used.  Instead, the \"composetyped\" field should be used in the\n   mailcap\
    \ file.\n"
- title: Semantics of the "composetyped" field
  contents:
  - "Semantics of the \"composetyped\" field\n   The \"composetyped\" filed is much\
    \ like the \"compose\" field, except\n   that it names a composition program that\
    \ produces, not raw data, but\n   data that includes a MIME-conformant type specification.\
    \  The program\n   will be executed with the command line arguments determined\
    \ as\n   specified above.  The data returned via its standard output must\n  \
    \ begin with a Content-Type header, followed optionally by other\n   Content-*\
    \ headers, and then by a blank line and the data.  For\n   example, the following\
    \ mailcap entry:\n        multipart/mixed; /usr/local/bin/showmulti %t \\\n  \
    \        %{boundary}; \\\n          composetyped = /usr/local/bin/makemulti\n\
    \   would result in executing the \"makemulti\" program, which would be\n   expected\
    \ to begin its output with a line of the form:\n        Content-Type: multipart/mixed;\
    \ boundary=foobar\n   Note that a composition program need not encode binary data\
    \ in base64\n   or quoted-printable. It remains the responsibility of the software\n\
    \   calling the composition program to encode such data as necessary.\n   However,\
    \ if a composing program does encode data, which is not\n   encouraged, it should\
    \ announce that fact using a Content-Transfer-\n   Encoding header in the standard\
    \ manner defined by MIME.  Because such\n   encodings must be announced by such\
    \ a header, they are an option only\n   for composetyped programs, not for compose\
    \ programs.\n"
- title: 'Appendix B: Sample Mailcap File'
  contents:
  - "Appendix B: Sample Mailcap File\n   The following is an example of a mailcap\
    \ file for UNIX that\n   demonstrates most of the syntax above.  It contains explanatory\n\
    \   comments where necessary.\n         # Mailcap file for Bellcore lab 214.\n\
    \         #\n         # The next line sends \"richtext\" to the richtext\n   \
    \      program\n         text/richtext; richtext %s; copiousoutput\n         #\n\
    \         # Next, basic u-law audio\n         audio/*; showaudio; test=/usr/local/bin/hasaudio\n\
    \         #\n         # Next, use the xview program to handle several image\n\
    \         formats\n         image/*; xview %s; test=/usr/local/bin/RunningX\n\
    \         #\n         # The ATOMICMAIL interpreter uses curses, so needs a\n \
    \        terminal\n         application/atomicmail; /usr/local/bin/atomicmail\
    \ %s; \\\n             needsterminal\n         #\n         # The next line handles\
    \ Andrew format,\n         #   if ez and ezview are installed\n         x-be2;\
    \ /usr/andrew/bin/ezview %s; \\\n            print=/usr/andrew/bin/ezprint %s\
    \ ; \\\n            compose=/usr/andrew/bin/ez -d %s \\;\n            edit=/usr/andrew/bin/ez\
    \ -d %s; \\;\n            copiousoutput\n         #\n         # The next silly\
    \ example demonstrates the use of\n         quoting\n         application/*; echo\
    \ \"This is \\\"%t\\\" but \\\n            is 50 \\% Greek to me\" \\; cat %s;\
    \ copiousoutput\n"
- title: 'Appendix C:  A Note on Format Translation'
  contents:
  - "Appendix C:  A Note on Format Translation\n   It has been suggested that another\
    \ function of a mailcap-like\n   mechanism might be to specify the locally available\
    \ tools for\n   document format translation.  For example, the file could designate\
    \ a\n   program for translating from format A to format B, another for\n   translating\
    \ from format B to format C, and finally a mechanism for\n   displaying format\
    \ C.  Although this mechanism would be somewhat\n   richer than the current mailcap\
    \ file, and might conceivably also have\n   utility at the message transport layer,\
    \ it significantly complicates\n   the processing effort necessary for a user\
    \ agent that simply wants to\n   display a message in format A.  Using the current,\
    \ simpler, mailcap\n   scheme, a single line could tell such a user agent to display\
    \ A-\n   format mail using a pipeline of translators and the C-format viewer.\n\
    \   This memo resists the temptation to complicate the necessary\n   processing\
    \ for a user agent to accomplish this task.  Using the\n   mailcap format defined\
    \ here, it is only necessary to find the correct\n   single line in a mailcap\
    \ file, and to execute the command given in\n   that line.\n"
- title: References
  contents:
  - "References\n     [RFC-822] Crocker, D., \"Standard for the format of ARPA Internet\n\
    \     text messages\", STD 11, RFC 822, UDEL, August 1982.\n     [RFC-1521] Borenstein,\
    \ N., and N.  Freed, \"MIME (Multipurpose\n     Internet Mail Extensions) Part\
    \ One: Mechanisms for Specifying and\n     Describing the Format of Internet Message\
    \ Bodies\", RFC 1521,\n     Bellcore, Innosoft, September 1993.\n"
