- title: __initial_text__
  contents:
  - '         A Vision of an Integrated Internet Information Service

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This paper lays out a vision of how Internet information services\n\
    \   might be integrated over the next few years, and discusses in some\n   detail\
    \ what steps will be needed to achieve this integration.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Thanks to the whole gang of information service wonks who\
    \ have\n   wrangled with us about the future of information services in\n   countless\
    \ bar bofs (in no particular order): Cliff Lynch, Cliff\n   Neuman, Alan Emtage,\
    \ Jim Fullton, Joan Gargano, Mike Schwartz, John\n   Kunze, Janet Vratny, Mark\
    \ McCahill, Tim Berners-Lee, John Curran,\n   Jill Foster, and many others. Extra\
    \ special thanks to George Brett of\n   CNIDR and Anders Gillner of RARE, who\
    \ have given us the opportunity\n   to start tying together the networking community\
    \ and the librarian\n   community.\n"
- title: 1. Disclaimer
  contents:
  - "1. Disclaimer\n   This paper represents only the opinions of its authors; it\
    \ is not an\n   official policy statement of the IIIR Working Group of the IETF,\
    \ and\n   does not represent an official consensus.\n"
- title: 2. Introduction
  contents:
  - "2. Introduction\n   The current landscape in information tools is much the same\
    \ as the\n   landscape in communications networks in the early 1980's.  In the\n\
    \   early 80's, there were a number of proprietary networking protocols\n   that\
    \ connected large but autonomous regions of computers, and it was\n   difficult\
    \ to coalesce these regions into a unified network. Today, we\n   have a number\
    \ of large but autonomous regions of networked\n   information.  We have a vast\
    \ set of FTPable files, a budding WAIS\n   network, a budding GOPHER network,\
    \ a budding World Wide Web network,\n   etc.  Although there are a number of gateways\
    \ between various\n   protocols, and information service providers are starting\
    \ to use\n   GOPHER to provide a glue between various services, we are not yet\
    \ in\n   that golden age when all human information is at our fingertips. (And\n\
    \   we're even farther from that platinum age when the computer knows\n   what\
    \ we're looking for and retrieves it before we even touch the\n   keyboard.)\n\
    \   In this paper, we'll propose one possible vision of the information\n   services\
    \ landscape of the near future, and lay out a plan to get us\n   there from here.\n"
- title: 3. Axioms of information services
  contents:
  - "3. Axioms of information services\n   There are a number of unspoken assumptions\
    \ that we've used in our\n   discussions.  It might be useful to lay them out\
    \ explicitly before we\n   start our exploration.\n   The first is that there\
    \ is no unique information protocol that will\n   provide the flexibility, scale,\
    \ responsiveness, worldview, and mix of\n   services that every information consumer\
    \ wants.  A protocol designed\n   to give quick and meaningful access to a collection\
    \ of stock prices\n   might look functionally very different from one which will\
    \ search\n   digitized music for a particular musical phrase and deliver it to\n\
    \   your workstation. So, rather than design the information protocol to\n   end\
    \ all information protocols, we will always need to integrate new\n   search engines,\
    \ new clients, and new delivery paradigms into our\n   grand information service.\n\
    \   The second is that distributed systems are a better solution to\n   large-scale\
    \ information systems than centralized systems.  If one\n   million people are\
    \ publishing electronic papers to the net, should\n   they all have to log on\
    \ to a single machine to modify the central\n   archives? What kind of bandwidth\
    \ would be required to that central\n   machine to serve a billion papers a day?\
    \  If we replicate the central\n   archives, what sort of maintenance problems\
    \ would be encountered?\n   These questions and a host of others make it seem\
    \ more profitable at\n   the moment to investigate distributed systems.\n   The\
    \ third is that users don't want to be bothered with the details of\n   the underlying\
    \ protocols used to provide a given service. Just as\n   most people don't care\
    \ whether their e-mail message gets split up\n   into 20 packets and routed through\
    \ Tokyo to get to its destination,\n   information service users don't care whether\
    \ the GOPHER server used\n   telnet to get to a WAIS database back-ended by an\
    \ SQL database.  They\n   just want the information. In short, they care very\
    \ much about how\n   they interact with the client; they just don't want to know\
    \ what goes\n   on behind.\n   These axioms force us to look at solutions which\
    \ are distributed,\n   support multiple access paradigms, and allow information\
    \ about\n   resources to be handed off from one system (say Gopher) to another\n\
    \   (say WWW).\n"
- title: 4. An architecture to provide interoperability and integration.
  contents:
  - "4. An architecture to provide interoperability and integration.\n   The basic\
    \ architecture outlined in this paper splits up into 4 levels\n   [Fig. 1].\n\
    \   At the lowest level, we have the resources themselves. These are such\n  \
    \ things as files, telnet sessions, online library catalogs, etc. Each\n   resource\
    \ can have a resource transponder attached [Weider 94a], and\n   should have a\
    \ Uniform Resource Name (URN) [Weider 94b] associated\n   with it to uniquely\
    \ identify its contents. If a resource transponder\n   is attached, it will help\
    \ maintain the information required by the\n   next level up.\n   At the next\
    \ level, we have a 'directory service' that takes a URN and\n   returns Uniform\
    \ Resource Locators (URLs) [Berners-Lee 94] for that\n   resource. The URL is\
    \ a string which contains location information,\n   and can be used by a client\
    \ to access the resource pointed to by the\n   URL.  It is expected that a given\
    \ resource may be replicated many\n   times across the net, and thus the client\
    \ would get a number of URLs\n   for a given resource, and could choose between\
    \ them based on some\n   other criteria.\n     ______________________________________________________________\n\
    \     |           |              |       |               |\n     |           |\
    \              |       |               |\n     |  Gopher   |  WAIS        | WWW\
    \   | Archie        | Others ...\n     |           |              |       |  \
    \             |\n     |___________|______________|_______|_______________|___________\n\
    \          |                                |\n          |                   \
    \    _________|____________\n          |                      |              \
    \        |\n          |                      | Resource Discovery   |\n      \
    \    |                      |  System (perhaps     |\n          |            \
    \          |  based on whois++)   |\n          |                      |______________________|\n\
    \          |                                |\n          |                   \
    \             |\n     _____|________________________________|____\n    |     \
    \                                      |\n    | Uniform resource name to uniform\
    \ resource |\n    | locator mapping system (perhaps based on  |\n    | whois++\
    \ or X.500)                         |\n    |___________________________________________|\n\
    \                        |\n                        |\n        ________________|______________________________________\n\
    \        |                  |                 |                 |\n  ______|______\
    \     _______|_____      ______|______     ______|______\n |             |   |\
    \             |    |             |   |             |\n | Transponder |   | Transponder\
    \ |    | Transponder |   | Transponder |\n |_____________|   |_____________| \
    \   |_____________|   |_____________|\n |             |   |             |    |\
    \             |   |             |\n |             |   |             |    |   \
    \          |   |             |\n |             |   |             |    |      \
    \       |   |             |\n |  Resource   |   |  Resource   |    |  Resource\
    \   |   |  Resource   |\n |             |   |             |    |             |\
    \   |             |\n |             |   |             |    |             |   |\
    \             |\n |_____________|   |_____________|    |_____________|   |_____________|\n\
    \        Figure 1: Proposed architecture of an integrated information\n      \
    \                  service\n   The third level of the architecture is a resource\
    \ discovery system.\n   This would be a large, distributed system which would\
    \ accept search\n   criteria and return URNs and associated information for every\n\
    \   resource which matched the criteria. This would provide a set of URLs\n  \
    \ which the information service providers (GOPHER servers, etc.) could\n   then\
    \ select among for incorporation.\n   The fourth level of the architecture is\
    \ comprised of the various\n   information delivery tools.  These tools are responsible\
    \ for\n   collating pointers to resources, informing the user about the\n   resources\
    \ to which they contain pointers, and retrieving the\n   resources when the user\
    \ wishes.\n   Let's take a look in greater detail at each of these levels.\n"
- title: 4.1 Resource layer
  contents:
  - "4.1 Resource layer\n   The resources at this layer can be any collection of data\
    \ a publisher\n   wishes to catalog. It might be an individual text file, a WAIS\n\
    \   database, the starting point for a hypertext web, or anything else.\n   Each\
    \ resource is assigned a URN by the publisher, and the URL is\n   derived from\
    \ the current location of the resource. The transponder is\n   responsible for\
    \ updating levels 2 and 3 with the appropriate\n   information as the resource\
    \ is published and moves around.\n"
- title: 4.2 URN -> URL mapping
  contents:
  - "4.2 URN -> URL mapping\n   This level takes a URN and returns a number of URLs\
    \ for the various\n   instantiations of that resource on the net.  It will also\
    \ maintain\n   the URN space. Thus the only functionality required of this level\
    \ is\n   the ability to maintain a global namespace and to provide mappings\n\
    \   from that namespace to the URLs. Consequently, any of the distributed\n  \
    \ 'directory service' protocols would allow us to provide that service.\n   However,\
    \ there may be some benefit to collapsing levels 2 and 3 onto\n   the same software,\
    \ in which case we may need to select the underlying\n   protocol more carefully.\
    \ For example, X.500 provides exactly the\n   functionality required by level\
    \ 2, but does not (yet) have the\n   functionality required to provide the level\
    \ 3 service.  In addition,\n   the service at level 2 does not necessarily have\
    \ to be provided by a\n   monolithic system. It can be provided by any collection\
    \ of protocols\n   which can jointly satisfy the requirements and also interoperate,\
    \ so\n   that level 2 does appear to level 3 to be universal in scope.\n"
- title: 4.3 Resource discovery
  contents:
  - "4.3 Resource discovery\n   This is the level which requires the most work, and\
    \ where the\n   greatest traps lurk to entangle the unwary. This level needs to\
    \ serve\n   as a giant repository of all information about every publication,\n\
    \   except for that which is required for the URI -> URL mapping. Since\n   this\
    \ part is the least filled in at the moment, we will propose a\n   mechanism which\
    \ may or may not be the one which is eventually used.\n   When a new resource\
    \ is created on the network, it is assigned a URN\n   determined by the publisher\
    \ of the resource. Section 4.1 discusses in\n   more detail the role of the publisher\
    \ on the net, but at the moment\n   we can consider only 2 of the publisher's\
    \ functions. The publisher is\n   responsible for assigning a URN out of the publishers\
    \ namespace, and\n   is responsible for notifying a publishing agent [Deutsch\
    \ 92] that a\n   new resource has been created; that agent will either be a part\
    \ of\n   the resource location service or will then take the responsibility\n\
    \   for notifying an external resource location service that the resource\n  \
    \ has been created. Alternatively, the agent can use the resource\n   location\
    \ service to find parts of the RLS which should be notified\n   that this resource\
    \ has been created.\n   To give a concrete example, let's say that Peter and Chris\
    \ publish a\n   multi- media document titled, \"Chris and Peter's Bogus Journey\"\
    ,\n   which talks about our recent trip to the Antarctic, complete with\n   video\
    \ clips. P & C would then ask their publishing agent to generate\n   a URN for\
    \ this document. They then ask their publishing agent to\n   attach a transponder\
    \ to the document, and to look around and see if\n   anyone a) has asked that\
    \ our agent notify them whenever anything we\n   write comes out; or b) is running\
    \ any kind of server of 'trips to\n   Antarctica'. Janet has posted a request\
    \ that she be notified, so the\n   agent tells her that a new resource has been\
    \ created. The agent also\n   finds 3 servers which archive video clips of Antarctica,\
    \ so the agent\n   notifies all three that a new resource on Antarctica has come\
    \ out,\n   and gives out the URN and a URL for the local copy.\n"
- title: 4.4 Information delivery tools
  contents:
  - "4.4 Information delivery tools\n   One of the primary functions of an information\
    \ delivery tool is to\n   collect and collate pointers to resources. A given tool\
    \ may provide\n   mechanisms to group those pointers based on other information\
    \ about\n   the resource, e.g.  a full-text index allows one to group pointers\
    \ to\n   resources based on their contents; archie can group pointers based on\n\
    \   filenames, etc. The URLs which are being standardized in the IETF are\n  \
    \ directly based on the way World Wide Web built pointers to resources,\n   by\
    \ creating a uniform way to specify access information and location\n   for a\
    \ resource on the net. With just the URLs, however, it is\n   impossible without\
    \ much more extensive checking to tell whether two\n   resources with different\
    \ URLs have the same intellectual content or\n   not. Consequently, the URN is\
    \ designed to solve this problem.\n   In this architecture, the pointers that\
    \ a given information delivery\n   tool would keep to a resource will be a URN\
    \ and one or more cached\n   URLs. When a pointer to a resource is first required\
    \ (i.e. when a new\n   resource is linked in a Gopher server), level 2 will provide\
    \ a set of\n   URLs for that URN, and the creator of the tool can then select\
    \ which\n   of those will be used. As it is expected that the URLs will\n   eventually\
    \ become stale (the resource moves, the machine goes down,\n   etc.) the URN can\
    \ be used to get a set of current URLs for the\n   resource and an appropriate\
    \ one can then be selected. Since the cost\n   of using the level 2 service is\
    \ probably greater than the cost of\n   simply resolving a URL, both the URN and\
    \ the URL are cached to\n   provide speedy access unless something has moved.\n"
- title: 4.5 Using the architecture to provide interoperability between services
  contents:
  - "4.5 Using the architecture to provide interoperability between services\n   In\
    \ the simplest sense, each interaction that we have with an\n   information delivery\
    \ service does one of two things: it either causes\n   a pointer to be resolved\
    \ (a file to be retrieved, a telnet session to\n   be initiated, etc.) or causes\
    \ some set of the pointers available in\n   the information service to be selected.\
    \ At this level, the\n   architecture outlined above provides the core implementation\
    \ of\n   interoperability. Once we have a means of mapping between names and\n\
    \   pointers, and we have a standard method of specifying names and\n   pointers,\
    \ the interoperation problem becomes one of simply handing\n   names and pointers\
    \ around between systems. Obviously with such a\n   simplistic interoperability\
    \ scheme much of the flavor and\n   functionality of the various systems are lost\
    \ in transition. But,\n   given the pointers, a system can either a) present them\
    \ to the user\n   with no additional functionality or b) resolve the pointers,\
    \ examine\n   the resources, and then run algorithms designed to tie these\n \
    \  resources together into a structure appropriate for the current\n   service.\
    \ Let's look at one example (which just happens to be the\n   easiest to resolve);\
    \ interoperation between World Wide Web and\n   Gopher.\n   Displaying a Gopher\
    \ screen as a WWW document is trivial with these\n   pointers.  Every Gopher screen\
    \ is simply a list of menu items with\n   pointers behind them (we'll ignore the\
    \ other functionality Gopher\n   provides for a moment), so is an extremely simple\
    \ form of a hypertext\n   document. Consequently with this architecture it is\
    \ easy to show and\n   resolve a Gopher screen in WWW.  For a WWW to Gopher map,\
    \ the\n   simplest method would be that when one accesses a WWW document, all\n\
    \   the pointers associated with links off to other documents are brought\n  \
    \ in with the document. Gopher could then resolve the links and read\n   the first\
    \ line of each document to provide a Gopher style screen\n   which contains everything\
    \ in the WWW document. When a link is\n   selected, all of the WWW links for the\
    \ new document are brought in\n   and the process repeats. Obviously we're losing\
    \ a lot with the WWW ->\n   Gopher mapping; some might argue that we are losing\
    \ everything.\n   However, this does provide a trivial interoperability capacity,\
    \ and\n   one can argue that the 'information content' has been preserved\n  \
    \ across the gateway.\n   In addition, the whole purpose of gatewaying is to provide\
    \ access to\n   resources that lie outside the reach of your current client. Since\n\
    \   all resources are identifiable and accessible through layers 2 and 3,\n  \
    \ it will be easy to copy resources from one protocol to another since\n   all\
    \ we need to do is to move the pointers and reexpress the\n   relationships between\
    \ the pointers in the new paradigm.\n"
- title: 4.6 Other techniques for interoperability
  contents:
  - "4.6 Other techniques for interoperability\n   One technique for interoperability\
    \ which has recently received some\n   serious attention is the technique of creating\
    \ one client which\n   speaks the protocols of all the information delivery tools.\
    \ This\n   approach has been taken in particular by the UNITE (User's Network\n\
    \   Interface To Everything) group in Europe. This client would sit on\n   the\
    \ top level of the architecture in Figure 1. This technique is best\n   exemplified\
    \ by the recent work which has gone into Mosaic, a client\n   which can speak\
    \ almost all of the major information services\n   protocols. This technique has\
    \ a lot of appeal and has enjoyed quite a\n   bit of success; however, there are\
    \ several practical difficulties\n   with this approach which may hinder its successful\
    \ implementation.\n   The first difficulty is one that is common to clients in\
    \ general; the\n   clients must be constantly updated to reflect changes in the\n\
    \   underlying protocols and to accommodate new protocols. If the\n   increase\
    \ in the number of information services is very gradual, or if\n   the underlying\
    \ protocols do not change very rapidly, this may not be\n   an insuperable difficulty.\
    \ In addition, old clients must have some\n   way of notifying their user that\
    \ they are no longer current;\n   otherwise they will no longer be able to access\
    \ parts of the\n   information mesh.\n   The second problem is one which may prove\
    \ more difficult. Each of the\n   currently deployed information services provides\
    \ information in a\n   fundamentally different way. In addition, new information\
    \ services\n   are likely to use completely new paradigms for the organization\
    \ and\n   display of the information they provide. The various clients of these\n\
    \   information services provide vastly different functionality from each\n  \
    \ other because the underlying protocols allow different techniques. It\n   may\
    \ very well prove impossible to create a single client which allows\n   access\
    \ to the full functionality of each of the underlying protocols\n   while presenting\
    \ a consistent user interface to the user.\n   Much of the success of Mosaic and\
    \ other UNITE tools is due to the\n   fact that Gopher, WWW, and other tools are\
    \ still primarily text\n   based. When new tools are deployed which depend more\
    \ on visual cues\n   than textual cues, it may be substantially more difficult\
    \ to\n   integrate all these services into a single client.\n   We will continue\
    \ to follow this work and may include it in future\n   revisions of this architecture\
    \ if it bears fruit.\n"
- title: 5. Human interactions with the architecture
  contents:
  - "5. Human interactions with the architecture\n   In this section we will look\
    \ at how humans might interact with an\n   information system based on the above\
    \ architecture.\n"
- title: 5.1 Publishing in this architecture
  contents:
  - "5.1 Publishing in this architecture\n   When we speak of publishing in this section,\
    \ we are referring only to\n   the limited process of creating a resource on the\
    \ net, assigning it a\n   URN, and spreading the information around that we have\
    \ created a new\n   resource.\n   We start with the creation of a resource. Simple\
    \ enough; a creative\n   thought, a couple of hours typing, and a few cups of\
    \ coffee and we\n   have a new resource.  We then wish to assign it a URN. We\
    \ can talk to\n   whichever publishing agent we would like; whether it is our\
    \ own\n   personal publishing agent or some big organization that provides URN\n\
    \   and announcement services to a large number of authors.  Once we have\n  \
    \ a URN, we can provide the publishing agent with a URL for our local\n   copy\
    \ of the resource and then let it do its thing.  Alternatively, we\n   can attach\
    \ a transponder to the resource, let it determine a local\n   URL for the resource,\
    \ and let it contact the publishing agent and set\n   up the announcement process.\
    \ One would expect a publishing agent to\n   prompt us for some information as\
    \ to where it should announce our new\n   resource.\n   For example, we may just\
    \ wish a local announcement, so that only\n   people in our company can get a\
    \ pointer to the resource. Or we may\n   wish some sort of global announcement\
    \ (but it will probably cost us a\n   bit of money!)\n   Once the announcement\
    \ has been made, the publishing agent will be\n   contacted by a number of pieces\
    \ of the resource location system. For\n   example, someone running a WAIS server\
    \ may decide to add the resource\n   to their index. So they can retrieve the\
    \ resource, index it, and add\n   the indexes to their tables along with a URI\
    \ - URL combination. Then\n   when someone uses that WAIS server, it can go off\
    \ and retrieve the\n   resource if necessary. Or, the WAIS server could create\
    \ a local copy\n   of the resource; if it wished other people to find their local\
    \ copy\n   of the resource, it could provide the URI -> URL mapper with a URL\n\
    \   for the local copy. In any case, publication becomes a simple matter.\n  \
    \ So, where does this leave the traditional publisher? Well, there are\n   a number\
    \ of other functions which the traditional publisher provides\n   in addition\
    \ to distribution. There are editorial services, layout and\n   design, copyright\
    \ negotiations, marketing, etc.  The only part of the\n   traditional role that\
    \ this system changes is that of distributing the\n   resource; this architecture\
    \ may make it much cheaper for publishers\n   to distribute their wares to a much\
    \ wider audience.\n   Although copying of resources would be possible just as\
    \ it is in\n   paper format, it might be easier to detect republication of the\n\
    \   resource in this system, and if most people use the original URN for\n   the\
    \ resource, there may be a reduced monetary risk to the publisher.\n"
- title: 5.2 A librarian role in this architecture
  contents:
  - "5.2 A librarian role in this architecture\n   We've been in a number of discussions\
    \ with librarians over the past\n   year, and one question that we're frequently\
    \ asked is \"Does Peter\n   talk this rapidly all the time?\". The answer to that\
    \ question is\n   \"Yes\". But another question we are frequently asked is \"\
    If all these\n   electronic resources are going to be created, supplanting books\
    \ and\n   journals, what's left for the librarians?\".  The answer to that is\n\
    \   slightly more complex, but just as straightforward.  Librarians have\n   excelled\
    \ at obtaining resources, classifying them so that users can\n   find them, weeding\
    \ out resources that don't serve their communities,\n   and helping users navigate\
    \ the library itself. None of these roles\n   are supplanted by this architecture.\
    \ The only differences are that\n   instead of scanning publisher's announcements\
    \ for new resources their\n   users might be interested in, they will have to\
    \ scan the\n   announcements on the net. Once they see something interesting,\
    \ they\n   can retrieve it (perhaps buying a copy just as they do now), classify\n\
    \   it, set up a navigation system for their classification scheme, show\n   users\
    \ how to use it, and provide pointers (or actual copies) of the\n   resource to\
    \ their users. The classification and selection processes\n   in particular are\
    \ services which will be badly needed on a net with a\n   million new 'publications'\
    \ a day, and many will be willing to pay for\n   this highly value added service.\n"
- title: 5.3 Serving the users
  contents:
  - "5.3 Serving the users\n   This architecture allows users to see the vast collection\
    \ of\n   networked resources in ways both familiar and unfamiliar. Bookstores,\n\
    \   record shops, and libraries can all be constructed on top of this\n   architecture,\
    \ with a number of different access methods. Specialty\n   shops and research\
    \ libraries can be easily built, and then tailored\n   to a thousand different\
    \ users.  One never need worry that a book has\n   been checked out, that a CD\
    \ is out of stock, that a copy of Xenophon\n   in the original Greek isn't available\
    \ locally.  In fact, a user could\n   even engage a proxy server to translate\
    \ resources into forms that her\n   machine can use, for example to get a text\
    \ version of a Postscript\n   document although her local machine has no Postscript\
    \ viewer, or to\n   obtain a translation of a sociology paper written in Chinese.\n\
    \   In any case, however the system looks in three, five, or fifty years,\n  \
    \ we believe that the vision we've laid out above has the flexibility\n   and\
    \ functionality to start tying everything together without forcing\n   everyone\
    \ to use the same access methods or to look at the net the\n   same way. It allows\
    \ new views to evolve, new resources to be created\n   out of old, and for people\
    \ to move from today to tomorrow with all\n   the comforts of home but all the\
    \ excitement of exploring a new world.\n"
- title: 6. References
  contents:
  - "6. References\n   [Berners-Lee 93] Berners-Lee, T., Masinter, L., and M. McCahill,\n\
    \   Editors, \"Universal Resource Locators\", RFC 1738, CERN, The Xerox\n   Corporation,\
    \ University of Minnesota, December 1994.\n   Deutsch, P., Master's Thesis, June\
    \ 1992.\n   Available for anonymous FTP as\n   <ftp://archives.cc.mcgill.ca/pub/peterd/peterd.thesis>.\n\
    \   [Weider 94a] Weider, C., \"Resource Transponders\", RFC 1728, Bunyip\n   Information\
    \ Systems, December 1994.\n   [Weider 94b] Weider, C. and P. Deutsch, \"Uniform\
    \ Resource Names\",\n   Work in Progress.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 7. Authors' Addresses
  contents:
  - "7. Authors' Addresses\n   Chris Weider\n   Bunyip Information Systems, Inc.\n\
    \   2001 S. Huron Parkway #12\n   Ann Arbor, MI 48104\n   Phone: +1 313-971-2223\n\
    \   EMail: clw@bunyip.com\n   Peter Deutsch\n   Bunyip Information Systems, Inc.\n\
    \   310 Ste. Catherine St. West, Suite 202\n   Montreal, Quebec, CANADA\n   Phone:\
    \ +1 514-875-8611\n   EMail: peterd@bunyip.com\n"
