- contents:
  - "   Application-Layer Traffic Optimization (ALTO) Cross-Domain Server\n                               Discovery\n"
  title: __initial_text__
- contents:
  - "Abstract\n   The goal of Application-Layer Traffic Optimization (ALTO) is to\n
    \  provide guidance to applications that have to select one or several\n   hosts
    from a set of candidates capable of providing a desired\n   resource.  ALTO is
    realized by a client-server protocol.  Before an\n   ALTO client can ask for guidance,
    it needs to discover one or more\n   ALTO servers that can provide suitable guidance.\n
    \  In some deployment scenarios, in particular if the information about\n   the
    network topology is partitioned and distributed over several ALTO\n   servers,
    it may be necessary to discover an ALTO server outside of\n   the ALTO client's
    own network domain, in order to get appropriate\n   guidance.  This document details
    applicable scenarios, itemizes\n   requirements, and specifies a procedure for
    ALTO cross-domain server\n   discovery.\n   Technically, the procedure specified
    in this document takes one\n   IP address or prefix and a U-NAPTR Service Parameter
    (typically,\n   \"ALTO:https\") as parameters.  It performs DNS lookups (for NAPTR\n
    \  resource records in the \"in-addr.arpa.\" or \"ip6.arpa.\" trees) and\n   returns
    one or more URIs of information resources related to that IP\n   address or prefix.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8686.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction\n     1.1.  Terminology and Requirements
    Language\n   2.  ALTO Cross-Domain Server Discovery Procedure: Overview\n   3.
    \ ALTO Cross-Domain Server Discovery Procedure: Specification\n     3.1.  Interface\n
    \    3.2.  Step 1: Prepare Domain Name for Reverse DNS Lookup\n     3.3.  Step
    2: Prepare Shortened Domain Names\n     3.4.  Step 3: Perform DNS U-NAPTR Lookups\n
    \    3.5.  Error Handling\n   4.  Using the ALTO Protocol with Cross-Domain Server
    Discovery\n     4.1.  Network and Cost Map Service\n     4.2.  Map-Filtering Service\n
    \    4.3.  Endpoint Property Service\n     4.4.  Endpoint Cost Service\n     4.5.
    \ Summary and Further Extensions\n   5.  Implementation, Deployment, and Operational
    Considerations\n     5.1.  Considerations for ALTO Clients\n     5.2.  Considerations
    for Network Operators\n   6.  Security Considerations\n     6.1.  Integrity of
    the ALTO Server's URI\n     6.2.  Availability of the ALTO Server Discovery Procedure\n
    \    6.3.  Confidentiality of the ALTO Server's URI\n     6.4.  Privacy for ALTO
    Clients\n   7.  IANA Considerations\n   8.  References\n     8.1.  Normative References\n
    \    8.2.  Informative References\n   Appendix A.  Solution Approaches for Partitioned
    ALTO Knowledge\n     A.1.  Classification of Solution Approaches\n     A.2.  Discussion
    of Solution Approaches\n     A.3.  The Need for Cross-Domain ALTO Server Discovery\n
    \    A.4.  Our Solution Approach\n     A.5.  Relation to the ALTO Requirements\n
    \  Appendix B.  Requirements for Cross-Domain Server Discovery\n     B.1.  Discovery
    Client Application Programming Interface\n     B.2.  Data Storage and Authority
    Requirements\n     B.3.  Cross-Domain Operations Requirements\n     B.4.  Protocol
    Requirements\n     B.5.  Further Requirements\n   Appendix C.  ALTO and Tracker-Based
    Peer-to-Peer Applications\n     C.1.  A Generic Tracker-Based Peer-to-Peer Application\n
    \    C.2.  Architectural Options for Placing the ALTO Client\n     C.3.  Evaluation\n
    \    C.4.  Example\n   Acknowledgments\n   Authors' Addresses\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The goal of Application-Layer Traffic Optimization (ALTO)
    is to\n   provide guidance to applications that have to select one or several\n
    \  hosts from a set of candidates capable of providing a desired\n   resource
    [RFC5693].  ALTO is realized by an HTTP-based client-server\n   protocol [RFC7285],
    which can be used in various scenarios [RFC7971].\n   The ALTO base protocol document
    [RFC7285] specifies the communication\n   between an ALTO client and one ALTO
    server.  In principle, the client\n   may send any ALTO query.  For example, it
    might ask for the routing\n   cost between any two IP addresses, or it might request
    network and\n   cost maps for the whole network, which might be the worldwide\n
    \  Internet.  It is assumed that the server can answer any query,\n   possibly
    with some kind of default value if no exact data is known.\n   No special provisions
    were made for deployment scenarios with\n   multiple ALTO servers, with some servers
    having more accurate\n   information about some parts of the network topology
    while others\n   have better information about other parts of the network\n   (\"partitioned
    knowledge\").  Various ALTO use cases have been studied\n   in the context of
    such scenarios.  In some cases, one cannot assume\n   that a topologically nearby
    ALTO server (e.g., a server discovered\n   with the procedure specified in [RFC7286])
    will always provide useful\n   information to the client.  One such scenario is
    detailed in\n   Appendix C.  Several solution approaches, such as redirecting
    a\n   client to a server that has more accurate information or forwarding\n   the
    request to such a server on behalf of the client, have been\n   proposed and analyzed
    (see Appendix A), but no solution has been\n   specified so far.\n   Section 3
    of this document specifies the \"ALTO Cross-Domain Server\n   Discovery Procedure\"
    for client-side usage in these scenarios.  An\n   ALTO client that wants to send
    an ALTO query related to a specific IP\n   address or prefix X may call this procedure
    with X as a parameter.\n   It will use Domain Name System (DNS) lookups to find
    one or more ALTO\n   servers that can provide a competent answer.  The above wording\n
    \  \"related to\" was intentionally kept somewhat unspecific, as the exact\n   semantics
    depends on the ALTO service to be used; see Section 4.\n   Those who are in control
    of the \"reverse DNS\" for a given IP address\n   or prefix (i.e., the corresponding
    subdomain of \"in-addr.arpa.\" or\n   \"ip6.arpa.\") -- typically an Internet
    Service Provider (ISP), a\n   corporate IT department, or a university's computing
    center -- may\n   add resource records to the DNS that point to one or more relevant\n
    \  ALTO servers.  In many cases, it may be an ALTO server run by that\n   ISP
    or IT department, as they naturally have good insight into\n   routing costs from
    and to their networks.  However, they may also\n   refer to an ALTO server provided
    by someone else, e.g., their\n   upstream ISP.\n"
  - contents:
    - "1.1.  Terminology and Requirements Language\n   This document makes use of
      the ALTO terminology defined in RFC 5693\n   [RFC5693].\n   The key words \"MUST\",
      \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD
      NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in
      this document are to be interpreted as described in\n   BCP 14 [RFC2119] [RFC8174]
      when, and only when, they appear in all\n   capitals, as shown here.\n"
    title: 1.1.  Terminology and Requirements Language
  title: 1.  Introduction
- contents:
  - "2.  ALTO Cross-Domain Server Discovery Procedure: Overview\n   This section gives
    a non-normative overview of the ALTO Cross-Domain\n   Server Discovery Procedure.
    \ The detailed specification will follow\n   in the next section.\n   This procedure
    was inspired by \"Location Information Server (LIS)\n   Discovery Using IP Addresses
    and Reverse DNS\" [RFC7216] and reuses\n   parts of the basic ALTO Server Discovery
    Procedure [RFC7286].\n   The basic idea is to use the Domain Name System (DNS),
    more\n   specifically the \"in-addr.arpa.\" or \"ip6.arpa.\" trees, which are\n
    \  mostly used for \"reverse mapping\" of IP addresses to host names by\n   means
    of PTR resource records.  There, URI-enabled Naming Authority\n   Pointer (U-NAPTR)
    resource records [RFC4848], which allow the mapping\n   of domain names to Uniform
    Resource Identifiers (URIs), are installed\n   as needed.  Thereby, it is possible
    to store a mapping from an IP\n   address or prefix to one or more ALTO server
    URIs in the DNS.\n   The ALTO Cross-Domain Server Discovery Procedure is called
    with one\n   IP address or prefix and a U-NAPTR Service Parameter [RFC4848] as\n
    \  parameters.\n   The service parameter is usually set to \"ALTO:https\".  However,
    other\n   parameter values may be used in some scenarios -- e.g., \"ALTO:http\"\n
    \  to search for a server that supports unencrypted transmission for\n   debugging
    purposes, or other application protocol or service tags if\n   applicable.\n   The
    procedure performs DNS lookups and returns one or more URIs of\n   information
    resources related to said IP address or prefix, usually\n   the URIs of one or
    more ALTO Information Resource Directories (IRDs;\n   see Section 9 of [RFC7285]).
    \ The U-NAPTR records also provide\n   preference values, which should be considered
    if more than one URI is\n   returned.\n   The discovery procedure sequentially
    tries two different lookup\n   strategies.  First, an ALTO-specific U-NAPTR record
    is searched in\n   the \"reverse tree\" -- i.e., in subdomains of \"in-addr.arpa.\"
    or\n   \"ip6.arpa.\" corresponding to the given IP address or prefix.  If this\n
    \  lookup does not yield a usable result, the procedure tries further\n   lookups
    with truncated domain names, which correspond to shorter\n   prefix lengths.  The
    goal is to allow deployment scenarios that\n   require fine-grained discovery
    on a per-IP basis, as well as large-\n   scale scenarios where discovery is to
    be enabled for a large number\n   of IP addresses with a small number of additional
    DNS resource\n   records.\n"
  title: '2.  ALTO Cross-Domain Server Discovery Procedure: Overview'
- contents:
  - '3.  ALTO Cross-Domain Server Discovery Procedure: Specification

    '
  - contents:
    - "3.1.  Interface\n   The procedure specified in this document takes two parameters,
      X and\n   SP, where X is an IP address or prefix and SP is a U-NAPTR Service\n
      \  Parameter.\n   The parameter X may be an IPv4 or an IPv6 address or prefix
      in\n   Classless Inter-Domain Routing (CIDR) notation (see [RFC4632] for the\n
      \  IPv4 CIDR notation and [RFC4291] for IPv6).  Consequently, the\n   address
      type AT is either \"IPv4\" or \"IPv6\".  In both cases, X\n   consists of an
      IP address A and a prefix length L.  From the\n   definitions of IPv4 and IPv6,
      it follows that syntactically valid\n   values for L are 0 <= L <= 32 when AT=IPv4
      and 0 <= L <= 128 when\n   AT=IPv6.  However, not all syntactically valid values
      of L are\n   actually supported by this procedure; Step 1 (see below) will check\n
      \  for unsupported values and report an error if necessary.\n   For example,
      for X=198.51.100.0/24, we get AT=IPv4, A=198.51.100.0,\n   and L=24.  Similarly,
      for X=2001:0DB8::20/128, we get AT=IPv6,\n   A=2001:0DB8::20, and L=128.\n   In
      the intended usage scenario, the procedure is normally always\n   called with
      the parameter SP set to \"ALTO:https\".  However, for\n   general applicability
      and in order to support future extensions, the\n   procedure MUST support being
      called with any valid U-NAPTR Service\n   Parameter (see Section 4.5 of [RFC4848]
      for the syntax of U-NAPTR\n   Service Parameters and Section 5 of the same document
      for information\n   about the IANA registries).\n   The procedure performs DNS
      lookups and returns one or more URIs of\n   information resources related to
      that IP address or prefix, usually\n   the URIs of one or more ALTO Information
      Resource Directories (IRDs;\n   see Section 9 of [RFC7285]).  For each URI,
      the procedure also\n   returns order and preference values (see Section 4.1
      of [RFC3403]),\n   which should be considered if more than one URI is returned.\n
      \  During execution of this procedure, various error conditions may\n   occur
      and have to be reported to the caller; see Section 3.5.\n   For the remainder
      of the document, we use the following notation for\n   calling the ALTO Cross-Domain
      Server Discovery\n   Procedure:    IRD_URIS_X = XDOMDISC(X,\"ALTO:https\")\n"
    title: 3.1.  Interface
  - contents:
    - "3.2.  Step 1: Prepare Domain Name for Reverse DNS Lookup\n   First, the procedure
      checks the prefix length L for unsupported\n   values: If AT=IPv4 (i.e., if
      A is an IPv4 address) and L < 8, the\n   procedure aborts and indicates an \"unsupported
      prefix length\" error\n   to the caller.  Similarly, if AT=IPv6 and L < 32,
      the procedure\n   aborts and indicates an \"unsupported prefix length\" error
      to the\n   caller.  Otherwise, the procedure continues.\n   If AT=IPv4, the
      procedure will then produce a DNS domain name, which\n   will be referred to
      as R32.  This domain name is constructed\n   according to the rules specified
      in Section 3.5 of [RFC1035], and it\n   is rooted in the special domain \"IN-ADDR.ARPA.\".\n
      \  For example, A=198.51.100.3 yields R32=\"3.100.51.198.IN-ADDR.ARPA.\".\n
      \  If AT=IPv6, a domain name, which will be called R128, is constructed\n   according
      to the rules specified in Section 2.5 of [RFC3596], and the\n   special domain
      \"IP6.ARPA.\" is used.\n   For example (note: a line break was added after the
      second line),\n   A = 2001:0DB8::20    yields\n   R128 = \"0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.B.D.0.\n
      \          1.0.0.2.IP6.ARPA.\"\n"
    title: '3.2.  Step 1: Prepare Domain Name for Reverse DNS Lookup'
  - contents:
    - "3.3.  Step 2: Prepare Shortened Domain Names\n   For this step, an auxiliary
      function, \"skip\", is defined as follows:\n   skip(str,n) will skip all characters
      in the string str, up to and\n   including the n-th dot, and return the remaining
      part of str.  For\n   example, skip(\"foo.bar.baz.qux.quux.\",2) will return
      \"baz.qux.quux.\".\n   If AT=IPv4, the following additional domain names are
      generated from\n   the result of the previous step:\n      R24=skip(R32,1),\n
      \     R16=skip(R32,2), and\n      R8=skip(R32,3).\n   Removing one label from
      a domain name (i.e., one number of the\n   \"dotted quad notation\") corresponds
      to shortening the prefix length\n   by 8 bits.\n   For example,\n   R32=\"3.100.51.198.IN-ADDR.ARPA.\"
      yields\n   R24=\"100.51.198.IN-ADDR.ARPA.\"\n   R16=\"51.198.IN-ADDR.ARPA.\"\n
      \  R8=\"198.IN-ADDR.ARPA.\"\n   If AT=IPv6, the following additional domain
      names are generated from\n   the result of the previous step:\n      R64=skip(R128,16),\n
      \     R56=skip(R128,18),\n      R48=skip(R128,20),\n      R40=skip(R128,22),
      and\n      R32=skip(R128,24).\n   Removing one label from a domain name (i.e.,
      one hex digit)\n   corresponds to shortening the prefix length by 4 bits.\n
      \  For example (note: a line break was added after the first line),\n   R128
      = \"0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.B.D.0.\n           1.0.0.2.IP6.ARPA.\"
      \   yields\n   R64  = \"0.0.0.0.0.0.0.0.8.B.D.0.1.0.0.2.IP6.ARPA.\"\n   R56
      \ = \"0.0.0.0.0.0.8.B.D.0.1.0.0.2.IP6.ARPA.\"\n   R48  = \"0.0.0.0.8.B.D.0.1.0.0.2.IP6.ARPA.\"\n
      \  R40  = \"0.0.8.B.D.0.1.0.0.2.IP6.ARPA.\"\n   R32  = \"8.B.D.0.1.0.0.2.IP6.ARPA.\"\n"
    title: '3.3.  Step 2: Prepare Shortened Domain Names'
  - contents:
    - "3.4.  Step 3: Perform DNS U-NAPTR Lookups\n   The address type and the prefix
      length of X are matched against the\n   first and the second column of the following
      table, respectively:\n      | 1: Address | 2: Prefix | 3: MUST do | 4: SHOULD
      do further  |\n      | Type AT    | Length L  | 1st lookup | lookups in that
      order |\n      | IPv4       | 32        | R32        | R24, R16, R8          |\n
      \     | IPv4       | 24 .. 31  | R24        | R16, R8               |\n      |
      IPv4       | 16 .. 23  | R16        | R8                    |\n      | IPv4
      \      | 8 .. 15   | R8         | (none)                |\n      | IPv4       |
      0 .. 7    | (none, abort: unsupported prefix   |\n      | IPv6       | 128       |
      R128       | R64, R56, R48, R40,   |\n      | IPv6       | 64        | R64        |
      R56, R48, R40, R32    |\n      |            | (..127)   |            |                       |\n
      \     | IPv6       | 56 .. 63  | R56        | R48, R40, R32         |\n      |
      IPv6       | 48 .. 55  | R48        | R40, R32              |\n      | IPv6
      \      | 40 .. 47  | R40        | R32                   |\n      | IPv6       |
      32 .. 39  | R32        | (none)                |\n      | IPv6       | 0 ..
      31   | (none, abort: unsupported prefix   |\n                    Table 1: Perform
      DNS U-NAPTR lookups\n   Then, the domain name given in the 3rd column and the
      U-NAPTR Service\n   Parameter SP with which the procedure was called (usually\n
      \  \"ALTO:https\") MUST be used for a U-NAPTR [RFC4848] lookup, in order\n   to
      obtain one or more URIs (indicating protocol, host, and possibly\n   path elements)
      for the ALTO server's Information Resource Directory\n   (IRD).  If such URIs
      can be found, the ALTO Cross-Domain Server\n   Discovery Procedure returns that
      information to the caller and\n   terminates successfully.\n   For example,
      the following two U-NAPTR resource records can be used\n   for mapping \"100.51.198.IN-ADDR.ARPA.\"
      (i.e., R24 from the example in\n   the previous step) to the HTTPS URIs \"https://alto1.example.net/ird\"\n
      \  and \"https://alto2.example.net/ird\", with the former being preferred.\n
      \      100.51.198.IN-ADDR.ARPA.  IN NAPTR 100  10  \"u\"  \"ALTO:https\"\n            \"!.*!https://alto1.example.net/ird!\"
      \ \"\"\n       100.51.198.IN-ADDR.ARPA.  IN NAPTR 100  20  \"u\"  \"ALTO:https\"\n
      \           \"!.*!https://alto2.example.net/ird!\"  \"\"\n   If no matching
      U-NAPTR records can be found, the procedure SHOULD try\n   further lookups,
      using the domain names from the fourth column in the\n   indicated order, until
      one lookup succeeds.  If no IRD URI can be\n   found after looking up all domain
      names from the 3rd and 4th columns,\n   the procedure terminates unsuccessfully,
      returning an empty URI list.\n"
    title: '3.4.  Step 3: Perform DNS U-NAPTR Lookups'
  - contents:
    - "3.5.  Error Handling\n   The ALTO Cross-Domain Server Discovery Procedure may
      fail for several\n   reasons.\n   If the procedure is called with syntactically
      invalid parameters or\n   unsupported parameter values (in particular, the prefix
      length L; see\n   Section 3.2), the procedure aborts, no URI list will be returned,
      and\n   the error has to be reported to the caller.\n   The procedure performs
      one or more DNS lookups in a well-defined\n   order (corresponding to descending
      prefix lengths, see Section 3.4)\n   until one produces a usable result.  Each
      of these DNS lookups might\n   fail to produce a usable result, due to either
      a normal condition\n   (e.g., a domain name exists, but no ALTO-specific NAPTR
      resource\n   records are associated with it), a permanent error (e.g., nonexistent\n
      \  domain name), or a temporary error (e.g., timeout).  In all three\n   cases,
      and as long as there are further domain names that can be\n   looked up, the
      procedure SHOULD immediately try to look up the next\n   domain name (from Column
      4 in the table given in Section 3.4).  Only\n   after all domain names have
      been tried at least once, the procedure\n   MAY retry those domain names that
      had caused temporary lookup errors.\n   Generally speaking, ALTO provides advisory
      information for the\n   optimization of applications (peer-to-peer applications,
      overlay\n   networks, etc.), but applications should not rely on the availability\n
      \  of such information for their basic functionality (see\n   Section 8.3.4.3
      of [RFC7285]).  Consequently, the speedy detection of\n   an ALTO server, even
      though it may give less accurate answers than\n   other servers, or the quick
      realization that there is no suitable\n   ALTO server, is in general preferable
      to causing long delays by\n   retrying failed queries.  Nevertheless, if DNS
      queries have failed\n   due to temporary errors, the ALTO Cross-Domain Server
      Discovery\n   Procedure SHOULD inform its caller that DNS queries have failed
      for\n   that reason and that retrying the discovery at a later point in time\n
      \  might give more accurate results.\n"
    title: 3.5.  Error Handling
  title: '3.  ALTO Cross-Domain Server Discovery Procedure: Specification'
- contents:
  - "4.  Using the ALTO Protocol with Cross-Domain Server Discovery\n   Based on a
    modular design principle, ALTO provides several ALTO\n   services, each consisting
    of a set of information resources that can\n   be accessed using the ALTO protocol.
    \ The information resources that\n   are available at a specific ALTO server are
    listed in its Information\n   Resource Directory (IRD, see Section 9 of [RFC7285]).
    \ The ALTO\n   protocol specification defines the following ALTO services and
    their\n   corresponding information resources:\n   *  Network and Cost Map Service,
    see Section 11.2 of [RFC7285]\n   *  Map-Filtering Service, see Section 11.3 of
    [RFC7285]\n   *  Endpoint Property Service, see Section 11.4 of [RFC7285]\n   *
    \ Endpoint Cost Service, see Section 11.5 of [RFC7285]\n   The ALTO Cross-Domain
    Server Discovery Procedure is most useful in\n   conjunction with the Endpoint
    Property Service and the Endpoint Cost\n   Service.  However, for the sake of
    completeness, possible interaction\n   with all four services is discussed below.
    \ Extension documents may\n   specify further information resources; however,
    these are out of\n   scope of this document.\n"
  - contents:
    - "4.1.  Network and Cost Map Service\n   An ALTO client may invoke the ALTO Cross-Domain
      Server Discovery\n   Procedure (as specified in Section 3) for an IP address
      or prefix X\n   and get a list of one or more IRD URIs, including order and\n
      \  preference values: IRD_URIS_X = XDOMDISC(X,\"ALTO:https\").  The IRD(s)\n
      \  referenced by these URIs will always contain a network and a cost\n   map,
      as these are mandatory information resources (see Section 11.2\n   of [RFC7285]).
      \ However, the cost matrix may be very sparse.  If,\n   according to the network
      map, PID_X is the Provider-defined\n   Identifier (PID; see Section 5.1 of [RFC7285])
      that contains the IP\n   address or prefix X, and PID_1, PID_2, PID_3, ... are
      other PIDs, the\n   cost map may look like this:\n               | From  | To
      PID_1 | PID_2 | PID_X | PID_3 |\n               | PID_1 |          |       |
      92    |       |\n               | PID_2 |          |       | 6     |       |\n
      \              | PID_X | 46       | 3     | 1     | 19    |\n               |
      PID_3 |          |       | 38    |       |\n                            Table
      2: Cost Map\n   In this example, all cells outside Column X and Row X are\n
      \  unspecified.  A cost map with this structure contains the same\n   information
      as what could be retrieved using the Endpoint Cost\n   Service, Cases 1 and
      2 in Section 4.4.  Accessing cells that are\n   neither in Column X nor Row
      X may not yield useful results.\n   Trying to assemble a more densely populated
      cost map from several\n   cost maps with this very sparse structure may be a
      nontrivial task,\n   as different ALTO servers may use different PID definitions
      (i.e.,\n   network maps) and incompatible scales for the costs, in particular\n
      \  for the \"routingcost\" metric.\n"
    title: 4.1.  Network and Cost Map Service
  - contents:
    - "4.2.  Map-Filtering Service\n   An ALTO client may invoke the ALTO Cross-Domain
      Server Discovery\n   Procedure (as specified in Section 3) for an IP address
      or prefix X\n   and get a list of one or more IRD URIs, including order and\n
      \  preference values: IRD_URIS_X = XDOMDISC(X,\"ALTO:https\").  These IRDs\n
      \  may provide the optional Map-Filtering Service (see Section 11.3 of\n   [RFC7285]).
      \ This service returns a subset of the full map, as\n   specified by the client.
      \ As discussed in Section 4.1, a cost map may\n   be very sparse in the envisioned
      deployment scenario.  Therefore,\n   depending on the filtering criteria provided
      by the client, this\n   service may return results similar to the Endpoint Cost
      Service, or\n   it may not return any useful result.\n"
    title: 4.2.  Map-Filtering Service
  - contents:
    - "4.3.  Endpoint Property Service\n   If an ALTO client wants to query an Endpoint
      Property Service (see\n   Section 11.4 of [RFC7285]) about an endpoint with
      IP address X or a\n   group of endpoints within IP prefix X, respectively, it
      has to invoke\n   the ALTO Cross-Domain Server Discovery Procedure (as specified
      in\n   Section 3): IRD_URIS_X = XDOMDISC(X,\"ALTO:https\").  The result,\n   IRD_URIS_X,
      is a list of one or more URIs of Information Resource\n   Directories (IRDs,
      see Section 9 of [RFC7285]).  Considering the\n   order and preference values,
      the client has to check these IRDs for a\n   suitable Endpoint Property Service
      and query it.\n   If the ALTO client wants to do a similar Endpoint Property
      query for\n   a different IP address or prefix \"Y\", the whole procedure has
      to be\n   repeated, as IRD_URIS_Y = XDOMDISC(Y,\"ALTO:https\") may yield a\n
      \  different list of IRD URIs.  Of course, the results of individual DNS\n   queries
      may be cached as indicated by their respective time-to-live\n   (TTL) values.\n"
    title: 4.3.  Endpoint Property Service
  - contents:
    - "4.4.  Endpoint Cost Service\n   The optional ALTO Endpoint Cost Service (ECS;
      see Section 11.5 of\n   [RFC7285]) provides information about costs between
      individual\n   endpoints and also supports ranking.  The ECS allows endpoints
      to be\n   denoted by IP addresses or prefixes.  The ECS is called with a list\n
      \  of one or more source IP addresses or prefixes, which we will call\n   (S1,
      S2, S3, ...), and a list of one or more destination IP addresses\n   or prefixes,
      called (D1, D2, D3, ...).\n   This specification distinguishes several cases,
      regarding the number\n   of elements in the list of source and destination addresses,\n
      \  respectively:\n   1.  Exactly one source address S1 and more than one destination\n
      \      addresses (D1, D2, D3, ...).  In this case, the ALTO client has\n       to
      invoke the ALTO Cross-Domain Server Discovery Procedure (as\n       specified
      in Section 3) with that single source address as a\n       parameter: IRD_URIS_S1
      = XDOMDISC(S1,\"ALTO:https\").  The result,\n       IRD_URIS_S1, is a list of
      one or more URIs of Information\n       Resource Directories (IRDs, see Section
      9 of [RFC7285]).\n       Considering the order and preference values, the client
      has to\n       check these IRDs for a suitable Endpoint Cost Service and query\n
      \      it.  The ECS is an optional service (see Section 11.5.1 of\n       [RFC7285]),
      and therefore, it may well be that an IRD does not\n       refer to an ECS.\n
      \      Calling the Cross-Domain Server Discovery Procedure only once\n       with
      the single source address as a parameter -- as opposed to\n       multiple calls,
      e.g., one for each destination address -- is not\n       only a matter of efficiency.
      \ In the given scenario, it is\n       advisable to send all ECS queries to
      the same ALTO server.  This\n       ensures that the results can be compared
      (e.g., for sorting\n       candidate resource providers), even when cost metrics
      lack a\n       well-defined base unit -- e.g., the \"routingcost\" metric.\n
      \  2.  More than one source address (S1, S2, S3, ...) and exactly one\n       destination
      address D1.  In this case, the ALTO client has to\n       invoke the ALTO Cross-Domain
      Server Discovery Procedure with that\n       single destination address as a
      parameter:\n       IRD_URIS_D1 = XDOMDISC(D1,\"ALTO:https\").  The result,\n
      \      IRD_URIS_D1, is a list of one or more URIs of IRDs.  Considering\n       the
      order and preference values, the client has to check these\n       IRDs for
      a suitable ECS and query it.\n   3.  Exactly one source address S1 and exactly
      one destination address\n       D1.  The ALTO client may perform the same steps
      as in Case 1, as\n       specified above.  As an alternative, it may also perform
      the same\n       steps as in Case 2, as specified above.\n   4.  More than one
      source address (S1, S2, S3, ...) and more than one\n       destination address
      (D1, D2, D3, ...).  In this case, the ALTO\n       client should split the list
      of desired queries based on source\n       addresses and perform separately
      for each source address the same\n       steps as in Case 1, as specified above.
      \ As an alternative, the\n       ALTO client may also group the list based on
      destination\n       addresses and perform separately for each destination address
      the\n       same steps as in Case 2, as specified above.  However, comparing\n
      \      results between these subqueries may be difficult, in particular\n       if
      the cost metric is a relative preference without a well-\n       defined base
      unit (e.g., the \"routingcost\" metric).\n   See Appendix C for a detailed example
      showing the interaction of a\n   tracker-based peer-to-peer application, the
      ALTO Endpoint Cost\n   Service, and the ALTO Cross-Domain Server Discovery Procedure.\n"
    title: 4.4.  Endpoint Cost Service
  - contents:
    - "4.5.  Summary and Further Extensions\n   Considering the four services defined
      in the ALTO base protocol\n   specification [RFC7285], the ALTO Cross-Domain
      Server Discovery\n   Procedure works best with the Endpoint Property Service
      (EPS) and the\n   Endpoint Cost Service (ECS).  Both the EPS and the ECS take
      one or\n   more IP addresses as a parameter.  The previous sections specify
      how\n   the parameter for calling the ALTO Cross-Domain Server Discovery\n   Procedure
      has to be derived from these IP addresses.\n   In contrast, the ALTO Cross-Domain
      Server Discovery Procedure seems\n   less useful if the goal is to retrieve
      network and cost maps that\n   cover the whole network topology.  However, the
      procedure may be\n   useful if a map centered at a specific IP address is desired
      (i.e., a\n   map detailing the vicinity of said IP address or a map giving costs\n
      \  from said IP address to all potential destinations).\n   The interaction
      between further ALTO services (and their\n   corresponding information resources)
      needs to be investigated and\n   defined once such further ALTO services are
      specified in an extension\n   document.\n"
    title: 4.5.  Summary and Further Extensions
  title: 4.  Using the ALTO Protocol with Cross-Domain Server Discovery
- contents:
  - '5.  Implementation, Deployment, and Operational Considerations

    '
  - contents:
    - '5.1.  Considerations for ALTO Clients

      '
    - contents:
      - "5.1.1.  Resource-Consumer-Initiated Discovery\n   Resource-consumer-initiated
        ALTO server discovery (cf. ALTO\n   requirement AR-32 [RFC6708]) can be seen
        as a special case of cross-\n   domain ALTO server discovery.  To that end,
        an ALTO client embedded\n   in a resource consumer would have to perform the
        ALTO Cross-Domain\n   Server Discovery Procedure with its own IP address as
        a parameter.\n   However, due to the widespread deployment of Network Address\n
        \  Translators (NATs), additional protocols and mechanisms such as\n   Session
        Traversal Utilities for NAT (STUN) [RFC5389] are usually\n   needed to detect
        the client's \"public\" IP address before it can be\n   used as a parameter
        for the discovery procedure.  Note that a\n   different approach for resource-consumer-initiated
        ALTO server\n   discovery, which is based on DHCP, is specified in [RFC7286].\n"
      title: 5.1.1.  Resource-Consumer-Initiated Discovery
    - contents:
      - "5.1.2.  IPv4/v6 Dual Stack, Multihoming and Host Mobility\n   The procedure
        specified in this document can discover ALTO server\n   URIs for a given IP
        address or prefix.  The intention is that a third\n   party (e.g., a resource
        directory) that receives query messages from\n   a resource consumer can use
        the source address in these messages to\n   discover suitable ALTO servers
        for this specific resource consumer.\n   However, resource consumers (as defined
        in Section 2 of [RFC5693])\n   may reside on hosts with more than one IP address
        -- for example, due\n   to IPv4/v6 dual stack operation and/or multihoming.
        \ IP packets sent\n   with different source addresses may be subject to different
        routing\n   policies and path costs.  In some deployment scenarios, it may
        even\n   be required to ask different sets of ALTO servers for guidance.\n
        \  Furthermore, source addresses in IP packets may be modified en route\n
        \  by Network Address Translators (NATs).\n   If a resource consumer queries
        a resource directory for candidate\n   resource providers, the locally selected
        (and possibly en-route-\n   translated) source address of the query message
        -- as observed by the\n   resource directory -- will become the basis for
        the ALTO server\n   discovery and the subsequent optimization of the resource
        directory's\n   reply.  If, however, the resource consumer then selects different\n
        \  source addresses to contact returned resource providers, the desired\n
        \  better-than-random \"ALTO effect\" may not occur.\n   One solution approach
        for this problem is that a dual-stack or\n   multihomed resource consumer
        could always use the same address for\n   contacting the resource directory
        and all resource providers, thus\n   overriding the operating system's automatic
        selection of source IP\n   addresses.  For example, when using the BSD socket
        API, one could\n   always bind() the socket to one of the local IP addresses
        before\n   trying to connect() to the resource directory or the resource\n
        \  providers, respectively.  Another solution approach is to perform\n   ALTO-influenced
        resource provider selection (and source-address\n   selection) locally in
        the resource consumer, in addition to, or\n   instead of, performing it in
        the resource directory.  See\n   Section 5.1.1 for a discussion of how to
        discover ALTO servers for\n   local usage in the resource consumer.\n   Similarly,
        resource consumers on mobile hosts SHOULD query the\n   resource directory
        again after a change of IP address, in order to\n   get a list of candidate
        resource providers that is optimized for the\n   new IP address.\n"
      title: 5.1.2.  IPv4/v6 Dual Stack, Multihoming and Host Mobility
    - contents:
      - "5.1.3.  Interaction with Network Address Translation\n   The ALTO Cross-Domain
        Server Discovery Procedure has been designed to\n   enable the ALTO-based
        optimization of applications such as large-\n   scale overlay networks, that
        span -- on the IP layer -- multiple\n   administrative domains, possibly the
        whole Internet.  Due to the\n   widespread usage of Network Address Translators
        (NATs), it may well\n   be that nodes of the overlay network (i.e., resource
        consumers or\n   resource providers) are located behind a NAT, maybe even
        behind\n   several cascaded NATs.\n   If a resource directory is located in
        the public Internet (i.e., not\n   behind a NAT) and receives a message from
        a resource consumer behind\n   one or more NATs, the message's source address
        will be the public IP\n   address of the outermost NAT in front of the resource
        consumer.  The\n   same applies if the resource directory is behind a different
        NAT than\n   the resource consumer.  The resource directory may call the ALTO\n
        \  Cross-Domain Server Discovery Procedure with the message's source\n   address
        as a parameter.  In effect, not the resource consumer's\n   (private) IP address,
        but the public IP address of the outermost NAT\n   in front of it, will be
        used as a basis for ALTO optimization.  This\n   will work fine as long as
        the network behind the NAT is not too big\n   (e.g., if the NAT is in a residential
        gateway).\n   If a resource directory receives a message from a resource consumer\n
        \  and the message's source address is a \"private\" IP address [RFC1918],\n
        \  this may be a sign that both of them are behind the same NAT.  An\n   invocation
        of the ALTO Cross-Domain Server Discovery Procedure with\n   this private
        address may be problematic, as this will only yield\n   usable results if
        a DNS \"split horizon\" and DNSSEC trust anchors are\n   configured correctly.
        \ In this situation, it may be more advisable to\n   query an ALTO server
        that has been discovered using [RFC7286] or any\n   other local configuration.
        \ The interaction between intradomain ALTO\n   for large private domains (e.g.,
        behind a \"carrier-grade NAT\") and\n   cross-domain, Internet-wide optimization,
        is beyond the scope of this\n   document.\n"
      title: 5.1.3.  Interaction with Network Address Translation
    title: 5.1.  Considerations for ALTO Clients
  - contents:
    - '5.2.  Considerations for Network Operators

      '
    - contents:
      - "5.2.1.  Flexibility vs. Load on the DNS\n   The ALTO Cross-Domain Server
        Discovery Procedure, as specified in\n   Section 3, first produces a list
        of domain names (Steps 1 and 2) and\n   then looks for relevant NAPTR records
        associated with these names,\n   until a useful result can be found (Step
        3).  The number of candidate\n   domain names on this list is a compromise
        between flexibility when\n   installing NAPTR records and avoiding excess
        load on the DNS.\n   A single invocation of the ALTO Cross-Domain Server Discovery\n
        \  Procedure, with an IPv6 address as a parameter, may cause up to, but\n
        \  no more than, six DNS lookups for NAPTR records.  For IPv4, the\n   maximum
        is four lookups.  Should the load on the DNS infrastructure\n   caused by
        these lookups become a problem, one solution approach is to\n   populate the
        DNS with ALTO-specific NAPTR records.  If such records\n   can be found for
        individual IP addresses (possibly installed using a\n   wildcarding mechanism
        in the name server) or long prefixes, the\n   procedure will terminate successfully
        and not perform lookups for\n   shorter prefix lengths, thus reducing the
        total number of DNS\n   queries.  Another approach for reducing the load on
        the DNS\n   infrastructure is to increase the TTL for caching negative answers.\n
        \  On the other hand, the ALTO Cross-Domain Server Discovery Procedure\n   trying
        to look up truncated domain names allows for efficient\n   configuration of
        large-scale scenarios, where discovery is to be\n   enabled for a large number
        of IP addresses with a small number of\n   additional DNS resource records.
        \ Note that it expressly has not been\n   a design goal of this procedure
        to give clients a means of\n   understanding the IP prefix delegation structure.
        \ Furthermore, this\n   specification does not assume or recommend that prefix
        delegations\n   should preferably occur at those prefix lengths that are used
        in Step\n   2 of this procedure (see Section 3.3).  A network operator that
        uses,\n   for example, an IPv4 /18 prefix and wants to install the NAPTR\n
        \  records efficiently could either install 64 NAPTR records (one for\n   each
        of the /24 prefixes contained within the /18 prefix), or they\n   could try
        to team up with the owners of the other fragments of the\n   enclosing /16
        prefix, in order to run a common ALTO server to which\n   only one NAPTR would
        point.\n"
      title: 5.2.1.  Flexibility vs. Load on the DNS
    - contents:
      - "5.2.2.  BCP 20 and Missing Delegations of the Reverse DNS\n   [RFC2317],
        also known as BCP 20, describes a way to delegate the\n   \"reverse DNS\"
        (i.e., subdomains of \"in-addr.arpa.\") for IPv4 address\n   ranges with fewer
        than 256 addresses (i.e., less than a whole /24\n   prefix).  The ALTO Cross-Domain
        Server Discovery Procedure is\n   compatible with this method.\n   In some
        deployment scenarios -- e.g., residential Internet access --\n   where customers
        often dynamically receive a single IPv4 address (and/\n   or a small IPv6
        address block) from a pool of addresses, ISPs\n   typically will not delegate
        the \"reverse DNS\" to their customers.\n   This practice makes it impossible
        for these customers to populate the\n   DNS with NAPTR resource records that
        point to an ALTO server of their\n   choice.  Yet, the ISP may publish NAPTR
        resource records in the\n   \"reverse DNS\" for individual addresses or larger
        address pools (i.e.,\n   shorter prefix lengths).\n   While ALTO is by no
        means technologically tied to the Border Gateway\n   Protocol (BGP), it is
        anticipated that BGP will be an important\n   source of information for ALTO
        and that the operator of the outermost\n   BGP-enabled router will have a
        strong incentive to publish a digest\n   of their routing policies and costs
        through ALTO.  In contrast, an\n   individual user or an organization that
        has been assigned only a\n   small address range (i.e., an IPv4 prefix with
        a prefix length longer\n   than /24) will typically connect to the Internet
        using only a single\n   ISP, and they might not be interested in publishing
        their own ALTO\n   information.  Consequently, they might wish to leave the
        operation of\n   an ALTO server up to their ISP.  This ISP may install NAPTR
        resource\n   records, which are needed for the ALTO Cross-Domain Server Discovery\n
        \  Procedure, in the subdomain of \"in-addr.arpa.\" that corresponds to\n
        \  the whole /24 prefix (cf. R24 in Section 3.3 of this document), even\n
        \  if delegations in the style of BCP 20 or no delegations at all are in\n
        \  use.\n"
      title: 5.2.2.  BCP 20 and Missing Delegations of the Reverse DNS
    title: 5.2.  Considerations for Network Operators
  title: 5.  Implementation, Deployment, and Operational Considerations
- contents:
  - "6.  Security Considerations\n   A high-level discussion of security issues related
    to ALTO is part of\n   the ALTO problem statement [RFC5693].  A classification
    of unwanted\n   information disclosure risks, as well as specific security-related\n
    \  requirements, can be found in the ALTO requirements document\n   [RFC6708].\n
    \  The remainder of this section focuses on security threats and\n   protection
    mechanisms for the Cross-Domain ALTO Server Discovery\n   Procedure as such.  Once
    the ALTO server's URI has been discovered,\n   and the communication between the
    ALTO client and the ALTO server\n   starts, the security threats and protection
    mechanisms discussed in\n   the ALTO protocol specification [RFC7285] apply.\n"
  - contents:
    - "6.1.  Integrity of the ALTO Server's URI\n   Scenario Description\n      An
      attacker could compromise the ALTO server discovery procedure\n      or the
      underlying infrastructure in such a way that ALTO clients\n      would discover
      a \"wrong\" ALTO server URI.\n   Threat Discussion\n      The Cross-Domain ALTO
      Server Discovery Procedure relies on a\n      series of DNS lookups, in order
      to produce one or more URIs.  If\n      an attacker were able to modify or spoof
      any of the DNS records,\n      the resulting URIs could be replaced by forged
      URIs.  This is\n      probably the most serious security concern related to
      ALTO server\n      discovery.  The discovered \"wrong\" ALTO server might not
      be able\n      to give guidance to a given ALTO client at all, or it might give\n
      \     suboptimal or forged information.  In the latter case, an attacker\n      could
      try to use ALTO to affect the traffic distribution in the\n      network or
      the performance of applications (see also Section 15.1\n      of [RFC7285]).
      \ Furthermore, a hostile ALTO server could threaten\n      user privacy (see
      also Case (5a) in Section 5.2.1 of [RFC6708]).\n   Protection Strategies and
      Mechanisms\n      The application of DNS security (DNSSEC) [RFC4033] provides
      a\n      means of detecting and averting attacks that rely on modification\n
      \     of the DNS records while in transit.  All implementations of the\n      Cross-Domain
      ALTO Server Discovery Procedure MUST support DNSSEC\n      or be able to use
      such functionality provided by the underlying\n      operating system.  Network
      operators that publish U-NAPTR resource\n      records to be used for the Cross-Domain
      ALTO Server Discovery\n      Procedure SHOULD use DNSSEC to protect their subdomains
      of \"in-\n      addr.arpa.\" and/or \"ip6.arpa.\", respectively.  Additional\n
      \     operational precautions for safely operating the DNS\n      infrastructure
      are required in order to ensure that name servers\n      do not sign forged
      (or otherwise \"wrong\") resource records.\n      Security considerations specific
      to U-NAPTR are described in more\n      detail in [RFC4848].\n      In addition
      to active protection mechanisms, users and network\n      operators can monitor
      application performance and network traffic\n      patterns for poor performance
      or abnormalities.  If it turns out\n      that relying on the guidance of a
      specific ALTO server does not\n      result in better-than-random results, the
      usage of the ALTO server\n      may be discontinued (see also Section 15.2 of
      [RFC7285]).\n   Note\n      The Cross-Domain ALTO Server Discovery Procedure
      finishes\n      successfully when it has discovered one or more URIs.  Once
      an\n      ALTO server's URI has been discovered and the communication\n      between
      the ALTO client and the ALTO server starts, the security\n      threats and
      protection mechanisms discussed in the ALTO protocol\n      specification [RFC7285]
      apply.\n      A threat related to the one considered above is the impersonation\n
      \     of an ALTO server after its correct URI has been discovered.  This\n      threat
      and protection strategies are discussed in Section 15.1 of\n      [RFC7285].
      \ The ALTO protocol's primary mechanism for protecting\n      authenticity and
      integrity (as well as confidentiality) is the use\n      of HTTPS-based transport
      -- i.e., HTTP over TLS [RFC2818].\n      Typically, when the URI's host component
      is a host name, a further\n      DNS lookup is needed to map it to an IP address
      before the\n      communication with the server can begin.  This last DNS lookup\n
      \     (for A or AAAA resource records) does not necessarily have to be\n      protected
      by DNSSEC, as the server identity checks specified in\n      [RFC2818] are able
      to detect DNS spoofing or similar attacks after\n      the connection to the
      (possibly wrong) host has been established.\n      However, this validation,
      which is based on the server\n      certificate, can only protect the steps
      that occur after the\n      server URI has been discovered.  It cannot detect
      attacks against\n      the authenticity of the U-NAPTR lookups needed for the
      Cross-\n      Domain ALTO Server Discovery Procedure, and therefore, these\n
      \     resource records have to be secured using DNSSEC.\n"
    title: 6.1.  Integrity of the ALTO Server's URI
  - contents:
    - "6.2.  Availability of the ALTO Server Discovery Procedure\n   Scenario Description\n
      \     An attacker could compromise the Cross-Domain ALTO Server\n      Discovery
      Procedure or the underlying infrastructure in such a way\n      that ALTO clients
      would not be able to discover any ALTO server.\n   Threat Discussion\n      If
      no ALTO server can be discovered (although a suitable one\n      exists), applications
      have to make their decisions without ALTO\n      guidance.  As ALTO could be
      temporarily unavailable for many\n      reasons, applications must be prepared
      to do so.  However, the\n      resulting application performance and traffic
      distribution will\n      correspond to a deployment scenario without ALTO.\n
      \  Protection Strategies and Mechanisms\n      Operators should follow best
      current practices to secure their DNS\n      and ALTO servers (see Section 15.5
      of [RFC7285]) against Denial-\n      of-Service (DoS) attacks.\n"
    title: 6.2.  Availability of the ALTO Server Discovery Procedure
  - contents:
    - "6.3.  Confidentiality of the ALTO Server's URI\n   Scenario Description\n      An
      unauthorized party could invoke the Cross-Domain ALTO Server\n      Discovery
      Procedure or intercept discovery messages between an\n      authorized ALTO
      client and the DNS servers, in order to acquire\n      knowledge of the ALTO
      server URI for a specific IP address.\n   Threat Discussion\n      In the ALTO
      use cases that have been described in the ALTO problem\n      statement [RFC5693]
      and/or discussed in the ALTO working group,\n      the ALTO server's URI as
      such has always been considered as public\n      information that does not need
      protection of confidentiality.\n   Protection Strategies and Mechanisms\n      No
      protection mechanisms for this scenario have been provided, as\n      it has
      not been identified as a relevant threat.  However, if a\n      new use case
      is identified that requires this kind of protection,\n      the suitability
      of this ALTO server discovery procedure as well as\n      possible security
      extensions have to be re-evaluated thoroughly.\n"
    title: 6.3.  Confidentiality of the ALTO Server's URI
  - contents:
    - "6.4.  Privacy for ALTO Clients\n   Scenario Description\n      An unauthorized
      party could eavesdrop on the messages between an\n      ALTO client and the
      DNS servers and thereby find out the fact that\n      said ALTO client uses
      (or at least tries to use) the ALTO service\n      in order to optimize traffic
      from/to a specific IP address.\n   Threat Discussion\n      In the ALTO use
      cases that have been described in the ALTO problem\n      statement [RFC5693]
      and/or discussed in the ALTO working group,\n      this scenario has not been
      identified as a relevant threat.\n      However, pervasive surveillance [RFC7624]
      and DNS privacy\n      considerations [RFC7626] have seen significant attention
      in the\n      Internet community in recent years.\n   Protection Strategies
      and Mechanisms\n      DNS over TLS [RFC7858] and DNS over HTTPS [RFC8484] provide
      means\n      for protecting confidentiality (and integrity) of DNS traffic\n
      \     between a client (stub) and its recursive name servers, including\n      DNS
      queries and replies caused by the ALTO Cross-Domain Server\n      Discovery
      Procedure.\n"
    title: 6.4.  Privacy for ALTO Clients
  title: 6.  Security Considerations
- contents:
  - "7.  IANA Considerations\n   This document has no IANA actions.\n"
  title: 7.  IANA Considerations
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [RFC1035]  Mockapetris, P., \"Domain names -
      implementation and\n              specification\", STD 13, RFC 1035, DOI 10.17487/RFC1035,\n
      \             November 1987, <https://www.rfc-editor.org/info/rfc1035>.\n   [RFC2119]
      \ Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC3403]  Mealling,
      M., \"Dynamic Delegation Discovery System (DDDS)\n              Part Three:
      The Domain Name System (DNS) Database\",\n              RFC 3403, DOI 10.17487/RFC3403,
      October 2002,\n              <https://www.rfc-editor.org/info/rfc3403>.\n   [RFC3596]
      \ Thomson, S., Huitema, C., Ksinant, V., and M. Souissi,\n              \"DNS
      Extensions to Support IP Version 6\", STD 88,\n              RFC 3596, DOI 10.17487/RFC3596,
      October 2003,\n              <https://www.rfc-editor.org/info/rfc3596>.\n   [RFC4848]
      \ Daigle, L., \"Domain-Based Application Service Location\n              Using
      URIs and the Dynamic Delegation Discovery Service\n              (DDDS)\", RFC
      4848, DOI 10.17487/RFC4848, April 2007,\n              <https://www.rfc-editor.org/info/rfc4848>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [ALTO-ANYCAST]\n              Kiesel, S. and
      R. Penno, \"Application-Layer Traffic\n              Optimization (ALTO) Anycast
      Address\", Work in Progress,\n              Internet-Draft, draft-kiesel-alto-ip-based-srv-disc-03,
      1\n              July 2014, <https://tools.ietf.org/html/draft-kiesel-alto-\n
      \             ip-based-srv-disc-03>.\n   [ALTO4ALTO]\n              Kiesel,
      S., \"Using ALTO for ALTO server selection\", Work\n              in Progress,
      Internet-Draft, draft-kiesel-alto-alto4alto-\n              00, 5 July 2010,
      <https://tools.ietf.org/html/draft-\n              kiesel-alto-alto4alto-00>.\n
      \  [RFC1918]  Rekhter, Y., Moskowitz, B., Karrenberg, D., de Groot, G.\n              J.,
      and E. Lear, \"Address Allocation for Private\n              Internets\", BCP
      5, RFC 1918, DOI 10.17487/RFC1918,\n              February 1996, <https://www.rfc-editor.org/info/rfc1918>.\n
      \  [RFC2317]  Eidnes, H., de Groot, G., and P. Vixie, \"Classless IN-\n              ADDR.ARPA
      delegation\", BCP 20, RFC 2317,\n              DOI 10.17487/RFC2317, March 1998,\n
      \             <https://www.rfc-editor.org/info/rfc2317>.\n   [RFC2818]  Rescorla,
      E., \"HTTP Over TLS\", RFC 2818,\n              DOI 10.17487/RFC2818, May 2000,\n
      \             <https://www.rfc-editor.org/info/rfc2818>.\n   [RFC4033]  Arends,
      R., Austein, R., Larson, M., Massey, D., and S.\n              Rose, \"DNS Security
      Introduction and Requirements\",\n              RFC 4033, DOI 10.17487/RFC4033,
      March 2005,\n              <https://www.rfc-editor.org/info/rfc4033>.\n   [RFC4291]
      \ Hinden, R. and S. Deering, \"IP Version 6 Addressing\n              Architecture\",
      RFC 4291, DOI 10.17487/RFC4291, February\n              2006, <https://www.rfc-editor.org/info/rfc4291>.\n
      \  [RFC4632]  Fuller, V. and T. Li, \"Classless Inter-domain Routing\n              (CIDR):
      The Internet Address Assignment and Aggregation\n              Plan\", BCP 122,
      RFC 4632, DOI 10.17487/RFC4632, August\n              2006, <https://www.rfc-editor.org/info/rfc4632>.\n
      \  [RFC5389]  Rosenberg, J., Mahy, R., Matthews, P., and D. Wing,\n              \"Session
      Traversal Utilities for NAT (STUN)\", RFC 5389,\n              DOI 10.17487/RFC5389,
      October 2008,\n              <https://www.rfc-editor.org/info/rfc5389>.\n   [RFC5693]
      \ Seedorf, J. and E. Burger, \"Application-Layer Traffic\n              Optimization
      (ALTO) Problem Statement\", RFC 5693,\n              DOI 10.17487/RFC5693, October
      2009,\n              <https://www.rfc-editor.org/info/rfc5693>.\n   [RFC6708]
      \ Kiesel, S., Ed., Previdi, S., Stiemerling, M., Woundy, R.,\n              and
      Y. Yang, \"Application-Layer Traffic Optimization\n              (ALTO) Requirements\",
      RFC 6708, DOI 10.17487/RFC6708,\n              September 2012, <https://www.rfc-editor.org/info/rfc6708>.\n
      \  [RFC7216]  Thomson, M. and R. Bellis, \"Location Information Server\n              (LIS)
      Discovery Using IP Addresses and Reverse DNS\",\n              RFC 7216, DOI
      10.17487/RFC7216, April 2014,\n              <https://www.rfc-editor.org/info/rfc7216>.\n
      \  [RFC7285]  Alimi, R., Ed., Penno, R., Ed., Yang, Y., Ed., Kiesel, S.,\n              Previdi,
      S., Roome, W., Shalunov, S., and R. Woundy,\n              \"Application-Layer
      Traffic Optimization (ALTO) Protocol\",\n              RFC 7285, DOI 10.17487/RFC7285,
      September 2014,\n              <https://www.rfc-editor.org/info/rfc7285>.\n
      \  [RFC7286]  Kiesel, S., Stiemerling, M., Schwan, N., Scharf, M., and\n              H.
      Song, \"Application-Layer Traffic Optimization (ALTO)\n              Server
      Discovery\", RFC 7286, DOI 10.17487/RFC7286,\n              November 2014, <https://www.rfc-editor.org/info/rfc7286>.\n
      \  [RFC7624]  Barnes, R., Schneier, B., Jennings, C., Hardie, T.,\n              Trammell,
      B., Huitema, C., and D. Borkmann,\n              \"Confidentiality in the Face
      of Pervasive Surveillance: A\n              Threat Model and Problem Statement\",
      RFC 7624,\n              DOI 10.17487/RFC7624, August 2015,\n              <https://www.rfc-editor.org/info/rfc7624>.\n
      \  [RFC7626]  Bortzmeyer, S., \"DNS Privacy Considerations\", RFC 7626,\n              DOI
      10.17487/RFC7626, August 2015,\n              <https://www.rfc-editor.org/info/rfc7626>.\n
      \  [RFC7858]  Hu, Z., Zhu, L., Heidemann, J., Mankin, A., Wessels, D.,\n              and
      P. Hoffman, \"Specification for DNS over Transport\n              Layer Security
      (TLS)\", RFC 7858, DOI 10.17487/RFC7858, May\n              2016, <https://www.rfc-editor.org/info/rfc7858>.\n
      \  [RFC7971]  Stiemerling, M., Kiesel, S., Scharf, M., Seidel, H., and\n              S.
      Previdi, \"Application-Layer Traffic Optimization (ALTO)\n              Deployment
      Considerations\", RFC 7971,\n              DOI 10.17487/RFC7971, October 2016,\n
      \             <https://www.rfc-editor.org/info/rfc7971>.\n   [RFC8484]  Hoffman,
      P. and P. McManus, \"DNS Queries over HTTPS\n              (DoH)\", RFC 8484,
      DOI 10.17487/RFC8484, October 2018,\n              <https://www.rfc-editor.org/info/rfc8484>.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Appendix A.  Solution Approaches for Partitioned ALTO Knowledge\n   The ALTO
    base protocol document [RFC7285] specifies the communication\n   between an ALTO
    client and a single ALTO server.  It is implicitly\n   assumed that this server
    can answer any query, possibly with some\n   kind of default value if no exact
    data is known.  No special\n   provisions were made for the case that the ALTO
    information\n   originates from multiple sources, which are possibly under the\n
    \  control of different administrative entities (e.g., different ISPs)\n   or
    that the overall ALTO information is partitioned and stored on\n   several ALTO
    servers.\n"
  - contents:
    - "A.1.  Classification of Solution Approaches\n   Various protocol extensions
      and other solutions have been proposed to\n   deal with multiple information
      sources and partitioned knowledge.\n   They can be classified as follows:\n
      \  1.  Ensure that all ALTO servers have the same knowledge.\n       1.1  Ensure
      data replication and synchronization within the\n            provisioning protocol
      (cf. [RFC5693], Figure 1).\n       1.2  Use an inter-ALTO-server data replication
      protocol.\n            Possibly, the ALTO protocol itself -- maybe with some\n
      \           extensions -- could be used for that purpose; however, this\n            has
      not been studied in detail so far.\n   2.  Accept that different ALTO servers
      (possibly operated by\n       different organizations, e.g., ISPs) do not have
      the same\n       knowledge.\n       2.1  Allow ALTO clients to send arbitrary
      queries to any ALTO\n            server (e.g., the one discovered using [RFC7286]).
      \ If this\n            server cannot answer the query itself, it will fetch
      the\n            data on behalf of the client, using the ALTO protocol or a\n
      \           to-be-defined inter-ALTO-server request forwarding protocol.\n       2.2
      \ Allow ALTO clients to send arbitrary queries to any ALTO\n            server
      (e.g., the one discovered using [RFC7286]).  If this\n            server cannot
      answer the query itself, it will redirect the\n            client to the \"right\"
      ALTO server that has the desired\n            information, using a small to-be-defined
      extension of the\n            ALTO protocol.\n       2.3  ALTO clients need
      to use some kind of \"search engine\" that\n            indexes ALTO servers
      and redirects and/or gives cached\n            results.\n       2.4  ALTO clients
      need to use a new discovery mechanism to\n            discover the ALTO server
      that has the desired information\n            and contact it directly.\n"
    title: A.1.  Classification of Solution Approaches
  - contents:
    - "A.2.  Discussion of Solution Approaches\n   The provisioning or initialization
      protocol for ALTO servers\n   (cf. [RFC5693], Figure 1) is currently not standardized.
      \ It was a\n   conscious decision not to include this in the scope of the IETF
      ALTO\n   working group.  The reason is that there are many different kinds of\n
      \  information sources.  This implementation-specific protocol will\n   adapt
      them to the ALTO server, which offers a standardized protocol\n   to the ALTO
      clients.  However, adding the task of synchronization\n   between ALTO servers
      to this protocol (i.e., Approach 1.1) would\n   overload this protocol with
      a second functionality that requires\n   standardization for seamless multidomain
      operation.\n   For Approaches 1.1 and 1.2, in addition to general technical\n
      \  feasibility and issues like overhead and caching efficiency, another\n   aspect
      to consider is legal liability.  Operator \"A\" might prefer not\n   to publish
      information about nodes in, or paths between, the networks\n   of operators
      \"B\" and \"C\" through A's ALTO server, even if A knew that\n   information.
      \ This is not only a question of map size and processing\n   load on A's ALTO
      server.  Operator A could also face legal liability\n   issues if that information
      had a bad impact on the traffic\n   engineering between B's and C's networks
      or on their business models.\n   No specific actions to build a solution based
      on a \"search engine\"\n   (Approach 2.3) are currently known, and it is unclear
      what could be\n   the incentives to operate such an engine.  Therefore, this
      approach\n   is not considered in the remainder of this document.\n"
    title: A.2.  Discussion of Solution Approaches
  - contents:
    - "A.3.  The Need for Cross-Domain ALTO Server Discovery\n   Approaches 1.1, 1.2,
      2.1, and 2.2 require more than just the\n   specification of an ALTO protocol
      extension or a new protocol that\n   runs between ALTO servers.  A large-scale,
      maybe Internet-wide,\n   multidomain deployment would also need mechanisms by
      which an ALTO\n   server could discover other ALTO servers, learn which information
      is\n   available where, and ideally also who is authorized to publish\n   information
      related to a given part of the network.  Approach 2.4\n   needs the same mechanisms,
      except that they are used on the client\n   side instead of the server side.\n
      \  It is sometimes questioned whether there is a need for a solution\n   that
      allows clients to ask arbitrary queries, even if the ALTO\n   information is
      partitioned and stored on many ALTO servers.  The main\n   argument is that
      clients are supposed to optimize the traffic from\n   and to themselves, and
      that the information needed for that is most\n   likely stored on a \"nearby\"
      ALTO server -- i.e., the one that can be\n   discovered using [RFC7286].  However,
      there are scenarios where the\n   ALTO client is not co-located with an endpoint
      of the to-be-optimized\n   data transmission.  Instead, the ALTO client is located
      at a third\n   party that takes part in the application signaling -- e.g., a
      so-\n   called \"tracker\" in a peer-to-peer application.  One such scenario,\n
      \  where it is advantageous to place the ALTO client not at an endpoint\n   of
      the user data transmission, is analyzed in Appendix C.\n"
    title: A.3.  The Need for Cross-Domain ALTO Server Discovery
  - contents:
    - "A.4.  Our Solution Approach\n   Several solution approaches for cross-domain
      ALTO server discovery\n   have been evaluated, using the criteria documented
      in Appendix B.\n   One of them was to use the ALTO protocol itself for the exchange
      of\n   information availability [ALTO4ALTO].  However, the drawback of that\n
      \  approach is that a new registration administration authority would\n   have
      to be established.\n   This document specifies a DNS-based procedure for cross-domain
      ALTO\n   server discovery, which was inspired by \"Location Information Server\n
      \  (LIS) Discovery Using IP Addresses and Reverse DNS\" [RFC7216].  The\n   primary
      goal is that this procedure can be used on the client side\n   (i.e., Approach
      2.4), but together with new protocols or protocol\n   extensions, it could also
      be used to implement the other solution\n   approaches itemized above.\n"
    title: A.4.  Our Solution Approach
  - contents:
    - "A.5.  Relation to the ALTO Requirements\n   During the design phase of the
      overall ALTO solution, two different\n   server discovery scenarios were identified
      and documented in the ALTO\n   requirements document [RFC6708].  The first scenario,
      documented in\n   Req. AR-32, can be supported using the discovery mechanisms
      specified\n   in [RFC7286].  An alternative approach, based on IP anycast\n
      \  [ALTO-ANYCAST], has also been studied.  This document, in contrast,\n   tries
      to address Req. AR-33.\n"
    title: A.5.  Relation to the ALTO Requirements
  title: Appendix A.  Solution Approaches for Partitioned ALTO Knowledge
- contents:
  - "Appendix B.  Requirements for Cross-Domain Server Discovery\n   This appendix
    itemizes requirements that were collected before the\n   design phase and are
    reflected in the design of the ALTO Cross-Domain\n   Server Discovery Procedure.\n"
  - contents:
    - "B.1.  Discovery Client Application Programming Interface\n   The discovery
      client will be called through some kind of application\n   programming interface
      (API), and the parameters will be an IP address\n   and, for purposes of extensibility,
      a service identifier such as\n   \"ALTO\".  The client will return one or more
      URIs that offer the\n   requested service (\"ALTO\") for the given IP address.\n
      \  In other words, the client would be used to retrieve a mapping:\n   (IP address,
      \"ALTO\") -> IRD-URI(s)\n   where IRD-URI(s) is one or more URIs of Information
      Resource\n   Directories (IRDs, see Section 9 of [RFC7285]) of ALTO servers
      that\n   can give reasonable guidance to a resource consumer with the\n   indicated
      IP address.\n"
    title: B.1.  Discovery Client Application Programming Interface
  - contents:
    - "B.2.  Data Storage and Authority Requirements\n   The information for mapping
      IP addresses and service parameters to\n   URIs should be stored in a -- preferably
      distributed -- database.  It\n   must be possible to delegate administration
      of parts of this\n   database.  Usually, the mapping from a specific IP address
      to a URI\n   is defined by the authority that has administrative control over
      this\n   IP address -- e.g., the ISP in residential access networks or the IT\n
      \  department in enterprise, university, or similar networks.\n"
    title: B.2.  Data Storage and Authority Requirements
  - contents:
    - "B.3.  Cross-Domain Operations Requirements\n   The cross-domain server discovery
      mechanism should be designed in\n   such a way that it works across the public
      Internet and also in other\n   IP-based networks.  This, in turn, means that
      such mechanisms cannot\n   rely on protocols that are not widely deployed across
      the Internet or\n   protocols that require special handling within participating\n
      \  networks.  An example is multicast, which is not generally available\n   across
      the Internet.\n   The ALTO Cross-Domain Server Discovery Protocol must support
      gradual\n   deployment without a network-wide flag day.  If the mechanism needs\n
      \  some kind of well-known \"rendezvous point\", reusing an existing\n   infrastructure
      (such as the DNS root servers or the WHOIS database)\n   should be preferred
      over establishing a new one.\n"
    title: B.3.  Cross-Domain Operations Requirements
  - contents:
    - "B.4.  Protocol Requirements\n   The protocol must be able to operate across
      middleboxes, especially\n   NATs and firewalls.\n   The protocol shall not require
      any preknowledge from the client other\n   than any information that is known
      to a regular IP host on the\n   Internet.\n"
    title: B.4.  Protocol Requirements
  - contents:
    - "B.5.  Further Requirements\n   The ALTO cross-domain server discovery cannot
      assume that the server-\n   discovery client and the server-discovery responding
      entity are under\n   the same administrative control.\n"
    title: B.5.  Further Requirements
  title: Appendix B.  Requirements for Cross-Domain Server Discovery
- contents:
  - "Appendix C.  ALTO and Tracker-Based Peer-to-Peer Applications\n   This appendix
    provides a complete example of using ALTO and the ALTO\n   Cross-Domain Server
    Discovery Procedure in one specific application\n   scenario -- namely, a tracker-based
    peer-to-peer application.  First,\n   in Appendix C.1, we introduce a generic
    model of such an application\n   and show why ALTO optimization is desirable.
    \ Then, in Appendix C.2,\n   we introduce two architectural options for integrating
    ALTO into the\n   tracker-based peer-to-peer application; one option is based
    on the\n   \"regular\" ALTO server discovery procedure [RFC7286], and one relies\n
    \  on the ALTO Cross-Domain Server Discovery Procedure.  In\n   Appendix C.3,
    a simple mathematical model is used to show that the\n   latter approach is expected
    to yield significantly better\n   optimization results.  The appendix concludes
    with Appendix C.4,\n   which details an exemplary complete walk-through of the
    ALTO Cross-\n   Domain Server Discovery Procedure.\n"
  - contents:
    - "C.1.  A Generic Tracker-Based Peer-to-Peer Application\n   The optimization
      of peer-to-peer (P2P) applications such as\n   BitTorrent was one of the first
      use cases that lead to the inception\n   of the IETF ALTO working group.  Further
      use cases have been\n   identified as well, yet we will use this scenario to
      illustrate the\n   operation and usefulness of the ALTO Cross-Domain Server
      Discovery\n   Procedure.\n   For the remainder of this chapter, we consider
      a generic, tracker-\n   based peer-to-peer file-sharing application.  The goal
      is the\n   dissemination of a large file, without using one large server with
      a\n   correspondingly high upload bandwidth.  The file is split into\n   chunks.
      \ So-called \"peers\" assume the role of both a client and a\n   server.  That
      is, they may request chunks from other peers, and they\n   may serve the chunks
      they already possess to other peers at the same\n   time, thereby contributing
      their upload bandwidth.  Peers that want\n   to share the same file participate
      in a \"swarm\".  They use the peer-\n   to-peer protocol to inform each other
      about the availability of\n   chunks and request and transfer chunks from one
      peer to another.  A\n   swarm may consist of a very large number of peers.  Consequently,\n
      \  peers usually maintain logical connections to only a subset of all\n   peers
      in the swarm.  If a new peer wants to join a swarm, it first\n   contacts a
      well-known server, the \"tracker\", which provides a list of\n   IP addresses
      of peers in the swarm.\n   A swarm is an overlay network on top of the IP network.
      \ Algorithms\n   that determine the overlay topology and the traffic distribution
      in\n   the overlay may consider information about the underlying IP network,\n
      \  such as topological distance, link bandwidth, (monetary) costs for\n   sending
      traffic from one host to another, etc.  ALTO is a protocol\n   for retrieving
      such information.  The goal of such \"topology-aware\"\n   decisions is to improve
      performance or Quality of Experience in the\n   application while reducing the
      utilization of the underlying network\n   infrastructure.\n"
    title: C.1.  A Generic Tracker-Based Peer-to-Peer Application
  - contents:
    - "C.2.  Architectural Options for Placing the ALTO Client\n   The ALTO protocol
      specification [RFC7285] details how an ALTO client\n   can query an ALTO server
      for guiding information and receive the\n   corresponding replies.  However,
      in the considered scenario of a\n   tracker-based P2P application, there are
      two fundamentally different\n   possible locations for where to place the ALTO
      client:\n   1.  ALTO client in the resource consumer (\"peer\")\n   2.  ALTO
      client in the resource directory (\"tracker\")\n   In the following, both scenarios
      are compared in order to explain the\n   need for ALTO queries on behalf of
      remote resource consumers.\n   In the first scenario (see Figure 2), the resource
      consumer queries\n   the resource directory for the desired resource (F1).  The
      resource\n   directory returns a list of potential resource providers without\n
      \  considering ALTO (F2).  It is then the duty of the resource consumer\n   to
      invoke ALTO (F3/F4), in order to solicit guidance regarding this\n   list.\n
      \  In the second scenario (see Figure 4), the resource directory has an\n   embedded
      ALTO client.  After receiving a query for a given resource\n   (F1), the resource
      directory invokes this ALTO client to evaluate all\n   resource providers it
      knows (F2/F3).  Then it returns a list,\n   possibly shortened, containing the
      \"best\" resource providers to the\n   resource consumer (F4).\n    : Tracker
      \                  :          : Peer                      :\n    :   ______
      \                 :          :                           :\n    : +-______-+
      \               :          :            k good         :\n    : |   N    |     |
      random | : Protocol : | ALTO-  |------>| data | :\n    : | known  |====>| pre-
      \  |*************>| biased |       | ex-  | :\n    : | peers, |     | selec-
      | : transmit : | peer   |------>| cha- | :\n    : | M good |     | tion   |
      : n peer   : | select | n-k   | nge  | :\n    : +-______-+     +--------+ :
      IDs      : +--------+ bad p.+------+ :\n   Figure 1: Tracker-Based P2P Application
      with Random Peer Preselection\n   Peer w. ALTO cli.            Tracker               ALTO
      Server\n           | F1 Tracker query      |                       |\n           |
      F2 Tracker reply      |                       |\n           | F3 ALTO query
      \        |                       |\n           | F4 ALTO reply         |                       |\n
      \  ====  Application protocol (i.e., tracker-based P2P app protocol)\n   ----
      \ ALTO protocol\n       Figure 2: Basic Message Sequence Chart for Resource
      Consumer-\n                            Initiated ALTO Query\n    : Tracker                   :
      \         : Peer                      :\n    :   ______                  :          :
      \                          :\n    : +-______-+                :          :                           :\n
      \   : |   N    |     | ALTO-  | : Protocol :  n-k bad peers   | data | :\n    :
      | known  |====>| biased |******************************>| ex-  | :\n    : |
      peers, |     | peer   | : transmit :                  | cha- | :\n    : | M
      good |     | select | : n peer   :                  | nge  | :\n    : +-______-+
      \    +--------+ : IDs      :                  +------+ :\n                          |\n
      \                         | ALTO protocol\n                        __|___\n
      \                     +-______-+\n                      | ALTO   |\n                      |
      server |\n                      +-______-+\n    Figure 3: Tracker-Based P2P
      Application with ALTO Client in Tracker\n         Peer             Tracker w.
      ALTO cli.       ALTO Server\n           | F1 Tracker query      |                       |\n
      \          | F4 Tracker reply      |                       |\n   ====  Application
      protocol (i.e., tracker-based P2P app protocol)\n   ----  ALTO protocol\n      Figure
      4: Basic Message Sequence Chart for ALTO Query on Behalf\n                        of
      Remote Resource Consumer\n      |  Note: The message sequences depicted in Figures
      2 and 4 may\n      |  occur both in the target-aware and the target-independent
      query\n      |  mode (cf. [RFC6708]).  In the target-independent query mode,
      no\n      |  message exchange with the ALTO server might be needed after the\n
      \     |  tracker query, because the candidate resource providers could\n      |
      \ be evaluated using a locally cached \"map\", which has been\n      |  retrieved
      from the ALTO server some time ago.\n"
    title: C.2.  Architectural Options for Placing the ALTO Client
  - contents:
    - "C.3.  Evaluation\n   The problem with the first approach is that while the
      resource\n   directory might know thousands of peers taking part in a swarm,
      the\n   list returned to the resource consumer is usually shortened for\n   efficiency
      reasons.  Therefore, the \"best\" (in the sense of ALTO)\n   potential resource
      providers might not be contained in that list\n   anymore, even before ALTO
      can consider them.\n   For illustration, consider a simple model of a swarm,
      in which all\n   peers fall into one of only two categories: assume that there
      are\n   only \"good\" (in the sense of ALTO's better-than-random peer\n   selection,
      based on an arbitrary desired rating criterion) and \"bad\"\n   peers.  Having
      more different categories makes the math more complex\n   but does not change
      anything about the basic outcome of this\n   analysis.  Assume that the swarm
      has a total number of N peers, out\n   of which there are M \"good\" and N-M
      \"bad\" peers, which are all known\n   to the tracker.  A new peer wants to
      join the swarm and therefore\n   asks the tracker for a list of peers.\n   If,
      according to the first approach, the tracker randomly picks n\n   peers from
      the N known peers, the result can be described with the\n   hypergeometric distribution.
      \ The probability that the tracker reply\n   contains exactly k \"good\" peers
      (and n-k \"bad\" peers) is:\n               / M \\   / N - M \\\n               \\
      k /   \\ n - k /\n   P(X=k) =  ---------------------\n                     /
      N \\\n                     \\ n /\n           / n \\        n!\n   with    \\
      k /  = -----------    and   n! = n * (n-1) * (n-2) * .. * 1\n                     k!
      (n-k)!\n   The probability that the reply contains at most k \"good\" peers
      is:\n   P(X<=k) = P(X=0) + P(X=1) + .. + P(X=k).\n   For example, consider a
      swarm with N=10,000 peers known to the\n   tracker, out of which M=100 are \"good\"
      peers.  If the tracker\n   randomly selects n=100 peers, the formula yields
      for the reply:\n   P(X=0)=36%, P(X<=4)=99%. That is, with a probability of approximately\n
      \  36%, this list does not contain a single \"good\" peer, and with 99%\n   probability,
      there are only four or fewer of the \"good\" peers on the\n   list.  Processing
      this list with the guiding ALTO information will\n   ensure that the few favorable
      peers are ranked to the top of the\n   list; however, the benefit is rather
      limited as the number of\n   favorable peers in the list is just too small.\n
      \  Much better traffic optimization could be achieved if the tracker\n   would
      evaluate all known peers using ALTO and return a list of 100\n   peers afterwards.
      \ This list would then include a significantly\n   higher fraction of \"good\"
      peers.  (Note that if the tracker returned\n   \"good\" peers only, there might
      be a risk that the swarm might\n   disconnect and split into several disjunct
      partitions.  However,\n   finding the right mix of ALTO-biased and random peer
      selection is out\n   of the scope of this document.)\n   Therefore, from an
      overall optimization perspective, the second\n   scenario with the ALTO client
      embedded in the resource directory is\n   advantageous, because it is ensured
      that the addresses of the \"best\"\n   resource providers are actually delivered
      to the resource consumer.\n   An architectural implication of this insight is
      that the ALTO server\n   discovery procedures must support ALTO queries on behalf
      of remote\n   resource consumers.  That is, as the tracker issues ALTO queries
      on\n   behalf of the peer that contacted the tracker, the tracker must be\n
      \  able to discover an ALTO server that can give guidance suitable for\n   that
      peer.  This task can be solved using the ALTO Cross-Domain\n   Server Discovery
      Procedure.\n"
    title: C.3.  Evaluation
  - contents:
    - "C.4.  Example\n   This section provides a complete example of the ALTO Cross-Domain\n
      \  Server Discovery Procedure in a tracker-based peer-to-peer scenario.\n   The
      example is based on the network topology shown in Figure 5.  Five\n   access
      networks -- Networks a, b, c, x, and t -- are operated by five\n   different
      network operators.  They are interconnected by a backbone\n   structure.  Each
      network operator runs an ALTO server in their\n   network -- i.e., ALTO_SRV_A,
      ALTO_SRV_B, ALTO_SRV_C, ALTO_SRV_X, and\n   ALTO_SRV_T, respectively.\n        _____
      \   __             _____    __             _____    __\n     __(     )__(  )_
      \       __(     )__(  )_        __(     )__(  )_\n    (    Network a   )      (
      \   Network b   )      (    Network c   )\n   ( Res. Provider A  )    ( Res.
      Provider B  )    ( Res. Provider C  )\n    (__ ALTO_SRV_A __)      (__ ALTO_SRV_B
      __)      (__ ALTO_SRV_C __)\n      (___)--(____) \\         (___)--(____)         /
      (___)--(____)\n                   _____    __/            _____   \\__\n                __(
      \    )__(  )_        __(     )__(  )_\n               (    Network x   )      (
      \   Network t   )\n              ( Res. Consumer X  )    (Resource Directory)\n
      \              (_  ALTO_SRV_X __)      (_  ALTO_SRV_T __)\n                 (___)--(____)
      \          (___)--(____)\n                     Figure 5: Example Network Topology\n
      \  A new peer of a peer-to-peer application wants to join a specific\n   swarm
      (overlay network), in order to access a specific resource.\n   This new peer
      will be called \"Resource Consumer X\", in accordance\n   with the terminology
      of [RFC6708], and is located in Network x.  It\n   contacts the tracker (\"Resource
      Directory\"), which is located in\n   Network t.  The mechanism by which the
      new peer discovers the tracker\n   is out of the scope of this document.  The
      tracker maintains a list\n   of peers that take part in the overlay network,
      and hence it can\n   determine that Resource Providers A, B, and C are candidate
      peers for\n   Resource Consumer X.\n   As shown in the previous section, a tracker-side
      ALTO optimization\n   (cf. Figures 3 and 4) is more efficient than a client-side\n
      \  optimization.  Consequently, the tracker wants to use the ALTO\n   Endpoint
      Cost Service (ECS) to learn the routing costs between X and\n   A, X and B,
      and X and C, in order to sort A, B, and C by their\n   respective routing costs
      to X.\n   In theory, there are many options for how the ALTO Cross-Domain\n
      \  Server Discovery Procedure could be used.  For example, the tracker\n   could
      do the following steps:\n   IRD_URIS_A = XDOMDISC(A,\"ALTO:https\")\n   COST_X_A
      \  = query the ECS(X,A,routingcost) found in IRD_URIS_A\n   IRD_URIS_B = XDOMDISC(B,\"ALTO:https\")\n
      \  COST_X_B   = query the ECS(X,B,routingcost) found in IRD_URIS_B\n   IRD_URIS_C
      = XDOMDISC(C,\"ALTO:https\")\n   COST_X_C   = query the ECS(X,C,routingcost)
      found in IRD_URIS_C\n   In this scenario, the ALTO Cross-Domain Server Discovery
      Procedure\n   queries might yield: IRD_URIS_A = ALTO_SRV_A, IRD_URIS_B =\n   ALTO_SRV_B,
      and IRD_URIS_C = ALTO_SRV_C.  That is, each ECS query\n   would be sent to a
      different ALTO server.  The problem with this\n   approach is that we are not
      necessarily able to compare COST_X_A,\n   COST_X_B, and COST_X_C with each other.
      \ The specification of the\n   routingcost metric mandates that \"A lower value
      indicates a higher\n   preference\", but \"an ISP may internally compute routing
      cost using\n   any method that it chooses\" (see Section 6.1.1.1 of [RFC7285]).\n
      \  Thus, COST_X_A could be 10 (milliseconds round-trip time), while\n   COST_X_B
      could be 200 (kilometers great circle distance between the\n   approximate geographic
      locations of the hosts) and COST_X_C could be\n   3 (router hops, corresponding
      to a decrease of the TTL field in the\n   IP header).  Each of these metrics
      fulfills the \"lower value is more\n   preferable\" requirement on its own,
      but they obviously cannot be\n   compared with each other.  Even if there were
      a reasonable formula to\n   compare, for example, kilometers with milliseconds,
      we could not use\n   it, as the units of measurement (or any other information
      about the\n   computation method for the routingcost) are not sent along with
      the\n   value in the ECS reply.\n   To avoid this problem, the tracker tries
      to send all ECS queries to\n   the same ALTO server.  As specified in Section
      4.4 of this document,\n   Case 2, it uses the IP address of Resource Consumer
      x as a parameter\n   of the discovery procedure:\n   IRD_URIS_X = XDOMDISC(X,\"ALTO:https\")\n
      \  COST_X_A   = query the ECS(X,A,routingcost) found in IRD_URIS_X\n   COST_X_B
      \  = query the ECS(X,B,routingcost) found in IRD_URIS_X\n   COST_X_C   = query
      the ECS(X,C,routingcost) found in IRD_URIS_X\n   This strategy ensures that
      COST_X_A, COST_X_B, and COST_X_C can be\n   compared with each other.\n   As
      discussed above, the tracker calls the ALTO Cross-Domain Server\n   Discovery
      Procedure with IP address X as a parameter.  For the\n   remainder of this example,
      we assume that X =\n   2001:DB8:1:2:227:eff:fe6a:de42.  Thus, the procedure
      call is\n   IRD_URIS_X = XDOMDISC(2001:DB8:1:2:227:eff:fe6a:de42,\"ALTO:https\").\n
      \  The first parameter, 2001:DB8:1:2:227:eff:fe6a:de42, is a single IPv6\n   address.
      \ Thus, we get AT = IPv6, A = 2001:DB8:1:2:227:eff:fe6a:de42,\n   L = 128, and
      SP = \"ALTO:https\".\n   The procedure constructs (see Step 1 in Section 3.2)\n
      \  R128 = \"2.4.E.D.A.6.E.F.F.F.E.0.7.2.2.0.2.0.0.0.1.0.0.0.\n           8.B.D.0.1.0.0.2.IP6.ARPA.\"\n
      \  as well as the following (see Step 2 in Section 3.2):\n   R64 = \"2.0.0.0.1.0.0.0.8.B.D.0.1.0.0.2.IP6.ARPA.\"\n
      \  R56 = \"0.0.1.0.0.0.8.B.D.0.1.0.0.2.IP6.ARPA.\"\n   R48 = \"1.0.0.0.8.B.D.0.1.0.0.2.IP6.ARPA.\"\n
      \  R40 = \"0.0.8.B.D.0.1.0.0.2.IP6.ARPA.\"\n   R32 = \"8.B.D.0.1.0.0.2.IP6.ARPA.\"\n
      \  In order to illustrate the third step of the ALTO Cross-Domain Server\n   Discovery
      Procedure, we use the \"dig\" (domain information groper) DNS\n   lookup utility
      that is available for many operating systems (e.g.,\n   Linux).  A real implementation
      of the ALTO Cross-Domain Server\n   Discovery Procedure would not be based on
      the \"dig\" utility but\n   instead would use appropriate libraries and/or operating-system
      APIs.\n   Please note that the following steps have been performed in a\n   controlled
      lab environment with an appropriately configured name\n   server.  A suitable
      DNS configuration will be needed to reproduce\n   these results.  Please also
      note that the rather verbose output of\n   the \"dig\" tool has been shortened
      to the relevant lines.\n   Since AT = IPv6 and L = 128, in the table given in
      Section 3.4, the\n   sixth row (not counting the column headers) applies.\n
      \  As mandated by the third column, we start with a lookup of R128,\n   looking
      for NAPTR resource records:\n   | user@labpc:~$ dig -tNAPTR 2.4.E.D.A.6.E.F.F.F.E.0.7.2.2.0.\\\n
      \  | 2.0.0.0.1.0.0.0.8.B.D.0.1.0.0.2.IP6.ARPA.\n   |\n   | ;; Got answer:\n
      \  | ;; ->>HEADER<<- opcode: QUERY, status: NXDOMAIN, id: 26553\n   | ;; flags:
      qr aa rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADD'L: 0\n   The domain name
      R128 does not exist (status: NXDOMAIN), so we cannot\n   get a useful result.
      \ Therefore, we continue with the fourth column\n   of the table and do a lookup
      of R64:\n   | user@labpc:~$ dig -tNAPTR 2.0.0.0.1.0.0.0.8.B.D.0.1.0.0.2.IP6.ARPA.\n
      \  |\n   | ;; Got answer:\n   | ;; ->>HEADER<<- opcode: QUERY, status: NOERROR,
      id: 33193\n   | ;; flags: qr aa rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADD'L:
      0\n   The domain name R64 could be looked up (status: NOERROR), but there\n
      \  are no NAPTR resource records associated with it (ANSWER: 0).  There\n   may
      be some other resource records such as PTR, NS, or SOA, but we\n   are not interested
      in them.  Thus, we do not get a useful result, and\n   we continue with looking
      up R56:\n   | user@labpc:~$ dig -tNAPTR 0.0.1.0.0.0.8.B.D.0.1.0.0.2.IP6.ARPA.\n
      \  |\n   | ;; Got answer:\n   | ;; ->>HEADER<<- opcode: QUERY, status: NOERROR,
      id: 35966\n   | ;; flags: qr aa rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 1, ADD'L:
      2\n   |\n   | ;; ANSWER SECTION:\n   | 0.0.1.0.0.0.8.B.D.0.1.0.0.2.IP6.ARPA.
      604800 IN NAPTR 100 10 \"u\"\n   |  \"LIS:HELD\" \"!.*!https://lis1.example.org:4802/?c=ex!\"
      .\n   | 0.0.1.0.0.0.8.B.D.0.1.0.0.2.IP6.ARPA. 604800 IN NAPTR 100 20 \"u\"\n
      \  |  \"LIS:HELD\" \"!.*!https://lis2.example.org:4802/?c=ex!\" .\n   The domain
      name R56 could be looked up, and there are NAPTR resource\n   records associated
      with it.  However, each of these records has a\n   service parameter that does
      not match our SP = \"ALTO:https\" (see\n   [RFC7216] for \"LIS:HELD\"), and
      therefore we have to ignore them.\n   Consequently, we still do not have a useful
      result and continue with\n   a lookup of R48:\n   | user@labpc:~$ dig -tNAPTR
      1.0.0.0.8.B.D.0.1.0.0.2.IP6.ARPA.\n   |\n   | ;; Got answer:\n   | ;; ->>HEADER<<-
      opcode: QUERY, status: NOERROR, id: 50459\n   | ;; flags: qr aa rd ra; QUERY:
      1, ANSWER: 2, AUTHORITY: 1, ADD'L: 2\n   |\n   | ;; ANSWER SECTION:\n   | 1.0.0.0.8.B.D.0.1.0.0.2.IP6.ARPA.
      604800 IN NAPTR 100 10 \"u\"\n   |  \"ALTO:https\" \"!.*!https://alto1.example.net/ird!\"
      .\n   | 1.0.0.0.8.B.D.0.1.0.0.2.IP6.ARPA. 604800 IN NAPTR 100 10 \"u\"\n   |
      \ \"LIS:HELD\" \"!.*!https://lis.example.net:4802/?c=ex!\" .\n   This lookup
      yields two NAPTR resource records.  We have to ignore the\n   second one as
      its service parameter does not match our SP, but the\n   first NAPTR resource
      record has a matching service parameter.\n   Therefore, the procedure terminates
      successfully and the final\n   outcome is: IRD_URIS_X = \"https://alto1.example.net/ird\".\n
      \  The ALTO client that is embedded in the tracker will access the ALTO\n   Information
      Resource Directory (IRD, see Section 9 of [RFC7285]) at\n   this URI, look for
      the Endpoint Cost Service (ECS, see Section 11.5\n   of [RFC7285]), and query
      the ECS for the costs between A and X, B and\n   X, and C and X, before returning
      an ALTO-optimized list of candidate\n   resource providers to resource consumer
      X.\n"
    title: C.4.  Example
  title: Appendix C.  ALTO and Tracker-Based Peer-to-Peer Applications
- contents:
  - "Acknowledgments\n   The initial draft version of this document was co-authored
    by Marco\n   Tomsu (Alcatel-Lucent).\n   This document borrows some text from
    [RFC7286], as historically, it\n   was part of the draft that eventually became
    said RFC.  Special\n   thanks to Michael Scharf and Nico Schwan.\n"
  title: Acknowledgments
- contents:
  - "Authors' Addresses\n   Sebastian Kiesel\n   University of Stuttgart Information
    Center\n   Allmandring 30\n   70550 Stuttgart\n   Germany\n   Email: ietf-alto@skiesel.de\n
    \  URI:   http://www.izus.uni-stuttgart.de\n   Martin Stiemerling\n   University
    of Applied Sciences Darmstadt, Computer Science Dept.\n   Haardtring 100\n   64295
    Darmstadt\n   Germany\n"
  title: Authors' Addresses
