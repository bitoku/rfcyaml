- title: __initial_text__
  contents:
  - '                        OAuth 2.0 Token Exchange

    '
- title: Abstract
  contents:
  - "Abstract\n   This specification defines a protocol for an HTTP- and JSON-based\n\
    \   Security Token Service (STS) by defining how to request and obtain\n   security\
    \ tokens from OAuth 2.0 authorization servers, including\n   security tokens employing\
    \ impersonation and delegation.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8693.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n     1.1.  Delegation vs. Impersonation\
    \ Semantics\n     1.2.  Requirements Notation and Conventions\n     1.3.  Terminology\n\
    \   2.  Token Exchange Request and Response\n     2.1.  Request\n       2.1.1.\
    \  Relationship between Resource, Audience, and Scope\n     2.2.  Response\n \
    \      2.2.1.  Successful Response\n       2.2.2.  Error Response\n     2.3. \
    \ Example Token Exchange\n   3.  Token Type Identifiers\n   4.  JSON Web Token\
    \ Claims and Introspection Response Parameters\n     4.1.  \"act\" (Actor) Claim\n\
    \     4.2.  \"scope\" (Scopes) Claim\n     4.3.  \"client_id\" (Client Identifier)\
    \ Claim\n     4.4.  \"may_act\" (Authorized Actor) Claim\n   5.  Security Considerations\n\
    \   6.  Privacy Considerations\n   7.  IANA Considerations\n     7.1.  OAuth URI\
    \ Registration\n     7.2.  OAuth Parameters Registration\n     7.3.  OAuth Access\
    \ Token Type Registration\n     7.4.  JSON Web Token Claims Registration\n   \
    \  7.5.  OAuth Token Introspection Response Registration\n   8.  References\n\
    \     8.1.  Normative References\n     8.2.  Informative References\n   Appendix\
    \ A.  Additional Token Exchange Examples\n     A.1.  Impersonation Token Exchange\
    \ Example\n       A.1.1.  Token Exchange Request\n       A.1.2.  Subject Token\
    \ Claims\n       A.1.3.  Token Exchange Response\n       A.1.4.  Issued Token\
    \ Claims\n     A.2.  Delegation Token Exchange Example\n       A.2.1.  Token Exchange\
    \ Request\n       A.2.2.  Subject Token Claims\n       A.2.3.  Actor Token Claims\n\
    \       A.2.4.  Token Exchange Response\n       A.2.5.  Issued Token Claims\n\
    \   Acknowledgements\n   Authors' Addresses\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   A security token is a set of information that facilitates\
    \ the sharing\n   of identity and security information in heterogeneous environments\
    \ or\n   across security domains.  Examples of security tokens include JSON\n\
    \   Web Tokens (JWTs) [JWT] and Security Assertion Markup Language (SAML)\n  \
    \ 2.0 assertions [OASIS.saml-core-2.0-os].  Security tokens are\n   typically\
    \ signed to achieve integrity and sometimes also encrypted to\n   achieve confidentiality.\
    \  Security tokens are also sometimes\n   described as assertions, such as in\
    \ [RFC7521].\n   A Security Token Service (STS) is a service capable of validating\n\
    \   security tokens provided to it and issuing new security tokens in\n   response,\
    \ which enables clients to obtain appropriate access\n   credentials for resources\
    \ in heterogeneous environments or across\n   security domains.  Web Service clients\
    \ have used WS-Trust [WS-Trust]\n   as the protocol to interact with an STS for\
    \ token exchange.  While\n   WS-Trust uses XML and SOAP, the trend in modern Web\
    \ development has\n   been towards RESTful (Representational State Transfer) patterns\
    \ and\n   JSON.  The OAuth 2.0 Authorization Framework [RFC6749] and OAuth 2.0\n\
    \   Bearer Tokens [RFC6750] have emerged as popular standards for\n   authorizing\
    \ third-party applications' access to HTTP and RESTful\n   resources.  The conventional\
    \ OAuth 2.0 interaction involves the\n   exchange of some representation of resource\
    \ owner authorization for\n   an access token, which has proven to be an extremely\
    \ useful pattern\n   in practice.  However, its input and output are somewhat\
    \ too\n   constrained as is to fully accommodate a security token exchange\n \
    \  framework.\n   This specification defines a protocol extending OAuth 2.0 that\n\
    \   enables clients to request and obtain security tokens from\n   authorization\
    \ servers acting in the role of an STS.  Similar to OAuth\n   2.0, this specification\
    \ focuses on client developer simplicity and\n   requires only an HTTP client\
    \ and JSON parser, which are nearly\n   universally available in modern development\
    \ environments.  The STS\n   protocol defined in this specification is not itself\
    \ RESTful (an STS\n   doesn't lend itself particularly well to a REST approach)\
    \ but does\n   utilize communication patterns and data formats that should be\n\
    \   familiar to developers accustomed to working with RESTful systems.\n   A new\
    \ grant type for a token exchange request and the associated\n   specific parameters\
    \ for such a request to the token endpoint are\n   defined by this specification.\
    \  A token exchange response is a normal\n   OAuth 2.0 response from the token\
    \ endpoint with a few additional\n   parameters defined herein to provide information\
    \ to the client.\n   The entity that makes the request to exchange tokens is considered\n\
    \   the client in the context of the token exchange interaction.\n   However,\
    \ that does not restrict usage of this profile to traditional\n   OAuth clients.\
    \  An OAuth resource server, for example, might assume\n   the role of the client\
    \ during token exchange in order to trade an\n   access token that it received\
    \ in a protected resource request for a\n   new token that is appropriate to include\
    \ in a call to a backend\n   service.  The new token might be an access token\
    \ that is more\n   narrowly scoped for the downstream service or it could be an\
    \ entirely\n   different kind of token.\n   The scope of this specification is\
    \ limited to the definition of a\n   basic request-and-response protocol for an\
    \ STS-style token exchange\n   utilizing OAuth 2.0.  Although a few new JWT claims\
    \ are defined that\n   enable delegation semantics to be expressed, the specific\
    \ syntax,\n   semantics, and security characteristics of the tokens themselves\n\
    \   (both those presented to the authorization server and those obtained\n   by\
    \ the client) are explicitly out of scope, and no requirements are\n   placed\
    \ on the trust model in which an implementation might be\n   deployed.  Additional\
    \ profiles may provide more detailed requirements\n   around the specific nature\
    \ of the parties and trust involved, such as\n   whether signing and/or encryption\
    \ of tokens is needed or if proof-of-\n   possession-style tokens will be required\
    \ or issued.  However, such\n   details will often be policy decisions made with\
    \ respect to the\n   specific needs of individual deployments and will be configured\
    \ or\n   implemented accordingly.\n   The security tokens obtained may be used\
    \ in a number of contexts, the\n   specifics of which are also beyond the scope\
    \ of this specification.\n"
- title: 1.1.  Delegation vs. Impersonation Semantics
  contents:
  - "1.1.  Delegation vs. Impersonation Semantics\n   One common use case for an STS\
    \ (as alluded to in the previous\n   section) is to allow a resource server A\
    \ to make calls to a backend\n   service C on behalf of the requesting user B.\
    \  Depending on the local\n   site policy and authorization infrastructure, it\
    \ may be desirable for\n   A to use its own credentials to access C along with\
    \ an annotation of\n   some form that A is acting on behalf of B (\"delegation\"\
    ) or for A to\n   be granted a limited access credential to C but that continues\
    \ to\n   identify B as the authorized entity (\"impersonation\").  Delegation\n\
    \   and impersonation can be useful concepts in other scenarios involving\n  \
    \ multiple participants as well.\n   When principal A impersonates principal B,\
    \ A is given all the rights\n   that B has within some defined rights context\
    \ and is\n   indistinguishable from B in that context.  Thus, when principal A\n\
    \   impersonates principal B, then insofar as any entity receiving such a\n  \
    \ token is concerned, they are actually dealing with B.  It is true\n   that some\
    \ members of the identity system might have awareness that\n   impersonation is\
    \ going on, but it is not a requirement.  For all\n   intents and purposes, when\
    \ A is impersonating B, A is B within the\n   context of the rights authorized\
    \ by the token.  A's ability to\n   impersonate B could be limited in scope or\
    \ time, or even with a one-\n   time-use restriction, whether via the contents\
    \ of the token or an\n   out-of-band mechanism.\n   Delegation semantics are different\
    \ than impersonation semantics,\n   though the two are closely related.  With\
    \ delegation semantics,\n   principal A still has its own identity separate from\
    \ B, and it is\n   explicitly understood that while B may have delegated some\
    \ of its\n   rights to A, any actions taken are being taken by A representing\
    \ B.\n   In a sense, A is an agent for B.\n   Delegation and impersonation are\
    \ not inclusive of all situations.\n   When a principal is acting directly on\
    \ its own behalf, for example,\n   neither delegation nor impersonation are in\
    \ play.  They are, however,\n   the more common semantics operating for token\
    \ exchange and, as such,\n   are given more direct treatment in this specification.\n\
    \   Delegation semantics are typically expressed in a token by including\n   information\
    \ about both the primary subject of the token as well as\n   the actor to whom\
    \ that subject has delegated some of its rights.\n   Such a token is sometimes\
    \ referred to as a composite token because it\n   is composed of information about\
    \ multiple subjects.  Typically, in\n   the request, the \"subject_token\" represents\
    \ the identity of the party\n   on behalf of whom the token is being requested\
    \ while the\n   \"actor_token\" represents the identity of the party to whom the\
    \ access\n   rights of the issued token are being delegated.  A composite token\n\
    \   issued by the authorization server will contain information about\n   both\
    \ parties.  When and if a composite token is issued is at the\n   discretion of\
    \ the authorization server and applicable policy and\n   configuration.\n   The\
    \ specifics of representing a composite token and even whether or\n   not such\
    \ a token will be issued depend on the details of the\n   implementation and the\
    \ kind of token.  The representations of\n   composite tokens that are not JWTs\
    \ are beyond the scope of this\n   specification.  The \"actor_token\" request\
    \ parameter, however, does\n   provide a means for providing information about\
    \ the desired actor,\n   and the JWT \"act\" claim can provide a representation\
    \ of a chain of\n   delegation.\n"
- title: 1.2.  Requirements Notation and Conventions
  contents:
  - "1.2.  Requirements Notation and Conventions\n   The key words \"MUST\", \"MUST\
    \ NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\"\
    , \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this\
    \ document are to be interpreted as described in\n   BCP 14 [RFC2119] [RFC8174]\
    \ when, and only when, they appear in all\n   capitals, as shown here.\n"
- title: 1.3.  Terminology
  contents:
  - "1.3.  Terminology\n   This specification uses the terms \"access token type\"\
    , \"authorization\n   server\", \"client\", \"client identifier\", \"resource\
    \ server\", \"token\n   endpoint\", \"token request\", and \"token response\"\
    \ defined by OAuth 2.0\n   [RFC6749], and the terms \"Base64url Encoding\", \"\
    Claim\", and \"JWT\n   Claims Set\" defined by JSON Web Token (JWT) [JWT].\n"
- title: 2.  Token Exchange Request and Response
  contents:
  - '2.  Token Exchange Request and Response

    '
- title: 2.1.  Request
  contents:
  - "2.1.  Request\n   A client requests a security token by making a token request\
    \ to the\n   authorization server's token endpoint using the extension grant type\n\
    \   mechanism defined in Section 4.5 of [RFC6749].\n   Client authentication to\
    \ the authorization server is done using the\n   normal mechanisms provided by\
    \ OAuth 2.0.  Section 2.3.1 of [RFC6749]\n   defines password-based authentication\
    \ of the client, however, client\n   authentication is extensible and other mechanisms\
    \ are possible.  For\n   example, [RFC7523] defines client authentication using\
    \ bearer JSON\n   Web Tokens (JWTs) [JWT].  The supported methods of client\n\
    \   authentication and whether or not to allow unauthenticated or\n   unidentified\
    \ clients are deployment decisions that are at the\n   discretion of the authorization\
    \ server.  Note that omitting client\n   authentication allows for a compromised\
    \ token to be leveraged via an\n   STS into other tokens by anyone possessing\
    \ the compromised token.\n   Thus, client authentication allows for additional\
    \ authorization\n   checks by the STS as to which entities are permitted to impersonate\n\
    \   or receive delegations from other entities.\n   The client makes a token exchange\
    \ request to the token endpoint with\n   an extension grant type using the HTTP\
    \ \"POST\" method.  The following\n   parameters are included in the HTTP request\
    \ entity-body using the\n   \"application/x-www-form-urlencoded\" format with\
    \ a character encoding\n   of UTF-8 as described in Appendix B of [RFC6749].\n\
    \   grant_type\n      REQUIRED.  The value \"urn:ietf:params:oauth:grant-type:token-\n\
    \      exchange\" indicates that a token exchange is being performed.\n   resource\n\
    \      OPTIONAL.  A URI that indicates the target service or resource\n      where\
    \ the client intends to use the requested security token.\n      This enables\
    \ the authorization server to apply policy as\n      appropriate for the target,\
    \ such as determining the type and\n      content of the token to be issued or\
    \ if and how the token is to be\n      encrypted.  In many cases, a client will\
    \ not have knowledge of the\n      logical organization of the systems with which\
    \ it interacts and\n      will only know a URI of the service where it intends\
    \ to use the\n      token.  The \"resource\" parameter allows the client to indicate\
    \ to\n      the authorization server where it intends to use the issued token\n\
    \      by providing the location, typically as an https URL, in the token\n  \
    \    exchange request in the same form that will be used to access that\n    \
    \  resource.  The authorization server will typically have the\n      capability\
    \ to map from a resource URI value to an appropriate\n      policy.  The value\
    \ of the \"resource\" parameter MUST be an absolute\n      URI, as specified by\
    \ Section 4.3 of [RFC3986], that MAY include a\n      query component and MUST\
    \ NOT include a fragment component.\n      Multiple \"resource\" parameters may\
    \ be used to indicate that the\n      issued token is intended to be used at the\
    \ multiple resources\n      listed.  See [OAUTH-RESOURCE] for additional background\
    \ and uses\n      of the \"resource\" parameter.\n   audience\n      OPTIONAL.\
    \  The logical name of the target service where the client\n      intends to use\
    \ the requested security token.  This serves a\n      purpose similar to the \"\
    resource\" parameter but with the client\n      providing a logical name for the\
    \ target service.  Interpretation\n      of the name requires that the value be\
    \ something that both the\n      client and the authorization server understand.\
    \  An OAuth client\n      identifier, a SAML entity identifier [OASIS.saml-core-2.0-os],\
    \ and\n      an OpenID Connect Issuer Identifier [OpenID.Core] are examples of\n\
    \      things that might be used as \"audience\" parameter values.\n      However,\
    \ \"audience\" values used with a given authorization server\n      must be unique\
    \ within that server to ensure that they are properly\n      interpreted as the\
    \ intended type of value.  Multiple \"audience\"\n      parameters may be used\
    \ to indicate that the issued token is\n      intended to be used at the multiple\
    \ audiences listed.  The\n      \"audience\" and \"resource\" parameters may be\
    \ used together to\n      indicate multiple target services with a mix of logical\
    \ names and\n      resource URIs.\n   scope\n      OPTIONAL.  A list of space-delimited,\
    \ case-sensitive strings, as\n      defined in Section 3.3 of [RFC6749], that\
    \ allow the client to\n      specify the desired scope of the requested security\
    \ token in the\n      context of the service or resource where the token will\
    \ be used.\n      The values and associated semantics of scope are service specific\n\
    \      and expected to be described in the relevant service\n      documentation.\n\
    \   requested_token_type\n      OPTIONAL.  An identifier, as described in Section\
    \ 3, for the type\n      of the requested security token.  If the requested type\
    \ is\n      unspecified, the issued token type is at the discretion of the\n \
    \     authorization server and may be dictated by knowledge of the\n      requirements\
    \ of the service or resource indicated by the\n      \"resource\" or \"audience\"\
    \ parameter.\n   subject_token\n      REQUIRED.  A security token that represents\
    \ the identity of the\n      party on behalf of whom the request is being made.\
    \  Typically, the\n      subject of this token will be the subject of the security\
    \ token\n      issued in response to the request.\n   subject_token_type\n   \
    \   REQUIRED.  An identifier, as described in Section 3, that\n      indicates\
    \ the type of the security token in the \"subject_token\"\n      parameter.\n\
    \   actor_token\n      OPTIONAL.  A security token that represents the identity\
    \ of the\n      acting party.  Typically, this will be the party that is\n   \
    \   authorized to use the requested security token and act on behalf\n      of\
    \ the subject.\n   actor_token_type\n      An identifier, as described in Section\
    \ 3, that indicates the type\n      of the security token in the \"actor_token\"\
    \ parameter.  This is\n      REQUIRED when the \"actor_token\" parameter is present\
    \ in the\n      request but MUST NOT be included otherwise.\n   In processing\
    \ the request, the authorization server MUST perform the\n   appropriate validation\
    \ procedures for the indicated token type and,\n   if the actor token is present,\
    \ also perform the appropriate\n   validation procedures for its indicated token\
    \ type.  The validity\n   criteria and details of any particular token are beyond\
    \ the scope of\n   this document and are specific to the respective type of token\
    \ and\n   its content.\n   In the absence of one-time-use or other semantics specific\
    \ to the\n   token type, the act of performing a token exchange has no impact\
    \ on\n   the validity of the subject token or actor token.  Furthermore, the\n\
    \   exchange is a one-time event and does not create a tight linkage\n   between\
    \ the input and output tokens, so that (for example) while the\n   expiration\
    \ time of the output token may be influenced by that of the\n   input token, renewal\
    \ or extension of the input token is not expected\n   to be reflected in the output\
    \ token's properties.  It may still be\n   appropriate or desirable to propagate\
    \ token-revocation events.\n   However, doing so is not a general property of\
    \ the STS protocol and\n   would be specific to a particular implementation, token\
    \ type, or\n   deployment.\n"
- title: 2.1.1.  Relationship between Resource, Audience, and Scope
  contents:
  - "2.1.1.  Relationship between Resource, Audience, and Scope\n   When requesting\
    \ a token, the client can indicate the desired target\n   service(s) where it\
    \ intends to use that token by way of the\n   \"audience\" and \"resource\" parameters\
    \ as well as indicate the desired\n   scope of the requested token using the \"\
    scope\" parameter.  The\n   semantics of such a request are that the client is\
    \ asking for a token\n   with the requested scope that is usable at all the requested\
    \ target\n   services.  Effectively, the requested access rights of the token\
    \ are\n   the Cartesian product of all the scopes at all the target services.\n\
    \   An authorization server may be unwilling or unable to fulfill any\n   token\
    \ request, but the likelihood of an unfulfillable request is\n   significantly\
    \ higher when very broad access rights are being\n   solicited.  As such, in the\
    \ absence of specific knowledge about the\n   relationship of systems in a deployment,\
    \ clients should exercise\n   discretion in the breadth of the access requested,\
    \ particularly the\n   number of target services.  An authorization server can\
    \ use the\n   \"invalid_target\" error code, defined in Section 2.2.2, to inform\
    \ a\n   client that it requested access to too many target services\n   simultaneously.\n"
- title: 2.2.  Response
  contents:
  - "2.2.  Response\n   The authorization server responds to a token exchange request\
    \ with a\n   normal OAuth 2.0 response from the token endpoint, as specified in\n\
    \   Section 5 of [RFC6749].  Additional details and explanation are\n   provided\
    \ in the following subsections.\n"
- title: 2.2.1.  Successful Response
  contents:
  - "2.2.1.  Successful Response\n   If the request is valid and meets all policy\
    \ and other criteria of\n   the authorization server, a successful token response\
    \ is constructed\n   by adding the following parameters to the entity-body of\
    \ the HTTP\n   response using the \"application/json\" media type, as specified\
    \ by\n   [RFC8259], and an HTTP 200 status code.  The parameters are\n   serialized\
    \ into a JavaScript Object Notation (JSON) structure by\n   adding each parameter\
    \ at the top level.  Parameter names and string\n   values are included as JSON\
    \ strings.  Numerical values are included\n   as JSON numbers.  The order of parameters\
    \ does not matter and can\n   vary.\n   access_token\n      REQUIRED.  The security\
    \ token issued by the authorization server\n      in response to the token exchange\
    \ request.  The \"access_token\"\n      parameter from Section 5.1 of [RFC6749]\
    \ is used here to carry the\n      requested token, which allows this token exchange\
    \ protocol to use\n      the existing OAuth 2.0 request and response constructs\
    \ defined for\n      the token endpoint.  The identifier \"access_token\" is used\
    \ for\n      historical reasons and the issued token need not be an OAuth\n  \
    \    access token.\n   issued_token_type\n      REQUIRED.  An identifier, as described\
    \ in Section 3, for the\n      representation of the issued security token.\n\
    \   token_type\n      REQUIRED.  A case-insensitive value specifying the method\
    \ of using\n      the access token issued, as specified in Section 7.1 of [RFC6749].\n\
    \      It provides the client with information about how to utilize the\n    \
    \  access token to access protected resources.  For example, a value\n      of\
    \ \"Bearer\", as specified in [RFC6750], indicates that the issued\n      security\
    \ token is a bearer token and the client can simply present\n      it as is without\
    \ any additional proof of eligibility beyond the\n      contents of the token\
    \ itself.  Note that the meaning of this\n      parameter is different from the\
    \ meaning of the \"issued_token_type\"\n      parameter, which declares the representation\
    \ of the issued\n      security token; the term \"token type\" is more typically\
    \ used to\n      mean the structural or syntactical representation of the security\n\
    \      token, as it is in all \"*_token_type\" parameters in this\n      specification.\
    \  If the issued token is not an access token or\n      usable as an access token,\
    \ then the \"token_type\" value \"N_A\" is\n      used to indicate that an OAuth\
    \ 2.0 \"token_type\" identifier is not\n      applicable in that context.\n  \
    \ expires_in\n      RECOMMENDED.  The validity lifetime, in seconds, of the token\n\
    \      issued by the authorization server.  Oftentimes, the client will\n    \
    \  not have the inclination or capability to inspect the content of\n      the\
    \ token, and this parameter provides a consistent and token-\n      type-agnostic\
    \ indication of how long the token can be expected to\n      be valid.  For example,\
    \ the value 1800 denotes that the token will\n      expire in thirty minutes from\
    \ the time the response was generated.\n   scope\n      OPTIONAL if the scope\
    \ of the issued security token is identical to\n      the scope requested by the\
    \ client; otherwise, it is REQUIRED.\n   refresh_token\n      OPTIONAL.  A refresh\
    \ token will typically not be issued when the\n      exchange is of one temporary\
    \ credential (the subject_token) for a\n      different temporary credential (the\
    \ issued token) for use in some\n      other context.  A refresh token can be\
    \ issued in cases where the\n      client of the token exchange needs the ability\
    \ to access a\n      resource even when the original credential is no longer valid\n\
    \      (e.g., user-not-present or offline scenarios where there is no\n      longer\
    \ any user entertaining an active session with the client).\n      Profiles or\
    \ deployments of this specification should clearly\n      document the conditions\
    \ under which a client should expect a\n      refresh token in response to \"\
    urn:ietf:params:oauth:grant-\n      type:token-exchange\" grant type requests.\n"
- title: 2.2.2.  Error Response
  contents:
  - "2.2.2.  Error Response\n   If the request itself is not valid or if either the\
    \ \"subject_token\"\n   or \"actor_token\" are invalid for any reason, or are\
    \ unacceptable\n   based on policy, the authorization server MUST construct an\
    \ error\n   response, as specified in Section 5.2 of [RFC6749].  The value of\
    \ the\n   \"error\" parameter MUST be the \"invalid_request\" error code.\n  \
    \ If the authorization server is unwilling or unable to issue a token\n   for\
    \ any target service indicated by the \"resource\" or \"audience\"\n   parameters,\
    \ the \"invalid_target\" error code SHOULD be used in the\n   error response.\n\
    \   The authorization server MAY include additional information regarding\n  \
    \ the reasons for the error using the \"error_description\" as discussed\n   in\
    \ Section 5.2 of [RFC6749].\n   Other error codes may also be used, as appropriate.\n"
- title: 2.3.  Example Token Exchange
  contents:
  - "2.3.  Example Token Exchange\n   The following example demonstrates a hypothetical\
    \ token exchange in\n   which an OAuth resource server assumes the role of the\
    \ client during\n   the exchange.  It trades an access token, which it received\
    \ in a\n   protected resource request, for a new token that it will use to call\n\
    \   to a backend service (extra line breaks and indentation in the\n   examples\
    \ are for display purposes only).\n   Figure 1 shows the resource server receiving\
    \ a protected resource\n   request containing an OAuth access token in the Authorization\
    \ header,\n   as specified in Section 2.1 of [RFC6750].\n    GET /resource HTTP/1.1\n\
    \    Host: frontend.example.com\n    Authorization: Bearer accVkjcJyb4BWCxGsndESCJQbdFMogUC5PbRDqceLTC\n\
    \                    Figure 1: Protected Resource Request\n   In Figure 2, the\
    \ resource server assumes the role of client for the\n   token exchange, and the\
    \ access token from the request in Figure 1 is\n   sent to the authorization server\
    \ using a request as specified in\n   Section 2.1.  The value of the \"subject_token\"\
    \ parameter carries the\n   access token, and the value of the \"subject_token_type\"\
    \ parameter\n   indicates that it is an OAuth 2.0 access token.  The resource\
    \ server,\n   acting in the role of the client, uses its identifier and secret\
    \ to\n   authenticate to the authorization server using the HTTP Basic\n   authentication\
    \ scheme.  The \"resource\" parameter indicates the\n   location of the backend\
    \ service, <https://backend.example.com/api>,\n   where the issued token will\
    \ be used.\n    POST /as/token.oauth2 HTTP/1.1\n    Host: as.example.com\n   \
    \ Authorization: Basic cnMwODpsb25nLXNlY3VyZS1yYW5kb20tc2VjcmV0\n    Content-Type:\
    \ application/x-www-form-urlencoded\n    grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Atoken-exchange\n\
    \    &resource=https%3A%2F%2Fbackend.example.com%2Fapi\n    &subject_token=accVkjcJyb4BWCxGsndESCJQbdFMogUC5PbRDqceLTC\n\
    \    &subject_token_type=\n     urn%3Aietf%3Aparams%3Aoauth%3Atoken-type%3Aaccess_token\n\
    \                      Figure 2: Token Exchange Request\n   The authorization\
    \ server validates the client credentials and the\n   \"subject_token\" presented\
    \ in the token exchange request.  From the\n   \"resource\" parameter, the authorization\
    \ server is able to determine\n   the appropriate policy to apply to the request\
    \ and issues a token\n   suitable for use at <https://backend.example.com>.  The\n\
    \   \"access_token\" parameter of the response shown in Figure 3 contains\n  \
    \ the new token, which is itself a bearer OAuth access token that is\n   valid\
    \ for one minute.  The token happens to be a JWT; however, its\n   structure and\
    \ format are opaque to the client, so the\n   \"issued_token_type\" indicates\
    \ only that it is an access token.\n    HTTP/1.1 200 OK\n    Content-Type: application/json\n\
    \    Cache-Control: no-cache, no-store\n    {\n     \"access_token\":\"eyJhbGciOiJFUzI1NiIsImtpZCI6IjllciJ9.eyJhdWQiOiJo\n\
    \       dHRwczovL2JhY2tlbmQuZXhhbXBsZS5jb20iLCJpc3MiOiJodHRwczovL2FzLmV\n    \
    \   4YW1wbGUuY29tIiwiZXhwIjoxNDQxOTE3NTkzLCJpYXQiOjE0NDE5MTc1MzMsIn\n       N1YiI6ImJkY0BleGFtcGxlLmNvbSIsInNjb3BlIjoiYXBpIn0.40y3ZgQedw6rx\n\
    \       f59WlwHDD9jryFOr0_Wh3CGozQBihNBhnXEQgU85AI9x3KmsPottVMLPIWvmDCM\n    \
    \   y5-kdXjwhw\",\n     \"issued_token_type\":\n         \"urn:ietf:params:oauth:token-type:access_token\"\
    ,\n     \"token_type\":\"Bearer\",\n     \"expires_in\":60\n    }\n          \
    \           Figure 3: Token Exchange Response\n   The resource server can then\
    \ use the newly acquired access token in\n   making a request to the backend server\
    \ as illustrated in Figure 4.\n    GET /api HTTP/1.1\n    Host: backend.example.com\n\
    \    Authorization: Bearer eyJhbGciOiJFUzI1NiIsImtpZCI6IjllciJ9.eyJhdWQ\n    \
    \   iOiJodHRwczovL2JhY2tlbmQuZXhhbXBsZS5jb20iLCJpc3MiOiJodHRwczovL2\n       FzLmV4YW1wbGUuY29tIiwiZXhwIjoxNDQxOTE3NTkzLCJpYXQiOjE0NDE5MTc1M\n\
    \       zMsInN1YiI6ImJkY0BleGFtcGxlLmNvbSIsInNjb3BlIjoiYXBpIn0.40y3ZgQe\n    \
    \   dw6rxf59WlwHDD9jryFOr0_Wh3CGozQBihNBhnXEQgU85AI9x3KmsPottVMLPIW\n       vmDCMy5-kdXjwhw\n\
    \                Figure 4: Backend Protected Resource Request\n   Additional examples\
    \ can be found in Appendix A.\n"
- title: 3.  Token Type Identifiers
  contents:
  - "3.  Token Type Identifiers\n   Several parameters in this specification utilize\
    \ an identifier as the\n   value to describe the token in question.  Specifically,\
    \ they are the\n   \"requested_token_type\", \"subject_token_type\", and \"actor_token_type\"\
    \n   parameters of the request and the \"issued_token_type\" member of the\n \
    \  response.  Token type identifiers are URIs.  Token exchange can work\n   with\
    \ both tokens issued by other parties and tokens from the given\n   authorization\
    \ server.  For the former, the token type identifier\n   indicates the syntax\
    \ (e.g., JWT or SAML 2.0) so the authorization\n   server can parse it; for the\
    \ latter, it indicates what the given\n   authorization server issued it for (e.g.,\
    \ \"access_token\" or\n   \"refresh_token\").\n   The following token type identifiers\
    \ are defined by this\n   specification.  Other URIs MAY be used to indicate other\
    \ token types.\n   urn:ietf:params:oauth:token-type:access_token\n      Indicates\
    \ that the token is an OAuth 2.0 access token issued by\n      the given authorization\
    \ server.\n   urn:ietf:params:oauth:token-type:refresh_token\n      Indicates\
    \ that the token is an OAuth 2.0 refresh token issued by\n      the given authorization\
    \ server.\n   urn:ietf:params:oauth:token-type:id_token\n      Indicates that\
    \ the token is an ID Token as defined in Section 2 of\n      [OpenID.Core].\n\
    \   urn:ietf:params:oauth:token-type:saml1\n      Indicates that the token is\
    \ a base64url-encoded SAML 1.1\n      [OASIS.saml-core-1.1] assertion.\n   urn:ietf:params:oauth:token-type:saml2\n\
    \      Indicates that the token is a base64url-encoded SAML 2.0\n      [OASIS.saml-core-2.0-os]\
    \ assertion.\n   The value \"urn:ietf:params:oauth:token-type:jwt\", which is\
    \ defined in\n   Section 9 of [JWT], indicates that the token is a JWT.\n   The\
    \ distinction between an access token and a JWT is subtle.  An\n   access token\
    \ represents a delegated authorization decision, whereas\n   JWT is a token format.\
    \  An access token can be formatted as a JWT but\n   doesn't necessarily have\
    \ to be.  And a JWT might well be an access\n   token, but not all JWTs are access\
    \ tokens.  The intent of this\n   specification is that \"urn:ietf:params:oauth:token-type:access_token\"\
    \n   be an indicator that the token is a typical OAuth access token issued\n \
    \  by the authorization server in question, opaque to the client, and\n   usable\
    \ the same manner as any other access token obtained from that\n   authorization\
    \ server.  (It could well be a JWT, but the client isn't\n   and needn't be aware\
    \ of that fact.)  Whereas,\n   \"urn:ietf:params:oauth:token-type:jwt\" is to\
    \ indicate specifically\n   that a JWT is being requested or sent (perhaps in\
    \ a cross-domain use\n   case where the JWT is used as an authorization grant\
    \ to obtain an\n   access token from a different authorization server as is facilitated\n\
    \   by [RFC7523]).\n   Note that for tokens that are binary in nature, the URI\
    \ used for\n   conveying them needs to be associated with the semantics of a base64\n\
    \   or other encoding suitable for usage with HTTP and OAuth.\n"
- title: 4.  JSON Web Token Claims and Introspection Response Parameters
  contents:
  - "4.  JSON Web Token Claims and Introspection Response Parameters\n   It is useful\
    \ to have defined mechanisms to express delegation within\n   a token as well\
    \ as to express authorization to delegate or\n   impersonate.  Although the token\
    \ exchange protocol described herein\n   can be used with any type of token, this\
    \ section defines claims to\n   express such semantics specifically for JWTs and\
    \ in an OAuth 2.0\n   Token Introspection [RFC7662] response.  Similar definitions\
    \ for\n   other types of tokens are possible but beyond the scope of this\n  \
    \ specification.\n   Note that the claims not established herein but used in examples\
    \ and\n   descriptions, such as \"iss\", \"sub\", \"exp\", etc., are defined by\n\
    \   [JWT].\n"
- title: 4.1.  "act" (Actor) Claim
  contents:
  - "4.1.  \"act\" (Actor) Claim\n   The \"act\" (actor) claim provides a means within\
    \ a JWT to express that\n   delegation has occurred and identify the acting party\
    \ to whom\n   authority has been delegated.  The \"act\" claim value is a JSON\n\
    \   object, and members in the JSON object are claims that identify the\n   actor.\
    \  The claims that make up the \"act\" claim identify and possibly\n   provide\
    \ additional information about the actor.  For example, the\n   combination of\
    \ the two claims \"iss\" and \"sub\" might be necessary to\n   uniquely identify\
    \ an actor.\n   However, claims within the \"act\" claim pertain only to the identity\n\
    \   of the actor and are not relevant to the validity of the containing\n   JWT\
    \ in the same manner as the top-level claims.  Consequently, non-\n   identity\
    \ claims (e.g., \"exp\", \"nbf\", and \"aud\") are not meaningful\n   when used\
    \ within an \"act\" claim and are therefore not used.\n   Figure 5 illustrates\
    \ the \"act\" (actor) claim within a JWT Claims Set.\n   The claims of the token\
    \ itself are about user@example.com while the\n   \"act\" claim indicates that\
    \ admin@example.com is the current actor.\n    {\n      \"aud\":\"https://consumer.example.com\"\
    ,\n      \"iss\":\"https://issuer.example.com\",\n      \"exp\":1443904177,\n\
    \      \"nbf\":1443904077,\n      \"sub\":\"user@example.com\",\n      \"act\"\
    :\n      {\n        \"sub\":\"admin@example.com\"\n      }\n    }\n          \
    \                 Figure 5: Actor Claim\n   A chain of delegation can be expressed\
    \ by nesting one \"act\" claim\n   within another.  The outermost \"act\" claim\
    \ represents the current\n   actor while nested \"act\" claims represent prior\
    \ actors.  The least\n   recent actor is the most deeply nested.  The nested \"\
    act\" claims\n   serve as a history trail that connects the initial request and\n\
    \   subject through the various delegation steps undertaken before\n   reaching\
    \ the current actor.  In this sense, the current actor is\n   considered to include\
    \ the entire authorization/delegation history,\n   leading naturally to the nested\
    \ structure described here.\n   For the purpose of applying access control policy,\
    \ the consumer of a\n   token MUST only consider the token's top-level claims\
    \ and the party\n   identified as the current actor by the \"act\" claim.  Prior\
    \ actors\n   identified by any nested \"act\" claims are informational only and\
    \ are\n   not to be considered in access control decisions.\n   The following\
    \ example in Figure 6 illustrates nested \"act\" (actor)\n   claims within a JWT\
    \ Claims Set.  The claims of the token itself are\n   about user@example.com while\
    \ the \"act\" claim indicates that the\n   system <https://service16.example.com>\
    \ is the current actor and\n   <https://service77.example.com> was a prior actor.\
    \  Such a token\n   might come about as the result of service16 receiving a token\
    \ in a\n   call from service77 and exchanging it for a token suitable to call\n\
    \   service26 while the authorization server notes the situation in the\n   newly\
    \ issued token.\n    {\n      \"aud\":\"https://service26.example.com\",\n   \
    \   \"iss\":\"https://issuer.example.com\",\n      \"exp\":1443904100,\n     \
    \ \"nbf\":1443904000,\n      \"sub\":\"user@example.com\",\n      \"act\":\n \
    \     {\n        \"sub\":\"https://service16.example.com\",\n        \"act\":\n\
    \        {\n          \"sub\":\"https://service77.example.com\"\n        }\n \
    \     }\n    }\n                        Figure 6: Nested Actor Claim\n   When\
    \ included as a top-level member of an OAuth token introspection\n   response,\
    \ \"act\" has the same semantics and format as the claim of the\n   same name.\n"
- title: 4.2.  "scope" (Scopes) Claim
  contents:
  - "4.2.  \"scope\" (Scopes) Claim\n   The value of the \"scope\" claim is a JSON\
    \ string containing a space-\n   separated list of scopes associated with the\
    \ token, in the format\n   described in Section 3.3 of [RFC6749].\n   Figure 7\
    \ illustrates the \"scope\" claim within a JWT Claims Set.\n    {\n      \"aud\"\
    :\"https://consumer.example.com\",\n      \"iss\":\"https://issuer.example.com\"\
    ,\n      \"exp\":1443904177,\n      \"nbf\":1443904077,\n      \"sub\":\"dgaf4mvfs75Fci_FL3heQA\"\
    ,\n      \"scope\":\"email profile phone address\"\n    }\n                  \
    \         Figure 7: Scopes Claim\n   OAuth 2.0 Token Introspection [RFC7662] already\
    \ defines the \"scope\"\n   parameter to convey the scopes associated with the\
    \ token.\n"
- title: 4.3.  "client_id" (Client Identifier) Claim
  contents:
  - "4.3.  \"client_id\" (Client Identifier) Claim\n   The \"client_id\" claim carries\
    \ the client identifier of the OAuth 2.0\n   [RFC6749] client that requested the\
    \ token.\n   The following example in Figure 8 illustrates the \"client_id\" claim\n\
    \   within a JWT Claims Set indicating an OAuth 2.0 client with\n   \"s6BhdRkqt3\"\
    \ as its identifier.\n    {\n      \"aud\":\"https://consumer.example.com\",\n\
    \      \"iss\":\"https://issuer.example.com\",\n      \"exp\":1443904177,\n  \
    \    \"sub\":\"user@example.com\",\n      \"client_id\":\"s6BhdRkqt3\"\n    }\n\
    \                     Figure 8: Client Identifier Claim\n   OAuth 2.0 Token Introspection\
    \ [RFC7662] already defines the\n   \"client_id\" parameter as the client identifier\
    \ for the OAuth 2.0\n   client that requested the token.\n"
- title: 4.4.  "may_act" (Authorized Actor) Claim
  contents:
  - "4.4.  \"may_act\" (Authorized Actor) Claim\n   The \"may_act\" claim makes a\
    \ statement that one party is authorized to\n   become the actor and act on behalf\
    \ of another party.  The claim might\n   be used, for example, when a \"subject_token\"\
    \ is presented to the\n   token endpoint in a token exchange request and \"may_act\"\
    \ claim in the\n   subject token can be used by the authorization server to determine\n\
    \   whether the client (or party identified in the \"actor_token\") is\n   authorized\
    \ to engage in the requested delegation or impersonation.\n   The claim value\
    \ is a JSON object, and members in the JSON object are\n   claims that identify\
    \ the party that is asserted as being eligible to\n   act for the party identified\
    \ by the JWT containing the claim.  The\n   claims that make up the \"may_act\"\
    \ claim identify and possibly provide\n   additional information about the authorized\
    \ actor.  For example, the\n   combination of the two claims \"iss\" and \"sub\"\
    \ are sometimes necessary\n   to uniquely identify an authorized actor, while\
    \ the \"email\" claim\n   might be used to provide additional useful information\
    \ about that\n   party.\n   However, claims within the \"may_act\" claim pertain\
    \ only to the\n   identity of that party and are not relevant to the validity\
    \ of the\n   containing JWT in the same manner as top-level claims.  Consequently,\n\
    \   claims such as \"exp\", \"nbf\", and \"aud\" are not meaningful when used\n\
    \   within a \"may_act\" claim and are therefore not used.\n   Figure 9 illustrates\
    \ the \"may_act\" claim within a JWT Claims Set.\n   The claims of the token itself\
    \ are about user@example.com while the\n   \"may_act\" claim indicates that admin@example.com\
    \ is authorized to act\n   on behalf of user@example.com.\n    {\n      \"aud\"\
    :\"https://consumer.example.com\",\n      \"iss\":\"https://issuer.example.com\"\
    ,\n      \"exp\":1443904177,\n      \"nbf\":1443904077,\n      \"sub\":\"user@example.com\"\
    ,\n      \"may_act\":\n      {\n        \"sub\":\"admin@example.com\"\n      }\n\
    \    }\n                      Figure 9: Authorized Actor Claim\n   When included\
    \ as a top-level member of an OAuth token introspection\n   response, \"may_act\"\
    \ has the same semantics and format as the claim of\n   the same name.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   Much of the guidance from Section 10 of [RFC6749],\
    \ the Security\n   Considerations in The OAuth 2.0 Authorization Framework, is\
    \ also\n   applicable here.  Furthermore, [RFC6819] provides additional security\n\
    \   considerations for OAuth, and [OAUTH-SECURITY] has updated security\n   guidance\
    \ based on deployment experience and new threats that have\n   emerged since OAuth\
    \ 2.0 was originally published.\n   All of the normal security issues that are\
    \ discussed in [JWT],\n   especially in relationship to comparing URIs and dealing\
    \ with\n   unrecognized values, also apply here.\n   In addition, both delegation\
    \ and impersonation introduce unique\n   security issues.  Any time one principal\
    \ is delegated the rights of\n   another principal, the potential for abuse is\
    \ a concern.  The use of\n   the \"scope\" claim (in addition to other typical\
    \ constraints such as a\n   limited token lifetime) is suggested to mitigate potential\
    \ for such\n   abuse, as it restricts the contexts in which the delegated rights\
    \ can\n   be exercised.\n"
- title: 6.  Privacy Considerations
  contents:
  - "6.  Privacy Considerations\n   Tokens employed in the context of the functionality\
    \ described herein\n   may contain privacy-sensitive information and, to prevent\
    \ disclosure\n   of such information to unintended parties, MUST only be transmitted\n\
    \   over encrypted channels, such as Transport Layer Security (TLS).  In\n   cases\
    \ where it is desirable to prevent disclosure of certain\n   information to the\
    \ client, the token MUST be encrypted to its\n   intended recipient.  Deployments\
    \ SHOULD determine the minimally\n   necessary amount of data and only include\
    \ such information in issued\n   tokens.  In some cases, data minimization may\
    \ include representing\n   only an anonymous or pseudonymous user.\n"
- title: 7.  IANA Considerations
  contents:
  - '7.  IANA Considerations

    '
- title: 7.1.  OAuth URI Registration
  contents:
  - "7.1.  OAuth URI Registration\n   IANA has registered the following values in\
    \ the \"OAuth URI\"\n   subregistry of the \"OAuth Parameters\" registry\n   [IANA.OAuth.Parameters].\
    \  The \"OAuth URI\" subregistry was established\n   by [RFC6755].\n   *  URN:\
    \ urn:ietf:params:oauth:grant-type:token-exchange\n   *  Common Name: Token exchange\
    \ grant type for OAuth 2.0\n   *  Change Controller: IESG\n   *  Specification\
    \ Document: Section 2.1 of RFC 8693\n   *  URN: urn:ietf:params:oauth:token-type:access_token\n\
    \   *  Common Name: Token type URI for an OAuth 2.0 access token\n   *  Change\
    \ Controller: IESG\n   *  Specification Document: Section 3 of RFC 8693\n   *\
    \  URN: urn:ietf:params:oauth:token-type:refresh_token\n   *  Common Name: Token\
    \ type URI for an OAuth 2.0 refresh token\n   *  Change Controller: IESG\n   *\
    \  Specification Document: Section 3 of RFC 8693\n   *  URN: urn:ietf:params:oauth:token-type:id_token\n\
    \   *  Common Name: Token type URI for an ID Token\n   *  Change Controller: IESG\n\
    \   *  Specification Document: Section 3 of RFC 8693\n   *  URN: urn:ietf:params:oauth:token-type:saml1\n\
    \   *  Common Name: Token type URI for a base64url-encoded SAML 1.1\n      assertion\n\
    \   *  Change Controller: IESG\n   *  Specification Document: Section 3 of RFC\
    \ 8693\n   *  URN: urn:ietf:params:oauth:token-type:saml2\n   *  Common Name:\
    \ Token type URI for a base64url-encoded SAML 2.0\n      assertion\n   *  Change\
    \ Controller: IESG\n   *  Specification Document: Section 3 of RFC 8693\n"
- title: 7.2.  OAuth Parameters Registration
  contents:
  - "7.2.  OAuth Parameters Registration\n   IANA has registered the following values\
    \ in the \"OAuth Parameters\"\n   subregistry of the \"OAuth Parameters\" registry\n\
    \   [IANA.OAuth.Parameters].  The \"OAuth Parameters\" subregistry was\n   established\
    \ by [RFC6749].\n   *  Parameter name: audience\n   *  Parameter usage location:\
    \ token request\n   *  Change controller: IESG\n   *  Specification document(s):\
    \ Section 2.1 of RFC 8693\n   *  Parameter name: requested_token_type\n   *  Parameter\
    \ usage location: token request\n   *  Change controller: IESG\n   *  Specification\
    \ document(s): Section 2.1 of RFC 8693\n   *  Parameter name: subject_token\n\
    \   *  Parameter usage location: token request\n   *  Change controller: IESG\n\
    \   *  Specification document(s): Section 2.1 of RFC 8693\n   *  Parameter name:\
    \ subject_token_type\n   *  Parameter usage location: token request\n   *  Change\
    \ controller: IESG\n   *  Specification document(s): Section 2.1 of RFC 8693\n\
    \   *  Parameter name: actor_token\n   *  Parameter usage location: token request\n\
    \   *  Change controller: IESG\n   *  Specification document(s): Section 2.1 of\
    \ RFC 8693\n   *  Parameter name: actor_token_type\n   *  Parameter usage location:\
    \ token request\n   *  Change controller: IESG\n   *  Specification document(s):\
    \ Section 2.1 of RFC 8693\n   *  Parameter name: issued_token_type\n   *  Parameter\
    \ usage location: token response\n   *  Change controller: IESG\n   *  Specification\
    \ document(s): Section 2.2.1 of RFC 8693\n"
- title: 7.3.  OAuth Access Token Type Registration
  contents:
  - "7.3.  OAuth Access Token Type Registration\n   IANA has registered the following\
    \ access token type in the \"OAuth\n   Access Token Types\" subregistry of the\
    \ \"OAuth Parameters\" registry\n   [IANA.OAuth.Parameters].  The \"OAuth Access\
    \ Token Types\" subregistry\n   was established by [RFC6749].\n   *  Type name:\
    \ N_A\n   *  Additional Token Endpoint Response Parameters: none\n   *  HTTP Authentication\
    \ Scheme(s): none\n   *  Change controller: IESG\n   *  Specification document(s):\
    \ Section 2.2.1 of RFC 8693\n"
- title: 7.4.  JSON Web Token Claims Registration
  contents:
  - "7.4.  JSON Web Token Claims Registration\n   IANA has registered the following\
    \ Claims in the \"JSON Web Token\n   Claims\" subregistry of the \"JSON Web Token\
    \ (JWT)\" registry\n   [IANA.JWT].  The \"JSON Web Token Claims\" subregistry\
    \ was established\n   by [JWT].\n   *  Claim Name: act\n   *  Claim Description:\
    \ Actor\n   *  Change Controller: IESG\n   *  Specification Document(s): Section\
    \ 4.1 of RFC 8693\n   *  Claim Name: scope\n   *  Claim Description: Scope Values\n\
    \   *  Change Controller: IESG\n   *  Specification Document(s): Section 4.2 of\
    \ RFC 8693\n   *  Claim Name: client_id\n   *  Claim Description: Client Identifier\n\
    \   *  Change Controller: IESG\n   *  Specification Document(s): Section 4.3 of\
    \ RFC 8693\n   *  Claim Name: may_act\n   *  Claim Description: Authorized Actor\
    \ - the party that is authorized\n      to become the actor\n   *  Change Controller:\
    \ IESG\n   *  Specification Document(s): Section 4.4 of RFC 8693\n"
- title: 7.5.  OAuth Token Introspection Response Registration
  contents:
  - "7.5.  OAuth Token Introspection Response Registration\n   IANA has registered\
    \ the following values in the \"OAuth Token\n   Introspection Response\" registry\
    \ of the \"OAuth Parameters\" registry\n   [IANA.OAuth.Parameters].  The \"OAuth\
    \ Token Introspection Response\"\n   registry was established by [RFC7662].\n\
    \   *  Name: act\n   *  Description: Actor\n   *  Change Controller: IESG\n  \
    \ *  Specification Document(s): Section 4.1 of RFC 8693\n   *  Name: may_act\n\
    \   *  Description: Authorized Actor - the party that is authorized to\n     \
    \ become the actor\n   *  Change Controller: IESG\n   *  Specification Document(s):\
    \ Section 4.4 of RFC 8693\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [IANA.JWT] IANA, \"JSON Web Token (JWT)\",\n \
    \             <https://www.iana.org/assignments/jwt>.\n   [IANA.OAuth.Parameters]\n\
    \              IANA, \"OAuth Parameters\",\n              <https://www.iana.org/assignments/oauth-parameters>.\n\
    \   [JWT]      Jones, M., Bradley, J., and N. Sakimura, \"JSON Web Token\n   \
    \           (JWT)\", RFC 7519, DOI 10.17487/RFC7519, May 2015,\n             \
    \ <https://www.rfc-editor.org/info/rfc7519>.\n   [RFC2119]  Bradner, S., \"Key\
    \ words for use in RFCs to Indicate\n              Requirement Levels\", BCP 14,\
    \ RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n   \
    \           Resource Identifier (URI): Generic Syntax\", STD 66,\n           \
    \   RFC 3986, DOI 10.17487/RFC3986, January 2005,\n              <https://www.rfc-editor.org/info/rfc3986>.\n\
    \   [RFC6749]  Hardt, D., Ed., \"The OAuth 2.0 Authorization Framework\",\n  \
    \            RFC 6749, DOI 10.17487/RFC6749, October 2012,\n              <https://www.rfc-editor.org/info/rfc6749>.\n\
    \   [RFC7662]  Richer, J., Ed., \"OAuth 2.0 Token Introspection\",\n         \
    \     RFC 7662, DOI 10.17487/RFC7662, October 2015,\n              <https://www.rfc-editor.org/info/rfc7662>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8259]  Bray,\
    \ T., Ed., \"The JavaScript Object Notation (JSON) Data\n              Interchange\
    \ Format\", STD 90, RFC 8259,\n              DOI 10.17487/RFC8259, December 2017,\n\
    \              <https://www.rfc-editor.org/info/rfc8259>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [OASIS.saml-core-1.1]\n              Maler,\
    \ E., Mishra, P., and R. Philpott, \"Assertions and\n              Protocol for\
    \ the OASIS Security Assertion Markup Language\n              (SAML) V1.1\", OASIS\
    \ Standard oasis-sstc-saml-core-1.1,\n              September 2003, <https://www.oasis-\n\
    \              open.org/committees/download.php/3406/oasis-sstc-saml-\n      \
    \        core-1.1.pdf>.\n   [OASIS.saml-core-2.0-os]\n              Cantor, S.,\
    \ Kemp, J., Philpott, R., and E. Maler,\n              \"Assertions and Protocol\
    \ for the OASIS Security Assertion\n              Markup Language (SAML) V2.0\"\
    , OASIS Standard saml-core-\n              2.0-os, March 2005, <http://docs.oasis-\n\
    \              open.org/security/saml/v2.0/saml-core-2.0-os.pdf>.\n   [OAUTH-RESOURCE]\n\
    \              Campbell, B., Bradley, J., and H. Tschofenig, \"Resource\n    \
    \          Indicators for OAuth 2.0\", Work in Progress, Internet-\n         \
    \     Draft, draft-ietf-oauth-resource-indicators-08, 11\n              September\
    \ 2019, <https://tools.ietf.org/html/draft-ietf-\n              oauth-resource-indicators-08>.\n\
    \   [OAUTH-SECURITY]\n              Lodderstedt, T., Bradley, J., Labunets, A.,\
    \ and D. Fett,\n              \"OAuth 2.0 Security Best Current Practice\", Work\
    \ in\n              Progress, Internet-Draft, draft-ietf-oauth-security-\n   \
    \           topics-13, 8 July 2019, <https://tools.ietf.org/html/\n          \
    \    draft-ietf-oauth-security-topics-13>.\n   [OpenID.Core]\n              Sakimura,\
    \ N., Bradley, J., Jones, M., de Medeiros, B., and\n              C. Mortimore,\
    \ \"OpenID Connect Core 1.0\", November 2014,\n              <https://openid.net/specs/openid-connect-core-1_0.html>.\n\
    \   [RFC6750]  Jones, M. and D. Hardt, \"The OAuth 2.0 Authorization\n       \
    \       Framework: Bearer Token Usage\", RFC 6750,\n              DOI 10.17487/RFC6750,\
    \ October 2012,\n              <https://www.rfc-editor.org/info/rfc6750>.\n  \
    \ [RFC6755]  Campbell, B. and H. Tschofenig, \"An IETF URN Sub-Namespace\n   \
    \           for OAuth\", RFC 6755, DOI 10.17487/RFC6755, October 2012,\n     \
    \         <https://www.rfc-editor.org/info/rfc6755>.\n   [RFC6819]  Lodderstedt,\
    \ T., Ed., McGloin, M., and P. Hunt, \"OAuth 2.0\n              Threat Model and\
    \ Security Considerations\", RFC 6819,\n              DOI 10.17487/RFC6819, January\
    \ 2013,\n              <https://www.rfc-editor.org/info/rfc6819>.\n   [RFC7521]\
    \  Campbell, B., Mortimore, C., Jones, M., and Y. Goland,\n              \"Assertion\
    \ Framework for OAuth 2.0 Client Authentication\n              and Authorization\
    \ Grants\", RFC 7521, DOI 10.17487/RFC7521,\n              May 2015, <https://www.rfc-editor.org/info/rfc7521>.\n\
    \   [RFC7523]  Jones, M., Campbell, B., and C. Mortimore, \"JSON Web Token\n \
    \             (JWT) Profile for OAuth 2.0 Client Authentication and\n        \
    \      Authorization Grants\", RFC 7523, DOI 10.17487/RFC7523, May\n         \
    \     2015, <https://www.rfc-editor.org/info/rfc7523>.\n   [WS-Trust] Nadalin,\
    \ A., Ed., Goodner, M., Ed., Gudgin, M., Ed.,\n              Barbir, A., Ed.,\
    \ and H. Granqvist, Ed., \"WS-Trust 1.4\",\n              February 2012, <https://docs.oasis-open.org/ws-sx/ws-\n\
    \              trust/v1.4/ws-trust.html>.\n"
- title: Appendix A.  Additional Token Exchange Examples
  contents:
  - "Appendix A.  Additional Token Exchange Examples\n   Two example token exchanges\
    \ are provided in the following sections\n   illustrating impersonation and delegation,\
    \ respectively (with extra\n   line breaks and indentation for display purposes\
    \ only).\n"
- title: A.1.  Impersonation Token Exchange Example
  contents:
  - 'A.1.  Impersonation Token Exchange Example

    '
- title: A.1.1.  Token Exchange Request
  contents:
  - "A.1.1.  Token Exchange Request\n   In the following token exchange request, a\
    \ client is requesting a\n   token with impersonation semantics (delegation is\
    \ impossible with\n   only a \"subject_token\" and no \"actor_token\").  The client\
    \ tells the\n   authorization server that it needs a token for use at the target\n\
    \   service with the logical name \"urn:example:cooperation-context\".\n    POST\
    \ /as/token.oauth2 HTTP/1.1\n    Host: as.example.com\n    Content-Type: application/x-www-form-urlencoded\n\
    \    grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Atoken-exchange\n  \
    \  &audience=urn%3Aexample%3Acooperation-context\n    &subject_token=eyJhbGciOiJFUzI1NiIsImtpZCI6IjE2In0.eyJhdWQiOiJodHRwc\n\
    \      zovL2FzLmV4YW1wbGUuY29tIiwiaXNzIjoiaHR0cHM6Ly9vcmlnaW5hbC1pc3N1ZXI\n  \
    \    uZXhhbXBsZS5uZXQiLCJleHAiOjE0NDE5MTA2MDAsIm5iZiI6MTQ0MTkwOTAwMCwic\n    \
    \  3ViIjoiYmRjQGV4YW1wbGUubmV0Iiwic2NvcGUiOiJvcmRlcnMgcHJvZmlsZSBoaXN\n      0b3J5In0.PRBg-jXn4cJuj1gmYXFiGkZzRuzbXZ_sDxdE98ddW44ufsbWLKd3JJ1VZ\n\
    \      hF64pbTtfjy4VXFVBDaQpKjn5JzAw\n    &subject_token_type=urn%3Aietf%3Aparams%3Aoauth%3Atoken-type%3Ajwt\n\
    \                     Figure 10: Token Exchange Request\n"
- title: A.1.2.  Subject Token Claims
  contents:
  - "A.1.2.  Subject Token Claims\n   The \"subject_token\" in the prior request is\
    \ a JWT, and the decoded\n   JWT Claims Set is shown here.  The JWT is intended\
    \ for consumption by\n   the authorization server within a specific time window.\
    \  The subject\n   of the JWT (\"bdc@example.net\") is the party on behalf of\
    \ whom the new\n   token is being requested.\n     {\n       \"aud\":\"https://as.example.com\"\
    ,\n       \"iss\":\"https://original-issuer.example.net\",\n       \"exp\":1441910600,\n\
    \       \"nbf\":1441909000,\n       \"sub\":\"bdc@example.net\",\n       \"scope\"\
    :\"orders profile history\"\n     }\n                      Figure 11: Subject\
    \ Token Claims\n"
- title: A.1.3.  Token Exchange Response
  contents:
  - "A.1.3.  Token Exchange Response\n   The \"access_token\" parameter of the token\
    \ exchange response shown\n   below contains the new token that the client requested.\
    \  The other\n   parameters of the response indicate that the token is a bearer\
    \ access\n   token that expires in an hour.\n    HTTP/1.1 200 OK\n    Content-Type:\
    \ application/json\n    Cache-Control: no-cache, no-store\n    {\n     \"access_token\"\
    :\"eyJhbGciOiJFUzI1NiIsImtpZCI6IjcyIn0.eyJhdWQiOiJ1cm4\n       6ZXhhbXBsZTpjb29wZXJhdGlvbi1jb250ZXh0IiwiaXNzIjoiaHR0cHM6Ly9hcy5l\n\
    \       eGFtcGxlLmNvbSIsImV4cCI6MTQ0MTkxMzYxMCwic3ViIjoiYmRjQGV4YW1wbGUub\n  \
    \     mV0Iiwic2NvcGUiOiJvcmRlcnMgcHJvZmlsZSBoaXN0b3J5In0.rMdWpSGNACTvnF\n    \
    \   uOL74sYZ6MVuld2Z2WkGLmQeR9ztj6w2OXraQlkJmGjyiCq24kcB7AI2VqVxl3wSW\n      \
    \ nVKh85A\",\n     \"issued_token_type\":\n       \"urn:ietf:params:oauth:token-type:access_token\"\
    ,\n     \"token_type\":\"Bearer\",\n     \"expires_in\":3600\n    }\n        \
    \             Figure 12: Token Exchange Response\n"
- title: A.1.4.  Issued Token Claims
  contents:
  - "A.1.4.  Issued Token Claims\n   The decoded JWT Claims Set of the issued token\
    \ is shown below.  The\n   new JWT is issued by the authorization server and intended\
    \ for\n   consumption by a system entity known by the logical name\n   \"urn:example:cooperation-context\"\
    \ any time before its expiration.\n   The subject (\"sub\") of the JWT is the\
    \ same as the subject the token\n   used to make the request, which effectively\
    \ enables the client to\n   impersonate that subject at the system entity known\
    \ by the logical\n   name of \"urn:example:cooperation-context\" by using the\
    \ token.\n     {\n       \"aud\":\"urn:example:cooperation-context\",\n      \
    \ \"iss\":\"https://as.example.com\",\n       \"exp\":1441913610,\n       \"sub\"\
    :\"bdc@example.net\",\n       \"scope\":\"orders profile history\"\n     }\n \
    \                      Figure 13: Issued Token Claims\n"
- title: A.2.  Delegation Token Exchange Example
  contents:
  - 'A.2.  Delegation Token Exchange Example

    '
- title: A.2.1.  Token Exchange Request
  contents:
  - "A.2.1.  Token Exchange Request\n   In the following token exchange request, a\
    \ client is requesting a\n   token and providing both a \"subject_token\" and\
    \ an \"actor_token\".  The\n   client tells the authorization server that it needs\
    \ a token for use\n   at the target service with the logical name \"urn:example:cooperation-\n\
    \   context\".  Policy at the authorization server dictates that the\n   issued\
    \ token be a composite.\n    POST /as/token.oauth2 HTTP/1.1\n    Host: as.example.com\n\
    \    Content-Type: application/x-www-form-urlencoded\n    grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Atoken-exchange\n\
    \    &audience=urn%3Aexample%3Acooperation-context\n    &subject_token=eyJhbGciOiJFUzI1NiIsImtpZCI6IjE2In0.eyJhdWQiOiJodHRwc\n\
    \      zovL2FzLmV4YW1wbGUuY29tIiwiaXNzIjoiaHR0cHM6Ly9vcmlnaW5hbC1pc3N1ZXI\n  \
    \    uZXhhbXBsZS5uZXQiLCJleHAiOjE0NDE5MTAwNjAsInNjb3BlIjoic3RhdHVzIGZlZ\n    \
    \  WQiLCJzdWIiOiJ1c2VyQGV4YW1wbGUubmV0IiwibWF5X2FjdCI6eyJzdWIiOiJhZG1\n      pbkBleGFtcGxlLm5ldCJ9fQ.4rPRSWihQbpMIgAmAoqaJojAxj-p2X8_fAtAGTXrvM\n\
    \      xU-eEZHnXqY0_AOZgLdxw5DyLzua8H_I10MCcckF-Q_g\n    &subject_token_type=urn%3Aietf%3Aparams%3Aoauth%3Atoken-type%3Ajwt\n\
    \    &actor_token=eyJhbGciOiJFUzI1NiIsImtpZCI6IjE2In0.eyJhdWQiOiJodHRwczo\n  \
    \    vL2FzLmV4YW1wbGUuY29tIiwiaXNzIjoiaHR0cHM6Ly9vcmlnaW5hbC1pc3N1ZXIuZ\n    \
    \  XhhbXBsZS5uZXQiLCJleHAiOjE0NDE5MTAwNjAsInN1YiI6ImFkbWluQGV4YW1wbGU\n      ubmV0In0.7YQ-3zPfhUvzje5oqw8COCvN5uP6NsKik9CVV6cAOf4QKgM-tKfiOwcgZ\n\
    \      oUuDL2tEs6tqPlcBlMjiSzEjm3yBg\n    &actor_token_type=urn%3Aietf%3Aparams%3Aoauth%3Atoken-type%3Ajwt\n\
    \                     Figure 14: Token Exchange Request\n"
- title: A.2.2.  Subject Token Claims
  contents:
  - "A.2.2.  Subject Token Claims\n   The \"subject_token\" in the prior request is\
    \ a JWT, and the decoded\n   JWT Claims Set is shown here.  The JWT is intended\
    \ for consumption by\n   the authorization server before a specific expiration\
    \ time.  The\n   subject of the JWT (\"user@example.net\") is the party on behalf\
    \ of\n   whom the new token is being requested.\n     {\n       \"aud\":\"https://as.example.com\"\
    ,\n       \"iss\":\"https://original-issuer.example.net\",\n       \"exp\":1441910060,\n\
    \       \"scope\":\"status feed\",\n       \"sub\":\"user@example.net\",\n   \
    \    \"may_act\":\n       {\n         \"sub\":\"admin@example.net\"\n       }\n\
    \     }\n                      Figure 15: Subject Token Claims\n"
- title: A.2.3.  Actor Token Claims
  contents:
  - "A.2.3.  Actor Token Claims\n   The \"actor_token\" in the prior request is a\
    \ JWT, and the decoded JWT\n   Claims Set is shown here.  This JWT is also intended\
    \ for consumption\n   by the authorization server before a specific expiration\
    \ time.  The\n   subject of the JWT (\"admin@example.net\") is the actor that\
    \ will wield\n   the security token being requested.\n     {\n       \"aud\":\"\
    https://as.example.com\",\n       \"iss\":\"https://original-issuer.example.net\"\
    ,\n       \"exp\":1441910060,\n       \"sub\":\"admin@example.net\"\n     }\n\
    \                       Figure 16: Actor Token Claims\n"
- title: A.2.4.  Token Exchange Response
  contents:
  - "A.2.4.  Token Exchange Response\n   The \"access_token\" parameter of the token\
    \ exchange response shown\n   below contains the new token that the client requested.\
    \  The other\n   parameters of the response indicate that the token is a JWT that\n\
    \   expires in an hour and that the access token type is not applicable\n   since\
    \ the issued token is not an access token.\n    HTTP/1.1 200 OK\n    Content-Type:\
    \ application/json\n    Cache-Control: no-cache, no-store\n    {\n     \"access_token\"\
    :\"eyJhbGciOiJFUzI1NiIsImtpZCI6IjcyIn0.eyJhdWQiOiJ1cm4\n       6ZXhhbXBsZTpjb29wZXJhdGlvbi1jb250ZXh0IiwiaXNzIjoiaHR0cHM6Ly9hcy5l\n\
    \       eGFtcGxlLmNvbSIsImV4cCI6MTQ0MTkxMzYxMCwic2NvcGUiOiJzdGF0dXMgZmVlZ\n  \
    \     CIsInN1YiI6InVzZXJAZXhhbXBsZS5uZXQiLCJhY3QiOnsic3ViIjoiYWRtaW5AZX\n    \
    \   hhbXBsZS5uZXQifX0.3paKl9UySKYB5ng6_cUtQ2qlO8Rc_y7Mea7IwEXTcYbNdwG\n      \
    \ 9-G1EKCFe5fW3H0hwX-MSZ49Wpcb1SiAZaOQBtw\",\n     \"issued_token_type\":\"urn:ietf:params:oauth:token-type:jwt\"\
    ,\n     \"token_type\":\"N_A\",\n     \"expires_in\":3600\n    }\n           \
    \          Figure 17: Token Exchange Response\n"
- title: A.2.5.  Issued Token Claims
  contents:
  - "A.2.5.  Issued Token Claims\n   The decoded JWT Claims Set of the issued token\
    \ is shown below.  The\n   new JWT is issued by the authorization server and intended\
    \ for\n   consumption by a system entity known by the logical name\n   \"urn:example:cooperation-context\"\
    \ any time before its expiration.\n   The subject (\"sub\") of the JWT is the\
    \ same as the subject of the\n   \"subject_token\" used to make the request. \
    \ The actor (\"act\") of the\n   JWT is the same as the subject of the \"actor_token\"\
    \ used to make the\n   request.  This indicates delegation and identifies\n  \
    \ \"admin@example.net\" as the current actor to whom authority has been\n   delegated\
    \ to act on behalf of \"user@example.net\".\n     {\n       \"aud\":\"urn:example:cooperation-context\"\
    ,\n       \"iss\":\"https://as.example.com\",\n       \"exp\":1441913610,\n  \
    \     \"scope\":\"status feed\",\n       \"sub\":\"user@example.net\",\n     \
    \  \"act\":\n       {\n         \"sub\":\"admin@example.net\"\n       }\n    \
    \ }\n                       Figure 18: Issued Token Claims\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This specification was developed within the OAuth Working\
    \ Group,\n   which includes dozens of active and dedicated participants.  It was\n\
    \   produced under the chairmanship of Hannes Tschofenig, Derek Atkins,\n   and\
    \ Rifaat Shekh-Yusef, with Kathleen Moriarty, Stephen Farrell, Eric\n   Rescorla,\
    \ Roman Danyliw, and Benjamin Kaduk serving as Security Area\n   Directors.\n\
    \   The following individuals contributed ideas, feedback, and wording to\n  \
    \ this specification: Caleb Baker, Vittorio Bertocci, Mike Brown,\n   Thomas Broyer,\
    \ Roman Danyliw, William Denniss, Vladimir Dzhuvinov,\n   Eric Fazendin, Phil\
    \ Hunt, Benjamin Kaduk, Jason Keglovitz, Torsten\n   Lodderstedt, Barry Leiba,\
    \ Adam Lewis, James Manger, Nov Matake, Matt\n   Miller, Hilarie Orman, Matthew\
    \ Perry, Eric Rescorla, Justin Richer,\n   Adam Roach, Rifaat Shekh-Yusef, Scott\
    \ Tomilson, and Hannes\n   Tschofenig.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Michael B. Jones\n   Microsoft\n   Email: mbj@microsoft.com\n\
    \   URI:   https://self-issued.info/\n   Anthony Nadalin\n   Microsoft\n   Email:\
    \ tonynad@microsoft.com\n   Brian Campbell (editor)\n   Ping Identity\n   Email:\
    \ brian.d.campbell@gmail.com\n   John Bradley\n   Yubico\n   Email: ve7jtb@ve7jtb.com\n\
    \   Chuck Mortimore\n"
