- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                       L. Cailleux
  contents:
  - "Independent Submission                                       L. Cailleux\n  \
    \                 Securing Header Fields with S/MIME\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes how the S/MIME protocol can be extended\
    \ in\n   order to secure message header fields defined in RFC 5322.  This\n  \
    \ technology provides security services such as data integrity, non-\n   repudiation,\
    \ and confidentiality.  This extension is referred to as\n   'Secure Headers'.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This is a contribution to the RFC Series, independently\n   of any other RFC\
    \ stream.  The RFC Editor has chosen to publish this\n   document at its discretion\
    \ and makes no statement about its value for\n   implementation or deployment.\
    \  Documents approved for publication by\n   the RFC Editor are not a candidate\
    \ for any level of Internet\n   Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7508.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Terminology and Conventions Used in This Document ...............3\n  \
    \ 3. Context .........................................................4\n   4.\
    \ Mechanisms to Secure Message Header Fields ......................6\n      4.1.\
    \ ASN.1 Syntax of Secure Header Fields .......................7\n      4.2. Secure\
    \ Header Fields Length and Format .....................8\n      4.3. Canonicalization\
    \ Algorithm .................................8\n      4.4. Header Field Statuses\
    \ ......................................8\n      4.5. Signature Process ..........................................9\n\
    \           4.5.1. Signature Generation Process ........................9\n  \
    \         4.5.2. Signature Verification Process .....................10\n    \
    \  4.6. Encryption and Decryption Processes .......................11\n      \
    \     4.6.1. Encryption Process .................................11\n        \
    \   4.6.2. Decryption Process .................................12\n   5. Case\
    \ of Triple Wrapping ........................................13\n   6. Security\
    \ Gateways ..............................................13\n   7. Security Considerations\
    \ ........................................13\n   8. IANA Considerations ............................................14\n\
    \   9. References .....................................................14\n  \
    \    9.1. Normative References ......................................14\n    \
    \  9.2. Informative References ....................................15\n   Appendix\
    \ A. Formal Syntax of Secure Header ........................16\n   Appendix B.\
    \ Example of Secure Header Fields .......................18\n   Acknowledgements\
    \ ..................................................19\n   Authors' Addresses\
    \ ................................................19\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The S/MIME [RFC5751] standard defines a data encapsulation\
    \ format for\n   the achievement of end-to-end security services such as integrity,\n\
    \   authentication, non-repudiation, and confidentiality.  By default,\n   S/MIME\
    \ secures message body parts, at the exclusion of the message\n   header fields.\n\
    \   S/MIME provides an alternative solution to secure header fields: \"the\n \
    \  sending client MAY wrap a full MIME message in a message/rfc822\n   wrapper\
    \ in order to apply S/MIME security services to header fields\".\n   However,\
    \ the S/MIME solution doesn't provide any guidance regarding\n   what subset of\
    \ message header fields to secure, procedures for\n   clients to reconcile the\
    \ \"inner\" and \"outer\" headers, or procedures\n   for client interpretation\
    \ or display of any failures.\n   Several other security specifications supplement\
    \ S/MIME features but\n   fail to address the target requirement set of this document.\
    \  Such\n   other security specifications include DomainKeys Identified Mail\n\
    \   (DKIM) [RFC6376], STARTTLS [RFC3207], TLS with IMAP [RFC2595], and an\n  \
    \ Internet-Draft referred to as \"Protected Headers\" [PRHDRS].  An\n   explanation\
    \ of what these services accomplish and why they do not\n   solve this problem\
    \ can be found in subsequent sections.\n   The goal of this document is to define\
    \ end-to-end secure header field\n   mechanisms compliant with S/MIME standard.\
    \  This technique is based\n   on the signed attribute fields of a Cryptographic\
    \ Message Syntax\n   (CMS) [RFC5652] signature.\n"
- title: 2.  Terminology and Conventions Used in This Document
  contents:
  - "2.  Terminology and Conventions Used in This Document\n   The key words \"MUST\"\
    , \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD\
    \ NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to\
    \ be interpreted as described in [RFC2119].\n   The terms Message User Agent (MUA),\
    \ Message Submission Agent (MSA),\n   and Message Transfer Agent (MTA) are defined\
    \ in the email\n   architecture document [RFC5598].\n   The term Domain Confidentiality\
    \ Authority (DCA) is defined in the\n   S/MIME Domain Security specification [RFC3183].\n\
    \   End-to-end Internet Mail exchanges are performed between message\n   originators\
    \ and recipients.\n   The term message header fields is described in [RFC5322].\
    \  A header\n   field is composed of a name and a value.\n   Secure Headers technology\
    \ uses header field statuses required to\n   provide a confidentiality service\
    \ toward message headers.  The\n   following three terms are used to describe\
    \ the field statuses:\n   -  duplicated (the default status).  When this status\
    \ is present or\n      if no status is specified, the signature process embeds\
    \ the header\n      field value in the digital signature, but the value is also\n\
    \      present in the message header fields.\n   -  deleted.  When this status\
    \ is present, the signature process\n      embeds the header field value in the\
    \ digital signature, and the\n      encryption process deletes this field from\
    \ the message to preserve\n      its confidentiality.\n   -  modified.  When this\
    \ status is present, the signature process\n      embeds the header field value\
    \ in the digital signature, and the\n      encryption process modifies the value\
    \ of the header field in the\n      message.  This preserves confidentiality and\
    \ informs a receiver's\n      noncompliant MUA that secure headers are being used.\
    \  New values\n      for each field might be configured by the sender (i.e., \"\
    This\n      header is secured; use a compliant client.\").\n   The term non-repudiation\
    \ is used throughout this document in\n   deference to the usage in the S/MIME\
    \ Message Specification [RFC5751].\n   It is recognized that this term carries\
    \ with it much baggage, and\n   that there is some disagreement as to its proper\
    \ meaning and usage.\n   However, in the context of this document, the term merely\
    \ refers to\n   one set of possible security services that a conforming\n   implementation\
    \ might be able to provide.  This document specifies no\n   normative requirements\
    \ for non-repudiation.\n"
- title: 3.  Context
  contents:
  - "3.  Context\n   Over the Internet, email use has grown and today represents a\n\
    \   fundamental service.  Meanwhile, continually increasing threat levels\n  \
    \ are motivating the implementation of security services.\n   Historically, SMTP\
    \ [RFC5321] and the Internet Message Format (IMF)\n   [RFC5322] don't provide,\
    \ by default, security services.  The S/MIME\n   standard [RFC5751] was published\
    \ in order to address these needs.\n   S/MIME defines a data encapsulation format\
    \ for the provision of end-\n   to-end security services such as integrity, authentication,\
    \ non-\n   repudiation, and confidentiality.  By default, S/MIME secures message\n\
    \   body parts, at the exclusion of the message header fields.  In order\n   to\
    \ protect message header fields (for instance, the \"Subject\", \"To\",\n   \"\
    From\", or customized fields), several solutions exist.\n   In Section 3.1 of\
    \ [RFC5751], S/MIME defines an encapsulation\n   mechanism:\n      [...] the sending\
    \ client MAY wrap a full MIME message in a\n      message/rfc822 wrapper in order\
    \ to apply S/MIME security services\n      to these header fields.  It is up to\
    \ the receiving client to\n      decide how to present this \"inner\" header along\
    \ with the\n      unprotected \"outer\" header.\n   However, some use cases are\
    \ not addressed, especially in the case of\n   message encryption.  What happens\
    \ when header fields are encrypted?\n   How does the receiving client display\
    \ these header fields?  How can a\n   subset of header fields be secured?  S/MIME\
    \ doesn't address these\n   issues.\n   Some partial header protection is provided\
    \ by the S/MIME Certificate\n   Handling specification [RFC5750]:\n      Receiving\
    \ agents MUST check that the address in the From or Sender\n      header of a\
    \ mail message matches an Internet mail address, if\n      present, in the signer's\
    \ certificate, if mail addresses are\n      present in the certificate.\n   In\
    \ some cases, this may provide assurance of the integrity of the\n   From or Sender\
    \ header values.  However, the solution in RFC 5750 only\n   provides a matching\
    \ mechanism between email addresses and provides no\n   protection to other header\
    \ fields.\n   Other security specifications (introduced below) exist such as DKIM,\n\
    \   STARTTLS and TLS with IMAP, but they meet other needs (signing\n   domain,\
    \ secure channels, etc.).\n   STARTTLS and TLS with IMAP provide secure channels\
    \ between components\n   of the email system (MUA, MSA, MTA, etc.), but end-to-end\
    \ integrity\n   cannot be guaranteed.\n   DKIM defines a domain-level authentication\
    \ framework for email.\n   While this permits integrity and origination checks\
    \ on message header\n   fields and the message body, it does this for a domain\
    \ actor (usually\n   the SMTP service or equivalent) and not for the entity that\
    \ is\n   sending, and thus signing, the message.  (Extensions to DKIM might be\n\
    \   able to solve this issue by authenticating the sender and making a\n   statement\
    \ of this fact as part of the signed message headers.)  DKIM\n   is also deficient\
    \ for our purposes, as it does not provide a\n   confidentially service.\n   An\
    \ Internet-Draft referred to as \"Protected Headers\" [PRHDRS] has\n   been proposed.\
    \  Mechanisms described in that document are the\n   following:\n      [...] a\
    \ digest value is computed over the canonicalized version of\n      some selected\
    \ header fields.  This technique resembles header\n      protection in [RFC4871].\
    \  Then the digest value is included in a\n      signed attribute field of a CMS\
    \ signature.\n   (Note that RFC 4871 has been obsoleted by RFC 6376.)\n   That\
    \ specification doesn't address all conceivable requirements as\n   noted below.\
    \  If the protected header field has been altered, the\n   original value cannot\
    \ be determined by the recipient.  In addition,\n   the encryption service cannot\
    \ provide confidentiality for fields that\n   must remain present in the message\
    \ header during transport.\n   This document proposes a technology for securing\
    \ message header\n   fields.  It's referred to as \"Secure Headers\".  It is based\
    \ on S/MIME\n   and CMS standards.  It provides security services such as data\n\
    \   integrity, confidentiality, and non-repudiation of the sender.\n   Secure\
    \ Headers is backward compatible with other S/MIME clients.\n   S/MIME clients\
    \ who have not implemented Secure Headers technology\n   need merely ignore specific\
    \ signed attributes fields in a CMS\n   signature (which is the default behavior).\n"
- title: 4.  Mechanisms to Secure Message Header Fields
  contents:
  - "4.  Mechanisms to Secure Message Header Fields\n   Secure Headers technology\
    \ involves the description of a security\n   policy.  This policy MUST describe\
    \ a secure message profile and list\n   the header fields to secure.  How this\
    \ security policy is agreed upon\n   or communicated is beyond the scope of this\
    \ document.\n   Secure headers are based on the signed attributes field as defined\
    \ in\n   CMS.  The details are as follows.  The message header fields to be\n\
    \   secured are integrated in a structure (SecureHeaderFields structure)\n   that\
    \ is encapsulated in the signed attributes structure of the\n   SignerInfo object.\
    \  There is only one value of HeaderFields encoded\n   into a single SignedAttribute\
    \ in a signature.  See Appendix A for an\n   example.  For each header field present\
    \ in the secure signature, a\n   status can be set.  Then, as described in Section\
    \ 5.4 of CMS\n   [RFC5652], the message digest calculation process computes a\
    \ message\n   digest on the content together with the signed attributes.  Details\n\
    \   of the signature generation process are in Section 4.5.1 of this\n   document.\n\
    \   Verification of secure header fields is based on the signature\n   verification\
    \ process described in CMS.  At the end of this process, a\n   comparison between\
    \ the secure header fields and the corresponding\n   message header fields is\
    \ performed.  If they match, the signature is\n   valid.  Otherwise, the signature\
    \ is invalid.  Details of the\n   signature verification process are in Section\
    \ 4.5.2 of this document.\n   Non-conforming S/MIME clients will ignore the signed\
    \ attribute\n   containing the SecureHeaderFields structure, and only perform\
    \ the\n   verification process described in CMS.  This guarantees backward\n \
    \  compatibility.\n   Secure headers provide security services such as data integrity,\
    \ non-\n   repudiation, and confidentiality.\n   For different reasons (e.g.,\
    \ usability, limits of IMAP [RFC3501]),\n   encryption and decryption processes\
    \ are performed by a third party.\n   The third party that performs these processes\
    \ is referred to in the\n   Domain Security specification as a Domain Confidentiality\
    \ Authority\n   (DCA).  Details of the encryption and decryption processes are\
    \ in\n   Sections 4.6.1 and 4.6.2 of this document.\n   The architecture of Secure\
    \ Headers is presented below.  The MUA\n   performs the signature generation process\
    \ (C) and signature\n   verification process (F).  The DCA performs the message\
    \ encryption\n   process (D) and message decryption process (E).  The encryption\
    \ and\n   decryption processes are optional.\n             A Domain          \
    \                   B Domain\n     +----------------------+             +----------------------+\n\
    \     +-----+          +-----+             +-----+          +-----+\n     | MUA\
    \ | -------> | DCA | ----------> | DCA |--------> | MUA |\n     |  C  |      \
    \    |  D  |             |  E  |          |  F  |\n     +-----+          +-----+\
    \             +-----+          +-----+\n             SignedMsg        EncryptedMsg\
    \        SignedMsg\n                  Figure 1: Architecture of Secure Headers\n"
- title: 4.1.  ASN.1 Syntax of Secure Header Fields
  contents:
  - "4.1.  ASN.1 Syntax of Secure Header Fields\n   The ASN.1 syntax [ASN1-88] of\
    \ the SecureHeaderFields structure is as\n   follows:\n      SecureHeaderFields\
    \ ::= SET {\n         canonAlgorithm Algorithm,\n         secHeaderFields HeaderFields\
    \ }\n      id-aa-secureHeaderFieldsIdentifier OBJECT IDENTIFIER ::= {\n      \
    \   iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)\n         pkcs-9(9) smime(16)\
    \ id-aa(2) secureHeaderFieldsIdentifier(55) }\n      Algorithm ::= ENUMERATED\
    \ {\n         canonAlgorithmSimple(0),\n         canonAlgorithmRelaxed(1) }\n\
    \      HeaderFields ::= SEQUENCE SIZE (1..MAX) OF HeaderField\n      HeaderField\
    \ ::= SEQUENCE {\n         field-Name HeaderFieldName,\n         field-Value HeaderFieldValue,\n\
    \         field-Status HeaderFieldStatus DEFAULT duplicated }\n      HeaderFieldName\
    \ ::= VisibleString (FROM (ALL EXCEPT (\":\")))\n           -- This description\
    \ matches the description of\n           -- field name in Sections 2.2 and 3.6.8\
    \ of RFC 5322\n      HeaderFieldValue ::= UTF8String\n           -- This description\
    \ matches the description of\n           -- field body in Section 2.2 of RFC 5322\
    \ as\n           -- extended by Section 3.1 of RFC 6532.\n      HeaderFieldStatus\
    \ ::= INTEGER {\n         duplicated(0), deleted(1), modified(2) }\n"
- title: 4.2.  Secure Header Fields Length and Format
  contents:
  - "4.2.  Secure Header Fields Length and Format\n   This specification requires\
    \ MUA security capabilities in order to\n   process well-formed headers, as specified\
    \ in IMF.  Notice that it\n   includes long header fields and folded header fields.\n"
- title: 4.3.  Canonicalization Algorithm
  contents:
  - "4.3.  Canonicalization Algorithm\n   During a message transfer through a messaging\
    \ system, some components\n   might modify headers (i.e., adding or deleting space,\
    \ changing or\n   lowercase or uppercase).  This might lead to a comparison mismatch\
    \ of\n   header fields.  This emphasizes the need of a conversion process in\n\
    \   order to transform data to their canonical form.  This process is\n   named\
    \ the canonicalization process.\n   Two canonicalization algorithms are considered\
    \ here, according to\n   Section 3.4 of the DKIM specification [RFC6376].  The\
    \ \"simple\"\n   algorithm doesn't allow any modification, whereas the \"relaxed\"\
    \n   algorithm accepts slight modifications like space replacement or line\n \
    \  reformatting.  Given the scope of this document, canonicalization\n   mechanisms\
    \ only involve header fields.\n   Implementations SHOULD use the \"relaxed\" algorithm\
    \ to promote\n   interoperability with non-conforming SMTP products.\n"
- title: 4.4.  Header Field Statuses
  contents:
  - "4.4.  Header Field Statuses\n   Header field statuses are necessary to provide\
    \ a confidentiality\n   service for message headers.  In this specification, the\n\
    \   confidentiality of header fields is provided by the DCA.  This point\n   is\
    \ described in Section 4.  The DCA performs the message encryption\n   process\
    \ and message decryption process; these processes are described\n   in detail\
    \ in Sections 4.6.1 and 4.6.2.  Although header field\n   statuses are embedded\
    \ in the signature, the signature processes\n   (generation and verification)\
    \ ignore them.  The header field status\n   defaults to \"duplicated\".  If the\
    \ header field is confidential, the\n   header field status MUST be either \"\
    deleted\" or \"modified\".\n"
- title: 4.5.  Signature Process
  contents:
  - '4.5.  Signature Process

    '
- title: 4.5.1.  Signature Generation Process
  contents:
  - "4.5.1.  Signature Generation Process\n   During the signature generation process,\
    \ the sender's MUA MUST embed\n   the SecureHeaderFields structure in the signed\
    \ attributes, as\n   described in CMS.  The SecureHeaderFields structure MUST\
    \ include a\n   canonicalization algorithm.\n   The sender's MUA MUST have a list\
    \ of header fields to secure,\n   statuses, and a canonicalization algorithm,\
    \ as defined by the\n   security policy.\n   Header fields (names and values)\
    \ embedded in signed attributes MUST\n   be the same as those included in the\
    \ initial message.\n   If different headers share the same name, all instances\
    \ MUST be\n   included in the SecureHeaderFields structure.\n   If multiple signatures\
    \ are used, as explained in the CMS and Multiple\n   Signer [RFC4853] specifications,\
    \ the SecureHeaderFields structure\n   MUST be the same in each SignerInfos object.\n\
    \   If a header field is present and its value is empty, HeaderFieldValue\n  \
    \ MUST have a zero-length field-Value.\n   Considering secure header mechanisms,\
    \ the signature generation\n   process MUST perform the following steps:\n   \
    \   1) Select the relevant header fields to secure.  This subset of\n        \
    \ headers is defined according the security policy.\n      2) Apply the canonicalization\
    \ algorithm for each selected header\n         field.\n      3) Complete the following\
    \ fields in the SecureHeaderFields\n         structure according to the initial\
    \ message: HeaderFieldName,\n         HeaderFieldValue, and HeaderFieldStatus.\n\
    \      4) Complete the algorithm field according to the canonicalization\n   \
    \      algorithm configured.\n      5) Embed the SecureHeaderFields structure\
    \ in the signed attributes\n         of the SignerInfos object.\n      6) Compute\
    \ the signature generation process as described in\n         Section 5.5 of CMS\
    \ [RFC5652].\n"
- title: 4.5.2.  Signature Verification Process
  contents:
  - "4.5.2.  Signature Verification Process\n   During the signature verification\
    \ process, the receiver's MUA\n   compares header fields embedded in the SecureHeaderFields\
    \ structure\n   with those present in the message.  For this purpose, it uses\
    \ the\n   canonicalization algorithm identified in the signed attributes.  If\
    \ a\n   mismatch appears during the comparison process, the receiver's MUA\n \
    \  MUST invalidate the signature.  The MUA MUST display information on\n   the\
    \ validity of each header field.  It MUST also display the values\n   embedded\
    \ in the signature.\n   The receiver's MUA MUST know the list of mandatory header\
    \ fields in\n   order to verify their presence in the message.  If a header field\n\
    \   defined in a message is in the secure header list, it MUST be\n   included\
    \ in the SecureHeaderFields structure.  Otherwise, the\n   receiver's MUA MUST\
    \ warn the user that a non-secure header is\n   present.\n   Considering secure\
    \ header mechanisms, the signature verification\n   process MUST perform the following\
    \ steps:\n      1) Execute the signature verification process as described Section\n\
    \         5.6 of CMS [RFC5652].  If the signature appears to be invalid,\n   \
    \      the process ends.  Otherwise, the process continues.\n      2) Read the\
    \ type of canonicalization algorithm specified in the\n         SecureHeaderFields\
    \ structure.\n      3) For each field present in the signature, find the matching\n\
    \         header in the message.  If there is no matching header, the\n      \
    \   verification process MUST warn the user, specifying the missing\n        \
    \ header name.  The signature is tagged as invalid.  Note that\n         any header\
    \ fields encrypted as per Section 4.6 (i.e., status of\n         \"deleted\" or\
    \ \"modified\") have been are already restored by the\n         DCA when the signature\
    \ verification process is performed by the\n         MUA.\n      4) Compute the\
    \ canonicalization algorithm for each header field\n         value in the message.\
    \  If the \"simple\" algorithm is used, the\n         steps described in Section\
    \ 3.4.1 of DKIM [RFC6376] are\n         performed.  If the relaxed algorithm is\
    \ used, the steps\n         described in Section 3.4.2 of DKIM [RFC6376] are performed.\n\
    \      5) For each field, compare the value stored in the\n         SecureHeaderFields\
    \ structure with the value returned by the\n         canonicalization algorithm.\
    \  If the values don't match, the\n         verification process MUST warn the\
    \ user.  This warning MUST\n         mention mismatching fields.  The signature\
    \ is tagged as\n         invalid.  If all the comparisons succeed, the verification\n\
    \         process MUST also notify the user (i.e., using an appropriate\n    \
    \     icon).\n      6) Verify that no secure header has been added to the message\n\
    \         header, given the initial fields.  If an extra header field has\n  \
    \       been added, the verification process MUST warn the user.  This\n     \
    \    warning MUST mention extra fields.  The signature is tagged as\n        \
    \ invalid.  This step is only performed if the sender and the\n         recipient\
    \ share the same security policy.\n      7) Verify that each mandatory header\
    \ in the security policy and\n         present in the message is also embedded\
    \ in the\n         SecureHeaderFields structure.  If such headers are missing,\
    \ the\n         verification process MUST warn the user and indicate the names\n\
    \         of the missing headers.\n   The MUA MUST display the properties of each\
    \ secure header field\n   (name, value, and status) and the canonicalization algorithm\
    \ used.\n"
- title: 4.6.  Encryption and Decryption Processes
  contents:
  - "4.6.  Encryption and Decryption Processes\n   Encryption and decryption operations\
    \ are not performed by MUAs.  This\n   is mainly justified by limitations of existing\
    \ email delivery\n   protocols, for example, IMAP.  The solution developed here\
    \ relies on\n   concepts explained in Section 4 of the Domain Security specification\n\
    \   [RFC3183].  A fundamental component of the architecture is the Domain\n  \
    \ Confidentiality Authority (DCA).  Its purpose is to encrypt and\n   decrypt\
    \ messages instead of that being performed by senders and\n   receivers (respectively).\n"
- title: 4.6.1.  Encryption Process
  contents:
  - "4.6.1.  Encryption Process\n   All the computations presented in this section\
    \ MUST be performed only\n   if the following conditions are verified:\n     \
    \ -  The content to be encrypted MUST consist of a signed message\n         (application/pkcs7-mime\
    \ with SignedData, or multipart/signed)\n         as shown in Section 3.4 of the\
    \ S/MIME specification [RFC5751].\n      -  A SecureHeaderFields structure MUST\
    \ be included in the\n         signedAttrs field of the SignerInfo object of the\
    \ signature.\n   All the mechanisms described below MUST start at the beginning\
    \ of the\n   encryption process, as explained in CMS.  They are performed by the\n\
    \   sender's DCA.  For extraction of the field status, the following\n   steps\
    \ MUST be performed for each field included in the\n   SecureHeaderFields structure:\n\
    \      1. If the status is \"duplicated\", the field is left at its\n        \
    \ existing value.\n      2. If the status is \"deleted\", the header field (name\
    \ and value)\n         is removed from the message.  Mandatory header fields specified\n\
    \         in [RFC5322] MUST be kept.\n      3. If the status is \"modified\",\
    \ the header value is replaced by a\n         new value, as configured in the\
    \ DCA.\n"
- title: 4.6.2.  Decryption Process
  contents:
  - "4.6.2.  Decryption Process\n   All the computations presented in this section\
    \ MUST be performed only\n   if the following conditions are verified:\n     \
    \ -  The decrypted content MUST consist of a signature object or a\n         multipart\
    \ object, where one part is a detached signature, as\n         shown in Section\
    \ 3.4 of the S/MIME specification [RFC5751].\n      -  A SecureHeaderFields structure\
    \ MUST be included in the\n         SignerInfo object of the signature.\n   All\
    \ the mechanisms described below MUST start at the end of the\n   decryption process,\
    \ as explained in CMS.  They are executed by the\n   receiver's DCA.  The following\
    \ steps MUST be performed for each field\n   included in the SecureHeaderFields\
    \ structure:\n      1. If the status is \"duplicated\", the field is left at its\n\
    \         existing value.\n      2. If the status is \"deleted\", the DCA MUST\
    \ write a header field\n         (name and value) in the message.  This header\
    \ MUST be compliant\n         with the information embedded in the signature.\n\
    \      3. If the status is \"modified\", the DCA MUST rewrite a header\n     \
    \    field in the message.  This header MUST be compliant with the\n         SecureHeaderFields\
    \ structure.\n"
- title: 5.  Case of Triple Wrapping
  contents:
  - "5.  Case of Triple Wrapping\n   Secure Headers mechanisms MAY be used with triple\
    \ wrapping, as\n   described in Enhanced Security Services (ESS) [RFC2634].  In\
    \ this\n   case, a SecureHeaderFields structure MAY be present in the inner\n\
    \   signature, the outer signature, or both.  In the last case, the two\n   SecureHeaderFields\
    \ structures MAY differ.  One MAY consider the\n   encapsulation of a header field\
    \ in the inner signature in order to\n   satisfy confidentiality needs.  On the\
    \ contrary, an outer signature\n   encapsulation MAY help for delivery purposes.\
    \  The sender's MUA and\n   receiver's MUA must have a security policy for triple\
    \ wrapping.  This\n   security policy MUST be composed of two parts -- one for\
    \ the inner\n   signature and the other for the outer signature.\n"
- title: 6.  Security Gateways
  contents:
  - "6.  Security Gateways\n   Some security gateways sign or verify messages that\
    \ pass through\n   them.  Compliant gateways MUST apply the process described\
    \ in Section\n   4.5.\n   For noncompliant gateways, the presence of a SecureHeaderFields\n\
    \   structure does not change their behavior.\n   In some case, gateways MUST\
    \ generate a new signature or insert\n   signerInfos into the signedData block.\
    \  The format of signatures\n   generated by gateways is outside the scope of\
    \ this document.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   This specification describes an extension of\
    \ the S/MIME standard.  It\n   provides message header integrity, non-repudiation,\
    \ and\n   confidentiality.  The signature and encryption processes are\n   complementary.\
    \  However, according to the security policy, only the\n   signature mechanism\
    \ is applicable.  In this case, the signature\n   process is implemented between\
    \ MUAs.  The encryption process requires\n   signed messages with the Secure Headers\
    \ extension.  If required, the\n   encryption process is implemented by DCAs.\n\
    \   This specification doesn't address end-to-end confidentiality for\n   message\
    \ header fields.  Messages sent and received by MUAs could be\n   transmitted\
    \ as plaintext.  In order to avoid interception, the use of\n   TLS is recommended\
    \ between MUAs and DCAs (uplink and downlink).\n   Another solution might be the\
    \ use of S/MIME between MUAs and DCAs in\n   the same domain.\n   For the header\
    \ field confidentiality mechanism to be effective, all\n   DCAs supporting confidentiality\
    \ must support Secure Headers\n   processing.  Otherwise, there is a risk that\
    \ headers are not obscured\n   upon encryption or not restored upon decryption.\
    \  In the former case,\n   confidentiality of the header fields is compromised.\
    \  In the latter\n   case, the integrity of the headers will appear to be compromised.\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   IANA has registered value 65, mod-sMimeSecureHeadersV1,\
    \ in the \"SMI\n   Security for S/MIME Module Identifier (1.2.840.113549.1.9.16.0)\"\
    \n   registry.\n   IANA has also registered value 55,\n   id-aa-secureHeaderFieldsIdentifier,\
    \ in the \"SMI Security for S/MIME\n   Attributes (1.2.840.113549.1.9.16.2)\"\
    \ registry.  This value will be\n   used to identify an authenticated attribute\
    \ carried within a CMS\n   wrapper [RFC5652].  This attribute OID appears in Section\
    \ 4.1 and\n   again in the reference definition in Appendix A.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC2634]\
    \  Hoffman, P., Ed., \"Enhanced Security Services for S/MIME\",\n            \
    \  RFC 2634, June 1999,\n              <http://www.rfc-editor.org/info/rfc2634>.\n\
    \   [RFC4853]  Housley, R., \"Cryptographic Message Syntax (CMS) Multiple\n  \
    \            Signer Clarification\", RFC 4853, April 2007,\n              <http://www.rfc-editor.org/info/rfc4853>.\n\
    \   [RFC5322]  Resnick, P., Ed., \"Internet Message Format\", RFC 5322,\n    \
    \          October 2008, <http://www.rfc-editor.org/info/rfc5322>.\n   [RFC5652]\
    \  Housley, R., \"Cryptographic Message Syntax (CMS)\", STD 70,\n            \
    \  RFC 5652, September 2009,\n              <http://www.rfc-editor.org/info/rfc5652>.\n\
    \   [RFC6376]  Crocker, D., Ed., Hansen, T., Ed., and M. Kucherawy, Ed.,\n   \
    \           \"DomainKeys Identified Mail (DKIM) Signatures\", STD 76,\n      \
    \        RFC 6376, September 2011,\n              <http://www.rfc-editor.org/info/rfc6376>.\n\
    \   [ASN1-88]  CCITT, Recommendation X.208: Specification of Abstract\n      \
    \        Syntax Notation One (ASN.1), 1988.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [PRHDRS]   Liao, L. and J. Schwenk, \"Header\
    \ Protection for S/MIME\",\n              draft-liao-smimeheaderprotect-05, Work\
    \ in Progress, June\n              2009.\n   [RFC2595]  Newman, C., \"Using TLS\
    \ with IMAP, POP3 and ACAP\", RFC\n              2595, June 1999, <http://www.rfc-editor.org/info/rfc2595>.\n\
    \   [RFC3183]  Dean, T. and W. Ottaway, \"Domain Security Services using\n   \
    \           S/MIME\", RFC 3183, October 2001,\n              <http://www.rfc-editor.org/info/rfc3183>.\n\
    \   [RFC3207]  Hoffman, P., \"SMTP Service Extension for Secure SMTP over\n  \
    \            Transport Layer Security\", RFC 3207, February 2002,\n          \
    \    <http://www.rfc-editor.org/info/rfc3207>.\n   [RFC3501]  Crispin, M., \"\
    INTERNET MESSAGE ACCESS PROTOCOL - VERSION\n              4rev1\", RFC 3501, March\
    \ 2003,\n              <http://www.rfc-editor.org/info/rfc3501>.\n   [RFC5321]\
    \  Klensin, J., \"Simple Mail Transfer Protocol\", RFC 5321,\n              October\
    \ 2008, <http://www.rfc-editor.org/info/rfc5321>.\n   [RFC5598]  Crocker, D.,\
    \ \"Internet Mail Architecture\", RFC 5598, July\n              2009, <http://www.rfc-editor.org/info/rfc5598>.\n\
    \   [RFC5750]  Ramsdell, B. and S. Turner, \"Secure/Multipurpose Internet\n  \
    \            Mail Extensions (S/MIME) Version 3.2 Certificate\n              Handling\"\
    , RFC 5750, January 2010,\n              <http://www.rfc-editor.org/info/rfc5750>.\n\
    \   [RFC5751]  Ramsdell, B. and S. Turner, \"Secure/Multipurpose Internet\n  \
    \            Mail Extensions (S/MIME) Version 3.2 Message\n              Specification\"\
    , RFC 5751, January 2010,\n              <http://www.rfc-editor.org/info/rfc5751>.\n"
- title: Appendix A.  Formal Syntax of Secure Header
  contents:
  - "Appendix A.  Formal Syntax of Secure Header\n   Note: The ASN.1 module contained\
    \ herein uses the 1988 version of\n   ASN.1 notation [ASN1-88] for the purposes\
    \ of alignment with the\n   existing S/MIME specifications.  The SecureHeaderFields\
    \ structure is\n   defined as follows:\n     mod-SMimeSecureHeadersV1\n      \
    \ { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)\n       pkcs-9(9) smime(16)\
    \ modules(0) secure-headers-v1(65) }\n     DEFINITIONS IMPLICIT TAGS ::=\n   \
    \  BEGIN\n     IMPORTS\n       id-aa\n            FROM SecureMimeMessageV3dot1\n\
    \                 { iso(1) member-body(2) us(840) rsadsi(113549)\n           \
    \      pkcs(1) pkcs-9(9) smime(16) modules(0)\n                 msg-v3dot1(21)\
    \ };\n     -- id-aa is the arc with all new authenticated and\n     -- unauthenticated\
    \ attributes produced by the S/MIME\n     -- Working Group\n      id-aa-secureHeaderFieldsIdentifier\
    \ OBJECT IDENTIFIER ::= {\n         id-aa secure-headers(55) }\n      SecureHeaderFields\
    \ ::= SET {\n           canonAlgorithm Algorithm,\n           secHeaderFields\
    \ HeaderFields }\n      Algorithm ::= ENUMERATED {\n           canonAlgorithmSimple(0),\n\
    \           canonAlgorithmRelaxed(1) }\n      HeaderFields ::= SEQUENCE SIZE (1..MAX)\
    \ OF HeaderField\n      HeaderField ::= SEQUENCE {\n           field-Name HeaderFieldName,\n\
    \           field-Value HeaderFieldValue,\n           field-Status HeaderFieldStatus\
    \ DEFAULT duplicated }\n      HeaderFieldName ::= VisibleString (FROM (ALL EXCEPT\
    \ (\":\")))\n           -- This description matches with the description of\n\
    \           -- field name in the Sections 2.2 and 3.6.8 of RFC 5322\n      HeaderFieldValue\
    \ ::= UTF8String\n           -- This description matches with the description\
    \ of\n           -- field body in the Section 2.2 of RFC 5322 as\n           --\
    \ extended by Section 3.1 of RFC 6532.\n      HeaderFieldStatus ::= INTEGER {\n\
    \           duplicated(0), deleted(1), modified(2) }\n      END\n"
- title: Appendix B.  Example of Secure Header Fields
  contents:
  - "Appendix B.  Example of Secure Header Fields\n   In the following example, the\
    \ header fields subject,\n   x-ximf-primary-precedence, and x-ximf-correspondance-type\
    \ are secured\n   and integrated in a SecureHeaderFields structure.  This example\n\
    \   should produce a valid signature.\n   Extract from the message header fields:\n\
    \      From: John Doe <jdoe@example.com>\n      To: Mary Smith <mary@example.com>\n\
    \      subject: This is a test of Ext.\n      x-ximf-primary-precedence: priority\n\
    \      x-ximf-correspondance-type: official\n   The SecureHeaderFields structure\
    \ extracted from the signature:\n   2286  150: SEQUENCE {\n   2289   11:   OBJECT\
    \ IDENTIFIER '1 2 840 113549 1 9 16 2 80'\n   2302  134:   SET {\n   2305  131:\
    \     SET {\n   2308    4:       ENUMERATED 1\n   2314  123:       SEQUENCE {\n\
    \   2316   40:         SEQUENCE {\n   2318   25:           VisibleString 'x-ximf-primary-precedence'\n\
    \   2345    8:           UTF8String 'priority'\n   2355    1:           INTEGER\
    \ 0\n            :           }\n   2358   41:         SEQUENCE {\n   2360   26:\
    \           VisibleString 'x-ximf-correspondance-type'\n   2388    8:        \
    \   UTF8String 'official'\n   2398    1:           INTEGER 0\n            :  \
    \         }\n   2401   36:         SEQUENCE {\n   2403    7:           VisibleString\
    \ 'subject'\n   2412   22:           UTF8String 'This is a test of Ext.'\n   2436\
    \    1:           INTEGER 0\n            :           }\n            :        \
    \ }\n            :       }\n            :     }\n            :   }\n   The example\
    \ is displayed as an output of Peter Gutmann's \"dumpasn1\"\n   program.\n   OID\
    \ used in this example is nonofficial.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to thank Jim Schaad, Alexey Melnikov,\
    \ Damien\n   Roque, Thibault Cassan, William Ottaway, and Sean Turner who kindly\n\
    \   provided reviews of the document and/or suggestions for improvement.\n   As\
    \ always, all errors and omissions are the responsibility of the\n   authors.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Laurent CAILLEUX\n   DGA MI\n   BP 7\n   35998 RENNES\
    \ CEDEX 9\n   France\n   EMail: laurent.cailleux@intradef.gouv.fr\n   Chris Bonatti\n\
    \   IECA, Inc.\n   3057 Nutley Street, Suite 106\n   Fairfax, VA  22031\n   United\
    \ States\n   EMail: bonatti252@ieca.com\n"
