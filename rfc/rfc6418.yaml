- title: __initial_text__
  contents:
  - '     Multiple Interfaces and Provisioning Domains Problem Statement

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes issues encountered by a node attached to\n\
    \   multiple provisioning domains.  This node receives configuration\n   information\
    \ from each of its provisioning domains, where some\n   configuration objects\
    \ are global to the node and others are local to\n   the interface.  Issues such\
    \ as selecting the wrong interface to send\n   traffic happen when conflicting\
    \ node-scoped configuration objects are\n   received and inappropriately used.\
    \  Moreover, other issues are the\n   result of simultaneous attachment to multiple\
    \ networks, such as\n   domain selection or addressing and naming space overlaps,\
    \ regardless\n   of the provisioning mechanism.  While multiple provisioning domains\n\
    \   are typically seen on nodes with multiple interfaces, this document\n   also\
    \ discusses situations involving single-interface nodes.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6418.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Terminology .....................................................4\n  \
    \ 3. Scope and Existing Work .........................................4\n    \
    \  3.1. Interactions Below IP ......................................4\n      3.2.\
    \ MIF Node Characterization ..................................5\n      3.3. Host\
    \ Requirements ..........................................5\n      3.4. Mobility\
    \ and Other IP Protocols ............................6\n      3.5. Address Selection\
    \ ..........................................6\n      3.6. Finding and Sharing\
    \ IP Addresses with Peers ................7\n      3.7. Provisioning Domain Selection\
    \ ..............................7\n      3.8. Session Management .........................................8\n\
    \      3.9. Sockets API ................................................9\n  \
    \ 4. MIF Issues ......................................................9\n    \
    \  4.1. DNS Resolution Issues ......................................9\n      4.2.\
    \ Node Routing ..............................................12\n      4.3. Conflicting\
    \ Policies ......................................13\n      4.4. Session Management\
    \ ........................................14\n      4.5. Single Interface on Multiple\
    \ Provisioning Domains .........14\n   5. Underlying Problems and Causes .................................15\n\
    \   6. Security Considerations ........................................17\n  \
    \ 7. Contributors ...................................................18\n   8.\
    \ Acknowledgements ...............................................18\n   9. Informative\
    \ References .........................................18\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   A multihomed node may have multiple provisioning domains\
    \ (via\n   physical and/or virtual interfaces).  For example, a node may be\n\
    \   simultaneously connected to a wired Ethernet LAN, an 802.11 LAN, a 3G\n  \
    \ cell network, one or multiple VPN connections, or one or multiple\n   tunnels\
    \ (automatic or manual).  Current laptops and smartphones\n   typically have multiple\
    \ access network interfaces and, thus, are\n   often connected to different provisioning\
    \ domains.\n   A multihomed node receives configuration information from each\
    \ of its\n   attached networks, through various mechanisms such as DHCPv4\n  \
    \ [RFC2131], DHCPv6 [RFC3315], PPP [RFC1661], and IPv6 Router\n   Advertisements\
    \ [RFC4861].  Some received configuration objects are\n   specific to an interface,\
    \ such as the IP address and the link prefix.\n   Others are typically considered\
    \ by implementations as being global to\n   the node, such as the routing information\
    \ (e.g., default gateway),\n   DNS server IP addresses, and address selection\
    \ policies, herein\n   referred to as \"node-scoped\".\n   When the received node-scoped\
    \ configuration objects have different\n   values from each provisioning domain,\
    \ such as different DNS server IP\n   addresses, different default gateways, or\
    \ different address selection\n   policies, the node has to decide which one to\
    \ use or how it will\n   merge them.\n   Other issues are the result of simultaneous\
    \ attachment to multiple\n   networks, such as addressing and naming space overlaps,\
    \ regardless of\n   the provisioning mechanism.\n   The following sections define\
    \ the multiple interfaces (MIF) node and\n   the scope of this work, describe\
    \ related work, list issues, and then\n   summarize the underlying problems.\n\
    \   A companion document, [RFC6419], discusses some current practices of\n   various\
    \ implementations dealing with MIF.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   Administrative domain\n      A group of hosts, routers, and\
    \ networks operated and managed by a\n      single organization [RFC1136].\n \
    \  Provisioning domain\n      A set of consistent configuration information (e.g.,\
    \ default\n      router, network prefixes, DNS) and the corresponding interface.\n\
    \      One administrative domain may have multiple provisioning domains.\n   \
    \   Successful attachment to the provisioning domain implies that the\n      terminal\
    \ attaches to the corresponding interface with appropriate\n      configuration\
    \ information.\n   Reference to IP version\n      When a protocol keyword such\
    \ as IP, PPP, or DHCP is used in this\n      document without any reference to\
    \ a specific IP version, then it\n      implies both IPv4 and IPv6.  A specific\
    \ IP version keyword such as\n      DHCPv4 or DHCPv6 is meant to be specific to\
    \ that IP version.\n"
- title: 3.  Scope and Existing Work
  contents:
  - "3.  Scope and Existing Work\n   This section describes existing related work\
    \ and defines the scope of\n   the problem.\n"
- title: 3.1.  Interactions Below IP
  contents:
  - "3.1.  Interactions Below IP\n   Some types of interfaces have link-layer characteristics\
    \ that may be\n   used in determining how multiple provisioning domain issues\
    \ will be\n   dealt with.  For instance, link layers may have authentication and\n\
    \   encryption characteristics that could be used as criteria for\n   interface\
    \ selection.  However, network discovery and selection on\n   lower layers as\
    \ defined by [RFC5113] is out of scope of this\n   document.  Moreover, interoperability\
    \ with lower-layer mechanisms\n   such as services defined in IEEE 802.21, which\
    \ aims at facilitating\n   handover between heterogeneous networks [MIH], is also\
    \ out of scope.\n   Some mechanisms (e.g., based on a virtual IP interface) allow\
    \ sharing\n   a single IP address over multiple interfaces to networks with\n\
    \   disparate access technologies.  From the IP-stack view on the node,\n   there\
    \ is only a single interface and single IP address.  Therefore,\n   this situation\
    \ is out of scope of this problem statement.\n   Furthermore, link aggregation\
    \ done under IP where a single interface\n   is shown to the IP stack is also\
    \ out of scope.\n"
- title: 3.2.  MIF Node Characterization
  contents:
  - "3.2.  MIF Node Characterization\n   A MIF node has the following characteristics:\n\
    \   o  A MIF node is an [RFC1122] IPv4- and/or [RFC4294] IPv6-compliant\n    \
    \  node.\n   o  A MIF node is configured with more than one IP address (excluding\n\
    \      loopback and link-local).\n   o  A MIF node can attach to more than one\
    \ provisioning domain, as\n      presented to the IP stack.\n   o  The interfaces\
    \ may be virtual or physical.\n   o  Configuration objects come from one or more\
    \ administrative\n      domains.\n   o  The IP addresses may be from the same\
    \ or different address\n      families, such as IPv4 and IPv6.\n   o  Communications\
    \ using these IP addresses may happen simultaneously\n      and independently.\n\
    \   o  Some communications using these IP addresses are possible on all\n    \
    \  the provisioning domains, while some are only possible on a\n      smaller\
    \ set of the provisioning domains.\n   o  While the MIF node may forward packets\
    \ between its interfaces, the\n      forwarding of packets is not taken into account\
    \ in this definition\n      and is out of scope for this document.\n"
- title: 3.3.  Host Requirements
  contents:
  - "3.3.  Host Requirements\n   \"Requirements for Internet Hosts -- Communication\
    \ Layers\" [RFC1122]\n   describes the multihomed node as if it has multiple IP\
    \ addresses,\n   which may be associated with one or more physical interfaces\n\
    \   connected to the same or different networks.\n   Section 3.3.1.3 of [RFC1122]\
    \ states that the node maintains a route\n   cache table where each entry contains\
    \ the local IP address, the\n   destination IP address, Type(s) of Service (superseded\
    \ by the\n   Differentiated Services Code Point [RFC2474]), and the next-hop\n\
    \   gateway IP address.  The route cache entry would have data about the\n   properties\
    \ of the path, such as the average round-trip delay measured\n   by a transport\
    \ protocol.  Nowadays, implementations are not caching\n   this information.\n\
    \   [RFC1122] defines two host models:\n   o  The \"strong\" host model defines\
    \ a multihomed host as a set of\n      logical hosts within the same physical\
    \ host.  In this model, a\n      packet must be sent on an interface that corresponds\
    \ to the source\n      address of that packet.\n   o  The \"weak\" host model\
    \ describes a host that has some embedded\n      gateway functionality.  In the\
    \ weak host model, the host can send\n      and receive packets on any interface.\n\
    \   The multihomed node computes routes for outgoing datagrams\n   differently,\
    \ depending on the model.  Under the strong model, the\n   route is computed based\
    \ on the source IP address, the destination IP\n   address, and the Differentiated\
    \ Services Code Point.  Under the weak\n   model, the source IP address is not\
    \ used; only the destination IP\n   address and the Differentiated Services Code\
    \ Point are used.\n"
- title: 3.4.  Mobility and Other IP Protocols
  contents:
  - "3.4.  Mobility and Other IP Protocols\n   The scope of this document is only\
    \ about nodes implementing [RFC1122]\n   for IPv4 and [RFC4294] for IPv6 without\
    \ additional features or\n   special-purpose support for transport layers, mobility,\
    \ multihoming,\n   or identifier-locator split mechanisms.  Dealing with multiple\n\
    \   interfaces with such mechanisms is related but considered as a\n   separate\
    \ problem and is under active study elsewhere in the IETF\n   [RFC4960] [RFC5206]\
    \ [RFC5533] [RFC5648] [RFC6182].\n   When an application is using one interface\
    \ while another interface\n   with better characteristics becomes available, the\
    \ ongoing\n   application session could be transferred to the newly enabled\n\
    \   interface.  However, in some cases, the ongoing session shall be kept\n  \
    \ on the current interface while initiating the new session on the new\n   interface.\
    \  The problem of interface selection is within the MIF\n   scope and may leverage\
    \ specific node functions (Section 3.8).\n   However, if transfer of an IP session\
    \ is required, IP mobility\n   mechanisms, such as [RFC6275], shall be used.\n"
- title: 3.5.  Address Selection
  contents:
  - "3.5.  Address Selection\n   \"Default Address Selection for Internet Protocol\
    \ version 6 (IPv6)\"\n   [RFC3484] defines algorithms for source and destination\
    \ IP address\n   selections.  Default address selection as defined in [RFC3484]\
    \ is\n   mandatory to implement in IPv6 nodes, which also means dual-stack\n \
    \  nodes.  A node-scoped policy table managed by the IP stack is\n   defined.\
    \  Mechanisms to update the policy table are defined in\n   [ADDR-SELECT-SOL].\n\
    \   Issues on using default address selection were found in [RFC5220] and\n  \
    \ [RFC5221] in the context of multiple prefixes on the same link.\n"
- title: 3.6.  Finding and Sharing IP Addresses with Peers
  contents:
  - "3.6.  Finding and Sharing IP Addresses with Peers\n   Interactive Connectivity\
    \ Establishment (ICE) [RFC5245] is a technique\n   for NAT traversal for UDP-based\
    \ (and TCP-based) media streams\n   established by the offer/answer model.  The\
    \ multiplicity of IP\n   addresses, ports, and transport mechanisms in Session\
    \ Description\n   Protocol (SDP) offers are tested for connectivity by peer-to-peer\n\
    \   connectivity checks.  The result is candidate IP addresses and ports\n   for\
    \ establishing a connection with the other peer.  However, ICE does\n   not solve\
    \ issues when incompatible configuration objects are received\n   on different\
    \ interfaces.\n   Some application protocols do referrals of IP addresses, port\n\
    \   numbers, and transport for further exchanges.  For instance,\n   applications\
    \ can provide reachability information to themselves or to\n   a third party.\
    \  The general problem of referrals is related to the\n   multiple-interface problem,\
    \ since, in this context, referrals must\n   provide consistent information depending\
    \ on which provisioning domain\n   is used.  Referrals are discussed in [REFERRAL-PS]\
    \ and\n   [SHIM6-APP-REFER].\n"
- title: 3.7.  Provisioning Domain Selection
  contents:
  - "3.7.  Provisioning Domain Selection\n   In a MIF context, the node may simultaneously\
    \ handle multiple domains\n   with disparate characteristics, especially when\
    \ supporting multiple\n   access technologies.  Selection is simple if the application\
    \ is\n   restricted to one specific provisioning domain: the application must\n\
    \   start on the default provisioning domain if available; otherwise, the\n  \
    \ application does not start.  However, if the application can be run\n   on several\
    \ provisioning domains, the selection problem can be\n   difficult.\n   There\
    \ is no standard method for selecting a provisioning domain, but\n   some recommendations\
    \ exist while restricting the scope to the\n   interface selection problem.  For\
    \ example, [TS23.234] proposes a\n   default mechanism for the interface selection.\
    \  This method uses the\n   following information (non-exhaustive list):\n   o\
    \  preferences provided by the user\n   o  policies provided by the network operator\n\
    \   o  quality of the radio link\n   o  network resource considerations (e.g.,\
    \ available Quality of\n      Service (QoS), IP connectivity check)\n   o  the\
    \ application QoS requirements in order to map applications to\n      the best\
    \ interface\n   However, [TS23.234] is designed for a specific multiple-interfaces\n\
    \   use case.  A generic way to handle these characteristics is yet to be\n  \
    \ defined.\n"
- title: 3.8.  Session Management
  contents:
  - "3.8.  Session Management\n   Some implementations, especially in the mobile world,\
    \ rely on a\n   higher-level session manager, also called a connection manager,\
    \ to\n   deal with issues brought by simultaneous attachment to multiple\n   provisioning\
    \ domains.  Typically, the session manager may deal with\n   the selection of\
    \ the interface, and/or the provisioning domain, on\n   behalf of the applications,\
    \ or tackle complex issues such as how to\n   resolve conflicting policies (Section\
    \ 4.3).  As discussed in\n   Section 3.7, the session manager may encounter difficulties\
    \ because\n   of multiple and diverse criteria.\n   Session managers usually leverage\
    \ the link-layer interface to gather\n   information (e.g., lower-layer authentication\
    \ and encryption methods;\n   see Section 3.1) and/or for control purposes.  Such\
    \ a link-layer\n   interface may not provide all required services to make a proper\n\
    \   decision (e.g., interface selection).  Some OSes or terminals already\n  \
    \ implement session managers [RFC6419], and vendor-specific platforms\n   sometimes\
    \ provide a specific sockets API (Section 3.9) that a session\n   manager can\
    \ use.  However, the generic architecture of a session\n   manager and its associated\
    \ API are not currently standardized, so\n   session manager behavior may differ\
    \ between OSes and platforms.\n   Management of multiple interfaces sometimes\
    \ relies on a virtual\n   interface.  For instance, a virtual interface allows\
    \ support of\n   multihoming, inter-technology handovers, and IP flow mobility\
    \ in a\n   Proxy Mobile IPv6 network [LOGICAL-IF-SUPPORT].  This virtual\n   interface\
    \ allows a multiple-interface node sharing a set of IP\n   addresses on multiple\
    \ physical interfaces and can also add benefits\n   to multi-access scenarios\
    \ such as Third Generation Partnership\n   Project (3GPP) Multi Access Packet\
    \ Data Network (PDN) Connectivity\n   [TS23.402].  In most cases, the virtual\
    \ interface will map several\n   physical network interfaces, and the session\
    \ manager should control\n   the configuration of each one of these virtual and\
    \ physical\n   interfaces, as well as the mapping between the virtual and\n  \
    \ sub-interfaces.\n   In a situation involving multiple interfaces, active application\n\
    \   sessions should survive path failures.  Here, the session manager may\n  \
    \ come into play but only relying on existing mechanisms to manage\n   multipath\
    \ TCP (MPTCP) [RFC6182] or failover (Mobile IPv6 (MIP6)\n   [RFC6275], Shim6 [RFC5533]).\
    \  A description of the interaction\n   between these mechanisms and the session\
    \ manager is out of scope of\n   this document.\n"
- title: 3.9.  Sockets API
  contents:
  - "3.9.  Sockets API\n   An Application Programming Interface (API) may expose objects\
    \ that\n   user applications or session managers use for dealing with multiple\n\
    \   interfaces.  For example, [RFC3542] defines how an application using\n   the\
    \ advanced sockets API specifies the interface or the source IP\n   address through\
    \ a simple bind() operation or with the IPV6_PKTINFO\n   socket option.\n   Other\
    \ APIs have been defined to solve issues similar to MIF.  For\n   instance, [RFC5014]\
    \ defines an API to influence the default address\n   selection mechanism by specifying\
    \ attributes of the source addresses\n   it prefers.  [RFC6316] gives another\
    \ example, in a multihoming\n   context, by defining a sockets API enabling interactions\
    \ between\n   applications and the multihoming shim layer for advanced locator\n\
    \   management, and access to information about failure detection and\n   path\
    \ exploration.\n"
- title: 4.  MIF Issues
  contents:
  - "4.  MIF Issues\n   This section describes the various issues when using a MIF\
    \ node that\n   has already received configuration objects from its various\n\
    \   provisioning domains, or when multiple interfaces are used and result\n  \
    \ in wrong domain selection, addressing, or naming space overlaps.\n   They occur,\
    \ for example, when:\n   1.  one interface is on the Internet and one is on a\
    \ corporate\n       private network.  The latter may be through VPN.\n   2.  one\
    \ interface is on one access network (i.e., WiFi) and the other\n       one is\
    \ on another access network (3G) with specific services.\n"
- title: 4.1.  DNS Resolution Issues
  contents:
  - "4.1.  DNS Resolution Issues\n   A MIF node (M1) has an active interface (I1)\
    \ connected to a network\n   (N1), which has its DNS servers (S1 as primary DNS\
    \ server) and\n   another active interface (I2) connected to a network (N2), which\
    \ has\n   its DNS servers (S2 as primary DNS server).  S1 serves some private\n\
    \   namespace, \"private.example.com\".  The user or the application uses a\n\
    \   name \"a.private.example.com\", which is within the private namespace\n  \
    \ of S1 and only resolvable by S1.  Any of the following situations may\n   occur:\n\
    \   1.  The M1 stack, based on its routing table, uses I2 to reach S1 to\n   \
    \    resolve \"a.private.example.com\".  M1 never reaches S1.  The name\n    \
    \   is not resolved.\n   2.  M1 keeps only one set of DNS server addresses from\
    \ the received\n       configuration objects.  Let us assume that M1 keeps S2's\
    \ address\n       as the primary DNS server.  M1 sends the forward DNS query for\n\
    \       a.private.example.com to S2.  S2 responds with an error for a\n      \
    \ nonexistent domain (NXDOMAIN).  The name is not resolved.  This\n       issue\
    \ also arises when performing a reverse DNS lookup.  In the\n       same situation,\
    \ the reverse DNS query fails.\n   3.  M1 keeps only one set of DNS server addresses\
    \ from the received\n       configuration objects.  Let us assume that M1 keeps\
    \ S2's address.\n       M1 sends the DNS query for a.private.example.com to S2.\
    \  S2\n       queries its upstream DNS and gets an IP address for\n       a.private.example.com.\
    \  However, the IP address is not the same\n       one that S1 would have given.\
    \  Therefore, the application tries\n       to connect to the wrong destination\
    \ node, or to the wrong\n       interface, which may imply security issues or\
    \ result in lack of\n       service.\n   4.  S1 or S2 has been used to resolve\
    \ \"a.private.example.com\" to an\n       [RFC1918] address.  Both N1 and N2 are\
    \ [RFC1918]-addressed\n       networks.  If addresses overlap, traffic may be\
    \ sent using the\n       wrong interface.  This issue is not related to receiving\
    \ multiple\n       configuration objects, but to an address overlap between\n\
    \       interfaces or attaching networks.\n   5.  M1 has resolved a Fully Qualified\
    \ Domain Name (FQDN) to a locally\n       valid IP address when connected to N1.\
    \  If the node loses\n       connection to N1, the node may try to connect, via\
    \ N2, to the\n       same IP address as earlier, but as the address was only locally\n\
    \       valid, connection setup fails.  Similarly, M1 may have received\n    \
    \   NXDOMAIN for an FQDN when connected to N1.  After detachment from\n      \
    \ N1, the node should not assume the FQDN continues to be\n       nonexistent\
    \ on N2.\n   6.  M1 requests a AAAA record from a DNS server on a network that\n\
    \       uses protocol translators and DNS64 [RFC6147].  If M1 receives a\n   \
    \    synthesized AAAA record, it is guaranteed to be valid only on the\n     \
    \  network from which it was learned.  If M1 uses synthesized AAAA\n       on\
    \ any other network interface, traffic may be lost, dropped, or\n       forwarded\
    \ to the wrong network.\n   Some networks require the user to authenticate on\
    \ a captive web\n   portal before providing Internet connectivity.  If this redirection\n\
    \   is achieved by modifying the DNS reply, specific issues may occur.\n   Consider\
    \ a MIF node (M1) with an active interface (I1) connected to a\n   network (N1),\
    \ which has its DNS server (S1), and another active\n   interface (I2) connected\
    \ to a network (N2), which has its DNS server\n   (S2).  Until the user has not\
    \ authenticated, S1 is configured to\n   respond to any A or AAAA record query\
    \ with the IP address of a\n   captive portal, so as to redirect web browsers\
    \ to an access control\n   portal web page.  This captive portal can be reached\
    \ only via I1.\n   When the user has authenticated to the captive portal, M1 can\
    \ resolve\n   an FQDN when connected to N1.  However, if the address is only\n\
    \   locally valid on N1, any of the issues described above may occur.\n   When\
    \ the user has not authenticated, any of the following situations\n   may occur:\n\
    \   1.  M1 keeps only one set of DNS server addresses from the received\n    \
    \   configuration objects and kept S2 address.  M1 sends the forward\n       DNS\
    \ query for a.example.com to S2.  S2 responds with the correct\n       answer,\
    \ R1.  M1 attempts to contact R1 by way of I1.  The\n       connection fails.\
    \  Or, the connection succeeds, bypassing the\n       security policy on N1, possibly\
    \ exposing the owner of M1 to\n       prosecution.\n   2.  M1 keeps only one set\
    \ of DNS server addresses from the received\n       configuration objects and\
    \ kept S1 address.  M1 sends the DNS\n       query for a.example.com to S1.  S1\
    \ provides the address of its\n       captive portal.  M1 attempts to contact\
    \ this IP address using I1.\n       The application fails to connect, resulting\
    \ in lack of service.\n       Or, the application succeeds in connecting but connects\
    \ to the\n       captive portal rather than the intended destination, resulting\
    \ in\n       lack of service (i.e., an IP connectivity check issue, as\n     \
    \  described in Section 4.4).\n"
- title: 4.2.  Node Routing
  contents:
  - "4.2.  Node Routing\n   Consider a MIF node (M1) with an active interface (I1)\
    \ connected to a\n   network (N1) and another active interface (I2) connected\
    \ to a network\n   (N2).  The user or the application is trying to reach an IP\
    \ address\n   (IP1).  Any of the following situations may occur:\n   1.  For IP1,\
    \ M1 has one default route (R1) via network (N1).  To\n       reach IP1, the M1\
    \ stack uses R1 and sends through I1.  If IP1 is\n       only reachable by N2,\
    \ IP1 is never reached or is not the right\n       target.\n   2.  For the IP1\
    \ address family, M1 has one default route (R1, R2) per\n       network (N1, N2).\
    \  IP1 is reachable by both networks, but the N2\n       path has better characteristics,\
    \ such as better round-trip time,\n       least cost, better bandwidth, etc. \
    \ These preferences could be\n       defined by the user, provisioned by the network\
    \ operator, or\n       otherwise appropriately configured.  The M1 stack uses\
    \ R1 and\n       tries to send through I1.  IP1 is reached, but the service would\n\
    \       be better via I2.\n   3.  For the IP1 address family, M1 has a default\
    \ route (R1), a\n       specific X.0.0.0/8 route R1B (for example, but not restricted\
    \ to\n       an [RFC1918] prefix) to N1, and a default route (R2) to N2.  IP1\n\
    \       is reachable by N2 only, but the prefix (X.0.0.0/8) is used in\n     \
    \  both networks.  Because of the most specific route R1B, the M1\n       stack\
    \ sends packets through I2, and those packets never reach the\n       target.\n\
    \   A MIF node may have multiple routes to a destination.  However, by\n   default,\
    \ it does not have any hint concerning which interface would\n   be the best to\
    \ use for that destination.  The first-hop selection may\n   leverage on local\
    \ routing policy, allowing some actors (e.g., network\n   operator or service\
    \ provider) to influence the routing table, i.e.,\n   make a decision regarding\
    \ which interface to use.  For instance, a\n   user on such a multihomed node\
    \ might want a local policy to influence\n   which interface will be used based\
    \ on various conditions.  Some\n   Standards Development Organizations (SDOs)\
    \ have defined policy-based\n   routing selection mechanisms.  For instance, the\
    \ Access Network\n   Discovery and Selection Function (ANDSF) [TS23.402] provides\n\
    \   inter-system routing policies to terminals with both a 3GPP interface\n  \
    \ and non-3GPP interfaces.  However, the routing selection may still be\n   difficult,\
    \ due to disjoint criteria as discussed in Section 3.8.\n   Moreover, information\
    \ required to make the right decision may not be\n   available.  For instance,\
    \ interfaces to a lower layer may not provide\n   all required hints concerning\
    \ the selection (e.g., information on\n   interface quality).\n   A node usually\
    \ has a node-scoped routing table.  However, a MIF node\n   is connected to multiple\
    \ provisioning domains; if each of these\n   domains pushes routing policies to\
    \ the node, then conflicts between\n   policies may happen, and the node has no\
    \ easy way to merge or\n   reconcile them.\n   On a MIF node, some source addresses\
    \ are not valid if used on some\n   interfaces.  For example, an [RFC1918] source\
    \ address might be\n   appropriate on the VPN interface but not on the public\
    \ interface of\n   the MIF node.  If the source address is not chosen appropriately,\n\
    \   then packets may be filtered in the path if source address filtering\n   is\
    \ in place ([RFC2827], [RFC3704]), and reply packets may never come\n   back to\
    \ the source.\n"
- title: 4.3.  Conflicting Policies
  contents:
  - "4.3.  Conflicting Policies\n   The distribution of configuration policies (e.g.,\
    \ address selection,\n   routing, DNS selection) to end nodes is being discussed\
    \ (e.g., ANDSF\n   in [TS23.402], [DHCPv6-ROUTE-OPTIONS]).  If implemented in\
    \ multiple\n   provisioning domains, such mechanisms may conflict and create issues\n\
    \   for the multihomed node.  Considering a MIF node (M1) with an active\n   interface\
    \ (I1) connected to a network (N1) and another active\n   interface (I2) connected\
    \ to a network (N2), the following conflicts\n   may occur:\n   1.  M1 receives\
    \ from both networks (N1 and N2) an update of its\n       default address selection\
    \ policy.  However, the policies are\n       specific to each network.  The policies\
    \ are merged by the M1\n       stack.  Based on the merged policy, the chosen\
    \ source address is\n       from N1, but packets are sent to N2.  The source address\
    \ is not\n       reachable from N2; therefore, the return packet is lost.  Merging\n\
    \       address selection policies may have important impacts on routing.\n  \
    \ 2.  A node usually has a node-scoped routing table.  However, each of\n    \
    \   the connected provisioning domains (N1 and N2) may push routing\n       policies\
    \ to the node; conflicts between policies may then happen,\n       and the node\
    \ has no easy way to merge or reconcile them.\n   3.  M1 receives from one of\
    \ the networks an update of its access\n       selection policy, e.g., via the\
    \ 3GPP/ANDSF [TS23.402].  However,\n       the policy is in conflict with the\
    \ local policy (e.g., user-\n       defined or default OS policy).  Assuming that\
    \ the network\n       provides a list of overloaded access networks, if the policy\
    \ sent\n       by the network is ignored, the packet may be sent to an access\n\
    \       network with poor quality of communication.\n"
- title: 4.4.  Session Management
  contents:
  - "4.4.  Session Management\n   Consider that a node has selected an interface and\
    \ managed to\n   configure it (i.e., the node obtained a valid IP address from\
    \ the\n   network).  However, Internet connectivity is not available.  The\n \
    \  problem could be due to the following reasons:\n   1.  The network requires\
    \ a web-based authentication (e.g., the access\n       network is a WiFi hot spot).\
    \  In this case, the user can only\n       access a captive portal.  For instance,\
    \ the network may perform\n       HTTP redirection or modify DNS behavior (Section\
    \ 4.1) until the\n       user has not authenticated.\n   2.  The IP interface\
    \ is configured as active, but Layer 2 is so poor\n       (e.g., poor radio condition)\
    \ that no Layer 3 traffic can succeed.\n   In this situation, the session manager\
    \ should be able to perform IP\n   connectivity checks before selecting an interface.\n\
    \   Session issues may also arise when the node discovers a new\n   provisioning\
    \ domain.  Consider a MIF node (M1) with an active\n   interface (I1) connected\
    \ to a network (N1) where an application is\n   running a TCP session.  A new\
    \ network (N2) becomes available.  If N2\n   is selected (e.g., because of better\
    \ quality of communication), M1\n   gets IP connectivity to N2 and updates the\
    \ routing table priority.\n   So, if no specific route to the correspondent node\
    \ is in place, and\n   if the node implements the weak host model [RFC1122], the\
    \ TCP\n   connection breaks as the next hop changes.  In order to continue\n \
    \  communicating with the correspondent node, M1 should try to reconnect\n   to\
    \ the server via N2.  In some situations, it could be preferable to\n   maintain\
    \ current sessions on N1 while new sessions start on N2.\n"
- title: 4.5.  Single Interface on Multiple Provisioning Domains
  contents:
  - "4.5.  Single Interface on Multiple Provisioning Domains\n   When a node using\
    \ a single interface is connected to multiple\n   networks, such as different\
    \ default routers, similar issues to those\n   described above will happen.  Even\
    \ with a single interface, a node\n   may wish to connect to more than one provisioning\
    \ domain: that node\n   may use more than one IP source address and may have more\
    \ than one\n   default router.  The node may want to access services that can\
    \ only\n   be reached using one of the provisioning domains.  In this case, it\n\
    \   needs to use the right outgoing source address and default gateway to\n  \
    \ reach that service.  In this situation, that node may also need to\n   use different\
    \ DNS servers to get domain names in those different\n   provisioning domains.\n"
- title: 5.  Underlying Problems and Causes
  contents:
  - "5.  Underlying Problems and Causes\n   This section lists the underlying problems,\
    \ and their causes, that\n   lead to the issues discussed in the previous section.\
    \  The problems\n   can be divided into five categories: 1) configuration, 2)\
    \ DNS\n   resolution, 3) routing, 4) address selection, and 5) session\n   management\
    \ and APIs.  They are shown below:\n   1.  Configuration.  In a MIF context, configuration\
    \ information\n       specific to a provisioning domain may be ignored because:\n\
    \       A.  Configuration objects (e.g., DNS servers, NTP servers) are\n     \
    \      node-scoped.  So, the IP stack is not able to maintain the\n          \
    \ mapping between configuration information and the\n           corresponding\
    \ provisioning domain.\n       B.  The same configuration objects (e.g., DNS server\
    \ addresses,\n           NTP server addresses) received from multiple provisioning\n\
    \           domains may be overwritten.\n       C.  Host implementations usually\
    \ do not keep separate network\n           configurations (such as DNS server\
    \ addresses) per\n           provisioning domain.\n   2.  DNS resolution\n   \
    \    A.  Some FQDNs can be resolvable only by sending queries to the\n       \
    \    right server (e.g., intranet services).  However, a DNS query\n         \
    \  could be sent to the wrong interface because DNS server\n           addresses\
    \ may be node-scoped.\n       B.  A DNS answer may be only valid on a specific\
    \ provisioning\n           domain, but applications may not be aware of that mapping\n\
    \           because DNS answers may not be kept with the provisioning\n      \
    \     from which the answer comes.\n   3.  Routing\n       A.  In the MIF context,\
    \ routing information could be specific to\n           each interface.  This could\
    \ lead to routing issues because,\n           in current node implementations,\
    \ routing tables are node-\n           scoped.\n       B.  Current node implementations\
    \ do not take into account the\n           Differentiated Services Code Point\
    \ or path characteristics in\n           the routing table.\n       C.  Even if\
    \ implementations take into account path\n           characteristics, the node\
    \ has no way to properly merge or\n           reconcile the provisioning domain\
    \ preferences.\n       D.  A node attached to multiple provisioning domains could\
    \ be\n           provided with incompatible selection policies.  If the\n    \
    \       different actors (e.g., user and network operator) are\n           allowed\
    \ to provide their own policies, the node has no way to\n           properly merge\
    \ or reconcile multiple selection policies.\n       E.  The problem of first-hop\
    \ selection could not be solved via\n           configuration (Section 3.7), and\
    \ may leverage on\n           sophisticated and specific mechanisms (Section 3.8).\n\
    \   4.  Address selection\n       A.  Default address selection policies may be\
    \ specific to their\n           corresponding provisioning domain.  However, a\
    \ MIF node may\n           not be able to manage address selection policies per\n\
    \           provisioning domain, because default address selection\n         \
    \  policies are node-scoped.\n       B.  On a MIF node, some source addresses\
    \ are not valid if used on\n           some interfaces or even on some default\
    \ routers on the same\n           interface.  In this situation, the source address\
    \ should be\n           taken into account in the routing table, but current node\n\
    \           implementations do not support such a feature.\n       C.  Source\
    \ address or address selection policies could be\n           specified by applications.\
    \  However, there are no advanced\n           APIs that support such applications.\n\
    \   5.  Session management and APIs\n       A.  Some implementations, especially\
    \ in the mobile world, have\n           higher-level APIs and/or session managers\
    \ (aka connection\n           managers) to address MIF issues.  These mechanisms\
    \ are not\n           standardized and do not necessarily behave the same way\n\
    \           across different OSes and/or platforms in the presence of MIF\n  \
    \         problems.  This lack of consistency is an issue for the user\n     \
    \      and operator, who could experience different session manager\n        \
    \   behaviors, depending on the terminal.\n       B.  Session managers usually\
    \ leverage on an interface to the link\n           layer to gather information\
    \ (e.g., lower-layer authentication\n           and encryption methods) and/or\
    \ for control purposes.\n           However, such a link-layer interface may not\
    \ provide all\n           required services (e.g., may not provide all information\
    \ that\n           would allow a proper interface selection).\n       C.  A MIF\
    \ node can support different session managers, which may\n           have contradictory\
    \ ways of solving MIF issues.  For instance,\n           because of different\
    \ selection algorithms, two different\n           session managers could select\
    \ different domains in the same\n           context.  Or, when dealing with different\
    \ domain selection\n           policies, one session manager may give precedence\
    \ to user\n           policy while another could favor mobile operator policy.\n\
    \       D.  When host routing is updated and if the weak host model is\n     \
    \      supported, ongoing TCP sessions may break if routes change\n          \
    \ for these sessions.  When TCP sessions should be bound to the\n           interface,\
    \ the strong host model should be used.\n       E.  When provided by different\
    \ actors (e.g., user, network,\n           default OS), policies may conflict\
    \ and, thus, need to be\n           reconciled at the host level.  Policy conflict\
    \ resolution may\n           impact other functions (e.g., naming, routing).\n\
    \       F.  Even if the node has managed to configure an interface,\n        \
    \   Internet connectivity could be unavailable.  This could be\n           due\
    \ to an access control function coming into play above\n           Layer 3, or\
    \ because of poor Layer 2 conditions.  An IP\n           connectivity check should\
    \ be performed before selecting an\n           interface.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The problems discussed in this document have\
    \ security implications,\n   such as when packets sent on the wrong interface\
    \ might be leaking\n   some confidential information.  Configuration parameters\
    \ from one\n   provisioning domain could cause a denial of service on another\n\
    \   provisioning domain (e.g., DNS issues).  Moreover, the undetermined\n   behavior\
    \ of IP stacks in the multihomed context brings additional\n   threats where an\
    \ interface on a multihomed node might be used to\n   conduct attacks targeted\
    \ to the networks connected by the other\n   interfaces.  Corrupted provisioning\
    \ domain selection policy may\n   induce a node to make decisions causing certain\
    \ traffic to be\n   forwarded to the attacker.\n   Additional security concerns\
    \ are raised by possible future mechanisms\n   that provide additional information\
    \ to the node so that it can make a\n   more intelligent decision with regards\
    \ to the issues discussed in\n   this document.  Such future mechanisms may themselves\
    \ be vulnerable\n   and may not be easy to protect in the general case.\n"
- title: 7.  Contributors
  contents:
  - "7.  Contributors\n   This document is a joint effort with the authors of the\
    \ MIF\n   requirements document [MIF-REQ].  This includes, in alphabetical\n \
    \  order: Jacni Qin, Carl Williams, and Peng Yang.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   The documents written prior to the existence of the\
    \ MIF working\n   group, and the discussions during the MIF Birds of a Feather\
    \ (BOF)\n   meeting and around the MIF charter scope on the mailing list, brought\n\
    \   very good input to the problem statement.  This document steals a lot\n  \
    \ of text from these discussions and initial documents (e.g.,\n   [MIF-REQ], [IP-MULTIPLE-CONN],\
    \ [MIF-DNS-SERVER-SELECT]).  Therefore,\n   the authors would like to acknowledge\
    \ the following people (in no\n   specific order), from whom some text has been\
    \ taken: Jari Arkko,\n   Keith Moore, Sam Hartman, George Tsirtsis, Scott Brim,\
    \ Ted Lemon,\n   Bernie Volz, Giyeong Son, Gabriel Montenegro, Julien Laganier,\
    \ Teemu\n   Savolainen, Christian Vogt, Lars Eggert, Margaret Wasserman, Hui\n\
    \   Deng, Ralph Droms, Ted Hardie, Christian Huitema, Remi Denis-\n   Courmont,\
    \ Alexandru Petrescu, Zhen Cao, Gaetan Feige, Telemaco Melia,\n   and Juan-Carlos\
    \ Zuniga.  Apologies to any contributors who have\n   inadvertently not been named.\n"
- title: 9.  Informative References
  contents:
  - "9.  Informative References\n   [ADDR-SELECT-SOL]\n              Matsumoto, A.,\
    \ Fujisaki, T., and R. Hiromi, \"Solution\n              approaches for address-selection\
    \ problems\", Work\n              in Progress, March 2010.\n   [DHCPv6-ROUTE-OPTIONS]\n\
    \              Dec, W., Ed., Mrugalski, T., Sun, T., and B. Sarikaya,\n      \
    \        \"DHCPv6 Route Options\", Work in Progress, September 2011.\n   [IP-MULTIPLE-CONN]\n\
    \              Hui, M. and H. Deng, \"Problem Statement and Requirement of\n \
    \             Simple IP Multi-homing of the Host\", Work in Progress,\n      \
    \        March 2009.\n   [LOGICAL-IF-SUPPORT]\n              Melia, T., Ed., and\
    \ S. Gundavelli, Ed., \"Logical Interface\n              Support for multi-mode\
    \ IP Hosts\", Work in Progress,\n              October 2011.\n   [MIF-DNS-SERVER-SELECT]\n\
    \              Savolainen, T., Kato, J., and T. Lemon, \"Improved DNS\n      \
    \        Server Selection for Multi-Interfaced Nodes\", Work\n              in\
    \ Progress, October 2011.\n   [MIF-REQ]  Yang, P., Seite, P., Williams, C., and\
    \ J. Qin,\n              \"Requirements on multiple Interface (MIF) of simple\
    \ IP\",\n              Work in Progress, February 2009.\n   [MIH]      IEEE, \"\
    IEEE Standard for Local and Metropolitan Area\n              Networks - Part 21:\
    \ Media Independent Handover Services\",\n              IEEE LAN/MAN Std. 802.21-2008,\
    \ January 2009.\n   [REFERRAL-PS]\n              Carpenter, B., Jiang, S., and\
    \ Z. Cao, \"Problem Statement\n              for Referral\", Work in Progress,\
    \ February 2011.\n   [RFC1122]  Braden, R., Ed., \"Requirements for Internet Hosts\
    \ -\n              Communication Layers\", STD 3, RFC 1122, October 1989.\n  \
    \ [RFC1136]  Hares, S. and D. Katz, \"Administrative Domains and Routing\n   \
    \           Domains: A model for routing in the Internet\", RFC 1136,\n      \
    \        December 1989.\n   [RFC1661]  Simpson, W., Ed., \"The Point-to-Point\
    \ Protocol (PPP)\",\n              STD 51, RFC 1661, July 1994.\n   [RFC1918]\
    \  Rekhter, Y., Moskowitz, B., Karrenberg, D., de Groot, G.,\n              and\
    \ E. Lear, \"Address Allocation for Private Internets\",\n              BCP 5,\
    \ RFC 1918, February 1996.\n   [RFC2131]  Droms, R., \"Dynamic Host Configuration\
    \ Protocol\",\n              RFC 2131, March 1997.\n   [RFC2474]  Nichols, K.,\
    \ Blake, S., Baker, F., and D. Black,\n              \"Definition of the Differentiated\
    \ Services Field (DS\n              Field) in the IPv4 and IPv6 Headers\", RFC\
    \ 2474,\n              December 1998.\n   [RFC2827]  Ferguson, P. and D. Senie,\
    \ \"Network Ingress Filtering:\n              Defeating Denial of Service Attacks\
    \ which employ IP Source\n              Address Spoofing\", BCP 38, RFC 2827,\
    \ May 2000.\n   [RFC3315]  Droms, R., Ed., Bound, J., Volz, B., Lemon, T., Perkins,\n\
    \              C., and M. Carney, \"Dynamic Host Configuration Protocol\n    \
    \          for IPv6 (DHCPv6)\", RFC 3315, July 2003.\n   [RFC3484]  Draves, R.,\
    \ \"Default Address Selection for Internet\n              Protocol version 6 (IPv6)\"\
    , RFC 3484, February 2003.\n   [RFC3542]  Stevens, W., Thomas, M., Nordmark, E.,\
    \ and T. Jinmei,\n              \"Advanced Sockets Application Program Interface\
    \ (API) for\n              IPv6\", RFC 3542, May 2003.\n   [RFC3704]  Baker, F.\
    \ and P. Savola, \"Ingress Filtering for Multihomed\n              Networks\"\
    , BCP 84, RFC 3704, March 2004.\n   [RFC4294]  Loughney, J., Ed., \"IPv6 Node\
    \ Requirements\", RFC 4294,\n              April 2006.\n   [RFC4861]  Narten,\
    \ T., Nordmark, E., Simpson, W., and H. Soliman,\n              \"Neighbor Discovery\
    \ for IP version 6 (IPv6)\", RFC 4861,\n              September 2007.\n   [RFC4960]\
    \  Stewart, R., Ed., \"Stream Control Transmission Protocol\",\n             \
    \ RFC 4960, September 2007.\n   [RFC5014]  Nordmark, E., Chakrabarti, S., and\
    \ J. Laganier, \"IPv6\n              Socket API for Source Address Selection\"\
    , RFC 5014,\n              September 2007.\n   [RFC5113]  Arkko, J., Aboba, B.,\
    \ Korhonen, J., Ed., and F. Bari,\n              \"Network Discovery and Selection\
    \ Problem\", RFC 5113,\n              January 2008.\n   [RFC5206]  Nikander, P.,\
    \ Henderson, T., Ed., Vogt, C., and J. Arkko,\n              \"End-Host Mobility\
    \ and Multihoming with the Host Identity\n              Protocol\", RFC 5206,\
    \ April 2008.\n   [RFC5220]  Matsumoto, A., Fujisaki, T., Hiromi, R., and K. Kanayama,\n\
    \              \"Problem Statement for Default Address Selection in\n        \
    \      Multi-Prefix Environments: Operational Issues of RFC 3484\n           \
    \   Default Rules\", RFC 5220, July 2008.\n   [RFC5221]  Matsumoto, A., Fujisaki,\
    \ T., Hiromi, R., and K. Kanayama,\n              \"Requirements for Address Selection\
    \ Mechanisms\", RFC 5221,\n              July 2008.\n   [RFC5245]  Rosenberg,\
    \ J., \"Interactive Connectivity Establishment\n              (ICE): A Protocol\
    \ for Network Address Translator (NAT)\n              Traversal for Offer/Answer\
    \ Protocols\", RFC 5245,\n              April 2010.\n   [RFC5533]  Nordmark, E.\
    \ and M. Bagnulo, \"Shim6: Level 3 Multihoming\n              Shim Protocol for\
    \ IPv6\", RFC 5533, June 2009.\n   [RFC5648]  Wakikawa, R., Ed., Devarapalli,\
    \ V., Tsirtsis, G., Ernst,\n              T., and K. Nagami, \"Multiple Care-of\
    \ Addresses\n              Registration\", RFC 5648, October 2009.\n   [RFC6147]\
    \  Bagnulo, M., Sullivan, A., Matthews, P., and I. van\n              Beijnum,\
    \ \"DNS64: DNS Extensions for Network Address\n              Translation from\
    \ IPv6 Clients to IPv4 Servers\", RFC 6147,\n              April 2011.\n   [RFC6182]\
    \  Ford, A., Raiciu, C., Handley, M., Barre, S., and J.\n              Iyengar,\
    \ \"Architectural Guidelines for Multipath TCP\n              Development\", RFC\
    \ 6182, March 2011.\n   [RFC6275]  Perkins, C., Ed., Johnson, D., and J. Arkko,\
    \ \"Mobility\n              Support in IPv6\", RFC 6275, July 2011.\n   [RFC6316]\
    \  Komu, M., Bagnulo, M., Slavov, K., and S. Sugimoto, Ed.,\n              \"\
    Sockets Application Program Interface (API) for\n              Multihoming Shim\"\
    , RFC 6316, July 2011.\n   [RFC6419]  Wasserman, M. and P. Seite, \"Current Practices\
    \ for\n              Multiple-Interface Hosts\", RFC 6419, November 2011.\n  \
    \ [SHIM6-APP-REFER]\n              Nordmark, E., \"Shim6 Application Referral\
    \ Issues\", Work\n              in Progress, July 2005.\n   [TS23.234]\n     \
    \         3GPP, \"3GPP system to Wireless Local Area Network (WLAN)\n        \
    \      interworking\", TS 23.234, December 2009.\n   [TS23.402]\n            \
    \  3GPP, \"Architecture enhancements for non-3GPP accesses\",\n              TS\
    \ 23.402, December 2010.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Marc Blanchet\n   Viagenie\n   2875 boul. Laurier, suite\
    \ D2-630\n   Quebec, QC  G1V 2M2\n   Canada\n   EMail: Marc.Blanchet@viagenie.ca\n\
    \   URI:   http://viagenie.ca\n   Pierrick Seite\n   France Telecom - Orange\n\
    \   4, rue du Clos Courtel, BP 91226\n   Cesson-Sevigne  35512\n   France\n  \
    \ EMail: pierrick.seite@orange.com\n"
