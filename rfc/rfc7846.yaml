- title: __initial_text__
  contents:
  - '            Peer-to-Peer Streaming Tracker Protocol (PPSTP)

    '
- title: Abstract
  contents:
  - "Abstract\n   This document specifies the base Peer-to-Peer Streaming Tracker\n\
    \   Protocol (PPSTP) version 1, an application-layer control (signaling)\n   protocol\
    \ for the exchange of meta information between trackers and\n   peers.  The specification\
    \ outlines the architecture of the protocol\n   and its functionality; it also\
    \ describes message flows, message\n   processing instructions, message formats,\
    \ formal syntax, and\n   semantics.  The PPSTP enables cooperating peers to form\
    \ content-\n   streaming overlay networks to support near real-time delivery of\n\
    \   structured media content (audio, video, and associated timed text and\n  \
    \ metadata), such as adaptive multi-rate, layered (scalable), and\n   multi-view\
    \ (3D) videos in live, time-shifted, and on-demand modes.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7846.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Terminology ................................................4\n  \
    \    1.2. Design Overview ............................................6\n    \
    \       1.2.1. Typical PPSP Session ................................7\n      \
    \     1.2.2. Example of a PPSP Session ...........................7\n   2. Protocol\
    \ Architecture and Functional View ......................10\n      2.1. Messaging\
    \ Model ...........................................10\n      2.2. Request/Response\
    \ Model ....................................10\n      2.3. State Machines and\
    \ Flows of the Protocol ..................12\n           2.3.1. Normal Operation\
    \ ...................................14\n           2.3.2. Error Conditions ...................................15\n\
    \   3. Protocol Specification .........................................16\n  \
    \    3.1. Presentation Language .....................................16\n    \
    \  3.2. Resource Element Types ....................................16\n      \
    \     3.2.1. Version ............................................16\n        \
    \   3.2.2. Peer Number Element ................................17\n          \
    \ 3.2.3. Swarm Action Element ...............................18\n           3.2.4.\
    \ Peer Information Elements ..........................18\n           3.2.5. Statistics\
    \ and Status Information Element ..........20\n      3.3. Requests and Responses\
    \ ....................................21\n           3.3.1. Request Types ......................................21\n\
    \           3.3.2. Response Types .....................................21\n  \
    \         3.3.3. Request Element ....................................22\n    \
    \       3.3.4. Response Element ...................................23\n      3.4.\
    \ PPSTP Message Element .....................................24\n   4. Protocol\
    \ Specification: Encoding and Operation .................24\n      4.1. Requests\
    \ and Responses ....................................25\n           4.1.1. CONNECT\
    \ Request ....................................25\n                  4.1.1.1. Example\
    \ ...................................28\n           4.1.2. FIND Request .......................................32\n\
    \                  4.1.2.1. Example ...................................33\n  \
    \         4.1.3. STAT_REPORT Request ................................34\n    \
    \              4.1.3.1. Example ...................................35\n      4.2.\
    \ Response Element in Response Messages .....................36\n      4.3. Error\
    \ and Recovery Conditions .............................37\n      4.4. Parsing\
    \ of Unknown Fields in message-body .................38\n   5. Operations and\
    \ Manageability ...................................38\n      5.1. Operational\
    \ Considerations ................................38\n           5.1.1. Installation\
    \ and Initial Setup .....................38\n           5.1.2. Migration Path\
    \ .....................................39\n           5.1.3. Requirements on Other\
    \ Protocols and\n                  Functional Components ..............................39\n\
    \           5.1.4. Impact on Network Operation ........................39\n  \
    \         5.1.5. Verifying Correct Operation ........................40\n    \
    \  5.2. Management Considerations .................................40\n      \
    \     5.2.1. Interoperability ...................................40\n        \
    \   5.2.2. Management Information .............................40\n          \
    \ 5.2.3. Fault Management ...................................41\n           5.2.4.\
    \ Configuration Management ...........................41\n           5.2.5. Accounting\
    \ Management ..............................41\n           5.2.6. Performance Management\
    \ .............................41\n           5.2.7. Security Management ................................41\n\
    \   6. Security Considerations ........................................42\n  \
    \    6.1. Authentication between Tracker and Peers ..................42\n    \
    \  6.2. Content Integrity Protection against Polluting\n           Peers/Trackers\
    \ ............................................43\n      6.3. Residual Attacks\
    \ and Mitigation ...........................43\n      6.4. Pro-incentive Parameter\
    \ Trustfulness ......................44\n      6.5. Privacy for Peers .........................................44\n\
    \   7. Guidelines for Extending PPSTP .................................45\n  \
    \    7.1. Forms of PPSTP Extension ..................................45\n    \
    \  7.2. Issues to Be Addressed in PPSTP Extensions ................47\n   8. IANA\
    \ Considerations ............................................48\n      8.1. MIME\
    \ Type Registry ........................................48\n      8.2. PPSTP Version\
    \ Number Registry .............................49\n      8.3. PPSTP Request Type\
    \ Registry ...............................49\n      8.4. PPSTP Error Code Registry\
    \ .................................50\n   9. References .....................................................51\n\
    \      9.1. Normative References ......................................51\n  \
    \    9.2. Informative References ....................................53\n   Acknowledgments\
    \ ...................................................54\n   Authors' Addresses\
    \ ................................................55\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Peer-to-Peer Streaming Protocol (PPSP) is composed of\
    \ two\n   protocols: the Tracker Protocol (defined in this document) and the\n\
    \   Peer Protocol (defined in [RFC7574]).  [RFC6972] specifies that the\n   Tracker\
    \ Protocol should standardize the messages between PPSP peers\n   and PPSP trackers\
    \ and also defines the requirements.\n   The Peer-to-Peer Streaming Tracker Protocol\
    \ (PPSTP) provides\n   communication between trackers and peers by which peers\
    \ send meta\n   information to trackers, report streaming status, and obtain peer\n\
    \   lists from trackers.\n   The PPSP architecture requires PPSP peers to be able\
    \ to communicate\n   with a tracker in order to participate in a particular streaming\n\
    \   content swarm.  This centralized tracker service is used by PPSP\n   peers\
    \ for acquisition of peer lists.\n   The signaling and the media data transfer\
    \ between PPSP peers is not\n   in the scope of this specification.\n   This document\
    \ introduces a base Peer-to-Peer Streaming Tracker\n   Protocol (PPSTP) that satisfies\
    \ the requirements in [RFC6972].\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ [RFC2119].\n   absolute time: Expressed as ISO 8601 timestamps, using zero UTC\n\
    \      offset.  Fractions of a second may be indicated, for example,\n      December\
    \ 25, 2010 at 14h56 and 20.25 seconds in basic format is\n      20101225T145620.25Z\
    \ and in extended format is\n      2010-12-25T14:56:20.25Z.\n   chunk: An uniformly\
    \ atomic subset of the resource that constitutes\n      the basic unit of data\
    \ organized in P2P streaming for storage,\n      scheduling, advertisement, and\
    \ exchange among peers.\n   chunk ID: A unique resource identifier for a chunk.\
    \  The identifier\n      type depends on the addressing scheme used, i.e., an\
    \ integer, an\n      HTTP-URL, and possibly a byte-range.  The identifier type\
    \ is\n      described in the Media Presentation Description (MPD).\n   LEECH:\
    \ The peers in a swarm that download content from other peers as\n      well as\
    \ contribute downloaded content with others.  A LEECH should\n      join the swarm\
    \ with uncompleted media content.\n   MPD (Media Presentation Description): Formalized\
    \ description for a\n      media presentation, i.e., describes the structure of\
    \ the media,\n      namely, the representations, the codecs used, the chunks,\
    \ and the\n      corresponding addressing scheme.\n   peer: A participant in a\
    \ P2P streaming system that not only receives\n      streaming content, but also\
    \ caches and streams streaming content\n      to other participants.\n   peer\
    \ ID: The identifier of a peer such that other peers, or the\n      Tracker, can\
    \ refer to the peer using its ID.  The peer ID is\n      mandatory, can take the\
    \ form of a universally unique identifier\n      (UUID), defined in [RFC4122],\
    \ and can be bound to a network\n      address of the peer, i.e., an IP address\
    \ or a uniform resource\n      identifier/locator (URI/URL) that uniquely identifies\
    \ the\n      corresponding peer in the network.  The peer ID and any required\n\
    \      security certificates are obtained from an offline enrollment\n      server.\n\
    \   peer list: A list of peers that are in the same swarm maintained by\n    \
    \  the tracker.  A peer can fetch the peer list of a swarm from the\n      tracker.\n\
    \   PPSP: The abbreviation of Peer-to-Peer Streaming Protocol.\n   PPSTP: The\
    \ abbreviation of Peer-to-Peer Streaming Tracker Protocol.\n   SEEDER: The peers\
    \ in a swarm that only contribute the content they\n      have to others.  A SEEDER\
    \ should join the swarm with complete\n      media content.\n   service portal:\
    \ A logical entity typically used for client enrollment\n      and for publishing,\
    \ searching, and retrieving content information.\n      It is usually located\
    \ in a server of a content provider.\n   swarm: A group of peers that exchange\
    \ data to distribute chunks of\n      the same content (e.g., video/audio program,\
    \ digital file, etc.)\n      at a given time.\n   swarm ID: The identifier of\
    \ a swarm containing a group of peers\n      sharing common streaming content.\
    \  The swarm ID may use a\n      universally unique identifier (UUID), e.g., a\
    \ 64- or 128-bit datum\n      to refer to the content resource being shared among\
    \ peers.\n   tracker: A directory service that maintains a list of peers\n   \
    \   participating in a specific audio/video channel or in the\n      distribution\
    \ of a streaming file.  It is a logical component that\n      can be deployed\
    \ in a centralized or distributed way.\n   transaction ID: The identifier of a\
    \ request from the peer to the\n      tracker.  It is used to disambiguate responses\
    \ that may arrive in\n      a different order than the corresponding requests.\n"
- title: 1.2.  Design Overview
  contents:
  - "1.2.  Design Overview\n   The functional entities related to peer-to-peer streaming\
    \ protocols\n   are the Client Media Player, the service portal, the tracker,\
    \ and the\n   peers.  The complete description of Client Media Player and service\n\
    \   portal is not discussed here, as they are not in the scope of the\n   specification.\
    \  The functional entities directly involved in PPSTP\n   are trackers and peers\
    \ (which may support different capabilities).\n   The Client Media Player is a\
    \ logical entity providing direct\n   interface to the end user at the client\
    \ device and includes the\n   functions to select, request, decode, and render\
    \ content.  The Client\n   Media Player may interface with the local peer application\
    \ using the\n   standard format for HTTP request and response messages [RFC7230].\n\
    \   The service portal is a logical entity typically used for client\n   enrollment\
    \ and for publishing, searching, and retrieving content\n   information.\n   A\
    \ peer corresponds to a logical entity (typically in a user device)\n   that actually\
    \ participates in sharing media content.  Peers are\n   organized in various swarms;\
    \ each swarm corresponds to the group of\n   peers streaming certain content at\
    \ any given time.\n   A tracker is a logical entity that maintains the lists of\
    \ peers\n   storing chunks for a specific live media channel or on-demand media\n\
    \   streaming content, answers queries from peers, and collects\n   information\
    \ on the activity of peers.  While a tracker may have an\n   underlying implementation\
    \ consisting of more than one physical node,\n   logically, the tracker can most\
    \ simply be thought of as a single\n   element; in this document, it will be treated\
    \ as a single logical\n   entity.  Communication between these physical nodes\
    \ to present them\n   as a single tracker to peers is not considered in PPSTP,\
    \ which is a\n   protocol between a tracker and a peer.\n   PPSTP is not used\
    \ to exchange actual content data (either on demand\n   or live streaming) with\
    \ peers, but information about which peers can\n   provide the content.  PPSTP\
    \ is not designed for applications for\n   which in-sync reception is needed.\n"
- title: 1.2.1.  Typical PPSP Session
  contents:
  - "1.2.1.  Typical PPSP Session\n   When a peer wants to receive streaming of selected\
    \ content (LEECH\n   mode):\n   1. Peer connects to a tracker and joins a swarm.\n\
    \   2. Peer acquires a list of other peers in the swarm from the tracker.\n  \
    \ 3. Peer exchanges its content availability with the peers on the\n      obtained\
    \ peer list.\n   4. Peer identifies the peers with desired content.\n   5. Peer\
    \ requests content from the identified peers.\n   When a peer wants to share streaming\
    \ content (SEEDER mode) with other\n   peers:\n   1. Peer connects to a tracker.\n\
    \   2. Peer sends information to the tracker about the swarms it belongs\n   \
    \   to (joined swarms).\n   3. Peer waits for other peers in LEECH mode to connect\
    \ with it (see\n      steps 3-5 in the previous list).\n   After having been disconnected\
    \ due to some termination conditions or\n   user controls, a peer can resume previous\
    \ activity by connecting and\n   re-joining the corresponding swarm(s).\n"
- title: 1.2.2.  Example of a PPSP Session
  contents:
  - "1.2.2.  Example of a PPSP Session\n   In order to be able to bootstrap in the\
    \ P2P network, a peer must\n   first obtain a peer ID and any required security\
    \ certificates or\n   authorization tokens from an enrollment service (end-user\n\
    \   registration).  The peer ID MUST be unique (see the definition of\n   \"peer\
    \ ID\" in Section 1.1); however, the representation of the peer ID\n   is not\
    \ considered in this document.\n   +--------+      +--------+     +--------+ \
    \   +---------+  +--------+\n   | Player |      | Peer_1 |     | Portal |    |\
    \ Tracker |  | Peer_2 |\n   +--------+      +--------+     +--------+    +---------+\
    \  +--------+\n       |                |               |              |      \
    \     |\n   (a) |--Page request----------------->|              |           |\n\
    \       |<--------------Page with links--|              |           |\n      \
    \ |--Select stream (MPD request)-->|              |           |\n       |<--------------------OK+MPD(x)--|\
    \              |           |\n   (b) |--Start/Resume->|--CONNECT(join x)------------>|\
    \           |\n       |<-----------OK--|<----------------OK+Peerlist--|      \
    \     |\n       |                |                              |           |\n\
    \       |--Get(chunk)--->|<---------- (Peer protocol) ------------->|\n      \
    \ |<--------chunk--|<---------------------------------chunks--|\n       :    \
    \            :               :              :           :\n       |          \
    \      |--STAT_REPORT---------------->|           |\n       |                |<-------------------------OK--|\
    \           |\n       :                :               :              :      \
    \     :\n       |                |--FIND----------------------->|           |\n\
    \       |                |<----------------OK+Peerlist--|           |\n      \
    \ :                :               :              :           :\n       |--Get(chunk)--->|<----------\
    \ (Peer protocol) ------------->|\n       |<--------chunk--|<---------------------------------chunks--|\n\
    \       :                :               :              :           :\n      \
    \  Figure 1: A Typical PPSP Session for Streaming Content\n   To join an existing\
    \ P2P streaming service and to participate in\n   content sharing, a peer must\
    \ first locate a tracker.\n   As illustrated in Figure 1, a P2P streaming session\
    \ may be initiated\n   starting at point (a), with the Client Media Player browsing\
    \ for the\n   desired content in order to request it (to the local Peer_1 in the\n\
    \   figure), or resume a previously initiated stream, but starting at\n   point\
    \ (b).  For this example, the Peer_1 is in mode LEECH.\n   At point (a) in Figure\
    \ 1, the Client Media Player accesses the portal\n   and selects the content of\
    \ interest.  The portal returns the Media\n   Presentation Description (MPD) file\
    \ that includes information about\n   the address of one or more trackers (which\
    \ can be grouped by tiers of\n   priority) that control the swarm x for that media\
    \ content (e.g.,\n   content x).\n   With the information from the MPD, the Client\
    \ Media Player is able to\n   trigger the start of the streaming session, requesting\
    \ to the local\n   Peer_1 the chunks of interest.\n   The PPSP streaming session\
    \ is then started (or resumed) at Peer_1 by\n   sending a PPSTP CONNECT message\
    \ to the tracker in order to join swarm\n   x.  The tracker will then return the\
    \ OK response message containing a\n   peer list, if the CONNECT message is successfully\
    \ accepted.  From\n   that point, every chunk request is addressed by Peer_1 to\
    \ its\n   neighbors (Peer_2 in Figure 1) using a peer protocol, e.g.,\n   [RFC7574],\
    \ returning the received chunks to the Client Media Player.\n   Once connected,\
    \ Peer_1 needs to periodically report its status and\n   statistics data to the\
    \ tracker using a STAT_REPORT message.\n   If Peer_1 needs to refresh its neighborhood\
    \ (for example, due to\n   churn), it will send a PPSTP FIND message (with the\
    \ desired scope) to\n   the tracker.\n   Peers that are only SEEDERs (i.e., serving\
    \ content to other peers),\n   as are the typical cases of service provider P2P\
    \ edge caches and/or\n   media servers, trigger their P2P streaming sessions for\
    \ content x, y,\n   z...  (Figure 2), not from Media Player signals, but from\
    \ some\n   \"Start\" activation signal received from the service provider\n  \
    \ provisioning mechanism.  In this particular case, the peer starts or\n   resumes\
    \ all its streaming sessions just by sending a PPSTP CONNECT\n   message to the\
    \ tracker (Figure 2), in order to \"join\" all the\n   requested swarms.\n   Periodically,\
    \ the peer also reports its status and statistics data to\n   the tracker using\
    \ a PPSTP STAT_REPORT message.\n              +---------+                    \
    \ +---------+\n              |  SEEDER |                     | Tracker |\n   \
    \           +---------+                     +---------+\n                   |\
    \                               |\n            Start->|--CONNECT (join x,y,z)-------->|\n\
    \                   |<--------------------------OK--|\n                   :  \
    \                             :\n                   |                        \
    \       |\n                   |--STAT_REPORT----------------->|\n            \
    \       |<--------------------------Ok--|\n                   :              \
    \                 :\n                   |                               |\n  \
    \                 |--STAT_REPORT----------------->|\n                   |<--------------------------Ok--|\n\
    \                   :                               :\n     Figure 2: A Typical\
    \ PPSP Session for a Streaming SEEDER\n   The specification of the mechanisms\
    \ used by the Client Media Player\n   (or provisioning process) and the peer to\
    \ signal start/resume of\n   streams, request media chunks, and obtain a peer\
    \ ID, security\n   certificates, or tokens is not in the scope of this document.\n"
- title: 2.  Protocol Architecture and Functional View
  contents:
  - "2.  Protocol Architecture and Functional View\n   PPSTP is designed with a layered\
    \ approach i.e., a PPSTP\n   Request/Response layer, a Message layer, and a Transport\
    \ layer (see\n   Figure 3).\n                 +------------------------+\n   \
    \              |      Application       |\n                 +------------------------+\n\
    \                 |(PPSTP) Request/Response|\n                 |------------------------|\n\
    \                 |   (HTTP) Message       |\n                 +------------------------+\n\
    \                 |       Transport        |\n                 +------------------------+\n\
    \             Figure 3: Abstract Layering of PPSTP\n   The PPSTP Request/Response\
    \ layer deals with the interactions between\n   tracker and peers using request\
    \ and response messages.\n   The Message layer deals with the framing format for\
    \ encoding and\n   transmitting data through the underlying transport protocol,\
    \ as well\n   as the asynchronous nature of the interactions between tracker and\n\
    \   peers.\n   The Transport layer is responsible for the actual transmission\
    \ of\n   requests and responses over network transports, including the\n   determination\
    \ of the connection to use for a request or response\n   message when using TCP\
    \ or Transport Layer Security (TLS) [RFC5246]\n   over it.\n"
- title: 2.1.  Messaging Model
  contents:
  - "2.1.  Messaging Model\n   The messaging model of PPSTP aligns with HTTP, which\
    \ is currently in\n   version 1.1 [RFC7230], and the semantics of its messages.\
    \  PPSTP is\n   intended to also support future versions of HTTP.\n"
- title: 2.2.  Request/Response Model
  contents:
  - "2.2.  Request/Response Model\n   PPSTP uses a design like REST (Representational\
    \ State Transfer) with\n   the goal of leveraging current HTTP implementations\
    \ and\n   infrastructure, as well as familiarity with existing REST-like\n   services\
    \ in popular use.  PPSTP messages use the UTF-8 character set\n   [RFC3629] and\
    \ are either requests from peers to a tracker service or\n   responses from a\
    \ tracker service to peers.  The request and response\n   semantics are carried\
    \ as entities (header and body) in messages that\n   correspond to either HTTP\
    \ request methods or HTTP response codes,\n   respectively.\n   PPSTP uses the\
    \ HTTP POST method to send parameters in requests.\n   PPSTP messages use JavaScript\
    \ Object Notation (JSON) [RFC7159] to\n   encode message bodies.\n   Peers send\
    \ requests to trackers.  Trackers send a single response for\n   each request\
    \ though both requests and responses can be subject to\n   fragmentation of messages\
    \ in transport.\n   The request messages of the base protocol are listed in Table\
    \ 1:\n             +------------------------------+\n             | PPSTP Request\
    \ Messages       |\n             +------------------------------+\n          \
    \   | CONNECT                      |\n             | FIND                    \
    \     |\n             | STAT_REPORT                  |\n             +------------------------------+\n\
    \                Table 1: Request Messages\n   CONNECT:\n      This request message\
    \ is used when a peer registers in the tracker\n      to notify it about participation\
    \ in the named swarm(s).  If the\n      peer is already registered in the tracker,\
    \ this request message\n      simply notifies the tracker about participation\
    \ in the named\n      swarm(s).  The tracker records the peer ID, connect-time\n\
    \      (referenced to the absolute time), peer IP addresses (and\n      associated\
    \ location information), link status, and peer mode for\n      the named swarm(s).\
    \  The tracker also changes the content\n      availability of the valid named\
    \ swarm(s), i.e., changes the peer's\n      lists of the corresponding swarm(s)\
    \ for the requesting peer ID.\n      On receiving a CONNECT message, the tracker\
    \ first checks the peer\n      mode type (SEEDER/LEECH) for the specified swarm(s)\
    \ and then\n      decides the next steps (see Section 4.1 for more details).\n\
    \   FIND:\n      This request message is used by peers to request a list of peers\n\
    \      active in the named swarm from the tracker whenever needed.  On\n     \
    \ receiving a FIND message, the tracker finds the peers listed in\n      the content\
    \ status of the specified swarm that can satisfy the\n      requesting peer's\
    \ requirements and returns the list to the\n      requesting peer.  To create\
    \ the peer list, the tracker may take\n      peer status, capabilities, and peer\
    \ priority into consideration.\n      Peer priority may be determined by network\
    \ topology preference,\n      operator policy preference, etc.\n   STAT_REPORT:\n\
    \      This request message is used to allow an active peer to send\n      status\
    \ (and optionally statistic data) to the tracker to signal\n      continuing activity.\
    \  This request message MUST be sent\n      periodically to the tracker while\
    \ the peer is active in the\n      system.\n"
- title: 2.3.  State Machines and Flows of the Protocol
  contents:
  - "2.3.  State Machines and Flows of the Protocol\n   The state machine for the\
    \ tracker is very simple, as shown in Figure\n   4.  Peer ID registrations represent\
    \ a dynamic piece of state\n   maintained by the network.\n            --------------------------------------------\n\
    \           /                                            \\\n          |  +------------+\
    \    +=========+    +======+   |\n           \\-| TERMINATED |<---| STARTED |<---|\
    \ INIT |<-/\n             +------------+    +=========+    +======+\n        \
    \      (Transient)                         \\- (start tracker)\n             \
    \   Figure 4:  Tracker State Machine\n   When there are no peers connected in\
    \ the tracker, the state machine\n   is in INIT state.\n   When the first peer\
    \ connects to register with its peer ID, the state\n   machine moves from INIT\
    \ to STARTED.  As long as there is at least one\n   active registration of a peer\
    \ ID, the state machine remains in\n   STARTED state.  When the last peer ID is\
    \ removed, the state machine\n   transitions to TERMINATED.  From there, it immediately\
    \ transitions\n   back to INIT state.  Because of this, TERMINATED state is transient.\n\
    \   Once in STARTED state, each peer is instantiated (per peer ID) in the\n  \
    \ tracker state machine with a dedicated transaction state machine\n   (Figure\
    \ 5), which is deleted when the peer ID is removed.\n                --------------------------------------------\n\
    \               /                                            \\\n            \
    \  |  +------------+    +=========+    +======+   |\n               \\-| TERMINATED\
    \ |<---| STARTED |<---| INIT |<-/\n                 +------------+    +=========+\
    \    +======+\n                  (Transient)           | (1)        \\- (start\
    \ tracker)\n                                        V\n                      +-----------+\
    \   +-------+  rcv CONNECT\n          (Transient) | TERMINATE |   | START |  ---------------\
    \ (1)\n                      +-----------+   +-------+  strt init timer\n    rcv\
    \ FIND        (B)      ^            |\n    rcv STAT_REPORT (B)      |        \
    \    |\n    on registration error (B)|            v\n    on action error (A) \
    \     |   +------------+\n    ----------------         +<--| PEER       | (Transient)\n\
    \    stop init timer          |   | REGISTERED |\n    snd error              \
    \  |   +------------+\n                             |         |\n    on timeout\
    \       (D)     |         |   process swarm actions\n    ----------------    \
    \     |         |   --------------------- (2)\n    stop track timer         |\
    \         |   snd OK (PeerList)\n    clean peer info          |        /    stop\
    \ init timer\n    del registration         |       /     strt track timer\n  \
    \                           |      /\n                             |     |\n \
    \                            |     |             rcv FIND\n    STAT_REPORT ERR(C)\
    \        \\    |     ----    --------------- (3)\n    FIND ERR(C)      ----  \
    \    \\   |   /      \\  snd OK (PeerList)\n    CONNECT ERR(C) /      \\     |\
    \  |  |        | rst track timer\n    rcv CONNECT   |  (4)   |    |  |  |    \
    \    |\n    -----------   |        v    |  v  v        | rcv STAT_REPORT\n   \
    \ snd OK         \\     +==============+     /  --------------- (3)\n    rst track\
    \ timer  ----|   TRACKING   |----    snd OK response\n    snd error (C)      \
    \  +==============+        rst track timer\n    Figure 5:  \"Per-Peer-ID\" State\
    \ Machine and Flow Diagram\n   Unlike the tracker state machine, which exists\
    \ even when no peer IDs\n   are registered, the \"per-Peer-ID\" State Machine\
    \ is instantiated only\n   when the peer ID starts registration in the tracker\
    \ and is deleted\n   when the peer ID is de-registered/removed.  This allows for\
    \ an\n   implementation optimization whereby the tracker can destroy the\n   objects\
    \ associated with the \"per-Peer-ID\" State Machine once it\n   enters the TERMINATE\
    \ state (Figure 5).\n   When a new peer ID is added, the corresponding \"per-Peer-ID\"\
    \ State\n   Machine is instantiated, and it moves into the PEER REGISTERED state.\n\
    \   Because of that, the START state here is transient.\n   When the peer ID is\
    \ no longer bound to a registration, the \"per-Peer-\n   ID\" State Machine moves\
    \ to the TERMINATE state, and the state machine\n   is destroyed.\n   During the\
    \ lifetime of streaming activity of a peer, the instantiated\n   \"per-Peer-ID\"\
    \ State Machine progresses from one state to another in\n   response to various\
    \ events.  The events that may potentially advance\n   the state include:\n  \
    \ o  Reception of CONNECT, FIND, and STAT_REPORT messages\n   o  Timeout events\n\
    \   The state diagram in Figure 5 illustrates state changes, together\n   with\
    \ the causing events and resulting actions.  Specific error\n   conditions are\
    \ not shown in the state diagram.\n"
- title: 2.3.1.  Normal Operation
  contents:
  - "2.3.1.  Normal Operation\n   For normal operation, the process consists of the\
    \ following steps:\n   1) When a peer wants to access the system, it needs to\
    \ register with\n      a tracker by sending a CONNECT message asking for the swarm(s)\
    \ it\n      wants to join.  This request from a new peer ID triggers the\n   \
    \   instantiation in the tracker of a \"per-Peer-ID\" State Machine.  In\n   \
    \   the START state of the new \"per-Peer-ID\" State Machine, the\n      tracker\
    \ registers the peer ID and associated information (IP\n      addresses), starts\
    \ the \"init timer\", and moves to PEER REGISTERED\n      state.\n   2) In PEER\
    \ REGISTERED state, if the peer ID is valid, the tracker\n      either:\n    \
    \  a) processes the requested action(s) for the valid swarm\n         information\
    \ contained in the CONNECT requests, and if\n         successful, the tracker\
    \ stops the \"init timer\", starts the\n         \"track timer\", and sends the\
    \ response to the peer (the response\n         may contain the appropriate list\
    \ of peers for the joining\n         swarm(s), as detailed in Section 4.1), or\n\
    \      b) moves the valid FIND request to TRACKING state.\n   3) In TRACKING state,\
    \ STAT_REPORT or FIND messages received from that\n      peer ID will reset the\
    \ \"track timer\", and the tracker responds to\n      the requests with the following,\
    \ respectively:\n      a) a successful condition, or\n      b) a successful condition\
    \ containing the appropriate list of peers\n         for the named swarm (Section\
    \ 4.2).\n   4) While in TRACKING state, a CONNECT message received from that peer\n\
    \      ID with valid swarm action information (Section 4.1.1) resets the\n   \
    \   \"track timer\", and the tracker responds to the request with a\n      successful\
    \ condition.\n"
- title: 2.3.2.  Error Conditions
  contents:
  - "2.3.2.  Error Conditions\n   Peers are required not to generate protocol elements\
    \ that are\n   invalid.  However, several situations may lead to abnormal conditions\n\
    \   in the interaction with the tracker.  These situations may be related\n  \
    \ to peer malfunction or communication errors.  The tracker reacts to\n   these\
    \ abnormal situations depending on its current state related to a\n   peer ID,\
    \ as follows:\n   A) In PEER REGISTERED state, when a CONNECT request only contains\n\
    \      invalid swarm actions (Section 4.1.1), the tracker responds with a\n  \
    \    PPSTP error code as specified in Section 4.3, deletes the\n      registration,\
    \ and transitions to TERMINATE state for that peer ID.\n      The state machine\
    \ is destroyed.\n   B) In PEER REGISTERED state, if the peer ID is considered\
    \ invalid (in\n      the case of a CONNECT request or in the case of FIND or\n\
    \      STAT_REPORT requests received from an unregistered peer ID), the\n    \
    \  tracker responds with either a 06 (Authentication Required)\n      error_code\
    \ or a 03 (Forbidden Action) error_code as described in\n      Section 4.3 and\
    \ transitions to TERMINATE state for that peer ID.\n      The state machine is\
    \ destroyed.\n   C) In TRACKING state (while the \"track timer\" has not expired),\n\
    \      receiving a CONNECT message from a peer ID with invalid swarm\n      actions\
    \ (Section 4.1.1) or receiving a FIND/STAT_REPORT message\n      from a peer ID\
    \ with an invalid swarm ID is considered an error\n      condition.  The tracker\
    \ responds with the corresponding error code\n      (described in Section 4.3).\n\
    \   D) In TRACKING state, without receiving messages from the peer on\n      timeout\
    \ (the \"track timer\" has expired), the tracker cleans all\n      the information\
    \ associated with the peer ID in all swarms it was\n      joined, deletes the\
    \ registration, and transitions to TERMINATE\n      state for that peer ID.  The\
    \ state machine is destroyed.\n   NOTE:  These situations may correspond to malfunctions\
    \ at the peer or\n   to malicious conditions.  As a preventive measure, the tracker\n\
    \   proceeds to TERMINATE state for that peer ID.\n"
- title: 3.  Protocol Specification
  contents:
  - '3.  Protocol Specification

    '
- title: 3.1.  Presentation Language
  contents:
  - "3.1.  Presentation Language\n   PPSTP uses a REST-like design, encoding the requests\
    \ and responses\n   using JSON [RFC7159].  For a generalization of the definition\
    \ of\n   protocol elements and fields, as well as their types and structures,\n\
    \   this document uses a C-style notation, similar to the presentation\n   language\
    \ used to define TLS [RFC5246].\n   A JSON object consists of name/value pairs\
    \ with the grammar specified\n   in [RFC7159].  In this document, comments begin\
    \ with \"//\", and the\n   \"ppsp_tp_string_t\" and \"ppsp_tp_integer_t\" types\
    \ are used to indicate\n   the JSON string and number, respectively.  Optional\
    \ fields are\n   enclosed in \"[ ]\" brackets.  An array is indicated by two numbers\
    \ in\n   angle brackets, <min..max>, where \"min\" indicates the minimal number\n\
    \   of values and \"max\" the maximum.  An \"*\" is used to denote a no\n   upper-bound\
    \ value for \"max\".\n"
- title: 3.2.  Resource Element Types
  contents:
  - "3.2.  Resource Element Types\n   This section details the format of PPSTP resource\
    \ element types.\n"
- title: 3.2.1.  Version
  contents:
  - "3.2.1.  Version\n   For both requests and responses, the version of PPSTP being\
    \ used MUST\n   be indicated by the attribute version, defined as follows:\n \
    \     ppsp_tp_integer_t ppsp_tp_version_t = 1\n   The defined value for ppsp_tp_version_t\
    \ is listed in Table 2.\n     +----------------------------------------------------------+\n\
    \     | ppsp_tp_version_t |  Description                         |\n     +----------------------------------------------------------+\n\
    \     | 0                 |  Reserved                            |\n     | 1 \
    \                |  PPSTP version 1                     |\n     | 2-255      \
    \       |  Unassigned                          |\n     +----------------------------------------------------------+\n\
    \                Table 2: PPSTP Version Numbers\n"
- title: 3.2.2.  Peer Number Element
  contents:
  - "3.2.2.  Peer Number Element\n   The peer number element is a scope selector optionally\
    \ present in\n   CONNECT and FIND requests.\n   This element contains the attribute\
    \ peer_count to indicate the\n   maximum number of peers in the returned peer\
    \ list.  peer_count should\n   be less than 30 in this specification.  The other\
    \ 4 attributes, i.e.,\n   ability_nat, concurrent_links, online_time, and upload_bandwidth\
    \ may\n   also be contained in this element to inform the tracker the status of\n\
    \   the peer so that the tracker could return some eligible peers based\n   on\
    \ the implementing rules set by the service providers:\n   o  ability_nat is used\
    \ to indicate the preferred NAT traversal\n      situation of the requesting peer.\n\
    \   o  concurrent_links means the number of P2P links the peer currently\n   \
    \   has.\n   o  online_time represents online duration time of the peer.  The\
    \ unit\n      is second.\n   o  upload_bandwidth is the maximum upload bandwidth\
    \ capability of the\n      peer.  The unit is Kbps.\n   The scope selector element\
    \ and its attributes are defined as follows:\n      Object {\n              ppsp_tp_integer_t\
    \   peer_count;\n              [ppsp_tp_string_t   ability_nat = \"NO_NAT\"\n\
    \                                              | \"STUN\"\n                  \
    \                            | \"TURN\";]\n              [ppsp_tp_integer_t  \
    \ concurrent_links;]\n              [ppsp_tp_integer_t   online_time;]\n     \
    \         [ppsp_tp_integer_t   upload_bandwidth;]\n      } ppsp_tp_peer_num_t;\n"
- title: 3.2.3.  Swarm Action Element
  contents:
  - "3.2.3.  Swarm Action Element\n   The swarm action element identifies the action(s)\
    \ to be taken in the\n   named swarm(s) as well as the corresponding peer mode\
    \ (if the peer is\n   LEECH or SEEDER in that swarm).\n      Object {\n      \
    \        ppsp_tp_string_t  swarm_id;   //swarm ID\n              ppsp_tp_string_t\
    \  action = \"JOIN\"\n                                        |\"LEAVE\"; // Action\
    \ type of\n                                                  // the CONNECT\n\
    \                                                  // message\n              ppsp_tp_string_t\
    \  peer_mode = \"SEEDER\"\n                                          | \"LEECH\"\
    ; // Mode of the peer\n                                                     //\
    \ participating\n                                                     // in this\
    \ swarm\n      } ppsp_tp_swarm_action_t;\n"
- title: 3.2.4.  Peer Information Elements
  contents:
  - "3.2.4.  Peer Information Elements\n   The peer information elements provide network\
    \ identification\n   information of peers.  A peer information element consists\
    \ of a peer\n   identifier and the IP-related addressing information.\n      Object\
    \ {\n              ppsp_tp_string_t    peer_id;\n              ppsp_tp_peer_addr_t\
    \ peer_addr;\n      } ppsp_tp_peer_info_t;\n   The ppsp_tp_peer_addr_t element\
    \ includes the IP address and port,\n   with a few optional attributes related\
    \ to connection type and network\n   location (in terms of ASN) as well as, optionally,\
    \ the identifier of\n   the peer protocol being used.\n      Object {\n      \
    \        ppsp_tp_ip_address       ip_address;\n              ppsp_tp_integer_t\
    \        port;\n              ppsp_tp_integer_t        priority;\n           \
    \   ppsp_tp_string_t         type = \"HOST\"\n                               \
    \             | \"REFLEXIVE\"\n                                            | \"\
    PROXY\";\n             [ppsp_tp_string_t         connection = \"wireless\"\n \
    \                                                 | \"wired\";]\n            \
    \ [ppsp_tp_string_t         asn;]\n             [ppsp_tp_string_t         peer_protocol;]\n\
    \      } ppsp_tp_peer_addr_t;\n   The semantics of ppsp_tp_peer_addr_t attributes\
    \ are listed in\n   Table 3:\n      +----------------------+----------------------------------+\n\
    \      | Element or Attribute | Description                      |\n      +----------------------+----------------------------------+\n\
    \      |      ip_address      | IP address information           |\n      |  \
    \    port            | IP service port value            |\n      |      priority\
    \        | The priority of this interface.  |\n      |                      |\
    \ It may be determined by network  |\n      |                      | topology\
    \ preference, operator    |\n      |                      | policy preference,\
    \ etc.  How to  |\n      |                      | create a priority is outside\
    \ of  |\n      |                      | the scope.  The larger the value,|\n \
    \     |                      | the higher the priority.         |\n      |   \
    \   type            | Describes the address for NAT    |\n      |            \
    \          | traversal, which can be HOST     |\n      |                     \
    \ | REFLEXIVE or PROXY               |\n      |      connection      | Access\
    \ type (wireless or wired)  |\n      |      asn             | Autonomous System\
    \ Number         |\n      |      peer_protocol   | Peer-to-Peer Streaming Peer\
    \      |\n      |                      | Protocol (PPSPP) supported       |\n\
    \      +----------------------+----------------------------------+\n         \
    \     Table 3: Semantics of ppsp_tp_peer_addr_t\n   In this document, IP address\
    \ is specified as ppsp_tp_addr_value.  The\n   exact characters and format depend\
    \ on address_type:\n   o  The IPv4 address is encoded as specified by the \"IPv4address\"\
    \ rule\n      in Section 3.2.2 of [RFC3986].\n   o  The IPv6 address is encoded\
    \ as specified in Section 4 of\n      [RFC5952].\n      Object {\n           \
    \   ppsp_tp_string_t   address_type;\n              ppsp_tp_addr_value address;\n\
    \      } ppsp_tp_ip_address;\n   The peer information in responses is grouped\
    \ in a\n   ppsp_tp_peer_group_t element:\n      Object {\n              ppsp_tp_peer_info_t\
    \ peer_info<1..*>;\n      } ppsp_tp_peer_group_t;\n"
- title: 3.2.5.  Statistics and Status Information Element
  contents:
  - "3.2.5.  Statistics and Status Information Element\n   The statistics element\
    \ (stat) is used to describe several properties\n   relevant to the P2P network.\
    \  These properties can be related to\n   stream statistics and peer status information.\
    \  Each stat element\n   will correspond to a property type, and several stat\
    \ blocks can be\n   reported in a single STAT_REPORT message, corresponding to\
    \ some or\n   all the swarms the peer is actively involved.  This specification\n\
    \   only defines the property type \"STREAM_STATS\".\n   The definition of the\
    \ statistic element and attributes is as follows:\n      Object {\n          \
    \   ppsp_tp_string_t  swarm_id;\n             ppsp_tp_integer_t uploaded_bytes;\n\
    \             ppsp_tp_integer_t downloaded_bytes;\n             ppsp_tp_integer_t\
    \ available_bandwidth;\n             ppsp_tp_integer_t concurrent_links;\n   \
    \   } stream_stats;\n   The semantics of stream_stats attributes are listed in\
    \ Table 4:\n      +----------------------+----------------------------------+\n\
    \      | Element or Attribute | Description                      |\n      +----------------------+----------------------------------+\n\
    \      | swarm_id             | Swarm ID                         |\n      | uploaded_bytes\
    \       | Bytes sent to swarm              |\n      | downloaded_bytes     | Bytes\
    \ received from swarm        |\n      | available_bandwidth  | Available instantaneous\
    \ upload   |\n      |                      | bandwidth                       \
    \ |\n      | concurrent_links     | Number of concurrent links       |\n     \
    \ +----------------------+----------------------------------+\n              \
    \    Table 4: Semantics of stream_stats\n   The stat information is grouped in\
    \ the ppsp_tp_stat_group_t element:\n      Object {\n         ppsp_tp_string_t\
    \     type = \"STREAM_STATS\"; // property type\n         stream_stats       \
    \  stat<1..*>;\n      } ppsp_tp_stat_group_t\n   Other properties may be defined,\
    \ related, for example, to incentives\n   and reputation mechanisms like \"peer\
    \ online time\" or connectivity\n   conditions like physical \"link status\",\
    \ etc.\n   For that purpose, the stat element may be extended to provide\n   additional\
    \ specific information for new properties, elements, or\n   attributes (see the\
    \ guidelines in Section 7).\n"
- title: 3.3.  Requests and Responses
  contents:
  - "3.3.  Requests and Responses\n   This section defines the structure of PPSTP\
    \ requests and responses.\n"
- title: 3.3.1.  Request Types
  contents:
  - "3.3.1.  Request Types\n   The request type includes CONNECT, FIND, and STAT_REPORT,\
    \ defined as\n   follows:\n      ppsp_tp_string_t ppsp_tp_request_type_t = \"\
    CONNECT\"\n                                              | \"FIND\"\n        \
    \                                      | \"STAT_REPORT\";\n"
- title: 3.3.2.  Response Types
  contents:
  - "3.3.2.  Response Types\n   Response type corresponds to the response method type\
    \ of the message,\n   defined as follows:\n      JSONValue ppsp_tp_response_type_t\
    \ = 0x00    // SUCCESSFUL\n                                        | 0x01;   //\
    \ FAILED\n"
- title: 3.3.3.  Request Element
  contents:
  - "3.3.3.  Request Element\n   The request element MUST be present in requests and\
    \ corresponds to\n   the request method type for the message.\n   The generic\
    \ definition of a request element is as follows:\n      Object {\n           \
    \   [ppsp_tp_peer_num_t      peer_num;]\n              [ppsp_tp_peer_addr_t  \
    \   peer_addr<1..*>;]\n              ppsp_tp_swarm_action_t   swarm_action<1..*>;\n\
    \      } ppsp_tp_request_connect;\n      Object {\n              ppsp_tp_string_t\
    \         swarm_id;\n             [ppsp_tp_peer_num_t       peer_num;]\n     \
    \ } ppsp_tp_request_find;\n      Object {\n              ppsp_tp_version_t   \
    \     version;\n              ppsp_tp_request_type_t   request_type;\n       \
    \       ppsp_tp_string_t         transaction_id;\n              ppsp_tp_string_t\
    \         peer_id;\n              JSONValue request_data = ppsp_tp_req_connect\
    \ connect\n                                     | ppsp_tp_req_find     find\n\
    \                                     | ppsp_tp_stat_group_t stat_report;\n  \
    \    } ppsp_tp_request;\n   A request element consists of the version of PPSTP,\
    \ the request type,\n   a transaction ID, the requesting peer ID, and requesting\
    \ body (i.e.,\n   request_data).  The request_data MUST be correctly set to the\n\
    \   corresponding element based on the request type (see Table 5).\n         \
    \ +----------------------+----------------------+\n          | request_type  \
    \       | request_data         |\n          +----------------------+----------------------+\n\
    \          | \"CONNECT\"            | \"connect\"            |\n          | \"\
    FIND\"               | \"find\"               |\n          | \"STAT_REPORT\" \
    \       | \"stat_report\"        |\n          +----------------------+----------------------+\n\
    \   Table 5: The Relationship between request_type and request_data\n"
- title: 3.3.4.  Response Element
  contents:
  - "3.3.4.  Response Element\n   The generic definition of a response element is\
    \ as follows:\n      Object {\n              ppsp_tp_version_t             version;\n\
    \              ppsp_tp_response_type_t       response_type;\n              ppsp_tp_integer_t\
    \             error_code;\n              ppsp_tp_string_t              transaction_id;\n\
    \             [ppsp_tp_peer_addr_t           peer_addr;]\n             [ppsp_tp_swarm_action_result_t\
    \ swarm_result<1..*>;]\n      } ppsp_tp_response;\n   A response element consists\
    \ of the version of PPSTP, the response\n   type, the error code, a transaction\
    \ ID, and optionally the public\n   address of the requesting peer and one or\
    \ multiple swarm action\n   result elements.  Normally, swarm action result elements\
    \ SHOULD be\n   present and error_code MUST be set to 00 (No Error) when\n   response_type\
    \ is 0x00.  Swarm action result elements SHOULD NOT be\n   set when error_code\
    \ is 01 (Bad Request).  Detailed selection of\n   error_code is introduced in\
    \ Section 4.3.\n      Object {\n          ppsp_tp_string_t           swarm_id;\n\
    \          ppsp_tp_response_type_t    result;\n          [ppsp_tp_peer_group_t\
    \      peer_group;]\n      } ppsp_tp_swarm_action_result_t;\n   A swarm action\
    \ result element represents the result of an action\n   requested by the peer.\
    \  It contains a swarm identifier that globally\n   indicates the swarm, the result\
    \ for the peer of this action (which\n   could be CONNECT (\"JOIN\" or \"LEAVE\"\
    ), FIND, or STAT_REPORT), and\n   optionally one peer group element.  The attribute\
    \ result indicates\n   the operation result of the corresponding request.  When\
    \ the response\n   element corresponds to the STAT_REPORT request or the result\n\
    \   attribute is set to 0x01, the peer group element SHOULD NOT be set.\n"
- title: 3.4.  PPSTP Message Element
  contents:
  - "3.4.  PPSTP Message Element\n   PPSTP messages (requests or responses) are designed\
    \ to have a similar\n   structure with a root field named \"PPSPTrackerProtocol\"\
    \ containing\n   meta information and data pertaining to a request or a response.\n\
    \   The base type of a PPSTP message is defined as follows:\n      Object {\n\
    \              JSONValue PPSPTrackerProtocol = ppsp_tp_request  Request\n    \
    \                                        | ppsp_tp_response Response;\n      }\
    \ ppsp_tp_message_root;\n"
- title: '4.  Protocol Specification: Encoding and Operation'
  contents:
  - "4.  Protocol Specification: Encoding and Operation\n   PPSTP is a message-oriented\
    \ request/response protocol.  PPSTP\n   messages use a text type encoding in JSON\
    \ [RFC7159], which MUST be\n   indicated in the Content-Type field in HTTP/1.1\
    \ [RFC7231], specifying\n   the \"application/ppsp-tracker+json\" media type for\
    \ all PPSTP request\n   parameters and responses.\n   Implementations MUST support\
    \ the \"https\" URI scheme [RFC2818] and\n   Transport Layer Security (TLS) [RFC5246].\n\
    \   For deployment scenarios where peer (client) authentication is\n   desired\
    \ at the tracker, HTTP Digest Access Authentication [RFC7616]\n   MUST be supported,\
    \ with TLS Client Authentication as the preferred\n   mechanism, if available.\n\
    \   PPSTP uses the HTTP POST method to send parameters in requests to\n   provide\
    \ information resources that are the function of one or more of\n   those input\
    \ parameters.  Input parameters are encoded in JSON in the\n   HTTP entity body\
    \ of the request.\n   The section describes the operation of the three types of\
    \ requests of\n   PPSTP and provides some examples of usage.\n"
- title: 4.1.  Requests and Responses
  contents:
  - '4.1.  Requests and Responses

    '
- title: 4.1.1.  CONNECT Request
  contents:
  - "4.1.1.  CONNECT Request\n   This method is used when a peer registers to the\
    \ system and/or\n   requests some swarm actions (join/leave).  The peer MUST properly\
    \ set\n   the request type to CONNECT, generate and set the transaction_ids,\n\
    \   set the peer_id, and include swarms the peer is interested in,\n   followed\
    \ by the corresponding action type and peer mode.\n   o  When a peer already possesses\
    \ content and agrees to share it with\n      others, it should set the action\
    \ type to the value JOIN, as well\n      as set the peer mode to SEEDER during\
    \ its start (or re-start)\n      period.\n   o  When a peer makes a request to\
    \ join a swarm to consume content, it\n      should set the action type to the\
    \ value JOIN, as well as set the\n      peer mode to LEECH during its start (or\
    \ re-start) period.\n   In the above cases, the peer can provide optional information\
    \ on the\n   addresses of its network interface(s), for example, the priority,\n\
    \   type, connection, and ASN.\n   When a peer plans to leave a previously joined\
    \ swarm, it should set\n   action type to LEAVE, regardless of the peer mode.\n\
    \   When receiving a well-formed CONNECT request message, the tracker\n   starts\
    \ by pre-processing the peer authentication information\n   (provided as authorization\
    \ scheme and token in the HTTP message) to\n   check whether it is valid and that\
    \ it can connect to the service,\n   then proceed to register the peer in the\
    \ service and perform the\n   swarm actions requested.  If successful, a response\
    \ message with a\n   corresponding response value of SUCCESSFUL will be generated.\n\
    \   The valid sets of the number of swarms whose action type is combined\n   with\
    \ peer mode for the CONNECT request logic are enumerated in\n   Table 6 (referring\
    \ to the \"per-Peer-ID\" State Machine in\n   Section 2.3).\n   +-----------+-----------+---------+----------+-----------+----------+\n\
    \   | Swarm     | peer_mode |  action | Initial  | Final     | Request  |\n  \
    \ | Number    |  Value    |  Value  |  State   | State     | Validity |\n   +-----------+-----------+---------+----------+-----------+----------|\n\
    \   |     1     |  LEECH    |  JOIN   |  START   | TRACKING  |  Valid   |\n  \
    \ +-----------+-----------+---------+----------+-----------+----------+\n   |\
    \     1     |  LEECH    |  LEAVE  |  START   | TERMINATE | Invalid  |\n   +-----------+-----------+---------+----------+-----------+----------+\n\
    \   |     1     |  LEECH    |  LEAVE  | TRACKING | TERMINATE |  Valid   |\n  \
    \ +-----------+-----------+---------+----------+-----------+----------+\n   |\
    \     1     |  LEECH    |  JOIN   |  START   | TERMINATE | Invalid  |\n   |  \
    \   1     |  LEECH    |  LEAVE  |          |           |          |\n   +-----------+-----------+---------+----------+-----------+----------+\n\
    \   |     1     |  LEECH    |  JOIN   | TRACKING | TRACKING  |  Valid   |\n  \
    \ |     1     |  LEECH    |  LEAVE  |          |           |          |\n   +-----------+-----------+---------+----------+-----------+----------+\n\
    \   |     N     |  SEEDER   |  JOIN   |  START   | TRACKING  |  Valid   |\n  \
    \ +-----------+-----------+---------+----------+-----------+----------+\n   |\
    \     N     |  SEEDER   |  JOIN   | TRACKING | TERMINATE | Invalid  |\n   +-----------+-----------+---------+----------+-----------+----------+\n\
    \   |     N     |  SEEDER   |  LEAVE  | TRACKING | TERMINATE |  Valid   |\n  \
    \ +-----------+-----------+---------+----------+-----------+----------+\n    \
    \   Table 6: Validity of Action Combinations in CONNECT Requests\n   In the CONNECT\
    \ request message, multiple swarm action elements\n   ppsp_tp_swarm_action_t could\
    \ be contained.  Each of them contains the\n   request action and the peer_mode\
    \ of the peer.  The peer_mode\n   attribute MUST be set to the type of participation\
    \ of the peer in the\n   swarm (SEEDER or LEECH).\n   The CONNECT message may\
    \ contain multiple peer_addr elements with\n   attributes ip_address, port, priority,\
    \ and type (if Interactive\n   Connectivity Establishment (ICE) [RFC5245] NAT\
    \ traversal techniques\n   are used), and optionally connection, asn, and peer_protocol\n\
    \   corresponding to each of the network interfaces the peer wants to\n   advertise.\n\
    \   The element peer_num indicates the maximum number of peers to be\n   returned\
    \ in a list from the tracker.  The returned peer list can be\n   optionally filtered\
    \ by some indicated properties, such as ability_nat\n   for NAT traversal, and\
    \ concurrent_links, online_time and\n   upload_bandwidth for the preferred capabilities.\n\
    \   The element transaction_id MUST be present in requests to uniquely\n   identify\
    \ the transaction.  Responses to completed transactions use\n   the same transaction_id\
    \ as the request they correspond to.\n   The response may include peer_addr data\
    \ of the requesting peer public\n   IP address.  Peers can use Session Traversal\
    \ Utilities for NAT (STUN)\n   [RFC5389] and Traversal Using Relays around NAT\
    \ (TURN) [RFC5766] to\n   gather their candidates, in which case peer_addr SHOULD\
    \ NOT present\n   in the response.  If no STUN is used and the tracker is able\
    \ to work\n   as a \"STUN-like\" server that can inspect the public address of\
    \ a\n   peer, the tracker can return the address back with a \"REFLEXIVE\"\n \
    \  attribute type.  The swarm_result may also include peer_addr data\n   corresponding\
    \ to the peer IDs and public IP addresses of the selected\n   active peers in\
    \ the requested swarm.  The tracker may also include\n   the attribute asn with\
    \ network location information of the transport\n   address, corresponding to\
    \ the Autonomous System Number of the access\n   network provider of the referenced\
    \ peer.\n   If the peer_mode is SEEDER, the tracker responds with a SUCCESSFUL\n\
    \   response and enters the peer information into the corresponding swarm\n  \
    \ activity.  If the peer_mode is LEECH (or if a SEEDER includes a\n   peer_num\
    \ element in the request), the tracker will search and select\n   an appropriate\
    \ list of peers satisfying the conditions set by the\n   requesting peer.  The\
    \ peer list returned MUST contain the peer IDs\n   and the corresponding IP addresses.\
    \  To create the peer list, the\n   tracker may take peer status and network location\
    \ information into\n   consideration to express network topology preferences or\
    \ operators'\n   policy preferences with regard to the possibility of connecting\
    \ with\n   other IETF efforts such as Application-Layer Traffic Optimization\n\
    \   (ALTO) [RFC7285].\n   IMPLEMENTATION NOTE: If no peer_num attributes are present\
    \ in the\n   request, the tracker may return a random sample from the peer\n \
    \  population.\n"
- title: 4.1.1.1.  Example
  contents:
  - "4.1.1.1.  Example\n   The following example of a CONNECT request corresponds\
    \ to a peer that\n   wants to start (or re-start) sharing its previously streamed\
    \ content\n   (peer_mode is SEEDER).\n      POST https://tracker.example.com/video_1\
    \ HTTP/1.1\n      Host: tracker.example.com\n      Content-Length: 494\n     \
    \ Content-Type: application/ppsp-tracker+json\n      Accept: application/ppsp-tracker+json\n\
    \      {\n        \"PPSPTrackerProtocol\": {\n          \"version\":         \
    \     1,\n          \"request_type\":         \"CONNECT\",\n          \"transaction_id\"\
    :       \"12345\",\n          \"peer_id\":              \"656164657220\",\n  \
    \        \"connect\":{\n              \"peer_addr\": {\n                     \"\
    ip_address\": {\n                          \"address_type\":     \"ipv4\",\n \
    \                         \"address\":          \"192.0.2.2\"\n              \
    \       },\n                     \"port\":         80,\n                     \"\
    priority\":     1,\n                     \"type\":         \"HOST\",\n       \
    \              \"connection\":   \"wired\",\n                     \"asn\":   \
    \       \"45645\"\n              },\n              \"swarm_action\": [{\n    \
    \              \"swarm_id\":       \"1111\",\n                  \"action\":  \
    \       \"JOIN\",\n                  \"peer_mode\":      \"SEEDER\"\n        \
    \      },\n              {\n                  \"swarm_id\":       \"2222\",\n\
    \                  \"action\":         \"JOIN\",\n                  \"peer_mode\"\
    :      \"SEEDER\"\n              }]\n          }\n        }\n      }\n   Another\
    \ example of the message-body of a CONNECT request corresponds\n   to a peer (peer_mode\
    \ is LEECH, meaning that the peer is not in\n   possession of the content) requesting\
    \ join to a swarm, in order to\n   start receiving the stream and providing optional\
    \ information on the\n   addresses of its network interface(s):\n      {\n   \
    \     \"PPSPTrackerProtocol\": {\n          \"version\":               1,\n  \
    \        \"request_type\":          \"CONNECT\",\n          \"transaction_id\"\
    :        \"12345.0\",\n          \"peer_id\":               \"656164657221\",\n\
    \          \"connect\":{\n              \"peer_num\": {\n                  \"\
    peer_count\":        5,\n                  \"ability_nat\":       \"STUN\",\n\
    \                  \"concurrent_links\":  \"5\",\n                  \"online_time\"\
    :       \"200\",\n                  \"upload_bandwidth\":  \"600\"\n         \
    \      },\n               \"peer_addr\": [{\n                     \"ip_address\"\
    : {\n                          \"address_type\":     \"ipv4\",\n             \
    \             \"address\":          \"192.0.2.2\"\n                     },\n \
    \                    \"port\":         80,\n                     \"priority\"\
    :     1,\n                     \"type\":         \"HOST\",\n                 \
    \    \"connection\":   \"wired\",\n                     \"asn\":          \"3256546\"\
    \n               },\n               {\n                     \"ip_address\":{\n\
    \                         \"address_type\":     \"ipv6\",\n                  \
    \       \"address\":          \"2001:db8::2\"\n                     },\n     \
    \                \"port\":         80,\n                     \"priority\":   \
    \  2,\n                     \"type\":         \"HOST\",\n                    \
    \ \"connection\":   \"wireless\",\n                     \"asn\":          \"34563456\"\
    ,\n                     \"peer_protocol\": \"PPSP-PP\"\n               }],\n \
    \              \"swarm_action\": {\n                  \"swarm_id\":       \"1111\"\
    ,\n                  \"action\":         \"JOIN\",\n                  \"peer_mode\"\
    :      \"LEECH\"\n               }\n          }\n        }\n      }\n   The next\
    \ example of a CONNECT request corresponds to a peer leaving a\n   previously\
    \ joined swarm and requesting to join a new swarm.  This is\n   the typical example\
    \ of a user watching a live channel but then\n   deciding to switch to a different\
    \ one:\n      {\n        \"PPSPTrackerProtocol\": {\n          \"version\":  \
    \            1,\n          \"request_type\":         \"CONNECT\",\n          \"\
    transaction_id\":       \"12345\",\n          \"peer_id\":              \"656164657221\"\
    ,\n          \"connect\":{\n              \"peer_num\": {\n                  \"\
    peer_count\":        5,\n                  \"ability_nat\":       \"STUN\",\n\
    \                  \"concurrent_links\":  \"5\",\n                  \"online_time\"\
    :       \"200\",\n                  \"upload_bandwidth\":  \"600\"\n         \
    \     },\n              \"swarm_action\": [{\n                  \"swarm_id\":\
    \          \"1111\",\n                  \"action\":            \"LEAVE\",\n  \
    \                \"peer_mode\":         \"LEECH\"\n              },\n        \
    \      {\n                  \"swarm_id\":          \"2222\",\n               \
    \   \"action\":            \"JOIN\",\n                  \"peer_mode\":       \
    \  \"LEECH\"\n              }]\n          }\n        }\n      }\n   The next example\
    \ illustrates the response for the previous example of\n   a CONNECT request where\
    \ the peer requested two swarm actions and not\n   more than 5 other peers, receiving\
    \ from the tracker a peer list with\n   only two other peers in the swarm \"2222\"\
    :\n      HTTP/1.1 200 OK\n      Content-Length: 1342\n      Content-Type: application/ppsp-tracker+json\n\
    \      {\n        \"PPSPTrackerProtocol\": {\n          \"version\":         \
    \      1,\n          \"response_type\":         0,\n          \"error_code\":\
    \            0,\n          \"transaction_id\":        \"12345\",\n          \"\
    peer_addr\": {\n              \"ip_address\": {\n                  \"address_type\"\
    :     \"ipv4\",\n                  \"address\":          \"198.51.100.1\"\n  \
    \            },\n              \"port\":          80,\n              \"priority\"\
    :      1,\n              \"asn\":           \"64496\"\n         },\n         \"\
    swarm_result\": {\n              \"swarm_id\":        \"2222\",\n            \
    \  \"result\":          0,\n              \"peer_group\": {\n                \
    \  \"peer_info\": [{\n                      \"peer_id\":    \"956264622298\",\n\
    \                      \"peer_addr\": {\n                          \"ip_address\"\
    : {\n                              \"address_type\":     \"ipv4\",\n         \
    \                     \"address\":          \"198.51.100.22\"\n              \
    \            },\n                          \"port\":          80,\n          \
    \                \"priority\":      2,\n                          \"type\":  \
    \        \"REFLEXIVE\",\n                          \"connection\":    \"wired\"\
    ,\n                          \"asn\":           \"64496\",\n                 \
    \         \"peer_protocol\": \"PPSP-PP\"\n                      }\n          \
    \        },\n                  {\n                      \"peer_id\":    \"3332001256741\"\
    ,\n                      \"peer_addr\": {\n                          \"ip_address\"\
    : {\n                              \"address_type\":     \"ipv4\",\n         \
    \                     \"address\":          \"198.51.100.201\"\n             \
    \             },\n                          \"port\":          80,\n         \
    \                 \"priority\":      2,\n                          \"type\": \
    \         \"REFLEXIVE\",\n                          \"connection\":    \"wired\"\
    ,\n                          \"asn\":           \"64496\",\n                 \
    \         \"peer_protocol\": \"PPSP-PP\"\n                      }\n          \
    \        }]\n                }\n             }\n         }\n      }\n"
- title: 4.1.2.  FIND Request
  contents:
  - "4.1.2.  FIND Request\n   This method allows peers to request a new peer list\
    \ for the swarm\n   from the tracker whenever needed.\n   The FIND request may\
    \ include a peer_number element to indicate to the\n   tracker the maximum number\
    \ of peers to be returned in a list\n   corresponding to the indicated conditions\
    \ set by the requesting peer,\n   being ability_nat for NAT traversal (considering\
    \ that PPSP-ICE NAT\n   traversal techniques may be used), and optionally concurrent_links,\n\
    \   online_time, and upload_bandwidth for the preferred capabilities.\n   When\
    \ receiving a well-formed FIND request, the tracker processes the\n   information\
    \ to check if it is valid.  If successful, a response\n   message with a response\
    \ value of SUCCESSFUL will be generated, and\n   the tracker will search out the\
    \ list of peers for the swarm and\n   select an appropriate peer list satisfying\
    \ the conditions set by the\n   requesting peer.  The peer list returned MUST\
    \ contain the peer IDs\n   and the corresponding IP addresses.\n   The tracker\
    \ may take the ability of peers and popularity of the\n   requested content into\
    \ consideration.  For example, the tracker could\n   select peers with higher\
    \ ability than the current peers that provide\n   the content if the content is\
    \ relatively popular (see Section 5.1.1);\n   the tracker could also select peers\
    \ with lower ability than the\n   current peers that provide the content when\
    \ the content is relatively\n   uncommon.  The tracker may take network location\
    \ information into\n   consideration as well, to express network topology preferences\
    \ or\n   operators' policy preferences.  It can implement other IETF efforts\n\
    \   like ALTO [RFC7285], which is out of the scope of this document.\n   The response\
    \ MUST include a peer_group element that contains the peer\n   IDs and the corresponding\
    \ IP addresses; it may also include the\n   attribute asn with network location\
    \ information of the transport\n   address, corresponding to the Autonomous System\
    \ Number of the access\n   network provider of the referenced peer.\n   The response\
    \ may also include a peer_addr element that includes the\n   requesting peer public\
    \ IP address.  If no STUN is used and the\n   tracker is able to work as a \"\
    STUN-like\" server that can inspect the\n   public address of a peer, the tracker\
    \ can return the address back\n   with a \"REFLEXIVE\" attribute type.\n   IMPLEMENTATION\
    \ NOTE: If no peer_num attributes are present in the\n   request, the tracker\
    \ may return a random sample from the peer\n   population.\n"
- title: 4.1.2.1.  Example
  contents:
  - "4.1.2.1.  Example\n   An example of the message-body of a FIND request, where\
    \ the peer\n   requests from the tracker a list of not more than 5 peers in the\n\
    \   swarm \"1111\" conforming to the characteristics expressed (concurrent\n \
    \  links, online time, and upload bandwidth level) is as follows:\n      {\n \
    \       \"PPSPTrackerProtocol\": {\n            \"version\":             1,\n\
    \            \"request_type\":        \"FIND\",\n            \"transaction_id\"\
    :      \"12345\",\n            \"peer_id\":             \"656164657221\",\n  \
    \          \"swarm_id\":            \"1111\",\n            \"peer_num\": {\n \
    \               \"peer_count\":        5,\n                \"ability_nat\":  \
    \     \"STUN\",\n                \"concurrent_links\":  \"5\",\n             \
    \   \"online_time\":       \"200\",\n                \"upload_bandwidth\":  \"\
    600\"\n            }\n        }\n      }\n   An example of the message-body of\
    \ a response for the above FIND\n   request, including the requesting peer public\
    \ IP address information,\n   is as follows:\n      {\n        \"PPSPTrackerProtocol\"\
    : {\n            \"version\":             1,\n            \"response_type\": \
    \      0,\n            \"error_code\":          0,\n            \"transaction_id\"\
    :      \"12345\",\n            \"swarm_result\": {\n                \"swarm_id\"\
    :        \"1111\",\n                \"result\":          0,\n                \"\
    peer_group\": {\n                    \"peer_info\": [{\n                     \
    \   \"peer_id\":    \"656164657221\",\n                        \"peer_addr\":\
    \ {\n                            \"ip_address\": {\n                         \
    \       \"address_type\":     \"ipv4\",\n                                \"address\"\
    :          \"198.51.100.1\"\n                            },\n                \
    \            \"port\":          80,\n                            \"priority\"\
    :      1,\n                            \"type\":          \"REFLEXIVE\",\n   \
    \                         \"connection\":    \"wireless\",\n                 \
    \           \"asn\":           \"64496\"\n                        }\n        \
    \            },\n                    {\n                        \"peer_id\": \
    \   \"956264622298\",\n                        \"peer_addr\": {\n            \
    \                \"ip_address\": {\n                                \"address_type\"\
    :     \"ipv4\",\n                                \"address\":          \"198.51.100.22\"\
    \n                            },\n                            \"port\":      \
    \    80,\n                            \"priority\":      1,\n                \
    \            \"type\":          \"REFLEXIVE\",\n                            \"\
    connection\":    \"wireless\",\n                            \"asn\":         \
    \  \"64496\"\n                        }\n                    },\n            \
    \        {\n                        \"peer_id\":    \"3332001256741\",\n     \
    \                   \"peer_addr\": {\n                            \"ip_address\"\
    : {\n                                \"address_type\":     \"ipv4\",\n       \
    \                         \"address\":          \"198.51.100.201\"\n         \
    \                   },\n                            \"port\":          80,\n \
    \                           \"priority\":      1,\n                          \
    \  \"type\":          \"REFLEXIVE\",\n                            \"connection\"\
    :    \"wireless\",\n                            \"asn\":           \"64496\"\n\
    \                        }\n                    }]\n                }\n      \
    \      }\n        }\n      }\n"
- title: 4.1.3.  STAT_REPORT Request
  contents:
  - "4.1.3.  STAT_REPORT Request\n   This method allows peers to send status and statistic\
    \ data to\n   trackers.  The method is periodically initiated by the peer while\
    \ it\n   is active.\n   The peer MUST set the request_type to \"STAT_REPORT\"\
    , set the peer_id\n   with the identifier of the peer, and generate and set the\n\
    \   transaction_id.\n   The report may include multiple statistics elements describing\n\
    \   several properties relevant to a specific swarm.  These properties\n   can\
    \ be related with stream statistics and peer status information,\n   including\
    \ uploaded_bytes, downloaded_bytes, available_bandwidth,\n   concurrent_links,\
    \ etc.\n   Other properties may be defined (see the guidelines in Section 7.1),\n\
    \   for example, those related to incentives and reputation mechanisms.\n   If\
    \ no Statistics Group is included, the STAT_REPORT is used as a\n   \"keep-alive\"\
    \ message to prevent the tracker from de-registering the\n   peer when the \"\
    track timer\" expires.\n   If the request is valid, the tracker processes the\
    \ received\n   information for future use and generates a response message with\
    \ a\n   response value of SUCCESSFUL.\n   The response MUST have the same transaction_id\
    \ value as the request.\n"
- title: 4.1.3.1.  Example
  contents:
  - "4.1.3.1.  Example\n   An example of the message-body of a STAT_REPORT request\
    \ is:\n      {\n        \"PPSPTrackerProtocol\": {\n            \"version\": \
    \            1,\n            \"request_type\":        \"STAT_REPORT\",\n     \
    \       \"transaction_id\":      \"12345\",\n            \"peer_id\":        \
    \     \"656164657221\",\n            \"stat_report\": {\n                \"type\"\
    :  \"STREAM_STATS\",\n                \"Stat\": {\n                      \"swarm_id\"\
    :              \"1111\",\n                      \"uploaded_bytes\":        512,\n\
    \                      \"downloaded_bytes\":      768,\n                     \
    \ \"available_bandwidth\":   1024000,\n                      \"concurrent_links\"\
    :      5\n                }\n            }\n        }\n      }\n   An example\
    \ of the message-body of a response for the START_REPORT\n   request is:\n   \
    \   {\n        \"PPSPTrackerProtocol\": {\n            \"version\":          \
    \    1,\n            \"response_type\":        0,\n            \"error_code\"\
    :           0,\n            \"transaction_id\":       \"12345\",\n           \
    \ \"swarm_result\": {\n                \"swarm_id\":     \"1111\",\n         \
    \       \"result\":       0\n            }\n        }\n      }\n"
- title: 4.2.  Response Element in Response Messages
  contents:
  - "4.2.  Response Element in Response Messages\n   Table 7 indicates the response\
    \ type and corresponding semantics.\n              +--------------------+---------------------+\n\
    \              | Response Type      | Semantics           |\n              | \
    \                   |                     |\n              +--------------------+---------------------+\n\
    \              | 0                  |   SUCCESSFUL        |\n              | 1\
    \                  |   FAILED            |\n              +--------------------+---------------------+\n\
    \          Table 7: Semantics for the Value of Response Type\n   SUCCESSFUL: Indicates\
    \ that the request has been processed properly\n   and the desired operation has\
    \ completed.  The body of the response\n   message includes the requested information\
    \ and MUST include the same\n   transaction_id as the corresponding request.\n\
    \      CONNECT:  Returns information about the successful registration of\n  \
    \    the peer and/or of each swarm action requested.  May additionally\n     \
    \ return the list of peers corresponding to the action attribute\n      requested.\n\
    \      FIND:  Returns the list of peers corresponding to the requested\n     \
    \ scope.\n      STAT_REPORT:  Confirms the success of the requested operation.\n\
    \   FAILED: Indicates that the request has not been processed properly.\n   A\
    \ corresponding error_code SHOULD be set according to the conditions\n   described\
    \ in Section 4.3.\n"
- title: 4.3.  Error and Recovery Conditions
  contents:
  - "4.3.  Error and Recovery Conditions\n   If the peer receives an invalid response,\
    \ the same request with\n   identical content including the same transaction_id\
    \ MUST be repeated.\n   The transaction_id on a request can be reused if and only\
    \ if all of\n   the content is identical, including date/time information.  Details\n\
    \   of the retry process (including time intervals to pause, number of\n   retries\
    \ to attempt, and timeouts for retrying) are implementation\n   dependent.\n \
    \  The tracker MUST be prepared to receive a request with a repeated\n   transaction_id.\n\
    \   Error situations resulting from normal operation or from abnormal\n   conditions\
    \ (Section 2.3.2) MUST be responded to with response_type\n   set to 0x01 and\
    \ with the adequate error_code, as described here:\n   o  If the message is found\
    \ to be incorrectly formed, the receiver\n      MUST respond with a 01 (Bad Request)\
    \ error_code with an empty\n      message-body (no peer_addr and swarm_result\
    \ attributes).\n   o  If the version number of the protocol is for a version the\n\
    \      receiver does not support, the receiver MUST respond with a 02\n      (Unsupported\
    \ Version Number) error_code with an empty message-body\n      (no peer_addr and\
    \ swarm_result attributes).\n   o  In the PEER REGISTERED and TRACKING states\
    \ of the tracker, certain\n      requests are not allowed (Section 2.3.2).  The\
    \ tracker MUST\n      respond with a 03 (Forbidden Action) error_code with an\
    \ empty\n      message-body (no peer_addr and swarm_result attributes).\n   o\
    \  If the tracker is unable to process a request message due to an\n      unexpected\
    \ condition, it SHOULD respond with a 04 (Internal Server\n      Error) error_code\
    \ with an empty message-body (no peer_addr and\n      swarm_result attributes).\n\
    \   o  If the tracker is unable to process a request message because it\n    \
    \  is in an overloaded state, it SHOULD respond with a 05 (Service\n      Unavailable)\
    \ error_code with an empty message-body (no peer_addr\n      and swarm_result\
    \ attributes).\n   o  If authentication is required for the peer to make the request,\n\
    \      the tracker SHOULD respond with a 06 (Authentication Required)\n      error_code\
    \ with an empty message-body (no peer_addr and\n      swarm_result attributes).\n"
- title: 4.4.  Parsing of Unknown Fields in message-body
  contents:
  - "4.4.  Parsing of Unknown Fields in message-body\n   This document only details\
    \ object members used by this specification.\n   Extensions may include additional\
    \ members within JSON objects defined\n   in this document.  PPSTP implementations\
    \ MUST ignore unknown members\n   when processing PPSTP messages.\n"
- title: 5.  Operations and Manageability
  contents:
  - "5.  Operations and Manageability\n   This section provides the operational and\
    \ management aspects that are\n   required to be considered in implementations\
    \ of PPSTP.  These aspects\n   follow the recommendations expressed in [RFC5706].\n"
- title: 5.1.  Operational Considerations
  contents:
  - "5.1.  Operational Considerations\n   PPSTP provides communication between trackers\
    \ and peers and is\n   conceived as a \"client-server\" mechanism, allowing the\
    \ exchange of\n   information about the participant peers sharing multimedia streaming\n\
    \   content.\n   The \"server\" component, i.e., the tracker, is a logical entity\
    \ that\n   can be envisioned as a centralized service (implemented in one or\n\
    \   more physical nodes) or a fully distributed service.\n   The \"client\" component\
    \ can be implemented at each peer participating\n   in the streaming of content.\n"
- title: 5.1.1.  Installation and Initial Setup
  contents:
  - "5.1.1.  Installation and Initial Setup\n   Content providers wishing to use PPSP\
    \ for content distribution should\n   set up at least a PPSP tracker and a service\
    \ portal (public web\n   server) to publish links of the content descriptions,\
    \ for access to\n   their on-demand or live original content sources.  Content\
    \ and\n   service providers should also create conditions to generate peer IDs\n\
    \   and any required security certificates, as well as chunk IDs and\n   swarm\
    \ IDs for each streaming content.  The configuration processes\n   for the PPSP\
    \ tracking facility, the service portal, and content\n   sources are not standardized,\
    \ enabling flexibility for implementers.\n   The swarm IDs of available content,\
    \ as well as the addresses of the\n   PPSP tracking facility, can be distributed\
    \ to end users in various\n   ways, but it is common practice to include both\
    \ the swarm ID and the\n   corresponding PPSP tracker addresses (as URLs) in the\
    \ MPD of the\n   content, which is obtainable (a link) from the service portal.\n\
    \   The available content could have different importance attribute\n   values\
    \ to indicate whether the content is popular or not.  However,\n   it is a totally\
    \ implementation design and outside the scope of this\n   specification.  For\
    \ example, the importance attribute values of the\n   content could be set by\
    \ content providers when distributing them or\n   could be determined by the tracker\
    \ based on the statistics of the\n   requests from the peers that request the\
    \ content.  The tracker could\n   set an upper threshold to decide that the content\
    \ is popular enough\n   when the importance attribute value is higher than the\
    \ upper\n   threshold.  The tracker could also set a lower threshold to decide\n\
    \   that the content is uncommon enough when the importance attribute\n   value\
    \ is lower than the lower threshold.\n   End users browse and search for desired\
    \ content in the service portal\n   and select by clicking the links of the corresponding\
    \ MPDs.  This\n   action typically requires security certificates or authorization\n\
    \   tokens from an enrollment service (end-user registration) and then\n   launches\
    \ the Client Media Player (with PPSP awareness), which will\n   then, using PPSTP,\
    \ contact the PPSP tracker to join the corresponding\n   swarm and obtain the\
    \ transport addresses of other PPSP peers in order\n   to start streaming the\
    \ content.\n"
- title: 5.1.2.  Migration Path
  contents:
  - "5.1.2.  Migration Path\n   There is no previous standard protocol providing functionality\n\
    \   similar to PPSTP.  However, some popular proprietary protocols, e.g.,\n  \
    \ BitTorrent, are used in existing systems.  There is no way for PPSTP\n   to\
    \ migrate to proprietary protocols like the BitTorrent tracker\n   protocol. \
    \ Because PPSTP is an application-level protocol, there is\n   no harm in PPSTP\
    \ having no migration path.  However, proprietary\n   protocols migrating to standard\
    \ protocols like PPSTP can solve the\n   problems raised in [RFC6972].  It is\
    \ also possible for systems to use\n   PPSTP as the management protocol to work\
    \ with exiting propriety peer\n   protocols like the BitTorrent peer protocol.\n"
- title: 5.1.3.  Requirements on Other Protocols and Functional Components
  contents:
  - "5.1.3.  Requirements on Other Protocols and Functional Components\n   For security\
    \ reasons, when using the Peer-to-Peer Streaming Peer\n   Protocol (PPSPP) with\
    \ PPSTP, the mechanisms described in Section 6.1\n   should be observed.\n"
- title: 5.1.4.  Impact on Network Operation
  contents:
  - "5.1.4.  Impact on Network Operation\n   As the messaging model of PPSTP aligns\
    \ with HTTP and the semantics of\n   its messages, the impact on network operation\
    \ is similar to using\n   HTTP.\n"
- title: 5.1.5.  Verifying Correct Operation
  contents:
  - "5.1.5.  Verifying Correct Operation\n   The correct operation of PPSTP can be\
    \ verified both at the tracker\n   and at the peer by logging the behavior of\
    \ PPSTP.  Additionally, the\n   PPSP tracker collects the status of the peers,\
    \ including the peers'\n   activity; such information can be used to monitor and\
    \ obtain the\n   global view of the operation.\n"
- title: 5.2.  Management Considerations
  contents:
  - "5.2.  Management Considerations\n   The management considerations for PPSTP are\
    \ similar to other\n   solutions using HTTP for large-scale content distribution.\
    \  The PPSP\n   tracker can be realized by geographically distributed tracker\
    \ nodes\n   or multiple server nodes in a data center.  As these nodes are akin\n\
    \   to WWW nodes, their configuration procedures, detection of faults,\n   measurement\
    \ of performance, usage accounting, and security measures\n   can be achieved\
    \ by standard solutions and facilities.\n"
- title: 5.2.1.  Interoperability
  contents:
  - "5.2.1.  Interoperability\n   Interoperability refers to allowing information\
    \ sharing and\n   operations between multiple devices and multiple management\n\
    \   applications.  For PPSTP, distinct types of devices host PPSTP\n   trackers\
    \ and peers.  Therefore, support for multiple standard schema\n   languages, management\
    \ protocols, and information models, suited to\n   different purposes, was considered\
    \ in the PPSTP design.\n   Specifically, management functionality for PPSTP devices\
    \ can be\n   achieved with the Simple Network Management Protocol (SNMP)\n   [RFC3410],\
    \ syslog [RFC5424], and the Network Configuration Protocol\n   (NETCONF) [RFC6241].\n"
- title: 5.2.2.  Management Information
  contents:
  - "5.2.2.  Management Information\n   PPSP trackers may implement SNMP management\
    \ interfaces, namely, the\n   Application Management MIB [RFC2564], without the\
    \ need to instrument\n   the tracker application itself.  The channel, connections,\
    \ and\n   transaction objects of the Application Management MIB can be used to\n\
    \   report the basic behavior of the PPSP tracker service.\n   The Application\
    \ Performance Measurement MIB (APM-MIB) [RFC3729] and\n   the Transport Performance\
    \ Metrics MIB (TPM-MIB) [RFC4150] can be used\n   with PPSTP to provide adequate\
    \ metrics for the analysis of\n   performance for transaction flows in the network,\
    \ in direct\n   relationship to the transport of PPSTP.\n   The Host Resources\
    \ MIB [RFC2790] can be used to supply information on\n   the hardware, the operating\
    \ system, and the installed and running\n   software on a PPSP tracker host.\n\
    \   The TCP-MIB [RFC4022] can additionally be considered for network\n   monitoring.\n\
    \   Logging is an important functionality for PPSTP trackers and peers;\n   it\
    \ is done via syslog [RFC5424].\n"
- title: 5.2.3.  Fault Management
  contents:
  - "5.2.3.  Fault Management\n   As PPSP tracker failures can be mainly attributed\
    \ to host or network\n   conditions, the facilities previously described for verifying\
    \ the\n   correct operation of PPSTP and the management of PPSP tracker servers\n\
    \   appear sufficient for PPSTP fault monitoring.\n"
- title: 5.2.4.  Configuration Management
  contents:
  - "5.2.4.  Configuration Management\n   PPSP tracker deployments, when realized\
    \ by geographically distributed\n   tracker nodes or multiple server nodes in\
    \ a data center, may benefit\n   from a standard way of replicating atomic configuration\
    \ updates over\n   a set of server nodes.  This functionality can be provided\
    \ via\n   NETCONF [RFC6241].\n"
- title: 5.2.5.  Accounting Management
  contents:
  - "5.2.5.  Accounting Management\n   PPSTP implementations, primarily in content\
    \ provider environments,\n   can benefit from accounting standardization efforts\
    \ as described in\n   [RFC2975], which indicates that accounting management is\
    \ \"concerned\n   with the collection of resource consumption data for the purposes\
    \ of\n   capacity and trend analysis, cost allocation, auditing, and billing\"\
    .\n"
- title: 5.2.6.  Performance Management
  contents:
  - "5.2.6.  Performance Management\n   Because PPSTP is transaction oriented, its\
    \ performance in terms of\n   availability and responsiveness can be measured\
    \ with the facilities\n   of the APM-MIB [RFC3729] and the TPM-MIB [RFC4150].\n"
- title: 5.2.7.  Security Management
  contents:
  - "5.2.7.  Security Management\n   Standard SNMP notifications for PPSP tracker\
    \ management [RFC5590] and\n   syslog messages [RFC5424] can be used to alert\
    \ operators to the\n   conditions identified in the security considerations (Section\
    \ 6).\n   The statistics collected about the operation of PPSTP can be used for\n\
    \   detecting attacks (e.g., the receipt of malformed messages, messages\n   out\
    \ of order, or messages with invalid timestamps).  However,\n   collecting such\
    \ endpoint properties may also raise some security\n   issues.  For example, the\
    \ statistics collected by the tracker may be\n   disclosed to an unauthorized\
    \ third party that has malicious\n   intentions.  To address such risk, the provider\
    \ of the tracker should\n   evaluate how much information is revealed and the\
    \ associated risks.\n   A confidentiality mechanism must be provided by HTTP over\
    \ TLS to\n   guarantee the confidentiality of PPSTP.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   P2P streaming systems are subject to attacks\
    \ by malicious or\n   unfriendly peers/trackers that may eavesdrop on signaling,\
    \ forge/deny\n   information/knowledge about streaming content and/or its\n  \
    \ availability, impersonate a valid participant, or launch DoS attacks\n   on\
    \ a chosen victim.\n   No security system can guarantee complete security in an\
    \ open P2P\n   streaming system where participants may be malicious or\n   uncooperative.\
    \  The goal of the security considerations described\n   here is to provide sufficient\
    \ protection for maintaining some\n   security properties during tracker-peer\
    \ communication even in the\n   face of a large number of malicious peers and/or\
    \ eventual distrustful\n   trackers (under the distributed tracker deployment\
    \ scenario).\n   Since the protocol uses HTTP to transfer signaling, most of the\n\
    \   security considerations described in [RFC7230] and [RFC7231] also\n   apply.\
    \  Due to the transactional nature of the communication between\n   peers and\
    \ tracker, the method for adding authentication and data\n   security services\
    \ can be the OAuth 2.0 Authorization [RFC6749] with a\n   bearer token, which\
    \ provides the peer with the information required\n   to successfully utilize\
    \ an access token to make protected requests to\n   the tracker.\n"
- title: 6.1.  Authentication between Tracker and Peers
  contents:
  - "6.1.  Authentication between Tracker and Peers\n   To protect PPSTP signaling\
    \ from attackers pretending to be valid\n   peers (or peers other than themselves),\
    \ all messages received in the\n   tracker SHOULD be received from authorized\
    \ peers.  For that purpose,\n   a peer SHOULD enroll in the system via a centralized\
    \ enrollment\n   server.  The enrollment server is expected to provide a proper\
    \ peer\n   ID for the peer and information about the authentication mechanisms.\n\
    \   The specification of the enrollment method and the provision of\n   identifiers\
    \ and authentication tokens is out of the scope of this\n   specification.\n \
    \  Transport Layer Security (TLS) [RFC5246] MUST be used in the\n   communication\
    \ between peers and tracker to provide privacy and data\n   integrity.  Software\
    \ engineers developing and service providers\n   deploying the tracker should\
    \ make themselves familiar with the Best\n   Current Practices (BCP) on configuring\
    \ HTTP over TLS [RFC7525].\n   OAuth 2.0 Authorization [RFC6749] SHOULD also be\
    \ considered when\n   digest authentication [RFC7616] and HTTPS client certificates\
    \ are\n   required.\n"
- title: 6.2.  Content Integrity Protection against Polluting Peers/Trackers
  contents:
  - "6.2.  Content Integrity Protection against Polluting Peers/Trackers\n   Malicious\
    \ peers may claim ownership of popular content to the tracker\n   and try to serve\
    \ polluted (i.e., decoy content or even virus/trojan-\n   infected content) to\
    \ other peers.  Since trackers do not exchange\n   content information among peers,\
    \ it is difficult to detect whether or\n   not a peer is polluting the content.\
    \  Usually, this kind of pollution\n   can be detected by the Peer-to-Peer Streaming\
    \ Peer Protocol (PPSPP)\n   [RFC7574] with requiring the use of Merkle Hash Tree\
    \ scheme for\n   protecting the integrity of the content.  More details can be\
    \ seen in\n   Section 5 of [RFC7574].\n   Some attackers that disrupt P2P streaming\
    \ on behalf of content\n   providers may provide false or modified content or\
    \ peer list\n   information to achieve certain malicious goals.  Peers connecting\
    \ to\n   those portals or trackers provided by the attackers may be redirected\n\
    \   to some corrupted malicious content.  However, there is no standard\n   way\
    \ for peers to avoid this kind of situation completely.  Peers can\n   have mechanisms\
    \ to detect undesirable content or results themselves.\n   For example, if a peer\
    \ finds that the portal returned some undesired\n   content information or the\
    \ tracker returned some malicious peer\n   lists, the peer may choose to quit\
    \ the swarm or switch to other P2P\n   streaming services provided by other content\
    \ providers.\n"
- title: 6.3.  Residual Attacks and Mitigation
  contents:
  - "6.3.  Residual Attacks and Mitigation\n   To mitigate the impact of Sybil attackers\
    \ impersonating a large\n   number of valid participants by repeatedly acquiring\
    \ different peer\n   identities, the enrollment server SHOULD carefully regulate\
    \ the rate\n   of peer/tracker admission.\n   There is no guarantee that peers\
    \ honestly report their status to the\n   tracker, or serve authentic content\
    \ to other peers as they claim to\n   the tracker.  It is expected that a global\
    \ trust mechanism, where the\n   credit of each peer is accumulated from evaluations\
    \ for previous\n   transactions, may be taken into account by other peers when\
    \ selecting\n   partners for future transactions, helping to mitigate the impact\
    \ of\n   such malicious behaviors.  A globally trusted tracker may also take\n\
    \   part in the trust mechanism by collecting evaluations, computing\n   credit\
    \ values, and providing them to joining peers.\n"
- title: 6.4.  Pro-incentive Parameter Trustfulness
  contents:
  - "6.4.  Pro-incentive Parameter Trustfulness\n   Property types for STAT_REPORT\
    \ messages may consider additional pro-\n   incentive parameters (see the guidelines\
    \ for extension in Section 7),\n   which can enable the tracker to improve the\
    \ performance of the whole\n   P2P streaming system.  Trustworthiness of these\
    \ pro-incentive\n   parameters is critical to the effectiveness of the incentive\n\
    \   mechanisms.  Furthermore, the amount of both uploaded and downloaded\n   data\
    \ should be reported to the tracker to allow checking for\n   inconsistencies\
    \ between the upload and download report and to\n   establish an appropriate credit/trust\
    \ system.\n   One such solution could be a reputation-incentive mechanism, based\
    \ on\n   the notions of reputation, social awareness, and fairness.  The\n   mechanism\
    \ would promote cooperation among participants (via each\n   peer's reputation)\
    \ based on the history of past transactions, such\n   as, count of chunk requests\
    \ (sent and received) in a swarm,\n   contribution time of the peer, cumulative\
    \ uploaded and downloaded\n   content, JOIN and LEAVE timestamps, attainable rate,\
    \ etc.\n   Alternatively, exchange of cryptographic receipts signed by receiving\n\
    \   peers can be used to attest to the upload contribution of a peer to\n   the\
    \ swarm, as suggested in [Contracts].\n"
- title: 6.5  Privacy for Peers
  contents:
  - "6.5  Privacy for Peers\n   PPSTP provides mechanisms in which the peers can send\
    \ messages\n   containing IP addresses, ports, and other information to the tracker.\n\
    \   A tracker or a third party who is able to intercept such messages can\n  \
    \ store and process the obtained information in order to analyze peers'\n   behaviors\
    \ and communication patterns.  Such analysis can lead to\n   privacy risks.  For\
    \ example, an unauthorized party may snoop on the\n   data transmission from the\
    \ peer to a tracker in order to introduce\n   some corrupted chunks.\n   The Peer-to-Peer\
    \ Streaming Peer Protocol (PPSPP) [RFC7574] has\n   already introduced some mechanisms\
    \ to protect streamed content; see\n   Sections 12.3 and 12.4 of [RFC7574].  For\
    \ PPSTP, peer implementations\n   as well as tracker implementations MUST support\
    \ the \"https\" URI\n   scheme [RFC2818] and Transport Layer Security (TLS) [RFC5246].\
    \  In\n   addition, a peer should be cognizant about potential trackers\n   tracking\
    \ through queries of peers, e.g., by using HTTP cookies.\n   PPSTP as specified\
    \ in this document does not rely on HTTP cookies.\n   Thus, peers may decide not\
    \ to return cookies received from the\n   tracker, in order to make additional\
    \ tracking more difficult.\n"
- title: 7.  Guidelines for Extending PPSTP
  contents:
  - "7.  Guidelines for Extending PPSTP\n   Extension mechanisms allow designers to\
    \ add new features or to\n   customize existing features of a protocol for different\
    \ operating\n   environments [RFC6709].\n   Extending a protocol implies either\
    \ the addition of features without\n   changing the protocol itself or the addition\
    \ of new elements creating\n   new versions of an existing schema and therefore\
    \ new versions of the\n   protocol.\n   In PPSTP, this means that an extension\
    \ MUST NOT alter an existing\n   protocol schema as the changes would result in\
    \ a new version of an\n   existing schema, not an extension of an existing schema,\
    \ typically\n   non-backwards-compatible.\n   Additionally, a designer MUST remember\
    \ that extensions themselves may\n   also be extensible.\n   Extensions MUST adhere\
    \ to the principles described in this section in\n   order to be considered valid.\n\
    \   Extensions MUST be documented in Standards Track RFCs if there are\n   requirements\
    \ for coordination, interoperability, and broad\n   distribution.\n"
- title: 7.1.  Forms of PPSTP Extension
  contents:
  - "7.1.  Forms of PPSTP Extension\n   In PPSTP, two extension mechanisms can be\
    \ used: a Request-Response\n   Extension or a Protocol-Level Extension.\n   o\
    \  Request-Response Extension: Adding elements or attributes to an\n      existing\
    \ element mapping in the schema is the simplest form of\n      extension.  This\
    \ form should be explored before any other.  This\n      task can be accomplished\
    \ by extending an existing element mapping.\n      For example, an element mapping\
    \ for the Statistics Group can be\n      extended to include additional elements\
    \ needed to express status\n      information about the activity of the peer,\
    \ such as online time\n      for the stat element.\n   o  Protocol-Level Extension:\
    \ If there is no existing element mapping\n      that can be extended to meet\
    \ the requirements and the existing\n      PPSTP request and response message\
    \ structures are insufficient,\n      then extending the protocol should be considered\
    \ in order to\n      define new operational requests and responses.\n      For\
    \ example, to enhance the level of control and the granularity\n      of the operations,\
    \ a new version of the protocol with new messages\n      (JOIN, DISCONNECT), a\
    \ retro-compatible change in semantics of an\n      existing CONNECT request/response,\
    \ and an extension in STAT_REPORT\n      could be considered.\n      As illustrated\
    \ in Figure 6, the peer would use an enhanced CONNECT\n      request to perform\
    \ the initial registration in the system.  Then\n      it would join a first swarm\
    \ as SEEDER, later join a second swarm\n      as LEECH, and then disconnect from\
    \ the latter swarm but remain as\n      SEEDER for the first one.  When deciding\
    \ to leave the system, the\n      peer disconnects gracefully from it:\n     \
    \            +--------+                     +---------+\n                 |  Peer\
    \  |                     | Tracker |\n                 +--------+            \
    \         +---------+\n                     |                               |\n\
    \                     |--CONNECT--------------------->|\n                    \
    \ |<--------------------------OK--|\n                     |--JOIN(swarm_a;SEEDER)---------->|\n\
    \                     |<--------------------------OK--|\n                    \
    \ :                               :\n                     |--STAT_REPORT(activity)------->|\n\
    \                     |<--------------------------Ok--|\n                    \
    \ :                               :\n                     |--JOIN(swarm_b;LEECH)--------->|\n\
    \                     |<-----------------OK+PeerList--|\n                    \
    \ :                               :\n                     |--STAT_REPORT(ChunkMap_b)----->|\n\
    \                     |<--------------------------Ok--|\n                    \
    \ :                               :\n                     |--DISCONNECT(swarm_b)--------->|\n\
    \                     |<--------------------------Ok--|\n                    \
    \ :                               :\n                     |--STAT_REPORT(activity)------->|\n\
    \                     |<--------------------------Ok--|\n                    \
    \ :                               :\n                     |--DISCONNECT------------------>|\n\
    \                     |<---------------------Ok(BYE)--|\n     Figure 6: Example\
    \ of a Session for a PPSTP Extended Version\n"
- title: 7.2.  Issues to Be Addressed in PPSTP Extensions
  contents:
  - "7.2.  Issues to Be Addressed in PPSTP Extensions\n   There are several issues\
    \ that all extensions should take into\n   consideration.\n   o  Overview of the\
    \ Extension:  It is RECOMMENDED that extensions to\n      PPSTP have a protocol\
    \ overview section that discusses the basic\n      operation of the extension.\
    \  The most important processing rules\n      for the elements in the message\
    \ flows SHOULD also be mentioned.\n   o  Backward Compatibility: The new extension\
    \ MUST be backward\n      compatible with the base PPSTP specified in this document.\n\
    \   o  Syntactic Issues:  Extensions that define new request/response\n      methods\
    \ SHOULD use all capitals for the method name, keeping with\n      a long-standing\
    \ convention in many protocols, such as HTTP.\n      Method names are case sensitive\
    \ in PPSTP.  Method names SHOULD be\n      shorter than 16 characters and SHOULD\
    \ attempt to convey the\n      general meaning of the request or response.\n \
    \  o  Semantic Issues:  PPSTP extensions MUST clearly define the\n      semantics\
    \ of the extensions.  Specifically, the extension MUST\n      specify the behaviors\
    \ expected from both the peer and the tracker\n      in processing the extension,\
    \ with the processing rules in temporal\n      order of the common messaging scenario.\n\
    \      Processing rules generally specify actions to be taken on receipt\n   \
    \   of messages and expiration of timers.\n      The extension SHOULD specify\
    \ procedures to be taken in exceptional\n      conditions that are recoverable.\
    \  Handling of unrecoverable errors\n      does not require specification.\n \
    \  o  Security Issues:  As security is an important component of any\n      protocol,\
    \ designers of PPSTP extensions need to carefully consider\n      security requirements,\
    \ e.g., authorization requirements and\n      requirements for end-to-end integrity.\n\
    \   o  Examples of Usage:  The specification of the extension SHOULD give\n  \
    \    examples of message flows and message formatting and include\n      examples\
    \ of messages containing new syntax.  Examples of message\n      flows should\
    \ be given to cover common cases and at least one\n      failure or unusual case.\n"
- title: 8.  IANA Considerations
  contents:
  - '8.  IANA Considerations

    '
- title: 8.1.  MIME Type Registry
  contents:
  - "8.1.  MIME Type Registry\n   This document registers \"application/ppsp-tracker+json\"\
    \ media types.\n   Type name:  application\n   Subtype name:  ppsp-tracker+json\n\
    \   Required parameters:  n/a\n   Optional parameters:  n/a\n   Encoding considerations:\
    \  Encoding considerations are identical to\n   those specified for the \"application/json\"\
    \ media type.  See\n   [RFC7159].\n   Security considerations: See Section 6 of\
    \ RFC 7846.\n   Interoperability considerations:  This document specifies the\
    \ format\n   of conforming messages and the interpretation thereof.\n   Published\
    \ specification:  RFC 7846.\n   Applications that use this media type:  PPSP trackers\
    \ and peers\n   either stand alone or are embedded within other applications.\n\
    \   Additional information:\n      Magic number(s):  n/a\n      File extension(s):\
    \  n/a\n      Macintosh file type code(s):  n/a\n      Fragment identifier considerations:\
    \  n/a\n   Person & email address to contact for further information:  See\n \
    \  Authors' Addresses section.\n   Intended usage:  COMMON\n   Restrictions on\
    \ usage:  none\n   Author:  See Authors' Addresses section of RFC 7846.\n   Change\
    \ controller:  IESG (iesg@ietf.org)\n"
- title: 8.2.  PPSTP Version Number Registry
  contents:
  - "8.2.  PPSTP Version Number Registry\n   IANA has created the \"PPSTP Version\
    \ Number Registry\".  Values are\n   integers in the range 0-255, with initial\
    \ assignments and\n   reservations given in Table 2.  New PPSTP version types\
    \ are assigned\n   after IETF Review [RFC5226] to ensure that proper documentation\n\
    \   regarding the new version types and their usage has been provided.\n"
- title: 8.3.  PPSTP Request Type Registry
  contents:
  - "8.3.  PPSTP Request Type Registry\n   IANA has created the \"PPSTP Request Type\
    \ Registry\".  Values are\n   strings listed in Table 8.  New PPSTP request types\
    \ are assigned\n   after IETF Review [RFC5226] to ensure that proper documentation\n\
    \   regarding the new request types and their usage has been provided.\n    +----------------------+-------------------------------------------+\n\
    \    | request_type         | Description                               |\n  \
    \  +----------------------+-------------------------------------------+\n    |\
    \ \"CONNECT\"            | Returns information about the successful  |\n    |\
    \                      | registration of the peer and/or of each   |\n    |  \
    \                    | swarm action requested.  May additionally |\n    |    \
    \                  | return the list of peers corresponding to |\n    |      \
    \                | the action attribute                      |\n    |        \
    \              | requested.                                |\n    |          \
    \            |                                           |\n    | \"FIND\"   \
    \            | Returns the list of peers corresponding   |\n    |            \
    \          | to the requested scope.                   |\n    |              \
    \        |                                           |\n    | \"STAT_REPORT\"\
    \        | Confirms the success of the requested     |\n    |                \
    \      | operation.                                |\n    +----------------------+-------------------------------------------+\n\
    \        Table 8: The PPSTP Request Type Registry\n"
- title: 8.4.  PPSTP Error Code Registry
  contents:
  - "8.4.  PPSTP Error Code Registry\n   IANA has created the \"PPSTP Error Code Registry\"\
    .  Values are the\n   strings listed in Table 9.  New PPSTP error codes are assigned\
    \ after\n   IETF Review [RFC5226] to ensure that proper documentation regarding\n\
    \   the new error codes and their usage has been provided.\n      +---------------+-------------------------------------------+\n\
    \      | error_code    | Description                               |\n      +---------------+-------------------------------------------+\n\
    \      | 00            | No Error                                  |\n      |\
    \ 01            | Bad Request                               |\n      | 02    \
    \        | Unsupported Version Number                |\n      | 03           \
    \ | Forbidden Action                          |\n      | 04            | Internal\
    \ Server Error                     |\n      | 05            | Service Unavailable\
    \                       |\n      | 06            | Authentication Required   \
    \                |\n      +---------------+-------------------------------------------+\n\
    \        Table 9: The PPSTP Error Code Registry\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]   Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119,\n \
    \              DOI 10.17487/RFC2119, March 1997,\n               <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC2818]   Rescorla, E., \"HTTP Over TLS\", RFC 2818,\n               DOI\
    \ 10.17487/RFC2818, May 2000,\n               <http://www.rfc-editor.org/info/rfc2818>.\n\
    \   [RFC3629]   Yergeau, F., \"UTF-8, a transformation format of ISO\n       \
    \        10646\", STD 63, RFC 3629, DOI 10.17487/RFC3629, November\n         \
    \      2003, <http://www.rfc-editor.org/info/rfc3629>.\n   [RFC3986]   Berners-Lee,\
    \ T., Fielding, R., and L. Masinter, \"Uniform\n               Resource Identifier\
    \ (URI): Generic Syntax\", STD 66, RFC\n               3986, DOI 10.17487/RFC3986,\
    \ January 2005,\n               <http://www.rfc-editor.org/info/rfc3986>.\n  \
    \ [RFC5245]   Rosenberg, J., \"Interactive Connectivity Establishment\n      \
    \         (ICE): A Protocol for Network Address Translator (NAT)\n           \
    \    Traversal for Offer/Answer Protocols\", RFC 5245,\n               DOI 10.17487/RFC5245,\
    \ April 2010,\n               <http://www.rfc-editor.org/info/rfc5245>.\n   [RFC5246]\
    \   Dierks, T. and E. Rescorla, \"The Transport Layer Security\n             \
    \  (TLS) Protocol Version 1.2\", RFC 5246,\n               DOI 10.17487/RFC5246,\
    \ August 2008,\n               <http://www.rfc-editor.org/info/rfc5246>.\n   [RFC5389]\
    \   Rosenberg, J., Mahy, R., Matthews, P., and D. Wing,\n               \"Session\
    \ Traversal Utilities for NAT (STUN)\", RFC 5389,\n               DOI 10.17487/RFC5389,\
    \ October 2008,\n               <http://www.rfc-editor.org/info/rfc5389>.\n  \
    \ [RFC5590]   Harrington, D. and J. Schoenwaelder, \"Transport Subsystem\n   \
    \            for the Simple Network Management Protocol (SNMP)\", STD\n      \
    \         78, RFC 5590, DOI 10.17487/RFC5590, June 2009,\n               <http://www.rfc-editor.org/info/rfc5590>.\n\
    \   [RFC5766]   Mahy, R., Matthews, P., and J. Rosenberg, \"Traversal\n      \
    \         Using Relays around NAT (TURN): Relay Extensions to\n              \
    \ Session Traversal Utilities for NAT (STUN)\", RFC 5766,\n               DOI\
    \ 10.17487/RFC5766, April 2010,\n               <http://www.rfc-editor.org/info/rfc5766>.\n\
    \   [RFC5952]   Kawamura, S. and M. Kawashima, \"A Recommendation for IPv6\n \
    \              Address Text Representation\", RFC 5952,\n               DOI 10.17487/RFC5952,\
    \ August 2010,\n               <http://www.rfc-editor.org/info/rfc5952>.\n   [RFC6241]\
    \   Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J.,\n               Ed.,\
    \ and A. Bierman, Ed., \"Network Configuration Protocol\n               (NETCONF)\"\
    , RFC 6241, DOI 10.17487/RFC6241, June 2011,\n               <http://www.rfc-editor.org/info/rfc6241>.\n\
    \   [RFC6749]   Hardt, D., Ed., \"The OAuth 2.0 Authorization Framework\",\n \
    \              RFC 6749, DOI 10.17487/RFC6749, October 2012,\n               <http://www.rfc-editor.org/info/rfc6749>.\n\
    \   [RFC7159]   Bray, T., Ed., \"The JavaScript Object Notation (JSON)\n     \
    \          Data Interchange Format\", RFC 7159, DOI 10.17487/RFC7159,\n      \
    \         March 2014, <http://www.rfc-editor.org/info/rfc7159>.\n   [RFC7230]\
    \   Fielding, R., Ed., and J. Reschke, Ed., \"Hypertext\n               Transfer\
    \ Protocol (HTTP/1.1): Message Syntax and\n               Routing\", RFC 7230,\
    \ DOI 10.17487/RFC7230, June 2014,\n               <http://www.rfc-editor.org/info/rfc7230>.\n\
    \   [RFC7231]   Fielding, R., Ed., and J. Reschke, Ed., \"Hypertext\n        \
    \       Transfer Protocol (HTTP/1.1): Semantics and Content\", RFC\n         \
    \      7231, DOI 10.17487/RFC7231, June 2014,\n               <http://www.rfc-editor.org/info/rfc7231>.\n\
    \   [RFC7285]   Alimi, R., Ed., Penno, R., Ed., Yang, Y., Ed., Kiesel,\n     \
    \          S., Previdi, S., Roome, W., Shalunov, S., and R. Woundy,\n        \
    \       \"Application-Layer Traffic Optimization (ALTO) Protocol\",\n        \
    \       RFC 7285, DOI 10.17487/RFC7285, September 2014,\n               <http://www.rfc-editor.org/info/rfc7285>.\n\
    \   [RFC7574]   Bakker, A., Petrocco, R., and V. Grishchenko, \"Peer-to-\n   \
    \            Peer Streaming Peer Protocol (PPSPP)\", RFC 7574,\n             \
    \  DOI 10.17487/RFC7574, July 2015,\n               <http://www.rfc-editor.org/info/rfc7574>.\n\
    \   [RFC7616]   Shekh-Yusef, R., Ed., Ahrens, D., and S. Bremer, \"HTTP\n    \
    \           Digest Access Authentication\", RFC 7616,\n               DOI 10.17487/RFC7616,\
    \ September 2015,\n               <http://www.rfc-editor.org/info/rfc7616>.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [Contracts] Piatek, M., Krishnamurthy, A., Venkataramani,\
    \ A., Yang,\n               R., Zhang, D., and A.  Jaffe, \"Contracts: Practical\n\
    \               Contribution Incentives for P2P Live Streaming\", NSDI:\n    \
    \           USENIX Symposium on Networked Systems Design and\n               Implementation,\
    \ April 2010.\n   [RFC2564]   Kalbfleisch, C., Krupczak, C., Presuhn, R., and\
    \ J.\n               Saperia, \"Application Management MIB\", RFC 2564,\n    \
    \           DOI 10.17487/RFC2564, May 1999,\n               <http://www.rfc-editor.org/info/rfc2564>.\n\
    \   [RFC2790]   Waldbusser, S. and P. Grillo, \"Host Resources MIB\", RFC\n  \
    \             2790, DOI 10.17487/RFC2790, March 2000,\n               <http://www.rfc-editor.org/info/rfc2790>.\n\
    \   [RFC2975]   Aboba, B., Arkko, J., and D. Harrington, \"Introduction to\n \
    \              Accounting Management\", RFC 2975, DOI 10.17487/RFC2975,\n    \
    \           October 2000, <http://www.rfc-editor.org/info/rfc2975>.\n   [RFC3410]\
    \   Case, J., Mundy, R., Partain, D., and B. Stewart,\n               \"Introduction\
    \ and Applicability Statements for Internet-\n               Standard Management\
    \ Framework\", RFC 3410,\n               DOI 10.17487/RFC3410, December 2002,\n\
    \               <http://www.rfc-editor.org/info/rfc3410>.\n   [RFC3729]   Waldbusser,\
    \ S., \"Application Performance Measurement\n               MIB\", RFC 3729, DOI\
    \ 10.17487/RFC3729, March 2004,\n               <http://www.rfc-editor.org/info/rfc3729>.\n\
    \   [RFC4022]   Raghunarayan, R., Ed., \"Management Information Base for\n   \
    \            the Transmission Control Protocol (TCP)\", RFC 4022,\n          \
    \     DOI 10.17487/RFC4022, March 2005,\n               <http://www.rfc-editor.org/info/rfc4022>.\n\
    \   [RFC4122]   Leach, P., Mealling, M., and R. Salz, \"A Universally\n      \
    \         Unique IDentifier (UUID) URN Namespace\", RFC 4122,\n              \
    \ DOI 10.17487/RFC4122, July 2005,\n               <http://www.rfc-editor.org/info/rfc4122>.\n\
    \   [RFC4150]   Dietz, R. and R. Cole, \"Transport Performance Metrics\n     \
    \          MIB\", RFC 4150, DOI 10.17487/RFC4150, August 2005,\n             \
    \  <http://www.rfc-editor.org/info/rfc4150>.\n   [RFC5226]   Narten, T. and H.\
    \ Alvestrand, \"Guidelines for Writing an\n               IANA Considerations\
    \ Section in RFCs\", BCP 26, RFC 5226,\n               DOI 10.17487/RFC5226, May\
    \ 2008,\n               <http://www.rfc-editor.org/info/rfc5226>.\n   [RFC5424]\
    \   Gerhards, R., \"The Syslog Protocol\", RFC 5424, DOI\n               10.17487/RFC5424,\
    \ March 2009,\n               <http://www.rfc-editor.org/info/rfc5424>.\n   [RFC5706]\
    \   Harrington, D., \"Guidelines for Considering Operations\n               and\
    \ Management of New Protocols and Protocol Extensions\",\n               RFC 5706,\
    \ DOI 10.17487/RFC5706, November 2009,\n               <http://www.rfc-editor.org/info/rfc5706>.\n\
    \   [RFC6709]   Carpenter, B., Aboba, B., Ed., and S. Cheshire, \"Design\n   \
    \            Considerations for Protocol Extensions\", RFC 6709,\n           \
    \    DOI 10.17487/RFC6709, September 2012,\n               <http://www.rfc-editor.org/info/rfc6709>.\n\
    \   [RFC6972]   Zhang, Y. and N. Zong, \"Problem Statement and\n             \
    \  Requirements of the Peer-to-Peer Streaming Protocol\n               (PPSP)\"\
    , RFC 6972, DOI 10.17487/RFC6972, July 2013,\n               <http://www.rfc-editor.org/info/rfc6972>.\n\
    \   [RFC7525]   Sheffer, Y., Holz, R., and P. Saint-Andre,\n               \"\
    Recommendations for Secure Use of Transport Layer\n               Security (TLS)\
    \ and Datagram Transport Layer Security\n               (DTLS)\", BCP 195, RFC\
    \ 7525, DOI 10.17487/RFC7525, May\n               2015, <http://www.rfc-editor.org/info/rfc7525>.\n\
    \   [SARACEN]   Sarecen P2P, <http://www.saracen-p2p.eu/>.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The authors appreciate the contributions made by Yingjie\
    \ Gu in the\n   early stages of the specification.  Also, they thank the following\n\
    \   people for their help and comments: Zhang Yunfei, Liao Hongluan, Roni\n  \
    \ Even, Dave Cottlehuber, Bhumip Khasnabish, Wu Yichuan, Peng Jin, Chi\n   Jing,\
    \ Zong Ning, Song Haibin, Chen Wei, Zhijia Chen, Christian\n   Schmidt, Lars Eggert,\
    \ David Harrington, Henning Schulzrinne, Kangheng\n   Wu, Martin Stiemerling,\
    \ Jianyin Zhang, Johan Pouwelse, Riccardo\n   Petrocco, and Arno Bakker.\n   The\
    \ views and conclusions contained herein are those of the authors\n   and should\
    \ not be interpreted as necessarily representing the\n   official policies or\
    \ endorsements, either expressed or implied, of\n   the SARACEN project [SARACEN],\
    \ the European Commission, Huawei, or\n   China Mobile.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Rui Santos Cruz\n   IST/INESC-ID/INOV\n   Phone: +351.939060939\n\
    \   Email: rui.cruz@ieee.org\n   Mario Serafim Nunes\n   IST/INESC-ID/INOV\n \
    \  Rua Alves Redol, n.9\n   1000-029 Lisboa\n   Portugal\n   Phone: +351.213100256\n\
    \   Email: mario.nunes@inov.pt\n   Jinwei Xia\n   Huawei\n   Nanjing, Baixia District\
    \ 210001\n   China\n   Phone: +86-025-86622310\n   Email: xiajinwei@huawei.com\n\
    \   Rachel Huang (editor)\n   Huawei\n   Email: rachel.huang@huawei.com\n   Joao\
    \ P. Taveira\n   IST/INOV\n   Email: joao.silva@inov.pt\n   Deng Lingli\n   China\
    \ Mobile\n   Email: denglingli@chinamobile.com\n"
