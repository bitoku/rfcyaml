- title: __initial_text__
  contents:
  - '               A SOCKS-based IPv6/IPv4 Gateway Mechanism

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a SOCKS-based IPv6/IPv4 gateway mechanism\n\
    \   that enables smooth heterogeneous communications between the IPv6\n   nodes\
    \ and IPv4 nodes.\n   It is based on the SOCKS protocol [SOCKSv5].  By applying\
    \ the SOCKS\n   mechanism to the heterogeneous communications and relaying two\n\
    \   \"terminated\" IPv4 and IPv6 connections at the \"application layer\"\n  \
    \ (the SOCKS server), the SOCKS-based IPv6/IPv4 gateway mechanism is\n   accomplished.\n\
    \   Since it is accomplished without introducing new protocols, it\n   provides\
    \ the same communication environment that is provided by the\n   SOCKS mechanism.\
    \  The same appearance is provided to the\n   heterogeneous communications.  No\
    \ conveniences or functionalities of\n   current communications are sacrificed.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The SOCKS-based IPv6/IPv4 gateway mechanism is based on a\
    \ mechanism\n   that relays two \"terminated\" IPv4 and IPv6 connections at the\n\
    \   \"application layer\" (the SOCKS server); its characteristics are\n   inherited\
    \ from those of the connection relay mechanism at the\n   application layer and\
    \ those of the native SOCKS mechanism.\n"
- title: 2. Basic SOCKS-based Gateway Mechanism
  contents:
  - "2. Basic SOCKS-based Gateway Mechanism\n   Figure 1 shows the basic SOCKS-based\
    \ gateway mechanism.\n                  Client C       Gateway G     Destination\
    \ D\n               +-----------+     (Server)\n               |Application|\n\
    \           +-->+===========+  +-------------+  +-----------+\n      same-+  \
    \ |*SOCKS Lib*|  |  *Gateway*  |  |Application|\n       API +-->+===========+\
    \  +=====---=====+  +-----------+\n               | Socket DNS|  | Socket  DNS\
    \ |  | Socket DNS|\n               +-----------+  +-------------+  +-----------+\n\
    \               | [ IPv X ] |  |[IPvX]|(IPvY)|  | ( IPv Y ) |\n              \
    \ +-----------+  +-------------+  +-----------+\n               |Network I/F|\
    \  | Network I/F |  |Network I/F|\n               +-----+-----+  +---+-----+---+\
    \  +-----+-----+\n                     |            |     |            |\n   \
    \                  +============+     +------------+\n                       socksified\
    \           normal\n                       connection         connection\n   \
    \                   (ctrl)+data          data only\n                Fig. 1 Basic\
    \ SOCKS-based Gateway Mechanism\n   In this figure, the Client C initiates the\
    \ communication to the\n   Destination D.  Two new functional blocks are introduced\
    \ and they\n   compose the mechanism.\n   One, *Socks Lib*, is introduced into\
    \ the client side (Client C) (this\n   procedure is called \"socksifying\"). \
    \ The *Socks Lib* is located\n   between the application layer and the socket\
    \ layer, and can replace\n   applications' socket APIs and DNS name resolving\
    \ APIs (e.g.,\n   gethostbyname(), getaddrinfo() etc.).  There is a mapping table\
    \ in it\n   for a \"DNS name resolving delegation\" feature (described below).\n\
    \   Each socksified application has its own *Socks Lib*.\n   The other, *Gateway*,\
    \ is installed on the IPv6 and IPv4 dual stack\n   node (Gateway G).  It is an\
    \ enhanced SOCKS server that enables any\n   types of protocol combination relays\
    \ between Client C (IPvX) and\n   Destination D (IPvY).  When the *Socks Lib*\
    \ invokes a relay, one\n   corresponding *Gateway* process (thread) is spawned\
    \ from the parent\n   *Gateway* to take charge of the relay connection.\n   The\
    \ following four types of combinations of IPvX and IPvY are\n   possible in the\
    \ mechanism.\n    type C ------ G ------ D\n           [IPvX]   (IPvY)\n     A\
    \      IPv4     IPv4       homogeneous (normal SOCKS)\n     B      IPv4     IPv6\
    \     * heterogeneous *\n     C      IPv6     IPv4     * heterogeneous *\n   \
    \  D      IPv6     IPv6       homogeneous\n   Type A is supported by the normal\
    \ SOCKS mechanism.  Type B and C are\n   the main targets for the SOCKS-based\
    \ IPv6/IPv4 gateway mechanism.\n   They provide heterogeneous communications.\
    \  Type D can be supported\n   by the natural extension of the SOCKS mechanism,\
    \ because it is a\n   homogeneous communication.\n   Since the *Socks Lib* communicates\
    \ with the *Gateway* by using SOCKS\n   protocol [SOCKSv5], the connection between\
    \ them (the Client C and the\n   Gateway G) is a special connection and is called\
    \ a \"socksified\n   connection\".  It can transfer not only data but also control\n\
    \   information (e.g., the location information of Destination D).\n   The connection\
    \ between the Gateway G and the Destination D is a\n   normal connection.  It\
    \ is not modified (socksified).  A server\n   application that runs on Destination\
    \ D does not notice the existence\n   of the Client C.  It recognizes that the\
    \ peer node of the connection\n   is the Gateway G (not Client C).\n   No new\
    \ protocols are introduced to the SOCKS protocol [SOCKSv5] to\n   accomplish the\
    \ mechanism.\n   * Packet Size Adjustment\n     Since the length of the IPv6 header\
    \ is different from that of the\n     IPv4 header, it is necessary to consider\
    \ the packet size adjustment\n     in heterogeneous communications.  If this is\
    \ not taken into\n     consideration, the packet size may exceed the MTU of the\
    \ network.\n     In the SOCKS-based IPv6/IPv4 gateway mechanism, it never exceeds\n\
    \     the MTU, because the mechanism is based on relaying two\n     \"terminated\"\
    \ connections at the \"application layer\".  The relayed\n     data is a simple\
    \ data stream for the application, and the packet\n     size is naturally adjusted\
    \ at each relayed connection side.\n   * Authenticated Relay\n     Since the SOCKS\
    \ is originally designed for firewall systems and it\n     has various authentication\
    \ methods, the relayed connections can be\n     authenticated by the native SOCKS\
    \ authentication methods.\n"
- title: 3. DNS Name Resolving Procedure
  contents:
  - "3. DNS Name Resolving Procedure\n   In all communication applications, it is\
    \ a necessary to obtain\n   destination IP address information to start a communication.\
    \  It is,\n   however, theoretically impossible for the heterogeneous\n   communications\
    \ to obtain correct information, because an existing\n   IPv4 application can\
    \ not deal with an IPv6 address.  It prepares only\n   a 4-byte address space\
    \ to store an IP address information, and it can\n   not store an IPv6 address\
    \ information into there.  This is a critical\n   problem caused by differences\
    \ in address length.\n   In order to solve the problem, a feature called \"DNS\
    \ name resolving\n   delegation\" is used in the SOCKS-based IPv6/IPv4 gateway\
    \ mechanism.\n   The feature involves the delegating of DNS name resolving actions\
    \ at\n   the source node (Client C) to the relay server (Gateway G).  Since\n\
    \   the relay server is an IPv4 and IPv6 dual stack node, DNS name\n   resolving\
    \ queries for any address family types of destinations can be\n   made without\
    \ causing any problems.  Therefore, it is not necessary to\n   modify the existing\
    \ DNS mechanism at all.\n   The feature supports not only the case in which a\
    \ destination logical\n   host name (FQDN) information is given but also the case\
    \ in which a\n   destination literal (numerical) IP address is given.  The latter\
    \ case\n   is supported in almost the same way as the former case.  Since the\n\
    \   literal IPv6 address expression includes colons (\":\"), it is\n   identified\
    \ as an FQDN (not a literal IPv4 address) for the IPv4\n   application.\n   The\
    \ SOCKS protocol specification [SOCKSv5] defines that IPv4 address,\n   IPv6 address,\
    \ and DOMAINNAME (FQDN) information can be used in the\n   ATYP (address type)\
    \ field of the SOCKS protocol format.  In the \"DNS\n   name resolving delegation\"\
    \ feature, the DOMAINNAME (FQDN) information\n   is used in the ATYP (address\
    \ type) field.  The FQDN information is\n   transferred from the Client C to the\
    \ Gateway G to indicate the\n   Destination D.\n   In order to solve the formerly\
    \ explained critical problem, an\n   appropriate \"fake IP\" address is introduced\
    \ in the feature, and it is\n   used as a virtual destination IP address for a\
    \ socksified\n   application.  A mapping table is also introduced in the *Socks\
    \ Lib*\n   (at the Client C) to manage mappings between \"fake IP\" and \"FQDN\"\
    .  A\n   \"fake IP\" address is used as a key to look up the corresponding\n \
    \  \"FQDN\" information.  The mapping table is local and independent of\n   other\
    \ applications or their *Socks Lib*s.\n   The transparentness to applications\
    \ is maintained in the feature.\n   Nothing special is required to execute it\
    \ except socksifying the\n   applications.  Since DNS name resolving APIs are\
    \ replaced by the\n   *Socks Lib*, the \"DNS name resolving delegation\" is executed\n\
    \   internally merely by calling the DNS name resolving APIs in ordinal\n   methods.\n\
    \   The \"DNS name resolving delegation\" is accomplished only when FQDN\n   information\
    \ is used in the ATYP (address type) field of the SOCKS\n   command.  Therefore,\
    \ it is mandatory to do so for heterogeneous\n   communications.  The method of\
    \ using FQDN information in the ATYP\n   field depends on the configuration setting\
    \ and implementation of the\n   SOCKS protocol.  In order to simplify the discussion,\
    \ only the case\n   in which the FQDN information is used in the ATYP field is\
    \ discussed\n   here.\n   The detailed internal procedure of the \"DNS name resolving\n\
    \   delegation\" and address mapping management related issues are\n   described\
    \ as follows.\n   1. An application on the source node (Client C) tries to get\
    \ the\n      IP address information of the destination node (Destination D) by\n\
    \      calling the DNS name resolving function (e.g., gethostbyname()).\n    \
    \  At this time, the logical host name (\"FQDN\") information of the\n      Destination\
    \ D is passed to the application's *Socks Lib* as an\n      argument of called\
    \ APIs.\n   2. Since the *Socks Lib* has replaced such DNS name resolving APIs,\n\
    \      the real DNS name resolving APIs is not called here.  The argued\n    \
    \  \"FQDN\" information is merely registered into a mapping table in\n      *Socks\
    \ Lib*, and a \"fake IP\" address is selected as information\n      that is replied\
    \ to the application from a reserved special IP\n      address space that is never\
    \ used in real communications (e.g.,\n      0.0.0.x).  The address family type\
    \ of the \"fake IP\" address must be\n      suitable for requests called by the\
    \ applications.  Namely, it must\n      belong to the same address family of the\
    \ Client C, even if the\n      address family of the Destination D is different\
    \ from it.  After\n      the selected \"fake IP\" address is registered into the\
    \ mapping\n      table as a pair with the \"FQDN\", it is replied to the application.\n\
    \   3. The application receives the \"fake IP\" address, and prepares a\n    \
    \  \"socket\".  The \"fake IP\" address information is used as an element\n  \
    \    of the \"socket\".  The application calls socket APIs (e.g.,\n      connect())\
    \ to start a communication.  The \"socket\" is used as an\n      argument of the\
    \ APIs.\n   4. Since the *Socks Lib* has replaced such socket APIs, the real\n\
    \      socket function is not called.  The IP address information of the\n   \
    \   argued socket is checked.  If the address belongs to the special\n      address\
    \ space for the fake address, the matched registered \"FQDN\"\n      information\
    \ of the \"fake IP\" address is obtained from the mapping\n      table.\n   5.\
    \ The \"FQDN\" information is transferred to the *Gateway* on the\n      relay\
    \ server (Gateway G) by using the SOCKS command that is\n      matched to the\
    \ called socket APIs.  (e.g., for connect(), the\n      CONNECT command is used.)\n\
    \   6. Finally, the real DNS name resolving API (e.g., getaddrinfo()) is\n   \
    \   called at the *Gateway*.  At this time, the received \"FQDN\"\n      information\
    \ via the SOCKS protocol is used as an argument of the\n      called APIs.\n \
    \  7. The *Gateway* obtains the \"real IP\" address from a DNS server,\n     \
    \ and creates a \"socket\".  The \"real IP\" address information is used\n   \
    \   as an element of the \"socket\".\n   8. The *Gateway* calls socket APIs (e.g.,\
    \ connect()) to communicate\n      with the Destination D.  The \"socket\" is\
    \ used as an argument of the\n      APIs.\n   The problem with the feature is\
    \ that failures of the DNS name\n   resolving process are detected incorrectly\
    \ at the source node (Client\n   C).  They are detected as connection-establishment\
    \ failures.\n   (Restrictions on applicability of \"fake IP\" address, etc., are\n\
    \   described in Section 5.)\n   * Operations for Address Management (reservation,\
    \ mapping etc.)\n   The SOCKS-based gateway mechanism does not require the reserving\
    \ of a\n   wide global address space for the address mapping, and complex\n  \
    \ address allocation and garbage-collection mechanisms are not\n   necessary.\n\
    \   Such address management operations are done at the *Socks Lib* by\n   using\
    \ the fake IP address and the mapping table for the DNS name\n   resolving delegation.\
    \  Since the mapping table is prepared in each\n   application, it is locally\
    \ closed and independent of other\n   applications.  Therefore, it is easy to\
    \ manage the table, and it is\n   not necessary to reserve a wide global address\
    \ space.\n"
- title: 4. Multiple Chained Relay Mechanism (Advanced usage)
  contents:
  - "4. Multiple Chained Relay Mechanism (Advanced usage)\n   The SOCKS-based gateway\
    \ mechanism has the flexibility to support\n   multiple chained relay topologies.\
    \  With the mechanism, IPv4 and IPv6\n   mixed various communication topologies\
    \ are accomplished.\n   Figure 2 shows the structure of the multiple chained relay\
    \ mechanism.\n        Client C       Gateway G1       Gateway G2    Destination\
    \ D\n     +-----------+     (Server 1)       (Server 2)\n     |Application|\n\
    \     +===========+  +-------------+  +-------------+  +-----------+\n     |*SOCKS\
    \ Lib*|  |  *Gateway1* |  |  *Gateway2* |  |Application|\n     +===========+ \
    \ +=====---=====+  +=====---=====+  +-----------+\n     | Socket DNS|  | Socket\
    \  DNS |  | Socket  DNS |  | Socket DNS|\n     +-----------+  +-------------+\
    \  +-------------+  +-----------+\n     | [ IPv X ] |  |[IPvX]|(IPvY)|  |(IPvY)|{IPvZ}|\
    \  | { IPv Z } |\n     +-----------+  +-------------+  +-------------+  +-----------+\n\
    \     |Network I/F|  | Network I/F |  | Network I/F |  |Network I/F|\n     +-----+-----+\
    \  +---+-----+---+  +---+-----+---+  +-----+-----+\n           |            |\
    \     |          |     |            |\n           +============+     +==========+\
    \     +------------+\n             socksified        socksified          normal\n\
    \             connection        connection        connection\n            (ctrl)+data\
    \       (ctrl)+data         data only\n                  Fig. 2 Multiple Chained\
    \ Relay Mechanism\n   In this figure, the source node (Client C) initiates the\n\
    \   communication with the destination (Destination D).  Underneath, the\n   connection\
    \ is replaced with three connections, and they are relayed\n   at the two relay\
    \ servers (Gateway G1 and G2).  The *Gateway* includes\n   the same type of functions\
    \ of *Socks Lib*.  By enabling the *Socks\n   Lib* functions at the *Gateway1*\
    \ on the first relay server (Gateway\n   G1), the multiple chained relay topology\
    \ is accomplished.\n   There is no limitation on the number of relay operations\
    \ between the\n   source node and the final destination node.  It is possible\
    \ to have\n   more than two intermediate relay servers.  To simplify the\n   explanation,\
    \ a twice-relayed topology is shown here.\n   Since the multiple chained relay\
    \ is more complex than one-time relay\n   and causes complexity, it is recommended\
    \ that the multiple chained\n   relay communication should be used only when it\
    \ is necessary for some\n   reason (e.g., usable protocols or topologies are limited\
    \ by routers\n   etc.).\n"
- title: 5. Applicability statement
  contents:
  - "5. Applicability statement\n   The SOCKS-based gateway mechanism requests socksification\
    \ of\n   applications (install *Socks Lib*) to accomplish heterogeneous\n   communications.\
    \  It is not necessary to modify (change source codes\n   and recompile them,\
    \ etc.) the applications, because typical\n   socksification is done by changing\
    \ the linking order of dynamic link\n   libraries (specifically, by linking the\
    \ SOCKS dynamic link library\n   before the dynamic link libraries for normal\
    \ socket and DNS name\n   resolving APIs).\n   The mechanism does not request\
    \ modification of the DNS system,\n   because the DNS name resolving procedure\
    \ at the Client C is delegated\n   to the dual stack node Gateway G.\n   Other\
    \ than the socksification, the SOCKS-based gateway mechanism has\n   the following\
    \ three types of constraints.\n   1. Essential constraints:\n      Constraints\
    \ are caused by the address length difference between\n      IPv4 and IPv6.\n\
    \      Functions that request an IP address as one of the return values\n    \
    \  (e.g., getpeername() and getsockname() etc.) can not provide the\n      correct\
    \ IP address as a return value.  However, a suitable port\n      value can be\
    \ provided, because IPv4 and IPv6 use the same size\n      port space and an appropriate\
    \ port information is transferred by\n      the SOCKS protocol.\n   2. Constraints\
    \ of the SOCKS mechanism:\n      Since the current SOCKS system can not socksify\
    \ all of the tricky\n      applications in which extraordinary manners are used\
    \ to create\n      connections, the SOCKS-based gateway mechanism can not be applied\n\
    \      to them.\n   3. Constraints to deal with the fake address:\n      The fake\
    \ address must be dealt with as a temporary value at the\n      application. \
    \ It is used as a key value in the mapping table for\n      the \"DNS name resolving\
    \ delegation\" feature.  When the application\n      is finished and the mapping\
    \ table disappears, the fake address\n      information must be also released.\n\
    \      Even if it is recorded permanently (e.g., recorded as a bookmark),\n  \
    \    serious problems will not occur.  The recorded fake address\n      information\
    \ will merely become useless, because fake address\n      information is taken\
    \ from a reserved special IP address space that\n      is never used in real communications\
    \ (e.g., 0.0.0.x) and such a\n      information is useless for the normal communication\
    \ applications.\n      Furthermore, such cases will be rare because most applications\n\
    \      usually record FQDN information (not fake IP address information)\n   \
    \   to the bookmark, etc.\n"
- title: 5.1 Native SOCKS mechanism considerations
  contents:
  - "5.1 Native SOCKS mechanism considerations\n   The characteristics of the SOCKS-based\
    \ IPv6/IPv4 gateway mechanism\n   are inherited from those of the native SOCKS\
    \ mechanism.  Therefore,\n   consideration issues of the native SOCKS mechanism\
    \ are discussed in\n   this section.\n   The SOCKSv5 protocol is composed of three\
    \ commands (CONNECT, BIND and\n   UDP ASSOCIATE).  All of three commands can be\
    \ applied in the SOCKS-\n   based IPv6/IPv4 gateway mechanism.\n   This document\
    \ is described with assuming the usage of the CONNECT\n   command mainly, because\
    \ the CONNECT command is the main and most\n   frequently used command in the\
    \ SOCKS mechanism.  Since the CONNECT\n   command does not have clear week points,\
    \ we can use it freely without\n   considerations.\n   The other (BIND and UDP\
    \ ASSOCIATE) commands have the following weak\n   points.  So, we have to consider\
    \ these points when we use the BIND or\n   UDP ASSOCIATE commands in the mechanism.\n\
    \   The BIND command is basically designed to support reverse-channel\n   rendezvous\
    \ of the FTP type applications.  So, general usages of the\n   BIND command may\
    \ cause problems.\n   The UDP ASSOCIATE command is basically designed for simple\
    \ UDP\n   applications (e.g., archie).  It is not general enough to support a\n\
    \   large class of applications that use both TCP and UDP.\n"
- title: 6. Security Considerations
  contents:
  - "6. Security Considerations\n   Since the SOCKS-based IPv6/IPv4 gateway mechanism\
    \ is based on SOCKSv5\n   protocol, the security feature of the mechanism matches\
    \ that of\n   SOCKSv5.  It is described in the Security Considerations section\
    \ of\n   the SOCKS Protocol Version 5 [SOCKSv5].\n   The mechanism is based on\
    \ relaying two \"terminated\" connections at\n   the \"application layer\".  The\
    \ end-to-end security is maintained at\n   each of the relayed connections (i.e.,\
    \ between Client C and Gateway\n   G, and between Gateway G and Destination D).\
    \  The mechanism does not\n   provide total end-to-end security relay between\
    \ the original source\n   (Client C) and the final destination (Destination D).\n"
- title: Appendix A. Implementations
  contents:
  - "Appendix A. Implementations\n   Currently, there are two independent implementations\
    \ of the SOCKS-\n   based IPv6/IPv4 gateway mechanism.  Both of them are open\
    \ to the\n   public.\n   One is NEC's implementation.  Its source codes are available\
    \ at the\n   following URL.\n            http://www.socks.nec.com/\n   The other\
    \ is Fujitsu Lab.'s implementation, which is called\n   \"SOCKS64\".  Its source\
    \ codes are available at the following URL.\n            ftp://ftp.kame.net/pub/kame/misc/socks64-...\n"
- title: References
  contents:
  - "References\n   [SOCKSv5]    Leech, M., Ganis, M., Lee, Y., Kuris, R., Koblas,\
    \ D. and\n                L. Jones, \"SOCKS Protocol V5\", RFC 1928, April 1996.\n\
    \   [TRANSMECH]  Gilligan, R. and E. Nordmark, \"Transition Mechanisms for\n \
    \               IPv6 Hosts and Routers\", RFC 2893, August 2000.\n   [IPv6]  \
    \     Deering, S. and R. Hinden, \"Internet Protocol, Version 6\n            \
    \    (IPv6) Specification\", RFC 2460, December 1998.\n   [INET99]     H. Kitamura,\
    \ \"Entering the IPv6 communication world by\n                the SOCKS-based\
    \ IPv6/IPv4 Translator\", in Proceedings of\n                INET99, July 1999.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Hiroshi Kitamura\n   NEC Corporation\n   Development Laboratories\n\
    \   (Igarashi Building 4F) 11-5, Shibaura 2-Chome,\n   Minato-Ku, Tokyo 108-8557,\
    \ JAPAN\n   Phone: +81 (3) 5476-1071\n   Fax:   +81 (3) 5476-1005\n   EMail: kitamura@da.jp.nec.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
