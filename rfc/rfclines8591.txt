Abstract Mobile messaging applications used with the Session Initiation Protocol (SIP) commonly use some combination of the SIP MESSAGE method and the Message Session Relay Protocol (MSRP).
While these provide mechanisms for hop by hop security, neither natively provides end to end protection.
This document offers guidance on how to provide end to end authentication, integrity protection, and confidentiality using the Secure/Multipurpose Internet Mail Extensions (S/MIME).
It updates and provides clarifications for RFCs 3261, 3428, and 4975.
Introduction Several mobile messaging systems use the Session Initiation Protocol (SIP) [RFC3261], typically as some combination of the SIP MESSAGE method [RFC3428] and the Message Session Relay Protocol (MSRP) [RFC4975].
For example, Voice over LTE (VoLTE) uses the SIP MESSAGE method to send Short Message Service (SMS) messages.
The Open Mobile Alliance (OMA)
Converged IP Messaging (CPM) system [CPM] uses the SIP MESSAGE method for short "pager mode" messages and uses MSRP for large messages and for sessions of messages.
The Global System for Mobile Communications Association (GSMA)
Rich Communication Services (RCS) uses CPM for messaging [RCS].
At the same time, organizations increasingly depend on mobile messaging systems to send notifications to their customers.
Many of these notifications are security sensitive.
For example, such notifications are commonly used for notice of financial transactions, notice of login or password change attempts, and the sending of two factor authentication codes.
Both SIP and MSRP can be used to transport any content using Multipurpose Internet Mail Extensions (MIME) formats.
The SIP MESSAGE method is typically limited to short messages (under 1300 octets for the MESSAGE request).
MSRP can carry arbitrarily large messages and can break large messages into chunks.
While both SIP and MSRP provide mechanisms for hop by hop security, neither provides native end to end protection.
Instead, they depend on S/MIME [RFC8550] [RFC8551].
However, at the time of this writing, S/MIME is not in common use for SIP based and MSRP based messaging services.
This document updates and clarifies RFCs 3261, 3428, and 4975 in an attempt to make S/MIME for SIP and MSRP easier to implement and deploy in an interoperable fashion.
This document updates RFCs 3261, 3428, and 4975 to update the cryptographic algorithm recommendations and the handling of S/MIME data objects.
It updates RFC 3261 to allow S/MIME signed messages to be sent without embedded certificates in some situations.
Finally, it updates RFCs 3261, 3428, and 4975 to clarify error reporting requirements for certain situations.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
when, and only when, they appear in all capitals, as shown here.
This document discusses the use of S/MIME with SIP based messaging.
Other standardized messaging protocols exist, such as the Extensible Messaging and Presence Protocol (XMPP)
Likewise, other end to end protection formats exist, such as JSON Web Signatures [RFC7515] and JSON Web Encryption [RFC7516].
This document focuses on SIP based messaging because its use is becoming more common in mobile environments.
It focuses on S/MIME, since several mobile operating systems already have S/MIME libraries installed.
While there may also be value in specifying end to end security for other messaging and security mechanisms, it is out of scope for this document.
MSRP sessions are negotiated using the Session Description Protocol (SDP) [RFC4566] offer/answer mechanism [RFC3264] or similar mechanisms.
This document assumes that SIP is used for the offer/answer exchange.
However, the techniques should be adaptable to other signaling protocols.
[RFC3261], [RFC3428], and [RFC4975] already describe the use of S/MIME.
[RFC3853] updates SIP to support the Advanced Encryption Standard (AES).
In aggregate, that guidance is incomplete, contains inconsistencies, and is still out of date in terms of supported and recommended algorithms.
The guidance in RFC 3261 is based on an implicit assumption that S/MIME is being used to secure signaling applications.
That advice is not entirely appropriate for messaging applications.
For example, it assumes that message decryption always happens before the SIP transaction completes.
This document offers normative updates and clarifications to the use of S/MIME with the SIP MESSAGE method and MSRP.
It does not attempt to define a complete secure messaging system.
Such a system would require considerable work around user enrollment, certificate and key generation and management, multi party chats, device management, etc.
While nothing herein should preclude those efforts, they are out of scope for this document.
This document primarily covers the sending of single messages   for example, "pager mode messages" sent using the SIP MESSAGE method and "large messages" sent in MSRP.
Techniques to use a common signing or encryption key across a session of messages are out of scope for this document.
Cryptographic algorithm requirements in this document are intended to supplement those already specified for SIP and MSRP.
The Cryptographic Message Syntax (CMS) [RFC5652] is an encapsulation syntax that is used to digitally sign, digest, authenticate, or encrypt arbitrary message content.
The CMS supports a variety of architectures for certificate based key management, especially the one defined by the IETF PKIX (Public Key Infrastructure using X.509)
The CMS values are generated using ASN.1 [X680], using the Basic Encoding Rules (BER) and Distinguished Encoding Rules (DER) [X690].
The S/MIME Message Specification [RFC8551] defines MIME body parts based on the CMS.
In this document, the application/pkcs7 mime media type is used to digitally sign an encapsulated body part, and it is also used to encrypt an encapsulated body part.
Signed Messages While both SIP and MSRP require support for the multipart/signed format, the use of application/pkcs7 mime is RECOMMENDED for most signed messages.
Experience with the use of S/MIME in electronic mail has shown that multipart/signed bodies are at greater risk of "helpful" tampering by intermediaries, a common cause of signature validation failure.
This risk is also present for messaging applications; for example, intermediaries might insert Instant Message Disposition Notification (IMDN) requests [RFC5438] into messages.
The application/pkcs7 mime format is also more compact, which can be important for messaging applications, especially when using the SIP MESSAGE method.
The use of multipart/signed may still make sense if the message needs to be readable by receiving agents that do not support S/MIME.
When generating a signed message, sending User Agents (UAs) SHOULD follow the conventions specified in [RFC8551] for the application/pkcs7 mime media type with smime type signed data.
When validating a signed message, receiving UAs MUST follow the conventions specified in [RFC8551] for the application/pkcs7 mime media type with smime type signed data.
Sending and receiving UAs MUST support the SHA 256 message digest algorithm [RFC5754].
} Sending and receiving UAs MAY support other message digest algorithms.
Sending and receiving UAs MUST support the Elliptic Curve Digital Signature Algorithm (ECDSA) using the NIST P 256 elliptic curve and the SHA 256 message digest algorithm [RFC5480]
Sending and receiving UAs SHOULD support the Edwards curve Digital Signature Algorithm (EdDSA) with curve25519 (Ed25519)
When generating an encrypted message, sending UAs MUST follow the conventions specified in [RFC8551] for the application/pkcs7 mime media type with smime type auth enveloped data.
When decrypting a received message, receiving UAs MUST follow the conventions specified in [RFC8551] for the application/pkcs7 mime media type with smime type auth enveloped data.
Sending and receiving UAs MUST support the AES 128 GCM algorithm for content encryption [
For convenience, the AES 128 GCM algorithm identifier is repeated here:
) gov(101) csor(3) nistAlgorithm(4) aes(1)
6 } Sending and receiving UAs MAY support other content authenticated encryption algorithms.
Sending and receiving UAs MUST support the AES 128 WRAP algorithm for encryption of one AES key with another AES key [RFC3565].
For convenience, the AES 128 WRAP algorithm identifier is repeated here:
) gov(101) csor(3) nistAlgorithm(4) aes(1)
Sending and receiving UAs MAY support other key encryption algorithms.
Symmetric key encryption keys can be distributed before messages are sent.
If sending and receiving UAs support previously distributed key encryption keys, then they MUST assign a KEKIdentifier [RFC5652] to the previously distributed symmetric key.
Alternatively, a key agreement algorithm can be used to establish a single use key encryption key.
If sending and receiving UAs support key agreement, then they MUST support the Elliptic Curve Diffie Hellman (ECDH)
algorithm using the NIST P 256 elliptic curve and the ANSI X9.63 KDF key derivation function with the SHA 256 message digest algorithm [RFC5753].
If sending and receiving UAs support key agreement, then they SHOULD support the ECDH algorithm using curve25519 (X25519)
For convenience, (1) the identifier for the ECDH algorithm using the ANSI X9.63 KDF with the SHA 256 algorithm and (2)
the identifier for the X25519 algorithm are repeated here:
Signed and Encrypted Messages RFC 3261, Section 23.2 says that when a User Agent Client (UAC) sends signed and encrypted data, it "SHOULD" send an EnvelopedData object encapsulated within a SignedData message.
That essentially says that one should encrypt first, then sign.
This document updates RFC 3261 to say that, when sending signed and encrypted user content in a SIP MESSAGE request, the sending UAs MUST sign the message first, and then encrypt it.
That is, it must send the SignedData object inside an AuthEnvelopedData object.
For interoperability reasons, recipients SHOULD accept messages signed and encrypted in either order.
Certificate Handling Sending and receiving UAs MUST follow the S/MIME certificate handling procedures [RFC8550], with a few exceptions detailed below.
In both SIP and MSRP, the identity of the sender of a message is typically expressed as a SIP URI.
The subject alternative name extension is used as the preferred means to convey the SIP URI of the subject of a certificate.
Any SIP URI present MUST be encoded using the uniformResourceIdentifier CHOICE of the GeneralName type as described in [RFC5280], Section 4.2.1.6.
Since the SubjectAltName type is a SEQUENCE OF GeneralName, multiple URIs MAY be present.
Other methods of identifying a certificate subject MAY be used.
When validating a certificate, receiving UAs MUST support the ECDSA using the NIST P 256 elliptic curve and the SHA 256 message digest algorithm [RFC5480].
Sending and receiving UAs MAY support other digital signature algorithms for certificate validation.
Transfer Encoding SIP and MSRP UAs are always capable of receiving binary data.
Inner S/MIME entities do not require base64 encoding [RFC4648].
Both SIP and MSRP provide 8 bit safe transport channels; base64 encoding is not generally needed for the outer S/MIME entities.
However, if there is a chance a message might cross a 7 bit transport (for example, gateways that convert to a 7 bit transport for intermediate transfer), base64 encoding may be needed for the outer entity.
User Agent Capabilities Messaging UAs may implement a subset of S/MIME capabilities.
Even when implemented, some features may not be available due to configuration.
For example, UAs that do not have user certificates cannot sign messages on behalf of the user or decrypt encrypted messages sent to the user.
At a minimum, a UA that supports S/MIME MUST be able to validate a signed message.
End user certificates have long been a barrier to large scale S/MIME deployment.
But since UAs can validate signatures even without local certificates, the use case of organizations sending secure notifications to their users becomes a sort of "low hanging fruit".
That being said, the signed notification use case still requires shared trust anchors.
SIP and MSRP UAs advertise their level of support for S/MIME by indicating their capability to receive the "application/pkcs7 mime" media type.
The fact that a UA indicates support for the "multipart/signed" media type does not necessarily imply support for S/MIME.
The UA might just be able to display clear signed content without validating the signature.
UAs that wish to indicate the ability to validate signatures for clear signed messages MUST also indicate support for "application/pkcs7 signature".
A UA can indicate that it can receive all smime types by advertising "application/pkcs7 mime" with no parameters.
If a UA does not accept all smime types, it advertises the media type with the appropriate parameters.
If more than one smime type is supported, the UA includes a separate instance of the media type string, appropriately parameterized, for each.
For example, a UA that can only receive signed data would advertise "application/pkcs7 mime; smime type signed data".
SIP signaling can fork to multiple destinations for a given Address of Record (AoR).
A user might have multiple UAs with different capabilities; the capabilities remembered from an interaction with one such UA might not apply to another.
UAs can also advertise or discover S/MIME using out of band mechanisms.
Such mechanisms are beyond the scope of this document.
Using S/MIME with the SIP MESSAGE Method
The use of S/MIME with the SIP MESSAGE method is described in Section 11.3 of [RFC3428], and for SIP in general in Section 23 of [RFC3261].
This section and its child sections offer clarifications for the use of S/MIME with the SIP MESSAGE method, along with related updates to RFCs 3261 and 3428.
Size Limit SIP MESSAGE requests are typically limited to 1300 octets.
That limit applies to the entire message, including both SIP header fields and the message content.
This is due to the potential for fragmentation of larger requests sent over UDP.
In general, it is hard to be sure that no proxy or other intermediary will forward a SIP request over UDP somewhere along the path.
Therefore, S/MIME messages sent using the SIP MESSAGE method should be kept as small as possible.
Messages that will not fit within the limit can be sent using MSRP.
Section 23.2 of [RFC3261] requires that a SignedData message contain a certificate to be used to validate the signature.
In order to reduce the message size, this document updates that text to say that a SignedData message sent in a SIP MESSAGE request SHOULD contain the certificate but MAY omit it if the sender has reason to believe that the recipient (1) already has the certificate in its keychain or (2) has some other method of accessing the certificate.
SIP User Agent Capabilities SIP UAs can theoretically indicate support for S/MIME by including the appropriate media type or types in the SIP Accept header field in a response to an OPTIONS request, or in a 415 (Unsupported Media Type) response to a SIP request that contained an unsupported media type in the body.
Unfortunately, this approach may not be reliable in the general case.
In the case where a downstream SIP proxy forks an OPTIONS or other non INVITE request to multiple User Agent Servers (UASs), that proxy will only forward the "best" response.
If the recipient has multiple devices, the sender may only learn the capabilities of the device that sent the forwarded response.
Blindly trusting this information could result in S/MIME messages being sent to UAs that do not support it, which would be at best confusing and at worst misleading to the recipient.
UAs might be able to use the UA capabilities framework [RFC3840] to indicate support.
However, doing so would require the registration of one or more media feature tags with IANA.
UAs MAY use other out of band methods to indicate their level of support for S/MIME.
Failure Cases Section 23.2 of [RFC3261] requires that the recipient of a SIP request that includes a body part of an unsupported media type and a Content Disposition header field "handling" parameter of "required" return a 415 (Unsupported Media Type) response.
Given that SIP MESSAGE exists for no reason other than to deliver content in the body, it is reasonable to treat the top level body part as always required.
However, [RFC3428] makes no such assertion.
This document updates Section 11.3 of [RFC3428] to add the statement that a UAC that receives a SIP MESSAGE request with an unsupported media type MUST return a 415 response.
Section 23.2 of [RFC3261] says that if a recipient receives an S/MIME body encrypted to the wrong certificate, it MUST return a SIP 493 (Undecipherable) response and SHOULD send a valid certificate in that response.
This is not always possible in practice for SIP MESSAGE requests.
The UAS may choose not to decrypt a message until the user is ready to read it.
Messages may be delivered to a message store or sent via a store and forward service.
This document updates RFC 3261 to say that the UAS SHOULD return a SIP 493 response if it immediately attempts to decrypt the message and determines that the message was encrypted to the wrong certificate.
However, it MAY return a 200 class response if decryption is deferred.
Using S/MIME with MSRP MSRP has features that interact with the use of S/MIME.
In particular, the ability to send messages in chunks, the ability to send messages of unknown size, and the use of SDP to indicate media type support create considerations for the use of S/MIME.
Chunking MSRP allows a message to be broken into "chunks" for transmission.
In this context, the term "message" refers to an entire message that one user might send to another.
A chunk is a fragment of that message sent in a single MSRP SEND request.
All of the chunks that make up a particular message share the same Message ID value.
The sending UA may break a message into chunks, which the receiving UA will reassemble to form the complete message.
Intermediaries such as MSRP relays [RFC4976] might break chunks into smaller chunks or might reassemble chunks into larger ones; therefore, the message received by the recipient may be broken into a different number of chunks than were sent by the recipient.
Intermediaries might also cause chunks to be received in a different order than sent.
The sender MUST apply any S/MIME operations to the whole message prior to breaking it into chunks.
Likewise, the receiver needs to reassemble the message from its chunks prior to decrypting, validating a signature, etc.
MSRP chunks are framed using an end line.
The end line comprises seven hyphens, a 64 bit random value taken from the start line, and a continuation flag.
MSRP requires the sending UA to scan data to be sent in a specific chunk to ensure that the end line does not accidentally occur as part of the data.
This scanning occurs on a chunk rather than a whole message; consequently, it must occur after the sender applies any S/MIME operations.
Streamed Data MSRP allows a mode of operation where a UA sends some chunks of a message prior to knowing the full length of the message.
For example, a sender might send streamed data over MSRP as a single message, even though it doesn't know the full length of that data in advance.
This mode is incompatible with S/MIME, since a sending UA must apply S/MIME operations to the entire message in advance of breaking it into chunks.
Therefore, when sending a message in an S/MIME format, the sender MUST include the Byte Range header field for every chunk, including the first chunk.
The Byte Range header field MUST include the total length of the message.
A higher layer could choose to break such streamed data into a series of messages prior to applying S/MIME operations, so that each fragment appears as a distinct (separate) S/MIME message in MSRP.
Such mechanisms are beyond the scope of this document.
Indicating Support for S/MIME A UA that supports this specification MUST explicitly include the appropriate media type or types in the "accept types" attribute in any SDP offer or answer that proposes MSRP.
It MAY indicate that it requires S/MIME wrappers for all messages by putting appropriate S/MIME media types in the "accept types" attribute and putting all other supported media types in the "accept wrapped types" attribute.
in the "accept types" attribute as potentially supporting S/MIME.
If the peer returns an MSRP 415 (MIME type not understood) response to an attempt to send an S/MIME message, the sender should treat the peer as not supporting S/MIME for the duration of the session, as indicated in Section 7.3.1 of [RFC4975].
While these SDP attributes allow an endpoint to express support for certain media types only when wrapped in a specified envelope type, it does not allow the expression of more complex structures.
For example, an endpoint can say that it supports text/plain and text/html, but only when inside an application/pkcs7 or message/cpim container, but it cannot express a requirement for the leaf types to always be contained in an application/pkcs7 container nested inside a message/cpim container.
This has implications for the use of S/MIME with the message/cpim format.
MSRP allows multiple reporting modes that provide different levels of feedback.
If the sender includes a Failure Report header field with a value of "no", it will not receive failure reports.
This mode should not be used carelessly, since such a sender would never see a 415 response as described above and would have no way to learn that the recipient could not process an S/MIME body.
MSRP URIs MSRP URIs are ephemeral.
Endpoints MUST NOT use MSRP URIs to identify certificates or insert MSRP URIs into certificate Subject Alternative Name fields.
When MSRP sessions are negotiated using SIP [RFC3261], the SIP AoRs of the peers are used instead.
Note that MSRP allows messages to be sent between peers in either direction.
A given MSRP message might be sent from the SIP offerer to the SIP answerer.
Thus, the sender and recipient roles may reverse between one message and another in a given session.
Successful delivery of an S/MIME message does not indicate that the recipient successfully decrypted the contents or validated a signature.
Decryption and/or validation may not occur immediately on receipt, since the recipient may not immediately view the message, and the UA may choose not to attempt decryption or validation until the user requests it.
Likewise, successful delivery of S/MIME enveloped data does not, on its own, indicate that the recipient supports the enclosed media type.
If the peer only implicitly indicated support for the enclosed media type through the use of a wildcard in the "accept types" or "accept wrapped types" SDP attributes, it may not decrypt the message in time to send a 415 response.
S/MIME Interaction with Other SIP Messaging Features 9.1.
Common Profile for Instant Messaging
The Common Profile for Instant Messaging (CPIM)
[RFC3860] defines an abstract messaging service, with the goal of creating gateways between different messaging protocols that could relay instant messages without change.
The SIP MESSAGE method and MSRP were initially designed to map to the CPIM abstractions.
However, at the time of this writing, CPIM compliant gateways have not been deployed.
To the authors' knowledge, no other IM protocols have been explicitly mapped to CPIM.
CPIM also defines the abstract messaging URI scheme "im:".
As of the time of this writing, the "im:" scheme is not in common use.
The CPIM message format [RFC3862] allows UAs to attach transport neutral metadata to arbitrary MIME content.
The format was designed as a canonicalization format to allow signed data to cross protocol converting gateways without loss of metadata needed to verify the signature.
While it has not typically been used for that purpose, it has been used for other metadata applications   for example
, IMDNs [RFC5438] and MSRP multi party chat [RFC7701].
In the general case, a sender applies end to end signature and encryption operations to the entire MIME body.
However, some messaging systems expect to inspect and in some cases add or modify metadata in CPIM header fields.
For example, CPM based and RCS based services include application servers that may need to insert timestamps into chat messages and may use additional metadata to characterize the content and purpose of a message to determine application behavior.
The former will cause validation failure for signatures that cover CPIM metadata, while the latter is not possible if the metadata is encrypted.
Clients intended for use in such networks
MAY choose to apply end to end signatures and encryption operations to only the CPIM payload, leaving the CPIM metadata unprotected from inspection and modification.
UAs that support S/MIME and CPIM SHOULD be able to validate signatures and decrypt enveloped data both (1) when those operations are applied to the entire CPIM body and (2) when they are applied to just the CPIM payload.
This means that the receiver needs to be flexible in its MIME document parsing and that it cannot make assumptions that S/MIME protected body parts will always be in the same position or level in the message payload.
If such clients need to encrypt or sign CPIM metadata end to end, they can nest a protected CPIM message format payload inside an unprotected CPIM message envelope.
The use of CPIM metadata fields to identify certificates or to authenticate SIP or MSRP header fields is out of scope for this document.
The IMDN mechanism [RFC5438] allows both endpoints and intermediary application servers to request and to generate delivery notifications.
The use of S/MIME does not impact strictly end to end use of IMDNs.
The IMDN mechanism recommends that devices that are capable of doing so sign delivery notifications.
It further requires that delivery notifications that result from encrypted messages also be encrypted.
However, the IMDN mechanism allows intermediary application servers to insert notification requests into messages, to add routing information to messages, and to act on notification requests.
It also allows list servers to aggregate delivery notifications.
Such intermediaries will be unable to read end to end encrypted messages in order to interpret delivery notice requests.
Intermediaries that insert information into end to end signed messages will cause the signature validation to fail.
The following sections show examples of S/MIME messages in SIP and MSRP.
The examples include the tags "[start hex]" and "[end hex]" to denote binary content shown in hexadecimal.
The tags are not part of the actual message and do not count towards the Content Length header field values.
In all of these examples, the cleartext message is the string "Watson, come here
I want to see you."
followed by a newline character.
The cast of characters includes Alice, with a SIP AoR of "alice@example.com", and Bob, with a SIP AoR of "bob@example.org".
Appendix A shows the detailed content of each S/MIME body.
Signed Message in SIP including the Sender's Certificate Figure 1 shows a message signed by Alice.
This body uses the "application/pkcs7 mime" media type with an smime type parameter value of "signed data".
The S/MIME body includes Alice's signing certificate.
Even though the original message content is fairly short and only minimal SIP header fields are included, the total message size approaches the maximum allowed for the SIP MESSAGE method unless the UAC has advance knowledge that all SIP hops will use congestion controlled transport protocols.
A message that included all the SIP header fields that are commonly in use in some SIP deployments would likely exceed the limit.
sip:bob@example.org Call ID: asd88asd66b@1.2.3.4 CSeq:
1 MESSAGE Content Transfer Encoding: binary Content Type: application/pkcs7 mime; smime type signed data; name "smime.p7m" Content Disposition: attachment; filename "smime.p7m
" Content Length: 762 [start hex]
Signed Message in SIP 10.2.
Signed Message in SIP with No Certificate Figure 2 shows the same message from Alice without the embedded certificate.
The shorter total message length may be more manageable.
sip:bob@example.org Call ID: asd88asd66b@1.2.3.4 CSeq:
1 MESSAGE Content Transfer Encoding: binary Content Type: application/pkcs7 mime; smime type signed data; name "smime.p7m" Content Disposition: attachment; filename "smime.p7m
" Content Length: 395 [start hex]
608648016503040201305306092a864886f70d010701a0460444436f6e74656e 742d547970653a20746578742f706c61696e0d0a0d0a576174736f6e2c20636f 6d652068657265202d20492077616e7420746f2073656520796f752e0d0a3182 0109308201050201013033302631143012060355040a0c0b6578616d706c652e 636f6d310e300c06035504030c05416c696365020900b8793ec0e4c21530300b
0609608648016503040201a069301806092a864886f70d010903310b06092a86 4886f70d010701301c06092a864886f70d010905310f170d3139303132363036 313335345a302f06092a864886f70d01090431220420ef778fc940d5e6dc2576 f47a599b3126195a9f1a227adaf35fa22c050d8d195a300a06082a8648ce3d04 03020447304502203607275592d30c8c5a931041a01804d60c638ac9a8080918
Signed Message in SIP with No Certificate Included 10.3.
MSRP Signed and Encrypted Message in a Single Chunk Figure 3 shows a signed and encrypted message from Bob to Alice sent via MSRP.
MSRP dsdfoe38sd SEND To Path
msrp://bobpc.example.org:8888/9di4eae923wzd;tcp Message ID: 456so39s Byte Range: 1 1940/1940 Content Disposition: attachment; filename "smime.p7m" Content Type: application/pkcs7 mime; smime type auth enveloped data; name "smime.p7m" [start hex]
3082024b0201003033302631143012060355040a0c0b6578616d706c652e636f 6d310e300c06035504030c05416c69636502090083f50bb70bd5c40e300d0609 2a864886f70d010101050004820200759a61b4ddf1f1af24668005635e476110 fa2723c1b9e45484b6d33e8387de967dc5e0cafb35571a56a1975cb550e7be31 c131da80fb731024845babb8d64cac26040424d9330561c843999415dd644b3c ad95072f71451393c99f282c4883bd0ccc5dd54b931464e00a6e55e592c51a68 de1062516ec7d3ca8e764bb8ac789a88377765ef8dc36c0a6ed3ecae5285cac6 a29d5059445719a1bdcf906e0ff37e2c2ef0f4ec6225100cc062e1c748963bbc 88b8e3dfcf714073729dd5c7583e758acf3d186f2fa417be22c37c9a76c6b427 29aad27f73ae44ac98474d1eeb48948c12a403d0b3ce08a218d6af456924897c
9d7a3c90ba79e6d7d5c8d89bb54a667423e43b0b7d6f78c0b4ab67bc343662a6 35fe595f1149c53950cac2e0ba318c227e6f76a8d940400fd3d3ea1c8ecea003 dcce2f1fb00f5cea335de1303fcbf93d8e1cbfd682f19beb624bacd1d7b8f580 f114a13b890894fb4044a5daa764b7f8c5ff92949452b35aeb9639b8ad63c051 5c95ccc6f823c2201067ea2262413fef397d48f7b6143f842ae8e1a48cad3ae0 1abaa3cf9ee7e36620e05cca0611bfac00eef1a498f2d259b9f0f7da83ef6f1b 061f387c2dc48c8b5dbaca862308f32f47925165c9e5ebb467799884918dd697
89c0b4263bf10f56243f9e72ef3b3899a539d9a3ac5be2b69400a3cf8d196c5c ed697b2ed803b987a5ee85c5095b48da7a5b03b47e2b9fe4cd4bc3098e864e0c e7d467da99cd7f3a9e947b5eea77f7a6be16c8c7e9e0decc1ff132559c234321 7b9c2950386e85d2942121086cdfa19658195be6d7f86bca9881b695082964f1 2e7cf801025d6792c6882409414d703321ec83abd698d68956118713a0ff1272
[end hex]  dsdfoe38sd$ Figure 3:
Signed and Encrypted Message in MSRP 10.4.
MSRP Signed and Encrypted Message Sent in Multiple Chunks Figure 4 shows the same message as in Figure 3 except that the message is broken into two chunks.
The S/MIME operations were performed prior to breaking the message into chunks.
MSRP d93kswow SEND To Path
: msrp://alicepc.example.com:7777/iau39soe2843z;tcp From Path: msrp://bobpc.example.org:8888/9di4eae923wzd;tcp Message ID: 12339sdqwer Byte Range: 1 960/1940 Content Disposition: attachment; filename "smime.p7m" Content Type: application/pkcs7 mime; smime type enveloped data; name "smime.p7m" [start hex]
3082024b0201003033302631143012060355040a0c0b6578616d706c652e636f 6d310e300c06035504030c05416c69636502090083f50bb70bd5c40e300d0609 2a864886f70d010101050004820200759a61b4ddf1f1af24668005635e476110 fa2723c1b9e45484b6d33e8387de967dc5e0cafb35571a56a1975cb550e7be31 c131da80fb731024845babb8d64cac26040424d9330561c843999415dd644b3c ad95072f71451393c99f282c4883bd0ccc5dd54b931464e00a6e55e592c51a68 de1062516ec7d3ca8e764bb8ac789a88377765ef8dc36c0a6ed3ecae5285cac6 a29d5059445719a1bdcf906e0ff37e2c2ef0f4ec6225100cc062e1c748963bbc 88b8e3dfcf714073729dd5c7583e758acf3d186f2fa417be22c37c9a76c6b427 29aad27f73ae44ac98474d1eeb48948c12a403d0b3ce08a218d6af456924897c
9d7a3c90ba79e6d7d5c8d89bb54a667423e43b0b7d6f78c0b4ab67bc343662a6 35fe595f1149c53950cac2e0ba318c227e6f76a8d940400fd3d3ea1c8ecea003 dcce2f1fb00f5cea335de1303fcbf93d8e1cbfd682f19beb624bacd1d7b8f580 f114a13b890894fb4044a5daa764b7f8c5ff92949452b35aeb9639b8ad63c051 5c95ccc6f823c2201067ea2262413fef397d48f7b6143f842ae8e1a48cad3ae0 1abaa3cf9ee7e36620e05cca0611bfac00eef1a498f2d259b9f0f7da83ef6f1b 061f387c2dc48c8b5dbaca862308f32f47925165c9e5ebb467799884918dd697
[end hex]  d93kswow  MSRP op2nc9a SEND To Path: msrp://alicepc.example.com:8888/9di4eae923wzd;tcp From Path:
12339sdqwer Byte Range: 961 1940/1940 Content Disposition: attachment; filename "smime.p7m" Content Type: application/
pkcs7 mime; smime type enveloped data; name "smime.p7m" [start hex]
89c0b4263bf10f56243f9e72ef3b3899a539d9a3ac5be2b69400a3cf8d196c5c ed697b2ed803b987a5ee85c5095b48da7a5b03b47e2b9fe4cd4bc3098e864e0c e7d467da99cd7f3a9e947b5eea77f7a6be16c8c7e9e0decc1ff132559c234321 7b9c2950386e85d2942121086cdfa19658195be6d7f86bca9881b695082964f1 2e7cf801025d6792c6882409414d703321ec83abd698d68956118713a0ff1272
Signed, Encrypted, and Chunked MSRP Message 11.
This document has no IANA actions.
The security considerations for S/MIME [RFC8550]
[RFC8551] and elliptic curves in CMS [RFC5753] apply.
The S/MIME related security considerations for SIP [RFC3261], SIP MESSAGE [RFC3428], and MSRP [RFC4975] apply.
The security considerations for algorithms recommended in this document also apply; see [RFC3565], [RFC5480], [RFC5753], [RFC5754], [RFC7748], [RFC8032], [RFC8418], and [RFC8419].
This document assumes that end entity certificate validation is provided by a chain of trust to a certification authority (CA), using a public key infrastructure.
The security considerations from [RFC5280] apply.
However, other validations methods may be possible   for example, sending a signed fingerprint for the end entity in SDP.
The relationship between this work and the techniques discussed in [RFC8224] and [RTP Sec] are out of scope for this document.
When matching an end entity certificate to the sender or recipient identity, the respective SIP AoRs are used.
Typically, these will match the SIP From and To header fields.
Some UAs may extract the sender identity from SIP AoRs in other header fields   for example, P Asserted Identity [RFC3325].
In general, the UAS should compare the certificate to the identity that it relies upon   for example, for display to the end user or comparison against message filtering rules.
The secure notification use case discussed in Section 1 has significant vulnerabilities when used in an insecure environment.
For example, "phishing" messages could be used to trick users into revealing credentials.
Eavesdroppers could learn confirmation codes from unprotected two factor authentication messages.
Unsolicited messages sent by impersonators could tarnish the reputation of an organization.
While hop by hop protection can mitigate some of those risks, it still leaves messages vulnerable to malicious or compromised intermediaries.
End to end protection prevents modification by intermediaries.
However, neither provides much protection unless the recipient knows to expect messages from a particular sender to be signed and refuses to accept unsigned messages that appear to be from that source.
Mobile messaging is typically an online application; online certificate revocation checks should usually be feasible.
S/MIME does not normally protect the SIP or MSRP headers.
While it normally does protect the CPIM header, certain CPIM header fields may not be protected if the sender excludes them from the encrypted or signed part of the message.
Certain messaging services   for example, those based on RCS   may include intermediaries that attach metadata to user generated messages in the form of SIP, MSRP, or CPIM header fields.
This metadata could possibly reveal information to third parties that the sender might prefer not to send as cleartext.
Implementors and operators should consider whether inserted metadata may create privacy leaks.
Such an analysis is beyond the scope of this document.
MSRP messages broken into chunks must be reassembled by the recipient prior to decrypting or validation of signatures.
Section 14.5 of [RFC4975] describes a potential denial of service attack where the attacker puts large values in the Byte Range header field.
Implementations should sanity check these values before allocating memory space for reassembly.
Modification of the ciphertext in EnvelopedData can go undetected if authentication is not also used, which is the case when sending EnvelopedData without wrapping it in SignedData or enclosing SignedData within it.
This is one of the reasons for moving from EnvelopedData to AuthEnvelopedData, as the authenticated encryption algorithms provide the authentication without needing the SignedData layer.
An attack on S/MIME implementations of HTML and multipart/mixed messages is highlighted in [Efail].
To avoid this attack, clients MUST ensure that a text/html content type is a complete HTML document.
Clients SHOULD treat each of the different pieces of the multipart/mixed construct as coming from different origins.
Clients MUST treat each encrypted or signed piece of a MIME message as being from different origins both from unprotected content and from each other.
The following section shows the detailed content of the S/MIME bodies used in Section 10.
Signed Message Figure 5 shows the details of the message signed by Alice used in the example in Section 10.1.
eContentType: pkcs7 data (1.2.840.113549.1.7.1) eContent:
2d 54 79 70 65 3a 20 74
69 6e 0d 0a 0d 0a 57 61
Wa 001e 74 73 6f 6e 2c 20 63 6f 6d 65 20 68 65 72 65   tson, come here
20 2d 20 49 20 77 61 6e 74 20 74 6f 20
I want to se 003c 65 20 79 6f 75 2e 0d
d.certificate: cert info: version: 2 serialNumber: 13292724773353297200 signature: algorithm: ecdsa with SHA256 (1.2.840.10045.4.3.2) parameter: <ABSENT
O example.com, CN Alice validity:
: Dec 19 23:12:05 2018
O example.com, CN Alice key:
public key:  (0 unused bits)
0000 04 d8 7b 54 72 9f 2c
22 fe eb d9 dd ba
22 97 a6 09 38 87 a4 da e7 99 0b
23 f8 7f a7 ed 99 db
10 6e f1 ed 61 db fc 0a 4b 91 c9 53
X509v3 Subject Alternative Name (2.5.29.17)
0000 30 17 86 15 73 69 70 3a 61 6c 69
ecdsa with SHA256 (1.2.840.10045.4.3.2) parameter: <ABSENT>
45 02 20 78 79 be 1c 27 f8 46 27 6f
17 a7 57 38 8a 02
c1 64 1a e7 a9 02
50 17 9a 4b 77
O example.com, CN Alice serialNumber:
13292724773353297200 digestAlgorithm: algorithm: sha256 (2.16.840.1.101.3.4.2.1
pkcs7 data (1.2.840.113549.1.7.1) object: signingTime (1.2.840.113549.1.9.5)
ef 77 8f c9 40 d5 e6
dc 25 76 f4 7a 59
9b 31 26 19 5a 9f 1a 22 7a da f3 5f
ecdsa with SHA256 (1.2.840.10045.4.3.2) parameter: <ABSENT
0000 30 45 02 20 58 79 cc 62 85 e0 86
d4 67 9f 03 73 d7 45 20 cf 56 10 c2 55
61 d4 72 dc 02
aa 53 44 28 4d   {
4c ef de 31 07 9c f9 71 bd 69 5d 6e c8 71
Short Signed Message Figure 6 shows the message signed by Alice with no embedded certificate, as used in the example in Section 10.2.
eContentType: pkcs7 data (1.2.840.113549.1.7.1) eContent:
2d 54 79 70 65 3a 20 74
69 6e 0d 0a 0d 0a 57 61
Wa 001e 74 73 6f 6e 2c 20 63 6f 6d 65 20 68 65 72 65   tson, come here
20 2d 20 49 20 77 61 6e 74 20 74 6f 20
I want to se 003c 65 20 79 6f 75 2e 0d
O example.com, CN Alice serialNumber:
13292724773353297200 digestAlgorithm: algorithm: sha256 (2.16.840.1.101.3.4.2.1
pkcs7 data (1.2.840.113549.1.7.1) object: signingTime (1.2.840.113549.1.9.5)
ef 77 8f c9 40 d5 e6
dc 25 76 f4 7a 59
9b 31 26 19 5a 9f 1a 22 7a da f3 5f
ecdsa with SHA256 (1.2.840.10045.4.3.2) parameter: <ABSENT
20 1c 51 6e ed 9c 10 10 a2 87 e1 11
6b af 76 1d f1 c4 e6 48 da
ea 17 89 bc e2 8a
001e 9d 8a f4 a4
ae f9 02 20 72 7f 5e 4b
cf 3c af 07 c8 1c 11 64 f0 21 e7 70 e0 f6 a0
Signed Message without Embedded Certificate A.3.
The following sections show details for the message signed by Bob and encrypted to Alice, as used in the examples in Sections 10.3 and 10.4.
Signed Message prior to Encryption CMS ContentInfo:
eContentType: pkcs7 data (1.2.840.113549.1.7.1) eContent:
2d 54 79 70 65 3a 20 74
69 6e 0d 0a 0d 0a 57 61
Wa 001e 74 73 6f 6e 2c 20 63 6f 6d 65 20 68 65 72 65   tson, come here
20 2d 20 49 20 77 61 6e 74 20 74 6f 20
I want to se 003c 65 20 79 6f 75 2e 0d
d.certificate: cert info: version: 2 serialNumber: 11914627415941064473 signature: algorithm: ecdsa with SHA256 (1.2.840.10045.4.3.2) parameter: <ABSENT
O example.org, CN Bob validity:
GMT notAfter: Dec 20 23:07:49 2018
O example.org, CN Bob key: algor: algorithm:
public key:  (0 unused bits)
04 86 4f ff fc 53
f1 a8 76 ca 69 b1 7e 27
71 52 ae 1b 13 7e
ae bd 12 74 3c 7d 41 43
ba 9d 03 b7 30 1f 1d a6 4e 30
o 0038 95 cb 71 fa
X509v3 Subject Alternative Name (2.5.29.17)
0000 30 15 86 13
73 69 70 3a 62 6f 62 40 65   0...
78 61 6d 70 6c 65
ecdsa with SHA256 (1.2.840.10045.4.3.2) parameter: <ABSENT>
45 02 21 00 b2 24 8c
22 38 9e c9   0E.!..
25 7f 64 cc fd 10 6f ba 0b 96
2f 73 39 6c 02
cf 27 8f 0d 52 2e
f7 4c 77 10 b1
crls: <ABSENT> signerInfos: version: 1 d.issuerAndSerialNumber: issuer: O example.org, CN Bob serialNumber:
11914627415941064473 digestAlgorithm: algorithm: sha256 (2.16.840.1.101.3.4.2.1
pkcs7 data (1.2.840.113549.1.7.1) object: signingTime (1.2.840.113549.1.9.5)
ef 77 8f c9 40 d5 e6
dc 25 76 f4 7a 59
9b 31 26 19 5a 9f 1a 22 7a da f3 5f
ecdsa with SHA256 (1.2.840.10045.4.3.2) parameter: <ABSENT
0000 30 45 02 21 00 f7 88 ed
44 6a b7 0f ff 2c 1f
fa 4c 03 74 fd 08 77 fd 61 ee 91 7c 31 45 b3
1E. 001e 89 a6 76 15 c7 46 fa 02
82 82 65 b6 d4
cc 12 99 76 a6 b1 fc
Message Signed by Bob prior to Encryption A.3.2.
O example.com, CN Alice serialNumber: 9508519069068149774
61 b4 dd f1 f1 af
66 80 05 63 5e 47
61 10 fa 27 23 c1 b9 e4 54 84 b6 d3 3e 83 87
de 96 7d c5 e0 ca fb 35 57 1a 56 a1 97
50 e7 be 31 c1 31 da 80 fb 73 10 24 84
26 04 04 24 d9 33 05 61 c8 43 99
9f 28 2c 48 83 bd 0c cc 5d d5 4b 93
0a 6e 55 e5 92 c5 1a 68
de 10 62 51 6e c7 d3
0078 ca 8e 76 4b
6c 0a 6e d3 ec
85 ca c6 a2 9d 50 59 44
19 a1 bd cf 90 6e 0f f3 7e 2c
62 25 10 0c c0 62 e1 c7 48 96 3b bc 88
71 40 73 72 9d d5 c7 58 3e
18 6f 2f a4 17 be 22 c3 7c 9a 76 c6 b4 27 29   .o/...
00d2 aa d2 7f 73
12 a4 03 d0 b3 ce
08 a2 18 d6 af 45 69
7c c5 c9 66 4f 6d fe b3 f1 81 41 15 8d fc
aa 86 51 37 e1 69 9c
97 41 67 9d 7a 3c 90 ba
79 e6 d7 d5 c8 d8 9b   .Ag.z<
b5 4a 66 74 23 e4 3b
62 a6 35 fe 59 5f
11 49 c5 39 50
c2 e0 ba 31 8c 22
d3 ea 1c 8e ce a0 03
33 5d e1 30 3f
cb f9 3d 8e 1c bf d6 82 f1 9b
d1 d7 b8 f5 80
f1 14 a1 3b 89 08   .bK
;.. 0177 94 fb 40 44 a5 da a7 64 b7 f8 c5 ff 92 94 94
63 c0 51 5c 95 cc
f8 23 c2 20 10 67
62 41 3f ef 39 7d 48   .
f7 b6 14 3f 84 2a e8
a3 cf 9e e7 e3 66 20 e0 5c
ee f1 a4 98 f2 d2 59 b9 f0 f7 da
92 51 65 c9 e5 eb b4 67 79
d6 97 b4 47 f4 c4 07
0000 4d 87 57 22 2e
ac 52 94 11 7f 0c
16 encryptedContent: 0000 fe 2f b3 de 0b f0 69 98 c3 9b f4 a9
8b 0f ee 3d 7e
1a ec f1 a8 9e 1a 2e
001e de cd 94 04 88
002d 77 49 b2 50
4e 45 f5 7c 3b 06
26 7c 56 01 39 be 5c d2 86
22 78 e5 2c 38 18 ca
59 8d e4 fc e1 4a 33 38 84 e4 de 5d
0069 d7 88 67 02 7a 31 e4 a7 c0 c0 29 91 44 c5
39 69 9e 70 0e 05
7e b0 f0 da d7 3b
36 9f 42 eb 32 1b 41 53 87 81 d9 82 a1 1a
39 43 ac 10 c9 7b 54 ee b7 3b
56 10 e3 73 48 72 74 d6 9c af a9 54 19 02 88
6c 64 f6 96 2d 42 eb 33 f9 04 1a 4a e1 1b 88
dc 69 58 d5 3d f5 0b
ae 41 6b 86 f0 a8 8d 0e b7 a9 81 db b2   ]
83 e8 b9 4e 9d 50 bf 62 65 c2 34 8a 18 a1 69
cb 5a 37 a5 29 bd a2 f9 cb 10
d8 79 64 63 7b d3 3f b1 3c 68 b4 cf
29 f3 ea 03 8f
6b 23 18 03 77
4Wu#R.Az 014a 09 44 84 d7 b6 4b cf
51 b2 6a 9b eb 3a 0e d4
8b a3 3b c6 c4 dd dc a7 ae f4
d7 c4 dc 1e 93 77 0d 8f 4f 22
a6 1d 73 08 3c 32 c4 03
.. 0195 9a 87 95 e2 41
c2 ed 7c b6 80 75 8c 04
48 98 60 fc 9f 49 0e 85 23
60 72 54 8b 32
69 8f 99 95 3a cf 1e c6 58 b7 aa
70 1a 6d 4b 03 9e d1 03
dc 45 8d f4 b2 9c
b0 4b 8c ed d5 40
c8 43 48 da 79 c1 86 56 d5   .K...
18 8f 9f 3a 9e
70 66 4b 90 29
86 25 10 db 59 d9 fa 9d c9 3f
.. 021c e3 bb 7e b8 e0 20 85 a8 28 c5 a1 38 78
7a de 4f 5e 8d 41 15 90
92 09 ba 87 8a 79 30
5a 53 16 c2 22 29
6d 06 48 1c 84 73
77 84 ed 46 15 0e 04
ff 50 cd 20 9c
[.u 0267 11 36 9f e0 6b c4 aa 9a 72 d8 f1 fe 4f cf 08
65 ff a8 6e 8c 1b 43
ec c1 6c a3 50
92 e5 d1 77 45 64 96 3b
3b bd 9f 1c 27
ff e3 6f 83 2e
18 89 75 ec 5c 67 b3 2c 9f 21
79 2f 3c fe b9 bb de 72 11 d2 6f
e6 17 d6 e0 1c 02
6e 9d 9a 40 f3 20 46 2c
5d 66 f8 35 17
d6 01 4b df 30 a6 0f
d8 c0 ba d3 5d df 19 84 f2 24
5f 80 89 54 3d f4 f1
44 1e de 36 b1   .
50 b6 45 d4 e7 db   .1.Z.. p.P.E... 0384 88
65 15 8f b0 e8
cb e2 6d 71 24 c6 e1 d9 92 f8 32 30
33 76 ee 8c 68 10 95
e8 57 1f 0c 9b bd a4
11 75 14 8f 31 83 27
67 cd 76 6c f0 7b 45 0c bf 62 ca
33 f1 16 a1 a7 f3
e7 9f fc 98 27 22 1b 68 b0 80
87 16 76 f7 98 94 3e 54 f1 3f
d7 5c 89 c0 b4 26 3b f1 0f 56
3b 38 99 a5 39
d9 a3 ac 5b e2 b6 94 00 a3 cf
8d 19 6c 5c ed 69
2e d8 03 b9 87 a5
8e 86 4e 0c e7 d4 67 da
:. 0447 94 7b 5e ea
1f f1 32 55 9c 23 43 21 7b 9c 29
d2 94 21 21 08 6c df a1 96 58 19 5b e6 d7 f8
6b ca 98 81 b6 95 08 29 64 f1 2e 7c f8 01 02
5d 67 92 c6 88 24 09 41 4d 70
33 21 ec 83 ab   ]
c7 4c 16 92 1d f9 b3 8f 29 ec
0000 f6 ff c6 e1 ae f1 9c d2 3d 98
Message Encrypted by Bob for Alice
