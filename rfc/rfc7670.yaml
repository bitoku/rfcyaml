- contents:
  - '                Generic Raw Public-Key Support for IKEv2

    '
  title: __initial_text__
- contents:
  - "Abstract\n   The Internet Key Exchange Version 2 (IKEv2) protocol did have support\n
    \  for raw public keys, but it only supported RSA raw public keys.  In\n   constrained
    environments, it is useful to make use of other types of\n   public keys, such
    as those based on Elliptic Curve Cryptography.\n   This document updates RFC 7296,
    adding support for other types of raw\n   public keys to IKEv2.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7670.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   2\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . . .
    . . .   3\n   3.  Certificate Encoding Payload  . . . . . . . . . . . . . . .
    .   3\n   4.  Security Considerations . . . . . . . . . . . . . . . . . . .   4\n
    \  5.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   5\n   6.
    \ References  . . . . . . . . . . . . . . . . . . . . . . . . .   5\n     6.1.
    \ Normative References  . . . . . . . . . . . . . . . . . .   5\n     6.2.  Informative
    References  . . . . . . . . . . . . . . . . .   5\n   Appendix A.  Examples .
    . . . . . . . . . . . . . . . . . . . . .   7\n     A.1.  ECDSA Example . . .
    . . . . . . . . . . . . . . . . . . .   7\n     A.2.  RSA Example . . . . . .
    . . . . . . . . . . . . . . . . .   8\n   Acknowledgements  . . . . . . . . .
    . . . . . . . . . . . . . . .  10\n   Authors' Addresses  . . . . . . . . . .
    . . . . . . . . . . . . .  10\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document replaces an algorithm-specific version of
    raw public\n   keys of the Internet Key Exchange Version 2 (IKEv2) [RFC7296] with
    a\n   generic version of raw public keys that is algorithm agnostic.\n   In [RFC5996],
    IKEv2 had support for PKCS #1 encoded RSA keys, i.e., a\n   DER-encoded RSAPublicKey
    structure (see [RSA] and [RFC3447]).  Other\n   raw public-key types are, however,
    not supported.  In [RFC7296], this\n   feature was removed; this document reintroduces
    support for raw\n   public keys to IKEv2 in a more generic way.\n   DNSSEC allows
    public keys to be associated with domain names for\n   usage with security protocols
    like IKEv2 and Transport Layer Security\n   (TLS) [RFC5246] but it relies on extensions
    in those protocols to be\n   specified.\n   The Raw Public Keys in Transport Layer
    Security specification\n   ([RFC7250]) adds generic support for raw public keys
    to TLS by\n   reusing the SubjectPublicKeyInfo format from the X.509 Public-Key\n
    \  Infrastructure Certificate profile [RFC5280].\n   This document is similar
    to the Raw Public Keys in Transport Layer\n   Security specification and applies
    the concept to IKEv2 to support\n   all public-key formats defined by PKIX.  This
    approach also allows\n   future public-key extensions to be supported without
    the need to\n   introduce further enhancements to IKEv2.\n   To support new types
    of public keys in IKEv2, the following changes\n   are needed:\n   o  A new Certificate
    Encoding format needs to be defined for carrying\n      the SubjectPublicKeyInfo
    structure.  Section 3 specifies this new\n      encoding format.\n   o  A new
    Certificate Encoding that has been allocated by IANA.\n      Section 5 contains
    the details about the IANA registration.\n   The base IKEv2 specification includes
    support for RSA and DSA\n   signatures, but the Signature Authentication in IKEv2
    [RFC7427]\n   extended IKEv2 so that signature methods over any key type can be\n
    \  used.  Implementations using raw public keys SHOULD use the Digital\n   Signature
    method described in RFC 7427.\n   When using raw public keys, the authenticated
    identity is not usually\n   the identity from the ID payload, but instead the
    public key itself\n   is used as the identity for the other end.  This means that
    ID\n   payload contents might not be useful for authentication purposes.  It\n
    \  might still be used for policy decisions, for example to simplify the\n   policy
    lookup.  Alternatively, the ID_NULL type [RFC7619] can be used\n   to indicate
    that the ID payload is not relevant to this\n   authentication.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in [RFC2119].\n"
  title: 2.  Terminology
- contents:
  - "3.  Certificate Encoding Payload\n   Section 3.6 of RFC 7296 defines the Certificate
    payload format as\n   shown in Figure 1.\n                        1                   2
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  | Next Payload  |C|  RESERVED   |         Payload Length        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  | Cert Encoding |                                               |\n   +-+-+-+-+-+-+-+-+
    \                                              |\n   ~                       Certificate
    Data                        ~\n   |                                                               |\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n                   Figure
    1: Certificate Payload Format\n   To support raw public keys, the field values
    are as follows:\n   o  Certificate Encoding (1 octet) - This field indicates the
    type of\n      certificate or certificate-related information contained in the\n
    \     Certificate Data field.\n      Certificate Encoding                 Value\n
    \     ----------------------------------------------------\n      Raw Public Key
    \                      15\n   o  Certificate Data (variable length) - Actual encoding
    of the\n      certificate data.\n   In order to provide a simple and standard
    way to indicate the key\n   type when the encoding type is \"Raw Public Key\",
    the\n   SubjectPublicKeyInfo structure of the PKIX certificate is used.  This\n
    \  is a very simple encoding, as most of the ASN.1 part can be included\n   literally
    and recognized by block comparison.  See Appendix A of\n   [RFC7250] for a detailed
    breakdown.  In addition, Appendix A of this\n   document has several examples.\n
    \  In addition to the Certificate payload, the Cert Encoding for Raw\n   Public
    Key can be used in the Certificate Request payload.  In that\n   case, the Certification
    Authority field MUST be empty if the \"Raw\n   Public Key\" certificate encoding
    is used.\n   For RSA keys, the implementations MUST follow the public-key\n   processing
    rules of Section 1.2 of the Additional Algorithms and\n   Identifiers for RSA
    Cryptography for PKIX ([RFC4055]) even when the\n   SubjectPublicKeyInfo is not
    part of a certificate but is instead sent\n   as a Certificate Data field.  This
    means that RSASSA-PSS and\n   RSASSA-PSS-params inside the SubjectPublicKeyInfo
    structure MUST be\n   sent when applicable.\n"
  title: 3.  Certificate Encoding Payload
- contents:
  - "4.  Security Considerations\n   An IKEv2 deployment using raw public keys needs
    to utilize an out-of-\n   band public-key validation procedure to be confident
    in the\n   authenticity of the keys being used.  One way to achieve this goal
    is\n   to use a configuration mechanism for provisioning raw public keys\n   into
    the IKEv2 software.  \"Smart object\" deployments are likely to\n   use such preconfigured
    public keys.\n   Another approach is to rely on secure DNS to associate public
    keys\n   with domain names using the IPSECKEY DNS RRtype [RFC4025].  More\n   information
    can be found in DNS-Based Authentication of Named\n   Entities (DANE) [RFC6394].\n
    \  This document does not change the security assumptions made by the\n   IKEv2
    specification since \"Raw RSA Key\" support was already available\n   in IKEv2
    in [RFC5996].  This document only generalizes raw public-key\n   support.\n"
  title: 4.  Security Considerations
- contents:
  - "5.  IANA Considerations\n   This document allocates a new value from the IKEv2
    Certificate\n   Encodings registry:\n   15      Raw Public Key\n"
  title: 5.  IANA Considerations
- contents:
  - '6.  References

    '
  - contents:
    - "6.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC5280]  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n              Housley,
      R., and W. Polk, \"Internet X.509 Public Key\n              Infrastructure Certificate
      and Certificate Revocation List\n              (CRL) Profile\", RFC 5280, DOI
      10.17487/RFC5280, May 2008,\n              <http://www.rfc-editor.org/info/rfc5280>.\n
      \  [RFC7296]  Kaufman, C., Hoffman, P., Nir, Y., Eronen, P., and T.\n              Kivinen,
      \"Internet Key Exchange Protocol Version 2\n              (IKEv2)\", STD 79,
      RFC 7296, DOI 10.17487/RFC7296, October\n              2014, <http://www.rfc-editor.org/info/rfc7296>.\n
      \  [RFC7427]  Kivinen, T. and J. Snyder, \"Signature Authentication in\n              the
      Internet Key Exchange Version 2 (IKEv2)\", RFC 7427,\n              DOI 10.17487/RFC7427,
      January 2015,\n              <http://www.rfc-editor.org/info/rfc7427>.\n   [RFC7619]
      \ Smyslov, V. and P. Wouters, \"The NULL Authentication\n              Method
      in the Internet Key Exchange Protocol Version 2\n              (IKEv2)\", RFC
      7619, DOI 10.17487/RFC7619, August 2015,\n              <http://www.rfc-editor.org/info/rfc7619>.\n"
    title: 6.1.  Normative References
  - contents:
    - "6.2.  Informative References\n   [RFC3447]  Jonsson, J. and B. Kaliski, \"Public-Key
      Cryptography\n              Standards (PKCS) #1: RSA Cryptography Specifications\n
      \             Version 2.1\", RFC 3447, DOI 10.17487/RFC3447, February\n              2003,
      <http://www.rfc-editor.org/info/rfc3447>.\n   [RFC4025]  Richardson, M., \"A
      Method for Storing IPsec Keying\n              Material in DNS\", RFC 4025,
      DOI 10.17487/RFC4025, March\n              2005, <http://www.rfc-editor.org/info/rfc4025>.\n
      \  [RFC4055]  Schaad, J., Kaliski, B., and R. Housley, \"Additional\n              Algorithms
      and Identifiers for RSA Cryptography for use in\n              the Internet
      X.509 Public Key Infrastructure Certificate\n              and Certificate Revocation
      List (CRL) Profile\", RFC 4055,\n              DOI 10.17487/RFC4055, June 2005,\n
      \             <http://www.rfc-editor.org/info/rfc4055>.\n   [RFC4754]  Fu, D.
      and J. Solinas, \"IKE and IKEv2 Authentication Using\n              the Elliptic
      Curve Digital Signature Algorithm (ECDSA)\",\n              RFC 4754, DOI 10.17487/RFC4754,
      January 2007,\n              <http://www.rfc-editor.org/info/rfc4754>.\n   [RFC5246]
      \ Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)
      Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246, August
      2008,\n              <http://www.rfc-editor.org/info/rfc5246>.\n   [RFC5480]
      \ Turner, S., Brown, D., Yiu, K., Housley, R., and T. Polk,\n              \"Elliptic
      Curve Cryptography Subject Public Key\n              Information\", RFC 5480,
      DOI 10.17487/RFC5480, March 2009,\n              <http://www.rfc-editor.org/info/rfc5480>.\n
      \  [RFC5996]  Kaufman, C., Hoffman, P., Nir, Y., and P. Eronen,\n              \"Internet
      Key Exchange Protocol Version 2 (IKEv2)\",\n              RFC 5996, DOI 10.17487/RFC5996,
      September 2010,\n              <http://www.rfc-editor.org/info/rfc5996>.\n   [RFC6394]
      \ Barnes, R., \"Use Cases and Requirements for DNS-Based\n              Authentication
      of Named Entities (DANE)\", RFC 6394,\n              DOI 10.17487/RFC6394, October
      2011,\n              <http://www.rfc-editor.org/info/rfc6394>.\n   [RFC7250]
      \ Wouters, P., Ed., Tschofenig, H., Ed., Gilmore, J.,\n              Weiler,
      S., and T. Kivinen, \"Using Raw Public Keys in\n              Transport Layer
      Security (TLS) and Datagram Transport\n              Layer Security (DTLS)\",
      RFC 7250, DOI 10.17487/RFC7250,\n              June 2014, <http://www.rfc-editor.org/info/rfc7250>.\n
      \  [RSA]      Rivest, R., Shamir, A., and L. Adleman, \"A Method for\n              Obtaining
      Digital Signatures and Public-Key\n              Cryptosystems\", February 1978.\n"
    title: 6.2.  Informative References
  title: 6.  References
- contents:
  - "Appendix A.  Examples\n   This appendix provides examples of the actual payloads
    sent on the\n   wire.\n"
  - contents:
    - "A.1.  ECDSA Example\n   This first example uses the 256-bit ECDSA private/public
      key pair\n   defined in Section 8.1 of the IKEv2 ECDSA document [RFC4754].\n
      \  The public key is as follows:\n   o  Algorithm: id-ecPublicKey (1.2.840.10045.2.1)\n
      \  o  Fixed curve: secp256r1 (1.2.840.10045.3.1.7)\n   o  Public key x coordinate:\n
      \     cb28e099 9b9c7715 fd0a80d8 e47a7707\n      9716cbbf 917dd72e 97566ea1
      c066957c\n   o  Public key y coordinate:\n      2b57c023 5fb74897 68d058ff 4911c20f\n
      \     dbe71e36 99d91339 afbb903e e17255dc\n   The SubjectPublicKeyInfo ASN.1
      object is as follows:\n   0000 :     SEQUENCE\n   0002 :       SEQUENCE\n   0004
      :         OBJECT IDENTIFIER  id-ecPublicKey (1.2.840.10045.2.1)\n   000d :         OBJECT
      IDENTIFIER  secp256r1 (1.2.840.10045.3.1.7)\n   0017 :       BIT STRING  (66
      bytes)\n   00000000: 0004 cb28 e099 9b9c 7715 fd0a 80d8 e47a\n   00000010: 7707
      9716 cbbf 917d d72e 9756 6ea1 c066\n   00000020: 957c 2b57 c023 5fb7 4897 68d0
      58ff 4911\n   00000030: c20f dbe7 1e36 99d9 1339 afbb 903e e172\n   00000040:
      55dc\n   The first byte (00) of the bit string indicates that there is no\n
      \  \"number of unused bits\", and the second byte (04) indicates\n   uncompressed
      form ([RFC5480]).  Those two octets are followed by the\n   values of X and
      Y.\n   The final encoded SubjectPublicKeyInfo object is as follows:\n   00000000:
      3059 3013 0607 2a86 48ce 3d02 0106 082a\n   00000010: 8648 ce3d 0301 0703 4200
      04cb 28e0 999b\n   00000020: 9c77 15fd 0a80 d8e4 7a77 0797 16cb bf91\n   00000030:
      7dd7 2e97 566e a1c0 6695 7c2b 57c0 235f\n   00000040: b748 9768 d058 ff49 11c2
      0fdb e71e 3699\n   00000050: d913 39af bb90 3ee1 7255 dc\n   This will result
      in the final IKEv2 Certificate Payload:\n   00000000: NN00 0060 0f30 5930 1306
      072a 8648 ce3d\n   00000010: 0201 0608 2a86 48ce 3d03 0107 0342 0004\n   00000020:
      cb28 e099 9b9c 7715 fd0a 80d8 e47a 7707\n   00000030: 9716 cbbf 917d d72e 9756
      6ea1 c066 957c\n   00000040: 2b57 c023 5fb7 4897 68d0 58ff 4911 c20f\n   00000050:
      dbe7 1e36 99d9 1339 afbb 903e e172 55dc\n   Where NN is the next payload type
      (i.e., the type of payload that\n   immediately follows this Certificate payload).\n"
    title: A.1.  ECDSA Example
  - contents:
    - "A.2.  RSA Example\n   This second example uses a random 1024-bit RSA key.\n
      \  The public key is as follows:\n   o  Algorithm: rsaEncryption (1.2.840.113549.1.1.1)\n
      \  o  Modulus n (1024 bits, decimal):\n      1323562071162740912417075551025599045700\n
      \     3972512968992059076067098474693867078469\n      7654066339302927451756327389839253751712\n
      \     9485277759962777278073526290329821841100\n      9721044682579432931952695408402169276996\n
      \     5181887843758615443536914372816830537901\n      8976615344413864477626646564638249672329\n
      \     04996914356093900776754835411\n   o  Modulus n (1024 bits, hexadecimal):\n
      \     bc7b4347 49c7b386 00bfa84b 44f88187 9a2dda08 d1f0145a\n      f5806c2a
      ed6a6172 ff0dc3d4 cd601638 e8ca348e bdca5742\n      31cadc97 12e209b1 fddba58a
      8c62b369 038a3d1e aa727c1f\n      39ae49ed 6ebc30f8 d9b52e23 385a4019 15858c59
      be72f343\n      fb1eb87b 16ffc5ab 0f8f8fe9 f7cb3e66 3d8fe9f9 ecfa1230\n      66f36835
      8ceaefd3\n   o  Exponent e (17 bits, decimal): 65537\n   o  Exponent e (17 bits,
      hexadecimal): 10001\n   The SubjectPublicKeyInfo ASN.1 object is as follows:\n
      \  0000 :     SEQUENCE\n   0003 :       SEQUENCE\n   0005 :         OBJECT IDENTIFIER
      rsaEncryption (1.2.840.113549.1.1.1)\n   0016 :         NULL\n   0018 :       BIT
      STRING  (141 bytes)\n   00000000: 0030 8189 0281 8100 bc7b 4347 49c7 b386\n
      \  00000010: 00bf a84b 44f8 8187 9a2d da08 d1f0 145a\n   00000020: f580 6c2a
      ed6a 6172 ff0d c3d4 cd60 1638\n   00000030: e8ca 348e bdca 5742 31ca dc97 12e2
      09b1\n   00000040: fddb a58a 8c62 b369 038a 3d1e aa72 7c1f\n   00000050: 39ae
      49ed 6ebc 30f8 d9b5 2e23 385a 4019\n   00000060: 1585 8c59 be72 f343 fb1e b87b
      16ff c5ab\n   00000070: 0f8f 8fe9 f7cb 3e66 3d8f e9f9 ecfa 1230\n   00000080:
      66f3 6835 8cea efd3 0203 0100 01\n   The first byte (00) of the bit string indicates
      that there is no\n   \"number of unused bits\".  Inside that bit string, there
      is an ASN.1\n   sequence having 2 integers.  The second byte (30) indicates
      that this\n   is the beginning of the sequence, and the next byte (81) indicates\n
      \  the length does not fit in 7 bits, but requires one byte, so the\n   length
      is in the next byte (89).  Then starts the first integer with\n   tag (02) and
      length (81 81).  After that we have the modulus\n   (prefixed with 0 so it will
      not be a negative number).  After the\n   modulus, there follows the tag (02)
      and length (03) of the exponent,\n   and the last 3 bytes are the exponent.\n
      \  The final encoded SubjectPublicKeyInfo object is as follows:\n   00000000:
      3081 9f30 0d06 092a 8648 86f7 0d01 0101\n   00000010: 0500 0381 8d00 3081 8902
      8181 00bc 7b43\n   00000020: 4749 c7b3 8600 bfa8 4b44 f881 879a 2dda\n   00000030:
      08d1 f014 5af5 806c 2aed 6a61 72ff 0dc3\n   00000040: d4cd 6016 38e8 ca34 8ebd
      ca57 4231 cadc\n   00000050: 9712 e209 b1fd dba5 8a8c 62b3 6903 8a3d\n   00000060:
      1eaa 727c 1f39 ae49 ed6e bc30 f8d9 b52e\n   00000070: 2338 5a40 1915 858c 59be
      72f3 43fb 1eb8\n   00000080: 7b16 ffc5 ab0f 8f8f e9f7 cb3e 663d 8fe9\n   00000090:
      f9ec fa12 3066 f368 358c eaef d302 0301\n   000000a0: 0001\n   This will result
      in the final IKEv2 Certificate Payload:\n   00000000: NN00 00a7 0f30 819f 300d
      0609 2a86 4886\n   00000010: f70d 0101 0105 0003 818d 0030 8189 0281\n   00000020:
      8100 bc7b 4347 49c7 b386 00bf a84b 44f8\n   00000030: 8187 9a2d da08 d1f0 145a
      f580 6c2a ed6a\n   00000040: 6172 ff0d c3d4 cd60 1638 e8ca 348e bdca\n   00000050:
      5742 31ca dc97 12e2 09b1 fddb a58a 8c62\n   00000060: b369 038a 3d1e aa72 7c1f
      39ae 49ed 6ebc\n   00000070: 30f8 d9b5 2e23 385a 4019 1585 8c59 be72\n   00000080:
      f343 fb1e b87b 16ff c5ab 0f8f 8fe9 f7cb\n   00000090: 3e66 3d8f e9f9 ecfa 1230
      66f3 6835 8cea\n   000000a0: efd3 0203 0100 01\n   Where NN is the next payload
      type (i.e., the type of the payload that\n   immediately follows this Certificate
      payload).\n"
    title: A.2.  RSA Example
  title: Appendix A.  Examples
- contents:
  - "Acknowledgements\n   This document reproduces some parts of the similar TLS document\n
    \  ([RFC7250]).\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Tero Kivinen\n   INSIDE Secure\n   Eerikinkatu 28\n   Helsinki
    \ FI-00180\n   Finland\n   Email: kivinen@iki.fi\n   Paul Wouters\n   Red Hat\n
    \  Email: pwouters@redhat.com\n   Hannes Tschofenig\n   Email: Hannes.Tschofenig@gmx.net\n
    \  URI:   http://www.tschofenig.priv.at\n"
  title: Authors' Addresses
