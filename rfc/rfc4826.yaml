- title: __initial_text__
  contents:
  - "                   Extensible Markup Language (XML)\n                Formats\
    \ for Representing Resource Lists\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
- title: Abstract
  contents:
  - "Abstract\n   In multimedia communications, presence, and instant messaging\n\
    \   systems, there is a need to define Uniform Resource Identifiers\n   (URIs)\
    \ that represent services that are associated with a group of\n   users.  One\
    \ example is a resource list service.  If a user sends a\n   Session Initiation\
    \ Protocol (SIP) SUBSCRIBE message to the URI\n   representing the resource list\
    \ service, the server will obtain the\n   state of the users in the associated\
    \ group, and provide it to the\n   sender.  To facilitate definition of these\
    \ services, this\n   specification defines two Extensible Markup Language (XML)\
    \ documents.\n   One document contains service URIs, along with their service\n\
    \   definition and a reference to the associated group of users.  The\n   second\
    \ document contains the user lists that are referenced from the\n   first.  This\
    \ list of users can be utilized by other applications and\n   services.  Both\
    \ documents can be created and managed with the XML\n   Configuration Access Protocol\
    \ (XCAP).\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  4\n   3.  Resource Lists Documents . . . . . . . . . . . . . . .\
    \ . . . .  4\n     3.1.  Structure  . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  4\n     3.2.  Schema . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . .  8\n     3.3.  Example Document . . . . . . . . . . . . . . . . . . . .\
    \ .  9\n     3.4.  Usage with XCAP  . . . . . . . . . . . . . . . . . . . . .\
    \ 10\n       3.4.1.  Application Unique ID  . . . . . . . . . . . . . . . . 10\n\
    \       3.4.2.  MIME Type  . . . . . . . . . . . . . . . . . . . . . . 10\n  \
    \     3.4.3.  XML Schema . . . . . . . . . . . . . . . . . . . . . . 10\n    \
    \   3.4.4.  Default Namespace  . . . . . . . . . . . . . . . . . . 10\n      \
    \ 3.4.5.  Additional Constraints . . . . . . . . . . . . . . . . 11\n       3.4.6.\
    \  Data Semantics . . . . . . . . . . . . . . . . . . . . 11\n       3.4.7.  Naming\
    \ Conventions . . . . . . . . . . . . . . . . . . 11\n       3.4.8.  Resource\
    \ Interdependencies . . . . . . . . . . . . . . 12\n       3.4.9.  Authorization\
    \ Policies . . . . . . . . . . . . . . . . 12\n   4.  RLS Services Documents .\
    \ . . . . . . . . . . . . . . . . . . . 13\n     4.1.  Structure  . . . . . .\
    \ . . . . . . . . . . . . . . . . . . 13\n     4.2.  Schema . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . 14\n     4.3.  Example Document . . . . .\
    \ . . . . . . . . . . . . . . . . 15\n     4.4.  Usage with XCAP  . . . . . .\
    \ . . . . . . . . . . . . . . . 16\n       4.4.1.  Application Unique ID  . .\
    \ . . . . . . . . . . . . . . 16\n       4.4.2.  MIME Type  . . . . . . . . .\
    \ . . . . . . . . . . . . . 16\n       4.4.3.  XML Schema . . . . . . . . . .\
    \ . . . . . . . . . . . . 16\n       4.4.4.  Default Namespace  . . . . . . .\
    \ . . . . . . . . . . . 16\n       4.4.5.  Additional Constraints . . . . . .\
    \ . . . . . . . . . . 16\n       4.4.6.  Data Semantics . . . . . . . . . . .\
    \ . . . . . . . . . 17\n       4.4.7.  Naming Conventions . . . . . . . . . .\
    \ . . . . . . . . 17\n       4.4.8.  Resource Interdependencies . . . . . . .\
    \ . . . . . . . 18\n       4.4.9.  Authorization Policies . . . . . . . . . .\
    \ . . . . . . 20\n     4.5.  Usage of an RLS Services Document by an RLS  . .\
    \ . . . . . 20\n   5.  SIP URI Canonicalization . . . . . . . . . . . . . . .\
    \ . . . . 22\n   6.  Extensibility  . . . . . . . . . . . . . . . . . . . . .\
    \ . . . 23\n   7.  Security Considerations  . . . . . . . . . . . . . . . . .\
    \ . . 24\n   8.  IANA Considerations  . . . . . . . . . . . . . . . . . . . .\
    \ . 24\n     8.1.  XCAP Application Unique IDs  . . . . . . . . . . . . . . .\
    \ 24\n       8.1.1.  resource-lists . . . . . . . . . . . . . . . . . . . . 24\n\
    \       8.1.2.  rls-services . . . . . . . . . . . . . . . . . . . . . 24\n  \
    \   8.2.  MIME Type Registrations  . . . . . . . . . . . . . . . . . 25\n    \
    \   8.2.1.  application/resource-lists+xml . . . . . . . . . . . . 25\n      \
    \ 8.2.2.  application/rls-services+xml . . . . . . . . . . . . . 26\n     8.3.\
    \  URN Sub-Namespace Registrations  . . . . . . . . . . . . . 27\n       8.3.1.\
    \  urn:ietf:params:xml:ns:resource-lists  . . . . . . . . 27\n       8.3.2.  urn:ietf:params:xml:ns:rls-services\
    \  . . . . . . . . . 28\n     8.4.  Schema Registrations . . . . . . . . . . .\
    \ . . . . . . . . 28\n       8.4.1.  urn:ietf:params:xml:schema:resource-lists\
    \  . . . . . . 28\n       8.4.2.  urn:ietf:params:xml:schema:rls-services  . .\
    \ . . . . . 29\n   9.  Acknowledgements . . . . . . . . . . . . . . . . . . .\
    \ . . . . 29\n   10. References . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . 29\n     10.1. Normative References . . . . . . . . . . . . . . . . .\
    \ . . 29\n     10.2. Informative References . . . . . . . . . . . . . . . . .\
    \ . 30\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Session Initiation Protocol (SIP) [4] defines the SIP\
    \ Uniform\n   Resource Identifier (URI) as any resource to which a SIP request\
    \ can\n   be generated for the purposes of establishing some form of\n   communications\
    \ operation.  These URIs can represent users (for\n   example, sip:joe@example.com).\
    \  The SIP URI can also represent a\n   service, such as voicemail, conferencing,\
    \ or a presence list.  A\n   common pattern across such SIP services is that the\
    \ service is\n   defined, and associated with a URI.  In order to operate, that\n\
    \   service needs to make use of a list of users (or, more generally, a\n   list\
    \ of resources).  When a SIP request is sent to the service URI,\n   the server\
    \ providing the service reads that list, and then performs\n   some kind of operation\
    \ against each resource on the list.  This is\n   shown in Figure 1.\n       \
    \                             /---\\\n                                   |   \
    \  |\n                                    \\---/ Resource\n                  \
    \            +----|     |  List\n                              |    |     |\n\
    \                              |     \\---/\n                              |\n\
    \                              |\n                              |\n          \
    \                    |\n                              V\n                    \
    \   +-------------+\n                       |             | -------->\n      \
    \                 |    SIP      |\n      ---------------> |  Service    | -------->\n\
    \               service |             |\n               URI     |            \
    \ | -------->\n                       +-------------+\n                      \
    \           Figure 1\n   One important example of such a service is a presence\
    \ [11] list\n   service.  A presence list service allows a client to generate\
    \ a SIP\n   SUBSCRIBE request to ask for presence information for a list of\n\
    \   users.  The presence list server obtains the presence for the users\n   on\
    \ the list and provides them back to the client.  A presence list\n   server is\
    \ a specific case of a resource list server (RLS) [14], which\n   allows a client\
    \ to generate a SIP SUBSCRIBE request to ask for\n   notifications of SIP events\
    \ for a list of resources.\n   Another example of such a service is an instant\
    \ conference service.\n   If a client sends a SIP INVITE request to the URI representing\
    \ the\n   instance conference service, the conference server will create a\n \
    \  conference call containing the client and the associated group of\n   users.\n\
    \   It is very useful for a user of these systems to define the groups of\n  \
    \ users or resources (generally called a resource list) separately from\n   the\
    \ services that access those resource lists.  Indeed, there are\n   usages for\
    \ resource lists even in the absence of any associated\n   network-based service.\
    \  As an example, rather than use a presence\n   list service, a client might\
    \ generate individual SUBSCRIBE requests\n   to obtain the presence of each user\
    \ in a locally stored presence\n   list.  In such a case, there is a need for\
    \ a format for storing the\n   list locally on disk.  Furthermore, the user might\
    \ wish to share the\n   list with friends, and desire to email it to those friends.\
    \  This\n   also requires a standardized format for the resource list.\n   As\
    \ such, this document defines two Extensible Markup Language (XML)\n   document\
    \ formats.  The first is used to represent resource lists,\n   independent of\
    \ any particular service.  The second is used to define\n   service URIs for an\
    \ RLS, and to associate a resource list with the\n   service URI.  This document\
    \ also defines an XML Configuration Access\n   Protocol (XCAP) [10] application\
    \ usage for managing each of these two\n   documents.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   In this document, the key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\",\n   \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\",\n   and \"OPTIONAL\" are to be interpreted as described in RFC 2119\
    \ [1] and\n   indicate requirement levels for compliant implementations.\n"
- title: 3.  Resource Lists Documents
  contents:
  - '3.  Resource Lists Documents

    '
- title: 3.1.  Structure
  contents:
  - "3.1.  Structure\n   A resource lists document is an XML [2] document that MUST\
    \ be well-\n   formed and MUST be valid according to schemas, including extension\n\
    \   schemas, available to the validater and applicable to the XML\n   document.\
    \  Resource lists documents MUST be based on XML 1.0 and MUST\n   be encoded using\
    \ UTF-8.  This specification makes use of XML\n   namespaces for identifying resource\
    \ lists documents and document\n   fragments.  The namespace URI for elements\
    \ defined by this\n   specification is a URN [3] that uses the namespace identifier\
    \ 'ietf'\n   defined by RFC 2648 [6] and extended by RFC 3688 [8].  This URN is:\n\
    \      urn:ietf:params:xml:ns:resource-lists\n   A resource lists document has\
    \ the <resource-lists> element as the\n   root element of the document.  This\
    \ element has no attributes.  Its\n   content is a sequence of zero or more <list>\
    \ elements, each of which\n   defines a single resource list.\n   Each <list>\
    \ element can contain an optional \"name\" attribute.  This\n   attribute is a\
    \ handle for the list.  When present, it MUST be unique\n   amongst all other\
    \ <list> elements within the same parent element.\n   The <list> element may also\
    \ contain attributes from other namespaces,\n   for the purposes of extensibility.\n\
    \   Each <list> element is composed of an optional display name, a\n   sequence\
    \ of zero or more elements, each of which may be an <entry>\n   element, a <list>\
    \ element, an <entry-ref> element, or an <external>\n   element, followed by any\
    \ number of elements from other namespaces,\n   for the purposes of extensibility.\
    \  The ability of a <list> element\n   to contain other <list> elements means\
    \ that a resource list can be\n   hierarchically structured.  The <display-name>\
    \ then allows for a\n   human-friendly name to be associated with each level in\
    \ the\n   hierarchy.  An <entry> element describes a single resource, defined\n\
    \   by a URI, that is part of the list.  An <entry-ref> element allows an\n  \
    \ entry in a document within the same XCAP root to be included by\n   reference,\
    \ rather than by value.  An <external> element contains a\n   reference to a list\
    \ stored on this or another server.\n   The <entry> element describes a single\
    \ resource.  The <entry> element\n   has a single mandatory attribute, \"uri\"\
    .  This attribute is equal to\n   the URI that is used to access the resource.\
    \  The resource list\n   format itself does not constrain the type of URI that\
    \ can be used.\n   However, the service making use of the resource list may require\n\
    \   specific URI schemes.  For example, RLS services will require URIs\n   that\
    \ represent subscribeable resources.  This includes the SIP and\n   pres [15]\
    \ URIs.  The \"uri\" attribute MUST be unique amongst all other\n   \"uri\" attributes\
    \ in <entry> elements within the same parent.\n   Uniqueness is determined by\
    \ case-sensitive string comparisons.  As\n   such, it is possible that two \"\
    uri\" attributes will have the same URI\n   when compared using the functional\
    \ equality rules defined for that\n   URI scheme, but different ones when compared\
    \ using case sensitive\n   string comparison.  The <entry> element can also contain\
    \ attributes\n   from other namespaces for the purposes of extensibility.\n  \
    \ The <entry> element contains a sequence of elements that provide\n   information\
    \ about the entry.  Only one such element is defined at\n   this time, which is\
    \ <display-name>.  This element provides a UTF-8-\n   encoded string, meant for\
    \ consumption by a human user, that describes\n   the resource.  Unlike the \"\
    name\" attribute of the <entry> element,\n   the <display-name> has no uniqueness\
    \ requirements.  The <display-\n   name> element can contain the \"xml:lang\"\
    \ attribute, which provides\n   the language of the display name.  The <entry>\
    \ element can contain\n   other elements from other namespaces.  This is meant\
    \ to support the\n   inclusion of other information about the entry, such as a\
    \ phone\n   number or postal address.\n   The <entry-ref> element allows an entry\
    \ to be included in the list by\n   reference, rather than by value.  This element\
    \ is only meaningful\n   when the document was obtained through XCAP.  In such\
    \ a case, the\n   referenced entry has to exist within the same XCAP root.  The\
    \ <entry>\n   element has a single mandatory attribute, \"ref\".  The \"ref\"\
    \ attribute\n   MUST be unique amongst all other \"ref\" attributes in <entry-ref>\n\
    \   elements within the same parent.  Uniqueness is determined by case\n   sensitive\
    \ string comparisons.  The <entry-ref> element also allows\n   attributes from\
    \ other namespaces, for the purposes of extensibility.\n   The content of an <entry-ref>\
    \ element is an optional display name,\n   followed by any number of elements\
    \ from other namespaces, for the\n   purposes of extensibility.  The display name\
    \ is useful for providing\n   a localized nickname as an alternative to the name\
    \ defined in the\n   <entry> to which the <entry-ref> refers.\n   The content\
    \ of the \"ref\" attribute is a relative HTTP URI [7].\n   Specifically, it MUST\
    \ be a relative path reference, where the base\n   URI is equal to the XCAP root\
    \ URI of the document in which the\n   <entry-ref> appears.  This relative URI,\
    \ if resolved into an absolute\n   URI according to the procedures in RFC 3986,\
    \ MUST resolve to an\n   <entry> element within a resource-lists document.  For\
    \ example,\n   suppose that an <entry> element within a specific XCAP root was\n\
    \   identified by the following HTTP URI:\n   http://xcap.example.com/resource-lists/users/sip:bill@example.com/\n\
    \   index/~~/resource-lists/list%5b@name=%22list1%22%5d/\n   entry%5b@uri=%22sip:petri@example.com%22%5d\n\
    \   If http://xcap.example.com is the XCAP root URI, then an <entry-ref>\n   element\
    \ pointing to this entry would have the following form:\n   <entry-ref ref=\"\
    resource-lists/users/sip:bill@example.com/\n   index/~~/resource-lists/list%5b@name=%22list1%22%5d/\n\
    \   entry%5b@uri=%22sip:petri@example.com%22%5d\"/>\n   Note that line folding\
    \ within the HTTP URI and XML attribute above\n   are for the purposes of readability\
    \ only.  Also note that, as\n   described in RFC 3986, the relative path URI does\
    \ not begin with the\n   \"/\".  Since the relative URI used within the \"ref\"\
    \ attribute must be\n   a relative path URI, the \"/\" will never be present as\
    \ the first\n   character within the content of a \"ref\" attribute.  Since the\
    \ content\n   of the \"ref\" attribute is a valid HTTP URI, it must be percent-\n\
    \   encoded within the XML document.\n   The <external> element is similar to\
    \ the <entry-ref> element.  Like\n   <entry-ref>, it is only meaningful in documents\
    \ obtained from an XCAP\n   server.  It too is a reference to content stored elsewhere.\
    \  However,\n   it refers to an entire list, and furthermore, it allows that list\
    \ to\n   be present on another server.  The <external> element has a single\n\
    \   mandatory attribute, \"anchor\", which specifies the external list by\n  \
    \ means of an absolute HTTP URI.  The \"anchor\" attribute MUST be unique\n  \
    \ amongst all other \"anchor\" attributes in <external> elements within\n   the\
    \ same parent.  Uniqueness is determined by case-sensitive string\n   comparisons.\
    \  The <external> element can also contain attributes from\n   other namespaces,\
    \ for the purposes of extensibility.  The content of\n   an <external> element\
    \ is an optional <display-name> followed by any\n   number of elements from another\
    \ namespace, for the purposes of\n   extensibility.  The value of the \"anchor\"\
    \ attribute MUST be an\n   absolute HTTP URI.  This URI MUST identify an XCAP\
    \ resource, and in\n   particular, it MUST represent a <list> element within a\
    \ resource\n   lists document.  The URI MUST be percent-encoded.\n   For both\
    \ the <entry-ref> and <external> elements, the responsibility\n   of resolving\
    \ their references falls upon the entity that is making\n   use of the document.\
    \  When the document is used in conjunction with\n   XCAP, this means that the\
    \ burden falls on the XCAP client.  If the\n   XCAP client is a PC-based application\
    \ using the resource-lists\n   document as a presence list, the references would\
    \ likely be resolved\n   upon explicit request by the user.  They can, of course,\
    \ be resolved\n   at any time.  If the XCAP client is an RLS itself, the references\n\
    \   would be resolved when the RLS receives a SUBSCRIBE request for an\n   RLS\
    \ service associated with a resource list that contains one of\n   these references\
    \ (see below).  An XCAP server defined by this\n   specification will not attempt\
    \ to resolve the references before\n   returning the document to the client. \
    \ Similarly, if, due to network\n   errors or some other problem, the references\
    \ cannot be resolved, the\n   handling is specific to the usage of the document.\
    \  For resource\n   lists being used by RLS services, the handling is discussed\
    \ below.\n"
- title: 3.2.  Schema
  contents:
  - "3.2.  Schema\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <xs:schema targetNamespace=\"\
    urn:ietf:params:xml:ns:resource-lists\"\n    xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\
    \n    xmlns=\"urn:ietf:params:xml:ns:resource-lists\"\n    elementFormDefault=\"\
    qualified\" attributeFormDefault=\"unqualified\">\n   <xs:import namespace=\"\
    http://www.w3.org/XML/1998/namespace\"\n    schemaLocation=\"http://www.w3.org/2001/xml.xsd\"\
    />\n    <xs:complexType name=\"listType\">\n     <xs:sequence>\n      <xs:element\
    \ name=\"display-name\" type=\"display-nameType\"\n       minOccurs=\"0\"/>\n\
    \      <xs:sequence minOccurs=\"0\" maxOccurs=\"unbounded\">\n       <xs:choice>\n\
    \        <xs:element name=\"list\">\n         <xs:complexType>\n          <xs:complexContent>\n\
    \           <xs:extension base=\"listType\"/>\n          </xs:complexContent>\n\
    \         </xs:complexType>\n        </xs:element>\n        <xs:element name=\"\
    external\" type=\"externalType\"/>\n        <xs:element name=\"entry\" type=\"\
    entryType\"/>\n        <xs:element name=\"entry-ref\" type=\"entry-refType\"/>\n\
    \       </xs:choice>\n      </xs:sequence>\n      <xs:any namespace=\"##other\"\
    \ processContents=\"lax\" minOccurs=\"0\"\n       maxOccurs=\"unbounded\"/>\n\
    \     </xs:sequence>\n     <xs:attribute name=\"name\" type=\"xs:string\" use=\"\
    optional\"/>\n     <xs:anyAttribute namespace=\"##other\" processContents=\"lax\"\
    />\n    </xs:complexType>\n    <xs:complexType name=\"entryType\">\n     <xs:sequence>\n\
    \      <xs:element name=\"display-name\" minOccurs=\"0\">\n       <xs:complexType>\n\
    \        <xs:simpleContent>\n         <xs:extension base=\"display-nameType\"\
    />\n        </xs:simpleContent>\n       </xs:complexType>\n      </xs:element>\n\
    \      <xs:any namespace=\"##other\" processContents=\"lax\" minOccurs=\"0\"\n\
    \       maxOccurs=\"unbounded\"/>\n     </xs:sequence>\n     <xs:attribute name=\"\
    uri\" type=\"xs:anyURI\" use=\"required\"/>\n     <xs:anyAttribute namespace=\"\
    ##other\" processContents=\"lax\"/>\n    </xs:complexType>\n    <xs:complexType\
    \ name=\"entry-refType\">\n     <xs:sequence>\n      <xs:element name=\"display-name\"\
    \ type=\"display-nameType\"\n       minOccurs=\"0\"/>\n      <xs:any namespace=\"\
    ##other\" processContents=\"lax\" minOccurs=\"0\"\n       maxOccurs=\"unbounded\"\
    />\n     </xs:sequence>\n     <xs:attribute name=\"ref\" type=\"xs:anyURI\" use=\"\
    required\"/>\n     <xs:anyAttribute namespace=\"##other\" processContents=\"lax\"\
    />\n    </xs:complexType>\n    <xs:complexType name=\"externalType\">\n     <xs:sequence>\n\
    \      <xs:element name=\"display-name\" type=\"display-nameType\"\n       minOccurs=\"\
    0\"/>\n      <xs:any namespace=\"##other\" processContents=\"lax\" minOccurs=\"\
    0\"\n       maxOccurs=\"unbounded\"/>\n     </xs:sequence>\n     <xs:attribute\
    \ name=\"anchor\" type=\"xs:anyURI\"/>\n     <xs:anyAttribute namespace=\"##other\"\
    \ processContents=\"lax\"/>\n    </xs:complexType>\n    <xs:element name=\"resource-lists\"\
    >\n     <xs:complexType>\n      <xs:sequence minOccurs=\"0\" maxOccurs=\"unbounded\"\
    >\n       <xs:element name=\"list\" type=\"listType\"/>\n      </xs:sequence>\n\
    \     </xs:complexType>\n    </xs:element>\n    <xs:complexType name=\"display-nameType\"\
    >\n     <xs:simpleContent>\n      <xs:extension base=\"xs:string\">\n       <xs:attribute\
    \ ref=\"xml:lang\"/>\n      </xs:extension>\n     </xs:simpleContent>\n    </xs:complexType>\n\
    \   </xs:schema>\n"
- title: 3.3.  Example Document
  contents:
  - "3.3.  Example Document\n   The following is an example of a document compliant\
    \ to the schema.\n   All line feeds within element content are for display purposes\
    \ only.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <resource-lists xmlns=\"\
    urn:ietf:params:xml:ns:resource-lists\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
    >\n    <list name=\"friends\">\n     <entry uri=\"sip:bill@example.com\">\n  \
    \    <display-name>Bill Doe</display-name>\n     </entry>\n     <entry-ref ref=\"\
    resource-lists/users/sip:bill@example.com/index/~~/\n      resource-lists/list%5b@name=%22list1%22%5d/entry%5b@uri=%22sip:pet\n\
    \      ri@example.com%22%5d\"/>\n     <list name=\"close-friends\">\n      <display-name>Close\
    \ Friends</display-name>\n      <entry uri=\"sip:joe@example.com\">\n       <display-name>Joe\
    \ Smith</display-name>\n      </entry>\n      <entry uri=\"sip:nancy@example.com\"\
    >\n       <display-name>Nancy Gross</display-name>\n      </entry>\n      <external\
    \ anchor=\"http://xcap.example.org/resource-lists/users/\n       sip:a@example.org/index/~~/resource-lists/list%5b@name=%22mkti\n\
    \       ng%22%5d\">\n        <display-name>Marketing</display-name>\n       </external>\n\
    \     </list>\n    </list>\n   </resource-lists>\n"
- title: 3.4.  Usage with XCAP
  contents:
  - "3.4.  Usage with XCAP\n   Resource lists documents can be manipulated with XCAP.\
    \  This section\n   provides the details necessary for such a usage.\n"
- title: 3.4.1.  Application Unique ID
  contents:
  - "3.4.1.  Application Unique ID\n   XCAP requires application usages to define\
    \ an application unique ID\n   (AUID) in either the IETF tree or a vendor tree.\
    \  This specification\n   defines the \"resource-lists\" AUID within the IETF\
    \ tree, via the IANA\n   registration in Section 8.\n"
- title: 3.4.2.  MIME Type
  contents:
  - "3.4.2.  MIME Type\n   The MIME type for this document is \"application/resource-lists+xml\"\
    .\n"
- title: 3.4.3.  XML Schema
  contents:
  - "3.4.3.  XML Schema\n   The XML Schema for this document is defined as the sole\
    \ content of\n   Section 3.2.\n"
- title: 3.4.4.  Default Namespace
  contents:
  - "3.4.4.  Default Namespace\n   The default namespace used in expanding URIs is\n\
    \   urn:ietf:params:xml:ns:resource-lists.\n"
- title: 3.4.5.  Additional Constraints
  contents:
  - "3.4.5.  Additional Constraints\n   In addition to the schema, there are constraints\
    \ on the values\n   present in the \"name\" attribute of the <list> element, the\
    \ \"uri\"\n   attribute of the <external> element, the \"ref\" attribute of the\n\
    \   <entry-ref> element, and the \"anchor\" attribute of the <external>\n   element.\
    \  These constraints are defined in Section 3.1.  Some of\n   these constraints\
    \ are enforced by the XCAP server.  Those constraints\n   are:\n   o  The \"name\"\
    \ attribute in a <list> element MUST be unique amongst\n      all other \"name\"\
    \ attributes of <list> elements within the same\n      parent element.  Uniqueness\
    \ is determined by case-sensitive string\n      comparison.\n   o  The \"uri\"\
    \ attribute in a <entry> element MUST be unique amongst\n      all other \"uri\"\
    \ attributes of <entry> elements within the same\n      parent element.  Uniqueness\
    \ is determined by case-sensitive string\n      comparison.\n   o  The URI in\
    \ the \"ref\" attribute of the <entry-ref> element MUST be\n      unique amongst\
    \ all other \"ref\" attributes of <entry-ref> elements\n      within the same\
    \ parent element.  Uniqueness is determined by case-\n      sensitive string comparison.\
    \  The value of the attribute MUST be a\n      relative path reference.  Note\
    \ that the server is not responsible\n      for verifying that the reference resolves\
    \ to an <entry> element in\n      a document within the same XCAP root.\n   o\
    \  The URI in the \"anchor\" attribute of the <external> element MUST\n      be\
    \ unique amongst all other \"anchor\" attributes of <external>\n      elements\
    \ within the same parent element.  Uniqueness is determined\n      by case-sensitive\
    \ string comparison.  The value of the attribute\n      MUST be an absolute HTTP\
    \ URI.  Note that the server is not\n      responsible for verifying that the\
    \ URI resolves to a <list>\n      element in a document.  Indeed, since the URI\
    \ may reference a\n      server in another domain, referential integrity cannot\
    \ be\n      guaranteed without adding substantial complexity to the system.\n"
- title: 3.4.6.  Data Semantics
  contents:
  - "3.4.6.  Data Semantics\n   Semantics for the document content are provided in\
    \ Section 3.1.\n"
- title: 3.4.7.  Naming Conventions
  contents:
  - "3.4.7.  Naming Conventions\n   Resource lists documents are usually identified\
    \ as references from\n   other application usages.  For example, an RLS services\
    \ document\n   contains a reference to the resource list it uses.\n   Frequently,\
    \ an XCAP client will wish to insert or remove an <entry>,\n   <entry-ref>, or\
    \ <external> element from a document without having a\n   cached copy of that\
    \ document.  In such a case, the \"uri\" attribute of\n   the <entry> element,\
    \ the \"ref\" attribute of the <entry-ref> element,\n   or the \"anchor\" attribute\
    \ of the <external> element is used as an\n   index to select the element to operate\
    \ upon.  The XCAP server will\n   determine uniqueness by case-sensitive string\
    \ comparison.  However,\n   each of these attributes contain URIs, and the URI\
    \ equality rules for\n   their schemes may allow two URIs to be the same, even\
    \ if they are\n   different by case sensitive string comparison.  As such, it\
    \ is\n   possible that a client will attempt a PUT or DELETE in an attempt to\n\
    \   modify or remove an existing element.  Instead, the PUT ends up\n   inserting\
    \ a new element, or the DELETE ends up returning an error\n   response.\n   If\
    \ the XCAP client cannot determine whether the user intent is to\n   create or\
    \ replace, the client SHOULD canonicalize the URI before\n   performing the operation.\
    \  For a SIP URI (often present in the \"uri\"\n   attribute of the <entry> element),\
    \ this canonicalization procedure is\n   defined in Section 5.  We expect that\
    \ the SIP URIs that will be\n   placed into resource lists documents will usually\
    \ be of the form\n   sip:user@domain, and possibly include a user parameter. \
    \ The\n   canonicalization rules work perfectly for these URIs.\n   For HTTP URIs,\
    \ a basic canonicalization algorithm is as follows.  If\n   the port in the URI\
    \ is equal to the default port (80 for http URIs),\n   then the port is removed.\
    \  The hostname is converted to all\n   lowercase.  Any percent-encoding in the\
    \ URI for characters which do\n   not need to be percent-encoded is removed. \
    \ A character needs to be\n   percent-encoded when it is not permitted in that\
    \ part of the URI\n   based on the grammar for that part of the URI.\n"
- title: 3.4.8.  Resource Interdependencies
  contents:
  - "3.4.8.  Resource Interdependencies\n   There are no resource interdependencies\
    \ identified by this\n   application usage.\n"
- title: 3.4.9.  Authorization Policies
  contents:
  - "3.4.9.  Authorization Policies\n   This application usage does not modify the\
    \ default XCAP authorization\n   policy, which is that only a user can read, write,\
    \ or modify their\n   own documents.  A server can allow privileged users to modify\n\
    \   documents that they don't own, but the establishment and indication\n   of\
    \ such policies is outside the scope of this document.  It is\n   anticipated\
    \ that a future application usage will define which users\n   are allowed to modify\
    \ a list resource.\n"
- title: 4.  RLS Services Documents
  contents:
  - '4.  RLS Services Documents

    '
- title: 4.1.  Structure
  contents:
  - "4.1.  Structure\n   An RLS services document is used to define URIs that represent\n\
    \   services provided by a Resource List Server (RLS) as defined in [14].\n  \
    \ An RLS services document is an XML [2] document that MUST be well-\n   formed\
    \ and MUST be valid according to schemas, including extension\n   schemas, available\
    \ to the validater and applicable to the XML\n   document.  RLS services documents\
    \ MUST be based on XML 1.0 and MUST\n   be encoded using UTF-8.  This specification\
    \ makes use of XML\n   namespaces for identifying RLS services documents and document\n\
    \   fragments.  The namespace URI for elements defined by this\n   specification\
    \ is a URN [3] that uses the namespace identifier 'ietf'\n   defined by RFC 2648\
    \ [6] and extended by RFC 3688 [8].  This URN is:\n      urn:ietf:params:xml:ns:rls-services\n\
    \   The root element of an rls-services document is <rls-services>.  It\n   contains\
    \ a sequence of <service> elements, each of which defines a\n   service available\
    \ at an RLS.\n   Each <service> element has a single mandatory attribute, \"uri\"\
    .  This\n   URI defines the resource associated with the service.  That is, if\
    \ a\n   client subscribes to that URI, they will obtain the service defined\n\
    \   by the corresponding <service> element.  The <service> element can\n   also\
    \ contain attributes from other namespaces, for the purposes of\n   extensibility.\
    \  The <service> element contains child elements that\n   define the service.\
    \  For an RLS service, very little service\n   definition is needed: just the\
    \ resource list to which the server will\n   perform virtual subscriptions [14]\
    \ and the set of event packages that\n   the service supports.  The former can\
    \ be conveyed in one of two ways.\n   There can be a <resource-list> element,\
    \ which points to a <list>\n   element in a resource-lists document, or there\
    \ can be a <list>\n   element, which includes the resource list directly.  The\
    \ supported\n   packages are contained in the <packages> element.  The <service>\n\
    \   element can also contain elements from other namespaces, for the\n   purposes\
    \ of extensibility.\n   By including the contents of the resource list directly,\
    \ a user can\n   create lists and add members to them with a single XCAP operation.\n\
    \   However, the resulting list becomes \"hidden\" within the RLS service\n  \
    \ definition, and is not usable by other application usages.  For this\n   reason,\
    \ the <resource-list> element exists as an alternative.  It can\n   reference\
    \ a <list> element in a resource-lists document.  Since the\n   list is separated\
    \ from the service definition, it can be easily\n   reused by other application\
    \ usages.\n   The <list> element is of the list type defined by the schema for\n\
    \   resource lists.  It is discussed in Section 3.1.\n   The <resource-list> element\
    \ contains a URI.  This element is only\n   meaningful when the document was obtained\
    \ through XCAP.  The URI MUST\n   be an absolute HTTP URI representing an XCAP\
    \ element resource.  Its\n   XCAP root MUST be the same as the XCAP root of the\
    \ RLS services\n   document.  When the RLS services document is present in a user's\
    \ home\n   directory, the HTTP URI MUST exist underneath that user's home\n  \
    \ directory in the resource-lists application usage.  When the RLS\n   services\
    \ document is in the global directory, the HTTP URI MUST exist\n   underneath\
    \ any user's home directory in the resource-lists\n   application usage.  In either\
    \ case, the element referenced by the URI\n   MUST be a <list> element within\
    \ a resource-lists document.  All of\n   these constraints except for the latter\
    \ one (which is a referential\n   integrity constraint) will be enforced by the\
    \ XCAP server.\n   The <packages> element contains a sequence of <package> elements.\n\
    \   The content of each <package> element is the name of a SIP event\n   package\
    \ [13].  The <packages> element may also contain elements from\n   additional\
    \ namespaces, for the purposes of extensibility.  The\n   <packages> element is\
    \ optional.  When it is not present, it means\n   that the RLS service will accept\
    \ subscriptions for any event package.\n"
- title: 4.2.  Schema
  contents:
  - "4.2.  Schema\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <xs:schema targetNamespace=\"\
    urn:ietf:params:xml:ns:rls-services\"\n    xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\
    \n    xmlns=\"urn:ietf:params:xml:ns:rls-services\"\n    xmlns:rl=\"urn:ietf:params:xml:ns:resource-lists\"\
    \n    elementFormDefault=\"qualified\" attributeFormDefault=\"unqualified\">\n\
    \    <xs:element name=\"rls-services\">\n     <xs:complexType>\n      <xs:sequence\
    \ minOccurs=\"0\" maxOccurs=\"unbounded\">\n       <xs:element name=\"service\"\
    \ type=\"serviceType\"/>\n      </xs:sequence>\n     </xs:complexType>\n    </xs:element>\n\
    \    <xs:complexType name=\"serviceType\">\n     <xs:sequence>\n      <xs:choice>\n\
    \       <xs:element name=\"resource-list\" type=\"xs:anyURI\"/>\n       <xs:element\
    \ name=\"list\" type=\"rl:listType\"/>\n      </xs:choice>\n      <xs:element\
    \ name=\"packages\" type=\"packagesType\" minOccurs=\"0\"/>\n      <xs:any namespace=\"\
    ##other\" processContents=\"lax\" minOccurs=\"0\"\n       maxOccurs=\"unbounded\"\
    />\n     </xs:sequence>\n     <xs:attribute name=\"uri\" type=\"xs:anyURI\" use=\"\
    required\"/>\n     <xs:anyAttribute namespace=\"##other\" processContents=\"lax\"\
    />\n    </xs:complexType>\n    <xs:complexType name=\"packagesType\">\n     <xs:sequence\
    \ minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"package\"\
    \ type=\"packageType\"/>\n      <xs:any namespace=\"##other\" processContents=\"\
    lax\" minOccurs=\"0\"\n       maxOccurs=\"unbounded\"/>\n     </xs:sequence>\n\
    \    </xs:complexType>\n    <xs:simpleType name=\"packageType\">\n     <xs:restriction\
    \ base=\"xs:string\"/>\n    </xs:simpleType>\n   </xs:schema>\n"
- title: 4.3.  Example Document
  contents:
  - "4.3.  Example Document\n   This document shows two services.  One is sip:mybuddies@example.com,\n\
    \   and the other is sip:marketing@example.com.  The former service\n   references\
    \ a resource list in a resource-lists document, and the\n   latter one includes\
    \ a list locally.  Both services are for the\n   presence event package only.\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <rls-services xmlns=\"urn:ietf:params:xml:ns:rls-services\"\
    \n      xmlns:rl=\"urn:ietf:params:xml:ns:resource-lists\"\n      xmlns:xsi=\"\
    http://www.w3.org/2001/XMLSchema-instance\">\n    <service uri=\"sip:mybuddies@example.com\"\
    >\n     <resource-list>http://xcap.example.com/resource-lists/user\n      s/sip:joe@example.com/index/~~/resource-lists/list%5b@nam\n\
    \      e=%22l1%22%5d</resource-list>\n     <packages>\n      <package>presence</package>\n\
    \     </packages>\n    </service>\n    <service uri=\"sip:marketing@example.com\"\
    >\n      <list name=\"marketing\">\n        <rl:entry uri=\"sip:joe@example.com\"\
    />\n        <rl:entry uri=\"sip:sudhir@example.com\"/>\n      </list>\n      <packages>\n\
    \        <package>presence</package>\n      </packages>\n    </service>\n   </rls-services>\n"
- title: 4.4.  Usage with XCAP
  contents:
  - "4.4.  Usage with XCAP\n   RLS services documents can be manipulated with XCAP.\
    \  This section\n   provides the details necessary for such a usage.\n"
- title: 4.4.1.  Application Unique ID
  contents:
  - "4.4.1.  Application Unique ID\n   XCAP requires application usages to define\
    \ an application unique ID\n   ID (AUID) in either the IETF tree or a vendor tree.\
    \  This\n   specification defines the \"rls-services\" AUID within the IETF tree,\n\
    \   via the IANA registration in Section 8.\n"
- title: 4.4.2.  MIME Type
  contents:
  - "4.4.2.  MIME Type\n   The MIME type for this document is \"application/rls-services+xml\"\
    .\n"
- title: 4.4.3.  XML Schema
  contents:
  - "4.4.3.  XML Schema\n   The XML Schema for this document is defined as the sole\
    \ content of\n   Section 4.2.\n"
- title: 4.4.4.  Default Namespace
  contents:
  - "4.4.4.  Default Namespace\n   The default namespace used in expanding URIs is\n\
    \   urn:ietf:params:xml:ns:rls-services.\n"
- title: 4.4.5.  Additional Constraints
  contents:
  - "4.4.5.  Additional Constraints\n   In addition to the schema, there are constraints\
    \ on the URIs present\n   in the <service> and <resource-list> elements.  These\
    \ constraints are\n   defined in Section 3.1.  Some of these constraints are enforced\
    \ by\n   the XCAP server.  Those constraints are:\n   o  The URI in the \"uri\"\
    \ attribute of the <service> element MUST be\n      unique amongst all other URIs\
    \ in \"uri\" elements in any <service>\n      element in any document on a particular\
    \ server.  This uniqueness\n      constraint spans across XCAP roots.  Furthermore,\
    \ the URI MUST NOT\n      correspond to an existing resource within the domain\
    \ of the URI.\n      If a server is asked to set the URI to something that already\n\
    \      exists, the server MUST reject the request with a 409, and use the\n  \
    \    mechanisms defined in [10] to suggest alternate URIs that have not\n    \
    \  yet been allocated.\n   o  The URI in a <resource-list> element MUST be an\
    \ absolute URI.  The\n      server MUST verify that the URI path contains \"resource-lists\"\
    \ in\n      the path segment corresponding to the AUID.  If the RLS services\n\
    \      document is within the XCAP user tree (as opposed to the global\n     \
    \ tree), the server MUST verify that the XUI in the path is the same\n      as\
    \ the XUI in the URI of to the RLS services document.  These\n      checks are\
    \ made by examining the URI value, as opposed to\n      dereferencing the URI.\
    \  The server is not responsible for\n      verifying that the URI actually points\
    \ to a <list> element within\n      a valid resource lists document.\n   o  In\
    \ addition, an RLS services document can contain a <list>\n      element, which\
    \ in turn can contain <entry>, <entry-ref>, <list>,\n      and <external> elements.\
    \  The constraints defined for these\n      elements in Section 3.4.7 MUST be\
    \ enforced.\n   o  In some cases, an XCAP client will wish to create a new RLS\n\
    \      service, and wish to assign it a \"vanity URI\", such as\n      sip:friends@example.com.\
    \  However, the client does not know\n      whether this URI meets the uniqueness\
    \ constraints defined above.\n      In that case, it can simply attempt the creation\
    \ operation, and if\n      the result is a 409 that contains a detailed conflict\
    \ report with\n      the <uniqueness-failure> element, the client knows that the\
    \ URI\n      could not be assigned.  It can then retry with a different vanity\n\
    \      URI, or use one of the suggestions in the detailed conflict\n      report.\n\
    \   o  If the client wishes to create a new RLS service, and it doesn't\n    \
    \  care what the URI is, the client creates a random one, and\n      attempts\
    \ the creation operation.  As discussed in [10], if this\n      should fail with\
    \ a uniqueness conflict, the client can retry with\n      different URIs with\
    \ increasing randomness.\n"
- title: 4.4.6.  Data Semantics
  contents:
  - "4.4.6.  Data Semantics\n   Semantics for the document content are provided in\
    \ Section 4.1.\n"
- title: 4.4.7.  Naming Conventions
  contents:
  - "4.4.7.  Naming Conventions\n   Typically, there are two distinct XCAP clients\
    \ that access RLS\n   services documents.  The first is a client acting on behalf\
    \ of the\n   end user in the system.  This client edits and writes both resource\n\
    \   lists and RLS services documents as they are created or modified by\n   the\
    \ end user.  The other XCAP client is the RLS itself, which reads\n   the RLS\
    \ services documents in order to process SUBSCRIBE requests.\n   To make it easier\
    \ for an RLS to find the <service> element for a\n   particular URI, the XCAP\
    \ server maintains, within the global tree, a\n   single RLS services document\
    \ representing the union of all the\n   <service> elements across all documents\
    \ created by all users within\n   the same XCAP root.  There is a single instance\
    \ of this document, and\n   its name is \"index\".  Thus, if the root services\
    \ URI is\n   http://xcap.example.com, the following is the URI that an RLS would\n\
    \   use to fetch this index:\n   http://xcap.example.com/rls-services/global/index\n\
    \   As discussed below, this index is created from all the documents in\n   the\
    \ user tree that have the name \"index\" as well.  An implication of\n   this\
    \ is that a client operating on behalf of a user SHOULD define its\n   RLS services\
    \ within the document named \"index\".  If the root services\n   URI is http://xcap.example.com,\
    \ for user \"sip:joe@example.com\" the\n   URI for this document would be:\n \
    \  http://xcap.example.com/rls-services/users/sip:joe@example.com/index\n   If\
    \ a client elects to define RLS services in a different document,\n   this document\
    \ will not be \"picked up\" in the global index, and\n   therefore, will not be\
    \ used as an RLS service.\n"
- title: 4.4.8.  Resource Interdependencies
  contents:
  - "4.4.8.  Resource Interdependencies\n   As with other application usages, the\
    \ XML schema and the XCAP\n   resource naming conventions describe most of the\
    \ resource\n   interdependencies applicable to this application usage.\n   This\
    \ application usage defines an additional resource interdependence\n   between\
    \ a single document in the global tree and all documents in the\n   user tree\
    \ with the name \"index\".  This global document is formed as\n   the union of\
    \ all of the index documents for all users within the same\n   XCAP root.  In\
    \ this case, the union operation implies that each\n   <service> element in a\
    \ user document will also be present as a\n   <service> element in the global\
    \ document.  The inverse is true as\n   well.  Every <service> element in the\
    \ global document exists within a\n   user document within the same XCAP root.\n\
    \   As an example, consider the RLS services document for user\n   sip:joe@example.com:\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <rls-services>\n    <service\
    \ uri=\"sip:mybuddies@example.com\">\n     <resource-list>http://xcap.example.com/resource-lists/users/si\n\
    \      p:joe@example.com/index/~~/resource-lists/list%5b@name=%22l1%\n      22%5d</resource-list>\n\
    \     <packages>\n      <package>presence</package>\n     </packages>\n    </service>\n\
    \   </rls-services>\n   And consider the RLS services document for user bob:\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <rls-services>\n    <service\
    \ uri=\"sip:marketing@example.com\">\n      <list name=\"marketing\">\n      \
    \  <rl:entry uri=\"sip:joe@example.com\"/>\n        <rl:entry uri=\"sip:sudhir@example.com\"\
    />\n      </list>\n      <packages>\n        <package>presence</package>\n   \
    \   </packages>\n    </service>\n   </rls-services>\n   The global document at\n\
    \   http://xcap.example.com/rls-services/global/index would look like\n   this:\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <rls-services xmlns=\"urn:ietf:params:xml:ns:rls-services\"\
    \n      xmlns:rl=\"urn:ietf:params:xml:ns:resource-lists\"\n      xmlns:xsi=\"\
    http://www.w3.org/2001/XMLSchema-instance\">\n    <service uri=\"sip:mybuddies@example.com\"\
    >\n     <resource-list>http://xcap.example.com/resource-lists/user\n      s/sip:joe@example.com/index/~~/resource-lists/list%5b@nam\n\
    \      e=%22l1%22%5d</resource-list>\n     <packages>\n      <package>presence</package>\n\
    \     </packages>\n    </service>\n    <service uri=\"sip:marketing@example.com\"\
    >\n      <list name=\"marketing\">\n        <rl:entry uri=\"sip:joe@example.com\"\
    />\n        <rl:entry uri=\"sip:sudhir@example.com\"/>\n      </list>\n      <packages>\n\
    \        <package>presence</package>\n      </packages>\n    </service>\n   </rls-services>\n\
    \   Requests made against the global document MUST generate responses\n   that\
    \ reflect the most recent state of all the relevant user\n   documents.  This\
    \ requirement does not imply that the server must\n   actually store this global\
    \ document.  It is anticipated that most\n   systems will dynamically construct\
    \ the responses to any particular\n   request against the document resource.\n\
    \   The uniqueness constraint on the \"uri\" attribute of <service> will\n   ensure\
    \ that no two <service> elements in the global document have the\n   same value\
    \ of that attribute.\n"
- title: 4.4.9.  Authorization Policies
  contents:
  - "4.4.9.  Authorization Policies\n   This application usage does not modify the\
    \ default XCAP authorization\n   policy, which is that only a user can read, write,\
    \ or modify their\n   own documents.  A server can allow privileged users to modify\n\
    \   documents that they don't own, but the establishment and indication\n   of\
    \ such policies are outside the scope of this document.  It is\n   anticipated\
    \ that a future application usage will define which users\n   are allowed to modify\
    \ an RLS services document.\n   The index document maintained in the global tree\
    \ represents sensitive\n   information, as it contains the union of all the information\
    \ for all\n   users on the server.  As such, its access MUST be restricted to\n\
    \   trusted elements within domain of the server.  Typically, this would\n   be\
    \ limited to the RLSs that need access to this document.\n"
- title: 4.5.  Usage of an RLS Services Document by an RLS
  contents:
  - "4.5.  Usage of an RLS Services Document by an RLS\n   This section discusses\
    \ how an RLS, on receipt of a SUBSCRIBE request,\n   uses XCAP and the RLS services\
    \ document to guide its operation.\n   When an RLS receives a SUBSCRIBE request\
    \ for a URI (present in the\n   Request URI), it obtains the <service> element\
    \ whose uri attribute\n   matches (based on URI equality) the URI in the SUBSCRIBE\
    \ request.\n   This document makes no normative statements on how this might be\n\
    \   accomplished.  The following paragraph provides one possible\n   approach.\n\
    \   The RLS canonicalizes the Request URI as described in Section 5.  It\n   then\
    \ performs an XCAP GET operation against the URI formed by\n   combining the XCAP\
    \ root with the document selector of the global\n   index with a node selector\
    \ of the form \"rls-services/\n   service[@uri=<canonical-uri>]\", where <canonical-uri>\
    \ is the\n   canonicalized version of the Request URI.  If the response is a 200\n\
    \   OK, it will contain the service definition for that URI.\n   Once the <service>\
    \ element has been obtained, it is examined.  If the\n   <packages> element is\
    \ present, and the event package in the SUBSCRIBE\n   request is not amongst those\
    \ listed in the <package> elements within\n   <packages>, the request MUST be\
    \ rejected with a 489 (Bad Event)\n   response code, as described in [13].  Otherwise,\
    \ it SHOULD be\n   processed.  The next step is to authorize that the client is\
    \ allowed\n   to subscribe to the resource.  This can be done using the data\n\
    \   defined in [12], for example.  Assuming the subscriber is authorized\n   to\
    \ subscribe to that resource, the subscription is processed\n   according to the\
    \ procedures defined in [14].  This processing\n   requires the RLS to compute\
    \ a flat list of URIs that are to be\n   subscribed to.  If the <service> element\
    \ had a <list> element, it is\n   extracted.  If the <service> element had a <resource-list>\
    \ element,\n   its URI content is dereferenced.  The result should be a <list>\n\
    \   element.  If it is not, the request SHOULD be rejected with a 502\n   (Bad\
    \ Gateway).  Otherwise, that <list> element is extracted.\n   At this point, the\
    \ RLS has a <list> element in its possession.  The\n   next step is to obtain\
    \ a flat list of URIs from this element.  To do\n   that, it traverses the tree\
    \ of elements rooted in the <list> element.\n   Before traversal begins, the RLS\
    \ initializes two lists: the \"flat\n   list\", which will contain the flat list\
    \ of the URI after traversal,\n   and the \"traversed list\", which contains a\
    \ list of HTTP URIs in\n   <external> elements that have already been visited.\
    \  Both lists are\n   initially empty.  Next, tree traversal begins.  A server\
    \ can use any\n   tree-traversal ordering it likes, such as depth-first search\
    \ or\n   breadth-first search.  The processing at each element in the tree\n \
    \  depends on the name of the element:\n   o  If the element is <entry>, the URI\
    \ in the \"uri\" attribute of the\n      element is added to the flat list if\
    \ it is not already present\n      (based on case-sensitive string equality) in\
    \ that list, and the\n      URI scheme represents one that can be used to service\n\
    \      subscriptions, such as SIP [4] and pres [15].\n   o  If the element is\
    \ an <entry-ref>, the relative path reference\n      making up the value of the\
    \ \"ref\" attribute is resolved into an\n      absolute URI.  This is done using\
    \ the procedures defined in\n      Section 5.2 of RFC 3986 [7], using the XCAP\
    \ root of the RLS\n      services document as the base URI.  This absolute URI\
    \ is resolved.\n      If the result is not a 200 OK containing a <entry> element,\
    \ the\n      SUBSCRIBE request SHOULD be rejected with a 502 (Bad Gateway).\n\
    \      Otherwise, the <entry> element returned is processed as described\n   \
    \   in the previous step.\n   o  If the element is an <external> element, the\
    \ absolute URI making\n      up the value of the \"anchor\" attribute of the element\
    \ is examined.\n      If the URI is on the traversed list, the server MUST cease\n\
    \      traversing the tree, and SHOULD reject the SUBSCRIBE request with\n   \
    \   a 502 (Bad Gateway).  If the URI is not on the traversed list, the\n     \
    \ server adds the URI to the traversed list, and dereferences the\n      URI.\
    \  If the result is not a 200 OK containing a <list> element,\n      the SUBSCRIBE\
    \ request SHOULD be rejected with a 502 (Bad Gateway).\n      Otherwise, the RLS\
    \ replaces the <external> element in its local\n      copy of the tree with the\
    \ <list> element that was returned, and\n      tree traversal continues.\n   Because\
    \ the <external> element is used to dynamically construct the\n   tree, there\
    \ is a possibility of recursive evaluation of references.\n   The traversed list\
    \ is used to prevent this from happening.\n   Once the tree has been traversed,\
    \ the RLS can create virtual\n   subscriptions to each URI in the flat list, as\
    \ defined in [14].  In\n   the processing steps outlined above, when an <entry-ref>\
    \ or\n   <external> element contains a reference that cannot be resolved,\n  \
    \ failing the request is at SHOULD strength.  In some cases, an RLS may\n   provide\
    \ better service by creating virtual subscriptions to the URIs\n   in the flat\
    \ list that could be obtained, omitting those that could\n   not.  Only in those\
    \ cases should the SHOULD recommendation be\n   ignored.\n"
- title: 5.  SIP URI Canonicalization
  contents:
  - "5.  SIP URI Canonicalization\n   This section provides a technique for URI canonicalization.\
    \  This\n   canonicalization produces a URI that, in most cases, is equal to the\n\
    \   original URI (where equality is based on the URI comparison rules in\n   RFC\
    \ 3261).  Furthermore, the canonicalized URI will usually be\n   lexically equivalent\
    \ to the canonicalized version of any other URI\n   equal to the original.\n \
    \  To canonicalize the URI, the following steps are followed:\n   1.  First, the\
    \ domain part of the URI is converted into all\n       lowercase, and any tokens\
    \ (such as \"user\" or \"transport\" or\n       \"udp\") are converted to all\
    \ lowercase.\n   2.  Secondly, any percent-encoding in the URI for characters\
    \ which do\n       not need to be percent-encoded is removed.  A character needs\
    \ to\n       be percent-encoded when it is not permitted in that part of the\n\
    \       URI based on the grammar for that part of the URI.  For example,\n   \
    \    if a SIP URI is sip:%6aoe%20smith@example.com, it is changed to\n       sip:joe%20smith@example.com.\
    \  In the original URI, the character\n       'j' was percent-encoded.  This is\
    \ allowed, but not required,\n       since the grammar allows a 'j' to appear\
    \ in the user part.  As a\n       result, it appears as 'j' after this step of\
    \ canonicalization.\n   3.  Thirdly, any URI parameters are reordered so that\
    \ they appear in\n       lexical order based on parameter name.  The ordering\
    \ of a\n       character is determined by the US-ASCII numerical value of that\n\
    \       character, with smaller numbers coming first.  Parameters are\n      \
    \ ordered with the leftmost character as most significant.  For\n       parameters\
    \ that contain only letters, this is equivalent to an\n       alphabetical ordering.\n\
    \   4.  Finally, any header parameters are discarded.  This canonicalized\n  \
    \     URI is used instead of the original URI.\n   If two URIs, A and B, are functionally\
    \ equal (meaning that they are\n   equal according to the URI comparison rules\
    \ in RFC 3261), their\n   canonicalized URIs are equal under case-sensitive string\
    \ comparison\n   if the following are true:\n   o  Neither URI contains header\
    \ parameters.\n   o  If one of the URI contains a URI parameter not defined in\
    \ RFC\n      3261, the other does as well.\n"
- title: 6.  Extensibility
  contents:
  - "6.  Extensibility\n   Resource-lists and RLS services documents are meant to\
    \ be extended.\n   An extension takes place by defining a new set of elements\
    \ in a new\n   namespace, governed by a new schema.  Every extension MUST have\
    \ an\n   appropriate XML namespace assigned to it.  The XML namespace of the\n\
    \   extension MUST be different from the namespaces defined in this\n   specification.\
    \  The extension MUST NOT change the syntax or semantics\n   of the schemas defined\
    \ in this document.  All XML tags and attributes\n   that are part of the extension\
    \ MUST be appropriately qualified so as\n   to place them within that namespace.\n\
    \   This specification defines explicit places where new elements or\n   attributes\
    \ from an extension can be placed.  These are explicitly\n   indicated in the\
    \ schemas by the <any> and <anyAttribute> elements.\n   Extensions to this specification\
    \ MUST specify where their elements\n   can be placed within the document.\n \
    \  As a result, a document that contains extensions will require\n   multiple\
    \ schemas in order to determine its validity: a schema defined\n   in this document,\
    \ along with those defined by extensions present in\n   the document.  Because\
    \ extensions occur by adding new elements and\n   attributes governed by new schemas,\
    \ the schemas defined in this\n   document are fixed and would only be changed\
    \ by a revision to this\n   specification.  Such a revision, should it take place,\
    \ would endeavor\n   to allow documents compliant to the previous schema to remain\n\
    \   compliant to the new one.  As a result, the schemas defined here\n   don't\
    \ provide explicit schema versions, as this is not expected to be\n   needed.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   The information contained in rls-services and\
    \ resource-lists\n   documents are particularly sensitive.  It represents the\
    \ principle\n   set of people with whom a user would like to communicate.  As\
    \ a\n   result, clients SHOULD use TLS when contacting servers in order to\n \
    \  fetch this information.  Note that this does not represent a change\n   in\
    \ requirement strength from XCAP.\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   There are several IANA considerations associated\
    \ with this\n   specification.\n"
- title: 8.1.  XCAP Application Unique IDs
  contents:
  - "8.1.  XCAP Application Unique IDs\n   This section registers two new XCAP Application\
    \ Unique IDs (AUIDs)\n   according to the IANA procedures defined in [10].\n"
- title: 8.1.1.  resource-lists
  contents:
  - "8.1.1.  resource-lists\n   Name of the AUID:  resource-lists\n   Description:\
    \  A resource lists application is any application that\n      needs access to\
    \ a list of resources, identified by a URI, to which\n      operations, such as\
    \ subscriptions, can be applied.\n"
- title: 8.1.2.  rls-services
  contents:
  - "8.1.2.  rls-services\n   Name of the AUID:  rls-services\n   Description:  A\
    \ Resource List Server (RLS) services application is a\n      Session Initiation\
    \ Protocol (SIP) application whereby a server\n      receives SIP SUBSCRIBE requests\
    \ for resource, and generates\n      subscriptions towards a resource list.\n"
- title: 8.2.  MIME Type Registrations
  contents:
  - "8.2.  MIME Type Registrations\n   This specification requests the registration\
    \ of two new MIME types\n   according to the procedures of RFC 4288 [9] and guidelines\
    \ in RFC\n   3023 [5].\n"
- title: 8.2.1.  application/resource-lists+xml
  contents:
  - "8.2.1.  application/resource-lists+xml\n   MIME media type name:  application\n\
    \   MIME subtype name:  resource-lists+xml\n   Mandatory parameters:  none\n \
    \  Optional parameters:  Same as charset parameter application/xml as\n      specified\
    \ in RFC 3023 [5].\n   Encoding considerations:  Same as encoding considerations\
    \ of\n      application/xml as specified in RFC 3023 [5].\n   Security considerations:\
    \  See Section 10 of RFC 3023 [5] and\n      Section 7 of RFC 4826.\n   Interoperability\
    \ considerations:  none\n   Published specification:  RFC 4826\n   Applications\
    \ that use this media type:  This document type has been\n      used to support\
    \ subscriptions to lists of users [14] for SIP-based\n      presence [11].\n \
    \  Additional Information:\n         Magic Number: none\n         File Extension:\
    \ .rl\n         Macintosh file type code: \"TEXT\"\n   Personal and email address\
    \ for further information:\n      Jonathan Rosenberg, jdrosen@jdrosen.net\n  \
    \ Intended usage:  COMMON\n   Author/Change controller:  The IETF.\n"
- title: 8.2.2.  application/rls-services+xml
  contents:
  - "8.2.2.  application/rls-services+xml\n   MIME media type name:  application\n\
    \   MIME subtype name:  rls-services+xml\n   Mandatory parameters:  none\n   Optional\
    \ parameters:  Same as charset parameter application/xml as\n      specified in\
    \ RFC 3023 [5].\n   Encoding considerations:  Same as encoding considerations\
    \ of\n      application/xml as specified in RFC 3023 [5].\n   Security considerations:\
    \  See Section 10 of RFC 3023 [5] and\n      Section 7 of RFC 4826.\n   Interoperability\
    \ considerations:  none\n   Published specification:  RFC 4826\n   Applications\
    \ that use this media type:  This document type has been\n      used to support\
    \ subscriptions to lists of users [14] for SIP-based\n      presence [11].\n \
    \  Additional Information:\n         Magic Number: none\n         File Extension:\
    \ .rs\n         Macintosh file type code: \"TEXT\"\n   Personal and email address\
    \ for further information:\n      Jonathan Rosenberg, jdrosen@jdrosen.net\n  \
    \ Intended usage:  COMMON\n   Author/Change controller:  The IETF.\n"
- title: 8.3.  URN Sub-Namespace Registrations
  contents:
  - "8.3.  URN Sub-Namespace Registrations\n   This section registers two new XML\
    \ namespaces, as per the guidelines\n   in RFC 3688 [8].\n"
- title: 8.3.1.  urn:ietf:params:xml:ns:resource-lists
  contents:
  - "8.3.1.  urn:ietf:params:xml:ns:resource-lists\n   URI:  The URI for this namespace\
    \ is\n      urn:ietf:params:xml:ns:resource-lists.\n   Registrant Contact:  IETF,\
    \ SIMPLE working group, (simple@ietf.org),\n      Jonathan Rosenberg (jdrosen@jdrosen.net).\n\
    \    XML:\n           BEGIN\n           <?xml version=\"1.0\"?>\n           <!DOCTYPE\
    \ html PUBLIC \"-//W3C//DTD XHTML Basic 1.0//EN\"\n              \"http://www.w3.org/TR/xhtml-basic/xhtml-basic10.dtd\"\
    >\n           <html xmlns=\"http://www.w3.org/1999/xhtml\">\n           <head>\n\
    \             <meta http-equiv=\"content-type\"\n                content=\"text/html;charset=iso-8859-1\"\
    />\n             <title>Resource Lists Namespace</title>\n           </head>\n\
    \           <body>\n             <h1>Namespace for Resource Lists</h1>\n     \
    \        <h2>urn:ietf:params:xml:ns:resource-lists</h2>\n             <p>See <a\
    \ href=\"http://www.rfc-editor.org/rfc/rfc4826.txt\">\n                RFC4826</a>.</p>\n\
    \           </body>\n           </html>\n           END\n"
- title: 8.3.2.  urn:ietf:params:xml:ns:rls-services
  contents:
  - "8.3.2.  urn:ietf:params:xml:ns:rls-services\n   URI:  The URI for this namespace\
    \ is\n      urn:ietf:params:xml:ns:rls-services.\n   Registrant Contact:  IETF,\
    \ SIMPLE working group, (simple@ietf.org),\n      Jonathan Rosenberg (jdrosen@jdrosen.net).\n\
    \   XML:\n          BEGIN\n          <?xml version=\"1.0\"?>\n          <!DOCTYPE\
    \ html PUBLIC \"-//W3C//DTD XHTML Basic 1.0//EN\"\n             \"http://www.w3.org/TR/xhtml-basic/xhtml-basic10.dtd\"\
    >\n          <html xmlns=\"http://www.w3.org/1999/xhtml\">\n          <head>\n\
    \            <meta http-equiv=\"content-type\"\n               content=\"text/html;charset=iso-8859-1\"\
    />\n            <title>Resource List Server (RLS) Services Namespace</title>\n\
    \          </head>\n          <body>\n            <h1>Namespace for Resource List\
    \ Server (RLS) Services</h1>\n            <h2>urn:ietf:params:xml:ns:rls-services</h2>\n\
    \            <p>See <a href=\"http://www.rfc-editor.org/rfc/rfc4826.txt\">\n \
    \              RFC4826</a>.</p>\n          </body>\n          </html>\n      \
    \    END\n"
- title: 8.4.  Schema Registrations
  contents:
  - "8.4.  Schema Registrations\n   This section registers two XML schemas per the\
    \ procedures in [8].\n"
- title: 8.4.1.  urn:ietf:params:xml:schema:resource-lists
  contents:
  - "8.4.1.  urn:ietf:params:xml:schema:resource-lists\n   URI:  urn:ietf:params:xml:schema:resource-lists\n\
    \   Registrant Contact:  IETF, SIMPLE working group, (simple@ietf.org),\n    \
    \  Jonathan Rosenberg (jdrosen@jdrosen.net).\n   The XML for this schema can be\
    \ found as the sole content of\n   Section 3.2.\n"
- title: 8.4.2.  urn:ietf:params:xml:schema:rls-services
  contents:
  - "8.4.2.  urn:ietf:params:xml:schema:rls-services\n   URI:  urn:ietf:params:xml:schema:rls-services\n\
    \   Registrant Contact:  IETF, SIMPLE working group, (simple@ietf.org),\n    \
    \  Jonathan Rosenberg (jdrosen@jdrosen.net).\n   The XML for this schema can be\
    \ found as the sole content of\n   Section 4.2.\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   The authors would like to thank Hisham Khartabil, Jari\
    \ Urpalainen,\n   and Spencer Dawkins for their comments and input.  Thanks to\
    \ Ted\n   Hardie for his encouragement and support of this work.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [1]   Bradner, S., \"Key words for use in RFCs\
    \ to Indicate Requirement\n         Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [2]   Paoli, J., Maler, E., Bray, T., and C. Sperberg-McQueen,\n         \"\
    Extensible Markup Language (XML) 1.0 (Second Edition)\", World\n         Wide\
    \ Web Consortium FirstEdition REC-xml-20001006,\n         October 2000, <http://www.w3.org/TR/2000/REC-xml-20001006>.\n\
    \   [3]   Moats, R., \"URN Syntax\", RFC 2141, May 1997.\n   [4]   Rosenberg,\
    \ J., Schulzrinne, H., Camarillo, G., Johnston, A.,\n         Peterson, J., Sparks,\
    \ R., Handley, M., and E. Schooler, \"SIP:\n         Session Initiation Protocol\"\
    , RFC 3261, June 2002.\n   [5]   Murata, M., St. Laurent, S., and D. Kohn, \"\
    XML Media Types\",\n         RFC 3023, January 2001.\n   [6]   Moats, R., \"A\
    \ URN Namespace for IETF Documents\", RFC 2648,\n         August 1999.\n   [7]\
    \   Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n         Resource\
    \ Identifier (URI): Generic Syntax\", STD 66, RFC 3986,\n         January 2005.\n\
    \   [8]   Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n       \
    \  January 2004.\n   [9]   Freed, N. and J. Klensin, \"Media Type Specifications\
    \ and\n         Registration Procedures\", BCP 13, RFC 4288, December 2005.\n\
    \   [10]  Rosenberg, J., \"The Extensible Markup Language (XML)\n         Configuration\
    \ Access Protocol (XCAP)\", RFC 4825, May 2007.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [11]  Rosenberg, J., \"A Presence Event Package\
    \ for the Session\n         Initiation Protocol (SIP)\", RFC 3856, August 2004.\n\
    \   [12]  Rosenberg, J., \"Presence Authorization Rules\", Work\n         in Progress,\
    \ October 2006.\n   [13]  Roach, A., \"Session Initiation Protocol (SIP)-Specific\
    \ Event\n         Notification\", RFC 3265, June 2002.\n   [14]  Roach, A., Rosenberg,\
    \ J., and B. Campbell, \"A Session\n         Initiation Protocol (SIP) Event Notification\
    \ Extension for\n         Resource Lists\", RFC 4662, January 2005.\n   [15] \
    \ Peterson, J., \"Common Profile for Presence (CPP)\", RFC 3859,\n         August\
    \ 2004.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Jonathan Rosenberg\n   Cisco\n   Edison, NJ\n   US\n   EMail:\
    \ jdrosen@cisco.com\n   URI:   http://www.jdrosen.net\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
