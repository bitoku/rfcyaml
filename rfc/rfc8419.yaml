- contents:
  - "  Use of Edwards-Curve Digital Signature Algorithm (EdDSA) Signatures\n               in
    the Cryptographic Message Syntax (CMS)\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document specifies the conventions for using the Edwards-curve\n
    \  Digital Signature Algorithm (EdDSA) for curve25519 and curve448 in\n   the
    Cryptographic Message Syntax (CMS).  For each curve, EdDSA\n   defines the PureEdDSA
    and HashEdDSA modes.  However, the HashEdDSA\n   mode is not used with the CMS.
    \ In addition, no context string is\n   used with the CMS.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8419.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \     1.1. Terminology ................................................2\n      1.2.
    ASN.1 ......................................................2\n   2. EdDSA Signature
    Algorithm .......................................3\n      2.1. Algorithm Identifiers
    ......................................3\n      2.2. EdDSA Algorithm Identifiers
    ................................3\n      2.3. Message Digest Algorithm Identifiers
    .......................4\n      2.4. EdDSA Signatures ...........................................4\n
    \  3. Signed-data Conventions .........................................5\n      3.1.
    Signed-data Conventions with Signed Attributes .............5\n      3.2. Signed-data
    Conventions without Signed Attributes ..........6\n   4. Implementation Considerations
    ...................................6\n   5. Security Considerations .........................................6\n
    \  6. IANA Considerations .............................................7\n   7.
    References ......................................................7\n      7.1.
    Normative References .......................................7\n      7.2. Informative
    References .....................................8\n   Acknowledgments ....................................................9\n
    \  Author's Address ...................................................9\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document specifies the conventions for using the Edwards-curve\n
    \  Digital Signature Algorithm (EdDSA) [RFC8032] for curve25519\n   [CURVE25519]
    and curve448 [CURVE448] with the Cryptographic Message\n   Syntax (CMS) [RFC5652]
    signed-data content type.  For each curve,\n   [RFC8032] defines the PureEdDSA
    and HashEdDSA modes; however, the\n   HashEdDSA mode is not used with the CMS.
    \ In addition, no context\n   string is used with CMS.  EdDSA with curve25519
    is referred to as\n   \"Ed25519\", and EdDSA with curve448 is referred to as \"Ed448\".
    \ The\n   CMS conventions for PureEdDSA with Ed25519 and Ed448 are described in\n
    \  this document.\n"
  - contents:
    - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\",
      \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described
      in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n
      \  capitals, as shown here.\n"
    title: 1.1.  Terminology
  - contents:
    - "1.2.  ASN.1\n   CMS values are generated using ASN.1 [X680], which uses the
      Basic\n   Encoding Rules (BER) and the Distinguished Encoding Rules (DER)\n
      \  [X690].\n"
    title: 1.2.  ASN.1
  title: 1.  Introduction
- contents:
  - "2.  EdDSA Signature Algorithm\n   The Edwards-curve Digital Signature Algorithm
    (EdDSA) [RFC8032] is a\n   variant of Schnorr's signature system with (possibly
    twisted) Edwards\n   curves.  Ed25519 is intended to operate at around the 128-bit\n
    \  security level; Ed448 is intended to operate at around the 224-bit\n   security
    level.\n   One of the parameters of the EdDSA algorithm is the \"prehash\"\n   function.
    \ This may be the identity function, resulting in an\n   algorithm called \"PureEdDSA\",
    or a collision-resistant hash function,\n   resulting in an algorithm called \"HashEdDSA\".
    \ In most situations,\n   the CMS SignedData includes signed attributes, including
    the message\n   digest of the content.  Since HashEdDSA offers no benefit when
    signed\n   attributes are present, only PureEdDSA is used with the CMS.\n"
  - contents:
    - "2.1.  Algorithm Identifiers\n   Each algorithm is identified by an object identifier,
      and the\n   algorithm identifier may contain parameters if needed.\n   The ALGORITHM
      definition is repeated here for convenience:\n      ALGORITHM ::= CLASS {\n
      \         &id    OBJECT IDENTIFIER UNIQUE,\n          &Type  OPTIONAL }\n        WITH
      SYNTAX {\n          OID &id [PARMS &Type] }\n"
    title: 2.1.  Algorithm Identifiers
  - contents:
    - "2.2.  EdDSA Algorithm Identifiers\n   The EdDSA signature algorithm is defined
      in [RFC8032], and the\n   conventions for encoding the public key are defined
      in [RFC8410].\n   The id-Ed25519 and id-Ed448 object identifiers are used to
      identify\n   EdDSA public keys in certificates.  The object identifiers are\n
      \  specified in [RFC8410], and they are repeated here for convenience:\n      sigAlg-Ed25519
      \ ALGORITHM  ::=  { OID id-Ed25519 }\n      sigAlg-Ed448    ALGORITHM  ::=  {
      OID id-Ed448 }\n      id-Ed25519  OBJECT IDENTIFIER  ::=  { 1 3 101 112 }\n
      \     id-Ed448    OBJECT IDENTIFIER  ::=  { 1 3 101 113 }\n"
    title: 2.2.  EdDSA Algorithm Identifiers
  - contents:
    - "2.3.  Message Digest Algorithm Identifiers\n   When the signer includes signed
      attributes, a message digest\n   algorithm is used to compute the message digest
      on the eContent\n   value.  When signing with Ed25519, the message digest algorithm
      MUST\n   be SHA-512 [FIPS180].  Additional information on SHA-512 is available\n
      \  in [RFC6234].  When signing with Ed448, the message digest algorithm\n   MUST
      be SHAKE256 [FIPS202] with a 512-bit output value.\n   Signing with Ed25519
      uses SHA-512 as part of the signing operation,\n   and signing with Ed448 uses
      SHAKE256 as part of the signing\n   operation.\n   For convenience, the object
      identifiers and parameter syntax for\n   these algorithms are repeated here:\n
      \     hashAlg-SHA-512  ALGORITHM  ::=  { OID id-sha512 }\n      hashAlg-SHAKE256
      \ ALGORITHM  ::=  { OID id-shake256 }\n      hashAlg-SHAKE256-LEN  ALGORITHM
      \ ::=  { OID id-shake256-len\n                              PARMS ShakeOutputLen
      }\n      hashalgs  OBJECT IDENTIFIER  ::=  { joint-iso-itu-t(2)\n                              country(16)
      us(840) organization(1)\n                              gov(101) csor(3) nistalgorithm(4)
      2 }\n      id-sha512  OBJECT IDENTIFIER  ::=  { hashAlgs 3 }\n      id-shake256
      \ OBJECT IDENTIFIER  ::=  { hashAlgs 12 }\n      id-shake256-len  OBJECT IDENTIFIER
      \ ::=  { hashAlgs 18 }\n      ShakeOutputLen  ::=  INTEGER  -- Output length
      in bits\n   When using the id-sha512 or id-shake256 algorithm identifier, the\n
      \  parameters MUST be absent.\n   When using the id-shake256-len algorithm identifier,
      the parameters\n   MUST be present, and the parameter MUST contain 512, encoded
      as a\n   positive integer value.\n"
    title: 2.3.  Message Digest Algorithm Identifiers
  - contents:
    - "2.4.  EdDSA Signatures\n   The id-Ed25519 and id-Ed448 object identifiers are
      also used for\n   signature values.  When used to identify signature algorithms,
      the\n   AlgorithmIdentifier parameters field MUST be absent.\n   The data to
      be signed is processed using PureEdDSA, and then a\n   private key operation
      generates the signature value.  As described in\n   Section 3.3 of [RFC8032],
      the signature value is the opaque value\n   ENC(R) || ENC(S), where || represents
      concatenation.  As described in\n   Section 5.3 of [RFC5652], the signature
      value is ASN.1 encoded as an\n   OCTET STRING and included in the signature
      field of SignerInfo.\n"
    title: 2.4.  EdDSA Signatures
  title: 2.  EdDSA Signature Algorithm
- contents:
  - "3.  Signed-data Conventions\n   The processing depends on whether the signer
    includes signed\n   attributes.\n   The inclusion of signed attributes is preferred,
    but the conventions\n   for signed-data without signed attributes are provided
    for\n   completeness.\n"
  - contents:
    - "3.1.  Signed-data Conventions with Signed Attributes\n   The SignedData digestAlgorithms
      field includes the identifiers of the\n   message digest algorithms used by
      one or more signer.  There MAY be\n   any number of elements in the collection,
      including zero.  When\n   signing with Ed25519, the digestAlgorithm SHOULD include
      id-sha512,\n   and if present, the algorithm parameters field MUST be absent.
      \ When\n   signing with Ed448, the digestAlgorithm SHOULD include\n   id-shake256-len,
      and if present, the algorithm parameters field MUST\n   also be present, and
      the parameter MUST contain 512, encoded as a\n   positive integer value.\n   The
      SignerInfo digestAlgorithm field includes the identifier of the\n   message
      digest algorithms used by the signer.  When signing with\n   Ed25519, the digestAlgorithm
      MUST be id-sha512, and the algorithm\n   parameters field MUST be absent.  When
      signing with Ed448, the\n   digestAlgorithm MUST be id-shake256-len, the algorithm
      parameters\n   field MUST be present, and the parameter MUST contain 512, encoded
      as\n   a positive integer value.\n   The SignerInfo signedAttributes MUST include
      the message-digest\n   attribute as specified in Section 11.2 of [RFC5652].
      \ When signing\n   with Ed25519, the message-digest attribute MUST contain the
      message\n   digest computed over the eContent value using SHA-512.  When signing\n
      \  with Ed448, the message-digest attribute MUST contain the message\n   digest
      computed over the eContent value using SHAKE256 with an output\n   length of
      512 bits.\n   The SignerInfo signatureAlgorithm field MUST contain either\n
      \  id-Ed25519 or id-Ed448, depending on the elliptic curve that was used\n   by
      the signer.  The algorithm parameters field MUST be absent.\n   The SignerInfo
      signature field contains the octet string resulting\n   from the EdDSA private
      key signing operation.\n"
    title: 3.1.  Signed-data Conventions with Signed Attributes
  - contents:
    - "3.2.  Signed-data Conventions without Signed Attributes\n   The SignedData
      digestAlgorithms field includes the identifiers of the\n   message digest algorithms
      used by one or more signer.  There MAY be\n   any number of elements in the
      collection, including zero.  When\n   signing with Ed25519, the list of identifiers
      MAY include id-sha512,\n   and if present, the algorithm parameters field MUST
      be absent.  When\n   signing with Ed448, the list of identifiers MAY include
      id-shake256,\n   and if present, the algorithm parameters field MUST be absent.\n
      \  The SignerInfo digestAlgorithm field includes the identifier of the\n   message
      digest algorithms used by the signer.  When signing with\n   Ed25519, the digestAlgorithm
      MUST be id-sha512, and the algorithm\n   parameters field MUST be absent.  When
      signing with Ed448, the\n   digestAlgorithm MUST be id-shake256, and the algorithm
      parameters\n   field MUST be absent.\n      NOTE: Either id-sha512 or id-shake256
      is used as part to the\n      private key signing operation.  However, the private
      key signing\n      operation does not take a message digest computed with one
      of\n      these algorithms as an input.\n   The SignerInfo signatureAlgorithm
      field MUST contain either\n   id-Ed25519 or id-Ed448, depending on the elliptic
      curve that was used\n   by the signer.  The algorithm parameters field MUST
      be absent.\n   The SignerInfo signature field contains the octet string resulting\n
      \  from the EdDSA private key signing operation.\n"
    title: 3.2.  Signed-data Conventions without Signed Attributes
  title: 3.  Signed-data Conventions
- contents:
  - "4.  Implementation Considerations\n   The EdDSA specification [RFC8032] includes
    the following warning.  It\n   deserves highlighting, especially when signed-data
    is used without\n   signed attributes and the content to be signed might be quite
    large:\n      PureEdDSA requires two passes over the input.  Many existing APIs,\n
    \     protocols, and environments assume digital signature algorithms\n      only
    need one pass over the input and may have API or bandwidth\n      concerns supporting
    anything else.\n"
  title: 4.  Implementation Considerations
- contents:
  - "5.  Security Considerations\n   Implementations must protect the EdDSA private
    key.  Compromise of\n   the EdDSA private key may result in the ability to forge
    signatures.\n   The generation of EdDSA private key relies on random numbers.
    \ The\n   use of inadequate pseudo-random number generators (PRNGs) to generate\n
    \  these values can result in little or no security.  An attacker may\n   find
    it much easier to reproduce the PRNG environment that produced\n   the keys, searching
    the resulting small set of possibilities, rather\n   than brute-force searching
    the whole key space.  The generation of\n   quality random numbers is difficult.
    \ RFC 4086 [RANDOM] offers\n   important guidance in this area.\n   Unlike DSA
    and Elliptic Curve Digital Signature Algorithm (ECDSA),\n   EdDSA does not require
    the generation of a random value for each\n   signature operation.\n   Using the
    same private key with different algorithms has the\n   potential to leak extra
    information about the private key to an\n   attacker.  For this reason, the same
    private key SHOULD NOT be used\n   with more than one set of EdDSA parameters,
    although it appears that\n   there are no security concerns when using the same
    private key with\n   PureEdDSA and HashEdDSA [RFC8032].\n   When computing signatures,
    the same hash function SHOULD be used for\n   all operations.  This reduces the
    number of failure points in the\n   signature process.\n"
  title: 5.  Security Considerations
- contents:
  - "6.  IANA Considerations\n   This document has no IANA actions.\n"
  title: 6.  IANA Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [FIPS180]    National Institute of Standards
      and Technology, \"Secure\n                Hash Standard (SHS)\", FIPS PUB 180-4,\n
      \               DOI 10.6028/NIST.FIPS.180-4, August 2015.\n   [FIPS202]    National
      Institute of Standards and Technology, \"SHA-3\n                Standard: Permutation-Based
      Hash and Extendable-Output\n                Functions\", FIPS PUB 202, DOI 10.6028/NIST.FIPS.202,\n
      \               August 2015.\n   [RFC2119]    Bradner, S., \"Key words for use
      in RFCs to Indicate\n                Requirement Levels\", BCP 14, RFC 2119,\n
      \               DOI 10.17487/RFC2119, March 1997,\n                <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC5652]    Housley, R., \"Cryptographic Message Syntax (CMS)\",\n                STD
      70, RFC 5652, DOI 10.17487/RFC5652, September 2009,\n                <https://www.rfc-editor.org/info/rfc5652>.\n
      \  [RFC8032]    Josefsson, S. and I. Liusvaara, \"Edwards-Curve Digital\n                Signature
      Algorithm (EdDSA)\", RFC 8032,\n                DOI 10.17487/RFC8032, January
      2017,\n                <https://www.rfc-editor.org/info/rfc8032>.\n   [RFC8174]
      \   Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n                2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n                May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8410]    Josefsson, S. and
      J. Schaad, \"Algorithm Identifiers for\n                Ed25519, Ed448, X25519,
      and X448 for Use in the Internet\n                X.509 Public Key Infrastructure\",
      RFC 8410,\n                DOI 10.17487/RFC8410, August 2018,\n                <https://www.rfc-editor.org/info/rfc8410>.\n
      \  [X680]       ITU-T, \"Information technology -- Abstract Syntax\n                Notation
      One (ASN.1): Specification of basic notation\",\n                ITU-T Recommendation
      X.680, ISO/IEC 8824-1, August 2015,\n                <https://www.itu.int/rec/T-REC-X.680/en>.\n
      \  [X690]       ITU-T, \"Information technology -- ASN.1 encoding rules:\n                Specification
      of Basic Encoding Rules (BER), Canonical\n                Encoding Rules (CER)
      and Distinguished Encoding Rules\n                (DER)\", ITU-T Recommendation
      X.690, ISO/IEC 8825-1,\n                August 2015, <https://www.itu.int/rec/T-REC-X.690/en>.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [CURVE25519] Bernstein, D., \"Curve25519:
      new Diffie-Hellman speed\n                records\", DOI 10.1007/11745853_14,
      February 2006,\n                <http://cr.yp.to/ecdh.html>.\n   [CURVE448]
      \  Hamburg, M., \"Ed448-Goldilocks, a new elliptic curve\",\n                June
      2015, <http://eprint.iacr.org/2015/625>.\n   [RANDOM]     Eastlake 3rd, D.,
      Schiller, J., and S. Crocker,\n                \"Randomness Requirements for
      Security\", BCP 106,\n                RFC 4086, DOI 10.17487/RFC4086, June 2005,\n
      \               <https://www.rfc-editor.org/info/rfc4086>.\n   [RFC6234]    Eastlake
      3rd, D. and T. Hansen, \"US Secure Hash\n                Algorithms (SHA and
      SHA-based HMAC and HKDF)\", RFC 6234,\n                DOI 10.17487/RFC6234,
      May 2011,\n                <https://www.rfc-editor.org/info/rfc6234>.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Acknowledgements\n   Many thanks to Jim Schaad, Daniel Migault, and Adam Roach
    for the\n   careful review and comments.  Thanks to Quynh Dang for coordinating\n
    \  the object identifiers assignment by NIST.\n"
  title: Acknowledgements
- contents:
  - "Author's Address\n   Russ Housley\n   918 Spring Knoll Drive\n   Herndon, VA
    \ 20170\n   United States of America\n   Email: housley@vigilsec.com\n"
  title: Author's Address
