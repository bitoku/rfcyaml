- title: __initial_text__
  contents:
  - '      Traversal Using Relays around NAT (TURN) Extension for IPv6

    '
- title: Abstract
  contents:
  - "Abstract\n   This document adds IPv6 support to Traversal Using Relays around\
    \ NAT\n   (TURN).  IPv6 support in TURN includes IPv4-to-IPv6, IPv6-to-IPv6,\n\
    \   and IPv6-to-IPv4 relaying.  This document defines the REQUESTED-\n   ADDRESS-FAMILY\
    \ attribute for TURN.  The REQUESTED-ADDRESS-FAMILY\n   attribute allows a client\
    \ to explicitly request the address type the\n   TURN server will allocate (e.g.,\
    \ an IPv4-only node may request the\n   TURN server to allocate an IPv6 address).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6156.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   3.  Overview of Operation  . . . . . . . . . . . . . . . .\
    \ . . . .  3\n   4.  Creating an Allocation . . . . . . . . . . . . . . . . .\
    \ . . .  4\n     4.1.  Sending an Allocate Request  . . . . . . . . . . . . .\
    \ . .  4\n       4.1.1.  The REQUESTED-ADDRESS-FAMILY Attribute . . . . . . .\
    \ .  4\n     4.2.  Receiving an Allocate Request  . . . . . . . . . . . . . .\
    \  5\n       4.2.1.  Unsupported Address Family . . . . . . . . . . . . . .  6\n\
    \     4.3.  Receiving an Allocate Error Response . . . . . . . . . . .  6\n  \
    \ 5.  Refreshing an Allocation . . . . . . . . . . . . . . . . . . .  6\n    \
    \ 5.1.  Sending a Refresh Request  . . . . . . . . . . . . . . . .  6\n     5.2.\
    \  Receiving a Refresh Request  . . . . . . . . . . . . . . .  6\n   6.  CreatePermission\
    \ . . . . . . . . . . . . . . . . . . . . . . .  6\n     6.1.  Sending a CreatePermission\
    \ Request . . . . . . . . . . . .  6\n     6.2.  Receiving a CreatePermission\
    \ Request . . . . . . . . . . .  7\n       6.2.1.  Peer Address Family Mismatch\
    \ . . . . . . . . . . . . .  7\n   7.  Channels . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . .  7\n     7.1.  Sending a ChannelBind Request  . . .\
    \ . . . . . . . . . . .  7\n     7.2.  Receiving a ChannelBind Request  . . .\
    \ . . . . . . . . . .  7\n   8.  Packet Translations  . . . . . . . . . . . .\
    \ . . . . . . . . .  7\n     8.1.  IPv4-to-IPv6 Translations  . . . . . . . .\
    \ . . . . . . . .  8\n     8.2.  IPv6-to-IPv6 Translations  . . . . . . . . .\
    \ . . . . . . .  9\n     8.3.  IPv6-to-IPv4 Translations  . . . . . . . . . .\
    \ . . . . . . 10\n   9.  Security Considerations  . . . . . . . . . . . . . .\
    \ . . . . . 11\n     9.1.  Tunnel Amplification Attack  . . . . . . . . . . .\
    \ . . . . 11\n   10. IANA Considerations  . . . . . . . . . . . . . . . . . .\
    \ . . . 12\n     10.1. New STUN Attribute . . . . . . . . . . . . . . . . . .\
    \ . . 12\n     10.2. New STUN Error Codes . . . . . . . . . . . . . . . . . .\
    \ . 13\n   11. Acknowledgements . . . . . . . . . . . . . . . . . . . . . . .\
    \ 13\n   12. References . . . . . . . . . . . . . . . . . . . . . . . . . . 13\n\
    \     12.1. Normative References . . . . . . . . . . . . . . . . . . . 13\n  \
    \   12.2. Informative References . . . . . . . . . . . . . . . . . . 13\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Traversal Using Relays around NAT (TURN) [RFC5766] is a\
    \ protocol that\n   allows for an element behind a NAT to receive incoming data\
    \ over UDP\n   or TCP.  It is most useful for elements behind NATs without Endpoint-\n\
    \   Independent Mapping [RFC4787] that wish to be on the receiving end of\n  \
    \ a connection to a single peer.\n   The base specification of TURN [RFC5766]\
    \ only defines IPv4-to-IPv4\n   relaying.  This document adds IPv6 support to\
    \ TURN, which includes\n   IPv4-to-IPv6, IPv6-to-IPv6, and IPv6-to-IPv4 relaying.\
    \  This document\n   defines the REQUESTED-ADDRESS-FAMILY attribute, which is\
    \ an extension\n   to TURN that allows a client to explicitly request the address\
    \ type\n   the TURN server will allocate (e.g., an IPv4-only node may request\n\
    \   the TURN server to allocate an IPv6 address).  This document also\n   defines\
    \ and registers new error response codes.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
- title: 3.  Overview of Operation
  contents:
  - "3.  Overview of Operation\n   When a user wishes a TURN server to allocate an\
    \ address of a specific\n   type, it sends an Allocate request to the TURN server\
    \ with a\n   REQUESTED-ADDRESS-FAMILY attribute.  TURN can run over UDP and TCP,\n\
    \   and it allows for a client to request address/port pairs for\n   receiving\
    \ both UDP and TCP.\n   After the request has been successfully authenticated,\
    \ the TURN\n   server allocates a transport address of the type indicated in the\n\
    \   REQUESTED-ADDRESS-FAMILY attribute.  This address is called the\n   relayed\
    \ transport address.\n   The TURN server returns the relayed transport address\
    \ in the response\n   to the Allocate request.  This response contains an XOR-RELAYED-\n\
    \   ADDRESS attribute indicating the IP address and port that the server\n   allocated\
    \ for the client.\n   TURN servers allocate a single relayed transport address\
    \ per\n   allocation request.  Therefore, Allocate requests cannot carry more\n\
    \   than one REQUESTED-ADDRESS-FAMILY attribute.  Consequently, a client\n   that\
    \ wishes to allocate more than one relayed transport address at a\n   TURN server\
    \ (e.g., an IPv4 and an IPv6 address) needs to perform\n   several allocation\
    \ requests (one allocation request per relayed\n   transport address).\n   A TURN\
    \ server that supports a set of address families is assumed to\n   be able to\
    \ relay packets between them.  If a server does not support\n   the address family\
    \ requested by a client, the server returns a 440\n   (Address Family not Supported)\
    \ error response.\n"
- title: 4.  Creating an Allocation
  contents:
  - "4.  Creating an Allocation\n   The behavior specified here affects the processing\
    \ defined in Section\n   6 of [RFC5766].\n"
- title: 4.1.  Sending an Allocate Request
  contents:
  - "4.1.  Sending an Allocate Request\n   A client that wishes to obtain a relayed\
    \ transport address of a\n   specific address type includes a REQUESTED-ADDRESS-FAMILY\
    \ attribute,\n   which is defined in Section 4.1.1, in the Allocate request that\
    \ it\n   sends to the TURN server.  Clients MUST NOT include more than one\n \
    \  REQUESTED-ADDRESS-FAMILY attribute in an Allocate request.  The\n   mechanisms\
    \ to formulate an Allocate request are described in Section\n   6.1 of [RFC5766].\n\
    \   Clients MUST NOT include a REQUESTED-ADDRESS-FAMILY attribute in an\n   Allocate\
    \ request that contains a RESERVATION-TOKEN attribute.\n"
- title: 4.1.1.  The REQUESTED-ADDRESS-FAMILY Attribute
  contents:
  - "4.1.1.  The REQUESTED-ADDRESS-FAMILY Attribute\n   The REQUESTED-ADDRESS-FAMILY\
    \ attribute is used by clients to request\n   the allocation of a specific address\
    \ type from a server.  The\n   following is the format of the REQUESTED-ADDRESS-FAMILY\
    \ attribute.\n   Note that TURN attributes are TLV (Type-Length-Value) encoded,\
    \ with a\n   16-bit type, a 16-bit length, and a variable-length value.\n    0\
    \                   1                   2                   3\n    0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Type                  |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Family    |            Reserved                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \          Figure 1: Format of REQUESTED-ADDRESS-FAMILY Attribute\n   Type:  the\
    \ type of the REQUESTED-ADDRESS-FAMILY attribute is 0x0017.\n      As specified\
    \ in [RFC5389], attributes with values between 0x0000\n      and 0x7FFF are comprehension-required,\
    \ which means that the client\n      or server cannot successfully process the\
    \ message unless it\n      understands the attribute.\n   Length:  this 16-bit\
    \ field contains the length of the attribute in\n      bytes.  The length of this\
    \ attribute is 4 bytes.\n   Family:  there are two values defined for this field\
    \ and specified in\n      [RFC5389], Section 15.1: 0x01 for IPv4 addresses and\
    \ 0x02 for IPv6\n      addresses.\n   Reserved:  at this point, the 24 bits in\
    \ the Reserved field MUST be\n      set to zero by the client and MUST be ignored\
    \ by the server.\n   The REQUEST-ADDRESS-TYPE attribute MAY only be present in\
    \ Allocate\n   requests.\n"
- title: 4.2.  Receiving an Allocate Request
  contents:
  - "4.2.  Receiving an Allocate Request\n   Once a server has verified that the request\
    \ is authenticated and has\n   not been tampered with, the TURN server processes\
    \ the Allocate\n   request.  If it contains both a RESERVATION-TOKEN and a REQUESTED-\n\
    \   ADDRESS-FAMILY, the server replies with a 400 (Bad Request) Allocate\n   error\
    \ response.  Following the rules in [RFC5389], if the server does\n   not understand\
    \ the REQUESTED-ADDRESS-FAMILY attribute, it generates\n   an Allocate error response,\
    \ which includes an ERROR-CODE attribute\n   with 420 (Unknown Attribute) response\
    \ code.  This response will\n   contain an UNKNOWN-ATTRIBUTE attribute listing\
    \ the unknown REQUESTED-\n   ADDRESS-FAMILY attribute.\n   If the server can successfully\
    \ process the request, it allocates a\n   transport address for the TURN client,\
    \ called the relayed transport\n   address, and returns it in the response to\
    \ the Allocate request.\n   As specified in [RFC5766], the Allocate response contains\
    \ the same\n   transaction ID contained in the Allocate request, and the XOR-\n\
    \   RELAYED-ADDRESS attribute is set to the relayed transport address.\n   The\
    \ XOR-RELAYED-ADDRESS attribute indicates the allocated IP address\n   and port.\
    \  It is encoded in the same way as the XOR-MAPPED-ADDRESS\n   [RFC5389].\n  \
    \ If the REQUESTED-ADDRESS-FAMILY attribute is absent, the server MUST\n   allocate\
    \ an IPv4-relayed transport address for the TURN client.  If\n   allocation of\
    \ IPv4 addresses is disabled by local policy, the server\n   returns a 440 (Address\
    \ Family not Supported) Allocate error response.\n   If the server does not support\
    \ the address family requested by the\n   client, it MUST generate an Allocate\
    \ error response, and it MUST\n   include an ERROR-CODE attribute with the 440\
    \ (Address Family not\n   Supported) response code, which is defined in Section\
    \ 4.2.1.\n"
- title: 4.2.1.  Unsupported Address Family
  contents:
  - "4.2.1.  Unsupported Address Family\n   This document defines the following new\
    \ error response code:\n   440 (Address Family not Supported):  The server does\
    \ not support the\n      address family requested by the client.\n"
- title: 4.3.  Receiving an Allocate Error Response
  contents:
  - "4.3.  Receiving an Allocate Error Response\n   If the client receives an Allocate\
    \ error response with the 440\n   (Unsupported Address Family) error code, the\
    \ client MUST NOT retry\n   its request.\n"
- title: 5.  Refreshing an Allocation
  contents:
  - "5.  Refreshing an Allocation\n   The behavior specified here affects the processing\
    \ defined in Section\n   7 of [RFC5766].\n"
- title: 5.1.  Sending a Refresh Request
  contents:
  - "5.1.  Sending a Refresh Request\n   To perform an allocation refresh, the client\
    \ generates a Refresh\n   Request as described in Section 7.1 of [RFC5766].  The\
    \ client MUST\n   NOT include any REQUESTED-ADDRESS-FAMILY attribute in its Refresh\n\
    \   Request.\n"
- title: 5.2.  Receiving a Refresh Request
  contents:
  - "5.2.  Receiving a Refresh Request\n   If a server receives a Refresh Request\
    \ with a REQUESTED-ADDRESS-\n   FAMILY attribute, and the attribute's value doesn't\
    \ match the address\n   family of the allocation, the server MUST reply with a\
    \ 443 (Peer\n   Address Family Mismatch) Refresh error response.\n"
- title: 6.  CreatePermission
  contents:
  - "6.  CreatePermission\n   The behavior specified here affects the processing defined\
    \ in Section\n   9 of [RFC5766].\n"
- title: 6.1.  Sending a CreatePermission Request
  contents:
  - "6.1.  Sending a CreatePermission Request\n   The client MUST only include XOR-PEER-ADDRESS\
    \ attributes with\n   addresses of the same address family as that of the relayed\
    \ transport\n   address for the allocation.\n"
- title: 6.2.  Receiving a CreatePermission Request
  contents:
  - "6.2.  Receiving a CreatePermission Request\n   If an XOR-PEER-ADDRESS attribute\
    \ contains an address of an address\n   family different than that of the relayed\
    \ transport address for the\n   allocation, the server MUST generate an error\
    \ response with the 443\n   (Peer Address Family Mismatch) response code, which\
    \ is defined in\n   Section 6.2.1.\n"
- title: 6.2.1.  Peer Address Family Mismatch
  contents:
  - "6.2.1.  Peer Address Family Mismatch\n   This document defines the following\
    \ new error response code:\n   443 (Peer Address Family Mismatch):  A peer address\
    \ was of a\n      different address family than that of the relayed transport\n\
    \      address of the allocation.\n"
- title: 7.  Channels
  contents:
  - "7.  Channels\n   The behavior specified here affects the processing defined in\
    \ Section\n   11 of [RFC5766].\n"
- title: 7.1.  Sending a ChannelBind Request
  contents:
  - "7.1.  Sending a ChannelBind Request\n   The client MUST only include an XOR-PEER-ADDRESS\
    \ attribute with an\n   address of the same address family as that of the relayed\
    \ transport\n   address for the allocation.\n"
- title: 7.2.  Receiving a ChannelBind Request
  contents:
  - "7.2.  Receiving a ChannelBind Request\n   If the XOR-PEER-ADDRESS attribute contains\
    \ an address of an address\n   family different than that of the relayed transport\
    \ address for the\n   allocation, the server MUST generate an error response with\
    \ the 443\n   (Peer Address Family Mismatch) response code, which is defined in\n\
    \   Section 6.2.1.\n"
- title: 8.  Packet Translations
  contents:
  - "8.  Packet Translations\n   The TURN specification [RFC5766] describes how TURN\
    \ relays should\n   relay traffic consisting of IPv4 packets (i.e., IPv4-to-IPv4\n\
    \   translations).  The relay translates the IP addresses and port\n   numbers\
    \ of the packets based on the allocation's state data.  How to\n   translate other\
    \ header fields is also specified in [RFC5766].  This\n   document addresses IPv4-to-IPv6,\
    \ IPv6-to-IPv4, and IPv6-to-IPv6\n   translations.\n   TURN relays performing\
    \ any translation MUST translate the IP\n   addresses and port numbers of the\
    \ packets based on the allocation's\n   state information as specified in [RFC5766].\
    \  The following sections\n   specify how to translate other header fields.\n\
    \   As discussed in Section 2.6 of [RFC5766], translations in TURN are\n   designed\
    \ so that a TURN server can be implemented as an application\n   that runs in\
    \ \"user-land\" under commonly available operating systems\n   and that does not\
    \ require special privileges.  The translations\n   specified in the following\
    \ sections follow this principle.\n   The descriptions below have two parts: a\
    \ preferred behavior and an\n   alternate behavior.  The server SHOULD implement\
    \ the preferred\n   behavior.  Otherwise, the server MUST implement the alternate\n\
    \   behavior and MUST NOT do anything else.\n"
- title: 8.1.  IPv4-to-IPv6 Translations
  contents:
  - "8.1.  IPv4-to-IPv6 Translations\n   Traffic Class\n      Preferred behavior:\
    \ as specified in Section 4 of [RFC6145].\n      Alternate behavior: the relay\
    \ sets the Traffic Class to the\n      default value for outgoing packets.\n \
    \  Flow Label\n      Preferred behavior: the relay sets the Flow label to 0. \
    \ The relay\n      can choose to set the Flow label to a different value if it\n\
    \      supports the IPv6 Flow Label field [RFC3697].\n      Alternate behavior:\
    \ the relay sets the Flow label to the default\n      value for outgoing packets.\n\
    \   Hop Limit\n      Preferred behavior: as specified in Section 4 of [RFC6145].\n\
    \      Alternate behavior: the relay sets the Hop Limit to the default\n     \
    \ value for outgoing packets.\n   Fragmentation\n      Preferred behavior: as\
    \ specified in Section 4 of [RFC6145].\n      Alternate behavior: the relay assembles\
    \ incoming fragments.  The\n      relay follows its default behavior to send outgoing\
    \ packets.\n      For both preferred and alternate behavior, the DONT-FRAGMENT\n\
    \      attribute ([RFC5766], Section 14.8) MUST be ignored by the server.\n  \
    \ Extension Headers\n      Preferred behavior: the relay sends the outgoing packet\
    \ without\n      any IPv6 extension headers, with the exception of the Fragment\n\
    \      Header as described above.\n      Alternate behavior: same as preferred.\n"
- title: 8.2.  IPv6-to-IPv6 Translations
  contents:
  - "8.2.  IPv6-to-IPv6 Translations\n   Flow Label\n      The relay should consider\
    \ that it is handling two different IPv6\n      flows.  Therefore, the Flow label\
    \ [RFC3697] SHOULD NOT be copied\n      as part of the translation.\n      Preferred\
    \ behavior: the relay sets the Flow label to 0.  The relay\n      can choose to\
    \ set the Flow label to a different value if it\n      supports the IPv6 Flow\
    \ Label field [RFC3697].\n      Alternate behavior: the relay sets the Flow label\
    \ to the default\n      value for outgoing packets.\n   Hop Limit\n      Preferred\
    \ behavior: the relay acts as a regular router with\n      respect to decrementing\
    \ the Hop Limit and generating an ICMPv6\n      error if it reaches zero.\n  \
    \    Alternate behavior: the relay sets the Hop Limit to the default\n      value\
    \ for outgoing packets.\n   Fragmentation\n      Preferred behavior: if the incoming\
    \ packet did not include a\n      Fragment Header and the outgoing packet size\
    \ does not exceed the\n      outgoing link's MTU, the relay sends the outgoing\
    \ packet without a\n      Fragment Header.\n      If the incoming packet did not\
    \ include a Fragment Header and the\n      outgoing packet size exceeds the outgoing\
    \ link's MTU, the relay\n      drops the outgoing packet and sends an ICMP message\
    \ of Type 2,\n      Code 0 (\"Packet too big\") to the sender of the incoming\
    \ packet.\n      If the packet is being sent to the peer, the relay reduces the\
    \ MTU\n      reported in the ICMP message by 48 bytes to allow room for the\n\
    \      overhead of a Data indication.\n      If the incoming packet included a\
    \ Fragment Header and the outgoing\n      packet size (with a Fragment Header\
    \ included) does not exceed the\n      outgoing link's MTU, the relay sends the\
    \ outgoing packet with a\n      Fragment Header.  The relay sets the fields of\
    \ the Fragment Header\n      as appropriate for a packet originating from the\
    \ server.\n      If the incoming packet included a Fragment Header and the outgoing\n\
    \      packet size exceeds the outgoing link's MTU, the relay MUST\n      fragment\
    \ the outgoing packet into fragments of no more than 1280\n      bytes.  The relay\
    \ sets the fields of the Fragment Header as\n      appropriate for a packet originating\
    \ from the server.\n      Alternate behavior: the relay assembles incoming fragments.\
    \  The\n      relay follows its default behavior to send outgoing packets.\n \
    \     For both preferred and alternate behavior, the DONT-FRAGMENT\n      attribute\
    \ MUST be ignored by the server.\n   Extension Headers\n      Preferred behavior:\
    \ the relay sends the outgoing packet without\n      any IPv6 extension headers,\
    \ with the exception of the Fragment\n      Header as described above.\n     \
    \ Alternate behavior: same as preferred.\n"
- title: 8.3.  IPv6-to-IPv4 Translations
  contents:
  - "8.3.  IPv6-to-IPv4 Translations\n   Type of Service and Precedence\n      Preferred\
    \ behavior: as specified in Section 5 of [RFC6145].\n      Alternate behavior:\
    \ the relay sets the Type of Service and\n      Precedence to the default value\
    \ for outgoing packets.\n   Time to Live\n      Preferred behavior: as specified\
    \ in Section 5 of [RFC6145].\n      Alternate behavior: the relay sets the Time\
    \ to Live to the default\n      value for outgoing packets.\n   Fragmentation\n\
    \      Preferred behavior: as specified in Section 5 of [RFC6145].\n      Additionally,\
    \ when the outgoing packet's size exceeds the outgoing\n      link's MTU, the\
    \ relay needs to generate an ICMP error (ICMPv6\n      Packet Too Big) reporting\
    \ the MTU size.  If the packet is being\n      sent to the peer, the relay SHOULD\
    \ reduce the MTU reported in the\n      ICMP message by 48 bytes to allow room\
    \ for the overhead of a Data\n      indication.\n      Alternate behavior: the\
    \ relay assembles incoming fragments.  The\n      relay follows its default behavior\
    \ to send outgoing packets.\n      For both preferred and alternate behavior,\
    \ the DONT-FRAGMENT\n      attribute MUST be ignored by the server.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   Translation between IPv4 and IPv6 creates a new\
    \ way for clients to\n   obtain IPv4 or IPv6 access that they did not have before.\
    \  For\n   example, an IPv4-only client having access to a TURN server\n   implementing\
    \ this specification is now able to access the IPv6\n   Internet.  This needs\
    \ to be considered when establishing security and\n   monitoring policies.\n \
    \  The loop attack described in [RFC5766], Section 17.1.7, may be more\n   easily\
    \ done in cases where address spoofing is easier to accomplish\n   over IPv6.\
    \  Mitigation of this attack over IPv6 is the same as for\n   IPv4.\n   All the\
    \ security considerations applicable to STUN [RFC5389] and TURN\n   [RFC5766]\
    \ are applicable to this document as well.\n"
- title: 9.1.  Tunnel Amplification Attack
  contents:
  - "9.1.  Tunnel Amplification Attack\n   An attacker might attempt to cause data\
    \ packets to loop numerous\n   times between a TURN server and a tunnel between\
    \ IPv4 and IPv6.  The\n   attack goes as follows.\n   Suppose an attacker knows\
    \ that a tunnel endpoint will forward\n   encapsulated packets from a given IPv6\
    \ address (this doesn't\n   necessarily need to be the tunnel endpoint's address).\
    \  Suppose he\n   then spoofs these two packets from this address:\n   1.  An\
    \ Allocate request asking for a v4 address, and\n   2.  A ChannelBind request\
    \ establishing a channel to the IPv4 address\n       of the tunnel endpoint\n\
    \   Then he has set up an amplification attack:\n   o  The TURN relay will re-encapsulate\
    \ IPv6 UDP data in v4 and send it\n      to the tunnel endpoint.\n   o  The tunnel\
    \ endpoint will decapsulate packets from the v4 interface\n      and send them\
    \ to v6.\n   So, if the attacker sends a packet of the following form:\n     IPv6:\
    \ src=2001:db9::1 dst=2001:db8::2\n     UDP:  <ports>\n     TURN: <channel id>\n\
    \     IPv6: src=2001:db9::1 dst=2001:db8::2\n     UDP:  <ports>\n     TURN: <channel\
    \ id>\n     IPv6: src=2001:db9::1 dst=2001:db8::2\n     UDP:  <ports>\n     TURN:\
    \ <channel id>\n     ...\n   Then the TURN relay and the tunnel endpoint will\
    \ send it back and\n   forth until the last TURN header is consumed, at which\
    \ point the TURN\n   relay will send an empty packet that the tunnel endpoint\
    \ will drop.\n   The amplification potential here is limited by the MTU, so it's\
    \ not\n   huge: IPv6+UDP+TURN takes 334 bytes, so you could get a four-to-one\n\
    \   amplification out of a 1500-byte packet.  But the attacker could\n   still\
    \ increase traffic volume by sending multiple packets or by\n   establishing multiple\
    \ channels spoofed from different addresses\n   behind the same tunnel endpoint.\n\
    \   The attack is mitigated as follows.  It is RECOMMENDED that TURN\n   relays\
    \ not accept allocation or channel binding requests from\n   addresses known to\
    \ be tunneled, and that they not forward data to\n   such addresses.  In particular,\
    \ a TURN relay MUST NOT accept Teredo\n   or 6to4 addresses in these requests.\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   IANA registered the following values under the \"\
    STUN Attributes\"\n   registry and under the \"STUN Error Codes\" registry.\n"
- title: 10.1.  New STUN Attribute
  contents:
  - "10.1.  New STUN Attribute\n     0x0017: REQUESTED-ADDRESS-FAMILY\n"
- title: 10.2.  New STUN Error Codes
  contents:
  - "10.2.  New STUN Error Codes\n     440  Address Family not Supported\n     443\
    \  Peer Address Family Mismatch\n"
- title: 11.  Acknowledgements
  contents:
  - "11.  Acknowledgements\n   The authors would like to thank Alfred E. Heggestad,\
    \ Dan Wing, Magnus\n   Westerlund, Marc Petit-Huguenin, Philip Matthews, and Remi\
    \ Denis-\n   Courmont for their feedback on this document.\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: 12.1.  Normative References
  contents:
  - "12.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3697]  Rajahalme, J., Conta, A., Carpenter, B., and S. Deering,\n\
    \              \"IPv6 Flow Label Specification\", RFC 3697, March 2004.\n   [RFC5389]\
    \  Rosenberg, J., Mahy, R., Matthews, P., and D. Wing,\n              \"Session\
    \ Traversal Utilities for NAT (STUN)\", RFC 5389,\n              October 2008.\n\
    \   [RFC5766]  Mahy, R., Matthews, P., and J. Rosenberg, \"Traversal Using\n \
    \             Relays around NAT (TURN): Relay Extensions to Session\n        \
    \      Traversal Utilities for NAT (STUN)\", RFC 5766, April 2010.\n   [RFC6145]\
    \  Li, X., Bao, C., and F. Baker, \"IP/ICMP Translation\n              Algorithm\"\
    , RFC 6145, April 2011.\n"
- title: 12.2.  Informative References
  contents:
  - "12.2.  Informative References\n   [RFC4787]  Audet, F. and C. Jennings, \"Network\
    \ Address Translation\n              (NAT) Behavioral Requirements for Unicast\
    \ UDP\", BCP 127,\n              RFC 4787, January 2007.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Gonzalo Camarillo\n   Ericsson\n   Hirsalantie 11\n  \
    \ Jorvas  02420\n   Finland\n   EMail: Gonzalo.Camarillo@ericsson.com\n   Oscar\
    \ Novo\n   Ericsson\n   Hirsalantie 11\n   Jorvas  02420\n   Finland\n   EMail:\
    \ Oscar.Novo@ericsson.com\n   Simon Perreault (editor)\n   Viagenie\n   2600 boul.\
    \ Laurier, suite D2-630\n   Quebec, QC  G1V 2M2\n   Canada\n   Phone: +1 418 656\
    \ 9254\n   EMail: simon.perreault@viagenie.ca\n   URI:   http://www.viagenie.ca\n"
