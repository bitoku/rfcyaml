- title: __initial_text__
  contents:
  - '            Endpoint Handlespace Redundancy Protocol (ENRP)

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Endpoint Handlespace Redundancy Protocol (ENRP) is designed\
    \ to\n   work in conjunction with the Aggregate Server Access Protocol (ASAP)\n\
    \   to accomplish the functionality of the Reliable Server Pooling\n   (RSerPool)\
    \ requirements and architecture.  Within the operational\n   scope of RSerPool,\
    \ ENRP defines the procedures and message formats of\n   a distributed, fault-tolerant\
    \ registry service for storing,\n   bookkeeping, retrieving, and distributing\
    \ pool operation and\n   membership information.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   3. ENRP Operation Procedures ......................................15\n\
    \      3.1. Methods for Communicating amongst ENRP Servers ............16\n  \
    \    3.2. ENRP Server Initialization ................................16\n    \
    \       3.2.1. Generate a Server Identifier .......................16\n      \
    \     3.2.2. Acquire Peer Server List ...........................17\n        \
    \          3.2.2.1. Finding the Mentor Server .................17\n          \
    \        3.2.2.2. Request Complete Server List from\n                        \
    \   Mentor Peer ...............................17\n           3.2.3. Download\
    \ ENRP Handlespace Data from Mentor Peer ....18\n      3.3. Server Handlespace\
    \ Update .................................20\n           3.3.1. Announcing Additions\
    \ or Updates of PE ..............20\n           3.3.2. Announcing Removal of PE\
    \ ...........................21\n      3.4. Maintaining Peer List and Monitoring\
    \ Peer Status ..........22\n           3.4.1. Discovering New Peer ...............................22\n\
    \           3.4.2. Server Sending Heartbeat ...........................22\n  \
    \         3.4.3. Detecting Peer Server Failure ......................23\n    \
    \  3.5. Taking Over a Failed Peer Server ..........................23\n      \
    \     3.5.1. Initiating Server Take-over Arbitration ............23\n        \
    \   3.5.2. Takeover Target Peer Server ........................24\n      3.6.\
    \ Handlespace Data Auditing and Re-synchronization ..........25\n           3.6.1.\
    \ Auditing Procedures ................................25\n           3.6.2. PE\
    \ Checksum Calculation Algorithm ..................26\n           3.6.3. Re-Synchronization\
    \ Procedures ......................27\n      3.7. Handling Unrecognized Messages\
    \ or Unrecognized\n           Parameters ................................................28\n\
    \   4. Variables and Thresholds .......................................28\n  \
    \    4.1. Variables .................................................28\n    \
    \  4.2. Thresholds ................................................28\n   5. IANA\
    \ Considerations ............................................28\n      5.1. A\
    \ New Table for ENRP Message Types ........................29\n      5.2. A New\
    \ Table for Update Action Types .......................29\n      5.3. Port Numbers\
    \ ..............................................30\n      5.4. SCTP Payload Protocol\
    \ Identifier ..........................30\n   6. Security Considerations ........................................30\n\
    \      6.1. Summary of RSerPool Security Threats ......................30\n  \
    \    6.2. Implementing Security Mechanisms ..........................32\n    \
    \  6.3. Chain of Trust ............................................34\n   7. Acknowledgments\
    \ ................................................35\n   8. References .....................................................36\n\
    \      8.1. Normative References ......................................36\n  \
    \    8.2. Informative References ....................................37\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   ENRP is designed to work in conjunction with ASAP [RFC5352]\
    \ to\n   accomplish the functionality of RSerPool as defined by its\n   requirements\
    \ [RFC3237].\n   Within the operational scope of RSerPool, ENRP defines the procedures\n\
    \   and message formats of a distributed, fault-tolerant registry service\n  \
    \ for storing, bookkeeping, retrieving, and distributing pool operation\n   and\
    \ membership information.\n   Whenever appropriate, in the rest of this document,\
    \ we will refer to\n   this RSerPool registry service as ENRP handlespace, or\
    \ simply\n   handlespace, because it manages all pool handles.\n"
- title: 1.1.  Definitions
  contents:
  - "1.1.  Definitions\n   This document uses the following terms:\n   Operational\
    \ scope:  The part of the network visible to pool users by\n      a specific instance\
    \ of the reliable server pooling protocols.\n   Pool (or server pool):  A collection\
    \ of servers providing the same\n      application functionality.\n   Pool handle:\
    \  A logical pointer to a pool.  Each server pool will be\n      identifiable\
    \ in the operational scope of the system by a unique\n      pool handle.\n   Pool\
    \ element:  A server entity having registered to a pool.\n   Pool user:  A server\
    \ pool user.\n   Pool element handle (or endpoint handle):  A logical pointer\
    \ to a\n      particular pool element in a pool, consisting of the pool handle\n\
    \      and a destination transport address of the pool element.\n   Handle space:\
    \  A cohesive structure of pool handles and relations\n      that may be queried\
    \ by an internal or external agent.\n   ENRP client channel:  The communication\
    \ channel through which an ASAP\n      User (either a Pool Element (PE) or Pool\
    \ User (PU)) requests ENRP\n      handlespace service.  The client channel is\
    \ usually defined by the\n      transport address of the Home ENRP server and\
    \ a well-known port\n      number.\n   ENRP server channel:  Defined by a list\
    \ of IP addresses (one for each\n      ENRP server in an operational scope) and\
    \ a well-known port number.\n      All ENRP servers in an operational scope can\
    \ send \"group-cast\"\n      messages to other servers through this channel. \
    \ In a \"group-\n      cast\", the sending server sends multiple copies of the\
    \ message,\n      one to each of its peer servers, over a set of point-to-point\n\
    \      Stream Control Transmission Protocol (SCTP) associations between\n    \
    \  the sending server and the peers.  The \"group-cast\" may be\n      conveniently\
    \ implemented with the use of the \"SCTP_SENDALL\" option\n      on a one-to-many\
    \ style SCTP socket.\n   Home ENRP server:  The ENRP server to which a PE or PU\
    \ currently\n      belongs.  A PE MUST only have one Home ENRP server at any given\n\
    \      time, and both the PE and its Home ENRP server MUST keep track of\n   \
    \   this master/slave relationship between them.  A PU SHOULD select\n      one\
    \ of the available ENRP servers as its Home ENRP server.\n"
- title: 1.2.  Conventions
  contents:
  - "1.2.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ [RFC2119].\n"
- title: 2.  ENRP Message Definitions
  contents:
  - "2.  ENRP Message Definitions\n   In this section, we define the format of all\
    \ ENRP messages.  These\n   are messages sent and received amongst ENRP servers\
    \ in an operational\n   scope.  Messages sent and received between a PE/PU and\
    \ an ENRP server\n   are part of ASAP and are defined in [RFC5352].  A common\
    \ format, that\n   is defined in [RFC5354], is used for all ENRP and ASAP messages.\n\
    \   Most ENRP messages contain a combination of fixed fields and TLV\n   (Type-Length-Value)\
    \ parameters.  The TLV parameters are also defined\n   in [RFC5354].  If a nested\
    \ TLV parameter is not ended on a 32-bit\n   word boundary, it will be padded\
    \ with all '0' octets to the next 32-\n   bit word boundary.\n   All messages,\
    \ as well as their fields/parameters described below,\n   MUST be transmitted\
    \ in network byte order (aka Big Endian, meaning\n   the most significant byte\
    \ is transmitted first).\n   For ENRP, the following message types are defined\
    \ in this section:\n         Type       Message Name\n         -----      -------------------------\n\
    \         0x00      - (Reserved by IETF)\n         0x01      - ENRP_PRESENCE\n\
    \         0x02      - ENRP_HANDLE_TABLE_REQUEST\n         0x03      - ENRP_HANDLE_TABLE_RESPONSE\n\
    \         0x04      - ENRP_HANDLE_UPDATE\n         0x05      - ENRP_LIST_REQUEST\n\
    \         0x06      - ENRP_LIST_RESPONSE\n         0x07      - ENRP_INIT_TAKEOVER\n\
    \         0x08      - ENRP_INIT_TAKEOVER_ACK\n         0x09      - ENRP_TAKEOVER_SERVER\n\
    \         0x0a      - ENRP_ERROR\n         0x0b-0xff - (Reserved by IETF)\n  \
    \                               Figure 1\n"
- title: 2.1.  ENRP_PRESENCE Message
  contents:
  - "2.1.  ENRP_PRESENCE Message\n   This ENRP message is used to announce (periodically)\
    \ the presence of\n   an ENRP server, or to probe the status of a peer ENRP server.\
    \  This\n   message is either sent on the ENRP server channel or sent point-to-\n\
    \   point to another ENRP server.\n       0                   1              \
    \     2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |   Type = 0x01 |0|0|0|0|0|0|0|0|        Message Length         |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                     Sending Server's ID                       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                    Receiving Server's ID                      |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      :\
    \                      PE Checksum Param                        :\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      :               Server Information Param (optional)             :\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Sending\
    \ Server's ID:  32 bits (unsigned integer)\n         This is the ID of the ENRP\
    \ server that sent this message.\n      Receiving Server's ID:  32 bits (unsigned\
    \ integer)\n         This is the ID of the ENRP server to which this message is\n\
    \         intended.  If the message is not intended for an individual\n      \
    \   server (e.g., the message is group-casted to a group of\n         servers),\
    \ this field MUST be sent with all 0s.  If the message\n         is sent point-to-point,\
    \ this field MAY be sent with all 0s.\n      PE Checksum Parameter:\n        \
    \ This is a TLV that contains the latest PE checksum of the ENRP\n         server\
    \ that sends the ENRP_PRESENCE.  This parameter SHOULD be\n         included for\
    \ handlespace consistency auditing.  See\n         Section 3.6.1 for details.\n\
    \      Server Information Parameter:\n         If this parameter is present, it\
    \ contains the server\n         information of the sender of this message (the\
    \ Server\n         Information Parameter is defined in [RFC5354]).  This parameter\n\
    \         is optional.  However, if this message is sent in response to a\n  \
    \       received \"reply required\" ENRP_PRESENCE from a peer, the sender\n  \
    \       then MUST include its server information.\n   Note, at startup, an ENRP\
    \ server MUST pick a randomly generated, non-\n   zero 32-bit unsigned integer\
    \ as its ID and MUST use this same ID\n   until the ENRP server is rebooted.\n"
- title: 2.2.  ENRP_HANDLE_TABLE_REQUEST Message
  contents:
  - "2.2.  ENRP_HANDLE_TABLE_REQUEST Message\n   An ENRP server sends this message\
    \ to one of its peers to request a\n   copy of the handlespace data.  This message\
    \ is normally used during\n   server initialization or handlespace re-synchronization.\n\
    \       0                   1                   2                   3\n      \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |   Type = 0x02 |0|0|0|0|0|0|0|W|    Message Length = 0xC       |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                      Sending Server's ID                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                     Receiving Server's ID                     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      W\
    \ (oWn-children-only) Flag:  1 bit\n         Set to '1' if the sender of this\
    \ message is only requesting\n         information about the PEs owned by the\
    \ message receiver.\n         Otherwise, set to '0'.\n      Sending Server's ID:\n\
    \         See Section 2.1.\n      Receiving Server's ID:\n         See Section\
    \ 2.1.\n"
- title: 2.3.  ENRP_HANDLE_TABLE_RESPONSE Message
  contents:
  - "2.3.  ENRP_HANDLE_TABLE_RESPONSE Message\n   The PEER_NAME_TABLE_RESPONSE message\
    \ is sent by an ENRP server in\n   response to a received PEER_NAME_TABLE_REQUEST\
    \ message to assist\n   peer-server initialization or handlespace synchronization.\n\
    \       0                   1                   2                   3\n      \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |   Type = 0x03 |0|0|0|0|0|0|M|R|        Message Length         |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                      Sending Server's ID                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                     Receiving Server's ID                     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      :\
    \                                                               :\n      :   \
    \                  Pool Entry #1 (optional)                  :\n      :      \
    \                                                         :\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      :                                                               :\n   \
    \   :                              ...                              :\n      :\
    \                                                               :\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      :                                                               :\n   \
    \   :                     Pool Entry #n (optional)                  :\n      :\
    \                                                               :\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      M (More_to_send) Flag:  1 bit\n         Set to '1' if the sender of this\
    \ message has more pool entries\n         to send in subsequent ENRP_HANDLE_TABLE_RESPONSE\
    \ messages.\n         Otherwise, set to '0'.\n      R (Reject) Flag:  1 bit\n\
    \         MUST be set to '1' if the sender of this message is rejecting a\n  \
    \       handlespace request.  In this case, pool entries MUST NOT be\n       \
    \  included.  This might happen if the sender of this message is\n         in\
    \ the middle of initializing its database or is under high\n         load.\n \
    \     Message Length:  16 bits (unsigned integer)\n         Indicates the entire\
    \ length of the message, including the\n         header, in number of octets.\n\
    \         Note, the value in the Message Length field will NOT cover any\n   \
    \      padding at the end of this message.\n      Sending Server's ID:\n     \
    \    See Section 2.1.\n      Receiving Server's ID:\n         See Section 2.1.\n\
    \      Pool Entry #1-#n:\n         If the R flag is set to '0', at least one pool\
    \ entry SHOULD be\n         present in this message.  Each pool entry MUST start\
    \ with a\n         Pool Handle parameter, as defined in Section 3.9 of [RFC5354],\n\
    \         and is followed by one or more Pool Element parameters in TLV\n    \
    \     format, as shown below:\n                   +---------------------------+\n\
    \                   :      Pool Handle          :\n                   +---------------------------+\n\
    \                   :         PE #1             :\n                   +---------------------------+\n\
    \                   :         PE #2             :\n                   +---------------------------+\n\
    \                   :          ...              :\n                   +---------------------------+\n\
    \                   :         PE #n             :\n                   +---------------------------+\n"
- title: 2.4.  ENRP_HANDLE_UPDATE Message
  contents:
  - "2.4.  ENRP_HANDLE_UPDATE Message\n   The PEER_NAME_UPDATE message is sent by\
    \ the Home ENRP server of a PE\n   to all peer servers to announce registration,\
    \ re-registration, or de-\n   registration of the PE in the handlespace.\n   \
    \    0                   1                   2                   3\n       0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |   Type = 0x04 |0|0|0|0|0|0|0|0|        Message Length         |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                      Sending Server's ID                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                     Receiving Server's ID                     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \        Update Action          |        (reserved)             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      :                     Pool Handle Parameter                     :\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      :\
    \                    Pool Element Parameter                     :\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Message Length:  16 bits (unsigned integer)\n         Indicates the entire\
    \ length of the message, including the\n         header, in number of octets.\n\
    \         Note, the value in the Message Length field will NOT cover any\n   \
    \      padding at the end of this message.\n      Update Action:  16 bits (unsigned\
    \ integer)\n         This field indicates the requested action of the specified\
    \ PE.\n         The field MUST be set to one of the following values:\n      \
    \   0x0000 - ADD_PE:  Add or update the specified PE in the ENRP\n           \
    \ handlespace.\n         0x0001 - DEL_PE:  Delete the specified PE from the ENRP\n\
    \            handlespace.\n         0x0002 - 0xFFFF:  Reserved by IETF.\n    \
    \     Other values are reserved by IETF and MUST NOT be used.\n      Reserved:\
    \  16 bits\n         This field MUST be set to all 0s by the sender and ignored\
    \ by\n         the receiver.\n      Sending Server's ID:\n         See Section\
    \ 2.1.\n      Receiving Server's ID:\n         See Section 2.1.\n      Pool Handle:\n\
    \         Specifies to which the PE belongs.\n      Pool Element:\n         Specifies\
    \ the PE.\n"
- title: 2.5.  ENRP_LIST_REQUEST Message
  contents:
  - "2.5.  ENRP_LIST_REQUEST Message\n   The PEER_LIST_REQUEST message is sent to\
    \ request a current copy of\n   the ENRP server list.  This message is normally\
    \ sent from a newly\n   activated ENRP server to an established ENRP server as\
    \ part of the\n   initialization process.\n       0                   1      \
    \             2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |   Type = 0x05 |0|0|0|0|0|0|0|0|    Message Length = 0xC       |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                      Sending Server's ID                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                     Receiving Server's ID                     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Sending\
    \ Server's ID:\n         See Section 2.1.\n      Receiving Server's ID:\n    \
    \     See Section 2.1.\n"
- title: 2.6.  ENRP_LIST_RESPONSE Message
  contents:
  - "2.6.  ENRP_LIST_RESPONSE Message\n   The PEER_LIST_RESPONSE message is sent in\
    \ response from an ENRP\n   server that receives a PEER_LIST_REQUEST message to\
    \ return\n   information about known ENRP servers.\n       0                 \
    \  1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |   Type = 0x06 |0|0|0|0|0|0|0|R|        Message Length         |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                      Sending Server's ID                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                     Receiving Server's ID                     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      :\
    \            Server Information Parameter of Peer #1            :\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      :                           ...                                 :\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      :\
    \            Server Information Parameter of Peer #n            :\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      R (Reject) Flag:  1 bit\n         This flag MUST be set to '1' if the sender\
    \ of this message is\n         rejecting a PEER_LIST_REQUEST message.  If this\
    \ case occurs,\n         the message MUST NOT include any Server Information Parameters.\n\
    \      Message Length:  16 bits (unsigned integer)\n         Indicates the entire\
    \ length of the message in number of octets.\n         Note, the value in the\
    \ Message Length field will NOT cover any\n         padding at the end of this\
    \ message.\n      Sending Server's ID:\n         See Section 2.1.\n      Receiving\
    \ Server's ID:\n         See Section 2.1.\n      Server Information Parameter\
    \ of Peer #1-#n:\n         Each contains a Server Information Parameter of a peer\
    \ known to\n         the sender.  The Server Information Parameter is defined\
    \ in\n         [RFC5354].\n"
- title: 2.7.  ENRP_INIT_TAKEOVER Message
  contents:
  - "2.7.  ENRP_INIT_TAKEOVER Message\n   The ENRP_INIT_TAKEOVER message is sent by\
    \ an ENRP server (the\n   takeover initiator) to announce its intention of taking\
    \ over a\n   specific peer ENRP server.  It is sent to all its peers.\n      \
    \ 0                   1                   2                   3\n       0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |   Type = 0x07 |0|0|0|0|0|0|0|0|        Message Length         |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                      Sending Server's ID                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                     Receiving Server's ID                     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                      Targeting Server's ID                    |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Sending Server's ID:\n         See Section 2.1.\n      Receiving Server's\
    \ ID:\n         See Section 2.1.\n      Targeting Server's ID:  32 bits (unsigned\
    \ integer)\n         This is the ID of the peer ENRP that is the target of this\n\
    \         takeover attempt.\n"
- title: 2.8.  ENRP_INIT_TAKEOVER_ACK Message
  contents:
  - "2.8.  ENRP_INIT_TAKEOVER_ACK Message\n   The PEER_INIT_TAKEOVER_ACK message is\
    \ sent in response to a takeover\n   initiator to acknowledge the reception of\
    \ the PEER_INIT_TAKEOVER\n   message and that it does not object to the takeover.\n\
    \       0                   1                   2                   3\n      \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |   Type = 0x08 |0|0|0|0|0|0|0|0|        Message Length         |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                      Sending Server's ID                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                     Receiving Server's ID                     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                      Targeting Server's ID                    |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Sending Server's ID:\n         See Section 2.1.\n      Receiving Server's\
    \ ID:\n         See Section 2.1.\n      Targeting Server's ID:\n         This\
    \ is the ID of the peer ENRP that is the target of this\n         takeover attempt.\n"
- title: 2.9.  ENRP_TAKEOVER_SERVER Message
  contents:
  - "2.9.  ENRP_TAKEOVER_SERVER Message\n   The PEER_TAKEOVER_REGISTRAR message is\
    \ sent by the takeover initiator\n   to declare the enforcement of a takeover\
    \ to all active peer ENRP\n   servers.\n       0                   1         \
    \          2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |   Type = 0x09 |0|0|0|0|0|0|0|0|        Message Length         |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                      Sending Server's ID                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                     Receiving Server's ID                     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                      Targeting Server's ID                    |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Sending Server's ID:\n         See Section 2.1.\n      Receiving Server's\
    \ ID:\n         See Section 2.1.\n      Targeting Server's ID:\n         This\
    \ is the ID of the peer ENRP that is the target of this\n         takeover operation.\n"
- title: 2.10.  ENRP_ERROR Message
  contents:
  - "2.10.  ENRP_ERROR Message\n   The ENRP_ERROR message is sent by a registrar to\
    \ report an\n   operational error to a peer ENRP server.\n       0           \
    \        1                   2                   3\n       0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |   Type = 0x0a |0|0|0|0|0|0|0|0|        Message Length         |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                      Sending Server's ID                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                     Receiving Server's ID                     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      :\
    \                 Operational Error Parameter                   :\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Sending Server's ID:\n         See Section 2.1.\n      Receiving Server's\
    \ ID:\n         See Section 2.1.\n      Operational Error Parameter:\n       \
    \  This parameter, defined in [RFC5354], indicates the type of\n         error(s)\
    \ being reported.\n"
- title: 3.  ENRP Operation Procedures
  contents:
  - "3.  ENRP Operation Procedures\n   In this section, we discuss the operation procedures\
    \ defined by ENRP.\n   An ENRP server MUST follow these procedures when sending,\
    \ receiving,\n   or processing ENRP messages.\n   Many of the RSerPool events\
    \ call for both server-to-server and PU/\n   PE-to-server message exchanges. \
    \ Only the message exchanges and\n   activities between an ENRP server and its\
    \ peer(s) are considered\n   within the ENRP scope and are defined in this document.\n\
    \   Procedures for exchanging messages between a PE/PU and ENRP servers\n   are\
    \ defined in [RFC5352].\n"
- title: 3.1.  Methods for Communicating amongst ENRP Servers
  contents:
  - "3.1.  Methods for Communicating amongst ENRP Servers\n   Within an RSerPool operational\
    \ scope, ENRP servers need to\n   communicate with each other in order to exchange\
    \ information, such as\n   the pool membership changes, handlespace data synchronization,\
    \ etc.\n   Two types of communications are used amongst ENRP servers:\n   o  point-to-point\
    \ message exchanges from one ENPR server to a\n      specific peer server, and\n\
    \   o  announcements from one server to all its peer servers in the\n      operational\
    \ scope.\n   Point-to-point communication is always carried out over an SCTP\n\
    \   association between the sending server and the receiving server.\n   Announcements\
    \ are sent out via \"group-casts\" over the ENRP server\n   channel.\n"
- title: 3.2.  ENRP Server Initialization
  contents:
  - "3.2.  ENRP Server Initialization\n   This section describes the steps a new ENRP\
    \ server needs to take in\n   order to join the other existing ENRP servers, or\
    \ to initiate the\n   handlespace service if it is the first ENRP server started\
    \ in the\n   operational scope.\n"
- title: 3.2.1.  Generate a Server Identifier
  contents:
  - "3.2.1.  Generate a Server Identifier\n   A new ENRP server MUST generate a non-zero,\
    \ 32-bit server ID that is\n   as unique as possible among all the ENRP servers\
    \ in the operational\n   scope, and this server ID MUST remain unchanged for the\
    \ lifetime of\n   the server.  Normally, a good 32-bit random number will be good\n\
    \   enough, as the server ID [RFC4086] provides some information on\n   randomness\
    \ guidelines.\n   Note, there is a very remote chance (about 1 in about 4 billion)\
    \ that\n   two ENRP servers in an operational scope will generate the same\n \
    \  server ID and hence cause a server ID conflict in the pool.  However,\n   no\
    \ severe consequence of such a conflict has been identified.\n   Note, the ENRP\
    \ server ID space is separate from the PE Id space\n   defined in [RFC5352].\n"
- title: 3.2.2.  Acquire Peer Server List
  contents:
  - "3.2.2.  Acquire Peer Server List\n   At startup, the ENRP server (the initiating\
    \ server) will first\n   attempt to learn of all existing peer ENRP servers in\
    \ the same\n   operational scope, or to determine that it is alone in the scope.\n\
    \   The initiating server uses an existing peer server to bootstrap\n   itself\
    \ into service.  We call this peer server the mentor server.\n"
- title: 3.2.2.1.  Finding the Mentor Server
  contents:
  - "3.2.2.1.  Finding the Mentor Server\n   If the initiating server is told about\
    \ one existing peer server\n   through some administrative means (such as DNS\
    \ query, configuration\n   database, startup scripts, etc.), the initiating server\
    \ MUST then use\n   this peer server as its mentor server.\n   If multiple existing\
    \ peer servers are specified, the initiating\n   server MUST pick one of them\
    \ as its mentor server and keep the others\n   as its backup mentor servers.\n\
    \   If no existing peer server is specified, the initiating server MUST\n   assume\
    \ that it is alone in the operational scope, and MUST skip the\n   procedures\
    \ in Section 3.2.2.2 and Section 3.2.3 and MUST consider its\n   initialization\
    \ completed and start offering ENRP services.\n"
- title: 3.2.2.2.  Request Complete Server List from Mentor Peer
  contents:
  - "3.2.2.2.  Request Complete Server List from Mentor Peer\n   Once the initiating\
    \ server finds its mentor peer server (by either\n   discovery or administrative\
    \ means), the initiating server MUST send\n   an ENRP_LIST_REQUEST message to\
    \ the mentor peer server to request a\n   copy of the complete server list maintained\
    \ by the mentor peer (see\n   Section 3.4 for maintaining a server list).\n  \
    \ The initiating server SHOULD start a MAX-TIME-NO-RESPONSE timer every\n   time\
    \ it finishes sending an ENRP_LIST_REQUEST message.  If the timer\n   expires\
    \ before receiving a response from the mentor peer, the\n   initiating server\
    \ SHOULD abandon the interaction with the current\n   mentor server and send a\
    \ new server list request to a backup mentor\n   peer, if one is available.\n\
    \   Upon the reception of this request, the mentor peer server SHOULD\n   reply\
    \ with an ENRP_LIST_RESPONSE message and include in the message\n   body all existing\
    \ ENRP servers known by the mentor peer.\n   Upon the reception of the ENRP_LIST_RESPONSE\
    \ message from the mentor\n   peer, the initiating server MUST use the server\
    \ information carried\n   in the message to initialize its own peer list.\n  \
    \ However, if the mentor itself is in the process of startup and not\n   ready\
    \ to provide a peer server list (for example, the mentor peer is\n   waiting for\
    \ a response to its own ENRP_LIST_REQUEST to another\n   server), it MUST reject\
    \ the request by the initiating server and\n   respond with an ENRP_LIST_RESPONSE\
    \ message with the R flag set to\n   '1', and with no server information included\
    \ in the response.\n   In the case where its ENRP_LIST_REQUEST is rejected by\
    \ the mentor\n   peer, the initiating server SHOULD either wait for a few seconds\
    \ and\n   re-send the ENRP_LIST_REQUEST to the mentor server, or if there is a\n\
    \   backup mentor peer available, select another mentor peer server and\n   send\
    \ the ENRP_LIST_REQUEST to the new mentor server.\n"
- title: 3.2.3.  Download ENRP Handlespace Data from Mentor Peer
  contents:
  - "3.2.3.  Download ENRP Handlespace Data from Mentor Peer\n   After a peer list\
    \ download is completed, the initiating server MUST\n   request a copy of the\
    \ current handlespace data from its mentor peer\n   server, by taking the following\
    \ steps:\n   1.  The initiating server MUST first send an\n       ENRP_HANDLE_TABLE_REQUEST\
    \ message to the mentor peer, with the W\n       flag set to '0', indicating that\
    \ the entire handlespace is\n       requested.\n   2.  Upon the reception of this\
    \ message, the mentor peer MUST start a\n       download session in which a copy\
    \ of the current handlespace data\n       maintained by the mentor peer is sent\
    \ to the initiating server in\n       one or more ENRP_HANDLE_TABLE_RESPONSE messages.\
    \  (Note, the\n       mentor server may find it particularly desirable to use\
    \ multiple\n       ENRP_HANDLE_TABLE_RESPONSE messages to send the handlespace\
    \ when\n       the handlespace is large, especially when forming and sending out\n\
    \       a single response containing a large handlespace may interrupt\n     \
    \  its other services.)\n       If more than one ENRP_HANDLE_TABLE_RESPONSE message\
    \ is used\n       during the download, the mentor peer MUST use the M flag in\
    \ each\n       ENRP_HANDLE_TABLE_RESPONSE message to indicate whether this\n \
    \      message is the last one for the download session.  In particular,\n   \
    \    the mentor peer MUST set the M flag to '1' in the outbound\n       ENRP_HANDLE_TABLE_RESPONSE\
    \ if there is more data to be\n       transferred and MUST keep track of the progress\
    \ of the current\n       download session.  The mentor peer MUST set the M flag\
    \ to '0' in\n       the last ENRP_HANDLE_TABLE_RESPONSE for the download session\
    \ and\n       close the download session (i.e., removing any internal record of\n\
    \       the session) after sending out the last message.\n   3.  During the downloading,\
    \ every time the initiating server receives\n       an ENRP_HANDLE_TABLE_RESPONSE\
    \ message, it MUST transfer the data\n       entries carried in the message into\
    \ its local handlespace\n       database, and then check whether or not this message\
    \ is the last\n       one for the download session.\n       If the M flag is set\
    \ to '1' in the just processed\n       ENRP_HANDLE_TABLE_RESPONSE message, the\
    \ initiating server MUST\n       send another ENRP_HANDLE_TABLE_REQUEST message\
    \ to the mentor peer\n       to request for the next ENRP_HANDLE_TABLE_RESPONSE\
    \ message.\n   4.  When unpacking the data entries from a ENRP_HANDLE_TABLE_RESPONSE\n\
    \       message into its local handlespace database, the initiating\n       server\
    \ MUST handle each pool entry carried in the message using\n       the following\
    \ rules:\n       A.  If the pool does not exist in the local handlespace, the\n\
    \           initiating server MUST create the pool in the local\n           handlespace\
    \ and add the PE(s) in the pool entry to the pool.\n           When creating the\
    \ pool, the initiation server MUST set the\n           overall member selection\
    \ policy type of the pool to the\n           policy type indicated in the first\
    \ PE.\n       B.  If the pool already exists in the local handlespace, but the\n\
    \           PE(s) in the pool entry is not currently a member of the\n       \
    \    pool, the initiating server MUST add the PE(s) to the pool.\n       C.  If\
    \ the pool already exists in the local handlespace AND the\n           PE(s) in\
    \ the pool entry is already a member of the pool, the\n           initiating server\
    \ SHOULD replace the attributes of the\n           existing PE(s) with the new\
    \ information.  ENRP will make sure\n           that the information stays up\
    \ to date.\n   5.  When the last ENRP_HANDLE_TABLE_RESPONSE message is received\
    \ from\n       the mentor peer and unpacked into the local handlespace, the\n\
    \       initialization process is completed and the initiating server\n      \
    \ SHOULD start to provide ENRP services.\n   Under certain circumstances, the\
    \ mentor peer itself may not be able\n   to provide a handlespace download to\
    \ the initiating server.  For\n   example, the mentor peer is in the middle of\
    \ initializing its own\n   handlespace database, or it currently has too many\
    \ download sessions\n   open to other servers.\n   In such a case, the mentor\
    \ peer MUST reject the request by the\n   initiating server and respond with an\
    \ ENRP_HANDLE_TABLE_RESPONSE\n   message with the R flag set to '1', and with\
    \ no pool entries included\n   in the response.\n   In the case where its ENRP_HANDLE_TABLE_REQUEST\
    \ is rejected by the\n   mentor peer, the initiating server SHOULD either wait\
    \ for a few\n   seconds and re-send the ENRP_HANDLE_TABLE_REQUEST to the mentor\n\
    \   server, or if there is a backup mentor peer available, select another\n  \
    \ mentor peer server and send the ENRP_HANDLE_TABLE_REQUEST to the new\n   mentor\
    \ server.\n   A handlespace download session that has been started may get\n \
    \  interrupted for some reason.  To cope with this, the initiating\n   server\
    \ SHOULD start a timer every time it finishes sending an\n   ENRP_HANDLE_TABLE_REQUEST\
    \ to its mentor peer.  If this timer expires\n   without receiving a response\
    \ from the mentor peer, the initiating\n   server SHOULD abort the current download\
    \ session and re-start a new\n   handlespace download with a backup mentor peer,\
    \ if one is available.\n   Similarly, after sending out an ENRP_HANDLE_TABLE_RESPONSE,\
    \ and the\n   mentor peer setting the M-bit to '1' to indicate that it has more\n\
    \   data to send, it SHOULD start a session timer.  If this timer expires\n  \
    \ without receiving another request from the initiating server, the\n   mentor\
    \ peer SHOULD abort the session, cleaning out any resource and\n   record of the\
    \ session.\n"
- title: 3.3.  Server Handlespace Update
  contents:
  - "3.3.  Server Handlespace Update\n   This includes a set of update operations\
    \ used by an ENRP server to\n   inform its peers when its local handlespace is\
    \ modified, e.g.,\n   addition of a new PE, removal of an existing PE, change\
    \ of pool or PE\n   properties.\n"
- title: 3.3.1.  Announcing Additions or Updates of PE
  contents:
  - "3.3.1.  Announcing Additions or Updates of PE\n   When a new PE is granted registration\
    \ to the handlespace or an\n   existing PE is granted a re-registration, the Home\
    \ ENRP server uses\n   this procedure to inform all its peers.\n   This is an\
    \ ENRP announcement and is sent to all the peer of the Home\n   ENRP server. \
    \ See Section 3.1 on how announcements are sent.\n   An ENRP server MUST announce\
    \ this update to all its peers in a\n   ENRP_HANDLE_UPDATE message with the Update\
    \ Action field set to\n   'ADD_PE', indicating the addition of a new PE or the\
    \ modification of\n   an existing PE.  The complete new information of the PE\
    \ and the pool\n   it belongs to MUST be indicated in the message with a PE parameter\n\
    \   and a Pool Handle parameter, respectively.\n   The Home ENRP server SHOULD\
    \ fill in its server ID in the Sending\n   Server's ID field and leave the Receiving\
    \ Server's ID blank (i.e.,\n   all 0s).\n   When a peer receives this ENRP_HANDLE_UPDATE\
    \ message, it MUST take\n   the following actions:\n   1.  If the named pool indicated\
    \ by the pool handle does not exist in\n       its local copy of the handlespace,\
    \ the peer MUST create the named\n       pool in its local handlespace and add\
    \ the PE to the pool as the\n       first PE.  It MUST then copy in all other\
    \ attributes of the PE\n       carried in the message.\n       When the new pool\
    \ is created, the overall member selection policy\n       of the pool MUST be\
    \ set to the policy type indicated by the PE.\n   2.  If the named pool already\
    \ exists in the peer's local copy of the\n       handlespace *and* the PE does\
    \ not exist, the peer MUST add the PE\n       to the pool as a new PE and copy\
    \ in all attributes of the PE\n       carried in the message.\n   3.  If the named\
    \ pool exists *and* the PE is already a member of the\n       pool, the peer MUST\
    \ replace the attributes of the PE with the new\n       information carried in\
    \ the message.\n"
- title: 3.3.2.  Announcing Removal of PE
  contents:
  - "3.3.2.  Announcing Removal of PE\n   When an existing PE is granted de-registration\
    \ or is removed from its\n   handlespace for some other reasons (e.g., purging\
    \ an unreachable PE,\n   see Section 3.5 in [RFC5352]), the ENRP server MUST use\
    \ this\n   procedure to inform all its peers about the change just made.\n   This\
    \ is an ENRP announcement and is sent to all the peers of the Home\n   ENRP server.\
    \  See Section 3.1 on how announcements are sent.\n   An ENRP server MUST announce\
    \ the PE removal to all its peers in an\n   ENRP_HANDLE_UPDATE message with the\
    \ Update Action field set to\n   DEL_PE, indicating the removal of an existing\
    \ PE.  The complete\n   information of the PE and the pool it belongs to MUST\
    \ be indicated in\n   the message with a PE parameter and a Pool Handle parameter,\n\
    \   respectively.\n   The sending server MUST fill in its server ID in the Sending\
    \ Server's\n   ID field and leave the Receiving Server's ID blank (i.e., set to\
    \ all\n   0s).\n   When a peer receives this ENRP_HANDLE_UPDATE message, it MUST\
    \ first\n   find the pool and the PE in its own handlespace, and then remove the\n\
    \   PE from its local handlespace.  If the removed PE is the last one in\n   the\
    \ pool, the peer MUST also delete the pool from its local\n   handlespace.\n \
    \  If the peer fails to find the PE or the pool in its handlespace, it\n   SHOULD\
    \ take no further actions.\n"
- title: 3.4.  Maintaining Peer List and Monitoring Peer Status
  contents:
  - "3.4.  Maintaining Peer List and Monitoring Peer Status\n   An ENRP server MUST\
    \ keep an internal record on the status of each of\n   its known peers.  This\
    \ record is referred to as the server's \"peer\n   list\".\n"
- title: 3.4.1.  Discovering New Peer
  contents:
  - "3.4.1.  Discovering New Peer\n   If a message of any type is received from a\
    \ previously unknown peer,\n   the ENRP server MUST consider this peer a new peer\
    \ in the operational\n   scope and add it to the peer list.\n   The ENRP server\
    \ MUST send an ENRP_PRESENCE message with the Reply-\n   required flag set to\
    \ '1' to the source address found in the arrived\n   message.  This will force\
    \ the new peer to reply with its own\n   ENRP_PRESENCE containing its full server\
    \ information (see\n   Section 2.1).\n"
- title: 3.4.2.  Server Sending Heartbeat
  contents:
  - "3.4.2.  Server Sending Heartbeat\n   Every PEER-HEARTBEAT-CYCLE seconds, an ENRP\
    \ server MUST announce its\n   continued presence to all its peer with a ENRP_PRESENCE\
    \ message.  In\n   the ENRP_PRESENCE message, the ENRP server MUST set the\n \
    \  'Replay_required' flag to '0', indicating that no response is\n   required.\n\
    \   The arrival of this periodic ENRP_PRESENCE message will cause all its\n  \
    \ peers to update their internal variable \"peer_last_heard\" for the\n   sending\
    \ server (see Section 3.4.3 for more details).\n"
- title: 3.4.3.  Detecting Peer Server Failure
  contents:
  - "3.4.3.  Detecting Peer Server Failure\n   An ENRP server MUST keep an internal\
    \ variable \"peer_last_heard\" for\n   each of its known peers and the value of\
    \ this variable MUST be\n   updated to the current local time every time a message\
    \ of any type\n   (point-to-point or announcement) is received from the corresponding\n\
    \   peer.\n   If a peer has not been heard for more than MAX-TIME-LAST-HEARD\n\
    \   seconds, the ENRP server MUST immediately send a point-to-point\n   ENRP_PRESENCE\
    \ with the Reply_request flag set to '1' to that peer.\n   If the send fails or\
    \ the peer does not reply after MAX-TIME-NO-\n   RESPONSE seconds, the ENRP server\
    \ MUST consider the peer server dead\n   and SHOULD initiate the takeover procedure\
    \ defined in Section 3.5.\n"
- title: 3.5.  Taking Over a Failed Peer Server
  contents:
  - "3.5.  Taking Over a Failed Peer Server\n   In the following descriptions, we\
    \ call the ENRP server that detects\n   the failed peer server and initiates the\
    \ takeover the \"initiating\n   server\" and the failed peer server the \"target\
    \ server\".  This allows\n   the PE to continue to operate in case of a failure\
    \ of their Home ENRP\n   server.\n"
- title: 3.5.1.  Initiating Server Take-over Arbitration
  contents:
  - "3.5.1.  Initiating Server Take-over Arbitration\n   The initiating server SHOULD\
    \ first start the takeover arbitration\n   process by sending an ENRP_INIT_TAKEOVER\
    \ message to all its peer\n   servers.  See Section 3.1 on how announcements are\
    \ sent.  In the\n   message, the initiating server MUST fill in the Sending Server's\
    \ ID\n   and Targeting Server's ID.  The goal is that only one ENRP server\n \
    \  takes over the PE from the target.\n   After announcing the ENRP_INIT_TAKEOVER\
    \ message (\"group-casting\" to\n   all known peers, including the target server),\
    \ the initiating server\n   SHOULD wait for an ENRP_INIT_TAKEOVER_ACK message\
    \ from each of its\n   known peers, except that of the target server.\n   Each\
    \ peer receiving an ENRP_INIT_TAKEOVER message from the initiating\n   server\
    \ MUST take the following actions:\n   1.  If the peer server determines that\
    \ it (itself) is the target\n       server indicated in the ENRP_INIT_TAKEOVER\
    \ message, it MUST\n       immediately announce an ENRP_PRESENCE message to all\
    \ its peer\n       ENRP servers in an attempt to stop this takeover process. \
    \ This\n       indicates a false failure-detection case by the initiating\n  \
    \     server.  The initiating server MUST stop the takeover operation\n      \
    \ by marking the target server as \"active\" and taking no further\n       takeover\
    \ actions.\n   2.  If the peer server finds that it has already started its own\n\
    \       takeover arbitration process on the same target server, it MUST\n    \
    \   perform the following arbitration:\n       A.  If the peer's server ID is\
    \ smaller in value than the Sending\n           Server's ID in the arrived ENRP_INIT_TAKEOVER\
    \ message, the\n           peer server MUST immediately abort its own take-over\
    \ attempt\n           by taking no further takeover actions of its own.  Moreover,\n\
    \           the peer MUST mark the target server as \"not active\" on its\n  \
    \         internal peer list so that its status will no longer be\n          \
    \ monitored by the peer, and reply to the initiating server\n           with an\
    \ ENRP_INIT_TAKEOVER_ACK message.\n       B.  Otherwise, the peer MUST ignore\
    \ the ENRP_INIT_TAKEOVER\n           message.\n   3.  If the peer finds that it\
    \ is neither the target server nor is in\n       its own takeover process, the\
    \ peer MUST: a) mark the target\n       server as \"not active\" on its internal\
    \ peer list so that its\n       status will no longer be monitored by this peer,\
    \ and b) MUST\n       reply to the initiating server with an ENRP_INIT_TAKEOVER_ACK\n\
    \       message.\n   Once the initiating server has received the ENRP_INIT_TAKEOVER_ACK\n\
    \   message from all of its currently known peers (except for the target\n   server),\
    \ it MUST consider that it has won the arbitration and MUST\n   proceed to complete\
    \ the takeover, following the steps described in\n   Section 3.5.2.\n   However,\
    \ if it receives an ENRP_PRESENCE from the target server at\n   any point in the\
    \ arbitration process, the initiating server MUST\n   immediately stop the takeover\
    \ process and mark the status of the\n   target server as \"active\".\n"
- title: 3.5.2.  Takeover Target Peer Server
  contents:
  - "3.5.2.  Takeover Target Peer Server\n   The initiating ENRP server MUST first\
    \ send, via an announcement, an\n   ENRP_TAKEOVER_SERVER message to inform all\
    \ its active peers that the\n   takeover has been enforced.  The target server's\
    \ ID MUST be filled in\n   the message.  The initiating server SHOULD then remove\
    \ the target\n   server from its internal peer list.\n   Then, it SHOULD examine\
    \ its local copy of the handlespace and claim\n   ownership of each of the PEs\
    \ originally owned by the target server,\n   by following these steps:\n   1.\
    \  mark itself as the Home ENRP server of each of the PEs originally\n       owned\
    \ by the target server;\n   2.  send a point-to-point ASAP_ENDPOINT_KEEP_ALIVE\
    \ message, with the\n       'H' flag set to '1', to each of the PEs.  This will\
    \ trigger the\n       PE to adopt the initiating sever as its new Home ENRP server.\n\
    \   When a peer receives the ENRP_TAKEOVER_SERVER message from the\n   initiating\
    \ server, it SHOULD update its local peer list and PE cache\n   by following these\
    \ steps:\n   1.  remove the target server from its internal peer list;\n   2.\
    \  update the Home ENRP server of each PE in its local copy of the\n       handlespace\
    \ to be the sender of the message, i.e., the initiating\n       server.\n"
- title: 3.6.  Handlespace Data Auditing and Re-synchronization
  contents:
  - "3.6.  Handlespace Data Auditing and Re-synchronization\n   Message losses or\
    \ certain temporary breaks in network connectivity\n   may result in data inconsistency\
    \ in the local handlespace copy of\n   some of the ENRP servers in an operational\
    \ scope.  Therefore, each\n   ENRP server in the operational scope SHOULD periodically\
    \ verify that\n   its local copy of handlespace data is still in sync with that\
    \ of its\n   peers.\n   This section defines the auditing and re-synchronization\
    \ procedures\n   for an ENRP server to maintain its handlespace data consistency.\n"
- title: 3.6.1.  Auditing Procedures
  contents:
  - "3.6.1.  Auditing Procedures\n   A checksum covering the data that should be the\
    \ same is exchanged to\n   figure out whether or not the data is the same.\n \
    \  The auditing of handlespace consistency is based on the following\n   procedures:\n\
    \   1.  An ENRP server SHOULD keep a separate PE checksum (a 16-bit\n       integer\
    \ internal variable) for each of its known peers and for\n       itself.  For\
    \ an ENRP server with 'k' known peers, we denote these\n       internal variables\
    \ as \"pe_checksum_pr0\", \"pe_checksum_pr1\", ...,\n       \"pe_checksum_prk\"\
    , where \"pe_checksum_pr0\" is the server's own PE\n       checksum.  The list\
    \ of what these checksums cover and a detailed\n       algorithm for calculating\
    \ them is given in Section 3.6.2.\n   2.  Each time an ENRP server sends out an\
    \ ENRP_PRESENCE, it MUST\n       include in the message its current PE checksum\
    \ (i.e.,\n       \"pe_checksum_pr0\").\n   3.  When an ENRP server (server A)\
    \ receives a PE checksum (carried in\n       an arrived ENRP_PRESENCE) from a\
    \ peer ENRP server (server B),\n       server A SHOULD compare the PE checksum\
    \ found in the\n       ENRP_PRESENCE with its own internal PE checksum of server\
    \ B\n       (i.e., \"pe_checksum_prB\").\n   4.  If the two values match, server\
    \ A will consider that there is no\n       handlespace inconsistency between itself\
    \ and server B, and it\n       should take no further actions.\n   5.  If the\
    \ two values do NOT match, server A SHOULD consider that\n       there is a handlespace\
    \ inconsistency between itself and server B,\n       and a re-synchronization\
    \ process SHOULD be carried out\n       immediately with server B (see Section\
    \ 3.6.3).\n"
- title: 3.6.2.  PE Checksum Calculation Algorithm
  contents:
  - "3.6.2.  PE Checksum Calculation Algorithm\n   When an ENRP server (server A)\
    \ calculates an internal PE checksum for\n   a peer (server B), it MUST use the\
    \ following algorithm.\n   Let us assume that in server A's internal handlespace,\
    \ there are\n   currently 'M' PEs that are owned by server B.  Each of the 'M'\
    \ PEs\n   will then contribute to the checksum calculation with the following\n\
    \   byte block:\n       0                   1                   2            \
    \       3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      :  Pool handle string of the pool the PE belongs (padded with   :\n   \
    \   :  zeros to next 32-bit word boundary, if needed)               :\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                        PE Id (4 octets)                       |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Note,\
    \ these are not TLVs.  This byte block gives each PE a unique\n   byte pattern\
    \ in the scope.  The 16-bit PE checksum for server B\n   \"pe_checksum_prB\" is\
    \ then calculated over the byte blocks contributed\n   by the 'M' PEs one by one.\
    \  The PE checksum calculation MUST use the\n   Internet algorithm described in\
    \ [RFC1071].\n   Server A MUST calculate its own PE checksum (i.e., \"pe_checksum_pr0\"\
    )\n   in the same fashion, using the byte blocks of all the PEs owned by\n   itself.\n\
    \   Note, whenever an ENRP finds that its internal handlespace has\n   changed\
    \ (e.g., due to PE registration/de-registration, receiving peer\n   updates, removing\
    \ failed PEs, downloading handlespace pieces from a\n   peer, etc.), it MUST immediately\
    \ update all its internal PE checksums\n   that are affected by the change.\n\
    \   Implementation Note: when the internal handlespace changes (e.g., a\n   new\
    \ PE added or an existing PE removed), an implementation need not\n   re-calculate\
    \ the affected PE checksum; it can instead simply update\n   the checksum by adding\
    \ or subtracting the byte block of the\n   corresponding PE from the previous\
    \ checksum value.\n"
- title: 3.6.3.  Re-Synchronization Procedures
  contents:
  - "3.6.3.  Re-Synchronization Procedures\n   If an ENRP server determines that there\
    \ is inconsistency between its\n   local handlespace data and a peer's handlespace\
    \ data with regard to\n   the PEs owned by that peer, it MUST perform the following\
    \ steps to\n   re-synchronize the data:\n   1.  The ENRP server SHOULD first \"\
    mark\" every PE it knows about that\n       is owned by the peer in its local\
    \ handlespace database;\n   2.  The ENRP server SHOULD then send an ENRP_HANDLE_TABLE_REQUEST\n\
    \       message with the W flag set to '1' to the peer to request a\n       complete\
    \ list of PEs owned by the peer;\n   3.  Upon reception of the ENRP_HANDLE_TABLE_REQUEST\
    \ message with the\n       W flag set to '1', the peer server SHOULD immediately\
    \ respond\n       with an ENRP_HANDLE_TABLE_RESPONSE message listing all PEs\n\
    \       currently owned by the peer.\n   4.  Upon reception of the ENRP_HANDLE_TABLE_RESPONSE\
    \ message, the\n       ENRP server SHOULD transfer the PE entries carried in the\
    \ message\n       into its local handlespace database.  If a PE entry being\n\
    \       transferred already exists in its local database, the ENRP server\n  \
    \     MUST replace the entry with the copy found in the message and\n       remove\
    \ the \"mark\" from the entry.\n   5.  After transferring all the PE entries from\
    \ the received\n       ENRP_HANDLE_TABLE_RESPONSE message into its local database,\
    \ the\n       ENRP server SHOULD check whether there are still PE entries that\n\
    \       remain \"marked\" in its local handlespace.  If so, the ENRP server\n\
    \       SHOULD silently remove those \"marked\" entries.\n   Note, similar to\
    \ what is described in Section 3.2.3, the peer may\n   reject the ENRP_HANDLE_TABLE_REQUEST\
    \ or use more than one\n   ENRP_HANDLE_TABLE_RESPONSE message to respond.\n"
- title: 3.7.  Handling Unrecognized Messages or Unrecognized Parameters
  contents:
  - "3.7.  Handling Unrecognized Messages or Unrecognized Parameters\n   When an ENRP\
    \ server receives an ENRP message with an unknown message\n   type or a message\
    \ of known type that contains an unknown parameter,\n   it SHOULD handle the unknown\
    \ message or the unknown parameter\n   according to the unrecognized message and\
    \ parameter handling rules\n   defined in Sections 3 and 4 in [RFC5354].\n   According\
    \ to the rules, if an error report to the message sender is\n   needed, the ENRP\
    \ server that discovered the error SHOULD send back an\n   ENRP_ERROR message\
    \ with a proper error cause code.\n"
- title: 4.  Variables and Thresholds
  contents:
  - '4.  Variables and Thresholds

    '
- title: 4.1.  Variables
  contents:
  - "4.1.  Variables\n   peer_last_heard -  The local time that a peer server was\
    \ last heard\n      (via receiving either a group-cast or point-to-point message\
    \ from\n      the peer).\n   pe_checksum_pr -  The internal 16-bit PE checksum\
    \ that an ENRP server\n      keeps for a peer.  A separate PE checksum is kept\
    \ for each of its\n      known peers as well as for itself.\n"
- title: 4.2.  Thresholds
  contents:
  - "4.2.  Thresholds\n   PEER-HEARTBEAT-CYCLE -  The period for an ENRP server to\
    \ announce a\n      heartbeat message to all its known peers.  (Default=30 secs.)\n\
    \   MAX-TIME-LAST-HEARD -  Pre-set threshold for how long an ENRP server\n   \
    \   will wait before considering a silent peer server potentially\n      dead.\
    \  (Default=61 secs.)\n   MAX-TIME-NO-RESPONSE -  Pre-set threshold for how long\
    \ a message\n      sender will wait for a response after sending out a message.\n\
    \      (Default=5 secs.)\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   This document (RFC 5353) is the reference for all\
    \ registrations\n   described in this section.  All registrations have been listed\
    \ on the\n   RSerPool Parameters page.\n"
- title: 5.1.  A New Table for ENRP Message Types
  contents:
  - "5.1.  A New Table for ENRP Message Types\n   ENRP Message Types are maintained\
    \ by IANA.  Ten initial values have\n   been assigned by IANA, as described in\
    \ Figure 1.  IANA created a new\n   table, \"ENRP Message Types\":\n   Type  \
    \     Message Name                 Reference\n   -----      -------------------------\
    \    ---------\n   0x00       (Reserved by IETF)           RFC 5353\n   0x01 \
    \      ENRP_PRESENCE                RFC 5353\n   0x02       ENRP_HANDLE_TABLE_REQUEST\
    \    RFC 5353\n   0x03       ENRP_HANDLE_TABLE_RESPONSE   RFC 5353\n   0x04  \
    \     ENRP_HANDLE_UPDATE           RFC 5353\n   0x05       ENRP_LIST_REQUEST \
    \           RFC 5353\n   0x06       ENRP_LIST_RESPONSE           RFC 5353\n  \
    \ 0x07       ENRP_INIT_TAKEOVER           RFC 5353\n   0x08       ENRP_INIT_TAKEOVER_ACK\
    \       RFC 5353\n   0x09       ENRP_TAKEOVER_SERVER         RFC 5353\n   0x0a\
    \       ENRP_ERROR                   RFC 5353\n   0x0b-0xff  (Available for assignment)\
    \   RFC 5353\n   Requests to register an ENRP Message Type in this table should\
    \ be\n   sent to IANA.  The number must be unique.  The \"Specification\n   Required\"\
    \ policy of [RFC5226] MUST be applied.\n"
- title: 5.2.  A New Table for Update Action Types
  contents:
  - "5.2.  A New Table for Update Action Types\n   Update Types are maintained by\
    \ IANA.  Two initial values have been\n   assigned by IANA.  IANA created a new\
    \ table, \"Update Action Types\":\n   Type           Update Action           \
    \   Reference\n   -------------  --------------------       ---------\n   0x0000\
    \         ADD_PE                      RFC 5353\n   0x0001         DEL_PE     \
    \                 RFC 5353\n   0x0002-0xffff  (Available for assignment)  RFC\
    \ 5353\n   Requests to register an Update Action Type in this table should be\n\
    \   sent to IANA.  The number must be unique.  The \"Specification\n   Required\"\
    \ policy of [RFC5226] MUST be applied.\n"
- title: 5.3.  Port Numbers
  contents:
  - "5.3.  Port Numbers\n   The references for the already assigned port numbers\n\
    \      enrp-udp 9901/udp\n      enrp-sctp 9901/sctp\n      enrp-sctp-tls 9902/sctp\n\
    \   have been updated to RFC 5353.\n"
- title: 5.4.  SCTP Payload Protocol Identifier
  contents:
  - "5.4.  SCTP Payload Protocol Identifier\n   The reference for the already assigned\
    \ ENRP payload protocol\n   identifier 12 have been updated to RFC 5353.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   We present a summary of the threats to the RSerPool\
    \ architecture and\n   describe security requirements in response to mitigate\
    \ the threats.\n   Next, we present the security mechanisms, based on TLS, that\
    \ are\n   implementation requirements in response to the threats.  Finally, we\n\
    \   present a chain-of-trust argument that examines critical data paths\n   in\
    \ RSerPool and shows how these paths are protected by the TLS\n   implementation.\n"
- title: 6.1.  Summary of RSerPool Security Threats
  contents:
  - "6.1.  Summary of RSerPool Security Threats\n   \"Threats Introduced by Reliable\
    \ Server Pooling (RSerPool) and\n   Requirements for Security in Response to Threats\"\
    \ [RFC5355] describes\n   the threats to the RSerPool architecture in detail and\
    \ lists the\n   security requirements in response to each threat.  From the threats\n\
    \   described in this document, the security services required for the\n   RSerPool\
    \ protocol are enumerated below.\n   Threat 1) PE registration/de-registration\
    \ flooding or spoofing\n   -----------\n   Security mechanism in response: ENRP\
    \ server authenticates the PE.\n   Threat 2) PE registers with a malicious ENRP\
    \ server\n   -----------\n   Security mechanism in response: PE authenticates\
    \ the ENRP server.\n   Threats 1 and 2, taken together, result in mutual authentication\
    \ of\n   the ENRP server and the PE.\n   Threat 3) Malicious ENRP server joins\
    \ the ENRP server pool\n   -----------\n   Security mechanism in response: ENRP\
    \ servers mutually authenticate.\n   Threat 4) A PU communicates with a malicious\
    \ ENRP server for handle\n   resolution\n   -----------\n   Security mechanism\
    \ in response: The PU authenticates the ENRP server.\n   Threat 5) Replay attack\n\
    \   -----------\n   Security mechanism in response: Security protocol that has\
    \ protection\n   from replay attacks.\n   Threat 6) Corrupted data that causes\
    \ a PU to have misinformation\n   concerning a pool handle resolution\n   -----------\n\
    \   Security mechanism in response: Security protocol that supports\n   integrity\
    \ protection\n   Threat 7) Eavesdropper snooping on handlespace information\n\
    \   -----------\n   Security mechanism in response: Security protocol that supports\
    \ data\n   confidentiality.\n   Threat 8) Flood of ASAP_ENDPOINT_UNREACHABLE messages\
    \ from the PU to\n   ENRP server\n   -----------\n   Security mechanism in response:\
    \ ASAP must control the number of ASAP\n   endpoint unreachable messages transmitted\
    \ from the PU to the ENRP\n   server.\n   Threat 9) Flood of ASAP_ENDPOINT_KEEP_ALIVE\
    \ messages to the PE from\n   the ENRP server\n   -----------\n   Security mechanism\
    \ in response: ENRP server must control the number\n   of ASAP_ENDPOINT_KEEP_ALIVE\
    \ messages to the PE.\n   To summarize, threats 1-7 require security mechanisms\
    \ that support\n   authentication, integrity, data confidentiality, and protection\
    \ from\n   replay attacks.\n   For RSerPool, we need to authenticate the following:\n\
    \      PU <----  ENRP server (PU authenticates the ENRP server)\n      PE <---->\
    \ ENRP server (mutual authentication)\n      ENRP server <-----> ENRP server (mutual\
    \ authentication)\n"
- title: 6.2.  Implementing Security Mechanisms
  contents:
  - "6.2.  Implementing Security Mechanisms\n   We do not define any new security\
    \ mechanisms specifically for\n   responding to threats 1-7.  Rather, we use an\
    \ existing IETF security\n   protocol, specifically [RFC3237], to provide the\
    \ security services\n   required.  TLS supports all these requirements and MUST\
    \ be\n   implemented.  The TLS_RSA_WITH_AES_128_CBC_SHA ciphersuite MUST be\n\
    \   supported, at a minimum, by implementers of TLS for RSerPool.  For\n   purposes\
    \ of backwards compatibility, ENRP SHOULD support\n   TLS_RSA_WITH_3DES_EDE_CBC_SHA.\
    \  Implementers MAY also support any\n   other IETF-approved ciphersuites.\n \
    \  ENRP servers, PEs, and PUs MUST implement TLS.  ENRP servers and PEs\n   MUST\
    \ support mutual authentication using PSK.  ENRP servers MUST\n   support mutual\
    \ authentication among themselves using PSK.  PUs MUST\n   authenticate ENRP servers\
    \ using certificates.\n   TLS with PSK is mandatory to implement as the authentication\n\
    \   mechanism for ENRP to ENRP authentication and PE to ENRP\n   authentication.\
    \  For PSK, having a pre-shared-key constitutes\n   authorization.  The network\
    \ administrators of a pool need to decide\n   which nodes are authorized to participate\
    \ in the pool.  The\n   justification for PSK is that we assume that one administrative\n\
    \   domain will control and manage the server pool.  This allows for PSK\n   to\
    \ be implemented and managed by a central security administrator.\n   TLS with\
    \ certificates is mandatory to implement as the authentication\n   mechanism for\
    \ PUs to the ENRP server.  PUs MUST authenticate ENRP\n   servers using certificates.\
    \  ENRP servers MUST possess a site\n   certificate whose subject corresponds\
    \ to their canonical hostname.\n   PUs MAY have certificates of their own for\
    \ mutual authentication with\n   TLS, but no provisions are set forth in this\
    \ document for their use.\n   All RSerPool elements that support TLS MUST have\
    \ a mechanism for\n   validating certificates received during TLS negotiation;\
    \ this entails\n   possession of one or more root certificates issued by certificate\n\
    \   authorities (preferably, well-known distributors of site certificates\n  \
    \ comparable to those that issue root certificates for web browsers).\n   In order\
    \ to prevent man-in-the-middle attacks, the client MUST verify\n   the server's\
    \ identity (as presented in the server's Certificate\n   message).  The client's\
    \ understanding of the server's identity\n   (typically the identity used to establish\
    \ the transport connection)\n   is called the \"reference identity\".  The client\
    \ determines the type\n   (e.g., DNS name or IP address) of the reference identity\
    \ and performs\n   a comparison between the reference identity and each subjectAltName\n\
    \   value of the corresponding type until a match is produced.  Once a\n   match\
    \ is produced, the server's identity has been verified, and the\n   server identity\
    \ check is complete.  Different subjectAltName types\n   are matched in different\
    \ ways.  The client may map the reference\n   identity to a different type prior\
    \ to performing a comparison.\n   Mappings may be performed for all available\
    \ subjectAltName types to\n   which the reference identity can be mapped; however,\
    \ the reference\n   identity should only be mapped to types for which the mapping\
    \ is\n   either inherently secure (e.g., extracting the DNS name from a URI to\n\
    \   compare with a subjectAltName of type dNSName) or for which the\n   mapping\
    \ is performed in a secure manner (e.g., using DNS Security\n   (DNSSEC), or using\
    \ user- or admin-configured host-to-address/\n   address-to-host lookup tables).\n\
    \   If the server identity check fails, user-oriented clients SHOULD\n   either\
    \ notify the user or close the transport connection and indicate\n   that the\
    \ server's identity is suspect.  Automated clients SHOULD\n   close the transport\
    \ connection and then return or log an error\n   indicating that the server's\
    \ identity is suspect, or both.  Beyond\n   the server identity check described\
    \ in this section, clients should\n   be prepared to do further checking to ensure\
    \ that the server is\n   authorized to provide the service it is requested to\
    \ provide.  The\n   client may need to make use of local policy information in\
    \ making\n   this determination.\n   If the reference identity is an internationalized\
    \ domain name,\n   conforming implementations MUST convert it to the ASCII Compatible\n\
    \   Encoding (ACE) format, as specified in Section 4 of [RFC3490], before\n  \
    \ comparison with subjectAltName values of type dNSName.  Specifically,\n   conforming\
    \ implementations MUST perform the conversion operation\n   specified in Section\
    \ 4 of [RFC3490] as follows: * in step 1, the\n   domain name SHALL be considered\
    \ a \"stored string\"; * in step 3, set\n   the flag called \"UseSTD3ASCIIRules\"\
    ; * in step 4, process each label\n   with the \"ToASCII\" operation; and * in\
    \ step 5, change all label\n   separators to U+002E (full stop).\n   After performing\
    \ the \"to-ASCII\" conversion, the DNS labels and names\n   MUST be compared for\
    \ equality according to the rules specified in\n   Section 3 of RFC 3490.  The\
    \ '*' (ASCII 42) wildcard character is\n   allowed in subjectAltName values of\
    \ type dNSName, and then, only as\n   the left-most (least significant) DNS label\
    \ in that value.  This\n   wildcard matches any left-most DNS label in the server\
    \ name.  That\n   is, the subject *.example.com matches the server names a.example.com\n\
    \   and b.example.com, but does not match example.com or a.b.example.com.\n  \
    \ When the reference identity is an IP address, the identity MUST be\n   converted\
    \ to the \"network byte order\" octet string representation RFC\n   791 [RFC0791]\
    \ and RFC 2460 [RFC2460].  For IP version 4, as specified\n   in RFC 791, the\
    \ octet string will contain exactly four octets.  For\n   IP version 6, as specified\
    \ in RFC 2460, the octet string will contain\n   exactly sixteen octets.  This\
    \ octet string is then compared against\n   subjectAltName values of type iPAddress.\
    \  A match occurs if the\n   reference identity octet string and value octet strings\
    \ are\n   identical.\n   After a TLS layer is established in a session, both parties\
    \ are to\n   independently decide whether or not to continue based on local policy\n\
    \   and the security level achieved.  If either party decides that the\n   security\
    \ level is inadequate for it to continue, it SHOULD remove the\n   TLS layer immediately\
    \ after the TLS (re)negotiation has completed\n   (see RFC 4511)[RFC4511].  Implementations\
    \ may re-evaluate the\n   security level at any time and, upon finding it inadequate,\
    \ should\n   remove the TLS layer.\n   Implementations MUST support TLS with SCTP,\
    \ as described in [RFC3436]\n   or TLS over TCP, as described in [RFC5246].  When\
    \ using TLS/SCTP we\n   must ensure that RSerPool does not use any features of\
    \ SCTP that are\n   not available to a TLS/SCTP user.  This is not a difficult\
    \ technical\n   problem, but simply a requirement.  When describing an API of\
    \ the\n   RSerPool lower layer, we also have to take into account the\n   differences\
    \ between TLS and SCTP.\n   Threat 8 requires the ASAP protocol to limit the number\
    \ of\n   ASAP_ENDPOINT_UNREACHABLE messages (see Section 3.5 of RFC 5352) to\n\
    \   the ENRP server.\n   Threat 9 requires the ENRP protocol to limit the number\
    \ of\n   ASAP_ENDPOINT_KEEP_ALIVE messages from the ENRP server to the PE.\n \
    \  There is no security mechanism defined for the multicast\n   announcements.\
    \  Therefore, a receiver of such an announcement cannot\n   consider the source\
    \ address of such a message to be a trustworthy\n   address of an ENRP server.\
    \  A receiver must also be prepared to\n   receive a large number of multicast\
    \ announcements from attackers.\n"
- title: 6.3.  Chain of Trust
  contents:
  - "6.3.  Chain of Trust\n   Security is mandatory to implement in RSerPool and is\
    \ based on TLS\n   implementation in all three architecture components that comprise\n\
    \   RSerPool -- namely PU, PE, and the ENRP server.  We define an ENRP\n   server\
    \ that uses TLS for all communication and authenticates ENRP\n   peers and PE\
    \ registrants to be a secured ENRP server.\n   Here is a description of all possible\
    \ data paths and a description of\n   the security.\n   PU <---> secured ENRP\
    \ server (authentication of ENRP server;\n            queries over TLS)\n   PE\
    \ <---> secured ENRP server (mutual authentication;\n            registration/de-registration\
    \ over TLS)\n   secured ENRP server <---> secured ENRP server (mutual authentication;\n\
    \            database updates using TLS)\n   If all components of the system authenticate\
    \ and communicate using\n   TLS, the chain of trust is sound.  The root of the\
    \ trust chain is the\n   ENRP server.  If that is secured using TLS, then security\
    \ will be\n   enforced for all ENRP and PE components that try to connect to it.\n\
    \   Summary of interaction between secured and unsecured components: If\n   the\
    \ PE does not use TLS and tries to register with a secure ENRP\n   server, it\
    \ will receive an error message response indicated as an\n   error due to security\
    \ considerations and the registration will be\n   rejected.  If an ENRP server\
    \ that does not use TLS tries to update\n   the database of a secure ENRP server,\
    \ then the update will be\n   rejected.  If a PU does not use TLS and communicates\
    \ with a secure\n   ENRP server, it will get a response with the understanding\
    \ that the\n   response is not secure, as the response can be tampered with in\n\
    \   transit even if the ENRP database is secured.\n   The final case is the PU\
    \ sending a secure request to ENRP.  It might\n   be that ENRP and PEs are not\
    \ secured and this is an allowable\n   configuration.  The intent is to secure\
    \ the communication over the\n   Internet between the PU and the ENRP server.\n\
    \   Summary:\n   RSerPool architecture components can communicate with each other\
    \ to\n   establish a chain of trust.  Secured PE and ENRP servers reject any\n\
    \   communications with unsecured ENRP or PE servers.\n   If the above is enforced,\
    \ then a chain of trust is established for\n   the RSerPool user.\n"
- title: 7.  Acknowledgments
  contents:
  - "7.  Acknowledgments\n   The authors wish to thank John Loughney, Lyndon Ong,\
    \ Walter Johnson,\n   Thomas Dreibholz, Frank Volkmer, and many others for their\
    \ invaluable\n   comments and feedback.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC0791]     Postel, J., \"Internet Protocol\"\
    , STD 5, RFC 791,\n                 September 1981.\n   [RFC1071]     Braden,\
    \ R., Borman, D., Partridge, C., and W. Plummer,\n                 \"Computing\
    \ the Internet checksum\", RFC 1071,\n                 September 1988.\n   [RFC2119]\
    \     Bradner, S., \"Key words for use in RFCs to Indicate\n                 Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2460]     Deering, S. and R.\
    \ Hinden, \"Internet Protocol, Version\n                 6 (IPv6) Specification\"\
    , RFC 2460, December 1998.\n   [RFC3237]     Tuexen, M., Xie, Q., Stewart, R.,\
    \ Shore, M., Ong, L.,\n                 Loughney, J., and M. Stillman, \"Requirements\
    \ for\n                 Reliable Server Pooling\", RFC 3237, January 2002.\n \
    \  [RFC3436]     Jungmaier, A., Rescorla, E., and M. Tuexen, \"Transport\n   \
    \              Layer Security over Stream Control Transmission\n             \
    \    Protocol\", RFC 3436, December 2002.\n   [RFC3490]     Faltstrom, P., Hoffman,\
    \ P., and A. Costello,\n                 \"Internationalizing Domain Names in\
    \ Applications\n                 (IDNA)\", RFC 3490, March 2003.\n   [RFC4511]\
    \     Sermersheim, J., \"Lightweight Directory Access Protocol\n             \
    \    (LDAP): The Protocol\", RFC 4511, June 2006.\n   [RFC5226]     Narten, T.\
    \ and H. Alvestrand, \"Guidelines for Writing\n                 an IANA Considerations\
    \ Section in RFCs\", BCP 26,\n                 RFC 5226, May 2008.\n   [RFC5246]\
    \     Dierks, T. and E. Rescorla, \"The Transport Layer\n                 Security\
    \ (TLS) Protocol Version 1.2\", RFC 5246,\n                 August 2008.\n   [RFC5354]\
    \     Stewart, R., Xie, Q., Stillman, M., and M. Tuexen,\n                 \"\
    Aggregate Server Access Protocol (ASAP) and Endpoint\n                 Handlespace\
    \ Redundancy Protocol (ENRP) Parameters\",\n                 RFC 5354, September\
    \ 2008.\n   [RFC5352]     Stewart, R., Xie, Q., Stillman, M., and M. Tuexen,\n\
    \                 \"Aggregate Server Access Protocol (ASAP)\", RFC 5352,\n   \
    \              September 2008.\n   [RFC5355]     Stillman, M., Ed., Gopal, R.,\
    \ Guttman, E., Holdrege,\n                 M., and S. Sengodan, \"Threats Introduced\
    \ by Reliable\n                 Server Pooling (RSerPool) and Requirements for\
    \ Security\n                 in Response to Threats\", RFC 5355, September 2008.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [RFC4086]     Eastlake, D., Schiller, J., and\
    \ S. Crocker, \"Randomness\n                 Requirements for Security\", BCP\
    \ 106, RFC 4086,\n                 June 2005.\n   [SCTPSOCKET]  Stewart, R., Poon,\
    \ K., Tuexen, M., Yasevich, V., and P.\n                 Lei, \"Sockets API Extensions\
    \ for Stream Control\n                 Transmission Protocol (SCTP)\", Work in\
    \ Progress,\n                 July 2008.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Qiaobing Xie\n   The Resource Group\n   1700 Pennsylvania\
    \ Ave NW\n   Suite 560\n   Washington, D.C.,   20006\n   USA\n   Phone: +1 224-465-5954\n\
    \   EMail: Qiaobing.Xie@gmail.com\n   Randall R. Stewart\n   The Resource Group\n\
    \   1700 Pennsylvania Ave NW\n   Suite 560\n   Washington, D.C.,   20006\n   USA\n\
    \   Phone:\n   EMail: randall@lakerest.net\n   Maureen Stillman\n   Nokia\n  \
    \ 1167 Peachtree Ct.\n   Naperville, IL  60540\n   US\n   Phone:\n   EMail: maureen.stillman@nokia.com\n\
    \   Michael Tuexen\n   Muenster Univ. of Applied Sciences\n   Stegerwaldstr. 39\n\
    \   48565 Steinfurt\n   Germany\n   EMail: tuexen@fh-muenster.de\n   Aron J. Silverton\n\
    \   Sun Microsystems, Inc.\n   10 S. Wacker Drive\n   Suite 2000\n   Chicago,\
    \ IL 60606\n   USA\n   Phone:\n   EMail: ajs.ietf@gmail.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
