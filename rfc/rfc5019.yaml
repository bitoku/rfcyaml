- contents:
  - "   The Lightweight Online Certificate Status Protocol (OCSP) Profile\n                      for
    High-Volume Environments\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Abstract\n   This specification defines a profile of the Online Certificate Status\n
    \  Protocol (OCSP) that addresses the scalability issues inherent when\n   using
    OCSP in large scale (high volume) Public Key Infrastructure\n   (PKI) environments
    and/or in PKI environments that require a\n   lightweight solution to minimize
    communication bandwidth and client-\n   side processing.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Requirements Terminology ...................................4\n   2.
    OCSP Message Profile ............................................4\n      2.1.
    OCSP Request Profile .......................................4\n           2.1.1.
    OCSPRequest Structure ...............................4\n           2.1.2. Signed
    OCSPRequests .................................5\n      2.2. OCSP Response Profile
    ......................................5\n           2.2.1. OCSPResponse Structure
    ..............................5\n           2.2.2. Signed OCSPResponses ................................6\n
    \          2.2.3. OCSPResponseStatus Values ...........................6\n           2.2.4.
    thisUpdate, nextUpdate, and producedAt ..............7\n   3. Client Behavior
    .................................................7\n      3.1. OCSP Responder
    Discovery ...................................7\n      3.2. Sending an OCSP Request
    ....................................7\n   4. Ensuring an OCSPResponse Is Fresh
    ...............................8\n   5. Transport Profile ...............................................9\n
    \  6. Caching Recommendations .........................................9\n      6.1.
    Caching at the Client .....................................10\n      6.2. HTTP
    Proxies ..............................................10\n      6.3. Caching at
    Servers ........................................12\n   7. Security Considerations
    ........................................12\n      7.1. Replay Attacks ............................................12\n
    \     7.2. Man-in-the-Middle Attacks .................................13\n      7.3.
    Impersonation Attacks .....................................13\n      7.4. Denial-of-Service
    Attacks .................................13\n      7.5. Modification of HTTP Headers
    ..............................14\n      7.6. Request Authentication and Authorization
    ..................14\n   8. Acknowledgements ...............................................14\n
    \  9. References .....................................................14\n      9.1.
    Normative References ......................................14\n      9.2. Informative
    References ....................................15\n   Appendix A. Example OCSP
    Messages .................................16\n      A.1. OCSP Request ..............................................16\n
    \     A.2. OCSP Response .............................................16\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Online Certificate Status Protocol [OCSP] specifies
    a mechanism\n   used to determine the status of digital certificates, in lieu
    of\n   using Certificate Revocation Lists (CRLs).  Since its definition in\n   1999,
    it has been deployed in a variety of environments and has\n   proven to be a useful
    certificate status checking mechanism.  (For\n   brevity we refer to OCSP as being
    used to verify certificate status,\n   but only the revocation status of a certificate
    is checked via this\n   protocol.)\n   To date, many OCSP deployments have been
    used to ensure timely and\n   secure certificate status information for high-value
    electronic\n   transactions or highly sensitive information, such as in the banking\n
    \  and financial environments.  As such, the requirement for an OCSP\n   responder
    to respond in \"real time\" (i.e., generating a new OCSP\n   response for each
    OCSP request) has been important.  In addition,\n   these deployments have operated
    in environments where bandwidth usage\n   is not an issue, and have run on client
    and server systems where\n   processing power is not constrained.\n   As the use
    of PKI continues to grow and move into diverse\n   environments, so does the need
    for a scalable and cost-effective\n   certificate status mechanism.  Although
    OCSP as currently defined and\n   deployed meets the need of small to medium-sized
    PKIs that operate on\n   powerful systems on wired networks, there is a limit
    as to how these\n   OCSP deployments scale from both an efficiency and cost perspective.\n
    \  Mobile environments, where network bandwidth may be at a premium and\n   client-side
    devices are constrained from a processing point of view,\n   require the careful
    use of OCSP to minimize bandwidth usage and\n   client-side processing complexity.
    [OCSPMP]\n   PKI continues to be deployed into environments where millions if
    not\n   hundreds of millions of certificates have been issued.  In many of\n   these
    environments, an even larger number of users (also known as\n   relying parties)
    have the need to ensure that the certificate they\n   are relying upon has not
    been revoked.  As such, it is important that\n   OCSP is used in such a way that
    ensures the load on OCSP responders\n   and the network infrastructure required
    to host those responders are\n   kept to a minimum.\n   This document addresses
    the scalability issues inherent when using\n   OCSP in PKI environments described
    above by defining a message\n   profile and clarifying OCSP client and responder
    behavior that will\n   permit:\n   1) OCSP response pre-production and distribution.\n
    \  2) Reduced OCSP message size to lower bandwidth usage.\n   3) Response message
    caching both in the network and on the client.\n   It is intended that the normative
    requirements defined in this\n   profile will be adopted by OCSP clients and OCSP
    responders operating\n   in very large-scale (high-volume) PKI environments or
    PKI\n   environments that require a lightweight solution to minimize\n   bandwidth
    and client-side processing power (or both), as described\n   above.  As OCSP does
    not have the means to signal responder\n   capabilities within the protocol, clients
    needing to differentiate\n   between OCSP responses produced by responders conformant
    with this\n   profile and those that are not need to rely on out-of-band mechanisms\n
    \  to determine when a responder operates according to this profile and,\n   as
    such, when the requirements of this profile apply.  In the case\n   where out-of-band
    mechanisms may not be available, this profile\n   ensures that interoperability
    will still occur between a fully\n   conformant OCSP 2560 client and a responder
    that is operating in a\n   mode as described in this specification.\n"
  - contents:
    - "1.1.  Requirements Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
      and \"OPTIONAL\" in this\n   document are to be interpreted as described in
      [RFC2119].\n"
    title: 1.1.  Requirements Terminology
  title: 1.  Introduction
- contents:
  - "2.  OCSP Message Profile\n   This section defines a subset of OCSPRequest and
    OCSPResponse\n   functionality as defined in [OCSP].\n"
  - contents:
    - '2.1.  OCSP Request Profile

      '
    - contents:
      - "2.1.1.  OCSPRequest Structure\n   OCSPRequests conformant to this profile
        MUST include only one Request\n   in the OCSPRequest.RequestList structure.\n
        \  Clients MUST use SHA1 as the hashing algorithm for the\n   CertID.issuerNameHash
        and the CertID.issuerKeyHash values.\n   Clients MUST NOT include the singleRequestExtensions
        structure.\n   Clients SHOULD NOT include the requestExtensions structure.
        \ If a\n   requestExtensions structure is included, this profile RECOMMENDS
        that\n   it contain only the nonce extension (id-pkix-ocsp-nonce).  See\n
        \  Section 4 for issues concerning the use of a nonce in high-volume\n   OCSP
        environments.\n"
      title: 2.1.1.  OCSPRequest Structure
    - contents:
      - "2.1.2.  Signed OCSPRequests\n   Clients SHOULD NOT send signed OCSPRequests.
        \ Responders MAY ignore\n   the signature on OCSPRequests.\n   If the OCSPRequest
        is signed, the client SHALL specify its name in\n   the OCSPRequest.requestorName
        field; otherwise, clients SHOULD NOT\n   include the requestorName field in
        the OCSPRequest.  OCSP servers\n   MUST be prepared to receive unsigned OCSP
        requests that contain the\n   requestorName field, but must realize that the
        provided value is not\n   authenticated.\n"
      title: 2.1.2.  Signed OCSPRequests
    title: 2.1.  OCSP Request Profile
  - contents:
    - '2.2.  OCSP Response Profile

      '
    - contents:
      - "2.2.1.  OCSPResponse Structure\n   Responders MUST generate a BasicOCSPResponse
        as identified by the\n   id-pkix-ocsp-basic OID.  Clients MUST be able to
        parse and accept a\n   BasicOCSPResponse.  OCSPResponses conformant to this
        profile SHOULD\n   include only one SingleResponse in the ResponseData.responses\n
        \  structure, but MAY include additional SingleResponse elements if\n   necessary
        to improve response pre-generation performance or cache\n   efficiency.\n
        \  The responder SHOULD NOT include responseExtensions.  As specified in\n
        \  [OCSP], clients MUST ignore unrecognized non-critical\n   responseExtensions
        in the response.\n   In the case where a responder does not have the ability
        to respond to\n   an OCSP request containing a option not supported by the
        server, it\n   SHOULD return the most complete response it can.  For example,
        in the\n   case where a responder only supports pre-produced responses and
        does\n   not have the ability to respond to an OCSP request containing a\n
        \  nonce, it SHOULD return a response that does not include a nonce.\n   Clients
        SHOULD attempt to process a response even if the response\n   does not include
        a nonce.  See Section 4 for details on validating\n   responses that do not
        contain a nonce.  See also Section 7 for\n   relevant security considerations.\n
        \  Responders that do not have the ability to respond to OCSP requests\n   that
        contain an unsupported option such as a nonce MAY forward the\n   request
        to an OCSP responder capable of doing so.\n   The responder MAY include the
        singleResponse.singleResponse\n   extensions structure.\n"
      title: 2.2.1.  OCSPResponse Structure
    - contents:
      - "2.2.2.  Signed OCSPResponses\n   Clients MUST validate the signature on the
        returned OCSPResponse.\n   If the response is signed by a delegate of the
        issuing certification\n   authority (CA), a valid responder certificate MUST
        be referenced in\n   the BasicOCSPResponse.certs structure.\n   It is RECOMMENDED
        that the OCSP responder's certificate contain the\n   id-pkix-ocsp-nocheck
        extension, as defined in [OCSP], to indicate to\n   the client that it need
        not check the certificate's status.  In\n   addition, it is RECOMMENDED that
        neither an OCSP authorityInfoAccess\n   (AIA) extension nor cRLDistributionPoints
        (CRLDP) extension be\n   included in the OCSP responder's certificate.  Accordingly,
        the\n   responder's signing certificate SHOULD be relatively short-lived and\n
        \  renewed regularly.\n   Clients MUST be able to identify OCSP responder
        certificates using\n   both the byName and byKey ResponseData.ResponderID
        choices.\n   Responders SHOULD use byKey to further reduce the size of the\n
        \  response in scenarios where reducing bandwidth is an issue.\n"
      title: 2.2.2.  Signed OCSPResponses
    - contents:
      - "2.2.3.  OCSPResponseStatus Values\n   As long as the OCSP infrastructure
        has authoritative records for a\n   particular certificate, an OCSPResponseStatus
        of \"successful\" will be\n   returned.  When access to authoritative records
        for a particular\n   certificate is not available, the responder MUST return
        an\n   OCSPResponseStatus of \"unauthorized\".  As such, this profile extends\n
        \  the RFC 2560 [OCSP] definition of \"unauthorized\" as follows:\n      The
        response \"unauthorized\" is returned in cases where the client\n      is
        not authorized to make this query to this server or the server\n      is not
        capable of responding authoritatively.\n   For example, OCSP responders that
        do not have access to authoritative\n   records for a requested certificate,
        such as those that generate and\n   distribute OCSP responses in advance and
        thus do not have the ability\n   to properly respond with a signed \"successful\"
        yet \"unknown\"\n   response, will respond with an OCSPResponseStatus of \"unauthorized\".\n
        \  Also, in order to ensure the database of revocation information does\n
        \  not grow unbounded over time, the responder MAY remove the status\n   records
        of expired certificates.  Requests from clients for\n   certificates whose
        record has been removed will result in an\n   OCSPResponseStatus of \"unauthorized\".\n
        \  Security considerations regarding the use of unsigned responses are\n   discussed
        in [OCSP].\n"
      title: 2.2.3.  OCSPResponseStatus Values
    - contents:
      - "2.2.4.  thisUpdate, nextUpdate, and producedAt\n   When pre-producing OCSPResponse
        messages, the responder MUST set the\n   thisUpdate, nextUpdate, and producedAt
        times as follows:\n   thisUpdate    The time at which the status being indicated
        is known\n                 to be correct.\n   nextUpdate    The time at or
        before which newer information will be\n                 available about the
        status of the certificate.\n                 Responders MUST always include
        this value to aid in\n                 response caching.  See Section 6 for
        additional\n                 information on caching.\n   producedAt    The
        time at which the OCSP response was signed.\n   Note: In many cases the value
        of thisUpdate and producedAt will be\n   the same.\n   For the purposes of
        this profile, ASN.1-encoded GeneralizedTime\n   values such as thisUpdate,
        nextUpdate, and producedAt MUST be\n   expressed Greenwich Mean Time (Zulu)
        and MUST include seconds (i.e.,\n   times are YYYYMMDDHHMMSSZ), even where
        the number of seconds is zero.\n   GeneralizedTime values MUST NOT include
        fractional seconds.\n"
      title: 2.2.4.  thisUpdate, nextUpdate, and producedAt
    title: 2.2.  OCSP Response Profile
  title: 2.  OCSP Message Profile
- contents:
  - '3.  Client Behavior

    '
  - contents:
    - "3.1.  OCSP Responder Discovery\n   Clients MUST support the authorityInfoAccess
      extension as defined in\n   [PKIX] and MUST recognize the id-ad-ocsp access
      method.  This enables\n   CAs to inform clients how they can contact the OCSP
      service.\n   In the case where a client is checking the status of a certificate\n
      \  that contains both an authorityInformationAccess (AIA) extension\n   pointing
      to an OCSP responder and a cRLDistributionPoints extension\n   pointing to a
      CRL, the client SHOULD attempt to contact the OCSP\n   responder first.  Clients
      MAY attempt to retrieve the CRL if no\n   OCSPResponse is received from the
      responder after a locally\n   configured timeout and number of retries.\n"
    title: 3.1.  OCSP Responder Discovery
  - contents:
    - "3.2.  Sending an OCSP Request\n   To avoid needless network traffic, applications
      MUST verify the\n   signature of signed data before asking an OCSP client to
      check the\n   status of certificates used to verify the data.  If the signature
      is\n   invalid or the application is not able to verify it, an OCSP check\n
      \  MUST NOT be requested.\n   Similarly, an application MUST validate the signature
      on certificates\n   in a chain, before asking an OCSP client to check the status
      of the\n   certificate.  If the certificate signature is invalid or the\n   application
      is not able to verify it, an OCSP check MUST NOT be\n   requested.  Clients
      SHOULD NOT make a request to check the status of\n   expired certificates.\n"
    title: 3.2.  Sending an OCSP Request
  title: 3.  Client Behavior
- contents:
  - "4.  Ensuring an OCSPResponse Is Fresh\n   In order to ensure that a client does
    not accept an out-of-date\n   response that indicates a 'good' status when in
    fact there is a more\n   up-to-date response that specifies the status of 'revoked',
    a client\n   must ensure the responses they receive are fresh.\n   In general,
    two mechanisms are available to clients to ensure a\n   response is fresh.  The
    first uses nonces, and the second is based on\n   time.  In order for time-based
    mechanisms to work, both clients and\n   responders MUST have access to an accurate
    source of time.\n   Because this profile specifies that clients SHOULD NOT include
    a\n   requestExtensions structure in OCSPRequests (see Section 2.1),\n   clients
    MUST be able to determine OCSPResponse freshness based on an\n   accurate source
    of time.  Clients that opt to include a nonce in the\n   request SHOULD NOT reject
    a corresponding OCSPResponse solely on the\n   basis of the nonexistent expected
    nonce, but MUST fall back to\n   validating the OCSPResponse based on time.\n
    \  Clients that do not include a nonce in the request MUST ignore any\n   nonce
    that may be present in the response.\n   Clients MUST check for the existence
    of the nextUpdate field and MUST\n   ensure the current time, expressed in GMT
    time as described in\n   Section 2.2.4, falls between the thisUpdate and nextUpdate
    times.  If\n   the nextUpdate field is absent, the client MUST reject the response.\n
    \  If the nextUpdate field is present, the client MUST ensure that it is\n   not
    earlier than the current time.  If the current time on the client\n   is later
    than the time specified in the nextUpdate field, the client\n   MUST reject the
    response as stale.  Clients MAY allow configuration\n   of a small tolerance period
    for acceptance of responses after\n   nextUpdate to handle minor clock differences
    relative to responders\n   and caches.  This tolerance period should be chosen
    based on the\n   accuracy and precision of time synchronization technology available\n
    \  to the calling application environment.  For example, Internet peers\n   with
    low latency connections typically expect NTP time\n   synchronization to keep
    them accurate within parts of a second;\n   higher latency environments or where
    an NTP analogue is not available\n   may have to be more liberal in their tolerance.\n
    \  See the security considerations in Section 7 for additional details\n   on
    replay and man-in-the-middle attacks.\n"
  title: 4.  Ensuring an OCSPResponse Is Fresh
- contents:
  - "5.  Transport Profile\n   The OCSP responder MUST support requests and responses
    over HTTP.\n   When sending requests that are less than or equal to 255 bytes
    in\n   total (after encoding) including the scheme and delimiters (http://),\n
    \  server name and base64-encoded OCSPRequest structure, clients MUST\n   use
    the GET method (to enable OCSP response caching).  OCSP requests\n   larger than
    255 bytes SHOULD be submitted using the POST method.  In\n   all cases, clients
    MUST follow the descriptions in A.1.1 of [OCSP]\n   when constructing these messages.\n
    \  When constructing a GET message, OCSP clients MUST base64 encode the\n   OCSPRequest
    structure and append it to the URI specified in the AIA\n   extension [PKIX].
    \ Clients MUST NOT include CR or LF characters in\n   the base64-encoded string.
    \ Clients MUST properly URL-encode the\n   base64 encoded OCSPRequest.  For example:\n
    \     http://ocsp.example.com/MEowSDBGMEQwQjAKBggqhkiG9w0CBQQQ7sp6GTKpL\n      2dAdeGaW267owQQqInESWQD0mGeBArSgv%2FBWQIQLJx%2Fg9xF8oySYzol80Mbpg\n
    \     %3D%3D\n   In response to properly formatted OCSPRequests that are cachable\n
    \  (i.e., responses that contain a nextUpdate value), the responder will\n   include
    the binary value of the DER encoding of the OCSPResponse\n   preceded by the following
    HTTP [HTTP] headers.\n      content-type: application/ocsp-response\n      content-length:
    <OCSP response length>\n      last-modified: <producedAt [HTTP] date>\n      ETag:
    \"<strong validator>\"\n      expires: <nextUpdate [HTTP] date>\n      cache-control:
    max-age=<n>, public, no-transform, must-revalidate\n      date: <current [HTTP]
    date>\n   See Section 6.2 for details on the use of these headers.\n"
  title: 5.  Transport Profile
- contents:
  - "6.  Caching Recommendations\n   The ability to cache OCSP responses throughout
    the network is an\n   important factor in high volume OCSP deployments.  This
    section\n   discusses the recommended caching behavior of OCSP clients and HTTP\n
    \  proxies and the steps that should be taken to minimize the number of\n   times
    that OCSP clients \"hit the wire\".  In addition, the concept of\n   including
    OCSP responses in protocol exchanges (aka stapling or\n   piggybacking), such
    as has been defined in TLS, is also discussed.\n"
  - contents:
    - "6.1.  Caching at the Client\n   To minimize bandwidth usage, clients MUST locally
      cache authoritative\n   OCSP responses (i.e., a response with a signature that
      has been\n   successfully validated and that indicate an OCSPResponseStatus
      of\n   'successful').\n   Most OCSP clients will send OCSPRequests at or near
      the nextUpdate\n   time (when a cached response expires).  To avoid large spikes
      in\n   responder load that might occur when many clients refresh cached\n   responses
      for a popular certificate, responders MAY indicate when the\n   client should
      fetch an updated OCSP response by using the cache-\n   control:max-age directive.
      \ Clients SHOULD fetch the updated OCSP\n   Response on or after the max-age
      time.  To ensure that clients\n   receive an updated OCSP response, OCSP responders
      MUST refresh the\n   OCSP response before the max-age time.\n"
    title: 6.1.  Caching at the Client
  - contents:
    - "6.2.  HTTP Proxies\n   The responder SHOULD set the HTTP headers of the OCSP
      response in\n   such a way as to allow for the intelligent use of intermediate
      HTTP\n   proxy servers.  See [HTTP] for the full definition of these headers\n
      \  and the proper format of any date and time values.\n   HTTP Header     Description\n
      \  ===========    ====================================================\n   date
      \           The date and time at which the OCSP server generated\n                   the
      HTTP response.\n   last-modified   This value specifies the date and time at
      which the\n                   OCSP responder last modified the response.  This
      date\n                   and time will be the same as the thisUpdate timestamp\n
      \                  in the request itself.\n   expires         Specifies how
      long the response is considered fresh.\n                   This date and time
      will be the same as the nextUpdate\n                   timestamp in the OCSP
      response itself.\n   ETag            A string that identifies a particular version
      of the\n                   associated data.  This profile RECOMMENDS that the\n
      \                  ETag value be the ASCII HEX representation of the\n                   SHA1
      hash of the OCSPResponse structure.\n   cache-control   Contains a number of
      caching directives.\n                * max-age=<n>     -where n is a time value
      later than\n                                   thisUpdate but earlier than\n
      \                                  nextUpdate.\n                * public          -makes
      normally uncachable response\n                                   cachable by
      both shared and nonshared\n                                   caches.\n                *
      no-transform    -specifies that a proxy cache cannot\n                                   change
      the type, length, or encoding\n                                   of the object
      content.\n                * must-revalidate -prevents caches from intentionally\n
      \                                  returning stale responses.\n   OCSP responders
      MUST NOT include a \"Pragma: no-cache\", \"Cache-\n   Control: no-cache\", or
      \"Cache-Control: no-store\" header in\n   authoritative OCSP responses.\n   OCSP
      responders SHOULD include one or more of these headers in non-\n   authoritative
      OCSP responses.\n   For example, assume that an OCSP response has the following
      timestamp\n   values:\n      thisUpdate = May 1, 2005  01:00:00 GMT\n      nextUpdate
      = May 3, 2005 01:00:00 GMT\n      productedAt = May 1, 2005 01:00:00 GMT\n   and
      that an OCSP client requests the response on May 2, 2005 01:00:00\n   GMT.  In
      this scenario, the HTTP response may look like this:\n      content-type: application/ocsp-response\n
      \     content-length: 1000\n      date: Fri, 02 May 2005 01:00:00 GMT\n      last-modified:
      Thu, 01 May 2005 01:00:00 GMT\n      ETag: \"c66c0341abd7b9346321d5470fd0ec7cc4dae713\"\n
      \     expires: Sat, 03 May 2005 01:00:00 GMT\n      cache-control: max-age=86000,public,no-transform,must-revalidate\n
      \     <...>\n   OCSP clients MUST NOT include a no-cache header in OCSP request\n
      \  messages, unless the client encounters an expired response which may\n   be
      a result of an intermediate proxy caching stale data.  In this\n   situation,
      clients SHOULD resend the request specifying that proxies\n   should be bypassed
      by including an appropriate HTTP header in the\n   request (i.e., Pragma: no-cache
      or Cache-Control: no-cache).\n"
    title: 6.2.  HTTP Proxies
  - contents:
    - "6.3.  Caching at Servers\n   In some scenarios, it is advantageous to include
      OCSP response\n   information within the protocol being utilized between the
      client and\n   server.  Including OCSP responses in this manner has a few attractive\n
      \  effects.\n   First, it allows for the caching of OCSP responses on the server,\n
      \  thus lowering the number of hits to the OCSP responder.\n   Second, it enables
      certificate validation in the event the client is\n   not connected to a network
      and thus eliminates the need for clients\n   to establish a new HTTP session
      with the responder.\n   Third, it reduces the number of round trips the client
      needs to make\n   in order to complete a handshake.\n   Fourth, it simplifies
      the client-side OCSP implementation by enabling\n   a situation where the client
      need only the ability to parse and\n   recognize OCSP responses.\n   This functionality
      has been specified as an extension to the TLS\n   [TLS] protocol in Section
      3.6 [TLSEXT], but can be applied to any\n   client-server protocol.\n   This
      profile RECOMMENDS that both TLS clients and servers implement\n   the certificate
      status request extension mechanism for TLS.\n   Further information regarding
      caching issues can be obtained from RFC\n   3143 [RFC3143].\n"
    title: 6.3.  Caching at Servers
  title: 6.  Caching Recommendations
- contents:
  - "7.  Security Considerations\n   The following considerations apply in addition
    to the security\n   considerations addressed in Section 5 of [OCSP].\n"
  - contents:
    - "7.1.  Replay Attacks\n   Because the use of nonces in this profile is optional,
      there is a\n   possibility that an out of date OCSP response could be replayed,
      thus\n   causing a client to accept a good response when in fact there is a\n
      \  more up-to-date response that specifies the status of revoked.  In\n   order
      to mitigate this attack, clients MUST have access to an\n   accurate source
      of time and ensure that the OCSP responses they\n   receive are sufficiently
      fresh.\n   Clients that do not have an accurate source of date and time are\n
      \  vulnerable to service disruption.  For example, a client with a\n   sufficiently
      fast clock may reject a fresh OCSP response.  Similarly\n   a client with a
      sufficiently slow clock may incorrectly accept\n   expired valid responses for
      certificates that may in fact be revoked.\n   Future versions of the OCSP protocol
      may provide a way for the client\n   to know whether the server supports nonces
      or does not support\n   nonces.  If a client can determine that the server supports
      nonces,\n   it MUST reject a reply that does not contain an expected nonce.\n
      \  Otherwise, clients that opt to include a nonce in the request SHOULD\n   NOT
      reject a corresponding OCSPResponse solely on the basis of the\n   nonexistent
      expected nonce, but MUST fall back to validating the\n   OCSPResponse based
      on time.\n"
    title: 7.1.  Replay Attacks
  - contents:
    - "7.2.  Man-in-the-Middle Attacks\n   To mitigate risk associated with this class
      of attack, the client\n   must properly validate the signature on the response.\n
      \  The use of signed responses in OCSP serves to authenticate the\n   identity
      of the OCSP responder and to verify that it is authorized to\n   sign responses
      on the CA's behalf.\n   Clients MUST ensure that they are communicating with
      an authorized\n   responder by the rules described in [OCSP], Section 4.2.2.2.\n"
    title: 7.2.  Man-in-the-Middle Attacks
  - contents:
    - "7.3.  Impersonation Attacks\n   The use of signed responses in OCSP serves
      to authenticate the\n   identity of OCSP responder.\n   As detailed in [OCSP],
      clients must properly validate the signature\n   of the OCSP response and the
      signature on the OCSP response signer\n   certificate to ensure an authorized
      responder created it.\n"
    title: 7.3.  Impersonation Attacks
  - contents:
    - "7.4.  Denial-of-Service Attacks\n   OCSP responders should take measures to
      prevent or mitigate denial-\n   of-service attacks.  As this profile specifies
      the use of unsigned\n   OCSPRequests, access to the responder may be implicitly
      given to\n   everyone who can send a request to a responder, and thus the ability\n
      \  to mount a denial-of-service attack via a flood of requests may be\n   greater.
      \ For example, a responder could limit the rate of incoming\n   requests from
      a particular IP address if questionable behavior is\n   detected.\n"
    title: 7.4.  Denial-of-Service Attacks
  - contents:
    - "7.5.  Modification of HTTP Headers\n   Values included in HTTP headers, as
      described in Sections 5 and 6,\n   are not cryptographically protected; they
      may be manipulated by an\n   attacker.  Clients SHOULD use these values for
      caching guidance only\n   and ultimately SHOULD rely only on the values present
      in the signed\n   OCSPResponse.  Clients SHOULD NOT rely on cached responses
      beyond the\n   nextUpdate time.\n"
    title: 7.5.  Modification of HTTP Headers
  - contents:
    - "7.6.  Request Authentication and Authorization\n   The suggested use of unsigned
      requests in this environment removes an\n   option that allows the responder
      to determine the authenticity of\n   incoming request.  Thus, access to the
      responder may be implicitly\n   given to everyone who can send a request to
      a responder.\n   Environments where explicit authorization to access the OCSP\n
      \  responder is necessary can utilize other mechanisms to authenticate\n   requestors
      or restrict or meter service.\n"
    title: 7.6.  Request Authentication and Authorization
  title: 7.  Security Considerations
- contents:
  - "8.  Acknowledgements\n   The authors wish to thank Magnus Nystrom of RSA Security,
    Inc.,\n   Jagjeet Sondh of Vodafone Group R&D, and David Engberg of CoreStreet,\n
    \  Ltd. for their contributions to this specification.\n"
  title: 8.  Acknowledgements
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [HTTP]    Fielding, R., Gettys, J., Mogul, J.,
      Frystyk, H., Masinter,\n             L., Leach, P., and T. Berners-Lee, \"Hypertext
      Transfer\n             Protocol -- HTTP/1.1\", RFC 2616, June 1999.\n   [RFC2119]
      Bradner, S., \"Key words for use in RFCs to Indicate\n             Requirement
      Levels\", BCP 14, RFC 2119, March 1997.\n   [OCSP]    Myers, M., Ankney, R.,
      Malpani, A., Galperin, S., and C.\n             Adams, \"X.509 Internet Public
      Key Infrastructure:  Online\n             Certificate Status Protocol - OCSP\",
      RFC 2560, June 1999.\n   [PKIX]    Housley, R., Polk, W., Ford, W., and D. Solo,
      \"Internet\n             Public Key Infrastructure - Certificate and Certificate\n
      \            Revocation List (CRL) Profile\", RFC 3280, April 2002.\n   [TLS]
      \    Dierks, T. and E. Rescorla, \"The Transport Layer Security\n             Protocol
      Version  1.1\", RFC 4346, April 2006.\n   [TLSEXT]  Blake-Wilson, S., Nystrom,
      M., Hopwood, D., Mikkelsen, J.,\n             and T. Wright, \"Transport Layer
      Security (TLS) Extensions\",\n             RFC 4366, April 2006.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [OCSPMP]  \"OCSP Mobile Profile V1.0\", Open
      Mobile Alliance,\n             www.openmobilealliance.org.\n   [RFC3143] Cooper,
      I. and J. Dilley, \"Known HTTP Proxy/Caching\n             Problems\", RFC 3143,
      June 2001.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - 'Appendix A.  Example OCSP Messages

    '
  - contents:
    - "A.1.  OCSP Request\n   SEQUENCE {\n      SEQUENCE {\n        SEQUENCE {\n          SEQUENCE
      {\n            SEQUENCE {\n              SEQUENCE {\n                OBJECT
      IDENTIFIER sha1 (1 3 14 3 2 26)\n                NULL\n                }\n              OCTET
      STRING\n                C0 FE 02 78 FC 99 18 88 91 B3 F2 12 E9 C7 E1 B2\n                1A
      B7 BF C0\n              OCTET STRING\n                0D FC 1D F0 A9 E0 F0 1C
      E7 F2 B2 13 17 7E 6F 8D\n                15 7C D4 F6\n              INTEGER\n
      \               09 34 23 72 E2 3A EF 46 7C 83 2D 07 F8 DC 22 BA\n              }\n
      \           }\n          }\n        }\n      }\n"
    title: A.1.  OCSP Request
  - contents:
    - "A.2.  OCSP Response\n   SEQUENCE {\n      ENUMERATED 0\n      [0] {\n        SEQUENCE
      {\n          OBJECT IDENTIFIER ocspBasic (1 3 6 1 5 5 7 48 1 1)\n          OCTET
      STRING, encapsulates {\n            SEQUENCE {\n              SEQUENCE {\n                [0]
      {\n                  INTEGER 0\n                  }\n                [1] {\n
      \                 SEQUENCE {\n                    SET {\n                      SEQUENCE
      {\n                        OBJECT IDENTIFIER organizationName (2 5 4 10)\n                        PrintableString
      'Example Trust Network'\n                        }\n                      }\n
      \                   SET {\n                      SEQUENCE {\n                        OBJECT
      IDENTIFIER\n                          organizationalUnitName (2 5 4 11)\n                        PrintableString
      'Example, Inc.'\n                        }\n                      }\n                    SET
      {\n                      SEQUENCE {\n                        OBJECT IDENTIFIER\n
      \                         organizationalUnitName (2 5 4 11)\n                        PrintableString\n
      \                     'Example OCSP Responder'\n                        }\n
      \                     }\n                    }\n                  }\n                GeneralizedTime
      07/11/2005 23:52:44 GMT\n                SEQUENCE {\n                  SEQUENCE
      {\n                    SEQUENCE {\n                      SEQUENCE {\n                        OBJECT
      IDENTIFIER sha1 (1 3 14 3 2 26)\n                        NULL\n                        }\n
      \                     OCTET STRING\n                      C0 FE 02 78 FC 99
      18 88 91 B3 F2 12 E9 C7 E1 B2\n                      1A B7 BF C0\n                      OCTET
      STRING\n                      0D FC 1D F0 A9 E0 F0 1C E7 F2 B2 13 17 7E 6F 8D\n
      \                     15 7C D4 F6\n                      INTEGER\n                      09
      34 23 72 E2 3A EF 46 7C 83 2D 07 F8 DC 22 BA\n                      }\n                    [0]\n
      \                     Error: Object has zero length.\n                      GeneralizedTime
      07/11/2005 23:52:44 GMT\n                    [0] {\n                      GeneralizedTime
      14/11/2005 23:52:44 GMT\n                      }\n                    }\n                  }\n
      \               }\n              SEQUENCE {\n                OBJECT IDENTIFIER\n
      \                 sha1withRSAEncryption (1 2 840 113549 1 1 5)\n                NULL\n
      \               }\n              BIT STRING\n                0E 9F F0 52 B1
      A7 42 B8 6E C1 35 E1 0E D5 A9 E2\n                F5 C5 3C 16 B1 A3 A7 A2 03
      8A 2B 4D 2C F1 B4 98\n                8E 19 DB BA 1E 1E 72 FF 32 F4 44 E0 B2
      77 1C D7\n                3C 9E 78 F3 D1 82 68 86 63 12 7F A4 6F F0 4D 84\n
      \               EA F8 E2 F7 5D E3 48 44 57 28 80 C7 57 3C FE E1\n                42
      0E 5E 17 FC 60 D8 05 D9 EF E2 53 E7 AB 7F 3A\n                A8 84 AA 5E 46
      5B E7 B8 1F C6 B1 35 AD FF D1 CC\n                BA 58 7D E8 29 60 79 F7 41
      02 EA E0 82 0E A6 30\n              [0] {\n                SEQUENCE {\n                  SEQUENCE
      {\n                    SEQUENCE {\n                      [0] {\n                        INTEGER
      2\n                        }\n                      INTEGER\n                      49
      4A 02 37 1B 1E 70 67 41 6C 9F 06 2F D8 FE DA\n                      SEQUENCE
      {\n                        OBJECT IDENTIFIER\n                          sha1withRSAEncryption
      (1 2 840 113549 1 1 5)\n                        NULL\n                        }\n
      \                     SEQUENCE {\n                        SET {\n                          SEQUENCE
      {\n                            OBJECT IDENTIFIER\n                              organizationName
      (2 5 4 10)\n                            PrintableString 'Example Trust Network'\n
      \                           }\n                          }\n                        SET
      {\n                          SEQUENCE {\n                            OBJECT
      IDENTIFIER\n                              organizationalUnitName (2 5 4 11)\n
      \                           PrintableString 'Example, Inc.'\n                            }\n
      \                         }\n                        SET {\n                          SEQUENCE
      {\n                            OBJECT IDENTIFIER\n                              organizationalUnitName
      (2 5 4 11)\n                            PrintableString\n                               'Example
      CA'\n                            }\n                          }\n                        }\n
      \                     SEQUENCE {\n                        UTCTime 08/10/2005
      00:00:00 GMT\n                        UTCTime 06/01/2006 23:59:59 GMT\n                        }\n
      \                     SEQUENCE {\n                        SET {\n                          SEQUENCE
      {\n                            OBJECT IDENTIFIER\n                              organizationName
      (2 5 4 10)\n                            PrintableString 'Example Trust Network'\n
      \                           }\n                          }\n                        SET
      {\n                          SEQUENCE {\n                            OBJECT
      IDENTIFIER\n                              organizationalUnitName (2 5 4 11)\n
      \                           PrintableString 'Example, Inc.'\n                            }\n
      \                         }\n                        SET {\n                          SEQUENCE
      {\n                            OBJECT IDENTIFIER\n                              organizationalUnitName
      (2 5 4 11)\n                            PrintableString\n                              'Example
      OCSP Responder'\n                            }\n                          }\n
      \                       }\n                      SEQUENCE {\n                        SEQUENCE
      {\n                          OBJECT IDENTIFIER\n                            rsaEncryption
      (1 2 840 113549 1 1 1)\n                          NULL\n                          }\n
      \                       BIT STRING, encapsulates {\n                          SEQUENCE
      {\n                            INTEGER\n                      00 AF C9 7A F5
      09 CA D1 08 8C 82 6D AC D9 63 4D\n                      D2 64 17 79 CB 1E 1C
      1C 0C 6E 28 56 B5 16 4A 4A\n                      00 1A C1 B0 74 D7 B4 55 9D
      2A 99 1F 0E 4A E3 5F\n                      81 AF 8D 07 23 C3 30 28 61 3F B0
      C8 1D 4E A8 9C\n                      A6 32 B4 D2 63 EC F7 C1 55 7A 73 2A 51
      99 00 D5\n                      0F B2 4E 11 5B 83 55 83 4C 0E DD 12 0C BD 7E
      41\n                      04 3F 5F D9 2A 65 88 3C 2A BA 20 76 1D 1F 59 3E\n
      \                     D1 85 F7 4B E2 81 50 9C 78 96 1B 37 73 12 1A D2\n                              [
      Another 1 bytes skipped ]\n                            INTEGER 65537\n                            }\n
      \                         }\n                        }\n                      [3]
      {\n                        SEQUENCE {\n                          SEQUENCE {\n
      \                           OBJECT IDENTIFIER\n                              basicConstraints
      (2 5 29 19)\n                            OCTET STRING, encapsulates {\n                              SEQUENCE
      {}\n                              }\n                            }\n                          SEQUENCE
      {\n                            OBJECT IDENTIFIER extKeyUsage (2 5 29 37)\n                            OCTET
      STRING, encapsulates {\n                              SEQUENCE {\n                                OBJECT
      IDENTIFIER\n                                  ocspSigning (1 3 6 1 5 5 7 3 9)\n
      \                               }\n                              }\n                            }\n
      \                         SEQUENCE {\n                            OBJECT IDENTIFIER
      keyUsage (2 5 29 15)\n                            OCTET STRING, encapsulates
      {\n                              BIT STRING 7 unused bits\n                                '1'B
      (bit 0)\n                              }\n                            }\n                          SEQUENCE
      {\n                            OBJECT IDENTIFIER\n                              ocspNoCheck
      (1 3 6 1 5 5 7 48 1 5)\n                            OCTET STRING, encapsulates
      {\n                              NULL\n                              }\n                            }\n
      \                         }\n                        }\n                      }\n
      \                   SEQUENCE {\n                      OBJECT IDENTIFIER\n                        sha1withRSAEncryption
      (1 2 840 113549 1 1 5)\n                      NULL\n                      }\n
      \                   BIT STRING\n                      3A 68 5F 6A F8 87 36 4A
      E2 22 46 5C C8 F5 0E CE\n                      1A FA F2 25 E1 51 AB 37 BE D4
      10 C8 15 93 39 73\n                      C8 59 0F F0 39 67 29 C2 60 20 F7 3F
      FE A0 37 AB\n                      80 0B F9 3D 38 D4 48 67 E4 FA FD 4E 12 BF
      55 29\n                      14 E9 CC CB DD 13 82 E9 C4 4D D3 85 33 C1 35 E5\n
      \                     8F 38 01 A7 F7 FD EB CD DE F2 F7 85 86 AE E3 1B\n                      9C
      FD 1D 07 E5 28 F2 A0 5E AC BF 9E 0B 34 A1 B4\n                      3A A9 0E
      C5 8A 34 3F 65 D3 10 63 A4 5E 21 71 5A\n                    }\n                  }\n
      \               }\n              }\n            }\n          }\n        }\n
      \     }\n"
    title: A.2.  OCSP Response
  title: Appendix A.  Example OCSP Messages
- contents:
  - "Authors' Addresses\n   Alex Deacon\n   VeriSign, Inc.\n   487 E. Middlefield
    Road\n   Mountain View, CA  94043\n   USA\n   Phone:  1-650-426-3478\n   EMail:
    \ alex@verisign.com\n   Ryan Hurst\n   Microsoft\n   One Microsoft Way\n   Redmond,
    WA  98052\n   USA\n   Phone:  1-425-707-8979\n   EMail:  rmh@microsoft.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
