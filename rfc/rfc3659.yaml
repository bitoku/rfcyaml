- contents:
  - '                           Extensions to FTP

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document specifies new FTP commands to obtain listings of remote\n
    \  directories in a defined format, and to permit restarts of\n   interrupted
    data transfers in STREAM mode.  It allows character sets\n   other than US-ASCII,
    and also defines an optional virtual file\n   storage structure.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  3\n   2.  Document Conventions . . . . . . . . . . . . . . . . .
    . . . .  3\n       2.1.  Basic Tokens . . . . . . . . . . . . . . . . . . . .
    . .  4\n       2.2.  Pathnames. . . . . . . . . . . . . . . . . . . . . . . .
    \ 4\n       2.3.  Times. . . . . . . . . . . . . . . . . . . . . . . . . .  6\n
    \      2.4.  Server Replies . . . . . . . . . . . . . . . . . . . . .  7\n       2.5.
    \ Interpreting Examples. . . . . . . . . . . . . . . . . .  8\n   3.  File Modification
    Time (MDTM). . . . . . . . . . . . . . . . .  8\n       3.1.  Syntax . . . . .
    . . . . . . . . . . . . . . . . . . . .  9\n       3.2.  Error Responses. . .
    . . . . . . . . . . . . . . . . . .  9\n       3.3.  FEAT Response for MDTM .
    . . . . . . . . . . . . . . . . 10\n       3.4.  MDTM Examples. . . . . . . .
    . . . . . . . . . . . . . . 10\n   4.  File SIZE. . . . . . . . . . . . . . .
    . . . . . . . . . . . . 11\n       4.1.  Syntax . . . . . . . . . . . . . . .
    . . . . . . . . . . 11\n       4.2.  Error Responses. . . . . . . . . . . . .
    . . . . . . . . 12\n       4.3.  FEAT Response for SIZE . . . . . . . . . . .
    . . . . . . 12\n       4.4.  Size Examples. . . . . . . . . . . . . . . . . .
    . . . . 12\n   5.  Restart of Interrupted Transfer (REST) . . . . . . . . . .
    . . 13\n       5.1.  Restarting in STREAM Mode. . . . . . . . . . . . . . . .
    14\n       5.2.  Error Recovery and Restart . . . . . . . . . . . . . . . 14\n
    \      5.3.  Syntax . . . . . . . . . . . . . . . . . . . . . . . . . 15\n       5.4.
    \ FEAT Response for REST . . . . . . . . . . . . . . . . . 16\n       5.5.  REST
    Example . . . . . . . . . . . . . . . . . . . . . . 17\n   6.  A Trivial Virtual
    File Store (TVFS). . . . . . . . . . . . . . 17\n       6.1.  TVFS File Names.
    . . . . . . . . . . . . . . . . . . . . 18\n       6.2.  TVFS Pathnames . . .
    . . . . . . . . . . . . . . . . . . 18\n       6.3.  FEAT Response for TVFS .
    . . . . . . . . . . . . . . . . 20\n       6.4.  OPTS for TVFS. . . . . . . .
    . . . . . . . . . . . . . . 21\n       6.5.  TVFS Examples. . . . . . . . . .
    . . . . . . . . . . . . 21\n   7.  Listings for Machine Processing (MLST and MLSD).
    . . . . . . . 23\n       7.1.  Format of MLSx Requests. . . . . . . . . . . .
    . . . . . 23\n       7.2.  Format of MLSx Response. . . . . . . . . . . . . .
    . . . 24\n       7.3.  File Name Encoding . . . . . . . . . . . . . . . . . .
    . 26\n       7.4.  Format of Facts. . . . . . . . . . . . . . . . . . . . . 28\n
    \      7.5.  Standard Facts . . . . . . . . . . . . . . . . . . . . . 28\n       7.6.
    \ System Dependent and Local Facts . . . . . . . . . . . . 36\n       7.7.  MLSx
    Examples. . . . . . . . . . . . . . . . . . . . . . 37\n       7.8.  FEAT Response
    for MLSx . . . . . . . . . . . . . . . . . 49\n       7.9.  OPTS Parameters for
    MLST . . . . . . . . . . . . . . . . 51\n   8.  Impact on Other FTP Commands .
    . . . . . . . . . . . . . . . . 54\n   9.  Character Sets and Internationalization.
    . . . . . . . . . . . 55\n   10. IANA Considerations. . . . . . . . . . . . .
    . . . . . . . . . 55\n       10.1. The OS Specific Fact Registry. . . . . . .
    . . . . . . . 56\n       10.2. The OS Specific Filetype Registry. . . . . . .
    . . . . . 56\n   11. Security Considerations. . . . . . . . . . . . . . . . .
    . . . 57\n   12. Normative References . . . . . . . . . . . . . . . . . . . .
    . 58\n   Acknowledgments. . . . . . . . . . . . . . . . . . . . . . . . . . 59\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document updates the File Transfer Protocol (FTP) [3].
    \ Four new\n   commands are added: \"SIZE\", \"MDTM\", \"MLST\", and \"MLSD\".
    \ The existing\n   command \"REST\" is modified.  Of those, the \"SIZE\" and \"MDTM\"\n
    \  commands, and the modifications to \"REST\" have been in wide use for\n   many
    years.  The others are new.\n   These commands allow a client to restart an interrupted
    transfer in\n   transfer modes not previously supported in any documented way,
    and to\n   obtain a directory listing in a machine friendly, predictable,\n   format.\n
    \  An optional structure for the server's file store (NVFS) is also\n   defined,
    allowing servers that support such a structure to convey\n   that information
    to clients in a standard way, thus allowing clients\n   more certainty in constructing
    and interpreting pathnames.\n"
  title: 1.  Introduction
- contents:
  - "2.  Document Conventions\n   This document makes use of the document conventions
    defined in BCP\n   14, RFC 2119 [4].  That provides the interpretation of capitalized\n
    \  imperative words like MUST, SHOULD, etc.\n   This document also uses notation
    defined in STD 9, RFC 959 [3].  In\n   particular, the terms \"reply\", \"user\",
    \"NVFS\" (Network Virtual File\n   System), \"file\", \"pathname\", \"FTP commands\",
    \"DTP\" (data transfer\n   process), \"user-FTP process\", \"user-PI\" (user protocol
    interpreter),\n   \"user-DTP\", \"server-FTP process\", \"server-PI\", \"server-DTP\",
    \"mode\",\n   \"type\", \"NVT\" (Network Virtual Terminal), \"control connection\",
    \"data\n   connection\", and \"ASCII\", are all used here as defined there.\n
    \  Syntax required is defined using the Augmented BNF defined in [5].\n   Some
    general ABNF definitions that are required throughout the\n   document will be
    defined later in this section.  At first reading, it\n   may be wise to simply
    recall that these definitions exist here, and\n   skip to the next section.\n"
  title: 2.  Document Conventions
- contents:
  - "2.1.  Basic Tokens\n   This document imports the core ABNF definitions given
    in Appendix A\n   of [5].  There definitions will be found for basic ABNF elements
    like\n   ALPHA, DIGIT, SP, etc.  The following terms are added for use in this\n
    \  document.\n      TCHAR          = VCHAR / SP / HTAB    ; visible plus white
    space\n      RCHAR          = ALPHA / DIGIT / \",\" / \".\" / \":\" / \"!\" /\n
    \                      \"@\" / \"#\" / \"$\" / \"%\" / \"^\" /\n                       \"&\"
    / \"(\" / \")\" / \"-\" / \"_\" /\n                       \"+\" / \"?\" / \"/\"
    / \"\\\" / \"'\" /\n                       DQUOTE   ; <\"> -- double quote character
    (%x22)\n      SCHAR          = RCHAR / \"=\" ;\n   The VCHAR (from [5]), RCHAR,
    SCHAR, and TCHAR types give basic\n   character types from varying sub-sets of
    the ASCII character set for\n   use in various commands and responses.\n      token
    \         = 1*RCHAR\n   A \"token\" is a string whose precise meaning depends
    upon the context\n   in which it is used.  In some cases it will be a value from
    a set of\n   possible values maintained elsewhere.  In others it might be a string\n
    \  invented by one party to an FTP conversation from whatever sources it\n   finds
    relevant.\n   Note that in ABNF, string literals are case insensitive.  That\n
    \  convention is preserved in this document, and implies that FTP\n   commands
    added by this specification have names that can be\n   represented in any case.
    \ That is, \"MDTM\" is the same as \"mdtm\",\n   \"Mdtm\" and \"MdTm\" etc.  However
    note that ALPHA, in particular, is\n   case sensitive.  That implies that a \"token\"
    is a case sensitive\n   value.  That implication is correct, except where explicitly
    stated\n   to the contrary in this document, or in some other specification that\n
    \  defines the values this document specifies be used in a particular\n   context.\n"
  title: 2.1.  Basic Tokens
- contents:
  - "2.2.  Pathnames\n   Various FTP commands take pathnames as arguments, or return
    pathnames\n   in responses.  When the MLST command is supported, as indicated
    in\n   the response to the FEAT command [6], pathnames are to be transferred\n
    \  in one of the following two formats.\n      pathname       = utf-8-name / raw\n
    \     utf-8-name     = <a UTF-8 encoded Unicode string>\n      raw            =
    <any string that is not a valid UTF-8 encoding>\n   Which format is used is at
    the option of the user-PI or server-PI\n   sending the pathname.  UTF-8 encodings
    [2] contain enough internal\n   structure that it is always, in practice, possible
    to determine\n   whether a UTF-8 or raw encoding has been used, in those cases
    where\n   it matters.  While it is useful for the user-PI to be able to\n   correctly
    display a pathname received from the server-PI to the user,\n   it is far more
    important for the user-PI to be able to retain and\n   retransmit the identical
    pathname when required.  Implementations are\n   advised against converting a
    UTF-8 pathname to a local charset that\n   isn't capable of representing the full
    Unicode character repertoire,\n   and then attempting to invert the charset translation
    later.  Note\n   that ASCII is a subset of UTF-8.  See also [1].\n   Unless otherwise
    specified, the pathname is terminated by the CRLF\n   that terminates the FTP
    command, or by the CRLF that ends a reply.\n   Any trailing spaces preceding that
    CRLF form part of the name.\n   Exactly one space will precede the pathname and
    serve as a separator\n   from the preceding syntax element.  Any additional spaces
    form part\n   of the pathname.  See [7] for a fuller explanation of the character\n
    \  encoding issues.  All implementations supporting MLST MUST support\n   [7].\n
    \  Note: for pathnames transferred over a data connection, there is no\n   way
    to represent a pathname containing the characters CR and LF in\n   sequence, and
    distinguish that from the end of line indication.\n   Hence, pathnames containing
    the CRLF pair of characters cannot be\n   transmitted over a data connection.
    \ Data connections only contain\n   file names transmitted from server-FTP to
    user-FTP as the result of\n   one of the directory listing commands.  Files with
    names containing\n   the CRLF sequence must either have that sequence converted
    to some\n   other form, such that the other form can be recognised and be\n   correctly
    converted back to CRLF, or be omitted from the listing.\n   Implementations should
    also beware that the FTP control connection\n   uses Telnet NVT conventions [8],
    and that the Telnet IAC character,\n   if part of a pathname sent over the control
    connection, MUST be\n   correctly escaped as defined by the Telnet protocol.\n
    \  NVT also distinguishes between CR, LF, and the end of line CRLF, and\n   so
    would permit pathnames containing the pair of characters CR and LF\n   to be correctly
    transmitted.  However, because such a sequence cannot\n   be transmitted over
    a data connection (as part of the result of a\n   LIST, NLST, or MLSD command),
    such pathnames are best avoided.\n   Implementors should also be aware that, although
    Telnet NVT\n   conventions are used over the control connections, Telnet option\n
    \  negotiation MUST NOT be attempted.  See section 4.1.2.12 of [9].\n"
  title: 2.2.  Pathnames
- contents:
  - "2.2.1.  Pathname Syntax\n   Except where TVFS is supported (see section 6), this
    specification\n   imposes no syntax upon pathnames.  Nor does it restrict the
    character\n   set from which pathnames are created.  This does not imply that
    the\n   NVFS is required to make sense of all possible pathnames.  Server-PIs\n
    \  may restrict the syntax of valid pathnames in their NVFS in any\n   manner
    appropriate to their implementation or underlying file system.\n   Similarly,
    a server-PI may parse the pathname and assign meaning to\n   the components detected.\n"
  title: 2.2.1.  Pathname Syntax
- contents:
  - "2.2.2.  Wildcarding\n   For the commands defined in this specification, all pathnames
    are to\n   be treated literally.  That is, for a pathname given as a parameter\n
    \  to a command, the file whose name is identical to the pathname given\n   is
    implied.  No characters from the pathname may be treated as\n   special or \"magic\",
    thus no pattern matching (other than for exact\n   equality) between the pathname
    given and the files present in the\n   NVFS of the server-FTP is permitted.\n
    \  Clients that desire some form of pattern matching functionality must\n   obtain
    a listing of the relevant directory, or directories, and\n   implement their own
    file name selection procedures.\n"
  title: 2.2.2.  Wildcarding
- contents:
  - "2.3.  Times\n   The syntax of a time value is:\n      time-val       = 14DIGIT
    [ \".\" 1*DIGIT ]\n   The leading, mandatory, fourteen digits are to be interpreted
    as, in\n   order from the leftmost, four digits giving the year, with a range
    of\n   1000--9999, two digits giving the month of the year, with a range of\n
    \  01--12, two digits giving the day of the month, with a range of\n   01--31,
    two digits giving the hour of the day, with a range of\n   00--23, two digits
    giving minutes past the hour, with a range of\n   00--59, and finally, two digits
    giving seconds past the minute, with\n   a range of 00--60 (with 60 being used
    only at a leap second).  Years\n   in the tenth century, and earlier, cannot be
    expressed.  This is not\n   considered a serious defect of the protocol.\n   The
    optional digits, which are preceded by a period, give decimal\n   fractions of
    a second.  These may be given to whatever precision is\n   appropriate to the
    circumstance, however implementations MUST NOT add\n   precision to time-vals
    where that precision does not exist in the\n   underlying value being transmitted.\n
    \  Symbolically, a time-val may be viewed as\n      YYYYMMDDHHMMSS.sss\n   The
    \".\" and subsequent digits (\"sss\") are optional.  However the \".\"\n   MUST
    NOT appear unless at least one following digit also appears.\n   Time values are
    always represented in UTC (GMT), and in the Gregorian\n   calendar regardless
    of what calendar may have been in use at the date\n   and time indicated at the
    location of the server-PI.\n   The technical differences among GMT, TAI, UTC,
    UT1, UT2, etc., are\n   not considered here.  A server-FTP process should always
    use the same\n   time reference, so the times it returns will be consistent.  Clients\n
    \  are not expected to be time synchronized with the server, so the\n   possible
    difference in times that might be reported by the different\n   time standards
    is not considered important.\n"
  title: 2.3.  Times
- contents:
  - "2.4.  Server Replies\n   Section 4.2 of [3] defines the format and meaning of
    replies by the\n   server-PI to FTP commands from the user-PI.  Those reply conventions\n
    \  are used here without change.\n      error-response = error-code SP *TCHAR
    CRLF\n      error-code     = (\"4\" / \"5\") 2DIGIT\n   Implementors should note
    that the ABNF syntax used in this document\n   and in other FTP related documents
    (but not used in [3]), sometimes\n   shows replies using the one-line format.
    \ Unless otherwise explicitly\n   stated, that is not intended to imply that multi-line
    responses are\n   not permitted.  Implementors should assume that, unless stated
    to the\n   contrary, any reply to any FTP command (including QUIT) may use the\n
    \  multi-line format described in [3].\n   Throughout this document, replies will
    be identified by the three\n   digit code that is their first element.  Thus the
    term \"500 reply\"\n   means a reply from the server-PI using the three digit
    code \"500\".\n"
  title: 2.4.  Server Replies
- contents:
  - "2.5.  Interpreting Examples\n   In the examples of FTP dialogs presented in this
    document, lines that\n   begin \"C> \" were sent over the control connection from
    the user-PI to\n   the server-PI, lines that begin \"S> \" were sent over the
    control\n   connection from the server-PI to the user-PI, and each sequence of\n
    \  lines that begin \"D> \" was sent from the server-PI to the user-PI\n   over
    a data connection created just to send those lines and closed\n   immediately
    after.  No examples here show data transferred over a\n   data connection from
    the client to the server.  In all cases, the\n   prefixes shown above, including
    the one space, have been added for\n   the purposes of this document, and are
    not a part of the data\n   exchanged between client and server.\n"
  title: 2.5.  Interpreting Examples
- contents:
  - "3.  File Modification Time (MDTM)\n   The FTP command, MODIFICATION TIME (MDTM),
    can be used to determine\n   when a file in the server NVFS was last modified.
    \ This command has\n   existed in many FTP servers for many years, as an adjunct
    to the REST\n   command for STREAM mode, thus is widely available.  However, where\n
    \  supported, the \"modify\" fact that can be provided in the result from\n   the
    new MLST command is recommended as a superior alternative.\n   When attempting
    to restart a RETRieve, the user-FTP can use the MDTM\n   command or the \"modify\"
    fact to check if the modification time of the\n   source file is more recent than
    the modification time of the\n   partially transferred file.  If it is, then most
    likely the source\n   file has changed, and it would be unsafe to restart the
    previously\n   incomplete file transfer.\n   Because the user- and server-FTPs'
    clocks are not necessarily\n   synchronised, user-FTPs intending to use this method
    should usually\n   obtain the modification time of the file from the server before
    the\n   initial RETRieval, and compare that with the modification time before\n
    \  a RESTart.  If they differ, the files may have changed, and RESTart\n   would
    be inadvisable.  Where this is not possible, the user-FTP\n   should make sure
    to allow for possible clock skew when comparing\n   times.\n   When attempting
    to restart a STORe, the User FTP can use the MDTM\n   command to discover the
    modification time of the partially\n   transferred file.  If it is older than
    the modification time of the\n   file that is about to be STORed, then most likely
    the source file has\n   changed, and it would be unsafe to restart the file transfer.\n
    \  Note that using MLST (described below), where available, can provide\n   this
    information and much more, thus giving an even better indication\n   that a file
    has changed and that restarting a transfer would not give\n   valid results.\n
    \  Note that this is applicable to any RESTart attempt, regardless of\n   the
    mode of the file transfer.\n"
  title: 3.  File Modification Time (MDTM)
- contents:
  - "3.1. Syntax\n   The syntax for the MDTM command is:\n      mdtm          = \"MdTm\"
    SP pathname CRLF\n   As with all FTP commands, the \"MDTM\" command label is interpreted
    in\n   a case-insensitive manner.\n   The \"pathname\" specifies an object in
    the NVFS that may be the object\n   of a RETR command.  Attempts to query the
    modification time of files\n   that exist but are unable to be retrieved may generate
    an error-\n   response, or can result in a positive response carrying a time-val\n
    \  with an unspecified value, the choice being made by the server-PI.\n   The
    server-PI will respond to the MDTM command with a 213 reply\n   giving the last
    modification time of the file whose pathname was\n   supplied, or a 550 reply
    if the file does not exist, the modification\n   time is unavailable, or some
    other error has occurred.\n      mdtm-response = \"213\" SP time-val CRLF /\n
    \                     error-response\n   Note that when the 213 response is issued,
    that is, when there is no\n   error, the format MUST be exactly as specified.
    \ Multi-line responses\n   are not permitted.\n"
  title: 3.1. Syntax
- contents:
  - "3.2.  Error Responses\n   Where the command is correctly parsed but the modification
    time is\n   not available, either because the pathname identifies no existing\n
    \  entity or because the information is not available for the entity\n   named,
    then a 550 reply should be sent.  Where the command cannot be\n   correctly parsed,
    a 500 or 501 reply should be sent, as specified in\n   [3].  Various 4xy replies
    are also possible in appropriate\n   circumstances.\n"
  title: 3.2.  Error Responses
- contents:
  - "3.3.  FEAT Response for MDTM\n   When replying to the FEAT command [6], a server-FTP
    process that\n   supports the MDTM command MUST include a line containing the
    single\n   word \"MDTM\".  This MAY be sent in upper or lower case or a mixture
    of\n   both (it is case insensitive), but SHOULD be transmitted in upper\n   case
    only.  That is, the response SHOULD be:\n      C> Feat\n      S> 211- <any descriptive
    text>\n      S>  ...\n      S>  MDTM\n      S>  ...\n      S> 211 End\n   The
    ellipses indicate place holders where other features may be\n   included, but
    are not required.  The one-space indentation of the\n   feature lines is mandatory
    [6].\n"
  title: 3.3.  FEAT Response for MDTM
- contents:
  - "3.4.  MDTM Examples\n   If we assume the existence of three files, A B and C,
    a directory D,\n   two files with names that end with the string \"ile6\", and
    no other\n   files at all, then the MDTM command may behave as indicated.  The\n
    \  \"C>\" lines are commands from user-PI to server-PI, the \"S>\" lines are\n
    \  server-PI replies.\n      C> MDTM A\n      S> 213 19980615100045.014\n      C>
    MDTM B\n      S> 213 19980615100045.014\n      C> MDTM C\n      S> 213 19980705132316\n
    \     C> MDTM D\n      S> 550 D is not retrievable\n      C> MDTM E\n      S>
    550 No file named \"E\"\n      C> mdtm file6\n      S> 213 19990929003355\n      C>
    MdTm 19990929043300 File6\n      S> 213 19991005213102\n      C> MdTm 19990929043300
    file6\n      S> 550 19990929043300 file6: No such file or directory.\n   From
    that we can conclude that both A and B were last modified at the\n   same time
    (to the nearest millisecond), and that C was modified 20\n   days and several
    hours later.\n   The times are in GMT, so file A was modified on the 15th of June,\n
    \  1998, at approximately 11am in London (summer time was then in\n   effect),
    or perhaps at 8pm in Melbourne, Australia, or at 6am in New\n   York.  All of
    those represent the same absolute time, of course.  The\n   location where the
    file was modified, and consequently the local wall\n   clock time at that location,
    is not available.\n   There is no file named \"E\" in the current directory, but
    there are\n   files named both \"file6\" and \"19990929043300 File6\".  The\n
    \  modification times of those files were obtained.  There is no file\n   named
    \"19990929043300 file6\".\n"
  title: 3.4.  MDTM Examples
- contents:
  - "4.  File SIZE\n   The FTP command, SIZE OF FILE (SIZE), is used to obtain the
    transfer\n   size of a file from the server-FTP process.  This is the exact number\n
    \  of octets (8 bit bytes) that would be transmitted over the data\n   connection
    should that file be transmitted.  This value will change\n   depending on the
    current STRUcture, MODE, and TYPE of the data\n   connection or of a data connection
    that would be created were one\n   created now.  Thus, the result of the SIZE
    command is dependent on\n   the currently established STRU, MODE, and TYPE parameters.\n
    \  The SIZE command returns how many octets would be transferred if the\n   file
    were to be transferred using the current transfer structure,\n   mode, and type.
    \ This command is normally used in conjunction with\n   the RESTART (REST) command
    when STORing a file to a remote server in\n   STREAM mode, to determine the restart
    point.  The server-PI might\n   need to read the partially transferred file, do
    any appropriate\n   conversion, and count the number of octets that would be generated\n
    \  when sending the file in order to correctly respond to this command.\n   Estimates
    of the file transfer size MUST NOT be returned; only\n   precise information is
    acceptable.\n"
  title: 4.  File SIZE
- contents:
  - "4.1.  Syntax\n   The syntax of the SIZE command is:\n      size          = \"Size\"
    SP pathname CRLF\n   The server-PI will respond to the SIZE command with a 213
    reply\n   giving the transfer size of the file whose pathname was supplied, or\n
    \  an error response if the file does not exist, the size is\n   unavailable,
    or some other error has occurred.  The value returned is\n   in a format suitable
    for use with the RESTART (REST) command for mode\n   STREAM, provided the transfer
    mode and type are not altered.\n      size-response = \"213\" SP 1*DIGIT CRLF
    /\n                      error-response\n   Note that when the 213 response is
    issued, that is, when there is no\n   error, the format MUST be exactly as specified.
    \ Multi-line responses\n   are not permitted.\n"
  title: 4.1.  Syntax
- contents:
  - "4.2.  Error Responses\n   Where the command is correctly parsed but the size
    is not available,\n   perhaps because the pathname identifies no existing entity
    or because\n   the entity named cannot be transferred in the current MODE and
    TYPE\n   (or at all), then a 550 reply should be sent.  Where the command\n   cannot
    be correctly parsed, a 500 or 501 reply should be sent, as\n   specified in [3].
    \ The presence of the 550 error response to a SIZE\n   command MUST NOT be taken
    by the client as an indication that the\n   file cannot be transferred in the
    current MODE and TYPE.  A server\n   may generate this error for other reasons
    -- for instance if the\n   processing overhead is considered too great.  Various
    4xy replies are\n   also possible in appropriate circumstances.\n"
  title: 4.2.  Error Responses
- contents:
  - "4.3.  FEAT Response for SIZE\n   When replying to the FEAT command [6], a server-FTP
    process that\n   supports the SIZE command MUST include a line containing the
    single\n   word \"SIZE\".  This word is case insensitive, and MAY be sent in any\n
    \  mixture of upper or lower case, however it SHOULD be sent in upper\n   case.
    \ That is, the response SHOULD be:\n      C> FEAT\n      S> 211- <any descriptive
    text>\n      S>  ...\n      S>  SIZE\n      S>  ...\n      S> 211 END\n   The
    ellipses indicate place holders where other features may be\n   included, and
    are not required.  The one-space indentation of the\n   feature lines is mandatory
    [6].\n"
  title: 4.3.  FEAT Response for SIZE
- contents:
  - "4.4.  Size Examples\n   Consider a text file \"Example\" stored on a Unix(TM)
    server where each\n   end of line is represented by a single octet.  Assume the
    file\n   contains 112 lines, and 1830 octets total.  Then the SIZE command\n   would
    produce:\n      C> TYPE I\n      S> 200 Type set to I.\n      C> size Example\n
    \     S> 213 1830\n      C> TYPE A\n      S> 200 Type set to A.\n      C> Size
    Example\n      S> 213 1942\n   Notice that with TYPE=A the SIZE command reports
    an extra 112 octets.\n   Those are the extra octets that need to be inserted,
    one at the end\n   of each line, to provide correct end-of-line semantics for
    a transfer\n   using TYPE=A.  Other systems might need to make other changes to
    the\n   transfer format of files when converting between TYPEs and MODEs.\n   The
    SIZE command takes all of that into account.\n   Since calculating the size of
    a file with this degree of precision\n   may take considerable effort on the part
    of the server-PI, user-PIs\n   should not used this command unless this precision
    is essential (such\n   as when about to restart an interrupted transfer).  For
    other uses,\n   the \"Size\" fact of the MLST command (see section 7.5.7) ought
    be\n   requested.\n"
  title: 4.4.  Size Examples
- contents:
  - "5.  Restart of Interrupted Transfer (REST)\n   To avoid having to resend the
    entire file if the file is only\n   partially transferred, both sides need some
    way to agree on where in\n   the data stream to restart the data transfer.\n   The
    FTP specification [3] includes three modes of data transfer,\n   STREAM, Block,
    and Compressed.  In Block and Compressed modes, the\n   data stream that is transferred
    over the data connection is\n   formatted, allowing the embedding of restart markers
    into the stream.\n   The sending DTP can include a restart marker with whatever\n
    \  information it needs to be able to restart a file transfer at that\n   point.
    \ The receiving DTP can keep a list of these restart markers,\n   and correlate
    them with how the file is being saved.  To restart the\n   file transfer, the
    receiver just sends back that last restart marker,\n   and both sides know how
    to resume the data transfer.  Note that there\n   are some flaws in the description
    of the restart mechanism in STD 9,\n   RFC 959 [3].  See section 4.1.3.4 of RFC
    1123 [9] for the\n   corrections.\n"
  title: 5.  Restart of Interrupted Transfer (REST)
- contents:
  - "5.1.  Restarting in STREAM Mode\n   In STREAM mode, the data connection contains
    just a stream of\n   unformatted octets of data.  Explicit restart markers thus
    cannot be\n   inserted into the data stream, they would be indistinguishable from\n
    \  data.  For this reason, the FTP specification [3] did not provide the\n   ability
    to do restarts in stream mode.  However, there is not really\n   a need to have
    explicit restart markers in this case, as restart\n   markers can be implied by
    the octet offset into the data stream.\n   Because the data stream defines the
    file in STREAM mode, a different\n   data stream would represent a different file.
    \ Thus, an offset will\n   always represent the same position within a file.  On
    the other hand,\n   in other modes than STREAM, the same file can be transferred
    using\n   quite different octet sequences and yet be reconstructed into the one\n
    \  identical file.  Thus an offset into the data stream in transfer\n   modes
    other than STREAM would not give an unambiguous restart point.\n   If the data
    representation TYPE is IMAGE and the STRUcture is File,\n   for many systems the
    file will be stored exactly in the same format\n   as it is sent across the data
    connection.  It is then usually very\n   easy for the receiver to determine how
    much data was previously\n   received, and notify the sender of the offset where
    the transfer\n   should be restarted.  In other representation types and structures\n
    \  more effort will be required, but it remains always possible to\n   determine
    the offset with finite, but perhaps non-negligible, effort.\n   In the worst case,
    an FTP process may need to open a data connection\n   to itself, set the appropriate
    transfer type and structure, and\n   actually transmit the file, counting the
    transmitted octets.\n   If the user-FTP process is intending to restart a retrieve,
    it will\n   directly calculate the restart marker and send that information in\n
    \  the RESTart command.  However, if the user-FTP process is intending\n   to
    restart sending the file, it needs to be able to determine how\n   much data was
    previously sent, and correctly received and saved.  A\n   new FTP command is needed
    to get this information.  This is the\n   purpose of the SIZE command, as documented
    in section 4.\n"
  title: 5.1.  Restarting in STREAM Mode
- contents:
  - "5.2.  Error Recovery and Restart\n   STREAM mode transfers with FILE STRUcture
    may be restarted even\n   though no restart marker has been transferred in addition
    to the data\n   itself.  This is done by using the SIZE command, if needed, in\n
    \  combination with the RESTART (REST) command, and one of the standard\n   file
    transfer commands.\n   When using TYPE ASCII or IMAGE, the SIZE command will return
    the\n   number of octets that would actually be transferred if the file were\n
    \  to be sent between the two systems, i.e., with type IMAGE, the SIZE\n   normally
    would be the number of octets in the file.  With type ASCII,\n   the SIZE would
    be the number of octets in the file including any\n   modifications required to
    satisfy the TYPE ASCII CR-LF end-of-line\n   convention.\n"
  title: 5.2.  Error Recovery and Restart
- contents:
  - "5.3.  Syntax\n   The syntax for the REST command when the current transfer mode
    is\n   STREAM is:\n      rest          = \"Rest\" SP 1*DIGIT CRLF\n   The numeric
    value gives the number of octets of the immediately-\n   following transfer to
    not actually send, effectively causing the\n   transmission to be restarted at
    a later point.  A value of zero\n   effectively disables restart, causing the
    entire file to be\n   transmitted.  The server-PI will respond to the REST command
    with a\n   350 reply, indicating that the REST parameter has been saved, and\n
    \  that another command, which should be either RETR or STOR, should\n   then
    follow to complete the restart.\n      rest-response = \"350\" SP *TCHAR CRLF
    /\n                      error-response\n   Server-FTP processes may permit transfer
    commands other than RETR and\n   STOR, such as APPE and STOU, to complete a restart;
    however, this is\n   not recommended.  STOU (store unique) is undefined in this
    usage, as\n   storing the remainder of a file into a unique file name is rarely\n
    \  going to be useful.  If APPE (append) is permitted, it MUST act\n   identically
    to STOR when a restart marker has been set.  That is, in\n   both cases, octets
    from the data connection are placed into the file\n   at the location indicated
    by the restart marker value.\n   The REST command is intended to complete a failed
    transfer.  Use with\n   RETR is comparatively well defined in all cases, as the
    client bears\n   the responsibility of merging the retrieved data with the partially\n
    \  retrieved file.  It may choose to use the data obtained other than to\n   complete
    an earlier transfer, or to re-retrieve data that had been\n   retrieved before.
    \ With STOR, however, the server must insert the\n   data into the file named.
    \ The results are undefined if a client uses\n   REST to do other than restart
    to complete a transfer of a file that\n   had previously failed to completely
    transfer.  In particular, if the\n   restart marker set with a REST command is
    not at the end of the data\n   currently stored at the server, as reported by
    the server, or if\n   insufficient data are provided in a STOR that follows a
    REST to\n   extend the destination file to at least its previous size, then the\n
    \  effects are undefined.\n   The REST command must be the last command issued
    before the data\n   transfer command that is to cause a restarted, rather than
    a\n   complete, file transfer.  The effect of issuing a REST command at any\n
    \  other time is undefined.  The server-PI may react to a badly\n   positioned
    REST command by issuing an error response to the following\n   command, not being
    a restartable data transfer command, or it may\n   save the restart value and
    apply it to the next data transfer\n   command, or it may silently ignore the
    inappropriate restart attempt.\n   Because of this, a user-PI that has issued
    a REST command, but that\n   has not successfully transmitted the following data
    transfer command\n   for any reason, should send another REST command before the
    next data\n   transfer command.  If that transfer is not to be restarted, then\n
    \  \"REST 0\" should be issued.\n   An error response will follow a REST command
    only when the server\n   does not implement the command, or when the restart marker
    value is\n   syntactically invalid for the current transfer mode (e.g., in STREAM\n
    \  mode, something other than one or more digits appears in the\n   parameter
    to the REST command).  Any other errors, including such\n   problems as restart
    marker out of range, should be reported when the\n   following transfer command
    is issued.  Such errors will cause that\n   transfer request to be rejected with
    an error indicating the invalid\n   restart attempt.\n"
  title: 5.3.  Syntax
- contents:
  - "5.4.  FEAT Response for REST\n   Where a server-FTP process supports RESTart
    in STREAM mode, as\n   specified here, it MUST include, in the response to the
    FEAT command\n   [6], a line containing exactly the string \"REST STREAM\".  This
    string\n   is not case sensitive, but it SHOULD be transmitted in upper case.\n
    \  Where REST is not supported at all or supported only in block or\n   compressed
    modes, the REST line MUST NOT be included in the FEAT\n   response.  Where required,
    the response SHOULD be:\n      C> feat\n      S> 211- <any descriptive text>\n
    \     S>  ...\n      S>  REST STREAM\n      S>  ...\n      S> 211 end\n   The
    ellipses indicate place holders where other features may be\n   included, and
    are not required.  The one-space indentation of the\n   feature lines is mandatory
    [6].\n"
  title: 5.4.  FEAT Response for REST
- contents:
  - "5.5.  REST Example\n   Assume that the transfer of a largish file has previously
    been\n   interrupted after 802816 octets had been received, that the previous\n
    \  transfer was with TYPE=I, and that it has been verified that the file\n   on
    the server has not since changed.\n      C> TYPE I\n      S> 200 Type set to I.\n
    \     C> PORT 127,0,0,1,15,107\n      S> 200 PORT command successful.\n      C>
    REST 802816\n      S> 350 Restarting at 802816. Send STORE or RETRIEVE\n      C>
    RETR cap60.pl198.tar\n      S> 150 Opening BINARY mode data connection\n      [...]\n
    \     S> 226 Transfer complete.\n"
  title: 5.5.  REST Example
- contents:
  - "6.  A Trivial Virtual File Store (TVFS)\n   Traditionally, FTP has placed almost
    no constraints upon the file\n   store (NVFS) provided by a server.  This specification
    does not alter\n   that.  However, it has become common for servers to attempt
    to\n   provide at least file system naming conventions modeled loosely upon\n
    \  those of the UNIX(TM) file system.  This is a tree-structured file\n   system,
    built of directories, each of which can contain other\n   directories, or other
    kinds of files, or both.  Each file and\n   directory has a name relative to the
    directory that contains it,\n   except for the directory at the root of the tree,
    which is contained\n   in no other directory, and hence has no name of its own.\n
    \  That which has so far been described is perfectly consistent with the\n   standard
    FTP NVFS and access mechanisms.  The \"CWD\" command is used\n   to move from
    one directory to an embedded directory.  \"CDUP\" may be\n   provided to return
    to the parent directory, and the various file\n   manipulation commands (\"RETR\",
    \"STOR\", the rename commands, etc.) are\n   used to manipulate files within the
    current directory.\n   However, it is often useful to be able to reference files
    other than\n   by changing directories, especially as FTP provides no guaranteed\n
    \  mechanism to return to a previous directory.  The Trivial Virtual\n   File
    Store (TVFS), if implemented, provides that mechanism.\n"
  title: 6.  A Trivial Virtual File Store (TVFS)
- contents:
  - "6.1.  TVFS File Names\n   Where a server implements the TVFS, no elementary file
    name shall\n   contain the character \"/\".  Where the underlying natural file
    store\n   permits files, or directories, to contain the \"/\" character in their\n
    \  names, a server-PI implementing TVFS must encode that character in\n   some
    manner whenever file or directory names are being returned to\n   the user-PI,
    and reverse that encoding whenever such names are being\n   accepted from the
    user-PI.\n   The encoding method to be used is not specified here.  Where some\n
    \  other character is illegal in file and directory names in the\n   underlying
    file store, a simple transliteration may be sufficient.\n   Where there is no
    suitable substitute character a more complex\n   encoding scheme, possibly using
    an escape character, is likely to be\n   required.\n   With the one exception
    of the unnamed root directory, a TVFS file\n   name may not be empty.  That is,
    all other file names contain at\n   least one character.\n   With the sole exception
    of the \"/\" character, any valid IS10646\n   character [10] may be used in a
    TVFS file name.  When transmitted,\n   file name characters are encoded using
    the UTF-8 encoding [2].  Note\n   that the two-character sequence CR LF occurring
    in a file name will\n   make that name impossible to transmit over a data connection.\n
    \  Consequently, it should be avoided, or if that is impossible to\n   achieve,
    it MUST be encoded in some reversible way.\n"
  title: 6.1.  TVFS File Names
- contents:
  - "6.2.  TVFS Pathnames\n   A TVFS \"Pathname\" combines the file or directory name
    of a target\n   file or directory, with the directory names of zero or more enclosing\n
    \  directories, so as to allow the target file or directory to be\n   referenced
    other than when the server's \"current working directory\"\n   is the directory
    directly containing the target file or directory.\n   By definition, every TVFS
    file or directory name is also a TVFS\n   pathname.  Such a pathname is valid
    to reference the file from the\n   directory containing the name, that is, when
    that directory is the\n   server-FTP's current working directory.\n   Other TVFS
    pathnames are constructed by prefixing a pathname by a\n   name of a directory
    from which the path is valid, and separating the\n   two with the \"/\" character.
    \ Such a pathname is valid to reference\n   the file or directory from the directory
    containing the newly added\n   directory name.\n   Where a pathname has been extended
    to the point where the directory\n   added is the unnamed root directory, the
    pathname will begin with the\n   \"/\" character.  Such a path is known as a fully
    qualified pathname.\n   Fully qualified paths may, obviously, not be further extended,
    as, by\n   definition, no directory contains the root directory.  Being unnamed,\n
    \  it cannot be represented in any other directory.  A fully qualified\n   pathname
    is valid to reference the named file or directory from any\n   location (that
    is, regardless of what the current working directory\n   may be) in the virtual
    file store.\n   Any pathname that is not a fully qualified pathname may be referred\n
    \  to as a \"relative pathname\" and will only correctly reference the\n   intended
    file when the current working directory of the server-FTP is\n   a directory from
    which the relative pathname is valid.\n   As a special case, the pathname \"/\"
    is defined to be a fully\n   qualified pathname referring to the root directory.
    \ That is, the\n   root directory does not have a directory (or file) name, but
    does\n   have a pathname.  This special pathname may be used only as is as a\n
    \  reference to the root directory.  It may not be combined with other\n   pathnames
    using the rules above, as doing so would lead to a pathname\n   containing two
    consecutive \"/\" characters, which is an undefined\n   sequence.\n"
  title: 6.2.  TVFS Pathnames
- contents:
  - "6.2.1.  Notes\n   +  It is not required, or expected, that there be only one
    fully\n      qualified pathname that will reference any particular file or\n      directory.\n
    \  +  As a caveat, though the TVFS file store is basically tree\n      structured,
    there is no requirement that any file or directory\n      have only one parent
    directory.\n   +  As defined, no TVFS pathname will ever contain two consecutive
    \"/\"\n      characters.  Such a name is not illegal however, and may be\n      defined
    by the server for any purpose that suits it.  Clients\n      implementing this
    specification should not assume any semantics\n      for such names.\n   +  Similarly,
    other than the special case path that refers to the\n      root directory, no
    TVFS pathname constructed as defined here will\n      ever end with the \"/\"
    character.  Such names are also not illegal,\n      but are undefined.\n   +  While
    any legal IS10646 character is permitted to occur in a TVFS\n      file or directory
    name, other than \"/\", server FTP implementations\n      are not required to
    support all possible IS10646 characters.  The\n      subset supported is entirely
    at the discretion of the server.  The\n      case (where it exists) of the characters
    that make up file,\n      directory, and pathnames may be significant.  Unless
    determined\n      otherwise by means unspecified here, clients should assume that\n
    \     all such names are comprised of characters whose case is\n      significant.
    \ Servers are free to treat case (or any other\n      attribute) of a name as
    irrelevant, and hence map two names that\n      appear to be distinct onto the
    same underlying file.\n   +  There are no defined \"magic\" names, like \".\",
    \"..\" or \"C:\".\n      Servers may implement such names, with any semantics
    they choose,\n      but are not required to do so.\n   +  TVFS imposes no particular
    semantics or properties upon files,\n      guarantees no access control schemes,
    or any of the other common\n      properties of a file store.  Only the naming
    scheme is defined.\n"
  title: 6.2.1.  Notes
- contents:
  - "6.3.  FEAT Response for TVFS\n   In response to the FEAT command [6] a server
    that wishes to indicate\n   support for the TVFS as defined here will include
    a line that begins\n   with the four characters \"TVFS\" (in any case, or mixture
    of cases,\n   upper case is not required).  Servers SHOULD send upper case.\n
    \  Such a response to the FEAT command MUST NOT be returned unless the\n   server
    implements TVFS as defined here.\n   Later specifications may add to the TVFS
    definition.  Such additions\n   should be notified by means of additional text
    appended to the TVFS\n   feature line.  Such specifications, if any, will define
    the extra\n   text.\n   Until such a specification is defined, servers should
    not include\n   anything after \"TVFS\" in the TVFS feature line.  Clients, however,\n
    \  should be prepared to deal with arbitrary text following the four\n   defined
    characters, and simply ignore it if unrecognized.\n   A typical response to the
    FEAT command issued by a server\n   implementing only this specification would
    be:\n      C> feat\n      S> 211- <any descriptive text>\n      S>  ...\n      S>
    \ TVFS\n      S>  ...\n      S> 211 end\n   The ellipses indicate place holders
    where other features may be\n   included, but are not required.  The one-space
    indentation of the\n   feature lines is mandatory [6] and is not counted as one
    of the first\n   four characters for the purposes of this feature listing.\n   The
    TVFS feature adds no new commands to the FTP command repertoire.\n"
  title: 6.3.  FEAT Response for TVFS
- contents:
  - "6.4.  OPTS for TVFS\n   There are no options in this TVFS specification, and
    hence there is\n   no OPTS command defined.\n"
  title: 6.4.  OPTS for TVFS
- contents:
  - "6.5.  TVFS Examples\n   Assume a TVFS file store is comprised of a root directory,
    which\n   contains two directories (A and B) and two non-directory files (X and\n
    \  Y).  The A directory contains two directories (C and D) and one other\n   file
    (Z).  The B directory contains just two non-directory files (P\n   and Q) and
    the C directory also two non-directory files (also named P\n   and Q, by chance).
    \ The D directory is empty, that is, contains no\n   files or directories.  This
    structure may depicted graphically as...\n            (unnamed root)\n              /
    \ |  \\   \\\n             /   |   \\   \\\n            A    X    B   Y\n           /|\\
    \      / \\\n          / | \\     /   \\\n         C  D  Z   P     Q\n        /
    \\\n       /   \\\n      P     Q\n   Given this structure, the following fully
    qualified pathnames exist.\n         /\n         /A\n         /B\n         /X\n
    \        /Y\n         /A/C\n         /A/D\n         /A/Z\n         /A/C/P\n         /A/C/Q\n
    \        /B/P\n         /B/Q\n   It is clear that none of the paths / /A /B or
    /A/D refer to the same\n   directory, as the contents of each is different.  Nor
    do any of / /A\n   /A/C or /A/D.  However /A/C and /B might be the same directory,
    there\n   is insufficient information given to tell.  Any of the other\n   pathnames
    (/X /Y /A/Z /A/C/P /A/C/Q /B/P and /B/Q) may refer to the\n   same underlying
    files, in almost any combination.\n   If the current working directory of the
    server-FTP is /A then the\n   following pathnames, in addition to all the fully
    qualified\n   pathnames, are valid\n      C\n      D\n      Z\n      C/P\n      C/Q\n
    \  These all refer to the same files or directories as the corresponding\n   fully
    qualified path with \"/A/\" prepended.\n   That those pathnames all exist does
    not imply that the TVFS sever\n   will necessarily grant any kind of access rights
    to the named paths,\n   or that access to the same file via different pathnames
    will\n   necessarily be granted equal rights.\n   None of the following relative
    paths are valid when the current\n   directory is /A\n      A\n      B\n      X\n
    \     Y\n      B/P\n      B/Q\n      P\n      Q\n   Any of those could be made
    valid by changing the server-FTP's current\n   working directory to the appropriate
    directory.  Note that the paths\n   \"P\" and \"Q\" might refer to different files
    depending upon which\n   directory is selected to cause those to become valid
    TVFS relative\n   paths.\n"
  title: 6.5.  TVFS Examples
- contents:
  - "7.  Listings for Machine Processing (MLST and MLSD)\n   The MLST and MLSD commands
    are intended to standardize the file and\n   directory information returned by
    the server-FTP process.  These\n   commands differ from the LIST command in that
    the format of the\n   replies is strictly defined although extensible.\n   Two
    commands are defined, MLST and MLSD.  MLST provides data about\n   exactly the
    object named on its command line, and no others.  MLSD,\n   on the other, lists
    the contents of a directory if a directory is\n   named, otherwise a 501 reply
    is returned.  In either case, if no\n   object is named, the current directory
    is assumed.  That will cause\n   MLST to send a one-line response, describing
    the current directory\n   itself, and MLSD to list the contents of the current
    directory.\n   In the following, the term MLSx will be used wherever either MLST
    or\n   MLSD may be inserted.\n   The MLST and MLSD commands also extend the FTP
    protocol as presented\n   in STD 9, RFC 959 [3] and STD 3, RFC 1123 [9] to allow
    that\n   transmission of 8-bit data over the control connection.  Note this is\n
    \  not specifying character sets which are 8-bit, but specifying that\n   FTP
    implementations are to specifically allow the transmission and\n   reception of
    8-bit bytes, with all bits significant, over the control\n   connection.  That
    is, all 256 possible octet values are permitted.\n   The MLSx command allows both
    UTF-8/Unicode and \"raw\" forms as\n   arguments, and in responses both to the
    MLST and MLSD commands, and\n   all other FTP commands which take pathnames as
    arguments.\n"
  title: 7.  Listings for Machine Processing (MLST and MLSD)
- contents:
  - "7.1.  Format of MLSx Requests\n   The MLST and MLSD commands each allow a single
    optional argument.\n   This argument may be either a directory name or, for MLST
    only, a\n   file name.  For these purposes, a \"file name\" is the name of any\n
    \  entity in the server NVFS which is not a directory.  Where TVFS is\n   supported,
    any TVFS relative pathname valid in the current working\n   directory, or any
    TVFS fully qualified pathname, may be given.  If a\n   directory name is given
    then MLSD must return a listing of the\n   contents of the named directory, otherwise
    it issues a 501 reply, and\n   does not open a data connection.  In all cases
    for MLST, a single set\n   of fact lines (usually a single fact line) containing
    the information\n   about the named file or directory shall be returned over the
    control\n   connection, without opening a data connection.\n   If no argument
    is given then MLSD must return a listing of the\n   contents of the current working
    directory, and MLST must return a\n   listing giving information about the current
    working directory\n   itself.  For these purposes, the contents of a directory
    are whatever\n   file or directory names (not pathnames) the server-PI will allow
    to\n   be referenced when the current working directory is the directory\n   named,
    and which the server-PI desires to reveal to the user-PI.\n   Note that omitting
    the argument is the only defined way to obtain a\n   listing of the current directory,
    unless a pathname that represents\n   the directory happens to be known.  In particular,
    there is no\n   defined shorthand name for the current directory.  This does not\n
    \  prohibit any particular server-PI implementing such a shorthand.\n   No title,
    header, or summary, lines, or any other formatting, other\n   than as is specified
    below, is ever returned in the output of an MLST\n   or MLSD command.\n   If the
    Client-FTP sends an invalid argument, the server-FTP MUST\n   reply with an error
    code of 501.\n   The syntax for the MLSx command is:\n      mlst             =
    \"MLst\" [ SP pathname ] CRLF\n      mlsd             = \"MLsD\" [ SP pathname
    ] CRLF\n"
  title: 7.1.  Format of MLSx Requests
- contents:
  - "7.2.  Format of MLSx Response\n   The format of a response to an MLSx command
    is as follows:\n      mlst-response    = control-response / error-response\n      mlsd-response
    \   = ( initial-response final-response ) /\n                         error-response\n
    \     control-response = \"250-\" [ response-message ] CRLF\n                         1*(
    SP entry CRLF )\n                         \"250\" [ SP response-message ] CRLF\n
    \     initial-response = \"150\" [ SP response-message ] CRLF\n      final-response
    \  = \"226\" SP response-message CRLF\n      response-message = *TCHAR\n      data-response
    \   = *( entry CRLF )\n      entry            = [ facts ] SP pathname\n      facts
    \           = 1*( fact \";\" )\n      fact             = factname \"=\" value\n
    \     factname         = \"Size\" / \"Modify\" / \"Create\" /\n                         \"Type\"
    / \"Unique\" / \"Perm\" /\n                         \"Lang\" / \"Media-Type\"
    / \"CharSet\" /\n                         os-depend-fact / local-fact\n      os-depend-fact
    \  = <IANA assigned OS name> \".\" token\n      local-fact       = \"X.\" token\n
    \     value            = *SCHAR\n   Upon receipt of an MLSx command, the server
    will verify the\n   parameter, and if invalid return an error-response.  For this\n
    \  purpose, the parameter should be considered to be invalid if the\n   client
    issuing the command does not have permission to perform the\n   requested operation.\n
    \  If the parameter is valid, then for an MLST command, the server-PI\n   will
    send the first (leading) line of the control response, the entry\n   for the pathname
    given, or the current directory if no pathname was\n   provided, and the terminating
    line.  Normally exactly one entry would\n   be returned, more entries are permitted
    only when required to\n   represent a file that is to have multiple \"Type\" facts
    returned.  In\n   this case, the pathname component of every response MUST be\n
    \  identical.\n   Note that for MLST the fact set is preceded by a space.  That
    is\n   provided to guarantee that the fact set cannot be accidentally\n   interpreted
    as the terminating line of the control response, but is\n   required even when
    that would not be possible.  Exactly one space\n   exists between the set of facts
    and the pathname.  Where no facts are\n   present, there will be exactly two leading
    spaces before the\n   pathname.  No spaces are permitted in the facts, any other
    spaces in\n   the response are to be treated as being a part of the pathname.\n
    \  If the command was an MLSD command, the server will open a data\n   connection
    as indicated in section 3.2 of STD 9, RFC 959 [3].  If\n   that fails, the server
    will return an error-response.  If all is OK,\n   the server will return the initial-response,
    send the appropriate\n   data-response over the new data connection, close that
    connection,\n   and then send the final-response over the control connection.
    \ The\n   grammar above defines the format for the data-response, which defines\n
    \  the format of the data returned over the data connection established.\n   The
    data connection opened for a MLSD response shall be a connection\n   as if the
    \"TYPE L 8\", \"MODE S\", and \"STRU F\" commands had been given,\n   whatever
    FTP transfer type, mode and structure had actually been set,\n   and without causing
    those settings to be altered for future commands.\n   That is, this transfer type
    shall be set for the duration of the data\n   connection established for this
    command only.  While the content of\n   the data sent can be viewed as a series
    of lines, implementations\n   should note that there is no maximum line length
    defined.\n   Implementations should be prepared to deal with arbitrarily long\n
    \  lines.\n   The facts part of the specification would contain a series of \"file\n
    \  facts\" about the file or directory named on the same line.  Typical\n   information
    to be presented would include file size, last\n   modification time, creation
    time, a unique identifier, and a\n   file/directory flag.\n   The complete format
    for a successful reply to the MLSD command would\n   be:\n      facts SP pathname
    CRLF\n      facts SP pathname CRLF\n      facts SP pathname CRLF\n      ...\n
    \  Note that the format is intended for machine processing, not human\n   viewing,
    and as such the format is very rigid.  Implementations MUST\n   NOT vary the format
    by, for example, inserting extra spaces for\n   readability, replacing spaces
    by tabs, including header or title\n   lines, or inserting blank lines, or in
    any other way alter this\n   format.  Exactly one space is always required after
    the set of facts\n   (which may be empty).  More spaces may be present on a line
    if, and\n   only if, the pathname presented contains significant spaces.  The
    set\n   of facts must not contain any spaces anywhere inside it.  Facts\n   should
    be provided in each output line only if they both provide\n   relevant information
    about the file named on the same line, and they\n   are in the set requested by
    the user-PI.  See section 7.9 (page 51).\n   There is no requirement that the
    same set of facts be provided for\n   each file, or that the facts presented occur
    in the same order for\n   each file.\n"
  title: 7.2.  Format of MLSx Response
- contents:
  - "7.2.1.  Error Responses to MLSx commands\n   Many of the 4xy and 5xy responses
    defined in section 4.2 of STD 9,\n   RFC 959 [3] are possible in response to the
    MLST and MLSD commands.\n   In particular, syntax errors can generate 500 or 501
    replies.  Giving\n   a pathname that exists but is not a directory as the argument
    to a\n   MLSD command generates a 501 reply.  Giving a name that does not\n   exist,
    or for which access permission (to obtain directory\n   information as requested)
    is not granted will elicit a 550 reply.\n   Other replies (530, 553, 503, 504,
    and any of the 4xy replies) are\n   also possible in appropriate circumstances.\n"
  title: 7.2.1.  Error Responses to MLSx commands
- contents:
  - "7.3.  File Name Encoding\n   An FTP implementation supporting the MLSx commands
    must be 8-bit\n   clean.  This is necessary in order to transmit UTF-8 encoded
    file\n   names.  This specification recommends the use of UTF-8 encoded file\n
    \  names.  FTP implementations SHOULD use UTF-8 whenever possible to\n   encourage
    the maximum inter-operability.\n   File names are not restricted to UTF-8, however
    treatment of\n   arbitrary character encodings is not specified by this standard.\n
    \  Applications are encouraged to treat non-UTF-8 encodings of file\n   names
    as octet sequences.\n   Note that this encoding is unrelated to that of the contents
    of the\n   file, even if the file contains character data.\n   Further information
    about file name encoding for FTP may be found in\n   \"Internationalization of
    the File Transfer Protocol\" [7].\n"
  title: 7.3.  File Name Encoding
- contents:
  - "7.3.1.  Notes about the File Name\n   The file name returned in the MLST response
    should be the same name\n   as was specified in the MLST command, or, where TVFS
    is supported, a\n   fully qualified TVFS path naming the same file.  Where no
    argument\n   was given to the MLST command, the server-PI may either include an\n
    \  empty file name in the response, or it may supply a name that refers\n   to
    the current directory, if such a name is available.  Where TVFS is\n   supported,
    a fully qualified pathname of the current directory SHOULD\n   be returned.\n
    \  File names returned in the output from an MLSD command SHOULD be\n   unqualified
    names within the directory named, or the current\n   directory if no argument
    was given.  That is, the directory named in\n   the MLSD command SHOULD NOT appear
    as a component of the file names\n   returned.\n   If the server-FTP process is
    able, and the \"type\" fact is being\n   returned, it MAY return in the MLSD response,
    an entry whose type is\n   \"cdir\", which names the directory from which the
    contents of the\n   listing were obtained.  Where TVFS is supported, the name
    MAY be the\n   fully qualified pathname of the directory, or MAY be any other\n
    \  pathname that is valid to refer to that directory from the current\n   working
    directory of the server-FTP.  Where more than one name\n   exists, multiple of
    these entries may be returned.  In a sense, the\n   \"cdir\" entry can be viewed
    as a heading for the MLSD output.\n   However, it is not required to be the first
    entry returned, and may\n   occur anywhere within the listing.\n   When TVFS is
    supported, a user-PI can refer to any file or directory\n   in the listing by
    combining a type \"cdir\" name, with the appropriate\n   name from the directory
    listing using the procedure defined in\n   section 6.2.\n   Alternatively, whether
    TVFS is supported or not, the user-PI can\n   issue a CWD command ([3]) giving
    a name of type \"cdir\" from the\n   listing returned, and from that point reference
    the files returned in\n   the MLSD response from which the cdir was obtained by
    using the file\n   name components of the listing.\n"
  title: 7.3.1.  Notes about the File Name
- contents:
  - "7.4.  Format of Facts\n   The \"facts\" for a file in a reply to a MLSx command
    consist of\n   information about that file.  The facts are a series of keyword=value\n
    \  pairs each followed by semi-colon (\";\") characters.  An individual\n   fact
    may not contain a semi-colon in its name or value.  The complete\n   series of
    facts may not contain the space character.  See the\n   definition or \"RCHAR\"
    in section 2.1 for a list of the characters\n   that can occur in a fact value.
    \ Not all are applicable to all facts.\n   A sample of a typical series of facts
    would be: (spread over two\n   lines for presentation here only)\n   size=4161;lang=en-US;modify=19970214165800;create=19961001124534;\n
    \  type=file;x.myfact=foo,bar;\n"
  title: 7.4.  Format of Facts
- contents:
  - "7.5.  Standard Facts\n   This document defines a standard set of facts as follows:\n
    \     size       -- Size in octets\n      modify     -- Last modification time\n
    \     create     -- Creation time\n      type       -- Entry type\n      unique
    \    -- Unique id of file/directory\n      perm       -- File permissions, whether
    read, write, execute is\n                    allowed for the login id.\n      lang
    \      -- Language of the file name per IANA [11] registry.\n      media-type
    -- MIME media-type of file contents per IANA registry.\n      charset    -- Character
    set per IANA registry (if not UTF-8)\n   Fact names are case-insensitive.  Size,
    size, SIZE, and SiZe are the\n   same fact.\n   Further operating system specific
    keywords could be specified by\n   using the IANA operating system name as a prefix
    (examples only):\n      OS/2.ea   -- OS/2 extended attributes\n      MACOS.rf
    \ -- MacIntosh resource forks\n      UNIX.mode -- Unix file modes (permissions)\n
    \  Implementations may define keywords for experimental, or private use.\n   All
    such keywords MUST begin with the two character sequence \"x.\".\n   As type names
    are case independent, \"x.\" and \"X.\" are equivalent.\n   For example:\n      x.ver
    \ -- Version information\n      x.desc -- File description\n      x.type -- File
    type\n"
  title: 7.5.  Standard Facts
- contents:
  - "7.5.1.  The Type Fact\n   The type fact needs a special description.  Part of
    the problem with\n   current practices is deciding when a file is a directory.
    \ If it is a\n   directory, is it the current directory, a regular directory,
    or a\n   parent directory?  The MLST specification makes this unambiguous\n   using
    the type fact.  The type fact given specifies information about\n   the object
    listed on the same line of the MLST response.\n   Five values are possible for
    the type fact:\n      file         -- a file entry\n      cdir         -- the
    listed directory\n      pdir         -- a parent directory\n      dir          --
    a directory or sub-directory\n      OS.name=type -- an OS or file system dependent
    file type\n   The syntax is defined to be:\n      type-fact       = type-label
    \"=\" type-val\n      type-label      = \"Type\"\n      type-val        = \"File\"
    / \"cdir\" / \"pdir\" / \"dir\" /\n                        os-type\n   The value
    of the type fact (the \"type-val\") is a case independent\n   string.\n"
  title: 7.5.1.  The Type Fact
- contents:
  - "7.5.1.1.  type=file\n   The presence of the type=file fact indicates the listed
    entry is a\n   file containing non-system data.  That is, it may be transferred
    from\n   one system to another of quite different characteristics, and perhaps\n
    \  still be meaningful.\n"
  title: 7.5.1.1.  type=file
- contents:
  - "7.5.1.2.  type=cdir\n   The type=cdir fact indicates the listed entry contains
    a pathname of\n   the directory whose contents are listed.  An entry of this type
    will\n   only be returned as a part of the result of an MLSD command when the\n
    \  type fact is included, and provides a name for the listed directory,\n   and
    facts about that directory.  In a sense, it can be viewed as\n   representing
    the title of the listing, in a machine friendly format.\n   It may appear at any
    point of the listing, it is not restricted to\n   appearing at the start, though
    frequently may do so, and may occur\n   multiple times.  It MUST NOT be included
    if the type fact is not\n   included, or there would be no way for the user-PI
    to distinguish the\n   name of the directory from an entry in the directory.\n
    \  Where TVFS is supported by the server-FTP, this name may be used to\n   construct
    pathnames with which to refer to the files and directories\n   returned in the
    same MLSD output (see section 6.2).  These pathnames\n   are only expected to
    work when the server-PI's position in the NVFS\n   file tree is the same as its
    position when the MLSD command was\n   issued, unless a fully qualified pathname
    results.\n   Where TVFS is not supported, the only defined semantics associated\n
    \  with a \"type=cdir\" entry are that, provided the current working\n   directory
    of the server-PI has not been changed, a pathname of type\n   \"cdir\" may be
    used as an argument to a CWD command, which will cause\n   the current directory
    of the server-PI to change so that the\n   directory that was listed in its current
    working directory.\n"
  title: 7.5.1.2.  type=cdir
- contents:
  - "7.5.1.3.  type=dir\n   If present, the type=dir entry gives the name of a directory.
    \ Such\n   an entry typically cannot be transferred from one system to another\n
    \  using RETR, etc., but should (permissions permitting) be able to be\n   the
    object of an MLSD command.\n"
  title: 7.5.1.3.  type=dir
- contents:
  - "7.5.1.4.  type=pdir\n   If present, which will occur only in the response to
    a MLSD command\n   when the type fact is included, the type=pdir entry represents
    a\n   pathname of the parent directory of the listed directory.  As well as\n
    \  having the properties of a type=dir, a CWD command that uses the\n   pathname
    from this entry should change the user to a parent directory\n   of the listed
    directory.  If the listed directory is the current\n   directory, a CDUP command
    may also have the effect of changing to the\n   named directory.  User-FTP processes
    should note not all responses\n   will include this information, and that some
    systems may provide\n   multiple type=pdir responses.\n   Where TVFS is supported,
    a \"type=pdir\" name may be a relative\n   pathname, or a fully qualified pathname.
    \ A relative pathname will be\n   relative to the directory being listed, not
    to the current directory\n   of the server-PI at the time.\n   For the purposes
    of this type value, a \"parent directory\" is any\n   directory in which there
    is an entry of type=dir that refers to the\n   directory in which the type=pdir
    entity was found.  Thus it is not\n   required that all entities with type=pdir
    refer to the same\n   directory.  The \"unique\" fact (if supported and supplied)
    can be used\n   to determine whether there is a relationship between the type=pdir\n
    \  entries or not.\n"
  title: 7.5.1.4.  type=pdir
- contents:
  - "7.5.1.5.  System Defined Types\n   Files types that are specific to a specific
    operating system, or file\n   system, can be encoded using the \"OS.\" type names.
    \ The format is:\n      os-type   = \"OS.\" os-name \"=\" os-kind\n      os-name
    \  = <an IANA registered operating system name>\n      os-kind   = token\n   The
    \"os-name\" indicates the specific system type that supports the\n   particular
    localtype.  OS specific types are registered by the IANA\n   using the procedures
    specified in section 10.  The \"os-kind\" provides\n   the system dependent information
    as to the type of the file listed.\n   The os-name and os-kind strings in an os-type
    are case independent.\n   \"OS.unix=block\" and \"OS.Unix=BLOCK\" represent the
    same type (or\n   would, if such a type were registered.)\n   Note: Where the
    underlying system supports a file type that is\n   essentially an indirect pointer
    to another file, the NVFS\n   representation of that type should normally be to
    represent the file\n   that the reference indicates.  That is, the underlying
    basic file\n   will appear more than once in the NVFS, each time with the \"unique\"\n
    \  fact (see immediately following section) containing the same value,\n   indicating
    that the same file is represented by all such names.\n   User-PIs transferring
    the file need then transfer it only once, and\n   then insert their own form of
    indirect reference to construct\n   alternate names where desired, or perhaps
    even copy the local file if\n   that is the only way to provide two names with
    the same content.  A\n   file which would be a reference to another file, if only
    the other\n   file actually existed, may be represented in any OS dependent manner\n
    \  appropriate, or not represented at all.\n"
  title: 7.5.1.5.  System Defined Types
- contents:
  - "7.5.1.6.  Multiple Types\n   Where a file is such that it may validly, and sensibly,
    treated by\n   the server-PI as being of more than one of the above types, then\n
    \  multiple entries should be returned, each with its own \"Type\" fact of\n   the
    appropriate type, and each containing the same pathname.  This\n   may occur,
    for example, with a structured file, which may contain\n   sub-files, and where
    the server-PI permits the structured file to be\n   treated as a unit, or treated
    as a directory allowing the sub-files\n   within it to be referenced.  When this
    is done, the pathname returned\n   with each entry MUST be identical to the others
    representing the same\n   file.\n"
  title: 7.5.1.6.  Multiple Types
- contents:
  - "7.5.2.  The unique Fact\n   The unique fact is used to present a unique identifier
    for a file or\n   directory in the NVFS accessed via a server-FTP process.  The
    value\n   of this fact should be the same for any number of pathnames that\n   refer
    to the same underlying file.  The fact should have different\n   values for names
    that reference distinct files.  The mapping between\n   files, and unique fact
    tokens should be maintained, and remain\n   consistent, for at least the lifetime
    of the control connection from\n   user-PI to server-PI.\n      unique-fact  =
    \"Unique\" \"=\" token\n   This fact would be expected to be used by server-FTPs
    whose host\n   system allows things such as symbolic links so that the same file
    may\n   be represented in more than one directory on the server.  The only\n   conclusion
    that should be drawn is that if two different names each\n   have the same value
    for the unique fact, they refer to the same\n   underlying object.  The value
    of the unique fact (the token) should\n   be considered an opaque string for comparison
    purposes, and is a case\n   dependent value.  The tokens \"A\" and \"a\" do not
    represent the same\n   underlying object.\n"
  title: 7.5.2.  The unique Fact
- contents:
  - "7.5.3.  The modify Fact\n   The modify fact is used to determine the last time
    the content of the\n   file (or directory) indicated was modified.  Any change
    of substance\n   to the file should cause this value to alter.  That is, if a
    change\n   is made to a file such that the results of a RETR command would\n   differ,
    then the value of the modify fact should alter.  User-PIs\n   should not assume
    that a different modify fact value indicates that\n   the file contents are necessarily
    different than when last retrieved.\n   Some systems may alter the value of the
    modify fact for other\n   reasons, though this is discouraged wherever possible.
    \ Also a file\n   may alter, and then be returned to its previous content, which
    would\n   often be indicated as two incremental alterations to the value of the\n
    \  modify fact.\n   For directories, this value should alter whenever a change
    occurs to\n   the directory such that different file names would (or might) be\n
    \  included in MLSD output of that directory.\n      modify-fact  = \"Modify\"
    \"=\" time-val\n"
  title: 7.5.3.  The modify Fact
- contents:
  - "7.5.4.  The create Fact\n   The create fact indicates when a file, or directory,
    was first\n   created.  Exactly what \"creation\" is for this purpose is not\n
    \  specified here, and may vary from server to server.  About all that\n   can
    be said about the value returned is that it can never indicate a\n   later time
    than the modify fact.\n      create-fact  = \"Create\" \"=\" time-val\n   Implementation
    Note: Implementors of this fact on UNIX(TM) systems\n      should note that the
    unix \"stat\" \"st_ctime\" field does not give\n      creation time, and that
    unix file systems do not record creation\n      time at all.  Unix (and POSIX)
    implementations will normally not\n      include this fact.\n"
  title: 7.5.4.  The create Fact
- contents:
  - "7.5.5.  The perm Fact\n   The perm fact is used to indicate access rights the
    current FTP user\n   has over the object listed.  Its value is always an unordered\n
    \  sequence of alphabetic characters.\n      perm-fact    = \"Perm\" \"=\" *pvals\n
    \     pvals        = \"a\" / \"c\" / \"d\" / \"e\" / \"f\" /\n                     \"l\"
    / \"m\" / \"p\" / \"r\" / \"w\"\n   There are ten permission indicators currently
    defined.  Many are\n   meaningful only when used with a particular type of object.
    \ The\n   indicators are case independent, \"d\" and \"D\" are the same indicator.\n
    \  The \"a\" permission applies to objects of type=file, and indicates\n   that
    the APPE (append) command may be applied to the file named.\n   The \"c\" permission
    applies to objects of type=dir (and type=pdir,\n   type=cdir).  It indicates that
    files may be created in the directory\n   named.  That is, that a STOU command
    is likely to succeed, and that\n   STOR and APPE commands might succeed if the
    file named did not\n   previously exist, but is to be created in the directory
    object that\n   has the \"c\" permission.  It also indicates that the RNTO command
    is\n   likely to succeed for names in the directory.\n   The \"d\" permission
    applies to all types.  It indicates that the\n   object named may be deleted,
    that is, that the RMD command may be\n   applied to it if it is a directory, and
    otherwise that the DELE\n   command may be applied to it.\n   The \"e\" permission
    applies to the directory types.  When set on an\n   object of type=dir, type=cdir,
    or type=pdir it indicates that a CWD\n   command naming the object should succeed,
    and the user should be able\n   to enter the directory named.  For type=pdir it
    also indicates that\n   the CDUP command may succeed (if this particular pathname
    is the one\n   to which a CDUP would apply.)\n   The \"f\" permission for objects
    indicates that the object named may be\n   renamed - that is, may be the object
    of an RNFR command.\n   The \"l\" permission applies to the directory file types,
    and indicates\n   that the listing commands, LIST, NLST, and MLSD may be applied
    to the\n   directory in question.\n   The \"m\" permission applies to directory
    types, and indicates that the\n   MKD command may be used to create a new directory
    within the\n   directory under consideration.\n   The \"p\" permission applies
    to directory types, and indicates that\n   objects in the directory may be deleted,
    or (stretching naming a\n   little) that the directory may be purged.  Note: it
    does not indicate\n   that the RMD command may be used to remove the directory
    named\n   itself, the \"d\" permission indicator indicates that.\n   The \"r\"
    permission applies to type=file objects, and for some\n   systems, perhaps to
    other types of objects, and indicates that the\n   RETR command may be applied
    to that object.\n   The \"w\" permission applies to type=file objects, and for
    some\n   systems, perhaps to other types of objects, and indicates that the\n
    \  STOR command may be applied to the object named.\n   Note: That a permission
    indicator is set can never imply that the\n      appropriate command is guaranteed
    to work -- just that it might.\n      Other system specific limitations, such
    as limitations on\n      available space for storing files, may cause an operation
    to fail,\n      where the permission flags may have indicated that it was likely\n
    \     to succeed.  The permissions are a guide only.\n   Implementation note:
    The permissions are described here as they apply\n      to FTP commands.  They
    may not map easily into particular\n      permissions available on the server's
    operating system.  Servers\n      are expected to synthesize these permission
    bits from the\n      permission information available from operating system.  For\n
    \     example, to correctly determine whether the \"D\" permission bit\n      should
    be set on a directory for a server running on the UNIX(TM)\n      operating system,
    the server should check that the directory named\n      is empty, and that the
    user has write permission on both the\n      directory under consideration, and
    its parent directory.\n      Some systems may have more specific permissions than
    those listed\n      here, such systems should map those to the flags defined as
    best\n      they are able.  Other systems may have only more broad access\n      controls.
    \ They will generally have just a few possible\n      permutations of permission
    flags, however they should attempt to\n      correctly represent what is permitted.\n"
  title: 7.5.5.  The perm Fact
- contents:
  - "7.5.6.  The lang Fact\n   The lang fact describes the natural language of the
    file name for use\n   in display purposes.  Values used here should be taken from
    the\n   language registry of the IANA.  See [12] for the syntax, and\n   procedures,
    related to language tags.\n      lang-fact  = \"Lang\" \"=\" token\n   Server-FTP
    implementations MUST NOT guess language values.  Language\n   values must be determined
    in an unambiguous way such as file system\n   tagging of language or by user configuration.
    \ Note that the lang\n   fact provides no information at all about the content
    of a file, only\n   about the encoding of its name.\n"
  title: 7.5.6.  The lang Fact
- contents:
  - "7.5.7.  The size Fact\n   The size fact applies to non-directory file types and
    should always\n   reflect the approximate size of the file.  This should be as
    accurate\n   as the server can make it, without going to extraordinary lengths,\n
    \  such as reading the entire file.  The size is expressed in units of\n   octets
    of data in the file.\n   Given limitations in some systems, Client-FTP implementations
    must\n   understand this size may not be precise and may change between the\n
    \  time of a MLST and RETR operation.\n   Clients that need highly accurate size
    information for some\n   particular reason should use the SIZE command as defined
    in section\n   4.  The most common need for this accuracy is likely to be in\n
    \  conjunction with the REST command described in section 5.  The size\n   fact,
    on the other hand, should be used for purposes such as\n   indicating to a human
    user the approximate size of the file to be\n   transferred, and perhaps to give
    an idea of expected transfer\n   completion time.\n      size-fact  = \"Size\"
    \"=\" 1*DIGIT\n"
  title: 7.5.7.  The size Fact
- contents:
  - "7.5.8.  The media-type Fact\n   The media-type fact represents the IANA media
    type of the file named,\n   and applies only to non-directory types.  The list
    of values used\n   must follow the guidelines set by the IANA registry.\n      media-type
    \ = \"Media-Type\" \"=\" <per IANA guidelines>\n   Server-FTP implementations
    MUST NOT guess media type values.  Media\n   type values must be determined in
    an unambiguous way such as file\n   system tagging of media-type or by user configuration.
    \ This fact\n   gives information about the content of the file named.  Both the\n
    \  primary media type, and any appropriate subtype should be given,\n   separated
    by a slash \"/\" as is traditional.\n"
  title: 7.5.8.  The media-type Fact
- contents:
  - "7.5.9.  The charset Fact\n   The charset fact provides the IANA character set
    name, or alias, for\n   the encoded pathnames in a MLSx response.  The default
    character set\n   is UTF-8 unless specified otherwise.  FTP implementations SHOULD
    use\n   UTF-8 if possible to encourage maximum inter-operability.  The value\n
    \  of this fact applies to the pathname only, and provides no\n   information
    about the contents of the file.\n      charset-type  = \"Charset\" \"=\" token\n"
  title: 7.5.9.  The charset Fact
- contents:
  - "7.5.10.  Required Facts\n   Servers are not required to support any particular
    set of the\n   available facts.  However, servers SHOULD, if conceivably possible,\n
    \  support at least the type, perm, size, unique, and modify facts.\n"
  title: 7.5.10.  Required Facts
- contents:
  - "7.6.  System Dependent and Local Facts\n   By using an system dependent fact,
    or a local fact, a server-PI may\n   communicate to the user-PI information about
    the file named that is\n   peculiar to the underlying file system.\n"
  title: 7.6.  System Dependent and Local Facts
- contents:
  - "7.6.1.  System Dependent Facts\n   System dependent fact names are labeled by
    prefixing a label\n   identifying the specific information returned by the name
    of the\n   appropriate operating system from the IANA maintained list of\n   operating
    system names.\n   The value of an OS dependent fact may be whatever is appropriate
    to\n   convey the information available.  It must be encoded as a \"token\" as\n
    \  defined in section 2.1 however.\n   In order to allow reliable inter-operation
    between users of system\n   dependent facts, the IANA will maintain a registry
    of system\n   dependent fact names, their syntax, and the interpretation to be\n
    \  given to their values.  Registrations of system dependent facts are\n   to
    be accomplished according to the procedures of section 10.\n"
  title: 7.6.1.  System Dependent Facts
- contents:
  - "7.6.2.  Local Facts\n   Implementations may also make available other facts of
    their own\n   choosing.  As the method of interpretation of such information will\n
    \  generally not be widely understood, server-PIs should be aware that\n   clients
    will typically ignore any local facts provided.  As there is\n   no registration
    of locally defined facts, it is entirely possible\n   that different servers will
    use the same local fact name to provide\n   vastly different information.  Hence
    user-PIs should be hesitant\n   about making any use of any information in a locally
    defined fact\n   without some other specific assurance that the particular fact
    is one\n   that they do comprehend.\n   Local fact names all begin with the sequence
    \"X.\".  The rest of the\n   name is a \"token\" (see section 2.1).  The value
    of a local fact can\n   be anything at all, provided it can be encoded as a \"token\".\n"
  title: 7.6.2.  Local Facts
- contents:
  - "7.7.  MLSx Examples\n   The following examples are all taken from dialogues between
    existing\n   FTP clients and servers.  Because of this, not all possible\n   variations
    of possible response formats are shown in the examples.\n   This should not be
    taken as limiting the options of other server\n   implementors.  Where the examples
    show OS dependent information, that\n   is to be treated as being purely for the
    purposes of demonstration of\n   some possible OS specific information that could
    be defined.  As at\n   the time of the writing of this document, no OS specific
    facts or\n   file types have been defined, the examples shown here should not
    be\n   treated as in any way to be preferred over other possible similar\n   definitions.
    \ Consult the IANA registries to determine what types and\n   facts have been
    defined.  Finally also beware that as the examples\n   shown are taken from existing
    implementations, coded before this\n   document was completed, the possibility
    of variations between the\n   text of this document and the examples exists.  In
    any such case of\n   inconsistency, the example is to be treated as incorrect.\n
    \  In the examples shown, only relevant commands and responses have been\n   included.
    \ This is not to imply that other commands (including\n   authentication, directory
    modification, PORT or PASV commands, or\n   similar) would not be present in an
    actual connection, or were not,\n   in fact, actually used in the examples before
    editing.  Note also\n   that the formats shown are those that are transmitted
    between client\n   and server, not formats that would normally ever be reported
    to the\n   user of the client.\n"
  title: 7.7.  MLSx Examples
- contents:
  - '7.7.1.  Simple MLST

    '
  - 'C> PWD

    '
  - 'S> 257 "/tmp" is current directory.

    '
  - 'C> MLst cap60.pl198.tar.gz

    '
  - 'S> 250- Listing cap60.pl198.tar.gz

    '
  - 'S>  Type=file;Size=1024990;Perm=r; /tmp/cap60.pl198.tar.gz

    '
  - "S> 250 End\n   The client first asked to be told the current directory of the\n
    \  server.  This was purely for the purposes of clarity of this example.\n   The
    client then requested facts about a specific file.  The server\n   returned the
    \"250-\" first control-response line, followed by a single\n   line of facts about
    the file, followed by the terminating \"250 \"\n   line.  The text on the control-response
    line and the terminating line\n   can be anything the server decides to send.
    \ Notice that the fact\n   line is indented by a single space.  Notice also that
    there are no\n   spaces in the set of facts returned, until the single space before\n
    \  the file name.  The file name returned on the fact line is a fully\n   qualified
    pathname of the file listed.  The facts returned show that\n   the line refers
    to a file, that file contains approximately 1024990\n   bytes, though more or
    less than that may be transferred if the file\n   is retrieved, and a different
    number may be required to store the\n   file at the client's file store, and the
    connected user has\n   permission to retrieve the file but not to do anything
    else\n   particularly interesting.\n"
  title: 7.7.1.  Simple MLST
- contents:
  - '7.7.2.  MLST of a directory

    '
  - 'C> PWD

    '
  - 'S> 257 "/" is current directory.

    '
  - 'C> MLst tmp

    '
  - 'S> 250- Listing tmp

    '
  - 'S>  Type=dir;Modify=19981107085215;Perm=el; /tmp

    '
  - "S> 250 End\n   Again the PWD is just for the purposes of demonstration for the\n
    \  example.  The MLST fact line this time shows that the file listed is\n   a
    directory, that it was last modified at 08:52:15 on the 7th of\n   November, 1998
    UTC, and that the user has permission to enter the\n   directory, and to list
    its contents, but not to modify it in any way.\n   Again, the fully qualified
    pathname of the directory listed is given.\n"
  title: 7.7.2.  MLST of a directory
- contents:
  - '7.7.3.  MLSD of a directory

    '
  - 'C> MLSD tmp

    '
  - 'S> 150 BINARY connection open for MLSD tmp

    '
  - 'D> Type=cdir;Modify=19981107085215;Perm=el; tmp

    '
  - 'D> Type=cdir;Modify=19981107085215;Perm=el; /tmp

    '
  - 'D> Type=pdir;Modify=19990112030508;Perm=el; ..

    '
  - 'D> Type=file;Size=25730;Modify=19940728095854;Perm=; capmux.tar.z

    '
  - 'D> Type=file;Size=1830;Modify=19940916055648;Perm=r; hatch.c

    '
  - 'D> Type=file;Size=25624;Modify=19951003165342;Perm=r; MacIP-02.txt

    '
  - 'D> Type=file;Size=2154;Modify=19950501105033;Perm=r; uar.netbsd.patch

    '
  - 'D> Type=file;Size=54757;Modify=19951105101754;Perm=r; iptnnladev.1.0.sit.hqx

    '
  - 'D> Type=file;Size=226546;Modify=19970515023901;Perm=r; melbcs.tif

    '
  - 'D> Type=file;Size=12927;Modify=19961025135602;Perm=r; tardis.1.6.sit.hqx

    '
  - 'D> Type=file;Size=17867;Modify=19961025135602;Perm=r; timelord.1.4.sit.hqx

    '
  - 'D> Type=file;Size=224907;Modify=19980615100045;Perm=r; uar.1.2.3.sit.hqx

    '
  - 'D> Type=file;Size=1024990;Modify=19980130010322;Perm=r; cap60.pl198.tar.gz

    '
  - "S> 226 MLSD completed\n   In this example notice that there is no leading space
    on the fact\n   lines returned over the data connection.  Also notice that two
    lines\n   of \"type=cdir\" have been given.  These show two alternate names for\n
    \  the directory listed, one a fully qualified pathname, and the other a\n   local
    name relative to the servers current directory when the MLSD\n   was performed.
    \ Note that all other file names in the output are\n   relative to the directory
    listed, though the server could, if it\n   chose, give a fully qualified pathname
    for the \"type=pdir\" line.\n   This server has chosen not to.  The other files
    listed present a\n   fairly boring set of files that are present in the listed
    directory.\n   Note that there is no particular order in which they are listed.\n
    \  They are not sorted by file name, by size, or by modify time.  Note\n   also
    that the \"perm\" fact has an empty value for the file\n   \"capmux.tar.z\" indicating
    that the connected user has no permissions\n   at all for that file.  This server
    has chosen to present the \"cdir\"\n   and \"pdir\" lines before the lines showing
    the content of the\n   directory, it is not required to do so.  The \"size\" fact
    does not\n   provide any meaningful information for a directory, so is not\n   included
    in the fact lines for the directory types shown.\n"
  title: 7.7.3.  MLSD of a directory
- contents:
  - '7.7.4.  A More Complex Example

    '
  - 'C> MLst test

    '
  - 'S> 250- Listing test

    '
  - 'S>  Type=dir;Perm=el;Unique=keVO1+ZF4 test

    '
  - 'S> 250 End

    '
  - 'C> MLSD test

    '
  - 'S> 150 BINARY connection open for MLSD test

    '
  - 'D> Type=cdir;Perm=el;Unique=keVO1+ZF4; test

    '
  - 'D> Type=pdir;Perm=e;Unique=keVO1+d?3; ..

    '
  - 'D> Type=OS.unix=slink:/foobar;Perm=;Unique=keVO1+4G4; foobar

    '
  - 'D> Type=OS.unix=chr-13/29;Perm=;Unique=keVO1+5G4; device

    '
  - 'D> Type=OS.unix=blk-11/108;Perm=;Unique=keVO1+6G4; block

    '
  - 'D> Type=file;Perm=awr;Unique=keVO1+8G4; writable

    '
  - 'D> Type=dir;Perm=cpmel;Unique=keVO1+7G4; promiscuous

    '
  - 'D> Type=dir;Perm=;Unique=keVO1+1t2; no-exec

    '
  - 'D> Type=file;Perm=r;Unique=keVO1+EG4; two words

    '
  - 'D> Type=file;Perm=r;Unique=keVO1+IH4;  leading space

    '
  - 'D> Type=file;Perm=r;Unique=keVO1+1G4; file1

    '
  - 'D> Type=dir;Perm=cpmel;Unique=keVO1+7G4; incoming

    '
  - 'D> Type=file;Perm=r;Unique=keVO1+1G4; file2

    '
  - 'D> Type=file;Perm=r;Unique=keVO1+1G4; file3

    '
  - 'D> Type=file;Perm=r;Unique=keVO1+1G4; file4

    '
  - 'S> 226 MLSD completed

    '
  - 'C> MLSD test/incoming

    '
  - 'S> 150 BINARY connection open for MLSD test/incoming

    '
  - 'D> Type=cdir;Perm=cpmel;Unique=keVO1+7G4; test/incoming

    '
  - 'D> Type=pdir;Perm=el;Unique=keVO1+ZF4; ..

    '
  - 'D> Type=file;Perm=awdrf;Unique=keVO1+EH4; bar

    '
  - 'D> Type=file;Perm=awdrf;Unique=keVO1+LH4;

    '
  - 'D> Type=file;Perm=rf;Unique=keVO1+1G4; file5

    '
  - 'D> Type=file;Perm=rf;Unique=keVO1+1G4; file6

    '
  - 'D> Type=dir;Perm=cpmdelf;Unique=keVO1+!s2; empty

    '
  - "S> 226 MLSD completed\n   For the purposes of this example the fact set requested
    has been\n   modified to delete the \"size\" and \"modify\" facts, and add the\n
    \  \"unique\" fact.  First, facts about a file name have been obtained via\n   MLST.
    \ Note that no fully qualified pathname was given this time.\n   That was because
    the server was unable to determine that information.\n   Then having determined
    that the file name represents a directory,\n   that directory has been listed.
    \ That listing also shows no fully\n   qualified pathname, for the same reason,
    thus has but a single\n   \"type=cdir\" line.  This directory (which was created
    especially for\n   the purpose) contains several interesting files.  There are
    some with\n   OS dependent file types, several sub-directories, and several\n
    \  ordinary files.\n   Not much can be said here about the OS dependent file types,
    as none\n   of the information shown there should be treated as any more than\n
    \  possibilities.  It can be seen that the OS type of the server is\n   \"unix\"
    though, which is one of the OS types in the IANA registry of\n   Operating System
    names.\n   Of the three directories listed, \"no-exec\" has no permission granted\n
    \  to this user to access at all.  From the \"Unique\" fact values, it can\n   be
    determined that \"promiscuous\" and \"incoming\" in fact represent the\n   same
    directory.  Its permissions show that the connected user has\n   permission to
    do essentially anything other than to delete the\n   directory.  That directory
    was later listed.  It happens that the\n   directory can not be deleted because
    it is not empty.\n   Of the normal files listed, two contain spaces in their names.
    \ The\n   file called \" leading space\" actually contains two spaces in its\n
    \  name, one before the \"l\" and one between the \"g\" and the \"s\".  The\n
    \  two spaces that separate the facts from the visible part of the\n   pathname
    make that clear.  The file \"writable\" has the \"a\" and \"w\"\n   permission
    bits set, and consequently the connected user should be\n   able to STOR or APPE
    to that file.\n   The other four file names, \"file1\", \"file2\", \"file3\",
    and \"file4\" all\n   represent the same underlying file, as can be seen from
    the values of\n   the \"unique\" facts of each.  It happens that \"file1\" and
    \"file2\" are\n   Unix \"hard\" links, and that \"file3\" and \"file4\" are \"soft\"
    or\n   \"symbolic\" links to the first two.  None of that information is\n   available
    via standard MLST facts, it is sufficient for the purposes\n   of FTP to note
    that all represent the same file, and that the same\n   data would be fetched
    no matter which of them was retrieved, and that\n   all would be simultaneously
    modified were data stored in any.\n   Finally, the sub-directory \"incoming\"
    is listed.  Since \"promiscuous\"\n   is the same directory there would be no
    point listing it as well.  In\n   that directory, the files \"file5\" and \"file6\"
    represent still more\n   names for the \"file1\" file we have seen before.  Notice
    the entry\n   between that for \"bar\" and \"file5\".  Though it is not possible
    to\n   easily represent it in this document, that shows a file with a name\n   comprising
    exactly three spaces (\"   \").  A client will have no\n   difficulty determining
    that name from the output presented to it\n   however.  The directory \"empty\"
    is, as its name implies, empty,\n   though that is not shown here.  It can, however,
    be deleted, as can\n   file \"bar\" and the file whose name is three spaces.  All
    the files\n   that reside in this directory can be renamed.  This is a consequence\n
    \  of the UNIX semantics of the directory that contains them being\n   modifiable.\n"
  title: 7.7.4.  A More Complex Example
- contents:
  - '7.7.5.  More Accurate Time Information

    '
  - 'C> MLst file1

    '
  - 'S> 250- Listing file1

    '
  - 'S>  Type=file;Modify=19990929003355.237; file1

    '
  - "S> 250 End\n   In this example, the server-FTP is indicating that \"file1\" was
    last\n   modified 237 milliseconds after 00:33:55 UTC on the 29th of\n   September,
    1999.\n"
  title: 7.7.5.  More Accurate Time Information
- contents:
  - '7.7.6.  A Different Server

    '
  - 'C> MLST

    '
  - 'S> 250-Begin

    '
  - 'S>  type=dir;unique=AQkAAAAAAAABCAAA; /

    '
  - 'S> 250 End.

    '
  - 'C> MLSD

    '
  - 'S> 150 Opening ASCII mode data connection for MLS.

    '
  - 'D> type=cdir;unique=AQkAAAAAAAABCAAA; /

    '
  - 'D> type=dir;unique=AQkAAAAAAAABEAAA; bin

    '
  - 'D> type=dir;unique=AQkAAAAAAAABGAAA; etc

    '
  - 'D> type=dir;unique=AQkAAAAAAAAB8AwA; halflife

    '
  - 'D> type=dir;unique=AQkAAAAAAAABoAAA; incoming

    '
  - 'D> type=dir;unique=AQkAAAAAAAABIAAA; lib

    '
  - 'D> type=dir;unique=AQkAAAAAAAABWAEA; linux

    '
  - 'D> type=dir;unique=AQkAAAAAAAABKAEA; ncftpd

    '
  - 'D> type=dir;unique=AQkAAAAAAAABGAEA; outbox

    '
  - 'D> type=dir;unique=AQkAAAAAAAABuAAA; quake2

    '
  - 'D> type=dir;unique=AQkAAAAAAAABQAEA; winstuff

    '
  - 'S> 226 Listing completed.

    '
  - 'C> MLSD linux

    '
  - 'S> 150 Opening ASCII mode data connection for MLS.

    '
  - 'D> type=cdir;unique=AQkAAAAAAAABWAEA; /linux

    '
  - 'D> type=pdir;unique=AQkAAAAAAAABCAAA; /

    '
  - 'D> type=dir;unique=AQkAAAAAAAABeAEA; firewall

    '
  - 'D> type=file;size=12;unique=AQkAAAAAAAACWAEA; helo_world

    '
  - 'D> type=dir;unique=AQkAAAAAAAABYAEA; kernel

    '
  - 'D> type=dir;unique=AQkAAAAAAAABmAEA; scripts

    '
  - 'D> type=dir;unique=AQkAAAAAAAABkAEA; security

    '
  - 'S> 226 Listing completed.

    '
  - 'C> MLSD linux/kernel

    '
  - 'S> 150 Opening ASCII mode data connection for MLS.

    '
  - 'D> type=cdir;unique=AQkAAAAAAAABYAEA; /linux/kernel

    '
  - 'D> type=pdir;unique=AQkAAAAAAAABWAEA; /linux

    '
  - 'D> type=file;size=6704;unique=AQkAAAAAAAADYAEA; k.config

    '
  - 'D> type=file;size=7269221;unique=AQkAAAAAAAACYAEA; linux-2.0.36.tar.gz

    '
  - 'D> type=file;size=12514594;unique=AQkAAAAAAAAEYAEA; linux-2.1.130.tar.gz

    '
  - "S> 226 Listing completed.\n   Note that this server returns its \"unique\" fact
    value in quite a\n   different format.  It also returns fully qualified pathnames
    for the\n   \"pdir\" entry.\n"
  title: 7.7.6.  A Different Server
- contents:
  - '7.7.7.  Some IANA Files

    '
  - 'C> MLSD

    '
  - 'S> 150 BINARY connection open for MLSD .

    '
  - 'D> Type=cdir;Modify=19990219183438; /iana/assignments

    '
  - 'D> Type=pdir;Modify=19990112030453; ..

    '
  - 'D> Type=dir;Modify=19990219073522; media-types

    '
  - 'D> Type=dir;Modify=19990112033515; character-set-info

    '
  - 'D> Type=dir;Modify=19990112033529; languages

    '
  - 'D> Type=file;Size=44242;Modify=19990217230400; character-sets

    '
  - 'D> Type=file;Size=1947;Modify=19990209215600; operating-system-names

    '
  - 'S> 226 MLSD completed

    '
  - 'C> MLSD media-types

    '
  - 'S> 150 BINARY connection open for MLSD media-types

    '
  - 'D> Type=cdir;Modify=19990219073522; media-types

    '
  - 'D> Type=cdir;Modify=19990219073522; /iana/assignments/media-types

    '
  - 'D> Type=pdir;Modify=19990219183438; ..

    '
  - 'D> Type=dir;Modify=19990112033045; text

    '
  - 'D> Type=dir;Modify=19990219183442; image

    '
  - 'D> Type=dir;Modify=19990112033216; multipart

    '
  - 'D> Type=dir;Modify=19990112033254; video

    '
  - 'D> Type=file;Size=30249;Modify=19990218032700; media-types

    '
  - 'S> 226 MLSD completed

    '
  - 'C> MLSD character-set-info

    '
  - 'S> 150 BINARY connection open for MLSD character-set-info

    '
  - 'D> Type=cdir;Modify=19990112033515; character-set-info

    '
  - 'D> Type=cdir;Modify=19990112033515; /iana/assignments/character-set-info

    '
  - 'D> Type=pdir;Modify=19990219183438; ..

    '
  - 'D> Type=file;Size=1234;Modify=19980903020400; windows-1251

    '
  - 'D> Type=file;Size=4557;Modify=19980922001400; tis-620

    '
  - 'D> Type=file;Size=801;Modify=19970324130000; ibm775

    '
  - 'D> Type=file;Size=552;Modify=19970320130000; ibm866

    '
  - 'D> Type=file;Size=922;Modify=19960505140000; windows-1258

    '
  - 'S> 226 MLSD completed

    '
  - 'C> MLSD languages

    '
  - 'S> 150 BINARY connection open for MLSD languages

    '
  - 'D> Type=cdir;Modify=19990112033529; languages

    '
  - 'D> Type=cdir;Modify=19990112033529; /iana/assignments/languages

    '
  - 'D> Type=pdir;Modify=19990219183438; ..

    '
  - 'D> Type=file;Size=2391;Modify=19980309130000; default

    '
  - 'D> Type=file;Size=943;Modify=19980309130000; tags

    '
  - 'D> Type=file;Size=870;Modify=19971026130000; navajo

    '
  - 'D> Type=file;Size=699;Modify=19950911140000; no-bok

    '
  - 'S> 226 MLSD completed

    '
  - 'C> PWD

    '
  - "S> 257 \"/iana/assignments\" is current directory.\n   This example shows some
    of the IANA maintained files that are\n   relevant for this specification in MLSD
    format.  Note that these\n   listings have been edited by deleting many entries,
    the actual\n   listings are much longer.\n"
  title: 7.7.7.  Some IANA Files
- contents:
  - "7.7.8.  A Stress Test of Case (In)dependence\n   The following example is intended
    to make clear some cases where case\n   dependent strings are permitted in the
    MLSx commands, and where case\n   independent strings are required.\n   Note first
    that the \"MLSD\" command, shown here as \"MlsD\" is case\n   independent.  Clients
    may issue this command in any case, or\n   combination of cases, they desire.
    \ This is the case for all FTP\n   commands.\n"
  - 'C> MlsD

    '
  - 'S> 150 BINARY connection open for MLSD .

    '
  - 'D> Type=pdir;Modify=19990929011228;Perm=el;Unique=keVO1+ZF4; ..

    '
  - 'D> Type=file;Size=4096;Modify=19990929011440;Perm=r;Unique=keVO1+Bd8; FILE2

    '
  - 'D> Type=file;Size=4096;Modify=19990929011440;Perm=r;Unique=keVO1+aG8; file3

    '
  - 'D> Type=file;Size=4096;Modify=19990929011440;Perm=r;Unique=keVO1+ag8; FILE3

    '
  - 'D> Type=file;Size=4096;Modify=19990929011440;Perm=r;Unique=keVO1+bD8; file1

    '
  - 'D> Type=file;Size=4096;Modify=19990929011440;Perm=r;Unique=keVO1+bD8; file2

    '
  - 'D> Type=file;Size=4096;Modify=19990929011440;Perm=r;Unique=keVO1+Ag8; File3

    '
  - 'D> Type=file;Size=4096;Modify=19990929011440;Perm=r;Unique=keVO1+bD8; File1

    '
  - 'D> Type=file;Size=4096;Modify=19990929011440;Perm=r;Unique=keVO1+Bd8; File2

    '
  - 'D> Type=file;Size=4096;Modify=19990929011440;Perm=r;Unique=keVO1+bd8; FILE1

    '
  - "S> 226 MLSD completed\n   Next, notice the labels of the facts.  These are also
    case-\n   independent strings; the server-FTP is permitted to return them in\n
    \  any case desired.  User-FTP must be prepared to deal with any case,\n   though
    it may do this by mapping the labels to a common case if\n   desired.\n   Then,
    notice that there are nine objects of \"type\" file returned.  In\n   a case-independent
    NVFS these would represent three different file\n   names, \"file1\", \"file2\",
    and \"file3\".  With a case-dependent NVFS all\n   nine represent different file
    names.  Either is possible, server-FTPs\n   may implement a case dependent or
    a case independent NVFS.  User-FTPs\n   must allow for case dependent selection
    of files to manipulate on the\n   server.\n   Lastly, notice that the value of
    the \"unique\" fact is case dependent.\n   In the example shown, \"file1\", \"File1\",
    and \"file2\" all have the same\n   \"unique\" fact value \"keVO1+bD8\", and thus
    all represent the same\n   underlying file.  On the other hand, \"FILE1\" has
    a different \"unique\"\n   fact value (\"keVO1+bd8\") and hence represents a different
    file.\n   Similarly, \"FILE2\" and \"File2\" are two names for the same underlying\n
    \  file, whereas \"file3\", \"File3\" and \"FILE3\" all represent different\n
    \  underlying files.\n   That the approximate sizes (\"size\" fact) and last modification
    times\n   (\"modify\" fact) are the same in all cases might be no more than a\n
    \  coincidence.\n   It is not suggested that the operators of server-FTPs create
    an NVFS\n   that stresses the protocols to this extent; however, both user and\n
    \  server implementations must be prepared to deal with such extreme\n   examples.\n"
  title: 7.7.8.  A Stress Test of Case (In)dependence
- contents:
  - '7.7.9.  Example from Another Server

    '
  - 'C> MlsD

    '
  - 'S> 150 File Listing Follows in IMAGE / Binary mode.

    '
  - 'D> type=cdir;modify=19990426150227;perm=el; /MISC

    '
  - 'D> type=pdir;modify=19791231130000;perm=el; /

    '
  - 'D> type=dir;modify=19990426150227;perm=el; CVS

    '
  - 'D> type=dir;modify=19990426150228;perm=el; SRC

    '
  - 'S> 226 Transfer finished successfully.

    '
  - 'C> MlsD src

    '
  - 'S> 150 File Listing Follows in IMAGE / Binary mode.

    '
  - 'D> type=cdir;modify=19990426150228;perm=el; /MISC/src

    '
  - 'D> type=pdir;modify=19990426150227;perm=el; /MISC

    '
  - 'D> type=dir;modify=19990426150228;perm=el; CVS

    '
  - 'D> type=dir;modify=19990426150228;perm=el; INSTALL

    '
  - 'D> type=dir;modify=19990426150230;perm=el; INSTALLI

    '
  - 'D> type=dir;modify=19990426150230;perm=el; TREES

    '
  - 'S> 226 Transfer finished successfully.

    '
  - 'C> MlsD src/install

    '
  - 'S> 150 File Listing Follows in IMAGE / Binary mode.

    '
  - 'D> type=cdir;modify=19990426150228;perm=el; /MISC/src/install

    '
  - 'D> type=pdir;modify=19990426150228;perm=el; /MISC/src

    '
  - 'D> type=file;modify=19990406234304;perm=r;size=20059; BOOTPC.C

    '
  - 'D> type=file;modify=19980401170153;perm=r;size=278; BOOTPC.H

    '
  - 'D> type=file;modify=19990413153736;perm=r;size=54220; BOOTPC.O

    '
  - 'D> type=file;modify=19990223044003;perm=r;size=3389; CDROM.C

    '
  - 'D> type=file;modify=19990413153739;perm=r;size=30192; CDROM.O

    '
  - 'D> type=file;modify=19981119155324;perm=r;size=1055; CHANGELO

    '
  - 'D> type=file;modify=19981204171040;perm=r;size=8297; COMMANDS.C

    '
  - "D> type=file;modify=19980508041749;perm=r;size=580; COMMANDS.H\n                                                 ...\n"
  - 'D> type=file;modify=19990419052351;perm=r;size=54264; URLMETHO.O

    '
  - 'D> type=file;modify=19980218161629;perm=r;size=993; WINDOWS.C

    '
  - 'D> type=file;modify=19970912154859;perm=r;size=146; WINDOWS.H

    '
  - 'D> type=file;modify=19990413153731;perm=r;size=16812; WINDOWS.O

    '
  - 'D> type=file;modify=19990322174959;perm=r;size=129; _CVSIGNO

    '
  - 'D> type=file;modify=19990413153640;perm=r;size=82536; _DEPEND

    '
  - 'S> 226 Transfer finished successfully.

    '
  - 'C> MLst src/install/windows.c

    '
  - 'S> 250-Listing src/install/windows.c

    '
  - 'S>  type=file;perm=r;size=993; /misc/src/install/windows.c

    '
  - 'S> 250 End

    '
  - 'S> ftp> mlst SRC/INSTALL/WINDOWS.C

    '
  - 'C> MLst SRC/INSTALL/WINDOWS.C

    '
  - 'S> 250-Listing SRC/INSTALL/WINDOWS.C

    '
  - 'S>  type=file;perm=r;size=993; /misc/SRC/INSTALL/WINDOWS.C

    '
  - "S> 250 End\n   Note that this server gives fully qualified pathnames for the
    \"pdir\"\n   and \"cdir\" entries in MLSD listings.  Also notice that this server\n
    \  does, though it is not required to, sort its directory listing\n   outputs.
    \ That may be an artifact of the underlying file system\n   access mechanisms
    of course.  Finally notice that the NVFS supported\n   by this server, in contrast
    to the earlier ones, implements its\n   pathnames in a case independent manner.
    \ The server seems to return\n   files using the case in which they were requested,
    when the name was\n   sent by the client, and otherwise uses an algorithm known
    only to\n   itself to select the case of the names it returns.\n"
  title: 7.7.9.  Example from Another Server
- contents:
  - '7.7.10.  A Server Listing Itself

    '
  - 'C> MLst f

    '
  - 'S> 250-MLST f

    '
  - 'S>  Type=dir;Modify=20000710052229;Unique=AAD/AAAABIA; f

    '
  - 'S> 250 End

    '
  - 'C> CWD f

    '
  - 'S> 250 CWD command successful.

    '
  - 'C> MLSD

    '
  - 'S> 150 Opening ASCII mode data connection for ''MLSD''.

    '
  - 'D> Type=cdir;Unique=AAD/AAAABIA; .

    '
  - 'D> Type=pdir;Unique=AAD/AAAAAAI; ..

    '
  - 'D> Type=file;Size=987;Unique=AAD/AAAABIE; Makefile

    '
  - 'D> Type=file;Size=20148;Unique=AAD/AAAABII; conf.c

    '
  - 'D> Type=file;Size=11111;Unique=AAD/AAAABIM; extern.h

    '
  - 'D> Type=file;Size=38721;Unique=AAD/AAAABIQ; ftpcmd.y

    '
  - 'D> Type=file;Size=17922;Unique=AAD/AAAABIU; ftpd.8

    '
  - 'D> Type=file;Size=60732;Unique=AAD/AAAABIY; ftpd.c

    '
  - 'D> Type=file;Size=3127;Unique=AAD/AAAABIc; logwtmp.c

    '
  - 'D> Type=file;Size=2294;Unique=AAD/AAAABIg; pathnames.h

    '
  - 'D> Type=file;Size=7605;Unique=AAD/AAAABIk; popen.c

    '
  - 'D> Type=file;Size=9951;Unique=AAD/AAAABIo; ftpd.conf.5

    '
  - 'D> Type=file;Size=5023;Unique=AAD/AAAABIs; ftpusers.5

    '
  - 'D> Type=file;Size=3547;Unique=AAD/AAAABIw; logutmp.c

    '
  - 'D> Type=file;Size=2064;Unique=AAD/AAAABI0; version.h

    '
  - 'D> Type=file;Size=20420;Unique=AAD/AAAAAAM; cmds.c

    '
  - 'D> Type=file;Size=15864;Unique=AAD/AAAAAAg; ls.c

    '
  - 'D> Type=file;Size=2898;Unique=AAD/AAAAAAk; ls.h

    '
  - 'D> Type=file;Size=2769;Unique=AAD/AAAAAAo; lsextern.h

    '
  - 'D> Type=file;Size=2042;Unique=AAD/AAAAAAs; stat_flags.h

    '
  - 'D> Type=file;Size=5708;Unique=AAD/AAAAAAw; cmp.c

    '
  - 'D> Type=file;Size=9280;Unique=AAD/AAAAAA0; print.c

    '
  - 'D> Type=file;Size=4657;Unique=AAD/AAAAAA4; stat_flags.c

    '
  - 'D> Type=file;Size=2664;Unique=AAD/AAAAAA8; util.c

    '
  - 'D> Type=file;Size=10383;Unique=AAD/AAAABJ0; ftpd.conf.cat5

    '
  - 'D> Type=file;Size=3631;Unique=AAD/AAAABJ4; ftpusers.cat5

    '
  - 'D> Type=file;Size=17729;Unique=AAD/AAAABJ8; ftpd.cat8

    '
  - "S> 226 MLSD complete.\n   This examples shows yet another server implementation,
    showing a\n   listing of its own source code.  Note that this implementation does\n
    \  not include the fully qualified path name in its \"cdir\" and \"pdir\"\n   entries,
    nor in the output from \"MLST\".  Also note that the facts\n   requested were
    modified between the \"MLST\" and \"MLSD\" commands,\n   though that exchange
    has not been shown here.\n"
  title: 7.7.10.  A Server Listing Itself
- contents:
  - '7.7.11.  A Server with a Difference

    '
  - 'C> PASV

    '
  - 'S> 227 Entering Passive Mode (127,0,0,1,255,46)

    '
  - 'C> MLSD

    '
  - 'S> 150 I tink I tee a trisector tree

    '
  - 'D> Type=file;Unique=aaaaafUYqaaa;Perm=rf;Size=15741; x

    '
  - 'D> Type=cdir;Unique=aaaaacUYqaaa;Perm=cpmel; /

    '
  - 'D> Type=file;Unique=aaaaajUYqaaa;Perm=rf;Size=5760; x4

    '
  - 'D> Type=dir;Unique=aaabcaUYqaaa;Perm=elf; sub

    '
  - 'D> Type=file;Unique=aaaaagUYqaaa;Perm=rf;Size=8043; x1

    '
  - 'D> Type=dir;Unique=aaab8aUYqaaa;Perm=cpmelf; files

    '
  - 'D> Type=file;Unique=aaaaahUYqaaa;Perm=rf;Size=4983; x2

    '
  - 'D> Type=file;Unique=aaaaaiUYqaaa;Perm=rf;Size=6854; x3

    '
  - 'S> 226 That''s all folks...

    '
  - 'C> CWD sub

    '
  - 'S> 250 CWD command successful.

    '
  - 'C> PWD

    '
  - 'S> 257 "/sub" is current directory.

    '
  - 'C> PASV

    '
  - 'S> 227 Entering Passive Mode (127,0,0,1,255,44)

    '
  - 'C> MLSD

    '
  - 'S> 150 I tink I tee a trisector tree

    '
  - 'D> Type=dir;Unique=aaabceUYqaaa;Perm=elf; dir

    '
  - 'D> Type=file;Unique=aaabcbUYqaaa;Perm=rf;Size=0; y1

    '
  - 'D> Type=file;Unique=aaabccUYqaaa;Perm=rf;Size=0; y2

    '
  - 'D> Type=file;Unique=aaabcdUYqaaa;Perm=rf;Size=0; y3

    '
  - 'D> Type=pdir;Unique=aaaaacUYqaaa;Perm=cpmel; /

    '
  - 'D> Type=pdir;Unique=aaaaacUYqaaa;Perm=cpmel; ..

    '
  - 'D> Type=cdir;Unique=aaabcaUYqaaa;Perm=el; /sub

    '
  - 'S> 226 That''s all folks...

    '
  - 'C> PASV

    '
  - 'S> 227 Entering Passive Mode (127,0,0,1,255,42)

    '
  - 'C> MLSD dir

    '
  - 'S> 150 I tink I tee a trisector tree

    '
  - 'D> Type=pdir;Unique=aaabcaUYqaaa;Perm=el; /sub

    '
  - 'D> Type=pdir;Unique=aaabcaUYqaaa;Perm=el; ..

    '
  - 'D> Type=file;Unique=aaab8cUYqaaa;Perm=r;Size=15039; mlst.c

    '
  - 'D> Type=dir;Unique=aaabcfUYqaaa;Perm=el; ect

    '
  - 'D> Type=cdir;Unique=aaabceUYqaaa;Perm=el; dir

    '
  - 'D> Type=cdir;Unique=aaabceUYqaaa;Perm=el; /sub/dir

    '
  - 'D> Type=dir;Unique=aaabchUYqaaa;Perm=el; misc

    '
  - 'D> Type=file;Unique=aaab8bUYqaaa;Perm=r;Size=34589; ftpd.c

    '
  - 'S> 226 That''s all folks...

    '
  - 'C> CWD dir/ect

    '
  - 'S> 250 CWD command successful.

    '
  - 'C> PWD

    '
  - 'S> 257 "/sub/dir/ect" is current directory.

    '
  - 'C> PASV

    '
  - 'S> 227 Entering Passive Mode (127,0,0,1,255,40)

    '
  - 'C> MLSD

    '
  - 'S> 150 I tink I tee a trisector tree

    '
  - 'D> Type=dir;Unique=aaabcgUYqaaa;Perm=el; ory

    '
  - 'D> Type=pdir;Unique=aaabceUYqaaa;Perm=el; /sub/dir

    '
  - 'D> Type=pdir;Unique=aaabceUYqaaa;Perm=el; ..

    '
  - 'D> Type=cdir;Unique=aaabcfUYqaaa;Perm=el; /sub/dir/ect

    '
  - 'S> 226 That''s all folks...

    '
  - 'C> CWD /files

    '
  - 'S> 250 CWD command successful.

    '
  - 'C> PASV

    '
  - 'S> 227 Entering Passive Mode (127,0,0,1,255,36)

    '
  - 'C> MLSD

    '
  - 'S> 150 I tink I tee a trisector tree

    '
  - 'D> Type=cdir;Unique=aaab8aUYqaaa;Perm=cpmel; /files

    '
  - 'D> Type=pdir;Unique=aaaaacUYqaaa;Perm=cpmel; /

    '
  - 'D> Type=pdir;Unique=aaaaacUYqaaa;Perm=cpmel; ..

    '
  - 'D> Type=file;Unique=aaab8cUYqaaa;Perm=rf;Size=15039; mlst.c

    '
  - 'D> Type=file;Unique=aaab8bUYqaaa;Perm=rf;Size=34589; ftpd.c

    '
  - 'S> 226 That''s all folks...

    '
  - 'C> RNFR mlst.c

    '
  - 'S> 350 File exists, ready for destination name

    '
  - 'C> RNTO list.c

    '
  - 'S> 250 RNTO command successful.

    '
  - 'C> PASV

    '
  - 'S> 227 Entering Passive Mode (127,0,0,1,255,34)

    '
  - 'C> MLSD

    '
  - 'S> 150 I tink I tee a trisector tree

    '
  - 'D> Type=file;Unique=aaab8cUYqaaa;Perm=rf;Size=15039; list.c

    '
  - 'D> Type=pdir;Unique=aaaaacUYqaaa;Perm=cpmel; /

    '
  - 'D> Type=pdir;Unique=aaaaacUYqaaa;Perm=cpmel; ..

    '
  - 'D> Type=file;Unique=aaab8bUYqaaa;Perm=rf;Size=34589; ftpd.c

    '
  - 'D> Type=cdir;Unique=aaab8aUYqaaa;Perm=cpmel; /files

    '
  - "S> 226 That's all folks...\n   The server shown here returns its directory listings
    in seemingly\n   random order, and even seems to modify the order of the directory
    as\n   its contents change -- perhaps the underlying directory structure is\n
    \  based upon hashing of some kind.  Note that the \"pdir\" and \"cdir\"\n   entries
    are interspersed with other entries in the directory.  Note\n   also that this
    server does not show a \"pdir\" entry when listing the\n   contents of the root
    directory of the virtual filestore; however, it\n   does however include multiple
    \"cdir\" and \"pdir\" entries when it feels\n   inclined.  The server also uses
    obnoxiously \"cute\" messages.\n"
  title: 7.7.11.  A Server with a Difference
- contents:
  - "7.8.  FEAT Response for MLSx\n   When responding to the FEAT command, a server-FTP
    process that\n   supports MLST, and MLSD, plus internationalization of pathnames,
    MUST\n   indicate that this support exists.  It does this by including a MLST\n
    \  feature line.  As well as indicating the basic support, the MLST\n   feature
    line indicates which MLST facts are available from the\n   server, and which of
    those will be returned if no subsequent \"OPTS\n   MLST\" command is sent.\n      mlst-feat
    \    = SP \"MLST\" [SP factlist] CRLF\n      factlist      = 1*( factname [\"*\"]
    \";\" )\n   The initial space shown in the mlst-feat response is that required
    by\n   the FEAT command, two spaces are not permitted.  If no factlist is\n   given,
    then the server-FTP process is indicating that it supports\n   MLST, but implements
    no facts.  Only pathnames can be returned.  This\n   would be a minimal MLST implementation,
    and useless for most\n   practical purposes.  Where the factlist is present, the
    factnames\n   included indicate the facts supported by the server.  Where the\n
    \  optional asterisk appears after a factname, that fact will be\n   included
    in MLST format responses, until an \"OPTS MLST\" is given to\n   alter the list
    of facts returned.  After that, subsequent FEAT\n   commands will return the asterisk
    to show the facts selected by the\n   most recent \"OPTS MLST\".\n   Note that
    there is no distinct FEAT output for MLSD.  The presence of\n   the MLST feature
    indicates that both MLST and MLSD are supported.\n"
  title: 7.8.  FEAT Response for MLSx
- contents:
  - '7.8.1.  Examples

    '
  - 'C> Feat

    '
  - 'S> 211- Features supported

    '
  - 'S>  REST STREAM

    '
  - 'S>  MDTM

    '
  - 'S>  SIZE

    '
  - 'S>  TVFS

    '
  - 'S>  UTF8

    '
  - 'S>  MLST Type*;Size*;Modify*;Perm*;Unique*;UNIX.mode;UNIX.chgd;X.hidden;

    '
  - "S> 211 End\n   Aside from some features irrelevant here, this server indicates
    that\n   it supports MLST including several, but not all, standard facts, all\n
    \  of which it will send by default.  It also supports two OS dependent\n   facts,
    and one locally defined fact.  The latter three must be\n   requested expressly
    by the client for this server to supply them.\n"
  - 'C> Feat

    '
  - 'S> 211-Extensions supported:

    '
  - 'S>  CLNT

    '
  - 'S>  MDTM

    '
  - 'S>  MLST type*;size*;modify*;UNIX.mode*;UNIX.owner;UNIX.group;unique;

    '
  - 'S>  PASV

    '
  - 'S>  REST STREAM

    '
  - 'S>  SIZE

    '
  - 'S>  TVFS

    '
  - 'S>  Compliance Level: 19981201 (IETF mlst-05)

    '
  - "S> 211 End.\n   Again, in addition to some irrelevant features here, this server\n
    \  indicates that it supports MLST, four of the standard facts, one of\n   which
    (\"unique\") is not enabled by default, and several OS dependent\n   facts, one
    of which is provided by the server by default.  This\n   server actually supported
    more OS dependent facts.  Others were\n   deleted for the purposes of this document
    to comply with document\n   formatting restrictions.\n"
  - 'C> FEAT

    '
  - 'S> 211-Features supported

    '
  - 'S>  MDTM

    '
  - 'S>  MLST Type*;Size*;Modify*;Perm;Unique*;

    '
  - 'S>  REST STREAM

    '
  - 'S>  SIZE

    '
  - 'S>  TVFS

    '
  - "S> 211 End\n   This server has wisely chosen not to implement any OS dependent\n
    \  facts.  At the time of writing this document, no such facts have been\n   defined
    (using the mechanisms of section 10.1) so rational support\n   for them would
    be difficult at best.  All but one of the facts\n   supported by this server are
    enabled by default.\n"
  title: 7.8.1.  Examples
- contents:
  - "7.9.  OPTS Parameters for MLST\n   For the MLSx commands, the Client-FTP may
    specify a list of facts it\n   wishes to be returned in all subsequent MLSx commands
    until another\n   OPTS MLST command is sent.  The format is specified by:\n      mlst-opts
    \    = \"OPTS\" SP \"MLST\"\n                      [ SP 1*( factname \";\" ) ]\n
    \  By sending the \"OPTS MLST\" command, the client requests the server to\n   include
    only the facts listed as arguments to the command in\n   subsequent output from
    MLSx commands.  Facts not included in the\n   \"OPTS MLST\" command MUST NOT be
    returned by the server.  Facts that\n   are included should be returned for each
    entry returned from the MLSx\n   command where they meaningfully apply.  Facts
    requested that are not\n   supported, or that are inappropriate to the file or
    directory being\n   listed should simply be omitted from the MLSx output.  This
    is not an\n   error.  Note that where no factname arguments are present, the client\n
    \  is requesting that only the file names be returned.  In this case,\n   and
    in any other case where no facts are included in the result, the\n   space that
    separates the fact names and their values from the file\n   name is still required.
    \ That is, the first character of the output\n   line will be a space, (or two
    characters will be spaces when the line\n   is returned over the control connection)
    and the file name will start\n   immediately thereafter.\n   Clients should note
    that generating values for some facts can be\n   possible, but very expensive,
    for some servers.  It is generally\n   acceptable to retrieve any of the facts
    that the server offers as its\n   default set before any \"OPTS MLST\" command
    has been given, however\n   clients should use particular caution before requesting
    any facts not\n   in that set.  That is, while other facts may be available from
    the\n   server, clients should refrain from requesting such facts unless\n   there
    is a particular operational requirement for that particular\n   information, which
    ought be more significant than perhaps simply\n   improving the information displayed
    to an end user.\n   Note, there is no \"OPTS MLSD\" command, the fact names set
    with the\n   \"OPTS MLST\" command apply to both MLST and MLSD commands.\n   Servers
    are not required to accept \"OPTS MLST\" commands before\n   authentication of
    the user-PI, but may choose to permit them.\n"
  title: 7.9.  OPTS Parameters for MLST
- contents:
  - "7.9.1.  OPTS MLST Response\n   The \"response-message\" from [6] to a successful
    OPTS MLST command has\n   the following syntax.\n      mlst-opt-resp = \"MLST
    OPTS\" [ SP 1*( factname \";\" ) ]\n   This defines the \"response-message\" as
    used in the \"opts-good\"\n   message in RFC 2389 [6].\n   The facts named in
    the response are those that the server will now\n   include in MLST (and MLSD)
    response, after the processing of the\n   \"OPTS MLST\" command.  Any facts from
    the request not supported by the\n   server will be omitted from this response
    message.  If no facts will\n   be included, the list of facts will be empty.  Note
    that the list of\n   facts returned will be the same as those marked by a trailing\n
    \  asterisk (\"*\") in a subsequent FEAT command response.  There is no\n   requirement
    that the order of the facts returned be the same as that\n   in which they were
    requested, or that in which they will be listed in\n   a FEAT command response,
    or that in which facts are returned in MLST\n   responses.  The fixed string \"MLST
    OPTS\" in the response may be\n   returned in any case, or mixture of cases.\n"
  title: 7.9.1.  OPTS MLST Response
- contents:
  - '7.9.2.  Examples

    '
  - 'C> Feat

    '
  - 'S> 211- Features supported

    '
  - 'S>  MLST Type*;Size;Modify*;Perm;Unique;UNIX.mode;UNIX.chgd;X.hidden;

    '
  - 'S> 211 End

    '
  - 'C> OptS Mlst Type;UNIX.mode;Perm;

    '
  - 'S> 200 MLST OPTS Type;Perm;UNIX.mode;

    '
  - 'C> Feat

    '
  - 'S> 211- Features supported

    '
  - 'S>  MLST Type*;Size;Modify;Perm*;Unique;UNIX.mode*;UNIX.chgd;X.hidden;

    '
  - 'S> 211 End

    '
  - 'C> opts MLst lang;type;charset;create;

    '
  - 'S> 200 MLST OPTS Type;

    '
  - 'C> Feat

    '
  - 'S> 211- Features supported

    '
  - 'S>  MLST Type*;Size;Modify;Perm;Unique;UNIX.mode;UNIX.chgd;X.hidden;

    '
  - 'S> 211 End

    '
  - 'C> OPTS mlst size;frogs;

    '
  - 'S> 200 MLST OPTS Size;

    '
  - 'C> Feat

    '
  - 'S> 211- Features supported

    '
  - 'S>  MLST Type;Size*;Modify;Perm;Unique;UNIX.mode;UNIX.chgd;X.hidden;

    '
  - 'S> 211 End

    '
  - 'C> opts MLst unique type;

    '
  - 'S> 501 Invalid MLST options

    '
  - 'C> Feat

    '
  - 'S> 211- Features supported

    '
  - 'S>  MLST Type;Size*;Modify;Perm;Unique;UNIX.mode;UNIX.chgd;X.hidden;

    '
  - "S> 211 End\n   For the purposes of this example, features other than MLST have
    been\n   deleted from the output to avoid clutter.  The example shows the\n   initial
    default feature output for MLST.  The facts requested are\n   then changed by
    the client.  The first change shows facts that are\n   available from the server
    being selected.  Subsequent FEAT output\n   shows the altered features as being
    returned.  The client then\n   attempts to select some standard features that
    the server does not\n   support.  This is not an error, however the server simply
    ignores the\n   requests for unsupported features, as the FEAT output that follows\n
    \  shows.  Then, the client attempts to request a non-standard, and\n   unsupported,
    feature.  The server ignores that, and selects only the\n   supported features
    requested.  Lastly, the client sends a request\n   containing a syntax error (spaces
    cannot appear in the factlist.)\n   The server-FTP sends an error response and
    completely ignores the\n   request, leaving the fact set selected as it had been
    previously.\n   Note that in all cases, except the error response, the response
    lists\n   the facts that have been selected.\n"
  - 'C> Feat

    '
  - 'S> 211- Features supported

    '
  - 'S>  MLST Type*;Size*;Modify*;Perm*;Unique*;UNIX.mode;UNIX.chgd;X.hidden;

    '
  - 'S> 211 End

    '
  - 'C> Opts MLST

    '
  - 'S> 200 MLST OPTS

    '
  - 'C> Feat

    '
  - 'S> 211- Features supported

    '
  - 'S>  MLST Type;Size;Modify;Perm;Unique;UNIX.mode;UNIX.chgd;X.hidden;

    '
  - 'S> 211 End

    '
  - 'C> MLst tmp

    '
  - 'S> 250- Listing tmp

    '
  - 'S>   /tmp

    '
  - 'S> 250 End

    '
  - 'C> OPTS mlst unique;size;

    '
  - 'S> 200 MLST OPTS Size;Unique;

    '
  - 'C>  MLst tmp

    '
  - 'S> 250- Listing tmp

    '
  - 'S>  Unique=keVO1+YZ5; /tmp

    '
  - 'S> 250 End

    '
  - 'C> OPTS mlst unique;type;modify;

    '
  - 'S> 200 MLST OPTS Type;Modify;Unique;

    '
  - 'C> MLst tmp

    '
  - 'S> 250- Listing tmp

    '
  - 'S>  Type=dir;Modify=19990930152225;Unique=keVO1+YZ5; /tmp

    '
  - 'S> 250 End

    '
  - 'C> OPTS mlst fish;cakes;

    '
  - 'S> 200 MLST OPTS

    '
  - 'C> MLst tmp

    '
  - 'S> 250- Listing tmp

    '
  - 'S>   /tmp

    '
  - 'S> 250 End

    '
  - 'C> OptS Mlst Modify;Unique;

    '
  - 'S> 200 MLST OPTS Modify;Unique;

    '
  - 'C> MLst tmp

    '
  - 'S> 250- Listing tmp

    '
  - 'S>  Modify=19990930152225;Unique=keVO1+YZ5; /tmp

    '
  - 'S> 250 End

    '
  - 'C> opts MLst fish cakes;

    '
  - 'S> 501 Invalid MLST options

    '
  - 'C> MLst tmp

    '
  - 'S> 250- Listing tmp

    '
  - 'S>  Modify=19990930152225;Unique=keVO1+YZ5; /tmp

    '
  - "S> 250 End\n   This example shows the effect of changing the facts requested
    upon\n   subsequent MLST commands.  Notice that a syntax error leaves the set\n
    \  of selected facts unchanged.  Also notice exactly two spaces\n   preceding
    the pathname when no facts were selected, either\n   deliberately, or because
    none of the facts requested were available.\n"
  title: 7.9.2.  Examples
- contents:
  - "8.  Impact on Other FTP Commands\n   Along with the introduction of MLST, traditional
    FTP commands must be\n   extended to allow for the use of more than US-ASCII [1]
    or EBCDIC\n   character sets.  In general, the support of MLST requires support
    for\n   arbitrary character sets wherever file names and directory names are\n
    \  allowed.  This applies equally to both arguments given to the\n   following
    commands and to the replies from them, as appropriate.\n      APPE                                RMD\n
    \     CWD                                 RNFR\n      DELE                                RNTO\n
    \     MKD                                 STAT\n      PWD                                 STOR\n
    \     RETR                                STOU\n   The arguments to all of these
    commands should be processed the same\n   way that MLST commands and responses
    are processed with respect to\n   handling embedded spaces, CRs and NULs.  See
    section 2.2.\n"
  title: 8.  Impact on Other FTP Commands
- contents:
  - "9.  Character Sets and Internationalization\n   FTP commands are protocol elements,
    and are always expressed in\n   ASCII.  FTP responses are composed of the numeric
    code, which is a\n   protocol element, and a message, which is often expected
    to convey\n   information to the user.  It is not expected that users normally\n
    \  interact directly with the protocol elements, rather the user-FTP\n   process
    constructs the commands, and interprets the results, in the\n   manner best suited
    for the particular user.  Explanatory text in\n   responses generally has no particular
    meaning to the protocol.  The\n   numeric codes provide all necessary information.
    \ Server-PIs are free\n   to provide the text in any language that can be adequately\n
    \  represented in ASCII, or where an alternative language and\n   representation
    has been negotiated (see [7]) in that language and\n   representation.\n   Pathnames
    are expected to be encoded in UTF-8 allowing essentially\n   any character to
    be represented in a pathname.  Meaningful pathnames\n   are defined by the server
    NVFS.\n   No restrictions at all are placed upon the contents of files\n   transferred
    using the FTP protocols.  Unless the \"media-type\" fact is\n   provided in a
    MLSx response nor is any advice given here that would\n   allow determining the
    content type.  That information is assumed to\n   be obtained via other means.\n"
  title: 9.  Character Sets and Internationalization
- contents:
  - "10.  IANA Considerations\n   This specification makes use of some lists of values
    currently\n   maintained by the IANA, and creates two new lists for the IANA to\n
    \  maintain.  It does not add any values to any existing registries.\n   The existing
    IANA registries used by this specification are modified\n   using mechanisms specified
    elsewhere.\n"
  title: 10.  IANA Considerations
- contents:
  - "10.1.  The OS-Specific Fact Registry\n   A registry of OS specific fact names
    shall be maintained by the IANA.\n   The OS names for the OS portion of the fact
    name must be taken from\n   the IANA's list of registered OS names.  To add a
    fact name to this\n   OS specific registry of OS specific facts, an applicant
    must send to\n   the IANA a request, in which is specified the OS name, the OS\n
    \  specific fact name, a definition of the syntax of the fact value,\n   which
    must conform to the syntax of a token as given in this\n   document, and a specification
    of the semantics to be associated with\n   the particular fact and its values.
    \ Upon receipt of such an\n   application, and if the combination of OS name and
    OS specific fact\n   name has not been previously defined, the IANA will add the\n
    \  specification to the registry.\n   Any examples of OS specific facts found
    in this document are to be\n   treated as examples of possible OS specific facts,
    and do not form a\n   part of the IANA's registry merely because of being included
    in this\n   document.\n"
  title: 10.1.  The OS-Specific Fact Registry
- contents:
  - "10.2.  The OS-Specific Filetype Registry\n   A registry of OS specific file types
    shall be maintained by the IANA.\n   The OS names for the OS portion of the fact
    name must be taken from\n   the IANA's list of registered OS names.  To add a
    file type to this\n   OS specific registry of OS specific file types, an applicant
    must\n   send to the IANA a request, in which is specified the OS name, the OS\n
    \  specific file type, a definition of the syntax of the fact value,\n   which
    must conform to the syntax of a token as given in this\n   document, and a specification
    of the semantics to be associated with\n   the particular fact and its values.
    \ Upon receipt of such an\n   application, and if the combination of OS name and
    OS specific file\n   type has not been previously defined, the IANA will add the\n
    \  specification to the registry.\n   Any examples of OS specific file types found
    in this document are to\n   be treated as potential OS specific file types only,
    and do not form\n   a part of the IANA's registry merely because of being included
    in\n   this document.\n"
  title: 10.2.  The OS-Specific Filetype Registry
- contents:
  - "11.  Security Considerations\n   This memo does not directly concern security.
    \ It is not believed\n   that any of the mechanisms documented here impact in
    any particular\n   way upon the security of FTP.\n   Implementing the SIZE command,
    and perhaps some of the facts of the\n   MLSx commands, may impose a considerable
    load on the server, which\n   could lead to denial of service attacks.  Servers
    have, however,\n   implemented this for many years, without significant reported\n
    \  difficulties.\n   The server-FTP should take care not to reveal sensitive information\n
    \  about files to unauthorised parties.  In particular, some underlying\n   filesystems
    provide a file identifier that, if known, can allow many\n   of the filesystem
    protection mechanisms to be by-passed.  That\n   identifier would not be a suitable
    choice to use as the basis of the\n   value of the unique fact.\n   The FEAT and
    OPTS commands may be issued before the FTP\n   authentication has occurred [6].
    \ This allows unauthenticated clients\n   to determine which of the features defined
    here are supported, and to\n   negotiate the fact list for MLSx output.  No actual
    MLSx commands may\n   be issued however, and no problems with permitting the selection
    of\n   the format prior to authentication are foreseen.\n   A general discussion
    of issues related to the security of FTP can be\n   found in [13].\n"
  title: 11.  Security Considerations
- contents:
  - "12.  Normative References\n   [1]  Coded Character Set--7-bit American Standard
    Code for\n        Information Interchange, ANSI X3.4-1986.\n   [2]  Yergeau, F.,
    \"UTF-8, a transformation format of ISO 10646\", RFC\n        3629, November 2003.\n
    \  [3]  Postel, J. and J. Reynolds, \"File Transfer Protocol (FTP)\", STD\n        9,
    RFC 959, October 1985.\n   [4]  Bradner, S., \"Key words for use in RFCs to Indicate
    Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n   [5]  Crocker,
    D. and P. Overell, \"Augmented BNF for Syntax\n        Specifications: ABNF\",
    RFC 4234, October 2005.\n   [6]  Hethmon, P. and R. Elz, \"Feature negotiation
    mechanism for the\n        File Transfer Protocol\", RFC 2389, August 1998.\n
    \  [7]  Curtin, B., \"Internationalization of the File Transfer\n        Protocol\",
    RFC 2640, July 1999.\n   [8]  Postel, J. and J. Reynolds, \"Telnet protocol Specification\",
    STD\n        8, RFC 854, May 1983.\n   [9]  Braden, R,. \"Requirements for Internet
    Hosts -- Application and\n        Support\", STD 3, RFC 1123, October 1989.\n
    \  [10] ISO/IEC 10646-1:1993  \"Universal multiple-octet coded character\n        set
    (UCS) -- Part 1: Architecture and basic multilingual plane\",\n        International
    Standard -- Information Technology, 1993.\n   [11] Internet Assigned Numbers Authority.
    \ http://www.iana.org\n        Email: iana@iana.org.\n   [12] Phillips, A. and
    M. Davis, \"Tags for Identifying Languages\", BCP\n        47, RFC 4646, September
    2006.\n   [13] Allman, M. and S. Ostermann, \"FTP Security Considerations\" RFC\n
    \       2577, May 1999.\n"
  title: 12.  Normative References
- contents:
  - "Acknowledgments\n   This document is a product of the FTPEXT working group of
    the IETF.\n   The following people are among those who have contributed to this\n
    \  document:\n      Alex Belits\n      D. J. Bernstein\n      Dave Cridland\n
    \     Martin J. Duerst\n      Bill Fenner (and the rest of the IESG)\n      Paul
    Ford-Hutchinson\n      Mike Gleason\n      Mark Harris\n      Stephen Head\n      Alun
    Jones\n      Andrew Main\n      James Matthews\n      Luke Mewburn\n      Jan
    Mikkelsen\n      Keith Moore\n      Buz Owen\n      Mark Symons\n      Stephen
    Tihor\n      and the entire FTPEXT working group of the IETF.\n   Apologies are
    offered to any inadvertently omitted.\n   The description of the modifications
    to the REST command and the MDTM\n   and SIZE commands comes from a set of modifications
    suggested for STD\n   9, RFC 959 by Rick Adams in 1989.  A document containing
    just those\n   commands, edited by David Borman, has been merged with this document.\n
    \  Mike Gleason, Alun Jones and Luke Mewburn provided access to FTP\n   servers
    used in some of the examples.\n   All of the examples in this document are taken
    from actual\n   client/server exchanges, though some have been edited for brevity,
    or\n   to meet document formatting requirements.\n"
  title: Acknowledgments
- contents:
  - "RFC Editor Note:\n   Several of the examples in this document exceed the RFC
    standard line\n   length of 72 characters.  Since this document is a standards-track\n
    \  result of an IETF working group and is important to an IETF sub-\n   community,
    the RFC Editor is publishing it with the margin\n   violations.  This is not a
    precedent.\n"
  title: 'RFC Editor Note:'
- contents:
  - "Author's Address\n   Paul Hethmon\n   Hethmon Software\n   10420 Jackson Oaks
    Way, Suite 201\n   Knoxville, TN 37922\n   EMail: phethmon@hethmon.com\n"
  title: Author's Address
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
