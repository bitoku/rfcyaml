- title: __initial_text__
  contents:
  - "                     Domain Name Associations (DNA)\n        in the Extensible\
    \ Messaging and Presence Protocol (XMPP)\n"
- title: Abstract
  contents:
  - "Abstract\n   This document improves the security of the Extensible Messaging\
    \ and\n   Presence Protocol (XMPP) in two ways.  First, it specifies how to\n\
    \   establish a strong association between a domain name and an XML\n   stream,\
    \ using the concept of \"prooftypes\".  Second, it describes how\n   to securely\
    \ delegate a service domain name (e.g., example.com) to a\n   target server hostname\
    \ (e.g., hosting.example.net); this is\n   especially important in multi-tenanted\
    \ environments where the same\n   target server hosts a large number of domains.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7712.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Terminology .....................................................4\n  \
    \ 3. Client-to-Server (C2S) DNA ......................................4\n    \
    \  3.1. C2S Flow ...................................................4\n      3.2.\
    \ C2S Description ............................................5\n   4. Server-to-Server\
    \ (S2S) DNA ......................................5\n      4.1. S2S Flow ...................................................6\n\
    \      4.2. A Simple S2S Scenario .....................................10\n  \
    \    4.3. No Mutual PKIX Authentication .............................12\n    \
    \  4.4. Piggybacking ..............................................13\n      \
    \     4.4.1. Assertion ..........................................13\n        \
    \   4.4.2. Supposition ........................................15\n   5. Alternative\
    \ Prooftypes .........................................16\n      5.1. DANE ......................................................16\n\
    \      5.2. POSH ......................................................17\n  \
    \ 6. Secure Delegation and Multi-Tenancy ............................18\n   7.\
    \ Prooftype Model ................................................18\n   8. Guidance\
    \ for Server Operators ..................................19\n   9. IANA Considerations\
    \ ............................................20\n      9.1. POSH Service Name\
    \ for xmpp-client Service .................20\n      9.2. POSH Service Name for\
    \ xmpp-server Service .................20\n   10. Security Considerations .......................................20\n\
    \   11. References ....................................................21\n  \
    \    11.1. Normative References .....................................21\n    \
    \  11.2. Informative References ...................................23\n   Acknowledgements\
    \ ..................................................24\n   Authors' Addresses\
    \ ................................................24\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   In systems that use the Extensible Messaging and Presence\
    \ Protocol\n   (XMPP) [RFC6120], it is important to establish a strong association\n\
    \   between the DNS domain name of an XMPP service (e.g., example.com)\n   and\
    \ the XML stream that a client or peer server initiates with that\n   service.\
    \  In other words, the client or peer server needs to verify\n   the identity\
    \ of the server to which it connects.  Additionally,\n   servers need to verify\
    \ incoming connections from other servers.\n   To date, such verification has\
    \ been established based on information\n   obtained from the Domain Name System\
    \ (DNS), the Public Key\n   Infrastructure (PKI), or similar sources.  In particular,\
    \ XMPP as\n   defined in [RFC6120] assumed that Domain Name Associations (DNA)\
    \ are\n   to be proved using the \"PKIX prooftype\"; that is, the server's proof\n\
    \   consists of a PKIX certificate that is checked according to the XMPP\n   profile\
    \ of the matching rules from [RFC6125] (and the overall\n   validation rules from\
    \ [RFC5280]), the client's verification material\n   is obtained out of band in\
    \ the form of a trusted root, and secure DNS\n   is not necessary.\n   By extending\
    \ the concept of a domain name association within XMPP,\n   this document does\
    \ the following:\n   1.  Generalizes the model currently in use so that additional\n\
    \       prooftypes can be defined if needed.\n   2.  Provides a basis for modernizing\
    \ some prooftypes to reflect\n       progress in underlying technologies such\
    \ as DNS Security\n       [RFC4033].\n   3.  Describes the flow of operations\
    \ for establishing a domain name\n       association.\n   This document also provides\
    \ guidelines for secure delegation of a\n   service domain name (e.g., example.com)\
    \ to a target server hostname\n   (e.g., hosting.example.net).  The need for secure\
    \ delegation arises\n   because the process for resolving the domain name of an\
    \ XMPP service\n   into the IP address at which an XML stream will be negotiated\
    \ (see\n   [RFC6120]) can involve delegation of a service domain name to a\n \
    \  target server hostname using technologies such as DNS SRV records\n   [RFC2782].\
    \  A more detailed description of the delegation problem can\n   be found in [RFC7711].\
    \  The domain name association can be verified\n   only if the delegation is done\
    \ in a secure manner.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   This document inherits XMPP terminology from [RFC6120] and\n\
    \   [XEP-0220]; DNS terminology from [RFC1034], [RFC1035], [RFC2782], and\n  \
    \ [RFC4033]; and security terminology from [RFC4949] and [RFC5280].\n   The terms\
    \ \"reference identity\" and \"presented identity\" are used as\n   defined in\
    \ the \"CertID\" specification [RFC6125].  For the sake of\n   consistency with\
    \ [RFC7673], this document uses the terms \"service\n   domain name\" and \"target\
    \ server hostname\" to refer to the same\n   entities identified by the terms\
    \ \"source domain\" and \"derived domain\"\n   from [RFC6125].\n"
- title: 3.  Client-to-Server (C2S) DNA
  contents:
  - "3.  Client-to-Server (C2S) DNA\n   The client-to-server case is much simpler\
    \ than the server-to-server\n   case because the client does not assert a domain\
    \ name; this means\n   that verification happens in only one direction.  Therefore,\
    \ we\n   describe this case first to help the reader understand domain name\n\
    \   associations in XMPP.\n"
- title: 3.1.  C2S Flow
  contents:
  - "3.1.  C2S Flow\n   The following flow chart illustrates the protocol flow for\n\
    \   establishing a domain name association for an XML stream from a\n   client\
    \ (C) to a server (S) using the standard PKIX prooftype\n   specified in [RFC6120].\n\
    \                           |\n                   DNS RESOLUTION ETC.\n      \
    \                     |\n   +-----------------STREAM HEADERS---------------------+\n\
    \   |                                                    |\n   |  C: <stream to='a.example'>\
    \                        |\n   |                                             \
    \       |\n   |  S: <stream from='a.example'>                      |\n   |   \
    \                                                 |\n   +----------------------------------------------------+\n\
    \                           |\n   +-----------------TLS NEGOTIATION--------------------+\n\
    \   |                                                    |\n   |  S: Server Certificate\
    \                             |\n   |                                        \
    \            |\n   +----------------------------------------------------+\n  \
    \                         |\n             (client checks certificate and\n   \
    \           establishes DNA for a.example)\n"
- title: 3.2.  C2S Description
  contents:
  - "3.2.  C2S Description\n   The simplified order of events (see [RFC6120] for details)\
    \ in\n   establishing an XML stream from a client (user@a.example) to a server\n\
    \   (a.example) is as follows:\n   1.  The client resolves via DNS the service\n\
    \       _xmpp-client._tcp.a.example.\n   2.  The client opens a TCP connection\
    \ to the resolved IP address.\n   3.  The client sends an initial stream header\
    \ to the server:\n       <stream:stream to='a.example'>\n   4.  The server sends\
    \ a response stream header to the client,\n       asserting that it is a.example:\n\
    \       <stream:stream from='a.example'>\n   5.  The parties attempt TLS negotiation,\
    \ during which the XMPP server\n       (acting as a TLS server) presents a PKIX\
    \ certificate proving that\n       it is a.example.\n   6.  The client checks\
    \ the PKIX certificate that the server provided;\n       if the proof is consistent\
    \ with the XMPP profile of the matching\n       rules from [RFC6125] and the certificate\
    \ is otherwise valid\n       according to [RFC5280], the client accepts that there\
    \ is a strong\n       domain name association between its stream to the target\
    \ server\n       and the DNS domain name of the XMPP service.\n   The certificate\
    \ that the server presents might not be acceptable to\n   the client.  As one\
    \ example, the server might be hosting multiple\n   domains and secure delegation\
    \ as described in Section 6 is necessary.\n   As another example, the server might\
    \ present a self-signed\n   certificate, which requires the client to either (1)\
    \ apply the\n   fallback process described in Section 6.6.4 of [RFC6125] or\n\
    \   (2) prompt the user to accept an unauthenticated connection as\n   described\
    \ in Section 3.4 of [RFC7590].\n"
- title: 4.  Server-to-Server (S2S) DNA
  contents:
  - "4.  Server-to-Server (S2S) DNA\n   The server-to-server case is significantly\
    \ more complex than the\n   client-to-server case, and it involves the checking\
    \ of domain name\n   associations in both directions along with other \"wrinkles\"\
    \n   described in the following sections.  In some parts of the flow,\n   server-to-server\
    \ communications use the Server Dialback protocol\n   first specified in (the\
    \ now obsolete) [RFC3920] and since moved to\n   [XEP-0220].  See \"Impact of\
    \ TLS and DNSSEC on Dialback\" [XEP-0344]\n   for considerations when using it\
    \ together with TLS and DNSSEC.  Also,\n   \"Bidirectional Server-to-Server Connections\"\
    \ [XEP-0288] provides a\n   way to use the server-to-server connections for bidirectional\n\
    \   exchange of XML stanzas, which reduces the complexity of some of the\n   processes\
    \ involved.\n"
- title: 4.1.  S2S Flow
  contents:
  - "4.1.  S2S Flow\n   The following flow charts illustrate the protocol flow for\n\
    \   establishing domain name associations between Server 1 (the\n   initiating\
    \ entity) and Server 2 (the receiving entity), as described\n   in the remaining\
    \ sections of this document.\n   A simple S2S scenario would be as follows:\n\
    \                       |\n                DNS RESOLUTION ETC.\n             \
    \          |\n   +-------------STREAM HEADERS--------------------+\n   |     \
    \                                          |\n   |  A: <stream from='a.example'\
    \ to='b.example'>  |\n   |                                               |\n \
    \  |  B: <stream from='b.example' to='a.example'>  |\n   |                   \
    \                            |\n   +-----------------------------------------------+\n\
    \                       |\n   +-------------TLS NEGOTIATION-------------------+\n\
    \   |                                               |\n   |  B: Server Certificate\
    \                        |\n   |  B: Certificate Request                     \
    \  |\n   |  A: Client Certificate                        |\n   |             \
    \                                  |\n   +-----------------------------------------------+\n\
    \                       |\n       (A establishes DNA for b.example)\n        \
    \               |\n   After the domain name association has been established in\
    \ one\n   direction, it is possible to perform mutual authentication using the\n\
    \   Simple Authentication and Security Layer (SASL) [RFC4422] and thus\n   establish\
    \ domain name associations in both directions.\n                       |\n   +-------------AUTHENTICATION--------------------+\n\
    \   |                   |                           |\n   |       {valid client\
    \ certificate?} --+         |\n   |                   |                 |    \
    \     |\n   |                   | yes         no  |         |\n   |          \
    \         v                 |         |\n   |             SASL EXTERNAL      \
    \     |         |\n   |             (mutual auth)           |         |\n   |\
    \   (B establishes DNA for a.example) |         |\n   +-------------------------------------|---------+\n\
    \                                         |\n   However, if mutual authentication\
    \ cannot be completed using SASL, the\n   receiving server needs to establish\
    \ a domain name association in\n   another way.  This scenario is described in\
    \ Section 4.3.\n                                         |\n                 \
    \      +-----------------+\n                       |\n           (Section 4.3:\
    \ No Mutual PKIX Authentication)\n                       |\n                 \
    \      | B needs to establish DNA\n                       | for this stream from\
    \ a.example,\n                       | so A asserts its identity\n           \
    \            |\n   +----------DIALBACK IDENTITY ASSERTION----------+\n   |   \
    \                                            |\n   |  A: <db:result from='a.example'\
    \               |\n   |                to='b.example'>                |\n   |\
    \       some-dialback-key                       |\n   |     </db:result>     \
    \                         |\n   |                                            \
    \   |\n   +-----------------------------------------------+\n                \
    \       |\n                DNS RESOLUTION ETC.\n                       |\n   +-------------STREAM\
    \ HEADERS--------------------+\n   |                                         \
    \      |\n   |  B: <stream from='b.example' to='a.example'>  |\n   |         \
    \                                      |\n   |  A: <stream from='a.example' to='b.example'>\
    \  |\n   |                                               |\n   +-----------------------------------------------+\n\
    \                       |\n   +-------------TLS NEGOTIATION-------------------+\n\
    \   |                                               |\n   |  A: Server Certificate\
    \                        |\n   |                                             \
    \  |\n   +-----------------------------------------------+\n                 \
    \      |\n   +----------DIALBACK IDENTITY VERIFICATION-------+\n   |         \
    \                                      |\n   |  B: <db:verify from='b.example'\
    \               |\n   |                to='a.example'                 |\n   |\
    \                id='...'>                      |\n   |       some-dialback-key\
    \                       |\n   |     </db:verify>                             \
    \ |\n   |                                               |\n   |  A: <db:verify\
    \ from='a.example'               |\n   |                to='b.example'       \
    \          |\n   |                type='valid'                   |\n   |     \
    \           id='...'>                      |\n   |                           \
    \                    |\n   +-----------------------------------------------+\n\
    \                       |\n       (B establishes DNA for a.example)\n        \
    \               |\n   If one of the servers hosts additional service names (e.g.,\
    \ Server 2\n   might host c.example in addition to b.example and Server 1 might\
    \ host\n   rooms.a.example in addition to a.example), then the servers can use\n\
    \   Server Dialback \"piggybacking\" to establish additional domain name\n   associations\
    \ for the stream, as described in Section 4.4.\n   There are two varieties of\
    \ piggybacking.  The first is here called\n   \"assertion\".\n               \
    \        |\n         (Section 4.4.1: Piggybacking Assertion)\n               \
    \        |\n   +----------DIALBACK IDENTITY ASSERTION----------+\n   |       \
    \                                        |\n   |  B: <db:result from='c.example'\
    \               |\n   |                to='a.example'/>               |\n   |\
    \                                               |\n   +-----------------------------------------------+\n\
    \                       |\n   +-------DNA ESTABLISHMENT AS ABOVE--------------+\n\
    \   |                                               |\n   |    DNS RESOLUTION,\
    \ STREAM HEADERS,            |\n   |    TLS NEGOTIATION, AUTHENTICATION      \
    \      |\n   |                                               |\n   +-----------------------------------------------+\n\
    \                       |\n   +----------DIALBACK IDENTITY VERIFICATION-------+\n\
    \   |                                               |\n   |  A: <db:result from='a.example'\
    \               |\n   |                to='c.example'                 |\n   |\
    \                type='valid'/>                 |\n   |                      \
    \                         |\n   +-----------------------------------------------+\n\
    \                       |\n   The second variety of piggybacking is here called\
    \ \"supposition\".\n                       |\n         (Section 4.4.2: Piggybacking\
    \ Supposition)\n                       |\n   +-----------SUBSEQUENT CONNECTION---------------+\n\
    \   |                                               |\n   |  B: <stream from='c.example'\
    \                  |\n   |             to='rooms.a.example'>             |\n \
    \  |                                               |\n   |  A: <stream from='rooms.a.example'\
    \            |\n   |             to='c.example'>                   |\n   |   \
    \                                            |\n   +-----------------------------------------------+\n\
    \                       |\n   +-------DNA ESTABLISHMENT AS ABOVE--------------+\n\
    \   |                                               |\n   |    DNS RESOLUTION,\
    \ STREAM HEADERS,            |\n   |    TLS NEGOTIATION, AUTHENTICATION      \
    \      |\n   |                                               |\n   +-----------------------------------------------+\n\
    \                       |\n   +-----------DIALBACK OPTIMIZATION---------------+\n\
    \   |                                               |\n   |  B: <db:result from='c.example'\
    \               |\n   |                to='rooms.a.example'/>         |\n   |\
    \                                               |\n   |  B: <db:result from='rooms.a.example'\
    \         |\n   |                to='c.example'                 |\n   |      \
    \          type='valid'/>                 |\n   |                            \
    \                   |\n   +-----------------------------------------------+\n"
- title: 4.2.  A Simple S2S Scenario
  contents:
  - "4.2.  A Simple S2S Scenario\n   To illustrate the problem, consider the simplified\
    \ order of events\n   (see [RFC6120] for details) in establishing an XML stream\
    \ between\n   Server 1 (a.example) and Server 2 (b.example):\n   1.  Server 1\
    \ resolves via DNS the service\n       _xmpp-server._tcp.b.example.\n   2.  Server\
    \ 1 opens a TCP connection to the resolved IP address.\n   3.  Server 1 sends\
    \ an initial stream header to Server 2, asserting\n       that it is a.example:\n\
    \       <stream:stream from='a.example' to='b.example'>\n   4.  Server 2 sends\
    \ a response stream header to Server 1, asserting\n       that it is b.example:\n\
    \       <stream:stream from='b.example' to='a.example'>\n   5.  The servers attempt\
    \ TLS negotiation, during which Server 2\n       (acting as a TLS server) presents\
    \ a PKIX certificate proving that\n       it is b.example and Server 1 (acting\
    \ as a TLS client) presents a\n       PKIX certificate proving that it is a.example.\n\
    \   6.  Server 1 checks the PKIX certificate that Server 2 provided, and\n   \
    \    Server 2 checks the PKIX certificate that Server 1 provided; if\n       these\
    \ proofs are consistent with the XMPP profile of the matching\n       rules from\
    \ [RFC6125] and are otherwise valid according to\n       [RFC5280], each server\
    \ accepts that there is a strong domain name\n       association between its stream\
    \ to the other party and the DNS\n       domain name of the other party (i.e.,\
    \ mutual authentication is\n       achieved).\n   Several simplifying assumptions\
    \ underlie the \"happy path\" scenario\n   just outlined:\n   o  The PKIX certificate\
    \ presented by Server 2 during TLS negotiation\n      is acceptable to Server\
    \ 1 and matches the expected identity.\n   o  The PKIX certificate presented by\
    \ Server 1 during TLS negotiation\n      is acceptable to Server 2; this enables\
    \ the parties to complete\n      mutual authentication.\n   o  There are no additional\
    \ domains associated with Server 1 and\n      Server 2 (say, a sub-domain rooms.a.example\
    \ on Server 1 or a\n      second domain c.example on Server 2).\n   o  The server\
    \ administrators are able to obtain PKIX certificates\n      issued by a widely\
    \ accepted Certification Authority (CA) in the\n      first place.\n   o  The\
    \ server administrators are running their own XMPP servers,\n      rather than\
    \ using hosting services.\n   Let's consider each of these \"wrinkles\" in turn.\n"
- title: 4.3.  No Mutual PKIX Authentication
  contents:
  - "4.3.  No Mutual PKIX Authentication\n   If the PKIX certificate presented by\
    \ Server 1 during TLS negotiation\n   is not acceptable to Server 2, Server 2\
    \ is unable to mutually\n   authenticate Server 1.  Therefore, Server 2 needs\
    \ to verify the\n   asserted identity of Server 1 by other means.\n   1.  Server\
    \ 1 asserts that it is a.example using the Server Dialback\n       protocol:\n\
    \       <db:result from='a.example' to='b.example'>\n                  some-dialback-key</db:result>\n\
    \   2.  Server 2 resolves via DNS the service\n       _xmpp-server._tcp.a.example.\n\
    \   3.  Server 2 opens a TCP connection to the resolved IP address.\n   4.  Server\
    \ 2 sends an initial stream header to Server 1, asserting\n       that it is b.example:\n\
    \       <stream:stream from='b.example' to='a.example'>\n   5.  Server 1 sends\
    \ a response stream header to Server 2, asserting\n       that it is a.example:\n\
    \       <stream:stream from='a.example' to='b.example'>\n   6.  The servers attempt\
    \ TLS negotiation, during which Server 1\n       (acting as a TLS server) presents\
    \ a PKIX certificate.\n   7.  Server 2 checks the PKIX certificate that Server\
    \ 1 provided (this\n       might be the same certificate presented by Server 1\
    \ as a client\n       certificate in the initial connection).  However, Server\
    \ 2 does\n       not accept this certificate as proving that Server 1 is\n   \
    \    authorized as a.example and therefore uses another method (here,\n      \
    \ the Server Dialback protocol) to establish the domain name\n       association.\n\
    \   8.  Server 2 proceeds with Server Dialback in order to establish the\n   \
    \    domain name association.  In order to do this, it sends a request\n     \
    \  for verification as described in [XEP-0220]:\n       <db:verify from='b.example'\
    \ to='a.example'\n                  id='...'>some-dialback-key</db:verify>\n \
    \  9.  Server 1 responds to this:\n       <db:verify from='a.example' to='b.example'\
    \ id='...' type='valid/>\n       allowing Server 2 to establish the domain name\
    \ association.\n   In some situations (e.g., if the Authoritative Server in Server\n\
    \   Dialback presents the same certificate as the Originating Server), it\n  \
    \ is the practice of some XMPP server implementations to skip steps 8\n   and\
    \ 9.  These situations are discussed in \"Impact of TLS and DNSSEC\n   on Dialback\"\
    \ [XEP-0344].\n"
- title: 4.4.  Piggybacking
  contents:
  - '4.4.  Piggybacking

    '
- title: 4.4.1.  Assertion
  contents:
  - "4.4.1.  Assertion\n   Consider the common scenario in which Server 2 hosts not\
    \ only\n   b.example but also a second domain c.example (often called a\n   \"\
    multi-tenanted\" environment).  If a user of Server 2 associated with\n   c.example\
    \ wishes to communicate with a friend at a.example, Server 2\n   needs to send\
    \ XMPP stanzas from the domain c.example rather than\n   b.example.  Although\
    \ Server 2 could open a new TCP connection and\n   negotiate new XML streams for\
    \ the domain pair of c.example and\n   a.example, that is wasteful (especially\
    \ if Server 2 hosts a large\n   number of domains).  Server 2 already has a connection\
    \ to a.example,\n   so how can it assert that it would like to add a new domain\
    \ pair to\n   the existing connection?\n   The traditional method for doing so\
    \ is the Server Dialback protocol\n   [XEP-0220].  Here, Server 2 can send a <db:result/>\
    \ element for the\n   new domain pair over the existing stream.\n       <db:result\
    \ from='c.example' to='a.example'>\n         some-dialback-key\n       </db:result>\n\
    \   This <db:result/> element functions as Server 2's assertion that it\n   is\
    \ (also) c.example (thus, the element is functionally equivalent to\n   the 'from'\
    \ address of an initial stream header as previously\n   described).\n   In response\
    \ to this assertion, Server 1 needs to obtain some kind of\n   proof that Server\
    \ 2 really is also c.example.  If the certificate\n   presented by Server 2 is\
    \ also valid for c.example, then no further\n   action is necessary.  However,\
    \ if not, then Server 1 needs to do a\n   bit more work.  Specifically, Server\
    \ 1 can pursue the same strategy\n   it used before:\n   1.  Server 1 resolves\
    \ via DNS the service\n       _xmpp-server._tcp.c.example.\n   2.  Server 1 opens\
    \ a TCP connection to the resolved IP address (which\n       might be the same\
    \ IP address as for b.example).\n   3.  Server 1 sends an initial stream header\
    \ to Server 2, asserting\n       that it is a.example:\n       <stream:stream\
    \ from='a.example' to='c.example'>\n   4.  Server 2 sends a response stream header\
    \ to Server 1, asserting\n       that it is c.example:\n       <stream:stream\
    \ from='c.example' to='a.example'>\n   5.  The servers attempt TLS negotiation,\
    \ during which Server 2\n       (acting as a TLS server) presents a PKIX certificate\
    \ proving that\n       it is c.example.\n   6.  At this point, Server 1 needs\
    \ to establish that, despite\n       different certificates, c.example is associated\
    \ with the origin\n       of the request.  This is done using Server Dialback\
    \ [XEP-0220]:\n       <db:verify from='a.example' to='c.example'\n           \
    \       id='...'>some-dialback-key</db:verify>\n   7.  Server 2 responds to this:\n\
    \       <db:verify from='c.example' to='a.example' id='...' type='valid/>\n  \
    \     allowing Server 1 to establish the domain name association.\n   Now that\
    \ Server 1 accepts the domain name association, it informs\n   Server 2 of that\
    \ fact:\n       <db:result from='a.example' to='c.example' type='valid'/>\n  \
    \ The parties can then terminate the second connection, because it was\n   used\
    \ only for Server 1 to associate a stream with the domain name\n   c.example (the\
    \ dialback key links the original stream to the new\n   association).\n"
- title: 4.4.2.  Supposition
  contents:
  - "4.4.2.  Supposition\n   Piggybacking can also occur in the other direction. \
    \ Consider the\n   common scenario in which Server 1 provides XMPP services not\
    \ only for\n   a.example but also for a sub-domain such as a Multi-User Chat\n\
    \   [XEP-0045] service at rooms.a.example.  If a user from c.example at\n   Server\
    \ 2 wishes to join a room on the groupchat service, Server 2\n   needs to send\
    \ XMPP stanzas from the domain c.example to the domain\n   rooms.a.example rather\
    \ than a.example.\n   First, Server 2 needs to determine whether it can piggyback\
    \ the\n   domain rooms.a.example on the connection to a.example:\n   1.  Server\
    \ 2 resolves via DNS the service\n       _xmpp-server._tcp.rooms.a.example.\n\
    \   2.  Server 2 determines that this resolves to an IP address and port\n   \
    \    to which it is already connected.\n   3.  Server 2 determines that the PKIX\
    \ certificate for that active\n       connection would also be valid for the rooms.a.example\
    \ domain and\n       that Server 1 has announced support for dialback errors.\n\
    \   Server 2 sends a dialback key to Server 1 over the existing\n   connection:\n\
    \       <db:result from='c.example' to='rooms.a.example'>\n         some-dialback-key\n\
    \       </db:result>\n   Server 1 then informs Server 2 that it accepts the domain\
    \ name\n   association:\n       <db:result from='rooms.a.example' to='c.example'\
    \ type='valid'/>\n"
- title: 5.  Alternative Prooftypes
  contents:
  - "5.  Alternative Prooftypes\n   The foregoing protocol flows assumed that domain\
    \ name associations\n   were proved using the PKIX prooftype.  However, sometimes\
    \ XMPP server\n   administrators are unable or unwilling to obtain valid PKIX\n\
    \   certificates for all of the domains they host at their servers.\n   For example:\n\
    \   o  In order to issue a PKIX certificate, a CA might try to send email\n  \
    \    messages to authoritative mailbox names [RFC2142], but the\n      administrator\
    \ of a subsidiary service such as im.cs.podunk.example\n      cannot receive email\
    \ sent to hostmaster@podunk.example.\n   o  A hosting provider such as hosting.example.net\
    \ might not want to\n      take on the liability of holding the certificate and\
    \ private key\n      for a tenant such as example.com (or the tenant might not\
    \ want the\n      hosting provider to hold its certificate and private key).\n\
    \   o  Even if PKIX certificates for each tenant can be obtained, the\n      management\
    \ of so many certificates can introduce a large\n      administrative load.\n\
    \   (Additional discussion can be found in [RFC7711].)\n   In these circumstances,\
    \ prooftypes other than PKIX are desirable or\n   necessary.  As described below,\
    \ two alternatives have been defined so\n   far: DNS-Based Authentication of Named\
    \ Entities (DANE) and PKIX over\n   Secure HTTP (POSH).\n"
- title: 5.1.  DANE
  contents:
  - "5.1.  DANE\n   The DANE prooftype is defined as follows:\n   1.  The server's\
    \ proof consists of either a service certificate or\n       domain-issued certificate\
    \ (TLSA usage PKIX-EE or DANE-EE; see\n       [RFC6698] and [RFC7218]).\n   2.\
    \  The proof is checked by verifying an exact match or a hash of\n       either\
    \ the SubjectPublicKeyInfo or the full certificate.\n   3.  The client's verification\
    \ material is obtained via secure DNS\n       [RFC4033] as described in [RFC7673].\n\
    \   4.  Secure DNS is necessary in order to effectively establish an\n       alternative\
    \ chain of trust from the service certificate or\n       domain-issued certificate\
    \ to the DNS root.\n   The DANE prooftype makes use of DNS-Based Authentication\
    \ of Named\n   Entities [RFC6698], specifically the use of DANE with DNS SRV records\n\
    \   [RFC7673].  For XMPP purposes, the following rules apply:\n   o  If there\
    \ is no SRV resource record, pursue the fallback methods\n      described in [RFC6120].\n\
    \   o  Use the 'to' address of the initial stream header to determine the\n  \
    \    domain name of the TLS client's reference identifier (because the\n     \
    \ use of the Server Name Indication extension (TLS SNI) [RFC6066] is\n      purely\
    \ discretionary in XMPP, as mentioned in [RFC6120]).\n"
- title: 5.2.  POSH
  contents:
  - "5.2.  POSH\n   The POSH prooftype is defined as follows:\n   1.  The server's\
    \ proof consists of a PKIX certificate.\n   2.  The proof is checked according\
    \ to the rules from [RFC6120] and\n       [RFC6125].\n   3.  The client's verification\
    \ material is obtained by retrieving a\n       hash of the PKIX certificate over\
    \ HTTPS at a well-known URI\n       [RFC5785].\n   4.  Secure DNS is not necessary,\
    \ because the HTTPS retrieval\n       mechanism relies on the chain of trust from\
    \ the public key\n       infrastructure.\n   POSH is defined in [RFC7711].  For\
    \ XMPP purposes, the following rules\n   apply:\n   o  If no verification material\
    \ is found via POSH, pursue the fallback\n      methods described in [RFC6120].\n\
    \   o  Use the 'to' address of the initial stream header to determine the\n  \
    \    domain name of the TLS client's reference identifier (because the\n     \
    \ use of TLS SNI [RFC6066] is purely discretionary in XMPP, as\n      mentioned\
    \ in [RFC6120]).\n   The well-known URIs [RFC5785] to be used for POSH are:\n\
    \   o  \"/.well-known/posh/xmpp-client.json\" for client-to-server\n      connections\n\
    \   o  \"/.well-known/posh/xmpp-server.json\" for server-to-server\n      connections\n"
- title: 6.  Secure Delegation and Multi-Tenancy
  contents:
  - "6.  Secure Delegation and Multi-Tenancy\n   One common method for deploying XMPP\
    \ services is multi-tenancy: e.g.,\n   XMPP services for the service domain name\
    \ example.com are actually\n   hosted at the target server hosting.example.net.\
    \  Such an arrangement\n   is relatively convenient in XMPP given the use of DNS\
    \ SRV records\n   [RFC2782], such as the following delegation from example.com\
    \ to\n   hosting.example.net:\n   _xmpp-server._tcp.example.com. 0 IN SRV 0 0\
    \ 5269 hosting.example.net\n   Secure connections with multi-tenancy can work\
    \ using the PKIX\n   prooftype on a small scale if the provider itself wishes\
    \ to host\n   several domains (e.g., related domains such as jabber-de.example\
    \ and\n   jabber-ch.example).  However, in practice the security of\n   multi-tenancy\
    \ has been found to be unwieldy when the provider hosts\n   large numbers of XMPP\
    \ services on behalf of multiple tenants (see\n   [RFC7711] for a detailed description).\
    \  There are two possible\n   results: either (1) server-to-server communications\
    \ to example.com\n   are unencrypted or (2) the communications are TLS-encrypted\
    \ but the\n   certificates are not checked (which is functionally equivalent to\
    \ a\n   connection using an anonymous key exchange).  This is also true of\n \
    \  client-to-server communications, forcing end users to override\n   certificate\
    \ warnings or configure their clients to accept or \"pin\"\n   certificates for\
    \ hosting.example.net instead of example.com.  The\n   fundamental problem here\
    \ is that if DNSSEC is not used, then the act\n   of delegation via DNS SRV records\
    \ is inherently insecure.\n   The specification for the use of SRV records with\
    \ DANE [RFC7673]\n   explains how to use DNSSEC for secure delegation with the\
    \ DANE\n   prooftype, and the POSH specification [RFC7711] explains how to use\n\
    \   HTTPS redirects for secure delegation with the POSH prooftype.\n"
- title: 7.  Prooftype Model
  contents:
  - "7.  Prooftype Model\n   In general, a Domain Name Association (DNA) prooftype\
    \ conforms to the\n   following definition:\n   prooftype:  A mechanism for proving\
    \ an association between a domain\n      name and an XML stream, where the mechanism\
    \ defines (1) the nature\n      of the server's proof, (2) the matching rules\
    \ for comparing the\n      client's verification material against the server's\
    \ proof, (3) how\n      the client obtains its verification material, and (4)\
    \ whether or\n      not the mechanism depends on secure DNS.\n   The PKIX, DANE,\
    \ and POSH prooftypes adhere to this model.  (Some\n   prooftypes depend on, or\
    \ are enhanced by, secure DNS [RFC4033] and\n   thus also need to describe how\
    \ they ensure secure delegation.)\n   Other prooftypes are possible; examples\
    \ might include TLS with Pretty\n   Good Privacy (PGP) keys [RFC6091], a token\
    \ mechanism such as Kerberos\n   [RFC4120] or OAuth [RFC6749], and Server Dialback\
    \ keys [XEP-0220].\n   Although the PKIX prooftype reuses the syntax of the XMPP\
    \ Server\n   Dialback protocol [XEP-0220] for signaling between servers, this\n\
    \   framework document does not define how the generation and validation\n   of\
    \ Server Dialback keys (also specified in [XEP-0220]) constitute a\n   DNA prooftype.\
    \  However, nothing in this document prevents the\n   continued use of Server\
    \ Dialback for signaling, and a future\n   specification (or an updated version\
    \ of [XEP-0220]) might define a\n   DNA prooftype for Server Dialback keys in\
    \ a way that is consistent\n   with this framework.\n"
- title: 8.  Guidance for Server Operators
  contents:
  - "8.  Guidance for Server Operators\n   This document introduces the concept of\
    \ a prooftype in order to\n   explain and generalize the approach to establishing\
    \ a strong\n   association between the DNS domain name of an XMPP service and\
    \ the\n   XML stream that a client or peer server initiates with that service.\n\
    \   The operations and management implications of DNA prooftypes will\n   depend\
    \ on the particular prooftypes that an operator supports.\n   For example:\n \
    \  o  To support the PKIX prooftype [RFC6120], an operator needs to\n      obtain\
    \ certificates for the XMPP server from a Certification\n      Authority (CA).\
    \  However, DNS Security is not required.\n   o  To support the DANE prooftype\
    \ [RFC7673], an operator can generate\n      its own certificates for the XMPP\
    \ server or obtain them from a CA.\n      In addition, DNS Security is required.\n\
    \   o  To support the POSH prooftype [RFC7711], an operator can generate\n   \
    \   its own certificates for the XMPP server or obtain them from a CA,\n     \
    \ but in addition needs to deploy the web server for POSH files with\n      certificates\
    \ obtained from a CA.  However, DNS Security is not\n      required.\n   Considerations\
    \ for the use of the foregoing prooftypes are explained\n   in the relevant specifications.\
    \  See in particular Section 13.7 of\n   [RFC6120], Section 6 of [RFC7673], and\
    \ Section 7 of [RFC7711].\n   Naturally, these operations and management considerations\
    \ are\n   additive: if an operator wishes to use multiple prooftypes, the\n  \
    \ complexity of deployment increases (e.g., the operator might want to\n   obtain\
    \ a PKIX certificate from a CA for use in the PKIX prooftype and\n   generate\
    \ its own certificate for use in the DANE prooftype).  This is\n   an unavoidable\
    \ aspect of supporting as many prooftypes as needed in\n   order to ensure that\
    \ domain name associations can be established in\n   the largest possible percentage\
    \ of cases.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   The POSH specification [RFC7711] establishes the\
    \ \"POSH Service Names\"\n   registry for use in well-known URIs [RFC5785].  This\
    \ specification\n   registers two such service names for use in XMPP: \"xmpp-client\"\
    \ and\n   \"xmpp-server\".  The completed registration templates follow.\n"
- title: 9.1.  POSH Service Name for xmpp-client Service
  contents:
  - "9.1.  POSH Service Name for xmpp-client Service\n   Service name: xmpp-client\n\
    \   Change controller: IETF\n   Definition and usage:  Specifies the location\
    \ of a POSH file\n      containing verification material or a reference thereto\
    \ that\n      enables a client to verify the identity of a server for a\n    \
    \  client-to-server stream in XMPP\n   Specification: RFC 7712 (this document)\n"
- title: 9.2.  POSH Service Name for xmpp-server Service
  contents:
  - "9.2.  POSH Service Name for xmpp-server Service\n   Service name: xmpp-server\n\
    \   Change controller: IETF\n   Definition and usage:  Specifies the location\
    \ of a POSH file\n      containing verification material or a reference thereto\
    \ that\n      enables a server to verify the identity of a peer server for a\n\
    \      server-to-server stream in XMPP\n   Specification: RFC 7712 (this document)\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   With regard to the PKIX prooftype, this document\
    \ supplements but does\n   not supersede the security considerations of [RFC6120]\
    \ and [RFC6125].\n   With regard to the DANE and POSH prooftypes, the reader is\
    \ referred\n   to [RFC7673] and [RFC7711], respectively.\n   Any future prooftypes\
    \ need to thoroughly describe how they conform to\n   the prooftype model specified\
    \ in Section 7 of this document.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC1034]   Mockapetris, P., \"Domain names -\
    \ concepts and\n               facilities\", STD 13, RFC 1034, DOI 10.17487/RFC1034,\n\
    \               November 1987, <http://www.rfc-editor.org/info/rfc1034>.\n   [RFC1035]\
    \   Mockapetris, P., \"Domain names - implementation and\n               specification\"\
    , STD 13, RFC 1035, DOI 10.17487/RFC1035,\n               November 1987, <http://www.rfc-editor.org/info/rfc1035>.\n\
    \   [RFC2782]   Gulbrandsen, A., Vixie, P., and L. Esibov, \"A DNS RR for\n  \
    \             specifying the location of services (DNS SRV)\", RFC 2782,\n   \
    \            DOI 10.17487/RFC2782, February 2000,\n               <http://www.rfc-editor.org/info/rfc2782>.\n\
    \   [RFC4033]   Arends, R., Austein, R., Larson, M., Massey, D., and S.\n    \
    \           Rose, \"DNS Security Introduction and Requirements\",\n          \
    \     RFC 4033, DOI 10.17487/RFC4033, March 2005,\n               <http://www.rfc-editor.org/info/rfc4033>.\n\
    \   [RFC4422]   Melnikov, A., Ed., and K. Zeilenga, Ed., \"Simple\n          \
    \     Authentication and Security Layer (SASL)\", RFC 4422,\n               DOI\
    \ 10.17487/RFC4422, June 2006,\n               <http://www.rfc-editor.org/info/rfc4422>.\n\
    \   [RFC4949]   Shirey, R., \"Internet Security Glossary, Version 2\",\n     \
    \          FYI 36, RFC 4949, DOI 10.17487/RFC4949, August 2007,\n            \
    \   <http://www.rfc-editor.org/info/rfc4949>.\n   [RFC5280]   Cooper, D., Santesson,\
    \ S., Farrell, S., Boeyen, S.,\n               Housley, R., and W. Polk, \"Internet\
    \ X.509 Public Key\n               Infrastructure Certificate and Certificate\
    \ Revocation\n               List (CRL) Profile\", RFC 5280, DOI 10.17487/RFC5280,\n\
    \               May 2008, <http://www.rfc-editor.org/info/rfc5280>.\n   [RFC5785]\
    \   Nottingham, M. and E. Hammer-Lahav, \"Defining Well-Known\n              \
    \ Uniform Resource Identifiers (URIs)\", RFC 5785,\n               DOI 10.17487/RFC5785,\
    \ April 2010,\n               <http://www.rfc-editor.org/info/rfc5785>.\n   [RFC6120]\
    \   Saint-Andre, P., \"Extensible Messaging and Presence\n               Protocol\
    \ (XMPP): Core\", RFC 6120, DOI 10.17487/RFC6120,\n               March 2011,\
    \ <http://www.rfc-editor.org/info/rfc6120>.\n   [RFC6125]   Saint-Andre, P. and\
    \ J. Hodges, \"Representation and\n               Verification of Domain-Based\
    \ Application Service Identity\n               within Internet Public Key Infrastructure\
    \ Using X.509\n               (PKIX) Certificates in the Context of Transport\
    \ Layer\n               Security (TLS)\", RFC 6125, DOI 10.17487/RFC6125,\n  \
    \             March 2011, <http://www.rfc-editor.org/info/rfc6125>.\n   [RFC6698]\
    \   Hoffman, P. and J. Schlyter, \"The DNS-Based\n               Authentication\
    \ of Named Entities (DANE) Transport Layer\n               Security (TLS) Protocol:\
    \ TLSA\", RFC 6698,\n               DOI 10.17487/RFC6698, August 2012,\n     \
    \          <http://www.rfc-editor.org/info/rfc6698>.\n   [RFC7218]   Gudmundsson,\
    \ O., \"Adding Acronyms to Simplify\n               Conversations about DNS-Based\
    \ Authentication of Named\n               Entities (DANE)\", RFC 7218, DOI 10.17487/RFC7218,\n\
    \               April 2014, <http://www.rfc-editor.org/info/rfc7218>.\n   [RFC7673]\
    \   Finch, T., Miller, M., and P. Saint-Andre, \"Using\n               DNS-Based\
    \ Authentication of Named Entities (DANE) TLSA\n               Records with SRV\
    \ Records\", RFC 7673,\n               DOI 10.17487/RFC7673, October 2015,\n \
    \              <http://www.rfc-editor.org/info/rfc7673>.\n   [RFC7711]   Miller,\
    \ M. and P. Saint-Andre, \"PKIX over Secure HTTP\n               (POSH)\", RFC\
    \ 7711, DOI 10.17487/RFC7711, November 2015,\n               <http://www.rfc-editor.org/info/rfc7711>.\n\
    \   [XEP-0220]  Miller, J., Saint-Andre, P., and P. Hancke, \"Server\n       \
    \        Dialback\", XSF XEP 0220, August 2014,\n               <http://xmpp.org/extensions/xep-0220.html>.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [RFC2142]   Crocker, D., \"Mailbox Names for\
    \ Common Services, Roles\n               and Functions\", RFC 2142, DOI 10.17487/RFC2142,\
    \ May 1997,\n               <http://www.rfc-editor.org/info/rfc2142>.\n   [RFC3920]\
    \   Saint-Andre, P., Ed., \"Extensible Messaging and Presence\n              \
    \ Protocol (XMPP): Core\", RFC 3920, DOI 10.17487/RFC3920,\n               October\
    \ 2004, <http://www.rfc-editor.org/info/rfc3920>.\n   [RFC4120]   Neuman, C.,\
    \ Yu, T., Hartman, S., and K. Raeburn, \"The\n               Kerberos Network\
    \ Authentication Service (V5)\", RFC 4120,\n               DOI 10.17487/RFC4120,\
    \ July 2005,\n               <http://www.rfc-editor.org/info/rfc4120>.\n   [RFC6066]\
    \   Eastlake 3rd, D., \"Transport Layer Security (TLS)\n               Extensions:\
    \ Extension Definitions\", RFC 6066,\n               DOI 10.17487/RFC6066, January\
    \ 2011,\n               <http://www.rfc-editor.org/info/rfc6066>.\n   [RFC6091]\
    \   Mavrogiannopoulos, N. and D. Gillmor, \"Using OpenPGP Keys\n             \
    \  for Transport Layer Security (TLS) Authentication\",\n               RFC 6091,\
    \ DOI 10.17487/RFC6091, February 2011,\n               <http://www.rfc-editor.org/info/rfc6091>.\n\
    \   [RFC6749]   Hardt, D., Ed., \"The OAuth 2.0 Authorization Framework\",\n \
    \              RFC 6749, DOI 10.17487/RFC6749, October 2012,\n               <http://www.rfc-editor.org/info/rfc6749>.\n\
    \   [RFC7590]   Saint-Andre, P. and T. Alkemade, \"Use of Transport Layer\n  \
    \             Security (TLS) in the Extensible Messaging and Presence\n      \
    \         Protocol (XMPP)\", RFC 7590, DOI 10.17487/RFC7590,\n               June\
    \ 2015, <http://www.rfc-editor.org/info/rfc7590>.\n   [XEP-0045]  Saint-Andre,\
    \ P., \"Multi-User Chat\", XSF XEP 0045,\n               February 2012,\n    \
    \           <http://xmpp.org/extensions/xep-0045.html>.\n   [XEP-0288]  Hancke,\
    \ P. and D. Cridland, \"Bidirectional\n               Server-to-Server Connections\"\
    , XSF XEP 0288,\n               September 2013,\n               <http://xmpp.org/extensions/xep-0288.html>.\n\
    \   [XEP-0344]  Hancke, P. and D. Cridland, \"Impact of TLS and DNSSEC on\n  \
    \             Dialback\", XSF XEP 0344, March 2015,\n               <http://xmpp.org/extensions/xep-0344.html>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Richard Barnes, Stephen Farrell, and Jonas Lindberg contributed\
    \ as\n   co-authors to earlier draft versions of this document.\n   Derek Atkins,\
    \ Mahesh Jethanandani, and Dan Romascanu reviewed the\n   document on behalf of\
    \ the Security Directorate, the Operations and\n   Management Directorate, and\
    \ the General Area Review Team,\n   respectively.\n   During IESG review, Stephen\
    \ Farrell and Barry Leiba provided helpful\n   input that led to improvements\
    \ in the specification.\n   Thanks to Dave Cridland as document shepherd, Joe\
    \ Hildebrand as\n   working group chair, and Ben Campbell as area director.\n\
    \   Peter Saint-Andre wishes to acknowledge Cisco Systems, Inc., for\n   employing\
    \ him during his work on earlier draft versions of this\n   document.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Peter Saint-Andre\n   &yet\n   Email: peter@andyet.com\n\
    \   URI:   https://andyet.com/\n   Matthew Miller\n   Cisco Systems, Inc.\n  \
    \ 1899 Wynkoop Street, Suite 600\n   Denver, CO  80202\n   United States\n   Email:\
    \ mamille2@cisco.com\n   Philipp Hancke\n   &yet\n   Email: fippo@andyet.com\n\
    \   URI:   https://andyet.com/\n"
