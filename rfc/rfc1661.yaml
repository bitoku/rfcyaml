- contents:
  - '                   The Point-to-Point Protocol (PPP)

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Abstract\n   The Point-to-Point Protocol (PPP) provides a standard method for\n
    \  transporting multi-protocol datagrams over point-to-point links.  PPP\n   is
    comprised of three main components:\n      1. A method for encapsulating multi-protocol
    datagrams.\n      2. A Link Control Protocol (LCP) for establishing, configuring,\n
    \        and testing the data-link connection.\n      3. A family of Network Control
    Protocols (NCPs) for establishing\n         and configuring different network-layer
    protocols.\n   This document defines the PPP organization and methodology, and
    the\n   PPP encapsulation, together with an extensible option negotiation\n   mechanism
    which is able to negotiate a rich assortment of\n   configuration parameters and
    provides additional management\n   functions.  The PPP Link Control Protocol (LCP)
    is described in terms\n   of this mechanism.\n"
  title: Abstract
- contents:
  - "Table of Contents\n     1.     Introduction ..........................................
    \   1\n        1.1       Specification of Requirements ...................    2\n
    \       1.2       Terminology .....................................    3\n     2.
    \    PPP Encapsulation .....................................    4\n     3.     PPP
    Link Operation ....................................    6\n        3.1       Overview
    ........................................    6\n        3.2       Phase Diagram
    ...................................    6\n        3.3       Link Dead (physical-layer
    not ready) ............    7\n        3.4       Link Establishment Phase ........................
    \   7\n        3.5       Authentication Phase ............................    8\n
    \       3.6       Network-Layer Protocol Phase ....................    8\n        3.7
    \      Link Termination Phase ..........................    9\n     4.     The
    Option Negotiation Automaton ......................   11\n        4.1       State
    Transition Table ..........................   12\n        4.2       States ..........................................
    \  14\n        4.3       Events ..........................................   16\n
    \       4.4       Actions .........................................   21\n        4.5
    \      Loop Avoidance ..................................   23\n        4.6       Counters
    and Timers .............................   24\n     5.     LCP Packet Formats
    ....................................   26\n        5.1       Configure-Request
    ...............................   28\n        5.2       Configure-Ack ...................................
    \  29\n        5.3       Configure-Nak ...................................   30\n
    \       5.4       Configure-Reject ................................   31\n        5.5
    \      Terminate-Request and Terminate-Ack .............   33\n        5.6       Code-Reject
    .....................................   34\n        5.7       Protocol-Reject
    .................................   35\n        5.8       Echo-Request and Echo-Reply
    .....................   36\n        5.9       Discard-Request .................................
    \  37\n     6.     LCP Configuration Options .............................   39\n
    \       6.1       Maximum-Receive-Unit (MRU) ......................   41\n        6.2
    \      Authentication-Protocol .........................   42\n        6.3       Quality-Protocol
    ................................   43\n        6.4       Magic-Number ....................................
    \  45\n        6.5       Protocol-Field-Compression (PFC) ................   48\n
    \       6.6       Address-and-Control-Field-Compression (ACFC)\n     SECURITY
    CONSIDERATIONS ......................................   51\n     REFERENCES ...................................................
    \  51\n     ACKNOWLEDGEMENTS .............................................   51\n
    \    CHAIR'S ADDRESS ..............................................   52\n     EDITOR'S
    ADDRESS .............................................   52\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Point-to-Point Protocol is designed for simple links
    which\n   transport packets between two peers.  These links provide full-duplex\n
    \  simultaneous bi-directional operation, and are assumed to deliver\n   packets
    in order.  It is intended that PPP provide a common solution\n   for easy connection
    of a wide variety of hosts, bridges and routers\n   [1].\n   Encapsulation\n      The
    PPP encapsulation provides for multiplexing of different\n      network-layer
    protocols simultaneously over the same link.  The\n      PPP encapsulation has
    been carefully designed to retain\n      compatibility with most commonly used
    supporting hardware.\n      Only 8 additional octets are necessary to form the
    encapsulation\n      when used within the default HDLC-like framing.  In environments\n
    \     where bandwidth is at a premium, the encapsulation and framing may\n      be
    shortened to 2 or 4 octets.\n      To support high speed implementations, the
    default encapsulation\n      uses only simple fields, only one of which needs
    to be examined\n      for demultiplexing.  The default header and information
    fields\n      fall on 32-bit boundaries, and the trailer may be padded to an\n
    \     arbitrary boundary.\n   Link Control Protocol\n      In order to be sufficiently
    versatile to be portable to a wide\n      variety of environments, PPP provides
    a Link Control Protocol\n      (LCP).  The LCP is used to automatically agree
    upon the\n      encapsulation format options, handle varying limits on sizes of\n
    \     packets, detect a looped-back link and other common\n      misconfiguration
    errors, and terminate the link.  Other optional\n      facilities provided are
    authentication of the identity of its peer\n      on the link, and determination
    when a link is functioning properly\n      and when it is failing.\n   Network
    Control Protocols\n      Point-to-Point links tend to exacerbate many problems
    with the\n      current family of network protocols.  For instance, assignment
    and\n      management of IP addresses, which is a problem even in LAN\n      environments,
    is especially difficult over circuit-switched\n      point-to-point links (such
    as dial-up modem servers).  These\n      problems are handled by a family of Network
    Control Protocols\n      (NCPs), which each manage the specific needs required
    by their\n      respective network-layer protocols.  These NCPs are defined in\n
    \     companion documents.\n   Configuration\n      It is intended that PPP links
    be easy to configure.  By design,\n      the standard defaults handle all common
    configurations.  The\n      implementor can specify improvements to the default
    configuration,\n      which are automatically communicated to the peer without
    operator\n      intervention.  Finally, the operator may explicitly configure\n
    \     options for the link which enable the link to operate in\n      environments
    where it would otherwise be impossible.\n      This self-configuration is implemented
    through an extensible\n      option negotiation mechanism, wherein each end of
    the link\n      describes to the other its capabilities and requirements.\n      Although
    the option negotiation mechanism described in this\n      document is specified
    in terms of the Link Control Protocol (LCP),\n      the same facilities are designed
    to be used by other control\n      protocols, especially the family of NCPs.\n"
  - contents:
    - "1.1.  Specification of Requirements\n   In this document, several words are
      used to signify the requirements\n   of the specification.  These words are
      often capitalized.\n   MUST      This word, or the adjective \"required\", means
      that the\n             definition is an absolute requirement of the specification.\n
      \  MUST NOT  This phrase means that the definition is an absolute\n             prohibition
      of the specification.\n   SHOULD    This word, or the adjective \"recommended\",
      means that there\n             may exist valid reasons in particular circumstances
      to\n             ignore this item, but the full implications must be\n             understood
      and carefully weighed before choosing a\n             different course.\n   MAY
      \      This word, or the adjective \"optional\", means that this\n             item
      is one of an allowed set of alternatives.  An\n             implementation which
      does not include this option MUST be\n             prepared to interoperate
      with another implementation which\n             does include the option.\n"
    title: 1.1.  Specification of Requirements
  - contents:
    - "1.2.  Terminology\n   This document frequently uses the following terms:\n
      \  datagram  The unit of transmission in the network layer (such as IP).\n             A
      datagram may be encapsulated in one or more packets\n             passed to
      the data link layer.\n   frame     The unit of transmission at the data link
      layer.  A frame\n             may include a header and/or a trailer, along with
      some\n             number of units of data.\n   packet    The basic unit of
      encapsulation, which is passed across the\n             interface between the
      network layer and the data link\n             layer.  A packet is usually mapped
      to a frame; the\n             exceptions are when data link layer fragmentation
      is being\n             performed, or when multiple packets are incorporated
      into a\n             single frame.\n   peer      The other end of the point-to-point
      link.\n   silently discard\n             The implementation discards the packet
      without further\n             processing.  The implementation SHOULD provide
      the\n             capability of logging the error, including the contents of\n
      \            the silently discarded packet, and SHOULD record the event\n             in
      a statistics counter.\n"
    title: 1.2.  Terminology
  title: 1.  Introduction
- contents:
  - "2.  PPP Encapsulation\n   The PPP encapsulation is used to disambiguate multiprotocol\n
    \  datagrams.  This encapsulation requires framing to indicate the\n   beginning
    and end of the encapsulation.  Methods of providing framing\n   are specified
    in companion documents.\n   A summary of the PPP encapsulation is shown below.
    \ The fields are\n   transmitted from left to right.\n           +----------+-------------+---------+\n
    \          | Protocol | Information | Padding |\n           | 8/16 bits|      *
    \     |    *    |\n           +----------+-------------+---------+\n   Protocol
    Field\n      The Protocol field is one or two octets, and its value identifies\n
    \     the datagram encapsulated in the Information field of the packet.\n      The
    field is transmitted and received most significant octet\n      first.\n      The
    structure of this field is consistent with the ISO 3309\n      extension mechanism
    for address fields.  All Protocols MUST be\n      odd; the least significant bit
    of the least significant octet MUST\n      equal \"1\".  Also, all Protocols MUST
    be assigned such that the\n      least significant bit of the most significant
    octet equals \"0\".\n      Frames received which don't comply with these rules
    MUST be\n      treated as having an unrecognized Protocol.\n      Protocol field
    values in the \"0***\" to \"3***\" range identify the\n      network-layer protocol
    of specific packets, and values in the\n      \"8***\" to \"b***\" range identify
    packets belonging to the\n      associated Network Control Protocols (NCPs), if
    any.\n      Protocol field values in the \"4***\" to \"7***\" range are used for\n
    \     protocols with low volume traffic which have no associated NCP.\n      Protocol
    field values in the \"c***\" to \"f***\" range identify\n      packets as link-layer
    Control Protocols (such as LCP).\n      Up-to-date values of the Protocol field
    are specified in the most\n      recent \"Assigned Numbers\" RFC [2].  This specification
    reserves\n      the following values:\n      Value (in hex)  Protocol Name\n      0001
    \           Padding Protocol\n      0003 to 001f    reserved (transparency inefficient)\n
    \     007d            reserved (Control Escape)\n      00cf            reserved
    (PPP NLPID)\n      00ff            reserved (compression inefficient)\n      8001
    to 801f    unused\n      807d            unused\n      80cf            unused\n
    \     80ff            unused\n      c021            Link Control Protocol\n      c023
    \           Password Authentication Protocol\n      c025            Link Quality
    Report\n      c223            Challenge Handshake Authentication Protocol\n      Developers
    of new protocols MUST obtain a number from the Internet\n      Assigned Numbers
    Authority (IANA), at IANA@isi.edu.\n   Information Field\n      The Information
    field is zero or more octets.  The Information\n      field contains the datagram
    for the protocol specified in the\n      Protocol field.\n      The maximum length
    for the Information field, including Padding,\n      but not including the Protocol
    field, is termed the Maximum\n      Receive Unit (MRU), which defaults to 1500
    octets.  By\n      negotiation, consenting PPP implementations may use other values\n
    \     for the MRU.\n   Padding\n      On transmission, the Information field MAY
    be padded with an\n      arbitrary number of octets up to the MRU.  It is the\n
    \     responsibility of each protocol to distinguish padding octets from\n      real
    information.\n"
  title: 2.  PPP Encapsulation
- contents:
  - '3.  PPP Link Operation

    '
  - contents:
    - "3.1.  Overview\n   In order to establish communications over a point-to-point
      link, each\n   end of the PPP link MUST first send LCP packets to configure
      and test\n   the data link.  After the link has been established, the peer MAY
      be\n   authenticated.\n   Then, PPP MUST send NCP packets to choose and configure
      one or more\n   network-layer protocols.  Once each of the chosen network-layer\n
      \  protocols has been configured, datagrams from each network-layer\n   protocol
      can be sent over the link.\n   The link will remain configured for communications
      until explicit LCP\n   or NCP packets close the link down, or until some external
      event\n   occurs (an inactivity timer expires or network administrator\n   intervention).\n"
    title: 3.1.  Overview
  - contents:
    - "3.2.  Phase Diagram\n   In the process of configuring, maintaining and terminating
      the\n   point-to-point link, the PPP link goes through several distinct\n   phases
      which are specified in the following simplified state diagram:\n   +------+
      \       +-----------+           +--------------+\n   |      | UP     |           |
      OPENED    |              | SUCCESS/NONE\n   | Dead |------->| Establish |---------->|
      Authenticate |--+\n   |      |        |           |           |              |
      \ |\n   +------+        +-----------+           +--------------+  |\n      ^
      \              |                        |             |\n      |          FAIL
      |                   FAIL |             |\n      +<--------------+             +----------+
      \            |\n      |                             |                        |\n
      \     |            +-----------+    |           +---------+  |\n      |       DOWN
      |           |    |   CLOSING |         |  |\n      +------------| Terminate
      |<---+<----------| Network |<-+\n                   |           |                |
      \        |\n                   +-----------+                +---------+\n   Not
      all transitions are specified in this diagram.  The following\n   semantics
      MUST be followed.\n"
    title: 3.2.  Phase Diagram
  - contents:
    - "3.3.  Link Dead (physical-layer not ready)\n   The link necessarily begins
      and ends with this phase.  When an\n   external event (such as carrier detection
      or network administrator\n   configuration) indicates that the physical-layer
      is ready to be used,\n   PPP will proceed to the Link Establishment phase.\n
      \  During this phase, the LCP automaton (described later) will be in the\n   Initial
      or Starting states.  The transition to the Link Establishment\n   phase will
      signal an Up event to the LCP automaton.\n   Implementation Note:\n      Typically,
      a link will return to this phase automatically after\n      the disconnection
      of a modem.  In the case of a hard-wired link,\n      this phase may be extremely
      short -- merely long enough to detect\n      the presence of the device.\n"
    title: 3.3.  Link Dead (physical-layer not ready)
  - contents:
    - "3.4.  Link Establishment Phase\n   The Link Control Protocol (LCP) is used
      to establish the connection\n   through an exchange of Configure packets.  This
      exchange is complete,\n   and the LCP Opened state entered, once a Configure-Ack
      packet\n   (described later) has been both sent and received.\n   All Configuration
      Options are assumed to be at default values unless\n   altered by the configuration
      exchange.  See the chapter on LCP\n   Configuration Options for further discussion.\n
      \  It is important to note that only Configuration Options which are\n   independent
      of particular network-layer protocols are configured by\n   LCP.  Configuration
      of individual network-layer protocols is handled\n   by separate Network Control
      Protocols (NCPs) during the Network-Layer\n   Protocol phase.\n   Any non-LCP
      packets received during this phase MUST be silently\n   discarded.\n   The receipt
      of the LCP Configure-Request causes a return to the Link\n   Establishment phase
      from the Network-Layer Protocol phase or\n   Authentication phase.\n"
    title: 3.4.  Link Establishment Phase
  - contents:
    - "3.5.  Authentication Phase\n   On some links it may be desirable to require
      a peer to authenticate\n   itself before allowing network-layer protocol packets
      to be\n   exchanged.\n   By default, authentication is not mandatory.  If an
      implementation\n   desires that the peer authenticate with some specific authentication\n
      \  protocol, then it MUST request the use of that authentication\n   protocol
      during Link Establishment phase.\n   Authentication SHOULD take place as soon
      as possible after link\n   establishment.  However, link quality determination
      MAY occur\n   concurrently.  An implementation MUST NOT allow the exchange of
      link\n   quality determination packets to delay authentication indefinitely.\n
      \  Advancement from the Authentication phase to the Network-Layer\n   Protocol
      phase MUST NOT occur until authentication has completed.  If\n   authentication
      fails, the authenticator SHOULD proceed instead to the\n   Link Termination
      phase.\n   Only Link Control Protocol, authentication protocol, and link quality\n
      \  monitoring packets are allowed during this phase.  All other packets\n   received
      during this phase MUST be silently discarded.\n   Implementation Notes:\n      An
      implementation SHOULD NOT fail authentication simply due to\n      timeout or
      lack of response.  The authentication SHOULD allow some\n      method of retransmission,
      and proceed to the Link Termination\n      phase only after a number of authentication
      attempts has been\n      exceeded.\n      The implementation responsible for
      commencing Link Termination\n      phase is the implementation which has refused
      authentication to\n      its peer.\n"
    title: 3.5.  Authentication Phase
  - contents:
    - "3.6.  Network-Layer Protocol Phase\n   Once PPP has finished the previous phases,
      each network-layer\n   protocol (such as IP, IPX, or AppleTalk) MUST be separately\n
      \  configured by the appropriate Network Control Protocol (NCP).\n   Each NCP
      MAY be Opened and Closed at any time.\n   Implementation Note:\n      Because
      an implementation may initially use a significant amount\n      of time for
      link quality determination, implementations SHOULD\n      avoid fixed timeouts
      when waiting for their peers to configure a\n      NCP.\n   After a NCP has
      reached the Opened state, PPP will carry the\n   corresponding network-layer
      protocol packets.  Any supported\n   network-layer protocol packets received
      when the corresponding NCP is\n   not in the Opened state MUST be silently discarded.\n
      \  Implementation Note:\n      While LCP is in the Opened state, any protocol
      packet which is\n      unsupported by the implementation MUST be returned in
      a Protocol-\n      Reject (described later).  Only protocols which are supported
      are\n      silently discarded.\n   During this phase, link traffic consists
      of any possible combination\n   of LCP, NCP, and network-layer protocol packets.\n"
    title: 3.6.  Network-Layer Protocol Phase
  - contents:
    - "3.7.  Link Termination Phase\n   PPP can terminate the link at any time.  This
      might happen because of\n   the loss of carrier, authentication failure, link
      quality failure,\n   the expiration of an idle-period timer, or the administrative
      closing\n   of the link.\n   LCP is used to close the link through an exchange
      of Terminate\n   packets.  When the link is closing, PPP informs the network-layer\n
      \  protocols so that they may take appropriate action.\n   After the exchange
      of Terminate packets, the implementation SHOULD\n   signal the physical-layer
      to disconnect in order to enforce the\n   termination of the link, particularly
      in the case of an\n   authentication failure.  The sender of the Terminate-Request
      SHOULD\n   disconnect after receiving a Terminate-Ack, or after the Restart\n
      \  counter expires.  The receiver of a Terminate-Request SHOULD wait for\n   the
      peer to disconnect, and MUST NOT disconnect until at least one\n   Restart time
      has passed after sending a Terminate-Ack.  PPP SHOULD\n   proceed to the Link
      Dead phase.\n   Any non-LCP packets received during this phase MUST be silently\n
      \  discarded.\n   Implementation Note:\n      The closing of the link by LCP
      is sufficient.  There is no need\n      for each NCP to send a flurry of Terminate
      packets.  Conversely,\n      the fact that one NCP has Closed is not sufficient
      reason to cause\n      the termination of the PPP link, even if that NCP was
      the only NCP\n      currently in the Opened state.\n"
    title: 3.7.  Link Termination Phase
  title: 3.  PPP Link Operation
- contents:
  - "4.  The Option Negotiation Automaton\n   The finite-state automaton is defined
    by events, actions and state\n   transitions.  Events include reception of external
    commands such as\n   Open and Close, expiration of the Restart timer, and reception
    of\n   packets from a peer.  Actions include the starting of the Restart\n   timer
    and transmission of packets to the peer.\n   Some types of packets -- Configure-Naks
    and Configure-Rejects, or\n   Code-Rejects and Protocol-Rejects, or Echo-Requests,
    Echo-Replies and\n   Discard-Requests -- are not differentiated in the automaton\n
    \  descriptions.  As will be described later, these packets do indeed\n   serve
    different functions.  However, they always cause the same\n   transitions.\n   Events
    \                                  Actions\n   Up   = lower layer is Up                 tlu
    = This-Layer-Up\n   Down = lower layer is Down               tld = This-Layer-Down\n
    \  Open = administrative Open               tls = This-Layer-Started\n   Close=
    administrative Close              tlf = This-Layer-Finished\n   TO+  = Timeout
    with counter > 0          irc = Initialize-Restart-Count\n   TO-  = Timeout with
    counter expired      zrc = Zero-Restart-Count\n   RCR+ = Receive-Configure-Request
    (Good)  scr = Send-Configure-Request\n   RCR- = Receive-Configure-Request (Bad)\n
    \  RCA  = Receive-Configure-Ack             sca = Send-Configure-Ack\n   RCN  =
    Receive-Configure-Nak/Rej         scn = Send-Configure-Nak/Rej\n   RTR  = Receive-Terminate-Request
    \        str = Send-Terminate-Request\n   RTA  = Receive-Terminate-Ack             sta
    = Send-Terminate-Ack\n   RUC  = Receive-Unknown-Code              scj = Send-Code-Reject\n
    \  RXJ+ = Receive-Code-Reject (permitted)\n       or Receive-Protocol-Reject\n
    \  RXJ- = Receive-Code-Reject (catastrophic)\n       or Receive-Protocol-Reject\n
    \  RXR  = Receive-Echo-Request              ser = Send-Echo-Reply\n       or Receive-Echo-Reply\n
    \      or Receive-Discard-Request\n"
  - contents:
    - "4.1.  State Transition Table\n   The complete state transition table follows.
      \ States are indicated\n   horizontally, and events are read vertically.  State
      transitions and\n   actions are represented in the form action/new-state.  Multiple\n
      \  actions are separated by commas, and may continue on succeeding lines\n   as
      space requires; multiple actions may be implemented in any\n   convenient order.
      \ The state may be followed by a letter, which\n   indicates an explanatory
      footnote.  The dash ('-') indicates an\n   illegal transition.\n      | State\n
      \     |    0         1         2         3         4         5\n"
    - 'Events| Initial   Starting  Closed    Stopped   Closing   Stopping

      '
    - "------+-----------------------------------------------------------\n Up   |
      \   2     irc,scr/6     -         -         -         -\n Down |    -         -
      \        0       tls/1       0         1\n Open |  tls/1       1     irc,scr/6
      \    3r        5r        5r\n Close|    0       tlf/0       2         2         4
      \        4\n      |\n  TO+ |    -         -         -         -       str/4
      \    str/5\n  TO- |    -         -         -         -       tlf/2     tlf/3\n
      \     |\n RCR+ |    -         -       sta/2 irc,scr,sca/8   4         5\n RCR-
      |    -         -       sta/2 irc,scr,scn/6   4         5\n RCA  |    -         -
      \      sta/2     sta/3       4         5\n RCN  |    -         -       sta/2
      \    sta/3       4         5\n      |\n RTR  |    -         -       sta/2     sta/3
      \    sta/4     sta/5\n RTA  |    -         -         2         3       tlf/2
      \    tlf/3\n      |\n RUC  |    -         -       scj/2     scj/3     scj/4
      \    scj/5\n RXJ+ |    -         -         2         3         4         5\n
      RXJ- |    -         -       tlf/2     tlf/3     tlf/2     tlf/3\n      |\n RXR
      \ |    -         -         2         3         4         5\n      | State\n
      \     |    6         7         8           9\n"
    - 'Events| Req-Sent  Ack-Rcvd  Ack-Sent    Opened

      '
    - "------+-----------------------------------------\n Up   |    -         -         -
      \          -\n Down |    1         1         1         tld/1\n Open |    6         7
      \        8           9r\n Close|irc,str/4 irc,str/4 irc,str/4 tld,irc,str/4\n
      \     |\n  TO+ |  scr/6     scr/6     scr/8         -\n  TO- |  tlf/3p    tlf/3p
      \   tlf/3p        -\n      |\n RCR+ |  sca/8   sca,tlu/9   sca/8   tld,scr,sca/8\n
      RCR- |  scn/6     scn/7     scn/6   tld,scr,scn/6\n RCA  |  irc/7     scr/6x
      \ irc,tlu/9   tld,scr/6x\n RCN  |irc,scr/6   scr/6x  irc,scr/8   tld,scr/6x\n
      \     |\n RTR  |  sta/6     sta/6     sta/6   tld,zrc,sta/5\n RTA  |    6         6
      \        8       tld,scr/6\n      |\n RUC  |  scj/6     scj/7     scj/8       scj/9\n
      RXJ+ |    6         6         8           9\n RXJ- |  tlf/3     tlf/3     tlf/3
      \  tld,irc,str/5\n      |\n RXR  |    6         7         8         ser/9\n
      \  The states in which the Restart timer is running are identifiable by\n   the
      presence of TO events.  Only the Send-Configure-Request, Send-\n   Terminate-Request
      and Zero-Restart-Count actions start or re-start\n   the Restart timer.  The
      Restart timer is stopped when transitioning\n   from any state where the timer
      is running to a state where the timer\n   is not running.\n   The events and
      actions are defined according to a message passing\n   architecture, rather
      than a signalling architecture.  If an action is\n   desired to control specific
      signals (such as DTR), additional actions\n   are likely to be required.\n   [p]
      \  Passive option; see Stopped state discussion.\n   [r]   Restart option; see
      Open event discussion.\n   [x]   Crossed connection; see RCA event discussion.\n"
    title: 4.1.  State Transition Table
  - contents:
    - "4.2.  States\n   Following is a more detailed description of each automaton
      state.\n   Initial\n      In the Initial state, the lower layer is unavailable
      (Down), and\n      no Open has occurred.  The Restart timer is not running in
      the\n      Initial state.\n   Starting\n      The Starting state is the Open
      counterpart to the Initial state.\n      An administrative Open has been initiated,
      but the lower layer is\n      still unavailable (Down).  The Restart timer is
      not running in the\n      Starting state.\n      When the lower layer becomes
      available (Up), a Configure-Request\n      is sent.\n   Closed\n      In the
      Closed state, the link is available (Up), but no Open has\n      occurred.  The
      Restart timer is not running in the Closed state.\n      Upon reception of Configure-Request
      packets, a Terminate-Ack is\n      sent.  Terminate-Acks are silently discarded
      to avoid creating a\n      loop.\n   Stopped\n      The Stopped state is the
      Open counterpart to the Closed state.  It\n      is entered when the automaton
      is waiting for a Down event after\n      the This-Layer-Finished action, or
      after sending a Terminate-Ack.\n      The Restart timer is not running in the
      Stopped state.\n      Upon reception of Configure-Request packets, an appropriate\n
      \     response is sent.  Upon reception of other packets, a Terminate-\n      Ack
      is sent.  Terminate-Acks are silently discarded to avoid\n      creating a loop.\n
      \     Rationale:\n         The Stopped state is a junction state for link termination,\n
      \        link configuration failure, and other automaton failure modes.\n         These
      potentially separate states have been combined.\n         There is a race condition
      between the Down event response (from\n         the This-Layer-Finished action)
      and the Receive-Configure-\n         Request event.  When a Configure-Request
      arrives before the\n         Down event, the Down event will supercede by returning
      the\n         automaton to the Starting state.  This prevents attack by\n         repetition.\n
      \     Implementation Option:\n         After the peer fails to respond to Configure-Requests,
      an\n         implementation MAY wait passively for the peer to send\n         Configure-Requests.
      \ In this case, the This-Layer-Finished\n         action is not used for the
      TO- event in states Req-Sent, Ack-\n         Rcvd and Ack-Sent.\n         This
      option is useful for dedicated circuits, or circuits which\n         have no
      status signals available, but SHOULD NOT be used for\n         switched circuits.\n
      \  Closing\n      In the Closing state, an attempt is made to terminate the\n
      \     connection.  A Terminate-Request has been sent and the Restart\n      timer
      is running, but a Terminate-Ack has not yet been received.\n      Upon reception
      of a Terminate-Ack, the Closed state is entered.\n      Upon the expiration
      of the Restart timer, a new Terminate-Request\n      is transmitted, and the
      Restart timer is restarted.  After the\n      Restart timer has expired Max-Terminate
      times, the Closed state is\n      entered.\n   Stopping\n      The Stopping
      state is the Open counterpart to the Closing state.\n      A Terminate-Request
      has been sent and the Restart timer is\n      running, but a Terminate-Ack has
      not yet been received.\n      Rationale:\n         The Stopping state provides
      a well defined opportunity to\n         terminate a link before allowing new
      traffic.  After the link\n         has terminated, a new configuration may occur
      via the Stopped\n         or Starting states.\n   Request-Sent\n      In the
      Request-Sent state an attempt is made to configure the\n      connection.  A
      Configure-Request has been sent and the Restart\n      timer is running, but
      a Configure-Ack has not yet been received\n      nor has one been sent.\n   Ack-Received\n
      \     In the Ack-Received state, a Configure-Request has been sent and a\n      Configure-Ack
      has been received.  The Restart timer is still\n      running, since a Configure-Ack
      has not yet been sent.\n   Ack-Sent\n      In the Ack-Sent state, a Configure-Request
      and a Configure-Ack\n      have both been sent, but a Configure-Ack has not
      yet been\n      received.  The Restart timer is running, since a Configure-Ack
      has\n      not yet been received.\n   Opened\n      In the Opened state, a Configure-Ack
      has been both sent and\n      received.  The Restart timer is not running.\n
      \     When entering the Opened state, the implementation SHOULD signal\n      the
      upper layers that it is now Up.  Conversely, when leaving the\n      Opened
      state, the implementation SHOULD signal the upper layers\n      that it is now
      Down.\n"
    title: 4.2.  States
  - contents:
    - "4.3.  Events\n   Transitions and actions in the automaton are caused by events.\n
      \  Up\n      This event occurs when a lower layer indicates that it is ready
      to\n      carry packets.\n      Typically, this event is used by a modem handling
      or calling\n      process, or by some other coupling of the PPP link to the
      physical\n      media, to signal LCP that the link is entering Link Establishment\n
      \     phase.\n      It also can be used by LCP to signal each NCP that the link
      is\n      entering Network-Layer Protocol phase.  That is, the This-Layer-Up\n
      \     action from LCP triggers the Up event in the NCP.\n   Down\n      This
      event occurs when a lower layer indicates that it is no\n      longer ready
      to carry packets.\n      Typically, this event is used by a modem handling or
      calling\n      process, or by some other coupling of the PPP link to the physical\n
      \     media, to signal LCP that the link is entering Link Dead phase.\n      It
      also can be used by LCP to signal each NCP that the link is\n      leaving Network-Layer
      Protocol phase.  That is, the This-Layer-\n      Down action from LCP triggers
      the Down event in the NCP.\n   Open\n      This event indicates that the link
      is administratively available\n      for traffic; that is, the network administrator
      (human or program)\n      has indicated that the link is allowed to be Opened.
      \ When this\n      event occurs, and the link is not in the Opened state, the\n
      \     automaton attempts to send configuration packets to the peer.\n      If
      the automaton is not able to begin configuration (the lower\n      layer is
      Down, or a previous Close event has not completed), the\n      establishment
      of the link is automatically delayed.\n      When a Terminate-Request is received,
      or other events occur which\n      cause the link to become unavailable, the
      automaton will progress\n      to a state where the link is ready to re-open.
      \ No additional\n      administrative intervention is necessary.\n      Implementation
      Option:\n         Experience has shown that users will execute an additional
      Open\n         command when they want to renegotiate the link.  This might\n
      \        indicate that new values are to be negotiated.\n         Since this
      is not the meaning of the Open event, it is\n         suggested that when an
      Open user command is executed in the\n         Opened, Closing, Stopping, or
      Stopped states, the\n         implementation issue a Down event, immediately
      followed by an\n         Up event.  Care must be taken that an intervening Down
      event\n         cannot occur from another source.\n         The Down followed
      by an Up will cause an orderly renegotiation\n         of the link, by progressing
      through the Starting to the\n         Request-Sent state.  This will cause the
      renegotiation of the\n         link, without any harmful side effects.\n   Close\n
      \     This event indicates that the link is not available for traffic;\n      that
      is, the network administrator (human or program) has\n      indicated that the
      link is not allowed to be Opened.  When this\n      event occurs, and the link
      is not in the Closed state, the\n      automaton attempts to terminate the connection.
      \ Futher attempts\n      to re-configure the link are denied until a new Open
      event occurs.\n      Implementation Note:\n         When authentication fails,
      the link SHOULD be terminated, to\n         prevent attack by repetition and
      denial of service to other\n         users.  Since the link is administratively
      available (by\n         definition), this can be accomplished by simulating
      a Close\n         event to the LCP, immediately followed by an Open event.  Care\n
      \        must be taken that an intervening Close event cannot occur from\n         another
      source.\n         The Close followed by an Open will cause an orderly termination\n
      \        of the link, by progressing through the Closing to the Stopping\n         state,
      and the This-Layer-Finished action can disconnect the\n         link.  The automaton
      waits in the Stopped or Starting states\n         for the next connection attempt.\n
      \  Timeout (TO+,TO-)\n      This event indicates the expiration of the Restart
      timer.  The\n      Restart timer is used to time responses to Configure-Request
      and\n      Terminate-Request packets.\n      The TO+ event indicates that the
      Restart counter continues to be\n      greater than zero, which triggers the
      corresponding Configure-\n      Request or Terminate-Request packet to be retransmitted.\n
      \     The TO- event indicates that the Restart counter is not greater\n      than
      zero, and no more packets need to be retransmitted.\n   Receive-Configure-Request
      (RCR+,RCR-)\n      This event occurs when a Configure-Request packet is received
      from\n      the peer.  The Configure-Request packet indicates the desire to\n
      \     open a connection and may specify Configuration Options.  The\n      Configure-Request
      packet is more fully described in a later\n      section.\n      The RCR+ event
      indicates that the Configure-Request was\n      acceptable, and triggers the
      transmission of a corresponding\n      Configure-Ack.\n      The RCR- event
      indicates that the Configure-Request was\n      unacceptable, and triggers the
      transmission of a corresponding\n      Configure-Nak or Configure-Reject.\n
      \     Implementation Note:\n         These events may occur on a connection
      which is already in the\n         Opened state.  The implementation MUST be
      prepared to\n         immediately renegotiate the Configuration Options.\n   Receive-Configure-Ack
      (RCA)\n      This event occurs when a valid Configure-Ack packet is received\n
      \     from the peer.  The Configure-Ack packet is a positive response to\n      a
      Configure-Request packet.  An out of sequence or otherwise\n      invalid packet
      is silently discarded.\n      Implementation Note:\n         Since the correct
      packet has already been received before\n         reaching the Ack-Rcvd or Opened
      states, it is extremely\n         unlikely that another such packet will arrive.
      \ As specified,\n         all invalid Ack/Nak/Rej packets are silently discarded,
      and do\n         not affect the transitions of the automaton.\n         However,
      it is not impossible that a correctly formed packet\n         will arrive through
      a coincidentally-timed cross-connection.\n         It is more likely to be the
      result of an implementation error.\n         At the very least, this occurance
      SHOULD be logged.\n   Receive-Configure-Nak/Rej (RCN)\n      This event occurs
      when a valid Configure-Nak or Configure-Reject\n      packet is received from
      the peer.  The Configure-Nak and\n      Configure-Reject packets are negative
      responses to a Configure-\n      Request packet.  An out of sequence or otherwise
      invalid packet is\n      silently discarded.\n      Implementation Note:\n         Although
      the Configure-Nak and Configure-Reject cause the same\n         state transition
      in the automaton, these packets have\n         significantly different effects
      on the Configuration Options\n         sent in the resulting Configure-Request
      packet.\n   Receive-Terminate-Request (RTR)\n      This event occurs when a
      Terminate-Request packet is received.\n      The Terminate-Request packet indicates
      the desire of the peer to\n      close the connection.\n      Implementation
      Note:\n         This event is not identical to the Close event (see above),
      and\n         does not override the Open commands of the local network\n         administrator.
      \ The implementation MUST be prepared to receive\n         a new Configure-Request
      without network administrator\n         intervention.\n   Receive-Terminate-Ack
      (RTA)\n      This event occurs when a Terminate-Ack packet is received from
      the\n      peer.  The Terminate-Ack packet is usually a response to a\n      Terminate-Request
      packet.  The Terminate-Ack packet may also\n      indicate that the peer is
      in Closed or Stopped states, and serves\n      to re-synchronize the link configuration.\n
      \  Receive-Unknown-Code (RUC)\n      This event occurs when an un-interpretable
      packet is received from\n      the peer.  A Code-Reject packet is sent in response.\n
      \  Receive-Code-Reject, Receive-Protocol-Reject (RXJ+,RXJ-)\n      This event
      occurs when a Code-Reject or a Protocol-Reject packet\n      is received from
      the peer.\n      The RXJ+ event arises when the rejected value is acceptable,
      such\n      as a Code-Reject of an extended code, or a Protocol-Reject of a\n
      \     NCP.  These are within the scope of normal operation.  The\n      implementation
      MUST stop sending the offending packet type.\n      The RXJ- event arises when
      the rejected value is catastrophic,\n      such as a Code-Reject of Configure-Request,
      or a Protocol-Reject\n      of LCP!  This event communicates an unrecoverable
      error that\n      terminates the connection.\n   Receive-Echo-Request, Receive-Echo-Reply,
      Receive-Discard-Request\n   (RXR)\n      This event occurs when an Echo-Request,
      Echo-Reply or Discard-\n      Request packet is received from the peer.  The
      Echo-Reply packet\n      is a response to an Echo-Request packet.  There is
      no reply to an\n      Echo-Reply or Discard-Request packet.\n"
    title: 4.3.  Events
  - contents:
    - "4.4.  Actions\n   Actions in the automaton are caused by events and typically
      indicate\n   the transmission of packets and/or the starting or stopping of
      the\n   Restart timer.\n   Illegal-Event (-)\n      This indicates an event
      that cannot occur in a properly\n      implemented automaton.  The implementation
      has an internal error,\n      which should be reported and logged.  No transition
      is taken, and\n      the implementation SHOULD NOT reset or freeze.\n   This-Layer-Up
      (tlu)\n      This action indicates to the upper layers that the automaton is\n
      \     entering the Opened state.\n      Typically, this action is used by the
      LCP to signal the Up event\n      to a NCP, Authentication Protocol, or Link
      Quality Protocol, or\n      MAY be used by a NCP to indicate that the link is
      available for\n      its network layer traffic.\n   This-Layer-Down (tld)\n
      \     This action indicates to the upper layers that the automaton is\n      leaving
      the Opened state.\n      Typically, this action is used by the LCP to signal
      the Down event\n      to a NCP, Authentication Protocol, or Link Quality Protocol,
      or\n      MAY be used by a NCP to indicate that the link is no longer\n      available
      for its network layer traffic.\n   This-Layer-Started (tls)\n      This action
      indicates to the lower layers that the automaton is\n      entering the Starting
      state, and the lower layer is needed for the\n      link.  The lower layer SHOULD
      respond with an Up event when the\n      lower layer is available.\n      This
      results of this action are highly implementation dependent.\n   This-Layer-Finished
      (tlf)\n      This action indicates to the lower layers that the automaton is\n
      \     entering the Initial, Closed or Stopped states, and the lower\n      layer
      is no longer needed for the link.  The lower layer SHOULD\n      respond with
      a Down event when the lower layer has terminated.\n      Typically, this action
      MAY be used by the LCP to advance to the\n      Link Dead phase, or MAY be used
      by a NCP to indicate to the LCP\n      that the link may terminate when there
      are no other NCPs open.\n      This results of this action are highly implementation
      dependent.\n   Initialize-Restart-Count (irc)\n      This action sets the Restart
      counter to the appropriate value\n      (Max-Terminate or Max-Configure).  The
      counter is decremented for\n      each transmission, including the first.\n
      \     Implementation Note:\n         In addition to setting the Restart counter,
      the implementation\n         MUST set the timeout period to the initial value
      when Restart\n         timer backoff is used.\n   Zero-Restart-Count (zrc)\n
      \     This action sets the Restart counter to zero.\n      Implementation Note:\n
      \        This action enables the FSA to pause before proceeding to the\n         desired
      final state, allowing traffic to be processed by the\n         peer.  In addition
      to zeroing the Restart counter, the\n         implementation MUST set the timeout
      period to an appropriate\n         value.\n   Send-Configure-Request (scr)\n
      \     A Configure-Request packet is transmitted.  This indicates the\n      desire
      to open a connection with a specified set of Configuration\n      Options.  The
      Restart timer is started when the Configure-Request\n      packet is transmitted,
      to guard against packet loss.  The Restart\n      counter is decremented each
      time a Configure-Request is sent.\n   Send-Configure-Ack (sca)\n      A Configure-Ack
      packet is transmitted.  This acknowledges the\n      reception of a Configure-Request
      packet with an acceptable set of\n      Configuration Options.\n   Send-Configure-Nak
      (scn)\n      A Configure-Nak or Configure-Reject packet is transmitted, as\n
      \     appropriate.  This negative response reports the reception of a\n      Configure-Request
      packet with an unacceptable set of Configuration\n      Options.\n      Configure-Nak
      packets are used to refuse a Configuration Option\n      value, and to suggest
      a new, acceptable value.  Configure-Reject\n      packets are used to refuse
      all negotiation about a Configuration\n      Option, typically because it is
      not recognized or implemented.\n      The use of Configure-Nak versus Configure-Reject
      is more fully\n      described in the chapter on LCP Packet Formats.\n   Send-Terminate-Request
      (str)\n      A Terminate-Request packet is transmitted.  This indicates the\n
      \     desire to close a connection.  The Restart timer is started when\n      the
      Terminate-Request packet is transmitted, to guard against\n      packet loss.
      \ The Restart counter is decremented each time a\n      Terminate-Request is
      sent.\n   Send-Terminate-Ack (sta)\n      A Terminate-Ack packet is transmitted.
      \ This acknowledges the\n      reception of a Terminate-Request packet or otherwise
      serves to\n      synchronize the automatons.\n   Send-Code-Reject (scj)\n      A
      Code-Reject packet is transmitted.  This indicates the reception\n      of an
      unknown type of packet.\n   Send-Echo-Reply (ser)\n      An Echo-Reply packet
      is transmitted.  This acknowledges the\n      reception of an Echo-Request packet.\n"
    title: 4.4.  Actions
  - contents:
    - "4.5.  Loop Avoidance\n   The protocol makes a reasonable attempt at avoiding
      Configuration\n   Option negotiation loops.  However, the protocol does NOT
      guarantee\n   that loops will not happen.  As with any negotiation, it is possible\n
      \  to configure two PPP implementations with conflicting policies that\n   will
      never converge.  It is also possible to configure policies which\n   do converge,
      but which take significant time to do so.  Implementors\n   should keep this
      in mind and SHOULD implement loop detection\n   mechanisms or higher level timeouts.\n"
    title: 4.5.  Loop Avoidance
  - contents:
    - "4.6.  Counters and Timers\n   Restart Timer\n      There is one special timer
      used by the automaton.  The Restart\n      timer is used to time transmissions
      of Configure-Request and\n      Terminate-Request packets.  Expiration of the
      Restart timer causes\n      a Timeout event, and retransmission of the corresponding\n
      \     Configure-Request or Terminate-Request packet.  The Restart timer\n      MUST
      be configurable, but SHOULD default to three (3) seconds.\n      Implementation
      Note:\n         The Restart timer SHOULD be based on the speed of the link.\n
      \        The default value is designed for low speed (2,400 to 9,600\n         bps),
      high switching latency links (typical telephone lines).\n         Higher speed
      links, or links with low switching latency, SHOULD\n         have correspondingly
      faster retransmission times.\n         Instead of a constant value, the Restart
      timer MAY begin at an\n         initial small value and increase to the configured
      final value.\n         Each successive value less than the final value SHOULD
      be at\n         least twice the previous value.  The initial value SHOULD be\n
      \        large enough to account for the size of the packets, twice the\n         round
      trip time for transmission at the link speed, and at\n         least an additional
      100 milliseconds to allow the peer to\n         process the packets before responding.
      \ Some circuits add\n         another 200 milliseconds of satellite delay.  Round
      trip times\n         for modems operating at 14,400 bps have been measured in
      the\n         range of 160 to more than 600 milliseconds.\n   Max-Terminate\n
      \     There is one required restart counter for Terminate-Requests.\n      Max-Terminate
      indicates the number of Terminate-Request packets\n      sent without receiving
      a Terminate-Ack before assuming that the\n      peer is unable to respond.  Max-Terminate
      MUST be configurable,\n      but SHOULD default to two (2) transmissions.\n
      \  Max-Configure\n      A similar counter is recommended for Configure-Requests.
      \ Max-\n      Configure indicates the number of Configure-Request packets sent\n
      \     without receiving a valid Configure-Ack, Configure-Nak or\n      Configure-Reject
      before assuming that the peer is unable to\n      respond.  Max-Configure MUST
      be configurable, but SHOULD default\n      to ten (10) transmissions.\n   Max-Failure\n
      \     A related counter is recommended for Configure-Nak.  Max-Failure\n      indicates
      the number of Configure-Nak packets sent without sending\n      a Configure-Ack
      before assuming that configuration is not\n      converging.  Any further Configure-Nak
      packets for peer requested\n      options are converted to Configure-Reject
      packets, and locally\n      desired options are no longer appended.  Max-Failure
      MUST be\n      configurable, but SHOULD default to five (5) transmissions.\n"
    title: 4.6.  Counters and Timers
  title: 4.  The Option Negotiation Automaton
- contents:
  - "5.  LCP Packet Formats\n   There are three classes of LCP packets:\n      1.
    Link Configuration packets used to establish and configure a\n         link (Configure-Request,
    Configure-Ack, Configure-Nak and\n         Configure-Reject).\n      2. Link Termination
    packets used to terminate a link (Terminate-\n         Request and Terminate-Ack).\n
    \     3. Link Maintenance packets used to manage and debug a link\n         (Code-Reject,
    Protocol-Reject, Echo-Request, Echo-Reply, and\n         Discard-Request).\n   In
    the interest of simplicity, there is no version field in the LCP\n   packet.  A
    correctly functioning LCP implementation will always\n   respond to unknown Protocols
    and Codes with an easily recognizable\n   LCP packet, thus providing a deterministic
    fallback mechanism for\n   implementations of other versions.\n   Regardless of
    which Configuration Options are enabled, all LCP Link\n   Configuration, Link
    Termination, and Code-Reject packets (codes 1\n   through 7) are always sent as
    if no Configuration Options were\n   negotiated.  In particular, each Configuration
    Option specifies a\n   default value.  This ensures that such LCP packets are
    always\n   recognizable, even when one end of the link mistakenly believes the\n
    \  link to be open.\n   Exactly one LCP packet is encapsulated in the PPP Information
    field,\n   where the PPP Protocol field indicates type hex c021 (Link Control\n
    \  Protocol).\n   A summary of the Link Control Protocol packet format is shown
    below.\n   The fields are transmitted from left to right.\n    0                   1
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |    Data ...\n   +-+-+-+-+\n   Code\n      The Code field is one octet, and
    identifies the kind of LCP\n      packet.  When a packet is received with an unknown
    Code field, a\n      Code-Reject packet is transmitted.\n      Up-to-date values
    of the LCP Code field are specified in the most\n      recent \"Assigned Numbers\"
    RFC [2].  This document concerns the\n      following values:\n         1       Configure-Request\n
    \        2       Configure-Ack\n         3       Configure-Nak\n         4       Configure-Reject\n
    \        5       Terminate-Request\n         6       Terminate-Ack\n         7
    \      Code-Reject\n         8       Protocol-Reject\n         9       Echo-Request\n
    \        10      Echo-Reply\n         11      Discard-Request\n   Identifier\n
    \     The Identifier field is one octet, and aids in matching requests\n      and
    replies.  When a packet is received with an invalid Identifier\n      field, the
    packet is silently discarded without affecting the\n      automaton.\n   Length\n
    \     The Length field is two octets, and indicates the length of the\n      LCP
    packet, including the Code, Identifier, Length and Data\n      fields.  The Length
    MUST NOT exceed the MRU of the link.\n      Octets outside the range of the Length
    field are treated as\n      padding and are ignored on reception.  When a packet
    is received\n      with an invalid Length field, the packet is silently discarded\n
    \     without affecting the automaton.\n   Data\n      The Data field is zero
    or more octets, as indicated by the Length\n      field.  The format of the Data
    field is determined by the Code\n      field.\n"
  - contents:
    - "5.1.  Configure-Request\n   Description\n      An implementation wishing to
      open a connection MUST transmit a\n      Configure-Request.  The Options field
      is filled with any desired\n      changes to the link defaults.  Configuration
      Options SHOULD NOT be\n      included with default values.\n      Upon reception
      of a Configure-Request, an appropriate reply MUST\n      be transmitted.\n   A
      summary of the Configure-Request packet format is shown below.  The\n   fields
      are transmitted from left to right.\n    0                   1                   2
      \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | Options ...\n   +-+-+-+-+\n   Code\n      1 for Configure-Request.\n   Identifier\n
      \     The Identifier field MUST be changed whenever the contents of the\n      Options
      field changes, and whenever a valid reply has been\n      received for a previous
      request.  For retransmissions, the\n      Identifier MAY remain unchanged.\n
      \  Options\n      The options field is variable in length, and contains the
      list of\n      zero or more Configuration Options that the sender desires to\n
      \     negotiate.  All Configuration Options are always negotiated\n      simultaneously.
      \ The format of Configuration Options is further\n      described in a later
      chapter.\n"
    title: 5.1.  Configure-Request
  - contents:
    - "5.2.  Configure-Ack\n   Description\n      If every Configuration Option received
      in a Configure-Request is\n      recognizable and all values are acceptable,
      then the\n      implementation MUST transmit a Configure-Ack.  The acknowledged\n
      \     Configuration Options MUST NOT be reordered or modified in any\n      way.\n
      \     On reception of a Configure-Ack, the Identifier field MUST match\n      that
      of the last transmitted Configure-Request.  Additionally, the\n      Configuration
      Options in a Configure-Ack MUST exactly match those\n      of the last transmitted
      Configure-Request.  Invalid packets are\n      silently discarded.\n   A summary
      of the Configure-Ack packet format is shown below.  The\n   fields are transmitted
      from left to right.\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | Options ...\n   +-+-+-+-+\n   Code\n      2 for Configure-Ack.\n   Identifier\n
      \     The Identifier field is a copy of the Identifier field of the\n      Configure-Request
      which caused this Configure-Ack.\n   Options\n      The Options field is variable
      in length, and contains the list of\n      zero or more Configuration Options
      that the sender is\n      acknowledging.  All Configuration Options are always
      acknowledged\n      simultaneously.\n"
    title: 5.2.  Configure-Ack
  - contents:
    - "5.3.  Configure-Nak\n   Description\n      If every instance of the received
      Configuration Options is\n      recognizable, but some values are not acceptable,
      then the\n      implementation MUST transmit a Configure-Nak.  The Options field\n
      \     is filled with only the unacceptable Configuration Options from\n      the
      Configure-Request.  All acceptable Configuration Options are\n      filtered
      out of the Configure-Nak, but otherwise the Configuration\n      Options from
      the Configure-Request MUST NOT be reordered.\n      Options which have no value
      fields (boolean options) MUST use the\n      Configure-Reject reply instead.\n
      \     Each Configuration Option which is allowed only a single instance\n      MUST
      be modified to a value acceptable to the Configure-Nak\n      sender.  The default
      value MAY be used, when this differs from the\n      requested value.\n      When
      a particular type of Configuration Option can be listed more\n      than once
      with different values, the Configure-Nak MUST include a\n      list of all values
      for that option which are acceptable to the\n      Configure-Nak sender.  This
      includes acceptable values that were\n      present in the Configure-Request.\n
      \     Finally, an implementation may be configured to request the\n      negotiation
      of a specific Configuration Option.  If that option is\n      not listed, then
      that option MAY be appended to the list of Nak'd\n      Configuration Options,
      in order to prompt the peer to include that\n      option in its next Configure-Request
      packet.  Any value fields for\n      the option MUST indicate values acceptable
      to the Configure-Nak\n      sender.\n      On reception of a Configure-Nak,
      the Identifier field MUST match\n      that of the last transmitted Configure-Request.
      \ Invalid packets\n      are silently discarded.\n      Reception of a valid
      Configure-Nak indicates that when a new\n      Configure-Request is sent, the
      Configuration Options MAY be\n      modified as specified in the Configure-Nak.
      \ When multiple\n      instances of a Configuration Option are present, the
      peer SHOULD\n      select a single value to include in its next Configure-Request\n
      \     packet.\n      Some Configuration Options have a variable length.  Since
      the\n      Nak'd Option has been modified by the peer, the implementation\n
      \     MUST be able to handle an Option length which is different from\n      the
      original Configure-Request.\n   A summary of the Configure-Nak packet format
      is shown below.  The\n   fields are transmitted from left to right.\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | Options ...\n   +-+-+-+-+\n   Code\n      3 for Configure-Nak.\n   Identifier\n
      \     The Identifier field is a copy of the Identifier field of the\n      Configure-Request
      which caused this Configure-Nak.\n   Options\n      The Options field is variable
      in length, and contains the list of\n      zero or more Configuration Options
      that the sender is Nak'ing.\n      All Configuration Options are always Nak'd
      simultaneously.\n"
    title: 5.3.  Configure-Nak
  - contents:
    - "5.4.  Configure-Reject\n   Description\n      If some Configuration Options
      received in a Configure-Request are\n      not recognizable or are not acceptable
      for negotiation (as\n      configured by a network administrator), then the
      implementation\n      MUST transmit a Configure-Reject.  The Options field is
      filled\n      with only the unacceptable Configuration Options from the\n      Configure-Request.
      \ All recognizable and negotiable Configuration\n      Options are filtered
      out of the Configure-Reject, but otherwise\n      the Configuration Options
      MUST NOT be reordered or modified in any\n      way.\n      On reception of
      a Configure-Reject, the Identifier field MUST\n      match that of the last
      transmitted Configure-Request.\n      Additionally, the Configuration Options
      in a Configure-Reject MUST\n      be a proper subset of those in the last transmitted
      Configure-\n      Request.  Invalid packets are silently discarded.\n      Reception
      of a valid Configure-Reject indicates that when a new\n      Configure-Request
      is sent, it MUST NOT include any of the\n      Configuration Options listed
      in the Configure-Reject.\n   A summary of the Configure-Reject packet format
      is shown below.  The\n   fields are transmitted from left to right.\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | Options ...\n   +-+-+-+-+\n   Code\n      4 for Configure-Reject.\n   Identifier\n
      \     The Identifier field is a copy of the Identifier field of the\n      Configure-Request
      which caused this Configure-Reject.\n   Options\n      The Options field is
      variable in length, and contains the list of\n      zero or more Configuration
      Options that the sender is rejecting.\n      All Configuration Options are always
      rejected simultaneously.\n"
    title: 5.4.  Configure-Reject
  - contents:
    - "5.5.  Terminate-Request and Terminate-Ack\n   Description\n      LCP includes
      Terminate-Request and Terminate-Ack Codes in order to\n      provide a mechanism
      for closing a connection.\n      An implementation wishing to close a connection
      SHOULD transmit a\n      Terminate-Request.  Terminate-Request packets SHOULD
      continue to\n      be sent until Terminate-Ack is received, the lower layer
      indicates\n      that it has gone down, or a sufficiently large number have
      been\n      transmitted such that the peer is down with reasonable certainty.\n
      \     Upon reception of a Terminate-Request, a Terminate-Ack MUST be\n      transmitted.\n
      \     Reception of an unelicited Terminate-Ack indicates that the peer\n      is
      in the Closed or Stopped states, or is otherwise in need of\n      re-negotiation.\n
      \  A summary of the Terminate-Request and Terminate-Ack packet formats\n   is
      shown below.  The fields are transmitted from left to right.\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    Data ...\n   +-+-+-+-+\n   Code\n      5 for Terminate-Request;\n      6
      for Terminate-Ack.\n   Identifier\n      On transmission, the Identifier field
      MUST be changed whenever the\n      content of the Data field changes, and whenever
      a valid reply has\n      been received for a previous request.  For retransmissions,
      the\n      Identifier MAY remain unchanged.\n      On reception, the Identifier
      field of the Terminate-Request is\n      copied into the Identifier field of
      the Terminate-Ack packet.\n   Data\n      The Data field is zero or more octets,
      and contains uninterpreted\n      data for use by the sender.  The data may
      consist of any binary\n      value.  The end of the field is indicated by the
      Length.\n"
    title: 5.5.  Terminate-Request and Terminate-Ack
  - contents:
    - "5.6.  Code-Reject\n   Description\n      Reception of a LCP packet with an
      unknown Code indicates that the\n      peer is operating with a different version.
      \ This MUST be reported\n      back to the sender of the unknown Code by transmitting
      a Code-\n      Reject.\n      Upon reception of the Code-Reject of a code which
      is fundamental\n      to this version of the protocol, the implementation SHOULD
      report\n      the problem and drop the connection, since it is unlikely that
      the\n      situation can be rectified automatically.\n   A summary of the Code-Reject
      packet format is shown below.  The\n   fields are transmitted from left to right.\n
      \   0                   1                   2                   3\n    0 1 2
      3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | Rejected-Packet ...\n   +-+-+-+-+-+-+-+-+\n   Code\n      7 for Code-Reject.\n
      \  Identifier\n      The Identifier field MUST be changed for each Code-Reject
      sent.\n   Rejected-Packet\n      The Rejected-Packet field contains a copy of
      the LCP packet which\n      is being rejected.  It begins with the Information
      field, and does\n      not include any Data Link Layer headers nor an FCS.  The\n
      \     Rejected-Packet MUST be truncated to comply with the peer's\n      established
      MRU.\n"
    title: 5.6.  Code-Reject
  - contents:
    - "5.7.  Protocol-Reject\n   Description\n      Reception of a PPP packet with
      an unknown Protocol field indicates\n      that the peer is attempting to use
      a protocol which is\n      unsupported.  This usually occurs when the peer attempts
      to\n      configure a new protocol.  If the LCP automaton is in the Opened\n
      \     state, then this MUST be reported back to the peer by transmitting\n      a
      Protocol-Reject.\n      Upon reception of a Protocol-Reject, the implementation
      MUST stop\n      sending packets of the indicated protocol at the earliest\n
      \     opportunity.\n      Protocol-Reject packets can only be sent in the LCP
      Opened state.\n      Protocol-Reject packets received in any state other than
      the LCP\n      Opened state SHOULD be silently discarded.\n   A summary of the
      Protocol-Reject packet format is shown below.  The\n   fields are transmitted
      from left to right.\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |       Rejected-Protocol       |      Rejected-Information ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Code\n      8 for Protocol-Reject.\n   Identifier\n      The Identifier field
      MUST be changed for each Protocol-Reject\n      sent.\n   Rejected-Protocol\n
      \     The Rejected-Protocol field is two octets, and contains the PPP\n      Protocol
      field of the packet which is being rejected.\n   Rejected-Information\n      The
      Rejected-Information field contains a copy of the packet which\n      is being
      rejected.  It begins with the Information field, and does\n      not include
      any Data Link Layer headers nor an FCS.  The\n      Rejected-Information MUST
      be truncated to comply with the peer's\n      established MRU.\n"
    title: 5.7.  Protocol-Reject
  - contents:
    - "5.8.  Echo-Request and Echo-Reply\n   Description\n      LCP includes Echo-Request
      and Echo-Reply Codes in order to provide\n      a Data Link Layer loopback mechanism
      for use in exercising both\n      directions of the link.  This is useful as
      an aid in debugging,\n      link quality determination, performance testing,
      and for numerous\n      other functions.\n      Upon reception of an Echo-Request
      in the LCP Opened state, an\n      Echo-Reply MUST be transmitted.\n      Echo-Request
      and Echo-Reply packets MUST only be sent in the LCP\n      Opened state.  Echo-Request
      and Echo-Reply packets received in any\n      state other than the LCP Opened
      state SHOULD be silently\n      discarded.\n   A summary of the Echo-Request
      and Echo-Reply packet formats is shown\n   below.  The fields are transmitted
      from left to right.\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                         Magic-Number                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    Data ...\n   +-+-+-+-+\n   Code\n      9 for Echo-Request;\n      10
      for Echo-Reply.\n   Identifier\n      On transmission, the Identifier field
      MUST be changed whenever the\n      content of the Data field changes, and whenever
      a valid reply has\n      been received for a previous request.  For retransmissions,
      the\n      Identifier MAY remain unchanged.\n      On reception, the Identifier
      field of the Echo-Request is copied\n      into the Identifier field of the
      Echo-Reply packet.\n   Magic-Number\n      The Magic-Number field is four octets,
      and aids in detecting links\n      which are in the looped-back condition.  Until
      the Magic-Number\n      Configuration Option has been successfully negotiated,
      the Magic-\n      Number MUST be transmitted as zero.  See the Magic-Number\n
      \     Configuration Option for further explanation.\n   Data\n      The Data
      field is zero or more octets, and contains uninterpreted\n      data for use
      by the sender.  The data may consist of any binary\n      value.  The end of
      the field is indicated by the Length.\n"
    title: 5.8.  Echo-Request and Echo-Reply
  - contents:
    - "5.9.  Discard-Request\n   Description\n      LCP includes a Discard-Request
      Code in order to provide a Data\n      Link Layer sink mechanism for use in
      exercising the local to\n      remote direction of the link.  This is useful
      as an aid in\n      debugging, performance testing, and for numerous other functions.\n
      \     Discard-Request packets MUST only be sent in the LCP Opened state.\n      On
      reception, the receiver MUST silently discard any Discard-\n      Request that
      it receives.\n   A summary of the Discard-Request packet format is shown below.
      \ The\n   fields are transmitted from left to right.\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                         Magic-Number                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    Data ...\n   +-+-+-+-+\n   Code\n      11 for Discard-Request.\n   Identifier\n
      \     The Identifier field MUST be changed for each Discard-Request\n      sent.\n
      \  Magic-Number\n      The Magic-Number field is four octets, and aids in detecting
      links\n      which are in the looped-back condition.  Until the Magic-Number\n
      \     Configuration Option has been successfully negotiated, the Magic-\n      Number
      MUST be transmitted as zero.  See the Magic-Number\n      Configuration Option
      for further explanation.\n   Data\n      The Data field is zero or more octets,
      and contains uninterpreted\n      data for use by the sender.  The data may
      consist of any binary\n      value.  The end of the field is indicated by the
      Length.\n"
    title: 5.9.  Discard-Request
  title: 5.  LCP Packet Formats
- contents:
  - "6.  LCP Configuration Options\n   LCP Configuration Options allow negotiation
    of modifications to the\n   default characteristics of a point-to-point link.
    \ If a Configuration\n   Option is not included in a Configure-Request packet,
    the default\n   value for that Configuration Option is assumed.\n   Some Configuration
    Options MAY be listed more than once.  The effect\n   of this is Configuration
    Option specific, and is specified by each\n   such Configuration Option description.
    \ (None of the Configuration\n   Options in this specification can be listed more
    than once.)\n   The end of the list of Configuration Options is indicated by the\n
    \  Length field of the LCP packet.\n   Unless otherwise specified, all Configuration
    Options apply in a\n   half-duplex fashion; typically, in the receive direction
    of the link\n   from the point of view of the Configure-Request sender.\n   Design
    Philosophy\n      The options indicate additional capabilities or requirements
    of\n      the implementation that is requesting the option.  An\n      implementation
    which does not understand any option SHOULD\n      interoperate with one which
    implements every option.\n      A default is specified for each option which allows
    the link to\n      correctly function without negotiation of the option, although\n
    \     perhaps with less than optimal performance.\n      Except where explicitly
    specified, acknowledgement of an option\n      does not require the peer to take
    any additional action other than\n      the default.\n      It is not necessary
    to send the default values for the options in\n      a Configure-Request.\n   A
    summary of the Configuration Option format is shown below.  The\n   fields are
    transmitted from left to right.\n    0                   1\n    0 1 2 3 4 5 6
    7 8 9 0 1 2 3 4 5 6 7 8 9\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |
    \    Type      |    Length     |    Data ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  Type\n      The Type field is one octet, and indicates the type of\n      Configuration
    Option.  Up-to-date values of the LCP Option Type\n      field are specified in
    the most recent \"Assigned Numbers\" RFC [2].\n      This document concerns the
    following values:\n         0       RESERVED\n         1       Maximum-Receive-Unit\n
    \        3       Authentication-Protocol\n         4       Quality-Protocol\n
    \        5       Magic-Number\n         7       Protocol-Field-Compression\n         8
    \      Address-and-Control-Field-Compression\n   Length\n      The Length field
    is one octet, and indicates the length of this\n      Configuration Option including
    the Type, Length and Data fields.\n      If a negotiable Configuration Option
    is received in a Configure-\n      Request, but with an invalid or unrecognized
    Length, a Configure-\n      Nak SHOULD be transmitted which includes the desired
    Configuration\n      Option with an appropriate Length and Data.\n   Data\n      The
    Data field is zero or more octets, and contains information\n      specific to
    the Configuration Option.  The format and length of\n      the Data field is determined
    by the Type and Length fields.\n      When the Data field is indicated by the
    Length to extend beyond\n      the end of the Information field, the entire packet
    is silently\n      discarded without affecting the automaton.\n"
  - contents:
    - "6.1.  Maximum-Receive-Unit (MRU)\n   Description\n      This Configuration
      Option may be sent to inform the peer that the\n      implementation can receive
      larger packets, or to request that the\n      peer send smaller packets.\n      The
      default value is 1500 octets.  If smaller packets are\n      requested, an implementation
      MUST still be able to receive the\n      full 1500 octet information field in
      case link synchronization is\n      lost.\n      Implementation Note:\n         This
      option is used to indicate an implementation capability.\n         The peer
      is not required to maximize the use of the capacity.\n         For example,
      when a MRU is indicated which is 2048 octets, the\n         peer is not required
      to send any packet with 2048 octets.  The\n         peer need not Configure-Nak
      to indicate that it will only send\n         smaller packets, since the implementation
      will always require\n         support for at least 1500 octets.\n   A summary
      of the Maximum-Receive-Unit Configuration Option format is\n   shown below.
      \ The fields are transmitted from left to right.\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Type      |    Length     |      Maximum-Receive-Unit     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Type\n      1\n   Length\n      4\n   Maximum-Receive-Unit\n      The Maximum-Receive-Unit
      field is two octets, and specifies the\n      maximum number of octets in the
      Information and Padding fields.\n      It does not include the framing, Protocol
      field, FCS, nor any\n      transparency bits or bytes.\n"
    title: 6.1.  Maximum-Receive-Unit (MRU)
  - contents:
    - "6.2.  Authentication-Protocol\n   Description\n      On some links it may be
      desirable to require a peer to\n      authenticate itself before allowing network-layer
      protocol packets\n      to be exchanged.\n      This Configuration Option provides
      a method to negotiate the use\n      of a specific protocol for authentication.
      \ By default,\n      authentication is not required.\n      An implementation
      MUST NOT include multiple Authentication-\n      Protocol Configuration Options
      in its Configure-Request packets.\n      Instead, it SHOULD attempt to configure
      the most desirable\n      protocol first.  If that protocol is Configure-Nak'd,
      then the\n      implementation SHOULD attempt the next most desirable protocol
      in\n      the next Configure-Request.\n      The implementation sending the
      Configure-Request is indicating\n      that it expects authentication from its
      peer.  If an\n      implementation sends a Configure-Ack, then it is agreeing
      to\n      authenticate with the specified protocol.  An implementation\n      receiving
      a Configure-Ack SHOULD expect the peer to authenticate\n      with the acknowledged
      protocol.\n      There is no requirement that authentication be full-duplex
      or that\n      the same protocol be used in both directions.  It is perfectly\n
      \     acceptable for different protocols to be used in each direction.\n      This
      will, of course, depend on the specific protocols negotiated.\n   A summary
      of the Authentication-Protocol Configuration Option format\n   is shown below.
      \ The fields are transmitted from left to right.\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Type      |    Length     |     Authentication-Protocol   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    Data ...\n   +-+-+-+-+\n   Type\n      3\n   Length\n      >= 4\n   Authentication-Protocol\n
      \     The Authentication-Protocol field is two octets, and indicates the\n      authentication
      protocol desired.  Values for this field are always\n      the same as the PPP
      Protocol field values for that same\n      authentication protocol.\n      Up-to-date
      values of the Authentication-Protocol field are\n      specified in the most
      recent \"Assigned Numbers\" RFC [2].  Current\n      values are assigned as
      follows:\n      Value (in hex)  Protocol\n      c023            Password Authentication
      Protocol\n      c223            Challenge Handshake Authentication Protocol\n
      \  Data\n      The Data field is zero or more octets, and contains additional\n
      \     data as determined by the particular protocol.\n"
    title: 6.2.  Authentication-Protocol
  - contents:
    - "6.3.  Quality-Protocol\n   Description\n      On some links it may be desirable
      to determine when, and how\n      often, the link is dropping data.  This process
      is called link\n      quality monitoring.\n      This Configuration Option provides
      a method to negotiate the use\n      of a specific protocol for link quality
      monitoring.  By default,\n      link quality monitoring is disabled.\n      The
      implementation sending the Configure-Request is indicating\n      that it expects
      to receive monitoring information from its peer.\n      If an implementation
      sends a Configure-Ack, then it is agreeing to\n      send the specified protocol.
      \ An implementation receiving a\n      Configure-Ack SHOULD expect the peer
      to send the acknowledged\n      protocol.\n      There is no requirement that
      quality monitoring be full-duplex or\n      that the same protocol be used in
      both directions.  It is\n      perfectly acceptable for different protocols
      to be used in each\n      direction.  This will, of course, depend on the specific
      protocols\n      negotiated.\n   A summary of the Quality-Protocol Configuration
      Option format is\n   shown below.  The fields are transmitted from left to right.\n
      \   0                   1                   2                   3\n    0 1 2
      3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Type      |    Length     |        Quality-Protocol       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    Data ...\n   +-+-+-+-+\n   Type\n      4\n   Length\n      >= 4\n   Quality-Protocol\n
      \     The Quality-Protocol field is two octets, and indicates the link\n      quality
      monitoring protocol desired.  Values for this field are\n      always the same
      as the PPP Protocol field values for that same\n      monitoring protocol.\n
      \     Up-to-date values of the Quality-Protocol field are specified in\n      the
      most recent \"Assigned Numbers\" RFC [2].  Current values are\n      assigned
      as follows:\n      Value (in hex)  Protocol\n      c025            Link Quality
      Report\n   Data\n      The Data field is zero or more octets, and contains additional\n
      \     data as determined by the particular protocol.\n"
    title: 6.3.  Quality-Protocol
  - contents:
    - "6.4.  Magic-Number\n   Description\n      This Configuration Option provides
      a method to detect looped-back\n      links and other Data Link Layer anomalies.
      \ This Configuration\n      Option MAY be required by some other Configuration
      Options such as\n      the Quality-Protocol Configuration Option.  By default,
      the\n      Magic-Number is not negotiated, and zero is inserted where a\n      Magic-Number
      might otherwise be used.\n      Before this Configuration Option is requested,
      an implementation\n      MUST choose its Magic-Number.  It is recommended that
      the Magic-\n      Number be chosen in the most random manner possible in order
      to\n      guarantee with very high probability that an implementation will\n
      \     arrive at a unique number.  A good way to choose a unique random\n      number
      is to start with a unique seed.  Suggested sources of\n      uniqueness include
      machine serial numbers, other network hardware\n      addresses, time-of-day
      clocks, etc.  Particularly good random\n      number seeds are precise measurements
      of the inter-arrival time of\n      physical events such as packet reception
      on other connected\n      networks, server response time, or the typing rate
      of a human\n      user.  It is also suggested that as many sources as possible
      be\n      used simultaneously.\n      When a Configure-Request is received with
      a Magic-Number\n      Configuration Option, the received Magic-Number is compared
      with\n      the Magic-Number of the last Configure-Request sent to the peer.\n
      \     If the two Magic-Numbers are different, then the link is not\n      looped-back,
      and the Magic-Number SHOULD be acknowledged.  If the\n      two Magic-Numbers
      are equal, then it is possible, but not certain,\n      that the link is looped-back
      and that this Configure-Request is\n      actually the one last sent.  To determine
      this, a Configure-Nak\n      MUST be sent specifying a different Magic-Number
      value.  A new\n      Configure-Request SHOULD NOT be sent to the peer until
      normal\n      processing would cause it to be sent (that is, until a Configure-\n
      \     Nak is received or the Restart timer runs out).\n      Reception of a
      Configure-Nak with a Magic-Number different from\n      that of the last Configure-Nak
      sent to the peer proves that a link\n      is not looped-back, and indicates
      a unique Magic-Number.  If the\n      Magic-Number is equal to the one sent
      in the last Configure-Nak,\n      the possibility of a looped-back link is increased,
      and a new\n      Magic-Number MUST be chosen.  In either case, a new Configure-\n
      \     Request SHOULD be sent with the new Magic-Number.\n      If the link is
      indeed looped-back, this sequence (transmit\n      Configure-Request, receive
      Configure-Request, transmit Configure-\n      Nak, receive Configure-Nak) will
      repeat over and over again.  If\n      the link is not looped-back, this sequence
      might occur a few\n      times, but it is extremely unlikely to occur repeatedly.
      \ More\n      likely, the Magic-Numbers chosen at either end will quickly\n
      \     diverge, terminating the sequence.  The following table shows the\n      probability
      of collisions assuming that both ends of the link\n      select Magic-Numbers
      with a perfectly uniform distribution:\n         Number of Collisions        Probability\n
      \        --------------------   ---------------------\n                 1              1/2**32
      \   = 2.3 E-10\n                 2              1/2**32**2 = 5.4 E-20\n                 3
      \             1/2**32**3 = 1.3 E-29\n      Good sources of uniqueness or randomness
      are required for this\n      divergence to occur.  If a good source of uniqueness
      cannot be\n      found, it is recommended that this Configuration Option not
      be\n      enabled; Configure-Requests with the option SHOULD NOT be\n      transmitted
      and any Magic-Number Configuration Options which the\n      peer sends SHOULD
      be either acknowledged or rejected.  In this\n      case, looped-back links
      cannot be reliably detected by the\n      implementation, although they may
      still be detectable by the peer.\n      If an implementation does transmit a
      Configure-Request with a\n      Magic-Number Configuration Option, then it MUST
      NOT respond with a\n      Configure-Reject when it receives a Configure-Request
      with a\n      Magic-Number Configuration Option.  That is, if an implementation\n
      \     desires to use Magic Numbers, then it MUST also allow its peer to\n      do
      so.  If an implementation does receive a Configure-Reject in\n      response
      to a Configure-Request, it can only mean that the link is\n      not looped-back,
      and that its peer will not be using Magic-\n      Numbers.  In this case, an
      implementation SHOULD act as if the\n      negotiation had been successful (as
      if it had instead received a\n      Configure-Ack).\n      The Magic-Number
      also may be used to detect looped-back links\n      during normal operation,
      as well as during Configuration Option\n      negotiation.  All LCP Echo-Request,
      Echo-Reply, and Discard-\n      Request packets have a Magic-Number field.  If
      Magic-Number has\n      been successfully negotiated, an implementation MUST
      transmit\n      these packets with the Magic-Number field set to its negotiated\n
      \     Magic-Number.\n      The Magic-Number field of these packets SHOULD be
      inspected on\n      reception.  All received Magic-Number fields MUST be equal
      to\n      either zero or the peer's unique Magic-Number, depending on\n      whether
      or not the peer negotiated a Magic-Number.\n      Reception of a Magic-Number
      field equal to the negotiated local\n      Magic-Number indicates a looped-back
      link.  Reception of a Magic-\n      Number other than the negotiated local Magic-Number,
      the peer's\n      negotiated Magic-Number, or zero if the peer didn't negotiate
      one,\n      indicates a link which has been (mis)configured for communications\n
      \     with a different peer.\n      Procedures for recovery from either case
      are unspecified, and may\n      vary from implementation to implementation.
      \ A somewhat\n      pessimistic procedure is to assume a LCP Down event.  A
      further\n      Open event will begin the process of re-establishing the link,\n
      \     which can't complete until the looped-back condition is\n      terminated,
      and Magic-Numbers are successfully negotiated.  A more\n      optimistic procedure
      (in the case of a looped-back link) is to\n      begin transmitting LCP Echo-Request
      packets until an appropriate\n      Echo-Reply is received, indicating a termination
      of the looped-\n      back condition.\n   A summary of the Magic-Number Configuration
      Option format is shown\n   below.  The fields are transmitted from left to right.\n
      \   0                   1                   2                   3\n    0 1 2
      3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Type      |    Length     |          Magic-Number\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \        Magic-Number (cont)       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Type\n      5\n   Length\n      6\n   Magic-Number\n      The Magic-Number
      field is four octets, and indicates a number\n      which is very likely to
      be unique to one end of the link.  A\n      Magic-Number of zero is illegal
      and MUST always be Nak'd, if it is\n      not Rejected outright.\n"
    title: 6.4.  Magic-Number
  - contents:
    - "6.5.  Protocol-Field-Compression (PFC)\n   Description\n      This Configuration
      Option provides a method to negotiate the\n      compression of the PPP Protocol
      field.  By default, all\n      implementations MUST transmit packets with two
      octet PPP Protocol\n      fields.\n      PPP Protocol field numbers are chosen
      such that some values may be\n      compressed into a single octet form which
      is clearly\n      distinguishable from the two octet form.  This Configuration\n
      \     Option is sent to inform the peer that the implementation can\n      receive
      such single octet Protocol fields.\n      As previously mentioned, the Protocol
      field uses an extension\n      mechanism consistent with the ISO 3309 extension
      mechanism for the\n      Address field; the Least Significant Bit (LSB) of each
      octet is\n      used to indicate extension of the Protocol field.  A binary
      \"0\" as\n      the LSB indicates that the Protocol field continues with the\n
      \     following octet.  The presence of a binary \"1\" as the LSB marks\n      the
      last octet of the Protocol field.  Notice that any number of\n      \"0\" octets
      may be prepended to the field, and will still indicate\n      the same value
      (consider the two binary representations for 3,\n      00000011 and 00000000
      00000011).\n      When using low speed links, it is desirable to conserve bandwidth\n
      \     by sending as little redundant data as possible.  The Protocol-\n      Field-Compression
      Configuration Option allows a trade-off between\n      implementation simplicity
      and bandwidth efficiency.  If\n      successfully negotiated, the ISO 3309 extension
      mechanism may be\n      used to compress the Protocol field to one octet instead
      of two.\n      The large majority of packets are compressible since data\n      protocols
      are typically assigned with Protocol field values less\n      than 256.\n      Compressed
      Protocol fields MUST NOT be transmitted unless this\n      Configuration Option
      has been negotiated.  When negotiated, PPP\n      implementations MUST accept
      PPP packets with either double-octet\n      or single-octet Protocol fields,
      and MUST NOT distinguish between\n      them.\n      The Protocol field is never
      compressed when sending any LCP\n      packet.  This rule guarantees unambiguous
      recognition of LCP\n      packets.\n      When a Protocol field is compressed,
      the Data Link Layer FCS field\n      is calculated on the compressed frame,
      not the original\n      uncompressed frame.\n   A summary of the Protocol-Field-Compression
      Configuration Option\n   format is shown below.  The fields are transmitted
      from left to\n   right.\n    0                   1\n    0 1 2 3 4 5 6 7 8 9
      0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |     Type      |    Length
      \    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Type\n      7\n   Length\n
      \     2\n"
    title: 6.5.  Protocol-Field-Compression (PFC)
  - contents:
    - "6.6.  Address-and-Control-Field-Compression (ACFC)\n   Description\n      This
      Configuration Option provides a method to negotiate the\n      compression of
      the Data Link Layer Address and Control fields.  By\n      default, all implementations
      MUST transmit frames with Address and\n      Control fields appropriate to the
      link framing.\n      Since these fields usually have constant values for point-to-point\n
      \     links, they are easily compressed.  This Configuration Option is\n      sent
      to inform the peer that the implementation can receive\n      compressed Address
      and Control fields.\n      If a compressed frame is received when Address-and-Control-Field-\n
      \     Compression has not been negotiated, the implementation MAY\n      silently
      discard the frame.\n      The Address and Control fields MUST NOT be compressed
      when sending\n      any LCP packet.  This rule guarantees unambiguous recognition
      of\n      LCP packets.\n      When the Address and Control fields are compressed,
      the Data Link\n      Layer FCS field is calculated on the compressed frame,
      not the\n      original uncompressed frame.\n   A summary of the Address-and-Control-Field-Compression
      configuration\n   option format is shown below.  The fields are transmitted
      from left\n   to right.\n    0                   1\n    0 1 2 3 4 5 6 7 8 9
      0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |     Type      |    Length
      \    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Type\n      8\n   Length\n
      \     2\n"
    title: 6.6.  Address-and-Control-Field-Compression (ACFC)
  title: 6.  LCP Configuration Options
- contents:
  - "Security Considerations\n   Security issues are briefly discussed in sections
    concerning the\n   Authentication Phase, the Close event, and the Authentication-\n
    \  Protocol Configuration Option.\n"
  title: Security Considerations
- contents:
  - "References\n   [1]   Perkins, D., \"Requirements for an Internet Standard Point-to-\n
    \        Point Protocol\", RFC 1547, Carnegie Mellon University,\n         December
    1993.\n   [2]   Reynolds, J., and Postel, J., \"Assigned Numbers\", STD 2, RFC\n
    \        1340, USC/Information Sciences Institute, July 1992.\n"
  title: References
- contents:
  - "Acknowledgements\n   This document is the product of the Point-to-Point Protocol
    Working\n   Group of the Internet Engineering Task Force (IETF).  Comments should\n
    \  be submitted to the ietf-ppp@merit.edu mailing list.\n   Much of the text in
    this document is taken from the working group\n   requirements [1]; and RFCs 1171
    & 1172, by Drew Perkins while at\n   Carnegie Mellon University, and by Russ Hobby
    of the University of\n   California at Davis.\n   William Simpson was principally
    responsible for introducing\n   consistent terminology and philosophy, and the
    re-design of the phase\n   and negotiation state machines.\n   Many people spent
    significant time helping to develop the Point-to-\n   Point Protocol.  The complete
    list of people is too numerous to list,\n   but the following people deserve special
    thanks: Rick Adams, Ken\n   Adelman, Fred Baker, Mike Ballard, Craig Fox, Karl
    Fox, Phill Gross,\n   Kory Hamzeh, former WG chair Russ Hobby, David Kaufman,
    former WG\n   chair Steve Knowles, Mark Lewis, former WG chair Brian Lloyd, John\n
    \  LoVerso, Bill Melohn, Mike Patton, former WG chair Drew Perkins, Greg\n   Satz,
    John Shriver, Vernon Schryver, and Asher Waldfogel.\n   Special thanks to Morning
    Star Technologies for providing computing\n   resources and network access support
    for writing this specification.\n"
  title: Acknowledgements
- contents:
  - "Chair's Address\n   The working group can be contacted via the current chair:\n
    \     Fred Baker\n      Advanced Computer Communications\n      315 Bollay Drive\n
    \     Santa Barbara, California  93117\n      fbaker@acc.com\n"
  title: Chair's Address
- contents:
  - "Editor's Address\n   Questions about this memo can also be directed to:\n      William
    Allen Simpson\n      Daydreamer\n      Computer Systems Consulting Services\n
    \     1384 Fontaine\n      Madison Heights, Michigan  48071\n      Bill.Simpson@um.cc.umich.edu\n
    \         bsimpson@MorningStar.com\n"
  title: Editor's Address
