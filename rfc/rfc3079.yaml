- title: __initial_text__
  contents:
  - " Deriving Keys for use with Microsoft Point-to-Point Encryption (MPPE)\nStatus\
    \ of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\nCopyright Notice\n   Copyright (C) The Internet\
    \ Society (2001).  All Rights Reserved.\nAbstract\n   The Point-to-Point Protocol\
    \ (PPP) provides a standard method for\n   transporting multi-protocol datagrams\
    \ over point-to-point links.\n   The PPP Compression Control Protocol provides\
    \ a method to negotiate\n   and utilize compression protocols over PPP encapsulated\
    \ links.\n   Microsoft Point to Point Encryption (MPPE) is a means of representing\n\
    \   PPP packets in an encrypted form.  MPPE uses the RSA RC4 algorithm to\n  \
    \ provide data confidentiality.  The length of the session key to be\n   used\
    \ for initializing encryption tables can be negotiated.  MPPE\n   currently supports\
    \ 40-bit, 56-bit and 128-bit session keys.  MPPE\n   session keys are changed\
    \ frequently; the exact frequency depends upon\n   the options negotiated, but\
    \ may be every packet.  MPPE is negotiated\n   within option 18 in the Compression\
    \ Control Protocol.\n   This document describes the method used to derive initial\
    \ MPPE\n   session keys from a variety of credential types.  It is expected that\n\
    \   this memo will be updated whenever Microsoft defines a new key\n   derivation\
    \ method for MPPE, since its primary purpose is to provide\n   an open, easily\
    \ accessible reference for third-parties wishing to\n   interoperate with Microsoft\
    \ products.\n   MPPE itself (including the protocol used to negotiate its use,\
    \ the\n   details of the encryption method used and the algorithm used to\n  \
    \ change session keys during a session) is described in RFC 3078.\nTable of Contents\n\
    \   1.  Specification of Requirements ............................... 2\n   2.\
    \  Deriving Session Keys from MS-CHAP Credentials .............. 2\n   2.1.  Generating\
    \ 40-bit Session Keys ............................ 3\n   2.2.  Generating 56-bit\
    \ Session Keys ............................ 3\n   2.3.  Generating 128-bit Session\
    \ Keys ........................... 4\n   2.4.  Key Derivation Functions ..................................\
    \ 5\n   2.5.  Sample Key Derivations .................................... 6\n\
    \   2.5.1.  Sample 40-bit Key Derivation ............................ 6\n   2.5.2.\
    \  Sample 56-bit Key Derivation ............................ 6\n   2.5.3.  Sample\
    \ 128-bit Key Derivation ........................... 7\n   3.  Deriving Session\
    \ Keys from MS-CHAP-2 Credentials ............ 7\n   3.1.  Generating 40-bit Session\
    \ Keys ............................ 8\n   3.2.  Generating 56-bit Session Keys\
    \ ............................ 9\n   3.3.  Generating 128-bit Session Keys ...........................10\n\
    \   3.4.  Key Derivation Functions ..................................11\n   3.5.\
    \  Sample Key Derivations ....................................13\n   3.5.1.  Sample\
    \ 40-bit Key Derivation ............................13\n   3.5.2.  Sample 56-bit\
    \ Key Derivation ............................14\n   3.5.3.  Sample 128-bit Key\
    \ Derivation ...........................15\n   4.  Deriving MPPE Session Keys\
    \ from TLS Session Keys ............16\n   4.1.  Generating 40-bit Session Keys\
    \ ............................16\n   4.2.  Generating 56-bit Session Keys ............................17\n\
    \   4.3.  Generating 128-bit Session Keys ...........................17\n   5.\
    \  Security Considerations .....................................18\n   5.1.  MS-CHAP\
    \ Credentials .......................................18\n   5.2.  EAP-TLS Credentials\
    \ .......................................19\n   6.  References ..................................................19\n\
    \   7.  Acknowledgements ............................................20\n   8.\
    \  Author's Address ............................................20\n   9.  Full\
    \ Copyright Statement ....................................21\n1.  Specification\
    \ of Requirements\n   In this document, the key words \"MAY\", \"MUST, \"MUST\
    \ NOT\", \"optional\",\n   \"recommended\", \"SHOULD\", and \"SHOULD NOT\" are\
    \ to be interpreted as\n   described in [6].\n2.  Deriving Session Keys from MS-CHAP\
    \ Credentials\n   The Microsoft Challenge-Handshake Authentication Protocol (MS-CHAP-1)\n\
    \   [2] is a Microsoft-proprietary PPP [1] authentication protocol,\n   providing\
    \ the functionality to which LAN-based users are accustomed\n   while integrating\
    \ the encryption and hashing algorithms used on\n   Windows networks.\n   The\
    \ following sections detail the methods used to derive initial\n   session keys\
    \ (40-, 56- and 128-bit) from MS-CHAP-1 credentials.\n   Implementation Note\n\
    \      The initial session key in both directions is derived from the\n      credentials\
    \ of the peer that initiated the call and the challenge\n      used (if any) is\
    \ the challenge from the first authentication.\n      This is true for both unilateral\
    \ and bilateral authentication, as\n      well as for each link in a multilink\
    \ bundle.  In the multi-chassis\n      multilink case, implementations are responsible\
    \ for ensuring that\n      the correct keys are generated on all participating\
    \ machines.\n2.1.  Generating 40-bit Session Keys\n   MPPE uses a derivative of\
    \ the peer's LAN Manager password as the 40-\n   bit session key used for initializing\
    \ the RC4 encryption tables.\n   The first step is to obfuscate the peer's password\
    \ using the\n   LmPasswordHash() function (described in [2]).  The first 8 octets\
    \ of\n   the result are used as the basis for the session key generated in the\n\
    \   following way:\n/*\n* PasswordHash is the basis for the session key\n* SessionKey\
    \ is a copy of PasswordHash and is the generative session key\n* 8 is the length\
    \ (in octets) of the key to be generated.\n*\n*/\nGet_Key(PasswordHash, SessionKey,\
    \ 8)\n/*\n* The effective length of the key is reduced to 40 bits by\n* replacing\
    \ the first three bytes as follows:\n*/\nSessionKey[0] = 0xd1 ;\nSessionKey[1]\
    \ = 0x26 ;\nSessionKey[2] = 0x9e ;\n2.2.  Generating 56-bit Session Keys\n   MPPE\
    \ uses a derivative of the peer's LAN Manager password as the 56-\n   bit session\
    \ key used for initializing the RC4 encryption tables.\n   The first step is to\
    \ obfuscate the peer's password using the\n   LmPasswordHash() function (described\
    \ in [2]).  The first 8 octets of\n   the result are used as the basis for the\
    \ session key generated in the\n   following way:\n/*\n* PasswordHash is the basis\
    \ for the session key\n* SessionKey is a copy of PasswordHash and is the generative\
    \ session key\n* 8 is the length (in octets) of the key to be generated.\n*\n\
    */\nGet_Key(PasswordHash, SessionKey, 8)\n/*\n* The effective length of the key\
    \ is reduced to 56 bits by\n* replacing the first byte as follows:\n*/\nSessionKey[0]\
    \ = 0xd1 ;\n2.3.  Generating 128-bit Session Keys\n   MPPE uses a derivative of\
    \ the peer's Windows NT password as the 128-\n   bit session key used for initializing\
    \ encryption tables.\n   The first step is to obfuscate the peer's password using\n\
    \   NtPasswordHash() function as described in [2].  The first 16 octets\n   of\
    \ the result are then hashed again using the MD4 algorithm.  The\n   first 16\
    \ octets of the second hash are used as the basis for the\n   session key generated\
    \ in the following way:\n/*\n* Challenge (as described in [9]) is sent by the\
    \ PPP authenticator\n* during authentication and is 8 octets long.\n* NtPasswordHashHash\
    \ is the basis for the session key.\n* On return, InitialSessionKey contains the\
    \ initial session\n* key to be used.\n*/\nGet_Start_Key(Challenge, NtPasswordHashHash,\
    \ InitialSessionKey)\n/*\n* CurrentSessionKey is a copy of InitialSessionKey\n\
    * and is the generative session key.\n* Length (in octets) of the key to generate\
    \ is 16.\n*\n*/\nGet_Key(InitialSessionKey, CurrentSessionKey, 16)\n2.4.  Key\
    \ Derivation Functions\n   The following procedures are used to derive the session\
    \ key.\n/*\n * Pads used in key derivation\n */\nSHApad1[40] =\n   {0x00, 0x00,\
    \ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\
    \ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
    \ 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
    \ 0x00, 0x00};\nSHApad2[40] =\n   {0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,\
    \ 0xf2, 0xf2,\n    0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,\n\
    \    0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,\n    0xf2, 0xf2,\
    \ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2};\n/*\n * SHAInit(), SHAUpdate()\
    \ and SHAFinal() functions are an\n * implementation of Secure Hash Algorithm\
    \ (SHA-1) [7]. These are\n * available in public domain or can be licensed from\n\
    \ * RSA Data Security, Inc.\n *\n * 1) InitialSessionKey is 8 octets long for\
    \ 56- and 40-bit\n *    session keys, 16 octets long for 128 bit session keys.\n\
    \ * 2) CurrentSessionKey is same as InitialSessionKey when this\n *    routine\
    \ is called for the first time for the session.\n */\nGet_Key(\nIN     InitialSessionKey,\n\
    IN/OUT CurrentSessionKey\nIN     LengthOfDesiredKey )\n{\n   SHAInit(Context)\n\
    \   SHAUpdate(Context, InitialSessionKey, LengthOfDesiredKey)\n   SHAUpdate(Context,\
    \ SHAPad1, 40)\n   SHAUpdate(Context, CurrentSessionKey, LengthOfDesiredKey)\n\
    \   SHAUpdate(Context, SHAPad2, 40)\n   SHAFinal(Context, Digest)\n   memcpy(CurrentSessionKey,\
    \ Digest, LengthOfDesiredKey)\n}\nGet_Start_Key(\nIN  Challenge,\nIN  NtPasswordHashHash,\n\
    OUT InitialSessionKey)\n{\n   SHAInit(Context)\n   SHAUpdate(Context, NtPasswordHashHash,\
    \ 16)\n   SHAUpdate(Context, NtPasswordHashHash, 16)\n   SHAUpdate(Context, Challenge,\
    \ 8)\n   SHAFinal(Context, Digest)\n   memcpy(InitialSessionKey, Digest, 16)\n\
    }\n2.5.  Sample Key Derivations\n   The following sections illustrate 40-, 56-\
    \ and 128-bit key\n   derivations.  All intermediate values are in hexadecimal.\n\
    2.5.1.  Sample 40-bit Key Derivation\n   Initial Values\n      Password = \"clientPass\"\
    \n   Step 1: LmPasswordHash(Password, PasswordHash)\n      PasswordHash = 76 a1\
    \ 52 93 60 96 d7 83 0e 23 90 22 74 04 af d2\n   Step 2: Copy PasswordHash to SessionKey\n\
    \      SessionKey = 76 a1 52 93 60 96 d7 83 0e 23 90 22 74 04 af d2\n   Step 3:\
    \ GetKey(PasswordHash, SessionKey, 8)\n      SessionKey = d8 08 01 53 8c ec 4a\
    \ 08\n   Step 4: Reduce the effective key length to 40 bits\n      SessionKey\
    \ = d1 26 9e 53 8c ec 4a 08\n2.5.2.  Sample 56-bit Key Derivation\n   Initial\
    \ Values\n      Password = \"clientPass\"\n   Step 1: LmPasswordHash(Password,\
    \ PasswordHash)\n      PasswordHash = 76 a1 52 93 60 96 d7 83 0e 23 90 22 74 04\
    \ af d2\n   Step 2: Copy PasswordHash to SessionKey\n      SessionKey = 76 a1\
    \ 52 93 60 96 d7 83 0e 23 90 22 74 04 af d2\n   Step 3: GetKey(PasswordHash, SessionKey,\
    \ 8)\n      SessionKey = d8 08 01 53 8c ec 4a 08\n   Step 4: Reduce the effective\
    \ key length to 56 bits\n      SessionKey = d1 08 01 53 8c ec 4a 08\n2.5.3.  Sample\
    \ 128-bit Key Derivation\nInitial Values\n   Password = \"clientPass\"\n   Challenge\
    \ = 10 2d b5 df 08 5d 30 41\nStep 1: NtPasswordHash(Password, PasswordHash)\n\
    \   PasswordHash = 44 eb ba 8d 53 12 b8 d6 11 47 44 11 f5 69 89 ae\nStep 2: PasswordHashHash\
    \ = MD4(PasswordHash)\n   PasswordHashHash = 41 c0 0c 58 4b d2 d9 1c 40 17 a2\
    \ a1 2f a5 9f 3f\nStep 3: GetStartKey(Challenge, PasswordHashHash, InitialSessionKey)\n\
    \   InitialSessionKey = a8 94 78 50 cf c0 ac ca d1 78 9f b6 2d dc dd b0\nStep\
    \ 4: Copy InitialSessionKey to CurrentSessionKey\n   CurrentSessionKey = a8 94\
    \ 78 50 cf c0 ac c1 d1 78 9f b6 2d dc dd b0\nStep 5: GetKey(InitialSessionKey,\
    \ CurrentSessionKey, 16)\n   CurrentSessionKey = 59 d1 59 bc 09 f7 6f 1d a2 a8\
    \ 6a 28 ff ec 0b 1e\n3.  Deriving Session Keys from MS-CHAP-2 Credentials\n  \
    \ Version 2 of the Microsoft Challenge-Handshake Authentication\n   Protocol (MS-CHAP-2)\
    \ [8] is a Microsoft-proprietary PPP\n   authentication protocol, providing the\
    \ functionality to which LAN-\n   based users are accustomed while integrating\
    \ the encryption and\n   hashing algorithms used on Windows networks.\n   The\
    \ following sections detail the methods used to derive initial\n   session keys\
    \ from MS-CHAP-2 credentials.  40-, 56- and 128-bit keys\n   are all derived using\
    \ the same algorithm from the authenticating\n   peer's Windows NT password. \
    \ The only difference is in the length of\n   the keys and their effective strength:\
    \ 40- and 56-bit keys are 8\n   octets in length, while 128-bit keys are 16 octets\
    \ long.  Separate\n   keys are derived for the send and receive directions of\
    \ the session.\n   Implementation Note\n      The initial session keys in both\
    \ directions are derived from the\n      credentials of the peer that initiated\
    \ the call and the challenges\n      used are those from the first authentication.\
    \  This is true as\n      well for each link in a multilink bundle.  In the multi-chassis\n\
    \      multilink case, implementations are responsible for ensuring that\n   \
    \   the correct keys are generated on all participating machines.\n3.1.  Generating\
    \ 40-bit Session Keys\n   When used in conjunction with MS-CHAP-2 authentication,\
    \ the initial\n   MPPE session keys are derived from the peer's Windows NT password.\n\
    \   The first step is to obfuscate the peer's password using\n   NtPasswordHash()\
    \ function as described in [8].\n      NtPasswordHash(Password, PasswordHash)\n\
    \   The first 16 octets of the result are then hashed again using the MD4\n  \
    \ algorithm.\n      PasswordHashHash = md4(PasswordHash)\n   The first 16 octets\
    \ of this second hash are used together with the\n   NT- Response field from the\
    \ MS-CHAP-2 Response packet [8] as the\n   basis for the master session key:\n\
    \      GetMasterKey(PasswordHashHash, NtResponse, MasterKey)\n   Once the master\
    \ key has been generated, it is used to derive two 40-\n   bit session keys, one\
    \ for sending and one for receiving:\n      GetAsymmetricStartKey(MasterKey, MasterSendKey,\
    \ 8, TRUE, TRUE)\n      GetAsymmetricStartKey(MasterKey, MasterReceiveKey, 8,\
    \ FALSE, TRUE)\n   The master session keys are never used to encrypt or decrypt\
    \ data;\n   they are only used in the derivation of transient session keys.  The\n\
    \   initial transient session keys are obtained by calling the function\n   GetNewKeyFromSHA()\
    \ (described in [3]):\nGetNewKeyFromSHA(MasterSendKey, MasterSendKey, 8, SendSessionKey)\n\
    GetNewKeyFromSHA(MasterReceiveKey, MasterReceiveKey, 8,\n                    \
    \                           ReceiveSessionKey)\n   Next, the effective strength\
    \ of both keys is reduced by setting the\n   first three octets to known constants:\n\
    \      SendSessionKey[0] = ReceiveSessionKey[0] = 0xd1\n      SendSessionKey[1]\
    \ = ReceiveSessionKey[1] = 0x26\n      SendSessionKey[2] = ReceiveSessionKey[2]\
    \ = 0x9e\n   Finally, the RC4 tables are initialized using the new session keys:\n\
    \      rc4_key(SendRC4key, 8, SendSessionKey)\n      rc4_key(ReceiveRC4key, 8,\
    \ ReceiveSessionKey)\n3.2.  Generating 56-bit Session Keys\n   When used in conjunction\
    \ with MS-CHAP-2 authentication, the initial\n   MPPE session keys are derived\
    \ from the peer's Windows NT password.\n   The first step is to obfuscate the\
    \ peer's password using\n   NtPasswordHash() function as described in [8].\n \
    \     NtPasswordHash(Password, PasswordHash)\n   The first 16 octets of the result\
    \ are then hashed again using the MD4\n   algorithm.\n      PasswordHashHash =\
    \ md4(PasswordHash)\n   The first 16 octets of this second hash are used together\
    \ with the\n   NT-Response field from the MS-CHAP-2 Response packet [8] as the\
    \ basis\n   for the master session key:\n      GetMasterKey(PasswordHashHash,\
    \ NtResponse, MasterKey)\n   Once the master key has been generated, it is used\
    \ to derive two\n   56-bit session keys, one for sending and one for receiving:\n\
    \      GetAsymmetricStartKey(MasterKey, MasterSendKey, 8, TRUE, TRUE)\n      GetAsymmetricStartKey(MasterKey,\
    \ MasterReceiveKey, 8, FALSE, TRUE)\n   The master session keys are never used\
    \ to encrypt or decrypt data;\n   they are only used in the derivation of transient\
    \ session keys.  The\n   initial transient session keys are obtained by calling\
    \ the function\n   GetNewKeyFromSHA() (described in [3]):\nGetNewKeyFromSHA(MasterSendKey,\
    \ MasterSendKey, 8, SendSessionKey)\nGetNewKeyFromSHA(MasterReceiveKey, MasterReceiveKey,\
    \ 8,\n                                               ReceiveSessionKey)\n   Next,\
    \ the effective strength of both keys is reduced by setting the\n   first octet\
    \ to a known constant:\n      SendSessionKey[0] = ReceiveSessionKey[0] = 0xd1\n\
    \   Finally, the RC4 tables are initialized using the new session keys:\n    \
    \  rc4_key(SendRC4key, 8, SendSessionKey)\n      rc4_key(ReceiveRC4key, 8, ReceiveSessionKey)\n\
    3.3.  Generating 128-bit Session Keys\n   When used in conjunction with MS-CHAP-2\
    \ authentication, the initial\n   MPPE session keys are derived from the peer's\
    \ Windows NT password.\n   The first step is to obfuscate the peer's password\
    \ using\n   NtPasswordHash() function as described in [8].\n      NtPasswordHash(Password,\
    \ PasswordHash)\n   The first 16 octets of the result are then hashed again using\
    \ the MD4\n   algorithm.\n      PasswordHashHash = md4(PasswordHash)\n   The first\
    \ 16 octets of this second hash are used together with the\n   NT-Response field\
    \ from the MS-CHAP-2 Response packet [8] as the basis\n   for the master session\
    \ key:\n      GetMasterKey(PasswordHashHash, NtResponse, MasterKey)\n   Once the\
    \ master key has been generated, it is used to derive two\n   128-bit master session\
    \ keys, one for sending and one for receiving:\nGetAsymmetricStartKey(MasterKey,\
    \ MasterSendKey, 16, TRUE, TRUE)\nGetAsymmetricStartKey(MasterKey, MasterReceiveKey,\
    \ 16, FALSE, TRUE)\n   The master session keys are never used to encrypt or decrypt\
    \ data;\n   they are only used in the derivation of transient session keys.  The\n\
    \   initial transient session keys are obtained by calling the function\n   GetNewKeyFromSHA()\
    \ (described in [3]):\nGetNewKeyFromSHA(MasterSendKey, MasterSendKey, 16, SendSessionKey)\n\
    GetNewKeyFromSHA(MasterReceiveKey, MasterReceiveKey, 16,\n                   \
    \                             ReceiveSessionKey)\n   Finally, the RC4 tables are\
    \ initialized using the new session keys:\n      rc4_key(SendRC4key, 16, SendSessionKey)\n\
    \      rc4_key(ReceiveRC4key, 16, ReceiveSessionKey)\n3.4.  Key Derivation Functions\n\
    \   The following procedures are used to derive the session key.\n/*\n * Pads\
    \ used in key derivation\n */\nSHSpad1[40] =\n   {0x00, 0x00, 0x00, 0x00, 0x00,\
    \ 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
    \ 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
    \ 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};\nSHSpad2[40]\
    \ =\n   {0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,\n    0xf2,\
    \ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,\n    0xf2, 0xf2, 0xf2,\
    \ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,\n    0xf2, 0xf2, 0xf2, 0xf2, 0xf2,\
    \ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2};\n/*\n * \"Magic\" constants used in key derivations\n\
    \ */\nMagic1[27] =\n   {0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74,\n\
    \    0x68, 0x65, 0x20, 0x4d, 0x50, 0x50, 0x45, 0x20, 0x4d,\n    0x61, 0x73, 0x74,\
    \ 0x65, 0x72, 0x20, 0x4b, 0x65, 0x79};\nMagic2[84] =\n   {0x4f, 0x6e, 0x20, 0x74,\
    \ 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69,\n    0x65, 0x6e, 0x74, 0x20, 0x73, 0x69,\
    \ 0x64, 0x65, 0x2c, 0x20,\n    0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20,\
    \ 0x74, 0x68,\n    0x65, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x20, 0x6b, 0x65, 0x79,\n\
    \    0x3b, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,\n    0x65, 0x72,\
    \ 0x76, 0x65, 0x72, 0x20, 0x73, 0x69, 0x64, 0x65,\n    0x2c, 0x20, 0x69, 0x74,\
    \ 0x20, 0x69, 0x73, 0x20, 0x74, 0x68,\n    0x65, 0x20, 0x72, 0x65, 0x63, 0x65,\
    \ 0x69, 0x76, 0x65, 0x20,\n    0x6b, 0x65, 0x79, 0x2e};\nMagic3[84] =\n   {0x4f,\
    \ 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69,\n    0x65, 0x6e, 0x74,\
    \ 0x20, 0x73, 0x69, 0x64, 0x65, 0x2c, 0x20,\n    0x74, 0x68, 0x69, 0x73, 0x20,\
    \ 0x69, 0x73, 0x20, 0x74, 0x68,\n    0x65, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69,\
    \ 0x76, 0x65, 0x20,\n    0x6b, 0x65, 0x79, 0x3b, 0x20, 0x6f, 0x6e, 0x20, 0x74,\
    \ 0x68,\n    0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x73,\n   \
    \ 0x69, 0x64, 0x65, 0x2c, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73,\n    0x20, 0x74,\
    \ 0x68, 0x65, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x20,\n    0x6b, 0x65, 0x79, 0x2e};\n\
    \   GetMasterKey(\n   IN  16-octet  PasswordHashHash,\n   IN  24-octet  NTResponse,\n\
    \   OUT 16-octet  MasterKey )\n   {\n      20-octet Digest\n      ZeroMemory(Digest,\
    \ sizeof(Digest));\n      /*\n       * SHSInit(), SHSUpdate() and SHSFinal()\n\
    \       * are an implementation of the Secure Hash Standard [7].\n       */\n\
    \      SHSInit(Context);\n      SHSUpdate(Context, PasswordHashHash, 16);\n  \
    \    SHSUpdate(Context, NTResponse, 24);\n      SHSUpdate(Context, Magic1, 27);\n\
    \      SHSFinal(Context, Digest);\n      MoveMemory(MasterKey, Digest, 16);\n\
    \   }\n   VOID\n   GetAsymetricStartKey(\n   IN   16-octet      MasterKey,\n \
    \  OUT  8-to-16 octet SessionKey,\n   IN   INTEGER       SessionKeyLength,\n \
    \  IN   BOOLEAN       IsSend,\n   IN   BOOLEAN       IsServer )\n   {\n      20-octet\
    \ Digest;\n      ZeroMemory(Digest, 20);\n      if (IsSend) {\n         if (IsServer)\
    \ {\n            s = Magic3\n         } else {\n            s = Magic2\n     \
    \    }\n      } else {\n         if (IsServer) {\n            s = Magic2\n   \
    \      } else {\n            s = Magic3\n         }\n      }\n      /*\n     \
    \  * SHSInit(), SHSUpdate() and SHSFinal()\n       * are an implementation of\
    \ the Secure Hash Standard [7].\n       */\n      SHSInit(Context);\n      SHSUpdate(Context,\
    \ MasterKey, 16);\n      SHSUpdate(Context, SHSpad1, 40);\n      SHSUpdate(Context,\
    \ s, 84);\n      SHSUpdate(Context, SHSpad2, 40);\n      SHSFinal(Context, Digest);\n\
    \      MoveMemory(SessionKey, Digest, SessionKeyLength);\n   }\n3.5.  Sample Key\
    \ Derivations\n   The following sections illustrate 40-, 56- and 128-bit key\n\
    \   derivations. All intermediate values are in hexadecimal.\n3.5.1.  Sample 40-bit\
    \ Key Derivation\nInitial Values\n   UserName = \"User\"\n            =  55 73\
    \ 65 72\n   Password = \"clientPass\"\n            = 63 00 6C 00 69 00 65 00 6E\
    \ 00\n              74 00 50 00 61 00 73 00 73 00\n   AuthenticatorChallenge =\
    \ 5B 5D 7C 7D 7B 3F 2F 3E 3C 2C\n                            60 21 32 26 26 28\n\
    \   PeerChallenge = 21 40 23 24 25 5E 26 2A 28 29 5F 2B 3A 33 7C 7E\n   Challenge\
    \ = D0 2E 43 86 BC E9 12 26\n   NT-Response =\n   82 30 9E CD 8D 70 8B 5E A0 8F\
    \ AA 39 81 CD 83 54 42 33\n   11 4A 3D 85 D6 DF\nStep 1: NtPasswordHash(Password,\
    \ PasswordHash)\n   PasswordHash = 44 EB BA 8D 53 12 B8 D6 11 47 44 11 F5 69 89\
    \ AE\nStep 2: PasswordHashHash = MD4(PasswordHash)\n   PasswordHashHash = 41 C0\
    \ 0C 58 4B D2 D9 1C 40 17 A2 A1 2F A5 9F 3F\nStep 3: Derive the master key (GetMasterKey())\n\
    \   MasterKey = FD EC E3 71 7A 8C 83 8C B3 88 E5 27 AE 3C DD 31\nStep 4: Derive\
    \ the master send session key (GetAsymmetricStartKey())\n   SendStartKey40 = 8B\
    \ 7C DC 14 9B 99 3A 1B\nStep 5: Derive the initial send session key (GetNewKeyFromSHA())\n\
    \   SendSessionKey40 = D1 26 9E C4 9F A6 2E 3E\nSample Encrypted Message\n   rc4(SendSessionKey40,\
    \ \"test message\") = 92 91 37 91 7E 58 03 D6\n                              \
    \             68 D7 58 98\n3.5.2.  Sample 56-bit Key Derivation\nInitial Values\n\
    \   UserName = \"User\"\n            =  55 73 65 72\n   Password = \"clientPass\"\
    \n            = 63 00 6C 00 69 00 65 00 6E 00 74 00 50\n              00 61 00\
    \ 73 00 73 00\n   AuthenticatorChallenge = 5B 5D 7C 7D 7B 3F 2F 3E 3C 2C\n   \
    \                         60 21 32 26 26 28\n   PeerChallenge = 21 40 23 24 25\
    \ 5E 26 2A 28 29 5F 2B 3A 33 7C 7E\n   Challenge = D0 2E 43 86 BC E9 12 26\n \
    \  NT-Response =\n   82 30 9E CD 8D 70 8B 5E A0 8F AA 39 81 CD 83 54 42 33\n \
    \  11 4A 3D 85 D6 DF\nStep 1: NtPasswordHash(Password, PasswordHash)\n   PasswordHash\
    \ = 44 EB BA 8D 53 12 B8 D6 11 47 44 11 F5 69 89 AE\nStep 2: PasswordHashHash\
    \ = MD4(PasswordHash)\n   PasswordHashHash = 41 C0 0C 58 4B D2 D9 1C 40 17 A2\
    \ A1 2F A5 9F 3F\nStep 3: Derive the master key (GetMasterKey())\n   MasterKey\
    \ = FD EC E3 71 7A 8C 83 8C B3 88 E5 27 AE 3C DD 31\nStep 4: Derive the master\
    \ send session key (GetAsymmetricStartKey())\n   SendStartKey56 = 8B 7C DC 14\
    \ 9B 99 3A 1B\nStep 5: Derive the initial send session key (GetNewKeyFromSHA())\n\
    \   SendSessionKey56 = D1 5C 00 C4 9F A6 2E 3E\nSample Encrypted Message\n   rc4(SendSessionKey40,\
    \ \"test message\") = 3F 10 68 33 FA 44 8D\n                                 \
    \          A8 42 BC 57 58\n3.5.3.  Sample 128-bit Key Derivation\nInitial Values\n\
    \   UserName = \"User\"\n            =  55 73 65 72\n   Password = \"clientPass\"\
    \n            = 63 00 6C 00 69 00 65 00 6E 00\n              74 00 50 00 61 00\
    \ 73 00 73 00\n   AuthenticatorChallenge = 5B 5D 7C 7D 7B 3F 2F 3E 3C 2C\n   \
    \                         60 21 32 26 26 28\n   PeerChallenge = 21 40 23 24 25\
    \ 5E 26 2A 28 29 5F 2B 3A 33 7C 7E\n   Challenge = D0 2E 43 86 BC E9 12 26\n \
    \  NT-Response =\n   82 30 9E CD 8D 70 8B 5E A0 8F AA 39 81 CD 83 54 42 33\n \
    \  11 4A 3D 85 D6 DF\nStep 1: NtPasswordHash(Password, PasswordHash)\n   PasswordHash\
    \ = 44 EB BA 8D 53 12 B8 D6 11 47 44 11 F5 69 89 AE\nStep 2: PasswordHashHash\
    \ = MD4(PasswordHash)\n   PasswordHashHash = 41 C0 0C 58 4B D2 D9 1C 40 17 A2\
    \ A1 2F A5 9F 3F\nStep 2: Derive the master key (GetMasterKey())\n   MasterKey\
    \ = FD EC E3 71 7A 8C 83 8C B3 88 E5 27 AE 3C DD 31\nStep 3: Derive the send master\
    \ session key (GetAsymmetricStartKey())\n   SendStartKey128 = 8B 7C DC 14 9B 99\
    \ 3A 1B A1 18 CB 15 3F 56 DC CB\nStep 4: Derive the initial send session key (GetNewKeyFromSHA())\n\
    \   SendSessionKey128 = 40 5C B2 24 7A 79 56 E6 E2 11 00 7A E2 7B 22 D4\nSample\
    \ Encrypted Message\n  rc4(SendSessionKey128, \"test message\") = 81 84 83 17\
    \ DF 68\n                                           84 62 72 FB 5A BE\n4.  Deriving\
    \ MPPE Session Keys from TLS Session Keys\n   The Extensible Authentication Protocol\
    \ (EAP) [10] is a PPP extension\n   that provides support  for  additional  authentication\
    \ methods within\n   PPP.  Transport  Level  Security  (TLS) [11] provides for\
    \ mutual\n   authentication, integrity-protected ciphersuite negotiation and key\n\
    \   exchange between two  endpoints.  EAP-TLS [12] is an EAP\n   authentication\
    \ type which allows the use of TLS within the PPP\n   authentication framework.\
    \  The following sections describe the\n   methods used to derive initial session\
    \ keys from TLS session keys.\n   56-, 40- and 128-bit keys are derived using\
    \ the same algorithm.  The\n   only difference is in the length of the keys and\
    \ their effective\n   strength: 56- and 40-bit keys are 8 octets in length, while\
    \ 128-bit\n   keys are 16 octets long.  Separate keys are derived for the send\
    \ and\n   receive directions of the session.\n4.1.  Generating 40-bit Session\
    \ Keys\n   When MPPE is used in conjunction with EAP-TLS authentication, the TLS\n\
    \   master secret is used as the master session key.\n   The algorithm used to\
    \ derive asymmetrical master session keys from\n   the TLS master secret is described\
    \ in [12].  The master session keys\n   are never used to encrypt or decrypt data;\
    \ they are only used in the\n   derivation of transient session keys.\n   Implementation\
    \ Note\n      If the asymmetrical master keys are less than 8 octets in length,\n\
    \      they MUST be padded on the left with zeroes before being used to\n    \
    \  derive the initial transient session keys.  Conversely, if the\n      asymmetrical\
    \ master keys are more than 8 octets in length, they\n      must be truncated\
    \ to 8 octets before being used to derive the\n      initial transient session\
    \ keys.\n   The initial transient session keys are obtained by calling the\n \
    \  function GetNewKeyFromSHA() (described in [3]):\nGetNewKeyFromSHA(MasterSendKey,\
    \ MasterSendKey, 8, SendSessionKey)\nGetNewKeyFromSHA(MasterReceiveKey, MasterReceiveKey,\
    \ 8,\nReceiveSessionKey)\n   Next, the effective strength of both keys is reduced\
    \ by setting the\n   first three octets to known constants:\n      SendSessionKey[0]\
    \ = ReceiveSessionKey[0] = 0xD1\n      SendSessionKey[1] = ReceiveSessionKey[1]\
    \ = 0x26\n      SendSessionKey[2] = ReceiveSessionKey[2] = 0x9E\n   Finally, the\
    \ RC4 tables are initialized using the new session keys:\n      rc4_key(SendRC4key,\
    \ 8, SendSessionKey)\n      rc4_key(ReceiveRC4key, 8, ReceiveSessionKey)\n4.2.\
    \  Generating 56-bit Session Keys\n   When MPPE is used in conjunction with EAP-TLS\
    \ authentication, the TLS\n   master secret is used as the master session key.\n\
    \   The algorithm used to derive asymmetrical master session keys from\n   the\
    \ TLS master secret is described in [12].  The master session keys\n   are never\
    \ used to encrypt or decrypt data; they are only used in the\n   derivation of\
    \ transient session keys.\n   Implementation Note\n      If the asymmetrical master\
    \ keys are less than 8 octets in length,\n      they MUST be padded on the left\
    \ with zeroes before being used to\n      derive the initial transient session\
    \ keys.  Conversely, if the\n      asymmetrical master keys are more than 8 octets\
    \ in length, they\n      must be truncated to 8 octets before being used to derive\
    \ the\n      initial transient session keys.\n   The initial transient session\
    \ keys are obtained by calling the\n   function GetNewKeyFromSHA() (described\
    \ in [3]):\nGetNewKeyFromSHA(MasterSendKey, MasterSendKey, 8, SendSessionKey)\n\
    GetNewKeyFromSHA(MasterReceiveKey, MasterReceiveKey, 8,\nReceiveSessionKey)\n\
    \   Next, the effective strength of both keys is reduced by setting the\n   initial\
    \ octet to a known constant:\n      SendSessionKey[0] = ReceiveSessionKey[0] =\
    \ 0xD1\n   Finally, the RC4 tables are initialized using the new session keys:\n\
    \      rc4_key(SendRC4key, 8, SendSessionKey)\n      rc4_key(ReceiveRC4key, 8,\
    \ ReceiveSessionKey)\n4.3.  Generating 128-bit Session Keys\n   When MPPE is used\
    \ in conjunction with EAP-TLS authentication, the TLS\n   master secret is used\
    \ as the master session key.\n   The algorithm used to derive asymmetrical master\
    \ session keys from\n   the TLS master secret is described in [12].  Note that\
    \ the send key\n   on one side is the receive key on the other.\n   The master\
    \ session keys are never used to encrypt or decrypt data;\n   they are only used\
    \ in the derivation of transient session keys.\n   Implementation Note\n     \
    \ If the asymmetrical master keys are less than 16 octets in length,\n      they\
    \ MUST be padded on the left with zeroes before being used to\n      derive the\
    \ initial transient session keys.  Conversely, if the\n      asymmetrical master\
    \ keys are more than 16 octets in length, they\n      must be truncated to 16\
    \ octets before being used to derive the\n      initial transient session keys.\n\
    \   The initial transient session keys are obtained by calling the\n   function\
    \ GetNewKeyFromSHA() (described in [3]):\nGetNewKeyFromSHA(MasterSendKey, MasterSendKey,\
    \ 16, SendSessionKey)\nGetNewKeyFromSHA(MasterReceiveKey, MasterReceiveKey, 16,\n\
    ReceiveSessionKey)\n   Finally, the RC4 tables are initialized using the new session\
    \ keys:\n      rc4_key(SendRC4key, 16, SendSessionKey)\n      rc4_key(ReceiveRC4key,\
    \ 16, ReceiveSessionKey)\n5.  Security Considerations\n5.1.  MS-CHAP Credentials\n\
    \   Because of the way in which 40-bit keys are derived from MS-CHAP-1\n   credentials,\
    \ the initial 40-bit session key will be identical in all\n   sessions established\
    \ under the same peer credentials.  For this\n   reason, and because RC4 with\
    \ a 40-bit key length is believed to be a\n   relatively weak cipher, peers SHOULD\
    \ NOT use 40-bit keys derived from\n   the LAN Manager password hash (as described\
    \ above) if it can be\n   avoided.\n   Since the MPPE session keys are derived\
    \ from user passwords (in the\n   MS- CHAP-1 and MS-CHAP-2 cases), care should\
    \ be taken to ensure the\n   selection of strong passwords and passwords should\
    \ be changed\n   frequently.\n5.2.  EAP-TLS Credentials\n   The strength of the\
    \ session keys is dependent upon the security of\n   the TLS protocol.\n   The\
    \ EAP server may be on a separate machine from the PPP\n   authenticator; if this\
    \ is the case, adequate care must be taken in\n   the transmission of the EAP-TLS\
    \ master keys to the authenticator.\n6.  References\n   [1]  Simpson, W., \"The\
    \ Point-to-Point Protocol (PPP)\", STD 51, RFC\n        1661, July 1994.\n   [2]\
    \  Zorn, G. and S. Cobb, \"Microsoft PPP CHAP Extensions\", RFC 2433,\n      \
    \  October 1998.\n   [3]  Pall, G. and G. Zorn, \"Microsoft Point-to-Point Encryption\n\
    \        (MPPE) RFC 3078, March 2001.\n   [4]  RC4 is a proprietary encryption\
    \ algorithm available under\n        license from RSA Data Security Inc.  For\
    \ licensing information,\n        contact:\n               RSA Data Security,\
    \ Inc.\n               100 Marine Parkway\n               Redwood City, CA 94065-1031\n\
    \   [5]  Pall, G., \"Microsoft Point-to-Point Compression (MPPC)\n        Protocol\"\
    , RFC 2118, March 1997.\n   [6]  Bradner, S., \"Key words for use in RFCs to Indicate\
    \ Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n   [7]  \"Secure\
    \ Hash Standard\", Federal Information Processing Standards\n        Publication\
    \ 180-1, National Institute of Standards and\n        Technology, April 1995.\n\
    \   [8]  Zorn, G., \"Microsoft PPP CHAP Extensions, Version 2\", RFC 2759,\n \
    \       January 2000.\n   [9]  Simpson, W., \"PPP Challenge Handshake Authentication\
    \ Protocol\n        (CHAP)\", RFC 1994, August 1996.\n   [10] Blunk, L. and J.\
    \ Vollbrecht, \"PPP Extensible Authentication\n        Protocol (EAP)\", RFC 2284,\
    \ March 1998.\n   [11] Dierks, T. and C. Allen, \"The TLS Protocol Version 1.0\"\
    , RFC\n        2246, January 1999.\n   [12] Aboba, B. and D. Simon, \"PPP EAP\
    \ TLS Authentication Protocol\",\n        RFC 2716, October 1999.\n7.  Acknowledgements\n\
    \   Anthony Bell, Richard B. Ward, Terence Spies and Thomas Dimitri, all\n   of\
    \ Microsoft Corporation, significantly contributed to the design and\n   development\
    \ of MPPE.\n   Additional thanks to Robert Friend, Joe Davies, Jody Terrill, Archie\n\
    \   Cobbs, Mark Deuser, Vijay Baliga, Brad Robel-Forrest and Jeff Haag\n   for\
    \ useful feedback.\n   The technical portions of this memo were completed while\
    \ the author\n   was employed by Microsoft Corporation.\n8.  Author's Address\n\
    \   Questions about this memo can also be directed to:\n   Glen Zorn\n   cisco\
    \ Systems\n   500 108th Avenue N.E.\n   Suite 500\n   Bellevue, Washington 98004\n\
    \   USA\n   Phone: +1 425 438 8218\n   FAX:   +1 425 438 1848\n   EMail: gwz@cisco.com\n\
    9.  Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\nAcknowledgement\n   Funding for the RFC Editor function\
    \ is currently provided by the\n   Internet Society.\n"
