Abstract This document describes an Extensible Provisioning Protocol (EPP) mapping for the provisioning and management of Internet domain names stored in a shared central repository.
Specified in XML, the mapping defines EPP command syntax and semantics as applied to domain names.
This document obsoletes RFC 4931.
This document describes an Internet domain name mapping for version 1.0 of the Extensible Provisioning Protocol (EPP).
This mapping is specified using the Extensible Markup Language (XML) 1.0 as described in [W3C.REC xml 20040204] and XML Schema notation as described in [W3C.REC xmlschema 1 20041028] and [W3C.REC xmlschema 2 20041028].
This document obsoletes RFC 4931
[RFC5730] provides a complete description of EPP command and response structures.
A thorough understanding of the base protocol specification is necessary to understand the mapping described in this document.
Unless stated otherwise, XML specifications and examples provided in this document MUST be interpreted in the character case presented to develop a conforming implementation.
Relationship of Domain Objects and Host Objects
The EPP mapping for host objects is described in [RFC5732].
This document assumes that domain name objects have a superordinate relationship to subordinate host name objects.
For example, domain name "example.com" has a superordinate relationship to host name "ns1.example.com".
EPP actions (such as object transfers) that do not preserve this relationship MUST be explicitly disallowed.
A host name object can be created in a repository for which no superordinate domain name object exists.
For example, host name "ns1.example.com" can be created in the ".example" repository so that DNS domains in ".example" can be delegated to the host.
Such hosts are described as "external" hosts in this specification since the name of the host does not belong to the namespace of the repository in which the host is being used for delegation purposes.
Whether a host is external or internal relates to the repository in which the host is being used for delegation purposes.
Whether or not an internal host is subordinate relates to a domain within the repository.
For example, host ns1.example1.com is a subordinate host of domain
but it is not a subordinate host of domain
example2.com. ns1.example1.com can be used as a name server for example2.com.
In this case, ns1.example1.com MUST be treated as an internal host, subject to the rules governing operations on subordinate hosts within the same repository.
Name server hosts for domain delegation can be specified either as references to existing host objects or as domain attributes that describe a host machine.
A server operator MUST use one name server specification form consistently.
A server operator that announces support for host objects in an EPP greeting MUST NOT allow domain attributes to describe a name server host machine.
A server operator that does not announce support for host objects MUST allow domain attributes to describe a name server host machine.
When domain attributes are used to describe a name server host machine, IP addresses SHOULD be required only as needed to generate DNS glue records.
Name servers are specified within a <domain:ns
This element MUST contain one or more <domain:hostObj> elements or one or more <domain:hostAttr> elements.
A <domain:hostObj> element contains the fully qualified name of a known name server host object.
> element contains the following child elements:  A <domain:
> element that contains the fully qualified name of a host.
hostAddr> elements that contain the IP addresses to be associated with the host.
Each element MAY contain an "ip" attribute to identify the IP address format.
Attribute value "v4" is used to note IPv4 address format.
Attribute value "v6" is used to note IPv6 address format.
If the "ip" attribute is not specified, "v4" is the default attribute value.
IP address syntax requirements are described in Section 2.5 of the EPP host mapping [RFC5732].
Example host object name server elements for domain example.com:
<domain:ns> <domain:hostObj>ns1.example.net</domain:hostObj> <domain:hostObj>ns2.example.net</domain:hostObj> </domain:ns> Example host attribute name server elements for domain example.com: <domain:ns> <domain:hostAttr> <domain:hostName
hostAttr> <domain:hostAttr> <domain:hostName>ns2.example.net</domain:hostName> </domain:hostAttr> </domain:ns> 1.2.
Conventions Used in This Document
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "
SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
In examples, "C:" represents lines sent by a protocol client and "S:" represents lines returned by a protocol server.
Indentation and white space in examples are provided only to illustrate element relationships and are not a REQUIRED feature of this protocol.
An EPP domain object has attributes and associated values that can be viewed and modified by the sponsoring client or the server.
This section describes each attribute type in detail.
The formal syntax for the attribute values described here can be found in the "Formal Syntax" section of this document and in the appropriate normative references.
The syntax for domain and host names described in this document MUST conform to [RFC0952] and [RFC1123].
At the time of this writing, RFC 3490 [RFC3490] describes a standard to use certain ASCII name labels to represent non ASCII name labels.
These conformance requirements might change as a result of progressing work in developing standards for internationalized domain names.
A server MAY restrict allowable domain names to a particular top level domain, second level domain, or other domain for which the server is authoritative.
The trailing dot required when these names are stored in a DNS zone is implicit and MUST NOT be provided when exchanging host and domain names.
All EPP contacts are identified by a server unique identifier.
Contact identifiers are character strings with a specified minimum length, a specified maximum length, and a specified format.
Contact identifiers use the "clIDType" client identifier syntax described in [RFC5730].
Status Values A domain object MUST always have at least one associated status value.
Status values can be set only by the client that sponsors a domain object and by the server on which the object resides.
A client can change the status of a domain object using the EPP <update> command.
Each status value MAY be accompanied by a string of human readable text that describes the rationale for the status applied to the object.
A client MUST NOT alter status values set by the server.
A server MAY alter or override status values set by a client, subject to local server policies.
The status of an object MAY change as a result of either a client initiated transform command or an action performed by a server operator.
Status values that can be added or removed by a client are prefixed with "client".
Corresponding status values that can be added or removed by a server are prefixed with "server".
Status values that do not begin with either "client" or "server" are server managed.
Status Value Descriptions:  clientDeleteProhibited, serverDeleteProhibited Requests to delete the object MUST be rejected.
clientHold, serverHold DNS delegation information MUST NOT be published for the object.
clientRenewProhibited, serverRenewProhibited Requests to renew the object MUST be rejected.
clientTransferProhibited, serverTransferProhibited Requests to transfer the object MUST be rejected.
clientUpdateProhibited, serverUpdateProhibited Requests to update the object (other than to remove this status) MUST be rejected.
inactive Delegation information has not been associated with the object.
This is the default status when a domain object is first created and there are no associated host objects for the DNS delegation.
This status can also be set by the server when all host object associations are removed.
This is the normal status value for an object that has no pending operations or prohibitions.
This value is set and removed by the server as other status values are added or removed.
pendingUpdate A transform command has been processed for the object, but the action has not been completed by the server.
Server operators can delay action completion for a variety of reasons, such as to allow for human review or third party action.
A transform command that is processed, but whose requested action is pending, is noted with response code 1001.
When the requested action has been completed, the pendingCreate, pendingDelete, pendingRenew, pendingTransfer, or pendingUpdate status value MUST be removed.
All clients involved in the transaction MUST be notified using a service message that the action has been completed and that the status of the object has changed.
"ok" status MUST NOT be combined with any other status.
"pendingDelete" status MUST NOT be combined with either "clientDeleteProhibited" or "serverDeleteProhibited" status.
"pendingRenew" status MUST NOT be combined with either "clientRenewProhibited" or "serverRenewProhibited" status. "
pendingTransfer" status MUST NOT be combined with either "clientTransferProhibited" or "serverTransferProhibited" status.
pendingUpdate" status MUST NOT be combined with either "clientUpdateProhibited" or "serverUpdateProhibited" status.
The pendingCreate, pendingDelete, pendingRenew, pendingTransfer, and pendingUpdate status values MUST NOT be combined with each other.
Other status combinations not expressly prohibited MAY be used.
Dates and Times Date and time attribute values MUST be represented in Universal Coordinated Time (UTC) using the Gregorian calendar.
The extended date time form using upper case "T" and "Z" characters defined in [W3C.REC xmlschema 2 20041028]
MUST be used to represent date time values, as XML Schema does not support truncated date time forms or lower case "T" and "Z" characters.
Validity Periods A domain name object MAY have a specified validity period.
If server policy supports domain object validity periods, the validity period is defined when a domain object is created, and it MAY be extended by the EPP <renew> or <transfer> commands.
As a matter of server policy, this specification does not define actions to be taken upon expiration of a domain object's validity period.
Validity periods are measured in years or months with the appropriate units specified using the "unit" attribute.
Valid values for the "unit" attribute are "y" for years and "m" for months.
The minimum allowable period value is one (1).
The maximum allowable value is ninety nine decimal (99).
A server MAY support a lower maximum value.
Authorization Information Authorization information is associated with domain objects to facilitate transfer operations.
Authorization information is assigned when a domain object is created, and it might be updated in the future.
This specification describes password based authorization information, though other mechanisms are possible.
Other DNS Resource Record Attributes
While the DNS allows many resource record types to be associated with a domain, this mapping only explicitly specifies elements that describe resource records used for domain delegation and resolution.
Facilities to provision other domain related resource record types can be developed by extending this mapping.
The provisioning method described in this mapping separates discrete data elements by data type.
This method of data definition allows XML Schema processors to perform basic syntax validation tasks, reducing ambiguity and the amount of parsing and syntax checking work required of protocol processors.
Provisioning and extension methods that aggregate data into opaque strings are possible, but such methods should not be used because they impose additional parsing, interpretation, and validation requirements on protocol processors.
A detailed description of the EPP syntax and semantics can be found in [RFC5730].
The command mappings described here are specifically for use in provisioning and managing Internet domain names via EPP.
EPP Query Commands EPP provides three commands to retrieve domain information:
<check> to determine if a domain object can be provisioned within a repository, <info> to retrieve detailed information associated with a domain object, and <transfer> to retrieve domain object transfer status information.
> command is used to determine if an object can be provisioned within a repository.
It provides a hint that allows a client to anticipate the success or failure of provisioning an object using the <create> command, as object provisioning requirements are ultimately a matter of server policy.
In addition to the standard EPP command elements, the <check> command MUST contain a <domain:check> element that identifies the domain namespace.
The <domain:check> element contains the following child elements:  One or more <domain:name> elements that contain the fully qualified names of the domain objects to be queried.
Example <check> command: C:<?xml version "1.0" encoding "UTF 8" standalone "no"?
When a <check> command has been processed successfully, the EPP <resData> element MUST contain a child <domain:chkData
> element that identifies the domain namespace.
element contains one or more <domain:cd> elements that contain the following child elements:  A <domain:name> element that contains the fully qualified name of the queried domain object.
This element MUST contain an "avail" attribute whose value indicates object availability (can it be provisioned or not) at the moment the <check> command was completed.
A value of "1" or "true" means that the object can be provisioned.
A value of "0" or "false" means that the object can not be provisioned.
An OPTIONAL <domain:reason> element that MAY be provided when an object cannot be provisioned.
If present, this element contains server specific text to help explain why the object cannot be provisioned.
This text MUST be represented in the response language previously negotiated with the client; an OPTIONAL "lang" attribute MAY be present to identify the language if the negotiated value is something other than the default value of "en" (English).
Example <check> response: S:<?xml version "1.0" encoding "UTF 8" standalone "no"?
An EPP error response MUST be returned if a <check> command cannot be processed for any reason.
command is used to retrieve information associated with a domain object.
The response to this command MAY vary depending on the identity of the querying client, use of authorization information, and server policy towards unauthorized clients.
If the querying client is the sponsoring client, all available information MUST be returned.
If the querying client is not the sponsoring client but the client provides valid authorization information, all available information MUST be returned.
If the querying client is not the sponsoring client and the client does not provide valid authorization information, server policy determines which OPTIONAL elements are returned.
In addition to the standard EPP command elements, the <info> command MUST contain a <domain:info> element that identifies the domain namespace.
> element contains the following child elements:  A <domain:name> element that contains the fully qualified name of the domain object to be queried.
An OPTIONAL "hosts" attribute is available to control return of information describing hosts related to the domain object.
A value of "all" (the default, which MAY be absent) returns information describing both subordinate and delegated hosts.
A value of "del" returns information describing only delegated hosts.
A value of "sub" returns information describing only subordinate hosts.
A value of "none" returns no information describing delegated or subordinate hosts.
> element that contains authorization information associated with the domain object or authorization information associated with the domain object's registrant or associated contacts.
An OPTIONAL "roid" attribute MUST be used to identify the registrant or contact object if and only if the given authInfo is associated with a registrant or contact object, and not the domain object itself.
If this element is not provided or if the authorization information is invalid, server policy determines if the command is rejected or if response information will be returned to the client.
Example <info> command without authorization information:
C:<?xml version "1.0" encoding "UTF 8" standalone "no"?
Example <info> command with authorization information:
C:<?xml version "1.0" encoding "UTF 8" standalone "no"?
When an <info> command has been processed successfully, the EPP <resData> element MUST contain a child <domain:
> element that identifies the domain namespace.
Elements that are not OPTIONAL MUST be returned; OPTIONAL elements are returned based on client authorization and server policy.
> element contains the following child elements:  A <domain:name> element that contains the fully qualified name of the domain object.
A <domain:roid> element that contains the Repository Object IDentifier assigned to the domain object when the object was created.
OPTIONAL <domain:status> elements that contain the current status descriptors associated with the domain.
If supported by the server, one OPTIONAL <domain:registrant> element and one or more OPTIONAL <domain:contact> elements that contain identifiers for the human or organizational social information objects associated with the domain object.
> element that contains the fully qualified names of the delegated host objects or host attributes (name servers) associated with the domain object.
See Section 1.1 for a description of the elements used to specify host objects or host attributes.
OPTIONAL <domain:host> elements that contain the fully qualified names of the subordinate host objects that exist under this superordinate domain object.
A <domain:clID> element that contains the identifier of the sponsoring client.
An OPTIONAL <domain:crID> element that contains the identifier of the client that created the domain object.
An OPTIONAL <domain:crDate> element that contains the date and time of domain object creation.
exDate> element that contains the date and time identifying the end of the domain object's registration period.
An OPTIONAL <domain:upID> element that contains the identifier of the client that last updated the domain object.
This element MUST NOT be present if the domain has never been modified.
An OPTIONAL <domain:upDate> element that contains the date and time of the most recent domain object modification.
This element MUST NOT be present if the domain object has never been modified.
An OPTIONAL <domain:trDate> element that contains the date and time of the most recent successful domain object transfer.
This element MUST NOT be provided if the domain object has never been transferred.
> element that contains authorization information associated with the domain object.
This element MUST only be returned if the querying client is the current sponsoring client or if the client supplied valid authorization information with the command.
Example <info> response for an authorized client: S:<?xml version "1.0" encoding "UTF 8" standalone "no"?
A server with a different information return policy MAY provide less information in a response.
Example <info> response for an unauthorized client: S:<?xml version "1.0" encoding "UTF 8" standalone "no"?
An EPP error response MUST be returned if an <info> command cannot be processed for any reason.
command provides a query operation that allows a client to determine the real time status of pending and completed transfer requests.
In addition to the standard EPP command elements, the <transfer> command MUST contain an "op" attribute with value "query", and a <domain:transfer> element that identifies the domain namespace.
The <domain:transfer> element contains the following child elements:  A <domain:name> element that contains the fully qualified name of the domain object to be queried.
> element that contains authorization information associated with the domain object or authorization information associated with the domain object's registrant or associated contacts.
An OPTIONAL "roid" attribute MUST be used to identify the registrant or contact object if and only if the given authInfo is associated with a registrant or contact object, and not the domain object itself.
If this element is not provided or if the authorization information is invalid, server policy determines if the command is rejected or if response information will be returned to the client.
Example <transfer> query command: C:<?xml version "1.0" encoding "UTF 8" standalone "no"?
When a <transfer> query command has been processed successfully, the EPP <resData> element MUST contain a child <domain:trnData
> element that identifies the domain namespace.
trnData> element contains the following child elements:  A <domain:name> element that contains the fully qualified name of the domain object.
A <domain:trStatus> element that contains the state of the most recent transfer request.
A <domain:reID> element that contains the identifier of the client that requested the object transfer.
A <domain:reDate> element that contains the date and time that the transfer was requested.
A <domain:acID> element that contains the identifier of the client that SHOULD act upon a PENDING transfer request.
For all other status types, the value identifies the client that took the indicated action.
A <domain:acDate> element that contains the date and time of a required or completed response.
For a PENDING request, the value identifies the date and time by which a response is required before an automated response action will be taken by the server.
For all other status types, the value identifies the date and time when the request was completed.
exDate> element that contains the end of the domain object's validity period if the <transfer> command caused or causes a change in the validity period.
Example <transfer> query response: S:<?xml version "1.0" encoding "UTF 8" standalone "no"?
An EPP error response MUST be returned if a <transfer> query command cannot be processed for any reason.
EPP Transform Commands EPP provides five commands to transform domain objects: <create> to create an instance of a domain object, <delete> to delete an instance of a domain object, <renew> to extend the validity period of a domain object, <transfer> to manage domain object sponsorship changes, and <update> to change information associated with a domain object.
Transform commands are typically processed and completed in real time.
Server operators MAY receive and process transform commands but defer completing the requested action if human or third party review is required before the requested action can be completed.
In such situations the server MUST return a 1001 response code to the client to note that the command has been received and processed but that the requested action is pending.
The server MUST also manage the status of the object that is the subject of the command to reflect the initiation and completion of the requested action.
Once the action has been completed, all clients involved in the transaction MUST be notified using a service message that the action has been completed and that the status of the object has changed.
Other notification methods MAY be used in addition to the required service message.
Server operators SHOULD confirm that a client is authorized to perform a transform command on a given object.
Any attempt to transform an object by an unauthorized client MUST be rejected, and the server MUST return a 2201 response code to the client to note that the client lacks privileges to execute the requested command.
The EPP <create> command provides a transform operation that allows a client to create a domain object.
In addition to the standard EPP command elements, the <create> command MUST contain a <domain:create> element that identifies the domain namespace.
The <domain:create> element contains the following child elements:  A <domain:name> element that contains the fully qualified name of the domain object to be created.
> element that contains the initial registration period of the domain object.
A server MAY define a default initial registration period if not specified by the client.
> element that contains the fully qualified names of the delegated host objects or host attributes (name servers) associated with the domain object to provide resolution services for the domain
; see Section 1.1 for a description of the elements used to specify host objects or host attributes.
A host object MUST be known to the server before the host object can be associated with a domain object.
> element that contains the identifier for the human or organizational social information (contact) object to be associated with the domain object as the object registrant.
This object identifier MUST be known to the server before the contact object can be associated with the domain object.
The EPP mapping for contact objects is described in [RFC5733].
OPTIONAL <domain:contact> elements that contain the identifiers for other contact objects to be associated with the domain object.
Contact object identifiers MUST be known to the server before the contact object can be associated with the domain object.
> element that contains authorization information to be associated with the domain object.
This mapping includes a password based authentication mechanism, but the schema allows new mechanisms to be defined in new schemas.
C:<?xml version "1.0" encoding "UTF 8" standalone "no"?
When a <create> command has been processed successfully, the EPP <resData> element MUST contain a child <domain:creData
> element that identifies the domain namespace.
> element contains the following child elements:  A <domain:name> element that contains the fully qualified name of the domain object.
A <domain:crDate> element that contains the date and time of domain object creation.
exDate> element that contains the date and time identifying the end of the domain object's registration period.
Example <create> response: S:<?xml version "1.0" encoding "UTF 8" standalone "no"?
An EPP error response MUST be returned if a <create> command cannot be processed for any reason.
The EPP <delete> command provides a transform operation that allows a client to delete a domain object.
In addition to the standard EPP command elements, the <delete> command MUST contain a <domain:
> element that identifies the domain namespace.
The <domain:delete> element contains the following child elements:  A <domain:name> element that contains the fully qualified name of the domain object to be deleted.
A domain object SHOULD NOT be deleted if subordinate host objects are associated with the domain object.
For example, if domain "example.com" exists and host object "ns1.example.com" also exists, then domain "example.com" SHOULD NOT be deleted until host "ns1.example.com" has either been deleted or renamed to exist in a different superordinate domain.
A server SHOULD notify clients that object relationships exist by sending a 2305 error response code when a <delete> command is attempted and fails due to existing object relationships.
Delegated and subordinate host objects associated with a domain object can be determined using the <info> query command for the domain object.
C:<?xml version "1.0" encoding "UTF 8" standalone "no"?
When a <delete> command has been processed successfully, a server MUST respond with an EPP response with no <
Example <delete> response: S:<?xml version "1.0" encoding "UTF 8" standalone "no"?
An EPP error response MUST be returned if a <delete> command cannot be processed for any reason.
The EPP <renew> command provides a transform operation that allows a client to extend the validity period of a domain object.
In addition to the standard EPP command elements, the <renew> command MUST contain a <domain:renew> element that identifies the domain namespace.
renew> element contains the following child elements:  A <domain:name> element that contains the fully qualified name of the domain object whose validity period is to be extended.
> element that contains the date on which the current validity period ends.
This value ensures that repeated <renew
> commands do not result in multiple, unanticipated successful renewals.
> element that contains the number of units to be added to the registration period of the domain object.
The number of units available MAY be subject to limits imposed by the server.
C:<?xml version "1.0" encoding "UTF 8" standalone "no"?
When a <renew> command has been processed successfully, the EPP <resData> element MUST contain a child <domain:
> element that identifies the domain namespace.
> element contains the following child elements:  A <domain:name> element that contains the fully qualified name of the domain object.
exDate> element that contains the date and time identifying the end of the domain object's registration period.
Example <renew> response: S:<?xml version "1.0" encoding "UTF 8" standalone "no"?
An EPP error response MUST be returned if a <renew> command cannot be processed for any reason.
command provides a transform operation that allows a client to manage requests to transfer the sponsorship of a domain object.
In addition to the standard EPP command elements, the <transfer> command MUST contain a <domain:transfer> element that identifies the domain namespace.
The <domain:transfer> element contains the following child elements:  A <domain:name> element that contains the fully qualified name of the domain object for which a transfer request is to be created, approved, rejected, or cancelled.
> element that contains the number of units to be added to the registration period of the domain object at completion of the transfer process.
This element can only be used when a transfer is requested, and it MUST be ignored if used otherwise.
The number of units available MAY be subject to limits imposed by the server.
> element that contains authorization information associated with the domain object or authorization information associated with the domain object's registrant or associated contacts.
An OPTIONAL "roid" attribute MUST be used to identify the registrant or contact object if and only if the given authInfo is associated with a registrant or contact object, and not the domain object itself.
command MUST contain an "op" attribute that identifies the transfer operation to be performed.
Valid values, definitions, and authorizations for all attribute values are defined in [RFC5730].
Transfer of a domain object MUST implicitly transfer all host objects that are subordinate to the domain object.
For example, if domain object "example.com" is transferred and host object "
ns1.example.com" exists, the host object MUST be transferred as part of the "example.com" transfer process.
Host objects that are subject to transfer when transferring a domain object are listed in the response to an EPP <info> command performed on the domain object.
Example <transfer> request command: C:<?xml version "1.0" encoding "UTF 8" standalone "no"?
When a <transfer> command has been processed successfully, the EPP <resData> element MUST contain a child <domain:trnData
> element that identifies the domain namespace.
trnData> element contains the same child elements defined for a transfer query response.
Example <transfer> response: S:<?xml version "1.0" encoding "UTF 8" standalone "no"?
Command completed successfully; action pending</msg
An EPP error response MUST be returned if a <transfer> command can not be processed for any reason.
The EPP <update> command provides a transform operation that allows a client to modify the attributes of a domain object.
In addition to the standard EPP command elements, the <update> command MUST contain a <domain:update> element that identifies the domain namespace.
The <domain:update> element contains the following child elements:  A <domain:name> element that contains the fully qualified name of the domain object to be updated.
An OPTIONAL <domain:add> element that contains attribute values to be added to the object.
rem> element that contains attribute values to be removed from the object.
An OPTIONAL <domain:chg> element that contains object attribute values to be changed.
At least one <domain:add>, <domain:rem>, or <domain:chg
> element MUST be provided if the command is not being extended.
All of these elements MAY be omitted if an <update> extension is present.
rem> elements contain the following child elements:
> element that contains the fully qualified names of the delegated host objects or host attributes (name servers) associated with the domain object to provide resolution services for the domain
; see Section 1.1 for a description of the elements used to specify host objects or host attributes.
A host object MUST be known to the server before the host object can be associated with a domain object.
If host attributes are used to specify name servers, note that IP address elements are not needed to identify a name server that is being removed.
IP address elements can safely be absent or ignored in this situation.
Zero or more <domain:contact> elements that contain the identifiers for contact objects to be associated with or removed from the domain object.
Contact object identifiers MUST be known to the server before the contact object can be associated with the domain object.
Zero or more <domain:status> elements that contain status values to be applied to or removed from the object.
When specifying a value to be removed, only the attribute value is significant; element text is not required to match a value for removal.
> element contains the following child elements:  A <domain:registrant
> element that contains the identifier for the human or organizational social information (contact) object to be associated with the domain object as the object registrant.
This object identifier MUST be known to the server before the contact object can be associated with the domain object.
An empty element can be used to remove registrant information.
> element that contains authorization information associated with the domain object.
This mapping includes a password based authentication mechanism, but the schema allows new mechanisms to be defined in new schemas.
> element can be used within the <domain:authInfo
> element to remove authorization information.
Example <update> command: C:<?xml version "1.0" encoding "UTF 8" standalone "no"?
When an <update> command has been processed successfully, a server MUST respond with an EPP response with no <
Example <update> response: S:<?xml version "1.0" encoding "UTF 8" standalone "no"?
An EPP error response MUST be returned if an <update> command cannot be processed for any reason.
Offline Review of Requested Actions Commands are processed by a server in the order they are received from a client.
Though an immediate response confirming receipt and processing of the command is produced by the server, a server operator MAY perform an offline review of requested transform commands before completing the requested action.
In such situations, the response from the server MUST clearly note that the transform command has been received and processed but that the requested action is pending.
The status of the corresponding object MUST clearly reflect processing of the pending action.
The server MUST notify the client when offline processing of the action has been completed.
Examples describing a <create> command that requires offline review are included here.
Note the result code and message returned in response to the <create> command.
S:<?xml version "1.0" encoding "UTF 8" standalone "no"?
Command completed successfully; action pending</msg
The status of the domain object after returning this response MUST include "pendingCreate".
The server operator reviews the request offline, and informs the client of the outcome of the review either by queuing a service message for retrieval via the <poll> command or by using an out of band mechanism to inform the client of the request.
The service message MUST contain text that describes the notification in the child <msg
> element of the response <msgQ> element.
In addition, the EPP <
resData> element MUST contain a child <domain:
> element that identifies the domain namespace.
> element contains the following child elements:  A <domain:name> element that contains the fully qualified name of the domain object.
The <domain:name> element contains a REQUIRED "paResult" attribute.
A positive boolean value indicates that the request has been approved and completed.
A negative boolean value indicates that the request has been denied and the requested action has not been taken.
A <domain:paTRID> element that contains the client transaction identifier and server
transaction identifier returned with the original response to process the command.
The client transaction identifier is OPTIONAL and will only be returned if the client provided an identifier with the original <create> command.
A <domain:paDate> element that contains the date and time describing when review of the requested action was completed.
Example "review completed" service message: S:<?xml version "1.0" encoding "UTF 8" standalone "no"?
Command completed successfully; ack to dequeue</msg
An EPP object mapping is specified in XML Schema notation.
The formal syntax presented here is a complete schema representation of the object mapping suitable for automated validation of EPP XML instances.
The BEGIN and END tags are not part of the schema; they are used to note the beginning and ending of the schema for URI registration purposes.
Copyright (c) 2009 IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
Neither the name of Internet Society, IETF or IETF Trust, nor the names of specific contributors, may be used to endorse or promote products derived from this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "
AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
xml version "1.0" encoding "UTF 8"?
Child elements found in EPP commands.
<element name "delete" type "domain:sNameType"/>
<element name "info" type "domain:
<element name "transfer" type "domain:transferType"/>
Child elements of the <create> command.
<element name "name" type "eppcom:
> <element name "ns" type "domain:nsType" minOccurs "
> <element name "registrant" type "eppcom:
> <element name "contact" type "domain:
> <extension base "domain:pLimitType"> <attribute name "unit" type "domain:
> <simpleType name "pLimitType"> <restriction base "unsignedShort"> <minInclusive value "1"/
<complexType name "nsType"> <choice> <element name "hostObj" type "
Name servers are either host objects or attributes.
<complexType name "hostAttrType"> <sequence> <element name "hostName" type "
" minOccurs "0" maxOccurs "
If attributes, addresses are optional and follow the structure defined in the host mapping.
> <complexType name "authInfoType"> <choice> <element name "pw" type "
> <element name "ext" type "eppcom:
Child element of commands that require a single name.
<element name "name" type "eppcom:
Child element of commands that accept multiple names.
mNameType"> <sequence> <element name "name" type "
Child elements of the <info> command.
<element name "name" type "domain:infoNameType"/>
<element name "authInfo" type "domain:authInfoType
> <complexType name "infoNameType"> <simpleContent> <extension base
Child elements of the <renew> command.
<element name "name" type "eppcom:
Child elements of the <transfer> command.
<element name "name" type "eppcom:
> <element name "authInfo" type "domain:authInfoType
Child elements of the <update> command.
<complexType name "updateType"> <sequence> <element name "name" type "
> <element name "rem" type "domain:addRemType
> <element name "chg" type "domain:
Data elements that can be added or removed.
"> <sequence> <element name "ns" type "domain:nsType" minOccurs "
> <element name "contact" type "domain:
Data elements that can be changed.
<element name "registrant" type "domain:
> <element name "authInfo" type "domain:authInfoChgType" minOccurs "0"/
Allow the registrant value to be nullified by changing the minLength restriction to "0".
<simpleType name "clIDChgType"> <restriction base "token"> <minLength value "
Allow the authInfo value to be nullified by including an empty element within the choice.
<complexType name "authInfoChgType"> <choice> <element name "pw" type "
> <element name "ext" type "eppcom:
<element name "chkData" type "domain:chkDataType"/
> <element name "creData" type "domain:creDataType"/
> <element name "infData" type "domain:infDataType"/>
<element name "panData" type "domain:panDataType"/
> <complexType name "checkNameType"> <simpleContent> <extension base "eppcom:labelType
<element name "name" type "eppcom:
> <element name "exDate" type "dateTime" minOccurs "
<element name "name" type "eppcom:
<element name "status" type "domain:statusType" minOccurs "
> <element name "registrant" type "eppcom:
> <element name "contact" type "domain:
> <element name "host" type "eppcom:labelType
> <element name "crDate" type "dateTime" minOccurs "
> <element name "upID" type "eppcom:
> <element name "upDate" type "dateTime" minOccurs "
> <element name "exDate" type "dateTime" minOccurs "
> <element name "trDate" type "dateTime" minOccurs "
> <element name "authInfo" type "domain:authInfoType
Status is a combination of attributes and an optional human readable message that may be expressed in languages other than English.
<restriction base "token"> <enumeration value "clientDeleteProhibited"/>
Pending action notification response elements.
<element name "name" type "eppcom:
<element name "name" type "eppcom:
Internationalization Considerations EPP is represented in XML, which provides native support for encoding information using the Unicode character set and its more compact representations including UTF 8.
Conformant XML processors recognize both UTF 8 and UTF 16
Though XML includes provisions to identify and use other character encodings through use of an "encoding" attribute in an <?
> declaration, use of UTF 8 is RECOMMENDED in environments where parser encoding support incompatibility exists.
All date time values presented via EPP MUST be expressed in Universal Coordinated Time using the Gregorian calendar.
XML Schema allows use of time zone identifiers to indicate offsets from the zero meridian, but this option MUST NOT be used with EPP.
The extended date time form using upper case "T" and "Z" characters, defined in [W3C.REC xmlschema 2 20041028], MUST be used to represent date time values, as XML Schema does not support truncated date time forms or lower case "T" and "Z" characters.
This document requires domain and host name syntax as specified in [RFC0952] as updated by [RFC1123].
At the time of this writing, RFC 3490 [RFC3490] describes a standard to use certain ASCII name labels to represent non ASCII name labels.
These conformance requirements might change as a result of progressing work in developing standards for internationalized domain names.
This document uses URNs to describe XML namespaces and XML schemas conforming to a registry mechanism described in [RFC3688].
Two URI assignments have been registered by the IANA.
Registration request for the domain namespace:
: See the "Author's Address" section of this document.
Namespace URIs do not represent an XML specification.
Registration request for the domain XML schema: URI:
domain 1.0 Registrant Contact: See the "Author's Address" section of this document.
: See the "Formal Syntax" section of this document.
Security Considerations Authorization information as described in Section 2.6 is REQUIRED to create a domain object.
This information is used in some query and transfer operations as an additional means of determining client authorization to perform the command.
Failure to protect authorization information from inadvertent disclosure can result in unauthorized transfer operations and unauthorized information release.
Both client and server MUST ensure that authorization information is stored and exchanged with high grade encryption mechanisms to provide privacy services.
The object mapping described in this document does not provide any other security services or introduce any additional considerations beyond those described by [RFC5730] or those caused by the protocol layers used by EPP.
Appendix A.  Changes from RFC 4931 1.
"This document obsoletes RFC 3731" to
"This document obsoletes RFC 4931".
Replaced references to RFC 3731 with references to 4931.
Replaced references to RFC 4930 with references to 5730.
Replaced references to RFC 4932 with references to 5732.
Replaced references to RFC 4933 with references to 5733.
Updated description of inactive status in Section 2.3.
Fixed example host names in the Section 1.1 and Section 3.2.1 examples.
Changed "but such methods SHOULD NOT be used" to "but such methods should not be used" in Section 2.7.
Other notification methods MAY be used in addition to the required service message" in Section 3.2.
Added 2201 response code text in Section 3.2. 11.
Added BSD license text to XML schema section.
