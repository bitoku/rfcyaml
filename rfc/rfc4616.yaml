- title: __initial_text__
  contents:
  - '  The PLAIN Simple Authentication and Security Layer (SASL) Mechanism

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines a simple clear-text user/password Simple\n\
    \   Authentication and Security Layer (SASL) mechanism called the PLAIN\n   mechanism.\
    \  The PLAIN mechanism is intended to be used, in\n   combination with data confidentiality\
    \ services provided by a lower\n   layer, in protocols that lack a simple password\
    \ authentication\n   command.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Clear-text, multiple-use passwords are simple, interoperate\
    \ with\n   almost all existing operating system authentication databases, and\n\
    \   are useful for a smooth transition to a more secure password-based\n   authentication\
    \ mechanism.  The drawback is that they are unacceptable\n   for use over network\
    \ connections where data confidentiality is not\n   ensured.\n   This document\
    \ defines the PLAIN Simple Authentication and Security\n   Layer ([SASL]) mechanism\
    \ for use in protocols with no clear-text\n   login command (e.g., [ACAP] or [SMTP-AUTH]).\
    \  This document updates\n   RFC 2595, replacing Section 6.  Changes since RFC\
    \ 2595 are detailed\n   in Appendix A.\n   The name associated with this mechanism\
    \ is \"PLAIN\".\n   The PLAIN SASL mechanism does not provide a security layer.\n\
    \   The PLAIN mechanism should not be used without adequate data security\n  \
    \ protection as this mechanism affords no integrity or confidentiality\n   protections\
    \ itself.  The mechanism is intended to be used with data\n   security protections\
    \ provided by application-layer protocol,\n   generally through its use of Transport\
    \ Layer Security ([TLS])\n   services.\n   By default, implementations SHOULD\
    \ advertise and make use of the\n   PLAIN mechanism only when adequate data security\
    \ services are in\n   place.  Specifications for IETF protocols that indicate\
    \ that this\n   mechanism is an applicable authentication mechanism MUST mandate\
    \ that\n   implementations support an strong data security service, such as TLS.\n\
    \   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\"\
    ,\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in\
    \ this\n   document are to be interpreted as described in [Keywords].\n"
- title: 2.  PLAIN SASL Mechanism
  contents:
  - "2.  PLAIN SASL Mechanism\n   The mechanism consists of a single message, a string\
    \ of [UTF-8]\n   encoded [Unicode] characters, from the client to the server.\
    \  The\n   client presents the authorization identity (identity to act as),\n\
    \   followed by a NUL (U+0000) character, followed by the authentication\n   identity\
    \ (identity whose password will be used), followed by a NUL\n   (U+0000) character,\
    \ followed by the clear-text password.  As with\n   other SASL mechanisms, the\
    \ client does not provide an authorization\n   identity when it wishes the server\
    \ to derive an identity from the\n   credentials and use that as the authorization\
    \ identity.\n   The formal grammar for the client message using Augmented BNF\
    \ [ABNF]\n   follows.\n   message   = [authzid] UTF8NUL authcid UTF8NUL passwd\n\
    \   authcid   = 1*SAFE ; MUST accept up to 255 octets\n   authzid   = 1*SAFE ;\
    \ MUST accept up to 255 octets\n   passwd    = 1*SAFE ; MUST accept up to 255\
    \ octets\n   UTF8NUL   = %x00 ; UTF-8 encoded NUL character\n   SAFE      = UTF1\
    \ / UTF2 / UTF3 / UTF4\n               ;; any UTF-8 encoded Unicode character\
    \ except NUL\n   UTF1      = %x01-7F ;; except NUL\n   UTF2      = %xC2-DF UTF0\n\
    \   UTF3      = %xE0 %xA0-BF UTF0 / %xE1-EC 2(UTF0) /\n               %xED %x80-9F\
    \ UTF0 / %xEE-EF 2(UTF0)\n   UTF4      = %xF0 %x90-BF 2(UTF0) / %xF1-F3 3(UTF0)\
    \ /\n               %xF4 %x80-8F 2(UTF0)\n   UTF0      = %x80-BF\n   The authorization\
    \ identity (authzid), authentication identity\n   (authcid), password (passwd),\
    \ and NUL character deliminators SHALL be\n   transferred as [UTF-8] encoded strings\
    \ of [Unicode] characters.  As\n   the NUL (U+0000) character is used as a deliminator,\
    \ the NUL (U+0000)\n   character MUST NOT appear in authzid, authcid, or passwd\
    \ productions.\n   The form of the authzid production is specific to the application-\n\
    \   level protocol's SASL profile [SASL].  The authcid and passwd\n   productions\
    \ are form-free.  Use of non-visible characters or\n   characters that a user\
    \ may be unable to enter on some keyboards is\n   discouraged.\n   Servers MUST\
    \ be capable of accepting authzid, authcid, and passwd\n   productions up to and\
    \ including 255 octets.  It is noted that the\n   UTF-8 encoding of a Unicode\
    \ character may be as long as 4 octets.\n   Upon receipt of the message, the server\
    \ will verify the presented (in\n   the message) authentication identity (authcid)\
    \ and password (passwd)\n   with the system authentication database, and it will\
    \ verify that the\n   authentication credentials permit the client to act as the\
    \ (presented\n   or derived) authorization identity (authzid).  If both steps\
    \ succeed,\n   the user is authenticated.\n   The presented authentication identity\
    \ and password strings, as well\n   as the database authentication identity and\
    \ password strings, are to\n   be prepared before being used in the verification\
    \ process.  The\n   [SASLPrep] profile of the [StringPrep] algorithm is the RECOMMENDED\n\
    \   preparation algorithm.  The SASLprep preparation algorithm is\n   recommended\
    \ to improve the likelihood that comparisons behave in an\n   expected manner.\
    \  The SASLprep preparation algorithm is not mandatory\n   so as to allow the\
    \ server to employ other preparation algorithms\n   (including none) when appropriate.\
    \  For instance, use of a different\n   preparation algorithm may be necessary\
    \ for the server to interoperate\n   with an external system.\n   When preparing\
    \ the presented strings using [SASLPrep], the presented\n   strings are to be\
    \ treated as \"query\" strings (Section 7 of\n   [StringPrep]) and hence unassigned\
    \ code points are allowed to appear\n   in their prepared output.  When preparing\
    \ the database strings using\n   [SASLPrep], the database strings are to be treated\
    \ as \"stored\"\n   strings (Section 7 of [StringPrep]) and hence unassigned code\
    \ points\n   are prohibited from appearing in their prepared output.\n   Regardless\
    \ of the preparation algorithm used, if the output of a\n   non-invertible function\
    \ (e.g., hash) of the expected string is\n   stored, the string MUST be prepared\
    \ before input to that function.\n   Regardless of the preparation algorithm used,\
    \ if preparation fails or\n   results in an empty string, verification SHALL fail.\n\
    \   When no authorization identity is provided, the server derives an\n   authorization\
    \ identity from the prepared representation of the\n   provided authentication\
    \ identity string.  This ensures that the\n   derivation of different representations\
    \ of the authentication\n   identity produces the same authorization identity.\n\
    \   The server MAY use the credentials to initialize any new\n   authentication\
    \ database, such as one suitable for [CRAM-MD5] or\n   [DIGEST-MD5].\n"
- title: 3.  Pseudo-Code
  contents:
  - "3.  Pseudo-Code\n   This section provides pseudo-code illustrating the verification\n\
    \   process (using hashed passwords and the SASLprep preparation\n   function)\
    \ discussed above.  This section is not definitive.\n   boolean Verify(string\
    \ authzid, string authcid, string passwd) {\n     string pAuthcid = SASLprep(authcid,\
    \ true); # prepare authcid\n     string pPasswd = SASLprep(passwd, true);   #\
    \ prepare passwd\n     if (pAuthcid == NULL || pPasswd == NULL) {\n       return\
    \ false;     # preparation failed\n     }\n     if (pAuthcid == \"\" || pPasswd\
    \ == \"\") {\n       return false;     # empty prepared string\n     }\n     storedHash\
    \ = FetchPasswordHash(pAuthcid);\n     if (storedHash == NULL || storedHash ==\
    \ \"\") {\n       return false;     # error or unknown authcid\n     }\n     if\
    \ (!Compare(storedHash, Hash(pPasswd))) {\n       return false;     # incorrect\
    \ password\n     }\n     if (authzid == NULL ) {\n       authzid = DeriveAuthzid(pAuthcid);\n\
    \       if (authzid == NULL || authzid == \"\") {\n           return false; #\
    \ could not derive authzid\n       }\n     }\n     if (!Authorize(pAuthcid, authzid))\
    \ {\n       return false;     # not authorized\n     }\n     return true;\n  \
    \ }\n   The second parameter of the SASLprep function, when true, indicates\n\
    \   that unassigned code points are allowed in the input.  When the\n   SASLprep\
    \ function is called to prepare the password prior to\n   computing the stored\
    \ hash, the second parameter would be false.\n   The second parameter provided\
    \ to the Authorize function is not\n   prepared by this code.  The application-level\
    \ SASL profile should be\n   consulted to determine what, if any, preparation\
    \ is necessary.\n   Note that the DeriveAuthzid and Authorize functions (whether\n\
    \   implemented as one function or two, whether designed in a manner in\n   which\
    \ these functions or whether the mechanism implementation can be\n   reused elsewhere)\
    \ require knowledge and understanding of mechanism\n   and the application-level\
    \ protocol specification and/or\n   implementation details to implement.\n   Note\
    \ that the Authorize function outcome is clearly dependent on\n   details of the\
    \ local authorization model and policy.  Both functions\n   may be dependent on\
    \ other factors as well.\n"
- title: 4.  Examples
  contents:
  - "4.  Examples\n   This section provides examples of PLAIN authentication exchanges.\n\
    \   The examples are intended to help the readers understand the above\n   text.\
    \  The examples are not definitive.\n   \"C:\" and \"S:\" indicate lines sent\
    \ by the client and server,\n   respectively.  \"<NUL>\" represents a single NUL\
    \ (U+0000) character.\n   The Application Configuration Access Protocol ([ACAP])\
    \ is used in the\n   examples.\n   The first example shows how the PLAIN mechanism\
    \ might be used for\n   user authentication.\n   S: * ACAP (SASL \"CRAM-MD5\"\
    ) (STARTTLS)\n   C: a001 STARTTLS\n   S: a001 OK \"Begin TLS negotiation now\"\
    \n   <TLS negotiation, further commands are under TLS layer>\n   S: * ACAP (SASL\
    \ \"CRAM-MD5\" \"PLAIN\")\n   C: a002 AUTHENTICATE \"PLAIN\"\n   S: + \"\"\n \
    \  C: {21}\n   C: <NUL>tim<NUL>tanstaaftanstaaf\n   S: a002 OK \"Authenticated\"\
    \n   The second example shows how the PLAIN mechanism might be used to\n   attempt\
    \ to assume the identity of another user.  In this example, the\n   server rejects\
    \ the request.  Also, this example makes use of the\n   protocol optional initial\
    \ response capability to eliminate a round-\n   trip.\n   S: * ACAP (SASL \"CRAM-MD5\"\
    ) (STARTTLS)\n   C: a001 STARTTLS\n   S: a001 OK \"Begin TLS negotiation now\"\
    \n   <TLS negotiation, further commands are under TLS layer>\n   S: * ACAP (SASL\
    \ \"CRAM-MD5\" \"PLAIN\")\n   C: a002 AUTHENTICATE \"PLAIN\" {20+}\n   C: Ursel<NUL>Kurt<NUL>xipj3plmq\n\
    \   S: a002 NO \"Not authorized to requested authorization identity\"\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   As the PLAIN mechanism itself provided no integrity\
    \ or\n   confidentiality protections, it should not be used without adequate\n\
    \   external data security protection, such as TLS services provided by\n   many\
    \ application-layer protocols.  By default, implementations SHOULD\n   NOT advertise\
    \ and SHOULD NOT make use of the PLAIN mechanism unless\n   adequate data security\
    \ services are in place.\n   When the PLAIN mechanism is used, the server gains\
    \ the ability to\n   impersonate the user to all services with the same password\n\
    \   regardless of any encryption provided by TLS or other confidentiality\n  \
    \ protection mechanisms.  Whereas many other authentication mechanisms\n   have\
    \ similar weaknesses, stronger SASL mechanisms address this issue.\n   Clients\
    \ are encouraged to have an operational mode where all\n   mechanisms that are\
    \ likely to reveal the user's password to the\n   server are disabled.\n   General\
    \ [SASL] security considerations apply to this mechanism.\n   Unicode, [UTF-8],\
    \ and [StringPrep] security considerations also\n   apply.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   The SASL Mechanism registry [IANA-SASL] entry for\
    \ the PLAIN mechanism\n   has been updated by the IANA to reflect that this document\
    \ now\n   provides its technical specification.\n   To: iana@iana.org\n   Subject:\
    \ Updated Registration of SASL mechanism PLAIN\n   SASL mechanism name: PLAIN\n\
    \   Security considerations: See RFC 4616.\n   Published specification (optional,\
    \ recommended): RFC 4616\n   Person & email address to contact for further information:\n\
    \        Kurt Zeilenga <kurt@openldap.org>\n        IETF SASL WG <ietf-sasl@imc.org>\n\
    \   Intended usage: COMMON\n   Author/Change controller: IESG <iesg@ietf.org>\n\
    \   Note: Updates existing entry for PLAIN\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   This document is a revision of RFC 2595 by Chris Newman.\
    \  Portions of\n   the grammar defined in Section 2 were borrowed from [UTF-8]\
    \ by\n   Francois Yergeau.\n   This document is a product of the IETF Simple Authentication\
    \ and\n   Security Layer (SASL) Working Group.\n"
- title: 8.  Normative References
  contents:
  - "8.  Normative References\n   [ABNF]        Crocker, D., Ed. and P. Overell, \"\
    Augmented BNF for\n                 Syntax Specifications: ABNF\", RFC 4234, October\
    \ 2005.\n   [Keywords]    Bradner, S., \"Key words for use in RFCs to Indicate\n\
    \                 Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [SASL]\
    \        Melnikov, A., Ed., and K. Zeilenga, Ed., \"Simple\n                 Authentication\
    \ and Security Layer (SASL)\", RFC 4422,\n                 June 2006.\n   [SASLPrep]\
    \    Zeilenga, K., \"SASLprep: Stringprep Profile for User\n                 Names\
    \ and Passwords\", RFC 4013, February 2005.\n   [StringPrep]  Hoffman, P. and\
    \ M. Blanchet, \"Preparation of\n                 Internationalized Strings (\"\
    stringprep\")\", RFC 3454,\n                 December 2002.\n   [Unicode]    \
    \ The Unicode Consortium, \"The Unicode Standard, Version\n                 3.2.0\"\
    \ is defined by \"The Unicode Standard, Version\n                 3.0\" (Reading,\
    \ MA, Addison-Wesley, 2000. ISBN 0-201-\n                 61633-5), as amended\
    \ by the \"Unicode Standard Annex\n                 #27: Unicode 3.1\"\n     \
    \            (http://www.unicode.org/reports/tr27/) and by the\n             \
    \    \"Unicode Standard Annex #28: Unicode 3.2\"\n                 (http://www.unicode.org/reports/tr28/).\n\
    \   [UTF-8]       Yergeau, F., \"UTF-8, a transformation format of ISO\n     \
    \            10646\", STD 63, RFC 3629, November 2003.\n   [TLS]         Dierks,\
    \ T. and E. Rescorla, \"The Transport Layer\n                 Security (TLS) Protocol\
    \ Version 1.1\", RFC 4346, April\n                 2006.\n"
- title: 9.  Informative References
  contents:
  - "9.  Informative References\n   [ACAP]        Newman, C. and J. Myers, \"ACAP\
    \ -- Application\n                 Configuration Access Protocol\", RFC 2244,\
    \ November\n                 1997.\n   [CRAM-MD5]    Nerenberg, L., Ed., \"The\
    \ CRAM-MD5 SASL Mechanism\", Work\n                 in Progress, June 2006.\n\
    \   [DIGEST-MD5]  Melnikov, A., Ed., \"Using Digest Authentication as a\n    \
    \             SASL Mechanism\", Work in Progress, June 2006.\n   [IANA-SASL] \
    \  IANA, \"SIMPLE AUTHENTICATION AND SECURITY LAYER (SASL)\n                 MECHANISMS\"\
    ,\n                 <http://www.iana.org/assignments/sasl-mechanisms>.\n   [SMTP-AUTH]\
    \   Myers, J., \"SMTP Service Extension for Authentication\",\n              \
    \   RFC 2554, March 1999.\n"
- title: Appendix A.  Changes since RFC 2595
  contents:
  - "Appendix A.  Changes since RFC 2595\n   This appendix is non-normative.\n   This\
    \ document replaces Section 6 of RFC 2595.\n   The specification details how the\
    \ server is to compare client-\n   provided character strings with stored character\
    \ strings.\n   The ABNF grammar was updated.  In particular, the grammar now allows\n\
    \   LINE FEED (U+000A) and CARRIAGE RETURN (U+000D) characters in the\n   authzid,\
    \ authcid, passwd productions.  However, whether these control\n   characters\
    \ may be used depends on the string preparation rules\n   applicable to the production.\
    \  For passwd and authcid productions,\n   control characters are prohibited.\
    \  For authzid, one must consult the\n   application-level SASL profile.  This\
    \ change allows PLAIN to carry\n   all possible authorization identity strings\
    \ allowed in SASL.\n   Pseudo-code was added.\n   The example section was expanded\
    \ to illustrate more features of the\n   PLAIN mechanism.\n"
- title: Editor's Address
  contents:
  - "Editor's Address\n   Kurt D. Zeilenga\n   OpenLDAP Foundation\n   EMail: Kurt@OpenLDAP.org\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
