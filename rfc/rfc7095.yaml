- title: __initial_text__
  contents:
  - '                    jCard: The JSON Format for vCard

    '
- title: Abstract
  contents:
  - "Abstract\n   This specification defines \"jCard\", a JSON format for vCard data.\n\
    \   The vCard data format is a text format for representing and\n   exchanging\
    \ information about individuals and other entities, for\n   example, telephone\
    \ numbers, email addresses, structured names, and\n   delivery addresses.  JSON\
    \ is a lightweight, text-based, language-\n   independent data interchange format\
    \ commonly used in Internet\n   applications.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7095.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Conventions Used in This Document . . . . . . . . . .\
    \ . . . .   3\n   3.  Converting from vCard to jCard  . . . . . . . . . . . .\
    \ . . .   4\n     3.1.  Pre-processing  . . . . . . . . . . . . . . . . . . .\
    \ . .   4\n     3.2.  jCard Object and Syntactic Entities (RFC 6350, Sections\n\
    \           6.1.1 and 6.1.2)  . . . . . . . . . . . . . . . . . . . .   5\n  \
    \   3.3.  Properties (RFC 6350, Section 6)  . . . . . . . . . . . .   5\n    \
    \   3.3.1.  Special Cases for Properties  . . . . . . . . . . . .   7\n      \
    \   3.3.1.1.  The VERSION Property  . . . . . . . . . . . . . .   7\n        \
    \ 3.3.1.2.  Grouping of Properties  . . . . . . . . . . . . .   7\n         3.3.1.3.\
    \  Structured Property Values  . . . . . . . . . . .   8\n     3.4.  Parameters\
    \ (RFC 6350, Section 5)  . . . . . . . . . . . .  10\n       3.4.1.  VALUE Parameter\
    \ . . . . . . . . . . . . . . . . . . .  10\n       3.4.2.  Multi-Valued Parameters\
    \ . . . . . . . . . . . . . . .  11\n     3.5.  Values (RFC 6350, Section 4) \
    \ . . . . . . . . . . . . . .  11\n       3.5.1.  Text (RFC 6350, Section 4.1)\
    \  . . . . . . . . . . . .  12\n       3.5.2.  URI (RFC 6350, Section 4.2) . .\
    \ . . . . . . . . . . .  12\n       3.5.3.  Date (RFC 6350, Section 4.3.1)  .\
    \ . . . . . . . . . .  12\n       3.5.4.  Time (RFC 6350, Section 4.3.2)  . .\
    \ . . . . . . . . .  13\n       3.5.5.  Date-Time (RFC 6350, Section 4.3.3) .\
    \ . . . . . . . .  14\n       3.5.6.  Date and/or Time (RFC 6350, Section 4.3.4)\
    \  . . . . .  16\n       3.5.7.  Timestamp (RFC 6350, Section 4.3.5) . . . . .\
    \ . . . .  16\n       3.5.8.  Boolean (RFC 6350, Section 4.4) . . . . . . . .\
    \ . . .  17\n       3.5.9.  Integer (RFC 6350, Section 4.5) . . . . . . . . .\
    \ . .  17\n       3.5.10. Float (RFC 6350, Section 4.6) . . . . . . . . . . .\
    \ .  17\n       3.5.11. UTC Offset (RFC 6350, Section 4.7)  . . . . . . . . .\
    \  18\n       3.5.12. Language Tag (RFC 6350, Section 4.8)  . . . . . . . .  18\n\
    \     3.6.  Extensions (RFC 6350, Section 6.10) . . . . . . . . . . .  18\n  \
    \ 4.  Converting from jCard into vCard  . . . . . . . . . . . . . .  19\n   5.\
    \  Handling Unrecognized Properties or Parameters  . . . . . . .  19\n     5.1.\
    \  Converting vCard into jCard . . . . . . . . . . . . . . .  19\n     5.2.  Converting\
    \ jCard into vCard . . . . . . . . . . . . . . .  20\n     5.3.  Examples  . .\
    \ . . . . . . . . . . . . . . . . . . . . . .  20\n   6.  Security Considerations\
    \ . . . . . . . . . . . . . . . . . . .  21\n   7.  IANA Considerations . . .\
    \ . . . . . . . . . . . . . . . . . .  22\n     7.1.  GROUP vCard Parameter .\
    \ . . . . . . . . . . . . . . . . .  23\n     7.2.  UNKNOWN vCard Value Data Type\
    \ . . . . . . . . . . . . . .  24\n   8.  Acknowledgments . . . . . . . . . .\
    \ . . . . . . . . . . . . .  24\n   9.  References  . . . . . . . . . . . . .\
    \ . . . . . . . . . . . .  24\n     9.1.  Normative References  . . . . . . .\
    \ . . . . . . . . . . .  24\n     9.2.  Informative References  . . . . . . .\
    \ . . . . . . . . . .  25\n   Appendix A.  ABNF Syntax  . . . . . . . . . . .\
    \ . . . . . . . . .  26\n   Appendix B.  Examples . . . . . . . . . . . . . .\
    \ . . . . . . . .  27\n     B.1.  Example: vCard of the Author of RFC 6350  .\
    \ . . . . . . .  27\n       B.1.1.  vCard Data  . . . . . . . . . . . . . . .\
    \ . . . . . .  27\n       B.1.2.  jCard Data  . . . . . . . . . . . . . . . .\
    \ . . . . .  28\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The vCard data format [RFC6350] provides for the capture\
    \ and exchange\n   of information normally stored within an address book or directory\n\
    \   application.  The vCard format has gone through multiple revisions,\n   most\
    \ recently vCard 4.\n   As certain similarities exist between vCard and the iCalendar\
    \ data\n   format [RFC5545], there is also an effort to define a JSON-based data\n\
    \   format for calendar information called jCal [JCAL] that parallels the\n  \
    \ format defined in this specification.  The term \"JSON\" describes the\n   JavaScript\
    \ Object Notation defined in [RFC4627].\n   The purpose of this specification\
    \ is to define \"jCard\", a JSON format\n   for vCard data.  One main advantage\
    \ to using a JSON-based format over\n   the classic vCard format is easier processing\
    \ for JavaScript-based\n   widgets and libraries, especially in the scope of web-based\n\
    \   applications.\n   The key design considerations are essentially the same as\
    \ those for\n   [JCAL] and [RFC6321], that is:\n      Round-tripping (converting\
    \ a vCard instance to jCard and back)\n      will give the same semantic result\
    \ as the starting point.  For\n      example, all components, properties, and\
    \ property parameters are\n      guaranteed to be preserved.\n      The Ordering\
    \ of elements and the case of property and parameter\n      names will not necessarily\
    \ be preserved.\n      The vCard data semantics are to be preserved, allowing\
    \ a simple\n      consumer to easily browse the data in jCard.  A full understanding\n\
    \      of vCard is still required in order to modify and/or fully\n      comprehend\
    \ the directory data.\n      Extensions to the underlying vCard specification\
    \ must not lead to\n      requiring an update to jCard.\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n   The underlying format used for jCard is JSON.  Consequently,\
    \ the\n   terms \"object\" and \"array\" as well as the four primitive types\n\
    \   (strings, numbers, booleans, and null) are to be interpreted as\n   described\
    \ in Section 1 of [RFC4627].\n   Some examples in this document contain \"partial\"\
    \ JSON documents used\n   for illustrative purposes.  In these examples, three\
    \ periods \"...\"\n   are used to indicate a portion of the document that has\
    \ been removed\n   for compactness.\n"
- title: 3.  Converting from vCard to jCard
  contents:
  - "3.  Converting from vCard to jCard\n   This section describes how vCard objects\
    \ are converted to jCard using\n   a simple mapping between the vCard data model\
    \ and JSON elements.\n   In [RFC6350], vCard objects are comprised of a set of\
    \ \"properties\",\n   \"parameters\", and \"values\".  The top level of a vCard\
    \ object contains\n   \"properties\".  A \"property\" has a \"value\" and a set\
    \ of zero or more\n   \"parameters\".  Each of these entities has a representation\
    \ in jCard,\n   defined in the following sections.  The representation of a vCard\n\
    \   object in JSON will be named \"jCard object\" throughout this document.\n"
- title: 3.1.  Pre-processing
  contents:
  - "3.1.  Pre-processing\n   vCard uses a line-folding mechanism to limit lines of\
    \ data to a\n   maximum line length (typically 75 octets) to ensure maximum\n\
    \   likelihood of preserving data integrity as it is transported via\n   various\
    \ means (e.g., email) -- see Section 3.2 of [RFC6350].\n   vCard data uses an\
    \ \"escape\" character sequence for text values and\n   property parameter values.\
    \  See Section 3.4 of [RFC6350] as well as\n   [RFC6868].\n   When converting\
    \ from vCard to jCard, first vCard lines MUST be\n   unfolded.  Afterwards, any\
    \ vCard escaping MUST be unescaped.\n   Finally, JSON escaping (e.g., for control\
    \ characters) MUST be\n   applied.\n   The reverse order applies when converting\
    \ from jCard to vCard.\n   First, JSON escaping MUST be unescaped.  Afterwards,\
    \ vCard escaping\n   MUST be applied.  Finally, long lines SHOULD be folded as\
    \ described\n   in [RFC6350].\n   One key difference in the formatting of values\
    \ used in vCard and\n   jCard is that in jCard the specification uses date/time\
    \ values\n   aligned with the extended format of [ISO.8601.2004], which is more\n\
    \   commonly used in Internet applications that make use of the JSON\n   format.\
    \  The sections of this document describing the various date\n   and time formats\
    \ contain more information on the use of the complete\n   representation, reduced\
    \ accuracy, or truncated representation.\n"
- title: 3.2.  jCard Object and Syntactic Entities (RFC 6350, Sections 6.1.1 and
  contents:
  - "3.2.  jCard Object and Syntactic Entities (RFC 6350, Sections 6.1.1 and\n   \
    \   6.1.2)\n   In Sections 6.1.1 and 6.1.2 of [RFC6350], the BEGIN and END\n \
    \  properties delimit a syntactic vCard entity.  In jCard, each\n   syntactic\
    \ entity is represented by an array with two elements and is\n   named \"jCard\
    \ object\".  The first element is the string \"vcard\", and\n   the second element\
    \ is an array of jCard properties as described in\n   Section 3.3, belonging to\
    \ the entity.\n   Although [RFC6350] defines BEGIN and END to be properties, they\
    \ MUST\n   NOT appear as properties of the jCard.  Instead, the jCard object is\n\
    \   sufficient to define a vCard entity.  When converting from jCard to\n   vCard,\
    \ the BEGIN and END properties MUST be added to enclose the\n   properties of\
    \ the jCard object.\n   Example:\n   [\"vcard\", [\n     /* Add properties in\
    \ place of this comment */\n     ]\n   ]\n   Consumers of this format wishing\
    \ to define content that can represent\n   multiple jCard objects within the same\
    \ JSON document can use a simple\n   JSON array, each element being a single jCard\
    \ object.\n"
- title: 3.3.  Properties (RFC 6350, Section 6)
  contents:
  - "3.3.  Properties (RFC 6350, Section 6)\n   Each individual vCard property is\
    \ represented in jCard by an array\n   with three fixed elements, followed by\
    \ one or more additional\n   elements, depending on if the property is a multi-valued\
    \ property as\n   described in Section 3.3 of [RFC6350].\n   The array consists\
    \ of the following fixed elements:\n   1.  The name of the property, as a lowercase\
    \ string.  The vCard\n       format specifies that property names are case insensitive\
    \ and\n       recommends that they be rendered in uppercase.  In jCard, they\n\
    \       MUST be in lowercase.\n   2.  An object containing the parameters as described\
    \ in Section 3.4.\n       If the property has no parameters, an empty object is\
    \ used to\n       represent that.\n   3.  The type identifier string of the value,\
    \ in lowercase.  It is\n       important that parsers check this to determine\
    \ the data type of\n       the value and that they do not rely on assumptions.\
    \  For example,\n       for structured values, the data type will be \"array\"\
    .\n   The remaining elements of the array are used for one or more values\n  \
    \ of the property.  For single-value properties, the array has exactly\n   four\
    \ elements; for multi-valued properties, each value is another\n   element, and\
    \ there can be any number of additional elements.\n   In the following example,\
    \ the \"categories\" property is multi-valued\n   and has two values, while all\
    \ other properties are single-valued:\n   [\"vcard\",\n     [\n       [\"version\"\
    , {}, \"text\", \"4.0\"],\n       [\"fn\", {}, \"text\", \"John Doe\"],\n    \
    \   [\"gender\", {}, \"text\", \"M\"],\n       [\"categories\", {}, \"text\",\
    \ \"computers\", \"cameras\"],\n       ...\n     ]\n   ]\n   As described in Section\
    \ 3.3.1.3, a property value may be a structured\n   property value, in which case\
    \ it is represented as an array\n   encapsulated in the array that represents\
    \ the overall property.\n   Strictly speaking, this means that the property value\
    \ is not\n   represented in the format indicated by the type identifier but by\
    \ an\n   array instead.  However, the values inside the encapsulated array are\n\
    \   of the format identified by the type identifier.\n   The above also holds\
    \ for multi-valued properties, where some of the\n   values may be structured\
    \ property values and therefore are\n   represented as an encapsulated array.\n\
    \   A special case is where a value in an encapsulated array consists of\n   multiple\
    \ components itself, in which case it is represented as yet\n   another nested\
    \ array, with elements matching the value type.\n   Section 3.3.1.3 describes\
    \ this in more detail.\n   The above illustrates that it's important for the parser\
    \ to check the\n   format of each property value, as it might either directly\
    \ match the\n   value type, or it might be a structured value where nested\n \
    \  subelements match the value type.\n"
- title: 3.3.1.  Special Cases for Properties
  contents:
  - "3.3.1.  Special Cases for Properties\n   This section describes some properties\
    \ that have special handling\n   when converting to jCard.\n"
- title: 3.3.1.1.  The VERSION Property
  contents:
  - "3.3.1.1.  The VERSION Property\n   The vCard format specification [RFC6350] defines\
    \ the \"VERSION\"\n   property to be mandatory.  The jCard \"version\" property\
    \ MUST be\n   represented in the corresponding jCard component, with the same\
    \ value\n   as in the vCard. vCards that conform to RFC 6350 will contain the\n\
    \   value \"4.0\".\n   Also in accordance to [RFC6350], the \"version\" property\
    \ MUST be the\n   first element of the array containing the properties of a jCard.\n"
- title: 3.3.1.2.  Grouping of Properties
  contents:
  - "3.3.1.2.  Grouping of Properties\n   In vCard [RFC6350], related properties can\
    \ be grouped together using\n   a grouping construct.  The grouping is accomplished\
    \ by adding a\n   prefix (which consists of the group name followed by a dot)\
    \ to the\n   property name.\n   In jCard, the same grouping is achieved through\
    \ a \"group\" parameter\n   that holds the group name.  In jCard, a property name\
    \ therefore MUST\n   NOT be prefixed by a group name.\n   The \"GROUP\" parameter\
    \ MUST NOT be used in vCard; as per [RFC6350], it\n   is merely registered to\
    \ reserve the parameter, avoiding collisions.\n   Formal registration of the \"\
    GROUP\" parameter is described in\n   Section 7.1.\n"
- title: 3.3.1.2.1.  Group Conversion Rules
  contents:
  - "3.3.1.2.1.  Group Conversion Rules\n   In jCard, the parameter's value is a single\
    \ opaque string.\n   Conversion rules are as follows:\n   o  From vCard to jCard,\
    \ the group construct (see [RFC6350],\n      Section 3.3) is removed.  In its\
    \ place, the \"group\" parameter is\n      used.  Its value is a string corresponding\
    \ to the group name,\n      which is case insensitive both in vCard and jCard.\
    \  The name's\n      case SHOULD be converted into lowercase.\n   o  When converting\
    \ from jCard to vCard, the value of the \"group\"\n      parameter followed by\
    \ a dot is prefixed to the property name, and\n      the \"group\" parameter is\
    \ discarded.  The \"GROUP\" parameter MUST\n      NOT appear in the resulting\
    \ vCard.  Following the recommendations\n      in [RFC6350], the name's case SHOULD\
    \ be converted into uppercase.\n   Example:\n   CONTACT.FN:Mr. John Q. Public\\\
    , Esq.\n   is equivalent to:\n   [ \"fn\", { \"group\": \"CONTACT\" }, \"text\"\
    , \"Mr. John Q. Public, Esq.\" ]\n"
- title: 3.3.1.3.  Structured Property Values
  contents:
  - "3.3.1.3.  Structured Property Values\n   The vCard specification defines properties\
    \ with structured values,\n   for example, \"GENDER\" or \"ADR\".  In vCard, a\
    \ structured text value\n   consists of one or multiple text components, delimited\
    \ by the\n   SEMICOLON character.  Its equivalent in jCard is a structured\n \
    \  property value, which is an array containing one element for each\n   text\
    \ component, with empty/missing text components represented by\n   zero-length\
    \ strings.\n   vCard Example:\n   ADR:;;123 Main Street;Any Town;CA;91921-1234;U.S.A.\n\
    \   jCard Example:\n   [\"adr\", {}, \"text\",\n     [\n     \"\", \"\", \"123\
    \ Main Street\",\n     \"Any Town\", \"CA\", \"91921-1234\", \"U.S.A.\"\n    \
    \ ]\n   ]\n   Some vCard properties, for example, ADR, also allow a structured\n\
    \   value element that itself has multiple values.  In this case, the\n   element\
    \ of the array describing the structured value is itself an\n   array with one\
    \ element for each of the component's multiple values.\n   vCard Example:\n  \
    \ ADR:;;My Street,Left Side,Second Shack;Hometown;PA;18252;U.S.A.\n   jCard Example:\n\
    \   [\"adr\", {}, \"text\",\n     [\n     \"\", \"\",\n     [\"My Street\", \"\
    Left Side\", \"Second Shack\"],\n     \"Hometown\", \"PA\", \"18252\", \"U.S.A.\"\
    \n     ]\n   ]\n   In both cases, the array element values MUST have the primitive\
    \ type\n   that matches the jCard type identifier.  In [RFC6350], there are only\n\
    \   structured text values and thus only JSON strings are used.  For\n   example,\
    \ extensions may define structured number or boolean values,\n   where JSON number\
    \ or boolean types MUST be used.\n   Although it is allowed for a structured property\
    \ value to hold just\n   one component, it is RECOMMENDED to represent it as a\
    \ single text\n   value instead, omitting the array completely.  Nevertheless,\
    \ a simple\n   implementation MAY choose to retain the array, with a single text\n\
    \   value as its element.\n   Similarly, structured values that consist of two\
    \ text components with\n   one being optional (for example, \"GENDER\") can be\
    \ represented as a\n   single text value.  Therefore, parsers of jCard data SHOULD\
    \ check\n   even known property values for structured information by considering\n\
    \   the JSON data type of the value, which can be an array or a primitive\n  \
    \ value.  This is especially important for languages where accessing\n   array\
    \ members is done by the same construct as accessing characters\n   of a string.\n\
    \   Examples:\n   [\"gender\", {}, \"text\", [\"F\", \"grrrl\"] ],\n   [\"gender\"\
    , {}, \"text\", \"M\" ]\n   Per Section 6.3.1 of [RFC6350], the component separator\
    \ MUST be\n   specified even if the component value is missing.  Similarly, the\n\
    \   jCard array containing the structured data MUST contain all required\n   elements,\
    \ even if they are empty.\n   vCard Example:\n   ADR;LABEL=\"123 Maple Ave\\nSuite\
    \ 901\\nVancouver BC\\nA1B 2C9\\nCan\n    ada\":;;;;;;\n   jCard Example:\n  \
    \ [\"adr\",\n    {\"label\":\"123 Maple Ave\\nSuite 901\\nVancouver BC\\nA1B 2C9\\\
    nCanada\"},\n    \"text\",\n    [\"\", \"\", \"\", \"\", \"\", \"\", \"\"]\n \
    \  ]\n"
- title: 3.4.  Parameters (RFC 6350, Section 5)
  contents:
  - "3.4.  Parameters (RFC 6350, Section 5)\n   Property parameters are represented\
    \ as a JSON object where each key-\n   value pair represents the vCard parameter\
    \ name and its value.  The\n   name of the parameter MUST be in lowercase; the\
    \ original case of the\n   parameter value MUST be preserved.  For example, the\
    \ \"LANGUAGE\"\n   property parameter is represented in jCard by the \"language\"\
    \ key.\n   Any new vCard parameters added in the future will be converted in the\n\
    \   same way.\n   Example:\n   [\"role\", { \"language\": \"tr\" }, \"text\",\
    \ \"roca\"],\n"
- title: 3.4.1.  VALUE Parameter
  contents:
  - "3.4.1.  VALUE Parameter\n   vCard defines a \"VALUE\" property parameter (Section\
    \ 5.2 of\n   [RFC6350]).  This property parameter MUST NOT be added to the\n \
    \  parameters object.  Instead, the value type is signaled through the\n   type\
    \ identifier in the third element of the array describing the\n   property.  When\
    \ converting a property from vCard to jCard, the value\n   type is determined\
    \ as follows:\n   1.  If the property has a \"VALUE\" parameter, that parameter's\
    \ value\n       is used as the value type.\n   2.  If the property has no \"VALUE\"\
    \ parameter but has a default value\n       type, the default value type is used.\n\
    \   3.  If the property has no \"VALUE\" parameter and has no default value\n\
    \       type, \"unknown\" is used.\n   Converting from jCard into vCard is done\
    \ as follows:\n   1.  If the property's value type is \"unknown\", no \"VALUE\"\
    \ parameter\n       is included.\n   2.  If the property's value type is the default\
    \ type for that\n       property, no \"VALUE\" parameter is included.\n   3. \
    \ Otherwise, a \"VALUE\" parameter is included, and the value type is\n      \
    \ used as the parameter value.\n   See Section 5 for information on handling unknown\
    \ value types.\n"
- title: 3.4.2.  Multi-Valued Parameters
  contents:
  - "3.4.2.  Multi-Valued Parameters\n   In [RFC6350], some parameters allow using\
    \ a comma-separated list of\n   values.  To ease processing in jCard, the value\
    \ for such parameters\n   MUST be represented in an array containing the separated\
    \ values.  The\n   array elements MUST be string values.  Single-value parameters\
    \ SHOULD\n   be represented using a single string value, although a more simple\n\
    \   implementation might prefer an array with one string element.  An\n   example\
    \ of such a parameter is the vCard \"SORT-AS\" parameter; more\n   such parameters\
    \ may be added in extensions.\n   The vCard specification requires encapsulation\
    \ between DQUOTE\n   characters if a parameter value contains a colon, a semicolon,\
    \ or a\n   comma.  These extra DQUOTE characters do not belong to the actual\n\
    \   parameter value and hence are not included when the parameter is\n   converted\
    \ to jCard.\n   Example:\n   [\"vcard\",\n     [\n       [\"version\", {}, \"\
    text\", \"4.0\"],\n       [\"n\",\n        { \"sort-as\": [\"Harten\", \"Rene\"\
    ] },\n        \"text\",\n        [\"van der Harten\", \"Rene\", \"J.\", \"Sir\"\
    , \"R.D.O.N.\"]\n       ],\n       [\"fn\", {}, \"text\", \"Rene van der Harten\"\
    ]\n       ...\n     ]\n   ]\n"
- title: 3.5.  Values (RFC 6350, Section 4)
  contents:
  - "3.5.  Values (RFC 6350, Section 4)\n   The following subsections specify how\
    \ vCard property value data types\n   (which are defined in Section 4 of [RFC6350])\
    \ are represented in\n   jCard.\n"
- title: 3.5.1.  Text (RFC 6350, Section 4.1)
  contents:
  - "3.5.1.  Text (RFC 6350, Section 4.1)\n   Description:  vCard \"TEXT\" property\
    \ values are represented by a\n      property with the type identifier \"text\"\
    .  The value elements are\n      JSON strings.  For details on structured text\
    \ values, see\n      Section 3.3.1.3.\n   Example:\n   [\"kind\", {}, \"text\"\
    , \"group\"]\n"
- title: 3.5.2.  URI (RFC 6350, Section 4.2)
  contents:
  - "3.5.2.  URI (RFC 6350, Section 4.2)\n   Description:  vCard \"URI\" property\
    \ values are represented by a\n      property with the type identifier \"uri\"\
    .  The value elements are\n      JSON strings.\n   Example:\n   [\"source\", {},\
    \ \"uri\", \"ldap://ldap.example.com/cn=babs%20jensen\"]\n"
- title: 3.5.3.  Date (RFC 6350, Section 4.3.1)
  contents:
  - "3.5.3.  Date (RFC 6350, Section 4.3.1)\n   Description:  vCard \"DATE\" property\
    \ values are represented by a\n      property with the type identifier \"date\"\
    .  The value elements are\n      JSON strings with the same date value specified\
    \ by [RFC6350], but\n      represented using the extended format specified in\n\
    \      [ISO.8601.2004], Section 4.1.2.  If the complete representation is\n  \
    \    not used, the same date format restrictions regarding reduced\n      accuracy,\
    \ truncated representation, and expanded representation\n      noted in [RFC6350],\
    \ Section 4.3.1 apply.  Whenever the extended\n      format is not applicable,\
    \ the basic format MUST be used.\n   ABNF syntax:\n   date-complete = year \"\
    -\" month \"-\" day ;YYYY-MM-DD\n   date-noreduc = date-complete\n           \
    \   / \"--\" month \"-\" day ; --MM-DD\n              / \"---\" day          ;\
    \ ---DDD\n   date = date-noreduc\n      / year; YYYY\n      / year \"-\" month\
    \ ; YYYY-MM\n      / \"--\" month     ; --MM\n   Examples:\n   [\"bday\", {},\
    \ \"date\", \"1985-04-12\"],\n   [\"bday\", {}, \"date\", \"1985-04\"],\n   [\"\
    bday\", {}, \"date\", \"1985\"],\n   [\"bday\", {}, \"date\", \"--04-12\"],\n\
    \   [\"bday\", {}, \"date\", \"---12\"]\n   This table contains possible conversions\
    \ between the vCard DATE\n   format and jCard date.  This information is just\
    \ an example and not a\n   formal specification of the syntax.  The specification\
    \ can be found\n   in [ISO.8601.2000] and [ISO.8601.2004].\n                 \
    \  +-----------+----------+------------+\n                   |           | vCard\
    \    | jCard      |\n                   +-----------+----------+------------+\n\
    \                   | Complete  | 19850412 | 1985-04-12 |\n                  \
    \ |           |          |            |\n                   | Reduced   | 1985-04\
    \  | 1985-04    |\n                   |           |          |            |\n\
    \                   | Reduced   | 1985     | 1985       |\n                  \
    \ |           |          |            |\n                   | Truncated | --0412\
    \   | --04-12    |\n                   |           |          |            |\n\
    \                   | Truncated | --04     | --04       |\n                  \
    \ |           |          |            |\n                   | Truncated | ---12\
    \    | ---12      |\n                   +-----------+----------+------------+\n"
- title: 3.5.4.  Time (RFC 6350, Section 4.3.2)
  contents:
  - "3.5.4.  Time (RFC 6350, Section 4.3.2)\n   Description:  vCard \"TIME\" property\
    \ values are represented by a\n      property with the type identifier \"time\"\
    .  The value elements are\n      JSON strings with the same time value specified\
    \ by [RFC6350], but\n      represented using the extended format specified in\n\
    \      [ISO.8601.2004], Section 4.2.  If the complete representation is\n    \
    \  not used, the same time format restrictions regarding reduced\n      accuracy,\
    \ decimal fraction, and truncated representation noted in\n      [RFC6350], Section\
    \ 4.3.2 apply.  Whenever the extended format is\n      not applicable, the basic\
    \ format MUST be used.  The seconds value\n      of 60 MUST only be used to account\
    \ for positive \"leap\" seconds,\n      and the midnight hour is always represented\
    \ by 00, never 24.\n      Fractions of a second are not supported by this format.\
    \  In jCard,\n      UTC offsets are permitted within a time value; note that this\n\
    \      differs from jCal [JCAL], where they are not permitted.\n   ABNF syntax:\n\
    \   time-notrunc =  hour [\":\" minute [\":\" second]] [zone]\n   time = time-notrunc\n\
    \      / \"-\" minute \":\" second [zone]; -mm:ss\n      / \"-\" minute [zone];\
    \ -mm\n      / \"--\" second [zone]; --ss\n   Examples:\n   [\"x-time-local\"\
    , {}, \"time\", \"12:30:00\"],\n   [\"x-time-utc\", {}, \"time\", \"12:30:00Z\"\
    ],\n   [\"x-time-offset\", {}, \"time\", \"12:30:00-08:00\"],\n   [\"x-time-reduced\"\
    , {}, \"time\", \"23\"],\n   [\"x-time-truncated\", {}, \"time\", \"-30\"]\n \
    \  This table contains possible conversions between the vCard TIME\n   format\
    \ and jCard time.  This information is just an example and not a\n   formal specification\
    \ of the syntax.  The specification can be found\n   in [ISO.8601.2000] and [ISO.8601.2004].\n\
    \                     +-----------+--------+----------+\n                    \
    \ |           | vCard  | jCard    |\n                     +-----------+--------+----------+\n\
    \                     | Complete  | 232050 | 23:20:50 |\n                    \
    \ |           |        |          |\n                     | Reduced   | 2320 \
    \  | 23:20    |\n                     |           |        |          |\n    \
    \                 | Reduced   | 23     | 23       |\n                     |  \
    \         |        |          |\n                     | Truncated | -2050  | -20:50\
    \   |\n                     |           |        |          |\n              \
    \       | Truncated | -20    | -20      |\n                     |           |\
    \        |          |\n                     | Truncated | --50   | --50     |\n\
    \                     +-----------+--------+----------+\n   Also, all combinations\
    \ may have any zone designator appended, as in\n   the complete representation.\n"
- title: 3.5.5.  Date-Time (RFC 6350, Section 4.3.3)
  contents:
  - "3.5.5.  Date-Time (RFC 6350, Section 4.3.3)\n   Description:  vCard \"DATE-TIME\"\
    \ property values are represented by a\n      property with the type identifier\
    \ \"date-time\".  The value elements\n      are JSON strings with the same date\
    \ value specified by [RFC6350],\n      but represented using the extended format\
    \ specified in\n      [ISO.8601.2004], Section 4.3.  If the complete representation\
    \ is\n      not used, the same date and time format restrictions noted in\n  \
    \    Sections 3.5.3 and 3.5.4 apply.  Just as described in [RFC6350],\n      truncation\
    \ of the date part is permitted.\n   Example:\n   [\"anniversary\", {}, \"date-time\"\
    , \"2013-02-14T12:30:00\"],\n   [\"anniversary\", {}, \"date-time\", \"2013-01-10T19:00:00Z\"\
    ],\n   [\"anniversary\", {}, \"date-time\", \"2013-08-15T09:45:00+01:00\"],\n\
    \   [\"anniversary\", {}, \"date-time\", \"---15T09:45:00+01:00\"]\n   This table\
    \ contains possible conversions between the vCard DATE-TIME\n   format and jCard\
    \ date-time.  This information is just an example and\n   not a formal specification\
    \ of the syntax.  The specification can be\n   found in [ISO.8601.2000] and [ISO.8601.2004].\n\
    \   +----------------+----------------------+---------------------------+\n  \
    \ | Representation | vCard                | jCard                     |\n   +----------------+----------------------+---------------------------+\n\
    \   | Complete       | 19850412T232050      | 1985-04-12T23:20:50       |\n  \
    \ |                |                      |                           |\n   |\
    \ Complete       | 19850412T232050Z     | 1985-04-12T23:20:50Z      |\n   |  \
    \              |                      |                           |\n   | Complete\
    \       | 19850412T232050+0400 | 1985-04-12T23:20:50+04:00 |\n   |           \
    \     |                      |                           |\n   | Complete    \
    \   | 19850412T232050+04   | 1985-04-12T23:20:50+04    |\n   |               \
    \ |                      |                           |\n   | Reduced        |\
    \ 19850412T2320        | 1985-04-12T23:20          |\n   |                |  \
    \                    |                           |\n   | Reduced        | 19850412T23\
    \          | 1985-04-12T23             |\n   |                |              \
    \        |                           |\n   | Truncated and  | --0412T2320    \
    \      | --04-12T23:20             |\n   | Reduced        |                  \
    \    |                           |\n   |                |                    \
    \  |                           |\n   | Truncated and  | --04T2320            |\
    \ --04T23:20                |\n   | Reduced        |                      |  \
    \                         |\n   |                |                      |    \
    \                       |\n   | Truncated and  | ---12T2320           | ---12T23:20\
    \               |\n   | Reduced        |                      |              \
    \             |\n   |                |                      |                \
    \           |\n   | Truncated and  | --0412T2320          | --04-12T23:20    \
    \         |\n   | Reduced        |                      |                    \
    \       |\n   |                |                      |                      \
    \     |\n   | Truncated and  | --04T23              | --04T23                \
    \   |\n   | Reduced        |                      |                          \
    \ |\n   +----------------+----------------------+---------------------------+\n\
    \   As specified in [ISO.8601.2000], the lower-order components may not\n   be\
    \ omitted in the date part (reduced accuracy) and the higher-order\n   components\
    \ may not be omitted in the time part (truncation).  Also,\n   all combinations\
    \ may have any zone designator appended, as in the\n   complete representation.\n"
- title: 3.5.6.  Date and/or Time (RFC 6350, Section 4.3.4)
  contents:
  - "3.5.6.  Date and/or Time (RFC 6350, Section 4.3.4)\n   Description:  vCard \"\
    DATE-AND-OR-TIME\" property values are\n      represented by a property with the\
    \ type identifier \"date-and-or-\n      time\".  The value elements are either\
    \ a date-time (Section 3.5.5),\n      a date (Section 3.5.3), or a time (Section\
    \ 3.5.4) value.  Just as\n      described in Section 4.3.4 of [RFC6350], a stand-alone\
    \ time value\n      MUST always be preceded by a \"T\".\n   Example:\n   [\"bday\"\
    , {}, \"date-and-or-time\", \"2013-02-14T12:30:00\"],\n   [\"bday\", {}, \"date-and-or-time\"\
    , \"---22T14:00\"]\n   [\"bday\", {}, \"date-and-or-time\", \"1985\"],\n   [\"\
    bday\", {}, \"date-and-or-time\", \"T12:30\"]\n"
- title: 3.5.7.  Timestamp (RFC 6350, Section 4.3.5)
  contents:
  - "3.5.7.  Timestamp (RFC 6350, Section 4.3.5)\n   Description:  vCard \"TIMESTAMP\"\
    \ property values are represented by a\n      property with the type identifier\
    \ \"timestamp\".  The value elements\n      are JSON strings with the same timestamp\
    \ value specified by\n      [RFC6350], but represented using the extended format\
    \ and complete\n      representation specified in [ISO.8601.2004], Section 4.3.2.\n\
    \   Example:\n   [\"rev\", {}, \"timestamp\", \"2013-02-14T12:30:00\"],\n   [\"\
    rev\", {}, \"timestamp\", \"2013-02-14T12:30:00Z\"],\n   [\"rev\", {}, \"timestamp\"\
    , \"2013-02-14T12:30:00-05\"],\n   [\"rev\", {}, \"timestamp\", \"2013-02-14T12:30:00-05:00\"\
    ]\n   This table contains possible conversions between the vCard TIMESTAMP\n \
    \  format and jCard timestamp.  This information is just an example and\n   not\
    \ a formal specification of the syntax.  The specification can be\n   found in\
    \ [ISO.8601.2000] and [ISO.8601.2004].\n   +----------------+----------------------+---------------------------+\n\
    \   | Representation | vCard                | jCard                     |\n  \
    \ +----------------+----------------------+---------------------------+\n   |\
    \ Complete       | 19850412T232050      | 1985-04-12T23:20:50       |\n   |  \
    \              |                      |                           |\n   | Complete\
    \       | 19850412T232050Z     | 1985-04-12T23:20:50Z      |\n   |           \
    \     |                      |                           |\n   | Complete    \
    \   | 19850412T232050+0400 | 1985-04-12T23:20:50+04:00 |\n   |               \
    \ |                      |                           |\n   | Complete       |\
    \ 19850412T232050+04   | 1985-04-12T23:20:50+04    |\n   +----------------+----------------------+---------------------------+\n"
- title: 3.5.8.  Boolean (RFC 6350, Section 4.4)
  contents:
  - "3.5.8.  Boolean (RFC 6350, Section 4.4)\n   Description:  vCard \"BOOLEAN\" property\
    \ values are represented by a\n      property with the type identifier \"boolean\"\
    .  The value element is\n      a JSON boolean value.\n   Example:\n   [\"x-non-smoking\"\
    , {}, \"boolean\", true]\n"
- title: 3.5.9.  Integer (RFC 6350, Section 4.5)
  contents:
  - "3.5.9.  Integer (RFC 6350, Section 4.5)\n   Description:  vCard \"INTEGER\" property\
    \ values are represented by a\n      property with the type identifier \"integer\"\
    .  The value elements\n      are JSON primitive number values.\n   Examples:\n\
    \   [\"x-karma-points\", {}, \"integer\", 42]\n   JSON allows decimals (e.g.,\
    \ 3.14) and exponents (e.g., 2e10) to be\n   used in numeric values.  jCard does\
    \ not prohibit this for \"integer\"\n   property values.  However, since vCard\
    \ does not support decimals or\n   exponents in integers, any decimals and exponents\
    \ MUST be eliminated\n   when converting an \"integer\" value type property from\
    \ jCard to vCard.\n"
- title: 3.5.10.  Float (RFC 6350, Section 4.6)
  contents:
  - "3.5.10.  Float (RFC 6350, Section 4.6)\n   Description:  vCard \"FLOAT\" property\
    \ values are represented by a\n      property with the type identifier \"float\"\
    .  The value elements are\n      JSON primitive number values.\n   Example:\n\
    \   [\"x-grade\", {}, \"float\", 1.3]\n   JSON allows exponents (e.g., 2e10) to\
    \ be used in numeric values.\n   jCard does not prohibit this for \"float\" property\
    \ values.  However,\n   since vCard does not support exponents in floats, any\
    \ exponents MUST\n   be eliminated when converting a \"float\" value type property\
    \ from\n   jCard to vCard.\n"
- title: 3.5.11.  UTC Offset (RFC 6350, Section 4.7)
  contents:
  - "3.5.11.  UTC Offset (RFC 6350, Section 4.7)\n   Description:  vCard \"UTC-OFFSET\"\
    \ property values are represented by a\n      property with the type identifier\
    \ \"utc-offset\".  The value\n      elements are JSON strings with the same UTC\
    \ offset value specified\n      by [RFC6350], with the exception that the hour\
    \ and minute\n      components are separated by a \":\" character, for consistency\
    \ with\n      the [ISO.8601.2004] timezone offset, extended format.\n   Example:\n\
    \   // Note: [RFC6350] mentions use of utc-offset\n   // for the TZ property as\
    \ NOT RECOMMENDED\n   [\"tz\", {}, \"utc-offset\", \"-05:00\"]\n"
- title: 3.5.12.  Language Tag (RFC 6350, Section 4.8)
  contents:
  - "3.5.12.  Language Tag (RFC 6350, Section 4.8)\n   Description:  vCard \"LANGUAGE-TAG\"\
    \ property values are represented by\n      a property with the type identifier\
    \ \"language-tag\".  The value\n      elements are JSON strings containing a single\
    \ language-tag, as\n      defined in [RFC5646].\n   Example:\n   [\"lang\", {},\
    \ \"language-tag\", \"de\"]\n"
- title: 3.6.  Extensions (RFC 6350, Section 6.10)
  contents:
  - "3.6.  Extensions (RFC 6350, Section 6.10)\n   vCard extension properties and\
    \ property parameters (those with an\n   \"X-\" prefix in their name) are handled\
    \ in the same way as other\n   properties and property parameters: the property\
    \ is represented by an\n   array, the property parameter represented by an object.\
    \  The property\n   or parameter name uses the same name as for the vCard extension,\
    \ but\n   in lowercase.  For example, the \"X-FOO\" property in vCard turns into\n\
    \   the \"x-foo\" jCard property.  See Section 5 for how to deal with\n   default\
    \ values for unrecognized extension properties or property\n   parameters.\n"
- title: 4.  Converting from jCard into vCard
  contents:
  - "4.  Converting from jCard into vCard\n   When converting property and property\
    \ parameter values, the names\n   SHOULD be converted to uppercase.  Although\
    \ vCard names are case\n   insensitive, common practice is to keep them all uppercase\
    \ following\n   the actual definitions in [RFC6350].\n   Character escaping and\
    \ line folding MUST be applied to the resulting\n   vCard data as required by\
    \ [RFC6350] and [RFC6868].\n   When converting to vCard, the \"VALUE\" parameter\
    \ MUST be added to\n   properties whose default value type is unknown but do not\
    \ have a\n   jCard type identifier \"unknown\".  The \"VALUE\" parameter MAY be\n\
    \   omitted for properties using the default value type.  The \"VALUE\"\n   parameter\
    \ MUST be omitted for properties that have the jCard type\n   identifier \"unknown\"\
    .\n"
- title: 5.  Handling Unrecognized Properties or Parameters
  contents:
  - "5.  Handling Unrecognized Properties or Parameters\n   In vCard, properties can\
    \ have one or more value types as specified by\n   their definition, with one\
    \ of those values being defined as the\n   default.  When a property uses its\
    \ default value type, the \"VALUE\"\n   property parameter does not need to be\
    \ specified on the property.\n   For example, \"BDAY\"'s default value type is\
    \ \"date-and-or-time\", so\n   \"VALUE=date-and-or-time\" need not be set as a\
    \ property parameter.\n   However, \"BDAY\" also allows a \"text\" value to be\
    \ specified, and if\n   that is used, \"VALUE=text\" has to be set as a property\
    \ parameter.\n   When new properties are defined or \"X-\" properties used, a\
    \ vCard-to-\n   jCard converter might not recognize them, and not know what the\n\
    \   appropriate default value types are, yet it needs to be able to\n   preserve\
    \ the values.  A similar issue arises for unrecognized\n   property parameters.\n\
    \   In jCard, a new \"unknown\" property value type is introduced.  Its\n   purpose\
    \ is to allow preserving unknown property values when round-\n   tripping between\
    \ jCard and vCard.  To avoid collisions, this\n   specification reserves the \"\
    UNKNOWN\" property value type in vCard.\n   It MUST NOT be used in any vCard as\
    \ specified by [RFC6350], nor any\n   extensions to it.  The type is hence registered\
    \ to the \"vCard Value\n   Data Types\" registry; see Section 7.2.\n"
- title: 5.1.  Converting vCard into jCard
  contents:
  - "5.1.  Converting vCard into jCard\n   Any property that does not include a \"\
    VALUE\" property parameter and\n   whose default value type is not known MUST\
    \ be converted to a\n   primitive JSON string.  The content of that string is\
    \ the unprocessed\n   value text.  Also, value type MUST be set to \"unknown\"\
    .\n   To correctly implement this format, it's critical to use the value\n   type\
    \ \"unknown\" when the default value type is not known.  If this\n   requirement\
    \ is ignored and, for example, \"text\" is used, additional\n   escaping may occur\
    \ that breaks round-tripping values.\n   Any unrecognized property parameter MUST\
    \ be converted to a string\n   value, with its content set to the property parameter\
    \ value text,\n   treated as if it were a \"TEXT\" value.\n"
- title: 5.2.  Converting jCard into vCard
  contents:
  - "5.2.  Converting jCard into vCard\n   In jCard, the value type is always explicitly\
    \ specified.  It is\n   converted to vCard using the vCard \"VALUE\" parameter,\
    \ except in the\n   following two cases:\n   o  If the value type specified in\
    \ jCard matches the default value\n      type in vCard, the \"VALUE\" parameter\
    \ MAY be omitted.\n   o  If the value type specified in jCard is set to \"unknown\"\
    , the\n      \"VALUE\" parameter MUST NOT be specified.  The value MUST be taken\n\
    \      over in vCard without processing.\n"
- title: 5.3.  Examples
  contents:
  - "5.3.  Examples\n   The following is an example of an unrecognized vCard property\
    \ (that\n   uses a \"URI\" value as its default), and the equivalent jCard\n \
    \  representation of that property.\n   vCard:\n   X-COMPLAINT-URI:mailto:abuse@example.org\n\
    \   jCard:\n   [\"x-complaint-uri\", {}, \"unknown\", \"mailto:abuse@example.org\"\
    ]\n   The following is an example of how to cope with jCard data where the\n \
    \  parser was unable to identify the value type.  Note how the \"unknown\"\n \
    \  value type is not added to the vCard data, and escaping, aside from\n   standard\
    \ JSON string escaping, is not processed.\n   jCard:\n   [\"x-coffee-data\", {},\
    \ \"unknown\", \"Stenophylla;Guinea\\\\,Africa\"]\n   vCard:\n   X-COFFEE-DATA:Stenophylla;Guinea\\\
    ,Africa\n   There are no standard properties in [RFC6350] that have a default\n\
    \   type of integer.  Consequently, this example uses the following\n   extended\
    \ property that we treat as having a default type (namely,\n   integer) known\
    \ to the parser in order to illustrate how a property\n   with a known default\
    \ type would be transformed.\n   jCard:\n   [\"x-karma-points\", {}, \"integer\"\
    , 95]\n   vCard:\n   X-KARMA-POINTS:95\n   The following is an example of an unrecognized\
    \ vCard property\n   parameter (that uses a \"FLOAT\" value as its default) specified\
    \ on a\n   recognized vCard property, and the equivalent jCard representation\
    \ of\n   that property and property parameter.\n   vCard:\n   GENDER;X-PROBABILITY=0.8:M\n\
    \   jCard:\n   [\"gender\", { \"x-probability\": \"0.8\" }, \"text\", \"M\"]\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This specification defines how vCard data can\
    \ be \"translated\" between\n   two different data formats -- the original text\
    \ format and JSON --\n   with a one-to-one mapping to ensure all the semantic\
    \ data in one\n   format (properties, parameters, and values) are preserved in\
    \ the\n   other.  It does not change the semantic meaning of the underlying\n\
    \   data itself, or impose or remove any security considerations that\n   apply\
    \ to the underlying data.\n   The use of JSON as a format does have its own inherent\
    \ security risks\n   as discussed in Section 7 of [RFC4627].  Even though JSON\
    \ is\n   considered a safe subset of JavaScript, it should be kept in mind\n \
    \  that a flaw in the parser for JSON data could still impose a threat\n   that\
    \ doesn't arise with conventional vCard data.\n   With this in mind when using\
    \ jCard, the parser for JSON data should\n   be aware of the security implications.\
    \  For example, the use of\n   JavaScript's eval() function is only allowed using\
    \ the regular\n   expression in Section 6 of [RFC4627].  A native parser with\
    \ full\n   awareness of the JSON format should be preferred.\n   In addition,\
    \ it is expected that this new format will result in vCard\n   data being more\
    \ widely disseminated (e.g., with use in web\n   applications rather than just\
    \ dedicated \"contact managers\").\n   In all cases, application developers have\
    \ to conform to the semantics\n   of the vCard data as defined by [RFC6350] and\
    \ associated extensions,\n   and all of the security considerations described\
    \ in Section 9 of\n   [RFC6350], or any associated extensions, are applicable.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This document defines a MIME media type for use with\
    \ vCard in JSON\n   data.  This media type SHOULD be used for the transfer of\
    \ calendaring\n   data in JSON.\n   Type name:  application\n   Subtype name:\
    \  vcard+json\n   Required parameters:  none\n   Optional parameters:  \"version\"\
    , as defined for the text/vcard media\n      type in [RFC6350], Section 10.1.\n\
    \   Encoding considerations:  Same as encoding considerations of\n      application/json\
    \ as specified in [RFC4627], Section 6.\n   Security considerations:  See Section\
    \ 6.\n   Interoperability considerations:  This media type provides an\n     \
    \ alternative format for vCard data based on JSON.\n   Published specification:\
    \  This specification.\n   Applications which use this media type:  Applications\
    \ that currently\n      make use of the text/vcard media type can use this as\
    \ an\n      alternative.  Similarly, applications that use the application/\n\
    \      json media type to transfer directory data can use this to further\n  \
    \    specify the content.\n   Fragment identifier considerations:  N/A\n   Additional\
    \ information:\n      Deprecated alias names for this type:  N/A\n      Magic\
    \ number(s):  N/A\n      File extension(s):  N/A\n      Macintosh file type code(s):\
    \  N/A\n   Person & email address to contact for further information:\n      vcarddav@ietf.org\n\
    \   Intended usage:  COMMON\n   Restrictions on usage:  There are no restrictions\
    \ on where this media\n      type can be used.\n   Author:  See the \"Author's\
    \ Address\" section of this document.\n   Change controller:  IETF\n"
- title: 7.1.  GROUP vCard Parameter
  contents:
  - "7.1.  GROUP vCard Parameter\n   IANA has added the \"GROUP\" parameter to the\
    \ \"vCard Parameters\"\n   registry, initialized in Section 10.3.2 of [RFC6350].\
    \  Usage of the\n   \"GROUP\" parameter is further described in Section 3.3.1.2\
    \ of this\n   document.\n   Namespace:  <empty>\n   Parameter name:  GROUP\n \
    \  Purpose:  To simplify the jCard format.\n   Description:  The \"GROUP\" parameter\
    \ is reserved for the exclusive use\n      of the jCard format described in this\
    \ document.  It MUST NOT be\n      used in plain vCard [RFC6350], nor in xCard\
    \ [RFC6351].\n   Format definition:  When converting from jCard to vCard, the\
    \ value of\n      the \"GROUP\" parameter is used as part of the property name.\n\
    \      Therefore, the value is restricted to characters allowed in\n      property\
    \ names, namely ALPHA, DIGIT, and \"-\" characters.  When\n      used, the \"\
    GROUP\" parameter MUST NOT be empty.\n   Example:  As this registration serves\
    \ as a reservation of the \"GROUP\"\n      parameter so that it is not used in\
    \ vCard, there is no applicable\n      vCard example.  Examples of its usage in\
    \ jCard can be found in\n      this document.\n"
- title: 7.2.  UNKNOWN vCard Value Data Type
  contents:
  - "7.2.  UNKNOWN vCard Value Data Type\n   IANA has added the \"UNKNOWN\" value\
    \ data type to the \"vCard Value Data\n   Types\" registry, initialized in Section\
    \ 10.3.3 of [RFC6350].  Usage\n   of the \"UNKNOWN\" type is further described\
    \ in Section 5 of this\n   document.\n   Value name:  UNKNOWN\n   Purpose:  To\
    \ allow preserving property values whose default value\n      type is not known\
    \ during round-tripping between jCard and vCard.\n   Format definition:  (Not\
    \ applicable)\n   Description:  The \"UNKNOWN\" value data type is reserved for\
    \ the\n      exclusive use of the jCard format.  It MUST NOT be used in plain\n\
    \      vCard [RFC6350].\n   Example:  As this registration serves as a reservation\
    \ of the\n      \"UNKNOWN\" type so that it is not used in vCard, there is no\n\
    \      applicable vCard example.  Examples of its usage in jCard can be\n    \
    \  found in this document.\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   The author would like to thank the following for their\
    \ valuable\n   contributions: Cyrus Daboo, Mike Douglass, William Gill, Erwin\
    \ Rehme,\n   Dave Thewlis, Simon Perreault, Michael Angstadt, Peter Saint-Andre,\n\
    \   Bert Greevenbosch, and Javier Godoy.  This specification originated\n   from\
    \ the work of the XML-JSON technical committee of the Calendaring\n   and Scheduling\
    \ Consortium.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [ISO.8601.2000]\n              International Organization\
    \ for Standardization, \"Data\n              elements and interchange formats\
    \ -- Information\n              interchange -- Representation of dates and times\"\
    , ISO\n              8601, December 2000.\n   [ISO.8601.2004]\n              International\
    \ Organization for Standardization, \"Data\n              elements and interchange\
    \ formats -- Information\n              interchange -- Representation of dates\
    \ and times\", ISO\n              8601, December 2004.\n   [RFC2119]  Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [RFC4627]  Crockford, D., \"The application/json\
    \ Media Type for\n              JavaScript Object Notation (JSON)\", RFC 4627,\
    \ July 2006.\n   [RFC5234]  Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n\
    \              Specifications: ABNF\", STD 68, RFC 5234, January 2008.\n   [RFC5646]\
    \  Phillips, A. and M. Davis, \"Tags for Identifying\n              Languages\"\
    , BCP 47, RFC 5646, September 2009.\n   [RFC6350]  Perreault, S., \"vCard Format\
    \ Specification\", RFC 6350,\n              August 2011.\n   [RFC6868]  Daboo,\
    \ C., \"Parameter Value Encoding in iCalendar and\n              vCard\", RFC\
    \ 6868, February 2013.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [JCAL]     Kewisch, P., Daboo, C., and M. Douglass,\
    \ \"jCal: The JSON\n              format for iCalendar\", Work in Progress, December\
    \ 2013.\n   [RFC5545]  Desruisseaux, B., \"Internet Calendaring and Scheduling\n\
    \              Core Object Specification (iCalendar)\", RFC 5545,\n          \
    \    September 2009.\n   [RFC6321]  Daboo, C., Douglass, M., and S. Lees, \"xCal:\
    \ The XML\n              Format for iCalendar\", RFC 6321, August 2011.\n   [RFC6351]\
    \  Perreault, S., \"xCard: vCard XML Representation\", RFC\n              6351,\
    \ August 2011.\n   [calconnect-artifacts]\n              The Calendaring and Scheduling\
    \ Consortium, \"Code Artifacts\n              and Schemas\", <http://www.calconnect.org/artifacts.shtml>.\n"
- title: Appendix A.  ABNF Syntax
  contents:
  - "Appendix A.  ABNF Syntax\n   Below is the ABNF syntax as per [RFC5234] for vCard\
    \ in JSON.  ABNF\n   symbols not described here are taken from [RFC4627].  The\
    \ syntax is\n   non-normative and given for reference only.\n   The numeric section\
    \ numbers given in the comments refer to sections\n   in [RFC6350].  Additional\
    \ semantic restrictions apply, especially\n   regarding the allowed properties\
    \ and subcomponents per component.\n   Details on these restrictions can be found\
    \ in this document and\n   [RFC6350].\n   Additional ABNF syntax may be available\
    \ on the Internet at\n   [calconnect-artifacts].\n   ; A jCard object uses the\
    \ name \"vcard\" and a properties array.\n   ; Restrictions to which properties\
    \ may be specified are to\n   ; be taken from RFC 6350.\n   jcardobject = begin-array\n\
    \                 DQUOTE component-name DQUOTE value-separator\n             \
    \    properties-array\n                 end-array\n   ; A jCard property consists\
    \ of the name string, parameters object,\n   ; type string, and one or more values\
    \ as specified in this document.\n   property = begin-array\n              DQUOTE\
    \ property-name DQUOTE value-separator\n              params-object value-separator\n\
    \              DQUOTE type-name DQUOTE\n              property-value *(value-separator\
    \ property-value)\n              end-array\n   properties-array = begin-array\n\
    \                      [ property *(value-separator property) ]\n            \
    \          end-array\n   ; Property values depend on the type-name. Aside from\
    \ the value types\n   ; mentioned here, extensions may make use of other JSON\
    \ value types.\n   property-value = simple-prop-value / structured-prop-value\n\
    \   simple-prop-value = string / number / true / false\n   structured-prop-value\
    \ =\n       begin-array\n       [ structured-element *(value-separator structured-element)\
    \ ]\n       end-array\n   ; Each structured element may have multiple values if\n\
    \   ; semantically allowed.\n   structured-element = simple-prop-value / structured-multi-prop\n\
    \   structured-multi-prop =\n       begin-array\n       [ simple-prop-value *(value-separator\
    \ simple-prop-value) ]\n       end-array\n   ; The jCard params-object is a JSON\
    \ object that follows the semantic\n   ; guidelines described in this document.\n\
    \   params-object = begin-object\n                   [ params-member *(value-separator\
    \ params-member) ]\n                   end-object\n   params-member = DQUOTE param-name\
    \ DQUOTE name-separator param-value\n   param-value = string / param-multi\n \
    \  param-multi = begin-array\n                 [ string *(value-separator string)\
    \ ]\n                 end-array\n   ; The type MUST be a valid type as described\
    \ by this document. New\n   ; value types can be added by extensions.\n   type-name\
    \ = \"text\" / \"uri\" / \"date\" / \"time\" / \"date-time\" /\n             \
    \  \"boolean\" / \"integer\" / \"float\" / \"utc-offset\" /\n               \"\
    language-tag\" / x-type\n   ; Property, parameter, and type names MUST be lowercase.\
    \ Additional\n   ; semantic restrictions apply as described by this document and\n\
    \   ; RFC 6350.\n   component-name = lowercase-name\n   property-name = lowercase-name\n\
    \   param-name = lowercase-name\n   x-type = lowercase-name\n   lowercase-name\
    \ = 1*(%x61-7A / DIGIT / \"-\")\n"
- title: Appendix B.  Examples
  contents:
  - "Appendix B.  Examples\n   This section contains an example of a vCard object\
    \ with its jCard\n   representation.\n"
- title: 'B.1.  Example: vCard of the Author of RFC 6350'
  contents:
  - 'B.1.  Example: vCard of the Author of RFC 6350

    '
- title: B.1.1.  vCard Data
  contents:
  - "B.1.1.  vCard Data\n   BEGIN:VCARD\n   VERSION:4.0\n   FN:Simon Perreault\n \
    \  N:Perreault;Simon;;;ing. jr,M.Sc.\n   BDAY:--0203\n   ANNIVERSARY:20090808T1430-0500\n\
    \   GENDER:M\n   LANG;PREF=1:fr\n   LANG;PREF=2:en\n   ORG;TYPE=work:Viagenie\n\
    \   ADR;TYPE=work:;Suite D2-630;2875 Laurier;\n    Quebec;QC;G1V 2M2;Canada\n\
    \   TEL;VALUE=uri;TYPE=\"work,voice\";PREF=1:tel:+1-418-656-9254;ext=102\n   TEL;VALUE=uri;TYPE=\"\
    work,cell,voice,video,text\":tel:+1-418-262-6501\n   EMAIL;TYPE=work:simon.perreault@viagenie.ca\n\
    \   GEO;TYPE=work:geo:46.772673,-71.282945\n   KEY;TYPE=work;VALUE=uri:\n    http://www.viagenie.ca/simon.perreault/simon.asc\n\
    \   TZ:-0500\n   URL;TYPE=home:http://nomis80.org\n   END:VCARD\n"
- title: B.1.2.  jCard Data
  contents:
  - "B.1.2.  jCard Data\n   [\"vcard\",\n     [\n       [\"version\", {}, \"text\"\
    , \"4.0\"],\n       [\"fn\", {}, \"text\", \"Simon Perreault\"],\n       [\"n\"\
    ,\n         {},\n         \"text\",\n         [\"Perreault\", \"Simon\", \"\"\
    , \"\", [\"ing. jr\", \"M.Sc.\"]]\n       ],\n       [\"bday\", {}, \"date-and-or-time\"\
    , \"--02-03\"],\n       [\"anniversary\",\n         {},\n         \"date-and-or-time\"\
    ,\n         \"2009-08-08T14:30:00-05:00\"\n       ],\n       [\"gender\", {},\
    \ \"text\", \"M\"],\n       [\"lang\", { \"pref\": \"1\" }, \"language-tag\",\
    \ \"fr\"],\n       [\"lang\", { \"pref\": \"2\" }, \"language-tag\", \"en\"],\n\
    \       [\"org\", { \"type\": \"work\" }, \"text\", \"Viagenie\"],\n       [\"\
    adr\",\n          { \"type\": \"work\" },\n          \"text\",\n          [\n\
    \           \"\",\n           \"Suite D2-630\",\n           \"2875 Laurier\",\n\
    \           \"Quebec\",\n           \"QC\",\n           \"G1V 2M2\",\n       \
    \    \"Canada\"\n          ]\n       ],\n       [\"tel\",\n         { \"type\"\
    : [\"work\", \"voice\"], \"pref\": \"1\" },\n         \"uri\",\n         \"tel:+1-418-656-9254;ext=102\"\
    \n       ],\n       [\"tel\",\n         { \"type\": [\"work\", \"cell\", \"voice\"\
    , \"video\", \"text\"] },\n         \"uri\",\n         \"tel:+1-418-262-6501\"\
    \n       ],\n       [\"email\",\n         { \"type\": \"work\" },\n         \"\
    text\",\n         \"simon.perreault@viagenie.ca\"\n       ],\n       [\"geo\"\
    , { \"type\": \"work\" }, \"uri\", \"geo:46.772673,-71.282945\"],\n       [\"\
    key\",\n         { \"type\": \"work\" },\n         \"uri\",\n         \"http://www.viagenie.ca/simon.perreault/simon.asc\"\
    \n       ],\n       [\"tz\", {}, \"utc-offset\", \"-05:00\"],\n       [\"url\"\
    , { \"type\": \"home\" }, \"uri\", \"http://nomis80.org\"]\n     ]\n   ]\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Philipp Kewisch\n   Mozilla Corporation\n   650 Castro Street,\
    \ Suite 300\n   Mountain View, CA  94041\n   USA\n   EMail: mozilla@kewis.ch\n\
    \   URI:   http://www.mozilla.org/\n"
