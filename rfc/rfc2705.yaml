- title: __initial_text__
  contents:
  - "                 Media Gateway Control Protocol (MGCP)\n                    \
    \          Version 1.0\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: 'IESG NOTE:'
  contents:
  - "IESG NOTE:\n   This document is being published for the information of the\n\
    \   community.  It describes a protocol that is currently being deployed\n   in\
    \ a number of products.  Implementers should be aware of\n   developments in the\
    \ IETF Megaco Working Group and ITF-T SG16 who are\n   currently working on a\
    \ potential successor to this protocol.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes an application programming interface and\
    \ a\n   corresponding protocol (MGCP) for controlling Voice over IP (VoIP)\n \
    \  Gateways from external call control elements. MGCP assumes a call\n   control\
    \ architecture where the call control \"intelligence\" is outside\n   the gateways\
    \ and handled by external call control elements.\n   The document is structured\
    \ in 6 main sections:\n   *  The introduction presents the basic assumptions and\
    \ the relation\n      to other protocols such as H.323, RTSP, SAP or SIP.\n  \
    \ *  The interface section presents a conceptual overview of the MGCP,\n     \
    \ presenting the naming conventions, the usage of the session\n      description\
    \ protocol SDP, and the procedures that compose MGCP:\n      Notifications Request,\
    \ Notification, Create Connection, Modify\n      Connection, Delete Connection,\
    \ AuditEndpoint, AuditConnection and\n      RestartInProgress.\n   *  The protocol\
    \ description section presents the MGCP encodings,\n      which are based on simple\
    \ text formats, and the transmission\n      procedure over UDP.\n   *  The security\
    \ section presents the security requirement of MGCP,\n      and its usage of IP\
    \ security services (IPSEC).\n   *  The event packages section provides an initial\
    \ definition of\n      packages and event names.\n   *  The description of the\
    \ changes made in combining SGCP 1.1 and IPDC\n      to create MGCP 1.0.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction ..............................................\
    \  5\n      1.1.  Relation with the H.323 standards ....................  7\n\
    \      1.2.  Relation with the IETF standards .....................  8\n     \
    \ 1.3.  Definitions ..........................................  9\n   2.  Media\
    \ Gateway Control Interface ...........................  9\n      2.1.  Model\
    \ and naming conventions. ........................ 10\n         2.1.1.  Types\
    \ of endpoints .............................. 10\n            2.1.1.1.  Digital\
    \ channel (DS0) ...................... 11\n            2.1.1.2.  Analog line ................................\
    \ 11\n            2.1.1.3.  Annoucement server access point ............ 12\n\
    \            2.1.1.4.  Interactive Voice Response access point .... 12\n     \
    \       2.1.1.5.  Conference bridge access point ............. 13\n          \
    \  2.1.1.6.  Packet relay ............................... 13\n            2.1.1.7.\
    \  Wiretap access point ....................... 14\n            2.1.1.8.  ATM\
    \ \"trunk side\" interface. ................ 14\n         2.1.2.  Endpoint identifiers\
    \ ............................ 15\n         2.1.3.  Calls and connections ...........................\
    \ 17\n            2.1.3.1.  Names of calls ............................. 20\n\
    \            2.1.3.2.  Names of connections ....................... 20\n     \
    \       2.1.3.3.  Management of resources, attributes of ..... 20\n          \
    \  2.1.3.4.  Special case of local connections .......... 23\n         2.1.4.\
    \  Names of Call Agents and other entities ......... 23\n         2.1.5.  Digit\
    \ maps ...................................... 24\n         2.1.6.  Names of events\
    \ ................................. 26\n      2.2.  Usage of SDP .........................................\
    \ 29\n      2.3.  Gateway Control Commands ............................. 30\n\
    \         2.3.1.  EndpointConfiguration ........................... 32\n     \
    \    2.3.2.  NotificationRequest ............................. 33\n         2.3.3.\
    \  CreateConnection ................................ 38\n         2.3.4.  ModifyConnection\
    \ ................................ 44\n         2.3.5.  DeleteConnection (from\
    \ the Call Agent) .......... 46\n         2.3.6.  DeleteConnection (from the VoIP\
    \ gateway) ........ 51\n         2.3.7.  DeleteConnection (multiple connections,\
    \ from the  51\n         2.3.8.  Audit Endpoint ..................................\
    \ 52\n         2.3.9.  Audit Connection ................................ 55\n\
    \         2.3.10.  Restart in progress ............................ 56\n     \
    \ 2.4.  Return codes and error codes. ........................ 58\n      2.5.\
    \  Reason Codes ......................................... 61\n   3.  Media Gateway\
    \ Control Protocol ............................ 61\n      3.1.  General description\
    \ .................................. 62\n      3.2.  Command Header .......................................\
    \ 62\n         3.2.1.  Command line .................................... 62\n\
    \            3.2.1.1.  Coding of the requested verb ............... 63\n     \
    \       3.2.1.2.  Transaction Identifiers .................... 63\n          \
    \  3.2.1.3.  Coding of the endpoint identifiers and ..... 64\n            3.2.1.4.\
    \  Coding of the protocol version ............. 65\n         3.2.2.  Parameter\
    \ lines ................................. 65\n            3.2.2.1.  Response Acknowledgement\
    \ ................... 68\n            3.2.2.2.  Local connection options ...................\
    \ 68\n            3.2.2.3.  Capabilities ............................... 70\n\
    \            3.2.2.4.  Connection parameters ...................... 71\n     \
    \       3.2.2.5.  Reason Codes ............................... 72\n          \
    \  3.2.2.6.  Connection mode ............................ 73\n            3.2.2.7.\
    \  Coding of event names ...................... 73\n            3.2.2.8.  RequestedEvents\
    \ ............................ 74\n            3.2.2.9.  SignalRequests .............................\
    \ 76\n            3.2.2.10.  ObservedEvent ............................. 76\n\
    \            3.2.2.11.  RequestedInfo ............................. 76\n     \
    \       3.2.2.12.  QuarantineHandling ........................ 77\n          \
    \  3.2.2.13.  DetectEvents .............................. 77\n            3.2.2.14.\
    \  EventStates ............................... 77\n            3.2.2.15.  RestartMethod\
    \ ............................. 78\n            3.2.2.16.  Bearer Information\
    \ ........................ 78\n      3.3.  Format of response headers ...........................\
    \ 78\n      3.4.  Formal syntax description of the protocol ............ 81\n\
    \      3.5.  Encoding of the session description .................. 86\n     \
    \    3.5.1.  Usage of SDP for an audio service ............... 86\n         3.5.2.\
    \  Usage of SDP in a network access service ........ 87\n         3.5.3.  Usage\
    \ of SDP for ATM connections ................ 90\n         3.5.4.  Usage of SDP\
    \ for local connections .............. 91\n      3.6.  Transmission over UDP ................................\
    \ 91\n         3.6.1.  Providing the At-Most-Once functionality ........ 91\n\
    \         3.6.2.  Transaction identifiers and three ways handshake. 92\n     \
    \    3.6.3.  Computing retransmission timers ................. 93\n         3.6.4.\
    \  Piggy backing ................................... 94\n         3.6.5.  Provisional\
    \ responses ........................... 94\n   4.  States, failover and race conditions.\
    \ ..................... 95\n      4.1.  Basic Asumptions .....................................\
    \ 95\n      4.2.  Security, Retransmission, and Detection of Lost ...... 96\n\
    \      4.3.  Race conditions ...................................... 99\n     \
    \    4.3.1.  Quarantine list ................................. 99\n         4.3.2.\
    \  Explicit detection ..............................103\n         4.3.3.  Ordering\
    \ of commands, and treatment of disorder .104\n         4.3.4.  Fighting the restart\
    \ avalanche ..................105\n         4.3.5.  Disconnected Endpoints ..........................107\n\
    \   1.   A \"disconnected\" timer is initialized to a random value, .107\n   2.\
    \   The gateway then waits for either the end of this timer, .107\n   3.   When\
    \ the \"disconnected\" timer elapses, when a command is .107\n   4.   If the \"\
    disconnected\" procedure still left the endpoint ..107\n   5.  Security requirements\
    \ .....................................108\n      5.1.  Protection of media connections\
    \ ......................109\n   6.  Event packages and end point types ........................109\n\
    \      6.1.  Basic packages .......................................110\n     \
    \    6.1.1.  Generic Media Package ...........................110\n         6.1.2.\
    \  DTMF package ....................................112\n         6.1.3.  MF Package\
    \ ......................................113\n         6.1.4.  Trunk Package ...................................114\n\
    \         6.1.5.  Line Package ....................................116\n     \
    \    6.1.6.  Handset emulation package .......................119\n         6.1.7.\
    \  RTP Package .....................................120\n         6.1.8.  Network\
    \ Access Server Package ...................121\n         6.1.9.  Announcement\
    \ Server Package .....................122\n         6.1.10.  Script Package .................................122\n\
    \      6.2.  Basic endpoint types and profiles ....................123\n   7.\
    \  Versions and compatibility ................................124\n      7.1.\
    \  Differences between version 1.0 and draft 0.5 ........124\n      7.2.  Differences\
    \ between draft-04 and draft-05 ............125\n      7.3.  Differences between\
    \ draft-03 and draft-04 ............125\n      7.4.  Differences between draft-02\
    \ and draft-03 ............125\n      7.5.  Differences between draft-01 and draft-02\
    \ ............126\n      7.6.  The making of MGCP from IPDC and SGCP ................126\n\
    \      7.7.  Changes between MGCP and initial versions of SGCP ....126\n   8.\
    \  Security Considerations ...................................128\n   9.  Acknowledgements\
    \ ..........................................128\n   10. References ................................................129\n\
    \   11. Authors' Addresses ........................................130\n   12.\
    \ Appendix A: Proposed \"MoveConnection\" command .............132\n      12.1.\
    \  Proposed syntax modification ........................133\n   13. Full Copyright\
    \ Statement ..................................134\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes an abstract application programming\
    \ interface\n   and a corresponding protocol (MGCP) for controlling Telephony\n\
    \   Gateways from external call control elements called media gateway\n   controllers\
    \ or call agents. A telephony gateway is a network element\n   that provides conversion\
    \ between the audio signals carried on\n   telephone circuits and data packets\
    \ carried over the Internet or over\n   other packet networks.  Example of gateways\
    \ are:\n   *  Trunking gateways, that interface between the telephone network\n\
    \      and a Voice over IP network. Such gateways typically manage a\n      large\
    \ number of digital circuits.\n   *  Voice over ATM gateways, which operate much\
    \ the same way as voice\n      over IP trunking gateways, except that they interface\
    \ to an ATM\n      network.\n   *  Residential gateways, that provide a traditional\
    \ analog (RJ11)\n      interface to a Voice over IP network. Examples of residential\n\
    \      gateways include cable modem/cable set-top boxes, xDSL devices,\n     \
    \ broad-band wireless devices\n   *  Access gateways, that provide a traditional\
    \ analog (RJ11) or\n      digital PBX interface to a Voice over IP network. Examples\
    \ of\n      access gateways include small-scale voice over IP gateways.\n   *\
    \  Business gateways, that provide a traditional digital PBX\n      interface\
    \ or an integrated \"soft PBX\" interface to a Voice over IP\n      network.\n\
    \   *  Network Access Servers, that can attach a \"modem\" to a telephone\n  \
    \    circuit and provide data access to the Internet. We expect that,\n      in\
    \ the future, the same gateways will combine Voice over IP\n      services and\
    \ Network Access services.\n   *  Circuit switches, or packet switches, which\
    \ can offer a control\n      interface to an external call control element.\n\
    \   MGCP assumes a call control architecture where the call control\n   \"intelligence\"\
    \ is outside the gateways and handled by external call\n   control elements. The\
    \ MGCP assumes that these call control elements,\n   or Call Agents, will synchronize\
    \ with each other to send coherent\n   commands to the gateways under their control.\
    \ MGCP does not define a\n   mechanism for synchronizing Call Agents. MGCP is,\
    \ in essence, a\n   master/slave protocol, where the gateways are expected to\
    \ execute\n   commands sent by the Call Agents.  In consequence, this document\n\
    \   specifies in great detail the expected behavior of the gateways, but\n   only\
    \ specify those parts of a call agent implementation, such as\n   timer management,\
    \ that are mandated for proper operation of the\n   protocol.\n   MGCP assumes\
    \ a connection model where the basic constructs are\n   endpoints and connections.\
    \ Endpoints are sources or sinks of data and\n   could be physical or virtual.\
    \ Examples of physical endpoints are:\n   *  An interface on a gateway that terminates\
    \ a trunk connected to a\n      PSTN switch (e.g., Class 5, Class 4, etc.). A\
    \ gateway that\n      terminates trunks is called a trunk gateway.\n   *  An interface\
    \ on a gateway that terminates an analog POTS\n      connection to a phone, key\
    \ system, PBX, etc. A gateway that\n      terminates residential POTS lines (to\
    \ phones) is called a\n      residential gateway.\n   An example of a virtual\
    \ endpoint is an audio source in an audio-\n   content server. Creation of physical\
    \ endpoints requires hardware\n   installation, while creation of virtual endpoints\
    \ can be done by\n   software.\n   Connections may be either point to point or\
    \ multipoint. A point to\n   point connection is an association between two endpoints\
    \ with the\n   purpose of transmitting data between these endpoints. Once this\n\
    \   association is established for both endpoints, data transfer between\n   these\
    \ endpoints can take place. A multipoint connection is\n   established by connecting\
    \ the endpoint to a multipoint session.\n   Connections can be established over\
    \ several types of bearer networks:\n   *  Transmission of audio packets using\
    \ RTP and UDP over a TCP/IP\n      network.\n   *  Transmission of audio packets\
    \ using AAL2, or another adaptation\n      layer, over an ATM network.\n   * \
    \ Transmission of packets over an internal connection, for example\n      the\
    \ TDM backplane or the interconnection bus of a gateway. This is\n      used,\
    \ in particular, for \"hairpin\" connections, connections that\n      terminate\
    \ in a gateway but are immediately rerouted over the\n      telephone network.\n\
    \   For point-to-point connections the endpoints of a connection could be\n  \
    \ in separate gateways or in the same gateway.\n"
- title: 1.1.  Relation with the H.323 standards
  contents:
  - "1.1.  Relation with the H.323 standards\n   MGCP is designed as an internal protocol\
    \ within a distributed system\n   that appears to the outside as a single VoIP\
    \ gateway. This system is\n   composed of a Call Agent, that may or may not be\
    \ distributed over\n   several computer platforms, and of a set of gateways, including\
    \ at\n   least one \"media gateway\" that perform the conversion of media\n  \
    \ signals between circuits and packets,  and at least one \"signalling\n   gateway\"\
    \ when connecting to an SS7 controlled network.  In a typical\n   configuration,\
    \ this distributed gateway system will interface on one\n   side with one or more\
    \ telephony (i.e. circuit) switches, and on the\n   other side with H.323 conformant\
    \ systems, as indicated in the\n   following table:\n    ___________________________________________________________________\n\
    \   | Functional|  Phone     |  Terminating    |  H.323 conformant     |\n   |\
    \ Plane     |  switch    |  Entity         |  systems              |\n   |___________|____________|_________________|_______________________|\n\
    \   | Signaling |  Signaling |  Call agent     |  Signaling exchanges  |\n   |\
    \ Plane     |  exchanges |                 |  with the call agent  |\n   |   \
    \        |  through   |                 |  through H.225/RAS and|\n   |      \
    \     |  SS7/ISUP  |                 |  H.225/Q.931.         |\n   |___________|____________|_________________|_______________________|\n\
    \   |           |            |                 |  Possible negotiation |\n   |\
    \           |            |                 |  of logical channels  |\n   |   \
    \        |            |                 |  and transmission     |\n   |      \
    \     |            |                 |  parameters through   |\n   |         \
    \  |            |                 |  H.245 with the call  |\n   |           |\
    \            |                 |  agent.               |\n   |___________|____________|_________________|_______________________|\n\
    \   |           |            |  Internal       |                       |\n   |\
    \           |            |  synchronization|                       |\n   |   \
    \        |            |  through MGCP   |                       |\n   |___________|____________|_________________|_______________________|\n\
    \   | Bearer    |  Connection|  Telephony      |  Transmission of VOIP |\n   |\
    \ Data      |  through   |  gateways       |  data using RTP       |\n   | Transport\
    \ |  high speed|                 |  directly between the |\n   | Plane     | \
    \ trunk     |                 |  H.323 station and the|\n   |           |  groups\
    \    |                 |  gateway.             |\n   |___________|____________|_________________|_______________________|\n\
    \   In the MGCP model, the gateways focus on the audio signal translation\n  \
    \ function, while the Call Agent handles the signaling and call\n   processing\
    \ functions. As a consequence, the Call Agent implements the\n   \"signaling\"\
    \ layers of the H.323 standard, and presents itself as an\n   \"H.323 Gatekeeper\"\
    \ or as one or more \"H.323 Endpoints\"  to the H.323\n   systems.\n"
- title: 1.2.  Relation with the IETF standards
  contents:
  - "1.2.  Relation with the IETF standards\n   While H.323 is the recognized standard\
    \ for VoIP terminals, the IETF\n   has also produced specifications for other\
    \ types of multi-media\n   applications. These other specifications include:\n\
    \   *  the Session Description Protocol (SDP), RFC 2327,\n   *  the Session Announcement\
    \ Protocol (SAP),\n   *  the Session Initiation Protocol (SIP),\n   *  the Real\
    \ Time Streaming Protocol (RTSP), RFC 2326.\n   The latter three specifications\
    \ are in fact alternative signaling\n   standards that allow for the transmission\
    \ of a session description to\n   an interested party. SAP is used by multicast\
    \ session managers to\n   distribute a multicast session description to a large\
    \ group of\n   recipients, SIP is used to invite an individual user to take part\
    \ in\n   a point-to-point or unicast session, RTSP is used to interface a\n  \
    \ server that provides real time data. In all three cases, the session\n   description\
    \ is described according to SDP; when audio is transmitted,\n   it is transmitted\
    \ through the Real-time Transport Protocol, RTP.\n   The distributed gateway systems\
    \ and MGCP will enable PSTN telephony\n   users to access sessions set up using\
    \ SAP, SIP or RTSP. The Call\n   Agent provides for signaling conversion, according\
    \ to the following\n   table:\n    _____________________________________________________________________\n\
    \   | Functional|  Phone     |  Terminating    |  IETF conforming systems|\n \
    \  | Plane     |  switch    |  Entity         |                         |\n  \
    \ |___________|____________|_________________|_________________________|\n   |\
    \ Signaling |  Signaling |  Call agent     |  Signaling exchanges    |\n   | Plane\
    \     |  exchanges |                 |  with the call agent    |\n   |       \
    \    |  through   |                 |  through SAP, SIP or    |\n   |        \
    \   |  SS7/ISUP  |                 |  RTSP.                  |\n   |___________|____________|_________________|_________________________|\n\
    \   |           |            |                 |  Negotiation of session |\n \
    \  |           |            |                 |  description parameters |\n  \
    \ |           |            |                 |  through SDP (telephony |\n   |\
    \           |            |                 |  gateway terminated but |\n   | \
    \          |            |                 |  passed via the call    |\n   |  \
    \         |            |                 |  agent to and from the  |\n   |   \
    \        |            |                 |  IETF conforming system)|\n   |___________|____________|_________________|_________________________|\n\
    \   |           |            |  Internal       |                         |\n \
    \  |           |            |  synchronization|                         |\n  \
    \ |           |            |  through MGCP   |                         |\n   |___________|____________|_________________|_________________________|\n\
    \   | Bearer    |  Connection|  Telephony      |  Transmission of VoIP   |\n \
    \  | Data      |  through   |  gateways       |  data using RTP,        |\n  \
    \ | Transport |  high speed|                 |  directly between the   |\n   |\
    \ Plane     |  trunk     |                 |  remote IP end system   |\n   | \
    \          |  groups    |                 |  and the gateway.       |\n   |___________|____________|_________________|_________________________|\n\
    \   The SDP standard has a pivotal status in this architecture. We will\n   see\
    \ in the following description that we also use it to carry session\n   descriptions\
    \ in MGCP.\n"
- title: 1.3.  Definitions
  contents:
  - "1.3.  Definitions\n   Trunk: A communication channel between two switching systems.\
    \ E.g., a\n   DS0 on a T1 or E1 line.\n"
- title: 2.  Media Gateway Control Interface
  contents:
  - "2.  Media Gateway Control Interface\n   The interface functions provide for connection\
    \ control and endpoint\n   control. Both use the same system model and the same\
    \ naming\n   conventions.\n"
- title: 2.1.  Model and naming conventions
  contents:
  - "2.1.  Model and naming conventions\n   The MGCP assumes a connection model where\
    \ the basic constructs are\n   endpoints and connections. Connections are grouped\
    \ in calls. One or\n   more connections can belong to one call. Connections and\
    \ calls are\n   set up at the initiative of one or several Call Agents.\n"
- title: 2.1.1.  Types of endpoints
  contents:
  - "2.1.1.  Types of endpoints\n   In the introduction, we presented several classes\
    \ of gateways.  Such\n   classifications, however, can be misleading.  Manufacturers\
    \ can\n   arbitrarily decide to provide several types of services in a single\n\
    \   packaging.  A single product could well, for example, provide some\n   trunk\
    \ connections to telephony switches, some primary rate\n   connections and some\
    \ analog line interfaces, thus sharing the\n   characteristics of what we described\
    \ in the introduction as\n   \"trunking\", \"access\" and \"residential\" gateways.\
    \   MGCP does not make\n   assumptions about such groupings.  We simply assume\
    \ that media\n   gateways support collections of endpoints.  The type of the endpoint\n\
    \   determines its functionalities. Our analysis, so far, has led us to\n   isolate\
    \ the following basic endpoint types:\n   *    Digital channel (DS0),\n   *  \
    \  Analog line,\n   *    Annoucement server access point,\n   *    Interactive\
    \ Voice Response access point,\n   *    Conference bridge access point,\n   *\
    \    Packet relay,\n   *    Wiretap access point,\n   *    ATM \"trunk side\"\
    \ interface.\n   In this section, we will develop the expected behavior of such\
    \ end\n   points.\n   This list is not limitative.  There may be other types of\
    \ endpoints\n   defined in the future, for example test endpoint that could be\
    \ used\n   to check network quality, or frame-relay endpoints that could be used\n\
    \   to managed audio channels multiplexed over a frame-relay virtual\n   circuit.\n"
- title: 2.1.1.1.  Digital channel (DS0)
  contents:
  - "2.1.1.1.  Digital channel (DS0)\n   Digital channels provide an 8Khz*8bit service.\
    \  Such channels are\n   found in trunk and ISDN interfaces.  They are typically\
    \ part of\n   digital multiplexes, such as T1, E1, T3 or E3 interfaces. Media\n\
    \   gateways that support such channels are capable of translating the\n   digital\
    \ signals received on the channel, which may be encoded\n   according to A or\
    \ mu-law, using either the complete set of 8 bits or\n   only 7 of these bits,\
    \ into audio packets.  When the media gateway\n   also supports a NAS service,\
    \ the gateway shall be capable of\n   receiving either audio-encoded data (modem\
    \ connection) or binary data\n   (ISDN connection) and convert them into data\
    \ packets.\n                                         +-------\n              \
    \             +------------+|\n              (channel) ===|DS0 endpoint| --------\
    \ Connections\n                           +------------+|\n                  \
    \                       +-------\n   Media gateways should be able to establish\
    \ several connections\n   between the endpoint and the packet networks, or between\
    \ the endpoint\n   and other endpoints in the same gateway.  The signals originating\n\
    \   from these connections shall be mixed according to the connection\n   \"mode\"\
    , as specified later in this document.  The precise number of\n   connections\
    \ that an endpoint support is a characteristic of the\n   gateway, and may in\
    \ fact vary according with the allocation of\n   resource within the gateway.\n\
    \   In some cases, digital channels are used to carry signalling.  This\n   is\
    \ the case for example of SS7 \"F\" links, or ISDN \"D\" channels.\n   Media gateways\
    \ that support these signalling functions shall be able\n   to send and receive\
    \ the signalling packets to and from a call agent,\n   using the \"back haul\"\
    \ procedures defined by the SIGTRAN working group\n   of the IETF.  Digital channels\
    \ are sometimes used in conjunction with\n   channel associated signalling, such\
    \ as \"MF R2\".  Media gateways that\n   support these signalling functions shall\
    \ be able to detect and\n   produce the corresponding signals, such as for example\
    \ \"wink\" or \"A\",\n   according to the event signalling and reporting procedures\
    \ defined in\n   MGCP.\n"
- title: 2.1.1.2.  Analog line
  contents:
  - "2.1.1.2.  Analog line\n   Analog lines can be used either as a \"client\" interface,\
    \ providing\n   service to a classic telephone unit, or as a \"service\" interface,\n\
    \   allowing the gateway to send and receive analog calls.  When the\n   media\
    \ gateway also supports a NAS service, the gateway shall be\n   capable of receiving\
    \ audio-encoded data (modem connection) and\n   convert them into data packets.\n\
    \                                         +-------\n                        +---------------+|\n\
    \              (line) ===|analog endpoint| -------- Connections\n            \
    \            +---------------+|\n                                         +-------\n\
    \   Media gateways should be able to establish several connections\n   between\
    \ the endpoint and the packet networks, or between the endpoint\n   and other\
    \ endpoints in the same gateway.  The audio signals\n   originating from these\
    \ connections shall be mixed according to the\n   connection \"mode\", as specified\
    \ later in this document.  The precise\n   number of connections that an endpoint\
    \ support is a characteristic of\n   the gateway, and may in fact vary according\
    \ with the allocation of\n   resource within the gateway.  A typical gateway should\
    \ however be\n   able to support two or three connections per endpoint, in order\
    \ to\n   provide services such as \"call waiting\" or \"three ways calling\".\n"
- title: 2.1.1.3.  Annoucement server access point
  contents:
  - "2.1.1.3.  Annoucement server access point\n   An announcement server endpoint\
    \ provides acces to an announcement\n   service. Under requests from the call\
    \ agent, the announcement server\n   will \"play\" a specified announcement. \
    \ The requests from the call\n   agent will follow the event signalling and reporting\
    \ procedures\n   defined in MGCP.\n             +----------------------+\n   \
    \          | Announcement endpoint| -------- Connection\n             +----------------------+\n\
    \   A given announcement endpoint is not supposed to support more than\n   one\
    \ connection at a time. If several connections were established to\n   the same\
    \ endpoint, then the same announcements would be played\n   simultaneously over\
    \ all the connections.\n   Connections to an announcement server are typically\
    \ oneway, or \"half\n   duplex\" -- the announcement server is not expected to\
    \ listen the\n   audio signals from the connection.\n"
- title: 2.1.1.4.  Interactive Voice Response access point
  contents:
  - "2.1.1.4.  Interactive Voice Response access point\n   An Interactive Voice Response\
    \ (IVR) endpoint provides acces to an IVR\n   service. Under requests from the\
    \ call agent, the IVR server will\n   \"play\" announcements and tones, and will\
    \ \"listen\" to responses from\n   the user.  The requests from the call agent\
    \ will follow the event\n   signalling and reporting procedures defined in MGCP.\n\
    \                      +-------------+\n                      | IVR endpoint|\
    \ -------- Connection\n                      +-------------+\n   A given IVR endpoint\
    \ is not supposed to support more than one\n   connection at a time. If several\
    \ connections were established to the\n   same endpoint, then the same tones and\
    \ announcements would be played\n   simultaneously over all the connections.\n"
- title: 2.1.1.5.  Conference bridge access point
  contents:
  - "2.1.1.5.  Conference bridge access point\n   A conference bridge endpoint is\
    \ used to provide access to a specific\n   conference.\n                     \
    \                    +-------\n             +--------------------------+|\n  \
    \           |Conference bridge endpoint| -------- Connections\n             +--------------------------+|\n\
    \                                         +-------\n   Media gateways should be\
    \ able to establish several connections\n   between the endpoint and the packet\
    \ networks, or between the endpoint\n   and other endpoints in the same gateway.\
    \  The signals originating\n   from these connections shall be mixed according\
    \ to the connection\n   \"mode\", as specified later in this document. The precise\
    \ number of\n   connections that an endpoint support is a characteristic of the\n\
    \   gateway, and may in fact vary according with the allocation of\n   resource\
    \ within the gateway.\n"
- title: 2.1.1.6.  Packet relay
  contents:
  - "2.1.1.6.  Packet relay\n   A packet relay endpoint is a specific form of conference\
    \ bridge, that\n   typically only supports two connections.  Packets relays can\
    \ be found\n   in firewalls between a protected and an open network, or in\n \
    \  transcoding servers used to provide interoperation between\n   incompatible\
    \ gateways, for example gateways that do not support\n   compatible compression\
    \ algorithms, or gateways that operate over\n   different transmission networks\
    \ such as IP and ATM.\n                                          +-------\n  \
    \                +---------------------+ |\n                  |Packet relay endpoint|\
    \  2 connections\n                  +---------------------+ |\n              \
    \                            +-------\n"
- title: 2.1.1.7.  Wiretap access point
  contents:
  - "2.1.1.7.  Wiretap access point\n   A wiretap access point provides access to\
    \ a wiretap service,\n   providing either a recording or a life playback of a\
    \ connection.\n                  +-----------------+\n                  | Wiretap\
    \ endpoint| -------- Connection\n                  +-----------------+\n   A given\
    \ wiretap endpoint is not supposed to support more than one\n   connection at\
    \ a time. If several connections were established to the\n   same endpoint, then\
    \ the recording or playback would mix the audio\n   signals received on this connections.\n\
    \   Connections to an wiretap endpoint are typically oneway, or \"half\n   duplex\"\
    \ -- the wiretap server is not expected to signal its presence\n   in a call.\n"
- title: 2.1.1.8.  ATM "trunk side" interface.
  contents:
  - "2.1.1.8.  ATM \"trunk side\" interface.\n   ATM \"trunk side\" endpoints are\
    \ typically found when one or several\n   ATM permanent virtual circuits are used\
    \ as a replacement for the\n   classic \"TDM\" trunks linking switches.  When\
    \ ATM/AAL2 is used,\n   several trunks or channels are multiplexed on a single\
    \ virtual\n   circuit; each of these trunks correspond to a single endpoint.\n\
    \                                         +-------\n                     +------------------+|\n\
    \         (channel) = |ATM trunk endpoint| -------- Connections\n            \
    \         +------------------+|\n                                         +-------\n\
    \   Media gateways should be able to establish several connections\n   between\
    \ the endpoint and the packet networks, or between the endpoint\n   and other\
    \ endpoints in the same gateway.  The signals originating\n   from these connections\
    \ shall be mixed according to the connection\n   \"mode\", as specified later\
    \ in this document.  The precise number of\n   connections that an endpoint support\
    \ is a characteristic of the\n   gateway, and may in fact vary according with\
    \ the allocation of\n   resource within the gateway.\n"
- title: 2.1.2.  Endpoint identifiers
  contents:
  - "2.1.2.  Endpoint identifiers\n   Endpoints identifiers have two components that\
    \ both are case\n   insensitive:\n   *  the domain name of the gateway that is\
    \ managing the endpoint,\n   *  a local name within that gateway,\n   The syntax\
    \ of the local name depends on the type of endpoint being\n   named. However,\
    \ the local name for each of these types is naturally\n   hierarchical, beginning\
    \ with a term which identifies the physical\n   gateway containing the given endpoint\
    \ and ending in a term which\n   specifies the individual endpoint concerned.\
    \ With this in mind,  the\n   following rules for construction and interpretation\
    \ of the Entity\n   Name field for these entity types MUST be supported:\n   1)\
    \ The individual terms of the naming path MUST be separated by a\n      single\
    \ slash (\"/\", ASCII 2F hex).\n   2) The individual terms are character strings\
    \ composed of letters,\n      digits or other printable characters, with the exception\
    \ of\n      characters used as delimitors (\"/\", \"@\"), characters used for\n\
    \      wildcarding (\"*\", \"$\") and white spaces.\n   3) Wild-carding is represented\
    \ either by an asterisk (\"*\") or a\n      dollar sign (\"$\") for the terms\
    \ of the naming path which are to be\n      wild-carded. Thus, if the full naming\
    \ path looks like\n             term1/term2/term3\n      then the Entity Name\
    \ field looks like this depending on which\n      terms are wild-carded:\n   \
    \          */term2/term3 if term1 is wild-carded\n             term1/*/term3 if\
    \ term2 is wild-carded\n             term1/term2/* if term3 is wild-carded\n \
    \            term1/*/* if term2 and term3 are wild-carded,\n              etc.\n\
    \      In each of these examples a dollar sign could have appeared\n      instead\
    \ of an asterisk.\n   4) A term represented by an asterisk is to be interpreted\
    \ as: \"use\n      ALL values of this term known within the scope of the Media\n\
    \      Gateway\".  A term represented by a dollar sign is to be\n      interpreted\
    \ as: \"use ANY ONE value of this term known within the\n      scope of the Media\
    \ Gateway\".  The description of a specific\n      command may add further criteria\
    \ for selection within the general\n      rules given here.\n   If the Media Gateway\
    \ controls multiple physical gateways, the first\n   term of the naming MUST identify\
    \ the physical gateway containing the\n   desired entity.  If the Media Gateway\
    \ controls only a single physical\n   gateway, the first term of the naming string\
    \ MAY identify that\n   physical gateway, depending on local practice.  A local\
    \ name that is\n   composed of only a wildcard character refers to either all\
    \ (*) or any\n   ($) endpoints within the media gateway.\n   In the case of trunking\
    \ gateways, endpoints are trunk circuits\n   linking a gateway to a telephone\
    \ switch. These circuits are typically\n   grouped into a digital multiplex, that\
    \ is connected to the gateway by\n   a physical interface. Such circuits are named\
    \ in three contexts:\n   *  In the ISUP protocol, trunks are grouped into trunk\
    \ groups,\n      identified by the SS7 point codes of the switches that the group\n\
    \      connects. Circuits within a trunk group are identified by a\n      circuit\
    \ number (CIC in ISUP).\n   *  In the gateway configuration files, physical interfaces\
    \ are\n      typically identified by the name of the interface, an arbitrary\n\
    \      text string. When the interface multiplexes several circuits,\n      individual\
    \ circuits are typically identified by a circuit number.\n   *  In MGCP, the endpoints\
    \ are identified by an endpoint identifier.\n   The Call Agents use configuration\
    \ databases to map ranges of circuit\n   numbers within an ISUP trunk group to\
    \ corresponding ranges of\n   circuits in a multiplex connected to a gateway through\
    \ a physical\n   interface. The gateway will be identified, in MGCP, by a domain\
    \ name.\n   The local name will be structured to encode both the name of the\n\
    \   physical interface, for example X35V3+A4, and the circuit number\n   within\
    \ the multiplex connected to the interface, for example 13. The\n   circuit number\
    \ will be separated from the name of the interface by a\n   fraction bar, as in:\n\
    \        X35V3+A4/13\n   Other types of endpoints will use different conventions.\
    \ For example,\n   in gateways were physical interfaces by construction only control\
    \ one\n   circuit, the circuit number will be omitted. The exact syntax of such\n\
    \   names should be specified in the corresponding server specification.\n"
- title: 2.1.3.  Calls and connections
  contents:
  - "2.1.3.  Calls and connections\n   Connections are created on the call agent on\
    \ each endpoint that will\n   be involved in the \"call.\"  In the classic example\
    \ of a connection\n   between two \"DS0\" endpoints (EP1 and EP2), the call agents\n\
    \   controlling the end points will establish two connections (C1 and\n   C2):\n\
    \                 +---+                            +---+\n   (channel1) ===|EP1|--(C1)--...\
    \        ...(C2)--|EP2|===(channel2)\n                 +---+                 \
    \           +---+\n   Each connection will be designated locally by a connection\n\
    \   identifier, and will be characterized by connection attributes.\n   When the\
    \ two endpoints are located on gateways that are managed by\n   the same call\
    \ agent, the creation is done via the three following\n   steps:\n   1) The call\
    \ agent asks the first gateway to \"create a connection\" on\n      the first\
    \ endpoint.  The gateway allocates resources to that\n      connection, and respond\
    \ to the command by providing a \"session\n      description.\"  The session description\
    \ contains the information\n      necessary for a third party to send packets\
    \ towards the newly\n      created connection, such as for example IP address,\
    \ UDP port, and\n      packetization parameters.\n   2) The call agent then asks\
    \ the second gateway to \"create a\n      connection\" on the second endpoint.\
    \  The command carries the\n      \"session description\" provided by the first\
    \ gateway. The gateway\n      allocates resources to that connection, and respond\
    \ to the command\n      by providing its own \"session description.\"\n   3) The\
    \ call agent uses a \"modify connection\" command to provide this\n      second\
    \ \"session description\" to the first endpoint.  Once this is\n      done, communication\
    \ can proceed in both directions.\n   When the two endpoints are located on gateways\
    \ that are managed by\n   the different call agents, these two call agents shall\
    \ exchange\n   information through a call-agent to call-agent signalling protocol,\n\
    \   in order to synchronize the creation of the connection on the two\n   endpoints.\n\
    \   Once established, the connection parameters can be modified at any\n   time\
    \ by a \"modify connection\" command.  The call agent may for\n   example instruct\
    \ the gateway to change the compression algorithm used\n   on a connection, or\
    \ to modify the IP address and UDP port to which\n   data should be sent, if a\
    \ connection is \"redirected.\"\n   The call agent removes a connection by sending\
    \ to the gateway a\n   \"delete connection\" command.  The gateway may also, under\
    \ some\n   circumstances, inform a gateway that a connection could not be\n  \
    \ sustained.\n   The following diagram provides a view of the states of a connection,\n\
    \   as seen from the gateway:\n             Create connection\n              \
    \  received\n                    |\n                    V\n           +-------------------+\n\
    \           |resource allocation|-(failed)-+\n           +-------------------+\
    \          |\n                    |           (connection refused)\n         \
    \     (successful)\n                    |\n                    v\n       +----------->+\n\
    \       |            |\n       |   +-------------------+\n       |   |  remote\
    \ session   |\n       |   |   description     |----------(yes)--------+\n    \
    \   |   |    available ?    |                       |\n       |   +-------------------+\
    \                       |\n       |            |                             \
    \     |\n       |          (no)                                 |\n       |  \
    \          |                                  |\n       |      +-----------+ \
    \                        +------+\n       | +--->| half open |------> Delete \
    \  <-------| open |<----------+\n       | |    |  (wait)   |      Connection \
    \        |(wait)|           |\n       | |    +-----------+       received    \
    \      +------+           |\n       | |          |                 |         \
    \     |                 |\n       | |   Modify Connection        |         Modify\
    \ Connection      |\n       | |      received              |            received\
    \            |\n       | |          |                 |                |     \
    \          |\n       | | +--------------------+     |       +--------------------+\
    \   |\n       | | |assess modification |     |       |assess modification |  \
    \ |\n       | | +--------------------+     |       +--------------------+   |\n\
    \       | |    |             |         |          |             |       |\n  \
    \     | |(failed)     (successful)   |      (failed)     (successful) |\n    \
    \   | |    |             |         |          |             |       |\n      \
    \ | +<---+             |         |          +-------------+-------+\n       |\
    \                    |         |\n       +<-------------------+         |\n  \
    \                                    |\n                             +-----------------+\n\
    \                             | Free connection |\n                          \
    \   | resources.      |\n                             | Report.         |\n  \
    \                           +-----------------+\n                            \
    \          |\n                                      V\n"
- title: 2.1.3.1.  Names of calls
  contents:
  - "2.1.3.1.  Names of calls\n   One of the attributes of each connection is the\
    \ \"call identifier.\"\n   Calls are identified by unique identifiers, independent\
    \ of the\n   underlying platforms or agents. These identifiers are created by\
    \ the\n   Call Agent. They are treated in MGCP as unstructured octet strings.\n\
    \   Call identifiers are expected to be unique within the system, or at a\n  \
    \ minimum, unique within the collection of Call Agents that control the\n   same\
    \ gateways. When a Call Agent builds several connections that\n   pertain to the\
    \ same call, either on the same gateway or in different\n   gateways, these connections\
    \ that belong to the same call share the\n   same call-id.  This identifier can\
    \ then be used by accounting or\n   management procedures, which are outside the\
    \ scope of MGCP.\n"
- title: 2.1.3.2.  Names of connections
  contents:
  - "2.1.3.2.  Names of connections\n   Connection identifiers are created by the\
    \ gateway when it is\n   requested to create a connection. They identify the connection\
    \ within\n   the context of an endpoint. They are treated in MGCP as unstructured\n\
    \   octet strings.  The gateway should make sure that a proper waiting\n   period,\
    \ at least 3 minutes, elapses between the end of a connection\n   that used this\
    \ identifier and its use in a new connection for the\n   same endpoint.  (Gateways\
    \ may decide to use identifiers that are\n   unique within the context of the\
    \ gateway.)\n"
- title: 2.1.3.3.  Management of resources, attributes of connections
  contents:
  - "2.1.3.3.  Management of resources, attributes of connections\n   Many types of\
    \ resources will be associated to a connection, such as\n   specific signal processing\
    \ functions or packetization functions.\n   Generally, these resources fall in\
    \ two categories:\n   1) Externally visible resources, that affect the format\
    \ of \"the bits\n      on the network\" and must be communicated to the second\
    \ endpoint\n      involved in the connection.\n   2) Internal resources, that\
    \ determine which signal is being sent over\n      the connection and how the\
    \ received signals are processed by the\n      endpoint.\n   The resources allocated\
    \ to a connection, and more generally the\n   handling of the connection, are\
    \ chosen by the gateway under\n   instructions from the call agent.  The call\
    \ agent will provide these\n   instructions by sending two set of parameters to\
    \ the gateway:\n   1) The local directives instruct the gateway on the choice\
    \ of\n      resources that should be used for a connection,\n   2) When available,\
    \ the \"session description\" provided by the other\n      end of the connection.\n\
    \   The local directives specify such parameters as the mode of the\n   connection\
    \ (e.g. send only, send-receive), preferred coding or\n   packetization methods,\
    \ usage of echo cancellation or silence\n   suppression.  (A detailed list can\
    \ be found in the specification of\n   the LocalConnectionOptions parameter of\
    \ the CreateConnection\n   command.) For each of these parameters, the call agent\
    \ can either\n   specify a value, a range of value, or no value at all.  This\
    \ allow\n   various implementations to implement various level of control, from\
    \ a\n   very tight control where the call agent specifies minute details of\n\
    \   the connection handling to a very loose control where the call agent\n   only\
    \ specifies broad guidelines, such as the maximum bandwidth, and\n   let the gateway\
    \ choose the detailed values.\n   Based on the value of the local directives,\
    \ the gateway will\n   determine the resources allocated to the connection.  When\
    \ this is\n   possible, the gateway will choose values that are in line with the\n\
    \   remote session description - but there is no absolute requirement\n   that\
    \ the parameters be exactly the same.\n   Once the resource have been allocated,\
    \ the gateway will compose a\n   \"session description\" that describes the way\
    \ it intends to receive\n   packets.  Note that the session description may in\
    \ some cases present\n   a range of values.  For example, if the gateway is ready\
    \ to accept\n   one of several compression algorithm, it can provide a list of\
    \ these\n   accepted algorithms.\n                 Local Directives\n        \
    \        (from call agent 1)\n                        |\n                    \
    \    V\n                 +-------------+\n                 | resources   |\n \
    \                | allocation  |\n                 | (gateway 1) |\n         \
    \        +-------------+\n                   |         |\n                   V\
    \         |\n                 Local       |\n              Parameters     V\n\
    \                   |      Session\n                   |    Description      \
    \         Local Directives\n                   |         |                   (from\
    \ call agent 2)\n                   |         +---> Transmission----+      |\n\
    \                   |                (CA to CA)     |      |\n               \
    \    |                               V      V\n                   |          \
    \                 +-------------+\n                   |                      \
    \     | resources   |\n                   |                           | allocation\
    \  |\n                   |                           | (gateway 2) |\n       \
    \            |                           +-------------+\n                   |\
    \                               |      |\n                   |               \
    \                |      V\n                   |                              \
    \ |    Local\n                   |                               |  Parameters\n\
    \                   |                            Session\n                   |\
    \                          Description\n                   |         +---- Transmission<---+\n\
    \                   |         |      (CA to CA)\n                   V        \
    \ V\n                 +-------------+\n                 | modification|\n    \
    \             | (gateway 1) |\n                 +-------------+\n            \
    \       |\n                   V\n                 Local\n              Parameters\n\
    \      -- Information flow: local directives & session descriptions --\n"
- title: 2.1.3.4.  Special case of local connections
  contents:
  - "2.1.3.4.  Special case of local connections\n   Large gateways include a large\
    \ number of endpoints which are often of\n   different types.  In some networks,\
    \ we may often have to set-up\n   connections between endpoints that are located\
    \ within the same\n   gateway.  Examples of such connections may be:\n   *  Connecting\
    \ a trunk line to a wiretap device,\n   *  Connecting a call to an Interactive\
    \ Voice-Response unit,\n   *  Connecting a call to a Conferencing unit,\n   *\
    \  Routing a call from on endpoint to another, something often\n      described\
    \ as a \"hairpin\" connection.\n   Local connections are much simpler to establish\
    \ than network\n   connections. In most cases, the connection will be established\n\
    \   through some local interconnecting device, such as for example a TDM\n   bus.\n\
    \   When two endpoints are managed by the same gateway, it is possible to\n  \
    \ specify the connection in a single command that conveys the name of\n   the\
    \ two endpoints that will be connected.  The command is essentially\n   a \"Create\
    \ Connection\" command which includes the name of the second\n   endpoint in lieu\
    \ of the \"remote session description.\"\n"
- title: 2.1.4.  Names of Call Agents and other entities
  contents:
  - "2.1.4.  Names of Call Agents and other entities\n   The media gateway control\
    \ protocol has been designed to allow the\n   implementation of redundant Call\
    \ Agents, for enhanced network\n   reliability.  This means that there is no fixed\
    \ binding between\n   entities and hardware platforms or network interfaces.\n\
    \   Reliability can be improved by the following precautions:\n   *  Entities\
    \ such as endpoints or Call Agents are identified by their\n      domain name,\
    \ not their network addresses. Several addresses can be\n      associated with\
    \ a domain name. If a command or a response cannot\n      be forwarded to one\
    \ of the network addresses, implementations\n      should retry the transmission\
    \ using another address.\n   *  Entities may move to another platform. The association\
    \ between a\n      logical name (domain name) and the actual platform are kept\
    \ in the\n      domain name service. Call Agents and Gateways should keep track\
    \ of\n      the time-to-live of the record they read from the DNS. They should\n\
    \      query the DNS to refresh the information if the time to live has\n    \
    \  expired.\n   In addition to the indirection provided by the use of domain names\n\
    \   and the DNS, the concept of \"notified entity\" is central to\n   reliability\
    \ and fail-over in MGCP. The \"notified entity\" for an\n   endpoint is the Call\
    \ Agent currently controlling that endpoint. At\n   any point in time, an endpoint\
    \ has one, and only one, \"notified\n   entity\" associated with it, and when\
    \ the endpoint needs to send a\n   command to the Call Agent, it MUST send the\
    \ command to the current\n   \"notified entity\" for which endpoint(s) the command\
    \ pertains. Upon\n   startup, the \"notified entity\" MUST be set to a provisioned\
    \ value.\n   Most commands sent by the Call Agent include the ability to\n   explicitly\
    \ name the \"notified entity\" through the use of a\n   \"NotifiedEntity\" parameter.\
    \ The \"notified entity\" will stay the same\n   until either a new \"NotifiedEntity\"\
    \ parameter is received or the\n   endpoint reboots. If the \"notified entity\"\
    \ for an endpoint is empty\n   or has not been set explicitly, the \"notified\
    \ entity\" will then\n   default to the source address of the last connection\
    \ handling command\n   or notification request received for the endpoint. Auditing\
    \ will thus\n   not change the \"notified entity.\"\n"
- title: 2.1.5.  Digit maps
  contents:
  - "2.1.5.  Digit maps\n   The Call Agent can ask the gateway to collect digits dialed\
    \ by the\n   user.  This facility is intended to be used with residential gateways\n\
    \   to collect the numbers that a user dials; it may also be used with\n   trunking\
    \ gateways and access gateways alike, to collect the access\n   codes, credit\
    \ card numbers and other numbers requested by call\n   control services.\n   An\
    \ alternative procedure is for the gateway to notify the Call Agent\n   of the\
    \ dialed digits, as soon as they are dialed. However, such a\n   procedure generates\
    \ a large number of interactions. It is preferable\n   to accumulate the dialed\
    \ numbers in a buffer, and to transmit them in\n   a single message.\n   The problem\
    \ with this accumulation approach, however, is that it is\n   hard for the gateway\
    \ to predict how many numbers it needs to\n   accumulate before transmission.\
    \ For example, using the phone on our\n   desk, we can dial the following numbers:\n\
    \        _______________________________________________________\n       |  0\
    \                     |  Local operator             |\n       |  00          \
    \          |  Long distance operator     |\n       |  xxxx                  |\
    \  Local extension number     |\n       |  8xxxxxxx              |  Local number\
    \               |\n       |  #xxxxxxx              |  Shortcut to local number\
    \ at|\n       |                        |  other corporate sites      |\n     \
    \  |  *xx                   |  Star services              |\n       |  91xxxxxxxxxx\
    \          |  Long distance number       |\n       |  9011 + up to 15 digits|\
    \  International number       |\n       |________________________|_____________________________|\n\
    \   The solution to this problem is to load the gateway with a digit map\n   that\
    \ correspond to the dial plan. This digit map is expressed using a\n   syntax\
    \ derived from the Unix system command, egrep. For example, the\n   dial plan\
    \ described above results in the following digit map:\n      (0T| 00T|[1-7]xxx|8xxxxxxx|#xxxxxxx|*xx|91xxxxxxxxxx|9011x.T)\n\
    \   The formal syntax of the digit map is described by the DigitMap rule\n   in\
    \ the formal syntax description of the protocol (section 3.4).  A\n   Digit-Map,\
    \ according to this syntax, is defined either by a \"string\"\n   or by a list\
    \ of strings. Each string in the list is an alternative\n   numbering scheme,\
    \ specified either as a set of digits or timers, or\n   as regular expression.\
    \ A gateway that detects digits, letters or\n   timers will:\n   1) Add the event\
    \ parameter code as a token to the end of an internal\n      state variable called\
    \ the \"current dial string\"\n   2) Apply the current dial string to the digit\
    \ map table, attempting a\n      match to each regular expression in the Digit\
    \ Map in lexical order\n   3) If the result is under-qualified (partially matches\
    \ at least one\n      entry in the digit map), do nothing further.\n   If the\
    \ result matches, or is over-qualified (i.e. no further digits\n   could possibly\
    \ produce a match), send the current digit string to the\n   Call Agent. A match,\
    \ in this specification, can be either a \"perfect\n   match,\" exactly matching\
    \ one of the specified alternatives, or an\n   impossible match, which occur when\
    \ the dial string does not match any\n   of the alternative. Unexpected timers,\
    \ for example, can cause\n   \"impossible matches.\"  Both perfect matches and\
    \ impossible matches\n   trigger notification of the accumulated digits.\n   Digit\
    \ maps are provided to the gateway by the Call Agent, whenever\n   the Call Agent\
    \ instructs the gateway to listen for digits.\n"
- title: 2.1.6.  Names of events
  contents:
  - "2.1.6.  Names of events\n   The concept of events and signals is central to MGCP.\
    \ A Call Agent\n   may ask to be notified about certain events occurring in an\
    \ endpoint,\n   e.g.  off-hook events, and a call agent may request certain signals\n\
    \   to be applied to an endpoint, e.g. dial-tone.\n   Events and signals are grouped\
    \ in packages within which they share\n   the same namespace which we will refer\
    \ to as event names in the\n   following.  Packages are groupings of the events\
    \ and signals\n   supported by a particular type of endpoint. For instance, one\
    \ package\n   may support a certain group of events and signals for analog access\n\
    \   lines, and another package may support another group of events and\n   signals\
    \ for video lines. One or more packages may exist for a given\n   endpoint-type.\n\
    \   Event names are case insensitive and are composed of two logical\n   parts,\
    \ a package name and an event name. Both names are strings of\n   letters, hyphens\
    \ and digits, with the restriction that hyphens shall\n   never be the first or\
    \ last characters in a name. Package or event\n   names are not case sensitive\
    \ - values such as \"hu\", \"Hu\", \"HU\" or\n   \"hU\" should be considered equal.\n\
    \   Examples of package names are \"D\" (DTMF), \"M\" (MF), \"T\" (Trunk) or\n\
    \   \"L\" (Line). Examples of event names can be \"hu\" (off hook or \"hang-\n\
    \   up\" transition), \"hf\" (flash hook) or \"0\" (the digit zero).\n   In textual\
    \ representations, the package name, when present, is\n   separated from the event\
    \ name by a slash (\"/\").  The package name is\n   in fact optional. Each endpoint-type\
    \ has a default package associated\n   with it, and if the package name is excluded\
    \ from the event name, the\n   default package name for that endpoint-type is\
    \ assumed. For example,\n   for an analog access line, the following two event\
    \ names are equal:\n   l/dl dial-tone in the line package for an analog access\
    \ line.\n   dl   dial-tone in the line package (default) for an analog access\n\
    \        line.\n   This document defines a basic set of package names and event\
    \ names.\n   Additional package names and event names can be registered with the\n\
    \   IANA. A package definition shall define the name of the package, and\n   the\
    \ definition of each event belonging to the package. The event\n   definition\
    \ shall include the precise name of the event (i.e., the\n   code used in MGCP),\
    \ a plain text definition of the event, and, when\n   appropriate, the precise\
    \ definition of the corresponding signals, for\n   example the exact frequencies\
    \ of audio signal such as dial tones or\n   DTMF tones.\n   In addition, implementers\
    \ can gain experience by using experimental\n   packages. The names of experimental\
    \ packages must start with the two\n   characters \"x-\"; the IANA shall not register\
    \ package names that start\n   with these characters.\n   Digits, or letters,\
    \ are supported in many packages, notably \"DTMF\"\n   and \"MF\". Digits and\
    \ letters are defined by the rules \"Digit\" and\n   \"Letter\" in the definition\
    \ of digit maps. This definition refers to\n   the digits (0 to 9), to the asterisk\
    \ or star (\"*\") and orthotrope,\n   number or pound sign (\"#\"), and to the\
    \ letters \"A\", \"B\", \"C\" and \"D\",\n   as well as the timer indication \"\
    T\". These letters can be combined in\n   \"digit string\" that represent the\
    \ keys that a user punched on a dial.\n   In addition, the letter \"X\" can be\
    \ used to represent all digits, and\n   the sign \"$\" can be used in wildcard\
    \ notations. The need to easily\n   express the digit strings has a consequence\
    \ on the form of event\n   names:\n     An event name that does not denote a digit\
    \ should always contain at\n     least one character that is neither a digit,\
    \ nor one of the letters\n     A, B, C, D, T or X. (Such names should not contain\
    \ the special\n     signs \"*\", \"#\", \"/\" or \"$\".)\n   A Call Agent may\
    \ often have to ask a gateway to detect a group of\n   events. Two conventions\
    \ can be used to denote such groups:\n   *  The wildcard convention can be used\
    \ to detect any event belonging\n      to a package, or a given event in many\
    \ packages, or event any\n      event in any package supported by the gateway.\n\
    \   *  The regular expression Range notation can be used to detect a\n      range\
    \ of digits.\n   The star sign (*) can be used as a wildcard instead of a package\n\
    \   name, and the keyword \"all\" can be used as a wildcard instead of an\n  \
    \ event name:\n     A name such as \"foo/all\" denotes all events in package \"\
    foo\"\n     A name such as \"*/bar\" denotes the event \"bar\" in any package\n\
    \     supported by the gateway\n     The names \"*\" or \"*/all\" denote all events\
    \ supported by the\n     gate way.\n   The call agent can ask a gateway to detect\
    \ a set of digits or letters\n   either by individually describing those letters,\
    \ or by using the\n   \"range\" notation defined in the syntax of digit strings.\
    \ For example,\n   the call agent can:\n     Use the letter \"x\" to denote \"\
    any letter or digit.\"\n     Use the notation \"[0-9#]\" to denote the digits\
    \ 0 to 9 and the pound\n     sign.\n   In some cases, Call Agents will request\
    \ the gateway to generate or\n   detect events on connections rather than on the\
    \ end point itself.\n   For example, gateways may be asked to provide a ringback\
    \ tone on a\n   connection.  When an event shall be applied on a connection, the\
    \ name\n   of the connection is added to the name of the event, using an \"at\"\
    \n   sign (@) as a delimiter, as in:\n     G/rt@0A3F58\n   The wildcard character\
    \ \"*\" (star) can be used to denote \"all\n   connections\". When this convention\
    \ is used, the gateway will generate\n   or detect the event on all the connections\
    \ that are connected to the\n   endpoint. An example of this convention could\
    \ be:\n     R/qa@*\n   The wildcard character \"$\" can be used to denote \"the\
    \ current\n   connection.\" It should only be used by the call agent, when the\
    \ event\n   notification request is \"encapsulated\" within a command creation\
    \ or\n   modification command. When this convention is used, the gateway will\n\
    \   generate or detect the event on the connection that is currently\n   being\
    \ created or modified. An example of this convention is:\n     G/rt@$\n   The\
    \ connection id, or a wildcard replacement, can be used in\n   conjunction with\
    \ the \"all packages\" and \"all events\" conventions.\n   For example, the notation:\n\
    \     */all@*\n   can be used to designate all events on all connections.\n  \
    \ Events and signals are described in packages. The package description\n   must\
    \ provide, for each events, the following informations:\n   *  The description\
    \ of the event and its purpose, which should mean\n      the actual signal that\
    \ is generated by the client (i.e., xx ms FSK\n      tone) as well as the resulting\
    \ user observed result (i.e., MW\n      light on/off).\n   *  The detailed characteristics\
    \ of the event, such as for example\n      frequencies and amplitude of audio\
    \ signals, modulations and\n      repetitions,\n   *  The typical and maximum\
    \ duration of the event.\n   Signals are divided into different types depending\
    \ on their behavior:\n   *  On/off (OO) Once applied, these signals last forever\
    \ until they\n      are turned off.  This may happen either as the result of an\
    \ event\n      or a new SignalRequests (see later).\n   *  Time-out (TO) Once\
    \ applied, these signals last until they are\n      either turned off (by an event\
    \ or SignalRequests) or a signal\n      specific period of time has elapsed. Depending\
    \ on package\n      specifications, a signal that times out may generate an \"\
    operation\n      complete\" event.\n   *  Brief (BR) The duration of these signals\
    \ is so short, that they\n      stop on their own. If an event occurs the signal\
    \ will not stop,\n      however if a new SignalRequests is applied, the signal\
    \ will stop.\n      (Note: this point should be debated.  One could make a case\
    \ that\n      events such as strings of DTMF digits should in fact be allowed\
    \ to\n      complete.)\n      TO signals are normally used to alert the endpoints'\
    \ users, to\n      signal them that they are expected to perform a specific action,\n\
    \      such as hang down the phone (ringing). Transmission of these\n      signals\
    \ should typically be interrupted as soon as the first of\n      the requested\
    \ events has been produced.\n      Package descriptions should describe, for all\
    \ signals, their type\n      (OO, TO, BR). They should also describe the maximum\
    \ duration of\n      the TO signals.\n"
- title: 2.2.  Usage of SDP
  contents:
  - "2.2.  Usage of SDP\n   The Call Agent uses the MGCP to provision the gateways\
    \ with the\n   description of connection parameters such as IP addresses, UDP\
    \ port\n   and RTP profiles. These descriptions will follow the conventions\n\
    \   delineated in the Session Description Protocol which is now an IETF\n   proposed\
    \ standard, documented in RFC 2327.\n   SDP allows for description of multimedia\
    \ conferences. This version\n   limits SDP usage to the setting of audio circuits\
    \ and data access\n   circuits.  The initial session descriptions contain the\
    \ description\n   of exactly one media, of type \"audio\" for audio connections,\
    \ \"nas\"\n   for data access.\n"
- title: 2.3.  Gateway Control Commands
  contents:
  - "2.3.  Gateway Control Commands\n   This section describes the commands of the\
    \ MGCP. The service consists\n   of connection handling and endpoint handling\
    \ commands. There are nine\n   commands in the protocol:\n   *  The Call Agent\
    \ can issue an EndpointConfiguration command to a\n      gateway, instructing\
    \ the gateway about the coding characteristics\n      expected by the \"line-side\"\
    \ of the endpoint.\n   *  The Call Agent can issue a NotificationRequest command\
    \ to a\n      gateway, instructing the gateway to watch for specific events such\n\
    \      as hook actions or DTMF tones on a specified endpoint .\n   *  The gateway\
    \ will then use the Notify command to inform the Call\n      Agent when the requested\
    \ events occur.\n   *  The Call Agent can use the CreateConnection command to\
    \ create a\n      connection that terminates in an \"endpoint\" inside the gateway.\n\
    \   *  The Call Agent can use the ModifyConnection command to change the\n   \
    \   parameters associated to a previously established connection.\n   *  The Call\
    \ Agent can use the DeleteConnection command to delete an\n      existing connection.\
    \ The DeleteConnection command may also be used\n      by a gateway to indicate\
    \ that a connection can no longer be\n      sustained.\n   *  The Call Agent can\
    \ use the AuditEndpoint and AuditConnection\n      commands to audit the status\
    \ of an \"endpoint\" and any connections\n      associated with it. Network management\
    \ beyond the capabilities\n      provided by these commands are generally desirable,\
    \ e.g.\n      information about the status of the gateway. Such capabilities are\n\
    \      expected to be supported by the use of the Simple Network\n      Management\
    \ Protocol (SNMP) and definition of a MIB which is\n      outside the scope of\
    \ this specification.\n   *  The Gateway can use the RestartInProgress command\
    \ to notify the\n      Call Agent that the gateway, or a group of endpoints managed\
    \ by\n      the gateway, is being taken out of service or is being placed back\n\
    \      in service.\n   These services allow a controller (normally, the Call Agent)\
    \ to\n   instruct a gateway on the creation of connections that terminate in\n\
    \   an \"endpoint\" attached to the gateway, and to be informed about\n   events\
    \ occurring at the endpoint. An endpoint may be for example:\n   *  A specific\
    \ trunk circuit, within a trunk group terminating in a\n      gateway,\n   * \
    \ A specific announcement handled by an announcement server.\n   Connections are\
    \ grouped into \"calls\". Several connections, that may\n   or may not belong\
    \ to the same call, can terminate in the same\n   endpoint .  Each connection\
    \ is qualified by a \"mode\" parameter, which\n   can be set to \"send only\"\
    \ (sendonly), \"receive only\" (recvonly),\n   \"send/receive\" (sendrecv), \"\
    conference\" (confrnce), \"data\",\n   \"inactive\" (inactive), \"loopback\",\
    \ \"continuity test\" (conttest),\n   \"network loop back\" (netwloop) or \"network\
    \ continuity test\"\n   (netwtest).\n   The handling of the audio signals received\
    \ on these connections is\n   determined by the mode parameters:\n   *  Audio\
    \ signals received in data packets through connections in\n      \"receive\",\
    \ \"conference\" or \"send/receive\" mode are mixed and sent\n      to the endpoint.\n\
    \   *  Audio signals originating from the endpoint are transmitted over\n    \
    \  all the connections whose mode is \"send\", \"conference\" or\n      \"send/receive.\"\
    \n   *  In addition to being sent to the endpoint, audio signals received\n  \
    \    in data packets through connections in \"conference\" mode are\n      replicated\
    \ to all the other connections whose mode is\n      \"conference.\"\n   The \"\
    loopback\" and \"continuity test\" modes are used during\n   maintenance and continuity\
    \ test operations. There are two flavors of\n   continuity test, one specified\
    \ by ITU and one used in the US. In the\n   first case, the test is a loopback\
    \ test. The originating switch will\n   send a tone (the go tone) on the bearer\
    \ circuit and expect the\n   terminating switch to loopback the circuit. If the\
    \ originating switch\n   sees the same tone returned (the return tone), the COT\
    \ has passed. If\n   not, the COT has failed. In the second case, the go and return\
    \ tones\n   are different. The originating switch sends a certain go tone. The\n\
    \   terminating switch detects the go tone, it asserts a different return\n  \
    \ tone in the backwards direction. When the originating switch detects\n   the\
    \ return tone, the COT is passed. If the originating switch never\n   detects\
    \ the return tone, the COT has failed.\n   If the mode is set to \"loopback\"\
    , the gateway is expected to return\n   the incoming signal from the endpoint\
    \ back into that same endpoint.\n   This procedure will be used, typically, for\
    \ testing the continuity of\n   trunk circuits according to the ITU specifications.\n\
    \   If the mode is set to \"continuity test\", the gateway is informed that\n\
    \   the other end of the circuit has initiated a continuity test\n   procedure\
    \ according to the GR specification. The gateway will place\n   the circuit in\
    \ the transponder mode required for dual-tone continuity\n   tests.\n   If the\
    \ mode is set to \"network loopback\", the audio signals received\n   from the\
    \ connection will be echoed back on the same connection.\n   If the mode is set\
    \ to \"network continuity test\", the gateway will\n   process the packets received\
    \ from the connection according to the\n   transponder mode required for dual-tone\
    \ continuity test, and send the\n   processed signal back on the connection.\n"
- title: 2.3.1.  EndpointConfiguration
  contents:
  - "2.3.1.  EndpointConfiguration\n   The EndpointConfiguration commands are used\
    \ to specify the encoding\n   of the signals that will be received by the endpoint.\
    \  For example,\n   in certain international telephony configurations, some calls\
    \ will\n   carry mu-law encoded audio signals, while other will use A-law.  The\n\
    \   Call Agent will use the EndpointConfiguration command to pass this\n   information\
    \ to the gateway. The configuration may vary on a call by\n   call basis, but\
    \ can also be used in the absence of any connection.\n           ReturnCode\n\
    \           <-- EndpointConfiguration( EndpointId,\n                         \
    \             BearerInformation)\n   EndpointId is the name for the endpoint in\
    \ the gateway where\n   EndpointConfiguration executes, as defined in section\
    \ 2.1.1.  The\n   \"any of\" wildcard convention shall not be used.  If the \"\
    all of\"\n   wildcard convention is used, the command applies to all the endpoint\n\
    \   whose name matches the wildcard.\n   BearerInformation is a parameter defining\
    \ the coding of the data\n   received from the line side.  These information is\
    \ encoded as a list\n   of sub-parameters.  The only sub-parameter defined in\
    \ this version of\n   the specification is the encoding method, whose values can\
    \ be set to\n   \"A-law\" and \"mu-law\".\n   ReturnCode is a parameter returned\
    \ by the gateway. It indicates the\n   outcome of the command and consists of\
    \ an integer number optionally\n   followed by commentary.\n"
- title: 2.3.2.  NotificationRequest
  contents:
  - "2.3.2.  NotificationRequest\n   The NotificationRequest commands are used to\
    \ request the gateway to\n   send notifications upon the occurrence of specified\
    \ events in an\n   endpoint.  For example, a notification may be requested for\
    \ when a\n   gateway detects that an endpoint is receiving tones associated with\n\
    \   fax communication.  The entity receiving this notification may decide\n  \
    \ to use a different type of encoding method in the connections bound\n   to this\
    \ endpoint.\n       ReturnCode\n       <-- NotificationRequest( EndpointId,\n\
    \                                [NotifiedEntity,]\n                         \
    \       [RequestedEvents,]\n                                RequestIdentifier,\n\
    \                                [DigitMap,]\n                               \
    \ [SignalRequests,]\n                                [QuarantineHandling,]\n \
    \                               [DetectEvents,]\n                            \
    \    [encapsulated EndpointConfiguration])\n   EndpointId is the name for the\
    \ endpoint in the gateway where\n   NotificationRequest executes, as defined in\
    \ section 2.1.1.\n   NotifiedEntity is an optional parameter that specifies where\
    \ the\n   notifications should be sent. When this parameter is absent, the\n \
    \  notifications should be sent to the originator of the\n   NotificationRequest.\n\
    \   RequestIdentifier is used to correlate this request with the\n   notifications\
    \ that it triggers.\n   RequestedEvents is a list of events that the gateway is\
    \ requested to\n   detect and report. Such events include, for example, fax tones,\n\
    \   continuity tones, or on-hook transition.  To each event is associated\n  \
    \ an action, which can be:\n   *  Notify the event immediately, together with\
    \ the accumulated list\n      of observed events,\n   *  Swap audio,\n   *  Accumulate\
    \ the event in an event buffer, but don't notify yet,\n   *  Accumulate according\
    \ to Digit Map,\n   *  Keep Signal(s) active,\n   *  process the Embedded Notification\
    \ Request,\n   *  Ignore the event.\n   Some actions can be combined.  In particular:\n\
    \   *  The \"swap audio\" action can be combined with \"Notify\",\n      \"Accumulate\"\
    \ and \"Ignore.\"\n   *  The \"keep signal active\" action can be combined with\
    \ \"Notify\",\n      \"Accumulate\", \"Accumulate according to Digit Map\", \"\
    Ignore\" and\n      \"Embedded Notification Request.\"\n   *  The \"Embedded Notification\
    \ Request\" can be combined with\n      \"Accumulate\" and with \"Keep signals\
    \ active.\" It can also be\n      combined with Notify, if the gateway is allowed\
    \ to issue several\n      Notify commands in response to a single Notification\
    \ request.\n   In addition to the requestedEvents parameter specified in the\n\
    \   command, some profiles of MGCP have introduced the concept of\n   \"persistent\
    \ events.\" According to such profiles, the persistent event\n   list is configured\
    \ in the endpoint, by means outside the scope of\n   MGCP. The basic MGCP specification\
    \ does not specify any persistent\n   event.\n   If a persistent event is not\
    \ included in the list of RequestedEvents,\n   and the event occurs, the event\
    \ will be detected anyway, and\n   processed like all other events, as if the\
    \ persistent event had been\n   requested with a Notify action. Thus, informally,\
    \ persistent events\n   can be viewed as always being implicitly included in the\
    \ list of\n   RequestedEvents with an action to Notify, although no glare\n  \
    \ detection, etc., will be performed.\n   Non-persistent events are those events\
    \ explicitly included in the\n   RequestedEvents list. The (possibly empty) list\
    \ of requested events\n   completely replaces the previous list of requested events.\
    \ In\n   addition to the persistent events, only the events specified in the\n\
    \   requested events list will be detected by the endpoint. If a\n   persistent\
    \ event is included in the RequestedEvents list, the action\n   specified will\
    \ then replace the default action associated with the\n   event for the life of\
    \ the RequestedEvents list, after which the\n   default action is restored. For\
    \ example, if \"Ignore off-hook\" was\n   specified, and a new request without\
    \ any off-hook instructions were\n   received, the default \"Notify off-hook\"\
    \ operation then would be\n   restored. A given event MUST NOT appear more than\
    \ once in a\n   RequestedEvents.\n   The gateway will detect the union of the\
    \ persistent events and the\n   requested events. If an event is not specified\
    \ in either list, it\n   will be ignored.\n   The Swap Audio action can be used\
    \ when a gateway handles more than\n   one active connection on an endpoint. This\
    \ will be the case for\n   three-way calling, call waiting, and possibly other\
    \ feature\n   scenarios. In order to avoid the round-trip to the Call Agent when\n\
    \   just changing which connection is attached to the audio functions of\n   the\
    \ endpoint, the NotificationRequest can map an event (usually hook\n   flash,\
    \ but could be some other event) to a local function swap audio,\n   which selects\
    \ the \"next\" connection in a round robin fashion. If\n   there is only one connection,\
    \ this action is effectively a no-op.\n   If signal(s) are desired to start when\
    \ an event being looked for\n   occurs, the \"Embedded NotificationRequest\" action\
    \ can be used. The\n   embedded NotificationRequest may include a new list of\n\
    \   RequestedEvents, SignalRequests and a new digit map as well. The\n   semantics\
    \ of the embedded NotificationRequest is as if a new\n   NotificationRequest was\
    \ just received with the same NotifiedEntity,\n   and RequestIdentifier. When\
    \ the \"Embedded NotificationRequest\" is\n   activated, the \"current dial string\"\
    \ will be cleared; the list of\n   observed events and the quarantine buffer will\
    \ be unaffected.\n   MGCP implementations shall be able to support at least one\
    \ level of\n   embedding.  An embedded NotificationRequest that respects this\n\
    \   limitation shall not contain another Embedded NotificationRequest.\n   DigitMap\
    \ is an optional parameter that allows the Call Agent to\n   provision the gateways\
    \ with a digit map according to which digits\n   will be accumulated. If this\
    \ optional parameter is absent, the\n   previously defined value is retained.\
    \ This parameter must be defined,\n   either explicitly or through a previous\
    \ command, if the\n   RequestedEvent parameters contain an request to \"accumulate\
    \ according\n   to the digit map.\" The collection of these digits will result\
    \ in a\n   digit string. The digit string is initialized to a null string upon\n\
    \   reception of the NotificationRequest, so that a subsequent\n   notification\
    \ only returns the digits that were collected after this\n   request. Digits that\
    \ were accumulated according to the digit map are\n   reported as any other accumulated\
    \ event, in the order in which they\n   occur. It is therefore possible that other\
    \ events be accumulated may\n   be found in between the list of digits.\n   SignalRequests\
    \ is a parameter that contains the set of signals that\n   the gateway is asked\
    \ to apply to the endpoint, such as, for example\n   ringing, or continuity tones.\
    \ Signals are identified by their name,\n   which is an event name, and may be\
    \ qualified by parameters.\n   The action triggered by the SignalRequests is synchronized\
    \ with the\n   collection of events specified in the RequestedEvents parameter.\
    \ For\n   example, if the NotificationRequest mandates \"ringing\" and the event\n\
    \   request ask to look for an \"off-hook\" event, the ringing shall stop\n  \
    \ as soon as the gateway detect an off hook event. The formal\n   definition is\
    \ that the generation of all \"Time Out\" signals shall\n   stop as soon as one\
    \ of the requested events is detected, unless the\n   \"Keep signals active\"\
    \ action is associated to the specified event.\n   The specific definition of\
    \ actions that are requested via these\n   SignalRequests, such as the duration\
    \ of and frequency of a DTMF\n   digit, is out side the scope of MGCP. This definition\
    \ may vary from\n   location to location and hence from gateway to gateway.\n\
    \   The RequestedEvents and SignalRequests refer to the same event\n   definitions.\
    \ In one case, the gateway is asked to detect the\n   occurrence of the event,\
    \ and in the other case it is asked to\n   generate it. The specific events and\
    \ signals that a given endpoint\n   can detect or perform are determined by the\
    \ list of event packages\n   that are supported by that end point.  Each package\
    \ specifies a list\n   of events and actions that can be detected or performed.\
    \  A gateway\n   that is requested to detect or perform an event belonging to\
    \ a\n   package that is not supported by the specified endpoint shall return\n\
    \   an error. When the event name is not qualified by a package name, the\n  \
    \ default package name for the end point is assumed.  If the event name\n   is\
    \ not registered in this default package, the gateway shall return\n   an error.\n\
    \   The Call Agent can send a NotificationRequest whose requested signal\n   list\
    \ is empty. It will do so for example when tone generation should\n   stop.\n\
    \   The optional QuarantineHandling parameter specifies the handling of\n   \"\
    quarantine\" events, i.e. events that have been detected by the\n   gateway before\
    \ the arrival of this NotificationRequest command, but\n   have not yet been notified\
    \ to the Call Agent.  The parameter provides\n   a set of handling options:\n\
    \   *  whether the quarantined events should be processed or discarded\n     \
    \ (the default is to process them.)\n   *  whether the gateway is expected to\
    \ generate at most one\n      notification (step by step), or multiple notifications\
    \ (loop), in\n      response to this request (the default is exactly one.)\n \
    \  When the parameter is absent, the default value is assumed.\n   We should note\
    \ that the quarantine-handling parameter also governs\n   the handling of events\
    \ that were detected but not yet notified when\n   the command is received.\n\
    \   DetectEvents is an optional parameter that specifies a list of events\n  \
    \ that the gateway is requested to detect during the quarantine period.\n   When\
    \ this parameter is absent, the events that should be detected in\n   the quarantine\
    \ period are those listed in the last received\n   DetectEvents list.  In addition,\
    \ the gateway should also detect the\n   events specified in the request list,\
    \ including those for which the\n   \"ignore\" action is specified.\n   Some events\
    \ and signals, such as the in-line ringback or the quality\n   alert, are performed\
    \ or detected on connections terminating in the\n   end point rather than on the\
    \ endpoint itself.  The structure of the\n   event names allow the Call Agent\
    \ to specify the connection (or\n   connections) on which the events should be\
    \ performed or detected.\n   The command may carry an encapsulated EndpointConfiguration\
    \ command,\n   that will apply to the same endpoint.  When this command is present,\n\
    \   the parameters of the EndpointConfiguration command are inserted\n   after\
    \ the normal parameters of the NotificationRequest, with the\n   exception of\
    \ the EndpointId, which is not replicated.\n   The encapsulated EndpointConfiguration\
    \ command shares the fate of the\n   NotificationRequest command.  If the NotificationRequest\
    \ is rejected,\n   the EndpointConfiguration is not executed.\n   ReturnCode is\
    \ a parameter returned by the gateway. It indicates the\n   outcome of the command\
    \ and consists of an integer number optionally\n   followed by commentary. .NH\
    \ 3 Notifications\n   Notifications are sent via the Notify command and are sent\
    \ by the\n   gateway when the observed events occur.\n               ReturnCode\n\
    \               <-- Notify( EndpointId,\n                           [NotifiedEntity,]\n\
    \                           RequestIdentifier,\n                           ObservedEvents)\n\
    \   EndpointId is the name for the endpoint in the gateway which is\n   issuing\
    \ the Notify command, as defined in section 2.1.1. The\n   identifier should be\
    \ a fully qualified endpoint identifier, including\n   the domain name of the\
    \ gateway.  The local part of the name shall not\n   use the wildcard convention.\n\
    \   NotifiedEntity is an optional parameter that identifies the entity to\n  \
    \ which the notifications is sent. This parameter is equal to the last\n   received\
    \ value of the NotifiedEntity parameter.  The parameter is\n   absent if there\
    \ was no such parameter in the triggering request. The\n   notification is sent\
    \ to the \"current notified entity\" or, if no such\n   entity was ever specified,\
    \ to the address from which the request was\n   received.\n   RequestIdentifier\
    \ is parameter that repeats the RequestIdentifier\n   parameter of the NotificationRequest\
    \ that triggered this\n   notification.  It is used to correlate this notification\
    \ with the\n   request that triggered it.\n   ObservedEvents is a list of events\
    \ that the gateway detected. A\n   single notification may report a list of events\
    \ that will be reported\n   in the order in which they were detected. The list\
    \ may only contain\n   the identification of events that were requested in the\n\
    \   RequestedEvents parameter of the triggering NotificationRequest. It\n   will\
    \ contain the events that were either accumulated (but not\n   notified) or treated\
    \ according to digit map (but no match yet), and\n   the final event that triggered\
    \ the detection or provided a final\n   match in the digit map.\n   ReturnCode\
    \ is a parameter returned by the call agent. It indicates\n   the outcome of the\
    \ command and consists of an integer number\n   optionally followed by commentary.\n"
- title: 2.3.3.  CreateConnection
  contents:
  - "2.3.3.  CreateConnection\n   This command is used to create a connection between\
    \ two endpoints.\n            ReturnCode,\n            ConnectionId,\n       \
    \     [SpecificEndPointId,]\n            [LocalConnectionDescriptor,]\n      \
    \      [SecondEndPointId,]\n            [SecondConnectionId]\n            <---\
    \ CreateConnection(CallId,\n                                  EndpointId,\n  \
    \                                [NotifiedEntity,]\n                         \
    \         [LocalConnectionOptions,]\n                                  Mode,\n\
    \                                  [{RemoteConnectionDescriptor |\n          \
    \                          SecondEndpointId}, ]\n                            \
    \      [Encapsulated NotificationRequest,]\n                                 \
    \ [Encapsulated EndpointConfiguration])\n   A connection is defined by its endpoints.\
    \ The input parameters in\n   CreateConnection provide the data necessary to build\
    \ a gateway's\n   \"view\" of a connection.\n   CallId is a globally unique parameter\
    \ that identifies the call (or\n   session) to which this connection belongs.\
    \ Connections that belong to\n   the same call share the same call-id. The call-id\
    \ can be used to\n   identify calls for reporting and accounting purposes. It\
    \ does not\n   affect the handling of connections by the gateway.\n   EndpointId\
    \ is the identifier for the connection endpoint in the\n   gateway where CreateConnection\
    \ executes. The EndpointId can be\n   fully-specified by assigning a value to\
    \ the parameter EndpointId in\n   the function call or it may be under-specified\
    \ by using the \"anyone\"\n   wildcard convention. If the endpoint is underspecified,\
    \ the endpoint\n   identifier will be assigned by the gateway and its complete\
    \ value\n   returned in the SpecificEndPointId parameter of the response.\n  \
    \ The NotifiedEntity is an optional parameter that specifies where the\n   Notify\
    \ or DeleteConnection commands should be sent. If the parameter\n   is absent,\
    \ the Notify or DeleteConnection commands should be sent to\n   the last received\
    \ Notified Entity, or to originator of the\n   CreateConnection command if no\
    \ Notified Entity was ever received for\n   the end point.\n   LocalConnectionOptions\
    \ is a parameter used by the Call Agent to\n   direct the handling of the connection\
    \ by the gateway.  The fields\n   contained in LocalConnectionOptions are the\
    \ following:\n   *  Encoding Method,\n   *  Packetization period,\n   *  Bandwidth,\n\
    \   *  Type of Service,\n   *  Usage of echo cancellation,\n   *  Usage of silence\
    \ suppression or voice activity detection,\n   *  Usage of signal level adaptation\
    \ and noise level reduction, or\n      \"gain control.\"\n   *  Usage of reservation\
    \ service,\n   *  Usage of RTP security,\n   *  Type of network used to carry\
    \ the connection.\n   This set of field can be completed by vendor specific optional\
    \ or\n   mandatory extensions. The encoding of the first three fields, when\n\
    \   they are present, will be compatible with the SDP and RTP profiles:\n   *\
    \  The encoding method shall be specified by using one or several\n      valid\
    \ encoding names, as defined in the RTP AV Profile or\n      registered with the\
    \ IANA.\n   *  The packetization period is encoded as either the length of time\n\
    \      in milliseconds represented by the media in a packet, as specified\n  \
    \    in the \"ptime\" parameter of SDP, or as a range value, specifying\n    \
    \  both the minimum and maximum acceptable packetization periods.\n   *  The bandwidth\
    \ is encoded as either a single value or a range,\n      expressed as an integer\
    \ number of kilobit per seconds.\n   For each of the first three fields, the Call\
    \ Agent has three options:\n   *  It may state exactly one value, which the gateway\
    \ will then use\n      for the connection,\n   *  It may provide a loose specification,\
    \ such as a list of allowed\n      encoding methods or a range of packetization\
    \ periods,\n   *  It may simply provide a bandwidth indication, leaving the choice\n\
    \      of encoding method and packetization period to the gateway.\n   The bandwidth\
    \ specification shall not contradict the specification of\n   encoding methods\
    \ and packetization period. If an encoding method is\n   specified, then the gateway\
    \ is authorized to use it, even if it\n   results in the usage of a larger bandwidth\
    \ than specified.\n   The LocalConnectionOptions parameter may be absent in the\
    \ case of a\n   data call.\n   The Type of Service specifies the class of service\
    \ that will be used\n   for the connection. When the connection is transmitted\
    \ over an IP\n   network, the parameters encodes the 8-bit type of service value\n\
    \   parameter of the IP header. When the Type of Service is not\n   specified,\
    \ the gateway shall use a default or configured value.\n   The gateways can be\
    \ instructed to perform a reservation, for example\n   using RSVP, on a given\
    \ connection.  When a reservation is needed, the\n   call agent will specify the\
    \ reservation profile that should be used,\n   which is either \"controlled load\"\
    \ or \"guaranteed service.\"  The\n   absence of reservation can be indicated\
    \ by asking for the \"best\n   effort\" service, which is the default value of\
    \ this parameter. When\n   reservation has been asked on a connection, the gateway\
    \ will:\n   *  start emitting RSVP \"PATH\" messages if the connection is in\n\
    \      \"send-only\", \"send-receive\", \"conference\", \"network loop back\"\
    \ or\n      \"network continuity test\" mode (if a remote connection descriptor\n\
    \      has been received,)\n   *  start emitting RSVP \"RESV\" messages as soon\
    \ as it receives \"PATH\"\n      messages if the connection is in \"receive-only\"\
    , \"send-receive\",\n      \"conference\", \"network loop back\" or \"network\
    \ continuity test\"\n      mode.\n   The RSVP filters will be deduced from the\
    \ characteristics of the\n   connection. The RSVP resource profiles will be deduced\
    \ from the\n   connection's bandwidth and packetization period.\n   By default,\
    \ the telephony gateways always perform echo cancellation.\n   However, it is\
    \ necessary, for some calls, to turn off these\n   operations.  The echo cancellation\
    \ parameter can have two values,\n   \"on\" (when the echo cancellation is requested)\
    \ and \"off\" (when it is\n   turned off.)\n   The telephony gateways may perform\
    \ gain control, in order to adapt\n   the level of the signal.  However, it is\
    \ necessary, for example for\n   modem calls, to turn off this function.  The\
    \ gain control parameter\n   may either be specified as \"automatic\", or as an\
    \ explicit number of\n   decibels of gain.  The default is to not perform gain\
    \ control, which\n   is equivalent to specifying a gain of 0 decibels.\n   The\
    \ telephony gateways may perform voice activity detection, and\n   avoid sending\
    \ packets during periods of silence.  However, it is\n   necessary, for example\
    \ for modem calls, to turn off this detection.\n   The silence suppression parameter\
    \ can have two values, \"on\" (when the\n   detection is requested) and \"off\"\
    \ (when it is turned off.) The\n   default is \"off.\"\n   The Call agent can\
    \ request the gateway to enable encryption of the\n   audio Packets.  It does\
    \ so by providing an key specification, as\n   specified in RFC 2327. By default,\
    \ encryption is not used.\n   The Call Agent may instruct the gateway to prepare\
    \ the connection on\n   a specified type of network.  The type of network is encoded\
    \ as in\n   the \"connection-field\" parameter of the SDP standard.  Possible\n\
    \   values are IN (Internet), ATM and LOCAL. The parameter is optional;\n   if\
    \ absent, the network is determined by the type of gateway.\n   RemoteConnectionDescriptor\
    \ is the connection descriptor for the\n   remote side of a connection, on the\
    \ other side of the IP network. It\n   includes the same fields as in the LocalConnectionDescriptor,\
    \ i.e.\n   the fields that describe a session according to the SDP standard.\n\
    \   This parameter may have a null value when the information for the\n   remote\
    \ end is not known yet. This occurs because the entity that\n   builds a connection\
    \ starts by sending a CreateConnection to one of\n   the two gateways involved\
    \ in it. For the first CreateConnection\n   issued, there is no information available\
    \ about the other side of the\n   connection. This information may be provided\
    \ later via a\n   ModifyConnection call. In the case of data connections (mode=data),\n\
    \   this parameter describes the characteristics of the data connection.\n   The\
    \ SecondEndpointId can be used instead of the\n   RemoteConnectionDescriptor to\
    \ establish a connection between two\n   endpoints located on the same gateway.\
    \  The connection is by\n   definition a local connection. The SecondEndpointId\
    \ can be fully-\n   specified by assigning a value to the parameter SecondEndpointId\
    \ in\n   the function call or it may be under-specified by using the \"anyone\"\
    \n   wildcard convention. If the secondendpoint is underspecified, the\n   second\
    \ endpoint identifier will be assigned by the gateway and its\n   complete value\
    \ returned in the SecondEndPointId parameter of the\n   response.\n   Mode indicates\
    \ the mode of operation for this side of the connection.\n   The mode are \"send\"\
    , \"receive\", \"send/receive\", \"conference\", \"data\",\n   \"inactive\", \"\
    loopback\", \"continuity test\", \"network loop back\" or\n   \"network continuity\
    \ test.\" The expected handling of these modes is\n   specified in the introduction\
    \ of the \"Gateway Handling Function\"\n   section. Some end points may not be\
    \ capable of supporting all modes.\n   If the command specifies a mode that the\
    \ endpoint cannot support, and\n   error shall be returned.\n   The gateway returns\
    \ a ConnectionId, that uniquely identifies the\n   connection within one endpoint,\
    \ and a LocalConnectionDescriptor,\n   which is a session description that contains\
    \ information about\n   addresses and RTP ports, as defined in SDP. The\n   LocalConnectionDescriptor\
    \ is not returned in the case of data\n   connections. The SpecificEndPointId\
    \ is an optional parameter that\n   identifies the responding endpoint. It can\
    \ be used when the\n   EndpointId argument referred to a \"any of\" wildcard name.\
    \ When a\n   SpecificEndPointId is returned, the Call Agent should use it as the\n\
    \   EndpointId value is successive commands referring to this call.\n   When a\
    \ SecondEndpointId is specified, the command really creates two\n   connections\
    \ that can be manipulated separately through\n   ModifyConnection and DeleteConnection\
    \ commands.  The response to the\n   creation provides a SecondConnectionId parameter\
    \ that identifies the\n   second connection.\n   After receiving a \"CreateConnection\"\
    \ request that did not include a\n   RemoteConnectionDescriptor parameter, a gateway\
    \ is in an ambiguous\n   situation. Because it has exported a LocalConnectionDescriptor\n\
    \   parameter, it can potentially receive packets. Because it has not yet\n  \
    \ received the RemoteConnectionDescriptor parameter of the other\n   gateway,\
    \ it does not know whether the packets that it receives have\n   been authorized\
    \ by the Call Agent. It must thus navigate between two\n   risks, i.e. clipping\
    \ some important announcements or listening to\n   insane data. The behavior of\
    \ the gateway is determined by the value\n   of the Mode parameter:\n   *  If\
    \ the mode was set to ReceiveOnly, the gateway should accept the\n      voice\
    \ signals and transmit them through the endpoint.\n   *  If the mode was set to\
    \ Inactive, Loopback, Continuity Test, the\n      gateway should refuse the voice\
    \ signals.\n   *  If the mode was set to Network Loopback or Network Continuity\n\
    \      Test, the gateway should perform the expected echo or Response.\n   Note\
    \ that the mode values SendReceive, Conference, Data and SendOnly\n   don't make\
    \ sense in this situation. They should be treated as errors,\n   and the command\
    \ should be rejected (Error code 517).\n   The command may optionally contain\
    \ an encapsulated Notification\n   Request command, in which case a RequestIdentifier\
    \ parameter will be\n   present, as well as, optionally, the RequestedEvents DigitMap,\n\
    \   SignalRequests, QuarantineHandling and DetectEvents parameters. The\n   encapsulated\
    \ NotificationRequest is executed simultaneously with the\n   creation of the\
    \ connection. For example, when the Call Agent wants to\n   initiate a call to\
    \ an residential gateway, it should:\n   *  ask the residential gateway to prepare\
    \ a connection, in order to\n      be sure that the user can start speaking as\
    \ soon as the phone goes\n      off hook,\n   *  ask the residential gateway to\
    \ start ringing,\n   *  ask the residential gateway to notify the Call Agent when\
    \ the\n      phone goes off-hook.\n   This can be accomplished in a single CreateConnection\
    \ command, by\n   also transmitting the RequestedEvent parameters for the off\
    \ hook\n   event, and the SignalRequest parameter for the ringing signal.\n  \
    \ When these parameters are present, the creation and the\n   NotificationRequests\
    \ should be synchronized, which means that\n   bothshould be accepted, or both\
    \ refused. In our example, the\n   CreateConnection may be refused if the gateway\
    \ does not have\n   sufficient resources, or cannot get adequate resources from\
    \ the local\n   network access, and the off-hook Notification-Request can be refused\n\
    \   in the glare condition, if the user is already off-hook. In this\n   example,\
    \ the phone should not ring if the connection cannot be\n   established, and the\
    \ connection should not be established if the user\n   is already off hook.\n\
    \   The NotifiedEntity parameter, if present, applies to both the\n   CreateConnection\
    \ and the NotificationRequest command. It defines the\n   new \"notified entity\"\
    \ for the endpoint.\n   The command may carry an encapsulated EndpointConfiguration\
    \ command,\n   that will apply to the same endpoint.  When this command is present,\n\
    \   the parameters of the EndpointConfiguration command are inserted\n   after\
    \ the normal parameters of the CreateConnection with the\n   exception of the\
    \ EndpointId, which is not replicated. The\n   EndpointConfiguration command may\
    \ be encapsulated together with an\n   encapsulated NotificationRequest command.\n\
    \   The encapsulated EndpointConfiguration command shares the fate of the\n  \
    \ CreateConnection command.  If the CreateConnection is rejected, the\n   EndpointConfiguration\
    \ is not executed.\n   ReturnCode is a parameter returned by the gateway. It indicates\
    \ the\n   outcome of the command and consists of an integer number optionally\n\
    \   followed by commentary.\n"
- title: 2.3.4.  ModifyConnection
  contents:
  - "2.3.4.  ModifyConnection\n   This command is used to modify the characteristics\
    \ of a gateway's\n   \"view\" of a connection. This \"view\" of the call includes\
    \ both the\n   local connection descriptors as well as the remote connection\n\
    \   descriptor.\n      ReturnCode,\n      [LocalConnectionDescriptor]\n      \
    \ <--- ModifyConnection(CallId,\n                             EndpointId,\n  \
    \                           ConnectionId,\n                             [NotifiedEntity,]\n\
    \                             [LocalConnectionOptions,]\n                    \
    \         [Mode,]\n                             [RemoteConnectionDescriptor,]\n\
    \                             [Encapsulated NotificationRequest,]\n          \
    \                   [Encapsulated EndpointConfiguration])\n   The parameters used\
    \ are the same as in the CreateConnection command,\n   with the addition of a\
    \ ConnectionId that identifies the connection\n   within the endpoint. This parameter\
    \ is returned by the\n   CreateConnection function, as part of the local connection\n\
    \   descriptor. It uniquely identifies the connection within the context\n   of\
    \ the endpoint.\n   The EndpointId should be a fully qualified endpoint identifier.\
    \  The\n   local name shall not use the wildcard convention.\n   The ModifyConnection\
    \ command can be used to affect parameters of a\n   connection in the following\
    \ ways:\n   *  Provide information about the other end of the connection, through\n\
    \      the RemoteConnectionDescriptor.\n   *  Activate or deactivate the connection,\
    \ by changing the value of\n      the Mode parameter. This can occur at any time\
    \ during the\n      connection, with arbitrary parameter values.\n   *  Change\
    \ the sending parameters of the connection, for example by\n      switching to\
    \ a different coding scheme, changing the packetization\n      period, or modifying\
    \ the handling of echo cancellation.\n   Connections can only be activated if\
    \ the RemoteConnectionDescriptor\n   has been provided to the gateway. The receive\
    \ only mode, however, can\n   be activated without the provision of this descriptor.\n\
    \   The command will only return a LocalConnectionDescriptor if the local\n  \
    \ connection parameters, such as RTP ports, were modified. (Usage of\n   this\
    \ feature is actually for further study.)\n   The command may optionally contain\
    \ an encapsulated Notification\n   Request command, in which case a RequestIdentifier\
    \ parameter will be\n   present, as well as, optionnally, the RequestedEvents\
    \ DigitMap,\n   SignalRequests, QuarantineHandling and DetectEvents parameters.\
    \ The\n   encapsulated NotificationRequest is executed simultaneously with the\n\
    \   modification of the connection. For example, when a connection is\n   accepted,\
    \ the calling gateway should be instructed to place the\n   circuit in send-receive\
    \ mode and to stop providing ringing tones.\n   This can be accomplished in a\
    \ single ModifyConnection command, by\n   also transmitting the RequestedEvent\
    \ parameters, for the on hook\n   event, and an empty SignalRequest parameter,\
    \ to stop the provision of\n   ringing tones.\n   When these parameters are present,\
    \ the modification and the\n   NotificationRequests should be synchronized, which\
    \ means that both\n   should be accepted, or both refused.  The NotifiedEntity\
    \ parameter,\n   if present, applies to both the ModifyConnection and the\n  \
    \ NotificationRequest command.\n   The command may carry an encapsulated EndpointConfiguration\
    \ command,\n   that will apply to the same endpoint.  When this command is present,\n\
    \   the parameters of the EndpointConfiguration command are inserted\n   after\
    \ the normal parameters of the ModifyConnection with the\n   exception of the\
    \ EndpointId, which is not replicated. The\n   EndpointConfiguration command may\
    \ be encapsulated together with an\n   encapsulated NotificationRequest command.\n\
    \   The encapsulated EndpointConfiguration command shares the fate of the\n  \
    \ ModifyConnection command.  If the ModifyConnection is rejected, the\n   EndpointConfiguration\
    \ is not executed.\n   ReturnCode is a parameter returned by the gateway. It indicates\
    \ the\n   outcome of the command and consists of an integer number optionally\n\
    \   followed by commentary.\n"
- title: 2.3.5.  DeleteConnection (from the Call Agent)
  contents:
  - "2.3.5.  DeleteConnection (from the Call Agent)\n   This command is used to terminate\
    \ a connection. As a side effect, it\n   collects statistics on the execution\
    \ of the connection.\n        ReturnCode,\n        Connection-parameters\n   \
    \     <-- DeleteConnection(CallId,\n                             EndpointId,\n\
    \                             ConnectionId,\n                             [Encapsulated\
    \ NotificationRequest,]\n                             [Encapsulated EndpointConfiguration])\n\
    \   The endpoint identifier, in this form of the DeleteConnection\n   command,\
    \ shall be fully qualified.  Wildcard conventions shall not be\n   used.\n   In\
    \ the general case where a connection has two ends, this command has\n   to be\
    \ sent to both gateways involved in the connection. Some\n   connections, however,\
    \ may use IP multicast. In this case, they can be\n   deleted individually.\n\
    \   After the connection has been deleted, any loopback that has been\n   requested\
    \ for the connection should be cancelled. When all\n   connections to an endpoint\
    \ have been deleted, that endpoint should be\n   placed in inactive mode.\n  \
    \ In response to the DeleteConnection command, the gateway returns a\n   list\
    \ of parameters that describe the status of the connection. These\n   parameters\
    \ are:\n   Number of packets sent:\n   The total number of RTP data packets transmitted\
    \ by the sender since\n   starting transmission on this connection. The count\
    \ is not reset if\n   the sender changes its synchronization source identifier\
    \ (SSRC, as\n   defined in RTP), for example as a result of a Modify command.\
    \ The\n   value is zero if the connection was set in \"receive only\" mode.\n\
    \   Number of octets sent:\n   The total number of payload octets (i.e., not including\
    \ header or\n   padding) transmitted in RTP data packets by the sender since starting\n\
    \   transmission on this connection. The count is not reset if the sender\n  \
    \ changes its SSRC identifier, for example as a result of a\n   ModifyConnection\
    \ command. The value is zero if the connection was set\n   in \"receive only\"\
    \ mode.\n   Number of packets received:\n   The total number of RTP data packets\
    \ received by the sender since\n   starting reception on this connection. The\
    \ count includes packets\n   received from different SSRC, if the sender used\
    \ several values. The\n   value is zero if the connection was set in \"send only\"\
    \ mode.\n   Number of octets received:\n   The total number of payload octets\
    \ (i.e., not including header or\n   padding) transmitted in RTP data packets\
    \ by the sender since starting\n   transmission on this connection. The count\
    \ includes packets received\n   from different SSRC, if the sender used several\
    \ values. The value is\n   zero if the connection was set in \"send only\" mode.\n\
    \   Number of packets lost:\n   The total number of RTP data packets that have\
    \ been lost since the\n   beginning of reception. This number is defined to be\
    \ the number of\n   packets expected less the number of packets actually received,\
    \ where\n   the number of packets received includes any which are late or\n  \
    \ duplicates.  The count includes packets received from different SSRC,\n   if\
    \ the sender used several values. Thus packets that arrive late are\n   not counted\
    \ as lost, and the loss may be negative if there are\n   duplicates. The count\
    \ includes packets received from different SSRC,\n   if the sender used several\
    \ values. The number of packets expected is\n   defined to be the extended last\
    \ sequence number received, as defined\n   next, less the initial sequence number\
    \ received. The count includes\n   packets received from different SSRC, if the\
    \ sender used several\n   values. The value is zero if the connection was set\
    \ in \"send only\"\n   mode. This parameter is omitted if the connection was set\
    \ in \"data\"\n   mode.\n   Interarrival jitter:\n   An estimate of the statistical\
    \ variance of the RTP data packet\n   interarrival time measured in milliseconds\
    \ and expressed as an\n   unsigned integer. The interarrival jitter J is defined\
    \ to be the mean\n   deviation (smoothed absolute value) of the difference D in\
    \ packet\n   spacing at the receiver compared to the sender for a pair of packets.\n\
    \   Detailed computation algorithms are found in RFC 1889. The count\n   includes\
    \ packets received from different SSRC, if the sender used\n   several values.\
    \ The value is zero if the connection was set in \"send\n   only\" mode. This\
    \ parameter is omitted if the connection was set in\n   \"data\" mode.\n   Average\
    \ transmission delay:\n   An estimate of the network latency, expressed in milliseconds.\
    \ This\n   is the average value of the difference between the NTP timestamp\n\
    \   indicated by the senders of the RTCP messages and the NTP timestamp\n   of\
    \ the receivers, measured when this messages are received. The\n   average is\
    \ obtained by summing all the estimates, then dividing by\n   the number of RTCP\
    \ messages that have been received. This parameter\n   is omitted if the connection\
    \ was set in \"data\" mode.\n   When the gateway's clock is not synchronized by\
    \ NTP, the latency\n   value can be computed as one half of the round trip delay,\
    \ as\n   measured through RTCP.\n   When the gateway cannot compute the one way\
    \ delay or the round trip\n   delay, the parameter conveys a null value.\n   For\
    \ a detailed definition of these variables, refer to RFC 1889.\n   When the connection\
    \ was set up over an ATM network, the meaning of\n   these parameters may change:\n\
    \   Number of packets sent:  The total number of ATM cells transmitted\n     \
    \ since starting transmission on this connection.\n   Number of octets sent:\n\
    \      The total number of payload octets transmitted in ATM cells.\n   Number\
    \ of packets received:\n      The total number of ATM cells received since starting\
    \ reception on\n      this connection.\n   Number of octets received:\n      The\
    \ total number of payload octets received in ATM cells.\n   Number of packets\
    \ lost:\n      Should be determined as the number of cell losts, or set to zero\n\
    \      if the adaptation layer does not enable the gateway to assess\n      losses.\n\
    \   Interarrival jitter:\n      Should be understood as the interarrival jitter\
    \ between ATM cells.\n   Average transmission delay:\n      The gateway may not\
    \ be able to assess this parameter over an ATM\n      network.  It could simply\
    \ report a null value.\n   When the connection was set up over an LOCAL interconnect,\
    \ the\n   meaning of these parameters is defined as follows:\n   Number of packets\
    \ sent:\n     Not significant.\n   Number of octets sent:\n     The total number\
    \ of payload octets transmitted over the local\n     connection.\n   Number of\
    \ packets received:\n     Not significant.\n   Number of octets received:\n  \
    \   The total number of payload octets received over the connection.\n   Number\
    \ of packets lost:\n     Not significant.  A value of zero is assumed.\n   Interarrival\
    \ jitter:\n     Not significant.  A value of zero is assumed.\n   Average transmission\
    \ delay:\n     Not significant.  A value of zero is assumed.\n   The standard\
    \ set of connection parameters can be extended by the\n   creation of extension\
    \ parameters.\n   The command may optionally contain an encapsulated Notification\n\
    \   Request command, in which case a RequestIdentifier parameter will be\n   present,\
    \ as well as, optionnally, the RequestedEvents DigitMap,\n   SignalRequests, QuarantineHandling\
    \ and DetectEvents parameters. The\n   encapsulated NotificationRequest is executed\
    \ simultaneously with the\n   deletion of the connection. For example, when a\
    \ user hang-up is\n   notified, the gateway should be instructed to delete the\
    \ connection\n   and to start looking for an off hook event.\n   This can be accomplished\
    \ in a single DeleteConnection command, by\n   also transmitting the RequestedEvent\
    \ parameters, for the off hook\n   event, and an empty SignalRequest parameter.\n\
    \   When these parameters are present, the DeleteConnection and the\n   NotificationRequests\
    \ should be synchronized, which means that both\n   should be accepted, or both\
    \ refused.\n   The command may carry an encapsulated EndpointConfiguration command,\n\
    \   that will apply to the same endpoint.  When this command is present,\n   the\
    \ parameters of the EndpointConfiguration command are inserted\n   after the normal\
    \ parameters of the DeleteConnection with the\n   exception of the EndpointId,\
    \ which is not replicated. The\n   EndpointConfiguration command may be encapsulated\
    \ together with an\n   encapsulated NotificationRequest command.\n   The encapsulated\
    \ EndpointConfiguration command shares the fate of the\n   DeleteConnection command.\
    \  If the DeleteConnection is rejected, the\n   EndpointConfiguration is not executed.\n\
    \   ReturnCode is a parameter returned by the gateway. It indicates the\n   outcome\
    \ of the command and consists of an integer number optionally\n   followed by\
    \ commentary.\n"
- title: 2.3.6.  DeleteConnection (from the VoIP gateway)
  contents:
  - "2.3.6.  DeleteConnection (from the VoIP gateway)\n   In some circumstances, a\
    \ gateway may have to clear a connection, for\n   example because it has lost\
    \ the resource associated with the\n   connection, or because it has detected\
    \ that the endpoint no longer is\n   capable or willing to send or receive voice.\
    \ The gateway terminates\n   the connection by using a variant of the DeleteConnection\
    \ command:\n            ReturnCode,\n            <-- DeleteConnection( CallId,\n\
    \                                  EndpointId,\n                             \
    \     ConnectionId,\n                                  Reason-code,\n        \
    \                          Connection-parameters)\n   In addition to the call,\
    \ endpoint and connection identifiers, the\n   gateway will also send the call's\
    \ parameters that would have been\n   returned to the Call Agent in response to\
    \ a DeleteConnection command.\n   The reason code indicates the cause of the disconnection.\n\
    \   ReturnCode is a parameter returned by the call agent. It indicates\n   the\
    \ outcome of the command and consists of an integer number\n   optionally followed\
    \ by commentary.\n"
- title: 2.3.7.  DeleteConnection (multiple connections, from the Call Agent)
  contents:
  - "2.3.7.  DeleteConnection (multiple connections, from the Call Agent)\n   A variation\
    \ of the DeleteConnection function can be used by the Call\n   Agent to delete\
    \ multiple connections at the same time. The command\n   can be used to delete\
    \ all connections that relate to a Call for an\n   endpoint:\n            ReturnCode,\n\
    \            <-- DeleteConnection( CallId,\n                                 \
    \ EndpointId)\n   It can also be used to delete all connections that terminate\
    \ in a\n   given endpoint:\n            ReturnCode,\n            <-- DeleteConnection(\
    \ EndpointId)\n   Finally, Call Agents can take advantage of the hierarchical\
    \ naming\n   structure of endoints to delete all the connections that belong to\
    \ a\n   group of endpoints.  In this case, the \"local name\" component of the\n\
    \   EndpointID will be specified using the \"all value\" wildcarding\n   convention.\
    \ The \"any value\" convention shall not be used.  For\n   example, if endpoints\
    \ names are structured as the combination of a\n   physical interface name and\
    \ a circuit number, as in \"X35V3+A4/13\",\n   the Call Agent may replace the\
    \ circuit number by a wild card\n   character \"*\", as in \"X35V3+A4/*\".  This\
    \ \"wildcard\" command instructs\n   the gateway to delete all the connections\
    \ that where attached to\n   circuits connected to the physical interface \"X35V3+A4\"\
    .\n   After the connections have been deleted, the endpoint should be\n   placed\
    \ in inactive mode. Any loopback that has been requested for the\n   connections\
    \ should be cancelled.\n   This command does not return any individual statistics\
    \ or call\n   parameters.\n   ReturnCode is a parameter returned by the gateway.\
    \ It indicates the\n   outcome of the command and consists of an integer number\
    \ optionally\n   followed by commentary.\n"
- title: 2.3.8.  Audit Endpoint
  contents:
  - "2.3.8.  Audit Endpoint\n   The AuditEndPoint command can be used by the Call\
    \ Agent to find out\n   the status of a given endpoint.\n              ReturnCode,\n\
    \                EndPointIdList|{\n                [RequestedEvents,]\n      \
    \          [DigitMap,]\n                [SignalRequests,]\n                [RequestIdentifier,]\n\
    \                [NotifiedEntity,]\n                [ConnectionIdentifiers,]\n\
    \                [DetectEvents,]\n                [ObservedEvents,]\n        \
    \        [EventStates,]\n                [BearerInformation,]\n              \
    \  [RestartReason,]\n                [RestartDelay,]\n                [ReasonCode,]\n\
    \                [Capabilities]}\n                        <--- AuditEndPoint(EndpointId,\n\
    \                                                 [RequestedInfo])\n   The EndpointId\
    \ identifies the endpoint that is being audited. The\n   \"all of\" wildcard convention\
    \ can be used to start auditing of a group\n   of endpoints. If this convention\
    \ is used, the gateway should return\n   the list of endpoint identifiers that\
    \ match the wildcard in the\n   EndPointIdList parameter. It shall not return\
    \ any parameter specific\n   to one of these endpoints.\n   When a non-wildcard\
    \ EndpointId is specified, the (possibly empty)\n   RequestedInfo parameter describes\
    \ the information that is requested\n   for the EndpointId specified. The following\
    \ endpoint info can be\n   audited with this command:\n   RequestedEvents, DigitMap,\
    \ SignalRequests, RequestIdentifier,\n   NotifiedEntity, ConnectionIdentifiers,\
    \ DetectEvents, ObservedEvents,\n   EventStates, RestartReason, RestartDelay,\
    \ ReasonCode, and\n   Capabilities.\n   The response will in turn include information\
    \ about each of the items\n   for which auditing info was requested:\n   *  RequestedEvents:\
    \ The current value of RequestedEvents the endpoint\n      is using including\
    \ the action associated with each event.\n      Persistent events are included\
    \ in the list.\n   *  DigitMap: the digit map the endpoint is currently using.\n\
    \   *  SignalRequests: A list of the; Time-Out signals that are currently\n  \
    \    active, On/Off signals that are currently \"on\" for the endpoint\n     \
    \ (with or without parameter), and any pending Brief signals. Time-\n      Out\
    \ signals that have timed-out, and currently playing Brief\n      signals are\
    \ not included.\n   *  RequestIdentifier, the RequestIdentifier for the last Notification\n\
    \      Request received by this endpoint (includes NotificationRequest\n     \
    \ encapsulated in Connection handling primitives). If no\n      notification request\
    \ has been received, the value zero will be\n      returned.\n   *  QuarantineHandling,\
    \ the QuarantineHandling for the last\n      NotificationRequest received by this\
    \ endpoint.\n   *  DetectEvents, the list of events that are currently detected\
    \ in\n      quarantine mode.\n   *  NotifiedEntity, the current notified entity\
    \ for the endpoint.\n   * ConnectionIdentifiers, the list of ConnectionIdentifiers\
    \ for all\n      connections that currently exist for the specified endpoint.\n\
    \   *  ObservedEvents: the current list of observed events for the\n      endpoint.\n\
    \   *  EventStates: For events that have auditable states associated with\n  \
    \    them, the event corresponding to the state the endpoint is in,\n      e.g.,\
    \ off-hook if the endpoint is off-hook. The definition of the\n      individual\
    \ events will state if the event in question has an\n      auditable state associated\
    \ with it.\n   *  BearerInformation: the value of the last received\n      BearerInformation\
    \ parameter for this endpoint.\n   *  RestartReason: the value of the restart\
    \ reason parameter in the\n      last RestartInProgress command issued by the\
    \ endpoint, \"restart\"\n      indicating a fully functional endpoint.\n   * \
    \ RestartDelay: the value of the  restart delay parameter if a\n      RestartInProgress\
    \ command was issued by the endpoint at the time\n      of the response, or zero\
    \ if the command would not include this\n      parameter.\n   *  ReasonCode:the\
    \ value of the Reason-Code parameter in the last\n      RestartInProgress or DeleteConnection\
    \ command issued by the\n      gateway for the endpoint, or the special value\
    \ 000 if the\n      endpoint's state is nominal.\n   *  The capabilities for the\
    \ endpoint similar to the\n      LocalConnectionOptions parameter and including\
    \ event packages and\n      connection modes.  If there is a need to specify that\
    \ some\n      parameters, such as e.g., silence suppression, are only compatible\n\
    \      with some\n   *  codecs,  then the gateway will return several capability\
    \ sets:\n         Compression Algorithm: a list of supported codecs. The rest\
    \ of\n         the parameters will apply to all codecs specified in this list.\n\
    \         Packetization Period: A single value or a range may be\n         specified.\n\
    \         Bandwidth: A single value or a range corresponding to the range\n  \
    \       for packetization periods may be specified (assuming no silence\n    \
    \     suppression).\n         Echo Cancellation: Whether echo cancellation is\
    \ supported or\n         not.\n         Silence Suppression: Whether silence suppression\
    \ is supported\n         or not.\n         Type of Service: Whether type of service\
    \ is supported or not.\n         Event Packages: A list of event packages supported.\
    \ The first\n         event package in the list will be the default package.\n\
    \         Modes: A list of supported connection modes.\n   The Call Agent may\
    \ then decide to use the AuditConnection command to\n   obtain further information\
    \ about the connections.\n   If no info was requested and the EndpointId refers\
    \ to a valid\n   endpoint, the gateway simply returns a positive acknowledgement.\n\
    \   If no NotifiedEntity has been specified in the last\n   NotificationRequest,\
    \ the notified entity defaults to the source\n   address of the last NotificationRequest\
    \ command received for this\n   connection.\n   ReturnCode is a parameter returned\
    \ by the gateway. It indicates the\n   outcome of the command and consists of\
    \ an integer number optionally\n   followed by commentary.\n"
- title: 2.3.9.  Audit Connection
  contents:
  - "2.3.9.  Audit Connection\n   The AuditConnection command can be used by the Call\
    \ Agent to retrieve\n   the parameters attached to a connection:\n           \
    \   ReturnCode,\n              [CallId,]\n              [NotifiedEntity,]\n  \
    \            [LocalConnectionOptions,]\n              [Mode,]\n              [RemoteConnectionDescriptor,]\n\
    \              [LocalConnectionDescriptor,]\n              [ConnectionParameters]\n\
    \                        <--- AuditConnection(EndpointId,\n                  \
    \                       ConnectionId,\n                                      \
    \   RequestedInfo)\n   The EndpointId parameter specifies the endpoint that handles\
    \ the\n   connection. The wildcard conventions shall not be used.\n   The ConnectionId\
    \ parameter is the identifier of the audited\n   connection, within the context\
    \ of the specified endpoint.\n   The (possibly empty) RequestedInfo describes\
    \ the information that is\n   requested for the ConnectionId within the EndpointId\
    \ specified. The\n   following connection info can be audited with this command:\n\
    \      CallId, NotifiedEntity, LocalConnectionOptions, Mode,\n      RemoteConnectionDescriptor,\
    \ LocalConnectionDescriptor,\n      ConnectionParameters\n   The AuditConnectionResponse\
    \ will in turn include information about\n   each of the items auditing info was\
    \ requested for:\n   *  CallId, the CallId for the call the connection belongs\
    \ to.\n   *  NotifiedEntity, the current notified entity for the Connection.\n\
    \   *  LocalConnectionOptions, the LocalConnectionOptions that was\n      supplied\
    \ for the connection.\n   *  Mode, the current mode of the connection.\n   * \
    \ RemoteConnectionDescriptor, the RemoteConnectionDescriptor that\n      was supplied\
    \ to the gateway for the connection.\n   *  LocalConnectionDescriptor, the LocalConnectionDescriptor\
    \ the gate-\n      way supplied for the connection.\n   *  ConnectionParameters,\
    \ the current value of the connection\n      parameters for the connection.\n\
    \   If no info was requested and the EndpointId is valid, the gateway\n   simply\
    \ checks that the connection exists, and if so returns a\n   positive acknowledgement.\n\
    \   If no NotifiedEntity has been specified for the connection, the\n   notified\
    \ entity defaults to the source address of the last connection\n   handling command\
    \ received for this connection.\n   ReturnCode is a parameter returned by the\
    \ gateway. It indicates the\n   outcome of the command and consists of an integer\
    \ number optionally\n   followed by commentary.\n"
- title: 2.3.10.  Restart in progress
  contents:
  - "2.3.10.  Restart in progress\n   The RestartInProgress command is used by the\
    \ gateway to signal that\n   An endpoint, or a group of endpoint, is taken in\
    \ or out of service.\n          ReturnCode,\n          [NotifiedEntity]\n    \
    \            <------- RestartInProgress ( EndPointId,\n                      \
    \                       RestartMethod,\n                                     \
    \        [RestartDelay,]\n                                             [Reason-code])\n\
    \   The EndPointId identifies the endpoint that are taken in or out of\n   service.\
    \  The \"all of\" wildcard convention may be used to apply the\n   command to\
    \ a group of endpoint, such as for example all endpoints\n   that are attached\
    \ to a specified interface, or even all endpoints\n   that are attached to a given\
    \ gateway.  The \"any of\" wildcard\n   convention shall not be used.\n   The\
    \ RestartMethod parameter specified the type of restart.  Three\n   values have\
    \ been defined:\n   *  A \"graceful\" restart method indicates that the specified\
    \ endpoints\n      will Be taken out of service after the specified delay. The\n\
    \      established connections are not yet affected, but the Call Agent\n    \
    \  should refrain to establish new connections, and should try to\n      gracefully\
    \ tear down the existing connections.\n   *  A \"forced\" restart method indicates\
    \ that the specified endpoints\n      are taken abruptely out of service. The\
    \ established connections,\n      if any, are lost.\n   *  A \"restart\" method\
    \ indicates that service will be restored on the\n      endpoints after the specified\
    \ \"restart delay.\" There are no\n      connections that are currently established\
    \ on the endpoints.\n   *  A \"disconnected\" method indicates that the endpoint\
    \ has become\n      disconnected and is now trying to establish connectivity.\
    \ The\n      \"restart delay\" specifies the number of seconds the endpoint has\n\
    \      been disconnected. Established connections are not affected.\n   *  A \"\
    cancel-graceful\" method indicates that a gateway is canceling a\n      previously\
    \ issued \"graceful\" restart command.\n   The optional \"restart delay\" parameter\
    \ is expressed as a number of\n   seconds. If the number is absent, the delay\
    \ value should be\n   considered null.  In the case of the \"graceful\" method,\
    \ a null delay\n   indicates that the call agent should simply wait for the natural\n\
    \   termination of the existing connections, without establishing new\n   connections.\
    \ The restart delay is always considered null in the case\n   of the \"forced\"\
    \ method.\n   A restart delay of null for the \"restart\" method indicates that\n\
    \   service has already been restored. This typically will occur after\n   gateway\
    \ startup/reboot.\n   The optional reason code parameter the cause of the restart.\n\
    \   Gateways SHOULD send a \"graceful\" or \"forced\" RestartInProgress\n   message\
    \ as a courtesy to the Call Agent when they are taken out of\n   service, e.g.,\
    \ by being shutdown, or taken out of service by a\n   network management system,\
    \ although the Call Agent cannot rely on\n   always receiving such messages. Gateways\
    \ MUST send a \"restart\"\n   RestartInProgress message with a null delay to their\
    \ Call Agent when\n   they are back in service according to the restart procedure\
    \ specified\n   in Section 4.3.4 - Call Agents can rely on receiving this message.\n\
    \   Also, gateways MUST send a \"disconnected\" RestartInProgress message\n  \
    \ to their current \"notified entity\" according to the \"disconnected\"\n   procedure\
    \ specified in Section 4.3.5.  The \"restart delay\" parameter\n   MUST NOT be\
    \ used with the \"forced\" restart method.\n   The RestartInProgress message will\
    \ be sent to the current notified\n   entity for the EndpointId in question. It\
    \ is expected that a default\n   Call Agent, i.e., notified entity, has been provisioned\
    \ for each\n   endpoint so, after a reboot, the default Call Agent will be the\n\
    \   notified entity for each endpoint. Gateways should take full\n   advantage\
    \ of wild- carding to minimize the number of\n   RestartInProgress messages generated\
    \ when multiple endpoints in a\n   gateway restart and the endpoints are managed\
    \ by the same Call Agent.\n   ReturnCode is a parameter returned by the gateway.\
    \ It indicates the\n   outcome of the command and consists of an integer number\
    \ optionally\n   followed by commentary.\n   A NotifiedEntity may additionally\
    \ be returned with the response from\n   the Call Agent:\n   *  If the response\
    \ indicated success (return code 200 - transaction\n      executed), the restart\
    \ procedure has  completed, and the\n      NotifiedEntity returned is the new\
    \ \"notified entity\" for the\n      endpoint(s).\n   *  If the response from\
    \ the Call Agent indicated an error, the\n      restart procedure is not yet complete,\
    \ and must therefore be\n      initiated again. If a NotifiedEntity parameter\
    \ was returned, it\n      then specifies the new \"notified entity\" for the endpoint(s),\n\
    \      which must consequently be used when retrying the restart\n      procedure.\n"
- title: 2.4.  Return codes and error codes.
  contents:
  - "2.4.  Return codes and error codes.\n   All MGCP commands are acknowledged. The\
    \ acknowledgment carries a\n   return code, which indicates the status of the\
    \ command. The return\n   code is an integer number, for which four ranges of\
    \ values have been\n   defined:\n   *  values between 100 and 199 indicate a provisional\
    \ response,\n   *  values between 200 and 299 indicate a successful completion,\n\
    \   *  values between 400 and 499 indicate a transient error,\n   *  values between\
    \ 500 and 599 indicate a permanent error.\n   The values that have been already\
    \ defined are listed in the following\n   list:\n   100  The transaction is currently\
    \ being executed.  An actual\n        completion message will follow on later.\n\
    \   200  The requested transaction was executed normally.\n   250  The connection\
    \ was deleted.\n   400  The transaction could not be executed, due to a transient\
    \ error.\n   401  The phone is already off hook\n   402  The phone is already\
    \ on hook\n   403  The transaction could not be executed, because the endpoint\
    \ does\n        not have sufficient resources at this time\n   404  Insufficient\
    \ bandwidth at this time\n   500  The transaction could not be executed, because\
    \ the endpoint is\n        unknown.\n   01   The transaction could not be executed,\
    \ because the endpoint is\n        not ready.\n   502  The transaction could not\
    \ be executed, because the endpoint does\n        not have sufficient resources\n\
    \   510  The transaction could not be executed, because a protocol error\n   \
    \     was detected.\n   11   The transaction could not be executed, because the\
    \ command\n        contained an unrecognized extension.\n   512  The transaction\
    \ could not be executed, because the gateway is\n        not equipped to detect\
    \ one of the requested events.\n   513  The transaction could not be executed,\
    \ because the gateway is\n        not equipped to generate one of the requested\
    \ signals.\n   514  The transaction could not be executed, because the gateway\n\
    \        cannot send the specified announcement.\n   515  The transaction refers\
    \ to an incorrect connection-id (may have\n        been already deleted)\n   516\
    \  The transaction refers to an unknown call-id.\n   517  Unsupported or invalid\
    \ mode.\n   518  Unsupported or unknown package.\n   519  Endpoint does not have\
    \ a digit map.\n   520  The transaction could not be executed, because the endpoint\
    \ is\n        \"restarting\".\n   521  Endpoint redirected to another Call Agent.\n\
    \   522  No such event or signal.\n   523  Unknown action or illegal combination\
    \ of actions\n   524  Internal inconsistency in LocalConnectionOptions\n   525\
    \  Unknown extension in LocalConnectionOptions\n   526  Insufficient bandwidth\n\
    \   527  Missing RemoteConnectionDescriptor\n   528  Incompatible protocol version\n\
    \   529  Internal hardware failure\n   530  CAS signaling protocol error.\n  \
    \ 531  failure of a grouping of trunks (e.g. facility failure).\n"
- title: 2.5.  Reason Codes
  contents:
  - "2.5.  Reason Codes\n   Reason-codes are used by the gateway when deleting a connection\
    \ to\n   inform the Call Agent about the reason for deleting the connection.\n\
    \   They may also be used in a RestartInProgress command, to inform the\n   gateway\
    \ of the Restart's reason. The reason code is an integer\n   number, and the following\
    \ values have been defined:\n   000  Endpoint state is nominal. (This code is\
    \ used only in response\n        to audit requests.)\n   900  Endpoint malfunctioning\n\
    \   901  Endpoint taken out of service\n   902  Loss of lower layer connectivity\
    \ (e.g., downstream sync)\n"
- title: 3.  Media Gateway Control Protocol
  contents:
  - "3.  Media Gateway Control Protocol\n   The MGCP implements the media gateway\
    \ control interface as a set of\n   transactions. The transactions are composed\
    \ of a command and a\n   mandatory response. There are eight types of command:\n\
    \   *  CreateConnection\n   *  ModifyConnection\n   *  DeleteConnection\n   *\
    \  NotificationRequest\n   *  Notify\n   *  AuditEndpoint\n   *  AuditConnection\n\
    \   *  RestartInProgress\n   The first four commands are sent by the Call Agent\
    \ to a gateway. The\n   Notify command is sent by the gateway to the Call Agent.\
    \ The gateway\n   may also send a DeleteConnection as defined in 2.3.6. The Call\
    \ Agent\n   may send either of the Audit commands to the gateway.  The Gateway\n\
    \   may send a RestartInProgress command to the Call Agent.\n"
- title: 3.1.  General description
  contents:
  - "3.1.  General description\n   All commands are composed of a Command header,\
    \ optionally followed by\n   a session description.\n   All responses are composed\
    \ of a Response header, optionally followed\n   by a session description.\n  \
    \ Headers and session descriptions are encoded as a set of text lines,\n   separated\
    \ by a carriage return and line feed character (or,\n   optionnally, a single\
    \ line-feed character). The headers are separated\n   from the session description\
    \ by an empty line.\n   MGCP uses a transaction identifier to correlate commands\
    \ and\n   responses.  The transaction identifier is encoded as a component of\n\
    \   the command header and repeated as a component of the response header\n  \
    \ (see section 3.2.1, 3.2.1.2 and 3.3).\n"
- title: 3.2.  Command Header
  contents:
  - "3.2.  Command Header\n   The command header is composed of:\n   *  A command\
    \ line, identifying the requested action or verb, the\n      transaction identifier,\
    \ the endpoint towards which the action is\n      requested, and the MGCP protocol\
    \ version,\n   *  A set of parameter lines, composed of a parameter name followed\
    \ by\n      a parameter value.\n   Unless otherwise noted or dictated by other\
    \ referenced standards,\n   each component in the command header is case insensitive.\
    \ This goes\n   for verbs as well as parameters and values, and all comparisons\
    \ MUST\n   treat upper and lower case as well as combinations of these as being\n\
    \   equal.\n"
- title: 3.2.1.  Command line
  contents:
  - "3.2.1.  Command line\n   The command line is composed of:\n   *  The name of\
    \ the requested verb,\n   *  The identification of the transaction,\n   *  The\
    \ name of the endpoint that should execute the command (in\n      notifications\
    \ or restarts, the name of the endpoint that is\n      issuing the command),\n\
    \   *  The protocol version.\n   These four items are encoded as strings of printable\
    \ ASCII\n   characters, separated by white spaces, i.e. the ASCII space (0x20)\
    \ or\n   tabulation (0x09) characters. It is recommended to use exactly one\n\
    \   ASCII space separator.\n"
- title: 3.2.1.1.  Coding of the requested verb
  contents:
  - "3.2.1.1.  Coding of the requested verb\n   The verbs that can be requested are\
    \ encoded as four letter upper or\n   lower case ASCII codes (comparisons should\
    \ be case insensitive) as\n   defined in the following table:\n              \
    \      ______________________________\n                   | Verb             \
    \    |  Code|\n                   |______________________|______|\n          \
    \         | EndpointConfiguration|  EPCF|\n                   | CreateConnection\
    \     |  CRCX|\n                   | ModifyConnection     |  MDCX|\n         \
    \          | DeleteConnection     |  DLCX|\n                   | NotificationRequest\
    \  |  RQNT|\n                   | Notify               |  NTFY|\n            \
    \       | AuditEndpoint        |  AUEP|\n                   | AuditConnection\
    \      |  AUCX|\n                   | RestartInProgress    |  RSIP|\n        \
    \           |______________________|______|\n   The transaction identifier is\
    \ encoded as a string of up to 9 decimal\n   digits. In the command lines, it\
    \ immediately follows the coding of\n   the verb.\n   New verbs may be defined\
    \ in further versions of the protocol. It may\n   be necessary, for experimentation\
    \ purposes, to use new verbs before\n   they are sanctioned in a published version\
    \ of this protocol.\n   Experimental verbs should be identified by a four letter\
    \ code\n   starting with the letter X, such as for example XPER.\n"
- title: 3.2.1.2.  Transaction Identifiers
  contents:
  - "3.2.1.2.  Transaction Identifiers\n   MGCP uses a transaction identifier to correlate\
    \ commands and\n   responses.  A gateway supports two separate transaction identifier\n\
    \   name spaces:\n     a transaction identifier name space for sending transactions,\
    \ and\n     a transaction identifier name space for receiving transactions.\n\
    \   At a minimum, transaction identifiers for commands sent to a given\n   gateway\
    \ MUST be unique for the maximum lifetime of the transactions\n   within the collection\
    \ of Call Agents that control that gateway. Thus,\n   regardless of the sending\
    \ Call Agent, gateways can always detect\n   duplicate transactions by simply\
    \ examining the transaction\n   identifier. The coordination of these transaction\
    \ identifiers between\n   Call Agents is outside the scope of this specification\
    \ though.\n   Transaction identifiers for all commands sent from a given gateway\n\
    \   MUST be unique for the maximum lifetime of the transactions\n   regardless\
    \ of which Call Agent the command is sent to. Thus, a Call\n   Agent can always\
    \ detect a duplicate transaction from a gateway by the\n   combination of the\
    \ domain-name of the endpoint and the transaction\n   identifier.\n   The transaction\
    \ identifier is encoded as a string of up to nine\n   decimal digits. In the command\
    \ lines, it immediately follows the\n   coding of the verb.\n   Transaction identifiers\
    \ have values between 1 and 999999999. An MGCP\n   entity MUST NOT reuse a transaction\
    \ identifier more quickly than\n   three minutes after completion of the previous\
    \ command in which the\n   identifier was used.\n"
- title: 3.2.1.3.  Coding of the endpoint identifiers and entity names
  contents:
  - "3.2.1.3.  Coding of the endpoint identifiers and entity names\n   The endpoint\
    \ identifiers and entity names are encoded as case\n   insensitive e-mail addresses,\
    \ as defined in RFC 821. In these\n   addresses, the domain name identifies the\
    \ system where the endpoint\n   is attached, while the left side identifies a\
    \ specific endpoint on\n   that system.\n   Examples of such addresses can be:\n\
    \    ______________________________________________________________________\n\
    \   | hrd4/56@gw23.example.net     |  Circuit number 56 in                |\n\
    \   |                              |  interface \"hrd4\" of the Gateway 23  |\n\
    \   |                              |  of the \"Example\" network            |\n\
    \   | Call-agent@ca.example.net    |  Call Agent for the                  |\n\
    \   |                              |  \"example\" network                   |\n\
    \   | Busy-signal@ann12.example.net|  The \"busy signal\" virtual           |\n\
    \   |                              |  endpoint in the announcement        |\n\
    \   |                              |  server number 12.                   |\n\
    \   |______________________________|______________________________________|\n\
    \   The name of notified entities is expressed with the same syntax, with\n  \
    \ the possible addition of a port number as in:\n     Call-agent@ca.example.net:5234\n\
    \   In case the port number is omitted, the default MGCP port (2427) will\n  \
    \ be used.\n"
- title: 3.2.1.4.  Coding of the protocol version
  contents:
  - "3.2.1.4.  Coding of the protocol version\n   The protocol version is coded as\
    \ the key word MGCP followed by a\n   white space and the version number, and\
    \ optionally followed by a\n   profile name.. The version number is composed of\
    \ a major version,\n   coded by a decimal number, a dot, and a minor version number,\
    \ coded\n   as a decimal number. The version described in this document is\n \
    \  version 1.0.\n   The profile name, if present, is represented by a white-space\n\
    \   separated strings of  visible (printable) characters extending to the\n  \
    \ end of the line. Profile names may be defined for user communities\n   who want\
    \ to apply restrictions or other profiling to MGCP.\n   In the initial messages,\
    \ the version will be coded as:\n        MGCP 1.0\n"
- title: 3.2.2.  Parameter lines
  contents:
  - "3.2.2.  Parameter lines\n   Parameter lines are composed of a parameter name,\
    \ which in most cases\n   is composed of a single upper case character, followed\
    \ by a colon, a\n   white space and the parameter value. The parameter that can\
    \ be\n   present in commands are defined in the following table:\n _______________________________________________________________________\n\
    \ |Parameter name        |  Code|  Parameter value                      |\n |______________________|______|_______________________________________|\n\
    \ |ResponseAck           |   K  |  see description                      |\n |BearerInformation\
    \     |   B  |  see description                      |\n |CallId             \
    \   |   C  |  Hexadecimal string, at most 32 chars.|\n |ConnectionId         \
    \ |   I  |  Hexadecimal string, at most 32 chars.|\n |NotifiedEntity        |\
    \   N  |  An identifier, in RFC 821 format,    |\n |                      |  \
    \    |  composed of an arbitrary string and  |\n |                      |    \
    \  |  of the domain name of the requesting |\n |                      |      |\
    \  entity, possibly completed by a port |\n |                      |      |  number,\
    \ as in:                       |\n |                      |      |   Call-agent@ca.example.net:5234\
    \      |\n |RequestIdentifier     |   X  |  Hexadecimal string, at most 32 chars.|\n\
    \ |LocalConnectionOptions|   L  |  See description                      |\n |Connection\
    \ Mode       |   M  |  See description                      |\n |RequestedEvents\
    \       |   R  |  See description                      |\n |SignalRequests   \
    \     |   S  |  See description                      |\n |DigitMap           \
    \   |   D  |  A text encoding of a digit map       |\n |ObservedEvents       \
    \ |   O  |  See description                      |\n |ConnectionParameters  |\
    \   P  |  See description                      |\n |ReasonCode            |  \
    \ E  |  An arbitrary character string        |\n |SpecificEndpointID    |   Z\
    \  |  An identifier, in RFC 821 format,    |\n |                      |      |\
    \  composed of an arbitrary string,     |\n |                      |      |  followed\
    \ by an \"@\" followed by the   |\n |                      |      |  domain name\
    \ of the gateway to which  |\n |                      |      |  this endpoint\
    \ is attached.           |\n |Second Endpoint ID    |   Z2 |  Endpoint Id.   \
    \                      |\n |SecondConnectionId    |   I2 |  Connection Id.   \
    \                    |\n |RequestedInfo         |   F  |  See description    \
    \                  |\n |QuarantineHandling    |   Q  |  See description      \
    \                |\n |DetectEvents          |   T  |  See Description        \
    \              |\n |RestartMethod         |   RM |  See description          \
    \            |\n |RestartDelay          |   RD |  A number of seconds, encoded\
    \ as      |\n |                      |      |  a decimal number              \
    \       |\n |EventStates           |   ES |  See description                 \
    \     |\n |Capabilities          |   A  |  See description                   \
    \   |\n |______________________|______|_______________________________________|\n\
    \ |RemoteConnection      |   RC |  Session Description                  |\n |Descriptor\
    \            |      |                                       |\n |LocalConnection\
    \       |   LC |  Session Description                  |\n |Descriptor       \
    \     |      |                                       |\n |______________________|______|_______________________________________|\n\
    \   The parameters are not necessarily present in all commands. The\n   following\
    \ table provides the association between parameters and\n   commands. The letter\
    \ M stands for mandatory, O for optional and F for\n   forbidden.\n   ___________________________________________________________________\n\
    \  | Parameter name      |  EP|  CR|  MD|  DL|  RQ|  NT|  AU|  AU|  RS|\n  | \
    \                    |  CF|  CX|  CX|  CX|  NT|  FY|  EP|  CX|  IP|\n  |_____________________|____|____|____|____|____|____|____|____|____|\n\
    \  | ResponseAck         |  O |  O |  O |  O |  O |  O |  O |  O |  O |\n  | BearerInformation\
    \   |  M |  O |  O |  O |  O |  F |  F |  F |  F |\n  | CallId              |\
    \  F |  M |  M |  O |  F |  F |  F |  F |  F |\n  | ConnectionId        |  F |\
    \  F |  M |  O |  F |  F |  F |  M |  F |\n  | RequestIdentifier   |  F |  O+|\
    \  O+|  O+|  M |  M |  F |  F |  F |\n  | LocalConnection     |  F |  O |  O |\
    \  F |  F |  F |  F |  F |  F |\n  | Options             |    |    |    |    |\
    \    |    |    |    |    |\n  | Connection Mode     |  F |  M |  M |  F |  F |\
    \  F |  F |  F |  F |\n  | RequestedEvents     |  F |  O |  O |  O |  O*|  F |\
    \  F |  F |  F |\n  | SignalRequests      |  F |  O |  O |  O |  O*|  F |  F |\
    \  F |  F |\n  | NotifiedEntity      |  F |  O |  O |  O |  O |  O |  F |  F |\
    \  F |\n  | ReasonCode          |  F |  F |  F |  O |  F |  F |  F |  F |  O |\n\
    \  | ObservedEvents      |  F |  F |  F |  F |  F |  M |  F |  F |  F |\n  | DigitMap\
    \            |  F |  O |  O |  O |  O |  F |  F |  F |  F |\n  | Connection  \
    \        |  F |  F |  F |  O |  F |  F |  F |  F |  F |\n  | parameters      \
    \    |    |    |    |    |    |    |    |    |    |\n  | Specific Endpoint ID|\
    \  F |  F |  F |  F |  F |  F |  F |  F |  F |\n  | Second Endpoint ID  |  F |\
    \  O |  F |  F |  F |  F |  F |  F |  F |\n  | RequestedInfo       |  F |  F |\
    \  F |  F |  F |  F |  M |  M |  F |\n  | QuarantineHandling  |  F |  O |  O |\
    \  O |  O |  F |  F |  F |  F |\n  | DetectEvents        |  F |  O |  O |  O |\
    \  O |  F |  F |  F |  F |\n  | EventStates         |  F |  F |  F |  F |  F |\
    \  F |  F |  F |  F |\n  | RestartMethod       |  F |  F |  F |  F |  F |  F |\
    \  F |  F |  M |\n  | RestartDelay        |  F |  F |  F |  F |  F |  F |  F |\
    \  F |  O |\n  | SecondConnectionID  |  F |  F |  F |  F |  F |  F |  F |  F |\
    \  F |\n  | Capabilities        |  F |  F |  F |  F |  F |  F |  F |  F |  F |\n\
    \  |_____________________|____|____|____|____|____|____|____|____|____|\n  | RemoteConnection\
    \    |  F |  O |  O |  F |  F |  F |  F |  F |  F |\n  | Descriptor          |\
    \    |    |    |    |    |    |    |    |    |\n  | LocalConnection     |  F |\
    \  F |  F |  F |  F |  F |  F |  F |  F |\n  | Descriptor          |    |    |\
    \    |    |    |    |    |    |    |\n  |_____________________|____|____|____|____|____|____|____|____|____|\n\
    \   Note (+) that the RequestIdentifier parameter is optional in\n   connection\
    \ creation, modification and deletion commands, but that it\n   becomes mandatory\
    \ if the command contains an encapsulated\n   notification request.\n   Note (*)\
    \ that the RequestedEvents and SignalRequests parameters are\n   optional in the\
    \ NotificationRequest. If these parameters are omitted,\n   the corresponding\
    \ lists will be considered empty.\n   If implementers need to experiment with\
    \ new parameters, for example\n   when developing a new application of MGCP, they\
    \ should identify these\n   parameters by names that start with the string \"\
    X-\" or \"X+\", such as\n   for example:\n             X-FlowerOfTheDay: Daisy\n\
    \   Parameter names that start with \"X+\" are critical parameter\n   extensions.\
    \  An MGCP entity that receives a critical parameter\n   extension that it cannot\
    \ understand should refuse to execute the\n   command.  It should respond with\
    \ an error code 511 (Unrecognized\n   extension).\n   Parameter names that start\
    \ with \"X-\" are non critical parameter\n   extensions. An MGCP entity that receives\
    \ a non critical parameter\n   extension that it cannot understand can safely\
    \ ignore that parameter.\n"
- title: 3.2.2.1.  Response Acknowledgement
  contents:
  - "3.2.2.1.  Response Acknowledgement\n   The response acknowledgement attribute\
    \ is used to managed the \"at-\n   most-once\" facility described in the \"transmission\
    \ over UDP\" section.\n   It contains a comma separated list of \"confirmed transaction-id\n\
    \   ranges\".\n   Each \"confirmed transaction-id ranges\" is composed of either\
    \ one\n   decimal number, when the range includes exactly one transaction, or\n\
    \   two decimal numbers separated by a single hyphen, describing the\n   lower\
    \ and higher transaction identifiers included in the range.\n   An example of\
    \ response acknowledgement is:\n        K: 6234-6255, 6257, 19030-19044\n"
- title: 3.2.2.2.  Local connection options
  contents:
  - "3.2.2.2.  Local connection options\n   The local connection options describe\
    \ the operational parameters that\n   the Call Agent suggests to the gateway.\
    \ These parameters are:\n   *  The packetization period in milliseconds, encoded\
    \ as the keyword\n      \"p\", followed by a colon and a decimal number. If the\
    \ Call Agent\n      specifies a range of values, the range will be specified as\
    \ two\n      decimal numbers separated by an hyphen.\n   *  The preferred type\
    \ of compression algorithm, encoded as the\n      keyword \"a\", followed by a\
    \ colon and a character string. If the\n      Call Agent specifies a list of values,\
    \ these values will be\n      separated by a semicolon.\n   *  The bandwidth in\
    \ kilobits per second (1000 bits per second),\n      encoded as the keyword \"\
    b\", followed by a colon and a decimal\n      number. If the Call Agent specifies\
    \ a range of values, the range\n      will be specified as two decimal numbers\
    \ separated by an hyphen.\n   *  The echo cancellation parameter, encoded as the\
    \ keyword \"e\",\n      followed by a colon and the value \"on\" or \"off\".\n\
    \   *  The gain control parameter, encoded as the keyword \"gc\", followed\n \
    \     by a colon a value which can be either the keyword \"auto\" or a\n     \
    \ decimal number (positive or negative) representing the number of\n      decibels\
    \ of gain.\n   *  The silence suppression parameter, encoded as the keyword \"\
    s\",\n      followed by a colon and the value \"on\" or \"off\".\n   *  The type\
    \ of service parameter, encoded as the keyword \"t\",\n      followed by a colon\
    \ and the value encoded as two hexadecimal\n      digits.\n   *  The resource\
    \ reservation parameter, encoded as the keyword \"r\",\n      followed by a colon\
    \ and the value \"g\" (guaranteed service), \"cl\"\n      (controlled load) or\
    \ \"be\" (best effort).\n   *  The encryption key, encoded as the keyword \"k\"\
    \ followed by a colon\n      and a key specification, as defined for the parameter\
    \ \"K\" of SDP\n      (RFC 2327).\n   *  The type of network, encoded as the keyword\
    \ \"nt\" followed by a\n      colon and the type of network encoded as the keyword\
    \ \"IN\", \"ATM\"\n      or \"LOCAL\".\n   Each of the parameters is optional.\
    \ When several parameters are\n   present, the values are separated by a comma.\n\
    \   Examples of connection descriptors are:\n             L: p:10, a:PCMU\n  \
    \           L: p:10, a:G726-32\n             L: p:10-20, b:64\n             L:\
    \ b:32-64, e:off\n   These set of attributes may be extended by extension attributes.\n\
    \   Extension attributes are composed of an attribute name, followed by a\n  \
    \ semi-colon and by an attribute value. The attribute name should start\n   by\
    \ the two characters \"x+\", for a mandatory extensions, or \"x-\", for\n   a\
    \ non mandatory extension.  If a gateway receives a mandatory\n   extension attribute\
    \ that it does not recognize, it should reject the\n   command with an error code\
    \ 525 (Unknown extension in\n   LocalConnectionOptions).\n"
- title: 3.2.2.3.  Capabilities
  contents:
  - "3.2.2.3.  Capabilities\n   Capabilities inform the Call Agent about endpoints'\
    \ capabilities when\n   audited. The encoding of capabilities is based on the\
    \ Local\n   Connection Options encoding for the parameters that are common to\n\
    \   both. In addition, capabilities can also contain a list of supported\n   packages,\
    \ and a list of supported modes.\n   The parameters used are:\n   *\n      A list\
    \ of supported codecs. The following parameters will apply to\n      all codecs\
    \ specified in this list.  If there is a need to specify\n      that some parameters,\
    \ such as e.g. silence suppression, are only\n      compatible with some codecs,\
    \ then the gateway will return several\n      LocalConnectionOptions parameters,\
    \ one for each set of codecs.\n   Packetization Period:\n      A range may be\
    \ specified.\n   Bandwidth:\n      A range corresponding to the range for packetization\
    \ periods may\n      be specified (assuming no silence suppression). If absent,\
    \ the\n      values will be deduced from the codec type.\n   Echo Cancellation:\n\
    \      \"on\" if echo cancellation is supported for this codec, \"off\"\n    \
    \  otherwise. The default is support.\n   Silence Suppression:\n      \"on\" if\
    \ silence suppression is supported for this codec, \"off\"\n      otherwise. The\
    \ default is support.\n   Gain Control:\n      \"0\" if gain control is not supported.\
    \  The default is support.\n   Type of Service:\n      The value \"0\" indicates\
    \ no support for type of service, all other\n      values indicate support for\
    \ type of service. The default is\n      support.\n   Resource Reservation:\n\
    \      The parameter indicates the reservation services that are\n      supported,\
    \ in addition to best effort.  The value \"g\" is encoded\n      when the gateway\
    \ supports both the guaranteed and the controlled\n      load service, \"cl\"\
    \ when only the controlled load service is\n      supported.  The default is \"\
    best effort.\"\n   Encryption Key:\n      Encoding any value indicates support\
    \ for encryption.  Default is\n      no support.\n   Type of network:\n      The\
    \ keyword \"nt\", followed by a colon and a semicolon separated\n      list of\
    \ supported network types.  This parameter is optional.\n   Event Packages\n \
    \     The event packages supported by this endpoint encoded as the\n      keyword\
    \ \"v\", followed by a colon and a character string. If a list\n      of values\
    \ is specified, these values will be separated by a\n      semicolon.  The first\
    \ value specified will be the default package\n      for that endpoint.\n   Modes\n\
    \      The modes supported by this endpoint encoded as the keyword \"m\",\n  \
    \    followed by a colon and a semicolon-separated list of supported\n      connection\
    \ modes for this endpoint.\n"
- title: 3.2.2.4.  Connection parameters
  contents:
  - "3.2.2.4.  Connection parameters\n   Connection parameters are encoded as a string\
    \ of type and value\n   pairs, where the type is a either letter identifier of\
    \ the parameter\n   or an extension type, and the value a decimal integer. Types\
    \ are\n   separated from value by an `=' sign. Parameters are encoded from each\n\
    \   other by a comma.\n   The connection parameter types are specified in the\
    \ following table:\n    __________________________________________________________________\n\
    \   | Connection parameter|  Code|  Connection parameter              |\n   |\
    \ name                |      |  value                             |\n   |_____________________|______|____________________________________|\n\
    \   | Packets sent        |   PS |  The number of packets that        |\n   |\
    \                     |      |  were sent on the connection.      |\n   | Octets\
    \ sent         |   OS |  The number of octets that         |\n   |           \
    \          |      |  were sent on the connection.      |\n   | Packets received\
    \    |   PR |  The number of packets that        |\n   |                     |\
    \      |  were received on the connection.  |\n   | Octets received     |   OR\
    \ |  The number of octets that         |\n   |                     |      |  were\
    \ received on the connection.  |\n   | Packets lost        |   PL |  The number\
    \ of packets that        |\n   |                     |      |  were not received\
    \ on the          |\n   |                     |      |  connection, as deduced\
    \ from       |\n   |                     |      |  gaps in the sequence number.\
    \      |\n   | Jitter              |   JI |  The average inter-packet arrival\
    \  |\n   |                     |      |  jitter, in milliseconds,          |\n\
    \   |                     |      |  expressed as an integer number.   |\n   |\
    \ Latency             |   LA |  Average latency, in milliseconds, |\n   |    \
    \                 |      |  expressed as an integer number.   |\n   |_____________________|______|____________________________________|\n\
    \   Extension parameters names are composed of the string \"X-\" followed\n  \
    \ by a two letters extension parameter name.  Call agents that received\n   unrecognized\
    \ extensions shall silently ignore these extensions.\n   An example of connection\
    \ parameter encoding is:\n         P: PS=1245, OS=62345, PR=0, OR=0, PL=0, JI=0,\
    \ LA=48\n"
- title: 3.2.2.5.  Reason Codes
  contents:
  - "3.2.2.5.  Reason Codes\n   Reason codes are three-digit numeric values. The reason\
    \ code is\n   optionally followed by a white space and commentary, e.g.:\n   \
    \   900 Endpoint malfunctioning\n   A list of reason-codes can be found in Section\
    \ 2.5.\n"
- title: 3.2.2.6.  Connection mode
  contents:
  - "3.2.2.6.  Connection mode\n   The connection mode describes the mode of operation\
    \ of the\n   connection.  The possible values are:\n       ________________________________________________________\n\
    \      | Mode       |  Meaning                                 |\n      |____________|__________________________________________|\n\
    \      | M: sendonly|  The gateway should only send packets    |\n      | M: recvonly|\
    \  The gateway should only receive packets |\n      | M: sendrecv|  The gateway\
    \ should send                 |\n      |            |  and receive packets   \
    \                  |\n      | M: confrnce|  The gateway should place         \
    \       |\n      |            |  the connection in conference mode       |\n \
    \     | M: inactive|  The gateway should neither              |\n      |     \
    \       |  send nor receive packets                |\n      | M: loopback|  The\
    \ gateway should place                |\n      |            |  the circuit in\
    \ loopback mode.           |\n      | M: conttest|  The gateway should place \
    \               |\n      |            |  the circuit in test mode.           \
    \    |\n      | M: netwloop|  The gateway should place                |\n    \
    \  |            |  the connection in network loopback mode.|\n      | M: netwtest|\
    \  The gateway should place                |\n      |            |   the connection\
    \ in network              |\n      |            |   continuity test mode.    \
    \              |\n      | M: data    |  The gateway should use the circuit   \
    \   |\n      |            |  for network access for data             |\n     \
    \ |            |  (e.g., PPP, SLIP, etc.).                |\n      |____________|__________________________________________|\n"
- title: 3.2.2.7.  Coding of event names
  contents:
  - "3.2.2.7.  Coding of event names\n   Event names are composed of an optional package\
    \ name, separated by a\n   slash (/) from the name of the actual event.  The event\
    \ name can\n   optionally be followed by an at sign (@) and the identifier of\
    \ a\n   connection on which the event should be observed. Event names are\n  \
    \ used in the RequestedEvents, SignalRequests and ObservedEvents\n   parameter.\n\
    \   Each signal has one of the following signal-types associated with:\n   On/Off\
    \ (OO), Time-out (TO), Brief (BR). (These signal types are\n   specified in the\
    \ package definitions, and are not present in the\n   messages.)  On/Off signals\
    \ can be parameterized with a \"+\" to turn\n   the signal on, or a \"-\" to turn\
    \ the signal off. If an on/off signal\n   is not parameterized, the signal is\
    \ turned on. Both of the following\n   will turn the vmwi signal on:\n      vmwi(+),\
    \ vmwi\n   The following are valid examples of event names:\n       ____________________________________________________________\n\
    \      | L/hu        |   on-hook transition, in the line package   |\n      |\
    \ F/0         |   digit 0 in the MF package                 |\n      | fh    \
    \      |   Flash-hook, assuming that the line package|\n      |             |\
    \   is a default package for the end point.   |\n      | G/rt@0A3F58 |   Ring\
    \ back signal on                       |\n      |             |   connection \"\
    0A3F58\".                      |\n      |_____________|_____________________________________________|\n\
    \   In addition, the range and wildcard notation of events can be used,\n   instead\
    \ of individual names, in the RequestedEvents and DetectEvents\n   parameters.\
    \ The star sign can be used to denote \"all connections\",\n   and the dollar\
    \ sign can be used to denote the \"current\" connection.\n   The following are\
    \ valid examples of such notations:\n       __________________________________________________________\n\
    \      | M/[0-9]   |   Digits 0 to 9 in the MF package           |\n      | fh\
    \        |   Flash-hook, assuming that the line package|\n      |           |\
    \   is a default package for the end point.   |\n      | [0-9*#A-D]|   All digits\
    \ and letters in the DTMF        |\n      |           |   packages (default for\
    \ endpoint).          |\n      | T/$       |   All events in the trunk packages.\
    \         |\n      | R/qa@*    |   The quality alert event in all            |\n\
    \      |           |   connections                               |\n      | R/rt@$\
    \    |   Ringback on current connection            |\n      |___________|_____________________________________________|\n"
- title: 3.2.2.8.  RequestedEvents
  contents:
  - "3.2.2.8.  RequestedEvents\n   The RequestedEvent parameter provides the list\
    \ of events that have\n   been requested. The event codes are described in the\
    \ previous\n   section.\n   Each event can be qualified by a requested action,\
    \ or by a list of\n   actions. The actions, when specified, are encoded as a list\
    \ of\n   keywords, enclosed in parenthesis and separated by commas. The codes\n\
    \   for the various actions are:\n                ______________________________________\n\
    \               | Action                       |  Code|\n               |______________________________|______|\n\
    \               | Notify immediately           |  N   |\n               | Accumulate\
    \                   |  A   |\n               | Treat according to digit map |\
    \  D   |\n               | Swap                         |  S   |\n           \
    \    | Ignore                       |  I   |\n               | Keep Signal(s)\
    \ active        |  K   |\n               | Embedded Notification Request|  E \
    \  |\n               |______________________________|______|\n   When no action\
    \ is specified, the default action is to notify the\n   event.  This means that,\
    \ for example, ft and ft(N) are equivalent.\n   Events that are not listed are\
    \ ignored.\n   The digit-map action can only be specified for the digits, letters\n\
    \   and interdigit timers in the MF and DTMF packages, or in other\n   packages\
    \ that would define the encoding of digits and timers.\n   The requested list\
    \ is encoded on a single line, with event/action\n   groups separated by commas.\
    \ Examples of RequestedEvents encoding are:\n         R: hu(N), hf(S,N)\n    \
    \     R: hu(N), [0-9#T](D)\n   In the case of the \"enable\" action, the embedded\
    \ notification request\n   parameters are encoded as a list of up to three parameter\
    \ groups,\n   separated by commas.  Each group start by a one letter identifier,\n\
    \   followed by a list of parameters enclosed between parenthesis.  The\n   first\
    \ optional parameter group, identified by the letter \"R\", is the\n   enabled\
    \ value of the RequestedEvents parameter.  The second optional\n   group, identified\
    \ by the letter \"S\", is the enabled value of the\n   SignalRequests parameter.\
    \  The third optional group, identified by\n   the letter \"D\", is the enabled\
    \ value of the DigitMap. (Note that some\n   existing implementation may encode\
    \ these three components in a\n   different order.)\n   If the RequestedEvents\
    \ is not present, the parameter will be set to a\n   null value.  If the SignalRequest\
    \ is not present, the parameter will\n   be set to a null value. If the DigitMap\
    \ is absent, the current value\n   should be used. The following are valid examples\
    \ of embedded\n   requests:\n         R: hd(E(R([0-9#T](D),hu(N)),S(dl),D([0-9].[#T])))\n\
    \         R: hd(E(R([0-9#T](D),hu(N)),S(dl)))\n"
- title: 3.2.2.9.  SignalRequests
  contents:
  - "3.2.2.9.  SignalRequests\n   The SignalRequests parameter provides the name of\
    \ the signals that\n   have been requested. Each signal is identified by a name,\
    \ as\n   indicated in the previous section.\n   Several signals, such as for example\
    \ announcement or ADSI display,\n   can be qualified by additional parameters:\n\
    \   *  the name and parameters of the announcement,\n   *  the string that should\
    \ be displayed.\n   These parameters will be encoded as a set of UTF8 character\
    \ strings,\n   spearated by comams and enclosed within parenthesis, as in:\n \
    \     S: adsi(\"123456 Francois Gerard\")\n      S: ann(no-such-number, 1234567)\n\
    \   When several signals are requested, their codes are separated by a\n   comma,\
    \ as in:\n         S: asdi(123456 Your friend), rg\n"
- title: 3.2.2.10.  ObservedEvent
  contents:
  - "3.2.2.10.  ObservedEvent\n   The observed event parameters provides the list\
    \ of events that have\n   been observed. The event codes are the same as those\
    \ used in the\n   NotificationRequest. Events that have been accumulated according\
    \ to\n   the digit map may be grouped in a single string; they should be\n   reported\
    \ as lists of isolated events if other events where detected\n   during the digit\
    \ accumulation. Examples of observed actions are:\n        O: L/hu\n        O:\
    \ 8295555T\n        O: 8,2,9,5,5,L/hf,5,5,T\n        O: L/hf, L/hf, L/hu\n"
- title: 3.2.2.11.  RequestedInfo
  contents:
  - "3.2.2.11.  RequestedInfo\n   The RequestedInfo parameter contains a comma separated\
    \ list of\n   parameter codes, as defined in the \"Parameter lines\" section.\
    \  For\n   example, if one wants to audit the value of the NotifiedEntity,\n \
    \  RequestIdentifier, RequestedEvents, SignalRequests, DigitMap,\n   QuarantineHandling\
    \ and DetectEvents parameters, The value of the\n   RequestedInfo parameter will\
    \ be:\n         F:N,X,R,S,D,Q,T\n   The capabilities request, in the AuditEndPoint\
    \ command, is encoded by\n   the keyword \"A\", as in:\n         F:A\n"
- title: 3.2.2.12.  QuarantineHandling
  contents:
  - "3.2.2.12.  QuarantineHandling\n   The quarantine handling parameter contains\
    \ a list of comma separated\n   keywords:\n   *  The keyword \"process\" or \"\
    discard\" to indicate the treatment of\n      quarantined events.  If neither\
    \ process or discard is present,\n      process is assumed.\n   *  The keyword\
    \ \"step\" or \"loop\" to indicate whether exactly at most\n      one notification\
    \ is expected, or whether multiple notifications\n      are allowed. If neither\
    \ step or loop is present, step is assumed.\n      The following values are valid\
    \ examples:\n               Q:loop\n               Q:process\n               Q:discard,loop\n"
- title: 3.2.2.13.  DetectEvents
  contents:
  - "3.2.2.13.  DetectEvents\n   The DetectEvent parameter is encoded as a comma separated\
    \ list of\n   events, such as for example:\n         T: hu,hd,hf,[0-9#*]\n   It\
    \ should be noted, that no actions can be associated with the\n   events.\n"
- title: 3.2.2.14.  EventStates
  contents:
  - "3.2.2.14.  EventStates\n   The EventStates parameter is encoded as a comma separated\
    \ list of\n   events, such as for example:\n      ES: hu\n   It should be noted,\
    \ that no actions can be associated with the\n   events.\n"
- title: 3.2.2.15.  RestartMethod
  contents:
  - "3.2.2.15.  RestartMethod\n   The RestartMethod parameter is encoded as one of\
    \ the keywords\n   \"graceful\", \"forced\", \"restart\", \"disconnected\" or\
    \ \"cancel-graceful\"\n   as for example:\n         RM:restart\n"
- title: 3.2.2.16.  Bearer Information
  contents:
  - "3.2.2.16.  Bearer Information\n   The values of the bearer informations are encoded\
    \ as a comma\n   separated list of attributes, represented by an attribute name,\n\
    \   separated by a colon from an attribute value.\n   The only attribute that\
    \ is defined is the \"encoding\" (code \"e\"),\n   whose defined values are \"\
    A\" (A-law) and \"mu\" (mu-law).\n   An example of bearer information encoding\
    \ is:\n         B: e:mu\n"
- title: 3.3.  Format of response headers
  contents:
  - "3.3.  Format of response headers\n   The response header is composed of a response\
    \ line, optionally\n   followed by headers that encode the response parameters.\n\
    \   An example of response header could be:\n         200 1203 OK\n   The response\
    \ line starts with the response code, which is a three\n   digit numeric value.\
    \ The code is followed by a white space, the\n   transaction identifier, and an\
    \ optional commentary preceded by a\n   white space.\n   The following table describe\
    \ the parameters whose presence is\n   mandatory or optional in a response header,\
    \ as a function of the\n   command that triggered the response. The letter M stands\
    \ for\n   mandatory, O for optional and F for forbidden.\n    ___________________________________________________________________\n\
    \   | Parameter name      |  EP|  CR|  MD|  DL|  RQ|  NT|  AU|  AU|  RS|\n   |\
    \                     |  CF|  CX|  CX|  CX|  NT|  FY|  EP|  CX|  IP|\n   |_____________________|____|____|____|____|____|____|____|____|____|\n\
    \   | ResponseAck         |  F |  F |  F |  F |  F |  F |  F |  F |  F |\n   |\
    \ BearerInformation   |  F |  F |  F |  F |  F |  F |  O |  F |  F |\n   | CallId\
    \              |  F |  F |  F |  F |  F |  F |  F |  O |  F |\n   | ConnectionId\
    \        |  F |  O*|  F |  F |  F |  F |  F |  F |  F |\n   | RequestIdentifier\
    \   |  F |  F |  F |  F |  F |  F |  O |  F |  F |\n   | LocalConnection     |\
    \  F |  F |  F |  F |  F |  F |  O |  O |  F |\n   | Options             |   \
    \ |    |    |    |    |    |    |    |    |\n   | Connection Mode     |  F | \
    \ F |  F |  F |  F |  F |  F |  O |  F |\n   | RequestedEvents     |  F |  F |\
    \  F |  F |  F |  F |  O |  F |  F |\n   | SignalRequests      |  F |  F |  F\
    \ |  F |  F |  F |  O |  F |  F |\n   | NotifiedEntity      |  F |  F |  F | \
    \ F |  F |  F |  F |  F |  O |\n   | ReasonCode          |  F |  F |  F |  F |\
    \  F |  F |  O |  F |  F |\n   | ObservedEvents      |  F |  F |  F |  F |  F\
    \ |  F |  O |  F |  F |\n   | DigitMap            |  F |  F |  F |  F |  F | \
    \ F |  O |  F |  F |\n   | Connection          |  F |  F |  F |  O |  F |  F |\
    \  F |  O |  F |\n   | Parameters          |    |    |    |    |    |    |   \
    \ |    |    |\n   | Specific Endpoint ID|  F |  O |  F |  F |  F |  F |  F | \
    \ F |  F |\n   | RequestedInfo       |  F |  F |  F |  F |  F |  F |  F |  F |\
    \  F |\n   | QuarantineHandling  |  F |  F |  F |  F |  F |  F |  O |  F |  F\
    \ |\n   | DetectEvents        |  F |  F |  F |  F |  F |  F |  O |  F |  F |\n\
    \   | EventStates         |  F |  F |  F |  F |  F |  F |  O |  F |  F |\n   |\
    \ RestartMethod       |  F |  F |  F |  F |  F |  F |  O |  F |  F |\n   | RestartDelay\
    \        |  F |  F |  F |  F |  F |  F |  O |  F |  F |\n   | Capabilities   \
    \     |  F |  F |  F |  F |  F |  F |  O |  F |  F |\n   | SecondConnectionId\
    \  |  F |  O |  F |  F |  F |  F |  F |  F |  F |\n   | SecondEndpointID    |\
    \  F |  O |  F |  F |  F |  F |  F |  F |  F |\n   |_____________________|____|____|____|____|____|____|____|____|____|\n\
    \   | LocalConnection     |  F |  M |  O |  F |  F |  F |  F |  O*|  F |\n   |\
    \ Descriptor          |    |    |    |    |    |    |    |    |    |\n   | RemoteConnection\
    \    |  F |  F |  F |  F |  F |  F |  F |  O*|  F |\n   | Descriptor         \
    \ |    |    |    |    |    |    |    |    |    |\n   |_____________________|____|____|____|____|____|____|____|____|____|\n\
    \   In the case of a CreateConnection message, the response line is\n   followed\
    \ by a Connection-Id parameter. It may also be followed a\n   Specific-Endpoint-Id\
    \ parameter, if the creation request was sent to a\n   wildcarded Endpoint-Id.\
    \ The connection-Id parameter is marked as\n   optional in the Table.  In fact,\
    \ it is mandatory with all positive\n   responses, when a connection was created,\
    \ and forbidden when the\n   response is negative, when no connection as created.\n\
    \   In the case of a DeleteConnection message, the response line is\n   followed\
    \ by a Connection Parameters parameter, as defined in section\n   3.2.2.2.\n \
    \  A LocalConnectionDescriptor should be transmitted with a positive\n   response\
    \ (code 200) to a CreateConnection. It may be transmitted in\n   response to a\
    \ ModifyConnection command, if the modification resulted\n   in a modification\
    \ of the session parameters. The\n   LocalConnectionDescriptor is encoded as a\
    \ \"session description,\" as\n   defined in section 3.4. It is separated from\
    \ the response header by\n   an empty line.\n   When several session descriptors\
    \ are encoded in the same response,\n   they are encoded one after each other,\
    \ separated by an empty line.\n   This is the case for example when the response\
    \ to an audit connection\n   request carries both a local session description\
    \ and a remote session\n   description, as in:\n         200 1203 OK\n       \
    \  C: A3C47F21456789F0\n         N: [128.96.41.12]\n         L: p:10, a:PCMU;G726-32\n\
    \         M: sendrecv\n         P: PS=1245, OS=62345, PR=780, OR=45123, PL=10,\
    \ JI=27,LA=48\n         v=0\n         c=IN IP4 128.96.41.1\n         m=audio 1296\
    \ RTP/AVP 0\n         v=0\n         c=IN IP4 128.96.63.25\n         m=audio 1296\
    \ RTP/AVP 0 96\n         a=rtpmap:96 G726-32/8000\n   In this example, according\
    \ to the SDP syntax, each description starts\n   with a \"version\" line, (v=...).\
    \  The local description is always\n   transmitted before the remote description.\
    \ If a connection descriptor\n   is requested, but it does not exist for the connection\
    \ audited, that\n   connection descriptor will appear with the SDP protocol version\
    \ field\n   only.\n"
- title: 3.4.  Formal syntax description of the protocol
  contents:
  - "3.4.  Formal syntax description of the protocol\n   In this section, we provided\
    \ a formal description of the protocol\n   syntax, following the \"Augmented BNF\
    \ for Syntax Specifications\"\n   defined in RFC 2234.\n"
- title: MGCPMessage = MGCPCommand / MGCPResponse
  contents:
  - 'MGCPMessage = MGCPCommand / MGCPResponse

    '
- title: MGCPCommand = MGCPCommandLine 0*(MGCPParameter) [EOL *SDPinformation]
  contents:
  - 'MGCPCommand = MGCPCommandLine 0*(MGCPParameter) [EOL *SDPinformation]

    '
- title: MGCPCommandLine = MGCPVerb 1*(WSP) <transaction-id> 1*(WSP)
  contents:
  - "MGCPCommandLine = MGCPVerb 1*(WSP) <transaction-id> 1*(WSP)\n               \
    \         <endpointName> 1*(WSP) MGCPversion EOL\n"
- title: MGCPVerb = "EPCF" / "CRCX" / "MDCX" / "DLCX" / "RQNT"
  contents:
  - "MGCPVerb = \"EPCF\" / \"CRCX\" / \"MDCX\" / \"DLCX\" / \"RQNT\"\n         / \"\
    NTFY\" / \"AUEP\" / \"AUCX\" / \"RSIP\" / extensionVerb\n"
- title: extensionVerb = "X" 3(ALPHA / DIGIT)
  contents:
  - 'extensionVerb = "X" 3(ALPHA / DIGIT)

    '
- title: transaction-id = 1*9(DIGIT)
  contents:
  - 'transaction-id = 1*9(DIGIT)

    '
- title: endpointName =  localEndpointName "@" DomainName
  contents:
  - 'endpointName =  localEndpointName "@" DomainName

    '
- title: LocalEndpointName = LocalNamePart 0*("/" LocalNamePart)
  contents:
  - 'LocalEndpointName = LocalNamePart 0*("/" LocalNamePart)

    '
- title: LocalNamePart = AnyName / AllName / NameString
  contents:
  - 'LocalNamePart = AnyName / AllName / NameString

    '
- title: AnyName = "$"
  contents:
  - 'AnyName = "$"

    '
- title: AllNames = "*"
  contents:
  - 'AllNames = "*"

    '
- title: NameString = 1*(range-of-allowed-characters)
  contents:
  - 'NameString = 1*(range-of-allowed-characters)

    '
- title: DomainName = 1*256(ALPHA / DIGIT / "." / "-") ; as defined in RFC 821
  contents:
  - 'DomainName = 1*256(ALPHA / DIGIT / "." / "-") ; as defined in RFC 821

    '
- title: MGCPversion = "MGCP" 1*(WSP) 1*(DIGIT) "." 1*(DIGIT)
  contents:
  - "MGCPversion = \"MGCP\" 1*(WSP) 1*(DIGIT) \".\" 1*(DIGIT)\n              [1*(WSP)\
    \ ProfileName]\n"
- title: ProfileName = 1*(range-of-allowed-characters)
  contents:
  - 'ProfileName = 1*(range-of-allowed-characters)

    '
- title: MGCPParameter = ParameterValue EOL
  contents:
  - 'MGCPParameter = ParameterValue EOL

    '
- title: ParameterValue = ("K" ":" 0*WSP <ResponseAck>) /
  contents:
  - "ParameterValue = (\"K\" \":\" 0*WSP <ResponseAck>) /\n                 (\"B\"\
    \ \":\" 0*WSP <BearerInformation>) /\n                 (\"C\" \":\" 0*WSP <CallId>)\
    \ /\n                 (\"I\" \":\" 0*WSP <ConnectionId>) /\n                 (\"\
    N\" \":\" 0*WSP <NotifiedEntity>) /\n                 (\"X\" \":\" 0*WSP <RequestIdentifier>)\
    \ /\n                 (\"L\" \":\" 0*WSP <LocalConnectionOptions>) /\n       \
    \          (\"M\" \":\" 0*WSP <ConnectionMode>) /\n                 (\"R\" \"\
    :\" 0*WSP <RequestedEvents>) /\n                 (\"S\" \":\" 0*WSP <SignalRequests>)\
    \ /\n                 (\"D\" \":\" 0*WSP <DigitMap>) /\n                 (\"O\"\
    \ \":\" 0*WSP <ObservedEvents>) /\n                 (\"P\" \":\" 0*WSP <ConnectionParameters>)\
    \ /\n                 (\"E\" \":\" 0*WSP <ReasonCode>) /\n                 (\"\
    Z\" \":\" 0*WSP <SpecificEndpointID>) /\n                 (\"Z2\" \":\" 0*WSP\
    \ <SecondEndpointID>) /\n                 (\"I2\" \":\" 0*WSP <SecondConnectionID>)\
    \ /\n                 (\"F\" \":\" 0*WSP <RequestedInfo>) /\n                \
    \ (\"Q\" \":\" 0*WSP <QuarantineHandling>) /\n                 (\"T\" \":\" 0*WSP\
    \ <DetectEvents>) /\n                 (\"RM\" \":\" 0*WSP <RestartMethod>) /\n\
    \                 (\"RD\" \":\" 0*WSP <RestartDelay>) /\n                 (\"\
    A\" \":\" 0*WSP <Capabilities>) /\n                 (\"ES\" \":\" 0*WSP <EventStates>)\
    \ /\n                     (extensionParameter \":\" 0*WSP <parameterString>)\n"
- title: ResponseAck =  confirmedTransactionIdRange
  contents:
  - "ResponseAck =  confirmedTransactionIdRange\n               *[ \",\"  confirmedTransactionIdRange\
    \ ]\n"
- title: confirmedTransactionIdRange = 1*9DIGIT [ "-" 1*9DIGIT ]
  contents:
  - 'confirmedTransactionIdRange = 1*9DIGIT [ "-" 1*9DIGIT ]

    '
- title: BearerInformation = BearerAttribute 0*("," 0*WSP BearerAttribute)
  contents:
  - 'BearerInformation = BearerAttribute 0*("," 0*WSP BearerAttribute)

    '
- title: BearerAttribute = ("e" ":" <BearerEncoding>)
  contents:
  - 'BearerAttribute = ("e" ":" <BearerEncoding>)

    '
- title: BearerEncoding = "A" / "mu"
  contents:
  - 'BearerEncoding = "A" / "mu"

    '
- title: CallId = 1*32(HEXDIG)
  contents:
  - 'CallId = 1*32(HEXDIG)

    '
- title: // The audit request response may include a list of identifiers
  contents:
  - '// The audit request response may include a list of identifiers

    '
- title: ConnectionId = 1*32(HEXDIG) 0*("," 1*32(HEXDIG))
  contents:
  - 'ConnectionId = 1*32(HEXDIG) 0*("," 1*32(HEXDIG))

    '
- title: SecondConnectionID = ConnectionId
  contents:
  - 'SecondConnectionID = ConnectionId

    '
- title: NotifiedEntity = [LocalName "@"] DomainName [":" portNumber]
  contents:
  - 'NotifiedEntity = [LocalName "@"] DomainName [":" portNumber]

    '
- title: LocalName = 1*32(suitableCharacter)
  contents:
  - 'LocalName = 1*32(suitableCharacter)

    '
- title: portNumber = 1*5(DIGIT)
  contents:
  - 'portNumber = 1*5(DIGIT)

    '
- title: RequestIdentifier = 1*32(HEXDIG)
  contents:
  - 'RequestIdentifier = 1*32(HEXDIG)

    '
- title: LocalConnectionOptions = [ LocalOptionValue 0*(WSP)
  contents:
  - "LocalConnectionOptions = [ LocalOptionValue 0*(WSP)\n                 0*(\",\"\
    \ 0*(WSP) LocalOptionValue 0*(WSP)) ]\n"
- title: LocalOptionValue = ("p" ":" <packetizationPeriod> )
  contents:
  - "LocalOptionValue = (\"p\" \":\" <packetizationPeriod> )\n                 / (\"\
    a\" \":\" <compressionAlgorithm> )\n                 / (\"b\" \":\" <bandwidth>\
    \ )\n                 / (\"e\" \":\" <echoCancellation> )\n                 /\
    \ (\"gc\" \":\" <gainControl> )\n                 / (\"s\" \":\" <silenceSuppression>\
    \ )\n                 / (\"t\" \":\" <typeOfService> )\n                 / (\"\
    r\" \":\" <resourceReservation> )\n                 / (\"k\" \":\" <encryptionmethod>[\"\
    :\"<encryptionKey>])\n                 / (\"nt\" \":\" <typeOfNetwork> )\n   \
    \              / (localOptionExtensionName \":\"\n                 / localOptionExtensionValue)\n"
- title: Capabilities = [ CapabilityValue 0*(WSP)
  contents:
  - "Capabilities = [ CapabilityValue 0*(WSP)\n                 0*(\",\" 0*(WSP) CapabilityValue\
    \ 0*(WSP)) ]\n"
- title: CapabilityValue = LocalOptionValue
  contents:
  - "CapabilityValue = LocalOptionValue\n                / (\"v\" \":\" <supportedPackages>)\n\
    \                / (\"m\" \":\" <supportedModes> )\n"
- title: packetizationPeriod = 1*4(DIGIT)["-" 1*4(DIGIT)]
  contents:
  - 'packetizationPeriod = 1*4(DIGIT)["-" 1*4(DIGIT)]

    '
- title: compressionAlgorithm = algorithmName 0*(";" algorithmName)
  contents:
  - 'compressionAlgorithm = algorithmName 0*(";" algorithmName)

    '
- title: algorithmName = 1*32(SuitableCharacter)
  contents:
  - 'algorithmName = 1*32(SuitableCharacter)

    '
- title: bandwidth = 1*4(DIGIT)["-" 1*4(DIGIT)]
  contents:
  - 'bandwidth = 1*4(DIGIT)["-" 1*4(DIGIT)]

    '
- title: echoCancellation = "on" / "off"
  contents:
  - 'echoCancellation = "on" / "off"

    '
- title: gainControl = "auto" / ["-"]1*4(DIGIT)
  contents:
  - 'gainControl = "auto" / ["-"]1*4(DIGIT)

    '
- title: silenceSuppression = "on" / "off"
  contents:
  - 'silenceSuppression = "on" / "off"

    '
- title: typeOfService = 2HEXDIG
  contents:
  - 'typeOfService = 2HEXDIG

    '
- title: resourceReservation = "g" / "cl" / "be"
  contents:
  - 'resourceReservation = "g" / "cl" / "be"

    '
- title: ;encryption parameters are coded as in SDP (RFC 2327)
  contents:
  - ';encryption parameters are coded as in SDP (RFC 2327)

    '
- title: encryptiondata = ( "clear" ":" <encryptionKey> )
  contents:
  - "encryptiondata = ( \"clear\" \":\" <encryptionKey> )\n               / ( \"base64\"\
    \ \":\" <encodedEncryptionKey> )\n               / ( \"uri\" \":\" <URItoObtainKey>\
    \ )\n               / ( \"prompt\" ) ; defined in SDP, not usable in MGCP!\n"
- title: encryptionKey = 1*(SuitableCharacter / SP)
  contents:
  - 'encryptionKey = 1*(SuitableCharacter / SP)

    '
- title: encodedEncryptionKey = 1*(ALPHA / DIGIT / "+" / "/" / "=")
  contents:
  - 'encodedEncryptionKey = 1*(ALPHA / DIGIT / "+" / "/" / "=")

    '
- title: URItoObtainKey = 1*(SuitableCharacter) / quotedString
  contents:
  - 'URItoObtainKey = 1*(SuitableCharacter) / quotedString

    '
- title: typeOfNetwork = "IN" / "ATM" / "LOCAL"
  contents:
  - 'typeOfNetwork = "IN" / "ATM" / "LOCAL"

    '
- title: supportedModes= ConnectionMode 0*(";" ConnectionMode)
  contents:
  - 'supportedModes= ConnectionMode 0*(";" ConnectionMode)

    '
- title: supportedPackages = packageName 0*(";" packageName)
  contents:
  - 'supportedPackages = packageName 0*(";" packageName)

    '
- title: localOptionExtensionName = "x" ("+"/"-") 1*32(SuitableCharacter)
  contents:
  - 'localOptionExtensionName = "x" ("+"/"-") 1*32(SuitableCharacter)

    '
- title: localOptionExtensionValue = 1*32(SuitableCharacter) / quotedString
  contents:
  - 'localOptionExtensionValue = 1*32(SuitableCharacter) / quotedString

    '
- title: ConnectionMode = "sendonly" / "recvonly" / "sendrecv" /
  contents:
  - "ConnectionMode = \"sendonly\" / \"recvonly\" / \"sendrecv\" /\n             \
    \    \"confrnce\" / \"inactive\" / \"loopback\" /\n                 \"conttest\"\
    \ / \"netwloop\" / \"netwtest\" / \"data\"\n"
- title: RequestedEvents = [requestedEvent 0*("," 0*(WSP) requestedEvent)]
  contents:
  - 'RequestedEvents = [requestedEvent 0*("," 0*(WSP) requestedEvent)]

    '
- title: requestedEvent = eventName [ "(" requestedActions ")" ]
  contents:
  - 'requestedEvent = eventName [ "(" requestedActions ")" ]

    '
- title: eventName = [ (packageName / "*") "/" ] (eventId / "all" / eventRange)
  contents:
  - "eventName = [ (packageName / \"*\") \"/\" ] (eventId / \"all\" / eventRange)\n\
    \            [ \"@\" (ConnectionId / \"$\" / \"*\") ]\n"
- title: packageName = 1*(ALPHA / DIGIT / HYPHEN)
  contents:
  - 'packageName = 1*(ALPHA / DIGIT / HYPHEN)

    '
- title: eventId = 1*(SuitableCharacter)
  contents:
  - 'eventId = 1*(SuitableCharacter)

    '
- title: eventRange = "[" 1*(DIGIT / DTMFLetter / "*" / "#" /
  contents:
  - "eventRange = \"[\" 1*(DIGIT / DTMFLetter / \"*\" / \"#\" /\n                \
    \        (DIGIT \"-\" DIGIT)/(DTMFLetter \"-\"\n                         DTMFLetter))\
    \ \"]\"\n"
- title: requestedActions = requestedAction 0*("," 0*(WSP) requestedAction)
  contents:
  - 'requestedActions = requestedAction 0*("," 0*(WSP) requestedAction)

    '
- title: requestedAction = "N" / "A" / "D" / "S" / "I" / "K" /
  contents:
  - "requestedAction = \"N\" / \"A\" / \"D\" / \"S\" / \"I\" / \"K\" /\n         \
    \         \"E\" \"(\" EmbeddedRequest \")\"\n"
- title: EmbeddedRequest =   (      "R" "(" EmbeddedRequestList ")"
  contents:
  - "EmbeddedRequest =   (      \"R\" \"(\" EmbeddedRequestList \")\"\n          \
    \            [\",\" \"S\" \"(\" EmbeddedSignalRequest \")\" ]\n              \
    \        [\",\" \"D\" \"(\" EmbeddedDigitMap \")\" ] )\n                /   (\
    \      \"S\" \"(\" EmbeddedSignalRequest \")\"\n                      [\",\" \"\
    D\" \"(\" EmbeddedDigitMap \")\" ] )\n                /   (      \"D\" \"(\" EmbeddedDigitMap\
    \ \")\" )\n"
- title: EmbeddedRequestList = RequestedEvents
  contents:
  - 'EmbeddedRequestList = RequestedEvents

    '
- title: EmbeddedSignalRequest = SignalRequests
  contents:
  - 'EmbeddedSignalRequest = SignalRequests

    '
- title: EmbeddedDigitMap = DigitMap
  contents:
  - 'EmbeddedDigitMap = DigitMap

    '
- title: SignalRequests = [ SignalRequest 0*("," 0*(WSP) SignalRequest ) ]
  contents:
  - 'SignalRequests = [ SignalRequest 0*("," 0*(WSP) SignalRequest ) ]

    '
- title: SignalRequest = eventName [ "(" eventParameters ")" ]
  contents:
  - 'SignalRequest = eventName [ "(" eventParameters ")" ]

    '
- title: eventParameters = eventParameter 0*("," 0*(WSP) eventParameter)
  contents:
  - 'eventParameters = eventParameter 0*("," 0*(WSP) eventParameter)

    '
- title: eventParameter = eventParameterString / quotedString
  contents:
  - 'eventParameter = eventParameterString / quotedString

    '
- title: eventParameterString = 1*(SuitableCharacter)
  contents:
  - 'eventParameterString = 1*(SuitableCharacter)

    '
- title: DigitMap = DigitString  / "(" DigitStringList ")"
  contents:
  - 'DigitMap = DigitString  / "(" DigitStringList ")"

    '
- title: DigitStringList = DigitString 0*( "|" DigitString )
  contents:
  - 'DigitStringList = DigitString 0*( "|" DigitString )

    '
- title: DigitString = 1*(DigitStringElement)
  contents:
  - 'DigitString = 1*(DigitStringElement)

    '
- title: DigitStringElement = DigitPosition ["."]
  contents:
  - 'DigitStringElement = DigitPosition ["."]

    '
- title: DigitPosition = DigitMapLetter / DigitMapRange
  contents:
  - 'DigitPosition = DigitMapLetter / DigitMapRange

    '
- title: DigitMapLetter = DIGIT / "#" / "*" / "A" / "B" / "C" / "D" / "T"
  contents:
  - 'DigitMapLetter = DIGIT / "#" / "*" / "A" / "B" / "C" / "D" / "T"

    '
- title: DigitMapRange =  "x" / "[" 1*DigitLetter "]"
  contents:
  - 'DigitMapRange =  "x" / "[" 1*DigitLetter "]"

    '
- title: DigitLetter ::= *((DIGIT "-" DIGIT ) / DigitMapLetter)
  contents:
  - 'DigitLetter ::= *((DIGIT "-" DIGIT ) / DigitMapLetter)

    '
- title: ObservedEvents = SignalRequests
  contents:
  - 'ObservedEvents = SignalRequests

    '
- title: EventStates = SignalRequests
  contents:
  - 'EventStates = SignalRequests

    '
- title: ConnectionParameters = [ConnectionParameter
  contents:
  - "ConnectionParameters = [ConnectionParameter\n                        0*( \",\"\
    \ 0*(WSP) ConnectionParameter )\n"
- title: ConnectionParameter = ( "PS" "=" packetsSent )
  contents:
  - "ConnectionParameter = ( \"PS\" \"=\" packetsSent )\n                    / ( \"\
    OS\" \"=\" octetsSent )\n                    / ( \"PR\" \"=\" packetsReceived\
    \ )\n                    / ( \"OR\" \"=\" octetsReceived )\n                 \
    \   / ( \"PL\" \"=\" packetsLost )\n                    / ( \"JI\" \"=\" jitter\
    \ )\n                    / ( \"LA\" \"=\" averageLatency )\n                 \
    \   / ( ConnectionParameterExtensionName \"=\"\n                        ConnectionParameterExtensionValue\
    \ )\n"
- title: packetsSent = 1*9(DIGIT)
  contents:
  - 'packetsSent = 1*9(DIGIT)

    '
- title: octetsSent = 1*9(DIGIT)
  contents:
  - 'octetsSent = 1*9(DIGIT)

    '
- title: packetsReceived = 1*9(DIGIT)
  contents:
  - 'packetsReceived = 1*9(DIGIT)

    '
- title: octetsReceived = 1*9(DIGIT)
  contents:
  - 'octetsReceived = 1*9(DIGIT)

    '
- title: packetsLost = 1*9(DIGIT)
  contents:
  - 'packetsLost = 1*9(DIGIT)

    '
- title: jitter = 1*9(DIGIT)
  contents:
  - 'jitter = 1*9(DIGIT)

    '
- title: averageLatency = 1*9(DIGIT)
  contents:
  - 'averageLatency = 1*9(DIGIT)

    '
- title: ConnectionParameterExtensionName = "X" "-" 2*ALPHA
  contents:
  - 'ConnectionParameterExtensionName = "X" "-" 2*ALPHA

    '
- title: ConnectionParameterExtensionValue = 1*9(DIGIT)
  contents:
  - 'ConnectionParameterExtensionValue = 1*9(DIGIT)

    '
- title: ReasonCode = 3DIGIT [SPACE 1*(%x20-7E)]
  contents:
  - 'ReasonCode = 3DIGIT [SPACE 1*(%x20-7E)]

    '
- title: SpecificEndpointID = endpointName
  contents:
  - 'SpecificEndpointID = endpointName

    '
- title: SecondEndpointID = endpointName
  contents:
  - 'SecondEndpointID = endpointName

    '
- title: RequestedInfo = [infoCode 0*("," infoCode)]
  contents:
  - 'RequestedInfo = [infoCode 0*("," infoCode)]

    '
- title: infoCode = "B" / "C" / "I" / "N" / "X" / "L" / "M" /
  contents:
  - "infoCode = \"B\" / \"C\" / \"I\" / \"N\" / \"X\" / \"L\" / \"M\" /\n        \
    \   \"R\" / \"S\" / \"D\" / \"O\" / \"P\" / \"E\" / \"Z\" /\n           \"Q\"\
    \ / \"T\" / \"RC\" / \"LC\" / \"A\" / \"ES\" / \"RM\" / \"RD\"\n"
- title: QuarantineHandling = loopControl / processControl /
  contents:
  - "QuarantineHandling = loopControl / processControl /\n              (loopControl\
    \ \",\" processControl )\n"
- title: loopControl = "step" / "loop"
  contents:
  - 'loopControl = "step" / "loop"

    '
- title: processControl = "process" / "discard"
  contents:
  - 'processControl = "process" / "discard"

    '
- title: DetectEvents = [eventName 0*("," eventName)]
  contents:
  - 'DetectEvents = [eventName 0*("," eventName)]

    '
- title: RestartMethod = "graceful" / "forced" / "restart" / "disconnected"
  contents:
  - 'RestartMethod = "graceful" / "forced" / "restart" / "disconnected"

    '
- title: RestartDelay = 1*6(DIGIT)
  contents:
  - 'RestartDelay = 1*6(DIGIT)

    '
- title: extensionParameter = "X" ("-"/"+") 1*6(ALPHA / DIGIT)
  contents:
  - 'extensionParameter = "X" ("-"/"+") 1*6(ALPHA / DIGIT)

    '
- title: parameterString = 1*(%x20-7F)
  contents:
  - 'parameterString = 1*(%x20-7F)

    '
- title: MGCPResponse = MGCPResponseLine 0*(MGCPParameter)
  contents:
  - "MGCPResponse = MGCPResponseLine 0*(MGCPParameter)\n                [EOL *SDPinformation]\n"
- title: MGCPResponseLine = (<responseCode> 1*(WSP) <transaction-id>
  contents:
  - "MGCPResponseLine = (<responseCode> 1*(WSP) <transaction-id>\n               \
    \           [1*(WSP) <responseString>] EOL)\n"
- title: responseCode = 3DIGIT
  contents:
  - 'responseCode = 3DIGIT

    '
- title: responseString = *(%x20-7E)
  contents:
  - 'responseString = *(%x20-7E)

    '
- title: SuitableCharacter= DIGIT / ALPHA / "+" / "-" / "_" / "&" /
  contents:
  - "SuitableCharacter= DIGIT / ALPHA / \"+\" / \"-\" / \"_\" / \"&\" /\n        \
    \           \"!\" / \"'\" / \"|\" / \"=\" / \"#\" / \"?\" / \"/\" /\n        \
    \           \".\" / \"$\" / \"*\" / \";\" / \"@\" / \"[\" / \"]\" /\n        \
    \           \"^\" / \"`\" / \"{\" / \"}\" / \"~\"\n"
- title: quotedString = DQUOTE visibleString
  contents:
  - "quotedString = DQUOTE visibleString\n                 0*(quoteEscape visibleString)\
    \ DQUOTE\n"
- title: quoteEscape = DQUOTE DQUOTE
  contents:
  - 'quoteEscape = DQUOTE DQUOTE

    '
- title: visibleString = (%x00-21 / %x23-FF)
  contents:
  - 'visibleString = (%x00-21 / %x23-FF)

    '
- title: EOL = CRLF / LF
  contents:
  - 'EOL = CRLF / LF

    '
- title: SDPinformation = ;See RFC 2327
  contents:
  - 'SDPinformation = ;See RFC 2327

    '
- title: 3.5.  Encoding of the session description
  contents:
  - "3.5.  Encoding of the session description\n   The session description is encoded\
    \ in conformance with the session\n   description protocol, SDP. MGCP implementations\
    \ are expected to be\n   fully capable of parsing any conformant SDP message,\
    \ and should send\n   session descriptions that strictly conform to the SDP standard.\
    \ The\n   usage of SDP actually depends on the type of session that is being,\n\
    \   as specified in the \"mode\" parameter:\n   *  if the mode is set to \"data\"\
    , the session description describes\n      the configuration of a data access\
    \ service.\n   *  if the mode is set to any other value, the session description\
    \ is\n      for an audio service.\n   For an audio service, the gateway will consider\
    \ the information\n   provided in SDP for the \"audio\" media. For a data service,\
    \ the\n   gateway will consider the information provided for the \"network-\n\
    \   access\" media.\n"
- title: 3.5.1.  Usage of SDP for an audio service
  contents:
  - "3.5.1.  Usage of SDP for an audio service\n   In a telephony gateway, we only\
    \ have to describe sessions that use\n   exactly one media, audio. The parameters\
    \ of SDP that are relevant for\n   the telephony application are:\n      At the\
    \ session description level:\n      *  The IP address of the remote gateway (in\
    \ commands) or of the\n         local gateway (in responses), or multicast address\
    \ of the audio\n         conference, encoded as an SDP \"connection data\" parameter.\
    \ This\n         parameter specifies the IP address that will be used to\n   \
    \      exchange RTP packets.\n      For the audio media:\n      *  Media description\
    \ field (m) specifying the audio media, the\n         transport port used for\
    \ receiving RTP packets by the remote\n         gateway (commands) or by the local\
    \ gateway (responses), the\n         RTP/AVP transport, and the list of formats\
    \ that the gateway\n         will accept. This list should normally always include\
    \ the code\n         0 (reserved for PCMU).\n      *  Optionally, RTPMAP attributes\
    \ that define the encoding of\n         dynamic audio formats,\n      *  Optionally,\
    \ a packetization period (packet time) attribute\n         (Ptime) defining the\
    \ duration of the packet,\n      *  Optionally, an attribute defining the type\
    \ of connection\n         (sendonly, recvonly, sendrecv, inactive). Note that\
    \ this\n         attribute does not have a direct relation with the \"Mode\"\n\
    \         parameter of MGCP.  In fact, the SDP type of connection will\n     \
    \    most of the time be set to \"sendrecv\", regardless of the value\n      \
    \   used by MGCP.  Other values will only be used rarely, for\n         example\
    \ in the case of information or announcement servers that\n         need to establish\
    \ one way connections.\n      *  The IP address of the remote gateway (in commands)\
    \ or of the\n         local gateway (in responses), if it is not present at the\n\
    \         session level.\n      An example of SDP specification for an audio connection\
    \ could be:\n            v=0\n            c=IN IP4 128.96.41.1\n            m=audio\
    \ 3456 RTP/AVP 0 96\n            a=rtpmap:96 G726-32/8000\n   There is a request,\
    \ in some environments, to use the MGCP to\n   negotiate connections that will\
    \ use other transmission channels than\n   RTP over UDP and IP. This will be detailed\
    \ in an extension to this\n   document.\n"
- title: 3.5.2.  Usage of SDP in a network access service
  contents:
  - "3.5.2.  Usage of SDP in a network access service\n   The parameters of SDP that\
    \ are relevant for a data network access\n   application are:\n      For the data\
    \ media:\n      *  Media description field (m) specifying the network access\n\
    \         media, identified by the code \"m=nas/xxxx\", where \"xxxx\"\n     \
    \    describes the access control method that should be used for\n         parametrizing\
    \ the network access, as specified below. The field\n         may also specify\
    \ the port that should be used for contacting\n         the server, as specified\
    \ in the SDP syntax.\n      *  Connection address parameter (c=) specifying the\
    \ address, or\n         the domain name, of the server that implement the access\n\
    \         control method. This parameter may also be specified at the\n      \
    \   session level.\n      *  Optionally, a bearer type attribute (a=bearer:) describing\
    \ the\n         type of data connection to be used, including the modem type.\n\
    \      *  Optionally, a framing type attribue (a=framing:) describing the\n  \
    \       type of framing that will be used on the channel.\n      *  Optionally,\
    \ attributes describing the called number\n         (a=dialed:), the number to\
    \ which the call was delivered\n         (a=called:) and the calling number (a=dialing:).\n\
    \      *  Optionally, attributes describing the range of addresses that\n    \
    \     could be used by the dialup client on its LAN (a=subnet:).\n      *  Optionally,\
    \ an encryption key, encoded as specified in the SDP\n         protocol(k=).\n\
    \   The connection address shall be encoded as specified in the SDP\n   standard.\
    \ It will be used in conjunction with the port specified in\n   the media line\
    \ to access a server, whose type will one of:\n       __________________________________________________________\n\
    \      | Method name|  Method description                        |\n      |____________|____________________________________________|\n\
    \      | radius     |  Authentication according                  |\n      |  \
    \          |  to the Radius protocol.                   |\n      | tacacs    \
    \ |  Authentication according                  |\n      |            |  to the\
    \ TACACS+ protocol.                  |\n      | diameter   |  Authentication according\
    \                  |\n      |            |  to the Diameter protocol.        \
    \         |\n      | l2tp       |  Level 2 tunneling protocol.               |\n\
    \      |            |  The address and port are those of the LNS.|\n      | login\
    \      |  Local login. (There is normally           |\n      |            |  no\
    \ server for that method.)               |\n      | none       |  No authentication\
    \ required.               |\n      |            |  (The call was probably vetted\
    \             |\n      |            |  by the Call Agent.)                   \
    \    |\n      |____________|____________________________________________|\n  \
    \ If needed, the gateway may use the key specified in the announcement\n   to\
    \ access the service. That key, in particular, may be used for the\n   establishment\
    \ of an L2TP tunnel.\n   The bearer attribute is composed of a bearer name and\
    \ an optional\n   extension.  The bearer type specifies the type of modulation\
    \ (modem\n   name) or, in the case of digital connections, the type of ISDN\n\
    \   service (8 bits, 7 bits).  When an extension is present, it is\n   separated\
    \ from the bearer name by a single slash (/).  The valid\n   values of the bearer\
    \ attribute are defined in the following table:\n    ____________________________________________________________________\n\
    \   | Type of bearer description      |  Example of values              |\n  \
    \ |_________________________________|_________________________________|\n   |\
    \ ITU modem standard              |  V.32, V.34, V.90.              |\n   | ITU\
    \ modem standard qualified    |  v.90/3com,                     |\n   | by a manufacturer\
    \ name          |  v.90/rockwell,                 |\n   |                    \
    \             |  v.90/xxx                       |\n   | Well known modem types\
    \          |  X2, K56flex                    |\n   | ISDN transparent access,\
    \ 64 kbps|  ISDN64                         |\n   | ISDN64 + V.110            \
    \      |  ISDN64/V.110                   |\n   | ISDN64 + V.120              \
    \    |  ISDN64/V.120                   |\n   | ISDN transparent access, 56 kbps|\
    \  ISDN56                         |\n   | Informal identification         |  (Requires\
    \ coordination between |\n   |                                 |  the Call Agent\
    \ and the gateway)|\n   |_________________________________|_________________________________|\n\
    \   The valid values of the framing attribute are defined in the\n   following\
    \ table:\n             _________________________________________________\n   \
    \         | Type of framing description|  Example of values|\n            |____________________________|___________________|\n\
    \            | PPP, asynchronous framing  |  ppp-asynch       |\n            |\
    \ PPP, HDLC framing          |  ppp-hdlc         |\n            | SLIP, asynchronous\
    \         |  slip             |\n            | Asynchronous, no framing   |  asynch\
    \           |\n            |____________________________|___________________|\n\
    \   The network access authentication parameter provides instructions on\n   the\
    \ access control that should be exercized for the data call. This\n   optional\
    \ attribute is encoded as:\n        \"a=subnet:\" <network type> <address type>\n\
    \           <connection address> \"/\" <prefix length>\n   Where the parameters\
    \ \"network type\", \"address type\", and \"connection\n   address\" are formatted\
    \ as defined for the connection address\n   parameter (c=) in SDP, and where the\
    \ \"prefix length\" is a decimal\n   representation of the number of bits in the\
    \ prefix.\n   Examples of SDP announcement for the network access service could\
    \ be:\n         v=0\n         m=nas/radius\n         c=IN IP4 radius.example.net\n\
    \         a=bearer:v.34\n         a=framing:ppp-asynch\n         a=dialed:18001234567\n\
    \         a=called:12345678901\n         a=dialing:12340567890\n         v=0\n\
    \         m=nas/none\n         c=IN IP4 128.96.41.1\n         a=subnet:IN IP4\
    \ 123.45.67.64/26\n         a=bearer:isdn64\n         a=framing:ppp-sync\n   \
    \      a=dialed:18001234567\n         a=dialing:2345678901\n         v=0\n   \
    \      c=IN IP4 access.example.net\n         m=nas/l2tp\n         k=clear:some-shared-secret\n\
    \         a=bearer:v.32\n         a=framing:ppp-asynch\n         a=dialed:18001234567\n\
    \         a=dialing:2345678901\n"
- title: 3.5.3.  Usage of SDP for ATM connections
  contents:
  - "3.5.3.  Usage of SDP for ATM connections\n   The specification of the SDP payload\
    \ for ATM connections will be\n   described in a companion document, \"Usage of\
    \ MGCP to control Voice\n   over ATM gateways.\" The following text is indicative.\n\
    \   The SDP payload will specify:\n   *  That the connection is to be established\
    \ over an ATM interface,\n      using the \"c=\" parameter of SDP to specify an\
    \ address in the ATM\n      family, the ATM addressing variant (NSAP, UNI, E.164)\
    \ and the ATM\n      address.\n   *  The \"m=audio\" parameter will specify the\
    \ audio encoding and, if\n      needed, the VPI and VCI.\n   *  Additional attributes\
    \ parameters (a=) will be used to specify the\n      ATM coding variants, such\
    \ as the type of adaptation layer and the\n      error correction or loss compenmsation\
    \ algorithms.\n   An example of SDP payload for an ATM connection could be:\n\
    \         v=0 c=ATM NSAP\n         47.0091.8100.0000.0060.3e64.fd01.0060.3e64.fd01.fe\
    \ m=audio\n         5/1002 ATM/AVP PCMU a=connection_type:AAL2\n"
- title: 3.5.4.  Usage of SDP for local connections
  contents:
  - "3.5.4.  Usage of SDP for local connections\n   When MGCP is used to set up internal\
    \ connections within a single\n   gateway, the SDP format is used to encode the\
    \ parameters of that\n   connection.  The following parameters will be used:\n\
    \   *  The connection parameter (C=) will specify that the connection is\n   \
    \   local, using the keyword \"LOCAL\" as network type space, the\n      keyword\
    \ \"EPN\" (endpoint name) as  address type, and the name of\n      the endpoint\
    \ as the connection-address.\n   *  The \"m=audio\" parameter will specify a port\
    \ number, which will\n      always be set to 0, the type of protocol, always set\
    \ to the\n      keyword LOCAL, and the type of encoding, using the same\n    \
    \  conventions used for RTP (RTP payload numbers.) The type of\n      encoding\
    \ should normally be set to 0 (PCMU).\n   An example of local SDP payload could\
    \ be:\n         v=0\n         c=LOCAL EPN X35V3+A4/13\n         m=audio 0 LOCAL\
    \ 0\n"
- title: 3.6.  Transmission over UDP
  contents:
  - "3.6.  Transmission over UDP\n   MGCP messages are transmitted over UDP. Commands\
    \ are sent to one of\n   the IP addresses defined in the DNS for the specified\
    \ endpoint . The\n   responses are sent back to the source address of the commands.\n\
    \   When no port is specified for the endpoint, the commands should be\n   sent:\n\
    \   *  by the Call Agents, to the default MGCP port for gateways, 2427.\n   *\
    \  by the Gateways, to the default MGCP port for Call Agents, 2727.\n"
- title: 3.6.1.  Providing the At-Most-Once functionality
  contents:
  - "3.6.1.  Providing the At-Most-Once functionality\n   MGCP messages, being carried\
    \ over UDP, may be subject to losses. In\n   the absence of a timely response,\
    \ commands are repeated. Most MGCP\n   commands are not idempotent.  The state\
    \ of the gateway would become\n   unpredictable if, for example, CreateConnection\
    \ commands were\n   executed several times.  The transmission procedures must\
    \ thus\n   provide an \"At-Most-Once\" functionality.\n   MGCP entities are expected\
    \ to keep in memory a list of the responses\n   that they sent to recent transactions\
    \ and a list of the transactions\n   that are currently being executed. The transaction\
    \ identifiers of\n   incoming commands are compared to the transaction identifiers\
    \ of the\n   recent responses. If a match is found, the MGCP entity does not\n\
    \   execute the transaction, but simply repeats the response. The\n   remaining\
    \ commands will be compared to the list of current\n   transaction. If a match\
    \ is found, the MGCP entity does not execute\n   the transaction, which is simply\
    \ ignored.\n   The procedure use a long timer value, noted LONG-TIMER in the\n\
    \   following.  The timer should be set larger than the maximum duration\n   of\
    \ a transaction, which should take into account the maximum number\n   of repetitions,\
    \ the maximum value of the repetition timer and the\n   maximum propagation delay\
    \ of a packet in the network.  A suggested\n   value is 30 seconds.\n   The copy\
    \ of the responses can be destroyed either LONG-TIMER seconds\n   after the response\
    \ is issued, or when the gateway (or the call agent)\n   receives a confirmation\
    \ that the response has been received, through\n   the \"Response Acknowledgement\
    \ attribute\". For transactions that are\n   acknowledged through this attribute,\
    \ the gateway shall keep a copy of\n   the transaction-id for LONG-TIMER seconds\
    \ after the response is\n   issued, in order to detect and ignore duplicate copies\
    \ of the\n   transaction request that could be produced by the network.\n"
- title: 3.6.2.  Transaction identifiers and three ways handshake
  contents:
  - "3.6.2.  Transaction identifiers and three ways handshake\n   Transaction identifiers\
    \ are integer numbers in the range from 0 to\n   999,999,999.  Call-agents may\
    \ decide to use a specific number space\n   for each of the gateways that they\
    \ manage, or to use the same number\n   space for all gateways that belong to\
    \ some arbitrary group.  Call\n   agents may decide to share the load of managing\
    \ a large gateway\n   between several independent processes.  These processes\
    \ will share\n   the same transaction number space.  There are multiple possible\n\
    \   implementations of this sharing, such as having a centralized\n   allocation\
    \ of transaction identifiers, or pre-allocating non-\n   overlapping ranges of\
    \ identifiers to different processes.  The\n   implementations must guarantee\
    \ that unique transaction identifiers\n   are allocated to all transactions that\
    \ originate from a logical call\n   agent, as defined in the \"states, failover\
    \ and race conditions\"\n   section. Gateways can simply detect duplicate transactions\
    \ by looking\n   at the transaction identifier only.\n   The Response Acknowledgement\
    \ Attribute can be found in any command.\n   It carries a set of \"confirmed transaction-id\
    \ ranges.\"\n   MGCP gateways may choose to delete the copies of the responses\
    \ to\n   transactions whose id is included in \"confirmed transaction-id\n   ranges\"\
    \ received in the Response Confirmation messages. They should\n   silently discard\
    \ further commands from that Call Agent when the\n   transaction-id falls within\
    \ these ranges.\n   The \"confirmed transaction-id ranges\" values shall not be\
    \ used if\n   more than LONG-TIMER seconds have elapsed since the gateway issued\n\
    \   its last response to that call agent, or when a gateway resumes\n   operation.\
    \  In this situation, commands should be accepted and\n   processed, without any\
    \ test on the transaction-id.\n   Commands that carry the \"Response Acknowledgement\
    \ attribute\" may be\n   transmitted in disorder.  The gateway shall retain the\
    \ union of the\n   \"confirmed transaction-id ranges\" received in recent commands.\n"
- title: 3.6.3.  Computing retransmission timers
  contents:
  - "3.6.3.  Computing retransmission timers\n   It is the responsibility of the requesting\
    \ entity to provide suitable\n   time outs for all outstanding commands, and to\
    \ retry commands when\n   time outs have been exceeded. Furthermore, when repeated\
    \ commands\n   fail to be acknowledged, it is the responsibility of the requesting\n\
    \   entity to seek redundant services and/or clear existing or pending\n   connections.\n\
    \   The specification purposely avoids specifying any value for the\n   retransmission\
    \ timers. These values are typically network dependent.\n   The retransmission\
    \ timers should normally estimate the timer by\n   measuring the time spent between\
    \ the sending of a command and the\n   return of a response. One possibility is\
    \ to use the algorithm\n   implemented in TCP-IP, which uses two variables:\n\
    \   *  the average acknowledgement delay, AAD, estimated through an\n      exponentially\
    \ smoothed average of the observed delays,\n   *  the average deviation, ADEV,\
    \ estimated through an exponentially\n      smoothed average of the absolute value\
    \ of the difference between\n      the observed delay and the current average\n\
    \   The retransmission timer, in TCP, is set to the sum of the average\n   delay\
    \ plus N times the average deviation. In MGCP, the maximum value\n   of the timer\
    \ should however be bounded, in order to guarantee that no\n   repeated packet\
    \ will be received by the gateways after LONG-TIMER\n   seconds.  A suggested\
    \ maximum value is 4 seconds.\n   After any retransmission, the MGCP entity should\
    \ do the following:\n   *  It should double the estimated value of the average\
    \ delay, AAD\n   *  It should compute a random value, uniformly distributed between\n\
    \      0.5 AAD and AAD\n   *  It should set the retransmission timer to the sum\
    \ of that random\n      value and N times the average deviation.\n   This procedure\
    \ has two effects. Because it includes an exponentially\n   increasing component,\
    \ it will automatically slow down the stream of\n   messages in case of congestion.\
    \ Because it includes a random\n   component, it will break the potential synchronization\
    \ between\n   notifications triggered by the same external event.\n"
- title: 3.6.4.  Piggy backing
  contents:
  - "3.6.4.  Piggy backing\n   There are cases when a Call Agent will want to send\
    \ several messages\n   at the same time to the same gateways.  When several MGCP\
    \ messages\n   have to be sent in the same UDP packets, they should be separated\
    \ by\n   a line of text that contain a single dot, as in for example:\n      \
    \   200 2005 OK\n         DLCX 1244 card23/21@trgw-7.example.net MGCP 1.0\n  \
    \       C: A3C47F21456789F0\n         I: FDE234C8\n   The piggy-backed messages\
    \ should be processed exactly has if they had\n   been received in several simultaneous\
    \ messages.\n"
- title: 3.6.5.  Provisional responses
  contents:
  - "3.6.5.  Provisional responses\n   Executing some transactions may require a long\
    \ time. Long execution\n   times may interact with the timer based retransmission\
    \ procedure.\n   This may result either in an inordinate number of retransmissions,\
    \ or\n   in timer values that become too long to be efficient.\n   Gateways that\
    \ can predict that a transaction will require a long\n   execution time may send\
    \ a provisional response, with response code\n   100.  They should send this response\
    \ if they receive a repetition of\n   a transaction that is still being executed.\n\
    \   MGCP entities that receive a provisional response shall switch to a\n   longer\
    \ repetition timer for that transaction.\n"
- title: 4.  States, failover and race conditions.
  contents:
  - "4.  States, failover and race conditions.\n   In order to implement proper call\
    \ signalling, the Call Agent must\n   keep track of the state of the endpoint,\
    \ and the gateway must make\n   sure that events are properly notified to the\
    \ call agent.  Special\n   conditions exist when the gateway or the call agent\
    \ are restarted:\n   the gateway must be redirected to a new call agent during\
    \ \"failover\"\n   procedures, the call agent must take special action when the\
    \ gateway\n   is taken offline, or restarted.\n"
- title: 4.1.  Basic Asumptions
  contents:
  - "4.1.  Basic Asumptions\n   The support of \"failover\" is based on the following\
    \ assumptions:\n   *  Call Agents are identified by their domain name, not their\
    \ network\n      addresses, and several addresses can be associated with a domain\n\
    \      name.\n   *  An endpoint has one NotifiedEntity associated with it any\
    \ given\n      point in time.\n   *  The NotifiedEntity is the last value of the\
    \ \"NotifiedEntity\"\n      parameter received for this endpoint (including wild-carded\
    \ end-\n      point-names). If no explicit \"NotifiedEntity\" parameter has been\n\
    \      received, the \"NotifiedEntity\" defaults to the provisioned\n      NotifiedEntity\
    \ value, or if no value was provisioned to the source\n      address of the last\
    \ command received for the endpoint,\n   *  Responses to commands are always sent\
    \ to the source address of the\n      command, regardless of the NotifiedEntity.\n\
    \   *  When the \"notified entity\" refers to a domain name that resolves\n  \
    \    to multiple IP- address, endpoints are capable of switching\n      between\
    \ different interfaces on the same  logical call agent,\n      however they cannot\
    \ switch to other (backup) call agent(s) on\n      their own. A backup call agent\
    \ can however instruct them to\n      switch, either directly or indirectly.\n\
    \   *  If an entire call agent becomes unavailable, the endpoints managed\n  \
    \    by that call agent will eventually become \"disconnected\". The only\n  \
    \    way for these endpoints to become connected again is either for\n      the\
    \ failed call agent to become available, or for a backup call\n      agent to\
    \ contact the affected endpoints.\n   *  When a backup call agent has taken over\
    \ control of a group of\n      endpoints, it is assumed that the failed call agent\
    \ will\n      communicate and synchronize with the backup call agent in order\
    \ to\n      transfer control of the affected endpoints back to the original\n\
    \      call agent (if that's even desired - maybe the failed call agent\n    \
    \  should simply become the backup call agent now).\n   We should note that handover\
    \ conflict resolution between separate\n   CA's is not in place - we are relying\
    \ strictly on the CA's knowing\n   what they are doing and communicating with\
    \ each other (although\n   AuditEndpoint can be used to learn about the current\
    \ NotifiedEntity).\n"
- title: '4.2.  Security, Retransmission, and Detection of Lost Associations:'
  contents:
  - "4.2.  Security, Retransmission, and Detection of Lost Associations:\n   The media\
    \ gateway control protocol is organized as a set of\n   transactions, each of\
    \ which is composed of a command and a response,\n   commonly referred to as an\
    \ acknowledgement.  The MGCP messages, being\n   carried over UDP, may be subject\
    \ to losses. In the absence of a\n   timely response, commands are repeated. MGCP\
    \ entities are expected to\n   keep in memory a list of the responses that they\
    \ sent to recent\n   transactions, i.e. a list of all the responses they sent\
    \ over the\n   last LONG-TIMER seconds, and a list of the transactions that are\n\
    \   currently being executed.\n   The transaction identifiers of incoming commands\
    \ are compared to the\n   transaction identifiers of the recent responses. If\
    \ a match is found,\n   the MGCP entity does not execute the transaction, but\
    \ simply repeats\n   the response. The remaining commands will be compared to\
    \ the list of\n   current transaction. If a match is found, the MGCP entity does\
    \ not\n   execute the transaction, which is simply ignored - a response will be\n\
    \   provided when the execution of the command is complete.\n   The repetition\
    \ mechanism is used to guard against four types of\n   possible errors:\n   *\
    \  transmission errors, when for example a packet is lost due to\n      noise\
    \ on a line or congestion in a queue,\n   *  component failure, when for example\
    \ an interface to a call agent\n      becomes unavailable,\n   *  call agent failure,\
    \ when for example an entire call agent becomes\n      unavailable,\n   *  failover,\
    \ when a new call agent is \"taking over\" transparently.\n   The elements should\
    \ be able to derive from the past history an\n   estimate of the packet loss rate\
    \ due to transmission errors.  In a\n   properly configured system, this loss\
    \ rate should be kept very low,\n   typically less than 1%.  If a call agent or\
    \ a gateway has to repeat a\n   message more than a few times, it is very legitimate\
    \ to assume that\n   something else than a transmission error is occurring.  For\
    \ example,\n   given a loss rate of 1%, the probability that 5 consecutive\n \
    \  transmission attempts fail is 1 in 100 billion, an event that should\n   occur\
    \ less than once every 10 days for a call agent that processes\n   1,000 transactions\
    \ per second. (Indeed, the number of repetition that\n   is considered excessive\
    \ should be a function of the prevailing packet\n   loss rate.) We should note\
    \ that the \"suspicion threshold\", which we\n   will call \"Max1\", is normally\
    \ lower than the \"disconnection\n   threshold\", which should be set to a larger\
    \ value.\n      Command issued: N=0\n              |\n       transmission: N++\n\
    \              |  +------------ retransmission: N++ -----------+\n           \
    \   |  |                                            |\n              |  |    \
    \   transmission                         |\n              |  |  +---to new address\
    \ -+<--------------------|--+\n              |  |  |        N=0        |     \
    \                |  |\n              V  V  V                   |             \
    \        |  |\n        +-----------+                   |                     |\
    \  |\n        | awaiting  |- new call agent ->+  +------------+     |  |\n   \
    \     |  response |--- timer elapsed --->| N > Max1 ? |-(no)+  |\n        +-----------+\
    \ <----------+         +------------+     ^  |\n              |   |          \
    \    |               |            |  |\n              |   +- wrong key? -+   \
    \          (yes)          |  |\n              |                              \
    \    |            |  |\n      response received                    (if N=Max1,\
    \        |  |\n              |                             or N=Max2         |\
    \  |\n              |                             check DNS)        |  |\n   \
    \           v                                  |            |  |\n           \
    \ (end)                       +---------------+     |  |\n                   \
    \                     |more addresses?|(yes)|--+\n                           \
    \             +---------------+     |\n                                      \
    \           |            |\n                                               (no)\
    \           |\n                                                 |            |\n\
    \                                           +------------+     |\n           \
    \                                | N > Max2 ? |(no)-+\n                      \
    \                     +------------+\n                                       \
    \          |\n                                               (yes)\n         \
    \                                        |\n                                 \
    \                v\n                                          (disconnected)\n\
    \   A classic retransmission algorithm would simply count the number of\n   successive\
    \ repetitions, and conclude that the association is broken\n   after re-transmitting\
    \ the packet an excessive number of times\n   (typically between 7 and 11 times.)\
    \ In order to account for the\n   possibility of an undetected or in-progress\
    \ \"failover\", we modify the\n   classic algorithm as follows:\n   *  We request\
    \ that the gateway always checks for the presence of a\n      new call agent.\
    \ It can be noticed either by\n      -  receiving a valid multicast message announcing\
    \ a failover, or\n      -  receiving a command where the NotifiedEntity points\
    \ to the new\n         call agent, or\n      -  receiving a redirection response\
    \ pointing to a new Call Agent.\n      If a new call agent is detected, the gateway\
    \ starts transmitting\n      outstanding commands to that new agent.  Responses\
    \ to commands are\n      still transmitted to the source address of the command.\n\
    \   *  we request that if the number of repetitions for this Call Agent\n    \
    \  is larger than \"Max1\", that the gateway actively queries the name\n     \
    \ server in order to detect the possible change of the call agent\n      interfaces.\n\
    \   *  The gateway may have learned several IP addresses for the call\n      agent.\
    \ If the number of repetitions is larger than \"Max1\" and\n      lower than \"\
    Max2\", and there are more interfaces that have not\n      been tried, then the\
    \ gateway should direct the retransmissions to\n      alternate addresses.\n \
    \  *  If there are no more interfaces to try, and the number of\n      repetitions\
    \ is Max2, then the gateway contacts the DNS one more\n      time to see if any\
    \ other interface should have become available.\n      If not, the gateway is\
    \ now disconnected.\n   The procedure will maximize the chances of detecting an\
    \ ongoing\n   failover. It poses indeed two very specific problems, the potentially\n\
    \   long delays of a timer based procedure and the risk of confusion\n   caused\
    \ by the use of cryptographic protections.\n   In order to automatically adapt\
    \ to network load, MGCP specifies\n   exponentially increasing timers.  If the\
    \ initial timer is set to 200\n   milliseconds, the loss of a fifth retransmission\
    \ will be detected\n   after about 6 seconds.  This is probably an acceptable\
    \ waiting delay\n   to detect a failover.   The repetitions should continue after\
    \ that\n   delay not only in order to perhaps overcome a transient connectivity\n\
    \   problem, but also in order to allow some more time for the execution\n   of\
    \ a failover - waiting a total delay of 30 seconds is probably\n   acceptable.\n\
    \   It is however important that the maximum delay of retransmissions be\n   bounded.\
    \  Prior to any retransmission, it is checked that the time\n   elapsed since\
    \ the sending of the initial datagram is no greater than\n   T- MAX. If more than\
    \ T-MAX time has elapsed, the endpoint becomes\n   disconnected. The value T-MAX\
    \ is related to the LONG-TIMER value: the\n   LONG-TIMER value is obtained by\
    \ adding to T-MAX the maximum\n   propagation delay in the network.\n   Another\
    \ potential cause of connection failure would be the reception\n   of a \"wrong\
    \ key\" message, sent by a call agent that could not\n   authenticate the command,\
    \ presumably because it had lost the security\n   parameters of the association.\
    \  Such messages are actually not\n   authorized in IPSEC, and they should in\
    \ fact not be taken at face\n   value: an attacker could easily forge \"wrong\
    \ key\" messages in order\n   to precipitate the loss of a control connection.\
    \  The current\n   algorithm ignores these messages, which translates into a strict\n\
    \   reliance on timers.  The algorithm could in fact be improved, maybe\n   by\
    \ executing a check with the key server of the call agent after\n   \"Max1\" repetitions.\n"
- title: 4.3.  Race conditions
  contents:
  - "4.3.  Race conditions\n   MGCP deals with race conditions through the notion\
    \ of a \"quarantine\n   list\" and through explicit detection of desynchronization.\n\
    \   MGCP does not assume that the transport mechanism will maintain the\n   order\
    \ of command and responses.  This may cause race conditions, that\n   may be obviated\
    \ through a proper behavior of the call agent. (Note\n   that some race conditions\
    \ are inherent to distributed systems; they\n   would still occur, even if the\
    \ commands were transmitted in strict\n   order.)\n   In some cases, many gateways\
    \ may decide to restart operation at the\n   same time.  This may occur, for example,\
    \ if an area loses power or\n   transmission capability during an earthquake or\
    \ an ice storm.  When\n   power and transmission are reestablished, many gateways\
    \ may decide to\n   send \"RestartInProgress\" commands simultaneously, leading\
    \ to very\n   unstable operation.\n"
- title: 4.3.1.  Quarantine list
  contents:
  - "4.3.1.  Quarantine list\n   MGCP controlled gateways will receive \"notification\
    \ requests\" that\n   ask them to watch for a list of \"events.\"  The protocol\
    \ elements that\n   determine the handling of these events are the \"Requested\
    \ Events\"\n   list, the \"Digit Map\" and the \"Detect Events\" list.\n   When\
    \ the endpoint is initialized, the requested events list and the\n   digit map\
    \ are empty.  After reception of a command, the gateway\n   starts observing the\
    \ endpoint for occurrences of the events mentioned\n   in the list.\n   The events\
    \ are examined as they occur. The action that follows is\n   determined by the\
    \ \"action\" parameter associated to the event in the\n   list of requested events,\
    \ and also by the digit map.  The events that\n   are defined as \"accumulate\"\
    \ or \"treat according to digit map\" are\n   accumulated in a list of events,\
    \ the events that are marked as\n   \"treated according to the digit map\" will\
    \ additionally be accumulated\n   in the dialed string. This will go on until\
    \ one event is encountered\n   that triggers a Notification to the \"notified\
    \ entity.\"\n   The gateway, at this point, will transmit the notification command\n\
    \   and will place the endpoint in a \"notification\" state. As long as the\n\
    \   endpoint is in this notification state, the events that are to be\n   detected\
    \ on the endpoint are stored in a \"quarantine\" buffer for\n   later processing.\
    \  The events are, in a sense, \"quarantined.\" All\n   events that are specified\
    \ by the union of the RequestedEvents\n   parameter and the most recently received\
    \ DetectEvent parameter or, in\n   the absence of the latter, all events that\
    \ are referred to in the\n   RequestedEvents, should be detected and quarantined,\
    \ regardless of\n   the action associated to the event.\n   The endpoint exits\
    \ the \"notification state\" when the acknowledgement\n   of the Notify  command\
    \ is received. The Notify command may be\n   retransmitted in the \"notification\
    \ state\", as specified in section\n   3.5. When the endpoint exits the \"notification\
    \ state\" it resets the\n   list of observed events and the \"current dial string\"\
    \ of the endpoint\n   to a null value.\n   Following that point, the behavior\
    \ of the gateway depends on the\n   value of The QuarantineHandling parameter\
    \ in the notification\n   request.  If the Call Agent specified that it expected\
    \ at most one\n   notification in response to the notification request command,\
    \ then\n   the gateway should simply keep on accumulating events in the\n   quarantine\
    \ list until it receives the next notification request\n   command.\n   If the\
    \ gateway is authorized to send multiple successive Notify\n   commands, it will\
    \ proceed as follows.  When the gateway exits the\n   \"notification state\",\
    \ it resets the list of observed events and the\n   \"current dial string\" of\
    \ the endpoint to a null value and starts\n   processing the list of quarantined\
    \ events, using the already received\n   list of requested events and digit map.\
    \ When processing these events,\n   the gateway may encounter an event which requires\
    \ a Notify command to\n   be sent. If that is the case, the gateway can adopt\
    \ one of the two\n   following behaviors:\n   *  it can immediately transmit a\
    \ Notify command that will report all\n      events that were accumulated in the\
    \ list of observed events until\n      the triggering event, included, leaving\
    \ the unprocessed events in\n      the quarantine list,\n   *  or it can attempt\
    \ to empty the quarantined list and transmit a\n      single Notify command reporting\
    \ several sets of events and\n      possibly several dial strings. The dial string\
    \ is reset to a null\n      value after each triggering event. The events that\
    \ follow the last\n      triggering event are left in the quarantine list.\n \
    \  If the gateway transmits a Notify command, the end point will remain\n   in\
    \ the \"notification state\" until the acknowledgement is received. If\n   the\
    \ gateway does not find a quarantined event that requests a Notify\n   command,\
    \ it places the end point in a normal state.  Events are then\n   processed as\
    \ they come, in exactly the same way as if a Notification\n   Request command\
    \ had just been received.\n   A gateway may receive at any time a new Notification\
    \ Request command\n   for the end point. When a new notification request is received\
    \ in the\n   notification state, the gateway shall ensure that the pending\n \
    \  notification is received by the Call Agent prior to a successful\n   response\
    \ to the new NotificationRequest. It does so by using the\n   \"piggy-backing\"\
    \ functionality of the protocol. The messages will then\n   be sent in a single\
    \ packetto the source of the new\n   NotificationRequest, regardless of respectively\
    \ the source and\n   \"notified entity\" for the old and new command. The steps\
    \ involved are\n   the following:\n   a) the gateway builds a message that carries\
    \ in a single packet a\n      repetition of the old pending Notify command and\
    \ the\n      acknowledgement of the new notification request.\n   b) the endpoint\
    \ is then taken out of the \"notification state\" without\n      waiting for the\
    \ acknowledgement of the notification command.\n   c) a copy of the unacknowledged\
    \ Notify command command is kept until\n      an acknowledgement is received.\
    \  If a timer elapses, the\n      notification will be repeated, in a packet that\
    \ will also carry a\n      repetition of the acknowledgement of the notification\
    \ request.\n   d) if the acknowledgement is lost, the Call Agent will retransmit\
    \ the\n      Notification Request.  The gateway will reply to this repetition\n\
    \      by retransmitting in a single packet the unacknowledged Notify and\n  \
    \    the acknowledgement of the notification request.\n   e) if the gateway has\
    \ to transmit a Notify before the previous Notify\n      is acknowledged, it should\
    \ construct a packet that piggybacks a\n      repetition of the old Notify, a\
    \ repetition of the acknowledgement\n      of the last notification request and\
    \ the new Notify.\n   f) Gateways that cannot piggyback several packets in the\
    \ same message\n      should elect to leave the endpoint in the \"notification\"\
    \ state as\n      long as the last notification is not acknowledged.\n   After\
    \ receiving the Notification Request command, the requested\n   events list and\
    \ digit map (if a new one was provided) are replaced by\n   the newly received\
    \ parameters, and the list of observed events and\n   accumulated dial string\
    \ are reset to a null value.  The behavior is\n   conditioned by the value of\
    \ the QuarantineHandling parameter. The\n   parameter may specify that quarantined\
    \ events, or previously observed\n   events, should be discarded, in which case\
    \ they will be. If the\n   parameter specifies that the quarantined events should\
    \ be processed,\n   the gateway will start processing the list of quarantined\
    \ events or\n   previously observed events, using the newly received list of\n\
    \   requested events and digit map. When processing these events, the\n   gateway\
    \ may encounter an event which requires a Notify command to be\n   sent. If that\
    \ is the case, the gateway will immediately transmit a\n   Notify command that\
    \ will report all events that were accumulated in\n   the list of observed events\
    \ until the triggering event, included,\n   leaving the unprocessed events in\
    \ the quarantine buffer, and will\n   enter the \"notification state\".\n   A\
    \ new notification request may be received while the gateway has\n   accumulated\
    \ events according to the previous notification requests,\n   but has not yet\
    \ detected a notification-triggering events.  The\n   handling of not-yet-notified\
    \ events is determined, as with the\n   quarantined events, by the quarantine\
    \ handling parameters:\n   *  If the quarantine-handling parameter specifies that\
    \ quarantined\n      events shall be ignored, the observed event list is simply\
    \ reset.\n   *  If the quarantine-handling parameter specifies that quarantined\n\
    \      events shall be processed, the observed event list is transferred\n   \
    \   to the quarantined event list.  The observed event list is then\n      reset,\
    \ and the quarantined event list is processed.\n   Call Agents SHOULD provide\
    \ the response to a successful Notify\n   message and the new NotificationRequest\
    \ in the same datagram using\n   the piggy-backing mechanism.\n"
- title: 4.3.2.  Explicit detection
  contents:
  - "4.3.2.  Explicit detection\n   A key element of the state of several endpoints\
    \ is the position of\n   the hook. A race condition may occur when the user decides\
    \ to go\n   off-hook before the Call Agent has the time to ask the gateway to\n\
    \   notify an off hook event (the \"glare\" condition well known in\n   telephony),\
    \ or if the user goes on-hook before the Call Agent has the\n   time to request\
    \ the event's notification.\n   To avoid this race condition, the gateway should\
    \ check the condition\n   of the endpoint before acknowledging a NotificationRequest.\
    \ It should\n   return an error:\n   1- If the gateway is requested to notify\
    \ an \"off hook\" transition\n      while the phone is already off hook,\n   2-\
    \ If the gateway is requested to notify an \"on hook\" or \"flash hook\"\n   \
    \   condition while the phone is already on hook.\n   It should be noted, that\
    \ the condition check is performed at the time\n   the notification request is\
    \ received, where as the actual event that\n   caused the current condition may\
    \ have either been reported, or\n   ignored earlier, or it may currently be quarantined.\n\
    \   The other state variables of the gateway, such as the list of\n   RequestedEvent\
    \ or list of requested signals, are entirely replaced\n   after each successful\
    \ NotificationRequest, which prevents any long\n   term discrepancy between the\
    \ Call Agent and the gateway.\n   When a NotificationRequest is unsuccessful,\
    \ whether it is included in\n   a connection-handling command or not, the gateway\
    \ will simply\n   continue as if the command had never been received. As all other\n\
    \   transactions, the NotificationRequest should operate as an atomic\n   transaction,\
    \ thus any changes initiated as a result of the command\n   should be reverted.\n\
    \   Another race condition may occur when a Notify is issued shortly\n   before\
    \ the reception by the gateway of a NotificationRequest. The\n   RequestIdentifier\
    \ is used to correlate Notify commands with\n   NotificationRequest commands.\n"
- title: 4.3.3.  Ordering of commands, and treatment of disorder
  contents:
  - "4.3.3.  Ordering of commands, and treatment of disorder\n   MGCP does not mandate\
    \ that the underlying transport protocol\n   guarantees the sequencing of commands\
    \ sent to a gateway or an\n   endpoint.  This property tends to maximize the timeliness\
    \ of actions,\n   but it has a few draw backs.  For example:\n   *  Notify commands\
    \ may be delayed and arrive to the call agent after\n      the transmission of\
    \ a new Notification Request command,\n   *  If a new NotificationRequest is transmitted\
    \ before a previous one\n      is acknowledged, there is no guarantee that the\
    \ previous one will\n      not be received in second position.\n   Call Agents\
    \ that want to guarantee consistent operation of the end\n   points can use the\
    \ following rules:\n   1) When a gateway handles several endpoints, commands pertaining\
    \ to\n      the different endpoints can be sent in parallel, for example\n   \
    \   following a model where each endpoint is controlled by its own\n      process\
    \ or its own thread.\n   2) When several connections are created on the same endpoint,\n\
    \      commands pertaining to different connections can be sent in\n      parallel.\n\
    \   3) On a given connection, there should normally be only one\n      outstanding\
    \ command (create or modify).  However, a\n      DeleteConnection command can\
    \ be issued at any time.  In\n      consequence, a gateway may sometimes receive\
    \ a ModifyConnection\n      command that applies to a previously deleted connection.\
    \  Such\n      commands should be ignored, and an error code should be returned.\n\
    \   4) On a given endpoint, there should normally be only one outstanding\n  \
    \    NotificationRequest command at any time.  The RequestId parameter\n     \
    \ should be used to correlate Notify commands with the triggering\n      notification\
    \ request.\n   5) In some cases, an implicitly or explicitly wildcarded\n    \
    \  DeleteConnection command that applies to a group of endpoints can\n      step\
    \ in front of a pending CreateConnection command.  The Call\n      Agent should\
    \ individually delete all connections whose completion\n      was pending at the\
    \ time of the global DeleteConnection command.\n      Also, new CreateConnection\
    \ commands for endpoints named by the\n      wild-carding cannot be sent until\
    \ the wild-carded DeleteConnection\n      command is acknowledged.\n   6) When\
    \ commands are embedded within each other, sequencing\n      requirements for\
    \ all commands must be adhered to. For example a\n      Create Connection command\
    \ with a Notification Request in it must\n      adhere to the sequencing for CreateConnection\
    \ and\n      NotificationRequest at the same time.\n   7) AuditEndpoint and AuditConnection\
    \ is not subject to any\n      sequencing.\n   8) RestartInProgress must always\
    \ be the first command sent by an\n      endpoint as defined by the restart procedure.\
    \ Any other command or\n      response must be delivered after this RestartInProgress\
    \ command\n      (piggy-backing allowed).\n   9) When multiple messages are piggy-backed\
    \ in a single packet, the\n      messages are always processed in order.\n   These\
    \ rules do not affect the gateway, which should always respond to\n   commands.\n"
- title: 4.3.4.  Fighting the restart avalanche
  contents:
  - "4.3.4.  Fighting the restart avalanche\n   Let's suppose that a large number\
    \ of gateways are powered on\n   simultaneously.  If they were to all initiate\
    \ a RestartInProgress\n   transaction, the call agent would very likely be swamped,\
    \ leading to\n   message losses and network congestion during the critical period\
    \ of\n   service restoration. In order to prevent such avalanches, the\n   following\
    \ behavior is suggested:\n   1) When a gateway is powered on, it should initiate\
    \ a restart timer\n      to a random value, uniformly distributed between 0 and\
    \ a maximum\n      waiting delay (MWD). Care should be taken to avoid synchronicity\n\
    \      of the random number generation between multiple gateways that\n      would\
    \ use the same algorithm.\n   2) The gateway should then wait for either the end\
    \ of this timer, the\n      reception of a command from the call agent, or the\
    \ detection of a\n      local user activity, such as for example an off-hook transition\
    \ on\n      a residential gateway.\n   3) When the timer elapses, when a command\
    \ is received, or when an\n      activity is detected, the gateway should initiate\
    \ the restart\n      procedure.\n   The restart procedure simply requires the\
    \ endpoint to guarantee that\n   the first message (command or response) that\
    \ the Call Agent sees from\n   this endpoint is a RestartInProgress message informing\
    \ the Call Agent\n   about the restart. The endpoint is free to take full advantage\
    \ of\n   piggy-backing to achieve this.\n   It is expected that each endpoint\
    \ in a gateway will have a\n   provisionable Call Agent, i.e., \"notified entity\"\
    , to direct the\n   initial restart message towards. When the collection of endpoints\
    \ in\n   a gateway is managed by more than one Call Agent, the above procedure\n\
    \   must be performed for each collection of endpoints managed by a given\n  \
    \ Call Agent. The gateway MUST take full advantage of wild-carding to\n   minimize\
    \ the number of RestartInProgress messages generated when\n   multiple endpoints\
    \ in a gateway restart and the endpoints are managed\n   by the same Call Agent.\n\
    \   The value of MWD is a configuration parameter that depends on the\n   type\
    \ of the gateway. The following ]reasoning can be used to\n   determine the value\
    \ of this delay on residential gateways.\n   Call agents are typically dimensioned\
    \ to handle the peak hour traffic\n   load, during which, in average, 10% of the\
    \ lines will be busy,\n   placing calls whose average duration is typically 3\
    \ minutes.  The\n   processing of a call typically involves 5 to 6 MGCP transactions\n\
    \   between each end point and the call agent.  This simple calculation\n   shows\
    \ that the call agent is expected to handle 5 to 6 transactions\n   for each end\
    \ point, every 30 minutes on average, or, to put it\n   otherwise, about one transaction\
    \ per end point every 5 to 6 minutes\n   on average.  This suggest that a reasonable\
    \ value of MWD for a\n   residential gateway would be 10 to 12 minutes.  In the\
    \ absence of\n   explicit configuration, residential gateways should adopt a value\
    \ of\n   600 seconds for MWD.\n   The same reasoning suggests that the value of\
    \ MWD should be much\n   shorter for trunking gateways or for business gateways,\
    \ because they\n   handle a large number of endpoints, and also because the usage\
    \ rate\n   of these endpoints is much higher than 10% during the peak busy hour,\n\
    \   a typical value being 60%.  These endpoints, during the peak hour,\n   are\
    \ this expected to contribute about one transaction per minute to\n   the call\
    \ agent load. A reasonable algorithm is to make the value of\n   MWD per \"trunk\"\
    \ endpoint six times shorter than the MWD per\n   residential gateway, and also\
    \ inversely proportional to the number of\n   endpoints that are being restarted.\
    \ for example MWD should be set to\n   2.5 seconds for a gateway that handles\
    \ a T1 line, or to 60\n   milliseconds for a gateway that handles a T3 line.\n"
- title: 4.3.5.  Disconnected Endpoints
  contents:
  - "4.3.5.  Disconnected Endpoints\n   In addition to the restart procedure, gateways\
    \ also have a\n   \"disconnected\" procedure, which is initiated when an endpoint\
    \ becomes\n   \"disconnected\" as described in Section 3.4.2. It should here be\n\
    \   noted, that endpoints can only become disconnected when they attempt\n   to\
    \ communicate with the Call Agent. The following steps are followed\n   by an\
    \ endpoint that becomes \"disconnected\":\n   1. A \"disconnected\" timer is initialized\
    \ to a random value, uniformly\n      distributed between 0 and a provisionable\
    \ \"disconnected\" initial\n      waiting delay (Tdinit), e.g., 15 seconds.  Care\
    \ MUST be taken to\n      avoid synchronicity of the random number generation\
    \ between\n      multiple gateways and endpoints that would use the same algorithm.\n\
    \   2. The gateway then waits for either the end of this timer, the\n      reception\
    \ of a command from the call agent, or the detection of a\n      local user activity\
    \ for the endpoint, such as for example an off-\n      hook transition.\n   3.\
    \ When the \"disconnected\" timer elapses, when a command is received,\n     \
    \ or when a local user activity is detected, the gateway initiates\n      the\
    \ \"disconnected\" procedure for the endpoint. In the case of\n      local user\
    \ activity, a provisionable \"disconnected\" minimum\n      waiting delay (Tdmin)\
    \ must furthermore have elapsed since the\n      gateway became disconnected or\
    \ the last time it initiated the\n      \"disconnected\" procedure in order to\
    \ limit the rate at which the\n      procedure is performed.\n   4. If the \"\
    disconnected\" procedure still left the endpoint\n      disconnected, the \"disconnected\"\
    \ timer is then doubled, subject to\n      a provisionable \"disconnected\" maximum\
    \ waiting delay (Tdmax),\n      e.g., 600 seconds, and the gateway proceeds with\
    \ step 2 again.\n   The \"disconnected\" procedure is similar to the restart procedure\
    \ in\n   that it now simply states that the endpoint MUST send a\n   RestartInProgress\
    \ command to the Call Agent informing it that the\n   endpoint was disconnected\
    \ and furthermore guarantee that the first\n   message (command or response) that\
    \ the Call Agent now sees from this\n   endpoint MUST be this RestartInProgress\
    \ command. The endpoint MUST\n   take full advantage of piggy-backing in achieving\
    \ this. The Call\n   Agent may then for instance decide to audit the endpoint,\
    \ or simply\n   clear all connections for the endpoint.\n   This specification\
    \ purposely does not specify any additional behavior\n   for a disconnected endpoint.\
    \ Vendors MAY for instance choose to\n   provide silence, play reorder tone, or\
    \ even enable a downloaded wav\n   file to be played.\n   The default value for\
    \ Tdinit is 15 seconds, the default value for\n   Tdmin, is 15 seconds, and the\
    \ default value for Tdmax is 600 seconds.\n"
- title: 5.  Security requirements
  contents:
  - "5.  Security requirements\n   If unauthorized entities could use the MGCP, they\
    \ would be able to\n   set-up unauthorized calls, or to interfere with authorized\
    \ calls. We\n   expect that MGCP messages will always be carried over secure Internet\n\
    \   connections, as defined in the IP security architecture as defined in\n  \
    \ RFC 2401, using either the IP Authentication Header, defined in RFC\n   2402,\
    \ or the IP Encapsulating Security Payload, defined in RFC 2406.\n   The complete\
    \ MGCP protocol stack would thus include the following\n   layers:\n         \
    \       ________________________________\n               |              MGCP \
    \            |\n               |_______________________________|\n           \
    \    |              UDP              |\n               |_______________________________|\n\
    \               |          IP security          |\n               | (authentication\
    \ or encryption)|\n               |_______________________________|\n        \
    \       |              IP               |\n               |_______________________________|\n\
    \               |       transmission media      |\n               |_______________________________|\n\
    \   Adequate protection of the connections will be achieved if the\n   gateways\
    \ and the Call Agents only accept messages for which IP\n   security provided\
    \ an authentication service. An encryption service\n   will provide additional\
    \ protection against eavesdropping, thus\n   forbidding third parties from monitoring\
    \ the connections set up by a\n   given endpoint\n   The encryption service will\
    \ also be requested if the session\n   descriptions are used to carry session\
    \ keys, as defined in SDP.\n   These procedures do not necessarily protect against\
    \ denial of service\n   attacks by misbehaving gateways or misbehaving call agents.\
    \ However,\n   they will provide an identification of these misbehaving entities,\n\
    \   which should then be deprived of their authorization through\n   maintenance\
    \ procedures.\n"
- title: 5.1.  Protection of media connections
  contents:
  - "5.1.  Protection of media connections\n   MGCP allows call agent to provide gateways\
    \ with \"session keys\" that\n   can be used to encrypt the audio messages, protecting\
    \ against\n   eavesdropping.\n   A specific problem of packet networks is \"uncontrolled\
    \ barge-in.\"\n   This attack can be performed by directing media packets to the\
    \ IP\n   address and UDP port used by a connection. If no protection is\n   implemented,\
    \ the packets will be decompressed and the signals will be\n   played on the \"\
    line side\".\n   A basic protection against this attack is to only accept packets\
    \ from\n   known sources, checking for example that the IP source address and\n\
    \   UDP source port match the values announced in the \"remote session\n   description.\"\
    \  But this has two inconveniences: it slows down\n   connection establishment\
    \ and it can be fooled by source spoofing:\n   *  To enable the address-based\
    \ protection, the call agent must obtain\n      the remote session description\
    \ of the e-gress gateway and pass it\n      to the in-gress gateway.  This requires\
    \ at least one network round\n      trip, and leaves us with a dilemma: either\
    \ allow the call to\n      proceed without waiting for the round trip to complete,\
    \ and risk\n      for example \"clipping\" a remote announcement, or wait for\
    \ the full\n      round trip and settle for slower call-set-up procedures.\n \
    \  *  Source spoofing is only effective if the attacker can obtain valid\n   \
    \   pairs of source destination addresses and ports, for example by\n      listening\
    \ to a fraction of the traffic. To fight source spoofing,\n      one could try\
    \ to control all access points to the network.  But\n      this is in practice\
    \ very hard to achieve.\n   An alternative to checking the source address is to\
    \ encrypt and\n   authenticate the packets, using a secret key that is conveyed\
    \ during\n   the call set-up procedure. This will no slow down the call set-up,\n\
    \   and provides strong protection against address spoofing.\n"
- title: 6.  Event packages and end point types
  contents:
  - "6.  Event packages and end point types\n   This section provides an initial definition\
    \ of packages and event\n   names.  More packages can be defined in additional\
    \ documents.\n"
- title: 6.1.  Basic packages
  contents:
  - "6.1.  Basic packages\n   The list of basic packages includes the following:\n\
    \                _________________________________________\n               | Package\
    \                      |   name  |\n               |______________________________|_________|\n\
    \               | Generic Media Package        |   G     |\n               | DTMF\
    \ package                 |   D     |\n               | MF Package           \
    \        |   M     |\n               | Trunk Package                |   T    \
    \ |\n               | Line Package                 |   L     |\n             \
    \  | Handset Package              |   H     |\n               | RTP Package  \
    \                |   R     |\n               | Network Access Server Package|\
    \   N     |\n               | Announcement Server Package  |   A     |\n     \
    \          | Script Package               |   Script|\n               |______________________________|_________|\n\
    \   In the tables of events for each package, there are five columns:\n      Symbol:\
    \ the unique symbol used for the event\n      Definition: a short description\
    \ of the event\n      R: an x appears in this column is the event can be Requested\
    \ by\n         the call agent.\n      S: if nothing appears in this column for\
    \ an event, then the event\n         cannot be signaled on command by the call\
    \ agent. Otherwise, the\n         following symbols identify the type of event:\n\
    \      OO On/Off signal.  The signal is turned on until commanded by the\n   \
    \      call agent to turn it off, and vice versa.\n      TO Timeout signal.  The\
    \ signal lasts for a given duration unless\n         it is superseded by a new\
    \ signal.\n      BR Brief signal.  The event has a short, known duration.\n  \
    \    Duration: specifies the duration of TO signals.\n"
- title: 6.1.1.  Generic Media Package
  contents:
  - "6.1.1.  Generic Media Package\n   Package Name: G\n   The generic media package\
    \ group the events and signals that can be\n   observed on several types of endpoints,\
    \ such as trunking gateways,\n   access gateways or residential gateways.\n  _____________________________________________________________________\n\
    \ | Symbol   |   Definition               |   R |   S      Duration    |\n |__________|____________________________|_____|______________________|\n\
    \ | mt       |   Modem detected           |   x |                      |\n | ft\
    \       |   Fax tone detected        |   x |                      |\n | ld   \
    \    |   Long duration connection |   x |                      |\n | pat(###)\
    \ |   Pattern ### detected     |   x |   OO                 |\n | rt       | \
    \  Ringback tone            |     |   TO                 |\n | rbk(###) |   ring\
    \ back on connection  |     |   TO     180 seconds |\n | cf       |   Confirm\
    \ tone             |     |   BR                 |\n | cg       |   Network Congestion\
    \ tone  |     |   TO                 |\n | it       |   Intercept tone       \
    \    |     |   OO                 |\n | pt       |   Preemption tone         \
    \ |     |   OO                 |\n | of       |   report failure           | \
    \  x |                      |\n |__________|____________________________|_____|______________________|\n\
    \   The signals are defined as follows:\n      The pattern definition can be used\
    \ for specific algorithms such as\n      answering machine detection, tone detection,\
    \ and the like.\n   Ring back tone (rt)\n      an Audible Ring Tone, a combination\
    \ of two AC tones with\n      frequencies of 440 and 480 Hertz and levels of -19\
    \ dBm each, to\n      give a combined level of -16 dBm.  The cadence for Audible\
    \ Ring\n      Tone is 2 seconds on followed by 4 seconds off. See GR- 506-CORE\
    \ -\n      LSSGR:  SIGNALING, Section 17.2.5.\n   Ring back on connection\n  \
    \    A ring back tone, applied to the connection whose identifier is\n      passed\
    \ as a parameter.\n   The \"long duration connection\" is detected when a connection\
    \ has been\n   established for more than 1 hour.\n"
- title: 6.1.2.  DTMF package
  contents:
  - "6.1.2.  DTMF package\n   Package name: D\n    _______________________________________________________________\n\
    \   | Symbol |   Definition              |   R |   S      Duration |\n   |________|___________________________|_____|___________________|\n\
    \   | 0      |   DTMF 0                  |   x |   BR              |\n   | 1 \
    \     |   DTMF 1                  |   x |   BR              |\n   | 2      | \
    \  DTMF 2                  |   x |   BR              |\n   | 3      |   DTMF 3\
    \                  |   x |   BR              |\n   | 4      |   DTMF 4       \
    \           |   x |   BR              |\n   | 5      |   DTMF 5              \
    \    |   x |   BR              |\n   | 6      |   DTMF 6                  |  \
    \ x |   BR              |\n   | 7      |   DTMF 7                  |   x |   BR\
    \              |\n   | 8      |   DTMF 8                  |   x |   BR       \
    \       |\n   | 9      |   DTMF 9                  |   x |   BR              |\n\
    \   | #      |   DTMF #                  |   x |   BR              |\n   | * \
    \     |   DTMF *                  |   x |   BR              |\n   | A      | \
    \  DTMF A                  |   x |   BR              |\n   | B      |   DTMF B\
    \                  |   x |   BR              |\n   | C      |   DTMF C       \
    \           |   x |   BR              |\n   | D      |   DTMF D              \
    \    |   x |   BR              |\n   | L      |   long duration indicator |  \
    \ x |          2 seconds|\n   | X      |   Wildcard, match         |   x |   \
    \                |\n   |        |   any digit 0-9           |     |          \
    \         |\n   | T      |   Interdigit timer        |   x |          4 seconds|\n\
    \   | of     |   report failure          |   x |                   |\n   |________|___________________________|_____|___________________|\n\
    \   The \"interdigit timer\" T is a digit input timer that can be used in\n  \
    \ two ways:\n   *  When timer T is used with a digit map, the timer is not started\n\
    \      until the first digit is entered, and the timer is restarted after\n  \
    \    each new digit is entered until either a digit map match or\n      mismatch\
    \ occurs. In this case, timer T functions as an inter-digit\n      timer.\n  \
    \ *  When timer T is used without a digit map, the timer is started\n      immediately\
    \ and simply cancelled (but not restarted) as soon as a\n      digit is entered.\
    \ In this case, timer T can be used as an\n      interdigit timer when overlap\
    \ sending is used.\n      When used with a digit map, timer T takes on one of\
    \ two values,\n      T(partial) or T(critical). When at least one more digit is\n\
    \      required for the digit string to match any of the patterns in the\n   \
    \   digit map, timer T takes on the value T(partial), corresponding to\n     \
    \ partial dial timing. If a timer is all that is required to produce\n      a\
    \ match, timer T takes on the value T(critical) corresponding to\n      critical\
    \ timing. When timer T is used without a digit map, timer T\n      takes on the\
    \ value T(critical).  The default value for T(partial)\n      is 16 seconds and\
    \ the default value for T(critical) is 4 seconds.\n      The provisioning process\
    \ may alter both of these.\n      The \"long duration indicator\" is observed\
    \ when a DTMF signal is\n      produced for a duration larger than two seconds.\
    \  In this case,\n      the gateway will detect two successive events: first,\
    \ when the\n      signal has been recognized, the DTMF signal, and then, 2 seconds\n\
    \      later, the long duration signal.\n"
- title: 6.1.3.  MF Package
  contents:
  - "6.1.3.  MF Package\n      Package Name: M\n       ________________________________________________________\n\
    \      | Symbol |   Definition       |   R |   S      Duration |\n      |________|____________________|_____|___________________|\n\
    \      | 0      |   MF 0             |   x |   BR              |\n      | 1  \
    \    |   MF 1             |   x |   BR              |\n      | 2      |   MF 2\
    \             |   x |   BR              |\n      | 3      |   MF 3           \
    \  |   x |   BR              |\n      | 4      |   MF 4             |   x |  \
    \ BR              |\n      | 5      |   MF 5             |   x |   BR        \
    \      |\n      | 6      |   MF 6             |   x |   BR              |\n  \
    \    | 7      |   MF 7             |   x |   BR              |\n      | 8    \
    \  |   MF 8             |   x |   BR              |\n      | 9      |   MF 9 \
    \            |   x |   BR              |\n      | X      |   Wildcard, match \
    \ |   x |                   |\n      |        |   any digit 0-9    |     |   \
    \                |\n      | T      |   Interdigit timer |   x |          4 seconds|\n\
    \      | K0     |   MF K0 or KP      |   x |   BR              |\n      | K1 \
    \    |   MF K1            |   x |   BR              |\n      | K2     |   MF K2\
    \            |   x |   BR              |\n      | S0     |   MF S0 or ST     \
    \ |   x |   BR              |\n      | S1     |   MF S1            |   x |   BR\
    \              |\n      | S2     |   MF S2            |   x |   BR           \
    \   |\n      | S3     |   MF S3            |   x |   BR              |\n     \
    \ | wk     |   Wink             |   x |   BR              |\n      | wko    |\
    \   Wink off         |   x |   BR              |\n      | is     |   Incoming\
    \ seizure |   x |   OO              |\n      | rs     |   Return seizure   | \
    \  x |   OO              |\n      | us     |   Unseize circuit  |   x |   OO \
    \             |\n      | of     |   report failure   |   x |                 \
    \  |\n      |________|____________________|_____|___________________|\n   The\
    \ definition of the MF package events is as follows:\n   Wink\n      A transition\
    \ from unseized to seized to unseized trunk states\n      within a specified period.\
    \  Typical seizure period is 100-350\n      msec.)\n   Incoming seizure\n    \
    \  Incoming indication of call attempt.\n   Return seizure:\n      Seizure in\
    \ response to outgoing seizure.\n   Unseize circuit:\n      Unseizure of a circuit\
    \ at the end of a call.\n   Wink off:\n      A signal used in operator services\
    \ trunks.  A transition from\n      seized to unseized to seized trunk states\
    \ within a specified\n      period of 100-350 ms. (To be checked)\n"
- title: 6.1.4.  Trunk Package
  contents:
  - "6.1.4.  Trunk Package\n   Package Name: T\n   _____________________________________________________________________\n\
    \  | Symbol |   Definition                   |   R |   S      Duration  |\n  |________|________________________________|_____|____________________|\n\
    \  | co1    |   Continuity tone (single tone,|   x |   OO               |\n  |\
    \        |   or return tone)              |     |                    |\n  | co2\
    \    |   Continuity test (go tone,    |   x |   OO               |\n  |      \
    \  |   in dual tone procedures)     |     |                    |\n  | lb     |\
    \   Loopback                     |     |   OO               |\n  | om     |  \
    \ Old Milliwatt Tone (1000 Hz) |   x |   OO               |\n  | nm     |   New\
    \ Milliwatt Tone (1004 Hz) |   x |   OO               |\n  | tl     |   Test Line\
    \                    |   x |   OO               |\n  | zz     |   No circuit \
    \                  |   x |   OO               |\n  | as     |   Answer Supervision\
    \           |   x |   OO               |\n  | ro     |   Reorder Tone        \
    \         |   x |   TO     30 seconds|\n  | of     |   report failure        \
    \       |   x |                    |\n  | bl     |   Blocking                \
    \     |     |   OO               |\n  |________|________________________________|_____|____________________|\n\
    \   The definition of the trunk package signal events is as follows:\n   Continuity\
    \ Tone (co1):\n      A tone at 2010 + or - 30 Hz.\n   Continuity Test (co2):\n\
    \      A tone at the 1780 + or - 30 Hz.\n   Milliwatt Tones:\n      Old Milliwatt\
    \ Tone (1000 Hz), New Milliwatt Tone (1004 Hz)\n   Line Test:\n      105 Test\
    \ Line test progress tone (2225 Hz + or - 25 Hz at -10 dBm0\n      + or -- 0.5dB).\n\
    \   No circuit:\n      (that annoying tri-tone, low to high)\n   Answer Supervision:\n\
    \   Reorder Tone:\n      Reorder tone is a combination of two AC tones with frequencies\
    \ of\n      480 and 620 Hertz and levels of -24 dBm each, to give a combined\n\
    \      level of -21 dBm.  The cadence for Station Busy Tone is 0.25\n      seconds\
    \ on followed by 0.25 seconds off, repeating continuously.\n      See GR-506-CORE\
    \ - LSSGR: SIGNALING, Section 17.2.7.\n   Blocking:\n      The call agent can\
    \ place the circuit in a blocked state by\n      applying the \"bl(+)\" signal\
    \ to the endpoint.  It can unblock it by\n      applying the \"bl(-)\" signal.\n\
    \   The continuity tones are used when the call agent wants to initiate a\n  \
    \ continuity test. There are two types of tests, single tone and dual\n   tone.\
    \ The Call agent is expected to know, through provisioning\n   information, which\
    \ test should be applied to a given endpoint. For\n   example, the call agent\
    \ that wants to initiate a single frequency\n   test will send to the gateway\
    \ a command of the form:\n         RQNT 1234 epx-t1/17@tgw2.example.net\n    \
    \     X: AB123FE0\n         S: co1\n         R: co1\n   If it wanted instead to\
    \ initiate a dual-tone test, it would send the\n   command:\n         RQNT 1234\
    \ epx-t1/17@tgw2.example.net\n         X: AB123FE0\n         S: co2\n        \
    \ R: co1\n   The gateway would send the requested signal, and in both cases would\n\
    \   look for the return of the 2010 Hz tone (co1).  When it detects that\n   tone,\
    \ it will send the corresponding  notification.\n   The tones are of type OO:\
    \ the gateway will keep sending them until it\n   receives a new notification\
    \ request.\n"
- title: 6.1.5.  Line Package
  contents:
  - "6.1.5.  Line Package\n   Package Name: L\n"
- title: ________________________________________________________________________
  contents:
  - '________________________________________________________________________

    '
- title: '|Symbol       |   Definition                 |   R |   S    Duration   |'
  contents:
  - '|Symbol       |   Definition                 |   R |   S    Duration   |

    '
- title: '|_____________|______________________________|_____|___________________|'
  contents:
  - '|_____________|______________________________|_____|___________________|

    '
- title: '|adsi(string) |   adsi display               |     |   BR              |'
  contents:
  - '|adsi(string) |   adsi display               |     |   BR              |

    '
- title: '|vmwi         |   visual message             |     |   OO              |'
  contents:
  - '|vmwi         |   visual message             |     |   OO              |

    '
- title: '|             |   waiting indicator          |     |                   |'
  contents:
  - '|             |   waiting indicator          |     |                   |

    '
- title: '|hd           |   Off hook transition        |   x |                   |'
  contents:
  - '|hd           |   Off hook transition        |   x |                   |

    '
- title: '|hu           |   On hook transition         |   x |                   |'
  contents:
  - '|hu           |   On hook transition         |   x |                   |

    '
- title: '|hf           |   Flash hook                 |   x |                   |'
  contents:
  - '|hf           |   Flash hook                 |   x |                   |

    '
- title: '|aw           |   Answer tone                |   x |   OO              |'
  contents:
  - '|aw           |   Answer tone                |   x |   OO              |

    '
- title: '|bz           |   Busy tone                  |     |   TO   30 seconds |'
  contents:
  - '|bz           |   Busy tone                  |     |   TO   30 seconds |

    '
- title: '|ci(ti,nu,na) |   Caller-id                  |     |   BR              |'
  contents:
  - '|ci(ti,nu,na) |   Caller-id                  |     |   BR              |

    '
- title: '|wt           |   Call Waiting tone          |     |   TO   30 seconds |'
  contents:
  - '|wt           |   Call Waiting tone          |     |   TO   30 seconds |

    '
- title: '|wt1, wt2,    |   Alternative call           |     |                   |'
  contents:
  - '|wt1, wt2,    |   Alternative call           |     |                   |

    '
- title: '|wt3, wt4     |   waiting tones              |     |                   |'
  contents:
  - '|wt3, wt4     |   waiting tones              |     |                   |

    '
- title: '|dl           |   Dial tone                  |     |   TO   16 seconds |'
  contents:
  - '|dl           |   Dial tone                  |     |   TO   16 seconds |

    '
- title: '|mwi          |   Message waiting ind.       |     |   TO   16 seconds |'
  contents:
  - '|mwi          |   Message waiting ind.       |     |   TO   16 seconds |

    '
- title: '|nbz          |   Network busy               |   x |   OO              |'
  contents:
  - '|nbz          |   Network busy               |   x |   OO              |

    '
- title: '|             |   (fast cycle busy)          |     |                   |'
  contents:
  - '|             |   (fast cycle busy)          |     |                   |

    '
- title: '|ro           |   Reorder tone               |     |   TO   30 seconds |'
  contents:
  - '|ro           |   Reorder tone               |     |   TO   30 seconds |

    '
- title: '|rg           |   Ringing                    |     |   TO   180 seconds|'
  contents:
  - '|rg           |   Ringing                    |     |   TO   180 seconds|

    '
- title: '|r0, r1, r2,  |   Distinctive ringing        |     |   TO   180 seconds|'
  contents:
  - '|r0, r1, r2,  |   Distinctive ringing        |     |   TO   180 seconds|

    '
- title: '|r3, r4, r5,  |                              |     |                   |'
  contents:
  - '|r3, r4, r5,  |                              |     |                   |

    '
- title: '|r6 or r7     |                              |     |                   |'
  contents:
  - '|r6 or r7     |                              |     |                   |

    '
- title: '|rs           |   Ringsplash                 |     |   BR              |'
  contents:
  - '|rs           |   Ringsplash                 |     |   BR              |

    '
- title: '|p            |   Prompt tone                |   x |   BR              |'
  contents:
  - '|p            |   Prompt tone                |   x |   BR              |

    '
- title: '|e            |   Error tone                 |   x |   BR              |'
  contents:
  - '|e            |   Error tone                 |   x |   BR              |

    '
- title: '|sl           |   Stutter dialtone           |     |   TO   16 seconds |'
  contents:
  - '|sl           |   Stutter dialtone           |     |   TO   16 seconds |

    '
- title: '|v            |   Alerting Tone              |     |   OO              |'
  contents:
  - '|v            |   Alerting Tone              |     |   OO              |

    '
- title: '|y            |   Recorder Warning Tone      |     |   OO              |'
  contents:
  - '|y            |   Recorder Warning Tone      |     |   OO              |

    '
- title: '|sit          |   SIT tone                   |     |                   |'
  contents:
  - '|sit          |   SIT tone                   |     |                   |

    '
- title: '|z            |   Calling Card Service Tone  |     |   OO              |'
  contents:
  - '|z            |   Calling Card Service Tone  |     |   OO              |

    '
- title: '|oc           |   Report on completion       |   x |                   |'
  contents:
  - '|oc           |   Report on completion       |   x |                   |

    '
- title: '|ot           |   Off hook warning tone      |     |   TO   indefinite |'
  contents:
  - '|ot           |   Off hook warning tone      |     |   TO   indefinite |

    '
- title: '|s(###)       |   Distinctive tone pattern   |   x |   BR              |'
  contents:
  - '|s(###)       |   Distinctive tone pattern   |   x |   BR              |

    '
- title: '|of           |   report failure             |   x |                   |'
  contents:
  - '|of           |   report failure             |   x |                   |

    '
- title: '|_____________|______________________________|_____|___________________|'
  contents:
  - "|_____________|______________________________|_____|___________________|\n  \
    \ The definition of the tones is as follows:\n   Dial tone:\n      A combined\
    \ 350 + 440 Hz tone.\n   Visual Message Waiting Indicator\n      The transmission\
    \ of the VMWI messages will conform to the\n      requirements in Section 2.3.2,\
    \ \"On-hook Data Transmission Not\n      Associated with Ringing\" in TR-H-000030\
    \ and the CPE guidelines in\n      SR-TSV-002476. VMWI messages will only be sent\
    \ from the SPCS when\n      the line is idle. If new messages arrive while the\
    \ line is busy,\n      the VMWI indicator message will be delayed until the line\
    \ goes\n      back to the idle state. The CA should periodically refresh the\n\
    \      CPE's visual indicator. See TR-NWT-001401 - Visual Message Waiting\n  \
    \    Indicator Generic Requirements; and GR- 30-CORE - Voiceband Data\n      Transmission\
    \ Interface.\n   Message waiting Indicator\n      See GR-506-CORE, 17.2.3.\n \
    \  Alerting Tone:\n      a 440 Hz Tone of 2 second duration followed by 1/2 second\
    \ of tone\n      every 10 seconds.\n   Ring splash\n      Ringsplash, also known\
    \ as \"Reminder ring\" is a burst of ringing\n      that may be applied to the\
    \ physical forwarding line (when idle) to\n      indicate that a call has been\
    \ forwarded and to remind the user\n      that a CF subfeature is active.  In\
    \ the US, it is defined to be a\n      0.5(-0,+0.1) second burst of power ringing.\
    \ See TR-TSY-000586 -\n      Call Forwarding Subfeatures.\n   Call waiting tone\n\
    \      Call Waiting tone is defined in GR-506-CORE, 14.2. Call Waiting\n     \
    \ feature is defined in TR-TSY-000571. By defining \"wt\" as a TO\n      signal\
    \ you are really defining the feature which seems wrong to me\n      (given the\
    \ spirit of MGCP), hence the definition of \"wt\" as a BR\n      signal in ECS,\
    \ per GR-506-CORE. Also, it turns out that there is\n      actually four different\
    \ call waiting tone patterns (see GR-506-\n      CORE, 14.2) so we have wt1, wt2,\
    \ wt3, wt4.\n   Caller Id (ci(time, number, name)):\n      The caller-id event\
    \ carries three parameters, the time of the\n      call, the calling number and\
    \ the calling name. Each of the three\n      fields are optional, however each\
    \ of the commas will always be\n      included.  See TR-NWT-001188, GR-30-CORE,\
    \ and TR-NWT-000031.\n   Recorder Warning Tone:\n      1400 Hz of Tone of 0.5\
    \ second duration every 15 seconds.\n   SIT tone:\n      used for indicating a\
    \ line is out of service.\n   Calling Card Service Tone:\n      60 ms of 941 +\
    \ 1477 Hz and 940 ms of 350 + 440 Hz (dial tone),\n      decaying exponentially\
    \ with a time constant of 200 ms.\n   Distinctive tone pattern:\n      where ###\
    \ is any number between 000 and 999, inclusive.  Can be\n      used for distinctive\
    \ ringing, customized dial tone, etc.\n   Report on completion\n      The report\
    \ on completion event is detected when the gateway was\n      asked to perform\
    \ one or several signals of type TO on the\n      endpoint, and when these signals\
    \ were completed without being\n      stopped by the detection of a requested\
    \ event such as off-hook\n      transition or dialed digit.  The completion report\
    \ may carry as\n      parameter the name of the signal that came to the end of\
    \ its live\n      time, as in:\n            O: L/oc(L/dl)\n   Ring back on connection\n\
    \      A ring back tone, applied to the connection wghose identifier is\n    \
    \  passed as a parameter.\n   We should note that many of these definitions vary\
    \ from country to\n   country.  The frequencies listed above are the one in use\
    \ in North\n   America.  There is a need to accommodate different tone sets in\n\
    \   different countries, and there is still an ongoing debate on the best\n  \
    \ way to meet that requirement:\n   *  One solution is to define different event\
    \ packages specifying for\n      example the German dialtone as \"L-DE/DL\".\n\
    \   *  Another solution is to use a management interface to specify on an\n  \
    \    endpoint basis which frequency shall be associated to what tone.\n"
- title: 6.1.6.  Handset emulation package
  contents:
  - "6.1.6.  Handset emulation package\n   Package Name: H\n"
- title: ________________________________________________________________________
  contents:
  - '________________________________________________________________________

    '
- title: '|Symbol       |   Definition                 |   R |   S    Duration   |'
  contents:
  - '|Symbol       |   Definition                 |   R |   S    Duration   |

    '
- title: '|_____________|______________________________|_____|___________________|'
  contents:
  - '|_____________|______________________________|_____|___________________|

    '
- title: '|adsi(string) |   adsi display               |   x |   BR              |'
  contents:
  - '|adsi(string) |   adsi display               |   x |   BR              |

    '
- title: '|tdd          |                              |     |                   |'
  contents:
  - '|tdd          |                              |     |                   |

    '
- title: '|vmwi         |                              |     |                   |'
  contents:
  - '|vmwi         |                              |     |                   |

    '
- title: '|hd           |   Off hook transition        |   x |   OO              |'
  contents:
  - '|hd           |   Off hook transition        |   x |   OO              |

    '
- title: '|hu           |   On hook transition         |   x |   OO              |'
  contents:
  - '|hu           |   On hook transition         |   x |   OO              |

    '
- title: '|hf           |   Flash hook                 |   x |   BR              |'
  contents:
  - '|hf           |   Flash hook                 |   x |   BR              |

    '
- title: '|aw           |   Answer tone                |   x |   OO              |'
  contents:
  - '|aw           |   Answer tone                |   x |   OO              |

    '
- title: '|bz           |   Busy tone                  |   x |   OO              |'
  contents:
  - '|bz           |   Busy tone                  |   x |   OO              |

    '
- title: '|wt           |   Call Waiting tone          |   x |   TO   30 seconds |'
  contents:
  - '|wt           |   Call Waiting tone          |   x |   TO   30 seconds |

    '
- title: '|dl           |   Dial tone (350 + 440 Hz)   |   x |   TO   120 seconds|'
  contents:
  - '|dl           |   Dial tone (350 + 440 Hz)   |   x |   TO   120 seconds|

    '
- title: '|nbz          |   Network busy               |   x |   OO              |'
  contents:
  - '|nbz          |   Network busy               |   x |   OO              |

    '
- title: '|             |   (fast cycle busy)          |     |                   |'
  contents:
  - '|             |   (fast cycle busy)          |     |                   |

    '
- title: '|rg           |   Ringing                    |   x |   TO   30 seconds |'
  contents:
  - '|rg           |   Ringing                    |   x |   TO   30 seconds |

    '
- title: '|r0, r1, r2,  |   Distinctive ringing        |   x |   TO   30 seconds |'
  contents:
  - '|r0, r1, r2,  |   Distinctive ringing        |   x |   TO   30 seconds |

    '
- title: '|r3, r4, r5,  |                              |     |                   |'
  contents:
  - '|r3, r4, r5,  |                              |     |                   |

    '
- title: '|r6 or r7     |                              |     |                   |'
  contents:
  - '|r6 or r7     |                              |     |                   |

    '
- title: '|p            |   Prompt tone                |   x |   BR              |'
  contents:
  - '|p            |   Prompt tone                |   x |   BR              |

    '
- title: '|e            |   Error tone                 |   x |   BR              |'
  contents:
  - '|e            |   Error tone                 |   x |   BR              |

    '
- title: '|sdl          |   Stutter dialtone           |   x |   TO   16 seconds |'
  contents:
  - '|sdl          |   Stutter dialtone           |   x |   TO   16 seconds |

    '
- title: '|v            |   Alerting Tone              |   x |   OO              |'
  contents:
  - '|v            |   Alerting Tone              |   x |   OO              |

    '
- title: '|y            |   Recorder Warning Tone      |   x |   OO              |'
  contents:
  - '|y            |   Recorder Warning Tone      |   x |   OO              |

    '
- title: '|t            |   SIT tone                   |   x |                   |'
  contents:
  - '|t            |   SIT tone                   |   x |                   |

    '
- title: '|z            |   Calling Card Service Tone  |   x |   OO              |'
  contents:
  - '|z            |   Calling Card Service Tone  |   x |   OO              |

    '
- title: '|oc           |   Report on completion       |   x |                   |'
  contents:
  - '|oc           |   Report on completion       |   x |                   |

    '
- title: '|ot           |   Off hook warning tone      |   x |   OO              |'
  contents:
  - '|ot           |   Off hook warning tone      |   x |   OO              |

    '
- title: '|s(###)       |   Distinctive tone pattern   |   x |   BR              |'
  contents:
  - '|s(###)       |   Distinctive tone pattern   |   x |   BR              |

    '
- title: '|of           |   report failure             |   x |                   |'
  contents:
  - '|of           |   report failure             |   x |                   |

    '
- title: '|_____________|______________________________|_____|___________________|'
  contents:
  - "|_____________|______________________________|_____|___________________|\n  \
    \ The handset emulation package is an extension of the line package, to\n   be\
    \ used when the gateway is capable of emulating a handset.  The\n   difference\
    \ with the line package is that events such as \"off hook\"\n   can be signalled\
    \ as well as detected.\n"
- title: 6.1.7.  RTP Package
  contents:
  - "6.1.7.  RTP Package\n   Package Name: R\n    ____________________________________________________________________\n\
    \   | Symbol  |   Definition                   |   R |   S      Duration|\n  \
    \ |_________|________________________________|_____|__________________|\n   |\
    \ UC      |   Used codec changed           |   x |                  |\n   | SR(###)\
    \ |   Sampling rate changed        |   x |                  |\n   | JI(###) |\
    \   Jitter buffer size changed   |   x |                  |\n   | PL(###) |  \
    \ Packet loss exceeded         |   x |                  |\n   | qa      |   Quality\
    \ alert                |   x |                  |\n   | co1     |   Continuity\
    \ tone (single tone,|   x |   OO             |\n   |         |   or return tone)\
    \              |     |                  |\n   | co2     |   Continuity test (go\
    \ tone,    |   x |   OO             |\n   |         |  in dual tone procedures)\
    \      |     |                  |\n   | of      |   report failure           \
    \    |   x |                  |\n   |_________|________________________________|_____|__________________|\n\
    \   Codec Changed:\n      Codec changed to hexadecimal codec number enclosed in\
    \ parenthesis,\n      as in UC(15), to indicate the codec was changed to PCM mu-law.\n\
    \      Codec Numbers are specified in RFC 1890, or in a new definition of\n  \
    \    the audio profiles for RTP that replaces this RFC.  Some\n      implementations\
    \ of media gateways may not allow the codec to be\n      changed upon command\
    \ from the call agent.  codec changed to codec\n      hexadecimal ##.\n   Sampling\
    \ Rate Changed:\n      Sampling rate changed to decimal number in milliseconds\
    \ enclosed\n      in parenthesis, as in SR(20), to indicate the sampling rate\
    \ was\n      changed to 20 milliseconds.  Some implementations of media\n    \
    \  gateways may not allow the sampling rate to be changed upon\n      command\
    \ from a call agent.\n   Jitter Buffer Size Changed:\n      When the media gateway\
    \ has the ability to automatically adjust the\n      depth of the jitter buffer\
    \ for received RTP streams, it is useful\n      for the media gateway controller\
    \ to receive notification that the\n      media gateway has automatically increased\
    \ its jitter buffer size\n      to accomodate increased or decreased variability\
    \ in network\n      latency.  The syntax for requesting notification is \"JI\"\
    , which\n      tells the media gateway that the controller wants notification\
    \ of\n      any jitter buffer size changes.  The syntax for notification from\n\
    \      the media gateway to the controller is \"JI(####)\", where the ####\n \
    \     is the new size of the jitter buffer, in milliseconds.\n   Packet Loss Exceeded:\n\
    \      Packet loss rate exceed the threshold of the specified decimal\n      number\
    \ of packets per 100,000 packets, where the packet loss\n      number is contained\
    \ in parenthesis.  For example, PL(10) indicates\n      packets are being dropped\
    \ at a rate of 1 in 10,000 packets.\n   Quality alert\n      The packet loss rate\
    \ or the combination of delay and jitter exceed\n      a specified quality threshold.\n\
    \   The continuity tones are the same as those defined in the Trunk\n   package.\
    \  They can be use in conjunction with the Network LoopBack or\n   Network Continuity\
    \ Test modes to test the continuity of an RTP\n   circuit.\n   The \"operation\
    \ failure\" code can be used to report problems such as\n   the loss of underlying\
    \ connectivity.  The observed event can include\n   as parameter the reason code\
    \ of the failure.\n"
- title: 6.1.8.  Network Access Server Package
  contents:
  - "6.1.8.  Network Access Server Package\n   Package Name: N\n       ____________________________________________________________\n\
    \      | Symbol |   Definition             |   R |   S     Duration|\n      |________|__________________________|_____|_________________|\n\
    \      | pa     |  Packet arrival          |  x  |                 |\n      |\
    \ cbk    |  Call back request       |  x  |                 |\n      | cl    \
    \ |  Carrier lost            |  x  |                 |\n      | au     |   Authorization\
    \ succeeded|  x  |                 |\n      | ax     |   Authorization denied\
    \   |  x  |                 |\n      | of     |   Report failure         |  x\
    \  |                 |\n      |________|__________________________|_____|_________________|\n\
    \   The packet arrival event is used to notify that at least one packet\n   was\
    \ recently sent to an Internet address that is observed by an\n   endpoint.  The\
    \ event report includes the Internet address, in\n   standard ASCII encoding,\
    \ between parenthesis:\n         O: pa(192.96.41.1)\n   The call back event is\
    \ used to notify that a call back has been\n   requested during the initial phase\
    \ of a data connection. The event\n   report includes the identification of the\
    \ user that should be called\n   back, between parenthesis:\n         O: cbk(user25)\n"
- title: 6.1.9.  Announcement Server Package
  contents:
  - "6.1.9.  Announcement Server Package\n   Package Name: A\n    ___________________________________________________________________\n\
    \   | Symbol         |   Definition           |   R |   S      Duration|\n   |________________|________________________|_____|__________________|\n\
    \   | ann(url,parms) |   Play an announcement |     |   TO     variable|\n   |\
    \ oc             |   Report on completion |   x |                  |\n   | of\
    \             |   Report failure       |   x |                  |\n   |________________|________________________|_____|__________________|\n\
    \   The announcement action is qualified by an URL name and by a set of\n   initial\
    \ parameters as in for example:\n         S: ann(http://scripts.example.net/all-lines-busy.au)\n\
    \   The \"operation complete\" event will be detected when the announcement\n\
    \   is played out. If the announcement cannot be played out, an operation\n  \
    \ failure event can be returned.  The failure may be explained by a\n   commentary,\
    \ as in:\n         O: A/of(file not found)\n"
- title: 6.1.10.  Script Package
  contents:
  - "6.1.10.  Script Package\n   Package Name: Script\n    ______________________________________________________________\n\
    \   | Symbol    |   Definition           |   R |   S  |   Duration|\n   |___________|________________________|_____|______|___________|\n\
    \   | java(url) |   Load a java script   |     |   TO |   variable|\n   | perl(url)\
    \ |   Load a perl script   |     |   TO |   variable|\n   | tcl(url)  |   Load\
    \ a TCL script    |     |   TO |   variable|\n   | xml(url)  |   Load an XML script\
    \   |     |   TO |   variable|\n   | oc        |   Report on completion |   x\
    \ |      |           |\n   | of        |   Report failure       |   x |      |\
    \           |\n   |___________|________________________|_____|______|___________|\n\
    \   The \"language\" action define is qualified by an URL name and by a set\n\
    \   of initial parameters as in for example:\n         S: script/java(http://scripts.example.net/credit-\n\
    \            card.java,long,1234)\n   The current definition defines keywords\
    \ for the most common\n   languages.  More languages may be defined in further\
    \ version of this\n   documents.  For each language, an API specification will\
    \ describe how\n   the scripts can issue local \"notificationRequest\" commands,\
    \ and\n   receive the corresponding notifications.\n   The script produces an\
    \ output which consists of one or several text\n   string, separated by commas.\
    \  The text string are reported as a\n   commentary in the report on completion,\
    \ as in for example:\n         O: script/oc(21223456794567,9738234567)\n   The\
    \ failure report may also return a string, as in:\n         O: script/oc(21223456794567,9738234567)\n\
    \   The definition of the script environment and the specific actions in\n   that\
    \ environment are for further study.\n"
- title: 6.2.  Basic endpoint types and profiles
  contents:
  - "6.2.  Basic endpoint types and profiles\n   We define the following basic endpoint\
    \ types and profiles:\n   *  Trunk gateway (ISUP)\n   *  Trunk gateway (MF)\n\
    \   *  Network Access Server (NAS)\n   *  Combined NAS/VOIP gateway\n   *  Access\
    \ Gateway\n   *  Residential Gateway\n   *  Announcement servers\n   These gateways\
    \ are supposed to implement the following packages\n       ___________________________________________________________\n\
    \      | Gateway                    |   Supported packages        |\n      |____________________________|_____________________________|\n\
    \      | Trunk gateway (ISUP)       |   GM, DTMF, TK, RTP         |\n      | Trunk\
    \ gateway (MF)         |   GM, MF, DTMF, TK, RTP     |\n      | Network Access\
    \ Server (NAS)|   GM, MF, TK, NAS           |\n      | Combined NAS/VOIP gateway\
    \  |   GM, MF, DTMF, TK, NAS, RTP|\n      | Access Gateway (VOIP)      |   GM,\
    \ DTMF, MF, RTP         |\n      | Access Gateway (VOIP+NAS)  |   GM, DTMF, MF,\
    \ NAS, RTP    |\n      | Residential Gateway        |   GM, DTMF, Line, RTP  \
    \     |\n      | Announcement Server        |   ANN, RTP                  |\n\
    \      |____________________________|_____________________________|\n   Advanced\
    \ announcement servers may also support the Script package.\n   Advanced trunking\
    \ servers may support the ANN package, the Script\n   package, and in some cases\
    \ the Line and Handset package as well.\n"
- title: 7.  Versions and compatibility
  contents:
  - '7.  Versions and compatibility

    '
- title: 7.1.  Differences between version 1.0 and draft 0.5
  contents:
  - "7.1.  Differences between version 1.0 and draft 0.5\n   Draft 0-5 was issued\
    \ in February 1999, as the last update of draft\n   version 0.1. Version 1.0 benefits\
    \ from implementation experience, and\n   also aligns as much as possible with\
    \ the CableLabs' NCS project. The\n   main differences between the February draft\
    \ and version 1.0 are:\n   *  Specified more clearly that the encoding of three\n\
    \      LocalConnectionOptions parameters, Encoding Method, Packetization\n   \
    \   Period and Bandwidth, shall follow the conventions laid out in\n      SDP.\n\
    \   *  Specified how the quarantine handling parameter governs the\n      handling\
    \ of detected but not yet specified events.\n   *  Specified that unexpected timers\
    \ or digits should trigger\n      transmission of the dialed string.\n   *  Removed\
    \ the digit map syntax description from section 2.1.5 (it\n      was redundant\
    \ with section 3.4.)\n   *  Corrected miscellaneous bugs in the formal syntax\
    \ description.\n   *  Aligned specification of commands with the CableLabs NCS\n\
    \      specification.  This mostly affects the AuditEndpoint and\n      RestartInProgress\
    \ commands.\n   *  Aligned the handling of retransmission with the CableLabs NCS\n\
    \      specification.\n   *  Added the provisional response return code and corresponding\n\
    \      behavior description.\n   *  Added an optional reason code parameter to\
    \ restart in progress.\n   *  Added the possibility to audit the restart method,\
    \ restart delay\n      and reason code.\n"
- title: 7.2.  Differences between draft-04 and draft-05
  contents:
  - "7.2.  Differences between draft-04 and draft-05\n   Differences are minor: corrected\
    \ the copyright statement, and\n   corrected a bug in the formal description.\n"
- title: 7.3.  Differences between draft-03 and draft-04
  contents:
  - "7.3.  Differences between draft-03 and draft-04\n   Draft 04 corrects a number\
    \ of minor editing mistakes that were\n   pointed out during the review of draft\
    \ 03, issued on February 1.\n"
- title: 7.4.  Differences between draft-02 and draft-03
  contents:
  - "7.4.  Differences between draft-02 and draft-03\n   The main differences between\
    \ draft-02, issued in January 22 1998, and\n   draft 03 are:\n   *  Introduced\
    \ a discussion on endpoint types,\n   * Introduced a discussion of the connection\
    \ set-up procedure, and of\n      the role of connection parameters,\n   *  Introduced\
    \ a notation of the connection identifier within event\n      names,\n   *  Documented\
    \ the extension procedure for the LocalConnectionOptions\n      parameter and\
    \ for the ConnectionParameters parameter,\n   *  Introduced a three-way handshake\
    \ procedure, using a ResponseAck\n      parameter, in order to allow gateways\
    \ to delete copies of old\n      responses without waiting for a 30 seconds timer,\n\
    \   *  Expanded the security section to include a discussion of\n      \"uncontrolled\
    \ barge-in.\"\n   *  Propsed a \"create two connections\" command, as an appendix.\n"
- title: 7.5.  Differences between draft-01 and draft-02
  contents:
  - "7.5.  Differences between draft-01 and draft-02\n   The main differences between\
    \ draft-01, issued in November 1998, and\n   draft 02 are:\n   *  Added an ABNF\
    \ description of the protocol.\n   *  Specification of an EndpointConfiguration\
    \ command,\n   *  Addition of a \"two endpoints\" mode in the create connection\n\
    \      command,\n   *  Modification of the package wildcards from \"$/$\" to \"\
    */all\" at the\n      Request of early implementors,\n   *  Revision of some package\
    \ definitions to better align with external\n      specifications.\n   *  Addition\
    \ of a specification for the handling of \"failover.\"\n   *  Revision of the\
    \ section on race conditions.\n"
- title: 7.6.  The making of MGCP from IPDC and SGCP
  contents:
  - "7.6.  The making of MGCP from IPDC and SGCP\n   MGCP version 0.1 results from\
    \ the fusion of the SGCP and IPDC\n   proposals.\n"
- title: 7.7.  Changes between MGCP and initial versions of SGCP
  contents:
  - "7.7.  Changes between MGCP and initial versions of SGCP\n   MGCP version 0.1\
    \ (which subsumes SGCP version 1.2) introduces the\n   following changes from\
    \ SGCP version 1.1:\n   *  Protocol name changed to MGCP.\n   *  Introduce a formal\
    \ wildcarding structure in the name of endpoints,\n      inspired from IPDC, and\
    \ detailed the usage of wildcard names in\n      each operation.\n   *  Naming\
    \ scheme for events, introducing a package structure inspired\n      from IPDC.\n\
    \   *  New operations for audit endpoint, audit connection (requested by\n   \
    \   the Cablelabs) and restart (inspired from IPDC).\n   *  New parameter to control\
    \ the behavior of the notification request.\n   *  Improved text on the detection\
    \ and handling of race conditions.\n   *  Syntax modification for event reporting,\
    \ to incorporate package\n      names.\n   *  Definition of basic event packages\
    \ (inspired from IPDC).\n   *  Incorporation of mandatory and optional extension\
    \ parameters,\n      inspired by IPDC.\n   SGCP version 1.1 introduces the following\
    \ changes from version SGCP\n      1.0:\n   *  Extension parameters (X-??:)\n\
    \   *  Error Code 511 (Unrecognized extension).\n   *  All event codes can be\
    \ used in RequestEvent, SignalRequest and\n      ObservedEvent parameters.\n \
    \  *  Error Code 512 (Not equipped to detect requested event).\n   *  Error Code\
    \ 513 (Not equipped to generate requested signal).\n   *  Error Code 514 (Unrecognized\
    \ announcement).\n   *  Specific Endpoint-ID can be returned in creation commands.\n\
    \   *  Changed the code for the ASDI display from \"ad\" to \"asdi\" to avoid\n\
    \      conflict with the digits A and D.\n   *  Changed the code for the answer\
    \ tone from \"at\" to \"aw\" to avoid\n      conflict with the digit A and the\
    \ timer mark T\n   *  Changed the code for the busy tone from \"bt\" to \"bz\"\
    \ to avoid\n      conflict with the digit B and the timer mark T\n   *  Specified\
    \ that the continuity tone value is \"co\" (CT was\n      incorrectly used in\
    \ several instances; CT conflicts with .)\n   *  Changed the code for the dial\
    \ tone from \"dt\" to \"dl\" to avoid\n      conflict with the digit D and the\
    \ timer mark T\n   *  Added a code point for announcement requests.\n   *  Added\
    \ a code point for the \"wink\" event.\n   *  Set the \"octet received\" code\
    \ in the \"Connection Parameters\" to\n      \"OR\" (was set to RO, but then \"\
    OR\" was used throughout all\n      examples.)\n   *  Added a \"data\" mode.\n\
    \   *  Added a description of SDP parameters for the network access mode\n   \
    \   (NAS).\n   *  Added four flow diagrams for the network access mode.\n   *\
    \  Incorporated numerous editing suggestions to make the description\n      easier\
    \ to understand. In particular, cleared the confusion between\n      requests,\
    \ queries, functions and commands.\n   *  Defined the continuity test mode as\
    \ specifying a dual-tone\n      transponder, while the loopback mode can be used\
    \ for a single tone\n      test.\n   *  Added event code \"OC\", operation completed.\n\
    \   *  Added the specification of the \"quarantine list\", which clarifies\n \
    \     the expected handling of events and notifications.\n   *  Added the specification\
    \ of a \"wildcard delete\" operation.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Security issues are discussed in section 5.\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   We want to thank here the many reviewers who provided\
    \ us with advice\n   on the design of SGCP and then MGCP, notably Flemming Andreasen,\n\
    \   Sankar Ardhanari, Francois Berard, David Auerbach, Bob Biskner, David\n  \
    \ Bukovinsky, Jerry Kamitses, Oren Kudevitzki, Barry Hoffner, Troy\n   Morley,\
    \ Dave Oran, Jeff Orwick, John Pickens, Lou Rubin, Chip Sharp,\n   Paul Sijben,\
    \ Kurt Steinbrenner, Joe Stone and Stuart Wray.\n   The version 0.1 of MGCP is\
    \ heavily inspired by the \"Internet Protocol\n   Device Control\" (IPDC) designed\
    \ by the Technical Advisory Committee\n   set up by Level 3 Communications.  Whole\
    \ sets of text have been\n   retrieved from the IP Connection Control protocol,\
    \ IP Media Control\n   protocol, and IP Device Management.  The authors wish to\
    \ acknowledge\n   the contribution to these protocols made by Ilya Akramovich,\
    \ Bob\n   Bell, Dan Brendes, Peter Chung, John Clark, Russ Dehlinger, Andrew\n\
    \   Dugan, Isaac Elliott, Cary FitzGerald, Jan Gronski, Tom Hess, Geoff\n   Jordan,\
    \ Tony Lam, Shawn Lewis, Dave Mazik, Alan Mikhak, Pete\n   O'Connell, Scott Pickett,\
    \ Shyamal Prasad, Eric Presworsky, Paul\n   Richards, Dale Skran, Louise Spergel,\
    \ David Sprague, Raj Srinivasan,\n   Tom Taylor and Michael Thomas.\n"
- title: 10.  References
  contents:
  - "10.  References\n   *  Schulzrinne, H., Casner, S., Frederick, R. and V. Jacobson,\
    \ \"RTP:\n      A Transport Protocol for Real-Time Applications\", RFC 1889,\n\
    \      January 1996.\n   *  Schulzrinne, H., \"RTP Profile for Audio and Video\
    \ Conferences with\n      Minimal Control\", RFC 1890, January 1996.\n   *  Handley,\
    \ M and V. Jacobson, \"SDP: Session Description Protocol\",\n      RFC 2327, April\
    \ 1998.\n   *  Handley, M., \"SAP - Session Announcement Protocol\", Work in\n\
    \      Progress.\n   *  Handley, M., Schulzrinne, H. and E. Schooler, \"Session\
    \ Initiation\n      Protocol (SIP)\", RFC 2543, March 1999.\n   *  Schulzrinne,\
    \ H., Rao, A. and R. Lanphier, \"Real Time Streaming\n      Protocol (RTSP)\"\
    , RFC 2326, April 1998.\n   *  ITU-T, Recommendation Q.761, \"FUNCTIONAL DESCRIPTION\
    \ OF THE ISDN\n      USER PART OF SIGNALLING SYSTEM No. 7\", (Malaga-Torremolinos,\
    \ 1984;\n      modified at Helsinki, 1993)\n   *  ITU-T, Recommendation Q.762,\
    \ \"GENERAL FUNCTION OF MESSAGES AND\n      SIGNALS OF THE ISDN USER PART OF SIGNALLING\
    \ SYSTEM No. 7\",\n      (MalagaTorremolinos, 1984; modified at Helsinki, 1993)\n\
    \   *  ITU-T, Recommendation H.323 (02/98), \"PACKET-BASED MULTIMEDIA\n      COMMUNICATIONS\
    \ SYSTEMS.\"\n   *  ITU-T, Recommendation H.225, \"Call Signaling Protocols and\
    \ Media\n      Stream Packetization for Packet Based Multimedia Communications\n\
    \      Systems.\"\n   *  ITU-T, Recommendation H.245 (02/98), \"CONTROL PROTOCOL\
    \ FOR\n      MULTIMEDIA COMMUNICATION.\"\n   *  Kent, S. and  R. Atkinson, \"\
    Security Architecture for the Internet\n      Protocol\", RFC 2401, November 1998.\n\
    \   *  Kent, S. and  R. Atkinson, \"IP Authentication Header\", RFC 2402,\n  \
    \    November 1998.\n   *  Kent, S. and  R. Atkinson, \"IP Encapsulating Security\
    \ Payload\n      (ESP)\", RFC 2406, November 1998.\n   *  Crocker, D. and  P.\
    \ Overell, \"Augmented BNF for Syntax\n      Specifications:  ABNF\", RFC 2234,\
    \ November 1997.\n"
- title: 11.  Authors' Addresses
  contents:
  - "11.  Authors' Addresses\n   Mauricio Arango\n   RSL COM Latin America\n   6300\
    \ N.W. 5th Way, Suite 100\n   Ft. Lauderdale, FL 33309\n   Phone: (954) 492-0913\n\
    \   EMail: marango@rslcom.com\n   Andrew Dugan\n   Level3 Communications\n   1450\
    \ Infinite Drive\n   Louisville, CO 80027\n   Phone: (303)926 3123\n   EMail:\
    \ andrew.dugan@l3.com\n   Isaac Elliott\n   Level3 Communications\n   1450 Infinite\
    \ Drive\n   Louisville, CO 80027\n   Phone: (303)926 3123\n   EMail: ike.elliott@l3.com\n\
    \   Christian Huitema\n   Telcordia Technologies\n   MCC 1J236B\n   445 South\
    \ Street\n   Morristown, NJ 07960\n   U.S.A.\n   Phone: +1 973-829-4266\n   EMail:\
    \ huitema@research.telcordia.com\n   Scott Pickett\n   Vertical Networks\n   1148\
    \ East Arques Ave\n   Sunnyvale, CA 94086\n   Phone: (408) 523-9700 extension\
    \ 200\n   EMail: ScottP@vertical.com\n   Further information is available on the\
    \ SGCP web site:\n           http://www.argreenhouse.com/SGCP/\n"
- title: '12.  Appendix A: Proposed "MoveConnection" command'
  contents:
  - "12.  Appendix A: Proposed \"MoveConnection\" command\n   It has been proposed\
    \ to create a new command, that would move an\n   existing connection from one\
    \ endpoint to another, on the same\n   gateway.  This command would be specially\
    \ useful for handling certain\n   call services, such as call forwarding between\
    \ endpoints served by\n   the same gateway.\n         [SecondEndPointId,]\n  \
    \       [ConnectionId,]\n         [LocalConnectionDescriptor]\n          <---\
    \ ModifyConnection(CallId,\n                                EndpointId,\n    \
    \                            ConnectionId,\n                                SecondEndPointId,\n\
    \                                [NotifiedEntity,]\n                         \
    \       [LocalConnectionOptions,]\n                                [Mode,]\n \
    \                               [RemoteConnectionDescriptor,]\n              \
    \                  [Encapsulated NotificationRequest,]\n                     \
    \           [Encapsulated EndpointConfiguration])\n   The parameters used are\
    \ the same as in the ModifyConnection command,\n   with the addition of a SecondEndpointId\
    \ that identifies the endpoint\n   towards which the connection is moved.\n  \
    \ The EndpointId should be the fully qualified endpoint identifier of\n   the\
    \ endpoint on which the connection has been created. The local name\n   shall\
    \ not use the wildcard convention.\n   The SecondEndpointId shall be the endpoint\
    \ identifier of the endpoint\n   towards which the connection has been created.\
    \ The \"any of\" wildcard\n   convention can be used, but not the \"all of\" convention.\
    \  If the\n   SecondEndpointId parameter is unqualified, the gateway will choose\
    \ a\n   value, that will be returned to the call agent as a response\n   parameter.\n\
    \   The command will result in the \"move\" of the existing connection to\n  \
    \ the second endpoint.  Depending on gateway implementations, the\n   connection\
    \ identifier of the connection after the move may or may not\n   be the same as\
    \ the connection identifier before the move.  If it is\n   not the same, the new\
    \ value is returned as a response parameter.\n   The intent of the command is\
    \ to effect a local relocation of the\n   connection, without having to modify\
    \ such transmission parameters as\n   IP addresses and port, and thus without\
    \ forcing the call agent to\n   signal the change of parameters to the remote\
    \ gateway, at the other\n   end of the connection.  However, gateway architectures\
    \ may not always\n   allow such transparent moves.  For example, some architectures\
    \ could\n   allow specific IP addresses to different boards that handles specific\n\
    \   group of endpoints.  If for any reason the transmission parameters\n   have\
    \ to be changed as a result of the move, the new\n   LocalConnectionDescriptor\
    \ is returned as a response parameter.\n   The LocalConnectionOptions, Mode, and\
    \ RemoteConnectionDescriptor,\n   when present, are applied after the move.\n\
    \   The RequestedEvents, RequestIdentifier, DigitMap, SignalRequests,\n   QuarantineHandling\
    \ and DetectEvents parameters are optional.  They\n   can be used by the Call\
    \ Agent to transmit a NotificationRequest that\n   is executed simultaneously\
    \ with the move of the connection. When\n   these parameters are present, the\
    \ NotificationRequest applies to the\n   second endpoint.\n   When these parameters\
    \ are present, the move and the\n   NotificationRequests should be synchronized,\
    \ which means that both\n   should be accepted, or both refused.  The NotifiedEntity\
    \ parameter,\n   if present, applies to both the ModifyConnection and the\n  \
    \ NotificationRequest command.\n   The command may carry an encapsulated EndpointConfiguration\
    \ command,\n   that will also apply to the second endpoint.  When this command\
    \ is\n   present, the parameters of the EndpointConfiguration command are\n  \
    \ inserted after the normal parameters of the MoveConnection with the\n   exception\
    \ of the SecondEndpointId, which is not replicated. The End-\n   pointConfiguration\
    \ command may be encapsulated together with an\n   encapsulated NotificationRequest\
    \ command.\n   The encapsulated EndpointConfiguration command shares the fate\
    \ of the\n   MoveConnection command.  If the MoveConnection is rejected, the End-\n\
    \   pointConfiguration is not executed.\n"
- title: 12.1.  Proposed syntax modification
  contents:
  - "12.1.  Proposed syntax modification\n   The only syntax modification necessary\
    \ for the addition of the\n   moveConnection command is the addition of the keyword\
    \ MOVE to the\n   authorized values in the MGCPVerb clause of the formal syntax.\n"
- title: 13.  Full Copyright Statement
  contents:
  - "13.  Full Copyright Statement\n   Copyright (C) The Internet Society (1999).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
