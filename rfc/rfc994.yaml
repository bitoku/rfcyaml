- title: __initial_text__
  contents:
  - "             INTERNATIONAL ORGANIZATION FOR STANDARDIZATION\n              ORGANISATION\
    \ INTERNATIONALE DE NORMALISATION\n     ______________________________________________________________________\n\
    \    |                TELECOMMUNICATIONS AND INFORMATION                   |\n\
    \    |                     EXCHANGE BETWEEN SYSTEMS                        |\n\
    \    |                       Secretariat: USA (ANSI)                       |\n\
    \    |_____________________________________________________________________|\n"
- title: 'Title:  Final Text of DIS 8473, Protocol for Providing the Connectionless-'
  contents:
  - "Title:  Final Text of DIS 8473, Protocol for Providing the Connectionless-\n\
    \        mode Network Service\n"
- title: 'Source:  DIS 8473 Editor'
  contents:
  - 'Source:  DIS 8473 Editor

    '
- title: Contents
  contents:
  - 'Contents

    '
- title: 1   Scope and Field of Application                                         6
  contents:
  - '1   Scope and Field of Application                                         6

    '
- title: 2   References                                                             7
  contents:
  - '2   References                                                             7

    '
- title: SECTION ONE. GENERAL                                                       9
  contents:
  - 'SECTION ONE. GENERAL                                                       9

    '
- title: 3   Definitions                                                            9
  contents:
  - "3   Definitions                                                            9\n\
    \    3.1   Reference Model Definitions  . . . . . . . . . . . . . . . . .   9\n\
    \    3.2   Service Conventions Definitions  . . . . . . . . . . . . . . .   9\n\
    \    3.3   Network Layer Architecture Definitions . . . . . . . . . . . .   9\n\
    \    3.4   Network Layer Addressing Definitions . . . . . . . . . . . . .  10\n\
    \    3.5   Additional Definitions . . . . . . . . . . . . . . . . . . . .  10\n"
- title: 4   Symbols and Abbreviations                                             11
  contents:
  - "4   Symbols and Abbreviations                                             11\n\
    \    4.1   Data Units   . . . . . . . . . . . . . . . . . . . . . . . . .  11\n\
    \    4.2   Protocol Data Units  . . . . . . . . . . . . . . . . . . . . .  11\n\
    \    4.3   Protocol Data Unit Fields  . . . . . . . . . . . . . . . . . .  11\n\
    \    4.4   Parameters . . . . . . . . . . . . . . . . . . . . . . . . . .  11\n\
    \    4.5   Miscellaneous  . . . . . . . . . . . . . . . . . . . . . . . .  11\n"
- title: 5   Overview of the Protocol                                              12
  contents:
  - "5   Overview of the Protocol                                              12\n\
    \    5.1   Internal Organization of the Network Layer . . . . . . . . . .  12\n\
    \    5.2   Subsets of the Protocol  . . . . . . . . . . . . . . . . . . .  12\n\
    \    5.3   Addresses and Titles . . . . . . . . . . . . . . . . . . . . .  13\n\
    \          5.3.1   Addresses  . . . . . . . . . . . . . . . . . . . . . .  13\n\
    \          5.3.2   Network-entity Titles  . . . . . . . . . . . . . . . .  13\n\
    \    5.4   Service Provided by the Network Layer  . . . . . . . . . . . .  14\n\
    \    5.5   Underlying Service Assumed by the Protocol . . . . . . . . . .  14\n\
    \          5.5.1   Subnetwork Points of Attachment  . . . . . . . . . . .  15\n\
    \          5.5.2   Subnetwork Quality of Service  . . . . . . . . . . . .  15\n\
    \          5.5.3   Subnetwork User Data   . . . . . . . . . . . . . . . .  16\n\
    \          5.5.4   Subnetwork Dependent Convergence Functions . . . . . .  16\n\
    \    5.6   Service Assumed from Local Environment . . . . . . . . . . . .  16\n"
- title: SECTION  TWO.  SPECIFICATION  OF  THE  PROTOCOL                           18
  contents:
  - 'SECTION  TWO.  SPECIFICATION  OF  THE  PROTOCOL                           18

    '
- title: 6   Protocol Functions                                                    18
  contents:
  - "6   Protocol Functions                                                    18\n\
    \    6.1   PDU Composition Function . . . . . . . . . . . . . . . . . . .  18\n\
    \    6.2   PDU Decomposition Function . . . . . . . . . . . . . . . . . .  19\n\
    \    6.3   Header Format Analysis Function  . . . . . . . . . . . . . . .  19\n\
    \    6.4   PDU Lifetime Control Function  . . . . . . . . . . . . . . . .  20\n\
    \    6.5   Route PDU Function . . . . . . . . . . . . . . . . . . . . . .  20\n\
    \    6.6   Forward PDU Function . . . . . . . . . . . . . . . . . . . . .  21\n\
    \    6.7   Segmentation Function  . . . . . . . . . . . . . . . . . . . .  21\n\
    \    6.8   Reassembly Function  . . . . . . . . . . . . . . . . . . . . .  22\n\
    \    6.9   Discard PDU Function . . . . . . . . . . . . . . . . . . . . .  23\n\
    \    6.10  Error Reporting Function . . . . . . . . . . . . . . . . . . .  24\n\
    \          6.10.1  Overview . . . . . . . . . . . . . . . . . . . . . . .  24\n\
    \          6.10.2  Requirements . . . . . . . . . . . . . . . . . . . . .  25\n\
    \          6.10.3  Processing of Error Reports  . . . . . . . . . . . . .  25\n\
    \          6.10.4  Relationship of Data PDU Options to Error Reports  . .  26\n\
    \    6.11  PDU Header Error Detection . . . . . . . . . . . . . . . . . .  27\n\
    \    6.12  Padding Function . . . . . . . . . . . . . . . . . . . . . . .  28\n\
    \    6.13  Security . . . . . . . . . . . . . . . . . . . . . . . . . . .  28\n\
    \    6.14  Source Routing Function  . . . . . . . . . . . . . . . . . . .  28\n\
    \    6.15  Record Route Function  . . . . . . . . . . . . . . . . . . . .  29\n\
    \    6.16  Quality of Service Maintenance Function  . . . . . . . . . . .  30\n\
    \    6.17  Priority Function  . . . . . . . . . . . . . . . . . . . . . .  31\n\
    \    6.18  Congestion Notification Function . . . . . . . . . . . . . . .  31\n\
    \    6.19  Classification of Functions  . . . . . . . . . . . . . . . . .  31\n"
- title: 7   Structure and Encoding of PDUs                                        33
  contents:
  - "7   Structure and Encoding of PDUs                                        33\n\
    \    7.1   Structure  . . . . . . . . . . . . . . . . . . . . . . . . . .  33\n\
    \    7.2   Fixed Part . . . . . . . . . . . . . . . . . . . . . . . . . .  34\n\
    \          7.2.1   General  . . . . . . . . . . . . . . . . . . . . . . .  34\n\
    \          7.2.2   Network Layer Protocol Identifier  . . . . . . . . . .  34\n\
    \          7.2.3   Length Indicator   . . . . . . . . . . . . . . . . . .  35\n\
    \          7.2.4   Version/Protocol Identifier Extension  . . . . . . . .  35\n\
    \          7.2.5   PDU Lifetime   . . . . . . . . . . . . . . . . . . . .  35\n\
    \          7.2.6   Flags  . . . . . . . . . . . . . . . . . . . . . . . .  35\n\
    \                  7.2.6.1   Segmentation Permitted . . . . . . . . . . .  35\n\
    \                  7.2.6.2   More Segments  . . . . . . . . . . . . . . .  35\n\
    \                  7.2.6.3   Error Report   . . . . . . . . . . . . . . .  36\n\
    \          7.2.7   Type Code  . . . . . . . . . . . . . . . . . . . . . .  36\n\
    \          7.2.8   PDU Segment Length   . . . . . . . . . . . . . . . . .  36\n\
    \          7.2.9   PDU Checksum   . . . . . . . . . . . . . . . . . . . .  36\n\
    \    7.3   Address Part   . . . . . . . . . . . . . . . . . . . . . . . .  37\n\
    \          7.3.1   General  . . . . . . . . . . . . . . . . . . . . . . .  37\n\
    \                  7.3.1.1   Destination and Source Addresses . . . . . .  37\n\
    \    7.4   Segmentation Part  . . . . . . . . . . . . . . . . . . . . . .  38\n\
    \          7.4.1   Data Unit Identifier . . . . . . . . . . . . . . . . .  38\n\
    \          7.4.2   Segment Offset . . . . . . . . . . . . . . . . . . . .  38\n\
    \          7.4.3   PDU Total Length . . . . . . . . . . . . . . . . . . .  39\n\
    \    7.5   Options Part   . . . . . . . . . . . . . . . . . . . . . . . .  39\n\
    \          7.5.1   General  . . . . . . . . . . . . . . . . . . . . . . .  39\n\
    \          7.5.2   Padding  . . . . . . . . . . . . . . . . . . . . . . .  40\n\
    \          7.5.3   Security . . . . . . . . . . . . . . . . . . . . . . .  40\n\
    \                  7.5.3.1   Source Address Specific  . . . . . . . . . .  41\n\
    \                  7.5.3.2   Destination Address Specific . . . . . . . .  41\n\
    \                  7.5.3.3   Globally Unique Security . . . . . . . . . .  41\n\
    \          7.5.4   Source Routing   . . . . . . . . . . . . . . . . . . .  41\n\
    \          7.5.5   Recording of Route . . . . . . . . . . . . . . . . . .  42\n\
    \          7.5.6   Quality of Service Maintenance . . . . . . . . . . . .  43\n\
    \                  7.5.6.1   Source Address Specific  . . . . . . . . . .  43\n\
    \                  7.5.6.2   Destination Address Specific . . . . . . . .  43\n\
    \                  7.5.6.3   Globally Unique QoS  . . . . . . . . . . . .  43\n\
    \          7.5.7   Priority   . . . . . . . . . . . . . . . . . . . . . .  44\n\
    \    7.6   Data Part  . . . . . . . . . . . . . . . . . . . . . . . . . .  45\n\
    \    7.7   Data (DT) PDU  . . . . . . . . . . . . . . . . . . . . . . . .  46\n\
    \          7.7.1   Structure  . . . . . . . . . . . . . . . . . . . . . .  46\n\
    \          7.7.1.1   Fixed Part . . . . . . . . . . . . . . . . . . . . .  47\n\
    \          7.7.1.2   Addresses  . . . . . . . . . . . . . . . . . . . . .  47\n\
    \          7.7.1.3   Segmentation . . . . . . . . . . . . . . . . . . . .  47\n\
    \          7.7.1.4   Options  . . . . . . . . . . . . . . . . . . . . . .  47\n\
    \          7.7.1.5   Data   . . . . . . . . . . . . . . . . . . . . . . .  47\n\
    \    7.8   Inactive Network Layer Protocol  . . . . . . . . . . . . . . .  47\n\
    \          7.8.1   Network Layer Protocol Id  . . . . . . . . . . . . . .  47\n\
    \          7.8.2   Data Field   . . . . . . . . . . . . . . . . . . . . .  47\n\
    \    7.9   Error Report PDU (ER)  . . . . . . . . . . . . . . . . . . . .  48\n\
    \          7.9.1   Structure  . . . . . . . . . . . . . . . . . . . . . .  48\n\
    \                  7.9.1.1   Fixed Part . . . . . . . . . . . . . . . . .  49\n\
    \                  7.9.1.2   Addresses  . . . . . . . . . . . . . . . . .  49\n\
    \                  7.9.1.3   Options  . . . . . . . . . . . . . . . . . .  49\n\
    \                  7.9.1.4   Reason for Discard . . . . . . . . . . . . .  50\n\
    \                  7.9.1.5   Error Report Data Field  . . . . . . . . . .  51\n"
- title: 8   Conformance                                                           51
  contents:
  - "8   Conformance                                                           51\n\
    \    8.1   Provision of Functions for Conformance . . . . . . . . . . . .  51\n"
- title: List of Tables
  contents:
  - 'List of Tables

    '
- title: 1     Service Primitives for Underlying Service  . . . . . . . . . . . .  14
  contents:
  - '1     Service Primitives for Underlying Service  . . . . . . . . . . . .  14

    '
- title: 2     Service Primitives for Underlying Service  . . . . . . . . . . . .  14
  contents:
  - '2     Service Primitives for Underlying Service  . . . . . . . . . . . .  14

    '
- title: 3     Timer Primitives   . . . . . . . . . . . . . . . . . . . . . . . .  14
  contents:
  - '3     Timer Primitives   . . . . . . . . . . . . . . . . . . . . . . . .  14

    '
- title: 4     Categorization of Protocol Functions . . . . . . . . . . . . . . .  32
  contents:
  - '4     Categorization of Protocol Functions . . . . . . . . . . . . . . .  32

    '
- title: 5     Valid PDU Types  . . . . . . . . . . . . . . . . . . . . . . . . .  36
  contents:
  - '5     Valid PDU Types  . . . . . . . . . . . . . . . . . . . . . . . . .  36

    '
- title: 6     Encoding of Option Parameters  . . . . . . . . . . . . . . . . . .  39
  contents:
  - '6     Encoding of Option Parameters  . . . . . . . . . . . . . . . . . .  39

    '
- title: 7     Reason for Discard . . . . . . . . . . . . . . . . . . . . . . . .  50
  contents:
  - '7     Reason for Discard . . . . . . . . . . . . . . . . . . . . . . . .  50

    '
- title: 8     Categorization of Functions  . . . . . . . . . . . . . . . . . . .  52
  contents:
  - '8     Categorization of Functions  . . . . . . . . . . . . . . . . . . .  52

    '
- title: List of Figures
  contents:
  - 'List of Figures

    '
- title: 1     Interrelationship of Standards   . . . . . . . . . . . . . . . . .   6
  contents:
  - '1     Interrelationship of Standards   . . . . . . . . . . . . . . . . .   6

    '
- title: 2     PDU Structure  . . . . . . . . . . . . . . . . . . . . . . . . . .  34
  contents:
  - '2     PDU Structure  . . . . . . . . . . . . . . . . . . . . . . . . . .  34

    '
- title: 3     PDU Header -- Fixed Part . . . . . . . . . . . . . . . . . . . . .  34
  contents:
  - '3     PDU Header -- Fixed Part . . . . . . . . . . . . . . . . . . . . .  34

    '
- title: 4     PDU Header -- Address Part   . . . . . . . . . . . . . . . . . . .  37
  contents:
  - '4     PDU Header -- Address Part   . . . . . . . . . . . . . . . . . . .  37

    '
- title: 5     Address Parameters . . . . . . . . . . . . . . . . . . . . . . . .  38
  contents:
  - '5     Address Parameters . . . . . . . . . . . . . . . . . . . . . . . .  38

    '
- title: 6     PDU Header -- Segmentation Part  . . . . . . . . . . . . . . . . .  38
  contents:
  - '6     PDU Header -- Segmentation Part  . . . . . . . . . . . . . . . . .  38

    '
- title: 7     PDU Header -- Options Part . . . . . . . . . . . . . . . . . . . .  39
  contents:
  - '7     PDU Header -- Options Part . . . . . . . . . . . . . . . . . . . .  39

    '
- title: 8     PDU Header -- Data Field   . . . . . . . . . . . . . . . . . . . .  45
  contents:
  - '8     PDU Header -- Data Field   . . . . . . . . . . . . . . . . . . . .  45

    '
- title: 9     DT PDU   . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  46
  contents:
  - '9     DT PDU   . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  46

    '
- title: 10    Inactive Network Layer Protocol  . . . . . . . . . . . . . . . . .  47
  contents:
  - '10    Inactive Network Layer Protocol  . . . . . . . . . . . . . . . . .  47

    '
- title: 11    Error Report PDU . . . . . . . . . . . . . . . . . . . . . . . . .  48
  contents:
  - '11    Error Report PDU . . . . . . . . . . . . . . . . . . . . . . . . .  48

    '
- title: 0     Introduction
  contents:
  - "0     Introduction\n   This Protocol Standard is one of a set of International\
    \ Standards\n   produced to facilitate the interconnection of open systems. The\
    \ set\n   of standards covers the services and protocols required to achieve\n\
    \   such interconnection.\n   This Protocol Standard is positioned with respect\
    \ to other related\n   standards by the layers defined in the Reference Model\
    \ for Open Sys-\n   tems Interconnection (ISO 7498).  In particular, it is a protocol\
    \ of\n   the Network Layer. This Protocol may be used between network-entities\n\
    \   in end systems or in Network Layer relay systems (or both).  It pro-\n   vides\
    \ the Connectionless-mode Network Service as defined in Addendum\n   1 to the\
    \ Network Service Definition Covering Connectionless-mode\n   Transmission (ISO\
    \ 8348/AD1).\n   The interrelationship of these standards is illustrated in Figure\
    \ 1\n   below:\n   --------------------+--- ISO NETWORK SERVICE PROVIDER -----^-----------------\n\
    \                       |                                      |\n           \
    \            |                                      |\n                      \
    \ |                                      |\n           PROTOCOL    |  REFERENCE\
    \ TO AIMS  -----------------+\n                       |\n        SPECIFICATION\
    \  |  REFERENCE TO ASSUMPTIONS -----------+\n                       |        \
    \                              |\n                       |                   \
    \                   |\n                       |                              \
    \        |\n   --------------------+---SUBNETWORK SERVICE DEFINITION(S)---v-----------------\n\
    \                 Figure 1: Interrelationship of Standards\n"
- title: 1     Scope and Field of Application
  contents:
  - "1     Scope and Field of Application\n   This International Standard specifies\
    \ a protocol which is used to\n   provide the Connectionless-mode Network Service\
    \ as described in Ad-\n   dendum 1 to the Network Service Definition Covering\
    \ Connectionless-\n   mode Transmission.  The protocol relies upon the provision\
    \ of an\n   underlying connectionless-mode service by real subnetworks and/or\n\
    \   data links. The underlying connectionless-mode service assumed by the\n  \
    \ protocol may be obtained either directly, from a connectionless-mode\n   real\
    \ subnetwork, or indirectly, through the operation of an appropri-\n   ate Subnetwork\
    \ Dependent Convergence Function (SNDCF) or Protocol\n   (SNDCP) over a connection-mode\
    \ real subnetwork as described in ISO\n   8648, Internal Organization of the Network\
    \ Layer.\n      This Standard specifies:\n      a)  procedures for the connectionless\
    \ transmission of data and\n          control information from one network-entity\
    \ to a peer\n          network-entity;\n      b)  the encoding of the protocol\
    \ data units (PDUs) used for the\n          transmission of data and control information,\
    \ comprising a\n          variable-length protocol header format;\n      c)  procedures\
    \ for the correct interpretation of protocol control\n          information; and\n\
    \      d)  the functional requirements for implementations claiming\n        \
    \  conformance to the Standard.\n      The procedures are defined in terms of:\n\
    \      a)  the interactions among peer network-entities through the\n        \
    \  exchange of protocol data units;\n      b)  the interactions between a network-entity\
    \ and a Network Service\n          user through the exchange of Network Service\
    \ primitives; and\n      c)  the interactions between a network-entity and an\
    \ underlying\n          service provider through the exchange of service primitives.\n"
- title: 2     References
  contents:
  - "2     References\n   ISO 7498, Information Processing Systems --- Open Systems\
    \ Intercon-\n   nection --- Basic Reference Model\n   DIS 7498/AD1, Information\
    \ Processing Systems --- Open Systems In-\n   terconnection --- Addendum to ISO\
    \ 7498 Covering Connectionless-mode\n   Transmission\n   ISO 8348, Information\
    \ Processing Systems --- Telecommunications and\n   Information Exchange between\
    \ Systems --- Network Service Definition\n   ISO 8348/AD1, Information Processing\
    \ Systems --- Telecommunications\n   and Information Exchange between Systems\
    \ --- Addendum to the Net-\n   work Service Definition Covering Connectionless-mode\
    \ Transmission\n   ISO 8348/AD2, Information Processing Systems --- Telecommunications\n\
    \   and Information Exchange between Systems --- Addendum to the Net-\n   work\
    \ Service Definition Covering Network Layer Addressing*\n   DIS 8648, Information\
    \ Processing Systems --- Telecommunications and\n   Information Exchange between\
    \ Systems --- Internal Organization of the\n   Network Layer\n   ISO 8509, Technical\
    \ Report --- OSI Service Conventions\n   ISO 9074, A Formal Description Technique\
    \ based on an Extended State\n   Transition Model\n"
- title: ________________________________
  contents:
  - "________________________________\n     *At present, at the stage of Draft; publication\
    \ anticipated in\n      due course.\n                          SECTION  ONE. \
    \ GENERAL\n"
- title: 3     Definitions
  contents:
  - '3     Definitions

    '
- title: 3.1   Reference Model Definitions
  contents:
  - "3.1   Reference Model Definitions\n   This document makes use of the following\
    \ concepts defined in ISO 7498:\n     (a)  End system\n     (b)  Network entity\n\
    \     (c)  Network layer\n     (d)  Network protocol\n     (e)  Network protocol\
    \ data unit\n     (f)  Network relay\n     (g)  Network service\n     (h)  Network\
    \ service access point\n     (i)  Network service access point address\n     (j)\
    \  Routing\n     (k)  Service\n     (l)  Service data unit\n"
- title: 3.2   Service Conventions Definitions
  contents:
  - "3.2   Service Conventions Definitions\n   This Protocol Standard makes use of\
    \ the following terms from the OSI\n   Service Conventions Technical Report (ISO\
    \ TR 8509):\n     (a)  Service provider\n     (b)  Service user\n"
- title: 3.3   Network Layer Architecture Definitions
  contents:
  - "3.3   Network Layer Architecture Definitions\n   This Protocol Standard makes\
    \ use of the following terms from the\n   Internal Organization of the Network\
    \ Layer (ISO 8648):\n     (a)  Intermediate system\n     (b)  Relay system\n \
    \    (c)  Subnetwork\n"
- title: 3.4   Network Layer Addressing Definitions
  contents:
  - "3.4   Network Layer Addressing Definitions\n   This Protocol Standard makes use\
    \ of the following terms from ISO 8348/AD2,\n   Addendum to the Network Service\
    \ Definition Covering Network Layer\n   addressing:\n     (a)  Network addressing\
    \ domain\n     (b)  Network protocol address information\n     (c)  Subnetwork\
    \ point of attachment\n"
- title: 3.5   Additional Definitions
  contents:
  - "3.5   Additional Definitions\n   For the purposes of this Protocol Standard,\
    \ the following definitions\n   apply:\n     (a)  derived PDU --- a protocol data\
    \ unit whose fields are identical\n          to those of an initial PDU, except\
    \ that it carries only a segment\n          of the user data from an N-UNITDATA\
    \ request.\n     (b)  initial PDU --- a protocol data unit carrying the whole\
    \ of the\n          userq data from an N-UNITDATA request.\n     (c)  local matter\
    \ --- a decision made by a system concerning its\n          behavior in the Network\
    \ Layer that is not prescribed or\n          constrained by this Protocol Standard.\n\
    \     (d)  network-entity title --- an identifier for a network-entity\n     \
    \     which has the same abstract syntax as an NSAP address, and which\n     \
    \     can be used to unambiguously identify a network-entity in an end\n     \
    \     or intermediate system.\n     (e)  reassembly --- the act of regenerating\
    \ an initial PDU from two\n          or more derived PDUs.\n     (f)  segment\
    \ --- a distinct unit of data consisting of part or all\n          of the user\
    \ data provided in the N-UNITDATA request and delivered\n          in the N-UNITDATA\
    \ indication.\n     (g)  segmentation --- the act of generating two or more derived\
    \ PDUs\n          from an initial or derived PDU. The derived PDUs together carry\n\
    \          the entire user data of the initial or derived PDU from which they\n\
    \          were generated.\n                                       Note:\n   \
    \       It is possible that such an initial PDU will never actually be\n     \
    \     generated for a particular N-UNITDATA request, owing to the\n          immediate\
    \ application of segmentation.\n"
- title: 4     Symbols and Abbreviations
  contents:
  - '4     Symbols and Abbreviations

    '
- title: 4.1   Data Units
  contents:
  - "4.1   Data Units\n     NSDU      Network Service Data Unit\n     PDU       Protocol\
    \ Data Unit\n     SNSDU     Subnetwork Service Data Unit\n"
- title: 4.2     Protocol Data Units
  contents:
  - "4.2     Protocol Data Units\n     DT PDU    Data Protocol Data Unit\n     ER\
    \ PDU    Error Report Protocol Data Unit\n"
- title: 4.3     Protocol Data Unit Fields
  contents:
  - "4.3     Protocol Data Unit Fields\n     CS        Checksum\n     DA        Destination\
    \ Address\n     DAL       Destination Address Length\n     DUID      Data Unit\
    \ Identifier\n     E/R       Error Report Flag\n     LI        Length Indicator\n\
    \     LT        Lifetime\n     MS        More Segments Flag\n     NLPID     Network\
    \ Layer Protocol Identifier\n     SA        Source Address\n     SAL       Source\
    \ Address Length\n     SL        Segment Length\n     SO        Segment Offset\n\
    \     SP        Segmentation Permitted Flag\n     TL        Total Lengt\n    \
    \ TP        Type\n     V/P       Version/Protocol Identifier Extension\n"
- title: 4.4     Parameters
  contents:
  - "4.4     Parameters\n     DA      Destination Address\n     QOS     Quality of\
    \ Service\n     SA      Source Address\n"
- title: 4.5     Miscellaneous
  contents:
  - "4.5     Miscellaneous\n     CLNP       Connectionless-mode Network Protocol\n\
    \     NS         Network Service\n     NPAI       Network Protocol Address Information\n\
    \     NSAP       Network Service Access Point\n     SDU        Service Data Uni\n\
    \     SN         Subnetwork\n     SNDCF      Subnetwork Dependent Convergence\
    \ Function\n     SNDCP      Subnetwork Dependent Convergence Protocol\n     SNICP\
    \      Subnetwork Independent Convergence Protocol\n     SNPA       Subnetwork\
    \ Point of Attachment\n"
- title: 5     Overview of the Protocol
  contents:
  - '5     Overview of the Protocol

    '
- title: 5.1   Internal Organization of the Network Layer
  contents:
  - "5.1   Internal Organization of the Network Layer\n   The architectural organization\
    \ of the Network Layer is described in a\n   separate document, Internal Organization\
    \ of the Network Layer (ISO\n   8648). ISO 8648 identifies and categorizes the\
    \ way in which functions\n   can be performed within the Network Layer by Network\
    \ Layer protocols,\n   thus providing a uniform framework for describing how protocols\n\
    \   operating either individually or cooperatively in the Network Layer\n   can\
    \ be used to provide the OSI Network Service. This protocol is\n   designed to\
    \ be used in the context of the internetworking protocol\n   approach to the provision\
    \ of the Connectionless-mode Network Service\n   defined in that Standard.\n \
    \  This protocol is intended for use in the Subnetwork Independent Con-\n   vergence\
    \ Protocol (SNICP) role.  A protocol which fulfills the SNICP\n   role operates\
    \ to construct the OSI Network Service over a defined set\n   of underlying services,\
    \ performing functions which are necessary to\n   support the uniform appearance\
    \ of the OSI Connectionless-mode Network\n   Service over a homogeneous or heterogeneous\
    \ set of interconnected\n   subnetworks.  This protocol is defined to accommodate\
    \ variability\n   where Subnetwork Dependent Convergence Protocols and/or Subnetwork\n\
    \   Access Protocols do not provide all of the functions necessary to\n   support\
    \ the Connectionless-mode Network Service over all or part of\n   the path from\
    \ one NSAP to another.\n   As described in ISO 8648, a protocol at the Network\
    \ Layer may fulfill\n   different roles in different configurations.  Although\
    \ this protocol\n   is designed particularly to be suitable for a SNICP role in\
    \ the con-\n   text of the internetworking protocol approach to the provision\
    \ of the\n   Connectionless-mode Network Service, it may also be used to fulfill\n\
    \   other roles and may therefore be used in the context of other ap-\n   proaches\
    \ to subnetwork interconnection.\n   The specification of this protocol begins\
    \ with a definition of the\n   underlying service which it assumes. This service\
    \ is made available\n   by the operation of other Network Layer protocols or through\
    \ provi-\n   sion of the Data Link Service. The underlying service assumed by\
    \ this\n   protocol is described in Clause 5.5.\n"
- title: 5.2     Subsets of the Protocol
  contents:
  - "5.2     Subsets of the Protocol\n   Two proper subsets of the full protocol are\
    \ defined which permit the\n   use of known subnetwork characteristics and are\
    \ therefore not subnet-\n   work independent.\n   The Inactive Network Layer protocol\
    \ subset is a null-function subset\n   which can be used when it is known that\
    \ the source and destination\n   end-systems are connected by a single subnetwork,\
    \ and when none of\n   the functions performed by the full protocol is required\
    \ to provide\n   the Connectionless-mode Network Service between any pair of end-\n\
    \   systems.\n   The Non-segmenting protocol subset permits simplification of\
    \ the\n   header where it is known that the source and destination end-systems\n\
    \   are connected by subnetworks whose service data unit sizes are\n   greater\
    \ than or equal to a known bound which is large enough so that\n   segmentation\
    \ is not required. This subset is selected by setting the\n   Segmentation Permitted\
    \ flag to zero.\n"
- title: 5.3     Addresses and Titles
  contents:
  - "5.3     Addresses and Titles\n   The following Clauses describe the addresses\
    \ and titles used by this\n   Protocol.\n"
- title: 5.3.1    Addresses
  contents:
  - "5.3.1    Addresses\n   The Source Address and Destination Address parameters\
    \ referred to in\n   Clause 7.3 of this International Standard are OSI Network\
    \ Service Ac-\n   cess Point Addresses.  The syntax and semantics of an OSI Network\n\
    \   Service Access Point Address are described in a separate document,\n   ISO\
    \ 8348/AD2, Addendum to the Network Service Definition Covering\n   Network Layer\
    \ Addressing.\n   The encoding used by this protocol to convey NSAP Addresses\
    \ shall be\n   the preferred binary encoding specified in ISO 8348/AD2; the entire\n\
    \   NSAP address, taken as a whole, is represented explicitly as a string\n  \
    \ of binary octets.  This string is conveyed in its entirety in the ad-\n   dress\
    \ fields described in Clause 7.3. The rules governing the genera-\n   tion of\
    \ the preferred binary encoding are described in ISO 8348/AD2.\n"
- title: 5.3.2    Network-entity Titles
  contents:
  - "5.3.2    Network-entity Titles\n   A network-entity title is an identifier for\
    \ a network-entity in an\n   endsystem or intermediate-system. Network-entity\
    \ titles are allocated\n   from the same name space as NSAP addresses, and the\
    \ determination of\n   whether an address is an NSAP address or a network-entity\
    \ title\n   depends on the context in which the address is interpreted. The en-\n\
    \   tries in the Source Routing and Recording of Route parameters defined\n  \
    \ in Clauses 7.5.4 and 7.5.5 are network-entity titles. The Source Ad-\n   dress\
    \ and Destination Address parameters in the Error Report PDU de-\n   fined in\
    \ Clause 7.9.1.2 are also network-entity titles.\n   The encoding used by this\
    \ protocol to convey network-entity titles\n   shall also be the preferred binary\
    \ encoding; again, the entire\n   network-entity title, taken as a whole, is represented\
    \ explicitly as\n   a string of binary octets.  This string is conveyed in its\
    \ entirety\n   in the fields described in Clauses 7.5.4, 7.5.5, and 7.9.1.2.\n"
- title: 5.4     Service Provided by the Network Layer
  contents:
  - "5.4     Service Provided by the Network Layer\n   The service provided by this\
    \ protocol is the Connectionless-mode Net-\n   work Service described in ISO 8348/AD1,\
    \ Addendum to the Network Ser-\n   vice Definition Covering Connectionless-mode\
    \ Transmission.  The Net-\n   work Service primitives provided are summarized\
    \ in Table 1:\n           _____________________________________________________________\n\
    \          |             PRIMITIVES                    PARAMETERS        |\n \
    \         |____________________________________________________________ |\n  \
    \        |  N_UNITDATA         .Request    |  N_Source_Address,        |\n   \
    \       |                     .Indication |  N_Destination_Address,   |\n    \
    \      |                                 |  N_Quality_of_Service,    |\n     \
    \     |                                 |  N_Userdata               |\n      \
    \    |_________________________________|___________________________|\n       \
    \        Table 1: Service Primitives for Underlying Service\n   The Addendum to\
    \ the Network Service Definition Covering\n   Connectionless-mode Transmission\
    \ (ISO 8348/AD1) states that the max-\n   imum size of a connectionless-mode Network-service-data-unit\
    \ (NSDU)\n   is limited to 64512 octets.\n"
- title: 5.5     Underlying Service Assumed by the Protocol
  contents:
  - "5.5     Underlying Service Assumed by the Protocol\n   The underlying service\
    \ required to support this protocol is defined\n   by the following primitives:\n\
    \           _____________________________________________________________\n  \
    \        |             PRIMITIVES                    PARAMETERS        |\n   \
    \       |____________________________________________________________ |\n    \
    \      |  SN_UNITDATA        .Request    | SN_Source_Address,        |\n     \
    \     |                     .Indication | SN_Destination_Address,   |\n      \
    \    |                                 | SN_Quality_of_Service,    |\n       \
    \   |                                 | SN_Userdata               |\n        \
    \  |_________________________________|___________________________|\n         \
    \      Table 2: Service Primitives for Underlying Service\n                  \
    \                 Note:\n   These service primitives are used to describe the\
    \ abstract interface\n   which exists between the ISO 8473 protocol machine and\
    \ an underlying\n   real subnetwork or a Subnetwork Dependent Convergence Function\
    \ which\n   operates over a real subnetwork or real data link to provide the\n\
    \   required underlying service.\n"
- title: 5.5.1    Subnetwork Points of Attachment
  contents:
  - "5.5.1    Subnetwork Points of Attachment\n   The source and destination addresses\
    \ specify the points of attachment\n   to a public or private subnetwork(s) involved\
    \ in the transmission.\n   Subnetwork Point of Attachment addresses (SNPAs) are\
    \ defined by each\n   individual subnetwork authority.\n   The syntax and semantics\
    \ of SNPAs are not defined in this Standard.\n"
- title: 5.5.2    Subnetwork Quality of Service
  contents:
  - "5.5.2    Subnetwork Quality of Service\n   Subnetwork Quality of Service describes\
    \ aspects of an underlying\n   connectionless-mode service which are attributable\
    \ solely to the\n   underlying service.\n   Associated with each connectionless-mode\
    \ transmission, certain meas-\n   ures of Quality of Service are requested when\
    \ the primitive action is\n   initiated.  These requested measures (or parameter\
    \ values and op-\n   tions) are based on a priori knowledge of the service(s)\
    \ made avail-\n   able to it by the subnetwork. Knowledge of the nature and type\
    \ of\n   service available is typically obtained prior to an invocation of the\n\
    \   underlying connectionless-mode service.\n   The Quality of Service parameters\
    \ identified for the underlying\n   connectionless-mode service may in some circumstances\
    \ be directly\n   derivable from or mappable onto those identified in the\n  \
    \ Connectionless-mode Network Service.  The following parameters as de-\n   fined\
    \ in ISO 8348/AD1, Addendum to the Network Service Definition\n   Covering Connectionlessmode\
    \ Transmission, may be employed:\n     (a)  transit delay;\n     (b)  protection\
    \ against unauthorized access;\n     (c)  cost determinants;\n     (d)  priority;\
    \ and\n     (e)  residual error probability.\n                               \
    \     Note:\n        For those subnetworks which do not inherently provide Quality\
    \ of\n        Service as a parameter when the primitive action is initiated, it\n\
    \        is a local matter as to how the semantics of the service requested\n\
    \        might be preserved. In particular, there may be instances in which\n\
    \        the Quality of Service requested cannot be maintained.  In such\n   \
    \     circumstances, an attempt shall be made to deliver the protocol\n      \
    \  data unit at whatever Quality of Service is available.\n"
- title: 5.5.3    Subnetwork User Data
  contents:
  - "5.5.3    Subnetwork User Data\n   The SN-Userdata is an ordered multiple of octets,\
    \ and is transferred\n   transparently between the specified subnetwork points\
    \ of attachment.\n   The underlying service assumed by the CLNP is required to\
    \ support a\n   service data unit size of at least 512 octets.\n   If the minimum\
    \ service data unit sizes supported by all of the sub-\n   networks involved in\
    \ the transmission of a particular PDU are known\n   to be large enough that segmentation\
    \ is not required, then the Non-\n   segmenting protocol subset may be used.\n"
- title: 5.5.4    Subnetwork Dependent Convergence Functions
  contents:
  - "5.5.4    Subnetwork Dependent Convergence Functions\n   Subnetwork Dependent\
    \ Convergence Functions may be performed to pro-\n   vide an underlying connectionless-mode\
    \ service in the case where a\n   real subnetwork does not inherently provide\
    \ the connectionless-mode\n   service assumed by the protocol.  If a subnetwork\
    \ inherently provides\n   a connection-mode service, a Subnetwork Dependent Convergence\
    \ Func-\n   tion provides a mapping into the required underlying service.  Sub-\n\
    \   network Dependent Convergence Functions may also be required in those\n  \
    \ cases where functions assumed from the underlying service are not\n   performed.\
    \  In some cases, this may require the operation of an ex-\n   plicit protocol\
    \ (i.e., a protocol involving explicit exchanges of\n   protocol control information\
    \ between peer network-entities) in the\n   Subnetwork Dependent Convergence Protocol\
    \ (SNDCP) role. However,\n   there may also be cases where the functionality required\
    \ to fulfill\n   the SNDCP role consists simply of a set of rules for manipulating\
    \ the\n   underlying service.\n"
- title: 5.6     Service Assumed from Local Environment
  contents:
  - "5.6     Service Assumed from Local Environment\n   A timer service must be provided\
    \ to allow the protocol entity to\n   schedule events.\n   There are three primitives\
    \ associated with the S-TIMER service:\n      1.  the S--TIMER Request,\n    \
    \  2.  the S--TIMER Response, and\n      3.  the S--TIMER Cancel.\n   The S--TIMER\
    \ Request primitive indicates to the local environment\n   that it should initiate\
    \ a timer of the specified name and subscript\n   and maintain it for the duration\
    \ specified by the time parameter.\n   The S--TIMER Response primitive is initiated\
    \ by the local environment\n   to indicate that the delay requested by the corresponding\
    \ S-TIMER Re-\n   quest primitive has elapsed.\n   The S--TIMER Cancel primitive\
    \ is an indication to the local environ-\n   ment that the specified timer(s)\
    \ should be canceled. If the subscript\n   parameter is not specified, then all\
    \ timers with the specified name\n   are canceled; otherwise, the timer of the\
    \ given name and subscript is\n   cancelled.  If no timers correspond to the parameters\
    \ specified, the\n   local environment takes no action.\n   The parameters of\
    \ the S--TIMER service primitives are specified in\n   Table 3.\n            \
    \   __________________________________________________\n              |      \
    \  PRIMITIVES               PARAMETERS      |\n              |_________________________________________________|\n\
    \              |    S--TIMER     .Request  |  S-Time,            |\n         \
    \     |                           |  S-Name,            |\n              |   \
    \                        |  S-Subscript        |\n              |            \
    \               |                     |\n              |                 .Response\
    \ |  S-Name,            |\n              |                           |  S-Subscript\
    \        |\n              |___________________________|_____________________|\n\
    \                        Table 3: Timer Primitives\n   The time parameter indicates\
    \ the time duration of the specified ti-\n   mer.  An identifiying label is associated\
    \ with a timer by means of\n   the name parameter. The subscript parameter specifies\
    \ a value to dis-\n   tinguish timers with the same name. The name and subscript\
    \ taken to-\n   gether constitute a unique reference to the timer.\n   Timers\
    \ used in association with a specific protocol funtion are de-\n   fined under\
    \ that protocol function.\n                                   Note:\n       This\
    \ International Standard does not define specific values for\n       the timers.\
    \ Any derivations described in this Standard are not\n       mandatory. Timer\
    \ values should be chosen so that the requested\n       Quality of Service can\
    \ be provided, given the known characteristics\n       of the underlying service.\n\
    \              SECTION  TWO.  SPECIFICATION OF THE PROTOCOL\n"
- title: 6     Protocol Functions
  contents:
  - "6     Protocol Functions\n   This Clause describes the functions performed as\
    \ part of the Proto-\n   col.\n   Not all of the functions must be performed by\
    \ every implementation.\n   Clause 6.17 specifies which functions may be omitted,\
    \ and the correct\n   behavior when requested functions are not implemented.\n"
- title: 6.1     PDU Composition Function
  contents:
  - "6.1     PDU Composition Function\n   This function is responsible for the construction\
    \ of a protocol data\n   unit according to the rules governing the encoding of\
    \ PDUs given in\n   Clause 7.  Protocol Control Information required for delivering\
    \ the\n   data unit to its destination is determined from current state and lo-\n\
    \   cal information and from the parameters associated with the N-\n   UNITDATA\
    \ Request.\n   Network Protocol Address Information (NPAI) for the Source Address\n\
    \   and Destination Address fields of the PDU header is derived from the\n   NS-Source-Address\
    \ and NS-Destination-Address parameters. The NS-\n   Destination-Address and NS-Quality-of-Service\
    \ parameters, together\n   with current state and local information, are used\
    \ to determine which\n   optional functions are to be selected. User data passed\
    \ from the Net-\n   work Service User (NS-Userdata) forms the Data field of the\
    \ protocol\n   data unit.\n   During the composition of the protocol data unit,\
    \ a Data Unit Iden-\n   tifier is assigned to distinguish this request to transmit\
    \ NS-\n   Userdata to a particular destination NS User from other such re-\n \
    \  quests. The originator of the PDU must choose the Data Unit Identif-\n   ier\
    \ so that it remains unique (for this Source and Destination ad-\n   dress pair)\
    \ for the maximum lifetime of the Initial PDU in the net-\n   work; this rule\
    \ applies for any PDUs derived from the Initial PDU as\n   a result of the application\
    \ of the Segmentation Function (see Clause\n   6.7).  Derived PDUs are considered\
    \ to correspond to the same Initial\n   PDU, and hence the same N-UNITDATA Request,\
    \ if they have the same\n   Source Address, Destination Address, and Data Unit\
    \ Identifier.\n   The Data Unit Identifier is also available for ancillary functions\n\
    \   such as error reporting (see Clause 6.10).\n   The total length of the PDU\
    \ in octets is determined by the originator\n   and placed in the Total Length\
    \ field of the PDU header. This field is\n   not changed in any Derived PDU for\
    \ the lifetime of the protocol data\n   unit.\n   When the Non-segmenting protocol\
    \ subset is employed, neither the To-\n   tal Length field nor the Data Unit Identifier\
    \ field is present.  The\n   rules governing the PDU composition function are\
    \ modified in this\n   case as follows. During the composition of the protocol\
    \ data unit,\n   the total length of the PDU in octets is determined by the originator\n\
    \   and placed in the Segment Length field of the PDU header. This field\n   is\
    \ not changed for the lifetime of the PDU. No Data Unit Identifica-\n   tion is\
    \ provided.\n"
- title: 6.2     PDU Decomposition Function
  contents:
  - "6.2     PDU Decomposition Function\n   This function is responsible for removing\
    \ the Protocol Control Infor-\n   mation from the protocol data unit.  During\
    \ this process, information\n   pertinent to the generation of the N-UNITDATA\
    \ Indication is deter-\n   mined as follows. The NS-Source-Address and NS-Destination-Address\n\
    \   parameters of the N-UNITDATA Indication are recovered from the NPAI\n   in\
    \ the Source and Destination Address fields of the PDU header. The\n   data field\
    \ of the PDU received is reserved until all segments of the\n   original service\
    \ data unit have been received; collectively, these\n   form the NS-Userdata parameter\
    \ of the N-UNITDATA Indication.  Infor-\n   mation relating to the Quality of\
    \ Service provided during the\n   transmission of the PDU is determined from the\
    \ Quality of Service and\n   other information contained in the Options Part of\
    \ the PDU header.\n   This information constitutes the NS-Quality-of-Service parameter\
    \ of\n   the N-UNITDATA Indication.\n"
- title: 6.3     Header Format Analysis Function
  contents:
  - "6.3     Header Format Analysis Function\n   This function determines whether\
    \ the full protocol described in this\n   Standard is employed, or one of the\
    \ defined proper subsets thereof.\n   If the protocol data unit has a Network\
    \ Layer Protocol Identifier in-\n   dicating that this is a standard version of\
    \ the Protocol, this func-\n   tion determines whether a received PDU has reached\
    \ its destination,\n   using the Destination Address provided in the PDU. If the\
    \ Destination\n   Address provided in the PDU identifies an NSAP served by this\n\
    \   network-entity, then the PDU has reached its destination; if not, it\n   must\
    \ be forwarded.\n   If the protocol data unit has a Network Layer Protocol Identifier\
    \ in-\n   dicating that the Inactive Network Layer Protocol subset is in use,\n\
    \   then no further analysis of the PDU header is required. The network-\n   entity\
    \ in this case determines that either the Subnetwork Point of\n   Attachment address\
    \ encoded as network protocol address information in\n   the supporting subnetwork\
    \ protocol corresponds directly to an NSAP\n   address serviced by this network-entity\
    \ or that an error has oc-\n   curred. If the subnetwork protocol data unit has\
    \ been delivered\n   correctly, then the PDU may be decomposed according to the\
    \ procedures\n   described for that particular subnetwork protocol.\n"
- title: 6.4     PDU Lifetime Control Function
  contents:
  - "6.4     PDU Lifetime Control Function\n   This function is used to enforce the\
    \ maximum PDU lifetime. It is\n   closely associated with the Header Format Analysis\
    \ function.  This\n   function determines whether a PDU received may be forwarded\
    \ or wheth-\n   er its assigned lifetime has expired, in which case it must be\
    \ dis-\n   carded.\n   The operation of the PDU Lifetime Control function depends\
    \ upon the\n   Lifetime field in the PDU header.  This field contains, at any\
    \ time,\n   the remaining lifetime of the PDU (represented in units of 500 mil-\n\
    \   liseconds). The Lifetime of the Initial PDU is determined by the ori-\n  \
    \ ginating network-entity, and placed in the Lifetime field of the PDU.\n   When\
    \ the Segmentation function is applied to a PDU, the value of the\n   Lifetime\
    \ field of the Initial PDU is copied into all of the Derived\n   PDUs.\n   The\
    \ Lifetime of the PDU is decremented by every network-entity which\n   processes\
    \ the PDU. When a network-entity processes a PDU, it decre-\n   ments the PDU\
    \ Lifetime by at least one.  The value of the PDU Life-\n   time field shall be\
    \ decremented by more than one if the sum of:\n      1.  the transit delay in\
    \ the underlying service from which the PDU\n          was received; and\n   \
    \   2.  the delay within the system processing the PDU\n   exceeds or is estimated\
    \ to exceed 500 milliseconds.  In this case,\n   the lifetime field should be\
    \ decremented by one for each additional\n   500 milliseconds of delay. The determination\
    \ of delay need not be\n   precise, but where a precise value cannot be ascertained,\
    \ the value\n   used shall be an overestimate, not an underestimate.\n   If the\
    \ Lifetime field reaches a value of zero before the PDU is\n   delivered to the\
    \ destination, the PDU must be discarded.  The Error\n   Reporting function shall\
    \ be invoked as described in Clause 6.10, Er-\n   ror Reporting Function, and\
    \ may result in the generation of an Error\n   Report PDU.  It is a local matter\
    \ whether the destination network-\n   entity performs the Lifetime Control function.\n"
- title: 6.5     Route PDU Function
  contents:
  - "6.5     Route PDU Function\n   This function determines the network-entity to\
    \ which a protocol data\n   unit should be forwarded and the underlying service\
    \ that must be used\n   to reach that network-entity, using the Destination Address\
    \ and the\n   total length of the PDU. Where segmentation is required, the Route\n\
    \   PDU function further determines over which underlying service Derived\n  \
    \ PDUs/segments must be sent in order to reach that network-entity. The\n   results\
    \ of the Route PDU function are passed to the Forward PDU func-\n   tion (along\
    \ with the PDU itself) for further processing.  Selection\n   of the underlying\
    \ service that must be used to reach the \"next\" sys-\n   tem in the route is\
    \ initially influenced by the NS-Quality-of- Ser-\n   vice parameter of the N-UNITDATA\
    \ Request, which specifies the QoS re-\n   quested by the sending NS User. Whether\
    \ this QoS is to be provided\n   directly by the CLNP, through the selection of\
    \ the Quality of Service\n   Maintenance parameter and other optional parameters,\
    \ or through the\n   QoS facilities offered by each of the underlying services\
    \ is deter-\n   mined prior to invocation of the Forward PDU function.  Route\
    \ selec-\n   tion by intermediate systems may subsequently be influenced by the\n\
    \   values of the Quality of Service Maintenance parameter (if present),\n   and\
    \ other optional parameters (if present).\n"
- title: 6.6     Forward PDU Function
  contents:
  - "6.6     Forward PDU Function\n   This function issues an SN-UNITDATA Request\
    \ primitive (see Clause\n   5.5), supplying the subnetwork or SNDCF identified\
    \ by the Route PDU\n   function with the protocol data unit as user data to be\
    \ transmitted,\n   the address information required by that subnetwork or SNDCF\
    \ to iden-\n   tify the \"next\" system within the subnetwork-specific addressing\n\
    \   domain (this may be an intermediate-system or the destination end-\n   system),\
    \ and Quality of Service constraints (if any) to be considered\n   in the processing\
    \ of the user data.\n   When the PDU to be forwarded is longer than the maximum\
    \ service data\n   user size provided by the underlying service, the Segmentation\
    \ func-\n   tion is applied (See Clause 6.7, which follows).\n"
- title: 6.7     Segmentation Function
  contents:
  - "6.7     Segmentation Function\n   Segmentation is performed when the size of\
    \ the protocol data unit is\n   greater than the maximum service data unit size\
    \ supported by the\n   underlying service to be used to transmit the PDU.\n  \
    \ Segmentation consists of composing two or more new PDUs (Derived\n   PDUs) from\
    \ the PDU received. The PDU received may be the Initial PDU,\n   or it may be\
    \ a Derived PDU. All of the header information from the\n   PDU to be segmented,\
    \ with the exception of the segment length and\n   checksum fields of the fixed\
    \ part, and the segment offset of the seg-\n   mentation part, is duplicated in\
    \ each Derived PDU, including all of\n   the address part, the data unit identifier\
    \ and total length of the\n   segmentation part, and the options part (if present).\n\
    \                                   Note:\n       The rules for forwarding and\
    \ segmentation guarantee that the\n       header length is the same for all segments\
    \ (Derived PDUs) of\n       the Initial PDU, and is the same as the header length\
    \ of the\n       Initial PDU.  The size of a PDU header will not change due to\n\
    \       operation of any protocol function.\n   The user data encapsulated within\
    \ the PDU received are divided such\n   that the Derived PDUs satisfy the size\
    \ requirements of the user data\n   parameter field of the primitive used to access\
    \ the underlying ser-\n   vice.\n   Derived PDUs are identified as being from\
    \ the same Initial PDU by\n   means of\n     (a)  the source address,\n     (b)\
    \  the destination address, and\n     (c)  the data unit identifier.\n   Segmentation\
    \ shall not result in the generation of a Derived PDU con-\n   taining less than\
    \ eight (8) octets of user data.\n   The following fields of the PDU header are\
    \ used in conjunction with\n   the Segmentation function:\n      (a)  Segment\
    \ Offset --- identifies, with respect to the start\n           of the Initial\
    \ PDU, the octet at which the segment begins;\n      (b)  Segment Length --- specifies\
    \ the number of octets in the\n           Derived PDU, including both header and\
    \ data;\n      (c)  More Segments Flag --- is set to one if this Derived PDU\n\
    \           does not contain, as its final octet of user data, the final\n   \
    \        octet of the Initial PDU; and\n      (d)  Total Length --- specifies\
    \ the entire length of the Initial\n           PDU, including both header and\
    \ data.\n   Derived PDUs may be further segmented without constraining the rout-\n\
    \   ing of the individual Derived PDUs.  The Segmentation Permitted flag\n   is\
    \ set to one to indicate that segmentation is permitted. If the Ini-\n   tial\
    \ PDU is not to be segmented at any point during its lifetime in\n   the network,\
    \ the flag is set to zero by the source network-entity.\n   The setting of the\
    \ Segmentation Permitted flag cannot be changed by\n   any other network-entity\
    \ for the lifetime of the Initial PDU and any\n   Derived PDUs.\n"
- title: 6.8     Reassembly Function
  contents:
  - "6.8     Reassembly Function\n   The Reassembly function reconstructs the Initial\
    \ PDU from the Derived\n   PDUs generated by the operation of the Segmentation\
    \ Function on the\n   Initial PDU (and, recursively, on subsequent Derived PDUs).\
    \  A bound\n   on the time during which segments (Derived PDUs) of an Initial\
    \ PDU\n   will be held at a reassembly point before being discarded is provid-\n\
    \   ed, so that reassembly resources may be released when it is no longer\n  \
    \ expected that any outstanding segments of the Initial PDU will arrive\n   at\
    \ the reassembly point. Upon reception of a Derived PDU, a reassem-\n   bly timer\
    \ is initiated with a value which indicates the amount of\n   time which must\
    \ elapse before any outstanding segments of the Initial\n   PDU shall be assumed\
    \ to be lost.  When this timer expires, all seg-\n   ments (Derived PDUs) of the\
    \ Initial PDU held at the reassembly point\n   are discarded, the resources allocated\
    \ for those segments are freed,\n   and if selected, an Error Report is generated\
    \ (see Clause 6.10).\n   While the exact relationship between reassembly lifetime\
    \ and PDU\n   lifetime is a local matter, the Reassembly Function must preserve\
    \ the\n   intent of the PDU lifetime. Consequently, the reassembly function\n\
    \   must discard PDUs whose lifetime would otherwise have expired had\n   they\
    \ not been under the control of the reassembly function.\n                   \
    \                Note:\n         1. Methods of bounding reassembly lifetime are\
    \ discussed in\n            Annex B.\n         2. The Segmentation and Reassembly\
    \ functions are intended to\n            be used in such a way that the fewest\
    \ possible segments are\n            generated at each segmentation point and\
    \ reassembly takes\n            place at the final destination of a PDU. However,\
    \ other\n            schemes which\n             (a) interact with the routing\
    \ algorithm to favor paths on\n                 which fewer segments are generated;\n\
    \             (b) generate more segments than absolutely required in\n       \
    \          order to avoid additional segmentation at some subsequent\n       \
    \          point; or\n             (c) allow partial or full reassembly at some\
    \ intermediate\n                 point along the route\n            are not precluded.\
    \ The information necessary to enable the\n            use of one of these alternative\
    \ strategies may be made\n            available through the operation of a Network\
    \ Layer Management\n            function or by other means.\n         3. The originator\
    \ of the Initial PDU determines the value of the\n            Segmentation Permitted\
    \ flag in the Initial PDU and all Derived\n            PDUs (if any).  Partial\
    \ or full reassembly in an intermediate\n            system (Note 2 (c) above)\
    \ cannot change this value in the\n            Initial PDU or any PDU derived\
    \ from it, and cannot therefore\n            add or remove the segmentation part\
    \ of the header.\n"
- title: 6.9     Discard PDU Function
  contents:
  - "6.9     Discard PDU Function\n   This function performs all of the actions necessary\
    \ to free the\n   resources reserved by the network-entity when any of the following\n\
    \   situations is encountered (Note: the list is not exhaustive):\n     (a)  A\
    \ violation of protocol procedure has occurred.\n     (b)  A PDU is received whose\
    \ checksum is inconsistent with its\n          contents.\n     (c)  A PDU is received,\
    \ but due to local congestion, it cannot be\n          processed.\n     (d)  A\
    \ PDU is received whose header cannot be analyzed.\n     (e)  A PDU is received\
    \ which cannot be segmented and cannot be\n          forwarded because its length\
    \ exceeds the maximum service data\n          unit size supported by any underlying\
    \ service available for\n          transmission of the PDU to the next network-entity\
    \ on the\n          chosen route.\n     (f)  A PDU is received whose destination\
    \ address is unreachable or\n          unknown.\n     (g)  Incorrect or invalid\
    \ source routing was specified. This may\n          include a syntax error in\
    \ the source routing field, an unknown\n          or unreachable address in the\
    \ source routing field, or a path\n          which is not acceptable for other\
    \ reasons.\n     (h)  A PDU is received whose PDU lifetime has expired or whose\n\
    \          lifetime expires during reassembly.\n     (i)  A PDU is received which\
    \ contains an unsupported option.\n"
- title: 6.10     Error Reporting Function
  contents:
  - '6.10     Error Reporting Function

    '
- title: 6.10.1     Overview
  contents:
  - "6.10.1     Overview\n   This function causes an attempt to return an Error Report\
    \ PDU to the\n   source network-entity when a protocol data unit is discarded\
    \ in ac-\n   cordance with Clause 6.9.\n   The Error Report PDU identifies the\
    \ discarded PDU, specifies the type\n   of error detected, and identifies the\
    \ location in the header of the\n   discarded PDU at which the error was detected.\
    \  At least the entire\n   header of the Discarded PDU (and, at the discretion\
    \ of the originator\n   of the Error Report PDU none, all, or part of the data\
    \ field) is\n   placed in the data field of the Error Report PDU.\n   The originator\
    \ of a Data PDU may control the generation of Error Re-\n   port PDUs.  An Error\
    \ Report flag in the original PDU is set by the\n   source network-entity to indicate\
    \ that an Error Report PDU is to be\n   returned if the Initial PDU or any PDUs\
    \ derived from it are discard-\n   ed; if the flag is not set, Error Reports are\
    \ to be suppressed.\n                                    Note:\n         1. The\
    \ suppression of Error Report PDUs is controlled by the\n            originating\
    \ network-entity and not by the NS User.  Care\n            should be exercised\
    \ by the originator with regard to\n            suppressing ER PDUs so that error\
    \ reporting is not suppressed\n            for every PDU generated.\n        \
    \ 2. Non-receipt of an Error Report PDU does not imply correct\n            delivery\
    \ of a PDU issued by a source network-entity.\n"
- title: 6.10.2     Requirements
  contents:
  - "6.10.2     Requirements\n   An Error Report PDU shall not be generated to report\
    \ the discard of\n   an Error Report PDU.\n   An Error Report PDU shall not be\
    \ generated to report the discard of a\n   Data PDU unless that PDU has the Error\
    \ Report flag set to allow Error\n   Reports.\n   If a Data PDU is discarded,\
    \ and the Error Report flag has been set to\n   allow Error Reports, an Error\
    \ Report PDU shall be generated if the\n   reason for discard is one of the reasons\
    \ for discard enumerated in\n   Clause 6.9, subject to the conditions described\
    \ in Clause 6.10.4.\n                                   Note:\n       If a Data\
    \ PDU with the E/R flag set to allow Error Reports is\n       discarded for any\
    \ other reason, an ER PDU may be generated (as\n       an implementation option).\n"
- title: 6.10.3     Processing of Error Reports
  contents:
  - "6.10.3     Processing of Error Reports\n   An Error Report PDU is composed from\
    \ information contained in the\n   header of the discarded Data PDU to which the\
    \ Error Report refers.\n   The contents of the Source Address field of the discarded\
    \ Data PDU\n   are used as the Destination Address of the Error Report PDU. This\n\
    \   value, which in the context of the Data PDU was used as an NSAP Ad-\n   dress,\
    \ is used in the context of the Error Report PDU as the\n   network-entity title\
    \ of the network-entity that originated the Data\n   PDU. The network- entity\
    \ title of the originator of the Error Report\n   PDU is conveyed in the Source\
    \ Address field of the header of the Er-\n   ror Report PDU. The value of the\
    \ Lifetime field is determined in ac-\n   cordance with Clause 6.4. Optional parameters\
    \ are selected in accor-\n   dance with Clause 6.10.4.\n   Segmentation of Error\
    \ Report PDUs is not permitted; hence, no Segmen-\n   tation Part is present.\
    \  The total length of the ER PDU in octets is\n   placed in the Segment Length\
    \ field of the ER PDU header. This field\n   is not changed during the lifetime\
    \ of the ER PDU. If the originator\n   of the ER PDU determines that the size\
    \ of the ER PDU exceeds the max-\n   imum service data unit size of the underlying\
    \ service, the ER PDU\n   shall be truncated to the maximum service data unit\
    \ size (see Clause\n   5.5.3) and forwarded with no other change. Error Report\
    \ PDUs are\n   routed and forwarded by intermediate-system network-entities in\
    \ the\n   same way as Data PDUs.\n                                    Note:\n\
    \       The requirement that the underlying service assumed by the CLNP\n    \
    \   must be capable of supporting a service data unit size of at least\n     \
    \  512 octets guarantees that the entire header of the discarded Data\n      \
    \ PDU can be conveyed in the data field of any ER PDU.\n   When an ER PDU is decomposed\
    \ upon reaching its destination, informa-\n   tion that may be used to interpret\
    \ and act upon the Error Report is\n   obtained as follows. The network-entity\
    \ title recovered from the NPAI\n   in the Source Address field of the ER PDU\
    \ header is used to identify\n   the network-entity which generated the Error\
    \ Report.  The reason for\n   generating the Error Report is extracted from the\
    \ Options Part of the\n   PDU header. The entire header of the discarded Data\
    \ PDU (and part or\n   all of the original user data) is extracted from the data\
    \ field of\n   the ER PDU to assist in determining the nature of the error.\n"
- title: 6.10.4     Relationship of Data PDU Options to Error Reports
  contents:
  - "6.10.4     Relationship of Data PDU Options to Error Reports\n   The generation\
    \ of an Error Report is affected by options that are\n   present in the corresponding\
    \ Data PDU. The presence of options in the\n   original Data PDU that are not\
    \ supported by the system which has dis-\n   carded that PDU may cause the suppression\
    \ of an Error Report even if\n   the original Data PDU indicated that an Error\
    \ Report should be gen-\n   erated in the event of a discard.\n   The processing\
    \ of an Error Report is also affected by options which\n   are present in the\
    \ corresponding Data PDU. In particular, options\n   selected for the original\
    \ Data PDU affect which options are included\n   in the corresponding Error Report\
    \ PDU. The selection of options for\n   an Error Report PDU is governed by the\
    \ following requirements:\n     (a)  If the Priority Option or the QoS Maintenance\
    \ Option is selected\n          in the original Data PDU, and the system generating\
    \ the Error\n          Report PDU supports the option, then the Error Report PDU\
    \ shall\n          specify the option.\n     (b)  If the Security Option is selected\
    \ in the Data PDU, and the system\n          generating the Error Report supports\
    \ this option, then the Error\n          Report PDU shall specify the option using\
    \ the value that was\n          specified in the original Data PDU. If the system\
    \ does not support\n          the Security Option, an Error Report must not be\
    \ generated for\n          a Data PDU that selects the Security Option.\n    \
    \ (c)  If the Complete Source Route Option is selected in the original\n     \
    \     Data PDU, and the system generating the Error Report PDU supports\n    \
    \      this option, then the error Report shall specify the Complete Source\n\
    \          Route option.  The Source Route parameter value is obtained by\n  \
    \        extracting from the original Data PDU that portion of the complete\n\
    \          source route that has already been traversed, and reversing the\n \
    \         order of network-entity titles which comprise the list.\n          If\
    \ the system does not support the Complete Source Route Option,\n          an\
    \ Error Report must not be generated for a Data PDU that selects\n          the\
    \ Complete Source Route option.\n     (d)  The Padding, Partial Source Routing,\
    \ and Record Route Options,\n          if supported, may be specified in the Error\
    \ Report PDU.\n                                    Note:\n            The values\
    \ of the optional parameters in (d) above may be\n            derived as a local\
    \ matter, or they may be based upon the\n            corresponding values in the\
    \ original Data PDU.\n"
- title: 6.11     PDU Header Error Detection
  contents:
  - "6.11     PDU Header Error Detection\n   The PDU Header Error Detection function\
    \ protects against failure of\n   intermediate or end-system network-entities\
    \ due to the processing of\n   erroneous information in the PDU header.  The function\
    \ is realized by\n   a checksum computed on the entire PDU header. The checksum\
    \ is veri-\n   fied at each point at which the PDU header is processed.  If the\n\
    \   checksum calculation fails, the PDU must be discarded.  If PDU header\n  \
    \ fields are modified (for example, due to operation of the lifetime\n   function),\
    \ then the checksum is modified so that the checksum remains\n   valid.\n   The\
    \ use of the Header Error Detection function is optional, and is\n   selected\
    \ by the originating network-entity.  If the function is not\n   used, the checksum\
    \ field of the PDU header is set to zero.\n   If the function is selected by the\
    \ originating network-entity, the\n   value of the checksum field causes the following\
    \ formulae to be sa-\n   tisfied:\n        (The Sum from i=1 to L of a(i)) (mod\
    \  255) = 0\n        (The Sum from i=1 to L of (L - i + 1) * a(i)) (mod  255)\
    \ = 0\n   where L = the number of octets in the PDU header, and a(i) = the\n \
    \  value of the octet at position i. The first octet in the PDU header\n   is\
    \ considered to occupy position i = 0.\n   When the function is in use, neither\
    \ octet of the checksum field may\n   be set to zero.\n                      \
    \             Note:\n       1. To ensure that inadvertent modification of a header\
    \ while a\n          PDU is being processed by an intermediate system (for\n \
    \         example, due to a memory fault) may still be detected by the\n     \
    \     PDU Header Error function, an intermediate system network-\n          entity\
    \ must not recompute the checksum for the entire header,\n          even if fields\
    \ are modified.\n       2. Annex C contains descriptions of algorithms which may\
    \ be\n          used to calculate the correct value of the checksum field\n  \
    \        when the PDU is created, and to update the value of the\n          checksum\
    \ field when the header is modified.\n"
- title: 6.12     Padding Function
  contents:
  - "6.12     Padding Function\n   The padding function is provided to allow space\
    \ to be reserved in the\n   PDU header which is not used to support any other\
    \ function.  Octet\n   alignment must be maintained.\n                       \
    \            Note:\n       An example of the use of this function is to cause\
    \ the data field\n       of a PDU to begin on a convenient boundary for the originating\n\
    \       network-entity, such as a computer word boundary.\n"
- title: 6.13     Security
  contents:
  - "6.13     Security\n   The provision of protection services (e.g., data origin\
    \ authentica-\n   tion, data confidentiality, and data integrity of a single\n\
    \   connectionless-mode NSDU) is performed by the Security Function.\n   The Security\
    \ Function is related to the Protection from Unauthorized\n   Access Quality of\
    \ Service parameter described in ISO 8348/AD1, Adden-\n   dum to the Network Service\
    \ Definition Covering Connectionless-mode\n   Transmission. The function is realized\
    \ through selection of the secu-\n   rity parameter in the options part of the\
    \ PDU header.\n   This Standard does not specify the way in which protection services\n\
    \   are to be provided; it only provides for the encoding of security in-\n  \
    \ formation in the PDU header. To facilitate interoperation between\n   end-systems\
    \ and network relay-systems by avoiding different interpre-\n   tations of the\
    \ same encoding, a means to distinguish user-defined\n   security encodings from\
    \ standardized security encodings is described\n   in Clause 7.5.3.\n        \
    \                           Note:\n       As an implementation consideration,\
    \ data origin authentication\n       may be provided through the use of a cryptographically\
    \ generated\n       or enciphered checksum (unique from the PDU Header Error Detection\n\
    \       mechanism); data confidentiality and data integrity may be\n       provided\
    \ via route control mechanisms.\n"
- title: 6.14     Source Routing Function
  contents:
  - "6.14     Source Routing Function\n   The Source Routing function allows the originator\
    \ to specify the path\n   a generated PDU must take. Source routing may only be\
    \ selected by the\n   originator of a PDU. Source Routing is accomplished using\
    \ a list of\n   network-entity titles held in a parameter within the options part\
    \ of\n   the PDU header.  The length of this parameter is determined by the\n\
    \   originating network-entity, and does not change as the PDU traverses\n   the\
    \ network.\n   The Source Route parameter includes information used by the originat-\n\
    \   ing end-system when determining the initial route of the PDU. Only\n   the\
    \ titles of intermediate system network-entities are included in\n   the list;\
    \ the network-entity title of the destination of the PDU is\n   not included in\
    \ the list.\n   Associated with the list of network-entity titles is an indicator\n\
    \   which identifies the next entry in the list to be used; this indica-\n   tor\
    \ is advanced by the receiver of the PDU when the next title in the\n   list matches\
    \ its own. The indicator is updated as the PDU is forward-\n   ed so as to identify\
    \ the appropriate entry at each stage of relaying.\n   Two forms of the Source\
    \ Routing function are provided.  The first\n   form, referred to as Complete\
    \ Source Routing, requires that the\n   specified path must be taken; that is,\
    \ only those systems identified\n   in the list may be visited by the PDU while\
    \ en route to the destina-\n   tion, and each system must be visited in the order\
    \ specified. If the\n   specified path cannot be taken, the PDU must be discarded.\
    \ Clause\n   6.10 describes the circumstances in which an attempt shall be made\
    \ to\n   inform the originator of the discard using the Error Reporting func-\n\
    \   tion.\n   The second form is referred to as Partial Source Routing. Again,\
    \ each\n   system identified in the list must be visited in the order specified\n\
    \   while en route to the destination.  However, with this form of source\n  \
    \ routing the PDU may take any path necessary to arrive at the next in-\n   termediate\
    \ system in the list, which may include visiting intermedi-\n   ate systems that\
    \ are not identified in the list. The PDU will not be\n   discarded (for source\
    \ routing related reasons) unless one of the sys-\n   tems specified cannot be\
    \ reached by any available route.\n"
- title: 6.15     Record Route Function
  contents:
  - "6.15     Record Route Function\n   The Record Route function records the path(s)\
    \ taken by a PDU as it\n   traverses a series of intermediate systems. A recorded\
    \ route consists\n   of a list of network-entity titles held in a parameter within\
    \ the op-\n   tions part of the PDU header. The length of this parameter is deter-\n\
    \   mined by the originating network-entity, and does not change as the\n   PDU\
    \ traverses the network.\n   The list is constructed as the PDU is forwarded along\
    \ a path towards\n   its destination.  Only the titles of intermediate system\
    \ network-\n   entities are included in the recorded route. The network-entity\
    \ title\n   of the originator of the PDU is not recorded in the list.\n   When\
    \ an intermediate system network-entity processes a PDU containing\n   the Record\
    \ Route parameter, the system adds its own networkentity ti-\n   tle at the end\
    \ of the list of recorded network-entity titles.  An in-\n   dicator is maintained\
    \ to identify the next available octet to be used\n   for recording of route.\
    \ This indicator is updated as entries are ad-\n   ded to the list as follows.\
    \ The length of the entry to be added to\n   the list is added to the value of\
    \ the next available octet indicator,\n   and this sum is compared with the length\
    \ of the Record Route parame-\n   ter.  If the addition of the entry to the list\
    \ would exceed the size\n   of the parameter, the next available octet indicator\
    \ is set to indi-\n   cate that route recording has been terminated. The network-entity\
    \ ti-\n   tle is not added to the list. The PDU may still be forwarded to its\n\
    \   final destination, without further addition of network-entity titles.\n  \
    \ If the addition of the entry would not exceed the size of the Record\n   Route\
    \ parameter, the next available octet indicator is updated with\n   the new value,\
    \ and the network-entity title is added to the head of\n   the list after the\
    \ other entries have been moved.\n   Two forms of the Record Route function are\
    \ provided.  The first form\n   is referred to as Complete Route Recording.  It\
    \ requires that the\n   list of network-entity titles be a complete and accurate\
    \ record of\n   all intermediate systems visited by a PDU (including Derived PDUs),\n\
    \   except when a shortage of space in the record route option field\n   causes\
    \ termination of recording of route, as described above. When\n   Complete Route\
    \ Recording is selected, PDU reassembly at intermediate\n   systems is performed\
    \ only when the Derived PDUs that are reassembled\n   all took the same route;\
    \ otherwise, the PDU is discarded, and if\n   selected, an Error Report is generated\
    \ (see Clause 6.10).\n   The second form is referred to as Partial Route Recording.\
    \ It also\n   requires a record of intermediate systems visited by a PDU. When\
    \ Par-\n   tial Route Recording is selected, PDU reassembly at intermediate sys-\n\
    \   tems is always permitted.  When reassembly is performed at an inter-\n   mediate\
    \ system, the route recorded in any of the Derived PDUs may be\n   placed in the\
    \ PDU resulting from the reassembly.\n                                   Note:\n\
    \       The Record Route function is intended to be used in the diagnosis\n  \
    \     of subnetwork problems and/or to provide a return path that could\n    \
    \   be used as a source route in a subsequent PDU.\n"
- title: 6.16     Quality of Service Maintenance Function
  contents:
  - "6.16     Quality of Service Maintenance Function\n   The Quality of Service Maintenance\
    \ function provides information to\n   network-entities in intermediate systems\
    \ which may be used to make\n   routing decisions where such decisions affect\
    \ the overall QoS provid-\n   ed to NS users. This information is conveyed to\
    \ intermediate system\n   network- entities in a parameter in the options part\
    \ of the PDU\n   header.\n   In those instances where the QoS requested cannot\
    \ be maintained, in-\n   termediate system network-entities shall attempt to deliver\
    \ the PDU\n   at a QoS different from the QoS requested. Intermediate system\n\
    \   network-entities do not necessarily provide a notification of failure\n  \
    \ to meet the requested Quality of Service.\n"
- title: 6.17     Priority Function
  contents:
  - "6.17     Priority Function\n   The Priority function allows a PDU with a numerically\
    \ higher priority\n   value to be processed preferentially with respect to other\
    \ PDUs with\n   numerically lower priority values. The function is realized through\n\
    \   selection of a parameter in the options part of the PDU header.\n   The lowest\
    \ priority value is zero; a source network-entity that does\n   not support the\
    \ Priority function must set the Priority value to\n   zero.  The Priority function\
    \ provides a means whereby the resources\n   of end and intermediate system network-entities,\
    \ such as outgoing\n   transmission queues and buffers, can be used preferentially\
    \ to pro-\n   cess higher-priority PDUs ahead of lower-priority PDUs. The specific\n\
    \   action taken by an individual network-entity to support the Priority\n   function\
    \ is a local matter.\n"
- title: 6.18     Congestion Notification Function
  contents:
  - "6.18     Congestion Notification Function\n   To allow NS Users to take appropriate\
    \ action when congestion is ex-\n   perienced within the NS provider, intermediate\
    \ systems may inform the\n   destination network-entity of congestion through\
    \ the use of a flag in\n   the QoS Maintenance parameter in the options part of\
    \ the PDU header.\n   The value of this flag is initially set to zero (0) by the\
    \ originator\n   of the PDU and may be set to one (1) by any intermediate system\
    \ which\n   processes the PDU to indicate that it is experiencing congestion.\
    \ The\n   criteria for determining when this action is to be taken are a local\n\
    \   matter.\n                                    Note:\n     Congestion typically\
    \ corresponds to inavailability of buffer space\n     to maintain output queues.\
    \ An appropriate policy for indicating\n     congestion may be based upon the\
    \ depth of the output queue selected\n     for a PDU (according to its destination\
    \ address or other routing\n     information). When the depth of a particular\
    \ output queue exceeds\n     a certain proportion of the depth of that queue,\
    \ an intermediate\n     system will start to discard PDUs. The intermediate system\
    \ will set\n     the Congestion Experienced flag in the next PDU to be forwarded\n\
    \     and may continue to do so until the condition is alleviated.\n"
- title: 6.19     Classification of Functions
  contents:
  - "6.19     Classification of Functions\n   Implementations are not required to\
    \ support all of the functions\n   described in Clauses 6.1 through 6.18. Functions\
    \ are divided into\n   three categories:\n   Type 1: These functions must be supported.\n\
    \   Type 2: These functions may or may not be supported.\n           If an implementation\
    \ does not support a Type 2 function, and the\n           function is selected\
    \ in a PDU, then that PDU must be discarded,\n           and an Error Report PDU\
    \ must be generated and forwarded to the\n           originating network-entity,\
    \ providing that the Error Report flag is\n           set and the conditions of\
    \ Clause 6.10.4 are satisfied.\n   Type 3: These functions may or may not be supported.\n\
    \           If an implementation does not support a Type 3 function, and the\n\
    \           function is selected in a PDU, then the function is not performed,\n\
    \           and the PDU is processed exactly as though the function had not\n\
    \           been selected.  The protocol data unit shall not be discarded for\n\
    \           this reason.\n   Table 4 shows how the functions are divided into\
    \ these three categories:\n _____________________________________________________________________________\n"
- title: '|                                |    FULL     |       NON       |  INACTIVE  |'
  contents:
  - '|                                |    FULL     |       NON       |  INACTIVE  |

    '
- title: '| FUNCTION                       |  PROTOCOL   |    SEGMENTING   |   SUBSET   |'
  contents:
  - '| FUNCTION                       |  PROTOCOL   |    SEGMENTING   |   SUBSET   |

    '
- title: '|                                |             |      SUBSET     |            |'
  contents:
  - '|                                |             |      SUBSET     |            |

    '
- title: '|________________________________|_____________|_________________|____________|'
  contents:
  - '|________________________________|_____________|_________________|____________|

    '
- title: '|PDU Composition                 |     1       |        1        |     1      |'
  contents:
  - '|PDU Composition                 |     1       |        1        |     1      |

    '
- title: '|PDU Composition                 |     1       |        1        |     1      |'
  contents:
  - '|PDU Composition                 |     1       |        1        |     1      |

    '
- title: '|Header Format Analysis          |     1       |        1        |     1      |'
  contents:
  - '|Header Format Analysis          |     1       |        1        |     1      |

    '
- title: '|PDU Lifetime Control            |     1       |        1        |    N/A     |'
  contents:
  - '|PDU Lifetime Control            |     1       |        1        |    N/A     |

    '
- title: '|Route PDU                       |     1       |        1        |    N/A     |'
  contents:
  - '|Route PDU                       |     1       |        1        |    N/A     |

    '
- title: '|Forward PDU                     |     1       |        1        |    N/A     |'
  contents:
  - '|Forward PDU                     |     1       |        1        |    N/A     |

    '
- title: '|Segment PDU                     |     1       |       N/A       |    N/A     |'
  contents:
  - '|Segment PDU                     |     1       |       N/A       |    N/A     |

    '
- title: '|Reassemble PDU                  |     1       |       N/A       |    N/A     |'
  contents:
  - '|Reassemble PDU                  |     1       |       N/A       |    N/A     |

    '
- title: '|Discard PDU                     |     1       |        1        |    N/A     |'
  contents:
  - '|Discard PDU                     |     1       |        1        |    N/A     |

    '
- title: '|Error Reporting (Note 1)        |     1       |        1        |    N/A     |'
  contents:
  - '|Error Reporting (Note 1)        |     1       |        1        |    N/A     |

    '
- title: '|Header Error Detection (Note 1) |     1       |        1        |    N/A     |'
  contents:
  - '|Header Error Detection (Note 1) |     1       |        1        |    N/A     |

    '
- title: '|Security                        |     1       |        2        |    N/A     |'
  contents:
  - '|Security                        |     1       |        2        |    N/A     |

    '
- title: '|Complete Source Routing         |     1       |        2        |    N/A     |'
  contents:
  - '|Complete Source Routing         |     1       |        2        |    N/A     |

    '
- title: '|Complete Route Recording        |     2       |        2        |    N/A     |'
  contents:
  - '|Complete Route Recording        |     2       |        2        |    N/A     |

    '
- title: '|Partial Source Routing          |     3       |        3        |    N/A     |'
  contents:
  - '|Partial Source Routing          |     3       |        3        |    N/A     |

    '
- title: '|Partial Route Recording         |     3       |        3        |    N/A     |'
  contents:
  - '|Partial Route Recording         |     3       |        3        |    N/A     |

    '
- title: '|Priority                        |     3       |        3        |    N/A     |'
  contents:
  - '|Priority                        |     3       |        3        |    N/A     |

    '
- title: '|QoS Maintenance                 |     3       |        3        |    N/A     |'
  contents:
  - '|QoS Maintenance                 |     3       |        3        |    N/A     |

    '
- title: '|Congestion Notification         |     3       |        3        |    N/A     |'
  contents:
  - '|Congestion Notification         |     3       |        3        |    N/A     |

    '
- title: '|Padding                         |     3       |        3        |    N/A     |'
  contents:
  - '|Padding                         |     3       |        3        |    N/A     |

    '
- title: '|________________________________|_____________|_________________|____________|'
  contents:
  - "|________________________________|_____________|_________________|____________|\n\
    \           Table 4: Categorization of Protocol Functions\n                  \
    \              Note:\n     1. While the Error Reporting and Header Error Detection\
    \ functions\n        must be provided, they are provided only when selected\n\
    \        by the sending Network Service user.\n     2. The rationale for the inclusion\
    \ of type 3 functions is that in\n        the case of some functions it is more\
    \ important to forward\n        the PDUs between intermediate systems or deliver\
    \ them to\n        an end-system than it is to support the functions.  Type 3\n\
    \        functions should be used in those cases where they are of an\n      \
    \  advisory nature; they cannot cause a PDU to be discarded\n        when they\
    \ are not supported.\n"
- title: 7     Structure and Encoding of PDUs
  contents:
  - '7     Structure and Encoding of PDUs

    '
- title: 7.1     Structure
  contents:
  - "7.1     Structure\n   All Protocol Data Units shall contain an integral number\
    \ of octets.\n   The octets in a PDU are numbered starting from one (1) and increasing\n\
    \   in the order in which they are submitted to the underlying service.\n   The\
    \ bits in an octet are numbered from one (1) to eight (8), where\n   bit one (1)\
    \ is the low-order (least significant) bit.\n   When consecutive octets are used\
    \ to represent a binary number, the\n   lower octet number has the most significant\
    \ value.\n   Any implementation supporting this protocol is required to state\
    \ in\n   its specification the way in which octets are transferred, using the\n\
    \   terms \"most significant bit\" and \"least significant bit\". The PDUs of\n\
    \   this protocol are defined using the terms \"most significant bit\" and\n \
    \  \"least significant bit\".\n                                       Note:\n\
    \       When the encoding of a PDU is represented using a diagram in this\n  \
    \     Clause the following representation is used:\n         a) octets are shown\
    \ with the lowest numbered octet to the left,\n            higher number octets\
    \ being further to the right;\n         b) within an octet, bits are shown with\
    \ bit eight (8) to the left\n            and bit one (1) to the right.\n     \
    \  PDUs shall contain, in the following order:\n       1.  the fixed part;\n \
    \      2.  the address part;\n       3.  the segmentation part, if present;\n\
    \       4.  the Options part, if present;\n   and the data field, if present.\
    \ This structure is illustrated in Figure 2:\n"
- title: 7.2     Fixed Part
  contents:
  - '7.2     Fixed Part

    '
- title: 7.2.1    General
  contents:
  - "7.2.1    General\n   The fixed part of the PDU header contains frequently occurring\
    \ param-\n   eters including the type code (DT or ER) of the protocol data unit.\n\
    \   The length and the structure of the fixed part are defined by the PDU\n  \
    \ code.\n   The fixed part has the following format:\n                       \
    \    Part                      Described in\n             ___________________________________\n\
    \             |          Fixed Part             |      Section 7.2\n         \
    \    |_________________________________|\n             |          Address Part\
    \           |      Section 7.3\n             |_________________________________|\n\
    \             |       Segmentation Part         |      Section 7.4\n         \
    \    |_________________________________|\n             |          Options Part\
    \           |      Section 7.5\n             |_________________________________|\n\
    \             |              Data               |      Section 7.6\n         \
    \    |_________________________________|\n                   Figure 2: PDU Structure\n\
    \                                                        Octet\n             ________________________________________\n\
    \             |   Network Layer Protocol Identifier  |    1\n             |______________________________________|\n\
    \             |          Length Indicator            |    2\n             |______________________________________|\n\
    \             |     Version/Protocol Id Extension    |    3\n             |______________________________________|\n\
    \             |              Lifetime                |    4\n             |______________________________________|\n\
    \             |    SP  vline M S vline e/R | Type    |    5\n             |______________________________________|\n\
    \             |            Segment Length            |   6,7\n             |______________________________________|\n\
    \             |               Checksum               |   8,9\n             |______________________________________|\n\
    \                 Figure 3: PDU Header -- Fixed Part\n"
- title: 7.2.2    Network Layer Protocol Identifier
  contents:
  - "7.2.2    Network Layer Protocol Identifier\n   The value of this field is set\
    \ to binary 1000 0001 to identify this\n   Network Layer protocol as ISO 8473,\
    \ Protocol for Providing the\n   Connectionless- mode Network Service. The value\
    \ of this field is set\n   to binary 0000 0000 to identify the Inactive Network\
    \ Layer protocol\n   subset.\n"
- title: 7.2.3    Length Indicator
  contents:
  - "7.2.3    Length Indicator\n   The length is indicated by a binary number, with\
    \ a maximum value of\n   254 (1111 1110).  The length indicated is the length\
    \ in octets of the\n   header, as described in Clause 7.1. The value 255 (1111\
    \ 1111) is\n   reserved for possible future extensions.\n                    \
    \               Note:\n     The rules for forwarding and segmentation guarantee\
    \ that the header\n     length is the same for all segments (Derived PDUs) of\
    \ the Initial\n     PDU, and is the same as the header length of the Initial PDU.\n\
    \     The size of a PDU header will not change due to operation of any\n     protocol\
    \ function.\n"
- title: 7.2.4    Version/Protocol Identifier Extension
  contents:
  - "7.2.4    Version/Protocol Identifier Extension\n   The value of this field is\
    \ binary 0000 0001, which identifies the\n   standard Version 1 of ISO 8473, Protocol\
    \ for Providing the\n   Connectionless-mode Network Service.\n"
- title: 7.2.5    PDU Lifetime
  contents:
  - "7.2.5    PDU Lifetime\n   The PDU Lifetime field is encoded as a binary number\
    \ representing the\n   remaining lifetime of the PDU, in units of 500 milliseconds.\n"
- title: 7.2.6    Flags
  contents:
  - '7.2.6    Flags

    '
- title: 7.2.6.1    Segmentation Permitted
  contents:
  - "7.2.6.1    Segmentation Permitted\n   The Segmentation Permitted flag indicates\
    \ whether segmentation is\n   permitted. Its value is determined by the originator\
    \ of the PDU and\n   cannot be changed by any other network-entity for the lifetime\
    \ of the\n   Initial PDU and any Derived PDUs.\n   A value of one (1) indicates\
    \ that segmentation is permitted. A value\n   of zero (0) indicates that the non-segmenting\
    \ protocol subset is em-\n   ployed.  When the value of zero is selected, the\
    \ segmentation part of\n   the PDU header is not present, and the Segment Length\
    \ field serves as\n   the Total Length field (see Clause 7.2.8).\n"
- title: 7.2.6.2    More Segments
  contents:
  - "7.2.6.2    More Segments\n   The More Segments flag indicates whether the data\
    \ segment in this PDU\n   contains (as its last octet) the last octet of the User\
    \ Data in the\n   NSDU.  When the More Segments flag is set to one (1), segmentation\n\
    \   has taken place and the last octet of the NSDU is not contained in\n   this\
    \ PDU. The More Segments flag cannot be set to one (1) if the Seg-\n   mentation\
    \ Permitted flag is not set to one (1).\n   When the More Segments flag is set\
    \ to zero (0), the last octet of the\n   Data Part of the PDU is the last octet\
    \ of the NSDU.\n"
- title: 7.2.6.3    Error Report
  contents:
  - "7.2.6.3    Error Report\n   When the Error Report flag is set to one, the rules\
    \ in Clause 6.10\n   are used to determine whether to generate an Error Report\
    \ PDU if it\n   is necessary to discard this Data PDU.\n   When the Error Report\
    \ flag is set to zero, discard of the Data PDU\n   will not cause the generation\
    \ of an Error Report PDU.\n"
- title: 7.2.7    Type Code
  contents:
  - "7.2.7    Type Code\n   The Type code field identifies the type of the protocol\
    \ data unit.\n   Allowed values are given in Table 5:\n              __________________________________________________\n\
    \              |         | Bits               5   4   3   2   1 |\n          \
    \    |_________|______________________________________|\n              | DT PDU\
    \  |                    1   1   1   0   0 |\n              |_________|______________________________________|\n\
    \              | ER PDU  |                    0   0   0   0   1 |\n          \
    \    |_________|______________________________________|\n                    \
    \     Table 5: Valid PDU Types\n"
- title: 7.2.8    PDU Segment Length
  contents:
  - "7.2.8    PDU Segment Length\n   The Segment Length field specifies the entire\
    \ length, in octets, of\n   the Derived PDU, including both header and data (if\
    \ present).  When\n   the full protocol is employed and a PDU is not segmented,\
    \ the value\n   of this field is identical to the value of the Total Length field\
    \ lo-\n   cated in the Segmentation Part of the header.\n   When the non-segmenting\
    \ protocol subset is employed, no segmentation\n   part is present in the header.\
    \ In this subset, the Segment Length\n   field specifies the entire length of\
    \ the Initial PDU, including both\n   header and data (if present). The Segment\
    \ Length field is not changed\n   for the lifetime of the PDU.\n"
- title: 7.2.9    PDU Checksum
  contents:
  - "7.2.9    PDU Checksum\n   The checksum is computed on the entire PDU header.\
    \  For the Data PDU,\n   this includes the segmentation and options parts (if\
    \ present). For\n   the Error Report PDU, this includes the reason for discard\
    \ field as\n   well.\n   A checksum value of zero is reserved to indicate that\
    \ the checksum is\n   to be ignored.  The operation of the PDU Header Error Detection\
    \ func-\n   tion (Clause 6.11) ensures that the value zero does not represent\
    \ a\n   valid checksum. A non-zero value indicates that the checksum must be\n\
    \   processed. If the checksum calculation fails, the PDU must be dis-\n   carded.\n"
- title: 7.3     Address Part
  contents:
  - '7.3     Address Part

    '
- title: 7.3.1    General
  contents:
  - "7.3.1    General\n   Address parameters are distinguished by their location,\
    \ immediately\n   following the fixed part of the PDU header. The address part\
    \ is il-\n   lustrated Figure 4:\n                                           \
    \                   Octet\n                ____________________________________________\n\
    \               |    Destination Address Length Indicator   |   10\n         \
    \      |___________________________________________|\n               |       \
    \                                    |   11\n               :              Destination\
    \ Address          :\n               |                                       \
    \    |  m - 1\n               |___________________________________________|\n\
    \               |     Source Address Length Indicator       |    m\n         \
    \      |___________________________________________|\n               |       \
    \                                    |  m + 1\n               :              \
    \ Source Address              :\n               |                            \
    \               |  n - 1\n               |___________________________________________|\n\
    \                 Figure 4: PDU Header -- Address Part\n"
- title: 7.3.1.1    Destination and Source Addresses
  contents:
  - "7.3.1.1    Destination and Source Addresses\n   The Destination and Source addresses\
    \ used by this protocol are Net-\n   work Service Access Point addresses as defined\
    \ in ISO 8348/AD2, Ad-\n   dendum to the Network Service Definition Covering Network\
    \ Layer Ad-\n   dressing.\n   The Destination and Source Addresses are variable\
    \ length. The Desti-\n   nation and Source Address fields are encoded as Network\
    \ Protocol Ad-\n   dress Information using the Preferred Binary Encoding defined\
    \ in\n   Clause 8.3.1 of ISO 8348/AD2.\n   The Destination Address Length Indicator\
    \ field specifies the length\n   of the Destination Address in octets. The Destination\
    \ Address field\n   follows the Destination Address Length Indicator field.\n\
    \   The Source Address Length Indicator field specifies the length of the\n  \
    \ Source Address in octets.  The Source Address Length Indicator field\n   follows\
    \ the Destination Address field. The Source Address field fol-\n   lows the Source\
    \ Address Length Indicator field.\n   Each address parameter is encoded as illustrated\
    \ in Table 5:\n                ______________________________________________\n\
    \                | Octet  | Address parameter Length Indicator |\n           \
    \     |   n    |                (e.g., 'm')         |\n                |________|____________________________________|\n\
    \                | Octets |                                    |\n           \
    \     |  n + 1 |       Address Parameter Value      |\n                |  thru\
    \  |                                    |\n                |  n + m |        \
    \                            |\n                |________|____________________________________|\n\
    \                          Figure 5:  Address Parameters\n"
- title: 7.4     Segmentation Part
  contents:
  - "7.4     Segmentation Part\n   If the Segmentation Permitted Flag in the Fixed\
    \ Part of the PDU\n   Header (Octet 4, Bit 8) is set to one, the segmentation\
    \ part of the\n   header, illustrated in Figure 6, must be present:\n   If the\
    \ Segmentation Permitted flag is set to zero, the non-segmenting\n   protocol\
    \ subset is in use.\n                                                  Octet\n\
    \                    ________________________\n                    | Data Unit\
    \ Identifier |       n, n + 1\n                    |______________________|\n\
    \                    |    Segment Offset    |   n + 2, n + 3\n               \
    \     |______________________|\n                    |     Total Length     | \
    \  n + 4, n + 5\n                    |______________________|\n             Figure\
    \ 6: PDU Header -- Segmentation Part\n"
- title: 7.4.1    Data Unit Identifier
  contents:
  - "7.4.1    Data Unit Identifier\n   The Data Unit Identifier identifies an Initial\
    \ PDU (and hence, its\n   Derived PDUs) so that a segmented data unit may be correctly\
    \ reassem-\n   bled. The Data Unit Identifier size is two octets.\n"
- title: 7.4.2    Segment Offset
  contents:
  - "7.4.2    Segment Offset\n   For each Derived PDU, the Segment Offset field specifies\
    \ the relative\n   position of the segment contained in the data field of the\
    \ Derived\n   PDU with respect to the start of the data field of the Initial PDU.\n\
    \   The offset is measured in units of octets. The offset of the first\n   segment\
    \ (and hence, the Initial PDU) is zero; an unsegmented (Initial\n   PDU) has a\
    \ segment offset value of zero (0). The value of this field\n   shall be a multiple\
    \ of eight 8).\n"
- title: 7.4.3    PDU Total Length
  contents:
  - "7.4.3    PDU Total Length\n   The Total Length field specifies the entire length\
    \ of the Initial\n   PDU, including both the header and data.  This field is not\
    \ changed\n   for the lifetime of the Initial PDU (and hence, its Derived PDUs).\n"
- title: 7.5     Options Part
  contents:
  - '7.5     Options Part

    '
- title: 7.5.1    General
  contents:
  - "7.5.1    General\n   The options part is used to convey optional parameters.\
    \  The options\n   part of the PDU header is illustrated below:\n            \
    \                                                 Octet\n        ___________________________________________________\n\
    \        |                                                  | n + 6\n        :\
    \                    Options                       :\n        |              \
    \                                    |   p\n        |__________________________________________________|\n\
    \                  Figure 7: PDU Header -- Options Part\n   If the options part\
    \ is present, it may contain one or more parame-\n   ters.  The number of parameters\
    \ that may be contained in the options\n   part is constrained by the length of\
    \ the options part, which is\n   determined by the following formula:\n   PDU\
    \ Header Length -(length of fixed part+length of address\n   part+length of segmentation\
    \ part)\n   and by the length of the individual optional parameters.\n   Parameters\
    \ defined in the options part may appear in any order.  Du-\n   plication of options\
    \ is not permitted. Receipt of a Protocol Data\n   Unit with an option duplicated\
    \ should be treated as a protocol error.\n   The rules governing the treatment\
    \ of protocol errors are described in\n   Clause 6.10, Error Reporting Function.\n\
    \   The encoding of parameters contained within the options part of the\n   PDU\
    \ header is illustrated in Table 6:\n                Octets\n                ___________________________________________\n\
    \                |     n      |       Parameter Code       |\n               \
    \ |____________|____________________________|\n                |   n + 1    |\
    \  Parameter Length (e.g.m)  |\n                |____________|____________________________|\n\
    \                |   n + 2    |                            |\n               \
    \ |     to     |     Parameter Value        |\n                | n + m + 1  |\
    \                            |\n                |____________|____________________________|\n\
    \                    Table 6: Encoding of Parameters\n   The parameter code field\
    \ is coded in binary and, without extensions,\n   provides a maximum of 255 different\
    \ parameters.  No parameter codes\n   use bits 8 and 7 with the value 00, so the\
    \ actual maximum number of\n   parameters is lower.  A parameter code of 255 (binary\
    \ 1111 1111) is\n   reserved for possible future extensions.\n   The parameter\
    \ length field indicates the length, in octets, of the\n   parameter value field.\
    \ The length is indicated by a positive binary\n   number, m, with a theoretical\
    \ maximum value of 254.  The practical\n   maximum value of m is lower. For example,\
    \ in the case of a single\n   parameter contained within the options part, two\
    \ octets are required\n   for the parameter code and the parameter length indicators.\
    \ Thus, the\n   value of m is limited to:\n   m = 252-(length of fixed part +length\
    \ of address part +length of seg-\n   mentation part)\n   For each succeeding\
    \ parameter the maximum value of m decreases.  The\n   parameter value field contains\
    \ the value of the parameter identified\n   in the parameter code field.\n   The\
    \ following parameters are permitted in the options part.\n"
- title: 7.5.2    Padding
  contents:
  - "7.5.2    Padding\n   The padding parameter is used to lengthen the PDU header\
    \ to a con-\n   venient size (See Clause 6.12).\n   Parameter Code:        1100\
    \ 1100\n   Parameter Length:      variable\n   Parameter Value:       any value\
    \ is allowed\n"
- title: 7.5.3    Security
  contents:
  - "7.5.3    Security\n   This parameter allows a unique and unambiguous security\
    \ level to be\n   assigned to a protocol data unit.\n   Parameter Code:      \
    \  1100 0101\n   Parameter Length:      variable\n   Parameter Value:       The\
    \ high order two bits of the first octet\n                          specify the\
    \ Security Format Code, where:\n            Security      Type of Security Field:\n\
    \           Format Code\n               00         Reserved\n               01\
    \         Source Address Specific\n               10         Destination Address\
    \ Specific\n               11         Globally Unique\n          The rest of the\
    \ first octet is reserved and must be zero.  The\n          remainder of the Parameter\
    \ Value field specifies the security\n          level as described in the following\
    \ Clauses.\n"
- title: 7.5.3.1    Source Address Specific
  contents:
  - "7.5.3.1    Source Address Specific\n   The Security Format Code value of binary\
    \ \"01\" indicates that the\n   remaining octets of the parameter value field\
    \ specify a security lev-\n   el which is unique and unambiguous in the context\
    \ of the security\n   classification system employed by the authority responsible\
    \ for as-\n   signing the source NSAP Address.\n"
- title: 7.5.3.2    Destination Address Specific
  contents:
  - "7.5.3.2    Destination Address Specific\n   The Security Format Code value of\
    \ binary \"10\" indicates that the\n   remaining octets of the parameter value\
    \ field specify a security lev-\n   el which is unique and unambiguous in the\
    \ context of the security\n   classification system employed by the authority\
    \ responsible for as-\n   signing the destination NSAP Address.\n"
- title: 7.5.3.3    Globally Unique Security
  contents:
  - "7.5.3.3    Globally Unique Security\n   The Security Format Code value of binary\
    \ \"11\" indicates that the\n   remaining octets of the parameter value field\
    \ specify a globally\n   unique and unambiguous security level.  This security\
    \ classification\n   system is not specified in this Standard.\n"
- title: 7.5.4    Source Routing
  contents:
  - "7.5.4    Source Routing\n   The source routing parameter specifies, either completely\
    \ or partial-\n   ly, the route to be taken from Source Network Address to Destination\n\
    \   Network Address.\n   Parameter Code:        1100 0101\n   Parameter Length:\
    \      variable\n   Parameter Value:       2 octets of control information succeeded\
    \ by a\n          concatenation of ordered network-entity title entries (ordered\n\
    \          from source to destination)\n   The first octet of the parameter value\
    \ is the type code, and has the\n   following significance:\n          0000 0000\
    \    partial source routing\n          0000 0001    complete source routing\n\
    \                       <all other values reserved>\n   The second octet indicates\
    \ the octet offset of the next network-\n   entity title entry to be processed\
    \ in the list.  It is relative to\n   the start of the parameter, such that a\
    \ value of three (3) indicates\n   that the next network-entity title entry begins\
    \ immediately after\n   this control octet. Successive octets are indicated by\
    \ corresponding-\n   ly larger values of this indicator.\n   The third octet begins\
    \ the network-entity title list. The list con-\n   sists of variable length network-entity\
    \ title entries.  The first oc-\n   tet of entry identifies the length of the\
    \ network-entity title which\n   comprises the re- mainder of the entry.\n"
- title: 7.5.5    Recording of Route
  contents:
  - "7.5.5    Recording of Route\n   The recording of route parameter identifies the\
    \ route of intermediate\n   systems traversed by the PDU.\n   Parameter Code:\
    \        1100 1011\n   Parameter Length:      variable\n   Parameter Value:  \
    \     2 octets of control information succeeded by a\n          con catenation\
    \ of ordered network-entity title entries (ordered\n          from destination\
    \ to source)\n   The first octet of the parameter value is the type code, and\
    \ has the\n   following significance:\n         0000 0000    Partial Recording\
    \ of Route in progress\n         0000 0001    Complete Recording of Route in progress\n\
    \                      <all other values reserved>\n   The second octet identifies\
    \ the first octet not currently used for a\n   recorded network-entity title,\
    \ and therefore also the end of the\n   list. It is encoded relative to the start\
    \ of the parameter value,\n   such that a value of three (3) indicates that no\
    \ network-entity ti-\n   tles have yet been recorded.  A value of all ones is\
    \ used to indicate\n   that route recording has been terminated.\n   The third\
    \ octet begins the network-entity title list. The list con-\n   sists of variable\
    \ length network-entity title entries.  The first oc-\n   tet of each entry specifies\
    \ the length of the network-entity title\n   comprising the remainder of the entry.\
    \  Network-entity title entries\n   are always added to the beginning of the list;\
    \ that is, the most re-\n   cently added entry will begin in the third octet of\
    \ the parameter\n   value.\n                                     Note:\n     \
    \   The length of the Record Route parameter is determined by the\n        originator\
    \ of the PDU and is not changed during the lifetime of\n        the PDU; hence,\
    \ the operation of the Record Route function does\n        not affect the length\
    \ of the header.\n"
- title: 7.5.6    Quality of Service Maintenance
  contents:
  - "7.5.6    Quality of Service Maintenance\n   The Quality of Service parameter\
    \ conveys information about the quali-\n   ty of service requested by the originating\
    \ Network Service user.\n   Network-entities in intermediate systems may (but\
    \ are not required\n   to) make use of this information as an aid in selecting\
    \ a route when\n   more than one route satisfying other routing criteria is available\n\
    \   and the available routes are known to differ with respect to Quality\n   of\
    \ Service see Clause 6.16).\n     Parameter Code:        1100 0011\n     Parameter\
    \ Length:      variable\n     Parameter Value:       The high order two bits of\
    \ the first octet\n           specify the  QoS Format Code, where:\n        QoS\
    \ Format      Type of QoS\n            Code        Field\n             00    \
    \     Reserved\n             01         Source Address Specific\n            \
    \ 10         Destination Address Specific\n             11         Globally Unique\n\
    \   The rest of the first octet is reserved and must be zero. The\n   remainder\
    \ of the Parameter Value field specifies the QoS as described\n   in the following\
    \ Clauses.\n"
- title: 7.5.6.1    Source Address Specific
  contents:
  - "7.5.6.1    Source Address Specific\n   The QoS Format Code value of binary \"\
    01\" indicates that the remaining\n   octets of the parameter value field specify\
    \ a QoS which is unique and\n   unambiguous in the context of the QoS Maintenance\
    \ system employed by\n   the authority responsible for assigning the source NSAP\
    \ Address.\n"
- title: 7.5.6.2    Destination Address Specific
  contents:
  - "7.5.6.2    Destination Address Specific\n   The QoS Format Code value of binary\
    \ \"10\" indicates that the remaining\n   octets of the parameter value field\
    \ specify a QoS which is unique and\n   unambiguous in the context of the QoS\
    \ Maintenance system employed by\n   the authority responsible for assigning the\
    \ destination NSAP Address.\n"
- title: 7.5.6.3    Globally Unique QoS
  contents:
  - "7.5.6.3    Globally Unique QoS\n   The QoS Format Code value of binary \"11\"\
    \ indicates that the remainder\n   of the parameter value field specifies a globally\
    \ unique QoS Mainte-\n   nance field. When the globally unique QoS Maintenance\
    \ function is em-\n   ployed, the parameter value field must have a total length\
    \ of one oc-\n   tet, which is assigned the following values:\n         Bits 8\
    \ and 7:   QoS Format Code of binary \"11\"\n         Bit 6:          Reserved\n\
    \         Bit 5:          sequencing vs. transit delay\n         Bit 4:      \
    \    congestion experienced\n         Bit 3:          transit delay vs. cost\n\
    \         Bit 2:          residual error probability vs. transit delay\n     \
    \    Bit 1:          residual error probability vs. cost\n   Bit 5 is set to one\
    \ to indicate that, where possible, routing deci-\n   sions should favor sending\
    \ all PDUs to the specified destination NSAP\n   address over a single path (in\
    \ order to maintain sequence) over\n   minimizing transit delay. A value of zero\
    \ (0) indicates that, where\n   possible, routing decisions should favor low transit\
    \ delay over se-\n   quence preservation.\n   Bit 4 is set to zero by the network-entity\
    \ which originates the pro-\n   tocol data unit. It is set to one by an intermiediate\
    \ system to indi-\n   cate that this PDU has visited a congested intermediate\
    \ system, and\n   appropriate action should be taken by the destination network-entity.\n\
    \   Once the congestion experienced bit is set by an intermediate system,\n  \
    \ it may not be reset by any intermediate system traversed by the PDU\n   further\
    \ along the path towards the destination.\n   Bit 3 is set to one to indicate\
    \ that, where possible, routing deci-\n   sions should favor low transit delay\
    \ over low cost. A value of 0 in-\n   dicates that routing decisions should favor\
    \ low cost over low transit\n   delay.\n   Bit 2 set to one to indicate that,\
    \ where possible, routing decisions\n   should favor low residual error probability\
    \ over low transit delay.\n   A value of zero indicates that routing decisions\
    \ should favor low\n   transit delay over low residual error probability.\n  \
    \ Bit 1 is set to one to indicate that, where possible, routing deci-\n   sions\
    \ should favor low residual error probability over low cost.  A\n   value of 0\
    \ indicates that routing decisions should favor low cost\n   over low residual\
    \ error probability.\n"
- title: 7.5.7    Priority
  contents:
  - "7.5.7    Priority\n   The value of the Priority parameter indicates the relative\
    \ priority\n   of the protocol data unit.  Intermediate systems that support this\n\
    \   option shall make use of this information in routing and in ordering\n   PDUs\
    \ for transmission.\n   Parameter Code:        1100 1101\n   Parameter Length:\
    \      one octet\n   Parameter Value:       0000 0000 - Normal (Default) through\n\
    \          0000 1110 - Highest\n          <all other values reserved>\n   The\
    \ values 0000 0001 through 0000 1110 are to be used for higher\n   priority protocol\
    \ data units. If an intermediate system does not sup-\n   port this option, all\
    \ PDUs shall be treated as if the field had the\n   value 0000 0000.\n"
- title: 7.6     Data Part
  contents:
  - "7.6     Data Part\n   The Data part of the PDU is structured as an ordered multiple\
    \ of oc-\n   tets, which is identical to the same ordered multiple of octets\n\
    \   specified for the NS-Userdata parameter of the N-UNITDATA Request and\n  \
    \ Indication primitives. The data field is illustrated in Figure 8:\n        \
    \                                                         Octet\n            ___________________________________________________\n\
    \            |                                                  | p + 1\n    \
    \        :                      Data                        :\n            | \
    \                                                 |   z\n            |__________________________________________________|\n\
    \                       Figure 8: PDU Header -- Data Field\n"
- title: 7.7     Data (DT) PDU
  contents:
  - '7.7     Data (DT) PDU

    '
- title: 7.7.1    Structure
  contents:
  - "7.7.1    Structure\n   The DT PDU has the following format:\n             __________________________________________\n\
    \             |   Network Layer Protocol Identifier    |       1\n           \
    \  |________________________________________|\n             |            Length\
    \ Indicator            |       2\n             |________________________________________|\n\
    \             |      Version/Protocol Id Extension     |       3\n           \
    \  |________________________________________|\n             |                Lifetime\
    \                |       4\n             |________________________________________|\n\
    \             |  S P  vline  M S vline e/R |  Type     |       5\n           \
    \  |____________________________|___________|\n             |             Segment\
    \ Length             |      6,7\n             |________________________________________|\n\
    \             |                Checksum                |      8,9\n          \
    \   |________________________________________|\n             |  Destination Address\
    \ Length Indicator  |      10\n             |________________________________________|\n\
    \             |                                        |      11\n           \
    \  :          Destination Address           :\n             |________________________________________|\
    \     m - 1\n             |    Source Address Length Indicator     |       m\n\
    \             |________________________________________|\n             |     \
    \                                   |     m + 1\n             :             Source\
    \ Address             :\n             |                                      \
    \  |     n - 1\n             |________________________________________|\n    \
    \         |          Data Unit Identifier          |    n, n + 1\n           \
    \  |________________________________________|\n             |             Segment\
    \ Offset             |  n + 2, n + 3\n             |________________________________________|\n\
    \             |              Total Length              |  n + 4, n + 5\n     \
    \        |________________________________________|\n             |          \
    \                              |    n + 6\n             |                 Options\
    \                |\n             |                                        |  \
    \    p\n             |________________________________________|\n            \
    \ |                                        |    p + 1\n             |        \
    \          Data                  |\n             |                           \
    \             |      z\n             |________________________________________|\n\
    \                         Figure 9: DT PDU\n"
- title: 7.7.1.1    Fixed Part
  contents:
  - "7.7.1.1    Fixed Part\n   1)   Network Layer Protocol Identifier      See Clause\
    \ 7.2.2\n   2)   Length Indicator                       See Clause 7.2.3\n   3)\
    \   Version/Protocol Id Extension          See Clause 7.2.4\n   4)   Lifetime\
    \                               See Clause 7.2.5\n   5)   SP, MS, E/R        \
    \                    See Clause 7.2.6\n   6)   Type Code                     \
    \         See Clause 7.2.7\n   7)   Segment Length                         See\
    \ Clause 7.2.8\n   8)   Checksum                               See Clause 7.2.9\n"
- title: 7.7.1.2    Addresses
  contents:
  - "7.7.1.2    Addresses\n   See Clause 7.3.\n"
- title: 7.7.1.3    Segmentation
  contents:
  - "7.7.1.3    Segmentation\n   See Clause 7.4.\n"
- title: 7.7.1.4    Options
  contents:
  - "7.7.1.4    Options\n   See Clause 7.5.\n"
- title: 7.7.1.5    Data
  contents:
  - "7.7.1.5    Data\n   See Clause 7.7.\n"
- title: 7.8     Inactive Network Layer Protocol
  contents:
  - "7.8     Inactive Network Layer Protocol\n                                   \
    \                   Octet\n                  ____________________________________\n\
    \                  |Network Layer Protocol Identifier |  1\n                 \
    \ |__________________________________|\n                  |                  \
    \                |  2\n                  |                Data              |\n\
    \                  |                                  |  2 - n\n             \
    \     |__________________________________|\n                Figure 10: Inactive\
    \ Network Layer Protocol\n"
- title: 7.8.1    Network Layer Protocol Id
  contents:
  - "7.8.1    Network Layer Protocol Id\n   The value of the Network Layer Protocol\
    \ Identifier field is binary\n   zero (0000 0000).\n"
- title: 7.8.2    Data Field
  contents:
  - "7.8.2    Data Field\n   The length of the NS-Userdata parameter is constrained\
    \ to be less\n   than or equal to the value of the length of the SN-Userdata parameter\n\
    \   minus one (see Clause 7.7).\n"
- title: 7.9     Error Report PDU (ER)
  contents:
  - '7.9     Error Report PDU (ER)

    '
- title: 7.9.1    Structure
  contents:
  - "7.9.1    Structure\n   The ER PDU has the following format:\n               \
    \                                              Octet\n              ______________________________________________\n\
    \              |     Network Layer Protocol Identifier      |   1\n          \
    \    |____________________________________________|\n              |         \
    \     Length Indicator              |   2\n              |____________________________________________|\n\
    \              |        Version/Protocol Id Extension       |   3\n          \
    \    |____________________________________________|\n              |         \
    \          Lifetime                 |   4\n              |____________________________________________|\n\
    \              |   SP= 0  vline MS= 0 vline Reserved | Type |   5\n          \
    \    |_____________________________________|______|\n              |         \
    \      Segment Length               |  6,7\n              |____________________________________________|\n\
    \              |                 Checksum                   |  8,9\n         \
    \     |____________________________________________|\n              |    Destination\
    \ Address Length Indicator    |  10\n              |____________________________________________|\n\
    \              |                                            |  11\n          \
    \    :            Destination Address             :\n              |         \
    \                                   | m - 1\n              |____________________________________________|\n\
    \              |     Source Address Length Indicator        |   m\n          \
    \    |____________________________________________|\n              |         \
    \                                   | m + 1\n              :               Source\
    \ Address               :\n              |                                   \
    \         | n - 1\n              |____________________________________________|\n\
    \              |                                            |   n\n          \
    \    |                   Options                  |\n              |         \
    \                                   | p - 1\n              |____________________________________________|\n\
    \              |                                            |   p\n          \
    \    |             Reason for Discard             |\n              |         \
    \                                   | q - 1\n              |____________________________________________|\n\
    \              |                                            |   q\n          \
    \    |          Error Report Data Field           |\n              |         \
    \                                   |   z\n              |____________________________________________|\n\
    \                       Figure 11: Error Report PDU\n"
- title: 7.9.1.1    Fixed Part
  contents:
  - "7.9.1.1    Fixed Part\n   The fixed part of the Error Report Protocol Data Unit\
    \ is composed in\n   the same way as a new (Initial) Data PDU. References are\
    \ provided to\n   previous Clauses describing the encoding of the fields comprising\
    \ the\n   fixed part:\n         1)   Network Layer Protocol Identifier      See\
    \ Clause 7.2.2\n         2)   Length Indicator                       See Clause\
    \ 7.2.3\n         3)   Version/Protocol Id Extension          See Clause 7.2.4\n\
    \         4)   Lifetime                               See Clause 7.2.5\n     \
    \    5)   SP, MS, E/R                            Always set to zero,\n       \
    \                                              (See Clause 6.10)\n         6)\
    \   Type Code                              See Clause 7.2.7\n         7)   Segment\
    \ Length                         See Clause 7.2.8\n         8)   Checksum    \
    \                           See Clause 7.2.9\n"
- title: 7.9.1.2    Addresses
  contents:
  - "7.9.1.2    Addresses\n   See Clause 7.3.\n   The Destination Address specifies\
    \ the network-entity title of the origi-\n   nator of the discarded PDU. The Source\
    \ Address specifies the title of the\n   intermediate-system or end-system network-entity\
    \ initiating the Error\n   Report PDU.\n"
- title: 7.9.1.3    Options
  contents:
  - "7.9.1.3    Options\n   See Clause 7.5.\n"
- title: 7.9.1.4    Reason for Discard
  contents:
  - "7.9.1.4    Reason for Discard\n   This parameter is valid only for the Error\
    \ Report PDU.\n   Parameter Code:      1100 0001\n   Parameter Length:    two\
    \ octets\n   Parameter Value:     type of error encoded in binary.  Values are\
    \ listed\n                        in Table 7:\n"
- title: _______________________________________________________________________________
  contents:
  - '_______________________________________________________________________________

    '
- title: '| Parameter Value  |   Class of  |  Meaning                                    |'
  contents:
  - '| Parameter Value  |   Class of  |  Meaning                                    |

    '
- title: '| Octet 1   Octet 2|    Error    |                                             |'
  contents:
  - '| Octet 1   Octet 2|    Error    |                                             |

    '
- title: '|__________________|_____________|_____________________________________________|'
  contents:
  - '|__________________|_____________|_____________________________________________|

    '
- title: '| 0000      0000   |             | Reason not specified                        |'
  contents:
  - '| 0000      0000   |             | Reason not specified                        |

    '
- title: '|           0001   |             | Protocol Procedure Error                    |'
  contents:
  - '|           0001   |             | Protocol Procedure Error                    |

    '
- title: '|           0010   |             | Incorrect Checksum                          |'
  contents:
  - '|           0010   |             | Incorrect Checksum                          |

    '
- title: '|           0011   |  General    | PDU Discarded due to Congestion             |'
  contents:
  - '|           0011   |  General    | PDU Discarded due to Congestion             |

    '
- title: '|           0100   |             | Header Syntax Error (cannot be parsed)      |'
  contents:
  - '|           0100   |             | Header Syntax Error (cannot be parsed)      |

    '
- title: '|           0101   |             | Segmentation needed but not permitted       |'
  contents:
  - '|           0101   |             | Segmentation needed but not permitted       |

    '
- title: '|           0110   |             | Incomplete PDU Received                     |'
  contents:
  - '|           0110   |             | Incomplete PDU Received                     |

    '
- title: '|           0111   |             | Duplicate Option                            |'
  contents:
  - '|           0111   |             | Duplicate Option                            |

    '
- title: '|__________________|_____________|_____________________________________________|'
  contents:
  - '|__________________|_____________|_____________________________________________|

    '
- title: '| 1000      0000   |  Address    | Destination Address Unreachable             |'
  contents:
  - '| 1000      0000   |  Address    | Destination Address Unreachable             |

    '
- title: '|           0001   |             | Destination Address Unknown                 |'
  contents:
  - '|           0001   |             | Destination Address Unknown                 |

    '
- title: '|__________________|_____________|_____________________________________________|'
  contents:
  - '|__________________|_____________|_____________________________________________|

    '
- title: '| 1001      0000   |             | Unspecified Source Routing Error            |'
  contents:
  - '| 1001      0000   |             | Unspecified Source Routing Error            |

    '
- title: '|           0001   |   Source    | Syntax Error in Source Routing Field        |'
  contents:
  - '|           0001   |   Source    | Syntax Error in Source Routing Field        |

    '
- title: '|           0010   |  Routing    | Unknown Address in Source Routing Field     |'
  contents:
  - '|           0010   |  Routing    | Unknown Address in Source Routing Field     |

    '
- title: '|           0011   |             | Path not Acceptable                         |'
  contents:
  - '|           0011   |             | Path not Acceptable                         |

    '
- title: '|__________________|_____________|_____________________________________________|'
  contents:
  - '|__________________|_____________|_____________________________________________|

    '
- title: '| 1010      0000   |  Lifetime   | Lifetime Expired while Data Unit in Transit
    |'
  contents:
  - '| 1010      0000   |  Lifetime   | Lifetime Expired while Data Unit in Transit
    |

    '
- title: '|           0001   |             | Lifetime Expired during Reassembly          |'
  contents:
  - '|           0001   |             | Lifetime Expired during Reassembly          |

    '
- title: '|__________________|_____________|_____________________________________________|'
  contents:
  - '|__________________|_____________|_____________________________________________|

    '
- title: '| 1011      0000   |             | Unsupported Option not Specified            |'
  contents:
  - '| 1011      0000   |             | Unsupported Option not Specified            |

    '
- title: '|           0001   |     PDU     | Unsupported Protocol Version                |'
  contents:
  - '|           0001   |     PDU     | Unsupported Protocol Version                |

    '
- title: '|           0010   |  Discarded  | Unsupported Security Option                 |'
  contents:
  - '|           0010   |  Discarded  | Unsupported Security Option                 |

    '
- title: '|           0011   |             | Unsupported Source Routing Option           |'
  contents:
  - '|           0011   |             | Unsupported Source Routing Option           |

    '
- title: '|           0100   |             | Unsupported Recording of Route Option       |'
  contents:
  - '|           0100   |             | Unsupported Recording of Route Option       |

    '
- title: '|__________________|_____________|_____________________________________________|'
  contents:
  - '|__________________|_____________|_____________________________________________|

    '
- title: '| 1100      0000   | Reassembly  | Reassembly interference                     |'
  contents:
  - '| 1100      0000   | Reassembly  | Reassembly interference                     |

    '
- title: '|__________________|_____________|_____________________________________________|'
  contents:
  - "|__________________|_____________|_____________________________________________|\n\
    \                      Table 7: Reasons for Discard\n   The first octet of the\
    \ parameter value contains an error type code.\n   If the error in the discarded\
    \ Data PDU can be localized to a particu-\n   lar field, the number of the first\
    \ octet of that field is stored in\n   the second octet of the reason for discard\
    \ parameter field. If the\n   error cannot be localized to a particular field,\
    \ or if the error is a\n   checksum error, then the value zero is stored in the\
    \ second octet of\n   the reason for discard parameter field.\n"
- title: 7.9.1.5    Error Report Data Field
  contents:
  - "7.9.1.5    Error Report Data Field\n   This field contains the entire header\
    \ of the discarded Data PDU, and\n   may contain some or all of the data field\
    \ of the discarded PDU.\n"
- title: 8     Conformance
  contents:
  - "8     Conformance\n   For conformance to this International Standard, the ability\
    \ to ori-\n   ginate, manipulate, and receive PDUs in accordance with the full\
    \ pro-\n   tocol (as opposed to the non-segmenting or Inactive Network Layer\n\
    \   Protocol subsets) is required.\n   Additionally, conformance to the Standard\
    \ requires provision of the\n   protocol functions described in Clause 6. Provision\
    \ of the optional\n   functions described in Clause 6.18 and enumerated in Table\
    \ 9-1 must\n   meet the requirements described therein. Exceptions to this require-\n\
    \   ment are described in Clause 8.1 below.\n   Additionally, conformance to the\
    \ Standard requires adherence to the\n   structure and encoding of PDUs of Clause\
    \ 7.\n   If and only if the above requirements are met is there conformance to\n\
    \   this International Standard.\n"
- title: 8.1     Provision of Functions for Conformance
  contents:
  - "8.1     Provision of Functions for Conformance\n   The following table categorizes\
    \ the functions in Clause 6 with\n   respect to the type of system providing the\
    \ function:\n                                    Note:\n       1. The support\
    \ of the PDU Composition and Forward PDU functions\n          is necessary for\
    \ the generation of Error Report PDUs.\n       2. The Segment PDU function is\
    \ in general mandatory for an\n          intermediate system. However, a system\
    \ which is to be\n          connected only to subnetworks all offering the same\
    \ maximum\n          SDU size (such as identical Local Area Networks) will not\n\
    \          need to perform this function and therefore does not need to\n    \
    \      implement it.\n          If this function is not implemented, this shall\
    \ be stated\n          as part of the specification of the implementation.\n \
    \      3. The correct treatment of the padding function requires no\n        \
    \  processing. A conforming implementation shall support the\n          function,\
    \ to the extent of ignoring this parameter wherever\n          it may appear.\n\
    \       4. This function may or may not be supported.  If an\n          implementation\
    \ does not support this function, and the\n          function is selected in a\
    \ PDU, then the PDU shall be discarded,\n          and an ER PDU shall be generated\
    \ and forwarded to the\n          originating network-entity if the Error Report\
    \ flag is set\n          and the conditions of Clause 6.10.4 are satisfied.\n\
    \       5. This function may or may not be supported.  If an implementation\n\
    \          does not support this function, and the function is selected\n    \
    \      in a PDU, then the function is not performed and the PDU is\n         \
    \ processed exactly as though the function had not been\n          selected. The\
    \ PDU shall not be discarded for this reason.\n    ___________________________________________________________________\n\
    \    | Function                   |     Send   |   Forward |   Receive |\n   \
    \ |____________________________|____________|___________|___________|\n    | PDU\
    \ Composition            |      M     |  (Note 1) |  (Note 1) |\n    | PDU Decomposition\
    \          |      M     |     -     |     M     |\n    | Header Format Analysis\
    \     |      -     |     M     |     M     |\n    | PDU Lifetime Control     \
    \  |            |     M     |     I     |\n    | Route PDU                  |\
    \      -     |     M     |     -     |\n    | Forward PDU                |   \
    \   M     |     M     |  (Note 1) |\n    | Segment PDU                |      M\
    \     |  (Note 2) |     -     |\n    | Reassemble PDU             |      -   \
    \  |     I     |     M     |\n    | Discard PDU                |      -     |\
    \     M     |     M     |\n    | Error Reporting            |      M     |   \
    \  M     |     M     |\n    | Header Error Detection     |   (Note 3) |     M\
    \     |     M     |\n    |                            |            |         \
    \  |           |\n    | Security                   |      -     |  (Note 3) |\
    \ (Note 4)  |\n    | Complete Source Routing    |      -     |  (Note 4) |   \
    \  -     |\n    | Complete Route Recording   |      -     |  (Note 4) |     -\
    \     |\n    | Partial Source Routing     |      -     |  (Note 5) |     -   \
    \  |\n    | Partial Route Recording    |      -     |  (Note 5) |     -     |\n\
    \    | Priority                   |      -     |  (Note 5) |     -     |\n   \
    \ | QoS Maintenance            |      -     |  (Note 5) |     -     |\n    | Congestion\
    \ Notification    |      -     |  (Note 5) |     -     |\n    | Padding      \
    \              |      -     |  (Note 5) | (Note 3)  |\n    |____________________________|____________|___________|___________|\n\
    \                    Table 8: Categorization of Functions\n                  \
    \                   Key:\n   M: Mandatory Function; this function must be implemented.\n\
    \   -: Not applicable.\n   I: Implementation option, as described in the text.\n\
    \   NOTE:  See notes above\n"
