This document is intended to be a source of information about the Russian Federal standard hash function (GOST R 34.11 94), which is one of the Russian cryptographic standard algorithms (called GOST algorithms).
Recently, Russian cryptography is being used in Internet applications, and this document has been created as information for developers and users of GOST R 34.11 94 for hash computation.
[GOST3411] was developed by the Federal Agency for Government Communication and Information and by the All Russia Scientific and Research Institute of Standardization.
GOST R 34.11 94 was accepted and activated by Act 154 of 23.05.1994 issued by the Russian Federal committee for standards.
The Purpose of GOST R 34.11 94
Expanding the application of information technologies when creating, processing, and storing documents requires, in some cases, confidentiality of their contents, maintenance of completeness, and authenticity.
Cryptography (cryptographic security) is one of the effective approaches for data security.
It is widely applied in different areas of government and commercial activity.
Cryptographic data security methods are under serious scientific research and standardization efforts at national, regional, and international levels.
GOST R 34.11 94 defines a hash function calculation procedure for an arbitrary sequence of binary symbols.
The hash function maps an arbitrary set of data represented as a sequence of binary symbols onto its image of a fixed small length.
Thus, hash functions can be used in procedures related to the electronic digital signature, resulting in considerable reduction of elapsed time for the sign and verify stages.
The effect of the reduction of time is due to the fact that only a short image of initial data is actually signed.
Applicability GOST R 34.11 94 defines an algorithm and procedure for the calculation of a hash function for an arbitrary sequence of binary symbols.
These algorithms and procedures should be applied in cryptographic methods of data processing and securing, including digital signature procedures employed for data transfer and data storage in computer aided systems.
The hash function, defined in GOST R 34.11 94, is used for digital signature systems based on the asymmetric cryptographic algorithm according to GOST R 34.10 2001 (see section 3).
Conventions Used in This Document
The following notations are used in GOST R 34.11 94: V all is a set of all finite words in the alphabet V   {0,1}.
The words are read from right to left and the alphabet symbols are numbered from right to left (i.e., the rightmost symbol of the word has the number one, the second rightmost symbol has number two, etc.).
Vk is a set of all words in alphabet V   {0,1} of length k bits (k 16,64,256).
A  is the length of a word A belonging to V all.
A  B is a concatenation of words A, B belonging to V all.
B.  One can also use the notation
A   B. A^k is a concatenation of k copies of the word A (A belongs to V all).
k is a word of length k, containing a binary representation of N(mod 2^k) residue, with a non negative integer N. A^$ is a non negative integer with A as its binary representation.
(xor) is the bitwise modulo 2 addition of the words of the same length.
M is a binary sequence to be hashed, M belongs to V all.
M is a message in digital signature systems.
h is a hash function that maps the sequence M belonging to V all onto the word h(M) belonging to V 256.
E(k,A) is a result of the encryption of the word A using key K with the encryption algorithm according to [GOST28147] in the electronic codebook (ECB) mode (K belongs to V256, A belongs to V64).
h0 is an initial hash value.
g is the assignment of the value g to the parameter e. ^ is the power operator.
i   1..8 is an interval with i being all the values from 1 to 8.
hUZ is the S boxes described in [GOST28147].
A hash function h is the mapping h :  V all   V256, depending on the parameter (which is the initial hash value H, H is a word from V256).
To define the hash function, it is necessary to have: a calculation algorithm for the step by step hash function chi : V256 x V256    V256 a description of an iterative procedure for calculating the hash value
h A hash function h depends on two parameters, h0 and hUZ.
Step by Step Hash Function
A calculation algorithm for the step by step hash function contains three parts, which successively do: key generation, here keys are 256 bit words; an encryption transformation, that is encryption of 64 bit subwords of word H using keys K[i], (i   1, 2, 3, 4) with the algorithm according to [GOST28147] in ECB mode; and a mixing transformation for the result of the encryption.
) 64 1]) belongs to V64,
16 1]) belongs to V16,
The transformation P : V256   V256 maps the word
xi1 onto the word xi[phi(32)]
For the key generation, one should use the following initial data: words H, M belonging to V256, parameters: words C[i]
(i   2, 3, 4), with values: C[2]
The following algorithm is used for the key calculation:
i :  1, U :  H , V :  M. 2.
Calculate: W   U (xor) V , K[i]   P(W).
If it is true, go to step 7.
If not, go to step 5.
U :  A(U)(xor)C[i], V :  A(A(V)), W :  U(xor)V, K[i]   P(W).
At this stage, 64 bit subwords of the word H are encrypted using keys K[i]
(i   1, 2, 3, 4).
For the encryption transformation, one should use the following initial data: H   h[4]  h[3]  h[2]  h[1], where h[i] belongs to V64, i   1,2,3,4, and a key set is K[1], K[2], K[3], K[4].
The encryption algorithm is applied and the following words are obtained: s[i]   E(K[i],h[i]), where:
As a result of the stage, the following sequence is formed:
At this stage, the obtained sequence is mixed using a shift register.
The initial data includes words H, M belonging to V256 and a word S belonging to V256 .
Let a mapping PSI(X) : V256(2)   V256(2) transform the word:
The Calculation Procedure for a Hash Function
The calculation procedure for a hash function h is assumed to be applied to a sequence M belonging to V all.
Its parameter is an initial hash value h0, which is an arbitrarily fixed word from V256.
The calculation procedure for the function h uses the following quantities at each step of iteration:
belonging to V all a part of the sequence M, which was not hashed at previous iterations
; H belonging to V256 the current hash value; SIGMA belonging to V256 the current check sum value
; L belonging to V256 the length of the partial sequence M processed at the previous iteration step.
The calculation algorithm for function h consists of the following steps: Step 1.
Assign initial values to current quantities: 1.1
M. 1.2 H :  h0.
1.5 Go to step 2.
If it is true, go to step 3.
M' 2.5 H :  chi (M', H)
2.6 H :  chi (L, H)
2.7 H :  chi (SIGMA, H)
M s belonging to V256 of the word  M
Then make the following calculations: 3.2 H :  chi (M s, H)
The quantity H obtained at step 2.7 is the value of the hash function h(M).
Usage of the Algorithm GOST 28147
[GOST28147] in ECB mode is used as an encryption transformation in the following examples.
F B B C D
8 B A 2   D 4
A 1 4 9 3   0 1 0 1 1 D C 2 4   5 3 7 5 0
A 6 D 5   7 F 2 F 8 3 D 8 6
A 5 1 D 9 4 F 0 7   4
9 D 8 F 2
A E 8   9 0 3 4 E E 2 6 9   2
A 4 F 3 B 10
E 7 5 E C 7 1 C 12   6 6 9 0
C 3 2 0 7 F 14   8 2 F B 5 9 5 5 15
C C E 2 3 B 9 3
The hexadecimal value of pi[j](i) is given in a column number j, j   1..8, and in a row number i, i   0..15.
We will put down binary symbol sequences as hexadecimal digits strings, where each digit corresponds to four signs of its binary representation.
7.3 Examples of the Hash Value Calculation A zero vector, for example, can be taken as an initial hash value: h0   00000000
Hash Calculation for the Sample Message M M   73657479
Initial values are assigned for the text:  M
2C656761 7373656D 20736920 73696854 for the hash function:
If the length of the message to be hashed equals 256 bits (32 bytes), then:
L   00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100
and there is no need to pad the current block with zeroes:
The step by step hash function
chi(M, N) values are calculated.
The keys are generated: K[1]
The 64 bit subwords of block H are encrypted by the algorithm according to GOST 28147.
00000000 is encrypted using key K[1] and s[1]   42ABBCCE 32BC0B1B is obtained.
00000000 is encrypted using key K[2] and s[2]
00000000 is encrypted using key K[3] and s[3]
00000000 is encrypted using key K[4] and s[4]
The mixing transformation using a shift register is performed and KSI   chi(M, H)
Assign H   KSI and calculate chi(L, H)
Now assign H   KSI again and calculate chi( SIGMA, H):
Hash Calculation for the Sample Message M Let M   7365
As the length of the message to be hashed equals 400 bits (50 bytes), the message is divided into two blocks, and the second (high order) one is padded with zeroes.
During the calculations the following numbers are obtained: STEP 1.
20206F6F 656C2070 67616570 616E6875 73697453
6881EB66 F5C7959F 63FCA1F1 D33C31B8 KSI
1BBE3C28 E2A09D7C 48BE45B6 DA88432C EBD56CBC 7FABE813
1BBE3C28 E2A09D7C 48BE45B6 DA88432C EBD56CBC 7FABE813 F292215B
6FDA88BC D0142A6C FA80AA16 15F2FDB1 K[4]
A3D97E7E A744CB43 08AA4C24 3352C745 STEP 4.
F4CD26BC 8B595F13 F5A4A55E A8B063CB ED3D7325 6511662A 7963008D K[3]   C954EF19 D0779A68 ED37D3FB
Then, the hash result is:
This entire document is about security considerations.
Current cryptographic resistance of GOST R 34.11 94 hash algorithm is estimated as 2^128 operations of computations of step hash functions.
(There is a known method to reduce this estimate to 2^105 operations, but it demands padding the colliding message with 1024 random bit blocks each of 256 bit length; thus, it cannot be used in any practical implementation).
Contributors Dmitry Kabelev Cryptocom, Ltd. 14 Kedrova St., Bldg.
2 Moscow, 117218 Russian Federation EMail: kdb@cryptocom.ru Igor Ustinov Cryptocom, Ltd. 14 Kedrova St., Bldg.
2 Moscow, 117218 Russian Federation EMail: igus@cryptocom.ru Sergey Vyshensky Moscow State University Leninskie gory, 1 Moscow, 119991 Russian Federation EMail: svysh@pn.sinp.msu.ru
