- contents:
  - '                        SOCKS Protocol Version 5

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Acknowledgments\n   This memo describes a protocol that is an evolution of the
    previous\n   version of the protocol, version 4 [1]. This new protocol stems from\n
    \  active discussions and prototype implementations.  The key\n   contributors
    are: Marcus Leech: Bell-Northern Research, David Koblas:\n   Independent Consultant,
    Ying-Da Lee: NEC Systems Laboratory, LaMont\n   Jones: Hewlett-Packard Company,
    Ron Kuris: Unify Corporation, Matt\n   Ganis: International Business Machines.\n"
  title: Acknowledgments
- contents:
  - "1.  Introduction\n   The use of network firewalls, systems that effectively isolate
    an\n   organizations internal network structure from an exterior network,\n   such
    as the INTERNET is becoming increasingly popular.  These\n   firewall systems
    typically act as application-layer gateways between\n   networks, usually offering
    controlled TELNET, FTP, and SMTP access.\n   With the emergence of more sophisticated
    application layer protocols\n   designed to facilitate global information discovery,
    there exists a\n   need to provide a general framework for these protocols to\n
    \  transparently and securely traverse a firewall.\n   There exists, also, a need
    for strong authentication of such\n   traversal in as fine-grained a manner as
    is practical. This\n   requirement stems from the realization that client-server\n
    \  relationships emerge between the networks of various organizations,\n   and
    that such relationships need to be controlled and often strongly\n   authenticated.\n
    \  The protocol described here is designed to provide a framework for\n   client-server
    applications in both the TCP and UDP domains to\n   conveniently and securely
    use the services of a network firewall.\n   The protocol is conceptually a \"shim-layer\"
    between the application\n   layer and the transport layer, and as such does not
    provide network-\n   layer gateway services, such as forwarding of ICMP messages.\n"
  title: 1.  Introduction
- contents:
  - "2.  Existing practice\n   There currently exists a protocol, SOCKS Version 4,
    that provides for\n   unsecured firewall traversal for TCP-based client-server\n
    \  applications, including TELNET, FTP and the popular information-\n   discovery
    protocols such as HTTP, WAIS and GOPHER.\n   This new protocol extends the SOCKS
    Version 4 model to include UDP,\n   and extends the framework to include provisions
    for generalized\n   strong authentication schemes, and extends the addressing
    scheme to\n   encompass domain-name and V6 IP addresses.\n   The implementation
    of the SOCKS protocol typically involves the\n   recompilation or relinking of
    TCP-based client applications to use\n   the appropriate encapsulation routines
    in the SOCKS library.\n"
  title: 2.  Existing practice
- contents:
  - "Note:\n   Unless otherwise noted, the decimal numbers appearing in packet-\n
    \  format diagrams represent the length of the corresponding field, in\n   octets.
    \ Where a given octet must take on a specific value, the\n   syntax X'hh' is used
    to denote the value of the single octet in that\n   field. When the word 'Variable'
    is used, it indicates that the\n   corresponding field has a variable length defined
    either by an\n   associated (one or two octet) length field, or by a data type
    field.\n"
  title: 'Note:'
- contents:
  - "3.  Procedure for TCP-based clients\n   When a TCP-based client wishes to establish
    a connection to an object\n   that is reachable only via a firewall (such determination
    is left up\n   to the implementation), it must open a TCP connection to the\n
    \  appropriate SOCKS port on the SOCKS server system.  The SOCKS service\n   is
    conventionally located on TCP port 1080.  If the connection\n   request succeeds,
    the client enters a negotiation for the\n   authentication method to be used,
    authenticates with the chosen\n   method, then sends a relay request.  The SOCKS
    server evaluates the\n   request, and either establishes the appropriate connection
    or denies\n   it.\n   Unless otherwise noted, the decimal numbers appearing in
    packet-\n   format diagrams represent the length of the corresponding field, in\n
    \  octets.  Where a given octet must take on a specific value, the\n   syntax
    X'hh' is used to denote the value of the single octet in that\n   field. When
    the word 'Variable' is used, it indicates that the\n   corresponding field has
    a variable length defined either by an\n   associated (one or two octet) length
    field, or by a data type field.\n   The client connects to the server, and sends
    a version\n   identifier/method selection message:\n                   +----+----------+----------+\n
    \                  |VER | NMETHODS | METHODS  |\n                   +----+----------+----------+\n
    \                  | 1  |    1     | 1 to 255 |\n                   +----+----------+----------+\n
    \  The VER field is set to X'05' for this version of the protocol.  The\n   NMETHODS
    field contains the number of method identifier octets that\n   appear in the METHODS
    field.\n   The server selects from one of the methods given in METHODS, and\n
    \  sends a METHOD selection message:\n                         +----+--------+\n
    \                        |VER | METHOD |\n                         +----+--------+\n
    \                        | 1  |   1    |\n                         +----+--------+\n
    \  If the selected METHOD is X'FF', none of the methods listed by the\n   client
    are acceptable, and the client MUST close the connection.\n   The values currently
    defined for METHOD are:\n          o  X'00' NO AUTHENTICATION REQUIRED\n          o
    \ X'01' GSSAPI\n          o  X'02' USERNAME/PASSWORD\n          o  X'03' to X'7F'
    IANA ASSIGNED\n          o  X'80' to X'FE' RESERVED FOR PRIVATE METHODS\n          o
    \ X'FF' NO ACCEPTABLE METHODS\n   The client and server then enter a method-specific
    sub-negotiation.\n   Descriptions of the method-dependent sub-negotiations appear
    in\n   separate memos.\n   Developers of new METHOD support for this protocol
    should contact\n   IANA for a METHOD number.  The ASSIGNED NUMBERS document should
    be\n   referred to for a current list of METHOD numbers and their\n   corresponding
    protocols.\n   Compliant implementations MUST support GSSAPI and SHOULD support\n
    \  USERNAME/PASSWORD authentication methods.\n"
  title: 3.  Procedure for TCP-based clients
- contents:
  - "4.  Requests\n   Once the method-dependent subnegotiation has completed, the
    client\n   sends the request details.  If the negotiated method includes\n   encapsulation
    for purposes of integrity checking and/or\n   confidentiality, these requests
    MUST be encapsulated in the method-\n   dependent encapsulation.\n   The SOCKS
    request is formed as follows:\n        +----+-----+-------+------+----------+----------+\n
    \       |VER | CMD |  RSV  | ATYP | DST.ADDR | DST.PORT |\n        +----+-----+-------+------+----------+----------+\n
    \       | 1  |  1  | X'00' |  1   | Variable |    2     |\n        +----+-----+-------+------+----------+----------+\n
    \    Where:\n          o  VER    protocol version: X'05'\n          o  CMD\n             o
    \ CONNECT X'01'\n             o  BIND X'02'\n             o  UDP ASSOCIATE X'03'\n
    \         o  RSV    RESERVED\n          o  ATYP   address type of following address\n
    \            o  IP V4 address: X'01'\n             o  DOMAINNAME: X'03'\n             o
    \ IP V6 address: X'04'\n          o  DST.ADDR       desired destination address\n
    \         o  DST.PORT desired destination port in network octet\n             order\n
    \  The SOCKS server will typically evaluate the request based on source\n   and
    destination addresses, and return one or more reply messages, as\n   appropriate
    for the request type.\n"
  title: 4.  Requests
- contents:
  - "5.  Addressing\n   In an address field (DST.ADDR, BND.ADDR), the ATYP field specifies\n
    \  the type of address contained within the field:\n          o  X'01'\n   the
    address is a version-4 IP address, with a length of 4 octets\n          o  X'03'\n
    \  the address field contains a fully-qualified domain name.  The first\n   octet
    of the address field contains the number of octets of name that\n   follow, there
    is no terminating NUL octet.\n          o  X'04'\n   the address is a version-6
    IP address, with a length of 16 octets.\n"
  title: 5.  Addressing
- contents:
  - "6.  Replies\n   The SOCKS request information is sent by the client as soon as
    it has\n   established a connection to the SOCKS server, and completed the\n   authentication
    negotiations.  The server evaluates the request, and\n   returns a reply formed
    as follows:\n        +----+-----+-------+------+----------+----------+\n        |VER
    | REP |  RSV  | ATYP | BND.ADDR | BND.PORT |\n        +----+-----+-------+------+----------+----------+\n
    \       | 1  |  1  | X'00' |  1   | Variable |    2     |\n        +----+-----+-------+------+----------+----------+\n
    \    Where:\n          o  VER    protocol version: X'05'\n          o  REP    Reply
    field:\n             o  X'00' succeeded\n             o  X'01' general SOCKS server
    failure\n             o  X'02' connection not allowed by ruleset\n             o
    \ X'03' Network unreachable\n             o  X'04' Host unreachable\n             o
    \ X'05' Connection refused\n             o  X'06' TTL expired\n             o
    \ X'07' Command not supported\n             o  X'08' Address type not supported\n
    \            o  X'09' to X'FF' unassigned\n          o  RSV    RESERVED\n          o
    \ ATYP   address type of following address\n             o  IP V4 address: X'01'\n
    \            o  DOMAINNAME: X'03'\n             o  IP V6 address: X'04'\n          o
    \ BND.ADDR       server bound address\n          o  BND.PORT       server bound
    port in network octet order\n   Fields marked RESERVED (RSV) must be set to X'00'.\n
    \  If the chosen method includes encapsulation for purposes of\n   authentication,
    integrity and/or confidentiality, the replies are\n   encapsulated in the method-dependent
    encapsulation.\n"
  title: 6.  Replies
- contents:
  - "CONNECT\n   In the reply to a CONNECT, BND.PORT contains the port number that
    the\n   server assigned to connect to the target host, while BND.ADDR\n   contains
    the associated IP address.  The supplied BND.ADDR is often\n   different from
    the IP address that the client uses to reach the SOCKS\n   server, since such
    servers are often multi-homed.  It is expected\n   that the SOCKS server will
    use DST.ADDR and DST.PORT, and the\n   client-side source address and port in
    evaluating the CONNECT\n   request.\n"
  title: CONNECT
- contents:
  - "BIND\n   The BIND request is used in protocols which require the client to\n
    \  accept connections from the server.  FTP is a well-known example,\n   which
    uses the primary client-to-server connection for commands and\n   status reports,
    but may use a server-to-client connection for\n   transferring data on demand
    (e.g. LS, GET, PUT).\n   It is expected that the client side of an application
    protocol will\n   use the BIND request only to establish secondary connections
    after a\n   primary connection is established using CONNECT.  In is expected that\n
    \  a SOCKS server will use DST.ADDR and DST.PORT in evaluating the BIND\n   request.\n
    \  Two replies are sent from the SOCKS server to the client during a\n   BIND
    operation.  The first is sent after the server creates and binds\n   a new socket.
    \ The BND.PORT field contains the port number that the\n   SOCKS server assigned
    to listen for an incoming connection.  The\n   BND.ADDR field contains the associated
    IP address.  The client will\n   typically use these pieces of information to
    notify (via the primary\n   or control connection) the application server of the
    rendezvous\n   address.  The second reply occurs only after the anticipated incoming\n
    \  connection succeeds or fails.\n   In the second reply, the BND.PORT and BND.ADDR
    fields contain the\n   address and port number of the connecting host.\n"
  title: BIND
- contents:
  - "UDP ASSOCIATE\n   The UDP ASSOCIATE request is used to establish an association
    within\n   the UDP relay process to handle UDP datagrams.  The DST.ADDR and\n
    \  DST.PORT fields contain the address and port that the client expects\n   to
    use to send UDP datagrams on for the association.  The server MAY\n   use this
    information to limit access to the association.  If the\n   client is not in possesion
    of the information at the time of the UDP\n   ASSOCIATE, the client MUST use a
    port number and address of all\n   zeros.\n   A UDP association terminates when
    the TCP connection that the UDP\n   ASSOCIATE request arrived on terminates.\n
    \  In the reply to a UDP ASSOCIATE request, the BND.PORT and BND.ADDR\n   fields
    indicate the port number/address where the client MUST send\n   UDP request messages
    to be relayed.\n"
  title: UDP ASSOCIATE
- contents:
  - "Reply Processing\n   When a reply (REP value other than X'00') indicates a failure,
    the\n   SOCKS server MUST terminate the TCP connection shortly after sending\n
    \  the reply.  This must be no more than 10 seconds after detecting the\n   condition
    that caused a failure.\n   If the reply code (REP value of X'00') indicates a
    success, and the\n   request was either a BIND or a CONNECT, the client may now
    start\n   passing data.  If the selected authentication method supports\n   encapsulation
    for the purposes of integrity, authentication and/or\n   confidentiality, the
    data are encapsulated using the method-dependent\n   encapsulation.  Similarly,
    when data arrives at the SOCKS server for\n   the client, the server MUST encapsulate
    the data as appropriate for\n   the authentication method in use.\n"
  title: Reply Processing
- contents:
  - "7.  Procedure for UDP-based clients\n   A UDP-based client MUST send its datagrams
    to the UDP relay server at\n   the UDP port indicated by BND.PORT in the reply
    to the UDP ASSOCIATE\n   request.  If the selected authentication method provides\n
    \  encapsulation for the purposes of authenticity, integrity, and/or\n   confidentiality,
    the datagram MUST be encapsulated using the\n   appropriate encapsulation.  Each
    UDP datagram carries a UDP request\n   header with it:\n      +----+------+------+----------+----------+----------+\n
    \     |RSV | FRAG | ATYP | DST.ADDR | DST.PORT |   DATA   |\n      +----+------+------+----------+----------+----------+\n
    \     | 2  |  1   |  1   | Variable |    2     | Variable |\n      +----+------+------+----------+----------+----------+\n
    \    The fields in the UDP request header are:\n          o  RSV  Reserved X'0000'\n
    \         o  FRAG    Current fragment number\n          o  ATYP    address type
    of following addresses:\n             o  IP V4 address: X'01'\n             o
    \ DOMAINNAME: X'03'\n             o  IP V6 address: X'04'\n          o  DST.ADDR
    \      desired destination address\n          o  DST.PORT       desired destination
    port\n          o  DATA     user data\n   When a UDP relay server decides to relay
    a UDP datagram, it does so\n   silently, without any notification to the requesting
    client.\n   Similarly, it will drop datagrams it cannot or will not relay.  When\n
    \  a UDP relay server receives a reply datagram from a remote host, it\n   MUST
    encapsulate that datagram using the above UDP request header,\n   and any authentication-method-dependent
    encapsulation.\n   The UDP relay server MUST acquire from the SOCKS server the
    expected\n   IP address of the client that will send datagrams to the BND.PORT\n
    \  given in the reply to UDP ASSOCIATE.  It MUST drop any datagrams\n   arriving
    from any source IP address other than the one recorded for\n   the particular
    association.\n   The FRAG field indicates whether or not this datagram is one
    of a\n   number of fragments.  If implemented, the high-order bit indicates\n
    \  end-of-fragment sequence, while a value of X'00' indicates that this\n   datagram
    is standalone.  Values between 1 and 127 indicate the\n   fragment position within
    a fragment sequence.  Each receiver will\n   have a REASSEMBLY QUEUE and a REASSEMBLY
    TIMER associated with these\n   fragments.  The reassembly queue must be reinitialized
    and the\n   associated fragments abandoned whenever the REASSEMBLY TIMER expires,\n
    \  or a new datagram arrives carrying a FRAG field whose value is less\n   than
    the highest FRAG value processed for this fragment sequence.\n   The reassembly
    timer MUST be no less than 5 seconds.  It is\n   recommended that fragmentation
    be avoided by applications wherever\n   possible.\n   Implementation of fragmentation
    is optional; an implementation that\n   does not support fragmentation MUST drop
    any datagram whose FRAG\n   field is other than X'00'.\n   The programming interface
    for a SOCKS-aware UDP MUST report an\n   available buffer space for UDP datagrams
    that is smaller than the\n   actual space provided by the operating system:\n
    \         o  if ATYP is X'01' - 10+method_dependent octets smaller\n          o
    \ if ATYP is X'03' - 262+method_dependent octets smaller\n          o  if ATYP
    is X'04' - 20+method_dependent octets smaller\n"
  title: 7.  Procedure for UDP-based clients
- contents:
  - "8.  Security Considerations\n   This document describes a protocol for the application-layer\n
    \  traversal of IP network firewalls.  The security of such traversal is\n   highly
    dependent on the particular authentication and encapsulation\n   methods provided
    in a particular implementation, and selected during\n   negotiation between SOCKS
    client and SOCKS server.\n   Careful consideration should be given by the administrator
    to the\n   selection of authentication methods.\n"
  title: 8.  Security Considerations
- contents:
  - "9.  References\n   [1] Koblas, D., \"SOCKS\", Proceedings: 1992 Usenix Security
    Symposium.\n"
  title: 9.  References
- contents:
  - "Author's Address\n       Marcus Leech\n       Bell-Northern Research Ltd\n       P.O.
    Box 3511, Stn. C,\n       Ottawa, ON\n       CANADA K1Y 4H7\n       Phone: (613)
    763-9145\n       EMail: mleech@bnr.ca\n"
  title: Author's Address
