- title: __initial_text__
  contents:
  - '           Location-to-URL Mapping Architecture and Framework

    '
- title: Abstract
  contents:
  - 'Abstract

    '
- title: This document describes an architecture for a global, scalable,
  contents:
  - 'This document describes an architecture for a global, scalable,

    '
- title: resilient, and administratively distributed system for mapping
  contents:
  - 'resilient, and administratively distributed system for mapping

    '
- title: geographic location information to URLs, using the Location-to-Service
  contents:
  - 'geographic location information to URLs, using the Location-to-Service

    '
- title: Translation (LoST) protocol.  The architecture generalizes well-known
  contents:
  - 'Translation (LoST) protocol.  The architecture generalizes well-known

    '
- title: approaches found in hierarchical lookup systems such as DNS.
  contents:
  - 'approaches found in hierarchical lookup systems such as DNS.

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\
    \ in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n\
    \   Please review these documents carefully, as they describe your rights\n  \
    \ and restrictions with respect to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   3.  Definitions  . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  3\n   4.  Overview of Architecture . . . . . . . . . . . . . . . .\
    \ . . .  4\n     4.1.  The Principal Components . . . . . . . . . . . . . . .\
    \ . .  4\n     4.2.  Minimal System Architecture  . . . . . . . . . . . . . .\
    \ .  6\n   5.  Seeker . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \  6\n   6.  Resolver . . . . . . . . . . . . . . . . . . . . . . . . . . .  7\n\
    \   7.  Trees: Maintaining Authoritative Knowledge . . . . . . . . . .  8\n  \
    \   7.1.  Basic Operation  . . . . . . . . . . . . . . . . . . . . .  8\n    \
    \ 7.2.  Answering Queries  . . . . . . . . . . . . . . . . . . . . 10\n     7.3.\
    \  Overlapping Coverage Regions . . . . . . . . . . . . . . . 11\n     7.4.  Scaling\
    \ and Reliability  . . . . . . . . . . . . . . . . . 11\n   8.  Forest Guides\
    \  . . . . . . . . . . . . . . . . . . . . . . . . 11\n   9.  Configuring Service\
    \ Numbers  . . . . . . . . . . . . . . . . . 13\n   10. Security Considerations\
    \  . . . . . . . . . . . . . . . . . . . 14\n   11. Acknowledgments  . . . . .\
    \ . . . . . . . . . . . . . . . . . . 15\n   12. References . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . 15\n     12.1. Normative References . . .\
    \ . . . . . . . . . . . . . . . . 15\n     12.2. Informative References . . .\
    \ . . . . . . . . . . . . . . . 16\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   It is often desirable to allow users to access a service\
    \ that\n   provides a common function but that is actually offered by a variety\n\
    \   of local service providers.  In many of these cases, the service\n   provider\
    \ chosen depends on the location of the person wishing to\n   access that service.\
    \  Among the best-known public services of this\n   kind is emergency calling,\
    \ where emergency calls are routed to the\n   most appropriate public safety answering\
    \ point (PSAP) based on the\n   caller's physical location.  Other services, from\
    \ food delivery to\n   directory services and roadside assistance, also follow\
    \ this general\n   pattern.  This is a mapping problem [RFC5012], where a geographic\n\
    \   location and a service identifier [RFC5031] is translated into a set\n   of\
    \ URIs, the service URIs, that allow the Internet system to contact\n   an appropriate\
    \ network entity that provides the service.\n   The caller does not need to know\
    \ from where the service is being\n   provided, and the location of the service\
    \ provider may change over\n   time, e.g., to deal with temporary overloads, failures\
    \ in the primary\n   service provider location, or long-term changes in system\n\
    \   architecture.  For emergency services, this problem is described in\n   more\
    \ detail in [ECRIT-FRAME].\n   The overall emergency calling architecture [ECRIT-FRAME]\
    \ separates\n   mapping from placing calls or otherwise invoking the service,\
    \ so the\n   same mechanism can be used to verify that a mapping exists (\"address\n\
    \   validation\") or to obtain test service URIs.\n   Mapping locations to URIs\
    \ that describe services requires a\n   distributed, scalable, and highly resilient\
    \ infrastructure.\n   Authoritative knowledge about such mappings is distributed\
    \ among a\n   large number of autonomous entities that may have no direct knowledge\n\
    \   of each other.  In this document, we describe an architecture for\n   such\
    \ a global service.  It allows significant freedom to combine and\n   split functionality\
    \ among actual servers and imposes few requirements\n   as to who should operate\
    \ particular services.\n   Besides determining the service URI, end systems also\
    \ need to\n   determine the local service numbers.  As discussed in Section 9,\
    \ the\n   architecture described here can also address that problem.\n   The architecture\
    \ described here uses the Location-to-Service\n   Translation (LoST) [RFC5222]\
    \ protocol, although much of the\n   discussion would also apply for other mapping\
    \ protocols satisfying\n   the mapping requirements [RFC5012].\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [RFC2119] and\n   indicate requirement levels for compliant implementations.\n"
- title: 3.  Definitions
  contents:
  - "3.  Definitions\n   In addition to the terms defined in [RFC5012], this document\
    \ uses the\n   following terms to describe LoST clients and servers:\n   authoritative\
    \ mapping server (AMS):  An authoritative mapping server\n      (AMS) is a LoST\
    \ server that can provide the authoritative answer\n      to a particular set\
    \ of queries, e.g., covering a set of Presence\n      Information Data Information\
    \ Location Object (PIDF-LO) civic\n      labels or a particular region described\
    \ by a geometric shape.  In\n      some (rare) cases of territorial disputes,\
    \ two resolvers may be\n      authoritative for the same region.  An AMS may redirect\
    \ or forward\n      a query to another AMS within the tree.\n   child:  A child\
    \ is an AMS that is authoritative for a subregion of\n      another AMS.  A child\
    \ can in turn be parent for another AMS.\n   (tree node) cluster:  A node cluster\
    \ is a group of LoST servers that\n      all share the same mapping information\
    \ and return the same results\n      for queries.  Clusters provide redundancy\
    \ and share query load.\n      Clusters are fully-meshed, i.e., they all exchange\
    \ updates with\n      each other.\n   coverage region:  The coverage region of\
    \ an AMS is the geographic\n      region within which the AMS is able to authoritatively\
    \ answer\n      mapping queries.  Coverage regions are generally, but not\n  \
    \    necessarily, contiguous and may be represented as either a subset\n     \
    \ of a civic address or a geometric object.\n   forest guide (FG):  A forest guide\
    \ (FG) has knowledge of the coverage\n      region of trees for a particular top-level\
    \ service.\n   mapping:  A mapping is a short-hand for 'mapping from a location\n\
    \      object to either another mapping server or the desired service\n      URLs'.\n\
    \   parent:  A mapping server that covers the region of all of its\n      children.\
    \  A mapping server without a parent is a root AMS.\n   resolver:  A resolver\
    \ is contacted by a seeker, consults a forest\n      mapping server, and then\
    \ resolves the query using an appropriate\n      tree.  Resolvers may cache query\
    \ results.\n   seeker:  A seeker is a LoST client requesting a mapping.  A seeker\n\
    \      does not provide mapping services to others but may cache results\n   \
    \   for its own use.\n   tree:  A tree consists of a self-contained hierarchy\
    \ of authoritative\n      mapping servers for a particular service.  Each tree\
    \ exports its\n      coverage region to the forest mapping servers.\n"
- title: 4.  Overview of Architecture
  contents:
  - '4.  Overview of Architecture

    '
- title: 4.1.  The Principal Components
  contents:
  - "4.1.  The Principal Components\n   The mapping architecture distinguishes four\
    \ logical roles: seekers,\n   resolvers, authoritative mapping servers (AMS),\
    \ and forest guides\n   (FGs).  End users of the LoST-based [RFC5222] mapping\
    \ mechanism,\n   called seekers, contact resolvers that cache query results and\
    \ know\n   one or more forest guides.  Forest guides form the top level of a\n\
    \   conceptual hierarchy, with one or more trees providing a hierarchical\n  \
    \ resolution service for different geographic regions.  Forest guides\n   know\
    \ the geographic coverage region of all or almost all trees and\n   direct queries\
    \ to the node at the top of the appropriate tree.  Trees\n   consist of authoritative\
    \ mapping servers and maintain the\n   authoritative mapping information.\n  \
    \ Seekers, resolvers, authoritative mapping servers, and forest guides\n   all\
    \ communicate using LoST; indeed, it is likely that, in many cases,\n   the same\
    \ software can operate as a resolver, authoritative mapping\n   server, and forest\
    \ guide.  In addition to the basic LoST query\n   protocol [RFC5222], a synchronization\
    \ protocol [LOST-SYNC] may be\n   used to exchange information between forest\
    \ guides or to push\n   coverage information from a tree node to its parent.\n\
    \   Seekers may be part of Voice over IP (VoIP) or other end systems, or\n   of\
    \ SIP proxies or similar call routing functions.\n   Figure 1 shows the interaction\
    \ of the components.  The lines\n   indicating the connection between the forest\
    \ guides are logical\n   connections, indicating that they are synchronizing their\
    \ information\n   via the synchronization protocol [LOST-SYNC].\n          /-\\\
    \        /-\\        +-----+                 +-----+\n         | S +******* R\
    \ *********  FG *-----------------+  FG |\n          \\-/        \\-/        |\
    \     |*                |     |\n                                +--+--+  *  \
    \            +--+--+\n                                   |      *            \
    \    |\n                                   |       *               |\n       \
    \                            |        *              |\n                     \
    \              |        *              |\n                     /-\\        +--+--+\
    \     *           +--+--+\n                    | R +------>+  FG +-----*-----------+\
    \  FG |\n                     \\-/        |     |     *           |     |\n  \
    \                              +--+--+    *            +--+--+\n             \
    \                      |      *                |\n                           \
    \        |     *                 |\n                                   |    *\
    \                  |\n                                   |***                \
    \    ^\n                                  / \\                     / \\\n    \
    \                             /   \\                   /   \\\n              \
    \                  /     \\                 /     \\\n                       \
    \        /       \\               /       \\\n                              -----------\
    \             -----------\n                                tree              \
    \       tree\n   Architecture diagram, showing seekers (S), resolvers (R), forest\n\
    \   guides (FG), and trees.  The star (*) line indicates the flow of the\n   query\
    \ and responses in recursive mode, while the lines indicate\n   synchronization\
    \ relationships.\n                                 Figure 1\n   The mapping function\
    \ for the world is divided among trees.  The\n   collection of trees may not cover\
    \ the whole world, and trees are\n   added and removed as the organization of\
    \ mapping data changes.  We\n   call the collection of trees a forest.  There\
    \ is no limit on the\n   number of trees within the forest, but the author guesses\
    \ that the\n   number of trees will likely be somewhere between a few hundred\
    \ and a\n   few thousand.  The lower estimate would apply if each country\n  \
    \ operates one tree, the higher if different governmental or private\n   organizations\
    \ within a country operate independent trees.  We assume\n   that tree coverage\
    \ information changes relatively slowly, on the\n   order of less than one change\
    \ per year per tree, although the system\n   imposes no specific threshold.  Tree\
    \ coverage would change, for\n   example, if a country is split or merged or if\
    \ two trees for\n   different regions become part of a larger tree.  (On the other\
    \ hand,\n   information within a tree is likely to change much more frequently.)\n"
- title: 4.2.  Minimal System Architecture
  contents:
  - "4.2.  Minimal System Architecture\n   It is possible to build a functioning system\
    \ consisting only of\n   seekers and resolvers if these resolvers have other means\
    \ of\n   obtaining mapping data.  For example, a company acting as a mapping\n\
    \   service provider could collect mapping records manually and make them\n  \
    \ available to their customers through the resolver.  While feasible as\n   a\
    \ starting point, such an architecture is unlikely to scale globally.\n   Among\
    \ other problems, it becomes very hard for providers of\n   authoritative data\
    \ to ensure that all such providers have up-to-date\n   information.  If new trees\
    \ are set up, they would somehow make\n   themselves known to these providers.\
    \  Such a mechanism would be\n   similar to the old \"hosts.txt\" mechanism for\
    \ distributing host\n   information in the early Internet before DNS was developed.\n\
    \   Below, we describe the operation of each component in more detail.\n"
- title: 5.  Seeker
  contents:
  - "5.  Seeker\n   Clients desiring location-to-service mappings are known as seekers.\n\
    \   Seekers are consumers of mapping data and originate LoST queries as\n   LoST\
    \ protocol clients.  Seekers do not answer LoST queries.  They\n   contact either\
    \ forest guides or resolvers to find the appropriate\n   tree that can authoritatively\
    \ answer their questions.  Seekers can be\n   end systems such as SIP user agents,\
    \ or call routing entities such as\n   SIP proxy servers.\n   Seekers may need\
    \ to obtain mapping information in several steps,\n   i.e., they may obtain pointers\
    \ to intermediate servers that lead them\n   closer to the final mapping.  Seekers\
    \ MAY cache query results for\n   later use but otherwise have no obligations\
    \ to other entities in the\n   system.\n   Seekers need to be able to identify\
    \ appropriate resolvers.  The\n   mechanism for providing seekers with that information\
    \ is likely to\n   differ depending on who operates the resolvers.  For example,\
    \ if the\n   voice service provider operates the resolver, it might include the\n\
    \   location of the resolver in the SIP configuration information it\n   distributes\
    \ to its user agents.  An Internet access provider or\n   enterprise can provide\
    \ a pointer to a resolver via DHCP [RFC5223].\n   In an ad hoc or zero-configuration\
    \ environment, appropriate service\n   directories may advertise resolvers.\n\
    \   Like other entities in the system, seekers can cache responses.  This\n  \
    \ is particularly useful if the response describes the result for a\n   civic\
    \ or geospatial region, rather than just a point.  For example,\n   for mobile\
    \ nodes, seekers would only have to update their resolution\n   results when they\
    \ leave the coverage area of a service provider, such\n   as a PSAP for emergency\
    \ services, and can avoid repeatedly polling\n   for this information whenever\
    \ the location information changes\n   slightly.  (Mobile nodes would also need\
    \ a location update mechanism\n   that is either local or triggered when they\
    \ leave the current service\n   area.)  This will likely be of particular benefit\
    \ for seekers\n   representing a large user population, such as the outbound proxy\
    \ in a\n   corporate network.  For example, rather than having to query\n   separately\
    \ for each cubicle, information provided by the\n   authoritative node may indicate\
    \ that the whole campus is covered by\n   the same service provider.\n   Given\
    \ this caching mechanism and cache lifetimes of several days,\n   most mobile\
    \ users traveling to and from work would only need to\n   obtain service area\
    \ information along their commute route once during\n   each cache lifetime.\n"
- title: 6.  Resolver
  contents:
  - "6.  Resolver\n   A seeker can contact a forest guide (see below) directly, but\
    \ may not\n   be able to easily locate such a guide.  In addition, seekers in\
    \ the\n   same geographic area may already have asked the same question.  Thus,\n\
    \   it makes sense to introduce another entity, known as a resolver in\n   the\
    \ architecture, that knows how to contact one or more forest guides\n   and that\
    \ caches earlier queries to accelerate the response to mapping\n   queries and\
    \ to improve the resiliency of the system.  Each resolver\n   can decide autonomously\
    \ which FGs to use, with possibly different\n   choices for each top-level service.\n\
    \   ISPs or Voice Service Providers (VSPs) may include the address of a\n   suitable\
    \ resolver in their configuration information, e.g., in SIP\n   configuration\
    \ for a VSP or DHCP [RFC5223] for an ISP.  Resolvers are\n   manually configured\
    \ with the name of one or more forest guides.\n"
- title: '7.  Trees: Maintaining Authoritative Knowledge'
  contents:
  - '7.  Trees: Maintaining Authoritative Knowledge

    '
- title: 7.1.  Basic Operation
  contents:
  - "7.1.  Basic Operation\n   The architecture assumes that authoritative knowledge\
    \ about the\n   mapping data is distributed among many independent administrative\n\
    \   entities, but clients (seekers) may potentially need to find out\n   mapping\
    \ information for any spot on earth.  (Extensions to extra-\n   terrestrial applications\
    \ are left for future exploration.)\n   Information is organized hierarchically,\
    \ in a tree, with tree nodes\n   representing larger geographic areas pointing\
    \ to several child nodes,\n   each representing a smaller area.  Each tree node\
    \ can be a cluster of\n   LoST servers that all contain the same information and\
    \ back up each\n   other.\n   Each tree can map a location described by either\
    \ civic or geographic\n   coordinates, but not both, for one type of service (such\
    \ as\n   'sos.police', 'sos.fire' or 'counseling') and one location profile,\n\
    \   although nothing prevents re-using the same servers for multiple,\n   different\
    \ services or both types of coordinates.  The collection of\n   all trees for\
    \ one service and location profile is known as a forest.\n   Each tree root announces\
    \ its coverage region to one or more forest\n   guides.\n   Each tree node cluster\
    \ knows the coverage region of its children and\n   sends queries to the appropriate\
    \ server \"down\" the tree.  Each such\n   tree node knows authoritatively about\
    \ the service mappings for a\n   particular region, typically, but not necessarily,\
    \ contiguous.  The\n   region can be described by any of the shapes in the LoST\n\
    \   specification expressed in geospatial coordinates, such as circles or\n  \
    \ polygons, or a set of civic address descriptors (e.g., \"country = DE,\n   A1\
    \ = Bavaria\").  These coverage regions may be aligned with political\n   boundaries,\
    \ but that is not required.  In most cases, to avoid\n   confusion, only one cluster\
    \ is responsible for a particular\n   geographic or civic location, but the system\
    \ can also deal with cases\n   where coverage regions overlap.\n   There are no\
    \ assumptions about the coverage region of a tree as a\n   whole.  For example,\
    \ a tree could cover a single city, a state/\n   province, or a whole country.\
    \  Nodes within a tree need to loosely\n   coordinate their operation, but they\
    \ do not need to be operated by\n   the same administrator.\n   The tree architecture\
    \ is roughly similar to the domain name system\n   (DNS), except that delegation\
    \ is not by label but rather by region.\n   (Naturally, DNS does not have the\
    \ notion of forest guides.)  One can\n   also draw analogies to the Lightweight\
    \ Directory Access Protocol\n   (LDAP) when deployed in a distributed fashion.\n\
    \   Tree nodes maintain two types of information -- namely, coverage\n   regions\
    \ and mappings.  Coverage regions describe the region served by\n   a child node\
    \ in the tree and point to a child node for further\n   resolution.  Mappings\
    \ contain an actual service URI leading to a\n   service provider or another signaling\
    \ server representing a group of\n   service providers, which in turn might further\
    \ route signaling\n   requests to more servers covering smaller regions.\n   Leaf\
    \ nodes, i.e., nodes without children, only maintain mappings,\n   while tree\
    \ nodes above the leaf nodes only maintain coverage regions.\n   An example for\
    \ emergency services of a leaf node entry is shown\n   below, indicating how queries\
    \ for three towns are directed to\n   different PSAPs.  Queries for Englewood\
    \ are directed to another LoST\n   server instead.\n   country   A1 A2       \
    \  A3        resource or LoST server\n   US        NJ Bergen     Leonia    sip:psap@leonianj.gov\n\
    \   US        NJ Bergen     Fort Lee  sip:emergency@fortleenj.org\n   US     \
    \   NJ Bergen     Teaneck   sip:police@teanecknjgov.org\n   US        NJ Bergen\
    \     Englewood englewoodnj.gov\n   ....\n   Coverage regions are described by\
    \ sets of LoST-compatible shapes\n   enclosing contiguous geographic areas or\
    \ by descriptors enumerating\n   groups of civic locations.  For the former, the\
    \ LoST server performs\n   the same matching operation as described in Section\
    \ 12.2 of the LoST\n   specification [RFC5222] to find the tree or AMS.\n   As\
    \ a civic location example, a state-level tree node for New Jersey\n   in the\
    \ United States may contain the coverage region entries shown\n   below, indicating\
    \ that any query matching a location in Bergen\n   County, for example, would\
    \ be redirected or forwarded to the node\n   located at bergen.nj.example.org.\n\
    \   There is no requirement that all child nodes cover the same level\n   within\
    \ the civic hierarchy.  As an example, in the table below, the\n   city of Newark\
    \ has decided to be listed directly within the state\n   node, rather than through\
    \ the county.  Longest-match rules allow\n   partial coverage so that queries\
    \ for all other towns within Essex\n   county would be directed to the county\
    \ node for further resolution.\n   C  A1 A2         A3     LoST server name\n\
    \   US NJ Atlantic   *      atlantic.nj.example.org/sos\n   US NJ Bergen     *\
    \      bergen.nj.example.org/sos\n   US NJ Monmouth   *      monmouth.nj.example.org/sos\n\
    \   US NJ Essex      *      essex.nj.example.org/sos\n   US NJ Essex      Newark\
    \ newark.example.com/sos\n   ....\n   Thus, there is no substantial difference\
    \ between coverage region and\n   mapping data.  The only difference is that coverage\
    \ regions return\n   names of LoST servers, while mapping entries contain service\
    \ URLs.\n   Mapping entries may be specific down to the house- or floor-level\
    \ or\n   may only contain street-level information.  For example, in the\n   United\
    \ States, civic mapping data for emergency services is generally\n   limited to\
    \ address ranges (\"MSAG data\"), so initial mapping databases\n   may only contain\
    \ street-level information.\n   To automate the maintenance of trees, the LoST\
    \ synchronization\n   mechanism [LOST-SYNC] allows nodes to query other nodes\
    \ for mapping\n   data and coverage regions, both within a cluster and across\
    \ different\n   hierarchy levels in a tree.  In the example above, the state-run\
    \ node\n   would query the county nodes and use the records returned to\n   distribute\
    \ incoming LoST queries to the county nodes.  Conversely,\n   nodes could also\
    \ contact their parent nodes to tell them about their\n   coverage region.  There\
    \ is some benefit of child nodes contacting\n   their parents, as this allows\
    \ changes in coverage regions to\n   propagate quickly up the tree.\n"
- title: 7.2.  Answering Queries
  contents:
  - "7.2.  Answering Queries\n   Within a tree, the basic operation is straightforward.\
    \  A query\n   reaches the root of the tree.  That node determines which coverage\n\
    \   region matches that request and forwards the request to the server\n   indicated\
    \ in the coverage region record, returning a response to the\n   querier when\
    \ it in turn receives an answer (recursion).\n   Alternatively, the node returns\
    \ the application unique string (server\n   name) of that child node to the querier\
    \ (iteration).  This process\n   applies to each node, i.e., a node does not need\
    \ to know whether the\n   original query came from a parent node, a seeker, a\
    \ forest guide, or\n   a resolver.\n   For efficiency, a node MAY return region\
    \ information instead of a\n   point answer.  Thus, instead of returning that\
    \ a particular\n   geospatial coordinate maps to a service URL or server name,\
    \ it MAY\n   return a polygon indicating the region for which this answer would\
    \ be\n   returned, along with expiration time (time-to-live) information.  The\n\
    \   querying node can then cache this information for future use.\n   For civic\
    \ coordinates, trees may not include individual mapping\n   records for each floor,\
    \ house number, or street.  To avoid giving the\n   wrong indication that a particular\
    \ location has been found valid,\n   LoST can indicate which parts of the location\
    \ information have\n   actually been used to look up a mapping.\n"
- title: 7.3.  Overlapping Coverage Regions
  contents:
  - "7.3.  Overlapping Coverage Regions\n   In some cases, coverage regions may overlap,\
    \ either because there is\n   a dispute as to who handles a particular geographic\
    \ region or, more\n   likely, because the resolution of the coverage map may not\
    \ be\n   sufficiently high.  For example, a node may \"shave some corners\" off\n\
    \   its polygon so that its coverage region appears to overlap with its\n   geographic\
    \ neighbor.  For civic coordinates, houses on the same\n   street may be served\
    \ by different PSAPs.  The mapping mechanism needs\n   to work even if a coverage\
    \ map is imprecise or if there are disputes\n   about coverage.\n   The solution\
    \ for overlapping coverage regions is relatively simple.\n   If a query matches\
    \ multiple coverage regions, the node returns all\n   URLs or server names, in\
    \ redirection mode, or queries both children,\n   if in recursive mode.  If the\
    \ overlapping coverage is caused by\n   imprecise coverage maps, only one will\
    \ return a result and the others\n   will return an error indication.  If the\
    \ particular location is\n   disputed territory, the response will contain all\
    \ answers, leaving it\n   to the querier to choose the preferred solution or try\
    \ to contact all\n   services in turn.\n"
- title: 7.4.  Scaling and Reliability
  contents:
  - "7.4.  Scaling and Reliability\n   Since they provide authoritative information,\
    \ tree nodes need to be\n   highly reliable.  Thus, while this document refers\
    \ to tree nodes as\n   logical entities within the tree, an actual implementation\
    \ would\n   likely replicate node information across several servers, forming\
    \ a\n   cluster.  Each such node would have the same information.  Standard\n\
    \   techniques such as DNS SRV records can be used to select one of the\n   servers.\
    \  Replication within the cluster can use any suitable\n   protocol mechanism,\
    \ but a standardized, incremental update mechanism\n   makes it easier to spread\
    \ those nodes across multiple independently\n   administered locations.  The techniques\
    \ developed for the meshed\n   Service Location Protocol (SLP) [RFC3528] are applicable\
    \ here.\n"
- title: 8.  Forest Guides
  contents:
  - "8.  Forest Guides\n   Unfortunately, just having trees covering various regions\
    \ of the\n   world is not sufficient, as a client of the mapping protocol would\n\
    \   not generally be able to keep track of all the trees in the forest.\n   To\
    \ facilitate orientation among the trees, we introduce a forest\n   guide (FG),\
    \ which keeps track of the coverage regions of all the\n   trees for one service\
    \ and location profile.  For scalability and\n   reliability, there will need\
    \ to be a large number of forest guides,\n   all providing the same information.\
    \  A seeker can contact a suitable\n   forest guide and will then be directed\
    \ to the right tree or, rarely,\n   set of trees.  Forest guides do not provide\
    \ mapping information\n   themselves, but rather redirect to mapping servers.\
    \  In some\n   configurations, not all forest guides may provide the same\n  \
    \ information, due to policy reasons.\n   Forest guides fulfill a similar role\
    \ to root servers in DNS.  They\n   distribute information, signed for authenticity,\
    \ offered by trees.\n   However, introducing forest guides avoids creating a global\
    \ root,\n   with the attendant management and control issues.\n   However, unlike\
    \ DNS root servers, forest guides may offer different\n   information based on\
    \ local policy.  Forest guides can also restrict\n   their data synchronization\
    \ to parts of the information.  For example,\n   if country C does not recognize\
    \ country T, C can propagate tree\n   regions for all but T.\n   For authenticity,\
    \ the coverage regions SHOULD be digitally signed by\n   the authorities responsible\
    \ for the region, as discussed in more\n   detail in Section 10.  They are used\
    \ by resolvers and possibly\n   seekers to find the appropriate tree for a particular\
    \ area.  All\n   forest guides should have consistent information, i.e., a collection\n\
    \   of all the coverage regions of all the trees.  A tree node at the top\n  \
    \ of a tree can contact any forest guide and inject new coverage region\n   information\
    \ into the system.  One would expect that each tree\n   announces its coverage\
    \ to more than one forest guide.  Each forest\n   guide peers with one or more\
    \ other guides and distributes new\n   coverage region announcements to other\
    \ guides.  Due to policy and\n   maybe political reasons, not all forest guides\
    \ may share the same\n   coverage region data.\n   Forest guides can, in principle,\
    \ be operated by anybody, including\n   voice service providers, Internet access\
    \ providers, dedicated\n   services providers, and enterprises.\n   As in routing,\
    \ peering with other forest guides implies a certain\n   amount of trust in the\
    \ peer.  Thus, peering is likely to require some\n   negotiation between the administering\
    \ parties concerned, rather than\n   automatic configuration.  The mechanism itself\
    \ does not imply a\n   particular policy as to who gets to advertise a particular\
    \ coverage\n   region.\n"
- title: 9.  Configuring Service Numbers
  contents:
  - "9.  Configuring Service Numbers\n   The section below is not directly related\
    \ to the problem of\n   determining service location but is an instance of the\
    \ more generic\n   problem solved by this architecture -- namely, mapping location\n\
    \   information to service-related parameters, such as service numbers.\n   For\
    \ the foreseeable future, some user devices and software will\n   emulate the\
    \ user interface of a telephone, i.e., the only way to\n   enter call address\
    \ information is via a 12-button keypad with digits\n   and the asterisk and hash\
    \ symbols.  These devices use service numbers\n   to identify services.  The best-known\
    \ examples of service numbers are\n   emergency numbers, such as 9-1-1 in North\
    \ America and 1-1-2 in\n   Europe.  However, many other public and private service\
    \ numbers have\n   been defined, ranging in the United States from 3-1-1 for non-\n\
    \   emergency local government services to 4-1-1 for directory\n   assistance,\
    \ to various \"800\" numbers for anything from roadside\n   assistance to legal\
    \ services to home-delivery food.\n   Such service numbers are likely to be used\
    \ until essentially all\n   communication devices feature IP connectivity and\
    \ an alphanumeric\n   keyboard.  Unfortunately, for emergency services, more than\
    \ 60\n   emergency numbers are in use throughout the world, with many of those\n\
    \   numbers serving non-emergency purposes elsewhere, e.g., identifying\n   repair\
    \ or directory services.  Countries also occasionally change\n   their emergency\
    \ numbers to conform to regional agreements.  An\n   example is the introduction\
    \ of \"1-1-2\" for countries in Europe.\n   Thus, a system that allows devices\
    \ to be used internationally to\n   place calls needs to allow devices to discover\
    \ service numbers\n   automatically.  In the Internet-based system proposed in\n\
    \   [ECRIT-FRAME], these numbers are strictly used as a human-user\n   interface\
    \ mechanism and are generally not visible in call signaling\n   messages, which\
    \ carry the service URN [RFC5031] instead.\n   For the best user experience, systems\
    \ should be able to discover two\n   sets of service numbers -- namely, those\
    \ used in the user's home\n   country and those used in the country the user is\
    \ currently visiting.\n   The user is most likely to remember the former, but\
    \ a companion\n   borrowing a device in an emergency, say, may only know the local\n\
    \   emergency numbers.\n   Determining home and local service numbers is a configuration\n\
    \   problem, but unfortunately, existing configuration mechanisms are\n   ill-suited\
    \ for this purpose.  For example, a DHCP server might be\n   able to provide the\
    \ local service numbers but not the home numbers.\n   When virtual private networks\
    \ (VPNs) are used, even DHCP may provide\n   numbers of uncertain origin, as a\
    \ user may contact the home network\n   or some local branch office of the corporate\
    \ network.  Similarly, SIP\n   configuration [CONFIG-FRAME] would be able to provide\
    \ the numbers\n   valid at the location of the SIP service provider, but even\
    \ a SIP\n   service provider with a national footprint may serve customers that\n\
    \   are visiting any number of other countries.\n   Also, while initially there\
    \ are likely to be only a few service\n   numbers, e.g., for emergency services,\
    \ the LoST architecture can be\n   used to support other services, as noted. \
    \ Configuring every local\n   DHCP or SIP configuration server with that information\
    \ is likely to\n   be error-prone and tedious.\n   For these reasons, the LoST-based\
    \ mapping architecture supports\n   providing service numbers to end systems based\
    \ on caller location.\n   The mapping operation is almost exactly the same as\
    \ for determining\n   the service URL.  The mapping can be obtained along with\
    \ the service\n   URL.  The major difference between the two requests is that\
    \ service\n   numbers often have much larger regions of validity than the service\n\
    \   URL itself.  Also, the service number is likely to be valid longer\n   than\
    \ the service URL.  Finally, an end system may want to look up the\n   service\
    \ number for its home location, not just its current (visited)\n   location.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   Security considerations for emergency services\
    \ mapping are discussed\n   in [RFC5069], while [RFC5031] discusses issues related\
    \ to the service\n   URN, one of the inputs into the mapping protocol.  LoST-related\n\
    \   security considerations are naturally discussed in the LoST\n   specification\
    \ [RFC5222].\n   The architecture addresses the following security issues, usually\n\
    \   through the underlying transport security associations:\n   server impersonation:\
    \  Seekers, resolvers, fellow tree guides, and\n      cluster members can assure\
    \ themselves of the identity of the\n      remote party by using the facilities\
    \ in the underlying channel\n      security mechanism, such as Transport Layer\
    \ Security (TLS)\n      [RFC5246].\n   query or query result corruption:  To avoid\
    \ the possibility of an\n      attacker modifying the query or its result, the\
    \ architecture\n      RECOMMENDS the use of channel security, such as TLS.  Results\n\
    \      SHOULD also be digitally signed, e.g., using XML digital\n      signatures\
    \ [W3C.REC-xmldsig-core-20020212].  Note, however, that\n      simple origin assertion\
    \ may not provide the end system with enough\n      useful information as it has\
    \ no good way of knowing that a\n      particular signer is authorized to represent\
    \ a particular\n      geographic area.  It might be necessary that certain well-known\n\
    \      Certificate Authorities (CAs) vet sources of mapping information\n    \
    \  and provide special certificates for that purpose.  In many cases,\n      a\
    \ seeker will have to trust its local resolver to vet information\n      for trustworthiness;\
    \ in turn, the resolver may rely on trusted\n      forest guides to steer it to\
    \ the correct information.\n   coverage region corruption:  To avoid the possibility\
    \ of a third\n      party or an untrustworthy member of a server population claiming\
    \ a\n      coverage region that it is not authorized for, any node\n      introducing\
    \ a new service boundary MUST sign the object by\n      protecting the data with\
    \ an XML digital signature\n      [W3C.REC-xmldsig-core-20020212].  A recipient\
    \ MUST verify, through\n      a local policy mechanism, that the signing entity\
    \ is indeed\n      authorized to speak for that region.  Determining who can speak\n\
    \      for a particular region is inherently difficult unless there is a\n   \
    \   small set of authorizing entities that participants in the mapping\n     \
    \ architecture can trust.  Receiving systems should be particularly\n      suspicious\
    \ if an existing coverage region is replaced with a new\n      one with a new\
    \ mapping address.  In many cases, trust will be\n      mediated: a seeker will\
    \ have a trust relationship with a resolver,\n      and the resolver, in turn,\
    \ will contact a trusted forest guide.\n   Additional threats that need to be\
    \ addressed by operational measures\n   include denial-of-service attacks [PHONE-BCP].\n"
- title: 11.  Acknowledgments
  contents:
  - "11.  Acknowledgments\n   Jari Arkko, Richard Barnes, Cullen Jennings, Jong Yul\
    \ Kim, Otmar\n   Lendl, Matt Lepinski, Chris Newman, Andrew Newton, Jon Peterson,\n\
    \   Schida Schubert, Murugaraj Shanmugam, Richard Stastny, Hannes\n   Tschofenig,\
    \ and Karl Heinz Wolf provided helpful comments.\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: 12.1.  Normative References
  contents:
  - "12.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC5031]  Schulzrinne, H., \"A Uniform Resource Name (URN) for\n\
    \              Emergency and Other Well-Known Services\", RFC 5031,\n        \
    \      January 2008.\n   [RFC5222]  Hardie, T., Newton, A., Schulzrinne, H., and\
    \ H.\n              Tschofenig, \"LoST: A Location-to-Service Translation\n  \
    \            Protocol\", RFC 5222, August 2008.\n   [RFC5223]  Schulzrinne, H.,\
    \ Polk, J., and H. Tschofenig, \"Discovering\n              Location-to-Service\
    \ Translation (LoST) Servers Using the\n              Dynamic Host Configuration\
    \ Protocol (DHCP)\", RFC 5223,\n              August 2008.\n"
- title: 12.2.  Informative References
  contents:
  - "12.2.  Informative References\n   [CONFIG-FRAME]\n              Channabasappa,\
    \ S., \"A Framework for Session Initiation\n              Protocol User Agent\
    \ Profile Delivery\", Work in Progress,\n              February 2008.\n   [ECRIT-FRAME]\n\
    \              Rosen, B., Schulzrinne, H., Polk, J., and A. Newton,\n        \
    \      \"Framework for Emergency Calling using Internet\n              Multimedia\"\
    , Work in Progress, March 2009.\n   [LOST-SYNC]\n              Schulzrinne, H.\
    \ and H. Tschofenig, \"Synchronizing\n              Location-to-Service Translation\
    \ (LoST) Protocol based\n              Service Boundaries and Mapping Elements\"\
    , Work\n              in Progress, March 2009.\n   [PHONE-BCP]\n             \
    \ Rosen, B. and J. Polk, \"Best Current Practice for\n              Communications\
    \ Services in support of Emergency Calling\",\n              Work in Progress,\
    \ March 2009.\n   [RFC3528]  Zhao, W., Schulzrinne, H., and E. Guttman, \"Mesh-enhanced\n\
    \              Service Location Protocol (mSLP)\", RFC 3528, April 2003.\n   [RFC5012]\
    \  Schulzrinne, H. and R. Marshall, \"Requirements for\n              Emergency\
    \ Context Resolution with Internet Technologies\",\n              RFC 5012, January\
    \ 2008.\n   [RFC5069]  Taylor, T., Tschofenig, H., Schulzrinne, H., and M.\n \
    \             Shanmugam, \"Security Threats and Requirements for\n           \
    \   Emergency Call Marking and Mapping\", RFC 5069,\n              January 2008.\n\
    \   [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n  \
    \            (TLS) Protocol Version 1.2\", RFC 5246, August 2008.\n   [W3C.REC-xmldsig-core-20020212]\n\
    \              Solo, D., Eastlake, D., and J. Reagle, \"XML-Signature\n      \
    \        Syntax and Processing\", World Wide Web Consortium\n              FirstEdition\
    \ REC-xmldsig-core-20020212, February 2002,\n              <http://www.w3.org/TR/2002/REC-xmldsig-core-20020212>.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Henning Schulzrinne\n   Columbia University\n   Department\
    \ of Computer Science\n   450 Computer Science Building\n   New York, NY  10027\n\
    \   US\n   Phone: +1 212 939 7004\n   EMail: hgs+ecrit@cs.columbia.edu\n   URI:\
    \   http://www.cs.columbia.edu\n"
