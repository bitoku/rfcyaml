- title: __initial_text__
  contents:
  - "                   An Out-of-Band Setup Protocol for\n     Resource Public Key\
    \ Infrastructure (RPKI) Production Services\n"
- title: Abstract
  contents:
  - "Abstract\n   This note describes a simple out-of-band protocol to ease setup\
    \ of\n   the Resource Public Key Infrastructure (RPKI) provisioning and\n   publication\
    \ protocols between two parties.  The protocol is encoded\n   in a small number\
    \ of XML messages, which can be passed back and forth\n   by any mutually agreeable\
    \ means which provides acceptable data\n   integrity and authentication.\n   This\
    \ setup protocol is not part of the provisioning or publication\n   protocol;\
    \ rather, it is intended to simplify configuration of these\n   protocols by setting\
    \ up relationships and exchanging keying material\n   used to authenticate those\
    \ relationships.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8183.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   3\n   3.  History . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   4\n   4.  Overview of the BPKI  . . . . . . . . . . . . . . . . . .\
    \ . .   4\n   5.  Protocol Elements . . . . . . . . . . . . . . . . . . . . .\
    \ .   6\n     5.1.  Common Protocol Elements  . . . . . . . . . . . . . . . .\
    \   6\n     5.2.  Protocol Messages . . . . . . . . . . . . . . . . . . . .  \
    \ 7\n       5.2.1.  <child_request/>  . . . . . . . . . . . . . . . . . .   7\n\
    \       5.2.2.  <parent_response/>  . . . . . . . . . . . . . . . . .   8\n  \
    \     5.2.3.  <publisher_request/>  . . . . . . . . . . . . . . . .  10\n    \
    \   5.2.4.  <repository_response/>  . . . . . . . . . . . . . . .  11\n     5.3.\
    \  <authorization/>  . . . . . . . . . . . . . . . . . . . .  12\n     5.4.  <error/>\
    \  . . . . . . . . . . . . . . . . . . . . . . . .  13\n   6.  Protocol Walk-Through\
    \ . . . . . . . . . . . . . . . . . . . .  14\n   7.  IANA Considerations . .\
    \ . . . . . . . . . . . . . . . . . . .  19\n   8.  Security Considerations .\
    \ . . . . . . . . . . . . . . . . . .  19\n   9.  References  . . . . . . . .\
    \ . . . . . . . . . . . . . . . . .  20\n     9.1.  Normative References  . .\
    \ . . . . . . . . . . . . . . . .  20\n     9.2.  Informative References  . .\
    \ . . . . . . . . . . . . . . .  21\n   Appendix A.  RELAX NG Schema  . . . .\
    \ . . . . . . . . . . . . . .  22\n   Acknowledgements  . . . . . . . . . . .\
    \ . . . . . . . . . . . . .  23\n   Author's Address  . . . . . . . . . . . .\
    \ . . . . . . . . . . . .  23\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This note describes a small XML-based out-of-band protocol\
    \ used to\n   set up relationships between parents and children in the RPKI\n\
    \   provisioning protocol [RFC6492] and between publishers and\n   repositories\
    \ in the RPKI publication protocol [RFC8181].\n   The basic function of this protocol\
    \ is public key exchange, in the\n   form of self-signed X.509 certificates, but\
    \ workshop experience has\n   demonstrated that it's simpler for the user if we\
    \ also bundle the\n   other configuration information needed to bring up a new\
    \ player into\n   the messages used in the key exchange.\n   The underlying transport\
    \ for this protocol is deliberately\n   unspecified.  It might be a USB stick,\
    \ a web interface secured with\n   conventional HTTPS, PGP-signed email, a T-shirt\
    \ printed with a Quick\n   Response (QR) code, or a carrier pigeon.\n   Since\
    \ much of the purpose of this protocol is key exchange,\n   authentication and\
    \ integrity of the key exchange MUST be ensured via\n   external means.  Typically,\
    \ such means will tie directly to a new or\n   existing business relationship.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\"\
    , \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described\
    \ in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n\
    \   capitals, as shown here.\n   All of the protocols configured by this setup\
    \ protocol have their own\n   terminology for their actors, but in the context\
    \ of this protocol\n   that terminology becomes somewhat confusing.  All of the\
    \ players in\n   this setup protocol issue certificates, are the subjects of other\n\
    \   certificates, operate servers, and, in most cases, act as clients for\n  \
    \ one protocol or another.  Therefore, this note uses its own terms for\n   the\
    \ actors in this protocol.\n   Child:  An entity acting in the client (\"subject\"\
    ) role of the\n      provisioning protocol defined in [RFC6492].\n   Parent: \
    \ An entity acting in the server (\"issuer\") role of the\n      provisioning\
    \ protocol defined in [RFC6492].\n   Publisher:  An entity acting in the client\
    \ role of the publication\n      protocol defined in [RFC8181].\n   Repository:\
    \  An entity acting in the server role of the publication\n      protocol defined\
    \ in [RFC8181].\n   Note that a given entity might act in more than one of these\
    \ roles;\n   for example, in one of the simplest cases, the child is the same\n\
    \   entity as the publisher, while the parent is the same entity as the\n   repository.\n"
- title: 3.  History
  contents:
  - "3.  History\n   The protocol described in this document grew out of a series\
    \ of\n   workshops held starting in 2010, at which it became clear that manual\n\
    \   configuration of keying material and service URLs was both error\n   prone\
    \ and unnecessarily confusing.  The basic mechanism and semantics\n   have been\
    \ essentially unchanged since the earliest versions of the\n   protocol, but there\
    \ were several workshop-driven syntax changes and\n   simplifications before the\
    \ protocol made its way into the IETF, and a\n   few more simplifications and\
    \ minor extensions have occurred since\n   that time.\n"
- title: 4.  Overview of the BPKI
  contents:
  - "4.  Overview of the BPKI\n   Several protocols related to RPKI provisioning use\
    \ signed\n   Cryptographic Message Syntax (CMS) messages [RFC5652] to authenticate\n\
    \   the underlying XML-based protocols.  Verification of these CMS\n   messages\
    \ requires X.509 certificates.  The PKI that holds these\n   certificates is distinct\
    \ from the RPKI and contains no RFC 3779\n   resources.  We refer to this as the\
    \ \"Business PKI\" (BPKI), to\n   distinguish it from the RPKI.  The \"B\" is\
    \ a hint that the certificate\n   relationships in the BPKI are likely to follow\
    \ and become part of\n   existing contractual relationships between the issuers\
    \ and subjects\n   of this PKI.\n   The RPKI provisioning protocol does not dictate\
    \ a particular\n   structure for the BPKI, beyond the basic requirement that it\
    \ be\n   possible for one party to sign and the other party to verify the CMS\n\
    \   messages.  This allows a certain amount of flexibility to allow an\n   Internet\
    \ registry to reuse an existing PKI as the BPKI if that makes\n   sense in their\
    \ context.\n   In order to keep this protocol simple, we adopt a somewhat\n  \
    \ constrained model of the BPKI.  The first two operations in this\n   protocol\
    \ are an exchange of public keys between child and parent for\n   use in the provisioning\
    \ protocol; the latter two operations in this\n   protocol are an exchange of\
    \ public keys between publisher and\n   repository for use in the publication\
    \ protocol.  In each of these\n   operations, the sending party includes its public\
    \ key, in the form of\n   a self-signed X.509 Certification Authority (CA) certificate.\
    \  The\n   private keys corresponding to the exchanged certificates are not used\n\
    \   to sign CMS messages directly; instead, the exchanged CA certificates\n  \
    \ are the issuers of the BPKI end-entity (EE) certificates which will\n   be included\
    \ in the CMS messages and can be used, along with the\n   exchanged certificates,\
    \ to verify the CMS messages.\n   Details of how to tie the exchanged certificates\
    \ into an\n   implementation's local BPKI are left to the implementation, but\
    \ the\n   recommended approach is to cross-certify the received public key and\n\
    \   subject name under one's own BPKI, using a Basic Constraints\n   extension\
    \ with cA = TRUE, pathLenConstraint = 0, indicating that the\n   cross-certified\
    \ certificate is a CA certificate which is allowed to\n   issue EE certificates\
    \ but is not allowed to issue CA certificates.\n   See Section 4.2.1.9 of [RFC5280]\
    \ for more information about the Basic\n   Constraints extension.\n   For example,\
    \ suppose that Alice and Bob each have their own self-\n   signed BPKI certificates:\n\
    \             Issuer:       CN = Alice CA\n             Subject:      CN = Alice\
    \ CA\n             Public Key:   [Alice CA Public Key]\n             BasicConstraints:\
    \ cA = TRUE\n             Issuer:       CN = Bob CA\n             Subject:   \
    \   CN = Bob CA\n             Public Key:   [Bob CA Public Key]\n            \
    \ BasicConstraints: cA = TRUE\n   Alice sends Bob her self-signed BPKI certificate,\
    \ and Bob cross\n   certifies its public key and subject name under Bob's own\
    \ self-signed\n   BPKI certificate:\n             Issuer:       CN = Bob CA\n\
    \             Subject:      CN = Alice CA\n             Public Key:   [Alice CA\
    \ Public Key]\n             BasicConstraints: cA = TRUE, pathLenConstraint = 0\n\
    \   Later, when Bob receives a CMS message from Alice, Bob can verify\n   this\
    \ message via a trust chain back to Bob's own trust anchor:\n             Issuer:\
    \       CN = Alice CA\n             Subject:      CN = Alice EE\n            \
    \ Public Key:   [Alice EE Public Key]\n   A complete description of the certificates\
    \ allowed here is beyond the\n   scope of this document, as it is determined primarily\
    \ by what is\n   acceptable to the several other protocols for which this protocol\
    \ is\n   handling setup.  Furthermore, we expect the requirements to change\n\
    \   over time to track changes in cryptographic algorithms, required key\n   length,\
    \ and so forth.  Finally, since this protocol is restricted to\n   setting up\
    \ pairwise relationships, all that's really required is that\n   the two parties\
    \ involved in a particular conversation agree on what\n   constitutes an acceptable\
    \ certificate.\n   All of that said, in practice, the certificates currently exchanged\n\
    \   by this protocol at the time this document was written are what a\n   reader\
    \ familiar with the technology would probably expect: RSA keys\n   with lengths\
    \ in the 2048-4096 bit range, SHA-2 digests, and a few\n   common X.509v3 extensions\
    \ (principally Basic Constraints, Authority\n   Key Identifier, and Subject Key\
    \ Identifier).  Since the most likely\n   usage is a cross-certification operation\
    \ in which the recipient\n   simply extracts the subject name and public key after\
    \ checking the\n   self-signature and discards the rest of the incoming certificate,\
    \ the\n   practical value of esoteric X.509v3 extensions is somewhat limited.\n"
- title: 5.  Protocol Elements
  contents:
  - "5.  Protocol Elements\n   Each message in the protocol is a distinct XML element\
    \ in the\n   <http://www.hactrn.net/uris/rpki/rpki-setup/> XML namespace.\n  \
    \ The outermost XML element of each message contains a version\n   attribute.\
    \  This document describes version 1 of the protocol.\n   Appendix A is a [RELAX-NG]\
    \ schema for this protocol.  The schema is\n   normative: in the event of a disagreement\
    \ between the schema and the\n   following textual description, the schema is\
    \ authoritative.\n   Since \"1\" is currently the only value allowed for the version\n\
    \   attribute in the schema, an incorrect protocol version can be\n   detected\
    \ either by checking the version attribute directly or as a\n   schema validation\
    \ error.\n"
- title: 5.1.  Common Protocol Elements
  contents:
  - "5.1.  Common Protocol Elements\n   Most messages contain, among other things,\
    \ a self-signed BPKI X.509\n   certificate.  These certificates are represented\
    \ as XML elements\n   whose text value is the Base64 text ([RFC4648], Section\
    \ 4, with line\n   breaks within the Base64 text permitted but not required) encoding\n\
    \   the DER representation of the X.509 certificate.\n   A number of attributes\
    \ contain \"handles\".  A handle in this protocol\n   is a text string in the\
    \ US-ASCII character set consisting of letters,\n   digits, and the special characters\
    \ \"/\", \"-\", and \"_\".  This protocol\n   places no special semantics on the\
    \ structure of these handles,\n   although implementations might.  Handles are\
    \ protocol elements, not\n   necessarily meaningful to humans, thus the simplicity\
    \ of a restricted\n   character set makes more sense than the complex rules which\
    \ would be\n   needed for internationalized text.\n   Most messages allow an optional\
    \ \"tag\" attribute.  This is an opaque\n   cookie supplied by the client in a\
    \ particular exchange and echoed by\n   the server; the intent is to simplify\
    \ the process of matching a\n   response received by the client with an outstanding\
    \ request.\n"
- title: 5.2.  Protocol Messages
  contents:
  - "5.2.  Protocol Messages\n   The core of this protocol consists of four message\
    \ types,\n   representing the basic request and response semantics needed to\n\
    \   configure an RPKI engine to talk to its parent and its repository via\n  \
    \ the provisioning and publication protocols, respectively.\n"
- title: 5.2.1.  <child_request/>
  contents:
  - "5.2.1.  <child_request/>\n   The <child_request/> message is an initial setup\
    \ request from a\n   provisioning protocol child to its provisioning protocol\
    \ parent.\n   Fields in the <child_request/> message:\n   version:  The version\
    \ attribute specifies the protocol version.  This\n      note describes protocol\
    \ version 1.\n   tag:  The child MAY include a \"tag\" attribute in the request\
    \ message.\n   child_handle:  The child_handle attribute is what the child calls\n\
    \      itself.  This is just a hint from the child to the parent, and the\n  \
    \    parent need not honor it.\n   child_bpki_ta:  The <child_bpki_ta/> element\
    \ is the child's BPKI\n      identity, a self-signed X.509 BPKI certificate, encoded\
    \ in Base64.\n      This CA certificate will be the issuer of the BPKI EE certificates\n\
    \      corresponding to private keys that the child will use when sending\n  \
    \    provisioning protocol messages to the parent.\n   ---------------------------------------------------------------------\n\
    \   <child_request\n       xmlns=\"http://www.hactrn.net/uris/rpki/rpki-setup/\"\
    \n       version=\"1\"\n       child_handle=\"Bob\">\n     <child_bpki_ta>\n \
    \      R29kIGlzIHJlYWwgdW5sZXNzIGRlY2xhcmVkIGludGVnZXI=\n     </child_bpki_ta>\n\
    \   </child_request>\n   ---------------------------------------------------------------------\n"
- title: 5.2.2.  <parent_response/>
  contents:
  - "5.2.2.  <parent_response/>\n   The <parent_response/> message is a response from\
    \ a provisioning\n   protocol parent to a provisioning protocol child that had\
    \ previously\n   sent a <child_request/> message.\n   Fields in the <parent_response/>\
    \ message:\n   version:  The version attribute specifies the protocol version.\
    \  This\n      note describes protocol version 1.\n   tag:  If the <child_request/>\
    \ message included a \"tag\" attribute, the\n      parent MUST include an identical\
    \ \"tag\" attribute in the\n      <parent_response/> message; if the request did\
    \ not include a tag\n      attribute, the response MUST NOT include a tag attribute\
    \ either.\n   service_uri:  The service_uri attribute contains an HTTP or HTTPS\
    \ URL\n      [RFC7230] that the child should contact for up-down [RFC6492]\n \
    \     service.\n   child_handle:  The child_handle attribute is the parent's name\
    \ for\n      the child.  This MAY match the child_handle from the\n      <child_request/>\
    \ message.  If they do not match, the parent wins,\n      because the parent gets\
    \ to dictate the names in the provisioning\n      protocol.  This value is the\
    \ sender field in provisioning protocol\n      request messages and the recipient\
    \ field in provisioning protocol\n      response messages.\n   parent_handle:\
    \  The parent_handle attribute is the parent's name for\n      itself.  This value\
    \ is the recipient field in provisioning\n      protocol request messages and\
    \ the sender field in provisioning\n      protocol response messages.\n   parent_bpki_ta:\
    \  The <parent_bpki_ta/> element is the parent's BPKI\n      identity, a self-signed\
    \ X.509 BPKI certificate.\n      This certificate is the issuer of the BPKI EE\
    \ certificates\n      corresponding to private keys that the parent will use to\
    \ sign\n      provisioning protocol messages to the child.\n   offer:  If an <offer/>\
    \ element is present, the parent is offering\n      publication service to the\
    \ child.  The <offer/> element, if\n      present, is empty.\n   referral:  If\
    \ <referral/> elements are present, they suggest third-\n      party publication\
    \ services which the child might use, and contain:\n      referrer:  A referrer\
    \ attribute, containing the handle by which\n         the publication repository\
    \ knows the parent,\n      contact_uri:  An optional contact_uri attribute that\
    \ the child may\n         be able to follow for more information, and\n      Authorization\
    \ token:  The text of the <referral/> element is the\n         Base64 encoding\
    \ of a signed authorization token granting the\n         child the right to use\
    \ a portion of the parent's namespace at\n         the publication repository\
    \ in question.  See Section 5.3 for\n         details on the authorization token.\n\
    \   A parent is unlikely to need to send both <offer> and <referral>\n   elements,\
    \ but strictly speaking they are not mutually exclusive, so a\n   parent which\
    \ really needs to express that it both offers repository\n   service to its child\
    \ and is also willing to refer its child to one or\n   more other repository servers\
    \ can do so.\n   ---------------------------------------------------------------------\n\
    \   <parent_response\n       xmlns=\"http://www.hactrn.net/uris/rpki/rpki-setup/\"\
    \n       version=\"1\"\n       service_uri=\"http://a.example/up-down/Alice/Bob-42\"\
    \n       child_handle=\"Bob-42\"\n       parent_handle=\"Alice\">\n     <parent_bpki_ta>\n\
    \       WW91IGNhbiBoYWNrIGFueXRoaW5nIHlvdSB3YW50IHdpdGggVEVDTyBhbmQgRERU\n   \
    \  </parent_bpki_ta>\n     <offer/>\n   </parent_response>\n   ---------------------------------------------------------------------\n\
    \   ---------------------------------------------------------------------\n  \
    \ <parent_response\n       xmlns=\"http://www.hactrn.net/uris/rpki/rpki-setup/\"\
    \n       version=\"1\"\n       service_uri=\"http://bob.example/up-down/Bob/Carol\"\
    \n       child_handle=\"Carol\"\n       parent_handle=\"Bob\">\n     <parent_bpki_ta>\n\
    \       R29kIGlzIHJlYWwgdW5sZXNzIGRlY2xhcmVkIGludGVnZXI=\n     </parent_bpki_ta>\n\
    \     <referral\n         referrer=\"Alice/Bob-42\">\n       R28sIGxlbW1pbmdzLCBnbyE=\n\
    \     </referral>\n   </parent_response>\n   ---------------------------------------------------------------------\n"
- title: 5.2.3.  <publisher_request/>
  contents:
  - "5.2.3.  <publisher_request/>\n   The <publisher_request/> message is a setup\
    \ request from a publisher\n   to a repository.  Generally, this will not take\
    \ place until after the\n   publisher has set up the provisioning protocol via\
    \ a <child_request/>\n   / <parent_response/> exchange: in particular, the <referral>\
    \ sub-\n   element here requires an <authorization/> token provided by the\n \
    \  provisioning protocol exchange.\n   Fields in the <publisher_request/> message:\n\
    \   version:  The version attribute specifies the protocol version.  This\n  \
    \    note describes protocol version 1.\n   tag:  The publisher MAY include a\
    \ \"tag\" attribute in the request\n      message.\n   publisher_handle:  The\
    \ publisher_handle attribute is the publisher's\n      name for itself.  This\
    \ is just a hint; the repository need not\n      honor it.\n   publisher_bpki_ta:\
    \  The <publisher_bpki_ta/> element is the\n      publisher's BPKI identity, a\
    \ self-signed X.509 BPKI certificate.\n      This certificate is the issuer of\
    \ the BPKI EE certificates\n      corresponding to private keys that the publisher\
    \ will use to sign\n      publication protocol messages to the repository.\n \
    \  referral:  If a <referral/> element is present, it contains:\n      referrer:\
    \  A referrer attribute containing the publication handle\n         of the referring\
    \ parent, and\n      Authorization token:  The text of the <referral/> element\
    \ is the\n         Base64 encoding of a signed authorization token granting the\n\
    \         publisher the right to use a portion of its parent's namespace\n   \
    \      at this repository.  See Section 5.3 for details on the\n         authorization\
    \ token.\n      These fields are copies of values that a parent provided to the\n\
    \      child in the <parent_response/> message (see Section 5.2.2).  The\n   \
    \   referrer attribute is present to aid lookup of the corresponding\n      certificate\
    \ by the repository.  Note that the repository operator\n      makes the final\
    \ decision on whether to grant publication service\n      to the prospective publisher.\
    \  The <referral/> element just\n      conveys a parent's grant of permission\
    \ to use a portion of that\n      parent's namespace.\n   ---------------------------------------------------------------------\n\
    \   <publisher_request\n       xmlns=\"http://www.hactrn.net/uris/rpki/rpki-setup/\"\
    \n       version=\"1\"\n       tag=\"A0001\"\n       publisher_handle=\"Bob\"\
    >\n     <publisher_bpki_ta>\n       R29kIGlzIHJlYWwgdW5sZXNzIGRlY2xhcmVkIGludGVnZXI=\n\
    \     </publisher_bpki_ta>\n   </publisher_request>\n   ---------------------------------------------------------------------\n"
- title: 5.2.4.  <repository_response/>
  contents:
  - "5.2.4.  <repository_response/>\n   The <repository_response/> message is a repository's\
    \ response to a\n   publisher which has previously sent a <publisher_request/>\
    \ message.\n   Fields in the <repository_response/> message:\n   version:  The\
    \ version attribute specifies the protocol version.  This\n      note describes\
    \ protocol version 1.\n   tag:  If the <publisher_request/> message included a\
    \ \"tag\" attribute,\n      the repository MUST include an identical \"tag\" attribute\
    \ in the\n      <repository_response/> message; if the request did not include\
    \ a\n      tag attribute, the response MUST NOT include a tag attribute\n    \
    \  either.\n   service_uri:  The service_uri attribute contains an HTTP or HTTPS\
    \ URL\n      [RFC7230] that the publisher should contact for publication\n   \
    \   service [RFC8181].\n   publisher_handle:  The publisher_handle attribute is\
    \ the repository's\n      name for the publisher.  This may or may not match the\n\
    \      publisher_handle attribute in the publisher's <publisher_request/>\n  \
    \    message.\n   sia_base:  The sia_base attribute is the rsync:// URI for the\
    \ base of\n      the publication space allocated to the publisher.\n   rrdp_notification_uri:\
    \  The optional rrdp_notification_uri attribute\n      is the URI for the RPKI\
    \ Repository Delta Protocol (RRDP)\n      notification file covering the publication\
    \ space allocated to the\n      publisher [RFC8182].\n   repository_bpki_ta: \
    \ The <repository_bpki_ta/> element is the\n      repository's BPKI identity,\
    \ a self-signed X.509 BPKI certificate.\n   ---------------------------------------------------------------------\n\
    \   <repository_response\n       xmlns=\"http://www.hactrn.net/uris/rpki/rpki-setup/\"\
    \n       version=\"1\"\n       tag=\"A0001\"\n       service_uri=\"http://a.example/publication/Alice/Bob-42\"\
    \n       publisher_handle=\"Alice/Bob-42\"\n       sia_base=\"rsync://a.example/rpki/Alice/Bob-42/\"\
    \n       rrdp_notification_uri=\"https://rpki.example/rrdp/notify.xml\">\n   \
    \  <repository_bpki_ta>\n       WW91IGNhbiBoYWNrIGFueXRoaW5nIHlvdSB3YW50IHdpdGggVEVDTyBhbmQgRERU\n\
    \     </repository_bpki_ta>\n   </repository_response>\n   ---------------------------------------------------------------------\n"
- title: 5.3.  <authorization/>
  contents:
  - "5.3.  <authorization/>\n   The <authorization/> element is a separate message\
    \ which is signed\n   with CMS and then included as the Base64 content of <referral/>\n\
    \   elements in other messages.\n   The eContentType for the signed CMS message\
    \ is id-ct-xml [RFC6492].\n   Fields in the <authorization/> element:\n   version:\
    \  The version attribute specifies the protocol version.  This\n      note describes\
    \ protocol version 1.\n   authorized_sia_base:  The value of the authorized_sia_base\
    \ attribute\n      is the rsync:// URI of the base of the namespace which the\n\
    \      referrer is delegating.\n   BPKI TA:  The text of the <authorization/>\
    \ element is the identity of\n      the entity to whom the referrer is delegating\
    \ the portion of the\n      namespace named in the authorized_sia_base attribute,\
    \ represented\n      as a Base64-encoded self-signed X.509 BPKI certificate.\n\
    \   ---------------------------------------------------------------------\n  \
    \ <authorization\n       xmlns=\"http://www.hactrn.net/uris/rpki/rpki-setup/\"\
    \n       version=\"1\"\n       authorized_sia_base=\"rsync://a.example/rpki/Alice/Bob-42/Carol/\"\
    >\n     SSd2ZSBoYWQgZnVuIGJlZm9yZS4gIFRoaXMgaXNuJ3QgaXQu\n   </authorization>\n\
    \   ---------------------------------------------------------------------\n"
- title: 5.4.  <error/>
  contents:
  - "5.4.  <error/>\n   The <error/> element is an optional message which can be used\
    \ in\n   response to any of the core protocol messages described in\n   Section\
    \ 5.2.\n   Whether an <error/> element is an appropriate way to signal errors\n\
    \   back to the sender of a protocol message depends on details of the\n   implementation,\
    \ which are outside this specification.  For example,\n   if this protocol is\
    \ embedded in a web portal interface which is\n   designed to let a human being\
    \ upload and download these messages via\n   upload and download forms, a human-readable\
    \ error message may be more\n   appropriate.  On the other hand, a portal intended\
    \ to be driven by a\n   robotic client might well want to use an <error/> message\
    \ to signal\n   errors.  Similar arguments apply to non-web encapsulations (such\
    \ as\n   email or a USB stick); the primary factor is likely to be whether the\n\
    \   implementation expects the error to be handled by a human being or by\n  \
    \ a program.\n   Fields in the <error/> message:\n   version:  The version attribute\
    \ specifies the protocol version.  This\n      note describes protocol version\
    \ 1.\n   reason:  The reason attribute contains a code indicating what was\n \
    \     wrong with the message.  This version of the protocol defines the\n    \
    \  following codes:\n      syntax-error:  Receiver could not parse the offending\
    \ message.\n      authentication-failure:  Receiver could not authenticate the\n\
    \         offending message.\n      refused:  Receiver refused to perform the\
    \ requested action.\n   Offending message:  The <error/> element contains a verbatim\
    \ copy of\n      the message to which this error applies.\n   ---------------------------------------------------------------------\n\
    \   <error\n       xmlns=\"http://www.hactrn.net/uris/rpki/rpki-setup/\"\n   \
    \    version=\"1\"\n       reason=\"refused\">\n     <child_request\n        \
    \ xmlns=\"http://www.hactrn.net/uris/rpki/rpki-setup/\"\n         version=\"1\"\
    \n         child_handle=\"Carol\">\n       <child_bpki_ta>\n         SSd2ZSBoYWQgZnVuIGJlZm9yZS4gIFRoaXMgaXNuJ3QgaXQu\n\
    \       </child_bpki_ta>\n     </child_request>\n   </error>\n   ---------------------------------------------------------------------\n"
- title: 6.  Protocol Walk-Through
  contents:
  - "6.  Protocol Walk-Through\n   This section walks through a few simple examples\
    \ of the protocol in\n   use and stars our old friends, Alice, Bob, and Carol.\
    \  In this\n   example, Alice is the root of an RPKI tree, Bob wants to get address\n\
    \   and Autonomous System Number (ASN) resources from Alice, and Carol\n   wants\
    \ to get some of those resources in turn from Bob.  Alice offers\n   publication\
    \ service, which is used by all three.\n   Alice, Bob, and Carol each generate\
    \ his or her own self-signed BPKI\n   certificate.\n   Bob constructs a <child_request/>\
    \ message and sends it to Alice:\n   ---------------------------------------------------------------------\n\
    \   <child_request\n       xmlns=\"http://www.hactrn.net/uris/rpki/rpki-setup/\"\
    \n       version=\"1\"\n       child_handle=\"Bob\">\n     <child_bpki_ta>\n \
    \      R29kIGlzIHJlYWwgdW5sZXNzIGRlY2xhcmVkIGludGVnZXI=\n     </child_bpki_ta>\n\
    \   </child_request>\n   ---------------------------------------------------------------------\n\
    \   o  Bob's preferred handle is \"Bob\", so Bob uses that when setting\n    \
    \  child_handle.\n   o  <child_bpki_ta/> is Bob's self-signed BPKI certificate.\n\
    \   Alice replies with a <parent_response/> message, but Alice already\n   has\
    \ 41 other children named Bob, so she calls this one \"Bob-42\".\n   Alice's provisioning\
    \ protocol server happens to use a RESTful URL\n   scheme so that it can find\
    \ the expected validation context for the\n   provisioning protocol CMS message\
    \ just by looking at the URL, so the\n   service URL she provides to Bob includes\
    \ both her name and Bob's.\n   Alice offers publication service, so she offers\
    \ to let Bob use it;\n   Alice doesn't have to do this, she could just omit this\
    \ and leave Bob\n   to find publication service on his own, but Alice is trying\
    \ to be\n   helpful to her customer Bob.  Bob doesn't have to accept Alice's\n\
    \   offer, but may choose to do so.\n   ---------------------------------------------------------------------\n\
    \   <parent_response\n       xmlns=\"http://www.hactrn.net/uris/rpki/rpki-setup/\"\
    \n       version=\"1\"\n       service_uri=\"http://a.example/up-down/Alice/Bob-42\"\
    \n       child_handle=\"Bob-42\"\n       parent_handle=\"Alice\">\n     <parent_bpki_ta>\n\
    \       WW91IGNhbiBoYWNrIGFueXRoaW5nIHlvdSB3YW50IHdpdGggVEVDTyBhbmQgRERU\n   \
    \  </parent_bpki_ta>\n     <offer/>\n   </parent_response>\n   ---------------------------------------------------------------------\n\
    \   o  <parent_bpki_ta/> is Alice's own self-signed BPKI certificate.\n   Bob\
    \ receives Alice's <parent_response/> and extracts the fields Bob's\n   RPKI engine\
    \ will need to know about (child_handle, parent_handle,\n   service_uri, and <parent_bpki_ta/>).\
    \  Bob also sees the repository\n   offer, decides to take Alice up on this offer,\
    \ and constructs a\n   <publisher_request/> message accordingly:\n   ---------------------------------------------------------------------\n\
    \   <publisher_request\n       xmlns=\"http://www.hactrn.net/uris/rpki/rpki-setup/\"\
    \n       version=\"1\"\n       tag=\"A0001\"\n       publisher_handle=\"Bob\"\
    >\n     <publisher_bpki_ta>\n       R29kIGlzIHJlYWwgdW5sZXNzIGRlY2xhcmVkIGludGVnZXI=\n\
    \     </publisher_bpki_ta>\n   </publisher_request>\n   ---------------------------------------------------------------------\n\
    \   Alice receives Bob's request to use Alice's publication service,\n   decides\
    \ to honor the offer she made, and sends back a\n   <repository_response/> message\
    \ in response.  Alice recognizes Bob as\n   one of her own children, because she's\
    \ already seen Bob's self-signed\n   BPKI certificate, so she allocates publication\
    \ space to Bob under her\n   own publication space, so that relying parties who\
    \ rsync her products\n   will pick up Bob's products automatically without needing\
    \ an\n   additional fetch operation.\n   ---------------------------------------------------------------------\n\
    \   <repository_response\n       xmlns=\"http://www.hactrn.net/uris/rpki/rpki-setup/\"\
    \n       version=\"1\"\n       tag=\"A0001\"\n       service_uri=\"http://a.example/publication/Alice/Bob-42\"\
    \n       publisher_handle=\"Alice/Bob-42\"\n       sia_base=\"rsync://a.example/rpki/Alice/Bob-42/\"\
    \n       rrdp_notification_uri=\"https://rpki.example/rrdp/notify.xml\">\n   \
    \  <repository_bpki_ta>\n       WW91IGNhbiBoYWNrIGFueXRoaW5nIHlvdSB3YW50IHdpdGggVEVDTyBhbmQgRERU\n\
    \     </repository_bpki_ta>\n   </repository_response>\n   ---------------------------------------------------------------------\n\
    \   Bob should now have everything he needs to talk to Alice for both\n   provisioning\
    \ and publication.\n   A more interesting case is Bob's child, Carol.  Carol wants\
    \ to get\n   her resources from Bob and, like Bob, does not particularly want\
    \ to\n   operate a publication service.  Bob doesn't have a publication\n   service\
    \ of his own to offer, but he can refer Carol to Alice, along\n   with his permission\
    \ for Carol to use a portion of the namespace that\n   Alice gave him.\n   Carol's\
    \ <child_request/> to Bob looks very similar to Bob's earlier\n   request to Alice:\n\
    \   ---------------------------------------------------------------------\n  \
    \ <child_request\n       xmlns=\"http://www.hactrn.net/uris/rpki/rpki-setup/\"\
    \n       version=\"1\"\n       child_handle=\"Carol\">\n     <child_bpki_ta>\n\
    \       SSd2ZSBoYWQgZnVuIGJlZm9yZS4gIFRoaXMgaXNuJ3QgaXQu\n     </child_bpki_ta>\n\
    \   </child_request>\n   ---------------------------------------------------------------------\n\
    \   Bob's <parent_response/> to Carol also looks a lot like Alice's\n   response\
    \ to Bob, except that Bob includes a <referral/> element\n   instead of an <offer/>\
    \ element.  Carol is an only child, so Bob\n   leaves her name alone:\n   ---------------------------------------------------------------------\n\
    \   <parent_response\n       xmlns=\"http://www.hactrn.net/uris/rpki/rpki-setup/\"\
    \n       version=\"1\"\n       service_uri=\"http://bob.example/up-down/Bob/Carol\"\
    \n       child_handle=\"Carol\"\n       parent_handle=\"Bob\">\n     <parent_bpki_ta>\n\
    \       R29kIGlzIHJlYWwgdW5sZXNzIGRlY2xhcmVkIGludGVnZXI=\n     </parent_bpki_ta>\n\
    \     <referral\n         referrer=\"Alice/Bob-42\">\n       R28sIGxlbW1pbmdzLCBnbyE=\n\
    \     </referral>\n   </parent_response>\n   ---------------------------------------------------------------------\n\
    \   Bob's response includes a <referral/> element with a referrer\n   attribute\
    \ of \"Alice/Bob-42\", since that's Bob's name in Alice's\n   repository.  The\
    \ Base64-encoded authorization token is an\n   <authorization/> element in a CMS\
    \ message that can be verified\n   against Bob's self-signed BPKI certificate,\
    \ using a BPKI EE\n   certificate included in the CMS wrapper.  The <authorization/>\
    \ text\n   is Carol's self-signed BPKI certificate; Bob's signature over this\n\
    \   element indicates Bob's permission for Carol to use the indicated\n   portion\
    \ of Bob's publication space.\n   ---------------------------------------------------------------------\n\
    \   <authorization\n       xmlns=\"http://www.hactrn.net/uris/rpki/rpki-setup/\"\
    \n       version=\"1\"\n       authorized_sia_base=\"rsync://a.example/rpki/Alice/Bob-42/Carol/\"\
    >\n     SSd2ZSBoYWQgZnVuIGJlZm9yZS4gIFRoaXMgaXNuJ3QgaXQu\n   </authorization>\n\
    \   ---------------------------------------------------------------------\n  \
    \ Carol, not wanting to have to run a publication service, presents\n   Bob's\
    \ referral to Alice in the hope that Alice will let Carol use\n   Alice's publication\
    \ service.  So Carol constructs a\n   <publisher_request/> message, including\
    \ the referral information\n   received from Bob, and sends it all to Alice:\n\
    \   ---------------------------------------------------------------------\n  \
    \ <publisher_request\n       xmlns=\"http://www.hactrn.net/uris/rpki/rpki-setup/\"\
    \n       version=\"1\"\n       tag=\"A0002\"\n       publisher_handle=\"Carol\"\
    >\n     <publisher_bpki_ta>\n       SSd2ZSBoYWQgZnVuIGJlZm9yZS4gIFRoaXMgaXNuJ3QgaXQu\n\
    \     </publisher_bpki_ta>\n     <referral\n         referrer=\"Alice/Bob-42\"\
    >\n       R28sIGxlbW1pbmdzLCBnbyE=\n     </referral>\n   </publisher_request>\n\
    \   ---------------------------------------------------------------------\n  \
    \ Alice sees the signed authorization token Bob gave to Carol, checks\n   its\
    \ signature, and unpacks it.  When the signature proves valid and\n   the contained\
    \ BPKI trust anchor (TA) matches Carol's, Alice knows\n   that Bob is willing\
    \ to let Carol use a portion of Bob's namespace.\n   Given this, Alice is willing\
    \ to provide publication service to Carol\n   in the subtree allocated by Bob\
    \ for this purpose, so Alice sends back\n   a <repository_response/>:\n   ---------------------------------------------------------------------\n\
    \   <repository_response\n       xmlns=\"http://www.hactrn.net/uris/rpki/rpki-setup/\"\
    \n       version=\"1\"\n       tag=\"A0002\"\n       service_uri=\"http://a.example/publication/Alice/Bob-42/Carol\"\
    \n       publisher_handle=\"Alice/Bob-42/Carol\"\n       sia_base=\"rsync://a.example/rpki/Alice/Bob-42/Carol/\"\
    >\n     <repository_bpki_ta>\n       WW91IGNhbiBoYWNrIGFueXRoaW5nIHlvdSB3YW50IHdpdGggVEVDTyBhbmQgRERU\n\
    \     </repository_bpki_ta>\n   </repository_response>\n   ---------------------------------------------------------------------\n\
    \   Once Carol receives this response, Carol should be good to go.\n   In theory,\
    \ the publication referral mechanism can extend indefinitely\n   (for example,\
    \ Carol can refer her child Dave to Alice for publication\n   service, and it\
    \ should all work).  In practice, this has not yet been\n   implemented, much\
    \ less tested.  In order to keep the protocol\n   relatively simple, we've deliberately\
    \ ignored perverse cases such as\n   Bob being willing to refer Carol to Alice\
    \ but not wanting Carol to be\n   allowed to refer Dave to Alice.\n   Any RPKI\
    \ operator is free to run their own publication service should\n   they feel a\
    \ need to do so, and a child need not accept any particular\n   <offer/> or <referral/>.\
    \  In general, having a smaller number of\n   larger publication repositories\
    \ is probably good for overall system\n   performance, because it will tend to\
    \ reduce the number of distinct\n   repositories from which each relying party\
    \ will need to fetch, but\n   the decision on where to publish is up to individual\
    \ RPKI CA\n   operators and out of scope for this protocol.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This document does not require any IANA actions.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   As stated in Section 1, the basic function of\
    \ this protocol is an\n   exchange of public keys to be used as BPKI trust anchors.\
    \  Integrity\n   and authentication of these exchanges MUST be ensured via external\n\
    \   mechanisms deliberately left unspecified in this protocol.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RELAX-NG] Clark, J., \"RELAX NG Compact Syntax\"\
    , OASIS Committee\n              Specification, November 2002,\n             \
    \ <https://www.oasis-open.org/committees/relax-ng/\n              compact-20021121.html>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC4648]\
    \  Josefsson, S., \"The Base16, Base32, and Base64 Data\n              Encodings\"\
    , RFC 4648, DOI 10.17487/RFC4648, October 2006,\n              <http://www.rfc-editor.org/info/rfc4648>.\n\
    \   [RFC6492]  Huston, G., Loomans, R., Ellacott, B., and R. Austein, \"A\n  \
    \            Protocol for Provisioning Resource Certificates\",\n            \
    \  RFC 6492, DOI 10.17487/RFC6492, February 2012,\n              <http://www.rfc-editor.org/info/rfc6492>.\n\
    \   [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n \
    \             Protocol (HTTP/1.1): Message Syntax and Routing\",\n           \
    \   RFC 7230, DOI 10.17487/RFC7230, June 2014,\n              <http://www.rfc-editor.org/info/rfc7230>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <http://www.rfc-editor.org/info/rfc8174>.\n   [RFC8181]  Weiler,\
    \ S., Sonalker, A., and R. Austein, \"A Publication\n              Protocol for\
    \ the Resource Public Key Infrastructure\n              (RPKI)\", RFC 8181, DOI\
    \ 10.17487/RFC8181, July 2017,\n              <http://www.rfc-editor.org/info/rfc8181>.\n\
    \   [RFC8182]  Bruijnzeels, T., Muravskiy, O., Weber, B., and R. Austein,\n  \
    \            \"The RPKI Repository Delta Protocol (RRDP)\", RFC 8182,\n      \
    \        DOI 10.17487/RFC8182, July 2017,\n              <http://www.rfc-editor.org/info/rfc8182>.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [RFC5280]  Cooper, D., Santesson, S., Farrell,\
    \ S., Boeyen, S.,\n              Housley, R., and W. Polk, \"Internet X.509 Public\
    \ Key\n              Infrastructure Certificate and Certificate Revocation List\n\
    \              (CRL) Profile\", RFC 5280, DOI 10.17487/RFC5280, May 2008,\n  \
    \            <http://www.rfc-editor.org/info/rfc5280>.\n   [RFC5652]  Housley,\
    \ R., \"Cryptographic Message Syntax (CMS)\", STD 70,\n              RFC 5652,\
    \ DOI 10.17487/RFC5652, September 2009,\n              <http://www.rfc-editor.org/info/rfc5652>.\n"
- title: Appendix A.  RELAX NG Schema
  contents:
  - "Appendix A.  RELAX NG Schema\n   Here is a [RELAX-NG] schema describing the protocol\
    \ elements.\n   This schema is normative: in the event of a disagreement between\
    \ this\n   schema and the document text above, this schema is authoritative.\n\
    \   default namespace = \"http://www.hactrn.net/uris/rpki/rpki-setup/\"\n   version\
    \ = \"1\"\n   base64  = xsd:base64Binary { maxLength=\"512000\" }\n   handle \
    \ = xsd:string { maxLength=\"255\" pattern=\"[\\-_A-Za-z0-9/]*\" }\n   uri   \
    \  = xsd:anyURI { maxLength=\"4096\" }\n   any     = element * { attribute * {\
    \ text }*, ( any | text )* }\n   tag     = xsd:token { maxLength=\"1024\" }\n\
    \   authorization_token = base64\n   bpki_ta = base64\n   start |= element child_request\
    \ {\n     attribute version { version },\n     attribute child_handle { handle\
    \ },\n     attribute tag { tag }?,\n     element child_bpki_ta { bpki_ta }\n \
    \  }\n   start |= element parent_response {\n     attribute version { version\
    \ },\n     attribute service_uri { uri },\n     attribute child_handle { handle\
    \ },\n     attribute parent_handle { handle },\n     attribute tag { tag }?,\n\
    \     element parent_bpki_ta { bpki_ta },\n     element offer { empty }?,\n  \
    \   element referral {\n       attribute referrer { handle },\n       attribute\
    \ contact_uri { uri }?,\n       authorization_token\n     }*\n   }\n   start |=\
    \ element publisher_request {\n     attribute version { version },\n     attribute\
    \ publisher_handle { handle },\n     attribute tag { tag }?,\n     element publisher_bpki_ta\
    \ { bpki_ta },\n     element referral {\n       attribute referrer { handle },\n\
    \       authorization_token\n     }*\n   }\n   start |= element repository_response\
    \ {\n     attribute version { version },\n     attribute service_uri { uri },\n\
    \     attribute publisher_handle { handle },\n     attribute sia_base { uri },\n\
    \     attribute rrdp_notification_uri { uri }?,\n     attribute tag { tag }?,\n\
    \     element repository_bpki_ta { bpki_ta }\n   }\n   start |= element authorization\
    \ {\n     attribute version { version },\n     attribute authorized_sia_base {\
    \ uri },\n     bpki_ta\n   }\n   start |= element error {\n     attribute version\
    \ { version },\n     attribute reason {\n       \"syntax-error\" |\n       \"\
    authentication-failure\" |\n       \"refused\"\n     },\n     any?\n   }\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The author would like to thank: Byron Ellacott, George Michaelson,\n\
    \   Leif Johansson, Matsuzaki Yoshinobu, Michael Elkins, Randy Bush,\n   Seiichi\
    \ Kawamura, Tim Bruijnzeels, and anybody else who helped along\n   the way but\
    \ whose name the author has temporarily forgotten.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Rob Austein\n   Dragon Research Labs\n   Email: sra@hactrn.net\n"
