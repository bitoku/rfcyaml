- title: __initial_text__
  contents:
  - "      Extensible Authentication Protocol Method for 3rd Generation\n        \
    \       Authentication and Key Agreement (EAP-AKA)\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: IESG Note
  contents:
  - "IESG Note\n   The EAP-AKA protocol was developed by 3GPP.  The documentation\
    \ of\n   EAP-AKA is provided as information to the Internet community.  While\n\
    \   the EAP WG has verified that EAP-AKA is compatible with EAP as\n   defined\
    \ in RFC 3748, no other review has been done, including\n   validation of the\
    \ security claims.  The IETF has also not reviewed\n   the security of the underlying\
    \ UMTS AKA algorithms.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies an Extensible Authentication Protocol (EAP)\n\
    \   mechanism for authentication and session key distribution that uses\n   the\
    \ Authentication and Key Agreement (AKA) mechanism.  AKA is used in\n   the 3rd\
    \ generation mobile networks Universal Mobile\n   Telecommunications System (UMTS)\
    \ and CDMA2000.  AKA is based on\n   symmetric keys, and typically runs in a Subscriber\
    \ Identity Module,\n   which is a UMTS Subscriber Identity Module, USIM, or a\
    \ (Removable)\n   User Identity Module, (R)UIM, similar to a smart card.\n   EAP-AKA\
    \ includes optional identity privacy support, optional result\n   indications,\
    \ and an optional fast re-authentication procedure.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction and Motivation .....................................4\n\
    \   2. Terms and Conventions Used in This Document .....................5\n  \
    \ 3. Protocol Overview ...............................................9\n   4.\
    \ Operation ......................................................15\n      4.1.\
    \ Identity Management .......................................15\n           4.1.1.\
    \ Format, Generation, and Usage of Peer Identities ...15\n           4.1.2. Communicating\
    \ the Peer Identity to the Server ......21\n           4.1.3. Choice of Identity\
    \ for the EAP-Response/Identity ...23\n           4.1.4. Server Operation in the\
    \ Beginning of\n                  EAP-AKA Exchange ...................................23\n\
    \           4.1.5. Processing of EAP-Request/AKA-Identity by\n               \
    \   the Peer ...........................................24\n           4.1.6.\
    \ Attacks against Identity Privacy ...................25\n           4.1.7. Processing\
    \ of AT_IDENTITY by the Server ............26\n      4.2. Message Sequence Examples\
    \ (Informative) ...................27\n           4.2.1. Usage of AT_ANY_ID_REQ\
    \ .............................27\n           4.2.2. Fall Back on Full Authentication\
    \ ...................28\n           4.2.3. Requesting the Permanent Identity 1\
    \ ................29\n           4.2.4. Requesting the Permanent Identity 2 ................30\n\
    \           4.2.5. Three EAP/AKA-Identity Round Trips .................30\n  \
    \ 5. Fast Re-Authentication .........................................32\n    \
    \  5.1. General ...................................................32\n      5.2.\
    \ Comparison to AKA .........................................33\n      5.3. Fast\
    \ Re-Authentication Identity ...........................33\n      5.4. Fast Re-Authentication\
    \ Procedure ..........................35\n      5.5. Fast Re-Authentication Procedure\
    \ when Counter is\n           Too Small .................................................37\n\
    \   6. EAP-AKA Notifications ..........................................38\n  \
    \    6.1. General ...................................................38\n    \
    \  6.2. Result Indications ........................................39\n      6.3.\
    \ Error Cases ...............................................40\n           6.3.1.\
    \ Peer Operation .....................................41\n           6.3.2. Server\
    \ Operation ...................................41\n           6.3.3. EAP-Failure\
    \ ........................................42\n           6.3.4. EAP-Success ........................................42\n\
    \   7. Key Generation .................................................43\n  \
    \ 8. Message Format and Protocol Extensibility ......................45\n    \
    \  8.1. Message Format ............................................45\n      8.2.\
    \ Protocol Extensibility ....................................47\n   9. Messages\
    \ .......................................................48\n      9.1. EAP-Request/AKA-Identity\
    \ ..................................48\n      9.2. EAP-Response/AKA-Identity .................................48\n\
    \      9.3. EAP-Request/AKA-Challenge .................................49\n  \
    \    9.4. EAP-Response/AKA-Challenge ................................49\n    \
    \  9.5. EAP-Response/AKA-Authentication-Reject ....................50\n      9.6.\
    \ EAP-Response/AKA-Synchronization-Failure ..................50\n      9.7. EAP-Request/AKA-Reauthentication\
    \ ..........................50\n      9.8. EAP-Response/AKA-Reauthentication .........................51\n\
    \      9.9. EAP-Response/AKA-Client-Error .............................52\n  \
    \    9.10. EAP-Request/AKA-Notification .............................52\n    \
    \  9.11. EAP-Response/AKA-Notification ............................52\n   10.\
    \ Attributes ....................................................53\n      10.1.\
    \ Table of Attributes ......................................53\n      10.2. AT_PERMANENT_ID_REQ\
    \ ......................................54\n      10.3. AT_ANY_ID_REQ ............................................54\n\
    \      10.4. AT_FULLAUTH_ID_REQ .......................................54\n  \
    \    10.5. AT_IDENTITY ..............................................55\n    \
    \  10.6. AT_RAND ..................................................55\n      10.7.\
    \ AT_AUTN ..................................................56\n      10.8. AT_RES\
    \ ...................................................56\n      10.9. AT_AUTS ..................................................57\n\
    \      10.10. AT_NEXT_PSEUDONYM .......................................57\n  \
    \    10.11. AT_NEXT_REAUTH_ID .......................................58\n    \
    \  10.12. AT_IV, AT_ENCR_DATA, and AT_PADDING .....................58\n      10.13.\
    \ AT_CHECKCODE ............................................60\n      10.14. AT_RESULT_IND\
    \ ...........................................62\n      10.15. AT_MAC ..................................................63\n\
    \      10.16. AT_COUNTER ..............................................64\n  \
    \    10.17. AT_COUNTER_TOO_SMALL ....................................64\n    \
    \  10.18. AT_NONCE_S ..............................................65\n      10.19.\
    \ AT_NOTIFICATION .........................................65\n      10.20. AT_CLIENT_ERROR_CODE\
    \ ....................................66\n   11. IANA and Protocol Numbering Considerations\
    \ ....................66\n   12. Security Considerations .......................................68\n\
    \      12.1. Identity Protection ......................................69\n  \
    \    12.2. Mutual Authentication ....................................69\n    \
    \  12.3. Flooding the Authentication Centre .......................69\n      12.4.\
    \ Key Derivation ...........................................70\n      12.5. Brute-Force\
    \ and Dictionary Attacks .......................70\n      12.6. Protection, Replay\
    \ Protection, and Confidentiality .......70\n      12.7. Negotiation Attacks ......................................71\n\
    \      12.8. Protected Result Indications .............................72\n  \
    \    12.9. Man-in-the-Middle Attacks ................................72\n    \
    \  12.10. Generating Random Numbers ...............................73\n   13.\
    \ Security Claims ...............................................73\n   14. Acknowledgements\
    \ and Contributions ............................74\n   15. References ....................................................74\n\
    \      15.1. Normative References .....................................74\n  \
    \    15.2. Informative References ...................................76\n   Appendix\
    \ A.  Pseudo-Random Number Generator .......................77\n"
- title: 1.  Introduction and Motivation
  contents:
  - "1.  Introduction and Motivation\n   This document specifies an Extensible Authentication\
    \ Protocol (EAP)\n   mechanism for authentication and session key distribution\
    \ that uses\n   the 3rd generation Authentication and Key Agreement mechanism,\n\
    \   specified for Universal Mobile Telecommunications System (UMTS) in\n   [TS33.102]\
    \ and for CDMA2000 in [S.S0055-A].  UMTS and CDMA2000 are\n   global 3rd generation\
    \ mobile network standards that use the same AKA\n   mechanism.\n   2nd generation\
    \ mobile networks and 3rd generation mobile networks use\n   different authentication\
    \ and key agreement mechanisms.  The Global\n   System for Mobile communications\
    \ (GSM) is a 2nd generation mobile\n   network standard, and EAP-SIM [EAP-SIM]\
    \ specifies an EAP mechanism\n   that is based on the GSM authentication and key\
    \ agreement primitives.\n   AKA is based on challenge-response mechanisms and\
    \ symmetric\n   cryptography.  AKA typically runs in a UMTS Subscriber Identity\n\
    \   Module (USIM) or a CDMA2000 (Removable) User Identity Module\n   ((R)UIM).\
    \  In this document, both modules are referred to as identity\n   modules.  Compared\
    \ to the 2nd generation mechanisms such as GSM AKA,\n   the 3rd generation AKA\
    \ provides substantially longer key lengths and\n   mutual authentication.\n \
    \  The introduction of AKA inside EAP allows several new applications.\n   These\
    \ include the following:\n   o  The use of the AKA also as a secure PPP authentication\
    \ method in\n      devices that already contain an identity module.\n   o  The\
    \ use of the 3rd generation mobile network authentication\n      infrastructure\
    \ in the context of wireless LANs\n   o  Relying on AKA and the existing infrastructure\
    \ in a seamless way\n      with any other technology that can use EAP.\n   AKA\
    \ works in the following manner:\n   o  The identity module and the home environment\
    \ have agreed on a\n      secret key beforehand.  (The \"home environment\" refers\
    \ to the home\n      operator's authentication network infrastructure.)\n   o\
    \  The actual authentication process starts by having the home\n      environment\
    \ produce an authentication vector, based on the secret\n      key and a sequence\
    \ number.  The authentication vector contains a\n      random part RAND, an authenticator\
    \ part AUTN used for\n      authenticating the network to the identity module,\
    \ an expected\n      result part XRES, a 128-bit session key for integrity check\
    \ IK,\n      and a 128-bit session key for encryption CK.\n   o  The RAND and\
    \ the AUTN are delivered to the identity module.\n   o  The identity module verifies\
    \ the AUTN, again based on the secret\n      key and the sequence number.  If\
    \ this process is successful (the\n      AUTN is valid and the sequence number\
    \ used to generate AUTN is\n      within the correct range), the identity module\
    \ produces an\n      authentication result RES and sends it to the home environment.\n\
    \   o  The home environment verifies the correct result from the identity\n  \
    \    module.  If the result is correct, IK and CK can be used to\n      protect\
    \ further communications between the identity module and the\n      home environment.\n\
    \   When verifying AUTN, the identity module may detect that the sequence\n  \
    \ number the network uses is not within the correct range.  In this\n   case,\
    \ the identity module calculates a sequence number\n   synchronization parameter\
    \ AUTS and sends it to the network.  AKA\n   authentication may then be retried\
    \ with a new authentication vector\n   generated using the synchronized sequence\
    \ number.\n   For a specification of the AKA mechanisms and how the cryptographic\n\
    \   values AUTN, RES, IK, CK and AUTS are calculated, see [TS33.102] for\n   UMTS\
    \ and [S.S0055-A] for CDMA2000.\n   In EAP-AKA, the EAP server node obtains the\
    \ authentication vectors,\n   compares RES and XRES, and uses CK and IK in key\
    \ derivation.\n   In the 3rd generation mobile networks, AKA is used for both\
    \ radio\n   network authentication and IP multimedia service authentication\n\
    \   purposes.  Different user identities and formats are used for these;\n   the\
    \ radio network uses the International Mobile Subscriber Identifier\n   (IMSI),\
    \ whereas the IP multimedia service uses the Network Access\n   Identifier (NAI)\
    \ [RFC4282].\n"
- title: 2.  Terms and Conventions Used in This Document
  contents:
  - "2.  Terms and Conventions Used in This Document\n   The key words \"MUST\", \"\
    MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\"\
    , \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted\
    \ as described in [RFC2119].\n   The terms and abbreviations \"authenticator\"\
    , \"backend authentication\n   server\", \"EAP server\", \"peer\", \"Silently\
    \ Discard\", \"Master Session\n   Key (MSK)\", and \"Extended Master Session Key\
    \ (EMSK)\" in this document\n   are to be interpreted as described in [RFC3748].\n\
    \   This document frequently uses the following terms and abbreviations.\n   The\
    \ AKA parameters are specified in detail in [TS33.102] for UMTS and\n   [S.S0055-A]\
    \ for CDMA2000.\n   AAA protocol\n         Authentication, Authorization and Accounting\
    \ protocol\n   AKA\n         Authentication and Key Agreement\n   AuC\n      \
    \   Authentication Centre.  The mobile network element that can\n         authenticate\
    \ subscribers in the mobile networks.\n   AUTN\n         AKA parameter.  AUTN\
    \ is an authentication value generated by\n         the AuC, which, together with\
    \ the RAND, authenticates the\n         server to the peer, 128 bits.\n   AUTS\n\
    \         AKA parameter.  A value generated by the peer upon\n         experiencing\
    \ a synchronization failure, 112 bits.\n   EAP\n         Extensible Authentication\
    \ Protocol [RFC3748]\n   Fast Re-Authentication\n         An EAP-AKA authentication\
    \ exchange that is based on keys\n         derived upon a preceding full authentication\
    \ exchange.  The\n         3rd Generation AKA is not used in the fast re-authentication\n\
    \         procedure.\n   Fast Re-Authentication Identity\n         A fast re-authentication\
    \ identity of the peer, including an\n         NAI realm portion in environments\
    \ where a realm is used.\n         Used on re-authentication only.\n   Fast Re-Authentication\
    \ Username\n         The username portion of fast re-authentication identity,\n\
    \         i.e., not including any realm portions.\n   Full Authentication\n  \
    \       An EAP-AKA authentication exchange that is based on the\n         3rd\
    \ Generation AKA procedure.\n   GSM\n         Global System for Mobile communications.\n\
    \   NAI\n         Network Access Identifier [RFC4282]\n   Identity Module\n  \
    \       Identity module is used in this document to refer to the\n         part\
    \ of the mobile device that contains authentication and\n         key agreement\
    \ primitives.  The identity module may be an\n         integral part of the mobile\
    \ device or it may be an application\n         on a smart card distributed by\
    \ a mobile operator.  USIM and\n         (R)UIM are identity modules.\n   Nonce\n\
    \         A value that is used at most once or that is never repeated\n      \
    \   within the same cryptographic context.  In general, a nonce can\n        \
    \ be predictable (e.g., a counter) or unpredictable (e.g., a\n         random\
    \ value).  Because some cryptographic properties may\n         depend on the randomness\
    \ of the nonce, attention should be paid\n         to whether a nonce is required\
    \ to be random or not.  In this\n         document, the term nonce is only used\
    \ to denote random nonces,\n         and it is not used to denote counters.\n\
    \   Permanent Identity\n         The permanent identity of the peer, including\
    \ an NAI realm\n         portion in environments where a realm is used.  The permanent\n\
    \         identity is usually based on the IMSI.  Used on full\n         authentication\
    \ only.\n   Permanent Username\n         The username portion of permanent identity,\
    \ i.e., not including\n         any realm portions.\n   Pseudonym Identity\n \
    \        A pseudonym identity of the peer, including an NAI realm\n         portion\
    \ in environments where a realm is used.  Used on full\n         authentication\
    \ only.\n   Pseudonym Username\n         The username portion of pseudonym identity,\
    \ i.e., not including\n         any realm portions.\n   RAND\n         An AKA\
    \ parameter.  Random number generated by the AuC,\n         128 bits.\n   RES\n\
    \         Authentication result from the peer, which, together with\n        \
    \ the RAND, authenticates the peer to the server,\n         128 bits.\n   (R)UIM\n\
    \         CDMA2000 (Removable) User Identity Module.  (R)UIM is an\n         application\
    \ that is resident on devices such as smart cards,\n         which may be fixed\
    \ in the terminal or distributed by CDMA2000\n         operators (when removable).\n\
    \   SQN\n         An AKA parameter.  Sequence number used in the authentication\n\
    \         process, 48 bits.\n   SIM\n         Subscriber Identity Module.  The\
    \ SIM is traditionally a smart\n         card distributed by a GSM operator.\n\
    \   SRES\n         The authentication result parameter in GSM, corresponds to\n\
    \         the RES parameter in 3G AKA, 32 bits.\n   UAK\n         UIM Authentication\
    \ Key, used in CDMA2000 AKA.  Both the\n         identity module and the network\
    \ can optionally generate the UAK\n         during the AKA computation in CDMA2000.\
    \  UAK is not used in\n         this version of EAP-AKA.\n   UIM\n         Please\
    \ see (R)UIM.\n   USIM\n         UMTS Subscriber Identity Module.  USIM is an\
    \ application that\n         is resident on devices such as smart cards distributed\
    \ by UMTS\n         operators.\n"
- title: 3.  Protocol Overview
  contents:
  - "3.  Protocol Overview\n   Figure 1 shows the basic, successful full authentication\
    \ exchange in\n   EAP-AKA, when optional result indications are not used.  The\n\
    \   authenticator typically communicates with an EAP server that is\n   located\
    \ on a backend authentication server using an AAA protocol.\n   The authenticator\
    \ shown in the figure is often simply relaying EAP\n   messages to and from the\
    \ EAP server, but these backend AAA\n   communications are not shown.  At the\
    \ minimum, EAP-AKA uses two\n   roundtrips to authenticate and authorize the peer\
    \ and generate\n   session keys.  As in other EAP schemes, an identity request/response\n\
    \   message pair is usually exchanged first.  On full authentication, the\n  \
    \ peer's identity response includes either the user's International\n   Mobile\
    \ Subscriber Identity (IMSI), or a temporary identity\n   (pseudonym) if identity\
    \ privacy is in effect, as specified in\n   Section 4.1.  (As specified in [RFC3748],\
    \ the initial identity\n   request is not required, and MAY be bypassed in cases\
    \ where the\n   network can presume the identity, such as when using leased lines,\n\
    \   dedicated dial-ups, etc.  Please see Section 4.1.2 for specification\n   of\
    \ how to obtain the identity via EAP AKA messages.)\n   After obtaining the subscriber\
    \ identity, the EAP server obtains an\n   authentication vector (RAND, AUTN, RES,\
    \ CK, IK) for use in\n   authenticating the subscriber.  From the vector, the\
    \ EAP server\n   derives the keying material, as specified in Section 6.4.  The\
    \ vector\n   may be obtained by contacting an Authentication Centre (AuC) on the\n\
    \   mobile network; for example, per UMTS specifications, several vectors\n  \
    \ may be obtained at a time.  Vectors may be stored in the EAP server\n   for\
    \ use at a later time, but they may not be reused.\n   In CDMA2000, the vector\
    \ may include a sixth value called the User\n   Identity Module Authentication\
    \ Key (UAK).  This key is not used in\n   EAP-AKA.\n   Next, the EAP server starts\
    \ the actual AKA protocol by sending an\n   EAP-Request/AKA-Challenge message.\
    \  EAP-AKA packets encapsulate\n   parameters in attributes, encoded in a Type,\
    \ Length, Value format.\n   The packet format and the use of attributes are specified\
    \ in\n   Section 8.  The EAP-Request/AKA-Challenge message contains a RAND\n \
    \  random number (AT_RAND), a network authentication token (AT_AUTN),\n   and\
    \ a message authentication code (AT_MAC).  The EAP-Request/\n   AKA-Challenge\
    \ message MAY optionally contain encrypted data, which is\n   used for identity\
    \ privacy and fast re-authentication support, as\n   described in Section 4.1.\
    \  The AT_MAC attribute contains a message\n   authentication code covering the\
    \ EAP packet.  The encrypted data is\n   not shown in the figures of this section.\n\
    \   The peer runs the AKA algorithm (typically using an identity module)\n   and\
    \ verifies the AUTN.  If this is successful, the peer is talking to\n   a legitimate\
    \ EAP server and proceeds to send the EAP-Response/\n   AKA-Challenge.  This message\
    \ contains a result parameter that allows\n   the EAP server, in turn, to authenticate\
    \ the peer, and the AT_MAC\n   attribute to integrity protect the EAP message.\n\
    \   The EAP server verifies that the RES and the MAC in the EAP-Response/\n  \
    \ AKA-Challenge packet are correct.  Because protected success\n   indications\
    \ are not used in this example, the EAP server sends the\n   EAP-Success packet,\
    \ indicating that the authentication was\n   successful.  (Protected success indications\
    \ are discussed in\n   Section 6.2.)  The EAP server may also include derived\
    \ keying\n   material in the message it sends to the authenticator.  The peer\
    \ has\n   derived the same keying material, so the authenticator does not\n  \
    \ forward the keying material to the peer along with EAP-Success.\n       Peer\
    \                                             Authenticator\n          |     \
    \                 EAP-Request/Identity             |\n          |<------------------------------------------------------|\n\
    \          |                                                       |\n       \
    \   | EAP-Response/Identity                                 |\n          | (Includes\
    \ user's NAI)                                 |\n          |------------------------------------------------------>|\n\
    \          |                            +------------------------------+\n   \
    \       |                            | Server runs AKA algorithms,  |\n      \
    \    |                            | generates RAND and AUTN.     |\n         \
    \ |                            +------------------------------+\n          | \
    \                        EAP-Request/AKA-Challenge     |\n          |        \
    \                 (AT_RAND, AT_AUTN, AT_MAC)    |\n          |<------------------------------------------------------|\n\
    \      +-------------------------------------+                     |\n      |\
    \ Peer runs AKA algorithms,           |                     |\n      | verifies\
    \ AUTN and MAC, derives RES  |                     |\n      | and session key\
    \                     |                     |\n      +-------------------------------------+\
    \                     |\n          | EAP-Response/AKA-Challenge              \
    \              |\n          | (AT_RES, AT_MAC)                               \
    \       |\n          |------------------------------------------------------>|\n\
    \          |                          +--------------------------------+\n   \
    \       |                          | Server checks the given RES,   |\n      \
    \    |                          | and MAC and finds them correct.|\n         \
    \ |                          +--------------------------------+\n          | \
    \                                         EAP-Success  |\n          |<------------------------------------------------------|\n\
    \              Figure 1: EAP-AKA full authentication procedure\n   Figure 2 shows\
    \ how the EAP server rejects the Peer due to a failed\n   authentication.\n  \
    \     Peer                                              Authenticator\n      \
    \    |                      EAP-Request/Identity             |\n          |<------------------------------------------------------|\n\
    \          |                                                       |\n       \
    \   | EAP-Response/Identity                                 |\n          | (Includes\
    \ user's NAI)                                 |\n          |------------------------------------------------------>|\n\
    \          |                            +------------------------------+\n   \
    \       |                            | Server runs AKA algorithms,  |\n      \
    \    |                            | generates RAND and AUTN.     |\n         \
    \ |                            +------------------------------+\n          | \
    \                     EAP-Request/AKA-Challenge        |\n          |        \
    \              (AT_RAND, AT_AUTN, AT_MAC)       |\n          |<------------------------------------------------------|\n\
    \      +-------------------------------------+                     |\n      |\
    \ Peer runs AKA algorithms,           |                     |\n      | possibly\
    \ verifies AUTN, and sends an|                     |\n      | invalid response\
    \                    |                     |\n      +-------------------------------------+\
    \                     |\n          | EAP-Response/AKA-Challenge              \
    \              |\n          | (AT_RES, AT_MAC)                               \
    \       |\n          |------------------------------------------------------>|\n\
    \          |              +------------------------------------------+\n     \
    \     |              | Server checks the given RES and the MAC, |\n          |\
    \              | and finds one of them incorrect.         |\n          |     \
    \         +------------------------------------------+\n          |          \
    \            EAP-Request/AKA-Notification     |\n          |<------------------------------------------------------|\n\
    \          | EAP-Response/AKA-Notification                         |\n       \
    \   |------------------------------------------------------>|\n          |   \
    \                                       EAP-Failure  |\n          |<------------------------------------------------------|\n\
    \                    Figure 2: Peer authentication fails\n   Figure 3 shows the\
    \ peer rejecting the AUTN of the EAP server.\n   The peer sends an explicit error\
    \ message (EAP-Response/\n   AKA-Authentication-Reject) to the EAP server, as\
    \ usual in AKA when\n   AUTN is incorrect.  This allows the EAP server to produce\
    \ the same\n   error statistics that AKA generally produces in UMTS or CDMA2000.\n\
    \        Peer                                             Authenticator\n    \
    \      |                      EAP-Request/Identity             |\n          |<------------------------------------------------------|\n\
    \          | EAP-Response/Identity                                 |\n       \
    \   | (Includes user's NAI)                                 |\n          |------------------------------------------------------>|\n\
    \          |                            +------------------------------+\n   \
    \       |                            | Server runs AKA algorithms,  |\n      \
    \    |                            | generates RAND and a bad AUTN|\n         \
    \ |                            +------------------------------+\n          | \
    \                        EAP-Request/AKA-Challenge     |\n          |        \
    \                 (AT_RAND, AT_AUTN, AT_MAC)    |\n          |<------------------------------------------------------|\n\
    \      +-------------------------------------+                     |\n      |\
    \ Peer runs AKA algorithms            |                     |\n      | and discovers\
    \ AUTN that can not be  |                     |\n      | verified            \
    \                |                     |\n      +-------------------------------------+\
    \                     |\n          | EAP-Response/AKA-Authentication-Reject  \
    \              |\n          |------------------------------------------------------>|\n\
    \          |                                          EAP-Failure  |\n       \
    \   |<------------------------------------------------------|\n              \
    \    Figure 3: Network authentication fails\n   The AKA uses shared secrets between\
    \ the Peer and the Peer's home\n   operator, together with a sequence number,\
    \ to actually perform an\n   authentication.  In certain circumstances, shown\
    \ in Figure 4, it is\n   possible for the sequence numbers to get out of sequence.\n\
    \        Peer                                             Authenticator\n    \
    \      |                      EAP-Request/Identity             |\n          |<------------------------------------------------------|\n\
    \          | EAP-Response/Identity                                 |\n       \
    \   | (Includes user's NAI)                                 |\n          |------------------------------------------------------>|\n\
    \          |                            +------------------------------+\n   \
    \       |                            | Server runs AKA algorithms,  |\n      \
    \    |                            | generates RAND and AUTN.     |\n         \
    \ |                            +------------------------------+\n          | \
    \                        EAP-Request/AKA-Challenge     |\n          |        \
    \                 (AT_RAND, AT_AUTN, AT_MAC)    |\n          |<------------------------------------------------------|\n\
    \      +-------------------------------------+                     |\n      |\
    \ Peer runs AKA algorithms            |                     |\n      | and discovers\
    \ AUTN that contains an |                     |\n      | inappropriate sequence\
    \ number       |                     |\n      +-------------------------------------+\
    \                     |\n          | EAP-Response/AKA-Synchronization-Failure\
    \              |\n          | (AT_AUTS)                                      \
    \       |\n          |------------------------------------------------------>|\n\
    \          |                              +---------------------------+\n    \
    \      |                              | Perform resynchronization |\n        \
    \  |                              | Using AUTS and            |\n          | \
    \                             | the sent RAND             |\n          |     \
    \                         +---------------------------+\n          |         \
    \                                              |\n                 Figure 4: Sequence\
    \ number synchronization\n   After the resynchronization process has taken place\
    \ in the server and\n   AAA side, the process continues by the server side sending\
    \ a new\n   EAP-Request/AKA-Challenge message.\n   In addition to the full authentication\
    \ scenarios described above,\n   EAP-AKA includes a fast re-authentication procedure,\
    \ which is\n   specified in Section 5.  Fast re-authentication is based on keys\n\
    \   derived on full authentication.  If the peer has maintained state\n   information\
    \ for re-authentication and wants to use fast\n   re-authentication, then the\
    \ peer indicates this by using a specific\n   fast re-authentication identity\
    \ instead of the permanent identity or\n   a pseudonym identity.\n"
- title: 4.  Operation
  contents:
  - '4.  Operation

    '
- title: 4.1.  Identity Management
  contents:
  - '4.1.  Identity Management

    '
- title: 4.1.1.  Format, Generation, and Usage of Peer Identities
  contents:
  - '4.1.1.  Format, Generation, and Usage of Peer Identities

    '
- title: 4.1.1.1.  General
  contents:
  - "4.1.1.1.  General\n   In the beginning of EAP authentication, the Authenticator\
    \ or the EAP\n   server usually issues the EAP-Request/Identity packet to the\
    \ peer.\n   The peer responds with EAP-Response/Identity, which contains the\n\
    \   user's identity.  The formats of these packets are specified in\n   [RFC3748].\n\
    \   Subscribers of mobile networks are identified with the International\n   Mobile\
    \ Subscriber Identity (IMSI) [TS23.003].  The IMSI is a string\n   of not more\
    \ than 15 digits.  It is composed of a Mobile Country Code\n   (MCC) of 3 digits,\
    \ a Mobile Network Code (MNC) of 2 or 3 digits, and\n   a Mobile Subscriber Identification\
    \ Number (MSIN) of not more than 10\n   digits.  MCC and MNC uniquely identify\
    \ the GSM operator and help\n   identify the AuC from which the authentication\
    \ vectors need to be\n   retrieved for this subscriber.\n   Internet AAA protocols\
    \ identify users with the Network Access\n   Identifier (NAI) [RFC4282].  When\
    \ used in a roaming environment, the\n   NAI is composed of a username and a realm,\
    \ separated with \"@\"\n   (username@realm).  The username portion identifies\
    \ the subscriber\n   within the realm.\n   This section specifies the peer identity\
    \ format used in EAP-AKA.  In\n   this document, the term identity or peer identity\
    \ refers to the whole\n   identity string that is used to identify the peer. \
    \ The peer identity\n   may include a realm portion.  \"Username\" refers to the\
    \ portion of the\n   peer identity that identifies the user, i.e., the username\
    \ does not\n   include the realm portion.\n"
- title: 4.1.1.2.  Identity Privacy Support
  contents:
  - "4.1.1.2.  Identity Privacy Support\n   EAP-AKA includes optional identity privacy\
    \ (anonymity) support that\n   can be used to hide the cleartext permanent identity\
    \ and thereby make\n   the subscriber's EAP exchanges untraceable to eavesdroppers.\
    \  Because\n   the permanent identity never changes, revealing it would help\n\
    \   observers to track the user.  The permanent identity is usually based\n  \
    \ on the IMSI, which may further help the tracking, because the same\n   identifier\
    \ may be used in other contexts as well.  Identity privacy\n   is based on temporary\
    \ identities, or pseudonyms, which are equivalent\n   to but separate from the\
    \ Temporary Mobile Subscriber Identities\n   (TMSI) that are used on cellular\
    \ networks.  Please see Section 12.1\n   for security considerations regarding\
    \ identity privacy.\n"
- title: 4.1.1.3.  Username Types in EAP-AKA Identities
  contents:
  - "4.1.1.3.  Username Types in EAP-AKA Identities\n   There are three types of usernames\
    \ in EAP-AKA peer identities:\n   (1) Permanent usernames.  For example,\n   0123456789098765@myoperator.com\
    \ might be a valid permanent identity.\n   In this example, 0123456789098765 is\
    \ the permanent username.\n   (2) Pseudonym usernames.  For example, 2s7ah6n9q@myoperator.com\
    \ might\n   be a valid pseudonym identity.  In this example, 2s7ah6n9q is the\n\
    \   pseudonym username.\n   (3) Fast re-authentication usernames.  For example,\n\
    \   43953754@myoperator.com might be a valid fast re-authentication\n   identity.\
    \  In this case, 43953754 is the fast re-authentication\n   username.  Unlike\
    \ permanent usernames and pseudonym usernames, fast\n   re-authentication usernames\
    \ are one-time identifiers, which are not\n   re-used across EAP exchanges.\n\
    \   The first two types of identities are used only on full\n   authentication,\
    \ and the last type only on fast re-authentication.\n   When the optional identity\
    \ privacy support is not used, the\n   non-pseudonym permanent identity is used\
    \ on full authentication.  The\n   fast re-authentication exchange is specified\
    \ in Section 5.\n"
- title: 4.1.1.4.  Username Decoration
  contents:
  - "4.1.1.4.  Username Decoration\n   In some environments, the peer may need to\
    \ decorate the identity by\n   prepending or appending the username with a string,\
    \ in order to\n   indicate supplementary AAA routing information in addition to\
    \ the NAI\n   realm.  (The usage of an NAI realm portion is not considered to\
    \ be\n   decoration.)  Username decoration is out of the scope of this\n   document.\
    \  However, it should be noted that username decoration might\n   prevent the\
    \ server from recognizing a valid username.  Hence,\n   although the peer MAY\
    \ use username decoration in the identities that\n   the peer includes in EAP-Response/Identity,\
    \ and although the EAP\n   server MAY accept a decorated peer username in this\
    \ message, the peer\n   or the EAP server MUST NOT decorate any other peer identities\
    \ that\n   are used in various EAP-AKA attributes.  Only the identity used in\n\
    \   EAP-Response/Identity may be decorated.\n"
- title: 4.1.1.5.  NAI Realm Portion
  contents:
  - "4.1.1.5.  NAI Realm Portion\n   The peer MAY include a realm portion in the peer\
    \ identity, as per the\n   NAI format.  The use of a realm portion is not mandatory.\n\
    \   If a realm is used, the realm MAY be chosen by the subscriber's home\n   operator\
    \ and it MAY be a configurable parameter in the EAP-AKA peer\n   implementation.\
    \  In this case, the peer is typically configured with\n   the NAI realm of the\
    \ home operator.  Operators MAY reserve a specific\n   realm name for EAP-AKA\
    \ users.  This convention makes it easy to\n   recognize that the NAI identifies\
    \ an AKA subscriber.  Such a reserved\n   NAI realm may be useful as a hint of\
    \ the first authentication method\n   to use during method negotiation.  When\
    \ the peer is using a pseudonym\n   username instead of the permanent username,\
    \ the peer selects the\n   realm name portion similarly to how it selects the\
    \ realm portion when\n   using the permanent username.\n   If no configured realm\
    \ name is available, the peer MAY derive the\n   realm name from the MCC and MNC\
    \ portions of the IMSI.  A RECOMMENDED\n   way to derive the realm from the IMSI,\
    \ using the realm\n   3gppnetwork.org, will be specified in [TS23.003].\n   Some\
    \ old implementations derive the realm name from the IMSI by\n   concatenating\
    \ \"mnc\", the MNC digits of IMSI, \".mcc\", the MCC digits\n   of IMSI, and \"\
    .owlan.org\".  For example, if the IMSI is\n   123456789098765, and the MNC is\
    \ three digits long, then the derived\n   realm name is \"mnc456.mcc123.owlan.org\"\
    .  As there are no DNS servers\n   running at owlan.org, these realm names can\
    \ only be used with\n   manually configured AAA routing.  New implementations\
    \ SHOULD use the\n   mechanism specified in [TS23.003] instead of owlan.org.\n\
    \   The IMSI is a string of digits without any explicit structure, so the\n  \
    \ peer may not be able to determine the length of the MNC portion.  If\n   the\
    \ peer is not able to determine whether the MNC is two or three\n   digits long,\
    \ the peer MAY use a 3-digit MNC.  If the correct length\n   of the MNC is two,\
    \ then the MNC used in the realm name includes the\n   first digit of MSIN.  Hence,\
    \ when configuring AAA networks for\n   operators that have 2-digit MNC's, the\
    \ network SHOULD also be\n   prepared for realm names with incorrect 3-digit MNC's.\n"
- title: 4.1.1.6.  Format of the Permanent Username
  contents:
  - "4.1.1.6.  Format of the Permanent Username\n   The non-pseudonym permanent username\
    \ SHOULD be derived from the IMSI.\n   In this case, the permanent username MUST\
    \ be of the format \"0\" |\n   IMSI, where the character \"|\" denotes concatenation.\
    \  In other words,\n   the first character of the username is the digit zero (ASCII\
    \ value 30\n   hexadecimal), followed by the IMSI.  The IMSI is an ASCII string\
    \ that\n   consists of not more than 15 decimal digits (ASCII values between 30\n\
    \   and 39 hexadecimal), one character per IMSI digit, in the order as\n   specified\
    \ in [TS23.003].  For example, a permanent username derived\n   from the IMSI\
    \ 295023820005424 would be encoded as the ASCII string\n   \"0295023820005424\"\
    \ (byte values in hexadecimal notation: 30 32 39 35\n   30 32 33 38 32 30 30 30\
    \ 35 34 32 34)\n   The EAP server MAY use the leading \"0\" as a hint to try EAP-AKA\
    \ as\n   the first authentication method during method negotiation, rather\n \
    \  than using, for example, EAP-SIM.  The EAP-AKA server MAY propose\n   EAP-AKA\
    \ even if the leading character was not \"0\".\n   Alternatively, an implementation\
    \ MAY choose a permanent username that\n   is not based on the IMSI.  In this\
    \ case the selection of the\n   username, its format, and its processing is out\
    \ of the scope of this\n   document.  In this case, the peer implementation MUST\
    \ NOT prepend any\n   leading characters to the username.\n"
- title: 4.1.1.7.  Generating Pseudonyms and Fast Re-Authentication Identities by
  contents:
  - "4.1.1.7.  Generating Pseudonyms and Fast Re-Authentication Identities by\n  \
    \        the Server\n   Pseudonym usernames and fast re-authentication identities\
    \ are\n   generated by the EAP server.  The EAP server produces pseudonym\n  \
    \ usernames and fast re-authentication identities in an\n   implementation-dependent\
    \ manner.  Only the EAP server needs to be\n   able to map the pseudonym username\
    \ to the permanent identity, or to\n   recognize a fast re-authentication identity.\n\
    \   EAP-AKA includes no provisions to ensure that the same EAP server\n   that\
    \ generated a pseudonym username will be used on the\n   authentication exchange\
    \ when the pseudonym username is used.  It is\n   recommended that the EAP servers\
    \ implement some centralized mechanism\n   to allow all EAP servers of the home\
    \ operator to map pseudonyms\n   generated by other severs to the permanent identity.\
    \  If no such\n   mechanism is available, then the EAP server, failing to understand\
    \ a\n   pseudonym issued by another server, can request the peer to send the\n\
    \   permanent identity.\n   When issuing a fast re-authentication identity, the\
    \ EAP server may\n   include a realm name in the identity that will cause the\
    \ fast\n   re-authentication request to be forwarded to the same EAP server.\n\
    \   When generating fast re-authentication identities, the server SHOULD\n   choose\
    \ a fresh, new fast re-authentication identity that is different\n   from the\
    \ previous ones that were used after the same full\n   authentication exchange.\
    \  A full authentication exchange and the\n   associated fast re-authentication\
    \ exchanges are referred to here as\n   the same \"full authentication context\"\
    .  The fast re-authentication\n   identity SHOULD include a random component.\
    \  The random component\n   works as a full authentication context identifier.\
    \  A context-\n   specific fast re-authentication identity can help the server\
    \ to\n   detect whether its fast re-authentication state information matches\n\
    \   the peer's fast re-authentication state information (in other words,\n   whether\
    \ the state information is from the same full authentication\n   exchange).  The\
    \ random component also makes the fast re-\n   authentication identities unpredictable,\
    \ so an attacker cannot\n   initiate a fast re-authentication exchange to get\
    \ the server's\n   EAP-Request/AKA-Reauthentication packet.\n   Transmitting pseudonyms\
    \ and fast re-authentication identities from\n   the server to the peer is discussed\
    \ in Section 4.1.1.8.  The\n   pseudonym is transmitted as a username, without\
    \ an NAI realm, and the\n   fast re-authentication identity is transmitted as\
    \ a complete NAI,\n   including a realm portion if a realm is required.  The realm\
    \ is\n   included in the fast re-authentication identity in order to allow the\n\
    \   server to include a server-specific realm.\n   Regardless of construction\
    \ method, the pseudonym username MUST\n   conform to the grammar specified for\
    \ the username portion of an NAI.\n   Also, the fast re-authentication identity\
    \ MUST conform to the NAI\n   grammar.  The EAP servers that the subscribers of\
    \ an operator can use\n   MUST ensure that the pseudonym usernames and the username\
    \ portions\n   used in fast re-authentication identities that they generate are\n\
    \   unique.\n   In any case, it is necessary that permanent usernames, pseudonym\n\
    \   usernames, and fast re-authentication usernames are separate and\n   recognizable\
    \ from each other.  It is also desirable that EAP-SIM and\n   EAP-AKA usernames\
    \ be recognizable from each other as an aid to the\n   server when deciding which\
    \ method to offer.\n   In general, it is the task of the EAP server and the policies\
    \ of its\n   administrator to ensure sufficient separation of the usernames.\n\
    \   Pseudonym usernames and fast re-authentication usernames are both\n   produced\
    \ and used by the EAP server.  The EAP server MUST compose\n   pseudonym usernames\
    \ and fast re-authentication usernames so that it\n   can recognize if an NAI\
    \ username is an EAP-AKA pseudonym username or\n   an EAP-AKA fast re-authentication\
    \ username.  For instance, when the\n   usernames have been derived from the IMSI,\
    \ the server could use\n   different leading characters in the pseudonym usernames\
    \ and fast\n   re-authentication usernames (e.g., the pseudonym could begin with\
    \ a\n   leading \"2\" character).  When mapping a fast re-authentication\n   identity\
    \ to a permanent identity, the server SHOULD only examine the\n   username portion\
    \ of the fast re-authentication identity and ignore\n   the realm portion of the\
    \ identity.\n   Because the peer may fail to save a pseudonym username that was\
    \ sent\n   in an EAP-Request/AKA-Challenge (for example, due to malfunction),\n\
    \   the EAP server SHOULD maintain, at least, the most recently used\n   pseudonym\
    \ username in addition to the most recently issued pseudonym\n   username.  If\
    \ the authentication exchange is not completed\n   successfully, then the server\
    \ SHOULD NOT overwrite the pseudonym\n   username that was issued during the most\
    \ recent successful\n   authentication exchange.\n"
- title: 4.1.1.8.  Transmitting Pseudonyms and Fast Re-Authentication Identities
  contents:
  - "4.1.1.8.  Transmitting Pseudonyms and Fast Re-Authentication Identities\n   \
    \       to the Peer\n   The server transmits pseudonym usernames and fast re-authentication\n\
    \   identities to the peer in cipher, using the AT_ENCR_DATA attribute.\n   The\
    \ EAP-Request/AKA-Challenge message MAY include an encrypted\n   pseudonym username\
    \ and/or an encrypted fast re-authentication\n   identity in the value field of\
    \ the AT_ENCR_DATA attribute.  Because\n   identity privacy support and fast re-authentication\
    \ are optional to\n   implement, the peer MAY ignore the AT_ENCR_DATA attribute\
    \ and always\n   use the permanent identity.  On fast re-authentication (discussed\
    \ in\n   Section 5), the server MAY include a new, encrypted fast re-\n   authentication\
    \ identity in the EAP-Request/AKA-Reauthentication\n   message.\n   On receipt\
    \ of the EAP-Request/AKA-Challenge, the peer MAY decrypt the\n   encrypted data\
    \ in AT_ENCR_DATA; and if a pseudonym username is\n   included, the peer may use\
    \ the obtained pseudonym username on the\n   next full authentication.  If a fast\
    \ re-authentication identity is\n   included, then the peer MAY save it together\
    \ with other fast re-\n   authentication state information, as discussed in Section\
    \ 5, for the\n   next fast re-authentication.\n   If the peer does not receive\
    \ a new pseudonym username in the\n   EAP-Request/AKA-Challenge message, the peer\
    \ MAY use an old pseudonym\n   username instead of the permanent username on next\
    \ full\n   authentication.  The username portions of fast re-authentication\n\
    \   identities are one-time usernames, which the peer MUST NOT re-use.\n   When\
    \ the peer uses a fast re-authentication identity in an EAP\n   exchange, the\
    \ peer MUST discard the fast re-authentication identity\n   and not re-use it\
    \ in another EAP authentication exchange, even if the\n   authentication exchange\
    \ was not completed.\n"
- title: 4.1.1.9.  Usage of the Pseudonym by the Peer
  contents:
  - "4.1.1.9.  Usage of the Pseudonym by the Peer\n   When the optional identity privacy\
    \ support is used on full\n   authentication, the peer MAY use a pseudonym username\
    \ received as\n   part of a previous full authentication sequence as the username\n\
    \   portion of the NAI.  The peer MUST NOT modify the pseudonym username\n   received\
    \ in AT_NEXT_PSEUDONYM.  However, as discussed above, the peer\n   MAY need to\
    \ decorate the username in some environments by appending\n   or prepending the\
    \ username with a string that indicates supplementary\n   AAA routing information.\n\
    \   When using a pseudonym username in an environment where a realm\n   portion\
    \ is used, the peer concatenates the received pseudonym\n   username with the\
    \ \"@\" character and an NAI realm portion.  The\n   selection of the NAI realm\
    \ is discussed above.  The peer can select\n   the realm portion similarly, regardless\
    \ of whether it uses the\n   permanent username or a pseudonym username.\n"
- title: 4.1.1.10.  Usage of the Fast Re-Authentication Identity by the Peer
  contents:
  - "4.1.1.10.  Usage of the Fast Re-Authentication Identity by the Peer\n   On fast\
    \ re-authentication, the peer uses the fast re-authentication\n   identity received\
    \ as part of the previous authentication sequence.  A\n   new fast re-authentication\
    \ identity may be delivered as part of both\n   full authentication and fast re-authentication.\
    \  The peer MUST NOT\n   modify the username part of the fast re-authentication\
    \ identity\n   received in AT_NEXT_REAUTH_ID, except in cases when username\n\
    \   decoration is required.  Even in these cases, the \"root\" fast\n   re-authentication\
    \ username must not be modified, but it may be\n   appended or prepended with\
    \ another string.\n"
- title: 4.1.2.  Communicating the Peer Identity to the Server
  contents:
  - '4.1.2.  Communicating the Peer Identity to the Server

    '
- title: 4.1.2.1.  General
  contents:
  - "4.1.2.1.  General\n   The peer identity MAY be communicated to the server with\
    \ the\n   EAP-Response/Identity message.  This message MAY contain the\n   permanent\
    \ identity, a pseudonym identity, or a fast re-authentication\n   identity.  If\
    \ the peer uses the permanent identity or a pseudonym\n   identity, which the\
    \ server is able to map to the permanent identity,\n   then the authentication\
    \ proceeds as discussed in the overview of\n   Section 3.  If the peer uses a\
    \ fast re-authentication identity, and\n   if the fast re-authentication identity\
    \ matches with a valid fast\n   re-authentication identity maintained by the server,\
    \ then a fast\n   re-authentication exchange is performed, as described in Section\
    \ 5.\n   The peer identity can also be transmitted from the peer to the server\n\
    \   using EAP-AKA messages instead of EAP-Response/Identity.  In this\n   case,\
    \ the server includes an identity requesting attribute\n   (AT_ANY_ID_REQ, AT_FULLAUTH_ID_REQ\
    \ or AT_PERMANENT_ID_REQ) in the\n   EAP-Request/AKA-Identity message; and the\
    \ peer includes the\n   AT_IDENTITY attribute, which contains the peer's identity,\
    \ in the\n   EAP-Response/AKA-Identity message.  The AT_ANY_ID_REQ attribute is\
    \ a\n   general identity requesting attribute, which the server uses if it\n \
    \  does not specify which kind of an identity the peer should return in\n   AT_IDENTITY.\
    \  The server uses the AT_FULLAUTH_ID_REQ attribute to\n   request either the\
    \ permanent identity or a pseudonym identity.  The\n   server uses the AT_PERMANENT_ID_REQ\
    \ attribute to request that the\n   peer send its permanent identity.  The EAP-Request/AKA-Challenge,\n\
    \   EAP-Response/AKA-Challenge, or the packets used on fast re-\n   authentication\
    \ may optionally include the AT_CHECKCODE attribute,\n   which enables the protocol\
    \ peers to ensure the integrity of the\n   AKA-Identity packets.  AT_CHECKCODE\
    \ is specified in Section 10.13.\n   The identity format in the AT_IDENTITY attribute\
    \ is the same as in\n   the EAP-Response/Identity packet (except that identity\
    \ decoration is\n   not allowed).  The AT_IDENTITY attribute contains a permanent\n\
    \   identity, a pseudonym identity, or a fast re-authentication identity.\n  \
    \ Please note that only the EAP-AKA peer and the EAP-AKA server process\n   the\
    \ AT_IDENTITY attribute and entities that pass through; EAP packets\n   do not\
    \ process this attribute.  Hence, the authenticator and other\n   intermediate\
    \ AAA elements (such as possible AAA proxy servers) will\n   continue to refer\
    \ to the peer with the original identity from the\n   EAP-Response/Identity packet\
    \ unless the identity authenticated in the\n   AT_IDENTITY attribute is communicated\
    \ to them in another way within\n   the AAA protocol.\n"
- title: 4.1.2.2.  Relying on EAP-Response/Identity Discouraged
  contents:
  - "4.1.2.2.  Relying on EAP-Response/Identity Discouraged\n   The EAP-Response/Identity\
    \ packet is not method specific; therefore,\n   in many implementations it may\
    \ be handled by an EAP Framework.  This\n   introduces an additional layer of\
    \ processing between the EAP peer and\n   EAP server.  The extra layer of processing\
    \ may cache identity\n   responses or add decorations to the identity.  A modification\
    \ of the\n   identity response will cause the EAP peer and EAP server to use\n\
    \   different identities in the key derivation, which will cause the\n   protocol\
    \ to fail.\n   For this reason, it is RECOMMENDED that the EAP peer and server\
    \ use\n   the method-specific identity attributes in EAP-AKA, and the server is\n\
    \   strongly discouraged from relying upon the EAP-Response/Identity.\n   In particular,\
    \ if the EAP server receives a decorated identity in\n   EAP-Response/Identity,\
    \ then the EAP server MUST use the\n   identity-requesting attributes to request\
    \ the peer to send an\n   unmodified and undecorated copy of the identity in AT_IDENTITY.\n"
- title: 4.1.3.  Choice of Identity for the EAP-Response/Identity
  contents:
  - "4.1.3.  Choice of Identity for the EAP-Response/Identity\n   If EAP-AKA peer\
    \ is started upon receiving an EAP-Request/Identity\n   message, then the peer\
    \ MAY use an EAP-AKA identity in the EAP-\n   Response/Identity packet.  In this\
    \ case, the peer performs the\n   following steps.\n   If the peer has maintained\
    \ fast re-authentication state information\n   and if the peer wants to use fast\
    \ re-authentication, then the peer\n   transmits the fast re-authentication identity\
    \ in\n   EAP-Response/Identity.\n   Else, if the peer has a pseudonym username\
    \ available, then the peer\n   transmits the pseudonym identity in EAP-Response/Identity.\n\
    \   In other cases, the peer transmits the permanent identity in\n   EAP-Response/Identity.\n"
- title: 4.1.4.  Server Operation in the Beginning of EAP-AKA Exchange
  contents:
  - "4.1.4.  Server Operation in the Beginning of EAP-AKA Exchange\n   As discussed\
    \ in Section 4.1.2.2, the server SHOULD NOT rely on an\n   identity string received\
    \ in EAP-Response/Identity.  Therefore, the\n   RECOMMENDED way to start an EAP-AKA\
    \ exchange is to ignore any\n   received identity strings.  The server SHOULD\
    \ begin the EAP-AKA\n   exchange by issuing the EAP-Request/AKA-Identity packet\
    \ with an\n   identity-requesting attribute to indicate that the server wants\
    \ the\n   peer to include an identity in the AT_IDENTITY attribute of the EAP-\n\
    \   Response/AKA-Identity message.  Three methods to request an identity\n   from\
    \ the peer are discussed below.\n   If the server chooses to not ignore the contents\
    \ of\n   EAP-Response/Identity, then the server may already receive an EAP-AKA\n\
    \   identity in this packet.  However, if the EAP server has not received\n  \
    \ any EAP-AKA peer identity (permanent identity, pseudonym identity, or\n   fast\
    \ re-authentication identity) from the peer when sending the first\n   EAP-AKA\
    \ request, or if the EAP server has received an\n   EAP-Response/Identity packet\
    \ but the contents do not appear to be a\n   valid permanent identity, pseudonym\
    \ identity, or a re-authentication\n   identity, then the server MUST request\
    \ an identity from the peer\n   using one of the methods below.\n   The server\
    \ sends the EAP-Request/AKA-Identity message with the\n   AT_PERMANENT_ID_REQ\
    \ attribute to indicate that the server wants the\n   peer to include the permanent\
    \ identity in the AT_IDENTITY attribute\n   of the EAP-Response/AKA-Identity message.\
    \  This is done in the\n   following cases:\n   o  The server does not support\
    \ fast re-authentication or identity\n      privacy.\n   o  The server decided\
    \ to process a received identity, and the server\n      recognizes the received\
    \ identity as a pseudonym identity, but the\n      server is not able to map the\
    \ pseudonym identity to a permanent\n      identity.\n   The server issues the\
    \ EAP-Request/AKA-Identity packet with the\n   AT_FULLAUTH_ID_REQ attribute to\
    \ indicate that the server wants the\n   peer to include a full authentication\
    \ identity (pseudonym identity or\n   permanent identity) in the AT_IDENTITY attribute\
    \ of the\n   EAP-Response/AKA-Identity message.  This is done in the following\n\
    \   cases:\n   o  The server does not support fast re-authentication and the server\n\
    \      supports identity privacy\n   o  The server decided to process a received\
    \ identity, and the server\n      recognizes the received identity as a re-authentication\
    \ identity\n      but the server is not able to map the re-authentication identity\n\
    \      to a permanent identity\n   The server issues the EAP-Request/AKA-Identity\
    \ packet with the\n   AT_ANY_ID_REQ attribute to indicate that the server wants\
    \ the peer to\n   include an identity in the AT_IDENTITY attribute of the\n  \
    \ EAP-Response/AKA-Identity message, and the server does not indicate\n   any\
    \ preferred type for the identity.  This is done in other cases,\n   such as when\
    \ the server ignores a received EAP-Response/Identity,\n   when the server does\
    \ not have any identity, or when the server does\n   not recognize the format\
    \ of a received identity.\n"
- title: 4.1.5.  Processing of EAP-Request/AKA-Identity by the Peer
  contents:
  - "4.1.5.  Processing of EAP-Request/AKA-Identity by the Peer\n   Upon receipt of\
    \ an EAP-Request/AKA-Identity message, the peer MUST\n   perform the following\
    \ steps.\n   If the EAP-Request/AKA-Identity includes AT_PERMANENT_ID_REQ, and\
    \ if\n   the peer does not have a pseudonym available, then the peer MUST\n  \
    \ respond with EAP-Response/AKA-Identity and include the permanent\n   identity\
    \ in AT_IDENTITY.  If the peer has a pseudonym available, then\n   the peer MAY\
    \ refuse to send the permanent identity; hence, in this\n   case the peer MUST\
    \ either respond with EAP-Response/AKA-Identity and\n   include the permanent\
    \ identity in AT_IDENTITY or respond with\n   EAP-Response/AKA-Client-Error packet\
    \ with code \"unable to process\n   packet\".\n   If the EAP-Request/AKA-Identity\
    \ includes AT_FULL_AUTH_ID_REQ, and if\n   the peer has a pseudonym available,\
    \ then the peer SHOULD respond with\n   EAP-Response/AKA-Identity and include\
    \ the pseudonym identity in\n   AT_IDENTITY.  If the peer does not have a pseudonym\
    \ when it receives\n   this message, then the peer MUST respond with EAP-Response/\n\
    \   AKA-Identity and include the permanent identity in AT_IDENTITY.  The\n   Peer\
    \ MUST NOT use a fast re-authentication identity in the\n   AT_IDENTITY attribute.\n\
    \   If the EAP-Request/AKA-Identity includes AT_ANY_ID_REQ, and if the\n   peer\
    \ has maintained fast re-authentication state information and\n   wants to use\
    \ fast re-authentication, then the peer responds with\n   EAP-Response/AKA-Identity\
    \ and includes the fast re-authentication\n   identity in AT_IDENTITY.  Else,\
    \ if the peer has a pseudonym identity\n   available, then the peer responds with\
    \ EAP-Response/AKA-Identity and\n   includes the pseudonym identity in AT_IDENTITY.\
    \  Else, the peer\n   responds with EAP-Response/AKA-Identity and includes the\
    \ permanent\n   identity in AT_IDENTITY.\n   An EAP-AKA exchange may include several\
    \ EAP/AKA-Identity rounds.  The\n   server may issue a second EAP-Request/AKA-Identity,\
    \ if it was not\n   able to recognize the identity the peer used in the previous\n\
    \   AT_IDENTITY attribute.  At most three EAP/AKA-Identity rounds can be\n   used,\
    \ so the peer MUST NOT respond to more than three\n   EAP-Request/AKA-Identity\
    \ messages within an EAP exchange.  The peer\n   MUST verify that the sequence\
    \ of EAP-Request/AKA-Identity packets the\n   peer receives comply with the sequencing\
    \ rules defined in this\n   document.  That is, AT_ANY_ID_REQ can only be used\
    \ in the first\n   EAP-Request/AKA-Identity; in other words, AT_ANY_ID_REQ MUST\
    \ NOT be\n   used in the second or third EAP-Request/AKA-Identity.\n   AT_FULLAUTH_ID_REQ\
    \ MUST NOT be used if the previous\n   EAP-Request/AKA-Identity included AT_PERMANENT_ID_REQ.\
    \  The peer\n   operation, in cases when it receives an unexpected attribute or\
    \ an\n   unexpected message, is specified in Section 6.3.1.\n"
- title: 4.1.6.  Attacks against Identity Privacy
  contents:
  - "4.1.6.  Attacks against Identity Privacy\n   The section above specifies two\
    \ possible ways the peer can operate\n   upon receipt of AT_PERMANENT_ID_REQ because\
    \ a received\n   AT_PERMANENT_ID_REQ does not necessarily originate from the valid\n\
    \   network.  However, an active attacker may transmit an\n   EAP-Request/AKA-Identity\
    \ packet with an AT_PERMANENT_ID_REQ attribute\n   to the peer, in an effort to\
    \ find out the true identity of the user.\n   If the peer does not want to reveal\
    \ its permanent identity, then the\n   peer sends the EAP-Response/AKA-Client-Error\
    \ packet with the error\n   code \"unable to process packet\", and the authentication\
    \ exchange\n   terminates.\n   Basically, there are two different policies that\
    \ the peer can employ\n   with regard to AT_PERMANENT_ID_REQ.  A \"conservative\"\
    \ peer assumes\n   that the network is able to maintain pseudonyms robustly. \
    \ Therefore,\n   if a conservative peer has a pseudonym username, the peer responds\n\
    \   with EAP-Response/AKA-Client-Error to the EAP packet with\n   AT_PERMANENT_ID_REQ,\
    \ because the peer believes that the valid network\n   is able to map the pseudonym\
    \ identity to the peer's permanent\n   identity.  (Alternatively, the conservative\
    \ peer may accept\n   AT_PERMANENT_ID_REQ in certain circumstances, for example\
    \ if the\n   pseudonym was received a long time ago.)  The benefit of this policy\n\
    \   is that it protects the peer against active attacks on anonymity.  On\n  \
    \ the other hand, a \"liberal\" peer always accepts the\n   AT_PERMANENT_ID_REQ\
    \ and responds with the permanent identity.  The\n   benefit of this policy is\
    \ that it works even if the valid network\n   sometimes loses pseudonyms and is\
    \ not able to map them to the\n   permanent identity.\n"
- title: 4.1.7.  Processing of AT_IDENTITY by the Server
  contents:
  - "4.1.7.  Processing of AT_IDENTITY by the Server\n   When the server receives\
    \ an EAP-Response/AKA-Identity message with\n   the AT_IDENTITY (in response to\
    \ the server's identity requesting\n   attribute), the server MUST operate as\
    \ follows.\n   If the server used AT_PERMANENT_ID_REQ, and if the AT_IDENTITY\
    \ does\n   not contain a valid permanent identity, then the server sends an\n\
    \   EAP-Request/AKA-Notification packet with AT_NOTIFICATION code\n   \"General\
    \ failure\" (16384) to terminate the EAP exchange.  If the\n   server recognizes\
    \ the permanent identity and is able to continue,\n   then the server proceeds\
    \ with full authentication by sending\n   EAP-Request/AKA-Challenge.\n   If the\
    \ server used AT_FULLAUTH_ID_REQ, and if AT_IDENTITY contains a\n   valid permanent\
    \ identity or a pseudonym identity that the server can\n   map to a valid permanent\
    \ identity, then the server proceeds with full\n   authentication by sending EAP-Request/AKA-Challenge.\
    \  If AT_IDENTITY\n   contains a pseudonym identity that the server is not able\
    \ to map to a\n   valid permanent identity, or an identity that the server is\
    \ not able\n   to recognize or classify, then the server sends EAP-Request/\n\
    \   AKA-Identity with AT_PERMANENT_ID_REQ.\n   If the server used AT_ANY_ID_REQ,\
    \ and if the AT_IDENTITY contains a\n   valid permanent identity or a pseudonym\
    \ identity that the server can\n   map to a valid permanent identity, then the\
    \ server proceeds with full\n   authentication by sending EAP-Request/ AKA-Challenge.\n\
    \   If the server used AT_ANY_ID_REQ, and if AT_IDENTITY contains a valid\n  \
    \ fast re-authentication identity and the server agrees on using\n   re-authentication,\
    \ then the server proceeds with fast\n   re-authentication by sending EAP-Request/AKA-Reauthentication\n\
    \   (Section 5).\n   If the server used AT_ANY_ID_REQ, and if the peer sent an\
    \ EAP-\n   Response/AKA-Identity with AT_IDENTITY that contains an identity that\n\
    \   the server recognizes as a fast re-authentication identity, but the\n   server\
    \ is not able to map the identity to a permanent identity, then\n   the server\
    \ sends EAP-Request/AKA-Identity with AT_FULLAUTH_ID_REQ.\n   If the server used\
    \ AT_ANY_ID_REQ, and if AT_IDENTITY contains a valid\n   fast re-authentication\
    \ identity, which the server is able to map to a\n   permanent identity, and if\
    \ the server does not want to use fast\n   re-authentication, then the server\
    \ proceeds with full authentication\n   by sending EAP-Request/AKA-Challenge.\n\
    \   If the server used AT_ANY_ID_REQ, and AT_IDENTITY contains an\n   identity\
    \ that the server recognizes as a pseudonym identity but the\n   server is not\
    \ able to map the pseudonym identity to a permanent\n   identity, then the server\
    \ sends EAP-Request/AKA-Identity with\n   AT_PERMANENT_ID_REQ.\n   If the server\
    \ used AT_ANY_ID_REQ, and AT_IDENTITY contains an\n   identity that the server\
    \ is not able to recognize or classify, then\n   the server sends EAP-Request/AKA-Identity\
    \ with AT_FULLAUTH_ID_REQ.\n"
- title: 4.2.  Message Sequence Examples (Informative)
  contents:
  - "4.2.  Message Sequence Examples (Informative)\n   This section contains non-normative\
    \ message sequence examples to\n   illustrate how the peer identity can be communicated\
    \ to the server.\n"
- title: 4.2.1.  Usage of AT_ANY_ID_REQ
  contents:
  - "4.2.1.  Usage of AT_ANY_ID_REQ\n   Obtaining the peer identity with EAP-AKA attributes\
    \ is illustrated in\n   Figure 5 below.\n       Peer                         \
    \                    Authenticator\n          |                              \
    \                         |\n          |                            +------------------------------+\n\
    \          |                            | Server does not have any     |\n   \
    \       |                            | Subscriber identity available|\n      \
    \    |                            | When starting EAP-AKA        |\n         \
    \ |                            +------------------------------+\n          | \
    \         EAP-Request/AKA-Identity                     |\n          |        \
    \  (AT_ANY_ID_REQ)                              |\n          |<------------------------------------------------------|\n\
    \          |                                                       |\n       \
    \   | EAP-Response/AKA-Identity                             |\n          | (AT_IDENTITY)\
    \                                         |\n          |------------------------------------------------------>|\n\
    \          |                                                       |\n       \
    \              Figure 5: Usage of AT_ANY_ID_REQ\n"
- title: 4.2.2.  Fall Back on Full Authentication
  contents:
  - "4.2.2.  Fall Back on Full Authentication\n   Figure 6 illustrates the case when\
    \ the server does not recognize the\n   fast re-authentication identity the peer\
    \ used in AT_IDENTITY.\n       Peer                                          \
    \   Authenticator\n          |                                               \
    \        |\n          |                            +------------------------------+\n\
    \          |                            | Server does not have any     |\n   \
    \       |                            | Subscriber identity available|\n      \
    \    |                            | When starting EAP-AKA        |\n         \
    \ |                            +------------------------------+\n          | \
    \       EAP-Request/AKA-Identity                       |\n          |        (AT_ANY_ID_REQ)\
    \                                |\n          |<------------------------------------------------------|\n\
    \          |                                                       |\n       \
    \   | EAP-Response/AKA-Identity                             |\n          | (AT_IDENTITY\
    \ containing a fast re-auth. identity)     |\n          |------------------------------------------------------>|\n\
    \          |                            +------------------------------+\n   \
    \       |                            | Server does not recognize    |\n      \
    \    |                            | The fast re-auth.            |\n         \
    \ |                            | Identity                     |\n          | \
    \                           +------------------------------+\n          |    \
    \ EAP-Request/AKA-Identity                          |\n          |     (AT_FULLAUTH_ID_REQ)\
    \                              |\n          |<------------------------------------------------------|\n\
    \          | EAP-Response/AKA-Identity                             |\n       \
    \   | (AT_IDENTITY with a full-auth. Identity)              |\n          |------------------------------------------------------>|\n\
    \          |                                                       |\n       \
    \         Figure 6: Fall back on full authentication\n   If the server recognizes\
    \ the fast re-authentication identity, but\n   still wants to fall back on full\
    \ authentication, the server may issue\n   the EAP-Request/AKA-Challenge packet.\
    \  In this case, the full\n   authentication procedure proceeds as usual.\n"
- title: 4.2.3.  Requesting the Permanent Identity 1
  contents:
  - "4.2.3.  Requesting the Permanent Identity 1\n   Figure 7 illustrates the case\
    \ when the EAP server fails to decode a\n   pseudonym identity included in the\
    \ EAP-Response/Identity packet.\n       Peer                                 \
    \            Authenticator\n          |                               EAP-Request/Identity\
    \    |\n          |<------------------------------------------------------|\n\
    \          | EAP-Response/Identity                                 |\n       \
    \   | (Includes a pseudonym)                                |\n          |------------------------------------------------------>|\n\
    \          |                            +------------------------------+\n   \
    \       |                            | Server fails to decode the   |\n      \
    \    |                            | Pseudonym.                   |\n         \
    \ |                            +------------------------------+\n          | \
    \ EAP-Request/AKA-Identity                             |\n          |  (AT_PERMANENT_ID_REQ)\
    \                                |\n          |<------------------------------------------------------|\n\
    \          |                                                       |\n       \
    \   | EAP-Response/AKA-Identity                             |\n          | (AT_IDENTITY\
    \ with permanent identity)                 |\n          |------------------------------------------------------>|\n\
    \          |                                                       |\n       \
    \        Figure 7: Requesting the permanent identity 1\n   If the server recognizes\
    \ the permanent identity, then the\n   authentication sequence proceeds as usual\
    \ with the EAP Server issuing\n   the EAP-Request/AKA-Challenge message.\n"
- title: 4.2.4.  Requesting the Permanent Identity 2
  contents:
  - "4.2.4.  Requesting the Permanent Identity 2\n   Figure 8 illustrates the case\
    \ when the EAP server fails to decode the\n   pseudonym included in the AT_IDENTITY\
    \ attribute.\n       Peer                                             Authenticator\n\
    \          |                                                       |\n       \
    \   |                            +------------------------------+\n          |\
    \                            | Server does not have any     |\n          |   \
    \                         | Subscriber identity available|\n          |      \
    \                      | When starting EAP-AKA        |\n          |         \
    \                   +------------------------------+\n          |        EAP-Request/AKA-Identity\
    \                       |\n          |        (AT_ANY_ID_REQ)                \
    \                |\n          |<------------------------------------------------------|\n\
    \          |                                                       |\n       \
    \   |EAP-Response/AKA-Identity                              |\n          |(AT_IDENTITY\
    \ with a pseudonym identity)                |\n          |------------------------------------------------------>|\n\
    \          |                            +------------------------------+\n   \
    \       |                            | Server fails to decode the   |\n      \
    \    |                            | Pseudonym in AT_IDENTITY     |\n         \
    \ |                            +------------------------------+\n          | \
    \               EAP-Request/AKA-Identity               |\n          |        \
    \        (AT_PERMANENT_ID_REQ)                  |\n          |<------------------------------------------------------|\n\
    \          | EAP-Response/AKA-Identity                             |\n       \
    \   | (AT_IDENTITY with permanent identity)                 |\n          |------------------------------------------------------>|\n\
    \          |                                                       |\n       \
    \        Figure 8: Requesting the permanent identity 2\n"
- title: 4.2.5.  Three EAP/AKA-Identity Round Trips
  contents:
  - "4.2.5.  Three EAP/AKA-Identity Round Trips\n   Figure 9 illustrates the case\
    \ with three EAP/AKA-Identity round\n   trips.\n       Peer                  \
    \                           Authenticator\n          |                       \
    \                                |\n          |                            +------------------------------+\n\
    \          |                            | Server does not have any     |\n   \
    \       |                            | Subscriber identity available|\n      \
    \    |                            | When starting EAP-AKA        |\n         \
    \ |                            +------------------------------+\n          | \
    \       EAP-Request/AKA-Identity                       |\n          |        (AT_ANY_ID_REQ)\
    \                                |\n          |<------------------------------------------------------|\n\
    \          |                                                       |\n       \
    \   | EAP-Response/AKA-Identity                             |\n          | (AT_IDENTITY\
    \ with fast re-auth. identity)             |\n          |------------------------------------------------------>|\n\
    \          |                            +------------------------------+\n   \
    \       |                            | Server does not accept       |\n      \
    \    |                            | The fast re-authentication   |\n         \
    \ |                            | Identity                     |\n          | \
    \                           +------------------------------+\n          |    \
    \                                                   |\n          :           \
    \                                            :\n          :                  \
    \                                     :\n          :                         \
    \                              :\n          :                                \
    \                       :\n          |     EAP-Request/AKA-Identity          \
    \                |\n          |     (AT_FULLAUTH_ID_REQ)                     \
    \         |\n          |<------------------------------------------------------|\n\
    \          |EAP-Response/AKA-Identity                              |\n       \
    \   |(AT_IDENTITY with a pseudonym identity)                |\n          |------------------------------------------------------>|\n\
    \          |                            +------------------------------+\n   \
    \       |                            | Server fails to decode the   |\n      \
    \    |                            | Pseudonym in AT_IDENTITY     |\n         \
    \ |                            +------------------------------+\n          | \
    \          EAP-Request/AKA-Identity                    |\n          |        \
    \   (AT_PERMANENT_ID_REQ)                       |\n          |<------------------------------------------------------|\n\
    \          | EAP-Response/AKA-Identity                             |\n       \
    \   | (AT_IDENTITY with permanent identity)                 |\n          |------------------------------------------------------>|\n\
    \          |                                                       |\n       \
    \            Figure 9: Three EAP-AKA Start rounds\n   After the last EAP-Response/AKA-Identity\
    \ message, the full\n   authentication sequence proceeds as usual.\n"
- title: 5.  Fast Re-Authentication
  contents:
  - '5.  Fast Re-Authentication

    '
- title: 5.1.  General
  contents:
  - "5.1.  General\n   In some environments, EAP authentication may be performed frequently.\n\
    \   Because the EAP-AKA full authentication procedure uses the AKA\n   algorithms,\
    \ and therefore requires fresh authentication vectors from\n   the Authentication\
    \ Centre, the full authentication procedure may\n   result in many network operations\
    \ when used very frequently.\n   Therefore, EAP-AKA includes a more inexpensive\
    \ fast re-authentication\n   procedure that does not make use of the AKA algorithms\
    \ and does not\n   need new vectors from the Authentication Centre.\n   Fast re-authentication\
    \ is optional to implement for both the EAP-AKA\n   server and peer.  On each\
    \ EAP authentication, either one of the\n   entities may fall back on full authentication\
    \ if is does not want to\n   use fast re-authentication.\n   Fast re-authentication\
    \ is based on the keys derived on the preceding\n   full authentication.  The\
    \ same K_aut and K_encr keys used in full\n   authentication are used to protect\
    \ EAP-AKA packets and attributes,\n   and the original Master Key from full authentication\
    \ is used to\n   generate a fresh Master Session Key, as specified in Section\
    \ 7.\n   The fast re-authentication exchange makes use of an unsigned 16-bit\n\
    \   counter, included in the AT_COUNTER attribute.  The counter has three\n  \
    \ goals: 1) it can be used to limit the number of successive\n   reauthentication\
    \ exchanges without full-authentication 2) it\n   contributes to the keying material,\
    \ and 3) it protects the peer and\n   the server from replays.  On full authentication,\
    \ both the server and\n   the peer initialize the counter to one.  The counter\
    \ value of at\n   least one is used on the first fast re-authentication.  On subsequent\n\
    \   fast re-authentications, the counter MUST be greater than on any of\n   the\
    \ previous fast re-authentications.  For example, on the second\n   fast re-authentication,\
    \ counter value is two or greater, etc.  The\n   AT_COUNTER attribute is encrypted.\n\
    \   Both the peer and the EAP server maintain a copy of the counter.  The\n  \
    \ EAP server sends its counter value to the peer in the fast\n   re-authentication\
    \ request.  The peer MUST verify that its counter\n   value is less than or equal\
    \ to the value sent by the EAP server.\n   The server includes an encrypted server\
    \ random nonce (AT_NONCE_S) in\n   the fast re-authentication request.  The AT_MAC\
    \ attribute in the\n   peer's response is calculated over NONCE_S to provide a\n\
    \   challenge/response authentication scheme.  The NONCE_S also\n   contributes\
    \ to the new Master Session Key.\n   Both the peer and the server SHOULD have\
    \ an upper limit for the\n   number of subsequent fast re-authentications allowed\
    \ before a full\n   authentication needs to be performed.  Because a 16-bit counter\
    \ is\n   used in fast re-authentication, the theoretical maximum number of\n \
    \  re-authentications is reached when the counter value reaches FFFF\n   hexadecimal.\
    \  In order to use fast re-authentication, the peer and\n   the EAP server need\
    \ to store the following values: Master Key, latest\n   counter value and the\
    \ next fast re-authentication identity.  K_aut\n   and K_encr may either be stored\
    \ or derived again from MK.  The server\n   may also need to store the permanent\
    \ identity of the user.\n"
- title: 5.2.  Comparison to AKA
  contents:
  - "5.2.  Comparison to AKA\n   When analyzing the fast re-authentication exchange,\
    \ it may be helpful\n   to compare it with the 3rd generation Authentication and\
    \ Key\n   Agreement (AKA) exchange used on full authentication.  The counter\n\
    \   corresponds to the AKA sequence number, NONCE_S corresponds to RAND,\n   the\
    \ AT_MAC in EAP-Request/AKA-Reauthentication corresponds to AUTN,\n   the AT_MAC\
    \ in EAP-Response/AKA-Reauthentication corresponds to RES,\n   AT_COUNTER_TOO_SMALL\
    \ corresponds to AUTS, and encrypting the counter\n   corresponds to the usage\
    \ of the Anonymity Key.  Also, the key\n   generation on fast re-authentication,\
    \ with regard to random or fresh\n   material, is similar to AKA -- the server\
    \ generates the NONCE_S and\n   counter values, and the peer only verifies that\
    \ the counter value is\n   fresh.\n   It should also be noted that encrypting\
    \ the AT_NONCE_S, AT_COUNTER,\n   or AT_COUNTER_TOO_SMALL attributes is not important\
    \ to the security\n   of the fast re-authentication exchange.\n"
- title: 5.3.  Fast Re-Authentication Identity
  contents:
  - "5.3.  Fast Re-Authentication Identity\n   The fast re-authentication procedure\
    \ makes use of separate\n   re-authentication user identities.  Pseudonyms and\
    \ the permanent\n   identity are reserved for full authentication only.  If a\
    \ fast\n   re-authentication identity is lost and the network does not recognize\n\
    \   it, the EAP server can fall back on full authentication.  If the EAP\n   server\
    \ supports fast re-authentication, it MAY include the skippable\n   AT_NEXT_REAUTH_ID\
    \ attribute in the encrypted data of EAP- Request/-\n   AKA-Challenge message.\
    \  This attribute contains a new\n   re-authentication identity for the next fast\
    \ re-authentication.  The\n   attribute also works as a capability flag that indicates\
    \ that the\n   server supports fast re-authentication and that the server wants\
    \ to\n   continue using fast re-authentication within the current context.\n \
    \  The peer MAY ignore this attribute, in which case it will use full\n   authentication\
    \ next time.  If the peer wants to use fast\n   re-authentication, it uses this\
    \ fast re-authentication identity on\n   next authentication.  Even if the peer\
    \ has a fast re-authentication\n   identity, the peer MAY discard the re-authentication\
    \ identity and use\n   a pseudonym or the permanent identity instead, in which\
    \ case full\n   authentication MUST be performed.  If the EAP server does not\
    \ include\n   the AT_NEXT_REAUTH_ID in the encrypted data of\n   EAP-Request/AKA-Challenge\
    \ or EAP-Request/AKA-Reauthentication, then\n   the peer MUST discard its current\
    \ fast re-authentication state\n   information and perform a full authentication\
    \ next time.\n   In environments where a realm portion is needed in the peer identity,\n\
    \   the fast re-authentication identity received in AT_NEXT_REAUTH_ID\n   MUST\
    \ contain both a username portion and a realm portion, as per the\n   NAI format.\
    \  The EAP Server can choose an appropriate realm part in\n   order to have the\
    \ AAA infrastructure route subsequent fast\n   re-authentication-related requests\
    \ to the same AAA server.  For\n   example, the realm part MAY include a portion\
    \ that is specific to the\n   AAA server.  Hence, it is sufficient to store the\
    \ context required\n   for fast re-authentication in the AAA server that performed\
    \ the full\n   authentication.\n   The peer MAY use the fast re-authentication\
    \ identity in the\n   EAP-Response/Identity packet or, in response to the server's\n\
    \   AT_ANY_ID_REQ attribute, the peer MAY use the fast re-authentication\n   identity\
    \ in the AT_IDENTITY attribute of the EAP-Response/\n   AKA-Identity packet.\n\
    \   The peer MUST NOT modify the username portion of the fast\n   re-authentication\
    \ identity, but the peer MAY modify the realm portion\n   or replace it with another\
    \ realm portion.  The peer might need to\n   modify the realm in order to influence\
    \ the AAA routing, for example,\n   to make sure that the correct server is reached.\
    \  It should be noted\n   that sharing the same fast re-authentication key among\
    \ several\n   servers may have security risks, so changing the realm portion of\
    \ the\n   NAI in order to change the EAP server is not desirable.\n   Even if\
    \ the peer uses a fast re-authentication identity, the server\n   may want to\
    \ fall back on full authentication, for example, because\n   the server does not\
    \ recognize the fast re-authentication identity or\n   does not want to use fast\
    \ re-authentication.  If the server was able\n   to decode the fast re-authentication\
    \ identity to the permanent\n   identity, the server issues the EAP-Request/AKA-Challenge\
    \ packet to\n   initiate full authentication.  If the server was not able to recover\n\
    \   the peer's identity from the fast re-authentication identity, the\n   server\
    \ starts the full authentication procedure by issuing an\n   EAP-Request/AKA-Identity\
    \ packet.  This packet always starts a full\n   authentication sequence if it\
    \ does not include the AT_ANY_ID_REQ\n   attribute.\n"
- title: 5.4.  Fast Re-Authentication Procedure
  contents:
  - "5.4.  Fast Re-Authentication Procedure\n   Figure 10 illustrates the fast re-authentication\
    \ procedure.  In this\n   example, the optional protected success indication is\
    \ not used.\n   Encrypted attributes are denoted with '*'.  The peer uses its\
    \ fast\n   re-authentication identity in the EAP-Response/Identity packet.  As\n\
    \   discussed above, an alternative way to communicate the fast\n   re-authentication\
    \ identity to the server is for the peer to use the\n   AT_IDENTITY attribute\
    \ in the EAP-Response/AKA-Identity message.  This\n   latter case is not illustrated\
    \ in the figure below, and it is only\n   possible when the server requests that\
    \ the peer send its identity by\n   including the AT_ANY_ID_REQ attribute in the\
    \ EAP-Request/AKA-Identity\n   packet.\n   If the server recognizes the identity\
    \ as a valid fast\n   re-authentication identity, and if the server agrees to\
    \ use fast\n   re-authentication, then the server sends the EAP- Request/AKA-\n\
    \   Reauthentication packet to the peer.  This packet MUST include the\n   encrypted\
    \ AT_COUNTER attribute, with a fresh counter value, the\n   encrypted AT_NONCE_S\
    \ attribute that contains a random number chosen\n   by the server, the AT_ENCR_DATA\
    \ and the AT_IV attributes used for\n   encryption, and the AT_MAC attribute that\
    \ contains a message\n   authentication code over the packet.  The packet MAY\
    \ also include an\n   encrypted AT_NEXT_REAUTH_ID attribute that contains the\
    \ next fast\n   re-authentication identity.\n   Fast re-authentication identities\
    \ are one-time identities.  If the\n   peer does not receive a new fast re-authentication\
    \ identity, it MUST\n   use either the permanent identity or a pseudonym identity\
    \ on the next\n   authentication to initiate full authentication.\n   The peer\
    \ verifies that AT_MAC is correct and that the counter value\n   is fresh (greater\
    \ than any previously used value).  The peer MAY save\n   the next fast re-authentication\
    \ identity from the encrypted\n   AT_NEXT_REAUTH_ID for next time.  If all checks\
    \ are successful, the\n   peer responds with the EAP-Response/AKA-Reauthentication\
    \ packet,\n   including the AT_COUNTER attribute with the same counter value and\n\
    \   the AT_MAC attribute.\n   The server verifies the AT_MAC attribute and also\
    \ verifies that the\n   counter value is the same that it used in the\n   EAP-Request/AKA-Reauthentication\
    \ packet.  If these checks are\n   successful, the fast re-authentication has\
    \ succeeded and the server\n   sends the EAP-Success packet to the peer.\n   If\
    \ protected success indications (Section 6.2) were used, the\n   EAP-Success packet\
    \ would be preceded by an EAP-AKA notification\n   round.\n        Peer      \
    \                                       Authenticator\n          |           \
    \                                            |\n          |                  \
    \             EAP-Request/Identity    |\n          |<------------------------------------------------------|\n\
    \          |                                                       |\n       \
    \   | EAP-Response/Identity                                 |\n          | (Includes\
    \ a fast re-authentication identity)          |\n          |------------------------------------------------------>|\n\
    \          |                          +--------------------------------+\n   \
    \       |                          | Server recognizes the identity |\n      \
    \    |                          | and agrees on using fast       |\n         \
    \ |                          | re-authentication              |\n          | \
    \                         +--------------------------------+\n          |  EAP-Request/AKA-Reauthentication\
    \                     |\n          |  (AT_IV, AT_ENCR_DATA, *AT_COUNTER,     \
    \              |\n          |   *AT_NONCE_S, *AT_NEXT_REAUTH_ID, AT_MAC)     \
    \       |\n          |<------------------------------------------------------|\n\
    \          |                                                       |\n       \
    \   :                                                       :\n          :   \
    \                                                    :\n          :          \
    \                                             :\n          :                 \
    \                                      :\n          |                        \
    \                               |\n     +-----------------------------------------------+\
    \            |\n     | Peer verifies AT_MAC and the freshness of     |       \
    \     |\n     | the counter. Peer MAY store the new re-       |            |\n\
    \     | authentication identity for next re-auth.     |            |\n     +-----------------------------------------------+\
    \            |\n          |                                                  \
    \     |\n          | EAP-Response/AKA-Reauthentication                     |\n\
    \          | (AT_IV, AT_ENCR_DATA, *AT_COUNTER with same value,    |\n       \
    \   |  AT_MAC)                                              |\n          |------------------------------------------------------>|\n\
    \          |                          +--------------------------------+\n   \
    \       |                          | Server verifies AT_MAC and     |\n      \
    \    |                          | the counter                    |\n         \
    \ |                          +--------------------------------+\n          | \
    \                                         EAP-Success  |\n          |<------------------------------------------------------|\n\
    \          |                                                       |\n       \
    \                 Figure 10: Reauthentication\n"
- title: 5.5.  Fast Re-Authentication Procedure when Counter is Too Small
  contents:
  - "5.5.  Fast Re-Authentication Procedure when Counter is Too Small\n   If the peer\
    \ does not accept the counter value of EAP-Request/\n   AKA-Reauthentication,\
    \ it indicates the counter synchronization\n   problem by including the encrypted\
    \ AT_COUNTER_TOO_SMALL in\n   EAP-Response/AKA-Reauthentication.  The server responds\
    \ with\n   EAP-Request/AKA-Challenge to initiate a normal full authentication\n\
    \   procedure.  This is illustrated in Figure 11.  Encrypted attributes\n   are\
    \ denoted with '*'.\n        Peer                                            \
    \ Authenticator\n          |          EAP-Request/AKA-Identity               \
    \      |\n          |          (AT_ANY_ID_REQ)                              |\n\
    \          |<------------------------------------------------------|\n       \
    \   |                                                       |\n          | EAP-Response/AKA-Identity\
    \                             |\n          | (AT_IDENTITY)                   \
    \                      |\n          | (Includes a fast re-authentication identity)\
    \          |\n          |------------------------------------------------------>|\n\
    \          |                                                       |\n       \
    \   |  EAP-Request/AKA-Reauthentication                     |\n          |  (AT_IV,\
    \ AT_ENCR_DATA, *AT_COUNTER,                   |\n          |   *AT_NONCE_S, *AT_NEXT_REAUTH_ID,\
    \ AT_MAC)            |\n          |<------------------------------------------------------|\n\
    \     +-----------------------------------------------+            |\n     | AT_MAC\
    \ is valid but the counter is not fresh. |            |\n     +-----------------------------------------------+\
    \            |\n          | EAP-Response/AKA-Reauthentication                \
    \     |\n          | (AT_IV, AT_ENCR_DATA, *AT_COUNTER_TOO_SMALL,          |\n\
    \          |  *AT_COUNTER, AT_MAC)                                 |\n       \
    \   |------------------------------------------------------>|\n          |   \
    \         +----------------------------------------------+\n          |      \
    \      | Server verifies AT_MAC but detects           |\n          |         \
    \   | That peer has included AT_COUNTER_TOO_SMALL|\n          |            +----------------------------------------------+\n\
    \          |                        EAP-Request/AKA-Challenge      |\n       \
    \   |<------------------------------------------------------|\n     +---------------------------------------------------------------+\n\
    \     |                Normal full authentication follows.            |\n    \
    \ +---------------------------------------------------------------+\n        \
    \  |                                                       |\n            Figure\
    \ 11: Fast re-authentication counter too small\n   In the figure above, the first\
    \ three messages are similar to the\n   basic fast re-authentication case.  When\
    \ the peer detects that the\n   counter value is not fresh, it includes the AT_COUNTER_TOO_SMALL\n\
    \   attribute in EAP-Response/AKA-Reauthentication.  This attribute\n   doesn't\
    \ contain any data but it is a request for the server to\n   initiate full authentication.\
    \  In this case, the peer MUST ignore the\n   contents of the server's AT_NEXT_REAUTH_ID\
    \ attribute.\n   On receipt of AT_COUNTER_TOO_SMALL, the server verifies AT_MAC\
    \ and\n   verifies that AT_COUNTER contains the same counter value as in the\n\
    \   EAP-Request/AKA-Reauthentication packet.  If not, the server\n   terminates\
    \ the authentication exchange by sending the\n   EAP-Request/AKA-Notification\
    \ packet with AT_NOTIFICATION code\n   \"General failure\" (16384).  If all checks\
    \ on the packet are\n   successful, the server transmits an EAP-Request/AKA-Challenge\
    \ packet\n   and the full authentication procedure is performed as usual.  Because\n\
    \   the server already knows the subscriber identity, it MUST NOT use the\n  \
    \ EAP-Request/AKA-Identity packet to request the identity.\n   It should be noted\
    \ that in this case, peer identity is only\n   transmitted in the AT_IDENTITY\
    \ attribute at the beginning of the\n   whole EAP exchange.  The fast re-authentication\
    \ identity used in this\n   AT_IDENTITY attribute will be used in key derivation\
    \ (see Section 7).\n"
- title: 6.  EAP-AKA Notifications
  contents:
  - '6.  EAP-AKA Notifications

    '
- title: 6.1.  General
  contents:
  - "6.1.  General\n   EAP-AKA does not prohibit the use of the EAP Notifications\
    \ as\n   specified in [RFC3748].  EAP Notifications can be used at any time in\n\
    \   the EAP-AKA exchange.  It should be noted that EAP-AKA does not\n   protect\
    \ EAP Notifications.  EAP-AKA also specifies method-specific\n   EAP-AKA notifications,\
    \ which are protected in some cases.\n   The EAP server can use EAP-AKA notifications\
    \ to convey notifications\n   and result indications (Section 6.2) to the peer.\n\
    \   The server MUST use notifications in cases discussed in\n   Section 6.3.2.\
    \  When the EAP server issues an\n   EAP-Request/AKA-Notification packet to the\
    \ peer, the peer MUST\n   process the notification packet.  The peer MAY show\
    \ a notification\n   message to the user and the peer MUST respond to the EAP\
    \ server with\n   an EAP-Response/AKA-Notification packet, even if the peer did\
    \ not\n   recognize the notification code.\n   An EAP-AKA full authentication\
    \ exchange or a fast re-authentication\n   exchange MUST NOT include more than\
    \ one EAP-AKA notification round.\n   The notification code is a 16-bit number.\
    \  The most significant bit\n   is called the Success bit (S bit).  The S bit\
    \ specifies whether the\n   notification implies failure.  The code values with\
    \ the S bit set to\n   zero (code values 0...32767) are used on unsuccessful cases.\
    \  The\n   receipt of a notification code from this range implies failed EAP\n\
    \   exchange, so the peer can use the notification as a failure\n   indication.\
    \  After receiving the EAP-Response/AKA-Notification for\n   these notification\
    \ codes, the server MUST send the EAP-Failure\n   packet.\n   The receipt of a\
    \ notification code with the S bit set to one (values\n   32768...65536) does\
    \ not imply failure.  Notification code \"Success\"\n   (32768) has been reserved\
    \ as a general notification code to indicate\n   successful authentication.\n\
    \   The second most significant bit of the notification code is called\n   the\
    \ Phase bit (P bit).  It specifies at which phase of the EAP-AKA\n   exchange\
    \ the notification can be used.  If the P bit is set to zero,\n   the notification\
    \ can only be used after a successful EAP/AKA-\n   Challenge round in full authentication\
    \ or a successful EAP/AKA-\n   Reauthentication round in re-authentication.  A\
    \ re-authentication\n   round is considered successful only if the peer has successfully\n\
    \   verified AT_MAC and AT_COUNTER attributes, and does not include the\n   AT_COUNTER_TOO_SMALL\
    \ attribute in EAP-Response/AKA-Reauthentication.\n   If the P bit is set to one,\
    \ the notification can only by used before\n   the EAP/AKA-Challenge round in\
    \ full authentication or before the\n   EAP/AKA-Reauthentication round in reauthentication.\
    \  These\n   notifications can only be used to indicate various failure cases.\
    \  In\n   other words, if the P bit is set to one, then the S bit MUST be set\n\
    \   to zero.\n   Section 9.10 and Section 9.11 specify what other attributes must\
    \ be\n   included in the notification packets.\n   Some of the notification codes\
    \ are authorization related and hence\n   not usually considered as part of the\
    \ responsibility of an EAP\n   method.  However, they are included as part of\
    \ EAP-AKA because there\n   are currently no other ways to convey this information\
    \ to the user in\n   a localizable way, and the information is potentially useful\
    \ for the\n   user.  An EAP-AKA server implementation may decide never to send\n\
    \   these EAP-AKA notifications.\n"
- title: 6.2.  Result Indications
  contents:
  - "6.2.  Result Indications\n   As discussed in Section 6.3, the server and the\
    \ peer use explicit\n   error messages in all error cases.  If the server detects\
    \ an error\n   after successful authentication, the server uses an EAP-AKA\n \
    \  notification to indicate failure to the peer.  In this case, the\n   result\
    \ indication is integrity and replay protected.\n   By sending an EAP-Response/AKA-Challenge\
    \ packet or an\n   EAP-Response/AKA-Reauthentication packet (without\n   AT_COUNTER_TOO_SMALL),\
    \ the peer indicates that it has successfully\n   authenticated the server and\
    \ that the peer's local policy accepts the\n   EAP exchange.  In other words,\
    \ these packets are implicit success\n   indications from the peer to the server.\n\
    \   EAP-AKA also supports optional protected success indications from the\n  \
    \ server to the peer.  If the EAP server wants to use protected success\n   indications,\
    \ it includes the AT_RESULT_IND attribute in the\n   EAP-Request/AKA-Challenge\
    \ or the EAP-Request/AKA-Reauthentication\n   packet.  This attribute indicates\
    \ that the EAP server would like to\n   use result indications in both successful\
    \ and unsuccessful cases.  If\n   the peer also wants this, the peer includes\
    \ AT_RESULT_IND in\n   EAP-Response/AKA-Challenge or EAP-Response/AKA-Reauthentication.\
    \  The\n   peer MUST NOT include AT_RESULT_IND if it did not receive\n   AT_RESULT_IND\
    \ from the server.  If both the peer and the server used\n   AT_RESULT_IND, then\
    \ the EAP exchange is not complete yet, but an\n   EAP-AKA notification round\
    \ will follow.  The following EAP-AKA\n   notification may indicate either failure\
    \ or success.\n   Success indications with the AT_NOTIFICATION code \"Success\"\
    \ (32768)\n   can only be used if both the server and the peer indicate they want\n\
    \   to use them with AT_RESULT_IND.  If the server did not include\n   AT_RESULT_IND\
    \ in the EAP-Request/AKA-Challenge or\n   EAP-Request/AKA-Reauthentication packet,\
    \ or if the peer did not\n   include AT_RESULT_IND in the corresponding response\
    \ packet, then the\n   server MUST NOT use protected success indications.\n  \
    \ Because the server uses the AT_NOTIFICATION code \"Success\" (32768) to\n  \
    \ indicate that the EAP exchange has completed successfully, the EAP\n   exchange\
    \ cannot fail when the server processes the EAP-AKA response\n   to this notification.\
    \  Hence, the server MUST ignore the contents of\n   the EAP-AKA response it receives\
    \ to the EAP-Request/AKA-Notification\n   with this code.  Regardless of the contents\
    \ of the EAP-AKA response,\n   the server MUST send EAP-Success as the next packet.\n"
- title: 6.3.  Error Cases
  contents:
  - "6.3.  Error Cases\n   This section specifies the operation of the peer and the\
    \ server in\n   error cases.  The subsections below require the EAP-AKA peer and\n\
    \   server to send an error packet (EAP-Response/AKA-Client-Error,\n   EAP-Response/AKA-Authentication-Reject\
    \ or\n   EAP-Response/AKA-Synchronization-Failure from the peer and\n   EAP-Request/AKA-Notification\
    \ from the server) in error cases.\n   However, implementations SHOULD NOT rely\
    \ upon the correct error\n   reporting behavior of the peer, authenticator, or\
    \ server.  It is\n   possible for error messages and other messages to be lost\
    \ in transit,\n   or for a malicious participant to attempt to consume resources\
    \ by not\n   issuing error messages.  Both the peer and the EAP server SHOULD\
    \ have\n   a mechanism to clean up state even if an error message or EAP-Success\n\
    \   is not received after a timeout period.\n"
- title: 6.3.1.  Peer Operation
  contents:
  - "6.3.1.  Peer Operation\n   Two special error messages have been specified for\
    \ error cases that\n   are related to the processing of the AKA AUTN parameter,\
    \ as described\n   in Section 3: (1) if the peer does not accept AUTN, the peer\
    \ responds\n   with EAP-Response/AKA-Authentication-Reject (Section 9.5), and\
    \ the\n   server issues EAP-Failure, and (2) if the peer detects that the\n  \
    \ sequence number in AUTN is not correct, the peer responds with\n   EAP-Response/AKA-Synchronization-Failure\
    \ (Section 9.6), and the\n   server proceeds with a new EAP-Request/AKA-Challenge.\n\
    \   In other error cases, when an EAP-AKA peer detects an error in a\n   received\
    \ EAP-AKA packet, the EAP-AKA peer responds with the\n   EAP-Response/AKA-Client-Error\
    \ packet.  In response to the\n   EAP-Response/AKA-Client-Error, the EAP server\
    \ MUST issue the\n   EAP-Failure packet, and the authentication exchange terminates.\n\
    \   By default, the peer uses the client error code 0, \"unable to process\n \
    \  packet\".  This error code is used in the following cases:\n   o  EAP exchange\
    \ is not acceptable according to the peer's local\n      policy.\n   o  The peer\
    \ is not able to parse the EAP request, i.e., the EAP\n      request is malformed.\n\
    \   o  The peer encountered a malformed attribute.\n   o  Wrong attribute types\
    \ or duplicate attributes have been included\n      in the EAP request.\n   o\
    \  A mandatory attribute is missing.\n   o  Unrecognized non-skippable attribute.\n\
    \   o  Unrecognized or unexpected EAP-AKA Subtype in the EAP request.\n   o  Invalid\
    \ AT_MAC.  The peer SHOULD log this event.\n   o  Invalid AT_CHECKCODE.  The peer\
    \ SHOULD log this event.\n   o  Invalid pad bytes in AT_PADDING.\n   o  The peer\
    \ does not want to process AT_PERMANENT_ID_REQ.\n"
- title: 6.3.2.  Server Operation
  contents:
  - "6.3.2.  Server Operation\n   If an EAP-AKA server detects an error in a received\
    \ EAP-AKA response,\n   the server MUST issue the EAP-Request/AKA-Notification\
    \ packet with an\n   AT_NOTIFICATION code that implies failure.  By default, the\
    \ server\n   uses one of the general failure codes (\"General failure after\n\
    \   authentication\" (0) or \"General failure\" (16384)).  The choice\n   between\
    \ these two codes depends on the phase of the EAP-AKA exchange,\n   see Section\
    \ 6.  The error cases when the server issues an\n   EAP-Request/AKA-Notification\
    \ that implies failure include the\n   following:\n   o  The server is not able\
    \ to parse the peer's EAP response.\n   o  The server encounters a malformed attribute,\
    \ a non-recognized\n      non-skippable attribute, or a duplicate attribute.\n\
    \   o  A mandatory attribute is missing or an invalid attribute was\n      included.\n\
    \   o  Unrecognized or unexpected EAP-AKA Subtype in the EAP Response.\n   o \
    \ Invalid AT_MAC.  The server SHOULD log this event.\n   o  Invalid AT_CHECKCODE.\
    \  The server SHOULD log this event.\n   o  Invalid AT_COUNTER.\n"
- title: 6.3.3.  EAP-Failure
  contents:
  - "6.3.3.  EAP-Failure\n   The EAP-AKA server sends EAP-Failure in three cases:\n\
    \   1.  In response to an EAP-Response/AKA-Client-Error packet the server\n  \
    \     has received from the peer, or\n   2.  In response to an EAP-Response/AKA-Authentication-Reject\
    \ packet\n       the server has received from the peer, or\n   3.  Following an\
    \ EAP-AKA notification round, when the AT_NOTIFICATION\n       code implies failure.\n\
    \   The EAP-AKA server MUST NOT send EAP-Failure in other cases than\n   these\
    \ three.  However, it should be noted that even though the\n   EAP-AKA server\
    \ would not send an EAP-Failure, an authorization\n   decision that happens outside\
    \ EAP-AKA, such as in the AAA server or\n   in an intermediate AAA proxy, may\
    \ result in a failed exchange.\n   The peer MUST accept the EAP-Failure packet\
    \ in case 1), case 2), and\n   case 3) above.  The peer SHOULD silently discard\
    \ the EAP-Failure\n   packet in other cases.\n"
- title: 6.3.4.  EAP-Success
  contents:
  - "6.3.4.  EAP-Success\n   On full authentication, the server can only send EAP-Success\
    \ after\n   the EAP/AKA-Challenge round.  The peer MUST silently discard any\n\
    \   EAP-Success packets if they are received before the peer has\n   successfully\
    \ authenticated the server and sent the\n   EAP-Response/AKA-Challenge packet.\n\
    \   If the peer did not indicate that it wants to use protected success\n   indications\
    \ with AT_RESULT_IND (as discussed in Section 6.2) on full\n   authentication,\
    \ then the peer MUST accept EAP-Success after a\n   successful EAP/AKA-Challenge\
    \ round.\n   If the peer indicated that it wants to use protected success\n  \
    \ indications with AT_RESULT_IND (as discussed in Section 6.2), then\n   the peer\
    \ MUST NOT accept EAP-Success after a successful EAP/\n   AKA-Challenge round.\
    \  In this case, the peer MUST only accept\n   EAP-Success after receiving an\
    \ EAP-AKA Notification with the\n   AT_NOTIFICATION code \"Success\" (32768).\n\
    \   On fast re-authentication, EAP-Success can only be sent after the\n   EAP/AKA-Reauthentication\
    \ round.  The peer MUST silently discard any\n   EAP-Success packets if they are\
    \ received before the peer has\n   successfully authenticated the server and sent\
    \ the\n   EAP-Response/AKA-Reauthentication packet.\n   If the peer did not indicate\
    \ that it wants to use protected success\n   indications with AT_RESULT_IND (as\
    \ discussed in Section 6.2) on fast\n   re-authentication, then the peer MUST\
    \ accept EAP-Success after a\n   successful EAP/AKA-Reauthentication round.\n\
    \   If the peer indicated that it wants to use protected success\n   indications\
    \ with AT_RESULT_IND (as discussed in Section 6.2), then\n   the peer MUST NOT\
    \ accept EAP-Success after a successful EAP/AKA-\n   Reauthentication round. \
    \ In this case, the peer MUST only accept\n   EAP-Success after receiving an EAP-AKA\
    \ Notification with the\n   AT_NOTIFICATION code \"Success\" (32768).\n   If the\
    \ peer receives an EAP-AKA notification (Section 6) that\n   indicates failure,\
    \ then the peer MUST no longer accept the\n   EAP-Success packet, even if the\
    \ server authentication was\n   successfully completed.\n"
- title: 7.  Key Generation
  contents:
  - "7.  Key Generation\n   This section specifies how keying material is generated.\n\
    \   On EAP-AKA full authentication, a Master Key (MK) is derived from the\n  \
    \ underlying AKA values (CK and IK keys), and the identity, as follows.\n   MK\
    \ = SHA1(Identity|IK|CK)\n   In the formula above, the \"|\" character denotes\
    \ concatenation.\n   Identity denotes the peer identity string without any terminating\n\
    \   null characters.  It is the identity from the last AT_IDENTITY\n   attribute\
    \ sent by the peer in this exchange, or, if AT_IDENTITY was\n   not used, the\
    \ identity from the EAP-Response/Identity packet.  The\n   identity string is\
    \ included as-is, without any changes.  As discussed\n   in Section 4.1.2.2, relying\
    \ on EAP-Response/Identity for conveying\n   the EAP-AKA peer identity is discouraged,\
    \ and the server SHOULD use\n   the EAP-AKA method-specific identity attributes.\
    \  The hash function\n   SHA-1 is specified in [SHA-1].\n   The Master Key is\
    \ fed into a Pseudo-Random number Function (PRF),\n   which generates separate\
    \ Transient EAP Keys (TEKs) for protecting\n   EAP-AKA packets, as well as a Master\
    \ Session Key (MSK) for link layer\n   security and an Extended Master Session\
    \ Key (EMSK) for other\n   purposes.  On fast re-authentication, the same TEKs\
    \ MUST be used for\n   protecting EAP packets, but a new MSK and a new EMSK MUST\
    \ be derived\n   from the original MK and from new values exchanged in the fast\n\
    \   re-authentication.\n   EAP-AKA requires two TEKs for its own purposes: the\
    \ authentication\n   key K_aut, to be used with the AT_MAC attribute, and the\
    \ encryption\n   key K_encr, to be used with the AT_ENCR_DATA attribute.  The\
    \ same\n   K_aut and K_encr keys are used in full authentication and subsequent\n\
    \   fast re-authentications.\n   Key derivation is based on the random number\
    \ generation specified in\n   NIST Federal Information Processing Standards (FIPS)\
    \ Publication\n   186-2 [PRF].  The pseudo-random number generator is specified\
    \ in the\n   change notice 1 (2001 October 5) of [PRF] (Algorithm 1).  As\n  \
    \ specified in the change notice (page 74), when Algorithm 1 is used as\n   a\
    \ general-purpose pseudo-random number generator, the \"mod q\" term in\n   step\
    \ 3.3 is omitted.  The function G used in the algorithm is\n   constructed via\
    \ Secure Hash Standard as specified in Appendix 3.3 of\n   the standard.  It should\
    \ be noted that the function G is very similar\n   to SHA-1, but the message padding\
    \ is different.  Please refer to\n   [PRF] for full details.  For convenience,\
    \ the random number algorithm\n   with the correct modification is cited in Annex\
    \ A.\n   160-bit XKEY and XVAL values are used, so b = 160.  On each full\n  \
    \ authentication, the Master Key is used as the initial secret seed-key\n   XKEY.\
    \  The optional user input values (XSEED_j) in step 3.1 are set\n   to zero.\n\
    \   On full authentication, the resulting 320-bit random numbers x_0,\n   x_1,\
    \ ..., x_m-1 are concatenated and partitioned into suitable-sized\n   chunks and\
    \ used as keys in the following order: K_encr (128 bits),\n   K_aut (128 bits),\
    \ Master Session Key (64 bytes), Extended Master\n   Session Key (64 bytes).\n\
    \   On fast re-authentication, the same pseudo-random number generator\n   can\
    \ be used to generate a new Master Session Key and a new Extended\n   Master Session\
    \ Key.  The seed value XKEY' is calculated as follows:\n   XKEY' = SHA1(Identity|counter|NONCE_S|\
    \ MK)\n   In the formula above, the Identity denotes the fast re-authentication\n\
    \   identity, without any terminating null characters, from the\n   AT_IDENTITY\
    \ attribute of the EAP-Response/AKA-Identity packet, or, if\n   EAP-Response/AKA-Identity\
    \ was not used on fast re-authentication, it\n   denotes the identity string from\
    \ the EAP-Response/Identity packet.\n   The counter denotes the counter value\
    \ from the AT_COUNTER attribute\n   used in the EAP-Response/AKA-Reauthentication\
    \ packet.  The counter is\n   used in network byte order.  NONCE_S denotes the\
    \ 16-byte random\n   NONCE_S value from the AT_NONCE_S attribute used in the\n\
    \   EAP-Request/AKA-Reauthentication packet.  The MK is the Master Key\n   derived\
    \ on the preceding full authentication.\n   On fast re-authentication, the pseudo-random\
    \ number generator is run\n   with the new seed value XKEY', and the resulting\
    \ 320-bit random\n   numbers x_0, x_1, ..., x_m-1 are concatenated and partitioned\
    \ into\n   64-byte chunks and used as the new 64-byte Master Session Key and the\n\
    \   new 64-byte Extended Master Session Key.  Note that because K_encr\n   and\
    \ K_aut are not derived on fast re-authentication, the Master\n   Session Key\
    \ and the Extended Master Session key are obtained from the\n   beginning of the\
    \ key stream x_0, x_1, ....\n   The first 32 bytes of the MSK can be used as the\
    \ Pairwise Master Key\n   (PMK) for IEEE 802.11i.\n   When the RADIUS attributes\
    \ specified in [RFC2548] are used to\n   transport keying material, then the first\
    \ 32 bytes of the MSK\n   correspond to MS-MPPE-RECV-KEY and the second 32 bytes\
    \ to\n   MS-MPPE-SEND-KEY.  In this case, only 64 bytes of keying material\n \
    \  (the MSK) are used.\n"
- title: 8.  Message Format and Protocol Extensibility
  contents:
  - '8.  Message Format and Protocol Extensibility

    '
- title: 8.1.  Message Format
  contents:
  - "8.1.  Message Format\n   As specified in [RFC3748], EAP packets begin with the\
    \ Code,\n   Identifiers, Length, and Type fields, which are followed by\n   EAP-method-specific\
    \ Type-Data.  The Code field in the EAP header is\n   set to 1 for EAP requests,\
    \ and to 2 for EAP Responses.  The usage of\n   the Length and Identifier fields\
    \ in the EAP header is also specified\n   in [RFC3748].  In EAP-AKA, the Type\
    \ field is set to 23.\n   In EAP-AKA, the Type-Data begins with an EAP-AKA header\
    \ that consists\n   of a 1-octet Subtype field, and a 2-octet reserved field.\
    \  The\n   Subtype values used in EAP-AKA are defined in Section 11.  The\n  \
    \ formats of the EAP header and the EAP-AKA header are shown below.\n    0   \
    \                1                   2                   3\n    0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Subtype    |           Reserved            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The rest of the Type-Data, immediately following the EAP-AKA header,\n   consists\
    \ of attributes that are encoded in Type, Length, Value\n   format.  The figure\
    \ below shows the generic format of an attribute.\n    0                   1 \
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |Attribute Type |    Length     | Value...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Attribute Type\n         Indicates the particular type of attribute.  The\
    \ attribute type\n         values are listed in Section 11.\n   Length\n     \
    \    Indicates the length of this attribute in multiples of 4 bytes.\n       \
    \  The maximum length of an attribute is 1024 bytes.  The length\n         includes\
    \ the Attribute Type and Length bytes.\n   Value\n         The particular data\
    \ associated with this attribute.  This field\n         is always included and\
    \ it is two or more bytes in length.  The\n         type and length fields determine\
    \ the format and length of the\n         value field.\n   Attributes numbered\
    \ within the range 0 through 127 are called\n   non-skippable attributes.  When\
    \ an EAP-AKA peer encounters a\n   non-skippable attribute type that the peer\
    \ does not recognize, the\n   peer MUST send the EAP-Response/AKA-Client-Error\
    \ packet, and the\n   authentication exchange terminates.  If an EAP-AKA server\
    \ encounters\n   a non-skippable attribute that the server does not recognize,\
    \ then\n   the server sends EAP-Request/AKA-Notification packet with an\n   AT_NOTIFICATION\
    \ code that implies general failure (\"General failure\n   after authentication\"\
    \ (0), or \"General failure\" (16384), depending on\n   the phase of the exchange),\
    \ and the authentication exchange\n   terminates.\n   When an attribute numbered\
    \ in the range 128 through 255 is\n   encountered but not recognized, that particular\
    \ attribute is ignored,\n   but the rest of the attributes and message data MUST\
    \ still be\n   processed.  The Length field of the attribute is used to skip the\n\
    \   attribute value when searching for the next attribute.  These\n   attributes\
    \ are called skippable attributes.\n   Unless otherwise specified, the order of\
    \ the attributes in an EAP-AKA\n   message is insignificant, and an EAP-AKA implementation\
    \ should not\n   assume a certain order will be used.\n   Attributes can be encapsulated\
    \ within other attributes.  In other\n   words, the value field of an attribute\
    \ type can be specified to\n   contain other attributes.\n"
- title: 8.2.  Protocol Extensibility
  contents:
  - "8.2.  Protocol Extensibility\n   EAP-AKA can be extended by specifying new attribute\
    \ types.  If\n   skippable attributes are used, it is possible to extend the protocol\n\
    \   without breaking old implementations.  As specified in Section 10.13,\n  \
    \ if new attributes are specified for EAP-Request/AKA-Identity or\n   EAP-Response/AKA-Identity,\
    \ then the AT_CHECKCODE MUST be used to\n   integrity protect the new attributes.\n\
    \   When specifying new attributes, it should be noted that EAP-AKA does\n   not\
    \ support message fragmentation.  Hence, the sizes of the new\n   extensions MUST\
    \ be limited so that the maximum transfer unit (MTU) of\n   the underlying lower\
    \ layer is not exceeded.  According to [RFC3748],\n   lower layers must provide\
    \ an EAP MTU of 1020 bytes or greater, so any\n   extensions to EAP-AKA SHOULD\
    \ NOT exceed the EAP MTU of 1020 bytes.\n   EAP-AKA packets do not include a version\
    \ field.  However, should\n   there be a reason to revise this protocol in the\
    \ future, new\n   non-skippable or skippable attributes could be specified in\
    \ order to\n   implement revised EAP-AKA versions in a backward-compatible manner.\n\
    \   It is possible to introduce version negotiation in the\n   EAP-Request/AKA-Identity\
    \ and EAP-Response/AKA-Identity messages by\n   specifying new skippable attributes.\n"
- title: 9.  Messages
  contents:
  - "9.  Messages\n   This section specifies the messages used in EAP-AKA.  It specifies\n\
    \   when a message may be transmitted or accepted, which attributes are\n   allowed\
    \ in a message, which attributes are required in a message, and\n   other message-specific\
    \ details.  Message format is specified in\n   Section 8.1.\n"
- title: 9.1.  EAP-Request/AKA-Identity
  contents:
  - "9.1.  EAP-Request/AKA-Identity\n   The EAP/AKA-Identity roundtrip MAY be used\
    \ for obtaining the peer\n   identity from the server.  As discussed in Section\
    \ 4.1, several\n   AKA-Identity rounds may be required in order to obtain a valid\
    \ peer\n   identity.\n   The server MUST include one of the following identity\
    \ requesting\n   attributes: AT_PERMANENT_ID_REQ, AT_FULLAUTH_ID_REQ, AT_ANY_ID_REQ.\n\
    \   These three attributes are mutually exclusive, so the server MUST NOT\n  \
    \ include more than one of the attributes.\n   If the server has previously issued\
    \ an EAP-Request/AKA-Identity\n   message with the AT_PERMANENT_ID_REQ attribute,\
    \ and if the server has\n   received a response from the peer, then the server\
    \ MUST NOT issue a\n   new EAP-Request/AKA-Identity packet.\n   If the server\
    \ has previously issued an EAP-Request/AKA-Identity\n   message with the AT_FULLAUTH_ID_REQ\
    \ attribute, and if the server has\n   received a response from the peer, then\
    \ the server MUST NOT issue a\n   new EAP-Request/AKA-Identity packet with the\
    \ AT_ANY_ID_REQ or\n   AT_FULLAUTH_ID_REQ attributes.\n   If the server has previously\
    \ issued an EAP-Request/AKA-Identity\n   message with the AT_ANY_ID_REQ attribute,\
    \ and if the server has\n   received a response from the peer, then the server\
    \ MUST NOT issue a\n   new EAP-Request/AKA-Identity packet with the AT_ANY_ID_REQ.\n\
    \   This message MUST NOT include AT_MAC, AT_IV, or AT_ENCR_DATA.\n"
- title: 9.2.  EAP-Response/AKA-Identity
  contents:
  - "9.2.  EAP-Response/AKA-Identity\n   The peer sends EAP-Response/AKA-Identity\
    \ in response to a valid\n   EAP-Request/AKA-Identity from the server.\n   The\
    \ peer MUST include the AT_IDENTITY attribute.  The usage of\n   AT_IDENTITY is\
    \ defined in Section 4.1.\n   This message MUST NOT include AT_MAC, AT_IV, or\
    \ AT_ENCR_DATA.\n"
- title: 9.3.  EAP-Request/AKA-Challenge
  contents:
  - "9.3.  EAP-Request/AKA-Challenge\n   The server sends the EAP-Request/AKA-Challenge\
    \ on full authentication\n   after successfully obtaining the subscriber identity.\n\
    \   The AT_RAND attribute MUST be included.\n   AT_MAC MUST be included.  In EAP-Request/AKA-Challenge,\
    \ there is no\n   message-specific data covered by the MAC, see Section 10.15.\n\
    \   The AT_RESULT_IND attribute MAY be included.  The usage of this\n   attribute\
    \ is discussed in Section 6.2.\n   The AT_CHECKCODE attribute MAY be included,\
    \ and in certain cases\n   specified in Section 10.13, it MUST be included.\n\
    \   The EAP-Request/AKA-Challenge packet MAY include encrypted attributes\n  \
    \ for identity privacy and for communicating the next re-authentication\n   identity.\
    \  In this case, the AT_IV and AT_ENCR_DATA attributes are\n   included (Section\
    \ 10.12).\n   The plaintext of the AT_ENCR_DATA value field consists of nested\n\
    \   attributes.  The nested attributes MAY include AT_PADDING (as\n   specified\
    \ in Section 10.12).  If the server supports identity privacy\n   and wants to\
    \ communicate a pseudonym to the peer for the next full\n   authentication, then\
    \ the nested encrypted attributes include the\n   AT_NEXT_PSEUDONYM attribute.\
    \  If the server supports\n   re-authentication and wants to communicate a fast\
    \ re-authentication\n   identity to the peer, then the nested encrypted attributes\
    \ include\n   the AT_NEXT_REAUTH_ID attribute.  Later versions of this protocol\
    \ MAY\n   specify additional attributes to be included within the encrypted\n\
    \   data.\n   When processing this message, the peer MUST process AT_RAND and\n\
    \   AT_AUTN before processing other attributes.  Only if these attributes\n  \
    \ are verified to be valid, the peer derives keys and verifies AT_MAC.\n   The\
    \ operation in case an error occurs is specified in Section 6.3.1.\n"
- title: 9.4.  EAP-Response/AKA-Challenge
  contents:
  - "9.4.  EAP-Response/AKA-Challenge\n   The peer sends EAP-Response/AKA-Challenge\
    \ in response to a valid\n   EAP-Request/AKA-Challenge.\n   Sending this packet\
    \ indicates that the peer has successfully\n   authenticated the server and that\
    \ the EAP exchange will be accepted\n   by the peer's local policy.  Hence, if\
    \ these conditions are not met,\n   then the peer MUST NOT send EAP-Response/AKA-Challenge,\
    \ but the peer\n   MUST send EAP-Response/AKA-Client-Error.\n   The AT_MAC attribute\
    \ MUST be included.  In\n   EAP-Response/AKA-Challenge, there is no message-specific\
    \ data covered\n   by the MAC, see Section 10.15.\n   The AT_RES attribute MUST\
    \ be included.\n   The AT_CHECKCODE attribute MAY be included, and in certain\
    \ cases\n   specified in Section 10.13, it MUST be included.\n   The AT_RESULT_IND\
    \ attribute MAY be included, if it was included in\n   EAP-Request/AKA-Challenge.\
    \  The usage of this attribute is discussed\n   in Section 6.2.\n   Later versions\
    \ of this protocol MAY make use of the AT_ENCR_DATA and\n   AT_IV attributes in\
    \ this message to include encrypted (skippable)\n   attributes.  The EAP server\
    \ MUST process EAP-Response/AKA-Challenge\n   messages that include these attributes\
    \ even if the server did not\n   implement these optional attributes.\n"
- title: 9.5.  EAP-Response/AKA-Authentication-Reject
  contents:
  - "9.5.  EAP-Response/AKA-Authentication-Reject\n   The peer sends the EAP-Response/AKA-Authentication-Reject\
    \ packet if\n   it does not accept the AUTN parameter.  This version of the protocol\n\
    \   does not specify any attributes for this message.  Future versions of\n  \
    \ the protocol MAY specify attributes for this message.\n   The AT_MAC, AT_ENCR_DATA,\
    \ or AT_IV attributes MUST NOT be used in\n   this message.\n"
- title: 9.6.  EAP-Response/AKA-Synchronization-Failure
  contents:
  - "9.6.  EAP-Response/AKA-Synchronization-Failure\n   The peer sends the EAP-Response/AKA-Synchronization-Failure,\
    \ when the\n   sequence number in the AUTN parameter is incorrect.\n   The peer\
    \ MUST include the AT_AUTS attribute.  Future versions of the\n   protocol MAY\
    \ specify other additional attributes for this message.\n   The AT_MAC, AT_ENCR_DATA,\
    \ or AT_IV attributes MUST NOT be used in\n   this message.\n"
- title: 9.7.  EAP-Request/AKA-Reauthentication
  contents:
  - "9.7.  EAP-Request/AKA-Reauthentication\n   The server sends the EAP-Request/AKA-Reauthentication\
    \ message if it\n   wants to use fast re-authentication, and if it has received\
    \ a valid\n   fast re-authentication identity in EAP-Response/Identity or\n  \
    \ EAP-Response/AKA-Identity.\n   The AT_MAC attribute MUST be included.  No message-specific\
    \ data is\n   included in the MAC calculation, see Section 10.15.\n   The AT_RESULT_IND\
    \ attribute MAY be included.  The usage of this\n   attribute is discussed in\
    \ Section 6.2.\n   The AT_CHECKCODE attribute MAY be included, and in certain\
    \ cases\n   specified in Section 10.13, it MUST be included.\n   The AT_IV and\
    \ AT_ENCR_DATA attributes MUST be included.  The\n   plaintext consists of the\
    \ following nested encrypted attributes,\n   which MUST be included: AT_COUNTER\
    \ and AT_NONCE_S.  In addition, the\n   nested encrypted attributes MAY include\
    \ the following attributes:\n   AT_NEXT_REAUTH_ID and AT_PADDING.\n"
- title: 9.8.  EAP-Response/AKA-Reauthentication
  contents:
  - "9.8.  EAP-Response/AKA-Reauthentication\n   The client sends the EAP-Response/AKA-Reauthentication\
    \ packet in\n   response to a valid EAP-Request/AKA-Reauthentication.\n   The\
    \ AT_MAC attribute MUST be included.  For\n   EAP-Response/AKA-Reauthentication,\
    \ the MAC code is calculated over\n   the following data:  EAP packet| NONCE_S.\
    \  The EAP packet is\n   represented as specified in Section 8.1.  It is followed\
    \ by the\n   16-byte NONCE_S value from the server's AT_NONCE_S attribute.\n \
    \  The AT_CHECKCODE attribute MAY be included, and in certain cases\n   specified\
    \ in Section 10.13, it MUST be included.\n   The AT_IV and AT_ENCR_DATA attributes\
    \ MUST be included.  The nested\n   encrypted attributes MUST include the AT_COUNTER\
    \ attribute.  The\n   AT_COUNTER_TOO_SMALL attribute MAY be included in the nested\n\
    \   encrypted attributes, and it is included in cases specified in\n   Section\
    \ 5.  The AT_PADDING attribute MAY be included.\n   The AT_RESULT_IND attribute\
    \ MAY be included, if it was included in\n   EAP-Request/AKA-Reauthentication.\
    \  The usage of this attribute is\n   discussed in Section 6.2.\n   Sending this\
    \ packet without AT_COUNTER_TOO_SMALL indicates that the\n   peer has successfully\
    \ authenticated the server and that the EAP\n   exchange will be accepted by the\
    \ peer's local policy.  Hence, if\n   these conditions are not met, then the peer\
    \ MUST NOT send\n   EAP-Response/AKA-Reauthentication, but the peer MUST send\n\
    \   EAP-Response/ AKA-Client-Error.\n"
- title: 9.9.  EAP-Response/AKA-Client-Error
  contents:
  - "9.9.  EAP-Response/AKA-Client-Error\n   The peer sends EAP-Response/AKA-Client-Error\
    \ in error cases, as\n   specified in Section 6.3.1.\n   The AT_CLIENT_ERROR_CODE\
    \ attribute MUST be included.  The AT_MAC,\n   AT_IV, or AT_ENCR_DATA attributes\
    \ MUST NOT be used with this packet.\n"
- title: 9.10.  EAP-Request/AKA-Notification
  contents:
  - "9.10.  EAP-Request/AKA-Notification\n   The usage of this message is specified\
    \ in Section 6.\n   The AT_NOTIFICATION attribute MUST be included.\n   The AT_MAC\
    \ attribute MUST be included if the P bit of the\n   AT_NOTIFICATION code is set\
    \ to zero, and MUST NOT be included if the\n   P bit is set to one.  The P bit\
    \ is discussed in Section 6.\n   No message-specific data is included in the MAC\
    \ calculation.  See\n   Section 10.15.\n   If EAP-Request/AKA-Notification is\
    \ used on a fast re-authentication\n   exchange, and if the P bit in AT_NOTIFICATION\
    \ is set to zero, then\n   AT_COUNTER is used for replay protection.  In this\
    \ case, the\n   AT_ENCR_DATA and AT_IV attributes MUST be included, and the\n\
    \   encapsulated plaintext attributes MUST include the AT_COUNTER\n   attribute.\
    \  The counter value included in AT_COUNTER MUST be the same\n   as in the EAP-Request/AKA-Reauthentication\
    \ packet on the same fast\n   re-authentication exchange.\n"
- title: 9.11.  EAP-Response/AKA-Notification
  contents:
  - "9.11.  EAP-Response/AKA-Notification\n   The usage of this message is specified\
    \ in Section 6.  This packet is\n   an acknowledgement of EAP-Request/AKA-Notification.\n\
    \   The AT_MAC attribute MUST be included in cases when the P bit of the\n   notification\
    \ code in AT_NOTIFICATION of EAP-Request/AKA-Notification\n   is set to zero,\
    \ and MUST NOT be included in cases when the P bit is\n   set to one.  The P bit\
    \ is discussed in Section 6.\n   If EAP-Request/AKA-Notification is used on a\
    \ fast re-authentication\n   exchange, and if the P bit in AT_NOTIFICATION is\
    \ set to zero, then\n   AT_COUNTER is used for replay protection.  In this case,\
    \ the\n   AT_ENCR_DATA and AT_IV attributes MUST be included, and the\n   encapsulated\
    \ plaintext attributes MUST include the AT_COUNTER\n   attribute.  The counter\
    \ value included in AT_COUNTER MUST be the same\n   as in the EAP-Request/AKA-Reauthentication\
    \ packet on the same fast\n   re-authentication exchange.\n"
- title: 10.  Attributes
  contents:
  - "10.  Attributes\n   This section specifies the format of message attributes.\
    \  The\n   attribute type numbers are specified in Section 11.\n"
- title: 10.1.  Table of Attributes
  contents:
  - "10.1.  Table of Attributes\n   The following table provides a guide to which\
    \ attributes may be found\n   in which kinds of messages, and in what quantity.\
    \  Messages are\n   denoted with numbers in parentheses as follows: (1) EAP-Request/\n\
    \   AKA-Identity, (2) EAP-Response/AKA-Identity, (3) EAP-Request/\n   AKA-Challenge,\
    \ (4) EAP-Response/AKA-Challenge, (5) EAP-Request/\n   AKA-Notification, (6) EAP-Response/AKA-Notification,\
    \ (7) EAP-\n   Response/AKA-Client-Error (8) EAP-Request/AKA-Reauthentication,\
    \ (9)\n   EAP-Response/AKA-Reauthentication, (10) EAP-Response/AKA-\n   Authentication-Reject,\
    \ and (11) EAP-Response/AKA-Synchronization-\n   Failure.  The column denoted\
    \ with \"E\" indicates whether the attribute\n   is a nested attribute that MUST\
    \ be included within AT_ENCR_DATA.\n   \"0\" indicates that the attribute MUST\
    \ NOT be included in the message,\n   \"1\" indicates that the attribute MUST\
    \ be included in the message,\n   \"0-1\" indicates that the attribute is sometimes\
    \ included in the\n   message, and \"0*\" indicates that the attribute is not\
    \ included in the\n   message in cases specified in this document, but MAY be\
    \ included in\n   the future versions of the protocol.\n              Attribute\
    \ (1) (2) (3) (4) (5) (6) (7) (8) (9) (10)(11) E\n    AT_PERMANENT_ID_REQ 0-1\
    \  0   0   0   0   0   0   0   0   0   0   N\n          AT_ANY_ID_REQ 0-1  0 \
    \  0   0   0   0   0   0   0   0   0   N\n     AT_FULLAUTH_ID_REQ 0-1  0   0 \
    \  0   0   0   0   0   0   0   0   N\n            AT_IDENTITY  0  0-1  0   0 \
    \  0   0   0   0   0   0   0   N\n                AT_RAND  0   0   1   0   0 \
    \  0   0   0   0   0   0   N\n                AT_AUTN  0   0   1   0   0   0 \
    \  0   0   0   0   0   N\n                 AT_RES  0   0   0   1   0   0   0 \
    \  0   0   0   0   N\n                AT_AUTS  0   0   0   0   0   0   0   0 \
    \  0   0   1   N\n      AT_NEXT_PSEUDONYM  0   0  0-1  0   0   0   0   0   0 \
    \  0   0   Y\n      AT_NEXT_REAUTH_ID  0   0  0-1  0   0   0   0  0-1  0   0 \
    \  0   Y\n                  AT_IV  0   0  0-1  0* 0-1 0-1  0   1   1   0   0 \
    \  N\n           AT_ENCR_DATA  0   0  0-1  0* 0-1 0-1  0   1   1   0   0   N\n\
    \             AT_PADDING  0   0  0-1  0* 0-1 0-1  0  0-1 0-1  0   0   Y\n    \
    \       AT_CHECKCODE  0   0  0-1 0-1  0   0   0  0-1 0-1  0   0   N\n        \
    \  AT_RESULT_IND  0   0  0-1 0-1  0   0   0  0-1 0-1  0   0   N\n            \
    \     AT_MAC  0   0   1   1  0-1 0-1  0   1   1   0   0   N\n             AT_COUNTER\
    \  0   0   0   0  0-1 0-1  0   1   1   0   0   Y\n   AT_COUNTER_TOO_SMALL  0 \
    \  0   0   0   0   0   0   0  0-1  0   0   Y\n             AT_NONCE_S  0   0 \
    \  0   0   0   0   0   1   0   0   0   Y\n        AT_NOTIFICATION  0   0   0 \
    \  0   1   0   0   0   0   0   0   N\n   AT_CLIENT_ERROR_CODE  0   0   0   0 \
    \  0   0   1   0   0   0   0   N\n   It should be noted that attributes AT_PERMANENT_ID_REQ,\n\
    \   AT_ANY_ID_REQ, and AT_FULLAUTH_ID_REQ are mutually exclusive, so that\n  \
    \ only one of them can be included at the same time.  If one of the\n   attributes\
    \ AT_IV or AT_ENCR_DATA is included, then both of the\n   attributes MUST be included.\n"
- title: 10.2.  AT_PERMANENT_ID_REQ
  contents:
  - "10.2.  AT_PERMANENT_ID_REQ\n   The format of the AT_PERMANENT_ID_REQ attribute\
    \ is shown below.\n    0                   1                   2             \
    \      3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |AT_PERM..._REQ\
    \ | Length = 1    |           Reserved            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The use of the AT_PERMANENT_ID_REQ is defined in Section 4.1.  The\n   value\
    \ field only contains two reserved bytes, which are set to zero\n   on sending\
    \ and ignored on reception.\n"
- title: 10.3.  AT_ANY_ID_REQ
  contents:
  - "10.3.  AT_ANY_ID_REQ\n   The format of the AT_ANY_ID_REQ attribute is shown below.\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |AT_ANY_ID_REQ  | Length = 1    |           Reserved            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The use of the AT_ANY_ID_REQ is defined in Section 4.1.  The value\n   field\
    \ only contains two reserved bytes, which are set to zero on\n   sending and ignored\
    \ on reception.\n"
- title: 10.4.  AT_FULLAUTH_ID_REQ
  contents:
  - "10.4.  AT_FULLAUTH_ID_REQ\n   The format of the AT_FULLAUTH_ID_REQ attribute\
    \ is shown below.\n    0                   1                   2             \
    \      3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |AT_FULLAUTH_...|\
    \ Length = 1    |           Reserved            |\n   +---------------+---------------+-------------------------------+\n\
    \   The use of the AT_FULLAUTH_ID_REQ is defined in Section 4.1.  The\n   value\
    \ field only contains two reserved bytes, which are set to zero\n   on sending\
    \ and ignored on reception.\n"
- title: 10.5.  AT_IDENTITY
  contents:
  - "10.5.  AT_IDENTITY\n   The format of the AT_IDENTITY attribute is shown below.\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | AT_IDENTITY   | Length        | Actual Identity Length        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   .  \
    \                     Identity                                .\n   .        \
    \                                                       .\n   |              \
    \                                                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The use of the AT_IDENTITY is defined in Section 4.1.  The value\n   field\
    \ of this attribute begins with 2-byte actual identity length,\n   which specifies\
    \ the length of the identity in bytes.  This field is\n   followed by the subscriber\
    \ identity of the indicated actual length.\n   The identity is the permanent identity,\
    \ a pseudonym identity or a\n   fast re-authentication identity.  The identity\
    \ format is specified in\n   Section 4.1.1.  The same identity format is used\
    \ in the AT_IDENTITY\n   attribute and the EAP-Response/Identity packet, with\
    \ the exception\n   that the peer MUST NOT decorate the identity it includes in\n\
    \   AT_IDENTITY.  The identity does not include any terminating null\n   characters.\
    \  Because the length of the attribute must be a multiple\n   of 4 bytes, the\
    \ sender pads the identity with zero bytes when\n   necessary.\n"
- title: 10.6.  AT_RAND
  contents:
  - "10.6.  AT_RAND\n   The format of the AT_RAND attribute is shown below.\n    0\
    \                   1                   2                   3\n    0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    AT_RAND    | Length = 5    |           Reserved            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                           RAND                              |\n   |        \
    \                                                       |\n   |              \
    \                                                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The value field of this attribute contains two reserved bytes\n   followed\
    \ by the AKA RAND parameter, 16 bytes (128 bits).  The\n   reserved bytes are\
    \ set to zero when sending and ignored on reception.\n"
- title: 10.7.  AT_AUTN
  contents:
  - "10.7.  AT_AUTN\n   The format of the AT_AUTN attribute is shown below.\n    0\
    \                   1                   2                   3\n    0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    AT_AUTN    | Length = 5    |           Reserved            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                      AUTN                                   |\n   |        \
    \                                                       |\n   |              \
    \                                                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The value field of this attribute contains two reserved bytes\n   followed\
    \ by the AKA AUTN parameter, 16 bytes (128 bits).  The\n   reserved bytes are\
    \ set to zero when sending and ignored on reception.\n"
- title: 10.8.  AT_RES
  contents:
  - "10.8.  AT_RES\n   The format of the AT_RES attribute is shown below.\n    0 \
    \                  1                   2                   3\n    0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     AT_RES    |    Length     |          RES Length           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|\n\
    \   |                                                               |\n   |  \
    \                           RES                               |\n   |        \
    \                                                       |\n   |              \
    \                                                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The value field of this attribute begins with the 2-byte RES Length,\n   which\
    \ identifies the exact length of the RES in bits.  The RES length\n   is followed\
    \ by the AKA RES parameter.  According to [TS33.105], the\n   length of the AKA\
    \ RES can vary between 32 and 128 bits.  Because the\n   length of the AT_RES\
    \ attribute must be a multiple of 4 bytes, the\n   sender pads the RES with zero\
    \ bits where necessary.\n"
- title: 10.9.  AT_AUTS
  contents:
  - "10.9.  AT_AUTS\n   The format of the AT_AUTS attribute is shown below.\n    0\
    \                   1                   2                   3\n    0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-++-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+|\n\
    \   |    AT_AUTS    | Length = 4    |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               |\n   |                                      \
    \                         |\n   |                             AUTS           \
    \                   |\n   |                                                  \
    \             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The value field of this attribute contains the AKA AUTS parameter,\n   112\
    \ bits (14 bytes).\n"
- title: 10.10.  AT_NEXT_PSEUDONYM
  contents:
  - "10.10.  AT_NEXT_PSEUDONYM\n   The format of the AT_NEXT_PSEUDONYM attribute is\
    \ shown below.\n    0                   1                   2                \
    \   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   | AT_NEXT_PSEU..|\
    \ Length        | Actual Pseudonym Length       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   .  \
    \                        Next Pseudonym                       .\n   .        \
    \                                                       .\n   |              \
    \                                                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The value field of this attribute begins with a 2-byte actual\n   pseudonym\
    \ length, which specifies the length of the following\n   pseudonym in bytes.\
    \  This field is followed by a pseudonym username\n   that the peer can use in\
    \ the next authentication.  The username MUST\n   NOT include any realm portion.\
    \  The username does not include any\n   terminating null characters.  Because\
    \ the length of the attribute\n   must be a multiple of 4 bytes, the sender pads\
    \ the pseudonym with\n   zero bytes when necessary.  The username encoding MUST\
    \ follow the\n   UTF-8 transformation format [RFC3629].  This attribute MUST always\
    \ be\n   encrypted by encapsulating it within the AT_ENCR_DATA attribute.\n"
- title: 10.11.  AT_NEXT_REAUTH_ID
  contents:
  - "10.11.  AT_NEXT_REAUTH_ID\n   The format of the AT_NEXT_REAUTH_ID attribute is\
    \ shown below.\n    0                   1                   2                \
    \   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   | AT_NEXT_REAU..|\
    \ Length        | Actual Re-Auth Identity Length|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   .  \
    \            Next Fast Re-Authentication Username             .\n   .        \
    \                                                       .\n   |              \
    \                                                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The value field of this attribute begins with a 2-byte actual\n   re-authentication\
    \ identity length which specifies the length of the\n   following fast re-authentication\
    \ identity in bytes.  This field is\n   followed by a fast re-authentication identity\
    \ that the peer can use\n   in the next fast re-authentication, as described in\
    \ Section 5.  In\n   environments where a realm portion is required, the fast\n\
    \   re-authentication identity includes both a username portion and a\n   realm\
    \ name portion.  The fast re-authentication identity does not\n   include any\
    \ terminating null characters.  Because the length of the\n   attribute must be\
    \ a multiple of 4 bytes, the sender pads the fast\n   re-authentication identity\
    \ with zero bytes when necessary.  The\n   identity encoding MUST follow the UTF-8\
    \ transformation format\n   [RFC3629].  This attribute MUST always be encrypted\
    \ by encapsulating\n   it within the AT_ENCR_DATA attribute.\n"
- title: 10.12.  AT_IV, AT_ENCR_DATA, and AT_PADDING
  contents:
  - "10.12.  AT_IV, AT_ENCR_DATA, and AT_PADDING\n   AT_IV and AT_ENCR_DATA attributes\
    \ can be used to transmit encrypted\n   information between the EAP-AKA peer and\
    \ server.\n   The value field of AT_IV contains two reserved bytes followed by\
    \ a\n   16-byte initialization vector required by the AT_ENCR_DATA attribute.\n\
    \   The reserved bytes are set to zero when sending and ignored on\n   reception.\
    \  The AT_IV attribute MUST be included if and only if the\n   AT_ENCR_DATA is\
    \ included.  Section 6.3 specifies the operation if a\n   packet that does not\
    \ meet this condition is encountered.\n   The sender of the AT_IV attribute chooses\
    \ the initialization vector\n   at random.  The sender MUST NOT reuse the initialization\
    \ vector value\n   from previous EAP-AKA packets.  The sender SHOULD use a good\
    \ source\n   of randomness to generate the initialization vector.  Please see\n\
    \   [RFC4086] for more information about generating random numbers for\n   security\
    \ applications.  The format of AT_IV is shown below.\n    0                  \
    \ 1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     AT_IV     | Length = 5    |           Reserved            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \               Initialization Vector                         |\n   |        \
    \                                                       |\n   |              \
    \                                                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The value field of the AT_ENCR_DATA attribute consists of two\n   reserved\
    \ bytes followed by cipher text bytes.  The cipher text bytes\n   are encrypted\
    \ using the Advanced Encryption Standard (AES) [AES] with\n   a 128-bit key in\
    \ the Cipher Block Chaining (CBC) mode of operation,\n   which uses the initialization\
    \ vector from the AT_IV attribute.  The\n   reserved bytes are set to zero when\
    \ sending and ignored on reception.\n   Please see [CBC] for a description of\
    \ the CBC mode.  The format of\n   the AT_ENCR_DATA attribute is shown below.\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | AT_ENCR_DATA  | Length        |           Reserved            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   .  \
    \                  Encrypted Data                             .\n   .        \
    \                                                       .\n   |              \
    \                                                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The derivation of the encryption key (K_encr) is specified in\n   Section\
    \ 7.\n   The plaintext consists of nested EAP-AKA attributes.\n   The encryption\
    \ algorithm requires the length of the plaintext to be a\n   multiple of 16 bytes.\
    \  The sender may need to include the AT_PADDING\n   attribute as the last attribute\
    \ within AT_ENCR_DATA.  The AT_PADDING\n   attribute is not included if the total\
    \ length of other nested\n   attributes within the AT_ENCR_DATA attribute is a\
    \ multiple of 16\n   bytes.  As usual, the Length of the Padding attribute includes\
    \ the\n   Attribute Type and Attribute Length fields.  The length of the\n   Padding\
    \ attribute is 4, 8, or 12 bytes.  It is chosen so that the\n   length of the\
    \ value field of the AT_ENCR_DATA attribute becomes a\n   multiple of 16 bytes.\
    \  The actual pad bytes in the value field are\n   set to zero (00 hexadecimal)\
    \ on sending.  The recipient of the\n   message MUST verify that the pad bytes\
    \ are set to zero.  If this\n   verification fails on the peer, then it MUST send\
    \ the\n   EAP-Response/AKA-Client-Error packet with the error code \"unable to\n\
    \   process packet\" to terminate the authentication exchange.  If this\n   verification\
    \ fails on the server, then the server sends the\n   EAP-Response/AKA-Notification\
    \ packet with an AT_NOTIFICATION code\n   that implies failure to terminate the\
    \ authentication exchange.  The\n   format of the AT_PADDING attribute is shown\
    \ below.\n    0                   1                   2                   3\n\
    \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  AT_PADDING   | Length        | Padding...                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               |\n   |                                      \
    \                         |\n   |                                            \
    \                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 10.13.  AT_CHECKCODE
  contents:
  - "10.13.  AT_CHECKCODE\n   The AT_MAC attribute is not used in the very first EAP-AKA\
    \ messages\n   during the AKA-Identity round, because keying material has not\
    \ been\n   derived yet.  The peer and the server may exchange one or more pairs\n\
    \   of EAP-AKA messages of the Subtype AKA-Identity before keys are\n   derived\
    \ and before the AT_MAC attribute can be applied.  The EAP/-\n   AKA-Identity\
    \ messages may also be used upon fast re-authentication.\n   The AT_CHECKCODE\
    \ attribute MAY be used to protect the EAP/\n   AKA-Identity messages.  In full\
    \ authentication, the server MAY\n   include the AT_CHECKCODE in EAP-Request/AKA-Challenge,\
    \ and the peer\n   MAY include AT_CHECKCODE in EAP-Response/AKA-Challenge.  In\
    \ fast\n   re-authentication, the server MAY include AT_CHECKCODE in\n   EAP-Request/\
    \ AKA-Reauthentication, and the peer MAY include\n   AT_CHECKCODE in EAP-Response/AKA-Reauthentication.\
    \  The fact that the\n   peer receives an EAP-Request with AT_CHECKCODE does not\
    \ imply that\n   the peer would have to include AT_CHECKCODE in the corresponding\n\
    \   response.  The peer MAY include AT_CHECKCODE even if the server did\n   not\
    \ include AT_CHECKCODE in the EAP request.  Because the AT_MAC\n   attribute is\
    \ used in these messages, AT_CHECKCODE will be integrity\n   protected with AT_MAC.\
    \  The format of the AT_CHECKCODE attribute is\n   shown below.\n    0       \
    \            1                   2                   3\n    0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | AT_CHECKCODE  | Length        |           Reserved            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                   Checkcode (0 or 20 bytes)                 |\n   |        \
    \                                                       |\n   |              \
    \                                                 |\n   |                    \
    \                                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The value field of AT_CHECKCODE begins with two reserved bytes, which\n  \
    \ may be followed by a 20-byte checkcode.  If the checkcode is not\n   included\
    \ in AT_CHECKCODE, then the attribute indicates that no EAP/-\n   AKA-Identity\
    \ messages were exchanged.  This may occur in both full\n   authentication and\
    \ fast re-authentication.  The reserved bytes are\n   set to zero when sending\
    \ and ignored on reception.\n   The checkcode is a hash value, calculated with\
    \ SHA1 [SHA-1], over all\n   EAP-Request/AKA-Identity and EAP-Response/AKA-Identity\
    \ packets\n   exchanged in this authentication exchange.  The packets are included\n\
    \   in the order that they were transmitted, that is, starting with the\n   first\
    \ EAP-Request/AKA-Identity message, followed by the corresponding\n   EAP-Response/AKA-Identity,\
    \ followed by the second\n   EAP-Request/AKA-Identity (if used), etc.\n   EAP\
    \ packets are included in the hash calculation \"as-is\" (as they\n   were transmitted\
    \ or received).  All reserved bytes, padding bytes,\n   etc., that are specified\
    \ for various attributes are included as such,\n   and the receiver must not reset\
    \ them to zero.  No delimiter bytes,\n   padding, or any other framing are included\
    \ between the EAP packets\n   when calculating the checkcode.\n   Messages are\
    \ included in request/response pairs; in other words, only\n   full \"round trips\"\
    \ are included.  Packets that are silently discarded\n   are not included, and\
    \ retransmitted packets (that have the same\n   Identifier value) are only included\
    \ once.  (The base EAP protocol\n   [RFC3748] ensures that requests and responses\
    \ \"match\".)  The EAP\n   server must only include an EAP-Request/AKA-Identity\
    \ in the\n   calculation after it has received a corresponding response with the\n\
    \   same Identifier value.\n   The peer must include the EAP-Request/AKA-Identity\
    \ and the\n   corresponding response in the calculation only if the peer receives\
    \ a\n   subsequent EAP-Request/AKA-Challenge or a follow-up EAP-Request/\n   AKA-Identity\
    \ with a different Identifier value than in the first\n   EAP-Request/AKA-Identity.\n\
    \   The AT_CHECKCODE attribute is optional to implement.  It is specified\n  \
    \ in order to allow protection of the EAP/AKA-Identity messages and any\n   future\
    \ extensions to them.  The implementation of AT_CHECKCODE is\n   RECOMMENDED.\n\
    \   If the receiver of AT_CHECKCODE implements this attribute, then the\n   receiver\
    \ MUST check that the checkcode is correct.  If the checkcode\n   is invalid,\
    \ the receiver must operate as specified in Section 6.3.\n   If the EAP/AKA-Identity\
    \ messages are extended with new attributes,\n   then AT_CHECKCODE MUST be implemented\
    \ and used.  More specifically,\n   if the server includes any attributes other\
    \ than AT_PERMANENT_ID_REQ,\n   AT_FULLAUTH_ID_REQ, or AT_ANY_ID_REQ in the EAP-Request/AKA-Identity\n\
    \   packet, then the server MUST include AT_CHECKCODE in EAP-Request/\n   AKA-Challenge\
    \ or EAP-Request/AKA-Reauthentication.  If the peer\n   includes any attributes\
    \ other than AT_IDENTITY in the EAP-Response/\n   AKA-Identity message, then the\
    \ peer MUST include AT_CHECKCODE in\n   EAP-Response/AKA-Challenge or EAP-Response/AKA-Reauthentication.\n\
    \   If the server implements the processing of any other attribute than\n   AT_IDENTITY\
    \ for the EAP-Response/AKA-Identity message, then the\n   server MUST implement\
    \ AT_CHECKCODE.  In this case, if the server\n   receives any attribute other\
    \ than AT_IDENTITY in the\n   EAP-Response/AKA-Identity message, then the server\
    \ MUST check that\n   AT_CHECKCODE is present in EAP-Response/AKA-Challenge or\n\
    \   EAP-Response/ AKA-Reauthentication.  The operation when a mandatory\n   attribute\
    \ is missing is specified in Section 6.3.\n   Similarly, if the peer implements\
    \ the processing of any attribute\n   other than AT_PERMANENT_ID_REQ, AT_FULLAUTH_ID_REQ,\
    \ or AT_ANY_ID_REQ\n   for the EAP-Request/AKA-Identity packet, then the peer\
    \ MUST implement\n   AT_CHECKCODE.  In this case, if the peer receives any attribute\
    \ other\n   than AT_PERMANENT_ID_REQ, AT_FULLAUTH_ID_REQ, or AT_ANY_ID_REQ in\
    \ the\n   EAP-Request/AKA-Identity packet, then the peer MUST check that\n   AT_CHECKCODE\
    \ is present in EAP-Request/AKA-Challenge or\n   EAP-Request/AKA-Reauthentication.\
    \  The operation when a mandatory\n   attribute is missing is specified in Section\
    \ 6.3.\n"
- title: 10.14.  AT_RESULT_IND
  contents:
  - "10.14.  AT_RESULT_IND\n   The format of the AT_RESULT_IND attribute is shown\
    \ below.\n     0                   1                   2                   3\n\
    \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  AT_RESULT_...| Length = 1    |           Reserved            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The value field of this attribute consists of two reserved bytes,\n   which\
    \ are set to zero upon sending and ignored upon reception.  This\n   attribute\
    \ is always sent unencrypted, so it MUST NOT be encapsulated\n   within the AT_ENCR_DATA\
    \ attribute.\n"
- title: 10.15.  AT_MAC
  contents:
  - "10.15.  AT_MAC\n   The AT_MAC attribute is used for EAP-AKA message authentication.\n\
    \   Section 9 specifies in which messages AT_MAC MUST be included.\n   The value\
    \ field of the AT_MAC attribute contains two reserved bytes\n   followed by a\
    \ keyed message authentication code (MAC).  The MAC is\n   calculated over the\
    \ whole EAP packet and concatenated with optional\n   message-specific data, with\
    \ the exception that the value field of the\n   MAC attribute is set to zero when\
    \ calculating the MAC.  The EAP\n   packet includes the EAP header that begins\
    \ with the Code field, the\n   EAP-AKA header that begins with the Subtype field,\
    \ and all the\n   attributes, as specified in Section 8.1.  The reserved bytes\
    \ in\n   AT_MAC are set to zero when sending and ignored on reception.  The\n\
    \   contents of the message-specific data that may be included in the MAC\n  \
    \ calculation are specified separately for each EAP-AKA message in\n   Section\
    \ 9.\n   The format of the AT_MAC attribute is shown below.\n    0           \
    \        1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     AT_MAC    | Length = 5    |           Reserved            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                         MAC                                 |\n   |        \
    \                                                       |\n   |              \
    \                                                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The MAC algorithm is HMAC-SHA1-128 [RFC2104] keyed hash value.  (The\n   HMAC-SHA1-128\
    \ value is obtained from the 20-byte HMAC-SHA1 value by\n   truncating the output\
    \ to 16 bytes.  Hence, the length of the MAC is\n   16 bytes.)  The derivation\
    \ of the authentication key (K_aut) used in\n   the calculation of the MAC is\
    \ specified in Section 7.\n   When the AT_MAC attribute is included in an EAP-AKA\
    \ message, the\n   recipient MUST process the AT_MAC attribute before looking\
    \ at any\n   other attributes, except when processing EAP-Request/AKA-Challenge.\n\
    \   The processing of EAP-Request/AKA-Challenge is specified in\n   Section 9.3.\
    \  If the message authentication code is invalid, then the\n   recipient MUST\
    \ ignore all other attributes in the message and operate\n   as specified in Section\
    \ 6.3.\n"
- title: 10.16.  AT_COUNTER
  contents:
  - "10.16.  AT_COUNTER\n   The format of the AT_COUNTER attribute is shown below.\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  AT_COUNTER   | Length = 1    |           Counter             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The value field of the AT_COUNTER attribute consists of a 16-bit\n   unsigned\
    \ integer counter value, represented in network byte order.\n   This attribute\
    \ MUST always be encrypted by encapsulating it within\n   the AT_ENCR_DATA attribute.\n"
- title: 10.17.  AT_COUNTER_TOO_SMALL
  contents:
  - "10.17.  AT_COUNTER_TOO_SMALL\n   The format of the AT_COUNTER_TOO_SMALL attribute\
    \ is shown below.\n    0                   1                   2             \
    \      3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  AT_COUNTER...|\
    \ Length = 1    |           Reserved            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The value field of this attribute consists of two reserved bytes,\n   which\
    \ are set to zero upon sending and ignored upon reception.  This\n   attribute\
    \ MUST always be encrypted by encapsulating it within the\n   AT_ENCR_DATA attribute.\n"
- title: 10.18.  AT_NONCE_S
  contents:
  - "10.18.  AT_NONCE_S\n   The format of the AT_NONCE_S attribute is shown below.\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | AT_NONCE_S    | Length = 5    |           Reserved            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                                                             |\n   |        \
    \                    NONCE_S                            |\n   |              \
    \                                                 |\n   |                    \
    \                                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The value field of the AT_NONCE_S attribute contains two reserved\n   bytes\
    \ followed by a random number (16 bytes) that is freshly\n   generated by the\
    \ server for this EAP-AKA fast re-authentication.  The\n   random number is used\
    \ as challenge for the peer and also as a seed\n   value for the new keying material.\
    \  The reserved bytes are set to\n   zero upon sending and ignored upon reception.\
    \  This attribute MUST\n   always be encrypted by encapsulating it within the\
    \ AT_ENCR_DATA\n   attribute.\n   The server MUST NOT reuse the NONCE_S value\
    \ from a previous EAP-AKA\n   fast re-authentication exchange.  The server SHOULD\
    \ use a good source\n   of randomness to generate NONCE_S.  Please see [RFC4086]\
    \ for more\n   information about generating random numbers for security\n   applications.\n"
- title: 10.19.  AT_NOTIFICATION
  contents:
  - "10.19.  AT_NOTIFICATION\n   The format of the AT_NOTIFICATION attribute is shown\
    \ below.\n    0                   1                   2                   3\n\
    \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |AT_NOTIFICATION| Length = 1    |S|P|  Notification Code        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The value field of this attribute contains a two-byte notification\n   code.\
    \  The first and second bit (S and P) of the notification code\n   are interpreted\
    \ as described in Section 6.\n   The notification code values listed below have\
    \ been reserved.  The\n   descriptions below illustrate the semantics of the notifications.\n\
    \   The peer implementation MAY use different wordings when presenting\n   the\
    \ notifications to the user.  The \"requested service\" depends on\n   the environment\
    \ where EAP-AKA is applied.\n   0 - General failure after authentication.  (Implies\
    \ failure, used\n   after successful authentication.)\n   16384 - General failure.\
    \  (Implies failure, used before\n   authentication.)\n   32768 - Success.  User\
    \ has been successfully authenticated.  (Does\n   not imply failure, used after\
    \ successful authentication.)  The usage\n   of this code is discussed in Section\
    \ 6.2.\n   1026 - User has been temporarily denied access to the requested\n \
    \  service.  (Implies failure, used after successful authentication.)\n   1031\
    \ - User has not subscribed to the requested service.  (Implies\n   failure, used\
    \ after successful authentication.)\n"
- title: 10.20.  AT_CLIENT_ERROR_CODE
  contents:
  - "10.20.  AT_CLIENT_ERROR_CODE\n   The format of the AT_CLIENT_ERROR_CODE attribute\
    \ is shown below.\n    0                   1                   2             \
    \      3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |AT_CLIENT_ERR..|\
    \ Length = 1    |     Client Error Code         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The value field of this attribute contains a two-byte client error\n   code.\
    \  The following error code values have been reserved.\n   0 \"unable to process\
    \ packet\": a general error code\n"
- title: 11.  IANA and Protocol Numbering Considerations
  contents:
  - "11.  IANA and Protocol Numbering Considerations\n   IANA has assigned the EAP\
    \ type number 23 for EAP-AKA authentication.\n   EAP-AKA shares most of the protocol\
    \ design, such as attributes and\n   message Subtypes, with EAP-SIM [EAP-SIM].\
    \  EAP-AKA protocol numbers\n   should be administered in the same IANA registry\
    \ with EAP-SIM.  This\n   document establishes the registries and lists the initial\
    \ protocol\n   numbers for both protocols.\n   EAP-AKA and EAP-SIM messages include\
    \ a Subtype field.  The Subtype is\n   a new numbering space for which IANA administration\
    \ is required.  The\n   Subtype is an 8-bit integer.  The following Subtypes are\
    \ specified in\n   this document and in [EAP-SIM]:\n        AKA-Challenge...................................1\n\
    \        AKA-Authentication-Reject.......................2\n        AKA-Synchronization-Failure.....................4\n\
    \        AKA-Identity....................................5\n        SIM-Start......................................10\n\
    \        SIM-Challenge..................................11\n        AKA-Notification\
    \ and SIM-Notification..........12\n        AKA-Reauthentication and SIM-Reauthentication..13\n\
    \        AKA-Client-Error and SIM-Client-Error..........14\n   The messages are\
    \ composed of attributes, which have 8-bit attribute\n   type numbers.  Attributes\
    \ numbered within the range 0 through 127 are\n   called non-skippable attributes,\
    \ and attributes within the range of\n   128 through 255 are called skippable\
    \ attributes.  The EAP-AKA and\n   EAP-SIM attribute type number is a new numbering\
    \ space for which IANA\n   administration is required.  The following attribute\
    \ types are\n   specified in this document in [EAP-SIM]:\n        AT_RAND.........................................1\n\
    \        AT_AUTN.........................................2\n        AT_RES..........................................3\n\
    \        AT_AUTS.........................................4\n        AT_PADDING......................................6\n\
    \        AT_NONCE_MT.....................................7\n        AT_PERMANENT_ID_REQ............................10\n\
    \        AT_MAC.........................................11\n        AT_NOTIFICATION................................12\n\
    \        AT_ANY_ID_REQ..................................13\n        AT_IDENTITY....................................14\n\
    \        AT_VERSION_LIST................................15\n        AT_SELECTED_VERSION............................16\n\
    \        AT_FULLAUTH_ID_REQ.............................17\n        AT_COUNTER.....................................19\n\
    \        AT_COUNTER_TOO_SMALL...........................20\n        AT_NONCE_S.....................................21\n\
    \        AT_CLIENT_ERROR_CODE...........................22\n        AT_IV.........................................129\n\
    \        AT_ENCR_DATA..................................130\n        AT_NEXT_PSEUDONYM.............................132\n\
    \        AT_NEXT_REAUTH_ID.............................133\n        AT_CHECKCODE..................................134\n\
    \        AT_RESULT_IND.................................135\n   The AT_NOTIFICATION\
    \ attribute contains a 16-bit notification code\n   value.  The most significant\
    \ bit of the notification code is called\n   the S bit (success) and the second\
    \ most significant bit is called the\n   P bit (phase).  If the S bit is set to\
    \ zero, then the notification\n   code indicates failure; notification codes with\
    \ the S bit set to one\n   do not indicate failure.  If the P bit is set to zero,\
    \ then the\n   notification code can only be used before authentication has\n\
    \   occurred.  If the P bit is set to one, then the notification code can\n  \
    \ only be used after authentication.  The notification code is a new\n   numbering\
    \ space for which IANA administration is required.  The\n   following values have\
    \ been specified in this document and in\n   [EAP-SIM].\n        General failure\
    \ after authentication......................0\n        User has been temporarily\
    \ denied access................1026\n        User has not subscribed to the requested\
    \ service.......1031\n        General failure.......................................16384\n\
    \        Success...............................................32768\n   The AT_VERSION_LIST\
    \ and AT_SELECTED_VERSION attributes, specified in\n   [EAP-SIM], contain 16-bit\
    \ EAP method version numbers.  The EAP method\n   version number is a new numbering\
    \ space for which IANA administration\n   is required.  Value 1 for \"EAP-SIM\
    \ Version 1\" has been specified in\n   [EAP-SIM].  Version numbers are not currently\
    \ used in EAP-AKA.\n   The AT_CLIENT_ERROR_CODE attribute contains a 16-bit client\
    \ error\n   code.  The client error code is a new numbering space for which IANA\n\
    \   administration is required.  Values 0, 1, 2, and 3 have been\n   specified\
    \ in this document and in [EAP-SIM].\n   All requests for value assignment from\
    \ the various number spaces\n   described in this document require proper documentation,\
    \ according to\n   the \"Specification Required\" policy described in [RFC2434].\
    \  Requests\n   must be specified in sufficient detail so that interoperability\n\
    \   between independent implementations is possible.  Possible forms of\n   documentation\
    \ include, but are not limited to, RFCs, the products of\n   another standards\
    \ body (e.g., 3GPP), or permanently and readily\n   available vendor design notes.\n"
- title: 12.  Security Considerations
  contents:
  - "12.  Security Considerations\n   The EAP specification [RFC3748] describes the\
    \ security\n   vulnerabilities of EAP, which does not include its own security\n\
    \   mechanisms.  This section discusses the claimed security properties\n   of\
    \ EAP-AKA as well as vulnerabilities and security recommendations.\n"
- title: 12.1.  Identity Protection
  contents:
  - "12.1.  Identity Protection\n   EAP-AKA includes optional Identity privacy support\
    \ that protects the\n   privacy of the subscriber identity against passive eavesdropping.\n\
    \   This document only specifies a mechanism to deliver pseudonyms from\n   the\
    \ server to the peer as part of an EAP-AKA exchange.  Hence, a peer\n   that has\
    \ not yet performed any EAP-AKA exchanges does not typically\n   have a pseudonym\
    \ available.  If the peer does not have a pseudonym\n   available, then the privacy\
    \ mechanism cannot be used, and the\n   permanent identity will have to be sent\
    \ in the clear.  The terminal\n   SHOULD store the pseudonym in non-volatile memory\
    \ so that it can be\n   maintained across reboots.  An active attacker that impersonates\
    \ the\n   network may use the AT_PERMANENT_ID_REQ attribute (Section 4.1.2) to\n\
    \   learn the subscriber's IMSI.  However, as discussed in Section 4.1.2,\n  \
    \ the terminal can refuse to send the cleartext IMSI if it believes\n   that the\
    \ network should be able to recognize the pseudonym.\n   If the peer and server\
    \ cannot guarantee that the pseudonym will be\n   maintained reliably, and Identity\
    \ privacy is required then additional\n   protection from an external security\
    \ mechanism (such as Protected\n   Extensible Authentication Protocol (PEAP) [PEAP])\
    \ may be used.  The\n   benefits and the security considerations of using an external\n\
    \   security mechanism with EAP-AKA are beyond the scope of this\n   document.\n"
- title: 12.2.  Mutual Authentication
  contents:
  - "12.2.  Mutual Authentication\n   EAP-AKA provides mutual authentication via the\
    \ 3rd generation AKA\n   mechanisms [TS33.102] and [S.S0055-A].\n   Note that\
    \ this mutual authentication is with the EAP server.  In\n   general, EAP methods\
    \ do not authenticate the identity or services\n   provided by the EAP authenticator\
    \ (if distinct from the EAP server)\n   unless they provide the so-called channel\
    \ bindings property.  The\n   vulnerabilities related to this have been discussed\
    \ in [RFC3748],\n   [EAPKeying], [ServiceIdentity].\n   EAP-AKA does not provide\
    \ the channel bindings property, so it only\n   authenticates the EAP server.\
    \  However, ongoing work such as\n   [ServiceIdentity] may provide such support\
    \ as an extension to popular\n   EAP methods such as EAP-TLS, EAP-SIM, or EAP-AKA.\n"
- title: 12.3.  Flooding the Authentication Centre
  contents:
  - "12.3.  Flooding the Authentication Centre\n   The EAP-AKA server typically obtains\
    \ authentication vectors from the\n   Authentication Centre (AuC).  EAP-AKA introduces\
    \ a new usage for the\n   AuC.  The protocols between the EAP-AKA server and the\
    \ AuC are out of\n   the scope of this document.  However, it should be noted\
    \ that a\n   malicious EAP-AKA peer may generate a lot of protocol requests to\n\
    \   mount a denial-of-service attack.  The EAP-AKA server implementation\n   SHOULD\
    \ take this into account and SHOULD take steps to limit the\n   traffic that it\
    \ generates towards the AuC, preventing the attacker\n   from flooding the AuC\
    \ and from extending the denial-of-service attack\n   from EAP-AKA to other users\
    \ of the AuC.\n"
- title: 12.4.  Key Derivation
  contents:
  - "12.4.  Key Derivation\n   EAP-AKA supports key derivation with 128-bit effective\
    \ key strength.\n   The key hierarchy is specified in Section 7.\n   The Transient\
    \ EAP Keys used to protect EAP-AKA packets (K_encr,\n   K_aut), the Master Session\
    \ Keys, and the Extended Master Session Keys\n   are cryptographically separate.\
    \  An attacker cannot derive any\n   non-trivial information about any of these\
    \ keys based on the other\n   keys.  An attacker also cannot calculate the pre-shared\
    \ secret from\n   AKA IK, AKA CK, EAP-AKA K_encr, EAP-AKA K_aut, the Master Session\n\
    \   Key, or the Extended Master Session Key.\n"
- title: 12.5.  Brute-Force and Dictionary Attacks
  contents:
  - "12.5.  Brute-Force and Dictionary Attacks\n   The effective strength of EAP-AKA\
    \ values is 128 bits, and there are\n   no known, computationally feasible brute-force\
    \ attacks.  Because AKA\n   is not a password protocol (the pre-shared secret\
    \ is not a\n   passphrase, or derived from a passphrase), EAP-AKA is not vulnerable\n\
    \   to dictionary attacks.\n"
- title: 12.6.  Protection, Replay Protection, and Confidentiality
  contents:
  - "12.6.  Protection, Replay Protection, and Confidentiality\n   AT_MAC, AT_IV,\
    \ AT_ENCR_DATA, and AT_COUNTER attributes are used to\n   provide integrity, replay,\
    \ and confidentiality protection for EAP-AKA\n   Requests and Responses.  Integrity\
    \ protection with AT_MAC includes\n   the EAP header.  Integrity protection (AT_MAC)\
    \ is based on a keyed\n   message authentication code.  Confidentiality (AT_ENCR_DATA\
    \ and\n   AT_IV) is based on a block cipher.\n   Because keys are not available\
    \ in the beginning of the EAP methods,\n   the AT_MAC attribute cannot be used\
    \ for protecting EAP/AKA-Identity\n   messages.  However, the AT_CHECKCODE attribute\
    \ can optionally be used\n   to protect the integrity of the EAP/AKA-Identity\
    \ roundtrip.\n   Confidentiality protection is applied only to a part of the protocol\n\
    \   fields.  The table of attributes in Section 10.1 summarizes which\n   fields\
    \ are confidentiality protected.  It should be noted that the\n   error and notification\
    \ code attributes AT_CLIENT_ERROR_CODE and\n   AT_NOTIFICATION are not confidential,\
    \ but they are transmitted in the\n   clear.  Identity protection is discussed\
    \ in Section 12.1.\n   On full authentication, replay protection of the EAP exchange\
    \ is\n   provided by RAND and AUTN values from the underlying AKA scheme.\n  \
    \ Protection against replays of EAP-AKA messages is also based on the\n   fact\
    \ that messages that can include AT_MAC can only be sent once with\n   a certain\
    \ EAP-AKA Subtype, and on the fact that a different K_aut key\n   will be used\
    \ for calculating AT_MAC in each full authentication\n   exchange.\n   On fast\
    \ re-authentication, a counter included in AT_COUNTER and a\n   server random\
    \ nonce is used to provide replay protection.  The\n   AT_COUNTER attribute is\
    \ also included in EAP-AKA notifications, if\n   they are used after successful\
    \ authentication in order to provide\n   replay protection between re-authentication\
    \ exchanges.\n   The contents of the user identity string are implicitly integrity\n\
    \   protected by including them in key derivation.\n   Because EAP-AKA is not\
    \ a tunneling method, EAP-Request/Notification,\n   EAP-Response/Notification,\
    \ EAP-Success, or EAP-Failure packets are\n   not confidential, integrity protected,\
    \ or replay protected.  On\n   physically insecure networks, this may enable an\
    \ attacker to mount\n   denial-of-service attacks by spoofing these packets. \
    \ As discussed in\n   Section 6.3, the peer will only accept EAP-Success after\
    \ the peer\n   successfully authenticates the server.  Hence, the attacker cannot\n\
    \   force the peer to believe successful mutual authentication has\n   occurred\
    \ before the peer successfully authenticates the server or\n   after the peer\
    \ failed to authenticate the server.\n   The security considerations of EAP-AKA\
    \ result indications are covered\n   in Section 12.8\n   An eavesdropper will\
    \ see the EAP Notification, EAP_Success and\n   EAP-Failure packets sent in the\
    \ clear.  With EAP-AKA, confidential\n   information MUST NOT be transmitted in\
    \ EAP Notification packets.\n"
- title: 12.7.  Negotiation Attacks
  contents:
  - "12.7.  Negotiation Attacks\n   EAP-AKA does not protect the EAP-Response/Nak\
    \ packet.  Because\n   EAP-AKA does not protect the EAP method negotiation, EAP\
    \ method\n   downgrading attacks may be possible, especially if the user uses\
    \ the\n   same identity with EAP-AKA and other EAP methods.\n   As described in\
    \ Section 8, EAP-AKA allows the protocol to be extended\n   by defining new attribute\
    \ types.  When defining such attributes, it\n   should be noted that any extra\
    \ attributes included in\n   EAP-Request/AKA-Identity or EAP-Response/AKA-Identity\
    \ packets are not\n   included in the MACs later on, and thus some other precautions\
    \ must\n   be taken to avoid modifications to them.\n   EAP-AKA does not support\
    \ ciphersuite negotiation or EAP-AKA protocol\n   version negotiation.\n"
- title: 12.8.  Protected Result Indications
  contents:
  - "12.8.  Protected Result Indications\n   EAP-AKA supports optional protected success\
    \ indications, and\n   acknowledged failure indications.  If a failure occurs\
    \ after\n   successful authentication, then the EAP-AKA failure indication is\n\
    \   integrity and replay protected.\n   Even if an EAP-Failure packet is lost\
    \ when using EAP-AKA over an\n   unreliable medium, then the EAP-AKA failure indications\
    \ will help\n   ensure that the peer and EAP server will know the other party's\n\
    \   authentication decision.  If protected success indications are used,\n   then\
    \ the loss of Success packet will also be addressed by the\n   acknowledged, integrity,\
    \ and replay protected EAP-AKA success\n   indication.  If the optional success\
    \ indications are not used, then\n   the peer may end up believing the server\
    \ completed successful\n   authentication, when actually it failed.  Because access\
    \ will not be\n   granted in this case, protected result indications are not needed\n\
    \   unless the client is not able to realize it does not have access for\n   an\
    \ extended period of time.\n"
- title: 12.9.  Man-in-the-Middle Attacks
  contents:
  - "12.9.  Man-in-the-Middle Attacks\n   In order to avoid man-in-the-middle attacks\
    \ and session hijacking,\n   user data SHOULD be integrity protected on physically\
    \ insecure\n   networks.  The EAP-AKA Master Session Key or keys derived from\
    \ it MAY\n   be used as the integrity protection keys, or, if an external security\n\
    \   mechanism such as PEAP is used, then the link integrity protection\n   keys\
    \ MAY be derived by the external security mechanism.\n   There are man-in-the-middle\
    \ attacks associated with the use of any\n   EAP method within a tunneled protocol.\
    \  For instance, an early\n   version of PEAP [PEAP-02] was vulnerable to this\
    \ attack.  This\n   specification does not address these attacks.  If EAP-AKA\
    \ is used\n   with a tunneling protocol, there should be cryptographic binding\n\
    \   provided between the protocol and EAP-AKA to prevent\n   man-in-the-middle\
    \ attacks through rogue authenticators being able to\n   setup one-way authenticated\
    \ tunnels.  For example, newer versions of\n   PEAP include such cryptographic\
    \ binding.  The EAP-AKA Master Session\n   Key MAY be used to provide the cryptographic\
    \ binding.  However, the\n   mechanism that provides the binding depends on the\
    \ tunneling protocol\n   and is beyond the scope of this document.\n"
- title: 12.10.  Generating Random Numbers
  contents:
  - "12.10.  Generating Random Numbers\n   An EAP-AKA implementation SHOULD use a\
    \ good source of randomness to\n   generate the random numbers required in the\
    \ protocol.  Please see\n   [RFC4086] for more information on generating random\
    \ numbers for\n   security applications.\n"
- title: 13.  Security Claims
  contents:
  - "13.  Security Claims\n   This section provides the security claims required by\
    \ [RFC3748].\n   Auth.  Mechanism: EAP-AKA is based on the AKA mechanism, which\
    \ is an\n   authentication and key agreement mechanism based on a symmetric\n\
    \   128-bit pre-shared secret.\n   Ciphersuite negotiation: No\n   Mutual authentication:\
    \ Yes (Section 12.2)\n   Integrity protection: Yes (Section 12.6)\n   Replay protection:\
    \ Yes (Section 12.6)\n   Confidentiality: Yes, except method-specific success\
    \ and failure\n   indications (Section 12.1, Section 12.6)\n   Key derivation:\
    \ Yes\n   Key strength: EAP-AKA supports key derivation with 128-bit effective\n\
    \   key strength.\n   Description of key hierarchy: Please see Section 7.\n  \
    \ Dictionary attack protection: N/A (Section 12.5)\n   Fast reconnect: Yes\n \
    \  Cryptographic binding: N/A\n   Session independence: Yes (Section 12.4)\n \
    \  Fragmentation: No\n   Channel binding: No\n   Indication of vulnerabilities.\
    \  Vulnerabilities are discussed in\n   Section 12.\n"
- title: 14.  Acknowledgements and Contributions
  contents:
  - "14.  Acknowledgements and Contributions\n   The authors wish to thank Rolf Blom\
    \ of Ericsson, Bernard Aboba of\n   Microsoft, Arne Norefors of Ericsson, N.Asokan\
    \ of Nokia, Valtteri\n   Niemi of Nokia, Kaisa Nyberg of Nokia, Jukka-Pekka Honkanen\
    \ of Nokia,\n   Pasi Eronen of Nokia, Olivier Paridaens of Alcatel, and Ilkka\n\
    \   Uusitalo of Ericsson for interesting discussions in this problem\n   space.\n\
    \   Many thanks to Yoshihiro Ohba for reviewing the document.\n   This protocol\
    \ has been partly developed in parallel with EAP-SIM\n   [EAP-SIM], and hence\
    \ this specification incorporates many ideas from\n   EAP-SIM, and many contributions\
    \ from the reviewer's of EAP-SIM.\n   The attribute format is based on the extension\
    \ format of Mobile IPv4\n   [RFC3344].\n"
- title: 15.  References
  contents:
  - '15.  References

    '
- title: 15.1.  Normative References
  contents:
  - "15.1.  Normative References\n   [TS33.102]        3rd Generation Partnership\
    \ Project, \"3GPP Technical\n                     Specification 3GPP TS 33.102\
    \ V5.1.0: \"Technical\n                     Specification Group Services and System\
    \ Aspects; 3G\n                     Security; Security Architecture (Release 5)\"\
    \",\n                     December 2002.\n   [S.S0055-A]       3rd Generation\
    \ Partnership Project 2, \"3GPP2\n                     Enhanced Cryptographic\
    \ Algorithms\", September 2003.\n   [RFC4282]         Aboba, B., Beadles, M.,\
    \ Arkko, J., and P. Eronen,\n                     \"The Network Access Identifier\"\
    , RFC 4282, December\n                     2005.\n   [RFC3748]         Aboba,\
    \ B., Blunk, L., Vollbrecht, J., Carlson, J.,\n                     and H.  Levkowetz,\
    \ \"Extensible Authentication\n                     Protocol (EAP)\", RFC 3748,\
    \ June 2004.\n   [RFC2119]         Bradner, S., \"Key words for use in RFCs to\
    \ Indicate\n                     Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [TS23.003]        3rd Generation Partnership Project, \"3GPP Technical\n\
    \                     Specification 3GPP TS 23.003 V6.8.0: \"3rd\n           \
    \          Generation Parnership Project; Technical\n                     Specification\
    \ Group Core Network; Numbering,\n                     addressing and identification\
    \ (Release 6)\"\",\n                     December 2005.\n   [RFC2104]        \
    \ Krawczyk, H., Bellare, M. and R. Canetti, \"HMAC:\n                     Keyed-Hashing\
    \ for Message Authentication\",\n                     RFC 2104, February 1997.\n\
    \   [AES]             National Institute of  Standards and Technology,\n     \
    \                \"Federal Information Processing Standards (FIPS)\n         \
    \            Publication 197, \"Advanced Encryption Standard\n               \
    \      (AES)\"\", November 2001,\n                     http://csrc.nist.gov/publications/fips/fips197/\n\
    \                     fips-197.pdf.\n   [CBC]             National Institute of\
    \ Standards and Technology,\n                     \"NIST Special Publication 800-38A,\
    \ \"Recommendation\n                     for Block Cipher Modes of Operation -\
    \ Methods and\n                     Techniques\"\", December 2001,\n         \
    \            http://csrc.nist.gov/publications/\n                     nistpubs/800-38a/sp800-38a.pdf.\n\
    \   [SHA-1]           National Institute of Standards and Technology,\n      \
    \               U.S.  Department of Commerce, \"Federal Information\n        \
    \             Processing Standard (FIPS) Publication 180-1,\n                \
    \     \"Secure Hash Standard\"\", April 1995.\n   [PRF]             National Institute\
    \ of Standards and Technology,\n                     \"Federal Information Processing\
    \ Standards (FIPS)\n                     Publication  186-2 (with change notice);\
    \ Digital\n                     Signature Standard (DSS)\", January 2000,\n  \
    \                   http://csrc.nist.gov/publications/\n                     fips/fips186-2/fips186-2-change1.pdf.\n\
    \   [TS33.105]        3rd Generation Partnership Project, \"3GPP Technical\n \
    \                    Specification 3GPP TS 33.105 4.1.0: \"Technical\n       \
    \              Specification Group Services and System Aspects; 3G\n         \
    \            Security; Cryptographic Algorithm Requirements\n                \
    \     (Release 4)\"\", June 2001.\n   [RFC3629]         Yergeau, F., \"UTF-8,\
    \ a transformation format of ISO\n                     10646\", STD 63, RFC 3629,\
    \ November 2003.\n   [RFC2434]         Narten, T. and H. Alvestrand, \"Guidelines\
    \ for\n                     Writing an IANA Considerations Section in RFCs\",\n\
    \                     BCP 26, RFC 2434, October 1998.\n"
- title: 15.2.  Informative References
  contents:
  - "15.2.  Informative References\n   [RFC2548]         Zorn, G., \"Microsoft Vendor-specific\
    \ RADIUS\n                     Attributes\", RFC 2548, March 1999.\n   [PEAP]\
    \            Palekar, A., Simon, D., Zorn, G., Salowey, J.,\n                \
    \     Zhou, H., and S. Josefsson, \"Protected EAP Protocol\n                 \
    \    (PEAP) Version 2\", work in progress, October 2004.\n   [PEAP-02]       \
    \  Anderson, H., Josefsson, S., Zorn, G., Simon, D.,\n                     and\
    \ A.  Palekar, \"Protected EAP Protocol (PEAP)\",\n                     work in\
    \ progress, February 2002.\n   [EAPKeying]       Aboba, B., Simon, D., Arkko,\
    \ J., Eronen, P., and H.\n                     Levkowetz, \"Extensible Authentication\
    \ Protocol\n                     (EAP) Key Management Framework\", work in progress,\n\
    \                     October 2005.\n   [ServiceIdentity] Arkko, J. and P. Eronen,\
    \ \"Authenticated Service\n                     Information for the Extensible\
    \ Authentication\n                     Protocol (EAP)\", Work in Progress, October\
    \ 2004.\n   [RFC4086]         Eastlake, D., Schiller, J., and S. Crocker,\n  \
    \                   \"Randomness Requirements for Security\", BCP 106,\n     \
    \                RFC 4086, June 2005.\n   [RFC3344]         Perkins, C., \"IP\
    \ Mobility Support for IPv4\",\n                     RFC 3344, August 2002.\n\
    \   [EAP-SIM]         Haverinen, H., Ed. and J. Salowey, Ed., \"Extensible\n \
    \                    Authentication Protocol Method for Global System\n      \
    \               for Mobile Communications (GSM) Subscriber Identity\n        \
    \             Modules (EAP-SIM)\", RFC 4186, January 2006.\n"
- title: Appendix A.  Pseudo-Random Number Generator
  contents:
  - "Appendix A.  Pseudo-Random Number Generator\n   The \"|\" character denotes concatenation,\
    \ and \"^\" denotes\n   exponentiation.\n   Step 1: Choose a new, secret value\
    \ for the seed-key, XKEY\n   Step 2: In hexadecimal notation let\n       t = 67452301\
    \ EFCDAB89 98BADCFE 10325476 C3D2E1F0\n       This is the initial value for H0|H1|H2|H3|H4\n\
    \       in the FIPS SHS [SHA-1]\n   Step 3: For j = 0 to m - 1 do\n         3.1.\
    \  XSEED_j = 0 /* no optional user input */\n         3.2.  For i = 0 to 1 do\n\
    \               a.  XVAL = (XKEY + XSEED_j) mod 2^b\n               b.  w_i =\
    \ G(t, XVAL)\n               c.  XKEY = (1 + XKEY + w_i) mod 2^b\n         3.3.\
    \  x_j = w_0|w_1\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jari Arkko\n   Ericsson\n   FIN-02420 Jorvas\n   Finland\n\
    \   EMail: jari.Arkko@ericsson.com\n   Henry Haverinen\n   Nokia Enterprise Solutions\n\
    \   P.O. Box 12\n   FIN-40101 Jyvaskyla\n   Finland\n   EMail: henry.haverinen@nokia.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
