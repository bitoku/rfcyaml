- title: __initial_text__
  contents:
  - '               Draft design for a text/graphics protocol

    '
- title: DRAFT DESIGN FOR A TEXT/GRAPHICS PROTOCOL
  contents:
  - "DRAFT DESIGN FOR A TEXT/GRAPHICS PROTOCOL\n   This proposal should be seen as\
    \ a synthesis of existing ideas rather\n   than an attempt to put forth new ones.\
    \  It is based on work by the\n   NGG, Elaine Thomas, Peter Deutsch, Charles Irby,\
    \ Ken Victor, Bill\n   Duvall, Bob Sproull, and others at ARC, PARC, and BBN.\n\
    \   We are concerned about the lack of text-handling capabilities of the\n   protocol\
    \ suggested in RFC 493.  Also, we feel that the protocol will\n   have a significant\
    \ influence on the interface provided to writers of\n   future graphics application\
    \ programs, and consequently that such\n   things as \"beam twiddling\" should\
    \ not be part of the protocol.\n      Things of this nature address the problem\
    \ at too low a level for a\n      facility which is intended to service the needs\
    \ of a wide range of\n      graphics devices.\n      We feel that, although the\
    \ breakdown into \"levels\" as proposed in\n      RFC 493 may be expedient for\
    \ initial experimentation, it is\n      inappropriate for a Network Standard Protocol.\
    \  Instead, we\n      propose that the protocol allow for two levels, segmented\
    \ and\n      structured.  This allows the writers of graphics application\n  \
    \    programs to deal with a very simple display facility (segments\n      consisting\
    \ of lines, dots, or character strings) or with a\n      powerful structure of\
    \ display subroutines.\n   We propose an experimental implementation of such a\
    \ scheme on the\n   ARC, BBN, and PARC systems to test these ideas using several\n\
    \   application programs (including NLS) and at least an IMLAC, ARDS, and\n  \
    \ an E&S LDS.\n"
- title: Environment
  contents:
  - "Environment\n   We are trying to design a protocol used to communicate with a\n\
    \   \"virtual display\" to operate at the other end of a wire (ARPANET\n   connection)\
    \ from a \"host\" which is running some kind of display\n   application program.\n\
    \      We will adopt the terminology that the human user, sitting at the\n   \
    \   display, is the \"user\" and the application program is the\n      \"server\"\
    .\n   We wish to stress the fact that within a single application, a single\n\
    \   terminal should be useable both as an \"interactive graphics\" terminal\n\
    \   AND as an \"interactive control\" terminal.  Thus, the graphics\n   protocol\
    \ must allow for teletype-like operations.\n   The need for two sets of connections\
    \ for running graphics programs\n   over the Net (according to our understanding)\
    \ is centered about the\n   issue of handling (being able to recover gracefully\
    \ from) berserk\n   programs (and perhaps achieving greater bandwidth through\
    \ the net).\n   We recognize this problem but also think one should be able to\
    \ run\n   graphics programs using only one set of telnet connections.  Also, it\n\
    \   seems obvious that even though one is running a graphics program, one\n  \
    \ must expect to be able to handle \"unescorted\" characters (not\n   embedded\
    \ in a command or response message) being sent to his\n   terminal.\n   Consequently,\
    \ we are proposing that the graphics protocol be\n   implemented within telnet\
    \ using 8-bit BEGIN-GRAPHICS-COMMAND and\n   END-GRAPHICS-COMMAND characters or\
    \ the 8-bit transparent mode of the\n   new telnet.  This means that one will\
    \ be able to run graphics\n   programs with one, two, or more sets of telnet connections.\n\
    \   We also strongly propose that any site which is interested in\n   supporting\
    \ display terminals for use in network graphics would be\n   prudent to implement\
    \ local control over the display (such as IGNORE-\n   GRAPHICS-COMMANDS, RESET-TO-TTY-MODE\
    \ commands from the user to the\n   using host).  Failure to take such precautions\
    \ may very well lead to\n   burned out tubes!\n"
- title: Basic concepts
  contents:
  - "Basic concepts\n   The model\n      The model we are adopting consists of an\
    \ application program\n      manipulating a (remote) display file.  This file\
    \ may be\n      \"segmented\" or \"structured\", in which case it may be manipulated\n\
    \      independently from the display itself.\n         For structured display\
    \ files an \"update display\" command causes\n         the display file to get\
    \ mapped onto the display in whatever\n         fashion is appropriate for the\
    \ display.\n      Part of this protocol deals with commands issued to the (remote)\n\
    \      display file editor.  This editor creates and changes the display\n   \
    \   file at the user host.\n   Structured Display Files\n      A structured display\
    \ file consists of named subpictures, each\n      containing any number of named\
    \ units.  There are two types of\n      units, primitive units and call units.\
    \  The effect of a unit is\n      independent of its name or creation within the\
    \ subpicture.\n         Primitive units contain drawing instructions and associated\n\
    \         coordinates that may generate visible information on the\n         display\
    \ screen.  Drawing instructions and coordinates can occur\n         only in primitive\
    \ units.\n         Call units give the display structure a subroutine capability.\n\
    \         A call unit invokes the display of another subpicture.  In\n       \
    \  other words, a call unit allows one subpicture to contain\n         instances\
    \ of other subpictures.  As well as providing for\n         subroutine-style control\
    \ transfer, call units can be used to\n         establish display parameters and\
    \ maintain parameter\n         transparency.  For example, a call unit can be\
    \ used to call a\n         subpicture with a translation and relative intensity\
    \ setting.\n         On return from the called subpicture, these parameters are\n\
    \         restored to their original values.\n         A subpicture is an ordered\
    \ list of units which can be any\n         mixture of primitive and call units.\
    \  Each subpicture begins\n         with a header and terminates with the subpicture\
    \ end unit.  The\n         subpicture end unit is a single unique unit in a display\n\
    \         structure linked to the end of each subpicture.\n         In order to\
    \ understand how control passes through a structure,\n         one can think of\
    \ the display elements as follows: subpictures\n         are subroutines and units\
    \ are linked blocks of in-line code.\n         When all of the units contained\
    \ in a subpicture have been\n         executed, the subpicture end unit returns\
    \ control to wherever\n         the subpicture was called from.  A primitive unit\
    \ contains\n         display code and transfer to the next unit.  A call unit\n\
    \         contains a subroutine call to a subpicture and a transfer to\n     \
    \    the next unit in line.\n   Segmented Display Files\n      A segmented display\
    \ file consists of named segments, each\n      containing any number of primitive\
    \ units.  The only operations\n      available for segmented display file is to\
    \ add new, delete old, or\n      replace old segments (updating the actual display\
    \ happens\n      automatically).  The effect of a unit is independent of its name\n\
    \      or creation order within the subpicture.\n   Hosts\n      Since a given\
    \ terminal may be under partial control of several\n      different hosts, all\
    \ further discussion of names, coordinates,\n      display files, etc. should\
    \ be taken as relative to each individual\n      host.\n      That is, each host\
    \ believes it has a display file, naming, and\n      coordinate space and a set\
    \ of state parameters entirely under its\n      control; its only evidence of\
    \ resource sharing is that the\n      terminal may appear to be of different sizes\
    \ at different times.\n      (We feel that in principle it should be processes\
    \ within hosts,\n      rather than hosts, that enjoy these properties, but it\
    \ does not\n      seem feasible to construct a process identification scheme that\n\
    \      all hosts will find acceptable.)\n   Subpictures\n      A subpicture has\
    \ a name and zero or more units.\n         Subpicture names are arbitrary, globally\
    \ unique, fixed-length\n         identifiers (subpicture names are chosen by the\
    \ host).\n         Each unit (displayable component) has a name, which is local\
    \ to\n         the subpicture.\n      A unit may be a \"primitive unit\", such\
    \ as a string or a vector, or\n      a \"call unit\", which implies displaying\
    \ a (possibly transformed)\n      copy of another subpicture.\n         The display\
    \ data are organized into a re-entrant tree (acyclic\n         graph) by the call\
    \ units.\n      A unit may be \"visible\" or \"invisible\".\n         A particular\
    \ instance of a subpicture (the result of a call-\n         unit) appears on the\
    \ screen precisely if it and all subpictures\n         on the logical path to\
    \ it from the root of the tree are\n         \"visible\".\n   Primitive units\n\
    \      Strings\n         A string is a horizontal line of characters with its\
    \ own mode\n         and X,Y origin relative to the origin of the subpicture.\n\
    \            Note: intensity is always relative.\n         Font and mode (e.g.\
    \ blinking) information logically accompanies\n         each character.  This\
    \ is accomplished by means of embedded mode\n         and font specification characters\
    \ and a \"restore original\n         string mode and font\" character.\n     \
    \       Note: Mode modifiers are non-displayable characters and do\n         \
    \   not take up character positions on the screen.\n         Determining the space\
    \ occupied on the screen by a string\n         requires knowledge of the font(s)\
    \ being used; this is a\n         separate question which is dealt with later.\n\
    \   TTY units\n      A tty unit is a rectangle that consists of a number of lines.\n\
    \      Within this unit the display acts as if it were an alpha-numeric\n    \
    \  display, e.g.,\n         characters which would write beyond the right hand\
    \ margin of\n         the rectangle cause an automatic line folding to take place\n\
    \         ascii control characters CarriageReturn, LineFeed, FormFeed,\n     \
    \    and BackSpaceCharacter, (HorizontalTab and VerticalTab?), are\n         interpreted\
    \ appropriately\n         other control characters are displayed in a terminal\
    \ specific\n         manner, e.g. ^F, <^F>, etc.\n         display of the characters\
    \ in the range 200-377 is left\n         unspecified at this point (truncated\
    \ to 7 bits?, alternate\n         fonts?, alternate modes?)\n            It is\
    \ hoped that we can agree on a standardization of some\n            of the characters\
    \ in this range to allow for such things as\n            greek letters, common\
    \ mathematical symbols, super-scripting,\n            and sub-scripting.\n   \
    \      linefolding that would cause characters to be written below the\n     \
    \    rectangle (whether performed automatically or by a LineFeed\n         character,\
    \ etc.) cause the text within the unit to be scrolled\n         upwards one line\
    \ (storage tube may adopt a different scheme).\n      Characters are displayed\
    \ in a teletype unit in one of two ways:\n         Characters sent to the terminal\
    \ that are not part of any\n         command (unescorted characters) are appended\
    \ to appropriate\n         tty-units (see below --- USE-TTY-UNITS, TTY)\n    \
    \     By use of the APPEND-STRING-TO-UNITS command for structured\n         display\
    \ files\n      The first character sent to a tty-unit appears as the first\n \
    \     character (at the left margin) of the top line.  This is necessary\n   \
    \   for a number of reasons, the most convincing of which is the\n      behavior\
    \ characteristics of storage tubes and most real alpha-\n      numeric displays.\n\
    \         Successive characters appear as successive characters within\n     \
    \    the top line until either an explicit (e.g., linefeed) or\n         implicit\
    \ (line overflow) line break occurs.\n         When a line break occurs, the next\
    \ character appears on the\n         second from the top line of the unit.\n \
    \        This continues until the bottom line of the tty-unit is\n         reached.\n\
    \            At this point, a line break causes the lines within the unit\n  \
    \          to scroll up one line.\n               Note: Storage scopes may use\
    \ a different technique for\n               scrolling.\n      Dots\n         A\
    \ dot unit consists of an initial X0,Y0 followed by a series of\n         points\
    \ X,Y which describe a series of dots.\n         Each dot unit logically carries\
    \ mode information such as\n         blinking, relative intensity, etc.\n    \
    \  Lines\n         A line unit consists of an origin X0,Y0 followed by a series\
    \ of\n         points X,Y which describes a series of straight lines connected\n\
    \         tail-to-head (i.e. a polygon).\n         Each line unit logically carries\
    \ mode information such as\n         blinking, dotted vs. solid, invisible.\n\
    \         Other kinds of lines, such as conic sections, may belong in the\n  \
    \       primitive set.\n      Special points\n         This primitive unit consists\
    \ of a series of points, which will\n         be displayed joined by lines in\
    \ the best available manner.\n         The intent is to use Flegal's algorithms\
    \ to produce a smooth\n         curve.\n      Device-specific\n         This primitive\
    \ unit consists of any number of device specific\n         commands.  The device\
    \ type may be obtained through an\n         interrogation command.\n   Call units\n\
    \      In addition to the name of the referenced subpicture, a call unit\n   \
    \   may include the following transformations:\n         Master/instance rectangle:\
    \ specifies a rectangle in the\n         caller's space into which a specified\
    \ rectangle of the callee's\n         space is to be imaged.  This provides independent\
    \ scaling in\n         each coordinate as well as translation and clipping.\n\
    \         Rotation.  It may be desirable to combine this with scaling\n      \
    \   using the familiar idea of homogeneous transformation.\n         Intensity\
    \ and color control.  In principle, a call could\n         specify intensity increments\
    \ (positive or negative) for each\n         color.\n         It is assumed that\
    \ best effort will be used in scaling and\n         rotation of text.  We recommend\
    \ replacing it by a line when all\n         else fails.\n   Initial state\n  \
    \    After the initial telnet connection is established, the first\n      graphics\
    \ command issued by the applications program should be a\n      request for either\
    \ a structured display file or for a segmented\n      display file.\n        \
    \ The response to this request should be whether or not the\n         requested\
    \ display file was allocated and other parameters about\n         the virtual\
    \ display, e.g. screen size, character sizes, whether\n         or not color is\
    \ available, etc.\n      Before the display file is allocated, the terminal should\
    \ appear\n      as, and simulate to the best of its ability, a Network Virtual\n\
    \      Terminal (NVT).\n      Any graphic commands issued before the allocation\
    \ of a display\n      file will be ignored.\n      After requesting commands and\
    \ receiving a structured display file,\n      the following structure will exist:\n\
    \         There will exist a subpicture, referred to as the ICP\n         SUBPICTURE,\
    \ whose rectangular extent corresponds to the extent\n         of the virtual\
    \ display allocated to this host.\n         There will exist a tty-unit, referred\
    \ to as the ICP TTY-UNIT,\n         in the ICP SUBPICTURE, where rectangular extent\
    \ corresponds to\n         the extent of the virtual display allocated to this\
    \ host.\n            This tty-unit will consist of n lines, where n is terminal\n\
    \            dependent and available through a query command.\n            This\
    \ tty-unit will be instituted for the display of\n            unescorted characters.\n\
    \         There will be in effect an implicit call on the ICP SUBPICTURE.\n  \
    \          This call is not accessible to the applications program.\n        \
    \ The applications program causes the display of information by:\n           \
    \ 1) creating primitive units in the ICP SUBPICTURE\n            2) creating call\
    \ units, to created subpictures, in the ICP\n               SUBPICTURE\n     \
    \       3) using the TTY command to make visible/invisible the ICP\n         \
    \      TTY-UNIT (or change its location or size)\n      After requesting and receiving\
    \ a segmented display file, the\n      following structure will exist:\n     \
    \    There will exist a segment, referred to as the ICP SEGMENT.\n           \
    \ There will exist a tty-unit, referred to as the ICP TTY-\n            UNIT,\
    \ in the ICP SEGMENT, whose rectangular extent\n            corresponds to the\
    \ extent of the virtual display allocated\n            to this host.\n       \
    \     This tty-unit will consist of n lines, where n is terminal\n           \
    \ dependent and available through a query command.\n            This tty-unit\
    \ will be instituted for the display unescorted\n            characters.\n   \
    \      The applications program causes the display of information by:\n      \
    \      1) creating primitive units in the ICP SEGMENT\n            2) creating\
    \ new segments\n            3) using the TTY command to make visible/invisible\
    \ the ICP\n               TTY-UNIT (or to relocate it or change its size)\n"
- title: Display editing primitives
  contents:
  - "Display editing primitives\n   General editing primitives\n      REQUEST-DISPLAY-FILE\
    \ (file-type)\n         file-type is either structured or segmented.\n       \
    \  This command requires a response.\n   Segmented display file editing\n    \
    \  SEGMENT (Segment)\n         If the segment Segment already exists, then it\
    \ is cleared; if\n         it did not exist then it is created.\n         Pictures\
    \ are displayed within segments by the use of the\n         primitive unit command\
    \ listed below.\n      DELETE-SEGMENT(Segment)\n         If the segment exists,\
    \ then it is deleted.\n      Primitive Units\n         All unit operations cause\
    \ immediate display on the screen.\n         STRING-UNIT(Segment,Mode,X-Origin,Y-Origin,Text)\n\
    \         Writes the specified string unit.\n         Mode refers to relative\
    \ intensity, blinking, reverse video,\n         color, etc.\n         Errors:\
    \ Segment does not exist.\n      LINE-UNIT(Segment,Type,Mode,X0,Y0,X1,Y1, ...,\
    \ Xn,Yn)\n         Draws the specified line segments.\n         Type refers to\
    \ solid, dashed, dotted, etc.\n         Errors: Segment does not exist; illegal\
    \ mode.\n      DOT-UNIT(Segment,Mode,X0,Y0,X1,Y1, ..., Xn,Yn)\n         Draws\
    \ the specified dots.\n         Errors: Segment does not exist; illegal mode.\n\
    \      SPECIAL-POINTS-UNIT(Segment,Mode,X1,Y1, ..., Xn,Yn)\n         Draws the\
    \ special-points curve.\n         The terminal should attempt to connect the specified\
    \ points in\n         the nicest way possible (e.g. Flegal's spline curve algorithm,\n\
    \         straight line segments).\n         Errors: Segment does not exist; illegal\
    \ mode.\n      TTY-UNIT(Segment,Mode,Rectangle,Lines)\n         Creates a unit\
    \ which will behave as a tty-simulation area with\n         \"lines\" lines distributed\
    \ within the specified rectangle.\n         Unescorted characters will be echoed\
    \ in this unit in addition\n         to any other units they are being sent to.\n\
    \         Errors: Segment does not exist.\n      DEVICE-SPECIFIC-UNIT(Segment,device\
    \ commands)\n         Creates a unit of device specific commands.\n      TTY(parameters)\n\
    \         parameters are:\n            position rectangle, visible/invisible,\
    \ number of lines, mode\n            of characters\n         This refers to the\
    \ ICP TTY simulation.\n      RESET()\n         delete all segments, except ICP\
    \ SEGMENT, and all units of ICP\n         SEGMENT, except ICP TTY-UNIT\n     \
    \    resets all nodes to their initial state (i.e., the state that\n         existed\
    \ immediately after a REQUEST-DISPLAY-FILE command)\n"
- title: Structured display file editing
  contents:
  - "Structured display file editing\n      SUBPICTURE(Subpicture, rectangle)\n  \
    \       Creates a new subpicture with name \"Subpicture\".  \"rectangle\"\n  \
    \       is the coordinates of a diagonal of the subpicture's virtual\n       \
    \  screen (i.e. its coordinate system.)\n         If a subpicture named \"Subpicture\"\
    \ already exists, it is\n         cleared and the new coordinate rectangle takes\
    \ precedence.\n      DELETE-SUBPICTURE(Subpicture)\n         Deletes the subpicture\
    \ named \"Subpicture\".  Call units\n         referring to Subpicture are also\
    \ deleted.\n      CLEAR-SUBPICTURE(Subpicture)\n         Deletes all units of\
    \ the subpicture Subpicture, but does not\n         delete the subpicture.\n \
    \     Primitive Units\n         All the operations for creating units are transparent\
    \ to the\n         prior existence of the designated unit, i.e. they function\
    \ as\n         \"replace\" as well as \"create\".\n            STRING-UNIT(Subpicture,Unit,Target-Key,Mode,X-Origin,Y-\n\
    \            origin,Text)\n               Replaces the unit by a string unit.\n\
    \               Mode specifies the mode of the characters (e.g. blinking,\n  \
    \             underlined, etc).\n            Target-Key is used in conjunction\
    \ with the TARGET-SENSITIVE\n            command and target input.  It may also\
    \ be sent via the SET-\n            TARGET-KEY COMMAND.\n            Errors: Subpicture\
    \ does not exist; X-Origin or Y-Origin is\n            outside the subpicture's\
    \ virtual coordinate system.\n               We explicitly do not require an error\
    \ if the string\n               extends beyond the right-hand edge of the subpicture;\n\
    \               however, the results are not defined.\n         LINE-UNIT(Subpicture,Unit,Target-Key,Type,Mode,X0,Y0,X1,Y1,\n\
    \         ..., Xn,Yn)\n            Replaces the unit by a line unit.\n       \
    \        Errors: Subpicture does not exist illegal mode; some X or\n         \
    \      Y is outside the subpicture.\n         DOT-UNIT(Subpicture,Unit,Target-Key,Type,Mode,X0,Y0,X1,Y1,\
    \ ...,\n         Xn,Yn)\n            Replaces the unit by a dot unit.\n      \
    \      Errors: Subpicture does not exist; illegal mode; some X or Y\n        \
    \    is outside the subpicture.\n         SPECIAL-POINTS-UNIT(Subpicture,Unit,Target-Key,Type,Mode,X1,Y1,\n\
    \         ..., Xn,Yn)\n            Replaces the unit by a special-points unit.\n\
    \            Errors: Subpicture does not exist; illegal mode; some X or Y\n  \
    \          is outside the subpicture.\n         CALL-UNIT(Subpicture,Unit,Target-Key,Called-\n\
    \         Subpicture,Parameters)\n            Replaces the unit by a call unit.\n\
    \            Parameters:\n               Master-Instance rectangles\n        \
    \       rotation\n               mode\n            Errors: Subpicture does not\
    \ exist; Called-Subpicture does\n            not exist; parameter errors.\n  \
    \       TTY-UNIT(Subpicture, unit, mode, rectangle, lines)\n            Creates\
    \ a unit which will behave as a tty-simulation area\n            with \"lines\"\
    \ lines distributed within the specified\n            rectangle.\n           \
    \ Errors: Subpicture does not exist.\n         DEVICE-SPECIFIC-UNIT(Subpicture,\
    \ Unit, Target-Key, device,\n         commands)\n            Creates a unit of\
    \ device specific commands.  The action of\n            the commands should leave\
    \ alone (or at least restore) any\n            global modes, e.g., the standout\
    \ mode (see below).\n      APPEND-STRING-TO-UNIT(Subpicture, Unit, Text)\n   \
    \      Appends the specified text to the specific commands.  This only\n     \
    \    makes sense if the specified unit is a string or tty unit.\n         Errors:\
    \ Subpicture does not exist, unit does not exist, not a\n         string or tty\
    \ unit.\n      DELETE-UNIT(Subpicture, Unit)\n         Deletes a unit.\n     \
    \ VISIBLE-UNIT(Subpicture, Unit, Flag)\n         Makes the Unit visible or invisible\
    \ as specified by Flag.  If a\n         unit which is target sensitive is made\
    \ invisible, it is no\n         longer target sensitive.  However, in the absence\
    \ of a\n         subsequent modifying target sensitive command, the unit becomes\n\
    \         target sensitive again if it should be made visible.\n         Errors:\
    \ Subpicture does not exist, unit does not exist.\n      SET-TARGET-KEY(Subpicture,\
    \ Unit, Target-Key)\n         Sets the target key for the specified unit to the\
    \ specified\n         value.\n      SET-STANDOUT-MODE(mode)\n         Sets the\
    \ mode that will be used to make text and/or units stand\n         out to blinking,\
    \ underlining, etc.\n         If the terminal does not support the specified mode,\
    \ the\n         terminal should make a best effort or use another method to\n\
    \         make things stand out.\n      STANDOUT-UNIT(Subpicture, unit, yesno)\n\
    \         makes the specified unit stand out (according to the mode set\n    \
    \     by SET-STANDOUT-MODE) or not, according to \"yesno\".  If the\n        \
    \ unit which is to stand out is a call-unit, the instance of the\n         subpicture\
    \ which is the result of the call (all the way to the\n         terminal nodes)\
    \ is made to stand out.\n      STANDOUT-TEXT(Subpicture, unit, begin-char-count,\
    \ end-char-count,\n      yesno)\n         Unit must refer to a string unit.\n\
    \         Makes the specified text stand out (according to the mode set\n    \
    \     by SET-STANDOUT-MODE) or not, according to \"yesno\".\n      UPDATE-STRUCTURED-DISPLAY()\n\
    \         This causes any changes that have been made to the display\n       \
    \  file, since the last update or since ICP, to be reflected on\n         the\
    \ screen.\n      TTY(parameters)\n         parameters are:\n            position\
    \ rectangle, visible/invisible, number of lines, mode\n            of characters\n\
    \         This refers to the ICP TTY simulation\n      USE-TTY-UNITS(Subpicture1,\
    \ unit1, ..., Subpicturen, unitn)\n         Unescorted characters are to be appended\
    \ only to the specified\n         tty units.\n      Errors: Subpicture, unit does\
    \ not exist.\n      RESET(How)\n         Case How Of\n            =  Permanent\n\
    \               Immediately resets the terminal to its initial ICP state\n   \
    \         =  Temporary\n               Immediately resets the terminal to its\
    \ initial ICP state\n               without destroying the previous state.\n \
    \           =  Restore state saved from last RESET(Temporary).\n"
- title: Direct Feedback
  contents:
  - "Direct Feedback\n   It seems extremely desirable, given network speeds, to allow\
    \ the\n   using host to perform direct feedback to the user without\n   intervention\
    \ from the application program in the serving host.  This\n   is already done\
    \ in telnet with local echoing.  We propose extending\n   this capability to graphics\
    \ by allowing \"dragging\" (attaching a\n   subpicture's origin to the position\
    \ of the cursor), \"tracking\"\n   (following the movement of the mouse, stylus,\
    \ or light pen with a\n   distinctive mark on the screen), \"inking\" (plotting\
    \ the trail of the\n   cursor on the screen) and \"rubber banding\" (a straight\
    \ line attached\n   to a fixed point on one end the cursor location on the other).\n\
    \   These should be seen as allowable extensions of the protocol rather\n   than\
    \ as requirements.  There should, however, be commands available\n   in the protocol\
    \ for determining their existence and controlling them.\n"
- title: Data input primitives
  contents:
  - "Data input primitives\n   Input Control\n      TARGET-SENSATIVE(key1, ..., keyn)\n\
    \         Arms the units which have the specified keys for target\n         selection.\n\
    \      SET-INPUT-MODE(Device, parameters)\n         Selects the mode in which\
    \ a logical device shall produce input\n         and under what conditions.\n\
    \         the logical devices are specified below as well as their\n         possible\
    \ input formats and conditions.\n         Errors: no such device.\n   Keyboard\
    \ input\n      The keyboard has only one input mode, in which it sends a\n   \
    \   character whenever a key is struck.\n   Binary devices\n      Unless otherwise\
    \ specified, binary devices act as an extension of\n      the keyboard and produce\
    \ 8-bit characters which are not\n      distinguishable from keyboard characters\
    \ by the serving host.\n         The algorithm for translating binary devices\
    \ into characters is\n         not specified, but something like the NLS accumulation\n\
    \         algorithm for mouse-keyset chords is intended.\n      Binary devices\
    \ may also input binary data (according to their\n      up/down states), which\
    \ is transmitted on state changes.  Examples\n      of this type of device are\
    \ function keys and overlay cards, mouse\n      and keyset (used independently\
    \ or together), pen-up/pen/down,\n      light pen buttons, etc.\n   Coordinate\
    \ input\n      Coordinates may be sent according to any subset of the following\n\
    \      criteria: with every character in some designated set (e.g.\n      control\
    \ characters, or all characters); with every binary device\n      state change\
    \ input; after some time interval has elapsed; after a\n      position change\
    \ P > (y1-y0) ^2+(x1-x0)^2, etc.\n      Coordinates may be sent in either or both\
    \ of \"X-Y\" or \"target\"\n      format.\n         X-Y format is just the location\
    \ of the cursor relative to the\n         screen region assigned to the host.\n\
    \         Target format is the \"call stack\" (logical path from the root\n  \
    \       unit - the ICP SUBPICTURE - to the closest unit) plus the\n         target-key\
    \ of that unit plus the count of the closest character\n         within the string\
    \ or the closest line segment or dot or special\n         point if appropriate.\n\
    \            Target input is unavailable for segmented display files.\n      \
    \      In the event of overlapping target sensitive units, it is\n           \
    \ not specified which of the units selected will be returned\n            as the\
    \ hit unit.\n   Time input\n      Since hosts may wish to consider two events\
    \ happening sufficiently\n      close together to be simultaneous, or to keep\
    \ detailed interaction\n      statistics, it must be possible to request time\
    \ information to be\n      sent with some reasonable subnet of other types of\
    \ input.\n"
- title: Interrogations
  contents:
  - "Interrogations\n   It must be possible for the serving host to discover its environment\n\
    \   (e.g. screen size, available devices) and to read back state\n   information\
    \ (display file).\n      This is very desirable both for debugging and for redirecting\
    \ a\n      displayed image to another device (e.g. a plotter).\n   Environment\n\
    \      Terminal parameters: screen size and resolution, available input\n    \
    \  devices, terminal type (for device specific control), number of\n      lines\
    \ in the ICP TTY-UNIT.\n      Character parameters: available character sizes,\
    \ special (non-\n      ASCII) characters, font characteristics, sub- and super-scripting\n\
    \      facilities.\n   State\n      Display file or display file components.\n\
    \      Cursor Position\n         It should be possible for the application program\
    \ to read the\n         cursor position at any time.\n      Display File Support\n\
    \         It should be possible to find out if this user process supports\n  \
    \       only segmented or structured display files, or both.\n      Command support\n\
    \         It should be possible to get a matrix from the user process\n      \
    \   which indicates which commands are implemented.  This is a\n         necessity\
    \ to find out which, if any, of the direct feedback\n         features are supported,\
    \ and might be nice to allow for, e.g.,\n         the possibility of a text only\
    \ or graphics only subset of the\n         protocol to be implemented.\n"
- title: Encoding Principles
  contents:
  - "Encoding Principles\n   Commands will have the format : BGC OPCODE DATA EGC where:\n\
    \      BGC (Begin Graphics Command) places the telnet connection into a\n    \
    \  \"read graphics command\" mode,\n      OPCODE DATA is the specific graphics\
    \ command and data, and\n      EGC (End Graphics Command) restores the telnet\
    \ connection to its\n      normal state.\n      Note: This may all have to be\
    \ bracketed by telnet Begin-8-bit-\n      transparent-mode and End-8-bit-transparent-mode\
    \ commands.\n   Numbers in general will have have 7-bits of significance in each\
    \ byte\n   -- if the high order of a byte is on, then the significant bits from\n\
    \   the next byte should be concatenated onto the low-order end of the\n   bits\
    \ collected so far, etc..\n   Subpicture names - shall be 14-bit numbers, assigned\
    \ by the serving\n   host.\n   Unit names - shall be 14-bit numbers, assigned\
    \ by the serving host.\n   Strings - shall be 8-bit characters, with an escape\
    \ convention to\n   represent changes of font and mode.\n      Since the channel\
    \ is 8-bits wide, there is room for many more than\n      128 displayable characters.\
    \  However, the interpretation of codes\n      200B and above is not standardized!\n\
    \   Coordinates should be as described in RFC 493.\n   Rectangles - shall be specified\
    \ by the coordinates of the endpoints\n   of one of the diagonal.\n"
- title: Encoding
  contents:
  - "Encoding\n   The actual encoding of this protocol is forthcoming.  Since we expect\n\
    \   some changes to come about because of the upcoming Network Graphics\n   Group\
    \ Meeting, we have postponed the actual encoding until after this\n   meeting.\n\
    \          [This RFC was put into machine readable form for entry]\n         \
    \  [into the online RFC archives by Via Genie, 12/1999]\n"
