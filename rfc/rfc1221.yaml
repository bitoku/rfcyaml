- title: __initial_text__
  contents:
  - '          Host Access Protocol (HAP) Specification - Version 2

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo describes the Host Access Protocol implemented\
    \ in the\n   Terrestrial Wideband Network (TWBNET).  It obsoletes most but not\
    \ all\n   of RFC 907.  This memo provides information for the Internet\n   community.\
    \  It does not specify an Internet standard.  Distribution\n   of this memo is\
    \ unlimited.\n"
- title: Preface
  contents:
  - "Preface\n   This memo specifies the Host Access Protocol (HAP).  HAP is a Network\n\
    \   layer (OSI Layer 3 lower) access protocol that was first implemented\n   about\
    \ a decade ago for the DARPA/DCA sponsored Wideband Packet\n   Satellite Network\
    \ (WBNET), the precursor of the current Terrestrial\n   Wideband Network (TWBNET).\
    \  This version of the specification\n   obsoletes references [1] and [2] in addition\
    \ to most of RFC 907.\n   HAP is a developmental protocol, and will be revised\
    \ as new\n   capabilities are added and unused features are eliminated or revised.\n\
    \   One reason that HAP is being revised now is that, unlike the original\n  \
    \ WBNET's satellite channel, the TWBNET's T1 fiber links are not a\n   broadcast\
    \ medium.  This has prompted some changes to the protocol\n   that will permit\
    \ greater efficiency in a mesh topology network.\n   Another cause of revision\
    \ is the need to make HAP able to support a\n   variety of OSI layer 3 upper protocols,\
    \ such as DECNET Phase V, ST,\n   and CLNP, where before only Internet Protocol\
    \ (IP) was used.\n   Appendix B describes how backward compatibility with the\
    \ older IP-\n   only version of HAP is achieved.  A third cause of protocol changes\n\
    \   is the desire to simplify interaction between ST2 protocol (RFC 1190)\n  \
    \ agents and the TWBNET.  This has mainly affected the way certain\n   setup errors\
    \ are handled.  These changes are expected to be backward\n   compatible.  Appendix\
    \ A describes two capabilities that may be added\n   to HAP in the future.\n \
    \  One of the protocol enhancements, \"Group Streams\", described in\n   reference\
    \ [2] has been eliminated.  There are no known applications\n   that use the feature.\
    \  As described in Appendix A, a new mechanism,\n   to be called \"shared streams\"\
    , capable of providing equivalent\n   capabilities will be implemented if needed.\
    \  Changes in [2] that have\n   been retained include various query/reply control\
    \ messages that\n   permit a host to determine what resources it owns (mostly\
    \ useful for\n   cleanup following a host reboot or crash).\n   This document\
    \ assumes the reader is familiar with DoD internetworking\n   terminology.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The Host Access Protocol (HAP) is a network layer protocol\
    \ (as is\n   X.25).  (\"Network layer\" here means ISO layer 3 lower, the protocol\n\
    \   layer below the DoD Internet Protocol (IP) layer [3] and above any\n   link\
    \ layer protocol.)  HAP defines the different types of host-to-\n   network control\
    \ messages and host-to-host data messages that may be\n   exchanged over the access\
    \ link connecting a host and the network\n   packet switch node.  The protocol\
    \ establishes formats for these\n   messages, and describes procedures for determining\
    \ when each type of\n   message should be transmitted and what it means when one\
    \ is received.\n   HAP has been implemented in the wide-area network called the\n\
    \   Terrestrial Wideband Network (TWBNET) [5] and in the routers and\n   other\
    \ hosts that connect to TWBNET.  The packet switch nodes that\n   compose the\
    \ TWBNET are called Wideband Packet Switches (WPS).\n   Both the precursor to\
    \ HAP, the Host/SATNET Protocol [6], used in the\n   Atlantic Packet Satellite\
    \ Network (SATNET) and the Mobile Access\n   Terminal Network (MATNET [7]), and\
    \ HAP, used in the original Wideband\n   Satellite Network (WBNET) [8], were originally\
    \ designed to provide\n   efficient access to the single satellite channel each\
    \ network used to\n   connect all sites.  The HAP protocol designers reflected\
    \ some of the\n   peculiarities of the single satellite channel environment in\
    \ the HAP\n   protocol itself.  The current Terrestrial Wideband Network (TWBNET)\n\
    \   utilizes T1-speed fiber connections between sites.  Future networks\n   and\
    \ TWBNET may use a combination of terrestrial connections and\n   satellite connections,\
    \ and may have more than one of each.  The HAP\n   protocol has been changed to\
    \ accommodate these extensions.\n   Section 2 presents an overview of HAP.  Details\
    \ of HAP formats and\n   message exchange procedures are contained in Sections\
    \ 3 through 10.\n   Further explanation of some of the topics addressed in this\
    \ HAP\n   specification can be found in reference [1].\n   Any protocol employed\
    \ to provide sufficiently reliable message\n   exchange over the Host-WPS link\
    \ is assumed to be transparent to the\n   protocol defined in this document. \
    \ Examples of such link-level\n   protocols are ARPANET 1822 local and distant\
    \ host [9], ARPANET VDH\n   protocol [9], and HDLC.\n"
- title: 2. Overview
  contents:
  - "2. Overview\n   HAP can be characterized as a full duplex, nonreliable protocol\
    \ with\n   an optional flow control mechanism.  HAP messages flow simultaneously\n\
    \   in both directions between the WPS and the host.  Transmission is\n   nonreliable\
    \ in the sense that the protocol does not provide any\n   guarantee of error-free\
    \ sequenced delivery.  If error-free delivery\n   on the host's access link is\
    \ required, it must be provided by the\n   link layer protocol below HAP.  (Use\
    \ of link layer protocols for this\n   purpose is not within the scope of this\
    \ document.)  HAP's flow\n   control mechanism operates independently in each\
    \ direction, but the\n   choice to enable flow control or not applies to both\
    \ directions\n   together.\n   HAP supports host-to-host communication in two\
    \ modes corresponding to\n   the two types of HAP data messages, datagram messages\
    \ and stream\n   messages.  Each type of message can be up to 2048 octets in length.\n\
    \   The basic transmission service in the network is datagram service.\n   Datagrams\
    \ are variable length, unsequenced, independent, and delivery\n   is not guaranteed.\
    \  The HAP header of each datagram determines the\n   processing of the message.\n\
    \   On this datagram service base a \"stream\" service is built.  Stream\n   service\
    \ provides network bandwidth guarantees, but requires explicit\n   setup and teardown\
    \ operations to allocate and deallocate network\n   resources.  Stream traffic\
    \ is best suited for continuous media\n   traffic, but may also be used to obtain\
    \ the lowest possible network\n   delay.  Host streams are established by a setup\
    \ message exchange\n   between the host and the network prior to the commencement\
    \ of data\n   flow.  Although established host streams can have their\n   characteristics\
    \ modified by subsequent setup messages while they are\n   in use, the fixed allocation\
    \ properties of streams relative to\n   datagrams impose rather strict requirements\
    \ on the source of the\n   traffic using the stream.  Stream traffic arrivals\
    \ must match the\n   stream allocation both in interarrival time and message size\
    \ if\n   reasonable efficiency is to be achieved.  The characteristics and use\n\
    \   of datagrams and streams are described in detail in Sections 3 and 4\n   of\
    \ this document.\n   Both datagram and stream transmission in the network use\
    \ logical\n   addressing.  Each host on the network is assigned a permanent 16-bit\n\
    \   logical address which is independent of the physical port on the WPS\n   to\
    \ which it is attached.  These 16-bit logical addresses are present\n   in all\
    \ Host-to-WPS and WPS-to-Host data messages.\n   HAP supports multicast addressing\
    \ via \"groups\".  Multicast addressing\n   is provided primarily to support the\
    \ multi-destination delivery\n   required for conferencing applications.  Group\
    \ addresses are\n   dynamically created and deleted by the use of setup messages\n\
    \   exchanged between a host and the WPS.  Membership in a group may be\n   any\
    \ arbitrary subset of the network hosts.  A message addressed to a\n   group address\
    \ is delivered to all hosts that are members of that\n   group, except the sender.\
    \  Once a multicast address has been created,\n   any member host may use that\
    \ address, not just the creator.\n   Although HAP does not guarantee error-free\
    \ delivery, error control is\n   an important aspect of the protocol design. \
    \ HAP error control is\n   concerned with both local transfers between a host\
    \ and its local WPS\n   and transfers through the network to the destination(s).\
    \  The WPS\n   offers users a choice of network error protection options based\
    \ on\n   the network's ability to selectively send messages over its\n   transmission\
    \ media at different forward error correction (FEC) rates.\n   These FEC options\
    \ are referred to as reliability levels.  Four\n   reliability levels (low, medium-low,\
    \ medium-high, and high) are\n   available.  The precise error rate provided by\
    \ each reliability level\n   is not specified.\n   Various checksum and CRC mechanisms\
    \ are employed in the network to\n   provide an error detection capability.  A\
    \ host has an opportunity\n   when sending a message to indicate whether the message\
    \ should be\n   delivered to its destination or discarded if a data error is detected\n\
    \   by the network.  Each message received by a host from the network\n   will\
    \ have a flag indicating whether or not an error was detected in\n   that particular\
    \ message.  A host can decide on a per-message basis\n   whether or not it wants\
    \ to accept or discard transmissions containing\n   data errors.\n   For connection\
    \ of a host and WPS in close proximity, error rates due\n   to external noise\
    \ or hardware failures on the access circuit may\n   reasonably be expected to\
    \ be much smaller than the best network trunk\n   circuit error rates.  Thus for\
    \ this case, little is gained by using\n   error detection and retransmission\
    \ on the access circuit.  A 16-bit\n   header checksum is provided, however, to\
    \ ensure that WPSen do not act\n   on incorrect control information.  For relatively\
    \ long distances or\n   noisy connections, retransmissions over the access circuit\
    \ may be\n   required to optimize performance for both low and high reliability\n\
    \   traffic.  It is expected that link layer error control procedures\n   (such\
    \ as HDLC with retransmission) will be used for this purpose, but\n   use of a\
    \ reliable link layer protocol is not within the scope of this\n   document.\n\
    \   Each datagram message submitted to the WPS by a host is marked as\n   being\
    \ in one of three priority classes, from priority 2 (highest)\n   through priority\
    \ 0 (lowest).  The priority class is used by the WPS\n   for arbitrating contention\
    \ for scarce network resources (e.g., link\n   bandwidth).  That is, if the network\
    \ cannot deliver all of the\n   offered messages, high priority messages will\
    \ be delivered in\n   preference to low priority messages.  Priority level affects\
    \ the\n   order of access to intersite link bandwidth and the order of message\n\
    \   delivery at the destination WPS.\n   Each stream message also has three priority\
    \ classes, from priority 2\n   (highest) through priority 0 (lowest).  In addition,\
    \ streams\n   themselves have three precedence classes, from precedence 2 (highest)\n\
    \   through precedence 0.  A stream of higher precedence can preempt a\n   stream\
    \ of lower precedence at setup time.  Stream message priority\n   provides a mechanism\
    \ for a low-bandwidth host to receive a high-\n   bandwidth stream and selectively\
    \ discard messages marked as less\n   important by the sender.  Stream message\
    \ priority does not affect the\n   order of delivery of stream messages between\
    \ the source and the\n   destination.\n   Datagram and stream messages being presented\
    \ to the WPS by a host may\n   not be accepted for a number of reasons: priority\
    \ too low,\n   destination dead, lack of buffers in the source WPS, etc.  The\
    \ host\n   faces a similar situation with respect to handling messages from the\n\
    \   WPS.  To permit the receiver of a message to inform the sender of the\n  \
    \ local disposition of its message, an acceptance/refusal (A/R)\n   mechanism\
    \ is implemented.  The mechanism is the external\n   manifestation of the WPS's\
    \ (or host's) internal flow and congestion\n   control algorithm.  If A/Rs are\
    \ enabled, an explicit or implicit\n   acceptance or refusal for each message\
    \ is returned to the host by the\n   WPS (and conversely).  This allows the host\
    \ (or WPS) to retry refused\n   messages at its discretion and can provide information\
    \ useful for\n   optimizing the sending of subsequent messages when the reason\
    \ for\n   refusals is also provided.  The A/R mechanism can be disabled to\n \
    \  provide a \"pure discard\" interface.  The host's choice to use the A/R\n \
    \  mechanism or not does not limit its ability to send and receive\n   messages\
    \ to any other hosts.\n   While the A/R mechanism allows control of individual\
    \ message\n   transfers, it does not facilitate regulation of priority flows.\
    \  Such\n   regulation is handled by passing advisory status information (GOPRI)\n\
    \   across the Host-WPS interface indicating which priorities are\n   currently\
    \ being accepted.  As long as this information, relative to\n   the change in\
    \ priority status, is passed frequently, the sender can\n   avoid originating\
    \ messages which are sure to be refused.\n   HAP defines both data messages (datagram\
    \ messages and stream\n   messages) and link control messages.  Data messages\
    \ are used to send\n   information between hosts on the network.  Link control\
    \ messages are\n   exchanged between a host and the WPS to manage the local access\
    \ link.\n   Allocation of network resources, such as streams and groups, is\n\
    \   accomplished via an exchange of datagram messages, called Setups,\n   between\
    \ the user host and an agent inside the WPS called the \"Service\n   Agent.\"\
    \  Setups are used to reserve, allocate, modify, free, and\n   deallocate network\
    \ resources.  Each allocated resource has a unique\n   identifier which, when\
    \ placed in an appropriate field in a message\n   header, allows that message\
    \ to use the resource.  E.g., after an\n   exchange of Setups to create a group\
    \ address, a message may be sent\n   to the group by placing the group address\
    \ in the destination field of\n   that message.  The Service Agent also permits\
    \ a host to inquire about\n   resources it owns.\n   Every HAP message consists\
    \ of an integral number of 16-bit words\n   (i.e., an even number of octets).\
    \  The first several words of the\n   message always contain control information\
    \ and are referred to as the\n   message header.  The first word of the message\
    \ header identifies the\n   type of message which follows.  The second word of\
    \ the message header\n   is a checksum which covers all header information.  Any\
    \ message whose\n   received header checksum does not match the checksum computed\
    \ on the\n   received header information must be discarded.  The format of the\n\
    \   rest of the header depends on the specific message type.\n   The formats and\
    \ use of the individual message types are detailed in\n   the following sections.\
    \  A common format description is used for this\n   purpose.  Words in a message\
    \ are numbered starting at zero (i.e.,\n   zero is the first word of a message\
    \ header).  Bits within a word are\n   numbered from zero (most significant) to\
    \ fifteen (least significant).\n   The notation used to identify a particular\
    \ field location is:\n     <WORD#>{-<WORD#>}  [ <BIT#>{-<BIT#>} ]  <description>\n\
    \   where optional elements in {} are used to specify the (inclusive)\n   upper\
    \ limit of a range.  The reader should refer to these field\n   identifiers for\
    \ precise field size specifications.  Fields which are\n   common to several message\
    \ types are defined in the first section\n   which uses them.  Only the name of\
    \ the field will usually appear in\n   the descriptions in subsequent sections.\n\
    \   Link-level protocols used to support HAP can differ in the order in\n   which\
    \ they transmit the bits constituting HAP messages.  The words of\n   the message\
    \ are transmitted from word 0 to word N.\n"
- title: 3. Datagram Messages
  contents:
  - "3. Datagram Messages\n   Datagrams are one of the two message types provided\
    \ by HAP, as\n   described in the previous section.  Because network resources\
    \ are not\n   reserved in advance for datagram traffic, delivery of datagram\n\
    \   traffic is subject to greater delivery delays and delay variance than\n  \
    \ stream traffic, and is subject to flow and congestion controls.\n   Datagram\
    \ priority determines which packets are delivered or discarded\n   when network\
    \ resources do not permit handling all of the presented\n   traffic.  It is expected\
    \ that datagram messages will be used to\n   support the majority of computer-to-computer\
    \ and terminal-to-computer\n   traffic which is bursty in nature.\n   The format\
    \ of datagram messages and the purpose of each of the header\n   control fields\
    \ is described in Figure 1.\n                 0  1  2  3  4  5  6  7  8  9 10\
    \ 11 12 13 14 15\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     0         | 0|LB|GOPRI|    0   | F|     MESSAGE NUMBER    |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     1         |    \
    \            HEADER CHECKSUM                |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     2         |                      A/R                      |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     3         | 0|IL|\
    \ D| E| PRI | TTL | RLY |      RLEN       |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     4         |            DESTINATION HOST ADDRESS           |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     5         |    \
    \          SOURCE HOST ADDRESS              |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     6         |                  PROTOCOL ID                  |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n               |    \
    \                                           |\n     7-N       :              \
    \        DATA                     :\n               |                        \
    \                       |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \                             DATAGRAM MESSAGE\n                             \
    \    Figure 1\n     0[0]      Message Class.  This bit identifies the message\
    \ as a\n               data message or a control message.\n                  \
    \  0 = Data Message\n                    1 = Control Message\n     0[1]      Loopback\
    \ indicator.  This bit allows the sender of a\n               message to determine\
    \ if its own messages are being\n               looped back.  The host and the\
    \ WPS each use different\n               settings of this bit for their transmissions.\
    \  If a\n               message arrives with the loopback bit set equal to its\n\
    \               outgoing value, then the message has been looped.\n          \
    \          0 = Sent by Host\n                    1 = Sent by WPS\n     0[2-3]\
    \    Go-Priority.  In WPS-to-Host messages, this field\n               provides\
    \ advisory information concerning the lowest\n               priority currently\
    \ being accepted by the WPS.  The host\n               may optionally choose to\
    \ provide similar priority\n               information to the WPS.\n         \
    \           0 = Low Priority\n                    1 = Medium Priority\n      \
    \              2 = High Priority\n                    3 = (Reserved.)\n     0[4-6]\
    \    Reserved.  Must be zero.\n     0[7]      Reserved.  Must be zero.  Formerly\
    \ used for WPS\n               diagnostic purposes.\n     0[8-15]   Message Number.\
    \  This field contains the identification\n               of the message used\
    \ by the acceptance/refusal (A/R)\n               mechanism (when enabled).  If\
    \ the message number is\n               zero, A/R is disabled for this specific\
    \ message.  See\n               Section 5 for a detailed description of the A/R\n\
    \               mechanism.\n     1[0-15]   Header Checksum.  The checksum is the\
    \ 2's-complement of\n               the 2's-complement sum of words 0-6 (excluding\
    \ the\n               checksum word itself).\n     2[0-15]   Piggybacked A/R.\
    \  This field may contain an\n               acceptance/refusal word providing\
    \ A/R status on traffic\n               flowing in the opposite direction.  Its\
    \ inclusion may\n               eliminate the need for a separate A/R control\
    \ message\n               (see Section 5).  A value of zero for this word is used\n\
    \               to indicate that no piggybacked A/R information is\n         \
    \      present.\n     3[0]      Data Message Type.  This bit identifies whether\
    \ the\n               message is a datagram message or a stream message.\n   \
    \                 0 = Datagram Message\n                    1 = Stream Message\n\
    \     3[1]      IL flag.  Obsolete.  Must be zero.  (See Appendix B.)\n     3[2]\
    \      Discard Flag.  This flag allows a source host to\n               instruct\
    \ the network (including the destination host)\n               what to do with\
    \ the message when data errors are\n               detected (assuming the header\
    \ checksum is correct).\n                    0 = Discard message if data errors\
    \ detected.\n                    1 = Don't discard message if data errors detected.\n\
    \               The value of this flag, set by the source host, is\n         \
    \      passed on to the destination host.\n     3[3]      Data Error Flag.  This\
    \ flag is used in conjunction with\n               the Discard Flag to indicate\
    \ to the destination host\n               whether any data errors have been detected\
    \ in the\n               message prior to transmission over the destination's\n\
    \               WPS-to-Host access link.  It is used only if Discard\n       \
    \        Flag = 1.  It should be set to zero by the source host.\n           \
    \         0 = No Data Errors Detected\n                    1 = Data Errors Detected\n\
    \     3[4-5]    Priority.  The source host uses this field to specify\n      \
    \         the priority with which the message should be handled\n            \
    \   within the network.\n                    0 = Low Priority\n              \
    \      1 = Medium Priority\n                    2 = High Priority\n          \
    \          3 = (Reserved.)\n               The priority of each message is passed\
    \ to the\n               destination host by the destination WPS.\n     3[6-7]\
    \    Time-to-Live Designator.  The source host uses this\n               field\
    \ to specify the maximum time that a message should\n               be allowed\
    \ to exist within the network before being\n               deleted.  Elapsed time\
    \ begins when the message has been\n               received by the WPS from the\
    \ source host (or is sent by\n               a WPS agent) and is last checked\
    \ when the message is\n               queued for transmission out the I/O interface\
    \ to the\n               destination host.  If a message is multicast, each copy\n\
    \               is treated separately.\n                    0 = 1 seconds\n  \
    \                  1 = 2 seconds\n                    2 = 5 seconds\n        \
    \            3 = 10 seconds\n     3[8-9]    Reliability.  The source host uses\
    \ this field to\n               specify the basic bit error rate requirement for\
    \ the\n               data portion of this message.  The source WPS uses this\n\
    \               field to determine the trunk circuit transmission\n          \
    \     parameters and forward error correction level required\n               to\
    \ provide that bit error rate.\n                    0 = Low Reliability\n    \
    \                1 = Medium-Low Reliability\n                    2 = Medium-High\
    \ Reliability\n                    3 = High Reliability\n     3[10-15]  Reliability\
    \ Length.  The source host uses this field to\n               specify a portion\
    \ of the user data which should be\n               transmitted at the highest\
    \ reliability level (lowest\n               bit error rate).  Both the HAP message\
    \ header words and\n               the first 2*<Reliability Length> octets of\
    \ user data\n               will be transmitted at high reliability while the\n\
    \               remainder of the user data will be transmitted at\n          \
    \     whatever reliability level is specified in field 3[8-\n               9].\
    \  The reliability length mechanism gives the user\n               the ability\
    \ to transmit private header information\n               (e.g., IP and TCP headers)\
    \ at a higher reliability\n               level than the remainder of the data.\n\
    \     4[0-15]   Destination Host Address.  This field contains the\n         \
    \      network logical address of the destination host.\n     5[0-15]   Source\
    \ Host Address.  This field contains the network\n               logical address\
    \ of the source host.\n     6[0-15]   Protocol ID.  This field specifies the next\
    \ higher\n               level protocol.  Protocol identifiers are assigned\n\
    \               administratively, except 0 which is reserved, and are\n      \
    \         not part of this specification.  See reference [10].\n     7-N     \
    \  Data.  This field contains up to 16,384 bits (2048\n               octets)\
    \ of user data, and must be an even number of\n               octets.\n"
- title: 4. Stream Messages
  contents:
  - "4. Stream Messages\n   Stream messages are the second message type provided by\
    \ HAP, as\n   described in Section 2.  Streams provide guaranteed bandwidth between\n\
    \   the source and destination(s), and provide the minimum delivery delay\n  \
    \ and delay variance available in the network.  Streams are suitable\n   for volatile\
    \ traffic, such as speech, and for support of high duty\n   cycle applications\
    \ that require throughput guarantees.\n   Streams must be created before stream\
    \ messages can flow from host to\n   host.  The protocol to accomplish stream\
    \ creation is described in\n   Section 6.1.  Once established, a stream is allocated\
    \ specific\n   network resources, such as bandwidth.  Within the bounds of its\n\
    \   stream allocation, a host is permitted considerable flexibility in\n   how\
    \ it may use the stream.  Although the time to live, reliability,\n   and reliability\
    \ length of each stream message is fixed at stream\n   setup time, the destination\
    \ logical address can vary from stream\n   message to stream message.\n   A host\
    \ can, therefore, multiplex a variety of logical flows onto a\n   single stream,\
    \ as long as the stream was set up to reach all the\n   destination hosts.  The\
    \ format of stream messages is described in\n   Figure 2.\n                 0\
    \  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     0         | 0|LB|GOPRI|     0     |     MESSAGE NUMBER    |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     1         |    \
    \           HEADER CHECKSUM                 |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     2         |                      A/R                      |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     3         | 1|IL|\
    \ D| E| PRI |       HOST STREAM ID        |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     4         |            DESTINATION HOST ADDRESS           |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     5         |    \
    \          SOURCE HOST ADDRESS              |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     6         |                  PROTOCOL ID                  |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n               |    \
    \                                           |\n     7-N       :              \
    \        DATA                     :\n               |                        \
    \                       |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \                              STREAM MESSAGE\n                              \
    \   Figure 2\n     0[0]      Message Class = 0 (Data Message).\n     0[1]    \
    \  Loopback indicator.\n     0[2-3]    Go-Priority.\n     0[4-7]    Reserved.\n\
    \     0[8-15]   Message Number.  This field serves the same purpose as\n     \
    \          the message number field in the datagram message.\n               Moreover,\
    \ a single message number sequence is used for\n               both datagram and\
    \ stream messages (see Section 5).\n     1[0-15]   Header Checksum.  (See datagram\
    \ checksum for\n               description.)\n     2[0-15]   Piggybacked A/R.\n\
    \     3[0]      Data Message Type = 1 (Stream).\n     3[1]      IL flag.  Obsolete.\
    \  Must be zero.\n     3[2]      Discard Flag.\n     3[3]      Data Error Flag.\n\
    \     3[4-5]    Stream message priority.  Note that all stream messages\n    \
    \           have priority over any datagram message.  Priority will\n        \
    \       not affect the order of stream message delivery.\n                   \
    \ 0 = Low priority\n                    1 = Medium priority\n                \
    \    2 = High priority\n                    3 = Reserved\n     3[6-15]   Stream\
    \ ID.  The WPS uses this field to identify the\n               preallocated network\
    \ resources (bandwidth allocations,\n               queues, buffers, etc.) to\
    \ use for delivery of the\n               message.  Streams and their identifying\
    \ numbers (stream\n               IDs) are established by an explicit Create Stream\n\
    \               request (see Section 6.1).\n     4[0-15]   Destination Host Address.\n\
    \     5[0-15]   Source Host Address.\n     6[0-15]   Protocol ID.\n     7-N  \
    \     Data.  This field contains up to 16,384 bits (2048\n               octets)\
    \ of user data, and must be an even number of\n               octets.\n"
- title: 5. Flow Control Messages
  contents:
  - "5. Flow Control Messages\n   The WPS supports an acceptance/refusal (A/R) mechanism\
    \ in each\n   direction on the host access link.  The A/R mechanism is enabled\
    \ for\n   the link by the host by setting a bit in the Restart Complete control\n\
    \   message (see Section 8).  Each datagram and stream message contains\n   an\
    \ 8-bit message number used to identify the message for flow control\n   purposes.\
    \  When the A/R mechanism is enabled, the message number is\n   incremented modulo\
    \ 256 in successive messages, skipping over message\n   number zero (zero indicates\
    \ that A/R's are disabled for that\n   message).  Up to 127 messages may be outstanding\
    \ (awaiting acceptance\n   or refusal) in each direction.  If the receiver of\
    \ a message is\n   unable to accept the message, a refusal indication containing\
    \ the\n   message number of the refused message and the reason for the refusal\n\
    \   is returned.  The refusal indication may be piggybacked on data\n   messages\
    \ in the opposite direction over the link or may be sent in a\n   separate control\
    \ message in the absence of reverse data traffic.\n   Acceptance indications are\
    \ returned in a similar manner, either\n   piggybacked on data messages or in\
    \ a separate control message.  An\n   acceptance is returned by the receiver to\
    \ indicate that the\n   identified message was received from the host access link\
    \ and was not\n   refused.  Acceptance indications returned by the WPS are not\
    \ an end-\n   to-end acknowledgement and do not imply any guarantee of delivery\
    \ to\n   the destination host(s), or even any assurance that the message will\n\
    \   not be intentionally discarded by the network.  They are sent\n   primarily\
    \ to facilitate buffer management in the host.\n   To reduce the number of A/R\
    \ messages exchanged, a single A/R\n   indication can be returned for multiple\
    \ (lower numbered) previously\n   unacknowledged messages.  Explicit acceptance\
    \ of message number N\n   implies implicit acceptance of outstanding messages\
    \ with numbers N-1,\n   N-2, etc., according to the definition of acceptance outlined\
    \ above.\n   Analogous interpretation of the refusal message number allows the\n\
    \   receiver of a group of messages to reject them as a group when they\n   all\
    \ are being refused for the same reason.  As a further efficiency\n   measure,\
    \ HAP permits aggregation of any mix of A/R indications into a\n   single A/R\
    \ control message.  Such a message might be used, for\n   example, to reject a\
    \ group of messages where the refusal code on each\n   is different.\n   In some\
    \ circumstances the overhead associated with processing A/R\n   messages may prove\
    \ unattractive.  For these cases, it is possible to\n   disable the A/R mechanism\
    \ and operate the HAP interface in a purely\n   discard mode.  The ability to\
    \ effect this on a link basis has already\n   been noted (see Sections 2 and 8).\
    \  In addition, messages with\n   sequence number zero are taken as messages for\
    \ which the A/R\n   mechanism is selectively disabled.  To permit critical feedback,\
    \ even\n   when operating in discard mode, HAP defines an \"Unnumbered Response\"\
    \n   control message.  Flow control information, and other information\n   which\
    \ cannot be sent as an A/R indication, is sent in an Unnumbered\n   Response control\
    \ message.  The format of this type of message is\n   illustrated in Figure 5.\n\
    \   The format shown in Figure 3 is used both for A/R indications that\n   are\
    \ piggybacked on data messages (word 2), and for aggregated A/R\n   information\
    \ in A/R control messages.  The format of A/R control\n   messages is shown in\
    \ Figure 4.\n                 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n\
    \               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n          \
    \     |AR|    REFUSAL CODE    |  A/R MESSAGE NUMBER   |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \                          ACCEPTANCE/REFUSAL WORD\n                         \
    \        Figure 3\n     [0]       Acceptance/Refusal Type.  This field identifies\
    \ whether\n               A/R information is an acceptance or a refusal.\n   \
    \                 0 = Acceptance\n                    1 = Refusal\n     [1-7]\
    \     Refusal Code.  When the Acceptance/Refusal Type = 1,\n               this\
    \ field gives the Refusal Code.\n                    0 = Priority not being accepted\n\
    \                    1 = Source WPS congestion\n                    2 = Destination\
    \ WPS congestion\n                    3 = Destination host dead\n            \
    \        4 = Destination WPS dead\n                    5 = Illegal destination\
    \ host address\n                    6 = Destination host access not allowed\n\
    \                    7 = Illegal source host address\n                    8 =\
    \ Message lost in access link\n                    9 = Invalid stream ID\n   \
    \                10 = Illegal source host for stream ID\n                   11\
    \ = Message length too long\n                   12 = Stream message too early\n\
    \                   13 = Illegal control message type\n                   14 =\
    \ Illegal refusal code in A/R\n                   15 = Can't implement loop\n\
    \                   16 = Destination host congestion\n                   17 =\
    \ Delivery refused\n                   18 = Odd byte length packet (not allowed)\n\
    \                   19 = Invalid stream time-to-live value\n                 \
    \  20 = \"Reliability length\" exceeds message length\n     [8-15]    A/R Message\
    \ Number.  This field contains the number of\n               the message to which\
    \ this acceptance/refusal refers.\n               It also applies to all outstanding\
    \ messages with\n               earlier numbers.  Note that this field can never\
    \ be\n               zero since a message number of zero implies that the\n  \
    \             A/R mechanism is disabled.\n                 0  1  2  3  4  5  6\
    \  7  8  9 10 11 12 13 14 15\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     0         | 1|LB|GOPRI|     0     |  LENGTH   |     1     |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     1         |    \
    \            HEADER CHECKSUM                |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \               |                                               |\n     2-N  \
    \     :                     A/R's                     :\n               |    \
    \                                           |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \                        ACCEPTANCE/REFUSAL MESSAGE\n                        \
    \         Figure 4\n     0[0]      Message Class = 1 (Control Message).\n    \
    \ 0[1]      Loopback indicator.\n     0[2-3]    Go-Priority.\n     0[4-7]    Reserved.\n\
    \     0[8-11]   Message Length.  This field contains the total length\n      \
    \         of this message in words (N+1).\n     0[12-15]  Control Message Type\
    \ = 1 (Acceptance/Refusal).\n     1[0-15]   Header Checksum.  The checksum is\
    \ the 2's-complement of\n               the 2's-complement sum of words 0-N (excluding\
    \ the\n               checksum word itself).\n     2[0-15]   Acceptance/Refusal\
    \ Word.\n     3-N       Additional Acceptance/Refusal Words (optional).\n    \
    \             0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     0         | 1|LB|GOPRI|     0     | RES-CODE  |     5     |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     1         |    \
    \            HEADER CHECKSUM                |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     2         |                 RESPONSE INFO                 |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     3         |    \
    \             RESPONSE INFO                 |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \                            UNNUMBERED RESPONSE\n                           \
    \      Figure 5\n     0[0]      Message Class = 1 (Control Message).\n     0[1]\
    \      Loopback indicator.\n     0[2-3]    Go-Priority.\n     0[4-7]    Reserved.\n\
    \     0[8-11]   Response Code.\n                    3 = Destination unreachable\n\
    \                    5 = Illegal destination host address\n                  \
    \  7 = Illegal source host address\n                    9 = Nonexistent stream\
    \ ID\n                   10 = Illegal stream ID\n                   13 = Protocol\
    \ violation\n                   15 = Can't implement loop\n     0[12-15]  Control\
    \ Message Type = 5 (Unnumbered Response).\n     1[0-15]   Header Checksum.  The\
    \ checksum is the 2's-complement of\n               the 2's-complement sum of\
    \ words 0-3 (excluding the\n               checksum word itself).\n     2[0-15]\
    \   Response Information. If Response Code is:\n                    3: Destination\
    \ Host Address\n                    5: Destination Host Address\n            \
    \        7: Source Host Address\n                    9: Stream ID (right justified)\n\
    \                   10: Stream ID (right justified)\n                   13: Word\
    \ 0 of offending message\n                   15: Word 0 of Loopback Request message\n\
    \     3[0-15]   Response Information. If Response Code is:\n                 \
    \   3,5,7, or 9: Undefined\n                    10: Source Host Address\n    \
    \                13: Word 3 of offending message, or 0 if no word 3\n        \
    \            15: Word 2 of Loopback Request message\n"
- title: 6. The Service Agent
  contents:
  - "6. The Service Agent\n   Allocation of network resources, such as streams and\
    \ groups, is\n   accomplished via an exchange of datagram messages, called Setup\n\
    \   messages, between the user host and the Service Agent (network\n   address\
    \ zero).  Setup operations include reserving, allocating,\n   modifying, freeing,\
    \ and deallocating resources.  The Service Agent\n   causes the requested action\
    \ to be carried out and serves as the\n   intermediary between the user and the\
    \ rest of the network.  In the\n   process of implementing the requested action,\
    \ various network data\n   bases are updated to reflect the current state of the\
    \ referenced\n   resource.  The Service Agent also permits a host to inquire about\n\
    \   resources it owns using Information Request and Information Reply\n   messages.\n\
    \   A setup interaction initiated by a host involves a 3-way exchange\n   where:\
    \ (1) the requesting host sends a Setup Request to the Service\n   Agent, (2)\
    \ the Service Agent returns a Setup Reply to the requesting\n   host, and (3)\
    \ the requesting host returns a Setup Acknowledgment to\n   the Service Agent.\
    \  This procedure is used to ensure reliable\n   transmission of Setup Requests\
    \ and Replies.  In order to allow more\n   than one Setup Request message from\
    \ a host to be outstanding, each\n   Request is assigned a unique Request ID.\
    \  The associated Reply and\n   subsequent Acknowledgment are identified by the\
    \ Request ID that they\n   contain.  The requesting host should receive a reply\
    \ to a setup\n   request within 3 seconds.  The actual delay will depend on the\
    \ nature\n   of the request and the topology of the network.  For simple networks,\n\
    \   the delay will often be less than one second.  The requesting host\n   should\
    \ respond to a Reply with a Setup Acknowledgment within one\n   second.\n   Setup\
    \ exchanges initiated by the Service Agent involve a two-way\n   exchange where:\
    \ (1) the Service Agent sends a Notification to\n   affected hosts, and (2) the\
    \ hosts return a Setup Acknowledgment to\n   the Service Agent.  Notifications\
    \ are used to inform a host of\n   changes in the status of a network resource.\
    \  In order to allow more\n   than one Notification to be outstanding, each is\
    \ assigned a unique\n   Notification ID.  The Setup Acknowledgment returned by\
    \ the notified\n   host to the Service Agent must contain the Notification ID.\
    \  The host\n   should respond within one second.\n   An information query is\
    \ initiated by a host and involves a two-way\n   exchange where: (1) the host\
    \ sends an Information Request message to\n   the Service Agent, and (2) the Service\
    \ Agent sends back an\n   Information Reply.  There is no acknowledgment mechanism,\
    \ since this\n   request does not change any resource allocation.  Furthermore,\
    \ if\n   there is an error in the request, only one response will be sent by\n\
    \   the WPS, and the WPS will make no effort to check for or retransmit\n   lost\
    \ responses.  It is the responsibility of the host to wait a\n   certain amount\
    \ of time and then determine that an unanswered\n   information request has been\
    \ lost and to resend it.  (The time\n   necessary to answer such a request is\
    \ usually much less than one\n   second.)  The WPS will return the message ID\
    \ of the information\n   request in the information reply message.\n         \
    \ The general format of all Service Agent messages is:\n                     \
    \    <DATAGRAM MESSAGE HEADER>\n                          <SERVICE AGENT HEADER>\n\
    \                              <MESSAGE BODY>\n   The Protocol ID field in the\
    \ datagram message header must be\n   HAP_PROTO_SETUP (1) (see Appendix C) for\
    \ messages sent to the Service\n   Agent and will be HAP_PROTO_SETUP in messages\
    \ received from the\n   Service Agent.  The Service Agent does not recognize or\
    \ support use\n   of other higher level protocols (e.g., IP), in setup messages,\
    \ and\n   will discard messages containing such headers.\n   Illustrations of\
    \ message formats below show only the Service Agent\n   Header header and message\
    \ body and do not include the datagram\n   message header.  As a reminder that\
    \ the datagram header is not\n   included, word offsets are prefixed with an \"\
    S\".\n   The format of the Service Agent Header is illustrated in Figure 6.\n\
    \   The body of the message will depend on the particular message type.\n   Stream\
    \ Request and Reply messages are described in Section 6.1.\n   Group Request and\
    \ Reply messages are described in Section 6.2.  The\n   format of Notifications\
    \ is described in Section 6.3, and Setup\n   Acknowledgments are described in\
    \ Section 6.4.  Information Request\n   and Reply messages are described in Section\
    \ 6.5.\n                 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n    \
    \           +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S0       \
    \ |     MESSAGE TYPE      |          CODE         |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S1        |                    CHECKSUM                   |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S2        |    \
    \               MESSAGE ID                  |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \                           SERVICE AGENT HEADER\n                           \
    \      Figure 6\n     S0[0-7]   Message Type.  This field determines the type\
    \ of\n               message.\n                    0 = Setup Acknowledgment\n\
    \                    1 = Setup Request\n                    2 = Setup Reply\n\
    \                    3 = Notification\n                    4 = Information Request\n\
    \                    5 = Information Reply\n     S0[8-15]  Code.  For Setup Requests,\
    \ this field identifies the\n               request type.\n                  \
    \  1 = Create group (multicast) address\n                    2 = Delete group\
    \ address\n                    3 = Join group\n                    4 = Leave group\n\
    \                    5 = Create stream\n                    6 = Delete stream\n\
    \                    7 = Change stream\n                    8 = Create shared\
    \ stream\n                    9 = Delete all streams owned by this host\n    \
    \               10 = Add member to group\n                   11 = Remove member\
    \ from group\n               For Setup Replies, this field provides the Reply\
    \ Code.\n               Some of the Reply Codes can be returned to any setup\n\
    \               request and others are request specific.\n                   \
    \ 0 = Group or stream created\n                    1 = Group or stream deleted\n\
    \                    2 = Host added to group\n                    3 = Host deleted\
    \ from group\n                    4 = Stream changed\n                    5 =\
    \ (Reserved)\n                    6 = Request type invalid or unsupported\n  \
    \                  7 = (Reserved)\n                    8 = Network trouble\n \
    \                   9 = Bad group key\n                   10 = Group address/stream\
    \ ID nonexistent\n                   11 = Not member of group/not creator of stream\n\
    \                   12 = Stream precedence not being accepted\n              \
    \     13 = (Reserved)\n                   14 = (Reserved)\n                  \
    \ 15 = (Reserved)\n                   16 = Unable to add all the new hosts\n \
    \                  17 = Insufficient network resources\n                   18\
    \ = Requested bandwidth too large\n                   19 = (Reserved)\n      \
    \             20 = (Reserved)\n                   21 = Maximum messages per interval\
    \ too small\n                   22 = Reply lost in network\n                 \
    \  23 = Illegal priority or precedence value\n                   24 = Invalid\
    \ address provided\n               For Notifications, this field contains the\
    \ Notification\n               Type.  (See Section 6.3.)\n               For Setup\
    \ Acknowledgments, this field contains the\n               Acknowledgment Type.\
    \  (See Section 6.4.)\n               For Information Requests, this field contains\
    \ the\n               request type.  (See Section 6.5.)\n               For Information\
    \ Replies, this field contains the reply\n               type.  (See Section 6.5.)\n\
    \     S1[0-15]  Checksum.  The checksum is the 2's-complement of the\n       \
    \        2's-complement sum of the words in the Service Agent\n              \
    \ Header (excluding the checksum word itself) and the\n               message\
    \ body.  Messages received with bad checksums\n               must be discarded.\n\
    \     S2[0-15]  Message ID.  This field is assigned by the host to\n         \
    \      uniquely identify outstanding requests (Request ID) and\n             \
    \  by the Service Agent to uniquely identify outstanding\n               notifications\
    \ (Notification ID).\n"
- title: 6.1. Stream Setup Messages
  contents:
  - "6.1. Stream Setup Messages\n   Streams provide a means of reserving network resources\
    \ for the\n   delivery of traffic at a specified maximum throughput to a specified\n\
    \   list of recipients.  Traffic sent via a stream has priority over all\n   non-stream\
    \ traffic, and is delivered with the minimum end-to-end\n   delay possible.  Hosts\
    \ use streams to support applications that have\n   predictable traffic loads\
    \ (such as packet voice or video or other\n   continuous media traffic) or that\
    \ require minimum transmission delay\n   and lowest delay variance.  Streams are\
    \ typically used for traffic\n   flows of moderate to long duration, where the\
    \ cost of performing a\n   stream Setup is acceptable.\n   Streams must be set\
    \ up before stream data messages can flow.  The\n   stream setup messages, each\
    \ of which has a Request and a Reply, are\n   Create Stream, Delete Stream, Change\
    \ Stream, and Delete All Streams.\n   (Create Shared Stream Request is a planned\
    \ future addition to the\n   protocol.)  The use of these messages is illustrated\
    \ in the scenario\n   of exchanges between a host and the Service Agent shown\
    \ in Figure 7\n   where the host establishes a stream, sends some data, modifies\
    \ the\n   stream characteristics, sends some more data, and finally closes down\n\
    \   the stream.  Not illustrated, but implicit in this scenario, are the\n   optional\
    \ A/R indications associated with each of the stream Setup\n   messages.\n   \
    \                                           Service     Other\n              \
    \                       Host      Agent      hosts\n          Create Stream Request\
    \        ---------->\n          Create Stream Reply          <----------\n   \
    \       Reply Acknowledgment         ---------->\n          Stream Messages  \
    \            --------------------->\n             :   :\n          Change Stream\
    \ Request        ---------->\n          Change Stream Reply          <----------\n\
    \          Reply Acknowledgment         ---------->\n          Stream Messages\
    \              --------------------->\n             :   :\n          Delete Stream\
    \ Request        ---------->\n          Delete Stream Reply          <----------\n\
    \          Reply Acknowledgment         ---------->\n                        \
    \      STREAM EXAMPLE\n                                 Figure 7\n   Streams have\
    \ eight characteristic properties which are selected at\n   stream setup time.\
    \  These properties are: (1) data words per time\n   interval, (2) time interval,\
    \ (3) reliability, (4) reliability length,\n   (5) precedence, (6) maximum messages\
    \ per interval, (7) the list of\n   recipients, and (8) the set of other streams\
    \ with which this stream\n   shares resources.  To establish a stream, the host\
    \ sends the Create\n   Stream Request message (Figure 8) to the Service Agent.\
    \  After the\n   network has processed the Create Stream Request, the Service\
    \ Agent\n   will reply with a Create Stream Reply message (Figure 9).  If the\n\
    \   reply code in the Create Stream Reply indicates that the stream has\n   been\
    \ created successfully, the host may proceed to transmit stream\n   data messages\
    \ after sending a Reply Acknowledgment.\n   During the lifetime of a stream, the\
    \ host which created it may decide\n   that some of its characteristic properties\
    \ should be modified.  All\n   but one of the properties can be modified using\
    \ the Change Stream\n   Request message (Figure 10).  The one property that cannot\
    \ be changed\n   is whether or not the stream is willing to share its resources\
    \ with\n   other streams.  After the network has processed the Change Stream\n\
    \   Request, the Service Agent will respond by sending a Change Stream\n   Reply\
    \ (Figure 11) to the host.  A host requesting a reduced channel\n   allocation\
    \ should decrease its sending rate immediately without\n   waiting for receipt\
    \ of the Change Stream Reply.  A host requesting an\n   increased allocation should\
    \ not proceed to transmit according to the\n   new set of parameters without first\
    \ having received a Reply Code\n   indicating that the requested change has taken\
    \ effect.\n   When the host no longer needs the stream it created, it should first\n\
    \   stop sending traffic via the stream and then send the Service Agent a\n  \
    \ Delete Stream Request message (Figure 12).  After the network has\n   processed\
    \ the Delete Stream Request, the Service Agent will respond\n   by sending a Delete\
    \ Stream Reply (Figure 13) to the host.\n   If the host has crashed or restarted,\
    \ it may no longer know what\n   streams it owns.  The host may use an Information\
    \ Request (see\n   Section 6.5) to determine what streams it owns, or the host\
    \ may use a\n   Delete All Streams Request (Figure 14) to discard whatever stream\n\
    \   resources it may own.  The format for the Delete All Streams Reply is\n  \
    \ shown in Figure 15.\n   Note that streams, like all other resources allocated\
    \ by the Service\n   Agent, may be reclaimed by the network if unused.  Currently,\
    \ if no\n   traffic is sent to a stream in a 6 minute interval, and if the owner\n\
    \   of the steam is down or unreachable, the stream may be deleted.\n        \
    \         0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S0        |           1           |           5           |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S1        |    \
    \             SETUP CHECKSUM                |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S2        |                  REQUEST ID                   |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S3        |  MAX\
    \ MES  | PRE | INT | RLY |      RLEN       |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S4        |            DATA WORDS PER INTERVAL            |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S5        |    \
    \             INTERVAL                      |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S6        |           0           |  ADDRESS LIST LENGTH  |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n               |    \
    \                                           |\n     S7-SN     :            DESTINATION\
    \ ADDRESS LIST           :\n               |                                 \
    \              |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \                           CREATE STREAM REQUEST\n                          \
    \       Figure 8\n     S0[0-7]   Setup Type = 1 (Request).\n     S0[8-15]  Request\
    \ Type = 5 (Create Stream).\n     S1[0-15]  Setup Checksum.  (See setup header\
    \ description.)\n     S2[0-15]  Request ID.\n     S3[0-3]   Maximum Messages Per\
    \ Interval (1-15).  This field\n               specifies the maximum number of\
    \ stream messages the\n               host will deliver to the WPS in any single\
    \ stream\n               interval.\n     S3[4-5]   Precedence.  This field specifies\
    \ the precedence of the\n               stream.  When there are insufficient network\
    \ resources\n               to support all the requested streams, requests for\n\
    \               higher precedence streams will preempt existing lower\n      \
    \         precedence streams, and requests for streams with\n               insufficient\
    \ precedence will be rejected.  Medium\n               precedence is recommended\
    \ as the default choice.\n                    0 = Low Precedence\n           \
    \         1 = Medium Precedence\n                    2 = High Precedence\n   \
    \  S3[6-7]   Interval.  This field specifies the interval, in\n              \
    \ multiples of 21.22 milliseconds.  (For backward\n               compatibility\
    \ only.  New applications should use 3.\n               Use of this field to specify\
    \ an interval is being\n               phased out.)\n                    0 = \
    \ 21.22 milliseconds\n                    1 =  42.44 milliseconds\n          \
    \          2 =  84.88 milliseconds\n                    3 =  use interval in word\
    \ S5\n     S3[8-9]   Reliability.  This field specifies the basic bit-error\n\
    \               rate requirement for the data portion of all messages\n      \
    \         in the stream.  The exact error rate obtained by each\n            \
    \   choice is not specified.\n                    0 = Low Reliability\n      \
    \              1 = Medium-Low Reliability\n                    2 = Medium-High\
    \ Reliability\n                    3 = High Reliability\n     S3[10-15] Reliability\
    \ Length.  This field specifies how many\n               words beyond the stream\
    \ message header should be\n               transmitted at maximum reliability\
    \ for all messages in\n               the host stream.\n     S4[0-15]  Data words\
    \ per interval.  This field specifies the\n               maximum number of 16-bit\
    \ words of this stream's data\n               the network will need to carry during\
    \ each interval,\n               not counting HAP stream message header words.\
    \  The\n               stream data may be carried in however many messages (up\n\
    \               to MAX MES) in each interval the host chooses.\n     S5[0-15]\
    \  Interval (125 microsecond units).  This field specifies\n               the\
    \ time interval over which the <data words per\n               interval> data\
    \ in <max mes> messages will be sent.  For\n               backward compatibility,\
    \ an interval of 0 selects an\n               interval of 169.76 milliseconds.\
    \  This field is ignored\n               unless the INT field is 3.\n     S6[0-7]\
    \   Reserved.  Must be zero.\n     S6[8-15]  Destination address list length.\
    \  This field specifies\n               the number of entries in the Destination\
    \ Address List\n               field.  Allowed values are 1-8.\n     S7-SN   \
    \  Destination address list.  This list must specify, at\n               least\
    \ indirectly, all the intended recipients of this\n               stream's traffic.\
    \  At least one destination address\n               must be supplied.  Any valid\
    \ network address,\n               specifically including group addresses, may\
    \ be used\n               (except the Service Agent's address, 0).  Messages sent\n\
    \               in the stream are not limited to using the HAP\n             \
    \  addresses listed.  E.g., if the list consists of only\n               group\
    \ address G, and host A is a member of G, a stream\n               message may\
    \ be sent to A, which was not in the list.\n   Caution: Group membership is only\
    \ evaluated at setup time.  Changes\n   in group membership do not cause the stream\
    \ to be modified.\n   Caution: Stream creation involves allocation of specific\
    \ network\n   resources along specific routes for delivery of that traffic.  A\n\
    \   stream message sent to hosts other than those specified via Setup\n   will\
    \ probably be undeliverable.  A stream message to a group address\n   that has\
    \ gained new members since the stream's last Setup may be\n   undeliverable to\
    \ the new members.\n                 0  1  2  3  4  5  6  7  8  9 10 11 12 13\
    \ 14 15\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  \
    \   S0        |           2           |      REPLY CODE       |\n            \
    \   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S1        |      \
    \           SETUP CHECKSUM                |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S2        |                  REQUEST ID                   |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S3        |    \
    \    0        |         STREAM ID           |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S4        |        0        |     ADDRESS LIST LENGTH     |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n               |    \
    \                                           |\n     S5-SN     :              \
    \   ADDRESS LIST                  :\n               |                        \
    \                       |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \                            CREATE STREAM REPLY\n                           \
    \      Figure 9\n     S0[0-7]   Setup Type = 2 (Reply).\n     S0[8-15]  Reply\
    \ Code.  Any reply other than \"Stream created\"\n               means the stream\
    \ was not created.\n                    0 = Stream created\n                 \
    \   8 = Network trouble\n                   12 = Stream precedence not being accepted\n\
    \                   17 = Insufficient network resources\n                   18\
    \ = Requested bandwidth too large\n                   21 = Max. messages per interval\
    \ too small\n                   22 = Reply lost in network\n                 \
    \  23 = Illegal precedence value\n                   24 = Invalid destination\
    \ address in list\n     S1[0-15]  Setup Checksum.  (See setup header description.)\n\
    \     S2[0-15]  Request ID.\n     S3[0-5]   Reserved.  Must be zero.\n     S3[6-15]\
    \  Stream ID.  This field contains a stream ID assigned by\n               the\
    \ network.  It must be included in all stream data\n               messages sent\
    \ by the host to allow the WPS to associate\n               the message with stored\
    \ stream characteristics and the\n               resources reserved for that stream's\
    \ traffic.\n     S4[0-5]   Reserved.  Must be zero.\n     S4[6-15]  Address list\
    \ length.  The number of entries in the\n               Address List field.\n\
    \     S5-SN     Address list.  This contains the destination addresses\n     \
    \          from the Create Stream Request that were invalid or\n             \
    \  unreachable.  Unreachable destinations are listed as a\n               group\
    \ if every member of the group was unreachable, or\n               individually\
    \ otherwise; i.e., group addresses are\n               expanded and the unreachable\
    \ members are included in\n               the list.  The list of unreachable destinations\
    \ will be\n               truncated, if needed, to limit this Reply to a single,\n\
    \               maximum length HAP message.\n                 0  1  2  3  4  5\
    \  6  7  8  9 10 11 12 13 14 15\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S0        |           1           |           7           |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S1        |    \
    \             SETUP CHECKSUM                |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S2        |                  REQUEST ID                   |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S3        |    \
    \    0        |         STREAM ID           |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S4        |  MAX MES  | PRE | INT | RLY |      RLEN       |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S5        |    \
    \        DATA WORDS PER INTERVAL            |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S6        |                   INTERVAL                    |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S7        |    \
    \       0           |  ADDRESS LIST LENGTH  |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \               |                                               |\n     S8-SN\
    \     :            DESTINATION ADDRESS LIST           :\n               |    \
    \                                           |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \                           CHANGE STREAM REQUEST\n                          \
    \       Figure 10\n     S0[0-7]   Setup Type = 1 (Request).\n     S0[8-15]  Request\
    \ Type = 7 (Change Stream).\n     S1[0-15]  Setup Checksum.  (See setup header\
    \ description.)\n     S2[0-15]  Request ID.\n     S3[0-5]   Reserved.  Must be\
    \ zero.\n     S3[6-15]  Stream ID.\n     S4[0-3]   New Maximum Messages Per Interval.\n\
    \     S4[4-5]   New Precedence.\n     S4[6-7]   New Interval selection.\n    \
    \ S4[8-9]   New Reliability.\n     S4[10-15] New Reliability Length.\n     S5[0-15]\
    \  New Data Words Per Interval.\n     S6[0-15]  New Interval (ignored unless INT\
    \ = 3).\n     S7[0-7]   Reserved.  Must be zero.\n     S7[8-15]  Destination Address\
    \ List length.  This field specifies\n               the number of entries in\
    \ the new Destination Address\n               List.  Allowed values are 0-8. \
    \ Use zero (indicating no\n               addresses in the list) to avoid changing\
    \ the list of\n               recipient hosts.\n     S8-SN     New Destination\
    \ Address List.  The new, complete, list\n               of recipient hosts. \
    \ Membership of group addresses is\n               evaluated at setup execution\
    \ time.  Subsequent changes\n               in group membership do not cause the\
    \ stream to be\n               modified.  Note that using the same destination\
    \ address\n               list in the Change Stream Request as was used in the\n\
    \               Create Stream Request can result in a change in the\n        \
    \       list of recipient hosts if membership in a group has\n               changed.\n\
    \                 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n           \
    \    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S0        |     \
    \      2           |      REPLY CODE       |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S1        |                 SETUP CHECKSUM                |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S2        |    \
    \              REQUEST ID                   |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S3        |        0        |     ADDRESS LIST LENGTH     |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n               |    \
    \                                           |\n     S4-SN     :              \
    \   ADDRESS LIST                  :\n               |                        \
    \                       |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \                            CHANGE STREAM REPLY\n                           \
    \      Figure 11\n     S0[0-7]   Setup Type = 2 (Reply).\n     S0[8-15]  Reply\
    \ Code.  The number in parentheses indicates the\n               processing phase\
    \ at the time of the error (see Caution\n               below).  Phase zero and\
    \ phase one errors leave the\n               stream unchanged; errors from later\
    \ phases may leave\n               the stream partially modified.\n          \
    \          4 = Stream changed\n                    8 = (1) Network trouble\n \
    \                  10 = (0) Stream ID nonexistent\n                   11 = (0)\
    \ Not creator of stream\n                   12 = (0) Stream precedence not being\
    \ accepted\n                   16 = (3) Unable to add all the new recipients\n\
    \                   17 = (2) Insufficient network resources\n                \
    \   18 = (2) Requested bandwidth too large\n                   21 = (0) Maximum\
    \ messages per interval too small\n                   22 = (2) Reply lost in network\n\
    \                   23 = (0) Illegal precedence value\n                   24 =\
    \ (0) Invalid destination address in list\n     S1[0-15]  Setup Checksum.  (See\
    \ setup header description.)\n     S2[0-15]  Request ID.\n     S3[0-5]   Reserved.\
    \  Must be zero.\n     S3[6-15]  Address list length.  This field specifies the\
    \ number\n               of addresses in the Address List.\n     S4-SN     Address\
    \ list.  This contains the destination addresses\n               from the Change\
    \ Stream Request that were invalid (phase\n               0 errors) or unreachable\
    \ (phase 3 errors).  Unreachable\n               destinations are listed as a\
    \ group if every member of\n               the group was unreachable, or individually\
    \ otherwise;\n               i.e., group addresses are expanded and the unreachable\n\
    \               members are included in the list.  The list of\n             \
    \  unreachable destinations will be truncated, if needed,\n               to limit\
    \ this Reply to a single, maximum length HAP\n               message.\n     Caution:\
    \ The Change Stream Reply will indicate failure if any\n     aspect of the requested\
    \ changes did not occur.  However, the\n     stream may have been partially modified.\
    \  Processing is performed\n     in the following phases:\n         0: check for\
    \ invalid requests;\n         1: drop former recipients that are not in the latest\
    \ list;\n         2: increase or decrease the stream's bandwidth allocation\n\
    \             (decreases are normally successful); then\n         3: extend the\
    \ stream to any new recipients.\n     If phase 2 fails, phase 3 is not performed,\
    \ the Reply Code will\n     indicate an error and the stream parameters will be\
    \ unchanged.\n     If phase 3 fails, the Address List will contain the destinations,\n\
    \     if any, from the latest list that the stream does not reach.\n     Phase\
    \ 1 only fails if the stream has been suspended (see\n     Notifications) or the\
    \ WPS is experiencing network connectivity\n     problems.\n                 0\
    \  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S0        |           1           |           6           |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S1        |    \
    \             SETUP CHECKSUM                |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S2        |                  REQUEST ID                   |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S3        |    \
    \    0        |         STREAM ID           |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \                           DELETE STREAM REQUEST\n                          \
    \       Figure 12\n     S0[0-7]   Setup Type = 1 (Request).\n     S0[8-15]  Request\
    \ Type = 6 (Delete Stream).\n     S1[0-15]  Setup Checksum.  (See setup header\
    \ description.)\n     S2[0-15]  Request ID.\n     S3[0-5]   Reserved.  Must be\
    \ zero.\n     S3[6-15]  Stream ID.\n                 0  1  2  3  4  5  6  7  8\
    \  9 10 11 12 13 14 15\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S0        |           2           |      REPLY CODE       |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S1        |    \
    \             SETUP CHECKSUM                |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S2        |                  REQUEST ID                   |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n                    \
    \        DELETE STREAM REPLY\n                                 Figure 13\n   \
    \  S0[0-7]   Setup Type = 2 (Reply).\n     S0[8-15]  Reply Code.  If the request\
    \ was valid, the Service\n               Agent will have marked the stream for\
    \ deletion even if\n               the stream resources have not actually been\
    \ deleted\n               yet.\n                    1 = Stream deleted\n     \
    \              10 = Stream ID nonexistent\n                   11 = Not creator\
    \ of stream\n     S1[0-15]  Setup Checksum.  (See setup header description.)\n\
    \     S2[0-15]  Request ID.\n                 0  1  2  3  4  5  6  7  8  9 10\
    \ 11 12 13 14 15\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S0        |           1           |           9           |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S1        |    \
    \             SETUP CHECKSUM                |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S2        |                  REQUEST ID                   |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n                    \
    \    DELETE ALL STREAMS REQUEST\n                                 Figure 14\n\
    \     S0[0-7]   Setup Type = 1 (Request).\n     S0[8-15]  Request Type = 9 (Delete\
    \ All Streams).\n     S1[0-15]  Setup Checksum.  (See setup header description.)\n\
    \     S2[0-15]  Request ID.\n                 0  1  2  3  4  5  6  7  8  9 10\
    \ 11 12 13 14 15\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S0        |           2           |      REPLY CODE       |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S1        |    \
    \             SETUP CHECKSUM                |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S2        |                  REQUEST ID                   |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n                    \
    \     DELETE ALL STREAMS REPLY\n                                 Figure 15\n \
    \    S0[0-7]   Setup Type = 2 (Reply).\n     S0[8-15]  Reply Code.  The Service\
    \ Agent will have marked all of\n               the host's streams for deletion,\
    \ even if the stream\n               resources have not actually been deleted\
    \ yet.\n                    1 = Streams deleted\n     S1[0-15]  Setup Checksum.\
    \  (See setup header description.)\n     S2[0-15]  Request ID.\n"
- title: 6.2. Group Setup Messages
  contents:
  - "6.2. Group Setup Messages\n   Group (multicast) addressing allows a host to send\
    \ the same message\n   to N different hosts without having to send N copies of\
    \ the message.\n   The network duplicates the message as required.  In addition\
    \ to\n   reducing the burden on the originating host, multicasting reduces the\n\
    \   load on the network because the network no longer has to carry the\n   duplicates\
    \ along the common portions of the paths between the source\n   and destinations.\
    \  Multicasting is particularly recommended for\n   multi-site conferencing and\
    \ distributed simulations.\n   Group addresses are dynamically created and deleted\
    \ via setup\n   messages exchanged between the hosts and the Service Agent.\n\
    \   Membership in a group may be any arbitrary subset of the network\n   hosts.\
    \  A datagram message or stream message addressed to a group is\n   delivered\
    \ to all hosts that are members of that group (exception:\n   stream messages\
    \ sent to a group address that includes hosts the\n   stream was not set up to\
    \ reach).  The group setup messages, each of\n   which has a Request and a Reply,\
    \ are Create Group, Delete Group, Join\n   Group, Leave Group, Add Group Member,\
    \ and Remove Group Member.\n   Figure 16 shows a typical use of group setup messages.\
    \  The figure\n   illustrates a scenario of exchanges between three hosts and\
    \ the\n   Service Agent.  In the scenario one host, Host A, creates a group\n\
    \   which is joined by hosts B and C.  The hosts then exchange some data\n   messages\
    \ using the group address.  Note that multicast messages are\n   not returned\
    \ to their originator.  Hosts A and C then leave the\n   group, and Host B decides\
    \ to delete the group.  As in the scenario in\n   Section 6.1, A/R indications\
    \ have been omitted for clarity.\n   Part of the group creation procedure involves\
    \ the Service Agent\n   returning to the creating host a 48-bit key along with\
    \ the 16-bit\n   group address.  The creating host must pass the key along with\
    \ the\n   group address to other hosts that want to join the group.  These\n \
    \  other hosts must supply the key along with the group address in their\n   Join\
    \ Group Requests.  The key is used by the network to authenticate\n   these operations\
    \ and thereby minimize the probability that unwanted\n   hosts will deliberately\
    \ or inadvertently become members of the group.\n   The procedure used by a host\
    \ to distribute the group address and key\n   is not within the scope of HAP.\n\
    \   In the figure below, the network Service Agent is pictured as a\n   single\
    \ entity for simplicity.\n                                   Service   Host  Host\
    \  Host\n                                    Agent     A     B     C\n       \
    \ Create Group Request         |<-------|\n        Create Group Reply        \
    \   |------->|\n        Reply Acknowledgment         |<-------|\n           :\
    \   :\n        Distribute Group Adr & Key            |---->|\n        Distribute\
    \ Group Adr & Key            |---------->|\n           :   :\n        Join Group\
    \ Request (C)       |<-------------------|\n        Join Group Reply         \
    \    |------------------->|\n        Reply Acknowledgment         |<-------------------|\n\
    \        Join Group Request (B)       |<-------------|\n        Join Group Reply\
    \             |------------->|\n        Reply Acknowledgment         |<-------------|\n\
    \           :   :\n        Data Message 1 (A to B and C)         |---->|---->|\n\
    \        Data Message 2 (B to A and C)         |<----|---->|\n        Data Message\
    \ 3 (C to A and B)         |<----|<----|\n           :   :\n        Leave Group\
    \ Request (C)      |<-------------------|\n        Leave Group Reply         \
    \   |------------------->|\n        Reply Acknowledgment         |<-------------------|\n\
    \        Leave Group Request (A)      |<-------|\n        Leave Group Reply  \
    \          |------->|\n        Reply Acknowledgment         |<-------|\n     \
    \   Delete Group Request         |<-------------|\n        Delete Group Reply\
    \           |------------->|\n        Reply Acknowledgment         |<-------------|\n\
    \                               GROUP EXAMPLE\n                              \
    \   Figure 16\n   An alternative method of adding and removing group members is\
    \ the use\n   of Add Group Member and Remove Group Member.  These setup requests\n\
    \   allow hosts that are already members of the group to add or delete\n   other\
    \ hosts.\n   The Setup requests Join Group, Leave Group, Add Group Member, Remove\n\
    \   Group Member, and Delete Group are authenticated using the 48-bit\n   key.\
    \  Leave Group and Remove Group Member will remove a host from the\n   group membership\
    \ list but will not alter the existence of the group.\n   Delete Group expunges\
    \ all knowledge of the group from the network.\n   HAP permits any host with the\
    \ proper key to delete the group at any\n   time.  Thus, group addresses can be\
    \ deleted even if the host which\n   originally created the group has left the\
    \ group or has crashed.\n   Moreover, groups may exist for which there are currently\
    \ no members\n   because each member has executed a Leave while none has executed\
    \ a\n   Delete.  It is the responsibility of the hosts to coordinate and\n   manage\
    \ the use of group addresses.\n   Note that group addresses, like all other resources\
    \ allocated by the\n   network, may be reclaimed by the network if unused for\
    \ too long.\n   Currently, if no traffic is sent to the group address in a 6 minute\n\
    \   interval, the network may delete the group and notify all members\n   that\
    \ the group no longer exists.\n   The Create Group Request (Figure 17) is used\
    \ to establish a multicast\n   address.  After the network has processed the Create\
    \ Group Request,\n   the Service Agent will respond by sending a Create Group\
    \ Reply\n   (Figure 18) to the host.\n   A host may become a member of a group,\
    \ once it knows the group\n   address and the 48-bit key, by sending the Service\
    \ Agent the Join\n   Group Request message (Figure 19).  The Service Agent will\
    \ respond to\n   the Join Group Request with a Join Group Reply (Figure 20). \
    \ The host\n   which creates a group automatically becomes a member of that group\n\
    \   without any need for an explicit Join Group Request.\n   A member host may\
    \ add another host to the group by sending the\n   Service Agent the Add Group\
    \ Member Request message (Figure 21).  The\n   Service Agent will respond with\
    \ an Add Group Member Reply (Figure\n   22).\n   At any time after becoming a\
    \ member of a group, a host may choose to\n   drop out of the group.  To do this,\
    \ the host sends the Service Agent\n   a Leave Group Request (Figure 23).  The\
    \ Service Agent will respond\n   with a Leave Group Reply (Figure 24).\n   One\
    \ member host may expel another member of the group by sending the\n   Service\
    \ Agent the Remove Group Member Request message (Figure 25).\n   The Service Agent\
    \ will respond with a Remove Group Member Reply\n   (Figure 26).\n   A host can\
    \ delete an existing group via a Delete Group Request\n   (Figure 27).  The Service\
    \ Agent will respond with a Delete Group\n   Reply (Figure 28).  The Service Agent\
    \ will also send the other\n   members of the group, if any, a notification that\
    \ the group has been\n   deleted (see Section 6.3).\n                 0  1  2\
    \  3  4  5  6  7  8  9 10 11 12 13 14 15\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S0        |           1           |           1           |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S1        |    \
    \             SETUP CHECKSUM                |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S2        |                  REQUEST ID                   |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n                    \
    \       CREATE GROUP REQUEST\n                                 Figure 17\n   \
    \  S0[0-7]   Setup Type = 1 (Request).\n     S0[8-15]  Request Type = 1 (Create\
    \ Group).\n     S1[0-15]  Setup Checksum.  (See setup header description.)\n \
    \    S2[0-15]  Request ID.\n                 0  1  2  3  4  5  6  7  8  9 10 11\
    \ 12 13 14 15\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S0        |           2           |      REPLY CODE       |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S1        |    \
    \             SETUP CHECKSUM                |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S2        |                  REQUEST ID                   |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S3        |    \
    \             GROUP ADDRESS                 |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S4        |                      KEY                      |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S5        |    \
    \                  KEY                      |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S6        |                      KEY                      |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n                    \
    \        CREATE GROUP REPLY\n                                 Figure 18\n    \
    \ S0[0-7]   Setup Type = 2 (Reply).\n     S0[8-15]  Reply Code.\n            \
    \        0 = Group created\n                    8 = Network trouble\n        \
    \           17 = Insufficient network resources\n                   22 = Reply\
    \ lost in network\n     S1[0-15]  Setup Checksum.  (See setup header description.)\n\
    \     S2[0-15]  Request ID.\n     S3[0-15]  Group Address.  This field contains\
    \ the 16-bit\n               multicast address that any group member may use to\n\
    \               reach the other group members.  Multicast addresses are\n    \
    \           dynamically assigned by the network.\n     S4-S6     Key.  This field\
    \ contains a 48-bit key assigned by the\n               network which is associated\
    \ with the group address.  It\n               must be provided for subsequent\
    \ Join Group, Leave\n               Group, Add Group Member, Remove Group Member,\
    \ and\n               Delete Group requests which reference the group\n      \
    \         address.\n                 0  1  2  3  4  5  6  7  8  9 10 11 12 13\
    \ 14 15\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  \
    \   S0        |           1           |           3           |\n            \
    \   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S1        |      \
    \           SETUP CHECKSUM                |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S2        |                  REQUEST ID                   |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S3        |    \
    \             GROUP ADDRESS                 |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S4        |                      KEY                      |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S5        |    \
    \                  KEY                      |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S6        |                      KEY                      |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S7        |    \
    \                 0                   | MGP |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \                            JOIN GROUP REQUEST\n                            \
    \     Figure 19\n     S0[0-7]   Setup Type = 1 (Request).\n     S0[8-15]  Request\
    \ Type = 3 (Join Group).\n     S1[0-15]  Setup Checksum.  (See setup header description.)\n\
    \     S2[0-15]  Request ID.\n     S3[0-15]  Group Address.  This is the group\
    \ that the host wishes\n               to join.  Upon successfully joining the\
    \ group, the host\n               may send messages to the group and will receive\n\
    \               messages sent to the group when those messages have a\n      \
    \         priority of MGP or higher.\n     S4-S6     Key.  This is the key associated\
    \ with the group\n               address.\n     S7[0-13]  Reserved.  Must be zero.\n\
    \     S7[14-15] Minimum group message priority.  The host will not\n         \
    \      receive messages sent to the group that have a message\n              \
    \ priority less than MGP.  Send another Join Group\n               Request message\
    \ to change the minimum priority.\n                 0  1  2  3  4  5  6  7  8\
    \  9 10 11 12 13 14 15\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S0        |           2           |      REPLY CODE       |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S1        |    \
    \             SETUP CHECKSUM                |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S2        |                   REQUEST ID                  |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n                    \
    \         JOIN GROUP REPLY\n                                 Figure 20\n     S0[0-7]\
    \   Setup Type = 2 (Reply).\n     S0[8-15]  Reply Code.\n                    2\
    \ = Host added to group\n                    9 = Bad key\n                   10\
    \ = Group address nonexistent\n                   17 = Insufficient network resources\n\
    \     S1[0-15]  Setup Checksum.  (See setup header description.)\n     S2[0-15]\
    \  Request ID.\n                 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n\
    \               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S0   \
    \     |           1           |           10          |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S1        |                 SETUP CHECKSUM                |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S2        |    \
    \               REQUEST ID                  |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S3        |                 GROUP ADDRESS                 |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S4        |    \
    \                  KEY                      |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S5        |                      KEY                      |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S6        |    \
    \                  KEY                      |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S7        |                  HOST ADDRESS                 |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n                    \
    \     ADD GROUP MEMBER REQUEST\n                                 Figure 21\n \
    \    S0[0-7]   Setup Type = 1 (Request).\n     S0[8-15]  Request Type = 3 (Join\
    \ Group).\n     S1[0-15]  Setup Checksum.  (See setup header description.)\n \
    \    S2[0-15]  Request ID.\n     S3[0-15]  Group Address.  This is the group the\
    \ host will join.\n               Upon successfully joining the group, the host\
    \ may send\n               messages to the group and will receive messages sent\
    \ to\n               the group by other hosts (the initial minimum priority\n\
    \               will be 0).\n     S4-S6     Key.  This is the key associated with\
    \ the group\n               address.\n     S7[0-15]  Host address.  The network\
    \ address of the host to add\n               to the group.\n                 0\
    \  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S0        |           2           |      REPLY CODE       |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S1        |    \
    \             SETUP CHECKSUM                |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S2        |                  REQUEST ID                   |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n                    \
    \      ADD GROUP MEMBER REPLY\n                                 Figure 22\n  \
    \   S0[0-7]   Setup Type = 2 (Reply).\n     S0[8-15]  Reply Code.\n          \
    \          2 = Host added to group (or was already a member)\n               \
    \     9 = Bad key\n                   10 = Group address nonexistent\n       \
    \            11 = Requestor is not a member of the group\n                   17\
    \ = Insufficient network resources\n                   22 = Reply lost in network\n\
    \                   24 = Host address was invalid\n     S1[0-15]  Setup Checksum.\
    \  (See setup header description.)\n     S2[0-15]  Request ID.\n             \
    \    0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S0        |           1           |           4           |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S1        |    \
    \             SETUP CHECKSUM                |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S2        |                   REQUEST ID                  |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S3        |    \
    \             GROUP ADDRESS                 |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S4        |                      KEY                      |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S5        |    \
    \                  KEY                      |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S6        |                      KEY                      |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n                    \
    \        LEAVE GROUP REQUEST\n                                 Figure 23\n   \
    \  S0[0-7]   Setup Type = 1 (Request).\n     S0[8-15]  Request Type = 4 (Leave\
    \ Group).\n     S1[0-15]  Setup Checksum.  (See setup header description.)\n \
    \    S2[0-15]  Request ID.\n     S3[0-15]  Group Address.  This is the group that\
    \ the host wishes\n               to cease being a member of.  After leaving the\
    \ group,\n               the host will cease receiving messages sent to the\n\
    \               group and will be unable to send to the group.\n     S4-S6   \
    \  Key.  This is the key associated with the group\n               address.\n\
    \                 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n           \
    \    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S0        |     \
    \      2            |     REPLY CODE       |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S1        |                 SETUP CHECKSUM                |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S2        |    \
    \              REQUEST ID                   |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \                             LEAVE GROUP REPLY\n                            \
    \     Figure 24\n     S0[0-7]   Setup Type = 2 (Reply).\n     S0[8-15]  Reply\
    \ Code.\n                    3 = Host deleted from group\n                   \
    \ 9 = Bad key\n                   10 = Invalid group address\n               \
    \    11 = Not member of group\n                   17 = Insufficient network resources\n\
    \     S1[0-15]  Setup Checksum.  (See setup header description.)\n     S2[0-15]\
    \  Request ID.\n                 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n\
    \               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S0   \
    \     |           1           |           11          |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S1        |                 SETUP CHECKSUM                |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S2        |    \
    \               REQUEST ID                  |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S3        |                 GROUP ADDRESS                 |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S4        |    \
    \                  KEY                      |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S5        |                      KEY                      |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S6        |    \
    \                  KEY                      |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S7        |                  HOST ADDRESS                 |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n                    \
    \    REMOVE GROUP MEMBER REQUEST\n                                 Figure 25\n\
    \     S0[0-7]   Setup Type = 1 (Request).\n     S0[8-15]  Request Type = 4 (Leave\
    \ Group).\n     S1[0-15]  Setup Checksum.  (See setup header description.)\n \
    \    S2[0-15]  Request ID.\n     S3[0-15]  Group Address.  This is the group from\
    \ which the host\n               should be removed.  After leaving the group,\
    \ that host\n               will cease receiving messages sent to the group and\n\
    \               will be unable to send to the group.\n     S4-S6     Key.  This\
    \ is the key associated with the group\n               address.\n     S7[0-15]\
    \  Host address.  The network address of the host to\n               remove from\
    \ the group.\n                 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n\
    \               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S0   \
    \     |           2            |     REPLY CODE       |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S1        |                 SETUP CHECKSUM                |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S2        |    \
    \              REQUEST ID                   |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \                         REMOVE GROUP MEMBER REPLY\n                        \
    \         Figure 26\n     S0[0-7]   Setup Type = 2 (Reply).\n     S0[8-15]  Reply\
    \ Code.\n                    3 = Host deleted from group (or was not a member)\n\
    \                    9 = Bad key\n                   10 = Invalid group address\n\
    \                   11 = Requestor is not a member of the group\n            \
    \       17 = Insufficient network resources\n                   22 = Reply lost\
    \ in network\n                   24 = Host address was invalid\n     S1[0-15]\
    \  Setup Checksum.  (See setup header description.)\n     S2[0-15]  Request ID.\n\
    \                 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n           \
    \    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S0        |     \
    \      1           |           2           |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S1        |                 SETUP CHECKSUM                |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S2        |    \
    \               REQUEST ID                  |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S3        |                 GROUP ADDRESS                 |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S4        |    \
    \                  KEY                      |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S5        |                      KEY                      |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S6        |    \
    \                  KEY                      |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \                           DELETE GROUP REQUEST\n                           \
    \      Figure 27\n     S0[0-7]   Setup Type = 1 (Request).\n     S0[8-15]  Request\
    \ Type = 2 (Delete Group).\n     S1[0-15]  Setup Checksum.  (See setup header\
    \ description.)\n     S2[0-15]  Request ID.\n     S3[0-15]  Group Address.  This\
    \ is the multicast address to\n               delete.  If the group is deleted,\
    \ the other remaining\n               members of the group, if any, will be notified\
    \ of the\n               group's deletion.\n     S4-S6     Key.\n            \
    \     0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S0        |           2           |      REPLY CODE       |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S1        |    \
    \             SETUP CHECKSUM                |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S2        |                  REQUEST ID                   |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n                    \
    \        DELETE GROUP REPLY\n                                 Figure 28\n    \
    \ S0[0-7]   Setup Type = 2 (Reply).\n     S0[8-15]  Reply Code.\n            \
    \        1 = Group deleted\n                    8 = Network trouble\n        \
    \            9 = Bad key\n                   10 = Invalid group address\n    \
    \               17 = Insufficient network resources\n                   22 = Reply\
    \ lost in network\n     S1[0-15]  Setup Checksum.  (See setup header description.)\n\
    \     S2[0-15]  Request ID.\n"
- title: 6.3. Notifications
  contents:
  - "6.3. Notifications\n   Notifications are Setup exchanges initiated by the WPS\
    \ to inform a\n   host of changes in the status of a network resource.  The format\
    \ of\n   Notification messages is shown in Figure 29.\n                 0  1 \
    \ 2  3  4  5  6  7  8  9 10 11 12 13 14 15\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S0        |           3           |          CODE         |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S1        |    \
    \                CHECKSUM                   |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S2        |                 NOTIFICATION ID               |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S3        |    \
    \            NOTIFICATION INFO              |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \                           NOTIFICATION MESSAGE\n                           \
    \      Figure 29\n     S0[0-7]   Message Type = 3 (Notification).\n     S0[8-15]\
    \  Code.  This indicates what the Notification signifies.\n                  \
    \  0 = Stream suspended\n                    1 = Stream resumed\n            \
    \        2 = Stream deleted\n                    3 = Group deleted by a host\n\
    \                    4 = Group deleted by network\n                    5 = All\
    \ streams deleted\n                    6 = All groups deleted\n              \
    \      7 = Group changed by a host\n                    8 = Group changed by network\n\
    \     S1[0-15]  Checksum.  (See Service Agent Header description.)\n     S2[0-15]\
    \  Notification ID.\n     S3[0-15]  Notification Information.\n              \
    \ For notification types 0, 1, and 2, NOTIFICATION INFO\n               contains\
    \ the following:\n                   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \               S3  |        0        |         stream ID           |\n      \
    \             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n            \
    \   For notification types 3, 4, 7, and 8, NOTIFICATION\n               INFO contains\
    \ the following:\n                   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \               S3  |                  group address                |\n      \
    \             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n            \
    \   For notification types 5 and 6, which refer to all\n               streams\
    \ or groups, NOTIFICATION INFO is zero.\n"
- title: 6.4. Setup Acknowledgments
  contents:
  - "6.4. Setup Acknowledgments\n   The host must acknowledge receipt of Setup Replies\
    \ and Notifications\n   from the Service Agent, as described earlier.  The format\
    \ for the\n   Setup Acknowledgment message is shown in Figure 30.\n          \
    \       0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S0        |           0           |           CODE        |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S1        |    \
    \                CHECKSUM                   |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S2        |                   MESSAGE ID                  |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n                    \
    \       SETUP ACKNOWLEDGMENT\n                                 Figure 30\n   \
    \  S0[0-7]   Message Type = 0 (Acknowledgment).\n     S0[8-15]  Code.  This field\
    \ indicates the type of acknowledgment.\n                   0 = Reply acknowledgment\n\
    \                   1 = Notification acknowledgment\n     S1[0-15]  Checksum.\
    \  (See Service Agent Header description.)\n     S2[0-15]  Message ID.  This is\
    \ either a Request ID or a\n               Notification ID.\n"
- title: 6.5. Information Request / Reply Messages
  contents:
  - "6.5. Information Request / Reply Messages\n   The host may obtain information\
    \ about WPS state and about what\n   resources the WPS currently has allocated\
    \ for the host by sending an\n   Information Request message to the Service Agent.\
    \  The Information\n   Reply that is returned will enable the host to determine\
    \ 1) what\n   resources the WPS has allocated to the host, and 2) the current\
    \ state\n   of the network and, possibly, certain network parameters.  This\n\
    \   allows the host to refrain from trying to use resources it no longer\n   has,\
    \ and to regain information it may have lost on its network\n   resources.  This\
    \ communication also informs the host of the network\n   state so that it may\
    \ make priority and routing decisions.\n   Each Information Request (Figure 31)\
    \ and Information Reply (Figure\n   32) message deals with a single type of resource\
    \ at a time.  The\n   header of the Information Reply message contains the number\
    \ of\n   entries within the message, the number of 16-bit words in each entry,\n\
    \   and an instance of the appropriate information structure for each\n   resource\
    \ the Information Reply message describes.  These information\n   structures are\
    \ described in Figures 33 and 34.\n   Future versions of the HAP protocol may\
    \ permit queries about network\n   connectivity, estimated delay to a specified\
    \ destination address\n   under specified conditions, etc.  This is a section\
    \ of the protocol\n   that is likely to expand in the future.  Extensions are\
    \ expected to\n   be backward compatible provided implementors do not hard code\
    \ the\n   size of the returned information entries.\n                 0  1  2\
    \  3  4  5  6  7  8  9 10 11 12 13 14 15\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S0        |           4           |           CODE        |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S1        |    \
    \                CHECKSUM                   |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S2        |                   MESSAGE ID                  |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n                    \
    \    INFORMATION REQUEST MESSAGE\n                                 Figure 31\n\
    \     S0[0-7]   Message type = 4 (Information Request).\n     S0[8-15]  Code.\
    \  This field identifies the Information Request\n               Type.\n     \
    \               1 = streams owned by host\n                    2 = groups to which\
    \ the host belongs\n     S1[0-15]  Checksum.  (See Service Agent Header description.)\n\
    \     S2[0-15]  Message ID.  This field is assigned by the host to\n         \
    \      uniquely identify outstanding requests (Request ID).\n               This\
    \ ID is copied into Information Replies by the\n               Service Agent.\n\
    \                 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n           \
    \    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S0        |     \
    \      5           |          CODE         |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S1        |                    CHECKSUM                   |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     S2        |    \
    \               MESSAGE ID                  |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     S3        |   NUMBER OF ENTRIES   |    WORDS PER ENTRY    |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n               |    \
    \                                           |\n     S4-SN     :              ENTRIES\
    \ (0 or more)              :\n               |                               \
    \                |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \                         INFORMATION REPLY MESSAGE\n                        \
    \         Figure 32\n     S0[0-7]   Message type = 5 (Information Reply).\n  \
    \   S0[8-15]  Code.  This field identifies the Information Reply\n           \
    \    Type.\n                    1 = streams owned by host\n                  \
    \  2 = groups to which the host belongs\n                    3 = error in Information\
    \ Request message\n                    4 = network trouble\n                 \
    \   5 = access not allowed\n     S1[0-15]  Checksum.  (See Service Agent Header\
    \ description.)\n     S2[0-15]  Message ID.  This field is assigned by the host\
    \ in the\n               Information Request message to uniquely identify\n  \
    \             outstanding requests.  This ID is copied into the\n            \
    \   Information Reply message by the Service Agent.\n     S3[0-7]   Number of\
    \ entries included in the Information Reply\n               message.\n     S3[8-15]\
    \  Number of 16-bit words per entry.\n     S4-SN     Zero or more instances of\
    \ either the stream information\n               or group information structure.\n\
    \                 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n           \
    \    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     0         |     \
    \  0         |          STREAM ID          |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     1         |          STREAM TYPE OF SERVICE WORD          |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     2         |    \
    \    STREAM SIZE (bits per interval)        |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     3         |    STREAM INTERVAL (in units of 0.125 ms.)    |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n                    \
    \        STREAM INFORMATION\n                                 Figure 33\n    \
    \             0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     0         |                  GROUP ADDRESS                |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     1         |    \
    \                0                    | MGP |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \                             GROUP INFORMATION\n                            \
    \     Figure 34\n"
- title: 7. Host Access Link Monitoring
  contents:
  - "7. Host Access Link Monitoring\n   While the access link is operating, statistics\
    \ on traffic load and\n   error rate are maintained by the host and WPS.  Once\
    \ a second, the\n   host and WPS exchange this information via Status messages\
    \ (Figure\n   35).  This periodic exchange of Status messages permits both ends\
    \ of\n   the link to monitor flows in both directions.  The WPS also reports\n\
    \   these monitoring statistics to the Network Operations Center (NOC).\n   If\
    \ either host or WPS fails to receive Status messages for ten\n   seconds, the\
    \ link will be restarted (see Section 8).\n   The link restart procedure initializes\
    \ all internal WPS counts and\n   statistics for that link to zero.  As data and\
    \ control messages are\n   processed, counts are updated to reflect the total\
    \ number of messages\n   sent, messages received correctly, and messages received\
    \ with\n   different classes of errors since the last link restart.  Whenever\
    \ a\n   Status message arrives, a snapshot is taken of the local WPS counts.\n\
    \   The local receive counts, in conjunction with a sent count contained\n   in\
    \ the received Status message, permits the computation of traffic\n   statistics\
    \ in the one second update interval assuming that the set of\n   counts at the\
    \ time of the previous monitoring report have been saved.\n   By including in\
    \ the Status message sent (in the opposite direction)\n   the receive counts and\
    \ the received sent count that was used with\n   them, the transmitting end of\
    \ the access link as well as the\n   receiving end can determine the link performance\
    \ from sender to\n   receiver.\n                 0  1  2  3  4  5  6  7  8  9\
    \ 10 11 12 13 14 15\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     0         | 1|LB|GOPRI|           0           |     0     |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     1         |    \
    \            HEADER CHECKSUM                |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     2         |             MOST RECENT A/R SENT              |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     3         |    \
    \            STREAM CAPACITY                |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     4         |                   TIMESTAMP                   |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     5         |    \
    \                  SBU                      |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     6         |                      STU                      |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     7         |    \
    \                  RNE                      |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     8         |                      RWE                      |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     9         |    \
    \                  BHC                      |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     10        |                      HEI                      |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n                    \
    \          STATUS MESSAGE\n                                 Figure 35\n     0[0]\
    \      Message Class = 1 (Control Message).\n     0[1]      Loopback indicator.\n\
    \     0[2-3]    Go-Priority.\n     0[4-11]   Reserved.  Must be zero.\n     0[12-15]\
    \  Control Message Type = 0 (Status).\n     1[0-15]   Header Checksum.  The checksum\
    \ is the 2's-complement of\n               the 2's-complement sum of words 0-10\
    \ (excluding the\n               checksum word itself).\n     2[0-15]   Most Recent\
    \ A/R Sent.  This field is a duplicate of the\n               most recent acceptance/refusal\
    \ word.  It is included in\n               the periodic Status message in case\
    \ previous\n               transmissions containing A/R information were lost.\n\
    \     3[0-15]   Stream Capacity.  When sent by the WPS, this field\n         \
    \      indicates how much stream capacity is unused, in units\n              \
    \ of data bits per millisecond.  There is no guarantee\n               that a\
    \ request for a stream of this size will succeed.\n               Since available\
    \ capacity depends directly on a variety\n               of parameters that can\
    \ be selected by the user, the\n               value of this field is the maximum\
    \ capacity that could\n               be achieved if existing streams were expanded\
    \ at low\n               reliability.  This field is not meaningful in messages\n\
    \               sent from the host to the WPS and must be set to zero.\n     4[0-15]\
    \   Timestamp.  This field indicates the time that the\n               Status\
    \ message was generated.  When sent by a WPS, the\n               time is in units\
    \ of seconds since the last link\n               restart.  The host should also\
    \ timestamp its messages\n               in units of seconds.\n     5[0-15]  \
    \ Sent By Us.  Count of messages sent by us since the\n               last link\
    \ restart (not including this one).\n     6[0-15]   Sent To Us.  Count of messages\
    \ sent to us since the\n               last link restart.  This is the count from\
    \ word 5 of\n               the last Status message received.\n     7[0-15]  \
    \ Received, No Errors.  This is the count of messages\n               received\
    \ without errors (since the last link restart)\n               at the time that\
    \ the last Status message was received.\n     8[0-15]   Received With Errors.\
    \  This is the count of messages\n               received with errors (since the\
    \ last link restart) at\n               the time the last Status message was received.\n\
    \     9[0-15]   Bad Header Checksums.  This is the count of messages\n       \
    \        received with bad header checksums (since the last link\n           \
    \    restart) at the time the last Status message was\n               received.\n\
    \     10[0-15]  Hardware Error Indication.  This is the count of\n           \
    \    messages received with hardware CRC errors or hardware\n               interface\
    \ error indications (since the last link\n               restart) at the time\
    \ the last Status message was\n               received.\n"
- title: 8. Initialization
  contents:
  - "8. Initialization\n   The Host Access Protocol uses a number of state variables\
    \ that must\n   be initialized in order to function properly.  These variables\
    \ are\n   associated with the send and receive message numbers used by the\n \
    \  acceptance/refusal mechanism and the statistics maintained to support\n   link\
    \ monitoring.  Link initialization should be carried out when a\n   machine is\
    \ initially powered up, when it does a system restart, when\n   the ON state (see\
    \ below) times out, when a loopback condition times\n   out (see Section 9), or\
    \ whenever the link transitions from non-\n   operational to operational status.\n\
    \   Initialization is accomplished by the exchange of Restart Request\n   (RR)\
    \ and Restart Complete (RC) messages between a host and a WPS.\n   Either end\
    \ (or both ends) may send an initial RR, and both ends must\n   have sent and\
    \ received an RC message in order to declare the link up.\n   Because the RC message\
    \ is a reply (to an RR or RC), receipt of an RC\n   message by both ends guarantees\
    \ that the physical link is operating\n   in both directions.  The initialization\
    \ state diagram that must be\n   implemented by both WPS and host is shown in\
    \ Figure 36.  Five states\n   are identified in the state diagram:\n     OFF \
    \      Entered upon recognition of a requirement to restart.\n               The\
    \ interface in the Host or WPS can recognize this\n               requirement\
    \ itself or be forced to restart by receipt\n               of an RR message from\
    \ the other end while in the ON\n               state.\n     INIT      Local state\
    \ variables have been initialized but no RC\n               messages have yet\
    \ been sent or received.  If receipt of\n               an RR initiated the restart,\
    \ or if an RR has been\n               received since this restart began, send\
    \ an RC\n               (optional, reduces startup time).  Otherwise, send an\n\
    \               RR to alert the other end of the restart.\n     RR-SNT    A request\
    \ to reinitialize (RR) has been sent to the\n               other end, but no\
    \ RR or RC messages have been received.\n     RC-SNT    An RC has been sent to\
    \ the other end in response to an\n               RR.  The interface is waiting\
    \ to receive an RC.\n     ON        RC messages have been both sent and received.\
    \  Local\n               counters have been zeroed.  Data and control messages\n\
    \               can now be exchanged between the WPS and host.\n   All states\
    \ have 10-second timeouts (not illustrated) which return the\n   protocol to the\
    \ OFF state.  The occurrence of any events other than\n   those indicated in the\
    \ diagram are ignored.\n                              .-----.\n         Any Timeout\
    \ or ----->| OFF |<----------------------------+\n         Device Down       \
    \   `--+--'                             |\n                                 |\
    \                                |\n                                 | (When I/O\
    \ Device Up)           |\n                                 V                 \
    \               |\n                             .-------.                    \
    \        |\n                             | INIT  |                           \
    \ |\n                             `---+---'                            |\n   \
    \                              |                                |\n          \
    \         (Yes)         V            (No)                |\n                 \
    \ +---------RR Received?----------+               |\n                  |     \
    \                          |               |\n                  |            \
    \                Send RR            |\n                  |                   \
    \            |               |\n                  |                          \
    \     V               |\n                  |                           .--------.\
    \          |\n               Send RC <-----+-------<--------+ RR-SNT |       \
    \   |\n                  |          |       (Rcv RR) `---+----'          |\n \
    \                 |          |                    | (Rcv RC)      |\n        \
    \          V          |                    |               |\n             .--------.\
    \      |                    |               |\n             | RC-SNT +--->--+\
    \                 Send RC            |\n             `----+---'  (Rcv RR)    \
    \             |               |\n         (Rcv RC) |                         \
    \      |               |\n                  |                               |\
    \               |\n                  +------->------+-------<--------+       \
    \        |\n                                 |                               \
    \ |\n                      Initialize Status Counters                  |\n   \
    \                              |                                |\n          \
    \                       V                                |\n                 \
    \             .-----.   Rcv RR   or               |\n              Rcv Any  +----->|\
    \ ON  +---------------------->------+\n              Other    |      `--+--' \
    \  Fail to Rcv Status message\n                       +---------+      for 10\
    \ seconds\n                      HAP LINK RESTART STATE DIAGRAM\n            \
    \                     Figure 36\n   The Restart Request control message (Figure\
    \ 37) is sent by either a\n   host or a WPS when it wishes to restart a link.\
    \  The Restart Request\n   causes all the monitoring statistics reported in the\
    \ Status Message\n   to be reset to zero and stops all traffic on the link in\
    \ both\n   directions.  The Restart Complete message (Figure 38) is sent in\n\
    \   response to a received Restart Request or Restart Complete to\n   complete\
    \ link initialization.  The Restart Complete carries a field\n   used by the host\
    \ to enable or disable the acceptance/refusal\n   mechanism for the link being\
    \ restarted (see Section 5).  After the\n   Restart Complete is processed, traffic\
    \ may flow on the link.\n   The allocation and state of network resources (streams\
    \ and groups)\n   are separate from the state of the host's access link(s) to\
    \ the WPS.\n   The Information Request message (see Section 6.5) may be used by\
    \ a\n   host to determine what resources it has.  If the \"SL\" bit is set in\n\
    \   the Restart Complete message from the WPS, and if the host believes\n   it\
    \ has resources allocated to it, the host is strongly encouraged to\n   use an\
    \ Information Request to verify that it still has its resources.\n           \
    \      0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     0         | 1|LB|    0   |VERSION |     0     |     3     |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     1         |    \
    \            HEADER CHECKSUM                |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     2         |                 HOST ADDRESS                  |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     3         |    \
    \              LINK NUMBER                  |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \                              RESTART REQUEST\n                             \
    \    Figure 37\n     0[0]     Message Type = 1 (Control Message).\n     0[1] \
    \    Loopback indicator.\n     0[2-4]   Reserved.  Must be zero.\n     0[5-7]\
    \   HAP version number.  Use 1.  Use of zero invokes\n              backward compatibility\
    \ code (see Appendix B).\n     0[8-11]  Reserved.  Must be zero.\n     0[12-15]\
    \ Control Message Type = 3 (Restart Request).\n     1[0-15]  Header Checksum.\
    \  The checksum is the 2's-complement of\n              the 2's-complement sum\
    \ of words 0-3 (excluding the\n              checksum word itself).\n     2[0-15]\
    \  Host Address.  The WPS inserts the primary network\n              address of\
    \ the host.  The host may insert any of its\n              network addresses in\
    \ this field (hosts may have more\n              than one logical address per\
    \ physical port).  The WPS\n              will only bring up the HAP link if the\
    \ host address is\n              valid for the port being used.\n     3[0-15]\
    \  Link Number.  This field contains the sender's\n              identification\
    \ of the physical link being used.  This\n              information is used to\
    \ identify the link when reporting\n              errors to the Network Operations\
    \ Center (NOC).\n                 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14\
    \ 15\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     0\
    \         | 1|LB|   0    |VERSION |  0  |SL|AR|     4     |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     1         |                HEADER CHECKSUM                |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     2         |    \
    \             HOST ADDRESS                  |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     3         |                  LINK NUMBER                  |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n                    \
    \         RESTART COMPLETE\n                                 Figure 38\n     0[0]\
    \     Message Type = 1 (Control Message).\n     0[1]     Loopback indicator.\n\
    \     0[2-4]   Reserved.  Must be zero.\n     0[5-7]   HAP version number.  Use\
    \ 1.  Use of zero invokes\n              backward compatibility code (see Appendix\
    \ B).\n     0[8-9]   Reserved.  Must be zero.\n     0[10]    Service loss alert\
    \ (boolean) (WPS to host only; host\n              must send zero).  If the WPS\
    \ has any reason to believe\n              that the resources allocated to the\
    \ host may not match\n              what the host believes is allocated, SL is\
    \ set to one.\n              If SL is one, a host that believes it owns any resources\n\
    \              is strongly encouraged to use an Information Request to\n     \
    \         verify that the resources are still allocated.  SL will\n          \
    \    be one the first time a link is brought up after a WPS\n              is\
    \ restarted, and may be set in other cases.\n     0[11]    Acceptance/Refusal\
    \ Control.  This bit is used by the\n              host to enable or disable the\
    \ acceptance/refusal\n              mechanism for all traffic on the link.\n \
    \                  0 = Disable acceptance/refusal\n                   1 = Enable\
    \ acceptance/refusal\n     0[12-15] Control Message Type = 4 (Restart Complete).\n\
    \     1[0-15]  Header Checksum.  Covers words 0-3.\n     2[0-15]  Host Address.\n\
    \     3[0-15]  Link Number.\n"
- title: 9. Loopback Control
  contents:
  - "9. Loopback Control\n   The Host Access Protocol provides a Loopback Request\
    \ control message\n   which can be used by a WPS or a host to request the remote\
    \ loopback\n   of its HAP messages.  Such requests are usually the result of\n\
    \   operator intervention for purposes of system fault diagnosis.  For\n   clarity\
    \ in the following discussion, the unit (WPS or host)\n   requesting the remote\
    \ loopback is referred to as the \"transmitter\"\n   and the unit implementing\
    \ (or rejecting) the loopback is referred to\n   as the \"receiver\".\n   When\
    \ the host access link is remotely looped, all HAP messages will\n   be returned,\
    \ unmodified, over the access link by the receiver.\n   (Messages that are too\
    \ long to be valid HAP messages may be discarded\n   instead of being returned.)\
    \  The receiver will not send any of its\n   own messages to the transmitter while\
    \ it is implementing the loop.\n   WPS-generated messages are distinguished from\
    \ host-generated messages\n   by means of the Loopback indicator that is in every\
    \ HAP message\n   header.\n   Two types of remote loopback may be requested: loopback\
    \ at the\n   receiver's interface hardware and loopback at the receiver's I/O\n\
    \   driver software.  HAP does not specify the manner in which the\n   receiver\
    \ should implement these loops; additionally, some receivers\n   may use interface\
    \ hardware which is incapable of looping the\n   transmitter's messages, only\
    \ allowing the receiver to provide\n   software loops.  A receiver may not be\
    \ able to interpret the\n   transmitter's messages as it is looping them back.\
    \  If such\n   interpretation is possible, however, the receiver will not act\
    \ on any\n   of the transmitter's messages other than requests to reinitialize\
    \ the\n   WPS-host link (Restart Request (RR) control messages; see Section 8.)\n\
    \   When a receiver initiates a loopback condition in response to a\n   loopback\
    \ request, it makes an implicit promise to maintain the\n   condition for the\
    \ duration specified in the Loopback Request message.\n   However, if an unanticipated\
    \ condition such as a system restart\n   occurs in either the transmitter or the\
    \ receiver, the affected unit\n   will try to reinitialize the WPS-host link by\
    \ sending an RR message\n   to the other unit.  If the RR message is recognized\
    \ by the other\n   unit, a link initialization sequence can be completed.  This\
    \ will\n   restore the link to an unlooped condition even if the specified loop\n\
    \   duration has not yet expired.  If a receiver cannot interpret a\n   transmitter's\
    \ RR messages, and in the absence of operator\n   intervention at the receiver,\
    \ the loop will remain in place for its\n   duration.\n   HAP does not specify\
    \ the characteristics of any loopback conditions\n   that may be locally implemented\
    \ by a given unit.  An example of such\n   a condition is that obtained when a\
    \ WPS commands its host interface\n   to loop back its own messages.  If such\
    \ local loop conditions also\n   cause the reflection of messages received from\
    \ the remote unit, the\n   remote unit will detect the condition via the HAP header\
    \ Loopback\n   indicator.\n   A specific sequence must be followed for setting\
    \ up a remote\n   loopback.  It begins after the HAP link has been initialized\
    \ and a\n   decision is made to request a remote loop.  The transmitter then\n\
    \   sends a Loopback Request message (Figure 39) to the receiver and\n   waits\
    \ for either (1) a 10-second timer to expire, (2) a \"Can't\n   implement loop\"\
    \ Unnumbered Response message from the receiver, or (3)\n   one of its own reflected\
    \ messages.  If event (1) or (2) occurs the\n   request has failed and the transmitter\
    \ may, at its option, try again\n   with a new Loopback Request message.  If event\
    \ (3) occurs, the remote\n   loopback condition has been established.  While waiting\
    \ for one of\n   these events, messages from the receiver are processed normally.\n\
    \   Note that RR messages arriving from the receiver during this time\n   will\
    \ terminate the loopback request.\n   When a receiver gets a Loopback Request\
    \ message, it either implements\n   the requested loop for the specified duration,\
    \ or returns a \"Can't\n   implement loop\" response without changing the state\
    \ of the link.  The\n   latter response would be returned, for example, if a receiver\
    \ is\n   incapable of implementing a requested hardware loop.  A receiver\n  \
    \ should initiate reinitialization of the link with an RR message(s)\n   whenever\
    \ a loopback condition times out.\n   There is one asymmetry that is required\
    \ in the above sequence to\n   resolve the (unlikely) case where both WPS and\
    \ host request a remote\n   loopback at the same time. If a WPS receives a Loopback\
    \ Request\n   message from a host while it is itself waiting for an event of type\n\
    \   (1)-(3), it will return a \"Can't implement loop\" response to the host\n\
    \   and will continue to wait.  A host in the converse situation,\n   however,\
    \ will abort its loopback request and will instead act on the\n   WPS's loopback\
    \ request.\n                 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n\
    \               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     0    \
    \     | 1|LB|GOPRI|     0     | LOOP TYPE |     8     |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     1         |                HEADER CHECKSUM                |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     2         |    \
    \             LOOP DURATION                 |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \                             LOOPBACK REQUEST\n                             \
    \    Figure 39\n     0[0]      Message Type = 1 (Control Message).\n     0[1]\
    \      Loopback indicator.\n     0[2-3]    Go-Priority.\n     0[4-7]    Reserved.\
    \  Must be zero.\n     0[8-11]   Loop Type.  This field indicates the type of\
    \ loop that\n               is being requested as follows:\n                 \
    \   0 = Undefined\n                    1 = Loop at interface (hardware loop)\n\
    \                    2 = Loop at driver (software loop)\n                    3-15\
    \ = Undefined\n     0[12-15]  Control Message Type = 8 (Loopback Request).\n \
    \    1[0-15]   Header Checksum.  The checksum is the 2's-complement of\n     \
    \          the 2's-complement sum of words 0-2 (excluding the\n              \
    \ checksum word itself).\n     2[0-15]   Loop Duration.  The transmitter of a\
    \ Loopback Request\n               message uses this field to specify the number\
    \ of\n               seconds that the loop is to be maintained by the\n      \
    \         receiver.\n"
- title: 10. Other Control Messages
  contents:
  - "10. Other Control Messages\n   Before a WPS or a host voluntarily disables a\
    \ WPS-host link, it\n   should send at least one Link Going Down control message\
    \ (Figure 40)\n   over that link.  HAP does not define the action(s) that should\
    \ be\n   taken by a WPS or a host when such a message is received; informing\n\
    \   the Network Operations Center (NOC) and/or the network users of the\n   impending\
    \ event is a typical course of action.  Note that each Link\n   Going Down message\
    \ only pertains to the WPS-host link that it is sent\n   over; if a host and a\
    \ WPS are connected by multiple links, these\n   links may be selectively disabled.\n\
    \   A No Operation (NOP) control message (Figure 41) may be sent at any\n   time\
    \ by a WPS or a host.  A NOP message contains up to 32 words of\n   arbitrary\
    \ data which are undefined by HAP.  NOP messages may be\n   required in some cases\
    \ to clear the state of the WPS-host link\n   hardware.\n                 0  1\
    \  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     0         | 1|LB|GOPRI|     0     |  REASON   |     7     |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     1         |    \
    \            HEADER CHECKSUM                |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     2         |               TIME UNTIL DOWN                 |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     3         |    \
    \            DOWN DURATION                  |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \                              LINK GOING DOWN\n                             \
    \    Figure 40\n     0[0]      Message Type = 1 (Control Message).\n     0[1]\
    \      Loopback indicator.\n     0[2-3]    Go-Priority.\n     0[4-7]    Reserved.\
    \  Must be zero.\n     0[8-11]   Reason.  This field is used by the WPS or the\
    \ host to\n               indicate the reason for disabling this WPS-host link\
    \ as\n               follows:\n                    0 = Cancel previous notice,\
    \ not going down\n                    1 = Unspecified reason\n               \
    \     2 = Scheduled PM\n                    3 = Scheduled hardware work\n    \
    \                4 = Scheduled software work\n                    5 = Emergency\
    \ restart\n                    6 = Power outage\n                    7 = Software\
    \ breakpoint\n                    8 = Hardware failure\n                    9\
    \ = Not scheduled up\n                   10 = Last warning:  The WPS or host will\
    \ disable\n                        the link in 10 seconds\n                  \
    \ 11-15 = Undefined\n     0[12-15]  Control Message Type = 7 (Link Going Down).\n\
    \     1[0-15]   Header Checksum.  The checksum is the 2's-complement of\n    \
    \           the 2's-complement sum of words 0-3 (excluding the\n             \
    \  checksum word itself).\n     2[0-15]   Time Until Down.  This field specifies\
    \ the amount of\n               time remaining until the WPS or host disables\
    \ the link\n               (in minutes).  An entry of zero indicates that there\
    \ is\n               less than a minute remaining.\n     3[0-15]   Down Duration.\
    \  This field specifies the amount of time\n               that the WPS-host link\
    \ will be down (in minutes).  An\n               entry of zero indicates that\
    \ the down duration will be\n               less than a minute.  An entry of -1\
    \ (all bits set)\n               indicates an indefinite down duration.\n    \
    \             0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     0         | 1|LB|       0      |    LENGTH    |     6     |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n     1         |    \
    \            HEADER CHECKSUM                |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \               |                                               |\n     2-N  \
    \     :                ARBITRARY DATA                 :\n               |    \
    \                                           |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \                            NO OPERATION (NOP)\n                            \
    \     Figure 41\n     0[0]      Message Type = 1 (Control Message).\n     0[1]\
    \      Loopback indicator.\n     0[2-6]    Reserved.  Must be zero.\n     0[7-11]\
    \   Length.  The number of words of arbitrary data.\n     0[12-15]  Control Message\
    \ Type = 6 (NOP).\n     1[0-15]   Header Checksum.  The checksum is the 2's-complement\
    \ of\n               the 2's-complement sum of words 0-N (excluding the\n    \
    \           checksum word itself).\n     2-N       Arbitrary Data.  Up to 32 words\
    \ of data may be sent.\n               The data are undefined by HAP.\n"
- title: 11. Appendix A -- Future Extensions
  contents:
  - "11. Appendix A -- Future Extensions\n   The extensions to HAP described below\
    \ are included to provide\n   additional context for the understanding of HAP's\
    \ current\n   capabilities, as well as suggest how HAP may be enhanced in the\n\
    \   future to provide better support for multi-site conferencing.  These\n   capabilities\
    \ are not supported by TWBNET.\n   One change under consideration is the addition\
    \ of a \"conference\"\n   resource, which would own some number of streams and\
    \ groups and\n   improve the network's ability to meet the needs of video conference\n\
    \   users.  A single request to modify the \"conference\", such as to add a\n\
    \   new member, would result in modifying all the streams in the\n   conference\
    \ to include the new member, modifying the conference's\n   primary group address\
    \ to add the new member, etc., in a single\n   network operation.  Such a capability\
    \ would not only simplify\n   conference resource management for hosts, but also\
    \ reduce the number\n   of network setup operations, permit more nearly \"atomic\"\
    \ decisions of\n   whether a particular conference modification is possible, and\
    \ reduce\n   the problem of recovery if modification is not possible.\n   Another\
    \ change under consideration is the addition of \"shared\n   streams.\"  This\
    \ capability would allow hosts to share a single\n   allocation of network bandwidth\
    \ (and other resources) wherever the\n   streams shared a common communication\
    \ path.  Hosts using a shared\n   stream must be willing to restrict their total\
    \ transmission rate to\n   the rate of the shared bandwidth.  Multi-site conferences\
    \ could use\n   such a capability to avoid allocating full bandwidth for voice\
    \ data\n   for all conference members.  Instead, bandwidth for, say, four active\n\
    \   voices at once could be allocated and shared, and voice messages\n   would\
    \ only be lost when more than four people tried to talk at once.\n   The Create\
    \ Shared Stream Request would use a different request code\n   than Create Stream\
    \ Request, and the setup message would likely\n   contain at least one additional\
    \ field to identify the set of shared\n   streams.  Change and Delete Stream requests\
    \ could be used for both\n   shared and non-shared streams.\n"
- title: 12. Appendix B -- Backward compatibility
  contents:
  - "12. Appendix B -- Backward compatibility\n   The WPS will support the use of\
    \ HAP version 0 by hosts until all\n   hosts have upgraded to version 1.  The\
    \ WPS determines which HAP\n   version the host is using by examining the Restart\
    \ Request and/or\n   Restart Complete control messages sent by the host to the\
    \ WPS.  If\n   the host initiates a restart and thus sends both a Restart Request\n\
    \   and a Restart Complete, and if the HAP version numbers in the two\n   messages\
    \ differ, the version number in the Restart Complete will\n   prevail.  The WPS\
    \ will always set the version number to 1.  If the\n   host sends 0 in the version\
    \ number field, version 0 compatiblity mode\n   will be invoked.\n   Version 0\
    \ of HAP did not contain the PROTOCOL ID field in the\n   datagram and stream\
    \ message headers.  Instead, the IL bit in the Type\n   of Service word was used\
    \ to indicate the presence or absence of an\n   Internet Protocol (IP) header\
    \ (any version number) following the HAP\n   header.  This is the original description\
    \ of that bit:\n     3[1]   Internet/Local Flag.  This flag is set by a source\
    \ host to\n            specify to a destination host whether the data portion\
    \ of\n            the message contains an Internet Protocol (IP) header [3].\n\
    \            This field is passed transparently by the source and\n          \
    \  destination WPSen for traffic between network hosts.  This\n            field\
    \ is examined by WPS Agents in order to support\n            Internet operation.\n\
    \                 0 = Internet\n                 1 = Local\n   Conversion Algorithms\n\
    \   Link control messages (e.g., Restart Request) do not require\n   conversion.\
    \  Datagram and stream messages sent by or to a host\n   running HAP version 0\
    \ will be converted by the WPS.  Message\n   conversion will probably cause the\
    \ maximum throughput of hosts using\n   HAP version 0 to be somewhat lower than\
    \ that of hosts using HAP\n   version 1.\n   HAP version 0 used the IL bit in\
    \ the HAP Type of Service word to\n   indicate the presence or absence of an IP\
    \ header.  Version 1 uses the\n   Protocol ID field.  To convert host-to-WPS messages,\
    \ the IL bit will\n   be cleared, and the protocol ID field will be inserted,\
    \ with the\n   value indicated:\n        IL was   Destination   Protocol ID set\
    \ to:\n        ------  -------------  ---------------------\n          0     \
    \     any       HAP_PROTO_IP  (0x800)\n          1     Service Agent  HAP_PROTO_SETUP\
    \ (1)\n          1         other      HAP_PROTO_NONE  (0)\n     To convert WPS-to-host\
    \ messages, the protocol ID field will be\n     deleted, and the IL bit will be\
    \ set by:\n               IL = (protocol_id was HAP_PROTO_IP) ? 0 : 1;\n     HAP_PROTO_IP\
    \ (see Appendix C) will be used for IP \"versions\" 3\n     (GG protocol), 4 (IP),\
    \ and 5 (ST).\n   The datagram message header fields TTL and PRI have been swapped\
    \ in\n   HAP version 0 compared to version 1.  The conversion code swaps the\n\
    \   contents of these two fields for hosts running version 0.\n   The stream message\
    \ header field TTL in HAP version 0 was replaced by\n   the PRE field in version\
    \ 1.  Since the only permitted value of TTL\n   was 1, and it is a valid PRE value,\
    \ no conversion is necessary.\n   In HAP version 0, messages between a host and\
    \ the Service Agent were\n   allowed to contain Internet Protocol headers.  No\
    \ hosts use that\n   capability, so no provision will be made to accommodate IP\
    \ headers in\n   Setups between hosts and the Service Agent.\n   In version 0,\
    \ the Restart Request control message contained a \"reason\n   for restart\" field.\
    \  That field was ignored in all current\n   implementations and has been eliminated\
    \ in version 1.\n   Current implementations expect the WPS to insert an \"incarnation\n\
    \   count\" in bits 5-10 of the first word of both Restart Request and\n   Restart\
    \ Complete messages.  This functionality has been replaced by\n   the \"SL\" bit\
    \ in the Restart Complete message in version 1.\n   Compatibility code will be\
    \ added if needed, but it is expected that\n   none will be needed.\n"
- title: 13. Appendix C -- HAP Protocol ID Assigned Numbers
  contents:
  - "13. Appendix C -- HAP Protocol ID Assigned Numbers\n   This section lists the\
    \ values of the PROTOCOL ID field.  This part of\n   the specification will be\
    \ obsolete when a version of the Assigned\n   Numbers RFC containing HAP protocol\
    \ ID numbers is issued.\n   HAP adopts the Ether-type numbers in the 1500-65535\
    \ range.  Protocol\n   IDs 256-511 identify ISO protocols.  Zero indicates the\
    \ absence of a\n   higher level protocol header.  Other protocol IDs are reserved\
    \ for\n   future assignment.\n             Protocol ID     Indicates\n       \
    \      -----------     ---------\n                  0          No higher level\
    \ protocol\n                  1          For Network Service Agent messages\n\
    \                2-255        Reserved\n               256-511       ISO protocol\
    \ identifier + 256\n               512-1499      Reserved\n              1500-65535\
    \     Identical to Ether-type [10].\n                          HAP PROTOCOL ID\
    \ NUMBERS\n                                 Figure 42\n"
- title: REFERENCES
  contents:
  - "REFERENCES\n    1. Falk, G., Groff, S., Koolish, R., and W. Milliken, \"PSAT\n\
    \       Technical Report\", BBN Technical Report No. 4469, Chapter 4, May\n  \
    \     1981.\n    2. Rees, T., Editor, \"A Host Access Protocol Specification\"\
    , BBN\n       Laboratories, Inc., May 1987.  (A revision of RFC 907 that was\n\
    \       distributed to DARPA and the WBNET user community but not\n       resubmitted\
    \ as an RFC.)\n    3. Postel, J., Editor, \"Internet Protocol - DARPA Internet\
    \ Program\n       Protocol Specification\", RFC 791, USC/Information Sciences\n\
    \       Institute, September 1981.\n    4. Topolcic, C., Editor, \"Experimental\
    \ Internet Stream Protocol,\n       Version 2 (ST-II)\", RFC 1190, Bolt Beranek\
    \ and Newman, Inc.,\n       October 1990.\n    5. Edmond, W., Seo, K., Leib, M.,\
    \ and C. Topolcic, \"The DARPA\n       Wideband Network Dual Bus Protocol\", Proceedings\
    \ of ACM SIGCOMM\n       '90, pages 79-89, September 24-27, 1990.\n    6. \"Host/SATNET\
    \ Protocol\", Internet Engineering Note (IEN) 192, July\n       1981.\n    7.\
    \ Evenchik, L., McNeill, D., Bressler, R., Owen, A., Rice, Jr., R.,\n       Trout,\
    \ G., Pavey, C., Damer, R., Deckelman, F., and T. Hughes,\n       \"MATNET, An\
    \ Experimental Navy Shipboard Satellite Communications\n       Network\", Proceedings\
    \ of INFOCOM '82, pages 3-11, March 30 -\n       April 1, 1982.\n    8. Falk,\
    \ G., Groff, J., Milliken, W., Nodine, M., Blumenthal, S.,\n       and W. Edmond,\
    \ \"Integration of Voice and Data in the Wideband\n       Packet Satellite Network\"\
    , IEEE Journal on Selected Areas in\n       Communications, Vol. SAC-1, No. 6,\
    \ December 1983.\n    9. \"Interface Message Processor: Specifications for the\n\
    \       Interconnection of a Host and an IMP\", BBN Technical Report No.\n   \
    \    1822, October 1980.\n   10. Reynolds, J., and J. Postel, \"Assigned Numbers\"\
    , RFC 1060,\n       USC/Information Sciences Institute, March 1990.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Winston Edmond\n   Bolt Beranek and Newman, Inc.\n   Network\
    \ Technologies Department\n   10 Moulton Street\n   Cambridge, Massachusetts 02138\n\
    \   Phone: (617) 873-3000\n   EMail: wbe@bbn.com\n"
