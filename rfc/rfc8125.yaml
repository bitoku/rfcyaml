- title: __initial_text__
  contents:
  - ''
- title: Internet Research Task Force (IRTF)                           J. Schmidt
  contents:
  - "Internet Research Task Force (IRTF)                           J. Schmidt\n  Requirements\
    \ for Password-Authenticated Key Agreement (PAKE) Schemes\n"
- title: Abstract
  contents:
  - "Abstract\n   Password-Authenticated Key Agreement (PAKE) schemes are interactive\n\
    \   protocols that allow the participants to authenticate each other and\n   derive\
    \ shared cryptographic keys using a (weaker) shared password.\n   This document\
    \ reviews different types of PAKE schemes.  Furthermore,\n   it presents requirements\
    \ and gives recommendations to designers of\n   new schemes.  It is a product\
    \ of the Crypto Forum Research Group\n   (CFRG).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Research Task Force\n   (IRTF).  The IRTF publishes the results\
    \ of Internet-related research\n   and development activities.  These results\
    \ might not be suitable for\n   deployment.  This RFC represents the consensus\
    \ of the Crypto Forum\n   Research Group of the Internet Research Task Force (IRTF).\
    \  Documents\n   approved for publication by the IRSG are not a candidate for\
    \ any\n   level of Internet Standard; see Section 2 of RFC 7841.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8125.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  Requirements Notation . . . . . . . . . . . . . . . .\
    \ . . . .   3\n   3.  PAKE Taxonomy . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   3\n     3.1.  Storage of the Password . . . . . . . . . . . . . . .\
    \ . .   3\n     3.2.  Transmission of Public Keys . . . . . . . . . . . . . .\
    \ .   4\n     3.3.  Two Party versus Multiparty . . . . . . . . . . . . . . .\
    \   4\n   4.  Security of PAKEs . . . . . . . . . . . . . . . . . . . . . .  \
    \ 5\n     4.1.  Implementation Aspects  . . . . . . . . . . . . . . . . .   6\n\
    \     4.2.  Special Case: Elliptic Curves . . . . . . . . . . . . . .   6\n  \
    \ 5.  Protocol Considerations and Applications  . . . . . . . . . .   7\n   6.\
    \  Privacy . . . . . . . . . . . . . . . . . . . . . . . . . . .   7\n   7.  Performance\
    \ . . . . . . . . . . . . . . . . . . . . . . . . .   8\n   8.  Requirements \
    \ . . . . . . . . . . . . . . . . . . . . . . . .   8\n   9.  IANA Considerations\
    \ . . . . . . . . . . . . . . . . . . . . .   9\n   10. Security Considerations\
    \ . . . . . . . . . . . . . . . . . . .   9\n   11. References  . . . . . . .\
    \ . . . . . . . . . . . . . . . . . .   9\n     11.1.  Normative References .\
    \ . . . . . . . . . . . . . . . . .   9\n     11.2.  Informative References .\
    \ . . . . . . . . . . . . . . . .   9\n   Author's Address  . . . . . . . . .\
    \ . . . . . . . . . . . . . . .  10\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Passwords are the predominant method of accessing the Internet\
    \ today\n   due, in large part, to their intuitiveness and ease of use.  Since\
    \ a\n   user needs to enter passwords repeatedly in many connections and\n   applications,\
    \ these passwords tend to be easy to remember and can be\n   entered repeatedly\
    \ with a low probability of error.  They tend to be\n   low-grade and not-so-random\
    \ secrets that are susceptible to brute-\n   force guessing attacks.\n   A Password-Authenticated\
    \ Key Exchange (PAKE) attempts to address this\n   issue by constructing a cryptographic\
    \ key exchange that does not\n   result in the password, or password-derived data,\
    \ being transmitted\n   across an unsecured channel.  Two parties in the exchange\
    \ prove\n   possession of the shared password without revealing it.  Such\n  \
    \ exchanges are therefore resistant to offline, brute-force dictionary\n   attacks.\
    \  The idea was initially described by Bellovin and Merritt in\n   [BM92] and\
    \ has received considerable cryptographic attention since\n   then.  PAKEs are\
    \ especially interesting due to the fact that they can\n   achieve mutual authentication\
    \ without requiring any Public Key\n   Infrastructure (PKI).\n   Different types\
    \ of PAKE schemes are reviewed in this document.  It\n   defines requirements\
    \ for new schemes and gives additional\n   recommendations for designers of PAKE\
    \ schemes.  The specific\n   recommendations are discussed throughout Sections\
    \ 3-7.  Section 8\n   summarizes the requirements.\n   The requirements mentioned\
    \ in this document have been discussed with\n   active members and represent the\
    \ consensus of the Crypto Forum\n   Research Group (CFRG).\n"
- title: 2.  Requirements Notation
  contents:
  - "2.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 3.  PAKE Taxonomy
  contents:
  - "3.  PAKE Taxonomy\n   Broadly speaking, different PAKEs satisfy their goals in\
    \ a number of\n   common ways.  This leads to various design choices: how public\
    \ keys\n   are transmitted (encrypted or not), whether both parties possess the\n\
    \   same representation of the password (balanced versus augmented), and\n   the\
    \ number of parties (two party versus multiparty).\n"
- title: 3.1.  Storage of the Password
  contents:
  - "3.1.  Storage of the Password\n   When both sides of a PAKE store the same representation\
    \ of the\n   password, the PAKE is said to be \"balanced\".  In a balanced PAKE,\
    \ the\n   password can be stored directly in a salted state by hashing it with\n\
    \   a random salt or by representing the credential as an element in a\n   finite\
    \ field (by, for instance, multiplying a generator from a finite\n   field and\
    \ the password represented as a number to produce a \"password\n   element\").\
    \  The benefits of such PAKEs are that they are applicable\n   to situations where\
    \ either party can initiate the exchange or both\n   parties can initiate simultaneously,\
    \ i.e., where they both believe\n   themselves to be the \"initiator\".  This\
    \ sort of PAKE can be useful\n   for mesh networking (see, for example, [DOT11])\
    \ or Internet of Things\n   applications.\n   When one side maintains a transform\
    \ of the password and the other\n   maintains the raw password, the PAKE is said\
    \ to be \"augmented\".\n   Typically, a client will maintain the raw password\
    \ (or some\n   representation of it as in the balanced case), and a server will\n\
    \   maintain a transformed element generated with a one-way function.\n   The\
    \ benefit of an augmented PAKE is that it provides some protection\n   for the\
    \ server's password in a way that is not possible with a\n   balanced PAKE.  In\
    \ particular, an adversary that has successfully\n   obtained the server's PAKE\
    \ credentials cannot directly use them to\n   impersonate the users to other servers.\
    \  The adversary has to learn\n   the individual passwords first, e.g., by performing\
    \ an (offline)\n   dictionary attack.  This sort of PAKE is useful for strict\
    \ client-\n   server protocols such as the one discussed in [RFC5246].\n"
- title: 3.2.  Transmission of Public Keys
  contents:
  - "3.2.  Transmission of Public Keys\n   All known PAKEs use public key cryptography.\
    \  A fundamental\n   difference in PAKEs is how the public key is communicated\
    \ in the\n   exchange.\n   One class of PAKEs uses symmetric key cryptography,\
    \ with a key\n   derived from the password, to encrypt an ephemeral public key.\
    \  The\n   ability of the peer to demonstrate that it has successfully decrypted\n\
    \   the public key proves knowledge of the shared password.  Examples of\n   this\
    \ exchange include the first PAKE, called the \"Encrypted Key\n   Exchange (EKE)\"\
    , which was introduced in [BM92].\n   Another class of PAKEs transmits unencrypted\
    \ public keys, like the\n   J-PAKE (Password Authenticated Key Exchange by Juggling)\
    \ protocol\n   [JPAKE].  During key agreement, ephemeral public keys and values\n\
    \   derived using the shared password are exchanged.  If the passwords\n   match,\
    \ both parties can compute a common secret by combining\n   password, public keys,\
    \ and private keys.  The SPEKE (Strong Password-\n   Only Authenticated Key Exchange)\
    \ [SPEKE] scheme also exchanges public\n   keys, namely Diffie-Hellman values.\
    \  Here, the generator for the\n   public keys is derived from the shared secret.\
    \  Afterwards, only the\n   public Diffie-Hellman values are exchanged; the generator\
    \ is kept\n   secret.  In both cases, the values that are transmitted across the\n\
    \   unsecured medium are elements in a finite field and not a random\n   blob.\n\
    \   A combination of EKE and SPEKE is used in PACE as described in\n   [BFK09],\
    \ which is, e.g., used in international travel documents.  In\n   this method,\
    \ a nonce is encrypted rather than a key.  This nonce is\n   used to generate\
    \ a common base for the key agreement.  Without\n   knowing the password, the\
    \ nonce cannot be determined; hence, the\n   subsequent key agreement will fail.\n"
- title: 3.3.  Two Party versus Multiparty
  contents:
  - "3.3.  Two Party versus Multiparty\n   The majority of PAKE protocols allow two\
    \ parties to agree on a shared\n   key based on a shared password.  Nevertheless,\
    \ there exist proposals\n   that allow key agreement for more than two parties.\
    \  Those protocols\n   allow key establishment for a group of parties and are\
    \ hence called\n   \"Group PAKEs\" or \"GPAKEs\".  Examples of such protocols\
    \ can be found\n   in [ABCP06], while [ACGP11] and [HYCS15] propose a generic\n\
    \   construction that allows the transformation of any two-party PAKE\n   into\
    \ a GPAKE protocol.  Another possibility of defining a multiparty\n   PAKE protocol\
    \ is to assume the existence of a trusted server with\n   which each party shares\
    \ a password.  This server enables different\n   parties to agree on a common\
    \ secret key without the need to share a\n   password among themselves.  Each\
    \ party has only a shared secret with\n   the trusted server.  For example, Abdalla\
    \ et al. designed such a\n   protocol as discussed in [AFP05].\n"
- title: 4.  Security of PAKEs
  contents:
  - "4.  Security of PAKEs\n   PAKE schemes are modeled on the scenario of two parties,\
    \ typically\n   Alice and Bob, who share a password (or perhaps Bob shares a function\n\
    \   of the password) and would like to use it to establish a secure\n   session\
    \ key over an untrusted link.  There is a powerful adversary,\n   typically Eve,\
    \ who would like to subvert the exchange.  Eve has\n   access to a dictionary\
    \ that is likely to contain Alice and Bob's\n   password, and Eve is capable of\
    \ enumerating through the dictionary in\n   a brute-force manner to try and discover\
    \ Alice and Bob's password.\n   All PAKEs have a limitation.  If Eve guesses the\
    \ password, she can\n   subvert the exchange.  It is therefore necessary to model\
    \ the\n   likelihood that Eve will guess the password to access the security of\n\
    \   a PAKE.  If the probability of her discovering the password is a\n   function\
    \ of interaction with the protocol participants and not a\n   function of computation,\
    \ then the PAKE is secure (that is, Eve is\n   unable to take information from\
    \ a passive attack or from a single\n   active attack).  Thus, she cannot enumerate\
    \ through her dictionary\n   without interacting with Alice or Bob for each password\
    \ guess, i.e.,\n   the only attack left is repeated guessing.  Eve learns one\
    \ thing from\n   a single active attack: whether her single guess is correct or\
    \ not.\n   In other words, the security of a PAKE scheme is based on the idea\n\
    \   that Eve, who is trying to impersonate Alice, cannot efficiently\n   verify\
    \ a password guess without interacting with Bob (or Alice).  If\n   she were to\
    \ interact with either, she would thereby be detected.\n   Thus, it is important\
    \ to balance restricting the number of allowed\n   authentication attempts with\
    \ the potential of a denial-of-service\n   vulnerability.  In order to judge and\
    \ compare the security of PAKE\n   schemes, security proofs in commonly accepted\
    \ models SHOULD be used.\n   Each proof and model, however, is based on assumptions.\
    \  Often,\n   security proofs show that if an adversary is able to break the\n\
    \   scheme, the adversary is also able to solve a problem that is assumed\n  \
    \ to be hard, such as computing a discrete logarithm.  By conversion,\n   breaking\
    \ the scheme is considered to be a hard problem as well.\n   A PAKE scheme SHOULD\
    \ be accompanied with a security proof with\n   clearly stated assumptions and\
    \ models used.  In particular, the proof\n   MUST show that the probability is\
    \ negligible that an active adversary\n   would be able to pass authentication,\
    \ learn additional information\n   about the password, or learn anything about\
    \ the established key.\n   Moreover, the authors MAY specify which underlying\
    \ primitives are to\n   be used with the scheme or MAY consider specific use cases\
    \ or\n   assumptions like resistance to quantum computers.  A clear and\n   comprehensive\
    \ proof is the foundation for users to trust in the\n   security of the scheme.\n"
- title: 4.1.  Implementation Aspects
  contents:
  - "4.1.  Implementation Aspects\n   Aside from the theoretical security of a scheme,\
    \ practical\n   implementation pitfalls have to be considered as well.  If not\n\
    \   carefully implemented, even a scheme that is secure in a well-defined\n  \
    \ mathematical model can leak information via side channels.  The\n   design of\
    \ the scheme might allow or prevent easy protection against\n   information leakage.\
    \  In a network scenario, an adversary can measure\n   the time that the computation\
    \ of an answer takes and derive\n   information about secret parameters of the\
    \ scheme.  If a device\n   operates in a potentially hostile environment, such\
    \ as a smart card,\n   other side channels like power consumption and electromagnetic\n\
    \   emanations or even active implementation attacks have to be taken\n   into\
    \ account as well.\n   The developers of a scheme SHOULD keep the implementation\
    \ aspects in\n   mind and show how to implement the protocol in constant time.\n\
    \   Furthermore, adding a discussion about how to protect implementations\n  \
    \ of the scheme in potential hostile environments is encouraged.\n"
- title: '4.2.  Special Case: Elliptic Curves'
  contents:
  - "4.2.  Special Case: Elliptic Curves\n   Since Elliptic Curve Cryptography (ECC)\
    \ allows for a smaller key\n   length compared to traditional schemes based on\
    \ the discrete\n   logarithm problem in finite fields at similar security levels,\
    \ using\n   ECC for PAKE schemes is also of interest.  In contrast to schemes\n\
    \   that can use the finite field element directly, an additional\n   challenge\
    \ has to be considered for some schemes based on ECC, namely\n   the mapping of\
    \ a random string to an element that can be computed\n   with, i.e., a point on\
    \ the curve.  In some cases, the opposite is\n   also needed, i.e., the mapping\
    \ of a curve point to a string that is\n   not distinguishable from a random one.\
    \  When choosing a mapping, it\n   is crucial to consider the implementation aspects\
    \ as well.\n   If the PAKE scheme is intended to be used with ECC, the authors\n\
    \   SHOULD state whether there is a mapping function needed and, if so,\n   discuss\
    \ its requirements.  Alternatively, the authors MAY define a\n   mapping to be\
    \ used with the scheme.\n"
- title: 5.  Protocol Considerations and Applications
  contents:
  - "5.  Protocol Considerations and Applications\n   In most cases, the PAKE scheme\
    \ is a building block in a more complex\n   protocol like IPsec or Transport Layer\
    \ Security (TLS).  This can\n   influence the choice of a suitable PAKE scheme.\
    \  For example, an\n   augmented scheme can be beneficial for protocols that have\
    \ a strict\n   server-client relationship.  If both parties can initiate a\n \
    \  connection of a protocol, a balanced PAKE might be more appropriate.\n   A\
    \ special variation of the network password problem, called\n   \"Password-Authenticated\
    \ Key Distribution\", is defined in [P1363] as\n   password-authenticated key\
    \ retrieval: \"The retrieval of a key from a\n   secure key repository or escrow\
    \ requiring authentication derived in\n   part from a password.\"\n   In addition\
    \ to key retrieval from escrow, there is also the variant\n   of two parties exchanging\
    \ public keys using a PAKE in lieu of\n   certificates.  In this variant, public\
    \ keys can be encrypted using a\n   password.  Authentication key distribution\
    \ can be performed because\n   each side knows the private key associated with\
    \ its unencrypted\n   public key and can also decrypt the peer's public key. \
    \ This\n   technique can be used to transform a short, one-time code into a\n\
    \   long-term public key.\n   Another possible variant of a PAKE scheme allows\
    \ combining\n   authentication with certificates and the use of passwords.  In\
    \ this\n   variant, the private key of the certificate is used to blind the\n\
    \   password key agreement.  For verification, the message is unblinded\n   with\
    \ the public key.  A correct key establishment therefore implies\n   the possession\
    \ of the private key belonging to the certificate.  This\n   method enables one-sided\
    \ authentication as well as mutual\n   authentication when the password is used.\n\
    \   The authors of a PAKE scheme MAY discuss variations of their scheme\n   and\
    \ explain application scenarios where these variations are\n   beneficial.  In\
    \ particular, techniques that allow long-term (public)\n   key agreement are encouraged.\n"
- title: 6.  Privacy
  contents:
  - "6.  Privacy\n   In order to establish a connection, each party of the PAKE protocol\n\
    \   needs to know the identity of its communication partner to identify\n   the\
    \ right password for the agreement.  In cases where a user wants to\n   establish\
    \ a secure channel with a server, the user first has to let\n   the server know\
    \ which password to use by sending some kind of\n   identifier to the server.\
    \  If this identifier is not protected,\n   everyone who is able to eavesdrop\
    \ on the connection can identify the\n   user.  In order to prevent this and protect\
    \ the privacy of the user,\n   the scheme might provide a way to protect the transmission\
    \ of the\n   user's identity.  A simple way to protect the privacy of a user that\n\
    \   communicates with a server is to use a public key provided by the\n   server\
    \ to encrypt the user's identity.\n   The PAKE scheme MAY discuss special ideas\
    \ and solutions about how to\n   protect the privacy of the users of the scheme.\n"
- title: 7.  Performance
  contents:
  - "7.  Performance\n   The performance of a scheme can be judged along different\
    \ lines\n   depending on the optimization goals of the target application.\n \
    \  Potential metrics include latency, code size/area, power consumption,\n   or\
    \ exchanged messages.  In addition, there might be application\n   scenarios in\
    \ which a constrained client communicates with a powerful\n   server.  In such\
    \ a case, the scheme has to require minimal efforts on\n   the client side.  Note\
    \ that for some clients, the computations might\n   even be carried out in a hardware\
    \ implementation, which requires\n   different optimizations compared to software.\n\
    \   Furthermore, the design of the scheme can influence the cost of\n   protecting\
    \ the implementation from adversaries exploiting its\n   physical properties (see\
    \ Section 4.1).\n   The authors of a PAKE scheme MAY discuss their design choices\
    \ and the\n   influence of these choices on the performance.  In particular, the\n\
    \   optimization goals could be stated.\n"
- title: 8.  Requirements
  contents:
  - "8.  Requirements\n   This section summarizes the requirements for PAKE schemes\
    \ to be\n   compliant with this document based on the previously discussed\n \
    \  properties.\n   REQ1:  A PAKE scheme MUST clearly state its features regarding\n\
    \          balanced/augmented versions.\n   REQ2:  A PAKE scheme SHOULD come with\
    \ a security proof and clearly\n          state its assumptions and models.\n\
    \   REQ3:  The authors SHOULD show how to protect their PAKE scheme\n        \
    \  implementation in hostile environments, particularly, how to\n          implement\
    \ their scheme in constant time to prevent timing\n          attacks.\n   REQ4:\
    \  If the PAKE scheme is intended to be used with ECC, the\n          authors\
    \ SHOULD discuss their requirements for a potential\n          mapping or define\
    \ a mapping to be used with the scheme.\n   REQ5:  The authors of a PAKE scheme\
    \ MAY discuss its design choice\n          with regard to performance, i.e., its\
    \ optimization goals.\n   REQ6:  The authors of a scheme MAY discuss variations\
    \ of their scheme\n          that allow the use in special application scenarios.\
    \  In\n          particular, techniques that facilitate long-term (public) key\n\
    \          agreement are encouraged.\n   REQ7:  Authors of a scheme MAY discuss\
    \ special ideas and solutions on\n          privacy protection of its users.\n\
    \   REQ8:  The authors MUST follow the IRTF IPR policy\n          <https://irtf.org/ipr>.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   This document does not require any IANA actions.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   This document analyzes requirements for a cryptographic\
    \ scheme.\n   Security considerations are discussed throughout the document.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [ABCP06]   Abdalla, M., Bresson, E., Chevassut,\
    \ O., and D.\n              Pointcheval, \"Password-Based Group Key Exchange in\
    \ a\n              Constant Number of Rounds\", PKC 2006, LNCS 3958,\n       \
    \       DOI 10.1007/11745853_28, 2006.\n   [ACGP11]   Abdalla, M., Chevalier,\
    \ C., Granboulan, L., and D.\n              Pointcheval, \"Contributory Password-Authenticated\
    \ Group\n              Key Exchange with Join Capability\", CT-RSA 2011,\n   \
    \           LNCS 6558, DOI 10.1007/978-3-642-19074-2_11, 2011.\n   [AFP05]   \
    \ Abdalla, M., Fouque, P., and D. Pointcheval, \"Password-\n              Based\
    \ Authenticated Key Exchange in the Three-Party\n              Setting\", PKC\
    \ 2005, LNCS 3386,\n              DOI 10.1007/978-3-540-30580-4_6, 2005.\n   [BFK09]\
    \    Bender, J., Fischlin, M., and D. Kuegler, \"Security\n              Analysis\
    \ of the PACE Key-Agreement Protocol\", ISC 2009,\n              LNCS 5735, DOI\
    \ 10.1007/978-3-642-04474-8_3, 2009.\n   [BM92]     Bellovin, S. and M. Merritt,\
    \ \"Encrypted Key Exchange:\n              Password-Based Protocols Secure against\
    \ Dictionary\n              Attacks\", Proc. of the Symposium on Security and\n\
    \              Privacy, Oakland, DOI 10.1109/RISP.1992.213269, 1992.\n   [DOT11]\
    \    IEEE, \"IEEE Standard for Information technology--\n              Telecommunications\
    \ and information exchange between\n              systems Local and metropolitan\
    \ area networks--Specific\n              requirements - Part 11: Wireless LAN\
    \ Medium Access Control\n              (MAC) and Physical Layer (PHY) Specifications\"\
    ,\n              IEEE 802.11, DOI 10.1109/IEEESTD.2016.7786995.\n   [HYCS15] \
    \  Hao, F., Yi, X., Chen, L., and S. Shahandashti, \"The\n              Fairy-Ring\
    \ Dance: Password Authenticated Key Exchange in a\n              Group\", IoTPTS\
    \ 2015, DOI 10.1145/2732209.2732212, 2015.\n   [JPAKE]    Hao, F. and P. Ryan,\
    \ \"Password Authenticated Key Exchange\n              by Juggling\", SP 2008,\
    \ LNCS 6615,\n              DOI 10.1007/978-3-642-22137-8_23, 2008.\n   [P1363]\
    \    IEEE Microprocessor Standards Committee, \"Draft Standard\n             \
    \ Specifications for Password-Based Public Key Cryptographic\n              Techniques\"\
    , IEEE P1363.2, 2006.\n   [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport\
    \ Layer Security\n              (TLS) Protocol Version 1.2\", RFC 5246,\n    \
    \          DOI 10.17487/RFC5246, August 2008,\n              <http://www.rfc-editor.org/info/rfc5246>.\n\
    \   [SPEKE]    Jablon, D., \"Strong Password-Only Authenticated Key\n        \
    \      Exchange\", ACM SIGCOMM Computer Communications\n              Review,\
    \ Volume 26, Issue 5, DOI 10.1145/242896.242897,\n              October 1996.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Joern-Marc Schmidt\n   secunet Security Networks\n   Mergenthaler\
    \ Allee 77\n   65760 Eschborn\n   Germany\n   Email: joern-marc.schmidt@secunet.com\n"
