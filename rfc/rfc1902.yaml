- title: __initial_text__
  contents:
  - "                  Structure of Management Information\n                     \
    \     for Version 2 of the\n              Simple Network Management Protocol (SNMPv2)\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   A management system contains:  several (potentially many)\
    \ nodes, each\n   with a processing entity, termed an agent, which has access\
    \ to\n   management instrumentation; at least one management station; and, a\n\
    \   management protocol, used to convey management information between\n   the\
    \ agents and management stations.  Operations of the protocol are\n   carried\
    \ out under an administrative framework which defines\n   authentication, authorization,\
    \ access control, and privacy policies.\n   Management stations execute management\
    \ applications which monitor and\n   control managed elements.  Managed elements\
    \ are devices such as\n   hosts, routers, terminal servers, etc., which are monitored\
    \ and\n   controlled via access to their management information.\n   Management\
    \ information is viewed as a collection of managed objects,\n   residing in a\
    \ virtual information store, termed the Management\n   Information Base (MIB).\
    \  Collections of related objects are defined\n   in MIB modules.  These modules\
    \ are written using an adapted subset of\n   OSI's Abstract Syntax Notation One\
    \ (ASN.1) [1].  It is the purpose of\n   this document, the Structure of Management\
    \ Information (SMI), to\n   define that adapted subset, and to assign a set of\
    \ associated\n   administrative values.\n   The SMI is divided into three parts:\
    \  module definitions, object\n   definitions, and, notification definitions.\n"
- title: (1)  Module definitions are used when describing information modules.
  contents:
  - "(1)  Module definitions are used when describing information modules.\n     An\
    \ ASN.1 macro, MODULE-IDENTITY, is used to concisely convey the\n     semantics\
    \ of an information module.\n"
- title: (2)  Object definitions are used when describing managed objects.  An
  contents:
  - "(2)  Object definitions are used when describing managed objects.  An\n     ASN.1\
    \ macro, OBJECT-TYPE, is used to concisely convey the syntax\n     and semantics\
    \ of a managed object.\n"
- title: (3)  Notification definitions are used when describing unsolicited
  contents:
  - "(3)  Notification definitions are used when describing unsolicited\n     transmissions\
    \ of management information.  An ASN.1 macro,\n     NOTIFICATION-TYPE, is used\
    \ to concisely convey the syntax and\n     semantics of a notification.\n"
- title: 1.1.  A Note on Terminology
  contents:
  - "1.1.  A Note on Terminology\n   For the purpose of exposition, the original Internet-standard\
    \ Network\n   Management Framework, as described in RFCs 1155 (STD 16), 1157 (STD\n\
    \   15), and 1212 (STD 16), is termed the SNMP version 1 framework\n   (SNMPv1).\
    \  The current framework is termed the SNMP version 2\n   framework (SNMPv2).\n"
- title: 2.  Definitions
  contents:
  - '2.  Definitions

    '
- title: SNMPv2-SMI DEFINITIONS ::= BEGIN
  contents:
  - 'SNMPv2-SMI DEFINITIONS ::= BEGIN

    '
- title: -- the path to the root
  contents:
  - '-- the path to the root

    '
- title: org            OBJECT IDENTIFIER ::= { iso 3 }
  contents:
  - 'org            OBJECT IDENTIFIER ::= { iso 3 }

    '
- title: dod            OBJECT IDENTIFIER ::= { org 6 }
  contents:
  - 'dod            OBJECT IDENTIFIER ::= { org 6 }

    '
- title: internet       OBJECT IDENTIFIER ::= { dod 1 }
  contents:
  - 'internet       OBJECT IDENTIFIER ::= { dod 1 }

    '
- title: directory      OBJECT IDENTIFIER ::= { internet 1 }
  contents:
  - 'directory      OBJECT IDENTIFIER ::= { internet 1 }

    '
- title: mgmt           OBJECT IDENTIFIER ::= { internet 2 }
  contents:
  - 'mgmt           OBJECT IDENTIFIER ::= { internet 2 }

    '
- title: mib-2          OBJECT IDENTIFIER ::= { mgmt 1 }
  contents:
  - 'mib-2          OBJECT IDENTIFIER ::= { mgmt 1 }

    '
- title: transmission   OBJECT IDENTIFIER ::= { mib-2 10 }
  contents:
  - 'transmission   OBJECT IDENTIFIER ::= { mib-2 10 }

    '
- title: experimental   OBJECT IDENTIFIER ::= { internet 3 }
  contents:
  - 'experimental   OBJECT IDENTIFIER ::= { internet 3 }

    '
- title: private        OBJECT IDENTIFIER ::= { internet 4 }
  contents:
  - 'private        OBJECT IDENTIFIER ::= { internet 4 }

    '
- title: enterprises    OBJECT IDENTIFIER ::= { private 1 }
  contents:
  - 'enterprises    OBJECT IDENTIFIER ::= { private 1 }

    '
- title: security       OBJECT IDENTIFIER ::= { internet 5 }
  contents:
  - 'security       OBJECT IDENTIFIER ::= { internet 5 }

    '
- title: snmpV2         OBJECT IDENTIFIER ::= { internet 6 }
  contents:
  - 'snmpV2         OBJECT IDENTIFIER ::= { internet 6 }

    '
- title: -- transport domains
  contents:
  - '-- transport domains

    '
- title: snmpDomains    OBJECT IDENTIFIER ::= { snmpV2 1 }
  contents:
  - 'snmpDomains    OBJECT IDENTIFIER ::= { snmpV2 1 }

    '
- title: -- transport proxies
  contents:
  - '-- transport proxies

    '
- title: snmpProxys     OBJECT IDENTIFIER ::= { snmpV2 2 }
  contents:
  - 'snmpProxys     OBJECT IDENTIFIER ::= { snmpV2 2 }

    '
- title: -- module identities
  contents:
  - '-- module identities

    '
- title: snmpModules    OBJECT IDENTIFIER ::= { snmpV2 3 }
  contents:
  - 'snmpModules    OBJECT IDENTIFIER ::= { snmpV2 3 }

    '
- title: -- definitions for information modules
  contents:
  - '-- definitions for information modules

    '
- title: MODULE-IDENTITY MACRO ::=
  contents:
  - 'MODULE-IDENTITY MACRO ::=

    '
- title: BEGIN
  contents:
  - "BEGIN\n    TYPE NOTATION ::=\n                  \"LAST-UPDATED\" value(Update\
    \ UTCTime)\n                  \"ORGANIZATION\" Text\n                  \"CONTACT-INFO\"\
    \ Text\n                  \"DESCRIPTION\" Text\n                  RevisionPart\n\
    \    VALUE NOTATION ::=\n                  value(VALUE OBJECT IDENTIFIER)\n  \
    \  RevisionPart ::=\n                  Revisions\n                | empty\n  \
    \  Revisions ::=\n                  Revision\n                | Revisions Revision\n\
    \    Revision ::=\n                  \"REVISION\" value(Update UTCTime)\n    \
    \              \"DESCRIPTION\" Text\n    -- uses the NVT ASCII character set\n\
    \    Text ::= \"\"\"\" string \"\"\"\"\n"
- title: END
  contents:
  - 'END

    '
- title: OBJECT-IDENTITY MACRO ::=
  contents:
  - 'OBJECT-IDENTITY MACRO ::=

    '
- title: BEGIN
  contents:
  - "BEGIN\n    TYPE NOTATION ::=\n                  \"STATUS\" Status\n         \
    \         \"DESCRIPTION\" Text\n                  ReferPart\n    VALUE NOTATION\
    \ ::=\n                  value(VALUE OBJECT IDENTIFIER)\n    Status ::=\n    \
    \              \"current\"\n                | \"deprecated\"\n               \
    \ | \"obsolete\"\n    ReferPart ::=\n                \"REFERENCE\" Text\n    \
    \          | empty\n    Text ::= \"\"\"\" string \"\"\"\"\n"
- title: END
  contents:
  - 'END

    '
- title: -- names of objects
  contents:
  - '-- names of objects

    '
- title: ObjectName ::=
  contents:
  - "ObjectName ::=\n    OBJECT IDENTIFIER\n"
- title: NotificationName ::=
  contents:
  - "NotificationName ::=\n    OBJECT IDENTIFIER\n"
- title: -- syntax of objects
  contents:
  - '-- syntax of objects

    '
- title: ObjectSyntax ::=
  contents:
  - "ObjectSyntax ::=\n    CHOICE {\n        simple\n            SimpleSyntax,\n \
    \         -- note that SEQUENCEs for conceptual tables and\n          -- rows\
    \ are not mentioned here...\n        application-wide\n            ApplicationSyntax\n\
    \    }\n"
- title: -- built-in ASN.1 types
  contents:
  - '-- built-in ASN.1 types

    '
- title: SimpleSyntax ::=
  contents:
  - "SimpleSyntax ::=\n    CHOICE {\n        -- INTEGERs with a more restrictive range\n\
    \        -- may also be used\n        integer-value               -- includes\
    \ Integer32\n            INTEGER (-2147483648..2147483647),\n        -- OCTET\
    \ STRINGs with a more restrictive size\n        -- may also be used\n        string-value\n\
    \            OCTET STRING (SIZE (0..65535)),\n        objectID-value\n       \
    \     OBJECT IDENTIFIER\n    }\n"
- title: -- indistinguishable from INTEGER, but never needs more than
  contents:
  - '-- indistinguishable from INTEGER, but never needs more than

    '
- title: -- 32-bits for a two's complement representation
  contents:
  - '-- 32-bits for a two''s complement representation

    '
- title: Integer32 ::=
  contents:
  - "Integer32 ::=\n    [UNIVERSAL 2]\n        IMPLICIT INTEGER (-2147483648..2147483647)\n"
- title: -- application-wide types
  contents:
  - '-- application-wide types

    '
- title: ApplicationSyntax ::=
  contents:
  - "ApplicationSyntax ::=\n    CHOICE {\n        ipAddress-value\n            IpAddress,\n\
    \        counter-value\n            Counter32,\n        timeticks-value\n    \
    \        TimeTicks,\n        arbitrary-value\n            Opaque,\n        big-counter-value\n\
    \            Counter64,\n        unsigned-integer-value  -- includes Gauge32\n\
    \            Unsigned32\n    }\n"
- title: -- in network-byte order
  contents:
  - '-- in network-byte order

    '
- title: -- (this is a tagged type for historical reasons)
  contents:
  - '-- (this is a tagged type for historical reasons)

    '
- title: IpAddress ::=
  contents:
  - "IpAddress ::=\n    [APPLICATION 0]\n        IMPLICIT OCTET STRING (SIZE (4))\n"
- title: -- this wraps
  contents:
  - '-- this wraps

    '
- title: Counter32 ::=
  contents:
  - "Counter32 ::=\n    [APPLICATION 1]\n        IMPLICIT INTEGER (0..4294967295)\n"
- title: -- this doesn't wrap
  contents:
  - '-- this doesn''t wrap

    '
- title: Gauge32 ::=
  contents:
  - "Gauge32 ::=\n    [APPLICATION 2]\n        IMPLICIT INTEGER (0..4294967295)\n"
- title: -- an unsigned 32-bit quantity
  contents:
  - '-- an unsigned 32-bit quantity

    '
- title: -- indistinguishable from Gauge32
  contents:
  - '-- indistinguishable from Gauge32

    '
- title: Unsigned32 ::=
  contents:
  - "Unsigned32 ::=\n    [APPLICATION 2]\n        IMPLICIT INTEGER (0..4294967295)\n"
- title: -- hundredths of seconds since an epoch
  contents:
  - '-- hundredths of seconds since an epoch

    '
- title: TimeTicks ::=
  contents:
  - "TimeTicks ::=\n    [APPLICATION 3]\n        IMPLICIT INTEGER (0..4294967295)\n"
- title: -- for backward-compatibility only
  contents:
  - '-- for backward-compatibility only

    '
- title: Opaque ::=
  contents:
  - "Opaque ::=\n    [APPLICATION 4]\n        IMPLICIT OCTET STRING\n"
- title: -- for counters that wrap in less than one hour with only 32 bits
  contents:
  - '-- for counters that wrap in less than one hour with only 32 bits

    '
- title: Counter64 ::=
  contents:
  - "Counter64 ::=\n    [APPLICATION 6]\n        IMPLICIT INTEGER (0..18446744073709551615)\n"
- title: -- definition for objects
  contents:
  - '-- definition for objects

    '
- title: OBJECT-TYPE MACRO ::=
  contents:
  - 'OBJECT-TYPE MACRO ::=

    '
- title: BEGIN
  contents:
  - "BEGIN\n    TYPE NOTATION ::=\n                  \"SYNTAX\" Syntax\n         \
    \         UnitsPart\n                  \"MAX-ACCESS\" Access\n               \
    \   \"STATUS\" Status\n                  \"DESCRIPTION\" Text\n              \
    \    ReferPart\n                  IndexPart\n                  DefValPart\n  \
    \  VALUE NOTATION ::=\n                  value(VALUE ObjectName)\n    Syntax ::=\n\
    \                  type(ObjectSyntax)\n                | \"BITS\" \"{\" Kibbles\
    \ \"}\"\n    Kibbles ::=\n                  Kibble\n                | Kibbles\
    \ \",\" Kibble\n    Kibble ::=\n                 identifier \"(\" nonNegativeNumber\
    \ \")\"\n    UnitsPart ::=\n                  \"UNITS\" Text\n               \
    \ | empty\n    Access ::=\n                  \"not-accessible\"\n            \
    \    | \"accessible-for-notify\"\n                | \"read-only\"\n          \
    \      | \"read-write\"\n                | \"read-create\"\n    Status ::=\n \
    \                 \"current\"\n                | \"deprecated\"\n            \
    \    | \"obsolete\"\n    ReferPart ::=\n                  \"REFERENCE\" Text\n\
    \                | empty\n    IndexPart ::=\n                  \"INDEX\"    \"\
    {\" IndexTypes \"}\"\n                | \"AUGMENTS\" \"{\" Entry      \"}\"\n\
    \                | empty\n    IndexTypes ::=\n                  IndexType\n  \
    \              | IndexTypes \",\" IndexType\n    IndexType ::=\n             \
    \     \"IMPLIED\" Index\n                | Index\n    Index ::=\n            \
    \        -- use the SYNTAX value of the\n                    -- correspondent\
    \ OBJECT-TYPE invocation\n                  value(Indexobject ObjectName)\n  \
    \  Entry ::=\n                    -- use the INDEX value of the\n            \
    \        -- correspondent OBJECT-TYPE invocation\n                  value(Entryobject\
    \ ObjectName)\n    DefValPart ::=\n                  \"DEFVAL\" \"{\" value(Defval\
    \ Syntax) \"}\"\n                | empty\n    -- uses the NVT ASCII character\
    \ set\n    Text ::= \"\"\"\" string \"\"\"\"\n"
- title: END
  contents:
  - 'END

    '
- title: -- definitions for notifications
  contents:
  - '-- definitions for notifications

    '
- title: NOTIFICATION-TYPE MACRO ::=
  contents:
  - 'NOTIFICATION-TYPE MACRO ::=

    '
- title: BEGIN
  contents:
  - "BEGIN\n    TYPE NOTATION ::=\n                  ObjectsPart\n               \
    \   \"STATUS\" Status\n                  \"DESCRIPTION\" Text\n              \
    \    ReferPart\n    VALUE NOTATION ::=\n                  value(VALUE NotificationName)\n\
    \    ObjectsPart ::=\n                  \"OBJECTS\" \"{\" Objects \"}\"\n    \
    \            | empty\n    Objects ::=\n                  Object\n            \
    \    | Objects \",\" Object\n    Object ::=\n                  value(Name ObjectName)\n\
    \    Status ::=\n                  \"current\"\n                | \"deprecated\"\
    \n                | \"obsolete\"\n    ReferPart ::=\n                \"REFERENCE\"\
    \ Text\n              | empty\n    -- uses the NVT ASCII character set\n    Text\
    \ ::= \"\"\"\" string \"\"\"\"\n"
- title: END
  contents:
  - 'END

    '
- title: -- definitions of administrative identifiers
  contents:
  - '-- definitions of administrative identifiers

    '
- title: zeroDotZero    OBJECT-IDENTITY
  contents:
  - "zeroDotZero    OBJECT-IDENTITY\n    STATUS     current\n    DESCRIPTION\n   \
    \         \"A value used for null identifiers.\"\n    ::= { 0 0 }\n"
- title: END
  contents:
  - 'END

    '
- title: 3.  Information Modules
  contents:
  - "3.  Information Modules\n   An \"information module\" is an ASN.1 module defining\
    \ information\n   relating to network management.\n   The SMI describes how to\
    \ use a subset of ASN.1 to define an\n   information module.  Further, additional\
    \ restrictions are placed on\n   \"standard\" information modules.  It is strongly\
    \ recommended that\n   \"enterprise-specific\" information modules also adhere\
    \ to these\n   restrictions.\n   Typically, there are three kinds of information\
    \ modules:\n"
- title: (1)  MIB modules, which contain definitions of inter-related managed
  contents:
  - "(1)  MIB modules, which contain definitions of inter-related managed\n     objects,\
    \ make use of the OBJECT-TYPE and NOTIFICATION-TYPE macros;\n"
- title: (2)  compliance statements for MIB modules, which make use of the
  contents:
  - "(2)  compliance statements for MIB modules, which make use of the\n     MODULE-COMPLIANCE\
    \ and OBJECT-GROUP macros [2]; and,\n"
- title: (3)  capability statements for agent implementations which make use of
  contents:
  - "(3)  capability statements for agent implementations which make use of\n    \
    \ the AGENT-CAPABILITIES macros [2].\n   This classification scheme does not imply\
    \ a rigid taxonomy.  For\n   example, a \"standard\" information module will normally\
    \ include\n   definitions of managed objects and a compliance statement.\n   Similarly,\
    \ an \"enterprise-specific\" information module might include\n   definitions\
    \ of managed objects and a capability statement.  Of\n   course, a \"standard\"\
    \ information module may not contain capability\n   statements.\n   The constructs\
    \ of ASN.1 allowed in SNMPv2 information modules\n   include: the IMPORTS clause,\
    \ value definitions for OBJECT\n   IDENTIFIERs, type definitions for SEQUENCEs\
    \ (with restrictions),\n   ASN.1 type assignments of the restricted ASN.1 types\
    \ allowed in\n   SNMPv2, and instances of ASN.1 macros defined in this document\
    \ and in\n   other documents [2, 3] of the SNMPv2 framework.  Additional ASN.1\n\
    \   macros may not be defined in SNMPv2 information modules.\n   The names of\
    \ all standard information modules must be unique (but\n   different versions\
    \ of the same information module should have the\n   same name).  Developers of\
    \ enterprise information modules are\n   encouraged to choose names for their\
    \ information modules that will\n   have a low probability of colliding with standard\
    \ or other enterprise\n   information modules. An information module may not use\
    \ the ASN.1\n   construct of placing an object identifier value between the module\n\
    \   name and the \"DEFINITIONS\" keyword.\n   All information modules start with\
    \ exactly one invocation of the\n   MODULE-IDENTITY macro, which provides contact\
    \ information as well as\n   revision history to distinguish between versions\
    \ of the same\n   information module.  This invocation must appear immediately\
    \ after\n   any IMPORTs statements.\n"
- title: 3.1.  Macro Invocation
  contents:
  - "3.1.  Macro Invocation\n   Within an information module, each macro invocation\
    \ appears as:\n     <descriptor> <macro> <clauses> ::= <value>\n   where <descriptor>\
    \ corresponds to an ASN.1 identifier, <macro> names\n   the macro being invoked,\
    \ and <clauses> and <value> depend on the\n   definition of the macro.  (Note\
    \ that this definition of a descriptor\n   applies to all macros defined in this\
    \ memo and in [2].)\n   For the purposes of this specification, an ASN.1 identifier\
    \ consists\n   of one or more letters or digits, and its initial character must\
    \ be a\n   lower-case letter.  (Note that hyphens are not allowed by this\n  \
    \ specification, even though hyphen is allowed by [1].  This\n   restriction enables\
    \ arithmetic expressions in languages which use the\n   minus sign to reference\
    \ these descriptors without ambiguity.)\n   For all descriptors appearing in an\
    \ information module, the\n   descriptor shall be unique and mnemonic, and shall\
    \ not exceed 64\n   characters in length.  (However, descriptors longer than 32\n\
    \   characters are not recommended.)  This promotes a common language for\n  \
    \ humans to use when discussing the information module and also\n   facilitates\
    \ simple table mappings for user-interfaces.\n   The set of descriptors defined\
    \ in all \"standard\" information modules\n   shall be unique.\n   Finally, by\
    \ convention, if the descriptor refers to an object with a\n   SYNTAX clause value\
    \ of either Counter32 or Counter64, then the\n   descriptor used for the object\
    \ should denote plurality.\n"
- title: 3.1.1.  Textual Clauses
  contents:
  - "3.1.1.  Textual Clauses\n   Some clauses in a macro invocation may take a textual\
    \ value (e.g.,\n   the DESCRIPTION clause).  Note that, in order to conform to\
    \ the ASN.1\n   syntax, the entire value of these clauses must be enclosed in\
    \ double\n   quotation marks, and therefore cannot itself contain double quotation\n\
    \   marks, although the value may be multi-line.\n"
- title: 3.2.  IMPORTing Symbols
  contents:
  - "3.2.  IMPORTing Symbols\n   To reference an external object, the IMPORTS statement\
    \ must be used\n   to identify both the descriptor and the module in which the\n\
    \   descriptor is defined, where the module is identified by its ASN.1\n   module\
    \ name.\n   Note that when symbols from \"enterprise-specific\" information modules\n\
    \   are referenced  (e.g., a descriptor), there is the possibility of\n   collision.\
    \  As such, if different objects with the same descriptor\n   are IMPORTed, then\
    \ this ambiguity is resolved by prefixing the\n   descriptor with the name of\
    \ the information module and a dot (\".\"),\n   i.e.,\n     \"module.descriptor\"\
    \n   (All descriptors must be unique within any information module.)\n   Of course,\
    \ this notation can be used even when there is no collision\n   when IMPORTing\
    \ symbols.\n   Finally, the IMPORTS statement may not be used to import an ASN.1\n\
    \   named type which corresponds to either the SEQUENCE or SEQUENCE OF\n   type.\n"
- title: 3.3.  Exporting Symbols
  contents:
  - "3.3.  Exporting Symbols\n   The ASN.1 EXPORTS statement is not allowed in SNMPv2\
    \ information\n   modules.  All items defined in an information module are\n \
    \  automatically exported.\n"
- title: 3.4.  ASN.1 Comments
  contents:
  - "3.4.  ASN.1 Comments\n   Comments in ASN.1 commence with a pair of adjacent hyphens\
    \ and end\n   with the next pair of adjacent hyphens or at the end of the line,\n\
    \   whichever occurs first.\n"
- title: 3.5.  OBJECT IDENTIFIER values
  contents:
  - "3.5.  OBJECT IDENTIFIER values\n   An OBJECT IDENTIFIER value is an ordered list\
    \ of non-negative\n   numbers.  For the SNMPv2 framework, each number in the list\
    \ is\n   referred to as a sub-identifier, there are at most 128 sub-\n   identifiers\
    \ in a value, and each sub-identifier has a maximum value\n   of 2^32-1 (4294967295\
    \ decimal).  All OBJECT IDENTIFIER values have at\n   least two sub-identifiers,\
    \ where the value of the first sub-\n   identifier is one of the following well-known\
    \ names:\n     Value   Name\n       0     ccitt\n       1     iso\n       2  \
    \   joint-iso-ccitt\n"
- title: 4.  Naming Hierarchy
  contents:
  - "4.  Naming Hierarchy\n   The root of the subtree administered by the Internet\
    \ Assigned Numbers\n   Authority (IANA) for the Internet is:\n     internet  \
    \     OBJECT IDENTIFIER ::= { iso 3 6 1 }\n   That is, the Internet subtree of\
    \ OBJECT IDENTIFIERs starts with the\n   prefix:\n     1.3.6.1.\n   Several branches\
    \ underneath this subtree are used for network\n   management:\n     mgmt    \
    \       OBJECT IDENTIFIER ::= { internet 2 }\n     experimental   OBJECT IDENTIFIER\
    \ ::= { internet 3 }\n     private        OBJECT IDENTIFIER ::= { internet 4 }\n\
    \     enterprises    OBJECT IDENTIFIER ::= { private 1 }\n   However, the SMI\
    \ does not prohibit the definition of objects in other\n   portions of the object\
    \ tree.\n   The mgmt(2) subtree is used to identify \"standard\" objects.\n  \
    \ The experimental(3) subtree is used to identify objects being\n   designed by\
    \ working groups of the IETF.  If an information module\n   produced by a working\
    \ group becomes a \"standard\" information module,\n   then at the very beginning\
    \ of its entry onto the Internet standards\n   track, the objects are moved under\
    \ the mgmt(2) subtree.\n   The private(4) subtree is used to identify objects\
    \ defined\n   unilaterally.  The enterprises(1) subtree beneath private is used,\n\
    \   among other things, to permit providers of networking subsystems to\n   register\
    \ models of their products.\n"
- title: 5.  Mapping of the MODULE-IDENTITY macro
  contents:
  - "5.  Mapping of the MODULE-IDENTITY macro\n   The MODULE-IDENTITY macro is used\
    \ to provide contact and revision\n   history for each information module.  It\
    \ must appear exactly once in\n   every information module.  It should be noted\
    \ that the expansion of\n   the MODULE-IDENTITY macro is something which conceptually\
    \ happens\n   during implementation and not during run-time.\n   Note that reference\
    \ in an IMPORTS clause or in clauses of SNMPv2\n   macros to an information module\
    \ is NOT through the use of the\n   'descriptor' of a MODULE-IDENTITY macro; rather,\
    \ an information\n   module is referenced through specifying its module name.\n"
- title: 5.1.  Mapping of the LAST-UPDATED clause
  contents:
  - "5.1.  Mapping of the LAST-UPDATED clause\n   The LAST-UPDATED clause, which must\
    \ be present, contains the date and\n   time that this information module was\
    \ last edited.  The date and time\n   are represented in UTC Time format (see\
    \ Appendix B).\n"
- title: 5.2.  Mapping of the ORGANIZATION clause
  contents:
  - "5.2.  Mapping of the ORGANIZATION clause\n   The ORGANIZATION clause, which must\
    \ be present, contains a textual\n   description of the organization under whose\
    \ auspices this information\n   module was developed.\n"
- title: 5.3.  Mapping of the CONTACT-INFO clause
  contents:
  - "5.3.  Mapping of the CONTACT-INFO clause\n   The CONTACT-INFO clause, which must\
    \ be present, contains the name,\n   postal address, telephone number, and electronic\
    \ mail address of the\n   person to whom technical queries concerning this information\
    \ module\n   should be sent.\n"
- title: 5.4.  Mapping of the DESCRIPTION clause
  contents:
  - "5.4.  Mapping of the DESCRIPTION clause\n   The DESCRIPTION clause, which must\
    \ be present, contains a high-level\n   textual description of the contents of\
    \ this information module.\n"
- title: 5.5.  Mapping of the REVISION clause
  contents:
  - "5.5.  Mapping of the REVISION clause\n   The REVISION clause, which need not\
    \ be present, is repeatedly used to\n   describe the revisions (including the\
    \ initial version) made to this\n   information module, in reverse chronological\
    \ order (i.e., most recent\n   first).  Each instance of this clause contains\
    \ the date and time of\n   the revision.  The date and time are represented in\
    \ UTC Time format\n   (see Appendix B).\n"
- title: 5.5.1.  Mapping of the DESCRIPTION sub-clause
  contents:
  - "5.5.1.  Mapping of the DESCRIPTION sub-clause\n   The DESCRIPTION clause, which\
    \ must be present for each REVISION\n   clause, contains a high-level textual\
    \ description of the revision\n   identified in that REVISION clause.\n"
- title: 5.6.  Mapping of the MODULE-IDENTITY value
  contents:
  - "5.6.  Mapping of the MODULE-IDENTITY value\n   The value of an invocation of\
    \ the MODULE-IDENTITY macro is an OBJECT\n   IDENTIFIER.  As such, this value\
    \ may be authoritatively used when\n   specifying an OBJECT IDENTIFIER value to\
    \ refer to the information\n   module containing the invocation.\n"
- title: 5.7.  Usage Example
  contents:
  - "5.7.  Usage Example\n   Consider how a skeletal MIB module might be constructed:\
    \  e.g.,\n"
- title: FIZBIN-MIB DEFINITIONS ::= BEGIN
  contents:
  - 'FIZBIN-MIB DEFINITIONS ::= BEGIN

    '
- title: IMPORTS
  contents:
  - "IMPORTS\n    MODULE-IDENTITY, OBJECT-TYPE, experimental\n        FROM SNMPv2-SMI;\n"
- title: fizbin MODULE-IDENTITY
  contents:
  - "fizbin MODULE-IDENTITY\n    LAST-UPDATED \"9505241811Z\"\n    ORGANIZATION \"\
    IETF SNMPv2 Working Group\"\n    CONTACT-INFO\n            \"        Marshall\
    \ T. Rose\n             Postal: Dover Beach Consulting, Inc.\n               \
    \      420 Whisman Court\n                     Mountain View, CA  94043-2186\n\
    \                     US\n                Tel: +1 415 968 1052\n             \
    \   Fax: +1 415 968 2510\n             E-mail: mrose@dbc.mtview.ca.us\"\n    DESCRIPTION\n\
    \            \"The MIB module for entities implementing the xxxx\n           \
    \ protocol.\"\n    REVISION      \"9505241811Z\"\n    DESCRIPTION\n          \
    \  \"The latest version of this MIB module.\"\n    REVISION      \"9210070433Z\"\
    \n    DESCRIPTION\n            \"The initial version of this MIB module.\"\n"
- title: -- contact IANA for actual number
  contents:
  - "-- contact IANA for actual number\n    ::= { experimental xx }\n"
- title: END
  contents:
  - 'END

    '
- title: 6.  Mapping of the OBJECT-IDENTITY macro
  contents:
  - "6.  Mapping of the OBJECT-IDENTITY macro\n   The OBJECT-IDENTITY macro is used\
    \ to define information about an\n   OBJECT IDENTIFIER assignment.  All administrative\
    \ OBJECT IDENTIFIER\n   assignments which define a type identification value (see\n\
    \   AutonomousType, a textual convention defined in [3]) should be\n   defined\
    \ via the OBJECT-IDENTITY macro.  It should be noted that the\n   expansion of\
    \ the OBJECT-IDENTITY macro is something which\n   conceptually happens during\
    \ implementation and not during run-time.\n"
- title: 6.1.  Mapping of the STATUS clause
  contents:
  - "6.1.  Mapping of the STATUS clause\n   The STATUS clause, which must be present,\
    \ indicates whether this\n   definition is current or historic.\n   The values\
    \ \"current\", and \"obsolete\" are self-explanatory.  The\n   \"deprecated\"\
    \ value indicates that the definition is obsolete, but\n   that an implementor\
    \ may wish to support it to foster interoperability\n   with older implementations.\n"
- title: 6.2.  Mapping of the DESCRIPTION clause
  contents:
  - "6.2.  Mapping of the DESCRIPTION clause\n   The DESCRIPTION clause, which must\
    \ be present, contains a textual\n   description of the object assignment.\n"
- title: 6.3.  Mapping of the REFERENCE clause
  contents:
  - "6.3.  Mapping of the REFERENCE clause\n   The REFERENCE clause, which need not\
    \ be present, contains a textual\n   cross-reference to an object assignment defined\
    \ in some other\n   information module.\n"
- title: 6.4.  Mapping of the OBJECT-IDENTITY value
  contents:
  - "6.4.  Mapping of the OBJECT-IDENTITY value\n   The value of an invocation of\
    \ the OBJECT-IDENTITY macro is an OBJECT\n   IDENTIFIER.\n"
- title: 6.5.  Usage Example
  contents:
  - "6.5.  Usage Example\n   Consider how an OBJECT IDENTIFIER assignment might be\
    \ made:  e.g.,\n"
- title: fizbin69 OBJECT-IDENTITY
  contents:
  - "fizbin69 OBJECT-IDENTITY\n    STATUS  current\n    DESCRIPTION\n            \"\
    The authoritative identity of the Fizbin 69 chipset.\"\n    ::= { fizbinChipSets\
    \ 1 }\n"
- title: 7.  Mapping of the OBJECT-TYPE macro
  contents:
  - "7.  Mapping of the OBJECT-TYPE macro\n   The OBJECT-TYPE macro is used to define\
    \ a type of managed object.  It\n   should be noted that the expansion of the\
    \ OBJECT-TYPE macro is\n   something which conceptually happens during implementation\
    \ and not\n   during run-time.\n   For leaf objects which are not columnar objects\
    \ (i.e., not contained\n   within a conceptual table), instances of the object\
    \ are identified by\n   appending a sub-identifier of zero to the name of that\
    \ object.\n   Otherwise, the INDEX clause of the conceptual row object superior\
    \ to\n   a columnar object defines instance identification information.\n"
- title: 7.1.  Mapping of the SYNTAX clause
  contents:
  - "7.1.  Mapping of the SYNTAX clause\n   The SYNTAX clause, which must be present,\
    \ defines the abstract data\n   structure corresponding to that object.  The data\
    \ structure must be\n   one of the following: a base type, the BITS construct,\
    \ or a textual\n   convention.  (SEQUENCE OF and SEQUENCE are also possible for\n\
    \   conceptual tables, see section 7.1.12).  The base types are those\n   defined\
    \ in the ObjectSyntax CHOICE.  A textual convention is a\n   newly-defined type\
    \ defined as a sub-type of a base type [3].\n   A extended subset of the full\
    \ capabilities of ASN.1 sub-typing is\n   allowed, as appropriate to the underingly\
    \ ASN.1 type.  Any such\n   restriction on size, range, enumerations or repertoire\
    \ specified in\n   this clause represents the maximal level of support which makes\n\
    \   \"protocol sense\".  Restrictions on sub-typing are specified in detail\n\
    \   in Section 9 and Appendix C of this memo.\n   The semantics of ObjectSyntax\
    \ are now described.\n"
- title: 7.1.1.  Integer32 and INTEGER
  contents:
  - "7.1.1.  Integer32 and INTEGER\n   The Integer32 type represents integer-valued\
    \ information between\n   -2^31 and 2^31-1 inclusive (-2147483648 to 2147483647\
    \ decimal).  This\n   type is indistinguishable from the INTEGER type.  Both the\
    \ INTEGER\n   and Integer32 types may be sub-typed to be more constrained than\
    \ the\n   Integer32 type.\n   The INTEGER type may also be used to represent integer-valued\n\
    \   information as named-number enumerations.  In this case, only those\n   named-numbers\
    \ so enumerated may be present as a value.  Note that\n   although it is recommended\
    \ that enumerated values start at 1 and be\n   numbered contiguously, any valid\
    \ value for Integer32 is allowed for\n   an enumerated value and, further, enumerated\
    \ values needn't be\n   contiguously assigned.\n   Finally, a label for a named-number\
    \ enumeration must consist of one\n   or more letters or digits (no hyphens),\
    \ up to a maximum of 64\n   characters, and the initial character must be a lower-case\
    \ letter.\n   (However, labels longer than 32 characters are not recommended.)\n"
- title: 7.1.2.  OCTET STRING
  contents:
  - "7.1.2.  OCTET STRING\n   The OCTET STRING type represents arbitrary binary or\
    \ textual data.\n   Although there is no SMI-specified size limitation for this\
    \ type, MIB\n   designers should realize that there may be implementation and\n\
    \   interoperability limitations for sizes in excess of 255 octets.\n"
- title: 7.1.3.  OBJECT IDENTIFIER
  contents:
  - "7.1.3.  OBJECT IDENTIFIER\n   The OBJECT IDENTIFIER type represents administratively\
    \ assigned\n   names.  Any instance of this type may have at most 128 sub-\n \
    \  identifiers.  Further, each sub-identifier must not exceed the value\n   2^32-1\
    \ (4294967295 decimal).\n"
- title: 7.1.4.  The BITS construct
  contents:
  - "7.1.4.  The BITS construct\n   The BITS construct represents an enumeration of\
    \ named bits.  This\n   collection is assigned non-negative, contiguous values,\
    \ starting at\n   zero.  Only those named-bits so enumerated may be present in\
    \ a value.\n   (Thus, enumerations must be assigned to consecutive bits; however,\n\
    \   see Section 9 for refinements of an object with this syntax.)\n   Although\
    \ there is no SMI-specified limitation on the number of\n   enumerations (and\
    \ therefore on the length of a value), MIB designers\n   should realize that there\
    \ may be implementation and interoperability\n   limitations for sizes in excess\
    \ of 128 bits.\n   Finally, a label for a named-number enumeration must consist\
    \ of one\n   or more letters or digits (no hyphens), up to a maximum of 64\n \
    \  characters, and the initial character must be a lower-case letter.\n   (However,\
    \ labels longer than 32 characters are not recommended.)\n"
- title: 7.1.5.  IpAddress
  contents:
  - "7.1.5.  IpAddress\n   The IpAddress type represents a 32-bit internet address.\
    \  It is\n   represented as an OCTET STRING of length 4, in network byte-order.\n\
    \   Note that the IpAddress type is a tagged type for historical reasons.\n  \
    \ Network addresses should be represented using an invocation of the\n   TEXTUAL-CONVENTION\
    \ macro [3].\n"
- title: 7.1.6.  Counter32
  contents:
  - "7.1.6.  Counter32\n   The Counter32 type represents a non-negative integer which\n\
    \   monotonically increases until it reaches a maximum value of 2^32-1\n   (4294967295\
    \ decimal), when it wraps around and starts increasing\n   again from zero.\n\
    \   Counters have no defined \"initial\" value, and thus, a single value of\n\
    \   a Counter has (in general) no information content.  Discontinuities\n   in\
    \ the monotonically increasing value normally occur at re-\n   initialization\
    \ of the management system, and at other times as\n   specified in the description\
    \ of an object-type using this ASN.1 type.\n   If such other times can occur,\
    \ for example, the creation of an object\n   instance at times other than re-initialization,\
    \ then a corresponding\n   object should be defined with a SYNTAX clause value\
    \ of TimeStamp (a\n   textual convention defined in [3]) indicating the time of\
    \ the last\n   discontinuity.\n   The value of the MAX-ACCESS clause for objects\
    \ with a SYNTAX clause\n   value of Counter32 is either \"read-only\" or \"accessible-for-notify\"\
    .\n   A DEFVAL clause is not allowed for objects with a SYNTAX clause value\n\
    \   of Counter32.\n"
- title: 7.1.7.  Gauge32
  contents:
  - "7.1.7.  Gauge32\n   The Gauge32 type represents a non-negative integer, which\
    \ may\n   increase or decrease, but shall never exceed a maximum value.  The\n\
    \   maximum value can not be greater than 2^32-1 (4294967295 decimal).\n   The\
    \ value of a Gauge has its maximum value whenever the information\n   being modeled\
    \ is greater or equal to that maximum value; if the\n   information being modeled\
    \ subsequently decreases below the maximum\n   value, the Gauge also decreases.\n"
- title: 7.1.8.  TimeTicks
  contents:
  - "7.1.8.  TimeTicks\n   The TimeTicks type represents a non-negative integer which\
    \ represents\n   the time, modulo 2^32 (4294967296 decimal), in hundredths of\
    \ a second\n   between two epochs.  When objects are defined which use this ASN.1\n\
    \   type, the description of the object identifies both of the reference\n   epochs.\n\
    \   For example, [3] defines the TimeStamp textual convention which is\n   based\
    \ on the TimeTicks type.  With a TimeStamp, the first reference\n   epoch is defined\
    \ as the time when sysUpTime [5] was zero, and the\n   second reference epoch\
    \ is defined as the current value of sysUpTime.\n   The TimeTicks type may not\
    \ be sub-typed.\n"
- title: 7.1.9.  Opaque
  contents:
  - "7.1.9.  Opaque\n   The Opaque type is provided solely for backward-compatibility,\
    \ and\n   shall not be used for newly-defined object types.\n   The Opaque type\
    \ supports the capability to pass arbitrary ASN.1\n   syntax.  A value is encoded\
    \ using the ASN.1 Basic Encoding Rules [4]\n   into a string of octets.  This,\
    \ in turn, is encoded as an OCTET\n   STRING, in effect \"double-wrapping\" the\
    \ original ASN.1 value.\n   Note that a conforming implementation need only be\
    \ able to accept and\n   recognize opaquely-encoded data.  It need not be able\
    \ to unwrap the\n   data and then interpret its contents.\n   A requirement on\
    \ \"standard\" MIB modules is that no object may have a\n   SYNTAX clause value\
    \ of Opaque.\n"
- title: 7.1.10.  Counter64
  contents:
  - "7.1.10.  Counter64\n   The Counter64 type represents a non-negative integer which\n\
    \   monotonically increases until it reaches a maximum value of 2^64-1\n   (18446744073709551615\
    \ decimal), when it wraps around and starts\n   increasing again from zero.\n\
    \   Counters have no defined \"initial\" value, and thus, a single value of\n\
    \   a Counter has (in general) no information content.  Discontinuities\n   in\
    \ the monotonically increasing value normally occur at re-\n   initialization\
    \ of the management system, and at other times as\n   specified in the description\
    \ of an object-type using this ASN.1 type.\n   If such other times can occur,\
    \ for example, the creation of an object\n   instance at times other than re-initialization,\
    \ then a corresponding\n   object should be defined with a SYNTAX clause value\
    \ of TimeStamp (a\n   textual convention defined in [3]) indicating the time of\
    \ the last\n   discontinuity.\n   The value of the MAX-ACCESS clause for objects\
    \ with a SYNTAX clause\n   value of Counter64 is either \"read-only\" or \"accessible-for-notify\"\
    .\n   A requirement on \"standard\" MIB modules is that the Counter64 type\n \
    \  may be used only if the information being modeled would wrap in less\n   than\
    \ one hour if the Counter32 type was used instead.\n   A DEFVAL clause is not\
    \ allowed for objects with a SYNTAX clause value\n   of Counter64.\n"
- title: 7.1.11.  Unsigned32
  contents:
  - "7.1.11.  Unsigned32\n   The Unsigned32 type represents integer-valued information\
    \ between 0\n   and 2^32-1 inclusive (0 to 4294967295 decimal).\n"
- title: 7.1.12.  Conceptual Tables
  contents:
  - "7.1.12.  Conceptual Tables\n   Management operations apply exclusively to scalar\
    \ objects.  However,\n   it is sometimes convenient for developers of management\
    \ applications\n   to impose an imaginary, tabular structure on an ordered collection\
    \ of\n   objects within the MIB.  Each such conceptual table contains zero or\n\
    \   more rows, and each row may contain one or more scalar objects,\n   termed\
    \ columnar objects.  This conceptualization is formalized by\n   using the OBJECT-TYPE\
    \ macro to define both an object which\n   corresponds to a table and an object\
    \ which corresponds to a row in\n   that table.  A conceptual table has SYNTAX\
    \ of the form:\n     SEQUENCE OF <EntryType>\n   where <EntryType> refers to the\
    \ SEQUENCE type of its subordinate\n   conceptual row.  A conceptual row has SYNTAX\
    \ of the form:\n     <EntryType>\n   where <EntryType> is a SEQUENCE type defined\
    \ as follows:\n     <EntryType> ::= SEQUENCE { <type1>, ... , <typeN> }\n   where\
    \ there is one <type> for each subordinate object, and each\n   <type> is of the\
    \ form:\n     <descriptor> <syntax>\n   where <descriptor> is the descriptor naming\
    \ a subordinate object, and\n   <syntax> has the value of that subordinate object's\
    \ SYNTAX clause,\n   normally omitting the sub-typing information.  Further, these\
    \ ASN.1\n   types are always present (the DEFAULT and OPTIONAL clauses are\n \
    \  disallowed in the SEQUENCE definition).  The MAX-ACCESS clause for\n   conceptual\
    \ tables and rows is \"not-accessible\".\n"
- title: 7.1.12.1.  Creation and Deletion of Conceptual Rows
  contents:
  - "7.1.12.1.  Creation and Deletion of Conceptual Rows\n   For newly-defined conceptual\
    \ rows which allow the creation of new\n   object instances and/or the deletion\
    \ of existing object instances,\n   there should be one columnar object with a\
    \ SYNTAX clause value of\n   RowStatus (a textual convention defined in [3]) and\
    \ a MAX-ACCESS\n   clause value of read-create.  By convention, this is termed\
    \ the\n   status column for the conceptual row.\n"
- title: 7.2.  Mapping of the UNITS clause
  contents:
  - "7.2.  Mapping of the UNITS clause\n   This UNITS clause, which need not be present,\
    \ contains a textual\n   definition of the units associated with that object.\n"
- title: 7.3.  Mapping of the MAX-ACCESS clause
  contents:
  - "7.3.  Mapping of the MAX-ACCESS clause\n   The MAX-ACCESS clause, which must\
    \ be present, defines whether it\n   makes \"protocol sense\" to read, write and/or\
    \ create an instance of\n   the object, or to include its value in a notification.\
    \  This is the\n   maximal level of access for the object.  (This maximal level\
    \ of\n   access is independent of any administrative authorization policy.)\n\
    \   The value \"read-write\" indicates that read and write access make\n   \"\
    protocol sense\", but create does not.  The value \"read-create\"\n   indicates\
    \ that read, write and create access make \"protocol sense\".\n   The value \"\
    not-accessible\" indicates an auxiliary object (see Section\n   7.7).  The value\
    \ \"accessible-for-notify\" indicates an object which is\n   accessible only via\
    \ a notification (e.g., snmpTrapOID [5]).\n   These values are ordered, from least\
    \ to greatest:  \"not-accessible\",\n   \"accessible-for-notify\", \"read-only\"\
    , \"read-write\", \"read-create\".\n   If any columnar object in a conceptual\
    \ row has \"read-create\" as its\n   maximal level of access, then no other columnar\
    \ object of the same\n   conceptual row may have a maximal access of \"read-write\"\
    .  (Note that\n   \"read-create\" is a superset of \"read-write\".)\n"
- title: 7.4.  Mapping of the STATUS clause
  contents:
  - "7.4.  Mapping of the STATUS clause\n   The STATUS clause, which must be present,\
    \ indicates whether this\n   definition is current or historic.\n   The values\
    \ \"current\", and \"obsolete\" are self-explanatory.  The\n   \"deprecated\"\
    \ value indicates that the definition is obsolete, but\n   that an implementor\
    \ may wish to support that object to foster\n   interoperability with older implementations.\n"
- title: 7.5.  Mapping of the DESCRIPTION clause
  contents:
  - "7.5.  Mapping of the DESCRIPTION clause\n   The DESCRIPTION clause, which must\
    \ be present, contains a textual\n   definition of that object which provides\
    \ all semantic definitions\n   necessary for implementation, and should embody\
    \ any information which\n   would otherwise be communicated in any ASN.1 commentary\
    \ annotations\n   associated with the object.\n"
- title: 7.6.  Mapping of the REFERENCE clause
  contents:
  - "7.6.  Mapping of the REFERENCE clause\n   The REFERENCE clause, which need not\
    \ be present, contains a textual\n   cross-reference to an object defined in some\
    \ other information\n   module.  This is useful when de-osifying a MIB module\
    \ produced by\n   some other organization.\n"
- title: 7.7.  Mapping of the INDEX clause
  contents:
  - "7.7.  Mapping of the INDEX clause\n   The INDEX clause, which must be present\
    \ if that object corresponds to\n   a conceptual row (unless an AUGMENTS clause\
    \ is present instead), and\n   must be absent otherwise, defines instance identification\
    \ information\n   for the columnar objects subordinate to that object.\n   The\
    \ instance identification information in an INDEX clause must\n   specify object(s)\
    \ such that value(s) of those object(s) will\n   unambiguously distinguish a conceptual\
    \ row.  The syntax of those\n   objects indicate how to form the instance-identifier:\n"
- title: '(1)  integer-valued:  a single sub-identifier taking the integer value'
  contents:
  - "(1)  integer-valued:  a single sub-identifier taking the integer value\n    \
    \ (this works only for non-negative integers);\n"
- title: (2)  string-valued, fixed-length strings (or variable-length preceded by
  contents:
  - "(2)  string-valued, fixed-length strings (or variable-length preceded by\n  \
    \   the IMPLIED keyword):  `n' sub-identifiers, where `n' is the length\n    \
    \ of the string (each octet of the string is encoded in a separate\n     sub-identifier);\n"
- title: (3)  string-valued, variable-length strings (not preceded by the IMPLIED
  contents:
  - "(3)  string-valued, variable-length strings (not preceded by the IMPLIED\n  \
    \   keyword):  `n+1' sub-identifiers, where `n' is the length of the\n     string\
    \ (the first sub-identifier is `n' itself, following this,\n     each octet of\
    \ the string is encoded in a separate sub-identifier);\n"
- title: '(4)  object identifier-valued (when preceded by the IMPLIED keyword):'
  contents:
  - "(4)  object identifier-valued (when preceded by the IMPLIED keyword):\n     `n'\
    \ sub-identifiers, where `n' is the number of sub-identifiers in\n     the value\
    \ (each sub-identifier of the value is copied into a\n     separate sub-identifier);\n"
- title: (5)  object identifier-valued (when not preceded by the IMPLIED
  contents:
  - "(5)  object identifier-valued (when not preceded by the IMPLIED\n     keyword):\
    \  `n+1' sub-identifiers, where `n' is the number of sub-\n     identifiers in\
    \ the value (the first sub-identifier is `n' itself,\n     following this, each\
    \ sub-identifier in the value is copied);\n"
- title: '(6)  IpAddress-valued:  4 sub-identifiers, in the familiar a.b.c.d'
  contents:
  - "(6)  IpAddress-valued:  4 sub-identifiers, in the familiar a.b.c.d\n     notation.\n\
    \   Note that the IMPLIED keyword can only be present for an object\n   having\
    \ a variable-length syntax (e.g., variable-length strings or\n   object identifier-valued\
    \ objects), Further, the IMPLIED keyword can\n   only be associated with the last\
    \ object in the INDEX clause.\n   Finally, the IMPLIED keyword may not be used\
    \ on a variable-length\n   string object if that string might have a value of\
    \ zero-length.\n   Instances identified by use of integer-valued objects should\
    \ be\n   numbered starting from one (i.e., not from zero).  The use of zero as\n\
    \   a value for an integer-valued index object should be avoided, except\n   in\
    \ special cases.\n   Objects which are both specified in the INDEX clause of a\
    \ conceptual\n   row and also columnar objects of the same conceptual row are\
    \ termed\n   auxiliary objects.  The MAX-ACCESS clause for auxiliary objects is\n\
    \   \"not-accessible\", except in the following circumstances:\n"
- title: (1)  within a MIB module originally written to conform to the SNMPv1
  contents:
  - "(1)  within a MIB module originally written to conform to the SNMPv1\n     framework,\
    \ and later converted to conform to the SNMPv2 framework;\n     or\n"
- title: (2)  a conceptual row must contain at least one columnar object which is
  contents:
  - "(2)  a conceptual row must contain at least one columnar object which is\n  \
    \   not an auxiliary object.  In the event that all of a conceptual\n     row's\
    \ columnar objects are also specified in its INDEX clause, then\n     one of them\
    \ must be accessible, i.e., have a MAX-ACCESS clause of\n     \"read-only\". (Note\
    \ that this situation does not arise for a\n     conceptual row allowing create\
    \ access, since such a row will have a\n     status column which will not be an\
    \ auxiliary object.)\n   Note that objects specified in a conceptual row's INDEX\
    \ clause need\n   not be columnar objects of that conceptual row.  In this situation,\n\
    \   the DESCRIPTION clause of the conceptual row must include a textual\n   explanation\
    \ of how the objects which are included in the INDEX clause\n   but not columnar\
    \ objects of that conceptual row, are used in uniquely\n   identifying instances\
    \ of the conceptual row's columnar objects.\n"
- title: 7.8.  Mapping of the AUGMENTS clause
  contents:
  - "7.8.  Mapping of the AUGMENTS clause\n   The AUGMENTS clause, which must not\
    \ be present unless the object\n   corresponds to a conceptual row, is an alternative\
    \ to the INDEX\n   clause.  Every object corresponding to a conceptual row has\
    \ either an\n   INDEX clause or an AUGMENTS clause.\n   If an object corresponding\
    \ to a conceptual row has an INDEX clause,\n   that row is termed a base conceptual\
    \ row; alternatively, if the\n   object has an AUGMENTS clause, the row is said\
    \ to be a conceptual row\n   augmentation, where the AUGMENTS clause names the\
    \ object\n   corresponding to the base conceptual row which is augmented by this\n\
    \   conceptual row augmentation.  (Thus, a conceptual row augmentation\n   cannot\
    \ itself be augmented.) Instances of subordinate columnar\n   objects of a conceptual\
    \ row augmentation are identified according to\n   the INDEX clause of the base\
    \ conceptual row corresponding to the\n   object named in the AUGMENTS clause.\
    \  Further, instances of\n   subordinate columnar objects of a conceptual row\
    \ augmentation exist\n   according to the same semantics as instances of subordinate\
    \ columnar\n   objects of the base conceptual row being augmented.  As such, note\n\
    \   that creation of a base conceptual row implies the correspondent\n   creation\
    \ of any conceptual row augmentations.\n   For example, a MIB designer might wish\
    \ to define additional columns\n   in an \"enterprise-specific\" MIB which logically\
    \ extend a conceptual\n   row in a \"standard\" MIB.  The \"standard\" MIB definition\
    \ of the\n   conceptual row would include the INDEX clause and the \"enterprise-\n\
    \   specific\" MIB would contain the definition of a conceptual row using\n  \
    \ the AUGMENTS clause.  On the other hand, it would be incorrect to use\n   the\
    \ AUGMENTS clause for the relationship between RFC 1573's ifTable\n   and the\
    \ many media-specific MIBs which extend it for specific media\n   (e.g., the dot3Table\
    \ in RFC 1650), since not all interfaces are of\n   the same media.\n   Note that\
    \ a base conceptual row may be augmented by multiple\n   conceptual row augmentations.\n"
- title: 7.8.1.  Relation between INDEX and AUGMENTS clauses
  contents:
  - "7.8.1.  Relation between INDEX and AUGMENTS clauses\n   When defining instance\
    \ identification information for a conceptual\n   table:\n"
- title: (1)  If there is a one-to-one correspondence between the conceptual rows
  contents:
  - "(1)  If there is a one-to-one correspondence between the conceptual rows\n  \
    \   of this table and an existing table, then the AUGMENTS clause\n     should\
    \ be used.\n"
- title: (2)  Otherwise, if there is a sparse relationship between the conceptual
  contents:
  - "(2)  Otherwise, if there is a sparse relationship between the conceptual\n  \
    \   rows of this table and an existing table, then an INDEX clause\n     should\
    \ be used which is identical to that in the existing table.\n     For example,\
    \ the relationship between RFC 1573's ifTable and a\n     media-specific MIB which\
    \ extends the ifTable for a specific media\n     (e.g., the dot3Table in RFC 1650),\
    \ is a sparse relationship.\n"
- title: (3)  Otherwise, if no existing objects have the required syntax and
  contents:
  - "(3)  Otherwise, if no existing objects have the required syntax and\n     semantics,\
    \ then auxiliary objects should be defined within the\n     conceptual row for\
    \ the new table, and those objects should be used\n     within the INDEX clause\
    \ for the conceptual row.\n"
- title: 7.9.  Mapping of the DEFVAL clause
  contents:
  - "7.9.  Mapping of the DEFVAL clause\n   The DEFVAL clause, which need not be present,\
    \ defines an acceptable\n   default value which may be used at the discretion\
    \ of a SNMPv2 entity\n   acting in an agent role when an object instance is created.\n\
    \   During conceptual row creation, if an instance of a columnar object\n   is\
    \ not present as one of the operands in the correspondent management\n   protocol\
    \ set operation, then the value of the DEFVAL clause, if\n   present, indicates\
    \ an acceptable default value that a SNMPv2 entity\n   acting in an agent role\
    \ might use.\n   The value of the DEFVAL clause must, of course, correspond to\
    \ the\n   SYNTAX clause for the object.  If the value is an OBJECT IDENTIFIER,\n\
    \   then it must be expressed as a single ASN.1 identifier, and not as a\n   collection\
    \ of sub-identifiers.\n   Note that if an operand to the management protocol set\
    \ operation is\n   an instance of a read-only object, then the error `notWritable'\
    \ [6]\n   will be returned.  As such, the DEFVAL clause can be used to provide\n\
    \   an acceptable default value that a SNMPv2 entity acting in an agent\n   role\
    \ might use.\n   By way of example, consider the following possible DEFVAL clauses:\n\
    \     ObjectSyntax       DEFVAL clause\n     ----------------   ------------\n\
    \     Integer32          DEFVAL { 1 }\n                        -- same for Gauge32,\
    \ TimeTicks, Unsigned32\n     INTEGER            DEFVAL { valid } -- enumerated\
    \ value\n     OCTET STRING       DEFVAL { 'ffffffffffff'H }\n     OBJECT IDENTIFIER\
    \  DEFVAL { sysDescr }\n     BITS               DEFVAL { { primary, secondary\
    \ } }\n                        -- enumerated values that are set\n     IpAddress\
    \          DEFVAL { 'c0210415'H } -- 192.33.4.21\n   Object types with SYNTAX\
    \ of Counter32 and Counter64 may not have\n   DEFVAL clauses, since they do not\
    \ have defined initial values.\n   However, it is recommended that they be initialized\
    \ to zero.\n"
- title: 7.10.  Mapping of the OBJECT-TYPE value
  contents:
  - "7.10.  Mapping of the OBJECT-TYPE value\n   The value of an invocation of the\
    \ OBJECT-TYPE macro is the name of\n   the object, which is an OBJECT IDENTIFIER,\
    \ an administratively\n   assigned name.\n   When an OBJECT IDENTIFIER is assigned\
    \ to an object:\n"
- title: (1)  If the object corresponds to a conceptual table, then only a single
  contents:
  - "(1)  If the object corresponds to a conceptual table, then only a single\n  \
    \   assignment, that for a conceptual row, is present immediately\n     beneath\
    \ that object.  The administratively assigned name for the\n     conceptual row\
    \ object is derived by appending a sub-identifier of\n     \"1\" to the administratively\
    \ assigned name for the conceptual table.\n"
- title: (2)  If the object corresponds to a conceptual row, then at least one
  contents:
  - "(2)  If the object corresponds to a conceptual row, then at least one\n     assignment,\
    \ one for each column in the conceptual row, is present\n     beneath that object.\
    \  The administratively assigned name for each\n     column is derived by appending\
    \ a unique, positive sub-identifier to\n     the administratively assigned name\
    \ for the conceptual row.\n"
- title: (3)  Otherwise, no other OBJECT IDENTIFIERs which are subordinate to the
  contents:
  - "(3)  Otherwise, no other OBJECT IDENTIFIERs which are subordinate to the\n  \
    \   object may be assigned.\n   Note that the final sub-identifier of any administratively\
    \ assigned\n   name for an object shall be positive.  A zero-valued  final sub-\n\
    \   identifier is reserved for future use.\n   Further note that although conceptual\
    \ tables and rows are given\n   administratively assigned names, these conceptual\
    \ objects may not be\n   manipulated in aggregate form by the management protocol.\n"
- title: 7.11.  Usage Example
  contents:
  - "7.11.  Usage Example\n   Consider how one might define a conceptual table and\
    \ its\n   subordinates.  (This example uses the RowStatus textual convention\n\
    \   defined in [3].)\n"
- title: evalSlot OBJECT-TYPE
  contents:
  - "evalSlot OBJECT-TYPE\n    SYNTAX      INTEGER\n    MAX-ACCESS  read-only\n  \
    \  STATUS      current\n    DESCRIPTION\n            \"The index number of the\
    \ first unassigned entry in the\n            evaluation table.\n            A\
    \ management station should create new entries in the\n            evaluation\
    \ table using this algorithm:  first, issue a\n            management protocol\
    \ retrieval operation to determine the\n            value of evalSlot; and, second,\
    \ issue a management protocol\n            set operation to create an instance\
    \ of the evalStatus object\n            setting its value to createAndGo(4) or\
    \ createAndWait(5).  If\n            this latter operation succeeds, then the\
    \ management station\n            may continue modifying the instances corresponding\
    \ to the\n            newly created conceptual row, without fear of collision\
    \ with\n            other management stations.\"\n    ::= { eval 1 }\n"
- title: evalTable OBJECT-TYPE
  contents:
  - "evalTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF EvalEntry\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n            \"The\
    \ (conceptual) evaluation table.\"\n    ::= { eval 2 }\n"
- title: evalEntry OBJECT-TYPE
  contents:
  - "evalEntry OBJECT-TYPE\n    SYNTAX      EvalEntry\n    MAX-ACCESS  not-accessible\n\
    \    STATUS      current\n    DESCRIPTION\n            \"An entry (conceptual\
    \ row) in the evaluation table.\"\n    INDEX   { evalIndex }\n    ::= { evalTable\
    \ 1 }\n"
- title: EvalEntry ::=
  contents:
  - "EvalEntry ::=\n    SEQUENCE {\n        evalIndex       Integer32,\n        evalString\
    \      DisplayString,\n        evalValue       Integer32,\n        evalStatus\
    \      RowStatus\n    }\n"
- title: evalIndex OBJECT-TYPE
  contents:
  - "evalIndex OBJECT-TYPE\n    SYNTAX      Integer32\n    MAX-ACCESS  not-accessible\n\
    \    STATUS      current\n    DESCRIPTION\n            \"The auxiliary variable\
    \ used for identifying instances of\n            the columnar objects in the evaluation\
    \ table.\"\n        ::= { evalEntry 1 }\n"
- title: evalString OBJECT-TYPE
  contents:
  - "evalString OBJECT-TYPE\n    SYNTAX      DisplayString\n    MAX-ACCESS  read-create\n\
    \    STATUS      current\n    DESCRIPTION\n            \"The string to evaluate.\"\
    \n        ::= { evalEntry 2 }\n"
- title: evalValue OBJECT-TYPE
  contents:
  - "evalValue OBJECT-TYPE\n    SYNTAX      Integer32\n    MAX-ACCESS  read-only\n\
    \    STATUS      current\n    DESCRIPTION\n            \"The value when evalString\
    \ was last executed.\"\n    DEFVAL  { 0 }\n        ::= { evalEntry 3 }\n"
- title: evalStatus OBJECT-TYPE
  contents:
  - "evalStatus OBJECT-TYPE\n    SYNTAX      RowStatus\n    MAX-ACCESS  read-create\n\
    \    STATUS      current\n    DESCRIPTION\n            \"The status column used\
    \ for creating, modifying, and\n            deleting instances of the columnar\
    \ objects in the evaluation\n            table.\"\n    DEFVAL  { active }\n  \
    \      ::= { evalEntry 4 }\n"
- title: 8.  Mapping of the NOTIFICATION-TYPE macro
  contents:
  - "8.  Mapping of the NOTIFICATION-TYPE macro\n   The NOTIFICATION-TYPE macro is\
    \ used to define the information\n   contained within an unsolicited transmission\
    \ of management\n   information (i.e., within either a SNMPv2-Trap-PDU or InformRequest-\n\
    \   PDU).  It should be noted that the expansion of the NOTIFICATION-TYPE\n  \
    \ macro is something which conceptually happens during implementation\n   and\
    \ not during run-time.\n"
- title: 8.1.  Mapping of the OBJECTS clause
  contents:
  - "8.1.  Mapping of the OBJECTS clause\n   The OBJECTS clause, which need not be\
    \ present, defines the ordered\n   sequence of MIB object types which are contained\
    \ within every\n   instance of the notification.  An object type specified in\
    \ this\n   clause may not have an MAX-ACCESS clause of \"not-accessible\".\n"
- title: 8.2.  Mapping of the STATUS clause
  contents:
  - "8.2.  Mapping of the STATUS clause\n   The STATUS clause, which must be present,\
    \ indicates whether this\n   definition is current or historic.\n   The values\
    \ \"current\", and \"obsolete\" are self-explanatory.  The\n   \"deprecated\"\
    \ value indicates that the definition is obsolete, but\n   that an implementor\
    \ may wish to support the notification to foster\n   interoperability with older\
    \ implementations.\n"
- title: 8.3.  Mapping of the DESCRIPTION clause
  contents:
  - "8.3.  Mapping of the DESCRIPTION clause\n   The DESCRIPTION clause, which must\
    \ be present, contains a textual\n   definition of the notification which provides\
    \ all semantic\n   definitions necessary for implementation, and should embody\
    \ any\n   information which would otherwise be communicated in any ASN.1\n   commentary\
    \ annotations associated with the notification.  In\n   particular, the DESCRIPTION\
    \ clause should document which instances of\n   the objects mentioned in the OBJECTS\
    \ clause should be contained\n   within notifications of this type.\n"
- title: 8.4.  Mapping of the REFERENCE clause
  contents:
  - "8.4.  Mapping of the REFERENCE clause\n   The REFERENCE clause, which need not\
    \ be present, contains a textual\n   cross-reference to a notification defined\
    \ in some other information\n   module.  This is useful when de-osifying a MIB\
    \ module produced by\n   some other organization.\n"
- title: 8.5.  Mapping of the NOTIFICATION-TYPE value
  contents:
  - "8.5.  Mapping of the NOTIFICATION-TYPE value\n   The value of an invocation of\
    \ the NOTIFICATION-TYPE macro is the name\n   of the notification, which is an\
    \ OBJECT IDENTIFIER, an\n   administratively assigned name.  In order to achieve\
    \ compatibility\n   with the procedures employed by proxy agents (see Section\
    \ 3.1.2 of\n   [7]), the next to last sub-identifier in the name of any newly-\n\
    \   defined notification must have the value zero.\n   Sections 4.2.6 and 4.2.7\
    \ of [6] describe how the NOTIFICATION-TYPE\n   macro is used to generate a SNMPv2-Trap-PDU\
    \ or InformRequest-PDU,\n   respectively.\n"
- title: 8.6.  Usage Example
  contents:
  - "8.6.  Usage Example\n   Consider how a linkUp trap might be described:\n"
- title: linkUp NOTIFICATION-TYPE
  contents:
  - "linkUp NOTIFICATION-TYPE\n    OBJECTS { ifIndex }\n    STATUS  current\n    DESCRIPTION\n\
    \            \"A linkUp trap signifies that the SNMPv2 entity, acting in\n   \
    \         an agent role, recognizes that one of the communication\n          \
    \  links represented in its configuration has come up.\"\n    ::= { snmpTraps\
    \ 4 }\n"
- title: According to this invocation, the trap authoritatively identified as
  contents:
  - "According to this invocation, the trap authoritatively identified as\n     {\
    \ snmpTraps 4 }\n"
- title: is used to report a link coming up.
  contents:
  - 'is used to report a link coming up.

    '
- title: 9.  Refined Syntax
  contents:
  - "9.  Refined Syntax\n   Some macros have clauses which allows syntax to be refined,\n\
    \   specifically: the SYNTAX clause of the OBJECT-TYPE macro, and the\n   SYNTAX/WRITE-SYNTAX\
    \ clauses of the MODULE-COMPLIANCE and AGENT-\n   CAPABILITIES macros [2].  However,\
    \ not all refinements of syntax are\n   appropriate.  In particular, the object's\
    \ primitive or application\n   type must not be changed.\n   Further, the following\
    \ restrictions apply:\n                            Restrictions to Refinement\
    \ on\n  object syntax         range   enumeration     size    repertoire\n  -----------------\
    \     -----   -----------     ----    ----------\n            INTEGER      (1)\
    \        (2)           -         -\n          Integer32      (1)         -   \
    \         -         -\n         Unsigned32      (1)         -            -   \
    \      -\n       OCTET STRING       -          -           (3)       (4)\n  OBJECT\
    \ IDENTIFIER       -          -            -         -\n               BITS  \
    \     -         (2)           -         -\n          IpAddress       -       \
    \   -            -         -\n          Counter32       -          -         \
    \   -         -\n          Counter64       -          -            -         -\n\
    \            Gauge32      (1)         -            -         -\n          TimeTicks\
    \       -          -            -         -\n"
- title: 'where:'
  contents:
  - 'where:

    '
- title: (1)  the range of permitted values may be refined by raising the lower-
  contents:
  - "(1)  the range of permitted values may be refined by raising the lower-\n   \
    \  bounds, by reducing the upper-bounds, and/or by reducing the\n     alternative\
    \ value/range choices;\n"
- title: (2)  the enumeration of named-values may be refined by removing one or
  contents:
  - "(2)  the enumeration of named-values may be refined by removing one or\n    \
    \ more named-values (note that for BITS, a refinement may cause the\n     enumerations\
    \ to no longer be contiguous);\n"
- title: (3)  the size in characters of the value may be refined by raising the
  contents:
  - "(3)  the size in characters of the value may be refined by raising the\n    \
    \ lower-bounds, by reducing the upper-bounds, and/or by reducing the\n     alternative\
    \ size choices; or,\n"
- title: (4)  the repertoire of characters in the value may be reduced by further
  contents:
  - "(4)  the repertoire of characters in the value may be reduced by further\n  \
    \   sub-typing.\n   Otherwise no refinements are possible.  Further details on\
    \ sub-typing\n   are provided in Appendix C.\n"
- title: 10.  Extending an Information Module
  contents:
  - "10.  Extending an Information Module\n   As experience is gained with a published\
    \ information module, it may\n   be desirable to revise that information module.\n\
    \   To begin, the invocation of the MODULE-IDENTITY macro should be\n   updated\
    \ to include information about the revision.  Usually, this\n   consists of updating\
    \ the LAST-UPDATED clause and adding a pair of\n   REVISION and DESCRIPTION clauses.\
    \  However, other existing clauses in\n   the invocation may be updated.\n   Note\
    \ that the module's label (e.g., \"FIZBIN-MIB\" from the example in\n   Section\
    \ 5.8), is not changed when the information module is revised.\n"
- title: 10.1.  Object Assignments
  contents:
  - "10.1.  Object Assignments\n   If any non-editorial change is made to any clause\
    \ of a object\n   assignment, then the OBJECT IDENTIFIER value associated with\
    \ that\n   object assignment must also be changed, along with its associated\n\
    \   descriptor.\n"
- title: 10.2.  Object Definitions
  contents:
  - "10.2.  Object Definitions\n   An object definition may be revised in any of the\
    \ following ways:\n"
- title: (1)  A SYNTAX clause containing an enumerated INTEGER may have new
  contents:
  - "(1)  A SYNTAX clause containing an enumerated INTEGER may have new\n     enumerations\
    \ added or existing labels changed.\n"
- title: (2)  A STATUS clause value of "current" may be revised as "deprecated"
  contents:
  - "(2)  A STATUS clause value of \"current\" may be revised as \"deprecated\"\n\
    \     or \"obsolete\".  Similarly, a STATUS clause value of \"deprecated\"\n \
    \    may be revised as \"obsolete\".\n"
- title: (3)  A DEFVAL clause may be added or updated.
  contents:
  - '(3)  A DEFVAL clause may be added or updated.

    '
- title: (4)  A REFERENCE clause may be added or updated.
  contents:
  - '(4)  A REFERENCE clause may be added or updated.

    '
- title: (5)  A UNITS clause may be added.
  contents:
  - '(5)  A UNITS clause may be added.

    '
- title: (6)  A conceptual row may be augmented by adding new columnar objects at
  contents:
  - "(6)  A conceptual row may be augmented by adding new columnar objects at\n  \
    \   the end of the row.\n"
- title: (7)  Entirely new objects may be defined, named with previously
  contents:
  - "(7)  Entirely new objects may be defined, named with previously\n     unassigned\
    \ OBJECT IDENTIFIER values.\n   Otherwise, if the semantics of any previously\
    \ defined object are\n   changed (i.e., if a non-editorial change is made to any\
    \ clause other\n   those specifically allowed above), then the OBJECT IDENTIFIER\
    \ value\n   associated with that object must also be changed.\n   Note that changing\
    \ the descriptor associated with an existing object\n   is considered a semantic\
    \ change, as these strings may be used in an\n   IMPORTS statement.\n   Finally,\
    \ note that if an object has the value of its STATUS clause\n   changed, then\
    \ the value of its DESCRIPTION clause should be updated\n   accordingly.\n"
- title: 10.3.  Notification Definitions
  contents:
  - "10.3.  Notification Definitions\n   A notification definition may be revised\
    \ in any of the following\n   ways:\n   (1)  A REFERENCE clause may be added or\
    \ updated.\n   Otherwise, if the semantics of any previously defined notification\n\
    \   are changed (i.e., if a non-editorial change is made to any clause\n   other\
    \ those specifically allowed above), then the OBJECT IDENTIFIER\n   value associated\
    \ with that notification must also be changed.\n   Note that changing the descriptor\
    \ associated with an existing\n   notification is considered a semantic change,\
    \ as these strings may be\n   used in an IMPORTS statement.\n   Finally, note\
    \ that if an object has the value of its STATUS clause\n   changed, then the value\
    \ of its DESCRIPTION clause should be updated\n   accordingly.\n"
- title: '11.  Appendix A: de-OSIfying a MIB module'
  contents:
  - "11.  Appendix A: de-OSIfying a MIB module\n   There has been an increasing amount\
    \ of work recently on taking MIBs\n   defined by other organizations (e.g., the\
    \ IEEE) and de-osifying them\n   for use with the Internet-standard network management\
    \ framework.  The\n   steps to achieve this are straight-forward, though tedious.\
    \  Of\n   course, it is helpful to already be experienced in writing MIB\n   modules\
    \ for use with the Internet-standard network management\n   framework.\n   The\
    \ first step is to construct a skeletal MIB module, as shown\n   earlier in Section\
    \ 5.8.  The next step is to categorize the objects\n   into groups.  Optional\
    \ objects are not permitted.  Thus, when a MIB\n   module is created, optional\
    \ objects must be placed in a additional\n   groups, which, if implemented, all\
    \ objects in the group must be\n   implemented.  For the first pass, it is wisest\
    \ to simply ignore any\n   optional objects in the original MIB:  experience shows\
    \ it is better\n   to define a core MIB module first, containing only essential\
    \ objects;\n   later, if experience demands, other objects can be added.\n"
- title: 11.1.  Managed Object Mapping
  contents:
  - "11.1.  Managed Object Mapping\n   Next for each managed object class, determine\
    \ whether there can exist\n   multiple instances of that managed object class.\
    \  If not, then for\n   each of its attributes, use the OBJECT-TYPE macro to make\
    \ an\n   equivalent definition.\n   Otherwise, if multiple instances of the managed\
    \ object class can\n   exist, then define a conceptual table having conceptual\
    \ rows each\n   containing a columnar object for each of the managed object class's\n\
    \   attributes.  If the managed object class is contained within the\n   containment\
    \ tree of another managed object class, then the assignment\n   of an object is\
    \ normally required for each of the \"distinguished\n   attributes\" of the containing\
    \ managed object class.  If they do not\n   already exist within the MIB module,\
    \ then they can be added via the\n   definition of additional columnar objects\
    \ in the conceptual row\n   corresponding to the contained managed object class.\n\
    \   In defining a conceptual row, it is useful to consider the\n   optimization\
    \ of network management operations which will act upon its\n   columnar objects.\
    \  In particular, it is wisest to avoid defining more\n   columnar objects within\
    \ a conceptual row, than can fit in a single\n   PDU.  As a rule of thumb, a conceptual\
    \ row should contain no more\n   than approximately 20 objects.  Similarly, or\
    \ as a way to abide by\n   the \"20 object guideline\", columnar objects should\
    \ be grouped into\n   tables according to the expected grouping of network management\n\
    \   operations upon them.  As such, the content of conceptual rows should\n  \
    \ reflect typical access scenarios, e.g., they should be organized\n   along functional\
    \ lines such as one row for statistics and another row\n   for parameters, or\
    \ along usage lines such as commonly-needed objects\n   versus rarely-needed objects.\n\
    \   On the other hand, the definition of conceptual rows where the number\n  \
    \ of columnar objects used as indexes outnumbers the number used to\n   hold information,\
    \ should also be avoided.  In particular, the\n   splitting of a managed object\
    \ class's attributes into many conceptual\n   tables should not be used as a way\
    \ to obtain the same degree of\n   flexibility/complexity as is often found in\
    \ MIBs with a myriad of\n   optionals.\n"
- title: 11.1.1.  Mapping to the SYNTAX clause
  contents:
  - "11.1.1.  Mapping to the SYNTAX clause\n   When mapping to the SYNTAX clause of\
    \ the OBJECT-TYPE macro:\n"
- title: (1)  An object with BOOLEAN syntax becomes a TruthValue [3].
  contents:
  - '(1)  An object with BOOLEAN syntax becomes a TruthValue [3].

    '
- title: (2)  An object with INTEGER syntax becomes an Integer32.
  contents:
  - '(2)  An object with INTEGER syntax becomes an Integer32.

    '
- title: (3)  An object with ENUMERATED syntax becomes an INTEGER with
  contents:
  - "(3)  An object with ENUMERATED syntax becomes an INTEGER with\n     enumerations,\
    \ taking any of the values given which can be\n     represented with an Integer32.\n"
- title: (4)  An object with BIT STRING syntax having enumerations becomes a BITS
  contents:
  - "(4)  An object with BIT STRING syntax having enumerations becomes a BITS\n  \
    \   construct.\n"
- title: (5)  An object with BIT STRING syntax but no enumerations becomes an
  contents:
  - "(5)  An object with BIT STRING syntax but no enumerations becomes an\n     OCTET\
    \ STRING.\n"
- title: (6)  An object with a character string syntax becomes either an OCTET
  contents:
  - "(6)  An object with a character string syntax becomes either an OCTET\n     STRING,\
    \ or a DisplayString [3], depending on the repertoire of the\n     character string.\n"
- title: (7)  A non-tabular object with a complex syntax, such as REAL or
  contents:
  - "(7)  A non-tabular object with a complex syntax, such as REAL or\n     EXTERNAL,\
    \ must be decomposed, usually into an OCTET STRING (if\n     sensible).  As a\
    \ rule, any object with a complicated syntax should\n     be avoided.\n"
- title: (8)  Tabular objects must be decomposed into rows of columnar objects.
  contents:
  - '(8)  Tabular objects must be decomposed into rows of columnar objects.

    '
- title: 11.1.2.  Mapping to the UNITS clause
  contents:
  - "11.1.2.  Mapping to the UNITS clause\n   If the description of this managed object\
    \ defines a unit-basis, then\n   mapping to this clause is straight-forward.\n"
- title: 11.1.3.  Mapping to the MAX-ACCESS clause
  contents:
  - "11.1.3.  Mapping to the MAX-ACCESS clause\n   This is straight-forward.\n"
- title: 11.1.4.  Mapping to the STATUS clause
  contents:
  - "11.1.4.  Mapping to the STATUS clause\n   This is straight-forward.\n"
- title: 11.1.5.  Mapping to the DESCRIPTION clause
  contents:
  - "11.1.5.  Mapping to the DESCRIPTION clause\n   This is straight-forward:  simply\
    \ copy the text, making sure that any\n   embedded double quotation marks are\
    \ sanitized (i.e., replaced with\n   single-quotes or removed).\n"
- title: 11.1.6.  Mapping to the REFERENCE clause
  contents:
  - "11.1.6.  Mapping to the REFERENCE clause\n   This is straight-forward:  simply\
    \ include a textual reference to the\n   object being mapped, the document which\
    \ defines the object, and\n   perhaps a page number in the document.\n"
- title: 11.1.7.  Mapping to the INDEX clause
  contents:
  - "11.1.7.  Mapping to the INDEX clause\n   If necessary, decide how instance-identifiers\
    \ for columnar objects\n   are to be formed and define this clause accordingly.\n"
- title: 11.1.8.  Mapping to the DEFVAL clause
  contents:
  - "11.1.8.  Mapping to the DEFVAL clause\n   Decide if a meaningful default value\
    \ can be assigned to the object\n   being mapped, and if so, define the DEFVAL\
    \ clause accordingly.\n"
- title: 11.2.  Action Mapping
  contents:
  - "11.2.  Action Mapping\n   Actions are modeled as read-write objects, in which\
    \ writing a\n   particular value results in a state change.  (Usually, as a part\
    \ of\n   this state change, some action might take place.)\n"
- title: 11.2.1.  Mapping to the SYNTAX clause
  contents:
  - "11.2.1.  Mapping to the SYNTAX clause\n   Usually the Integer32 syntax is used\
    \ with a distinguished value\n   provided for each action that the object provides\
    \ access to.  In\n   addition, there is usually one other distinguished value,\
    \ which is\n   the one returned when the object is read.\n"
- title: 11.2.2.  Mapping to the MAX-ACCESS clause
  contents:
  - "11.2.2.  Mapping to the MAX-ACCESS clause\n   Always use read-write or read-create.\n"
- title: 11.2.3.  Mapping to the STATUS clause
  contents:
  - "11.2.3.  Mapping to the STATUS clause\n   This is straight-forward.\n"
- title: 11.2.4.  Mapping to the DESCRIPTION clause
  contents:
  - "11.2.4.  Mapping to the DESCRIPTION clause\n   This is straight-forward:  simply\
    \ copy the text, making sure that any\n   embedded double quotation marks are\
    \ sanitized (i.e., replaced with\n   single-quotes or removed).\n"
- title: 11.2.5.  Mapping to the REFERENCE clause
  contents:
  - "11.2.5.  Mapping to the REFERENCE clause\n   This is straight-forward:  simply\
    \ include a textual reference to the\n   action being mapped, the document which\
    \ defines the action, and\n   perhaps a page number in the document.\n"
- title: 11.3.  Event Mapping
  contents:
  - "11.3.  Event Mapping\n   Events are modeled as SNMPv2 notifications using NOTIFICATION-TYPE\n\
    \   macro.  However, recall that SNMPv2 emphasizes trap-directed polling.\n  \
    \ As such, few, and usually no, notifications, need be defined for any\n   MIB\
    \ module.\n"
- title: 11.3.1.  Mapping to the STATUS clause
  contents:
  - "11.3.1.  Mapping to the STATUS clause\n   This is straight-forward.\n"
- title: 11.3.2.  Mapping to the DESCRIPTION clause
  contents:
  - "11.3.2.  Mapping to the DESCRIPTION clause\n   This is straight-forward:  simply\
    \ copy the text, making sure that any\n   embedded double quotation marks are\
    \ sanitized (i.e., replaced with\n   single-quotes or removed).\n"
- title: 11.3.3.  Mapping to the REFERENCE clause
  contents:
  - "11.3.3.  Mapping to the REFERENCE clause\n   This is straight-forward:  simply\
    \ include a textual reference to the\n   notification being mapped, the document\
    \ which defines the\n   notification, and perhaps a page number in the document.\n"
- title: '12.  Appendix B: UTC Time Format'
  contents:
  - "12.  Appendix B: UTC Time Format\n   Several clauses defined in this document\
    \ use the UTC Time format:\n     YYMMDDHHMMZ\n     where: YY - last two digits\
    \ of year\n            MM - month (01 through 12)\n            DD - day of month\
    \ (01 through 31)\n            HH - hours (00 through 23)\n            MM - minutes\
    \ (00 through 59)\n             Z - the character \"Z\" denotes Greenwich Mean\
    \ Time (GMT).\n   For example, \"9502192015Z\" represents 8:15pm GMT on 19 February\
    \ 1995.\n"
- title: '13.  Appendix C: Detailed Sub-typing Rules'
  contents:
  - '13.  Appendix C: Detailed Sub-typing Rules

    '
- title: 13.1.  Syntax Rules
  contents:
  - "13.1.  Syntax Rules\n   The syntax rules for sub-typing are given below.  Note\
    \ that while\n   this syntax is based on ASN.1, it includes some extensions beyond\n\
    \   what is allowed in ASN.1, and a number of ASN.1 constructs are not\n   allowed\
    \ by this syntax.\n     <integerSubType>\n         ::= <empty>\n           | \"\
    (\" <range> [\"|\" <range>]... \")\"\n     <octetStringSubType>\n         ::=\
    \ <empty>\n           | \"(\" \"SIZE\" \"(\" <range> [\"|\" <range>]... \")\"\
    \ \")\"\n     <range>\n         ::= <value>\n           | <value> \"..\" <value>\n\
    \     <value>\n         ::= \"-\" <number>\n           | <number>\n          \
    \ | <hexString>\n           | <binString>\n     where:\n         <empty>     is\
    \ the empty string\n         <number>    is a non-negative integer\n         <hexString>\
    \ is a hexadecimal string (i.e. 'xxxx'H)\n         <binString> is a binary string\
    \ (i.e. 'xxxx'B)\n         <range> is further restricted as follows:\n       \
    \      - any <value> used in a SIZE clause must be non-negative.\n           \
    \  - when a pair of values is specified, the first value\n               must\
    \ be less than the second value.\n             - when multiple ranges are specified,\
    \ the ranges may\n               not overlap but may touch. For example, (1..4\
    \ | 4..9)\n               is invalid, and (1..4 | 5..9) is valid.\n          \
    \   - the ranges must be a subset of the maximum range of the\n              \
    \ base type.\n"
- title: 13.2.  Examples
  contents:
  - '13.2.  Examples

    '
- title: 'Some examples of legal sub-typing:'
  contents:
  - "Some examples of legal sub-typing:\n         Integer32 (-20..100)\n         Integer32\
    \ (0..100 | 300..500)\n         Integer32 (300..500 | 0..100)\n         Integer32\
    \ (0 | 2 | 4 | 6 | 8 | 10)\n         OCTET STRING (SIZE(0..100))\n         OCTET\
    \ STRING (SIZE(0..100 | 300..500))\n         OCTET STRING (SIZE(0 | 2 | 4 | 6\
    \ | 8 | 10))\n"
- title: 'Some examples of illegal sub-typing:'
  contents:
  - "Some examples of illegal sub-typing:\n     Integer32 (150..100)         -- first\
    \ greater than second\n     Integer32 (0..100 | 50..500) -- ranges overlap\n \
    \    Integer32 (0 | 2 | 0 )       -- value duplicated\n     Integer32 (MIN..-1\
    \ | 1..MAX) -- MIN and MAX not allowed\n     Integer32 ((SIZE (0..34))    -- must\
    \ not use SIZE\n     OCTET STRING (0..100)        -- must use SIZE\n     OCTET\
    \ STRING (SIZE(-10..100)) -- negative SIZE\n"
- title: 13.3.  Rules for Textual Conventions
  contents:
  - "13.3.  Rules for Textual Conventions\n   Sub-typing of Textual Conventions (see\
    \ [3]) is allowed but must be\n   valid.  In particular, each range specified\
    \ for the textual\n   convention must be a subset of a range specified for the\
    \ base type.\n   For example,\n     Tc1 ::= INTEGER (1..10 | 11..20)\n     Tc2\
    \ ::= Tc1 (2..10 | 12..15)       -- is valid\n     Tc3 ::= Tc1 (4..8)        \
    \         -- is valid\n     Tc4 ::= Tc1 (8..12)                -- is invalid\n"
- title: 14.  Security Considerations
  contents:
  - "14.  Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 15.  Editor's Address
  contents:
  - "15.  Editor's Address\n   Keith McCloghrie\n   Cisco Systems, Inc.\n   170 West\
    \ Tasman Drive\n   San Jose, CA  95134-1706\n   US\n   Phone: +1 408 526 5260\n\
    \   EMail: kzm@cisco.com\n"
- title: 16.  Acknowledgements
  contents:
  - "16.  Acknowledgements\n   This document is the result of significant work by\
    \ the four major\n   contributors:\n   Jeffrey D. Case (SNMP Research, case@snmp.com)\n\
    \   Keith McCloghrie (Cisco Systems, kzm@cisco.com)\n   Marshall T. Rose (Dover\
    \ Beach Consulting, mrose@dbc.mtview.ca.us)\n   Steven Waldbusser (International\
    \ Network Services, stevew@uni.ins.com)\n   In addition, the contributions of\
    \ the SNMPv2 Working Group are\n   acknowledged.  In particular, a special thanks\
    \ is extended for the\n   contributions of:\n     Alexander I. Alten (Novell)\n\
    \     Dave Arneson (Cabletron)\n     Uri Blumenthal (IBM)\n     Doug Book (Chipcom)\n\
    \     Kim Curran (Bell-Northern Research)\n     Jim Galvin (Trusted Information\
    \ Systems)\n     Maria Greene (Ascom Timeplex)\n     Iain Hanson (Digital)\n \
    \    Dave Harrington (Cabletron)\n     Nguyen Hien (IBM)\n     Jeff Johnson (Cisco\
    \ Systems)\n     Michael Kornegay (Object Quest)\n     Deirdre Kostick (AT&T Bell\
    \ Labs)\n     David Levi (SNMP Research)\n     Daniel Mahoney (Cabletron)\n  \
    \   Bob Natale (ACE*COMM)\n     Brian O'Keefe (Hewlett Packard)\n     Andrew Pearson\
    \ (SNMP Research)\n     Dave Perkins (Peer Networks)\n     Randy Presuhn (Peer\
    \ Networks)\n     Aleksey Romanov (Quality Quorum)\n     Shawn Routhier (Epilogue)\n\
    \     Jon Saperia (BGS Systems)\n     Bob Stewart (Cisco Systems, bstewart@cisco.com),\
    \ chair\n     Kaj Tesink (Bellcore)\n     Glenn Waters (Bell-Northern Research)\n\
    \     Bert Wijnen (IBM)\n"
- title: 17.  References
  contents:
  - '17.  References

    '
- title: '[1]  Information processing systems - Open Systems Interconnection -'
  contents:
  - "[1]  Information processing systems - Open Systems Interconnection -\n     Specification\
    \ of Abstract Syntax Notation One (ASN.1),\n     International Organization for\
    \ Standardization.  International\n     Standard 8824, (December, 1987).\n"
- title: '[2]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and'
  contents:
  - "[2]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\n     S. Waldbusser,\
    \ \"Conformance Statements for Version 2 of the Simple\n     Network Management\
    \ Protocol (SNMPv2)\", RFC 1904, January 1996.\n"
- title: '[3]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and'
  contents:
  - "[3]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\n     S. Waldbusser,\
    \ \"Textual Conventions for Version 2 of the Simple\n     Network Management Protocol\
    \ (SNMPv2)\", RFC 1903, January 1996.\n"
- title: '[4]  Information processing systems - Open Systems Interconnection -'
  contents:
  - "[4]  Information processing systems - Open Systems Interconnection -\n     Specification\
    \ of Basic Encoding Rules for Abstract Syntax Notation\n     One (ASN.1), International\
    \ Organization for Standardization.\n     International Standard 8825, (December,\
    \ 1987).\n"
- title: '[5]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and'
  contents:
  - "[5]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\n     S. Waldbusser,\
    \ \"Management Information Base for Version 2 of the\n     Simple Network Management\
    \ Protocol (SNMPv2)\", RFC 1907,\n     January 1996.\n"
- title: '[6]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and'
  contents:
  - "[6]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\n     S. Waldbusser,\
    \ \"Protocol Operations for Version 2 of the Simple\n     Network Management Protocol\
    \ (SNMPv2)\", RFC 1905, January 1996.\n"
- title: '[7]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and'
  contents:
  - "[7]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\n     S. Waldbusser,\
    \ \"Coexistence between Version 1 and Version 2 of the\n     Internet-standard\
    \ Network Management Framework\", RFC 1908,\n     January 1996.\n"
