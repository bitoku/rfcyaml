- title: __initial_text__
  contents:
  - '                   Content Splicing for RTP Sessions

    '
- title: Abstract
  contents:
  - "Abstract\n   Content splicing is a process that replaces the content of a main\n\
    \   multimedia stream with other multimedia content and delivers the\n   substitutive\
    \ multimedia content to the receivers for a period of\n   time.  Splicing is commonly\
    \ used for insertion of local\n   advertisements by cable operators, whereby national\
    \ advertisement\n   content is replaced with a local advertisement.\n   This memo\
    \ describes some use cases for content splicing and a set of\n   requirements\
    \ for splicing content delivered by RTP.  It provides\n   concrete guidelines\
    \ for how an RTP mixer can be used to handle\n   content splicing.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6828.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. System Model and Terminology ....................................3\n  \
    \ 3. Requirements for RTP Splicing ...................................6\n   4.\
    \ Content Splicing for RTP Sessions ...............................7\n      4.1.\
    \ RTP Processing in RTP Mixer ................................7\n      4.2. RTCP\
    \ Processing in RTP Mixer ...............................8\n      4.3. Considerations\
    \ for Handling Media Clipping at the\n           RTP Layer .................................................10\n\
    \      4.4. Congestion Control Considerations .........................11\n  \
    \    4.5. Considerations for Implementing Undetectable Splicing .....13\n   5.\
    \ Implementation Considerations ..................................13\n   6. Security\
    \ Considerations ........................................14\n   7. Acknowledgments\
    \ ................................................15\n   8. References .....................................................15\n\
    \      8.1. Normative References ......................................15\n  \
    \    8.2. Informative References ....................................15\n   Appendix\
    \ A. Why Mixer Is Chosen ...................................17\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document outlines how content splicing can be used\
    \ in RTP\n   sessions.  Splicing, in general, is a process where part of a\n \
    \  multimedia content is replaced with other multimedia content and\n   delivered\
    \ to the receivers for a period of time.  The substitutive\n   content can be\
    \ provided, for example, via another stream or via local\n   media file storage.\
    \  One representative use case for splicing is\n   local advertisement insertion.\
    \  This allows content providers to\n   replace national advertising content with\
    \ their own regional\n   advertising content prior to delivering the regional\
    \ advertising\n   content to the receivers.  Besides the advertisement insertion\
    \ use\n   case, there are other use cases in which the splicing technology can\n\
    \   be applied, for example, splicing a recorded video into a video\n   conferencing\
    \ session or implementing a playlist server that stitches\n   pieces of video\
    \ together.\n   Content splicing is a well-defined operation in MPEG-based cable\
    \ TV\n   systems.  Indeed, the Society for Cable Telecommunications Engineers\n\
    \   (SCTE) has created two standards, [SCTE30] and [SCTE35], to\n   standardize\
    \ MPEG2-TS splicing procedures.  SCTE 30 creates a\n   standardized method for\
    \ communication between advertisement server\n   and splicer, and SCTE 35 supports\
    \ splicing of MPEG2 transport\n   streams.\n   When using multimedia splicing\
    \ into the Internet, the media may be\n   transported by RTP.  In this case, the\
    \ original media content and\n   substitutive media content will use the same\
    \ time period but may\n   contain different numbers of RTP packets due to different\
    \ media\n   codecs and entropy coding.  This mismatch may require some\n   adjustments\
    \ of the RTP header sequence number to maintain\n   consistency.  [RFC3550] provides\
    \ the tools to enable seamless content\n   splicing in RTP sessions, but to date\
    \ there have been no clear\n   guidelines on how to use these tools.\n   This\
    \ memo outlines the requirements for content splicing in RTP\n   sessions and\
    \ describes how an RTP mixer can be used to meet these\n   requirements.\n"
- title: 2.  System Model and Terminology
  contents:
  - "2.  System Model and Terminology\n   In this document, the splicer, an intermediary\
    \ network element,\n   handles RTP splicing.  The splicer can receive main content\
    \ and\n   substitutive content simultaneously but will send one of them at one\n\
    \   point of time.\n   When RTP splicing begins, the splicer sends the substitutive\
    \ content\n   to the RTP receiver instead of the main content for a period of\
    \ time.\n   When RTP splicing ends, the splicer switches back to sending the main\n\
    \   content to the RTP receiver.\n   A simplified RTP splicing diagram is depicted\
    \ in Figure 1, in which\n   only one main content flow and one substitutive content\
    \ flow are\n   given.  Actually, the splicer can handle multiple splicing for\n\
    \   multiple RTP sessions simultaneously.  RTP splicing may happen more\n   than\
    \ once in multiple time slots during the lifetime of the main RTP\n   stream.\
    \  The methods by which the splicer learns when to start and\n   end the splicing\
    \ are out of scope for this document.\n         +---------------+\n         |\
    \               | Main Content +-----------+\n         |   Main RTP    |------------->|\
    \           | Output Content\n         |   Content     |              |  Splicer\
    \  |--------------->\n         +---------------+   ---------->|           |\n\
    \                            |           +-----------+\n                     \
    \       |\n                            | Substitutive Content\n              \
    \              |\n                            |\n                  +-----------------------+\n\
    \                  |   Substitutive RTP    |\n                  |       Content\
    \         |\n                  |          or           |\n                  |\
    \   Local File Storage  |\n                  +-----------------------+\n     \
    \               Figure 1: RTP Splicing Architecture\n   This document uses the\
    \ following terminologies.\n   Output RTP Stream\n      The RTP stream that the\
    \ RTP receiver is currently receiving.  The\n      content of the output of the\
    \ RTP stream can be either main content\n      or substitutive content.\n   Main\
    \ Content\n      The multimedia content that is conveyed in the main RTP stream.\n\
    \      Main content will be replaced by the substitutive content during\n    \
    \  splicing.\n   Main RTP Stream\n      The RTP stream that the splicer is receiving.\
    \  The content of the\n      main RTP stream can be replaced by substitutive content\
    \ for a\n      period of time.\n   Main RTP Sender\n      The sender of RTP packets\
    \ carrying the main RTP stream.\n   Substitutive Content\n      The multimedia\
    \ content that replaces the main content during\n      splicing.  The substitutive\
    \ content can, for example, be contained\n      in an RTP stream from a media\
    \ sender or fetched from local media\n      file storage.\n   Substitutive RTP\
    \ Stream\n      An RTP stream with new content that will replace the content in\n\
    \      the main RTP stream.  The substitutive RTP stream and main RTP\n      stream\
    \ are two separate streams.  If the substitutive content is\n      provided via\
    \ a substitutive RTP stream, the substitutive RTP\n      stream must pass through\
    \ the splicer before the substitutive\n      content is delivered to the receiver.\n\
    \   Substitutive RTP Sender\n      The sender of RTP packets carrying the substitutive\
    \ RTP stream.\n   Splicing-In Point\n      A virtual point in the RTP stream,\
    \ suitable for substitutive\n      content entry, typically in the boundary between\
    \ two independently\n      decodable frames.\n   Splicing-Out Point\n      A virtual\
    \ point in the RTP stream, suitable for substitutive\n      content exit, typically\
    \ in the boundary between two independently\n      decodable frames.\n   Splicer\n\
    \      An intermediary node that inserts substitutive content into a main\n  \
    \    RTP stream.  The splicer sends substitutive content to the RTP\n      receiver\
    \ instead of main content during splicing.  It is also\n      responsible for\
    \ processing RTP Control Protocol (RTCP) traffic\n      between the RTP sender\
    \ and the RTP receiver.\n"
- title: 3.  Requirements for RTP Splicing
  contents:
  - "3.  Requirements for RTP Splicing\n   In order to allow seamless content splicing\
    \ at the RTP layer, the\n   following requirements must be met.  Meeting these\
    \ will also allow,\n   but not require, seamless content splicing at layers above\
    \ RTP.\n   REQ-1:\n      The splicer should be agnostic about the network and\n\
    \      transport-layer protocols used to deliver the RTP streams.\n   REQ-2:\n\
    \      The splicing operation at the RTP layer must allow splicing at any\n  \
    \    point required by the media content and must not constrain when\n      splicing-in\
    \ or splicing-out operations can take place.\n   REQ-3:\n      Splicing of RTP\
    \ content must be backward compatible with the\n      RTP/RTCP protocol, associated\
    \ profiles, payload formats, and\n      extensions.\n   REQ-4:\n      The splicer\
    \ will modify the content of RTP packets and thus break\n      the end-to-end\
    \ security, at a minimum, breaking the data integrity\n      and source authentication.\
    \  If the splicer is designated to insert\n      substitutive content, it must\
    \ be trusted, i.e., be in the security\n      context(s) with the main RTP sender,\
    \ the substitutive RTP sender,\n      and the receivers.  If encryption is employed,\
    \ the splicer\n      commonly must decrypt the inbound RTP packets and re-encrypt\
    \ the\n      outbound RTP packets after splicing.\n   REQ-5:\n      The splicer\
    \ should rewrite as necessary and forward RTCP messages\n      (e.g., including\
    \ packet loss, jitter, etc.) sent from a downstream\n      receiver to the main\
    \ RTP sender or the substitutive RTP sender,\n      and thus allow the main RTP\
    \ sender or substitutive RTP sender to\n      learn the performance of the downstream\
    \ receiver when its content\n      is being passed to an RTP receiver.  In addition,\
    \ the splicer\n      should rewrite RTCP messages from the main RTP sender or\n\
    \      substitutive RTP sender to the receiver.\n   REQ-6:\n      The splicer\
    \ must not affect other RTP sessions running between the\n      RTP sender and\
    \ the RTP receiver and must be transparent for the\n      RTP sessions it does\
    \ not splice.\n   REQ-7:\n      The RTP receiver should not be able to detect\
    \ any splicing points\n      in the RTP stream produced by the splicer on the\
    \ RTP protocol\n      level.  For the advertisement insertion use case, it is\
    \ important\n      to make it difficult for the RTP receiver to detect where an\n\
    \      advertisement insertion is starting or ending from the RTP\n      packets,\
    \ and thus avoiding the RTP receiver from filtering out the\n      advertisement\
    \ content.  This memo only focuses on making the\n      splicing undetectable\
    \ at the RTP layer.  The corresponding\n      processing is depicted in Section\
    \ 4.5.\n"
- title: 4.  Content Splicing for RTP Sessions
  contents:
  - "4.  Content Splicing for RTP Sessions\n   The RTP specification [RFC3550] defines\
    \ two types of middleboxes: RTP\n   translators and RTP mixers.  Splicing is best\
    \ viewed as a mixing\n   operation.  The splicer generates a new RTP stream that\
    \ is a mix of\n   the main RTP stream and the substitutive RTP stream.  An RTP\
    \ mixer is\n   therefore an appropriate model for a content splicer.  In the next\n\
    \   four subsections (from Section 4.1 to Section 4.4), the document\n   analyzes\
    \ how the mixer handles RTP splicing and how it satisfies the\n   general requirements\
    \ listed in Section 3.  In Section 4.5, the\n   document looks at REQ-7 in order\
    \ to hide the fact that splicing takes\n   place.\n"
- title: 4.1.  RTP Processing in RTP Mixer
  contents:
  - "4.1.  RTP Processing in RTP Mixer\n   A splicer could be implemented as a mixer\
    \ that receives the main RTP\n   stream and the substitutive content (possibly\
    \ via a substitutive RTP\n   stream), and sends a single output RTP stream to\
    \ the receiver(s).\n   That output RTP stream will contain either the main content\
    \ or the\n   substitutive content.  The output RTP stream will come from the mixer\n\
    \   and will have the synchronization source (SSRC) of the mixer rather\n   than\
    \ the main RTP sender or the substitutive RTP sender.\n   The mixer uses its own\
    \ SSRC, sequence number space, and timing model\n   when generating the output\
    \ stream.  Moreover, the mixer may insert\n   the SSRC of the main RTP stream\
    \ into the contributing source (CSRC)\n   list in the output media stream.\n \
    \  At the splicing-in point, when the substitutive content becomes\n   active,\
    \ the mixer chooses the substitutive RTP stream as the input\n   stream and extracts\
    \ the payload data (i.e., substitutive content).\n   If the substitutive content\
    \ comes from local media file storage, the\n   mixer directly fetches the substitutive\
    \ content.  After that, the\n   mixer encapsulates substitutive content instead\
    \ of main content as\n   the payload of the output media stream and then sends\
    \ the output RTP\n   media stream to the receiver.  The mixer may insert the SSRC\
    \ of the\n   substitutive RTP stream into the CSRC list in the output media\n\
    \   stream.  If the substitutive content comes from local media file\n   storage,\
    \ the mixer should leave the CSRC list blank.\n   At the splicing-out point, when\
    \ the substitutive content ends, the\n   mixer retrieves the main RTP stream as\
    \ the input stream and extracts\n   the payload data (i.e., main content).  After\
    \ that, the mixer\n   encapsulates main content instead of substitutive content\
    \ as the\n   payload of the output media stream and then sends the output media\n\
    \   stream to the receivers.  Moreover, the mixer may insert the SSRC of\n   the\
    \ main RTP stream into the CSRC list in the output media stream as\n   before.\n\
    \   Note that if the content is too large to fit into RTP packets sent to\n  \
    \ the RTP receiver, the mixer needs to transcode or perform\n   application-layer\
    \ fragmentation.  Usually the mixer is deployed as\n   part of a managed system\
    \ and MTU will be carefully managed by this\n   system.  This document does not\
    \ raise any new MTU related issues\n   compared to a standard mixer described\
    \ in [RFC3550].\n   Splicing may occur more than once during the lifetime of the\
    \ main RTP\n   stream.  This means the mixer needs to send main content and\n\
    \   substitutive content in turn with its own SSRC identifier.  From\n   receiver\
    \ point of view, the only source of the output stream is the\n   mixer regardless\
    \ of where the content is coming from.\n"
- title: 4.2.  RTCP Processing in RTP Mixer
  contents:
  - "4.2.  RTCP Processing in RTP Mixer\n   By monitoring available bandwidth and\
    \ buffer levels and by computing\n   network metrics such as packet loss, network\
    \ jitter, and delay, an\n   RTP receiver can learn the network performance and\
    \ communicate this\n   to the RTP sender via RTCP reception reports.\n   According\
    \ to the description in Section 7.3 of [RFC3550], the mixer\n   splits the RTCP\
    \ flow between the sender and receiver into two\n   separate RTCP loops; the RTP\
    \ sender has no idea about the situation\n   on the receiver.  But splicing is\
    \ a process where the mixer selects\n   one media stream from multiple streams\
    \ rather than mixing them, so\n   the mixer can leave the SSRC identifier in the\
    \ RTCP report intact\n   (i.e., the SSRC of the downstream receiver).  This enables\
    \ the main\n   RTP sender or the substitutive RTP sender to learn the situation\
    \ on\n   the receiver.\n   If the RTCP report corresponds to a time interval that\
    \ is entirely\n   main content or entirely substitutive content, the number of\
    \ output\n   RTP packets containing substitutive content is equal to the number\
    \ of\n   input substitutive RTP packets (from the substitutive RTP stream)\n \
    \  during splicing.  In the same manner, the number of output RTP\n   packets\
    \ containing main content is equal to the number of input main\n   RTP packets\
    \ (from the main RTP stream) during non-splicing unless the\n   mixer fragments\
    \ the input RTP packets.  This means that the mixer\n   does not need to modify\
    \ the loss packet fields in reception report\n   blocks in RTCP reports.  But,\
    \ if the mixer fragments the input RTP\n   packets, it may need to modify the\
    \ loss packet fields to compensate\n   for the fragmentation.  Whether the input\
    \ RTP packets are fragmented\n   or not, the mixer still needs to change the SSRC\
    \ field in the report\n   block to the SSRC identifier of the main RTP sender\
    \ or the\n   substitutive RTP sender and rewrite the extended highest sequence\n\
    \   number field to the corresponding original extended highest sequence\n   number\
    \ before forwarding the RTCP report to the main RTP sender or\n   the substitutive\
    \ RTP sender.\n   If the RTCP report spans the splicing-in point or the splicing-out\n\
    \   point, it reflects the characteristics of the combination of main RTP\n  \
    \ packets and substitutive RTP packets.  In this case, the mixer needs\n   to\
    \ divide the RTCP report into two separate RTCP reports and send\n   them to their\
    \ original RTP senders, respectively.  For each RTCP\n   report, the mixer also\
    \ needs to make the corresponding changes to the\n   packet loss fields in the\
    \ report block besides the SSRC field and the\n   extended highest sequence number\
    \ field.\n   If the mixer receives an RTCP extended report (XR) block, it should\n\
    \   rewrite the XR report block in a similar way to the reception report\n   block\
    \ in the RTCP report.\n   Besides forwarding the RTCP reports sent from the RTP\
    \ receiver, the\n   mixer can also generate its own RTCP reports to inform the\
    \ main RTP\n   sender, or the substitutive RTP sender, of the reception quality\
    \ of\n   content not sent to the RTP receiver when it reaches the mixer.\n   These\
    \ RTCP reports use the SSRC of the mixer.  If the substitutive\n   content comes\
    \ from local media file storage, the mixer does not need\n   to generate RTCP\
    \ reports for the substitutive stream.\n   Based on the above RTCP operating mechanism,\
    \ the RTP sender whose\n   content is being passed to a receiver will see the\
    \ reception quality\n   of its stream as received by the mixer and the reception\
    \ quality of\n   the spliced stream as received by the receiver.  The RTP sender\
    \ whose\n   content is not being passed to a receiver will only see the reception\n\
    \   quality of its stream as received by the mixer.\n   The mixer must forward\
    \ RTCP source description (SDES) and BYE packets\n   from the receiver to the\
    \ sender and may forward them in inverse\n   direction as defined in Section 7.3\
    \ of [RFC3550].\n   Once the mixer receives an RTP/Audio-Visual Profile with Feedback\n\
    \   (AVPF) [RFC4585] transport-layer feedback packet, it must handle it\n   carefully,\
    \ as the feedback packet may contain the information of the\n   content that comes\
    \ from different RTP senders.  In this case, the\n   mixer needs to divide the\
    \ feedback packet into two separate feedback\n   packets and process the information\
    \ in the feedback control\n   information (FCI) in the two feedback packets, just\
    \ as in the RTCP\n   report process described above.\n   If the substitutive content\
    \ comes from local media file storage\n   (i.e., the mixer can be regarded as\
    \ the substitutive RTP sender), any\n   RTCP packets received from downstream\
    \ related to the substitutive\n   content must be terminated on the mixer without\
    \ any further\n   processing.\n"
- title: 4.3.  Considerations for Handling Media Clipping at the RTP Layer
  contents:
  - "4.3.  Considerations for Handling Media Clipping at the RTP Layer\n   This section\
    \ provides informative guidelines on how to handle media\n   substitution at the\
    \ RTP layer to minimize media impact.  Dealing well\n   with the media substitution\
    \ at the RTP layer is necessary for quality\n   implementations.  To perfectly\
    \ erase any media impact needs more\n   considerations at the higher layers. \
    \ How the media substitution is\n   erased at the higher layers is outside of\
    \ the scope of this memo.\n   If the time duration for any substitutive content\
    \ mismatches, i.e.,\n   shorter or longer than the duration of the main content\
    \ to be\n   replaced, then media degradations may occur at the splicing point\
    \ and\n   thus impact the user's experience.\n   If the substitutive content has\
    \ shorter duration from the main\n   content, then there could be a gap in the\
    \ output RTP stream.  The RTP\n   sequence number will be contiguous across this\
    \ gap, but there will be\n   an unexpected jump in the RTP timestamp.  Such a\
    \ gap would cause the\n   receiver to have nothing to play.  This may be unavoidable,\
    \ unless\n   the mixer can adjusts the splice in or splice out point to\n   compensate.\
    \  This assumes the splicing mixer can send more of the\n   main RTP stream in\
    \ place of the shorter substitutive stream or vary\n   the length of the substitutive\
    \ content.  It is the responsibility of\n   the higher-layer protocols and the\
    \ media providers to ensure that the\n   substitutive content is of very similar\
    \ duration as the main content\n   to be replaced.\n   If the substitute content\
    \ has longer duration than the reserved gap\n   duration, there will be an overlap\
    \ between the substitutive RTP\n   stream and the main RTP stream at the splicing-out\
    \ point.  A\n   straightforward approach is that the mixer performs an ungraceful\n\
    \   action and terminates the splicing and switches back to the main RTP\n   stream\
    \ even if this may cause media stuttering on the receiver.\n   Alternatively,\
    \ the mixer may transcode the substitutive content to\n   play at a faster rate\
    \ than normal, to adjust it to the length of the\n   gap in the main content and\
    \ generate a new RTP stream for the\n   transcoded content.  This is a complex\
    \ operation and very specific to\n   the content and media codec used.  Additional\
    \ approaches exist; these\n   types of issues should be taken into account in\
    \ both mixer\n   implementors and media generators to enable smooth substitutions.\n"
- title: 4.4.  Congestion Control Considerations
  contents:
  - "4.4.  Congestion Control Considerations\n   If the substitutive content has somewhat\
    \ different characteristics\n   from the main content it replaces, or if the substitutive\
    \ content is\n   encoded with a different codec or has different encoding bitrate,\
    \ it\n   might overload the network and might cause network congestion on the\n\
    \   path between the mixer and the RTP receiver(s) that would not have\n   been\
    \ caused by the main content.\n   To be robust to network congestion and packet\
    \ loss, a mixer that is\n   performing splicing must continuously monitor the\
    \ status of a\n   downstream network by monitoring any of the following RTCP reports\n\
    \   that are used:\n   1.  RTCP receiver reports indicate packet loss [RFC3550].\n\
    \   2.  RTCP NACKs for lost packet recovery [RFC4585].\n   3.  RTCP Explicit Congestion\
    \ Notification (ECN) Feedback information\n       [RFC6679].\n   Once the mixer\
    \ detects congestion on its downstream link, it will\n   treat these reports as\
    \ follows:\n   1.  If the mixer receives the RTCP receiver reports with packet\
    \ loss\n       indication, it will forward the reports to the substitutive RTP\n\
    \       sender or the main RTP sender as described in Section 4.2.\n   2.  If\
    \ mixer receives the RTCP NACK packets defined in [RFC4585] from\n       the RTP\
    \ receiver for packet loss recovery, it first identifies\n       the content category\
    \ of lost packets to which the NACK\n       corresponds.  Then, the mixer will\
    \ generate new RTCP NACKs for\n       the lost packets with its own SSRC and make\
    \ corresponding changes\n       to their sequence numbers to match original, pre-spliced,\n\
    \       packets.  If the lost substitutive content comes from local media\n  \
    \     file storage, the mixer acting as the substitutive RTP sender\n       will\
    \ directly fetch the lost substitutive content and retransmit\n       it to the\
    \ RTP receiver.  The mixer may buffer the sent RTP\n       packets and do the\
    \ retransmission.\n       It is somewhat complex that the lost packets requested\
    \ in a\n       single RTCP NACK message not only contain the main content but\n\
    \       also the substitutive content.  To address this, the mixer must\n    \
    \   divide the RTCP NACK packet into two separate RTCP NACK packets:\n       one\
    \ requests for the lost main content, and another requests for\n       the lost\
    \ substitutive content.\n   3.  If an ECN-aware mixer receives RTCP ECN feedback\
    \ (RTCP ECN\n       feedback packets or RTCP XR summary reports) defined in [RFC6679]\n\
    \       from the RTP receiver, it must process them in a similar way to\n    \
    \   the RTP/AVPF feedback packet or RTCP XR process described in\n       Section\
    \ 4.2 of this memo.\n   These three methods require the mixer to run a congestion\
    \ control\n   loop and bitrate adaptation between itself and the RTP receiver.\
    \  The\n   mixer can thin or transcode the main RTP stream or the substitutive\n\
    \   RTP stream, but such operations are very inefficient and difficult,\n   and\
    \ they also bring undesirable delay.  Fortunately, as noted in this\n   memo,\
    \ the mixer acting as a splicer can rewrite the RTCP packets sent\n   from the\
    \ RTP receiver and forward them to the RTP sender, thus\n   letting the RTP sender\
    \ knows that congestion is being experienced on\n   the path between the mixer\
    \ and the RTP receiver.  Then, the RTP\n   sender applies its congestion control\
    \ algorithm and reduces the media\n   bitrate to a value that is in compliance\
    \ with congestion control\n   principles for the slowest link.  The congestion\
    \ control algorithm\n   may be a TCP-friendly bitrate adaptation algorithm specified\
    \ in\n   [RFC5348] or a Datagram Congestion Control Protocol (DCCP) congestion\n\
    \   control algorithm defined in [RFC5762].\n   If the substitutive content comes\
    \ from local media file storage, the\n   mixer must directly reduce the bitrate\
    \ as if it were the substitutive\n   RTP sender.\n   From the above analysis,\
    \ to reduce the risk of congestion and\n   maintain the bandwidth consumption\
    \ stable over time, the substitutive\n   RTP stream is recommended to be encoded\
    \ at an appropriate bitrate to\n   match that of the main RTP stream.  If the\
    \ substitutive RTP stream\n   comes from the substitutive RTP sender, this sender\
    \ should have some\n   knowledge about the media encoding bitrate of the main\
    \ content in\n   advance.  Acquiring such knowledge is out of scope in this document.\n"
- title: 4.5.  Considerations for Implementing Undetectable Splicing
  contents:
  - "4.5.  Considerations for Implementing Undetectable Splicing\n   If it is desirable\
    \ to prevent receivers from detecting that splicing\n   is occurring at the RTP\
    \ layer, the mixer must not include a CSRC list\n   in outgoing RTP packets and\
    \ must not forward RTCP messages from the\n   main RTP sender or from the substitutive\
    \ RTP sender.  Due to the\n   absence of a CSRC list in the output RTP stream,\
    \ the RTP receiver\n   only initiates SDES, BYE, and Application-specific functions\
    \ (APP)\n   packets to the mixer without any knowledge of the main RTP sender\
    \ and\n   the substitutive RTP sender.\n   The CSRC list identifies the contributing\
    \ sources; these SSRC\n   identifiers of contributing sources are kept globally\
    \ unique for each\n   RTP session.  The uniqueness of the SSRC identifier is used\
    \ to\n   resolve collisions and to detect RTP-level forwarding loops as\n   defined\
    \ in Section 8.2 of [RFC3550].  A danger that loops involving\n   those contributing\
    \ sources will not be detected will be created by\n   the absence of a CSRC list\
    \ in this case.  The loops could occur if\n   either the mixer is misconfigured\
    \ to form a loop or a second\n   mixer/translator is added, causing packets to\
    \ loop back to upstream\n   of the original mixer.  An undetected RTP packet loop\
    \ is a serious\n   denial-of-service threat, which can consume all available bandwidth\n\
    \   or mixer processing resources until the looped packets are dropped as\n  \
    \ a result of congestion.  So, non-RTP means must be used to detect and\n   resolve\
    \ loops if the mixer does not add a CSRC list.\n"
- title: 5.  Implementation Considerations
  contents:
  - "5.  Implementation Considerations\n   When the mixer is used to handle RTP splicing,\
    \ the RTP receiver does\n   not need any RTP/RTCP extension for splicing.  As\
    \ a trade-off,\n   additional overhead could be induced on the mixer, which uses\
    \ its own\n   sequence number space and timing model.  So the mixer will rewrite\n\
    \   the RTP sequence number and timestamp, whatever splicing is active or\n  \
    \ not, and generate RTCP flows for both sides.  In case the mixer\n   serves multiple\
    \ main RTP streams simultaneously, this may lead to\n   more overhead on the mixer.\n\
    \   If an undetectable splicing requirement is required, the CSRC list is\n  \
    \ not included in the outgoing RTP packet; this brings a potential\n   issue with\
    \ loop detection as briefly described in Section 4.5.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The splicing application is subject to the general\
    \ security\n   considerations of the RTP specification [RFC3550].\n   The mixer\
    \ acting as splicer replaces some content with other content\n   in RTP packets,\
    \ thus breaking any RTP-level end-to-end security, such\n   as integrity protection\
    \ and source authentication.  Thus, any\n   RTP-level or outside security mechanism,\
    \ such as IPsec [RFC4301] or\n   Datagram Transport Layer Security [RFC6347],\
    \ will use a security\n   association between the splicer and the receiver.  When\
    \ using the\n   Secure Real-Time Transport Protocol (SRTP) [RFC3711], the splicer\n\
    \   could be provisioned with the same security association as the main\n   RTP\
    \ sender.  Using a limitation in the SRTP security services\n   regarding source\
    \ authentication, the splicer can modify and\n   re-protect the RTP packets without\
    \ enabling the receiver to detect if\n   the data comes from the original source\
    \ or from the splicer.\n   Security goals to have source authentication all the\
    \ way from the RTP\n   main sender to the receiver through the splicer is not\
    \ possible with\n   splicing and any existing solutions.  A new solution can\n\
    \   theoretically be developed that enables identifying the participating\n  \
    \ entities and what each provides, i.e., the different media sources,\n   main\
    \ and substituting, and the splicer providing the RTP-level\n   integration of\
    \ the media payloads in a common timeline and\n   synchronization context.  Such\
    \ a solution would obviously not meet\n   REQ-7 and will be detectable on the\
    \ RTP level.\n   The nature of this RTP service offered by a network operator\n\
    \   employing a content splicer is that the RTP-layer security\n   relationship\
    \ is between the receiver and the splicer, and between the\n   sender and the\
    \ splicer, but is not end-to-end between the receiver\n   and the sender.  This\
    \ appears to invalidate the undetectability goal,\n   but in the common case,\
    \ the receiver will consider the splicer as the\n   main media source.\n   Some\
    \ RTP deployments use RTP payload security mechanisms (e.g.,\n   ISMACryp [ISMACryp]).\
    \  If any payload internal security mechanisms\n   are used, only the RTP sender\
    \ and the RTP receiver establish that\n   security context, in which case any\
    \ middlebox (e.g., splicer) between\n   the RTP sender and the RTP receiver will\
    \ not get such keying\n   material.  This may impact the splicer's ability to\
    \ perform splicing\n   if it is dependent on RTP payload-level hints for finding\
    \ the splice\n   in and out points.  However, other potential solutions exist\
    \ to\n   specify or mark where the splicing points exist in the media streams.\n\
    \   When using RTP payload security mechanisms, SRTP or other security\n   mechanisms\
    \ at RTP or lower layers can be used to provide integrity\n   and source authentication\
    \ between the splicer and the RTP receiver.\n"
- title: 7.  Acknowledgments
  contents:
  - "7.  Acknowledgments\n   The following individuals have reviewed the earlier versions\
    \ of this\n   specification and provided very valuable comments: Colin Perkins,\n\
    \   Magnus Westerlund, Roni Even, Tom Van Caenegem, Joerg Ott, David R.\n   Oran,\
    \ Cullen Jennings, Ali C. Begen, Charles Eckel, and Ning Zong.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC3550]   Schulzrinne, H., Casner, S., Frederick,\
    \ R., and V.\n               Jacobson, \"RTP: A Transport Protocol for Real-Time\n\
    \               Applications\", STD 64, RFC 3550, July 2003.\n   [RFC4585]   Ott,\
    \ J., Wenger, S., Sato, N., Burmeister, C., and J.\n               Rey, \"Extended\
    \ RTP Profile for Real-time Transport\n               Control Protocol (RTCP)-Based\
    \ Feedback (RTP/AVPF)\",\n               RFC 4585, July 2006.\n   [RFC6679]  \
    \ Westerlund, M., Johansson, I., Perkins, C., O'Hanlon, P.,\n               and\
    \ K. Carlberg, \"Explicit Congestion Notification (ECN)\n               for RTP\
    \ over UDP\", RFC 6679, August 2012.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [ISMACryp]  Internet Streaming Media Alliance\
    \ (ISMA), \"ISMA\n               Encryption and Authentication Specification 2.0\"\
    ,\n               November 2007.\n   [RFC3711]   Baugher, M., McGrew, D., Naslund,\
    \ M., Carrara, E., and K.\n               Norrman, \"The Secure Real-time Transport\
    \ Protocol\n               (SRTP)\", RFC 3711, March 2004.\n   [RFC4301]   Kent,\
    \ S. and K. Seo, \"Security Architecture for the\n               Internet Protocol\"\
    , RFC 4301, December 2005.\n   [RFC5348]   Floyd, S., Handley, M., Padhye, J.,\
    \ and J. Widmer, \"TCP\n               Friendly Rate Control (TFRC): Protocol\
    \ Specification\",\n               RFC 5348, September 2008.\n   [RFC5762]   Perkins,\
    \ C., \"RTP and the Datagram Congestion Control\n               Protocol (DCCP)\"\
    , RFC 5762, April 2010.\n   [RFC6347]   Rescorla, E. and N. Modadugu, \"Datagram\
    \ Transport Layer\n               Security Version 1.2\", RFC 6347, January 2012.\n\
    \   [SCTE30]    Society of Cable Telecommunications Engineers (SCTE),\n      \
    \         \"Digital Program Insertion Splicing API\", 2009.\n   [SCTE35]    Society\
    \ of Cable Telecommunications Engineers (SCTE),\n               \"Digital Program\
    \ Insertion Cueing Message for Cable\",\n               2011.\n"
- title: Appendix A.  Why Mixer Is Chosen
  contents:
  - "Appendix A.  Why Mixer Is Chosen\n   Both a translator and mixer can realize\
    \ splicing by changing a set of\n   RTP parameters.\n   A translator has no SSRC;\
    \ hence it is transparent to the RTP sender\n   and receiver.  Therefore, the\
    \ RTP sender sees the full path to the\n   receiver when the translator is passing\
    \ its content.  When a\n   translator inserts the substitutive content, the RTP\
    \ sender could get\n   a report on the path up to the translator itself.  Additionally,\
    \ if\n   splicing does not occur yet, the translator does not need to rewrite\n\
    \   the RTP header, and the overhead on the translator can be avoided.\n   If\
    \ a mixer is used to do splicing, it can also allow the RTP sender\n   to learn\
    \ the situation of its content on the receiver or on the mixer\n   just like the\
    \ translator does, which is specified in Section 4.2.\n   Compared to the translator,\
    \ the mixer's outstanding benefit is that\n   it is pretty straightforward to\
    \ do with RTCP messages, for example,\n   bit-rate adaptation to handle varying\
    \ network conditions.  But the\n   translator needs more considerations, and its\
    \ implementation is more\n   complex.\n   From the above analysis, both the translator\
    \ and mixer have their own\n   advantages: less overhead or less complexity on\
    \ handling RTCP.  After\n   long and sophisticated discussions, the avtext WG\
    \ members decided\n   that they prefer less complexity rather than less overhead\
    \ and are\n   inclined to choose a mixer to do splicing.\n   If one chooses a\
    \ mixer as splicer, the overhead on the mixer must be\n   taken into account even\
    \ if the splicing has not occurred yet.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Jinwei Xia\n   Huawei\n   Software No.101\n   Nanjing, Yuhuatai\
    \ District 210012\n   China\n   Phone: +86-025-86622310\n   EMail: xiajinwei@huawei.com\n"
