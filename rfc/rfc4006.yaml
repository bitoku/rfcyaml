- title: __initial_text__
  contents:
  - '                 Diameter Credit-Control Application

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies a Diameter application that can be used\
    \ to\n   implement real-time credit-control for a variety of end user services\n\
    \   such as network access, Session Initiation Protocol (SIP) services,\n   messaging\
    \ services, and download services.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n       4.1.   Service-Specific Rating Input and Interoperability....\
    \  13\n       5.5.   Server-Initiated Credit Re-Authorization..............  30\n\
    \       5.6.   Graceful Service Termination..........................  32\n  \
    \     5.7.   Failure Procedures....................................  38\n   6.\
    \  One Time Event...............................................  41\n       6.1.\
    \   Service Price Enquiry.................................  42\n       6.2.  \
    \ Balance Check.........................................  42\n       6.3.   Direct\
    \ Debiting.......................................  43\n       6.4.   Refund................................................\
    \  44\n       6.5.   Failure Procedure.....................................  44\n\
    \   7.  Credit-Control Application State Machine.....................  46\n  \
    \ 8.  Credit-Control AVPs..........................................  55\n    \
    \   8.1.   CC-Correlation-Id AVP.................................  58\n      \
    \ 8.2.   CC-Request-Number AVP.................................  58\n       8.3.\
    \   CC-Request-Type AVP...................................  58\n       8.4.  \
    \ CC-Session-Failover AVP...............................  59\n       8.5.   CC-Sub-Session-Id\
    \ AVP.................................  59\n       8.6.   Check-Balance-Result\
    \ AVP..............................  60\n       8.7.   Cost-Information AVP..................................\
    \  60\n       8.8.   Unit-Value AVP........................................  61\n\
    \       8.9.   Exponent AVP..........................................  61\n  \
    \     8.10.  Value-Digits AVP......................................  61\n    \
    \   8.11.  Currency-Code AVP.....................................  62\n      \
    \ 8.12.  Cost-Unit AVP.........................................  62\n       8.13.\
    \  Credit-Control AVP....................................  62\n       8.14.  Credit-Control-Failure-Handling\
    \ AVP...................  62\n       8.15.  Direct-Debiting-Failure-Handling AVP..................\
    \  63\n       8.16.  Multiple-Services-Credit-Control AVP..................  64\n\
    \       8.17.  Granted-Service-Unit AVP..............................  65\n  \
    \     8.18.  Requested-Service-Unit AVP............................  66\n    \
    \   8.19.  Used-Service-Unit AVP.................................  66\n      \
    \ 8.20.  Tariff-Time-Change AVP................................  67\n       8.21.\
    \  CC-Time AVP...........................................  67\n       8.22.  CC-Money\
    \ AVP..........................................  67\n       8.23.  CC-Total-Octets\
    \ AVP...................................  68\n       8.24.  CC-Input-Octets AVP...................................\
    \  68\n       8.25.  CC-Output-Octets AVP..................................  68\n\
    \       8.26.  CC-Service-Specific-Units AVP.........................  68\n  \
    \     8.27.  Tariff-Change-Usage AVP...............................  68\n    \
    \   8.28.  Service-Identifier AVP................................  69\n      \
    \ 8.29.  Rating-Group AVP......................................  69\n       8.30.\
    \  G-S-U-Pool-Reference AVP..............................  69\n       8.31.  G-S-U-Pool-Identifier\
    \ AVP.............................  70\n       8.32.  CC-Unit-Type AVP......................................\
    \  70\n       8.33.  Validity-Time AVP.....................................  70\n\
    \       8.34.  Final-Unit-Indication AVP.............................  71\n  \
    \     8.35.  Final-Unit-Action AVP.................................  72\n    \
    \   8.36.  Restriction-Filter-Rule AVP...........................  72\n      \
    \ 8.37.  Redirect-Server AVP...................................  73\n       8.38.\
    \  Redirect-Address-Type AVP.............................  73\n       8.39.  Redirect-Server-Address\
    \ AVP...........................  74\n       8.40.  Multiple-Services-Indicator\
    \ AVP.......................  74\n       8.41.  Requested-Action AVP..................................\
    \  74\n       8.42.  Service-Context-Id AVP................................  75\n\
    \       8.43.  Service-Parameter-Info AVP............................  76\n  \
    \     8.44.  Service-Parameter-Type AVP............................  76\n    \
    \   8.45.  Service-Parameter-Value AVP...........................  77\n      \
    \ 8.46.  Subscription-Id AVP...................................  77\n       8.47.\
    \  Subscription-Id-Type AVP..............................  77\n       8.48.  Subscription-Id-Data\
    \ AVP..............................  78\n       8.49.  User-Equipment-Info AVP...............................\
    \  78\n       8.50.  User-Equipment-Info-Type AVP..........................  78\n\
    \       8.50.  User-Equipment-Info-Value AVP.........................  79\n  \
    \ 9.  Result Code AVP Values.......................................  79\n    \
    \   9.1.   Transient Failures....................................  79\n      \
    \ 9.2.   Permanent Failures....................................  80\n   10. AVP\
    \ Occurrence Table.........................................  80\n       10.1.\
    \  Credit-Control AVP Table..............................  81\n       10.2.  Re-Auth-Request/Answer\
    \ AVP Table......................  82\n   11. RADIUS/Diameter Credit-Control Interworking\
    \ Model............  82\n   12. IANA Considerations..........................................\
    \  85\n       12.1.  Application Identifier................................  86\n\
    \       12.2.  Command Codes.........................................  86\n  \
    \     12.3.  AVP Codes.............................................  86\n    \
    \   12.4.  Result-Code AVP Values................................  86\n      \
    \ 12.5.  CC-Request-Type AVP...................................  86\n       12.6.\
    \  CC-Session-Failover AVP...............................  86\n       12.7.  CC-Unit-Type\
    \ AVP......................................  87\n       12.8.  Check-Balance-Result\
    \ AVP..............................  87\n       12.9.  Credit-Control AVP....................................\
    \  87\n       12.10. Credit-Control-Failure-Handling AVP...................  87\n\
    \       12.11. Direct-Debiting-Failure-Handling AVP..................  87\n  \
    \     12.12. Final-Unit-Action AVP.................................  87\n    \
    \   12.13. Multiple-Services-Indicator AVP.......................  87\n      \
    \ 12.14. Redirect-Address-Type AVP.............................  88\n       12.15.\
    \ Requested-Action AVP..................................  88\n       12.16. Subscription-Id-Type\
    \ AVP..............................  88\n       12.17. Tariff-Change-Usage AVP...............................\
    \  88\n       12.18. User-Equipment-Info-Type AVP..........................  88\n\
    \   13. Credit-Control Application Related Parameters................  88\n  \
    \ 14. Security Considerations......................................  89\n    \
    \   14.1.  Direct Connection with Redirects......................  90\n   15.\
    \ References...................................................  91\n       15.1.\
    \  Normative References..................................  91\n       15.2.  Informative\
    \ References................................  92\n   16. Acknowledgements.............................................\
    \  93\n   Appendix A Credit-Control Sequences..............................  94\n\
    \       A.1.   Flow I................................................  94\n  \
    \     A.2.   Flow II...............................................  96\n    \
    \   A.3.   Flow III..............................................  98\n      \
    \ A.4.   Flow IV...............................................  99\n       A.5.\
    \   Flow V................................................ 100\n       A.6.  \
    \ Flow VI............................................... 102\n       A.7.   Flow\
    \ VII.............................................. 103\n       A.8.   Flow VIII.............................................\
    \ 105\n       A.9.   Flow IX............................................... 107\n\
    \   Authors' Addresses............................................... 112\n  \
    \ Full Copyright Statement......................................... 114\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document specifies a Diameter application that can\
    \ be used to\n   implement real-time credit-control for a variety of end user\
    \ services\n   such as network access, Session Initiation Protocol (SIP) services,\n\
    \   messaging services, and download services.  It provides a general\n   solution\
    \ to real-time cost and credit-control.\n   The prepaid model has been shown to\
    \ be very successful, for instance,\n   in GSM networks, where network operators\
    \ offering prepaid services\n   have experienced a substantial growth of their\
    \ customer base and\n   revenues.  Prepaid services are now cropping up in many\
    \ other\n   wireless and wire line based networks.\n   In next generation wireless\
    \ networks, additional functionality is\n   required beyond that specified in\
    \ the Diameter base protocol.  For\n   example, the 3GPP Charging and Billing\
    \ requirements [3GPPCHARG] state\n   that an application must be able to rate\
    \ service information in\n   real-time.  In addition, it is necessary to check\
    \ that the end user's\n   account provides coverage for the requested service\
    \ prior to\n   initiation of that service.  When an account is exhausted or expired,\n\
    \   the user must be denied the ability to compile additional chargeable\n   events.\n\
    \   A mechanism has to be provided to allow the user to be informed of\n   the\
    \ charges to be levied for a requested service.  In addition, there\n   are services\
    \ such as gaming and advertising that may credit as well\n   as debit a user account.\n\
    \   The other Diameter applications provide service specific\n   authorization,\
    \ and they do not provide credit authorization for\n   prepaid users.  The credit\
    \ authorization shall be generic and\n   applicable to all the service environments\
    \ required to support\n   prepaid services.\n   To fulfill these requirements,\
    \ it is necessary to facilitate credit-\n   control communication between the\
    \ network element providing the\n   service (e.g., Network Access Server, SIP\
    \ Proxy, and Application\n   Server) and a credit-control server.\n   The scope\
    \ of this specification is the credit authorization.  Service\n   specific authorization\
    \ and authentication is out of the scope.\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   In this document, the key words \"MAY\", \"MUST,\
    \ \"MUST NOT\", \"OPTIONAL\",\n   \"RECOMMENDED\", \"SHOULD\", and \"SHOULD NOT\"\
    , are to be interpreted as\n   described in [KEYWORDS].\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   AAA\n   Authentication, Authorization, and Accounting\n\
    \   AA answer\n   AA answer generically refers to a service specific authorization\
    \ and\n   authentication answer.  AA answer commands are defined in service\n\
    \   specific authorization applications, e.g., [NASREQ] and [DIAMMIP].\n   AA\
    \ request\n   AA request generically refers to a service specific authorization\
    \ and\n   authentication request.  AA request commands are defined in service\n\
    \   specific authorization applications e.g., [NASREQ] and [DIAMMIP].\n   Credit-control\n\
    \   Credit-control is a mechanism that directly interacts in real-time\n   with\
    \ an account and controls or monitors the charges related to the\n   service usage.\
    \  Credit-control is a process of checking whether\n   credit is available, credit-reservation,\
    \ deduction of credit from the\n   end user account when service is completed\
    \ and refunding of reserved\n   credit that is not used.\n   Diameter Credit-control\
    \ Server\n   A Diameter credit-control server acts as a prepaid server, performing\n\
    \   real-time rating and credit-control.  It is located in the home\n   domain\
    \ and is accessed by service elements or Diameter AAA servers in\n   real-time\
    \ for purpose of price determination and credit-control\n   before the service\
    \ event is delivered to the end-user.  It may also\n   interact with business\
    \ support systems.\n   Diameter Credit-control Client\n   A Diameter credit-control\
    \ client is an entity that interacts with a\n   credit-control server.  It monitors\
    \ the usage of the granted quota\n   according to instructions returned by credit-control\
    \ server.\n   Interrogation\n   The Diameter credit-control client uses interrogation\
    \ to initiate a\n   session based credit-control process.  During the credit-control\n\
    \   process, it is used to report the used quota and request a new one.\n   An\
    \ interrogation maps to a request/answer transaction.\n   One-time event\n   Basically,\
    \ a request/answer transaction of type event.\n   Rating\n   The act of determining\
    \ the cost of the service event.\n   Service\n   A type of task performed by a\
    \ service element for an end user.\n   Service Element\n   A network element that\
    \ provides a service to the end users.  The\n   Service Element may include the\
    \ Diameter credit-control client, or\n   another entity (e.g., RADIUS AAA server)\
    \ that can act as a Credit-\n   control client on behalf of the Service Element.\
    \  In the latter case,\n   the interface between the Service Element and the Diameter\
    \ credit-\n   control client is outside the scope of this specification.  Examples\n\
    \   of the Service Elements include Network Access Server (NAS), SIP\n   Proxy,\
    \ and Application Servers such as messaging server, content\n   server, and gaming\
    \ server.\n   Service Event\n   An event relating to a service provided to the\
    \ end user.\n   Session based credit-control\n   A credit-control process that\
    \ makes use of several interrogations:\n   the first, a possible intermediate,\
    \ and the final.  The first\n   interrogation is used to reserve money from the\
    \ user's account and to\n   initiate the process.  The intermediate interrogations\
    \ may be needed\n   to request new quota while the service is being rendered.\
    \  The final\n   interrogation is used to exit the process.  The credit-control\
    \ server\n   is required to maintain session state for session-based credit-\n\
    \   control.\n"
- title: 1.3.  Advertising Application Support
  contents:
  - "1.3.  Advertising Application Support\n   Diameter nodes conforming to this specification\
    \ MUST advertise\n   support by including the value of 4 in the Auth-Application-Id\
    \ of the\n   Capabilities-Exchange-Request and Capabilities-Exchange-Answer\n\
    \   command [DIAMBASE].\n"
- title: 2.  Architecture Models
  contents:
  - "2.  Architecture Models\n   The current accounting models specified in the Radius\
    \ Accounting\n   [RFC2866] and Diameter base [DIAMBASE] are not sufficient for\
    \ real-\n   time credit-control, where credit-worthiness is to be determined\n\
    \   prior to service initiation.  Also, the existing Diameter\n   authorization\
    \ applications, [NASREQ] and [DIAMMIP], only provide\n   service authorization,\
    \ but do not provide credit authorization for\n   prepaid users.  In order to\
    \ support real-time credit-control, a new\n   type of server is needed in the\
    \ AAA infrastructure: Diameter credit-\n   control server.  The Diameter credit-control\
    \ server is the entity\n   responsible for credit authorization for prepaid subscribers.\n\
    \   A service element may authenticate and authorize the end user with\n   the\
    \ AAA server by using AAA protocols; e.g., RADIUS or a Diameter\n   base protocol\
    \ with a possible Diameter application.\n   Accounting protocols such as RADIUS\
    \ accounting and the Diameter base\n   accounting protocol can be used to provide\
    \ accounting data to the\n   accounting server after service is initiated, and\
    \ to provide possible\n   interim reports until service completion.  However,\
    \ for real-time\n   credit-control, these authorization and accounting models\
    \ are not\n   sufficient.\n   When real-time credit-control is required, the credit-control\
    \ client\n   contacts the credit-control server with information about a possible\n\
    \   service event.  The credit-control process is performed to determine\n   potential\
    \ charges and to verify whether the end user's account\n   balance is sufficient\
    \ to cover the cost of the service being\n   rendered.\n   Figure 1 illustrates\
    \ the typical credit-control architecture, which\n   consists of a Service Element\
    \ with an embedded Diameter credit-\n   control client, a Diameter credit-control\
    \ server, and an AAA server.\n   A Business Support System is usually deployed;\
    \ it includes at least\n   the billing functionality.  The credit-control server\
    \ and AAA server\n   in this architecture model are logical entities.  The real\n\
    \   configuration can combine them into a single host.  The credit-\n   control\
    \ protocol is the Diameter base protocol with the Diameter\n   credit-control\
    \ application.\n   When an end user requests services such as SIP or messaging,\
    \ the\n   request is typically forwarded to a service element (e.g., SIP Proxy)\n\
    \   in the user's home domain.  In some cases it might be possible that\n   the\
    \ service element in the visited domain can offer services to the\n   end user;\
    \ however, a commercial agreement must exist between the\n   visited domain and\
    \ the home domain.  Network access is an example of\n   a service offered in the\
    \ visited domain where the NAS, through an AAA\n   infrastructure, authenticates\
    \ and authorizes the user with the user's\n   home network.\n                \
    \   Service Element   AAA and CC\n   +----------+      +---------+     Protocols+-----------+\
    \  +--------+\n   |  End     |<---->|+-------+|<------------>|    AAA    |  |Business|\n\
    \   |  User    |   +->|| CC    ||              |   Server  |->|Support |\n   |\
    \          |   |  || Client||<-----+       |           |  |System  |\n   +----------+\
    \   |  |+-------+|      |       +-----------+  |        |\n                  |\
    \  +---------+      |             ^        +--------+\n   +----------+   |   \
    \                | CC Protocol |             ^\n   |  End     |<--+          \
    \         |       +-----v----+        |\n   |  User    |                     \
    \  +------>|Credit-   |        |\n   +----------+                Credit-Control\
    \ |Control   |--------+\n                               Protocol       |Server\
    \    |\n                                              +----------+\n         \
    \     Figure 1: Typical credit-control architecture\n   There can be multiple\
    \ credit-control servers in the system for\n   redundancy and load balancing.\
    \  The system can also contain separate\n   rating server(s), and accounts can\
    \ be located in a centralized\n   database.  To ensure that the end user's account\
    \ is not debited or\n   credited multiple times for the same service event, only\
    \ one place in\n   the credit-control system should perform duplicate detection.\
    \  System\n   internal interfaces can exist to relay messages between servers\
    \ and\n   an account manager.  However, the detailed architecture of the\n   credit-control\
    \ system and its interfaces are implementation specific\n   and are out of scope\
    \ of this specification.\n   Protocol transparent Diameter relays can exist between\
    \ the credit-\n   control client and credit-control server.  Also, Diameter Redirect\n\
    \   agents that refer credit-control clients to credit-control servers\n   and\
    \ allow them to communicate directly can exist.  These agents\n   transparently\
    \ support the Diameter credit-control application.  The\n   different roles of\
    \ Diameter Agents are defined in Diameter base\n   [DIAMBASE], section 2.8.\n\
    \   If Diameter credit-control proxies exist between the credit-control\n   client\
    \ and the credit-control server, they MUST advertise the\n   Diameter credit-control\
    \ application support.\n"
- title: 3.  Credit-Control Messages
  contents:
  - "3.  Credit-Control Messages\n   This section defines new Diameter message Command-Code\
    \ values that\n   MUST be supported by all Diameter implementations that conform\
    \ to\n   this specification.  The Command Codes are as follows:\n   Command-Name\
    \                  Abbrev.    Code     Reference\n   -----------------------------------------------------------\n\
    \   Credit-Control-Request        CCR        272      3.1\n   Credit-Control-Answer\
    \         CCA        272      3.2\n   Diameter Base [DIAMBASE] defines in the\
    \ section 3.2 the Command Code\n   ABNF specification.  These formats are observed\
    \ in Credit-Control\n   messages.\n"
- title: 3.1.  Credit-Control-Request (CCR) Command
  contents:
  - "3.1.  Credit-Control-Request (CCR) Command\n   The Credit-Control-Request message\
    \ (CCR) is indicated by the\n   command-code field being set to 272 and the 'R'\
    \ bit being set in the\n   Command Flags field.  It is used between the Diameter\
    \ credit-control\n   client and the credit-control server to request credit authorization\n\
    \   for a given service.\n   The Auth-Application-Id MUST be set to the value\
    \ 4, indicating the\n   Diameter credit-control application.\n   Message Format\n\
    \      <Credit-Control-Request> ::= < Diameter Header: 272, REQ, PXY >\n     \
    \                              < Session-Id >\n                              \
    \     { Origin-Host }\n                                   { Origin-Realm }\n \
    \                                  { Destination-Realm }\n                   \
    \                { Auth-Application-Id }\n                                   {\
    \ Service-Context-Id }\n                                   { CC-Request-Type }\n\
    \                                   { CC-Request-Number }\n                  \
    \                 [ Destination-Host ]\n                                   [ User-Name\
    \ ]\n                                   [ CC-Sub-Session-Id ]\n              \
    \                     [ Acct-Multi-Session-Id ]\n                            \
    \       [ Origin-State-Id ]\n                                   [ Event-Timestamp\
    \ ]\n                                  *[ Subscription-Id ]\n                \
    \                   [ Service-Identifier ]\n                                 \
    \  [ Termination-Cause ]\n                                   [ Requested-Service-Unit\
    \ ]\n                                   [ Requested-Action ]\n               \
    \                   *[ Used-Service-Unit ]\n                                 \
    \  [ Multiple-Services-Indicator ]\n                                  *[ Multiple-Services-Credit-Control\
    \ ]\n                                  *[ Service-Parameter-Info ]\n         \
    \                          [ CC-Correlation-Id ]\n                           \
    \        [ User-Equipment-Info ]\n                                  *[ Proxy-Info\
    \ ]\n                                  *[ Route-Record ]\n                   \
    \               *[ AVP ]\n"
- title: 3.2.  Credit-Control-Answer (CCA) Command
  contents:
  - "3.2.  Credit-Control-Answer (CCA) Command\n   The Credit-Control-Answer message\
    \ (CCA) is indicated by the command-\n   code field being set to 272 and the 'R'\
    \ bit being cleared in the\n   Command Flags field.  It is used between the credit-control\
    \ server\n   and the Diameter credit-control client to acknowledge a Credit-\n\
    \   Control-Request command.\n   Message Format\n      <Credit-Control-Answer>\
    \ ::= < Diameter Header: 272, PXY >\n                                  < Session-Id\
    \ >\n                                  { Result-Code }\n                     \
    \             { Origin-Host }\n                                  { Origin-Realm\
    \ }\n                                  { Auth-Application-Id }\n             \
    \                     { CC-Request-Type }\n                                  {\
    \ CC-Request-Number }\n                                  [ User-Name ]\n     \
    \                             [ CC-Session-Failover ]\n                      \
    \            [ CC-Sub-Session-Id ]\n                                  [ Acct-Multi-Session-Id\
    \ ]\n                                  [ Origin-State-Id ]\n                 \
    \                 [ Event-Timestamp ]\n                                  [ Granted-Service-Unit\
    \ ]\n                                 *[ Multiple-Services-Credit-Control ]\n\
    \                                  [ Cost-Information]\n                     \
    \             [ Final-Unit-Indication ]\n                                  [ Check-Balance-Result\
    \ ]\n                                  [ Credit-Control-Failure-Handling ]\n \
    \                                 [ Direct-Debiting-Failure-Handling ]\n     \
    \                             [ Validity-Time]\n                             \
    \    *[ Redirect-Host]\n                                  [ Redirect-Host-Usage\
    \ ]\n                                  [ Redirect-Max-Cache-Time ]\n         \
    \                        *[ Proxy-Info ]\n                                 *[\
    \ Route-Record ]\n                                 *[ Failed-AVP ]\n         \
    \                        *[ AVP ]\n"
- title: 4.  Credit-Control Application Overview
  contents:
  - "4.  Credit-Control Application Overview\n   The credit authorization process\
    \ takes place before and during\n   service delivery to the end user and generally\
    \ requires the user's\n   authentication and authorization before any request\
    \ is sent to the\n   credit-control server.  The credit-control application defined\
    \ in\n   this specification supports two different credit authorization\n   models:\
    \ credit authorization with money reservation and credit\n   authorization with\
    \ direct debiting.  In both models, the credit-\n   control client requests credit\
    \ authorization from the credit-control\n   server prior to allowing any service\
    \ to be delivered to the end user.\n   In the first model, the credit-control\
    \ server rates the request,\n   reserves a suitable amount of money from the user's\
    \ account, and\n   returns the corresponding amount of credit resources.  Note\
    \ that\n   credit resources may not imply actual monetary credit; credit\n   resources\
    \ may be granted to the credit control client in the form of\n   units (e.g.,\
    \ data volume or time) to be metered.\n   Upon receipt of a successful credit\
    \ authorization answer with a\n   certain amount of credit resources, the credit-control\
    \ client allows\n   service delivery to the end user and starts monitoring the\
    \ usage of\n   the granted resources.  When the credit resources granted to the\
    \ user\n   have been consumed or the service has been successfully delivered or\n\
    \   terminated, the credit-control client reports back to the server the\n   used\
    \ amount.  The credit-control server deducts the used amount from\n   the end\
    \ user's account; it may perform rating and make a new credit\n   reservation\
    \ if the service delivery is continuing.  This process is\n   accomplished with\
    \ session based credit-control that includes the\n   first interrogation, possible\
    \ intermediate interrogations, and the\n   final interrogation.  For session based\
    \ credit-control, both the\n   credit control client and the credit-control server\
    \ are required to\n   maintain credit-control session state.  Session based credit-control\n\
    \   is described in more detail, with more variations, in section 5.\n   In contrast,\
    \ credit authorization with direct debiting is a single\n   transaction process\
    \ wherein the credit-control server directly\n   deducts a suitable amount of\
    \ money from the user's account as soon as\n   the credit authorization request\
    \ is received.  Upon receipt of a\n   successful credit authorization answer,\
    \ the credit-control client\n   allows service delivery to the end user.  This\
    \ process is\n   accomplished with the one-time event.  Session state is not\n\
    \   maintained.\n   In a multi-service environment, an end user can issue an additional\n\
    \   service request (e.g., data service) during an ongoing service (e.g.,\n  \
    \ voice call) toward the same account.  Alternatively, during an active\n   multimedia\
    \ session, an additional media type is added to the session,\n   causing a new\
    \ simultaneous request toward same account.\n   Consequently, this needs to be\
    \ considered when credit resources are\n   granted to the services.\n   The credit-control\
    \ application also supports operations such as\n   service price enquiry, user's\
    \ balance check, and refund of credit on\n   the user's account.  These operations\
    \ are accomplished with the one-\n   time event.  Session state is not maintained.\n\
    \   A flexible credit-control application specific failure handling is\n   defined\
    \ in which the home service provider can model the credit-\n   control client\
    \ behavior according to its own credit risk management\n   policy.\n   The Credit-Control-Failure-Handling\
    \ AVP and the Direct-Debiting-\n   Failure-Handling AVP are defined to determine\
    \ what is done if the\n   sending of credit-control messages to the credit-control\
    \ server has\n   been temporarily prevented.  The usage of the Credit-Control-\n\
    \   Failure-Handling AVP and the Direct-Debiting-Failure-Handling AVP\n   allows\
    \ flexibility, as failure handling for the credit-control\n   session and one\
    \ time event direct debiting may be different.\n"
- title: 4.1.  Service-Specific Rating Input and Interoperability
  contents:
  - "4.1.  Service-Specific Rating Input and Interoperability\n   The Diameter credit-control\
    \ application defines the framework for\n   credit-control; it provides generic\
    \ credit-control mechanisms\n   supporting multiple service applications.  The\
    \ credit-control\n   application, therefore, does not define AVPs that could be\
    \ used as\n   input in the rating process.  Listing the possible services that\n\
    \   could use this Diameter application is out of scope for this generic\n   mechanism.\n\
    \   It is reasonable to expect that a service level agreement will exist\n   between\
    \ providers of the credit-control client and the credit-control\n   server covering\
    \ the charging, services offered, roaming agreements,\n   agreed rating input\
    \ (i.e., AVPs), and so on.\n   Therefore, it is assumed that a Diameter credit-control\
    \ server will\n   provide service only for Diameter credit-control clients that\
    \ have\n   agreed beforehand as to the content of credit-control messages.\n \
    \  Naturally, it is possible that any arbitrary Diameter credit-control\n   client\
    \ can interchange credit-control messages with any Diameter\n   credit-control\
    \ server, but with a higher likelihood that unsupported\n   services/AVPs could\
    \ be present in the credit-control message, causing\n   the server to reject the\
    \ request with an appropriate result-code.\n"
- title: 4.1.1.  Specifying Rating Input AVPs
  contents:
  - "4.1.1.  Specifying Rating Input AVPs\n   There are two ways to provide rating\
    \ input to the credit-control\n   server: either by using AVPs or by including\
    \ them in the Service-\n   Parameter-Info AVP.  The general principles for sending\
    \ rating\n   parameters are as follows:\n   1a. The service SHOULD re-use existing\
    \ AVPs if it can use AVPs\n   defined in existing Diameter applications (e.g.,\
    \ NASREQ for network\n   access services).  Re-use of existing AVPs is strongly\
    \ recommended in\n   [DIAMBASE].\n   For AVPs of type Enumerated, the service\
    \ may require a new value to\n   be defined.  Allocation of new AVP values is\
    \ done as specified in\n   [DIAMBASE], section 1.2.\n   1b. New AVPs can be defined\
    \ if the existing AVPs do not provide\n   sufficient rating information.  In this\
    \ case, the procedures defined\n   in [DIAMBASE] for creating new AVPs MUST be\
    \ followed.\n   1c. For services specific only to one vendor's implementation,\
    \ a\n   Vendor-Specific AVP code for Private use can be used.  Where a\n   Vendor-Specific\
    \ AVP is implemented by more than one vendor,\n   allocation of global AVPs is\
    \ encouraged instead; refer to [DIAMBASE].\n   2. The Service-Parameter-Info AVP\
    \ MAY be used as a container to pass\n   legacy rating information in its original\
    \ encoded form (e.g., ASN.1\n   BER).  This method can be used to avoid unnecessary\
    \ conversions from\n   an existing data format to an AVP format.  In this case,\
    \ the rating\n   input is embedded in the Service-Parameter-Info AVP as defined\
    \ in\n   section 8.43.\n   New service applications SHOULD favor the use of explicitly\
    \ defined\n   AVPs as described in items 1a and 1b, to simplify interoperability.\n"
- title: 4.1.2.  Service-Specific Documentation
  contents:
  - "4.1.2.  Service-Specific Documentation\n   The service specific rating input\
    \ AVPs, the contents of the Service-\n   Parameter-Info AVP or Service-Context-Id\
    \ AVP (defined in section\n   8.42) are not within the scope of this document.\
    \  To facilitate\n   interoperability, it is RECOMMENDED that the rating input\
    \ and the\n   values of the Service-Context-Id be coordinated via an informational\n\
    \   RFC or other permanent and readily available reference.  The\n   specification\
    \ of another cooperative standardization body (e.g.,\n   3GPP, OMA, and 3GPP2)\
    \ SHOULD be used.  However, private services may\n   be deployed that are subject\
    \ to agreements between providers of the\n   credit-control server and client.\
    \  In this case, vendor specific AVPs\n   can be used.\n   This specification,\
    \ together with the above service specific\n   documents, governs the credit-control\
    \ message.  Service specific\n   documents define which existing AVPs or new AVPs\
    \ are used as input to\n   the rating process (i.e., those that do not define\
    \ new credit-control\n   applications), and thus have to be included in the Credit-Control-\n\
    \   Request command by a Diameter credit-control client supporting a\n   given\
    \ service as *[AVP].  Should Service-Parameter-Info be used, then\n   the service\
    \ specific document MUST specify the exact content of this\n   grouped AVP.\n\
    \   The Service-Context-Id AVP MUST be included at the command level of a\n  \
    \ Credit-Control Request to identify the service specific document that\n   applies\
    \ to the request.  The specific service or rating group the\n   request relates\
    \ to is uniquely identified by the combination of\n   Service-Context-Id and Service-Identifier\
    \ or Rating-Group.\n"
- title: 4.1.3.  Handling of Unsupported/Incorrect Rating Input
  contents:
  - "4.1.3.  Handling of Unsupported/Incorrect Rating Input\n   Diameter credit-control\
    \ implementations are required to support the\n   Mandatory rating AVPs defined\
    \ in service specific documentation of\n   the services they support, according\
    \ to the 'M' bit rules in\n   [DIAMBASE].\n   If a rating input required for the\
    \ rating process is incorrect in the\n   Credit-control request, or if the credit-control\
    \ server does not\n   support the requested service context (identified by the\
    \ Service-\n   Context-Id AVP at command level), the Credit-control answer MUST\n\
    \   contain the error code DIAMETER_RATING_FAILED.  A CCA message with\n   this\
    \ error MUST contain one or more Failed-AVP AVPs containing the\n   missing and/or\
    \ unsupported AVPs that caused the failure.  A Diameter\n   credit-control client\
    \ that receives the error code\n   DIAMETER_RATING_FAILED in response to a request\
    \ MUST NOT send similar\n   requests in the future.\n"
- title: 4.1.4.  RADIUS Vendor-Specific Rating Attributes
  contents:
  - "4.1.4.  RADIUS Vendor-Specific Rating Attributes\n   When service specific documents\
    \ include RADIUS vendor specific\n   attributes that could be used as input in\
    \ the rating process, the\n   rules described in [NASREQ] for formatting the Diameter\
    \ AVP MUST be\n   followed.\n   For example, if the AVP code used is the vendor\
    \ attribute type code,\n   the Vendor-Specific flag MUST be set to 1 and the Vendor-ID\
    \ MUST be\n   set to the IANA Vendor identification value.  The Diameter AVP data\n\
    \   field contains only the attribute value of the RADIUS attribute.\n"
- title: 5.  Session Based Credit-Control
  contents:
  - '5.  Session Based Credit-Control

    '
- title: 5.1.  General Principles
  contents:
  - "5.1.  General Principles\n   For a session-based credit-control, several interrogations\
    \ are\n   needed: the first, intermediate (optional) and the final\n   interrogations.\
    \  This is illustrated in Figures 2 and 3.\n   If the credit-control client performs\
    \ credit-reservation before\n   granting service to the end user, it MUST use\
    \ several interrogations\n   toward the credit-control server (i.e., session based\
    \ credit-\n   control).  In this case, the credit-control server MUST maintain\
    \ the\n   credit-control session state.\n   Each credit-control session MUST have\
    \ a globally unique Session-Id as\n   defined in [DIAMBASE], which MUST NOT be\
    \ changed during the lifetime\n   of a credit-control session.\n   Certain applications\
    \ require multiple credit-control sub-sessions.\n   These applications would send\
    \ messages with a constant Session-Id\n   AVP, but with a different CC-Sub-Session-Id\
    \ AVP.  If several credit\n   sub-sessions will be used, all sub-sessions MUST\
    \ be closed separately\n   before the main session is closed so that units per\
    \ sub-session may\n   be reported.  The absence of this AVP implies that no sub-sessions\n\
    \   are in use.\n   Note that the service element might send a service specific\
    \ re-\n   authorization message to the AAA server due to expiration of the\n \
    \  authorization-lifetime during an ongoing credit-control session.\n   However,\
    \ the service specific re-authorization does not influence the\n   credit authorization\
    \ that is ongoing between the credit-control\n   client and credit-control server,\
    \ as credit authorization is\n   controlled by the burning rate of the granted\
    \ quota.\n   If service specific re-authorization fails, the user will be\n  \
    \ disconnected, and the credit-control client MUST send a final\n   interrogation\
    \ to the credit-control server.\n   The Diameter credit-control server may seek\
    \ to control the validity\n   time of the granted quota and/or the production\
    \ of intermediate\n   interrogations.  Thus, it MAY include the Validity-Time\
    \ AVP in the\n   answer message to the credit-control client.  Upon expiration\
    \ of the\n   Validity-Time, the credit-control client MUST generate a credit-\n\
    \   control update request and report the used quota to the credit-\n   control\
    \ server.  It is up to the credit-control server to determine\n   the value of\
    \ the Validity-Time to be used for consumption of the\n   granted service units.\
    \  If the Validity-Time is used, its value\n   SHOULD be given as input to set\
    \ the session supervision timer Tcc\n   (the session supervision timer MAY be\
    \ set to two times the value of\n   the Validity-Time, as defined in section 13).\
    \  Since credit-control\n   update requests are also produced at the expiry of\
    \ granted service\n   units and/or for mid-session service events, the omission\
    \ of\n   Validity-Time does not mean that intermediate interrogation for the\n\
    \   purpose of credit-control is not performed.\n"
- title: 5.1.1.  Basic Tariff-Time Change Support
  contents:
  - "5.1.1.  Basic Tariff-Time Change Support\n   The Diameter credit-control server\
    \ and client MAY optionally support\n   a tariff change mechanism.  The Diameter\
    \ credit-control server may\n   include a Tariff-Time-Change AVP in the answer\
    \ message.  Note that\n   the granted units should be allocated based on the worst-case\n\
    \   scenario in case of forthcoming tariff change, so that the overall\n   reported\
    \ used units would never exceed the credit reservation.\n   When the Diameter\
    \ credit-control client reports the used units and a\n   tariff change has occurred\
    \ during the reporting period, the Diameter\n   credit-control client MUST separately\
    \ itemize the units used before\n   and after the tariff change.  If the client\
    \ is unable to distinguish\n   whether units straddling the tariff change were\
    \ used before or after\n   the tariff change, the credit-control client MUST itemize\
    \ those units\n   in a third category.\n   If a client does not support the tariff\
    \ change mechanism and it\n   receives a CCA message carrying the Tariff-Time-Change\
    \ AVP, it MUST\n   terminate the credit-control session, giving a reason of\n\
    \   DIAMETER_BAD_ANSWER in the Termination-Cause AVP.\n   For time based services,\
    \ the quota is continuously consumed at the\n   regular rate of 60 seconds per\
    \ minute.  At the time when credit\n   resources are allocated, the server already\
    \ knows how many units will\n   be consumed before the tariff time change and\
    \ how many units will be\n   consumed afterward.  Similarly, the server can determine\
    \ the units\n   consumed at the before rate and the units consumed at the rate\n\
    \   afterward in the event that the end-user closes the session before\n   the\
    \ consumption of the allotted quota.  There is no need for\n   additional traffic\
    \ between client and server in the case of tariff\n   time changes for continuous\
    \ time based service.  Therefore, the\n   tariff change mechanism is not used\
    \ for such services.  For time-\n   based services in which the quota is NOT continuously\
    \ consumed at a\n   regular rate, the tariff change mechanism described for volume\
    \ and\n   event units MAY be used.\n"
- title: 5.1.2.  Credit-Control for Multiple Services within a (sub-)Session
  contents:
  - "5.1.2.  Credit-Control for Multiple Services within a (sub-)Session\n   When\
    \ multiple services are used within the same user session and each\n   service\
    \ or group of services is subject to different cost, it is\n   necessary to perform\
    \ credit-control for each service independently.\n   Making use of credit-control\
    \ sub-sessions to achieve independent\n   credit-control will result in increased\
    \ signaling load and usage of\n   resources in both the credit-control client\
    \ and the credit-control\n   server.  For instance, during one network access\
    \ session the end user\n   may use several http-services subject to different\
    \ access cost.  The\n   network access specific attributes such as the quality\
    \ of service\n   (QoS) are common to all the services carried within the access\n\
    \   bearer, but the cost of the bearer may vary depending on its content.\n  \
    \ To support these scenarios optimally, the credit-control application\n   enables\
    \ independent credit-control of multiple services in a single\n   credit-control\
    \ (sub-)session.  This is achieved by including the\n   optional Multiple-Services-Credit-Control\
    \ AVP in Credit-Control-\n   Request/Answer messages.  It is possible to request\
    \ and allocate\n   resources as a credit pool shared between multiple services.\
    \  The\n   services can be grouped into rating groups in order to achieve even\n\
    \   further aggregation of credit allocation.  It is also possible to\n   request\
    \ and allocate quotas on a per service basis.  Where quotas are\n   allocated\
    \ to a pool by means of the Multiple-Services-Credit-Control\n   AVP, the quotas\
    \ remain independent objects that can be re-authorized\n   independently at any\
    \ time.  Quotas can also be given independent\n   result codes, validity times,\
    \ and Final-Unit-Indications.\n   A Rating-Group gathers a set of services, identified\
    \ by a Service-\n   Identifier, and subject to the same cost and rating type (e.g.,\n\
    \   $0.1/minute).  It is assumed that the service element is provided\n   with\
    \ Rating-Groups, Service-Identifiers, and their associated\n   parameters that\
    \ define what has to be metered by means outside the\n   scope of this specification.\
    \  (Examples of parameters associated to\n   Service-Identifiers are IP 5-tuple\
    \ and HTTP URL.) Service-Identifiers\n   enable authorization on a per-service\
    \ based credit as well as\n   itemized reporting of service usage.  It is up to\
    \ the credit-control\n   server whether to authorize credit for one or more services\
    \ or for\n   the whole rating-group.  However, the client SHOULD always report\n\
    \   used units at the finest supported level of granularity.  Where quota\n  \
    \ is allocated to a rating-group, all the services belonging to that\n   group\
    \ draw from the allotted quota.  The following is a graphical\n   representation\
    \ of the relationship between service-identifiers,\n   rating-groups, credit pools,\
    \ and credit-control (sub-)session.\n                          DCC (Sub-)Session\n\
    \                                  |\n         +------------+-----------+-------------+---------------\
    \ +\n         |            |           |             |                |\n   Service-Id\
    \ a Service-Id b Service-Id c Service-Id d.....Service-Id z\n        \\      \
    \  /                 \\         /                /\n         \\      /       \
    \            \\       /                /\n          \\    /                  Rating-Group\
    \ 1.......Rating-Group n\n           \\  /                         |         \
    \           |\n          Quota       ---------------Quota                 Quota\n\
    \            |        /                                       |\n            |\
    \       /                                        |\n         Credit-Pool     \
    \                               Credit-Pool\n   If independent credit-control\
    \ of multiple services is used, the\n   validity-time and final-unit-indication\
    \ SHOULD be present either in\n   the Multiple-Services-Credit-Control AVP(s)\
    \ or at command level as\n   single AVPs.  However, the Result-Code AVP MAY be\
    \ present both on the\n   command level and within the Multiple-Services-Credit-Control\
    \ AVP.\n   If the Result-Code on the command level indicates a value other than\n\
    \   SUCCESS, then the Result-Code on command level takes precedence over\n   any\
    \ included in the Multiple-Services-Credit-Control AVP.\n   The credit-control\
    \ client MUST indicate support for independent\n   credit-control of multiple\
    \ services within a (sub-)session by\n   including the Multiple-Services-Indicator\
    \ AVP in the first\n   interrogation.  A credit-control server not supporting\
    \ this feature\n   MUST treat the Multiple-Services-Indicator AVP and any received\n\
    \   Multiple-Services-Credit-Control AVPs as invalid AVPs.\n   If the client indicated\
    \ support for independent credit-control of\n   multiple services, a credit-control\
    \ server that wishes to use the\n   feature MUST return the granted units within\
    \ the Multiple-Services-\n   Credit-Control AVP associated to the corresponding\
    \ service-identifier\n   and/or rating-group.\n   To avoid a situation where several\
    \ parallel (and typically also\n   small) credit reservations must be made on\
    \ the same account (i.e.,\n   credit fragmentation), and also to avoid unnecessary\
    \ load on the\n   credit-control server, it is possible to provide service units\
    \ as a\n   pool that applies to multiple services or rating groups.  This is\n\
    \   achieved by providing the service units in the form of a quota for a\n   particular\
    \ service or rating group in the Multiple-Services-Credit-\n   Control AVP, and\
    \ also by including a reference to a credit pool for\n   that unit type.\n   The\
    \ reference includes a multiplier derived from the rating\n   parameter, which\
    \ translates from service units of a specific type to\n   the abstract service\
    \ units in the pool.  For instance, if the rating\n   parameter for service 1\
    \ is $1/MB and the rating parameter for service\n   2 is $0.5/MB, the multipliers\
    \ could be 10 and 5 for services 1 and 2,\n   respectively.\n   If S is the total\
    \ service units within the pool, M1, M2, ..., Mn are\n   the multipliers provided\
    \ for services 1, 2, ..., n, and C1, C2, ...,\n   Cn are the used resources within\
    \ the session, then the pool credit is\n   exhausted and re-authorization MUST\
    \ be sought when:\n         C1*M1 + C2*M2 + ... + Cn*Mn >= S\n   The total credit\
    \ in the pool, S, is calculated from the quotas, which\n   are currently allocated\
    \ to the pool as follows:\n         S = Q1*M1 + Q2*M2 + ... + Qn*Mn\n   If services\
    \ or rating groups are added to or removed from the pool,\n   then the total credit\
    \ is adjusted appropriately.  Note that when the\n   total credit is adjusted\
    \ because services or rating groups are\n   removed from the pool, the value that\
    \ need to be removed is the\n   consumed one (i.e., Cx*Mx).\n   Re-authorizations\
    \ for an individual service or rating group may be\n   sought at any time; for\
    \ example, if a 'non-pooled' quota is used up\n   or the Validity-Time expires.\n\
    \   Where multiple G-S-U-Pool-Reference AVPs (section 8.30) with the same\n  \
    \ G-S-U-Pool-Identifier are provided within a Multiple-Services-\n   Credit-Control\
    \ AVP (section 8.16) along with the Granted-Service-Unit\n   AVP, then these MUST\
    \ have different CC-Unit-Type values, and they all\n   draw from the credit pool\
    \ separately.  For instance, if one\n   multiplier for time (M1t) and one multiplier\
    \ for volume (M1v) are\n   given, then the used resources from the pool is the\
    \ sum C1t*M1t +\n   C1v*M1v, where C1t is the time unit and C1v is the volume\
    \ unit.\n   Where service units are provided within a Multiple-Services-Credit-\n\
    \   Control AVP without a corresponding G-S-U-Pool-Reference AVP, then\n   these\
    \ are handled independently from any credit pool and from any\n   other services\
    \ or rating groups within the session.\n   The credit pool concept is an optimal\
    \ tool to avoid the over-\n   reservation effect of the basic single quota tariff\
    \ time change\n   mechanism (the mechanism described in section 5.1.1).  Therefore,\n\
    \   Diameter credit-control clients and servers implementing the\n   independent\
    \ credit-control of multiple services SHOULD leverage the\n   credit pool concept\
    \ when supporting the tariff time change.  The\n   Diameter credit-control server\
    \ SHOULD include both the Tariff-Time-\n   Change and Tariff-Change-Usage AVPs\
    \ in two quota allocations in the\n   answer message (i.e., two instances of the\
    \ Multiple-Services-Credit-\n   Control AVP).  One of the granted units is allocated\
    \ to be used\n   before the potential tariff change, while the second granted\
    \ units\n   are for use after a tariff change.  Both granted unit quotas MUST\n\
    \   contain the same Service-Identifier and/or Rating-Group.  This dual\n   quota\
    \ mechanism ensures that the overall reported used units would\n   never exceed\
    \ the credit reservation.  The Diameter credit-control\n   client reports both\
    \ the used units before and after the tariff change\n   in a single instance of\
    \ the Multiple-Services-Credit-Control AVP.\n   The failure handling for credit-control\
    \ sessions is defined in\n   section 5.7 and reflected in the basic credit-control\
    \ state machine\n   in section 7.  Credit-control clients and servers implementing\
    \ the\n   independent credit-control of multiple services in a (sub-)session\n\
    \   functionality MUST ensure failure handling and general behavior fully\n  \
    \ consistent with the above mentioned sections, while maintaining the\n   ability\
    \ to handle parallel ongoing credit re-authorization within a\n   (sub-)session.\
    \  Therefore, it is RECOMMENDED that Diameter credit-\n   control clients maintain\
    \ a PendingU message queue and restart the Tx\n   timer (section 13) every time\
    \ a CCR message with the value\n   UPDATE_REQUEST is sent while they are in PendingU\
    \ state.  When\n   answers to all pending messages are received, the state machine\
    \ moves\n   to OPEN state, and Tx is stopped.  Naturally, the action performed\n\
    \   when a problem for the session is detected according to section 5.7\n   affects\
    \ all the ongoing services (e.g., failover to a backup server\n   if possible\
    \ affect all the CCR messages with the value UPDATE_REQUEST\n   in the PendingU\
    \ queue).\n   Since the client may send CCR messages with the value UPDATE_REQUEST\n\
    \   while in PendingU (i.e., without waiting for an answer to ongoing\n   credit\
    \ re-authorization), the time space between these requests may\n   be very short,\
    \ and the server may not have received the previous\n   request(s) yet.  Therefore,\
    \ in this situation the server may receive\n   out of sequence requests and SHOULD\
    \ NOT consider this an error\n   condition.  A proper answer is to be returned\
    \ to each of those\n   requests.\n"
- title: 5.2.  First Interrogation
  contents:
  - "5.2.  First Interrogation\n   When session based credit-control is required (e.g.,\
    \ the\n   authentication server indicated a prepaid user), the first\n   interrogation\
    \ MUST be sent before the Diameter credit-control client\n   allows any service\
    \ event to the end user.  The CC-Request-Type is set\n   to the value INITIAL_REQUEST\
    \ in the request message.\n   If the Diameter credit-control client knows the\
    \ cost of the service\n   event (e.g., a content server delivering ringing tones\
    \ may know their\n   cost) the monetary amount to be charged is included in the\n\
    \   Requested-Service-Unit AVP.  If the Diameter credit-control client\n   does\
    \ not know the cost of the service event, the Requested-Service-\n   Unit AVP\
    \ MAY contain the number of requested service events.  Where\n   the Multiple-Services-Credit-Control\
    \ AVP is used, it MUST contain the\n   Requested-Service-Unit AVP to indicate\
    \ that the quota for the\n   associated service/rating-group is requested.  In\
    \ the case of\n   multiple services, the Service-Identifier AVP or the Rating-Group\
    \ AVP\n   within the Multiple-Services-Credit-Control AVP always indicates the\n\
    \   service concerned.  Additional service event information to be rated\n   MAY\
    \ be sent as service specific AVPs or MAY be sent within the\n   Service-Parameter-Info\
    \ AVP at command level.  The Service-Context-Id\n   AVP indicates the service\
    \ specific document applicable to the\n   request.\n   The Event-Timestamp AVP\
    \ SHOULD be included in the request and\n   contains the time when the service\
    \ event is requested in the service\n   element.  The Subscription-Id AVP SHOULD\
    \ be included to identify the\n   end user in the credit-control server.  The\
    \ credit-control client MAY\n   include the User-Equipment-Info AVP so that the\
    \ credit-control server\n   has some indication of the type and capabilities of\
    \ the end user\n   access device.  How the credit-control server uses this information\n\
    \   is outside the scope of this document.\n   The credit-control server SHOULD\
    \ rate the service event and make a\n   credit-reservation from the end user's\
    \ account that covers the cost\n   of the service event.  If the type of the Requested-Service-Unit\
    \ AVP\n   is money, no rating is needed, but the corresponding monetary amount\n\
    \   is reserved from the end user's account.\n   The credit-control server returns\
    \ the Granted-Service-Unit AVP in the\n   Answer message to the Diameter credit-control\
    \ client.  The Granted-\n   Service-Unit AVP contains the amount of service units\
    \ that the\n   Diameter credit-control client can provide to the end user until\
    \ a\n   new Credit-Control-Request MUST be sent to the credit-control server.\n\
    \   If several unit types are sent in the Answer message, the credit-\n   control\
    \ client MUST handle each unit type separately.  The type of\n   the Granted-Service-Unit\
    \ AVP can be time, volume, service specific,\n   or money, depending on the type\
    \ of service event.  The unit type(s)\n   SHOULD NOT be changed within an ongoing\
    \ credit-control session.\n   There MUST be a maximum of one instance of the same\
    \ unit type in one\n   Answer message.  However, if multiple quotas are conveyed\
    \ to the\n   credit-control client in the Multiple-Services-Credit-Control AVPs,\n\
    \   it is possible to carry two instances of the same unit type\n   associated\
    \ to a service-identifier/rating-group.  This is typically\n   the case when a\
    \ tariff time change is expected and the credit-control\n   server wants to make\
    \ a distinction between the granted quota before\n   and after tariff change.\n\
    \   If the credit-control server determines that no further control is\n   needed\
    \ for the service, it MAY include the result code indicating\n   that the credit-control\
    \ is not applicable (e.g., if the service is\n   free of charge).  This result\
    \ code at command level implies that the\n   credit-control session is to be terminated.\n\
    \   The Credit-Control-Answer message MAY also include the Final-Unit-\n   Indication\
    \ AVP to indicate that the answer message contains the final\n   units for the\
    \ service.  After the end user has consumed these units,\n   the Diameter credit-control-client\
    \ MUST behave as described in\n   section 5.6.\n   This document defines two different\
    \ approaches to perform the first\n   interrogation to be used in different network\
    \ architectures.  The\n   first approach uses credit-control messages after the\
    \ user's\n   authorization and authentication takes place.  The second approach\n\
    \   uses service specific authorization messages to perform the first\n   interrogation\
    \ during the user's authorization/authentication phase,\n   and credit-control\
    \ messages for the intermediate and final\n   interrogations.  If an implementation\
    \ of the credit-control client\n   supports both the methods, determining which\
    \ method to use SHOULD be\n   configurable.\n   In service environments such as\
    \ the Network Access Server (NAS), it\n   is desired to perform the first interrogation\
    \ as part of the\n   authorization/authentication process for the sake of protocol\n\
    \   efficiency.  Further credit authorizations after the first\n   interrogation\
    \ are performed with credit-control commands defined in\n   this specification.\
    \  Implementations of credit-control clients\n   operating in the mentioned environments\
    \ SHOULD support this method.\n   If the credit-control server and AAA server\
    \ are separate physical\n   entities, the service element sends the request messages\
    \ to the AAA\n   server, which then issues an appropriate request or proxies the\n\
    \   received request forward to the credit-control server.\n   In other service\
    \ environments, such as the 3GPP network and some SIP\n   scenarios, there is\
    \ a substantial decoupling between\n   registration/access to the network and\
    \ the actual service request\n   (i.e., the authentication/authorization is executed\
    \ once at\n   registration/access to the network and is not executed for every\n\
    \   service event requested by the subscriber).  In these environments,\n   it\
    \ is more appropriate to perform the first interrogation after the\n   user has\
    \ been authenticated and authorized.  The first, the\n   intermediate, and the\
    \ final interrogations are executed with credit-\n   control commands defined\
    \ in this specification.\n   Other IETF standards or standards developed by other\
    \ standardization\n   bodies may define the most suitable method in their architectures.\n"
- title: 5.2.1.  First Interrogation after Authorization and Authentication
  contents:
  - "5.2.1.  First Interrogation after Authorization and Authentication\n   The Diameter\
    \ credit-control client in the service element may get\n   information from the\
    \ authorization server as to whether credit-\n   control is required, based on\
    \ its knowledge of the end user.  If\n   credit-control is required the credit-control\
    \ server needs to be\n   contacted prior to initiating service delivery to the\
    \ end user.  The\n   accounting protocol and the credit-control protocol can be\
    \ used in\n   parallel.  The authorization server may also determine whether the\n\
    \   parallel accounting stream is required.\n   The following diagram illustrates\
    \ the case where both protocols are\n   used in parallel and the service element\
    \ sends credit-control\n   messages directly to the credit-control server.  More\
    \ credit-control\n   sequence examples are given in Annex A.\n               \
    \                            Diameter\n   End User        Service Element    \
    \    AAA Server         CC Server\n                     (CC Client)\n      | Registration\
    \      | AA request/answer(accounting,cc or both)|\n      |<----------------->|<------------------>|\
    \                    |\n      |        :          |                    |     \
    \               |\n      |        :          |                    |          \
    \          |\n      | Service Request   |                    |               \
    \     |\n      |------------------>|                    |                    |\n\
    \      |                   | CCR(Initial,Credit-Control AVPs)        |\n     \
    \ |                  +|---------------------------------------->|\n      |   \
    \      CC stream||                    |  CCA(Granted-Units)|\n      |        \
    \          +|<----------------------------------------|\n      | Service Delivery\
    \  |                    |                    |\n      |<----------------->| ACR(start,Accounting\
    \ AVPs)              |\n      |         :         |------------------->|+    \
    \               |\n      |         :         |                ACA || Accounting\
    \ stream |\n      |                   |<-------------------|+                \
    \   |\n      |         :         |                    |                    |\n\
    \      |         :         |                    |                    |\n     \
    \ |                   | CCR(Update,Used-Units)                  |\n      |   \
    \                |---------------------------------------->|\n      |        \
    \           |                    |  CCA(Granted-Units)|\n      |             \
    \      |<----------------------------------------|\n      |         :        \
    \ |                    |                    |\n      |         :         |   \
    \                 |                    |\n      | End of Service    |        \
    \            |                    |\n      |------------------>| CCR(Termination,\
    \ Used-Units)            |\n      |                   |---------------------------------------->|\n\
    \      |                   |                    |               CCA  |\n     \
    \ |                   |<----------------------------------------|\n      |   \
    \                | ACR(stop)          |                    |\n      |        \
    \           |------------------->|                    |\n      |             \
    \      |                ACA |                    |\n      |                  \
    \ |<-------------------|                    |\n    Figure 2: Protocol example\
    \ with first interrogation after user's\n                      authorization/authentication\n"
- title: 5.2.2.  Authorization Messages for First Interrogation
  contents:
  - "5.2.2.  Authorization Messages for First Interrogation\n   The Diameter credit-control\
    \ client in the service element MUST\n   actively co-operate with the authorization/authentication\
    \ client in\n   the construction of the AA request by adding appropriate credit-\n\
    \   control AVPs.  The credit-control client MUST add the Credit-Control\n   AVP\
    \ to indicate credit-control capabilities and MAY add other\n   relevant credit-control\
    \ specific AVPs to the proper\n   authorization/authentication command to perform\
    \ the first\n   interrogation toward the home Diameter AAA server.  The Auth-\n\
    \   Application-Id is set to the appropriate value, as defined in the\n   relevant\
    \ service specific authorization/authentication application\n   document (e.g.,\
    \ [NASREQ], [DIAMMIP]).  The home Diameter AAA server\n   authenticates/authorizes\
    \ the subscriber and determines whether\n   credit-control is required.\n   If\
    \ credit-control is not required for the subscriber, the home\n   Diameter AAA\
    \ server will respond as usual, with an appropriate AA\n   answer message.  If\
    \ credit-control is required for the subscriber and\n   the Credit-Control AVP\
    \ with the value set to CREDIT_AUTHORIZATION was\n   present in the authorization\
    \ request, the home AAA server MUST\n   contact the credit-control server to perform\
    \ the first interrogation.\n   If credit-control is required for the subscriber\
    \ and the Credit-\n   Control AVP was not present in the authorization request,\
    \ the home\n   AAA server MUST send an authorization reject answer message.\n\
    \   The Diameter AAA server supporting credit-control is required to send\n  \
    \ the Credit-Control-Request command (CCR) defined in this document to\n   the\
    \ credit-control server.  The Diameter AAA server populates the CCR\n   based\
    \ on service specific AVPs used for input to the rating process,\n   and possibly\
    \ on credit-control AVPs received in the AA request.  The\n   credit-control server\
    \ will reserve money from the user's account,\n   will rate the request and will\
    \ send a Credit-Control-Answer message\n   to the home Diameter AAA server.  The\
    \ answer message includes the\n   Granted-Service-Unit AVP(s) and MAY include\
    \ other credit-control\n   specific AVPs, as appropriate.  Additionally, the credit-control\n\
    \   server MAY set the Validity-Time and MAY include the Credit-Control-\n   Failure-Handling\
    \ AVP and the Direct-Debiting-Failure-Handling AVP to\n   determine what to do\
    \ if the sending of credit-control messages to the\n   credit-control server has\
    \ been temporarily prevented.\n   Upon receiving the Credit-Control-Answer message\
    \ from the credit-\n   control server, the home Diameter AAA server will populate\
    \ the AA\n   answer with the received credit-control AVPs and with the appropriate\n\
    \   service attributes according to the authorization/authentication\n   specific\
    \ application (e.g., [NASREQ], [DIAMMIP]).  It will then\n   forward the packet\
    \ to the credit-control client.  If the home\n   Diameter AAA server receives\
    \ a credit-control reject message, it will\n   simply generate an appropriate\
    \ authorization reject message to the\n   credit-control client, including the\
    \ credit-control specific error\n   code.\n   In this model, the credit-control\
    \ client sends further credit-control\n   messages to the credit-control server\
    \ via the home Diameter AAA\n   server.  Upon receiving a successful authorization\
    \ answer message\n   with the Granted-Service-Unit AVP(s), the credit-control\
    \ client will\n   grant the service to the end user and will generate an intermediate\n\
    \   credit-control request, as required by using credit-control commands.\n  \
    \ The CC-Request-Number of the first UPDATE_REQUEST MUST be set to 1\n   (for\
    \ how to produce unique value for the CC-Request-Number AVP, see\n   section 8.2).\n\
    \   If service specific re-authorization is performed (i.e.,\n   authorization-lifetime\
    \ expires), the credit-control client MUST add\n   to the service specific re-authorization\
    \ request the Credit-Control\n   AVP with a value set to RE_AUTHORIZATION to indicate\
    \ that the\n   credit-control server MUST NOT be contacted.  When session based\n\
    \   credit-control is used for the subscriber, a constant credit-control\n   message\
    \ stream flows through the home Diameter AAA server.  The home\n   Diameter AAA\
    \ server can make use of this credit-control message flow\n   to deduce that the\
    \ user's activity is ongoing; therefore, it is\n   recommended to set the authorization-lifetime\
    \ to a reasonably high\n   value when credit-control is used for the subscriber.\n\
    \   In this scenario, the home Diameter AAA server MUST advertise support\n  \
    \ for the credit-control application to its peers during the capability\n   exchange\
    \ process.\n   The following diagram illustrates the use of\n   authorization/authentication\
    \ messages to perform the first\n   interrogation.  The parallel accounting stream\
    \ is not shown in the\n   figure.\n                    Service Element       \
    \  Diameter\n   End User          (CC Client)           AAA Server          CC\
    \ Server\n      | Service Request   | AA Request (CC AVPs)                   \
    \ |\n      |------------------>|------------------->|                    |\n \
    \     |                   |                    | CCR(Initial, CC AVPs)\n     \
    \ |                   |                    |------------------->|\n      |   \
    \                |                    |    CCA(Granted-Units)\n      |       \
    \            |                    |<-------------------|\n      |            \
    \       | AA Answer(Granted-Units)                |\n      | Service Delivery\
    \  |<-------------------|                    |\n      |<----------------->|  \
    \                  |                    |\n      |         :         |       \
    \             |                    |\n      |         :         |            \
    \        |                    |\n      |         :         |                 \
    \   |                    |\n      |                   |                    | \
    \                   |\n      |                   | CCR(Update,Used-Units)    \
    \              |\n      |                   |------------------->| CCR(Update,Used-Units)\n\
    \      |                   |                    |------------------->|\n     \
    \ |                   |                    |  CCA(Granted-Units)|\n      |   \
    \                |  CCA(Granted-Units)|<-------------------|\n      |        \
    \           |<-------------------|                    |\n      |         :   \
    \      |                    |                    |\n      |         :        \
    \ |                    |                    |\n      | End of Service    |   \
    \                 |                    |\n      |------------------>| CCR(Termination,Used-Units)\
    \             |\n      |                   |------------------->| CCR(Term.,Used-Units)\n\
    \      |                   |                    |------------------->|\n     \
    \ |                   |                    |                CCA |\n      |   \
    \                |                CCA |<-------------------|\n      |        \
    \           |<-------------------|                    |\n                Figure\
    \ 3: Protocol example with use of the\n           authorization messages for the\
    \ first interrogation\n"
- title: 5.3.  Intermediate Interrogation
  contents:
  - "5.3.  Intermediate Interrogation\n   When all the granted service units for one\
    \ unit type are spent by the\n   end user or the Validity-Time is expired, the\
    \ Diameter credit-control\n   client MUST send a new Credit-Control-Request to\
    \ the credit-control\n   server.  In the event that credit-control for multiple\
    \ services is\n   applied in one credit-control session (i.e., units associated\
    \ to\n   Service-Identifier(s) or Rating-Group are granted), a new Credit-\n \
    \  Control-Request MUST be sent to the credit-control server when the\n   credit\
    \ reservation has been wholly consumed, or upon expiration of\n   the Validity-Time.\
    \  It is always up to the Diameter credit-control\n   client to send a new request\
    \ well in advance of the expiration of the\n   previous request in order to avoid\
    \ interruption in the service\n   element.  Even if the granted service units\
    \ reserved by the credit-\n   control server have not been spent upon expiration\
    \ of the Validity-\n   Time, the Diameter credit-control client MUST send a new\
    \ Credit-\n   Control-Request to the credit-control server.\n   There can also\
    \ be mid-session service events, which might affect the\n   rating of the current\
    \ service events.  In this case, a spontaneous\n   updating (a new Credit-Control-Request)\
    \ SHOULD be sent including\n   information related to the service event even if\
    \ all the granted\n   service units have not been spent or the Validity-Time has\
    \ not\n   expired.\n   When the used units are reported to the credit-control\
    \ server, the\n   credit-control client will not have any units in its possession\n\
    \   before new granted units are received from the credit-control server.\n  \
    \ When the new granted units are received, these units apply from the\n   point\
    \ where the measurement of the reported used units stopped.\n   Where independent\
    \ credit-control of multiple services is supported,\n   this process may be executed\
    \ for one or more services, a single\n   rating-group, or a pool within the (sub)session.\n\
    \   The CC-Request-Type AVP is set to the value UPDATE_REQUEST in the\n   intermediate\
    \ request message.  The Subscription-Id AVP SHOULD be\n   included in the intermediate\
    \ message to identify the end user in the\n   credit-control server.  The Service-Context-Id\
    \ AVP indicates the\n   service specific document applicable to the request.\n\
    \   The Requested-Service-Unit AVP MAY contain the new amount of\n   requested\
    \ service units.  Where the Multiple-Services-Credit-Control\n   AVP is used,\
    \ it MUST contain the Requested-Service-Unit AVP if a new\n   quota is requested\
    \ for the associated service/rating-group.  The\n   Used-Service-Unit AVP contains\
    \ the amount of used service units\n   measured from the point when the service\
    \ became active or, if interim\n   interrogations are used during the session,\
    \ from the point when the\n   previous measurement ended.  The same unit types\
    \ used in the previous\n   message SHOULD be used.  If several unit types were\
    \ included in the\n   previous answer message, the used service units for each\
    \ unit type\n   MUST be reported.\n   The Event-Timestamp AVP SHOULD be included\
    \ in the request and\n   contains the time of the event that triggered the sending\
    \ of the new\n   Credit-Control-Request.\n   The credit-control server MUST deduct\
    \ the used amount from the end\n   user's account.  It MAY rate the new request\
    \ and make a new credit-\n   reservation from the end user's account that covers\
    \ the cost of the\n   requested service event.\n   A Credit-Control-Answer message\
    \ with the CC-Request-Type AVP set to\n   the value UPDATE_REQUEST MAY include\
    \ the Cost-Information AVP\n   containing the accumulated cost estimation for\
    \ the session, without\n   taking any credit-reservation into account.\n   The\
    \ Credit-Control-Answer message MAY also include the Final-Unit-\n   Indication\
    \ AVP to indicate that the answer message contains the final\n   units for the\
    \ service.  After the end user has consumed these units,\n   the Diameter credit-control-client\
    \ MUST behave as described in\n   section 5.6.\n   There can be several intermediate\
    \ interrogations within a session.\n"
- title: 5.4.  Final Interrogation
  contents:
  - "5.4.  Final Interrogation\n   When the end user terminates the service session,\
    \ or when the\n   graceful service termination described in section 5.6 takes\
    \ place,\n   the Diameter credit-control client MUST send a final Credit-Control-\n\
    \   Request message to the credit-control server.  The CC-Request-Type\n   AVP\
    \ is set to the value TERMINATION_REQUEST.  The Service-Context-Id\n   AVP indicates\
    \ the service specific document applicable to the\n   request.\n   The Event-Timestamp\
    \ AVP SHOULD be included in the request and\n   contains the time when the session\
    \ was terminated.\n   The Used-Service-Unit AVP contains the amount of used service\
    \ units\n   measured from the point when the service became active or, if interim\n\
    \   interrogations are used during the session, from the point when the\n   previous\
    \ measurement ended.  If several unit types were included in\n   the previous\
    \ answer message, the used service units for each unit\n   type MUST be reported.\n\
    \   After final interrogation, the credit-control server MUST refund the\n   reserved\
    \ credit amount not used to the end user's account and deduct\n   the used monetary\
    \ amount from the end user's account.\n   A Credit-Control-Answer message with\
    \ the CC-Request-Type set to the\n   value TERMINATION_REQUEST MAY include the\
    \ Cost-Information AVP\n   containing the estimated total cost for the session\
    \ in question.\n   If the user logs off during an ongoing credit-control session,\
    \ or if\n   some other reason causes the user to become logged off (e.g., final-\n\
    \   unit indication causes user logoff according to local policy), the\n   service\
    \ element, according to application specific policy, may send a\n   Session-Termination-Request\
    \ (STR) to the home Diameter AAA server as\n   usual [DIAMBASE].  Figure 4 illustrates\
    \ the case when the final-unit\n   indication causes user logoff upon consumption\
    \ of the final granted\n   units and the generation of STR.\n                \
    \   Service Element        AAA Server        CC Server\n   End User         (CC\
    \ Client)\n      | Service Delivery  |                    |                  \
    \  |\n      |<----------------->|                    |                    |\n\
    \      |         :         |                    |                    |\n     \
    \ |         :         |                    |                    |\n      |   \
    \      :         |                    |                    |\n      |        \
    \           |                    |                    |\n      |             \
    \      | CCR(Update,Used-Units)                  |\n      |                  \
    \ |------------------->| CCR(Update,Used-Units)\n      |                   | \
    \                   |------------------->|\n      |                   |      \
    \            CCA(Final-Unit, Terminate)\n      |              CCA(Final-Unit,\
    \ Terminate)|<-------------------|\n      |                   |<-------------------|\
    \                    |\n      |         :         |                    |     \
    \               |\n      |         :         |                    |          \
    \          |\n      |  Disconnect user  |                    |               \
    \     |\n      |<------------------| CCR(Termination,Used-Units)             |\n\
    \      |                   |------------------->| CCR(Term.,Used-Units)\n    \
    \  |                   |                    |------------------->|\n      |  \
    \                 |                    |                CCA |\n      |       \
    \            |                CCA |<-------------------|\n      |            \
    \       |<-------------------|                    |\n      |                 \
    \  | STR                |                    |\n      |                   |------------------->|\
    \                    |\n      |                   |               STA  |     \
    \               |\n      |                   |<-------------------|          \
    \          |\n           Figure 4: User disconnected due to exhausted account\n"
- title: 5.5.  Server-Initiated Credit Re-Authorization
  contents:
  - "5.5.  Server-Initiated Credit Re-Authorization\n   The Diameter credit-control\
    \ application supports server-initiated\n   re-authorization.  The credit-control\
    \ server MAY optionally initiate\n   the credit re-authorization by issuing a\
    \ Re-Auth-Request (RAR) as\n   defined in the Diameter base protocol [DIAMBASE].\
    \  The Auth-\n   Application-Id in the RAR message is set to 4 to indicate Diameter\n\
    \   Credit Control, and the Re-Auth-Request-Type is set to\n   AUTHORIZE_ONLY.\n\
    \   Section 5.1.2 defines the feature to enable credit-control for\n   multiple\
    \ services within a single (sub-)session where the server can\n   authorize credit\
    \ usage at a different level of granularity.  Further,\n   the server may provide\
    \ credit resources to multiple services or\n   rating groups as a pool (see section\
    \ 5.1.2 for details and\n   definitions).  Therefore, the server, based on its\
    \ service logic and\n   its knowledge of the ongoing session, can decide to request\
    \ credit\n   re-authorization for a whole (sub-)session, a single credit pool,\
    \ a\n   single service, or a single rating-group.  To request credit re-\n   authorization\
    \ for a credit pool, the server includes in the RAR\n   message the G-S-U-Pool-Identifier\
    \ AVP indicating the affected pool.\n   To request credit re-authorization for\
    \ a service or a rating-group,\n   the server includes in the RAR message the\
    \ Service-Identifier AVP or\n   the Rating-Group AVP, respectively.  To request\
    \ credit re-\n   authorization for all the ongoing services within the (sub-)session,\n\
    \   the server includes none of the above mentioned AVPs in the RAR\n   message.\n\
    \   If a credit re-authorization is not already ongoing (i.e., the\n   credit-control\
    \ session is in Open state), a credit control client\n   that receives an RAR\
    \ message with Session-Id equal to a currently\n   active credit-control session\
    \ MUST acknowledge the request by sending\n   the Re-Auth-Answer (RAA) message\
    \ and MUST initiate the credit re-\n   authorization toward the server by sending\
    \ a Credit-Control-Request\n   message with the CC-Request-Type AVP set to the\
    \ value UPDATE_REQUEST.\n   The Result-Code 2002 (DIAMETER_LIMITED_SUCCESS) SHOULD\
    \ be used in the\n   RAA message to indicate that an additional message (i.e.,\
    \ CCR message\n   with the value UPDATE_REQUEST) is required to complete the procedure.\n\
    \   If a quota was allocated to the service, the credit-control client\n   MUST\
    \ report the used quota in the Credit-Control-Request.  Note that\n   the end\
    \ user does not need to be prompted for the credit re-\n   authorization, since\
    \ the credit re-authorization is transparent to\n   the user (i.e., it takes place\
    \ exclusively between the credit-control\n   client and the credit-control server).\n\
    \   Where multiple services in a user's session are supported, the\n   procedure\
    \ in the above paragraph will be executed at the granularity\n   requested by\
    \ the server in the RAR message.\n   If credit re-authorization is ongoing at\
    \ the time when the RAR\n   message is received (i.e., RAR-CCR collision), the\
    \ credit-control\n   client successfully acknowledges the request but does not\
    \ initiate a\n   new credit re-authorization.  The Result-Code 2001 (DIAMETER_SUCCESS)\n\
    \   SHOULD be used in the RAA message to indicate that a credit re-\n   authorization\
    \ procedure is already ongoing (i.e., the client was in\n   PendingU state when\
    \ the RAR was received).  The credit-control server\n   SHOULD process the Credit-Control-Request\
    \ as if it was received in\n   answer to the server initiated credit re-authorization,\
    \ and should\n   consider the server initiated credit re-authorization process\n\
    \   successful upon reception of the Re-Auth-Answer message.\n   When multiple\
    \ services are supported in a user's session, the server\n   may request credit\
    \ re-authorization for a credit pool (or for the\n   (sub-)session) while a credit\
    \ re-authorization is already ongoing for\n   some of the services or rating-groups.\
    \  In this case, the client\n   acknowledges the server request with an RAA message\
    \ and MUST send a\n   new Credit-Control-Request message to perform re-authorization\
    \ for\n   the remaining services/rating-groups.  The Result-Code 2002\n   (DIAMETER_LIMITED_SUCCESS)\
    \ SHOULD be used in the RAA message to\n   indicate that an additional message\
    \ (i.e., CCR message with value\n   UPDATE_REQUEST) is required to complete the\
    \ procedure.  The server\n   processes the received requests and returns an appropriate\
    \ answer to\n   both requests.\n   The above-defined procedures are enabled for\
    \ each of the possibly\n   active Diameter credit-control sub-sessions.  The server\
    \ MAY request\n   re-authorization for an active sub-session by including the\
    \ CC-Sub-\n   Session-Id AVP in the RAR message in addition to the Session-Id\
    \ AVP.\n"
- title: 5.6.  Graceful Service Termination
  contents:
  - "5.6.  Graceful Service Termination\n   When the user's account runs out of money,\
    \ the user may not be\n   allowed to compile additional chargeable events.  However,\
    \ the home\n   service provider may offer some services; for instance, access\
    \ to a\n   service portal where it is possible to refill the account, for which\n\
    \   the user is allowed to benefit for a limited time.  The length of\n   this\
    \ time is usually dependent on the home service provider policy.\n   This section\
    \ defines the optional graceful service termination\n   feature that MAY be supported\
    \ by the credit-control server.  Credit-\n   control client implementations MUST\
    \ support the Final-Unit-Indication\n   with at least the teardown of the ongoing\
    \ service session once the\n   subscriber has consumed all the final granted units.\n\
    \   Where independent credit-control of multiple services in a single\n   credit-control\
    \ (sub-)session is supported, it is possible to use the\n   graceful service termination\
    \ for each of the services/rating-groups\n   independently.  Naturally, the graceful\
    \ service termination process\n   defined in the following sub-sections will apply\
    \ to the specific\n   service/rating-group as requested by the server.\n   In\
    \ some service environments (e.g., NAS), the graceful service\n   termination\
    \ may be used to redirect the subscriber to a service\n   portal for online balance\
    \ refill or other services offered by the\n   home service provider.  In this\
    \ case, the graceful termination\n   process installs a set of packet filters\
    \ to restrict the user's\n   access capability only to/from the specified destinations.\
    \  All the\n   IP packets not matching the filters will be dropped or, possibly,\n\
    \   re-directed to the service portal.  The user may also be sent an\n   appropriate\
    \ notification as to why the access has been limited.\n   These actions may be\
    \ communicated explicitly from the server to the\n   client or may be configured\
    \ per-service at the client.  Explicitly\n   signaled redirect or restrict instructions\
    \ always take precedence\n   over configured ones.\n   It is also possible use\
    \ the graceful service termination to connect\n   the prepaid user to a top-up\
    \ server that plays an announcement and\n   prompts the user to replenish the\
    \ account.  In this case, the\n   credit-control server sends only the address\
    \ of the top-up server\n   where the prepaid user shall be connected after the\
    \ final granted\n   units have been consumed.  An example of this is given in\
    \ Appendix A\n   (Flow VII).\n   The credit-control server MAY initiate the graceful\
    \ service\n   termination by including the Final-Unit-Indication AVP in the\n\
    \   Credit-Control-Answer to indicate that the message contains the final\n  \
    \ units for the service.\n   When the credit-control client receives the Final-Unit-Indication\
    \ AVP\n   in the answer from the server, its behavior depends on the value\n \
    \  indicated in the Final-Unit-Action AVP.  The server may request the\n   following\
    \ actions: TERMINATE, REDIRECT, or RESTRICT_ACCESS.\n   A following figure illustrates\
    \ the graceful service termination\n   procedure described in the following sub-sections.\n\
    \                                            Diameter\n   End User        Service\
    \ Element         AAA Server          CC Server\n                    (CC Client)\n\
    \      |  Service Delivery |                    |                    |\n     \
    \ |<----------------->|                    |                    |\n      |   \
    \                |CCR(Update,Used-Units)                   |\n      |        \
    \           |------------------->|CCR(Update,Used-Units)\n      |         :  \
    \       |                    |------------------->|\n      |         :       \
    \  |                    |CCA(Final-Unit,Action)\n      |         :         | \
    \                   |<-------------------|\n      |                   |CCA(Final-Unit,Action)\
    \                   |\n      |                   |<-------------------|      \
    \              |\n      |                   |                    |           \
    \         |\n      |         :         |                    |                \
    \    |\n      |         :         |                    |                    |\n\
    \      |         :         |                    |                    |\n     \
    \ | ///////////////   |CCR(Update,Used-Units)                   |\n      |/Final\
    \ Units End/->|------------------->|CCR(Update,Used-Units)\n      |/Action and\
    \    //  |                    |------------------->|\n      |/Restrictions //\
    \   |                    |  CCA(Validity-Time)|\n      |/Start       //    | \
    \ CCA(Validity-Time)|<-------------------|\n      | /////////////     |<-------------------|\
    \                    |\n      |         :         |                    |     \
    \               |\n      |         :         |                    |          \
    \          |\n      |                 Replenish Account            +-------+ \
    \     |\n      |<-------------------------------------------->|Account|      |\n\
    \      |                   |                    |     +-------+      |\n     \
    \ |                   |                    |                RAR |\n      |   \
    \              + |                RAR |<===================|\n      |        \
    \         | |<===================|                    |\n      |             \
    \    | | RAA                |                    |\n      |  /////////////  |\
    \ |===================>| RAA                |\n      | /If supported / | | CCR(Update)\
    \        |===================>|\n      | /by CC Server/  | |===================>|\
    \ CCR(Update)        |\n      | /////////////   | |                    |===================>|\n\
    \      |                 | |                    |   CCA(Granted-Unit)|\n     \
    \ |                 | |   CCA(Granted-Unit)|<===================|\n      |  Restrictions\
    \ ->+ |<===================|                    |\n      |  removed          |\
    \                    |                    |\n      |         :         |     \
    \               |                    |\n      |        OR         | CCR(Update)\
    \        |                    |\n      |   Validity-Time ->|------------------->|\
    \ CCR(Update)        |\n      |   expires         |                    |------------------->|\n\
    \      |                   |                    |   CCA(Granted-Unit)|\n     \
    \ |                   |   CCA(Granted-Unit)|<-------------------|\n      |   \
    \ Restrictions ->|<-------------------|                    |\n      |    removed\
    \        |                    |                    |\n         Figure 5: Optional\
    \ graceful service termination procedure\n"
- title: 5.6.1.  Terminate Action
  contents:
  - "5.6.1.  Terminate Action\n   The Final-Unit-Indication AVP with Final-Unit-Action\
    \ TERMINATE does\n   not include any other information.  When the subscriber has\
    \ consumed\n   the final granted units, the service element MUST terminate the\n\
    \   service.  This is the default handling applicable whenever the\n   credit-control\
    \ client receives an unsupported Final-Unit-Action value\n   and MUST be supported\
    \ by all the Diameter credit-control client\n   implementations conforming to\
    \ this specification.  A final Credit-\n   Control-Request message to the credit-control\
    \ server MUST be sent if\n   the Final-Unit-Indication AVP indicating action TERMINATE\
    \ was present\n   at command level.  The CC-Request-Type AVP in the request is\
    \ set to\n   the value TERMINATION_REQUEST.\n"
- title: 5.6.2.  Redirect Action
  contents:
  - "5.6.2.  Redirect Action\n   The Final-Unit-Indication AVP with Final-Unit-Action\
    \ REDIRECT\n   indicates to the service element supporting this action that, upon\n\
    \   consumption of the final granted units, the user MUST be re-directed\n   to\
    \ the address specified in the Redirect-Server AVP as follows.\n   The credit-control\
    \ server sends the Redirect-Server AVP in the\n   Credit-Control-Answer message.\
    \  In such a case, the service element\n   MUST redirect or connect the user to\
    \ the destination specified in the\n   Redirect-Server AVP, if possible.  When\
    \ the end user is redirected\n   (by using protocols others than Diameter) to\
    \ the specified server or\n   connected to the top-up server, an additional authorization\
    \ (and\n   possibly authentication) may be needed before the subscriber can\n\
    \   replenish the account; however, this is out of the scope of this\n   specification.\n\
    \   In addition to the Redirect-Server AVP, the credit-control server MAY\n  \
    \ include one or more Restriction-Filter-Rule AVPs or one or more\n   Filter-Id\
    \ AVPs in the Credit-Control-Answer message to enable the\n   user to access other\
    \ services (for example, zero-rated services).  In\n   such a case, the access\
    \ device MUST drop all the packets not matching\n   the IP filters specified in\
    \ the Credit-Control-Answer message and, if\n   possible, redirect the user to\
    \ the destination specified in the\n   Redirect-Server AVP.\n   An entity other\
    \ than the credit-control server may provision the\n   access device with appropriate\
    \ IP packet filters to be used in\n   conjunction with the Diameter credit-control\
    \ application.  This case\n   is considered in section 5.6.3.\n   When the final\
    \ granted units have been consumed, the credit-control\n   client MUST perform\
    \ an intermediate interrogation.  The purpose of\n   this interrogation is to\
    \ indicate to the credit-control server that\n   the specified action started\
    \ and to report the used units.  The\n   credit-control server MUST deduct the\
    \ used amount from the end user's\n   account but MUST NOT make a new credit reservation.\
    \  The credit-\n   control client, however, may send intermediate interrogations\
    \ before\n   all the final granted units have been consumed for which rating and\n\
    \   money reservation may be needed; for instance, upon Validity-Time\n   expires\
    \ or upon mid-session service events that affect the rating of\n   the current\
    \ service.  Therefore, the credit-control client MUST NOT\n   include any rating\
    \ related AVP in the request sent once all the final\n   granted units have been\
    \ consumed as an indication to the server that\n   the requested final unit action\
    \ started, rating and money reservation\n   are not required (when the Multiple-Services-Credit-Control\
    \ AVP is\n   used, the Service-Identifier or Rating-Group AVPs is included to\n\
    \   indicate the concerned services).  Naturally, the Credit-Control-\n   Answer\
    \ message does not contain any granted service unit and MUST\n   include the Validity-Time\
    \ AVP to indicate to the credit-control\n   client how long the subscriber is\
    \ allowed to use network resources\n   before a new intermediate interrogation\
    \ is sent to the server.\n   At the expiry of Validity-Time, the credit-control\
    \ client sends a\n   Credit-Control-Request (UPDATE_REQUEST) as usual.  This message\
    \ does\n   not include the Used-Service-Unit AVP, as there is no allotted quota\n\
    \   to report.  The credit-control server processes the request and MUST\n   perform\
    \ the credit reservation.  If during this time the subscriber\n   did not replenish\
    \ his/her account, whether he/she will be\n   disconnected or will be granted\
    \ access to services not controlled by\n   a credit-control server for an unlimited\
    \ time is dependent on the\n   home service provider policy (note: the latter\
    \ option implies that\n   the service element should not remove the restriction\
    \ filters upon\n   termination of the credit-control).  The server will return\
    \ the\n   appropriate Result-Code (see section 9.1) in the Credit-Control-\n \
    \  Answer message in order to implement the policy-defined action.\n   Otherwise,\
    \ new quota will be returned, the service element MUST\n   remove all the possible\
    \ restrictions activated by the graceful\n   service termination process and continue\
    \ the credit-control session\n   and service session as usual.\n   The credit-control\
    \ client may not wait until the expiration of the\n   Validity-Time and may send\
    \ a spontaneous update (a new Credit-\n   Control-Request) if the service element\
    \ can determine, for instance,\n   that communication between the end user and\
    \ the top-up server took\n   place.  An example of this is given in Appendix A\
    \ (Figure A.8).\n   Note that the credit-control server may already have initiated\
    \ the\n   above-described process for the first interrogation.  However, the\n\
    \   user's account might be empty when this first interrogation is\n   performed.\
    \  In this case, the subscriber can be offered a chance to\n   replenish the account\
    \ and continue the service.  The credit-control\n   client receives a Credit-Control-Answer\
    \ or service specific\n   authorization answer with the Final-Unit-Indication\
    \ and Validity-Time\n   AVPs but no Granted-Service-Unit.  It immediately starts\
    \ the graceful\n   service termination without sending any message to the server.\
    \  An\n   example of this case is illustrated in Appendix A.\n"
- title: 5.6.3.  Restrict Access Action
  contents:
  - "5.6.3.  Restrict Access Action\n   A Final-Unit-Indication AVP with the Final-Unit-Action\n\
    \   RESTRICT_ACCESS indicates to the device supporting this action that\n   the\
    \ user's access MUST be restricted according to the IP packet\n   filters given\
    \ in the Restriction-Filter-Rule AVP(s) or according to\n   the IP packet filters\
    \ identified by the Filter-Id AVP(s).  The\n   credit-control server SHOULD include\
    \ either the Restriction-Filter-\n   Rule AVP or the Filter-Id AVP in the Credit-Control-Answer\
    \ message.\n   An entity other than the credit-control server may provision the\n\
    \   access device with appropriate IP packet filters to be used in\n   conjunction\
    \ with the Diameter credit-control application.  Such an\n   entity may, for instance,\
    \ configure the access device with IP flows\n   to be passed when the Diameter\
    \ credit-control application indicates\n   RESTRICT_ACCESS or REDIRECT.  The access\
    \ device passes IP packets\n   according to the filter rules that may have been\
    \ received in the\n   Credit-Control-Answer message in addition to those that\
    \ may have been\n   configured by the other entity.  However, when the user's\
    \ account\n   cannot cover the cost of the requested service, the action taken\
    \ is\n   the responsibility of the credit-control server that controls the\n \
    \  prepaid subscriber.\n   If another entity working in conjunction with the Diameter\
    \ credit-\n   control application already provisions the access device with all\
    \ the\n   required filter rules for the end user, the credit-control server\n\
    \   presumably need not send any additional filter.  Therefore, it is\n   RECOMMENDED\
    \ that credit-control server implementations supporting the\n   graceful service\
    \ termination be configurable for sending the\n   Restriction-Filter-Rule AVP,\
    \ the Filter-Id AVP, or none of the above.\n   When the final granted units have\
    \ been consumed, the credit-control\n   client MUST perform an intermediate interrogation.\
    \  The credit-\n   control client and the credit-control server process this\n\
    \   intermediate interrogation and execute subsequent procedures, as\n   specified\
    \ in the previous section for the REDIRECT action.\n   The credit-control server\
    \ may initiate the graceful service\n   termination with action RESTRICT_ACCESS\
    \ already for the first\n   interrogation, as specified in the previous section\
    \ for the REDIRECT\n   action.\n"
- title: 5.6.4.  Usage of the Server-Initiated Credit Re-Authorization
  contents:
  - "5.6.4.  Usage of the Server-Initiated Credit Re-Authorization\n   Once the subscriber\
    \ replenishes the account, she presumably expects\n   all the restrictions placed\
    \ by the graceful termination procedure to\n   be removed immediately and unlimited\
    \ service' access to be resumed.\n   For the best user experience, the credit-control\
    \ server\n   implementation MAY support the server-initiated credit re-\n   authorization\
    \ (see section 5.5).  In such a case, upon the successful\n   account top-up,\
    \ the credit-control server sends the Re-Auth-Request\n   (RAR) message to solicit\
    \ the credit re-authorization.  The credit-\n   control client initiates the credit\
    \ re-authorization by sending the\n   Credit-Control-Request message with the\
    \ CC-Request-Type AVP set to\n   the value UPDATE_REQUEST.  The Used-Service-Unit\
    \ AVP is not included\n   in the request, as there is no allotted quota to report.\
    \  The\n   Requested-Service-Unit AVP MAY be included in the request.  After the\n\
    \   credit-control client successfully receives the Credit-Control-Answer\n  \
    \ with new Granted-Service-Unit, all the possible restrictions\n   activated for\
    \ the purpose of the graceful service termination MUST be\n   removed in the service\
    \ element.  The credit-control session and the\n   service session continue as\
    \ usual.\n"
- title: 5.7.  Failure Procedures
  contents:
  - "5.7.  Failure Procedures\n   The Credit-Control-Failure-Handling AVP (CCFH),\
    \ as described in this\n   section, determines the behavior of the credit-control\
    \ client in\n   fault situations.  The CCFH may be received from the Diameter\
    \ home\n   AAA server, from the credit-control server, or may be configured\n\
    \   locally.  The CCFH value received from the home AAA server overrides\n   the\
    \ locally configured value.  The CCFH value received from the\n   credit-control\
    \ server in the Credit-Control-Answer message always\n   overrides any existing\
    \ value.\n   The authorization server MAY include the Accounting-Realtime-Required\n\
    \   AVP to determine what to do if the sending of accounting records to\n   the\
    \ accounting server has been temporarily prevented, as defined in\n   [DIAMBASE].\
    \  It is RECOMMENDED that the client complement the\n   credit-control failure\
    \ procedures with backup accounting flow toward\n   an accounting server.  By\
    \ using different combinations of\n   Accounting-Realtime-Required and Credit-Control-Failure-Handling\n\
    \   AVPs, different safety levels can be built.  For example, by choosing\n  \
    \ a Credit-Control-Failure-Handling AVP equal to CONTINUE for the\n   credit-control\
    \ flow and a Accounting-Realtime-Required AVP equal to\n   DELIVER_AND_GRANT for\
    \ the accounting flow, the service can be granted\n   to the end user even if\
    \ the connection to the credit-control server\n   is down, as long as the accounting\
    \ server is able to collect the\n   accounting information and information exchange\
    \ is taking place\n   between the accounting server and credit-control server.\n\
    \   As the credit-control application is based on real-time bi-\n   directional\
    \ communication between the credit-control client and the\n   credit-control server,\
    \ the usage of alternative destinations and the\n   buffering of messages may\
    \ not be sufficient in the event of\n   communication failures.  Because the credit-control\
    \ server has to\n   maintain session states, moving the credit-control message\
    \ stream to\n   a backup server requires a complex context transfer solution.\n\
    \   Whether the credit-control message stream is moved to a backup\n   credit-control\
    \ server during an ongoing credit-control session\n   depends on the value of\
    \ the CC-Session-Failover AVP.  However,\n   failover may occur at any point in\
    \ the path between the credit-\n   control client and the credit-control server\
    \ if a transport failure\n   is detected with a peer, as described in [DIAMBASE].\
    \  As a\n   consequence, the credit-control server might receive duplicate\n \
    \  messages.  These duplicates or out of sequence messages can be\n   detected\
    \ in the credit-control server based on the credit-control\n   server session\
    \ state machine (section 7), Session-Id AVP, and CC-\n   Request-Number AVP.\n\
    \   If a failure occurs during an ongoing credit-control session, the\n   credit-control\
    \ client may move the credit-control message stream to\n   an alternative server\
    \ if the CC-server indicated FAILOVER_SUPPORTED\n   in the CC-Session-Failover\
    \ AVP.  A secondary credit-control server\n   name, either received from the home\
    \ Diameter AAA server or configured\n   locally, can be used as an address of\
    \ the backup server.  If the CC-\n   Session-Failover AVP is set to FAILOVER_NOT_SUPPORTED,\
    \ the credit-\n   control message stream MUST NOT be moved to a backup server.\n\
    \   For new credit-control sessions, failover to an alternative credit-\n   control\
    \ server SHOULD be performed if possible.  For instance, if an\n   implementation\
    \ of the credit-control client can determine primary\n   credit-control server\
    \ unavailability, it can establish the new\n   credit-control sessions with a\
    \ possibly available secondary credit-\n   control server.\n   The AAA transport\
    \ profile [AAATRANS] defines the application layer\n   watchdog algorithm that\
    \ enables failover from a peer that has failed\n   and is controlled by a watchdog\
    \ timer (Tw) defined in [AAATRANS].\n   The recommended default initial value\
    \ for Tw (Twinit) is 30 seconds.\n   Twinit may be set as low as 6 seconds; however,\
    \ according to\n   [AAATRANS], setting too low a value for Twinit is likely to\
    \ result in\n   an increased probability of duplicates, as well as an increase\
    \ in\n   spurious failover and failback attempts.  The Diameter base protocol\n\
    \   is common to several different types of Diameter AAA applications\n   that\
    \ may be run in the same service element.  Therefore, tuning the\n   timer Twinit\
    \ to a lower value in order to satisfy the requirements of\n   real-time applications,\
    \ such as the Diameter credit-control\n   application, will certainly cause the\
    \ above mentioned problems.  For\n   prepaid services, however, the end user expects\
    \ an answer from the\n   network in a reasonable time.  Thus, the Diameter credit-control\n\
    \   client will react faster than would the underlying base protocol.\n   Therefore\
    \ this specification defines the timer Tx that is used by the\n   credit-control\
    \ client (as defined in section 13) to supervise the\n   communication with the\
    \ credit-control server.  When the timer Tx\n   elapses, the credit-control client\
    \ takes an action to the end user\n   according to the Credit-Control-Failure-Handling\
    \ AVP.\n   When Tx expires, the Diameter credit-control client always terminates\n\
    \   the service if the Credit-Control-Failure-Handling (CCFH) AVP is set\n   to\
    \ the value TERMINATE.  The credit-control session may be moved to\n   an alternative\
    \ server only if a protocol error DIAMETER_TOO_BUSY or\n   DIAMETER_UNABLE_TO_DELIVER\
    \ is received before Tx expires.  Therefore,\n   the value TERMINATE is not appropriate\
    \ if proper failover behavior is\n   desired.\n   If the Credit-Control-Failure-Handling\
    \ AVP is set to the value\n   CONTINUE or RETRY_AND_TERMINATE, the service will\
    \ be granted to the\n   end user when the timer Tx expires.  An answer message\
    \ with granted-\n   units may arrive later if the base protocol transport failover\n\
    \   occurred in the path to the credit-control server.  (The Twinit\n   default\
    \ value is 3 times more than the Tx recommended value.) The\n   credit-control\
    \ client SHOULD grant the service to the end user, start\n   monitoring the resource\
    \ usage, and wait for the possible late answer\n   until the timeout of the request\
    \ (e.g., 120 seconds).  If the request\n   fails and the CC-Session-Failover AVP\
    \ is set to\n   FAILOVER_NOT_SUPPORTED, the credit-control client terminates or\n\
    \   continues the service depending on the value set in the CCFH and MUST\n  \
    \ free all the reserved resources for the credit-control session.  If\n   the\
    \ protocol error DIAMETER_UNABLE_TO_DELIVER or DIAMETER_TOO_BUSY is\n   received\
    \ or the request times out and the CC-Session-Failover AVP is\n   set to FAILOVER_SUPPORTED,\
    \ the credit-control client MAY send the\n   request to a backup server, if possible.\
    \  If the credit-control\n   client receives a successful answer from the backup\
    \ server, it\n   continues the credit-control session with such a server.  If\
    \ the re-\n   transmitted request also fails, the credit-control client terminates\n\
    \   or continues the service depending on the value set in the CCFH and\n   MUST\
    \ free all the reserved resources for the credit-control session.\n   If a communication\
    \ failure occurs during the graceful service\n   termination procedure, the service\
    \ element SHOULD always terminate\n   the ongoing service session.\n   If the\
    \ credit-control server detects a failure during an ongoing\n   credit-control\
    \ session, it will terminate the credit-control session\n   and return the reserved\
    \ units back to the end user's account.\n   The supervision session timer Tcc\
    \ (as defined in section 13) is used\n   in the credit-control server to supervise\
    \ the credit-control session.\n   In order to support failover between credit-control\
    \ servers,\n   information transfer about the credit-control session and account\n\
    \   state SHOULD take place between the primary and the secondary\n   credit-control\
    \ server.  Implementations supporting the credit-control\n   session failover\
    \ MUST also ensure proper detection of duplicate or\n   out of sequence messages.\
    \  The communication between the servers is\n   regarded as an implementation\
    \ issue and is outside of the scope of\n   this specification.\n"
- title: 6.  One Time Event
  contents:
  - "6.  One Time Event\n   The one-time event is used when there is no need to maintain\
    \ any\n   state in the Diameter credit-control server; for example, enquiring\n\
    \   about the price of the service.  The use of a one-time event implies\n   that\
    \ the user has been authenticated and authorized beforehand.\n   The one time\
    \ event can be used when the credit-control client wants\n   to know the cost\
    \ of the service event or to check the account balance\n   without any credit-reservation.\
    \  It can also be used for refunding\n   service units on the user's account or\
    \ for direct debiting without\n   any credit-reservation.  The one time event\
    \ is shown in Figure 6.\n                                           Diameter\n\
    \   End User        Service Element        AAA Server        CC Server\n     \
    \                (CC Client)\n      | Service Request   |                    |\
    \                    |\n      |------------------>|                    |     \
    \               |\n      |                   | CCR(Event)         |          \
    \          |\n      |                   |------------------->| CCR(Event)    \
    \     |\n      |                   |                    |------------------->|\n\
    \      |                   |                    |  CCA(Granted-Units)|\n     \
    \ |                   |  CCA(Granted-Units)|<-------------------|\n      |  Service\
    \ Delivery |<-------------------|                    |\n      |<----------------->|\
    \                    |                    |\n                         Figure 6:\
    \ One time event\n   In environments such as the 3GPP architecture, the one time\
    \ event can\n   be sent from the service element directly to the credit-control\n\
    \   server.\n"
- title: 6.1.  Service Price Enquiry
  contents:
  - "6.1.  Service Price Enquiry\n   The credit-control client may need to know the\
    \ price of the service\n   event.  Services offered by application service providers\
    \ whose\n   prices are not known in the credit-control client might exist.  The\n\
    \   end user might also want to get an estimation of the price of a\n   service\
    \ event before requesting it.\n   A Diameter credit-control client requesting\
    \ the cost information MUST\n   set the CC-Request-Type AVP equal to EVENT_REQUEST,\
    \ include the\n   Requested-Action AVP set to PRICE_ENQUIRY, and set the requested\n\
    \   service event information into the Service-Identifier AVP in the\n   Credit-Control-Request\
    \ message.  Additional service event information\n   may be sent as service specific\
    \ AVPs or within the Service-\n   Parameter-Info AVP.  The Service-Context-Id\
    \ AVP indicates the service\n   specific document applicable to the request.\n\
    \   The credit-control server calculates the cost of the requested\n   service\
    \ event, but it does not perform any account balance check or\n   credit-reservation\
    \ from the account.\n   The estimated cost of the requested service event is returned\
    \ to the\n   credit-control client in the Cost-Information AVP in the Credit-\n\
    \   Control-Answer message.\n"
- title: 6.2.  Balance Check
  contents:
  - "6.2.  Balance Check\n   The Diameter credit-control client may only have to verify\
    \ that the\n   end user's account balance covers the cost of a certain service\n\
    \   without reserving any units from the account at the time of the\n   inquiry.\
    \  This method does not guarantee that credit would be left\n   when the Diameter\
    \ credit-control client requests the debiting of the\n   account with a separate\
    \ request.\n   A Diameter credit-control client requesting the balance check MUST\n\
    \   set the CC-Request-Type AVP equal to EVENT_REQUEST, include a\n   Requested-Action\
    \ AVP set to CHECK_BALANCE, and include the\n   Subscription-Id AVP in order to\
    \ identify the end user in the credit-\n   control server.  The Service-Context-Id\
    \ AVP indicates the service\n   specific document applicable to the request.\n\
    \   The credit-control server makes the balance check, but it does not\n   make\
    \ any credit-reservation from the account.\n   The result of balance check (ENOUGH_CREDIT/NO_CREDIT)\
    \ is returned to\n   the credit-control client in the Check-Balance-Result AVP\
    \ in the\n   Credit-Control-Answer message.\n"
- title: 6.3.  Direct Debiting
  contents:
  - "6.3.  Direct Debiting\n   There are certain service events for which service\
    \ execution is\n   always successful in the service environment.  The delay between\
    \ the\n   service invocation and the actual service delivery to the end user\n\
    \   can be sufficiently long that the use of the session-based credit-\n   control\
    \ would lead to unreasonably long credit-control sessions.  In\n   these cases,\
    \ the Diameter credit-control client can use the one-time\n   event scenario for\
    \ direct debiting.  The Diameter credit-control\n   client SHOULD be sure that\
    \ the requested service event execution\n   would be successful when this scenario\
    \ is used.\n   In the Credit-Control-Request message, the CC-Request-Type is set\
    \ to\n   the value EVENT_REQUEST and the Requested-Action AVP is set to\n   DIRECT_DEBITING.\
    \  The Subscription-Id AVP SHOULD be included to\n   identify the end user in\
    \ the credit-control server.  The Event-\n   Timestamp AVP SHOULD be included\
    \ in the request and contain the time\n   when the service event is requested\
    \ in the service element.  The\n   Service-Context-Id AVP indicates the service\
    \ specific document\n   applicable to the request.\n   The Diameter credit-control\
    \ client MAY include the monetary amount to\n   be charged in the Requested-Service-Unit\
    \ AVP, if it knows the cost of\n   the service event.  If the Diameter credit-control\
    \ client does not\n   know the cost of the service event, the Requested-Service-Unit\
    \ AVP\n   MAY contain the number of requested service events.  The Service-\n\
    \   Identifier AVP always indicates the service concerned.  Additional\n   service\
    \ event information to be rated MAY be sent as service specific\n   AVPs or within\
    \ the Service-Parameter-Info AVP.\n   The credit-control server SHOULD rate the\
    \ service event and deduct\n   the corresponding monetary amount from the end\
    \ user's account.  If\n   the type of the Requested-Service-Unit AVP is money,\
    \ no rating is\n   needed, but the corresponding monetary amount is deducted from\
    \ the\n   end user's account.\n   The credit-control server returns the Granted-Service-Unit\
    \ AVP in the\n   Credit-Control-Answer message to the Diameter credit-control\
    \ client.\n   The Granted-Service-Unit AVP contains the amount of service units\n\
    \   that the Diameter credit-control client can provide to the end user.\n   The\
    \ type of the Granted-Service-Unit can be time, volume, service\n   specific,\
    \ or money, depending on the type of service event.\n   If the credit-control\
    \ server determines that no credit-control is\n   needed for the service, it can\
    \ include the result code indicating\n   that the credit-control is not applicable\
    \ (e.g., service is free of\n   charge).\n   For informative purposes, the Credit-Control-Answer\
    \ message MAY also\n   include the Cost-Information AVP containing the estimated\
    \ total cost\n   of the requested service.\n"
- title: 6.4.  Refund
  contents:
  - "6.4.  Refund\n   Some services may refund service units to the end user's account;\
    \ for\n   example, gaming services.\n   The credit-control client MUST set CC-Request-Type\
    \ to the value\n   EVENT_REQUEST and the Requested-Action AVP to REFUND_ACCOUNT\
    \ in the\n   Credit-Control-Request message.  The Subscription-Id AVP SHOULD be\n\
    \   included to identify the end user in the credit-control server.  The\n   Service-Context-Id\
    \ AVP indicates the service specific document\n   applicable to the request.\n\
    \   The Diameter credit-control client MAY include the monetary amount to\n  \
    \ be refunded in the Requested-Service-Unit AVP.  The Service-\n   Identifier\
    \ AVP always indicates the concerned service.  If the\n   Diameter credit-control\
    \ client does not know the monetary amount to\n   be refunded, in addition to\
    \ the Service-Identifier AVP it MAY send\n   service specific AVPs or the Service-Parameter-Info\
    \ AVP containing\n   additional service event information to be rated.\n   For\
    \ informative purposes, the Credit-Control-Answer message MAY also\n   include\
    \ the Cost-Information AVP containing the estimated monetary\n   amount of refunded\
    \ unit.\n"
- title: 6.5.  Failure Procedure
  contents:
  - "6.5.  Failure Procedure\n   Failover to an alternative credit-control server\
    \ is allowed for a one\n   time event, as the server is not maintaining session\
    \ states.  For\n   instance, if the credit-control client receives a protocol\
    \ error\n   DIAMETER_UNABLE_TO_DELIVER or DIAMETER_TOO_BUSY, it can re-send the\n\
    \   request to an alternative server, if possible.  There MAY be protocol\n  \
    \ transparent Diameter relays and redirect agents or Diameter credit-\n   control\
    \ proxies between the credit-control client and credit-control\n   server.  Failover\
    \ may occur at any point in the path between the\n   credit-control client and\
    \ the credit-control server if a transport\n   failure is detected with a peer,\
    \ as described in [DIAMBASE].  Because\n   there can be duplicate requests for\
    \ various reasons, the credit-\n   control server is responsible for real time\
    \ duplicate detection.\n   Implementation issues for duplicate detection are discussed\
    \ in\n   [DIAMBASE], Appendix C.\n   When the credit-control client detects a\
    \ communication failure with\n   the credit-control server, its behavior depends\
    \ on the requested\n   action.  The timer Tx (as defined in section 13) is used\
    \ in the\n   credit-control client to supervise the communication with the\n \
    \  credit-control server.\n   If the requested action is PRICE_ENQUIRY or CHECK_BALANCE\
    \ and\n   communication failure is detected, the credit-control client SHOULD\n\
    \   forward the request messages to an alternative credit-control server,\n  \
    \ if possible.  The secondary credit-control server name, if received\n   from\
    \ the home Diameter AAA server, can be used as an address of\n   backup server.\n\
    \   If the requested action is DIRECT_DEBITING, the Direct-Debiting-\n   Failure-Handling\
    \ AVP (DDFH) controls the credit-control client's\n   behavior.  The DDFH may\
    \ be received from the home Diameter AAA server\n   or may be locally configured.\
    \  The credit-control server may also\n   send the DDFH in any CCA message to\
    \ be used for direct debiting\n   events compiled thereafter.  The DDFH value\
    \ received from the home\n   Diameter AAA server overrides the locally configured\
    \ value, and the\n   DDFH value received from the credit-control server in a Credit-\n\
    \   Control-Answer message always overrides any existing value.\n   If the DDFH\
    \ is set to TERMINATE_OR_BUFFER, the credit-control client\n   SHOULD NOT grant\
    \ the service if it can determine, eventually after a\n   possible re-transmission\
    \ attempt to an alternative credit-control\n   server, from the result code or\
    \ error code in the answer message that\n   units have not been debited.  Otherwise,\
    \ the credit-control client\n   SHOULD grant the service to the end user and store\
    \ the request in the\n   credit-control application level non-volatile storage.\
    \  (Note that\n   re-sending the request at a later time is not a guarantee that\
    \ the\n   service will be debited, as the user's account may be empty when the\n\
    \   server successfully processes the request.)  The credit-control\n   client\
    \ MUST mark these request messages as possible duplicates by\n   setting the T-flag\
    \ in the command header as described in [DIAMBASE],\n   section 3.\n   If the\
    \ Direct-Debiting-Failure-Handling AVP is set to CONTINUE, the\n   service SHOULD\
    \ be granted, even if credit-control messages cannot be\n   delivered and messages\
    \ are not buffered.\n   If the timer Tx expires, the credit-control client MUST\
    \ continue the\n   service and wait for a possible late answer.  If the request\
    \ times\n   out, the credit-control client re-transmits the request (marked with\n\
    \   T-flag) to a backup credit-control server, if possible.  If the re-\n   transmitted\
    \ request also times out, or if a temporary error is\n   received in answer, the\
    \ credit-control client buffers the request if\n   the value of the Direct-Debiting-Failure-Handling\
    \ AVP is set to\n   TERMINATE_OR_BUFFER.  If a failed answer is received for the\n\
    \   re-transmitted request, the credit-control client frees all the\n   resources\
    \ reserved for the event message and deletes the request\n   regardless of the\
    \ value of the DDFH.\n   The Credit-Control-Request with the requested action\
    \ REFUND_ACCOUNT\n   should always be stored in the credit-control application\
    \ level non-\n   volatile storage in case of temporary failure.  The credit-control\n\
    \   client MUST mark the re-transmitted request message as a possible\n   duplicate\
    \ by setting the T-flag in the command header as described in\n   [DIAMBASE],\
    \ section 3.\n   For stored requests, the implementation may choose to limit the\n\
    \   number of re-transmission attempts and to define a re-transmission\n   interval.\n\
    \   Note that only one place in the credit-control system SHOULD be\n   responsible\
    \ for duplicate detection.  If there is only one credit-\n   control server within\
    \ the given realm, the credit-control server may\n   perform duplicate detection.\
    \  If there is more than one credit-\n   control server in a given realm, only\
    \ one entity in the credit-\n   control system should be responsible, to ensure\
    \ that the end user's\n   account is not debited or credited multiple times for\
    \ the same\n   service event.\n"
- title: 7.  Credit-Control Application State Machine
  contents:
  - "7.  Credit-Control Application State Machine\n   This section defines the credit-control\
    \ application state machine.\n   The first four state machines are to be observed\
    \ by credit-control\n   clients.  The first one describes the session-based credit-control\n\
    \   when the first interrogation is executed as part of the\n   authorization/authentication\
    \ process.  The second describes the\n   session-based credit-control when the\
    \ first interrogation is executed\n   after the authorization/authentication process.\
    \  The requirements as\n   to what state machines have to be supported are discussed\
    \ in section\n   5.2.\n   The third state machine describes the session-based\
    \ credit-control\n   for the intermediate and final interrogations.  The fourth\
    \ one\n   describes the event-based credit-control.  These latter state\n   machines\
    \ are to be observed by all implementations that conform to\n   this specification.\n\
    \   The fifth state machine describes the credit-control session from a\n   credit-control\
    \ server perspective.\n   Any event not listed in the state machines MUST be considered\
    \ an\n   error condition, and a corresponding answer, if applicable, MUST be\n\
    \   returned to the originator of the message.\n   In the state table, the event\
    \ 'Failure to send' means that the\n   Diameter credit-control client is unable\
    \ to communicate with the\n   desired destination or, if failover procedure is\
    \ supported, with a\n   possibly defined alternative destination (e.g., the request\
    \ times out\n   and the answer message is not received).  This could be due to\
    \ the\n   peer being down, or due to a physical link failure in the path to or\n\
    \   from the credit-control server.\n   The event 'Temporary error' means that\
    \ the Diameter credit-control\n   client received a protocol error notification\
    \ (DIAMETER_TOO_BUSY,\n   DIAMETER_UNABLE_TO_DELIVER, or DIAMETER_LOOP_DETECTED)\
    \ in the\n   Result-Code AVP of the Credit-Control-Answer command.  The above\n\
    \   protocol error notification may ultimately be received in answer to\n   the\
    \ re-transmitted request to a defined alternative destination, if\n   failover\
    \ is supported.\n   The event 'Failed answer' means that the Diameter credit-control\n\
    \   client received non-transient failure (permanent failure)\n   notification\
    \ in the Credit-Control-Answer command.  The above\n   permanent failure notification\
    \ may ultimately be received in answer\n   to the re-transmitted request to a\
    \ defined alternative destination,\n   if failover is supported.\n   The action\
    \ 'store request' means that a request is stored in the\n   credit-control application\
    \ level non-volatile storage.\n   The event 'Not successfully processed' means\
    \ that the credit-control\n   server could not process the message; e.g., due\
    \ to an unknown end\n   user, account being empty, or errors defined in [DIAMBASE].\n\
    \   The event 'User service terminated' can be triggered by various\n   reasons,\
    \ e.g., normal user termination, network failure, and ASR\n   (Abort-Session-Request).\
    \  The Termination-Cause AVP contains\n   information about the termination reason,\
    \ as specified in [DIAMBASE].\n   The Tx timer, which is used to control the waiting\
    \ time in the\n   credit-control client in the Pending state, is stopped upon\
    \ exit of\n   the Pending state.  The stopping of the Tx timer is omitted in the\n\
    \   state machine when the new state is Idle, as moving to Idle state\n   implies\
    \ the clearing of the session and all the variables associated\n   to it.\n  \
    \ The states PendingI, PendingU, PendingT, PendingE, and PendingB stand\n   for\
    \ pending states to wait for an answer to a credit-control request\n   related\
    \ to Initial, Update, Termination, Event, or Buffered request,\n   respectively.\n\
    \   The acronyms CCFH and DDFH stand for Credit-Control-Failure-Handling\n   and\
    \ Direct-Debiting-Failure-Handling, respectively.\n   In the following state machine\
    \ table, the failover to a secondary\n   server upon 'Temporary error' or 'Failure\
    \ to send' is not explicitly\n   described.  Moving an ongoing credit-control\
    \ message stream to an\n   alternative server is, however, possible if the CC-Session-Failover\n\
    \   AVP is set to FAILOVER_SUPPORTED, as described in section 5.7.\n   Re-sending\
    \ a credit-control event to an alternative server is\n   supported as described\
    \ in section 6.5.\n   CLIENT, SESSION BASED for the first interrogation with AA\
    \ request\n    State      Event                         Action       New State\n\
    \    ---------------------------------------------------------------\n    Idle\
    \       Client or device requests     Send          PendingI\n               access/service\
    \                AA request\n                                             with\
    \ added\n                                             CC AVPs,\n             \
    \                                start Tx\n    PendingI  Successful AA req.  \
    \           Grant         Open\n              answer received                service\
    \ to\n                                             end user,\n               \
    \                              stop Tx\n    PendingI  Tx expired             \
    \        Disconnect    Idle\n                                             user/dev\n\
    \    PendingI  Failed AA answer received      Disconnect    Idle\n           \
    \                                  user/dev\n    PendingI  AA answer         \
    \             Grant         Idle\n              received with result code    \
    \  service\n              equal to CREDIT_CONTROL_       to end user\n       \
    \       NOT_APPLICABLE\n    PendingI  User service terminated        Queue   \
    \      PendingI\n                                             termination\n  \
    \                                           event\n    PendingI  Change in rating\
    \ condition     Queue         PendingI\n                                     \
    \        changed\n                                             rating\n      \
    \                                       condition\n                          \
    \                   event\n      CLIENT, SESSION BASED for the first interrogation\
    \ with CCR\n    State      Event                          Action       New State\n\
    \    ----------------------------------------------------------------\n    Idle\
    \      Client or device requests      Send         PendingI\n              access/service\
    \                 CC initial\n                                             req.,\n\
    \                                             start Tx\n    PendingI  Successful\
    \ CC initial          Stop Tx      Open\n              answer received\n    PendingI\
    \  Failure to send, or            Grant        Idle\n              temporary error\
    \ and            service to\n              CCFH equal to CONTINUE         end\
    \ user\n    PendingI  Failure to send, or            Terminate    Idle\n     \
    \         temporary error and            end user's\n              CCFH equal\
    \ to TERMINATE        service\n              or to RETRY_AND_TERMINATE\n    PendingI\
    \  Tx expired and CCFH            Terminate    Idle\n              equal to TERMINATE\
    \             end user's\n                                             service\n\
    \    PendingI  Tx expired and CCFH equal      Grant        PendingI\n        \
    \      to CONTINUE or to              service to\n              RETRY_AND_TERMINATE\
    \            end user\n    PendingI  CC initial answer              Terminate\
    \    Idle\n              received with result code      end user's\n         \
    \     END_USER_SERVICE_DENIED or     service\n              USER_UNKNOWN\n   \
    \ PendingI  CC initial answer              Grant        Idle\n              received\
    \ with result code      service\n              equal to CREDIT_CONTROL_      \
    \ to end user\n              NOT_APPLICABLE\n    PendingI  Failed CC initial answer\
    \       Grant        Idle\n              received and CCFH equal to     service\
    \ to\n              CONTINUE                       end user\n    PendingI  Failed\
    \ CC initial answer       Terminate    Idle\n              received and CCFH equal\
    \        end user's\n              to TERMINATE or to             service\n  \
    \            RETRY_AND_TERMINATE\n    PendingI  User service terminated      \
    \  Queue        PendingI\n                                             termination\n\
    \                                             event\n    PendingI  Change in rating\
    \ condition     Queue        PendingI\n                                      \
    \       changed\n                                             rating\n       \
    \                                      condition\n                           \
    \                  event\n     CLIENT, SESSION BASED for intermediate and final\
    \ interrogations\n    State     Event                          Action       New\
    \ State\n    ----------------------------------------------------------------\n\
    \    Open      Granted unit elapses           Send         PendingU\n        \
    \      and no final unit              CC update\n              indication received\
    \            req.,\n                                             start Tx\n  \
    \  Open      Granted unit elapses           Terminate    PendingT\n          \
    \    and final unit action          end user's\n              equal to TERMINATE\
    \             service, send\n              received                       CC termination\n\
    \                                             req.\n    Open      Change in rating\
    \ condition     Send         PendingU\n              in queue                \
    \       CC update\n                                             req.,\n      \
    \                                       Start Tx\n    Open      Service terminated\
    \ in queue    Send         PendingT\n                                        \
    \     CC termination\n                                             req.\n    Open\
    \      Change in rating condition     Send         PendingU\n              or\
    \ Validity-Time elapses       CC update\n                                    \
    \         req.,\n                                             Start Tx\n    Open\
    \      User service terminated        Send         PendingT\n                \
    \                             CC termination\n                               \
    \              req.\n    Open      RAR received                   Send RAA   \
    \  PendingU\n                                             followed by\n      \
    \                                       CC update req.,\n                    \
    \                         start Tx\n    PendingU  Successful CC update       \
    \    Stop Tx      Open\n              answer received\n    PendingU  Failure to\
    \ send, or            Grant        Idle\n              temporary error and   \
    \         service to\n              CCFH equal to CONTINUE         end user\n\
    \    PendingU  Failure to send, or            Terminate    Idle\n            \
    \  temporary error and            end user's\n              CCFH equal to TERMINATE\
    \        service\n              or to RETRY_AND_TERMINATE\n    PendingU  Tx expired\
    \ and CCFH            Terminate    Idle\n              equal to TERMINATE    \
    \         end user's\n                                             service\n \
    \   PendingU  Tx expired and CCFH equal      Grant        PendingU\n         \
    \     to CONTINUE or to              service to\n              RETRY_AND_TERMINATE\
    \            end user\n    PendingU  CC update answer               Terminate\
    \    Idle\n              received with result code      end user's\n         \
    \     END_USER_SERVICE_DENIED        service\n    PendingU  CC update answer \
    \              Grant        Idle\n              received with result code    \
    \  service\n              equal to CREDIT_CONTROL_       to end user\n       \
    \       NOT_APPLICABLE\n    PendingU  Failed CC update               Grant   \
    \     Idle\n              answer received and            service to\n        \
    \      CCFH equal to CONTINUE         end user\n    PendingU  Failed CC update\
    \               Terminate    Idle\n              answer received and CCFH    \
    \   end user's\n              equal to TERMINATE or          service\n       \
    \       to RETRY_AND_TERMINATE\n    PendingU  User service terminated        Queue\
    \        PendingU\n                                             termination\n\
    \                                             event\n    PendingU  Change in rating\
    \               Queue        PendingU\n              condition               \
    \       changed\n                                             rating\n       \
    \                                      condition\n                           \
    \                  event\n    PendingU  RAR received                   Send RAA\
    \     PendingU\n    PendingT  Successful CC                               Idle\n\
    \              termination answer received\n    PendingT  Failure to send, temporary\
    \                  Idle\n              error, or failed answer\n    PendingT \
    \ Change in rating condition                  PendingT\n                     \
    \  CLIENT, EVENT BASED\n    State     Event                          Action  \
    \      New State\n    ----------------------------------------------------------------\n\
    \    Idle      Client or device requests      Send          PendingE\n       \
    \       a one-time service             CC event\n                            \
    \                 req.,\n                                             Start Tx\n\
    \    Idle      Request in storage             Send          PendingB\n       \
    \                                      stored\n                              \
    \               request\n    PendingE  Successful CC event            Grant  \
    \       Idle\n              answer received                service to\n      \
    \                                       end user\n    PendingE  Failure to send,\
    \ temporary     Indicate      Idle\n              error, failed CC event     \
    \    service\n              answer received, or            error\n           \
    \   Tx expired; requested\n              action CHECK_BALANCE or\n           \
    \   PRICE_ENQUIRY\n    PendingE  CC event answer                Terminate    \
    \ Idle\n              received with result code      end user's\n            \
    \  END_USER_SERVICE_DENIED or     service\n              USER_UNKNOWN and Tx running\n\
    \    PendingE  CC event answer                Grant         Idle\n           \
    \   received with result code      service\n              CREDIT_CONTROL_NOT_APPLICABLE;\
    \ to end\n              requested action               user\n              DIRECT_DEBITING\n\
    \    PendingE  Failure to send, temporary     Grant         Idle\n           \
    \   error, or failed CC event      service\n              answer received; requested\
    \     to end\n              action DIRECT_DEBITING;        user\n            \
    \  DDFH equal to CONTINUE\n    PendingE  Failed CC event                Terminate\
    \     Idle\n              answer received or temporary   end user's\n        \
    \      error; requested action        service\n              DIRECT_DEBITING;\n\
    \              DDFH equal to\n              TERMINATE_OR_BUFFER and\n        \
    \      Tx running\n    PendingE  Tx expired; requested          Grant        \
    \ PendingE\n              action DIRECT_DEBITING         service\n           \
    \                                  to end\n                                  \
    \           user\n    PendingE  Failure to send; requested     Store         Idle\n\
    \              action DIRECT_DEBITING;        request with\n              DDFH\
    \ equal to                  T-flag\n              TERMINATE_OR_BUFFER\n    PendingE\
    \  Temporary error; requested     Store         Idle\n              action DIRECT_DEBITING;\
    \        request\n              DDFH equal to\n              TERMINATE_OR_BUFFER;\n\
    \              Tx expired\n    PendingE  Failed answer or answer             \
    \         Idle\n              received with result code\n              END_USER_SERVICE\
    \ DENIED or\n              USER_UNKNOWN; requested action\n              DIRECT_DEBITING;\
    \ Tx expired\n    PendingE  Failed CC event answer         Indicate      Idle\n\
    \              received; requested            service\n              action REFUND_ACCOUNT\
    \          error and\n                                             delete request\n\
    \    PendingE  Failure to send or             Store         Idle\n           \
    \   Tx expired; requested          request\n              action REFUND_ACCOUNT\
    \          with T-flag\n    PendingE  Temporary error,               Store   \
    \      Idle\n              and requested action           request\n          \
    \    REFUND_ACCOUNT\n    PendingB  Successful CC answer           Delete     \
    \   Idle\n              received                       request\n    PendingB \
    \ Failed CC answer               Delete        Idle\n              received  \
    \                     request\n    PendingB  Failure to send or              \
    \             Idle\n              temporary error\n                   SERVER,\
    \ SESSION AND EVENT BASED\n    State     Event                          Action\
    \        New State\n    ----------------------------------------------------------------\n\
    \    Idle      CC initial request             Send          Open\n           \
    \   received and successfully      CC initial\n              processed       \
    \               answer,\n                                             reserve\
    \ units,\n                                             start Tcc\n    Idle   \
    \   CC initial request             Send          Idle\n              received\
    \ but not               CC initial\n              successfully processed     \
    \    answer with\n                                             Result-Code\n \
    \                                            != SUCCESS\n    Idle      CC event\
    \ request               Send          Idle\n              received and successfully\
    \      CC event\n              processed                      answer\n    Idle\
    \      CC event request               Send          Idle\n              received\
    \ but not               CC event\n              successfully processed       \
    \  answer with\n                                             Result-Code\n   \
    \                                          != SUCCESS\n    Open      CC update\
    \ request              Send CC       Open\n              received and successfully\
    \      update answer,\n              processed                      debit used\n\
    \                                             units,\n                       \
    \                      reserve\n                                             new\
    \ units,\n                                             restart Tcc\n    Open \
    \     CC update request              Send          Idle\n              received\
    \ but not               CC update\n              successfully processed      \
    \   answer with\n                                             Result-Code\n  \
    \                                           != SUCCESS,\n                    \
    \                         debit used\n                                       \
    \      units\n    Open      CC termination request         Send          Idle\n\
    \              received and successfully      CC termin.\n              processed\
    \                      answer,\n                                             Stop\
    \ Tcc,\n                                             debit used\n            \
    \                                 units\n    Open      CC termination request\
    \         Send          Idle\n              received but not               CC\
    \ termin.\n              successfully processed         answer with\n        \
    \                                     Result-Code\n                          \
    \                   != SUCCESS,\n                                            \
    \ debit used\n                                             units\n    Open   \
    \   Session supervision timer Tcc  Release       Idle\n              expired \
    \                       reserved\n                                           \
    \  units\n"
- title: 8.  Credit-Control AVPs
  contents:
  - "8.  Credit-Control AVPs\n   This section defines the credit-control AVPs that\
    \ are specific to\n   Diameter credit-control application and that MAY be included\
    \ in the\n   Diameter credit-control messages.\n   The AVPs defined in this section\
    \ MAY also be included in\n   authorization commands defined in authorization-specific\n\
    \   applications, such as [NASREQ] and [DIAMMIP], if the first\n   interrogation\
    \ is performed as part of the\n   authorization/authentication process, as described\
    \ in section 5.2.\n   The Diameter AVP rules are defined in the Diameter Base\
    \ [DIAMBASE],\n   section 4.  These AVP rules are observed in AVPs defined in\
    \ this\n   section.\n   The following table describes the Diameter AVPs defined\
    \ in the\n   credit-control application, their AVP Code values, types, possible\n\
    \   flag values, and whether the AVP MAY be encrypted.  The Diameter base\n  \
    \ [DIAMBASE] specifies the AVP Flag rules for AVPs in section 4.5.\n         \
    \                                   +--------------------+\n                 \
    \                           |    AVP Flag rules  |\n                         \
    \                   |----+-----+----+----|----+\n                     AVP  Section\
    \           |    |     |SHLD|MUST|    |\n   Attribute Name    Code Defined Data\
    \ Type |MUST| MAY | NOT|NOT |Encr|\n   -----------------------------------------|----+-----+----+----|----|\n\
    \   CC-Correlation-Id 411  8.1    OctetString|    | P,M |    |  V | Y  |\n   CC-Input-Octets\
    \   412  8.24   Unsigned64 | M  |  P  |    |  V | Y  |\n   CC-Money          413\
    \  8.22   Grouped    | M  |  P  |    |  V | Y  |\n   CC-Output-Octets  414  8.25\
    \   Unsigned64 | M  |  P  |    |  V | Y  |\n   CC-Request-Number 415  8.2    Unsigned32\
    \ | M  |  P  |    |  V | Y  |\n   CC-Request-Type   416  8.3    Enumerated | M\
    \  |  P  |    |  V | Y  |\n   CC-Service-       417  8.26   Unsigned64 | M  |\
    \  P  |    |  V | Y  |\n     Specific-Units                         |    |   \
    \  |    |    |    |\n   CC-Session-       418  8.4    Enumerated | M  |  P  |\
    \    |  V | Y  |\n     Failover                               |    |     |   \
    \ |    |    |\n   CC-Sub-Session-Id 419  8.5    Unsigned64 | M  |  P  |    | \
    \ V | Y  |\n   CC-Time           420  8.21   Unsigned32 | M  |  P  |    |  V |\
    \ Y  |\n   CC-Total-Octets   421  8.23   Unsigned64 | M  |  P  |    |  V | Y \
    \ |\n   CC-Unit-Type      454  8.32   Enumerated | M  |  P  |    |  V | Y  |\n\
    \   Check-Balance-    422  8.6    Enumerated | M  |  P  |    |  V | Y  |\n   \
    \  Result                                 |    |     |    |    |    |\n   Cost-Information\
    \  423  8.7    Grouped    | M  |  P  |    |  V | Y  |\n   Cost-Unit         424\
    \  8.12   UTF8String | M  |  P  |    |  V | Y  |\n   Credit-Control    426  8.13\
    \   Enumerated | M  |  P  |    |  V | Y  |\n   Credit-Control-   427  8.14   Enumerated\
    \ | M  |  P  |    |  V | Y  |\n     Failure-Handling                       | \
    \   |     |    |    |    |\n   Currency-Code     425  8.11   Unsigned32 | M  |\
    \  P  |    |  V | Y  |\n   Direct-Debiting-  428  8.15   Enumerated | M  |  P\
    \  |    |  V | Y  |\n     Failure-Handling                       |    |     |\
    \    |    |    |\n   Exponent          429  8.9    Integer32  | M  |  P  |   \
    \ |  V | Y  |\n   Final-Unit-Action 449  8.35   Enumerated | M  |  P  |    | \
    \ V | Y  |\n   Final-Unit-       430  8.34   Grouped    | M  |  P  |    |  V |\
    \ Y  |\n     Indication                             |    |     |    |    |   \
    \ |\n   Granted-Service-  431  8.17   Grouped    | M  |  P  |    |  V | Y  |\n\
    \     Unit                                   |    |     |    |    |    |\n   G-S-U-Pool-\
    \       453  8.31   Unsigned32 | M  |  P  |    |  V | Y  |\n     Identifier  \
    \                           |    |     |    |    |    |\n   G-S-U-Pool-      \
    \ 457  8.30   Grouped    | M  |  P  |    |  V | Y  |\n     Reference         \
    \                     |    |     |    |    |    |\n   Multiple-Services 456  8.16\
    \   Grouped    | M  |  P  |    |  V | Y  |\n    -Credit-Control              \
    \           |    |     |    |    |    |\n   Multiple-Services 455  8.40   Enumerated\
    \ | M  |  P  |    |  V | Y  |\n    -Indicator                              | \
    \   |     |    |    |    |\n   Rating-Group      432  8.29   Unsigned32 | M  |\
    \  P  |    |  V | Y  |\n   Redirect-Address  433  8.38   Enumerated | M  |  P\
    \  |    |  V | Y  |\n     -Type                                  |    |     |\
    \    |    |    |\n   Redirect-Server   434  8.37   Grouped    | M  |  P  |   \
    \ |  V | Y  |\n   Redirect-Server   435  8.39   UTF8String | M  |  P  |    | \
    \ V | Y  |\n     -Address                               |    |     |    |    |\
    \    |\n   Requested-Action  436  8.41   Enumerated | M  |  P  |    |  V | Y \
    \ |\n   Requested-Service 437  8.18   Grouped    | M  |  P  |    |  V | Y  |\n\
    \     -Unit                                  |    |     |    |    |    |\n   Restriction\
    \       438  8.36   IPFiltrRule| M  |  P  |    |  V | Y  |\n     -Filter-Rule\
    \                           |    |     |    |    |    |\n   Service-Context  \
    \ 461  8.42   UTF8String | M  |  P  |    |  V | Y  |\n     -Id               \
    \                     |    |     |    |    |    |\n   Service-          439  8.28\
    \   Unsigned32 | M  |  P  |    |  V | Y  |\n     Identifier                  \
    \           |    |     |    |    |    |\n   Service-Parameter 440  8.43   Grouped\
    \    |    | P,M |    |  V | Y  |\n     -Info                                 \
    \ |    |     |    |    |    |\n   Service-          441  8.44   Unsigned32 | \
    \   | P,M |    |  V | Y  |\n     Parameter-Type                         |    |\
    \     |    |    |    |\n   Service-          442  8.45   OctetString|    | P,M\
    \ |    |  V | Y  |\n     Parameter-Value                        |    |     | \
    \   |    |    |\n   Subscription-Id   443  8.46   Grouped    | M  |  P  |    |\
    \  V | Y  |\n   Subscription-Id   444  8.48   UTF8String | M  |  P  |    |  V\
    \ | Y  |\n     -Data                                  |    |     |    |    | \
    \   |\n   Subscription-Id   450  8.47   Enumerated | M  |  P  |    |  V | Y  |\n\
    \     -Type                                  |    |     |    |    |    |\n   Tariff-Change\
    \     452  8.27   Enumerated | M  |  P  |    |  V | Y  |\n     -Usage        \
    \                         |    |     |    |    |    |\n   Tariff-Time       451\
    \  8.20   Time       | M  |  P  |    |  V | Y  |\n     -Change               \
    \                 |    |     |    |    |    |\n   Unit-Value        445  8.8 \
    \   Grouped    | M  |  P  |    |  V | Y  |\n   Used-Service-Unit 446  8.19   Grouped\
    \    | M  |  P  |    |  V | Y  |\n   User-Equipment    458  8.49   Grouped   \
    \ |    | P,M |    |  V | Y  |\n     -Info                                  | \
    \   |     |    |    |    |\n   User-Equipment    459  8.50   Enumerated |    |\
    \ P,M |    |  V | Y  |\n     -Info-Type                             |    |   \
    \  |    |    |    |\n   User-Equipment    460  8.51   OctetString|    | P,M |\
    \    |  V | Y  |\n     -Info-Value                            |    |     |   \
    \ |    |    |\n   Value-Digits      447  8.10   Integer64  | M  |  P  |    | \
    \ V | Y  |\n   Validity-Time     448  8.33   Unsigned32 | M  |  P  |    |  V |\
    \ Y  |\n"
- title: 8.1.  CC-Correlation-Id AVP
  contents:
  - "8.1.  CC-Correlation-Id AVP\n   The CC-Correlation-Id AVP (AVP Code 411) is of\
    \ type OctetString and\n   contains information to correlate credit-control requests\
    \ generated\n   for different components of the service; e.g., transport and service\n\
    \   level.  The one who allocates the Service-Context-Id (i.e., unique\n   identifier\
    \ of a service specific document) is also responsible for\n   defining the content\
    \ and encoding of the CC-Correlation-Id AVP.\n"
- title: 8.2.  CC-Request-Number AVP
  contents:
  - "8.2.  CC-Request-Number AVP\n   The CC-Request-Number AVP (AVP Code 415) is of\
    \ type Unsigned32 and\n   identifies this request within one session.  As Session-Id\
    \ AVPs are\n   globally unique, the combination of Session-Id and CC-Request-Number\n\
    \   AVPs is also globally unique and can be used in matching credit-\n   control\
    \ messages with confirmations.  An easy way to produce unique\n   numbers is to\
    \ set the value to 0 for a credit-control request of type\n   INITIAL_REQUEST\
    \ and EVENT_REQUEST and to set the value to 1 for the\n   first UPDATE_REQUEST,\
    \ to 2 for the second, and so on until the value\n   for TERMINATION_REQUEST is\
    \ one more than for the last UPDATE_REQUEST.\n"
- title: 8.3.  CC-Request-Type AVP
  contents:
  - "8.3.  CC-Request-Type AVP\n   The CC-Request-Type AVP (AVP Code 416) is of type\
    \ Enumerated and\n   contains the reason for sending the credit-control request\
    \ message.\n   It MUST be present in all Credit-Control-Request messages.  The\n\
    \   following values are defined for the CC-Request-Type AVP:\n   INITIAL_REQUEST\
    \                 1\n      An Initial request is used to initiate a credit-control\
    \ session,\n      and contains credit control information that is relevant to\
    \ the\n      initiation.\n   UPDATE_REQUEST                  2\n      An Update\
    \ request contains credit-control information for an\n      existing credit-control\
    \ session.  Update credit-control requests\n      SHOULD be sent every time a\
    \ credit-control re-authorization is\n      needed at the expiry of the allocated\
    \ quota or validity time.\n      Further, additional service-specific events MAY\
    \ trigger a\n      spontaneous Update request.\n   TERMINATION_REQUEST       \
    \      3\n      A Termination request is sent to terminate a credit-control\n\
    \      session and contains credit-control information relevant to the\n     \
    \ existing session.\n   EVENT_REQUEST                   4\n      An Event request\
    \ is used when there is no need to maintain any\n      credit-control session\
    \ state in the credit-control server.  This\n      request contains all information\
    \ relevant to the service, and is\n      the only request of the service.  The\
    \ reason for the Event request\n      is further detailed in the Requested-Action\
    \ AVP.  The Requested-\n      Action AVP MUST be included in the Credit-Control-Request\
    \ message\n      when CC-Request-Type is set to EVENT_REQUEST.\n"
- title: 8.4.  CC-Session-Failover AVP
  contents:
  - "8.4.  CC-Session-Failover AVP\n   The CC-Session-Failover AVP (AVP Code 418)\
    \ is type of Enumerated and\n   contains information as to whether moving the\
    \ credit-control message\n   stream to a backup server during an ongoing credit-control\
    \ session is\n   supported.  In communication failures, the credit-control message\n\
    \   streams can be moved to an alternative destination if the credit-\n   control\
    \ server supports failover to an alternative server.  The\n   secondary credit-control\
    \ server name, if received from the home\n   Diameter AAA server, can be used\
    \ as an address of the backup server.\n   An implementation is not required to\
    \ support moving a credit-control\n   message stream to an alternative server,\
    \ as this also requires moving\n   information related to the credit-control session\
    \ to backup server.\n   The following values are defined for the CC-Session-Failover\
    \ AVP:\n   FAILOVER_NOT_SUPPORTED          0\n      When the CC-Session-Failover\
    \ AVP is set to FAILOVER_NOT_SUPPORTED,\n      the credit-control message stream\
    \ MUST NOT to be moved to an\n      alternative destination in the case of communication\
    \ failure.\n      This is the default behavior if the AVP isn't included in the\n\
    \      reply from the authorization or credit-control server.\n   FAILOVER_SUPPORTED\
    \              1\n      When the CC-Session-Failover AVP is set to FAILOVER_SUPPORTED,\
    \ the\n      credit-control message stream SHOULD be moved to an alternative\n\
    \      destination in the case of communication failure.  Moving the\n      credit-control\
    \ message stream to a backup server MAY require that\n      information related\
    \ to the credit-control session should also be\n      forwarded to alternative\
    \ server.\n"
- title: 8.5.  CC-Sub-Session-Id AVP
  contents:
  - "8.5.  CC-Sub-Session-Id AVP\n   The CC-Sub-Session-Id AVP (AVP Code 419) is of\
    \ type Unsigned64 and\n   contains the credit-control sub-session identifier.\
    \  The combination\n   of the Session-Id and this AVP MUST be unique per sub-session,\
    \ and\n   the value of this AVP MUST be monotonically increased by one for all\n\
    \   new sub-sessions.  The absence of this AVP implies that no sub-\n   sessions\
    \ are in use.\n"
- title: 8.6.  Check-Balance-Result AVP
  contents:
  - "8.6.  Check-Balance-Result AVP\n   The Check Balance Result AVP (AVP Code 422)\
    \ is of type Enumerated and\n   contains the result of the balance check.  This\
    \ AVP is applicable\n   only when the Requested-Action AVP indicates CHECK_BALANCE\
    \ in the\n   Credit-Control-Request command.\n   The following values are defined\
    \ for the Check-Balance-Result AVP.\n   ENOUGH_CREDIT                   0\n  \
    \    There is enough credit in the account to cover the requested\n      service.\n\
    \   NO_CREDIT                       1\n      There isn't enough credit in the\
    \ account to cover the requested\n      service.\n"
- title: 8.7.  Cost-Information AVP
  contents:
  - "8.7.  Cost-Information AVP\n   The Cost-Information AVP (AVP Code 423) is of\
    \ type Grouped, and it is\n   used to return the cost information of a service,\
    \ which the credit-\n   control client can transfer transparently to the end user.\
    \  The\n   included Unit-Value AVP contains the cost estimate (always type of\n\
    \   money) of the service, in the case of price enquiry, or the\n   accumulated\
    \ cost estimation, in the case of credit-control session.\n   The Currency-Code\
    \ specifies in which currency the cost was given.\n   The Cost-Unit specifies\
    \ the unit when the service cost is a cost per\n   unit (e.g., cost for the service\
    \ is $1 per minute).\n   When the Requested-Action AVP with value PRICE_ENQUIRY\
    \ is included in\n   the Credit-Control-Request command, the Cost-Information\
    \ AVP sent in\n   the succeeding Credit-Control-Answer command contains the cost\n\
    \   estimation of the requested service, without any reservation being\n   made.\n\
    \   The Cost-Information AVP included in the Credit-Control-Answer\n   command\
    \ with the CC-Request-Type set to UPDATE_REQUEST contains the\n   accumulated\
    \ cost estimation for the session, without taking any\n   credit reservation into\
    \ account.\n   The Cost-Information AVP included in the Credit-Control-Answer\n\
    \   command with the CC-Request-Type set to EVENT_REQUEST or\n   TERMINATION_REQUEST\
    \ contains the estimated total cost for the\n   requested service.\n   It is defined\
    \ as follows (per the grouped-avp-def of\n   RFC 3588 [DIAMBASE]):\n         \
    \       Cost-Information ::= < AVP Header: 423 >\n                           \
    \          { Unit-Value }\n                                     { Currency-Code\
    \ }\n                                     [ Cost-Unit ]\n"
- title: 8.8.  Unit-Value AVP
  contents:
  - "8.8.  Unit-Value AVP\n   Unit-Value AVP is of type Grouped (AVP Code 445) and\
    \ specifies the\n   units as decimal value.  The Unit-Value is a value with an\
    \ exponent;\n   i.e., Unit-Value = Value-Digits AVP * 10^Exponent.  This\n   representation\
    \ avoids unwanted rounding off.  For example, the value\n   of 2,3 is represented\
    \ as Value-Digits = 23 and Exponent = -1.  The\n   absence of the exponent part\
    \ MUST be interpreted as an exponent equal\n   to zero.\n   It is defined as follows\
    \ (per the grouped-avp-def of\n   RFC 3588 [DIAMBASE]):\n                    Unit-Value\
    \ ::= < AVP Header: 445 >\n                                   { Value-Digits }\n\
    \                                   [ Exponent ]\n"
- title: 8.9.  Exponent AVP
  contents:
  - "8.9.  Exponent AVP\n   Exponent AVP is of type Integer32 (AVP Code 429) and contains\
    \ the\n   exponent value to be applied for the Value-Digit AVP within the\n  \
    \ Unit-Value AVP.\n"
- title: 8.10.  Value-Digits AVP
  contents:
  - "8.10.  Value-Digits AVP\n   The Value-Digits AVP is of type Integer64 (AVP Code\
    \ 447) and contains\n   the significant digits of the number.  If decimal values\
    \ are needed\n   to present the units, the scaling MUST be indicated with the\
    \ related\n   Exponent AVP.  For example, for the monetary amount $ 0.05 the value\n\
    \   of Value-Digits AVP MUST be set to 5, and the scaling MUST be\n   indicated\
    \ with the Exponent AVP set to -2.\n"
- title: 8.11.  Currency-Code AVP
  contents:
  - "8.11.  Currency-Code AVP\n   The Currency-Code AVP (AVP Code 425) is of type\
    \ Unsigned32 and\n   contains a currency code that specifies in which currency\
    \ the values\n   of AVPs containing monetary units were given.  It is specified\
    \ by\n   using the numeric values defined in the ISO 4217 standard [ISO4217].\n"
- title: 8.12.  Cost-Unit AVP
  contents:
  - "8.12.  Cost-Unit AVP\n   The Cost-Unit AVP (AVP Code 424) is of type UTF8String,\
    \ and it is\n   used to display a human readable string to the end user.  It\n\
    \   specifies the applicable unit to the Cost-Information when the\n   service\
    \ cost is a cost per unit (e.g., cost of the service is $1 per\n   minute).  The\
    \ Cost-Unit can be minutes, hours, days, kilobytes,\n   megabytes, etc.\n"
- title: 8.13.  Credit-Control AVP
  contents:
  - "8.13.  Credit-Control AVP\n   The Credit-Control AVP (AVP Code 426) is of type\
    \ Enumerated and MUST\n   be included in AA requests when the service element\
    \ has credit-\n   control capabilities.\n   CREDIT_AUTHORIZATION            0\n\
    \      If the home Diameter AAA server determines that the user has\n      prepaid\
    \ subscription, this value indicates that the credit-control\n      server MUST\
    \ be contacted to perform the first interrogation.  The\n      value of the Credit-Control\
    \ AVP MUST always be set to 0 in an AA\n      request sent to perform the first\
    \ interrogation and to initiate a\n      new credit-control session.\n   RE_AUTHORIZATION\
    \                1\n      This value indicates to the Diameter AAA server that\
    \ a credit-\n      control session is ongoing for the subscriber and that the\n\
    \      credit-control server MUST not be contacted.  The Credit-Control\n    \
    \  AVP set to the value of 1 is to be used only when the first\n      interrogation\
    \ has been successfully performed and the credit-\n      control session is ongoing\
    \ (i.e., re-authorization triggered by\n      Authorization-Lifetime).  This value\
    \ MUST NOT be used in an AA\n      request sent to perform the first interrogation.\n"
- title: 8.14.  Credit-Control-Failure-Handling AVP
  contents:
  - "8.14.  Credit-Control-Failure-Handling AVP\n   The Credit-Control-Failure-Handling\
    \ AVP (AVP Code 427) is of type\n   Enumerated.  The credit-control client uses\
    \ information in this AVP\n   to decide what to do if sending credit-control messages\
    \ to the\n   credit-control server has been, for instance, temporarily prevented\n\
    \   due to a network problem.  Depending on the service logic, the\n   credit-control\
    \ server can order the client to terminate the service\n   immediately when there\
    \ is a reason to believe that the service cannot\n   be charged, or to try failover\
    \ to an alternative server, if possible.\n   Then the server could either terminate\
    \ or grant the service, should\n   the alternative connection also fail.\n   TERMINATE\
    \                       0\n      When the Credit-Control-Failure-Handling AVP\
    \ is set to TERMINATE,\n      the service MUST only be granted for as long as\
    \ there is a\n      connection to the credit-control server.  If the credit-control\n\
    \      client does not receive any Credit-Control-Answer message within\n    \
    \  the Tx timer (as defined in section 13), the credit-control\n      request\
    \ is regarded as failed, and the end user's service session\n      is terminated.\n\
    \      This is the default behavior if the AVP isn't included in the\n      reply\
    \ from the authorization or credit-control server.\n   CONTINUE              \
    \         1\n      When the Credit-Control-Failure-Handling AVP is set to CONTINUE,\n\
    \      the credit-control client SHOULD re-send the request to an\n      alternative\
    \ server in the case of transport or temporary failures,\n      provided that\
    \ a failover procedure is supported in the credit-\n      control server and the\
    \ credit-control client, and that an\n      alternative server is available. \
    \ Otherwise, the service SHOULD be\n      granted, even if credit-control messages\
    \ can't be delivered.\n   RETRY_AND_TERMINATE            2\n      When the Credit-Control-Failure-Handling\
    \ AVP is set to\n      RETRY_AND_TERMINATE, the credit-control client SHOULD re-send\
    \ the\n      request to an alternative server in the case of transport or\n  \
    \    temporary failures, provided that a failover procedure is\n      supported\
    \ in the credit-control server and the credit-control\n      client, and that\
    \ an alternative server is available.  Otherwise,\n      the service SHOULD not\
    \ be granted when the credit-control messages\n      can't be delivered.\n"
- title: 8.15.  Direct-Debiting-Failure-Handling AVP
  contents:
  - "8.15.  Direct-Debiting-Failure-Handling AVP\n   The Direct-Debiting-Failure-Handling\
    \ AVP (AVP Code 428) is of type\n   Enumerated.  The credit-control client uses\
    \ information in this AVP\n   to decide what to do if sending credit-control messages\
    \ (Requested-\n   Action AVP set to DIRECT_DEBITING) to the credit-control server\
    \ has\n   been, for instance, temporarily prevented due to a network problem.\n\
    \   TERMINATE_OR_BUFFER             0\n      When the Direct-Debiting-Failure-Handling\
    \ AVP is set to\n      TERMINATE_OR_BUFFER, the service MUST be granted for as\
    \ long as\n      there is a connection to the credit-control server.  If the\n\
    \      credit-control client does not receive any Credit-Control-Answer\n    \
    \  message within the Tx timer (as defined in section 13) the\n      credit-control\
    \ request is regarded as failed.  The client SHOULD\n      terminate the service\
    \ if it can determine from the failed answer\n      that units have not been debited.\
    \  Otherwise the credit-control\n      client SHOULD grant the service, store\
    \ the request in application\n      level non-volatile storage, and try to re-send\
    \ the request.  These\n      requests MUST be marked as possible duplicates by\
    \ setting the T-\n      flag in the command header as described in [DIAMBASE]\
    \ section 3.\n      This is the default behavior if the AVP isn't included in\
    \ the\n      reply from the authorization server.\n   CONTINUE               \
    \                               1\n      When the Direct-Debiting-Failure-Handling\
    \ AVP is set to CONTINUE,\n      the service SHOULD be granted, even if credit-control\
    \ messages\n      can't be delivered, and the request should be deleted.\n"
- title: 8.16.  Multiple-Services-Credit-Control AVP
  contents:
  - "8.16.  Multiple-Services-Credit-Control AVP\n   Multiple-Services-Credit-Control\
    \ AVP (AVP Code 456) is of type\n   Grouped and contains the AVPs related to the\
    \ independent credit-\n   control of multiple services feature.  Note that each\
    \ instance of\n   this AVP carries units related to one or more services or related\
    \ to\n   a single rating group.\n   The Service-Identifier and the Rating-Group\
    \ AVPs are used to\n   associate the granted units to a given service or rating\
    \ group.  If\n   both the Service-Identifier and the Rating-Group AVPs are included,\n\
    \   the target of the service units is always the service(s) indicated by\n  \
    \ the value of the Service-Identifier AVP(s).  If only the Rating-\n   Group-Id\
    \ AVP is present, the Multiple-Services-Credit-Control AVP\n   relates to all\
    \ the services that belong to the specified rating\n   group.\n   The G-S-U-Pool-Reference\
    \ AVP allows the server to specify a G-S-U-\n   Pool-Identifier identifying a\
    \ credit pool within which the units of\n   the specified type are considered\
    \ pooled.  If a G-S-U-Pool-Reference\n   AVP is present, then actual service units\
    \ of the specified type MUST\n   also be present.  For example, if the G-S-U-Pool-Reference\
    \ AVP\n   specifies Unit-Type TIME, then the CC-Time AVP MUST be present.\n  \
    \ The Requested-Service-Unit AVP MAY contain the amount of requested\n   service\
    \ units or the requested monetary value.  It MUST be present in\n   the initial\
    \ interrogation and within the intermediate interrogations\n   in which new quota\
    \ is requested.  If the credit-control client does\n   not include the Requested-Service-Unit\
    \ AVP in a request command,\n   because for instance, it has determined that the\
    \ end-user terminated\n   the service, the server MUST debit the used amount from\
    \ the user's\n   account but MUST NOT return a new quota in the corresponding\
    \ answer.\n   The Validity-Time, Result-Code, and Final-Unit-Indication AVPs MAY\
    \ be\n   present in an answer command as defined in sections 5.1.2 and 5.6 for\n\
    \   the graceful service termination.\n   When both the Tariff-Time-Change and\
    \ Tariff-Change-Usage AVPs are\n   present, the server MUST include two separate\
    \ instances of the\n   Multiple-Services-Credit-Control AVP with the Granted-Service-Unit\n\
    \   AVP associated to the same service-identifier and/or rating-group.\n   Where\
    \ the two quotas are associated to the same pool or to different\n   pools, the\
    \ credit pooling mechanism defined in section 5.1.2 applies.\n   The Tariff-Change-Usage\
    \ AVP MUST NOT be included in request commands\n   to report used units before,\
    \ and after tariff time change the Used-\n   Service-Unit AVP MUST be used.\n\
    \   A server not implementing the independent credit-control of multiple\n   services\
    \ functionality MUST treat the Multiple-Services-Credit-\n   Control AVP as an\
    \ invalid AVP.\n   The Multiple-Services-Control AVP is defined as follows (per\
    \ the\n   grouped-avp-def of RFC 3588 [DIAMBASE]):\n      Multiple-Services-Credit-Control\
    \ ::= < AVP Header: 456 >\n                                           [ Granted-Service-Unit\
    \ ]\n                                           [ Requested-Service-Unit ]\n \
    \                                         *[ Used-Service-Unit ]\n           \
    \                                [ Tariff-Change-Usage ]\n                   \
    \                       *[ Service-Identifier ]\n                            \
    \               [ Rating-Group ]\n                                          *[\
    \ G-S-U-Pool-Reference ]\n                                           [ Validity-Time\
    \ ]\n                                           [ Result-Code ]\n            \
    \                               [ Final-Unit-Indication ]\n                  \
    \                        *[ AVP ]\n"
- title: 8.17.  Granted-Service-Unit AVP
  contents:
  - "8.17.  Granted-Service-Unit AVP\n   Granted-Service-Unit AVP (AVP Code 431) is\
    \ of type Grouped and\n   contains the amount of units that the Diameter credit-control\
    \ client\n   can provide to the end user until the service must be released or\
    \ the\n   new Credit-Control-Request must be sent.  A client is not required to\n\
    \   implement all the unit types, and it must treat unknown or\n   unsupported\
    \ unit types in the answer message as an incorrect CCA\n   answer.  In this case,\
    \ the client MUST terminate the credit-control\n   session and indicate in the\
    \ Termination-Cause AVP reason\n   DIAMETER_BAD_ANSWER.\n   The Granted-Service-Unit\
    \ AVP is defined as follows (per the grouped-\n   avp-def of RFC 3588 [DIAMBASE]):\n\
    \      Granted-Service-Unit ::= < AVP Header: 431 >\n                        \
    \         [ Tariff-Time-Change ]\n                                 [ CC-Time ]\n\
    \                                 [ CC-Money ]\n                             \
    \    [ CC-Total-Octets ]\n                                 [ CC-Input-Octets ]\n\
    \                                 [ CC-Output-Octets ]\n                     \
    \            [ CC-Service-Specific-Units ]\n                                *[\
    \ AVP ]\n"
- title: 8.18.  Requested-Service-Unit AVP
  contents:
  - "8.18.  Requested-Service-Unit AVP\n   The Requested-Service-Unit AVP (AVP Code\
    \ 437) is of type Grouped and\n   contains the amount of requested units specified\
    \ by the Diameter\n   credit-control client.  A server is not required to implement\
    \ all the\n   unit types, and it must treat unknown or unsupported unit types\
    \ as\n   invalid AVPs.\n   The Requested-Service-Unit AVP is defined as follows\
    \ (per the\n   grouped-avp-def of RFC 3588 [DIAMBASE]):\n      Requested-Service-Unit\
    \ ::= < AVP Header: 437 >\n                                 [ CC-Time ]\n    \
    \                             [ CC-Money ]\n                                 [\
    \ CC-Total-Octets ]\n                                 [ CC-Input-Octets ]\n  \
    \                               [ CC-Output-Octets ]\n                       \
    \          [ CC-Service-Specific-Units ]\n                                *[ AVP\
    \ ]\n"
- title: 8.19.  Used-Service-Unit AVP
  contents:
  - "8.19.  Used-Service-Unit AVP\n   The Used-Service-Unit AVP is of type Grouped\
    \ (AVP Code 446) and\n   contains the amount of used units measured from the point\
    \ when the\n   service became active or, if interim interrogations are used during\n\
    \   the session, from the point when the previous measurement ended.\n   The Used-Service-Unit\
    \ AVP is defined as follows (per the grouped-\n   avp-def of RFC 3588 [DIAMBASE]):\n\
    \      Used-Service-Unit ::= < AVP Header: 446 >\n                           \
    \ [ Tariff-Change-Usage ]\n                            [ CC-Time ]\n         \
    \                   [ CC-Money ]\n                            [ CC-Total-Octets\
    \ ]\n                            [ CC-Input-Octets ]\n                       \
    \     [ CC-Output-Octets ]\n                            [ CC-Service-Specific-Units\
    \ ]\n                           *[ AVP ]\n"
- title: 8.20.  Tariff-Time-Change AVP
  contents:
  - "8.20.  Tariff-Time-Change AVP\n   The Tariff-Time-Change AVP (AVP Code 451) is\
    \ of type Time.  It is\n   sent from the server to the client and includes the\
    \ time in seconds\n   since January 1, 1900, 00:00 UTC, when the tariff of the\
    \ service will\n   be changed.\n   The tariff change mechanism is optional for\
    \ the client and server,\n   and it is not used for time-based services defined\
    \ in section 5.  If\n   a client does not support the tariff time change mechanism,\
    \ it MUST\n   treat Tariff-Time-Change AVP in the answer message as an incorrect\n\
    \   CCA answer.  In this case, the client terminates the credit-control\n   session\
    \ and indicates in the Termination-Cause AVP reason\n   DIAMETER_BAD_ANSWER.\n\
    \   Omission of this AVP means that no tariff change is to be reported.\n"
- title: 8.21.  CC-Time AVP
  contents:
  - "8.21.  CC-Time AVP\n   The CC-Time AVP (AVP Code 420) is of type Unsigned32 and\
    \ indicates\n   the length of the requested, granted, or used time in seconds.\n"
- title: 8.22.  CC-Money AVP
  contents:
  - "8.22.  CC-Money AVP\n   The CC-Money AVP (AVP Code 413) is of type Grouped and\
    \ specifies the\n   monetary amount in the given currency.  The Currency-Code\
    \ AVP SHOULD\n   be included.  It is defined as follows (per the grouped-avp-def\
    \ of\n   RFC 3588 [DIAMBASE]):\n      CC-Money ::= < AVP Header: 413 >\n     \
    \              { Unit-Value }\n                   [ Currency-Code ]\n"
- title: 8.23.  CC-Total-Octets AVP
  contents:
  - "8.23.  CC-Total-Octets AVP\n   The CC-Total-Octets AVP (AVP Code 421) is of type\
    \ Unsigned64 and\n   contains the total number of requested, granted, or used\
    \ octets\n   regardless of the direction (sent or received).\n"
- title: 8.24.  CC-Input-Octets AVP
  contents:
  - "8.24.  CC-Input-Octets AVP\n   The CC-Input-Octets AVP (AVP Code 412) is of type\
    \ Unsigned64 and\n   contains the number of requested, granted, or used octets\
    \ that can\n   be/have been received from the end user.\n"
- title: 8.25.  CC-Output-Octets AVP
  contents:
  - "8.25.  CC-Output-Octets AVP\n   The CC-Output-Octets AVP (AVP Code 414) is of\
    \ type Unsigned64 and\n   contains the number of requested, granted, or used octets\
    \ that can\n   be/have been sent to the end user.\n"
- title: 8.26.  CC-Service-Specific-Units AVP
  contents:
  - "8.26.  CC-Service-Specific-Units AVP\n   The CC-Service-Specific-Units AVP (AVP\
    \ Code 417) is of type\n   Unsigned64 and specifies the number of service-specific\
    \ units (e.g.,\n   number of events, points) given in a selected service.  The\
    \ service-\n   specific units always refer to the service identified in the\n\
    \   Service-Identifier AVP (or Rating-Group AVP when the Multiple-\n   Services-Credit-Control\
    \ AVP is used).\n"
- title: 8.27.  Tariff-Change-Usage AVP
  contents:
  - "8.27.  Tariff-Change-Usage AVP\n   The Tariff-Change-Usage AVP (AVP Code 452)\
    \ is of type Enumerated and\n   defines whether units are used before or after\
    \ a tariff change, or\n   whether the units straddled a tariff change during the\
    \ reporting\n   period.  Omission of this AVP means that no tariff change has\n\
    \   occurred.\n   In addition, when present in answer messages as part of the\n\
    \   Multiple-Services-Credit-Control AVP, this AVP defines whether units\n   are\
    \ allocated to be used before or after a tariff change event.\n   When the Tariff-Time-Change\
    \ AVP is present, omission of this AVP in\n   answer messages means that the single\
    \ quota mechanism applies.\n   Tariff-Change-Usage can be one of the following:\n\
    \   UNIT_BEFORE_TARIFF_CHANGE       0\n      When present in the Multiple-Services-Credit-Control\
    \ AVP, this\n      value indicates the amount of the units allocated for use before\
    \ a\n      tariff change occurs.\n      When present in the Used-Service-Unit\
    \ AVP, this value indicates\n      the amount of resource units used before a\
    \ tariff change had\n      occurred.\n   UNIT_AFTER_TARIFF_CHANGE        1\n \
    \     When present in the Multiple-Services-Credit-Control AVP, this\n      value\
    \ indicates the amount of the units allocated for use after a\n      tariff change\
    \ occurs.\n      When present in the Used-Service-Unit AVP, this value indicates\n\
    \      the amount of resource units used after tariff change had\n      occurred.\n\
    \   UNIT_INDETERMINATE              2\n      The used unit contains the amount\
    \ of units that straddle the\n      tariff change (e.g., the metering process\
    \ reports to the credit-\n      control client in blocks of n octets, and one\
    \ block straddled the\n      tariff change).  This value is to be used only in\
    \ the Used-\n      Service-Unit AVP.\n"
- title: 8.28.  Service-Identifier AVP
  contents:
  - "8.28.  Service-Identifier AVP\n   The Service-Identifier AVP is of type Unsigned32\
    \ (AVP Code 439) and\n   contains the identifier of a service.  The specific service\
    \ the\n   request relates to is uniquely identified by the combination of\n  \
    \ Service-Context-Id and Service-Identifier AVPs.\n   A usage example of this\
    \ AVP is illustrated in Appendix A (Flow IX).\n"
- title: 8.29.  Rating-Group AVP
  contents:
  - "8.29.  Rating-Group AVP\n   The Rating-Group AVP is of type Unsigned32 (AVP Code\
    \ 432) and\n   contains the identifier of a rating group.  All the services subject\n\
    \   to the same rating type are part of the same rating group.  The\n   specific\
    \ rating group the request relates to is uniquely identified\n   by the combination\
    \ of Service-Context-Id and Rating-Group AVPs.\n   A usage example of this AVP\
    \ is illustrated in Appendix A (Flow IX).\n"
- title: 8.30.  G-S-U-Pool-Reference AVP
  contents:
  - "8.30.  G-S-U-Pool-Reference AVP\n   The G-S-U-Pool-Reference AVP (AVP Code 457)\
    \ is of type Grouped.  It\n   is used in the Credit-Control-Answer message, and\
    \ associates the\n   Granted-Service-Unit AVP within which it appears with a credit\
    \ pool\n   within the session.\n   The G-S-U-Pool-Identifier AVP specifies the\
    \ credit pool from which\n   credit is drawn for this unit type.\n   The CC-Unit-Type\
    \ AVP specifies the type of units for which credit is\n   pooled.\n   The Unit-Value\
    \ AVP specifies the multiplier, which converts between\n   service units of type\
    \ CC-Unit-Type and abstract service units within\n   the credit pool (and thus\
    \ to service units of any other service or\n   rating group associated with the\
    \ same pool).\n   The G-S-U-Pool-Reference AVP is defined as follows (per the\
    \ grouped-\n   avp-def of RFC 3588 [DIAMBASE]):\n      G-S-U-Pool-Reference  \
    \  ::= < AVP Header: 457 >\n                                  { G-S-U-Pool-Identifier\
    \ }\n                                  { CC-Unit-Type }\n                    \
    \              { Unit-Value }\n"
- title: 8.31.  G-S-U-Pool-Identifier AVP
  contents:
  - "8.31.  G-S-U-Pool-Identifier AVP\n   The G-S-U-Pool-Identifier AVP (AVP Code\
    \ 453) is of type Unsigned32\n   and identifies a credit pool within the session.\n"
- title: 8.32.  CC-Unit-Type AVP
  contents:
  - "8.32.  CC-Unit-Type AVP\n   The CC-Unit-Type AVP (AVP Code 454) is of type Enumerated\
    \ and\n   specifies the type of units considered to be pooled into a credit\n\
    \   pool.\n   The following values are defined for the CC-Unit-Type AVP:\n   \
    \   TIME                         0\n      MONEY                        1\n   \
    \   TOTAL-OCTETS                 2\n      INPUT-OCTETS                 3\n   \
    \   OUTPUT-OCTETS                4\n      SERVICE-SPECIFIC-UNITS       5\n"
- title: 8.33.  Validity-Time AVP
  contents:
  - "8.33.  Validity-Time AVP\n   The Validity-Time AVP is of type Unsigned32 (AVP\
    \ Code 448).  It is\n   sent from the credit-control server to the credit-control\
    \ client.\n   The AVP contains the validity time of the granted service units.\
    \  The\n   measurement of the Validity-Time is started upon receipt of the\n \
    \  Credit-Control-Answer Message containing this AVP.  If the granted\n   service\
    \ units have not been consumed within the validity time\n   specified in this\
    \ AVP, the credit-control client MUST send a Credit-\n   Control-Request message\
    \ to the server, with CC-Request-Type set to\n   UPDATE_REQUEST.  The value field\
    \ of the Validity-Time AVP is given in\n   seconds.\n   The Validity-Time AVP\
    \ is also used for the graceful service\n   termination (see section 5.6) to indicate\
    \ to the credit-control\n   client how long the subscriber is allowed to use network\
    \ resources\n   after the specified action (i.e., REDIRECT or RESTRICT_ACCESS)\n\
    \   started.  When the Validity-Time elapses, a new intermediate\n   interrogation\
    \ is sent to the server.\n"
- title: 8.34.  Final-Unit-Indication AVP
  contents:
  - "8.34.  Final-Unit-Indication AVP\n   The Final-Unit-Indication AVP (AVP Code\
    \ 430) is of type Grouped and\n   indicates that the Granted-Service-Unit AVP\
    \ in the Credit-Control-\n   Answer, or in the AA answer, contains the final units\
    \ for the\n   service.  After these units have expired, the Diameter credit-control\n\
    \   client is responsible for executing the action indicated in the\n   Final-Unit-Action\
    \ AVP (see section 5.6).\n   If more than one unit type is received in the Credit-Control-Answer,\n\
    \   the unit type that first expired SHOULD cause the credit-control\n   client\
    \ to execute the specified action.\n   In the first interrogation, the Final-Unit-Indication\
    \ AVP with\n   Final-Unit-Action REDIRECT or RESTRICT_ACCESS can also be present\n\
    \   with no Granted-Service-Unit AVP in the Credit-Control-Answer or in\n   the\
    \ AA answer.  This indicates to the Diameter credit-control client\n   to execute\
    \ the specified action immediately.  If the home service\n   provider policy is\
    \ to terminate the service, naturally, the server\n   SHOULD return the appropriate\
    \ transient failure (see section 9.1) in\n   order to implement the policy-defined\
    \ action.\n   The Final-Unit-Action AVP defines the behavior of the service element\n\
    \   when the user's account cannot cover the cost of the service and MUST\n  \
    \ always be present if the Final-Unit-Indication AVP is included in a\n   command.\n\
    \   If the Final-Unit-Action AVP is set to TERMINATE, no other AVPs MUST\n   be\
    \ present.\n   If the Final-Unit-Action AVP is set to REDIRECT at least the\n\
    \   Redirect-Server AVP MUST be present.  The Restriction-Filter-Rule AVP\n  \
    \ or the Filter-Id AVP MAY be present in the Credit-Control-Answer\n   message\
    \ if the user is also allowed to access other services that are\n   not accessible\
    \ through the address given in the Redirect-Server AVP.\n   If the Final-Unit-Action\
    \ AVP is set to RESTRICT_ACCESS, either the\n   Restriction-Filter-Rule AVP or\
    \ the Filter-Id AVP SHOULD be present.\n   The Filter-Id AVP is defined in [NASREQ].\
    \  The Filter-Id AVP can be\n   used to reference an IP filter list installed\
    \ in the access device by\n   means other than the Diameter credit-control application,\
    \ e.g.,\n   locally configured or configured by another entity.\n   The Final-Unit-Indication\
    \ AVP is defined as follows (per the\n   grouped-avp-def of RFC 3588 [DIAMBASE]):\n\
    \      Final-Unit-Indication ::= < AVP Header: 430 >\n                       \
    \         { Final-Unit-Action }\n                               *[ Restriction-Filter-Rule\
    \ ]\n                               *[ Filter-Id ]\n                         \
    \       [ Redirect-Server ]\n"
- title: 8.35.  Final-Unit-Action AVP
  contents:
  - "8.35.  Final-Unit-Action AVP\n   The Final-Unit-Action AVP (AVP Code 449) is\
    \ of type Enumerated and\n   indicates to the credit-control client the action\
    \ to be taken when\n   the user's account cannot cover the service cost.\n   The\
    \ Final-Unit-Action can be one of the following:\n   TERMINATE               \
    \        0\n      The credit-control client MUST terminate the service session.\n\
    \      This is the default handling, applicable whenever the credit-\n      control\
    \ client receives an unsupported Final-Unit-Action value,\n      and it MUST be\
    \ supported by all the Diameter credit-control client\n      implementations conforming\
    \ to this specification.\n   REDIRECT                        1\n      The service\
    \ element MUST redirect the user to the address\n      specified in the Redirect-Server-Address\
    \ AVP.  The redirect action\n      is defined in section 5.6.2.\n   RESTRICT_ACCESS\
    \                 2\n      The access device MUST restrict the user access according\
    \ to the\n      IP packet filters defined in the Restriction-Filter-Rule AVP or\n\
    \      according to the IP packet filters identified by the Filter-Id\n      AVP.\
    \  All the packets not matching the filters MUST be dropped\n      (see section\
    \ 5.6.3).\n"
- title: 8.36.  Restriction-Filter-Rule AVP
  contents:
  - "8.36.  Restriction-Filter-Rule AVP\n   The Restriction-Filter-Rule AVP (AVP Code\
    \ 438) is of type\n   IPFilterRule and provides filter rules corresponding to\
    \ services that\n   are to remain accessible even if there are no more service\
    \ units\n   granted.  The access device has to configure the specified filter\n\
    \   rules for the subscriber and MUST drop all the packets not matching\n   these\
    \ filters.  Zero, one, or more such AVPs MAY be present in a\n   Credit-Control-Answer\
    \ message or in an AA answer message.\n"
- title: 8.37.  Redirect-Server AVP
  contents:
  - "8.37.  Redirect-Server AVP\n   The Redirect-Server AVP (AVP Code 434) is of type\
    \ Grouped and\n   contains the address information of the redirect server (e.g.,\
    \ HTTP\n   redirect server, SIP Server) with which the end user is to be\n   connected\
    \ when the account cannot cover the service cost.  It MUST be\n   present when\
    \ the Final-Unit-Action AVP is set to REDIRECT.\n   It is defined as follows (per\
    \ the grouped-avp-def of RFC 3588\n   [DIAMBASE]):\n      Redirect-Server ::=\
    \ < AVP Header: 434 >\n                          { Redirect-Address-Type }\n \
    \                         { Redirect-Server-Address }\n"
- title: 8.38.  Redirect-Address-Type AVP
  contents:
  - "8.38.  Redirect-Address-Type AVP\n   The Redirect-Address-Type AVP (AVP Code\
    \ 433) is of type Enumerated\n   and defines the address type of the address given\
    \ in the Redirect-\n   Server-Address AVP.\n   The address type can be one of\
    \ the following:\n   IPv4 Address                    0\n      The address type\
    \ is in the form of \"dotted-decimal\" IPv4 address,\n      as defined in [IPv4].\n\
    \   IPv6 Address                    1\n      The address type is in the form of\
    \ IPv6 address, as defined in\n      [IPv6Addr].  The address is a text representation\
    \ of the address\n      in either the preferred or alternate text form [IPv6Addr].\n\
    \      Conformant implementations MUST support the preferred form and\n      SHOULD\
    \ support the alternate text form for IPv6 addresses.\n   URL                \
    \             2\n      The address type is in the form of Uniform Resource Locator,\
    \ as\n      defined in [URL].\n   SIP URI                         3\n      The\
    \ address type is in the form of SIP Uniform Resource\n      Identifier, as defined\
    \ in [SIP].\n"
- title: 8.39.  Redirect-Server-Address AVP
  contents:
  - "8.39.  Redirect-Server-Address AVP\n   The Redirect-Server-Address AVP (AVP Code\
    \ 435) is of type UTF8String\n   and defines the address of the redirect server\
    \ (e.g., HTTP redirect\n   server, SIP Server) with which the end user is to be\
    \ connected when\n   the account cannot cover the service cost.\n"
- title: 8.40.  Multiple-Services-Indicator AVP
  contents:
  - "8.40.  Multiple-Services-Indicator AVP\n   The Multiple-Services-Indicator AVP\
    \ (AVP Code 455) is of type\n   Enumerated and indicates whether the Diameter\
    \ credit-control client\n   is capable of handling multiple services independently\
    \ within a\n   (sub-) session.  The absence of this AVP means that independent\n\
    \   credit-control of multiple services is not supported.\n   A server not implementing\
    \ the independent credit-control of multiple\n   services MUST treat the Multiple-Services-Indicator\
    \ AVP as an invalid\n   AVP.\n   The following values are defined for the Multiple-Services-Indicator\n\
    \   AVP:\n   MULTIPLE_SERVICES_NOT_SUPPORTED 0\n      Client does not support\
    \ independent credit-control of multiple\n      services within a (sub-)session.\n\
    \   MULTIPLE_SERVICES_SUPPORTED     1\n      Client supports independent credit-control\
    \ of multiple services\n      within a (sub-)session.\n"
- title: 8.41.  Requested-Action AVP
  contents:
  - "8.41.  Requested-Action AVP\n   The Requested-Action AVP (AVP Code 436) is of\
    \ type Enumerated and\n   contains the requested action being sent by Credit-Control-Request\n\
    \   command where the CC-Request-Type is set to EVENT_REQUEST.  The\n   following\
    \ values are defined for the Requested-Action AVP:\n   DIRECT_DEBITING       \
    \          0\n      This indicates a request to decrease the end user's account\n\
    \      according to information specified in the Requested-Service-Unit\n    \
    \  AVP and/or Service-Identifier AVP (additional rating information\n      may\
    \ be included in service-specific AVPs or in the Service-\n      Parameter-Info\
    \ AVP).  The Granted-Service-Unit AVP in the Credit-\n      Control-Answer command\
    \ contains the debited units.\n   REFUND_ACCOUNT                  1\n      This\
    \ indicates a request to increase the end user's account\n      according to information\
    \ specified in the Requested-Service-Unit\n      AVP and/or Service-Identifier\
    \ AVP (additional rating information\n      may be included in service-specific\
    \ AVPs or in the Service-\n      Parameter-Info AVP).  The Granted-Service-Unit\
    \ AVP in the Credit-\n      Control-Answer command contains the refunded units.\n\
    \   CHECK_BALANCE                   2\n      This indicates a balance check request.\
    \  In this case, the\n      checking of the account balance is done without any\
    \ credit\n      reservation from the account.  The Check-Balance-Result AVP in\
    \ the\n      Credit-Control-Answer command contains the result of the balance\n\
    \      check.\n   PRICE_ENQUIRY                   3\n      This indicates a price\
    \ enquiry request.  In this case, neither\n      checking of the account balance\
    \ nor reservation from the account\n      will be done; only the price of the\
    \ service will be returned in\n      the Cost-Information AVP in the Credit-Control-Answer\
    \ Command.\n"
- title: 8.42.  Service-Context-Id AVP
  contents:
  - "8.42.  Service-Context-Id AVP\n   The Service-Context-Id AVP is of type UTF8String\
    \ (AVP Code 461) and\n   contains a unique identifier of the Diameter credit-control\
    \ service\n   specific document that applies to the request (as defined in section\n\
    \   4.1.2).  This is an identifier allocated by the service provider, by\n   the\
    \ service element manufacturer, or by a standardization body, and\n   MUST uniquely\
    \ identify a given Diameter credit-control service\n   specific document.  The\
    \ format of the Service-Context-Id is:\n   \"service-context\" \"@\" \"domain\"\
    \n   service-context = Token\n   The Token is an arbitrary string of characters\
    \ and digits.\n   'domain' represents the entity that allocated the Service-Context-Id.\n\
    \   It can be ietf.org, 3gpp.org, etc., if the identifier is allocated by\n  \
    \ a standardization body, or it can be the FQDN of the service provider\n   (e.g.,\
    \ provider.example.com) or of the vendor (e.g.,\n   vendor.example.com) if the\
    \ identifier is allocated by a private\n   entity.\n   This AVP SHOULD be placed\
    \ as close to the Diameter header as\n   possible.\n   Service-specific documents\
    \ that are for private use only (i.e., to\n   one provider's own use, where no\
    \ interoperability is deemed useful)\n   may define private identifiers without\
    \ need of coordination.\n   However, when interoperability is wanted, coordination\
    \ of the\n   identifiers via, for example, publication of an informational RFC\
    \ is\n   RECOMMENDED in order to make Service-Context-Id globally available.\n"
- title: 8.43.  Service-Parameter-Info AVP
  contents:
  - "8.43.  Service-Parameter-Info AVP\n   The Service-Parameter-Info AVP (AVP Code\
    \ 440) is of type Grouped and\n   contains service-specific information used for\
    \ price calculation or\n   rating.  The Service-Parameter-Type AVP defines the\
    \ service parameter\n   type, and the Service-Parameter-Value AVP contains the\
    \ parameter\n   value.  The actual contents of these AVPs are not within the scope\
    \ of\n   this document and SHOULD be defined in another Diameter application,\n\
    \   in standards written by other standardization bodies, or in service-\n   specific\
    \ documentation.\n   In the case of an unknown service request (e.g., unknown\
    \ Service-\n   Parameter-Type), the corresponding answer message MUST contain\
    \ the\n   error code DIAMETER_RATING_FAILED.  A Credit-Control-Answer message\n\
    \   with this error MUST contain one or more Failed-AVP AVPs containing\n   the\
    \ Service-Parameter-Info AVPs that caused the failure.\n   It is defined as follows\
    \ (per the grouped-avp-def of RFC 3588\n   [DIAMBASE]):\n      Service-Parameter-Info\
    \ ::= < AVP Header: 440 >\n                                 { Service-Parameter-Type\
    \ }\n                                 { Service-Parameter-Value }\n"
- title: 8.44.  Service-Parameter-Type AVP
  contents:
  - "8.44.  Service-Parameter-Type AVP\n   The Service-Parameter-Type AVP is of type\
    \ Unsigned32 (AVP Code 441)\n   and defines the type of the service event specific\
    \ parameter (e.g.,\n   it can be the end-user location or service name).  The\
    \ different\n   parameters and their types are service specific, and the meanings\
    \ of\n   these parameters are not defined in this document.  Whoever allocates\n\
    \   the Service-Context-Id (i.e., unique identifier of a service-specific\n  \
    \ document) is also responsible for assigning Service-Parameter-Type\n   values\
    \ for the service and ensuring their uniqueness within the given\n   service.\
    \  The Service-Parameter-Value AVP contains the value\n   associated with the\
    \ service parameter type.\n"
- title: 8.45.  Service-Parameter-Value AVP
  contents:
  - "8.45.  Service-Parameter-Value AVP\n   The Service-Parameter-Value AVP is of\
    \ type OctetString (AVP Code 442)\n   and contains the value of the service parameter\
    \ type.\n"
- title: 8.46.  Subscription-Id AVP
  contents:
  - "8.46.  Subscription-Id AVP\n   The Subscription-Id AVP (AVP Code 443) is used\
    \ to identify the end\n   user's subscription and is of type Grouped.  The Subscription-Id\
    \ AVP\n   includes a Subscription-Id-Data AVP that holds the identifier and a\n\
    \   Subscription-Id-Type AVP that defines the identifier type.\n   It is defined\
    \ as follows (per the grouped-avp-def of RFC 3588\n   [DIAMBASE]):\n      Subscription-Id\
    \ ::= < AVP Header: 443 >\n                          { Subscription-Id-Type }\n\
    \                          { Subscription-Id-Data }\n"
- title: 8.47.  Subscription-Id-Type AVP
  contents:
  - "8.47.  Subscription-Id-Type AVP\n   The Subscription-Id-Type AVP (AVP Code 450)\
    \ is of type Enumerated,\n   and it is used to determine which type of identifier\
    \ is carried by\n   the Subscription-Id AVP.\n   This specification defines the\
    \ following subscription identifiers.\n   However, new Subscription-Id-Type values\
    \ can be assigned by an IANA\n   designated expert, as defined in section 12.\
    \  A server MUST implement\n   all the Subscription-Id-Types required to perform\
    \ credit\n   authorization for the services it supports, including possible future\n\
    \   values.  Unknown or unsupported Subscription-Id-Types MUST be treated\n  \
    \ according to the 'M' flag rule, as defined in [DIAMBASE].\n   END_USER_E164\
    \                   0\n      The identifier is in international E.164 format (e.g.,\
    \ MSISDN),\n      according to the ITU-T E.164 numbering plan defined in [E164]\
    \ and\n      [CE164].\n   END_USER_IMSI                   1\n      The identifier\
    \ is in international IMSI format, according to the\n      ITU-T E.212 numbering\
    \ plan as defined in [E212] and [CE212].\n   END_USER_SIP_URI                2\n\
    \      The identifier is in the form of a SIP URI, as defined in [SIP].\n   END_USER_NAI\
    \                    3\n      The identifier is in the form of a Network Access\
    \ Identifier, as\n      defined in [NAI].\n   END_USER_PRIVATE               \
    \ 4\n      The Identifier is a credit-control server private identifier.\n"
- title: 8.48.  Subscription-Id-Data AVP
  contents:
  - "8.48.  Subscription-Id-Data AVP\n   The Subscription-Id-Data AVP (AVP Code 444)\
    \ is used to identify the\n   end user and is of type UTF8String.  The Subscription-Id-Type\
    \ AVP\n   defines which type of identifier is used.\n"
- title: 8.49.  User-Equipment-Info AVP
  contents:
  - "8.49.  User-Equipment-Info AVP\n   The User-Equipment-Info AVP (AVP Code 458)\
    \ is of type Grouped and\n   allows the credit-control client to indicate the\
    \ identity and\n   capability of the terminal the subscriber is using for the\
    \ connection\n   to network.\n   It is defined as follows (per the grouped-avp-def\
    \ of RFC 3588\n   [DIAMBASE]):\n      User-Equipment-Info ::= < AVP Header: 458\
    \ >\n                              { User-Equipment-Info-Type }\n            \
    \                  { User-Equipment-Info-Value }\n"
- title: 8.50.  User-Equipment-Info-Type AVP
  contents:
  - "8.50.  User-Equipment-Info-Type AVP\n   The User-Equipment-Info-Type AVP is of\
    \ type Enumerated  (AVP Code\n   459) and defines the type of user equipment information\
    \ contained in\n   the User-Equipment-Info-Value AVP.\n   This specification defines\
    \ the following user equipment types.\n   However, new User-Equipment-Info-Type\
    \ values can be assigned by an\n   IANA designated expert, as defined in section\
    \ 12.\n   IMEISV                          0\n      The identifier contains the\
    \ International Mobile Equipment\n      Identifier and Software Version in the\
    \ international IMEISV format\n      according to 3GPP TS 23.003 [3GPPIMEI].\n\
    \   MAC                             1\n      The 48-bit MAC address is formatted\
    \ as described in [RAD802.1X].\n   EUI64                           2\n      The\
    \ 64-bit identifier used to identify hardware instance of the\n      product,\
    \ as defined in [EUI64].\n   MODIFIED_EUI64                  3\n      There are\
    \ a number of types of terminals that have identifiers\n      other than IMEI,\
    \ IEEE 802 MACs, or EUI-64.  These identifiers can\n      be converted to modified\
    \ EUI-64 format as described in [IPv6Addr]\n      or by using some other methods\
    \ referred to in the service-specific\n      documentation.\n"
- title: 8.51.  User-Equipment-Info-Value AVP
  contents:
  - "8.51.  User-Equipment-Info-Value AVP\n   The User-Equipment-Info-Value AVP (AVP\
    \ Code 460) is of type\n   OctetString.  The User-Equipment-Info-Type AVP defines\
    \ which type of\n   identifier is used.\n"
- title: 9.  Result Code AVP Values
  contents:
  - "9.  Result Code AVP Values\n   This section defines new Result-Code AVP [DIAMBASE]\
    \ values that must\n   be supported by all Diameter implementations that conform\
    \ to this\n   specification.\n   The Credit-Control-Answer message includes the\
    \ Result-Code AVP, which\n   may indicate that an error was present in the Credit-Control-Request\n\
    \   message.  A rejected Credit-Control-Request message SHOULD cause the\n   user's\
    \ session to be terminated.\n"
- title: 9.1.  Transient Failures
  contents:
  - "9.1.  Transient Failures\n   Errors that fall within the transient failures category\
    \ are used to\n   inform a peer that the request could not be satisfied at the\
    \ time it\n   was received, but that the request MAY be able to be satisfied in\
    \ the\n   future.\n   DIAMETER_END_USER_SERVICE_DENIED           4010\n      The\
    \ credit-control server denies the service request due to\n      service restrictions.\
    \  If the CCR contained used-service-units,\n      they are deducted, if possible.\n\
    \   DIAMETER_CREDIT_CONTROL_NOT_APPLICABLE     4011\n      The credit-control\
    \ server determines that the service can be\n      granted to the end user but\
    \ that no further credit-control is\n      needed for the service (e.g., service\
    \ is free of charge).\n   DIAMETER_CREDIT_LIMIT_REACHED              4012\n  \
    \    The credit-control server denies the service request because the\n      end\
    \ user's account could not cover the requested service.  If the\n      CCR contained\
    \ used-service-units they are deducted, if possible.\n"
- title: 9.2.  Permanent Failures
  contents:
  - "9.2.  Permanent Failures\n   Errors that fall within the permanent failure category\
    \ are used to\n   inform the peer that the request failed and should not be attempted\n\
    \   again.\n   DIAMETER_USER_UNKNOWN                      5030\n      The specified\
    \ end user is unknown in the credit-control server.\n   DIAMETER_RATING_FAILED\
    \                     5031\n      This error code is used to inform the credit-control\
    \ client that\n      the credit-control server cannot rate the service request\
    \ due to\n      insufficient rating input, an incorrect AVP combination, or an\
    \ AVP\n      or an AVP value that is not recognized or supported in the rating.\n\
    \      The Failed-AVP AVP MUST be included and contain a copy of the\n      entire\
    \ AVP(s) that could not be processed successfully or an\n      example of the\
    \ missing AVP complete with the Vendor-Id if\n      applicable.  The value field\
    \ of the missing AVP should be of\n      correct minimum length and contain zeros.\n"
- title: 10.  AVP Occurrence Table
  contents:
  - "10.  AVP Occurrence Table\n   The following table presents the AVPs defined in\
    \ this document and\n   specifies in which Diameter messages they MAY or MAY NOT\
    \ be present.\n   Note that AVPs that can only be present within a Grouped AVP\
    \ are not\n   represented in this table.\n   The table uses the following symbols:\n\
    \      0     The AVP MUST NOT be present in the message.\n      0+    Zero or\
    \ more instances of the AVP MAY be present in the\n            message.\n    \
    \  0-1   Zero or one instance of the AVP MAY be present in the\n            message.\
    \  It is considered an error if there is more\n            than one instance of\
    \ the AVP.\n      1     One instance of the AVP MUST be present in the message.\n\
    \      1+    At least one instance of the AVP MUST be present in the\n       \
    \     message.\n"
- title: 10.1.  Credit-Control AVP Table
  contents:
  - "10.1.  Credit-Control AVP Table\n   The table in this section is used to represent\
    \ which credit-control\n   applications specific AVPs defined in this document\
    \ are to be present\n   in the credit-control messages.\n                    \
    \                   +-----------+\n                                       |  Command\
    \  |\n                                       |   Code    |\n                 \
    \                      |-----+-----+\n         Attribute Name                |\
    \ CCR | CCA |\n         ------------------------------|-----+-----+\n        \
    \ Acct-Multi-Session-Id         | 0-1 | 0-1 |\n         Auth-Application-Id  \
    \         | 1   | 1   |\n         CC-Correlation-Id             | 0-1 | 0   |\n\
    \         CC-Session-Failover           | 0   | 0-1 |\n         CC-Request-Number\
    \             | 1   | 1   |\n         CC-Request-Type               | 1   | 1\
    \   |\n         CC-Sub-Session-Id             | 0-1 | 0-1 |\n         Check-Balance-Result\
    \          | 0   | 0-1 |\n         Cost-Information              | 0   | 0-1 |\n\
    \         Credit-Control-Failure-       | 0   | 0-1 |\n            Handling  \
    \                 |     |     |\n         Destination-Host              | 0-1\
    \ | 0   |\n         Destination-Realm             | 1   | 0   |\n         Direct-Debiting-Failure-\
    \      | 0   | 0-1 |\n            Handling                   |     |     |\n \
    \        Event-Timestamp               | 0-1 | 0-1 |\n         Failed-AVP    \
    \                | 0   | 0+  |\n         Final-Unit-Indication         | 0   |\
    \ 0-1 |\n         Granted-Service-Unit          | 0   | 0-1 |\n         Multiple-Services-Credit-\
    \     | 0+  | 0+  |\n            Control                    |     |     |\n  \
    \       Multiple-Services-Indicator   | 0-1 | 0   |\n         Origin-Host    \
    \               | 1   | 1   |\n         Origin-Realm                  | 1   |\
    \ 1   |\n         Origin-State-Id               | 0-1 | 0-1 |\n         Proxy-Info\
    \                    | 0+  | 0+  |\n         Redirect-Host                 | 0\
    \   | 0+  |\n         Redirect-Host-Usage           | 0   | 0-1 |\n         Redirect-Max-Cache-Time\
    \       | 0   | 0-1 |\n         Requested-Action              | 0-1 | 0   |\n\
    \         Requested-Service-Unit        | 0-1 | 0   |\n         Route-Record \
    \                 | 0+  | 0+  |\n         Result-Code                   | 0  \
    \ | 1   |\n         Service-Context-Id            | 1   | 0   |\n         Service-Identifier\
    \            | 0-1 | 0   |\n         Service-Parameter-Info        | 0+  | 0 \
    \  |\n         Session-Id                    | 1   | 1   |\n         Subscription-Id\
    \               | 0+  | 0   |\n         Termination-Cause             | 0-1 |\
    \ 0   |\n         User-Equipment-Info           | 0-1 | 0   |\n         Used-Service-Unit\
    \             | 0+  | 0   |\n         User-Name                     | 0-1 | 0-1\
    \ |\n         Validity-Time                 | 0   | 0-1 |\n         ------------------------------|-----+-----+\n"
- title: 10.2.  Re-Auth-Request/Answer AVP Table
  contents:
  - "10.2.  Re-Auth-Request/Answer AVP Table\n   This section defines AVPs that are\
    \ specific to the Diameter credit-\n   control application and that MAY be included\
    \ in the Diameter Re-\n   Auth-Request/Answer (RAR/RAA) message [DIAMBASE].\n\
    \   Re-Auth-Request/Answer command MAY include the following additional\n   AVPs:\n\
    \                                       +---------------+\n                  \
    \                     | Command Code  |\n                                    \
    \   |-------+-------+\n         Attribute Name                |  RAR  |  RAA \
    \ |\n         ------------------------------+-------+-------+\n         CC-Sub-Session-Id\
    \             |  0-1  |  0-1  |\n         G-S-U-Pool-Identifier         |  0-1\
    \  |  0-1  |\n         Service-Identifier            |  0-1  |  0-1  |\n     \
    \    Rating-Group                  |  0-1  |  0-1  |\n         ------------------------------+-------+-------+\n"
- title: 11.  RADIUS/Diameter Credit-Control Interworking Model
  contents:
  - "11.  RADIUS/Diameter Credit-Control Interworking Model\n   This section defines\
    \ the basic principles for the Diameter credit-\n   control/RADIUS prepaid inter-working\
    \ model; that is, a message\n   translation between a RADIUS based prepaid solution\
    \ and a Diameter\n   credit-control application.  A complete description of the\
    \ protocol\n   translations between RADIUS and the Diameter credit-control\n \
    \  application is beyond the scope of this specification and SHOULD be\n   addressed\
    \ in another appropriate document, such as the RADIUS prepaid\n   specification.\n\
    \   The Diameter credit-control architecture may have a Translation Agent\n  \
    \ capable of translation between RADIUS prepaid and Diameter credit-\n   control\
    \ protocols.  An AAA server (usually the home AAA server) may\n   act as a Translation\
    \ Agent and as a Diameter credit-control client\n   for service elements that\
    \ use credit-control mechanisms other than\n   Diameter credit control for instance,\
    \ RADIUS prepaid.  In this case,\n   the home AAA server contacts the Diameter\
    \ credit-control server as\n   part of the authorization process.  The interworking\
    \ architecture is\n   illustrated in Figure 7, and interworking flow in Figure\
    \ 8.  In a\n   roaming situation the service element (e.g., the NAS) may be located\n\
    \   in the visited network, and a visited AAA server is usually\n   contacted.\
    \  The visited AAA server connects then to the home AAA\n   server.\n        \
    \                          RADIUS Prepaid\n   +--------+       +---------+   protocol\
    \ +------------+  +--------+\n   |  End   |<----->| Service |<---------->| Home\
    \ AAA   |  |Business|\n   |  User  |       | Element |            |  Server  \
    \  |  |Support |\n   +--------+   +-->|         |            |+----------+|->|System\
    \  |\n                |   +---------+            ||CC Client ||  |        |\n\
    \                |                          |+----------+|  |        |\n   +--------+\
    \   |                          +------^-----+  +----^---+\n   |  End   |<--+ \
    \               Credit-Control   |             |\n   |  User  |              \
    \            Protocol   |             |\n   +--------+                       \
    \      +-------V--------+    |\n                                          |Credit-Control\
    \  |----+\n                                          |   Server       |\n    \
    \                                      +----------------+\n        Figure 7: Credit-control\
    \ architecture with service element\n                  containing translation\
    \ agent, translating RADIUS\n                  prepaid to Diameter credit-control\
    \ protocol\n   When the AAA server acting as a Translation Agent receives an initial\n\
    \   RADIUS Access-Request message from service element (e.g., NAS\n   access),\
    \ it performs regular authentication and authorization.  If\n   the RADIUS Access-Request\
    \ message indicates that the service element\n   is capable of credit-control,\
    \ and if the home AAA server finds that\n   the subscriber is a prepaid subscriber,\
    \ then a Diameter credit-\n   control request SHOULD be sent toward the credit-control\
    \ server to\n   perform credit authorization and to establish a credit-control\n\
    \   session.  After the Diameter credit-control server checks the end\n   user's\
    \ account balance, rates the service, and reserves credit from\n   the end user's\
    \ account, the reserved quota is returned to the home\n   AAA server in the Diameter\
    \ Credit-Control-Answer.  Then the home AAA\n   server sends the reserved quota\
    \ to the service element in the RADIUS\n   Access-Accept.\n   At the expiry of\
    \ the allocated quota, the service element sends a new\n   RADIUS Access-Request\
    \ containing the units used this far to the home\n   AAA server.  The home AAA\
    \ server shall map a RADIUS Access-Request\n   containing the reported units to\
    \ the Diameter credit-control server\n   in a Diameter Credit-Control-Request\
    \ (UPDATE_REQUEST).  The Diameter\n   credit-control server debits the used units\
    \ from the end user's\n   account and allocates a new quota that is returned to\
    \ the home AAA\n   server in the Diameter Credit-Control-Answer.  The quota is\n\
    \   transferred to the service element in the RADIUS Access-Accept.  When\n  \
    \ the end user terminates the service, or when the entire quota has\n   been used,\
    \ the service element sends a RADIUS Access-Request.  To\n   debit the used units\
    \ from the end user's account and to stop the\n   credit-control session, the\
    \ home AAA server sends a Diameter Credit-\n   Control-Request (TERMINATION_REQUEST)\
    \ to the credit-control server.\n   The Diameter credit-control server acknowledges\
    \ the session\n   termination by sending a Diameter Credit-Control-Answer to the\
    \ home\n   AAA server.  The RADIUS Access-Accept is sent to the NAS.\n   A following\
    \ diagram illustrates a RADIUS prepaid - Diameter credit-\n   control interworking\
    \ sequence.\n      Service Element         Translation Agent\n        (e.g., NAS)\
    \               (CC Client)             CC Server\n            |     Access-Request\
    \     |                        |\n            |----------------------->|     \
    \                   |\n            |                        |    CCR (initial)\
    \       |\n            |                        |----------------------->|\n \
    \           |                        |    CCA (Granted-Units) |\n            |\
    \                        |<-----------------------|\n            |     Access-Accept\
    \      |                        |\n            |     (Granted-Units)    |    \
    \                    |\n            |<-----------------------|               \
    \         |\n            :                        :                        :\n\
    \            |     Access-Request     |                        |\n           \
    \ |     (Used-Units)       |                        |\n            |----------------------->|\
    \                        |\n            |                        |    CCR (update,\
    \        |\n            |                        |         Used-Units)    |\n\
    \            |                        |----------------------->|\n           \
    \ |                        |    CCA (Granted-Units) |\n            |         \
    \               |<-----------------------|\n            |     Access-Accept  \
    \    |                        |\n            |     (Granted-Units)    |      \
    \                  |\n            |<-----------------------|                 \
    \       |\n            :                        :                        :\n \
    \           |     Access-Request     |                        |\n            |----------------------->|\
    \                        |\n            |                        |     CCR (terminate,\
    \    |\n            |                        |          Used-Units)   |\n    \
    \        |                        |----------------------->|\n            |  \
    \                      |     CCA                |\n            |             \
    \           |<-----------------------|\n            |     Access-Accept      |\
    \                        |\n            |<-----------------------|           \
    \             |\n            |                        |                      \
    \  |\n           Figure 8: Message flow example with RADIUS prepaid -\n      \
    \            Diameter credit-control interworking\n"
- title: 12.  IANA Considerations
  contents:
  - "12.  IANA Considerations\n   This section contains the namespaces that have either\
    \ been created in\n   this specification, or the values assigned to existing namespaces\n\
    \   managed by IANA.\n   In the subsections below, when we speak about review\
    \ by a Designated\n   Expert, please note that the designated expert will be assigned\
    \ by\n   the IESG.  Initially, such Expert discussions take place on the AAA\n\
    \   WG mailing list.\n"
- title: 12.1.  Application Identifier
  contents:
  - "12.1.  Application Identifier\n   This specification assigns the value 4, 'Diameter\
    \ Credit Control', to\n   the Application Identifier namespace defined in [DIAMBASE].\
    \  See\n   section 1.3 for more information.\n"
- title: 12.2.  Command Codes
  contents:
  - "12.2.  Command Codes\n   This specification uses the value 272 from the Command\
    \ code namespace\n   defined in [DIAMBASE] for the Credit-Control-Request (CCR)\
    \ and\n   Credit-Control-Answer (CCA) commands.\n"
- title: 12.3.  AVP Codes
  contents:
  - "12.3.  AVP Codes\n   This specification assigns the values 411 - 461 from the\
    \ AVP code\n   namespace defined in [DIAMBASE].  See section 8 for the assignment\
    \ of\n   the namespace in this specification.\n"
- title: 12.4.  Result-Code AVP Values
  contents:
  - "12.4.  Result-Code AVP Values\n   This specification assigns the values 4010,\
    \ 4011, 4012, 5030, 5031\n   from the Result-Code AVP value namespace defined\
    \ in [DIAMBASE].  See\n   section 9 for the assignment of the namespace in this\
    \ specification.\n"
- title: 12.5.  CC-Request-Type AVP
  contents:
  - "12.5.  CC-Request-Type AVP\n   As defined in section 8.3, the CC-Request-Type\
    \ AVP includes\n   Enumerated type values 1 - 4.  IANA has created and is maintaining\
    \ a\n   namespace for this AVP.  All remaining values are available for\n   assignment\
    \ by a Designated Expert [IANA].\n"
- title: 12.6.  CC-Session-Failover AVP
  contents:
  - "12.6.  CC-Session-Failover AVP\n   As defined in section 8.4, the CC-Failover-Supported\
    \ AVP includes\n   Enumerated type values 0 - 1.  IANA has created and is maintaining\
    \ a\n   namespace for this AVP.  All remaining values are available for\n   assignment\
    \ by a Designated Expert [IANA].\n"
- title: 12.7.  CC-Unit-Type AVP
  contents:
  - "12.7.  CC-Unit-Type AVP\n   As defined in section 8.32, the CC-Unit-Type AVP\
    \ includes Enumerated\n   type values 0 - 5.  IANA has created and is maintaining\
    \ a namespace\n   for this AVP.  All remaining values are available for assignment\
    \ by a\n   Designated Expert [IANA].\n"
- title: 12.8.  Check-Balance-Result AVP
  contents:
  - "12.8.  Check-Balance-Result AVP\n   As defined in section 8.6, the Check-Balance-Result\
    \ AVP includes\n   Enumerated type values 0 - 1.  IANA has created and is maintaining\
    \ a\n   namespace for this AVP.  All remaining values are available for\n   assignment\
    \ by a Designated Expert [IANA].\n"
- title: 12.9.  Credit-Control AVP
  contents:
  - "12.9.  Credit-Control AVP\n   As defined in section 8.13, the Credit-Control\
    \ AVP includes\n   Enumerated type values 0 - 1.  IANA has created and is maintaining\
    \ a\n   namespace for this AVP.  All remaining values are available for\n   assignment\
    \ by a Designated Expert [IANA].\n"
- title: 12.10.  Credit-Control-Failure-Handling AVP
  contents:
  - "12.10.  Credit-Control-Failure-Handling AVP\n   As defined in section 8.14, the\
    \ Credit-Control-Failure-Handling AVP\n   includes Enumerated type values 0 -\
    \ 2.  IANA has created and is\n   maintaining a namespace for this AVP.  All remaining\
    \ values are\n   available for assignment by a Designated Expert [IANA].\n"
- title: 12.11.  Direct-Debiting-Failure-Handling AVP
  contents:
  - "12.11.  Direct-Debiting-Failure-Handling AVP\n   As defined in section 8.15,\
    \ the Direct-Debiting-Failure-Handling AVP\n   includes Enumerated type values\
    \ 0 - 1.  IANA has created and is\n   maintaining a namespace for this AVP.  All\
    \ remaining values are\n   available for assignment by a Designated Expert [IANA].\n"
- title: 12.12.  Final-Unit-Action AVP
  contents:
  - "12.12.  Final-Unit-Action AVP\n   As defined in section 8.35, the Final-Unit-Action\
    \ AVP includes\n   Enumerated type values 0 - 2.  IANA has created and is maintaining\
    \ a\n   namespace for this AVP.  All remaining values are available for\n   assignment\
    \ by a Designated Expert [IANA].\n"
- title: 12.13.  Multiple-Services-Indicator AVP
  contents:
  - "12.13.  Multiple-Services-Indicator AVP\n   As defined in section 8.40, the Multiple-Services-Indicator\
    \ AVP\n   includes Enumerated type values 0 - 1.  IANA has created and is\n  \
    \ maintaining a namespace for this AVP.  All remaining values are\n   available\
    \ for assignment by a Designated Expert [IANA].\n"
- title: 12.14.  Redirect-Address-Type AVP
  contents:
  - "12.14.  Redirect-Address-Type AVP\n   As defined in section 8.38, the Redirect-Address-Type\
    \ AVP includes\n   Enumerated type values 0 - 3.  IANA has created and is maintaining\
    \ a\n   namespace for this AVP.  All remaining values are available for\n   assignment\
    \ by a Designated Expert [IANA].\n"
- title: 12.15.  Requested-Action AVP
  contents:
  - "12.15.  Requested-Action AVP\n   As defined in section 8.41, the Requested-Action\
    \ AVP includes\n   Enumerated type values 0 - 3.  IANA has created and is maintaining\
    \ a\n   namespace for this AVP.  All remaining values are available for\n   assignment\
    \ by a Designated Expert [IANA].\n"
- title: 12.16.  Subscription-Id-Type AVP
  contents:
  - "12.16.  Subscription-Id-Type AVP\n   As defined in section 8.47, the Subscription-Id-Type\
    \ AVP  includes\n   Enumerated type values 0 - 4.  IANA has created and is maintaining\
    \ a\n   namespace for this AVP.  All remaining values are available for\n   assignment\
    \ by a Designated Expert [IANA].\n"
- title: 12.17.   Tariff-Change-Usage AVP
  contents:
  - "12.17.   Tariff-Change-Usage AVP\n   As defined in section 8.27, the Tariff-Change-Usage\
    \ AVP includes\n   Enumerated type values 0 - 2.  IANA has created and is maintaining\
    \ a\n   namespace for this AVP.  All remaining values are available for\n   assignment\
    \ by a Designated Expert [IANA].\n"
- title: 12.18.   User-Equipment-Info-Type AVP
  contents:
  - "12.18.   User-Equipment-Info-Type AVP\n   As defined in section 8.50, the User-Equipment-Info-Type\
    \ AVP includes\n   Enumerated type values 0 - 3.  IANA has created and is maintaining\
    \ a\n   namespace for this AVP.  All remaining values are available for\n   assignment\
    \ by a Designated Expert [IANA].\n"
- title: 13.  Credit-Control Application Related Parameters
  contents:
  - "13.  Credit-Control Application Related Parameters\n   Tx timer\n      When real-time\
    \ credit-control is required, the credit-control\n      client contacts the credit-control\
    \ server before and while the\n      service is provided to an end user.  Due\
    \ to the real-time nature\n      of the application, the communication delays\
    \ SHOULD be minimized;\n      e.g., to avoid an overly long service setup time\
    \ experienced by\n      the end user.  The Tx timer is introduced to control the\
    \ waiting\n      time in the client in the Pending state.  When the Tx timer\n\
    \      elapses, the credit-control client takes an action to the end user\n  \
    \    according to the value of the Credit-Control-Failure-Handling AVP\n     \
    \ or Direct-Debiting-Failure-Handling AVP.  The recommended value is\n      10\
    \ seconds.\n   Tcc timer\n      The Tcc timer supervises an ongoing credit-control\
    \ session in the\n      credit-control server.  It is RECOMMENDED to use the Validity-Time\n\
    \      as input to set the Tcc timer value.  In case of transient\n      failures\
    \ in the network, the Diameter credit-control server might\n      change to Idle\
    \ state.  To avoid this, the Tcc timer MAY be set so\n      that Tcc equals to\
    \ 2 x Validity-Time.\n   Credit-Control-Failure-Handling and Direct-Debiting-Failure-Handling\n\
    \      Client implementations may offer the possibility of locally\n      configuring\
    \ these AVPs.  In such a case their value and behavior\n      is defined in section\
    \ 5.7 for the Credit-Control-Failure-Handling\n      and in section 6.5 for the\
    \ Direct-Debiting-Failure-Handling.\n"
- title: 14.  Security Considerations
  contents:
  - "14.  Security Considerations\n   The Diameter base protocol [DIAMBASE] requires\
    \ that each Diameter\n   implementation use underlying security; i.e., IPsec or\
    \ TLS.  These\n   mechanisms are believed to provide sufficient protection under\
    \ the\n   normal Internet threat model; that is, assuming that the authorized\n\
    \   nodes engaging in the protocol have not been compromised, but that\n   the\
    \ attacker has complete control over the communication channels\n   between them.\
    \  This includes eavesdropping, message modification,\n   insertion, and man-in-the-middle\
    \ and replay attacks.  Note also that\n   this application includes a mechanism\
    \ for application layer replay\n   protection by means of the Session-Id from\
    \ [DIAMBASE] and CC-\n   Request-Number, which is specified in this document.\
    \  The Diameter\n   credit-control application is often used within one domain,\
    \ and there\n   may be a single hop between the peers.  In these environments,\
    \ the\n   use of TLS or IPsec is sufficient.  The details of TLS and IPsec\n \
    \  related security considerations are discussed in the [DIAMBASE].\n   Because\
    \ this application handles monetary transactions (directly or\n   indirectly),\
    \ it increases the interest for various security attacks.\n   Therefore, all parties\
    \ communicating with each other MUST be\n   authenticated, including, for instance,\
    \ TLS client-side\n   authentication.  In addition, authorization of the client\
    \ SHOULD be\n   emphasized; i.e., that the client is allowed to perform credit-\n\
    \   control for a certain user.  The specific means of authorization are\n   outside\
    \ of the scope of this specification but can be, for instance,\n   manual configuration.\n\
    \   Another kind of threat is malicious modification, injection, or\n   deletion\
    \ of AVPs or complete credit-control messages.  The credit-\n   control messages\
    \ contain sensitive billing related information (such\n   as subscription Id,\
    \ granted units, used units, cost information)\n   whose malicious modification\
    \ can have financial consequences.\n   Sometimes simply delaying the credit-control\
    \ messages can cause\n   disturbances in the credit-control client or server.\n\
    \   Even without any modification to the messages, an adversary can\n   invite\
    \ a security threat by eavesdropping, as the transactions\n   contain private\
    \ information about the user.  Also, by monitoring the\n   credit-control messages\
    \ one can collect information about the\n   credit-control server's billing models\
    \ and business relationships.\n   When third-party relays or proxy are involved,\
    \ the hop-by-hop\n   security does not necessarily provide sufficient protection\
    \ for\n   Diameter user session.  In some cases, it may be inappropriate to\n\
    \   send Diameter messages, such as CCR and CCA, containing sensitive\n   AVPs\
    \ via untrusted Diameter proxy agents, as there are no assurances\n   that third-party\
    \ proxies will not modify the credit-control commands\n   or AVP values.\n"
- title: 14.1.  Direct Connection with Redirects
  contents:
  - "14.1.  Direct Connection with Redirects\n   A Diameter credit-control agent cannot\
    \ always know whether agents\n   between it and the end user's Diameter credit-control\
    \ server are\n   reliable.  In this case, the Diameter credit-control agent doesn't\n\
    \   have a routing entry in its Diameter Routing Table (defined in\n   [DIAMBASE],\
    \ section 2.7) for the realm of the credit-control server\n   in the end user's\
    \ home domain.  The Diameter credit-control agent can\n   have a default route\
    \ configured to a local Redirect agent, and it\n   redirects the CCR message to\
    \ the redirect agent.  The local Redirect\n   agent then returns a redirect notification\
    \ (Result-code 3006,\n   DIAMETER_REDIRECT_INDICATION) to the credit-control agent,\
    \ as well as\n   Diameter credit-control server(s) information (Redirect-Host\
    \ AVP) and\n   information (Redirect-Host-Usage AVP) about how the routing entry\n\
    \   resulting from the Redirect-Host is to be used.  The Diameter\n   credit-control\
    \ agent then forwards the CCR message directly to one of\n   the hosts identified\
    \ by the CCA message from the redirect agent.  If\n   the value of the Redirect-Host-Usage\
    \ AVP is unequal to zero, all\n   following messages are sent to the host specified\
    \ in the Redirect-\n   Host AVP until the time specified by the Redirect-Max-Cache-Time\
    \ AVP\n   is expired.\n   There are some authorization issues even with redirects.\
    \  There may\n   be attacks toward nodes that have been properly authorized, but\
    \ that\n   abuse their authorization or have been compromised.  These issues are\n\
    \   discussed more widely in [DIAMEAP], section 8.\n"
- title: 15.  References
  contents:
  - '15.  References

    '
- title: 15.1.  Normative References
  contents:
  - "15.1.  Normative References\n   [DIAMBASE]  Calhoun, P., Loughney, J., Guttman,\
    \ E., Zorn, G., and J.\n               Arkko, \"Diameter Base Protocol\", RFC\
    \ 3588, September\n               2003.\n   [3GPPCHARG] 3rd Generation Partnership\
    \ Project; Technical\n               Specification Group Services and System Aspects,\
    \ Service\n               aspects; Charging and Billing, (release 5), 3GPP TS\n\
    \               22.115 v. 5.2.1, 2002-03.\n   [SIP]       Rosenberg, J., Schulzrinne,\
    \ H., Camarillo, G., Johnston,\n               A., Peterson, J., Sparks, R., Handley,\
    \ M., and E.\n               Schooler, \"SIP:  Session Initiation Protocol\",\
    \ RFC 3261,\n               June 2002.\n   [NAI]       Aboba, B. and M. Beadles,\
    \ \"The Network Access\n               Identifier\", RFC 2486, January 1999.\n\
    \   [E164]      Recommendation E.164/I.331 (05/97): The International\n      \
    \         Public Telecommunication Numbering Plan. 1997.\n   [CE164]     Complement\
    \ to ITU-T Recommendation E.164 (05/1997):\"List\n               of ITU-T Recommendation\
    \ E.164 assigned country codes\",\n               June 2000.\n   [E212]      Recommendation\
    \ E.212 (11/98): The international\n               identification plan for mobile\
    \ terminals and mobile\n               users. 1998.\n   [CE212]     Complement\
    \ to ITU-T Recommendation E.212 (11/1997):\" List\n               of mobile country\
    \ or geographical area codes\", February\n               1999.\n   [IANA]    \
    \  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n               IANA\
    \ Considerations Section in RFCs\", BCP 26, RFC 2434,\n               October\
    \ 1998.\n   [IPv4]      Postel, J., \"Internet Protocol\", STD 5, RFC 791,\n \
    \              September 1981.\n   [IPv6Addr]  Hinden, R. and S. Deering, \"Internet\
    \ Protocol Version 6\n               (IPv6) Addressing Architecture\", RFC 3513,\
    \ April 2003.\n   [KEYWORDS]  Bradner, S., \"Key words for use in RFCs to Indicate\n\
    \               Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [ISO4217]\
    \   Codes for the representation of currencies and funds,\n               International\
    \ Standard ISO 4217,2001\n   [NASREQ]    Calhoun, P., Zorn, G., Spence, D., and\
    \ D. Mitton,\n               \"Diameter Network Access Server Application\", RFC\
    \ 4005,\n               August 2005.\n   [AAATRANS]  Aboba, B. and J. Wood, \"\
    Authentication, Authorization and\n               Accounting (AAA) Transport Profile\"\
    , RFC 3539, June 2003.\n   [URL]       Berners-Lee, T., Masinter, L., and M. McCahill,\
    \ \"Uniform\n               Resource Locators (URL)\", RFC 1738, December 1994.\n\
    \   [RAD802.1X] Congdon, P., Aboba, B., Smith, A., Zorn, G., and J.\n        \
    \       Roese, \"IEEE 802.1X Remote Authentication Dial In User\n            \
    \   Service (RADIUS) Usage Guidelines\", RFC 3580, September\n               2003.\n\
    \   [EUI64]     IEEE, \"Guidelines for 64-bit Global Identifier (EUI-64)\n   \
    \            Registration Authority\",\n               http://standards.ieee.org/regauth/oui/tutorials/\n\
    \               EUI64.html March 1997.\n   [3GPPIMEI]  3rd Generation Partnership\
    \ Project; Technical\n               Specification Group Core Network, Numbering,\
    \ addressing\n               and identification, (release 5), 3GPP TS 23.003 v.\
    \ 5.8.0,\n               2003-12\n"
- title: 15.2.  Informative References
  contents:
  - "15.2.  Informative References\n   [RFC2866]   Rigney, C., \"RADIUS Accounting\"\
    , RFC 2866, June 2000.\n   [DIAMMIP]   Calhoun, P., Johansson, T., Perkins, C.,\
    \ Hiller, T., and\n               P. McCann, \"Diameter Mobile IPv4 Application\"\
    , RFC 4004,\n               August 2005.\n   [DIAMEAP]   Eronen, P., Hiller, T.,\
    \ and G. Zorn, \"Diameter Extensible\n               Authentication Protocol (EAP)\
    \ Application\", Work in\n               Progress.\n   [RFC3725]   Rosenberg,\
    \ J., Peterson, J., Schulzrinne, H., and G.\n               Camarillo, \"Best\
    \ Current Practices for Third Party Call\n               Control (3pcc) in the\
    \ Session Initiation Protocol (SIP)\",\n               BCP 85, RFC 3725, April\
    \ 2004.\n"
- title: 16.  Acknowledgements
  contents:
  - "16.  Acknowledgements\n   The authors would like to thank Bernard Aboba, Jari\
    \ Arkko, Robert\n   Ekblad, Pasi Eronen, Benny Gustafsson, Robert Karlsson, Avi\
    \ Lior,\n   Paco Marin, Jussi Maki, Jeff Meyer, Anne Narhi, John Prudhoe,\n  \
    \ Christopher Richards, Juha Vallinen, and Mark Watson for their\n   comments\
    \ and suggestions.\n"
- title: Appendix A.  Credit-Control Sequences
  contents:
  - 'Appendix A.  Credit-Control Sequences

    '
- title: A.1.  Flow I
  contents:
  - "A.1.  Flow I\n                         NAS\n   End User          (CC Client)\
    \         AAA Server           CC Server\n      |(1)User Logon      |(2)AA Request\
    \ (CC AVPs)                  |\n      |------------------>|------------------->|\
    \                    |\n      |                   |                    |(3)CCR(initial,\
    \ CC AVPs)\n      |                   |                    |------------------->|\n\
    \      |                   |                    | (4)CCA(Granted-Units)\n    \
    \  |                   |                    |<-------------------|\n      |  \
    \                 |(5)AA Answer(Granted-Units)              |\n      |(6)Access\
    \ granted  |<-------------------|                    |\n      |<----------------->|\
    \                    |                    |\n      |                   |     \
    \               |                    |\n      :                   :          \
    \          :                    :\n      |                   |(7)CCR(update,Used-Units)\
    \                |\n      |                   |------------------->|(8)CCR   \
    \           |\n      |                   |                    |   (update,Used-Units)\n\
    \      |                   |                    |------------------->|\n     \
    \ |                   |                    |(9)CCA(Granted-Units)\n      |   \
    \                |(10)CCA(Granted-Units)<------------------|\n      |        \
    \           |<-------------------|                    |\n      :             \
    \      :                    :                    :\n      |         (Auth. lifetime\
    \ expires)       |                    |\n      |                   |(11) AAR (CC\
    \ AVP)   |                    |\n      |                   |------------------->|\
    \                    |\n      |                   |          (12) AAA  |     \
    \               |\n      |                   |<-------------------|          \
    \          |\n      :                   :                    :               \
    \     :\n      :                   :                    :                    :\n\
    \      |(13) User logoff   |                    |                    |\n     \
    \ |------------------>|(14)CCR(term.,Used-Units)                |\n      |   \
    \                |------------------->|(15)CCR             |\n      |        \
    \           |                    |   (term.,Used-Units)\n      |             \
    \      |                    |------------------->|\n      |                  \
    \ |                    |            (16)CCA |\n      |                   |   \
    \         (17)CCA |<-------------------|\n      |                   |<-------------------|\
    \                    |\n      |                   |(18)STR             |     \
    \               |\n      |                   |------------------->|          \
    \          |\n      |                   |            (19)STA |               \
    \     |\n      |                   |<-------------------|                    |\n\
    \                            Figure A.1: Flow I\n   A credit-control flow for\
    \ Network Access Services prepaid is shown in\n   Figure A.1.  The Diameter [NASREQ]\
    \ is implemented in the Network\n   Access Server (NAS).  The focus of this flow\
    \ is in the credit\n   authorization.\n   The user logs on to the network (1).\
    \  The Diameter NAS sends a\n   Diameter AA-Request (AAR) to the home Diameter\
    \ AAA server.  The\n   credit-control client populates the AAR with the Credit-Control\
    \ AVP\n   set to CREDIT_AUTHORIZATION, and service-specific AVPs are included,\n\
    \   as usual [NASREQ].  The home Diameter AAA server performs service-\n   specific\
    \ Authentication and Authorization, as usual.  The home\n   Diameter AAA server\
    \ determines that the user is a prepaid user and\n   notices from the Credit-Control\
    \ AVP that the NAS has credit-control\n   capabilities.  It sends a Diameter Credit-Control-Request\
    \ with CC-\n   Request-Type set to INITIAL_REQUEST to the Diameter credit-control\n\
    \   server to perform credit authorization (3) and to establish a\n   credit-control\
    \ session.  (The home Diameter AAA server may forward\n   service-specific AVPs\
    \ received from the NAS as input for the rating\n   process.)  The Diameter credit-control\
    \ server checks the end user's\n   account balance, rates the service, and reserves\
    \ credit from the end\n   user's account.  The reserved quota is returned to the\
    \ home Diameter\n   AAA server in the Diameter Credit-Control-Answer (4).  The\
    \ home\n   Diameter AAA server sends the reserved quota to the NAS in the\n  \
    \ Diameter AA-Answer (AAA).  Upon successful AAA, the NAS starts the\n   credit-control\
    \ session and starts monitoring the granted units (5).\n   The NAS grants access\
    \ to the end user (6).  At the expiry of the\n   allocated quota, the NAS sends\
    \ a Diameter Credit-Control-Request with\n   CC-Request-Type set to UPDATE_REQUEST\
    \ to the Home Diameter AAA server\n   (7).  This message contains the units used\
    \ thus far.  The home\n   Diameter AAA server forwards the CCR to the Diameter\
    \ credit-control\n   server (8).  The Diameter credit-control server debits the\
    \ used units\n   from the end user's account and allocates a new quota that is\n\
    \   returned to the home Diameter AAA server in the Diameter Credit-\n   Control-Answer\
    \ (9).  The message is forwarded to the NAS (10).\n   During the ongoing credit-control\
    \ session, the authorization lifetime\n   expires, and the authorization/authentication\
    \ client in the NAS\n   performs service specific re-authorization to the home\
    \ Diameter AAA\n   server, as usual.  The credit-control client populates the\
    \ AAR with\n   the Credit-Control AVP set to RE_AUTHORIZATION, indicating that\
    \ the\n   credit-control server shall not be contacted, as the credit\n   authorization\
    \ is controlled by the burning rate of the granted units\n   (11).  The home Diameter\
    \ AAA server performs service-specific re-\n   authorization as usual and returns\
    \ the AA-Answer to the NAS (12).\n   The end user logs off from the network (13).\
    \  To debit the used units\n   from the end user's account and to stop the credit-control\
    \ session,\n   the NAS sends a Diameter Credit-Control-Request with CC-Request-Type\n\
    \   set to TERMINATION_REQUEST to the home Diameter AAA server (14).  The\n  \
    \ home Diameter AAA server forwards the CCR to the credit-control\n   server (15).\
    \  The Diameter credit-control server acknowledges the\n   session termination\
    \ by sending a Diameter Credit-Control-Answer to\n   the home Diameter AAA server\
    \ (16).  The home Diameter AAA server\n   forwards the answer to the NAS (17).\
    \  STR/STA takes place between the\n   NAS and home Diameter AAA server, as usual\
    \ (18-19).\n"
- title: A.2.  Flow II
  contents:
  - "A.2.  Flow II\n              SIP Proxy/Registrar   AAA\n        A           (CC\
    \ Client)     Server           B        CC Server\n        |(i)  REGISTER |  \
    \            |              |              |\n        |------------->|(ii)   \
    \       |              |              |\n        |              |------------->|\
    \              |              |\n        |              |authentication &    \
    \         |              |\n        |              |authorization |          \
    \    |              |\n        |              |<-------------|              |\
    \              |\n        |(iii)200 OK   |                             |     \
    \         |\n        |<-------------|                             |          \
    \    |\n        :              :                             :              :\n\
    \        |(1)  INVITE   |                                            :\n     \
    \   |------------->|\n        |              |(2)  CCR (Initial, SIP specific\
    \ AVP)        |\n        |              |------------------------------------------->|\n\
    \        |              |(3)  CCA (Granted-Units)                    |\n     \
    \   |              |<-------------------------------------------|\n        | \
    \             |(4)  INVITE                  |              |\n        |      \
    \        |---------------------------->|              |\n        :           \
    \   :                             :              :\n        |              |(5)\
    \  CCR (update, Used-Units)               |\n        |              |------------------------------------------->|\n\
    \        |              |(6)  CCA (Granted-Units)                    |\n     \
    \   |              |<-------------------------------------------|\n        : \
    \             :                             :              :\n        |(7)  BYE\
    \      |                             |              |\n        |------------->|\
    \                             |              |\n        |              |(8)  BYE\
    \                     |              |\n        |              |---------------------------->|\
    \              |\n        |              |(9)  CCR (termination, Used-Units) \
    \         |\n        |              |------------------------------------------->|\n\
    \        |              |(10) CCA ()                                 |\n     \
    \   |              |<-------------------------------------------|\n        | \
    \             |                             |              |\n               \
    \            Figure A.2: Flow II\n   This is an example of Diameter credit-control\
    \ for SIP sessions.\n   Although the flow focuses on illustrating the usage of\
    \ credit-control\n   messages, the SIP signaling is inaccurate, and the diagram\
    \ is not by\n   any means an attempt to define a service provider's SIP network.\n\
    \   However, for the sake of this example, some assumptions are made\n   below.\n\
    \   Typically, prepaid services based, for example, on time usage for SIP\n  \
    \ session require an entity in the service provider network to\n   intercept all\
    \ the requests within the SIP dialog in order to detect\n   events, such as session\
    \ establishment and session release, that are\n   essential to perform credit-control\
    \ operations with the credit-\n   control server.  Therefore, in this example,\
    \ it is assumed that the\n   SIP Proxy adds a Record-Route header in the initial\
    \ SIP INVITE to\n   make sure that all the future requests in the created dialog\
    \ traverse\n   through it (for the definitions of 'Record-Route' and 'dialog'\
    \ please\n   refer to [SIP]).  Finally, the degree of credit-control measuring\
    \ of\n   the media by the proxy depends on the business model design used in\n\
    \   setting up the end system and proxies in the SIP network.\n   The end user\
    \ (SIP User Agent A) sends REGISTER with credentials (i).\n   The SIP Proxy sends\
    \ a request to the home AAA server to perform\n   Multimedia authentication and\
    \ authorization by using, for instance,\n   Diameter Multimedia application (ii).\
    \  The home AAA server checks\n   that the credentials are correct and checks\
    \ the user profile.\n   Eventually, 200 OK response (iii) is sent to the UA. \
    \ Note that the\n   Authentication and Authorization is valid for the registration\n\
    \   validity period duration (i.e., until re-registration is performed).\n   Several\
    \ SIP sessions may be established without re-authorization.\n   UA A sends an\
    \ INVITE (1).  The SIP Proxy sends a Diameter Credit-\n   Control-Request (INITIAL_REQUEST)\
    \ to the Diameter credit-control\n   server (2).  The Credit-Control-Request contains\
    \ information obtained\n   from the SIP signaling describing the requested service\
    \ (e.g.,\n   calling party, called party, Session Description Protocol\n   attributes).\
    \  The Diameter credit-control server checks the end\n   user's account balance,\
    \ rates the service, and reserves credit from\n   the end user's account.  The\
    \ reserved quota is returned to the SIP\n   Proxy in the Diameter Credit-Control-Answer\
    \ (3).  The SIP Proxy\n   forwards the SIP INVITE to UA B (4).  B's phone rings,\
    \ and B answers.\n   The media flows between them, and the SIP Proxy starts measuring\
    \ the\n   quota.  At the expiry of the allocated quota, the SIP Proxy sends a\n\
    \   Diameter Credit-Control-Request (UPDATE_REQUEST) to the Diameter\n   credit-control\
    \ server (5).  This message contains the units used thus\n   far.  The Diameter\
    \ credit-control server debits the used units from\n   the end user's account\
    \ and allocates new credit that is returned to\n   the SIP Proxy in the Diameter\
    \ Credit-Control-Answer (6).  The end\n   user terminates the service by sending\
    \ a BYE (7).  The SIP Proxy\n   forwards the BYE message to UA B (8) and sends\
    \ a Diameter Credit-\n   Control-Request (TERMINATION_REQUEST) to the credit-control\
    \ server\n   (9).  The Diameter credit-control server acknowledges the session\n\
    \   termination by sending a Diameter Credit-Control-Answer to the SIP\n   Proxy\
    \ (10).\n"
- title: A.3.  Flow III
  contents:
  - "A.3.  Flow III\n                          MMS Server\n             A        \
    \   (CC Client)           B           CC Server\n             |(1) Send MMS  \
    \  |                |                |\n             |--------------->|      \
    \          |                |\n             |                |(2)  CCR (event,\
    \ DIRECT_DEBITING,|\n             |                |          MMS specific AVP)\
    \      |\n             |                |-------------------------------->|\n\
    \             |                |(3)  CCA (Granted-Units)         |\n         \
    \    |                |<--------------------------------|\n             |(4) Send\
    \ MMS Ack|                |                |\n             |<---------------|\
    \                |                |\n             |                |(5) Notify\
    \ MMS  |                |\n             |                |--------------->|  \
    \              |\n             :                :                :           \
    \     :\n             |                |(6) Retrieve MMS|                |\n \
    \            |                |<---------------|                |\n          \
    \   |                |(7) Retrieve MMS|                |\n             |     \
    \           |    Ack         |                |\n             |              \
    \  |--------------->|                |\n             |                |      \
    \          |                |\n                             Figure A.3: Flow III\n\
    \   A credit-control flow for Multimedia Messaging Services is shown in\n   Figure\
    \ A.3.  The sender is charged as soon as the messaging server\n   successfully\
    \ stores the message.\n   The end user A sends a Multimedia Message (MMS) to the\
    \ MMS server\n   (1).  The MMS server stores the message and sends a Diameter\
    \ Credit-\n   Control-Request (EVENT_REQUEST with Requested-Action DIRECT_DEBITING)\n\
    \   to the Diameter credit-control server (2).  The Credit-Control-\n   Request\
    \ contains information about the MMS message (e.g., size,\n   recipient address,\
    \ image coding type).  The Diameter credit-control\n   server checks the end user's\
    \ account balance, rates the service, and\n   debits the service from the end\
    \ user's account.  The granted quota is\n   returned to the MMS server in the\
    \ Diameter Credit-Control-Answer (3).\n   The MMS server acknowledges the successful\
    \ reception of the MMS\n   message (4).  The MMS Server notifies the recipient\
    \ about the new MMS\n   (5), and end user B retrieves the message from the MMS\
    \ message store\n   (6),(7).\n"
- title: A.4.  Flow IV
  contents:
  - "A.4.  Flow IV\n                          MMS Server\n      Content Server   \
    \  (CC Client)           B           CC Server\n             |(1) Send MMS   \
    \ |                |                |\n             |--------------->|       \
    \         |                |\n             |                |(2)  CCR (event,\
    \ CHECK_BALANCE,  |\n             |                |          MMS specific AVP)\
    \      |\n             |                |-------------------------------->|\n\
    \             |                |(3)  CCA (ENOUGH_CREDIT)         |\n         \
    \    |                |<--------------------------------|\n             |(4) Send\
    \ MMS Ack|                |                |\n             |<---------------|\
    \                |                |\n             |                |(5) Notify\
    \ MMS  |                |\n             |                |--------------->|  \
    \              |\n             :                :                :           \
    \     :\n             |                |(6) Retrieve MMS|                |\n \
    \            |                |<---------------|                |\n          \
    \   |                |(7)  CCR (event, DIRECT_DEBITING,|\n             |     \
    \           |          MMS specific AVP)      |\n             |              \
    \  |-------------------------------->|\n             |                |(8)  CCA\
    \ (Granted-Units)         |\n             |                |<--------------------------------|\n\
    \             |                |(9) Retrieve MMS|                |\n         \
    \    |                |    Ack         |                |\n             |    \
    \            |--------------->|                |\n             |             \
    \   |                |                |\n                              Figure\
    \ A.4: Flow IV\n   This is an example of Diameter credit-control for direct debiting\n\
    \   using the Multimedia Messaging Service environment.  Although the\n   flow\
    \ focuses on illustrating the usage of credit-control messages,\n   the MMS signaling\
    \ is inaccurate, and the diagram is not by any means\n   an attempt to define\
    \ any service provider's MMS configuration or\n   billing model.\n   A credit-control\
    \ flow for Multimedia Messaging Service is shown in\n   Figure A.4.  The recipient\
    \ is charged at the message delivery.\n   A content server sends a Multimedia\
    \ Message (MMS) to the MMS server\n   (1) that stores the message.  The message\
    \ recipient will be charged\n   for the MMS message in this case.  As there can\
    \ be a substantially\n   long time between the receipt of the message at the MMS\
    \ server and\n   the actual retrieval of the message, the MMS server does not\n\
    \   establish any credit-control session to the Diameter credit-control\n   server\
    \ but performs first only a balance check (without any credit\n   reservation)\
    \ by sending a Diameter Credit-Control-Request\n   (EVENT_REQUEST with Requested-Action\
    \ CHECK_BALANCE) to verify that\n   end user B can cover the cost for the MMS\
    \ (2).  The Diameter credit-\n   control server checks the end user's account\
    \ balance and returns the\n   answer to the MMS server in the Diameter Credit-Control-Answer\
    \ (3).\n   The MMS server acknowledges the successful reception of the MMS\n \
    \  message (4).  The MMS server notifies the recipient of the new MMS\n   (5),\
    \ and after some time end user B retrieves the message from the\n   MMS message\
    \ store (6).  The MMS server sends a Diameter Credit-\n   Control-Request (EVENT_REQUEST\
    \ with Requested-Action:\n   DIRECT_DEBITING) to the Diameter credit-control server\
    \ (7).  The\n   Credit-Control-Request contains information about the MMS message\n\
    \   (e.g., size, recipient address, coding type).  The Diameter credit-\n   control\
    \ server checks the end user's account balance, rates the\n   service, and debits\
    \ the service from the end user's account.  The\n   granted quota is returned\
    \ to the MMS server in the Diameter Credit-\n   Control-Request (8).  The MMS\
    \ is transferred to end user B (9).\n   Note that the transfer of the MMS message\
    \ can take an extended time\n   and can fail, in which case a recovery action\
    \ is needed.  The MMS\n   server should return the already debited units to the\
    \ user's account\n   by using the REFUND action described in section 6.4.\n"
- title: A.5.  Flow V
  contents:
  - "A.5.  Flow V\n                        SIP Controller\n             A        \
    \   (CC Client)           B           CC Server\n             |(1)INVITE B(SDP)|\
    \                |                |\n             |--------------->|         \
    \       |                |\n             |                |(2)  CCR (event, PRICE_ENQUIRY,\
    \  |\n             |                |          SIP specific AVPs)     |\n    \
    \         |                |-------------------------------->|\n             |\
    \                |(3)  CCA (Cost-Information)      |\n             |         \
    \       |<--------------------------------|\n             | (4)MESSAGE(URL)| \
    \               |                |\n             |<---------------|          \
    \      |                |\n             |(5)HTTP GET     |                |  \
    \              |\n             |--------------->|                |           \
    \     |\n             |(6)HTTP POST    |                |                |\n \
    \            |--------------->|(7)INVITE(SDP)  |                |\n          \
    \   |                |--------------->|                |\n             |     \
    \           |      (8)200 OK |                |\n             |      (9)200 OK\
    \ |<---------------|                |\n             |<---------------|       \
    \         |                |\n                            Figure A.5: Flow V\n\
    \   This is an example of Diameter credit-control for SIP sessions.\n   Although\
    \ the flow focuses on illustrating the usage of credit-control\n   messages, the\
    \ SIP signaling is inaccurate, and the diagram is not by\n   any means an attempt\
    \ to define a service provider's SIP network.\n   Figure A.5 is an example of\
    \ Advice of Charge (AoC) service for SIP\n   call.  User A can be either a postpaid\
    \ or prepaid subscriber using\n   the AoC service.  It is assumed that the SIP\
    \ controller also has HTTP\n   capabilities and delivers an interactive AoC web\
    \ page with, for\n   instance, the cost information, the details of the call derived\
    \ from\n   the SDP, and a button to accept/not accept the charges.  (There may\n\
    \   be many other ways to deliver AoC information; however, this flow\n   focuses\
    \ on the use of the credit-control messages.)  The user has\n   been authenticated\
    \ and authorized prior to initiating the call and\n   subscribed to AoC service.\n\
    \   UA A sends an INVITE with SDP to B (1).  The SIP controller\n   determines\
    \ that the user is subscribed to AoC service and sends a\n   Diameter Credit-Control-Request\
    \ (EVENT_REQUEST with Requested-Action:\n   PRICE_ENQUIRY) to the Diameter credit-control\
    \ server (2).  The\n   Credit-Control-Request contains SIP specific AVPs derived\
    \ from the\n   SIP signaling, describing the requested service (e.g., calling\
    \ party,\n   called party, Session Description Protocol attributes).  The Diameter\n\
    \   credit-control server determines the cost of the service and returns\n   the\
    \ Credit-Control-Answer including the Cost-Information AVP (3).\n   The SIP controller\
    \ manufactures the AoC web page with information\n   received in SIP signaling\
    \ and with the cost information received from\n   the credit-control server. \
    \ Then it sends a SIP MESSAGE that contains\n   a URL pointing to the AoC information\
    \ web page (4).  At the receipt\n   of the SIP MESSAGE, A's UA automatically invokes\
    \ the web browser that\n   retrieves the AoC information (5).  The user clicks\
    \ on a proper\n   button and accepts the charges (6).  The SIP controller continues\
    \ the\n   session and sends the INVITE to the B party, which accepts the call\n\
    \   (7,8,9).\n"
- title: A.6.  Flow VI
  contents:
  - "A.6.  Flow VI\n                             Gaming Server\n      End User   \
    \             (CC Client)              CC Server\n         |  (1)Service Delivery\
    \   |                        |\n         |<---------------------->|          \
    \              |\n         :                        :                        :\n\
    \         :                        :                        :\n         |    \
    \                    |(2)CCR(event,REFUND,Requested-\n         |             \
    \           |Service-Unit,Service-Parameter-Info)\n         |                \
    \        |----------------------->|\n         |                        |  (3)CCA(Cost-Information)\n\
    \         |                        |<-----------------------|\n         |    \
    \    (4)Notification |                        |\n         |<-----------------------|\
    \                        |\n                          Figure A.6: Flow VI\n  \
    \ Figure A.6 illustrates a credit-control flow for the REFUND case.  It\n   is\
    \ assumed that there is a trusted relationship and secure connection\n   between\
    \ the Gaming server and the Diameter credit-control server.\n   The end user may\
    \ be a prepaid subscriber or a postpaid subscriber.\n   While the end user is\
    \ playing the game (1), she enters a new level\n   that entitles her to a bonus.\
    \  The Gaming server sends a Diameter\n   Credit-Control-Request (EVENT_REQUEST\
    \ with Requested-Action:\n   REFUND_ACCOUNT) to the Diameter credit-control server\
    \ (2).  The\n   Credit-Control-Request Request contains the Requested-Service-Unit\n\
    \   AVP with the CC-Service-Specific-Units containing the number of\n   points\
    \ the user just won.  The Service-Parameter-Info AVP is also\n   included in the\
    \ request and specifies the service event to be rated\n   (e.g., Tetris Bonus).\
    \  From information received, the Diameter\n   credit-control server determines\
    \ the amount to be credited, refunds\n   the user's account, and returns the Credit-Control-Answer,\
    \ including\n   the Cost-Information AVP (3).  The Cost-Information indicates\
    \ the\n   credited amount.  At the first opportunity, the Gaming server\n   notifies\
    \ the end user of the credited amount (4).\n"
- title: A.7.  Flow VII
  contents:
  - "A.7.  Flow VII\n                  SIP Controller    Top-Up\n        A       \
    \   (CC Client)      Server           B      CC Server\n        |            \
    \   |              |             |              |\n        |               | (1)\
    \ CCR(Update,Used-Unit)  |              |\n        |               |------------------------------------------>|\n\
    \        |               |              (2) CCA(Final-Unit, Redirect)|\n     \
    \   |               |<------------------------------------------|\n        : \
    \              :              :             :              :\n        :      \
    \         :              :             :              :\n        |           \
    \    | (3) CCR(Update, Used-Units)|              |\n        |               |------------------------------------------>|\n\
    \        |               | (3a)INVITE(\"hold\")         |              |\n   \
    \     |               |--------------------------->|              |\n        |\
    \               |              |      (4) CCA(Validity-Time)|\n        |     \
    \          |<------------------------------------------|\n        |     (5)INVITE\
    \ | (6)INVITE    |             |              |\n        |<--------------|------------->|\
    \             |              |\n        |            (7)RTP            |     \
    \        |              |\n        |..............................|          \
    \   |              |\n        |               |       (8)BYE |             | \
    \             |\n        |               |<-------------|             |      \
    \        |\n        |               | (9)CCR(Update)             |           \
    \   |\n        |               |------------------------------------------>|\n\
    \        |               |                     (10)CCA(Granted-Unit) |\n     \
    \   |               |<------------------------------------------|\n        | \
    \   (12)INVITE | (11)INVITE                 |              |\n        |<--------------|--------------------------->|\
    \              |\n                           Figure A.7: Flow VII\n   Figure A.7\
    \ is an example of the graceful service termination for a\n   SIP call.  It is\
    \ assumed that the call is set up so that the\n   controller is in the call as\
    \ a B2BUA (Back to Back User Agent)\n   performing third-party call control (3PCC).\
    \  Note that the SIP\n   signaling is inaccurate, as the focus of this flow is\
    \ in the graceful\n   service termination and credit-control authorization.  The\
    \ best\n   practice for 3PCC is defined in [RFC3725].\n   The call is ongoing\
    \ between users A and B; user A has a prepaid\n   subscription.  At the expiry\
    \ of the allocated quota, the SIP\n   controller sends a Diameter Credit-Control-Request\
    \ (UPDATE_REQUEST)\n   to the Diameter credit-control server (1).  This message\
    \ contains the\n   units used thus far.  The Diameter credit-control server debits\
    \ the\n   used units from the end user's account and allocates the final quota\n\
    \   returned to the SIP controller in the Diameter Credit-Control-Answer\n   (2).\
    \  This message contains the Final-Unit-Indication AVP with the\n   Final-Unit-Action\
    \ set to REDIRECT, the Redirect-Address-Type set to\n   SIP URI, and the Redirect-Server-Address\
    \ set to the Top-up server\n   name (e.g., sip:sip-topup-server@domain.com). \
    \ At the expiry of the\n   final allocated quota, the SIP controller sends a Diameter\
    \ Credit-\n   Control-Request (UPDATE_REQUEST) to the Diameter credit-control\n\
    \   server (3) and places the called party on \"hold\" by sending an INVITE\n\
    \   with the appropriate connection address in the SDP (3a).  The\n   Credit-Control-Request\
    \ message contains the units used thus far.  The\n   Diameter credit-control server\
    \ debits the used units from the end\n   user's account but does not make any\
    \ credit reservation.  The\n   Credit-Control-Answer message, which contains the\
    \ Validity-Time to\n   supervise the graceful service termination, is returned\
    \ to the SIP\n   controller (4).  The SIP controller establishes a SIP session\
    \ between\n   the prepaid user and the Top-up server (5, 6).  The Top-up server\n\
    \   plays an announcement and prompts the user to enter a credit card\n   number\
    \ and the amount of money to be used to replenish the account\n   (7).  The Top-up\
    \ server validates the credit card number and\n   replenishes the user's account\
    \ (using some means outside the scope of\n   this specification) and releases\
    \ the SIP session (8).  The SIP\n   controller can now assume that communication\
    \ between the prepaid user\n   and the Top-up server took place.  It sends a spontaneous\
    \ Credit-\n   Control-Request (UPDATE_REQUEST) to the Diameter credit-control\n\
    \   server to check whether the account has been replenished (9).  The\n   Diameter\
    \ credit-control server reserves credit from the end user's\n   account and returns\
    \ the reserved quota to the SIP controller in the\n   Credit-Control-Answer (10).\
    \  At this point, the SIP controller re-\n   connects the caller and the called\
    \ party (11,12).\n"
- title: A.8.  Flow VIII
  contents:
  - "A.8.  Flow VIII\n                         NAS                           Top-up\
    \      CC\n   End-User         (CC Client)          AAA Server    Server    Server\n\
    \     |(1)User Logon      |(2)AA Request (CC AVPs)        |         |\n     |------------------>|------------------->|\
    \          |         |\n     |                   |                    |(3)CCR(initial,\
    \ CC AVPs)\n     |                   |                    |------------------->|\n\
    \     |                   |                    |(4)CCA(Final-Unit,  |\n     |\
    \                   |                    |      Validity-Time)|\n     |      \
    \             |                    |<-------------------|\n     |            \
    \       |(5)AA Answer(Final-Unit,Validity-Time)   |\n     |(6)Limited Access \
    \ |<-------------------|          |         |\n     |      granted      |    \
    \                |          |         |\n     |<----------------->|          \
    \          |          |         |\n     |                   |                \
    \    |          |         |\n     |   (7)TCP/HTTP     |        (8)TCP/HTTP   \
    \         |         |\n     |<----------------->|<----------------------------->|\
    \         |\n     |                 (9) Replenish account             |      \
    \   |\n     |<------------------------------------------------->|         |\n\
    \     |                   |                    |            (10)RAR |\n     |\
    \                   |<-------------------|<-------------------|\n     |      \
    \             | (11) RAA           |                    |\n     |            \
    \       |------------------->|------------------->|\n     |                  \
    \ |(12)CCR(update)     |                    |\n     |                   |------------------->|(13)CCR(Update)\
    \     |\n     |                   |                    |------------------->|\n\
    \     |                   |                    |(14)CCA(Granted-Units)\n     |\
    \                   |(15)CCA(Granted-Units)<------------------|\n     |      \
    \             |<-------------------|                    |\n                  \
    \       Figure A.8: Flow VIII\n   Figure A.8 is an example of the graceful service\
    \ termination\n   initiated when the first interrogation takes place because the\
    \ user's\n   account is empty.  In this example, the credit-control server\n \
    \  supports the server-initiated credit re-authorization.  The Diameter\n   [NASREQ]\
    \ is implemented in the Network Access Server (NAS).\n   The user logs on to the\
    \ network (1).  The Diameter NAS sends a\n   Diameter AA-Request to the home Diameter\
    \ AAA server.  The credit-\n   control client populates the AAR with the Credit-Control\
    \ AVP set to\n   CREDIT_AUTHORIZATION, and service specific AVPs are included,\
    \ as\n   usual [NASREQ].  The home Diameter AAA server performs service\n   specific\
    \ Authentication and Authorization, as usual.  The home\n   Diameter AAA server\
    \ determines that the user has a prepaid\n   subscription and notices from the\
    \ Credit-Control AVP that the NAS has\n   credit-control capabilities.  It sends\
    \ a Diameter Credit-Control-\n   Request with CC-Request-Type set to INITIAL_REQUEST\
    \ to the Diameter\n   credit-control server to perform credit authorization (3)\
    \ and to\n   establish a credit-control session.  (The home Diameter AAA server\n\
    \   may forward service specific AVPs received from the NAS as input for\n   the\
    \ rating process.)  The Diameter credit-control server checks the\n   end user's\
    \ account balance, determines that the account cannot cover\n   the cost of the\
    \ service, and initiates the graceful service\n   termination.  The Credit-Control-Answer\
    \ is returned to the home\n   Diameter AAA server (4).  This message contains\
    \ the Final-Unit-\n   Indication AVP and the Validity-Time AVP set to a reasonable\
    \ amount\n   of time to give the user a chance to replenish his/her account (e.g.,\n\
    \   10 minutes).  The Final-Unit-Indication AVP includes the Final-Unit-\n   Action\
    \ set to REDIRECT, the Redirect-Address-Type set to URL, and the\n   Redirect-Server-Address\
    \ set to the HTTP Top-up server name.  The home\n   Diameter AAA server sends\
    \ the received credit-control AVPs to the NAS\n   in the Diameter AA-Answer (5).\
    \  Upon successful AAA, the NAS starts\n   the credit-control session and immediately\
    \ starts the graceful\n   service termination, as instructed by the server.  The\
    \ NAS grants\n   limited access to the user (6).  The HTTP client software running\
    \ in\n   the user's device opens the transport connection redirected by the\n\
    \   NAS to the Top-up server (7,8).  The user is displayed an appropriate\n  \
    \ web page on which to enter the credit card number, and the amount of\n   money\
    \ to be used to replenish the account, and with a notification\n   message that\
    \ she is granted unlimited access if the replenishment\n   operation will be successfully\
    \ executed within the next, for example,\n   10 minutes.  The Top-up server validates\
    \ the credit card number and\n   replenishes the user's account (using some means\
    \ outside the scope of\n   this specification)(9).  After successful account top-up,\
    \ the\n   credit-control server sends a Re-Auth-Request message to the NAS\n \
    \  (10).  The NAS acknowledges the request by returning the Re-Auth-\n   Answer\
    \ message (11) and initiates the credit re-authorization by\n   sending a Credit-Control-request\
    \ (UPDATE_REQUEST) to the Diameter\n   credit-control server (12,13).\n   The\
    \ Diameter credit-control server reserves credit from the end\n   user's account\
    \ and returns the reserved quota to the NAS via the home\n   Diameter AAA server\
    \ in the Credit-Control-Answer (14,15).  The NAS\n   removes the restriction placed\
    \ by the graceful service termination\n   and starts monitoring the granted units.\n"
- title: A.9.  Flow IX
  contents:
  - "A.9.  Flow IX\n   The Diameter credit-control application defines the Multiple-\n\
    \   Services-Credit-Control AVP that can be used to support independent\n   credit-control\
    \ of multiple services in a single credit-control (sub-)\n   session for service\
    \ elements that have such capabilities.  It is\n   possible to request and allocate\
    \ resources as a credit pool that is\n   shared between services or rating groups.\n\
    \   The flow example hereafter illustrates a usage scenario where the\n   credit-control\
    \ client and server support independent credit-control\n   of multiple services,\
    \ as defined in section 5.1.2.  It is assumed\n   that Service-Identifiers, Rating-Groups,\
    \ and their associated\n   parameters (e.g., IP 5-tuple) are locally configured\
    \ in the service\n   element or provisioned by an entity other than the credit-control\n\
    \   server.\n   End User         Service Element                           CC\
    \ Server\n                       (CC client)\n      |(1)User logon      |    \
    \                                     |\n      |------------------>|(2)CCR(initial,\
    \ Service-Id access,       |\n      |                   |        Access specific\
    \ AVPs,            |\n      |                   |        Multiple-Service-Indicator)\
    \      |\n      |                   |---------------------------------------->|\n\
    \      |                   |(3)CCA(Multiple-Services-CC (            |\n     \
    \ |                   |        Granted-Units(Total-Octets),     |\n      |   \
    \                |        Service-Id access,               |\n      |        \
    \           |        Validity-time,                   |\n      |             \
    \      |        G-S-U-Pool-Reference(Pool-Id 1,  |\n      |                  \
    \ |          Multiplier 10)))               |\n      |                   |<----------------------------------------|\n\
    \      :                   :                                         :\n     \
    \ |(4)Service-Request (Service 1)                               |\n      |------------------>|(5)CCR(update,\
    \ Multiple-Services-CC(     |\n      |                   |        Requested-Units(),\
    \ Service-Id 1, |\n      |                   |        Rating-Group 1))       \
    \          |\n      |                   |---------------------------------------->|\n\
    \      |                   |(6)CCA(Multiple-Services-CC (            |\n     \
    \ |                   |        Granted-Units(Time),             |\n      |   \
    \                |        Rating-Group 1,                  |\n      |        \
    \           |        G-S-U-Pool-Reference(Pool-Id 1,  |\n      |             \
    \      |          Multiplier 1)))                |\n      |                  \
    \ |<----------------------------------------|\n      :                   :   \
    \                                      :\n      |(7)Service-Request (Service 2)\
    \                               |\n      |------------------>|               \
    \                          |\n      :                   :                    \
    \                     :\n      :                   :                         \
    \                :\n      |(8)Service-Request (Service 3&4)                  \
    \           |\n      |------------------>|(9)CCR(update, Multiple-Services-CC\
    \ (    |\n      |                   |        Requested-Units(), Service-Id 3,\
    \ |\n      |                   |        Rating-Group 2),                 |\n \
    \     |                   |        Multiple-Services-CC (           |\n      |\
    \                   |        Requested-Units(), Service-Id 4, |\n      |     \
    \              |        Rating-Group 3))                 |\n      |          \
    \         |---------------------------------------->|\n      |               \
    \    |(10)CCA(Multiple-Services-CC (           |\n      |                   |\
    \        Granted-Units(Total-Octets),     |\n      |                   |     \
    \   Service-Id 3, Rating-Group 2,    |\n      |                   |        Validity-time,\
    \                   |\n      |                   |        G-S-U-Pool-Reference(Pool-Id\
    \ 2,  |\n      |                   |          Multiplier 2)),                |\n\
    \      |                   |        Multiple-Services-CC (           |\n     \
    \ |                   |        Granted-Units(Total-Octets),     |\n      |   \
    \                |        Service-Id 4, Rating-Group 3     |\n      |        \
    \           |        Validity-Time,                   |\n      |             \
    \      |        Final-Unit-Ind.(Terminate),      |\n      |                  \
    \ |        G-S-U-Pool-Reference(Pool-Id 2,  |\n      |                   |   \
    \       Multiplier 5)))                |\n      |                   |<----------------------------------------|\n\
    \      :                   :                                         :\n     \
    \ :                   :                                         :\n      | +--------------+\
    \  |                                         |\n      | |Validity time |  |(11)CCR(update,\
    \                          |\n      | |expires for   |  |        Multiple-Services-CC\
    \ (           |\n      | |Service-Id    |  |        Requested-Unit(),        \
    \        |\n      | | access       |  |        Used-Units(In-Octets,Out-Octets),|\n\
    \      | +--------------+  |        Service-Id access))              |\n     \
    \ |                   |---------------------------------------->|\n      |   \
    \                |(12)CCA(Multiple-Services-CC (           |\n      |        \
    \           |        Granted-Units(Total-Octets),     |\n      |             \
    \      |        Service-Id access,               |\n      |                  \
    \ |        Validity-Time,                   |\n      |                   |   \
    \     G-S-U-Pool-Reference(Pool-Id 1,  |\n      |                   |        \
    \  Multiplier 10)))               |\n      |                   |<----------------------------------------|\n\
    \      :                   :                                         :\n     \
    \ :                   :                                         :\n      | +--------------+\
    \  |                                         |\n      | |Total Quota   |  |(13)CCR(update,\
    \                          |\n      | |elapses for   |  |       Multiple-Services-CC\
    \ (            |\n      | |pool 2:       |  |        Requested-Unit(),       \
    \         |\n      | |service 4 not |  |        Used-Units(In-Octets,Out-Octets),|\n\
    \      | |allowed,      |  |        Service-Id 3, Rating-group 2),   |\n     \
    \ | |service 3 cont|  |       Multiple-Services-CC (            |\n      | +--------------+\
    \  |        Used-Units(In-Octets,Out-Octets),|\n      |                   |  \
    \      Service-Id 4, Rating-Group 3))   |\n      |                   |---------------------------------------->|\n\
    \      |                   |(14)CCA(Multiple-Services-CC (           |\n     \
    \ |                   |        Result-Code 4011,                |\n      |   \
    \                |        Service-Id 3))                   |\n      |        \
    \           |<----------------------------------------|\n      :             \
    \      :                                         :\n      :                  \
    \ :                                         :\n      |(15) User logoff   |   \
    \                                      |\n      |------------------>|(16)CCR(term,\
    \                            |\n      |                   |       Multiple-Services-CC\
    \ (            |\n      |                   |        Used-Units(In-Octets,Out-Octets),|\n\
    \      |                   |        Service-Id access),              |\n     \
    \ |                   |       Multiple-Services-CC (            |\n      |   \
    \                |        Used-Units(Time),                |\n      |        \
    \           |        Service-Id 1, Rating-Group 1),   |\n      |             \
    \      |       Multiple-Services-CC (            |\n      |                  \
    \ |        Used-Units(Time),                |\n      |                   |   \
    \     Service-Id 2, Rating-Group 1))   |\n      |                   |---------------------------------------->|\n\
    \      |                   |(17)CCA(term)                            |\n     \
    \ |                   |<----------------------------------------|\n      Figure\
    \ A.9: Flow example independent credit-control of multiple\n                 \
    \ services in a  credit-control (sub-)Session\n   The user logs on to the network\
    \ (1).  The service element sends a\n   Diameter Credit-Control-Request with CC-Request-Type\
    \ set to\n   INITIAL_REQUEST to the Diameter credit-control server to perform\n\
    \   credit authorization for the bearer service (e.g., Internet access\n   service)\
    \ and to establish a credit-control session (2).  In this\n   message, the credit-control\
    \ client indicates support for independent\n   credit-control of multiple services\
    \ within the session by including\n   the Multiple-Service-Indicator AVP.  The\
    \ Diameter credit-control\n   server checks the end user's account balance, with\
    \ rating information\n   received from the client (i.e., Service-Id and access\
    \ specific AVPs),\n   rates the request, and reserves credit from the end user's\
    \ account.\n   Suppose that the server reserves $5 and determines that the cost\
    \ is\n   $1/MB.  It then returns to the service element a Credit-Control-\n  \
    \ Answer message that includes the Multiple-Services-Credit-Control AVP\n   with\
    \ a quota of 5MB associated to the Service-Id (access), to a\n   multiplier value\
    \ of 10, and to the Pool-Id 1 (3).\n   The user uses Service 1 (4).  The service\
    \ element sends a Diameter\n   Credit-Control-Request with CC-Request-Type set\
    \ to UPDATE_REQUEST to\n   the credit-control server to perform credit authorization\
    \ for service\n   1 (5).  This message includes the Multiple-Services-Credit-Control\n\
    \   AVP to request service units for Service 1 that belong to Rating-\n   Group\
    \ 1.  The Diameter credit-control server determines that Service\n   1 draws credit\
    \ resources from the same account as the access service\n   (i.e., pool 1).  It\
    \ rates the request according to Service-\n   Id/Rating-Group and updates the\
    \ existing reservation by requesting\n   more credit.  Suppose that the server\
    \ reserves $5 more (now the\n   reservation is $10) and determines that the cost\
    \ is $0.1/minute.  The\n   server authorizes the whole Rating-Group.  It then\
    \ returns to the\n   service element a Credit-Control-Answer message that includes\
    \ the\n   Multiple-Services-Credit-Control AVP with a quota of 50min.\n   associated\
    \ to the Rating-Group 1, to a multiplier value of 1, and to\n   the Pool-Id 1\
    \ (6).  The client adjusts the total amount of resources\n   for pool 1 according\
    \ the received quota, which gives S for Pool 1 =\n   100.\n   The user uses Service\
    \ 2, which belongs to the authorized Rating-\n   Group, 1 (7).  Resources are\
    \ then consumed from the pool 1.\n   The user now requests Services 3 and 4 as\
    \ well, which are not\n   authorized (8).  The service element sends a Diameter\
    \ Credit-\n   Control-Request with CC-Request-Type set to UPDATE_REQUEST to the\n\
    \   credit-control server in order to perform credit authorization for\n   Services\
    \ 3 and 4 (9).  This message includes two instances of the\n   Multiple-Services-Credit-Control\
    \ AVP to request service units for\n   Service 3 that belong to Rating-Group 2\
    \ and for Service 4 that belong\n   to Rating-Group 3.  The Diameter credit-control\
    \ server determines\n   that Services 3 and 4 draw credit resources from another\
    \ account\n   (i.e., pool 2).  It checks the end user's account balance and,\n\
    \   according to Service-Ids/Rating-Groups information, rates the\n   request.\
    \  Then it reserves credit from pool 2.\n   For example, the server reserves $5\
    \ and determines that Service 3\n   costs $0.2/MB and Service 4 costs $0.5/MB.\
    \  The server authorizes\n   only Services 3 and 4.  It returns to the service\
    \ element a Credit-\n   Control-Answer message that includes two instances of\
    \ the Multiple-\n   Services-Credit-Control AVP (10).  One instance grants a quota\
    \ of\n   12.5MB associated to the Service-Id 3 to a multiplier value of 2 and\n\
    \   to the Pool-Id 2.  The other instance grants a quota of 5 MB\n   associated\
    \ to the Service-Id 4 to a multiplier value of 5 and to the\n   Pool-Id 2.\n \
    \  The server also determines that pool 2 is exhausted and Service 4 is\n   not\
    \ allowed to continue after these units will be consumed.\n   Therefore the Final-Unit-Indication\
    \ AVP with action TERMINATE is\n   associated to the Service-Id 4.  The client\
    \ calculates the total\n   amount of resources that can be used for pool 2 according\
    \ the\n   received quotas and multipliers, which gives S for Pool 2 = 50.\n  \
    \ The Validity-Time for the access service expires.  The service\n   element sends\
    \ a Credit-Control-Request message to the server in order\n   to perform credit\
    \ re-authorization for Service-Id (access) (11).\n   This message carries one\
    \ instance of the Multiple-Services-Credit-\n   Control AVP that includes the\
    \ units used by this service.  Suppose\n   that the total amount of used units\
    \ is 4MB.  The client adjusts the\n   total amount of resources for pool 1 accordingly,\
    \ which gives S for\n   Pool 1 = 60.\n   The server deducts $4 from the user's\
    \ account and updates the\n   reservation by requesting more credit.  Suppose\
    \ that the server\n   reserves $5 more (now the reservation is $11) and already\
    \ knows the\n   cost of the Service-Id (access), which is $1/MB.  It then returns\
    \ to\n   the service element a Credit-Control-Answer message that includes the\n\
    \   Multiple-Services-Credit-Control AVP with a quota of 5 MB associated\n   to\
    \ the Service-Id (access), to a multiplier value of 10, and to the\n   Pool-Id\
    \ 1 (12).  The client adjusts the total amount of resources for\n   pool 1 according\
    \ the received quota, which gives S for Pool 1 = 110.\n   Services 3 and 4 consume\
    \ the total amount of pool 2 credit resources\n   (i.e., C1*2 + C2*5 >= S).  The\
    \ service element immediately starts the\n   TERMINATE action concerning Service\
    \ 4 and sends a Credit-Control-\n   Request message with CC-Request-Type set to\
    \ UPDATE_REQUEST to the\n   credit-control server in order to perform credit re-authorization\
    \ for\n   Service 3 (13).  This message contains two instances of the\n   Multiple-Services-Credit-Control\
    \ AVP to report the units used by\n   Services 3 and 4.  The server deducts the\
    \ last $5 from the user's\n   account (pool 2) and returns the answer with Result-Code\
    \ 4011 in the\n   Multiple-Services-Credit-Control AVP to indicate that Service\
    \ 3 can\n   continue without credit-control (14).\n   The end user logs off from\
    \ the network (15).  To debit the used units\n   from the end user's account and\
    \ to stop the credit-control session,\n   the service element sends a Diameter\
    \ Credit-Control-Request with CC-\n   Request-Type set to TERMINATION_REQUEST\
    \ to the credit-control server\n   (16).  This message contains the units consumed\
    \ by each of the used\n   services in multiple instances of the Multiple-Services-Credit-\n\
    \   Control AVP.  The used units are associated with the relevant\n   Service-Identifier\
    \ and Rating-Group.  The Diameter credit-control\n   server debits the used units\
    \ to the user's account (Pool 1) and\n   acknowledges the session termination\
    \ by sending a Diameter Credit-\n   Control-Answer to the service element (17).\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Harri Hakala\n   Oy L M Ericsson Ab\n   Joukahaisenkatu\
    \ 1\n   20520 Turku\n   Finland\n   Phone: +358 2 265 3722\n   EMail: Harri.Hakala@ericsson.com\n\
    \   Leena Mattila\n   Oy L M Ericsson Ab\n   Joukahaisenkatu 1\n   20520 Turku\n\
    \   Finland\n   Phone: +358 2 265 3731\n   EMail: Leena.Mattila@ericsson.com\n\
    \   Juha-Pekka Koskinen\n   Nokia Networks\n   Hatanpaanvaltatie 30\n   33100\
    \ Tampere\n   Finland\n   Phone: +358 7180 74027\n   EMail: juha-pekka.koskinen@nokia.com\n\
    \   Marco Stura\n   Nokia Networks\n   Hiomotie 32\n   00380 Helsinki\n   Finland\n\
    \   Phone: +358 7180 64308\n   EMail: marco.stura@nokia.com\n   John Loughney\n\
    \   Nokia Research Center\n   Itamerenkatu 11-13\n   00180 Helsinki\n   Finland\n\
    \   Phone: +358 50 483 642\n   EMail: John.Loughney@nokia.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
