Abstract This document describes the conventions for using the cryptographic algorithms GOST 28147 89, GOST R 34.10 94, GOST R 34.10 2001, and GOST R 34.11 94 with the Cryptographic Message Syntax (CMS).
The CMS is used for digital signature, digest, authentication, and encryption of arbitrary message contents.
The Cryptographic Message Syntax [CMS] is used for digital signature, digest, authentication, and encryption of arbitrary message contents.
This companion specification describes the use of cryptographic algorithms GOST 28147 89
[GOST28147], GOST R 34.10 94 [GOST3431095, GOSTR341094], GOST R 34.10 2001
[GOST3431004, GOSTR341001], and GOST R 34.11 94 [GOST3431195, GOSTR341194] in CMS, as proposed by the CRYPTO PRO Company for the "Russian Cryptographic Software Compatibility Agreement" community.
This document does not describe these cryptographic algorithms; they are defined in corresponding national standards.
The CMS values are generated using ASN.1 [X.208 88], using BER encoding [X.209 88].
This document specifies the algorithm identifiers for each algorithm, including ASN.1 for object identifiers and any associated parameters.
The fields in the CMS employed by each algorithm are identified.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
This section specifies the conventions for using the digest algorithm GOST R 34.11 94 employed by CMS.
Digest values are located in the DigestedData digest field and the Message Digest authenticated attribute.
In addition, digest values are input to signature algorithms.
Message Digest Algorithm GOST R 34.11 94
The hash function GOST R 34.11
94 has been developed by "GUBS of Federal Agency Government Communication and Information" and "All  Russian Scientific and Research Institute of Standardization".
The algorithm GOST R 34.11 94 produces a 256 bit hash value of the arbitrary finite bit length input.
This document does not contain the full GOST R 34.11 94 specification, which can be found in [GOSTR341194] in Russian.
18.11, p. 454, contains a brief technical description in English.
The hash algorithm GOST R 34.11 94 has the following identifier: id GostR3411
} The AlgorithmIdentifier parameters field MUST be present, and the parameters field MUST contain NULL.
Implementations MAY accept the GOST R 34.11 94 AlgorithmIdentifiers with absent parameters as well as NULL parameters.
This function is always used with default parameters id GostR3411
94 CryptoProParamSet (see Section 8.2 of [CPALGS]).
This section specifies the CMS procedures for the GOST R 34.10 94 and GOST R 34.10 2001 signature algorithms.
Signature algorithm identifiers are located in the SignerInfo signatureAlgorithm field of SignedData.
Also, signature algorithm identifiers are located in the SignerInfo signatureAlgorithm field of countersignature attributes.
Signature values are located in the SignerInfo signature field of SignedData.
Also, signature values are located in the SignerInfo signature field of countersignature attributes.
Signature Algorithm GOST R 34.10 94 GOST R 34.10 94 has been developed by "GUBS of Federal Agency Government Communication and Information" and "All Russian Scientific and Research Institute of Standardization".
This signature algorithm MUST be used conjointly with the GOST R 34.11 94 message digest algorithm.
This document does not contain the full GOST R 34.10 94 specification, which is fully described in [GOSTR341094] in Russian; and a brief description in English can be found in [Schneier95], ch. 20.3, p. 495.
The GOST R 34.10 94 signature algorithm has the following public key algorithm identifier: id
GostR3410 94 signature OBJECT IDENTIFIER ::
GostR3410 94 is defined in Section 2.3.1 of [CPPK].
The signature algorithm GOST R 34.10 94 generates a digital signature in the form of two 256 bit numbers, r' and s.
Its octet string representation consists of 64 octets, where the first 32 octets contain the big endian representation of s and the second 32 octets contain the big endian representation of r'.
Signature Algorithm GOST R 34.10 2001 GOST R 34.10 2001 has been developed by "GUBS of Federal Agency Government Communication and Information" and "All Russian Scientific and Research Institute of Standardization".
This signature algorithm MUST be used conjointly with GOST R 34.11 94.
This document does not contain the full GOST R 34.10 2001 specification, which is fully described in [GOSTR341001].
The signature algorithm GOST R 34.10 2001 has the following public key algorithm identifier:
GostR3410 2001 is defined in Section 2.3.2 of [CPPK].
The signature algorithm GOST R 34.10 2001 generates a digital signature in the form of two 256 bit numbers, r and s.
This chapter describes the key agreement and key transport algorithms, based on the VKO GOST R 34.10 94 and VKO GOST R 34.10  2001 key derivation algorithms, and the CryptoPro and GOST 28147 89 key wrap algorithms, described in [CPALGS].
They MUST be used only with the content encryption algorithm GOST 28147 89, defined in Section 5 of this document.
This section specifies the conventions employed by CMS implementations that support key agreement using both the VKO GOST R 34.10 94 and VKO GOST R 34.10 2001 algorithms, described in [CPALGS].
Key agreement algorithm identifiers are located in the EnvelopedData RecipientInfos KeyAgreeRecipientInfo
keyEncryptionAlgorithm and AuthenticatedData RecipientInfos KeyAgreeRecipientInfo
Wrapped content encryption keys are located in the EnvelopedData RecipientInfos KeyAgreeRecipientInfo RecipientEncryptedKeys encryptedKey field.
Wrapped message authentication keys are located in the AuthenticatedData RecipientInfos KeyAgreeRecipientInfo RecipientEncryptedKeys encryptedKey field.
Key Agreement Algorithms Based on GOST R 34.10 94/2001 Public Keys
The EnvelopedData RecipientInfos KeyAgreeRecipientInfo field is used as follows: The version MUST be 3.
The originator MUST be the originatorKey alternative.
The originatorKey algorithm field MUST contain the object identifier
id GostR3410 2001 and corresponding parameters (defined in Sections 2.3.1, 2.3.2 of [CPPK]).
The originatorKey publicKey field MUST contain the sender's public key.
keyEncryptionAlgorithm MUST be the id GostR3410 94
CryptoPro ESDH or the id
CryptoPro ESDH algorithm identifier, depending on the recipient public key algorithm.
The algorithm identifier parameter field for these algorithms is KeyWrapAlgorithm, and this parameter MUST be present.
The KeyWrapAlgorithm denotes the algorithm and parameters used to encrypt the content encryption key with the pairwise key  encryption key generated using the VKO GOST R 34.10 94 or the VKO GOST R 34.10 2001 key agreement algorithms.
The algorithm identifiers and parameter syntax is: id GostR3410 94
When keyEncryptionAlgorithm is id GostR3410 94
CryptoPro ESDH, KeyWrapAlgorithm algorithm MUST be the id Gost28147 89
} The CryptoPro Key Wrap algorithm is described in Sections 6.3 and 6.4 of [CPALGS].
When keyEncryptionAlgorithm is id GostR3410 2001
CryptoPro ESDH, KeyWrapAlgorithm algorithm MUST be either
89 Key Wrap algorithm is described in Sections 6.1 and 6.2 of [CPALGS].
KeyWrapAlgorithm algorithm parameters MUST be present.
KeyAgreeRecipientInfo ukm MUST be present and contain eight octets.
encryptedKey MUST encapsulate Gost28147 89
EncryptedKey, where maskKey MUST be absent.
Using the secret key corresponding to the originatorKey publicKey and the recipient's public key, the algorithm
VKO GOST R 34.10 94 or VKO GOST R 34.10 2001 (described in [CPALGS]) is applied to produce the KEK.
Then the key wrap algorithm, specified by KeyWrapAlgorithm, is applied to produce CEK ENC, CEK MAC, and UKM.
KeyWrapParameters encryptionParamSet is used for all encryption operations.
The resulting encrypted key (CEK ENC) is placed in the Gost28147 89
EncryptedKey encryptedKey field, its mac (CEK MAC) is placed in the Gost28147 89 EncryptedKey macKey field, and UKM is placed in the KeyAgreeRecipientInfo ukm field.
This section specifies the conventions employed by CMS implementations that support key transport using both the VKO GOST R 34.10 94 and VKO GOST R 34.10 2001 algorithms, described in [CPALGS].
Key transport algorithm identifiers are located in the EnvelopedData RecipientInfos KeyTransRecipientInfo keyEncryptionAlgorithm field.
Key transport encrypted content encryption keys are located in the EnvelopedData RecipientInfos KeyTransRecipientInfo encryptedKey field.
Based on GOST R 34.10 94/2001 Public Keys
The EnvelopedData RecipientInfos KeyTransRecipientInfo field is used as follows: The version MUST be 0 or 3.
keyEncryptionAlgorithm and parameters MUST be identical to the recipient public key algorithm and parameters.
encryptedKey encapsulates GostR3410 KeyTransport, which consists of encrypted content encryption key, its MAC, GOST 28147
89 algorithm parameters used for key encryption, the sender's ephemeral public key, and UKM (UserKeyingMaterial; see [CMS], Section 10.2.6).
ephemeralPublicKey MUST be present and its parameters, if present, MUST be equal to the recipient public key parameters;
Using the secret key corresponding to the GostR3410
and the recipient's public key, the algorithm VKO GOST R 34.10 94 or VKO GOST R 34.10 2001
(described in [CPALGS]) is applied to produce the KEK.
Then the CryptoPro key wrap algorithm is applied to produce CEK ENC, CEK MAC, and UKM.
TransportParameters encryptionParamSet is used for all encryption operations.
The resulting encrypted key (CEK ENC) is placed in the Gost28147 89
EncryptedKey encryptedKey field, its mac (CEK MAC) is placed in the Gost28147 89 EncryptedKey macKey field, and UKM is placed in the GostR3410 TransportParameters ukm field.
This section specifies the conventions employed by CMS implementations that support content encryption using GOST 28147 89.
Content encryption algorithm identifiers are located in the EnvelopedData EncryptedContentInfo contentEncryptionAlgorithm and the EncryptedData EncryptedContentInfo contentEncryptionAlgorithm fields.
Content encryption algorithms are used to encipher the content located in the EnvelopedData EncryptedContentInfo encryptedContent field and the EncryptedData EncryptedContentInfo encryptedContent field.
Content Encryption Algorithm GOST 28147
This section specifies the use of GOST 28147 89 algorithm for data encipherment.
GOST 28147 89 is fully described in [GOST28147] (in Russian).
This document specifies the following object identifier (OID) for this algorithm: id Gost28147 89
encryptionParamSet specifies the set of corresponding Gost28147 89
ParamSetParameters (see Section 8.1 of [CPALGS])
This section specifies the conventions employed by CMS implementations that support the message authentication code (MAC) based on GOST R 34.11 94.
MAC algorithm identifiers are located in the AuthenticatedData macAlgorithm field.
MAC values are located in the AuthenticatedData mac field.
(K,text) function is based on hash function GOST R 34.11 94, as defined in Section 3 of [CPALGS].
This document specifies the following OID for this algorithm:
} This algorithm has the same parameters as the GOST R 34.11 94 digest algorithm and uses the same OIDs for their identification (see [CPPK]).
This section defines the use of the algorithms defined in this document with S/MIME [RFC3851]. 7.1.
When using the algorithms defined in this document, micalg parameter SHOULD be set to "gostr3411 94"; otherwise, it MUST be set to "unknown".
The SMIMECapability value that indicates support for the GOST R 34.11 94 digest algorithm is the SEQUENCE with the capabilityID field containing the object identifier id GostR3411 94 and no parameters.
The DER encoding is: 30 08 06 06  2A 85 03 02  02 09
The SMIMECapability value that indicates support for the GOST 28147 89 encryption algorithm is the SEQUENCE with the capabilityID field containing the object identifier
Gost28147 89 and no parameters.
The DER encoding is: 30 08 06 06  2A 85 03 02  02 15
If the sender wishes to indicate support for a specific parameter set, SMIMECapability parameters MUST contain the Gost28147 89  Parameters structure.
Recipients MUST ignore the Gost28147 89  Parameters iv field and assume that the sender supports the parameters specified in the Gost28147 89 Parameters encryptionParamSet field.
The DER encoding for the SMIMECapability, indicating support for GOST 28147 89 with id Gost28147 89
CryptoPro A ParamSet (see [CPALGS]), is: 30 1D 06 06  2A 85 03 02  02 15 30 13  04 08 00 00 00 00 00 00
Security Considerations Conforming applications MUST use unique values for ukm and iv.
Recipients MAY verify that ukm and iv, specified by the sender, are unique.
It is RECOMMENDED that software applications verify that signature values, subject public keys, and algorithm parameters conform to [GOSTR341001] and [GOSTR341094] standards prior to their use.
Cryptographic algorithm parameters affect algorithm strength.
The use of parameters not listed in [CPALGS] is NOT RECOMMENDED (see the Security Considerations section of [CPALGS]).
Use of the same key for signature and key derivation is NOT RECOMMENDED.
When signed CMS documents are used as an analogue to a manual signing, in the context of Russian Federal Electronic Digital Signature Law [RFEDSL], signer certificate MUST contain the keyUsage extension, it MUST be critical, and keyUsage MUST NOT include keyEncipherment or keyAgreement (see [PROFILE], Section 4.2.1.3).
Application SHOULD be submitted for examination by an authorized agency in appropriate levels of target of evaluation (TOE), according to [RFEDSL], [RFLLIC], and [CRYPTOLIC].
Examples Examples here are stored in the same format as the examples in [RFC4134] and can be extracted using the same program.
The result is a valid Base64 blob that can be processed by any Base64 decoder.
This message is signed using the sample certificate from Section 4.2 of [CPPK].
The public key (x,y) from the same section can be used to verify the message signature. 0
SEQUENCE { 4    9:  OBJECT IDENTIFIER
15  281:  [0] { 19
73 61 6D 70 6C
OBJECT IDENTIFIER emailAddress 164   26:
D9 3F 8F FE 25 11
11 88 77 BF 89 C3 DB :
Enveloped Message Using Key Agreement
This message is encrypted using the sample certificate from Section 4.2 of [CPPK] as a recipient certificate.
'd' from the same section can be used to decrypt this message. 0
SEQUENCE { 4    9:  OBJECT IDENTIFIER
405:  [0] { 19  401:
B3 55 39 F4 67 81 97 2B A5 C4 D9 84 1F 27 FB 81 :
ED 08 32 E6 9A D4 F2 00
OBJECT IDENTIFIER emailAddress 276   26:
C7 DC D4 62 66 B4 2E 21 :
69 04 68 1E C7 :
9F 3A ED B8 3B 1F 1D 4A 7E F9 A5 D9 CB 19 D5 E8 360    4:
OBJECT IDENTIFIER data 379   29:
Enveloped Message Using Key Transport
This message is encrypted using the sample certificate from Section 4.2 of [CPPK] as a recipient certificate.
'd' from the same section can be used to decrypt this message. 0
SEQUENCE { 4    9:  OBJECT IDENTIFIER envelopedData
C7 DC D4 62 66 B4 2E 21 :
OCTET STRING, encapsulates { 202  164:
41 60 BC 5D 8D FB F5 3D
18 9A F9 75 241    4:
31 F7 73 7E 4E FF BF 78 89 8A 2B C3 CD
ASN.1 Modules Additional ASN.1 modules, referenced here, can be found in [CPALGS].
EncryptionSyntax GostR3410 EncryptionSyntax { iso(1) member body(2
Other applications may use them for   their own purposes, but this will not constrain extensions and   modifications needed to maintain or improve the Russian   Cryptography service.
EncryptionSyntax, gostR3410 94 PKISyntax, gostR3410 2001 PKISyntax, ALGORITHM IDENTIFIER, cryptographic Gost Useful Definitions FROM Cryptographic Gost Useful Definitions   in [CPALGS] { iso(1) member body(2
GostR3410 94 FROM GostR3410 94 PKISyntax   in [CPALGS] gostR3410 94 PKISyntax id
FROM GostR3410 2001 PKISyntax   in [CPALGS] gostR3410 2001 PKISyntax Gost28147 89 ParamSet, Gost28147 89
EncryptedKey FROM Gost28147 89 EncryptionSyntax
EncryptionSyntax SubjectPublicKeyInfo FROM PKIX1Explicit88 {iso(1) identified organization(3)
id pkix1 explicit 88(1)} ;
{ Gost28147 89 KeyWrapParameters IDENTIFIED BY i
id GostR3410 2001 from GostR3410 2001 PKISyntax
94 KeyTransportSMIMECapability OBJECT IDENTIFIER ::
GostR3410 94 SignatureSyntax GostR3410 94 SignatureSyntax {
) 1 } DEFINITIONS ::
Other applications may use them for   their own purposes, but this will not constrain extensions and   modifications needed to maintain or improve the Russian   Cryptography service.
IMPORTS gostR3410 94 PKISyntax, ALGORITHM IDENTIFIER, cryptographic Gost Useful Definitions FROM Cryptographic Gost Useful Definitions   in [CPALGS] { iso(1) member body(2) ru(643)
GostR3410 94, GostR3410 94 PublicKeyParameters FROM GostR3410 94 PKISyntax   in [CPALGS] gostR3410 94 PKISyntax
GOST R 34.10 94 signature algorithm & parameters
SignatureSyntax GostR3410 2001 SignatureSyntax {
Other applications may use them for   their own purposes, but this will not constrain extensions and   modifications needed to maintain or improve the Russian   Cryptography service.
IMPORTS gostR3410 2001 PKISyntax, ALGORITHM IDENTIFIER, cryptographic Gost Useful Definitions FROM Cryptographic Gost Useful Definitions   in [CPALGS] { iso(1) member body(2) ru(643)
1 } id GostR3410 2001, GostR3410 2001
GOST R 34.10 2001 signature algorithms and parameters
{ GostR3410 2001 PublicKeyParameters IDENTIFIED BY id GostR3410 2001
