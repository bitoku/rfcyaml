- contents:
  - '          Integrated Services Mappings for Low Speed Networks

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   A set of companion documents describe an architecture for providing\n
    \  integrated services over low-bitrate links, such as modem lines, ISDN\n   B-channels,
    and sub-T1 links [1, 2, 3, 4]. The main components of the\n   architecture are:
    a set of real-time encapsulation formats for\n   asynchronous and synchronous
    low-bitrate links, a header compression\n   architecture optimized for real-time
    flows, elements of negotiation\n   protocols used between routers (or between
    hosts and routers), and\n   announcement protocols used by applications to allow
    this negotiation\n   to take place.\n   This document defines the service mappings
    of the IETF Integrated\n   Services for low-bitrate links, specifically the controlled
    load [5]\n   and guaranteed [6] services.  The approach takes the form of a set
    of\n   guidelines and considerations for implementing these services, along\n
    \  with evaluation criteria for elements providing these services.\n"
  title: Abstract
- contents:
  - "1. Introduction\n   In addition to the \"best-effort\" services the Internet
    is well-known\n   for, other types of services (\"integrated services\") are being\n
    \  developed and deployed in the Internet. These services support\n   special
    handling of traffic based on bandwidth, latency, and other\n   requirements that
    cannot usually be met using \"best-effort\" service.\n   This document defines
    the mapping of integrated services \"controlled\n   load\" [5] and \"guaranteed\"
    [6] services on to low-bandwidth links.\n   The architecture and mechanisms used
    to implement these services on\n   such links are defined in a set of companion
    documents. The\n   mechanisms defined in these documents include both compression
    of\n   flows (for bandwidth savings) [4,10] and a set of extensions to the\n   PPP
    protocol which permit fragmentation [2] or suspension [3] of\n   large packets
    in favor of packets from flows with more stringent\n   service requirements.\n"
  title: 1. Introduction
- contents:
  - "1.1.  Specification Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC
    2119 [11].\n"
  title: 1.1.  Specification Language
- contents:
  - "2. Issues for Providing Controlled and Guaranteed Service\n   Unlike other link
    layers, the links referred to in this document\n   operate only over low speed
    point to point connections.  Examples of\n   the kinds of links addressed here
    include dial-up lines, ISDN\n   channels, and low-speed (1.5Mbps or less) leased
    lines.  Such links\n   can occur at different positions within the end-to-end
    path:\n   - host to directly connected host.\n   - host to/from network access
    device (router or switch).\n   - Edge device (subnet router or switch) to/from
    router or switch.\n   - In rare circumstances, a link from backbone router to
    backbone\n     router.\n   These links often represent the first or last wide
    area hop in a true\n   end to end service.  Note that these links may be the most
    bandwidth\n   constrained along the path between two hosts.\n   The services utilized
    in mapping integrated services to these links\n   are only provided if both endpoints
    on the link support the\n   architecture and mechanisms referenced above. Support
    for these\n   mechanisms is determined during the PPP negotiation.  The non-shared\n
    \  nature of these links, along with the fact that point-to-point links\n   are
    typically dual simplex (i.e., the send and receive channels are\n   separate)
    allows all admission control decisions to be made locally.\n   As described in
    [2] and [3], for systems that can exert real time\n   control of their transmission
    at a finer grain than entire HDLC\n   frames, the suspend/resume approach optimizes
    the available bandwidth\n   by minimizing header overhead associated with MLPPP
    pre-fragmentation\n   and can provide better delay.  However, this comes at the
    expense of\n   preparing all outgoing data and scanning all incoming data for\n
    \  suspend/resume control information.  The fragmentation approach can\n   be
    implemented without additional scanning of the data stream (beyond\n   bit-/byte-stuffing,
    which may be in hardware) and is applicable to\n   systems which provide only
    frame-oriented transmission control.\n   Choice of suspend/resume versus fragmentation
    should be made based on\n   the level of transmission control, the element's capability
    to handle\n   the HDLC-like framing described in [2], and the system overhead\n
    \  associated with byte by byte scanning (required by suspend/resume).\n   To
    provide controlled load or guaranteed service with the\n   suspend/resume approach,
    when a packet for an admitted flow (QoS\n   packet) arrives during transmission
    of a best effort packet and\n   continued transmission of the best effort packet
    would violate delay\n   constraints of the QoS service flows, the best effort
    packet is\n   preempted, the QoS packet/fragments are added to the transmission,\n
    \  and the best effort packet transmission is then resumed: usually all\n   in
    one transmission.  The receiving station separates the best effort\n   packet
    from the embedded QoS packet's fragments.  It is also\n   conceivable that one
    QoS flow's packet might suspend another flow's\n   packet if the delivery deadline
    of the new packet is earlier than the\n   current packet.\n   For systems which
    use fragmentation, any packets longer than the\n   maximum tolerable delay for
    packets from enhanced service flows are\n   fragmented prior to transmission so
    that a short packet for another\n   flow can be interleaved between fragments
    of a larger packet and\n   still meet the transmission deadline for the flow requiring
    enhanced\n   services.\n   Note that the fragmentation discussed in this document
    refers to\n   multilink PPP (MLPPP) fragmentation and associated MCMLPPP\n   modifications
    as described in [2], not IP or other layer 3\n   fragmentation.  MLPPP fragmentation
    is local to the PPP link, and\n   does not affect end-to-end (IP) MTU.\n"
  title: 2. Issues for Providing Controlled and Guaranteed Service
- contents:
  - "2.1 Calculating \"Acceptable Delay\" for Int-serv flows\n   A router which provides
    Controlled Load or Guaranteed Service over a\n   low speed serial link needs to
    have some notion of the \"acceptable\n   delay\" for packets that belong to int-serv
    flows. If using\n   fragmentation, a router needs to know what size to fragment
    packets\n   to; if using suspend/resume, it needs to know when it is appropriate\n
    \  to suspend one packet to meet the delay goals of another.\n   Unfortunately,
    there is no hard and fast way for a single delay bound\n   to be determined for
    a particular flow; while the end-points of a\n   flow have enough information
    to determine acceptable end-to-end delay\n   bounds and to make reservation requests
    of the network to meet those\n   bounds, they do not communicate a \"per-hop\"
    delay to routers.\n   In the case of Guaranteed Service [6], one approach is to
    let the\n   network operator configure parameters on the router that will\n   directly
    affect its delay performance. We observe that guaranteed\n   service allows routers
    to deviate from the ideal fluid flow model and\n   to advertise the extent of
    the deviation using two error terms C and\n   D, the rate-dependent and rate-independent
    error terms, defined in\n   [6]. A network operator can configure parameters of
    the low speed\n   link in such a way that D is set to a value of her choice.\n
    \  If link-level fragmentation is used, the router controlling a low-\n   speed
    link can be configured with a certain fragment size. This will\n   enable a component
    of the error term D to be calculated based on the\n   time to send one fragment
    over the link. (Note that D may have other\n   components such as the speed of
    light delay over the link.)  Details\n   of the calculation of D are described
    below. Similarly, if\n   suspend/resume is used, the router may be configured
    with a delay\n   parameter, which would enable it to decide when it was appropriate
    to\n   suspend a packet.\n   For Controlled Load, there are no error terms, and
    the router must\n   decide how best to meet the requirements of the admitted reservations\n
    \  using only the information in their TSpecs. Since the definition of\n   Controlled
    Load states that a CL flow with Tspec rate r should\n   receive treatment similar
    to an unloaded network of capacity r, CL\n   packets should not generally experience
    end-to-end delays\n   significantly greater than b/r + propagation delays. Clearly
    a router\n   connected to a low speed link should not introduce a delay greater\n
    \  than b/r due to transmission of other fragments; ideally it should\n   introduce
    substantially less delay than b/r, since other hops on the\n   end-to-end path
    may introduce delay as well. However, this may be\n   difficult for flows with
    very small values of b.\n   It is expected that implementers will make their own
    tradeoffs as to\n   how low to make the delay for Controlled Load flows. Similarly,
    it\n   may not be possible or desirable to configure the parameters\n   affecting
    D to arbitrarily small values, since there is a cost in\n   overhead in fragmenting
    packets to very small sizes. Conversely, if D\n   is too large, some applications
    may find that they cannot make a\n   reservation that will meet their delay objectives.\n
    \  For the remainder of this document, we assume that a router has some\n   notion
    of the acceptable delay that it may introduce before beginning\n   transmission
    of a packet. This delay is in addition to any delay that\n   a packet might be
    subjected to as a result of the \"ideal\" queuing\n   algorithm that the router
    uses to schedule packets.\n"
  title: 2.1 Calculating "Acceptable Delay" for Int-serv flows
- contents:
  - "3. Controlled Load and Guaranteed Service Class Mapping\n   Supporting integrated
    services over PPP links which implement MCML or\n   RTF can be accomplished in
    several ways.  Guidelines for mapping\n   these services to PPP links and to the
    classes provided by the\n   suspend/resume and fragmentation mechanisms are presented
    below.\n   Note that these guidelines assume that some sort of signaling\n   protocol
    is used to indicate desired quality of service to both the\n   sender and receiver
    of a flow over a PPP link.\n"
  title: 3. Controlled Load and Guaranteed Service Class Mapping
- contents:
  - "3.1 Predefined Class Mappings\n   A relatively simple method of class mapping
    that MAY be used is one\n   where class values correspond to predefined levels
    of service.  In\n   this arrangement, all admitted flows are grouped into one
    of several\n   buckets, where each bucket roughly corresponds to the level of\n
    \  service desired for the flows placed in it. An example set of\n   mappings
    appears below:\n   MCML Short   MCML Long  RTF     Service\n     0b00        0b0000
    \   0b000   Best Effort\n     NA          0b0001    0b001   Reserved\n     0b01
    \       0b0010    0b010   Delay Sensitive, no bound\n     NA          0b0011    0b011
    \  Reserved\n     NA          0b0100    0b100   Reserved\n     0b10        0b0101
    \   0b101   Delay Sensitive, 500ms bound\n     NA          0b0110    0b110   Delay
    Sensitive, 250ms bound\n     0b11        0b0111    0b111   Network Control\n   Table
    1: Example Mappings of Classes to Services\n   Note that MCML has two formats,
    short sequence numbers, and long\n   sequence numbers, that allow for 2 and 4
    bits of class identification.\n   RTF allows for 3 bits of class identification
    in all formats.\n   Using a default-mapping method of assigning classes to flows
    in a\n   fixed fashion comes with certain limitations. In particular, all flows\n
    \  which fall within a particular bucket (are assigned to a particular\n   class)
    will be scheduled against each other at the granularity of\n   packets, rather
    than at the finer grained level of fragments.  This\n   can result in overly conservative
    admission control when the number of\n   available classes is small such as in
    MCML short sequence number\n   format.\n"
  title: 3.1 Predefined Class Mappings
- contents:
  - "3.2 Predefined Class Mappings and Prefix Elision\n   In the case where fewer
    reservations are expected than the total\n   number of classes negotiated for
    a PPP link, it is possible to assign\n   individual flows to fixed class numbers.
    This assignment is useful in\n   the case where the protocol identifier associated
    with one or more\n   flows is known at LCP negotiation time and the bandwidth
    of the\n   connection is relatively small. If these conditions hold true, then\n
    \  for those flows that are known, a specific class can optionally be\n   assigned
    to them and the prefix elision PPP option [2] can be used for\n   those classes
    to achieve a small bandwidth savings.\n"
  title: 3.2 Predefined Class Mappings and Prefix Elision
- contents:
  - "3.3 Dynamic Class Mappings\n   In the case where predefined class mappings are
    not satisfactory, an\n   implementer MAY map class values to individual packets
    rather than\n   assigning flows to fixed classes.  This can be done due to the
    fact\n   that the classes that MCML and RTF provide can be viewed purely as\n
    \  PPP-specific segmentation/fragmentation mechanisms. That is, while the\n   class
    number MUST remain constant on an intra-packet basis, it MAY\n   vary on an inter-packet
    basis for all flows transiting a PPP\n   link. Actual assignment of particular
    flows to fixed classes is\n   unnecessary, as the class numbers are NOT REQUIRED
    to have any meaning\n   other than in the context of identifying the membership
    of\n   fragments/segments as part of a single packet.  This point is\n   sufficiently
    important that an example is provided below.\n   Consider a PPP link using the
    MCML short sequence number fragment\n   format (that is, four classes are provided).
    \ Assume that in addition\n   to carrying best effort traffic, this link is carrying
    five guaranteed\n   service flows, A, B, C, D, and E. Further assume that the
    link\n   capacity is 100kbit/s and the latency is 100ms. Finally, assume the BE\n
    \  traffic is sufficient to keep the pipe full at all times and that GS\n   flows
    A-E are each 10kbit/s and all have delay bounds of 145ms.\n"
  - "Time(ms)        Action\n 0     BE traffic is queued up\n 0     2kbit fragment
    from 10kbit packet of BE traffic sent, cls 0 (...)\n 8     2kbit fragment from
    BE sent, cls 0 (10kbit BE packet done)\n 9     8kbit packet from flow A arrives\n"
  - '10     2kbit fragment from A sent, cls 1 (8kbit flow A packet start)

    '
  - '11     8kbit packet from flow B arrives

    '
  - '12     2kbit fragment from B sent, cls 2 (8kbit flow B packet start)

    '
  - '13     8kbit packets from flows C, D, and E arrive

    '
  - '14     2kbit fragment from C sent, cls 3 (8kbit flow C packet start)

    '
  - '16     2kbit fragment from D sent, cls 0 (8kbit flow D packet start)

    '
  - '18     2kbit fragment from A sent, cls 1

    '
  - '20     2kbit fragment from B sent, cls 2

    '
  - '22     2kbit fragment from A sent, cls 1

    '
  - '24     2kbit fragment from A sent, cls 1 (8kbit flow A packet done)

    '
  - '26     2kbit fragment from E sent, cls 1 (8kbit flow E packet start)

    '
  - '27     8kbit packet from flow A arrives

    '
  - '28     2kbit fragment from B sent, cls 2

    '
  - '30     2kbit fragment from C sent, cls 3

    '
  - '32     2kbit fragment from E sent, cls 1

    '
  - '34     2kbit fragment from B sent, cls 2 (8kbit flow B packet done)

    '
  - '36     2kbit fragment from E sent, cls 1

    '
  - "38     2kbit fragment flow A sent, cls 2 (8kbit flow A packet start)\n       (etc.)\n
    \  This example shows several things. First, multiple flows MAY share\n   the
    same class, particularly in the case where there are more flows\n   than classes.
    More importantly, there is no reason that a particular\n   flow must be assigned
    to a fixed class - the only requirement is that\n   each packet, when fragmented,
    MUST have the same class value assigned\n   to all fragments.  Beyond this requirement
    the link scheduler may\n   assign individual to changing class numbers as necessary
    to meet\n   reservation requirements.\n   One suggestion to implementers of integrated
    services on MCML and RTF\n   links using dynamic mappings is that all BE traffic
    SHOULD be\n   logically separated from QoS traffic, and mapped to a fragmentable\n
    \  (MCML classes 0-3 in short sequence number fragment format, 0-15 in\n   long
    sequence number fragment format) or suspendable (RTF classes 0-\n   6) class.
    Since BE traffic will in most implementations not be\n   scheduled for transmission
    except when a link is empty (that is, no\n   CL or GS traffic is ready for transmission),
    implementers MAY choose\n   to make use of class number 0 for BE traffic.\n"
  title: 3.3 Dynamic Class Mappings
- contents:
  - "3.4 Non-Conformant Traffic\n   Treatment of non-conformant QoS traffic is largely
    determined by the\n   appropriate service specifications, but the detailed implementation\n
    \  in the context of this draft allows for some flexibility.  Policing\n   of
    flows containing non-conformant traffic SHOULD always be done at\n   the level
    of granularity of individual packets rather than at a finer\n   grained level.
    \ In particular, in those cases where a network element\n   scheduling flows for
    transmission needs to drop non-conformant\n   traffic, it SHOULD drop entire packets
    rather than dropping\n   individual fragments of packets belonging to non-conformant
    traffic.\n   In those cases where a network element forwards non-conformant\n
    \  traffic when link bandwidth is available rather than dropping the\n   traffic,
    the implementation SHOULD fragment packets of such traffic\n   as if it were best
    effort traffic.\n   Whether BE and non-conformant traffic are treated differently
    in\n   regards to transmission (e.g., BE is given priority access over non-\n
    \  conformant traffic to the link) or whether within each type of\n   traffic
    special treatment is afforded to individual flows (e.g., WFQ,\n   RED, etc.) is
    service dependent.\n"
  title: 3.4 Non-Conformant Traffic
- contents:
  - '4. Guidelines for Implementers

    '
  title: 4. Guidelines for Implementers
- contents:
  - "4.1. PPP Bit and Byte Stuffing Effects on Admission Control\n   An important
    consideration in performing admission control for PPP\n   links is reductions
    in effective link rate due to bit stuffing.\n   Typical bit stuffing algorithms
    can result in as much as 20%\n   additional overhead. Thus, admission control
    implementations for\n   guaranteed service over links where bit stuffing is used
    SHOULD take\n   the RSpec rate of all flows and multiply by 1.2, to account for
    the\n   20% overhead from bit stuffing, when determining whether a new flow\n
    \  can be admitted or not. Admission control implementations for\n   controlled
    load reservations may use a similar algorithm using the\n   TSpec peak rate or
    may attempt to measure the actual degree of\n   expansion occurring on a link
    due to bit stuffing. This\n   characterization can then be used to adjust the
    calculated remaining\n   link capacity. Such measurements must be used cautiously,
    in that the\n   degree of bit stuffing that occurs may vary significantly, both
    in an\n   inter- and intra-flow fashion.\n   Byte stuffing is also used on many
    PPP links, most frequently on POTS\n   modems when using the v.42 protocol. Byte
    stuffing poses a difficult\n   problem to admission control, particularly in the
    case of guaranteed\n   service, due to its highly variable nature. In the worse
    case, byte\n   stuffing can result in a doubling of frame sizes. As a consequence,
    a\n   strict implementation of admission control for guaranteed load on\n   byte
    stuffed PPP links SHOULD double the RSpec of link traffic in\n   making flow admission
    decisions. As with bit stuffing,\n   implementations of controlled load service
    admission control\n   algorithms for links with byte stuffing MAY attempt to determine\n
    \  average packet expansion via observation or MAY use the theoretical\n   worst
    case values.\n"
  title: 4.1. PPP Bit and Byte Stuffing Effects on Admission Control
- contents:
  - "4.2. Compression Considerations\n   The architecture for providing integrated
    services over low bandwidth\n   links uses several PPP options to negotiate link
    configuration as\n   described in [4, 8, 10].  When deciding whether to admit
    a flow,\n   admission control MUST compute the impact of the following on MTU\n
    \  size, rate, and fragment size:\n   Header compression: Van Jacobson or Casner-Jacobson
    [4,8,10].\n   Prefix Elision.\n   CCP.\n   Fragment header option used.\n   Fragmentation
    versus suspend/resume approach.\n   If any of the compression options are implemented
    for the connection,\n   the actual transmission rate, and thus the bandwidth required
    of the\n   link, will be reduced by the compression method(s) used.\n   Prefix
    elision can take advantage of mapping flows to MLPPP classes\n   to elide prefixes
    which cannot be compressed at higher layers.  By\n   establishing agreement across
    the link, the sender may elide a prefix\n   for a certain class of traffic and
    upon receiving packets in that\n   class, the receiver can restore the prefix.\n
    \  Both compression gain and elision gain MUST be included as described\n   in
    the admission control section below. Note that the ability to\n   perform compression
    at higher layers (e.g. TCP or RTP/UDP) may depend\n   on the provision of a hint
    by the sender, as described in [9].\n"
  title: 4.2. Compression Considerations
- contents:
  - "4.3. Admission Control\n   Admission control MUST decide whether to admit a flow
    based on rate\n   and delay.  Assume the following:\n  LinkRate is the rate of
    the link.\n  MTU is the maximum transmission unit from a protocol.\n  MRU is the
    maximum receive unit for a particular link.\n  CMTU is the maximum size of the
    MTU after compression is applied.\n  eMTU is the effective size at the link layer
    of an MTU-sized packet\n    after link layer fragmentation and addition of the
    fragment headers.\n  FRAG is the fragment size including MLPPP header/trailers.\n
    \ Header is the size of the header/trailers/framing for MLPPP/Fragments.\n  pHeader
    is the additional header/framing overhead associated with\n    suspend/resume.
    \ This should include FSE and worst case stuffing\n    overhead.\n  pDelay is
    the time take to suspend a packet already \"in flight\",\n    e.g. due to the
    delay to empty the output FIFO.\n  b is the bucket depth in bytes\n  R is the
    requested Rate.\n  Dlink is the fixed overhead delay for the link (Modem, DSU,\n
    \   speed-of-light, etc).\n  eRate is the effective rate after compression and
    fragmentation.\n   The Dlink term MAY be configured by an administrative tool
    once the\n   network is installed; it may be determined by real-time measurement\n
    \  means; or it MAY be available from hardware during link setup and/or\n   PPP
    negotiation.  Refer to Appendix A for more considerations on PPP\n   link characteristics
    and delays.\n   Admission control MUST compute CMTU, eMTU, and eRate for Controlled\n
    \  Load Service, and it MUST compute CMTU, eMTU, eRate, and D for\n   Guaranteed
    Service:\n   To determine whether the requested rate is available, Admission\n
    \  Control MUST compute the effective rate of the request (eRate) -\n   worst
    case - as follows:\n   #_of_Fragments = CMTU div (FRAG-Header) [Integer divide]\n
    \  Last_Frag_Size = CMTU mod (FRAG-Header\n   If Last_Frag_Size != 0\n      eMTU
    = (#_of_Fragments) * FRAG + Last_Frag_Size + Header\n   Else\n      eMTU = (#_of_Fragments)
    * FRAG\n   eRate = eMTU/CMTU * R [floating point divide]\n   Admission control
    SHOULD compare the eRate of the request against the\n   remaining bandwidth available
    to determine if the requested rate can\n   be delivered.\n   For Controlled Load
    Service, a flow can be admitted as long as there\n   is sufficient bandwidth available
    (after the above computation) to\n   meet the rate requirement, and if there is
    sufficient buffer space\n   (sum of the token bucket sizes does not exceed the
    buffer capacity).\n   While some statistical multiplexing could be done in computing\n
    \  admissibility, the nature of the low-bitrate links could make this\n   approach
    risky as any delay incurred to address a temporary\n   overcommitment could be
    difficult to amortize.\n"
  title: 4.3. Admission Control
- contents:
  - "4.4 Error Term Calculations\n   Guaranteed Service requires the calculation of
    C and D error terms. C\n   is a rate-dependent error term and there are no special\n
    \  considerations affecting its calculation in the low-speed link\n   environment.
    The D term is calculated from the inherent link delay\n   (Dlink) plus the potential
    worst case delay due to transmission of\n   another fragment or suspend/resume
    overhead. Thus, D should be\n   calculated as\n   D = Dlink + FRAG/LinkRate\n
    \  in the case of a fragementing implementation and\n   D = Dlink + pHeader +
    pDelay\n   for a suspend/resume implementation.\n"
  title: 4.4 Error Term Calculations
- contents:
  - "4.5 Scheduling Considerations\n   We may think of the link scheduler as having
    two parts, the first of\n   which schedules packets for transmission before passing
    them to the\n   second part of the scheduler -- the link level scheduler -- which
    is\n   responsible for fragmenting packets, mapping them to classes, and\n   scheduling
    among the classes.\n   In the dynamic class mapping mode of Section 3.3, when
    deciding which\n   class to assign a packet to, the link level scheduler should
    take\n   account of the sizes of other packets currently assigned to the same\n
    \  class. In particular, packets with the tightest delay constraints\n   should
    not be assigned to classes for which relatively large packets\n   are in the process
    of being transmitted.\n   In either the dynamic or the static class mapping approach,
    note that\n   the link-level scheduler SHOULD control how much link bandwidth
    is\n   assigned to each class at any instant. The scheduler should assign\n   bandwidth
    to a class according to the bandwidth reserved for the sum\n   of all flows which
    currently have packets assigned to the class. Note\n   that in the example of
    Section 3.3, when packets from flows A and E\n   were assigned to the same class
    (class 1), the scheduler assigned\n   more bandwidth to class 1, reflecting the
    fact that it was carrying\n   traffic from reservations totaling 20kbit/s while
    the other classes\n   were carrying only 10kbit/s.\n"
  title: 4.5 Scheduling Considerations
- contents:
  - "5. Security Considerations\n   General security considerations for MLPPP and
    PPP links are addressed\n   in RFC 1990 [12] and RFC 1661 [13], respectively.
    \ Security\n   considerations relevant to RSVP, used as the signaling protocol
    for\n   integrated services, are discussed in RFC 2209 [14].\n   A specific security
    consideration relevant to providing quality of\n   service over PPP links appears
    when relying on either observed or\n   theoretical average packet expansion during
    admission control due to\n   bit- or byte-stuffing.  Implementations based on
    these packet-\n   expansion values contain a potential vulnerability to denial
    of\n   service attacks.  An adversary could intentionally send traffic that\n
    \  will result in worst case bit- or byte stuffing packet expansion.\n   This
    in turn could result in quality of service guarantees not being\n   met for other
    flows due to overly permissive admission control. This\n   potential denial of
    service attack argues strongly for using a worst\n   case expansion factor in
    admission control calculations, even for\n   controlled load service.\n   Beyond
    the considerations documented above, this document introduces\n   no new security
    issues on top of those discussed in the companion\n   ISSLL documents [1], [2]
    and [3] and AVT document [4].  Any use of\n   these service mappings assumes that
    all requests for service are\n   authenticated appropriately.\n"
  title: 5. Security Considerations
- contents:
  - "6. References\n   [1]  Bormann, C., \"Providing Integrated Services over Low-bitrate\n
    \       Links\", RFC 2689, September 1999.\n   [2]  Bormann, C., \"The Multi-Class
    Extension to Multi-Link PPP\", RFC\n        2686, September 1999.\n   [3]  Bormann,
    C., \"PPP in a Real-time Oriented HDLC-like Framing\",\n        RFC 2687, September
    1999.\n   [4]  Casner, S. and V. Jacobson, \"Compressing IP/UDP/RTP Headers for\n
    \       Low-Speed Serial Links\", RFC 2508, February 1999.\n   [5]  Wroclawski,
    J., \"Specification of the Controlled-Load Network\n        Element Service\",
    RFC 2211, September 1997.\n   [6]  Partridge, C. and  R. Guerin, \"Specification
    of Guaranteed\n        Quality of Service\", RFC 2212, September 1997.\n   [7]
    \ Shenker, S. and J. Wroclawski, \"General Characterization\n        Parameters
    for Integrated Service Network Elements\", RFC 2215,\n        September 1997.\n
    \  [8]  Jacobson, V., \"TCP/IP Compression for Low-Speed Serial Links\",\n        RFC
    1144, February 1990.\n   [9]  B. Davie et al. \"Integrated Services in the Presence
    of\n        Compressible Flows\", Work in Progress (draft-davie-intserv-\n        compress-00.txt),
    Feb. 1999.\n   [10] Engan, M., Casner, S. and C. Bormann, \"IP Header Compression\n
    \       over PPP\", RFC 2509, February 1999.\n   [11] Bradner, S., \"Key words
    for use in RFCs to Indicate Requirement\n        Levels\", BCP 14, RFC 2119, March
    1997.\n   [12] Sklower, K., Lloyd, B., McGregor, G., Carr, D. and T.\n        Coradettim,
    \"The PPP Multilink Protocol (MP)\", RFC 1990, August\n        1996.\n   [13]
    Simpson, W., Editor, \"The Point-to-Point Protocol (PPP)\", STD\n        51, RFC
    1661, July 1994.\n   [14] Braden, R. and L. Zhang, \"Resource ReSerVation Protocol
    (RSVP)\n        -- Version 1 Message Processing Rules\", RFC 2209, September\n
    \       1997.\n"
  title: 6. References
- contents:
  - "7. Authors' Addresses\n   Steve Jackowski\n   Deterministic Networks, Inc.\n
    \  245M Mt Hermon Rd, #140\n   Scotts Valley, CA  95060\n   USA\n   Phone: +1
    (408) 813 6294\n   EMail: stevej@DeterministicNetworks.com\n   David Putzolu\n
    \  Intel Architecture Labs (IAL)\n   JF3-206-H10\n   2111 NE 25th Avenue\n   Hillsboro,
    OR 97124-5961\n   USA\n   Phone: +1 (503) 264 4510\n   EMail: David.Putzolu@intel.com\n
    \  Eric S. Crawley\n   Argon Networks, Inc.\n   25 Porter Road\n   Littleton,
    MA 01460\n   USA\n   Phone: +1 (978) 486-0665\n   EMail: esc@argon.com\n   Bruce
    Davie\n   Cisco Systems, Inc.\n   250 Apollo Drive\n   Chelmsford, MA, 01824\n
    \  USA\n   Phone: +1 (978) 244 8921\n   EMail: bdavie@cisco.com\n"
  title: 7. Authors' Addresses
- contents:
  - "Acknowledgements\n   This document draws heavily on the work of the ISSLL WG
    of the IETF.\n"
  title: Acknowledgements
- contents:
  - "Appendix A. Admission Control Considerations for POTS Modems\n   The protocols
    used in current implementations of POTS modems can\n   exhibit significant changes
    in link rate and delay over the duration\n   of a connection. Admission control
    and link scheduling algorithms\n   used with these devices MUST be prepared to
    compensate for this\n   variability in order to provide a robust implementation
    of integrated\n   services.\n   Link rate on POTS modems is typically reported
    at connection time.\n   This value may change over the duration of the connection.
    The v.34\n   protocol, used in most POTS modems, is adaptive to link conditions,\n
    \  and is able to recalibrate transmission rate multiple times over the\n   duration
    of a connection. Typically this will result in a small\n   (~10%) increase in
    transmission rate over the initial connection\n   within the first minute of a
    call. It is important to note, however,\n   that other results are possible as
    well, including decreases in\n   available bandwidth. Admission control algorithms
    MUST take such\n   changes into consideration as they occur, and implementations
    MUST be\n   able to gracefully handle the pathological case where link rate\n
    \  actually drops below the currently reserved capacity of a link.\n   Delay experienced
    by traffic over POTS modems can vary significantly\n   over time.  Unlike link
    rate, the delay often does not converge to a\n   stable value.  The v.42 protocol
    is used in most POTS modems to\n   provide link-layer reliability. This reliability,
    which is\n   implemented via retransmission, can cause frames to experience\n
    \  significant delays.  Retransmissions also implicitly steal link\n   bandwidth
    from other traffic. These delays and reductions in link\n   bandwidth make it
    extremely difficult to honor a guaranteed service\n   reservation. On a link that
    is actually lightly or moderately loaded,\n   a controlled load service can to
    some extent accept such events as\n   part of the behavior of a lightly loaded
    link. Unfortunately, as\n   actual link utilization increases, v.42 retransmissions
    have the\n   potential of stealing larger and larger fractions of available link\n
    \  bandwidth; making even controlled load service difficult to offer at\n   high
    link utilization when retransmissions occur.\n"
  title: Appendix A. Admission Control Considerations for POTS Modems
- contents:
  - "9.  Full Copyright Statement\n   Copyright (C) The Internet Society (1999).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: 9.  Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
