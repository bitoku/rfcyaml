- title: __initial_text__
  contents:
  - '                        Internet Message Format

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies the Internet Message Format (IMF), a syntax\n\
    \   for text messages that are sent between computer users, within the\n   framework\
    \ of \"electronic mail\" messages.  This specification is a\n   revision of Request\
    \ For Comments (RFC) 2822, which itself superseded\n   Request For Comments (RFC)\
    \ 822, \"Standard for the Format of ARPA\n   Internet Text Messages\", updating\
    \ it to reflect current practice and\n   incorporating incremental changes that\
    \ were specified in other RFCs.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  4\n     1.1.  Scope  . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  4\n     1.2.  Notational Conventions . . . . . . . . . . . . . .\
    \ . . . .  5\n       1.2.1.  Requirements Notation  . . . . . . . . . . . . .\
    \ . . .  5\n       1.2.2.  Syntactic Notation . . . . . . . . . . . . . . . .\
    \ . .  5\n       1.2.3.  Structure of This Document . . . . . . . . . . . . .\
    \ .  5\n   2.  Lexical Analysis of Messages . . . . . . . . . . . . . . . . .\
    \  6\n     2.1.  General Description  . . . . . . . . . . . . . . . . . . .  6\n\
    \       2.1.1.  Line Length Limits . . . . . . . . . . . . . . . . . .  7\n  \
    \   2.2.  Header Fields  . . . . . . . . . . . . . . . . . . . . . .  8\n    \
    \   2.2.1.  Unstructured Header Field Bodies . . . . . . . . . . .  8\n      \
    \ 2.2.2.  Structured Header Field Bodies . . . . . . . . . . . .  8\n       2.2.3.\
    \  Long Header Fields . . . . . . . . . . . . . . . . . .  8\n     2.3.  Body\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . .  9\n   3.  Syntax . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . 10\n     3.1.  Introduction\
    \ . . . . . . . . . . . . . . . . . . . . . . . 10\n     3.2.  Lexical Tokens\
    \ . . . . . . . . . . . . . . . . . . . . . . 10\n       3.2.1.  Quoted characters\
    \  . . . . . . . . . . . . . . . . . . 10\n       3.2.2.  Folding White Space\
    \ and Comments . . . . . . . . . . . 11\n       3.2.3.  Atom . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . 12\n       3.2.4.  Quoted Strings . . . . .\
    \ . . . . . . . . . . . . . . . 13\n       3.2.5.  Miscellaneous Tokens . . .\
    \ . . . . . . . . . . . . . . 14\n     3.3.  Date and Time Specification  . .\
    \ . . . . . . . . . . . . . 14\n     3.4.  Address Specification  . . . . . .\
    \ . . . . . . . . . . . . 16\n       3.4.1.  Addr-Spec Specification  . . . .\
    \ . . . . . . . . . . . 17\n     3.5.  Overall Message Syntax . . . . . . . .\
    \ . . . . . . . . . . 18\n     3.6.  Field Definitions  . . . . . . . . . . .\
    \ . . . . . . . . . 19\n       3.6.1.  The Origination Date Field . . . . . .\
    \ . . . . . . . . 22\n       3.6.2.  Originator Fields  . . . . . . . . . . .\
    \ . . . . . . . 22\n       3.6.3.  Destination Address Fields . . . . . . . .\
    \ . . . . . . 23\n       3.6.4.  Identification Fields  . . . . . . . . . . .\
    \ . . . . . 25\n       3.6.5.  Informational Fields . . . . . . . . . . . . .\
    \ . . . . 27\n       3.6.6.  Resent Fields  . . . . . . . . . . . . . . . . .\
    \ . . . 28\n       3.6.7.  Trace Fields . . . . . . . . . . . . . . . . . . .\
    \ . . 30\n       3.6.8.  Optional Fields  . . . . . . . . . . . . . . . . . .\
    \ . 30\n   4.  Obsolete Syntax  . . . . . . . . . . . . . . . . . . . . . . .\
    \ 31\n     4.1.  Miscellaneous Obsolete Tokens  . . . . . . . . . . . . . . 32\n\
    \     4.2.  Obsolete Folding White Space . . . . . . . . . . . . . . . 33\n  \
    \   4.3.  Obsolete Date and Time . . . . . . . . . . . . . . . . . . 33\n    \
    \ 4.4.  Obsolete Addressing  . . . . . . . . . . . . . . . . . . . 35\n     4.5.\
    \  Obsolete Header Fields . . . . . . . . . . . . . . . . . . 35\n       4.5.1.\
    \  Obsolete Origination Date Field  . . . . . . . . . . . 36\n       4.5.2.  Obsolete\
    \ Originator Fields . . . . . . . . . . . . . . 36\n       4.5.3.  Obsolete Destination\
    \ Address Fields  . . . . . . . . . 37\n       4.5.4.  Obsolete Identification\
    \ Fields . . . . . . . . . . . . 37\n       4.5.5.  Obsolete Informational Fields\
    \  . . . . . . . . . . . . 37\n       4.5.6.  Obsolete Resent Fields . . . . .\
    \ . . . . . . . . . . . 38\n       4.5.7.  Obsolete Trace Fields  . . . . . .\
    \ . . . . . . . . . . 38\n       4.5.8.  Obsolete optional fields . . . . . .\
    \ . . . . . . . . . 38\n   5.  Security Considerations  . . . . . . . . . . .\
    \ . . . . . . . . 38\n   6.  IANA Considerations  . . . . . . . . . . . . . .\
    \ . . . . . . . 39\n   Appendix A.     Example Messages . . . . . . . . . . .\
    \ . . . . . . 43\n   Appendix A.1.   Addressing Examples  . . . . . . . . . .\
    \ . . . . . 44\n   Appendix A.1.1. A Message from One Person to Another with\n\
    \                   Simple Addressing  . . . . . . . . . . . . . . . . 44\n  \
    \ Appendix A.1.2. Different Types of Mailboxes . . . . . . . . . . . 45\n   Appendix\
    \ A.1.3. Group Addresses  . . . . . . . . . . . . . . . . . 45\n   Appendix A.2.\
    \   Reply Messages . . . . . . . . . . . . . . . . . . 46\n   Appendix A.3.  \
    \ Resent Messages  . . . . . . . . . . . . . . . . . 47\n   Appendix A.4.   Messages\
    \ with Trace Fields . . . . . . . . . . . . 48\n   Appendix A.5.   White Space,\
    \ Comments, and Other Oddities  . . . . 49\n   Appendix A.6.   Obsoleted Forms\
    \  . . . . . . . . . . . . . . . . . 50\n   Appendix A.6.1. Obsolete Addressing\
    \  . . . . . . . . . . . . . . . 50\n   Appendix A.6.2. Obsolete Dates . . . .\
    \ . . . . . . . . . . . . . . 50\n   Appendix A.6.3. Obsolete White Space and\
    \ Comments  . . . . . . . . 51\n   Appendix B.     Differences from Earlier Specifications\
    \  . . . . . 52\n   Appendix C.     Acknowledgements . . . . . . . . . . . . .\
    \ . . . . 53\n   7.  References . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . 55\n     7.1.  Normative References . . . . . . . . . . . . . . . . .\
    \ . . 55\n     7.2.  Informative References . . . . . . . . . . . . . . . . .\
    \ . 55\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  Scope
  contents:
  - "1.1.  Scope\n   This document specifies the Internet Message Format (IMF), a\
    \ syntax\n   for text messages that are sent between computer users, within the\n\
    \   framework of \"electronic mail\" messages.  This specification is an\n   update\
    \ to [RFC2822], which itself superseded [RFC0822], updating it\n   to reflect\
    \ current practice and incorporating incremental changes\n   that were specified\
    \ in other RFCs such as [RFC1123].\n   This document specifies a syntax only for\
    \ text messages.  In\n   particular, it makes no provision for the transmission\
    \ of images,\n   audio, or other sorts of structured data in electronic mail messages.\n\
    \   There are several extensions published, such as the MIME document\n   series\
    \ ([RFC2045], [RFC2046], [RFC2049]), which describe mechanisms\n   for the transmission\
    \ of such data through electronic mail, either by\n   extending the syntax provided\
    \ here or by structuring such messages to\n   conform to this syntax.  Those mechanisms\
    \ are outside of the scope of\n   this specification.\n   In the context of electronic\
    \ mail, messages are viewed as having an\n   envelope and contents.  The envelope\
    \ contains whatever information is\n   needed to accomplish transmission and delivery.\
    \  (See [RFC5321] for a\n   discussion of the envelope.)  The contents comprise\
    \ the object to be\n   delivered to the recipient.  This specification applies\
    \ only to the\n   format and some of the semantics of message contents.  It contains\
    \ no\n   specification of the information in the envelope.\n   However, some message\
    \ systems may use information from the contents\n   to create the envelope.  It\
    \ is intended that this specification\n   facilitate the acquisition of such information\
    \ by programs.\n   This specification is intended as a definition of what message\n\
    \   content format is to be passed between systems.  Though some message\n   systems\
    \ locally store messages in this format (which eliminates the\n   need for translation\
    \ between formats) and others use formats that\n   differ from the one specified\
    \ in this specification, local storage is\n   outside of the scope of this specification.\n\
    \      Note: This specification is not intended to dictate the internal\n    \
    \  formats used by sites, the specific message system features that\n      they\
    \ are expected to support, or any of the characteristics of\n      user interface\
    \ programs that create or read messages.  In\n      addition, this document does\
    \ not specify an encoding of the\n      characters for either transport or storage;\
    \ that is, it does not\n      specify the number of bits used or how those bits\
    \ are specifically\n      transferred over the wire or stored on disk.\n"
- title: 1.2.  Notational Conventions
  contents:
  - '1.2.  Notational Conventions

    '
- title: 1.2.1.  Requirements Notation
  contents:
  - "1.2.1.  Requirements Notation\n   This document occasionally uses terms that\
    \ appear in capital letters.\n   When the terms \"MUST\", \"SHOULD\", \"RECOMMENDED\"\
    , \"MUST NOT\", \"SHOULD\n   NOT\", and \"MAY\" appear capitalized, they are being\
    \ used to indicate\n   particular requirements of this specification.  A discussion\
    \ of the\n   meanings of these terms appears in [RFC2119].\n"
- title: 1.2.2.  Syntactic Notation
  contents:
  - "1.2.2.  Syntactic Notation\n   This specification uses the Augmented Backus-Naur\
    \ Form (ABNF)\n   [RFC5234] notation for the formal definitions of the syntax\
    \ of\n   messages.  Characters will be specified either by a decimal value\n \
    \  (e.g., the value %d65 for uppercase A and %d97 for lowercase A) or by\n   a\
    \ case-insensitive literal value enclosed in quotation marks (e.g.,\n   \"A\"\
    \ for either uppercase or lowercase A).\n"
- title: 1.2.3.  Structure of This Document
  contents:
  - "1.2.3.  Structure of This Document\n   This document is divided into several\
    \ sections.\n   This section, section 1, is a short introduction to the document.\n\
    \   Section 2 lays out the general description of a message and its\n   constituent\
    \ parts.  This is an overview to help the reader understand\n   some of the general\
    \ principles used in the later portions of this\n   document.  Any examples in\
    \ this section MUST NOT be taken as\n   specification of the formal syntax of\
    \ any part of a message.\n   Section 3 specifies formal ABNF rules for the structure\
    \ of each part\n   of a message (the syntax) and describes the relationship between\n\
    \   those parts and their meaning in the context of a message (the\n   semantics).\
    \  That is, it lays out the actual rules for the structure\n   of each part of\
    \ a message (the syntax) as well as a description of\n   the parts and instructions\
    \ for their interpretation (the semantics).\n   This includes analysis of the\
    \ syntax and semantics of subparts of\n   messages that have specific structure.\
    \  The syntax included in\n   section 3 represents messages as they MUST be created.\
    \  There are\n   also notes in section 3 to indicate if any of the options specified\n\
    \   in the syntax SHOULD be used over any of the others.\n   Both sections 2 and\
    \ 3 describe messages that are legal to generate\n   for purposes of this specification.\n\
    \   Section 4 of this document specifies an \"obsolete\" syntax.  There are\n\
    \   references in section 3 to these obsolete syntactic elements.  The\n   rules\
    \ of the obsolete syntax are elements that have appeared in\n   earlier versions\
    \ of this specification or have previously been widely\n   used in Internet messages.\
    \  As such, these elements MUST be\n   interpreted by parsers of messages in order\
    \ to be conformant to this\n   specification.  However, since items in this syntax\
    \ have been\n   determined to be non-interoperable or to cause significant problems\n\
    \   for recipients of messages, they MUST NOT be generated by creators of\n  \
    \ conformant messages.\n   Section 5 details security considerations to take into\
    \ account when\n   implementing this specification.\n   Appendix A lists examples\
    \ of different sorts of messages.  These\n   examples are not exhaustive of the\
    \ types of messages that appear on\n   the Internet, but give a broad overview\
    \ of certain syntactic forms.\n   Appendix B lists the differences between this\
    \ specification and\n   earlier specifications for Internet messages.\n   Appendix\
    \ C contains acknowledgements.\n"
- title: 2.  Lexical Analysis of Messages
  contents:
  - '2.  Lexical Analysis of Messages

    '
- title: 2.1.  General Description
  contents:
  - "2.1.  General Description\n   At the most basic level, a message is a series\
    \ of characters.  A\n   message that is conformant with this specification is\
    \ composed of\n   characters with values in the range of 1 through 127 and interpreted\n\
    \   as US-ASCII [ANSI.X3-4.1986] characters.  For brevity, this document\n   sometimes\
    \ refers to this range of characters as simply \"US-ASCII\n   characters\".\n\
    \      Note: This document specifies that messages are made up of\n      characters\
    \ in the US-ASCII range of 1 through 127.  There are\n      other documents, specifically\
    \ the MIME document series ([RFC2045],\n      [RFC2046], [RFC2047], [RFC2049],\
    \ [RFC4288], [RFC4289]), that\n      extend this specification to allow for values\
    \ outside of that\n      range.  Discussion of those mechanisms is not within\
    \ the scope of\n      this specification.\n   Messages are divided into lines\
    \ of characters.  A line is a series of\n   characters that is delimited with\
    \ the two characters carriage-return\n   and line-feed; that is, the carriage\
    \ return (CR) character (ASCII\n   value 13) followed immediately by the line\
    \ feed (LF) character (ASCII\n   value 10).  (The carriage return/line feed pair\
    \ is usually written in\n   this document as \"CRLF\".)\n   A message consists\
    \ of header fields (collectively called \"the header\n   section of the message\"\
    ) followed, optionally, by a body.  The header\n   section is a sequence of lines\
    \ of characters with special syntax as\n   defined in this specification.  The\
    \ body is simply a sequence of\n   characters that follows the header section\
    \ and is separated from the\n   header section by an empty line (i.e., a line\
    \ with nothing preceding\n   the CRLF).\n      Note: Common parlance and earlier\
    \ versions of this specification\n      use the term \"header\" to either refer\
    \ to the entire header section\n      or to refer to an individual header field.\
    \  To avoid ambiguity,\n      this document does not use the terms \"header\"\
    \ or \"headers\" in\n      isolation, but instead always uses \"header field\"\
    \ to refer to the\n      individual field and \"header section\" to refer to the\
    \ entire\n      collection.\n"
- title: 2.1.1.  Line Length Limits
  contents:
  - "2.1.1.  Line Length Limits\n   There are two limits that this specification places\
    \ on the number of\n   characters in a line.  Each line of characters MUST be\
    \ no more than\n   998 characters, and SHOULD be no more than 78 characters, excluding\n\
    \   the CRLF.\n   The 998 character limit is due to limitations in many implementations\n\
    \   that send, receive, or store IMF messages which simply cannot handle\n   more\
    \ than 998 characters on a line.  Receiving implementations would\n   do well\
    \ to handle an arbitrarily large number of characters in a line\n   for robustness\
    \ sake.  However, there are so many implementations that\n   (in compliance with\
    \ the transport requirements of [RFC5321]) do not\n   accept messages containing\
    \ more than 1000 characters including the CR\n   and LF per line, it is important\
    \ for implementations not to create\n   such messages.\n   The more conservative\
    \ 78 character recommendation is to accommodate\n   the many implementations of\
    \ user interfaces that display these\n   messages which may truncate, or disastrously\
    \ wrap, the display of\n   more than 78 characters per line, in spite of the fact\
    \ that such\n   implementations are non-conformant to the intent of this\n   specification\
    \ (and that of [RFC5321] if they actually cause\n   information to be lost). \
    \ Again, even though this limitation is put\n   on messages, it is incumbent upon\
    \ implementations that display\n   messages to handle an arbitrarily large number\
    \ of characters in a\n   line (certainly at least up to the 998 character limit)\
    \ for the sake\n   of robustness.\n"
- title: 2.2.  Header Fields
  contents:
  - "2.2.  Header Fields\n   Header fields are lines beginning with a field name,\
    \ followed by a\n   colon (\":\"), followed by a field body, and terminated by\
    \ CRLF.  A\n   field name MUST be composed of printable US-ASCII characters (i.e.,\n\
    \   characters that have values between 33 and 126, inclusive), except\n   colon.\
    \  A field body may be composed of printable US-ASCII characters\n   as well as\
    \ the space (SP, ASCII value 32) and horizontal tab (HTAB,\n   ASCII value 9)\
    \ characters (together known as the white space\n   characters, WSP).  A field\
    \ body MUST NOT include CR and LF except\n   when used in \"folding\" and \"unfolding\"\
    , as described in section\n   2.2.3.  All field bodies MUST conform to the syntax\
    \ described in\n   sections 3 and 4 of this specification.\n"
- title: 2.2.1.  Unstructured Header Field Bodies
  contents:
  - "2.2.1.  Unstructured Header Field Bodies\n   Some field bodies in this specification\
    \ are defined simply as\n   \"unstructured\" (which is specified in section 3.2.5\
    \ as any printable\n   US-ASCII characters plus white space characters) with no\
    \ further\n   restrictions.  These are referred to as unstructured field bodies.\n\
    \   Semantically, unstructured field bodies are simply to be treated as a\n  \
    \ single line of characters with no further processing (except for\n   \"folding\"\
    \ and \"unfolding\" as described in section 2.2.3).\n"
- title: 2.2.2.  Structured Header Field Bodies
  contents:
  - "2.2.2.  Structured Header Field Bodies\n   Some field bodies in this specification\
    \ have a syntax that is more\n   restrictive than the unstructured field bodies\
    \ described above.\n   These are referred to as \"structured\" field bodies. \
    \ Structured field\n   bodies are sequences of specific lexical tokens as described\
    \ in\n   sections 3 and 4 of this specification.  Many of these tokens are\n \
    \  allowed (according to their syntax) to be introduced or end with\n   comments\
    \ (as described in section 3.2.2) as well as the white space\n   characters, and\
    \ those white space characters are subject to \"folding\"\n   and \"unfolding\"\
    \ as described in section 2.2.3.  Semantic analysis of\n   structured field bodies\
    \ is given along with their syntax.\n"
- title: 2.2.3.  Long Header Fields
  contents:
  - "2.2.3.  Long Header Fields\n   Each header field is logically a single line of\
    \ characters comprising\n   the field name, the colon, and the field body.  For\
    \ convenience\n   however, and to deal with the 998/78 character limitations per\
    \ line,\n   the field body portion of a header field can be split into a\n   multiple-line\
    \ representation; this is called \"folding\".  The general\n   rule is that wherever\
    \ this specification allows for folding white\n   space (not simply WSP characters),\
    \ a CRLF may be inserted before any\n   WSP.\n   For example, the header field:\n\
    \   Subject: This is a test\n   can be represented as:\n   Subject: This\n   \
    \ is a test\n      Note: Though structured field bodies are defined in such a\
    \ way\n      that folding can take place between many of the lexical tokens\n\
    \      (and even within some of the lexical tokens), folding SHOULD be\n     \
    \ limited to placing the CRLF at higher-level syntactic breaks.  For\n      instance,\
    \ if a field body is defined as comma-separated values, it\n      is recommended\
    \ that folding occur after the comma separating the\n      structured items in\
    \ preference to other places where the field\n      could be folded, even if it\
    \ is allowed elsewhere.\n   The process of moving from this folded multiple-line\
    \ representation\n   of a header field to its single line representation is called\n\
    \   \"unfolding\".  Unfolding is accomplished by simply removing any CRLF\n  \
    \ that is immediately followed by WSP.  Each header field should be\n   treated\
    \ in its unfolded form for further syntactic and semantic\n   evaluation.  An\
    \ unfolded header field has no length restriction and\n   therefore may be indeterminately\
    \ long.\n"
- title: 2.3.  Body
  contents:
  - "2.3.  Body\n   The body of a message is simply lines of US-ASCII characters.\
    \  The\n   only two limitations on the body are as follows:\n   o  CR and LF MUST\
    \ only occur together as CRLF; they MUST NOT appear\n      independently in the\
    \ body.\n   o  Lines of characters in the body MUST be limited to 998 characters,\n\
    \      and SHOULD be limited to 78 characters, excluding the CRLF.\n      Note:\
    \ As was stated earlier, there are other documents,\n      specifically the MIME\
    \ documents ([RFC2045], [RFC2046], [RFC2049],\n      [RFC4288], [RFC4289]), that\
    \ extend (and limit) this specification\n      to allow for different sorts of\
    \ message bodies.  Again, these\n      mechanisms are beyond the scope of this\
    \ document.\n"
- title: 3.  Syntax
  contents:
  - '3.  Syntax

    '
- title: 3.1.  Introduction
  contents:
  - "3.1.  Introduction\n   The syntax as given in this section defines the legal\
    \ syntax of\n   Internet messages.  Messages that are conformant to this\n   specification\
    \ MUST conform to the syntax in this section.  If there\n   are options in this\
    \ section where one option SHOULD be generated,\n   that is indicated either in\
    \ the prose or in a comment next to the\n   syntax.\n   For the defined expressions,\
    \ a short description of the syntax and\n   use is given, followed by the syntax\
    \ in ABNF, followed by a semantic\n   analysis.  The following primitive tokens\
    \ that are used but otherwise\n   unspecified are taken from the \"Core Rules\"\
    \ of [RFC5234], Appendix\n   B.1: CR, LF, CRLF, HTAB, SP, WSP, DQUOTE, DIGIT,\
    \ ALPHA, and VCHAR.\n   In some of the definitions, there will be non-terminals\
    \ whose names\n   start with \"obs-\".  These \"obs-\" elements refer to tokens\
    \ defined in\n   the obsolete syntax in section 4.  In all cases, these productions\n\
    \   are to be ignored for the purposes of generating legal Internet\n   messages\
    \ and MUST NOT be used as part of such a message.  However,\n   when interpreting\
    \ messages, these tokens MUST be honored as part of\n   the legal syntax.  In\
    \ this sense, section 3 defines a grammar for the\n   generation of messages,\
    \ with \"obs-\" elements that are to be ignored,\n   while section 4 adds grammar\
    \ for the interpretation of messages.\n"
- title: 3.2.  Lexical Tokens
  contents:
  - "3.2.  Lexical Tokens\n   The following rules are used to define an underlying\
    \ lexical\n   analyzer, which feeds tokens to the higher-level parsers.  This\n\
    \   section defines the tokens used in structured header field bodies.\n     \
    \ Note: Readers of this specification need to pay special attention\n      to\
    \ how these lexical tokens are used in both the lower-level and\n      higher-level\
    \ syntax later in the document.  Particularly, the\n      white space tokens and\
    \ the comment tokens defined in section 3.2.2\n      get used in the lower-level\
    \ tokens defined here, and those lower-\n      level tokens are in turn used as\
    \ parts of the higher-level tokens\n      defined later.  Therefore, white space\
    \ and comments may be allowed\n      in the higher-level tokens even though they\
    \ may not explicitly\n      appear in a particular definition.\n"
- title: 3.2.1.  Quoted characters
  contents:
  - "3.2.1.  Quoted characters\n   Some characters are reserved for special interpretation,\
    \ such as\n   delimiting lexical tokens.  To permit use of these characters as\n\
    \   uninterpreted data, a quoting mechanism is provided.\n   quoted-pair     =\
    \   (\"\\\" (VCHAR / WSP)) / obs-qp\n   Where any quoted-pair appears, it is to\
    \ be interpreted as the\n   character alone.  That is to say, the \"\\\" character\
    \ that appears as\n   part of a quoted-pair is semantically \"invisible\".\n \
    \     Note: The \"\\\" character may appear in a message where it is not\n   \
    \   part of a quoted-pair.  A \"\\\" character that does not appear in a\n   \
    \   quoted-pair is not semantically invisible.  The only places in\n      this\
    \ specification where quoted-pair currently appears are\n      ccontent, qcontent,\
    \ and in obs-dtext in section 4.\n"
- title: 3.2.2.  Folding White Space and Comments
  contents:
  - "3.2.2.  Folding White Space and Comments\n   White space characters, including\
    \ white space used in folding\n   (described in section 2.2.3), may appear between\
    \ many elements in\n   header field bodies.  Also, strings of characters that\
    \ are treated as\n   comments may be included in structured field bodies as characters\n\
    \   enclosed in parentheses.  The following defines the folding white\n   space\
    \ (FWS) and comment constructs.\n   Strings of characters enclosed in parentheses\
    \ are considered comments\n   so long as they do not appear within a \"quoted-string\"\
    , as defined in\n   section 3.2.4.  Comments may nest.\n   There are several places\
    \ in this specification where comments and FWS\n   may be freely inserted.  To\
    \ accommodate that syntax, an additional\n   token for \"CFWS\" is defined for\
    \ places where comments and/or FWS can\n   occur.  However, where CFWS occurs\
    \ in this specification, it MUST NOT\n   be inserted in such a way that any line\
    \ of a folded header field is\n   made up entirely of WSP characters and nothing\
    \ else.\n   FWS             =   ([*WSP CRLF] 1*WSP) /  obs-FWS\n             \
    \                             ; Folding white space\n   ctext           =   %d33-39\
    \ /          ; Printable US-ASCII\n                       %d42-91 /          ;\
    \  characters not including\n                       %d93-126 /         ;  \"(\"\
    , \")\", or \"\\\"\n                       obs-ctext\n   ccontent        =   ctext\
    \ / quoted-pair / comment\n   comment         =   \"(\" *([FWS] ccontent) [FWS]\
    \ \")\"\n   CFWS            =   (1*([FWS] comment) [FWS]) / FWS\n   Throughout\
    \ this specification, where FWS (the folding white space\n   token) appears, it\
    \ indicates a place where folding, as discussed in\n   section 2.2.3, may take\
    \ place.  Wherever folding appears in a message\n   (that is, a header field body\
    \ containing a CRLF followed by any WSP),\n   unfolding (removal of the CRLF)\
    \ is performed before any further\n   semantic analysis is performed on that header\
    \ field according to this\n   specification.  That is to say, any CRLF that appears\
    \ in FWS is\n   semantically \"invisible\".\n   A comment is normally used in\
    \ a structured field body to provide some\n   human-readable informational text.\
    \  Since a comment is allowed to\n   contain FWS, folding is permitted within\
    \ the comment.  Also note that\n   since quoted-pair is allowed in a comment,\
    \ the parentheses and\n   backslash characters may appear in a comment, so long\
    \ as they appear\n   as a quoted-pair.  Semantically, the enclosing parentheses\
    \ are not\n   part of the comment; the comment is what is contained between the\
    \ two\n   parentheses.  As stated earlier, the \"\\\" in any quoted-pair and the\n\
    \   CRLF in any FWS that appears within the comment are semantically\n   \"invisible\"\
    \ and therefore not part of the comment either.\n   Runs of FWS, comment, or CFWS\
    \ that occur between lexical tokens in a\n   structured header field are semantically\
    \ interpreted as a single\n   space character.\n"
- title: 3.2.3.  Atom
  contents:
  - "3.2.3.  Atom\n   Several productions in structured header field bodies are simply\n\
    \   strings of certain basic characters.  Such productions are called\n   atoms.\n\
    \   Some of the structured header field bodies also allow the period\n   character\
    \ (\".\", ASCII value 46) within runs of atext.  An additional\n   \"dot-atom\"\
    \ token is defined for those purposes.\n      Note: The \"specials\" token does\
    \ not appear anywhere else in this\n      specification.  It is simply the visible\
    \ (i.e., non-control, non-\n      white space) characters that do not appear in\
    \ atext.  It is\n      provided only because it is useful for implementers who\
    \ use tools\n      that lexically analyze messages.  Each of the characters in\n\
    \      specials can be used to indicate a tokenization point in lexical\n    \
    \  analysis.\n   atext           =   ALPHA / DIGIT /    ; Printable US-ASCII\n\
    \                       \"!\" / \"#\" /        ;  characters not including\n \
    \                      \"$\" / \"%\" /        ;  specials.  Used for atoms.\n\
    \                       \"&\" / \"'\" /\n                       \"*\" / \"+\"\
    \ /\n                       \"-\" / \"/\" /\n                       \"=\" / \"\
    ?\" /\n                       \"^\" / \"_\" /\n                       \"`\" /\
    \ \"{\" /\n                       \"|\" / \"}\" /\n                       \"~\"\
    \n   atom            =   [CFWS] 1*atext [CFWS]\n   dot-atom-text   =   1*atext\
    \ *(\".\" 1*atext)\n   dot-atom        =   [CFWS] dot-atom-text [CFWS]\n   specials\
    \        =   \"(\" / \")\" /        ; Special characters that do\n           \
    \            \"<\" / \">\" /        ;  not appear in atext\n                 \
    \      \"[\" / \"]\" /\n                       \":\" / \";\" /\n             \
    \          \"@\" / \"\\\" /\n                       \",\" / \".\" /\n        \
    \               DQUOTE\n   Both atom and dot-atom are interpreted as a single\
    \ unit, comprising\n   the string of characters that make it up.  Semantically,\
    \ the optional\n   comments and FWS surrounding the rest of the characters are\
    \ not part\n   of the atom; the atom is only the run of atext characters in an\
    \ atom,\n   or the atext and \".\" characters in a dot-atom.\n"
- title: 3.2.4.  Quoted Strings
  contents:
  - "3.2.4.  Quoted Strings\n   Strings of characters that include characters other\
    \ than those\n   allowed in atoms can be represented in a quoted string format,\
    \ where\n   the characters are surrounded by quote (DQUOTE, ASCII value 34)\n\
    \   characters.\n   qtext           =   %d33 /             ; Printable US-ASCII\n\
    \                       %d35-91 /          ;  characters not including\n     \
    \                  %d93-126 /         ;  \"\\\" or the quote character\n     \
    \                  obs-qtext\n   qcontent        =   qtext / quoted-pair\n   quoted-string\
    \   =   [CFWS]\n                       DQUOTE *([FWS] qcontent) [FWS] DQUOTE\n\
    \                       [CFWS]\n   A quoted-string is treated as a unit.  That\
    \ is, quoted-string is\n   identical to atom, semantically.  Since a quoted-string\
    \ is allowed to\n   contain FWS, folding is permitted.  Also note that since quoted-pair\n\
    \   is allowed in a quoted-string, the quote and backslash characters may\n  \
    \ appear in a quoted-string so long as they appear as a quoted-pair.\n   Semantically,\
    \ neither the optional CFWS outside of the quote\n   characters nor the quote\
    \ characters themselves are part of the\n   quoted-string; the quoted-string is\
    \ what is contained between the two\n   quote characters.  As stated earlier,\
    \ the \"\\\" in any quoted-pair and\n   the CRLF in any FWS/CFWS that appears\
    \ within the quoted-string are\n   semantically \"invisible\" and therefore not\
    \ part of the quoted-string\n   either.\n"
- title: 3.2.5.  Miscellaneous Tokens
  contents:
  - "3.2.5.  Miscellaneous Tokens\n   Three additional tokens are defined: word and\
    \ phrase for combinations\n   of atoms and/or quoted-strings, and unstructured\
    \ for use in\n   unstructured header fields and in some places within structured\n\
    \   header fields.\n   word            =   atom / quoted-string\n   phrase   \
    \       =   1*word / obs-phrase\n   unstructured    =   (*([FWS] VCHAR) *WSP)\
    \ / obs-unstruct\n"
- title: 3.3.  Date and Time Specification
  contents:
  - "3.3.  Date and Time Specification\n   Date and time values occur in several header\
    \ fields.  This section\n   specifies the syntax for a full date and time specification.\
    \  Though\n   folding white space is permitted throughout the date-time\n   specification,\
    \ it is RECOMMENDED that a single space be used in each\n   place that FWS appears\
    \ (whether it is required or optional); some\n   older implementations will not\
    \ interpret longer sequences of folding\n   white space correctly.\n   date-time\
    \       =   [ day-of-week \",\" ] date time [CFWS]\n   day-of-week     =   ([FWS]\
    \ day-name) / obs-day-of-week\n   day-name        =   \"Mon\" / \"Tue\" / \"Wed\"\
    \ / \"Thu\" /\n                       \"Fri\" / \"Sat\" / \"Sun\"\n   date   \
    \         =   day month year\n   day             =   ([FWS] 1*2DIGIT FWS) / obs-day\n\
    \   month           =   \"Jan\" / \"Feb\" / \"Mar\" / \"Apr\" /\n            \
    \           \"May\" / \"Jun\" / \"Jul\" / \"Aug\" /\n                       \"\
    Sep\" / \"Oct\" / \"Nov\" / \"Dec\"\n   year            =   (FWS 4*DIGIT FWS)\
    \ / obs-year\n   time            =   time-of-day zone\n   time-of-day     =  \
    \ hour \":\" minute [ \":\" second ]\n   hour            =   2DIGIT / obs-hour\n\
    \   minute          =   2DIGIT / obs-minute\n   second          =   2DIGIT / obs-second\n\
    \   zone            =   (FWS ( \"+\" / \"-\" ) 4DIGIT) / obs-zone\n   The day\
    \ is the numeric day of the month.  The year is any numeric\n   year 1900 or later.\n\
    \   The time-of-day specifies the number of hours, minutes, and\n   optionally\
    \ seconds since midnight of the date indicated.\n   The date and time-of-day SHOULD\
    \ express local time.\n   The zone specifies the offset from Coordinated Universal\
    \ Time (UTC,\n   formerly referred to as \"Greenwich Mean Time\") that the date\
    \ and\n   time-of-day represent.  The \"+\" or \"-\" indicates whether the time-of-\n\
    \   day is ahead of (i.e., east of) or behind (i.e., west of) Universal\n   Time.\
    \  The first two digits indicate the number of hours difference\n   from Universal\
    \ Time, and the last two digits indicate the number of\n   additional minutes\
    \ difference from Universal Time.  (Hence, +hhmm\n   means +(hh * 60 + mm) minutes,\
    \ and -hhmm means -(hh * 60 + mm)\n   minutes).  The form \"+0000\" SHOULD be\
    \ used to indicate a time zone at\n   Universal Time.  Though \"-0000\" also indicates\
    \ Universal Time, it is\n   used to indicate that the time was generated on a\
    \ system that may be\n   in a local time zone other than Universal Time and that\
    \ the date-time\n   contains no information about the local time zone.\n   A date-time\
    \ specification MUST be semantically valid.  That is, the\n   day-of-week (if\
    \ included) MUST be the day implied by the date, the\n   numeric day-of-month\
    \ MUST be between 1 and the number of days allowed\n   for the specified month\
    \ (in the specified year), the time-of-day MUST\n   be in the range 00:00:00 through\
    \ 23:59:60 (the number of seconds\n   allowing for a leap second; see [RFC1305]),\
    \ and the last two digits\n   of the zone MUST be within the range 00 through\
    \ 59.\n"
- title: 3.4.  Address Specification
  contents:
  - "3.4.  Address Specification\n   Addresses occur in several message header fields\
    \ to indicate senders\n   and recipients of messages.  An address may either be\
    \ an individual\n   mailbox, or a group of mailboxes.\n   address         =  \
    \ mailbox / group\n   mailbox         =   name-addr / addr-spec\n   name-addr\
    \       =   [display-name] angle-addr\n   angle-addr      =   [CFWS] \"<\" addr-spec\
    \ \">\" [CFWS] /\n                       obs-angle-addr\n   group           =\
    \   display-name \":\" [group-list] \";\" [CFWS]\n   display-name    =   phrase\n\
    \   mailbox-list    =   (mailbox *(\",\" mailbox)) / obs-mbox-list\n   address-list\
    \    =   (address *(\",\" address)) / obs-addr-list\n   group-list      =   mailbox-list\
    \ / CFWS / obs-group-list\n   A mailbox receives mail.  It is a conceptual entity\
    \ that does not\n   necessarily pertain to file storage.  For example, some sites\
    \ may\n   choose to print mail on a printer and deliver the output to the\n  \
    \ addressee's desk.\n   Normally, a mailbox is composed of two parts: (1) an optional\
    \ display\n   name that indicates the name of the recipient (which can be a person\n\
    \   or a system) that could be displayed to the user of a mail\n   application,\
    \ and (2) an addr-spec address enclosed in angle brackets\n   (\"<\" and \">\"\
    ).  There is an alternate simple form of a mailbox where\n   the addr-spec address\
    \ appears alone, without the recipient's name or\n   the angle brackets.  The\
    \ Internet addr-spec address is described in\n   section 3.4.1.\n      Note: Some\
    \ legacy implementations used the simple form where the\n      addr-spec appears\
    \ without the angle brackets, but included the\n      name of the recipient in\
    \ parentheses as a comment following the\n      addr-spec.  Since the meaning\
    \ of the information in a comment is\n      unspecified, implementations SHOULD\
    \ use the full name-addr form of\n      the mailbox, instead of the legacy form,\
    \ to specify the display\n      name associated with a mailbox.  Also, because\
    \ some legacy\n      implementations interpret the comment, comments generally\
    \ SHOULD\n      NOT be used in address fields to avoid confusing such\n      implementations.\n\
    \   When it is desirable to treat several mailboxes as a single unit\n   (i.e.,\
    \ in a distribution list), the group construct can be used.  The\n   group construct\
    \ allows the sender to indicate a named group of\n   recipients.  This is done\
    \ by giving a display name for the group,\n   followed by a colon, followed by\
    \ a comma-separated list of any number\n   of mailboxes (including zero and one),\
    \ and ending with a semicolon.\n   Because the list of mailboxes can be empty,\
    \ using the group construct\n   is also a simple way to communicate to recipients\
    \ that the message\n   was sent to one or more named sets of recipients, without\
    \ actually\n   providing the individual mailbox address for any of those recipients.\n"
- title: 3.4.1.  Addr-Spec Specification
  contents:
  - "3.4.1.  Addr-Spec Specification\n   An addr-spec is a specific Internet identifier\
    \ that contains a\n   locally interpreted string followed by the at-sign character\
    \ (\"@\",\n   ASCII value 64) followed by an Internet domain.  The locally\n \
    \  interpreted string is either a quoted-string or a dot-atom.  If the\n   string\
    \ can be represented as a dot-atom (that is, it contains no\n   characters other\
    \ than atext characters or \".\" surrounded by atext\n   characters), then the\
    \ dot-atom form SHOULD be used and the quoted-\n   string form SHOULD NOT be used.\
    \  Comments and folding white space\n   SHOULD NOT be used around the \"@\" in\
    \ the addr-spec.\n      Note: A liberal syntax for the domain portion of addr-spec\
    \ is\n      given here.  However, the domain portion contains addressing\n   \
    \   information specified by and used in other protocols (e.g.,\n      [RFC1034],\
    \ [RFC1035], [RFC1123], [RFC5321]).  It is therefore\n      incumbent upon implementations\
    \ to conform to the syntax of\n      addresses for the context in which they are\
    \ used.\n   addr-spec       =   local-part \"@\" domain\n   local-part      =\
    \   dot-atom / quoted-string / obs-local-part\n   domain          =   dot-atom\
    \ / domain-literal / obs-domain\n   domain-literal  =   [CFWS] \"[\" *([FWS] dtext)\
    \ [FWS] \"]\" [CFWS]\n   dtext           =   %d33-90 /          ; Printable US-ASCII\n\
    \                       %d94-126 /         ;  characters not including\n     \
    \                  obs-dtext          ;  \"[\", \"]\", or \"\\\"\n   The domain\
    \ portion identifies the point to which the mail is\n   delivered.  In the dot-atom\
    \ form, this is interpreted as an Internet\n   domain name (either a host name\
    \ or a mail exchanger name) as\n   described in [RFC1034], [RFC1035], and [RFC1123].\
    \  In the domain-\n   literal form, the domain is interpreted as the literal Internet\n\
    \   address of the particular host.  In both cases, how addressing is\n   used\
    \ and how messages are transported to a particular host is covered\n   in separate\
    \ documents, such as [RFC5321].  These mechanisms are\n   outside of the scope\
    \ of this document.\n   The local-part portion is a domain-dependent string. \
    \ In addresses,\n   it is simply interpreted on the particular host as a name\
    \ of a\n   particular mailbox.\n"
- title: 3.5.  Overall Message Syntax
  contents:
  - "3.5.  Overall Message Syntax\n   A message consists of header fields, optionally\
    \ followed by a message\n   body.  Lines in a message MUST be a maximum of 998\
    \ characters\n   excluding the CRLF, but it is RECOMMENDED that lines be limited\
    \ to 78\n   characters excluding the CRLF.  (See section 2.1.1 for explanation.)\n\
    \   In a message body, though all of the characters listed in the text\n   rule\
    \ MAY be used, the use of US-ASCII control characters (values 1\n   through 8,\
    \ 11, 12, and 14 through 31) is discouraged since their\n   interpretation by\
    \ receivers for display is not guaranteed.\n   message         =   (fields / obs-fields)\n\
    \                       [CRLF body]\n   body            =   (*(*998text CRLF)\
    \ *998text) / obs-body\n   text            =   %d1-9 /            ; Characters\
    \ excluding CR\n                       %d11 /             ;  and LF\n        \
    \               %d12 /\n                       %d14-127\n   The header fields\
    \ carry most of the semantic information and are\n   defined in section 3.6. \
    \ The body is simply a series of lines of text\n   that are uninterpreted for\
    \ the purposes of this specification.\n"
- title: 3.6.  Field Definitions
  contents:
  - "3.6.  Field Definitions\n   The header fields of a message are defined here.\
    \  All header fields\n   have the same general syntactic structure: a field name,\
    \ followed by\n   a colon, followed by the field body.  The specific syntax for\
    \ each\n   header field is defined in the subsequent sections.\n      Note: In\
    \ the ABNF syntax for each field in subsequent sections,\n      each field name\
    \ is followed by the required colon.  However, for\n      brevity, sometimes the\
    \ colon is not referred to in the textual\n      description of the syntax.  It\
    \ is, nonetheless, required.\n   It is important to note that the header fields\
    \ are not guaranteed to\n   be in a particular order.  They may appear in any\
    \ order, and they\n   have been known to be reordered occasionally when transported\
    \ over\n   the Internet.  However, for the purposes of this specification,\n \
    \  header fields SHOULD NOT be reordered when a message is transported\n   or\
    \ transformed.  More importantly, the trace header fields and resent\n   header\
    \ fields MUST NOT be reordered, and SHOULD be kept in blocks\n   prepended to\
    \ the message.  See sections 3.6.6 and 3.6.7 for more\n   information.\n   The\
    \ only required header fields are the origination date field and\n   the originator\
    \ address field(s).  All other header fields are\n   syntactically optional. \
    \ More information is contained in the table\n   following this definition.\n\
    \   fields          =   *(trace\n                         *optional-field /\n\
    \                         *(resent-date /\n                          resent-from\
    \ /\n                          resent-sender /\n                          resent-to\
    \ /\n                          resent-cc /\n                          resent-bcc\
    \ /\n                          resent-msg-id))\n                       *(orig-date\
    \ /\n                       from /\n                       sender /\n        \
    \               reply-to /\n                       to /\n                    \
    \   cc /\n                       bcc /\n                       message-id /\n\
    \                       in-reply-to /\n                       references /\n \
    \                      subject /\n                       comments /\n        \
    \               keywords /\n                       optional-field)\n   The following\
    \ table indicates limits on the number of times each\n   field may occur in the\
    \ header section of a message as well as any\n   special limitations on the use\
    \ of those fields.  An asterisk (\"*\")\n   next to a value in the minimum or\
    \ maximum column indicates that a\n   special restriction appears in the Notes\
    \ column.\n   +----------------+--------+------------+----------------------------+\n\
    \   | Field          | Min    | Max number | Notes                      |\n  \
    \ |                | number |            |                            |\n   +----------------+--------+------------+----------------------------+\n\
    \   | trace          | 0      | unlimited  | Block prepended - see      |\n  \
    \ |                |        |            | 3.6.7                      |\n   |\
    \ resent-date    | 0*     | unlimited* | One per block, required if |\n   |  \
    \              |        |            | other resent fields are    |\n   |    \
    \            |        |            | present - see 3.6.6        |\n   | resent-from\
    \    | 0      | unlimited* | One per block - see 3.6.6  |\n   | resent-sender\
    \  | 0*     | unlimited* | One per block, MUST occur  |\n   |                |\
    \        |            | with multi-address         |\n   |                |  \
    \      |            | resent-from - see 3.6.6    |\n   | resent-to      | 0  \
    \    | unlimited* | One per block - see 3.6.6  |\n   | resent-cc      | 0    \
    \  | unlimited* | One per block - see 3.6.6  |\n   | resent-bcc     | 0      |\
    \ unlimited* | One per block - see 3.6.6  |\n   | resent-msg-id  | 0      | unlimited*\
    \ | One per block - see 3.6.6  |\n   | orig-date      | 1      | 1          |\
    \                            |\n   | from           | 1      | 1          | See\
    \ sender and 3.6.2       |\n   | sender         | 0*     | 1          | MUST occur\
    \ with            |\n   |                |        |            | multi-address\
    \ from - see   |\n   |                |        |            | 3.6.2          \
    \            |\n   | reply-to       | 0      | 1          |                  \
    \          |\n   | to             | 0      | 1          |                    \
    \        |\n   | cc             | 0      | 1          |                      \
    \      |\n   | bcc            | 0      | 1          |                        \
    \    |\n   | message-id     | 0*     | 1          | SHOULD be present - see  \
    \  |\n   |                |        |            | 3.6.4                      |\n\
    \   | in-reply-to    | 0*     | 1          | SHOULD occur in some       |\n  \
    \ |                |        |            | replies - see 3.6.4        |\n   |\
    \ references     | 0*     | 1          | SHOULD occur in some       |\n   |  \
    \              |        |            | replies - see 3.6.4        |\n   | subject\
    \        | 0      | 1          |                            |\n   | comments \
    \      | 0      | unlimited  |                            |\n   | keywords   \
    \    | 0      | unlimited  |                            |\n   | optional-field\
    \ | 0      | unlimited  |                            |\n   +----------------+--------+------------+----------------------------+\n\
    \   The exact interpretation of each field is described in subsequent\n   sections.\n"
- title: 3.6.1.  The Origination Date Field
  contents:
  - "3.6.1.  The Origination Date Field\n   The origination date field consists of\
    \ the field name \"Date\" followed\n   by a date-time specification.\n   orig-date\
    \       =   \"Date:\" date-time CRLF\n   The origination date specifies the date\
    \ and time at which the creator\n   of the message indicated that the message\
    \ was complete and ready to\n   enter the mail delivery system.  For instance,\
    \ this might be the time\n   that a user pushes the \"send\" or \"submit\" button\
    \ in an application\n   program.  In any case, it is specifically not intended\
    \ to convey the\n   time that the message is actually transported, but rather\
    \ the time at\n   which the human or other creator of the message has put the\
    \ message\n   into its final form, ready for transport.  (For example, a portable\n\
    \   computer user who is not connected to a network might queue a message\n  \
    \ for delivery.  The origination date is intended to contain the date\n   and\
    \ time that the user queued the message, not the time when the user\n   connected\
    \ to the network to send the message.)\n"
- title: 3.6.2.  Originator Fields
  contents:
  - "3.6.2.  Originator Fields\n   The originator fields of a message consist of the\
    \ from field, the\n   sender field (when applicable), and optionally the reply-to\
    \ field.\n   The from field consists of the field name \"From\" and a comma-\n\
    \   separated list of one or more mailbox specifications.  If the from\n   field\
    \ contains more than one mailbox specification in the mailbox-\n   list, then\
    \ the sender field, containing the field name \"Sender\" and a\n   single mailbox\
    \ specification, MUST appear in the message.  In either\n   case, an optional\
    \ reply-to field MAY also be included, which contains\n   the field name \"Reply-To\"\
    \ and a comma-separated list of one or more\n   addresses.\n   from          \
    \  =   \"From:\" mailbox-list CRLF\n   sender          =   \"Sender:\" mailbox\
    \ CRLF\n   reply-to        =   \"Reply-To:\" address-list CRLF\n   The originator\
    \ fields indicate the mailbox(es) of the source of the\n   message.  The \"From:\"\
    \ field specifies the author(s) of the message,\n   that is, the mailbox(es) of\
    \ the person(s) or system(s) responsible\n   for the writing of the message. \
    \ The \"Sender:\" field specifies the\n   mailbox of the agent responsible for\
    \ the actual transmission of the\n   message.  For example, if a secretary were\
    \ to send a message for\n   another person, the mailbox of the secretary would\
    \ appear in the\n   \"Sender:\" field and the mailbox of the actual author would\
    \ appear in\n   the \"From:\" field.  If the originator of the message can be\
    \ indicated\n   by a single mailbox and the author and transmitter are identical,\
    \ the\n   \"Sender:\" field SHOULD NOT be used.  Otherwise, both fields SHOULD\n\
    \   appear.\n      Note: The transmitter information is always present.  The absence\n\
    \      of the \"Sender:\" field is sometimes mistakenly taken to mean that\n \
    \     the agent responsible for transmission of the message has not been\n   \
    \   specified.  This absence merely means that the transmitter is\n      identical\
    \ to the author and is therefore not redundantly placed\n      into the \"Sender:\"\
    \ field.\n   The originator fields also provide the information required when\n\
    \   replying to a message.  When the \"Reply-To:\" field is present, it\n   indicates\
    \ the address(es) to which the author of the message suggests\n   that replies\
    \ be sent.  In the absence of the \"Reply-To:\" field,\n   replies SHOULD by default\
    \ be sent to the mailbox(es) specified in the\n   \"From:\" field unless otherwise\
    \ specified by the person composing the\n   reply.\n   In all cases, the \"From:\"\
    \ field SHOULD NOT contain any mailbox that\n   does not belong to the author(s)\
    \ of the message.  See also section\n   3.6.3 for more information on forming\
    \ the destination addresses for a\n   reply.\n"
- title: 3.6.3.  Destination Address Fields
  contents:
  - "3.6.3.  Destination Address Fields\n   The destination fields of a message consist\
    \ of three possible fields,\n   each of the same form: the field name, which is\
    \ either \"To\", \"Cc\", or\n   \"Bcc\", followed by a comma-separated list of\
    \ one or more addresses\n   (either mailbox or group syntax).\n   to         \
    \     =   \"To:\" address-list CRLF\n   cc              =   \"Cc:\" address-list\
    \ CRLF\n   bcc             =   \"Bcc:\" [address-list / CFWS] CRLF\n   The destination\
    \ fields specify the recipients of the message.  Each\n   destination field may\
    \ have one or more addresses, and the addresses\n   indicate the intended recipients\
    \ of the message.  The only difference\n   between the three fields is how each\
    \ is used.\n   The \"To:\" field contains the address(es) of the primary recipient(s)\n\
    \   of the message.\n   The \"Cc:\" field (where the \"Cc\" means \"Carbon Copy\"\
    \ in the sense of\n   making a copy on a typewriter using carbon paper) contains\
    \ the\n   addresses of others who are to receive the message, though the\n   content\
    \ of the message may not be directed at them.\n   The \"Bcc:\" field (where the\
    \ \"Bcc\" means \"Blind Carbon Copy\") contains\n   addresses of recipients of\
    \ the message whose addresses are not to be\n   revealed to other recipients of\
    \ the message.  There are three ways in\n   which the \"Bcc:\" field is used.\
    \  In the first case, when a message\n   containing a \"Bcc:\" field is prepared\
    \ to be sent, the \"Bcc:\" line is\n   removed even though all of the recipients\
    \ (including those specified\n   in the \"Bcc:\" field) are sent a copy of the\
    \ message.  In the second\n   case, recipients specified in the \"To:\" and \"\
    Cc:\" lines each are sent\n   a copy of the message with the \"Bcc:\" line removed\
    \ as above, but the\n   recipients on the \"Bcc:\" line get a separate copy of\
    \ the message\n   containing a \"Bcc:\" line.  (When there are multiple recipient\n\
    \   addresses in the \"Bcc:\" field, some implementations actually send a\n  \
    \ separate copy of the message to each recipient with a \"Bcc:\"\n   containing\
    \ only the address of that particular recipient.)  Finally,\n   since a \"Bcc:\"\
    \ field may contain no addresses, a \"Bcc:\" field can be\n   sent without any\
    \ addresses indicating to the recipients that blind\n   copies were sent to someone.\
    \  Which method to use with \"Bcc:\" fields\n   is implementation dependent, but\
    \ refer to the \"Security\n   Considerations\" section of this document for a\
    \ discussion of each.\n   When a message is a reply to another message, the mailboxes\
    \ of the\n   authors of the original message (the mailboxes in the \"From:\" field)\n\
    \   or mailboxes specified in the \"Reply-To:\" field (if it exists) MAY\n   appear\
    \ in the \"To:\" field of the reply since these would normally be\n   the primary\
    \ recipients of the reply.  If a reply is sent to a message\n   that has destination\
    \ fields, it is often desirable to send a copy of\n   the reply to all of the\
    \ recipients of the message, in addition to the\n   author.  When such a reply\
    \ is formed, addresses in the \"To:\" and\n   \"Cc:\" fields of the original message\
    \ MAY appear in the \"Cc:\" field of\n   the reply, since these are normally secondary\
    \ recipients of the\n   reply.  If a \"Bcc:\" field is present in the original\
    \ message,\n   addresses in that field MAY appear in the \"Bcc:\" field of the\
    \ reply,\n   but they SHOULD NOT appear in the \"To:\" or \"Cc:\" fields.\n  \
    \    Note: Some mail applications have automatic reply commands that\n      include\
    \ the destination addresses of the original message in the\n      destination\
    \ addresses of the reply.  How those reply commands\n      behave is implementation\
    \ dependent and is beyond the scope of this\n      document.  In particular, whether\
    \ or not to include the original\n      destination addresses when the original\
    \ message had a \"Reply-To:\"\n      field is not addressed here.\n"
- title: 3.6.4.  Identification Fields
  contents:
  - "3.6.4.  Identification Fields\n   Though listed as optional in the table in section\
    \ 3.6, every message\n   SHOULD have a \"Message-ID:\" field.  Furthermore, reply\
    \ messages\n   SHOULD have \"In-Reply-To:\" and \"References:\" fields as appropriate\n\
    \   and as described below.\n   The \"Message-ID:\" field contains a single unique\
    \ message identifier.\n   The \"References:\" and \"In-Reply-To:\" fields each\
    \ contain one or more\n   unique message identifiers, optionally separated by\
    \ CFWS.\n   The message identifier (msg-id) syntax is a limited version of the\n\
    \   addr-spec construct enclosed in the angle bracket characters, \"<\" and\n\
    \   \">\".  Unlike addr-spec, this syntax only permits the dot-atom-text\n   form\
    \ on the left-hand side of the \"@\" and does not have internal CFWS\n   anywhere\
    \ in the message identifier.\n      Note: As with addr-spec, a liberal syntax\
    \ is given for the right-\n      hand side of the \"@\" in a msg-id.  However,\
    \ later in this section,\n      the use of a domain for the right-hand side of\
    \ the \"@\" is\n      RECOMMENDED.  Again, the syntax of domain constructs is\
    \ specified\n      by and used in other protocols (e.g., [RFC1034], [RFC1035],\n\
    \      [RFC1123], [RFC5321]).  It is therefore incumbent upon\n      implementations\
    \ to conform to the syntax of addresses for the\n      context in which they are\
    \ used.\n   message-id      =   \"Message-ID:\" msg-id CRLF\n   in-reply-to  \
    \   =   \"In-Reply-To:\" 1*msg-id CRLF\n   references      =   \"References:\"\
    \ 1*msg-id CRLF\n   msg-id          =   [CFWS] \"<\" id-left \"@\" id-right \"\
    >\" [CFWS]\n   id-left         =   dot-atom-text / obs-id-left\n   id-right  \
    \      =   dot-atom-text / no-fold-literal / obs-id-right\n   no-fold-literal\
    \ =   \"[\" *dtext \"]\"\n   The \"Message-ID:\" field provides a unique message\
    \ identifier that\n   refers to a particular version of a particular message.\
    \  The\n   uniqueness of the message identifier is guaranteed by the host that\n\
    \   generates it (see below).  This message identifier is intended to be\n   machine\
    \ readable and not necessarily meaningful to humans.  A message\n   identifier\
    \ pertains to exactly one version of a particular message;\n   subsequent revisions\
    \ to the message each receive new message\n   identifiers.\n      Note: There\
    \ are many instances when messages are \"changed\", but\n      those changes do\
    \ not constitute a new instantiation of that\n      message, and therefore the\
    \ message would not get a new message\n      identifier.  For example, when messages\
    \ are introduced into the\n      transport system, they are often prepended with\
    \ additional header\n      fields such as trace fields (described in section 3.6.7)\
    \ and\n      resent fields (described in section 3.6.6).  The addition of such\n\
    \      header fields does not change the identity of the message and\n      therefore\
    \ the original \"Message-ID:\" field is retained.  In all\n      cases, it is\
    \ the meaning that the sender of the message wishes to\n      convey (i.e., whether\
    \ this is the same message or a different\n      message) that determines whether\
    \ or not the \"Message-ID:\" field\n      changes, not any particular syntactic\
    \ difference that appears (or\n      does not appear) in the message.\n   The\
    \ \"In-Reply-To:\" and \"References:\" fields are used when creating a\n   reply\
    \ to a message.  They hold the message identifier of the original\n   message\
    \ and the message identifiers of other messages (for example,\n   in the case\
    \ of a reply to a message that was itself a reply).  The\n   \"In-Reply-To:\"\
    \ field may be used to identify the message (or\n   messages) to which the new\
    \ message is a reply, while the\n   \"References:\" field may be used to identify\
    \ a \"thread\" of\n   conversation.\n   When creating a reply to a message, the\
    \ \"In-Reply-To:\" and\n   \"References:\" fields of the resultant message are\
    \ constructed as\n   follows:\n   The \"In-Reply-To:\" field will contain the\
    \ contents of the\n   \"Message-ID:\" field of the message to which this one is\
    \ a reply (the\n   \"parent message\").  If there is more than one parent message,\
    \ then\n   the \"In-Reply-To:\" field will contain the contents of all of the\n\
    \   parents' \"Message-ID:\" fields.  If there is no \"Message-ID:\" field in\n\
    \   any of the parent messages, then the new message will have no \"In-\n   Reply-To:\"\
    \ field.\n   The \"References:\" field will contain the contents of the parent's\n\
    \   \"References:\" field (if any) followed by the contents of the parent's\n\
    \   \"Message-ID:\" field (if any).  If the parent message does not contain\n\
    \   a \"References:\" field but does have an \"In-Reply-To:\" field\n   containing\
    \ a single message identifier, then the \"References:\" field\n   will contain\
    \ the contents of the parent's \"In-Reply-To:\" field\n   followed by the contents\
    \ of the parent's \"Message-ID:\" field (if\n   any).  If the parent has none\
    \ of the \"References:\", \"In-Reply-To:\",\n   or \"Message-ID:\" fields, then\
    \ the new message will have no\n   \"References:\" field.\n      Note: Some implementations\
    \ parse the \"References:\" field to\n      display the \"thread of the discussion\"\
    .  These implementations\n      assume that each new message is a reply to a single\
    \ parent and\n      hence that they can walk backwards through the \"References:\"\
    \ field\n      to find the parent of each message listed there.  Therefore,\n\
    \      trying to form a \"References:\" field for a reply that has multiple\n\
    \      parents is discouraged; how to do so is not defined in this\n      document.\n\
    \   The message identifier (msg-id) itself MUST be a globally unique\n   identifier\
    \ for a message.  The generator of the message identifier\n   MUST guarantee that\
    \ the msg-id is unique.  There are several\n   algorithms that can be used to\
    \ accomplish this.  Since the msg-id has\n   a similar syntax to addr-spec (identical\
    \ except that quoted strings,\n   comments, and folding white space are not allowed),\
    \ a good method is\n   to put the domain name (or a domain literal IP address)\
    \ of the host\n   on which the message identifier was created on the right-hand\
    \ side of\n   the \"@\" (since domain names and IP addresses are normally unique),\n\
    \   and put a combination of the current absolute date and time along\n   with\
    \ some other currently unique (perhaps sequential) identifier\n   available on\
    \ the system (for example, a process id number) on the\n   left-hand side.  Though\
    \ other algorithms will work, it is RECOMMENDED\n   that the right-hand side contain\
    \ some domain identifier (either of\n   the host itself or otherwise) such that\
    \ the generator of the message\n   identifier can guarantee the uniqueness of\
    \ the left-hand side within\n   the scope of that domain.\n   Semantically, the\
    \ angle bracket characters are not part of the\n   msg-id; the msg-id is what\
    \ is contained between the two angle bracket\n   characters.\n"
- title: 3.6.5.  Informational Fields
  contents:
  - "3.6.5.  Informational Fields\n   The informational fields are all optional. \
    \ The \"Subject:\" and\n   \"Comments:\" fields are unstructured fields as defined\
    \ in section\n   2.2.1, and therefore may contain text or folding white space.\
    \  The\n   \"Keywords:\" field contains a comma-separated list of one or more\n\
    \   words or quoted-strings.\n   subject         =   \"Subject:\" unstructured\
    \ CRLF\n   comments        =   \"Comments:\" unstructured CRLF\n   keywords  \
    \      =   \"Keywords:\" phrase *(\",\" phrase) CRLF\n   These three fields are\
    \ intended to have only human-readable content\n   with information about the\
    \ message.  The \"Subject:\" field is the most\n   common and contains a short\
    \ string identifying the topic of the\n   message.  When used in a reply, the\
    \ field body MAY start with the\n   string \"Re: \" (an abbreviation of the Latin\
    \ \"in re\", meaning \"in the\n   matter of\") followed by the contents of the\
    \ \"Subject:\" field body of\n   the original message.  If this is done, only\
    \ one instance of the\n   literal string \"Re: \" ought to be used since use of\
    \ other strings or\n   more than one instance can lead to undesirable consequences.\
    \  The\n   \"Comments:\" field contains any additional comments on the text of\
    \ the\n   body of the message.  The \"Keywords:\" field contains a comma-\n  \
    \ separated list of important words and phrases that might be useful\n   for the\
    \ recipient.\n"
- title: 3.6.6.  Resent Fields
  contents:
  - "3.6.6.  Resent Fields\n   Resent fields SHOULD be added to any message that is\
    \ reintroduced by\n   a user into the transport system.  A separate set of resent\
    \ fields\n   SHOULD be added each time this is done.  All of the resent fields\n\
    \   corresponding to a particular resending of the message SHOULD be\n   grouped\
    \ together.  Each new set of resent fields is prepended to the\n   message; that\
    \ is, the most recent set of resent fields appears\n   earlier in the message.\
    \  No other fields in the message are changed\n   when resent fields are added.\n\
    \   Each of the resent fields corresponds to a particular field elsewhere\n  \
    \ in the syntax.  For instance, the \"Resent-Date:\" field corresponds to\n  \
    \ the \"Date:\" field and the \"Resent-To:\" field corresponds to the \"To:\"\n\
    \   field.  In each case, the syntax for the field body is identical to\n   the\
    \ syntax given previously for the corresponding field.\n   When resent fields\
    \ are used, the \"Resent-From:\" and \"Resent-Date:\"\n   fields MUST be sent.\
    \  The \"Resent-Message-ID:\" field SHOULD be sent.\n   \"Resent-Sender:\" SHOULD\
    \ NOT be used if \"Resent-Sender:\" would be\n   identical to \"Resent-From:\"\
    .\n   resent-date     =   \"Resent-Date:\" date-time CRLF\n   resent-from    \
    \ =   \"Resent-From:\" mailbox-list CRLF\n   resent-sender   =   \"Resent-Sender:\"\
    \ mailbox CRLF\n   resent-to       =   \"Resent-To:\" address-list CRLF\n   resent-cc\
    \       =   \"Resent-Cc:\" address-list CRLF\n   resent-bcc      =   \"Resent-Bcc:\"\
    \ [address-list / CFWS] CRLF\n   resent-msg-id   =   \"Resent-Message-ID:\" msg-id\
    \ CRLF\n   Resent fields are used to identify a message as having been\n   reintroduced\
    \ into the transport system by a user.  The purpose of\n   using resent fields\
    \ is to have the message appear to the final\n   recipient as if it were sent\
    \ directly by the original sender, with\n   all of the original fields remaining\
    \ the same.  Each set of resent\n   fields correspond to a particular resending\
    \ event.  That is, if a\n   message is resent multiple times, each set of resent\
    \ fields gives\n   identifying information for each individual time.  Resent fields\
    \ are\n   strictly informational.  They MUST NOT be used in the normal\n   processing\
    \ of replies or other such automatic actions on messages.\n      Note: Reintroducing\
    \ a message into the transport system and using\n      resent fields is a different\
    \ operation from \"forwarding\".\n      \"Forwarding\" has two meanings: One sense\
    \ of forwarding is that a\n      mail reading program can be told by a user to\
    \ forward a copy of a\n      message to another person, making the forwarded message\
    \ the body\n      of the new message.  A forwarded message in this sense does\
    \ not\n      appear to have come from the original sender, but is an entirely\n\
    \      new message from the forwarder of the message.  Forwarding may\n      also\
    \ mean that a mail transport program gets a message and\n      forwards it on\
    \ to a different destination for final delivery.\n      Resent header fields are\
    \ not intended for use with either type of\n      forwarding.\n   The resent originator\
    \ fields indicate the mailbox of the person(s) or\n   system(s) that resent the\
    \ message.  As with the regular originator\n   fields, there are two forms: a\
    \ simple \"Resent-From:\" form, which\n   contains the mailbox of the individual\
    \ doing the resending, and the\n   more complex form, when one individual (identified\
    \ in the \"Resent-\n   Sender:\" field) resends a message on behalf of one or\
    \ more others\n   (identified in the \"Resent-From:\" field).\n      Note: When\
    \ replying to a resent message, replies behave just as\n      they would with\
    \ any other message, using the original \"From:\",\n      \"Reply-To:\", \"Message-ID:\"\
    , and other fields.  The resent fields\n      are only informational and MUST\
    \ NOT be used in the normal\n      processing of replies.\n   The \"Resent-Date:\"\
    \ indicates the date and time at which the resent\n   message is dispatched by\
    \ the resender of the message.  Like the\n   \"Date:\" field, it is not the date\
    \ and time that the message was\n   actually transported.\n   The \"Resent-To:\"\
    , \"Resent-Cc:\", and \"Resent-Bcc:\" fields function\n   identically to the \"\
    To:\", \"Cc:\", and \"Bcc:\" fields, respectively,\n   except that they indicate\
    \ the recipients of the resent message, not\n   the recipients of the original\
    \ message.\n   The \"Resent-Message-ID:\" field provides a unique identifier for\
    \ the\n   resent message.\n"
- title: 3.6.7.  Trace Fields
  contents:
  - "3.6.7.  Trace Fields\n   The trace fields are a group of header fields consisting\
    \ of an\n   optional \"Return-Path:\" field, and one or more \"Received:\" fields.\n\
    \   The \"Return-Path:\" header field contains a pair of angle brackets\n   that\
    \ enclose an optional addr-spec.  The \"Received:\" field contains a\n   (possibly\
    \ empty) list of tokens followed by a semicolon and a date-\n   time specification.\
    \  Each token must be a word, angle-addr, addr-\n   spec, or a domain.  Further\
    \ restrictions are applied to the syntax of\n   the trace fields by specifications\
    \ that provide for their use, such\n   as [RFC5321].\n   trace           =   [return]\n\
    \                       1*received\n   return          =   \"Return-Path:\" path\
    \ CRLF\n   path            =   angle-addr / ([CFWS] \"<\" [CFWS] \">\" [CFWS])\n\
    \   received        =   \"Received:\" *received-token \";\" date-time CRLF\n \
    \  received-token  =   word / angle-addr / addr-spec / domain\n   A full discussion\
    \ of the Internet mail use of trace fields is\n   contained in [RFC5321].  For\
    \ the purposes of this specification, the\n   trace fields are strictly informational,\
    \ and any formal\n   interpretation of them is outside of the scope of this document.\n"
- title: 3.6.8.  Optional Fields
  contents:
  - "3.6.8.  Optional Fields\n   Fields may appear in messages that are otherwise\
    \ unspecified in this\n   document.  They MUST conform to the syntax of an optional-field.\n\
    \   This is a field name, made up of the printable US-ASCII characters\n   except\
    \ SP and colon, followed by a colon, followed by any text that\n   conforms to\
    \ the unstructured syntax.\n   The field names of any optional field MUST NOT\
    \ be identical to any\n   field name specified elsewhere in this document.\n \
    \  optional-field  =   field-name \":\" unstructured CRLF\n   field-name     \
    \ =   1*ftext\n   ftext           =   %d33-57 /          ; Printable US-ASCII\n\
    \                       %d59-126           ;  characters not including\n     \
    \                                     ;  \":\".\n   For the purposes of this specification,\
    \ any optional field is\n   uninterpreted.\n"
- title: 4.  Obsolete Syntax
  contents:
  - "4.  Obsolete Syntax\n   Earlier versions of this specification allowed for different\
    \ (usually\n   more liberal) syntax than is allowed in this version.  Also, there\n\
    \   have been syntactic elements used in messages on the Internet whose\n   interpretations\
    \ have never been documented.  Though these syntactic\n   forms MUST NOT be generated\
    \ according to the grammar in section 3,\n   they MUST be accepted and parsed\
    \ by a conformant receiver.  This\n   section documents many of these syntactic\
    \ elements.  Taking the\n   grammar in section 3 and adding the definitions presented\
    \ in this\n   section will result in the grammar to use for the interpretation\
    \ of\n   messages.\n      Note: This section identifies syntactic forms that any\n\
    \      implementation MUST reasonably interpret.  However, there are\n      certainly\
    \ Internet messages that do not conform to even the\n      additional syntax given\
    \ in this section.  The fact that a\n      particular form does not appear in\
    \ any section of this document is\n      not justification for computer programs\
    \ to crash or for malformed\n      data to be irretrievably lost by any implementation.\
    \  It is up to\n      the implementation to deal with messages robustly.\n   One\
    \ important difference between the obsolete (interpreting) and the\n   current\
    \ (generating) syntax is that in structured header field bodies\n   (i.e., between\
    \ the colon and the CRLF of any structured header\n   field), white space characters,\
    \ including folding white space, and\n   comments could be freely inserted between\
    \ any syntactic tokens.  This\n   allowed many complex forms that have proven\
    \ difficult for some\n   implementations to parse.\n   Another key difference\
    \ between the obsolete and the current syntax is\n   that the rule in section\
    \ 3.2.2 regarding lines composed entirely of\n   white space in comments and folding\
    \ white space does not apply.  See\n   the discussion of folding white space in\
    \ section 4.2 below.\n   Finally, certain characters that were formerly allowed\
    \ in messages\n   appear in this section.  The NUL character (ASCII value 0) was\
    \ once\n   allowed, but is no longer for compatibility reasons.  Similarly, US-\n\
    \   ASCII control characters other than CR, LF, SP, and HTAB (ASCII\n   values\
    \ 1 through 8, 11, 12, 14 through 31, and 127) were allowed to\n   appear in header\
    \ field bodies.  CR and LF were allowed to appear in\n   messages other than as\
    \ CRLF; this use is also shown here.\n   Other differences in syntax and semantics\
    \ are noted in the following\n   sections.\n"
- title: 4.1.  Miscellaneous Obsolete Tokens
  contents:
  - "4.1.  Miscellaneous Obsolete Tokens\n   These syntactic elements are used elsewhere\
    \ in the obsolete syntax or\n   in the main syntax.  Bare CR, bare LF, and NUL\
    \ are added to obs-qp,\n   obs-body, and obs-unstruct.  US-ASCII control characters\
    \ are added to\n   obs-qp, obs-unstruct, obs-ctext, and obs-qtext.  The period\
    \ character\n   is added to obs-phrase.  The obs-phrase-list provides for a\n\
    \   (potentially empty) comma-separated list of phrases that may include\n   \"\
    null\" elements.  That is, there could be two or more commas in such\n   a list\
    \ with nothing in between them, or commas at the beginning or\n   end of the list.\n\
    \      Note: The \"period\" (or \"full stop\") character (\".\") in obs-phrase\n\
    \      is not a form that was allowed in earlier versions of this or any\n   \
    \   other specification.  Period (nor any other character from\n      specials)\
    \ was not allowed in phrase because it introduced a\n      parsing difficulty\
    \ distinguishing between phrases and portions of\n      an addr-spec (see section\
    \ 4.4).  It appears here because the\n      period character is currently used\
    \ in many messages in the\n      display-name portion of addresses, especially\
    \ for initials in\n      names, and therefore must be interpreted properly.\n\
    \   obs-NO-WS-CTL   =   %d1-8 /            ; US-ASCII control\n              \
    \         %d11 /             ;  characters that do not\n                     \
    \  %d12 /             ;  include the carriage\n                       %d14-31\
    \ /          ;  return, line feed, and\n                       %d127         \
    \     ;  white space characters\n   obs-ctext       =   obs-NO-WS-CTL\n   obs-qtext\
    \       =   obs-NO-WS-CTL\n   obs-utext       =   %d0 / obs-NO-WS-CTL / VCHAR\n\
    \   obs-qp          =   \"\\\" (%d0 / obs-NO-WS-CTL / LF / CR)\n   obs-body  \
    \      =   *((*LF *CR *((%d0 / text) *LF *CR)) / CRLF)\n   obs-unstruct    = \
    \  *((*LF *CR *(obs-utext *LF *CR)) / FWS)\n   obs-phrase      =   word *(word\
    \ / \".\" / CFWS)\n   obs-phrase-list =   [phrase / CFWS] *(\",\" [phrase / CFWS])\n\
    \   Bare CR and bare LF appear in messages with two different meanings.\n   In\
    \ many cases, bare CR or bare LF are used improperly instead of CRLF\n   to indicate\
    \ line separators.  In other cases, bare CR and bare LF are\n   used simply as\
    \ US-ASCII control characters with their traditional\n   ASCII meanings.\n"
- title: 4.2.  Obsolete Folding White Space
  contents:
  - "4.2.  Obsolete Folding White Space\n   In the obsolete syntax, any amount of\
    \ folding white space MAY be\n   inserted where the obs-FWS rule is allowed. \
    \ This creates the\n   possibility of having two consecutive \"folds\" in a line,\
    \ and\n   therefore the possibility that a line which makes up a folded header\n\
    \   field could be composed entirely of white space.\n   obs-FWS         =   1*WSP\
    \ *(CRLF 1*WSP)\n"
- title: 4.3.  Obsolete Date and Time
  contents:
  - "4.3.  Obsolete Date and Time\n   The syntax for the obsolete date format allows\
    \ a 2 digit year in the\n   date field and allows for a list of alphabetic time\
    \ zone specifiers\n   that were used in earlier versions of this specification.\
    \  It also\n   permits comments and folding white space between many of the tokens.\n\
    \   obs-day-of-week =   [CFWS] day-name [CFWS]\n   obs-day         =   [CFWS]\
    \ 1*2DIGIT [CFWS]\n   obs-year        =   [CFWS] 2*DIGIT [CFWS]\n   obs-hour \
    \       =   [CFWS] 2DIGIT [CFWS]\n   obs-minute      =   [CFWS] 2DIGIT [CFWS]\n\
    \   obs-second      =   [CFWS] 2DIGIT [CFWS]\n   obs-zone        =   \"UT\" /\
    \ \"GMT\" /     ; Universal Time\n                                          ;\
    \ North American UT\n                                          ; offsets\n   \
    \                    \"EST\" / \"EDT\" /    ; Eastern:  - 5/ - 4\n           \
    \            \"CST\" / \"CDT\" /    ; Central:  - 6/ - 5\n                   \
    \    \"MST\" / \"MDT\" /    ; Mountain: - 7/ - 6\n                       \"PST\"\
    \ / \"PDT\" /    ; Pacific:  - 8/ - 7\n                                      \
    \    ;\n                       %d65-73 /          ; Military zones - \"A\"\n \
    \                      %d75-90 /          ; through \"I\" and \"K\"\n        \
    \               %d97-105 /         ; through \"Z\", both\n                   \
    \    %d107-122          ; upper and lower case\n   Where a two or three digit\
    \ year occurs in a date, the year is to be\n   interpreted as follows: If a two\
    \ digit year is encountered whose\n   value is between 00 and 49, the year is\
    \ interpreted by adding 2000,\n   ending up with a value between 2000 and 2049.\
    \  If a two digit year is\n   encountered with a value between 50 and 99, or any\
    \ three digit year\n   is encountered, the year is interpreted by adding 1900.\n\
    \   In the obsolete time zone, \"UT\" and \"GMT\" are indications of\n   \"Universal\
    \ Time\" and \"Greenwich Mean Time\", respectively, and are\n   both semantically\
    \ identical to \"+0000\".\n   The remaining three character zones are the US time\
    \ zones.  The first\n   letter, \"E\", \"C\", \"M\", or \"P\" stands for \"Eastern\"\
    , \"Central\",\n   \"Mountain\", and \"Pacific\".  The second letter is either\
    \ \"S\" for\n   \"Standard\" time, or \"D\" for \"Daylight Savings\" (or summer)\
    \ time.\n   Their interpretations are as follows:\n      EDT is semantically equivalent\
    \ to -0400\n      EST is semantically equivalent to -0500\n      CDT is semantically\
    \ equivalent to -0500\n      CST is semantically equivalent to -0600\n      MDT\
    \ is semantically equivalent to -0600\n      MST is semantically equivalent to\
    \ -0700\n      PDT is semantically equivalent to -0700\n      PST is semantically\
    \ equivalent to -0800\n   The 1 character military time zones were defined in\
    \ a non-standard\n   way in [RFC0822] and are therefore unpredictable in their\
    \ meaning.\n   The original definitions of the military zones \"A\" through \"\
    I\" are\n   equivalent to \"+0100\" through \"+0900\", respectively; \"K\", \"\
    L\", and\n   \"M\" are equivalent to \"+1000\", \"+1100\", and \"+1200\", respectively;\n\
    \   \"N\" through \"Y\" are equivalent to \"-0100\" through \"-1200\".\n   respectively;\
    \ and \"Z\" is equivalent to \"+0000\".  However, because of\n   the error in\
    \ [RFC0822], they SHOULD all be considered equivalent to\n   \"-0000\" unless\
    \ there is out-of-band information confirming their\n   meaning.\n   Other multi-character\
    \ (usually between 3 and 5) alphabetic time zones\n   have been used in Internet\
    \ messages.  Any such time zone whose\n   meaning is not known SHOULD be considered\
    \ equivalent to \"-0000\"\n   unless there is out-of-band information confirming\
    \ their meaning.\n"
- title: 4.4.  Obsolete Addressing
  contents:
  - "4.4.  Obsolete Addressing\n   There are four primary differences in addressing.\
    \  First, mailbox\n   addresses were allowed to have a route portion before the\
    \ addr-spec\n   when enclosed in \"<\" and \">\".  The route is simply a comma-separated\n\
    \   list of domain names, each preceded by \"@\", and the list terminated\n  \
    \ by a colon.  Second, CFWS were allowed between the period-separated\n   elements\
    \ of local-part and domain (i.e., dot-atom was not used).  In\n   addition, local-part\
    \ is allowed to contain quoted-string in addition\n   to just atom.  Third, mailbox-list\
    \ and address-list were allowed to\n   have \"null\" members.  That is, there\
    \ could be two or more commas in\n   such a list with nothing in between them,\
    \ or commas at the beginning\n   or end of the list.  Finally, US-ASCII control\
    \ characters and quoted-\n   pairs were allowed in domain literals and are added\
    \ here.\n   obs-angle-addr  =   [CFWS] \"<\" obs-route addr-spec \">\" [CFWS]\n\
    \   obs-route       =   obs-domain-list \":\"\n   obs-domain-list =   *(CFWS /\
    \ \",\") \"@\" domain\n                       *(\",\" [CFWS] [\"@\" domain])\n\
    \   obs-mbox-list   =   *([CFWS] \",\") mailbox *(\",\" [mailbox / CFWS])\n  \
    \ obs-addr-list   =   *([CFWS] \",\") address *(\",\" [address / CFWS])\n   obs-group-list\
    \  =   1*([CFWS] \",\") [CFWS]\n   obs-local-part  =   word *(\".\" word)\n  \
    \ obs-domain      =   atom *(\".\" atom)\n   obs-dtext       =   obs-NO-WS-CTL\
    \ / quoted-pair\n   When interpreting addresses, the route portion SHOULD be ignored.\n"
- title: 4.5.  Obsolete Header Fields
  contents:
  - "4.5.  Obsolete Header Fields\n   Syntactically, the primary difference in the\
    \ obsolete field syntax is\n   that it allows multiple occurrences of any of the\
    \ fields and they may\n   occur in any order.  Also, any amount of white space\
    \ is allowed\n   before the \":\" at the end of the field name.\n   obs-fields\
    \      =   *(obs-return /\n                       obs-received /\n           \
    \            obs-orig-date /\n                       obs-from /\n            \
    \           obs-sender /\n                       obs-reply-to /\n            \
    \           obs-to /\n                       obs-cc /\n                      \
    \ obs-bcc /\n                       obs-message-id /\n                       obs-in-reply-to\
    \ /\n                       obs-references /\n                       obs-subject\
    \ /\n                       obs-comments /\n                       obs-keywords\
    \ /\n                       obs-resent-date /\n                       obs-resent-from\
    \ /\n                       obs-resent-send /\n                       obs-resent-rply\
    \ /\n                       obs-resent-to /\n                       obs-resent-cc\
    \ /\n                       obs-resent-bcc /\n                       obs-resent-mid\
    \ /\n                       obs-optional)\n   Except for destination address fields\
    \ (described in section 4.5.3),\n   the interpretation of multiple occurrences\
    \ of fields is unspecified.\n   Also, the interpretation of trace fields and resent\
    \ fields that do\n   not occur in blocks prepended to the message is unspecified\
    \ as well.\n   Unless otherwise noted in the following sections, interpretation\
    \ of\n   other fields is identical to the interpretation of their non-obsolete\n\
    \   counterparts in section 3.\n"
- title: 4.5.1.  Obsolete Origination Date Field
  contents:
  - "4.5.1.  Obsolete Origination Date Field\n   obs-orig-date   =   \"Date\" *WSP\
    \ \":\" date-time CRLF\n"
- title: 4.5.2.  Obsolete Originator Fields
  contents:
  - "4.5.2.  Obsolete Originator Fields\n   obs-from        =   \"From\" *WSP \":\"\
    \ mailbox-list CRLF\n   obs-sender      =   \"Sender\" *WSP \":\" mailbox CRLF\n\
    \   obs-reply-to    =   \"Reply-To\" *WSP \":\" address-list CRLF\n"
- title: 4.5.3.  Obsolete Destination Address Fields
  contents:
  - "4.5.3.  Obsolete Destination Address Fields\n   obs-to          =   \"To\" *WSP\
    \ \":\" address-list CRLF\n   obs-cc          =   \"Cc\" *WSP \":\" address-list\
    \ CRLF\n   obs-bcc         =   \"Bcc\" *WSP \":\"\n                       (address-list\
    \ / (*([CFWS] \",\") [CFWS])) CRLF\n   When multiple occurrences of destination\
    \ address fields occur in a\n   message, they SHOULD be treated as if the address\
    \ list in the first\n   occurrence of the field is combined with the address lists\
    \ of the\n   subsequent occurrences by adding a comma and concatenating.\n"
- title: 4.5.4.  Obsolete Identification Fields
  contents:
  - "4.5.4.  Obsolete Identification Fields\n   The obsolete \"In-Reply-To:\" and\
    \ \"References:\" fields differ from the\n   current syntax in that they allow\
    \ phrase (words or quoted strings) to\n   appear.  The obsolete forms of the left\
    \ and right sides of msg-id\n   allow interspersed CFWS, making them syntactically\
    \ identical to\n   local-part and domain, respectively.\n   obs-message-id  =\
    \   \"Message-ID\" *WSP \":\" msg-id CRLF\n   obs-in-reply-to =   \"In-Reply-To\"\
    \ *WSP \":\" *(phrase / msg-id) CRLF\n   obs-references  =   \"References\" *WSP\
    \ \":\" *(phrase / msg-id) CRLF\n   obs-id-left     =   local-part\n   obs-id-right\
    \    =   domain\n   For purposes of interpretation, the phrases in the \"In-Reply-To:\"\
    \ and\n   \"References:\" fields are ignored.\n   Semantically, none of the optional\
    \ CFWS in the local-part and the\n   domain is part of the obs-id-left and obs-id-right,\
    \ respectively.\n"
- title: 4.5.5.  Obsolete Informational Fields
  contents:
  - "4.5.5.  Obsolete Informational Fields\n   obs-subject     =   \"Subject\" *WSP\
    \ \":\" unstructured CRLF\n   obs-comments    =   \"Comments\" *WSP \":\" unstructured\
    \ CRLF\n   obs-keywords    =   \"Keywords\" *WSP \":\" obs-phrase-list CRLF\n"
- title: 4.5.6.  Obsolete Resent Fields
  contents:
  - "4.5.6.  Obsolete Resent Fields\n   The obsolete syntax adds a \"Resent-Reply-To:\"\
    \ field, which consists\n   of the field name, the optional comments and folding\
    \ white space, the\n   colon, and a comma separated list of addresses.\n   obs-resent-from\
    \ =   \"Resent-From\" *WSP \":\" mailbox-list CRLF\n   obs-resent-send =   \"\
    Resent-Sender\" *WSP \":\" mailbox CRLF\n   obs-resent-date =   \"Resent-Date\"\
    \ *WSP \":\" date-time CRLF\n   obs-resent-to   =   \"Resent-To\" *WSP \":\" address-list\
    \ CRLF\n   obs-resent-cc   =   \"Resent-Cc\" *WSP \":\" address-list CRLF\n  \
    \ obs-resent-bcc  =   \"Resent-Bcc\" *WSP \":\"\n                       (address-list\
    \ / (*([CFWS] \",\") [CFWS])) CRLF\n   obs-resent-mid  =   \"Resent-Message-ID\"\
    \ *WSP \":\" msg-id CRLF\n   obs-resent-rply =   \"Resent-Reply-To\" *WSP \":\"\
    \ address-list CRLF\n   As with other resent fields, the \"Resent-Reply-To:\"\
    \ field is to be\n   treated as trace information only.\n"
- title: 4.5.7.  Obsolete Trace Fields
  contents:
  - "4.5.7.  Obsolete Trace Fields\n   The obs-return and obs-received are again given\
    \ here as template\n   definitions, just as return and received are in section\
    \ 3.  Their\n   full syntax is given in [RFC5321].\n   obs-return      =   \"\
    Return-Path\" *WSP \":\" path CRLF\n   obs-received    =   \"Received\" *WSP \"\
    :\" *received-token CRLF\n"
- title: 4.5.8.  Obsolete optional fields
  contents:
  - "4.5.8.  Obsolete optional fields\n   obs-optional    =   field-name *WSP \":\"\
    \ unstructured CRLF\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   Care needs to be taken when displaying messages\
    \ on a terminal or\n   terminal emulator.  Powerful terminals may act on escape\
    \ sequences\n   and other combinations of US-ASCII control characters with a variety\n\
    \   of consequences.  They can remap the keyboard or permit other\n   modifications\
    \ to the terminal that could lead to denial of service or\n   even damaged data.\
    \  They can trigger (sometimes programmable)\n   answerback messages that can\
    \ allow a message to cause commands to be\n   issued on the recipient's behalf.\
    \  They can also affect the operation\n   of terminal attached devices such as\
    \ printers.  Message viewers may\n   wish to strip potentially dangerous terminal\
    \ escape sequences from\n   the message prior to display.  However, other escape\
    \ sequences appear\n   in messages for useful purposes (cf. [ISO.2022.1994], [RFC2045],\n\
    \   [RFC2046], [RFC2047], [RFC2049], [RFC4288], [RFC4289]) and therefore\n   should\
    \ not be stripped indiscriminately.\n   Transmission of non-text objects in messages\
    \ raises additional\n   security issues.  These issues are discussed in [RFC2045],\
    \ [RFC2046],\n   [RFC2047], [RFC2049], [RFC4288], and [RFC4289].\n   Many implementations\
    \ use the \"Bcc:\" (blind carbon copy) field,\n   described in section 3.6.3,\
    \ to facilitate sending messages to\n   recipients without revealing the addresses\
    \ of one or more of the\n   addressees to the other recipients.  Mishandling this\
    \ use of \"Bcc:\"\n   may disclose confidential information that could eventually\
    \ lead to\n   security problems through knowledge of even the existence of a\n\
    \   particular mail address.  For example, if using the first method\n   described\
    \ in section 3.6.3, where the \"Bcc:\" line is removed from the\n   message, blind\
    \ recipients have no explicit indication that they have\n   been sent a blind\
    \ copy, except insofar as their address does not\n   appear in the header section\
    \ of a message.  Because of this, one of\n   the blind addressees could potentially\
    \ send a reply to all of the\n   shown recipients and accidentally reveal that\
    \ the message went to the\n   blind recipient.  When the second method from section\
    \ 3.6.3 is used,\n   the blind recipient's address appears in the \"Bcc:\" field\
    \ of a\n   separate copy of the message.  If the \"Bcc:\" field sent contains\
    \ all\n   of the blind addressees, all of the \"Bcc:\" recipients will be seen\
    \ by\n   each \"Bcc:\" recipient.  Even if a separate message is sent to each\n\
    \   \"Bcc:\" recipient with only the individual's address, implementations\n \
    \  still need to be careful to process replies to the message as per\n   section\
    \ 3.6.3 so as not to accidentally reveal the blind recipient to\n   other recipients.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   This document updates the registrations that appeared\
    \ in [RFC4021]\n   that referred to the definitions in [RFC2822].  IANA has updated\
    \ the\n   Permanent Message Header Field Repository with the following header\n\
    \   fields, in accordance with the procedures set out in [RFC3864].\n   Header\
    \ field name:  Date\n   Applicable protocol:  Mail\n   Status:  standard\n   Author/Change\
    \ controller:  IETF\n   Specification document(s):  This document (section 3.6.1)\n\
    \   Header field name:  From\n   Applicable protocol:  Mail\n   Status:  standard\n\
    \   Author/Change controller:  IETF\n   Specification document(s):  This document\
    \ (section 3.6.2)\n   Header field name:  Sender\n   Applicable protocol:  Mail\n\
    \   Status:  standard\n   Author/Change controller:  IETF\n   Specification document(s):\
    \  This document (section 3.6.2)\n   Header field name:  Reply-To\n   Applicable\
    \ protocol:  Mail\n   Status:  standard\n   Author/Change controller:  IETF\n\
    \   Specification document(s):  This document (section 3.6.2)\n   Header field\
    \ name:  To\n   Applicable protocol:  Mail\n   Status:  standard\n   Author/Change\
    \ controller:  IETF\n   Specification document(s):  This document (section 3.6.3)\n\
    \   Header field name:  Cc\n   Applicable protocol:  Mail\n   Status:  standard\n\
    \   Author/Change controller:  IETF\n   Specification document(s):  This document\
    \ (section 3.6.3)\n   Header field name:  Bcc\n   Applicable protocol:  Mail\n\
    \   Status:  standard\n   Author/Change controller:  IETF\n   Specification document(s):\
    \  This document (section 3.6.3)\n   Header field name:  Message-ID\n   Applicable\
    \ protocol:  Mail\n   Status:  standard\n   Author/Change controller:  IETF\n\
    \   Specification document(s):  This document (section 3.6.4)\n   Header field\
    \ name:  In-Reply-To\n   Applicable protocol:  Mail\n   Status:  standard\n  \
    \ Author/Change controller:  IETF\n   Specification document(s):  This document\
    \ (section 3.6.4)\n   Header field name:  References\n   Applicable protocol:\
    \  Mail\n   Status:  standard\n   Author/Change controller:  IETF\n   Specification\
    \ document(s):  This document (section 3.6.4)\n   Header field name:  Subject\n\
    \   Applicable protocol:  Mail\n   Status:  standard\n   Author/Change controller:\
    \  IETF\n   Specification document(s):  This document (section 3.6.5)\n   Header\
    \ field name:  Comments\n   Applicable protocol:  Mail\n   Status:  standard\n\
    \   Author/Change controller:  IETF\n   Specification document(s):  This document\
    \ (section 3.6.5)\n   Header field name:  Keywords\n   Applicable protocol:  Mail\n\
    \   Status:  standard\n   Author/Change controller:  IETF\n   Specification document(s):\
    \  This document (section 3.6.5)\n   Header field name:  Resent-Date\n   Applicable\
    \ protocol:  Mail\n   Status:  standard\n   Author/Change controller:  IETF\n\
    \   Specification document(s):  This document (section 3.6.6)\n   Header field\
    \ name:  Resent-From\n   Applicable protocol:  Mail\n   Status:  standard\n  \
    \ Author/Change controller:  IETF\n   Specification document(s):  This document\
    \ (section 3.6.6)\n   Header field name:  Resent-Sender\n   Applicable protocol:\
    \  Mail\n   Status:  standard\n   Author/Change controller:  IETF\n   Specification\
    \ document(s):  This document (section 3.6.6)\n   Header field name:  Resent-To\n\
    \   Applicable protocol:  Mail\n   Status:  standard\n   Author/Change controller:\
    \  IETF\n   Specification document(s):  This document (section 3.6.6)\n   Header\
    \ field name:  Resent-Cc\n   Applicable protocol:  Mail\n   Status:  standard\n\
    \   Author/Change controller:  IETF\n   Specification document(s):  This document\
    \ (section 3.6.6)\n   Header field name:  Resent-Bcc\n   Applicable protocol:\
    \  Mail\n   Status:  standard\n   Author/Change controller:  IETF\n   Specification\
    \ document(s):  This document (section 3.6.6)\n   Header field name:  Resent-Reply-To\n\
    \   Applicable protocol:  Mail\n   Status:  obsolete\n   Author/Change controller:\
    \  IETF\n   Specification document(s):  This document (section 4.5.6)\n   Header\
    \ field name:  Resent-Message-ID\n   Applicable protocol:  Mail\n   Status:  standard\n\
    \   Author/Change controller:  IETF\n   Specification document(s):  This document\
    \ (section 3.6.6)\n   Header field name:  Return-Path\n   Applicable protocol:\
    \  Mail\n   Status:  standard\n   Author/Change controller:  IETF\n   Specification\
    \ document(s):  This document (section 3.6.7)\n   Header field name:  Received\n\
    \   Applicable protocol:  Mail\n   Status:  standard\n   Author/Change controller:\
    \  IETF\n   Specification document(s):  This document (section 3.6.7)\n   Related\
    \ information:  [RFC5321]\n"
- title: Appendix A.  Example Messages
  contents:
  - "Appendix A.  Example Messages\n   This section presents a selection of messages.\
    \  These are intended to\n   assist in the implementation of this specification,\
    \ but should not be\n   taken as normative; that is to say, although the examples\
    \ in this\n   section were carefully reviewed, if there happens to be a conflict\n\
    \   between these examples and the syntax described in sections 3 and 4\n   of\
    \ this document, the syntax in those sections is to be taken as\n   correct.\n\
    \   In the text version of this document, messages in this section are\n   delimited\
    \ between lines of \"----\".  The \"----\" lines are not part of\n   the message\
    \ itself.\n"
- title: Appendix A.1.  Addressing Examples
  contents:
  - "Appendix A.1.  Addressing Examples\n   The following are examples of messages\
    \ that might be sent between two\n   individuals.\n"
- title: Appendix A.1.1.  A Message from One Person to Another with Simple
  contents:
  - "Appendix A.1.1.  A Message from One Person to Another with Simple\n         \
    \        Addressing\n   This could be called a canonical message.  It has a single\
    \ author,\n   John Doe, a single recipient, Mary Smith, a subject, the date, a\n\
    \   message identifier, and a textual message in the body.\n   ----\n   From:\
    \ John Doe <jdoe@machine.example>\n   To: Mary Smith <mary@example.net>\n   Subject:\
    \ Saying Hello\n   Date: Fri, 21 Nov 1997 09:55:06 -0600\n   Message-ID: <1234@local.machine.example>\n\
    \   This is a message just to say hello.\n   So, \"Hello\".\n   ----\n   If John's\
    \ secretary Michael actually sent the message, even though\n   John was the author\
    \ and replies to this message should go back to\n   him, the sender field would\
    \ be used:\n   ----\n   From: John Doe <jdoe@machine.example>\n   Sender: Michael\
    \ Jones <mjones@machine.example>\n   To: Mary Smith <mary@example.net>\n   Subject:\
    \ Saying Hello\n   Date: Fri, 21 Nov 1997 09:55:06 -0600\n   Message-ID: <1234@local.machine.example>\n\
    \   This is a message just to say hello.\n   So, \"Hello\".\n   ----\n"
- title: Appendix A.1.2.  Different Types of Mailboxes
  contents:
  - "Appendix A.1.2.  Different Types of Mailboxes\n   This message includes multiple\
    \ addresses in the destination fields\n   and also uses several different forms\
    \ of addresses.\n   ----\n   From: \"Joe Q. Public\" <john.q.public@example.com>\n\
    \   To: Mary Smith <mary@x.test>, jdoe@example.org, Who? <one@y.test>\n   Cc:\
    \ <boss@nil.test>, \"Giant; \\\"Big\\\" Box\" <sysservices@example.net>\n   Date:\
    \ Tue, 1 Jul 2003 10:52:37 +0200\n   Message-ID: <5678.21-Nov-1997@example.com>\n\
    \   Hi everyone.\n   ----\n   Note that the display names for Joe Q. Public and\
    \ Giant; \"Big\" Box\n   needed to be enclosed in double-quotes because the former\
    \ contains\n   the period and the latter contains both semicolon and double-quote\n\
    \   characters (the double-quote characters appearing as quoted-pair\n   constructs).\
    \  Conversely, the display name for Who? could appear\n   without them because\
    \ the question mark is legal in an atom.  Notice\n   also that jdoe@example.org\
    \ and boss@nil.test have no display names\n   associated with them at all, and\
    \ jdoe@example.org uses the simpler\n   address form without the angle brackets.\n"
- title: Appendix A.1.3.  Group Addresses
  contents:
  - "Appendix A.1.3.  Group Addresses\n   ----\n   From: Pete <pete@silly.example>\n\
    \   To: A Group:Ed Jones <c@a.test>,joe@where.test,John <jdoe@one.test>;\n   Cc:\
    \ Undisclosed recipients:;\n   Date: Thu, 13 Feb 1969 23:32:54 -0330\n   Message-ID:\
    \ <testabcd.1234@silly.example>\n   Testing.\n   ----\n   In this message, the\
    \ \"To:\" field has a single group recipient named\n   \"A Group\", which contains\
    \ 3 addresses, and a \"Cc:\" field with an\n   empty group recipient named Undisclosed\
    \ recipients.\n"
- title: Appendix A.2.  Reply Messages
  contents:
  - "Appendix A.2.  Reply Messages\n   The following is a series of three messages\
    \ that make up a\n   conversation thread between John and Mary.  John first sends\
    \ a\n   message to Mary, Mary then replies to John's message, and then John\n\
    \   replies to Mary's reply message.\n   Note especially the \"Message-ID:\",\
    \ \"References:\", and \"In-Reply-To:\"\n   fields in each message.\n   ----\n\
    \   From: John Doe <jdoe@machine.example>\n   To: Mary Smith <mary@example.net>\n\
    \   Subject: Saying Hello\n   Date: Fri, 21 Nov 1997 09:55:06 -0600\n   Message-ID:\
    \ <1234@local.machine.example>\n   This is a message just to say hello.\n   So,\
    \ \"Hello\".\n   ----\n   When sending replies, the Subject field is often retained,\
    \ though\n   prepended with \"Re: \" as described in section 3.6.5.\n   ----\n\
    \   From: Mary Smith <mary@example.net>\n   To: John Doe <jdoe@machine.example>\n\
    \   Reply-To: \"Mary Smith: Personal Account\" <smith@home.example>\n   Subject:\
    \ Re: Saying Hello\n   Date: Fri, 21 Nov 1997 10:01:10 -0600\n   Message-ID: <3456@example.net>\n\
    \   In-Reply-To: <1234@local.machine.example>\n   References: <1234@local.machine.example>\n\
    \   This is a reply to your hello.\n   ----\n   Note the \"Reply-To:\" field in\
    \ the above message.  When John replies\n   to Mary's message above, the reply\
    \ should go to the address in the\n   \"Reply-To:\" field instead of the address\
    \ in the \"From:\" field.\n   ----\n   To: \"Mary Smith: Personal Account\" <smith@home.example>\n\
    \   From: John Doe <jdoe@machine.example>\n   Subject: Re: Saying Hello\n   Date:\
    \ Fri, 21 Nov 1997 11:00:00 -0600\n   Message-ID: <abcd.1234@local.machine.test>\n\
    \   In-Reply-To: <3456@example.net>\n   References: <1234@local.machine.example>\
    \ <3456@example.net>\n   This is a reply to your reply.\n   ----\n"
- title: Appendix A.3.  Resent Messages
  contents:
  - "Appendix A.3.  Resent Messages\n   Start with the message that has been used\
    \ as an example several\n   times:\n   ----\n   From: John Doe <jdoe@machine.example>\n\
    \   To: Mary Smith <mary@example.net>\n   Subject: Saying Hello\n   Date: Fri,\
    \ 21 Nov 1997 09:55:06 -0600\n   Message-ID: <1234@local.machine.example>\n  \
    \ This is a message just to say hello.\n   So, \"Hello\".\n   ----\n   Say that\
    \ Mary, upon receiving this message, wishes to send a copy of\n   the message\
    \ to Jane such that (a) the message would appear to have\n   come straight from\
    \ John; (b) if Jane replies to the message, the\n   reply should go back to John;\
    \ and (c) all of the original\n   information, like the date the message was originally\
    \ sent to Mary,\n   the message identifier, and the original addressee, is preserved.\
    \  In\n   this case, resent fields are prepended to the message:\n   ----\n  \
    \ Resent-From: Mary Smith <mary@example.net>\n   Resent-To: Jane Brown <j-brown@other.example>\n\
    \   Resent-Date: Mon, 24 Nov 1997 14:22:01 -0800\n   Resent-Message-ID: <78910@example.net>\n\
    \   From: John Doe <jdoe@machine.example>\n   To: Mary Smith <mary@example.net>\n\
    \   Subject: Saying Hello\n   Date: Fri, 21 Nov 1997 09:55:06 -0600\n   Message-ID:\
    \ <1234@local.machine.example>\n   This is a message just to say hello.\n   So,\
    \ \"Hello\".\n   ----\n   If Jane, in turn, wished to resend this message to another\
    \ person,\n   she would prepend her own set of resent header fields to the above\n\
    \   and send that.  (Note that for brevity, trace fields are not shown.)\n"
- title: Appendix A.4.  Messages with Trace Fields
  contents:
  - "Appendix A.4.  Messages with Trace Fields\n   As messages are sent through the\
    \ transport system as described in\n   [RFC5321], trace fields are prepended to\
    \ the message.  The following\n   is an example of what those trace fields might\
    \ look like.  Note that\n   there is some folding white space in the first one\
    \ since these lines\n   can be long.\n   ----\n   Received: from x.y.test\n  \
    \    by example.net\n      via TCP\n      with ESMTP\n      id ABC12345\n    \
    \  for <mary@example.net>;  21 Nov 1997 10:05:43 -0600\n   Received: from node.example\
    \ by x.y.test; 21 Nov 1997 10:01:22 -0600\n   From: John Doe <jdoe@node.example>\n\
    \   To: Mary Smith <mary@example.net>\n   Subject: Saying Hello\n   Date: Fri,\
    \ 21 Nov 1997 09:55:06 -0600\n   Message-ID: <1234@local.node.example>\n   This\
    \ is a message just to say hello.\n   So, \"Hello\".\n   ----\n"
- title: Appendix A.5.  White Space, Comments, and Other Oddities
  contents:
  - "Appendix A.5.  White Space, Comments, and Other Oddities\n   White space, including\
    \ folding white space, and comments can be\n   inserted between many of the tokens\
    \ of fields.  Taking the example\n   from A.1.3, white space and comments can\
    \ be inserted into all of the\n   fields.\n   ----\n   From: Pete(A nice \\) chap)\
    \ <pete(his account)@silly.test(his host)>\n   To:A Group(Some people)\n     \
    \   :Chris Jones <c@(Chris's host.)public.example>,\n            joe@example.org,\n\
    \     John <jdoe@one.test> (my dear friend); (the end of the group)\n   Cc:(Empty\
    \ list)(start)Hidden recipients  :(nobody(that I know))  ;\n   Date: Thu,\n  \
    \       13\n           Feb\n             1969\n         23:32\n              \
    \    -0330 (Newfoundland Time)\n   Message-ID:              <testabcd.1234@silly.test>\n\
    \   Testing.\n   ----\n   The above example is aesthetically displeasing, but\
    \ perfectly legal.\n   Note particularly (1) the comments in the \"From:\" field\
    \ (including\n   one that has a \")\" character appearing as part of a quoted-pair);\
    \ (2)\n   the white space absent after the \":\" in the \"To:\" field as well\
    \ as\n   the comment and folding white space after the group name, the special\n\
    \   character (\".\") in the comment in Chris Jones's address, and the\n   folding\
    \ white space before and after \"joe@example.org,\"; (3) the\n   multiple and\
    \ nested comments in the \"Cc:\" field as well as the\n   comment immediately\
    \ following the \":\" after \"Cc\"; (4) the folding\n   white space (but no comments\
    \ except at the end) and the missing\n   seconds in the time of the date field;\
    \ and (5) the white space before\n   (but not within) the identifier in the \"\
    Message-ID:\" field.\n"
- title: Appendix A.6.  Obsoleted Forms
  contents:
  - "Appendix A.6.  Obsoleted Forms\n   The following are examples of obsolete (that\
    \ is, the \"MUST NOT\n   generate\") syntactic elements described in section 4\
    \ of this\n   document.\n"
- title: Appendix A.6.1.  Obsolete Addressing
  contents:
  - "Appendix A.6.1.  Obsolete Addressing\n   Note in the example below the lack of\
    \ quotes around Joe Q. Public,\n   the route that appears in the address for Mary\
    \ Smith, the two commas\n   that appear in the \"To:\" field, and the spaces that\
    \ appear around the\n   \".\" in the jdoe address.\n   ----\n   From: Joe Q. Public\
    \ <john.q.public@example.com>\n   To: Mary Smith <@node.test:mary@example.net>,\
    \ , jdoe@test  . example\n   Date: Tue, 1 Jul 2003 10:52:37 +0200\n   Message-ID:\
    \ <5678.21-Nov-1997@example.com>\n   Hi everyone.\n   ----\n"
- title: Appendix A.6.2.  Obsolete Dates
  contents:
  - "Appendix A.6.2.  Obsolete Dates\n   The following message uses an obsolete date\
    \ format, including a non-\n   numeric time zone and a two digit year.  Note that\
    \ although the day-\n   of-week is missing, that is not specific to the obsolete\
    \ syntax; it\n   is optional in the current syntax as well.\n   ----\n   From:\
    \ John Doe <jdoe@machine.example>\n   To: Mary Smith <mary@example.net>\n   Subject:\
    \ Saying Hello\n   Date: 21 Nov 97 09:55:06 GMT\n   Message-ID: <1234@local.machine.example>\n\
    \   This is a message just to say hello.\n   So, \"Hello\".\n   ----\n"
- title: Appendix A.6.3.  Obsolete White Space and Comments
  contents:
  - "Appendix A.6.3.  Obsolete White Space and Comments\n   White space and comments\
    \ can appear between many more elements than\n   in the current syntax.  Also,\
    \ folding lines that are made up entirely\n   of white space are legal.\n   ----\n\
    \   From  : John Doe <jdoe@machine(comment).  example>\n   To    : Mary Smith\n\
    \   __\n             <mary@example.net>\n   Subject     : Saying Hello\n   Date\
    \  : Fri, 21 Nov 1997 09(comment):   55  :  06 -0600\n   Message-ID  : <1234 \
    \  @   local(blah)  .machine .example>\n   This is a message just to say hello.\n\
    \   So, \"Hello\".\n   ----\n   Note especially the second line of the \"To:\"\
    \ field.  It starts with\n   two space characters.  (Note that \"__\" represent\
    \ blank spaces.)\n   Therefore, it is considered part of the folding, as described\
    \ in\n   section 4.2.  Also, the comments and white space throughout\n   addresses,\
    \ dates, and message identifiers are all part of the\n   obsolete syntax.\n"
- title: Appendix B.  Differences from Earlier Specifications
  contents:
  - "Appendix B.  Differences from Earlier Specifications\n   This appendix contains\
    \ a list of changes that have been made in the\n   Internet Message Format from\
    \ earlier specifications, specifically\n   [RFC0822], [RFC1123], and [RFC2822].\
    \  Items marked with an asterisk\n   (*) below are items which appear in section\
    \ 4 of this document and\n   therefore can no longer be generated.\n   The following\
    \ are the changes made from [RFC0822] and [RFC1123] to\n   [RFC2822] that remain\
    \ in this document:\n   1.   Period allowed in obsolete form of phrase.\n   2.\
    \   ABNF moved out of document, now in [RFC5234].\n   3.   Four or more digits\
    \ allowed for year.\n   4.   Header field ordering (and lack thereof) made explicit.\n\
    \   5.   Encrypted header field removed.\n   6.   Specifically allow and give\
    \ meaning to \"-0000\" time zone.\n   7.   Folding white space is not allowed\
    \ between every token.\n   8.   Requirement for destinations removed.\n   9. \
    \  Forwarding and resending redefined.\n   10.  Extension header fields no longer\
    \ specifically called out.\n   11.  ASCII 0 (null) removed.*\n   12.  Folding\
    \ continuation lines cannot contain only white space.*\n   13.  Free insertion\
    \ of comments not allowed in date.*\n   14.  Non-numeric time zones not allowed.*\n\
    \   15.  Two digit years not allowed.*\n   16.  Three digit years interpreted,\
    \ but not allowed for generation.*\n   17.  Routes in addresses not allowed.*\n\
    \   18.  CFWS within local-parts and domains not allowed.*\n   19.  Empty members\
    \ of address lists not allowed.*\n   20.  Folding white space between field name\
    \ and colon not allowed.*\n   21.  Comments between field name and colon not allowed.\n\
    \   22.  Tightened syntax of in-reply-to and references.*\n   23.  CFWS within\
    \ msg-id not allowed.*\n   24.  Tightened semantics of resent fields as informational\
    \ only.\n   25.  Resent-Reply-To not allowed.*\n   26.  No multiple occurrences\
    \ of fields (except resent and received).*\n   27.  Free CR and LF not allowed.*\n\
    \   28.  Line length limits specified.\n   29.  Bcc more clearly specified.\n\
    \   The following are changes from [RFC2822].\n   1.   Assorted typographical/grammatical\
    \ errors fixed and\n        clarifications made.\n   2.   Changed \"standard\"\
    \ to \"document\" or \"specification\" throughout.\n   3.   Made distinction between\
    \ \"header field\" and \"header section\".\n   4.   Removed NO-WS-CTL from ctext,\
    \ qtext, dtext, and unstructured.*\n   5.   Moved discussion of specials to the\
    \ \"Atom\" section.  Moved text\n        to \"Overall message syntax\" section.\n\
    \   6.   Simplified CFWS syntax.\n   7.   Fixed unstructured syntax.\n   8.  \
    \ Changed date and time syntax to deal with white space in\n        obsolete date\
    \ syntax.\n   9.   Removed quoted-pair from domain literals and message\n    \
    \    identifiers.*\n   10.  Clarified that other specifications limit domain syntax.\n\
    \   11.  Simplified \"Bcc:\" and \"Resent-Bcc:\" syntax.\n   12.  Allowed optional-field\
    \ to appear within trace information.\n   13.  Removed no-fold-quote from msg-id.\
    \  Clarified syntax\n        limitations.\n   14.  Generalized \"Received:\" syntax\
    \ to fix bugs and move definition\n        out of this document.\n   15.  Simplified\
    \ obs-qp.  Fixed and simplified obs-utext (which now\n        only appears in\
    \ the obsolete syntax).  Removed obs-text and obs-\n        char, adding obs-body.\n\
    \   16.  Fixed obsolete date syntax to allow for more (or less) comments\n   \
    \     and white space.\n   17.  Fixed all obsolete list syntax (obs-domain-list,\
    \ obs-mbox-list,\n        obs-addr-list, obs-phrase-list, and the newly added\
    \ obs-group-\n        list).\n   18.  Fixed obs-reply-to syntax.\n   19.  Fixed\
    \ obs-bcc and obs-resent-bcc to allow empty lists.\n   20.  Removed obs-path.\n"
- title: Appendix C.  Acknowledgements
  contents:
  - "Appendix C.  Acknowledgements\n   Many people contributed to this document. \
    \ They included folks who\n   participated in the Detailed Revision and Update\
    \ of Messaging\n   Standards (DRUMS) Working Group of the Internet Engineering\
    \ Task\n   Force (IETF), the chair of DRUMS, the Area Directors of the IETF, and\n\
    \   people who simply sent their comments in via email.  The editor is\n   deeply\
    \ indebted to them all and thanks them sincerely.  The below\n   list includes\
    \ everyone who sent email concerning both this document\n   and [RFC2822].  Hopefully,\
    \ everyone who contributed is named here:\n   +--------------------+----------------------+---------------------+\n\
    \   | Matti Aarnio       | Tanaka Akira         | Russ Allbery        |\n   |\
    \ Eric Allman        | Harald Alvestrand    | Ran Atkinson        |\n   | Jos\
    \ Backus         | Bruce Balden         | Dave Barr           |\n   | Alan Barrett\
    \       | John Beck            | J Robert von Behren |\n   | Jos den Bekker  \
    \   | D J Bernstein        | James Berriman      |\n   | Oliver Block       |\
    \ Norbert Bollow       | Raj Bose            |\n   | Antony Bowesman    | Scott\
    \ Bradner        | Randy Bush          |\n   | Tom Byrer          | Bruce Campbell\
    \       | Larry Campbell      |\n   | W J Carpenter      | Michael Chapman   \
    \   | Richard Clayton     |\n   | Maurizio Codogno   | Jim Conklin          |\
    \ R Kelley Cook       |\n   | Nathan Coulter     | Steve Coya           | Mark\
    \ Crispin        |\n   | Dave Crocker       | Matt Curtin          | Michael D'Errico\
    \    |\n   | Cyrus Daboo        | Michael D Dean       | Jutta Degener       |\n\
    \   | Mark Delany        | Steve Dorner         | Harold A Driscoll   |\n   |\
    \ Michael Elkins     | Frank Ellerman       | Robert Elz          |\n   | Johnny\
    \ Eriksson    | Erik E Fair          | Roger Fajman        |\n   | Patrik Faltstrom\
    \   | Claus Andre Faerber  | Barry Finkel        |\n   | Erik Forsberg      |\
    \ Chuck Foster         | Paul Fox            |\n   | Klaus M Frank      | Ned\
    \ Freed            | Jochen Friedrich    |\n   | Randall C Gellens  | Sukvinder\
    \ Singh Gill | Tim Goodwin         |\n   | Philip Guenther    | Arnt Gulbrandsen\
    \     | Eric A Hall         |\n   | Tony Hansen        | John Hawkinson      \
    \ | Philip Hazel        |\n   | Kai Henningsen     | Robert Herriot       | Paul\
    \ Hethmon        |\n   | Jim Hill           | Alfred Hoenes        | Paul E Hoffman\
    \      |\n   | Steve Hole         | Kari Hurtta          | Marco S Hyman     \
    \  |\n   | Ofer Inbar         | Olle Jarnefors       | Kevin Johnson       |\n\
    \   | Sudish Joseph      | Maynard Kang         | Prabhat Keni        |\n   |\
    \ John C Klensin     | Graham Klyne         | Brad Knowles        |\n   | Shuhei\
    \ Kobayashi   | Peter Koch           | Dan Kohn            |\n   | Christian Kuhtz\
    \    | Anand Kumria         | Steen Larsen        |\n   | Eliot Lear         |\
    \ Barry Leiba          | Jay Levitt          |\n   | Bruce Lilly        | Lars-Johan\
    \ Liman     | Charles Lindsey     |\n   | Pete Loshin        | Simon Lyall   \
    \       | Bill Manning        |\n   | John Martin        | Mark Martinec     \
    \   | Larry Masinter      |\n   | Denis McKeon       | William P McQuillan  |\
    \ Alexey Melnikov     |\n   | Perry E Metzger    | Steven Miller        | S Moonesamy\
    \         |\n   | Keith Moore        | John Gardiner Myers  | Chris Newman   \
    \     |\n   | John W Noerenberg  | Eric Norman          | Mike O'Dell        \
    \ |\n   | Larry Osterman     | Paul Overell         | Jacob Palme         |\n\
    \   | Michael A Patton   | Uzi Paz              | Michael A Quinlan   |\n   |\
    \ Robert Rapplean    | Eric S Raymond       | Sam Roberts         |\n   | Hugh\
    \ Sasse         | Bart Schaefer        | Tom Scola           |\n   | Wolfgang\
    \ Segmuller | Nick Shelness        | John Stanley        |\n   | Einar Stefferud\
    \    | Jeff Stephenson      | Bernard Stern       |\n   | Peter Sylvester    |\
    \ Mark Symons          | Eric Thomas         |\n   | Lee Thompson       | Karel\
    \ De Vriendt     | Matthew Wall        |\n   | Rolf Weber         | Brent B Welch\
    \        | Dan Wing            |\n   | Jack De Winter     | Gregory J Woodhouse\
    \  | Greg A Woods        |\n   | Kazu Yamamoto      | Alain Zahm           | Jamie\
    \ Zawinski      |\n   | Timothy S Zurcher  |                      |          \
    \           |\n   +--------------------+----------------------+---------------------+\n"
- title: References
  contents:
  - '7.  References

    '
  - "7.1.  Normative References\n   [ANSI.X3-4.1986]  American National Standards\
    \ Institute, \"Coded\n                     Character Set - 7-bit American Standard\
    \ Code for\n                     Information Interchange\", ANSI X3.4, 1986.\n\
    \   [RFC1034]         Mockapetris, P., \"Domain names - concepts and\n       \
    \              facilities\", STD 13, RFC 1034, November 1987.\n   [RFC1035]  \
    \       Mockapetris, P., \"Domain names - implementation and\n               \
    \      specification\", STD 13, RFC 1035, November 1987.\n   [RFC1123]       \
    \  Braden, R., \"Requirements for Internet Hosts -\n                     Application\
    \ and Support\", STD 3, RFC 1123,\n                     October 1989.\n   [RFC2119]\
    \         Bradner, S., \"Key words for use in RFCs to Indicate\n             \
    \        Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC5234]   \
    \      Crocker, D. and P. Overell, \"Augmented BNF for\n                     Syntax\
    \ Specifications: ABNF\", STD 68, RFC 5234,\n                     January 2008.\n"
  - "7.2.  Informative References\n   [RFC0822]         Crocker, D., \"Standard for\
    \ the format of ARPA\n                     Internet text messages\", STD 11, RFC\
    \ 822,\n                     August 1982.\n   [RFC1305]         Mills, D., \"\
    Network Time Protocol (Version 3)\n                     Specification, Implementation\"\
    , RFC 1305,\n                     March 1992.\n   [ISO.2022.1994]   International\
    \ Organization for Standardization,\n                     \"Information technology\
    \ - Character code structure\n                     and extension techniques\"\
    , ISO Standard 2022, 1994.\n   [RFC2045]         Freed, N. and N. Borenstein,\
    \ \"Multipurpose Internet\n                     Mail Extensions (MIME) Part One:\
    \ Format of Internet\n                     Message Bodies\", RFC 2045, November\
    \ 1996.\n   [RFC2046]         Freed, N. and N. Borenstein, \"Multipurpose Internet\n\
    \                     Mail Extensions (MIME) Part Two: Media Types\",\n      \
    \               RFC 2046, November 1996.\n   [RFC2047]         Moore, K., \"MIME\
    \ (Multipurpose Internet Mail\n                     Extensions) Part Three: Message\
    \ Header Extensions\n                     for Non-ASCII Text\", RFC 2047, November\
    \ 1996.\n   [RFC2049]         Freed, N. and N. Borenstein, \"Multipurpose Internet\n\
    \                     Mail Extensions (MIME) Part Five: Conformance\n        \
    \             Criteria and Examples\", RFC 2049, November 1996.\n   [RFC2822]\
    \         Resnick, P., \"Internet Message Format\", RFC 2822,\n              \
    \       April 2001.\n   [RFC3864]         Klyne, G., Nottingham, M., and J. Mogul,\n\
    \                     \"Registration Procedures for Message Header\n         \
    \            Fields\", BCP 90, RFC 3864, September 2004.\n   [RFC4021]       \
    \  Klyne, G. and J. Palme, \"Registration of Mail and\n                     MIME\
    \ Header Fields\", RFC 4021, March 2005.\n   [RFC4288]         Freed, N. and J.\
    \ Klensin, \"Media Type\n                     Specifications and Registration\
    \ Procedures\",\n                     BCP 13, RFC 4288, December 2005.\n   [RFC4289]\
    \         Freed, N. and J. Klensin, \"Multipurpose Internet\n                \
    \     Mail Extensions (MIME) Part Four: Registration\n                     Procedures\"\
    , BCP 13, RFC 4289, December 2005.\n   [RFC5321]         Klensin, J., \"Simple\
    \ Mail Transfer Protocol\",\n                     RFC 5321, October 2008.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Peter W. Resnick (editor)\n   Qualcomm Incorporated\n  \
    \ 5775 Morehouse Drive\n   San Diego, CA  92121-1714\n   US\n   Phone: +1 858\
    \ 651 4478\n   EMail: presnick@qualcomm.com\n   URI:   http://www.qualcomm.com/~presnick/\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
