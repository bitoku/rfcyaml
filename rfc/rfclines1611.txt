This memo defines a portion of the Management Information Base (MIB) for use with network management protocols in the Internet community.
In particular, it describes a set of extensions which instrument DNS name server functions.
This memo was produced by the DNS working group.
With the adoption of the Internet standard Network Management Framework [4,5,6,7], and with a large number of vendor implementations of these standards in commercially available products, it became possible to provide a higher level of effective network management in TCP/IP based internets than was previously available.
With the growth in the use of these standards, it has become possible to consider the management of other elements of the infrastructure beyond the basic TCP/IP protocols.
A key element of the TCP/IP infrastructure is the DNS.
Up to this point there has been no mechanism to integrate the management of the DNS with SNMP based managers.
This memo provides the mechanisms by which IP based management stations can effectively manage DNS name server software in an integrated fashion.
We have defined DNS MIB objects to be used in conjunction with the Internet MIB to allow access to and control of DNS name server software via SNMP by the Internet community.
The SNMPv2 Network Management Framework
Network Management Framework consists of four major components.
They are:  RFC 1442 which defines the SMI, the mechanisms used for describing and naming objects for the purpose of management.
STD 17, RFC 1213 defines MIB II, the core set of managed objects for the Internet suite of protocols.
RFC 1445 which defines the administrative and other architectural aspects of the framework.
RFC 1448 which defines the protocol used for network access to managed objects.
The Framework permits new objects to be defined for the purpose of experimentation and evaluation.
Object Definitions Managed objects are accessed via a virtual information store, termed the Management Information Base or MIB.
Objects in the MIB are defined using the subset of Abstract Syntax Notation One (ASN.1) defined in the SMI.
In particular, each object object type is named by an OBJECT IDENTIFIER, an administratively assigned name.
The object type together with an object instance serves to uniquely identify a specific instantiation of the object.
For human convenience, we often use a textual string, termed the descriptor, to refer to the object type.
In theory, the DNS world is pretty simple.
There are two kinds of entities: resolvers and name servers.
The real world, however, is not so simple.
Implementors have made widely differing choices about how to divide DNS functions between resolvers and servers.
They have also constructed various sorts of exotic hybrids.
The most difficult task in defining this MIB was to accommodate this wide range of entities without having to come up with a separate MIB for each.
We divided up the various DNS functions into two, non overlapping classes, called "resolver functions" and "name server functions."
A DNS entity that performs what we define as resolver functions contains a resolver, and therefore must implement the MIB groups required of all resolvers which are defined in a separate MIB Module.
A DNS entity which implements name server functions is considered to be a name server, and must implement the MIB groups required for name servers in this module.
If the same piece of software performs both resolver and server functions, we imagine that it contains both a resolver and a server and would thus implement both the DNS Server and DNS Resolver MIBs.
In our model, a resolver is a program (or piece thereof) which obtains resource records from servers.
Normally it does so at the behest of an application, but may also do so as part of its own operation.
A resolver sends DNS protocol queries and receives DNS protocol replies.
neither receives queries nor sends replies.
A full service resolver is one that knows how to resolve queries: it obtains the needed resource records by contacting a server authoritative for the records desired.
A stub resolver does not know how to resolve queries: it sends all queries to a local name server, setting the "recursion desired" flag to indicate that it hopes that the name server will be willing to resolve the query.
A resolver may (optionally) have a cache for remembering previously acquired resource records.
It may also have a negative cache for remembering names or data that have been determined not to exist.
A name server is a program (or piece thereof) that provides resource records to resolvers.
All references in this document to "a name server" imply "the name server's role"; in some cases the name server's role and the resolver's role might be combined into a single program.
A name server receives DNS protocol queries and sends DNS protocol replies.
neither sends queries nor receives replies.
As a consequence, name servers do not have caches.
Normally, a name server would expect to receive only those queries to which it could respond with authoritative information.
However, if a name server receives a query that it cannot respond to with purely authoritative information, it may choose to try to obtain the necessary additional information from a resolver which may or may not be a separate process.
Many of the objects included in this memo have been created from information contained in the DNS specifications [1,2], as amended and clarified by subsequent host requirements documents [3].
Other objects have been created based on experience with existing DNS management tools, expected operational needs, the statistics generated by existing DNS implementations, and the configuration files used by existing DNS implementations.
These objects have been ordered into groups as follows:  Server Configuration Group  Server Counter Group  Server
Optional Counter Group  Server Zone Group
This information has been converted into a standard form using the SNMPv2 SMI defined in [9].
For the most part, the descriptions are influenced by the DNS related RFCs noted above.
For example, the descriptions for counters used for the various types of queries of DNS records are influenced by the definitions used for the various record types found in [2].
Textual Conventions Several conceptual data types have been introduced as a textual conventions in this DNS MIB document.
These additions will facilitate the common understanding of information used by the DNS.
No changes to the SMI or the SNMP are necessary to support these conventions.
Readers familiar with MIBs designed to manage entities in the lower layers of the Internet protocol suite may be surprised at the number of non enumerated integers used in this MIB to represent values such as DNS RR class and type numbers.
The reason for this choice is simple: the DNS itself is designed as an extensible protocol, allowing new classes and types of resource records to be added to the protocol without recoding the core DNS software.
non  enumerated integers to represent these data types in this MIB
allows the MIB to accommodate these changes as well.
FROM RFC 1213 MODULE IDENTITY, OBJECT TYPE, OBJECT IDENTITY, IpAddress, Counter32, Gauge32
FROM SNMPv2 SMI TEXTUAL CONVENTION, RowStatus, DisplayString, TruthValue FROM SNMPv2
TC MODULE COMPLIANCE, OBJECT GROUP FROM SNMPv2 CONF;
dns OBJECT IDENTITY STATUS  current DESCRIPTION
The OID assigned to DNS MIB work by the IANA."
Digital Equipment Corporation 110 Spit Brook Road ZKO1 3/H18 Nashua, NH 03062 2698
" DESCRIPTION "The MIB module for entities implementing the server side of the Domain Name System (DNS) protocol."
groups in the DNS server MIB.
A DISPLAY HINT would be nice, but difficult to express.
"A DNS name is a sequence of labels.
When DNS names are displayed, the boundaries between labels are typically indicated by dots (e.g. `Acme' and `COM'
are labels in the name `Acme.
In the DNS protocol, however, no such separators are needed because each label is encoded as a length octet followed by the indicated number of octets of label.
COM' is encoded as the octet sequence { 4, 'A', 'c', 'm', 'e', 3, 'C', 'O', 'M', 0 }
(the final 0 is the length of the name of the root domain, which appears implicitly at the end of any DNS name).
This MIB uses the same encoding as the DNS protocol.
A DnsName must always be a fully qualified name.
It is an error to encode a relative domain name as a DnsName without first making it a fully qualified name."
REFERENCE "RFC 1034 section 3.1.
TEXTUAL CONVENTION STATUS  current DESCRIPTION
"This textual convention is like a DnsName, but is used as an index componant in tables.
Alphabetic characters in names of this type are restricted to uppercase: the characters 'a' through 'z' are mapped to the characters 'A' through 'Z'.
This restriction is intended to make the lexical ordering imposed by SNMP useful when applied to DNS names.
Note that it is theoretically possible for a valid DNS name to exceed the allowed length of an SNMP object identifer, and thus be impossible to represent in tables in this MIB that are indexed by DNS name.
Sampling of DNS names in current use on the Internet suggests that this limit does not pose a serious problem in practice."
REFERENCE "RFC 1034 section 3.1, RFC 1448 section 4.1.
TEXTUAL CONVENTION DISPLAY HINT "2d"
"This data type is used to represent the class values which appear in Resource Records in the DNS.
A 16 bit unsigned integer is used to allow room for new classes of records to be defined.
Existing standard classes are listed in the DNS specifications."
REFERENCE "RFC 1035 section 3.2.4."
HINT "2d" STATUS  current DESCRIPTION
"This data type is used to represent the type values which appear in Resource Records in the DNS.
A 16 bit unsigned integer is used to allow room for new record types to be defined.
Existing standard types are listed in the DNS specifications."
REFERENCE "RFC 1035 section 3.2.2.
TEXTUAL CONVENTION DISPLAY HINT "2d" STATUS  current DESCRIPTION
"This data type is used to represent the QClass values which appear in Resource Records in the DNS.
A 16 bit unsigned integer is used to allow room for new QClass records to be defined.
Existing standard QClasses are listed in the DNS specification."
REFERENCE "RFC 1035 section 3.2.5.
HINT "2d" STATUS  current DESCRIPTION
"This data type is used to represent the QType values which appear in Resource Records in the DNS.
A 16 bit unsigned integer is used to allow room for new QType records to be defined.
Existing standard QTypes are listed in the DNS specification."
REFERENCE "RFC 1035 section 3.2.3.
"DnsTime values are 32 bit unsigned integers which measure time in seconds."
TEXTUAL CONVENTION STATUS  current DESCRIPTION "This textual convention is used to represent the DNS OPCODE values used in the header section of DNS messages.
Existing standard OPCODE values are listed in the DNS specifications."
REFERENCE "RFC 1035 section 4.1.1.
TEXTUAL CONVENTION STATUS  current DESCRIPTION
"This data type is used to represent the DNS RCODE value in DNS response messages.
Existing standard RCODE values are listed in the DNS specifications."
REFERENCE "RFC 1035 section 4.1.1.
Server Configuration Group dnsServConfigImplementIdent OBJECT
INTEGER { available(1), restricted(2), unavailable(3) } MAX ACCESS
"This represents the recursion services offered by this name server.
The values that can be read or written are:
available(1) performs recursion on requests from clients.
restricted(2) recursion is performed on requests only from certain clients, for example; clients on an access control list.
unavailable(3) recursion is not available."
"If the server has a persistent state (e.g., a process), this value will be the time elapsed since it started.
For software without persistant state, this value will be zero."
"If the server has a persistent state (e.g., a process) and supports a `reset' operation (e.g., can be told to re read configuration files), this value will be the time elapsed since the last time the name server was `reset.'
For software that does not have persistence or does not support a `reset' operation, this value will be zero."
MAX ACCESS  read write STATUS
current DESCRIPTION "Status/action object to reinitialize any persistant name server state.
When set to reset(2), any persistant name server state (such as a process) is reinitialized as if the name server had just been started.
This value will never be returned by a read operation.
When read, one of the following values will be returned:
other(1) server in some unknown state; initializing(3) server (re)initializing; running(4) server currently running."
(empty answer) responses were made."
{ dnsServCounter 9 } dnsServCounterReqRefusals OBJECT TYPE SYNTAX
{ dnsServCounter 11 } dnsServCounterOtherErrors OBJECT TYPE SYNTAX
SEQUENCE OF DnsServCounterEntry MAX ACCESS
"This table contains count information for each DNS class and type value known to the server.
The index allows management software to to create indices to the table to get the specific information desired, e.g., number of queries over UDP for records with type value `A' which came to this server.
In order to prevent an uncontrolled expansion of rows in the table; if dnsServCounterRequests is 0 and dnsServCounterResponses is 0, then the row does not exist and `no such' is returned when the agent is queried for such instances.
dnsServCounterResponses Counter32 } dnsServCounterOpCode OBJECT
"The DNS OPCODE being counted in this row of the table."
A value of udp(1) indicates that the queries reported on this row were sent using UDP.
A value of tcp(2) indicates that the queries reported on this row were sent using TCP.
A value of other(3) indicates that the queries reported on this row were sent using a transport that was neither TCP nor UDP."
{ dnsServCounterEntry 4 } dnsServCounterRequests OBJECT TYPE SYNTAX
{ dnsServCounterEntry 5 } dnsServCounterResponses OBJECT TYPE SYNTAX
The Server Optional Counter Group is intended for those systems   which make distinctions between the different sources of the DNS   queries as defined below.
Objects in this group are implemented on servers which distinguish   between queries which originate from the same host as the server,   queries from one of an arbitrary group of hosts that are on an   access list defined by the server, and queries from hosts that do   not fit either of these descriptions.
The objects found in the Server Counter group are totals.
Thus if   one wanted to identify, for example, the number of queries from   `remote' hosts which have been given authoritative answers, one   would subtract the current values of ServOptCounterFriendsAuthAns   and ServOptCounterSelfAuthAns from servCounterAuthAns.
The purpose of these distinctions is to allow for implementations   to group queries and responses on this basis.
One way in which   servers may make these distinctions is by looking at the source IP   address of the DNS query.
If the source of the query is `your   own'
then the query should be counted as `yourself' (local host).
If the source of the query matches an `access list,' the query   came from a friend.
What constitutes an `access list' is   implementation dependent and could be as simple as a rule that all   hosts on the same IP network as the DNS server are classed   `friends.'
No host is in more than one of the three groups defined above.
{ dnsServOptCounter 1 } dnsServOptCounterSelfAuthNoNames OBJECT TYPE SYNTAX
{ dnsServOptCounter 4 } dnsServOptCounterSelfNonAuthNoDatas OBJECT TYPE SYNTAX
{ dnsServOptCounter 5 } dnsServOptCounterSelfReferrals OBJECT TYPE SYNTAX
{ dnsServOptCounter 6 } dnsServOptCounterSelfErrors OBJECT
RCODEs other than 0 and 3).
the server has processed which originated from a resolver on the same host."
The definition of friends is a locally defined matter."
The definition of friends is a locally defined matter."
no such data (empty answer) responses were made.
The definition of friends is a locally defined matter."
The definition of friends is a locally defined matter."
The definition of friends is a locally defined matter."
The definition of friends is a locally defined matter."
REFERENCE "RFC 1035 section 4.1.1."
{ dnsServOptCounter 21 } dnsServOptCounterFriendsOtherErrors OBJECT TYPE SYNTAX
This table contains zone configuration information.
SEQUENCE OF DnsServZoneEntry MAX ACCESS
current DESCRIPTION "Table of zones for which this name server provides information.
Each of the zones may be loaded from stable storage via an implementation specific mechanism or may be obtained from another name server via a zone transfer.
If name server doesn't load any zones, this table is empty."
An entry in the name server zone table.
New rows may be added either via SNMP or by the name server itself.
, dnsServZoneCurrent TruthValue, dnsServZoneLastSourceSuccess IpAddress } dnsServZoneName
current DESCRIPTION "DNS name of the zone described by this row of the table.
This is the owner name of the SOA RR that defines the top of the zone.
This is name is in uppercase: characters 'a' through 'z' are mapped to 'A' through 'Z' in order to make the lexical ordering useful."
current DESCRIPTION "DNS class of the RRs in this zone."
Elapsed time in seconds since last successful reload of this zone."
} dnsServZoneLastReloadAttempt OBJECT TYPE SYNTAX
Elapsed time in seconds since last attempted reload of this zone."
This value should match the value of dnsServZoneSourceSuccess if the attempt was succcessful.
{ dnsServZoneEntry 6 } dnsServZoneSerial OBJECT TYPE SYNTAX
If the zone has not been successfully loaded within the memory of this name server, the value of this variable is zero."
"Whether the server's copy of the zone represented by this row of the table is currently valid.
If the zone has never been successfully loaded or has expired since it was last succesfully loaded, this variable will have the value false(2), otherwise this variable will have the value true(1)."
If unknown (e.g., zone has never been successfully transfered) or irrelevant
DNS Zone Source Table dnsServZoneSrcTable
SEQUENCE OF DnsServZoneSrcEntry MAX ACCESS
"This table is a list of IP addresses from which the server will attempt to load zone information using DNS zone transfer operations.
A reload may occur due to SNMP operations that create a row in dnsServZoneTable or a SET to object dnsServZoneReload.
This table is only used when the zone is loaded via zone transfer."
{ dnsServZone 2 } dnsServZoneSrcEntry OBJECT
An entry in the name server zone source table.
dnsServZoneSrcAddr IpAddress, dnsServZoneSrcStatus RowStatus }
current DESCRIPTION "DNS name of the zone to which this entry applies."
{ dnsServZoneSrcEntry 1 } dnsServZoneSrcClass OBJECT TYPE SYNTAX
current DESCRIPTION "DNS class of zone to which this entry applies."
current DESCRIPTION "IP address of name server host from which this zone might be obtainable."
A collection of objects providing basic configuration control of a DNS name server."
A collection of objects providing basic instrumentation of a DNS name server."
"A collection of objects providing extended instrumentation of a DNS name server."
A collection of objects providing configuration control of a DNS name server which loads authoritative zones."
"The compliance statement for agents implementing the DNS name server MIB extensions."
This MIB module MANDATORY GROUPS { dnsServConfigGroup, dnsServCounterGroup } GROUP   dnsServOptCounterGroup DESCRIPTION
"The server optional counter group is unconditionally optional."
"The server zone group is mandatory for any name server that acts as an authoritative server for any DNS zone."
"This object need not be writable."
"This object need not be writable."
Security Considerations Security issues are not discussed in this memo.
