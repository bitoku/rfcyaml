- title: __initial_text__
  contents:
  - "                     Definitions of Managed Objects\n                    for\
    \ IEEE 802.3 Repeater Devices\n                              using SMIv2\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo defines a portion of the Management Information Base (MIB)\n\
    \   for use with network management protocols in the Internet community.\n   In\
    \ particular, it defines objects for managing IEEE 802.3 10 and 100\n   Mb/second\
    \ baseband repeaters based on IEEE Std 802.3 Section 30, \"10\n   & 100 Mb/s Management,\"\
    \ October 26, 1995.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   4.  Topology Mapping.........................................\
    \ 75\n   5.  Acknowledgements......................................... 79\n  \
    \ 6.  References............................................... 80\n   7.  Security\
    \ Considerations.................................. 81\n   8.  Authors' Addresses.......................................\
    \ 81\n"
- title: 1.  The SNMP Network Management Framework
  contents:
  - "1.  The SNMP Network Management Framework\n   The SNMP Network Management Framework\
    \ presently consists of three\n   major components.  They are:\n   o    the SMI,\
    \ described in RFC 1902 [6] - the mechanisms used\n        for describing and\
    \ naming objects for the purpose of\n        management.\n   o    the MIB-II,\
    \ STD 17, RFC 1213 [5] - the core set of\n        managed objects for the Internet\
    \ suite of protocols.\n   o    the protocol, STD 15, RFC 1157 [10] and/or RFC\
    \ 1905\n        [9] - the protocol used for accessing managed information.\n \
    \  Textual conventions are defined in RFC 1903 [7], and conformance\n   statements\
    \ are defined in RFC 1904 [8].\n   The Framework permits new objects to be defined\
    \ for the purpose of\n   experimentation and evaluation.\n"
- title: 1.1.  Object Definitions
  contents:
  - "1.1.  Object Definitions\n   Managed objects are accessed via a virtual information\
    \ store, termed\n   the Management Information Base or MIB.  Objects in the MIB\
    \ are\n   defined using the subset of Abstract Syntax Notation one (ASN.1)\n \
    \  defined in the SMI.  In particular, each object type is named by an\n   OBJECT\
    \ IDENTIFIER, an administratively assigned name.  The object\n   type together\
    \ with an object instance serves to uniquely identify a\n   specific instantiation\
    \ of the object.  For human convenience, we\n   often use a textual string, termed\
    \ the descriptor, to refer to the\n   object type.\n"
- title: 2.  Overview
  contents:
  - '2.  Overview

    '
- title: 2.1.  Relationship to RFC 1516
  contents:
  - "2.1.  Relationship to RFC 1516\n   This MIB is intended as a superset of that\
    \ defined by RFC 1516 [11],\n   which will go to historic status.  This MIB includes\
    \ all of the\n   objects contained in that MIB, plus several new ones which provide\n\
    \   for significant additional capabilities.  Implementors are encouraged\n  \
    \ to support all applicable conformance groups in order to make the\n   best use\
    \ of the new functionality provided by this MIB.  The new\n   objects provide\
    \ support for:\n   o    multiple repeaters\n   o    100BASE-T management\n   o\
    \    port TopN capability\n   o    address search and topology mapping\n   Certain\
    \ objects have been deprecated; in particular, those scalar\n   objects used for\
    \ managing a single repeater are now of minimal use\n   since they are duplicated\
    \ in the new multiple- repeater definitions.\n   Additional objects have been\
    \ deprecated based on implementation\n   experience with RFC 1516.\n"
- title: 2.2.  Repeater Management
  contents:
  - "2.2.  Repeater Management\n   Instances of the object types defined in this memo\
    \ represent\n   attributes of an IEEE 802.3 (Ethernet-like) repeater, as defined\
    \ by\n   Section 9, \"Repeater Unit for 10 Mb/s Baseband Networks\" in the IEEE\n\
    \   802.3/ISO 8802-3 CSMA/CD standard [1], and Section 27, \"Repeater for\n  \
    \ 100 Mb/s Baseband Networks\" in the IEEE Standard 802.3u-1995 [2].\n   These\
    \ Repeater MIB objects may be used to manage non-standard\n   repeater-like devices,\
    \ but defining objects to describe\n   implementation-specific properties of non-standard\
    \ repeater- like\n   devices is outside the scope of this memo.\n   The definitions\
    \ presented here are based on Section 30.4, \"Layer\n   Management for 10 and\
    \ 100 Mb/s Baseband Repeaters\" and Annex 30A,\n   \"GDMO Specificataions for\
    \ 802.3 managed objects\" of [3].\n   Implementors of these MIB objects should\
    \ note that [3] explicitly\n   describes when, where, and how various repeater\
    \ attributes are\n   measured.  The IEEE document also describes the effects of\
    \ repeater\n   actions that may be invoked by manipulating instances of the MIB\n\
    \   objects defined here.\n   The counters in this document are defined to be\
    \ the same as those\n   counters in [3], with the intention that the same instrumentation\
    \ can\n   be used to implement both the IEEE and IETF management standards.\n"
- title: 2.3.  Structure of the MIB
  contents:
  - "2.3.  Structure of the MIB\n   Objects in this MIB are arranged into packages,\
    \ each of which\n   contains a set of related objects within a broad functional\
    \ category.\n   Objects within a package are generally defined under the same\
    \ OID\n   subtree.  These packages are intended for organizational convenience\n\
    \   ONLY, and have no relation to the conformance groups defined later in\n  \
    \ the document.\n"
- title: 2.3.1.  Basic Definitions
  contents:
  - "2.3.1.  Basic Definitions\n   The basic definitions include objects which are\
    \ applicable to all\n   repeaters: status, parameter and control objects for each\
    \ repeater\n   within the managed system, for the port groups within the system,\
    \ and\n   for the individual ports themselves.\n"
- title: 2.3.2.  Monitor Definitions
  contents:
  - "2.3.2.  Monitor Definitions\n   The monitor definitions include monitoring statistics\
    \ for each\n   repeater within the system and for individual ports.\n"
- title: 2.3.3.  Address Tracking Definitions
  contents:
  - "2.3.3.  Address Tracking Definitions\n   This collection includes objects for\
    \ tracking the MAC addresses of\n   the DTEs attached to the ports within the\
    \ system and for mapping the\n   topology of a network.\n   Note:  These definitions\
    \ are based on a technology which has been\n   patented by Hewlett-Packard Company.\
    \  HP has granted rights to this\n   technology to implementors of this MIB. \
    \ See [12] and [13] for\n   details.\n"
- title: 2.3.4.  Top N Definitions
  contents:
  - "2.3.4.  Top N Definitions\n   These objects may be used for tracking the ports\
    \ with the most\n   activity within the system or within particular repeaters.\n"
- title: 2.4.  Relationship to Other MIBs
  contents:
  - '2.4.  Relationship to Other MIBs

    '
- title: 2.4.1.  Relationship to MIB-II
  contents:
  - "2.4.1.  Relationship to MIB-II\n   It is assumed that a repeater implementing\
    \ this MIB will also\n   implement (at least) the 'system' group defined in MIB-II\
    \ [5].\n"
- title: 2.4.1.1.  Relationship to the 'system' group
  contents:
  - "2.4.1.1.  Relationship to the 'system' group\n   In MIB-II, the 'system' group\
    \ is defined as being mandatory for all\n   systems such that each managed entity\
    \ contains one instance of each\n   object in the 'system' group.  Thus, those\
    \ objects apply to the\n   entity even if the entity's sole functionality is management\
    \ of\n   repeaters.\n"
- title: 2.4.1.2.  Relationship to the 'interfaces' group
  contents:
  - "2.4.1.2.  Relationship to the 'interfaces' group\n   In MIB-II, the 'interfaces'\
    \ group is defined as being mandatory for\n   all systems and contains information\
    \ on an entity's interfaces, where\n   each interface is thought of as being attached\
    \ to a 'subnetwork'.\n   (Note that this term is not to be confused with 'subnet'\
    \ which refers\n   to an addressing partitioning scheme used in the Internet suite\
    \ of\n   protocols.)\n   This Repeater MIB uses the notion of ports on a repeater.\
    \  The\n   concept of a MIB-II interface has NO specific relationship to a\n \
    \  repeater's port.  Therefore, the 'interfaces' group applies only to\n   the\
    \ one (or more) network interfaces on which the entity managing the\n   repeater\
    \ sends and receives management protocol operations, and does\n   not apply to\
    \ the repeater's ports.\n   This is consistent with the physical-layer nature\
    \ of a repeater.  A\n   repeater is a bitwise store-and-forward device.  It recognizes\n\
    \   activity and bits, but does not process incoming data based on any\n   packet-related\
    \ information (such as checksum or addresses).  A\n   repeater has no MAC address,\
    \ no MAC implementation, and does not pass\n   packets up to higher-level protocol\
    \ entities for processing.\n   (When a network management entity is observing\
    \ a repeater, it may\n   appear as though the repeater is passing packets to a\
    \ higher-level\n   protocol entity.  However, this is only a means of implementing\n\
    \   management, and this passing of management information is not part of\n  \
    \ the repeater functionality.)\n"
- title: 3. Definitions
  contents:
  - "3. Definitions\n   SNMP-REPEATER-MIB DEFINITIONS ::= BEGIN\n   IMPORTS\n    \
    \   Counter32, Counter64, Integer32, Gauge32, TimeTicks,\n       OBJECT-TYPE,\
    \ MODULE-IDENTITY, NOTIFICATION-TYPE, mib-2\n           FROM SNMPv2-SMI\n    \
    \   TimeStamp, DisplayString, MacAddress, TEXTUAL-CONVENTION,\n       RowStatus,\
    \ TestAndIncr\n           FROM SNMPv2-TC\n       OBJECT-GROUP, MODULE-COMPLIANCE\n\
    \           FROM SNMPv2-CONF\n       OwnerString\n           FROM IF-MIB;\n  \
    \ snmpRptrMod MODULE-IDENTITY\n       LAST-UPDATED    \"9609140000Z\"\n      \
    \ ORGANIZATION    \"IETF HUB MIB Working Group\"\n       CONTACT-INFO\n      \
    \     \"WG E-mail: hubmib@hprnd.rose.hp.com\n                Chair: Dan Romascanu\n\
    \               Postal: Madge Networks (Israel) Ltd.\n                       Atidim\
    \ Technology Park, Bldg. 3\n                       Tel Aviv 61131, Israel\n  \
    \                Tel: 972-3-6458414, 6458458\n                  Fax: 972-3-6487146\n\
    \               E-mail: dromasca@madge.com\n               Editor: Kathryn de\
    \ Graaf\n               Postal: 3Com Corporation\n                       118 Turnpike\
    \ Rd.\n                       Southborough, MA 01772 USA\n                  Tel:\
    \ (508)229-1627\n                  Fax: (508)490-5882\n               E-mail:\
    \ kdegraaf@isd.3com.com\"\n       DESCRIPTION\n           \"Management information\
    \ for 802.3 repeaters.\n           The following references are used throughout\n\
    \           this MIB module:\n           [IEEE 802.3 Std]\n               refers\
    \ to IEEE 802.3/ISO 8802-3 Information\n               processing systems - Local\
    \ area networks -\n               Part 3: Carrier sense multiple access with\n\
    \               collision detection (CSMA/CD) access method\n               and\
    \ physical layer specifications (1993).\n           [IEEE 802.3 Mgt]\n       \
    \        refers to IEEE 802.3u-1995, '10 Mb/s &\n               100 Mb/s Management,\
    \ Section 30,'\n               Supplement to ANSI/IEEE 802.3.\n           The\
    \ following terms are used throughout this\n           MIB module.  For complete\
    \ formal definitions,\n           the IEEE 802.3 standards should be consulted\n\
    \           wherever possible:\n           System - A managed entity compliant\
    \ with this\n           MIB, and incorporating at least one managed\n        \
    \   802.3 repeater.\n           Chassis - An enclosure for one managed repeater,\n\
    \           part of a managed repeater, or several managed\n           repeaters.\
    \  It typically contains an integral\n           power supply and a variable number\
    \ of available\n           module slots.\n           Repeater-unit - The portion\
    \ of the repeater set\n           that is inboard of the physical media interfaces.\n\
    \           The physical media interfaces (MAUs, AUIs) may be\n           physically\
    \ separated from the repeater-unit, or\n           they may be integrated into\
    \ the same physical\n           package.\n           Trivial repeater-unit - An\
    \ isolated port that can\n           gather statistics.\n           Group - A\
    \ recommended, but optional, entity\n           defined by the IEEE 802.3 management\
    \ standard,\n           in order to support a modular numbering scheme.\n    \
    \       The classical example allows an implementor to\n           represent field-replaceable\
    \ units as groups of\n           ports, with the port numbering matching the\n\
    \           modular hardware implementation.\n           System interconnect segment\
    \ - An internal\n           segment allowing interconnection of ports\n      \
    \     belonging to different physical entities\n           into the same logical\
    \ manageable repeater.\n           Examples of implementation might be\n     \
    \      backplane busses in modular hubs, or\n           chaining cables in stacks\
    \ of hubs.\n           Stack - A scalable system that may include\n          \
    \ managed repeaters, in which modularity is\n           achieved by interconnecting\
    \ a number of\n           different chassis.\n           Module - A building block\
    \ in a modular\n           chassis.  It typically maps into one 'slot';\n    \
    \       however, the range of configurations may be\n           very large, with\
    \ several modules entering\n           one slot, or one module covering several\n\
    \           slots.\n           \"\n       REVISION \"9309010000Z\"\n       DESCRIPTION\n\
    \           \"Published as RFC 1516\"\n       REVISION \"9210010000Z\"\n     \
    \  DESCRIPTION\n           \"Published as RFC 1368\"\n       ::= { snmpDot3RptrMgt\
    \ 5 }\n   snmpDot3RptrMgt OBJECT IDENTIFIER ::= { mib-2 22 }\n   OptMacAddr ::=\
    \ TEXTUAL-CONVENTION\n       DISPLAY-HINT    \"1x:\"\n       STATUS          current\n\
    \       DESCRIPTION\n           \"Either a 6 octet address in the `canonical'\n\
    \           order defined by IEEE 802.1a, i.e., as if it\n           were transmitted\
    \ least significant bit first\n           if a value is available or a zero length\
    \ string.\"\n       REFERENCE\n           \"See MacAddress in SNMPv2-TC. The only\
    \ difference\n           is that a zero length string is allowed as a value\n\
    \           for OptMacAddr and not for MacAddress.\"\n       SYNTAX OCTET STRING\
    \ (SIZE (0 | 6))\n   -- Basic information at the repeater, group, and port level.\n\
    \   rptrBasicPackage\n       OBJECT IDENTIFIER ::= { snmpDot3RptrMgt 1 }\n   \
    \  rptrRptrInfo\n           OBJECT IDENTIFIER ::= { rptrBasicPackage 1 }\n   \
    \  rptrGroupInfo\n           OBJECT IDENTIFIER ::= { rptrBasicPackage 2 }\n  \
    \   rptrPortInfo\n           OBJECT IDENTIFIER ::= { rptrBasicPackage 3 }\n  \
    \   rptrAllRptrInfo\n           OBJECT IDENTIFIER ::= { rptrBasicPackage 4 }\n\
    \   -- Monitoring information at the repeater, group, and port level.\n   rptrMonitorPackage\n\
    \       OBJECT IDENTIFIER ::= { snmpDot3RptrMgt 2 }\n     rptrMonitorRptrInfo\n\
    \           OBJECT IDENTIFIER ::= { rptrMonitorPackage 1 }\n     rptrMonitorGroupInfo\n\
    \           OBJECT IDENTIFIER ::= { rptrMonitorPackage 2 }\n     rptrMonitorPortInfo\n\
    \           OBJECT IDENTIFIER ::= { rptrMonitorPackage 3 }\n     rptrMonitorAllRptrInfo\n\
    \           OBJECT IDENTIFIER ::= { rptrMonitorPackage 4 }\n   -- Address tracking\
    \ information at the repeater, group,\n   -- and port level.\n   rptrAddrTrackPackage\n\
    \       OBJECT IDENTIFIER ::= { snmpDot3RptrMgt 3 }\n     rptrAddrTrackRptrInfo\n\
    \           OBJECT IDENTIFIER ::= { rptrAddrTrackPackage 1 }\n     rptrAddrTrackGroupInfo\n\
    \           -- this subtree is currently unused\n           OBJECT IDENTIFIER\
    \ ::= { rptrAddrTrackPackage 2 }\n     rptrAddrTrackPortInfo\n           OBJECT\
    \ IDENTIFIER ::= { rptrAddrTrackPackage 3 }\n   -- TopN information.\n   rptrTopNPackage\n\
    \           OBJECT IDENTIFIER ::= { snmpDot3RptrMgt 4 }\n     rptrTopNRptrInfo\n\
    \           -- this subtree is currently unused\n           OBJECT IDENTIFIER\
    \ ::= { rptrTopNPackage 1 }\n     rptrTopNGroupInfo\n           -- this subtree\
    \ is currently unused\n           OBJECT IDENTIFIER ::= { rptrTopNPackage 2 }\n\
    \     rptrTopNPortInfo\n           OBJECT IDENTIFIER ::= { rptrTopNPackage 3 }\n\
    \   -- Old version of basic information at the repeater level.\n   --\n   -- In\
    \ a system containing a single managed repeater,\n   -- configuration, status,\
    \ and control objects for the overall\n   -- repeater.\n   --\n   -- The objects\
    \ contained under the rptrRptrInfo subtree are\n   -- intended for backwards compatibility\
    \ with implementations of\n   -- RFC 1516 [11].  In newer implementations (both\
    \ single- and\n   -- multiple-repeater implementations) the rptrInfoTable should\n\
    \   -- be implemented.  It is the preferred source of this information,\n   --\
    \ as it contains the values for all repeaters managed by the\n   -- agent.  In\
    \ all cases, the objects in the rptrRptrInfo subtree\n   -- are duplicates of\
    \ the corresponding objects in the first entry\n   -- of the rptrInfoTable.\n\
    \   rptrGroupCapacity OBJECT-TYPE\n       SYNTAX      Integer32 (1..2147483647)\n\
    \       MAX-ACCESS  read-only\n       STATUS      deprecated\n       DESCRIPTION\n\
    \               \"********* THIS OBJECT IS DEPRECATED **********\n           \
    \    The rptrGroupCapacity is the number of groups\n               that can be\
    \ contained within the repeater.  Within\n               each managed repeater,\
    \ the groups are uniquely\n               numbered in the range from 1 to rptrGroupCapacity.\n\
    \               Some groups may not be present in the repeater, in\n         \
    \      which case the actual number of groups present\n               will be\
    \ less than rptrGroupCapacity.  The number\n               of groups present will\
    \ never be greater than\n               rptrGroupCapacity.\n               Note:\
    \  In practice, this will generally be the\n               number of field-replaceable\
    \ units (i.e., modules,\n               cards, or boards) that can fit in the\
    \ physical\n               repeater enclosure, and the group numbers will\n  \
    \             correspond to numbers marked on the physical\n               enclosure.\"\
    \n       REFERENCE\n               \"[IEEE 802.3 Mgt], 30.4.1.1.3,\n         \
    \      aRepeaterGroupCapacity.\"\n       ::= { rptrRptrInfo 1 }\n   rptrOperStatus\
    \ OBJECT-TYPE\n       SYNTAX      INTEGER {\n                     other(1),  \
    \          -- undefined or unknown\n                     ok(2),              \
    \ -- no known failures\n                     rptrFailure(3),      -- repeater-related\
    \ failure\n                     groupFailure(4),     -- group-related failure\n\
    \                     portFailure(5),      -- port-related failure\n         \
    \            generalFailure(6)    -- failure, unspecified type\n             \
    \      }\n       MAX-ACCESS  read-only\n       STATUS      deprecated\n      \
    \ DESCRIPTION\n               \"********* THIS OBJECT IS DEPRECATED **********\n\
    \               The rptrOperStatus object indicates the\n               operational\
    \ state of the repeater.  The\n               rptrHealthText object may be consulted\
    \ for more\n               specific information about the state of the\n     \
    \          repeater's health.\n               In the case of multiple kinds of\
    \ failures (e.g.,\n               repeater failure and port failure), the value\
    \ of\n               this attribute shall reflect the highest priority\n     \
    \          failure in the following order, listed highest\n               priority\
    \ first:\n                   rptrFailure(3)\n                   groupFailure(4)\n\
    \                   portFailure(5)\n                   generalFailure(6).\"\n\
    \       REFERENCE\n               \"[IEEE 802.3 Mgt], 30.4.1.1.5, aRepeaterHealthState.\"\
    \n       ::= { rptrRptrInfo 2 }\n   rptrHealthText OBJECT-TYPE\n       SYNTAX\
    \      DisplayString (SIZE (0..255))\n       MAX-ACCESS  read-only\n       STATUS\
    \      deprecated\n       DESCRIPTION\n               \"********* THIS OBJECT\
    \ IS DEPRECATED **********\n               The health text object is a text string\
    \ that\n               provides information relevant to the operational\n    \
    \           state of the repeater.  Agents may use this string\n             \
    \  to provide detailed information on current\n               failures, including\
    \ how they were detected, and/or\n               instructions for problem resolution.\
    \  The contents\n               are agent-specific.\"\n       REFERENCE\n    \
    \           \"[IEEE 802.3 Mgt], 30.4.1.1.6, aRepeaterHealthText.\"\n       ::=\
    \ { rptrRptrInfo 3 }\n   rptrReset OBJECT-TYPE\n       SYNTAX      INTEGER {\n\
    \                     noReset(1),\n                     reset(2)\n           \
    \        }\n       MAX-ACCESS  read-write\n       STATUS      deprecated\n   \
    \    DESCRIPTION\n               \"********* THIS OBJECT IS DEPRECATED **********\n\
    \               Setting this object to reset(2) causes a\n               transition\
    \ to the START state of Fig 9-2 in\n               section 9 [IEEE 802.3 Std]\
    \ for a 10Mb/s repeater,\n               and the START state of Fig 27-2 in section\
    \ 27\n               of that standard for a 100Mb/s repeater.\n              \
    \ Setting this object to noReset(1) has no effect.\n               The agent will\
    \ always return the value noReset(1)\n               when this object is read.\n\
    \               After receiving a request to set this variable to\n          \
    \     reset(2), the agent is allowed to delay the reset\n               for a\
    \ short period.  For example, the implementor\n               may choose to delay\
    \ the reset long enough to allow\n               the SNMP response to be transmitted.\
    \  In any\n               event, the SNMP response must be transmitted.\n    \
    \           This action does not reset the management counters\n             \
    \  defined in this document nor does it affect the\n               portAdminStatus\
    \ parameters.  Included in this\n               action is the execution of a disruptive\
    \ Self-Test\n               with the following characteristics:  a) The nature\n\
    \               of the tests is not specified.  b) The test resets\n         \
    \      the repeater but without affecting management\n               information\
    \ about the repeater.  c) The test does\n               not inject packets onto\
    \ any segment.  d) Packets\n               received during the test may or may\
    \ not be\n               transferred.  e) The test does not interfere with\n \
    \              management functions.\n               After performing this self-test,\
    \ the agent will\n               update the repeater health information (including\n\
    \               rptrOperStatus and rptrHealthText), and send a\n             \
    \  rptrHealth trap.\"\n       REFERENCE\n               \"[IEEE 802.3 Mgt], 30.4.1.2.1,\
    \ acResetRepeater.\"\n       ::= { rptrRptrInfo 4 }\n   rptrNonDisruptTest OBJECT-TYPE\n\
    \       SYNTAX      INTEGER {\n                     noSelfTest(1),\n         \
    \            selfTest(2)\n                   }\n       MAX-ACCESS  read-write\n\
    \       STATUS      deprecated\n       DESCRIPTION\n               \"*********\
    \ THIS OBJECT IS DEPRECATED **********\n               Setting this object to\
    \ selfTest(2) causes the\n               repeater to perform a agent-specific,\
    \ non-\n               disruptive self-test that has the following\n         \
    \      characteristics:  a) The nature of the tests is\n               not specified.\
    \  b) The test does not change the\n               state of the repeater or management\
    \ information\n               about the repeater.  c) The test does not inject\n\
    \               packets onto any segment.  d) The test does not\n            \
    \   prevent the relay of any packets.  e) The test\n               does not interfere\
    \ with management functions.\n               After performing this test, the agent\
    \ will update\n               the repeater health information (including\n   \
    \            rptrOperStatus and rptrHealthText) and send a\n               rptrHealth\
    \ trap.\n               Note that this definition allows returning an\n      \
    \         'okay' result after doing a trivial test.\n               Setting this\
    \ object to noSelfTest(1) has no\n               effect.  The agent will always\
    \ return the value\n               noSelfTest(1) when this object is read.\"\n\
    \       REFERENCE\n               \"[IEEE 802.3 Mgt], 30.4.1.2.2,\n          \
    \     acExecuteNonDisruptiveSelfTest.\"\n       ::= { rptrRptrInfo 5 }\n   rptrTotalPartitionedPorts\
    \ OBJECT-TYPE\n       SYNTAX      Gauge32\n       MAX-ACCESS  read-only\n    \
    \   STATUS      deprecated\n       DESCRIPTION\n               \"********* THIS\
    \ OBJECT IS DEPRECATED **********\n               This object returns the total\
    \ number of ports in\n               the repeater whose current state meets all\
    \ three\n               of the following criteria:  rptrPortOperStatus\n     \
    \          does not have the value notPresent(3),\n               rptrPortAdminStatus\
    \ is enabled(1), and\n               rptrPortAutoPartitionState is autoPartitioned(2).\"\
    \n       ::= { rptrRptrInfo 6 }\n   -- Basic information at the group level.\n\
    \   --\n   -- Configuration and status objects for each\n   -- managed group in\
    \ the system, independent\n   -- of whether there is one or more managed\n   --\
    \ repeater-units in the system.\n   rptrGroupTable OBJECT-TYPE\n       SYNTAX\
    \      SEQUENCE OF RptrGroupEntry\n       MAX-ACCESS  not-accessible\n       STATUS\
    \      current\n       DESCRIPTION\n               \"Table of descriptive and\
    \ status information about\n               the groups of ports.\"\n       ::=\
    \ { rptrGroupInfo 1 }\n   rptrGroupEntry OBJECT-TYPE\n       SYNTAX      RptrGroupEntry\n\
    \       MAX-ACCESS  not-accessible\n       STATUS      current\n       DESCRIPTION\n\
    \               \"An entry in the table, containing information\n            \
    \   about a single group of ports.\"\n       INDEX    { rptrGroupIndex }\n   \
    \    ::= { rptrGroupTable 1 }\n   RptrGroupEntry ::=\n       SEQUENCE {\n    \
    \       rptrGroupIndex\n               Integer32,\n           rptrGroupDescr\n\
    \               DisplayString,\n           rptrGroupObjectID\n               OBJECT\
    \ IDENTIFIER,\n           rptrGroupOperStatus\n               INTEGER,\n     \
    \      rptrGroupLastOperStatusChange\n               TimeTicks,\n           rptrGroupPortCapacity\n\
    \               Integer32\n       }\n   rptrGroupIndex OBJECT-TYPE\n       SYNTAX\
    \      Integer32 (1..2147483647)\n       MAX-ACCESS  read-only\n       STATUS\
    \      current\n       DESCRIPTION\n               \"This object identifies the\
    \ group within the\n               system for which this entry contains\n    \
    \           information.\"\n       REFERENCE\n               \"[IEEE 802.3 Mgt],\
    \ 30.4.2.1.1, aGroupID.\"\n       ::= { rptrGroupEntry 1 }\n   rptrGroupDescr\
    \ OBJECT-TYPE\n       SYNTAX      DisplayString (SIZE (0..255))\n       MAX-ACCESS\
    \  read-only\n       STATUS      deprecated\n       DESCRIPTION\n            \
    \   \"********* THIS OBJECT IS DEPRECATED **********\n               A textual\
    \ description of the group.  This value\n               should include the full\
    \ name and version\n               identification of the group's hardware type\
    \ and\n               indicate how the group is differentiated from\n        \
    \       other types of groups in the repeater.  Plug-in\n               Module,\
    \ Rev A' or 'Barney Rubble 10BASE-T 4-port\n               SIMM socket Version\
    \ 2.1' are examples of valid\n               group descriptions.\n           \
    \    It is mandatory that this only contain printable\n               ASCII characters.\"\
    \n       ::= { rptrGroupEntry 2 }\n   rptrGroupObjectID OBJECT-TYPE\n       SYNTAX\
    \      OBJECT IDENTIFIER\n       MAX-ACCESS  read-only\n       STATUS      current\n\
    \       DESCRIPTION\n               \"The vendor's authoritative identification\
    \ of the\n               group.  This value may be allocated within the SMI\n\
    \               enterprises subtree (1.3.6.1.4.1) and provides a\n           \
    \    straight-forward and unambiguous means for\n               determining what\
    \ kind of group is being managed.\n               For example, this object could\
    \ take the value\n               1.3.6.1.4.1.4242.1.2.14 if vendor 'Flintstones,\n\
    \               Inc.' was assigned the subtree 1.3.6.1.4.1.4242,\n           \
    \    and had assigned the identifier\n               1.3.6.1.4.1.4242.1.2.14 to\
    \ its 'Wilma Flintstone\n               6-Port FOIRL Plug-in Module.'\"\n    \
    \   ::= { rptrGroupEntry 3 }\n   rptrGroupOperStatus OBJECT-TYPE\n       SYNTAX\
    \      INTEGER {\n                     other(1),\n                     operational(2),\n\
    \                     malfunctioning(3),\n                     notPresent(4),\n\
    \                     underTest(5),\n                     resetInProgress(6)\n\
    \                   }\n       MAX-ACCESS  read-only\n       STATUS      current\n\
    \       DESCRIPTION\n               \"An object that indicates the operational\
    \ status\n               of the group.\n               A status of notPresent(4)\
    \ indicates that the group\n               is temporarily or permanently physically\
    \ and/or\n               logically not a part of the repeater.  It is an\n   \
    \            implementation-specific matter as to whether the\n              \
    \ agent effectively removes notPresent entries from\n               the table.\n\
    \               A status of operational(2) indicates that the\n              \
    \ group is functioning, and a status of\n               malfunctioning(3) indicates\
    \ that the group is\n               malfunctioning in some way.\"\n       ::=\
    \ { rptrGroupEntry 4 }\n   rptrGroupLastOperStatusChange OBJECT-TYPE\n       SYNTAX\
    \      TimeTicks\n       MAX-ACCESS  read-only\n       STATUS      deprecated\n\
    \       DESCRIPTION\n               \"********* THIS OBJECT IS DEPRECATED **********\n\
    \               An object that contains the value of sysUpTime at\n          \
    \     the time when the last of the following occurred:\n                 1) the\
    \ agent cold- or warm-started;\n                 2) the row for the group was\
    \ created (such\n                    as when the group was added to the system);\
    \ or\n                 3) the value of rptrGroupOperStatus for the\n         \
    \           group changed.\n               A value of zero indicates that the\
    \ group's\n               operational status has not changed since the agent\n\
    \               last restarted.\"\n       ::= { rptrGroupEntry 5 }\n   rptrGroupPortCapacity\
    \ OBJECT-TYPE\n       SYNTAX      Integer32 (1..2147483647)\n       MAX-ACCESS\
    \  read-only\n       STATUS      current\n       DESCRIPTION\n               \"\
    The rptrGroupPortCapacity is the number of ports\n               that can be contained\
    \ within the group.  Valid\n               range is 1-2147483647.  Within each\
    \ group, the\n               ports are uniquely numbered in the range from 1 to\n\
    \               rptrGroupPortCapacity.\n               Some ports may not be present\
    \ in the system, in\n               which case the actual number of ports present\n\
    \               will be less than the value of rptrGroupPortCapacity.\n      \
    \         The number of ports present in the group will never\n              \
    \ be greater than the value of rptrGroupPortCapacity.\n               Note:  In\
    \ practice, this will generally be the\n               number of ports on a module,\
    \ card, or board, and\n               the port numbers will correspond to numbers\
    \ marked\n               on the physical embodiment.\"\n       REFERENCE\n   \
    \            \"IEEE 802.3 Mgt, 30.4.2.1.2, aGroupPortCapacity.\"\n       ::= {\
    \ rptrGroupEntry 6 }\n   -- Basic information at the port level.\n   --\n   --\
    \ Configuration and status objects for\n   -- each managed repeater port in the\
    \ system,\n   -- independent of whether there is one or more\n   -- managed repeater-units\
    \ in the system.\n   rptrPortTable OBJECT-TYPE\n       SYNTAX      SEQUENCE OF\
    \ RptrPortEntry\n       MAX-ACCESS  not-accessible\n       STATUS      current\n\
    \       DESCRIPTION\n               \"Table of descriptive and status information\
    \ about\n               the repeater ports in the system.  The number of\n   \
    \            entries is independent of the number of repeaters\n             \
    \  in the managed system.\"\n       ::= { rptrPortInfo 1 }\n   rptrPortEntry OBJECT-TYPE\n\
    \       SYNTAX      RptrPortEntry\n       MAX-ACCESS  not-accessible\n       STATUS\
    \      current\n       DESCRIPTION\n               \"An entry in the table, containing\
    \ information\n               about a single port.\"\n       INDEX    { rptrPortGroupIndex,\
    \ rptrPortIndex }\n       ::= { rptrPortTable 1 }\n   RptrPortEntry ::=\n    \
    \   SEQUENCE {\n           rptrPortGroupIndex\n               Integer32,\n   \
    \        rptrPortIndex\n               Integer32,\n           rptrPortAdminStatus\n\
    \               INTEGER,\n           rptrPortAutoPartitionState\n            \
    \   INTEGER,\n           rptrPortOperStatus\n               INTEGER,\n       \
    \    rptrPortRptrId\n               Integer32\n       }\n   rptrPortGroupIndex\
    \ OBJECT-TYPE\n       SYNTAX      Integer32 (1..2147483647)\n       MAX-ACCESS\
    \  read-only\n       STATUS      current\n       DESCRIPTION\n               \"\
    This object identifies the group containing the\n               port for which\
    \ this entry contains information.\"\n       ::= { rptrPortEntry 1 }\n   rptrPortIndex\
    \ OBJECT-TYPE\n       SYNTAX      Integer32 (1..2147483647)\n       MAX-ACCESS\
    \  read-only\n       STATUS      current\n       DESCRIPTION\n               \"\
    This object identifies the port within the group\n               for which this\
    \ entry contains information.  This\n               identifies the port independently\
    \ from the repeater\n               it may be attached to.  The numbering scheme\
    \ for\n               ports is implementation specific; however, this\n      \
    \         value can never be greater than\n               rptrGroupPortCapacity\
    \ for the associated group.\"\n       REFERENCE\n               \"[IEEE 802.3\
    \ Mgt], 30.4.3.1.1, aPortID.\"\n       ::= { rptrPortEntry 2 }\n   rptrPortAdminStatus\
    \ OBJECT-TYPE\n       SYNTAX      INTEGER {\n                     enabled(1),\n\
    \                     disabled(2)\n                   }\n       MAX-ACCESS  read-write\n\
    \       STATUS      current\n       DESCRIPTION\n               \"Setting this\
    \ object to disabled(2) disables the\n               port.  A disabled port neither\
    \ transmits nor\n               receives.  Once disabled, a port must be\n   \
    \            explicitly enabled to restore operation.  A port\n              \
    \ which is disabled when power is lost or when a\n               reset is exerted\
    \ shall remain disabled when normal\n               operation resumes.\n     \
    \          The admin status takes precedence over auto-\n               partition\
    \ and functionally operates between the\n               auto-partition mechanism\
    \ and the AUI/PMA.\n               Setting this object to enabled(1) enables the\
    \ port\n               and exerts a BEGIN on the port's auto-partition\n     \
    \          state machine.\n               (In effect, when a port is disabled,\
    \ the value of\n               rptrPortAutoPartitionState for that port is frozen\n\
    \               until the port is next enabled.  When the port\n             \
    \  becomes enabled, the rptrPortAutoPartitionState\n               becomes notAutoPartitioned(1),\
    \ regardless of its\n               pre-disabling state.)\"\n       REFERENCE\n\
    \               \"[IEEE 802.3 Mgt], 30.4.3.1.2, aPortAdminState\n            \
    \   and 30.4.3.2.1, acPortAdminControl.\"\n       ::= { rptrPortEntry 3 }\n  \
    \ rptrPortAutoPartitionState OBJECT-TYPE\n       SYNTAX      INTEGER {\n     \
    \                notAutoPartitioned(1),\n                     autoPartitioned(2)\n\
    \                   }\n       MAX-ACCESS  read-only\n       STATUS      current\n\
    \       DESCRIPTION\n               \"The autoPartitionState flag indicates whether\
    \ the\n               port is currently partitioned by the repeater's\n      \
    \         auto-partition protection.\n               The conditions that cause\
    \ port partitioning are\n               specified in partition state machine in\
    \ Sections\n               9 and 27 of [IEEE 802.3 Std].  They are not\n     \
    \          differentiated here.\"\n       REFERENCE\n               \"[IEEE 802.3\
    \ Mgt], 30.4.3.1.3, aAutoPartitionState.\"\n       ::= { rptrPortEntry 4 }\n \
    \  rptrPortOperStatus  OBJECT-TYPE\n       SYNTAX      INTEGER {\n           \
    \          operational(1),\n                     notOperational(2),\n        \
    \             notPresent(3)\n                   }\n       MAX-ACCESS  read-only\n\
    \       STATUS      current\n       DESCRIPTION\n               \"This object\
    \ indicates the port's operational\n               status.  The notPresent(3)\
    \ status indicates the\n               port is physically removed (note this may\
    \ or may\n               not be possible depending on the type of port.)\n   \
    \            The operational(1) status indicates that the port\n             \
    \  is enabled (see rptrPortAdminStatus) and working,\n               even though\
    \ it might be auto-partitioned (see\n               rptrPortAutoPartitionState).\n\
    \               If this object has the value operational(1) and\n            \
    \   rptrPortAdminStatus is set to disabled(2), it is\n               expected\
    \ that this object's value will soon change\n               to notOperational(2).\"\
    \n       ::= { rptrPortEntry 5 }\n   rptrPortRptrId OBJECT-TYPE\n       SYNTAX\
    \      Integer32 (0..2147483647)\n       MAX-ACCESS  read-only\n       STATUS\
    \      current\n       DESCRIPTION\n               \"This object identifies the\
    \ repeater to\n               which this port belongs.  The repeater\n       \
    \        identified by a particular value of this object\n               is the\
    \ same as that identified by the same\n               value of rptrInfoId.  A\
    \ value of zero\n               indicates that this port currently is not\n  \
    \             a member of any repeater.\"\n       ::= { rptrPortEntry 6 }\n  \
    \ -- New version of basic information at the repeater level.\n   --\n   -- Configuration,\
    \ status, and control objects for\n   -- each managed repeater in the system.\n\
    \   rptrInfoTable OBJECT-TYPE\n       SYNTAX      SEQUENCE OF RptrInfoEntry\n\
    \       MAX-ACCESS  not-accessible\n       STATUS      current\n       DESCRIPTION\n\
    \               \"A table of information about each\n               non-trivial\
    \ repeater. The number of entries\n               depends on the physical configuration\
    \ of the\n               managed system.\"\n       ::= { rptrAllRptrInfo 1 }\n\
    \   rptrInfoEntry OBJECT-TYPE\n       SYNTAX      RptrInfoEntry\n       MAX-ACCESS\
    \  not-accessible\n       STATUS      current\n       DESCRIPTION\n          \
    \     \"An entry in the table, containing information\n               about a\
    \ single non-trivial repeater.\"\n       INDEX    { rptrInfoId }\n       ::= {\
    \ rptrInfoTable 1 }\n   RptrInfoEntry ::=\n       SEQUENCE {\n           rptrInfoId\n\
    \               Integer32,\n           rptrInfoRptrType\n               INTEGER,\n\
    \           rptrInfoOperStatus\n               INTEGER,\n           rptrInfoReset\n\
    \               INTEGER,\n           rptrInfoPartitionedPorts\n              \
    \ Gauge32,\n           rptrInfoLastChange\n               TimeStamp\n       }\n\
    \   rptrInfoId OBJECT-TYPE\n       SYNTAX      Integer32 (1..2147483647)\n   \
    \    MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n \
    \              \"This object identifies the repeater for which\n             \
    \  this entry contains information.\"\n       ::= { rptrInfoEntry 1 }\n   rptrInfoRptrType\
    \ OBJECT-TYPE\n       SYNTAX      INTEGER {\n                     other(1),  \
    \              -- undefined or unknown\n                     tenMb(2),\n     \
    \                onehundredMbClassI(3),\n                     onehundredMbClassII(4)\n\
    \                   }\n       MAX-ACCESS  read-only\n       STATUS      current\n\
    \       DESCRIPTION\n               \"The rptrInfoRptrType returns a value that\
    \ identifies\n               the CSMA/CD repeater type.\"\n       REFERENCE\n\
    \               \"[IEEE 802.3 Mgt], 30.4.1.1.2, aRepeaterType.\"\n       ::= {\
    \ rptrInfoEntry 2 }\n   rptrInfoOperStatus OBJECT-TYPE\n       SYNTAX      INTEGER\
    \ {\n                     other(1),\n                     ok(2),\n           \
    \          failure(3)\n                   }\n       MAX-ACCESS  read-only\n  \
    \     STATUS      current\n       DESCRIPTION\n               \"The rptrInfoOperStatus\
    \ object indicates the\n               operational state of the repeater.\"\n\
    \       REFERENCE\n               \"[IEEE 802.3 Mgt], 30.4.1.1.5, aRepeaterHealthState.\"\
    \n       ::= { rptrInfoEntry 3 }\n   rptrInfoReset OBJECT-TYPE\n       SYNTAX\
    \      INTEGER {\n                     noReset(1),\n                     reset(2)\n\
    \                   }\n       MAX-ACCESS  read-write\n       STATUS      current\n\
    \       DESCRIPTION\n               \"Setting this object to reset(2) causes a\n\
    \               transition to the START state of Fig 9-2 in\n               section\
    \ 9 [IEEE 802.3 Std] for a 10Mb/s repeater,\n               and to the START state\
    \ of Fig 27-2 in section 27\n               of that standard for a 100Mb/s repeater.\n\
    \               Setting this object to noReset(1) has no effect.\n           \
    \    The agent will always return the value noReset(1)\n               when this\
    \ object is read.\n               After receiving a request to set this variable\
    \ to\n               reset(2), the agent is allowed to delay the reset\n     \
    \          for a short period.  For example, the implementor\n               may\
    \ choose to delay the reset long enough to allow\n               the SNMP response\
    \ to be transmitted.  In any\n               event, the SNMP response must be\
    \ transmitted.\n               This action does not reset the management counters\n\
    \               defined in this document nor does it affect the\n            \
    \   portAdminStatus parameters.  Included in this\n               action is the\
    \ execution of a disruptive Self-Test\n               with the following characteristics:\
    \  a) The nature\n               of the tests is not specified.  b) The test resets\n\
    \               the repeater but without affecting management\n              \
    \ information about the repeater.  c) The test does\n               not inject\
    \ packets onto any segment.  d) Packets\n               received during the test\
    \ may or may not be\n               transferred.  e) The test does not interfere\
    \ with\n               management functions.\n               After performing\
    \ this self-test, the agent will\n               update the repeater health information\
    \ (including\n               rptrInfoOperStatus), and send a rptrInfoResetEvent\n\
    \               notification.\"\n       REFERENCE\n               \"[IEEE 802.3\
    \ Mgt], 30.4.1.2.1, acResetRepeater.\"\n       ::= { rptrInfoEntry 4 }\n   rptrInfoPartitionedPorts\
    \ OBJECT-TYPE\n       SYNTAX      Gauge32\n       MAX-ACCESS  read-only\n    \
    \   STATUS      current\n       DESCRIPTION\n               \"This object returns\
    \ the total number of ports in\n               the repeater whose current state\
    \ meets all three\n               of the following criteria:  rptrPortOperStatus\n\
    \               does not have the value notPresent(3),\n               rptrPortAdminStatus\
    \ is enabled(1), and\n               rptrPortAutoPartitionState is autoPartitioned(2).\"\
    \n       ::= { rptrInfoEntry 5 }\n   rptrInfoLastChange OBJECT-TYPE\n       SYNTAX\
    \      TimeStamp\n       MAX-ACCESS  read-only\n       STATUS      current\n \
    \      DESCRIPTION\n               \"The value of sysUpTime when any of the following\n\
    \               conditions occurred:\n                 1) agent cold- or warm-started;\n\
    \                 2) this instance of repeater was created\n                 \
    \   (such as when a device or module was\n                    added to the system);\n\
    \                 3) a change in the value of rptrInfoOperStatus;\n          \
    \       4) ports were added or removed as members of\n                    the\
    \ repeater; or\n                 5) any of the counters associated with this\n\
    \                    repeater had a discontinuity.\"\n       ::= { rptrInfoEntry\
    \ 6 }\n   --\n   -- Old version of statistics at the repeater level.\n   --\n\
    \   -- Performance monitoring statistics for the repeater\n   --\n   -- In a system\
    \ containing a single managed repeater-unit,\n   -- the statistics object for\
    \ the repeater-unit.\n   -- The objects contained under the rptrMonitorRptrInfo\
    \ subtree are\n   -- intended for backwards compatibility with implementations\
    \ of\n   -- RFC 1516 [11].  In newer implementations (both single- and\n   --\
    \ multiple-repeater implementations), the rptrMonitorTable will\n   -- be implemented.\
    \  It is the preferred source of this information,\n   -- as it contains the values\
    \ for all repeaters managed by the\n   -- agent.  In all cases, the objects in\
    \ the rptrMonitorRptrInfo\n   -- subtree are duplicates of the corresponding objects\
    \ in the\n   -- first entry of the rptrMonitorTable.\n   rptrMonitorTransmitCollisions\
    \ OBJECT-TYPE\n       SYNTAX      Counter32\n       MAX-ACCESS  read-only\n  \
    \     STATUS      deprecated\n       DESCRIPTION\n               \"********* THIS\
    \ OBJECT IS DEPRECATED **********\n               For a clause 9 (10Mb/s) repeater,\
    \ this counter\n               is incremented every time the repeater state\n\
    \               machine enters the TRANSMIT COLLISION state\n               from\
    \ any state other than ONE PORT LEFT\n               (Ref: Fig 9-2 [IEEE 802.3\
    \ Std]).\n               For a clause 27 repeater, this counter is\n         \
    \      incremented every time the repeater core state\n               diagram\
    \ enters the Jam state as a result of\n               Activity(ALL) > 1 (fig 27-2\
    \ [IEEE 802.3 Std]).\n               The approximate minimum time for rollover\
    \ of this\n               counter is 16 hours in a 10Mb/s repeater and 1.6\n \
    \              hours in a 100Mb/s repeater.\"\n       REFERENCE\n            \
    \   \"[IEEE 802.3 Mgt], 30.4.1.1.8, aTransmitCollisions.\"\n       ::= { rptrMonitorRptrInfo\
    \ 1 }\n   -- Statistics at the group level.\n   --\n   -- In a system containing\
    \ a single managed repeater-unit,\n   -- the statistics objects for each group.\n\
    \   rptrMonitorGroupTable OBJECT-TYPE\n       SYNTAX      SEQUENCE OF RptrMonitorGroupEntry\n\
    \       MAX-ACCESS  not-accessible\n       STATUS      deprecated\n       DESCRIPTION\n\
    \               \"********* THIS OBJECT IS DEPRECATED **********\n           \
    \    Table of performance and error statistics for the\n               groups\
    \ within the repeater.  The number of entries\n               is the same as that\
    \ in the rptrGroupTable.\"\n       ::= { rptrMonitorGroupInfo 1 }\n   rptrMonitorGroupEntry\
    \ OBJECT-TYPE\n       SYNTAX    RptrMonitorGroupEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS    deprecated\n       DESCRIPTION\n               \"********* THIS\
    \ OBJECT IS DEPRECATED **********\n               An entry in the table, containing\
    \ total\n               performance and error statistics for a single\n      \
    \         group.  Regular retrieval of the information in\n               this\
    \ table provides a means of tracking the\n               performance and health\
    \ of the networked devices\n               attached to this group's ports.\n \
    \              The counters in this table are redundant in the\n             \
    \  sense that they are the summations of information\n               already available\
    \ through other objects.  However,\n               these sums provide a considerable\
    \ optimization of\n               network management traffic over the otherwise\n\
    \               necessary retrieval of the individual counters\n             \
    \  included in each sum.\n               Note:  Group-level counters are\n   \
    \            deprecated in this MIB.  It is recommended\n               that management\
    \ applications instead use\n               the repeater-level counters contained\
    \ in\n               the rptrMonTable.\"\n       INDEX    { rptrMonitorGroupIndex\
    \ }\n       ::= { rptrMonitorGroupTable 1 }\n   RptrMonitorGroupEntry ::=\n  \
    \     SEQUENCE {\n           rptrMonitorGroupIndex\n               Integer32,\n\
    \           rptrMonitorGroupTotalFrames\n               Counter32,\n         \
    \  rptrMonitorGroupTotalOctets\n               Counter32,\n           rptrMonitorGroupTotalErrors\n\
    \               Counter32\n       }\n   rptrMonitorGroupIndex OBJECT-TYPE\n  \
    \     SYNTAX      Integer32 (1..2147483647)\n       MAX-ACCESS  read-only\n  \
    \     STATUS      deprecated\n       DESCRIPTION\n               \"********* THIS\
    \ OBJECT IS DEPRECATED **********\n               This object identifies the group\
    \ within the\n               repeater for which this entry contains\n        \
    \       information.\"\n       ::= { rptrMonitorGroupEntry 1 }\n   rptrMonitorGroupTotalFrames\
    \ OBJECT-TYPE\n       SYNTAX      Counter32\n       MAX-ACCESS  read-only\n  \
    \     STATUS      deprecated\n       DESCRIPTION\n               \"********* THIS\
    \ OBJECT IS DEPRECATED **********\n               The total number of frames of\
    \ valid frame length\n               that have been received on the ports in this\
    \ group\n               and for which the FCSError and CollisionEvent\n      \
    \         signals were not asserted.  This counter is the\n               summation\
    \ of the values of the\n               rptrMonitorPortReadableFrames counters\
    \ for all of\n               the ports in the group.\n               This statistic\
    \ provides one of the parameters\n               necessary for obtaining the packet\
    \ error rate.\n               The approximate minimum time for rollover of this\n\
    \               counter is 80 hours in a 10Mb/s repeater.\"\n       ::= { rptrMonitorGroupEntry\
    \ 2 }\n   rptrMonitorGroupTotalOctets OBJECT-TYPE\n       SYNTAX      Counter32\n\
    \       MAX-ACCESS  read-only\n       STATUS      deprecated\n       DESCRIPTION\n\
    \               \"********* THIS OBJECT IS DEPRECATED **********\n           \
    \    The total number of octets contained in the valid\n               frames\
    \ that have been received on the ports in\n               this group.  This counter\
    \ is the summation of the\n               values of the rptrMonitorPortReadableOctets\n\
    \               counters for all of the ports in the group.\n               This\
    \ statistic provides an indicator of the total\n               data transferred.\
    \  The approximate minimum time\n               for rollover of this counter is\
    \ 58 minutes in a\n               10Mb/s repeater.\"\n       ::= { rptrMonitorGroupEntry\
    \ 3 }\n   rptrMonitorGroupTotalErrors OBJECT-TYPE\n       SYNTAX      Counter32\n\
    \       MAX-ACCESS  read-only\n       STATUS      deprecated\n       DESCRIPTION\n\
    \               \"********* THIS OBJECT IS DEPRECATED **********\n           \
    \    The total number of errors which have occurred on\n               all of\
    \ the ports in this group.  This counter is\n               the summation of the\
    \ values of the\n               rptrMonitorPortTotalErrors counters for all of\
    \ the\n               ports in the group.\"\n       ::= { rptrMonitorGroupEntry\
    \ 4 }\n   -- Statistics at the port level.\n   --\n   rptrMonitorPortTable OBJECT-TYPE\n\
    \       SYNTAX      SEQUENCE OF RptrMonitorPortEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n               \"Table of performance\
    \ and error statistics for the\n               ports.  The number of entries is\
    \ the same as that\n               in the rptrPortTable.\n               The columnar\
    \ object rptrMonitorPortLastChange\n               is used to indicate possible\
    \ discontinuities\n               of counter type columnar objects in the table.\"\
    \n       ::= { rptrMonitorPortInfo 1 }\n   rptrMonitorPortEntry OBJECT-TYPE\n\
    \       SYNTAX      RptrMonitorPortEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n               \"An entry in\
    \ the table, containing performance and\n               error statistics for a\
    \ single port.\"\n       INDEX    { rptrMonitorPortGroupIndex, rptrMonitorPortIndex\
    \ }\n       ::= { rptrMonitorPortTable 1 }\n   RptrMonitorPortEntry ::=\n    \
    \   SEQUENCE {\n           rptrMonitorPortGroupIndex\n               Integer32,\n\
    \           rptrMonitorPortIndex\n               Integer32,\n           rptrMonitorPortReadableFrames\n\
    \               Counter32,\n           rptrMonitorPortReadableOctets\n       \
    \        Counter32,\n           rptrMonitorPortFCSErrors\n               Counter32,\n\
    \           rptrMonitorPortAlignmentErrors\n               Counter32,\n      \
    \     rptrMonitorPortFrameTooLongs\n               Counter32,\n           rptrMonitorPortShortEvents\n\
    \               Counter32,\n           rptrMonitorPortRunts\n               Counter32,\n\
    \           rptrMonitorPortCollisions\n               Counter32,\n           rptrMonitorPortLateEvents\n\
    \               Counter32,\n           rptrMonitorPortVeryLongEvents\n       \
    \        Counter32,\n           rptrMonitorPortDataRateMismatches\n          \
    \     Counter32,\n           rptrMonitorPortAutoPartitions\n               Counter32,\n\
    \           rptrMonitorPortTotalErrors\n               Counter32,\n          \
    \ rptrMonitorPortLastChange\n               TimeStamp\n       }\n   rptrMonitorPortGroupIndex\
    \ OBJECT-TYPE\n       SYNTAX      Integer32 (1..2147483647)\n       MAX-ACCESS\
    \  read-only\n       STATUS      current\n       DESCRIPTION\n               \"\
    This object identifies the group containing the\n               port for which\
    \ this entry contains information.\"\n       ::= { rptrMonitorPortEntry 1 }\n\
    \   rptrMonitorPortIndex OBJECT-TYPE\n       SYNTAX      Integer32 (1..2147483647)\n\
    \       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \               \"This object identifies the port within the group\n         \
    \      for which this entry contains information.\"\n       REFERENCE\n      \
    \         \"[IEEE 802.3 Mgt], 30.4.3.1.1, aPortID.\"\n       ::= { rptrMonitorPortEntry\
    \ 2 }\n   rptrMonitorPortReadableFrames OBJECT-TYPE\n       SYNTAX      Counter32\n\
    \       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \               \"This object is the number of frames of valid\n             \
    \  frame length that have been received on this port.\n               This counter\
    \ is incremented by one for each frame\n               received on this port whose\
    \ OctetCount is greater\n               than or equal to minFrameSize and less\
    \ than or\n               equal to maxFrameSize (Ref: IEEE 802.3 Std,\n      \
    \         4.4.2.1) and for which the FCSError and\n               CollisionEvent\
    \ signals are not asserted.\n               A discontinuity may occur in the value\n\
    \               when the value of object\n               rptrMonitorPortLastChange\
    \ changes.\n               This statistic provides one of the parameters\n   \
    \            necessary for obtaining the packet error rate.\n               The\
    \ approximate minimum time for rollover of this\n               counter is 80\
    \ hours at 10Mb/s.\"\n       REFERENCE\n               \"[IEEE 802.3 Mgt], 30.4.3.1.4,\
    \ aReadableFrames.\"\n       ::= { rptrMonitorPortEntry 3 }\n   rptrMonitorPortReadableOctets\
    \ OBJECT-TYPE\n       SYNTAX      Counter32\n       MAX-ACCESS  read-only\n  \
    \     STATUS      current\n       DESCRIPTION\n               \"This object is\
    \ the number of octets contained in\n               valid frames that have been\
    \ received on this port.\n               This counter is incremented by OctetCount\
    \ for each\n               frame received on this port which has been\n      \
    \         determined to be a readable frame (i.e., including\n               FCS\
    \ octets but excluding framing bits and dribble\n               bits).\n     \
    \          A discontinuity may occur in the value\n               when the value\
    \ of object\n               rptrMonitorPortLastChange changes.\n             \
    \  This statistic provides an indicator of the total\n               data transferred.\
    \  The approximate minimum time\n               for rollover of this counter in\
    \ a 10Mb/s repeater\n               is 58 minutes.\n               For ports receiving\
    \ traffic at a maximum rate in\n               a 100Mb/s repeater, this counter\
    \ can roll over\n               in less than 6 minutes.  Since that amount of\
    \ time\n               could be less than a management station's poll cycle\n\
    \               time, in order to avoid a loss of information a\n            \
    \   management station is advised to also poll the\n               rptrMonitorPortUpper32Octets\
    \ object, or to use the\n               64-bit counter defined by\n          \
    \     rptrMonitorPortHCReadableOctets instead of the\n               two 32-bit\
    \ counters.\"\n       REFERENCE\n               \"[IEEE 802.3 Mgt], 30.4.3.1.5,\
    \ aReadableOctets.\"\n       ::= { rptrMonitorPortEntry 4 }\n   rptrMonitorPortFCSErrors\
    \ OBJECT-TYPE\n       SYNTAX      Counter32\n       MAX-ACCESS  read-only\n  \
    \     STATUS      current\n       DESCRIPTION\n               \"This counter is\
    \ incremented by one for each frame\n               received on this port with\
    \ the FCSError signal\n               asserted and the FramingError and CollisionEvent\n\
    \               signals deasserted and whose OctetCount is greater\n         \
    \      than or equal to minFrameSize and less than or\n               equal to\
    \ maxFrameSize (Ref: 4.4.2.1, IEEE 802.3\n               Std).\n             \
    \  A discontinuity may occur in the value\n               when the value of object\n\
    \               rptrMonitorPortLastChange changes.\n               The approximate\
    \ minimum time for rollover of this\n               counter is 80 hours at 10Mb/s.\"\
    \n       REFERENCE\n               \"[IEEE 802.3 Mgt], 30.4.3.1.6,\n         \
    \      aFrameCheckSequenceErrors.\"\n       ::= { rptrMonitorPortEntry 5 }\n \
    \  rptrMonitorPortAlignmentErrors OBJECT-TYPE\n       SYNTAX      Counter32\n\
    \       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \               \"This counter is incremented by one for each frame\n        \
    \       received on this port with the FCSError and\n               FramingError\
    \ signals asserted and CollisionEvent\n               signal deasserted and whose\
    \ OctetCount is greater\n               than or equal to minFrameSize and less\
    \ than or\n               equal to maxFrameSize (Ref: IEEE 802.3 Std,\n      \
    \         4.4.2.1).  If rptrMonitorPortAlignmentErrors is\n               incremented\
    \ then the rptrMonitorPortFCSErrors\n               Counter shall not be incremented\
    \ for the same\n               frame.\n               A discontinuity may occur\
    \ in the value\n               when the value of object\n               rptrMonitorPortLastChange\
    \ changes.\n               The approximate minimum time for rollover of this\n\
    \               counter is 80 hours at 10Mb/s.\"\n       REFERENCE\n         \
    \      \"[IEEE 802.3 Mgt], 30.4.3.1.7, aAlignmentErrors.\"\n       ::= { rptrMonitorPortEntry\
    \ 6 }\n   rptrMonitorPortFrameTooLongs OBJECT-TYPE\n       SYNTAX      Counter32\n\
    \       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \               \"This counter is incremented by one for each frame\n        \
    \       received on this port whose OctetCount is greater\n               than\
    \ maxFrameSize (Ref: 4.4.2.1, IEEE 802.3 Std).\n               If rptrMonitorPortFrameTooLongs\
    \ is incremented\n               then neither the rptrMonitorPortAlignmentErrors\n\
    \               nor the rptrMonitorPortFCSErrors counter shall be\n          \
    \     incremented for the frame.\n               A discontinuity may occur in\
    \ the value\n               when the value of object\n               rptrMonitorPortLastChange\
    \ changes.\n               The approximate minimum time for rollover of this\n\
    \               counter is 61 days in a 10Mb/s repeater.\"\n       REFERENCE\n\
    \               \"[IEEE 802.3 Mgt], 30.4.3.1.8, aFramesTooLong.\"\n       ::=\
    \ { rptrMonitorPortEntry 7 }\n   rptrMonitorPortShortEvents OBJECT-TYPE\n    \
    \   SYNTAX      Counter32\n       MAX-ACCESS  read-only\n       STATUS      current\n\
    \       DESCRIPTION\n               \"This counter is incremented by one for each\n\
    \               CarrierEvent on this port with ActivityDuration\n            \
    \   less than ShortEventMaxTime.  ShortEventMaxTime is\n               greater\
    \ than 74 bit times and less than 82 bit\n               times.  ShortEventMaxTime\
    \ has tolerances included\n               to provide for circuit losses between\
    \ a\n               conformance test point at the AUI and the\n              \
    \ measurement point within the state machine.\n               Notes:\n       \
    \        ShortEvents may indicate externally\n               generated noise hits\
    \ which will cause the repeater\n               to transmit Runts to its other\
    \ ports, or propagate\n               a collision (which may be late) back to\
    \ the\n               transmitting DTE and damaged frames to the rest of\n   \
    \            the network.\n               Implementors may wish to consider selecting\
    \ the\n               ShortEventMaxTime towards the lower end of the\n       \
    \        allowed tolerance range to accommodate bit losses\n               suffered\
    \ through physical channel devices not\n               budgeted for within this\
    \ standard.\n               The significance of this attribute is different\n\
    \               in 10 and 100 Mb/s collision domains.  Clause 9\n            \
    \   repeaters perform fragment extension of short\n               events which\
    \ would be counted as runts on the\n               interconnect ports of other\
    \ repeaters.  Clause\n               27 repeaters do not perform fragment extension.\n\
    \               A discontinuity may occur in the value\n               when the\
    \ value of object\n               rptrMonitorPortLastChange changes.\n       \
    \        The approximate minimum time for rollover of this\n               counter\
    \ is 16 hours in a 10Mb/s repeater.\"\n       REFERENCE\n               \"[IEEE\
    \ 802.3 Mgt], 30.4.3.1.9, aShortEvents.\"\n       ::= { rptrMonitorPortEntry 8\
    \ }\n   rptrMonitorPortRunts OBJECT-TYPE\n       SYNTAX      Counter32\n     \
    \  MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n   \
    \            \"This counter is incremented by one for each\n               CarrierEvent\
    \ on this port that meets one of the\n               following two conditions.\
    \  Only one test need be\n               made.  a) The ActivityDuration is greater\
    \ than\n               ShortEventMaxTime and less than ValidPacketMinTime\n  \
    \             and the CollisionEvent signal is deasserted.  b)\n             \
    \  The OctetCount is less than 64, the\n               ActivityDuration is greater\
    \ than ShortEventMaxTime\n               and the CollisionEvent signal is deasserted.\n\
    \               ValidPacketMinTime is greater than or equal to 552\n         \
    \      bit times and less than 565 bit times.\n               An event whose length\
    \ is greater than 74 bit times\n               but less than 82 bit times shall\
    \ increment either\n               the shortEvents counter or the runts counter\
    \ but\n               not both.  A CarrierEvent greater than or equal to\n   \
    \            552 bit times but less than 565 bit times may or\n              \
    \ may not be counted as a runt.\n               ValidPacketMinTime has tolerances\
    \ included to\n               provide for circuit losses between a conformance\n\
    \               test point at the AUI and the measurement point\n            \
    \   within the state machine.\n               Runts usually indicate collision\
    \ fragments, a\n               normal network event.  In certain situations\n\
    \               associated with large diameter networks a\n               percentage\
    \ of collision fragments may exceed\n               ValidPacketMinTime.\n    \
    \           A discontinuity may occur in the value\n               when the value\
    \ of object\n               rptrMonitorPortLastChange changes.\n             \
    \  The approximate minimum time for rollover of this\n               counter is\
    \ 16 hours in a 10Mb/s repeater.\"\n       REFERENCE\n               \"[IEEE 802.3\
    \ Mgt], 30.4.3.1.10, aRunts.\"\n       ::= { rptrMonitorPortEntry 9 }\n   rptrMonitorPortCollisions\
    \ OBJECT-TYPE\n       SYNTAX      Counter32\n       MAX-ACCESS  read-only\n  \
    \     STATUS      current\n       DESCRIPTION\n               \"For a clause 9\
    \ repeater, this counter is\n               incremented by one for any CarrierEvent\
    \ signal\n               on any port for which the CollisionEvent signal\n   \
    \            on this port is asserted.  For a clause 27\n               repeater\
    \ port the counter increments on entering\n               the Collision Count\
    \ Increment state of the\n               partition state diagram (fig 27-8 of\n\
    \               [IEEE 802.3 Std]).\n               A discontinuity may occur in\
    \ the value\n               when the value of object\n               rptrMonitorPortLastChange\
    \ changes.\n               The approximate minimum time for rollover of this\n\
    \               counter is 16 hours in a 10Mb/s repeater.\"\n       REFERENCE\n\
    \               \"[IEEE 802.3 Mgt], 30.4.3.1.11, aCollisions.\"\n       ::= {\
    \ rptrMonitorPortEntry 10 }\n   rptrMonitorPortLateEvents OBJECT-TYPE\n      \
    \ SYNTAX      Counter32\n       MAX-ACCESS  read-only\n       STATUS      current\n\
    \       DESCRIPTION\n               \"For a clause 9 repeater port, this counter\
    \ is\n               incremented by one for each CarrierEvent\n              \
    \ on this port in which the CollIn(X)\n               variable transitions to\
    \ the value SQE (Ref:\n               9.6.6.2, IEEE 802.3 Std) while the\n   \
    \            ActivityDuration is greater than the\n               LateEventThreshold.\
    \  For a clause 27 repeater\n               port, this counter is incremented\
    \ by one on\n               entering the Collision Count Increment state\n   \
    \            of the  partition state diagram (fig 27-8)\n               while\
    \ the  ActivityDuration is greater than\n               the LateEvent- Threshold.\
    \  Such a CarrierEvent\n               is counted twice, as both a collision and\
    \ as a\n               lateEvent.\n               The LateEventThreshold is greater\
    \ than 480 bit\n               times and less than 565 bit times.\n          \
    \     LateEventThreshold has tolerances included to\n               permit an\
    \ implementation to build a single\n               threshold to serve as both\
    \ the LateEventThreshold\n               and ValidPacketMinTime threshold.\n \
    \              A discontinuity may occur in the value\n               when the\
    \ value of object\n               rptrMonitorPortLastChange changes.\n       \
    \        The approximate minimum time for rollover of this\n               counter\
    \ is 81 hours in a 10Mb/s repeater.\"\n       REFERENCE\n               \"[IEEE\
    \ 802.3 Mgt], 30.4.3.1.12, aLateEvents.\"\n       ::= { rptrMonitorPortEntry 11\
    \ }\n   rptrMonitorPortVeryLongEvents OBJECT-TYPE\n       SYNTAX      Counter32\n\
    \       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \               \"For a clause 9 repeater port, this counter\n               is\
    \ incremented by one for each CarrierEvent\n               whose ActivityDuration\
    \ is greater than the\n               MAU Jabber Lockup Protection timer TW3\n\
    \               (Ref: 9.6.1 & 9.6.5, IEEE 802.3 Std).\n               For a clause\
    \ 27 repeater port, this counter\n               is incremented by one on entry\
    \ to the\n               Rx Jabber state of the receiver timer state\n       \
    \        diagram (fig 27-7).  Other counters may\n               be incremented\
    \ as appropriate.\n               A discontinuity may occur in the value\n   \
    \            when the value of object\n               rptrMonitorPortLastChange\
    \ changes.\"\n       REFERENCE\n               \"[IEEE 802.3 Mgt], 30.4.3.1.13,\
    \ aVeryLongEvents.\"\n       ::= { rptrMonitorPortEntry 12 }\n   rptrMonitorPortDataRateMismatches\
    \ OBJECT-TYPE\n       SYNTAX      Counter32\n       MAX-ACCESS  read-only\n  \
    \     STATUS      current\n       DESCRIPTION\n               \"This counter is\
    \ incremented by one for each\n               frame received by this port that\
    \ meets all\n               of the conditions required by only one of the\n  \
    \             following two measurement methods:\n               Measurement method\
    \ A:  1) The CollisionEvent\n               signal is not asserted (10Mb/s operation)\
    \ or\n               the Collision Count Increment state of the\n            \
    \   partition state diagram (fig 27-8 of\n               [IEEE 802.3 Std]) has\
    \ not been entered\n               (100Mb/s operation).  2) The ActivityDuration\n\
    \               is greater than ValidPacketMinTime.  3) The\n               frequency\
    \ (data rate) is detectably mismatched\n               from the local transmit\
    \ frequency.\n               Measurement method B:  1) The CollisionEvent\n  \
    \             signal is not asserted (10Mb/s operation)\n               or the\
    \ Collision Count Increment state of the\n               partition state diagram\
    \ (fig 27-8 of\n               [IEEE 802.3 Std]) has not been entered\n      \
    \         (100Mb/s operation).  2) The OctetCount is\n               greater than\
    \ 63.  3) The frequency (data\n               rate) is detectably mismatched from\
    \ the local\n               transmit frequency.  The exact degree of\n       \
    \        mismatch is vendor specific and is to be\n               defined by the\
    \ vendor for conformance testing.\n               When this event occurs, other\
    \ counters whose\n               increment conditions were satisfied may or may\
    \ not\n               also be incremented, at the implementor's\n            \
    \   discretion.  Whether or not the repeater was able\n               to maintain\
    \ data integrity is beyond the scope of\n               this standard.\n     \
    \          A discontinuity may occur in the value\n               when the value\
    \ of object\n               rptrMonitorPortLastChange changes.\"\n       REFERENCE\n\
    \               \"[IEEE 802.3 Mgt], 30.4.3.1.14, aDataRateMismatches.\"\n    \
    \   ::= { rptrMonitorPortEntry 13 }\n   rptrMonitorPortAutoPartitions OBJECT-TYPE\n\
    \       SYNTAX      Counter32\n       MAX-ACCESS  read-only\n       STATUS   \
    \   current\n       DESCRIPTION\n               \"This counter is incremented\
    \ by one for\n               each time the repeater has automatically\n      \
    \         partitioned this port.\n               The conditions that cause a clause\
    \ 9\n               repeater port to partition are specified in\n            \
    \   the partition state diagram in clause 9 of\n               [IEEE 802.3 Std].\
    \  They are not differentiated\n               here.  A clause 27 repeater port\
    \ partitions\n               on entry to the Partition Wait state of the\n   \
    \            partition state diagram (fig 27-8 in\n               [IEEE 802.3\
    \ Std]).\n               A discontinuity may occur in the value\n            \
    \   when the value of object\n               rptrMonitorPortLastChange changes.\"\
    \n       REFERENCE\n               \"[IEEE 802.3 Mgt], 30.4.3.1.15, aAutoPartitions.\"\
    \n       ::= { rptrMonitorPortEntry 14 }\n   rptrMonitorPortTotalErrors OBJECT-TYPE\n\
    \       SYNTAX      Counter32\n       MAX-ACCESS  read-only\n       STATUS   \
    \   current\n       DESCRIPTION\n               \"The total number of errors which\
    \ have occurred on\n               this port.  This counter is the summation of\
    \ the\n               values of other error counters (for the same\n         \
    \      port), namely:\n                   rptrMonitorPortFCSErrors,\n        \
    \           rptrMonitorPortAlignmentErrors,\n                   rptrMonitorPortFrameTooLongs,\n\
    \                   rptrMonitorPortShortEvents,\n                   rptrMonitorPortLateEvents,\n\
    \                   rptrMonitorPortVeryLongEvents,\n                   rptrMonitorPortDataRateMismatches,\
    \ and\n                   rptrMonitorPortSymbolErrors.\n               This counter\
    \ is redundant in the sense that it is\n               the summation of information\
    \ already available\n               through other objects.  However, it is included\n\
    \               specifically because the regular retrieval of this\n         \
    \      object as a means of tracking the health of a port\n               provides\
    \ a considerable optimization of network\n               management traffic over\
    \ the otherwise necessary\n               retrieval of the summed counters.\n\
    \               Note that rptrMonitorPortRunts is not included\n             \
    \  in this total; this is because runts usually\n               indicate collision\
    \ fragments, a normal network\n               event.\n               A discontinuity\
    \ may occur in the value\n               when the value of object\n          \
    \     rptrMonitorPortLastChange changes.\"\n       ::= { rptrMonitorPortEntry\
    \ 15 }\n   rptrMonitorPortLastChange OBJECT-TYPE\n       SYNTAX      TimeStamp\n\
    \       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \               \"The value of sysUpTime when the last of\n               the\
    \ following occurred:\n                 1) the agent cold- or warm-started;\n\
    \                 2) the row for the port was created\n                    (such\
    \ as when a device or module was added\n                     to the system); or\n\
    \                 3) any condition that would cause one of\n                 \
    \   the counters for the row to experience\n                    a discontinuity.\"\
    \n       ::= { rptrMonitorPortEntry 16 }\n   rptrMonitor100PortTable OBJECT-TYPE\n\
    \       SYNTAX      SEQUENCE OF RptrMonitor100PortEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n               \"Table of additional\
    \ performance and error\n               statistics for 100Mb/s ports, above and\n\
    \               beyond those parameters that apply to both\n               10\
    \ and 100Mbps ports.  Entries exist only for\n               ports attached to\
    \ 100Mbps repeaters.\n               The columnar object rptrMonitorPortLastChange\n\
    \               is used to indicate possible discontinuities\n               of\
    \ counter type columnar objects in this table.\"\n       ::= { rptrMonitorPortInfo\
    \ 2 }\n   rptrMonitor100PortEntry OBJECT-TYPE\n       SYNTAX      RptrMonitor100PortEntry\n\
    \       MAX-ACCESS  not-accessible\n       STATUS      current\n       DESCRIPTION\n\
    \               \"An entry in the table, containing performance\n            \
    \   and error statistics for a single 100Mb/s port.\"\n       INDEX    { rptrMonitorPortGroupIndex,\
    \ rptrMonitorPortIndex }\n       ::= { rptrMonitor100PortTable 1 }\n   RptrMonitor100PortEntry\
    \ ::=\n       SEQUENCE {\n           rptrMonitorPortIsolates\n               Counter32,\n\
    \           rptrMonitorPortSymbolErrors\n               Counter32,\n         \
    \  rptrMonitorPortUpper32Octets\n               Counter32,\n           rptrMonitorPortHCReadableOctets\n\
    \               Counter64\n       }\n   rptrMonitorPortIsolates OBJECT-TYPE\n\
    \       SYNTAX      Counter32\n       MAX-ACCESS  read-only\n       STATUS   \
    \   current\n       DESCRIPTION\n               \"This counter is incremented\
    \ by one each time that\n               the repeater port automatically isolates\
    \ as a\n               consequence of false carrier events.  The conditions\n\
    \               which cause a port to automatically isolate are\n            \
    \   defined by the transition from the False Carrier\n               state to\
    \ the Link Unstable state of the carrier\n               integrity state diagram\
    \ (figure 27-9)\n               [IEEE 802.3 Standard].\n               Note: \
    \ Isolates do not affect the value of\n               the PortOperStatus object.\n\
    \               A discontinuity may occur in the value\n               when the\
    \ value of object\n               rptrMonitorPortLastChange changes.\"\n     \
    \  REFERENCE\n               \"[IEEE 802.3 Mgt], 30.4.3.1.16, aIsolates.\"\n \
    \      ::= { rptrMonitor100PortEntry 1 }\n   rptrMonitorPortSymbolErrors OBJECT-TYPE\n\
    \       SYNTAX      Counter32\n       MAX-ACCESS  read-only\n       STATUS   \
    \   current\n       DESCRIPTION\n               \"This counter is incremented\
    \ by one each time when\n               valid length packet was received at the\
    \ port and\n               there was at least one occurrence of an invalid\n \
    \              data symbol. This can increment only once per valid\n         \
    \      carrier event. A collision presence at any port of\n               the\
    \ repeater containing port N, will not cause this\n               attribute to\
    \ increment.\n               A discontinuity may occur in the value\n        \
    \       when the value of object\n               rptrMonitorPortLastChange changes.\n\
    \               The approximate minimum time for rollover of this\n          \
    \     counter is 7.4 hours at 100Mb/s.\"\n       REFERENCE\n               \"\
    [IEEE 802.3 Mgt], 30.4.3.1.17,\n               aSymbolErrorDuringPacket.\"\n \
    \      ::= { rptrMonitor100PortEntry 2 }\n   rptrMonitorPortUpper32Octets OBJECT-TYPE\n\
    \       SYNTAX      Counter32\n       MAX-ACCESS  read-only\n       STATUS   \
    \   current\n       DESCRIPTION\n               \"This object is the number of\
    \ octets contained in\n               valid frames that have been received on\
    \ this port,\n               modulo 2**32.  That is, it contains the upper 32\n\
    \               bits of a 64-bit octets counter, of which the\n              \
    \ lower 32 bits are contained in the\n               rptrMonitorPortReadableOctets\
    \ object.\n               This two-counter mechanism is provided for those\n \
    \              network management protocols that do not support\n            \
    \   64-bit counters (e.g. SNMP V1) and are used to\n               manage a repeater\
    \ type of 100Mb/s.\n               Conformance clauses for this MIB are defined\
    \ such\n               that implementation of this object is not required\n  \
    \             in a system which does not support 100Mb/s.\n               However,\
    \ systems with mixed 10 and 100Mb/s ports\n               may implement this object\
    \ across all ports,\n               including 10Mb/s.  If this object is implemented,\n\
    \               it must be according to the definition in the first\n        \
    \       paragraph of this description; that is, the value\n               of this\
    \ object MUST be a valid count.\n               A discontinuity may occur in the\
    \ value\n               when the value of object\n               rptrMonitorPortLastChange\
    \ changes.\"\n       ::= { rptrMonitor100PortEntry 3 }\n   rptrMonitorPortHCReadableOctets\
    \ OBJECT-TYPE\n       SYNTAX      Counter64\n       MAX-ACCESS  read-only\n  \
    \     STATUS      current\n       DESCRIPTION\n               \"This object is\
    \ the number of octets contained in\n               valid frames that have been\
    \ received on this port.\n               This counter is incremented by OctetCount\
    \ for each\n               frame received on this port which has been\n      \
    \         determined to be a readable frame (i.e., including\n               FCS\
    \ octets but excluding framing bits and dribble\n               bits).\n     \
    \          This statistic provides an indicator of the total\n               data\
    \ transferred.\n               This counter is a 64-bit version of rptrMonitor-\n\
    \               PortReadableOctets. It should be used by network\n           \
    \    management protocols which suppport 64-bit counters\n               (e.g.\
    \ SNMPv2).\n               Conformance clauses for this MIB are defined such\n\
    \               that implementation of this object is not required\n         \
    \      in a system which does not support 100Mb/s.\n               However, systems\
    \ with mixed 10 and 100Mb/s ports\n               may implement this object across\
    \ all ports,\n               including 10Mb/s.  If this object is implemented,\n\
    \               it must be according to the definition in the first\n        \
    \       paragraph of this description; that is, the value\n               of this\
    \ object MUST be a valid count.\n               A discontinuity may occur in the\
    \ value\n               when the value of object\n               rptrMonitorPortLastChange\
    \ changes.\"\n       REFERENCE\n               \"[IEEE 802.3 Mgt], 30.4.3.1.5,\
    \ aReadableOctets.\"\n       ::= { rptrMonitor100PortEntry 4 }\n   -- New version\
    \ of statistics at the repeater level.\n   --\n   -- Statistics objects for each\
    \ managed repeater\n   -- in the system.\n   rptrMonTable OBJECT-TYPE\n      \
    \ SYNTAX      SEQUENCE OF RptrMonEntry\n       MAX-ACCESS  not-accessible\n  \
    \     STATUS      current\n       DESCRIPTION\n               \"A table of information\
    \ about each\n               non-trivial repeater.  The number of entries\n  \
    \             in this table is the same as the number of\n               entries\
    \ in the rptrInfoTable.\n               The columnar object rptrInfoLastChange\
    \ is\n               used to indicate possible discontinuities of\n          \
    \     counter type columnar objects in this table.\"\n       ::= { rptrMonitorAllRptrInfo\
    \ 1 }\n   rptrMonEntry OBJECT-TYPE\n       SYNTAX      RptrMonEntry\n       MAX-ACCESS\
    \  not-accessible\n       STATUS      current\n       DESCRIPTION\n          \
    \     \"An entry in the table, containing information\n               about a\
    \ single non-trivial repeater.\"\n       INDEX    { rptrInfoId }\n       ::= {\
    \ rptrMonTable 1 }\n   RptrMonEntry ::=\n       SEQUENCE {\n           rptrMonTxCollisions\n\
    \               Counter32,\n           rptrMonTotalFrames\n               Counter32,\n\
    \           rptrMonTotalErrors\n               Counter32,\n           rptrMonTotalOctets\n\
    \               Counter32\n       }\n   rptrMonTxCollisions OBJECT-TYPE\n    \
    \   SYNTAX      Counter32\n       MAX-ACCESS  read-only\n       STATUS      current\n\
    \       DESCRIPTION\n               \"For a clause 9 (10Mb/s) repeater, this counter\n\
    \               is incremented every time the repeater state\n               machine\
    \ enters the TRANSMIT COLLISION state\n               from any state other than\
    \ ONE PORT LEFT\n               (Ref: Fig 9-2 [IEEE 802.3 Std]).\n           \
    \    For a clause 27 repeater, this counter is\n               incremented every\
    \ time the repeater core state\n               diagram enters the Jam state as\
    \ a result of\n               Activity(ALL) > 1 (fig 27-2 [IEEE 802.3 Std]).\n\
    \               The approximate minimum time for rollover of this\n          \
    \     counter is 16 hours in a 10Mb/s repeater and 1.6\n               hours in\
    \ a 100Mb/s repeater.\"\n       REFERENCE\n               \"[IEEE 802.3 Mgt],\
    \ 30.4.1.1.8, aTransmitCollisions\"\n       ::= { rptrMonEntry 1 }\n   rptrMonTotalFrames\
    \ OBJECT-TYPE\n       SYNTAX      Counter32\n       MAX-ACCESS  read-only\n  \
    \     STATUS      current\n       DESCRIPTION\n               \"The number of\
    \ frames of valid frame length\n               that have been received on the\
    \ ports in this repeater\n               and for which the FCSError and CollisionEvent\n\
    \               signals were not asserted.  If an implementation\n           \
    \    can not obtain a count of frames as seen by\n               the repeater\
    \ itself, this counter may be\n               implemented as the summation of\
    \ the values of the\n               rptrMonitorPortReadableFrames counters for\
    \ all of\n               the ports in the repeater.\n               This statistic\
    \ provides one of the parameters\n               necessary for obtaining the packet\
    \ error rate.\n               The approximate minimum time for rollover of this\n\
    \               counter is 80 hours in a 10Mb/s repeater.\"\n       ::= { rptrMonEntry\
    \ 3 }\n   rptrMonTotalErrors OBJECT-TYPE\n       SYNTAX      Counter32\n     \
    \  MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n   \
    \            \"The total number of errors which have occurred on\n           \
    \    all of the ports in this repeater.  The errors\n               included in\
    \ this count are the same as those listed\n               for the rptrMonitorPortTotalErrors\
    \ counter.  If an\n               implementation can not obtain a count of these\n\
    \               errors as seen by the repeater itself, this counter\n        \
    \       may be implemented as the summation of the values of\n               the\
    \ rptrMonitorPortTotalErrors counters for all of\n               the ports in\
    \ the repeater.\"\n       ::= { rptrMonEntry 4 }\n   rptrMonTotalOctets OBJECT-TYPE\n\
    \       SYNTAX      Counter32\n       MAX-ACCESS  read-only\n       STATUS   \
    \   current\n       DESCRIPTION\n               \"The total number of octets contained\
    \ in the valid\n               frames that have been received on the ports in\n\
    \               this group.  If an implementation can not obtain\n           \
    \    a count of octets as seen by the repeater itself,\n               this counter\
    \ may be the summation of the\n               values of the rptrMonitorPortReadableOctets\n\
    \               counters for all of the ports in the group.\n               This\
    \ statistic provides an indicator of the total\n               data transferred.\
    \  The approximate minimum time\n               for rollover of this counter in\
    \ a 10Mb/s repeater\n               is 58 minutes divided by the number of ports\
    \ in\n               the repeater.\n               For 100Mb/s repeaters processing\
    \ traffic at a\n               maximum rate, this counter can roll over in less\n\
    \               than 6 minutes divided by the number of ports in\n           \
    \    the repeater.  Since that amount of time could\n               be less than\
    \ a management station's poll cycle\n               time, in order to avoid a\
    \ loss of information a\n               management station is advised to also\
    \ poll the\n               rptrMonUpper32TotalOctets object, or to use the\n \
    \              64-bit counter defined by rptrMonHCTotalOctets\n              \
    \ instead of the two 32-bit counters.\"\n       ::= { rptrMonEntry 5 }\n   rptrMon100Table\
    \ OBJECT-TYPE\n       SYNTAX      SEQUENCE OF RptrMon100Entry\n       MAX-ACCESS\
    \  not-accessible\n       STATUS      current\n       DESCRIPTION\n          \
    \     \"A table of additional information about each\n               100Mb/s repeater,\
    \ augmenting the entries in\n               the rptrMonTable.  Entries exist in\
    \ this table\n               only for 100Mb/s repeaters.\n               The columnar\
    \ object rptrInfoLastChange is\n               used to indicate possible discontinuities\
    \ of\n               counter type columnar objects in this table.\"\n       ::=\
    \ { rptrMonitorAllRptrInfo 2 }\n   rptrMon100Entry OBJECT-TYPE\n       SYNTAX\
    \      RptrMon100Entry\n       MAX-ACCESS  not-accessible\n       STATUS     \
    \ current\n       DESCRIPTION\n               \"An entry in the table, containing\
    \ information\n               about a single 100Mbps repeater.\"\n       INDEX\
    \    { rptrInfoId }\n       ::= { rptrMon100Table 1 }\n   RptrMon100Entry ::=\n\
    \       SEQUENCE {\n           rptrMonUpper32TotalOctets\n               Counter32,\n\
    \           rptrMonHCTotalOctets\n               Counter64\n       }\n   rptrMonUpper32TotalOctets\
    \ OBJECT-TYPE\n       SYNTAX      Counter32\n       MAX-ACCESS  read-only\n  \
    \     STATUS      current\n       DESCRIPTION\n               \"The total number\
    \ of octets contained in the valid\n               frames that have been received\
    \ on the ports in\n               this repeater, modulo 2**32.  That is, it contains\n\
    \               the upper 32 bits of a 64-bit counter, of which\n            \
    \   the lower 32 bits are contained in the\n               rptrMonTotalOctets\
    \ object.  If an implementation\n               can not obtain a count of octets\
    \ as seen\n               by the repeater itself, the 64-bit value\n         \
    \      may be the summation of the values of the\n               rptrMonitorPortReadableOctets\
    \ counters combined\n               with the corresponding rptrMonitorPortUpper32Octets\n\
    \               counters for all of the ports in the repeater.\n             \
    \  This statistic provides an indicator of the total\n               data transferred\
    \ within the repeater.\n               This two-counter mechanism is provided\
    \ for those\n               network management protocols that do not support\n\
    \               64-bit counters (e.g. SNMP V1) and are used to\n             \
    \  manage a repeater type of 100Mb/s.\n               Conformance clauses for\
    \ this MIB are defined such\n               that implementation of this object\
    \ is not required\n               in a system which does not support 100Mb/s.\n\
    \               However, systems with mixed 10 and 100Mb/s ports\n           \
    \    may implement this object across all ports,\n               including 10Mb/s.\
    \  If this object is implemented,\n               it must be according to the\
    \ definition in the first\n               paragraph of this description; that\
    \ is, the value\n               of this object MUST be a valid count.\"\n    \
    \   ::= { rptrMon100Entry 1 }\n   rptrMonHCTotalOctets OBJECT-TYPE\n       SYNTAX\
    \      Counter64\n       MAX-ACCESS  read-only\n       STATUS      current\n \
    \      DESCRIPTION\n               \"The total number of octets contained in the\
    \ valid\n               frames that have been received on the ports in\n     \
    \          this group.  If a implementation can not obtain\n               a count\
    \ of octets as seen by the repeater itself,\n               this counter may be\
    \ the summation of the\n               values of the rptrMonitorPortReadableOctets\n\
    \               counters for all of the ports in the group.\n               This\
    \ statistic provides an indicator of the total\n               data transferred.\n\
    \               This counter is a 64-bit (high-capacity) version\n           \
    \    of rptrMonUpper32TotalOctets and rptrMonTotalOctets.\n               It should\
    \ be used by network management protocols\n               which support 64-bit\
    \ counters (e.g. SNMPv2).\n               Conformance clauses for this MIB are\
    \ defined such\n               that implementation of this object is not required\n\
    \               in a system which does not support 100Mb/s.\n               However,\
    \ systems with mixed 10 and 100Mb/s ports\n               may implement this object\
    \ across all ports,\n               including 10Mb/s.  If this object is implemented,\n\
    \               it must be according to the definition in the first\n        \
    \       paragraph of this description; that is, the value\n               of this\
    \ object MUST be a valid count.\"\n       ::= { rptrMon100Entry 2 }\n   --\n \
    \  -- The Repeater Address Search Table\n   --\n   -- This table provides an active\
    \ address tracking\n   -- capability which can be also used to collect the\n \
    \  -- necessary information for mapping the topology\n   -- of a network.  Note\
    \ that an NMS is required to have\n   -- read-write access to the table in order\
    \ to access\n   -- this function.  Section 4, \"Topology Mapping\",\n   -- contains\
    \ a description of an algorithm which can\n   -- make use of this table, in combination\
    \ with the\n   -- forwarding databases of managed bridges/switches\n   -- in the\
    \ network, to map network topology.\n   --\n   rptrAddrSearchTable OBJECT-TYPE\n\
    \       SYNTAX     SEQUENCE OF RptrAddrSearchEntry\n       MAX-ACCESS not-accessible\n\
    \       STATUS     current\n       DESCRIPTION\n               \"This table contains\
    \ one entry per repeater in the\n               system.  It defines objects which\
    \ allow a network\n               management application to instruct an agent\
    \ to watch\n               for a given MAC address and report which port it\n\
    \               was seen on.  Only one address search can be in\n            \
    \   progress on each repeater at any one time.  Before\n               starting\
    \ an address search, a management application\n               should obtain 'ownership'\
    \ of the entry in\n               rptrAddrSearchTable for the repeater that is\
    \ to\n               perform the search.  This is accomplished with the\n    \
    \           rptrAddrSearchLock and rptrAddrSearchStatus as\n               follows:\n\
    \               try_again:\n                   get(rptrAddrSearchLock, rptrAddrSearchStatus)\n\
    \                   while (rptrAddrSearchStatus != notInUse)\n               \
    \    {\n                       /* Loop waiting for objects to be available*/\n\
    \                       short delay\n                       get(rptrAddrSearchLock,\
    \ rptrAddrSearchStatus)\n                   }\n                   /* Try to claim\
    \ map objects */\n                   lock_value = rptrAddrSearchLock\n       \
    \            if ( set(rptrAddrSearchLock = lock_value,\n                     \
    \       rptrAddrSearchStatus = inUse,\n                            rptrAddrSearchOwner\
    \ = 'my-IP-address)\n                         == FAILURE)\n                  \
    \     /* Another manager got the lock */\n                       goto try_again\n\
    \                   /* I have the lock */\n                   set (rptrAddrSearchAddress\
    \ = <search target>)\n                   wait for rptrAddrSearchState to change\
    \ from none\n                   if (rptrAddrSearchState == single)\n         \
    \              get (rptrAddrSearchGroup, rptrAddrSearchPort)\n               \
    \    /* release the lock, making sure not to overwrite\n                     \
    \ anyone else's lock */\n                   set (rptrAddrSearchLock = lock_value+1,\n\
    \                        rptrAddrSearchStatus = notInUse,\n                  \
    \      rptrAddrSearchOwner = '')\n               A management station first retrieves\
    \ the values of\n               the appropriate instances of the rptrAddrSearchLock\n\
    \               and rptrAddrSearchStatus objects, periodically\n             \
    \  repeating the retrieval if necessary, until the value\n               of rptrAddrSearchStatus\
    \ is 'notInUse'.  The\n               management station then tries to set the\
    \ same\n               instance of the rptrAddrSearchLock object to the\n    \
    \           value it just retrieved, the same instance of the\n              \
    \ rptrAddrSearchStatus object to 'inUse', and the\n               corresponding\
    \ instance of rptrAddrSearchOwner to a\n               value indicating itself.\
    \  If the set operation\n               succeeds, then the management station\
    \ has obtained\n               ownership of the rptrAddrSearchEntry, and the value\n\
    \               of rptrAddrSearchLock is incremented by the agent (as\n      \
    \         per the semantics of TestAndIncr).  Failure of the\n               set\
    \ operation indicates that some other manager has\n               obtained ownership\
    \ of the rptrAddrSearchEntry.\n               Once ownership is obtained, the\
    \ management station\n               can proceed with the search operation.  Note\
    \ that the\n               agent will reset rptrAddrSearchStatus to 'notInUse'\n\
    \               if it has been in the 'inUse' state for an abnormally\n      \
    \         long period of time, to prevent a misbehaving manager\n            \
    \   from permanently locking the entry.  It is suggested\n               that\
    \ this timeout period be between one and five\n               minutes.\n     \
    \          When the management station has completed its search\n            \
    \   operation, it should free the entry by setting\n               the instance\
    \ of the rptrAddrSearchLock object to the\n               previous value + 1,\
    \ the instance of the\n               rptrAddrSearchStatus to 'notInUse', and\
    \ the instance\n               of rptrAddrSearchOwner to a zero length string.\
    \  This\n               is done to prevent overwriting another station's\n   \
    \            lock.\"\n       ::= { rptrAddrTrackRptrInfo 1 }\n   rptrAddrSearchEntry\
    \ OBJECT-TYPE\n       SYNTAX     RptrAddrSearchEntry\n       MAX-ACCESS not-accessible\n\
    \       STATUS     current\n       DESCRIPTION\n               \"An entry containing\
    \ objects for invoking an address\n               search on a repeater.\"\n  \
    \     INDEX      { rptrInfoId }\n       ::= { rptrAddrSearchTable 1 }\n   RptrAddrSearchEntry\
    \ ::=\n       SEQUENCE {\n           rptrAddrSearchLock     TestAndIncr,\n   \
    \        rptrAddrSearchStatus   INTEGER,\n           rptrAddrSearchAddress  MacAddress,\n\
    \           rptrAddrSearchState    INTEGER,\n           rptrAddrSearchGroup  \
    \  Integer32,\n           rptrAddrSearchPort     Integer32,\n           rptrAddrSearchOwner\
    \    OwnerString\n       }\n   rptrAddrSearchLock OBJECT-TYPE\n       SYNTAX \
    \    TestAndIncr\n       MAX-ACCESS read-write\n       STATUS     current\n  \
    \     DESCRIPTION\n               \"This object is used by a management station\
    \ as an\n               advisory lock for this rptrAddrSearchEntry.\"\n      \
    \ ::= { rptrAddrSearchEntry 1 }\n   rptrAddrSearchStatus  OBJECT-TYPE\n      \
    \ SYNTAX     INTEGER {\n                      notInUse(1),\n                 \
    \     inUse(2)\n                  }\n       MAX-ACCESS read-write\n       STATUS\
    \     current\n       DESCRIPTION\n               \"This object is used to indicate\
    \ that some management\n               station is currently using this rptrAddrSearchEntry.\n\
    \               Cooperating managers should set this object to\n             \
    \  'notInUse' when they are finished using this entry.\n               The agent\
    \ will automatically set the value of this\n               object to 'notInUse'\
    \ if it has been set to 'inUse'\n               for an unusually long period of\
    \ time.\"\n       ::= { rptrAddrSearchEntry 2 }\n   rptrAddrSearchAddress OBJECT-TYPE\n\
    \       SYNTAX     MacAddress\n       MAX-ACCESS read-write\n       STATUS   \
    \  current\n       DESCRIPTION\n               \"This object is used to search\
    \ for a specified MAC\n               address.  When this object is set, an address\
    \ search\n               begins.  This automatically sets the corresponding\n\
    \               instance of the rptrAddrSearchState object  to 'none'\n      \
    \         and the corresponding instances of the\n               rptrAddrSearchGroup\
    \ and rptrAddrSearchPort objects to\n               0.\n               When a\
    \ valid frame is received by this repeater with\n               a source MAC address\
    \ which matches the current value\n               of rptrAddrSearchAddress, the\
    \ agent will update the\n               corresponding instances of rptrAddrSearchState,\n\
    \               rptrAddrSearchGroup and rptrAddrSearchPort to reflect\n      \
    \         the current status of the search, and the group and\n              \
    \ port on which the frame was seen.\"\n       ::= { rptrAddrSearchEntry 3 }\n\
    \   rptrAddrSearchState OBJECT-TYPE\n       SYNTAX     INTEGER {\n           \
    \            none(1),\n                       single(2),\n                   \
    \    multiple(3)\n                  }\n       MAX-ACCESS read-only\n       STATUS\
    \     current\n       DESCRIPTION\n               \"The current state of the MAC\
    \ address search on this\n               repeater.  This object is initialized\
    \ to 'none' when\n               the corresponding instance of rptrAddrSearchAddress\n\
    \               is set.  If the agent detects the address on exactly\n       \
    \        one port, it will set this object to 'single', and\n               set\
    \ the corresponding instances of\n               rptrAddrSearchGroup and rptrAddrSearchPort\
    \ to reflect\n               the group and port on which the address was heard.\n\
    \               If the agent detects the address on more than one\n          \
    \     port, it will set this object to 'multiple'.\"\n       ::= { rptrAddrSearchEntry\
    \ 4 }\n   rptrAddrSearchGroup OBJECT-TYPE\n       SYNTAX     Integer32 (0..2147483647)\n\
    \       MAX-ACCESS read-only\n       STATUS     current\n       DESCRIPTION\n\
    \               \"The group from which an error-free frame whose\n           \
    \    source address is equal to the corresponding instance\n               of\
    \ rptrAddrSearchAddress has been received.  The\n               value of this\
    \ object is undefined when the\n               corresponding instance of rptrAddrSearchState\
    \ is\n               equal to 'none' or 'multiple'.\"\n       ::= { rptrAddrSearchEntry\
    \ 5 }\n   rptrAddrSearchPort OBJECT-TYPE\n       SYNTAX     Integer32 (0..2147483647)\n\
    \       MAX-ACCESS read-only\n       STATUS     current\n       DESCRIPTION\n\
    \               \"The port rom which an error-free frame whose\n             \
    \  source address is equal to the corresponding instance\n               of rptrAddrSearchAddress\
    \ has been received.  The\n               value of this object is undefined when\
    \ the\n               corresponding instance of rptrAddrSearchState is\n     \
    \          equal to 'none' or 'multiple'.\"\n       ::= { rptrAddrSearchEntry\
    \ 6 }\n   rptrAddrSearchOwner OBJECT-TYPE\n       SYNTAX     OwnerString\n   \
    \    MAX-ACCESS read-write\n       STATUS     current\n       DESCRIPTION\n  \
    \             \"The entity which currently has 'ownership' of this\n         \
    \      rptrAddrSearchEntry.\"\n       ::= { rptrAddrSearchEntry 7 }\n   --\n \
    \  -- The Port Address Tracking Table\n   --\n   -- This table provides a way\
    \ for a network management\n   -- application to passively gather information\
    \ (using\n   -- read-only privileges) about which network addresses\n   -- are\
    \ connected to which ports of a repeater.\n   --\n   rptrAddrTrackTable OBJECT-TYPE\n\
    \       SYNTAX      SEQUENCE OF RptrAddrTrackEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n               \"Table of address\
    \ mapping information about the\n               ports.\"\n       ::= { rptrAddrTrackPortInfo\
    \ 1 }\n   rptrAddrTrackEntry OBJECT-TYPE\n       SYNTAX      RptrAddrTrackEntry\n\
    \       MAX-ACCESS  not-accessible\n       STATUS      current\n       DESCRIPTION\n\
    \               \"An entry in the table, containing address mapping\n        \
    \       information about a single port.\"\n       INDEX    { rptrAddrTrackGroupIndex,\
    \ rptrAddrTrackPortIndex }\n       ::= { rptrAddrTrackTable 1 }\n   RptrAddrTrackEntry\
    \ ::=\n       SEQUENCE {\n           rptrAddrTrackGroupIndex\n               INTEGER,\n\
    \           rptrAddrTrackPortIndex\n               INTEGER,\n           rptrAddrTrackLastSourceAddress\
    \     -- DEPRECATED OBJECT\n               MacAddress,\n           rptrAddrTrackSourceAddrChanges\n\
    \               Counter32,\n           rptrAddrTrackNewLastSrcAddress\n      \
    \         OptMacAddr,\n           rptrAddrTrackCapacity\n               Integer32\n\
    \       }\n   rptrAddrTrackGroupIndex OBJECT-TYPE\n       SYNTAX      INTEGER\
    \ (1..2147483647)\n       MAX-ACCESS  read-only\n       STATUS      current\n\
    \       DESCRIPTION\n               \"This object identifies the group containing\
    \ the\n               port for which this entry contains information.\"\n    \
    \   ::= { rptrAddrTrackEntry 1 }\n   rptrAddrTrackPortIndex OBJECT-TYPE\n    \
    \   SYNTAX      INTEGER (1..2147483647)\n       MAX-ACCESS  read-only\n      \
    \ STATUS      current\n       DESCRIPTION\n               \"This object identifies\
    \ the port within the group\n               for which this entry contains information.\"\
    \n       REFERENCE\n               \"[IEEE 802.3 Mgt], 30.4.3.1.1, aPortID.\"\n\
    \       ::= { rptrAddrTrackEntry 2 }\n   rptrAddrTrackLastSourceAddress OBJECT-TYPE\n\
    \       SYNTAX      MacAddress\n       MAX-ACCESS  read-only\n       STATUS  \
    \    deprecated\n       DESCRIPTION\n               \"********* THIS OBJECT IS\
    \ DEPRECATED **********\n               This object is the SourceAddress of the\
    \ last\n               readable frame (i.e., counted by\n               rptrMonitorPortReadableFrames)\
    \ received by this\n               port.\n               This object has been\
    \ deprecated because its value\n               is undefined when no frames have\
    \ been observed on\n               this port.  The replacement object is\n   \
    \            rptrAddrTrackNewLastSrcAddress.\"\n       REFERENCE\n           \
    \    \"[IEEE 802.3 Mgt], 30.4.3.1.18, aLastSourceAddress.\"\n       ::= { rptrAddrTrackEntry\
    \ 3 }\n   rptrAddrTrackSourceAddrChanges OBJECT-TYPE\n       SYNTAX      Counter32\n\
    \       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \               \"This counter is incremented by one for each time\n         \
    \      that the rptrAddrTrackLastSourceAddress attribute\n               for this\
    \ port has changed.\n               This may indicate whether a link is connected\
    \ to a\n               single DTE or another multi-user segment.\n           \
    \    A discontinuity may occur in the value when the\n               value of\
    \ object rptrMonitorPortLastChange changes.\n               The approximate minimum\
    \ time for rollover of this\n               counter is 81 hours in a 10Mb/s repeater.\"\
    \n       REFERENCE\n               \"[IEEE 802.3 Mgt], 30.4.3.1.19, aSourceAddressChanges.\"\
    \n       ::= { rptrAddrTrackEntry 4 }\n   rptrAddrTrackNewLastSrcAddress OBJECT-TYPE\n\
    \       SYNTAX      OptMacAddr\n       MAX-ACCESS  read-only\n       STATUS  \
    \    current\n       DESCRIPTION\n               \"This object is the SourceAddress\
    \ of the last\n               readable frame (i.e., counted by\n             \
    \  rptrMonitorPortReadableFrames) received by this\n               port.  If no\
    \ frames have been received by this\n               port since the agent began\
    \ monitoring the port\n               activity, the agent shall return a string\
    \ of\n               length zero.\"\n       REFERENCE\n               \"[IEEE\
    \ 802.3 Mgt], 30.4.3.1.18, aLastSourceAddress.\"\n       ::= { rptrAddrTrackEntry\
    \ 5 }\n   rptrAddrTrackCapacity OBJECT-TYPE\n       SYNTAX      Integer32\n  \
    \     MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \               \"The maximum number of addresses that can be\n              \
    \ detected on this port. This value indicates\n               to the maximum \
    \ number of entries in the\n               rptrExtAddrTrackTable relative to this\
    \ port.\n               If this object has the value of 1, the agent\n       \
    \        implements only the LastSourceAddress mechanism\n               described\
    \ by RFC 1368 or RFC 1516.\"\n       ::= { rptrAddrTrackEntry 6 }\n   -- Table\
    \ for multiple addresses per port\n   rptrExtAddrTrackTable OBJECT-TYPE\n    \
    \   SYNTAX      SEQUENCE OF RptrExtAddrTrackEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n               \"A table to extend\
    \ the address tracking table (i.e.,\n               rptrAddrTrackTable) with a\
    \ list of source MAC\n               addresses that were recently received on\
    \ each port.\n               The number of ports is the same as the number\n \
    \              of entries in table rptrPortTable. The number of\n            \
    \   entries in this table depends on the agent/repeater\n               implementation\
    \ and the number of different\n               addresses received on each port.\n\
    \               The first entry for each port contains\n               the same\
    \ MAC address that is given by the\n               rptrAddrTrackNewLastSrcAddress\
    \ for that port.\n               Entries in this table for a particular port are\n\
    \               retained when that port is switched from one\n               repeater\
    \ to another.\n               The ordering of MAC addresses listed for a\n   \
    \            particular port is implementation dependent.\"\n       ::= { rptrAddrTrackPortInfo\
    \ 2 }\n   rptrExtAddrTrackEntry OBJECT-TYPE\n       SYNTAX      RptrExtAddrTrackEntry\n\
    \       MAX-ACCESS  not-accessible\n       STATUS      current\n       DESCRIPTION\n\
    \               \"A row in the table of extended address tracking\n          \
    \     information for ports. Entries can not be directly\n               created\
    \ or deleted via SNMP operations.\"\n       INDEX       { rptrAddrTrackGroupIndex,\n\
    \                     rptrAddrTrackPortIndex,\n                     rptrExtAddrTrackMacIndex\
    \ }\n       ::= { rptrExtAddrTrackTable 1 }\n   RptrExtAddrTrackEntry ::= SEQUENCE\
    \ {\n       rptrExtAddrTrackMacIndex Integer32,\n       rptrExtAddrTrackSourceAddress\
    \ MacAddress\n       }\n   rptrExtAddrTrackMacIndex OBJECT-TYPE\n       SYNTAX\
    \      Integer32 (1..2147483647)\n       MAX-ACCESS  read-only\n       STATUS\
    \      current\n       DESCRIPTION\n               \"The index of a source MAC\
    \ address seen on\n               the port.\n               The ordering of MAC\
    \ addresses listed for a\n               particular port is implementation dependent.\n\
    \               There is no implied relationship between a\n               particular\
    \ index and a particular MAC\n               address.  The index for a particular\
    \ MAC\n               address may change without notice.\"\n       ::= { rptrExtAddrTrackEntry\
    \ 1 }\n   rptrExtAddrTrackSourceAddress OBJECT-TYPE\n       SYNTAX      MacAddress\n\
    \       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \               \"The source MAC address from a readable frame\n             \
    \  (i.e., counted by rptrMonitorPortReadableFrames)\n               recently received\
    \ by the port.\"\n       REFERENCE\n               \"[IEEE 802.3 Mgt], 30.4.3.1.18,\
    \ aLastSourceAddress.\"\n       ::= { rptrExtAddrTrackEntry 2 }\n   -- The Repeater\
    \ Top \"N\" Port Group\n   -- The Repeater Top N Port group is used to prepare\
    \ reports that\n   -- describe a list of ports ordered by one of the statistics\
    \ in the\n   -- Repeater Monitor Port Table.  The statistic chosen by the\n  \
    \ -- management station is sampled over a management\n   -- station-specified\
    \ time interval, making the report rate based.\n   -- The management station also\
    \ specifies the number of ports that\n   -- are reported.\n   --\n   -- The rptrTopNPortControlTable\
    \ is used to initiate the generation\n   -- of a report.  The management station\
    \ may select the parameters\n   -- of such a report, such as which repeater, which\
    \ statistic, how\n   -- many ports, and the start & stop times of the sampling.\
    \  When\n   -- the report is prepared, entries are created in the\n   -- rptrTopNPortTable\
    \ associated with the relevent\n   -- rptrTopNControlEntry.  These entries are\
    \ static for\n   -- each report after it has been prepared.\n   -- Note that counter\
    \ discontinuities may appear in some\n   -- implementations if ports' assignment\
    \ to repeaters changes\n   -- during the collection of data for a Top \"N\" report.\n\
    \   -- A management application could read the corresponding\n   -- rptrMonitorPortLastChange\
    \ timestamp in order to check\n   -- whether a discontinuity occurred.\n   rptrTopNPortControlTable\
    \ OBJECT-TYPE\n       SYNTAX      SEQUENCE OF RptrTopNPortControlEntry\n     \
    \  MAX-ACCESS  not-accessible\n       STATUS      current\n       DESCRIPTION\n\
    \           \"A table of control records for reports on the top `N'\n        \
    \   ports for the rate of a selected counter. The number\n           of entries\
    \ depends on the configuration of the agent.\n           The maximum number of\
    \ entries is implementation\n           dependent.\"\n       ::= { rptrTopNPortInfo\
    \ 1 }\n   rptrTopNPortControlEntry OBJECT-TYPE\n       SYNTAX      RptrTopNPortControlEntry\n\
    \       MAX-ACCESS  not-accessible\n       STATUS      current\n       DESCRIPTION\n\
    \               \"A set of parameters that control the creation of a\n       \
    \        report of the top N ports according to several metrics.\"\n       INDEX\
    \    { rptrTopNPortControlIndex }\n       ::= { rptrTopNPortControlTable 1 }\n\
    \   RptrTopNPortControlEntry ::= SEQUENCE {\n       rptrTopNPortControlIndex\n\
    \           Integer32,\n       rptrTopNPortRepeaterId\n           Integer32,\n\
    \       rptrTopNPortRateBase\n           INTEGER,\n       rptrTopNPortTimeRemaining\n\
    \           Integer32,\n       rptrTopNPortDuration\n           Integer32,\n \
    \      rptrTopNPortRequestedSize\n           Integer32,\n       rptrTopNPortGrantedSize\n\
    \           Integer32,\n       rptrTopNPortStartTime\n           TimeStamp,\n\
    \       rptrTopNPortOwner\n           OwnerString,\n       rptrTopNPortRowStatus\n\
    \           RowStatus\n   }\n   rptrTopNPortControlIndex OBJECT-TYPE\n       SYNTAX\
    \      Integer32 (1 .. 65535)\n       MAX-ACCESS  read-only\n       STATUS   \
    \   current\n       DESCRIPTION\n               \"An index that uniquely identifies\
    \ an entry in the\n               rptrTopNPortControl table.  Each such entry\
    \ defines\n               one top N report prepared for a repeater or system.\"\
    \n       ::= { rptrTopNPortControlEntry 1 }\n   rptrTopNPortRepeaterId OBJECT-TYPE\n\
    \       SYNTAX      Integer32 (0..2147483647)\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n               \"Identifies the\
    \ repeater for which a top N report will\n               be prepared (see rptrInfoId).\
    \  If the value of this\n               object is positive, only ports assigned\
    \ to this repeater\n               will be used to form the list in which to order\
    \ the\n               Top N table.  If this value is zero, all ports will be\n\
    \               eligible for inclusion on the list.\n               The value\
    \ of this object may not be modified if the\n               associated rptrTopNPortRowStatus\
    \ object is equal to\n               active(1).\n               If, for a particular\
    \ row in this table, the repeater\n               specified by the value of this\
    \ object goes away (is\n               removed from the rptrInfoTable) while the\
    \ associated\n               rptrTopNPortRowStatus object is equal to active(1),\n\
    \               the row in this table is preserved by the agent but\n        \
    \       the value of rptrTopNPortRowStatus is changed to\n               notInService(2),\
    \ and the agent may time out the row\n               if appropriate.  If the specified\
    \ repeater comes\n               back (reappears in the rptrInfoTable) before\
    \ the row\n               has been timed out, the management station must set\n\
    \               the value of the rptrTopNPortRowStatus object back\n         \
    \      to active(1) if desired (the agent doesn't do this\n               automatically).\"\
    \n       ::= { rptrTopNPortControlEntry 2 }\n   rptrTopNPortRateBase OBJECT-TYPE\n\
    \       SYNTAX      INTEGER  {\n                     readableFrames(1),\n    \
    \                 readableOctets(2),\n                     fcsErrors(3),\n   \
    \                  alignmentErrors(4),\n                     frameTooLongs(5),\n\
    \                     shortEvents(6),\n                     runts(7),\n      \
    \               collisions(8),\n                     lateEvents(9),\n        \
    \             veryLongEvents(10),\n                     dataRateMismatches(11),\n\
    \                     autoPartitions(12),\n                     totalErrors(13),\n\
    \                     isolates(14),\n                     symbolErrors(15)\n \
    \                  }\n       MAX-ACCESS  read-create\n       STATUS      current\n\
    \       DESCRIPTION\n               \"The monitored variable, which the rptrTopNPortRate\n\
    \               variable is based upon.\n               The value of this object\
    \ may not be modified if\n               the associated rptrTopNPortRowStatus\
    \ object has\n               a value of active(1).\"\n       ::= { rptrTopNPortControlEntry\
    \ 3 }\n   rptrTopNPortTimeRemaining OBJECT-TYPE\n       SYNTAX      Integer32\
    \ (0..2147483647)\n       MAX-ACCESS  read-create\n       STATUS      current\n\
    \       DESCRIPTION\n               \"The number of seconds left in the report\n\
    \               currently being collected.  When this object\n               is\
    \ modified by the management station, a new\n               collection is started,\
    \ possibly aborting a\n               currently running report.  The new value\
    \ is\n               used as the requested duration of this report,\n        \
    \       which is loaded into the associated\n               rptrTopNPortDuration\
    \ object.\n               When this object is set to a non-zero value,\n     \
    \          any associated rptrTopNPortEntries shall be\n               made inaccessible\
    \ by the agent.  While the value\n               of this object is non-zero, it\
    \ decrements by one\n               per second until it reaches zero.  During\
    \ this\n               time, all associated rptrTopNPortEntries shall\n      \
    \         remain inaccessible.  At the time that this object\n               decrements\
    \ to zero, the report is made accessible\n               in the rptrTopNPortTable.\
    \  Thus, the rptrTopNPort\n               table needs to be created only at the\
    \ end of the\n               collection interval.\n               If the value\
    \ of this object is set to zero\n               while the associated report is\
    \ running, the\n               running report is aborted and no associated\n \
    \              rptrTopNPortEntries are created.\"\n       DEFVAL { 0 }\n     \
    \  ::= { rptrTopNPortControlEntry 4 }\n   rptrTopNPortDuration OBJECT-TYPE\n \
    \      SYNTAX      Integer32 (0..2147483647)\n       MAX-ACCESS  read-only\n \
    \      STATUS      current\n       DESCRIPTION\n               \"The number of\
    \ seconds that this report has\n               collected during the last sampling\
    \ interval,\n               or if this report is currently being collected,\n\
    \               the number of seconds that this report is being\n            \
    \   collected during this sampling interval.\n               When the associated\
    \ rptrTopNPortTimeRemaining\n               object is set, this object shall be\
    \ set by the\n               agent to the same value and shall not be modified\n\
    \               until the next time the rptrTopNPortTimeRemaining\n          \
    \     is set.\n               This value shall be zero if no reports have been\n\
    \               requested for this rptrTopNPortControlEntry.\"\n        ::= {\
    \ rptrTopNPortControlEntry 5 }\n   rptrTopNPortRequestedSize OBJECT-TYPE\n   \
    \    SYNTAX      Integer32\n       MAX-ACCESS  read-create\n       STATUS    \
    \  current\n       DESCRIPTION\n               \"The maximum number of repeater\
    \ ports requested\n               for the Top N Table.\n               When this\
    \ object is created or modified, the\n               agent should set rptrTopNPortGrantedSize\
    \ as close\n               to this object as is possible for the particular\n\
    \               implementation and available resources.\"\n       DEFVAL { 10\
    \ }\n       ::= { rptrTopNPortControlEntry 6 }\n   rptrTopNPortGrantedSize OBJECT-TYPE\n\
    \       SYNTAX      Integer32 (0..65535)\n       MAX-ACCESS  read-only\n     \
    \  STATUS      current\n       DESCRIPTION\n               \"The maximum number\
    \ of repeater ports in the\n               top N table.\n               When the\
    \ associated rptrTopNPortRequestedSize object is\n               created or modified,\
    \ the agent should set this object as\n               closely to the requested\
    \ value as is possible for the\n               particular implementation and available\
    \ resources.  The\n               agent must not lower this value except as a\
    \ result of a\n               set to the associated rptrTopNPortRequestedSize\
    \ object.\"\n       ::= { rptrTopNPortControlEntry 7 }\n   rptrTopNPortStartTime\
    \ OBJECT-TYPE\n       SYNTAX      TimeStamp\n       MAX-ACCESS  read-only\n  \
    \     STATUS      current\n       DESCRIPTION\n               \"The value of sysUpTime\
    \ when this top N report was\n               last started.  In other words, this\
    \ is the time that\n               the associated rptrTopNPortTimeRemaining object\
    \ was\n               modified to start the requested report.\n              \
    \ If the report has not yet been started, the value\n               of this object\
    \ is zero.\"\n       ::= { rptrTopNPortControlEntry 8 }\n   rptrTopNPortOwner\
    \ OBJECT-TYPE\n       SYNTAX      OwnerString\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n               \"The entity that\
    \ configured this entry and is\n               using the resources assigned to\
    \ it.\"\n       ::= { rptrTopNPortControlEntry 9 }\n   rptrTopNPortRowStatus OBJECT-TYPE\n\
    \       SYNTAX      RowStatus\n       MAX-ACCESS  read-create\n       STATUS \
    \     current\n       DESCRIPTION\n              \"The status of this row.\n \
    \             If the value of this object is not equal to\n              active(1),\
    \ all associated entries in the\n              rptrTopNPortTable shall be deleted\
    \ by the\n              agent.\"\n       ::= { rptrTopNPortControlEntry 10 }\n\
    \   -- Top \"N\" reports\n   rptrTopNPortTable OBJECT-TYPE\n       SYNTAX    \
    \  SEQUENCE OF RptrTopNPortEntry\n       MAX-ACCESS  not-accessible\n       STATUS\
    \      current\n       DESCRIPTION\n               \"A table of reports for the\
    \ top `N' ports based on\n               setting of associated control table entries.\
    \ The\n               maximum number of entries depends on the number\n      \
    \         of entries in table rptrTopNPortControlTable and\n               the\
    \ value of object rptrTopNPortGrantedSize for\n               each entry.\n  \
    \             For each entry in the rptrTopNPortControlTable,\n              \
    \ repeater ports with the highest value of\n               rptrTopNPortRate shall\
    \ be placed in this table\n               in decreasing order of that rate until\
    \ there is\n               no more room or until there are no more ports.\"\n\
    \       ::= { rptrTopNPortInfo 2 }\n   rptrTopNPortEntry OBJECT-TYPE\n       SYNTAX\
    \      RptrTopNPortEntry\n       MAX-ACCESS  not-accessible\n       STATUS   \
    \   current\n       DESCRIPTION\n               \"A set of statistics for a repeater\
    \ port that is\n               part of a top N report.\"\n       INDEX    { rptrTopNPortControlIndex,\n\
    \                  rptrTopNPortIndex }\n       ::= { rptrTopNPortTable 1 }\n \
    \  RptrTopNPortEntry ::= SEQUENCE {\n       rptrTopNPortIndex\n           Integer32,\n\
    \       rptrTopNPortGroupIndex\n           Integer32,\n       rptrTopNPortPortIndex\n\
    \           Integer32,\n       rptrTopNPortRate\n           Gauge32\n   }\n  \
    \ rptrTopNPortIndex OBJECT-TYPE\n       SYNTAX      Integer32 (1..65535)\n   \
    \    MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n \
    \              \"An index that uniquely identifies an entry in\n             \
    \  the rptrTopNPort table among those in the same\n               report.  This\
    \ index is between 1 and N, where N\n               is the number of entries in\
    \ this report.  Increasing\n               values of rptrTopNPortIndex shall be\
    \ assigned to\n               entries with decreasing values of rptrTopNPortRate\n\
    \               until index N is assigned to the entry with the\n            \
    \   lowest value of rptrTopNPortRate or there are no\n               more rptrTopNPortEntries.\n\
    \               No ports are included in a report where their\n              \
    \ value of rptrTopNPortRate would be zero.\"\n       ::= { rptrTopNPortEntry 1\
    \ }\n   rptrTopNPortGroupIndex OBJECT-TYPE\n       SYNTAX      Integer32  (1..2147483647)\n\
    \       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \               \"This object identifes the group containing\n               the\
    \ port for this entry. (See also object\n               type rptrGroupIndex.)\"\
    \n       ::= { rptrTopNPortEntry 2 }\n   rptrTopNPortPortIndex OBJECT-TYPE\n \
    \      SYNTAX      Integer32 (1..2147483647)\n       MAX-ACCESS  read-only\n \
    \      STATUS      current\n       DESCRIPTION\n           \"The index of the\
    \ repeater port.\n           (See object type rptrPortIndex.)\"\n       ::= {\
    \ rptrTopNPortEntry 3 }\n   rptrTopNPortRate OBJECT-TYPE\n       SYNTAX      Gauge32\n\
    \       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \               \"The amount of change in the selected variable\n            \
    \   during this sampling interval for the identified\n               port.  The\
    \ selected variable is that port's\n               instance of the object selected\
    \ by\n               rptrTopNPortRateBase.\"\n       ::= { rptrTopNPortEntry 4\
    \ }\n   -- Notifications for use by Repeaters\n   rptrHealth NOTIFICATION-TYPE\n\
    \       OBJECTS     { rptrOperStatus }\n       STATUS      deprecated\n      \
    \ DESCRIPTION\n               \"********* THIS OBJECT IS DEPRECATED **********\n\
    \               In a system containing a single managed repeater,\n          \
    \     the rptrHealth notification conveys information\n               related\
    \ to the operational status of the repeater.\n               It is sent either\
    \ when the value of\n               rptrOperStatus changes, or upon completion\
    \ of a\n               non-disruptive test.\n               The rptrHealth notification\
    \ must contain the\n               rptrOperStatus object.  The agent may optionally\n\
    \               include the rptrHealthText object in the varBind\n           \
    \    list.  See the rptrOperStatus and rptrHealthText\n               objects\
    \ for descriptions of the information that\n               is sent.\n        \
    \       The agent must throttle the generation of\n               consecutive\
    \ rptrHealth traps so that there is at\n               least a five-second gap\
    \ between traps of this\n               type.  When traps are throttled, they\
    \ are dropped,\n               not queued for sending at a future time.  (Note\n\
    \               that 'generating' a trap means sending to all\n              \
    \ configured recipients.)\"\n       REFERENCE\n               \"[IEEE 802.3 Mgt],\
    \ 30.4.1.3.1, nRepeaterHealth\n               notification.\"\n       ::= { snmpDot3RptrMgt\
    \ 0 1 }\n   rptrGroupChange NOTIFICATION-TYPE\n       OBJECTS     { rptrGroupIndex\
    \ }\n       STATUS      deprecated\n       DESCRIPTION\n               \"*********\
    \ THIS OBJECT IS DEPRECATED **********\n               In a system containing\
    \ a single managed repeater,\n               this notification is sent when a\
    \ change occurs in the\n               group structure of the repeater.  This\
    \ occurs only\n               when a group is logically or physically removed\n\
    \               from or added to a repeater.  The varBind list\n             \
    \  contains the identifier of the group that was\n               removed or added.\n\
    \               The agent must throttle the generation of\n               consecutive\
    \ rptrGroupChange traps for the same\n               group so that there is at\
    \ least a five-second gap\n               between traps of this type.  When traps\
    \ are\n               throttled, they are dropped, not queued for\n          \
    \     sending at a future time.  (Note that 'generating'\n               a trap\
    \ means sending to all configured\n               recipients.)\"\n       REFERENCE\n\
    \               \"[IEEE 802.3 Mgt], 30.4.1.3.3, nGroupMapChange\n            \
    \   notification.\"\n       ::= { snmpDot3RptrMgt 0 2 }\n   rptrResetEvent NOTIFICATION-TYPE\n\
    \       OBJECTS     { rptrOperStatus }\n       STATUS      deprecated\n      \
    \ DESCRIPTION\n               \"********* THIS OBJECT IS DEPRECATED **********\n\
    \               In a system containing a single managed repeater-unit,\n     \
    \          the rptrResetEvent notification conveys information\n             \
    \  related to the operational status of the repeater.\n               This trap\
    \ is sent on completion of a repeater\n               reset action.  A repeater\
    \ reset action is defined\n               as an a transition to the START state\
    \ of Fig 9-2\n               in section 9 [IEEE 802.3 Std], when triggered by\
    \ a\n               management command (e.g., an SNMP Set on the\n           \
    \    rptrReset object).\n               The agent must throttle the generation\
    \ of\n               consecutive rptrResetEvent traps so that there is\n     \
    \          at least a five-second gap between traps of this\n               type.\
    \  When traps are throttled, they are dropped,\n               not queued for\
    \ sending at a future time.  (Note\n               that 'generating' a trap means\
    \ sending to all\n               configured recipients.)\n               The rptrResetEvent\
    \ trap is not sent when the agent\n               restarts and sends an SNMP coldStart\
    \ or warmStart\n               trap.  However, it is recommended that a repeater\n\
    \               agent send the rptrOperStatus object as an\n               optional\
    \ object with its coldStart and warmStart\n               trap PDUs.\n       \
    \        The rptrOperStatus object must be included in the\n               varbind\
    \ list sent with this trap.  The agent may\n               optionally include\
    \ the rptrHealthText object as\n               well.\"\n       REFERENCE\n   \
    \            \"[IEEE 802.3 Mgt], 30.4.1.3.2, nRepeaterReset\n               notification.\"\
    \n       ::= { snmpDot3RptrMgt 0 3 }\n   -- Notifications for repeaters in a multiple-repeater\
    \ implementation.\n   -- An implementation may send either the single-repeater\
    \ OR\n   -- multiple-repeater version of these notifications (1 or 4; 2 or 5)\n\
    \   -- but not both.\n   rptrInfoHealth NOTIFICATION-TYPE\n       OBJECTS    \
    \ { rptrInfoOperStatus }\n       STATUS      current\n       DESCRIPTION\n   \
    \            \"In a system containing multiple managed repeaters,\n          \
    \     the rptrInfoHealth notification conveys information\n               related\
    \ to the operational status of a repeater.\n               It is sent either when\
    \ the value of rptrInfoOperStatus\n               changes, or upon completion\
    \ of a non-disruptive test.\n               The agent must throttle the generation\
    \ of\n               consecutive rptrInfoHealth notifications for\n          \
    \     the same repeater so that there is at least\n               a five-second\
    \ gap between notifications of this type.\n               When notifications are\
    \ throttled, they are dropped,\n               not queued for sending at a future\
    \ time.  (Note\n               that 'generating' a notification means sending\n\
    \               to all configured recipients.)\"\n       REFERENCE\n         \
    \      \"[IEEE 802.3 Mgt], 30.4.1.3.1, nRepeaterHealth\n               notification.\"\
    \n       ::= { snmpDot3RptrMgt 0 4 }\n   rptrInfoResetEvent NOTIFICATION-TYPE\n\
    \       OBJECTS     { rptrInfoOperStatus }\n       STATUS      current\n     \
    \  DESCRIPTION\n               \"In a system containing multiple managed\n   \
    \            repeaters, the rptrInfoResetEvent notification\n               conveys\
    \ information related to the operational\n               status of a repeater.\
    \ This notification is sent\n               on completion of a repeater reset\
    \ action.  A\n               repeater reset action is defined as a transition\n\
    \               to the START state of Fig 9-2 in section 9 of\n              \
    \ [IEEE 802.3 Std], when triggered by a management\n               command (e.g.,\
    \ an SNMP Set on the rptrInfoReset\n               object).\n               The\
    \ agent must throttle the generation of\n               consecutive rptrInfoResetEvent\
    \ notifications for\n               a single repeater so that there is at least\n\
    \               a five-second gap between notifications of\n               this\
    \ type.  When notifications are throttled,\n               they are dropped, not\
    \ queued for sending at\n               a future time.  (Note that 'generating'\
    \ a\n               notification means sending to all configured\n           \
    \    recipients.)\n               The rptrInfoResetEvent is not sent when the\n\
    \               agent restarts and sends an SNMP coldStart or\n              \
    \ warmStart trap.  However, it is recommended that\n               a repeater\
    \ agent send the rptrInfoOperStatus\n               object as an optional object\
    \ with its coldStart\n               and warmStart trap PDUs.\"\n       REFERENCE\n\
    \               \"[IEEE 802.3 Mgt], 30.4.1.3.2, nRepeaterReset\n             \
    \  notification.\"\n       ::= { snmpDot3RptrMgt 0 5 }\n   -- Conformance information\n\
    \   snmpRptrModConf\n           OBJECT IDENTIFIER ::= { snmpRptrMod 1 }\n    \
    \ snmpRptrModCompls\n           OBJECT IDENTIFIER ::= { snmpRptrModConf 1 }\n\
    \     snmpRptrModObjGrps\n           OBJECT IDENTIFIER ::= { snmpRptrModConf 2\
    \ }\n     snmpRptrModNotGrps\n           OBJECT IDENTIFIER ::= { snmpRptrModConf\
    \ 3 }\n   -- Object groups\n   snmpRptrGrpBasic1516 OBJECT-GROUP\n       OBJECTS\
    \     { rptrGroupCapacity,\n                     rptrOperStatus,\n           \
    \          rptrHealthText,\n                     rptrReset,\n                \
    \     rptrNonDisruptTest,\n                     rptrTotalPartitionedPorts,\n \
    \                    rptrGroupIndex,\n                     rptrGroupDescr,\n \
    \                    rptrGroupObjectID,\n                     rptrGroupOperStatus,\n\
    \                     rptrGroupLastOperStatusChange,\n                     rptrGroupPortCapacity,\n\
    \                     rptrPortGroupIndex,\n                     rptrPortIndex,\n\
    \                     rptrPortAdminStatus,\n                     rptrPortAutoPartitionState,\n\
    \                     rptrPortOperStatus }\n       STATUS      deprecated\n  \
    \     DESCRIPTION\n           \"********* THIS GROUP IS DEPRECATED **********\n\
    \           Basic group from RFCs 1368 and 1516.\n           NOTE: this object\
    \ group is DEPRECATED and replaced\n                 with snmpRptrGrpBasic.\"\n\
    \       ::= { snmpRptrModObjGrps 1 }\n   snmpRptrGrpMonitor1516 OBJECT-GROUP\n\
    \       OBJECTS     { rptrMonitorTransmitCollisions,\n                     rptrMonitorGroupIndex,\n\
    \                     rptrMonitorGroupTotalFrames,\n                     rptrMonitorGroupTotalOctets,\n\
    \                     rptrMonitorGroupTotalErrors,\n                     rptrMonitorPortGroupIndex,\n\
    \                     rptrMonitorPortIndex,\n                     rptrMonitorPortReadableFrames,\n\
    \                     rptrMonitorPortReadableOctets,\n                     rptrMonitorPortFCSErrors,\n\
    \                     rptrMonitorPortAlignmentErrors,\n                     rptrMonitorPortFrameTooLongs,\n\
    \                     rptrMonitorPortShortEvents,\n                     rptrMonitorPortRunts,\n\
    \                     rptrMonitorPortCollisions,\n                     rptrMonitorPortLateEvents,\n\
    \                     rptrMonitorPortVeryLongEvents,\n                     rptrMonitorPortDataRateMismatches,\n\
    \                     rptrMonitorPortAutoPartitions,\n                     rptrMonitorPortTotalErrors\
    \ }\n       STATUS      deprecated\n       DESCRIPTION\n           \"*********\
    \ THIS GROUP IS DEPRECATED **********\n           Monitor group from RFCs 1368\
    \ and 1516.\n           NOTE: this object group is DEPRECATED and replaced\n \
    \                with snmpRptrGrpMonitor.\"\n       ::= { snmpRptrModObjGrps 2\
    \ }\n   snmpRptrGrpAddrTrack1368 OBJECT-GROUP\n       OBJECTS     { rptrAddrTrackGroupIndex,\n\
    \                     rptrAddrTrackPortIndex,\n                     rptrAddrTrackLastSourceAddress,\n\
    \                     rptrAddrTrackSourceAddrChanges }\n       STATUS      obsolete\n\
    \       DESCRIPTION\n           \"Address tracking group from RFC 1368.\n    \
    \       NOTE: this object group is OBSOLETE and replaced\n                 with\
    \ snmpRptrGrpAddrTrack1516.\"\n       ::= { snmpRptrModObjGrps 3 }\n   snmpRptrGrpAddrTrack1516\
    \ OBJECT-GROUP\n       OBJECTS     { rptrAddrTrackGroupIndex,\n              \
    \       rptrAddrTrackPortIndex,\n                     rptrAddrTrackLastSourceAddress,\n\
    \                     rptrAddrTrackSourceAddrChanges,\n                     rptrAddrTrackNewLastSrcAddress\
    \ }\n       STATUS      deprecated\n       DESCRIPTION\n           \"*********\
    \ THIS GROUP IS DEPRECATED **********\n           Address tracking group from\
    \ RFC 1516.\n           NOTE: this object group is DEPRECATED and\n          \
    \       replaced with snmpRptrGrpAddrTrack.\"\n       ::= { snmpRptrModObjGrps\
    \ 4 }\n   snmpRptrGrpBasic OBJECT-GROUP\n       OBJECTS     { rptrGroupIndex,\n\
    \                     rptrGroupObjectID,\n                     rptrGroupOperStatus,\n\
    \                     rptrGroupPortCapacity,\n                     rptrPortGroupIndex,\n\
    \                     rptrPortIndex,\n                     rptrPortAdminStatus,\n\
    \                     rptrPortAutoPartitionState,\n                     rptrPortOperStatus,\n\
    \                     rptrPortRptrId,\n                     rptrInfoId,\n    \
    \                 rptrInfoRptrType,\n                     rptrInfoOperStatus,\n\
    \                     rptrInfoReset,\n                     rptrInfoPartitionedPorts,\n\
    \                     rptrInfoLastChange }\n       STATUS      current\n     \
    \  DESCRIPTION\n           \"Basic group for a system with one or more\n     \
    \      repeater-units in multi-segment (post-RFC 1516)\n           version of\
    \ the MIB module.\"\n       ::= { snmpRptrModObjGrps 5 }\n   snmpRptrGrpMonitor\
    \ OBJECT-GROUP\n       OBJECTS     { rptrMonitorPortGroupIndex,\n            \
    \         rptrMonitorPortIndex,\n                     rptrMonitorPortReadableFrames,\n\
    \                     rptrMonitorPortReadableOctets,\n                     rptrMonitorPortFCSErrors,\n\
    \                     rptrMonitorPortAlignmentErrors,\n                     rptrMonitorPortFrameTooLongs,\n\
    \                     rptrMonitorPortShortEvents,\n                     rptrMonitorPortRunts,\n\
    \                     rptrMonitorPortCollisions,\n                     rptrMonitorPortLateEvents,\n\
    \                     rptrMonitorPortVeryLongEvents,\n                     rptrMonitorPortDataRateMismatches,\n\
    \                     rptrMonitorPortAutoPartitions,\n                     rptrMonitorPortTotalErrors,\n\
    \                     rptrMonitorPortLastChange,\n                     rptrMonTxCollisions,\n\
    \                     rptrMonTotalFrames,\n                     rptrMonTotalErrors,\n\
    \                     rptrMonTotalOctets }\n       STATUS      current\n     \
    \  DESCRIPTION\n           \"Monitor group for a system with one or more\n   \
    \        repeater-units in multi-segment (post-RFC 1516)\n           version of\
    \ the MIB module.\"\n       ::= { snmpRptrModObjGrps 6 }\n   snmpRptrGrpMonitor100\
    \ OBJECT-GROUP\n       OBJECTS     { rptrMonitorPortIsolates,\n              \
    \       rptrMonitorPortSymbolErrors,\n                     rptrMonitorPortUpper32Octets,\n\
    \                     rptrMonUpper32TotalOctets }\n       STATUS      current\n\
    \       DESCRIPTION\n           \"Monitor group for 100Mb/s ports and repeaters\n\
    \           in a system with one or more repeater-units in\n           multi-segment\
    \ (post-RFC 1516) version of the MIB\n           module.  Systems which support\
    \ Counter64 should\n           also implement snmpRptrGrpMonitor100w64.\"\n  \
    \     ::= { snmpRptrModObjGrps 7 }\n   snmpRptrGrpMonitor100w64 OBJECT-GROUP\n\
    \       OBJECTS     { rptrMonitorPortHCReadableOctets,\n                     rptrMonHCTotalOctets\
    \ }\n       STATUS      current\n       DESCRIPTION\n           \"Monitor group\
    \ for 100Mb/s ports and repeaters in a\n           system with one or more repeater-units\
    \ and support\n           for Counter64.\"\n       ::= { snmpRptrModObjGrps 8\
    \ }\n   snmpRptrGrpAddrTrack OBJECT-GROUP\n       OBJECTS     { rptrAddrTrackGroupIndex,\n\
    \                     rptrAddrTrackPortIndex,\n                     rptrAddrTrackSourceAddrChanges,\n\
    \                     rptrAddrTrackNewLastSrcAddress,\n                     rptrAddrTrackCapacity\
    \ }\n       STATUS      current\n       DESCRIPTION\n           \"Passive address\
    \ tracking group for post-RFC 1516\n           version of the MIB module.\"\n\
    \       ::= { snmpRptrModObjGrps 9 }\n   snmpRptrGrpExtAddrTrack OBJECT-GROUP\n\
    \       OBJECTS     { rptrExtAddrTrackMacIndex,\n                     rptrExtAddrTrackSourceAddress\
    \ }\n       STATUS      current\n       DESCRIPTION\n           \"Extended passive\
    \ address tracking group for\n           a system with one or more repeater-units\
    \ in\n           post-RFC 1516 version of the MIB module.\"\n       ::= { snmpRptrModObjGrps\
    \ 10 }\n   snmpRptrGrpRptrAddrSearch OBJECT-GROUP\n       OBJECTS     { rptrAddrSearchLock,\n\
    \                     rptrAddrSearchStatus,\n                     rptrAddrSearchAddress,\n\
    \                     rptrAddrSearchState,\n                     rptrAddrSearchGroup,\n\
    \                     rptrAddrSearchPort,\n                     rptrAddrSearchOwner\
    \ }\n       STATUS      current\n       DESCRIPTION\n           \"Active MAC address\
    \ search group and topology\n           mapping support for repeaters.\"\n   \
    \    ::= { snmpRptrModObjGrps 11 }\n   snmpRptrGrpTopNPort OBJECT-GROUP\n    \
    \   OBJECTS     { rptrTopNPortControlIndex,\n                     rptrTopNPortRepeaterId,\n\
    \                     rptrTopNPortRateBase,\n                     rptrTopNPortTimeRemaining,\n\
    \                     rptrTopNPortDuration,\n                     rptrTopNPortRequestedSize,\n\
    \                     rptrTopNPortGrantedSize,\n                     rptrTopNPortStartTime,\n\
    \                     rptrTopNPortOwner,\n                     rptrTopNPortRowStatus,\n\
    \                     rptrTopNPortIndex,\n                     rptrTopNPortGroupIndex,\n\
    \                     rptrTopNPortPortIndex,\n                     rptrTopNPortRate\
    \ }\n       STATUS      current\n       DESCRIPTION\n           \"Top `N' group\
    \ for repeater ports.\"\n       ::= { snmpRptrModObjGrps 12 }\n   -- Compliances\n\
    \   snmpRptrModComplRFC1368 MODULE-COMPLIANCE\n       STATUS      obsolete\n \
    \      DESCRIPTION\n           \"Compliance for RFC 1368.\n           NOTE: this\
    \ module compliance is OBSOLETE and\n                 replaced by snmpRptrModComplRFC1516.\"\
    \n       MODULE -- this module\n           MANDATORY-GROUPS { snmpRptrGrpBasic1516\
    \ }\n           GROUP snmpRptrGrpMonitor1516\n           DESCRIPTION\n       \
    \        \"Implementation of this optional group is\n               recommended\
    \ for systems which have the\n               instrumentation to do performance\
    \ monitoring.\"\n           GROUP snmpRptrGrpAddrTrack1368\n           DESCRIPTION\n\
    \               \"Implementation of this group is\n               recommended\
    \ for systems which have\n               the necessary instrumentation.\"\n  \
    \     ::= { snmpRptrModCompls 1 }\n   snmpRptrModComplRFC1516 MODULE-COMPLIANCE\n\
    \       STATUS      deprecated\n       DESCRIPTION\n           \"********* THIS\
    \ COMPLIANCE IS DEPRECATED **********\n           Compliance for RFC 1516 and\
    \ for backwards\n           compatibility with single-repeater,\n           10Mb/s-only\
    \ implementations.\"\n       MODULE -- this module\n           MANDATORY-GROUPS\
    \ { snmpRptrGrpBasic1516 }\n           GROUP snmpRptrGrpMonitor1516\n        \
    \   DESCRIPTION\n               \"Implementation of this optional group is\n \
    \              recommended for systems which have the\n               instrumentation\
    \ to do performance monitoring.\"\n           GROUP snmpRptrGrpAddrTrack1516\n\
    \           DESCRIPTION\n               \"Implementation of this group is\n  \
    \             recommended for systems which have\n               the necessary\
    \ instrumentation.\"\n       ::= { snmpRptrModCompls 2 }\n   snmpRptrModCompl\
    \ MODULE-COMPLIANCE\n       STATUS      current\n       DESCRIPTION\n        \
    \   \"Compliance for the multi-segment version of the\n           MIB module for\
    \ a system with one or more\n           repeater-units.\"\n       MODULE -- this\
    \ module\n           MANDATORY-GROUPS { snmpRptrGrpBasic,\n                  \
    \            snmpRptrGrpMonitor,\n                              snmpRptrGrpAddrTrack\
    \ }\n           GROUP snmpRptrGrpMonitor100\n           DESCRIPTION\n        \
    \       \"Implementation of this group is\n               mandatory for managed\
    \ systems which\n               contain 100Mb/s repeaters.\"\n           GROUP\
    \ snmpRptrGrpMonitor100w64\n           DESCRIPTION\n               \"Implementation\
    \ of this group is\n               mandatory for managed systems which\n     \
    \          contain 100Mb/s repeaters and which\n               can support Counter64.\"\
    \n           GROUP snmpRptrGrpExtAddrTrack\n           DESCRIPTION\n         \
    \      \"Implementation of this group is\n               recommended for systems\
    \ which have\n               the necessary instrumentation to track\n        \
    \       MAC addresses of multiple DTEs attached\n               to a single repeater\
    \ port.\"\n           GROUP snmpRptrGrpRptrAddrSearch\n           DESCRIPTION\n\
    \               \"Implementation of this group is\n               recommended\
    \ for systems which allow\n               read-write access and which have\n \
    \              the necessary instrumentation to\n               search all incoming\
    \ data streams\n               for a particular MAC address.\"\n           GROUP\
    \ snmpRptrGrpTopNPort\n           DESCRIPTION\n               \"Implementation\
    \ of this group is\n               recommended for systems which have\n      \
    \         the necessary resources to support\n               TopN statistics reporting.\"\
    \n       ::= { snmpRptrModCompls 3 }\n   END\n"
- title: 4.  Topology Mapping
  contents:
  - "4.  Topology Mapping\n   The network mapping algorithm presented below takes\
    \ information\n   available from network devices such as repeaters, bridges, and\n\
    \   switches, and creates a representation of the physical topology of\n   the\
    \ network.\n   Networking devices connect to the network via one or more ports.\n\
    \   Through these ports, the device is capable of hearing network packets\n  \
    \ sent by other devices.  By looking the source address in the packet,\n   and\
    \ identifying which port the packet was heard on, the device can\n   provide information\
    \ to a Network Management System about the location\n   of an address in the network,\
    \ relative to that device.  For devices\n   such as bridges and switches, the\
    \ association of address to port can\n   be retrieved via the forwarding data\
    \ base part of the Bridge MIB.\n   For repeaters, the rptrAddrSearchTable may\
    \ be used to perform the\n   association.\n   Given this information, it would\
    \ be possible for the NMS to create a\n   topology of the network which represents\
    \ the physical relationships\n   of the devices in the networks.  The following\
    \ is an example of how\n   this might be done:\n   Assume the network:\n     \
    \            =============================\n                     |           \
    \ |       |\n                     |            |       |\n                   \
    \ d1           d4      d7\n                   /  \\          |\n             \
    \     /    \\         |\n                d2      d3       d5\n               \
    \                   |\n                                  |\n                 \
    \                d6\n   The discovery process would first determine the existence\
    \ of the\n   network devices and nodes in the network.  In the above example,\
    \ the\n   network devices discovered would be:\n                           d1,d2,d3,d4,d5,d6,d7\n\
    \   From this list of discovered devices, select (arbitrarily or via some\n  \
    \ heuristic) a device as the starting point.  From that device,\n   determine\
    \ where all other devices are located in the network with\n   respect to the selected\
    \ device.\n   For example, if d1 is the selected device, the network in relation\
    \ to\n   d1 would look like:\n                    d1\n                   / | \\\
    \n                  /  |  \\\n                d2  d3   d4,d5,d6,d7\n   So d1 sees\
    \ d2 on one port, d3 on another port, and d4, d5, and d6 on\n   the third port.\
    \  In other words, using the rptrAddrSearchTable (if d1\n   is a repeater) or\
    \ the Forwarding Database (if it is a bridge or a\n   switch), d1 has located\
    \ d2 on one port, d1 has located d3 on another\n   port, and finally, d1 has located\
    \ d4, d5, d6, and d7 on yet another\n   port.\n   After the first step of the\
    \ algorithm is accomplished, the next and\n   final step is a recursive one. \
    \ Go to each of these temporary\n   'segments' (e.g., the segment connecting d1\
    \ and d2, or the segment\n   connecting d1 and d3, or the segment connecting d1,\
    \ d4, d5, d6, and\n   d7) and determine which of these devices really belongs\
    \ in that\n   segment.\n   As new segments are created due to this process, the\
    \ recursive\n   algorithm visits them, and performs the exact same process.\n\
    \   In the example, the segments connecting d1 and d2, and connecting d1\n   and\
    \ d3, require no further scrutiny, since there are only two nodes\n   in those\
    \ segments.  However, the segment connecting d1, d4, d5, d6,\n   and d7 may prove\
    \ to be one or more segments, so we will investigate\n   it.\n   The purpose of\
    \ this step is to determine which devices are really\n   connected to this segment,\
    \ and which are actually connected\n   downstream.  This is done by giving each\
    \ of the child devices in the\n   segment (d4, d5, d6, and d7) a chance to eliminate\
    \ each of the others\n   from the segment.\n   A device eliminates another device\
    \ by showing that it hears the\n   parent device (in this case, d1) on one port,\
    \ and the other device on\n   another port (different from the port on which it\
    \ heard the parent).\n   If this is true, then it must mean that that device is\
    \ _between_ the\n   parent device and the device which is being eliminated.\n\
    \   In the example, we can see that device d4 can eliminate both d5 and\n   d6,\
    \ , but nobody can eliminate d4 and d7, because everybody hears\n   them on the\
    \ same port that they hear the parent device (d1).  So the\n   resulting topology\
    \ looks like:\n                    d1\n                   / | \\\n           \
    \       /  |  \\\n                d2  d3   d4,d7\n                         |\n\
    \                         |\n                       d5,d6\n   Next the algorithm\
    \ visits the next segment, which is the one\n   connecting d4, d5, and d6.  Using\
    \ the process stated above, d5 can\n   eliminate d6, since it hears d4 on a different\
    \ port from where it\n   hears d6.  Finally, the topology looks like:\n      \
    \              d1\n                   / | \\\n                  /  |  \\\n   \
    \             d2  d3   d4,d7\n                         |\n                   \
    \      |\n                         d5\n                         |\n          \
    \               |\n                         d6\n   This is actually the topology\
    \ shown at the beginning of the\n   description.\n   With this information about\
    \ how the network devices are connected, it\n   is a relatively simple extension\
    \ to then place nodes such as\n   workstations and PCs in the network.  This can\
    \ be done by placing the\n   node into a segment, then allowing the network devices\
    \ to show that\n   the node is really not part of that segment.\n   This elimination\
    \ can be done because the devices know what port\n   connects them to the segment\
    \ on which the node is temporarily placed.\n   If they actually hear the node\
    \ on a different port than that which\n   connects the device to the segment,\
    \ then the node must be downstream,\n   and so it is moved onto the downstream\
    \ segment.  Then that segment is\n   evaluated, and so forth.  Eventually, no\
    \ device can show that the\n   node is connected downstream, and so it must be\
    \ attached to that\n   segment.\n   For example, assume the network:\n       \
    \            =============================\n                       |         \
    \   |       |\n                       |            |       |\n               \
    \       d1           d4      d7\n                     /  \\          |\n     \
    \               /    \\         |\n                  d2      d3       d5\n   \
    \                       |         |\n                          |         |\n \
    \                         e1       d6\n   In this network, we are trying to place\
    \ e1 where it belongs.  We\n   begin by placing it arbitrarily into a segment:\n\
    \                ==================================\n                  |     \
    \  |            |       |\n                  |       |            |       |\n\
    \                 e1      d1           d4      d7\n                        / \
    \ \\          |\n                       /    \\         |\n                  \
    \   d2      d3       d5\n                                       |\n          \
    \                             |\n                                      d6\n  \
    \ In the above case, we would give d1, d4, and d7 a chance to show that\n   e1\
    \ is not really on that segment.  d4 and d7 hear e1 on the same port\n   which\
    \ connects them to that segment, so they cannot eliminate e1 from\n   the segment.\
    \  However, d1 will hear e1 on a different port, so we\n   move e1 down onto the\
    \ segment which is connected by that port.  This\n   yields the following:\n \
    \                  =============================\n                       |   \
    \         |       |\n                       |            |       |\n         \
    \             d1           d4      d7\n                     /  \\          |\n\
    \                    /    \\         |\n                  d2      d3,e1    d5\n\
    \                                    |\n                                    |\n\
    \                                   d6\n   Now we give everyone in that segment\
    \ (besides that parent device, d1)\n   a chance to eliminate e1.  Only d3 can\
    \ try, and it succeeds, so we\n   place e1 on segment which is connected by the\
    \ port on which d3 heard\n   e1.  There is no segment there (yet), so we create\
    \ one, and end up\n   with the following:\n                   =============================\n\
    \                       |            |       |\n                       |     \
    \       |       |\n                      d1           d4      d7\n           \
    \          /  \\          |\n                    /    \\         |\n         \
    \         d2      d3       d5\n                          |        |\n        \
    \                  |         |\n                          e1       d6\n   which\
    \ is the correct position.\n"
- title: 5.  Acknowledgements
  contents:
  - "5.  Acknowledgements\n   This document was produced by the IETF Hub MIB Working\
    \ Group, whose\n   efforts were greatly advanced by the contributions of the following\n\
    \   people:\n               Chuck Black\n               John Flick\n         \
    \      Jeff Johnson\n               Leon Leong\n               Mike Lui\n    \
    \           Dave Perkins\n               Geoff Thompson\n               Maurice\
    \ Turcotte\n               Paul Woodruff\n"
- title: 6.  References
  contents:
  - "6.  References\n   [1]  IEEE 802.3/ISO 8802-3 Information processing systems\
    \ -\n        Local area networks - Part 3:  Carrier sense multiple\n        access\
    \ with collision detection (CSMA/CD) access method\n        and physical layer\
    \ specifications, 1993.\n   [2]  IEEE 802.3u-1995, \"MAC Parameters, Physical\
    \ Layer, Medium\n        Attachment Units and Repeater for 100 Mb/s Operation,\n\
    \        Type 100BASE-T,\" Sections 21 through 29, Supplement to\n        IEEE\
    \ Std 802.3, October 26, 1995.\n   [3]  IEEE 802.3u-1995, \"10 & 100 Mb/s Management,\"\
    \ Section 30,\n        Supplement to IEEE Std 802.3, October 26, 1995.\n   [4]\
    \  de Graaf, K., D. Romascanu, D. McMaster, K. McCloghrie,\n        and S. Roberts,\
    \ \"Definitions of Managed Objects for IEEE\n        802.3 Medium Attachment Units\
    \ (MAUs)\", Work in Progress.\n   [5]  McCloghrie, K., and M. Rose, Editors, \"\
    Management\n        Information Base for Network Management of TCP/IP-based\n\
    \        internets: MIB-II\", STD 17, RFC 1213, Hughes LAN Systems,\n        Performance\
    \ Systems International, March 1991.\n   [6]  SNMPv2 Working Group, J. Case, K.\
    \ McCloghrie, M. Rose,\n        and S. Waldbusser, \"Structure of Management Information\n\
    \        for version 2 of the Simple Network Management Protocol\n        (SNMPv2)\"\
    , RFC 1902, January 1996.\n   [7]  SNMPv2 Working Group, J. Case, K. McCloghrie,\
    \ M. Rose,\n        and S. Waldbusser, \"Textual Conventions for version 2 of\n\
    \        the Simple Network Management Protocol (SNMPv2)\", RFC\n        1903,\
    \ January 1996.\n   [8]  SNMPv2 Working Group, J. Case, K. McCloghrie, M. Rose,\n\
    \        and S. Waldbusser, \"Conformance Statements for version 2\n        of\
    \ the Simple Network Management Protocol (SNMPv2)\", RFC\n        1904, January\
    \ 1996.\n   [9]  SNMPv2 Working Group, J. Case, K. McCloghrie, M. Rose,\n    \
    \    and S. Waldbusser, \"Protocol Operations for version 2 of\n        the Simple\
    \ Network Management Protocol (SNMPv2)\", RFC\n        1905, January 1996.\n \
    \  [10] Case, J., M. Fedor, M. Schoffstall, and J. Davin, \"Simple\n        Network\
    \ Management Protocol\", STD 15, RFC 1157, SNMP\n        Research, Performance\
    \ Systems International, MIT Laboratory\n        for Computer Science, May 1990.\n\
    \   [11] McMaster, D., and K. McCloghrie, \"Definitions of Managed\n        Objects\
    \ for IEEE 802.3 Repeater Devices\", RFC 1516,\n        September 1993.\n   [12]\
    \ McAnally, G., D. Gilbert, and J. Flick, \"Conditional\n        Grant of Rights\
    \ to Specific Hewlett-Packard Patents In\n        Conjunction With the Internet\
    \ Engineering Task Force's\n        Internet-Standard Network Management Framework\"\
    , RFC 1988,\n        August 1996.\n   [13] Hewlett-Packard Company, US Patents\
    \ 5,293,635 and\n        5,421,024.\n   [14] McCloghrie, K., and F. Kastenholz,\
    \ \"Evolution of the\n        Interfaces Group of MIB-II\", RFC 1573, January\
    \ 1994.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 8.  Authors' Addresses
  contents:
  - "8.  Authors' Addresses\n   Kathryn de Graaf\n   3Com Corporation\n   118 Turnpike\
    \ Rd.\n   Southborough, MA 01772 USA\n   Phone: (508)229-1627\n   Fax: (508)490-5882\n\
    \   EMail: kdegraaf@isd.3com.com\n   Dan Romascanu\n   Madge Networks (Israel)\
    \ Ltd.\n   Atidim Technology Park, Bldg. 3\n   Tel Aviv 61131, Israel\n   Phone:\
    \ 972-3-6458414, 6458458\n   Fax: 972-3-6487146\n   EMail: dromasca@madge.com\n\
    \   Donna McMaster\n   Cisco Systems Inc.\n   170 West Tasman Drive\n   San Jose,\
    \ CA 95134\n   Phone: (408) 526-5260\n   EMail: mcmaster@cisco.com\n   Keith McCloghrie\n\
    \   Cisco Systems Inc.\n   170 West Tasman Drive\n   San Jose, CA 95134\n   Phone:\
    \ (408) 526-5260\n   EMail: kzm@cisco.com\n"
