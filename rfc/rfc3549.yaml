- title: __initial_text__
  contents:
  - '                Linux Netlink as an IP Services Protocol

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes Linux Netlink, which is used in Linux both\
    \ as\n   an intra-kernel messaging system as well as between kernel and user\n\
    \   space.  The focus of this document is to describe Netlink's\n   functionality\
    \ as a protocol between a Forwarding Engine Component\n   (FEC) and a Control\
    \ Plane Component (CPC), the two components that\n   define an IP service.  As\
    \ a result of this focus, this document\n   ignores other uses of Netlink, including\
    \ its use as a intra-kernel\n   messaging system, as an inter-process communication\
    \ scheme (IPC), or\n   as a configuration tool for other non-networking or non-IP\
    \ network\n   services (such as decnet, etc.).\n   This document is intended as\
    \ informational in the context of prior\n   art for the ForCES IETF working group.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction ...............................................\
    \  2\n       1.1. Definitions ...........................................  3\n\
    \            1.1.1.  Control Plane Components (CPCs)................  3\n    \
    \        1.1.2.  Forwarding Engine Components (FECs)............  3\n        \
    \    1.1.3.  IP Services ...................................  5\n   2.  Netlink\
    \ Architecture .......................................  7\n       2.1. Netlink\
    \ Logical Model .................................  8\n       2.2. Message Format.........................................\
    \  9\n       2.3. Protocol Model.........................................  9\n\
    \            2.3.1.  Service Addressing............................. 10\n    \
    \        2.3.2.  Netlink Message Header......................... 10\n        \
    \    2.3.3.  FE System Services' Templates.................. 13\n   3.  Currently\
    \ Defined Netlink IP Services....................... 16\n       3.1. IP Service\
    \ NETLINK_ROUTE............................... 16\n            3.1.1.  Network\
    \ Route Service Module................... 16\n            3.1.2.  Neighbor Setup\
    \ Service Module.................. 20\n            3.1.3.  Traffic Control Service........................\
    \ 21\n       3.2. IP Service NETLINK_FIREWALL............................ 23\n\
    \       3.3. IP Service NETLINK_ARPD................................ 27\n   4.\
    \  References.................................................. 27\n       4.1.\
    \ Normative References................................... 27\n       4.2. Informative\
    \ References................................. 28\n   5.  Security Considerations.....................................\
    \ 28\n   6.  Acknowledgements............................................ 28\n\
    \   Appendix 1:  Sample Service Hierarchy .......................... 29\n   Appendix\
    \ 2:  Sample Protocol for the Foo IP Service............. 30\n   Appendix 2a:\
    \ Interacting with Other IP services................. 30\n   Appendix 3:  Examples...........................................\
    \ 31\n   Authors' Addresses.............................................. 32\n\
    \   Full Copyright Statement........................................ 33\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The concept of IP Service control-forwarding separation\
    \ was first\n   introduced in the early 1990s by the BSD 4.4 routing sockets [9].\n\
    \   The focus at that time was a simple IP(v4) forwarding service and how\n  \
    \ the CPC, either via a command line configuration tool or a dynamic\n   route\
    \ daemon, could control forwarding tables for that IPv4\n   forwarding service.\n\
    \   The IP world has evolved considerably since those days.  Linux\n   Netlink,\
    \ when observed from a service provisioning and management\n   point of view,\
    \ takes routing sockets one step further by breaking the\n   barrier of focus\
    \ around IPv4 forwarding.  Since the Linux 2.1 kernel,\n   Netlink has been providing\
    \ the IP service abstraction to a few\n   services other than the classical RFC\
    \ 1812 IPv4 forwarding.\n   The motivation for this document is not to list every\
    \ possible\n   service for which Netlink is applied.  In fact, we leave out a\
    \ lot of\n   services (multicast routing, tunneling, policy routing, etc). Neither\n\
    \   is this document intended to be a tutorial on Netlink.  The idea is\n   to\
    \ explain the overall Netlink view with a special focus on the\n   mandatory building\
    \ blocks within the ForCES charter (i.e., IPv4 and\n   QoS).  This document also\
    \ serves to capture prior art to many\n   mechanisms that are useful within the\
    \ context of ForCES.  The text is\n   limited to a subset of what is available\
    \ in kernel 2.4.6, the newest\n   kernel when this document was first written.\
    \  It is also limited to\n   IPv4 functionality.\n   We first give some concept\
    \ definitions and then describe how Netlink\n   fits in.\n"
- title: 1.1.  Definitions
  contents:
  - "1.1.  Definitions\n   A Control Plane (CP) is an execution environment that may\
    \ have\n   several sub-components, which we refer to as CPCs.  Each CPC provides\n\
    \   control for a different IP service being executed by a Forwarding\n   Engine\
    \ (FE) component.  This relationship means that there might be\n   several CPCs\
    \ on a physical CP, if it is controlling several IP\n   services.  In essence,\
    \ the cohesion between a CP component and an FE\n   component is the service abstraction.\n"
- title: 1.1.1.  Control Plane Components (CPCs)
  contents:
  - "1.1.1.  Control Plane Components (CPCs)\n   Control Plane Components encompass\
    \ signalling protocols, with\n   diversity ranging from dynamic routing protocols,\
    \ such as OSPF [5],\n   to tag distribution protocols, such as CR-LDP [7]. Classical\n\
    \   management protocols and activities also fall under this category.\n   These\
    \ include SNMP [6], COPS [4], and proprietary CLI/GUI\n   configuration mechanisms.\
    \  The purpose of the control plane is to\n   provide an execution environment\
    \ for the above-mentioned activities\n   with the ultimate goal being to configure\
    \ and manage the second\n   Network Element (NE) component: the FE.  The result\
    \ of the\n   configuration defines the way that packets traversing the FE are\n\
    \   treated.\n"
- title: 1.1.2.  Forwarding Engine Components (FECs)
  contents:
  - "1.1.2.  Forwarding Engine Components (FECs)\n   The FE is the entity of the NE\
    \ that incoming packets (from the\n   network into the NE) first encounter.\n\
    \   The FE's service-specific component massages the packet to provide it\n  \
    \ with a treatment to achieve an IP service, as defined by the Control\n   Plane\
    \ Components for that IP service.  Different services will\n   utilize different\
    \ FECs.  Service modules may be chained to achieve a\n   more complex service\
    \ (refer to the Linux FE model, described later).\n   When built for providing\
    \ a specific service, the FE service component\n   will adhere to a forwarding\
    \ model.\n"
- title: 1.1.2.1.  Linux IP Forwarding Engine Model
  contents:
  - "1.1.2.1.  Linux IP Forwarding Engine Model\n                        ____    \
    \  +---------------+\n                   +->-| FW |---> | TCP, UDP, ... |\n  \
    \                 |   +----+     +---------------+\n                   |     \
    \              |\n                   ^                   v\n                 \
    \  |                  _|_\n                   +----<----+       | FW |\n     \
    \                        |       +----+\n                             ^      \
    \   |\n                             |         Y\n                           To\
    \ host    From host\n                            stack     stack\n           \
    \                  ^         |\n                             |_____    |\n"
- title: Ingress                            ^   Y
  contents:
  - 'Ingress                            ^   Y

    '
- title: device   ____    +-------+        +|---|--+   ____   +--------+ Egress
  contents:
  - 'device   ____    +-------+        +|---|--+   ____   +--------+ Egress

    '
- title: ->----->| FW |-->|Ingress|-->---->| Forw- |->| FW |->| Egress | device
  contents:
  - "->----->| FW |-->|Ingress|-->---->| Forw- |->| FW |->| Egress | device\n    \
    \    +----+   |  TC   |        |  ard  |  +----+  |   TC   |-->\n            \
    \     +-------+        +-------+          +--------+\n   The figure above shows\
    \ the Linux FE model per device.  The only\n   mandatory part of the datapath\
    \ is the Forwarding module, which is RFC\n   1812 conformant.  The different Firewall\
    \ (FW), Ingress Traffic\n   Control, and Egress Traffic Control building blocks\
    \ are not mandatory\n   in the datapath and may even be used to bypass the RFC\
    \ 1812 module.\n   These modules are shown as simple blocks in the datapath but,\
    \ in\n   fact, could be multiple cascaded, independent submodules within the\n\
    \   indicated blocks.  More information can be found at [10] and [11].\n   Packets\
    \ arriving at the ingress device first pass through a firewall\n   module.  Packets\
    \ may be dropped, munged, etc., by the firewall\n   module.  The incoming packet,\
    \ depending on set policy, may then be\n   passed via an Ingress Traffic Control\
    \ module. Metering and policing\n   activities are contained within the Ingress\
    \ TC module.  Packets may\n   be dropped, depending on metering results and policing\
    \ policies, at\n   this module. Next, the packet is subjected to the only non-optional\n\
    \   module, the RFC 1812-conformant Forwarding module. The packet may be\n   dropped\
    \ if it is nonconformant (to the many RFCs complementing 1812\n   and 1122). \
    \ This module is a juncture point at which packets destined\n   to the forwarding\
    \ NE may be sent up to the host stack.\n   Packets that are not for the NE may\
    \ further traverse a policy routing\n   submodule (within the forwarding module),\
    \ if so provisioned.  Another\n   firewall module is walked next.  The firewall\
    \ module can drop or\n   munge/transform packets, depending on the configured\
    \ sub-modules\n   encountered and their policies.  If all goes well, the Egress\
    \ TC\n   module is accessed next.\n   The Egress TC may drop packets for policing,\
    \ scheduling, congestion\n   control, or rate control reasons.  Egress queues\
    \ exist at this point\n   and any of the drops or delays may happen before or\
    \ after the packet\n   is queued.  All is dependent on configured module algorithms\
    \ and\n   policies.\n"
- title: 1.1.3.  IP Services
  contents:
  - "1.1.3.  IP Services\n   An IP service is the treatment of an IP packet within\
    \ the NE.  This\n   treatment is provided by a combination of both the CPC and\
    \ the FEC.\n   The time span of the service is from the moment when the packet\n\
    \   arrives at the NE to the moment that it departs.  In essence, an IP\n   service\
    \ in this context is a Per-Hop Behavior.  CP components running\n   on NEs define\
    \ the end-to-end path control for a service by running\n   control/signaling protocol/management-applications.\
    \  These\n   distributed CPCs unify the end-to-end view of the IP service.  As\n\
    \   noted above, these CP components then define the behavior of the FE\n   (and\
    \ therefore the NE) for a described packet.\n   A simple example of an IP service\
    \ is the classical IPv4 Forwarding.\n   In this case, control components, such\
    \ as routing protocols (OSPF,\n   RIP, etc.) and proprietary CLI/GUI configurations,\
    \ modify the FE's\n   forwarding tables in order to offer the simple service of\
    \ forwarding\n   packets to the next hop.  Traditionally, NEs offering this simple\n\
    \   service are known as routers.\n   In the diagram below, we show a simple FE<->CP\
    \ setup to provide an\n   example of the classical IPv4 service with an extension\
    \ to do some\n   basic QoS egress scheduling and illustrate how the setup fits\
    \ in this\n   described model.\n                           Control Plane (CP)\n\
    \                          .------------------------------------\n           \
    \               |    /^^^^^^\\      /^^^^^^\\         |\n                    \
    \      |   |        |    | COPS  |-\\       |\n                          |   |\
    \ ospfd  |    |  PEP  |  \\      |\n                          |   \\       / \
    \     \\_____/    |     |\n                        /------\\_____/         | \
    \      /      |\n                        | |        |           |     /      \
    \  |\n                        | |_________\\__________|____|_________|\n     \
    \                   |           |          |    |\n                       ******************************************\n\
    \         Forwarding    ************* Netlink  layer ************\n         Engine\
    \ (FE)   *****************************************\n          .-------------|-----------|----------|---|-------------\n\
    \          |       IPv4 forwarding   |              |             |\n        \
    \  |       FE Service       /               /             |\n          |     \
    \  Component       /               /              |\n          |       ---------------/---------------/---------\
    \      |\n          |       |             |               /         |      |\n\
    \   packet |       |     --------|--        ----|-----     |   packet\n   in \
    \    |       |     |  IPv4    |      | Egress   |    |    out\n   -->--->|------>|---->|Forwarding|----->|\
    \ QoS      |--->| ---->|->\n          |       |     |          |      | Scheduler|\
    \    |      |\n          |       |     -----------        ----------     |   \
    \   |\n          |       |                                       |      |\n  \
    \        |        ---------------------------------------       |\n          |\
    \                                                      |\n          -------------------------------------------------------\n\
    \   The above diagram illustrates ospfd, an OSPF protocol control daemon,\n  \
    \ and a COPS Policy Enforcement Point (PEP) as distinct CPCs.  The IPv4\n   FE\
    \ component includes the IPv4 Forwarding service module as well as\n   the Egress\
    \ Scheduling service module.  Another service might add a\n   policy forwarder\
    \ between the IPv4 forwarder and the QoS egress\n   scheduler.  A simpler classical\
    \ service would have constituted only\n   the IPv4 forwarder.\n   Over the years,\
    \ it has become important to add additional services to\n   routers to meet emerging\
    \ requirements.  More complex services\n   extending classical forwarding have\
    \ been added and standardized.\n   These newer services might go beyond the layer\
    \ 3 contents of the\n   packet header.  However, the name \"router\", although\
    \ a misnomer, is\n   still used to describe these NEs.  Services (which may look\
    \ beyond\n   the classical L3 service headers) include firewalling, QoS in\n \
    \  Diffserv and RSVP, NAT, policy based routing, etc.  Newer control\n   protocols\
    \ or management activities are introduced with these new\n   services.\n   One\
    \ extreme definition of a IP service is something for which a\n   service provider\
    \ would be able to charge.\n"
- title: 2.  Netlink Architecture
  contents:
  - "2.  Netlink Architecture\n   Control of IP service components is defined by using\
    \ templates.\n   The FEC and CPC participate to deliver the IP service by\n  \
    \ communicating using these templates.  The FEC might continuously get\n   updates\
    \ from the Control Plane Component on how to operate the\n   service (e.g., for\
    \ v4 forwarding or for route additions or\n   deletions).\n   The interaction\
    \ between the FEC and the CPC, in the Netlink context,\n   defines a protocol.\
    \  Netlink provides mechanisms for the CPC\n   (residing in user space) and the\
    \ FEC (residing in kernel space) to\n   have their own protocol definition --\
    \ kernel space and user space\n   just mean different protection domains.  Therefore,\
    \ a wire protocol\n   is needed to communicate.  The wire protocol is normally\
    \ provided by\n   some privileged service that is able to copy between multiple\n\
    \   protection domains.  We will refer to this service as the Netlink\n   service.\
    \  The Netlink service can also be encapsulated in a different\n   transport layer,\
    \ if the CPC executes on a different node than the\n   FEC.  The FEC and CPC,\
    \ using Netlink mechanisms, may choose to define\n   a reliable protocol between\
    \ each other.  By default, however, Netlink\n   provides an unreliable communication.\n\
    \   Note that the FEC and CPC can both live in the same memory protection\n  \
    \ domain and use the connect() system call to create a path to the peer\n   and\
    \ talk to each other.  We will not discuss this mechanism further\n   other than\
    \ to say that it is available. Throughout this document, we\n   will refer interchangeably\
    \ to the FEC to mean kernel space and the\n   CPC to mean user space.  This denomination\
    \ is not meant, however, to\n   restrict the two components to these protection\
    \ domains or to the\n   same compute node.\n   Note: Netlink allows participation\
    \ in IP services by both service\n   components.\n"
- title: 2.1.  Netlink Logical Model
  contents:
  - "2.1.  Netlink Logical Model\n   In the diagram below we show a simple FEC<->CPC\
    \ logical relationship.\n   We use the IPv4 forwarding FEC (NETLINK_ROUTE, which\
    \ is discussed\n   further below) as an example.\n                    Control\
    \ Plane (CP)\n                   .------------------------------------\n     \
    \              |    /^^^^^\\        /^^^^^\\          |\n                   |\
    \   |       |      / CPC-2 \\         |\n                   |   | CPC-1 |    \
    \ | COPS   |         |\n                   |   | ospfd |     |  PEP   |      \
    \   |\n                   |   |      /       \\____ _/          |\n          \
    \         |    \\____/            |             |\n                   |      |\
    \               |             |\n                ****************************************|\n\
    \                ************* BROADCAST WIRE  ************\n   FE---------- *****************************************.\n\
    \   |      IPv4 forwarding |    |           |             |\n   |            \
    \   FEC    |    |           |             |\n   |       --------------/ ----|-----------|--------\
    \     |\n   |       |            /      |           |       |     |\n   |    \
    \   |     .-------.  .-------.   .------.   |     |\n   |       |     |Ingress|\
    \  | IPv4  |   |Egress|   |     |\n   |       |     |police |  |Forward|   | QoS\
    \  |   |     |\n   |       |     |_______|  |_______|   |Sched |   |     |\n \
    \  |       |                             ------    |     |\n   |        ---------------------------------------\
    \      |\n   |                                                     |\n    -----------------------------------------------------\n\
    \   Netlink logically models FECs and CPCs in the form of nodes\n   interconnected\
    \ to each other via a broadcast wire.\n   The wire is specific to a service. \
    \ The example above shows the\n   broadcast wire belonging to the extended IPv4\
    \ forwarding service.\n   Nodes (CPCs or FECs as illustrated above) connect to\
    \ the wire and\n   register to receive specific messages.  CPCs may connect to\
    \ multiple\n   wires if it helps them to control the service better.  All nodes\n\
    \   (CPCs and FECs) dump packets on the broadcast wire.  Packets can be\n   discarded\
    \ by the wire if they are malformed or not specifically\n   formatted for the\
    \ wire.  Dropped packets are not seen by any of the\n   nodes.  The Netlink service\
    \ may signal an error to the sender if it\n   detects a malformatted Netlink packet.\n\
    \   Packets sent on the wire can be broadcast, multicast, or unicast.\n   FECs\
    \ or CPCs register for specific messages of interest for\n   processing or just\
    \ monitoring purposes.\n   Appendices 1 and 2 have a high level overview of this\
    \ interaction.\n"
- title: 2.2.  Message Format
  contents:
  - "2.2.  Message Format\n   There are three levels to a Netlink message: The general\
    \ Netlink\n   message header, the IP service specific template, and the IP service\n\
    \   specific data.\n    0                   1                   2            \
    \       3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \                                                             |\n   |        \
    \           Netlink message header                      |\n   |              \
    \                                                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                IP Service Template                          |\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                IP Service specific data in TLVs             |\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The Netlink message is used to communicate between the FEC and CPC\n   for\
    \ parameterization of the FECs, asynchronous event notification of\n   FEC events\
    \ to the CPCs, and statistics querying/gathering (typically\n   by a CPC).\n \
    \  The Netlink message header is generic for all services, whereas the\n   IP\
    \ Service Template header is specific to a service.  Each IP Service\n   then\
    \ carries parameterization data (CPC->FEC direction) or response\n   (FEC->CPC\
    \ direction).  These parameterizations are in TLV (Type-\n   Length-Value) format\
    \ and are unique to the service.\n   The different parts of the netlink message\
    \ are discussed in the\n   following sections.\n"
- title: 2.3.  Protocol Model
  contents:
  - "2.3.  Protocol Model\n   This section expands on how Netlink provides the mechanism\
    \ for\n   service-oriented FEC and CPC interaction.\n"
- title: 2.3.1.  Service Addressing
  contents:
  - "2.3.1.  Service Addressing\n   Access is provided by first connecting to the\
    \ service on the FE.  The\n   connection is achieved by making a socket() system\
    \ call to the\n   PF_NETLINK domain.  Each FEC is identified by a protocol number.\
    \  One\n   may open either SOCK_RAW or SOCK_DGRAM type sockets, although Netlink\n\
    \   does not distinguish between the two.  The socket connection provides\n  \
    \ the basis for the FE<->CP addressing.\n   Connecting to a service is followed\
    \ (at any point during the life of\n   the connection) by either issuing a service-specific\
    \ command (from\n   the CPC to the FEC, mostly for configuration purposes), issuing\
    \ a\n   statistics-collection command, or subscribing/unsubscribing to\n   service\
    \ events.  Closing the socket terminates the transaction.\n   Refer to Appendices\
    \ 1 and 2 for examples.\n"
- title: 2.3.2.  Netlink Message Header
  contents:
  - "2.3.2.  Netlink Message Header\n   Netlink messages consist of a byte stream\
    \ with one or multiple\n   Netlink headers and an associated payload.  If the\
    \ payload is too big\n   to fit into a single message it, can be split over multiple\
    \ Netlink\n   messages, collectively called a multipart message.  For multipart\n\
    \   messages, the first and all following headers have the NLM_F_MULTI\n   Netlink\
    \ header flag set, except for the last header which has the\n   Netlink header\
    \ type NLMSG_DONE.\n   The Netlink message header is shown below.\n   0      \
    \             1                   2                   3\n   0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          Length                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Type              |           Flags              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      Sequence Number                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      Process ID (PID)                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The fields in the header are:\n   Length: 32 bits\n   The length of the message\
    \ in bytes, including the header.\n   Type: 16 bits\n   This field describes the\
    \ message content.\n   It can be one of the standard message types:\n        NLMSG_NOOP\
    \  Message is ignored.\n        NLMSG_ERROR The message signals an error and the\
    \ payload\n                    contains a nlmsgerr structure.  This can be looked\n\
    \                    at as a NACK and typically it is from FEC to CPC.\n     \
    \   NLMSG_DONE  Message terminates a multipart message.\n   Individual IP services\
    \ specify more message types, e.g.,\n   NETLINK_ROUTE service specifies several\
    \ types, such as RTM_NEWLINK,\n   RTM_DELLINK, RTM_GETLINK, RTM_NEWADDR, RTM_DELADDR,\
    \ RTM_NEWROUTE,\n   RTM_DELROUTE, etc.\n   Flags: 16 bits\n   The standard flag\
    \ bits used in Netlink are\n          NLM_F_REQUEST   Must be set on all request\
    \ messages (typically\n                          from user space to kernel space)\n\
    \          NLM_F_MULTI     Indicates the message is part of a multipart\n    \
    \                      message terminated by NLMSG_DONE\n          NLM_F_ACK \
    \      Request for an acknowledgment on success.\n                          Typical\
    \ direction of request is from user\n                          space (CPC) to\
    \ kernel space (FEC).\n          NLM_F_ECHO      Echo this request.  Typical direction\
    \ of\n                          request is from user space (CPC) to kernel\n \
    \                         space (FEC).\n   Additional flag bits for GET requests\
    \ on config information in\n   the FEC.\n          NLM_F_ROOT     Return the complete\
    \ table instead of a\n                         single entry.\n          NLM_F_MATCH\
    \    Return all entries matching criteria passed in\n                        \
    \ message content.\n          NLM_F_ATOMIC   Return an atomic snapshot of the\
    \ table being\n                         referenced.  This may require special\n\
    \                         privileges because it has the potential to\n       \
    \                  interrupt service in the FE for a longer time.\n   Convenience\
    \ macros for flag bits:\n          NLM_F_DUMP     This is NLM_F_ROOT or'ed with\
    \ NLM_F_MATCH\n   Additional flag bits for NEW requests\n          NLM_F_REPLACE\
    \   Replace existing matching config object with\n                          this\
    \ request.\n          NLM_F_EXCL      Don't replace the config object if it already\n\
    \                          exists.\n          NLM_F_CREATE    Create config object\
    \ if it doesn't already\n                          exist.\n          NLM_F_APPEND\
    \    Add to the end of the object list.\n   For those familiar with BSDish use\
    \ of such operations in route\n   sockets, the equivalent translations are:\n\
    \             - BSD ADD operation equates to NLM_F_CREATE or-ed\n            \
    \   with NLM_F_EXCL\n             - BSD CHANGE operation equates to NLM_F_REPLACE\n\
    \             - BSD Check operation equates to NLM_F_EXCL\n             - BSD\
    \ APPEND equivalent is actually mapped to\n               NLM_F_CREATE\n   Sequence\
    \ Number: 32 bits\n   The sequence number of the message.\n   Process ID (PID):\
    \ 32 bits\n   The PID of the process sending the message.  The PID is used by\
    \ the\n   kernel to multiplex to the correct sockets.  A PID of zero is used\n\
    \   when sending messages to user space from the kernel.\n"
- title: 2.3.2.1.  Mechanisms for Creating Protocols
  contents:
  - "2.3.2.1.  Mechanisms for Creating Protocols\n   One could create a reliable protocol\
    \ between an FEC and a CPC by\n   using the combination of sequence numbers, ACKs,\
    \ and retransmit\n   timers.  Both sequence numbers and ACKs are provided by Netlink;\n\
    \   timers are provided by Linux.\n   One could create a heartbeat protocol between\
    \ the FEC and CPC by\n   using the ECHO flags and the NLMSG_NOOP message.\n"
- title: 2.3.2.2.  The ACK Netlink Message
  contents:
  - "2.3.2.2.  The ACK Netlink Message\n   This message is actually used to denote\
    \ both an ACK and a NACK.\n   Typically, the direction is from FEC to CPC (in\
    \ response to an ACK\n   request message).  However, the CPC should be able to\
    \ send ACKs back\n   to FEC when requested.  The semantics for this are IP service\n\
    \   specific.\n    0                   1                   2                 \
    \  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n  \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |    \
    \                   Netlink message header                  |\n   |          \
    \             type = NLMSG_ERROR                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          Error code                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       OLD Netlink message header              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Error code: integer (typically 32 bits)\n   An error code of zero indicates\
    \ that the message is an ACK response.\n   An ACK response message contains the\
    \ original Netlink message header,\n   which can be used to compare against (sent\
    \ sequence numbers, etc).\n   A non-zero error code message is equivalent to a\
    \ Negative ACK (NACK).\n   In such a situation, the Netlink data that was sent\
    \ down to the\n   kernel is returned appended to the original Netlink message\
    \ header.\n   An error code printable via the perror() is also set (not in the\n\
    \   message header, rather in the executing environment state variable).\n"
- title: 2.3.3.  FE System Services' Templates
  contents:
  - "2.3.3.  FE System Services' Templates\n   These are services that are offered\
    \ by the system for general use by\n   other services.  They include the ability\
    \ to configure, gather\n   statistics and listen to changes in shared resources.\
    \  IP address\n   management, link events, etc. fit here.  We create this section\
    \ for\n   these services for logical separation, despite the fact that they are\n\
    \   accessed via the NETLINK_ROUTE FEC.  The reason that they exist\n   within\
    \ NETLINK_ROUTE is due to historical cruft: the BSD 4.4 Route\n   Sockets implemented\
    \ them as part of the IPv4 forwarding sockets.\n"
- title: 2.3.3.1. Network Interface Service Module
  contents:
  - "2.3.3.1. Network Interface Service Module\n   This service provides the ability\
    \ to create, remove, or get\n   information about a specific network interface.\
    \  The network\n   interface can be either physical or virtual and is network\
    \ protocol\n   independent (e.g., an x.25 interface can be defined via this\n\
    \   message).  The Interface service message template is shown below.\n    0 \
    \                  1                   2                   3\n    0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Family    |   Reserved  |          Device Type              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Interface Index                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      Device Flags                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      Change Mask                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Family: 8 bits\n   This is always set to AF_UNSPEC.\n   Device Type: 16 bits\n\
    \   This defines the type of the link.  The link could be Ethernet, a\n   tunnel,\
    \ etc.  We are interested only in IPv4, although the link type\n   is L3 protocol-independent.\n\
    \   Interface Index: 32 bits\n   Uniquely identifies interface.\n   Device Flags:\
    \ 32 bits\n          IFF_UP            Interface is administratively up.\n   \
    \       IFF_BROADCAST     Valid broadcast address set.\n          IFF_DEBUG  \
    \       Internal debugging flag.\n          IFF_LOOPBACK      Interface is a loopback\
    \ interface.\n          IFF_POINTOPOINT   Interface is a point-to-point link.\n\
    \          IFF_RUNNING       Interface is operationally up.\n          IFF_NOARP\
    \         No ARP protocol needed for this interface.\n          IFF_PROMISC  \
    \     Interface is in promiscuous mode.\n          IFF_NOTRAILERS    Avoid use\
    \ of trailers.\n          IFF_ALLMULTI      Receive all multicast packets.\n \
    \         IFF_MASTER        Master of a load balancing bundle.\n          IFF_SLAVE\
    \         Slave of a load balancing bundle.\n          IFF_MULTICAST     Supports\
    \ multicast.\n          IFF_PORTSEL       Is able to select media type via ifmap.\n\
    \          IFF_AUTOMEDIA     Auto media selection active.\n          IFF_DYNAMIC\
    \       Interface was dynamically created.\n   Change Mask: 32 bits\n   Reserved\
    \ for future use.  Must be set to 0xFFFFFFFF.\n   Applicable attributes:\n   \
    \       Attribute            Description\n          ..........................................................\n\
    \          IFLA_UNSPEC          Unspecified.\n          IFLA_ADDRESS         Hardware\
    \ address interface L2 address.\n          IFLA_BROADCAST       Hardware address\
    \ L2 broadcast\n                               address.\n          IFLA_IFNAME\
    \          ASCII string device name.\n          IFLA_MTU             MTU of the\
    \ device.\n          IFLA_LINK            ifindex of link to which this device\n\
    \                               is bound.\n          IFLA_QDISC           ASCII\
    \ string defining egress root\n                               queuing discipline.\n\
    \          IFLA_STATS           Interface statistics.\n   Netlink message types\
    \ specific to this service:\n   RTM_NEWLINK, RTM_DELLINK, and RTM_GETLINK\n"
- title: 2.3.3.2.  IP Address Service Module
  contents:
  - "2.3.3.2.  IP Address Service Module\n   This service provides the ability to\
    \ add, remove, or receive\n   information about an IP address associated with\
    \ an interface.  The\n   address provisioning service message template is shown\
    \ below.\n   0                   1                   2                   3\n \
    \  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Family    |     Length    |     Flags     |    Scope      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Interface Index                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Family: 8 bits\n   Address Family: AF_INET for IPv4; and AF_INET6 for IPV6.\n\
    \   Length: 8 bits\n   The length of the address mask.\n   Flags: 8 bits\n   IFA_F_SECONDARY\
    \  For secondary address (alias interface).\n   IFA_F_PERMANENT  For a permanent\
    \ address set by the user.\n                    When this is not set, it means\
    \ the address\n                    was dynamically created (e.g., by stateless\n\
    \                    autoconfiguration).\n   IFA_F_DEPRECATED Defines deprecated\
    \ (IPV4) address.\n   IFA_F_TENTATIVE  Defines tentative (IPV4) address (duplicate\n\
    \                    address detection is still in progress).\n   Scope: 8 bits\n\
    \   The address scope in which the address stays valid.\n          SCOPE_UNIVERSE:\
    \ Global scope.\n          SCOPE_SITE (IPv6 only): Only valid within this site.\n\
    \          SCOPE_LINK: Valid only on this device.\n          SCOPE_HOST: Valid\
    \ only on this host.\n   le attributes:\n   Attribute             Description\n\
    \         IFA_UNSPEC      Unspecified.\n         IFA_ADDRESS     Raw protocol\
    \ address of interface.\n         IFA_LOCAL       Raw protocol local address.\n\
    \         IFA_LABEL       ASCII string name of the interface.\n         IFA_BROADCAST\
    \   Raw protocol broadcast address.\n         IFA_ANYCAST     Raw protocol anycast\
    \ address.\n         IFA_CACHEINFO   Cache address information.\n   Netlink messages\
    \ specific to this service: RTM_NEWADDR,\n   RTM_DELADDR, and RTM_GETADDR.\n"
- title: 3.  Currently Defined Netlink IP Services
  contents:
  - "3.  Currently Defined Netlink IP Services\n   Although there are many other IP\
    \ services defined that are using\n   Netlink, as mentioned earlier, we will talk\
    \ only about a handful of\n   those integrated into kernel version 2.4.6.  These\
    \ are:\n      NETLINK_ROUTE, NETLINK_FIREWALL, and NETLINK_ARPD.\n"
- title: 3.1.  IP Service NETLINK_ROUTE
  contents:
  - "3.1.  IP Service NETLINK_ROUTE\n   This service allows CPCs to modify the IPv4\
    \ routing table in the\n   Forwarding Engine.  It can also be used by CPCs to\
    \ receive routing\n   updates, as well as to collect statistics.\n"
- title: 3.1.1.  Network Route Service Module
  contents:
  - "3.1.1.  Network Route Service Module\n   This service provides the ability to\
    \ create, remove or receive\n   information about a network route.  The service\
    \ message template is\n   shown below.\n   0                   1             \
    \      2                   3\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Family    |  Src length   |  Dest length  |     TOS       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Table ID   |   Protocol    |     Scope     |     Type      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          Flags                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Family: 8 bits\n   Address Family: AF_INET for IPv4; and AF_INET6 for IPV6.\n\
    \   Src length: 8 bits\n   Prefix length of source IP address.\n   Dest length:\
    \ 8 bits\n   Prefix length of destination IP address.\n   TOS: 8 bits\n   The\
    \ 8-bit TOS (should be deprecated to make room for DSCP).\n   Table ID: 8 bits\n\
    \   Table identifier.  Up to 255 route tables are supported.\n               \
    \  RT_TABLE_UNSPEC    An unspecified routing table.\n                 RT_TABLE_DEFAULT\
    \   The default table.\n                 RT_TABLE_MAIN      The main table.\n\
    \                 RT_TABLE_LOCAL     The local table.\n                 The user\
    \ may assign arbitrary values between\n                 RT_TABLE_UNSPEC(0) and\
    \ RT_TABLE_DEFAULT(253).\n   Protocol: 8 bits\n   Identifies what/who added the\
    \ route.\n                 Protocol          Route origin.\n                 ..............................................\n\
    \                 RTPROT_UNSPEC     Unknown.\n                 RTPROT_REDIRECT\
    \   By an ICMP redirect.\n                 RTPROT_KERNEL     By the kernel.\n\
    \                 RTPROT_BOOT       During bootup.\n                 RTPROT_STATIC\
    \     By the administrator.\n   Values larger than RTPROT_STATIC(4) are not interpreted\
    \ by the\n   kernel, they are just for user information.  They may be used to\n\
    \   tag the source of a routing information or to distinguish between\n   multiple\
    \ routing daemons.  See <linux/rtnetlink.h> for the\n   routing daemon identifiers\
    \ that are already assigned.\n   Scope: 8 bits\n   Route scope (valid distance\
    \ to destination).\n                 RT_SCOPE_UNIVERSE   Global route.\n     \
    \            RT_SCOPE_SITE       Interior route in the\n                     \
    \                local autonomous system.\n                 RT_SCOPE_LINK    \
    \   Route on this link.\n                 RT_SCOPE_HOST       Route on the local\
    \ host.\n                 RT_SCOPE_NOWHERE    Destination does not exist.\n  \
    \ The values between RT_SCOPE_UNIVERSE(0) and RT_SCOPE_SITE(200)\n   are available\
    \ to the user.\n   Type: 8 bits\n   The type of route.\n                 Route\
    \ type        Description\n                 ----------------------------------------------------\n\
    \                 RTN_UNSPEC        Unknown route.\n                 RTN_UNICAST\
    \       A gateway or direct route.\n                 RTN_LOCAL         A local\
    \ interface route.\n                 RTN_BROADCAST     A local broadcast route\n\
    \                                   (sent as a broadcast).\n                 RTN_ANYCAST\
    \       An anycast route.\n                 RTN_MULTICAST     A multicast route.\n\
    \                 RTN_BLACKHOLE     A silent packet dropping route.\n        \
    \         RTN_UNREACHABLE   An unreachable destination.\n                    \
    \               Packets dropped and host\n                                   unreachable\
    \ ICMPs are sent to the\n                                   originator.\n    \
    \             RTN_PROHIBIT      A packet rejection route.  Packets\n         \
    \                          are dropped and communication\n                   \
    \                prohibited ICMPs are sent to the\n                          \
    \         originator.\n                 RTN_THROW         When used with policy\
    \ routing,\n                                   continue routing lookup in another\n\
    \                                   table.  Under normal routing,\n          \
    \                         packets are dropped and net\n                      \
    \             unreachable ICMPs are sent to the\n                            \
    \       originator.\n                 RTN_NAT           A network address translation\n\
    \                                   rule.\n                 RTN_XRESOLVE     \
    \ Refer to an external resolver (not\n                                   implemented).\n\
    \   Flags: 32 bits\n   Further qualify the route.\n                 RTM_F_NOTIFY\
    \     If the route changes, notify the\n                                  user.\n\
    \                 RTM_F_CLONED     Route is cloned from another route.\n     \
    \            RTM_F_EQUALIZE   Allow randomization of next hop\n              \
    \                    path in multi-path routing\n                            \
    \      (currently not implemented).\n   Attributes applicable to this service:\n\
    \                 Attribute       Description\n                 ---------------------------------------------------\n\
    \                 RTA_UNSPEC      Ignored.\n                 RTA_DST         Protocol\
    \ address for route\n                                 destination address.\n \
    \                RTA_SRC         Protocol address for route source\n         \
    \                        address.\n                 RTA_IIF         Input interface\
    \ index.\n                 RTA_OIF         Output interface index.\n         \
    \        RTA_GATEWAY     Protocol address for the gateway of\n               \
    \                  the route\n                 RTA_PRIORITY    Priority of route.\n\
    \                 RTA_PREFSRC     Preferred source address in cases\n        \
    \                         where more than one source address\n               \
    \                  could be used.\n                 RTA_METRICS     Route metrics\
    \ attributed to route\n                                 and associated protocols\
    \ (e.g.,\n                                 RTT, initial TCP window, etc.).\n \
    \                RTA_MULTIPATH   Multipath route next hop's\n                \
    \                 attributes.\n                 RTA_PROTOINFO   Firewall based\
    \ policy routing\n                                 attribute.\n              \
    \   RTA_FLOW        Route realm.\n                 RTA_CACHEINFO   Cached route\
    \ information.\n   Additional Netlink message types applicable to this service:\n\
    \   RTM_NEWROUTE, RTM_DELROUTE, and RTM_GETROUTE\n"
- title: 3.1.2.  Neighbor Setup Service Module
  contents:
  - "3.1.2.  Neighbor Setup Service Module\n   This service provides the ability to\
    \ add, remove, or receive\n   information about a neighbor table entry (e.g.,\
    \ an ARP entry or an\n   IPv4 neighbor solicitation, etc.).  The service message\
    \ template is\n   shown below.\n   0                   1                   2 \
    \                  3\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Family    |    Reserved1  |           Reserved2           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Interface Index                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           State             |     Flags     |     Type      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Family: 8 bits\n   Address Family: AF_INET for IPv4; and AF_INET6 for IPV6.\n\
    \   Interface Index: 32 bits\n   The unique interface index.\n   State: 16 bits\n\
    \   A bitmask of the following states:\n                 NUD_INCOMPLETE   Still\
    \ attempting to resolve.\n                 NUD_REACHABLE    A confirmed working\
    \ cache entry\n                 NUD_STALE        an expired cache entry.\n   \
    \              NUD_DELAY        Neighbor no longer reachable.\n              \
    \                    Traffic sent, waiting for\n                             \
    \     confirmation.\n                 NUD_PROBE        A cache entry that is currently\n\
    \                                  being re-solicited.\n                 NUD_FAILED\
    \       An invalid cache entry.\n                 NUD_NOARP        A device which\
    \ does not do neighbor\n                                  discovery (ARP).\n \
    \                NUD_PERMANENT    A static entry.\n   Flags: 8 bits\n        \
    \         NTF_PROXY        A proxy ARP entry.\n                 NTF_ROUTER   \
    \    An IPv6 router.\n   Attributes applicable to this service:\n            \
    \     Attributes      Description\n                 ------------------------------------\n\
    \                 NDA_UNSPEC      Unknown type.\n                 NDA_DST    \
    \     A neighbour cache network.\n                                 layer destination\
    \ address\n                 NDA_LLADDR      A neighbor cache link layer\n    \
    \                             address.\n                 NDA_CACHEINFO   Cache\
    \ statistics.\n   Additional Netlink message types applicable to this service:\n\
    \   RTM_NEWNEIGH, RTM_DELNEIGH, and RTM_GETNEIGH.\n"
- title: 3.1.3.  Traffic Control Service
  contents:
  - "3.1.3.  Traffic Control Service\n   This service provides the ability to provision,\
    \ query or listen to\n   events under the auspices of traffic control.  These\
    \ include queuing\n   disciplines, (schedulers and queue treatment algorithms\
    \ -- e.g.,\n   priority-based scheduler or the RED algorithm) and classifiers.\n\
    \   Linux Traffic Control Service is very flexible and allows for\n   hierarchical\
    \ cascading of the different blocks for traffic resource\n   sharing.\n      \
    \    ++    ++                 +-----+   +-------+   ++     ++ .++\n          ||\
    \ .  ||     +------+    |     |-->| Qdisc |-->||     ||  ||\n          ||    ||---->|Filter|--->|Class|\
    \   +-------+   ||-+   ||  ||\n          ||    ||  |  +------+    |     +---------------+|\
    \ |   ||  ||\n          || .  ||  |              +----------------------+ |  \
    \ || .||\n          || .  ||  |  +------+                             |   || \
    \ ||\n          ||    ||  +->|Filter|-_  +-----+   +-------+   ++ |   || .||\n\
    \          || -->||  |  +------+  ->|     |-->| Qdisc |-->|| |   ||->||\n    \
    \      || .  ||  |              |Class|   +-------+   ||-+-->|| .||\n   ->dev->||\
    \    ||  |  +------+ _->|     +---------------+|     ||  ||\n          ||    ||\
    \  +->|Filter|-   +----------------------+     || .||\n          ||    ||    \
    \ +------+                                 || .||\n          || .  |+----------------------------------------------+|\
    \  ||\n          ||    |          Parent Queuing discipline             | .||\n\
    \          || .  +------------------------------------------------+ .||\n    \
    \      || . . .. . . .. . .                 . .. .. .. .      .. ||\n        \
    \  |+--------------------------------------------------------+|\n          | \
    \                Parent Queuing discipline                |\n          |     \
    \             (attached to egress device)             |\n          +----------------------------------------------------------+\n\
    \   The above diagram shows an example of the Egress TC block.  We try to\n  \
    \ be very brief here.  For more information, please refer to [11].  A\n   packet\
    \ first goes through a filter that is used to identify a class\n   to which the\
    \ packet may belong.  A class is essentially a terminal\n   queuing discipline\
    \ and has a queue associated with it.  The queue may\n   be subject to a simple\
    \ algorithm, like FIFO, or a more complex one,\n   like RED or a token bucket.\
    \  The outermost queuing discipline, which\n   is referred to as the parent is\
    \ typically associated with a\n   scheduler.  Within this scheduler hierarchy,\
    \ however, may be other\n   scheduling algorithms, making the Linux Egress TC\
    \ very flexible.\n   The service message template that makes this possible is\
    \ shown below.\n   This template is used in both the ingress and the egress queuing\n\
    \   disciplines (refer to the egress traffic control model in the FE\n   model\
    \ section).  Each of the specific components of the model has\n   unique attributes\
    \ that describe it best.  The common attributes are\n   described below.\n   0\
    \                   1                   2                   3\n   0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Family    |  Reserved1    |         Reserved2             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Interface Index                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      Qdisc handle                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Parent Qdisc                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        TCM Info                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Family: 8 bits\n   Address Family: AF_INET for IPv4; and AF_INET6 for IPV6.\n\
    \   Interface Index: 32 bits\n   The unique interface index.\n   Qdisc handle:\
    \ 32 bits\n   Unique identifier for instance of queuing discipline.  Typically,\n\
    \   this is split into major:minor of 16 bits each.  The major number\n   would\
    \ also be the major number of the parent of this instance.\n   Parent Qdisc: 32\
    \ bits\n   Used in hierarchical layering of queuing disciplines.  If this value\n\
    \   and the Qdisc handle are the same and equal to TC_H_ROOT, then the\n   defined\
    \ qdisc is the top most layer known as the root qdisc.\n   TCM Info: 32 bits\n\
    \   Set by the FE to 1 typically, except when the Qdisc instance is in\n   use,\
    \ in which case it is set to imply a reference count.  From the\n   CPC towards\
    \ the direction of the FEC, this is typically set to 0\n   except when used in\
    \ the context of filters.  In that case, this 32-\n   bit field is split into\
    \ a 16-bit priority field and 16-bit protocol\n   field.  The protocol is defined\
    \ in kernel source\n   <include/linux/if_ether.h>, however, the most commonly\
    \ used one is\n   ETH_P_IP (the IP protocol).\n   The priority is used for conflict\
    \ resolution when filters intersect\n   in their expressions.\n   Generic attributes\
    \ applicable to this service:\n                Attribute        Description\n\
    \                ------------------------------------\n                TCA_KIND\
    \         Canonical name of FE component.\n                TCA_STATS        Generic\
    \ usage statistics of FEC\n                TCA_RATE         rate estimator being\
    \ attached to\n                                 FEC.  Takes snapshots of stats\
    \ to\n                                 compute rate.\n                TCA_XSTATS\
    \       Specific statistics of FEC.\n                TCA_OPTIONS      Nested FEC-specific\
    \ attributes.\n   Appendix 3 has an example of configuring an FE component for\
    \ a FIFO\n   Qdisc.\n   Additional Netlink message types applicable to this service:\n\
    \   RTM_NEWQDISC, RTM_DELQDISC, RTM_GETQDISC, RTM_NEWTCLASS,\n   RTM_DELTCLASS,\
    \ RTM_GETTCLASS, RTM_NEWTFILTER, RTM_DELTFILTER, and\n   RTM_GETTFILTER.\n"
- title: 3.2.  IP Service NETLINK_FIREWALL
  contents:
  - "3.2.  IP Service NETLINK_FIREWALL\n   This service allows CPCs to receive, manipulate,\
    \ and re-inject\n   packets via the IPv4 firewall service modules in the FE. \
    \ A firewall\n   rule is first inserted to activate packet redirection.  The CPC\n\
    \   informs the FEC whether it would like to receive just the metadata on\n  \
    \ the packet or the actual data and, if the metadata is desired, what\n   is the\
    \ maximum data length to be redirected.  The redirected packets\n   are still\
    \ stored in the FEC, waiting a verdict from the CPC.  The\n   verdict could constitute\
    \ a simple accept or drop decision of the\n   packet, in which case the verdict\
    \ is imposed on the packet still\n   sitting on the FEC.  The verdict may also\
    \ include a modified packet\n   to be sent on as a replacement.\n   Two types\
    \ of messages exist that can be sent from CPC to FEC.  These\n   are: Mode messages\
    \ and Verdict messages.  Mode messages are sent\n   immediately to the FEC to\
    \ describe what the CPC would like to\n   receive.  Verdict messages are sent\
    \ to the FEC after a decision has\n   been made on the fate of a received packet.\
    \  The formats are\n   described below.\n   The mode message is described first.\n\
    \   0                   1                   2                   3\n   0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Mode    |    Reserved1  |           Reserved2             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Range                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Mode: 8 bits\n   Control information on the packet to be sent to the CPC.\
    \  The\n   different types are:\n          IPQ_COPY_META   Copy only packet metadata\
    \ to CPC.\n          IPQ_COPY_PACKET Copy packet metadata and packet payloads\n\
    \                          to CPC.\n   Range: 32 bits\n   If IPQ_COPY_PACKET,\
    \ this defines the maximum length to copy.\n   A packet and associated metadata\
    \ received from user space looks\n   as follows.\n   0                   1   \
    \                2                   3\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Packet ID                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          Mark                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       timestamp_m                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       timestamp_u                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          hook                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       indev_name                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       outdev_name                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           hw_protocol       |        hw_type                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         hw_addrlen          |           Reserved            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       hw_addr                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       data_len                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      Payload . . .                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Packet ID: 32 bits\n   The unique packet identifier as passed to the CPC by\
    \ the FEC.\n   Mark: 32 bits\n   The internal metadata value set to describe the\
    \ rule in which\n   the packet was picked.\n   timestamp_m: 32 bits\n   Packet\
    \ arrival time (seconds)\n   timestamp_u: 32 bits\n   Packet arrival time (useconds\
    \ in addition to the seconds in\n   timestamp_m)\n   hook: 32 bits\n   The firewall\
    \ module from which the packet was picked.\n   indev_name: 128 bits\n   ASCII\
    \ name of incoming interface.\n   outdev_name: 128 bits\n   ASCII name of outgoing\
    \ interface.\n   hw_protocol: 16 bits\n   Hardware protocol, in network order.\n\
    \   hw_type: 16 bits\n   Hardware type.\n   hw_addrlen: 8 bits\n   Hardware address\
    \ length.\n   hw_addr: 64 bits\n   Hardware address.\n   data_len: 32 bits\n \
    \  Length of packet data.\n   Payload: size defined by data_len\n   The payload\
    \ of the packet received.\n   The Verdict message format is as follows\n   0 \
    \                  1                   2                   3\n   0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Value                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Packet ID                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      Data Length                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      Payload . . .                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Value: 32 bits\n   This is the verdict to be imposed on the packet still sitting\n\
    \   in the FEC.  Verdicts could be:\n           NF_ACCEPT   Accept the packet\
    \ and let it continue its\n                       traversal.\n           NF_DROP\
    \     Drop the packet.\n   Packet ID: 32 bits\n   The packet identifier as passed\
    \ to the CPC by the FEC.\n   Data Length: 32 bits\n   The data length of the modified\
    \ packet (in bytes).  If you don't\n   modify the packet just set it to 0.\n \
    \  Payload:\n   Size as defined by the Data Length field.\n"
- title: 3.3.  IP Service NETLINK_ARPD
  contents:
  - "3.3.  IP Service NETLINK_ARPD\n   This service is used by CPCs for managing the\
    \ neighbor table in the\n   FE.  The message format used between the FEC and CPC\
    \ is described in\n   the section on the Neighbor Setup Service Module.\n   The\
    \ CPC service is expected to participate in neighbor solicitation\n   protocol(s).\n\
    \   A neighbor message of type RTM_NEWNEIGH is sent towards the CPC by\n   the\
    \ FE to inform the CPC of changes that might have happened on that\n   neighbor's\
    \ entry (e.g., a neighbor being perceived as unreachable).\n   RTM_GETNEIGH is\
    \ used to solicit the CPC for information on a specific\n   neighbor.\n"
- title: 4.    References
  contents:
  - '4.    References

    '
- title: 4.1.  Normative References
  contents:
  - "4.1.  Normative References\n   [1]  Braden, R., Clark, D. and S. Shenker, \"\
    Integrated Services in\n        the Internet Architecture: an Overview\", RFC\
    \ 1633, June 1994.\n   [2]  Baker, F., \"Requirements for IP Version 4 Routers\"\
    , RFC 1812,\n        June 1995.\n   [3]  Blake, S., Black, D., Carlson, M., Davies,\
    \ E, Wang, Z. and W.\n        Weiss, \"An Architecture for Differentiated Services\"\
    , RFC 2475,\n        December 1998.\n   [4]  Durham, D., Boyle, J., Cohen, R.,\
    \ Herzog, S., Rajan, R. and A.\n        Sastry, \"The COPS (Common Open Policy\
    \ Service) Protocol\", RFC\n        2748, January 2000.\n   [5]  Moy, J., \"OSPF\
    \ Version 2\", STD 54, RFC 2328, April 1998.\n   [6]  Case, J., Fedor, M., Schoffstall,\
    \ M. and C. Davin, \"Simple\n        Network Management Protocol (SNMP)\", STD\
    \ 15, RFC 1157, May 1990.\n   [7]  Andersson, L., Doolan, P., Feldman, N., Fredette,\
    \ A. and B.\n        Thomas, \"LDP Specification\", RFC 3036, January 2001.\n\
    \   [8]  Bernet, Y., Blake, S., Grossman, D. and A. Smith, \"An Informal\n   \
    \     Management Model for DiffServ Routers\", RFC 3290, May 2002.\n"
- title: 4.2.  Informative References
  contents:
  - "4.2.  Informative References\n   [9]  G. R. Wright, W. Richard Stevens.  \"TCP/IP\
    \ Illustrated Volume 2,\n        Chapter 20\", June 1995.\n   [10] http://www.netfilter.org\n\
    \   [11] http://diffserv.sourceforge.net\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   Netlink lives in a trusted environment of a single\
    \ host separated by\n   kernel and user space.  Linux capabilities ensure that\
    \ only someone\n   with CAP_NET_ADMIN capability (typically, the root user) is\
    \ allowed\n   to open sockets.\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   1) Andi Kleen, for man pages on netlink and rtnetlink.\n\
    \   2) Alexey Kuznetsov is credited for extending Netlink to the IP\n      service\
    \ delivery model.  The original Netlink character device was\n      written by\
    \ Alan Cox.\n   3) Jeremy Ethridge for taking the role of someone who did not\n\
    \      understand Netlink and reviewing the document to make sure that it\n  \
    \    made sense.\n"
- title: 'Appendix 1: Sample Service Hierarchy'
  contents:
  - "Appendix 1: Sample Service Hierarchy\n   In the diagram below we show a simple\
    \ IP service, foo, and the\n   interaction it has between CP and FE components\
    \ for the service\n   (labels 1-3).\n   The diagram is also used to demonstrate\
    \ CP<->FE addressing.  In this\n   section, we illustrate only the addressing\
    \ semantics.  In Appendix 2,\n   the diagram is referenced again to define the\
    \ protocol interaction\n   between service foo's CPC and FEC (labels 4-10).\n\
    \     CP\n    [--------------------------------------------------------.\n   \
    \ |   .-----.                                              |\n    |  |       \
    \                  . -------.                  |\n    |  |  CLI   |          \
    \     /           \\                |\n    |  |        |              | CP protocol\
    \ |               |\n    |         /->> -.          |  component  | <-.      \
    \     |\n    |    __ _/      |          |   For       |   |           |\n    |\
    \                |         | IP service  |   ^           |\n    |            \
    \    Y         |    foo      |   |           |\n    |                |       \
    \    ___________/    ^           |\n    |                Y   1,4,6,8,9 /  ^ 2,5,10\
    \   | 3,7       |\n     --------------- Y------------/---|----------|-----------\n\
    \                     |           ^    |          ^\n                   **|***********|****|**********|**********\n\
    \                   ************* Netlink  layer ************\n              \
    \     **|***********|****|**********|**********\n           FE        |      \
    \     |    ^          ^\n           .-------- Y-----------Y----|--------- |----.\n\
    \           |                    |              /      |\n           |       \
    \             Y            /        |\n           |          . --------^-------.\
    \  /          |\n           |          |FE component/module|/          |\n   \
    \        |          |  for IP Service   |           |\n    --->---|------>---|\
    \     foo           |----->-----|------>--\n           |           -------------------\
    \            |\n           |                                          |\n    \
    \       |                                          |\n            ------------------------------------------\n\
    \   The control plane protocol for IP service foo does the following to\n   connect\
    \ to its FE counterpart.  The steps below are also numbered\n   above in the diagram.\n\
    \   1) Connect to the IP service foo through a socket connect.  A typical\n  \
    \    connection would be via a call to: socket(AF_NETLINK, SOCK_RAW,\n      NETLINK_FOO).\n\
    \   2) Bind to listen to specific asynchronous events for service foo.\n   3)\
    \ Bind to listen to specific asynchronous FE events.\n"
- title: 'Appendix 2: Sample Protocol for the Foo IP Service'
  contents:
  - "Appendix 2: Sample Protocol for the Foo IP Service\n   Our example IP service\
    \ foo is used again to demonstrate how one can\n   deploy a simple IP service\
    \ control using Netlink.\n   These steps are continued from Appendix 1 (hence\
    \ the numbering).\n   4) Query for current config of FE component.\n   5) Receive\
    \ response to (4) via channel on (3).\n   6) Query for current state of IP service\
    \ foo.\n   7) Receive response to (6) via channel on (2).\n   8) Register the\
    \ protocol-specific packets you would like the FE to\n      forward to you.\n\
    \   9) Send service-specific foo commands and receive responses for them,\n  \
    \    if needed.\n"
- title: 'Appendix 2a: Interacting with Other IP services'
  contents:
  - "Appendix 2a: Interacting with Other IP services\n   The diagram in Appendix 1\
    \ shows another control component configuring\n   the same service.  In this case,\
    \ it is a proprietary Command Line\n   Interface.  The CLI may or may not be using\
    \ the Netlink protocol to\n   communicate to the foo component.  If the CLI issues\
    \ commands that\n   will affect the policy of the FEC for service foo then, then\
    \ the foo\n   CPC is notified.  It could then make algorithmic decisions based\
    \ on\n   this input.  For example, if an FE allowed another service to delete\n\
    \   policies installed by a different service and a policy that foo\n   installed\
    \ was deleted by service bar, there might be a need to\n   propagate this to all\
    \ the peers of service foo.\n"
- title: 'Appendix 3: Examples'
  contents:
  - "Appendix 3: Examples\n   In this example, we show a simple configuration Netlink\
    \ message sent\n   from a TC CPC to an egress TC FIFO queue.  This queue algorithm\
    \ is\n   based on packet counting and drops packets when the limit exceeds 100\n\
    \   packets.  We assume that the queue is in a hierarchical setup with a\n   parent\
    \ 100:0 and a classid of 100:1 and that it is to be installed on\n   a device\
    \ with an ifindex of 4.\n   0                   1                   2        \
    \           3\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \ |                          Length (52)                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Type (RTM_NEWQDISC)           | Flags (NLM_F_EXCL |         |\n   |    \
    \                           |NLM_F_CREATE | NLM_F_REQUEST)|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      Sequence Number(arbitrary number)      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Process ID (0)                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |Family(AF_INET)|  Reserved1    |         Reserved1           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Interface Index  (4)                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      Qdisc handle  (0x1000001)              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Parent Qdisc   (0x1000000)              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        TCM Info  (0)                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Type (TCA_KIND)   |           Length(4)          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Value (\"pfifo\")                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Type (TCA_OPTIONS) |          Length(4)          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Value (limit=100)                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jamal Hadi Salim\n   Znyx Networks\n   Ottawa, Ontario\n\
    \   Canada\n   EMail: hadi@znyx.com\n   Hormuzd M Khosravi\n   Intel\n   2111\
    \ N.E. 25th Avenue JF3-206\n   Hillsboro OR 97124-5961\n   USA\n   Phone: +1 503\
    \ 264 0334\n   EMail: hormuzd.m.khosravi@intel.com\n   Andi Kleen\n   SuSE\n \
    \  Stahlgruberring 28\n   81829 Muenchen\n   Germany\n   EMail: ak@suse.de\n \
    \  Alexey Kuznetsov\n   INR/Swsoft\n   Moscow\n   Russia\n   EMail: kuznet@ms2.inr.ac.ru\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2003).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assignees.\n\
    \   This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
