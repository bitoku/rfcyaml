Abstract The IETF makes heavy use of email lists to conduct its work.
This often involves accessing the archived history of those email lists.
Participants would like to have the ability to browse and search those archives using standard IMAP clients.
This memo captures the requirements for providing a service that would allow such browsing and searching, and it is intended as input to a later activity for the design and development of such a service.
The IETF makes heavy use of email lists to conduct its work.
This often involves accessing the archived history of those email lists.
Requirements for improved web based browsing and searching of these archives are captured in [RFC6778].
Participants would like to have the ability to browse and search those archives using standard IMAP clients.
This memo captures the requirements for providing a service that would allow such browsing and searching, and it is intended as input to a later activity for the design and development of such a service.
Requirements for IMAP Access to Archived IETF Lists
Many participants would prefer to access the list archives using IMAP [RFC3501].
Providing this access while meeting the following requirements will likely require an IMAP server with specialized capabilities.
The system should expose the archive using an IMAP interface, with each list represented as a mailbox.
This interface must work with standard IMAP clients.
The interface should allow users that have provided credentials to each have their own read/unread marks for messages.
Allowing other annotation is desirable.
The implementation should consider taking advantage of the IMAP extensions for ANNOTATE [RFC5257] and METADATA [RFC5464].
It must be possible for administrators to set per user storage quotas, limiting the space a user can consume with annotations.
The interface must not allow users to modify the underlying message or metadata other than the read/unread marks and annotations described above.
Specifically, users must not be able to delete or insert messages, or move them between mailboxes in the archive.
(Clients will, of course, be able to make local copies of messages from the archive.)
The interface must have server side searching enabled and should scale to support multiple simultaneous extensive searches.
The server should provide the enhanced search capabilities described in [RFC6778].
The implementation should consider taking advantage of the extensions defined for IMAP SORT and THREAD [RFC5256], multimailbox search [RFC6237], and fuzzy search [RFC6203].
When the system requires credentials, it must use the datatracker's authentication system.
While the vast majority of archived lists have an open access policy, some archived lists have restricted archives.
The system must make it possible to limit access to a restricted archive based on login credentials.
The system must allow access to open archives with or without providing credentials.
Specifically, the system will allow anonymous access using the Simple Authentication and Security Layer (SASL) ANONYMOUS mechanism [RFC4505] or a LOGIN command with a special username (such as "anonymous") determined by the administrator.
The implementation should anticipate internationalized email addresses as discussed in the following three documents:
There is no firm requirement at this time.
Security Considerations Allowing IMAP as an interface for browsing and searching the archives of IETF email lists does not affect the security of the Internet in any significant fashion.
Searching can be input/output (I/O) and CPU intensive.
Clients that make local copies of all messages in a mailbox can also present an I/O burden, particularly when synchronizing for the first time.
The implementors of this interface should consider the potential for maliciously crafted searches attempting to consume a damaging amount of resources.
The implementors should consider the potential for denial of service attacks through making many connections to the interface.
The implementors should consider ways to rate limit
I/O due to making local copies of messages.
Storing read/unread marks and other annotations requires potentially unbounded storage space.
The implementors of this interface should consider the potential for maliciously crafted annotations attempting to consume a damaging amount of storage space.
The implementors should consider making it easy to alert the administrator when a user begins consuming exceptional amounts of space.
