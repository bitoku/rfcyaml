- title: __initial_text__
  contents:
  - '                   Sieve: An Email Filtering Language

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a language for filtering email messages\
    \ at\n   time of final delivery.  It is designed to be implementable on either\n\
    \   a mail client or mail server.  It is meant to be extensible, simple,\n   and\
    \ independent of access protocol, mail architecture, and operating\n   system.\
    \  It is suitable for running on a mail server where users may\n   not be allowed\
    \ to execute arbitrary programs, such as on black box\n   Internet Message Access\
    \ Protocol (IMAP) servers, as the base language\n   has no variables, loops, or\
    \ ability to shell out to external\n   programs.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Conventions Used in This Document ..........................4\n  \
    \    1.2. Example Mail Messages ......................................5\n   2.\
    \ Design ..........................................................6\n      2.1.\
    \ Form of the Language .......................................6\n      2.2. Whitespace\
    \ .................................................7\n      2.3. Comments ...................................................7\n\
    \      2.4. Literal Data ...............................................7\n  \
    \         2.4.1. Numbers .............................................7\n    \
    \       2.4.2. Strings .............................................8\n      \
    \            2.4.2.1. String Lists ...............................9\n        \
    \          2.4.2.2. Headers ....................................9\n          \
    \        2.4.2.3. Addresses .................................10\n            \
    \      2.4.2.4. Encoding Characters Using\n                           \"encoded-character\"\
    \ .......................10\n      2.5. Tests .....................................................11\n\
    \           2.5.1. Test Lists .........................................12\n  \
    \    2.6. Arguments .................................................12\n    \
    \       2.6.1. Positional Arguments ...............................12\n      \
    \     2.6.2. Tagged Arguments ...................................12\n        \
    \   2.6.3. Optional Arguments .................................13\n          \
    \ 2.6.4. Types of Arguments .................................13\n      2.7. String\
    \ Comparison .........................................13\n           2.7.1. Match\
    \ Type .........................................14\n           2.7.2. Comparisons\
    \ across Character Sets ..................15\n           2.7.3. Comparators ........................................15\n\
    \           2.7.4. Comparisons against Addresses ......................16\n  \
    \    2.8. Blocks ....................................................17\n    \
    \  2.9. Commands ..................................................17\n      2.10.\
    \ Evaluation ...............................................18\n           2.10.1.\
    \ Action Interaction ................................18\n           2.10.2. Implicit\
    \ Keep .....................................18\n           2.10.3. Message Uniqueness\
    \ in a Mailbox ...................19\n           2.10.4. Limits on Numbers of\
    \ Actions ......................19\n           2.10.5. Extensions and Optional\
    \ Features ..................19\n           2.10.6. Errors ............................................20\n\
    \           2.10.7. Limits on Execution ...............................20\n  \
    \ 3. Control Commands ...............................................21\n    \
    \  3.1. Control if ................................................21\n      3.2.\
    \ Control require ...........................................22\n      3.3. Control\
    \ stop ..............................................22\n   4. Action Commands\
    \ ................................................23\n      4.1. Action fileinto\
    \ ...........................................23\n      4.2. Action redirect ...........................................23\n\
    \      4.3. Action keep ...............................................24\n  \
    \    4.4. Action discard ............................................25\n   5.\
    \ Test Commands ..................................................26\n      5.1.\
    \ Test address ..............................................26\n      5.2. Test\
    \ allof ................................................27\n      5.3. Test anyof\
    \ ................................................27\n      5.4. Test envelope\
    \ .............................................27\n      5.5. Test exists ...............................................28\n\
    \      5.6. Test false ................................................28\n  \
    \    5.7. Test header ...............................................29\n    \
    \  5.8. Test not ..................................................29\n      5.9.\
    \ Test size .................................................29\n      5.10. Test\
    \ true ................................................30\n   6. Extensibility\
    \ ..................................................30\n      6.1. Capability\
    \ String .........................................31\n      6.2. IANA Considerations\
    \ .......................................31\n           6.2.1. Template for Capability\
    \ Registrations ..............32\n           6.2.2. Handling of Existing Capability\
    \ Registrations ......32\n           6.2.3. Initial Capability Registrations ...................32\n\
    \      6.3. Capability Transport ......................................33\n  \
    \ 7. Transmission ...................................................33\n   8.\
    \ Parsing ........................................................34\n      8.1.\
    \ Lexical Tokens ............................................34\n      8.2. Grammar\
    \ ...................................................36\n      8.3. Statement\
    \ Elements ........................................36\n   9. Extended Example\
    \ ...............................................37\n   10. Security Considerations\
    \ .......................................38\n   11. Acknowledgments ...............................................39\n\
    \   12. Normative References ..........................................39\n  \
    \ 13. Informative References ........................................40\n   14.\
    \ Changes from RFC 3028 .........................................41\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This memo documents a language that can be used to create\
    \ filters for\n   electronic mail.  It is not tied to any particular operating\
    \ system\n   or mail architecture.  It requires the use of [IMAIL]-compliant\n\
    \   messages, but should otherwise generalize to many systems.\n   The language\
    \ is powerful enough to be useful but limited in order to\n   allow for a safe\
    \ server-side filtering system.  The intention is to\n   make it impossible for\
    \ users to do anything more complex (and\n   dangerous) than write simple mail\
    \ filters, along with facilitating\n   the use of graphical user interfaces (GUIs)\
    \ for filter creation and\n   manipulation.  The base language was not designed\
    \ to be Turing-\n   complete: it does not have a loop control structure or functions.\n\
    \   Scripts written in Sieve are executed during final delivery, when the\n  \
    \ message is moved to the user-accessible mailbox.  In systems where\n   the Mail\
    \ Transfer Agent (MTA) does final delivery, such as\n   traditional Unix mail,\
    \ it is reasonable to filter when the MTA\n   deposits mail into the user's mailbox.\n\
    \   There are a number of reasons to use a filtering system.  Mail\n   traffic\
    \ for most users has been increasing due to increased usage of\n   email, the\
    \ emergence of unsolicited email as a form of advertising,\n   and increased usage\
    \ of mailing lists.\n   Experience at Carnegie Mellon has shown that if a filtering\
    \ system is\n   made available to users, many will make use of it in order to\
    \ file\n   messages from specific users or mailing lists.  However, many others\n\
    \   did not make use of the Andrew system's FLAMES filtering language\n   [FLAMES]\
    \ due to difficulty in setting it up.\n   Because of the expectation that users\
    \ will make use of filtering if\n   it is offered and easy to use, this language\
    \ has been made simple\n   enough to allow many users to make use of it, but rich\
    \ enough that it\n   can be used productively.  However, it is expected that GUI-based\n\
    \   editors will be the preferred way of editing filters for a large\n   number\
    \ of users.\n"
- title: 1.1.  Conventions Used in This Document
  contents:
  - "1.1.  Conventions Used in This Document\n   In the sections of this document\
    \ that discuss the requirements of\n   various keywords and operators, the following\
    \ conventions have been\n   adopted.\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [KEYWORDS].\n   Each section on a command (test, action, or control) has\
    \ a line\n   labeled \"Usage:\".  This line describes the usage of the command,\n\
    \   including its name and its arguments.  Required arguments are listed\n   inside\
    \ angle brackets (\"<\" and \">\").  Optional arguments are listed\n   inside\
    \ square brackets (\"[\" and \"]\").  Each argument is followed by\n   its type,\
    \ so \"<key: string>\" represents an argument called \"key\" that\n   is a string.\
    \  Literal strings are represented with double-quoted\n   strings.  Alternatives\
    \ are separated with slashes, and parentheses\n   are used for grouping, similar\
    \ to [ABNF].\n   In the \"Usage:\" line, there are three special pieces of syntax\
    \ that\n   are frequently repeated, MATCH-TYPE, COMPARATOR, and ADDRESS-PART.\n\
    \   These are discussed in sections 2.7.1, 2.7.3, and 2.7.4,\n   respectively.\n\
    \   The formal grammar for these commands is defined in section 8 and is\n   the\
    \ authoritative reference on how to construct commands, but the\n   formal grammar\
    \ does not specify the order, semantics, number or types\n   of arguments to commands,\
    \ or the legal command names.  The intent is\n   to allow for extension without\
    \ changing the grammar.\n"
- title: 1.2.  Example Mail Messages
  contents:
  - "1.2.  Example Mail Messages\n   The following mail messages will be used throughout\
    \ this document in\n   examples.\n   Message A\n   -----------------------------------------------------------\n\
    \   Date: Tue, 1 Apr 1997 09:06:31 -0800 (PST)\n   From: coyote@desert.example.org\n\
    \   To: roadrunner@acme.example.com\n   Subject: I have a present for you\n  \
    \ Look, I'm sorry about the whole anvil thing, and I really\n   didn't mean to\
    \ try and drop it on you from the top of the\n   cliff.  I want to try to make\
    \ it up to you.  I've got some\n   great birdseed over here at my place--top of\
    \ the line\n   stuff--and if you come by, I'll have it all wrapped up\n   for\
    \ you.  I'm really sorry for all the problems I've caused\n   for you over the\
    \ years, but I know we can work this out.\n   --\n   Wile E. Coyote   \"Super\
    \ Genius\"   coyote@desert.example.org\n   -----------------------------------------------------------\n\
    \   Message B\n   -----------------------------------------------------------\n\
    \   From: youcouldberich!@reply-by-postal-mail.invalid\n   Sender: b1ff@de.res.example.com\n\
    \   To: rube@landru.example.com\n   Date:  Mon, 31 Mar 1997 18:26:10 -0800\n \
    \  Subject: $$$ YOU, TOO, CAN BE A MILLIONAIRE! $$$\n   YOU MAY HAVE ALREADY WON\
    \ TEN MILLION DOLLARS, BUT I DOUBT\n   IT!  SO JUST POST THIS TO SIX HUNDRED NEWSGROUPS!\
    \  IT WILL\n   GUARANTEE THAT YOU GET AT LEAST FIVE RESPONSES WITH MONEY!\n  \
    \ MONEY! MONEY! COLD HARD CASH!  YOU WILL RECEIVE OVER\n   $20,000 IN LESS THAN\
    \ TWO MONTHS!  AND IT'S LEGAL!!!!!!!!!\n   !!!!!!!!!!!!!!!!!!111111111!!!!!!!11111111111!!1\
    \  JUST\n   SEND $5 IN SMALL, UNMARKED BILLS TO THE ADDRESSES BELOW!\n   -----------------------------------------------------------\n"
- title: 2.  Design
  contents:
  - '2.  Design

    '
- title: 2.1.  Form of the Language
  contents:
  - "2.1.  Form of the Language\n   The language consists of a set of commands.  Each\
    \ command consists of\n   a set of tokens delimited by whitespace.  The command\
    \ identifier is\n   the first token and it is followed by zero or more argument\
    \ tokens.\n   Arguments may be literal data, tags, blocks of commands, or test\n\
    \   commands.\n   With the exceptions of strings and comments, the language is\
    \ limited\n   to US-ASCII characters.  Strings and comments may contain octets\n\
    \   outside the US-ASCII range.  Specifically, they will normally be in\n   UTF-8,\
    \ as specified in [UTF-8].  NUL (US-ASCII 0) is never permitted\n   in scripts,\
    \ while CR and LF can only appear as the CRLF line ending.\n      Note: While\
    \ this specification permits arbitrary octets to appear\n      in Sieve scripts\
    \ inside strings and comments, this has made it\n      difficult to robustly handle\
    \ Sieve scripts in programs that are\n      sensitive to the encodings used. \
    \ The \"encoded-character\"\n      capability (section 2.4.2.4) provides an alternative\
    \ means of\n      representing such octets in strings using just US-ASCII\n  \
    \    characters.  As such, the use of non-UTF-8 text in scripts should\n     \
    \ be considered a deprecated feature that may be abandoned.\n   Tokens other than\
    \ strings are considered case-insensitive.\n"
- title: 2.2.  Whitespace
  contents:
  - "2.2.  Whitespace\n   Whitespace is used to separate tokens.  Whitespace is made\
    \ up of\n   tabs, newlines (CRLF, never just CR or LF), and the space character.\n\
    \   The amount of whitespace used is not significant.\n"
- title: 2.3.  Comments
  contents:
  - "2.3.  Comments\n   Two types of comments are offered.  Comments are semantically\n\
    \   equivalent to whitespace and can be used anyplace that whitespace is\n   (with\
    \ one exception in multi-line strings, as described in the\n   grammar).\n   Hash\
    \ comments begin with a \"#\" character that is not contained within\n   a string\
    \ and continue until the next CRLF.\n   Example:  if size :over 100k { # this\
    \ is a comment\n                discard;\n             }\n   Bracketed comments\
    \ begin with the token \"/*\" and end with \"*/\"\n   outside of a string.  Bracketed\
    \ comments may span multiple lines.\n   Bracketed comments do not nest.\n   Example:\
    \  if size :over 100K { /* this is a comment\n                this is still a\
    \ comment */ discard /* this is a comment\n                */ ;\n            \
    \ }\n"
- title: 2.4.  Literal Data
  contents:
  - "2.4.  Literal Data\n   Literal data means data that is not executed, merely evaluated\
    \ \"as\n   is\", to be used as arguments to commands.  Literal data is limited\
    \ to\n   numbers, strings, and string lists.\n"
- title: 2.4.1.  Numbers
  contents:
  - "2.4.1.  Numbers\n   Numbers are given as ordinary decimal numbers.  As a shorthand\
    \ for\n   expressing larger values, such as message sizes, a suffix of \"K\",\n\
    \   \"M\", or \"G\" MAY be appended to indicate a multiple of a power of two.\n\
    \   To be comparable with the power-of-two-based versions of SI units\n   that\
    \ computers frequently use, \"K\" specifies kibi-, or 1,024 (2^10)\n   times the\
    \ value of the number; \"M\" specifies mebi-, or 1,048,576\n   (2^20) times the\
    \ value of the number; and \"G\" specifies gibi-, or\n   1,073,741,824 (2^30)\
    \ times the value of the number [BINARY-SI].\n   Implementations MUST support\
    \ integer values in the inclusive range\n   zero to 2,147,483,647 (2^31 - 1),\
    \ but MAY support larger values.\n   Only non-negative integers are permitted\
    \ by this specification.\n"
- title: 2.4.2.  Strings
  contents:
  - "2.4.2.  Strings\n   Scripts involve large numbers of string values as they are\
    \ used for\n   pattern matching, addresses, textual bodies, etc.  Typically, short\n\
    \   quoted strings suffice for most uses, but a more convenient form is\n   provided\
    \ for longer strings such as bodies of messages.\n   A quoted string starts and\
    \ ends with a single double quote (the <\">\n   character, US-ASCII 34).  A backslash\
    \ (\"\\\", US-ASCII 92) inside of a\n   quoted string is followed by either another\
    \ backslash or a double\n   quote.  These two-character sequences represent a\
    \ single backslash or\n   double quote within the value, respectively.\n   Scripts\
    \ SHOULD NOT escape other characters with a backslash.\n   An undefined escape\
    \ sequence (such as \"\\a\" in a context where \"a\" has\n   no special meaning)\
    \ is interpreted as if there were no backslash (in\n   this case, \"\\a\" is just\
    \ \"a\"), though that may be changed by\n   extensions.\n   Non-printing characters\
    \ such as tabs, CRLF, and control characters\n   are permitted in quoted strings.\
    \  Quoted strings MAY span multiple\n   lines.  An unencoded NUL (US-ASCII 0)\
    \ is not allowed in strings; see\n   section 2.4.2.4 for how it can be encoded.\n\
    \   As message header data is converted to [UTF-8] for comparison (see\n   section\
    \ 2.7.2), most string values will use the UTF-8 encoding.\n   However, implementations\
    \ MUST accept all strings that match the\n   grammar in section 8.  The ability\
    \ to use non-UTF-8 encoded strings\n   matches existing practice and has proven\
    \ to be useful both in tests\n   for invalid data and in arguments containing\
    \ raw MIME parts for\n   extension actions that generate outgoing messages.\n\
    \   For entering larger amounts of text, such as an email message, a\n   multi-line\
    \ form is allowed.  It starts with the keyword \"text:\",\n   followed by a CRLF,\
    \ and ends with the sequence of a CRLF, a single\n   period, and another CRLF.\
    \  The CRLF before the final period is\n   considered part of the value.  In order\
    \ to allow the message to\n   contain lines with a single dot, lines are dot-stuffed.\
    \  That is,\n   when composing a message body, an extra '.' is added before each\
    \ line\n   that begins with a '.'.  When the server interprets the script, these\n\
    \   extra dots are removed.  Note that a line that begins with a dot\n   followed\
    \ by a non-dot character is not interpreted as dot-stuffed;\n   that is, \".foo\"\
    \ is interpreted as \".foo\".  However, because this is\n   potentially ambiguous,\
    \ scripts SHOULD be properly dot-stuffed so such\n   lines do not appear.\n  \
    \ Note that a hashed comment or whitespace may occur in between the\n   \"text:\"\
    \ and the CRLF, but not within the string itself.  Bracketed\n   comments are\
    \ not allowed here.\n"
- title: 2.4.2.1.  String Lists
  contents:
  - "2.4.2.1.  String Lists\n   When matching patterns, it is frequently convenient\
    \ to match against\n   groups of strings instead of single strings.  For this\
    \ reason, a list\n   of strings is allowed in many tests, implying that if the\
    \ test is\n   true using any one of the strings, then the test is true.\n   For\
    \ instance, the test 'header :contains [\"To\", \"Cc\"]\n   [\"me@example.com\"\
    , \"me00@landru.example.com\"]' is true if either a To\n   header or Cc header\
    \ of the input message contains either of the email\n   addresses \"me@example.com\"\
    \ or \"me00@landru.example.com\".\n   Conversely, in any case where a list of\
    \ strings is appropriate, a\n   single string is allowed without being a member\
    \ of a list: it is\n   equivalent to a list with a single member.  This means\
    \ that the test\n   'exists \"To\"' is equivalent to the test 'exists [\"To\"\
    ]'.\n"
- title: 2.4.2.2.  Headers
  contents:
  - "2.4.2.2.  Headers\n   Headers are a subset of strings.  In the Internet Message\n\
    \   Specification [IMAIL], each header line is allowed to have whitespace\n  \
    \ nearly anywhere in the line, including after the field name and\n   before the\
    \ subsequent colon.  Extra spaces between the header name\n   and the \":\" in\
    \ a header field are ignored.\n   A header name never contains a colon.  The \"\
    From\" header refers to a\n   line beginning \"From:\" (or \"From   :\", etc.).\
    \  No header will match\n   the string \"From:\" due to the trailing colon.\n\
    \   Similarly, no header will match a syntactically invalid header name.\n   An\
    \ implementation MUST NOT cause an error for syntactically invalid\n   header\
    \ names in tests.\n   Header lines are unfolded as described in [IMAIL] section\
    \ 2.2.3.\n   Interpretation of header data SHOULD be done according to [MIME3]\n\
    \   section 6.2 (see section 2.7.2 below for details).\n"
- title: 2.4.2.3.  Addresses
  contents:
  - "2.4.2.3.  Addresses\n   A number of commands call for email addresses, which\
    \ are also a\n   subset of strings.  When these addresses are used in outbound\n\
    \   contexts, addresses must be compliant with [IMAIL], but are further\n   constrained\
    \ within this document.  Using the symbols defined in\n   [IMAIL], section 3,\
    \ the syntax of an address is:\n   sieve-address = addr-spec                ;\
    \ simple address\n                 / phrase \"<\" addr-spec \">\" ; name & addr-spec\n\
    \   That is, routes and group syntax are not permitted.  If multiple\n   addresses\
    \ are required, use a string list.  Named groups are not\n   permitted.\n   It\
    \ is an error for a script to execute an action with a value for use\n   as an\
    \ outbound address that doesn't match the \"sieve-address\" syntax.\n"
- title: 2.4.2.4.  Encoding Characters Using "encoded-character"
  contents:
  - "2.4.2.4.  Encoding Characters Using \"encoded-character\"\n   When the \"encoded-character\"\
    \ extension is in effect, certain\n   character sequences in strings are replaced\
    \ by their decoded value.\n   This happens after escape sequences are interpreted\
    \ and dot-\n   unstuffing has been done.  Implementations SHOULD support \"encoded-\n\
    \   character\".\n   Arbitrary octets can be embedded in strings by using the\
    \ syntax\n   encoded-arb-octets.  The sequence is replaced by the octets with\
    \ the\n   hexadecimal values given by each hex-pair.\n   blank               \
    \ = WSP / CRLF\n   encoded-arb-octets   = \"${hex:\" hex-pair-seq \"}\"\n   hex-pair-seq\
    \         = *blank hex-pair *(1*blank hex-pair) *blank\n   hex-pair          \
    \   = 1*2HEXDIG\n   Where WSP and HEXDIG non-terminals are defined in Appendix\
    \ B.1 of\n   [ABNF].\n   It may be inconvenient or undesirable to enter Unicode\
    \ characters\n   verbatim, and for these cases the syntax encoded-unicode-char\
    \ can be\n   used.  The sequence is replaced by the UTF-8 encoding of the\n  \
    \ specified Unicode characters, which are identified by the hexadecimal\n   value\
    \ of unicode-hex.\n   encoded-unicode-char = \"${unicode:\" unicode-hex-seq \"\
    }\"\n   unicode-hex-seq      = *blank unicode-hex\n                          *(1*blank\
    \ unicode-hex) *blank\n   unicode-hex          = 1*HEXDIG\n   It is an error for\
    \ a script to use a hexadecimal value that isn't in\n   either the range 0 to\
    \ D7FF or the range E000 to 10FFFF.  (The range\n   D800 to DFFF is excluded as\
    \ those character numbers are only used as\n   part of the UTF-16 encoding form\
    \ and are not applicable to the UTF-8\n   encoding that the syntax here represents.)\n\
    \      Note: Implementations MUST NOT raise an error for an out-of-range\n   \
    \   Unicode value unless the sequence containing it is well-formed\n      according\
    \ to the grammar.\n   The capability string for use with the require command is\
    \ \"encoded-\n   character\".\n   In the following script, message B is discarded,\
    \ since the specified\n   test string is equivalent to \"$$$\".\n   Example: \
    \ require \"encoded-character\";\n             if header :contains \"Subject\"\
    \ \"$${hex:24 24}\" {\n                discard;\n             }\n   The following\
    \ examples demonstrate valid and invalid encodings and\n   how they are handled:\n\
    \     \"$${hex:40}\"         -> \"$@\"\n     \"${hex: 40 }\"        -> \"@\"\n\
    \     \"${HEX: 40}\"         -> \"@\"\n     \"${hex:40\"           -> \"${hex:40\"\
    \n     \"${hex:400}\"         -> \"${hex:400}\"\n     \"${hex:4${hex:30}}\"  ->\
    \ \"${hex:40}\"\n     \"${unicode:40}\"      -> \"@\"\n     \"${ unicode:40}\"\
    \     -> \"${ unicode:40}\"\n     \"${UNICODE:40}\"      -> \"@\"\n     \"${UnICoDE:0000040}\"\
    \ -> \"@\"\n     \"${Unicode:40}\"      -> \"@\"\n     \"${Unicode:Cool}\"   \
    \ -> \"${Unicode:Cool}\"\n     \"${unicode:200000}\"  -> error\n     \"${Unicode:DF01}\
    \     -> error\n"
- title: 2.5.  Tests
  contents:
  - "2.5.  Tests\n   Tests are given as arguments to commands in order to control\
    \ their\n   actions.  In this document, tests are given to if/elsif to decide\n\
    \   which block of code is run.\n"
- title: 2.5.1.  Test Lists
  contents:
  - "2.5.1.  Test Lists\n   Some tests (\"allof\" and \"anyof\", which implement logical\
    \ \"and\" and\n   logical \"or\", respectively) may require more than a single\
    \ test as an\n   argument.  The test-list syntax element provides a way of grouping\n\
    \   tests as a comma-separated list in parentheses.\n   Example:  if anyof (not\
    \ exists [\"From\", \"Date\"],\n                   header :contains \"from\" \"\
    fool@example.com\") {\n                discard;\n             }\n"
- title: 2.6.  Arguments
  contents:
  - "2.6.  Arguments\n   In order to specify what to do, most commands take arguments.\
    \  There\n   are three types of arguments: positional, tagged, and optional.\n\
    \   It is an error for a script, on a single command, to use conflicting\n   arguments\
    \ or to use a tagged or optional argument more than once.\n"
- title: 2.6.1.  Positional Arguments
  contents:
  - "2.6.1.  Positional Arguments\n   Positional arguments are given to a command\
    \ that discerns their\n   meaning based on their order.  When a command takes\
    \ positional\n   arguments, all positional arguments must be supplied and must\
    \ be in\n   the order prescribed.\n"
- title: 2.6.2.  Tagged Arguments
  contents:
  - "2.6.2.  Tagged Arguments\n   This document provides for tagged arguments in the\
    \ style of\n   CommonLISP.  These are also similar to flags given to commands\
    \ in\n   most command-line systems.\n   A tagged argument is an argument for a\
    \ command that begins with \":\"\n   followed by a tag naming the argument, such\
    \ as \":contains\".  This\n   argument means that zero or more of the next tokens\
    \ have some\n   particular meaning depending on the argument.  These next tokens\
    \ may\n   be literal data, but they are never blocks.\n   Tagged arguments are\
    \ similar to positional arguments, except that\n   instead of the meaning being\
    \ derived from the command, it is derived\n   from the tag.\n   Tagged arguments\
    \ must appear before positional arguments, but they\n   may appear in any order\
    \ with other tagged arguments.  For simplicity\n   of the specification, this\
    \ is not expressed in the syntax definitions\n   with commands, but they still\
    \ may be reordered arbitrarily provided\n   they appear before positional arguments.\
    \  Tagged arguments may be\n   mixed with optional arguments.\n   Tagged arguments\
    \ SHOULD NOT take tagged arguments as arguments.\n"
- title: 2.6.3.  Optional Arguments
  contents:
  - "2.6.3.  Optional Arguments\n   Optional arguments are exactly like tagged arguments\
    \ except that they\n   may be left out, in which case a default value is implied.\
    \  Because\n   optional arguments tend to result in shorter scripts, they have\
    \ been\n   used far more than tagged arguments.\n   One particularly noteworthy\
    \ case is the \":comparator\" argument, which\n   allows the user to specify which\
    \ comparator [COLLATION] will be used\n   to compare two strings, since different\
    \ languages may impose\n   different orderings on UTF-8 [UTF-8] strings.\n"
- title: 2.6.4.  Types of Arguments
  contents:
  - "2.6.4.  Types of Arguments\n   Abstractly, arguments may be literal data, tests,\
    \ or blocks of\n   commands.  In this way, an \"if\" control structure is merely\
    \ a command\n   that happens to take a test and a block as arguments and may execute\n\
    \   the block of code.\n   However, this abstraction is ambiguous from a parsing\
    \ standpoint.\n   The grammar in section 8.2 presents a parsable version of this:\n\
    \   Arguments are string lists (string-lists), numbers, and tags, which\n   may\
    \ be followed by a test or a test list (test-list), which may be\n   followed\
    \ by a block of commands.  No more than one test or test list,\n   or more than\
    \ one block of commands, may be used, and commands that\n   end with a block of\
    \ commands do not end with semicolons.\n"
- title: 2.7.  String Comparison
  contents:
  - "2.7.  String Comparison\n   When matching one string against another, there are\
    \ a number of ways\n   of performing the match operation.  These are accomplished\
    \ with three\n   types of matches: an exact match, a substring match, and a wildcard\n\
    \   glob-style match.  These are described below.\n   In order to provide for\
    \ matches between character sets and case\n   insensitivity, Sieve uses the comparators\
    \ defined in the Internet\n   Application Protocol Collation Registry [COLLATION].\n\
    \   However, when a string represents the name of a header, the\n   comparator\
    \ is never user-specified.  Header comparisons are always\n   done with the \"\
    i;ascii-casemap\" operator, i.e., case-insensitive\n   comparisons, because this\
    \ is the way things are defined in the\n   message specification [IMAIL].\n"
- title: 2.7.1.  Match Type
  contents:
  - "2.7.1.  Match Type\n   Commands that perform string comparisons may have an optional\
    \ match\n   type argument.  The three match types in this specification are\n\
    \   \":contains\", \":is\", and \":matches\".\n   The \":contains\" match type\
    \ describes a substring match.  If the value\n   argument contains the key argument\
    \ as a substring, the match is true.\n   For instance, the string \"frobnitzm\"\
    \ contains \"frob\" and \"nit\", but\n   not \"fbm\".  The empty key (\"\") is\
    \ contained in all values.\n   The \":is\" match type describes an absolute match;\
    \ if the contents of\n   the first string are absolutely the same as the contents\
    \ of the\n   second string, they match.  Only the string \"frobnitzm\" is the\
    \ string\n   \"frobnitzm\".  The empty key (\"\") only \":is\" matches with the\
    \ empty\n   value.\n   The \":matches\" match type specifies a wildcard match\
    \ using the\n   characters \"*\" and \"?\"; the entire value must be matched.\
    \  \"*\"\n   matches zero or more characters in the value and \"?\" matches a\
    \ single\n   character in the value, where the comparator that is used (see\n\
    \   section 2.7.3) defines what a character is.  For example, the\n   comparators\
    \ \"i;octet\" and \"i;ascii-casemap\" define a character to be\n   a single octet,\
    \ so \"?\"  will always match exactly one octet when one\n   of those comparators\
    \ is in use.  In contrast, a Unicode-based\n   comparator would define a character\
    \ to be any UTF-8 octet sequence\n   encoding one Unicode character and thus \"\
    ?\" may match more than one\n   octet.  \"?\" and \"*\" may be escaped as \"\\\
    \\?\" and \"\\\\*\" in strings to\n   match against themselves.  The first backslash\
    \ escapes the second\n   backslash; together, they escape the \"*\".  This is\
    \ awkward, but it is\n   commonplace in several programming languages that use\
    \ globs and\n   regular expressions.\n   In order to specify what type of match\
    \ is supposed to happen,\n   commands that support matching take optional arguments\
    \ \":matches\",\n   \":is\", and \":contains\".  Commands default to using \"\
    :is\" matching if\n   no match type argument is supplied.  Note that these modifiers\n\
    \   interact with comparators; in particular, only comparators that\n   support\
    \ the \"substring match\" operation are suitable for matching\n   with \":contains\"\
    \ or \":matches\".  It is an error to use a comparator\n   with \":contains\"\
    \ or \":matches\" that is not compatible with it.\n   It is an error to give more\
    \ than one of these arguments to a given\n   command.\n   For convenience, the\
    \ \"MATCH-TYPE\" syntax element is defined here as\n   follows:\n   Syntax:  \
    \ \":is\" / \":contains\" / \":matches\"\n"
- title: 2.7.2.  Comparisons across Character Sets
  contents:
  - "2.7.2.  Comparisons across Character Sets\n   Messages may involve a number of\
    \ character sets.  In order for\n   comparisons to work across character sets,\
    \ implementations SHOULD\n   implement the following behavior:\n      Comparisons\
    \ are performed on octets.  Implementations convert text\n      from header fields\
    \ in all charsets [MIME3] to Unicode, encoded as\n      UTF-8, as input to the\
    \ comparator (see section 2.7.3).\n      Implementations MUST be capable of converting\
    \ US-ASCII, ISO-8859-\n      1, the US-ASCII subset of ISO-8859-* character sets,\
    \ and UTF-8.\n      Text that the implementation cannot convert to Unicode for\
    \ any\n      reason MAY be treated as plain US-ASCII (including any [MIME3]\n\
    \      syntax) or processed according to local conventions.  An encoded\n    \
    \  NUL octet (character zero) SHOULD NOT cause early termination of\n      the\
    \ header content being compared against.\n   If implementations fail to support\
    \ the above behavior, they MUST\n   conform to the following:\n      No two strings\
    \ can be considered equal if one contains octets\n      greater than 127.\n"
- title: 2.7.3.  Comparators
  contents:
  - "2.7.3.  Comparators\n   In order to allow for language-independent, case-independent\
    \ matches,\n   the match type may be coupled with a comparator name.  The Internet\n\
    \   Application Protocol Collation Registry [COLLATION] provides the\n   framework\
    \ for describing and naming comparators.\n   All implementations MUST support\
    \ the \"i;octet\" comparator (simply\n   compares octets) and the \"i;ascii-casemap\"\
    \ comparator (which treats\n   uppercase and lowercase characters in the US-ASCII\
    \ subset of UTF-8 as\n   the same).  If left unspecified, the default is \"i;ascii-casemap\"\
    .\n   Some comparators may not be usable with substring matches; that is,\n  \
    \ they may only work with \":is\".  It is an error to try to use a\n   comparator\
    \ with \":matches\" or \":contains\" that is not compatible with\n   it.\n   Sieve\
    \ treats a comparator result of \"undefined\" the same as a result\n   of \"no-match\"\
    .  That is, this base specification does not provide any\n   means to directly\
    \ detect invalid comparator input.\n   A comparator is specified by the \":comparator\"\
    \ option with commands\n   that support matching.  This option is followed by\
    \ a string providing\n   the name of the comparator to be used.  For convenience,\
    \ the syntax\n   of a comparator is abbreviated to \"COMPARATOR\", and (repeated\
    \ in\n   several tests) is as follows:\n   Syntax:   \":comparator\" <comparator-name:\
    \ string>\n   So in this example,\n   Example:  if header :contains :comparator\
    \ \"i;octet\" \"Subject\"\n                   \"MAKE MONEY FAST\" {\n        \
    \        discard;\n             }\n   would discard any message with subjects\
    \ like \"You can MAKE MONEY\n   FAST\", but not \"You can Make Money Fast\", since\
    \ the comparator used\n   is case-sensitive.\n   Comparators other than \"i;octet\"\
    \ and \"i;ascii-casemap\" must be\n   declared with require, as they are extensions.\
    \  If a comparator\n   declared with require is not known, it is an error, and\
    \ execution\n   fails.  If the comparator is not declared with require, it is\
    \ also an\n   error, even if the comparator is supported.  (See section 2.10.5.)\n\
    \   Both \":matches\" and \":contains\" match types are compatible with the\n\
    \   \"i;octet\" and \"i;ascii-casemap\" comparators and may be used with\n   them.\n\
    \   It is an error to give more than one of these arguments to a given\n   command.\n"
- title: 2.7.4.  Comparisons against Addresses
  contents:
  - "2.7.4.  Comparisons against Addresses\n   Addresses are one of the most frequent\
    \ things represented as strings.\n   These are structured, and being able to compare\
    \ against the local-\n   part or the domain of an address is useful, so some tests\
    \ that act\n   exclusively on addresses take an additional optional argument that\n\
    \   specifies what the test acts on.\n   These optional arguments are \":localpart\"\
    , \":domain\", and \":all\",\n   which act on the local-part (left side), the\
    \ domain-part (right\n   side), and the whole address.\n   If an address is not\
    \ syntactically valid, then it will not be matched\n   by tests specifying \"\
    :localpart\" or \":domain\".\n   The kind of comparison done, such as whether\
    \ or not the test done is\n   case-insensitive, is specified as a comparator argument\
    \ to the test.\n   If an optional address-part is omitted, the default is \":all\"\
    .\n   It is an error to give more than one of these arguments to a given\n   command.\n\
    \   For convenience, the \"ADDRESS-PART\" syntax element is defined here as\n\
    \   follows:\n   Syntax:   \":localpart\" / \":domain\" / \":all\"\n"
- title: 2.8.  Blocks
  contents:
  - "2.8.  Blocks\n   Blocks are sets of commands enclosed within curly braces and\
    \ supplied\n   as the final argument to a command.  Such a command is a control\n\
    \   structure: when executed it has control over the number of times the\n   commands\
    \ in the block are executed.\n   With the commands supplied in this memo, there\
    \ are no loops.  The\n   control structures supplied--if, elsif, and else--run\
    \ a block either\n   once or not at all.\n"
- title: 2.9.  Commands
  contents:
  - "2.9.  Commands\n   Sieve scripts are sequences of commands.  Commands can take\
    \ any of\n   the tokens above as arguments, and arguments may be either tagged\
    \ or\n   positional arguments.  Not all commands take all arguments.\n   There\
    \ are three kinds of commands: test commands, action commands,\n   and control\
    \ commands.\n   The simplest is an action command.  An action command is an\n\
    \   identifier followed by zero or more arguments, terminated by a\n   semicolon.\
    \  Action commands do not take tests or blocks as arguments.\n   The actions referenced\
    \ in this document are:\n    - keep, to save the message in the default location\n\
    \    - fileinto, to save the message in a specific mailbox\n    - redirect, to\
    \ forward the message to another address\n    - discard, to silently throw away\
    \ the message\n   A control command is a command that affects the parsing or the\
    \ flow\n   of execution of the Sieve script in some way.  A control structure\
    \ is\n   a control command that ends with a block instead of a semicolon.\n  \
    \ A test command is used as part of a control command.  It is used to\n   specify\
    \ whether or not the block of code given to the control command\n   is executed.\n"
- title: 2.10.  Evaluation
  contents:
  - '2.10.  Evaluation

    '
- title: 2.10.1.  Action Interaction
  contents:
  - "2.10.1.  Action Interaction\n   Some actions cannot be used with other actions\
    \ because the result\n   would be absurd.  These restrictions are noted throughout\
    \ this memo.\n   Extension actions MUST state how they interact with actions defined\n\
    \   in this specification.\n"
- title: 2.10.2.  Implicit Keep
  contents:
  - "2.10.2.  Implicit Keep\n   Previous experience with filtering systems suggests\
    \ that cases tend\n   to be missed in scripts.  To prevent errors, Sieve has an\
    \ \"implicit\n   keep\".\n   An implicit keep is a keep action (see section 4.3)\
    \ performed in\n   absence of any action that cancels the implicit keep.\n   An\
    \ implicit keep is performed if a message is not written to a\n   mailbox, redirected\
    \ to a new address, or explicitly thrown out.  That\n   is, if a fileinto, a keep,\
    \ a redirect, or a discard is performed, an\n   implicit keep is not.\n   Some\
    \ actions may be defined to not cancel the implicit keep.  These\n   actions may\
    \ not directly affect the delivery of a message, and are\n   used for their side\
    \ effects.  None of the actions specified in this\n   document meet that criteria,\
    \ but extension actions may.\n   For instance, with any of the short messages\
    \ offered above, the\n   following script produces no actions.\n   Example:  if\
    \ size :over 500K { discard; }\n   As a result, the implicit keep is taken.\n"
- title: 2.10.3.  Message Uniqueness in a Mailbox
  contents:
  - "2.10.3.  Message Uniqueness in a Mailbox\n   Implementations SHOULD NOT deliver\
    \ a message to the same mailbox more\n   than once, even if a script explicitly\
    \ asks for a message to be\n   written to a mailbox twice.\n   The test for equality\
    \ of two messages is implementation-defined.\n   If a script asks for a message\
    \ to be written to a mailbox twice, it\n   MUST NOT be treated as an error.\n"
- title: 2.10.4.  Limits on Numbers of Actions
  contents:
  - "2.10.4.  Limits on Numbers of Actions\n   Site policy MAY limit the number of\
    \ actions taken and MAY impose\n   restrictions on which actions can be used together.\
    \  In the event\n   that a script hits a policy limit on the number of actions\
    \ taken for\n   a particular message, an error occurs.\n   Implementations MUST\
    \ allow at least one keep or one fileinto.  If\n   fileinto is not implemented,\
    \ implementations MUST allow at least one\n   keep.\n"
- title: 2.10.5.  Extensions and Optional Features
  contents:
  - "2.10.5.  Extensions and Optional Features\n   Because of the differing capabilities\
    \ of many mail systems, several\n   features of this specification are optional.\
    \  Before any of these\n   extensions can be executed, they must be declared with\
    \ the \"require\"\n   action.\n   If an extension is not enabled with \"require\"\
    , implementations MUST\n   treat it as if they did not support it at all.  This\
    \ protects scripts\n   from having their behavior altered by extensions that the\
    \ script\n   author might not have even been aware of.\n   Implementations MUST\
    \ NOT execute any Sieve script test or command\n   subsequent to \"require\" if\
    \ one of the required extensions is\n   unavailable.\n      Note: The reason for\
    \ this restriction is that prior experiences\n      with languages such as LISP\
    \ and Tcl suggest that this is a\n      workable way of noting that a given script\
    \ uses an extension.\n   Extensions that define actions MUST state how they interact\
    \ with\n   actions discussed in the base specification.\n"
- title: 2.10.6.  Errors
  contents:
  - "2.10.6.  Errors\n   In any programming language, there are compile-time and run-time\n\
    \   errors.\n   Compile-time errors are ones in syntax that are detectable if\
    \ a\n   syntax check is done.\n   Run-time errors are not detectable until the\
    \ script is run.  This\n   includes transient failures like disk full conditions,\
    \ but also\n   includes issues like invalid combinations of actions.\n   When\
    \ an error occurs in a Sieve script, all processing stops.\n   Implementations\
    \ MAY choose to do a full parse, then evaluate the\n   script, then do all actions.\
    \  Implementations might even go so far as\n   to ensure that execution is atomic\
    \ (either all actions are executed\n   or none are executed).\n   Other implementations\
    \ may choose to parse and run at the same time.\n   Such implementations are simpler,\
    \ but have issues with partial\n   failure (some actions happen, others don't).\n\
    \   Implementations MUST perform syntactic, semantic, and run-time checks\n  \
    \ on code that is actually executed.  Implementations MAY perform those\n   checks\
    \ or any part of them on code that is not reached during\n   execution.\n   When\
    \ an error happens, implementations MUST notify the user that an\n   error occurred\
    \ and which actions (if any) were taken, and do an\n   implicit keep.\n"
- title: 2.10.7.  Limits on Execution
  contents:
  - "2.10.7.  Limits on Execution\n   Implementations may limit certain constructs.\
    \  However, this\n   specification places a lower bound on some of these limits.\n\
    \   Implementations MUST support fifteen levels of nested blocks.\n   Implementations\
    \ MUST support fifteen levels of nested test lists.\n"
- title: 3.  Control Commands
  contents:
  - "3.  Control Commands\n   Control structures are needed to allow for multiple\
    \ and conditional\n   actions.\n"
- title: 3.1.  Control if
  contents:
  - "3.1.  Control if\n   There are three pieces to if: \"if\", \"elsif\", and \"\
    else\".  Each is\n   actually a separate command in terms of the grammar.  However,\
    \ an\n   elsif or else MUST only follow an if or elsif.  An error occurs if\n\
    \   these conditions are not met.\n   Usage:   if <test1: test> <block1: block>\n\
    \   Usage:   elsif <test2: test> <block2: block>\n   Usage:   else <block3: block>\n\
    \   The semantics are similar to those of any of the many other\n   programming\
    \ languages these control structures appear in.  When the\n   interpreter sees\
    \ an \"if\", it evaluates the test associated with it.\n   If the test is true,\
    \ it executes the block associated with it.\n   If the test of the \"if\" is false,\
    \ it evaluates the test of the first\n   \"elsif\" (if any).  If the test of \"\
    elsif\" is true, it runs the\n   elsif's block.  An elsif may be followed by an\
    \ elsif, in which case,\n   the interpreter repeats this process until it runs\
    \ out of elsifs.\n   When the interpreter runs out of elsifs, there may be an\
    \ \"else\" case.\n   If there is, and none of the if or elsif tests were true,\
    \ the\n   interpreter runs the else's block.\n   This provides a way of performing\
    \ exactly one of the blocks in the\n   chain.\n   In the following example, both\
    \ messages A and B are dropped.\n   Example:  require \"fileinto\";\n        \
    \     if header :contains \"from\" \"coyote\" {\n                discard;\n  \
    \           } elsif header :contains [\"subject\"] [\"$$$\"] {\n             \
    \   discard;\n             } else {\n                fileinto \"INBOX\";\n   \
    \          }\n   When the script below is run over message A, it redirects the\
    \ message\n   to acm@example.com; message B, to postmaster@example.com; any other\n\
    \   message is redirected to field@example.com.\n   Example:  if header :contains\
    \ [\"From\"] [\"coyote\"] {\n                redirect \"acm@example.com\";\n \
    \            } elsif header :contains \"Subject\" \"$$$\" {\n                redirect\
    \ \"postmaster@example.com\";\n             } else {\n                redirect\
    \ \"field@example.com\";\n             }\n   Note that this definition prohibits\
    \ the \"... else if ...\" sequence\n   used by C.  This is intentional, because\
    \ this construct produces a\n   shift-reduce conflict.\n"
- title: 3.2.  Control require
  contents:
  - "3.2.  Control require\n   Usage:   require <capabilities: string-list>\n   The\
    \ require action notes that a script makes use of a certain\n   extension.  Such\
    \ a declaration is required to use the extension, as\n   discussed in section\
    \ 2.10.5.  Multiple capabilities can be declared\n   with a single require.\n\
    \   The require command, if present, MUST be used before anything other\n   than\
    \ a require can be used.  An error occurs if a require appears\n   after a command\
    \ other than require.\n   Example:  require [\"fileinto\", \"reject\"];\n   Example:\
    \  require \"fileinto\";\n             require \"vacation\";\n"
- title: 3.3.  Control stop
  contents:
  - "3.3.  Control stop\n   Usage:   stop\n   The \"stop\" action ends all processing.\
    \  If the implicit keep has not\n   been cancelled, then it is taken.\n"
- title: 4.  Action Commands
  contents:
  - "4.  Action Commands\n   This document supplies four actions that may be taken\
    \ on a message:\n   keep, fileinto, redirect, and discard.\n   Implementations\
    \ MUST support the \"keep\", \"discard\", and \"redirect\"\n   actions.\n   Implementations\
    \ SHOULD support \"fileinto\".\n   Implementations MAY limit the number of certain\
    \ actions taken (see\n   section 2.10.4).\n"
- title: 4.1.  Action fileinto
  contents:
  - "4.1.  Action fileinto\n   Usage:   fileinto <mailbox: string>\n   The \"fileinto\"\
    \ action delivers the message into the specified\n   mailbox.  Implementations\
    \ SHOULD support fileinto, but in some\n   environments this may be impossible.\
    \  Implementations MAY place\n   restrictions on mailbox names; use of an invalid\
    \ mailbox name MAY be\n   treated as an error or result in delivery to an implementation-\n\
    \   defined mailbox.  If the specified mailbox doesn't exist, the\n   implementation\
    \ MAY treat it as an error, create the mailbox, or\n   deliver the message to\
    \ an implementation-defined mailbox.  If the\n   implementation uses a different\
    \ encoding scheme than UTF-8 for\n   mailbox names, it SHOULD reencode the mailbox\
    \ name from UTF-8 to its\n   encoding scheme.  For example, the Internet Message\
    \ Access Protocol\n   [IMAP] uses modified UTF-7, such that a mailbox argument\
    \ of \"odds &\n   ends\" would appear in IMAP as \"odds &- ends\".\n   The capability\
    \ string for use with the require command is \"fileinto\".\n   In the following\
    \ script, message A is filed into mailbox\n   \"INBOX.harassment\".\n   Example:\
    \  require \"fileinto\";\n             if header :contains [\"from\"] \"coyote\"\
    \ {\n                fileinto \"INBOX.harassment\";\n             }\n"
- title: 4.2.  Action redirect
  contents:
  - "4.2.  Action redirect\n   Usage:   redirect <address: string>\n   The \"redirect\"\
    \ action is used to send the message to another user at\n   a supplied address,\
    \ as a mail forwarding feature does.  The\n   \"redirect\" action makes no changes\
    \ to the message body or existing\n   headers, but it may add new headers.  In\
    \ particular, existing\n   Received headers MUST be preserved and the count of\
    \ Received headers\n   in the outgoing message MUST be larger than the same count\
    \ on the\n   message as received by the implementation.  (An implementation that\n\
    \   adds a Received header before processing the message does not need to\n  \
    \ add another when redirecting.)\n   The message is sent back out with the address\
    \ from the redirect\n   command as an envelope recipient.  Implementations MAY\
    \ combine\n   separate redirects for a given message into a single submission\
    \ with\n   multiple envelope recipients.  (This is not a Mail User Agent (MUA)-\n\
    \   style forward, which creates a new message with a different sender\n   and\
    \ message ID, wrapping the old message in a new one.)\n   The envelope sender\
    \ address on the outgoing message is chosen by the\n   sieve implementation. \
    \ It MAY be copied from the message being\n   processed.  However, if the message\
    \ being processed has an empty\n   envelope sender address the outgoing message\
    \ MUST also have an empty\n   envelope sender address.  This last requirement\
    \ is imposed to prevent\n   loops in the case where a message is redirected to\
    \ an invalid address\n   when then returns a delivery status notification that\
    \ also ends up\n   being redirected to the same invalid address.\n   A simple\
    \ script can be used for redirecting all mail:\n   Example:  redirect \"bart@example.com\"\
    ;\n   Implementations MUST take measures to implement loop control,\n   possibly\
    \ including adding headers to the message or counting Received\n   headers as\
    \ specified in section 6.2 of [SMTP].  If an implementation\n   detects a loop,\
    \ it causes an error.\n   Implementations MUST provide means of limiting the number\
    \ of\n   redirects a Sieve script can perform.  See section 10 for more\n   details.\n\
    \   Implementations MAY ignore a redirect action silently due to policy\n   reasons.\
    \  For example, an implementation MAY choose not to redirect\n   to an address\
    \ that is known to be undeliverable.  Any ignored\n   redirect MUST NOT cancel\
    \ the implicit keep.\n"
- title: 4.3.  Action keep
  contents:
  - "4.3.  Action keep\n   Usage:   keep\n   The \"keep\" action is whatever action\
    \ is taken in lieu of all other\n   actions, if no filtering happens at all; generally,\
    \ this simply means\n   to file the message into the user's main mailbox.  This\
    \ command\n   provides a way to execute this action without needing to know the\n\
    \   name of the user's main mailbox, providing a way to call it without\n   needing\
    \ to understand the user's setup or the underlying mail system.\n   For instance,\
    \ in an implementation where the IMAP server is running\n   scripts on behalf\
    \ of the user at time of delivery, a keep command is\n   equivalent to a fileinto\
    \ \"INBOX\".\n   Example:  if size :under 1M { keep; } else { discard; }\n   Note\
    \ that the above script is identical to the one below.\n   Example:  if not size\
    \ :under 1M { discard; }\n"
- title: 4.4.  Action discard
  contents:
  - "4.4.  Action discard\n   Usage:   discard\n   Discard is used to silently throw\
    \ away the message.  It does so by\n   simply canceling the implicit keep.  If\
    \ discard is used with other\n   actions, the other actions still happen.  Discard\
    \ is compatible with\n   all other actions.  (For instance, fileinto+discard is\
    \ equivalent to\n   fileinto.)\n   Discard MUST be silent; that is, it MUST NOT\
    \ return a non-delivery\n   notification of any kind ([DSN], [MDN], or otherwise).\n\
    \   In the following script, any mail from \"idiot@example.com\" is thrown\n \
    \  out.\n   Example:  if header :contains [\"from\"] [\"idiot@example.com\"] {\n\
    \                discard;\n             }\n   While an important part of this\
    \ language, \"discard\" has the potential\n   to create serious problems for users:\
    \ Students who leave themselves\n   logged in to an unattended machine in a public\
    \ computer lab may find\n   their script changed to just \"discard\".  In order\
    \ to protect users in\n   this situation (along with similar situations), implementations\
    \ MAY\n   keep messages destroyed by a script for an indefinite period, and MAY\n\
    \   disallow scripts that throw out all mail.\n"
- title: 5.  Test Commands
  contents:
  - "5.  Test Commands\n   Tests are used in conditionals to decide which part(s)\
    \ of the\n   conditional to execute.\n   Implementations MUST support these tests:\
    \ \"address\", \"allof\",\n   \"anyof\", \"exists\", \"false\", \"header\", \"\
    not\", \"size\", and \"true\".\n   Implementations SHOULD support the \"envelope\"\
    \ test.\n"
- title: 5.1.  Test address
  contents:
  - "5.1.  Test address\n   Usage:   address [COMPARATOR] [ADDRESS-PART] [MATCH-TYPE]\n\
    \            <header-list: string-list> <key-list: string-list>\n   The \"address\"\
    \ test matches Internet addresses in structured headers\n   that contain addresses.\
    \  It returns true if any header contains any\n   key in the specified part of\
    \ the address, as modified by the\n   comparator and the match keyword.  Whether\
    \ there are other addresses\n   present in the header doesn't affect this test;\
    \ this test does not\n   provide any way to determine whether an address is the\
    \ only address\n   in a header.\n   Like envelope and header, this test returns\
    \ true if any combination\n   of the header-list and key-list arguments match\
    \ and returns false\n   otherwise.\n   Internet email addresses [IMAIL] have the\
    \ somewhat awkward\n   characteristic that the local-part to the left of the at-sign\
    \ is\n   considered case sensitive, and the domain-part to the right of the\n\
    \   at-sign is case insensitive.  The \"address\" command does not deal\n   with\
    \ this itself, but provides the ADDRESS-PART argument for allowing\n   users to\
    \ deal with it.\n   The address primitive never acts on the phrase part of an\
    \ email\n   address or on comments within that address.  It also never acts on\n\
    \   group names, although it does act on the addresses within the group\n   construct.\n\
    \   Implementations MUST restrict the address test to headers that\n   contain\
    \ addresses, but MUST include at least From, To, Cc, Bcc,\n   Sender, Resent-From,\
    \ and Resent-To, and it SHOULD include any other\n   header that utilizes an \"\
    address-list\" structured header body.\n   Example:  if address :is :all \"from\"\
    \ \"tim@example.com\" {\n                discard;\n             }\n"
- title: 5.2.  Test allof
  contents:
  - "5.2.  Test allof\n   Usage:   allof <tests: test-list>\n   The \"allof\" test\
    \ performs a logical AND on the tests supplied to it.\n   Example:  allof (false,\
    \ false)  =>   false\n             allof (false, true)   =>   false\n        \
    \     allof (true,  true)   =>   true\n   The allof test takes as its argument\
    \ a test-list.\n"
- title: 5.3.  Test anyof
  contents:
  - "5.3.  Test anyof\n   Usage:   anyof <tests: test-list>\n   The \"anyof\" test\
    \ performs a logical OR on the tests supplied to it.\n   Example:  anyof (false,\
    \ false)  =>   false\n             anyof (false, true)   =>   true\n         \
    \    anyof (true,  true)   =>   true\n"
- title: 5.4.  Test envelope
  contents:
  - "5.4.  Test envelope\n   Usage:   envelope [COMPARATOR] [ADDRESS-PART] [MATCH-TYPE]\n\
    \            <envelope-part: string-list> <key-list: string-list>\n   The \"envelope\"\
    \ test is true if the specified part of the [SMTP] (or\n   equivalent) envelope\
    \ matches the specified key.  This specification\n   defines the interpretation\
    \ of the (case insensitive) \"from\" and \"to\"\n   envelope-parts.  Additional\
    \ envelope-parts may be defined by other\n   extensions; implementations SHOULD\
    \ consider unknown envelope parts an\n   error.\n   If one of the envelope-part\
    \ strings is (case insensitive) \"from\",\n   then matching occurs against the\
    \ FROM address used in the SMTP MAIL\n   command.  The null reverse-path is matched\
    \ against as the empty\n   string, regardless of the ADDRESS-PART argument specified.\n\
    \   If one of the envelope-part strings is (case insensitive) \"to\", then\n \
    \  matching occurs against the TO address used in the SMTP RCPT command\n   that\
    \ resulted in this message getting delivered to this user.  Note\n   that only\
    \ the most recent TO is available, and only the one relevant\n   to this user.\n\
    \   The envelope-part is a string list and may contain more than one\n   parameter,\
    \ in which case all of the strings specified in the key-list\n   are matched against\
    \ all parts given in the envelope-part list.\n   Like address and header, this\
    \ test returns true if any combination of\n   the envelope-part list and key-list\
    \ arguments match and returns false\n   otherwise.\n   All tests against envelopes\
    \ MUST drop source routes.\n   If the SMTP transaction involved several RCPT commands,\
    \ only the data\n   from the RCPT command that caused delivery to this user is\
    \ available\n   in the \"to\" part of the envelope.\n   If a protocol other than\
    \ SMTP is used for message transport,\n   implementations are expected to adapt\
    \ this command appropriately.\n   The envelope command is optional.  Implementations\
    \ SHOULD support it,\n   but the necessary information may not be available in\
    \ all cases.  The\n   capability string for use with the require command is \"\
    envelope\".\n   Example:  require \"envelope\";\n             if envelope :all\
    \ :is \"from\" \"tim@example.com\" {\n                discard;\n             }\n"
- title: 5.5.  Test exists
  contents:
  - "5.5.  Test exists\n   Usage:   exists <header-names: string-list>\n   The \"\
    exists\" test is true if the headers listed in the header-names\n   argument exist\
    \ within the message.  All of the headers must exist or\n   the test is false.\n\
    \   The following example throws out mail that doesn't have a From header\n  \
    \ and a Date header.\n   Example:  if not exists [\"From\",\"Date\"] {\n     \
    \           discard;\n             }\n"
- title: 5.6.  Test false
  contents:
  - "5.6.  Test false\n   Usage:   false\n   The \"false\" test always evaluates to\
    \ false.\n"
- title: 5.7.  Test header
  contents:
  - "5.7.  Test header\n   Usage:   header [COMPARATOR] [MATCH-TYPE]\n           \
    \ <header-names: string-list> <key-list: string-list>\n   The \"header\" test\
    \ evaluates to true if the value of any of the named\n   headers, ignoring leading\
    \ and trailing whitespace, matches any key.\n   The type of match is specified\
    \ by the optional match argument, which\n   defaults to \":is\" if not specified,\
    \ as specified in section 2.6.\n   Like address and envelope, this test returns\
    \ true if any combination\n   of the header-names list and key-list arguments\
    \ match and returns\n   false otherwise.\n   If a header listed in the header-names\
    \ argument exists, it contains\n   the empty key (\"\").  However, if the named\
    \ header is not present, it\n   does not match any key, including the empty key.\
    \  So if a message\n   contained the header\n           X-Caffeine: C8H10N4O2\n\
    \   these tests on that header evaluate as follows:\n           header :is [\"\
    X-Caffeine\"] [\"\"]         => false\n           header :contains [\"X-Caffeine\"\
    ] [\"\"]   => true\n   Testing whether a given header is either absent or doesn't\
    \ contain\n   any non-whitespace characters can be done using a negated \"header\"\
    \n   test:\n           not header :matches \"Cc\" \"?*\"\n"
- title: 5.8.  Test not
  contents:
  - "5.8.  Test not\n   Usage:   not <test1: test>\n   The \"not\" test takes some\
    \ other test as an argument, and yields the\n   opposite result.  \"not false\"\
    \ evaluates to \"true\" and \"not true\"\n   evaluates to \"false\".\n"
- title: 5.9.  Test size
  contents:
  - "5.9.  Test size\n   Usage:   size <\":over\" / \":under\"> <limit: number>\n\
    \   The \"size\" test deals with the size of a message.  It takes either a\n \
    \  tagged argument of \":over\" or \":under\", followed by a number\n   representing\
    \ the size of the message.\n   If the argument is \":over\", and the size of the\
    \ message is greater\n   than the number provided, the test is true; otherwise,\
    \ it is false.\n   If the argument is \":under\", and the size of the message\
    \ is less than\n   the number provided, the test is true; otherwise, it is false.\n\
    \   Exactly one of \":over\" or \":under\" must be specified, and anything\n \
    \  else is an error.\n   The size of a message is defined to be the number of\
    \ octets in the\n   [IMAIL] representation of the message.\n   Note that for a\
    \ message that is exactly 4,000 octets, the message is\n   neither \":over\" nor\
    \ \":under\" 4000 octets.\n"
- title: 5.10.  Test true
  contents:
  - "5.10.  Test true\n   Usage:   true\n   The \"true\" test always evaluates to\
    \ true.\n"
- title: 6.  Extensibility
  contents:
  - "6.  Extensibility\n   New control commands, actions, and tests can be added to\
    \ the\n   language.  Sites must make these features known to their users; this\n\
    \   document does not define a way to discover the list of extensions\n   supported\
    \ by the server.\n   Any extensions to this language MUST define a capability\
    \ string that\n   uniquely identifies that extension.  Capability string are case-\n\
    \   sensitive; for example, \"foo\" and \"FOO\" are different capabilities.\n\
    \   If a new version of an extension changes the functionality of a\n   previously\
    \ defined extension, it MUST use a different name.\n   Extensions may register\
    \ a set of related capabilities by registering\n   just a unique prefix for them.\
    \  The \"comparator-\" prefix is an\n   example of this.  The prefix MUST end\
    \ with a \"-\" and MUST NOT overlap\n   any existing registrations.\n   In a situation\
    \ where there is a script submission protocol and an\n   extension advertisement\
    \ mechanism aware of the details of this\n   language, scripts submitted can be\
    \ checked against the mail server to\n   prevent use of an extension that the\
    \ server does not support.\n   Extensions MUST state how they interact with constraints\
    \ defined in\n   section 2.10, e.g., whether they cancel the implicit keep, and\
    \ which\n   actions they are compatible and incompatible with.  Extensions MUST\n\
    \   NOT change the behavior of the \"require\" control command or alter the\n\
    \   interpretation of the argument to the \"require\" control.\n   Extensions\
    \ that can submit new email messages or otherwise generate\n   new protocol requests\
    \ MUST consider loop suppression, at least to\n   document any security considerations.\n"
- title: 6.1.  Capability String
  contents:
  - "6.1.  Capability String\n   Capability strings are typically short strings describing\
    \ what\n   capabilities are supported by the server.\n   Capability strings beginning\
    \ with \"vnd.\" represent vendor-defined\n   extensions.  Such extensions are\
    \ not defined by Internet standards or\n   RFCs, but are still registered with\
    \ IANA in order to prevent\n   conflicts.  Extensions starting with \"vnd.\" SHOULD\
    \ be followed by the\n   name of the vendor and product, such as \"vnd.acme.rocket-sled\"\
    .\n   The following capability strings are defined by this document:\n   encoded-character\
    \ The string \"encoded-character\" indicates that the\n               implementation\
    \ supports the interpretation of\n               \"${hex:...}\" and \"${unicode:...}\"\
    \ in strings.\n   envelope    The string \"envelope\" indicates that the implementation\n\
    \               supports the \"envelope\" command.\n   fileinto    The string\
    \ \"fileinto\" indicates that the implementation\n               supports the\
    \ \"fileinto\" command.\n   comparator- The string \"comparator-elbonia\" is provided\
    \ if the\n               implementation supports the \"elbonia\" comparator.\n\
    \               Therefore, all implementations have at least the\n           \
    \    \"comparator-i;octet\" and \"comparator-i;ascii-casemap\"\n             \
    \  capabilities.  However, these comparators may be used\n               without\
    \ being declared with require.\n"
- title: 6.2.  IANA Considerations
  contents:
  - "6.2.  IANA Considerations\n   In order to provide a standard set of extensions,\
    \ a registry is\n   maintained by IANA.  This registry contains both vendor-controlled\n\
    \   capability names (beginning with \"vnd.\") and IETF-controlled\n   capability\
    \ names.  Vendor-controlled capability names may be\n   registered on a first-come,\
    \ first-served basis, by applying to IANA\n   with the form in the following section.\
    \  Registration of capability\n   prefixes that do not begin with \"vnd.\" REQUIRES\
    \ a standards track or\n   IESG-approved experimental RFC.\n   Extensions designed\
    \ for interoperable use SHOULD use IETF-controlled\n   capability names.\n"
- title: 6.2.1.  Template for Capability Registrations
  contents:
  - "6.2.1.  Template for Capability Registrations\n   The following template is to\
    \ be used for registering new Sieve\n   extensions with IANA.\n   To: iana@iana.org\n\
    \   Subject: Registration of new Sieve extension\n   Capability name: [the string\
    \ for use in the 'require' statement]\n   Description:     [a brief description\
    \ of what the extension adds\n                     or changes]\n   RFC number:\
    \      [for extensions published as RFCs]\n   Contact address: [email and/or physical\
    \ address to contact for\n                     additional information]\n"
- title: 6.2.2.  Handling of Existing Capability Registrations
  contents:
  - "6.2.2.  Handling of Existing Capability Registrations\n   In order to bring the\
    \ existing capability registrations in line with\n   the new template, IANA has\
    \ modified each as follows:\n   1. The \"capability name\" and \"capability arguments\"\
    \ fields have been\n      eliminated\n   2. The \"capability keyword\" field have\
    \ been renamed to \"Capability\n      name\"\n   3. An empty \"Description\" field\
    \ has been added\n   4. The \"Standards Track/IESG-approved experimental RFC number\"\
    \ field\n      has been renamed to \"RFC number\"\n   5. The \"Person and email\
    \ address to contact for further information\"\n      field should be renamed\
    \ to \"Contact address\"\n"
- title: 6.2.3.  Initial Capability Registrations
  contents:
  - "6.2.3.  Initial Capability Registrations\n   This RFC updates the following entries\
    \ in the IANA registry for Sieve\n   extensions.\n   Capability name: encoded-character\n\
    \   Description:     changes the interpretation of strings to allow\n        \
    \            arbitrary octets and Unicode characters to be\n                 \
    \   represented using US-ASCII\n   RFC number:      RFC 5228 (Sieve base spec)\n\
    \   Contact address: The Sieve discussion list <ietf-mta-filters@imc.org>\n  \
    \ Capability name: fileinto\n   Description:     adds the 'fileinto' action for\
    \ delivering to a\n                    mailbox other than the default\n   RFC\
    \ number:      RFC 5228 (Sieve base spec)\n   Contact address: The Sieve discussion\
    \ list <ietf-mta-filters@imc.org>\n   Capability name: envelope\n   Description:\
    \     adds the 'envelope' test for testing the message\n                    transport\
    \ sender and recipient address\n   RFC number:      RFC 5228 (Sieve base spec)\n\
    \   Contact address: The Sieve discussion list <ietf-mta-filters@imc.org>\n  \
    \ Capability name: comparator-* (anything starting with \"comparator-\")\n   Description:\
    \     adds the indicated comparator for use with the\n                    :comparator\
    \ argument\n   RFC number:      RFC 5228 (Sieve base spec) and [COLLATION]\n \
    \  Contact address: The Sieve discussion list <ietf-mta-filters@imc.org>\n"
- title: 6.3.  Capability Transport
  contents:
  - "6.3.  Capability Transport\n   A method of advertising which capabilities an\
    \ implementation supports\n   is difficult due to the wide range of possible implementations.\
    \  Such\n   a mechanism, however, should have the property that the\n   implementation\
    \ can advertise the complete set of extensions that it\n   supports.\n"
- title: 7.  Transmission
  contents:
  - "7.  Transmission\n   The [MIME] type for a Sieve script is \"application/sieve\"\
    .\n   The registration of this type for RFC 2048 requirements is updated as\n\
    \   follows:\n    Subject: Registration of MIME media type application/sieve\n\
    \    MIME media type name: application\n    MIME subtype name: sieve\n    Required\
    \ parameters: none\n    Optional parameters: none\n    Encoding considerations:\
    \ Most Sieve scripts will be textual,\n       written in UTF-8.  When non-7bit\
    \ characters are used,\n       quoted-printable is appropriate for transport systems\n\
    \       that require 7bit encoding.\n    Security considerations: Discussed in\
    \ section 10 of this RFC.\n    Interoperability considerations: Discussed in section\
    \ 2.10.5\n       of this RFC.\n    Published specification: this RFC.\n    Applications\
    \ that use this media type: sieve-enabled mail\n      servers and clients\n  \
    \  Additional information:\n      Magic number(s):\n      File extension(s): .siv\
    \ .sieve\n      Macintosh File Type Code(s):\n    Person & email address to contact\
    \ for further information:\n       See the discussion list at ietf-mta-filters@imc.org.\n\
    \    Intended usage:\n       COMMON\n    Author/Change controller:\n       The\
    \ SIEVE WG, delegated by the IESG.\n"
- title: 8.  Parsing
  contents:
  - "8.  Parsing\n   The Sieve grammar is separated into tokens and a separate grammar\
    \ as\n   most programming languages are.  Additional rules are supplied here\n\
    \   for common arguments to various language facilities.\n"
- title: 8.1.  Lexical Tokens
  contents:
  - "8.1.  Lexical Tokens\n   Sieve scripts are encoded in UTF-8.  The following assumes\
    \ a valid\n   UTF-8 encoding; special characters in Sieve scripts are all US-ASCII.\n\
    \   The following are tokens in Sieve:\n           - identifiers\n           -\
    \ tags\n           - numbers\n           - quoted strings\n           - multi-line\
    \ strings\n           - other separators\n   Identifiers, tags, and numbers are\
    \ case-insensitive, while quoted\n   strings and multi-line strings are case-sensitive.\n\
    \   Blanks, horizontal tabs, CRLFs, and comments (\"whitespace\") are\n   ignored\
    \ except as they separate tokens.  Some whitespace is required\n   to separate\
    \ otherwise adjacent tokens and in specific places in the\n   multi-line strings.\
    \  CR and LF can only appear in CRLF pairs.\n   The other separators are single\
    \ individual characters and are\n   mentioned explicitly in the grammar.\n   The\
    \ lexical structure of sieve is defined in the following grammar\n   (as described\
    \ in [ABNF]):\n   bracket-comment    = \"/*\" *not-star 1*STAR\n             \
    \           *(not-star-slash *not-star 1*STAR) \"/\"\n                       \
    \   ; No */ allowed inside a comment.\n                          ; (No * is allowed\
    \ unless it is the last\n                          ; character, or unless it is\
    \ followed by a\n                          ; character that isn't a slash.)\n\
    \   comment            = bracket-comment / hash-comment\n   hash-comment     \
    \  = \"#\" *octet-not-crlf CRLF\n   identifier         = (ALPHA / \"_\") *(ALPHA\
    \ / DIGIT / \"_\")\n   multi-line         = \"text:\" *(SP / HTAB) (hash-comment\
    \ / CRLF)\n                        *(multiline-literal / multiline-dotstart)\n\
    \                        \".\" CRLF\n   multiline-literal  = [ octet-not-period\
    \ *octet-not-crlf ] CRLF\n   multiline-dotstart = \".\" 1*octet-not-crlf CRLF\n\
    \                          ; A line containing only \".\" ends the\n         \
    \                 ; multi-line.  Remove a leading '.' if\n                   \
    \       ; followed by another '.'.\n   not-star           = CRLF / %x01-09 / %x0B-0C\
    \ / %x0E-29 / %x2B-FF\n                          ; either a CRLF pair, OR a single\
    \ octet\n                          ; other than NUL, CR, LF, or star\n   not-star-slash\
    \     = CRLF / %x01-09 / %x0B-0C / %x0E-29 / %x2B-2E /\n                     \
    \   %x30-FF\n                          ; either a CRLF pair, OR a single octet\n\
    \                          ; other than NUL, CR, LF, star, or slash\n   number\
    \             = 1*DIGIT [ QUANTIFIER ]\n   octet-not-crlf     = %x01-09 / %x0B-0C\
    \ / %x0E-FF\n                          ; a single octet other than NUL, CR, or\
    \ LF\n   octet-not-period   = %x01-09 / %x0B-0C / %x0E-2D / %x2F-FF\n        \
    \                  ; a single octet other than NUL,\n                        \
    \  ; CR, LF, or period\n   octet-not-qspecial = %x01-09 / %x0B-0C / %x0E-21 /\
    \ %x23-5B / %x5D-FF\n                          ; a single octet other than NUL,\n\
    \                          ; CR, LF, double-quote, or backslash\n   QUANTIFIER\
    \         = \"K\" / \"M\" / \"G\"\n   quoted-other       = \"\\\" octet-not-qspecial\n\
    \                          ; represents just the octet-no-qspecial\n         \
    \                 ; character.  SHOULD NOT be used\n   quoted-safe        = CRLF\
    \ / octet-not-qspecial\n                          ; either a CRLF pair, OR a single\
    \ octet other\n                          ; than NUL, CR, LF, double-quote, or\
    \ backslash\n   quoted-special     = \"\\\" (DQUOTE / \"\\\")\n              \
    \            ; represents just a double-quote or backslash\n   quoted-string \
    \     = DQUOTE quoted-text DQUOTE\n   quoted-text        = *(quoted-safe / quoted-special\
    \ / quoted-other)\n   STAR               = \"*\"\n   tag                = \":\"\
    \ identifier\n   white-space        = 1*(SP / CRLF / HTAB) / comment\n"
- title: 8.2.  Grammar
  contents:
  - "8.2.  Grammar\n   The following is the grammar of Sieve after it has been lexically\n\
    \   interpreted.  No whitespace or comments appear below.  The start\n   symbol\
    \ is \"start\".\n   argument     = string-list / number / tag\n   arguments  \
    \  = *argument [ test / test-list ]\n   block        = \"{\" commands \"}\"\n\
    \   command      = identifier arguments (\";\" / block)\n   commands     = *command\n\
    \   start        = commands\n   string       = quoted-string / multi-line\n  \
    \ string-list  = \"[\" string *(\",\" string) \"]\" / string\n               \
    \     ; if there is only a single string, the brackets\n                    ;\
    \ are optional\n   test         = identifier arguments\n   test-list    = \"(\"\
    \ test *(\",\" test) \")\"\n"
- title: 8.3.  Statement Elements
  contents:
  - "8.3.  Statement Elements\n   These elements are collected from the \"Syntax\"\
    \ sections elsewhere in\n   this document, and are provided here in [ABNF] syntax\
    \ so that they\n   can be modified by extensions.\n   ADDRESS-PART = \":localpart\"\
    \ / \":domain\" / \":all\"\n   COMPARATOR   = \":comparator\" string\n   MATCH-TYPE\
    \   = \":is\" / \":contains\" / \":matches\"\n"
- title: 9.  Extended Example
  contents:
  - "9.  Extended Example\n   The following is an extended example of a Sieve script.\
    \  Note that it\n   does not make use of the implicit keep.\n    #\n    # Example\
    \ Sieve Filter\n    # Declare any optional features or extension used by the script\n\
    \    #\n    require [\"fileinto\"];\n    #\n    # Handle messages from known mailing\
    \ lists\n    # Move messages from IETF filter discussion list to filter mailbox\n\
    \    #\n    if header :is \"Sender\" \"owner-ietf-mta-filters@imc.org\"\n    \
    \        {\n            fileinto \"filter\";  # move to \"filter\" mailbox\n \
    \           }\n    #\n    # Keep all messages to or from people in my company\n\
    \    #\n    elsif address :DOMAIN :is [\"From\", \"To\"] \"example.com\"\n   \
    \         {\n            keep;               # keep in \"In\" mailbox\n      \
    \      }\n    #\n    # Try and catch unsolicited email.  If a message is not to\
    \ me,\n    # or it contains a subject known to be spam, file it away.\n    #\n\
    \    elsif anyof (NOT address :all :contains\n                   [\"To\", \"Cc\"\
    , \"Bcc\"] \"me@example.com\",\n                 header :matches \"subject\"\n\
    \                   [\"*make*money*fast*\", \"*university*dipl*mas*\"])\n    \
    \        {\n            fileinto \"spam\";   # move to \"spam\" mailbox\n    \
    \        }\n    else\n            {\n            # Move all other (non-company)\
    \ mail to \"personal\"\n            # mailbox.\n            fileinto \"personal\"\
    ;\n            }\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   Users must get their mail.  It is imperative\
    \ that whatever\n   implementations use to store the user-defined filtering scripts\n\
    \   protect them from unauthorized modification, to preserve the\n   integrity\
    \ of the mail system.  An attacker who can modify a script\n   can cause mail\
    \ to be discarded, rejected, or forwarded to an\n   unauthorized recipient.  In\
    \ addition, it's possible that Sieve\n   scripts might expose private information,\
    \ such as mailbox names, or\n   email addresses of favored (or disfavored) correspondents.\
    \  Because\n   of that, scripts SHOULD also be protected from unauthorized\n \
    \  retrieval.\n   Several commands, such as \"discard\", \"redirect\", and \"\
    fileinto\",\n   allow for actions to be taken that are potentially very dangerous.\n\
    \   Use of the \"redirect\" command to generate notifications may easily\n   overwhelm\
    \ the target address, especially if it was not designed to\n   handle large messages.\n\
    \   Allowing a single script to redirect to multiple destinations can be\n   used\
    \ as a means of amplifying the number of messages in an attack.\n   Moreover,\
    \ if loop detection is not properly implemented, it may be\n   possible to set\
    \ up exponentially growing message loops.  Accordingly,\n   Sieve implementations:\n\
    \   (1) MUST implement facilities to detect and break message loops.  See\n  \
    \     section 6.2 of [SMTP] for additional information on basic loop\n       detection\
    \ strategies.\n   (2) MUST provide the means for administrators to limit the ability\
    \ of\n       users to abuse redirect.  In particular, it MUST be possible to\n\
    \       limit the number of redirects a script can perform.\n       Additionally,\
    \ if no use cases exist for using redirect to\n       multiple destinations, this\
    \ limit SHOULD be set to 1.  Additional\n       limits, such as the ability to\
    \ restrict redirect to local users,\n       MAY also be implemented.\n   (3) MUST\
    \ provide facilities to log use of redirect in order to\n       facilitate tracking\
    \ down abuse.\n   (4) MAY use script analysis to determine whether or not a given\n\
    \       script can be executed safely.  While the Sieve language is\n       sufficiently\
    \ complex that full analysis of all possible scripts\n       is computationally\
    \ infeasible, the majority of real-world scripts\n       are amenable to analysis.\
    \  For example, an implementation might\n       allow scripts that it has determined\
    \ are safe to run unhindered,\n       block scripts that are potentially problematic,\
    \ and subject\n       unclassifiable scripts to additional auditing and logging.\n\
    \   Allowing redirects at all may not be appropriate in situations where\n   email\
    \ accounts are freely available and/or not trackable to a human\n   who can be\
    \ held accountable for creating message bombs or other\n   abuse.\n   As with\
    \ any filter on a message stream, if the Sieve implementation\n   and the mail\
    \ agents 'behind' Sieve in the message stream differ in\n   their interpretation\
    \ of the messages, it may be possible for an\n   attacker to subvert the filter.\
    \  Of particular note are differences\n   in the interpretation of malformed messages\
    \ (e.g., missing or extra\n   syntax characters) or those that exhibit corner\
    \ cases (e.g., NUL\n   octets encoded via [MIME3]).\n"
- title: 11.  Acknowledgments
  contents:
  - "11.  Acknowledgments\n   This document has been revised in part based on comments\
    \ and\n   discussions that took place on and off the SIEVE mailing list.\n   Thanks\
    \ to Sharon Chisholm, Cyrus Daboo, Ned Freed, Arnt Gulbrandsen,\n   Michael Haardt,\
    \ Kjetil Torgrim Homme, Barry Leiba, Mark E. Mallett,\n   Alexey Melnikov, Eric\
    \ Rescorla, Rob Siemborski, and Nigel Swinson for\n   reviews and suggestions.\n"
- title: 12.  Normative References
  contents:
  - "12.  Normative References\n   [ABNF]      Crocker, D., Ed., and P. Overell, \"\
    Augmented BNF for\n               Syntax Specifications: ABNF\", RFC 4234, October\
    \ 2005.\n   [COLLATION] Newman, C., Duerst, M., and A. Gulbrandsen, \"Internet\n\
    \               Application Protocol Collation Registry\", RFC 4790, March\n \
    \              2007.\n   [IMAIL]     Resnick, P., Ed., \"Internet Message Format\"\
    , RFC 2822,\n               April 2001.\n   [KEYWORDS]  Bradner, S., \"Key words\
    \ for use in RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC\
    \ 2119, March 1997.\n   [MIME]      Freed, N. and N. Borenstein, \"Multipurpose\
    \ Internet Mail\n               Extensions (MIME) Part One: Format of Internet\
    \ Message\n               Bodies\", RFC 2045, November 1996.\n   [MIME3]     Moore,\
    \ K., \"MIME (Multipurpose Internet Mail Extensions)\n               Part Three:\
    \ Message Header Extensions for Non-ASCII\n               Text\", RFC 2047, November\
    \ 1996.\n   [SMTP]      Klensin, J., Ed., \"Simple Mail Transfer Protocol\", RFC\n\
    \               2821, April 2001.\n   [UTF-8]     Yergeau, F., \"UTF-8, a transformation\
    \ format of ISO\n               10646\", STD 63, RFC 3629, November 2003.\n"
- title: 13.  Informative References
  contents:
  - "13.  Informative References\n   [BINARY-SI] \"Standard IEC 60027-2: Letter symbols\
    \ to be used in\n               electrical technology - Part 2: Telecommunications\
    \ and\n               electronics\", January 1999.\n   [DSN]       Moore, K. and\
    \ G. Vaudreuil, \"An Extensible Message Format\n               for Delivery Status\
    \ Notifications\", RFC 3464, January\n               2003.\n   [FLAMES]    Borenstein,\
    \ N, and C. Thyberg, \"Power, Ease of Use, and\n               Cooperative Work\
    \ in a Practical Multimedia Message\n               System\", Int. J.  of Man-Machine\
    \ Studies, April, 1991.\n               Reprinted in Computer-Supported Cooperative\
    \ Work and\n               Groupware, Saul Greenberg, editor, Harcourt Brace\n\
    \               Jovanovich, 1991.  Reprinted in Readings in Groupware and\n  \
    \             Computer-Supported Cooperative Work, Ronald Baecker,\n         \
    \      editor, Morgan Kaufmann, 1993.\n   [IMAP]      Crispin, M., \"Internet\
    \ Message Access Protocol - version\n               4rev1\", RFC 3501, March 2003.\n\
    \   [MDN]       Hansen, T., Ed., and G. Vaudreuil, Ed., \"Message\n          \
    \     Disposition Notification\", RFC 3798, May 2004.\n   [RFC3028]   Showalter,\
    \ T., \"Sieve: A Mail Filtering Language\", RFC\n               3028, January\
    \ 2001.\n"
- title: 14.  Changes from RFC 3028
  contents:
  - "14.  Changes from RFC 3028\n   This following list is a summary of the changes\
    \ that have been made\n   in the Sieve language base specification from [RFC3028].\n\
    \    1. Removed ban on tests having side-effects\n    2. Removed reject extension\
    \ (will be specified in a separate RFC)\n    3. Clarified description of comparators\
    \ to match [COLLATION], the\n       new base specification for them\n    4. Require\
    \ stripping of leading and trailing whitespace in \"header\"\n       test\n  \
    \  5. Clarified or tightened handling of many minor items, including:\n      \
    \ - invalid [MIME3] encoding\n       - invalid addresses in headers\n       -\
    \ invalid header field names in tests\n       - 'undefined' comparator result\n\
    \       - unknown envelope parts\n       - null return-path in \"envelope\" test\n\
    \    6. Capability strings are case-sensitive\n    7. Clarified that fileinto\
    \ should reencode non-ASCII mailbox\n       names to match the mailstore's conventions\n\
    \    8. Errors in the ABNF were corrected\n    9. The references were updated\
    \ and split into normative and\n       informative\n   10. Added encoded-character\
    \ capability and deprecated (but did not\n       remove) use of arbitrary binary\
    \ octets in Sieve scripts.\n   11. Updated IANA registration template, and added\
    \ IANA\n       considerations to permit capability prefix registrations.\n   12.\
    \ Added .sieve as a valid extension for Sieve scripts.\n"
- title: Editors' Addresses
  contents:
  - "Editors' Addresses\n   Philip Guenther\n   Sendmail, Inc.\n   6425 Christie St.\
    \ Ste 400\n   Emeryville, CA 94608\n   EMail: guenther@sendmail.com\n   Tim Showalter\n\
    \   EMail: tjs@psaux.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
