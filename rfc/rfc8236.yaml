- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                       F. Hao, Ed.
  contents:
  - "Independent Submission                                       F. Hao, Ed.\n  \
    \      J-PAKE: Password-Authenticated Key Exchange by Juggling\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies a Password-Authenticated Key Exchange by\n\
    \   Juggling (J-PAKE) protocol.  This protocol allows the establishment\n   of\
    \ a secure end-to-end communication channel between two remote\n   parties over\
    \ an insecure network solely based on a shared password,\n   without requiring\
    \ a Public Key Infrastructure (PKI) or any trusted\n   third party.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc8236.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n     1.1.  Requirements Language . . . . . . . . . . . . . .\
    \ . . . .   3\n     1.2.  Notation  . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   3\n   2.  J-PAKE over Finite Field  . . . . . . . . . . . . . . . .\
    \ . .   4\n     2.1.  Protocol Setup  . . . . . . . . . . . . . . . . . . . .\
    \ .   4\n     2.2.  Two-Round Key Exchange  . . . . . . . . . . . . . . . . .\
    \   5\n     2.3.  Computational Cost  . . . . . . . . . . . . . . . . . . .  \
    \ 6\n   3.  J-PAKE over Elliptic Curve  . . . . . . . . . . . . . . . . .   7\n\
    \     3.1.  Protocol Setup  . . . . . . . . . . . . . . . . . . . . .   7\n  \
    \   3.2.  Two-Round Key Exchange  . . . . . . . . . . . . . . . . .   7\n    \
    \ 3.3.  Computational Cost  . . . . . . . . . . . . . . . . . . .   8\n   4. \
    \ Three-Pass Variant  . . . . . . . . . . . . . . . . . . . . .   8\n   5.  Key\
    \ Confirmation  . . . . . . . . . . . . . . . . . . . . . .   9\n   6.  Security\
    \ Considerations . . . . . . . . . . . . . . . . . . .  11\n   7.  IANA Considerations\
    \ . . . . . . . . . . . . . . . . . . . . .  12\n   8.  References  . . . . .\
    \ . . . . . . . . . . . . . . . . . . . .  12\n     8.1.  Normative References\
    \  . . . . . . . . . . . . . . . . . .  12\n     8.2.  Informative References\
    \  . . . . . . . . . . . . . . . . .  14\n   Acknowledgements  . . . . . . . .\
    \ . . . . . . . . . . . . . . . .  15\n   Author's Address  . . . . . . . . .\
    \ . . . . . . . . . . . . . . .  15\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Password-Authenticated Key Exchange (PAKE) is a technique\
    \ that aims\n   to establish secure communication between two remote parties solely\n\
    \   based on their shared password, without relying on a Public Key\n   Infrastructure\
    \ or any trusted third party [BM92].  The first PAKE\n   protocol, called Encrypted\
    \ Key Exchange (EKE), was proposed by Steven\n   Bellovin and Michael Merrit in\
    \ 1992 [BM92].  Other well-known PAKE\n   protocols include Simple Password Exponential\
    \ Key Exchange (SPEKE) by\n   David Jablon in 1996 [Jab96] and Secure Remote Password\
    \ (SRP) by Tom\n   Wu in 1998 [Wu98].  SRP has been revised several times to address\n\
    \   reported security and efficiency issues.  In particular, the version\n   6\
    \ of SRP, commonly known as SRP-6, is specified in [RFC5054].\n   This document\
    \ specifies a PAKE protocol called Password-Authenticated\n   Key Exchange by\
    \ Juggling (J-PAKE), which was designed by Feng Hao and\n   Peter Ryan in 2008\
    \ [HR08].  There are a few factors that may be\n   considered in favor of J-PAKE.\
    \  First, J-PAKE has security proofs,\n   while equivalent proofs are lacking\
    \ in EKE, SPEKE and SRP-6.  Second,\n   J-PAKE follows a completely different\
    \ design approach from all other\n   PAKE protocols, and is built upon a well-established\
    \ Zero Knowledge\n   Proof (ZKP) primitive: Schnorr NIZK proof [RFC8235].  Third,\
    \ J-PAKE\n   adopts novel engineering techniques to optimize the use of ZKP so\n\
    \   that overall the protocol is sufficiently efficient for practical\n   use.\
    \  Fourth, J-PAKE is designed to work generically in both the\n   finite field\
    \ and elliptic curve settings (i.e., DSA and ECDSA-like\n   groups, respectively).\
    \  Unlike SPEKE, it does not require any extra\n   primitive to hash passwords\
    \ onto a designated elliptic curve.  Unlike\n   SPAKE2 [AP05] and SESPAKE [SOAA15],\
    \ it does not require a trusted\n   setup (i.e., the so-called common reference\
    \ model) to define a pair\n   of generators whose discrete logarithm must be unknown.\
    \  Finally,\n   J-PAKE has been used in real-world applications at a relatively\
    \ large\n   scale, e.g., Firefox sync [MOZILLA], Pale moon sync [PALEMOON], and\n\
    \   Google Nest products [ABM15].  It has been included into widely\n   distributed\
    \ open source libraries such as OpenSSL [BOINC], Network\n   Security Services\
    \ (NSS) [MOZILLA_NSS], and the Bouncy Castle\n   [BOUNCY].  Since 2015, J-PAKE\
    \ has been included in Thread [THREAD] as\n   a standard key agreement mechanism\
    \ for IoT (Internet of Things)\n   applications, and also included in ISO/IEC\
    \ 11770-4:2017\n   [ISO.11770-4].\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 1.2.  Notation
  contents:
  - "1.2.  Notation\n   The following notation is used in this document:\n   o  Alice:\
    \ the assumed identity of the prover in the protocol\n   o  Bob: the assumed identity\
    \ of the verifier in the protocol\n   o  s: a low-entropy secret shared between\
    \ Alice and Bob\n   o  a | b: a divides b\n   o  a || b: concatenation of a and\
    \ b\n   o  [a, b]: the interval of integers between and including a and b\n  \
    \ o  H: a secure cryptographic hash function\n   o  p: a large prime\n   o  q:\
    \ a large prime divisor of p-1, i.e., q | p-1\n   o  Zp*: a multiplicative group\
    \ of integers modulo p\n   o  Gq: a subgroup of Zp* with prime order q\n   o \
    \ g: a generator of Gq\n   o  g^d: g raised to the power of d\n   o  a mod b:\
    \ a modulo b\n   o  Fp: a finite field of p elements, where p is a prime\n   o\
    \  E(Fp): an elliptic curve defined over Fp\n   o  G: a generator of the subgroup\
    \ over E(Fp) with prime order n\n   o  n: the order of G\n   o  h: the cofactor\
    \ of the subgroup generated by G, which is equal to\n      the order of the elliptic\
    \ curve divided by n\n   o  P x [b]: multiplication of a point P with a scalar\
    \ b over E(Fp)\n   o  KDF(a): Key Derivation Function with input a\n   o  MAC(MacKey,\
    \ MacData): MAC function with MacKey as the key and\n      MacData as the input\
    \ data\n"
- title: 2.  J-PAKE over Finite Field
  contents:
  - '2.  J-PAKE over Finite Field

    '
- title: 2.1.  Protocol Setup
  contents:
  - "2.1.  Protocol Setup\n   When implemented over a finite field, J-PAKE may use\
    \ the same group\n   parameters as DSA [FIPS186-4].  Let p and q be two large\
    \ primes such\n   that q | p-1.  Let Gq denote a subgroup of Zp* with prime order\
    \ q.\n   Let g be a generator for Gq.  Any non-identity element in Gq can be a\n\
    \   generator.  The two communicating parties, Alice and Bob, both agree\n   on\
    \ (p, q, g), which can be hard-wired in the software code.  They can\n   also\
    \ use the method in NIST FIPS 186-4, Appendix A [FIPS186-4] to\n   generate (p,\
    \ q, g).  Here, DSA group parameters are used only as an\n   example.  Other multiplicative\
    \ groups suitable for cryptography can\n   also be used for the implementation,\
    \ e.g., groups defined in\n   [RFC4419].  A group setting that provides 128-bit\
    \ security or above\n   is recommended.  The security proof of J-PAKE depends\
    \ on the\n   Decisional Diffie-Hellman (DDH) problem being intractable in the\n\
    \   considered group.\n   Let s be a secret value derived from a low-entropy password\
    \ shared\n   between Alice and Bob.  The value of s is REQUIRED to fall within\
    \ the\n   range of [1, q-1].  (Note that s must not be 0 for any non-empty\n \
    \  secret.)  This range is defined as a necessary condition in [HR08]\n   for\
    \ proving the \"on-line dictionary attack resistance\", since s, s+q,\n   s+2q,\
    \ ..., are all considered equivalent values as far as the\n   protocol specification\
    \ is concerned.  In a practical implementation,\n   one may obtain s by taking\
    \ a cryptographic hash of the password and\n   wrapping the result with respect\
    \ to modulo q.  Alternatively, one may\n   simply treat the password as an octet\
    \ string and convert the string\n   to an integer modulo q by following the method\
    \ defined in\n   Section 2.3.8 of [SEC1].  In either case, one MUST ensure s is\
    \ not\n   equal to 0 modulo q.\n"
- title: 2.2.  Two-Round Key Exchange
  contents:
  - "2.2.  Two-Round Key Exchange\n   Round 1: Alice selects an ephemeral private\
    \ key x1 uniformly at\n   random from [0, q-1] and another ephemeral private key\
    \ x2 uniformly\n   at random from [1, q-1].  Similarly, Bob selects an ephemeral\
    \ private\n   key x3 uniformly at random from [0, q-1] and another ephemeral\n\
    \   private key x4 uniformly at random from [1, q-1].\n   o  Alice -> Bob: g1\
    \ = g^x1 mod p, g2 = g^x2 mod p and ZKPs for x1 and\n      x2\n   o  Bob -> Alice:\
    \ g3 = g^x3 mod p, g4 = g^x4 mod p and ZKPs for x3 and\n      x4\n   In this round,\
    \ the sender must send zero knowledge proofs to\n   demonstrate the knowledge\
    \ of the ephemeral private keys.  A suitable\n   technique is to use the Schnorr\
    \ NIZK proof [RFC8235].  As an example,\n   suppose one wishes to prove the knowledge\
    \ of the exponent for D = g^d\n   mod p.  The generated Schnorr NIZK proof will\
    \ contain: {UserID,\n   V = g^v mod p, r = v - d * c mod q}, where UserID is the\
    \ unique\n   identifier for the prover, v is a number chosen uniformly at random\n\
    \   from [0, q-1] and c = H(g || V || D || UserID).  The \"uniqueness\" of\n \
    \  UserID is defined from the user's perspective -- for example, if\n   Alice\
    \ communicates with several parties, she shall associate a unique\n   identity\
    \ with each party.  Upon receiving a Schnorr NIZK proof, Alice\n   shall check\
    \ the prover's UserID is a valid identity and is different\n   from her own identity.\
    \  During the key exchange process using J-PAKE,\n   each party shall ensure that\
    \ the other party has been consistently\n   using the same identity throughout\
    \ the protocol execution.  Details\n   about the Schnorr NIZK proof, including\
    \ the generation and the\n   verification procedures, can be found in [RFC8235].\n\
    \   When this round finishes, Alice verifies the received ZKPs as\n   specified\
    \ in [RFC8235] and also checks that g4 != 1 mod p.\n   Similarly, Bob verifies\
    \ the received ZKPs and also checks that\n   g2 != 1 mod p.  If any of these checks\
    \ fails, this session should be\n   aborted.\n   Round 2:\n   o  Alice -> Bob:\
    \ A = (g1*g3*g4)^(x2*s) mod p and a ZKP for x2*s\n   o  Bob -> Alice: B = (g1*g2*g3)^(x4*s)\
    \ mod p and a ZKP for x4*s\n   In this round, the Schnorr NIZK proof is computed\
    \ in the same way as\n   in the previous round except that the generator is different.\
    \  For\n   Alice, the generator used is (g1*g3*g4) instead of g; for Bob, the\n\
    \   generator is (g1*g2*g3) instead of g.  Since any non-identity element\n  \
    \ in Gq can be used as a generator, Alice and Bob just need to ensure\n   g1*g3*g4\
    \ != 1 mod p and g1*g2*g3 != 1 mod p.  With overwhelming\n   probability, these\
    \ inequalities are statistically guaranteed even\n   when the user is communicating\
    \ with an adversary (i.e., in an active\n   attack).  Nonetheless, for absolute\
    \ guarantee, the receiving party\n   shall explicitly check if these inequalities\
    \ hold, and abort the\n   session in case such a check fails.\n   When the second\
    \ round finishes, Alice and Bob verify the received\n   ZKPs.  If the verification\
    \ fails, the session is aborted.  Otherwise,\n   the two parties compute the common\
    \ key material as follows:\n   o  Alice computes Ka = (B/g4^(x2*s))^x2 mod p\n\
    \   o  Bob computes Kb = (A/g2^(x4*s))^x4 mod p\n   Here, Ka = Kb = g^((x1+x3)*x2*x4*s)\
    \ mod p.  Let K denote the same key\n   material held by both parties.  Using\
    \ K as input, Alice and Bob then\n   apply a Key Derivation Function (KDF) to\
    \ derive a common session key\n   k.  If the subsequent secure communication uses\
    \ a symmetric cipher in\n   an authenticated mode (say AES-GCM), then one key\
    \ is sufficient,\n   i.e., k = KDF(K).  Otherwise, the session key should comprise\
    \ an\n   encryption key (for confidentiality) and a MAC key (for integrity),\n\
    \   i.e., k = k_enc || k_mac, where k_enc = KDF(K || \"JPAKE_ENC\") and\n   k_mac\
    \ = KDF(K || \"JPAKE_MAC\").  The exact choice of the KDF is left\n   to specific\
    \ applications to define.\n"
- title: 2.3.  Computational Cost
  contents:
  - "2.3.  Computational Cost\n   The computational cost is estimated based on counting\
    \ the number of\n   modular exponentiations since they are the predominant cost\
    \ factors.\n   Note that it takes one exponentiation to generate a Schnorr NIZK\n\
    \   proof and two to verify it [RFC8235].  For Alice, she needs to\n   perform\
    \ 8 exponentiations in the first round, 4 in the second round,\n   and 2 in the\
    \ final computation of the session key.  Hence, that is 14\n   modular exponentiations\
    \ in total.  Based on the symmetry, the\n   computational cost for Bob is exactly\
    \ the same.\n"
- title: 3.  J-PAKE over Elliptic Curve
  contents:
  - '3.  J-PAKE over Elliptic Curve

    '
- title: 3.1.  Protocol Setup
  contents:
  - "3.1.  Protocol Setup\n   The J-PAKE protocol works basically the same in the\
    \ elliptic curve\n   (EC) setting, except that the underlying multiplicative group\
    \ over a\n   finite field is replaced by an additive group over an elliptic curve.\n\
    \   Nonetheless, the EC version of J-PAKE is specified here for\n   completeness.\n\
    \   When implemented over an elliptic curve, J-PAKE may use the same EC\n   parameters\
    \ as ECDSA [FIPS186-4].  The FIPS 186-4 standard [FIPS186-4]\n   defines three\
    \ types of curves suitable for ECDSA: pseudorandom curves\n   over prime fields,\
    \ pseudorandom curves over binary fields, and\n   special curves over binary fields\
    \ called Koblitz curves or anomalous\n   binary curves.  All these curves that\
    \ are suitable for ECDSA can also\n   be used to implement J-PAKE.  However, for\
    \ illustration purposes,\n   only curves over prime fields are described in this\
    \ document.\n   Typically, such curves include NIST P-256, P-384, and P-521. \
    \ When\n   choosing a curve, a level of 128-bit security or above is\n   recommended.\
    \  Let E(Fp) be an elliptic curve defined over a finite\n   field Fp, where p\
    \ is a large prime.  Let G be a generator for the\n   subgroup over E(Fp) of prime\
    \ order n.  Here, the NIST curves are used\n   only as an example.  Other secure\
    \ curves such as Curve25519 are also\n   suitable for implementation.  The security\
    \ proof of J-PAKE relies on\n   the assumption that the DDH problem is intractable\
    \ in the considered\n   group.\n   As before, let s denote the shared secret between\
    \ Alice and Bob.  The\n   value of s falls within [1, n-1].  In particular, note\
    \ that s MUST\n   not be equal to 0 mod n.\n"
- title: 3.2.  Two-Round Key Exchange
  contents:
  - "3.2.  Two-Round Key Exchange\n   Round 1: Alice selects ephemeral private keys\
    \ x1 and x2 uniformly at\n   random from [1, n-1].  Similarly, Bob selects ephemeral\
    \ private keys\n   x3 and x4 uniformly at random from [1, n-1].\n   o  Alice ->\
    \ Bob: G1 = G x [x1], G2 = G x [x2] and ZKPs for x1 and x2\n   o  Bob -> Alice:\
    \ G3 = G x [x3], G4 = G x [x4] and ZKPs for x3 and x4\n   When this round finishes,\
    \ Alice and Bob verify the received ZKPs as\n   specified in [RFC8235].  As an\
    \ example, to prove the knowledge of the\n   discrete logarithm of D = G x [d]\
    \ with respect to the base point G,\n   the ZKP contains: {UserID, V = G x [v],\
    \ r = v - d * c mod n}, where\n   UserID is the unique identifier for the prover,\
    \ v is a number chosen\n   uniformly at random from [1, n-1] and c = H(G || V\
    \ || D || UserID).\n   The verifier shall check the prover's UserID is a valid\
    \ identity and\n   is different from its own identity.  If the verification of\
    \ the ZKP\n   fails, the session is aborted.\n   Round 2:\n   o  Alice -> Bob:\
    \ A = (G1 + G3 + G4) x [x2*s] and a ZKP for x2*s\n   o  Bob -> Alice: B = (G1\
    \ + G2 + G3) x [x4*s] and a ZKP for x4*s\n   When the second round finishes, Alice\
    \ and Bob verify the received\n   ZKPs.  The ZKPs are computed in the same way\
    \ as in the previous round\n   except that the generator is different.  For Alice,\
    \ the new generator\n   is G1 + G3 + G4; for Bob, it is G1 + G2 + G3.  Alice and\
    \ Bob shall\n   check that these new generators are not points at infinity.  If\
    \ any\n   of these checks fails, the session is aborted.  Otherwise, the two\n\
    \   parties compute the common key material as follows:\n   o  Alice computes\
    \ Ka = (B - (G4 x [x2*s])) x [x2]\n   o  Bob computes Kb = (A - (G2 x [x4*s]))\
    \ x [x4]\n   Here, Ka = Kb = G x [(x1+x3)*(x2*x4*s)].  Let K denote the same key\n\
    \   material held by both parties.  Using K as input, Alice and Bob then\n   apply\
    \ a Key Derivation Function (KDF) to derive a common session key\n   k.\n"
- title: 3.3.  Computational Cost
  contents:
  - "3.3.  Computational Cost\n   In the EC setting, the computational cost of J-PAKE\
    \ is estimated\n   based on counting the number of scalar multiplications over\
    \ the\n   elliptic curve.  Note that it takes one multiplication to generate a\n\
    \   Schnorr NIZK proof and one to verify it [RFC8235].  For Alice, she\n   has\
    \ to perform 6 multiplications in the first round, 3 in the second\n   round,\
    \ and 2 in the final computation of the session key.  Hence,\n   that is 11 multiplications\
    \ in total.  Based on the symmetry, the\n   computational cost for Bob is exactly\
    \ the same.\n"
- title: 4.  Three-Pass Variant
  contents:
  - "4.  Three-Pass Variant\n   The two-round J-PAKE protocol is completely symmetric,\
    \ which\n   significantly simplifies the security analysis.  In practice, one\n\
    \   party normally initiates the communication and the other party\n   responds.\
    \  In that case, the protocol will be completed in three\n   passes instead of\
    \ two rounds.  The two-round J-PAKE protocol can be\n   trivially changed to three\
    \ passes without losing security.  Take the\n   finite field setting as an example,\
    \ and assume Alice initiates the\n   key exchange.  The three-pass variant works\
    \ as follows:\n   1.  Alice -> Bob: g1 = g^x1 mod p, g2 = g^x2 mod p, ZKPs for\
    \ x1 and\n       x2.\n   2.  Bob -> Alice: g3 = g^x3 mod p, g4 = g^x4 mod p,\n\
    \       B = (g1*g2*g3)^(x4*s) mod p, ZKPs for x3, x4, and x4*s.\n   3.  Alice\
    \ -> Bob: A = (g1*g3*g4)^(x2*s) mod p and a ZKP for x2*s.\n   Both parties compute\
    \ the session keys in exactly the same way as\n   before.\n"
- title: 5.  Key Confirmation
  contents:
  - "5.  Key Confirmation\n   The two-round J-PAKE protocol (or the three-pass variant)\
    \ provides\n   cryptographic guarantee that only the authenticated party who used\n\
    \   the same password at the other end is able to compute the same\n   session\
    \ key.  So far, the authentication is only implicit.  The key\n   confirmation\
    \ is also implicit [Stinson06].  The two parties may use\n   the derived key straight\
    \ away to start secure communication by\n   encrypting messages in an authenticated\
    \ mode.  Only the party with\n   the same derived session key will be able to\
    \ decrypt and read those\n   messages.\n   For achieving explicit authentication,\
    \ an additional key confirmation\n   procedure should be performed.  This provides\
    \ explicit assurance that\n   the other party has actually derived the same key.\
    \  In this case, the\n   key confirmation is explicit [Stinson06].\n   In J-PAKE,\
    \ explicit key confirmation is recommended whenever the\n   network bandwidth\
    \ allows it.  It has the benefit of providing\n   explicit and immediate confirmation\
    \ if the two parties have derived\n   the same key and hence are authenticated\
    \ to each other.  This allows\n   a practical implementation of J-PAKE to effectively\
    \ detect online\n   dictionary attacks (if any), and stop them accordingly by\
    \ setting a\n   threshold for the consecutively failed connection attempts.\n\
    \   To achieve explicit key confirmation, there are several methods\n   available.\
    \  They are generically applicable to all key exchange\n   protocols, not just\
    \ J-PAKE.  In general, it is recommended that a\n   different key from the session\
    \ key be used for key confirmation --\n   say, k' = KDF(K || \"JPAKE_KC\").  The\
    \ advantage of using a different\n   key for key confirmation is that the session\
    \ key remains\n   indistinguishable from random after the key confirmation process.\n\
    \   (However, this perceived advantage is actually subtle and only\n   theoretical.)\
    \  Two explicit key confirmation methods are presented\n   here.\n   The first\
    \ method is based on the one used in the SPEKE protocol\n   [Jab96].  Suppose\
    \ Alice initiates the key confirmation.  Alice sends\n   to Bob H(H(k')), which\
    \ Bob will verify.  If the verification is\n   successful, Bob sends back to Alice\
    \ H(k'), which Alice will verify.\n   This key confirmation procedure needs to\
    \ be completed in two rounds,\n   as shown below.\n   1.  Alice -> Bob: H(H(k'))\n\
    \   2.  Bob -> Alice: H(k')\n   The above procedure requires two rounds instead\
    \ of one, because the\n   second message depends on the first.  If both parties\
    \ attempt to send\n   the first message at the same time without an agreed order,\
    \ they\n   cannot tell if the message that they receive is a genuine challenge\n\
    \   or a replayed message, and consequently may enter a deadlock.\n   The second\
    \ method is based on the unilateral key confirmation scheme\n   specified in NIST\
    \ SP 800-56A Revision 1 [BJS07].  Alice and Bob send\n   to each other a MAC tag,\
    \ which they will verify accordingly.  This\n   key confirmation procedure can\
    \ be completed in one round.\n   In the finite field setting, it works as follows.\n\
    \   o  Alice -> Bob: MacTagAlice = MAC(k', \"KC_1_U\" || Alice || Bob || g1\n\
    \      || g2 || g3 || g4)\n   o  Bob -> Alice: MacTagBob = MAC(k', \"KC_1_U\"\
    \ || Bob || Alice || g3\n      || g4 || g1 || g2)\n   In the EC setting, the key\
    \ confirmation works basically the same.\n   o  Alice -> Bob: MacTagAlice = MAC(k',\
    \ \"KC_1_U\" || Alice || Bob || G1\n      || G2 || G3 || G4)\n   o  Bob -> Alice:\
    \ MacTagBob = MAC(k', \"KC_1_U\" || Bob || Alice || G3\n      || G4 || G1 || G2)\n\
    \   The second method assumes an additional secure MAC function (e.g.,\n   one\
    \ may use HMAC) and is slightly more complex than the first method.\n   However,\
    \ it can be completed within one round and it preserves the\n   overall symmetry\
    \ of the protocol implementation.  For this reason,\n   the second method is RECOMMENDED.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   A PAKE protocol is designed to provide two functions\
    \ in one protocol\n   execution.  The first one is to provide zero-knowledge authentication\n\
    \   of a password.  It is called \"zero knowledge\" because at the end of\n  \
    \ the protocol, the two communicating parties will learn nothing more\n   than\
    \ one bit information: whether the passwords supplied at two ends\n   are equal.\
    \  Therefore, a PAKE protocol is naturally resistant against\n   phishing attacks.\
    \  The second function is to provide session key\n   establishment if the two\
    \ passwords are equal.  The session key will\n   be used to protect the confidentiality\
    \ and integrity of the\n   subsequent communication.\n   More concretely, a secure\
    \ PAKE protocol shall satisfy the following\n   security requirements [HR10].\n\
    \   1.  Offline dictionary attack resistance: It does not leak any\n       information\
    \ that allows a passive/active attacker to perform\n       offline exhaustive\
    \ search of the password.\n   2.  Forward secrecy: It produces session keys that\
    \ remain secure even\n       when the password is later disclosed.\n   3.  Known-key\
    \ security: It prevents a disclosed session key from\n       affecting the security\
    \ of other sessions.\n   4.  Online dictionary attack resistance: It limits an\
    \ active attacker\n       to test only one password per protocol execution.\n\
    \   First, a PAKE protocol must resist offline dictionary attacks.  A\n   password\
    \ is inherently weak.  Typically, it has only about 20-30 bits\n   entropy.  This\
    \ level of security is subject to exhaustive search.\n   Therefore, in the PAKE\
    \ protocol, the communication must not reveal\n   any data that allows an attacker\
    \ to learn the password through\n   offline exhaustive search.\n   Second, a PAKE\
    \ protocol must provide forward secrecy.  The key\n   exchange is authenticated\
    \ based on a shared password.  However, there\n   is no guarantee on the long-term\
    \ secrecy of the password.  A secure\n   PAKE scheme shall protect past session\
    \ keys even when the password is\n   later disclosed.  This property also implies\
    \ that if an attacker\n   knows the password but only passively observes the key\
    \ exchange, he\n   cannot learn the session key.\n   Third, a PAKE protocol must\
    \ provide known key security.  A session\n   key lasts throughout the session.\
    \  An exposed session key must not\n   cause any global impact on the system,\
    \ affecting the security of\n   other sessions.\n   Finally, a PAKE protocol must\
    \ resist online dictionary attacks.  If\n   the attacker is directly engaging\
    \ in the key exchange, there is no\n   way to prevent such an attacker trying\
    \ a random guess of the\n   password.  However, a secure PAKE scheme should minimize\
    \ the effect\n   of the online attack.  In the best case, the attacker can only\
    \ guess\n   exactly one password per impersonation attempt.  Consecutively failed\n\
    \   attempts can be easily detected, and the subsequent attempts shall be\n  \
    \ thwarted accordingly.  It is recommended that the false\n   authentication counter\
    \ be handled in such a way that any error (which\n   causes the session to fail\
    \ during the key exchange or key\n   confirmation) leads to incrementing the false\
    \ authentication counter.\n   It has been proven in [HR10] that J-PAKE satisfies\
    \ all of the four\n   requirements based on the assumptions that the Decisional\
    \ Diffie-\n   Hellman problem is intractable and the underlying Schnorr NIZK proof\n\
    \   is secure.  An independent study that proves security of J-PAKE in a\n   model\
    \ with algebraic adversaries and random oracles can be found in\n   [ABM15]. \
    \ By comparison, it has been known that EKE has the problem\n   of leaking partial\
    \ information about the password to a passive\n   attacker, hence not satisfying\
    \ the first requirement [Jas96].  For\n   SPEKE and SRP-6, an attacker may be\
    \ able to test more than one\n   password in one online dictionary attack (see\
    \ [Zha04] and [Hao10]),\n   hence they do not satisfy the fourth requirement in\
    \ the strict\n   theoretical sense.  Furthermore, SPEKE is found vulnerable to\
    \ an\n   impersonation attack and a key-malleability attack [HS14].  These two\n\
    \   attacks affect the SPEKE protocol specified in Jablon's original 1996\n  \
    \ paper [Jab96] as well in the D26 draft of IEEE P1363.2 and the ISO/\n   IEC\
    \ 11770-4:2006 standard.  As a result, the specification of SPEKE\n   in ISO/IEC\
    \ 11770-4:2006 has been revised to address the identified\n   problems.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This document does not require any IANA actions.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [ABM15]    Abdalla, M., Benhamouda, F., and P.\
    \ MacKenzie, \"Security\n              of the J-PAKE Password-Authenticated Key\
    \ Exchange\n              Protocol\", 2015 IEEE Symposium on Security and Privacy,\n\
    \              DOI 10.1109/sp.2015.41, May 2015.\n   [BM92]     Bellovin, S. and\
    \ M. Merrit, \"Encrypted Key Exchange:\n              Password-based Protocols\
    \ Secure against Dictionary\n              Attacks\", IEEE Symposium on Security\
    \ and Privacy,\n              DOI 10.1109/risp.1992.213269, May 1992.\n   [HR08]\
    \     Hao, F. and P. Ryan, \"Password Authenticated Key Exchange\n           \
    \   by Juggling\", Lecture Notes in Computer Science, pp.\n              159-171,\
    \ from 16th Security Protocols Workshop (SPW '08),\n              DOI 10.1007/978-3-642-22137-8_23,\
    \ 2011.\n   [HR10]     Hao, F. and P. Ryan, \"J-PAKE: Authenticated Key Exchange\n\
    \              Without PKI\", Transactions on Computational Science XI,\n    \
    \          pp.  192-206, DOI 10.1007/978-3-642-17697-5_10, 2010.\n   [HS14]  \
    \   Hao, F. and S. Shahandashti, \"The SPEKE Protocol\n              Revisited\"\
    , Security Standardisation Research, pp. 26-38,\n              DOI 10.1007/978-3-319-14054-4_2,\
    \ December 2014.\n   [Jab96]    Jablon, D., \"Strong Password-Only Authenticated\
    \ Key\n              Exchange\", ACM SIGCOMM Computer Communication Review, Vol.\n\
    \              26, pp. 5-26, DOI 10.1145/242896.242897, October 1996.\n   [RFC2119]\
    \  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement\
    \ Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n\
    \              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC5054]  Taylor,\
    \ D., Wu, T., Mavrogiannopoulos, N., and T. Perrin,\n              \"Using the\
    \ Secure Remote Password (SRP) Protocol for TLS\n              Authentication\"\
    , RFC 5054, DOI 10.17487/RFC5054, November\n              2007, <https://www.rfc-editor.org/info/rfc5054>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8235]  Hao,\
    \ F., Ed., \"Schnorr Non-interactive Zero Knowledge\n              Proof\", RFC\
    \ 8235, DOI 10.17487/RFC8235, September 2017,\n              <https://www.rfc-editor.org/info/rfc8235>.\n\
    \   [SEC1]     \"Standards for Efficient Cryptography. SEC 1: Elliptic\n     \
    \         Curve Cryptography\", SECG SEC1-v2, May 2009,\n              <http://www.secg.org/sec1-v2.pdf>.\n\
    \   [Stinson06]\n              Stinson, D., \"Cryptography: Theory and Practice\"\
    , 3rd\n              Edition, CRC, 2006.\n   [Wu98]     Wu, T., \"The Secure Remote\
    \ Password Protocol\", Internet\n              Society Symposium on Network and\
    \ Distributed System\n              Security, March 1998.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [AP05]     Abdalla, M. and D. Pointcheval, \"\
    Simple Password-Based\n              Encrypted Key Exchange Protocols\", Topics\
    \ in Cryptology\n              CT-RSA, DOI 10.1007/978-3-540-30574-3_14, 2005.\n\
    \   [BJS07]    Barker, E., Johnson, D., and M. Smid, \"Recommendation for\n  \
    \            Pair-Wise Key Establishment Schemes Using Discrete\n            \
    \  Logarithm Cryptography (Revised)\", NIST Special\n              Publication\
    \ 800-56A, March 2007,\n              <http://csrc.nist.gov/publications/nistpubs/800-56A/\n\
    \              SP800-56A_Revision1_Mar08-2007.pdf>.\n   [BOINC]    BOINC, \"Index\
    \ of /android-boinc/libssl/crypto/jpake\",\n              February 2011, <http://boinc.berkeley.edu/\n\
    \              android-boinc/libssl/crypto/jpake/>.\n   [BOUNCY]   Bouncy Castle\
    \ Cryptography Library,\n              \"org.bouncycastle.crypto.agreement.jpake\
    \ (Bouncy Castle\n              Library 1.57 API Specification)\", May 2017,\n\
    \              <https://www.bouncycastle.org/docs/docs1.5on/org/\n           \
    \   bouncycastle/crypto/agreement/jpake/package-summary.html>.\n   [FIPS186-4]\n\
    \              National Institute of Standards and Technology, \"Digital\n   \
    \           Signature Standard (DSS)\", FIPS PUB 186-4,\n              DOI 10.6028/NIST.FIPS.186-4,\
    \ July 2013,\n              <http://nvlpubs.nist.gov/nistpubs/FIPS/\n        \
    \      NIST.FIPS.186-4.pdf>.\n   [Hao10]    Hao, F., \"On Small Subgroup Non-Confinement\
    \ Attacks\", IEEE\n              Conference on Computer and Information Technology,\n\
    \              DOI 10.1109/CIT.2010.187, 2010.\n   [ISO.11770-4]\n           \
    \   ISO/IEC, \"Information technology -- Security techniques --\n            \
    \  Key management -- Part 4: Mechanisms based on weak\n              secrets\"\
    , (under development), July 2017,\n              <https://www.iso.org/standard/67933.html>.\n\
    \   [Jas96]    Jaspan, B., \"Dual-Workfactor Encrypted Key Exchange:\n       \
    \       Efficiently Preventing Password Chaining and Dictionary\n            \
    \  Attacks\", USENIX Symposium on Security, July 1996.\n   [MOZILLA]  Mozilla\
    \ Wiki, \"Services/KeyExchange\", August 2011,\n              <https://wiki.mozilla.org/index.php?title=Services/\n\
    \              KeyExchange&oldid=343704>.\n   [MOZILLA_NSS]\n              Mozilla\
    \ Central, \"jpake.c - DXR\", August 2016,\n              <https://dxr.mozilla.org/mozilla-central/source/\n\
    \              security/nss/lib/freebl/jpake.c>.\n   [PALEMOON] Moonchild Productions,\
    \ \"Pale Moon Sync\",\n              <https://www.palemoon.org/sync/>.\n   [RFC4419]\
    \  Friedl, M., Provos, N., and W. Simpson, \"Diffie-Hellman\n              Group\
    \ Exchange for the Secure Shell (SSH) Transport Layer\n              Protocol\"\
    , RFC 4419, DOI 10.17487/RFC4419, March 2006,\n              <https://www.rfc-editor.org/info/rfc4419>.\n\
    \   [SOAA15]   Smyshlyaev, S., Oshkin, I., Alekseev, E., and L.\n            \
    \  Ahmetzyanova, \"On the Security of One Password\n              Authenticated\
    \ Key Exchange Protocol\", 2015,\n              <http://eprint.iacr.org/2015/1237.pdf>.\n\
    \   [THREAD]   Thread, \"Thread Commissioning\", White Paper, July 2015,\n   \
    \           <https://portal.threadgroup.org/DesktopModules/\n              Inventures_Document/FileDownload.aspx?ContentID=658>.\n\
    \   [Zha04]    Zhang, M., \"Analysis of the SPEKE Password-Authenticated\n   \
    \           Key Exchange Protocol\", IEEE Communications Letters,\n          \
    \    Vol. 8, pp. 63-65, DOI 10.1109/lcomm.2003.822506, January\n             \
    \ 2004.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The editor would like to thank Dylan Clarke, Siamak Shahandashti,\n\
    \   Robert Cragie, Stanislav Smyshlyaev, and Russ Housley for many useful\n  \
    \ comments.  This work is supported by EPSRC First Grant (EP/J011541/1)\n   and\
    \ ERC Starting Grant (No. 306994).\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Feng Hao (editor)\n   Newcastle University (UK)\n   Urban\
    \ Sciences Building, School of Computing, Newcastle University\n   Newcastle Upon\
    \ Tyne\n   United Kingdom\n   Phone: +44 (0)191-208-6384\n   Email: feng.hao@ncl.ac.uk\n"
