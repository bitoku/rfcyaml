- title: __initial_text__
  contents:
  - '         URI Fragment Identifiers for the text/plain Media Type

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo defines URI fragment identifiers for text/plain MIME\n\
    \   entities.  These fragment identifiers make it possible to refer to\n   parts\
    \ of a text/plain MIME entity, either identified by character\n   position or\
    \ range, or by line position or range.  Fragment\n   identifiers may also contain\
    \ information for integrity checks to make\n   them more robust.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n     1.1.  What Is text/plain?  . . . . . . . . . . . . . .\
    \ . . . . .  3\n     1.2.  What Is a URI Fragment Identifier? . . . . . . . .\
    \ . . . .  4\n     1.3.  Why text/plain Fragment Identifiers? . . . . . . . .\
    \ . . .  4\n     1.4.  Incremental Deployment . . . . . . . . . . . . . . . .\
    \ . .  5\n     1.5.  Notation Used in This Memo . . . . . . . . . . . . . . .\
    \ .  5\n   2.  Fragment Identification Methods  . . . . . . . . . . . . . . .\
    \  5\n     2.1.  Fragment Identification Principles . . . . . . . . . . . .  6\n\
    \       2.1.1.  Positions and Ranges . . . . . . . . . . . . . . . . .  6\n  \
    \     2.1.2.  Characters and Lines . . . . . . . . . . . . . . . . .  7\n    \
    \ 2.2.  Combining the Principles . . . . . . . . . . . . . . . . .  7\n      \
    \ 2.2.1.  Character Position . . . . . . . . . . . . . . . . . .  7\n       2.2.2.\
    \  Character Range  . . . . . . . . . . . . . . . . . . .  8\n       2.2.3.  Line\
    \ Position  . . . . . . . . . . . . . . . . . . . .  8\n       2.2.4.  Line Range\
    \ . . . . . . . . . . . . . . . . . . . . . .  8\n     2.3.  Fragment Identifier\
    \ Robustness . . . . . . . . . . . . . .  8\n   3.  Fragment Identification Syntax\
    \ . . . . . . . . . . . . . . . .  9\n     3.1.  Integrity Checks . . . . . .\
    \ . . . . . . . . . . . . . . .  9\n   4.  Fragment Identifier Processing . .\
    \ . . . . . . . . . . . . . . 10\n     4.1.  Handling of Line Endings in text/plain\
    \ MIME Entities . . . 10\n     4.2.  Handling of Position Values  . . . . . .\
    \ . . . . . . . . . 11\n     4.3.  Handling of Integrity Checks . . . . . . .\
    \ . . . . . . . . 11\n     4.4.  Syntax Errors in Fragment Identifiers  . . .\
    \ . . . . . . . 12\n   5.  Examples . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . 12\n   6.  IANA Considerations  . . . . . . . . . . . . . . . .\
    \ . . . . . 13\n   7.  Security Considerations  . . . . . . . . . . . . . . .\
    \ . . . . 13\n   8.  References . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . 14\n     8.1.  Normative References . . . . . . . . . . . . . . . . .\
    \ . . 14\n     8.2.  Informative References . . . . . . . . . . . . . . . . .\
    \ . 14\n   Appendix A.  Acknowledgements  . . . . . . . . . . . . . . . . . .\
    \ 16\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This memo updates the text/plain media type defined in RFC\
    \ 2046 [3]\n   by defining URI fragment identifiers for text/plain MIME entities.\n\
    \   This makes it possible to refer to parts of a text/plain MIME entity.\n  \
    \ Such parts can be identified by either character position or range,\n   or by\
    \ line position or range.  Integrity checking information can be\n   added to\
    \ a fragment identifier to make it more robust, enabling\n   applications to detect\
    \ changes of the entity.\n   This section gives an introduction to the general\
    \ concepts of text/\n   plain MIME entities and URI fragment identifiers, and\
    \ it discusses\n   the need for fragment identifiers for text/plain and deployment\n\
    \   issues.  Section 2 discusses the principles and methods on which this\n  \
    \ memo is based.  Section 3 defines the syntax, and Section 4 discusses\n   processing\
    \ of text/plain fragment identifiers.  Section 5 shows some\n   examples.\n"
- title: 1.1.  What Is text/plain?
  contents:
  - "1.1.  What Is text/plain?\n   Internet Media Types (often referred to as \"MIME\
    \ types\"), as defined\n   in RFC 2045 [2] and RFC 2046 [3], are used to identify\
    \ different\n   types and sub-types of media.  RFC 2046 [3] and RFC 3676 [6] specify\n\
    \   the text/plain media type, which is used for simple, unformatted\n   text.\
    \  Quoting from RFC 2046 [3]: \"Plain text does not provide for or\n   allow formatting\
    \ commands, font attribute specifications, processing\n   instructions, interpretation\
    \ directives, or content markup.  Plain\n   text is seen simply as a linear sequence\
    \ of characters, possibly\n   interrupted by line breaks or page breaks\".\n \
    \  The text/plain media type does not restrict the character encoding;\n   any\
    \ character encoding may be used.  In the absence of an explicit\n   character\
    \ encoding declaration, US-ASCII [13] is assumed as the\n   default character\
    \ encoding.  This variability of the character\n   encoding makes it impossible\
    \ to count characters in a text/plain MIME\n   entity without taking the character\
    \ encoding into account, because\n   there are many character encodings using\
    \ more than one octet per\n   character.\n   The biggest advantage of text/plain\
    \ MIME entities is their ease of\n   use and their portability among different\
    \ platforms.  As long as they\n   use popular character encodings (such as US-ASCII\
    \ or UTF-8 [12]),\n   they can be displayed and processed on virtually every computer\n\
    \   system.  The only remaining interoperability issue is the\n   representation\
    \ of line endings, which is discussed in Section 4.1.\n"
- title: 1.2.  What Is a URI Fragment Identifier?
  contents:
  - "1.2.  What Is a URI Fragment Identifier?\n   URIs are the identification mechanism\
    \ for resources on the Web.  The\n   URI syntax specified in RFC 3986 [7] optionally\
    \ includes a so-called\n   \"fragment identifier\", separated by a number sign\
    \ ('#').  The\n   fragment identifier consists of additional reference information\
    \ to\n   be interpreted by the user agent after the retrieval action has been\n\
    \   successfully completed.  The semantics of a fragment identifier are a\n  \
    \ property of the data resulting from a retrieval action, regardless of\n   the\
    \ type of URI used in the reference.  Therefore, the format and\n   interpretation\
    \ of fragment identifiers is dependent on the media type\n   of the retrieval\
    \ result.\n   The most popular fragment identifier is defined for text/html\n\
    \   (defined in RFC 2854 [10]) and makes it possible to refer to a\n   specific\
    \ element (identified by the value of a 'name' or 'id'\n   attribute) of an HTML\
    \ document.  This makes it possible to reference\n   a specific part of a Web\
    \ page, rather than a Web page as a whole.\n"
- title: 1.3.  Why text/plain Fragment Identifiers?
  contents:
  - "1.3.  Why text/plain Fragment Identifiers?\n   Referring to specific parts of\
    \ a resource can be very useful because\n   it enables users and applications\
    \ to create more specific references.\n   Users can create references to the part\
    \ they really are interested in\n   or want to talk about, rather than always\
    \ pointing to a complete\n   resource.  Even though it is suggested that fragment\
    \ identification\n   methods are specified in a media type's MIME registration\
    \ (see [15]),\n   many media types do not have fragment identification methods\n\
    \   associated with them.\n   Fragment identifiers are only useful if supported\
    \ by the client,\n   because they are only interpreted by the client.  Therefore,\
    \ a new\n   fragment identification method will require some time to be adopted\n\
    \   by clients, and older clients will not support it.  However, because\n   the\
    \ URI still works even if the fragment identifier is not supported\n   (the resource\
    \ is retrieved, but the fragment identifier is not\n   interpreted), rapid adoption\
    \ is not highly critical to ensure the\n   success of a new fragment identification\
    \ method.\n   Fragment identifiers for text/plain, as defined in this memo, make\
    \ it\n   possible to refer to specific parts of a text/plain MIME entity,\n  \
    \ using concepts of positions and ranges, which may be applied to\n   characters\
    \ and lines.  Thus, text/plain fragment identifiers enable\n   users to exchange\
    \ information more specifically, thereby reducing the\n   time and effort that\
    \ is necessary to manually search for the relevant\n   part of a text/plain MIME\
    \ entity.\n   The text/plain format does not support the embedding of links, so\
    \ in\n   most environments, text/plain resources can only serve as targets for\n\
    \   links, and not as sources.  However, when combining the text/plain\n   fragment\
    \ identifiers specified in this memo with out-of-line linking\n   mechanisms such\
    \ as XLink [14], it becomes possible to \"bind\" link\n   resources to text/plain\
    \ resources and thereby \"embed\" links into\n   text/plain resources.  Thus,\
    \ the text/plain fragment identifiers\n   specified in this memo open a path for\
    \ text/plain files to become\n   bidirectionally navigable resources in hypermedia\
    \ systems such as the\n   Web.\n"
- title: 1.4.  Incremental Deployment
  contents:
  - "1.4.  Incremental Deployment\n   As long as text/plain fragment identifiers are\
    \ not supported\n   universally, it is important to consider the implications\
    \ of\n   incremental deployment.  Clients (for example, Web browsers) not\n  \
    \ supporting the text/plain fragment identifier described in this memo\n   will\
    \ work with URI references to text/plain MIME entities, but they\n   will fail\
    \ to locate the sub-resource identified by the fragment\n   identifier.  This\
    \ is a reasonable fallback behavior, and in general,\n   users should take into\
    \ account the possibility that a program\n   interpreting a given URI will fail\
    \ to interpret the fragment\n   identifier part.  Since fragment identifier evaluation\
    \ is local to\n   the client (and happens after retrieving the MIME entity), there\
    \ is\n   no reliable way for a server to determine whether a requesting client\n\
    \   is using a URI containing a fragment identifier.\n"
- title: 1.5.  Notation Used in This Memo
  contents:
  - "1.5.  Notation Used in This Memo\n   The capitalized key words \"MUST\", \"MUST\
    \ NOT\", \"REQUIRED\", \"SHALL\",\n   \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\"\
    , \"RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in RFC\n   2119 [4].\n"
- title: 2.  Fragment Identification Methods
  contents:
  - "2.  Fragment Identification Methods\n   The identification of fragments of text/plain\
    \ MIME entities can be\n   based on different foundations.  Since it is not possible\
    \ to insert\n   explicit, invisible identifiers into a text/plain MIME entity\
    \ (for\n   example, as used in HTML documents, implemented through dedicated\n\
    \   attributes), fragment identification has to rely on certain inherent\n   properties\
    \ of the MIME entity.  This memo specifies fragment\n   identification using four\
    \ different methods, which are character\n   positions and ranges, and line positions\
    \ and ranges, augmented by an\n   integrity check mechanism for improving the\
    \ robustness of fragment\n   identifiers.\n   When interpreting character or line\
    \ numbers, implementations MUST\n   take the character encoding of the MIME entity\
    \ into account, because\n   character count and octet count may differ for the\
    \ character encoding\n   being used.  For example, a MIME entity using the UTF-16\
    \ encoding (as\n   specified in RFC 2781 [11]) uses two octets per character in\
    \ most\n   cases, and sometimes four octets per character.  It can also have a\n\
    \   leading BOM (Byte-Order Mark), which does not count as a character\n   and\
    \ thus also affects the mapping from a simple octet count to a\n   character count.\n"
- title: 2.1.  Fragment Identification Principles
  contents:
  - "2.1.  Fragment Identification Principles\n   Fragment identification can be done\
    \ by combining two orthogonal\n   principles, which are positions and ranges,\
    \ and characters and lines.\n   This section describes the principles themselves,\
    \ while Section 2.2\n   describes the combination of the principles.\n"
- title: 2.1.1.  Positions and Ranges
  contents:
  - "2.1.1.  Positions and Ranges\n   A position does not identify an actual fragment\
    \ of the MIME entity,\n   but a position inside the MIME entity, which can be\
    \ regarded as a\n   fragment of length zero.  The use case for positions is to\
    \ provide\n   pointers for applications that may use them to implement\n   functionalities\
    \ such as \"insert some text here\", which needs a\n   position rather than a\
    \ fragment.  Positions are counted from zero;\n   position zero being before the\
    \ first character or line of a text/\n   plain MIME entity.  Thus, a text/plain\
    \ MIME entity having one\n   character has two positions, one before the first\
    \ character (position\n   zero), and one after the first character (position 1).\n\
    \   Since positions are fragments of length zero, applications SHOULD use\n  \
    \ other methods than highlighting to indicate positions, the most\n   obvious\
    \ way being the positioning of a cursor (if the application\n   supports the concept\
    \ of a cursor).\n   Ranges, on the other hand, identify fragments of a MIME entity\
    \ that\n   have a length that may be greater than zero.  As a general principle\n\
    \   for ranges, they specify both a lower and an upper bound.  The start\n   or\
    \ the end of a range specification may be omitted, defaulting to the\n   first\
    \ or last position of the MIME entity, respectively.  The end of\n   a range must\
    \ have a value greater than or equal to the start.  A\n   range with identical\
    \ start and end is legal and identifies a range of\n   length zero, which is equivalent\
    \ to a position.\n   Applications that support a concept such as highlighting\
    \ SHOULD use\n   such a concept to indicate fragments of lengths greater than\
    \ zero to\n   the user.\n   For positions and ranges, it is implicitly assumed\
    \ that if a number\n   is greater than the actual number of elements in the MIME\
    \ entity,\n   then it is referring to the last element of the MIME entity (see\n\
    \   Section 4 for details).\n"
- title: 2.1.2.  Characters and Lines
  contents:
  - "2.1.2.  Characters and Lines\n   The concept of positions and ranges can be applied\
    \ to characters or\n   lines.  In both cases, positions indicate points between\
    \ these\n   entities, while ranges identify zero or more of these entities by\n\
    \   indicating positions.\n   Character positions are numbered starting with zero\
    \ (ignoring initial\n   BOM marks or similar concepts that are not part of the\
    \ actual textual\n   content of a text/plain MIME entity), and counting each character\n\
    \   separately, with the exception of line endings, which are always\n   counted\
    \ as one character (see Section 4.1 for details).\n   Line positions are numbered\
    \ starting with zero (with line position\n   zero always being identical with\
    \ character position zero);\n   Section 4.1 describes how line endings are identified.\
    \  Fragments\n   identified by lines include the line endings, so applications\n\
    \   identifying line-based fragments MUST include the line endings in the\n  \
    \ fragment identification they are using (e.g., the highlighted\n   selection).\
    \  If a MIME entity does not contain any line endings, then\n   it consists of\
    \ a single (the first) line.\n"
- title: 2.2.  Combining the Principles
  contents:
  - "2.2.  Combining the Principles\n   In the following sections, the principles\
    \ described in the preceding\n   section (positions/ranges and characters/lines)\
    \ are combined,\n   resulting in four use cases.  The schemes mentioned below\
    \ refer to\n   the fragment identifier syntax, described in detail in Section\
    \ 3.\n"
- title: 2.2.1.  Character Position
  contents:
  - "2.2.1.  Character Position\n   To identify a character position (i.e., a fragment\
    \ of length zero\n   between two characters), the 'char' scheme followed by a\
    \ single\n   number is used.  This method identifies a position between two\n\
    \   characters (or before the first or after the last character), rather\n   than\
    \ identifying a fragment consisting of a number of characters.\n   Character position\
    \ counting starts with zero, so the character\n   position before the first character\
    \ of a text/plain MIME entity has\n   the character position zero, and a MIME\
    \ entity containing n distinct\n   characters has n+1 distinct character positions,\
    \ the last one having\n   the character position n.\n"
- title: 2.2.2.  Character Range
  contents:
  - "2.2.2.  Character Range\n   To identify a fragment of one or more characters\
    \ (a character range),\n   the 'char' scheme followed by a range specification\
    \ is used.  A\n   character range is a consecutive region of the MIME entity that\n\
    \   extends from the starting character position of the range to the\n   ending\
    \ character position of the range.\n"
- title: 2.2.3.  Line Position
  contents:
  - "2.2.3.  Line Position\n   To identify a line position (i.e., a fragment of length\
    \ zero between\n   two lines), the 'line' scheme followed by a single number is\
    \ used.\n   This method identifies a position between two lines (or before the\n\
    \   first or after the last line), rather than identifying a fragment\n   consisting\
    \ of a number of lines.  Line position counting starts with\n   zero, so the line\
    \ position before the first line of a text/plain MIME\n   entity has the line\
    \ position zero, and a MIME entity containing n\n   distinct lines has n+1 distinct\
    \ line positions, the last one having\n   the line position n.\n"
- title: 2.2.4.  Line Range
  contents:
  - "2.2.4.  Line Range\n   To identify a fragment of one or more lines (a line range),\
    \ the\n   'line' scheme followed by a range specification is used.  A line\n \
    \  range is a consecutive region of the MIME entity that extends from\n   the\
    \ starting line position of the range to the ending line position\n   of the range.\n"
- title: 2.3.  Fragment Identifier Robustness
  contents:
  - "2.3.  Fragment Identifier Robustness\n   It is easily possible that a modification\
    \ of the referenced resource\n   will break a fragment identifier.  If applications\
    \ want to create\n   more robust fragment identifiers, they may do so by adding\
    \ integrity-\n   check information to fragment identifiers.  Such information\
    \ is used\n   to detect changes in the resource.  Applications can then warn users\n\
    \   about the possibility that a fragment identifier might have been\n   broken\
    \ by a modification of the resource.\n   Fragment identifiers are interpreted\
    \ by clients, and therefore\n   integrity-check information is defined on MIME\
    \ entities rather than\n   on the resource itself.  This means that the integrity-check\n\
    \   information is specific to a certain entity.  Specifically, content\n   encodings\
    \ and/or content transfer encodings must be removed before\n   using integrity-check\
    \ information.\n   Integrity-check information may specify the character encoding\
    \ that\n   has been used when creating the information, and if such a\n   specification\
    \ is present, clients MUST check whether the character\n   encoding specified\
    \ and the character encoding of the retrieved MIME\n   entity are equal, and clients\
    \ MUST NOT use the integrity check\n   information if these values differ.  However,\
    \ clients MAY choose to\n   transcode the retrieved MIME entity in the case of\
    \ differing\n   character encodings, and after doing so, apply integrity checks.\n\
    \   Please note that this method is inherently unreliable because certain\n  \
    \ characters or character sequences may have been lost or normalized\n   due to\
    \ restrictions in one of the character encodings used.\n"
- title: 3.  Fragment Identification Syntax
  contents:
  - "3.  Fragment Identification Syntax\n   The syntax for the text/plain fragment\
    \ identifiers is\n   straightforward.  The syntax defines four schemes, 'char',\
    \ 'line',\n   and integrity check (which can either be 'length' or 'md5').  The\n\
    \   'char' and 'line' schemes can be used in two different variants,\n   either\
    \ the position variant (with a single number), or the range\n   variant (with\
    \ two comma-separated numbers).  An integrity check can\n   either use the 'length'\
    \ or the 'md5' scheme to specify a value.\n   'length' in this case serves as\
    \ a very weak but easy to calculate\n   integrity check.\n   The following syntax\
    \ definition uses ABNF as defined in RFC 5234 [9],\n   including the rules DIGIT\
    \ and HEXDIG.  The mime-charset rule is\n   defined in RFC 2978 [5].\n   NOTE:\
    \  In the descriptions that follow, specified text values MUST be\n      used\
    \ exactly as given, using exactly the indicated lower-case\n      letters.  In\
    \ this respect, the ABNF usage differs from [9].\n   text-fragment   =  text-scheme\
    \ 0*( \";\" integrity-check )\n   text-scheme     =  ( char-scheme / line-scheme\
    \ )\n   char-scheme     =  \"char=\" ( position / range )\n   line-scheme    \
    \ =  \"line=\" ( position / range )\n   integrity-check =  ( length-scheme / md5-scheme\
    \ )\n                        [ \",\" mime-charset ]\n   position        =  number\n\
    \   range           =  ( position \",\" [ position ] ) / ( \",\" position )\n\
    \   number          =  1*( DIGIT )\n   length-scheme   =  \"length=\" number\n\
    \   md5-scheme      =  \"md5=\" md5-value\n   md5-value       =  32HEXDIG\n"
- title: 3.1.  Integrity Checks
  contents:
  - "3.1.  Integrity Checks\n   An integrity check can either specify a MIME entity's\
    \ length, or its\n   MD5 fingerprint.  In both cases, it can optionally specify\
    \ the\n   character encoding that has been used when calculating the integrity\n\
    \   check, so that clients interpreting the fragment identifier may check\n  \
    \ whether they are using the same character encoding for their\n   calculations.\
    \  For lengths, the character encoding can be necessary\n   because it can influence\
    \ the character count.  As an example, Unicode\n   includes precomposed characters\
    \ for writing Vietnamese, but in the\n   windows-1258 encoding, also used for\
    \ writing Vietnamese, some\n   characters have to be encoded with separate diacritics,\
    \ which means\n   that two characters will be counted.  Applying Unicode terminology,\n\
    \   this means that the length of a text/plain MIME entity is computed\n   based\
    \ on its \"code points\".  For MD5 fingerprints, the character\n   encoding is\
    \ necessary because the MD5 algorithm works on the binary\n   representation of\
    \ the text/plain resource.\n   To allow future changes to this specification to\
    \ address developments\n   in cryptography, implementations MUST ignore new types\
    \ of integrity\n   checks, with names other than 'length' and 'md5'.  If several\n\
    \   integrity checks are present, an application can use whatever\n   integrity\
    \ checks it understands, and among these, those integrity\n   checks that provide\
    \ an appropriate trade-off between performance and\n   the need for integrity\
    \ checking.  Please see Section 4.3 for further\n   details.\n   The length of\
    \ a text/plain MIME entity is calculated by using the\n   principles defined in\
    \ Section 2.1.2.  The MD5 fingerprint of a text/\n   plain MIME entity is calculated\
    \ by using the algorithm presented in\n   [1], encoding the result in 32 hexadecimal\
    \ digits (using uppercase or\n   lowercase letters) as a representation of the\
    \ 128 bits that are the\n   result of the MD5 algorithm.  Calculation of integrity\
    \ checks is done\n   after stripping any potential content-encodings or content-transfer-\n\
    \   encodings of the transport mechanism.\n"
- title: 4.  Fragment Identifier Processing
  contents:
  - "4.  Fragment Identifier Processing\n   Applications implementing support for\
    \ the mechanism described in this\n   memo MUST behave as described in the following\
    \ sections.\n"
- title: 4.1.  Handling of Line Endings in text/plain MIME Entities
  contents:
  - "4.1.  Handling of Line Endings in text/plain MIME Entities\n   In Internet messages,\
    \ line endings in text/plain MIME entities are\n   represented by CR+LF character\
    \ sequences (see RFC 2046 [3] and RFC\n   3676 [6]).  However, some protocols\
    \ (such as HTTP) additionally allow\n   other conventions for line endings.  Also,\
    \ some operating systems\n   store text/plain entities locally with different\
    \ line endings (in\n   most cases, Unix uses LF, MacOS traditionally uses CR,\
    \ and Windows\n   uses CR+LF).\n   Independent of the number of bytes or characters\
    \ used to represent a\n   line ending, each line ending MUST be counted as one\
    \ single\n   character.  Implementations interpreting text/plain fragment\n  \
    \ identifiers MUST take into account the line ending conventions of the\n   protocols\
    \ and other contexts that they work in.\n   As an example, an implementation working\
    \ in the context of a Web\n   browser supporting http: URIs has to support the\
    \ various line ending\n   conventions permitted by HTTP.  As another example,\
    \ an implementation\n   used on local files (e.g., with the file: URI scheme)\
    \ has to support\n   the conventions used for local storage.  All implementations\
    \ SHOULD\n   support the Internet-wide CR+LF line ending convention, and MAY\n\
    \   support additional conventions not related to the protocols or\n   systems\
    \ they work with.\n   Implementers should be aware of the fact that line endings\
    \ in plain\n   text entities can be represented by other characters or character\n\
    \   sequences than CR+LF.  Besides the abovementioned CR and LF, there\n   are\
    \ also NEL and CR+NEL.  In general, the encoding of line endings\n   can also\
    \ depend on the character encoding of the MIME entity, and\n   implementations\
    \ have to take this into account where necessary.\n"
- title: 4.2.  Handling of Position Values
  contents:
  - "4.2.  Handling of Position Values\n   If any position value (as a position or\
    \ as part of a range) is\n   greater than the length of the actual MIME entity,\
    \ then it identifies\n   the last character position or line position of the MIME\
    \ entity.  If\n   the first position value in a range is not present, then the\
    \ range\n   extends from the start of the MIME entity.  If the second position\n\
    \   value in a range is not present, then the range extends to the end of\n  \
    \ the MIME entity.  If a range scheme's positions are not properly\n   ordered\
    \ (i.e., the first number is less than the second), then the\n   fragment identifier\
    \ MUST be ignored.\n"
- title: 4.3.  Handling of Integrity Checks
  contents:
  - "4.3.  Handling of Integrity Checks\n   Clients are not required to implement\
    \ the handling of integrity\n   checks, so they MAY choose to ignore integrity\
    \ check information\n   altogether.  However, if they do implement integrity checking,\
    \ the\n   following applies:\n   If a fragment identifier contains one or more\
    \ integrity checks, and a\n   client retrieves a MIME entity and, using some integrity\
    \ check(s),\n   detects that the entity has changed (observing the character encoding\n\
    \   specification as described in Section 3.1, if present), then the\n   client\
    \ SHOULD NOT interpret the text/plain fragment identifier.  A\n   client MAY signal\
    \ this situation to the user.\n"
- title: 4.4.  Syntax Errors in Fragment Identifiers
  contents:
  - "4.4.  Syntax Errors in Fragment Identifiers\n   If a fragment identifier contains\
    \ a syntax error (i.e., does not\n   conform to the syntax specified in Section\
    \ 3), then it MUST be\n   ignored by clients.  Clients MUST NOT make any attempt\
    \ to correct or\n   guess fragment identifiers.  Syntax errors MAY be reported\
    \ by\n   clients.\n"
- title: 5.  Examples
  contents:
  - "5.  Examples\n   The following examples show some usages for the fragment identifiers\n\
    \   defined in this memo.\n   http://example.com/text.txt#char=100\n   This URI\
    \ identifies the position after the 100th character of the\n   text.txt MIME entity.\
    \  It should be noted that it is not clear which\n   octet(s) of the MIME entity\
    \ this will be without retrieving the MIME\n   entity and thus knowing which character\
    \ encoding it is using (in case\n   of HTTP, this information will be given in\
    \ the Content-Type header of\n   the response).  If the MIME entity has fewer\
    \ than 100 characters, the\n   URI identifies the position after the MIME entity's\
    \ last character.\n   http://example.com/text.txt#line=10,20\n   This URI identifies\
    \ lines 11 to 20 of the text.txt MIME entity.  If\n   the MIME entity has fewer\
    \ than 11 lines, it identifies the position\n   after the last line.  If the MIME\
    \ entity has less than 20 but at\n   least 11 lines, it identifies the range from\
    \ line 11 to the last line\n   of the MIME entity.\n   https://example.com/text.txt#line=,1\n\
    \   This URI identifies the first line.  Please note that the URI scheme\n   has\
    \ been changed to https.\n   ftp://example.com/text.txt#line=10,20;length=9876,UTF-8\n\
    \   As in the second example, this URI identifies lines 11 to 20 of the\n   text.txt\
    \ MIME entity.  The additional length integrity check\n   specifies that the MIME\
    \ entity has a length of 9876 characters when\n   encoded in UTF-8.  If the client\
    \ supports the length scheme, it may\n   test the retrieved MIME entity for its\
    \ length, but only if the\n   retrieved MIME entity uses the UTF-8 encoding or\
    \ has been locally\n   transcoded into this encoding.\n   Please note that the\
    \ FTP protocol, as well as some other protocols\n   underlying some other URI\
    \ schemes, do not provide explicit\n   information about the media type of the\
    \ resource being retrieved.\n   Using fragment identifiers with such URI schemes\
    \ is therefore\n   inherently unreliable.  Current user agents use various heuristics\
    \ to\n   infer some media type for further processing.  Processing of the\n  \
    \ fragment identifier according to this memo is only appropriate if the\n   inferred\
    \ media type is text/plain.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   IANA has added a reference to this specification\
    \ in the text/plain\n   Media Type registration.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   The fact that software implementing fragment\
    \ identifiers for plain\n   text and software not implementing them differs in\
    \ behavior, and the\n   fact that different software may show documents or fragments\
    \ to users\n   in different ways, can lead to misunderstandings on the part of\n\
    \   users.  Such misunderstandings might be exploited in a way similar to\n  \
    \ spoofing or phishing.\n   In particular, care has to be taken if fragment identifiers\
    \ are used\n   together with a mechanism that allows showing only the part of\
    \ a\n   document identified by a fragment.  One scenario may be the use of a\n\
    \   fragment identifier to hide small-print legal text.  Another scenario\n  \
    \ may be the inclusion of site-key-like material, which may give the\n   user\
    \ the impression of using the real site rather than a fake site;\n   other scenarios\
    \ may also be possible.  Possible countermeasures may\n   include but are not\
    \ limited to displaying the included content within\n   clearly visible boundaries\
    \ and limiting inclusion to material from\n   the same security realm or from\
    \ realms that give explicit permission\n   to be included in another realm.\n\
    \   Please note that the above issues all apply to the client side;\n   fragment\
    \ identifiers are not used when resolving a URI to retrieve\n   the representation\
    \ of a resource, but are only applied on the client\n   side.\n   Implementers\
    \ and users of fragment identifiers for plain text should\n   also be aware of\
    \ the security considerations in RFC 3986 [7] and RFC\n   3987 [8].\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [1]   Rivest, R., \"The MD5 Message-Digest Algorithm\"\
    , RFC 1321,\n         April 1992.\n   [2]   Freed, N. and N. Borenstein, \"Multipurpose\
    \ Internet Mail\n         Extensions (MIME) Part One: Format of Internet Message\
    \ Bodies\",\n         RFC 2045, November 1996.\n   [3]   Freed, N. and N. Borenstein,\
    \ \"Multipurpose Internet Mail\n         Extensions (MIME) Part Two: Media Types\"\
    , RFC 2046,\n         November 1996.\n   [4]   Bradner, S., \"Key words for use\
    \ in RFCs to Indicate Requirement\n         Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [5]   Freed, N. and J. Postel, \"IANA Charset Registration\n     \
    \    Procedures\", BCP 19, RFC 2978, October 2000.\n   [6]   Gellens, R., \"The\
    \ Text/Plain Format and DelSp Parameters\",\n         RFC 3676, February 2004.\n\
    \   [7]   Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n        \
    \ Resource Identifier (URI): Generic Syntax\", STD 66, RFC 3986,\n         January\
    \ 2005.\n   [8]   Duerst, M. and M. Suignard, \"Internationalized Resource\n \
    \        Identifiers (IRI)\", RFC 3987, January 2005.\n   [9]   Crocker, D., Ed.\
    \ and P. Overell, \"Augmented BNF for Syntax\n         Specifications: ABNF\"\
    , STD 68, RFC 5234, January 2008.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [10]  Connolly, D. and L. Masinter, \"The 'text/html'\
    \ Media Type\",\n         RFC 2854, June 2000.\n   [11]  Hoffman, P. and F. Yergeau,\
    \ \"UTF-16, an encoding of ISO 10646\",\n         RFC 2781, February 2000.\n \
    \  [12]  Yergeau, F., \"UTF-8, a transformation format of ISO 10646\",\n     \
    \    STD 63, RFC 3629, November 2003.\n   [13]  ANSI X3.4-1986, \"Coded Character\
    \ Set - 7-Bit American National\n         Standard Code for Information Interchange\"\
    , 1986.\n   [14]  DeRose, S., Maler, E., and D. Orchard, \"XML Linking Language\n\
    \         (XLink) Version 1.0\", World Wide Web Consortium Recommendation,\n \
    \        June 2001, <http://www.w3.org/TR/xlink/>.\n   [15]  Freed, N. and J.\
    \ Klensin, \"Media Type Specifications and\n         Registration Procedures\"\
    , BCP 13, RFC 4288, December 2005.\n"
- title: Appendix A.  Acknowledgements
  contents:
  - "Appendix A.  Acknowledgements\n   Thanks for comments and suggestions provided\
    \ by Marcel Baschnagel,\n   Stephane Bortzmeyer, Tim Bray, Iain Calder, John Cowan,\
    \ Spencer\n   Dawkins, Lisa Dusseault, Benja Fallenstein, Ted Hardie, Sam Hartman,\n\
    \   Sandro Hawke, Jeffrey Hutzelman, Cullen Jennings, Graham Klyne, Dan\n   Kohn,\
    \ Henrik Levkowetz, Chris Newman, Mark Nottingham, Conrad Parker,\n   and Tim\
    \ Polk.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Erik Wilde\n   UC Berkeley\n   School of Information,\
    \ 311 South Hall\n   Berkeley, CA 94720-4600\n   U.S.A.\n   Phone: +1-510-6432253\n\
    \   EMail: dret@berkeley.edu\n   URI:   http://dret.net/netdret/\n   Martin Duerst\
    \ (Note: Please write \"Duerst\" with u-umlaut wherever\n                 possible,\
    \ for example as \"D&#252;rst\" in XML and HTML.)\n   Aoyama Gakuin University\n\
    \   5-10-1 Fuchinobe\n   Sagamihara, Kanagawa  229-8558\n   Japan\n   Phone: +81\
    \ 42 759 6329\n   Fax:   +81 42 759 6495\n   EMail: duerst@it.aoyama.ac.jp\n \
    \  URI:   http://www.sw.it.aoyama.ac.jp/D%C3%BCrst/\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
