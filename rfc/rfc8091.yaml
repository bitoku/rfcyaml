- title: __initial_text__
  contents:
  - '     A Media Type Structured Syntax Suffix for JSON Text Sequences

    '
- title: Abstract
  contents:
  - "Abstract\n   Structured syntax suffixes for media types allow other media types\
    \ to\n   build on them and make it explicit that they are built on an existing\n\
    \   media type as their foundation.  This specification defines and\n   registers\
    \ \"+json-seq\" as a structured syntax suffix for JSON text\n   sequences.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc8091.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   2\n   3.  The \"+json-seq\" Structured Syntax Suffix  . . . . . .\
    \ . . . .   2\n   4.  IANA Considerations . . . . . . . . . . . . . . . . . .\
    \ . . .   3\n   5.  Security Considerations . . . . . . . . . . . . . . . . .\
    \ . .   4\n   6.  References  . . . . . . . . . . . . . . . . . . . . . . . .\
    \ .   4\n     6.1.  Normative References  . . . . . . . . . . . . . . . . . .\
    \   4\n     6.2.  Informative References  . . . . . . . . . . . . . . . . .  \
    \ 5\n   Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .   5\n\
    \   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .   5\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Media type structured syntax suffixes [RFC6838] were introduced\
    \ as a\n   way for a media type to signal that it is based on another media type\n\
    \   as its foundation.  Some structured syntax suffixes were registered\n   initially\
    \ [RFC6839], including \"+json\", for the widely popular JSON\n   format [RFC7159].\n\
    \   JSON text sequences [RFC7464] is a recent specification in the JSON\n   space\
    \ that defines how a sequence of multiple JSON texts can be\n   represented in\
    \ one representation.  This document defines and\n   registers the \"+json-seq\"\
    \ structured syntax suffix in the \"Structured\n   Syntax Suffix Registry\".\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
- title: 3.  The "+json-seq" Structured Syntax Suffix
  contents:
  - "3.  The \"+json-seq\" Structured Syntax Suffix\n   The use case for the \"+json-seq\"\
    \ structured syntax suffix is the same\n   as for \"+json\": It SHOULD be used\
    \ by media types when parsing the\n   JSON text sequence of a media type leads\
    \ to a meaningful result, by\n   simply using the generic JSON text sequence processing.\n\
    \   Applications encountering such a media type can then either simply\n   use\
    \ generic processing if all they need is a generic view of the JSON\n   text sequence,\
    \ or they can use generic JSON text sequence tools for\n   initial parsing and\
    \ then implement their own specific processing on\n   top of that generic parsing\
    \ tool.\n"
- title: 4.  IANA Considerations
  contents:
  - "4.  IANA Considerations\n   Structured Syntax Suffixes are registered within\
    \ the \"Structured\n   Syntax Suffix Registry\" maintained at\n   <https://www.iana.org/assignments/media-type-structured-suffix>.\n\
    \   IANA has registered the \"+json-seq\" structured syntax suffix in\n   accordance\
    \ with [RFC6838].\n      Name: JSON Text Sequence\n      +suffix: +json-seq\n\
    \      References: [RFC7464], RFC 8091\n      Encoding considerations: See [RFC7464]\
    \ Section 2.2\n      Fragment identifier considerations: The syntax and semantics\
    \ of\n      fragment identifiers specified for +json-seq SHOULD be as\n      specified\
    \ for \"application/json-seq\".  (At publication of this\n      document, there\
    \ is no fragment identification syntax defined for\n      \"application/json-seq\"\
    .)\n         The syntax and semantics for fragment identifiers for a\n       \
    \  specific \"xxx/yyy+json-seq\" SHOULD be processed as follows:\n           \
    \ For cases defined in +json-seq, where the fragment\n            identifier resolves\
    \ per the +json-seq rules, then process as\n            specified in +json-seq.\n\
    \            For cases defined in +json-seq, where the fragment\n            identifier\
    \ does not resolve per the +json-seq rules, then\n            process as specified\
    \ in \"xxx/yyy+json-seq\".\n            For cases not defined in +json-seq, then\
    \ process as\n            specified in \"xxx/yyy+json-seq\".\n      Interoperability\
    \ considerations: n/a\n      Security considerations: See [RFC7464] Section 3\n\
    \      Contact: Applications and Real-Time Area Discussion\n      (art@ietf.org),\
    \ or any IESG-designated successor.\n      Author/Change controller: The Applications\
    \ and Real-Time Area\n      Working Group.  IESG has change control over this\
    \ registration.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   All the security considerations of JSON text\
    \ sequences [RFC7464]\n   apply.  They are as follows:\n   All the security considerations\
    \ of JSON [RFC7159] apply.  This format\n   provides no cryptographic integrity\
    \ protection of any kind.\n   As usual, parsers must operate on input that is\
    \ assumed to be\n   untrusted.  This means that parsers must fail gracefully in\
    \ the face\n   of malicious inputs.\n   Note that incremental JSON text parsers\
    \ can produce partial results\n   and later indicate failure to parse the remainder\
    \ of a text.  A\n   sequence parser that uses an incremental JSON text parser\
    \ might treat\n   a sequence like '<RS>\"foo\"<LF>456<LF><RS>' as a sequence of\
    \ one\n   element (\"foo\"), while a sequence parser that uses a non-incremental\n\
    \   JSON text parser might treat the same sequence as being empty.  This\n   effect,\
    \ and texts that fail to parse and are ignored, can be used to\n   smuggle data\
    \ past sequence parsers that don't warn about JSON text\n   failures.\n   Repeated\
    \ parsing and re-encoding of a JSON text sequence can result\n   in the addition\
    \ (or stripping) of trailing LF bytes from (to)\n   individual sequence element\
    \ JSON texts.  This can break signature\n   validation.  JSON has no canonical\
    \ form for JSON texts, therefore\n   neither does the JSON text sequence format.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC6838]  Freed, N., Klensin, J., and T. Hansen, \"Media Type\n         \
    \     Specifications and Registration Procedures\", BCP 13,\n              RFC\
    \ 6838, DOI 10.17487/RFC6838, January 2013,\n              <http://www.rfc-editor.org/info/rfc6838>.\n\
    \   [RFC7464]  Williams, N., \"JavaScript Object Notation (JSON) Text\n      \
    \        Sequences\", RFC 7464, DOI 10.17487/RFC7464, February 2015,\n       \
    \       <http://www.rfc-editor.org/info/rfc7464>.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [RFC6839]  Hansen, T. and A. Melnikov, \"Additional\
    \ Media Type\n              Structured Syntax Suffixes\", RFC 6839,\n        \
    \      DOI 10.17487/RFC6839, January 2013,\n              <http://www.rfc-editor.org/info/rfc6839>.\n\
    \   [RFC7159]  Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data\n \
    \             Interchange Format\", RFC 7159, DOI 10.17487/RFC7159, March\n  \
    \            2014, <http://www.rfc-editor.org/info/rfc7159>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Thanks for comments and suggestions provided by Ben Campbell,\
    \ Allan\n   Doyle, Warren Kumari, Sean Leonard, Alexey Melnikov, Brian Raymor,\n\
    \   and Peter Yee.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Erik Wilde\n   CA Technologies\n   Email: erik.wilde@dret.net\n\
    \   URI:   http://dret.net/netdret/\n"
