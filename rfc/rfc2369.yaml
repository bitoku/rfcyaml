- contents:
  - "       The Use of URLs as Meta-Syntax for Core Mail List Commands\n           and
    their Transport through Message Header Fields\n"
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   The mailing list command specification header fields are a set of\n
    \  structured fields to be added to email messages sent by email\n   distribution
    lists. Each field typically contains a URL (usually\n   mailto [RFC2368]) locating
    the relevant information or performing the\n   command directly. The three core
    header fields described in this\n   document are List-Help, List-Subscribe, and
    List-Unsubscribe.\n   There are three other header fields described here which,
    although\n   not as widely applicable, will have utility for a sufficient number\n
    \  of mailing lists to justify their formalization here. These are\n   List-Post,
    List-Owner and List-Archive.\n   By including these header fields, list servers
    can make it possible\n   for mail clients to provide automated tools for users
    to perform list\n   functions. This could take the form of a menu item, push button,
    or\n   other user interface element. The intent is to simplify the user\n   experience,
    providing a common interface to the often cryptic and\n   varied mailing list
    manager commands.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",  \"MAY\", and
    \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC 2119.\n"
  title: Abstract
- contents:
  - "1. Introduction\n   This is a proposal for additional header fields to be added
    to email\n   messages sent by email distribution lists. The content of each new\n
    \  field is typically a URL - usually mailto [RFC2368] - which locates\n   the
    relevant information or performs the command directly. MTAs\n   generating the
    header fields SHOULD usually include a mailto based\n   command, in addition to
    any other protocols used, in order to support\n   users who do not have access
    to non-mail-based protocols.\n   Implementing these fields will be optional. Significant
    functionality\n   and convenience can be gained by including them, however. Many
    list\n   managers, especially as the proposal first gains acceptance, MAY\n   choose
    to implement only one or two of the fields.  The List-Help\n   field is the most
    useful individual field since it provides an access\n   point to detailed user
    support information, and accommodates almost\n   all existing list managers command
    sets. The List-Subscribe and\n   List-Unsubscribe fields are also very useful,
    but cannot describe\n   some list manager syntaxes at this time (those which require
    variable\n   substitution). See appendix A.5 for an explanation.\n   The description
    of command syntax provided by the fields can be used\n   by mail client applications
    to provide simplified and consistent user\n   access to email distribution list
    functions. This could take the form\n   of menu items, push buttons, or other
    user interface elements.  The\n   intent is to simplify the user experience, providing
    a common\n   interface to the often cryptic and varied mailing list manager\n
    \  commands.\n   Consideration has been given to avoiding the creation of too
    many\n   fields, while at the same time avoiding the overloading of individual\n
    \  fields and keeping the syntax clear and simple.\n   The use of these fields
    does not remove the requirement to support\n   the -Request command address for
    mailing lists [RFC2142].\n"
  title: 1. Introduction
- contents:
  - "2. The Command Syntax\n   The list header fields are subject to the encoding
    and character\n   restrictions for mail headers as described in [RFC822]. Additionally,\n
    \  the URL content is further restricted to the set of URL safe\n   characters
    [RFC1738].\n   The contents of the list header fields mostly consist of angle-\n
    \  bracket ('<', '>') enclosed URLs, with internal whitespace being\n   ignored.
    MTAs MUST NOT insert whitespace within the brackets, but\n   client applications
    should treat any whitespace, that might be\n   inserted by poorly behaved MTAs,
    as characters to ignore.\n   A list of multiple, alternate, URLs MAY be specified
    by a comma-\n   separated list of angle-bracket enclosed URLs. The URLs have order
    of\n   preference from left to right. The client application should use the\n
    \  left most protocol that it supports, or knows how to access by a\n   separate
    application. By this mechanism, protocols like http may be\n   specified while
    still providing the basic mailto support for those\n   clients who do not have
    access to non-mail protocols. The client\n   should only use one of the available
    URLs for a command, using\n   another only if the first one used failed.\n   The
    use of URLs allows for the use of the syntax with existing URL\n   supporting
    applications. As the standard for URLs is extended, the\n   list header fields
    will gain the benefit of those extensions.\n   Additionally, the use of URLs provides
    access to multiple transport\n   protocols (such as ftp and http) although it
    is expected that the\n   \"mailto\" protocol [RFC2368] will be the focus of most
    use of the list\n   header fields. Use of non-mailto protocols should be considered
    in\n   light of those users who do not have access to the specified\n   mechanism
    (those who only have email - with no web access).\n   Command syntaxes requiring
    variable fields to be set by the client\n   (such as including the user's email
    address within a command) are not\n   supported by this implementation. However,
    systems using such\n   syntaxes SHOULD still take advantage of the List-Help field
    to\n   provide the user with detailed instructions as needed or - perhaps\n   more
    usefully - provide access to some form of structured command\n   interface such
    as an HTML-based form.\n   The additional complications of supporting variable
    fields within the\n   command syntax was determined to be too difficult to support
    by this\n   protocol and would compromise the likelihood of implementation by\n
    \  software authors.\n   To allow for future extension, client applications MUST
    follow the\n   following guidelines for handling the contents of the header fields\n
    \  described in this document:\n   1) Except where noted for specific fields,
    if the content of the\n      field (following any leading whitespace, including
    comments)\n      begins with any character other than the opening angle bracket\n
    \     '<', the field SHOULD be ignored.\n   2) Any characters following an angle
    bracket enclosed URL SHOULD be\n      ignored, unless a comma is the first non-whitespace/comment\n
    \     character after the closing angle bracket.\n   3) If a sub-item (comma-separated
    item) within the field is not an\n      angle-bracket enclosed URL, the remainder
    of the field (the\n      current, and all subsequent, sub-items) SHOULD be ignored.\n"
  title: 2. The Command Syntax
- contents:
  - "3. The List Header Fields\n      This document presents header fields which will
    provide the\n      command syntax description for the 'core' and key secondary\n
    \     functions of most email distribution lists. The fields implemented\n      on
    a given list SHOULD be included on all messages distributed by\n      the list
    (including command responses to individual users), and on\n      other messages
    where the message clearly applies to one distinct\n      list. There MUST be no
    more than one of each field present in any\n      given message.\n      These
    fields MUST only be generated by mailing lists, not end\n      users.\n"
  - contents:
    - "3.1. List-Help\n      The List-Help field is the most important of the header
      fields\n      described in this document. It would be acceptable for a list\n
      \     manager to include only this field, since by definition it SHOULD\n      direct
      the user to complete instructions for all other commands.\n      Typically,
      the URL specified would request the help file, perhaps\n      incorporating
      an HTML form for list commands, for the list, and\n      alternatively provide
      access to an instructive website.\n      Examples:\n     List-Help: <mailto:list@host.com?subject=help>
      (List Instructions)\n     List-Help: <mailto:list-manager@host.com?body=info>\n
      \    List-Help: <mailto:list-info@host.com> (Info about the list)\n     List-Help:
      <http://www.host.com/list/>, <mailto:list-info@host.com>\n     List-Help: <ftp://ftp.host.com/list.txt>
      (FTP),\n         <mailto:list@host.com?subject=help>\n"
    title: 3.1. List-Help
  - contents:
    - "3.2. List-Unsubscribe\n   The List-Unsubscribe field describes the command
      (preferably using\n   mail) to directly unsubscribe the user (removing them
      from the list).\n   Examples:\n     List-Unsubscribe: <mailto:list@host.com?subject=unsubscribe>\n
      \    List-Unsubscribe: (Use this command to get off the list)\n         <mailto:list-manager@host.com?body=unsubscribe%20list>\n
      \    List-Unsubscribe: <mailto:list-off@host.com>\n     List-Unsubscribe: <http://www.host.com/list.cgi?cmd=unsub&lst=list>,\n
      \        <mailto:list-request@host.com?subject=unsubscribe>\n"
    title: 3.2. List-Unsubscribe
  - contents:
    - "3.3. List-Subscribe\n   The List-Subscribe field describes the command (preferably
      using\n   mail) to directly subscribe the user (request addition to the list).\n
      \  Examples:\n     List-Subscribe: <mailto:list@host.com?subject=subscribe>\n
      \    List-Subscribe: <mailto:list-request@host.com?subject=subscribe>\n     List-Subscribe:
      (Use this command to join the list)\n         <mailto:list-manager@host.com?body=subscribe%20list>\n
      \    List-Subscribe: <mailto:list-on@host.com>\n     List-Subscribe: <http://www.host.com/list.cgi?cmd=sub&lst=list>,\n
      \        <mailto:list-manager@host.com?body=subscribe%20list>\n"
    title: 3.3. List-Subscribe
  - contents:
    - "3.4. List-Post\n   The List-Post field describes the method for posting to
      the list.\n   This is typically the address of the list, but MAY be a moderator,
      or\n   potentially some other form of submission. For the special case of a\n
      \  list that does not allow posting (e.g., an announcements list), the\n   List-Post
      field may contain the special value \"NO\".\n   Examples:\n     List-Post: <mailto:list@host.com>\n
      \    List-Post: <mailto:moderator@host.com> (Postings are Moderated)\n     List-Post:
      <mailto:moderator@host.com?subject=list%20posting>\n     List-Post: NO (posting
      not allowed on this list)\n"
    title: 3.4. List-Post
  - contents:
    - "3.5. List-Owner\n   The List-Owner field identifies the path to contact a human\n
      \  administrator for the list. The URL MAY contain the address of a\n   administrator
      for the list, the mail system administrator, or any\n   other person who can
      handle user contact for the list. There is no\n   need to specify List-Owner
      if it is the same person as the mail\n   system administrator (postmaster).\n
      \  Examples:\n     List-Owner: <mailto:listmom@host.com> (Contact Person for
      Help)\n     List-Owner: <mailto:grant@foo.bar> (Grant Neufeld)\n     List-Owner:
      <mailto:josh@foo.bar?Subject=list>\n"
    title: 3.5. List-Owner
  - contents:
    - "3.6. List-Archive\n   The List-Archive field describes how to access archives
      for the list.\n   Examples:\n     List-Archive: <mailto:archive@host.com?subject=index%20list>\n
      \    List-Archive: <ftp://ftp.host.com/pub/list/archive/>\n     List-Archive:
      <http://www.host.com/list/archive/> (Web Archive)\n"
    title: 3.6. List-Archive
  title: 3. The List Header Fields
- contents:
  - "4. Supporting Nested Lists\n   A list that is a sublist for another list in a
    nested mailing list\n   hierarchy will need to modify some of the List- header
    fields, while\n   leaving others as the parent list set them.\n   Sublists SHOULD
    remove the parent list's List-Help, List-Subscribe,\n   List-Unsubscribe and List-Owner
    fields, and SHOULD insert their own\n   versions of those fields.\n   If the sublist
    provides its own archive, it SHOULD replace the List-\n   Archive with its own.
    Otherwise, it MUST leave the List-Archive field\n   untouched.\n   Dependant on
    how postings to the list are handled, the sublist MAY\n   replace the List-Post
    field. The appropriateness of whether to\n   replace List-Post is left to the
    determination of the individual list\n   managers. If the intention is that postings
    should be distributed to\n   all members of the primary list, List-Post should
    not be changed by a\n   sublist in such a way that postings will be distributed
    only to\n   members of the sublist.\n"
  title: 4. Supporting Nested Lists
- contents:
  - "5. Security Considerations\n   There are very few new security concerns generated
    with this\n   proposal. Message headers are an existing standard, designed to\n
    \  easily accommodate new types. There may be concern with multiple\n   fields
    being inserted or headers being forged, but these are problems\n   inherent in
    Internet email, not specific to the protocol described in\n   this document. Further,
    the implications are relatively harmless.\n   Mail list processors should not
    allow any user-originated list header\n   fields to pass through to their lists,
    lest they confuse the user and\n   have the potential to create security problems.\n
    \  On the client side, there may be some concern with posts or commands\n   being
    sent in error. It is required that the user have a chance to\n   confirm any action
    before it is executed. In the case of mailto, it\n   may be appropriate to create
    the correctly formatted message without\n   sending it, allowing the user to see
    exactly what is happening and\n   giving the user the opportunity to approve or
    discard the message\n   before it is sent.\n   All security considerations for
    the use of URLs [RFC1738] apply\n   equally to this protocol. Mail client applications
    should not support\n   list header field URLs which could compromise the security
    of the\n   user's system. This includes the \"file://\" URL type which could\n
    \  potentially be used to trigger the execution of a local application\n   on
    some user systems.\n"
  title: 5. Security Considerations
- contents:
  - "6. Acknowledgements\n   The numerous participants of the List-Header [5], ListMom-Talk
    [6],\n   List-Managers and MIDA-Mail mailing lists contributed much to the\n   formation
    and structure of this document.\n   Keith Moore <moore@cs.utk.edu> and Christopher
    Allen\n   <ChristopherA@consensus.com> provided guidance on the standards\n   process.\n"
  - "A. Background Discussion\n   This proposal arose from discussions started on
    the ListMom-Talk\n   Discussion List [6]. When the discussion reached a sufficient
    level,\n   a separate list was formed for discussing this proposal, the List\n
    \  Headers Mail List [5] for deeper discussion. We have included\n   summaries
    of key issues raised, in order to show some of the\n   alternatives examined and
    reasons for our decisions.\n"
  - contents:
    - "A.1. Multiple header fields vs. a single header field\n   Use of a single header
      field for transporting command meta-syntax was\n   rejected for a number of
      reasons.\n   Such a field would require the creation of a new meta-syntax in
      order\n   to describe the list commands (as opposed to the use of the widely\n
      \  deployed URL syntax which was chosen for this implementation).  Every\n   additional
      layer of complexity and newness reduces the likelihood of\n   actual implementation
      because it will require additional work to\n   support. Also, by using the existing
      URL syntax, we can profit from\n   the end users' knowledge of that syntax and
      ability to use it even if\n   their client applications do not support the list
      header fields.\n   Restricting the transport of meta-syntax to the use of a
      single\n   header field also introduces complications with header field size\n
      \  limitations. Most individual commands can easily be described in a\n   single
      line, but describing a multitude of commands can take up many\n   lines in the
      field and runs a greater risk of being modified by an\n   existing server on
      route.\n   The client implementation is also easier with multiple fields, since\n
      \  each command can be supported and implemented individually,\n   completely
      independent of the others. Thus, some list managers or\n   mail clients can
      choose to implement a subset of the fields based on\n   the specific needs of
      their individual lists.\n   Finally, the format described in this document is
      simple and well\n   recognized, which reduces the chances of errors in implementation
      and\n   parsing.\n"
    title: A.1. Multiple header fields vs. a single header field
  - contents:
    - "A.2. URLs vs. parameter lists\n   URLs are already an established syntax which
      is flexible, well-\n   defined, and in wide spread use. As its definition matures
      and\n   expands, the abilities of the list fields will grow as well, without\n
      \  requiring modification of this proposal. URLs are well prepared to\n   handle
      future protocols and developments, and can easily describe the\n   different
      existing access protocols such as mailto, http and ftp.\n   Many clients already
      have functionality for recognizing, parsing, and\n   evaluating URLs, either
      internally or by passing the request to a\n   helper application. This makes
      implementation easier and more\n   realistic. As an example, this existing support
      for URL parsing\n   allowed us to add prototype list header functionality to
      existing\n   mail clients (Eudora and Emailer for the Macintosh) without modifying\n
      \  their source code.\n"
    title: A.2. URLs vs. parameter lists
  - contents:
    - "A.3. Why not just create a standard command language?\n   A standard command
      language, supported by all email list services,\n   would go a long way to reducing
      the problems of list access that\n   currently plague existing services. It
      would reduce the amount of\n   learning required by end users and allow for
      a number of common\n   support tools to be developed.\n   However, such standardization
      does pose problems in the areas of\n   multi-lingual support and the custom
      needs of individual mailing\n   lists. The development of such a standard is
      also expected to be met\n   with a slow adoption rate by software developers
      and list service\n   providers.\n   These points do not preclude the development
      of such a standard (in\n   fact, it would suggest that we should start sooner
      rather than\n   later), but we do need a solution that can be widely supported
      by the\n   current list services.\n   We can support most existing list manager
      command syntaxes without a\n   standard command language. By using URLs, we
      allow alternate access\n   methods a standard command language probably wouldn't
      enable, such as\n   web based control.\n   Finally, client support for a standard
      command language is not at all\n   clear or necessarily simple to implement.
      The variety and large\n   number of commands existing today would require complicated
      user\n   interfaces which could be confusing and difficult to implement. By\n
      \  restricting this proposal to the core functions, the client\n   implementation
      is much simpler, which significantly increases the\n   likelihood of implementation
      (as evidenced by the support already\n   announced by a number of client and
      server application authors).\n"
    title: A.3. Why not just create a standard command language?
  - contents:
    - "A.4. Internationalization\n   Multilingual support is up to the URL standard.
      If URLs support it,\n   then the List- header fields support it. This is another
      advantage of\n   using URLs as the building blocks for the list header fields.\n"
    title: A.4. Internationalization
  - contents:
    - "A.5. Variable Substitution\n   Variables would allow the List- header fields
      to accommodate nearly\n   every existing list manager. However, it would immeasurably
      increase\n   the complexity of the entire proposal, and possibly involve\n   redefining
      the URL standard, or force us to use something more\n   complicated (and hence
      more difficult to implement) than URLs to\n   describe the command syntax.\n
      \  Parameters would either have to be mandatory (i.e. the user agent\n   doesn't
      submit the message if it doesn't know what text to\n   substitute) or you need
      a way to say \"if you know this parameter, add\n   its text here; otherwise,
      do this\" where \"this\" is either: (a)\n   substitute a constant string, or
      (b) fail.\n   The reason you would want a facility like this is because some
      list\n   server applications insist on having certain parameters like users'\n
      \  names, which the user agent might or might not know. e.g. listserv\n   insists
      on having a first name and a last name if you supply either\n   one.\n   Which
      could lead to something like the UNIX shell syntax, where\n   ${foo-bar} means
      substitute the value of parameter \"foo\" if \"foo\" is\n   defined, else substitute
      the string \"bar\". Perhaps $foo would mean\n   \"substitute the value of parameter
      foo if it is defined, else\n   substitute the empty string\"\n   This all seems
      far too complicated for the gains involved, especially\n   since the use of
      variables can often be avoided.\n   The use of variables in the command syntaxes
      of list services appears\n   to be lessening and does not, in any case, apply
      to all commands.\n   While the unsubscribe and subscribe command header fields
      may not be\n   usable by those systems which require the use of variables, the
      help\n   field will still provide end users with a consistent point of access\n
      \  through which they can get support for their use of the list.\n"
    title: A.5. Variable Substitution
  - contents:
    - "A.6. Why not use a specialized MIME part instead of header fields?\n   MIME
      parts were considered, but because most mail clients currently\n   either don't
      support MIME or are not equipped to handle such\n   specialized parts - such
      an implementation would result in problems\n   for end users. It is also not
      as easy for many list servers to\n   implement MIME as it is to implement new
      header fields.\n   However, we are looking at the design of a MIME part to more
      fully\n   describe list command syntax, as well as trying to find ways to get\n
      \  it supported by the applicable software.\n"
    title: A.6. Why not use a specialized MIME part instead of header fields?
  - contents:
    - "A.7. Why include a Subscribe command?\n   Subscribe and Unsubscribe are the
      key commands needed by almost every\n   list. Other commands, such as digest
      mode, are not as widely\n   supported.\n   Additionally, users who have unsubscribed
      (before going on vacation,\n   or for whatever other reason) may want to resubscribe
      to a list. Or,\n   a message may be forwarded/bounced from a subscriber to a
      non-\n   subscriber. Or, the user may change addresses and want to subscribe\n
      \  from their new address. Having the List-Subscribe field available\n   could
      certainly help in all these cases.\n"
    title: A.7. Why include a Subscribe command?
  - contents:
    - "A.8. The Dangers of Header Bloat\n   At what point are there just too many
      header fields?  It really\n   varies on a list by list basis. On some lists,
      the majority of users\n   will never be aware of a field unless the client software
      provides\n   some alternative user interface to it (akin to the Reply-To field).\n
      \  On others, the users will often see the header fields of messages and\n   would
      be able to recognize the function of the URLs contained within.\n   The flexibility
      afforded by the protocol described in this document\n   (in that the header
      fields may be individually implemented as deemed\n   appropriate) provides list
      administrators with sufficient 'room to\n   maneuver' to meet their individual
      needs.\n"
    - 'B. Client Implementation

      '
    title: A.8. The Dangers of Header Bloat
  - contents:
    - "B.1. Guidelines\n   For 'mailto' URL based commands, mail client applications
      may choose\n   to provide specialized feedback (such as presenting a dialog
      or\n   alert), instead of the actual command email message, asking for\n   command
      confirmation from the user. The feedback should identify the\n   message destination
      and command within a more descriptive\n   explanation. For example:\n     \"Do
      you want to send the unsubscription command 'unsubscribe\n     somelist' to
      'somelist-request@some.host.com'?  Sending the command\n     will result in
      your removal from the associated list.\"\n   If the user has multiple email
      addresses supported by the mail\n   client, the client application should prompt
      the user for which\n   address to use when subscribing or performing some other
      action where\n   the address to use cannot be specifically determined. When\n
      \  unsubscribing or such, the address that is subscribed should be used,\n   unless
      that is not known by the application and cannot be determined\n   from the message
      headers.\n"
    title: B.1. Guidelines
  - contents:
    - "B.2. Implementation Options\n   The following implementation possibilities
      are suggested here to give\n   some idea as to why these new header fields will
      be useful, and how\n   they could be supported.\n   In most cases, it may be
      helpful to disable the interface for the\n   commands when not applicable to
      the currently selected message.\n"
    - contents:
      - "B.2.1. Key combinations and command lines\n   On text based systems which
        utilize command lines or key\n   combinations, each field could be implemented
        as a separate command.\n   Thus one combination would subscribe the user,
        another would\n   unsubscribe, a third request help, etc. The commands would
        only be\n   available on messages containing the list header fields.\n"
      title: B.2.1. Key combinations and command lines
    - contents:
      - "B.2.2. Menu items\n   On graphical systems which have menus, these commands
        could take the\n   form of a menu or sub-menu of items. For example, a \"Lists\"
        menu\n   might appear when viewing messages containing the header fields,
        with\n   items named \"Subscribe\", \"Unsubscribe\", \"Get Help\", \"Post
        Message to\n   List\", \"Contact List Owner\" and \"Access List Archive\".
        This menu\n   could be disabled when not applicable to the current message
        or\n   disappear entirely.\n"
      title: B.2.2. Menu items
    - contents:
      - "B.2.3. Push Buttons and Pallettes\n   On graphical window systems, buttons
        could be placed in the window of\n   the message, a toolbar, or in a floating
        pallette of their own. Each\n   button could correspond to a command, with
        names \"Subscribe\",\n   \"Unsubscribe\", \"Get Help\", \"Post to List\",
        \"List Owner\" and\n   \"Archive\". These buttons or pallettes could be disabled
        when not\n   applicable to the current message or disappear entirely.\n"
      title: B.2.3. Push Buttons and Pallettes
    - contents:
      - "B.2.4 Feedback to the User\n   If using a dialog interface (or other feedback
        element) the client\n   application MUST include an option for the user to
        review (and\n   possibly modify) the message before it is sent. The application
        may\n   also find it useful to provide a link to more detailed context-\n
        \  sensitive assistance about mail list access in general.\n"
      title: B.2.4 Feedback to the User
    title: B.2. Implementation Options
  title: 6. Acknowledgements
- contents:
  - "References\n   [RFC822] Crocker, D., \"Standard for the Format of ARPA\n            Internet
    Text Messages\", STD 11, RFC 822, August 1982.\n   [RFC1738] Berners-Lee, T.,
    Masinter, L., and M. McCahill,\n             \"Uniform Resource Locators (URL)\"
    RFC 1738, December 1994.\n   [RFC2142] Crocker, D., \"Mailbox Names for Common
    Services, Roles and\n             Functions\", RFC 2142, May 1997.\n   [RFC2368]
    Hoffman, P., Masinter, L., and J. Zawinski, \"The mailto URL\n             scheme\",
    RFC 2368, July 1998.\n   [5] \"List-Header\" Mail list. list-header@list.nisto.com\n
    \      <URL:http://www.nisto.com/listspec/mail/>\n       <URL:http://www.nisto.com/listspec/>\n
    \  [6] \"ListMom-Talk\" Mail list. listmom-talk@skyweyr.com\n       <URL:http://cgi.skyweyr.com/ListMom.Home>\n"
  title: References
- contents:
  - "Editors' Addresses\n   Joshua D. Baer\n   Box 273\n   4902 Forbes Avenue\n   Pittsburgh,
    PA 15213-3799\n   USA\n   EMail: josh@skyweyr.com\n   Grant Neufeld\n   Calgary,
    Alberta\n   Canada\n   EMail: grant@acm.org\n   Web: http://www.nisto.com/\n"
  title: Editors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1998).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
