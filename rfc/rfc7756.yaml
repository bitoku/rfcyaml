- title: __initial_text__
  contents:
  - "      Stateless IP/ICMP Translation for IPv6 Internet Data Center\n         \
    \    Environments (SIIT-DC): Dual Translation Mode\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes an extension of the Stateless IP/ICMP\n\
    \   Translation for IPv6 Internet Data Center Environments (SIIT-DC)\n   architecture,\
    \ which allows applications, protocols, or nodes that are\n   incompatible with\
    \ IPv6 and/or Network Address Translation to operate\n   correctly with SIIT-DC.\
    \  This is accomplished by introducing a new\n   component called an SIIT-DC Edge\
    \ Relay, which reverses the\n   translations made by an SIIT-DC Border Relay.\
    \  The application and/or\n   node is thus provided with seemingly native IPv4\
    \ connectivity that\n   provides end-to-end address transparency.\n   The reader\
    \ is expected to be familiar with the SIIT-DC architecture\n   described in RFC\
    \ 7755.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7756.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   3\n   3.  Edge Relay Description  . . . . . . . . . . . . . . . .\
    \ . . .   5\n     3.1.  Node-Based Edge Relay . . . . . . . . . . . . . . . .\
    \ . .   6\n     3.2.  Network-Based Edge Relay  . . . . . . . . . . . . . . .\
    \ .   7\n       3.2.1.  Edge Relay \"on a Stick\" . . . . . . . . . . . . . .\
    \ .   8\n       3.2.2.  Edge Relay That Bridges IPv6 Packets  . . . . . . . .\
    \   9\n   4.  Deployment Considerations . . . . . . . . . . . . . . . . . .  \
    \ 9\n     4.1.  IPv6 Path MTU . . . . . . . . . . . . . . . . . . . . . .   9\n\
    \     4.2.  IPv4 MTU  . . . . . . . . . . . . . . . . . . . . . . . .  10\n  \
    \   4.3.  IPv4 Identification Header  . . . . . . . . . . . . . . .  10\n   5.\
    \  Intra-IDC IPv4 Communication  . . . . . . . . . . . . . . . .  10\n     5.1.\
    \  Hairpinning by the SIIT-DC Border Relay . . . . . . . . .  11\n     5.2.  Additional\
    \ EAMs Configured in Edge Relay  . . . . . . . .  12\n   6.  Security Considerations\
    \ . . . . . . . . . . . . . . . . . . .  13\n   7.  References  . . . . . . .\
    \ . . . . . . . . . . . . . . . . . .  14\n     7.1.  Normative References  .\
    \ . . . . . . . . . . . . . . . . .  14\n     7.2.  Informative References  .\
    \ . . . . . . . . . . . . . . . .  14\n   Appendix A.  Examples: Network-Based\
    \ IPv4 Connectivity  . . . . .  16\n     A.1.  Subnet with IPv4 Service Addresses\
    \  . . . . . . . . . . .  16\n     A.2.  Subnet with Unrouted IPv4 Addresses .\
    \ . . . . . . . . . .  16\n   Acknowledgements  . . . . . . . . . . . . . . .\
    \ . . . . . . . . .  17\n   Authors' Addresses  . . . . . . . . . . . . . . .\
    \ . . . . . . . .  17\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   SIIT-DC [RFC7755] describes an architecture where IPv4-only\
    \ users can\n   access IPv6-only services through a stateless translator called\
    \ an\n   SIIT-DC Border Relay (BR).  This approach has certain limitations,\n\
    \   however.  In particular, the following cases will work poorly or not\n   at\
    \ all:\n   o  Application protocols that do not support NAT (i.e., the lack of\n\
    \      end-to-end transparency of IP addresses).\n   o  Nodes that cannot connect\
    \ to IPv6 networks at all or that can only\n      connect such networks if they\
    \ also provide IPv4 connectivity\n      (i.e., dual-stacked networks).\n   o \
    \ Application software that makes use of legacy IPv4-only APIs or\n      otherwise\
    \ makes assumptions that IPv4 connectivity is available.\n   By extending the\
    \ SIIT-DC architecture with a new component called an\n   Edge Relay (ER), all\
    \ of the above can be made to work correctly in an\n   otherwise IPv6-only network\
    \ environment using SIIT-DC.\n   The purpose of the ER is to reverse the IPv4-to-IPv6\
    \ packet\n   translations previously done by the BR for traffic arriving from\
    \ IPv4\n   clients and forward this as \"native\" IPv4 to the node or application.\n\
    \   In the reverse direction, IPv4 packets transmitted by the node or\n   application\
    \ are intercepted by the ER, which translates them to IPv6\n   before they are\
    \ forwarded to the BR, which in turn will reverse the\n   translations and forward\
    \ them to the IPv4 client.  The node or\n   application is thus provided with\
    \ \"virtual\" IPv4 Internet\n   connectivity that retains end-to-end transparency\
    \ for the IPv4\n   addresses.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   This document makes use of the following terms:\n   SIIT-DC\
    \ Border Relay (BR):\n      A device or a logical function that performs stateless\
    \ protocol\n      translation between IPv4 and IPv6.  It MUST do so in accordance\n\
    \      with [RFC6145] and [RFC7757].\n   SIIT-DC Edge Relay (ER):\n      A device\
    \ or logical function that provides \"native\" IPv4\n      connectivity to IPv4-only\
    \ devices or application software.  It is\n      very similar in function to a\
    \ BR but is typically located close to\n      the IPv4-only component(s) it is\
    \ supporting rather than on the\n      outer network border of the Internet Data\
    \ Center (IDC).  An ER may\n      be either node based (Section 3.1) or network\
    \ based (Section 3.2).\n   IPv4 Service Address:\n      An IPv4 address representing\
    \ a node or service located in an IPv6\n      network.  It is coupled with an\
    \ IPv6 Service Address using an\n      Explicit Address Mapping (EAM).  Packets\
    \ sent to this address are\n      translated to IPv6 by the BR, and possibly back\
    \ to IPv4 by an ER,\n      before reaching the node or service.\n   IPv6 Service\
    \ Address:\n      An IPv6 address assigned to an application, node, or service\n\
    \      either directly or indirectly (through an ER).  It is coupled with\n  \
    \    an IPv4 Service Address using an EAM.  IPv4-only clients\n      communicate\
    \ with the IPv6 Service Address through SIIT-DC.\n   Explicit Address Mapping\
    \ (EAM):\n      A bidirectional coupling between an IPv4 Service Address and an\n\
    \      IPv6 Service Address configured in a BR or ER.  When translating\n    \
    \  between IPv4 and IPv6, the BR/ER changes the address fields in the\n      translated\
    \ packet's IP header according to any matching EAM.  The\n      EAM algorithm\
    \ is specified in [RFC7757].\n   Translation Prefix:\n      An IPv6 prefix into\
    \ which the entire IPv4 address space is mapped,\n      according to the algorithm\
    \ in [RFC6052].  The translation prefix\n      is routed to the BR's IPv6 interface.\
    \  When translating between\n      IPv4 and IPv6, a BR/ER will insert/remove the\
    \ translation prefix\n      into/from the address fields in the translated packet's\
    \ IP header,\n      unless an EAM exists for the IP address that is being translated.\n\
    \   IPv4-Converted IPv6 Addresses:\n      As defined in Section 1.3 of [RFC6052].\n\
    \   IDC:\n      Short for \"Internet Data Center\"; a data center whose main purpose\n\
    \      is to deliver services to the public Internet.  SIIT-DC is\n      primarily\
    \ targeted at being deployed in an IDC.  An IDC is\n      typically operated by\
    \ an Internet Content Provider or a Managed\n      Services Provider.\n   SIIT:\n\
    \      The Stateless IP/ICMP Translation Algorithm, as specified in\n      [RFC6145].\n\
    \   XLAT:\n      Short for \"Translation\".  Used in figures to indicate where\
    \ a BR/\n      ER uses SIIT [RFC6145] to translate IPv4 packets to IPv6 and vice\n\
    \      versa.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
- title: 3.  Edge Relay Description
  contents:
  - "3.  Edge Relay Description\n   An ER is at its core an implementation of the\
    \ Stateless IP/ICMP\n   Translation Algorithm [RFC6145] that supports Explicit\
    \ Address\n   Mappings [RFC7757].  It provides virtual IPv4 connectivity for nodes\n\
    \   or applications that require this to operate correctly with SIIT-DC.\n   Packets\
    \ from the IPv4 Internet destined for an IPv4 Service Address\n   are first translated\
    \ to IPv6 by a BR.  The resulting IPv6 packets are\n   subsequently forwarded\
    \ to the ER that owns the IPv6 Service Address\n   the translated packets are\
    \ addressed to.  The ER then translates them\n   back to IPv4 before forwarding\
    \ them to the IPv4 application or node.\n   In the other direction, the exact\
    \ same translations happen, only in\n   reverse.  This process provides end-to-end\
    \ transparency of IPv4\n   addresses.\n   An ER may handle an arbitrary number\
    \ of IPv4/IPv6 Service Addresses.\n   All the EAMs configured in the BR that involve\
    \ the IPv4/IPv6 Service\n   Addresses handled by an ER MUST also be present in\
    \ the ER's\n   configuration.\n   An ER may be implemented in two distinct ways:\
    \ as a software-based\n   service residing inside an otherwise IPv6-only node\
    \ or as a network-\n   based service that provides an isolated IPv4 network segment\
    \ to which\n   nodes that require IPv4 can connect.  In both cases, native IPv6\n\
    \   connectivity may be provided simultaneously with the virtual IPv4\n   connectivity.\
    \  Thus, dual-stack connectivity is facilitated in case\n   the node or application\
    \ supports it.\n   The choice between a node- or network-based ER is made on a\
    \ per-\n   service or per-node basis.  An arbitrary number of each type of ER\n\
    \   may co-exist in an SIIT-DC architecture.\n   This section describes the different\
    \ approaches and discusses which\n   approach fits best for the various use cases.\n"
- title: 3.1.  Node-Based Edge Relay
  contents:
  - "3.1.  Node-Based Edge Relay\n    [IPv4 Internet]  [IPv6 Internet]\n         \
    \ |            |\n    +-----|-----+      |\n    | (BR/XLAT) |      |\n    +-----|-----+\
    \      |\n          |            |      +-----<IPv6-only node/server>----------+\n\
    \    [IPv6-only IDC network]   |                    +----------------+|\n    \
    \   |                      |  /--(ER/XLAT)--AF_INET  Dual-stack  ||\n       \\\
    -------------------------+                 |    application ||\n             \
    \                 |  \\------------AF_INET6  software    ||\n                \
    \              |                    +----------------+|\n                    \
    \          +--------------------------------------+\n                     Figure\
    \ 1: A Node-Based Edge Relay\n   A node-based ER is typically implemented as a\
    \ logical software\n   function that runs inside the operating system of an IPv6\
    \ node.  It\n   provides applications running on the same node with IPv4\n   connectivity.\
    \  Its IPv4 Service Address SHOULD be considered a\n   regular local address that\
    \ allows applications running on the same\n   node to use it with IPv4-only API\
    \ calls, e.g., to create AF_INET\n   sockets that listen for and accept incoming\
    \ connections to its IPv4\n   Service Address.  An ER may accomplish this by creating\
    \ a virtual\n   network adapter to which it assigns the IPv4 Service Address and\n\
    \   points a default IPv4 route.  This approach is similar to the\n   \"Bump-in-the-Stack\"\
    \ approach discussed in [RFC6535]; however, it does\n   not include an Extension\
    \ Name Resolver.\n   As shown in Figure 1, if the application supports dual-stack\n\
    \   operation, IPv6 clients will be able to communicate with it directly\n   using\
    \ native IPv6.  Neither the BR nor the ER will intercept this\n   communication.\
    \  Support for IPv6 in the application is, however, not\n   a requirement; the\
    \ application may opt not to establish any IPv6\n   sockets.  Foregoing IPv6 in\
    \ this manner will simply preclude\n   connectivity to the service from IPv6-only\
    \ clients; connectivity to\n   the service from IPv4 clients (through the BR)\
    \ will continue work in\n   the same way.\n   The ER requires a dedicated IPv6\
    \ Service Address for each IPv4\n   Service Address it has configured.  The IPv6\
    \ network MUST forward\n   traffic to these IPv6 Service Addresses to the node,\
    \ whose operating\n   system MUST in turn forward them to the ER.  This document\
    \ does not\n   attempt to fully explore the multitude of ways this could be\n\
    \   accomplished; however, considering that the IPv6 protocol is designed\n  \
    \ for having multiple addresses assigned to a single node, one\n   particularly\
    \ straight-forward way would be to assign the ER's IPv6\n   Service Addresses\
    \ as secondary IPv6 addresses on the node itself so\n   that the upstream router\
    \ learns of their location using the IPv6\n   Neighbor Discovery Protocol [RFC4861].\n"
- title: 3.2.  Network-Based Edge Relay
  contents:
  - "3.2.  Network-Based Edge Relay\n         [IPv4 Internet]  [IPv6 Internet]\n \
    \              |             |\n         +-----|-----+       |\n         | (BR/XLAT)\
    \ |       |\n         +-----|-----+       |\n               |             |\n\
    \          [IPv6-only IDC network]   +--<IPv4-only node/server>--+\n         \
    \      |                    |         +----------------+|\n         +-----|-----+\
    \   [v4-only]  |         |    IPv4-only   ||\n         | (ER/XLAT)-----[network]--------AF_INET\
    \  application ||\n         +-----------+   [segment]  |         |    software\
    \    ||\n                                    |         +----------------+|\n \
    \                                   +---------------------------+\n          \
    \      Figure 2: A Basic Network-Based Edge Relay\n   A network-based ER functions\
    \ the exact same way as a node-based ER\n   does, only that instead of assigning\
    \ the IPv4 Service Addresses to an\n   internal-only virtual network adapter,\
    \ traffic destined for them are\n   forwarded onto a network segment to which\
    \ nodes that require IPv4\n   connectivity connect to.  The ER also functions\
    \ as the default IPv4\n   router for the nodes on this network segment.\n   Each\
    \ node on the IPv4 network segment MUST acquire and assign an IPv4\n   Service\
    \ Address to a local network interface.  While this document\n   does not attempt\
    \ to explore all the various methods by which this\n   could be accomplished,\
    \ some examples are provided in Appendix A.\n   The basic ER illustrated in Figure\
    \ 2 establishes an IPv4-only network\n   segment between itself and the IPv4-only\
    \ nodes it serves.  This is\n   fine if the nodes it provides IPv4 access to have\
    \ no support for IPv6\n   whatsoever; however, if they are dual-stack capable,\
    \ it would not be\n   ideal to take away their IPv6 connectivity in this manner.\
    \  While it\n   is RECOMMENDED to use a node-based ER in this case, appropriate\n\
    \   implementations of a node-based ER might not be available for every\n   node.\
    \  If the application protocol in question does not work\n   correctly in a NAT\
    \ environment, standard SIIT-DC cannot be used\n   either, which leaves a network-based\
    \ ER as the only remaining\n   solution.  The following subsections contain examples\
    \ on how the ER\n   could be implemented in a way that provides IPv6 connectivity\
    \ for\n   dual-stack capable nodes.\n"
- title: 3.2.1.  Edge Relay "on a Stick"
  contents:
  - "3.2.1.  Edge Relay \"on a Stick\"\n       [IPv4 Internet]  [IPv6 Internet]\n\
    \             |             |\n       +-----|-----+       |\n       | (BR/XLAT)\
    \ |       |\n       +-----|-----+       |\n             |             |\n    \
    \    [IPv6-only IDC network]\n          |\n          |  +-------------+\n    \
    \      |  |  _IPv6_     |\n          |  | /      \\    |\n          +====  (ER/XLAT)\
    \ |\n          |  | \\_    _/    |\n          |  |   IPv4      |          +--<Dual-stack\
    \ node/server>--+\n          |  +-------------+          |          +----------------+|\n\
    \          |                           |  /---AF_INET  Dual-stack  ||\n      \
    \  [Dual-stack network segment]----<        |    application ||\n            \
    \                          |  \\--AF_INET6  software    ||\n                 \
    \                     |          +----------------+|\n                       \
    \               +----------------------------+\n             Figure 3: A Network-Based\
    \ Edge Relay \"on a Stick\"\n   The ER \"on a stick\" approach illustrated in\
    \ Figure 3 ensures that the\n   dual-stack capable node retains native IPv6 connectivity\
    \ by\n   connecting the ER's IPv4 and IPv6 interfaces to the same network\n  \
    \ segment, alternatively by using a single dual-stacked interface.\n   Native\
    \ IPv6 traffic between the IDC network and the node bypasses the\n   ER entirely,\
    \ while IPv4 traffic from the node will be routed directly\n   to the ER (because\
    \ it acts as its default IPv4 router), where it is\n   translated to IPv6 before\
    \ being transmitted to the upstream default\n   IPv6 router.  The ER could attract\
    \ inbound traffic to the IPv6\n   Service Addresses by responding to the upstream\
    \ router's IPv6\n   Neighbor Discovery [RFC4861] messages for them.\n"
- title: 3.2.2.  Edge Relay That Bridges IPv6 Packets
  contents:
  - "3.2.2.  Edge Relay That Bridges IPv6 Packets\n       [IPv4 Internet]  [IPv6 Internet]\n\
    \             |             |\n       +-----|-----+       |\n       | (BR/XLAT)\
    \ |       |\n       +-----|-----+       |\n             |             |\n    \
    \    [IPv6-only IDC network]\n                   |\n       +-----------|--------------+\n\
    \       |      ____/ \\_IPv6_       |\n       |     /             \\      |\n\
    \       | (IPv6 Bridge)  (ER/XLAT) |\n       |     \\____   _    _/      |\n \
    \      |          \\ / IPv4        |   +--<Dual-stack node/server>--+\n      \
    \ +-----------|--------------+   |          +----------------+|\n            \
    \       |                  |  /---AF_INET  Dual-stack  ||\n        [Dual-stack\
    \ network segment]----<        |    application ||\n                         \
    \             |  \\--AF_INET6  software    ||\n                              \
    \        |          +----------------+|\n                                    \
    \  +----------------------------+\n      Figure 4: A Network-Based Edge Relay\
    \ Containing an IPv6 Bridge\n   The ER illustrated in Figure 4 will transparently\
    \ bridge IPv6 frames\n   between its upstream and downstream interfaces.  IPv6\
    \ packets sent\n   from the upstream IDC network to an IPv6 Service Address are\n\
    \   intercepted by the ER (e.g., by responding to IPv6 Neighbor Discovery\n  \
    \ [RFC4861] messages for them) and routed through the translation\n   function\
    \ before being forwarded out the ER's downstream interface as\n   IPv4 packets.\
    \  The downstream network segment thus becomes dual\n   stacked.\n"
- title: 4.  Deployment Considerations
  contents:
  - '4.  Deployment Considerations

    '
- title: 4.1.  IPv6 Path MTU
  contents:
  - "4.1.  IPv6 Path MTU\n   The IPv6 Path MTU between the ER and the BR will typically\
    \ be larger\n   than the default value defined in Section 4 of [RFC6145] (1280\n\
    \   bytes), as it will typically be contained within a single\n   administrative\
    \ domain.  Therefore, it is RECOMMENDED that the IPv6\n   Path MTU configured\
    \ in the ER be raised accordingly.  It is\n   RECOMMENDED that the ER and the\
    \ BR use identical configured IPv6 Path\n   MTU values.\n"
- title: 4.2.  IPv4 MTU
  contents:
  - "4.2.  IPv4 MTU\n   In order to avoid IPv6 fragmentation, an ER SHOULD ensure\
    \ that the\n   IPv4 MTU used by applications or nodes is equal to the configured\n\
    \   IPv6 Path MTU - 20 so that a maximum-sized IPv4 packet can fit in an\n   unfragmented\
    \ IPv6 packet.  This ensures that the application may do\n   its part in avoiding\
    \ IP-level fragmentation from occurring, e.g., by\n   segmenting/fragmenting outbound\
    \ packets at the application layer, and\n   advertising the maximum size its peer\
    \ may use for inbound packets\n   (e.g., through the use of the TCP Maximum Segment\
    \ Size (MSS) option).\n   A node-based ER could accomplish this by configuring\
    \ this MTU value\n   on the virtual network adapter, while a network-based ER\
    \ could do so\n   by advertising the MTU to its downstream nodes using the DHCPv4\n\
    \   Interface MTU option [RFC2132].\n"
- title: 4.3.  IPv4 Identification Header
  contents:
  - "4.3.  IPv4 Identification Header\n   If the generation of IPv6 Atomic Fragments\
    \ is disabled, the value of\n   the IPv4 Identification header will be lost during\
    \ the translation.\n   Conversely, enabling the generation of IPv6 Atomic Fragments\
    \ will\n   ensure that the IPv4 Identification header will be carried end to\n\
    \   end.  Note that for this to work bidirectionally, IPv6 Atomic\n   Fragment\
    \ generation MUST be enabled on both the BR and the ER.\n   Apart from certain\
    \ diagnostic tools, there are few (if any)\n   application protocols that make\
    \ use of the IPv4 Identification\n   header.  Therefore, the loss of the IPv4\
    \ Identification value will\n   generally not cause any problems.\n   IPv6 Atomic\
    \ Fragments and their impact on the IPv4 Identification\n   header is further\
    \ discussed in Section 4.9.2 of [RFC7755].\n"
- title: 5.  Intra-IDC IPv4 Communication
  contents:
  - "5.  Intra-IDC IPv4 Communication\n   Although SIIT-DC is primarily intended to\
    \ facilitate communication\n   between IPv4-only nodes on the Internet and services\
    \ located in an\n   IPv6-only IDC network, an IPv4-only node or application located\n\
    \   behind an ER might need to communicate with other nodes or services\n   in\
    \ the IDC.  The IPv4-only node or application will need to go\n   through the\
    \ ER, as it will typically be incapable of contacting IPv6\n   destinations directly.\
    \  The following subsections discuss various\n   methods on how to facilitate\
    \ such communication.\n"
- title: 5.1.  Hairpinning by the SIIT-DC Border Relay
  contents:
  - "5.1.  Hairpinning by the SIIT-DC Border Relay\n   If the BR supports hairpinning\
    \ as described in Section 4.2 of\n   [RFC7757], the easiest solution is to make\
    \ the target service\n   available through SIIT-DC in the normal way; that is,\
    \ by provisioning\n   an EAM to the BR that assigns an IPv4 Service Address with\
    \ the target\n   service's IPv6 Service Address.\n   This allows the IPv4-only\
    \ node or application to transmit packets\n   destined for the target service's\
    \ IPv4 Service Address, which the ER\n   will then translate to a corresponding\
    \ IPv4-converted IPv6 address by\n   inserting the translation prefix [RFC6052].\
    \  When this IPv6 packet\n   reaches the BR, it will be hairpinned and transmitted\
    \ back to the\n   target service's IPv6 Service Address (where it could possibly\
    \ pass\n   through another ER before reaching the target service).  Return\n \
    \  traffic from the target service will be hairpinned in the same\n   fashion.\n\
    \   +-[Pkt#1: IPv4]-+             +--[Pkt#2: IPv6]-------------+\n   | SRC 192.0.2.1\
    \ |  (XLAT#1)   | SRC 2001:db8:a::           |\n   | DST 192.0.2.2 |--(@ ER A)-->|\
    \ DST 2001:db8:46::192.0.2.2 |---\\\n   +---------------+             +----------------------------+\
    \   |\n                                                                (XLAT#2)\n\
    \   +-[Pkt#4: IPv4]-+             +--[Pkt#3: IPv6]-------------+ ( @ BR )\n  \
    \ | SRC 192.0.2.1 |   (XLAT#3)  | SRC 2001:db8:46::192.0.2.1 |   |\n   | DST 192.0.2.2\
    \ |<--(@ ER B)--| DST 2001:db8:b::           |<--/\n   +---------------+     \
    \        +----------------------------+\n                Figure 5: Hairpinned\
    \ IPv4-IPv4 Packet Flow\n   Figure 5 illustrates the flow of a hairpinned packet\
    \ sent from the\n   IPv4-only node/app behind ER A towards an IPv6-only node/app\
    \ behind\n   ER B.  ER A is configured with the EAM {192.0.2.1,2001:db8:a::} and\n\
    \   ER B with {192.0.2.2,2001:db8:b::}.  The BR is configured with both\n   EAMs\
    \ and supports hairpinning.  Note that if the target service had\n   not been\
    \ located behind an ER, the third and final translation\n   (XLAT#3) would not\
    \ have happened, i.e., the target service/node would\n   have received and responded\
    \ to packet #3 directly.\n   If the IPv4-only nodes/services do not need connectivity\
    \ with the\n   public IPv4 Internet, private IPv4 addresses [RFC1918] could be\
    \ used\n   as their IPv4 Service Addresses in order to conserve the IDC\n   operator's\
    \ pool of public IPv4 addresses.\n"
- title: 5.2.  Additional EAMs Configured in Edge Relay
  contents:
  - "5.2.  Additional EAMs Configured in Edge Relay\n   If the BR does not support\
    \ hairpinning, or if the hairpinning\n   solution is not desired for some other\
    \ reason, intra-IDC IPv4 traffic\n   may be facilitated by configuring additional\
    \ EAMs on the ER for each\n   service the IPv4-only node or application needs\
    \ to communicate with.\n   This makes the IPv6 traffic between the ER and the\
    \ target service's\n   IPv6 Service Address follow the direct path through the\
    \ IPv6 network.\n   The traffic does not pass the BR, which means that this solution\n\
    \   might yield better latency than the hairpinning approach.\n   The additional\
    \ EAM configured in the ER consists of the target's IPv6\n   Service Address and\
    \ an IPv4 Service Address.  The IPv4-only node or\n   application will contact\
    \ the target's assigned IPv4 Service Address\n   using its own IPv4 Service Address\
    \ as the source.  The ER will then\n   proceed to translate the original IPv4\
    \ packet to an IPv6 packet.  The\n   source address of the resulting IPv6 packet\
    \ will be the IPv6 Service\n   Address of the local node or application, while\
    \ the destination\n   address will be the IPv6 Service Address of the target.\
    \  Any replies\n   from the target will undergo identical translation, only in\
    \ reverse.\n   If the target service is located behind another ER, that other\
    \ ER\n   MUST also be provisioned with an additional EAM that contains the\n \
    \  IPv4 and IPv6 Service Addresses of the origin IPv4-only node or\n   application.\
    \  Otherwise, the target service's ER will be unable to\n   translate the source\
    \ address of the incoming packets.\n            +-[Pkt#1: IPv4]-+            \
    \ +--[Pkt#2: IPv6]---+\n            | SRC 192.0.2.1 |  (XLAT#1)   | SRC 2001:db8:a::\
    \ |\n            | DST 192.0.2.2 |--(@ ER A)-->| DST 2001:db8:b:: |\n        \
    \    +---------------+             +------------------+\n                    \
    \                               |\n            +-[Pkt#3: IPv4]-+             \
    \         |\n            | SRC 192.0.2.1 |        (XLAT#2)      |\n          \
    \  | DST 192.0.2.2 |<-------(@ ER B)------/\n            +---------------+\n \
    \             Figure 6: Non-hairpinned IPv4-IPv4 Packet Flow\n   Figure 6 illustrates\
    \ the flow of a packet carrying intra-IDC IPv4\n   traffic between two IPv4-only\
    \ nodes/applications that are both\n   located behind ERs.  Both ER A and ER B\
    \ are configured with two EAMs:\n   {192.0.2.1,2001:db8:a::} and {192.0.2.2,2001:db8:b::}.\
    \  The packet\n   will follow the regular routing path through the IPv6 IDC network;\n\
    \   the BR is not involved, and the packet will not be hairpinned.\n   The above\
    \ approach is not mutually exclusive with the hairpinning\n   approach described\
    \ in Section 5.1: If both EAMs above are also\n   configured on the BR, both 192.0.2.1\
    \ and 192.0.2.2 would be reachable\n   from other IPv4-only services/nodes using\
    \ the hairpinning approach.\n   They would also be reachable from the IPv4 Internet.\n\
    \   Note that if the target service in this example was not located\n   behind\
    \ an ER, but instead was a native IPv6 service listening on\n   2001:db8:b::,\
    \ the second translation step in Figure 6 would not\n   occur; the target service\
    \ would receive and respond to packet #2\n   directly.\n   As with the hairpinning\
    \ approach, if the IPv4-only nodes/services do\n   not need connectivity to/from\
    \ the public IPv4 Internet, private IPv4\n   addresses [RFC1918] could be used\
    \ as their IPv4 Service Addresses.\n   Alternatively, in the case where the target\
    \ service is on native\n   IPv6, the target's assigned IPv4 Service Address has\
    \ only local\n   significance behind the ER.  It could therefore be assigned from\
    \ the\n   IPv4 Service Continuity Prefix [RFC7335].\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This section discusses security considerations\
    \ specific to the use of\n   an ER.  See the Security Considerations section in\
    \ [RFC7755] for\n   security considerations applicable to the SIIT-DC architecture\
    \ in\n   general.\n   If the ER receives an IPv4 packet from the application/node\
    \ from a\n   source address it does not have an EAM for, both the source and\n\
    \   destination addresses will be rewritten according to [RFC6052].\n   After\
    \ undergoing the reverse translation in the BR, the resulting\n   IPv4 packet\
    \ routed to the IPv4 network will have a spoofed IPv4\n   source address.  The\
    \ ER SHOULD therefore ensure that ingress\n   filtering [RFC2827] is used on the\
    \ ER's IPv4 interface so that such\n   packets are immediately discarded.\n  \
    \ If the ER receives an IPv6 packet with both the source and\n   destination address\
    \ equal to one of its local IPv6 Service Addresses,\n   the resulting packet would\
    \ appear to the IPv4-only application/node\n   as locally generated, as both the\
    \ source address and the destination\n   address will be the same address.  This\
    \ could trick the application\n   into believing the packet came from a trusted\
    \ source (itself).  To\n   prevent this, the ER SHOULD discard any received IPv6\
    \ packets that\n   have a source address that is either 1) equal to any of its\
    \ local\n   IPv6 Service Addresses or 2) after translation from IPv6 to IPv4,\n\
    \   equal to any of its local IPv4 Service Addresses.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC7755]  Anderson, T., \"SIIT-DC: Stateless IP/ICMP Translation for\n  \
    \            IPv6 Data Center Environments\", RFC 7755,\n              DOI 10.17487/RFC7755,\
    \ February 2016,\n              <http://www.rfc-editor.org/info/rfc7755>.\n  \
    \ [RFC7757]  Anderson, T. and A. Leiva, \"Explicit Address Mappings for\n    \
    \          Stateless IP/ICMP Translation\", RFC 7757,\n              DOI 10.17487/RFC7757,\
    \ February 2016,\n              <http://www.rfc-editor.org/info/rfc7757>.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [RFC826]   Plummer, D., \"Ethernet Address Resolution\
    \ Protocol: Or\n              Converting Network Protocol Addresses to 48.bit\
    \ Ethernet\n              Address for Transmission on Ethernet Hardware\", STD\
    \ 37,\n              RFC 826, DOI 10.17487/RFC0826, November 1982,\n         \
    \     <http://www.rfc-editor.org/info/rfc826>.\n   [RFC1918]  Rekhter, Y., Moskowitz,\
    \ B., Karrenberg, D., de Groot, G.,\n              and E. Lear, \"Address Allocation\
    \ for Private Internets\",\n              BCP 5, RFC 1918, DOI 10.17487/RFC1918,\
    \ February 1996,\n              <http://www.rfc-editor.org/info/rfc1918>.\n  \
    \ [RFC2131]  Droms, R., \"Dynamic Host Configuration Protocol\",\n           \
    \   RFC 2131, DOI 10.17487/RFC2131, March 1997,\n              <http://www.rfc-editor.org/info/rfc2131>.\n\
    \   [RFC2132]  Alexander, S. and R. Droms, \"DHCP Options and BOOTP Vendor\n \
    \             Extensions\", RFC 2132, DOI 10.17487/RFC2132, March 1997,\n    \
    \          <http://www.rfc-editor.org/info/rfc2132>.\n   [RFC2827]  Ferguson,\
    \ P. and D. Senie, \"Network Ingress Filtering:\n              Defeating Denial\
    \ of Service Attacks which employ IP Source\n              Address Spoofing\"\
    , BCP 38, RFC 2827, DOI 10.17487/RFC2827,\n              May 2000, <http://www.rfc-editor.org/info/rfc2827>.\n\
    \   [RFC4861]  Narten, T., Nordmark, E., Simpson, W., and H. Soliman,\n      \
    \        \"Neighbor Discovery for IP version 6 (IPv6)\", RFC 4861,\n         \
    \     DOI 10.17487/RFC4861, September 2007,\n              <http://www.rfc-editor.org/info/rfc4861>.\n\
    \   [RFC6052]  Bao, C., Huitema, C., Bagnulo, M., Boucadair, M., and X.\n    \
    \          Li, \"IPv6 Addressing of IPv4/IPv6 Translators\", RFC 6052,\n     \
    \         DOI 10.17487/RFC6052, October 2010,\n              <http://www.rfc-editor.org/info/rfc6052>.\n\
    \   [RFC6145]  Li, X., Bao, C., and F. Baker, \"IP/ICMP Translation\n        \
    \      Algorithm\", RFC 6145, DOI 10.17487/RFC6145, April 2011,\n            \
    \  <http://www.rfc-editor.org/info/rfc6145>.\n   [RFC6535]  Huang, B., Deng, H.,\
    \ and T. Savolainen, \"Dual-Stack Hosts\n              Using \"Bump-in-the-Host\"\
    \ (BIH)\", RFC 6535,\n              DOI 10.17487/RFC6535, February 2012,\n   \
    \           <http://www.rfc-editor.org/info/rfc6535>.\n   [RFC6724]  Thaler, D.,\
    \ Ed., Draves, R., Matsumoto, A., and T. Chown,\n              \"Default Address\
    \ Selection for Internet Protocol Version 6\n              (IPv6)\", RFC 6724,\
    \ DOI 10.17487/RFC6724, September 2012,\n              <http://www.rfc-editor.org/info/rfc6724>.\n\
    \   [RFC6877]  Mawatari, M., Kawashima, M., and C. Byrne, \"464XLAT:\n       \
    \       Combination of Stateful and Stateless Translation\",\n              RFC\
    \ 6877, DOI 10.17487/RFC6877, April 2013,\n              <http://www.rfc-editor.org/info/rfc6877>.\n\
    \   [RFC7335]  Byrne, C., \"IPv4 Service Continuity Prefix\", RFC 7335,\n    \
    \          DOI 10.17487/RFC7335, August 2014,\n              <http://www.rfc-editor.org/info/rfc7335>.\n"
- title: 'Appendix A.  Examples: Network-Based IPv4 Connectivity'
  contents:
  - 'Appendix A.  Examples: Network-Based IPv4 Connectivity

    '
- title: A.1.  Subnet with IPv4 Service Addresses
  contents:
  - "A.1.  Subnet with IPv4 Service Addresses\n   One relatively straight-forward\
    \ way to provide IPv4 connectivity\n   between a network-based ER and the IPv4\
    \ node(s) it serves is to\n   ensure the IPv4 Service Address(es) can be enclosed\
    \ within a larger\n   IPv4 prefix.  The ER may then claim one address in this\
    \ prefix for\n   itself and use it to provide an IPv4 default router address and\n\
    \   assign the IPv4 Service Address(es) to its downstream node(s) using\n   DHCPv4\
    \ [RFC2131].  For example, if the IPv4 Service Addresses are\n   192.0.2.26 and\
    \ 192.0.2.27, the ER would configure the address\n   192.0.2.25/29 on its IPv4-facing\
    \ interface and would add the two IPv4\n   Service Addresses to its DHCPv4 pool.\n\
    \   One disadvantage of this method is that IPv4 communication between\n   the\
    \ IPv4 node(s) behind the ER and other services made available\n   through SIIT-DC\
    \ becomes impossible, if those other services are\n   assigned IPv4 Service Addresses\
    \ that also are covered by the same\n   IPv4 prefix (e.g., 192.0.2.28).  This\
    \ happens because the IPv4 nodes\n   will mistakenly believe they have an on-link\
    \ route to the entire\n   prefix and attempt to resolve the addresses using ARP\
    \ [RFC826],\n   instead of sending them to the ER for translation to IPv6.  This\n\
    \   problem could, however, be overcome by avoiding assigning IPv4\n   Service\
    \ Addresses that overlap with an IPv4 prefix handled by an ER\n   (at the expense\
    \ of wasting some potential IPv4 Service Addresses) or\n   by ensuring that the\
    \ overlapping IPv4 Service Addresses are only\n   assigned to services that do\
    \ not need to communicate with the IPv4\n   node(s) behind the ER.  A third way\
    \ to avoid this problem is\n   discussed in Appendix A.2.\n"
- title: A.2.  Subnet with Unrouted IPv4 Addresses
  contents:
  - "A.2.  Subnet with Unrouted IPv4 Addresses\n   In order to avoid the problem discussed\
    \ in Appendix A.1, a private\n   unrouted IPv4 network that does not encompass\
    \ the IPv4 Service\n   Address(es) could be used to provide connectivity between\
    \ the ER and\n   the IPv4-only node(s) it serves.  An IPv4-only node must then\
    \ assign\n   its IPv4 Service Address as a secondary local address, while the\
    \ ER\n   routes each of the IPv4 Service Addresses to its assigned node using\n\
    \   that node's private on-link IPv4 address as the next hop.  This\n   approach\
    \ would ensure there are no overlaps with IPv4 Service\n   Addresses elsewhere\
    \ in the infrastructure, but on the other hand, it\n   would preclude the use\
    \ of DHCPv4 [RFC2131] for assigning the IPv4\n   Service Addresses.\n   This approach\
    \ creates a need to ensure that the IPv4 application is\n   selecting the IPv4\
    \ Service Address (as opposed to its private on-link\n   IPv4 address) as its\
    \ source address when initiating outbound\n   connections.  This could be accomplished\
    \ by altering the Default\n   Address Selection Policy Table [RFC6724] on the\
    \ IPv4 node.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to especially thank the authors of\
    \ 464XLAT\n   [RFC6877]: Masataka Mawatari, Masanobu Kawashima, and Cameron Byrne.\n\
    \   The architecture described by this document is merely an adaptation\n   of\
    \ their work to a data center environment and could not have\n   happened without\
    \ them.\n   The authors would like also to thank the following individuals for\n\
    \   their contributions, suggestions, corrections, and criticisms: Fred\n   Baker,\
    \ Tobias Brox, Olafur Gudmundsson, Christer Holmberg, Ray\n   Hunter, Shucheng\
    \ LIU (Will), and Andrew Yourtchenko.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Tore Anderson\n   Redpill Linpro\n   Vitaminveien 1A\n\
    \   0485 Oslo\n   Norway\n   Phone: +47 959 31 212\n   Email: tore@redpill-linpro.com\n\
    \   URI:   http://www.redpill-linpro.com\n   Sander Steffann\n   S.J.M. Steffann\
    \ Consultancy\n   Tienwoningenweg 46\n   Apeldoorn, Gelderland  7312 DN\n   The\
    \ Netherlands\n   Email: sander@steffann.nl\n"
