- title: __initial_text__
  contents:
  - '  An FTP Application Layer Gateway (ALG) for IPv6-to-IPv4 Translation

    '
- title: Abstract
  contents:
  - "Abstract\n   The File Transfer Protocol (FTP) has a very long history, and despite\n\
    \   the fact that today other options exist to perform file transfers,\n   FTP\
    \ is still in common use.  As such, in situations where some client\n   computers\
    \ only have IPv6 connectivity while many servers are still\n   IPv4-only and IPv6-to-IPv4\
    \ translators are used to bridge that gap,\n   it is important that FTP is made\
    \ to work through these translators to\n   the best possible extent.\n   FTP has\
    \ an active and a passive mode, both as original commands that\n   are IPv4-specific\
    \ and as extended, IP version agnostic commands.  The\n   only FTP mode that works\
    \ without changes through an IPv6-to-IPv4\n   translator is extended passive.\
    \  However, many existing FTP servers\n   do not support this mode, and some clients\
    \ do not ask for it.  This\n   document specifies a middlebox that may solve this\
    \ mismatch.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6384.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  Notational Conventions . . . . . . . . . . . . . . .\
    \ . . . . .  4\n   3.  Terminology  . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  4\n   4.  ALG Overview . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  4\n   5.  Control Channel Translation  . . . . . . . . . . . . . . .\
    \ . .  5\n     5.1.  Language Negotiation . . . . . . . . . . . . . . . . . .\
    \ .  7\n   6.  EPSV to PASV Translation . . . . . . . . . . . . . . . . . . .\
    \  8\n   7.  EPRT to PORT Translation . . . . . . . . . . . . . . . . . . .  9\n\
    \     7.1.  Stateless EPRT Translation . . . . . . . . . . . . . . . .  9\n  \
    \   7.2.  Stateful EPRT Translation  . . . . . . . . . . . . . . . . 10\n   8.\
    \  Default Port 20 Translation  . . . . . . . . . . . . . . . . . 10\n   9.  Both\
    \ PORT and PASV . . . . . . . . . . . . . . . . . . . . . . 11\n   10. Default\
    \ Behavior . . . . . . . . . . . . . . . . . . . . . . . 11\n   11. The ALGS Command\
    \ . . . . . . . . . . . . . . . . . . . . . . . 12\n   12. Timeouts and Translating\
    \ to NOOP . . . . . . . . . . . . . . . 13\n   13. IANA Considerations  . . .\
    \ . . . . . . . . . . . . . . . . . . 14\n   14. Security Considerations  . .\
    \ . . . . . . . . . . . . . . . . . 14\n   15. Contributors . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . 14\n   16. Acknowledgements . . . . . . . .\
    \ . . . . . . . . . . . . . . . 15\n   17. References . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . 15\n     17.1. Normative References . . . . . .\
    \ . . . . . . . . . . . . . 15\n     17.2. Informative References . . . . . .\
    \ . . . . . . . . . . . . 15\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   [RFC0959] specifies two modes of operation for FTP: active\
    \ mode, in\n   which the server connects back to the client, and passive mode,\
    \ in\n   which the server opens a port for the client to connect to.  Without\n\
    \   additional measures, active mode with a client-supplied port does not\n  \
    \ work through NATs or firewalls.  With active mode, the PORT command\n   has\
    \ an IPv4 address as its argument, and with passive mode, the\n   server responds\
    \ to the PASV command with an IPv4 address.  This makes\n   both the passive and\
    \ active modes, as originally specified in\n   [RFC0959], incompatible with IPv6.\
    \  These issues were solved in\n   [RFC2428], which introduces the EPSV (extended\
    \ passive) command,\n   where the server only responds with a port number and\
    \ the EPRT\n   (extended port) command, which allows the client to supply either\
    \ an\n   IPv4 or an IPv6 address (and a port) to the server.\n   A survey done\
    \ in April 2009 of 25 randomly picked and/or well-known\n   FTP sites reachable\
    \ over IPv4 showed that only 12 of them supported\n   EPSV over IPv4.  Additionally,\
    \ only 2 of those 12 indicated that they\n   supported EPSV in response to the\
    \ FEAT command introduced in\n   [RFC2389] that asks the server to list its supported\
    \ features.  One\n   supported EPSV but not FEAT.  In 5 cases, issuing the EPSV\
    \ command to\n   the server led to a significant delay; in 3 of these cases, a\
    \ control\n   channel reset followed the delay.  Due to lack of additional\n \
    \  information, it is impossible to determine conclusively why certain\n   FTP\
    \ servers reset the control channel connection some time after\n   issuing an\
    \ EPSV command.  However, a reasonable explanation would be\n   that these FTP\
    \ servers are located behind application-aware firewalls\n   that monitor the\
    \ control channel session and only allow the creation\n   of data channel sessions\
    \ to the ports listed in the responses to PASV\n   (and maybe PORT) commands.\
    \  As the response to an EPSV command is\n   different (a 229 code rather than\
    \ a 227 code), a firewall that is\n   unaware of the EPSV command would block\
    \ the subsequent data channel\n   setup attempt.  If no data channel connection\
    \ has been established\n   after some time, the FTP server may decide to terminate\
    \ the control\n   channel session in an attempt to leave this ambiguous state.\n\
    \   All 25 tested servers were able to successfully complete a transfer\n   in\
    \ traditional PASV passive mode as required by [RFC1123].  More\n   testing showed\
    \ that the use of an address family argument with the\n   EPSV command is widely\
    \ misimplemented or unimplemented in servers.\n   Additional tests with more servers\
    \ showed that approximately 65% of\n   FTP servers support EPSV successfully and\
    \ around 96% support PASV\n   successfully.  Clients were not extensively tested,\
    \ but the author's\n   previous experience suggests that most clients support\
    \ PASV, with the\n   notable exception of the command line client included with\
    \ Windows,\n   which only supports active mode.  This FTP client uses the original\n\
    \   PORT command when running over IPv4 and EPRT when running over IPv6.\n   Although\
    \ these issues can and should be addressed by modifying\n   clients and servers\
    \ to support EPSV successfully, such modifications\n   may not appear widely in\
    \ a timely fashion.  Also, network operators\n   who may want to deploy IPv6-to-IPv4\
    \ translation generally do not have\n   control over client or server implementations.\
    \  As such, this\n   document standardizes an FTP Application Layer Gateway (ALG)\
    \ that\n   will allow unmodified IPv6 FTP clients to interact with unmodified\n\
    \   IPv4 FTP servers successfully when using FTP for simple file\n   transfers\
    \ between a single client and a single server.\n   Clients that want to engage\
    \ in more complex behavior, such as server-\n   to-server transfers, may make\
    \ an FTP Application Layer Gateway (ALG)\n   go into transparent mode by issuing\
    \ the ALGS command as explained in\n   Section 5.\n   The recommendations and\
    \ specifications in this document apply to all\n   forms of IPv6-to-IPv4 translation,\
    \ including stateless translation\n   such as [RFC6145] as well as stateful translation\
    \ such as [RFC6146].\n   This documentation does not deal with the LPRT and LPSV\
    \ commands\n   specified in [RFC1639] as these commands do not appear to be in\n\
    \   significant use.\n"
- title: 2.  Notational Conventions
  contents:
  - "2.  Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 3.  Terminology
  contents:
  - "3.  Terminology\n   Within the context of this document, the words \"client\"\
    \ and \"server\"\n   refer to FTP client and server implementations, respectively.\
    \  An FTP\n   server is understood to be an implementation of the FTP protocol\n\
    \   running on a server system with a stable address, waiting for clients\n  \
    \ to connect and issue commands that eventually start data transfers.\n   Clients\
    \ interact with servers using the FTP protocol; they store\n   (upload) files\
    \ to and retrieve (download) files from one or more\n   servers.  This either\
    \ happens interactively under control of a user\n   or is done as an unattended\
    \ background process.  Most operating\n   systems provide a web browser that implements\
    \ a basic FTP client as\n   well as a command line client.  Third-party FTP clients\
    \ are also\n   widely available.\n   Other terminology is derived from the documents\
    \ listed in the\n   References section.  Note that this document cannot be fully\n\
    \   understood on its own; it depends on background and terminology\n   outlined\
    \ in the references.\n"
- title: 4.  ALG Overview
  contents:
  - "4.  ALG Overview\n   The most robust way to solve an IP version mismatch between\
    \ FTP\n   clients and FTP servers would be by changing clients and servers\n \
    \  rather than using an IPv6-to-IPv4 translator for the data channel and\n   using\
    \ an Application Layer Gateway on the control channel.  As such,\n   it is recommended\
    \ to update FTP clients and servers as required for\n   IPv6-to-IPv4 translation\
    \ support where possible to allow proper\n   operation of the FTP protocol without\
    \ the need for ALGs.\n   On the other hand, network operators or even network\
    \ administrators\n   within an organization often have little influence over the\
    \ FTP\n   client and server implementations used over the network.  For those\n\
    \   operators and administrators, deploying an ALG may be the only way to\n  \
    \ provide a satisfactory customer experience.  So, even though not the\n   preferred\
    \ solution, this document standardizes the functionality of\n   such an ALG in\
    \ order to promote consistent behavior between ALGs in\n   an effort to minimize\
    \ their harmful effects.\n   Operators and administrators are encouraged to only\
    \ deploy an FTP ALG\n   for IPv6-to-IPv4 translation when the FTP ALG is clearly\
    \ needed.  In\n   the presence of the ALG, EPSV commands that could be handled\
    \ directly\n   by conforming servers are translated into PASV commands, introducing\n\
    \   additional complexity and reducing robustness.  As such, a \"set and\n   forget\"\
    \ policy on ALGs is not recommended.\n   Note that the translation of EPSV through\
    \ all translators and EPRT\n   through a stateless translator is relatively simple,\
    \ but supporting\n   translation of EPRT through a stateful translator is relatively\n\
    \   difficult, because in the latter case, a translation mapping must be\n   set\
    \ up for each data transfer using parameters that must be learned\n   from the\
    \ client/server interaction over the control channel.  This\n   needs to happen\
    \ before the EPRT command can be translated into a PORT\n   command and passed\
    \ on to the server.  As such, an ALG used with a\n   stateful translator MUST\
    \ support EPSV translation and MAY support\n   EPRT translation.  However, an\
    \ ALG used with a stateless translator\n   MUST support EPSV translation and SHOULD\
    \ also support EPRT\n   translation.\n   The ALG functionality is described as\
    \ a function separate from the\n   IPv6-to-IPv4 translation function.  However,\
    \ in the case of EPRT\n   translation, the ALG and translator functions need to\
    \ be tightly\n   coupled, so if EPRT translation is supported, it is assumed that\
    \ the\n   ALG and IPv6-to-IPv4 translation functions are integrated within a\n\
    \   single device.\n"
- title: 5.  Control Channel Translation
  contents:
  - "5.  Control Channel Translation\n   The IPv6-to-IPv4 FTP ALG intercepts all TCP\
    \ sessions towards port 21\n   for IPv6 destination addresses that map to IPv4\
    \ destinations\n   reachable through an IPv6-to-IPv4 translator.  The FTP ALG\
    \ implements\n   the Telnet protocol ([RFC0854]), used for control channel\n \
    \  interactions, to the degree necessary to interpret commands and\n   responses\
    \ and re-issue those commands and responses, modifying them\n   as outlined below.\
    \  Telnet option negotiation attempts by either the\n   client or the server,\
    \ except for those allowed by [RFC1123], MUST be\n   refused by the FTP ALG without\
    \ relaying those attempts.  For the\n   purpose of Telnet option negotiation,\
    \ an FTP ALG MUST follow the\n   behavior of an FTP server as specified in [RFC1123],\
    \ Section\n   4.1.2.12.  This avoids the situation where the client and the server\n\
    \   negotiate Telnet options that are unimplemented by the FTP ALG.\n   There\
    \ are two ways to implement the control channel ALG:\n   1.  The ALG terminates\
    \ the IPv6 TCP session, sets up a new IPv4 TCP\n       session towards the IPv4\
    \ FTP server, and relays commands and\n       responses back and forth between\
    \ the two sessions.\n   2.  Packets that are part of the control channel are translated\n\
    \       individually.\n   As they ultimately provide the same result, either implementation\n\
    \   strategy, or any other that is functionally equivalent, can be used.\n   In\
    \ the second case, an implementation MUST have the ability to track\n   and update\
    \ TCP sequence numbers when translating packets as well as\n   the ability to\
    \ break up packets into smaller packets after\n   translation, as the control\
    \ channel translation could modify the\n   length of the payload portion of the\
    \ packets in question.  Also, FTP\n   commands/responses or Telnet negotiations\
    \ could straddle packet\n   boundaries, so in order to be able to perform the\
    \ ALG function, it\n   can prove necessary to reconstitute Telnet negotiations\
    \ and FTP\n   commands and responses from multiple packets.\n   Some FTP clients\
    \ use the TCP urgent data feature when interrupting\n   transfers.  An ALG MUST\
    \ either maintain the semantics of the urgent\n   pointer when translating control\
    \ channel interactions, even when\n   crossing packet boundaries, or clear the\
    \ URG bit in the TCP header.\n   If the client issues the AUTH command, then the\
    \ client is attempting\n   to negotiate [RFC2228] security mechanisms that are\
    \ likely to be\n   incompatible with the FTP ALG function.  For instance, if the\
    \ client\n   attempts to negotiate Transport Layer Security (TLS) protection of\n\
    \   the control channel ([RFC4217]), an ALG can do one of three things:\n   1.\
    \  Transparently copy data transmitted over the control channel back\n       and\
    \ forth, so the TLS session works as expected but the client\n       commands\
    \ and server responses are now hidden from the ALG.\n   2.  Block the negotiation\
    \ of additional security, which will likely\n       make the client and/or the\
    \ server break off the session, or if\n       not, perform actions in the clear\
    \ that were supposed to be\n       encrypted.\n   3.  Negotiate with both the\
    \ client and the server so two separate\n       protected sessions are set up\
    \ and the ALG is still able to modify\n       client commands and server responses.\
    \  Again, clients and servers\n       are likely to reject the session because\
    \ this will be perceived\n       as a man-in-the-middle attack.\n   An ALG MUST\
    \ adopt the first option and allow a client and a server to\n   negotiate security\
    \ mechanisms.  To ensure consistent behavior, as\n   soon as the initial AUTH\
    \ command is issued by the client, an ALG MUST\n   stop translating commands and\
    \ responses, and start transparently\n   copying TCP data sent by the server to\
    \ the client and vice versa.\n   The ALG SHOULD ignore the AUTH command and not\
    \ go into transparent\n   mode if the server response is in the 4xx or 5xx ranges.\n\
    \   It is possible that commands or responses that were sent through the\n   ALG\
    \ before the AUTH command was issued were changed in length so TCP\n   sequence\
    \ numbers in packets entering the ALG and packets exiting the\n   ALG no longer\
    \ match.  In transparent mode, the ALG MUST continue to\n   adjust sequence numbers\
    \ if it was doing so before entering\n   transparent mode as the result of the\
    \ AUTH command.  The ALGS command\n   (Section 11) can also be used to disable\
    \ the ALG functionality, but\n   the control channel MUST then still be monitored\
    \ for subsequent ALGS\n   commands that re-enable the ALG functionality.\n"
- title: 5.1.  Language Negotiation
  contents:
  - "5.1.  Language Negotiation\n   [RFC2640] specifies the ability for clients and\
    \ servers to negotiate\n   the language used between the two of them in the descriptive\
    \ text\n   that accompanies server response codes.  Ideally, IPv6-to-IPv4 FTP\n\
    \   ALGs would support this feature, so that if a non-default language is\n  \
    \ negotiated by a client and a server, the ALG also transmits its text\n   messages\
    \ for translated responses in the negotiated language.\n   However, even if the\
    \ ALG supports negotiation of the feature, there\n   is no way to make sure that\
    \ the ALG has text strings for all possible\n   languages.  Thus, the situation\
    \ where the client and server try to\n   negotiate a language not supported by\
    \ the ALG is unavoidable.  The\n   proper behavior for an FTP ALG in this situation\
    \ may be addressed in\n   a future specification, as the same issue is present\
    \ in IPv4-to-IPv4\n   FTP ALGs.  For the time being, ALG implementations MAY employ\
    \ one of\n   the following strategies regarding LANG negotiation:\n   1.  Monitor\
    \ LANG negotiation and send text in the negotiated language\n       if text in\
    \ that language is available.  If not, text is sent in\n       the default language.\n\
    \   2.  Not monitor LANG negotiation.  Text is sent in the default\n       language.\n\
    \   3.  Block LANG negotiation by translating the LANG command to a NOOP\n   \
    \    command and translating the resulting 200 response into a 502\n       response,\
    \ which is appropriate for unsupported commands.  Text is\n       sent in the\
    \ default language.\n   In the first two cases, if a language is negotiated, text\
    \ transmitted\n   by the client or the server MUST be assumed to be encoded in\
    \ UTF-8\n   [RFC3629] rather than be limited to 7-bit ASCII.  An ALG that\n  \
    \ implements the first or second option MUST translate and/or forward\n   commands\
    \ and responses containing UTF-8-encoded text when those\n   occur.  The ALG itself\
    \ MUST NOT generate characters outside the 7-bit\n   ASCII range unless it implements\
    \ the first option and a language was\n   negotiated.\n   Note that Section 3.1\
    \ of [RFC2640] specifies new handling for spaces\n   and the carriage return (CR)\
    \ character in pathnames.  ALGs that do\n   not block LANG negotiation SHOULD\
    \ comply with the specified rules for\n   path handling.  Implementers should\
    \ especially note that the NUL\n   (%x00) character is used as an escape whenever\
    \ a CR character occurs\n   in a pathname.\n   In the sections that follow, a\
    \ number of well-known response numbers\n   are shown, along with the descriptive\
    \ text that is associated with\n   that response number.  However, this text is\
    \ not part of the\n   specification of the response.  As such, implementations\
    \ MAY use the\n   response text shown, or they MAY show a different response text\
    \ for a\n   given response number.  Requirements language only applies to the\n\
    \   response number.\n"
- title: 6.  EPSV to PASV Translation
  contents:
  - "6.  EPSV to PASV Translation\n   Although many IPv4 FTP servers support the EPSV\
    \ command, some servers\n   react adversely to this command (see Section 1 for\
    \ examples), and\n   there is no reliable way to detect in advance that this will\
    \ happen.\n   As such, an FTP ALG SHOULD translate all occurrences of the EPSV\n\
    \   command issued by the client to the PASV command and reformat a 227\n   response\
    \ as a corresponding 229 response.  However, an ALG MAY forego\n   EPSV to PASV\
    \ translation if it has positive knowledge, either gained\n   through administrative\
    \ configuration or learned dynamically, that\n   EPSV will be successful without\
    \ translation to PASV.\n   For instance, if the client issues EPSV (or EPSV 2\
    \ to indicate IPv6\n   as the network protocol), this is translated to the PASV\
    \ command.  If\n   the server with address 192.0.2.31 then responds with:\n  \
    \    227 Entering Passive Mode (192,0,2,31,237,19)\n   The FTP ALG reformats this\
    \ as:\n      229 Entering Extended Passive Mode (|||60691|)\n   The ALG SHOULD\
    \ ignore the IPv4 address in the server's 227 response.\n   This is the behavior\
    \ that is exhibited by most clients and is needed\n   to work with servers that\
    \ include [RFC1918] addresses in their 227\n   responses.  However, if the 227\
    \ response contains an IPv4 address\n   that does not match the destination of\
    \ the control channel, the FTP\n   ALG MAY send a 425 response to the client instead\
    \ of the 229\n   response, for example:\n      425 Can't open data connection\n\
    \   It is important that the response is in the 4xx range to indicate a\n   temporary\
    \ condition.\n   If the client issues an EPSV command with a numeric argument\
    \ other\n   than 2, the ALG MUST NOT pass the command on to the server but rather\n\
    \   respond with a 522 error, for example:\n      522 Network protocol not supported\n\
    \   If the client issues EPSV ALL, the FTP ALG MUST NOT pass this command\n  \
    \ to the server, but respond with a 504 error, for example:\n      504 Command\
    \ not implemented for that parameter\n   This avoids the situation where an FTP\
    \ server reacts adversely to\n   receiving a PASV command after the client used\
    \ the EPSV ALL command\n   to indicate that it will only use EPSV during this\
    \ session.\n"
- title: 7.  EPRT to PORT Translation
  contents:
  - "7.  EPRT to PORT Translation\n   Should the IPv6 client issue an EPRT command,\
    \ the FTP ALG MAY\n   translate this EPRT command to a PORT command.  The translation\
    \ is\n   different depending on whether the translator is a stateless one-to-\n\
    \   one translator or a stateful one-to-many translator.\n"
- title: 7.1.  Stateless EPRT Translation
  contents:
  - "7.1.  Stateless EPRT Translation\n   If the address specified in the EPRT command\
    \ is the IPv6 address used\n   by the client for the control channel session,\
    \ then the FTP ALG\n   reformats the EPRT command into a PORT command with the\
    \ IPv4 address\n   that maps to the client's IPv6 address.  The port number MUST\
    \ be\n   preserved for compatibility with stateless translators.  For\n   instance,\
    \ if the client with IPv6 address 2001:db8:2::31 issues the\n   following EPRT\
    \ command:\n      EPRT |2|2001:db8:2::31|5282|\n   Assuming the IPv4 address that\
    \ goes with 2001:db8:2::31 is\n   192.0.2.31, the FTP ALG reformats this as:\n\
    \      PORT 192,0,2,31,20,162\n   If the address specified in the EPRT command\
    \ is an IPv4 address or an\n   IPv6 address that is not the IPv6 address used\
    \ by the client for the\n   control session, the ALG SHOULD NOT attempt any translation\
    \ but pass\n   along the command unchanged.\n"
- title: 7.2.  Stateful EPRT Translation
  contents:
  - "7.2.  Stateful EPRT Translation\n   If the address in the EPRT command is the\
    \ IPv6 address used by the\n   client for the control channel, the stateful translator\
    \ selects an\n   unused port number in combination with the IPv4 address used\
    \ for the\n   control channel towards the FTP server and sets up a mapping from\n\
    \   that transport address to the one specified by the client in the EPRT\n  \
    \ command.  The PORT command with the IPv4 address and port used on the\n   IPv4\
    \ side of the mapping is only issued towards the server once the\n   mapping is\
    \ created.  Initially, the mapping is such that either any\n   transport address\
    \ or the FTP server's IPv4 address with any port\n   number is accepted as a source,\
    \ but once the three-way handshake is\n   complete, the mapping SHOULD be narrowed\
    \ to only match the negotiated\n   TCP session.\n   If the address specified in\
    \ the EPRT command is an IPv4 address or an\n   IPv6 address that is not the IPv6\
    \ address used by the client for the\n   control session, the ALG SHOULD NOT attempt\
    \ any translation but pass\n   along the command unchanged.\n   If the client\
    \ with IPv6 address 2001:db8:2::31 issues the EPRT\n   command:\n      EPRT |2|2001:db8:2::31|5282|\n\
    \   And the stateful translator uses the address 192.0.2.31 on its IPv4\n   interface,\
    \ a mapping with destination address 192.0.2.31 and\n   destination port 60192\
    \ towards 2001:db8:2::31 port 5282 may be\n   created, after which the FTP ALG\
    \ reformats the EPRT command as:\n      PORT 192,0,2,31,235,32\n"
- title: 8.  Default Port 20 Translation
  contents:
  - "8.  Default Port 20 Translation\n   If the client does not issue an EPSV/PASV\
    \ or EPRT/PORT command prior\n   to initiating a file transfer, it is invoking\
    \ the default active FTP\n   behavior where the server sets up a TCP session towards\
    \ the client.\n   In this situation, the source port number is the default FTP\
    \ data\n   port (port 20), and the destination port is the port the client uses\n\
    \   as the source port for the control channel session.\n   In the case of a stateless\
    \ translator, this does not pose any\n   problems.  In the case of a stateful\
    \ translator, the translator MAY\n   accept incoming connection requests from\
    \ the server on the IPv4 side\n   if the transport addresses match that of an\
    \ existing FTP control\n   channel session, with the exception that the control\
    \ channel session\n   uses port 21 and the new session port 20.  In this case,\
    \ a mapping is\n   set up towards the same transport address on the IPv6 side\
    \ that is\n   used for the matching FTP control channel session.\n   An ALG/translator\
    \ MAY monitor the progress of FTP control channels\n   and only attempt to perform\
    \ a mapping when an FTP client has started\n   a file transfer without issuing\
    \ the EPSV, PASV, EPRT, or PORT\n   commands.\n"
- title: 9.  Both PORT and PASV
  contents:
  - "9.  Both PORT and PASV\n   [RFC0959] allows a client to issue both PORT and PASV\
    \ to use non-\n   default ports on both sides of the connection.  However, this\
    \ is\n   incompatible with the notion that with PASV, the data connection is\n\
    \   made from the client to the server, while PORT reaffirms the default\n   behavior\
    \ where the server connects to the client.  As such, the\n   behavior of an ALG\
    \ is undefined when a client issues both PASV and\n   PORT.  Implementations SHOULD\
    \ NOT try to detect the situation where\n   both PASV and PORT commands are issued\
    \ prior to a command that\n   initiates a transfer, but rather, translate commands\
    \ as they occur.\n   So, if a client issues PASV, PASV is then translated to EPSV.\
    \  If\n   after that, but before any transfers have occurred, the client issues\n\
    \   PORT and the ALG supports PORT translation for this session, the ALG\n   translates\
    \ PORT to EPRT.\n"
- title: 10.  Default Behavior
  contents:
  - "10.  Default Behavior\n   Whenever the client issues a command that the ALG is\
    \ not set up to\n   translate (because the command is not specified in this document,\
    \ the\n   command is not part of any FTP specification, the ALG functionality\n\
    \   is disabled administratively for the command in question, or\n   translation\
    \ does not apply for any other reason), the command MUST be\n   passed on to the\
    \ server without modification, and the server response\n   MUST be passed on to\
    \ the client without modification.  For example,\n   if the client issues the\
    \ PASV command, this command is passed on to\n   the server transparently, and\
    \ the server's response is passed on to\n   the client transparently.\n"
- title: 11.  The ALGS Command
  contents:
  - "11.  The ALGS Command\n   ALGs MUST support the new ALGS (ALG status) command\
    \ that allows\n   clients to query and set the ALG's status.  FTP servers (as\
    \ opposed\n   to ALGs) MUST NOT perform any actions upon receiving the ALGS\n\
    \   command.  However, FTP servers MUST still send a response.  If FTP\n   servers\
    \ recognize the ALGS command, the best course of action would\n   be to return\
    \ a 202 response:\n      202 Command not implemented, superfluous at this site\n\
    \   However, there is no reason for FTP servers to specifically recognize\n  \
    \ this command; returning any 50x response that is normally returned\n   when\
    \ commands are not recognized is appropriate.\n   A client can use the ALGS command\
    \ to request the ALG's status and to\n   enable and disable EPSV to PASV translation\
    \ and, if implemented, EPRT\n   to PORT translation.  There are three possible\
    \ arguments to the ALGS\n   command:\n   ALGS STATUS64   The ALG is requested\
    \ to return the EPSV and EPRT\n                   translation status.\n   ALGS\
    \ ENABLE64   The ALG is requested to enable translation.\n   ALGS DISABLE64  The\
    \ ALG is requested to disable translation.\n   The ALG MUST enable or disable\
    \ EPSV to PASV translation as requested.\n   If EPRT to PORT translation is supported,\
    \ ALGS ENABLE64 SHOULD enable\n   it, and ALGS DISABLE64 MUST disable it along\
    \ with enabling or\n   disabling EPSV to PASV translation, respectively.  If EPRT\
    \ to PORT\n   translation is not supported, ALGS ENABLE64 only enables EPSV to\
    \ PASV\n   translation.  After an ALGS command with any of the three supported\n\
    \   arguments, the ALG MUST return a 216 response indicating the type of\n   translation\
    \ that will be performed.\n   216 NONE        Neither EPSV nor EPRT translation\
    \ is performed.\n   216 EPSV        EPSV is translated to PASV; no EPRT translation\
    \ is\n                   performed.\n   216 EPSVEPRT    EPSV is translated to\
    \ PASV; EPRT is translated to\n                   PORT.\n   The translation type\
    \ MAY be followed by a space and additional\n   descriptive text until end-of-line.\
    \  If the ALG is unable to set the\n   requested translation mode, for instance,\
    \ because of lack of certain\n   resources, this is not considered an error condition.\
    \  In those\n   cases, the ALG returns a 216 response followed by the keyword\
    \ that\n   indicates the current translation status of the ALG.\n   If there is\
    \ no argument to the ALGS command, or the argument is not\n   one of STATUS64,\
    \ ENABLE64, or DISABLE64 (or an argument specified by\n   a supported newer document),\
    \ a 504 or 502 error SHOULD be returned.\n   The Augmented Backus-Naur Form (ABNF)\
    \ notation (see [RFC5234]) of the\n   ALGS command and its response are as follows:\n\
    \   algs-command      = \"ALGS\" SP algs-token CRLF\n   algs-token        = \"\
    STATUS64\" / \"ENABLE64\" / \"DISABLE64\"\n   algs-response     = (ok-response\
    \ / error-response) CRLF\n   ok-response       = \"216\" SP response-token [ freetext\
    \ ]\n   response-token    = \"NONE\" / \"EPSV\" / \"EPSVEPRT\"\n   error-response\
    \    = not-implemented / invalid-parameter\n   not-implemented   = \"502\" [ freetext\
    \ ]\n   invalid-parameter = \"504\" [ freetext ]\n   freetext          = (SP *VCHAR)\n"
- title: 12.  Timeouts and Translating to NOOP
  contents:
  - "12.  Timeouts and Translating to NOOP\n   Wherever possible, control channels\
    \ SHOULD NOT time out while there\n   is an active data channel.  A timeout of\
    \ at least 30 seconds is\n   RECOMMENDED for data channel mappings created by\
    \ the FTP ALG that are\n   waiting for initial packets.\n   Whenever a command\
    \ from the client is not propagated to the server,\n   the FTP ALG instead issues\
    \ a NOOP command in order to keep the\n   keepalive state between the client and\
    \ the server synchronized.  The\n   response to the NOOP command MUST NOT be relayed\
    \ back to the client.\n   An implementation MAY wait for the server to return\
    \ the 200 response\n   to the NOOP command and translate that 200 response into\
    \ the response\n   the ALG is required to return to the client.  This way, the\
    \ ALG never\n   has to create new packets to send to the client, but it can limit\n\
    \   itself to modifying packets transmitted by the server.  If the server\n  \
    \ responds with something other than a 200 response to the NOOP\n   command, the\
    \ ALG SHOULD tear down the control channel session and log\n   an error.\n"
- title: 13.  IANA Considerations
  contents:
  - "13.  IANA Considerations\n   IANA has added the following entry to the \"FTP\
    \ Commands and\n   Extensions\" registry:\n   Command Name               ALGS\n\
    \   FEAT Code                  -N/A-\n   Description                FTP64 ALG\
    \ status\n   Command Type               -N/A-\n   Conformance Requirements   o\n\
    \   Reference                  RFC 6384 Section 11\n"
- title: 14.  Security Considerations
  contents:
  - "14.  Security Considerations\n   In the majority of cases, FTP is used without\
    \ further security\n   mechanisms.  This allows an attacker with passive interception\n\
    \   capabilities to obtain the login credentials and an attacker that can\n  \
    \ modify packets to change the data transferred.  However, FTP can be\n   used\
    \ with TLS in order to solve these issues.  IPv6-to-IPv4\n   translation and the\
    \ FTP ALG do not impact the security issues in the\n   former case nor the use\
    \ of TLS in the latter case.  However, if FTP\n   is used with TLS as per [RFC4217],\
    \ or another authentication\n   mechanism that the ALG is aware of, the ALG function\
    \ is not performed\n   so only passive transfers from a server that implements\
    \ EPSV or a\n   client that supports PASV will succeed.\n   For general FTP security\
    \ considerations, see [RFC2577].\n"
- title: 15.  Contributors
  contents:
  - "15.  Contributors\n   Dan Wing, Kentaro Ebisawa, Remi Denis-Courmont, Mayuresh\
    \ Bakshi,\n   Sarat Kamisetty, Reinaldo Penno, Alun Jones, Dave Thaler, Mohammed\n\
    \   Boucadair, Mikael Abrahamsson, Dapeng Liu, Michael Liu, Andrew\n   Sullivan,\
    \ Anthony Bryan, Ed Jankiewicz Pekka Savola, Fernando Gont,\n   Rockson Li, and\
    \ Donald Eastlake contributed ideas and comments.  Dan\n   Wing's experiments\
    \ with a large number of FTP servers were very\n   illuminating; many of the choices\
    \ underlying this document are based\n   on his results.\n"
- title: 16.  Acknowledgements
  contents:
  - "16.  Acknowledgements\n   Iljitsch van Beijnum is partly funded by Trilogy, a\
    \ research project\n   supported by the European Commission under its Seventh\
    \ Framework\n   Program.\n"
- title: 17.  References
  contents:
  - '17.  References

    '
- title: 17.1.  Normative References
  contents:
  - "17.1.  Normative References\n   [RFC0854]  Postel, J. and J. Reynolds, \"Telnet\
    \ Protocol\n              Specification\", STD 8, RFC 854, May 1983.\n   [RFC0959]\
    \  Postel, J. and J. Reynolds, \"File Transfer Protocol\",\n              STD\
    \ 9, RFC 959, October 1985.\n   [RFC1123]  Braden, R., \"Requirements for Internet\
    \ Hosts - Application\n              and Support\", STD 3, RFC 1123, October 1989.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2228]  Horowitz,\
    \ M., \"FTP Security Extensions\", RFC 2228,\n              October 1997.\n  \
    \ [RFC2428]  Allman, M., Ostermann, S., and C. Metz, \"FTP Extensions\n      \
    \        for IPv6 and NATs\", RFC 2428, September 1998.\n   [RFC3629]  Yergeau,\
    \ F., \"UTF-8, a transformation format of ISO\n              10646\", STD 63,\
    \ RFC 3629, November 2003.\n   [RFC5234]  Crocker, D. and P. Overell, \"Augmented\
    \ BNF for Syntax\n              Specifications: ABNF\", STD 68, RFC 5234, January\
    \ 2008.\n"
- title: 17.2.  Informative References
  contents:
  - "17.2.  Informative References\n   [RFC1639]  Piscitello, D., \"FTP Operation\
    \ Over Big Address Records\n              (FOOBAR)\", RFC 1639, June 1994.\n \
    \  [RFC1918]  Rekhter, Y., Moskowitz, R., Karrenberg, D., Groot, G., and\n   \
    \           E. Lear, \"Address Allocation for Private Internets\",\n         \
    \     BCP 5, RFC 1918, February 1996.\n   [RFC2389]  Hethmon, P. and R. Elz, \"\
    Feature negotiation mechanism for\n              the File Transfer Protocol\"\
    , RFC 2389, August 1998.\n   [RFC2577]  Allman, M. and S. Ostermann, \"FTP Security\n\
    \              Considerations\", RFC 2577, May 1999.\n   [RFC2640]  Curtin, B.,\
    \ \"Internationalization of the File Transfer\n              Protocol\", RFC 2640,\
    \ July 1999.\n   [RFC4217]  Ford-Hutchinson, P., \"Securing FTP with TLS\", RFC\
    \ 4217,\n              October 2005.\n   [RFC6145]  Li, X., Bao, C., and F. Baker,\
    \ \"IP/ICMP Translation\n              Algorithm\", RFC 6145, April 2011.\n  \
    \ [RFC6146]  Bagnulo, M., Matthews, P., and I. van Beijnum, \"Stateful\n     \
    \         NAT64: Network Address and Protocol Translation from IPv6\n        \
    \      Clients to IPv4 Servers\", RFC 6146, April 2011.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Iljitsch van Beijnum\n   Institute IMDEA Networks\n   Avda.\
    \ del Mar Mediterraneo, 22\n   Leganes, Madrid  28918\n   Spain\n   EMail: iljitsch@muada.com\n"
