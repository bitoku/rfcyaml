- title: __initial_text__
  contents:
  - "                        PKCS #1: RSA Encryption\n                           \
    \   Version 1.5\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: Overview
  contents:
  - "Overview\n   This document describes a method for encrypting data using the RSA\n\
    \   public-key cryptosystem.\n"
- title: 1. Scope
  contents:
  - "1. Scope\n   This document describes a method for encrypting data using the RSA\n\
    \   public-key cryptosystem. Its intended use is in the construction of\n   digital\
    \ signatures and digital envelopes, as described in PKCS #7:\n        o    For\
    \ digital signatures, the content to be signed\n             is first reduced\
    \ to a message digest with a\n             message-digest algorithm (such as MD5),\
    \ and then\n             an octet string containing the message digest is\n  \
    \           encrypted with the RSA private key of the signer\n             of\
    \ the content. The content and the encrypted\n             message digest are\
    \ represented together according\n             to the syntax in PKCS #7 to yield\
    \ a digital\n             signature. This application is compatible with\n   \
    \          Privacy-Enhanced Mail (PEM) methods.\n        o    For digital envelopes,\
    \ the content to be enveloped\n             is first encrypted under a content-encryption\
    \ key\n             with a content-encryption algorithm (such as DES),\n     \
    \        and then the content-encryption key is encrypted\n             with the\
    \ RSA public keys of the recipients of the\n             content. The encrypted\
    \ content and the encrypted\n             content-encryption key are represented\
    \ together\n             according to the syntax in PKCS #7 to yield a\n     \
    \        digital envelope. This application is also\n             compatible with\
    \ PEM methods.\n   The document also describes a syntax for RSA public keys and\
    \ private\n   keys. The public-key syntax would be used in certificates; the\n\
    \   private-key syntax would be used typically in PKCS #8 private-key\n   information.\
    \ The public-key syntax is identical to that in both X.509\n   and Privacy-Enhanced\
    \ Mail.  Thus X.509/PEM RSA keys can be used in\n   this document.\n   The document\
    \ also defines three signature algorithms for use in\n   signing X.509/PEM certificates\
    \ and certificate-revocation lists, PKCS\n   #6 extended certificates, and other\
    \ objects employing digital\n   signatures such as X.401 message tokens.\n   Details\
    \ on message-digest and content-encryption algorithms are\n   outside the scope\
    \ of this document, as are details on sources of the\n   pseudorandom bits required\
    \ by certain methods in this document.\n"
- title: 2. References
  contents:
  - "2. References\n   FIPS PUB 46-1  National Bureau of Standards. FIPS PUB 46-1:\n\
    \             Data Encryption Standard. January 1988.\n   PKCS #6   RSA Laboratories.\
    \ PKCS #6: Extended-Certificate\n             Syntax. Version 1.5, November 1993.\n\
    \   PKCS #7   RSA Laboratories. PKCS #7: Cryptographic Message\n             Syntax.\
    \ Version 1.5, November 1993.\n   PKCS #8   RSA Laboratories. PKCS #8: Private-Key\
    \ Information\n             Syntax. Version 1.2, November 1993.\n   RFC 1319 \
    \ Kaliski, B., \"The MD2 Message-Digest\n             Algorithm,\" RFC 1319, April\
    \ 1992.\n   RFC 1320  Rivest, R., \"The MD4 Message-Digest\n             Algorithm,\"\
    \ RFC 1320, April 1992.\n   RFC 1321  Rivest, R., \"The MD5 Message-Digest\n \
    \            Algorithm,\" RFC 1321, April 1992.\n   RFC 1423  Balenson, D., \"\
    Privacy Enhancement for\n             Internet Electronic Mail: Part III: Algorithms,\n\
    \             Modes, and Identifiers,\" RFC 1423, February 1993.\n   X.208   \
    \  CCITT. Recommendation X.208: Specification of\n             Abstract Syntax\
    \ Notation One (ASN.1). 1988.\n   X.209     CCITT. Recommendation X.209: Specification\
    \ of\n             Basic Encoding Rules for Abstract Syntax Notation\n       \
    \      One (ASN.1). 1988.\n   X.411     CCITT. Recommendation X.411: Message Handling\n\
    \             Systems: Message Transfer System: Abstract Service\n           \
    \  Definition and Procedures.1988.\n   X.509     CCITT. Recommendation X.509:\
    \ The Directory--\n             Authentication Framework. 1988.\n   [dBB92]  \
    \ B. den Boer and A. Bosselaers. An attack on the\n             last two rounds\
    \ of MD4. In J. Feigenbaum, editor,\n             Advances in Cryptology---CRYPTO\
    \ '91 Proceedings,\n             volume 576 of Lecture Notes in Computer Science,\n\
    \             pages 194-203. Springer-Verlag, New York, 1992.\n   [dBB93]   B.\
    \ den Boer  and A. Bosselaers. Collisions for the\n             compression function\
    \ of MD5. Presented at\n             EUROCRYPT '93 (Lofthus, Norway, May 24-27,\
    \ 1993).\n   [DO86]    Y. Desmedt and A.M. Odlyzko. A chosen text attack\n   \
    \          on the RSA cryptosystem and some discrete\n             logarithm schemes.\
    \ In H.C. Williams, editor,\n             Advances in Cryptology---CRYPTO '85\
    \ Proceedings,\n             volume 218 of Lecture Notes in Computer Science,\n\
    \             pages 516-521. Springer-Verlag, New York, 1986.\n   [Has88]   Johan\
    \ Hastad. Solving simultaneous modular\n             equations. SIAM Journal on\
    \ Computing,\n             17(2):336-341, April 1988.\n   [IM90]    Colin I'Anson\
    \ and Chris Mitchell. Security defects\n             in CCITT Recommendation X.509--The\
    \ directory\n             authentication framework. Computer Communications\n\
    \             Review, :30-34, April 1990.\n   [Mer90]   R.C. Merkle. Note on MD4.\
    \ Unpublished manuscript,\n             1990.\n   [Mil76]   G.L. Miller. Riemann's\
    \ hypothesis and tests for\n             primality. Journal of Computer and Systems\n\
    \             Sciences, 13(3):300-307, 1976.\n   [QC82]    J.-J. Quisquater and\
    \ C. Couvreur. Fast\n             decipherment algorithm for RSA public-key\n\
    \             cryptosystem. Electronics Letters, 18(21):905-907,\n           \
    \  October 1982.\n   [RSA78]   R.L. Rivest, A. Shamir, and L. Adleman. A method\n\
    \             for obtaining digital signatures and public-key\n             cryptosystems.\
    \ Communications of the ACM,\n             21(2):120-126, February 1978.\n"
- title: 3. Definitions
  contents:
  - "3. Definitions\n   For the purposes of this document, the following definitions\
    \ apply.\n   AlgorithmIdentifier: A type that identifies an algorithm (by object\n\
    \   identifier) and associated parameters. This type is defined in X.509.\n  \
    \ ASN.1: Abstract Syntax Notation One, as defined in X.208.\n   BER: Basic Encoding\
    \ Rules, as defined in X.209.\n   DES: Data Encryption Standard, as defined in\
    \ FIPS PUB 46-1.\n   MD2: RSA Data Security, Inc.'s MD2 message-digest algorithm,\
    \ as\n   defined in RFC 1319.\n   MD4: RSA Data Security, Inc.'s MD4 message-digest\
    \ algorithm, as\n   defined in RFC 1320.\n   MD5: RSA Data Security, Inc.'s MD5\
    \ message-digest algorithm, as\n   defined in RFC 1321.\n   modulus: Integer constructed\
    \ as the product of two primes.\n   PEM: Internet Privacy-Enhanced Mail, as defined\
    \ in RFC 1423 and\n   related documents.\n   RSA: The RSA public-key cryptosystem,\
    \ as defined in [RSA78].\n   private key: Modulus and private exponent.\n   public\
    \ key: Modulus and public exponent.\n"
- title: 4. Symbols and abbreviations
  contents:
  - "4. Symbols and abbreviations\n   Upper-case symbols (e.g., BT) denote octet strings\
    \ and bit strings\n   (in the case of the signature S); lower-case symbols (e.g.,\
    \ c) denote\n   integers.\n   ab   hexadecimal octet value  c    exponent\n  \
    \ BT   block type               d    private exponent\n   D    data          \
    \           e    public exponent\n   EB   encryption block         k    length\
    \ of modulus in\n                                        octets\n   ED   encrypted\
    \ data           n    modulus\n   M    message                  p, q  prime factors\
    \ of modulus\n   MD   message digest           x    integer encryption block\n\
    \   MD'  comparative message      y    integer encrypted data\n          digest\n\
    \   PS   padding string           mod n  modulo n\n   S    signature         \
    \       X || Y  concatenation of X, Y\n                                 ||X||\
    \  length in octets of X\n"
- title: 5. General overview
  contents:
  - "5. General overview\n   The next six sections specify key generation, key syntax,\
    \ the\n   encryption process, the decryption process, signature algorithms, and\n\
    \   object identifiers.\n   Each entity shall generate a pair of keys: a public\
    \ key and a private\n   key. The encryption process shall be performed with one\
    \ of the keys\n   and the decryption process shall be performed with the other\
    \ key.\n   Thus the encryption process can be either a public-key operation or\
    \ a\n   private-key operation, and so can the decryption process. Both\n   processes\
    \ transform an octet string to another octet string. The\n   processes are inverses\
    \ of each other if one process uses an entity's\n   public key and the other process\
    \ uses the same entity's private key.\n   The encryption and decryption processes\
    \ can implement either the\n   classic RSA transformations, or variations with\
    \ padding.\n"
- title: 6. Key generation
  contents:
  - "6. Key generation\n   This section describes RSA key generation.\n   Each entity\
    \ shall select a positive integer e as its public exponent.\n   Each entity shall\
    \ privately and randomly select two distinct odd\n   primes p and q such that\
    \ (p-1) and e have no common divisors, and\n   (q-1) and e have no common divisors.\n\
    \   The public modulus n shall be the product of the private prime\n   factors\
    \ p and q:\n                                 n = pq .\n   The private exponent\
    \ shall be a positive integer d such that de-1 is\n   divisible by both p-1 and\
    \ q-1.\n   The length of the modulus n in octets is the integer k satisfying\n\
    \                        2^(8(k-1)) <= n < 2^(8k) .\n   The length k of the modulus\
    \ must be at least 12 octets to accommodate\n   the block formats in this document\
    \ (see Section 8).\n   Notes.\n        1.   The public exponent may be standardized\
    \ in\n             specific applications. The values 3 and F4 (65537) may have\n\
    \             some practical advantages, as noted in X.509 Annex C.\n        2.\
    \   Some additional conditions on the choice of primes\n             may well\
    \ be taken into account in order to deter\n             factorization of the modulus.\
    \ These security conditions\n             fall outside the scope of this document.\
    \ The lower bound on\n             the length k is to accommodate the block formats,\
    \ not for\n             security.\n"
- title: 7. Key syntax
  contents:
  - "7. Key syntax\n   This section gives the syntax for RSA public and private keys.\n"
- title: 7.1 Public-key syntax
  contents:
  - "7.1 Public-key syntax\n   An RSA public key shall have ASN.1 type RSAPublicKey:\n\
    \   RSAPublicKey ::= SEQUENCE {\n     modulus INTEGER, -- n\n     publicExponent\
    \ INTEGER -- e }\n   (This type is specified in X.509 and is retained here for\n\
    \   compatibility.)\n   The fields of type RSAPublicKey have the following meanings:\n\
    \        o    modulus is the modulus n.\n        o    publicExponent is the public\
    \ exponent e.\n"
- title: 7.2 Private-key syntax
  contents:
  - "7.2 Private-key syntax\n   An RSA private key shall have ASN.1 type RSAPrivateKey:\n\
    \   RSAPrivateKey ::= SEQUENCE {\n     version Version,\n     modulus INTEGER,\
    \ -- n\n     publicExponent INTEGER, -- e\n     privateExponent INTEGER, -- d\n\
    \     prime1 INTEGER, -- p\n     prime2 INTEGER, -- q\n     exponent1 INTEGER,\
    \ -- d mod (p-1)\n     exponent2 INTEGER, -- d mod (q-1)\n     coefficient INTEGER\
    \ -- (inverse of q) mod p }\n   Version ::= INTEGER\n   The fields of type RSAPrivateKey\
    \ have the following meanings:\n        o    version is the version number, for\
    \ compatibility\n             with future revisions of this document. It shall\n\
    \             be 0 for this version of the document.\n        o    modulus is\
    \ the modulus n.\n        o    publicExponent is the public exponent e.\n    \
    \    o    privateExponent is the private exponent d.\n        o    prime1 is the\
    \ prime factor p of n.\n        o    prime2 is the prime factor q of n.\n    \
    \    o    exponent1 is d mod (p-1).\n        o    exponent2 is d mod (q-1).\n\
    \        o    coefficient is the Chinese Remainder Theorem\n             coefficient\
    \ q-1 mod p.\n   Notes.\n        1.   An RSA private key logically consists of\
    \ only the\n             modulus n and the private exponent d. The presence of\
    \ the\n             values p, q, d mod (p-1), d mod (p-1), and q-1 mod p is\n\
    \             intended for efficiency, as Quisquater and Couvreur have\n     \
    \        shown [QC82]. A private-key syntax that does not include\n          \
    \   all the extra values can be converted readily to the syntax\n            \
    \ defined here, provided the public key is known, according\n             to a\
    \ result by Miller [Mil76].\n        2.   The presence of the public exponent\
    \ e is intended\n             to make it straightforward to derive a public key\
    \ from the\n             private key.\n"
- title: 8. Encryption process
  contents:
  - "8. Encryption process\n   This section describes the RSA encryption process.\n\
    \   The encryption process consists of four steps: encryption- block\n   formatting,\
    \ octet-string-to-integer conversion, RSA computation, and\n   integer-to-octet-string\
    \ conversion. The input to the encryption\n   process shall be an octet string\
    \ D, the data; an integer n, the\n   modulus; and an integer c, the exponent.\
    \ For a public-key operation,\n   the integer c shall be an entity's public exponent\
    \ e; for a private-\n   key operation, it shall be an entity's private exponent\
    \ d. The output\n   from the encryption process shall be an octet string ED, the\n\
    \   encrypted data.\n   The length of the data D shall not be more than k-11 octets,\
    \ which is\n   positive since the length k of the modulus is at least 12 octets.\n\
    \   This limitation guarantees that the length of the padding string PS\n   is\
    \ at least eight octets, which is a security condition.\n   Notes.\n        1.\
    \   In typical applications of this document to\n             encrypt content-encryption\
    \ keys and message digests, one\n             would have ||D|| <= 30. Thus the\
    \ length of the RSA modulus\n             will need to be at least 328 bits (41\
    \ octets), which is\n             reasonable and consistent with security recommendations.\n\
    \        2.   The encryption process does not provide an\n             explicit\
    \ integrity check to facilitate error detection\n             should the encrypted\
    \ data be corrupted in transmission.\n             However, the structure of the\
    \ encryption block guarantees\n             that the probability that corruption\
    \ is undetected is less\n             than 2-16, which is an upper bound on the\
    \ probability that\n             a random encryption block looks like block type\
    \ 02.\n        3.   Application of private-key operations as defined\n       \
    \      here to data other than an octet string containing a\n             message\
    \ digest is not recommended and is subject to further\n             study.\n \
    \       4.   This document may be extended to handle data of\n             length\
    \ more than k-11 octets.\n"
- title: 8.1 Encryption-block formatting
  contents:
  - "8.1 Encryption-block formatting\n   A block type BT, a padding string PS, and\
    \ the data D shall be\n   formatted into an octet string EB, the encryption block.\n\
    \              EB = 00 || BT || PS || 00 || D .           (1)\n   The block type\
    \ BT shall be a single octet indicating the structure of\n   the encryption block.\
    \ For this version of the document it shall have\n   value 00, 01, or 02. For\
    \ a private- key operation, the block type\n   shall be 00 or 01. For a public-key\
    \ operation, it shall be 02.\n   The padding string PS shall consist of k-3-||D||\
    \ octets. For block\n   type 00, the octets shall have value 00; for block type\
    \ 01, they\n   shall have value FF; and for block type 02, they shall be\n   pseudorandomly\
    \ generated and nonzero. This makes the length of the\n   encryption block EB\
    \ equal to k.\n   Notes.\n        1.   The leading 00 octet ensures that the encryption\n\
    \             block, converted to an integer, is less than the modulus.\n    \
    \    2.   For block type 00, the data D must begin with a\n             nonzero\
    \ octet or have known length so that the encryption\n             block can be\
    \ parsed unambiguously. For block types 01 and\n             02, the encryption\
    \ block can be parsed unambiguously since\n             the padding string PS\
    \ contains no octets with value 00 and\n             the padding string is separated\
    \ from the data D by an octet\n             with value 00.\n        3.   Block\
    \ type 01 is recommended for private-key\n             operations. Block type\
    \ 01 has the property that the\n             encryption block, converted to an\
    \ integer, is guaranteed to\n             be large, which prevents certain attacks\
    \ of the kind\n             proposed by Desmedt and Odlyzko [DO86].\n        4.\
    \   Block types 01 and 02 are compatible with PEM RSA\n             encryption\
    \ of content-encryption keys and message digests\n             as described in\
    \ RFC 1423.\n        5.   For block type 02, it is recommended that the\n    \
    \         pseudorandom octets be generated independently for each\n          \
    \   encryption process, especially if the same data is input to\n            \
    \ more than one encryption process.  Hastad's results [Has88]\n             motivate\
    \ this recommendation.\n        6.   For block type 02, the padding string is\
    \ at least\n             eight octets long, which is a security condition for\n\
    \             public-key operations that prevents an attacker from\n         \
    \    recoving data by trying all possible encryption blocks. For\n           \
    \  simplicity, the minimum length is the same for block type\n             01.\n\
    \        7.   This document may be extended in the future to\n             include\
    \ other block types.\n"
- title: 8.2 Octet-string-to-integer conversion
  contents:
  - "8.2 Octet-string-to-integer conversion\n   The encryption block EB shall be converted\
    \ to an integer x, the\n   integer encryption block. Let EB1, ..., EBk be the\
    \ octets of EB from\n   first to last. Then the integer x shall satisfy\n    \
    \                                 k\n                x =  SUM  2^(8(k-i)) EBi\
    \ .              (2)\n                                   i = 1\n   In other words,\
    \ the first octet of EB has the most significance in\n   the integer and the last\
    \ octet of EB has the least significance.\n   Note. The integer encryption block\
    \ x satisfies 0 <= x <  n since EB1\n   = 00 and 2^(8(k-1)) <= n.\n"
- title: 8.3 RSA computation
  contents:
  - "8.3 RSA computation\n   The integer encryption block x shall be raised to the\
    \ power c modulo\n   n to give an integer y, the integer encrypted data.\n   \
    \                    y = x^c mod n,  0 <= y < n .\n   This is the classic RSA\
    \ computation.\n"
- title: 8.4 Integer-to-octet-string conversion
  contents:
  - "8.4 Integer-to-octet-string conversion\n   The integer encrypted data y shall\
    \ be converted to an octet string ED\n   of length k, the encrypted data. The\
    \ encrypted data ED shall satisfy\n                                     k\n  \
    \              y =  SUM  2^(8(k-i)) EDi .              (3)\n                 \
    \                  i = 1\n   where ED1, ..., EDk are the octets of ED from first\
    \ to last.\n   In other words, the first octet of ED has the most significance\
    \ in\n   the integer and the last octet of ED has the least significance.\n"
- title: 9. Decryption process
  contents:
  - "9. Decryption process\n   This section describes the RSA decryption process.\n\
    \   The decryption process consists of four steps: octet-string-to-\n   integer\
    \ conversion, RSA computation, integer-to-octet-string\n   conversion, and encryption-block\
    \ parsing. The input to the decryption\n   process shall be an octet string ED,\
    \ the encrypted data; an integer\n   n, the modulus; and an integer c, the exponent.\
    \ For a public-key\n   operation, the integer c shall be an entity's public exponent\
    \ e; for\n   a private-key operation, it shall be an entity's private exponent\
    \ d.\n   The output from the decryption process shall be an octet string D,\n\
    \   the data.\n   It is an error if the length of the encrypted data ED is not\
    \ k.\n   For brevity, the decryption process is described in terms of the\n  \
    \ encryption process.\n"
- title: 9.1 Octet-string-to-integer conversion
  contents:
  - "9.1 Octet-string-to-integer conversion\n   The encrypted data ED shall be converted\
    \ to an integer y, the integer\n   encrypted data, according to Equation (3).\n\
    \   It is an error if the integer encrypted data y does not satisfy 0 <=\n   y\
    \ < n.\n"
- title: 9.2 RSA computation
  contents:
  - "9.2 RSA computation\n   The integer encrypted data y shall be raised to the power\
    \ c modulo n\n   to give an integer x, the integer encryption block.\n       \
    \                x = y^c mod n,  0 <= x < n .\n   This is the classic RSA computation.\n"
- title: 9.3 Integer-to-octet-string conversion
  contents:
  - "9.3 Integer-to-octet-string conversion\n   The integer encryption block x shall\
    \ be converted to an octet string\n   EB of length k, the encryption block, according\
    \ to Equation (2).\n"
- title: 9.4 Encryption-block parsing
  contents:
  - "9.4 Encryption-block parsing\n   The encryption block EB shall be parsed into\
    \ a block type BT, a\n   padding string PS, and the data D according to Equation\
    \ (1).\n   It is an error if any of the following conditions occurs:\n       \
    \ o    The encryption block EB cannot be parsed\n             unambiguously (see\
    \ notes to Section 8.1).\n        o    The padding string PS consists of fewer\
    \ than eight\n             octets, or is inconsistent with the block type BT.\n\
    \        o    The decryption process is a public-key operation\n             and\
    \ the block type BT is not 00 or 01, or the decryption\n             process is\
    \ a private-key operation and the block type is\n             not 02.\n"
- title: 10. Signature algorithms
  contents:
  - "10. Signature algorithms\n   This section defines three signature algorithms\
    \ based on the RSA\n   encryption process described in Sections 8 and 9. The intended\
    \ use of\n   the signature algorithms is in signing X.509/PEM certificates and\n\
    \   certificate-revocation lists, PKCS #6 extended certificates, and\n   other\
    \ objects employing digital signatures such as X.401 message\n   tokens. The algorithms\
    \ are not intended for use in constructing\n   digital signatures in PKCS #7.\
    \ The first signature algorithm\n   (informally, \"MD2 with RSA\") combines the\
    \ MD2 message-digest\n   algorithm with RSA, the second (informally, \"MD4 with\
    \ RSA\") combines\n   the MD4 message-digest algorithm with RSA, and the third\
    \ (informally,\n   \"MD5 with RSA\") combines the MD5 message-digest algorithm\
    \ with RSA.\n   This section describes the signature process and the verification\n\
    \   process for the two algorithms. The \"selected\" message-digest\n   algorithm\
    \ shall be either MD2 or MD5, depending on the signature\n   algorithm. The signature\
    \ process shall be performed with an entity's\n   private key and the verification\
    \ process shall be performed with an\n   entity's public key. The signature process\
    \ transforms an octet string\n   (the message) to a bit string (the signature);\
    \ the verification\n   process determines whether a bit string (the signature)\
    \ is the\n   signature of an octet string (the message).\n   Note. The only difference\
    \ between the signature algorithms defined\n   here and one of the the methods\
    \ by which signatures (encrypted\n   message digests) are constructed in PKCS\
    \ #7 is that signatures here\n   are represented here as bit strings, for consistency\
    \ with the X.509\n   SIGNED macro. In PKCS #7 encrypted message digests are octet\
    \ strings.\n"
- title: 10.1 Signature process
  contents:
  - "10.1 Signature process\n   The signature process consists of four steps: message\
    \ digesting, data\n   encoding, RSA encryption, and octet-string-to-bit-string\
    \ conversion.\n   The input to the signature process shall be an octet string\
    \ M, the\n   message; and a signer's private key. The output from the signature\n\
    \   process shall be a bit string S, the signature.\n"
- title: 10.1.1 Message digesting
  contents:
  - "10.1.1 Message digesting\n   The message M shall be digested with the selected\
    \ message- digest\n   algorithm to give an octet string MD, the message digest.\n"
- title: 10.1.2 Data encoding
  contents:
  - "10.1.2 Data encoding\n   The message digest MD and a message-digest algorithm\
    \ identifier shall\n   be combined into an ASN.1 value of type DigestInfo, described\
    \ below,\n   which shall be BER-encoded to give an octet string D, the data.\n\
    \   DigestInfo ::= SEQUENCE {\n     digestAlgorithm DigestAlgorithmIdentifier,\n\
    \     digest Digest }\n   DigestAlgorithmIdentifier ::= AlgorithmIdentifier\n\
    \   Digest ::= OCTET STRING\n   The fields of type DigestInfo have the following\
    \ meanings:\n        o    digestAlgorithm identifies the message-digest\n    \
    \         algorithm (and any associated parameters). For\n             this application,\
    \ it should identify the selected\n             message-digest algorithm, MD2,\
    \ MD4 or MD5. For\n             reference, the relevant object identifiers are\
    \ the\n             following:\n   md2 OBJECT IDENTIFIER ::=\n     { iso(1) member-body(2)\
    \ US(840) rsadsi(113549)\n         digestAlgorithm(2) 2 } md4 OBJECT IDENTIFIER\
    \ ::=\n     { iso(1) member-body(2) US(840) rsadsi(113549)\n         digestAlgorithm(2)\
    \ 4 } md5 OBJECT IDENTIFIER ::=\n     { iso(1) member-body(2) US(840) rsadsi(113549)\n\
    \         digestAlgorithm(2) 5 }\n             For these object identifiers, the\
    \ parameters field of the\n             digestAlgorithm value should be NULL.\n\
    \        o    digest is the result of the message-digesting\n             process,\
    \ i.e., the message digest MD.\n   Notes.\n        1.   A message-digest algorithm\
    \ identifier is included\n             in the DigestInfo value to limit the damage\
    \ resulting from\n             the compromise of one message-digest algorithm.\
    \ For\n             instance, suppose an adversary were able to find messages\n\
    \             with a given MD2 message digest.  That adversary might try\n   \
    \          to forge a signature on a message by finding an innocuous-\n      \
    \       looking message with the same MD2 message digest, and\n             coercing\
    \ a signer to sign the innocuous-looking message.\n             This attack would\
    \ succeed only if the signer used MD2. If\n             the DigestInfo value contained\
    \ only the message digest,\n             however, an adversary could attack signers\
    \ that use any\n             message digest.\n        2.   Although it may be\
    \ claimed that the use of a\n             SEQUENCE type violates the literal statement\
    \ in the X.509\n             SIGNED and SIGNATURE macros that a signature is an\n\
    \             ENCRYPTED OCTET STRING (as opposed to ENCRYPTED SEQUENCE),\n   \
    \          such a literal interpretation need not be required, as\n          \
    \   I'Anson and Mitchell point out [IM90].\n        3.  No reason is known that\
    \ MD4 would not be\n             for very high security digital signature schemes,\
    \ but\n             because MD4 was designed to be exceptionally fast, it is\n\
    \             \"at the edge\" in terms of risking successful cryptanalytic\n \
    \            attack.  A message-digest algorithm can be considered\n         \
    \    \"broken\" if someone can find a collision: two messages with\n         \
    \    the same digest. While collisions have been found in\n             variants\
    \ of MD4 with only two digesting \"rounds\"\n             [Mer90][dBB92], none\
    \ have been found in MD4 itself, which\n             has three rounds. After further\
    \ critical review, it may be\n             appropriate to consider MD4 for very\
    \ high security\n             applications.\n             MD5, which has four\
    \ rounds and is proportionally slower\n             than MD4, is recommended until\
    \ the completion of MD4's\n             review. The reported \"pseudocollisions\"\
    \ in MD5's internal\n             compression function [dBB93] do not appear to\
    \ have any\n             practical impact on  MD5's security.\n             MD2,\
    \ the slowest of the three, has the most conservative\n             design. No\
    \ attacks on MD2 have been published.\n"
- title: 10.1.3 RSA encryption
  contents:
  - "10.1.3 RSA encryption\n   The data D shall be encrypted with the signer's RSA\
    \ private key as\n   described in Section 7 to give an octet string ED, the encrypted\n\
    \   data. The block type shall be 01. (See Section 8.1.)\n"
- title: 10.1.4 Octet-string-to-bit-string conversion
  contents:
  - "10.1.4 Octet-string-to-bit-string conversion\n   The encrypted data ED shall\
    \ be converted into a bit string S, the\n   signature. Specifically, the most\
    \ significant bit of the first octet\n   of the encrypted data shall become the\
    \ first bit of the signature,\n   and so on through the least significant bit\
    \ of the last octet of the\n   encrypted data, which shall become the last bit\
    \ of the signature.\n   Note. The length in bits of the signature S is a multiple\
    \ of eight.\n"
- title: 10.2 Verification process
  contents:
  - "10.2 Verification process\n   The verification process for both signature algorithms\
    \ consists of\n   four steps: bit-string-to-octet-string conversion, RSA decryption,\n\
    \   data decoding, and message digesting and comparison. The input to the\n  \
    \ verification process shall be an octet string M, the message; a\n   signer's\
    \ public key; and a bit string S, the signature. The output\n   from the verification\
    \ process shall be an indication of success or\n   failure.\n"
- title: 10.2.1 Bit-string-to-octet-string conversion
  contents:
  - "10.2.1 Bit-string-to-octet-string conversion\n   The signature S shall be converted\
    \ into an octet string ED, the\n   encrypted data. Specifically, assuming that\
    \ the length in bits of the\n   signature S is a multiple of eight, the first\
    \ bit of the signature\n   shall become the most significant bit of the first\
    \ octet of the\n   encrypted data, and so on through the last bit of the signature,\n\
    \   which shall become the least significant bit of the last octet of the\n  \
    \ encrypted data.\n   It is an error if the length in bits of the signature S\
    \ is not a\n   multiple of eight.\n"
- title: 10.2.2 RSA decryption
  contents:
  - "10.2.2 RSA decryption\n   The encrypted data ED shall be decrypted with the signer's\
    \ RSA public\n   key as described in Section 8 to give an octet string D, the\
    \ data.\n   It is an error if the block type recovered in the decryption process\n\
    \   is not 01. (See Section 9.4.)\n"
- title: 10.2.3 Data decoding
  contents:
  - "10.2.3 Data decoding\n   The data D shall be BER-decoded to give an ASN.1 value\
    \ of type\n   DigestInfo, which shall be separated into a message digest MD and\
    \ a\n   message-digest algorithm identifier. The message-digest algorithm\n  \
    \ identifier shall determine the \"selected\" message-digest algorithm\n   for\
    \ the next step.\n   It is an error if the message-digest algorithm identifier\
    \ does not\n   identify the MD2, MD4 or MD5 message-digest algorithm.\n"
- title: 10.2.4 Message digesting and comparison
  contents:
  - "10.2.4 Message digesting and comparison\n   The message M shall be digested with\
    \ the selected message-digest\n   algorithm to give an octet string MD', the comparative\
    \ message\n   digest. The verification process shall succeed if the comparative\n\
    \   message digest MD' is the same as the message digest MD, and the\n   verification\
    \ process shall fail otherwise.\n"
- title: 11. Object identifiers
  contents:
  - "11. Object identifiers\n   This document defines five object identifiers: pkcs-1,\
    \ rsaEncryption,\n   md2WithRSAEncryption, md4WithRSAEncryption, and md5WithRSAEncryption.\n\
    \   The object identifier pkcs-1 identifies this document.\n   pkcs-1 OBJECT IDENTIFIER\
    \ ::=\n     { iso(1) member-body(2) US(840) rsadsi(113549)\n         pkcs(1) 1\
    \ }\n   The object identifier rsaEncryption identifies RSA public and private\n\
    \   keys as defined in Section 7 and the RSA encryption and decryption\n   processes\
    \ defined in Sections 8 and 9.\n   rsaEncryption OBJECT IDENTIFIER ::= { pkcs-1\
    \ 1 }\n   The rsaEncryption object identifier is intended to be used in the\n\
    \   algorithm field of a value of type AlgorithmIdentifier. The\n   parameters\
    \ field of that type, which has the algorithm-specific\n   syntax ANY DEFINED\
    \ BY algorithm, would have ASN.1 type NULL for this\n   algorithm.\n   The object\
    \ identifiers md2WithRSAEncryption, md4WithRSAEncryption,\n   md5WithRSAEncryption,\
    \ identify, respectively, the \"MD2 with RSA,\"\n   \"MD4 with RSA,\" and \"MD5\
    \ with RSA\" signature and verification\n   processes defined in Section 10.\n\
    \   md2WithRSAEncryption OBJECT IDENTIFIER ::= { pkcs-1 2 }\n   md4WithRSAEncryption\
    \ OBJECT IDENTIFIER ::= { pkcs-1 3 }\n   md5WithRSAEncryption OBJECT IDENTIFIER\
    \ ::= { pkcs-1 4 }\n   These object identifiers are intended to be used in the\
    \ algorithm\n   field of a value of type AlgorithmIdentifier. The parameters field\
    \ of\n   that type, which has the algorithm-specific syntax ANY DEFINED BY\n \
    \  algorithm, would have ASN.1 type NULL for these algorithms.\n   Note. X.509's\
    \ object identifier rsa also identifies RSA public keys\n   as defined in Section\
    \ 7, but does not identify private keys, and\n   identifies different encryption\
    \ and decryption processes. It is\n   expected that some applications will identify\
    \ public keys by rsa.\n   Such public keys are compatible with this document;\
    \ an rsaEncryption\n   process under an rsa public key is the same as the rsaEncryption\n\
    \   process under an rsaEncryption public key.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are discussed throughout this memo.\n"
- title: Revision history
  contents:
  - "Revision history\n   Versions 1.0-1.3\n   Versions 1.0-1.3 were distributed to\
    \ participants in RSA Data\n   Security, Inc.'s Public-Key Cryptography Standards\
    \ meetings in\n   February and March 1991.\n   Version 1.4\n   Version 1.4 is\
    \ part of the June 3, 1991 initial public release of\n   PKCS. Version 1.4 was\
    \ published as NIST/OSI Implementors' Workshop\n   document SEC-SIG-91-18.\n \
    \  Version 1.5\n   Version 1.5 incorporates several editorial changes, including\
    \ updates\n   to the references and the addition of a revision history. The\n\
    \   following substantive changes were made:\n        o    Section 10: \"MD4 with\
    \ RSA\" signature and\n             verification processes are added.\n      \
    \  o    Section 11: md4WithRSAEncryption object identifier\n             is added.\n\
    \   Supersedes June 3, 1991 version, which was also published as NIST/OSI\n  \
    \ Implementors' Workshop document SEC-SIG-91-18.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This document is based on a contribution of RSA Laboratories,\
    \ a\n   division of RSA Data Security, Inc.  Any substantial use of the text\n\
    \   from this document must acknowledge RSA Data Security, Inc. RSA Data\n   Security,\
    \ Inc.  requests that all material mentioning or referencing\n   this document\
    \ identify this as \"RSA Data Security, Inc. PKCS #1\".\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Burt Kaliski\n   RSA Laboratories East\n   20 Crosby Drive\n\
    \   Bedford, MA  01730\n   Phone: (617) 687-7000\n   EMail: burt@rsa.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1998).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
