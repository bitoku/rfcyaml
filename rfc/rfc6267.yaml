- title: __initial_text__
  contents:
  - " MIKEY-IBAKE: Identity-Based Authenticated Key Exchange (IBAKE) Mode of\n   \
    \      Key Distribution in Multimedia Internet KEYing (MIKEY)\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a key management protocol variant for the\n\
    \   Multimedia Internet KEYing (MIKEY) protocol that relies on a trusted\n   key\
    \ management service.  In particular, this variant utilizes\n   Identity-Based\
    \ Authenticated Key Exchange (IBAKE) framework that\n   allows the participating\
    \ clients to perform mutual authentication and\n   derive a session key in an\
    \ asymmetric Identity-Based Encryption (IBE)\n   framework.  This protocol, in\
    \ addition to providing mutual\n   authentication, eliminates the key escrow problem\
    \ that is common in\n   standard IBE and provides perfect forward and backward\
    \ secrecy.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6267.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  4\n     2.1.  Requirements Language  . . . . . . . . . . . . . .\
    \ . . . .  4\n     2.2.  Definitions and Notation . . . . . . . . . . . . . .\
    \ . . .  4\n     2.3.  Abbreviations  . . . . . . . . . . . . . . . . . . . .\
    \ . .  5\n   3.  Use Case Scenarios . . . . . . . . . . . . . . . . . . . . .\
    \ .  6\n     3.1.  Forking  . . . . . . . . . . . . . . . . . . . . . . . . .\
    \  6\n     3.2.  Retargeting  . . . . . . . . . . . . . . . . . . . . . . .  6\n\
    \     3.3.  Deferred Delivery  . . . . . . . . . . . . . . . . . . . .  7\n  \
    \ 4.  MIKEY-IBAKE Protocol Description . . . . . . . . . . . . . . .  7\n    \
    \ 4.1.  Overview . . . . . . . . . . . . . . . . . . . . . . . . .  7\n     4.2.\
    \  Message Exchanges and Processing . . . . . . . . . . . . . 10\n       4.2.1.\
    \  REQUEST_KEY_INIT/REQUEST_KEY_RESP Message Exchange . . 10\n       4.2.2.  I_MESSAGE/R_MESSAGE\
    \ Message Exchanges  . . . . . . . . 12\n   5.  Key Management . . . . . . . .\
    \ . . . . . . . . . . . . . . . . 16\n     5.1.  Generating Keys from the Session\
    \ Key . . . . . . . . . . . 17\n     5.2.  Generating Keys for MIKEY Messages\
    \ . . . . . . . . . . . . 17\n     5.3.  CSB Update . . . . . . . . . . . . .\
    \ . . . . . . . . . . . 18\n     5.4.  Generating MAC and Verification Message\
    \  . . . . . . . . . 18\n   6.  Payload Encoding . . . . . . . . . . . . . . .\
    \ . . . . . . . . 19\n     6.1.  Common Header Payload (HDR)  . . . . . . . .\
    \ . . . . . . . 19\n       6.1.1.  IBAKE Payload  . . . . . . . . . . . . . .\
    \ . . . . . . 20\n       6.1.2.  Encrypted Secret Key (ESK) Payload . . . . .\
    \ . . . . . 21\n       6.1.3.  Key Data Sub-Payload . . . . . . . . . . . . .\
    \ . . . . 21\n       6.1.4.  EC Diffie-Hellman Sub-Payload  . . . . . . . . .\
    \ . . . 22\n       6.1.5.  Secret Key Sub-Payload . . . . . . . . . . . . . .\
    \ . . 23\n   7.  Security Considerations  . . . . . . . . . . . . . . . . . .\
    \ . 24\n     7.1.  General Security Considerations  . . . . . . . . . . . . .\
    \ 24\n     7.2.  IBAKE Protocol Security Considerations . . . . . . . . . . 25\n\
    \     7.3.  Forking  . . . . . . . . . . . . . . . . . . . . . . . . . 26\n  \
    \   7.4.  Retargeting  . . . . . . . . . . . . . . . . . . . . . . . 26\n    \
    \ 7.5.  Deferred Delivery  . . . . . . . . . . . . . . . . . . . . 26\n   8. \
    \ IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 27\n   9.  References\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . 28\n     9.1.  Normative\
    \ References . . . . . . . . . . . . . . . . . . . 28\n     9.2.  Informative\
    \ References . . . . . . . . . . . . . . . . . . 29\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Multimedia Internet Keying (MIKEY) [RFC3830] specification\n\
    \   describes several modes of key distribution solution that address\n   multimedia\
    \ scenarios using pre-shared keys, Public Keys, and\n   optionally a Diffie-Hellman\
    \ key exchange.  Multiple extensions of\n   MIKEY have been specified, such as\
    \ HMAC-Authenticated (Hashed Message\n   Authentication Code) Diffie-Hellman [RFC4650]\
    \ and MIKEY-RSA-R\n   [RFC4738].\n   To address deployment scenarios in which\
    \ security systems serve a\n   large number of users, a key management service\
    \ is often preferred.\n   With such a service in place, it would be possible for\
    \ a user to\n   request credentials for any other user when they are needed. \
    \ Some\n   proposed solutions [RFC6043] rely on Key Management Services (KMSs)\n\
    \   in the network that create, distribute, and manage keys in a real\n   time.\
    \  Due to this broad functionality, key management services would\n   have to\
    \ be online, maintain high availability, and be networked\n   across operator\
    \ boundaries.\n   This document describes a solution in which KMSs are low-availability\n\
    \   servers that communicate with end-user clients periodically (e.g.,\n   once\
    \ a month).  The online transactions between the end-user clients\n   (for media\
    \ plane security) are based on Identity-Based Encryption\n   (IBE) [BF].  These\
    \ online transactions between the end-user clients\n   allow them to perform mutual\
    \ authentication and derive a session key\n   not known to any external entity\
    \ (including KMSs).  This protocol, in\n   addition to providing keys not known\
    \ to any external entity and\n   allowing for end-user clients to mutually authenticate\
    \ each other (at\n   the media plane layer), provides perfect forward and backward\n\
    \   secrecy.  In this protocol, the KMS-to-client exchange is used\n   sparingly\
    \ (e.g., once a month); hence, the KMS is no longer required\n   to be a high-availability\
    \ server, and in particular different KMSs\n   don't have to communicate with\
    \ each other (across operator\n   boundaries).  Moreover, given that an IBE is\
    \ used, the need for\n   costly Public Key Infrastructure (PKI) and all the operational\
    \ costs\n   of certificate management and revocation are eliminated.  This is\n\
    \   achieved by concatenating Public Keys with a date field, thereby\n   ensuring\
    \ corresponding Private Keys change with the date and, more\n   importantly, limiting\
    \ the damage due to loss of a Private Key to just\n   that date while not requiring\
    \ endpoints involved in communication to\n   be time synchronized.  The granularity\
    \ in the date field is a matter\n   of security policy and deployment scenario.\
    \  For instance, an\n   operator may choose to use one key per day and hence the\
    \ KMS may\n   issue Private Keys for a whole subscription cycle at the beginning\
    \ of\n   a subscription cycle.  Therefore, unlike in the PKI systems, where\n\
    \   issued certificate is typically valid for period of time thereby\n   requiring\
    \ revocation procedures to limit their validity, the scheme\n   described in this\
    \ document uses time-bound public identities, which\n   automatically expire at\
    \ the end of a time span indicated in the\n   identity itself.  With the self-expiration\
    \ of the public identities,\n   the traditional real-time validity verification\
    \ and revocation is not\n   required.  For example, if the public identity is\
    \ bound to one day,\n   then, at the end of the day, the Public/Private Key pair\
    \ issued to\n   this peer will simply not be valid anymore.  Nevertheless, just\
    \ like\n   with Public-Key-based certificate systems, if there is a need to\n\
    \   revoke keys before the designated expiry time, communication with a\n   third\
    \ party will be needed.\n   Additionally, various call scenarios are securely\
    \ supported -- this\n   includes secure forking, retargeting, deferred delivery\
    \ and pre-\n   encoded content.\n   MIKEY is widely used in the 3GPP community.\
    \  This specification is\n   intended primarily for use with 3GPP media security,\
    \ but it may also\n   be applicable in Internet applications.\n"
- title: 2.  Terminology
  contents:
  - '2.  Terminology

    '
- title: 2.1.  Requirements Language
  contents:
  - "2.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.2.  Definitions and Notation
  contents:
  - "2.2.  Definitions and Notation\n   IBE Encryption: Identity-Based Encryption\
    \ (IBE) is a Public-Key\n   encryption technology that allows a Public Key to\
    \ be calculated from\n   an identity, and the corresponding Private Key to be\
    \ calculated from\n   the Public Key. [RFC5091], [RFC5408], and [RFC5409] describe\n\
    \   algorithms required to implement the IBE.\n   (Media) session: The communication\
    \ session intended to be secured by\n   the MIKEY-IBAKE provided key(s).\n   \
    \   E(k, x)  Encryption of x with the key k\n      [x]P     Point multiplication\
    \ on an elliptic curve, i.e., adding\n               a point P to itself total\
    \ of x times\n      K_PUBx   Public Key of x\n      [x]      x is optional\n \
    \     {x}      Zero or more occurrences of x\n      (x)      One or more occurrences\
    \ of x\n      ||       Concatenation\n      |        OR (selection operator)\n"
- title: 2.3.  Abbreviations
  contents:
  - "2.3.  Abbreviations\n   EC        Elliptic Curve\n   ESK       Encrypted Secret\
    \ Key\n   HMAC      Hashed Message Authentication Code\n   IBE       Identity-Based\
    \ Encryption\n   I         Initiator\n   IBAKE     Identity-Based Authenticated\
    \ Key Exchange\n   IDRi      Initiator's Identity\n   IDRr      Responder's Identity\n\
    \   KMS       Key Management Service\n   K_PR      Private Key\n   K_PUB     Public\
    \ Key\n   K_SESSION Session Key\n   MAC       Message Authentication Code\n  \
    \ MIKEY     Multimedia Internet KEYing\n   MKI       Master Key Identifier\n \
    \  MPK       MIKEY Protection Key\n   PKI       Public Key Infrastructure\n  \
    \ PRF       Pseudorandom Function\n   R         Responder\n   SK        Secret\
    \ Key\n   SIP       Session Initiation Protocol\n   SPI       Security Parameter\
    \ Index\n   SRTP      Secure Realtime Transport Protocol\n   TEK       Traffic\
    \ Encryption Key\n   TGK       TEK Generation Key\n"
- title: 3.  Use Case Scenarios
  contents:
  - "3.  Use Case Scenarios\n   This section describes some of the use case scenarios\
    \ supported by\n   MIKEY-IBAKE, in addition to regular two-party communication.\n"
- title: 3.1.  Forking
  contents:
  - "3.1.  Forking\n   Forking is the delivery of a request (e.g., SIP INVITE message)\
    \ to\n   multiple endpoints.  This happens when a single user is registered\n\
    \   more than once.  An example of forking is when a user has a desk\n   phone,\
    \ PC client, and mobile handset all registered with the same\n   public identity.\n\
    \         +---+             +-------+             +---+             +---+\n  \
    \       | A |             | PROXY |             | B |             | C |\n    \
    \     +---+             +-------+             +---+             +---+\n      \
    \         Request\n           -------------------->\n                        \
    \              Request\n                               -------------------->\n\
    \                                      Request\n                             \
    \  ------------------------------------->\n                             Figure\
    \ 1: Forking\n"
- title: 3.2.  Retargeting
  contents:
  - "3.2.  Retargeting\n   Retargeting is a scenario in which a functional element\
    \ decides to\n   redirect the session to a different destination.  This decision\
    \ to\n   redirect a session may be made for different reasons by a number of\n\
    \   different functional elements and at different points in the\n   establishment\
    \ of the session.\n   There are two basic scenarios of session redirection.  In\
    \ scenario\n   one, a functional element (e.g., Proxy) decides to redirect the\n\
    \   session by passing the new destination information to the originator.\n  \
    \ As a result, the originator initiates a new session to the redirected\n   destination\
    \ provided by the Proxy.  For the case of MIKEY-IBAKE, this\n   means that the\
    \ originator will initiate a new session with the\n   identity of the redirected\
    \ destination.  This scenario is depicted in\n   Figure 2 below.\n         +---+\
    \             +-------+             +---+             +---+\n         | A |  \
    \           | PROXY |             | B |             | C |\n         +---+    \
    \         +-------+             +---+             +---+\n               Request\n\
    \           -------------------->\n                                      Request\n\
    \                               -------------------->\n                      \
    \                Redirect\n                               <--------------------\n\
    \               Redirect\n           <-------------------\n                  \
    \                    Request\n           ---------------------------------------------------------->\n\
    \                           Figure 2: Retargeting\n   In the second scenario,\
    \ a proxy decides to redirect the session\n   without informing the originator.\
    \  This is a common scenario\n   specified in SIP [RFC3261].\n"
- title: 3.3.  Deferred Delivery
  contents:
  - "3.3.  Deferred Delivery\n   Deferred delivery is a type of service such that\
    \ the session content\n   cannot be delivered to the destination at the time that\
    \ it is being\n   sent (e.g., the destination user is not currently online).\n\
    \   Nevertheless, the sender expects the network to deliver the message\n   as\
    \ soon as the recipient becomes available.  A typical example of\n   deferred\
    \ delivery is voicemail.\n"
- title: 4.  MIKEY-IBAKE Protocol Description
  contents:
  - '4.  MIKEY-IBAKE Protocol Description

    '
- title: 4.1.  Overview
  contents:
  - "4.1.  Overview\n   Most of the previously defined MIKEY modes consist of a single\
    \ (or\n   half) roundtrip between two peers.  MIKEY-IBAKE consists of up to\n\
    \   three roundtrips.  In the first roundtrip, users (Initiator and\n   Responder)\
    \ obtain their Private Key(s) (K_PR) from the KMS.  This\n   roundtrip can be\
    \ performed at anytime and, as explained earlier,\n   takes place, for example,\
    \ once a month (or once per subscription\n   cycle).  The second and the third\
    \ roundtrips are between the\n   Initiator and the Responder.  Observe that the\
    \ Key Management Service\n   is only involved in the first roundtrip.  In Figure\
    \ 3, a conceptual\n   signaling diagram for the MIKEY-IBAKE mode is depicted.\n\
    \      +---+             +------+         +------+                 +---+\n   \
    \   | I |             | KMS1 |         | KMS2 |                 | R |\n      +---+\
    \             +------+         +------+                 +---+\n          REQUEST_KEY_INIT\
    \                       REQUEST_KEY_INIT\n        ------------------>        \
    \          <----------------------\n          REQUEST_KEY_RESP               \
    \        REQUEST_KEY_RESP\n        <------------------                  ---------------------->\n\
    \                                  I_MESSAGE_1\n        ----------------------------------------------------------->\n\
    \                                  R_MESSAGE_1\n        <-----------------------------------------------------------\n\
    \                                  I_MESSAGE_2\n        ----------------------------------------------------------->\n\
    \                                  R_MESSAGE_2\n        <-----------------------------------------------------------\n\
    \                    Figure 3: Example Message Exchange\n   The Initiator (I)\
    \ wants to establish a secure media session with the\n   Responder (R).  The Initiator\
    \ and the Responder trust a third party,\n   the Key Management Service (KMS),\
    \ with which they both have, or can\n   establish, shared credentials.  These\
    \ pre-established trust relations\n   are used by a user (i.e., Initiator and\
    \ Responder) to obtain Private\n   Keys.  Rather than a single KMS, several different\
    \ KMSs may be\n   involved, e.g., one for the Initiator and one for the Responder\
    \ as\n   shown in Figure 3.  The Initiator and the Responder do not share any\n\
    \   credentials; however, the Initiator knows the Responder's public\n   identity.\
    \  The assumed trust model is illustrated in Figure 4.\n      +---+          \
    \   +------+         +------+                 +---+\n      | I |             |\
    \ KMS1 |         | KMS2 |                 | R |\n      +---+             +------+\
    \         +------+                 +---+\n          Pre-established          \
    \               Pre-established\n           trust relation                   \
    \      trust relation\n        <----------------->                  <--------------------->\n\
    \            Security association based on mutual authentication\n           \
    \        performed during MIKEY-IBAKE exchange\n        <---------------------------------------------------------->\n\
    \                           Figure 4: Trust Model\n   Below, a description of\
    \ how Private Keys are obtained using MIKEY\n   messages is provided.  An alternative\
    \ way for obtaining Private Keys\n   using HTTP is described in [RFC5408].\n \
    \  The Initiator obtains Private Key(s) from the KMS by sending a\n   REQUEST_KEY_INIT\
    \ message.  The REQUEST_KEY_INIT message includes\n   Initiator's public identity(s)\
    \ (if the Initiator has more than one\n   public identity, it may request Private\
    \ Keys for every identity\n   registered) and is protected via a MAC based on\
    \ a pre-shared key or\n   via a signature (similar to the MIKEY-PSK and MIKEY-RSA\
    \ modes).  If\n   the request is authorized, the KMS generates the requested keys,\n\
    \   encodes them, and returns them in a REQUEST_KEY_RESP message.  This\n   exchange\
    \ takes place periodically and does not need to be performed\n   every time an\
    \ Initiator needs to establish a secure connection with a\n   Responder.\n   The\
    \ Initiator next chooses a random x and computes [x]P, where P is a\n   point\
    \ on elliptic curve E known to all users.  The Initiator uses the\n   Responder's\
    \ public identity to generate the Responder's Public Key\n   (e.g., K_PUBr=H1(IDRr||date)),\
    \ where Hi is hash function known to all\n   users, and the granularity in date\
    \ is a matter of security policy and\n   known publicly.  Then the Initiator uses\
    \ this generated Public Key to\n   encrypt [x]P, IDRi and IDRr and includes this\
    \ encrypted information\n   in an I_MESSAGE_1 message, which is sent to the Responder.\
    \  The\n   encryption is Identity-Based Encryption (IBE) as specified in\n   [RFC5091]\
    \ and [RFC5408].  In turn, the Responder IBE-decrypts the\n   received message\
    \ using its Private Key for that date, chooses random\n   y and computes [y]P.\
    \  Next, the Responder uses Initiator's identity\n   obtained from I_MESSAGE_1\
    \ to generate Initiator's Public Key (e.g.,\n   K_PUBi=H1(IDRi||date)) and IBE-encrypts\
    \ (IDRi, IDRr, [x]P, [y]P)\n   using K_PUBi, and includes it in R_MESSAGE_1 message\
    \ sent to the\n   Initiator.  At this point, the Responder is able to generate\
    \ the\n   session key as [x][y]P.  This session key is then used to generate\n\
    \   TGK as specified in Section 5.1.\n   Upon receiving and IBE-decrypting an\
    \ R_MESSAGE_1 message, the\n   Initiator verifies the received [x]P.  At this\
    \ point, the Initiator\n   is able to generate the same session key as [x][y]P.\
    \  Upon successful\n   verification, the Initiator sends I_MESSAGE_2 message to\
    \ the\n   Responder, including IBE-encrypted IDRi, IDRr and previously received\n\
    \   [y]P.  The Responder sends a R_MESSAGE_2 message to the Initiator as\n   verification.\n\
    \   The above described is the most typical use case; in Section 3, some\n   alternative\
    \ use cases are discussed.\n   MIKEY-IBAKE is based on [RFC3830]; therefore, the\
    \ same terminology,\n   processing, and considerations still apply unless otherwise\
    \ stated.\n   Payloads containing EC Diffie-Hellman values and keys exchanged\
    \ in\n   I_MESSAGE/R_MESSAGE are IBE encrypted as specified in [RFC5091] and\n\
    \   [RFC5408], while the keys exchanged in KEY_REQUES_INIT/\n   KEY_REQUEST_RESPONSE\
    \ are encrypted as specified in [RFC3830].  In all\n   exchanges, encryption is\
    \ only applied to the payloads containing keys\n   and EC Diffie-Hellman values\
    \ and not to the entire messages.\n"
- title: 4.2.  Message Exchanges and Processing
  contents:
  - '4.2.  Message Exchanges and Processing

    '
- title: 4.2.1.  REQUEST_KEY_INIT/REQUEST_KEY_RESP Message Exchange
  contents:
  - "4.2.1.  REQUEST_KEY_INIT/REQUEST_KEY_RESP Message Exchange\n   This exchange\
    \ is used by a user (e.g., Initiator or Responder) to\n   request Private Keys\
    \ from a trusted Key Management Service, with\n   which the user has pre-shared\
    \ credentials.  A full roundtrip is\n   required for a user to receive keys. \
    \ As this message must ensure the\n   identity of the user to the KMS, it is protected\
    \ via a MAC based on a\n   pre-shared key or via a signature.  The initiation\
    \ message\n   REQUEST_KEY_INIT comes in two variants corresponding to the pre-\n\
    \   shared key (PSK) and Public-Key encryption (PKE) methods of\n   [RFC3830].\
    \  The response message REQUEST_KEY_RESP is the same for the\n   two variants\
    \ and SHALL be protected by using the pre-shared/envelope\n   key indicated in\
    \ the REQUEST_KEY_INIT message.\n    Initiator/Responder                    KMS\n\
    \    REQUEST_KEY_INIT_PSK =          ---->\n    HDR, T, RAND, (IDRi/r),\n    IDRkms,\
    \ [IDRpsk], [KEMAC], V    <----  REQUEST_KEY_RESP =\n                        \
    \                     HDR, T, [IDRi/r], [IDRkms],\n                          \
    \                   KEMAC, V\n    REQUEST_KEY_INIT_PKE =          ---->\n    HDR,\
    \ T, RAND, (IDRi/r),\n       {CERTi/r}, IDRkms,           <----  REQUEST_KEY_RESP\
    \ =\n       [KEMAC], [CHASH],                     HDR, T, [IDRi/r], [IDRkms],\n\
    \       PKE, SIGNi/r                          KEMAC, V\n"
- title: 4.2.1.1.  Components of the REQUEST_KEY_INIT Message
  contents:
  - "4.2.1.1.  Components of the REQUEST_KEY_INIT Message\n   The main objective of\
    \ the REQUEST_KEY_INIT message is for a user to\n   request one or more Private\
    \ Keys (K_PR) from the KMS.  The user may\n   request a K_PR for each public identity\
    \ it possesses, as well as for\n   multiple dates.\n   The REQUEST_KEY_INIT message\
    \ MUST always include the Header (HDR),\n   Timestamp (T), and RAND payloads.\
    \  The CSB ID (Crypto Session Bundle\n   ID) SHALL be assigned as in [RFC3830].\
    \  The user SHALL include it in\n   the CSB ID field of the Header.  The user\
    \ SHALL set the #CS field to\n   '0' since CS (Crypto Session(s)) SHALL NOT be\
    \ handled.  The CS ID map\n   type SHALL be the \"Empty map\" as defined in [RFC4563].\n\
    \   IDRi/r contains the identity of the user.  Since the user may have\n   multiple\
    \ identities, multiple IDRi/r fields may appear in the\n   message.\n   IDRkms\
    \ SHALL be included.\n   The KEMAC payload SHALL be used only when the user needs\
    \ to use\n   specific keys.  Otherwise, this payload SHALL NOT be used.\n"
- title: 4.2.1.1.1.  Components of the REQUEST_KEY_INIT_PSK Message
  contents:
  - "4.2.1.1.1.  Components of the REQUEST_KEY_INIT_PSK Message\n   The IDRpsk payload\
    \ MAY be used to indicate the pre-shared key used.\n   The last payload SHALL\
    \ be a Verification (V) payload where the\n   authentication key (auth_key) is\
    \ derived from the pre-shared key (see\n   Section 4.1.4 of [RFC3830] for key\
    \ derivation specification).\n"
- title: 4.2.1.1.2.  Components of the REQUEST_KEY_INIT_PKE Message
  contents:
  - "4.2.1.1.2.  Components of the REQUEST_KEY_INIT_PKE Message\n   The certificate\
    \ (CERT) payload SHOULD be included.  If a certificate\n   chain is to be provided,\
    \ each certificate in the chain MUST be\n   included in a separate CERT payload.\n\
    \   The PKE payload contains the encrypted envelope key: PKE = E(PKkms,\n   env_key).\
    \  It is encrypted using the KMS's Public Key (PKkms).  If\n   the KMS possesses\
    \ several Public Keys, the user can indicate the key\n   used in the CHASH payload.\n\
    \   SIGNi/r is a signature covering the entire MIKEY message, using the\n   Initiator's\
    \ signature key.\n"
- title: 4.2.1.2.  Processing of the REQUEST_KEY_INIT Message
  contents:
  - "4.2.1.2.  Processing of the REQUEST_KEY_INIT Message\n   If the KMS can verify\
    \ the integrity of the received message and the\n   message can be correctly parsed,\
    \ the KMS MUST check the Initiator's\n   authorization.  If the Initiator is authorized\
    \ to receive the\n   requested Private Key(s), the KMS MUST send a REQUEST_KEY_RESP\n\
    \   message.  Unexpected payloads in the REQUEST_KEY_INIT message SHOULD\n   be\
    \ ignored.  Errors are handled as described in [RFC3830].\n"
- title: 4.2.1.3.  Components of the REQUEST_KEY_RESP Message
  contents:
  - "4.2.1.3.  Components of the REQUEST_KEY_RESP Message\n   The version, PRF func\
    \ and CSB ID, #CS, and CS ID map type fields in\n   the HDR payload SHALL be identical\
    \ to the corresponding fields in the\n   REQUEST_KEY_INIT message.  The KMS SHALL\
    \ set the V flag to 0 and the\n   user receiving it SHALL ignore it as it has\
    \ no meaning in this\n   context.\n   The Timestamp type and value SHALL be identical\
    \ to the one used in\n   the REQUEST_KEY_INIT message.\n                     \
    \ KEMAC = E(encr_key, (ID || K_PR))\n   The KEMAC payload SHOULD use the NULL\
    \ authentication algorithm, as a\n   MAC is included in the V payload.  Depending\
    \ on the type of\n   REQUEST_KEY_INIT message, either the pre-shared key or the\
    \ envelope\n   key SHALL be used to derive the encr_key.\n   The last payload\
    \ SHALL be a Verification (V) payload.  Depending on\n   the type of REQUEST_KEY_INIT\
    \ message, either the pre-shared key or\n   the envelope key SHALL be used to\
    \ derive the auth_key.\n"
- title: 4.2.1.4.  Processing of the REQUEST_KEY_RESP Message
  contents:
  - "4.2.1.4.  Processing of the REQUEST_KEY_RESP Message\n   If the Initiator/Responder\
    \ can correctly parse the received message,\n   the received session information\
    \ SHOULD be stored.  Otherwise, the\n   Initiator/Responder SHOULD silently discard\
    \ the message and abort the\n   protocol.\n"
- title: 4.2.2.  I_MESSAGE/R_MESSAGE Message Exchanges
  contents:
  - "4.2.2.  I_MESSAGE/R_MESSAGE Message Exchanges\n   This exchange is used for Initiator\
    \ and Responder to mutually\n   authenticate each other and to exchange EC Diffie-Hellman\
    \ values used\n   to generate TGK.  These exchanges are modeled after the pre-shared\n\
    \   key mode, with the exception that the Elliptic Curve Diffie-Hellman\n   values\
    \ and Secret Keys (SKs) are encoded in IBAKE and ESK payloads\n   instead of a\
    \ KEMAC payload.  Two full roundtrips are required for\n   this exchange to successfully\
    \ complete.  The messages are preferably\n   included in the session setup signaling\
    \ (e.g., SIP INVITE).\n   Initiator                               Responder\n\
    \      I_MESSAGE_1 =                    ---->\n      HDR, T, RAND, IDRi, IDRr,\n\
    \         IBAKE, [ESK]                  <----  R_MESSAGE_1 =\n               \
    \                                 HDR, T, IDRi,\n                            \
    \                    IDRr, IBAKE\n      I_MESSAGE_2 =                    ---->\n\
    \      HDR, T, RAND, IDRi, IDRr,\n         IBAKE, [ESK]                  <----\
    \  R_MESSAGE_2 =\n                                              HDR, T, [IDRi],\
    \ [IDRr],\n                                              [IBAKE], V\n"
- title: 4.2.2.1.  Components of the I_MESSAGE_1 Message
  contents:
  - "4.2.2.1.  Components of the I_MESSAGE_1 Message\n   The I_MESSAGE_1 message MUST\
    \ always include the Header (HDR),\n   Timestamp (T), and RAND payloads.  The\
    \ CSB ID (Crypto Session Bundle\n   ID) SHALL be randomly selected by the Initiator.\
    \  As the R_MESSAGE_1\n   message is mandatory, the Initiator indicates with the\
    \ V flag that a\n   verification message is expected.\n   The IDRi and IDRr payloads\
    \ SHALL be included.\n   The IBAKE payload contains Initiator's Identity and EC\
    \ Diffie-Hellman\n   values (ECCPTi), and Responder's Identity all encrypted using\n\
    \   Responder's Public Key (i.e., encr_key = K_PUBr) as follows:\n           \
    \           IBAKE = E(encr_key, IDRi || ECCPTi || IDRr)\n   Optionally, Encrypted\
    \ Secret Key (ESK) payload MAY be included.  If\n   included, ESK contains an\
    \ identity and a Secret Key (SK) encrypted\n   using intended Responder's Public\
    \ Key (i.e., encr_key = K_PUBr).\n                      ESK = E(encr_key, ID ||\
    \ SK)\n"
- title: 4.2.2.2.  Processing of the I_MESSAGE_1 Message
  contents:
  - "4.2.2.2.  Processing of the I_MESSAGE_1 Message\n   The parsing of I_MESSAGE_1\
    \ message SHALL be done as in [RFC3830].  If\n   the received message is correctly\
    \ parsed, the Responder SHALL use the\n   Private Key (K_PRr) corresponding to\
    \ the received IDRr to decrypt the\n   IBAKE payload.  If the message contains\
    \ ESK payload, the Responder\n   SHALL decrypt the SK and use it to decrypt the\
    \ received IBAKE\n   payload.  Otherwise, if the Responder is not able to decrypt\
    \ the\n   IBAKE payload, the Responder SHALL indicate it to the Initiator by\n\
    \   including only its own EC Diffie-Hellman value (ECCPTr) in the next\n   message\
    \ (i.e., R_MESSAGE_1) it sends to the Initiator.\n   If the received message cannot\
    \ be correctly parsed, the Responder\n   SHOULD silently discard the message and\
    \ abort the protocol.\n"
- title: 4.2.2.3.  Components of the R_MESSAGE_1 Message
  contents:
  - "4.2.2.3.  Components of the R_MESSAGE_1 Message\n   The version, PRF func, CSB\
    \ ID, #CS, and CS ID map type fields in the\n   HDR payload SHALL be identical\
    \ to the corresponding fields in the\n   I_MESSAGE_1 message.  The V flag SHALL\
    \ be set to 1 as I_MESSAGE_2\n   message is mandatory.\n   The Timestamp type\
    \ and value SHALL be identical to the one used in\n   the I_MESSAGE_1 message.\n\
    \   The IDRi and IDRr payloads SHALL be included.  The IDRi payload SHALL\n  \
    \ be as received in the I_MESSAGE_1.  In the IDRr payload, the\n   Responder SHALL\
    \ include its own identity.  Note that this identity\n   might be different from\
    \ the identity contained in the IDRr payload\n   received in I_MESSAGE_1 message.\
    \  The IDRr payloads of I_MESSAGE_1\n   and R_MESSAGE_1 will be different in the\
    \ case of forking,\n   retargeting, and deferred delivery.\n   The Responder's\
    \ IBAKE payload contains the Initiator's EC Diffie-\n   Hellman value (ECCPTi)\
    \ received in I_MESSAGE_1 (if successfully\n   decrypted), and the Initiator's\
    \ EC Diffie-Hellman value generated by\n   the Responder (ECCPTr), as well as\
    \ corresponding Initiator and\n   Responder's identities.  If the Responder is\
    \ unable to decrypt the\n   IBAKE payload received in I_MESSAGE_1 (e.g., the message\
    \ is received\n   by the intended Responder's mailbox), the Responder SHALL include\n\
    \   only its own EC Diffie-Hellman value (ECCPTr).  The IBAKE payload in\n   R_MESSAGE_1\
    \ is encrypted using Initiator's Public Key (i.e., encr_key\n   = P_PUBi) as follows:\n\
    \           IBAKE = E(encr_key, IDRi || {ECCPTi} || IDRr || ECCPTr)\n"
- title: 4.2.2.4.  Processing of the R_MESSAGE_1 Message
  contents:
  - "4.2.2.4.  Processing of the R_MESSAGE_1 Message\n   The parsing of R_MESSAGE_1\
    \ message SHALL be done as in [RFC3830].  If\n   the received message is correctly\
    \ parsed, the Initiator shall use the\n   Private Key corresponding to the received\
    \ IDRi to decrypt the IBAKE\n   payload.  If the ECCPTi sent in I_MESSAGE_1 is\
    \ not present in the\n   received IBAKE payload (e.g., the Responder is currently\
    \ offline and\n   the R_MESSAGE_1 is received from Responder's mailbox), the Initiator\n\
    \   SHALL include ECCPTi again in the next message, I_MESSAGE_2.  In this\n  \
    \ case, I_MESSAGE_2 SHALL also contain an ESK payload encrypted using\n   the\
    \ intended recipient's K_PUB.\n   If the received message cannot be correctly\
    \ parsed, the Initiator\n   SHOULD silently discard the message and abort the\
    \ protocol.\n"
- title: 4.2.2.5.  Components of the I_MESSAGE_2 Message
  contents:
  - "4.2.2.5.  Components of the I_MESSAGE_2 Message\n   The I_MESSAGE_2 message MUST\
    \ always include the Header (HDR),\n   Timestamp (T), and RAND payloads.  The\
    \ version, PRF func, CSB ID,\n   #CS, and CS ID map type fields in the HDR payload\
    \ SHALL be identical\n   to the corresponding fields in the R_MESSAGE_2 message.\
    \  As the\n   R_MESSAGE_2 message is mandatory, the Initiator indicates with the\
    \ V\n   flag that a verification message is expected.\n   The IDRi and IDRr payloads\
    \ SHALL be included.  The IDRr payload SHALL\n   be the same as the IDRr payload\
    \ received in the R_MESSAGE_1.\n   The Initiator's IBAKE payload SHALL contain\
    \ the Initiator's EC\n   Diffie-Hellman value (ECCPTi) if the ECCPTi was not received\
    \ in\n   R_MESSAGE_1.  Otherwise, ECCPTi SHALL NOT be included.  The IBAKE\n \
    \  payload in I_MESSAGE_2 SHALL contain the Initiator's and Responder's\n   identities\
    \ as well as Responder's EC Diffie-Hellman value received in\n   message R_MESSAGE_1.\
    \  IBAKE payload SHALL be encrypted using\n   Responder's Public Key (i.e., encr_key\
    \ = K_PUBr) as follows:\n             IBAKE = E(encr_key, IDRi || {ECCPTi} ||\
    \ IDRr || ECCPTr)\n   Optionally, Encrypted Secret Key (ESK) payload can be included.\
    \  ESK\n   SHALL be included in case R_MESSAGE_1 did not contain Initiator's EC\n\
    \   Diffie-Hellman value (ECCPTi) (e.g., in the case of deferred\n   delivery).\
    \  If included, it contains an Initiator's identity and\n   Initiator-generated\
    \ Secret Key (SK) encrypted using intended\n   recipient Public Key (i.e., encr_key\
    \ = K_PUB) as follows:\n                      ESK = E(encr_key, ID || SK)\n"
- title: 4.2.2.6.  Processing of the I_MESSAGE_2 Message
  contents:
  - "4.2.2.6.  Processing of the I_MESSAGE_2 Message\n   The parsing of the I_MESSAGE_2\
    \ message SHALL be done as in [RFC3830].\n   If the received message is correctly\
    \ parsed, the Responder shall use\n   the K_PRr corresponding to the received\
    \ IDRr to decrypt the IBAKE\n   payload.  If an ESK is received, the Responder\
    \ SHALL store it for\n   future use (e.g., the Responder is a mailbox and will\
    \ forward the key\n   to the user once the user is online).\n   If the received\
    \ message cannot be correctly parsed, the Responder\n   SHOULD silently discard\
    \ the message and abort the protocol.\n"
- title: 4.2.2.7.  Components of the R_MESSAGE_2 Message
  contents:
  - "4.2.2.7.  Components of the R_MESSAGE_2 Message\n   The version, PRF func, CSB\
    \ ID, #CS, and CS ID map type fields in the\n   HDR payload SHALL be identical\
    \ to the corresponding fields in the\n   I_MESSAGE_2 message.  The V flag SHALL\
    \ be set to 0 by the Responder\n   and ignored by the Initiator.\n   The Timestamp\
    \ type and value SHALL be identical to the one used in\n   the I_MESSAGE_2 message.\n\
    \   The IDRi and IDRr payloads SHOULD be included.\n   If Initiator's EC Diffie-Hellman\
    \ value (ECCPTi) was received in\n   I_MESSAGE_2, the Responder SHALL also include\
    \ the IBAKE payload.  If\n   included, the IBAKE payload SHALL contain Initiator's\
    \ EC Diffie-\n   Hellman value (ECCPTi), and the Initiator's identity previously\n\
    \   received in I_MESSAGE_2, encrypted using Initiator's Public Key\n   (i.e.,\
    \ encr_key = K_PUBi) as follows:\n                    IBAKE = E(encr_key, IDRi\
    \ || ECCPTi)\n   The last payload SHALL be a Verification (V) payload where the\n\
    \   authentication key (auth_key) is derived as specified in Section 5.2.\n"
- title: 4.2.2.8.  Processing of the R_MESSAGE_2 Message
  contents:
  - "4.2.2.8.  Processing of the R_MESSAGE_2 Message\n   The parsing of R_MESSAGE_2\
    \ message SHALL be done as in [RFC3830].  If\n   the received message is correctly\
    \ parsed, and if it contains the\n   IBAKE payload, the Initiator SHALL use the\
    \ K_PRi corresponding to the\n   received IDRi to decrypt the IBAKE payload.\n\
    \   If the received message cannot be correctly parsed, the Initiator\n   SHOULD\
    \ silently discard the message and abort the protocol.\n"
- title: 5.  Key Management
  contents:
  - "5.  Key Management\n   The keys used in REQUEST_KEY_INIT/REQUEST_KEY_RESP exchange\
    \ are\n   derived from the pre-shared key or the envelope key as specified in\n\
    \   [RFC3830].  As crypto sessions are not handled in this exchange,\n   further\
    \ keying material (i.e., TEKs) for this message exchange SHALL\n   NOT be derived.\n"
- title: 5.1.  Generating Keys from the Session Key
  contents:
  - "5.1.  Generating Keys from the Session Key\n   As stated above, the session key\
    \ [x][y]P is generated using exchanged\n   EC Diffie-Hellman values, where x and\
    \ y are randomly chosen by the\n   Initiator and Responder.  The session key,\
    \ as a point on an elliptic\n   curve, is then converted into octet string as\
    \ specified in [SEC1].\n   This octet string K_SESSION is then used to generate\
    \ MPK and TGK.\n   Finally, the traffic encryption keys (e.g., TEK) are generated\
    \ from\n   TGK as specified in [RFC3830].\n   The MPK and TGK are generated from\
    \ K_SESSION as follows.\n      inkey      : K_SESSION\n      inkey_len  : bit\
    \ length of the MPK\n      label      : constant || 0xFF || 0xFFFFFFFF || RAND\n\
    \      outkey_len : desired bit length of the output key (MPK or TGK)\n   The\
    \ constant depends on the derived key type as summarized below.\n            \
    \           +-------------+------------+\n                       | Derived Key\
    \ |  Constant  |\n                       +-------------+------------+\n      \
    \                 |     MPK     | 0x220E99A2 |\n                       |     TGK\
    \     | 0x1F4D675B |\n                       +-------------+------------+\n  \
    \                 Table 1: Constants for Key Derivation\n   The constants are\
    \ taken from the decimal digits of e as described in\n   [RFC3830].\n"
- title: 5.2.  Generating Keys for MIKEY Messages
  contents:
  - "5.2.  Generating Keys for MIKEY Messages\n   The keys for MIKEY messages are\
    \ used to protect the MIKEY messages\n   exchanged between the Initiator and Responder\
    \ (i.e., I_MESSAGE and\n   R_MESSAGE).  In the REQUEST_KEY_INIT/REQUEST_KEY_RESP\
    \ exchange, the\n   key derivation SHALL be done exactly as in [RFC3830].\n  \
    \ MIKEY Protection Key (MPK) for I_MESSAGE/R_MESSAGE exchange is\n   generated\
    \ as described in Section 5.1.  This MPK is then used to\n   derive keys to protect\
    \ R_MESSAGE_2 message.\n      inkey      : MPK\n      inkey_len  : bit length\
    \ of the MPK\n      label      : constant || 0xFF || csb_id || RAND\n      outkey_len\
    \ : desired bit length of the output key\n   where the constants are as defined\
    \ in [RFC3830].\n"
- title: 5.3.  CSB Update
  contents:
  - "5.3.  CSB Update\n   Similar to [RFC3830], MIKEY-IBAKE provides means for updating\
    \ the CSB\n   (Crypto Session Bundle), e.g., transporting new EC Diffe-Hellman\n\
    \   values or adding new crypto sessions.  The CSB updating is done by\n   executing\
    \ the exchange of I_MESSAGE_1/R_MESSAGE_1.  The CSB updating\n   MAY be started\
    \ by either the Initiator or the Responder.\n      Initiator                 \
    \              Responder\n      I_MESSAGE_1 =                 ---->\n      HDR,\
    \ T, [IDRi], [IDRr],\n         [IBAKE]                    <----     R_MESSAGE_1\
    \ =\n                                              HDR, T, [IDRi], [IDRr],\n \
    \                                             [IBAKE], V\n      Responder    \
    \                           Initiator\n      I_MESSAGE_1 =                 ---->\n\
    \      HDR, T, [IDRr], [IDRi],\n         [IBAKE]                    <----    \
    \ R_MESSAGE_1 =\n                                              HDR, T, [IDRi],\
    \ [IDRr],\n                                              [IBAKE], V\n   The new\
    \ message exchange MUST use the same CSB ID as the initial\n   exchange, but MUST\
    \ use a new Timestamp.  Other payloads that were\n   provided in the initial exchange\
    \ SHOULD NOT be included.  New RANDs\n   MUST NOT be included in the message exchange\
    \ (the RANDs will only\n   have effect in the initial exchange).\n   IBAKE payload\
    \ with new EC Diffie-Hellman values SHOULD be included.\n   If new EC Diffie-Hellman\
    \ values are being exchanged during CSB\n   updating, messages SHALL be protected\
    \ with keys derived from EC\n   Diffie-Hellman values exchanged as specified in\
    \ Section 5.2.\n   Otherwise, if new EC Diffie-Hellman values are not being exchanged\n\
    \   during CSB update exchange, messages SHALL be protected with the keys\n  \
    \ that protected the I_MESSAGE/R_MESSAGE messages in the initial\n   exchange.\n"
- title: 5.4.  Generating MAC and Verification Message
  contents:
  - "5.4.  Generating MAC and Verification Message\n   The authentication tag in all\
    \ MIKEY-IBAKE messages is generated as\n   described in [RFC3830].  As described\
    \ above, the MPK is used to\n   derive the auth_key.  The MAC/Signature in the\
    \ V/SIGN payloads covers\n   the entire MIKEY message, except the MAC/Signature\
    \ field itself and\n   if there is an ESK payload in the massage it SHALL be omitted\
    \ from\n   MAC/Signature calculation.  The identities (not whole payloads) of\n\
    \   the involved parties MUST directly follow the MIKEY message in the\n   Verification\
    \ MAC/Signature calculation.  Note that in the I_MESSAGE/\n   R_MESSAGE exchange,\
    \ IDRr in R_MESSAGE_1 MAY not be the same as that\n   appearing in I_MESSAGE_1.\n"
- title: 6.  Payload Encoding
  contents:
  - "6.  Payload Encoding\n   This section does not describe all the payloads that\
    \ are used in the\n   new message types.  It describes in detail the new IBAKE\
    \ and ESK\n   payloads and in less detail the payloads for which changes has been\n\
    \   made compared to [RFC3830].  For a detailed description of the MIKEY\n   payloads\
    \ (e.g., Timestamp (T) payload, RAND payload, etc.), see\n   [RFC3830].  For the\
    \ description of IDR payload as well as for the\n   definition of additional PRF\
    \ functions and encryption algorithms not\n   defined in [RFC3830], see [RFC6043].\n"
- title: 6.1.  Common Header Payload (HDR)
  contents:
  - "6.1.  Common Header Payload (HDR)\n   For the Common Header Payload, new values\
    \ are added to the data type\n   and the next payload namespaces.\n   o  Data\
    \ type (8 bits): describes the type of message.\n     +------------------+-------+------------------------------------+\n\
    \     |     Data Type    | Value |               Comment              |\n    \
    \ +------------------+-------+------------------------------------+\n     |  REQUEST_KEY_PSK\
    \ |   19  | Request Private Keys message (PSK) |\n     |  REQUEST_KEY_PKE |  \
    \ 20  | Request Private Keys message (PKE) |\n     | REQUEST_KEY_RESP |   21 \
    \ |    Response Private Keys message   |\n     |    I_MESSAGE_1   |   22  |  \
    \    First Initiator's message     |\n     |    R_MESSAGE_1   |   23  |      First\
    \ Responder's message     |\n     |    I_MESSAGE_2   |   24  |     Second Initiator's\
    \ message     |\n     |    R_MESSAGE_2   |   25  |     Second Responder's message\
    \     |\n     +------------------+-------+------------------------------------+\n\
    \                      Table 2: Data Type (Additions)\n   o  Next payload (8 bits):\
    \ identifies the payload that is added after\n      this payload.\n          \
    \       +--------------+-------+---------------+\n                 | Next Payload\
    \ | Value |    Section    |\n                 +--------------+-------+---------------+\n\
    \                 |     IBAKE    |   22  | Section 6.1.1 |\n                 |\
    \      ESK     |   23  | Section 6.1.2 |\n                 |      SK      |  \
    \ 24  | Section 6.1.5 |\n                 |     ECCPT    |   25  | Section 6.1.4\
    \ |\n                 +--------------+-------+---------------+\n             \
    \        Table 3: Next Payload (Additions)\n   o  V (1 bits): flag to indicate\
    \ whether or not a response message is\n      expected (this only has meaning\
    \ when it is set in an initiation\n      message).  If a response is required,\
    \ the V flag SHALL always be\n      set to 1 in the initiation messages and the\
    \ receiver of the\n      initiation message (Responder or KMS) SHALL ignore it.\n\
    \   o  #CS (8 bits): indicates the number of crypto sessions that will be\n  \
    \    handled within the CSB.  It SHALL be set to 0 in the Request Key\n      exchange,\
    \ as crypto sessions SHALL NOT be handled.\n   o  CS ID map type (8 bits): specifies\
    \ the method of uniquely mapping\n      crypto sessions to the security protocol\
    \ sessions.  In the Request\n      Key exchange, the CS ID map type SHALL be the\
    \ \"Empty map\" (defined\n      in [RFC4563]) as crypto sessions SHALL NOT be\
    \ handled.\n"
- title: 6.1.1.  IBAKE Payload
  contents:
  - "6.1.1.  IBAKE Payload\n   The IBAKE payload contains IBE encrypted (see [RFC5091]\
    \ and [RFC5408]\n   for details about IBE) Initiator and Responder's Identities\
    \ and EC\n   Diffie-Hellman Sub-Payloads (see Section 6.1.4 for the definition\
    \ of\n   EC Diffie-Hellman Sub-Payload).  It may contain one or more EC\n   Diffie-Hellman\
    \ Sub-Payloads and their associated identities.  The\n   last EC Diffie-Hellman\
    \ or Identity Sub-Payload has its Next payload\n   field set to Last payload.\n\
    \                           1                   2                   3\n      \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      ! Next payload  ! Encr data len                 !  Encr data    !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      !\
    \                        Encr data                              ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   o  Next payload (8 bits): identifies the payload that is added after\n   \
    \   this payload.\n   o  Encr data len (16 bits): length of Encr data (in bytes).\n\
    \   o  Encr data (variable length): the IBE encrypted EC Diffie-Hellman\n    \
    \  Sub-Payloads (see Section 6.1.4) and their associated Identity\n      payloads.\n"
- title: 6.1.2.  Encrypted Secret Key (ESK) Payload
  contents:
  - "6.1.2.  Encrypted Secret Key (ESK) Payload\n   The Encrypted Secret Key payload\
    \ contains IBE encrypted (see\n   [RFC5091] and [RFC5408] for details about IBE)\
    \ Secret Key Sub-Payload\n   and its associated identity (see Section 6.1.5 for\
    \ the definition of\n   the Secret Key Sub-Payload).\n                       \
    \    1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      ! Next payload  ! Encr data len                 !  Encr data    !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      !\
    \                        Encr data                              ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   o  Next payload (8 bits): identifies the payload that is added after\n   \
    \   this payload.\n   o  Encr data len (16 bits): length of Encr data (in bytes).\n\
    \   o  Encr data (variable length): the encrypted secret key Sub-Payloads\n  \
    \    (see Section 6.1.5).\n"
- title: 6.1.3.  Key Data Sub-Payload
  contents:
  - "6.1.3.  Key Data Sub-Payload\n   For the key data Sub-Payload, a new type of\
    \ key is defined.  The\n   Private Key (K_PR) is used to decrypt the content encrypted\
    \ using the\n   corresponding Public Key (K_PUB).  KEMAC in the REQUEST_KEY_RESP\n\
    \   SHALL contain one or more Private Keys.\n   o  Type (4 bits): indicates the\
    \ type of key included in the payload.\n                      +------+-------+-------------+\n\
    \                      | Type | Value |   Comments  |\n                      +------+-------+-------------+\n\
    \                      | K_PR |   7   | Private Key |\n                      +------+-------+-------------+\n\
    \                    Table 4: Key Data Type (Additions)\n"
- title: 6.1.4.  EC Diffie-Hellman Sub-Payload
  contents:
  - "6.1.4.  EC Diffie-Hellman Sub-Payload\n   The EC Diffie-Hellman (ECCPT) Sub-Payload\
    \ uses the format defined\n   below.  The EC Diffie-Hellman Sub-Payload in MIKEY-IBAKE\
    \ is never\n   included in clear, but as an encrypted part of the IBAKE payload.\n\
    \                           1                   2                   3\n      \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      ! Next payload  ! ECC Curve     ! ECC Point                     ~\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      !\
    \ Auth alg      ! TGK len                       ! Reserv! KV    !\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      ! KV data (optional)                                            ~\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   o  Next\
    \ payload (8 bits): identifies the payload that is added after\n      this payload.\
    \  See Section 6.1 of [RFC3830] for values.\n   o  ECC curve (8 bits): identifies\
    \ the ECC curve used.\n             +--------------------------------------+-------+\n\
    \             |               ECC Curve              | Value |\n             +--------------------------------------+-------+\n\
    \             |  ECPRGF192Random / P-192 / secp192r1 |   1   |\n             |\
    \  EC2NGF163Random / B-163 / sect163r2 |   2   |\n             | EC2NGF163Koblitz\
    \ / K-163 / sect163k1 |   3   |\n             |  EC2NGF163Random2 / none / sect163r1\
    \ |   4   |\n             |  ECPRGF224Random / P-224 / secp224r1 |   5   |\n \
    \            |  EC2NGF233Random / B-233 / sect233r1 |   6   |\n             |\
    \ EC2NGF233Koblitz / K-233 / sect233k1 |   7   |\n             |  ECPRGF256Random\
    \ / P-256 / secp256r1 |   8   |\n             |  EC2NGF283Random / B-283 / sect283r1\
    \ |   9   |\n             | EC2NGF283Koblitz / K-283 / sect283k1 |   10  |\n \
    \            |  ECPRGF384Random / P-384 / secp384r1 |   11  |\n             |\
    \  EC2NGF409Random / B-409 / sect409r1 |   12  |\n             | EC2NGF409Koblitz\
    \ / K-409 / sect409k1 |   13  |\n             |  ECPRGF521Random / P-521 / secp521r1\
    \ |   14  |\n             |  EC2NGF571Random / B-571 / sect571r1 |   15  |\n \
    \            | EC2NGF571Koblitz / K-571 / sect571k1 |   16  |\n             +--------------------------------------+-------+\n\
    \                         Table 5: Elliptic Curves\n   o  ECC point (variable\
    \ length): ECC point data, padded to end on a\n      32-bit boundary, encoded\
    \ in octet string representation.\n   o  Auth alg (8 bits): specifies the MAC\
    \ algorithm used for the\n      verification message.  For MIKEY-IBAKE this field\
    \ is ignored.\n   o  TGK len (16 bits): the length of the TGK (in bytes).  For\
    \ MIKEY-\n      IBAKE this field is ignored.\n   o  KV (4 bits): indicates the\
    \ type of key validity period specified.\n      This may be done by using an SPI\
    \ (alternatively an MKI in SRTP) or\n      by providing an interval in which the\
    \ key is valid (e.g., in the\n      latter case, for SRTP this will be the index\
    \ range where the key\n      is valid).  See Section 6.13 of [RFC3830] for pre-defined\
    \ values.\n   o  KV data (variable length): This includes either the SPI/MKI or\
    \ an\n      interval (see Section 6.14 of [RFC3830]).  If KV is NULL, this\n \
    \     field is not included.\n"
- title: 6.1.5.  Secret Key Sub-Payload
  contents:
  - "6.1.5.  Secret Key Sub-Payload\n   Secret Key payload is included as a Sub-Payload\
    \ in Encrypted Secret\n   Key payload.  Similar to EC Diffie-Hellman Sub-Payload,\
    \ it is never\n   included in clear, but as an encrypted part of the ESK payload.\n\
    \                           1                   2                   3\n      \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !  Next Payload ! Type  ! KV    ! Key data len                  !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      !\
    \                         Key data                              ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !                        KV data (optional)                     ~\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   o  Next\
    \ payload (8 bits): identifies the payload that is added after\n      this payload.\n\
    \   o  Type (4 bits): indicates the type of the key included in the\n      payload.\n\
    \                             +------+-------+\n                             |\
    \ Type | Value |\n                             +------+-------+\n            \
    \                 |  SK  |   1   |\n                             +------+-------+\n\
    \                         Table 6: Secret Key Types\n   o  KV (4 bits): indicates\
    \ the type of key validity period specified.\n      This may be done by using\
    \ an SPI (or MKI in the case of [RFC3711])\n      or by providing an interval\
    \ in which the key is valid (e.g., in\n      the latter case, for SRTP this will\
    \ be the index range where the\n      key is valid).  KV values are the same as\
    \ in Section 6.13 of\n      [RFC3830]\n   o  Key data len (16 bits): the length\
    \ of the Key data field (in\n      bytes).\n   o  Key data (variable length):\
    \ The SK data.\n   o  KV data (variable length): This includes either the SPI\
    \ or an\n      interval.  If KV is NULL, this field is not included.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Unless explicitly stated, the security properties\
    \ of the MIKEY\n   protocol as described in [RFC3830] apply to MIKEY-IBAKE as\
    \ well.  In\n   addition, MIKEY-IBAKE is based on the basic Identity-Based Encryption\n\
    \   protocol, as specified in [RFC5091], [RFC5408], and [RFC5409], and as\n  \
    \ such inherits some properties of that protocol.  For instance, by\n   concatenating\
    \ the \"date\" with the identity (to derive the Public\n   Key), the need for\
    \ any key revocation mechanisms is virtually\n   eliminated.  Moreover, by allowing\
    \ the participants to acquire\n   multiple Private Keys (e.g., for duration of\
    \ contract) the\n   availability requirements on the KMS are also reduced without\
    \ any\n   reduction in security.\n"
- title: 7.1.  General Security Considerations
  contents:
  - "7.1.  General Security Considerations\n   The MIKEY-IBAKE protocol relies on\
    \ the use of Identity-Based\n   Encryption.  [RFC5091] describes attacks on the\
    \ cryptographic\n   algorithms used in Identity-Based Encryption.  In addition,\
    \ [RFC5091]\n   provides recommendations for security parameters for described\
    \ IBE\n   algorithms.\n   It is assumed that the Key Management Services are secure,\
    \ not\n   compromised, trusted, and will not engage in launching active attacks\n\
    \   independently or in a collaborative environment.  However, any\n   malicious\
    \ insider could potentially launch passive attacks (by\n   decryption of one or\
    \ more message exchanges offline).  While it is in\n   the best interest of administrators\
    \ to prevent such attacks, it is\n   hard to eliminate this problem.  Hence, it\
    \ is assumed that such\n   problems will persist, and hence the protocols are\
    \ designed to\n   protect participants from passive adversaries.\n"
- title: 7.2.  IBAKE Protocol Security Considerations
  contents:
  - "7.2.  IBAKE Protocol Security Considerations\n   For the basic IBAKE protocol,\
    \ from a cryptographic perspective, the\n   following security considerations\
    \ apply.\n   In every step, Identity-Based Encryption (IBE) is used with the\n\
    \   recipient's Public Key.  This guarantees that only the intended\n   recipient\
    \ of the message can decrypt the message [BF].\n   Next, the use of identities\
    \ within the encrypted payload is intended\n   to eliminate some basic reflection\
    \ attacks.  For instance, suppose\n   identities were not used as part of the\
    \ encrypted payload, in the\n   first step of the IBAKE protocol (i.e., I_MESSAGE_1\
    \ of Figure 3 in\n   Section 4.1).  Furthermore, assume an adversary who has access\
    \ to the\n   conversation between Initiator and Responder and can actively snoop\n\
    \   into packets and drop/modify them before routing them to the\n   destination.\
    \  For instance, assume that the IP source address and\n   destination address\
    \ can be modified by the adversary.  After the\n   first message is sent by the\
    \ Initiator (to the Responder), the\n   adversary can take over and trap the packet.\
    \  Next, the adversary can\n   modify the IP source address to include adversary's\
    \ IP address,\n   before routing it onto the Responder.  The Responder will assume\
    \ the\n   request for an IBAKE session came from the adversary and will execute\n\
    \   step 2 of the IBAKE protocol (i.e., R_MESSAGE_1 of Figure 3 in\n   Section\
    \ 4.1) but encrypt it using the adversary's Public Key.  The\n   above message\
    \ can be decrypted by the adversary (and only by the\n   adversary).  In particular,\
    \ since the second message includes the\n   challenge sent by the Initiator to\
    \ the Responder, the adversary will\n   now learn the challenge sent by the Initiator.\
    \  Following this, the\n   adversary can carry on a conversation with the Initiator\
    \ \"pretending\"\n   to be the Responder.  This attack will be eliminated if identities\n\
    \   are used as part of the encrypted payload.  In summary, at the end of\n  \
    \ the exchange both Initiator and Responder can mutually authenticate\n   each\
    \ other and agree on a session key.\n   Recall that Identity-Based Encryption\
    \ guarantees that only the\n   recipient of the message can decrypt the message\
    \ using the Private\n   Key.  The caveat being, the KMS that generated the Private\
    \ Key of\n   recipient of message can decrypt the message as well.  However, the\n\
    \   KMS cannot learn the session key [x][y]P given [x]P and [y]P based on\n  \
    \ the Elliptic Curve Diffie-Hellman problem.  This property of\n   resistance\
    \ to passive key escrow from the KMS is not applicable to\n   the basic IBE protocols\
    \ proposed in [RFC5091], [RFC5408], and\n   [RFC5409].\n   Observe that the protocol\
    \ works even if the Initiator and Responder\n   belong to two different Key Management\
    \ Services.  In particular, the\n   parameters used for encryption to the Responder\
    \ and parameters used\n   for encryption to the Initiator can be completely different\
    \ and\n   independent of each other.  Moreover, the Elliptic Curve used to\n \
    \  generate the session key [x][y]P can be completely different.  If\n   such\
    \ flexibility is desired, then it would be advantageous to add\n   optional extra\
    \ data to the protocol to exchange the algebraic\n   primitives used in deriving\
    \ the session key.\n   In addition to mutual authentication, and resistance to\
    \ passive\n   escrow, the Diffie-Hellman property of the session key exchange\n\
    \   guarantees perfect secrecy of keys.  In others, accidental leakage of\n  \
    \ one session key does not compromise past or future session keys\n   between\
    \ the same Initiator and Responder.\n"
- title: 7.3.  Forking
  contents:
  - "7.3.  Forking\n   In the Forking feature, given that there are multiple potential\n\
    \   Responders, it is important to observe that there is one \"common\n   Responder\"\
    \ identity (and corresponding Public and Private Keys) and\n   each Responder\
    \ has a unique identity (and corresponding Public and\n   Private Keys).  Observe\
    \ that, in this framework, if one Responder\n   responds to the invite from the\
    \ Initiator, it uses its unique\n   identity such that the protocol guarantees\
    \ that no other Responder\n   learns the session key.\n"
- title: 7.4.  Retargeting
  contents:
  - "7.4.  Retargeting\n   In the Retargeting feature, the forwarding server does\
    \ not learn the\n   Private Key of the intended Responder since it is encrypted\
    \ using the\n   retargeted Responder's Public Key.  Additionally, the Initiator\
    \ will\n   learn that the retargeted Responder answered the phone (and not the\n\
    \   intended Responder) since the retargeted Responder includes its own\n   identity\
    \ in the message sent to the Initiator.  This will allow the\n   Initiator to\
    \ decide whether or not to carry on the conversation.\n   Finally, the session\
    \ key cannot be discovered by the intended\n   Responder since the random number\
    \ chosen by the retargeted Responder\n   is not known to the intended Responder.\n"
- title: 7.5.  Deferred Delivery
  contents:
  - "7.5.  Deferred Delivery\n   In the Deferred Delivery feature, the Initiator and\
    \ the Responder's\n   mailbox will mutually authenticate each other thereby preventing\n\
    \   server side \"phishing\" attacks and conversely guarantees to the\n   server\
    \ (and eventually to the Responder) the identity of the\n   Initiator.  Moreover,\
    \ the key used by Initiator to encrypt the\n   contents of the message is completely\
    \ independent from the session\n   key derived between the Initiator and the server.\
    \  Finally, the key\n   used to encrypt the message is encrypted using the Responder's\
    \ Public\n   Key, which allows the contents of the message to remain unknown to\n\
    \   the mailbox server.\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   This document defines several new values for the\
    \ namespaces Data\n   Type, Next Payload, and Key Data Type defined in [RFC3830].\
    \  The\n   following IANA assignments have been added to the MIKEY Payload\n \
    \  registry (in bracket is a reference to the table containing the\n   registered\
    \ values):\n   o  Data Type (see Table 2)\n   o  Next Payload (see Table 3)\n\
    \   o  Key Data Type (see Table 4)\n   The ECCPT payload defines an 8-bit ECC\
    \ Curve field for which IANA has\n   created and will maintain a new namespace\
    \ in the MIKEY Payload\n   registry.  Assignments consist of an ECC curve and\
    \ its associated\n   value.  Values in the range 1-239 SHOULD be approved by the\
    \ process\n   of Specification Required, values in the range 240-254 are for\n\
    \   Private Use, and the values 0 and 255 are Reserved according to\n   [RFC5226].\
    \  The initial contents of the registry are as follows:\n           Value    ECC\
    \ curve\n           -------  ------------------------------------\n          \
    \ 0        Reserved\n           1        ECPRGF192Random  / P-192 / secp192r1\n\
    \           2        EC2NGF163Random  / B-163 / sect163r2\n           3      \
    \  EC2NGF163Koblitz / K-163 / sect163k1\n           4        EC2NGF163Random2\
    \ / none  / sect163r1\n           5        ECPRGF224Random  / P-224 / secp224r1\n\
    \           6        EC2NGF233Random  / B-233 / sect233r1\n           7      \
    \  EC2NGF233Koblitz / K-233 / sect233k1\n           8        ECPRGF256Random \
    \ / P-256 / secp256r1\n           9        EC2NGF283Random  / B-283 / sect283r1\n\
    \           10       EC2NGF283Koblitz / K-283 / sect283k1\n           11     \
    \  ECPRGF384Random  / P-384 / secp384r1\n           12       EC2NGF409Random \
    \ / B-409 / sect409r1\n           13       EC2NGF409Koblitz / K-409 / sect409k1\n\
    \           14       ECPRGF521Random  / P-521 / secp521r1\n           15     \
    \  EC2NGF571Random  / B-571 / sect571r1\n           16       EC2NGF571Koblitz\
    \ / K-571 / sect571k1\n           17-239   Unassigned\n           240-254  Private\
    \ Use\n           255      Reserved\n   The SK Sub-Payload defines a 4-bit Type\
    \ field for which IANA has\n   created and will maintain a new namespace in the\
    \ MIKEY Payload\n   registry.  Assignments consist of a type of key and its associated\n\
    \   value.  Values in the range 2-15 SHOULD be approved by the process of\n  \
    \ Specification Required.  The initial contents of the registry are as\n   follows:\n\
    \                     Value    Type\n                     -------  ---------------\n\
    \                     0        Reserved\n                     1        Secret\
    \ Key (SK)\n                     2-15     Unassigned\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [BF]       Boneh, D. and M. Franklin, \"Identity-Based\
    \ Encryption from\n              the Weil Pairing\", in SIAM J. of Computing,\
    \ Vol. 32,\n              No. 3, pp. 586-615, 2003.\n   [RFC2119]  Bradner, S.,\
    \ \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [RFC3830]  Arkko, J., Carrara, E., Lindholm,\
    \ F., Naslund, M., and K.\n              Norrman, \"MIKEY: Multimedia Internet\
    \ KEYing\", RFC 3830,\n              August 2004.\n   [RFC4563]  Carrara, E.,\
    \ Lehtovirta, V., and K. Norrman, \"The Key ID\n              Information Type\
    \ for the General Extension Payload in\n              Multimedia Internet KEYing\
    \ (MIKEY)\", RFC 4563, June 2006.\n   [RFC5226]  Narten, T. and H. Alvestrand,\
    \ \"Guidelines for Writing an\n              IANA Considerations Section in RFCs\"\
    , BCP 26, RFC 5226,\n              May 2008.\n   [RFC6043]  Mattsson, J. and T.\
    \ Tian, \"MIKEY-TICKET: Ticket-Based\n              Modes of Key Distribution\
    \ in Multimedia Internet KEYing\n              (MIKEY)\", RFC 6043, March 2011.\n\
    \   [SEC1]     Standards for Efficient Cryptography Group, \"Elliptic\n      \
    \        Curve Cryptography\", September 2000.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo,\
    \ G., Johnston,\n              A., Peterson, J., Sparks, R., Handley, M., and\
    \ E.\n              Schooler, \"SIP: Session Initiation Protocol\", RFC 3261,\n\
    \              June 2002.\n   [RFC3711]  Baugher, M., McGrew, D., Naslund, M.,\
    \ Carrara, E., and K.\n              Norrman, \"The Secure Real-time Transport\
    \ Protocol (SRTP)\",\n              RFC 3711, March 2004.\n   [RFC4650]  Euchner,\
    \ M., \"HMAC-Authenticated Diffie-Hellman for\n              Multimedia Internet\
    \ KEYing (MIKEY)\", RFC 4650,\n              September 2006.\n   [RFC4738]  Ignjatic,\
    \ D., Dondeti, L., Audet, F., and P. Lin, \"MIKEY-\n              RSA-R: An Additional\
    \ Mode of Key Distribution in\n              Multimedia Internet KEYing (MIKEY)\"\
    , RFC 4738,\n              November 2006.\n   [RFC5091]  Boyen, X. and L. Martin,\
    \ \"Identity-Based Cryptography\n              Standard (IBCS) #1: Supersingular\
    \ Curve Implementations of\n              the BF and BB1 Cryptosystems\", RFC\
    \ 5091, December 2007.\n   [RFC5408]  Appenzeller, G., Martin, L., and M. Schertler,\
    \ \"Identity-\n              Based Encryption Architecture and Supporting Data\n\
    \              Structures\", RFC 5408, January 2009.\n   [RFC5409]  Martin, L.\
    \ and M. Schertler, \"Using the Boneh-Franklin and\n              Boneh-Boyen\
    \ Identity-Based Encryption Algorithms with the\n              Cryptographic Message\
    \ Syntax (CMS)\", RFC 5409,\n              January 2009.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Violeta Cakulev\n   Alcatel Lucent\n   600 Mountain Ave.\n\
    \   3D-517\n   Murray Hill, NJ  07974\n   US\n   Phone: +1 908 582 3207\n   EMail:\
    \ violeta.cakulev@alcatel-lucent.com\n   Ganapathy Sundaram\n   Alcatel Lucent\n\
    \   600 Mountain Ave.\n   3D-517\n   Murray Hill, NJ  07974\n   US\n   Phone:\
    \ +1 908 582 3209\n   EMail: ganesh.sundaram@alcatel-lucent.com\n"
