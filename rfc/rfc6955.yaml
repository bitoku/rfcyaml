- contents:
  - '             Diffie-Hellman Proof-of-Possession Algorithms

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document describes two methods for producing an integrity check\n
    \  value from a Diffie-Hellman key pair and one method for producing an\n   integrity
    check value from an Elliptic Curve key pair.  This behavior\n   is needed for
    such operations as creating the signature of a Public-\n   Key Cryptography Standards
    (PKCS) #10 Certification Request.  These\n   algorithms are designed to provide
    a Proof-of-Possession of the\n   private key and not to be a general purpose signing
    algorithm.\n   This document obsoletes RFC 2875.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6955.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Changes since RFC 2875 .....................................4\n      1.2.
    Requirements Terminology ...................................5\n   2. Terminology
    .....................................................5\n   3. Notation ........................................................5\n
    \  4. Static DH Proof-of-Possession Process ...........................6\n      4.1.
    ASN.1 Encoding .............................................8\n   5. Discrete
    Logarithm Signature ...................................11\n      5.1. Expanding
    the Digest Value ................................11\n      5.2. Signature Computation
    Algorithm ...........................12\n      5.3. Signature Verification Algorithm
    ..........................13\n      5.4. ASN.1 Encoding ............................................14\n
    \  6. Static ECDH Proof-of-Possession Process ........................16\n      6.1.
    ASN.1 Encoding ............................................18\n   7. Security
    Considerations ........................................20\n   8. References .....................................................21\n
    \     8.1. Normative References ......................................21\n      8.2.
    Informative References ....................................21\n   Appendix A.
    ASN.1 Modules .........................................23\n     A.1. 2008 ASN.1
    Module ..........................................23\n     A.2. 1988 ASN.1 Module
    ..........................................28\n   Appendix B. Example of Static
    DH Proof-of-Possession ..............30\n   Appendix C. Example of Discrete Log
    Signature .....................38\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Among the responsibilities of a Certification Authority
    (CA) in\n   issuing certificates is a requirement that it verifies the identity\n
    \  for the entity to which it is issuing a certificate and that the\n   private
    key for the public key to be placed in the certificate is in\n   the possession
    of that entity.  The process of validating that the\n   private key is held by
    the requester of the certificate is called\n   Proof-of-Possession (POP).  Further
    details on why POP is important\n   can be found in Appendix C of RFC 4211 [CRMF].\n
    \  This document is designed to deal with the problem of how to support\n   POP
    for encryption-only keys.  PKCS #10 [RFC2986] and the Certificate\n   Request
    Message Format (CRMF) [CRMF] both define syntaxes for\n   Certification Requests.
    \ However, while CRMF supports an alternative\n   method to support POP for encryption-only
    keys, PKCS #10 does not.\n   PKCS #10 assumes that the public key being requested
    for\n   certification corresponds to an algorithm that is capable of\n   producing
    a POP by a signature operation.  Diffie-Hellman (DH) and\n   Elliptic Curve Diffie-Hellman
    (ECDH) are key agreement algorithms\n   and, as such, cannot be directly used
    for signing or encryption.\n   This document describes a set of three POP algorithms.
    \ Two methods\n   use the key agreement process (one for DH and one for ECDH)
    to\n   provide a shared secret as the basis of an integrity check value.\n   For
    these methods, the value is constructed for a specific recipient/\n   verifier
    by using a public key of that verifier.  The third method\n   uses a modified
    signature algorithm (for DH).  This method allows for\n   arbitrary verifiers.\n
    \  It should be noted that we did not create an algorithm that parallels\n   the
    Elliptical Curve Digital Signature Algorithm (ECDSA) as was done\n   for the Digital
    Signature Algorithm (DSA).  When using ECDH, the\n   common practice is to use
    one of a set of predefined curves; each of\n   these curves has been designed
    to be paired with one of the commonly\n   used hash algorithms.  This differs
    in practice from the DH case\n   where the common practice is to generate a set
    of group parameters,\n   either on a single machine or for a given community,
    that are aligned\n   to encryption algorithms rather than hash algorithms.  The\n
    \  implication is that, if a key has the ability to perform the modified\n   DSA
    algorithm for ECDSA, it should be able to use the correct hash\n   algorithm and
    perform the regular ECDSA signature algorithm with the\n   correctly sized hash.\n"
  title: 1.  Introduction
- contents:
  - "1.1.  Changes since RFC 2875\n   The following changes have been made:\n   o
    \ The Static DH POP algorithm has been rewritten for\n      parameterization of
    the hash algorithm and the Message\n      Authentication Code (MAC) algorithm.\n
    \  o  New instances of the Static DH POP algorithm have been created\n      using
    the Hashed Message Authentication Code (HMAC) paired with\n      the SHA-224,
    SHA-256, SHA-384, and SHA-512 hash algorithms.\n      However, the current SHA-1
    algorithm remains identical.\n   o  The Discrete Logarithm Signature algorithm
    has been rewritten for\n      parameterization of the hash algorithm.\n   o  New
    instances of the Discrete Logarithm Signature have been\n      created for the
    SHA-224, SHA-256, SHA-384, and SHA-512 hash\n      functions.  However, the current
    SHA-1 algorithm remains\n      identical.\n   o  A new Static ECDH POP algorithm
    has been added.\n   o  New instances of the Static ECDH POP algorithm have been
    created\n      using HMAC paired with the SHA-224, SHA-256, SHA-384, and SHA-512\n
    \     hash functions.\n"
  title: 1.1.  Changes since RFC 2875
- contents:
  - "1.2.  Requirements Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n
    \  When the words are in lower case they have their natural language\n   meaning.\n"
  title: 1.2.  Requirements Terminology
- contents:
  - "2.  Terminology\n   The following definitions will be used in this document:\n
    \  DH certificate = a certificate whose SubjectPublicKey is a DH public\n   value
    and is signed with any signature algorithm (e.g., RSA or DSA).\n   ECDH certificate
    = a certificate whose SubjectPublicKey is an ECDH\n   public value and is signed
    with any signature algorithm (e.g., RSA\n   or ECDSA).\n   Proof-of-Possession
    (POP) = a means that provides a method for a\n   second party to perform an algorithm
    to establish with some degree of\n   assurance that the first party does possess
    and has the ability to\n   use a private key.  The reasoning behind doing POP
    can be found in\n   Appendix C in [CRMF].\n"
  title: 2.  Terminology
- contents:
  - "3.  Notation\n   This section describes mathematical notations, conventions,
    and\n   symbols used throughout this document.\n     a | b          : Concatenation
    of a and b\n     a ^ b          : a raised to the power of b\n     a mod b        :
    a modulo b\n     a / b          : a divided by b using integer division\n     a
    * b          : a times b\n                      Depending on context, multiplication
    may be within\n                      an EC or normal multiplication\n     KDF(a)
    \        : Key Derivation Function producing a value from a\n     MAC(a, b)      :
    Message Authentication Code function where\n                      a is the key
    and b is the text\n     LEFTMOST(a, b) : Return the b left most bits of a\n     FLOOR(a)
    \      : Return n where n is the largest integer such that\n                      n
    <= a\n   Details on how to implement the HMAC version of a MAC function used\n
    \  in this document can be found in RFC 2104 [RFC2104], RFC 6234\n   [RFC6234],
    and RFC 4231 [RFC4231].\n"
  title: 3.  Notation
- contents:
  - "4.  Static DH Proof-of-Possession Process\n   The Static DH POP algorithm is
    set up to use a Key Derivation\n   Function (KDF) and a MAC.  This algorithm requires
    that a common set\n   of group parameters be used by both the creator and verifier
    of the\n   POP value.\n   The steps for creating a DH POP are:\n   1.  An entity
    (E) chooses the group parameters for a DH key\n       agreement.\n       This
    is done simply by selecting the group parameters from a\n       certificate for
    the recipient of the POP process.  A certificate\n       with the correct group
    parameters has to be available.\n       Let the common DH parameters be g and
    p; and let the DH key pair\n       from the certificate be known as the recipient
    (R) key pair (Rpub\n       and Rpriv).\n       Rpub = g^x mod p (where x=Rpriv,
    the private DH value)\n   2.  The entity generates a DH public/private key pair
    using the group\n       parameters from step 1.\n       For an entity (E):\n       Epriv
    = DH private value = y\n       Epub = DH public value = g^y mod p\n   3.  The
    POP computation process will then consist of the following\n       steps:\n       (a)
    \ The value to be signed (text) is obtained.  (For a PKCS #10\n            object,
    the value is the DER-encoded\n            certificationRequestInfo field represented
    as an octet\n            string.)\n       (b)  A shared DH secret is computed
    as follows:\n            shared secret = ZZ = g^(x*y) mod p\n            [This
    is done by E as Rpub^y and by the recipient as Epub^x,\n            where Rpub
    is retrieved from the recipient's DH certificate\n            (or is provided
    in the protocol) and Epub is retrieved from\n            the Certification Request.]\n
    \      (c)  A temporary key K is derived from the shared secret ZZ as\n            follows:\n
    \              K = KDF(LeadingInfo | ZZ | TrailingInfo)\n               LeadingInfo
    ::= Subject Distinguished Name from\n               recipient's certificate\n
    \              TrailingInfo ::= Issuer Distinguished Name from\n               recipient's
    certificate\n       (d)  Using the defined MAC function, compute MAC(K, text).\n
    \  The POP verification process requires the recipient to carry out\n   steps
    (a) through (d) and then simply compare the result of step (d)\n   with what it
    received as the signature component.  If they match,\n   then the following can
    be concluded:\n   (a)  The entity possesses the private key corresponding to the
    public\n        key in the Certification Request because it needs the private\n
    \       key to calculate the shared secret; and\n   (b)  Only the recipient that
    the entity sent the request to could\n        actually verify the request because
    it would require its own\n        private key to compute the same shared secret.
    \ In the case\n        where the recipient is a CA, this protects the entity from\n
    \       rogue CAs.\n"
  title: 4.  Static DH Proof-of-Possession Process
- contents:
  - "4.1.  ASN.1 Encoding\n   The algorithm outlined above allows for the use of an
    arbitrary hash\n   function in computing the temporary key and the MAC algorithm.
    \ In\n   this specification, we define object identifiers for the SHA-1,\n   SHA-224,
    SHA-256, SHA-384, and SHA-512 hash values and use HMAC for\n   the MAC algorithm.
    \ The ASN.1 structures associated with the Static\n   DH POP algorithm are:\n
    \     DhSigStatic ::= SEQUENCE {\n          issuerAndSerial IssuerAndSerialNumber
    OPTIONAL,\n          hashValue       MessageDigest\n      }\n      sa-dhPop-static-sha1-hmac-sha1
    SIGNATURE-ALGORITHM ::= {\n           IDENTIFIER id-dhPop-static-sha1-hmac-sha1\n
    \          VALUE DhSigStatic\n           PARAMS ARE absent\n           PUBLIC-KEYS
    { pk-dh }\n      }\n      id-dh-sig-hmac-sha1 OBJECT IDENTIFIER ::= {\n           id-pkix
    id-alg(6) 3\n      }\n      id-dhPop-static-sha1-hmac-sha1 OBJECT IDENTIFIER ::=\n
    \          id-dh-sig-hmac-sha1\n      sa-dhPop-static-sha224-hmac-sha224 SIGNATURE-ALGORITHM
    ::= {\n           IDENTIFIER id-alg-dhPop-static-sha224-hmac-sha224\n           VALUE
    DhSigStatic\n           PARAMS ARE absent\n           PUBLIC-KEYS { pk-dh }\n
    \     }\n      id-alg-dhPop-static-sha224-hmac-sha224 OBJECT IDENTIFIER ::= {\n
    \          id-pkix id-alg(6) 15\n      }\n      sa-dhPop-static-sha256-hmac-sha256
    SIGNATURE-ALGORITHM ::= {\n           IDENTIFIER id-alg-dhPop-static-sha256-hmac-sha256\n
    \          VALUE DhSigStatic\n           PARAMS ARE absent\n           PUBLIC-KEYS
    { pk-dh }\n      }\n      id-alg-dhPop-static-sha256-hmac-sha256 OBJECT IDENTIFIER
    ::= {\n           id-pkix id-alg(6) 16\n      }\n      sa-dhPop-static-sha384-hmac-sha384
    SIGNATURE-ALGORITHM ::= {\n           IDENTIFIER id-alg-dhPop-static-sha384-hmac-sha384\n
    \          VALUE DhSigStatic\n           PARAMS ARE absent\n           PUBLIC-KEYS
    { pk-dh }\n      }\n      id-alg-dhPop-static-sha384-hmac-sha384 OBJECT IDENTIFIER
    ::= {\n           id-pkix id-alg(6) 17\n      }\n      sa-dhPop-static-sha512-hmac-sha512
    SIGNATURE-ALGORITHM ::= {\n           IDENTIFIER id-alg-dhPop-static-sha512-hmac-sha512\n
    \          VALUE DhSigStatic\n           PARAMS ARE absent\n           PUBLIC-KEYS
    { pk-dh }\n      }\n      id-alg-dhPop-static-sha512-hmac-sha512 OBJECT IDENTIFIER
    ::= {\n           id-pkix id-alg(6) 18\n      }\n   In the above ASN.1, the following
    items are defined:\n   DhSigStatic\n      This ASN.1 type structure holds the
    information describing the\n      signature.  The structure has the following
    fields:\n      issuerAndSerial\n         This field contains the issuer name and
    serial number of the\n         certificate from which the public key was obtained.
    \ The\n         issuerAndSerial field is omitted if the public key did not come\n
    \        from a certificate.\n      hashValue\n         This field contains the
    result of the MAC operation in\n         step 3(d) (Section 4).\n   sa-dhPop-static-sha1-hmac-sha1\n
    \     An ASN.1 SIGNATURE-ALGORITHM object that associates together the\n      information
    describing a signature algorithm.  The structure\n      DhSigStatic represents
    the signature value, and the parameters\n      MUST be absent.\n   id-dhPop-static-sha1-hmac-sha1\n
    \     This OID identifies the Static DH POP algorithm that uses SHA-1 as\n      the
    KDF and HMAC-SHA1 as the MAC function.  The new OID was\n      created for naming
    consistency with the other OIDs defined here.\n      The value of the OID is the
    same value as id-dh-sig-hmac-sha1,\n      which was defined in the previous version
    of this document\n      [RFC2875].\n   sa-dhPop-static-sha224-hmac-sha224\n      An
    ASN.1 SIGNATURE-ALGORITHM object that associates together the\n      information
    describing this signature algorithm.  The structure\n      DhSigStatic represents
    the signature value, and the parameters\n      MUST be absent.\n   id-dhPop-static-sha224-hmac-sha224\n
    \     This OID identifies the Static DH POP algorithm that uses SHA-224\n      as
    the KDF and HMAC-SHA224 as the MAC function.\n   sa-dhPop-static-sha256-hmac-sha256\n
    \     An ASN.1 SIGNATURE-ALGORITHM object that associates together the\n      information
    describing this signature algorithm.  The structure\n      DhSigStatic represents
    the signature value, and the parameters\n      MUST be absent.\n   id-dhPop-static-sha256-hmac-sha256\n
    \     This OID identifies the Static DH POP algorithm that uses SHA-256\n      as
    the KDF and HMAC-SHA256 as the MAC function.\n   sa-dhPop-static-sha384-hmac-sha384\n
    \     An ASN.1 SIGNATURE-ALGORITHM object that associates together the\n      information
    describing this signature algorithm.  The structure\n      DhSigStatic represents
    the signature value, and the parameters\n      MUST be absent.\n   id-dhPop-static-sha384-hmac-sha384\n
    \     This OID identifies the Static DH POP algorithm that uses SHA-384\n      as
    the KDF and HMAC-SHA384 as the MAC function.\n   sa-dhPop-static-sha512-hmac-sha512\n
    \     An ASN.1 SIGNATURE-ALGORITHM object that associates together the\n      information
    describing this signature algorithm.  The structure\n      DhSigStatic represents
    the signature value, and the parameters\n      MUST be absent.\n   id-dhPop-static-sha512-hmac-sha512\n
    \     This OID identifies the Static DH POP algorithm that uses SHA-512\n      as
    the KDF and HMAC-SHA512 as the MAC function.\n"
  title: 4.1.  ASN.1 Encoding
- contents:
  - "5.  Discrete Logarithm Signature\n   When a single set of parameters is used
    for a large group of keys,\n   the chance that a collision will occur in the set
    of keys, either by\n   accident or design, increases as the number of keys used
    increases.\n   A large number of keys from a single parameter set also encourages\n
    \  the use of brute force methods of attack, as the entire set of keys\n   in
    the parameters can be attacked in a single operation rather than\n   having to
    attack each key parameter set individually.\n   For this reason, we need to create
    a POP for DH keys that does not\n   require the use of a common set of parameters.\n
    \  This POP algorithm is based on DSA, but we have removed the\n   restrictions
    dealing with the hash and key sizes imposed by the\n   [FIPS-186-3] standard.
    \ The use of this method does impose some\n   additional restrictions on the set
    of keys that may be used; however,\n   if the key-generation algorithm documented
    in [RFC2631] is used, the\n   required restrictions are met.  The additional restrictions
    are the\n   requirement for the existence of a q parameter.  Adding the q\n   parameter
    is generally accepted as a good practice, as it allows for\n   checking of small
    subgroup attacks.\n   The following definitions are used in the rest of this section:\n
    \  p is a large prime\n   g = h^((p-1)/q) mod p,\n   where h is any integer 1
    < h < p-1 such that h^((p-1)/q) mod p > 1\n   (g has order q mod p)\n   q is a
    large prime\n   j is a large integer such that p = q*j + 1\n   x is a randomly
    or pseudo-randomly generated integer with 1 < x < q\n   y = g^x mod p\n   HASH
    is a hash function such that\n   b = the output size of HASH in bits\n   Note:
    These definitions match the ones in [RFC2631].\n"
  title: 5.  Discrete Logarithm Signature
- contents:
  - "5.1.  Expanding the Digest Value\n   Besides the addition of a q parameter, [FIPS-186-3]
    also imposes size\n   restrictions on the parameters.  The length of q must be
    160 bits\n   (matching the output length of the SHA-1 digest algorithm), and the\n
    \  length of p must be 1024 bits.  The size restriction on p is\n   eliminated
    in this document, but the size restriction on q is\n   replaced with the requirement
    that q must be at least b bits in\n   length.  (If the hash function is SHA-1,
    then b=160 bits and the size\n   restriction on b is identical with that in [FIPS-186-3].)
    \ Given that\n   there is not a random length-hashing algorithm, a hash value
    of the\n   message will need to be derived such that the hash is in the range\n
    \  from 0 to q-1.  If the length of q is greater than b, then a method\n   must
    be provided to expand the hash.\n   The method for expanding the digest value
    used in this section does\n   not provide any additional security beyond the b
    bits provided by the\n   hash algorithm.  For this reason, the hash algorithm
    should be the\n   largest size possible to match q.  The value being signed is\n
    \  increased mainly to enhance the difficulty of reversing the signature\n   process.\n
    \  This algorithm produces m, the value to be signed.\n   Let L = the size of
    q (i.e., 2^L <= q < 2^(L+1)).\n   Let M be the original message to be signed.\n
    \  Let b be the length of HASH output.\n   1.  Compute d = HASH(M), the digest
    of the original message.\n   2.  If L == b, then m = d.\n   3.  If L > b, then
    follow steps (a) through (d) below.\n       (a)  Set n = FLOOR(L / b)\n       (b)
    \ Set m = d, the initial computed digest value\n       (c)  For i = 0 to n - 1\n
    \           m = m | HASH(m)\n       (d)  m = LEFTMOST(m, L-1)\n   Thus, the final
    result of the process meets the criteria that\n   0 <= m < q.\n"
  title: 5.1.  Expanding the Digest Value
- contents:
  - "5.2.  Signature Computation Algorithm\n   The signature algorithm produces the
    pair of values (r, s), which is\n   the signature.  The signature is computed
    as follows:\n   Given m, the value to be signed, as well as the parameters defined\n
    \  earlier in Section 5:\n   1.  Generate a random or pseudo-random integer k,
    such that\n       0 < k-1 < q.\n   2.  Compute r = (g^k mod p) mod q.\n   3.  If
    r is zero, repeat from step 1.\n   4.  Compute s = ((k^-1) * (m + x*r)) mod q.\n
    \  5.  If s is zero, repeat from step 1.\n"
  title: 5.2.  Signature Computation Algorithm
- contents:
  - "5.3.  Signature Verification Algorithm\n   The signature verification process
    is far more complicated than is\n   normal for DSA, as some assumptions about
    the validity of parameters\n   cannot be taken for granted.\n   Given a value
    m to be validated, the signature value pair (r, s) and\n   the parameters for
    the key:\n   1.  Perform a strong verification that p is a prime number.\n   2.
    \ Perform a strong verification that q is a prime number.\n   3.  Verify that
    q is a factor of p-1; if any of the above checks\n       fail, then the signature
    cannot be verified and must be\n       considered a failure.\n   4.  Verify that
    r and s are in the range [1, q-1].\n   5.  Compute w = (s^-1) mod q.\n   6.  Compute
    u1 = m*w mod q.\n   7.  Compute u2 = r*w mod q.\n   8.  Compute v = ((g^u1 * y^u2)
    mod p) mod q.\n   9.  Compare v and r; if they are the same, then the signature\n
    \      verified correctly.\n"
  title: 5.3.  Signature Verification Algorithm
- contents:
  - "5.4.  ASN.1 Encoding\n   The signature algorithm is parameterized by the hash
    algorithm.  The\n   ASN.1 structures associated with the Discrete Logarithm Signature\n
    \  algorithm are:\n      sa-dhPop-SHA1 SIGNATURE-ALGORITHM ::= {\n         IDENTIFIER
    id-alg-dh-pop\n         VALUE DSA-Sig-Value\n         PARAMS TYPE DomainParameters
    ARE preferredAbsent\n         HASHES { mda-sha1 }\n         PUBLIC-KEYS { pk-dh
    }\n      }\n      id-alg-dhPop-sha1 OBJECT IDENTIFIER ::= id-alg-dh-pop\n      id-alg-dh-pop
    OBJECT IDENTIFIER ::= { id-pkix id-alg(6) 4 }\n      sa-dhPop-sha224 SIGNATURE-ALGORITHM
    ::= {\n         IDENTIFIER id-alg-dhPop-sha224\n         VALUE DSA-Sig-Value\n
    \        PARAMS TYPE DomainParameters ARE preferredAbsent\n         HASHES { mda-sha224
    }\n         PUBLIC-KEYS { pk-dh }\n      }\n      id-alg-dhPop-sha224 OBJECT IDENTIFIER
    ::= {\n           id-pkix id-alg(6) 5\n      }\n      sa-dhPop-sha256 SIGNATURE-ALGORITHM
    ::= {\n         IDENTIFIER id-alg-dhPop-sha256\n         VALUE DSA-Sig-Value\n
    \        PARAMS TYPE DomainParameters ARE preferredAbsent\n         HASHES { mda-sha256
    }\n         PUBLIC-KEYS { pk-dh }\n      }\n      id-alg-dhPop-sha256 OBJECT IDENTIFIER
    ::= {\n           id-pkix id-alg(6) 6\n      }\n      sa-dhPop-sha384 SIGNATURE-ALGORITHM
    ::= {\n         IDENTIFIER id-alg-dhPop-sha384\n         VALUE DSA-Sig-Value\n
    \        PARAMS TYPE DomainParameters ARE preferredAbsent\n         HASHES { mda-sha384
    }\n         PUBLIC-KEYS { pk-dh }\n      }\n      id-alg-dhPop-sha384 OBJECT IDENTIFIER
    ::= {\n           id-pkix id-alg(6) 7\n      }\n      sa-dhPop-sha512 SIGNATURE-ALGORITHM
    ::= {\n         IDENTIFIER id-alg-dhPop-sha512\n         VALUE DSA-Sig-Value\n
    \        PARAMS TYPE DomainParameters ARE preferredAbsent\n         HASHES { mda-sha512
    }\n         PUBLIC-KEYS { pk-dh }\n      }\n      id-alg-dhPop-sha512 OBJECT IDENTIFIER
    ::= {\n           id-pkix id-alg(6) 8\n      }\n   In the above ASN.1, the following
    items are defined:\n   sa-dhPop-sha1\n      A SIGNATURE-ALGORITHM object that
    associates together the\n      information describing this signature algorithm.
    \ The structure\n      DSA-Sig-Value represents the signature value, and the structure\n
    \     DomainParameters SHOULD be omitted in the signature but MUST be\n      present
    in the associated key request.\n   id-alg-dhPop-sha1\n      This OID identifies
    the Discrete Logarithm Signature using SHA-1\n      as the hash algorithm.  The
    new OID was created for naming\n      consistency with the others defined here.
    \ The value of the OID is\n      the same as id-alg-dh-pop, which was defined
    in the previous\n      version of this document [RFC2875].\n   sa-dhPop-sha224\n
    \     A SIGNATURE-ALGORITHM object that associates together the\n      information
    describing this signature algorithm.  The structure\n      DSA-Sig-Value represents
    the signature value, and the structure\n      DomainParameters SHOULD be omitted
    in the signature but MUST be\n      present in the associated key request.\n   id-alg-dhPop-sha224\n
    \     This OID identifies the Discrete Logarithm Signature using SHA-224\n      as
    the hash algorithm.\n   sa-dhPop-sha256\n      A SIGNATURE-ALGORITHM object that
    associates together the\n      information describing this signature algorithm.
    \ The structure\n      DSA-Sig-Value represents the signature value, and the structure\n
    \     DomainParameters SHOULD be omitted in the signature but MUST be\n      present
    in the associated key request.\n   id-alg-dhPop-sha256\n      This OID identifies
    the Discrete Logarithm Signature using SHA-256\n      as the hash algorithm.\n
    \  sa-dhPop-sha384\n      A SIGNATURE-ALGORITHM object that associates together
    the\n      information describing this signature algorithm.  The structure\n      DSA-Sig-Value
    represents the signature value, and the structure\n      DomainParameters SHOULD
    be omitted in the signature but MUST be\n      present in the associated key request.\n
    \  id-alg-dhPop-sha384\n      This OID identifies the Discrete Logarithm Signature
    using SHA-384\n      as the hash algorithm.\n   sa-dhPop-sha512\n      A SIGNATURE-ALGORITHM
    object that associates together the\n      information describing this signature
    algorithm.  The structure\n      DSA-Sig-Value represents the signature value,
    and the structure\n      DomainParameters SHOULD be omitted in the signature but
    MUST be\n      present in the associated key request.\n   id-alg-dhPop-sha512\n
    \     This OID identifies the Discrete Logarithm Signature using SHA-512\n      as
    the hash algorithm.\n"
  title: 5.4.  ASN.1 Encoding
- contents:
  - "6.  Static ECDH Proof-of-Possession Process\n   The Static ECDH POP algorithm
    is set up to use a KDF and a MAC.  This\n   algorithm requires that a common set
    of group parameters be used by\n   both the creator and the verifier of the POP
    value.  Full details of\n   how Elliptic Curve Cryptography (ECC) works can be
    found in RFC 6090\n   [RFC6090].\n   The steps for creating an ECDH POP are:\n
    \  1.  An entity (E) chooses the group parameters for an ECDH key\n       agreement.\n
    \      This is done simply by selecting the group parameters from a\n       certificate
    for the recipient of the POP process.  A certificate\n       with the correct
    group parameters has to be available.\n       The ECDH parameters can be identified
    either by a named group or\n       by a set of curve parameters.  Section 2.3.5
    of RFC 3279\n       [RFC3279] documents how the parameters are encoded for PKIX\n
    \      certificates.  For PKIX-based applications, the parameters will\n       almost
    always be defined by a named group.  Designate G as the\n       group from the
    ECDH parameters.  Let the ECDH key pair associated\n       with the certificate
    be known as the recipient key pair (Rpub\n       and Rpriv).\n       Rpub = Rpriv
    * G\n   2.  The entity generates an ECDH public/private key pair using the\n       parameters
    from step 1.\n       For an entity (E):\n       Epriv = entity private value\n
    \      Epub = ECDH public point = Epriv * G\n   3.  The POP computation process
    will then consist of the following\n       steps:\n       (a)  The value to be
    signed (text) is obtained.  (For a PKCS #10\n            object, the value is
    the DER-encoded\n            certificationRequestInfo field represented as an
    octet\n            string.)\n       (b)  A shared ECDH secret is computed as follows:\n
    \           shared secret point (x, y) = Epriv * Rpub = Rpriv * Epub\n            shared
    secret value ZZ is the x coordinate of the computed\n            point\n       (c)
    \ A temporary key K is derived from the shared secret ZZ as\n            follows:\n
    \           K = KDF(LeadingInfo | ZZ | TrailingInfo)\n            LeadingInfo
    ::= Subject Distinguished Name from certificate\n            TrailingInfo ::=
    Issuer Distinguished Name from certificate\n       (d)  Compute MAC(K, text).\n
    \  The POP verification process requires the recipient to carry out\n   steps
    (a) through (d) and then simply compare the result of step (d)\n   with what it
    received as the signature component.  If they match,\n   then the following can
    be concluded:\n   (a)  The entity possesses the private key corresponding to the
    public\n        key in the Certification Request because it needed the private\n
    \       key to calculate the shared secret; and\n   (b)  Only the recipient that
    the entity sent the request to could\n        actually verify the request because
    it would require its own\n        private key to compute the same shared secret.
    \ In the case\n        where the recipient is a CA, this protects the entity from\n
    \       rogue CAs.\n"
  title: 6.  Static ECDH Proof-of-Possession Process
- contents:
  - "6.1.  ASN.1 Encoding\n   The algorithm outlined above allows for the use of an
    arbitrary hash\n   function in computing the temporary key and the MAC value.
    \ In this\n   specification, we define object identifiers for the SHA-1, SHA-224,\n
    \  SHA-256, SHA-384, and SHA-512 hash values.  The ASN.1 structures\n   associated
    with the Static ECDH POP algorithm are:\n      id-alg-ecdhPop-static-sha224-hmac-sha224
    OBJECT IDENTIFIER ::= {\n         id-pkix id-alg(6) 25\n      }\n      sa-ecdhPop-sha224-hmac-sha224
    SIGNATURE-ALGORITHM ::= {\n         IDENTIFIER id-alg-ecdhPop-static-sha224-hmac-sha224\n
    \        VALUE DhSigStatic\n         PARAMS ARE absent\n         PUBLIC-KEYS {
    pk-ec }\n      }\n      id-alg-ecdhPop-static-sha256-hmac-sha256 OBJECT IDENTIFIER
    ::= {\n         id-pkix id-alg(6) 26\n      }\n      sa-ecdhPop-sha256-hmac-sha256
    SIGNATURE-ALGORITHM ::= {\n         IDENTIFIER id-alg-ecdhPop-static-sha256-hmac-sha256\n
    \        VALUE DhSigStatic\n         PARAMS ARE absent\n         PUBLIC-KEYS {
    pk-ec }\n      }\n      id-alg-ecdhPop-static-sha384-hmac-sha384 OBJECT IDENTIFIER
    ::= {\n         id-pkix id-alg(6) 27\n      }\n      sa-ecdhPop-sha384-hmac-sha384
    SIGNATURE-ALGORITHM ::= {\n         IDENTIFIER id-alg-ecdhPop-static-sha384-hmac-sha384\n
    \        VALUE DhSigStatic\n         PARAMS ARE absent\n         PUBLIC-KEYS {
    pk-ec }\n      }\n      id-alg-ecdhPop-static-sha512-hmac-sha512 OBJECT IDENTIFIER
    ::= {\n         id-pkix id-alg(6) 28\n      }\n      sa-ecdhPop-sha512-hmac-sha512
    SIGNATURE-ALGORITHM ::= {\n         IDENTIFIER id-alg-ecdhPop-static-sha512-hmac-sha512\n
    \        VALUE DhSigStatic\n         PARAMS ARE absent\n         PUBLIC-KEYS {
    pk-ec }\n      }\n   These items reuse the DhSigStatic structure defined in Section
    4.\n   When used with these algorithms, the value to be placed in the field\n
    \  hashValue is that computed in step 3(d) (Section 6).  In the above\n   ASN.1,
    the following items are defined:\n   sa-ecdhPop-static-sha224-hmac-sha224\n      An
    ASN.1 SIGNATURE-ALGORITHM object that associates together the\n      information
    describing this signature algorithm.  The structure\n      DhSigStatic represents
    the signature value, and the parameters\n      MUST be absent.\n   id-ecdhPop-static-sha224-hmac-sha224\n
    \     This OID identifies the Static ECDH POP algorithm that uses\n      SHA-224
    as the KDF and HMAC-SHA224 as the MAC function.\n   sa-ecdhPop-static-sha256-hmac-sha256\n
    \     An ASN.1 SIGNATURE-ALGORITHM object that associates together the\n      information
    describing this signature algorithm.  The structure\n      DhSigStatic represents
    the signature value, and the parameters\n      MUST be absent.\n   id-ecdhPop-static-sha256-hmac-sha256\n
    \     This OID identifies the Static ECDH POP algorithm that uses\n      SHA-256
    as the KDF and HMAC-SHA256 as the MAC function.\n   sa-ecdhPop-static-sha384-hmac-sha384\n
    \     An ASN.1 SIGNATURE-ALGORITHM object that associates together the\n      information
    describing this signature algorithm.  The structure\n      DhSigStatic represents
    the signature value, and the parameters\n      MUST be absent.\n   id-ecdhPop-static-sha384-hmac-sha384\n
    \     This OID identifies the Static ECDH POP algorithm that uses\n      SHA-384
    as the KDF and HMAC-SHA384 as the MAC function.\n   sa-ecdhPop-static-sha512-hmac-sha512\n
    \     An ASN.1 SIGNATURE-ALGORITHM object that associates together the\n      information
    describing this signature algorithm.  The structure\n      DhSigStatic represents
    the signature value, and the parameters\n      MUST be absent.\n   id-ecdhPop-static-sha512-hmac-sha512\n
    \     This OID identifies the Static ECDH POP algorithm that uses\n      SHA-512
    as the KDF and HMAC-SHA512 as the MAC function.\n"
  title: 6.1.  ASN.1 Encoding
- contents:
  - "7.  Security Considerations\n   None of the algorithms defined in this document
    are meant for use in\n   general purpose situations.  These algorithms are designed
    and\n   purposed solely for use in doing POP with PKCS #10 and CRMF\n   constructs.\n
    \  In the Static DH POP and Static ECDH POP algorithms, an appropriate\n   value
    can be produced by either party.  Thus, these algorithms only\n   provide integrity
    and not origination service.  The Discrete\n   Logarithm Signature algorithm provides
    both integrity checking and\n   origination checking.\n   All the security in
    this system is provided by the secrecy of the\n   private keying material.  If
    either sender or recipient private keys\n   are disclosed, all messages sent or
    received using those keys are\n   compromised.  Similarly, the loss of a private
    key results in an\n   inability to read messages sent using that key.\n   Selection
    of parameters can be of paramount importance.  In the\n   selection of parameters,
    one must take into account the community/\n   group of entities that one wishes
    to be able to communicate with.  In\n   choosing a set of parameters, one must
    also be sure to avoid small\n   groups.  [FIPS-186-3] Appendixes A and B.2 contain
    information on the\n   selection of parameters for DH.  Section 10 of [RFC6090]
    contains\n   information on the selection of parameters for ECC.  The practices\n
    \  outlined in these documents will lead to better selection of\n   parameters.\n"
  title: 7.  Security Considerations
- contents:
  - '8.  References

    '
  title: 8.  References
- contents:
  - "8.1.  Normative References\n   [RFC2104]     Krawczyk, H., Bellare, M., and R.
    Canetti, \"HMAC:\n                 Keyed-Hashing for Message Authentication\",
    RFC 2104,\n                 February 1997.\n   [RFC2119]     Bradner, S., \"Key
    words for use in RFCs to Indicate\n                 Requirement Levels\", BCP
    14, RFC 2119, March 1997.\n   [RFC2631]     Rescorla, E., \"Diffie-Hellman Key
    Agreement Method\",\n                 RFC 2631, June 1999.\n   [RFC2986]     Nystrom,
    M. and B. Kaliski, \"PKCS #10: Certification\n                 Request Syntax
    Specification Version 1.7\", RFC 2986,\n                 November 2000.\n   [RFC4231]
    \    Nystrom, M., \"Identifiers and Test Vectors for HMAC-\n                 SHA-224,
    HMAC-SHA-256, HMAC-SHA-384, and HMAC-SHA-512\",\n                 RFC 4231, December
    2005.\n   [RFC6234]     Eastlake, D. and T. Hansen, \"US Secure Hash Algorithms\n
    \                (SHA and SHA-based HMAC and HKDF)\", RFC 6234, May 2011.\n"
  title: 8.1.  Normative References
- contents:
  - "8.2.  Informative References\n   [CRMF]        Schaad, J., \"Internet X.509 Public
    Key Infrastructure\n                 Certificate Request Message Format (CRMF)\",
    RFC 4211,\n                 September 2005.\n   [FIPS-186-3]  National Institute
    of Standards and Technology,\n                 \"Digital Signature Standard (DSS)\",
    Federal Information\n                 Processing Standards Publication 186-3,
    June 2009,\n                 <http://www.nist.gov/>.\n   [RFC2875]     Prafullchandra,
    H. and J. Schaad, \"Diffie-Hellman\n                 Proof-of-Possession Algorithms\",
    RFC 2875, July 2000.\n   [RFC3279]     Bassham, L., Polk, W., and R. Housley,
    \"Algorithms and\n                 Identifiers for the Internet X.509 Public Key\n
    \                Infrastructure Certificate and Certificate Revocation\n                 List
    (CRL) Profile\", RFC 3279, April 2002.\n   [RFC5912]     Hoffman, P. and J. Schaad,
    \"New ASN.1 Modules for the\n                 Public Key Infrastructure Using
    X.509 (PKIX)\",\n                 RFC 5912, June 2010.\n   [RFC6090]     McGrew,
    D., Igoe, K., and M. Salter, \"Fundamental\n                 Elliptic Curve Cryptography
    Algorithms\", RFC 6090,\n                 February 2011.\n"
  title: 8.2.  Informative References
- contents:
  - 'Appendix A.  ASN.1 Modules

    '
  title: Appendix A.  ASN.1 Modules
- contents:
  - "A.1.  2008 ASN.1 Module\n   This appendix contains an ASN.1 module that is conformant
    with the\n   2008 version of ASN.1.  This module references the object classes\n
    \  defined by [RFC5912] to more completely describe all of the\n   associations
    between the elements defined in this document.  Where a\n   difference exists
    between the module in this section and the 1988\n   module, the 2008 module is
    the definitive module.\n   DH-Sign\n      { iso(1) identified-organization(3)
    dod(6) internet(1)\n        security(5) mechanisms(5) pkix(7) id-mod(0)\n        id-mod-dhSign-2012-08(80)
    }\n   DEFINITIONS IMPLICIT TAGS ::=\n   BEGIN\n   -- EXPORTS ALL\n   -- The types
    and values defined in this module are exported for use\n   -- in the other ASN.1
    modules.  Other applications may use them\n   -- for their own purposes.\n   IMPORTS\n
    \     SIGNATURE-ALGORITHM\n      FROM AlgorithmInformation-2009\n         { iso(1)
    identified-organization(3) dod(6) internet(1)\n         security(5) mechanisms(5)
    pkix(7) id-mod(0)\n          id-mod-algorithmInformation-02(58) }\n      IssuerAndSerialNumber,
    MessageDigest\n      FROM CryptographicMessageSyntax-2010\n         { iso(1) member-body(2)
    us(840) rsadsi(113549) pkcs(1)\n           pkcs-9(9) smime(16) modules(0) id-mod-cms-2009(58)
    }\n      DSA-Sig-Value, DomainParameters, ECDSA-Sig-Value,\n      mda-sha1, mda-sha224,
    mda-sha256, mda-sha384, mda-sha512,\n      pk-dh, pk-ec\n      FROM PKIXAlgs-2009\n
    \        { iso(1) identified-organization(3) dod(6) internet(1)\n           security(5)
    mechanisms(5) pkix(7) id-mod(0)\n           id-mod-pkix1-algorithms2008-02(56)
    }\n      id-pkix\n      FROM PKIX1Explicit-2009\n         { iso(1) identified-organization(3)
    dod(6) internet(1)\n           security(5) mechanisms(5) pkix(7) id-mod(0)\n           id-mod-pkix1-explicit-02(51)
    };\n      DhSigStatic ::= SEQUENCE {\n          issuerAndSerial IssuerAndSerialNumber
    OPTIONAL,\n          hashValue       MessageDigest\n      }\n      sa-dhPop-static-sha1-hmac-sha1
    SIGNATURE-ALGORITHM ::= {\n           IDENTIFIER id-dhPop-static-sha1-hmac-sha1\n
    \          VALUE DhSigStatic\n           PARAMS ARE absent\n           PUBLIC-KEYS
    { pk-dh }\n      }\n      id-dh-sig-hmac-sha1 OBJECT IDENTIFIER ::= {\n           id-pkix
    id-alg(6) 3\n      }\n      id-dhPop-static-sha1-hmac-sha1 OBJECT IDENTIFIER ::=\n
    \          id-dh-sig-hmac-sha1\n      sa-dhPop-static-sha224-hmac-sha224 SIGNATURE-ALGORITHM
    ::= {\n           IDENTIFIER id-alg-dhPop-static-sha224-hmac-sha224\n           VALUE
    DhSigStatic\n           PARAMS ARE absent\n           PUBLIC-KEYS { pk-dh }\n
    \     }\n      id-alg-dhPop-static-sha224-hmac-sha224 OBJECT IDENTIFIER ::= {\n
    \          id-pkix id-alg(6) 15\n      }\n      sa-dhPop-static-sha256-hmac-sha256
    SIGNATURE-ALGORITHM ::= {\n           IDENTIFIER id-alg-dhPop-static-sha256-hmac-sha256\n
    \          VALUE DhSigStatic\n           PARAMS ARE absent\n           PUBLIC-KEYS
    { pk-dh }\n      }\n      id-alg-dhPop-static-sha256-hmac-sha256 OBJECT IDENTIFIER
    ::= {\n           id-pkix id-alg(6) 16\n      }\n      sa-dhPop-static-sha384-hmac-sha384
    SIGNATURE-ALGORITHM ::= {\n           IDENTIFIER id-alg-dhPop-static-sha384-hmac-sha384\n
    \          VALUE DhSigStatic\n           PARAMS ARE absent\n           PUBLIC-KEYS
    { pk-dh }\n      }\n      id-alg-dhPop-static-sha384-hmac-sha384 OBJECT IDENTIFIER
    ::= {\n           id-pkix id-alg(6) 17\n      }\n      sa-dhPop-static-sha512-hmac-sha512
    SIGNATURE-ALGORITHM ::= {\n           IDENTIFIER id-alg-dhPop-static-sha512-hmac-sha512\n
    \          VALUE DhSigStatic\n           PARAMS ARE absent\n           PUBLIC-KEYS
    { pk-dh }\n      }\n      id-alg-dhPop-static-sha512-hmac-sha512 OBJECT IDENTIFIER
    ::= {\n           id-pkix id-alg(6) 18\n      }\n      sa-dhPop-SHA1 SIGNATURE-ALGORITHM
    ::= {\n         IDENTIFIER id-alg-dh-pop\n         VALUE DSA-Sig-Value\n         PARAMS
    TYPE DomainParameters ARE preferredAbsent\n         HASHES { mda-sha1 }\n         PUBLIC-KEYS
    { pk-dh }\n      }\n      id-alg-dhPop-sha1 OBJECT IDENTIFIER ::= id-alg-dh-pop\n
    \     id-alg-dh-pop OBJECT IDENTIFIER ::= { id-pkix id-alg(6) 4 }\n      sa-dhPop-sha224
    SIGNATURE-ALGORITHM ::= {\n         IDENTIFIER id-alg-dhPop-sha224\n         VALUE
    DSA-Sig-Value\n         PARAMS TYPE DomainParameters ARE preferredAbsent\n         HASHES
    { mda-sha224 }\n         PUBLIC-KEYS { pk-dh }\n      }\n      id-alg-dhPop-sha224
    OBJECT IDENTIFIER ::= {\n           id-pkix id-alg(6) 5\n      }\n      sa-dhPop-sha256
    SIGNATURE-ALGORITHM ::= {\n         IDENTIFIER id-alg-dhPop-sha256\n         VALUE
    DSA-Sig-Value\n         PARAMS TYPE DomainParameters ARE preferredAbsent\n         HASHES
    { mda-sha256 }\n         PUBLIC-KEYS { pk-dh }\n      }\n      id-alg-dhPop-sha256
    OBJECT IDENTIFIER ::= {\n           id-pkix id-alg(6) 6\n      }\n      sa-dhPop-sha384
    SIGNATURE-ALGORITHM ::= {\n         IDENTIFIER id-alg-dhPop-sha384\n         VALUE
    DSA-Sig-Value\n         PARAMS TYPE DomainParameters ARE preferredAbsent\n         HASHES
    { mda-sha384 }\n         PUBLIC-KEYS { pk-dh }\n      }\n      id-alg-dhPop-sha384
    OBJECT IDENTIFIER ::= {\n           id-pkix id-alg(6) 7\n      }\n      sa-dhPop-sha512
    SIGNATURE-ALGORITHM ::= {\n         IDENTIFIER id-alg-dhPop-sha512\n         VALUE
    DSA-Sig-Value\n         PARAMS TYPE DomainParameters ARE preferredAbsent\n         HASHES
    { mda-sha512 }\n         PUBLIC-KEYS { pk-dh }\n      }\n      id-alg-dhPop-sha512
    OBJECT IDENTIFIER ::= {\n           id-pkix id-alg(6) 8\n      }\n      id-alg-ecdhPop-static-sha224-hmac-sha224
    OBJECT IDENTIFIER ::= {\n         id-pkix id-alg(6) 25\n      }\n      sa-ecdhPop-sha224-hmac-sha224
    SIGNATURE-ALGORITHM ::= {\n         IDENTIFIER id-alg-ecdhPop-static-sha224-hmac-sha224\n
    \        VALUE DhSigStatic\n         PARAMS ARE absent\n         PUBLIC-KEYS {
    pk-ec }\n      }\n      id-alg-ecdhPop-static-sha256-hmac-sha256 OBJECT IDENTIFIER
    ::= {\n         id-pkix id-alg(6) 26\n      }\n      sa-ecdhPop-sha256-hmac-sha256
    SIGNATURE-ALGORITHM ::= {\n         IDENTIFIER id-alg-ecdhPop-static-sha256-hmac-sha256\n
    \        VALUE DhSigStatic\n         PARAMS ARE absent\n         PUBLIC-KEYS {
    pk-ec }\n      }\n      id-alg-ecdhPop-static-sha384-hmac-sha384 OBJECT IDENTIFIER
    ::= {\n         id-pkix id-alg(6) 27\n      }\n      sa-ecdhPop-sha384-hmac-sha384
    SIGNATURE-ALGORITHM ::= {\n         IDENTIFIER id-alg-ecdhPop-static-sha384-hmac-sha384\n
    \        VALUE DhSigStatic\n         PARAMS ARE absent\n         PUBLIC-KEYS {
    pk-ec }\n      }\n      id-alg-ecdhPop-static-sha512-hmac-sha512 OBJECT IDENTIFIER
    ::= {\n         id-pkix id-alg(6) 28\n      }\n      sa-ecdhPop-sha512-hmac-sha512
    SIGNATURE-ALGORITHM ::= {\n         IDENTIFIER id-alg-ecdhPop-static-sha512-hmac-sha512\n
    \        VALUE DhSigStatic\n         PARAMS ARE absent\n         PUBLIC-KEYS {
    pk-ec }\n      }\n   END\n"
  title: A.1.  2008 ASN.1 Module
- contents:
  - "A.2.  1988 ASN.1 Module\n   This appendix contains an ASN.1 module that is conformant
    with the\n   1988 version of ASN.1, which represents an informational version
    of\n   the ASN.1 module for this document.  Where a difference exists\n   between
    the module in this section and the 2008 module, the 2008\n   module is the definitive
    module.\n   DH-Sign\n      { iso(1) identified-organization(3) dod(6) internet(1)\n
    \       security(5) mechanisms(5) pkix(7) id-mod(0)\n        id-mod-dhSign-2012-88(79)
    }\n   DEFINITIONS IMPLICIT TAGS ::=\n   BEGIN\n   -- EXPORTS ALL\n   -- The types
    and values defined in this module are exported for use\n   -- in the other ASN.1
    modules.  Other applications may use them\n   -- for their own purposes.\n   IMPORTS\n
    \     IssuerAndSerialNumber, MessageDigest\n      FROM CryptographicMessageSyntax2004\n
    \        { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)\n           pkcs-9(9)
    smime(16) modules(0) cms-2004(24) }\n      id-pkix\n      FROM PKIX1Explicit88\n
    \        { iso(1) identified-organization(3) dod(6) internet(1)\n           security(5)
    mechanisms(5) pkix(7) id-mod(0)\n           id-pkix1-explicit(18) }\n      Dss-Sig-Value,
    DomainParameters\n      FROM PKIX1Algorithms88\n         { iso(1) identified-organization(3)
    dod(6) internet(1)\n           security(5) mechanisms(5) pkix(7) id-mod(0)\n           id-mod-pkix1-algorithms(17)
    };\n      id-dh-sig-hmac-sha1 OBJECT IDENTIFIER ::= {id-pkix id-alg(6) 3}\n      DhSigStatic
    ::= SEQUENCE {\n          issuerAndSerial IssuerAndSerialNumber OPTIONAL,\n          hashValue
    \      MessageDigest\n      }\n      id-alg-dh-pop OBJECT IDENTIFIER ::= { id-pkix
    id-alg(6) 4 }\n      id-dhPop-static-sha1-hmac-sha1 OBJECT IDENTIFIER ::=\n           id-dh-sig-hmac-sha1\n
    \     id-alg-dhPop-static-sha224-hmac-sha224 OBJECT IDENTIFIER ::= {\n           id-pkix
    id-alg(6) 15 }\n      id-alg-dhPop-static-sha256-hmac-sha256 OBJECT IDENTIFIER
    ::= {\n           id-pkix id-alg(6) 16 }\n      id-alg-dhPop-static-sha384-hmac-sha384
    OBJECT IDENTIFIER ::= {\n           id-pkix id-alg(6) 17 }\n      id-alg-dhPop-static-sha512-hmac-sha512
    OBJECT IDENTIFIER ::= {\n           id-pkix id-alg(6) 18 }\n      id-alg-dhPop-sha1
    OBJECT IDENTIFIER ::= id-alg-dh-pop\n      id-alg-dhPop-sha224 OBJECT IDENTIFIER
    ::= {\n           id-pkix id-alg(6) 5 }\n      id-alg-dhPop-sha256 OBJECT IDENTIFIER
    ::= {\n           id-pkix id-alg(6) 6 }\n      id-alg-dhPop-sha384 OBJECT IDENTIFIER
    ::= {\n           id-pkix id-alg(6) 7 }\n      id-alg-dhPop-sha512 OBJECT IDENTIFIER
    ::= {\n           id-pkix id-alg(6) 8 }\n      id-alg-ecdhPop-static-sha224-hmac-sha224
    OBJECT IDENTIFIER ::= {\n           id-pkix id-alg(6) 25 }\n      id-alg-ecdhPop-static-sha256-hmac-sha256
    OBJECT IDENTIFIER ::= {\n           id-pkix id-alg(6) 26 }\n      id-alg-ecdhPop-static-sha384-hmac-sha384
    OBJECT IDENTIFIER ::= {\n           id-pkix id-alg(6) 27 }\n      id-alg-ecdhPop-static-sha512-hmac-sha512
    OBJECT IDENTIFIER ::= {\n           id-pkix id-alg(6) 28 }\n   END\n"
  title: A.2.  1988 ASN.1 Module
- contents:
  - "Appendix B.  Example of Static DH Proof-of-Possession\n   The following example
    follows the steps described earlier in\n   Section 4.\n   Step 1.  Establishing
    common DH parameters: Assume the parameters are\n   as in the DER-encoded certificate.
    \ The certificate contains a DH\n   public key signed by a CA with a DSA signing
    key.\n  0 30 939: SEQUENCE {\n  4 30 872:   SEQUENCE {\n  8 A0   3:     [0] {\n
    10 02   1:       INTEGER 2\n          :       }\n 13 02   6:     INTEGER\n          :
    \      00 DA 39 B6 E2 CB\n 21 30  11:     SEQUENCE {\n 23 06   7:       OBJECT
    IDENTIFIER dsaWithSha1 (1 2 840 10040 4 3)\n 32 05   0:       NULL\n          :
    \      }\n 34 30  72:     SEQUENCE {\n 36 31  11:       SET {\n 38 30   9:         SEQUENCE
    {\n 40 06   3:           OBJECT IDENTIFIER countryName (2 5 4 6)\n 45 13   2:
    \          PrintableString 'US'\n          :           }\n          :         }\n
    49 31  17:       SET {\n 51 30  15:         SEQUENCE {\n 53 06   3:           OBJECT
    IDENTIFIER organizationName (2 5 4 10)\n 58 13   8:           PrintableString
    'XETI Inc'\n          :           }\n          :         }\n 68 31  16:       SET
    {\n 70 30  14:         SEQUENCE {\n 72 06   3:           OBJECT IDENTIFIER organizationalUnitName
    (2 5 4\n                                11)\n 77 13   7:           PrintableString
    'Testing'\n          :           }\n          :         }\n 86 31  20:       SET
    {\n 88 30  18:         SEQUENCE {\n 90 06   3:           OBJECT IDENTIFIER commonName
    (2 5 4 3)\n 95 13  11:           PrintableString 'Root DSA CA'\n          :           }\n
    \         :         }\n          :       }\n"
  - '108 30  30:     SEQUENCE {

    '
  - '110 17  13:       UTCTime ''990914010557Z''

    '
  - "125 17  13:       UTCTime '991113010557Z'\n          :       }\n"
  - '140 30  70:     SEQUENCE {

    '
  - '142 31  11:       SET {

    '
  - '144 30   9:         SEQUENCE {

    '
  - '146 06   3:           OBJECT IDENTIFIER countryName (2 5 4 6)

    '
  - "151 13   2:           PrintableString 'US'\n          :           }\n          :
    \        }\n"
  - '155 31  17:       SET {

    '
  - '157 30  15:         SEQUENCE {

    '
  - '159 06   3:           OBJECT IDENTIFIER organizationName (2 5 4 10)

    '
  - "164 13   8:           PrintableString 'XETI Inc'\n          :           }\n          :
    \        }\n"
  - '174 31  16:       SET {

    '
  - '176 30  14:         SEQUENCE {

    '
  - "178 06   3:           OBJECT IDENTIFIER organizationalUnitName (2 5 4\n                                11)\n"
  - "183 13   7:           PrintableString 'Testing'\n          :           }\n          :
    \        }\n"
  - '192 31  18:       SET {

    '
  - '194 30  16:         SEQUENCE {

    '
  - '196 06   3:           OBJECT IDENTIFIER commonName (2 5 4 3)

    '
  - "201 13   9:           PrintableString 'DH TestCA'\n          :           }\n
    \         :         }\n          :       }\n"
  - '212 30 577:     SEQUENCE {

    '
  - '216 30 438:       SEQUENCE {

    '
  - '220 06   7:         OBJECT IDENTIFIER dhPublicKey (1 2 840 10046 2 1)

    '
  - '229 30 425:         SEQUENCE {

    '
  - "233 02 129:           INTEGER\n          :             00 94 84 E0 45 6C 7F 69
    51 62 3E 56 80 7C 68 E7\n          :             C5 A9 9E 9E 74 74 94 ED 90 8C
    1D C4 E1 4A 14 82\n          :             F5 D2 94 0C 19 E3 B9 10 BB 11 B9 E5
    A5 FB 8E 21\n          :             51 63 02 86 AA 06 B8 21 36 B6 7F 36 DF D1
    D6 68\n          :             5B 79 7C 1D 5A 14 75 1F 6A 93 75 93 CE BB 97 72\n
    \         :             8A F0 0F 23 9D 47 F6 D4 B3 C7 F0 F4 E6 F6 2B C2\n          :
    \            32 E1 89 67 BE 7E 06 AE F8 D0 01 6B 8B 2A F5 02\n          :             D7
    B6 A8 63 94 83 B0 1B 31 7D 52 1A DE E5 03 85\n          :             27\n"
  - "365 02 128:           INTEGER\n          :             26 A6 32 2C 5A 2B D4 33
    2B 5C DC 06 87 53 3F 90\n          :             06 61 50 38 3E D2 B9 7D 81 1C
    12 10 C5 0C 53 D4\n          :             64 D1 8E 30 07 08 8C DD 3F 0A 2F 2C
    D6 1B 7F 57\n          :             86 D0 DA BB 6E 36 2A 18 E8 D3 BC 70 31 7A
    48 B6\n          :             4E 18 6E DD 1F 22 06 EB 3F EA D4 41 69 D9 9B DE\n
    \         :             47 95 7A 72 91 D2 09 7F 49 5C 3B 03 33 51 C8 F1\n          :
    \            39 9A FF 04 D5 6E 7E 94 3D 03 B8 F6 31 15 26 48\n          :             95
    A8 5C DE 47 88 B4 69 3A 00 A7 86 9E DA D1 CD\n"
  - "496 02  33:           INTEGER\n          :             00 E8 72 FA 96 F0 11 40
    F5 F2 DC FD 3B 5D 78 94\n          :             B1 85 01 E5 69 37 21 F7 25 B9
    BA 71 4A FC 60 30\n          :             FB\n"
  - "531 02  97:           INTEGER\n          :             00 A3 91 01 C0 A8 6E A4
    4D A0 56 FC 6C FE 1F A7\n          :             B0 CD 0F 94 87 0C 25 BE 97 76
    8D EB E5 A4 09 5D\n          :             AB 83 CD 80 0B 35 67 7F 0C 8E A7 31
    98 32 85 39\n          :             40 9D 11 98 D8 DE B8 7F 86 9B AF 8D 67 3D
    B6 76\n          :             B4 61 2F 21 E1 4B 0E 68 FF 53 3E 87 DD D8 71 56\n
    \         :             68 47 DC F7 20 63 4B 3C 5F 78 71 83 E6 70 9E E2\n          :
    \            92\n"
  - '630 30  26:           SEQUENCE {

    '
  - "632 03  21:             BIT STRING 0 unused bits\n          :             1C
    D5 3A 0D 17 82 6D 0A 81 75 81 46 10 8E 3E DB\n          :             09 E4 98
    34\n"
  - "655 02   1:             INTEGER 55\n          :             }\n          :           }\n
    \         :         }\n"
  - "658 03 132:       BIT STRING 0 unused bits\n          :         02 81 80 5F CF
    39 AD 62 CF 49 8E D1 CE 66 E2 B1\n          :         E6 A7 01 4D 05 C2 77 C8
    92 52 42 A9 05 A4 DB E0\n          :         46 79 50 A3 FC 99 3D 3D A6 9B A9
    AD BC 62 1C 69\n          :         B7 11 A1 C0 2A F1 85 28 F7 68 FE D6 8F 31
    56 22\n          :         4D 0A 11 6E 72 3A 02 AF 0E 27 AA F9 ED CE 05 EF\n          :
    \        D8 59 92 C0 18 D7 69 6E BD 70 B6 21 D1 77 39 21\n          :         E1
    AF 7A 3A CF 20 0A B4 2C 69 5F CF 79 67 20 31\n          :         4D F2 C6 ED
    23 BF C4 BB 1E D1 71 40 2C 07 D6 F0\n          :         8F C5 1A\n          :
    \      }\n"
  - '793 A3  85:     [3] {

    '
  - '795 30  83:       SEQUENCE {

    '
  - '797 30  29:         SEQUENCE {

    '
  - '799 06   3:           OBJECT IDENTIFIER subjectKeyIdentifier (2 5 29 14)

    '
  - "804 04  22:           OCTET STRING\n          :             04 14 80 DF 59 88
    BF EB 17 E1 AD 5E C6 40 A3 42\n          :             E5 AC D3 B4 88 78\n          :
    \          }\n"
  - '828 30  34:         SEQUENCE {

    '
  - '830 06   3:           OBJECT IDENTIFIER authorityKeyIdentifier (2 5 29

    '
  - '35)

    '
  - '835 01   1:           BOOLEAN TRUE

    '
  - "838 04  24:           OCTET STRING\n          :             30 16 80 14 6A 23
    37 55 B9 FD 81 EA E8 4E D3 C9\n          :             B7 09 E5 7B 06 E3 68 AA\n
    \         :           }\n"
  - '864 30  14:         SEQUENCE {

    '
  - '866 06   3:           OBJECT IDENTIFIER keyUsage (2 5 29 15)

    '
  - '871 01   1:           BOOLEAN TRUE

    '
  - "874 04   4:           OCTET STRING\n          :             03 02 03 08\n          :
    \          }\n          :         }\n          :       }\n          :     }\n"
  - '880 30  11:   SEQUENCE {

    '
  - '882 06   7:     OBJECT IDENTIFIER dsaWithSha1 (1 2 840 10040 4 3)

    '
  - "891 05   0:     NULL\n          :     }\n"
  - "893 03  48:   BIT STRING 0 unused bits\n          :     30 2D 02 14 7C 6D D2
    CA 1E 32 D1 30 2E 29 66 BC\n          :     06 8B 60 C7 61 16 3B CA 02 15 00 8A
    18 DD C1 83\n          :     58 29 A2 8A 67 64 03 92 AB 02 CE 00 B5 94 6A\n          :
    \  }\n   Step 2.  End entity/user generates a DH key pair using the parameters\n
    \  from the CA certificate.\n   End entity DH public key:\n      Y: 13 63 A1 85
    04 8C 46 A8 88 EB F4 5E A8 93 74 AE\n         FD AE 9E 96 27 12 65 C4 4C 07 06
    3E 18 FE 94 B8\n         A8 79 48 BD 2E 34 B6 47 CA 04 30 A1 EC 33 FD 1A\n         0B
    2D 9E 50 C9 78 0F AE 6A EC B5 6B 6A BE B2 5C\n         DA B2 9F 78 2C B9 77 E2
    79 2B 25 BF 2E 0B 59 4A\n         93 4B F8 B3 EC 81 34 AE 97 47 52 E0 A8 29 98
    EC\n         D1 B0 CA 2B 6F 7A 8B DB 4E 8D A5 15 7E 7E AF 33\n         62 09 9E
    0F 11 44 8C C1 8D A2 11 9E 53 EF B2 E8\n   End entity DH private key:\n      X:
    32 CC BD B4 B7 7C 44 26 BB 3C 83 42 6E 7D 1B 00\n         86 35 09 71 07 A0 A4
    76 B8 DB 5F EC 00 CE 6F C3\n   Step 3.  Compute the shared secret ZZ.\n     56
    b6 01 39 42 8e 09 16 30 b0 31 4d 12 90 af 03\n     c7 92 65 c2 9c ba 88 bb 0a
    d5 94 02 ed 6f 54 cb\n     22 e5 94 b4 d6 60 72 bc f6 a5 2b 18 8d df 28 72\n     ac
    e0 41 dd 3b 03 2a 12 9e 5d bd 72 a0 1e fb 6b\n     ee c5 b2 16 59 ee 12 00 3b
    c8 e0 cb c5 08 8e 2d\n     40 5f 2d 37 62 8c 4f bb 49 76 69 3c 9e fc 2c f7\n     f9
    50 c1 b9 f7 01 32 4c 96 b9 c3 56 c0 2c 1b 77\n     3f 2f 36 e8 22 c8 2e 07 76
    d0 4f 7f aa d5 c0 59\n   Step 4.  Compute K and the signature.\n   LeadingInfo:
    DER-encoded Subject/Requester Distinguished Name (DN),\n   as in the generated
    Certificate Signing Request\n        30 46 31 0B 30 09 06 03 55 04 06 13 02 55
    53 31\n        11 30 0F 06 03 55 04 0A 13 08 58 45 54 49 20 49\n        6E 63
    31 10 30 0E 06 03 55 04 0B 13 07 54 65 73\n        74 69 6E 67 31 12 30 10 06
    03 55 04 03 13 09 44\n        48 20 54 65 73 74 43 41\n   TrailingInfo: DER-encoded
    Issuer/recipient DN (from the certificate\n   described in step 1)\n        30
    48 31 0B 30 09 06 03 55 04 06 13 02 55 53 31\n        11 30 0F 06 03 55 04 0A
    13 08 58 45 54 49 20 49\n        6E 63 31 10 30 0E 06 03 55 04 0B 13 07 54 65
    73\n        74 69 6E 67 31 14 30 12 06 03 55 04 03 13 0B 52\n        6F 6F 74
    20 44 53 41 20 43 41\n      K:\n        B1 91 D7 DB 4F C5 EF EF AC 9A C5 44 5A
    6D 42 28\n        DC 70 7B DA\n   TBS: the \"text\" for computing the SHA-1 HMAC.\n
    \     30 82 02 98 02 01 00 30 4E 31 0B 30 09 06 03 55\n      04 06 13 02 55 53
    31 11 30 0F 06 03 55 04 0A 13\n      08 58 45 54 49 20 49 6E 63 31 10 30 0E 06
    03 55\n      04 0B 13 07 54 65 73 74 69 6E 67 31 1A 30 18 06\n      03 55 04 03
    13 11 50 4B 49 58 20 45 78 61 6D 70\n      6C 65 20 55 73 65 72 30 82 02 41 30
    82 01 B6 06\n      07 2A 86 48 CE 3E 02 01 30 82 01 A9 02 81 81 00\n      94 84
    E0 45 6C 7F 69 51 62 3E 56 80 7C 68 E7 C5\n      A9 9E 9E 74 74 94 ED 90 8C 1D
    C4 E1 4A 14 82 F5\n      D2 94 0C 19 E3 B9 10 BB 11 B9 E5 A5 FB 8E 21 51\n      63
    02 86 AA 06 B8 21 36 B6 7F 36 DF D1 D6 68 5B\n      79 7C 1D 5A 14 75 1F 6A 93
    75 93 CE BB 97 72 8A\n      F0 0F 23 9D 47 F6 D4 B3 C7 F0 F4 E6 F6 2B C2 32\n
    \     E1 89 67 BE 7E 06 AE F8 D0 01 6B 8B 2A F5 02 D7\n      B6 A8 63 94 83 B0
    1B 31 7D 52 1A DE E5 03 85 27\n      02 81 80 26 A6 32 2C 5A 2B D4 33 2B 5C DC
    06 87\n      53 3F 90 06 61 50 38 3E D2 B9 7D 81 1C 12 10 C5\n      0C 53 D4 64
    D1 8E 30 07 08 8C DD 3F 0A 2F 2C D6\n      1B 7F 57 86 D0 DA BB 6E 36 2A 18 E8
    D3 BC 70 31\n      7A 48 B6 4E 18 6E DD 1F 22 06 EB 3F EA D4 41 69\n      D9 9B
    DE 47 95 7A 72 91 D2 09 7F 49 5C 3B 03 33\n      51 C8 F1 39 9A FF 04 D5 6E 7E
    94 3D 03 B8 F6 31\n      15 26 48 95 A8 5C DE 47 88 B4 69 3A 00 A7 86 9E\n      DA
    D1 CD 02 21 00 E8 72 FA 96 F0 11 40 F5 F2 DC\n      FD 3B 5D 78 94 B1 85 01 E5
    69 37 21 F7 25 B9 BA\n      71 4A FC 60 30 FB 02 61 00 A3 91 01 C0 A8 6E A4\n
    \     4D A0 56 FC 6C FE 1F A7 B0 CD 0F 94 87 0C 25 BE\n      97 76 8D EB E5 A4
    09 5D AB 83 CD 80 0B 35 67 7F\n      0C 8E A7 31 98 32 85 39 40 9D 11 98 D8 DE
    B8 7F\n      86 9B AF 8D 67 3D B6 76 B4 61 2F 21 E1 4B 0E 68\n      FF 53 3E 87
    DD D8 71 56 68 47 DC F7 20 63 4B 3C\n      5F 78 71 83 E6 70 9E E2 92 30 1A 03
    15 00 1C D5\n      3A 0D 17 82 6D 0A 81 75 81 46 10 8E 3E DB 09 E4\n      98 34
    02 01 37 03 81 84 00 02 81 80 13 63 A1 85\n      04 8C 46 A8 88 EB F4 5E A8 93
    74 AE FD AE 9E 96\n      27 12 65 C4 4C 07 06 3E 18 FE 94 B8 A8 79 48 BD\n      2E
    34 B6 47 CA 04 30 A1 EC 33 FD 1A 0B 2D 9E 50\n      C9 78 0F AE 6A EC B5 6B 6A
    BE B2 5C DA B2 9F 78\n      2C B9 77 E2 79 2B 25 BF 2E 0B 59 4A 93 4B F8 B3\n
    \     EC 81 34 AE 97 47 52 E0 A8 29 98 EC D1 B0 CA 2B\n      6F 7A 8B DB 4E 8D
    A5 15 7E 7E AF 33 62 09 9E 0F\n      11 44 8C C1 8D A2 11 9E 53 EF B2 E8\n   Certification
    Request:\n   0 30 793: SEQUENCE {\n   4 30 664:   SEQUENCE {\n   8 02   1:     INTEGER
    0\n  11 30  78:     SEQUENCE {\n  13 31  11:       SET {\n  15 30   9:         SEQUENCE
    {\n  17 06   3:           OBJECT IDENTIFIER countryName (2 5 4 6)\n  22 13   2:
    \          PrintableString 'US'\n           :           }\n           :         }\n
    \ 26 31  17:       SET {\n  28 30  15:         SEQUENCE {\n  30 06   3:           OBJECT
    IDENTIFIER organizationName (2 5 4 10)\n  35 13   8:           PrintableString
    'XETI Inc'\n           :           }\n           :         }\n  45 31  16:       SET
    {\n  47 30  14:         SEQUENCE {\n  49 06   3:           OBJECT IDENTIFIER organizationalUnitName
    (2 5 4\n                                 11)\n  54 13   7:           PrintableString
    'Testing'\n           :           }\n           :         }\n  63 31  26:       SET
    {\n  65 30  24:         SEQUENCE {\n  67 06   3:           OBJECT IDENTIFIER commonName
    (2 5 4 3)\n  72 13  17:           PrintableString 'PKIX Example User'\n           :
    \          }\n           :         }\n           :       }\n  91 30 577:     SEQUENCE
    {\n  95 30 438:       SEQUENCE {\n  99 06   7:         OBJECT IDENTIFIER dhPublicKey
    (1 2 840 10046 2 1)\n 108 30 425:         SEQUENCE {\n 112 02 129:           INTEGER\n
    \          :             00 94 84 E0 45 6C 7F 69 51 62 3E 56 80 7C 68 E7\n           :
    \            C5 A9 9E 9E 74 74 94 ED 90 8C 1D C4 E1 4A 14 82\n           :             F5
    D2 94 0C 19 E3 B9 10 BB 11 B9 E5 A5 FB 8E 21\n           :             51 63 02
    86 AA 06 B8 21 36 B6 7F 36 DF D1 D6 68\n           :             5B 79 7C 1D 5A
    14 75 1F 6A 93 75 93 CE BB 97 72\n           :             8A F0 0F 23 9D 47 F6
    D4 B3 C7 F0 F4 E6 F6 2B C2\n           :             32 E1 89 67 BE 7E 06 AE F8
    D0 01 6B 8B 2A F5 02\n           :             D7 B6 A8 63 94 83 B0 1B 31 7D 52
    1A DE E5 03 85\n           :             27\n 244 02 128:           INTEGER\n
    \          :             26 A6 32 2C 5A 2B D4 33 2B 5C DC 06 87 53 3F 90\n           :
    \            06 61 50 38 3E D2 B9 7D 81 1C 12 10 C5 0C 53 D4\n           :             64
    D1 8E 30 07 08 8C DD 3F 0A 2F 2C D6 1B 7F 57\n           :             86 D0 DA
    BB 6E 36 2A 18 E8 D3 BC 70 31 7A 48 B6\n           :             4E 18 6E DD 1F
    22 06 EB 3F EA D4 41 69 D9 9B DE\n           :             47 95 7A 72 91 D2 09
    7F 49 5C 3B 03 33 51 C8 F1\n           :             39 9A FF 04 D5 6E 7E 94 3D
    03 B8 F6 31 15 26 48\n           :             95 A8 5C DE 47 88 B4 69 3A 00 A7
    86 9E DA D1 CD\n 375 02  33:           INTEGER\n           :             00 E8
    72 FA 96 F0 11 40 F5 F2 DC FD 3B 5D 78 94\n           :             B1 85 01 E5
    69 37 21 F7 25 B9 BA 71 4A FC 60 30\n           :             FB\n 410 02  97:
    \          INTEGER\n           :             00 A3 91 01 C0 A8 6E A4 4D A0 56
    FC 6C FE 1F A7\n           :             B0 CD 0F 94 87 0C 25 BE 97 76 8D EB E5
    A4 09 5D\n           :             AB 83 CD 80 0B 35 67 7F 0C 8E A7 31 98 32 85
    39\n           :             40 9D 11 98 D8 DE B8 7F 86 9B AF 8D 67 3D B6 76\n
    \          :             B4 61 2F 21 E1 4B 0E 68 FF 53 3E 87 DD D8 71 56\n           :
    \            68 47 DC F7 20 63 4B 3C 5F 78 71 83 E6 70 9E E2\n           :             92\n
    509 30  26:           SEQUENCE {\n 511 03  21:             BIT STRING 0 unused
    bits\n           :               1C D5 3A 0D 17 82 6D 0A 81 75 81 46 10 8E 3E\n
    \          :               DB 09 E4 98 34\n 534 02   1:             INTEGER 55\n
    \          :             }\n           :           }\n           :         }\n
    537 03 132:       BIT STRING 0 unused bits\n           :         02 81 80 13 63
    A1 85 04 8C 46 A8 88 EB F4 5E A8\n           :         93 74 AE FD AE 9E 96 27
    12 65 C4 4C 07 06 3E 18\n           :         FE 94 B8 A8 79 48 BD 2E 34 B6 47
    CA 04 30 A1 EC\n           :         33 FD 1A 0B 2D 9E 50 C9 78 0F AE 6A EC B5
    6B 6A\n           :         BE B2 5C DA B2 9F 78 2C B9 77 E2 79 2B 25 BF 2E\n
    \          :         0B 59 4A 93 4B F8 B3 EC 81 34 AE 97 47 52 E0 A8\n           :
    \        29 98 EC D1 B0 CA 2B 6F 7A 8B DB 4E 8D A5 15 7E\n           :         7E
    AF 33 62 09 9E 0F 11 44 8C C1 8D A2 11 9E 53\n           :         EF B2 E8\n
    \          :       }\n           :     }\n 672 30  12:   SEQUENCE {\n 674 06   8:
    \    OBJECT IDENTIFIER dh-sig-hmac-sha1 (1 3 6 1 5 5 7 6 3)\n 684 05   0:     NULL\n
    \          :     }\n 686 03 109:   BIT STRING 0 unused bits\n           :     30
    6A 30 52 30 48 31 0B 30 09 06 03 55 04 06 13\n           :     02 55 53 31 11
    30 0F 06 03 55 04 0A 13 08 58 45\n           :     54 49 20 49 6E 63 31 10 30
    0E 06 03 55 04 0B 13\n           :     07 54 65 73 74 69 6E 67 31 14 30 12 06
    03 55 04\n           :     03 13 0B 52 6F 6F 74 20 44 53 41 20 43 41 02 06\n           :
    \    00 DA 39 B6 E2 CB 04 14 2D 05 77 FE 5E 8F 65 F5\n           :     AF AD C9
    5C 9B 02 C0 A8 88 29 61 63\n           :   }\n   Signature verification requires
    CA's private key, the CA certificate,\n   and the generated Certification Request.\n
    \  CA DH private key:\n       x:  3E 5D AD FD E5 F4 6B 1B 61 5E 18 F9 0B 84 74
    a7\n           52 1E D6 92 BC 34 94 56 F3 0C BE DA 67 7A DD 7D\n"
  title: Appendix B.  Example of Static DH Proof-of-Possession
- contents:
  - "Appendix C.  Example of Discrete Log Signature\n   Step 1.  Generate a DH key
    with length of q being 256 bits.\n      p:\n        94 84 E0 45 6C 7F 69 51 62
    3E 56 80 7C 68 E7 C5\n        A9 9E 9E 74 74 94 ED 90 8C 1D C4 E1 4A 14 82 F5\n
    \       D2 94 0C 19 E3 B9 10 BB 11 B9 E5 A5 FB 8E 21 51\n        63 02 86 AA 06
    B8 21 36 B6 7F 36 DF D1 D6 68 5B\n        79 7C 1D 5A 14 75 1F 6A 93 75 93 CE
    BB 97 72 8A\n        F0 0F 23 9D 47 F6 D4 B3 C7 F0 F4 E6 F6 2B C2 32\n        E1
    89 67 BE 7E 06 AE F8 D0 01 6B 8B 2A F5 02 D7\n        B6 A8 63 94 83 B0 1B 31
    7D 52 1A DE E5 03 85 27\n      q:\n        E8 72 FA 96 F0 11 40 F5 F2 DC FD 3B
    5D 78 94 B1\n        85 01 E5 69 37 21 F7 25 B9 BA 71 4A FC 60 30 FB\n      g:\n
    \       26 A6 32 2C 5A 2B D4 33 2B 5C DC 06 87 53 3F 90\n        06 61 50 38 3E
    D2 B9 7D 81 1C 12 10 C5 0C 53 D4\n        64 D1 8E 30 07 08 8C DD 3F 0A 2F 2C
    D6 1B 7F 57\n        86 D0 DA BB 6E 36 2A 18 E8 D3 BC 70 31 7A 48 B6\n        4E
    18 6E DD 1F 22 06 EB 3F EA D4 41 69 D9 9B DE\n        47 95 7A 72 91 D2 09 7F
    49 5C 3B 03 33 51 C8 F1\n        39 9A FF 04 D5 6E 7E 94 3D 03 B8 F6 31 15 26
    48\n        95 A8 5C DE 47 88 B4 69 3A 00 A7 86 9E DA D1 CD\n      j:\n        A3
    91 01 C0 A8 6E A4 4D A0 56 FC 6C FE 1F A7 B0\n        CD 0F 94 87 0C 25 BE 97
    76 8D EB E5 A4 09 5D AB\n        83 CD 80 0B 35 67 7F 0C 8E A7 31 98 32 85 39
    40\n        9D 11 98 D8 DE B8 7F 86 9B AF 8D 67 3D B6 76 B4\n        61 2F 21
    E1 4B 0E 68 FF 53 3E 87 DD D8 71 56 68\n        47 DC F7 20 63 4B 3C 5F 78 71
    83 E6 70 9E E2 92\n      y:\n        5F CF 39 AD 62 CF 49 8E D1 CE 66 E2 B1 E6
    A7 01\n        4D 05 C2 77 C8 92 52 42 A9 05 A4 DB E0 46 79 50\n        A3 FC
    99 3D 3D A6 9B A9 AD BC 62 1C 69 B7 11 A1\n        C0 2A F1 85 28 F7 68 FE D6
    8F 31 56 22 4D 0A 11\n        6E 72 3A 02 AF 0E 27 AA F9 ED CE 05 EF D8 59 92\n
    \       C0 18 D7 69 6E BD 70 B6 21 D1 77 39 21 E1 AF 7A\n        3A CF 20 0A B4
    2C 69 5F CF 79 67 20 31 4D F2 C6\n        ED 23 BF C4 BB 1E D1 71 40 2C 07 D6
    F0 8F C5 1A\n      seed:\n        1C D5 3A 0D 17 82 6D 0A 81 75 81 46 10 8E 3E
    DB\n        09 E4 98 34\n      C:\n        00000037\n      x:\n        3E 5D AD
    FD E5 F4 6B 1B 61 5E 18 F9 0B 84 74 a7\n        52 1E D6 92 BC 34 94 56 F3 0C
    BE DA 67 7A DD 7D\n   Step 2.  Form the value to be signed and hash with SHA1.
    \ The result\n   of the hash for this example is:\n        5f a2 69 b6 4b 22 91
    22 6f 4c fe 68 ec 2b d1 c6\n        d4 21 e5 2c\n   Step 3.  The hash value needs
    to be expanded, since |q| = 256.  This\n   is done by hashing the hash with SHA1
    and appending it to the\n   original hash.  The value after this step is:\n        5f
    a2 69 b6 4b 22 91 22 6f 4c fe 68 ec 2b d1 c6\n        d4 21 e5 2c 64 92 8b c9
    5e 34 59 70 bd 62 40 ad\n        6f 26 3b f7 1c a3 b2 cb\n   Next, the first 255
    bits of this value are taken to be the resulting\n   \"hash\" value.  Note that
    in this case a shift of one bit right is\n   done, since the result is to be treated
    as an integer:\n        2f d1 34 db 25 91 48 91 37 a6 7f 34 76 15 e8 e3\n        6a
    10 f2 96 32 49 45 e4 af 1a 2c b8 5e b1 20 56\n   Step 4.  The signature value
    is computed.  In this case, you get the\n   values:\n      r:\n        A1 B5 B4
    90 01 34 6B A0 31 6A 73 F5 7D F6 5C 14\n        43 52 D2 10 BF 86 58 87 F7 BC
    6E 5A 77 FF C3 4B\n      s:\n        59 40 45 BC 6F 0D DC FF 9D 55 40 1E C4 9E
    51 3D\n        66 EF B2 FF 06 40 9A 39 68 75 81 F7 EC 9E BE A1\n   The encoded
    signature value is then:\n      30 45 02 21 00 A1 B5 B4 90 01 34 6B A0 31 6A 73\n
    \     F5 7D F6 5C 14 43 52 D2 10 BF 86 58 87 F7 BC 6E\n      5A 77 FF C3 4B 02
    20 59 40 45 BC 6F 0D DC FF 9D\n      55 40 1E C4 9E 51 3D 66 EF B2 FF 06 40 9A
    39 68\n      75 81 F7 EC 9E BE A1\n      Result:\n        30 82 02 c2 30 82 02
    67 02 01 00 30 1b 31 19 30\n        17 06 03 55 04 03 13 10 49 45 54 46 20 50
    4b 49\n        58 20 53 41 4d 50 4c 45 30 82 02 41 30 82 01 b6\n        06 07
    2a 86 48 ce 3e 02 01 30 82 01 a9 02 81 81\n        00 94 84 e0 45 6c 7f 69 51
    62 3e 56 80 7c 68 e7\n        c5 a9 9e 9e 74 74 94 ed 90 8c 1d c4 e1 4a 14 82\n
    \       f5 d2 94 0c 19 e3 b9 10 bb 11 b9 e5 a5 fb 8e 21\n        51 63 02 86 aa
    06 b8 21 36 b6 7f 36 df d1 d6 68\n        5b 79 7c 1d 5a 14 75 1f 6a 93 75 93
    ce bb 97 72\n        8a f0 0f 23 9d 47 f6 d4 b3 c7 f0 f4 e6 f6 2b c2\n        32
    e1 89 67 be 7e 06 ae f8 d0 01 6b 8b 2a f5 02\n        d7 b6 a8 63 94 83 b0 1b
    31 7d 52 1a de e5 03 85\n        27 02 81 80 26 a6 32 2c 5a 2b d4 33 2b 5c dc
    06\n        87 53 3f 90 06 61 50 38 3e d2 b9 7d 81 1c 12 10\n        c5 0c 53
    d4 64 d1 8e 30 07 08 8c dd 3f 0a 2f 2c\n        d6 1b 7f 57 86 d0 da bb 6e 36
    2a 18 e8 d3 bc 70\n        31 7a 48 b6 4e 18 6e dd 1f 22 06 eb 3f ea d4 41\n        69
    d9 9b de 47 95 7a 72 91 d2 09 7f 49 5c 3b 03\n        33 51 c8 f1 39 9a ff 04
    d5 6e 7e 94 3d 03 b8 f6\n        31 15 26 48 95 a8 5c de 47 88 b4 69 3a 00 a7
    86\n        9e da d1 cd 02 21 00 e8 72 fa 96 f0 11 40 f5 f2\n        dc fd 3b
    5d 78 94 b1 85 01 e5 69 37 21 f7 25 b9\n        ba 71 4a fc 60 30 fb 02 61 00
    a3 91 01 c0 a8 6e\n        a4 4d a0 56 fc 6c fe 1f a7 b0 cd 0f 94 87 0c 25\n        be
    97 76 8d eb e5 a4 09 5d ab 83 cd 80 0b 35 67\n        7f 0c 8e a7 31 98 32 85
    39 40 9d 11 98 d8 de b8\n        7f 86 9b af 8d 67 3d b6 76 b4 61 2f 21 e1 4b
    0e\n        68 ff 53 3e 87 dd d8 71 56 68 47 dc f7 20 63 4b\n        3c 5f 78
    71 83 e6 70 9e e2 92 30 1a 03 15 00 1c\n        d5 3a 0d 17 82 6d 0a 81 75 81
    46 10 8e 3e db 09\n        e4 98 34 02 01 37 03 81 84 00 02 81 80 5f cf 39\n        ad
    62 cf 49 8e d1 ce 66 e2 b1 e6 a7 01 4d 05 c2\n        77 c8 92 52 42 a9 05 a4
    db e0 46 79 50 a3 fc 99\n        3d 3d a6 9b a9 ad bc 62 1c 69 b7 11 a1 c0 2a
    f1\n        85 28 f7 68 fe d6 8f 31 56 22 4d 0a 11 6e 72 3a\n        02 af 0e
    27 aa f9 ed ce 05 ef d8 59 92 c0 18 d7\n        69 6e bd 70 b6 21 d1 77 39 21
    e1 af 7a 3a cf 20\n        0a b4 2c 69 5f cf 79 67 20 31 4d f2 c6 ed 23 bf\n        c4
    bb 1e d1 71 40 2c 07 d6 f0 8f c5 1a a0 00 30\n        0c 06 08 2b 06 01 05 05
    07 06 04 05 00 03 47 00\n        30 44 02 20 54 d9 43 8d 0f 9d 42 03 d6 09 aa
    a1\n        9a 3c 17 09 ae bd ee b3 d1 a0 00 db 7d 8c b8 e4\n        56 e6 57
    7b 02 20 44 89 b1 04 f5 40 2b 5f e7 9c\n        f9 a4 97 50 0d ad c3 7a a4 2b
    b2 2d 5d 79 fb 38\n        8a b4 df bb 88 bc\n   Decoded version of result:\n
    \  0 30  707: SEQUENCE {\n   4 30  615:   SEQUENCE {\n   8 02    1:     INTEGER
    0\n  11 30   27:     SEQUENCE {\n  13 31   25:       SET {\n  15 30   23:         SEQUENCE
    {\n  17 06    3:           OBJECT IDENTIFIER commonName (2 5 4 3)\n  22 13   16:
    \          PrintableString 'IETF PKIX SAMPLE'\n            :           }\n            :
    \        }\n            :       }\n  40 30  577:     SEQUENCE {\n  44 30  438:
    \      SEQUENCE {\n  48 06    7:         OBJECT IDENTIFIER dhPublicNumber (1 2
    840 10046 2\n                                  1)\n  57 30  425:         SEQUENCE
    {\n  61 02  129:           INTEGER\n            :            00 94 84 E0 45 6C
    7F 69 51 62 3E 56 80 7C 68 E7\n            :            C5 A9 9E 9E 74 74 94 ED
    90 8C 1D C4 E1 4A 14 82\n            :            F5 D2 94 0C 19 E3 B9 10 BB 11
    B9 E5 A5 FB 8E 21\n            :            51 63 02 86 AA 06 B8 21 36 B6 7F 36
    DF D1 D6 68\n            :            5B 79 7C 1D 5A 14 75 1F 6A 93 75 93 CE BB
    97 72\n            :            8A F0 0F 23 9D 47 F6 D4 B3 C7 F0 F4 E6 F6 2B C2\n
    \           :            32 E1 89 67 BE 7E 06 AE F8 D0 01 6B 8B 2A F5 02\n            :
    \           D7 B6 A8 63 94 83 B0 1B 31 7D 52 1A DE E5 03 85\n            :            27\n
    193 02  128:           INTEGER\n            :            26 A6 32 2C 5A 2B D4
    33 2B 5C DC 06 87 53 3F 90\n            :            06 61 50 38 3E D2 B9 7D 81
    1C 12 10 C5 0C 53 D4\n            :            64 D1 8E 30 07 08 8C DD 3F 0A 2F
    2C D6 1B 7F 57\n            :            86 D0 DA BB 6E 36 2A 18 E8 D3 BC 70 31
    7A 48 B6\n            :            4E 18 6E DD 1F 22 06 EB 3F EA D4 41 69 D9 9B
    DE\n            :            47 95 7A 72 91 D2 09 7F 49 5C 3B 03 33 51 C8 F1\n
    \           :            39 9A FF 04 D5 6E 7E 94 3D 03 B8 F6 31 15 26 48\n            :
    \           95 A8 5C DE 47 88 B4 69 3A 00 A7 86 9E DA D1 CD\n 324 02   33:           INTEGER\n
    \           :            00 E8 72 FA 96 F0 11 40 F5 F2 DC FD 3B 5D 78 94\n            :
    \           B1 85 01 E5 69 37 21 F7 25 B9 BA 71 4A FC 60 30\n            :            FB\n
    359 02   97:           INTEGER\n            :            00 A3 91 01 C0 A8 6E
    A4 4D A0 56 FC 6C FE 1F A7\n            :            B0 CD 0F 94 87 0C 25 BE 97
    76 8D EB E5 A4 09 5D\n            :            AB 83 CD 80 0B 35 67 7F 0C 8E A7
    31 98 32 85 39\n            :            40 9D 11 98 D8 DE B8 7F 86 9B AF 8D 67
    3D B6 76\n            :            B4 61 2F 21 E1 4B 0E 68 FF 53 3E 87 DD D8 71
    56\n            :            68 47 DC F7 20 63 4B 3C 5F 78 71 83 E6 70 9E E2\n
    \           :            92\n 458 30   26:           SEQUENCE {\n 460 03   21:
    \            BIT STRING 0 unused bits\n            :            1C D5 3A 0D 17
    82 6D 0A 81 75 81 46 10 8E 3E DB\n            :            09 E4 98 34\n 483 02
    \   1:             INTEGER 55\n            :             }\n            :           }\n
    \           :         }\n 486 03  132:       BIT STRING 0 unused bits\n            :
    \        02 81 80 5F CF 39 AD 62 CF 49 8E D1 CE 66 E2 B1\n            :         E6
    A7 01 4D 05 C2 77 C8 92 52 42 A9 05 A4 DB E0\n            :         46 79 50 A3
    FC 99 3D 3D A6 9B A9 AD BC 62 1C 69\n            :         B7 11 A1 C0 2A F1 85
    28 F7 68 FE D6 8F 31 56 22\n            :         4D 0A 11 6E 72 3A 02 AF 0E 27
    AA F9 ED CE 05 EF\n            :         D8 59 92 C0 18 D7 69 6E BD 70 B6 21 D1
    77 39 21\n            :         E1 AF 7A 3A CF 20 0A B4 2C 69 5F CF 79 67 20 31\n
    \           :         4D F2 C6 ED 23 BF C4 BB 1E D1 71 40 2C 07 D6 F0\n            :
    \        8F C5 1A\n            :       }\n 621 A0    0:     [0]\n            :
    \    }\n 623 30   12:   SEQUENCE {\n 625 06    8:     OBJECT IDENTIFIER '1 3 6
    1 5 5 7 6 4'\n 635 05    0:     NULL\n            :     }\n 637 03   72:   BIT
    STRING 0 unused bits\n            :     30 45 02 21 00 A1 B5 B4 90 01 34 6B A0
    31 6A 73\n            :     F5 7D F6 5C 14 43 52 D2 10 BF 86 58 87 F7 BC 6E\n
    \           :     5A 77 FF C3 4B 02 20 59 40 45 BC 6F 0D DC FF 9D\n            :
    \    55 40 1E C4 9E 51 3D 66 EF B2 FF 06 40 9A 39 68\n            :     75 81
    F7 EC 9E BE A1\n            :   }\n"
  title: Appendix C.  Example of Discrete Log Signature
- contents:
  - "Authors' Addresses\n   Jim Schaad\n   Soaring Hawk Consulting\n   EMail: ietf@augustcellars.com\n
    \  Hemma Prafullchandra\n   HyTrust, Inc.\n   1975 W. El Camino Real, Suite 203\n
    \  Mountain View, CA  94040\n   USA\n   Phone: (650) 681-8100\n   EMail: HPrafullchandra@hytrust.com\n"
  title: Authors' Addresses
