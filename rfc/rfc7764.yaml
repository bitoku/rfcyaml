- title: __initial_text__
  contents:
  - "                         Guidance on Markdown:\n  Design Philosophies, Stability\
    \ Strategies, and Select Registrations\nAbstract\n   This document elaborates\
    \ upon the text/markdown media type for use\n   with Markdown, a family of plain-text\
    \ formatting syntaxes that\n   optionally can be converted to formal markup languages\
    \ such as HTML.\n   Background information, local storage strategies, and additional\n\
    \   syntax registrations are supplied.\nStatus of This Memo\n   This document\
    \ is not an Internet Standards Track specification; it is\n   published for informational\
    \ purposes.\n   This document is a product of the Internet Engineering Task Force\n\
    \   (IETF).  It represents the consensus of the IETF community.  It has\n   received\
    \ public review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Not all documents\n   approved by the IESG are a candidate\
    \ for any level of Internet\n   Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7764.\n\
    Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\nTable of Contents\n\
    \   1.  Dive into Markdown . . . . . . . . . . . . . . . . . . . . . .  3\n  \
    \   1.1. On Formats  . . . . . . . . . . . . . . . . . . . . . . . .  3\n    \
    \ 1.2. Markdown Design Philosophy  . . . . . . . . . . . . . . . .  4\n     1.3.\
    \ Uses of Markdown  . . . . . . . . . . . . . . . . . . . . .  5\n     1.4. Uses\
    \ of Labeling Markdown Content as text/markdown  . . . .  6\n     1.5. Definitions\
    \ . . . . . . . . . . . . . . . . . . . . . . . .  6\n   2.  Strategies for Preserving\
    \ Media Type and Parameters  . . . . .  7\n     2.1. Map to Filename and Attributes\
    \  . . . . . . . . . . . . . .  7\n     2.2. Store Headers in Adjacent File  .\
    \ . . . . . . . . . . . . .  8\n     2.3. \"Arm\" Content with MIME Headers .\
    \ . . . . . . . . . . . . .  8\n     2.4. Create a Local Batch Script . . . .\
    \ . . . . . . . . . . . .  9\n     2.5. Process the Markdown in Advance . . .\
    \ . . . . . . . . . . .  9\n     2.6. Rely on Context . . . . . . . . . . . .\
    \ . . . . . . . . . .  9\n     2.7. Specific Strategies . . . . . . . . . . .\
    \ . . . . . . . . .  9\n       2.7.1. Subversion  . . . . . . . . . . . . . .\
    \ . . . . . . . .  9\n       2.7.2. Git . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . 10\n   3.  Registration Templates for Common Markdown Syntaxes\
    \  . . . . . 10\n     3.1. MultiMarkdown . . . . . . . . . . . . . . . . . . .\
    \ . . . . 10\n     3.2. GitHub-Flavored Markdown  . . . . . . . . . . . . . .\
    \ . . . 11\n     3.3. Pandoc  . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . 12\n     3.4. Fountain (Fountain.io)  . . . . . . . . . . . . . . . . .\
    \ . 14\n     3.5. CommonMark  . . . . . . . . . . . . . . . . . . . . . . . .\
    \ 14\n     3.6. kramdown-rfc2629 (Markdown for RFCs)  . . . . . . . . . . . 15\n\
    \     3.7. rfc7328 (Pandoc2rfc)  . . . . . . . . . . . . . . . . . . . 16\n  \
    \   3.8. PHP Markdown Extra  . . . . . . . . . . . . . . . . . . . . 16\n   4.\
    \  Examples for Common Markdown Syntaxes  . . . . . . . . . . . . 17\n     4.1.\
    \ MultiMarkdown . . . . . . . . . . . . . . . . . . . . . . . 17\n     4.2. GitHub\
    \ Flavored Markdown  . . . . . . . . . . . . . . . . . 18\n     4.3. Pandoc  .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . 19\n     4.4. Fountain (Fountain.io)\
    \  . . . . . . . . . . . . . . . . . . 20\n     4.5. CommonMark  . . . . . . .\
    \ . . . . . . . . . . . . . . . . . 21\n     4.6. kramdown-rfc2629 (Markdown for\
    \ RFCs)  . . . . . . . . . . . 22\n     4.7. rfc7328 (Pandoc2rfc)  . . . . . .\
    \ . . . . . . . . . . . . . 25\n   5.  IANA Considerations  . . . . . . . . .\
    \ . . . . . . . . . . . . 25\n   6. Security Considerations . . . . . . . . .\
    \ . . . . . . . . . . . 26\n   7. References  . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . 26\n     7.1. Normative References  . . . . . . . . . .\
    \ . . . . . . . . . 26\n     7.2. Informative References  . . . . . . . . . .\
    \ . . . . . . . . 26\n   Author's Address . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . 28\n1.  Dive into Markdown\n   This document serves as an informational\
    \ companion to [RFC7763], the\n   text/markdown media type registration.  It should\
    \ be considered\n   jointly with [RFC7763].\n         \"Sometimes the truth of\
    \ a thing is not so much in the think of\n         it, but in the feel of it.\"\
    \ -- Stanley Kubrick\n1.1.  On Formats\n   In computer systems, textual data is\
    \ stored and processed using a\n   continuum of techniques.  On the one end is\
    \ plain text: computer-\n   encoded text that consists only of a sequence of code\
    \ points from a\n   given standard, with no other formatting or structural information\n\
    \   [UNICODE].  Plain text provides /some/ fixed facilities for\n   formatting\
    \ instructions (namely, codes in the character set that have\n   meanings other\
    \ than \"represent this character graphically on the\n   output medium\"); however,\
    \ these facilities are not particularly\n   extensible.  Compare with Section\
    \ 4.2.1 of [RFC6838].  Applications\n   may neuter the effects of these special\
    \ characters by prohibiting\n   them or by ignoring their dictated meanings, as\
    \ is the case with how\n   modern applications treat most control characters in\
    \ US-ASCII.  On\n   this end, any text reader or editor that interprets the character\
    \ set\n   can be used to see or manipulate the text.  If some characters are\n\
    \   corrupted, the corruption is unlikely to affect the ability of a\n   computer\
    \ system to process the text (even if the human meaning is\n   changed).\n   On\
    \ the other end is binary data: a sequence of bits intended for some\n   computer\
    \ application to interpret and act upon.  Binary formats are\n   flexible in that\
    \ they can store non-textual data efficiently (perhaps\n   storing no text at\
    \ all, or only storing certain kinds of text for\n   very specialized purposes).\
    \  Binary formats require an application to\n   be coded specifically to handle\
    \ the format; no partial\n   interoperability is possible.  Furthermore, if even\
    \ one bit is\n   corrupted in a binary format, it may prevent an application from\n\
    \   processing any of the data correctly.\n   Between these two extremes lies\
    \ formatted text, i.e., text that\n   includes non-textual information coded in\
    \ a particular way, that\n   affects the interpretation of the text by computer\
    \ programs.\n   Formatted text is distinct from plain text and binary data in\
    \ that\n   the non-textual information is encoded into textual characters that\n\
    \   are assigned specialized meanings not defined by the character set.\n   With\
    \ a regular text editor and a standard keyboard (or other standard\n   input mechanism),\
    \ a user can enter these textual characters to\n   express the non-textual meanings.\
    \  For example, a character like \"<\"\n   no longer means \"LESS-THAN SIGN\"\
    ; it means the start of a tag or\n   element that affects the document in some\
    \ way.\n   On the formal end of the formatted text spectrum is markup, a family\n\
    \   of languages for annotating a document in such a way that the\n   annotations\
    \ are syntactically distinguishable from the text.  Markup\n   languages are (reasonably)\
    \ well-specified and tend to follow (mostly)\n   standardized syntax rules.  Examples\
    \ of markup languages include\n   Standard Generalized Markup Language (SGML),\
    \ HTML, XML, and LaTeX.\n   Standardized rules lead to interoperability between\
    \ markup\n   processors, but a skill requirement for new (human) users of the\n\
    \   language that they learn these rules in order to do useful work.\n   This\
    \ imposition makes markup less accessible for non-technical users\n   (i.e., users\
    \ who are unwilling or unable to invest in the requisite\n   skill development).\n\
    \     informal        /---------formatted text----------\\        formal\n   \
    \  <------v-------------v-------------v-----------------------v---->\n      plain\
    \ text     informal markup   formal markup    binary format\n                \
    \     (Markdown)        (HTML, XML, etc.)\n    Figure 1: Degrees of Formality\
    \ in Data-Storage Formats for Text\n   On the informal end of the spectrum are\
    \ lightweight markup languages.\n   In comparison with formal markup like XML,\
    \ lightweight markup uses\n   simple syntax, and is designed to be easy for humans\
    \ to enter with\n   basic text editors.  Markdown, the subject of this document,\
    \ is an\n   /informal/ plain-text formatting syntax that is intentionally\n  \
    \ targeted at non-technical users (i.e., users upon whom little to no\n   skill\
    \ development is imposed) using unspecialized tools (i.e., text\n   boxes).  Jeff\
    \ Atwood once described these informal markup languages\n   as \"humane\" [HUMANE].\n\
    1.2.  Markdown Design Philosophy\n   Markdown specifically is a family of syntaxes\
    \ that are based on the\n   original work of John Gruber with substantial contributions\
    \ from\n   Aaron Swartz, released in 2004 [MARKDOWN].  Since its release, a\n\
    \   number of web or web-facing applications have incorporated Markdown\n   into\
    \ their text-entry systems, frequently with custom extensions.\n   Fed up with\
    \ the complexity and security pitfalls of formal markup\n   languages (e.g., HTML5)\
    \ and proprietary binary formats (e.g.,\n   commercial word-processing software),\
    \ yet unwilling to be confined to\n   the restrictions of plain text, many users\
    \ have turned to Markdown\n   for document processing.  Whole toolchains now exist\
    \ to support\n   Markdown for online and offline projects.\n   Informality is\
    \ a bedrock premise of Gruber's design.  Gruber created\n   Markdown after disastrous\
    \ experiences with strict XML and XHTML\n   processing of syndicated feeds.  In\
    \ Mark Pilgrim's \"thought\n   experiment\", several websites went down because\
    \ one site included\n   invalid XHTML in a blog post, which was automatically\
    \ copied via\n   trackbacks across other sites [DIN2MD].  These scenarios led\
    \ Gruber\n   to believe that clients (e.g., web browsers) SHOULD try to make sense\n\
    \   of data that they receive, rather than rejecting data simply because\n   it\
    \ fails to adhere to strict, unforgiving standards.  (In [DIN2MD],\n   Gruber\
    \ compared Postel's Law [RFC793] with the XML standard, which\n   says: \"Once\
    \ a fatal error is detected [...] the processor MUST NOT\n   continue normal processing\"\
    \ [XML1.0-5].) As a result, there is no\n   such thing as \"invalid\" Markdown,\
    \ there is no standard demanding\n   adherence to the Markdown syntax, and there\
    \ is no governing body that\n   guides or impedes its development.  If the Markdown\
    \ syntax does not\n   result in the \"right\" output (defined as output that the\
    \ author\n   wants, not output that adheres to some dictated system of rules),\n\
    \   Gruber's view is that the author either should keep on experimenting\n   or\
    \ should change the processor to address the author's particular\n   needs (see\
    \ [MARKDOWN] Readme and [MD102b8] perldoc; see also\n   [CATPICS]).\n1.3.  Uses\
    \ of Markdown\n   Since its introduction in 2004, Markdown has enjoyed remarkable\n\
    \   success.  Markdown works for users for three key reasons.  First, the\n  \
    \ markup instructions (in text) look similar to the markup that they\n   represent;\
    \ therefore, the cognitive burden to learn the syntax is\n   low.  Second, the\
    \ primary arbiter of the syntax's success is *running\n   code*.  The tool that\
    \ converts the Markdown to a presentable format,\n   and not a series of formal\
    \ pronouncements by a standards body, is the\n   basis for whether syntactic elements\
    \ matter.  Third, Markdown has\n   become something of an Internet meme [INETMEME],\
    \ in that Markdown\n   gets received, reinterpreted, and reworked as additional\
    \ communities\n   encounter it.  There are communities that are using Markdown\
    \ for\n   scholarly writing [OCCASION], for screenplays [FOUNTAIN], and even\n\
    \   for mathematical formulae [MATHDOWN].  Clearly, a screenwriter has no\n  \
    \ use for specialized Markdown syntax for mathematicians; likewise,\n   mathematicians\
    \ do not need to identify characters or props in common\n   ways.  The overall\
    \ gist is that all of these communities can take the\n   common elements of Markdown\
    \ (which are rooted in the common elements\n   of HTML circa 2004) and build on\
    \ them in ways that best fit their\n   needs.\n1.4.  Uses of Labeling Markdown\
    \ Content as text/markdown\n   The primary purpose of an Internet media type is\
    \ to label \"content\"\n   on the Internet, as distinct from \"files\".  Content\
    \ is any computer-\n   readable format that can be represented as a primary sequence\
    \ of\n   octets, along with type-specific metadata (parameters) and type-\n  \
    \ agnostic metadata (protocol dependent).  From this description, it is\n   apparent\
    \ that appending \".markdown\" to the end of a filename is not a\n   sufficient\
    \ means to identify Markdown.  Filenames are properties of\n   files in file systems,\
    \ but Markdown frequently exists in databases or\n   content management systems\
    \ (CMSes) where the file metaphor does not\n   apply.  One CMS [RAILFROG] uses\
    \ media types to select appropriate\n   processing, so a media type is necessary\
    \ for the safe and\n   interoperable use of Markdown.\n   Unlike complete HTML\
    \ documents, [MDSYNTAX] provides no means to\n   include metadata in the content\
    \ stream.  Several derivative flavors\n   have invented metadata incorporation\
    \ schemes (e.g., [MULTIMD]), but\n   these schemes only address specific use cases.\
    \  In general, the\n   metadata must be supplied via supplementary means in an\
    \ encapsulating\n   protocol, format, or convention.  The relationship between\
    \ the\n   content and the metadata is not directly addressed here or in\n   [RFC7763];\
    \ however, by identifying Markdown with a media type,\n   Markdown content can\
    \ participate as a first-class citizen with a wide\n   spectrum of metadata schemes.\n\
    \   Finally, registering a media type through the IETF process is not\n   trivial.\
    \  Markdown can no longer be considered a \"vendor\"-specific\n   innovation,\
    \ but the registration requirements even in the vendor tree\n   have proven to\
    \ be overly burdensome for most Markdown implementers.\n   Moreover, registering\
    \ hundreds of Markdown variants with distinct\n   media types would impede interoperability:\
    \ virtually all Markdown\n   content can be processed by virtually any Markdown\
    \ processor, with\n   varying degrees of success.  The goal of [RFC7763] is to\
    \ reduce all\n   of these burdens by having one media type that accommodates diversity\n\
    \   and eases registration.\n1.5.  Definitions\n   The key words \"MUST\", \"\
    MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\"\
    , \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted\
    \ as described in [RFC2119].\n   Since Markdown signifies a family of related\
    \ formats with varying\n   degrees of formal documentation and implementation,\
    \ this\n   specification uses the term \"variant\" to identify such formats.\n\
    2.  Strategies for Preserving Media Type and Parameters\n   The purpose of this\
    \ document and [RFC7763] is to promote\n   interoperability between different\
    \ Markdown-related systems,\n   preserving the author's intent.  While [MARKDOWN]\
    \ was designed by\n   Gruber in 2004 as a simple way to write blog posts and comments,\
    \ as\n   of 2014 Markdown and its derivatives are rapidly becoming the formats\n\
    \   of record for many communities and use cases.  While an individual\n   member\
    \ of (or software tool for) a community can probably look at\n   some \"Markdown\"\
    \ and declare its meaning intuitively obvious, software\n   systems in different\
    \ communities (or different times) need help.\n   [MDSYNTAX] does not have a signaling\
    \ mechanism like <!DOCTYPE>, so\n   tagging Markdown internally is simply out\
    \ of the question.  Once tags\n   or metadata are introduced, the content is no\
    \ longer \"just\" Markdown.\n   Some commentators have suggested that an in-band\
    \ signaling mechanism,\n   such as in Markdown link definitions at the top of\
    \ the content, could\n   be used to signal the variant.  Unfortunately, this signaling\n\
    \   mechanism is incompatible with other Markdown variants (e.g.,\n   [PANDOC])\
    \ that expect their own kinds of metadata at the top of the\n   file.  Markdown\
    \ content is just a stream of text; the semantics of\n   that text can only be\
    \ furnished by context.\n   The media type and variant parameter in [RFC7763]\
    \ furnish this\n   missing context, while allowing for additional extensibility.\
    \  This\n   section covers strategies for how an application might preserve\n\
    \   metadata when it leaves the domain of IETF protocols.\n   [RFC7763] only defines\
    \ two parameters: the charset parameter\n   (required for all text/* media types)\
    \ and the variant parameter.\n   [RFC6657] provides guidance on character-set\
    \ parameter handling.  The\n   variant parameter provides a simple identifier\
    \ -- nothing less or\n   more.  Variants are allowed to define additional parameters\
    \ when sent\n   with the text/markdown media type; the variant can also introduce\n\
    \   control information into the textual content stream (such as via a\n   metadata\
    \ block).  Neither [RFC7763] nor this specification recommend\n   any particular\
    \ approach.  However, the philosophy behind [RFC7763] is\n   to preserve formats\
    \ rather than create new ones, since supporting\n   existing toolchains is more\
    \ realistic than creating novel ones that\n   lack traction in the Markdown community.\n\
    2.1.  Map to Filename and Attributes\n   This strategy is to map the media type,\
    \ variant, and parameters to\n   \"attributes\" or \"forks\" in the local convention.\
    \  Firstly, Markdown\n   content saved to a file should have an appropriate file\
    \ extension\n   ending in .md or .markdown, which serves to disambiguate it from\n\
    \   other kinds of files.  The character repertoire of variant\n   identifiers\
    \ in [RFC7763] is designed to be compatible with most\n   filename conventions.\
    \  Therefore, a recommended strategy is to record\n   the variant identifier as\
    \ the prefix to the file extension.  For\n   example, for [PANDOC] content, a\
    \ file could be named\n   \"example.pandoc.markdown\".\n   Many filesystems are\
    \ case-sensitive or case-preserving; however, file\n   extensions tend to be all\
    \ lowercase.  This document takes no position\n   on whether variant identifiers\
    \ should be case-preserved or all\n   lowercase when Markdown content is written\
    \ to a file.  However, when\n   the variant identifier is read to influence operational\
    \ behavior, it\n   needs to be compared case-insensitively.\n   Many modern filesystems\
    \ support \"extended attributes\", \"alternate\n   data streams\", or \"resource\
    \ forks\".  Some version control systems\n   support named properties.  If the\
    \ variant defines additional\n   parameters, these parameters should be stored\
    \ in these resources,\n   where the parameter name includes the name of the resource,\
    \ and the\n   parameter value is the value of the resource (data in the resource),\n\
    \   preferably UTF-8 encoded (unless the parameter definition explicitly\n   defines\
    \ a different encoding or repertoire).  The variant identifier\n   itself should\
    \ be stored in a resource with a name including the term\n   \"variant\" (possibly\
    \ including other decorations to avoid namespace\n   collisions).\n2.2.  Store\
    \ Headers in Adjacent File\n   This strategy is to save the Markdown content in\
    \ a first file and to\n   save the metadata (specifically the Content-Type header)\
    \ in a second\n   file with a filename that is rationally related to the first\n\
    \   filename.  For example, if the first file is named \"readme.markdown\",\n\
    \   the second file could be named \"readme.markdown.headers\".  (If stored\n\
    \   in a database, the analogy would be to store the metadata in a second\n  \
    \ table with a field that is a key to the first table.)  This header\n   file\
    \ has the media type message/global-headers [RFC6533] (\".u8hdr\"\n   suggestion\
    \ notwithstanding).\n2.3.  \"Arm\" Content with MIME Headers\n   This strategy\
    \ is to save the Markdown content along with its headers\n   in a file, \"arming\"\
    \ the content by prepending the MIME headers\n   (specifically the Content-Type\
    \ header).  It should be appreciated\n   that the file is no longer a \"Markdown\
    \ file\"; rather, it is an\n   Internet Message Format file (e.g., [RFC5322])\
    \ with a Markdown\n   content part.  Therefore, the file should have an Internet\
    \ message\n   extension (e.g., \".eml\", \".msg\", or \".u8msg\"), not a Markdown\n\
    \   extension (e.g., \".md\" or \".markdown\").\n2.4.  Create a Local Batch Script\n\
    \   This strategy is to translate the processing instructions inferred\n   from\
    \ the Content-Type and other parameters (e.g., Content-\n   Disposition) into\
    \ a sequence of commands in the local convention,\n   storing those commands in\
    \ a batch script.  For example, when a MIME-\n   aware client stores some Markdown\
    \ to disk, the client can save a\n   Makefile in the same directory with commands\
    \ that are appropriate\n   (and safe) for the local system.\n2.5.  Process the\
    \ Markdown in Advance\n   This strategy is to process the Markdown into the formal\
    \ markup,\n   before a recipient receives it; this eliminates ambiguities.  Once\n\
    \   the Markdown is processed into (for example) valid XHTML, an\n   application\
    \ can save a file as \"doc.xhtml\" or can send MIME content\n   as application/xhtml+xml\
    \ with no further loss of metadata.  While\n   unambiguous, this process may not\
    \ be reversible.\n2.6.  Rely on Context\n   This last strategy is to use or create\
    \ context to determine how to\n   interpret the Markdown.  For example, Markdown\
    \ content that is of the\n   Fountain.io type [FOUNTAIN] could be saved with the\
    \ filename\n   \"script.fountain\" instead of \"script.markdown\".  Alternatively,\n\
    \   scripts could be stored in a \"/screenplays\" directory while other\n   kinds\
    \ of Markdown could be stored elsewhere.  For reasons that should\n   be intuitively\
    \ obvious, this method is the most error-prone.\n   \"Context\" can be easily\
    \ lost over time, and the trend of passing\n   Markdown between systems -- taking\
    \ them *out* of context -- is\n   increasing.\n2.7.  Specific Strategies\n2.7.1.\
    \  Subversion\n   This subsection covers a preservation strategy in Subversion\
    \ [SVN], a\n   common client-server version control system.\n   Subversion supports\
    \ named properties.  The \"svn:mime-type\" property\n   duplicates the entire\
    \ Content-Type header, so parameters SHOULD be\n   stored there (Section 2.1).\
    \  The filename SHOULD be consistent with\n   this Content-Type header, i.e.,\
    \ the extension SHOULD be the variant\n   identifier plus \".markdown\" (Section\
    \ 2.1).\n2.7.2.  Git\n   This subsection covers a preservation strategy in Git\
    \ [GIT], a common\n   distributed version control system.\n   Versions of Git\
    \ as of the time of this writing do not support\n   arbitrary metadata storage;\
    \ however, third-party projects add this\n   support.\n   If Git is used without\
    \ a metadata storage service, then a reasonable\n   strategy is to include the\
    \ variant identifier in the filename\n   (Section 2.1).  The default text encoding\
    \ SHOULD be UTF-8.  For other\n   or different properties, a header file SHOULD\
    \ be recorded alongside\n   the Markdown file (Section 2.2).\n   If a metadata\
    \ storage service is used with Git, then use a convention\n   that is most analogous\
    \ to the service.  For example, the \"metastore\"\n   project emulates extended\
    \ attributes (xattrs) of a POSIX-like system,\n   so whatever \"xattr\" methodology\
    \ is developed would be usable with\n   metastore and Git.\n3.  Registration Templates\
    \ for Common Markdown Syntaxes\n   The purpose of this section is to register\
    \ certain syntaxes in the\n   \"Markdown Variants\" registry [RFC7763] because\
    \ they illustrate\n   particularly interesting use cases or are broadly applicable\
    \ to the\n   Internet community; thus, these syntaxes would benefit from the level\n\
    \   of review associated with publication as IETF documents.\n3.1.  MultiMarkdown\n\
    \   Identifier: MultiMarkdown\n   Name: MultiMarkdown\n   Description:\n     \
    \ MultiMarkdown (MMD) is a superset of \"Original\".  It adds multiple\n     \
    \ syntax features (tables, footnotes, and citations, to name a few)\n      and\
    \ is intended to output to various formats.  Additionally, it\n      builds in\
    \ \"smart\" typography for various languages (proper left-\n      and right-sided\
    \ quotes, for example).\n   Additional Parameters:\n      options: String with\
    \ zero or more of the following tokens\n      delimited by whitespace (WSP):\n\
    \            \"memoir\" / \"beamer\"\n            \"full\" / \"snippet\"\n   \
    \         \"process-html\"\n            \"random-footnote-identifiers\"\n    \
    \        \"accept\"\n            \"reject\"\n            \"nosmart\"\n       \
    \     \"nonotes\"\n            \"nolabels\"\n            \"nomask\"\n        \
    \    The meanings of these tokens are defined in the\n            MultiMarkdown\
    \ documentation.\n   References:\n      <http://fletcher.github.io/MultiMarkdown-4/syntax>\n\
    \   Contact Information:\n      (individual) Fletcher T. Penney <fletcher@fletcherpenney.net>\n\
    \                   <http://fletcherpenney.net/multimarkdown/>\n3.2.  GitHub Flavored\
    \ Markdown\n   Identifier: GFM\n   Name: GitHub Flavored Markdown\n      Description:\n\
    \      \"Original\" with the following differences:\n      1. Multiple underscores\
    \ in words\n      2. URL (URI) autolinking\n      3. Strikethrough\n      4. Fenced\
    \ code blocks\n      5. Syntax highlighting\n      6. Tables (- for rows; | for\
    \ columns; : for alignment)\n      7. Only some HTML allowed; sanitization is\
    \ integral to the format\n   References:\n      <https://help.github.com/articles/github-flavored-markdown/>\n\
    \      <https://github.com/github/markup/tree/master#html-sanitization>\n   Contact\
    \ Information:\n      (corporate) GitHub, Inc. <https://github.com/contact>\n\
    3.3.  Pandoc\n   Identifier: pandoc\n   Name: Pandoc\n   Description:\n      Markdown\
    \ is designed to be easy to write and to read: the content\n      should be publishable\
    \ as-is, as plain text, without looking like\n      it has been marked up with\
    \ tags or formatting instructions.  Yet\n      whereas \"Original\" has HTML generation\
    \ in mind, pandoc is designed\n      for multiple output formats.  Thus, while\
    \ pandoc allows the\n      embedding of raw HTML, it discourages it, and provides\
    \ other, non-\n      HTMLish ways of representing important document elements\
    \ like\n      definition lists, tables, mathematics, and footnotes.\n   Additional\
    \ Parameters:\n      extensions: String with an optional starting syntax token,\n\
    \                  followed by a \"+\" and \"-\" delimited list of extension\n\
    \                  tokens.  \"+\" preceding an extension token turns the\n   \
    \               extension on; \"-\" turns the extension off.  The\n          \
    \        starting syntax tokens are \"markdown\",\n                  \"markdown_strict\"\
    , \"markdown_phpextra\", and\n                  \"markdown_github\".  If no starting\
    \ syntax token is\n                  given, \"markdown\" is assumed.  The extension\
    \ tokens\n                  include:\n                  Extensions to turn off\
    \ (on by default):\n                  escaped_line_breaks\n                  blank_before_header\n\
    \                  header_attributes\n                  auto_identifiers\n   \
    \               implicit_header_references\n                  blank_before_blockquote\n\
    \                  fenced_code_blocks\n                  fenced_code_attributes\n\
    \                  line_blocks\n                  fancy_lists\n              \
    \    startnum\n                  definition_lists\n                  example_lists\n\
    \                  table_captions\n                  simple_tables\n         \
    \         multiline_tables\n                  grid_tables\n                  pipe_tables\n\
    \                  pandoc_title_block\n                  yaml_metadata_block\n\
    \                  all_symbols_escapable\n                  intraword_underscores\n\
    \                  strikeout\n                  superscript\n                \
    \  subscript\n                  inline_code_attributes\n                  tex_math_dollars\n\
    \                  raw_html\n                  markdown_in_html_blocks\n     \
    \             native_divs\n                  native_spans\n                  raw_tex\n\
    \                  latex_macros\n                  implicit_figures\n        \
    \          footnotes\n                  inline_notes\n                  citations\n\
    \                  Extensions to turn on (off by default):\n                 \
    \ lists_without_preceding_blankline\n                  hard_line_breaks\n    \
    \              ignore_line_breaks\n                  tex_math_single_backslash\n\
    \                  tex_match_double_backslash\n                  markdown_attribute\n\
    \                  mmd_title_block\n                  abbreviations\n        \
    \          autolink_bare_uris\n                  ascii_identifiers\n         \
    \         link_attributes\n                  mmd_header_identifiers\n        \
    \          compact_definition_lists\n   Fragment Identifiers:\n      Pandoc defines\
    \ fragment identifiers using the <id> in the\n      {#<id> .class ...} production\
    \ (PHP Markdown Extra attribute\n      block).  This syntax works for Header Identifiers\
    \ and Code Block\n      Identifiers.\n   References:\n      <http://johnmacfarlane.net/pandoc/README.html#pandocs-markdown>\n\
    \   Contact Information:\n      (individual) Prof. John MacFarlane <jgm@berkeley.edu>\n\
    \                   <http://johnmacfarlane.net/>\n3.4.  Fountain (Fountain.io)\n\
    \   Identifier: Fountain\n   Name: Fountain\n   Description:\n      Fountain is\
    \ a simple markup syntax for writing, editing, and\n      sharing screenplays\
    \ in plain, human-readable text.  Fountain\n      allows you to work on your screenplay\
    \ anywhere, on any computer or\n      tablet, using any software that edits text\
    \ files.\n   Fragment Identifiers:\n      See <http://fountain.io/syntax#section-titlepage>\
    \ and\n      <http://fountain.io/syntax#section-sections>.  In the following\n\
    \      fragment identifiers, the <key> and <sec*> productions MUST have\n    \
    \  \"/\" characters percent-encoded.\n      #/       Title Page (acts as metadata).\n\
    \      #/<key>  Title Page; <key> is the key string.\n      #<sec1> *(\"/\" <secn>)\n\
    \            Section or subsection.  The <sec1>..<secn> productions are\n    \
    \        the text of the Section line, with whitespace trimmed from\n        \
    \    both ends.  Subsections (sections with multiple # characters\n          \
    \  at the beginning of the line in the source) are addressed\n            hierarchically\
    \ by preceding the subsection with higher-order\n            sections.  If the\
    \ section hierarchy \"skips\", e.g., # to ###,\n            use a blank section\
    \ name, e.g.,\n            #Section/ACT%20I//PATIO%20SCENE.\n   References:\n\
    \      <http://fountain.io/syntax>\n   Contact Information:\n      (individual)\
    \ Stu Maschwitz <http://prolost.com/>\n      (individual) John August <http://johnaugust.com/>\n\
    3.5.  CommonMark\n   Identifier: CommonMark\n   Name: CommonMark\n   Description:\n\
    \      CommonMark is a standard, unambiguous syntax specification for\n      Markdown,\
    \ along with a suite of comprehensive tests to validate\n      Markdown implementations\
    \ against this specification.  The\n      maintainers believe that CommonMark\
    \ is necessary, even essential,\n      for the future of Markdown.\n      Compared\
    \ to \"Original\", CommonMark is much longer and in a few\n      instances contradicts\
    \ \"Original\" based on seasoned experience.\n      Although CommonMark specifically\
    \ does not mandate any particular\n      encoding for the input content, CommonMark\
    \ draws in more of\n      Unicode, UTF-8, and HTML (including HTML5) than \"Original\"\
    .\n      This registration always refers to the latest version or an\n      unspecified\
    \ version (receiver's choice).  Version 0.13 of the\n      CommonMark specification\
    \ was released 2014-12-10.\n   References:\n      <http://spec.commonmark.org/>\n\
    \   Contact Information:\n      (individual) John MacFarlane <jgm@berkeley.edu>\n\
    \      (individual) David Greenspan <david@meteor.com>\n      (individual) Vicent\
    \ Marti <vicent@github.com>\n      (individual) Neil Williams <neil@reddit.com>\n\
    \      (individual) Benjamin Dumke-von der Ehe <ben@stackexchange.com>\n     \
    \ (individual) Jeff Atwood <jatwood@codinghorror.com>\n3.6.  kramdown-rfc2629\
    \ (Markdown for RFCs)\n   Identifier: kramdown-rfc2629\n   Name: Markdown for\
    \ RFCs\n   Description:\n      kramdown is a markdown parser by Thomas Leitner;\
    \ it has a number\n      of backends for generating HTML, LaTeX, and Markdown\
    \ again.\n      kramdown-rfc2629 is an additional backend to that: It allows the\n\
    \      generation of XML2RFC XML markup (originally known as markup that\n   \
    \   is RFC 2629 compliant, now documented in RFC 7749).\n   References:\n    \
    \  <https://github.com/cabo/kramdown-rfc2629>\n   Contact Information:\n     \
    \ (individual) Carsten Bormann <cabo@tzi.org>\n3.7.  rfc7328 (Pandoc2rfc)\n  \
    \ Identifier: rfc7328\n   Name: Pandoc2rfc\n   Description:\n      Pandoc2rfc\
    \ allows authors to write in \"pandoc\" that is then\n      transformed to XML\
    \ and given to xml2rfc.  The conversions are, in\n      a way, amusing, as we\
    \ start off with (almost) plain text, use\n      elaborate XML, and end up with\
    \ plain text again.\n      References:\n      RFC 7328\n      <https://github.com/miekg/pandoc2rfc>\n\
    \      Contact Information:\n        (individual) R. (Miek) Gieben <miek@google.com>\n\
    3.8.  PHP Markdown Extra\n   Identifier: Extra\n   Name: Markdown Extra\n   Description:\n\
    \   Markdown Extra is an extension to PHP Markdown implementing some\n   features\
    \ currently not available with the plain Markdown syntax.\n   Markdown Extra is\
    \ available as a separate parser class in PHP\n   Markdown Lib.  Other implementations\
    \ include Maruku (Ruby) and Python\n   Markdown.  Markdown Extra is supported\
    \ in several content management\n   systems, including Drupal, TYPO3, and MediaWiki.\n\
    \   Fragment Identifiers:\n   Markdown Extra defines fragment identifiers using\
    \ the <id> in the\n   {#<id> .class ...} production (attribute block).  This syntax\
    \ works\n   for headers, fenced code blocks, links, and images.\n   References:\n\
    \   <https://michelf.ca/projects/php-markdown/extra/>\n   Contact Information:\n\
    \     (individual) Michel Fortin <michel.fortin@michelf.ca>\n4.  Examples for\
    \ Common Markdown Syntaxes\n   This section provides examples of the variants\
    \ in Section 3.\n4.1.  MultiMarkdown\nTitle:    Example of MultiMarkdown\nKeywords:\
    \ IETF, example, footnotes\n# MultiMarkdown Example #\nMultiMarkdown supports\
    \ several cool features, as well as\nseveral output formats:\n*   HTML\n*   PDF\n\
    *   OpenDocument\n*   OPML\n*   LaTeX\n## Footnotes ##\nFootnotes are described\
    \ in the\nMultiMarkdown Syntax Guide.[^somesamplefootnote]\n[^somesamplefootnote]:\
    \ Here is the text of the footnote itself.\n                    Figure 1: MultiMarkdown\
    \ Example\n4.2.  GitHub-Flavored Markdown\n# Start Out #\nGFM is like regular\
    \ Markdown with a few extra features. For example,\nhttp://www.example.com/ will\
    \ get auto-linked. ~~This is strike-through\ntext, demarked by the double tildes.~~\n\
    ```\nfunction test() {\n  return \"notice this feature?\");\n}\n```\n# Table Alignments\
    \ #\n| Left      | Center  |  Right |\n|:--------- |:-------:| ------:|\n| cats\
    \      | Paxton  |  $1600 |\n| dogs      |  Ruff   |    $30 |\n| zebras    | Stripes\
    \ | $20900 |\n               Figure 2: GitHub Flavored Markdown Example\n4.3.\
    \  Pandoc\n% Pandoc User's Guide\n% John MacFarlane\n% August 30, 2014\nSynopsis\
    \ {#syn}\n========\npandoc [*options*] [*input-file*]...\nDescription {#desc}\n\
    ===========\nPandoc is a [Haskell] library for converting from one markup format\
    \ to\nanother, and a command-line tool that uses this library.\n#### Extension:\
    \ `header_attributes` #### {#ext-header-attributes}\nHeaders can be assigned attributes\
    \ using this syntax at the end of the\nline containing the header text:\n    {#identifier\
    \ .class .class key=value key=value}\nThus, for example, the following headers\
    \ will all be assigned the\nidentifier `foo`:\n    # My header {#foo}\n    ##\
    \ My header ##    {#foo}\n    My other header   {#foo}\n    ---------------\n\
    \                          Figure 3: Pandoc Example\n4.4.  Fountain (Fountain.io)\n\
    INT. BOXCAR - MOVING - DAY\n?AGENT MORTIMER lies bleeding in the corner. The car\
    \ ROCKS gently.\nMortimer pulls out his cell phone and dials.\nMORTIMER?\nCome\
    \ on. Pick up.\nCUT TO:?\next. hotel bar - day?\nA fiercely gorgeous brunette\
    \ sips the last of something from a\nrocks glass. This is REBECCA.\nBehind her,\
    \ a dark FIGURE approaches. She seems not to notice.\nREBECCA?(to Bartender)\n\
    Rittenhouse, neat.\nFIGURE (O.S.) ^\nRitenhouse, neat.\nShe turns to find the\
    \ source of the voice.\nFIGURE\nExcellent choice.\nBefore she can reply, her phone\
    \ RINGS.?\n> INTERCUT WITH:?\n.THE BOXCAR\nWhere MORTIMER is just barely holding\
    \ on to life.\n                       Figure 4: Fountain Example\n4.5.  CommonMark\n\
    \   CommonMark is like Markdown.\n   Here are some entity names that you can use\
    \ with CommonMark: `&nbsp;\n   &amp; &copy; &AElig; &Dcaron; &frac34; &HilbertSpace;\
    \ &DifferentialD;\n   &ClockwiseContourIntegral;`\n   You can see more at [the\
    \ CommonMark website](http://commonmark.org/\n   \"CommonMark\").\n   - foo\n\
    \   ***\n   - bar\n   Tildes can be used for fenced code blocks:\n   ~~~\n   <\n\
    \    >\n   ~~~\n                      Figure 5: CommonMark Example\n4.6.  kramdown-rfc2629\
    \ (Markdown for RFCs)\n---\ntitle: STUN/TURN using PHP in Despair\nabbrev: STuPiD-excerpt\n\
    docname: draft-hartke-xmpp-stupid-excerpt-00\ndate: 2009-07-05\ncategory: info\n\
    ipr: trust200902\narea: General\nworkgroup: XMPP Working Group\nkeyword: Internet-Draft\n\
    stand_alone: yes\npi: [toc, sortrefs, symrefs]\nauthor:\n -\n    ins: K. Hartke\n\
    \    name: Klaus Hartke\n    email: example@tzi.org\nnormative:\n  RFC2119:\n\
    informative:\n  RFC5389:\n  STUNT:\n    target: http://www.example.com/oob\n \
    \   title: STUNT & out-of-band channels\n    author:\n      name: Robbie Hanson\n\
    \      ins: R. Hanson\n    date: 2007-09-17\n--- abstract\nNAT (Network Address\
    \ Translator) Traversal may require TURN\n(Traversal Using Relays around NAT)\
    \ functionality in certain\ncases that are not unlikely to occur.  There is little\n\
    incentive to deploy TURN servers, except by those who need\nthem&#x2014;who may\
    \ not be in a position to deploy a new protocol\non an Internet-connected node,\
    \ in particular not one with\ndeployment requirements as high as those of TURN.\n\
    --- middle\nIntroduction        {#problems}\n============\n\"STUN/TURN using PHP\
    \ in Despair\" is a highly deployable protocol for\nobtaining TURN-like functionality,\
    \ while also providing the most\nimportant function of STUN {{RFC5389}}.\nThe\
    \ Need for Standardization   {#need}\n----------------------------\nHaving one\
    \ standard form of STuPiD service instead of one specific to\neach kind of client\
    \ also creates an incentive for optimized\nimplementations.\n~~~~~~~~~~\n    \
    \    STuPiD   ```````````````````````````````,\n        Script   <----------------------------.\
    \ ,\n                                              | ,\n          ^ ,        \
    \                         | ,\n          | ,                                 |\
    \ ,\n    (1)   | ,                                 | ,  (3)\n    POST  | ,   \
    \                              | ,  GET\n          | ,                       \
    \          | ,\n          | v                                 | v\n        Peer\
    \ A   ----------------------->   Peer B\n                           (2)\n    \
    \                   out-of-band\n                       Notification\n~~~~~~~~~~\n\
    {: #figops title=\"STuPiD Protocol Operation\"}\nTerminology          {#Terminology}\n\
    -----------\nIn this document, the key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    ,\n\"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    ,\nand \"OPTIONAL\" are to be interpreted as described in BCP 14, RFC 2119\n{{RFC2119}}\
    \ and indicate requirement levels for compliant STuPiD\nimplementations.\n---\
    \ back\nSample Implementation     {#impl}\n=====================\n~~~~~~~~~~\n\
    <?php\nheader(\"Cache-Control: no-cache, must-revalidate\");\nheader(\"Expires:\
    \ Sat, 26 Jul 1997 05:00:00 GMT\");\nheader(\"Content-Type: application/octet-stream\"\
    );\n?>\n~~~~~~~~~~\n{: #figimpl title=\"STuPiD Sample Implementation\"}\n    \
    \              Figure 6: Markdown for RFCs Example\n4.7.  rfc7328 (Pandoc2rfc)\n\
    \   Pandoc2rfc expects multiple files as input.  The following figure is\n   example\
    \ of \"middle.mkd\".\n# Introduction\n<?rfc toc=\"yes\"?>\n<?rfc symrefs=\"yes\"\
    ?>\n<?rfc sortrefs=\"yes\"?>\n<?rfc subcompact=\"no\"?>\n<?rfc compact=\"yes\"\
    ?>\n<?rfc comments=\"yes\"?>\nThis document presents a technique for using Pandoc\
    \ syntax as a source\nformat for documents in the Internet-Drafts (I-Ds) and Request\n\
    for Comments (RFC) series.\nThis version is adapted to work with `xml2rfc` version\
    \ 2.x.\nPandoc is an \"almost plain text\" format and therefore particularly\n\
    well suited for editing RFC-like documents.\n> Note: this document is typeset\
    \ in Pandoc.\n> NB: this is mostly text to test Pandoc2rfc, the canonical\n> documentation\
    \ is [RFC 7328][p2r].\n[p2r]: http://www.rfc-editor.org/info/rfc7328\n# Pandoc\
    \ to RFC\n> Pandoc2rfc -- designed to do the right thing, until it doesn't.\n\
    When writing [](#RFC4641) we directly wrote the\nXML. Needless to say it was tedious\
    \ even though the XML of\n[xml2rfc](http://xml2rfc.ietf.org/) is very \"light\"\
    .\nThe [latest version of xml2rfc version 2 can be found\nhere](http://pypi.python.org/pypi/xml2rfc/).\n\
    \               Figure 7: Pandoc2rfc Example (middle.mkd)\n5.  IANA Considerations\n\
    \   IANA has registered the syntaxes specified in Section 3 in the\n   \"Markdown\
    \ Variants\" registry.\n6.  Security Considerations\n   See the respective syntax\
    \ descriptions and output media type\n   registrations for their respective security\
    \ considerations.\n7.  References\n7.1.  Normative References\n   [MARKDOWN] Gruber,\
    \ J., \"Daring Fireball: Markdown\", December 2004,\n              <http://daringfireball.net/projects/markdown/>.\n\
    \   [MDSYNTAX] Gruber, J., \"Daring Fireball: Markdown Syntax\n              Documentation\"\
    ,\n              <http://daringfireball.net/projects/markdown/syntax>.\n   [RFC2119]\
    \  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement\
    \ Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n\
    \              <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC5322]  Resnick,\
    \ P., Ed., \"Internet Message Format\", RFC 5322,\n              DOI 10.17487/RFC5322,\
    \ October 2008,\n              <http://www.rfc-editor.org/info/rfc5322>.\n   [RFC6657]\
    \  Melnikov, A. and J. Reschke, \"Update to MIME regarding\n              \"charset\"\
    \ Parameter Handling in Textual Media Types\",\n              RFC 6657, DOI 10.17487/RFC6657,\
    \ July 2012,\n              <http://www.rfc-editor.org/info/rfc6657>.\n   [RFC7763]\
    \  Leonard, S., \"The text/markdown Media Type\", RFC 7763,\n              DOI\
    \ 10.17487/RFC7763, March 2016,\n              <http://www.rfc-editor.org/info/rfc7763>.\n\
    7.2.  Informative References\n   [UNICODE]  The Unicode Consortium, \"The Unicode\
    \ Standard, Version\n              8.0\", (Mountain View, CA: The Unicode Consortium,\
    \ 2015.\n              ISBN 978-1-936213-10-8),\n              <http://www.unicode.org/versions/Unicode8.0.0/>.\n\
    \   [HUMANE]   Atwood, J., \"Is HTML a Humane Markup Language?\", May 2008,\n\
    \              <http://blog.codinghorror.com/\n              is-html-a-humane-markup-language/>.\n\
    \   [DIN2MD]   Gruber, J., \"Dive Into Markdown\", March 2004,\n             \
    \ <http://daringfireball.net/2004/03/dive_into_markdown>.\n   [MD102b8]  Gruber,\
    \ J., \"Subject: [ANN] Markdown.pl 1.0.2b8\", message\n              to the markdown-discuss\
    \ mailing list, 9 May 2007,\n              <http://six.pairlist.net/pipermail/markdown-discuss/\n\
    \              2007-May/000615.html>,\n              <http://daringfireball.net/projects/downloads/\n\
    \              Markdown_1.0.2b8.tbz>.\n   [CATPICS]  Gruber, J. and M. Arment,\
    \ \"The Talk Show: Ep. 88: 'Cat\n              Pictures' (Side 1)\", July 2014,\n\
    \              <http://daringfireball.net/thetalkshow/2014/07/19/ep-088>.\n  \
    \ [INETMEME] Solon, O., \"Richard Dawkins on the internet's hijacking of\n   \
    \           the word 'meme'\", June 2013,\n              <http://www.wired.co.uk/news/archive/2013-06/20/\n\
    \              richard-dawkins-memes>,\n              <http://www.webcitation.org/6HzDGE9Go>.\n\
    \   [MULTIMD]  Penney, F., \"MultiMarkdown\",\n              <http://fletcherpenney.net/multimarkdown/>.\n\
    \   [PANDOC]   MacFarlane, J., \"Pandoc\",\n              <http://johnmacfarlane.net/pandoc/>.\n\
    \   [RAILFROG] Railfrog Team, \"Railfrog\", April 2009,\n              <http://railfrog.com/>.\n\
    \   [RFC793]   Postel, J., \"Transmission Control Protocol\", STD 7,\n       \
    \       RFC 793, DOI 10.17487/RFC0793, September 1981,\n              <http://www.rfc-editor.org/info/rfc793>.\n\
    \   [RFC6533]  Hansen, T., Ed., Newman, C., and A. Melnikov,\n              \"\
    Internationalized Delivery Status and Disposition\n              Notifications\"\
    , RFC 6533, DOI 10.17487/RFC6533, February\n              2012, <http://www.rfc-editor.org/info/rfc6533>.\n\
    \   [RFC6838]  Freed, N., Klensin, J., and T. Hansen, \"Media Type\n         \
    \     Specifications and Registration Procedures\", BCP 13,\n              RFC\
    \ 6838, DOI 10.17487/RFC6838, January 2013,\n              <http://www.rfc-editor.org/info/rfc6838>.\n\
    \   [XML1.0-5] Bray, T., Paoli, J., Sperberg-McQueen, M., Maler, E., and\n   \
    \           F. Yergeau, \"Extensible Markup Language (XML) 1.0 (Fifth\n      \
    \        Edition)\", W3C Recommendation REC-xml-20081126, November\n         \
    \     2008, <http://www.w3.org/TR/2008/REC-xml-20081126>.\n   [OCCASION] Shieber,\
    \ S., \"Switching to Markdown for scholarly article\n              production\"\
    , August 2014,\n              <http://blogs.law.harvard.edu/pamphlet/2014/08/29/\n\
    \              switching-to-markdown-for-scholarly-article-production/>.\n   [FOUNTAIN]\
    \ Maschwitz, S. and J. August, \"Fountain | A markup language\n              for\
    \ screenwriting.\", <http://fountain.io/>.\n   [MATHDOWN] Cherniavsky-Paskin,\
    \ B., \"math in markdown\",\n              <https://github.com/cben/mathdown/wiki/math-in-markdown>.\n\
    \   [SVN]      Apache Subversion, December 2015,\n              <https://subversion.apache.org/>.\n\
    \   [GIT]      Git, <http://git-scm.com/>.\nAuthor's Address\n   Sean Leonard\n\
    \   Penango, Inc.\n   5900 Wilshire Boulevard\n   21st Floor\n   Los Angeles,\
    \ CA  90036\n   United States\n   EMail: dev+ietf@seantek.com\n   URI:   http://www.penango.com/\n"
