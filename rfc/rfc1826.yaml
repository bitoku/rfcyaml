- title: __initial_text__
  contents:
  - '                        IP Authentication Header

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: ABSTRACT
  contents:
  - "ABSTRACT\n   This document describes a mechanism for providing cryptographic\n\
    \   authentication for IPv4 and IPv6 datagrams.  An Authentication Header\n  \
    \ (AH) is normally inserted after an IP header and before the other\n   information\
    \ being authenticated.\n"
- title: 1. INTRODUCTION
  contents:
  - "1. INTRODUCTION\n   The Authentication Header is a mechanism for providing strong\n\
    \   integrity and authentication for IP datagrams.  It might also provide\n  \
    \ non-repudiation, depending on which cryptographic algorithm is used\n   and\
    \ how keying is performed.  For example, use of an asymmetric\n   digital signature\
    \ algorithm, such as RSA, could provide non-\n   repudiation.\n   Confidentiality,\
    \ and protection from traffic analysis are not\n   provided by the Authentication\
    \ Header.  Users desiring\n   confidentiality should consider using the IP Encapsulating\
    \ Security\n   Protocol (ESP) either in lieu of or in conjunction with the\n \
    \  Authentication Header [Atk95b].  This document assumes the reader has\n   previously\
    \ read the related IP Security Architecture document which\n   defines the overall\
    \ security architecture for IP and provides\n   important background information\
    \ for this specification [Atk95a].\n"
- title: 1.1 Overview
  contents:
  - "1.1 Overview\n   The IP Authentication Header seeks to provide security by adding\n\
    \   authentication information to an IP datagram. This authentication\n   information\
    \ is calculated using all of the fields in the IP datagram\n   (including not\
    \ only the IP Header but also other headers and the user\n   data) which do not\
    \ change in transit.  Fields or options which need\n   to change in transit (e.g.,\
    \ \"hop count\", \"time to live\", \"ident\",\n   \"fragment offset\", or \"routing\
    \ pointer\") are considered to be zero\n   for the calculation of the authentication\
    \ data.  This provides\n   significantly more security than is currently present\
    \ in IPv4 and\n   might be sufficient for the needs of many users.\n   Use of\
    \ this specification will increase the IP protocol processing\n   costs in participating\
    \ end systems and will also increase the\n   communications latency.  The increased\
    \ latency is primarily due to\n   the calculation of the authentication data by\
    \ the sender and the\n   calculation and comparison of the authentication data\
    \ by the receiver\n   for each IP datagram containing an Authentication Header.\
    \  The impact\n   will vary with authentication algorithm used and other factors.\n\
    \   In order for the Authentication Header to work properly without\n   changing\
    \ the entire Internet infrastructure, the authentication data\n   is carried in\
    \ its own payload.  Systems that aren't participating in\n   the authentication\
    \ MAY ignore the Authentication Data.  When used\n   with IPv6, the Authentication\
    \ Header is normally placed after the\n   Fragmentation and End-to-End headers\
    \ and before the ESP and\n   transport-layer headers.  The information in the\
    \ other IP headers is\n   used to route the datagram from origin to destination.\
    \  When used\n   with IPv4, the Authentication Header immediately follows an IPv4\n\
    \   header.\n   If a symmetric authentication algorithm is used and intermediate\n\
    \   authentication is desired, then the nodes performing such\n   intermediate\
    \ authentication would need to be provided with the\n   appropriate keys.  Possession\
    \ of those keys would permit any one of\n   those systems to forge traffic claiming\
    \ to be from the legitimate\n   sender to the legitimate receiver or to modify\
    \ the contents of\n   otherwise legitimate traffic.  In some environments such\
    \ intermediate\n   authentication might be desirable [BCCH94].  If an asymmetric\n\
    \   authentication algorithm is used and the routers are aware of the\n   appropriate\
    \ public keys and authentication algorithm, then the\n   routers possessing the\
    \ authentication public key could authenticate\n   the traffic being handled without\
    \ being able to forge or modify\n   otherwise legitimate traffic.  Also, Path\
    \ MTU Discovery MUST be used\n   when intermediate authentication of the Authentication\
    \ Header is\n   desired and IPv4 is in use because with this method it is not\n\
    \   possible to authenticate a fragment of a packet [MD90] [Kno93].\n"
- title: 1.2 Requirements Terminology
  contents:
  - "1.2 Requirements Terminology\n   In this document, the words that are used to\
    \ define the significance\n   of each particular requirement are usually capitalised.\
    \  These words\n   are:\n   - MUST\n      This word or the adjective \"REQUIRED\"\
    \ means that the item is an\n      absolute requirement of the specification.\n\
    \   - SHOULD\n      This word or the adjective \"RECOMMENDED\" means that there\
    \ might\n      exist valid reasons in particular circumstances to ignore this\n\
    \      item, but the full implications should be understood and the case\n   \
    \   carefully weighed before taking a different course.\n   - MAY\n      This\
    \ word or the adjective \"OPTIONAL\" means that this item is\n      truly optional.\
    \  One vendor might choose to include the item\n      because a particular marketplace\
    \ requires it or because it\n      enhances the product, for example; another\
    \ vendor may omit the\n      same item.\n"
- title: 2. KEY MANAGEMENT
  contents:
  - "2. KEY MANAGEMENT\n   Key management is an important part of the IP security\
    \ architecture.\n   However, it is not integrated with this specification because\
    \ of a\n   long history in the public literature of subtle flaws in key\n   management\
    \ algorithms and protocols.  The IP Authentication Header\n   tries to decouple\
    \ the key management mechanisms from the security\n   protocol mechanisms.  The\
    \ only coupling between the key management\n   protocol and the security protocol\
    \ is with the Security Parameters\n   Index (SPI), which is described in more\
    \ detail below.  This\n   decoupling permits several different key management\
    \ mechanisms to be\n   used.  More importantly, it permits the key management\
    \ protocol to be\n   changed or corrected without unduly impacting the security\
    \ protocol\n   implementations.\n   The key management mechanism is used to negotiate\
    \ a number of\n   parameters for each \"Security Association\", including not\
    \ only the\n   keys but also other information (e.g., the authentication algorithm\n\
    \   and mode) used by the communicating parties.  The key management\n   mechanism\
    \ creates and maintains a logical table containing the\n   several parameters\
    \ for each current security association.  An\n   implementation of the IP Authentication\
    \ Header will need to read that\n   logical table of security parameters to determine\
    \ how to process each\n   datagram containing an Authentication Header (e.g.,\
    \ to determine\n   which algorithm/mode and key to use in authentication).\n \
    \  Security Associations are unidirectional.  A bidirectional\n   communications\
    \ session will normally have one Security Association in\n   each direction. \
    \ For example, when a TCP session exists between two\n   systems A and B, there\
    \ will normally be one Security Association from\n   A to B and a separate second\
    \ Security Assocation from B to A.  The\n   receiver assigns the SPI value to\
    \ the the Security Association with\n   that sender.  The other parameters of\
    \ the Security Association are\n   determined in a manner specified by the key\
    \ management mechanism.\n   Section 4 of this document describes in detail the\
    \ process of\n   selecting a Security Association for an outgoing packet and\n\
    \   identifying the Security Assocation for an incoming packet.\n   The IP Security\
    \ Architecture document describes key management in\n   detail.  It includes specification\
    \ of the key management requirements\n   for this protocol, and is incorporated\
    \ here by reference [Atk95a].\n"
- title: 3. AUTHENTICATION HEADER SYNTAX
  contents:
  - "3. AUTHENTICATION HEADER SYNTAX\n   The Authentication Header (AH) may appear\
    \ after any other headers\n   which are examined at each hop, and before any other\
    \ headers which\n   are not examined at an intermediate hop.  The IPv4 or IPv6\
    \ header\n   immediately preceding the Authentication Header will contain the\n\
    \   value 51 in its Next Header (or Protocol) field [STD-2].\n   Example high-level\
    \ diagrams of IP datagrams with the Authentication\n   Header follow.\n +------------+-------------------+------------+-------+---------------+\n\
    \ | IPv6 Header| Hop-by-Hop/Routing| Auth Header| Others| Upper Protocol|\n +------------+-------------------+------------+-------+---------------+\n\
    \                Figure 1: IPv6 Example\n   When used with IPv6, the Authentication\
    \ Header normally appears after\n   the IPv6 Hop-by-Hop Header and before the\
    \ IPv6 Destination Options.\n    +-------------+--------------+-------------------------------+\n\
    \    | IPv4 Header |  Auth Header | Upper Protocol (e.g. TCP, UDP)|\n    +-------------+--------------+-------------------------------+\n\
    \                   Figure 2:  IPv4 Example\n   When used with IPv4, the Authentication\
    \ Header normally follows the\n   main IPv4 header.\n"
- title: 3.1 Authentication Header Syntax
  contents:
  - "3.1 Authentication Header Syntax\n   The authentication data is the output of\
    \ the authentication algorithm\n   calculated over the the entire IP datagram\
    \ as described in more\n   detail later in this document.  The authentication\
    \ calculation must\n   treat the Authentication Data field itself and all fields\
    \ that are\n   normally modified in transit (e.g., TTL or Hop Limit) as if those\n\
    \   fields contained all zeros.  All other Authentication Header fields\n   are\
    \ included in the authentication calculation normally.\n   The IP Authentication\
    \ Header has the following syntax:\n     +---------------+---------------+---------------+---------------+\n\
    \     | Next Header   | Length        |           RESERVED            |\n    \
    \ +---------------+---------------+---------------+---------------+\n     |  \
    \                  Security Parameters Index                  |\n     +---------------+---------------+---------------+---------------+\n\
    \     |                                                               |\n    \
    \ +     Authentication Data (variable number of 32-bit words)     |\n     |  \
    \                                                             |\n     +---------------+---------------+---------------+---------------+\n\
    \      1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8\n     \
    \              Figure 3:  Authentication Header syntax\n"
- title: 3.2 Fields of the Authentication Header
  contents:
  - "3.2 Fields of the Authentication Header\n   NEXT HEADER\n      8 bits wide. \
    \ Identifies the next payload after the Authentication\n      Payload.  This values\
    \ in this field are the set of IP Protocol\n      Numbers as defined in the most\
    \ recent RFC from the Internet\n      Assigned Numbers Authority (IANA) describing\
    \ \"Assigned Numbers\"\n      [STD-2].\n   PAYLOAD LENGTH\n      8 bits wide.\
    \  The length of the Authentication Data field in 32-\n      bit words.  Minimum\
    \ value is 0 words, which is only used in the\n      degenerate case of a \"null\"\
    \ authentication algorithm.\n   RESERVED\n      16 bits wide.  Reserved for future\
    \ use.  MUST be set to all zeros\n      when sent.  The value is included in the\
    \ Authentication Data\n      calculation, but is otherwise ignored by the recipient.\n\
    \   SECURITY PARAMETERS INDEX (SPI)\n      A 32-bit pseudo-random value identifying\
    \ the security association\n      for this datagram.  The Security Parameters\
    \ Index value 0 is\n      reserved to indicate that \"no security association\
    \ exists\".\n      The set of Security Parameters Index values in the range 1\
    \ through\n      255 are reserved to the Internet Assigned Numbers Authority (IANA)\n\
    \      for future use.  A reserved SPI value will not normally be\n      assigned\
    \ by IANA unless the use of that particular assigned SPI\n      value is openly\
    \ specified in an RFC.\n   AUTHENTICATION DATA\n      This length of this field\
    \ is variable, but is always an integral\n      number of 32-bit words.\n    \
    \  Many implementations require padding to other alignments, such as\n      64-bits,\
    \ in order to improve performance.  All implementations\n      MUST support such\
    \ padding, which is specified by the Destination\n      on a per SPI basis.  The\
    \ value of the padding field is arbitrarily\n      selected by the sender and\
    \ is included in the Authentication Data\n      calculation.\n      An implementation\
    \ will normally use the combination of Destination\n      Address and SPI to locate\
    \ the Security Association which specifies\n      the field's size and use.  The\
    \ field retains the same format for\n      all datagrams of any given SPI and\
    \ Destination Address pair.\n      The Authentication Data fills the field beginning\
    \ immediately\n      after the SPI field.  If the field is longer than necessary\
    \ to\n      store the actual authentication data, then the unused bit\n      positions\
    \ are filled with unspecified, implementation-dependent\n      values.\n     \
    \ Refer to each Authentication Transform specification for more\n      information\
    \ regarding the contents of this field.\n"
- title: 3.3 Sensitivity Labeling
  contents:
  - "3.3 Sensitivity Labeling\n   As is discussed in greater detail in the IP Security\
    \ Architecture\n   document, IPv6 will normally use implicit Security Labels rather\
    \ than\n   the explicit labels that are currently used with IPv4 [Ken91]\n   [Atk95a].\
    \  In some situations, users MAY choose to carry explicit\n   labels (for example,\
    \ IPSO labels as defined by RFC-1108 might be used\n   with IPv4) in addition\
    \ to using the implicit labels provided by the\n   Authentication Header.  Explicit\
    \ label options could be defined for\n   use with IPv6 (e.g., using the IPv6 end-to-end\
    \ options header or the\n   IPv6 hop-by-hop options header).  Implementations\
    \ MAY support\n   explicit labels in addition to implicit labels, but implementations\n\
    \   are not required to support explicit labels.  If explicit labels are\n   in\
    \ use, then the explicit label MUST be included in the\n   authentication calculation.\n"
- title: 4. CALCULATION OF THE AUTHENTICATION DATA
  contents:
  - "4. CALCULATION OF THE AUTHENTICATION DATA\n   The authentication data carried\
    \ by the IP Authentication Header is\n   usually calculated using a message digest\
    \ algorithm (for example,\n   MD5) either encrypting that message digest or keying\
    \ the message\n   digest directly [Riv92].  Only algorithms that are believed\
    \ to be\n   cryptographically strong one-way functions should be used with the\
    \ IP\n   Authentication Header.\n   Because conventional checksums (e.g., CRC-16)\
    \ are not\n   cryptographically strong, they MUST NOT be used with the\n   Authentication\
    \ Header.\n   When processing an outgoing IP packet for Authentication, the first\n\
    \   step is for the sending system to locate the appropriate Security\n   Association.\
    \  All Security Associations are unidirectional.  The\n   selection of the appropriate\
    \ Security Association for an outgoing IP\n   packet is based at least upon the\
    \ sending userid and the Destination\n   Address.  When host-oriented keying is\
    \ in use, all sending userids\n   will share the same Security Association to\
    \ a given destination.\n   When user-oriented keying is in use, then different\
    \ users or possibly\n   even different applications of the same user might use\
    \ different\n   Security Associations.  The Security Association selected will\n\
    \   indicate which algorithm, algorithm mode, key, and other security\n   properties\
    \ apply to the outgoing packet.\n   Fields which NECESSARILY are modified during\
    \ transit from the sender\n   to the receiver (e.g., TTL and HEADER CHECKSUM for\
    \ IPv4 or Hop Limit\n   for IPv6) and whose value at the receiver are not known\
    \ with\n   certainty by the sender are included in the authentication data\n \
    \  calculation but are processed specially.  For these fields which are\n   modified\
    \ during transit, the value carried in the IP packet is\n   replaced by the value\
    \ zero for the purpose of the authentication\n   calculation.  By replacing the\
    \ field's value with zero rather than\n   omitting these fields, alignment is\
    \ preserved for the authentication\n   calculation.\n   The sender MUST compute\
    \ the authentication over the packet as that\n   packet will appear at the receiver.\
    \  This requirement is placed in\n   order to allow for future IP optional headers\
    \ which the receiver\n   might not know about but the sender necessarily knows\
    \ about if it is\n   including such options in the packet.  This also permits\
    \ the\n   authentication of data that will vary in transit but whose value at\n\
    \   the final receiver is known with certainty by the sender in advance.\n   The\
    \ sender places the calculated message digest algorithm output into\n   the Authentication\
    \ Data field within the Authentication Header.  For\n   purposes of Authentication\
    \ Data computation, the Authentication Data\n   field is considered to be filled\
    \ with zeros.\n   The IPv4 \"TIME TO LIVE\" and \"HEADER CHECKSUM\" fields are\
    \ the only\n   fields in the IPv4 base header that are handled specially for the\n\
    \   Authentication Data calculation.  Reassembly of fragmented packets\n   occurs\
    \ PRIOR to processing by the local IP Authentication Header\n   implementation.\
    \  The \"more\" bit is of course cleared upon reassembly.\n    Hence, no other\
    \ fields in the IPv4 header will vary in transit from\n   the perspective of the\
    \ IP Authentication Header implementation.  The\n   \"TIME TO LIVE\" and \"HEADER\
    \ CHECKSUM\" fields of the IPv4 base header\n   MUST be set to all zeros for the\
    \ Authentication Data calculation.\n   All other IPv4 base header fields are processed\
    \ normally with their\n   actual contents.  Because IPv4 packets are subject to\
    \ intermediate\n   fragmentation in routers, it is important that the reassembly\
    \ of IPv4\n   packets be performed prior to the Authentication Header processing.\n\
    \   IPv4 Implementations SHOULD use Path MTU Discovery when the IP\n   Authentication\
    \ Header is being used [MD90].  For IPv4, not all\n   options are openly specified\
    \ in a RFC, so it is not possible to\n   enumerate in this document all of the\
    \ options that might normally be\n   modified during transit.  The IP Security\
    \ Option (IPSO) MUST be\n   included in the Authentication Data calculation whenever\
    \ that option\n   is present in an IP datagram [Ken91].  If a receiving system\
    \ does not\n   recognise an IPv4 option that is present in the packet, that option\n\
    \   is included in the Authentication Data calculation.  This means that\n   any\
    \ IPv4 packet containing an IPv4 option that changes during transit\n   in a manner\
    \ not predictable by the sender and which IPv4 option is\n   unrecognised by the\
    \ receiver will fail the authentication check and\n   consequently be dropped\
    \ by the receiver.\n   The IPv6 \"HOP LIMIT\" field is the only field in the IPv6\
    \ base header\n   that is handled specially for Authentication Data calculation.\
    \  The\n   value of the HOP LIMIT field is zero for the purpose of\n   Authentication\
    \ Data calculation.  All other fields in the base IPv6\n   header MUST be included\
    \ in the Authentication Data calculation using\n   the normal procedures for calculating\
    \ the Authentication Data.  All\n   IPv6 \"OPTION TYPE\" values contain a bit\
    \ which MUST be used to\n   determine whether that option data will be included\
    \ in the\n   Authentication Data calculation.  This bit is the third-highest-order\n\
    \   bit of the IPv6 OPTION TYPE field. If this bit is set to zero, then\n   the\
    \ corresponding option is included in the Authentication Data\n   calculation.\
    \  If this bit is set to one, then the corresponding\n   option is replaced by\
    \ all zero bits of the same length as the option\n   for the purpose of the Authentication\
    \ Data calculation.  The IPv6\n   Routing Header \"Type 0\" will rearrange the\
    \ address fields within the\n   packet during transit from source to destination.\
    \  However, this is\n   not a problem because the contents of the packet as it\
    \ will appear at\n   the receiver are known to the sender and to all intermediate\
    \ hops.\n   Hence, the IPv6 Routing Header \"Type 0\" is included in the\n   Authentication\
    \ Data calculation using the normal procedure.\n   Upon receipt of a packet containing\
    \ an IP Authentication Header, the\n   receiver first uses the Destination Address\
    \ and SPI value to locate\n   the correct Security Association.  The receiver\
    \ then independently\n   verifies that the Authentication Data field and the received\
    \ data\n   packet are consistent.  Again, the Authentication Data field is\n \
    \  assumed to be zero for the sole purpose of making the authentication\n   computation.\
    \  Exactly how this is accomplished is algorithm\n   dependent.  If the processing\
    \ of the authentication algorithm\n   indicates the datagram is valid, then it\
    \ is accepted.  If the\n   algorithm determines that the data and the Authentication\
    \ Header do\n   not match, then the receiver SHOULD discard the received IP datagram\n\
    \   as invalid and MUST record the authentication failure in the system\n   log\
    \ or audit log.  If such a failure occurs, the recorded log data\n   MUST include\
    \ the SPI value, date/time received, clear-text Sending\n   Address, clear-text\
    \ Destination Address, and (if it exists) the\n   clear-text Flow ID.  The log\
    \ data MAY also include other information\n   about the failed packet.\n"
- title: 5. CONFORMANCE REQUIREMENTS
  contents:
  - "5. CONFORMANCE REQUIREMENTS\n   Implementations that claim conformance or compliance\
    \ with this\n   specification MUST fully implement the header described here,\
    \ MUST\n   support manual key distribution for use with this option, MUST comply\n\
    \   with all requirements of the \"Security Architecture for the Internet\n  \
    \ Protocol\" [Atk95a], and MUST support the use of keyed MD5 as\n   described\
    \ in the companion document entitled \"IP Authentication using\n   Keyed MD5\"\
    \ [MS95].  Implementations MAY also implement other\n   authentication algorithms.\
    \  Implementors should consult the most\n   recent version of the \"IAB Official\
    \ Standards\" RFC for further\n   guidance on the status of this document.\n"
- title: 6. SECURITY CONSIDERATIONS
  contents:
  - "6. SECURITY CONSIDERATIONS\n   This entire RFC discusses an authentication mechanism\
    \ for IP.  This\n   mechanism is not a panacea to the several security issues\
    \ in any\n   internetwork, however it does provide a component useful in building\n\
    \   a secure internetwork.\n   Users need to understand that the quality of the\
    \ security provided by\n   this specification depends completely on the strength\
    \ of whichever\n   cryptographic algorithm has been implemented, the strength\
    \ of the key\n   being used, the correctness of that algorithm's implementation,\
    \ upon\n   the security of the key management mechanism and its implementation,\n\
    \   and upon the correctness of the IP Authentication Header and IP\n   implementations\
    \ in all of the participating systems. If any of these\n   assumptions do not\
    \ hold, then little or no real security will be\n   provided to the user.  Implementors\
    \ are encouraged to use high\n   assurance methods to develop all of the security\
    \ relevant parts of\n   their products.\n   Users interested in confidentiality\
    \ should consider using the IP\n   Encapsulating Security Payload (ESP) instead\
    \ of or in conjunction\n   with this specification [Atk95b].  Users seeking protection\
    \ from\n   traffic analysis might consider the use of appropriate link\n   encryption.\
    \  Description and specification of link encryption is\n   outside the scope of\
    \ this note [VK83].  Users interested in combining\n   the IP Authentication Header\
    \ with the IP Encapsulating Security\n   Payload should consult the IP Encapsulating\
    \ Security Payload\n   specification for details.\n   One particular issue is\
    \ that in some cases a packet which causes an\n   error to be reported back via\
    \ ICMP might be so large as not to\n   entirely fit within the ICMP message returned.\
    \  In such cases, it\n   might not be possible for the receiver of the ICMP message\
    \ to\n   independently authenticate the portion of the returned message.  This\n\
    \   could mean that the host receiving such an ICMP message would either\n   trust\
    \ an unauthenticated ICMP message, which might in turn create\n   some security\
    \ problem, or not trust and hence not react appropriately\n   to some legitimate\
    \ ICMP message that should have been reacted to.  It\n   is not clear that this\
    \ issue can be fully resolved in the presence of\n   packets that are the same\
    \ size as or larger than the minimum IP MTU.\n   Similar complications arise if\
    \ an encrypted packet causes an ICMP\n   error message to be sent and that packet\
    \ is truncated.\n   Active attacks are now widely known to exist in the Internet\
    \ [CER95].\n   The presence of active attacks means that unauthenticated source\n\
    \   routing, either unidirectional (receive-only) or with replies\n   following\
    \ the original received source route represents a significant\n   security risk\
    \ unless all received source routed packets are\n   authenticated using the IP\
    \ Authentication Header or some other\n   cryptologic mechanism.  It is noteworthy\
    \ that the attacks described\n   in [CER95] include a subset of those described\
    \ in [Bel89].\n   The use of IP tunneling with AH creates multiple pairs of endpoints\n\
    \   that might perform AH processing.  Implementers and administrators\n   should\
    \ carefully consider the impacts of tunneling on authenticity of\n   the received\
    \ tunneled packets.\n"
- title: ACKNOWLEDGEMENTS
  contents:
  - "ACKNOWLEDGEMENTS\n   This document benefited greatly from work done by Bill Simpson,\
    \ Perry\n   Metzger, and Phil Karn to make general the approach originally\n \
    \  defined by the author for SIP, SIPP, and finally IPv6.\n   The basic concept\
    \ here is derived in large part from the SNMPv2\n   Security Protocol work described\
    \ in [GM93].  Steve Bellovin, Steve\n   Deering, Frank Kastenholz, Dave Mihelcic,\
    \ and Hilarie Orman provided\n   thoughtful critiques of early versions of this\
    \ note.  Francis Dupont\n   discovered and pointed out the security issue with\
    \ ICMP in low IP MTU\n   links that is noted just above.\n"
- title: REFERENCES
  contents:
  - "REFERENCES\n   [Atk95a] Atkinson, R., \"Security Architecture for the Internet\n\
    \            Protocol\", RFC 1825, NRL, August 1995.\n   [Atk95b] Atkinson, R.,\
    \ \"IP Encapsulating Security Payload\", RFC 1827,\n            NRL, August 1995.\n\
    \   [Bel89] Steven M. Bellovin, \"Security Problems in the TCP/IP Protocol\n \
    \          Suite\", ACM Computer Communications Review, Vol. 19, No. 2,\n    \
    \       March 1989.\n   [BCCH94] Braden, R., Clark, D., Crocker, S., and C. Huitema,\
    \ \"Report\n            of IAB Workshop on Security in the Internet Architecture\"\
    ,\n            RFC 1636, USC/Information Sciences Institute, MIT, Trusted\n  \
    \          Information Systems, INRIA, June 1994, pp. 21-34.\n   [CER95] Computer\
    \ Emergency Response Team (CERT), \"IP Spoofing Attacks\n           and Hijacked\
    \ Terminal Connections\", CA-95:01, January 1995.\n           Available via anonymous\
    \ ftp from info.cert.org in\n           /pub/cert_advisories.\n   [GM93]  Galvin\
    \ J., and K. McCloghrie, \"Security Protocols for\n           version 2 of the\
    \ Simple Network Management Protocol\n           (SNMPv2)\", RFC 1446, Trusted\
    \ Information Systems, Hughes LAN\n           Systems, April 1993.\n   [Hin94]\
    \ Bob Hinden (Editor), Internet Protocol version 6 (IPv6)\n           Specification,\
    \ Work in Progress, October 1994.\n   [Ken91] Kent, S., \"US DoD Security Options\
    \ for the Internet Protocol\",\n           RFC 1108, BBN Communications, November\
    \ 1991.\n   [Kno93] Knowles, Stev, \"IESG Advice from Experience with Path MTU\n\
    \           Discovery\", RFC 1435, FTP Software, March 1993.\n   [MS95]  Metzger,\
    \ P., and W. Simpson, \"IP Authentication with Keyed\n           MD5\", RFC 1828,\
    \ Piermont, Daydreamer, August 1995.\n   [MD90]  Mogul, J., and S. Deering, \"\
    Path MTU Discovery\", RFC 1191,\n           DECWRL, Stanford University, November\
    \ 1990.\n   [STD-2] Reynolds, J., and J. Postel, \"Assigned Numbers\", STD 2,\n\
    \           RFC 1700, USC/Information Sciences Institute, October 1994.\n   [Riv92]\
    \ Rivest, R., \"MD5 Digest Algorithm\", RFC 1321, MIT and RSA Data\n         \
    \  Security, Inc., April 1992.\n   [VK83]  V.L. Voydock & S.T. Kent, \"Security\
    \ Mechanisms in High-level\n           Networks\", ACM Computing Surveys, Vol.\
    \ 15, No. 2, June 1983.\n"
- title: DISCLAIMER
  contents:
  - "DISCLAIMER\n   The views and specification here are those of the author and are\
    \ not\n   necessarily those of his employer.  The Naval Research Laboratory has\n\
    \   not passed judgement on the merits, if any, of this work.  The author\n  \
    \ and his employer specifically disclaim responsibility for any\n   problems arising\
    \ from correct or incorrect implementation or use of\n   this specification.\n"
- title: AUTHOR INFORMATION
  contents:
  - "AUTHOR INFORMATION\n   Randall Atkinson\n   Information Technology Division\n\
    \   Naval Research Laboratory\n   Washington, DC 20375-5320\n   USA\n   Phone:\
    \  (202) 767-2389\n   Fax:    (202) 404-8590\n   EMail:  atkinson@itd.nrl.navy.mil\n"
