- title: __initial_text__
  contents:
  - "                   Cryptographic Message Syntax (CMS)\n               Authenticated-Enveloped-Data\
    \ Content Type\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes an additional content type for the\n   Cryptographic\
    \ Message Syntax (CMS).  The authenticated-enveloped-data\n   content type is\
    \ intended for use with authenticated encryption modes.\n   All of the various\
    \ key management techniques that are supported in\n   the CMS enveloped-data content\
    \ type are also supported by the CMS\n   authenticated-enveloped-data content\
    \ type.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This document describes an additional content type for the\n\
    \   Cryptographic Message Syntax (CMS) [CMS].  The authenticated-\n   enveloped-data\
    \ content type is intended for use with authenticated\n   encryption modes, where\
    \ an arbitrary content is both authenticated\n   and encrypted.  Also, some associated\
    \ data in the form of\n   authenticated attributes can also be authenticated.\
    \  All of the\n   various key management techniques that are supported in the\
    \ CMS\n   enveloped-data content type are also supported by the CMS\n   authenticated-enveloped-data\
    \ content type.\n   The conventions for using the Advanced Encryption Standard-Counter\n\
    \   with Cipher Block Chaining-Message Authentication Code (AES-CCM) and\n   the\
    \ AES-Galois/Counter Mode (GCM) authenticated encryption algorithms\n   with the\
    \ CMS authenticated-enveloped-data content type defined in\n   this document can\
    \ be found in [AESALGS].\n   The authenticated-enveloped-data content type, like\
    \ all of the other\n   CMS content types, employs ASN.1 [X.208-88], and it uses\
    \ both the\n   Basic Encoding Rules (BER) [X.209-88] and the Distinguished Encoding\n\
    \   Rules (DER) [X.509-88].\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   In this document, the key words MUST, MUST NOT, REQUIRED,\
    \ SHOULD,\n   SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL are to be interpreted\
    \ as\n   described in [STDWORDS].\n"
- title: 1.2.  Version Numbers
  contents:
  - "1.2.  Version Numbers\n   The major data structure (AuthEnvelopedData) includes\
    \ a version\n   number as the first item in the data structure.  The version number\n\
    \   is intended to avoid ASN.1 decode errors.  Some implementations do\n   not\
    \ check the version number prior to attempting a decode, and then\n   if a decode\
    \ error occurs, the version number is checked as part of\n   the error handling\
    \ routine.  This is a reasonable approach; it places\n   error processing outside\
    \ of the fast path.  This approach is also\n   forgiving when an incorrect version\
    \ number is used by the sender.\n   Whenever the structure is updated, a higher\
    \ version number will be\n   assigned.  However, to ensure maximum interoperability,\
    \ the higher\n   version number is only used when the new syntax feature is employed.\n\
    \   That is, the lowest version number that supports the generated syntax\n  \
    \ is used.\n"
- title: 2.  Authenticated-Enveloped-Data Content Type
  contents:
  - "2.  Authenticated-Enveloped-Data Content Type\n   The authenticated-enveloped-data\
    \ content type consists of an\n   authenticated and encrypted content of any type\
    \ and encrypted\n   content-authenticated-encryption keys for one or more recipients.\n\
    \   The combination of the authenticated and encrypted content and one\n   encrypted\
    \ content-authenticated-encryption key for a recipient is a\n   \"digital envelope\"\
    \ for that recipient.  Any type of content can be\n   enveloped for an arbitrary\
    \ number of recipients using any of the\n   supported key management techniques\
    \ for each recipient.  In addition,\n   authenticated but not encrypted attributes\
    \ may be provided by the\n   originator.\n   The typical application of the authenticated-enveloped-data\
    \ content\n   type will represent one or more recipients' digital envelopes on\
    \ an\n   encapsulated content.\n   Authenticated-enveloped-data is constructed\
    \ by the following steps:\n   1.  A content-authenticated-encryption key for a\
    \ particular content-\n       authenticated-encryption algorithm is generated\
    \ at random.\n   2.  The content-authenticated-encryption key is encrypted for\
    \ each\n       recipient.  The details of this encryption depend on the key\n\
    \       management algorithm used, but four general techniques are\n       supported:\n\
    \         Key Transport: the content-authenticated-encryption key is\n       \
    \     encrypted in the recipient's public key;\n         Key Agreement: the recipient's\
    \ public key and the sender's\n            private key are used to generate a\
    \ pairwise symmetric key-\n            encryption key, then the content-authenticated-encryption\n\
    \            key is encrypted in the pairwise symmetric key-encryption\n     \
    \       key;\n         Symmetric Key-Encryption Keys: the content-authenticated-\n\
    \            encryption key is encrypted in a previously distributed\n       \
    \     symmetric key-encryption key; and\n         Passwords: the content-authenticated-encryption\
    \ key is\n            encrypted in a key-encryption key that is derived from a\n\
    \            password or other shared secret value.\n   3.  For each recipient,\
    \ the encrypted content-authenticated-\n       encryption key and other recipient-specific\
    \ information are\n       collected into a RecipientInfo value, defined in Section\
    \ 6.2 of\n       [CMS].\n   4.  Any attributes that are to be authenticated but\
    \ not encrypted are\n       collected in the authenticated attributes.\n   5.\
    \  The attributes collected in step 4 are authenticated and the CMS\n       content\
    \ is authenticated and encrypted with the content-\n       authenticated-encryption\
    \ key.  If the authenticated encryption\n       algorithm requires either the\
    \ additional authenticated data (AAD)\n       or the content to be padded to a\
    \ multiple of some block size,\n       then the padding is added as described\
    \ in Section 6.3 of [CMS].\n   6.  Any attributes that are to be provided without\
    \ authentication or\n       encryption are collected in the unauthenticated attributes.\n\
    \   7.  The RecipientInfo values for all the recipients, the\n       authenticated\
    \ attributes, the unauthenticated attributes, and the\n       authenticated and\
    \ encrypted content are collected together to\n       form an AuthEnvelopedData\
    \ value as defined in Section 2.1.\n   A recipient opens the digital envelope\
    \ by decrypting one of the\n   encrypted content-authenticated-encryption keys,\
    \ and then using the\n   recovered key to decrypt and verify the integrity of\
    \ the\n   authenticated and encrypted content as well as to verify the\n   integrity\
    \ of the authenticated attributes.\n   The recipient MUST verify the integrity\
    \ of the received content\n   before releasing any information, especially the\
    \ plaintext of the\n   content.  If the integrity verification fails, the receiver\
    \ MUST\n   destroy all of the plaintext of the content.\n   This section is divided\
    \ into three parts.  The first part describes\n   the AuthEnvelopedData content\
    \ type, the second part describes the\n   authentication and encryption process,\
    \ and the third part describes\n   the key encryption process.\n"
- title: 2.1.  AuthEnvelopedData Type
  contents:
  - "2.1.  AuthEnvelopedData Type\n   The following object identifier identifies the\
    \ authenticated-\n   enveloped-data content type:\n      id-ct-authEnvelopedData\
    \ OBJECT IDENTIFIER ::= { iso(1)\n          member-body(2) us(840) rsadsi(113549)\
    \ pkcs(1) pkcs-9(9)\n          smime(16) ct(1) 23 }\n   The authenticated-enveloped-data\
    \ content type MUST have ASN.1 type\n   AuthEnvelopedData:\n      AuthEnvelopedData\
    \ ::= SEQUENCE {\n        version CMSVersion,\n        originatorInfo [0] IMPLICIT\
    \ OriginatorInfo OPTIONAL,\n        recipientInfos RecipientInfos,\n        authEncryptedContentInfo\
    \ EncryptedContentInfo,\n        authAttrs [1] IMPLICIT AuthAttributes OPTIONAL,\n\
    \        mac MessageAuthenticationCode,\n        unauthAttrs [2] IMPLICIT UnauthAttributes\
    \ OPTIONAL }\n   The fields of type AuthEnvelopedData have the following meanings:\n\
    \      version is the syntax version number.  It MUST be set to 0.\n      originatorInfo\
    \ optionally provides information about the\n         originator.  It is present\
    \ only if required by the key\n         management algorithm.  It may contain\
    \ certificates and\n         Certificate Revocation Lists (CRLs), and the OriginatorInfo\n\
    \         type is defined in Section 6.1 of [CMS].\n      recipientInfos is a\
    \ collection of per-recipient information.\n         There MUST be at least one\
    \ element in the collection.  The\n         RecipientInfo type is defined in Section\
    \ 6.2 of [CMS].\n      authEncryptedContentInfo is the authenticated and encrypted\n\
    \         content.  The CMS enveloped-data content type uses the same\n      \
    \   type to carry the encrypted content.  The EncryptedContentInfo\n         type\
    \ is defined in Section 6.1 of [CMS].\n      authAttrs optionally contains the\
    \ authenticated attributes.  The\n         CMS authenticated-data content type\
    \ uses the same type to carry\n         authenticated attributes.  The authAttrs\
    \ MUST be present if the\n         content type carried in EncryptedContentInfo\
    \ is not id-data.\n         AuthAttributes MUST be DER encoded, even if the rest\
    \ of the\n         AuthEnvelopedData structure is BER encoded.  The AuthAttributes\n\
    \         type is defined in Section 9.1 of [CMS]; however, in this case,\n  \
    \       the message-digest attribute SHOULD NOT be included.  Useful\n       \
    \  attribute types are defined in Section 11 of [CMS].\n      mac is the integrity\
    \ check value (ICV) or message authentication\n         code (MAC) that is generated\
    \ by the authenticated encryption\n         algorithm.  The CMS authenticated-data\
    \ content type uses the\n         same type to carry a MAC.  In this case, the\
    \ MAC covers the\n         authenticated attributes and the content directly,\
    \ and a digest\n         algorithm is not used.  The MessageAuthenticationCode\
    \ type is\n         defined in Section 9.1 of [CMS].\n      unauthAttrs optionally\
    \ contains the unauthenticated attributes.\n         The CMS authenticated-data\
    \ content type uses the same type to\n         carry unauthenticated attributes.\
    \  The UnauthAttributes type is\n         defined in Section 9.1 of [CMS].  Useful\
    \ attribute types are\n         defined in Section 11 of [CMS].\n"
- title: 2.2.  Authentication and Encryption Process
  contents:
  - "2.2.  Authentication and Encryption Process\n   The content-authenticated-encryption\
    \ key for the desired content-\n   authenticated-encryption algorithm is randomly\
    \ generated.\n   If the authenticated encryption algorithm requires the content\
    \ to be\n   padded to a multiple of some block size, then the padding MUST be\n\
    \   added as described in Section 6.3 of [CMS].  This padding method is\n   well\
    \ defined if and only if the block size is less than 256 octets.\n   If optional\
    \ authenticated attributes are present, then they are DER\n   encoded.  A separate\
    \ encoding of the authAttrs field is performed to\n   construct the authenticated\
    \ associated data (AAD) input to the\n   authenticated encryption algorithm. \
    \ For the purposes of constructing\n   the AAD, the IMPLICIT [1] tag in the authAttrs\
    \ field is not used for\n   the DER encoding: rather a universal SET OF tag is\
    \ used.  That is,\n   the DER encoding of the SET OF tag, rather than of the IMPLICIT\
    \ [1]\n   tag, is to be included in the construction for the AAD along with the\n\
    \   length and content octets of the authAttrs value.  If the\n   authenticated\
    \ encryption algorithm requires the AAD to be padded to a\n   multiple of some\
    \ block size, then the padding MUST be added as\n   described in Section 6.3 of\
    \ [CMS].  This padding method is well\n   defined if and only if the block size\
    \ is less than 256 octets.\n   If optional authenticated attributes are absent,\
    \ then zero bits of\n   input are provided for the AAD input to the authenticated\
    \ encryption\n   algorithm.\n   The inputs to the authenticated encryption algorithm\
    \ are the content\n   (the data, which is padded if necessary), the DER-encoded\n\
    \   authenticated attributes (the AAD, which is padded if necessary), and\n  \
    \ the content-authenticated-encryption key.  Under control of a\n   content-authenticated-encryption\
    \ key, the authenticated encryption\n   operation maps an arbitrary string of\
    \ octets (the data) to another\n   string of octets (the ciphertext) and it computes\
    \ an authentication\n   tag over the AAD and the data.  The encrypted data is\
    \ included in the\n   AuthEnvelopedData authEncryptedContentInfo encryptedContent\
    \ as an\n   OCTET STRING, and the authentication tag is included in the\n   AuthEnvelopedData\
    \ mac.\n"
- title: 2.3.  Key Encryption Process
  contents:
  - "2.3.  Key Encryption Process\n   The input to the key encryption process -- the\
    \ value supplied to the\n   recipient's key-encryption algorithm -- is just the\
    \ \"value\" of the\n   content-authenticated-encryption key.\n   Any of the aforementioned\
    \ key management techniques can be used for\n   each recipient of the same encrypted\
    \ content.\n"
- title: 3.  Security Considerations
  contents:
  - "3.  Security Considerations\n   This specification defines an additional CMS\
    \ content type.  The\n   security considerations provided in [CMS] apply to this\
    \ content type\n   as well.\n   Many authenticated encryption algorithms make\
    \ use of a block cipher\n   in counter mode to provide encryption.  When used\
    \ properly, counter\n   mode provides strong confidentiality.  Bellare, Desai,\
    \ Jokipii, and\n   Rogaway show in [BDJR] that the privacy guarantees provided\
    \ by\n   counter mode are at least as strong as those for Cipher Block\n   Chaining\
    \ (CBC) mode when using the same block cipher.\n   Unfortunately, it is easy to\
    \ misuse counter mode.  If counter block\n   values are ever used for more that\
    \ one encryption operation with the\n   same key, then the same key stream will\
    \ be used to encrypt both\n   plaintexts, and the confidentiality guarantees are\
    \ voided.\n   Fortunately, the CMS authenticated-enveloped-data content type\n\
    \   provides all of the tools needed to avoid misuse of counter mode.\n   All\
    \ of the existing key management techniques permit a fresh\n   content-encryption\
    \ key to be generated for each content.  In\n   addition, existing authenticated\
    \ encryption algorithms that make use\n   of counter mode support the use of an\
    \ unpredictable nonce value in\n   the counter block.  This unpredictable nonce\
    \ value (sometimes called\n   a \"salt\") should be carried in an algorithm identifier\
    \ parameter.\n   Implementations must randomly generate content-authenticated-\n\
    \   encryption keys, padding, and unpredictable nonce values.  Also, the\n   generation\
    \ of public/private key pairs relies on a random numbers.\n   The use of inadequate\
    \ pseudo-random number generators (PRNGs) to\n   generate cryptographic keys can\
    \ result in little or no security.  An\n   attacker may find it much easier to\
    \ reproduce the PRNG environment\n   that produced the keys, and then searching\
    \ the resulting small set of\n   possibilities, rather than brute force searching\
    \ the whole key space.\n   The generation of quality random numbers is difficult.\
    \  RFC 4086\n   [RANDOM] offers important guidance in this area.\n   If the message-digest\
    \ attribute is included in the AuthAttributes,\n   then the attribute value will\
    \ contain the unencrypted one-way hash\n   value of the plaintext of the content.\
    \  Disclosure of this hash value\n   enables content tracking, and it can be used\
    \ to determine if the\n   plaintext matches one or more candidate contents.  For\
    \ these reasons,\n   the AuthAttributes SHOULD NOT contain the message-digest\
    \ attribute.\n   CMS is often used to provide encryption in messaging environments.\n\
    \   In messaging environments, various forms of unsolicited messages\n   (such\
    \ as spam and phishing) represent a significant volume of\n   unwanted traffic.\
    \  Present mitigation strategies for unwanted message\n   traffic involve analysis\
    \ of message plaintext.  When recipients\n   accept unsolicited encrypted messages,\
    \ they become even more\n   vulnerable to unwanted traffic since many present\
    \ mitigation\n   strategies will be unable to access the plaintext.  Therefore,\n\
    \   software that receives messages that have been encrypted using CMS\n   needs\
    \ to provide one or more mechanisms to handle the unwanted\n   message traffic.\
    \  One approach that does not require disclosure of\n   keying material to a server\
    \ is to reject or discard encrypted\n   messages unless they purport to come from\
    \ a member of a white list.\n"
- title: 4.  ASN.1 Module
  contents:
  - "4.  ASN.1 Module\n   CMS-AuthEnvelopedData-2007\n     { iso(1) member-body(2)\
    \ us(840) rsadsi(113549) pkcs(1)\n       pkcs-9(9) smime(16) modules(0) cms-authEnvelopedData(31)\
    \ }\n   DEFINITIONS IMPLICIT TAGS ::=\n   BEGIN\n   -- EXPORTS All\n   -- The\
    \ types and values defined in this module are exported for use\n   -- in the other\
    \ ASN.1 modules.  Other applications may use them for\n   -- their own purposes.\n\
    \   IMPORTS\n     -- Imports from RFC 3852 [CMS], Section 12.1\n           AuthAttributes,\
    \ CMSVersion, EncryptedContentInfo,\n           MessageAuthenticationCode, OriginatorInfo,\
    \ RecipientInfos,\n           UnauthAttributes\n              FROM CryptographicMessageSyntax2004\n\
    \                   { iso(1) member-body(2) us(840) rsadsi(113549)\n         \
    \            pkcs(1) pkcs-9(9) smime(16) modules(0)\n                     cms-2004(24)\
    \ } ;\n   id-ct-authEnvelopedData OBJECT IDENTIFIER ::= { iso(1)\n       member-body(2)\
    \ us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\n       smime(16) ct(1) 23 }\n   AuthEnvelopedData\
    \ ::= SEQUENCE {\n     version CMSVersion,\n     originatorInfo [0] IMPLICIT OriginatorInfo\
    \ OPTIONAL,\n     recipientInfos RecipientInfos,\n     authEncryptedContentInfo\
    \ EncryptedContentInfo,\n     authAttrs [1] IMPLICIT AuthAttributes OPTIONAL,\n\
    \     mac MessageAuthenticationCode,\n     unauthAttrs [2] IMPLICIT UnauthAttributes\
    \ OPTIONAL }\n   END -- of CMS-AuthEnvelopedData-2007\n"
- title: 5.  References
  contents:
  - '5.  References

    '
- title: 5.1.  Normative References
  contents:
  - "5.1.  Normative References\n   [CMS]        Housley, R., \"Cryptographic Message\
    \ Syntax (CMS)\", RFC\n                3852, July 2004.\n   [STDWORDS]   Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n                Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [X.208-88]   CCITT.  Recommendation X.208:\
    \ Specification of Abstract\n                Syntax Notation One (ASN.1).  1988.\n\
    \   [X.209-88]   CCITT.  Recommendation X.209: Specification of Basic\n      \
    \          Encoding Rules for Abstract Syntax Notation One (ASN.1).\n        \
    \        1988.\n   [X.509-88]   CCITT.  Recommendation X.509: The Directory-\n\
    \                Authentication Framework.  1988.\n"
- title: 5.2.  Informative References
  contents:
  - "5.2.  Informative References\n   [AESALGS]    Housley, R., \"Using AES-CCM and\
    \ AES-GCM Authenticated\n                Encryption in the Cryptographic Message\
    \ Syntax (CMS)\",\n                RFC 5084, November 2007.\n   [BDJR]       Bellare,\
    \ M., Desai, A., Jokipii, E., and P. Rogaway, \"A\n                Concrete Security\
    \ Treatment of Symmetric Encryption:\n                Analysis of the DES Modes\
    \ of Operation\", Proceedings\n                38th Annual Symposium on Foundations\
    \ of Computer\n                Science, 1997.\n   [RANDOM]     Eastlake, D., 3rd,\
    \ Schiller, J., and S. Crocker,\n                \"Randomness Requirements for\
    \ Security\", BCP 106, RFC\n                4086, June 2005.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Russell Housley\n   Vigil Security, LLC\n   918 Spring Knoll\
    \ Drive\n   Herndon, VA 20170\n   USA\n   EMail: housley@vigilsec.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
