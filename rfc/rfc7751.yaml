- title: __initial_text__
  contents:
  - "    Kerberos Authorization Data Container Authenticated by Multiple\n       \
    \           Message Authentication Codes (MACs)\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies a Kerberos authorization data container\
    \ that\n   supersedes AD-KDC-ISSUED.  It allows for multiple Message\n   Authentication\
    \ Codes (MACs) or signatures to authenticate the\n   contained authorization data\
    \ elements.  The multiple MACs are needed\n   to mitigate shortcomings in the\
    \ existing AD-KDC-ISSUED container.\n   This document updates RFC 4120.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7751.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  Requirements Language . . . . . . . . . . . . . . . .\
    \ . . . .   2\n   3.  Motivations . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   2\n   4.  Encoding  . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . .   4\n   5.  Usage . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ .   6\n   6.  Assigned Numbers  . . . . . . . . . . . . . . . . . . . . . .\
    \   6\n   7.  Security Considerations . . . . . . . . . . . . . . . . . . .  \
    \ 6\n   8.  References  . . . . . . . . . . . . . . . . . . . . . . . . .   9\n\
    \     8.1.  Normative References  . . . . . . . . . . . . . . . . . .   9\n  \
    \   8.2.  Informative References  . . . . . . . . . . . . . . . . .   9\n   Acknowledgements\
    \  . . . . . . . . . . . . . . . . . . . . . . . .   9\n   Authors' Addresses\
    \  . . . . . . . . . . . . . . . . . . . . . . .  10\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document specifies a new authorization data container\
    \ for\n   Kerberos, called the CAMMAC (Container Authenticated by Multiple\n \
    \  MACs).  The Abstract Syntax Notation One (ASN.1) type implementing\n   the\
    \ CAMMAC concept is the AD-CAMMAC, which supersedes the AD-KDC-\n   ISSUED authorization\
    \ data type specified in [RFC4120].  This new\n   container allows both the receiving\
    \ application service and the Key\n   Distribution Center (KDC) itself to verify\
    \ the authenticity of the\n   contained authorization data.  The AD-CAMMAC container\
    \ can also\n   include additional verifiers that \"trusted services\" can use\
    \ to\n   verify the contained authorization data.\n"
- title: 2.  Requirements Language
  contents:
  - "2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 3.  Motivations
  contents:
  - "3.  Motivations\n   The Kerberos protocol allows clients to submit arbitrary\n\
    \   authorization data for a KDC to insert into a Kerberos ticket.  These\n  \
    \ client-requested authorization data allow the client to express\n   authorization\
    \ restrictions that the application service will\n   interpret.  With few exceptions,\
    \ the KDC can safely copy these\n   client-requested authorization data to the\
    \ issued ticket without\n   necessarily inspecting, interpreting, or filtering\
    \ their contents.\n   The AD-KDC-ISSUED authorization data container specified\
    \ in RFC 4120\n   [RFC4120] is a means for KDCs to include positive or permissive\n\
    \   (rather than restrictive) authorization data in service tickets in a\n   way\
    \ that the service named in a ticket can verify that the KDC has\n   issued the\
    \ contained authorization data.  This capability takes\n   advantage of a shared\
    \ symmetric key between the KDC and the service\n   to assure the service that\
    \ the KDC did not merely copy client-\n   requested authorization data to the\
    \ ticket without inspecting them.\n   The AD-KDC-ISSUED container works well for\
    \ situations where the flow\n   of authorization data is from the KDC to the service.\
    \  However,\n   protocol extensions such as Constrained Delegation (S4U2Proxy\n\
    \   [MS-SFU]) require that a service present to the KDC a service ticket\n   that\
    \ the KDC previously issued, as evidence that the service is\n   authorized to\
    \ impersonate the client principal named in that ticket.\n   In the S4U2Proxy\
    \ extension, the KDC uses the evidence ticket as the\n   basis for issuing a derivative\
    \ ticket that the service can then use\n   to impersonate the client.  The authorization\
    \ data contained within\n   the evidence ticket constitute a flow of authorization\
    \ data from the\n   application service to the KDC.  The properties of the AD-KDC-ISSUED\n\
    \   container are insufficient for this use case because the service\n   knows\
    \ the symmetric key for the checksum in the AD-KDC-ISSUED\n   container.  Therefore,\
    \ the KDC has no way to detect whether the\n   service has tampered with the contents\
    \ of the AD-KDC-ISSUED container\n   within the evidence ticket.\n   The new AD-CAMMAC\
    \ authorization data container specified in this\n   document improves upon AD-KDC-ISSUED\
    \ by including additional verifier\n   elements.  The svc-verifier (service verifier)\
    \ element of the\n   AD-CAMMAC has the same functional and security properties\
    \ as the\n   ad-checksum element of AD-KDC-ISSUED; the svc-verifier allows the\n\
    \   service to verify the integrity of the AD-CAMMAC contents as it\n   already\
    \ could with the AD-KDC-ISSUED container.  The kdc-verifier and\n   other-verifiers\
    \ elements are new to AD-CAMMAC and provide its\n   enhanced capabilities.\n \
    \  The kdc-verifier element of the AD-CAMMAC container allows a KDC to\n   verify\
    \ the integrity of authorization data that it previously\n   inserted into a ticket\
    \ by using a key that only the KDC knows.  The\n   KDC thus avoids recomputing\
    \ all of the authorization data for the\n   issued ticket; this recomputation\
    \ might not always be possible when\n   that data includes ephemeral information\
    \ such as the strength or type\n   of authentication method used to obtain the\
    \ original ticket.\n   The verifiers in the other-verifiers element of the AD-CAMMAC\n\
    \   container are not required but can be useful when a lesser-privileged\n  \
    \ service receives a ticket from a client and needs to extract the\n   AD-CAMMAC\
    \ to demonstrate to a higher-privileged \"trusted service\" on\n   the same host\
    \ that it is legitimately acting on behalf of that\n   client.  The trusted service\
    \ can use a verifier in the\n   other-verifiers element to validate the contents\
    \ of the AD-CAMMAC\n   without further communication with the KDC.\n"
- title: 4.  Encoding
  contents:
  - "4.  Encoding\n   The Kerberos protocol is defined in [RFC4120] using ASN.1 [X.680]\
    \ and\n   using the ASN.1 Distinguished Encoding Rules (DER) [X.690].  For\n \
    \  consistency, this specification also uses ASN.1 for specifying the\n   layout\
    \ of AD-CAMMAC.  The ad-data of the AD-CAMMAC authorization data\n   element is\
    \ the ASN.1 DER encoding of the AD-CAMMAC ASN.1 type\n   specified below.\n  \
    \    KerberosV5CAMMAC {\n              iso(1) identified-organization(3) dod(6)\
    \ internet(1)\n              security(5) kerberosV5(2) modules(4) cammac(7)\n\
    \      } DEFINITIONS EXPLICIT TAGS ::= BEGIN\n      IMPORTS\n            AuthorizationData,\
    \ PrincipalName, Checksum, UInt32, Int32\n              FROM KerberosV5Spec2 {\
    \ iso(1) identified-organization(3)\n                dod(6) internet(1) security(5)\
    \ kerberosV5(2)\n                modules(4) krb5spec2(2) };\n                --\
    \ as defined in RFC 4120.\n      AD-CAMMAC                   ::= SEQUENCE {\n\
    \            elements              [0] AuthorizationData,\n            kdc-verifier\
    \          [1] Verifier-MAC OPTIONAL,\n            svc-verifier          [2] Verifier-MAC\
    \ OPTIONAL,\n            other-verifiers       [3] SEQUENCE (SIZE (1..MAX))\n\
    \                                      OF Verifier OPTIONAL\n      }\n      Verifier\
    \             ::= CHOICE {\n            mac            Verifier-MAC,\n       \
    \     ...\n      }\n      Verifier-MAC         ::= SEQUENCE {\n            identifier\
    \     [0] PrincipalName OPTIONAL,\n            kvno           [1] UInt32 OPTIONAL,\n\
    \            enctype        [2] Int32 OPTIONAL,\n            mac            [3]\
    \ Checksum\n      }\n      END\n   elements:\n      A sequence of authorization\
    \ data elements issued by the KDC.\n      These elements are the authorization\
    \ data that the verifier fields\n      authenticate.\n   Verifier:\n      A CHOICE\
    \ type that currently contains only one alternative:\n      Verifier-MAC.  Future\
    \ extensions might add support for public-key\n      signatures.\n   Verifier-MAC:\n\
    \      Contains an RFC 3961 [RFC3961] checksum (MAC) computed over the\n     \
    \ ASN.1 DER encoding of the AuthorizationData value in the elements\n      field\
    \ of the AD-CAMMAC.  The identifier, kvno, and enctype fields\n      help the\
    \ recipient locate the key required for verifying the MAC.\n      For the kdc-verifier\
    \ and the svc-verifier, the identifier, kvno,\n      and enctype fields are often\
    \ obvious from context and MAY be\n      omitted.  For the kdc-verifier, the MAC\
    \ is computed differently\n      than for the svc-verifier and the other-verifiers,\
    \ as described\n      later.  The key usage number for computing the MAC (checksum)\
    \ is\n      64.\n   kdc-verifier:\n      A Verifier-MAC where the key is a long-term\
    \ key of the local\n      Ticket-Granting Service (TGS).  The checksum type is\
    \ the required\n      checksum type for the enctype of the TGS key.  In contrast\
    \ to the\n      other Verifier-MAC elements, the KDC computes the MAC in the kdc-\n\
    \      verifier over the ASN.1 DER encoding of a modified version of the\n   \
    \   EncTicketPart of the surrounding ticket.  To construct this\n      modified\
    \ version of the EncTicketPart, the KDC replaces the\n      AuthorizationData\
    \ value that would have appeared in the\n      authorization-data field of the\
    \ EncTicketPart with the\n      AuthorizationData value from the elements field\
    \ of the AD-CAMMAC.\n      The original authorization-data field in the EncTicketPart\
    \ would\n      have contained the AD-CAMMAC itself, possibly accompanied by other\n\
    \      authorization data outside of the AD-CAMMAC.  This altered\n      Verifier-MAC\
    \ computation binds the kdc-verifier to the other\n      contents of the ticket,\
    \ assuring the KDC that a malicious service\n      has not substituted a mismatched\
    \ AD-CAMMAC received from another\n      ticket.\n   svc-verifier:\n      A Verifier-MAC\
    \ where the key is the same long-term service key\n      that the KDC uses to\
    \ encrypt the surrounding ticket.  The checksum\n      type is the required checksum\
    \ type for the enctype of the service\n      key used to encrypt the ticket. \
    \ This field MUST be present if the\n      service principal of the ticket is\
    \ not the local TGS, including\n      when the ticket is a cross-realm Ticket-Granting\
    \ Ticket (TGT).\n   other-verifiers:\n      A sequence of additional verifiers.\
    \  In each additional Verifier-\n      MAC, the key is a long-term key of the\
    \ principal name specified in\n      the identifier field.  The PrincipalName\
    \ MUST be present and be a\n      valid principal in the realm.  KDCs MAY add\
    \ one or more \"trusted\n      service\" verifiers.  Unless otherwise administratively\
    \ configured,\n      the KDC SHOULD determine the \"trusted service\" principal\
    \ name by\n      replacing the service identifier component of the sname element\
    \ of\n      the surrounding ticket with \"host\".  The checksum is computed\n\
    \      using a long-term key of the identified principal, and the\n      checksum\
    \ type is the required checksum type for the enctype of\n      that long-term\
    \ key.  The kvno and enctype SHOULD be specified to\n      disambiguate which\
    \ of the long-term keys of the trusted service is\n      used.\n"
- title: 5.  Usage
  contents:
  - "5.  Usage\n   Application servers and KDCs MAY ignore the AD-CAMMAC container\
    \ and\n   the authorization data elements it contains.  For compatibility with\n\
    \   older Kerberos implementations, a KDC issuing an AD-CAMMAC SHOULD\n   enclose\
    \ it in an AD-IF-RELEVANT container [RFC4120] unless the KDC\n   knows that the\
    \ application server is likely to recognize it.\n"
- title: 6.  Assigned Numbers
  contents:
  - "6.  Assigned Numbers\n   RFC 4120 is updated in the following ways:\n   o  The\
    \ ad-type number 96 is assigned for AD-CAMMAC, updating the\n      table in Section\
    \ 7.5.4 of [RFC4120].\n   o  The table in Section 5.2.6 of [RFC4120] is updated\
    \ to map the ad-\n      type 96 to \"DER encoding of AD-CAMMAC\".\n   o  The key\
    \ usage number 64 is assigned for the Verifier-MAC checksum,\n      updating the\
    \ table in Section 7.5.1 of [RFC4120].\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   The CAMMAC provides data origin authentication\
    \ for authorization data\n   contained in it, attesting that it originated from\
    \ the KDC.  This\n   section describes the precautions required to maintain the\
    \ integrity\n   of that data origin authentication through various information\
    \ flows\n   involving a Kerberos ticket containing a CAMMAC.\n   When handling\
    \ a TGS-REQ containing a CAMMAC, a KDC makes a policy\n   decision on how to produce\
    \ the CAMMAC contents of the newly issued\n   ticket based on properties of the\
    \ ticket(s) accompanying the TGS-REQ.\n   This policy decision can involve filtering,\
    \ transforming, or verbatim\n   copying of the original CAMMAC contents.  The\
    \ following paragraphs\n   provide some guidance on formulating such policies.\n\
    \   A KDC verifies a CAMMAC as originating from a local-realm KDC when at\n  \
    \ least one of following the criteria is true:\n   1.  the KDC successfully verifies\
    \ the kdc-verifier; or\n   2.  the KDC successfully verifies the svc-verifier,\
    \ and the svc-\n       verifier uses a key known only to the local-realm KDCs;\
    \ or\n   3.  no verifiers are present, the ticket-encrypting key is known only\n\
    \       to local-realm KDCs, and all local-realm KDCs properly filter out\n  \
    \     client-submitted CAMMACs.  (This can require particular caution\n      \
    \ in a realm that has KDCs with mixed CAMMAC support, as might\n       happen\
    \ when incrementally upgrading KDCs in a realm to support\n       CAMMAC.)\n \
    \  A CAMMAC that originates from a local-realm KDC might contain\n   information\
    \ that originates from elsewhere.  Originating from a\n   local-realm KDC means\
    \ that a local-realm KDC attests that the CAMMAC\n   contents conform to the policies\
    \ of the local realm, regardless of\n   the ultimate origin of the information\
    \ in the CAMMAC (which could be\n   a remote realm in the case of a CAMMAC contained\
    \ in a cross-realm\n   TGT).\n   Local policy determines when a KDC can apply\
    \ a kdc-verifier to a\n   CAMMAC (or otherwise creates a CAMMAC that satisfies\
    \ the local-origin\n   criteria listed above).  Semantically, a CAMMAC that a\
    \ KDC verifies\n   as originating from a local-realm KDC attests that the CAMMAC\n\
    \   contents conformed to local policy at the time of creation of the\n   CAMMAC.\
    \  Such a local policy can include allowing verbatim copying of\n   CAMMAC contents\
    \ from cross-realm TGTs from designated remote realms\n   and applying a kdc-verifier\
    \ to the new CAMMAC.\n   Usually, when a KDC verifies a CAMMAC as originating\
    \ from a local-\n   realm KDC, the KDC can assume that the CAMMAC contents continue\
    \ to\n   conform to the policies of the local realm.  It is generally safe for\n\
    \   a KDC to make verbatim copies of the contents of such a CAMMAC into a\n  \
    \ new CAMMAC when handling a TGS-REQ.  Particularly strict\n   implementations\
    \ might conduct additional policy checks on the\n   contents of a CAMMAC originating\
    \ from a local-realm KDC if the policy\n   of the local realm materially changes\
    \ during the life of the CAMMAC.\n   A KDC MAY omit the kdc-verifier from the\
    \ CAMMAC when it is not needed\n   according to how realm policies will subsequently\
    \ treat the\n   containing ticket.  An implementation might choose to do this\n\
    \   omission to reduce the size of tickets it issues.  Some examples of\n   when\
    \ such an omission is safe are:\n   1.  For a local-realm TGT, if all local-realm\
    \ KDCs correctly filter\n       out client-submitted CAMMACs, the local-realm\
    \ origin criteria\n       listed above allow omission of the kdc-verifier.\n \
    \  2.  An application service might not use the S4U2Proxy extension, or\n    \
    \   the realm policy might disallow the use of S4U2Proxy by that\n       service.\
    \  In such situations where there is no flow of\n       authorization data from\
    \ the service to the KDC, the application\n       service could modify the CAMMAC\
    \ contents, but such modifications\n       would have no effect on other services.\
    \  Because of the lack of\n       security impact to other application services,\
    \ the KDC MAY omit\n       the kdc-verifier from a CAMMAC contained in a ticket\
    \ for that\n       service.\n   Extracting a CAMMAC from a ticket for use as a\
    \ credential removes it\n   from the context of the ticket.  In the general case,\
    \ this could turn\n   it into a bearer token, with all of the associated security\n\
    \   implications.  Also, the CAMMAC does not itself necessarily contain\n   sufficient\
    \ information to identify the client principal.  Therefore,\n   application protocols\
    \ that rely on extracted CAMMACs might need to\n   duplicate a substantial portion\
    \ of the ticket contents and include\n   that duplicated information in the authorization\
    \ data contained\n   within the CAMMAC.  The extent of this duplication would\
    \ depend on\n   the security properties required by the application protocol.\n\
    \   The method for computing the kdc-verifier binds it only to the\n   authorization\
    \ data contained within the CAMMAC; it does not bind the\n   CAMMAC to any authorization\
    \ data within the containing ticket but\n   outside the CAMMAC.  At least one\
    \ (non-standard) authorization data\n   type, AD-SIGNEDPATH, attempts to bind\
    \ to other authorization data in\n   a ticket, and it is very difficult for two\
    \ such authorization data\n   types to coexist.\n   The kdc-verifier in CAMMAC\
    \ does not bind the service principal name\n   to the CAMMAC contents because\
    \ the service principal name is not part\n   of the EncTicketPart.  An entity\
    \ that has access to the keys of two\n   different service principals can decrypt\
    \ a ticket for one service and\n   encrypt it in the key of the other service,\
    \ altering the svc-verifier\n   to match.  Both the kdc-verifier and the svc-verifier\
    \ would still\n   validate, but the KDC never issued this fabricated ticket. \
    \ The\n   impact of this manipulation is minor if the CAMMAC contents only\n \
    \  communicate attributes related to the client.  If an application\n   requires\
    \ an authenticated binding between the service principal name\n   and the CAMMAC\
    \ or ticket contents, the KDC MUST include in the CAMMAC\n   some authorization\
    \ data element that names the service principal.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3961]  Raeburn, K., \"Encryption and Checksum Specifications for\n   \
    \           Kerberos 5\", RFC 3961, DOI 10.17487/RFC3961, February\n         \
    \     2005, <http://www.rfc-editor.org/info/rfc3961>.\n   [RFC4120]  Neuman, C.,\
    \ Yu, T., Hartman, S., and K. Raeburn, \"The\n              Kerberos Network Authentication\
    \ Service (V5)\", RFC 4120,\n              DOI 10.17487/RFC4120, July 2005,\n\
    \              <http://www.rfc-editor.org/info/rfc4120>.\n   [X.680]    ITU-T,\
    \ \"Information technology -- Abstract Syntax Notation\n              One (ASN.1):\
    \ Specification of basic notation\", ITU-T\n              Recommendation X.680,\
    \ ISO/IEC International Standard\n              8824-1:2008, November 2008.\n\
    \   [X.690]    ITU-T, \"Information technology -- ASN.1 encoding rules:\n    \
    \          Specification of Basic Encoding Rules (BER), Canonical\n          \
    \    Encoding Rules (CER) and Distinguished Encoding Rules\n              (DER)\"\
    , ITU-T Recommendation X.690, ISO/IEC International\n              Standard 8825-1:2008,\
    \ November 2008.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [MS-SFU]   Microsoft, \"[MS-SFU]: Kerberos Protocol\
    \ Extensions:\n              Service for User and Constrained Delegation Protocol\"\
    ,\n              October 2015,\n              <http://msdn.microsoft.com/en-us/library/cc246071.aspx>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Shawn Emery, Sam Hartman, Greg Hudson, Ben Kaduk, Barry\
    \ Leiba, Meral\n   Shirazipour, Zhanna Tsitkov, Qin Wu, and Kai Zheng provided\
    \ helpful\n   technical and editorial feedback on earlier draft versions of this\n\
    \   document.  Thomas Hardjono helped with the initial editing to split\n   this\
    \ document from a predecessor document that had a wider scope.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Simo Sorce\n   Red Hat\n   Email: ssorce@redhat.com\n\
    \   Tom Yu\n   MIT\n   Email: tlyu@mit.edu\n"
