- title: __initial_text__
  contents:
  - '   Transport Layer Security (TLS) Renegotiation Indication Extension

    '
- title: Abstract
  contents:
  - "Abstract\n   Secure Socket Layer (SSL) and Transport Layer Security (TLS)\n \
    \  renegotiation are vulnerable to an attack in which the attacker forms\n   a\
    \ TLS connection with the target server, injects content of his\n   choice, and\
    \ then splices in a new TLS connection from a client.  The\n   server treats the\
    \ client's initial TLS handshake as a renegotiation\n   and thus believes that\
    \ the initial data transmitted by the attacker\n   is from the same entity as\
    \ the subsequent client data.  This\n   specification defines a TLS extension\
    \ to cryptographically tie\n   renegotiations to the TLS connections they are\
    \ being performed over,\n   thus preventing this attack.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5746.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Conventions Used in This Document ...............................4\n  \
    \ 3. Secure Renegotiation Definition .................................4\n    \
    \  3.1. Additional Connection State ................................4\n      3.2.\
    \ Extension Definition .......................................5\n      3.3. Renegotiation\
    \ Protection Request Signaling Cipher\n           Suite Value ................................................6\n\
    \      3.4. Client Behavior: Initial Handshake .........................6\n  \
    \    3.5. Client Behavior: Secure Renegotiation ......................7\n    \
    \  3.6. Server Behavior: Initial Handshake .........................7\n      3.7.\
    \ Server Behavior: Secure Renegotiation ......................8\n   4. Backward\
    \ Compatibility ..........................................9\n      4.1. Client\
    \ Considerations ......................................9\n      4.2. Client Behavior:\
    \ Legacy (Insecure) Renegotiation ..........10\n      4.3. Server Considerations\
    \ .....................................10\n      4.4. Server Behavior: Legacy\
    \ (Insecure) Renegotiation ..........11\n      4.5. SSLv3 .....................................................11\n\
    \   5. Security Considerations ........................................12\n  \
    \ 6. IANA Considerations ............................................13\n   7.\
    \ Acknowledgements ...............................................13\n   8. References\
    \ .....................................................13\n      8.1. Normative\
    \ References ......................................13\n      8.2. Informative\
    \ References ....................................13\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   TLS [RFC5246] allows either the client or the server to\
    \ initiate\n   renegotiation -- a new handshake that establishes new cryptographic\n\
    \   parameters.  Unfortunately, although the new handshake is carried out\n  \
    \ using the cryptographic parameters established by the original\n   handshake,\
    \ there is no cryptographic binding between the two.  This\n   creates the opportunity\
    \ for an attack in which the attacker who can\n   intercept a client's transport\
    \ layer connection can inject traffic of\n   his own as a prefix to the client's\
    \ interaction with the server.  One\n   form of this attack [Ray09] proceeds as\
    \ shown below:\n   Client                        Attacker                    \
    \    Server\n   ------                        -------                        \
    \ ------\n                                     <----------- Handshake ---------->\n\
    \                                     <======= Initial Traffic ========>\n   <--------------------------\
    \  Handshake ============================>\n   <======================== Client\
    \ Traffic ==========================>\n   To start the attack, the attacker forms\
    \ a TLS connection to the\n   server (perhaps in response to an initial intercepted\
    \ connection from\n   the client).  He then sends any traffic of his choice to\
    \ the server.\n   This may involve multiple requests and responses at the application\n\
    \   layer, or may simply be a partial application layer request intended\n   to\
    \ prefix the client's data.  This traffic is shown with == to\n   indicate it\
    \ is encrypted.  He then allows the client's TLS handshake\n   to proceed with\
    \ the server.  The handshake is in the clear to the\n   attacker but encrypted\
    \ over the attacker's TLS connection to the\n   server.  Once the handshake has\
    \ completed, the client communicates\n   with the server over the newly established\
    \ security parameters with\n   the server.  The attacker cannot read this traffic,\
    \ but the server\n   believes that the initial traffic to and from the attacker\
    \ is the\n   same as that to and from the client.\n   If certificate-based client\
    \ authentication is used, the server will\n   see a stream of bytes where the\
    \ initial bytes are protected but\n   unauthenticated by TLS and subsequent bytes\
    \ are authenticated by TLS\n   and bound to the client's certificate.  In some\
    \ protocols (notably\n   HTTPS), no distinction is made between pre- and post-authentication\n\
    \   stages and the bytes are handled uniformly, resulting in the server\n   believing\
    \ that the initial traffic corresponds to the authenticated\n   client identity.\
    \  Even without certificate-based authentication, a\n   variety of attacks may\
    \ be possible in which the attacker convinces\n   the server to accept data from\
    \ it as data from the client.  For\n   instance, if HTTPS [RFC2818] is in use\
    \ with HTTP cookies [RFC2965],\n   the attacker may be able to generate a request\
    \ of his choice\n   validated by the client's cookie.\n   Some protocols -- such\
    \ as IMAP or SMTP -- have more explicit\n   transitions between authenticated\
    \ and unauthenticated phases and\n   require that the protocol state machine be\
    \ partly or fully reset at\n   such transitions.  If strictly followed, these\
    \ rules may limit the\n   effect of attacks.  Unfortunately, there is no requirement\
    \ for state\n   machine resets at TLS renegotiation, and thus there is still a\n\
    \   potential window of vulnerability, for instance, by prefixing a\n   command\
    \ that writes to an area visible by the attacker with a command\n   by the client\
    \ that includes his password, thus making the client's\n   password visible to\
    \ the attacker (note that this precise attack does\n   not work with challenge-response\
    \ authentication schemes, but other\n   attacks may be possible).  Similar attacks\
    \ are available with SMTP,\n   and in fact do not necessarily require the attacker\
    \ to have an\n   account on the target server.\n   It is important to note that\
    \ in both cases these attacks are possible\n   because the client sends unsolicited\
    \ authentication information\n   without requiring any specific data from the\
    \ server over the TLS\n   connection.  Protocols that require a round trip to\
    \ the server over\n   TLS before the client sends sensitive information are likely\
    \ to be\n   less vulnerable.\n   These attacks can be prevented by cryptographically\
    \ binding\n   renegotiation handshakes to the enclosing TLS cryptographic\n  \
    \ parameters, thus allowing the server to differentiate renegotiation\n   from\
    \ initial negotiation, as well as preventing renegotiations from\n   being spliced\
    \ in between connections.  An attempt by an attacker to\n   inject himself as\
    \ described above will result in a mismatch of the\n   cryptographic binding and\
    \ can thus be detected.  The data used in the\n   extension is similar to, but\
    \ not the same as, the data used in the\n   tls-unique and/or tls-unique-for-telnet\
    \ channel bindings described in\n   [TLS-CHANNEL-BINDINGS]; however, this extension\
    \ is not a general-\n   purpose RFC 5056 [RFC5056] channel binding facility.\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 3.  Secure Renegotiation Definition
  contents:
  - '3.  Secure Renegotiation Definition

    '
- title: 3.1.  Additional Connection State
  contents:
  - "3.1.  Additional Connection State\n   Both client and server need to store three\
    \ additional values for each\n   TLS connection state (see RFC 5246, Section 6.1).\
    \  Note that these\n   values are specific to connection (not a TLS session cache\
    \ entry).\n   o  a \"secure_renegotiation\" flag, indicating whether secure\n\
    \      renegotiation is in use for this connection.\n   o  \"client_verify_data\"\
    :  the verify_data from the Finished message\n      sent by the client on the\
    \ immediately previous handshake.  For\n      currently defined TLS versions and\
    \ cipher suites, this will be a\n      12-byte value; for SSLv3, this will be\
    \ a 36-byte value.\n   o  \"server_verify_data\":  the verify_data from the Finished\
    \ message\n      sent by the server on the immediately previous handshake.\n"
- title: 3.2.  Extension Definition
  contents:
  - "3.2.  Extension Definition\n   This document defines a new TLS extension, \"\
    renegotiation_info\" (with\n   extension type 0xff01), which contains a cryptographic\
    \ binding to the\n   enclosing TLS connection (if any) for which the renegotiation\
    \ is\n   being performed.  The \"extension data\" field of this extension\n  \
    \ contains a \"RenegotiationInfo\" structure:\n      struct {\n          opaque\
    \ renegotiated_connection<0..255>;\n      } RenegotiationInfo;\n   The contents\
    \ of this extension are specified as follows.\n   o  If this is the initial handshake\
    \ for a connection, then the\n      \"renegotiated_connection\" field is of zero\
    \ length in both the\n      ClientHello and the ServerHello.  Thus, the entire\
    \ encoding of the\n      extension is ff 01 00 01 00.  The first two octets represent\
    \ the\n      extension type, the third and fourth octets the length of the\n \
    \     extension itself, and the final octet the zero length byte for the\n   \
    \   \"renegotiated_connection\" field.\n   o  For ClientHellos that are renegotiating,\
    \ this field contains the\n      \"client_verify_data\" specified in Section 3.1.\n\
    \   o  For ServerHellos that are renegotiating, this field contains the\n    \
    \  concatenation of client_verify_data and server_verify_data.  For\n      current\
    \ versions of TLS, this will be a 24-byte value (for SSLv3,\n      it will be\
    \ a 72-byte value).\n   This extension also can be used with Datagram TLS (DTLS)\
    \ [RFC4347].\n   Although, for editorial simplicity, this document refers to TLS,\
    \ all\n   requirements in this document apply equally to DTLS.\n"
- title: 3.3.  Renegotiation Protection Request Signaling Cipher Suite Value
  contents:
  - "3.3.  Renegotiation Protection Request Signaling Cipher Suite Value\n   Both\
    \ the SSLv3 and TLS 1.0/TLS 1.1 specifications require\n   implementations to\
    \ ignore data following the ClientHello (i.e.,\n   extensions) if they do not\
    \ understand it.  However, some SSLv3 and\n   TLS 1.0 implementations incorrectly\
    \ fail the handshake in such a\n   case.  This means that clients that offer the\
    \ \"renegotiation_info\"\n   extension may encounter handshake failures.  In order\
    \ to enhance\n   compatibility with such servers, this document defines a second\n\
    \   signaling mechanism via a special Signaling Cipher Suite Value (SCSV)\n  \
    \ \"TLS_EMPTY_RENEGOTIATION_INFO_SCSV\", with code point {0x00, 0xFF}.\n   This\
    \ SCSV is not a true cipher suite (it does not correspond to any\n   valid set\
    \ of algorithms) and cannot be negotiated.  Instead, it has\n   the same semantics\
    \ as an empty \"renegotiation_info\" extension, as\n   described in the following\
    \ sections.  Because SSLv3 and TLS\n   implementations reliably ignore unknown\
    \ cipher suites, the SCSV may\n   be safely sent to any server.  The SCSV can\
    \ also be included in the\n   SSLv2 backward compatible CLIENT-HELLO (see Appendix\
    \ E.2 of\n   [RFC5246]).\n   Note:  a minimal client that does not support renegotiation\
    \ at all\n   can simply use the SCSV in all initial handshakes.  The rules in\
    \ the\n   following sections will cause any compliant server to abort the\n  \
    \ handshake when it sees an apparent attempt at renegotiation by such a\n   client.\n"
- title: '3.4.  Client Behavior: Initial Handshake'
  contents:
  - "3.4.  Client Behavior: Initial Handshake\n   Note that this section and Section\
    \ 3.5 apply to both full handshakes\n   and session resumption handshakes.\n \
    \  o  The client MUST include either an empty \"renegotiation_info\"\n      extension,\
    \ or the TLS_EMPTY_RENEGOTIATION_INFO_SCSV signaling\n      cipher suite value\
    \ in the ClientHello.  Including both is NOT\n      RECOMMENDED.\n   o  When a\
    \ ServerHello is received, the client MUST check if it\n      includes the \"\
    renegotiation_info\" extension:\n      *  If the extension is not present, the\
    \ server does not support\n         secure renegotiation; set secure_renegotiation\
    \ flag to FALSE.\n         In this case, some clients may want to terminate the\
    \ handshake\n         instead of continuing; see Section 4.1 for discussion.\n\
    \      *  If the extension is present, set the secure_renegotiation flag\n   \
    \      to TRUE.  The client MUST then verify that the length of the\n        \
    \ \"renegotiated_connection\" field is zero, and if it is not, MUST\n        \
    \ abort the handshake (by sending a fatal handshake_failure\n         alert).\n\
    \         Note: later in Section 3, \"abort the handshake\" is used as\n     \
    \    shorthand for \"send a fatal handshake_failure alert and\n         terminate\
    \ the connection\".\n   o  When the handshake has completed, the client needs\
    \ to save the\n      client_verify_data and server_verify_data values for future\
    \ use.\n"
- title: '3.5.  Client Behavior: Secure Renegotiation'
  contents:
  - "3.5.  Client Behavior: Secure Renegotiation\n   This text applies if the connection's\
    \ \"secure_renegotiation\" flag is\n   set to TRUE (if it is set to FALSE, see\
    \ Section 4.2).\n   o  The client MUST include the \"renegotiation_info\" extension\
    \ in the\n      ClientHello, containing the saved client_verify_data.  The SCSV\n\
    \      MUST NOT be included.\n   o  When a ServerHello is received, the client\
    \ MUST verify that the\n      \"renegotiation_info\" extension is present; if\
    \ it is not, the\n      client MUST abort the handshake.\n   o  The client MUST\
    \ then verify that the first half of the\n      \"renegotiated_connection\" field\
    \ is equal to the saved\n      client_verify_data value, and the second half is\
    \ equal to the\n      saved server_verify_data value.  If they are not, the client\
    \ MUST\n      abort the handshake.\n   o  When the handshake has completed, the\
    \ client needs to save the new\n      client_verify_data and server_verify_data\
    \ values.\n"
- title: '3.6.  Server Behavior: Initial Handshake'
  contents:
  - "3.6.  Server Behavior: Initial Handshake\n   Note that this section and Section\
    \ 3.7 apply to both full handshakes\n   and session-resumption handshakes.\n \
    \  o  When a ClientHello is received, the server MUST check if it\n      includes\
    \ the TLS_EMPTY_RENEGOTIATION_INFO_SCSV SCSV.  If it does,\n      set the secure_renegotiation\
    \ flag to TRUE.\n   o  The server MUST check if the \"renegotiation_info\" extension\
    \ is\n      included in the ClientHello.  If the extension is present, set\n \
    \     secure_renegotiation flag to TRUE.  The server MUST then verify\n      that\
    \ the length of the \"renegotiated_connection\" field is zero,\n      and if it\
    \ is not, MUST abort the handshake.\n   o  If neither the TLS_EMPTY_RENEGOTIATION_INFO_SCSV\
    \ SCSV nor the\n      \"renegotiation_info\" extension was included, set the\n\
    \      secure_renegotiation flag to FALSE.  In this case, some servers\n     \
    \ may want to terminate the handshake instead of continuing; see\n      Section\
    \ 4.3 for discussion.\n   o  If the secure_renegotiation flag is set to TRUE,\
    \ the server MUST\n      include an empty \"renegotiation_info\" extension in\
    \ the ServerHello\n      message.\n   o  When the handshake has completed, the\
    \ server needs to save the\n      client_verify_data and server_verify_data values\
    \ for future use.\n   TLS servers implementing this specification MUST ignore\
    \ any unknown\n   extensions offered by the client and they MUST accept version\
    \ numbers\n   higher than their highest version number and negotiate the highest\n\
    \   common version.  These two requirements reiterate preexisting\n   requirements\
    \ in RFC 5246 and are merely stated here in the interest\n   of forward compatibility.\n\
    \   Note that sending a \"renegotiation_info\" extension in response to a\n  \
    \ ClientHello containing only the SCSV is an explicit exception to the\n   prohibition\
    \ in RFC 5246, Section 7.4.1.4, on the server sending\n   unsolicited extensions\
    \ and is only allowed because the client is\n   signaling its willingness to receive\
    \ the extension via the\n   TLS_EMPTY_RENEGOTIATION_INFO_SCSV SCSV.  TLS implementations\
    \ MUST\n   continue to comply with Section 7.4.1.4 for all other extensions.\n"
- title: '3.7.  Server Behavior: Secure Renegotiation'
  contents:
  - "3.7.  Server Behavior: Secure Renegotiation\n   This text applies if the connection's\
    \ \"secure_renegotiation\" flag is\n   set to TRUE (if it is set to FALSE, see\
    \ Section 4.4).\n   o  When a ClientHello is received, the server MUST verify\
    \ that it\n      does not contain the TLS_EMPTY_RENEGOTIATION_INFO_SCSV SCSV.\
    \  If\n      the SCSV is present, the server MUST abort the handshake.\n   o \
    \ The server MUST verify that the \"renegotiation_info\" extension is\n      present;\
    \ if it is not, the server MUST abort the handshake.\n   o  The server MUST verify\
    \ that the value of the\n      \"renegotiated_connection\" field is equal to the\
    \ saved\n      client_verify_data value; if it is not, the server MUST abort the\n\
    \      handshake.\n   o  The server MUST include a \"renegotiation_info\" extension\n\
    \      containing the saved client_verify_data and server_verify_data in\n   \
    \   the ServerHello.\n   o  When the handshake has completed, the server needs\
    \ to save the new\n      client_verify_data and server_verify_data values.\n"
- title: 4.  Backward Compatibility
  contents:
  - "4.  Backward Compatibility\n   Existing implementations that do not support this\
    \ extension are\n   widely deployed and, in general, must interoperate with newer\n\
    \   implementations that do support it.  This section describes\n   considerations\
    \ for backward compatible interoperation.\n"
- title: 4.1.  Client Considerations
  contents:
  - "4.1.  Client Considerations\n   If a client offers the \"renegotiation_info\"\
    \ extension or the\n   TLS_EMPTY_RENEGOTIATION_INFO_SCSV SCSV and the server does\
    \ not reply\n   with \"renegotiation_info\" in the ServerHello, then this indicates\n\
    \   that the server does not support secure renegotiation.  Because some\n   attacks\
    \ (see Section 1) look like a single handshake to the client,\n   the client cannot\
    \ determine whether or not the connection is under\n   attack.  Note, however,\
    \ that merely because the server does not\n   acknowledge the extension does not\
    \ mean that it is vulnerable; it\n   might choose to reject all renegotiations\
    \ and simply not signal it.\n   However, it is not possible for the client to\
    \ determine purely via\n   TLS mechanisms whether or not this is the case.\n \
    \  If clients wish to ensure that such attacks are impossible, they need\n   to\
    \ terminate the connection immediately upon failure to receive the\n   extension\
    \ without completing the handshake.  Such clients MUST\n   generate a fatal \"\
    handshake_failure\" alert prior to terminating the\n   connection.  However, it\
    \ is expected that many TLS servers that do\n   not support renegotiation (and\
    \ thus are not vulnerable) will not\n   support this extension either, so in general,\
    \ clients that implement\n   this behavior will encounter interoperability problems.\
    \  There is no\n   set of client behaviors that will guarantee security and achieve\n\
    \   maximum interoperability during the transition period.  Clients need\n   to\
    \ choose one or the other preference when dealing with potentially\n   un-upgraded\
    \ servers.\n"
- title: '4.2.  Client Behavior: Legacy (Insecure) Renegotiation'
  contents:
  - "4.2.  Client Behavior: Legacy (Insecure) Renegotiation\n   This text applies\
    \ if the connection's \"secure_renegotiation\" flag is\n   set to FALSE.\n   It\
    \ is possible that un-upgraded servers will request that the client\n   renegotiate.\
    \  It is RECOMMENDED that clients refuse this\n   renegotiation request.  Clients\
    \ that do so MUST respond to such\n   requests with a \"no_renegotiation\" alert\
    \ (RFC 5246 requires this\n   alert to be at the \"warning\" level).  It is possible\
    \ that the\n   apparently un-upgraded server is in fact an attacker who is then\n\
    \   allowing the client to renegotiate with a different, legitimate,\n   upgraded\
    \ server.  If clients nevertheless choose to renegotiate, they\n   MUST behave\
    \ as described below.\n   Clients that choose to renegotiate MUST provide either\
    \ the\n   TLS_EMPTY_RENEGOTIATION_INFO_SCSV SCSV or \"renegotiation_info\" in\n\
    \   their ClientHello.  In a legitimate renegotiation with an un-upgraded\n  \
    \ server, that server should ignore both of these signals.  However, if\n   the\
    \ server (incorrectly) fails to ignore extensions, sending the\n   \"renegotiation_info\"\
    \ extension may cause a handshake failure.  Thus,\n   it is permitted, though\
    \ NOT RECOMMENDED, for the client to simply\n   send the SCSV.  This is the only\
    \ situation in which clients are\n   permitted to not send the \"renegotiation_info\"\
    \ extension in a\n   ClientHello that is used for renegotiation.\n   Note that\
    \ in the case of a downgrade attack, if this is an initial\n   handshake from\
    \ the server's perspective, then use of the SCSV from\n   the client precludes\
    \ detection of this attack by the server (if this\n   is a renegotiation from\
    \ the server's perspective, then it will detect\n   the attack).  However, the\
    \ attack will be detected by the client when\n   the server sends an empty \"\
    renegotiation_info\" extension and the\n   client is expecting one containing\
    \ the previous verify_data.  By\n   contrast, if the client sends the \"renegotiation_info\"\
    \ extension,\n   then the server will immediately detect the attack.\n   When\
    \ the ServerHello is received, the client MUST verify that it does\n   not contain\
    \ the \"renegotiation_info\" extension.  If it does, the\n   client MUST abort\
    \ the handshake.  (Because the server has already\n   indicated it does not support\
    \ secure renegotiation, the only way that\n   this can happen is if the server\
    \ is broken or there is an attack.)\n"
- title: 4.3.  Server Considerations
  contents:
  - "4.3.  Server Considerations\n   If the client does not offer the \"renegotiation_info\"\
    \ extension or\n   the TLS_EMPTY_RENEGOTIATION_INFO_SCSV SCSV, then this indicates\
    \ that\n   the client does not support secure renegotiation.  Although the\n \
    \  attack described in Section 1 looks like two handshakes to the\n   server,\
    \ other attacks may be possible in which the renegotiation is\n   seen only by\
    \ the client.  If servers wish to ensure that such attacks\n   are impossible,\
    \ they need to terminate the connection immediately\n   upon failure to negotiate\
    \ the use of secure renegotiation.  Servers\n   that do choose to allow connections\
    \ from unpatched clients can still\n   prevent the attack described in Section\
    \ 1 by refusing to renegotiate\n   over those connections.\n   In order to enable\
    \ clients to probe, even servers that do not support\n   renegotiation MUST implement\
    \ the minimal version of the extension\n   described in this document for initial\
    \ handshakes, thus signaling\n   that they have been upgraded.\n"
- title: '4.4.  Server Behavior: Legacy (Insecure) Renegotiation'
  contents:
  - "4.4.  Server Behavior: Legacy (Insecure) Renegotiation\n   This text applies\
    \ if the connection's \"secure_renegotiation\" flag is\n   set to FALSE.\n   It\
    \ is RECOMMENDED that servers not permit legacy renegotiation.  If\n   servers\
    \ nevertheless do permit it, they MUST follow the requirements\n   in this section.\n\
    \   o  When a ClientHello is received, the server MUST verify that it\n      does\
    \ not contain the TLS_EMPTY_RENEGOTIATION_INFO_SCSV SCSV.  If\n      the SCSV\
    \ is present, the server MUST abort the handshake.\n   o  The server MUST verify\
    \ that the \"renegotiation_info\" extension is\n      not present; if it is, the\
    \ server MUST abort the handshake.\n"
- title: 4.5.  SSLv3
  contents:
  - "4.5.  SSLv3\n   While SSLv3 is not a protocol under IETF change control (see\n\
    \   [SSLv3]), it was the original basis for TLS and most TLS\n   implementations\
    \ also support SSLv3.  The IETF encourages SSLv3\n   implementations to adopt\
    \ the \"renegotiation_info\" extension and SCSV\n   as defined in this document.\
    \  The semantics of the SCSV and extension\n   are identical to TLS stacks except\
    \ for the size of the verify_data\n   values, which are 36 bytes long each.  Note\
    \ that this will require\n   adding at least minimal extension processing to such\
    \ stacks.  Clients\n   that support SSLv3 and offer secure renegotiation (either\
    \ via SCSV or\n   \"renegotiation_info\") MUST accept the \"renegotiation_info\"\
    \ extension\n   from the server, even if the server version is {0x03, 0x00}, and\n\
    \   behave as described in this specification.  TLS servers that support\n   secure\
    \ renegotiation and support SSLv3 MUST accept SCSV or the\n   \"renegotiation_info\"\
    \ extension and respond as described in this\n   specification even if the offered\
    \ client version is {0x03, 0x00}.\n   SSLv3 does not define the \"no_renegotiation\"\
    \ alert (and does\n   not offer a way to indicate a refusal to renegotiate at\
    \ a \"warning\"\n   level).  SSLv3 clients that refuse renegotiation SHOULD use\
    \ a fatal\n   handshake_failure alert.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   The extension described in this document prevents\
    \ an attack on TLS.\n   If this extension is not used, TLS renegotiation is subject\
    \ to an\n   attack in which the attacker can inject their own conversation with\n\
    \   the TLS server as a prefix to the client's conversation.  This attack\n  \
    \ is invisible to the client and looks like an ordinary renegotiation\n   to the\
    \ server.  The extension defined in this document allows\n   renegotiation to\
    \ be performed safely.  Servers SHOULD NOT allow\n   clients to renegotiate without\
    \ using this extension.  Many servers\n   can mitigate this attack simply by refusing\
    \ to renegotiate at all.\n   While this extension mitigates the man-in-the-middle\
    \ attack described\n   in the overview, it does not resolve all possible problems\
    \ an\n   application may face if it is unaware of renegotiation.  For example,\n\
    \   during renegotiation, either the client or the server can present a\n   different\
    \ certificate than was used earlier.  This may come as a\n   surprise to application\
    \ developers (who might have expected, for\n   example, that a \"getPeerCertificates()\"\
    \ API call returns the same\n   value if called twice), and might be handled in\
    \ an insecure way.\n   TLS implementations SHOULD provide a mechanism to disable\
    \ and enable\n   renegotiation.\n   TLS implementers are encouraged to clearly\
    \ document how renegotiation\n   interacts with the APIs offered to applications\
    \ (for example, which\n   API calls might return different values on different\
    \ calls, or which\n   callbacks might get called multiple times).\n   To make\
    \ life simpler for applications that use renegotiation but do\n   not expect the\
    \ certificate to change once it has been authenticated,\n   TLS implementations\
    \ may also wish to offer the applications the\n   option to abort the renegotiation\
    \ if the peer tries to authenticate\n   with a different certificate and/or different\
    \ server name (in the\n   server_name extension) than was used earlier.  TLS implementations\n\
    \   may alternatively offer the option to disable renegotiation once the\n   client\
    \ certificate has been authenticated.  However, enabling these\n   options by\
    \ default for all applications could break existing\n   applications that depend\
    \ on using renegotiation to change from one\n   certificate to another.  (For\
    \ example, long-lived TLS connections\n   could change to a renewed certificate;\
    \ or renegotiation could select\n   a different cipher suite that requires using\
    \ a different\n   certificate.)\n   Finally, designers of applications that depend\
    \ on renegotiation are\n   reminded that many TLS APIs represent application data\
    \ as a simple\n   octet stream; applications may not be able to determine exactly\
    \ which\n   application data octets were received before, during, or after\n \
    \  renegotiation.  Especially if the peer presents a different\n   certificate\
    \ during renegotiation, care is needed when specifying how\n   the application\
    \ should handle the data.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   IANA has added the extension code point 65281 (0xff01),\
    \ which has\n   been used for prototype implementations, for the \"renegotiation_info\"\
    \n   extension to the TLS ExtensionType values registry.\n   IANA has added TLS\
    \ cipher suite number 0x00,0xFF with name\n   TLS_EMPTY_RENEGOTIATION_INFO_SCSV\
    \ to the TLS Cipher Suite registry.\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   This vulnerability was originally discovered by Marsh\
    \ Ray and\n   independently rediscovered by Martin Rex.  The general concept behind\n\
    \   the extension described here was independently invented by Steve\n   Dispensa,\
    \ Nasko Oskov, and Eric Rescorla with refinements from Nelson\n   Bolyard, Pasi\
    \ Eronen, Michael D'Errico, Stephen Farrell, Michael\n   Gray, David-Sarah Hopwood,\
    \ Ben Laurie, David Makepeace, Bodo Moeller,\n   Martin Rex, Peter Robinson, Jesse\
    \ Walker, Nico Williams, and other\n   members of the Project Mogul team and the\
    \ TLS WG.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n\
    \              (TLS) Protocol Version 1.2\", RFC 5246, August 2008.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [RFC4347]  Rescorla, E. and N. Modadugu, \"\
    Datagram Transport Layer\n              Security\", RFC 4347, April 2006.\n  \
    \ [RFC5056]  Williams, N., \"On the Use of Channel Bindings to Secure\n      \
    \        Channels\", RFC 5056, November 2007.\n   [TLS-CHANNEL-BINDINGS]\n   \
    \           Altman, J., Williams, N., and L. Zhu, \"Channel Bindings\n       \
    \       for TLS\", Work in Progress, October 2009.\n   [RFC2818]  Rescorla, E.,\
    \ \"HTTP Over TLS\", RFC 2818, May 2000.\n   [RFC2965]  Kristol, D. and L. Montulli,\
    \ \"HTTP State Management\n              Mechanism\", RFC 2965, October 2000.\n\
    \   [Ray09]    Ray, M., \"Authentication Gap in TLS Renegotiation\",\n       \
    \       November 2009, <http://extendedsubset.com/?p=8>.\n   [SSLv3]    Freier,\
    \ A., Karlton, P., and P. Kocher, \"The SSL Protocol\n              Version 3.0\"\
    , Work in Progress, November 1996.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Eric Rescorla\n   RTFM, Inc.\n   2064 Edgewood Drive\n\
    \   Palo Alto, CA  94303\n   USA\n   EMail:  ekr@rtfm.com\n   Marsh Ray\n   PhoneFactor\n\
    \   7301 W 129th Street\n   Overland Park, KS  66213\n   USA\n   EMail:  marsh@extendedsubset.com\n\
    \   Steve Dispensa\n   PhoneFactor\n   7301 W 129th Street\n   Overland Park,\
    \ KS  66213\n   USA\n   EMail:  dispensa@phonefactor.com\n   Nasko Oskov\n   Microsoft\n\
    \   One Microsoft Way\n   Redmond, WA  98052\n   USA\n   EMail:  nasko.oskov@microsoft.com\n"
