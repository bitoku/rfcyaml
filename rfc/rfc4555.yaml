- title: __initial_text__
  contents:
  - '            IKEv2 Mobility and Multihoming Protocol (MOBIKE)

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the MOBIKE protocol, a mobility and\n  \
    \ multihoming extension to Internet Key Exchange (IKEv2).  MOBIKE\n   allows the\
    \ IP addresses associated with IKEv2 and tunnel mode IPsec\n   Security Associations\
    \ to change.  A mobile Virtual Private Network\n   (VPN) client could use MOBIKE\
    \ to keep the connection with the VPN\n   gateway active while moving from one\
    \ address to another.  Similarly,\n   a multihomed host could use MOBIKE to move\
    \ the traffic to a different\n   interface if, for instance, the one currently\
    \ being used stops\n   working.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n     1.1.  Motivation . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n     1.2.  Scope and Limitations  . . . . . . . . . . . . . .\
    \ . . . .  4\n     1.3.  Terminology and Notation . . . . . . . . . . . . . .\
    \ . . .  4\n   2.  Protocol Overview  . . . . . . . . . . . . . . . . . . . .\
    \ . .  5\n     2.1.  Basic Operation  . . . . . . . . . . . . . . . . . . . .\
    \ .  5\n     2.2.  Example Protocol Exchanges . . . . . . . . . . . . . . . .\
    \  6\n     2.3.  MOBIKE and Network Address Translation (NAT) . . . . . . .  9\n\
    \   3.  Protocol Exchanges . . . . . . . . . . . . . . . . . . . . . . 10\n  \
    \   3.1.  Initial IKE Exchange . . . . . . . . . . . . . . . . . . . 10\n    \
    \ 3.2.  Signaling Support for MOBIKE . . . . . . . . . . . . . . . 10\n     3.3.\
    \  Initial Tunnel Header Addresses  . . . . . . . . . . . . . 11\n     3.4.  Additional\
    \ Addresses . . . . . . . . . . . . . . . . . . . 11\n     3.5.  Changing Addresses\
    \ in IPsec SAs  . . . . . . . . . . . . . 12\n     3.6.  Updating Additional Addresses\
    \  . . . . . . . . . . . . . . 15\n     3.7.  Return Routability Check . . . .\
    \ . . . . . . . . . . . . . 17\n     3.8.  Changes in NAT Mappings  . . . . .\
    \ . . . . . . . . . . . . 18\n     3.9.  NAT Prohibition  . . . . . . . . . .\
    \ . . . . . . . . . . . 19\n     3.10. Path Testing . . . . . . . . . . . . .\
    \ . . . . . . . . . . 20\n     3.11. Failure Recovery and Timeouts  . . . . .\
    \ . . . . . . . . . 20\n     3.12. Dead Peer Detection  . . . . . . . . . . .\
    \ . . . . . . . . 20\n   4.  Payload Formats  . . . . . . . . . . . . . . . .\
    \ . . . . . . . 21\n     4.1.  Notify Messages - Error Types  . . . . . . . .\
    \ . . . . . . 21\n     4.2.  Notify Messages - Status Types . . . . . . . . .\
    \ . . . . . 21\n   5.  Security Considerations  . . . . . . . . . . . . . . .\
    \ . . . . 24\n     5.1.  Traffic Redirection and Hijacking  . . . . . . . . .\
    \ . . . 24\n     5.2.  IPsec Payload Protection . . . . . . . . . . . . . . .\
    \ . . 24\n     5.3.  Denial-of-Service Attacks against Third Parties  . . . .\
    \ . 25\n     5.4.  Spoofing Network Connectivity Indications  . . . . . . . .\
    \ 26\n     5.5.  Address and Topology Disclosure  . . . . . . . . . . . . . 27\n\
    \   6.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 28\n  \
    \ 7.  Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 29\n   8.\
    \  References . . . . . . . . . . . . . . . . . . . . . . . . . . 29\n     8.1.\
    \  Normative References . . . . . . . . . . . . . . . . . . . 29\n     8.2.  Informative\
    \ References . . . . . . . . . . . . . . . . . . 29\n   Appendix A.  Implementation\
    \ Considerations . . . . . . . . . . . . 31\n     A.1.  Links from SPD Cache to\
    \ Outbound SAD Entries . . . . . . . 31\n     A.2.  Creating Outbound SAs  . .\
    \ . . . . . . . . . . . . . . . . 31\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  Motivation
  contents:
  - "1.1.  Motivation\n   IKEv2 is used for performing mutual authentication, as well\
    \ as\n   establishing and maintaining IPsec Security Associations (SAs).  In\n\
    \   the base IKEv2 protocol [IKEv2], the IKE SAs and tunnel mode IPsec\n   SAs\
    \ are created implicitly between the IP addresses that are used\n   when the IKE_SA\
    \ is established.  These IP addresses are then used as\n   the outer (tunnel header)\
    \ addresses for tunnel mode IPsec packets\n   (transport mode IPsec SAs are beyond\
    \ the scope of this document).\n   Currently, it is not possible to change these\
    \ addresses after the\n   IKE_SA has been created.\n   There are scenarios where\
    \ these IP addresses might change.  One\n   example is mobility: a host changes\
    \ its point of network attachment\n   and receives a new IP address.  Another\
    \ example is a multihoming host\n   that would like to change to a different interface\
    \ if, for instance,\n   the currently used interface stops working for some reason.\n\
    \   Although the problem can be solved by creating new IKE and IPsec SAs\n   when\
    \ the addresses need to be changed, this may not be optimal for\n   several reasons.\
    \  In some cases, creating a new IKE_SA may require\n   user interaction for authentication,\
    \ such as entering a code from a\n   token card.  Creating new SAs often involves\
    \ expensive calculations\n   and possibly a large number of round-trips.  For\
    \ these reasons, a\n   mechanism for updating the IP addresses of existing IKE\
    \ and IPsec SAs\n   is needed.  The MOBIKE protocol described in this document\
    \ provides\n   such a mechanism.\n   The main scenario for MOBIKE is enabling\
    \ a remote access VPN user to\n   move from one address to another without re-establishing\
    \ all security\n   associations with the VPN gateway.  For instance, a user could\
    \ start\n   from fixed Ethernet in the office and then disconnect the laptop and\n\
    \   move to the office's wireless LAN.  When the user leaves the office,\n   the\
    \ laptop could start using General Packet Radio Service (GPRS);\n   when the user\
    \ arrives home, the laptop could switch to the home\n   wireless LAN.  MOBIKE\
    \ updates only the outer (tunnel header)\n   addresses of IPsec SAs, and the addresses\
    \ and other traffic selectors\n   used inside the tunnel stay unchanged.  Thus,\
    \ mobility can be\n   (mostly) invisible to applications and their connections\
    \ using the\n   VPN.\n   MOBIKE also supports more complex scenarios where the\
    \ VPN gateway\n   also has several network interfaces: these interfaces could\
    \ be\n   connected to different networks or ISPs, they may be a mix of IPv4\n\
    \   and IPv6 addresses, and the addresses may change over time.\n   Furthermore,\
    \ both parties could be VPN gateways relaying traffic for\n   other parties.\n"
- title: 1.2.  Scope and Limitations
  contents:
  - "1.2.  Scope and Limitations\n   This document focuses on the main scenario outlined\
    \ above and\n   supports only tunnel mode IPsec SAs.\n   The mobility support\
    \ in MOBIKE allows both parties to move, but does\n   not provide a \"rendezvous\"\
    \ mechanism that would allow simultaneous\n   movement of both parties or discovery\
    \ of the addresses when the\n   IKE_SA is first established.  Therefore, MOBIKE\
    \ is best suited for\n   situations where the address of at least one endpoint\
    \ is relatively\n   stable and can be discovered using existing mechanisms such\
    \ as DNS\n   (see Section 3.1).\n   MOBIKE allows both parties to be multihomed;\
    \ however, only one pair\n   of addresses is used for an SA at a time.  In particular,\
    \ load\n   balancing is beyond the scope of this specification.\n   MOBIKE follows\
    \ the IKEv2 practice where a response message is sent to\n   the same address\
    \ and port from which the request was received.  This\n   implies that MOBIKE\
    \ does not work over address pairs that provide\n   only unidirectional connectivity.\n\
    \   Network Address Translators (NATs) introduce additional limitations\n   beyond\
    \ those listed above.  For details, refer to Section 2.3.\n   The base version\
    \ of the MOBIKE protocol does not cover all potential\n   future use scenarios,\
    \ such as transport mode, application to securing\n   SCTP, or optimizations desirable\
    \ in specific circumstances.  Future\n   extensions may be defined later to support\
    \ additional requirements.\n   Please consult the MOBIKE design document [Design]\
    \ for further\n   information and rationale behind these limitations.\n"
- title: 1.3.  Terminology and Notation
  contents:
  - "1.3.  Terminology and Notation\n   When messages containing IKEv2 payloads are\
    \ described, optional\n   payloads are shown in brackets (for instance, \"[FOO]\"\
    ), and a plus\n   sign indicates that a payload can be repeated one or more times\
    \ (for\n   instance, \"FOO+\").  To provide context, some diagrams also show what\n\
    \   existing IKEv2 payloads would typically be included in the exchanges.\n  \
    \ These payloads are shown for illustrative purposes only; see [IKEv2]\n   for\
    \ an authoritative description.\n   When this document describes updating the\
    \ source/destination\n   addresses of an IPsec SA, it means updating IPsec-related\
    \ state so\n   that outgoing Encapsulating Security Payload (ESP)/Authentication\n\
    \   Header (AH) packets use those addresses in the tunnel header.\n   Depending\
    \ on how the nominal divisions between Security Association\n   Database (SAD),\
    \ Security Policy Database (SPD), and Peer\n   Authorization Database (PAD) described\
    \ in [IPsecArch] are actually\n   implemented, an implementation can have several\
    \ different places that\n   have to be updated.\n   In this document, the term\
    \ \"initiator\" means the party who originally\n   initiated the first IKE_SA\
    \ (in a series of possibly several rekeyed\n   IKE_SAs); \"responder\" is the\
    \ other peer.  During the lifetime of the\n   IKE_SA, both parties may initiate\
    \ INFORMATIONAL or CREATE_CHILD_SA\n   exchanges; in this case, the terms \"exchange\
    \ initiator\" and \"exchange\n   responder\" are used.  The term \"original initiator\"\
    \ (which in [IKEv2]\n   refers to the party who started the latest IKE_SA rekeying)\
    \ is not\n   used in this document.\n   The key words \"MUST\", \"MUST NOT\",\
    \ \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [KEYWORDS].\n"
- title: 2.  Protocol Overview
  contents:
  - '2.  Protocol Overview

    '
- title: 2.1.  Basic Operation
  contents:
  - "2.1.  Basic Operation\n   MOBIKE allows both parties to have several addresses,\
    \ and there are\n   up to N*M pairs of IP addresses that could potentially be\
    \ used.  The\n   decision of which of these pairs to use has to take into account\n\
    \   several factors.  First, the parties may have preferences about which\n  \
    \ interface should be used due to, for instance, performance and cost\n   reasons.\
    \  Second, the decision is constrained by the fact that some\n   of the pairs\
    \ may not work at all due to incompatible IP versions,\n   outages in the network,\
    \ problems at the local link at either end, and\n   so on.\n   MOBIKE solves this\
    \ problem by taking a simple approach: the party\n   that initiated the IKE_SA\
    \ (the \"client\" in a remote access VPN\n   scenario) is responsible for deciding\
    \ which address pair is used for\n   the IPsec SAs and for collecting the information\
    \ it needs to make\n   this decision (such as determining which address pairs\
    \ work or do not\n   work).  The other party (the \"gateway\" in a remote access\
    \ VPN\n   scenario) simply tells the initiator what addresses it has, but does\n\
    \   not update the IPsec SAs until it receives a message from the\n   initiator\
    \ to do so.  This approach applies to the addresses in the\n   IPsec SAs; in the\
    \ IKE_SA case, the exchange initiator can decide\n   which addresses are used.\n\
    \   Making the decision at the initiator is consistent with how normal\n   IKEv2\
    \ works: the initiator decides which addresses it uses when\n   contacting the\
    \ responder.  It also makes sense, especially when the\n   initiator is a mobile\
    \ node: it is in a better position to decide\n   which of its network interfaces\
    \ should be used for both upstream and\n   downstream traffic.\n   The details\
    \ of exactly how the initiator makes the decision, what\n   information is used\
    \ in making it, how the information is collected,\n   how preferences affect the\
    \ decision, and when a decision needs to be\n   changed are largely beyond the\
    \ scope of MOBIKE.  This does not mean\n   that these details are unimportant:\
    \ on the contrary, they are likely\n   to be crucial in any real system.  However,\
    \ MOBIKE is concerned with\n   these details only to the extent that they are\
    \ visible in IKEv2/IPsec\n   messages exchanged between the peers (and thus need\
    \ to be\n   standardized to ensure interoperability).\n   Many of these issues\
    \ are not specific to MOBIKE, but are common with\n   the use of existing hosts\
    \ in dynamic environments or with mobility\n   protocols such as Mobile IP [MIP4]\
    \ [MIP6].  A number of mechanisms\n   already exist or are being developed to\
    \ deal with these issues.  For\n   instance, link-layer and IP-layer mechanisms\
    \ can be used to track the\n   status of connectivity within the local link [RFC2461];\
    \ movement\n   detection is being specified for both IPv4 and IPv6 in [DNA4],\n\
    \   [DNA6], and so on.\n   Naturally, updating the addresses of IPsec SAs has\
    \ to take into\n   account several security considerations.  MOBIKE includes two\n\
    \   features designed to address these considerations.  First, a \"return\n  \
    \ routability\" check can be used to verify the addresses provided by\n   the\
    \ peer.  This makes it more difficult to flood third parties with\n   large amounts\
    \ of traffic.  Second, a \"NAT prohibition\" feature\n   ensures that IP addresses\
    \ have not been modified by NATs, IPv4/IPv6\n   translation agents, or other similar\
    \ devices.  This feature is\n   enabled only when NAT Traversal is not used.\n"
- title: 2.2.  Example Protocol Exchanges
  contents:
  - "2.2.  Example Protocol Exchanges\n   A simple MOBIKE exchange in a mobile scenario\
    \ is illustrated below.\n   The notation is based on [IKEv2], Section 1.2.  In\
    \ addition, the\n   source/destination IP addresses and ports are shown for each\
    \ packet:\n   here IP_I1, IP_I2, IP_R1, and IP_R2 represent IP addresses used\
    \ by\n   the initiator and the responder.\n      Initiator                  Responder\n\
    \     -----------                -----------\n   1) (IP_I1:500 -> IP_R1:500)\n\
    \      HDR, SAi1, KEi, Ni,\n           N(NAT_DETECTION_SOURCE_IP),\n         \
    \  N(NAT_DETECTION_DESTINATION_IP)  -->\n                            <--  (IP_R1:500\
    \ -> IP_I1:500)\n                                 HDR, SAr1, KEr, Nr,\n      \
    \                                N(NAT_DETECTION_SOURCE_IP),\n               \
    \                       N(NAT_DETECTION_DESTINATION_IP)\n   2) (IP_I1:4500 ->\
    \ IP_R1:4500)\n      HDR, SK { IDi, CERT, AUTH,\n                CP(CFG_REQUEST),\n\
    \                SAi2, TSi, TSr,\n                N(MOBIKE_SUPPORTED) }  -->\n\
    \                            <--  (IP_R1:4500 -> IP_I1:4500)\n               \
    \                  HDR, SK { IDr, CERT, AUTH,\n                              \
    \             CP(CFG_REPLY),\n                                           SAr2,\
    \ TSi, TSr,\n                                           N(MOBIKE_SUPPORTED) }\n\
    \   (Initiator gets information from lower layers that its attachment\n   point\
    \ and address have changed.)\n   3) (IP_I2:4500 -> IP_R1:4500)\n      HDR, SK\
    \ { N(UPDATE_SA_ADDRESSES),\n                N(NAT_DETECTION_SOURCE_IP),\n   \
    \             N(NAT_DETECTION_DESTINATION_IP) }  -->\n                       \
    \     <-- (IP_R1:4500 -> IP_I2:4500)\n                                HDR, SK\
    \ { N(NAT_DETECTION_SOURCE_IP),\n                                     N(NAT_DETECTION_DESTINATION_IP)\
    \ }\n   (Responder verifies that the initiator has given it a correct IP\n   address.)\n\
    \   4)                       <-- (IP_R1:4500 -> IP_I2:4500)\n                \
    \                HDR, SK { N(COOKIE2) }\n      (IP_I2:4500 -> IP_R1:4500)\n  \
    \    HDR, SK { N(COOKIE2) }  -->\n   Step 1 is the normal IKE_INIT exchange. \
    \ In step 2, the peers inform\n   each other that they support MOBIKE.  In step\
    \ 3, the initiator\n   notices a change in its own address, and informs the responder\
    \ about\n   this by sending an INFORMATIONAL request containing the\n   UPDATE_SA_ADDRESSES\
    \ notification.  The request is sent using the new\n   IP address.  At this point,\
    \ it also starts to use the new address as\n   a source address in its own outgoing\
    \ ESP traffic.  Upon receiving the\n   UPDATE_SA_ADDRESSES notification, the responder\
    \ records the new\n   address and, if it is required by policy, performs a return\n\
    \   routability check of the address.  When this check (step 4)\n   completes,\
    \ the responder starts to use the new address as the\n   destination for its outgoing\
    \ ESP traffic.\n   Another protocol run in a multihoming scenario is illustrated\
    \ below.\n   In this scenario, the initiator has one address but the responder\
    \ has\n   two.\n      Initiator                  Responder\n     ----------- \
    \               -----------\n   1) (IP_I1:500 -> IP_R1:500)\n      HDR, SAi1,\
    \ KEi, Ni,\n           N(NAT_DETECTION_SOURCE_IP),\n           N(NAT_DETECTION_DESTINATION_IP)\
    \  -->\n                            <--  (IP_R1:500 -> IP_I1:500)\n          \
    \                       HDR, SAr1, KEr, Nr,\n                                \
    \      N(NAT_DETECTION_SOURCE_IP),\n                                      N(NAT_DETECTION_DESTINATION_IP)\n\
    \   2) (IP_I1:4500 -> IP_R1:4500)\n      HDR, SK { IDi, CERT, AUTH,\n        \
    \        CP(CFG_REQUEST),\n                SAi2, TSi, TSr,\n                N(MOBIKE_SUPPORTED)\
    \ }  -->\n                            <--  (IP_R1:4500 -> IP_I1:4500)\n      \
    \                           HDR, SK { IDr, CERT, AUTH,\n                     \
    \                      CP(CFG_REPLY),\n                                      \
    \     SAr2, TSi, TSr,\n                                           N(MOBIKE_SUPPORTED),\n\
    \                                           N(ADDITIONAL_IP4_ADDRESS) }\n   (The\
    \ initiator suspects a problem in the currently used address pair\n   and probes\
    \ its liveness.)\n   3) (IP_I1:4500 -> IP_R1:4500)\n      HDR, SK { N(NAT_DETECTION_SOURCE_IP),\n\
    \                N(NAT_DETECTION_DESTINATION_IP) }  -->\n      (IP_I1:4500 ->\
    \ IP_R1:4500)\n      HDR, SK { N(NAT_DETECTION_SOURCE_IP),\n                N(NAT_DETECTION_DESTINATION_IP)\
    \ }  -->\n      ...\n   (Eventually, the initiator gives up on the current address\
    \ pair and\n   tests the other available address pair.)\n   4) (IP_I1:4500 ->\
    \ IP_R2:4500)\n      HDR, SK { N(NAT_DETECTION_SOURCE_IP),\n                N(NAT_DETECTION_DESTINATION_IP)\
    \ }\n                            <--  (IP_R2:4500 -> IP_I1:4500)\n           \
    \                      HDR, SK { N(NAT_DETECTION_SOURCE_IP),\n               \
    \                       N(NAT_DETECTION_DESTINATION_IP) }\n   (This worked, and\
    \ the initiator requests the peer to switch to new\n   addresses.)\n   5) (IP_I1:4500\
    \ -> IP_R2:4500)\n      HDR, SK { N(UPDATE_SA_ADDRESSES),\n                N(NAT_DETECTION_SOURCE_IP),\n\
    \                N(NAT_DETECTION_DESTINATION_IP),\n                N(COOKIE2)\
    \ }  -->\n                            <--  (IP_R2:4500 -> IP_I1:4500)\n      \
    \                           HDR, SK { N(NAT_DETECTION_SOURCE_IP),\n          \
    \                            N(NAT_DETECTION_DESTINATION_IP),\n              \
    \                        N(COOKIE2) }\n"
- title: 2.3.  MOBIKE and Network Address Translation (NAT)
  contents:
  - "2.3.  MOBIKE and Network Address Translation (NAT)\n   In some MOBIKE scenarios,\
    \ the network may contain NATs or stateful\n   packet filters (for brevity, the\
    \ rest of this document simply\n   describes NATs).  The NAT Traversal feature\
    \ specified in [IKEv2]\n   allows IKEv2 to work through NATs in many cases, and\
    \ MOBIKE can\n   leverage this functionality: when the addresses used for IPsec\
    \ SAs\n   are changed, MOBIKE can enable or disable IKEv2 NAT Traversal, as\n\
    \   needed.\n   Nevertheless, there are some limitations because NATs usually\n\
    \   introduce an asymmetry into the network: only packets coming from the\n  \
    \ \"inside\" cause state to be created.  This asymmetry leads to\n   restrictions\
    \ on what MOBIKE can do.  To give a concrete example,\n   consider a situation\
    \ where both peers have only a single address, and\n   the initiator is behind\
    \ a NAT.  If the responder's address now\n   changes, it needs to send a packet\
    \ to the initiator using its new\n   address.  However, if the NAT is, for instance,\
    \ of the common\n   \"restricted cone\" type (see [STUN] for one description of\
    \ different\n   NAT types), this is not possible.  The NAT will drop packets sent\n\
    \   from the new address (unless the initiator has previously sent a\n   packet\
    \ to that address -- which it cannot do until it knows the\n   address).\n   For\
    \ simplicity, MOBIKE does not attempt to handle all possible NAT-\n   related\
    \ scenarios.  Instead, MOBIKE assumes that if NATs are present,\n   the initiator\
    \ is the party \"behind\" the NAT, and the case where the\n   responder's addresses\
    \ change is not fully supported (meaning that no\n   special effort is made to\
    \ support this functionality).  Responders\n   may also be unaware of NATs or\
    \ specific types of NATs they are\n   behind.  However, when a change has occurred\
    \ that will cause a loss\n   of connectivity, MOBIKE responders will still attempt\
    \ to inform the\n   initiator of the change.  Depending on, for instance, the\
    \ exact type\n   of NAT, it may or may not succeed.  However, analyzing the exact\n\
    \   circumstances when this will or will not work is not done in this\n   document.\n"
- title: 3.  Protocol Exchanges
  contents:
  - '3.  Protocol Exchanges

    '
- title: 3.1.  Initial IKE Exchange
  contents:
  - "3.1.  Initial IKE Exchange\n   The initiator is responsible for finding a working\
    \ pair of addresses\n   so that the initial IKE exchange can be carried out. \
    \ Any information\n   from MOBIKE extensions will only be available later, when\
    \ the\n   exchange has progressed far enough.  Exactly how the addresses used\n\
    \   for the initial exchange are discovered is beyond the scope of this\n   specification;\
    \ typical sources of information include local\n   configuration and DNS.\n  \
    \ If either or both of the peers have multiple addresses, some\n   combinations\
    \ may not work.  Thus, the initiator SHOULD try various\n   source and destination\
    \ address combinations when retransmitting the\n   IKE_SA_INIT request.\n"
- title: 3.2.  Signaling Support for MOBIKE
  contents:
  - "3.2.  Signaling Support for MOBIKE\n   Implementations that wish to use MOBIKE\
    \ for a particular IKE_SA MUST\n   include a MOBIKE_SUPPORTED notification in\
    \ the IKE_AUTH exchange (in\n   case of multiple IKE_AUTH exchanges, in the message\
    \ containing the SA\n   payload).\n   The format of the MOBIKE_SUPPORTED notification\
    \ is described in\n   Section 4.\n"
- title: 3.3.  Initial Tunnel Header Addresses
  contents:
  - "3.3.  Initial Tunnel Header Addresses\n   When an IPsec SA is created, the tunnel\
    \ header IP addresses (and\n   port, if doing UDP encapsulation) are taken from\
    \ the IKE_SA, not the\n   IP header of the IKEv2 message requesting the IPsec\
    \ SA.  The\n   addresses in the IKE_SA are initialized from the IP header of the\n\
    \   first IKE_AUTH request.\n   The addresses are taken from the IKE_AUTH request\
    \ because IKEv2\n   requires changing from port 500 to 4500 if a NAT is discovered.\
    \  To\n   simplify things, implementations that support both this specification\n\
    \   and NAT Traversal MUST change to port 4500 if the correspondent also\n   supports\
    \ both, even if no NAT was detected between them (this way,\n   there is no need\
    \ to change the ports later if a NAT is detected on\n   some other path).\n"
- title: 3.4.  Additional Addresses
  contents:
  - "3.4.  Additional Addresses\n   Both the initiator and responder MAY include one\
    \ or more\n   ADDITIONAL_IP4_ADDRESS and/or ADDITIONAL_IP6_ADDRESS notifications\
    \ in\n   the IKE_AUTH exchange (in case of multiple IKE_AUTH exchanges, in the\n\
    \   message containing the SA payload).  Here \"ADDITIONAL_*_ADDRESS\"\n   means\
    \ either an ADDITIONAL_IP4_ADDRESS or an ADDITIONAL_IP6_ADDRESS\n   notification.\n\
    \      Initiator                  Responder\n     -----------                -----------\n\
    \      HDR, SK { IDi, [CERT], [IDr], AUTH,\n                [CP(CFG_REQUEST)]\n\
    \                SAi2, TSi, TSr,\n                N(MOBIKE_SUPPORTED),\n     \
    \           [N(ADDITIONAL_*_ADDRESS)+] }  -->\n                            <--\
    \  HDR, SK { IDr, [CERT], AUTH,\n                                           [CP(CFG_REPLY)],\n\
    \                                           SAr2, TSi, TSr,\n                \
    \                           N(MOBIKE_SUPPORTED)\n                            \
    \               [N(ADDITIONAL_*_ADDRESS)+] }\n   The recipient stores this information,\
    \ but no other action is taken\n   at this time.\n   Although both the initiator\
    \ and responder maintain a set of peer\n   addresses (logically associated with\
    \ the IKE_SA), it is important to\n   note that they use this information for\
    \ slightly different purposes.\n   The initiator uses the set of responder addresses\
    \ as an input to its\n   address selection policy; it may, at some later point,\
    \ decide to move\n   the IPsec traffic to one of these addresses using the procedure\n\
    \   described in Section 3.5.  The responder normally does not use the\n   set\
    \ of initiator addresses for anything: the addresses are used only\n   when the\
    \ responder's own addresses change (see Section 3.6).\n   The set of addresses\
    \ available to the peers can change during the\n   lifetime of the IKE_SA.  The\
    \ procedure for updating this information\n   is described in Section 3.6.\n \
    \  Note that if some of the initiator's interfaces are behind a NAT\n   (from\
    \ the responder's point of view), the addresses received by the\n   responder\
    \ will be incorrect.  This means the procedure for changing\n   responder addresses\
    \ described in Section 3.6 does not fully work when\n   the initiator is behind\
    \ a NAT.  For the same reason, the peers also\n   SHOULD NOT use this information\
    \ for any other purpose than what is\n   explicitly described either in this document\
    \ or a future\n   specification updating it.\n"
- title: 3.5.  Changing Addresses in IPsec SAs
  contents:
  - "3.5.  Changing Addresses in IPsec SAs\n   In MOBIKE, the initiator decides what\
    \ addresses are used in the IPsec\n   SAs.  That is, the responder does not normally\
    \ update any IPsec SAs\n   without receiving an explicit UPDATE_SA_ADDRESSES request\
    \ from the\n   initiator.  (As described below, the responder can, however, update\n\
    \   the IKE_SA in some circumstances.)\n   The reasons why the initiator wishes\
    \ to change the addresses are\n   largely beyond the scope of MOBIKE.  Typically,\
    \ triggers include\n   information received from lower layers, such as changes\
    \ in IP\n   addresses or link-down indications.  Some of this information can\
    \ be\n   unreliable: for instance, ICMP messages could be spoofed by an\n   attacker.\
    \  Unreliable information SHOULD be treated only as a hint\n   that there might\
    \ be a problem, and the initiator SHOULD trigger Dead\n   Peer Detection (that\
    \ is, send an INFORMATIONAL request) to determine\n   if the current path is still\
    \ usable.\n   Changing addresses can also be triggered by events within IKEv2.\
    \  At\n   least the following events can cause the initiator to re-evaluate its\n\
    \   local address selection policy, possibly leading to changing the\n   addresses.\n\
    \   o  An IKEv2 request has been re-transmitted several times, but no\n      valid\
    \ reply has been received.  This suggests the current path is\n      no longer\
    \ working.\n   o  An INFORMATIONAL request containing an ADDITIONAL_IP4_ADDRESS,\n\
    \      ADDITIONAL_IP6_ADDRESS, or NO_ADDITIONAL_ADDRESSES notification is\n  \
    \    received.  This means the peer's addresses may have changed.  This\n    \
    \  is particularly important if the announced set of addresses no\n      longer\
    \ contains the currently used address.\n   o  An UNACCEPTABLE_ADDRESSES notification\
    \ is received as a response\n      to address update request (described below).\n\
    \   o  The initiator receives a NAT_DETECTION_DESTINATION_IP notification\n  \
    \    that does not match the previous UPDATE_SA_ADDRESSES response (see\n    \
    \  Section 3.8 for a more detailed description).\n   The description in the rest\
    \ of this section assumes that the\n   initiator has already decided what the\
    \ new addresses should be.  When\n   this decision has been made, the initiator:\n\
    \   o  Updates the IKE_SA with the new addresses, and sets the\n      \"pending_update\"\
    \ flag in the IKE_SA.\n   o  Updates the IPsec SAs associated with this IKE_SA\
    \ with the new\n      addresses (unless the initiator's policy requires a return\n\
    \      routability check before updating the IPsec SAs, and the check has\n  \
    \    not been done for this responder address yet).\n   o  If the IPsec SAs were\
    \ updated in the previous step: If NAT\n      Traversal is not enabled, and the\
    \ responder supports NAT Traversal\n      (as indicated by NAT detection payloads\
    \ in the IKE_SA_INIT\n      exchange), and the initiator either suspects or knows\
    \ that a NAT\n      is likely to be present, enables NAT Traversal (that is, enables\n\
    \      UDP encapsulation of outgoing ESP packets and sending of NAT-\n      Keepalive\
    \ packets).\n   o  If there are outstanding IKEv2 requests (requests for which\
    \ the\n      initiator has not yet received a reply), continues retransmitting\n\
    \      them using the addresses in the IKE_SA (the new addresses).\n   o  When\
    \ the window size allows, sends an INFORMATIONAL request\n      containing the\
    \ UPDATE_SA_ADDRESSES notification (which does not\n      contain any data), and\
    \ clears the \"pending_update\" flag.  The\n      request will be as follows:\n\
    \      Initiator                  Responder\n     -----------                -----------\n\
    \      HDR, SK { N(UPDATE_SA_ADDRESSES),\n                [N(NAT_DETECTION_SOURCE_IP),\n\
    \                 N(NAT_DETECTION_DESTINATION_IP)],\n                [N(NO_NATS_ALLOWED)],\n\
    \                [N(COOKIE2)] } -->\n   o  If a new address change occurs while\
    \ waiting for the response,\n      starts again from the first step (and ignores\
    \ responses to this\n      UPDATE_SA_ADDRESSES request).\n   When processing an\
    \ INFORMATIONAL request containing the\n   UPDATE_SA_ADDRESSES notification, the\
    \ responder:\n   o  Determines whether it has already received a newer\n     \
    \ UPDATE_SA_ADDRESSES request than this one (if the responder uses a\n      window\
    \ size greater than one, it is possible that requests are\n      received out\
    \ of order).  If it has, a normal response message\n      (described below) is\
    \ sent, but no other action is taken.\n   o  If the NO_NATS_ALLOWED notification\
    \ is present, processes it as\n      described in Section 3.9.\n   o  Checks that\
    \ the (source IP address, destination IP address) pair\n      in the IP header\
    \ is acceptable according to local policy.  If it\n      is not, replies with\
    \ a message containing the\n      UNACCEPTABLE_ADDRESSES notification (and possibly\
    \ COOKIE2).\n   o  Updates the IP addresses in the IKE_SA with the values from\
    \ the IP\n      header.  (Using the address from the IP header is consistent with\n\
    \      normal IKEv2, and allows IKEv2 to work with NATs without needing\n    \
    \  unilateral self-address fixing [UNSAF].)\n   o  Replies with an INFORMATIONAL\
    \ response:\n      Initiator                  Responder\n     -----------    \
    \            -----------\n                            <--  HDR, SK { [N(NAT_DETECTION_SOURCE_IP),\n\
    \                                      N(NAT_DETECTION_DESTINATION_IP)],\n   \
    \                                   [N(COOKIE2)] }\n   o  If necessary, initiates\
    \ a return routability check for the new\n      initiator address (see Section\
    \ 3.7) and waits until the check is\n      completed.\n   o  Updates the IPsec\
    \ SAs associated with this IKE_SA with the new\n      addresses.\n   o  If NAT\
    \ Traversal is supported and NAT detection payloads were\n      included, enables\
    \ or disables NAT Traversal.\n   When the initiator receives the reply:\n   o\
    \  If an address change has occurred after the request was first\n      sent,\
    \ no MOBIKE processing is done for the reply message because a\n      new UPDATE_SA_ADDRESSES\
    \ is going to be sent (or has already been\n      sent, if window size greater\
    \ than one is in use).\n   o  If the response contains the UNEXPECTED_NAT_DETECTED\
    \ notification,\n      the initiator processes the response as described in Section\
    \ 3.9.\n   o  If the response contains an UNACCEPTABLE_ADDRESSES notification,\n\
    \      the initiator MAY select another addresses and retry the exchange,\n  \
    \    keep on using the previously used addresses, or disconnect.\n   o  It updates\
    \ the IPsec SAs associated with this IKE_SA with the new\n      addresses (unless\
    \ this was already done earlier before sending the\n      request; this is the\
    \ case when no return routability check was\n      required).\n   o  If NAT Traversal\
    \ is supported and NAT detection payloads were\n      included, the initiator\
    \ enables or disables NAT Traversal.\n   There is one exception to the rule that\
    \ the responder never updates\n   any IPsec SAs without receiving an UPDATE_SA_ADDRESSES\
    \ request.  If\n   the source address that the responder is currently using becomes\n\
    \   unavailable (i.e., sending packets using that source address is no\n   longer\
    \ possible), the responder is allowed to update the IPsec SAs to\n   use some\
    \ other address (in addition to initiating the procedure\n   described in the\
    \ next section).\n"
- title: 3.6.  Updating Additional Addresses
  contents:
  - "3.6.  Updating Additional Addresses\n   As described in Section 3.4, both the\
    \ initiator and responder can\n   send a list of additional addresses in the IKE_AUTH\
    \ exchange.  This\n   information can be updated by sending an INFORMATIONAL exchange\n\
    \   request message that contains either one or more\n   ADDITIONAL_IP4_ADDRESS/ADDITIONAL_IP6_ADDRESS\
    \ notifications or the\n   NO_ADDITIONAL_ADDRESSES notification.\n   If the exchange\
    \ initiator has only a single IP address, it is placed\n   in the IP header, and\
    \ the message contains the\n   NO_ADDITIONAL_ADDRESSES notification.  If the exchange\
    \ initiator has\n   several addresses, one of them is placed in the IP header,\
    \ and the\n   rest in ADDITIONAL_IP4_ADDRESS/ADDITIONAL_IP6_ADDRESS notifications.\n\
    \   The new list of addresses replaces the old information (in other\n   words,\
    \ there are no separate add/delete operations; instead, the\n   complete list\
    \ is sent every time these notifications are used).\n   The message exchange will\
    \ look as follows:\n      Initiator                  Responder\n     -----------\
    \                -----------\n      HDR, SK { [N(ADDITIONAL_*_ADDRESS)+],\n  \
    \              [N(NO_ADDITIONAL_ADDRESSES)],\n                [N(NO_NATS_ALLOWED)],\n\
    \                [N(COOKIE2)] }  -->\n                            <--  HDR, SK\
    \ { [N(COOKIE2)] }\n   When a request containing an ADDITIONAL_IP4_ADDRESS,\n\
    \   ADDITIONAL_IP6_ADDRESS, or NO_ADDITIONAL_ADDRESSES notification is\n   received,\
    \ the exchange responder:\n   o  Determines whether it has already received a\
    \ newer request to\n      update the addresses (if a window size greater than\
    \ one is used,\n      it is possible that the requests are received out of order).\
    \  If\n      it has, a response message is sent, but the address set is not\n\
    \      updated.\n   o  If the NO_NATS_ALLOWED notification is present, processes\
    \ it as\n      described in Section 3.9.\n   o  Updates the set of peer addresses\
    \ based on the IP header and the\n      ADDITIONAL_IP4_ADDRESS, ADDITIONAL_IP6_ADDRESS,\
    \ and\n      NO_ADDITIONAL_ADDRESSES notifications.\n   o  Sends a response.\n\
    \   The initiator MAY include these notifications in the same request as\n   UPDATE_SA_ADDRESSES.\n\
    \   If the request to update the addresses is retransmitted using several\n  \
    \ different source addresses, a new INFORMATIONAL request MUST be sent.\n   There\
    \ is one additional complication: when the responder wants to\n   update the address\
    \ set, the currently used addresses may no longer\n   work.  In this case, the\
    \ responder uses the additional address list\n   received from the initiator,\
    \ and the list of its own addresses, to\n   determine which addresses to use for\
    \ sending the INFORMATIONAL\n   request.  This is the only time the responder\
    \ uses the additional\n   address list received from the initiator.\n   Note that\
    \ both peers can have their own policies about what addresses\n   are acceptable\
    \ to use, and certain types of policies may simplify\n   implementation.  For\
    \ instance, if the responder has a single fixed\n   address, it does not need\
    \ to process the ADDITIONAL_IP4_ADDRESS and\n   ADDITIONAL_IP6_ADDRESS notifications\
    \ it receives (beyond ignoring\n   unrecognized status notifications, as already\
    \ required in [IKEv2]).\n   Furthermore, if the initiator has a policy saying\
    \ that only the\n   responder address specified in local configuration is acceptable,\
    \ it\n   does not have to send its own additional addresses to the responder\n\
    \   (since the responder does not need them except when changing its own\n   address).\n"
- title: 3.7.  Return Routability Check
  contents:
  - "3.7.  Return Routability Check\n   Both parties can optionally verify that the\
    \ other party can actually\n   receive packets at the claimed address.  By default,\
    \ this \"return\n   routability check\" SHOULD be performed.  In environments\
    \ where the\n   peer is expected to be well-behaved (many corporate VPNs, for\n\
    \   instance), or the address can be verified by some other means (e.g.,\n   a\
    \ certificate issued by an authority trusted for this purpose), the\n   return\
    \ routability check MAY be omitted.\n   The check can be done before updating\
    \ the IPsec SAs, immediately\n   after updating them, or continuously during the\
    \ connection.  By\n   default, the return routability check SHOULD be done before\
    \ updating\n   the IPsec SAs, but in some environments it MAY be postponed until\n\
    \   after the IPsec SAs have been updated.\n   Any INFORMATIONAL exchange can\
    \ be used for return routability\n   purposes, with one exception (described later\
    \ in this section): when\n   a valid response is received, we know the other party\
    \ can receive\n   packets at the claimed address.\n   To ensure that the peer\
    \ cannot generate the correct INFORMATIONAL\n   response without seeing the request,\
    \ a new payload is added to\n   INFORMATIONAL messages.  The sender of an INFORMATIONAL\
    \ request MAY\n   include a COOKIE2 notification, and if included, the recipient\
    \ of an\n   INFORMATIONAL request MUST copy the notification as-is to the\n  \
    \ response.  When processing the response, the original sender MUST\n   verify\
    \ that the value is the same one as sent.  If the values do not\n   match, the\
    \ IKE_SA MUST be closed.  (See also Section 4.2.5 for the\n   format of the COOKIE2\
    \ notification.)\n   The exception mentioned earlier is as follows: If the same\n\
    \   INFORMATIONAL request has been sent to several different addresses\n   (i.e.,\
    \ the destination address in the IKE_SA has been updated after\n   the request\
    \ was first sent), receiving the INFORMATIONAL response\n   does not tell which\
    \ address is the working one.  In this case, a new\n   INFORMATIONAL request needs\
    \ to be sent to check return routability.\n"
- title: 3.8.  Changes in NAT Mappings
  contents:
  - "3.8.  Changes in NAT Mappings\n   IKEv2 performs Dead Peer Detection (DPD) if\
    \ there has recently been\n   only outgoing traffic on all of the SAs associated\
    \ with the IKE_SA.\n   In MOBIKE, these messages can also be used to detect if\
    \ NAT mappings\n   have changed (for example, if the keepalive interval is too\
    \ long, or\n   the NAT box is rebooted).  More specifically, if both peers support\n\
    \   both this specification and NAT Traversal, the\n   NAT_DETECTION_SOURCE_IP\
    \ and NAT_DETECTION_DESTINATION_IP\n   notifications MAY be included in any INFORMATIONAL\
    \ request; if the\n   request includes them, the responder MUST also include them\
    \ in the\n   response (but no other action is taken, unless otherwise specified).\n\
    \   When the initiator is behind a NAT (as detected earlier using the\n   NAT_DETECTION_SOURCE_IP\
    \ and NAT_DETECTION_DESTINATION_IP\n   notifications), it SHOULD include these\
    \ notifications in DPD messages\n   and compare the received NAT_DETECTION_DESTINATION_IP\
    \ notifications\n   with the value from the previous UPDATE_SA_ADDRESSES response\
    \ (or the\n   IKE_SA_INIT response).  If the values do not match, the IP address\n\
    \   and/or port seen by the responder has changed, and the initiator\n   SHOULD\
    \ send UPDATE_SA_ADDRESSES as described in Section 3.5.  If the\n   initiator\
    \ suspects that the NAT mapping has changed, it MAY also skip\n   the detection\
    \ step and send UPDATE_SA_ADDRESSES immediately.  This\n   saves one roundtrip\
    \ if the NAT mapping has indeed changed.\n   Note that this approach to detecting\
    \ NAT mapping changes may cause an\n   extra address update when the IKE_SA is\
    \ rekeyed.  This is because the\n   NAT_DETECTION_DESTINATION_IP hash also includes\
    \ the IKE Security\n   Parameter Indexes (SPIs), which change when performing\
    \ rekeying.\n   This unnecessary update is harmless, however.\n   When MOBIKE\
    \ is in use, the dynamic updates (specified in [IKEv2],\n   Section 2.23), where\
    \ the peer address and port are updated from the\n   last valid authenticated\
    \ packet, work in a slightly different\n   fashion.  The host not behind a NAT\
    \ MUST NOT use these dynamic\n   updates for IKEv2 packets, but MAY use them for\
    \ ESP packets.  This\n   ensures that an INFORMATIONAL exchange that does not\
    \ contain\n   UPDATE_SA_ADDRESSES does not cause any changes, allowing it to be\n\
    \   used for, e.g., testing whether a particular path works.\n"
- title: 3.9.  NAT Prohibition
  contents:
  - "3.9.  NAT Prohibition\n   Basic IKEv2/IPsec without NAT Traversal support may\
    \ work across some\n   types of one-to-one \"basic\" NATs and IPv4/IPv6 translation\
    \ agents in\n   tunnel mode.  This is because the IKEv2 integrity checksum does\
    \ not\n   cover the addresses in the IP header.  This may be considered a\n  \
    \ problem in some circumstances, because in some sense any modification\n   of\
    \ the IP addresses can be considered an attack.\n   This specification addresses\
    \ the issue by protecting the IP addresses\n   when NAT Traversal has not been\
    \ explicitly enabled.  This means that\n   MOBIKE without NAT Traversal support\
    \ will not work if the paths\n   contain NATs, IPv4/IPv6 translation agents, or\
    \ other nodes that\n   modify the addresses in the IP header.  This feature is\
    \ mainly\n   intended for IPv6 and site-to-site VPN cases, where the\n   administrators\
    \ may know beforehand that NATs are not present, and\n   thus any modification\
    \ to the packet can be considered an attack.\n   More specifically, when NAT Traversal\
    \ is not enabled, all messages\n   that can update the addresses associated with\
    \ the IKE_SA and/or IPsec\n   SAs (the first IKE_AUTH request and all INFORMATIONAL\
    \ requests that\n   contain any of the following notifications: UPDATE_SA_ADDRESSES,\n\
    \   ADDITIONAL_IP4_ADDRESS, ADDITIONAL_IP6_ADDRESS,\n   NO_ADDITIONAL_ADDRESSES)\
    \ MUST also include a NO_NATS_ALLOWED\n   notification.  The exchange responder\
    \ MUST verify that the contents\n   of the NO_NATS_ALLOWED notification match\
    \ the addresses in the IP\n   header.  If they do not match, a response containing\
    \ an\n   UNEXPECTED_NAT_DETECTED notification is sent.  The response message\n\
    \   is sent to the address and port that the corresponding request came\n   from,\
    \ not to the address contained in the NO_NATS_ALLOWED\n   notification.\n   If\
    \ the exchange initiator receives an UNEXPECTED_NAT_DETECTED\n   notification\
    \ in response to its INFORMATIONAL request, it SHOULD\n   retry the operation\
    \ several times using new INFORMATIONAL requests.\n   Similarly, if the initiator\
    \ receives UNEXPECTED_NAT_DETECTED in the\n   IKE_AUTH exchange, it SHOULD retry\
    \ IKE_SA establishment several\n   times, starting from a new IKE_SA_INIT request.\
    \  This ensures that an\n   attacker who is able to modify only a single packet\
    \ does not\n   unnecessarily cause a path to remain unused.  The exact number\
    \ of\n   retries is not specified in this document because it does not affect\n\
    \   interoperability.  However, because the IKE message will also be\n   rejected\
    \ if the attacker modifies the integrity checksum field, a\n   reasonable number\
    \ here would be the number of retries that is being\n   used for normal retransmissions.\n\
    \   If an UNEXPECTED_NAT_DETECTED notification is sent, the exchange\n   responder\
    \ MUST NOT use the contents of the NO_NATS_ALLOWED\n   notification for any other\
    \ purpose than possibly logging the\n   information for troubleshooting purposes.\n"
- title: 3.10.  Path Testing
  contents:
  - "3.10.  Path Testing\n   IKEv2 Dead Peer Detection allows the peers to detect\
    \ if the currently\n   used path has stopped working.  However, if either of the\
    \ peers has\n   several addresses, Dead Peer Detection alone does not tell which\
    \ of\n   the other paths might work.\n   If required by its address selection\
    \ policy, the initiator can use\n   normal IKEv2 INFORMATIONAL request/response\
    \ messages to test whether\n   a certain path works.  Implementations MAY do path\
    \ testing even if\n   the path currently being used is working to, for example,\
    \ detect when\n   a better (but previously unavailable) path becomes available.\n"
- title: 3.11.  Failure Recovery and Timeouts
  contents:
  - "3.11.  Failure Recovery and Timeouts\n   In MOBIKE, the initiator is responsible\
    \ for detecting and recovering\n   from most failures.\n   To give the initiator\
    \ enough time to detect the error, the responder\n   SHOULD use relatively long\
    \ timeout intervals when, for instance,\n   retransmitting IKEv2 requests or deciding\
    \ whether to initiate Dead\n   Peer Detection.  While no specific timeout lengths\
    \ are required, it\n   is suggested that responders continue retransmitting IKEv2\
    \ requests\n   for at least five minutes before giving up.\n"
- title: 3.12.  Dead Peer Detection
  contents:
  - "3.12.  Dead Peer Detection\n   MOBIKE uses the same Dead Peer Detection method\
    \ as normal IKEv2, but\n   as addresses may change, it is not sufficient to just\
    \ verify that the\n   peer is alive, but also that it is synchronized with the\
    \ address\n   updates and has not, for instance, ignored an address update due\
    \ to\n   failure to complete return routability test.  This means that when\n\
    \   there are incoming IPsec packets, MOBIKE nodes SHOULD inspect the\n   addresses\
    \ used in those packets and determine that they correspond to\n   those that should\
    \ be employed.  If they do not, such packets SHOULD\n   NOT be used as evidence\
    \ that the peer is able to communicate with\n   this node and or that the peer\
    \ has received all address updates.\n"
- title: 4.  Payload Formats
  contents:
  - "4.  Payload Formats\n   This specification defines several new IKEv2 Notify payload\
    \ types.\n   See [IKEv2], Section 3.10, for a general description of the Notify\n\
    \   payload.\n"
- title: 4.1.  Notify Messages - Error Types
  contents:
  - '4.1.  Notify Messages - Error Types

    '
- title: 4.1.1.  UNACCEPTABLE_ADDRESSES Notify Payload
  contents:
  - "4.1.1.  UNACCEPTABLE_ADDRESSES Notify Payload\n   The responder can include this\
    \ notification in an INFORMATIONAL\n   exchange response to indicate that the\
    \ address change in the\n   corresponding request message (which contained an\
    \ UPDATE_SA_ADDRESSES\n   notification) was not carried out.\n   The Notify Message\
    \ Type for UNACCEPTABLE_ADDRESSES is 40.  The\n   Protocol ID and SPI Size fields\
    \ are set to zero.  There is no data\n   associated with this Notify type.\n"
- title: 4.1.2.  UNEXPECTED_NAT_DETECTED Notify Payload
  contents:
  - "4.1.2.  UNEXPECTED_NAT_DETECTED Notify Payload\n   See Section 3.9 for a description\
    \ of this notification.\n   The Notify Message Type for UNEXPECTED_NAT_DETECTED\
    \ is 41.  The\n   Protocol ID and SPI Size fields are set to zero.  There is no\
    \ data\n   associated with this Notify type.\n"
- title: 4.2.  Notify Messages - Status Types
  contents:
  - '4.2.  Notify Messages - Status Types

    '
- title: 4.2.1.  MOBIKE_SUPPORTED Notify Payload
  contents:
  - "4.2.1.  MOBIKE_SUPPORTED Notify Payload\n   The MOBIKE_SUPPORTED notification\
    \ is included in the IKE_AUTH\n   exchange to indicate that the implementation\
    \ supports this\n   specification.\n   The Notify Message Type for MOBIKE_SUPPORTED\
    \ is 16396.  The Protocol\n   ID and SPI Size fields are set to zero.  The notification\
    \ data field\n   MUST be left empty (zero-length) when sending, and its contents\
    \ (if\n   any) MUST be ignored when this notification is received.  This allows\n\
    \   the field to be used by future versions of this protocol.\n"
- title: 4.2.2.  ADDITIONAL_IP4_ADDRESS and ADDITIONAL_IP6_ADDRESS Notify
  contents:
  - "4.2.2.  ADDITIONAL_IP4_ADDRESS and ADDITIONAL_IP6_ADDRESS Notify\n        Payloads\n\
    \   Both parties can include ADDITIONAL_IP4_ADDRESS and/or\n   ADDITIONAL_IP6_ADDRESS\
    \ notifications in the IKE_AUTH exchange and\n   INFORMATIONAL exchange request\
    \ messages; see Section 3.4 and\n   Section 3.6 for more detailed description.\n\
    \   The Notify Message Types for ADDITIONAL_IP4_ADDRESS and\n   ADDITIONAL_IP6_ADDRESS\
    \ are 16397 and 16398, respectively.  The\n   Protocol ID and SPI Size fields\
    \ are set to zero.  The data associated\n   with these Notify types is either\
    \ a four-octet IPv4 address or a\n   16-octet IPv6 address.\n"
- title: 4.2.3.  NO_ADDITIONAL_ADDRESSES Notify Payload
  contents:
  - "4.2.3.  NO_ADDITIONAL_ADDRESSES Notify Payload\n   The NO_ADDITIONAL_ADDRESSES\
    \ notification can be included in an\n   INFORMATIONAL exchange request message\
    \ to indicate that the exchange\n   initiator does not have addresses beyond the\
    \ one used in the exchange\n   (see Section 3.6 for more detailed description).\n\
    \   The Notify Message Type for NO_ADDITIONAL_ADDRESSES is 16399.  The\n   Protocol\
    \ ID and SPI Size fields are set to zero.  There is no data\n   associated with\
    \ this Notify type.\n"
- title: 4.2.4.  UPDATE_SA_ADDRESSES Notify Payload
  contents:
  - "4.2.4.  UPDATE_SA_ADDRESSES Notify Payload\n   This notification is included\
    \ in INFORMATIONAL exchange requests sent\n   by the initiator to update addresses\
    \ of the IKE_SA and IPsec SAs (see\n   Section 3.5).\n   The Notify Message Type\
    \ for UPDATE_SA_ADDRESSES is 16400.  The\n   Protocol ID and SPI Size fields are\
    \ set to zero.  There is no data\n   associated with this Notify type.\n"
- title: 4.2.5.  COOKIE2 Notify Payload
  contents:
  - "4.2.5.  COOKIE2 Notify Payload\n   This notification MAY be included in any INFORMATIONAL\
    \ request for\n   return routability check purposes (see Section 3.7).  If the\n\
    \   INFORMATIONAL request includes COOKIE2, the exchange responder MUST\n   copy\
    \ the notification to the response message.\n   The data associated with this\
    \ notification MUST be between 8 and 64\n   octets in length (inclusive), and\
    \ MUST be chosen by the exchange\n   initiator in a way that is unpredictable\
    \ to the exchange responder.\n   The Notify Message Type for this message is 16401.\
    \  The Protocol ID\n   and SPI Size fields are set to zero.\n"
- title: 4.2.6.  NO_NATS_ALLOWED Notify Payload
  contents:
  - "4.2.6.  NO_NATS_ALLOWED Notify Payload\n   See Section 3.9 for a description\
    \ of this notification.\n   The Notify Message Type for this message is 16402.\
    \  The notification\n   data contains the IP addresses and ports from/to which\
    \ the packet was\n   sent.  For IPv4, the notification data is 12 octets long\
    \ and is\n   defined as follows:\n                           1               \
    \    2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !                      Source IPv4 address                      !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      !\
    \                   Destination IPv4 address                    !\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !          Source port          !       Destination port        !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   For\
    \ IPv6, the notification data is 36 octets long and is defined as\n   follows:\n\
    \                           1                   2                   3\n      \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !                                                               !\n   \
    \   !                      Source IPv6 address                      !\n      !\
    \                                                               !\n      !   \
    \                                                            !\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !                                                               !\n   \
    \   !                   Destination IPv6 address                    !\n      !\
    \                                                               !\n      !   \
    \                                                            !\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !          Source port          !       Destination port        !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The\
    \ Protocol ID and SPI Size fields are set to zero.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   The main goals of this specification are to maintain\
    \ the security\n   offered by usual IKEv2 procedures and to counter mobility-related\n\
    \   threats in an appropriate manner.  This section describes new\n   security\
    \ considerations introduced by MOBIKE.  See [IKEv2] for\n   security considerations\
    \ for IKEv2 in general.\n"
- title: 5.1.  Traffic Redirection and Hijacking
  contents:
  - "5.1.  Traffic Redirection and Hijacking\n   MOBIKE payloads relating to updating\
    \ addresses are encrypted,\n   integrity protected, and replay protected using\
    \ the IKE_SA.  This\n   assures that no one except the participants can, for instance,\
    \ give a\n   control message to change the addresses.\n   However, as with normal\
    \ IKEv2, the actual IP addresses in the IP\n   header are not covered by the integrity\
    \ protection.  This means that\n   a NAT between the parties (or an attacker acting\
    \ as a NAT) can modify\n   the addresses and cause incorrect tunnel header (outer)\
    \ IP addresses\n   to be used for IPsec SAs.  The scope of this attack is limited\
    \ mainly\n   to denial of service because all traffic is protected using IPsec.\n\
    \   This attack can only be launched by on-path attackers that are\n   capable\
    \ of modifying IKEv2 messages carrying NAT detection payloads\n   (such as Dead\
    \ Peer Detection messages).  By modifying the IP header\n   of these packets,\
    \ the attackers can lead the peers to believe a new\n   NAT or a changed NAT binding\
    \ exists between them.  The attack can\n   continue as long as the attacker is\
    \ on the path, modifying the IKEv2\n   messages.  If this is no longer the case,\
    \ IKEv2 and MOBIKE mechanisms\n   designed to detect NAT mapping changes will\
    \ eventually recognize that\n   the intended traffic is not getting through, and\
    \ will update the\n   addresses appropriately.\n   MOBIKE introduces the NO_NATS_ALLOWED\
    \ notification that is used to\n   detect modification, by outsiders, of the addresses\
    \ in the IP header.\n   When this notification is used, communication through\
    \ NATs and other\n   address translators is impossible, so it is sent only when\
    \ not doing\n   NAT Traversal.  This feature is mainly intended for IPv6 and site-to-\n\
    \   site VPN cases, where the administrators may know beforehand that\n   NATs\
    \ are not present.\n"
- title: 5.2.  IPsec Payload Protection
  contents:
  - "5.2.  IPsec Payload Protection\n   The use of IPsec protection on payload traffic\
    \ protects the\n   participants against disclosure of the contents of the traffic,\n\
    \   should the traffic end up in an incorrect destination or be subject\n   to\
    \ eavesdropping.\n   However, security associations originally created for the\
    \ protection\n   of a specific flow between specific addresses may be updated\
    \ by\n   MOBIKE later on.  This has to be taken into account if the (outer) IP\n\
    \   address of the peer was used when deciding what kind of IPsec SAs the\n  \
    \ peer is allowed to create.\n   For instance, the level of required protection\
    \ might depend on the\n   current location of the VPN client, or access might\
    \ be allowed only\n   from certain IP addresses.\n   It is recommended that security\
    \ policies, for peers that are allowed\n   to use MOBIKE, are configured in a\
    \ manner that takes into account\n   that a single security association can be\
    \ used at different times\n   through paths of varying security properties.\n\
    \   This is especially critical for traffic selector authorization.  The\n   (logical)\
    \ Peer Authorization Database (PAD) contains the information\n   used by IKEv2\
    \ when determining what kind of IPsec SAs a peer is\n   allowed to create.  This\
    \ process is described in [IPsecArch], Section\n   4.4.3.  When a peer requests\
    \ the creation of an IPsec SA with some\n   traffic selectors, the PAD must contain\
    \ \"Child SA Authorization Data\"\n   linking the identity authenticated by IKEv2\
    \ and the addresses\n   permitted for traffic selectors.  See also [Clarifications]\
    \ for a\n   more extensive discussion.\n   It is important to note that simply\
    \ sending IKEv2 packets using some\n   particular address does not automatically\
    \ imply a permission to\n   create IPsec SAs with that address in the traffic\
    \ selectors.\n   However, some implementations are known to use policies where\
    \ simply\n   being reachable at some address X implies a temporary permission\
    \ to\n   create IPsec SAs for address X.  Here \"being reachable\" usually means\n\
    \   the ability to send (or spoof) IP packets with source address X and\n   receive\
    \ (or eavesdrop) packets sent to X.\n   Using this kind of policies or extensions\
    \ with MOBIKE may need\n   special care to enforce the temporary nature of the\
    \ permission.  For\n   example, when the peer moves to some other address Y (and\
    \ is no\n   longer reachable at X), it might be necessary to close IPsec SAs with\n\
    \   traffic selectors matching X.  However, these interactions are beyond\n  \
    \ the scope of this document.\n"
- title: 5.3.  Denial-of-Service Attacks against Third Parties
  contents:
  - "5.3.  Denial-of-Service Attacks against Third Parties\n   Traffic redirection\
    \ may be performed not just to gain access to the\n   traffic or to deny service\
    \ to the peers, but also to cause a denial-\n   of-service attack on a third party.\
    \  For instance, a high-speed TCP\n   session or a multimedia stream may be redirected\
    \ towards a victim\n   host, causing its communications capabilities to suffer.\n\
    \   The attackers in this threat can be either outsiders or even one of\n   the\
    \ IKEv2 peers.  In usual VPN usage scenarios, attacks by the peers\n   can be\
    \ easily dealt with if the authentication performed in the\n   initial IKEv2 negotiation\
    \ can be traced to persons who can be held\n   responsible for the attack.  This\
    \ may not be the case in all\n   scenarios, particularly with opportunistic approaches\
    \ to security.\n   If the attack is launched by an outsider, the traffic flow\
    \ would\n   normally stop soon due to the lack of responses (such as transport\n\
    \   layer acknowledgements).  However, if the original recipient of the\n   flow\
    \ is malicious, it could maintain the traffic flow for an extended\n   period\
    \ of time, since it often would be able to send the required\n   acknowledgements\
    \ (see [Aura02] for more discussion).\n   It should also be noted, as shown in\
    \ [Bombing], that without ingress\n   filtering in the attacker's network, such\
    \ attacks are already\n   possible simply by sending spoofed packets from the\
    \ attacker to the\n   victim directly.  Furthermore, if the attacker's network\
    \ has ingress\n   filtering, this attack is largely prevented for MOBIKE as well.\n\
    \   Consequently, it makes little sense to protect against attacks of\n   similar\
    \ nature in MOBIKE.  However, it still makes sense to limit the\n   amplification\
    \ capabilities provided to attackers, so that they cannot\n   use stream redirection\
    \ to send a large number of packets to the\n   victim by sending just a few packets\
    \ themselves.\n   This specification includes return routability tests to limit\
    \ the\n   duration of any \"third party bombing\" attacks by off-path (relative\n\
    \   to the victim) attackers.  The tests are authenticated messages that\n   the\
    \ peer has to respond to, and can be performed before the address\n   change takes\
    \ effect, immediately afterwards, or even periodically\n   during the session.\
    \  The tests contain unpredictable data, and only\n   someone who has the keys\
    \ associated with the IKE SA and has seen the\n   request packet can properly\
    \ respond to the test.\n   The duration of the attack can also be limited if the\
    \ victim reports\n   the unwanted traffic to the originating IPsec tunnel endpoint\
    \ using\n   ICMP error messages or INVALID_SPI notifications.  As described in\n\
    \   [IKEv2], Section 2.21, this SHOULD trigger a liveness test, which\n   also\
    \ doubles as a return routability check if the COOKIE2\n   notification is included.\n"
- title: 5.4.  Spoofing Network Connectivity Indications
  contents:
  - "5.4.  Spoofing Network Connectivity Indications\n   Attackers may spoof various\
    \ indications from lower layers and the\n   network in an effort to confuse the\
    \ peers about which addresses are\n   or are not working.  For example, attackers\
    \ may spoof link-layer\n   error messages in an effort to cause the parties to\
    \ move their\n   traffic elsewhere or even to disconnect.  Attackers may also\
    \ spoof\n   information related to network attachments, router discovery, and\n\
    \   address assignments in an effort to make the parties believe they\n   have\
    \ Internet connectivity when, in reality, they do not.\n   This may cause use\
    \ of non-preferred addresses or even denial of\n   service.\n   MOBIKE does not\
    \ provide any protection of its own for indications\n   from other parts of the\
    \ protocol stack.  These vulnerabilities can be\n   mitigated through the use\
    \ of techniques specific to the other parts\n   of the stack, such as validation\
    \ of ICMP errors [ICMPAttacks], link\n   layer security, or the use of [SEND]\
    \ to protect IPv6 Router and\n   Neighbor Discovery.\n   Ultimately, MOBIKE depends\
    \ on the delivery of IKEv2 messages to\n   determine which paths can be used.\
    \  If IKEv2 messages sent using a\n   particular source and destination addresses\
    \ reach the recipient and a\n   reply is received, MOBIKE will usually consider\
    \ the path working; if\n   no reply is received even after retransmissions, MOBIKE\
    \ will suspect\n   the path is broken.  An attacker who can consistently control\
    \ the\n   delivery or non-delivery of the IKEv2 messages in the network can\n\
    \   thus influence which addresses actually get used.\n"
- title: 5.5.  Address and Topology Disclosure
  contents:
  - "5.5.  Address and Topology Disclosure\n   MOBIKE address updates and the ADDITIONAL_IP4_ADDRESS/\n\
    \   ADDITIONAL_IP6_ADDRESS notifications reveal information about which\n   networks\
    \ the peers are connected to.\n   For example, consider a host A with two network\
    \ interfaces: a\n   cellular connection and a wired Ethernet connection to a company\
    \ LAN.\n   If host A now contacts host B using IKEv2 and sends\n   ADDITIONAL_IP4_ADDRESS/ADDITIONAL_IP6_ADDRESS\
    \ notifications, host B\n   receives additional information it might not otherwise\
    \ know.  If host\n   A used the cellular connection for the IKEv2 traffic, host\
    \ B can also\n   see the company LAN address (and perhaps further guess that host\
    \ A is\n   used by an employee of that company).  If host A used the company LAN\n\
    \   to make the connection, host B can see that host A has a subscription\n  \
    \ from this particular cellular operator.\n   These additional addresses can also\
    \ disclose more accurate location\n   information than just a single address.\
    \  Suppose that host A uses its\n   cellular connection for IKEv2 traffic, but\
    \ also sends an\n   ADDITIONAL_IP4_ADDRESS notification containing an IP address\n\
    \   corresponding to, say, a wireless LAN at a particular coffee shop\n   location.\
    \  It is likely that host B can now make a much better guess\n   at A's location\
    \ than would be possible based on the cellular IP\n   address alone.\n   Furthermore,\
    \ as described in Section 3.4, some of the addresses could\n   also be private\
    \ addresses behind a NAT.\n   In many environments, disclosing address information\
    \ is not a problem\n   (and indeed it cannot be avoided if the hosts wish to use\
    \ those\n   addresses for IPsec traffic).  For instance, a remote access VPN\n\
    \   client could consider the corporate VPN gateway sufficiently\n   trustworthy\
    \ for this purpose.  Furthermore, the\n   ADDITIONAL_IP4_ADDRESS and ADDITIONAL_IP6_ADDRESS\
    \ notifications are\n   sent encrypted, so the addresses are not visible to eavesdroppers\n\
    \   (unless, of course, they are later used for sending IKEv2/IPsec\n   traffic).\n\
    \   However, if MOBIKE is used in some more opportunistic approach, it\n   can\
    \ be desirable to limit the information that is sent.  Naturally,\n   the peers\
    \ do not have to disclose any addresses they do not want to\n   use for IPsec\
    \ traffic.  Also, as noted in Section 3.6, an initiator\n   whose policy is to\
    \ always use the locally configured responder\n   address does not have to send\
    \ any ADDITIONAL_IP4_ADDRESS/\n   ADDITIONAL_IP6_ADDRESS payloads.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   This document does not create any new namespaces\
    \ to be maintained by\n   IANA, but it requires new values in namespaces that\
    \ have been defined\n   in the IKEv2 base specification [IKEv2].\n   This document\
    \ defines several new IKEv2 notifications whose values\n   have been allocated\
    \ from the \"IKEv2 Notify Message Types\" namespace.\n      Notify Messages -\
    \ Error Types     Value\n      -----------------------------     -----\n     \
    \ UNACCEPTABLE_ADDRESSES            40\n      UNEXPECTED_NAT_DETECTED        \
    \   41\n      Notify Messages - Status Types    Value\n      ------------------------------\
    \    -----\n      MOBIKE_SUPPORTED                  16396\n      ADDITIONAL_IP4_ADDRESS\
    \            16397\n      ADDITIONAL_IP6_ADDRESS            16398\n      NO_ADDITIONAL_ADDRESSES\
    \           16399\n      UPDATE_SA_ADDRESSES               16400\n      COOKIE2\
    \                           16401\n      NO_NATS_ALLOWED                   16402\n\
    \   These notifications are described in Section 4.\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   This document is a collaborative effort of the entire\
    \ MOBIKE WG.  We\n   would particularly like to thank Jari Arkko, Tuomas Aura,\
    \ Marcelo\n   Bagnulo, Stephane Beaulieu, Elwyn Davies, Lakshminath Dondeti,\n\
    \   Francis Dupont, Paul Hoffman, James Kempf, Tero Kivinen, Pete McCann,\n  \
    \ Erik Nordmark, Mohan Parthasarathy, Pekka Savola, Bill Sommerfeld,\n   Maureen\
    \ Stillman, Shinta Sugimoto, Hannes Tschofenig, and Sami\n   Vaarala.  This document\
    \ also incorporates ideas and text from earlier\n   MOBIKE-like protocol proposals,\
    \ including [AddrMgmt], [Kivinen],\n   [MOPO], and [SMOBIKE], and the MOBIKE design\
    \ document [Design].\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [IKEv2]           Kaufman, C., \"Internet Key\
    \ Exchange (IKEv2)\n                     Protocol\", RFC 4306, December 2005.\n\
    \   [IPsecArch]       Kent, S. and K. Seo, \"Security Architecture for the\n \
    \                    Internet Protocol\", RFC 4301, December 2005.\n   [KEYWORDS]\
    \        Bradner, S., \"Key words for use in RFCs to Indicate\n              \
    \       Requirement Levels\", RFC 2119, March 1997.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [AddrMgmt]        Dupont, F., \"Address Management\
    \ for IKE version 2\",\n                     Work in Progress, November 2005.\n\
    \   [Aura02]          Aura, T., Roe, M., and J. Arkko, \"Security of\n       \
    \              Internet Location Management\",  Proc. 18th Annual\n          \
    \           Computer Security Applications Conference (ACSAC),\n             \
    \        December 2002.\n   [Bombing]         Dupont, F., \"A note about 3rd party\
    \ bombing in\n                     Mobile IPv6\", Work in Progress, December 2005.\n\
    \   [Clarifications]  Eronen, P. and P. Hoffman, \"IKEv2 Clarifications\n    \
    \                 and Implementation Guidelines\", Work in Progress,\n       \
    \              February 2006.\n   [DNA4]            Aboba, B., Carlson, J., and\
    \ S. Cheshire, \"Detecting\n                     Network Attachment in IPv4 (DNAv4)\"\
    , RFC 4436,\n                     March 2006.\n   [DNA6]            Narayanan,\
    \ S., Daley, G., and N. Montavont,\n                     \"Detecting Network Attachment\
    \ in IPv6 - Best\n                     Current Practices for hosts\", Work in\
    \ Progress,\n                     October 2005.\n   [Design]          Kivinen,\
    \ T. and H. Tschofenig, \"Design of the\n                     MOBIKE protocol\"\
    , Work in Progress, January 2006.\n   [ICMPAttacks]     Gont, F., \"ICMP attacks\
    \ against TCP\", Work in\n                     Progress, October 2005.\n   [Kivinen]\
    \         Kivinen, T., \"MOBIKE protocol\", Work in Progress,\n              \
    \       February 2004.\n   [MIP4]            Perkins, C., \"IP Mobility Support\
    \ for IPv4\",\n                     RFC 3344, August 2002.\n   [MIP6]        \
    \    Johnson, D., Perkins, C., and J. Arkko, \"Mobility\n                    \
    \ Support in IPv6\", RFC 3775, June 2004.\n   [MOPO]            Eronen, P., \"\
    Mobility Protocol Options for IKEv2\n                     (MOPO-IKE)\", Work in\
    \ Progress, February 2005.\n   [RFC2461]         Narten, T., Nordmark, E., and\
    \ W. Simpson, \"Neighbor\n                     Discovery for IP Version 6 (IPv6)\"\
    , RFC 2461,\n                     December 1998.\n   [SEND]            Arkko,\
    \ J., Kempf, J., Zill, B., and P. Nikander,\n                     \"SEcure Neighbor\
    \ Discovery (SEND)\", RFC 3971,\n                     March 2005.\n   [SMOBIKE]\
    \         Eronen, P. and H. Tschofenig, \"Simple Mobility and\n              \
    \       Multihoming Extensions for IKEv2 (SMOBIKE)\",\n                     Work\
    \ in Progress, March 2004.\n   [STUN]            Rosenberg, J., Weinberger, J.,\
    \ Huitema, C., and R.\n                     Mahy, \"STUN - Simple Traversal of\
    \ User Datagram\n                     Protocol (UDP) Through Network Address Translators\n\
    \                     (NATs)\", RFC 3489, March 2003.\n   [UNSAF]           Daigle,\
    \ L., \"IAB Considerations for UNilateral\n                     Self-Address Fixing\
    \ (UNSAF) Across Network Address\n                     Translation\", RFC 3424,\
    \ November 2002.\n"
- title: Appendix A.  Implementation Considerations
  contents:
  - 'Appendix A.  Implementation Considerations

    '
- title: A.1.  Links from SPD Cache to Outbound SAD Entries
  contents:
  - "A.1.  Links from SPD Cache to Outbound SAD Entries\n   [IPsecArch], Section 4.4.2,\
    \ says that \"For outbound processing, each\n   SAD entry is pointed to by entries\
    \ in the SPD-S part of the SPD\n   cache\".  The document does not specify how\
    \ exactly this \"pointing\" is\n   done, since this is an implementation detail\
    \ that does not have to be\n   standardized.\n   However, it is clear that the\
    \ links between the SPD cache and the SAD\n   have to be done correctly to ensure\
    \ that outbound packets are sent\n   over the right SA.  Some implementations\
    \ are known to have problems\n   in this area.\n   In particular, simply storing\
    \ the (remote tunnel header IP address,\n   remote SPI) pair in the SPD cache\
    \ is not sufficient, since the pair\n   does not always uniquely identify a single\
    \ SAD entry.  For instance,\n   two hosts behind the same NAT can accidentally\
    \ happen to choose the\n   same SPI value.  The situation can also occur when\
    \ a host is assigned\n   an IP address previously used by some other host, and\
    \ the SAs\n   associated with the old host have not yet been deleted by Dead Peer\n\
    \   Detection.  This may lead to packets being sent over the wrong SA or,\n  \
    \ if the key management daemon ensures the pair is unique, denying the\n   creation\
    \ of otherwise valid SAs.\n   Storing the remote tunnel header IP address in the\
    \ SPD cache may also\n   complicate the implementation of MOBIKE, since the address\
    \ can change\n   during the lifetime of the SA.  Thus, we recommend implementing\
    \ the\n   links between the SPD cache and the SAD in a way that does not\n   require\
    \ modification when the tunnel header IP address is updated by\n   MOBIKE.\n"
- title: A.2.  Creating Outbound SAs
  contents:
  - "A.2.  Creating Outbound SAs\n   When an outbound packet requires IPsec processing\
    \ but no suitable SA\n   exists, a new SA will be created.  In this case, the\
    \ host has to\n   determine (1) who is the right peer for this SA, (2) whether\
    \ the host\n   already has an IKE_SA with this peer, and (3) if no IKE_SA exists,\n\
    \   the IP address(es) of the peer for contacting it.\n   Neither [IPsecArch]\
    \ nor MOBIKE specifies how exactly these three\n   steps are carried out.  [IPsecArch],\
    \ Section 4.4.3.4, says:\n      For example, assume that IKE A receives an outbound\
    \ packet\n      destined for IP address X, a host served by a security gateway.\n\
    \      RFC 2401 [RFC2401] and this document do not specify how A\n      determines\
    \ the address of the IKE peer serving X.  However, any\n      peer contacted by\
    \ A as the presumed representative for X must be\n      registered in the PAD\
    \ in order to allow the IKE exchange to be\n      authenticated.  Moreover, when\
    \ the authenticated peer asserts that\n      it represents X in its traffic selector\
    \ exchange, the PAD will be\n      consulted to determine if the peer in question\
    \ is authorized to\n      represent X.\n   In step 1, there may be more than one\
    \ possible peer (e.g., several\n   security gateways that are allowed to represent\
    \ X).  In step 3, the\n   host may need to consult a directory such as DNS to\
    \ determine the\n   peer IP address(es).\n   When performing these steps, implementations\
    \ may use information\n   contained in the SPD, the PAD, and possibly some other\n\
    \   implementation-specific databases.  Regardless of how exactly the\n   steps\
    \ are implemented, it is important to remember that IP addresses\n   can change,\
    \ and that an IP address alone does not always uniquely\n   identify a single\
    \ IKE peer (for the same reasons as why the\n   combination of the remote IP address\
    \ and SPI does not uniquely\n   identify an outbound IPsec SA; see Appendix A.1).\
    \  Thus, in steps 1\n   and 2 it may be easier to identify the \"right peer\"\
    \ using its\n   authenticated identity instead of its current IP address.  However,\n\
    \   these implementation details are beyond the scope of this\n   specification.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Pasi Eronen (editor)\n   Nokia Research Center\n   P.O.\
    \ Box 407\n   FIN-00045 Nokia Group\n   Finland\n   EMail: pasi.eronen@nokia.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
