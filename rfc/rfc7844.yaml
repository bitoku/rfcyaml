- contents:
  - '                  Anonymity Profiles for DHCP Clients

    '
  title: __initial_text__
- contents:
  - "Abstract\n   Some DHCP options carry unique identifiers.  These identifiers can\n
    \  enable device tracking even if the device administrator takes care of\n   randomizing
    other potential identifications like link-layer addresses\n   or IPv6 addresses.
    \ The anonymity profiles are designed for clients\n   that wish to remain anonymous
    to the visited network.  The profiles\n   provide guidelines on the composition
    of DHCP or DHCPv6 messages,\n   designed to minimize disclosure of identifying
    information.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7844.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n
    \     1.1. Requirements ...............................................4\n   2.
    Application Domain ..............................................4\n      2.1.
    MAC Address Randomization Hypotheses .......................5\n      2.2. MAC
    Address Randomization and DHCP .........................6\n      2.3. Radio Fingerprinting
    .......................................6\n      2.4. Operating System Fingerprinting
    ............................7\n      2.5. No Anonymity Profile Identification
    ........................7\n      2.6. Using the Anonymity Profiles ...............................8\n
    \     2.7. What about privacy for DHCP servers? .......................9\n   3.
    Anonymity Profile for DHCPv4 ....................................9\n      3.1.
    Avoiding Fingerprinting ...................................10\n      3.2. Client
    IP Address Field ...................................10\n      3.3. Requested IP
    Address Option ...............................11\n      3.4. Client Hardware Address
    Field .............................12\n      3.5. Client Identifier Option ..................................12\n
    \     3.6. Parameter Request List Option .............................13\n      3.7.
    Host Name Option ..........................................13\n      3.8. Client
    FQDN Option ........................................14\n      3.9. UUID/GUID-Based
    Client Machine Identifier Option ..........15\n      3.10. User and Vendor Class
    DHCP Options .......................15\n   4. Anonymity Profile for DHCPv6 ...................................15\n
    \     4.1. Avoiding Fingerprinting ...................................16\n      4.2.
    Do not send Confirm messages, unless really sure about\n           the location
    ..............................................17\n      4.3. Client Identifier
    DHCPv6 Option ...........................17\n           4.3.1. Anonymous Information-request
    ......................18\n      4.4. Server Identifier Option ..................................18\n
    \     4.5. Address Assignment Options ................................18\n           4.5.1.
    Obtain Temporary Addresses .........................19\n           4.5.2. Prefix
    Delegation ..................................20\n      4.6. Option Request Option
    .....................................20\n           4.6.1. Previous Option Values
    .............................20\n      4.7. Authentication Option .....................................21\n
    \     4.8. User and Vendor Class DHCPv6 Options ......................21\n      4.9.
    Client FQDN DHCPv6 Option .................................21\n   5. Operational
    Considerations .....................................21\n   6. Security Considerations
    ........................................22\n   7. References .....................................................22\n
    \     7.1. Normative References ......................................22\n      7.2.
    Informative References ....................................23\n   Acknowledgments
    ...................................................26\n   Authors' Addresses ................................................26\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   There have been reports of systems that would monitor the
    wireless\n   connections of passengers at Canadian airports [CNBC].  We can assume\n
    \  that these are either fragments or trial runs of a wider system that\n   would
    attempt to monitor Internet users as they roam through wireless\n   access points
    and other temporary network attachments.  We can also\n   assume that privacy-conscious
    users will attempt to evade this\n   monitoring -- for example, by ensuring that
    low-level identifiers\n   such as link-layer addresses are \"randomized\", so
    that the devices\n   do not broadcast the same unique identifier in every location
    that\n   they visit.\n   Of course, link-layer MAC (Media Access Control) addresses
    are not\n   the only way to identify a device.  As soon as it connects to a\n
    \  remote network, the device may use DHCP and DHCPv6 to obtain network\n   parameters.
    \ The analysis of DHCP and DHCPv6 options shows that\n   parameters of these protocols
    can reveal identifiers of the device,\n   negating the benefits of link-layer
    address randomization.  This is\n   documented in detail in [RFC7819] and [RFC7824].
    \ The natural\n   reaction is to restrict the number and values of such parameters
    in\n   order to minimize disclosure.\n   In the absence of a common standard,
    different system developers are\n   likely to implement this minimization of disclosure
    in different\n   ways.  Monitoring entities could then use the differences to
    identify\n   the software version running on the device.  The proposed anonymity\n
    \  profiles provide a common standard that minimizes information\n   disclosure,
    including the disclosure of implementation identifiers.\n"
  - contents:
    - "1.1.  Requirements\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
      and \"OPTIONAL\" in this\n   document are to be interpreted as described in
      [RFC2119].\n"
    title: 1.1.  Requirements
  title: 1.  Introduction
- contents:
  - "2.  Application Domain\n   Mobile nodes can be tracked using multiple identifiers,
    the most\n   prominent being link-layer addresses, a.k.a. MAC addresses.  For\n
    \  example, when devices use Wi-Fi connectivity, they place the MAC\n   address
    in the header of all the packets that they transmit.\n   Standard implementations
    of Wi-Fi use unique 48-bit link-layer\n   addresses, assigned to the devices according
    to procedures defined by\n   IEEE 802.  Even when the Wi-Fi packets are encrypted,
    the portion of\n   the header containing the addresses will be sent in cleartext.\n
    \  Tracking devices can \"listen to the airwaves\" to find out what\n   devices
    are transmitting near them.\n   We can easily imagine that the MAC addresses can
    be correlated with\n   other data, e.g., cleartext names and cookies, to build
    a registry\n   linking MAC addresses to the identity of devices' owners.  Once
    that\n   correlation is done, tracking the MAC address is sufficient to track\n
    \  individual people, even when all application data sent from the\n   devices
    is encrypted.  Link-layer addresses can also be correlated\n   with IP addresses
    of devices, negating the potential privacy benefits\n   of IPv6 \"privacy\" addresses.
    \ Privacy advocates have reasons to be\n   concerned.\n   The obvious solution
    is to \"randomize\" the MAC address.  Before\n   connecting to a particular network,
    the device replaces the MAC\n   address with a randomly drawn 48-bit value.  Link-layer
    address\n   randomization was successfully tried at the IETF meeting in Honolulu\n
    \  in November 2014 [IETFMACRandom] and in subsequent meetings\n   [IETFTrialsAndMore];
    it is studied in the IEEE 802 EC Privacy\n   Recommendation Study Group [IEEE802PRSG].
    \ However, we have to\n   consider the linkage between link-layer addresses, DHCP
    identifiers,\n   and IP addresses.\n"
  - contents:
    - "2.1.  MAC Address Randomization Hypotheses\n   There is not yet an established
      standard for randomizing link-layer\n   addresses.  Various prototypes have
      tried different strategies,\n   such as:\n   Per connection:  Configure a random
      link-layer address at the time of\n      connecting to a network, e.g., to a
      specific Wi-Fi SSID (Service\n      Set Identifier), and keep it for the duration
      of the connection.\n   Per network:  Same as \"per connection\", but always
      use the same\n      link-layer address for the same network -- different, of
      course,\n      from the addresses used in other networks.\n   Time interval:
      \ Change the link-layer address at regular time\n      intervals.\n   In practice,
      there are many reasons to keep the link-layer address\n   constant for the duration
      of a link-layer connection, as in the\n   \"per connection\" or \"per network\"
      variants.  In Wi-Fi networks,\n   changing the link-layer address requires dropping
      the existing Wi-Fi\n   connection and then re-establishing it, which implies
      repeating the\n   connection process and associated procedures.  The IP addresses
      will\n   change, which means that all required TCP connections will have to
      be\n   re-established.  If the network access is provided through a NAT,\n   changing
      IP addresses also means that the NAT traversal procedures\n   will have to be
      restarted.  This means a lot of disruption.  At the\n   same time, an observer
      on the network will easily notice that a\n   station left, another came in just
      after that, and the new one\n   appears to be communicating with the same set
      of IP addresses as the\n   old one.  This provides for easy correlation.\n   The
      anonymity profiles pretty much assume that the link-layer address\n   randomization
      follows the \"per connection\" or \"per network\"\n   strategies, or a variant
      of the \"time interval\" strategy in which the\n   interval has about the same
      duration as the average connection.\n"
    title: 2.1.  MAC Address Randomization Hypotheses
  - contents:
    - "2.2.  MAC Address Randomization and DHCP\n   From a privacy point of view,
      it is clear that the link-layer\n   address, IP address, and DHCP identifier
      shall evolve in synchrony.\n   For example, if the link-layer address changes
      and the DHCP\n   identifier stays constant, then it is really easy to correlate
      old\n   and new link-layer addresses, either by listening to DHCP traffic or\n
      \  by observing that the IP address remains constant, since it is tied\n   to
      the DHCP identifier.  Conversely, if the DHCP identifier changes\n   but the
      link-layer address remains constant, the old and new\n   identifiers and addresses
      can be correlated by listening to L2\n   traffic.  The procedures documented
      in the following sections\n   construct DHCP identifiers from the current link-layer
      address,\n   automatically providing for this synchronization.\n   The proposed
      anonymity profiles solve this synchronization issue by\n   deriving most identifiers
      from the link-layer address and by\n   generally making sure that DHCP parameter
      values do not remain\n   constant after an address change.\n"
    title: 2.2.  MAC Address Randomization and DHCP
  - contents:
    - "2.3.  Radio Fingerprinting\n   MAC address randomization solves the trivial
      monitoring problem in\n   which someone just uses a Wi-Fi scanner and records
      the MAC addresses\n   seen on the air.  DHCP anonymity solves the more elaborate
      scenario\n   in which someone monitors link-layer addresses and identities used
      in\n   DHCP at the access point or DHCP server.  But these are not the only\n
      \  ways to track a mobile device.\n   Radio fingerprinting is a process that
      identifies a radio transmitter\n   by the unique \"fingerprint\" of its signal
      transmission, i.e., the\n   tiny differences caused by minute imperfections
      of the radio\n   transmission hardware.  This can be applied to diverse types
      of\n   radios, including Wi-Fi as described, for example, in\n   [WiFiRadioFingerprinting].
      \ No amount of link-layer address\n   randomization will protect against such
      techniques.  Protections may\n   exist, but they are outside the scope of the
      present document.\n   On the other hand, we should not renounce randomization
      just because\n   radio fingerprinting exists.  The radio fingerprinting techniques
      are\n   harder to deploy than just recording link-layer addresses with a\n   scanner.
      \ Such techniques can only track devices for which the\n   fingerprints are
      known and thus have a narrower scope of application\n   than mass monitoring
      of addresses and DHCP parameters.\n"
    title: 2.3.  Radio Fingerprinting
  - contents:
    - "2.4.  Operating System Fingerprinting\n   When a standard like DHCP allows
      for multiple options, different\n   implementers will make different choices
      for the options that they\n   support or the values they choose for the options.
      \ Conversely,\n   monitoring the options and values present in DHCP messages
      reveals\n   these differences and allows for \"operating system fingerprinting\",\n
      \  i.e., finding the type and version of software that a particular\n   device
      is running.  Finding these versions provides some information\n   about the
      device's identity and thus goes against the goal of\n   anonymity.\n   The design
      of the anonymity profiles attempts to minimize the number\n   of options and
      the choice of values, in order to reduce the\n   possibilities of operating
      system fingerprinting.\n"
    title: 2.4.  Operating System Fingerprinting
  - contents:
    - "2.5.  No Anonymity Profile Identification\n   Reviewers of the anonymity profiles
      have sometimes suggested adding\n   an option to explicitly identify the profiles
      as \"using the anonymity\n   option\".  One suggestion is that the client tell
      the server about its\n   desire to remain anonymous, so that a willing server
      could cooperate\n   and protect the client's privacy.  Another possibility would
      be to\n   use a specific privacy-oriented construct, such as, for example, a\n
      \  new type of DHCP Unique Identifier (DUID) for a temporary DUID that\n   would
      be changing over time.\n   This is not workable in a large number of cases,
      as it is possible\n   that the network operator (or other entities that have
      access to the\n   operator's network) might be actively participating in surveillance\n
      \  and anti-privacy, willingly or not.  Declaring a preference for\n   anonymity
      is a bit like walking around with a Guy Fawkes mask.  (See\n   [GuyFawkesMask]
      for an explanation of this usage.)  When anonymity is\n   required, it is generally
      not a good idea to stick out of the crowd.\n   Simply revealing the desire for
      privacy could cause the attacker to\n   react by triggering additional surveillance
      or monitoring mechanisms.\n   Therefore, we feel that it is preferable to not
      disclose one's desire\n   for privacy.\n   This preference leads to some important
      implications.  In particular,\n   we make an effort to make the mitigation techniques
      difficult to\n   distinguish from regular client behaviors, if at all possible.\n"
    title: 2.5.  No Anonymity Profile Identification
  - contents:
    - "2.6.  Using the Anonymity Profiles\n   There are downsides to randomizing link-layer
      addresses and DHCP\n   identifiers.  By definition, randomization will break
      management\n   procedures that rely on tracking link-layer addresses.  Even
      if this\n   is not too much of a concern, we have to be worried about the\n
      \  frequency of link-layer address randomization.  Suppose, for example,\n   that
      many devices would get new random link-layer addresses at short\n   intervals,
      maybe every few minutes.  This would generate new DHCP\n   requests in rapid
      succession, with a high risk of exhausting DHCPv4\n   address pools.  Even with
      IPv6, there would still be a risk of\n   increased neighbor discovery traffic
      and bloating of various address\n   tables.  Implementers will have to be cautious
      when programming\n   devices to use randomized MAC addresses.  They will have
      to carefully\n   choose the frequency with which such addresses will be renewed.\n
      \  This document only provides guidelines for using DHCP when clients\n   care
      about privacy.  We assume that the request for anonymity is\n   materialized
      by the assignment of a randomized link-layer address to\n   the network interface.
      \ Once that decision is made, the following\n   guidelines will avoid leakage
      of identity in DHCP parameters or in\n   assigned addresses.\n   There may be
      rare situations where the clients want to remain\n   anonymous to attackers
      but not to the DHCP server.  These clients\n   should still use link-layer address
      randomization to hide from\n   observers, as well as some form of encrypted
      communication to the\n   DHCP server.  This scenario is out of scope for this
      document.\n   To preserve anonymity, the clients need to not use stable values
      for\n   the client identifiers.  This is clearly a trade-off, because a\n   stable
      client identifier guarantees that the client will receive\n   consistent parameters
      over time.  An example is given in [RFC7618],\n   where the client identifier
      is used to guarantee that the same client\n   will always get the same combination
      of IP address and port range.\n   Static clients benefit most from stable parameters
      and often can\n   already be identified by physical-connection-layer parameters.
      \ These\n   static clients will normally not use the anonymity profiles.  Mobile\n
      \  clients, in contrast, have the option of using the anonymity profiles\n   in
      conjunction with [RFC7618] if they are more concerned with privacy\n   protection
      than with stable parameters.\n"
    title: 2.6.  Using the Anonymity Profiles
  - contents:
    - "2.7.  What about privacy for DHCP servers?\n   This document only provides
      recommendations for DHCP clients.  The\n   main targets are DHCP clients used
      in mobile devices.  Such devices\n   are tempting targets for various monitoring
      systems, so there is an\n   urgent need to provide them with a simple anonymity
      solution.  We can\n   argue that some mobile devices embed DHCP servers and
      that providing\n   solutions for such devices is also quite important.  Two
      plausible\n   examples would be a DHCP server for a car network and a DHCP server\n
      \  for a mobile hot spot.  However, mobile servers get a lot of privacy\n   protection
      through the use of access control and link-layer\n   encryption.  Servers may
      disclose information to clients through\n   DHCP, but they normally only do
      that to clients that have passed the\n   link-layer access control and have
      been authorized to use the network\n   services.  This arguably makes solving
      the server problem less urgent\n   than solving the client problem.\n   Server
      privacy issues are presented in [RFC7819] and [RFC7824].\n   Mitigation of these
      issues is left for further study.\n"
    title: 2.7.  What about privacy for DHCP servers?
  title: 2.  Application Domain
- contents:
  - "3.  Anonymity Profile for DHCPv4\n   Clients using the DHCPv4 anonymity profile
    limit the disclosure of\n   information by controlling the header parameters and
    by limiting the\n   number and values of options.  The number of options depends
    on the\n   specific DHCP message:\n   DHCPDISCOVER:  The anonymized DHCPDISCOVER
    messages MUST contain the\n      Message Type option, MAY contain the Client Identifier
    option, and\n      MAY contain the Parameter Request List option.  It SHOULD NOT\n
    \     contain any other option.\n   DHCPREQUEST:  The anonymized DHCPREQUEST messages
    MUST contain the\n      Message Type option, MAY contain the Client Identifier
    option, and\n      MAY contain the Parameter Request List option.  If the message
    is\n      in response to a DHCPOFFER, it MUST contain the corresponding\n      Server
    Identifier option and the Requested IP address option.  If\n      the message
    is not in response to a DHCPOFFER, it MAY contain a\n      Requested IP address
    option as explained in Section 3.3.  It\n      SHOULD NOT contain any other option.\n
    \  DHCPDECLINE:  The anonymized DHCPDECLINE messages MUST contain the\n      Message
    Type option, the Server Identifier option, and the\n      Requested IP address
    option; and MAY contain the Client Identifier\n      option.\n   DHCPRELEASE:
    \ The anonymized DHCPRELEASE messages MUST contain the\n      Message Type option
    and the Server Identifier option, and MAY\n      contain the Client Identifier
    option.\n   DHCPINFORM:  The anonymized DHCPINFORM messages MUST contain the\n
    \     Message Type option, MAY contain the Client Identifier option, and\n      MAY
    contain the Parameter Request List option.  It SHOULD NOT\n      contain any other
    option.\n   Header fields and option values SHOULD be set in accordance with the\n
    \  DHCP specification, but some header fields and option values SHOULD\n   be
    constructed per the following guidelines.\n   The inclusion of the Host Name and
    Fully Qualified Domain Name (FQDN)\n   options in DHCPDISCOVER, DHCPREQUEST, or
    DHCPINFORM messages is\n   discussed in Sections 3.7 and 3.8.\n"
  - contents:
    - "3.1.  Avoiding Fingerprinting\n   There are many choices for implementing DHCPv4
      messages.  Clients can\n   choose to transmit a specific set of options, pick
      a particular\n   encoding for these options, and transmit options in different
      orders.\n   These choices can be used to fingerprint the client.\n   The following
      sections provide guidance on the encoding of options\n   and fields within the
      packets.  However, this guidance alone may not\n   be sufficient to prevent
      fingerprinting from revealing the device\n   type, the vendor name, or the OS
      type and specific version.\n   Fingerprinting may also reveal whether the client
      is using the\n   anonymity profile.\n   The client intending to protect its
      privacy SHOULD limit the subset\n   of options sent in messages to the subset
      listed in the remaining\n   subsections.\n   The client intending to protect
      its privacy SHOULD randomize the\n   ordering of options before sending any
      DHCPv4 message.  If this\n   random ordering cannot be implemented, the client
      MAY order the\n   options by option code number (lowest to highest).\n"
    title: 3.1.  Avoiding Fingerprinting
  - contents:
    - "3.2.  Client IP Address Field\n   Four octets in the header of the DHCP messages
      carry the \"Client IP\n   address\" (ciaddr) as defined in [RFC2131].  In DHCP,
      this field is\n   used by the clients to indicate the address that they used\n
      \  previously, so that as much as possible the server can allocate the\n   same
      address to them.\n   There are very few privacy implications related to sending
      this\n   address in the DHCP messages, except in the case of connecting to a\n
      \  different network than the last network connected to previously.  If\n   the
      DHCP client somehow repeated the address used in a previous\n   network attachment,
      monitoring services might use the information to\n   tie the two network locations.
      \ DHCP clients SHOULD ensure that the\n   field is cleared when they know that
      the network attachment has\n   changed, particularly if the link-layer address
      is reset by a\n   device's administrator.\n   The clients using the anonymity
      profile MUST NOT include in the\n   message a Client IP address that has been
      obtained with a different\n   link-layer address.\n"
    title: 3.2.  Client IP Address Field
  - contents:
    - "3.3.  Requested IP Address Option\n   The Requested IP address option is defined
      in [RFC2132] with code 50.\n   It allows the client to request that a particular
      IP address be\n   assigned.  This option is mandatory in some protocol messages
      per\n   [RFC2131] -- for example, when a client selects an address offered by\n
      \  a server.  However, this option is not mandatory in the DHCPDISCOVER\n   message.
      \ It is simply a convenience -- an attempt to regain the same\n   IP address
      that was used in a previous connection.  Doing so entails\n   the risk of disclosing
      an IP address used by the client at a previous\n   location or with a different
      link-layer address.  This risk exists\n   for all forms of IP addresses, public
      or private, as some private\n   addresses may be used in a wide scope, e.g.,
      when an Internet Service\n   Provider is using NAT.\n   When using the anonymity
      profile, clients SHOULD NOT use the\n   Requested IP address option in DHCPDISCOVER
      messages.  They MUST use\n   the option when mandated by DHCP -- for example,
      in DHCPREQUEST\n   messages.\n   There are scenarios in which a client connecting
      to a network\n   remembers a previously allocated address, i.e., when it is
      in the\n   INIT-REBOOT state.  In that state, any client that is concerned with\n
      \  privacy SHOULD perform a complete four-way handshake, starting with a\n   DHCPDISCOVER,
      to obtain a new address lease.  If the client can\n   ascertain that this is
      exactly the same network to which it was\n   previously connected, and if the
      link-layer address did not change,\n   the client MAY issue a DHCPREQUEST to
      try to reclaim the current\n   address.\n"
    title: 3.3.  Requested IP Address Option
  - contents:
    - "3.4.  Client Hardware Address Field\n   Sixteen octets in the header of the
      DHCP messages carry the \"Client\n   hardware address\" (chaddr) as defined
      in [RFC2131].  The presence of\n   this address is necessary for the proper
      operation of the DHCP\n   service.\n   Hardware addresses, called \"link-layer
      addresses\" in many RFCs, can\n   be used to uniquely identify a device, especially
      if they follow the\n   IEEE 802 recommendations.  If the hardware address is
      reset to a new\n   randomized value, the DHCP client SHOULD use the new randomized
      value\n   in the DHCP messages.\n"
    title: 3.4.  Client Hardware Address Field
  - contents:
    - "3.5.  Client Identifier Option\n   The Client Identifier option is defined
      in [RFC2132] with\n   option code 61.  It is discussed in detail in [RFC4361].
      \ The purpose\n   of the Client Identifier option is to identify the client
      in a manner\n   independent of the link-layer address.  This is particularly
      useful\n   if the DHCP server is expected to assign the same address to the\n
      \  client after a network attachment is swapped and the link-layer\n   address
      changes.  It is also useful when the same node issues\n   requests through several
      interfaces and expects the DHCP server to\n   provide consistent configuration
      data over multiple interfaces.\n   The considerations for hardware independence
      and strong client\n   identity have an adverse effect on the privacy of mobile
      clients,\n   because the hardware-independent unique identifier obviously enables\n
      \  very efficient tracking of the clients' movements.  One option would\n   be
      to not transmit this option at all, but this may affect\n   interoperability
      and will definitely mark the client as requesting\n   anonymity, exposing it
      to the risks mentioned in Section 2.5.\n   The recommendations in [RFC4361]
      are very strong, stating, for\n   example, that \"DHCPv4 clients MUST NOT use
      client identifiers based\n   solely on layer two addresses that are hard-wired
      to the layer two\n   device (e.g., the Ethernet MAC address).\"  These strong\n
      \  recommendations are in fact a trade-off between ease of management\n   and
      privacy, and the trade-off should depend on the circumstances.\n   In contradiction
      to [RFC4361], when using the anonymity profile, DHCP\n   clients MUST use client
      identifiers based solely on the link-layer\n   address that will be used in
      the underlying connection.  This will\n   ensure that the DHCP client identifier
      does not leak any information\n   that is not already available to entities
      monitoring the network\n   connection.  It will also ensure that a strategy
      of randomizing the\n   link-layer address will not be nullified by the Client
      Identifier\n   option.\n   There are usages of DHCP where the underlying connection
      is a\n   point-to-point link, in which case there is no link-layer address\n
      \  available to construct a non-revealing identifier.  If anonymity is\n   desired
      in such networks, the client SHOULD pick a random identifier\n   that is highly
      likely to be unique to the current link, using, for\n   example, a combination
      of a local secret and an identifier of the\n   connection.  The algorithm for
      combining secrets and identifiers, as\n   described in Section 5 of [RFC7217],
      solves a similar problem.  The\n   criteria for the generation of random numbers
      are stated\n   in [RFC4086].\n"
    title: 3.5.  Client Identifier Option
  - contents:
    - "3.6.  Parameter Request List Option\n   The Parameter Request List (PRL) option
      is defined in [RFC2132] with\n   option code 55.  It lists the parameters requested
      from the server by\n   the client.  Different implementations request different
      parameters.\n   [RFC2132] specifies that \"the client MAY list the options in
      order of\n   preference.\"  In practice, this means that different client\n
      \  implementations will request different parameters, in different\n   orders.\n
      \  The choice of option numbers and the specific ordering of option\n   numbers
      in the PRL can be used to fingerprint the client.  This may\n   not reveal the
      identity of a client but may provide additional\n   information such as the
      device type, the vendor name, or the OS type\n   and specific version.\n   The
      client intending to protect its privacy SHOULD only request a\n   minimal number
      of options in the PRL and SHOULD also randomly shuffle\n   the ordering of option
      codes in the PRL.  If this random ordering\n   cannot be implemented, the client
      MAY order the option codes in the\n   PRL by option code number (lowest to highest).\n"
    title: 3.6.  Parameter Request List Option
  - contents:
    - "3.7.  Host Name Option\n   The Host Name option is defined in [RFC2132] with
      option code 12.\n   Depending on implementations, the option value can carry
      either an\n   FQDN such as \"node1984.example.com\" or a simple host name such
      as\n   \"node1984\".  The host name is commonly used by the DHCP server to\n
      \  identify the host and also to automatically update the address of the\n   host
      in local name services.\n   FQDNs are obviously unique identifiers, but even
      simple host names\n   can provide a significant amount of information on the
      identity of\n   the device.  They are typically chosen to be unique in the context\n
      \  where the device is most often used.  In a context that contains a\n   substantial
      number of devices, e.g., in a large company or a big\n   university, the host
      name will be a pretty good identifier of the\n   device, due to the specificity
      required to ensure uniqueness.\n   Monitoring services could use that information
      in conjunction with\n   traffic analysis and quickly derive the identity of
      the device's\n   owner.\n   When using the anonymity profile, DHCP clients SHOULD
      NOT send the\n   Host Name option.  If they choose to send the option, DHCP
      clients\n   MUST always send a non-qualified host name instead of an FQDN and\n
      \  MUST obfuscate the host name value.\n   There are many ways to obfuscate
      a host name.  The construction rules\n   SHOULD guarantee that a different host
      name is generated each time\n   the link-layer address changes and that the
      obfuscated host name will\n   not reveal the underlying link-layer address.
      \ The construction\n   SHOULD generate names that are unique enough to minimize
      collisions\n   in the local link.  Clients MAY use the following algorithm:
      compute\n   a secure hash of a local secret and of the link-layer address that\n
      \  will be used in the underlying connection, and then use the\n   hexadecimal
      representation of the first 6 octets of the hash as the\n   obfuscated host
      name.\n   The algorithm described in the previous paragraph generates an easily\n
      \  recognizable pattern.  There is a potential downside to having such a\n   specific
      name pattern for hosts that require anonymity (the \"sticking\n   out of the
      crowd\" principle), as explained in Section 2.5.  For this\n   reason, the above
      algorithm is just a suggestion.\n"
    title: 3.7.  Host Name Option
  - contents:
    - "3.8.  Client FQDN Option\n   The Client FQDN option is defined in [RFC4702]
      with option code 81.\n   This option allows the DHCP clients to advertise to
      the DHCP server\n   their FQDN, such as \"mobile.example.com\".  This would
      allow the DHCP\n   server to update in the DNS the PTR record for the IP address\n
      \  allocated to the client.  Depending on circumstances, either the DHCP\n   client
      or the DHCP server could update in the DNS the A record for\n   the FQDN of
      the client.\n   Obviously, this option uniquely identifies the client, exposing
      it to\n   the DHCP server or to anyone listening to DHCP traffic.  In fact,
      if\n   the DNS record is updated, the location of the client becomes visible\n
      \  to anyone with DNS lookup capabilities.\n   When using the anonymity profile,
      DHCP clients SHOULD NOT include the\n   Client FQDN option in their DHCP requests.
      \ Alternatively, they MAY\n   include a special-purpose FQDN using the same
      host name as in the\n   Host Name option, with a suffix matching the connection-specific
      DNS\n   suffix being advertised by that DHCP server.  Having a name in the\n
      \  DNS allows working with legacy systems that require one to be there,\n   e.g.,
      by verifying that a forward and reverse lookup succeeds with\n   the same result.\n"
    title: 3.8.  Client FQDN Option
  - contents:
    - "3.9.  UUID/GUID-Based Client Machine Identifier Option\n   The UUID/GUID-based
      (where \"UUID\" means \"Universally Unique\n   Identifier\" and \"GUID\" means
      \"Globally Unique Identifier\")\n   Client Machine Identifier option is defined
      in [RFC4578] with\n   option code 97.  This option is part of a set of options
      for the\n   Intel Preboot eXecution Environment (PXE).  The purpose of the PXE\n
      \  system is to perform management functions on a device before its main\n   OS
      is operational.  The Client Machine Identifier carries a 16-octet\n   GUID that
      uniquely identifies the device.\n   The PXE system is clearly designed for devices
      operating in a\n   controlled environment.  The main usage of the PXE system
      is to\n   install a new version of the operating system through a high-speed\n
      \  Ethernet connection.  The process is typically controlled from the\n   user
      interface during the boot process.  Common sense seems to\n   dictate that getting
      a new operating system from an unauthenticated\n   server at an untrusted location
      is a really bad idea and that even if\n   the option was available users would
      not activate it.  In any case,\n   the option is only used in the \"pre-boot\"
      environment, and there is\n   no reason to use it once the system is up and
      running.  Nodes\n   visiting untrusted networks MUST NOT send or use the PXE
      options.\n"
    title: 3.9.  UUID/GUID-Based Client Machine Identifier Option
  - contents:
    - "3.10.  User and Vendor Class DHCP Options\n   Vendor-identifying options are
      defined in [RFC2132] and [RFC3925].\n   When using the anonymity profile, DHCPv4
      clients SHOULD NOT use the\n   Vendor-Specific Information option (code 43),
      the Vendor Class\n   Identifier option (code 60), the V-I Vendor Class option
      (code 124),\n   or the V-I Vendor-Specific Information option (code 125), as
      these\n   options potentially reveal identifying information.\n"
    title: 3.10.  User and Vendor Class DHCP Options
  title: 3.  Anonymity Profile for DHCPv4
- contents:
  - "4.  Anonymity Profile for DHCPv6\n   DHCPv6 is typically used by clients in one
    of two scenarios: stateful\n   or stateless configuration.  In the stateful scenario,
    clients use a\n   combination of Solicit, Request, Confirm, Renew, Rebind, Release,
    and\n   Decline messages to obtain addresses and manage these addresses.\n   In
    the stateless scenario, clients configure addresses using a\n   combination of
    client-managed identifiers and router-advertised\n   prefixes, without involving
    the DHCPv6 services.  Different ways of\n   constructing these prefixes have different
    implications on privacy,\n   which are discussed in [DEFAULT-IIDs] and [RFC7721].
    \ In the\n   stateless scenario, clients use DHCPv6 to obtain network\n   configuration
    parameters, through the Information-request message.\n   The choice between the
    stateful and stateless scenarios depends on\n   flag and prefix options published
    by the Router Advertisement\n   messages of local routers, as specified in [RFC4861].
    \ When these\n   options enable stateless address configuration, hosts using the\n
    \  anonymity profile SHOULD use stateless address configuration instead\n   of
    stateful address configuration, because stateless configuration\n   requires fewer
    information disclosures than stateful configuration.\n   When using the anonymity
    profile, DHCPv6 clients carefully select\n   DHCPv6 options used in the various
    messages that they send.  The list\n   of options that are mandatory or optional
    for each message is\n   specified in [RFC3315].  Some of these options have specific\n
    \  implications on anonymity.  The following sections provide guidance\n   on
    the choice of option values when using the anonymity profile.\n"
  - contents:
    - "4.1.  Avoiding Fingerprinting\n   There are many choices for implementing DHCPv6
      messages.  As\n   explained in Section 3.1, these choices can be used to fingerprint\n
      \  the client.\n   The following sections provide guidance on the encoding of
      options.\n   However, this guidance alone may not be sufficient to prevent\n
      \  fingerprinting from revealing the device type, the vendor name, or\n   the
      OS type and specific version.  Fingerprinting may also reveal\n   whether the
      client is using the anonymity profile.\n   The client intending to protect its
      privacy SHOULD limit the subset\n   of options sent in messages to the subset
      listed in the following\n   sections.\n   The client intending to protect its
      privacy SHOULD randomize the\n   ordering of options before sending any DHCPv6
      message.  If this\n   random ordering cannot be implemented, the client MAY
      order the\n   options by option code number (lowest to highest).\n"
    title: 4.1.  Avoiding Fingerprinting
  - contents:
    - "4.2.  Do not send Confirm messages, unless really sure about\n      the location\n
      \  [RFC3315] requires clients to send a Confirm message when they attach\n   to
      a new link to verify whether the addressing and configuration\n   information
      they previously received is still valid.  This\n   requirement was relaxed in
      [DHCPv6bis].  When these clients send\n   Confirm messages, they include any
      Identity Associations (IAs)\n   assigned to the interface that may have moved
      to a new link, along\n   with the addresses associated with those IAs.  By examining
      the\n   addresses in the Confirm message, an attacker can trivially identify\n
      \  the previous point(s) of attachment.\n   Clients interested in protecting
      their privacy SHOULD NOT send\n   Confirm messages and instead SHOULD directly
      try to acquire addresses\n   on the new link.  However, not sending Confirm
      messages can result in\n   connectivity hiatus in some scenarios, e.g., roaming
      between two\n   access points in the same wireless network.  DHCPv6 clients
      that can\n   verify that the previous link and the current link are part of
      the\n   same network MAY send Confirm messages while still protecting their\n
      \  privacy.  Such link identification should happen before DHCPv6 is\n   used,
      and thus it cannot depend on the DHCPv6 information used in\n   [RFC6059].  In
      practice, the most reliable detection of network\n   attachment is through link-layer
      security, e.g., [IEEE8021X].\n"
    title: 4.2.  Do not send Confirm messages, unless really sure about
  - contents:
    - "4.3.  Client Identifier DHCPv6 Option\n   The DHCPv6 Client Identifier option
      is defined in [RFC3315] with\n   option code 1.  The purpose of the Client Identifier
      option is to\n   identify the client to the server.  The content of the option
      is a\n   DHCP Unique Identifier (DUID).  One of the primary privacy concerns\n
      \  is that a client is disclosing a stable identifier (the DUID) that\n   can
      be used for tracking and profiling.  Three DUID formats are\n   specified in
      [RFC3315]: link-layer address plus time (DUID-LLT),\n   Vendor-assigned unique
      ID based on Enterprise Number, and link-layer\n   address.  A fourth type, DUID-UUID,
      is defined in [RFC6355].\n   When using the anonymity profile in conjunction
      with randomized\n   link-layer addresses, DHCPv6 clients MUST use DUID format
      number 3 --\n   link-layer address.  The value of the link-layer address should
      be\n   the value currently assigned to the interface.\n   When using the anonymity
      profile without the benefit of randomized\n   link-layer addresses, clients
      that want to protect their privacy\n   SHOULD generate a new randomized DUID-LLT
      every time they attach to a\n   new link or detect a possible link change event.
      \ Syntactically, this\n   identifier will conform to [RFC3315], but its content
      is meaningless.\n   The exact details are left up to implementers, but there
      are several\n   factors that should be taken into consideration.  The DUID type\n
      \  SHOULD be set to 1 (DUID-LLT).  Hardware type SHOULD be set\n   appropriately
      to the hardware type in question.  The link address\n   embedded in the LLT
      SHOULD be set to a randomized value.  Time SHOULD\n   be set to a random timestamp
      from the previous year.  Time MAY be set\n   to current time, but this will
      reveal the fact that the DUID is newly\n   generated and thus could provide
      information for device\n   fingerprinting.  The criteria for generating highly
      unique random\n   numbers are listed in [RFC4086].\n"
    - contents:
      - "4.3.1.  Anonymous Information-request\n   According to [RFC3315], a DHCPv6
        client includes its client\n   identifier in most of the messages it sends.
        \ There is one exception,\n   however: the client is allowed to omit its client
        identifier when\n   sending Information-request messages.\n   When using stateless
        DHCPv6, clients wanting to protect their privacy\n   SHOULD NOT include client
        identifiers in their Information-request\n   messages.  This will prevent
        the server from specifying client-\n   specific options if it is configured
        to do so, but the need for\n   anonymity precludes such options anyway.\n"
      title: 4.3.1.  Anonymous Information-request
    title: 4.3.  Client Identifier DHCPv6 Option
  - contents:
    - "4.4.  Server Identifier Option\n   When using the anonymity profile, DHCPv6
      clients SHOULD use the\n   Server Identifier option (code 2) as specified in
      [RFC3315].  Clients\n   MUST only include server identifier values that were
      received with\n   the current link-layer address, because the reuse of old values\n
      \  discloses information that can be used to identify the client.\n"
    title: 4.4.  Server Identifier Option
  - contents:
    - "4.5.  Address Assignment Options\n   When using the anonymity profile, DHCPv6
      clients might have to use\n   Solicit or Request messages to obtain IPv6 addresses
      through the\n   DHCPv6 server.  In DHCPv6, the collection of addresses assigned
      to a\n   client is identified by an IA.  Clients interested in privacy SHOULD\n
      \  request addresses using the IA for the Non-temporary Addresses option\n   (IA_NA,
      code 3) [RFC3315].\n   The IA_NA option includes an IAID parameter that identifies
      a unique\n   IA for the interface for which the address is requested.  Clients\n
      \  interested in protecting their privacy MUST ensure that the IAID does\n   not
      enable client identification.  They also need to conform to the\n   requirement
      of [RFC3315] that the IAID for that IA MUST be consistent\n   across restarts
      of the DHCPv6 client.  We interpret that as requiring\n   that the IAID MUST
      be constant for the association, as long as the\n   link-layer address remains
      constant.\n   Clients MAY meet the privacy, uniqueness, and stability requirements\n
      \  of the IAID by constructing it as the combination of 1 octet encoding\n   the
      interface number in the system, and the first 3 octets of the\n   link-layer
      address.\n   The clients MAY use the IA Address option (code 5) [RFC3315] but
      need\n   to balance the potential advantage of \"address continuity\" versus
      the\n   potential risk of \"previous address disclosure\".  A potential\n   solution
      is to remove all stored addresses when a link-layer address\n   changes and
      to only use the IA Address option with addresses that\n   have been explicitly
      assigned through the current link-layer address.\n"
    - contents:
      - "4.5.1.  Obtain Temporary Addresses\n   [RFC3315] defines a special container
        (IA_TA, code 4) for requesting\n   temporary addresses.  This is a good mechanism
        in principle, but\n   there are a number of issues associated with it.  First,
        this is not\n   a widely used feature, so clients depending solely on temporary\n
        \  addresses may lock themselves out of service.  Secondly, [RFC3315]\n   does
        not specify any lifetime or lease length for temporary\n   addresses.  Therefore,
        support for renewing temporary addresses may\n   vary between client implementations,
        including no support at all.\n   Finally, by requesting temporary addresses,
        a client reveals its\n   desire for privacy and potentially risks countermeasures
        as described\n   in Section 2.5.\n   Because of these issues, clients interested
        in their privacy\n   SHOULD NOT use IA_TA.\n   The addresses obtained according
        to Section 4.5 are meant to be\n   non-temporary, but the anonymity profile
        uses them as temporary, and\n   they will be discarded when the link-layer
        address is changed.  They\n   thus meet most of the use cases of the temporary
        addresses defined in\n   [RFC4941].  Clients interested in their privacy should
        not publish\n   their IPv6 addresses in the DNS or otherwise associate them
        with name\n   services, and thus do not normally need two classes of addresses
        --\n   one public, one temporary.\n   The use of mechanisms to allocate several
        IPv6 addresses to a client\n   while preserving privacy is left for further
        study.\n"
      title: 4.5.1.  Obtain Temporary Addresses
    - contents:
      - "4.5.2.  Prefix Delegation\n   The use of DHCPv6 address assignment option
        for Prefix Delegation\n   (PD) is defined in [RFC3633].  Because current host
        OS\n   implementations do not typically request prefixes, clients that wish\n
        \  to use DHCPv6 PD -- just like clients that wish to use any DHCP or\n   DHCPv6
        option that is not currently widely used -- should recognize\n   that doing
        so will serve as a form of fingerprinting, unless or until\n   the use of
        DHCPv6 PD by clients becomes more widespread.\n   The anonymity properties
        of DHCPv6 PD, which uses IA_PD IAs, are\n   similar to those of DHCPv6 address
        assignment using IA_NA IAs.  The\n   IAID could potentially be used to identify
        the client, and a prefix\n   hint sent in the IA_PD Prefix option could be
        used to track the\n   client's previous location.  Clients that desire anonymity
        and never\n   request more than one prefix SHOULD set the IAID value to zero,
        as\n   authorized in Section 6 of [RFC3633], and SHOULD NOT document any\n
        \  previously assigned prefix in the IA_PD Prefix option.\n"
      title: 4.5.2.  Prefix Delegation
    title: 4.5.  Address Assignment Options
  - contents:
    - "4.6.  Option Request Option\n   The Option Request Option (ORO) is defined
      in [RFC3315] with\n   option code 6.  It specifies the options that the client
      is\n   requesting from the server.  The choice of requested options and the\n
      \  order of encoding of these options in the ORO can be used to\n   fingerprint
      the client.\n   The client intending to protect its privacy SHOULD only request
      a\n   minimal subset of options and SHOULD randomly shuffle the ordering of\n
      \  option codes in the ORO.  If this random ordering cannot be\n   implemented,
      the client MAY order the option codes in the ORO by\n   option code number (lowest
      to highest).\n"
    - contents:
      - "4.6.1.  Previous Option Values\n   According to [RFC3315], the client that
        includes an ORO in a Solicit\n   or Request message MAY additionally include
        instances of those\n   options that are identified in the ORO, with data values
        as hints to\n   the server about parameter values the client would like to
        have\n   returned.\n   When using the anonymity profile, clients SHOULD NOT
        include such\n   instances of options, because old values might be used to
        identify\n   the client.\n"
      title: 4.6.1.  Previous Option Values
    title: 4.6.  Option Request Option
  - contents:
    - "4.7.  Authentication Option\n   The purpose of the Authentication option (code
      11) [RFC3315] is to\n   authenticate the identity of clients and servers and
      the contents of\n   DHCPv6 messages.  As such, the option can be used to identify
      the\n   client, so it is incompatible with the stated goal of \"client\n   anonymity\".
      \ DHCPv6 clients that use the anonymity profile SHOULD NOT\n   use the Authentication
      option.  They MAY use it if they recognize\n   that they are operating in a
      trusted environment, e.g., in a\n   workplace network.\n"
    title: 4.7.  Authentication Option
  - contents:
    - "4.8.  User and Vendor Class DHCPv6 Options\n   When using the anonymity profile,
      DHCPv6 clients SHOULD NOT use the\n   User Class option (code 15) or the Vendor
      Class option (code 16)\n   [RFC3315], as these options potentially reveal identifying\n
      \  information.\n"
    title: 4.8.  User and Vendor Class DHCPv6 Options
  - contents:
    - "4.9.  Client FQDN DHCPv6 Option\n   The DHCPv6 Client FQDN option is defined
      in [RFC4704] with\n   option code 39.  This option allows the DHCPv6 clients
      to advertise\n   to the DHCPv6 server their FQDN, such as \"mobile.example.com\".
      \ When\n   using the anonymity profile, DHCPv6 clients SHOULD NOT include the\n
      \  Client FQDN option in their DHCPv6 messages, because it identifies\n   the
      client.  As explained in Section 3.8, they MAY use a local-only\n   FQDN by
      combining a host name derived from the link-layer address and\n   a suffix advertised
      by the local DHCPv6 server.\n"
    title: 4.9.  Client FQDN DHCPv6 Option
  title: 4.  Anonymity Profile for DHCPv6
- contents:
  - "5.  Operational Considerations\n   The anonymity profiles have the effect of
    hiding the client identity\n   from the DHCP server.  This is not always desirable.
    \ Some DHCP\n   servers provide facilities like publishing names and addresses
    in the\n   DNS, or ensuring that returning clients get reassigned the same\n   address.\n
    \  Clients using an anonymity profile may be consuming more resources.\n   For
    example, when a client changes its link-layer address and\n   requests a new IP
    address, the old IP address is still marked as\n   leased by the server.\n   Some
    DHCP servers will only give addresses to pre-registered MAC\n   addresses, forcing
    clients to choose between remaining anonymous and\n   obtaining connectivity.\n
    \  Implementers SHOULD provide a way for clients to control when the\n   anonymity
    profiles are used and when standard behavior is preferred.\n   Implementers MAY
    implement this control by tying the use of the\n   anonymity profiles to that
    of link-layer address randomization.\n"
  title: 5.  Operational Considerations
- contents:
  - "6.  Security Considerations\n   The use of the anonymity profiles does not change
    the security\n   considerations of the DHCPv4 or DHCPv6 protocols [RFC2131] [RFC3315].\n"
  title: 6.  Security Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC2131]  Droms, R., \"Dynamic Host Configuration Protocol\",\n              RFC
      2131, DOI 10.17487/RFC2131, March 1997,\n              <http://www.rfc-editor.org/info/rfc2131>.\n
      \  [RFC3315]  Droms, R., Ed., Bound, J., Volz, B., Lemon, T., Perkins,\n              C.,
      and M. Carney, \"Dynamic Host Configuration Protocol\n              for IPv6
      (DHCPv6)\", RFC 3315, DOI 10.17487/RFC3315,\n              July 2003, <http://www.rfc-editor.org/info/rfc3315>.\n
      \  [RFC3633]  Troan, O. and R. Droms, \"IPv6 Prefix Options for Dynamic\n              Host
      Configuration Protocol (DHCP) version 6\", RFC 3633,\n              DOI 10.17487/RFC3633,
      December 2003,\n              <http://www.rfc-editor.org/info/rfc3633>.\n   [RFC4702]
      \ Stapp, M., Volz, B., and Y. Rekhter, \"The Dynamic Host\n              Configuration
      Protocol (DHCP) Client Fully Qualified\n              Domain Name (FQDN) Option\",
      RFC 4702,\n              DOI 10.17487/RFC4702, October 2006,\n              <http://www.rfc-editor.org/info/rfc4702>.\n
      \  [RFC4861]  Narten, T., Nordmark, E., Simpson, W., and H. Soliman,\n              \"Neighbor
      Discovery for IP version 6 (IPv6)\", RFC 4861,\n              DOI 10.17487/RFC4861,
      September 2007,\n              <http://www.rfc-editor.org/info/rfc4861>.\n   [RFC4941]
      \ Narten, T., Draves, R., and S. Krishnan, \"Privacy\n              Extensions
      for Stateless Address Autoconfiguration in\n              IPv6\", RFC 4941,
      DOI 10.17487/RFC4941, September 2007,\n              <http://www.rfc-editor.org/info/rfc4941>.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [CNBC]     Weston, G., Greenwald, G., and
      R. Gallagher, \"CBC News:\n              CSEC used airport Wi-Fi to track Canadian
      travellers:\n              Edward Snowden documents\", January 2014,\n              <http://www.cbc.ca/news/politics/\n
      \             csec-used-airport-wi-fi-to-track-canadian-travellers-\n              edward-snowden-documents-1.2517881>.\n
      \  [DEFAULT-IIDs]\n              Gont, F., Cooper, A., Thaler, D., and W. Liu,\n
      \             \"Recommendation on Stable IPv6 Interface Identifiers\",\n              Work
      in Progress, draft-ietf-6man-default-iids-11,\n              April 2016.\n   [DHCPv6bis]\n
      \             Mrugalski, T., Ed., Siodelski, M., Volz, B., Yourtchenko,\n              A.,
      Richardson, M., Jiang, S., and T. Lemon, \"Dynamic Host\n              Configuration
      Protocol for IPv6 (DHCPv6) bis\", Work in\n              Progress, draft-ietf-dhc-rfc3315bis-04,
      March 2016.\n   [GuyFawkesMask]\n              Nickelsburg, M., \"A brief history
      of the Guy Fawkes mask\",\n              July 2013, <http://theweek.com/articles/463151/\n
      \             brief-history-guy-fawkes-mask>.\n   [IEEE8021X]\n              IEEE,
      \"IEEE Standard for Local and metropolitan area\n              networks - Port-Based
      Network Access Control\",\n              IEEE 802.1X-2010, DOI 10.1109/ieeestd.2010.5409813,\n
      \             <http://ieeexplore.ieee.org/servlet/\n              opac?punumber=5409757>.\n
      \  [IEEE802PRSG]\n              IEEE 802 EC PRSG, \"IEEE 802 EC Privacy Recommendation\n
      \             Study Group\", February 2016,\n              <http://www.ieee802.org/PrivRecsg/>.\n
      \  [IETFMACRandom]\n              Zuniga, JC., \"MAC Privacy\", November 2014,\n
      \             <http://www.ietf.org/blog/2014/11/mac-privacy/>.\n   [IETFTrialsAndMore]\n
      \             Bernardos, CJ., Zuniga, JC., and P. O'Hanlon, \"Wi-Fi\n              Internet
      connectivity and privacy: hiding your tracks on\n              the wireless
      Internet\", October 2015,\n              <http://www.it.uc3m.es/cjbc/papers/\n
      \             pdf/2015_bernardos_cscn_privacy.pdf>.\n   [RFC2132]  Alexander,
      S. and R. Droms, \"DHCP Options and BOOTP Vendor\n              Extensions\",
      RFC 2132, DOI 10.17487/RFC2132, March 1997,\n              <http://www.rfc-editor.org/info/rfc2132>.\n
      \  [RFC3925]  Littlefield, J., \"Vendor-Identifying Vendor Options for\n              Dynamic
      Host Configuration Protocol version 4 (DHCPv4)\",\n              RFC 3925, DOI
      10.17487/RFC3925, October 2004,\n              <http://www.rfc-editor.org/info/rfc3925>.\n
      \  [RFC4086]  Eastlake 3rd, D., Schiller, J., and S. Crocker,\n              \"Randomness
      Requirements for Security\", BCP 106, RFC 4086,\n              DOI 10.17487/RFC4086,
      June 2005,\n              <http://www.rfc-editor.org/info/rfc4086>.\n   [RFC4361]
      \ Lemon, T. and B. Sommerfeld, \"Node-specific Client\n              Identifiers
      for Dynamic Host Configuration Protocol\n              Version Four (DHCPv4)\",
      RFC 4361, DOI 10.17487/RFC4361,\n              February 2006, <http://www.rfc-editor.org/info/rfc4361>.\n
      \  [RFC4578]  Johnston, M. and S. Venaas, Ed., \"Dynamic Host\n              Configuration
      Protocol (DHCP) Options for the Intel\n              Preboot eXecution Environment
      (PXE)\", RFC 4578,\n              DOI 10.17487/RFC4578, November 2006,\n              <http://www.rfc-editor.org/info/rfc4578>.\n
      \  [RFC4704]  Volz, B., \"The Dynamic Host Configuration Protocol for\n              IPv6
      (DHCPv6) Client Fully Qualified Domain Name (FQDN)\n              Option\",
      RFC 4704, DOI 10.17487/RFC4704, October 2006,\n              <http://www.rfc-editor.org/info/rfc4704>.\n
      \  [RFC6059]  Krishnan, S. and G. Daley, \"Simple Procedures for\n              Detecting
      Network Attachment in IPv6\", RFC 6059,\n              DOI 10.17487/RFC6059,
      November 2010,\n              <http://www.rfc-editor.org/info/rfc6059>.\n   [RFC6355]
      \ Narten, T. and J. Johnson, \"Definition of the UUID-Based\n              DHCPv6
      Unique Identifier (DUID-UUID)\", RFC 6355,\n              DOI 10.17487/RFC6355,
      August 2011,\n              <http://www.rfc-editor.org/info/rfc6355>.\n   [RFC7217]
      \ Gont, F., \"A Method for Generating Semantically Opaque\n              Interface
      Identifiers with IPv6 Stateless Address\n              Autoconfiguration (SLAAC)\",
      RFC 7217,\n              DOI 10.17487/RFC7217, April 2014,\n              <http://www.rfc-editor.org/info/rfc7217>.\n
      \  [RFC7618]  Cui, Y., Sun, Q., Farrer, I., Lee, Y., Sun, Q., and M.\n              Boucadair,
      \"Dynamic Allocation of Shared IPv4 Addresses\",\n              RFC 7618, DOI
      10.17487/RFC7618, August 2015,\n              <http://www.rfc-editor.org/info/rfc7618>.\n
      \  [RFC7721]  Cooper, A., Gont, F., and D. Thaler, \"Security and Privacy\n
      \             Considerations for IPv6 Address Generation Mechanisms\",\n              RFC
      7721, DOI 10.17487/RFC7721, March 2016,\n              <http://www.rfc-editor.org/info/rfc7721>.\n
      \  [RFC7819]  Jiang, S., Krishnan, S., and T. Mrugalski, \"Privacy\n              Considerations
      for DHCP\", RFC 7819, DOI 10.17487/RFC7819,\n              April 2016, <http://www.rfc-editor.org/info/rfc7819>.\n
      \  [RFC7824]  Krishnan, S., Mrugalski, T., and S. Jiang, \"Privacy\n              Considerations
      for DHCPv6\", RFC 7824,\n              DOI 10.17487/RFC7824, May 2016,\n              <http://www.rfc-editor.org/info/rfc7824>.\n
      \  [WiFiRadioFingerprinting]\n              Brik, V., Banerjee, S., Gruteser,
      M., and S. Oh, \"Wireless\n              Device Identification with Radiometric
      Signatures\",\n              DOI 10.1.1.145.8873, September 2008,\n              <http://citeseerx.ist.psu.edu/viewdoc/\n
      \             summary?doi=10.1.1.145.8873>.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Acknowledgments\n   The inspiration for this document came from discussions in
    the\n   Perpass mailing list.  Several people provided feedback on this\n   document,
    notably Noel Anderson, Brian Carpenter, Lorenzo Colitti,\n   Stephen Farrell,
    Nick Grifka, Tushar Gupta, Brian Haberman, Gabriel\n   Montenegro, Marcin Siodelski,
    Dave Thaler, Bernie Volz, and Jun Wu.\n"
  title: Acknowledgments
- contents:
  - "Authors' Addresses\n   Christian Huitema\n   Microsoft\n   Redmond, WA  98052\n
    \  United States\n   Email: huitema@microsoft.com\n   Tomek Mrugalski\n   Internet
    Systems Consortium, Inc.\n   950 Charter Street\n   Redwood City, CA  94063\n
    \  United States\n   Email: tomasz.mrugalski@gmail.com\n   Suresh Krishnan\n   Ericsson\n
    \  8400 Decarie Blvd.\n   Town of Mount Royal, QC\n   Canada\n   Phone: +1 514
    345 7900 x42871\n   Email: suresh.krishnan@ericsson.com\n"
  title: Authors' Addresses
