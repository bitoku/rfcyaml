- title: __initial_text__
  contents:
  - "       Transport Layer Security (TLS) Protocol Compression Using\n          \
    \               Lempel-Ziv-Stac (LZS)\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).\n"
- title: Abstract
  contents:
  - "Abstract\n   The Transport Layer Security (TLS) protocol (RFC 2246) includes\n\
    \   features to negotiate selection of a lossless data compression method\n  \
    \ as part of the TLS Handshake Protocol and then to apply the algorithm\n   associated\
    \ with the selected method as part of the TLS Record\n   Protocol.  TLS defines\
    \ one standard compression method, which\n   specifies that data exchanged via\
    \ the record protocol will not be\n   compressed.  This document describes an\
    \ additional compression method\n   associated with the Lempel-Ziv-Stac (LZS)\
    \ lossless data compression\n   algorithm for use with TLS.  This document also\
    \ defines the\n   application of the LZS algorithm to the TLS Record Protocol.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n       1.1.  General. . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  2\n       1.2.  Specification of Requirements. . . . . . . . . .\
    \ . . . .  3\n   2.  Compression Methods. . . . . . . . . . . . . . . . . . .\
    \ . . .  3\n       2.1.  LZS CompresionMethod . . . . . . . . . . . . . . . .\
    \ . .  4\n       2.2.  Security Issues with Single History Compression. . . .\
    \ .  4\n   3.  LZS Compression. . . . . . . . . . . . . . . . . . . . . . . .\
    \  4\n       3.1.  Background of LZS Compression  . . . . . . . . . . . . .  4\n\
    \       3.2.  LZS Compression History and Record Processing  . . . . .  5\n  \
    \     3.3.  LZS Compressed Record Format . . . . . . . . . . . . . .  6\n    \
    \   3.4.  TLSComp Header Format  . . . . . . . . . . . . . . . . .  6\n      \
    \       3.4.1.  Flags. . . . . . . . . . . . . . . . . . . . . .  6\n       3.5.\
    \  LZS Compression Encoding Format  . . . . . . . . . . . .  7\n       3.6.  Padding\
    \  . . . . . . . . . . . . . . . . . . . . . . . .  8\n   4.  Sending Compressed\
    \ Records . . . . . . . . . . . . . . . . . .  8\n       4.1.  Transmitter Process.\
    \ . . . . . . . . . . . . . . . . . .  9\n       4.2.  Receiver Process . . .\
    \ . . . . . . . . . . . . . . . . .  9\n       4.3.  Anti-expansion Mechanism\
    \ . . . . . . . . . . . . . . . . 10\n   5.  Internationalization Considerations\
    \ .  . . . . . . . . . . . . 10\n   6.  IANA Considerations  . . . . . . . . .\
    \ . . . . . . . . . . . . 10\n   7.  Security Considerations. . . . . . . . .\
    \ . . . . . . . . . . . 11\n   8.  Acknowledgements . . . . . . . . . . . . .\
    \ . . . . . . . . . . 11\n   9.  References . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . 12\n       9.1.  Normative References . . . . . . . . . .\
    \ . . . . . . . . 12\n       9.2.  Informative References . . . . . . . . . .\
    \ . . . . . . . 12\n   Author's Address . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . 12\n   Full Copyright Statement . . . . . . . . . . . . . . . .\
    \ . . . . . 13\n"
- title: 1. Introduction
  contents:
  - '1. Introduction

    '
- title: 1.1.  General
  contents:
  - "1.1.  General\n   The Transport Layer Security (TLS) protocol (RFC 2246, [2])\
    \ includes\n   features to negotiate selection of a lossless data compression\
    \ method\n   as part of the TLS Handshake Protocol and then to apply the algorithm\n\
    \   associated with the selected method as part of the TLS Record\n   Protocol.\
    \  TLS defines one standard compression method,\n   CompressionMethod.null, which\
    \ specifies that data exchanged via the\n   record protocol will not be compressed.\
    \  Although this single\n   compression method helps ensure that TLS implementations\
    \ are\n   interoperable, the lack of additional standard compression methods\n\
    \   has limited the ability to develop interoperative implementations\n   that\
    \ include data compression.\n   TLS is used extensively to secure client-server\
    \ connections on the\n   World Wide Web.  Although these connections can often\
    \ be\n   characterized as short-lived and exchanging relatively small amounts\n\
    \   of data, TLS is also being used in environments where connections can\n  \
    \ be long-lived and the amount of data exchanged can extend into\n   thousands\
    \ or millions of octets.  For example, TLS is now\n   increasingly being used\
    \ as an alternative Virtual Private Network\n   (VPN) connection.  Compression\
    \ services have long been associated\n   with IPSec and PPTP VPN connections,\
    \ so extending compression\n   services to TLS VPN connections preserves the user\
    \ experience for any\n   VPN connection.  Compression within TLS is one way to\
    \ help reduce the\n   bandwidth and latency requirements associated with exchanging\
    \ large\n   amounts of data while preserving the security services provided by\n\
    \   TLS.\n   This document describes an additional compression method associated\n\
    \   with a lossless data compression algorithm for use with TLS.  This\n   document\
    \ specifies the application of Lempel-Ziv-Stac (LZS)\n   compression, a lossless\
    \ compression algorithm, to TLS record\n   payloads.  This specification also\
    \ assumes a thorough understanding\n   of the TLS protocol [2].\n"
- title: 1.2.  Specification of Requirements
  contents:
  - "1.2.  Specification of Requirements\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in BCP 14, RFC 2119 [1].\n"
- title: 2.  Compression Methods
  contents:
  - "2.  Compression Methods\n   As described in section 6 of RFC 2246 [2], TLS is\
    \ a stateful\n   protocol.  Compression methods used with TLS can be either stateful\n\
    \   (the compressor maintains its state through all compressed records)\n   or\
    \ stateless (the compressor compresses each record independently),\n   but there\
    \ seems to be little known benefit in using a stateless\n   compression method\
    \ within TLS.  The LZS compression method described\n   in this document is stateful.\n\
    \   Compression algorithms can occasionally expand, rather than compress,\n  \
    \ input data.  The worst-case expansion factor of the LZS compression\n   method\
    \ is only 12.5%.  Thus, TLS records of 15K bytes can never\n   exceed the expansion\
    \ limits described in section 6.2.2 of RFC 2246\n   [2].  If TLS records of 16K\
    \ bytes expand to an amount greater than\n   17K bytes, then the uncompressed\
    \ version of the TLS record must be\n   transmitted, as described below.\n"
- title: 2.1.  LZS CompressionMethod
  contents:
  - "2.1.  LZS CompressionMethod\n   The LZS CompressionMethod is a 16-bit index and\
    \ is negotiated as\n   described in RFC 2246 [2] and RFC 3749 [3].  The LZS\n\
    \   CompressionMethod is stored in the TLS Record Layer connection state\n   as\
    \ described in RFC 2246 [2].\n   IANA has assigned 64 as compression method identifier\
    \ for applying\n   LZS compression to TLS record payloads.\n"
- title: 2.2.  Security Issues with Compression Histories
  contents:
  - "2.2.  Security Issues with Compression Histories\n   Sharing compression histories\
    \ between or among more than one TLS\n   session may potentially cause information\
    \ leakage between the TLS\n   sessions, as pathological compressed data can potentially\
    \ reference\n   data prior to the beginning of the current record.  LZS\n   implementations\
    \ guard against this situation.  However, to avoid this\n   potential threat,\
    \ implementations supporting TLS compression MUST use\n   separate compression\
    \ histories for each TLS session.  This is not a\n   limitation of LZS compression\
    \ but is an artifact for any compression\n   algorithm.\n   Furthermore, the LZS\
    \ compression history (as well as any compression\n   history) contains plaintext.\
    \  Specifically, the LZS history contains\n   the last 2K bytes of plaintext of\
    \ the TLS session.  Thus, when the\n   TLS session terminates, the implementation\
    \ SHOULD treat the history\n   as it does any plaintext (e.g., free memory, overwrite\
    \ contents).\n"
- title: 3.  LZS Compression
  contents:
  - '3.  LZS Compression

    '
- title: 3.1.  Background of LZS Compression
  contents:
  - "3.1.  Background of LZS Compression\n   Starting with a sliding window compression\
    \ history, similar to LZ1\n   [8], a new, enhanced compression algorithm identified\
    \ as LZS was\n   developed.  The LZS algorithm is a general-purpose lossless\n\
    \   compression algorithm for use with a wide variety of data types. Its\n   encoding\
    \ method is very efficient, providing compression for strings\n   as short as\
    \ two octets in length.\n   The LZS algorithm uses a sliding window of 2,048 bytes.\
    \  During\n   compression, redundant sequences of data are replaced with tokens\n\
    \   that represent those sequences.  During decompression, the original\n   sequences\
    \ are substituted for the tokens in such a way that the\n   original data is exactly\
    \ recovered.  LZS differs from lossy\n   compression algorithms, such as those\
    \ often used for video\n   compression, that do not exactly reproduce the original\
    \ data.  The\n   details of LZS compression can be found in section 3.5 below.\n"
- title: 3.2.  LZS Compression History and Record Processing
  contents:
  - "3.2.  LZS Compression History and Record Processing\n   This standard specifies\
    \ \"stateful\" compression -- that is,\n   maintaining the compression history\
    \ between records within a\n   particular TLS compression session.  Within each\
    \ separate compression\n   history, the LZS CompressionMethod can maintain compression\
    \ history\n   information when compressing and decompressing record payloads.\n\
    \   Stateful compression provides a higher compression ratio to be\n   achieved\
    \ on the data stream, as compared to stateless compression\n   (resetting the\
    \ compression history between every record),\n   particularly for small records.\n\
    \   Stateful compression requires both a reliable link and sequenced\n   record\
    \ delivery to ensure that all records can be decompressed in the\n   same order\
    \ they were compressed.  Since TLS and lower-layer protocols\n   provide reliable,\
    \ sequenced record delivery, compression history\n   information MAY be maintained\
    \ and exploited when the LZS\n   CompressionMethod is used.\n   Furthermore, there\
    \ MUST be a separate LZS compression history\n   associated with each open TLS\
    \ session.  This not only provides\n   enhanced security (no potential information\
    \ leakage between sessions\n   via a shared compression history), but also enables\
    \ superior\n   compression ratio (bit bandwidth on the connection) across all\
    \ open\n   TLS sessions with compression.  A shared history would require\n  \
    \ resetting the compression (and decompression) history when switching\n   between\
    \ TLS sessions, and a single history implementation would\n   require resetting\
    \ the compression (and decompression) history between\n   each record.\n   The\
    \ sender MUST reset the compression history prior to compressing\n   the first\
    \ TLS record of a TLS session after TLS handshake completes.\n   It is advantageous\
    \ for the sender to maintain the compression history\n   for all subsequent records\
    \ processed during the TLS session.  This\n   results in the greatest compression\
    \ ratio for a given data set.  In\n   either case, this compression history MUST\
    \ NOT be used for any other\n   open TLS session, to ensure privacy between TLS\
    \ sessions.\n   The sender MUST \"flush\" the compressor each time it transmits\
    \ a\n   compressed record.  Flushing means that all data going into the\n   compressor\
    \ is included in the output, i.e., no data is retained in\n   the hope of achieving\
    \ better compression.  Flushing ensures that each\n   compressed record payload\
    \ can be decompressed completely. Flushing is\n   necessary to prevent a record's\
    \ data from spilling over into a later\n   record.  This is important for synchronizing\
    \ compressed data with the\n   authenticated and encrypted data in a TLS record.\
    \  Flushing is\n   handled automatically in most LZS implementations.\n   When\
    \ the TLS session terminates, the implementation SHOULD dispose of\n   the memory\
    \ resources associated with the related TLS compression\n   history.  That is,\
    \ the compression history SHOULD be handled as the\n   TLS key material is handled.\n\
    \   The LZS CompressionMethod also features \"decompressing\" uncompressed\n \
    \  data in order to maintain the history if the \"compressed\" data\n   actually\
    \ expanded.  The LZS CompressionMethod record format\n   facilitates identifying\
    \ whether records contain compressed or\n   uncompressed data.  The LZS decoding\
    \ process accommodates\n   decompressing either compressed or uncompressed data.\n"
- title: 3.3.  LZS Compressed Record Format
  contents:
  - "3.3.  LZS Compressed Record Format\n   Prior to compression, the uncompressed\
    \ data (TLSPlaintext.fragment)\n   is composed of a plaintext TLS record.  After\
    \ compression, the\n   compressed data (TLSCompressed.fragment) is composed of\
    \ an 8-bit\n   TLSComp header followed by the compressed (or uncompressed) data.\n"
- title: 3.4.  TLSComp Header Format
  contents:
  - "3.4.  TLSComp Header Format\n   The one-octet header has the following structure:\n\
    \      0\n      0 1 2 3 4 5 6 7\n      +-+-+-+-+-+-+-+-+\n      |     Flags  \
    \   |\n      |               |\n      +-+-+-+-+-+-+-+-+\n"
- title: 3.4.1.  Flags
  contents:
  - "3.4.1.  Flags\n   The format of the 8-bit Flags TLSComp field is as follows:\n\
    \         0     1     2     3     4     5     6     7\n      +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \      | Res | Res | Res | Res | Res | Res | RST | C/U |\n      +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \   Res-Reserved\n      Reserved for future use.  MUST be set to zero.  MUST be\
    \ ignored by\n      the receiving node.\n   RST-Reset Compression History\n  \
    \    The RST bit is used to inform the decompressing peer that the\n      compression\
    \ history in this TLS session was reset prior to the\n      data contained in\
    \ this TLS record being compressed.  When the RST\n      bit is set to \"1\",\
    \ a compression history reset is performed; when\n      RST is set to \"0\", a\
    \ compression history reset is not performed.\n      This bit MUST be set to a\
    \ value of \"1\" for the first compressed\n      TLS transmitted record of a TLS\
    \ session.  This bit may also be\n      used by the transmitter for other exception\
    \ cases when the\n      compression history must be reset.\n   C/U-Compressed/Uncompressed\
    \ Bit\n      The C/U indicates whether the data field contains compressed or\n\
    \      uncompressed data.  A value of 1 indicates compressed data (often\n   \
    \   referred to as a compressed record), and a value of 0 indicates\n      uncompressed\
    \ data (or an uncompressed record).\n"
- title: 3.5.  LZS Compression Encoding Format
  contents:
  - "3.5.  LZS Compression Encoding Format\n   The LZS compression method, encoding\
    \ format, and application examples\n   are described in RFC 1967 [6], RFC 1974\
    \ [5], and RFC 2395 [4].\n   Some implementations of LZS allow the sending compressor\
    \ to select\n   from among several options to provide varying compression ratios,\n\
    \   processing speeds, and memory requirements.  Other implementations of\n  \
    \ LZS provide optimal compression ratio at byte-per-clock speeds.\n   The receiving\
    \ LZS decompressor automatically adjusts to the settings\n   selected by the sender.\
    \  Also, receiving LZS decompressors will\n   update the decompression history\
    \ with uncompressed data.  This\n   facilitates never obtaining less than a 1:1\
    \ compression ratio in the\n   session and never transmitting with expanded data.\n\
    \   The input to the payload compression algorithm is TLSPlaintext data\n   destined\
    \ to an active TLS session with compression negotiated.  The\n   output of the\
    \ algorithm is a new (and hopefully smaller)\n   TLSCompressed record.  The output\
    \ payload contains the input\n   payload's data in either compressed or uncompressed\
    \ format.  The\n   input and output payloads are each an integral number of bytes\
    \ in\n   length.\n   The output payload is always prepended with the TLSComp header.\
    \  If\n   the uncompressed form is used, the output payload is identical to the\n\
    \   input payload, and the TLSComp header reflects uncompressed data.\n   If the\
    \ compressed form is used, encoded as defined in ANSI X3.241\n   [7], and the\
    \ TLSComp header reflects compressed data.  The LZS\n   encoded format is repeated\
    \ here for informational purposes ONLY.\n   <Compressed Stream> := [<Compressed\
    \ String>*] <End Marker>\n   <Compressed String> := 0 <Raw Byte> | 1 <Compressed\
    \ Bytes>\n   <Raw Byte> := <b><b><b><b><b><b><b><b>          (8-bit byte)\n  \
    \ <Compressed Bytes> := <Offset> <Length>\n   <Offset> := 1 <b><b><b><b><b><b><b>\
    \ |           (7-bit offset)\n               0 <b><b><b><b><b><b><b><b><b><b><b>\
    \ (11-bit offset)\n   <End Marker> := 110000000\n   <b> := 1 | 0\n   <Length>\
    \ :=\n   00        = 2     1111 0110      = 14\n   01        = 3     1111 0111\
    \      = 15\n   10        = 4     1111 1000      = 16\n   1100      = 5     1111\
    \ 1001      = 17\n   1101      = 6     1111 1010      = 18\n   1110      = 7 \
    \    1111 1011      = 19\n   1111 0000 = 8     1111 1100      = 20\n   1111 0001\
    \ = 9     1111 1101      = 21\n   1111 0010 = 10    1111 1110      = 22\n   1111\
    \ 0011 = 11    1111 1111 0000 = 23\n   1111 0100 = 12    1111 1111 0001 = 24\n\
    \   1111 0101 = 13     ...\n"
- title: 3.6.  Padding
  contents:
  - "3.6.  Padding\n   A datagram payload compressed with LZS always ends with the\
    \ last\n   compressed data byte (also known as the <end marker>), which is used\n\
    \   to disambiguate padding.  This allows trailing bits, as well as\n   bytes,\
    \ to be considered padding.\n   The size of a compressed payload MUST be in whole\
    \ octet units.\n"
- title: 4.  Sending Compressed Datagrams
  contents:
  - "4.  Sending Compressed Datagrams\n   All TLS records processed with a TLS session\
    \ state that includes LZS\n   compression are processed as follows.  The reliable\
    \ and efficient\n   transport of LZS compressed records in the TLS session depends\
    \ on the\n   following processes.\n"
- title: 4.1.  Transmitter Process
  contents:
  - "4.1.  Transmitter Process\n   The compression operation results in either compressed\
    \ or\n   uncompressed data.  When a TLS record is received, it is assigned to\n\
    \   a particular TLS context that includes the LZS compression history\n   buffer.\
    \  It is processed according to ANSI X3.241-1994 to form\n   compressed data or\
    \ used as is to form uncompressed data.  For the\n   first record of the session,\
    \ or for exception conditions, the\n   compression history MUST be cleared.  In\
    \ performing the compression\n   operation, the compression history MUST be updated\
    \ when either a\n   compressed record or an uncompressed record is produced.\n\
    \   Uncompressed TLS records MAY be sent at any time. Uncompressed TLS\n   records\
    \ MUST be sent if compression causes enough expansion to make\n   the data compression\
    \ TLS record size exceed the MTU defined in\n   section 6.2.2 in RFC 2246.  The\
    \ output of the compression operation\n   is placed in the fragment field of the\
    \ TLSCompressed structure\n   (TLSCompressed.fragment).\n   The TLSComp header\
    \ byte is located just prior to the first byte of\n   the compressed TLS record\
    \ in TLSCompressed.fragment.  The C/U bit in\n   the TLSComp header is set according\
    \ to whether the data field\n   contains compressed or uncompressed data.  The\
    \ RST bit in the TLSComp\n   header is set to \"1\" if the compression history\
    \ was reset prior to\n   compressing the TLSplaintext.fragment that is composed\
    \ of a\n   TLSCompressed.fragment.  Uncompressed data MUST be transmitted (and\n\
    \   the C/U bit set to 0) if the \"compressed\" (expanded) data exceeded\n   17K\
    \ bytes.\n"
- title: 4.2.  Receiver Process
  contents:
  - "4.2.  Receiver Process\n   Prior to decompressing the first compressed TLS record\
    \ in the TLS\n   session, the receiver MUST reset the decompression history.\n\
    \   Subsequent records are decompressed in the order received.  The\n   receiver\
    \ decompresses the Payload Data field according to the\n   encoding specified\
    \ in section 3.5 above.\n   If the received datagram is not compressed, the receiver\
    \ does not\n   need to perform decompression processing, and the Payload Data\
    \ field\n   of the datagram is ready for processing by the next protocol layer.\n\
    \   After a TLS record is received from the peer and decrypted, the RST\n   and\
    \ C/U bits MUST be checked.\n   If the C/U bit is set to \"1\", the resulting\
    \ compressed data block\n   MUST be decompressed according to section 3.5 above.\n\
    \   If the C/U bit is set to \"0\", the specified decompression history\n   MUST\
    \ be updated with the received uncompressed data.\n   If the RST bit is set to\
    \ \"1\", the receiving decompression history MAY\n   be reset to an initial state\
    \ prior to decompressing the TLS record.\n   (However, due to the characteristics\
    \ of the Hifn LZS algorithm, a\n   decompression history reset is not required).\
    \  After reset, any\n   compressed or uncompressed data contained in the record\
    \ is processed.\n"
- title: 4.3.  Anti-expansion Mechanism
  contents:
  - "4.3.  Anti-expansion Mechanism\n   During compression, there are two workable\
    \ options for handling\n   records that expand:\n   1) Send the expanded data\
    \ (as long as TLSCompressed.length is 17K or\n      less) and maintain the history,\
    \ thus allowing loss of current\n      bandwidth but preserving future bandwidth\
    \ on the link.\n   2) Send the uncompressed data and do not clear the compression\n\
    \      history; the decompressor will update its history, thus conserving\n  \
    \    the current bandwidth and future bandwidth on the link.\n   The second option\
    \ is the preferred option and SHOULD be implemented.\n   There is a third option:\n\
    \   3) Send the uncompressed data and clear the history, thus conserving\n   \
    \   current bandwidth but allowing possible loss of future bandwidth\n      on\
    \ the link.\n   This option SHOULD NOT be implemented.\n"
- title: 5.  Internationalization Considerations
  contents:
  - "5.  Internationalization Considerations\n   The compression method identifiers\
    \ specified in this document are\n   machine-readable numbers.  As such, issues\
    \ of human\n   internationalization and localization are not introduced.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   Section 2 of RFC 3749 [3] describes a registry of\
    \ compression method\n   identifiers to be maintained by the IANA and to be assigned\
    \ within\n   three zones.\n   IANA has assigned an identifier for the LZS compression\
    \ method from\n   the RFC 2434 Specification Required IANA pool, as described\
    \ in\n   sections 2 and 5 of RFC 3749 [3].\n   The IANA-assigned compression method\
    \ identifier for LZS is 64 decimal\n   (0x40).\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   This document does not introduce any topics that\
    \ alter the threat\n   model addressed by TLS.  The security considerations described\n\
    \   throughout RFC 2246 [2] apply here as well.\n   However, combining compression\
    \ with encryption can sometimes reveal\n   information that would not have been\
    \ revealed without compression.\n   Data that is the same length before compression\
    \ might be a different\n   length after compression, so adversaries that observe\
    \ the length of\n   the compressed data might be able to derive information about\
    \ the\n   corresponding uncompressed data.  Some symmetric encryption\n   ciphersuites\
    \ do not hide the length of symmetrically encrypted data\n   at all.  Others hide\
    \ it to some extent but not fully.  For example,\n   ciphersuites that use stream\
    \ cipher encryption without padding do not\n   hide length at all; ciphersuites\
    \ that use Cipher Block Chaining (CBC)\n   encryption with padding provide some\
    \ length hiding, depending on how\n   the amount of padding is chosen.  Use of\
    \ TLS compression SHOULD take\n   into account that the length of compressed data\
    \ may leak more\n   information than the length of the original uncompressed data.\n\
    \   Another security issue to be aware of is that the LZS compression\n   history\
    \ contains plaintext.  In order to prevent any kind of\n   information leakage\
    \ outside the system, when a TLS session with\n   compression terminates, the\
    \ implementation SHOULD treat the\n   compression history as it does plaintext\
    \ -- that is, care should be\n   taken not to reveal the compression history in\
    \ any form or to use it\n   again.  This is described in sections 2.2 and 3.2\
    \ above.\n   This information leakage concept can be extended to the situation\
    \ of\n   sharing a single compression history across more than one TLS\n   session,\
    \ as addressed in section 2.2 above.\n   Other security issues are discussed in\
    \ RFC 3749 [3].\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   The concepts described in this document were derived\
    \ from RFC 1967\n   [6], RFC 1974 [5], RFC 2395 [4], and RFC 3749 [3].  The author\n\
    \   acknowledges the contributions of Scott Hollenbeck, Douglas Whiting,\n   and\
    \ Russell Dietz, and help from Steve Bellovin, Russ Housley, and\n   Eric Rescorla.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [1]  Bradner, S., \"Key words for use in RFCs\
    \ to Indicate Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n \
    \  [2]  Dierks, T. and C. Allen, \"The TLS Protocol Version 1.0\", RFC\n     \
    \   2246, January 1999.\n   [3]  Hollenbeck, S. \"Transport Layer Security Protocol\
    \ Compression\n        Methods\", RFC 3749, May 2004.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [4]  Friend, R. and R. Monsour, \"IP Payload\
    \ Compression Using LZS\",\n        RFC 2395, December 1998.\n   [5]  Friend,\
    \ R. and W. Simpson, \"PPP Stac LZS Compression Protocol\",\n        RFC 1974,\
    \ August 1996.\n   [6]  Schneider, K. and R. Friend, \"PPP LZS-DCP Compression\
    \ Protocol\n        (LZS-DCP)\", RFC 1967, August 1996.\n   [7]  American National\
    \ Standards Institute, Inc., \"Data Compression\n        Method for Information\
    \ Systems,\" ANSI X3.241-1994, August 1994.\n   [8]  Lempel, A. and J. Ziv, \"\
    A Universal Algorithm for Sequential\n        Data Compression\", IEEE Transactions\
    \ On Information Theory, Vol.\n        IT-23, No. 3, September 1977.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Robert Friend\n   Hifn\n   5973 Avenida Encinas\n   Carlsbad,\
    \ CA 92008\n   US\n   EMail: rfriend@hifn.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2004).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and at www.rfc-editor.org, and except as set\n   forth therein, the\
    \ authors retain all their rights.\n   This document and the information contained\
    \ herein are provided on an\n   \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION\
    \ HE/SHE REPRESENTS\n   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND\
    \ THE INTERNET\n   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR\
    \ IMPLIED,\n   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE\n\
    \   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES\
    \ OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ ISOC's procedures with respect to rights in ISOC Documents can\n   be found\
    \ in BCP 78 and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat\
    \ and any\n   assurances of licenses to be made available, or the result of an\n\
    \   attempt made to obtain a general license or permission for the use of\n  \
    \ such proprietary rights by implementers or users of this\n   specification can\
    \ be obtained from the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n\
    \   The IETF invites any interested party to bring to its attention any\n   copyrights,\
    \ patents or patent applications, or other proprietary\n   rights that may cover\
    \ technology that may be required to implement\n   this standard.  Please address\
    \ the information to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
