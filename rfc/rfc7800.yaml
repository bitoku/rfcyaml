- contents:
  - '      Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This specification describes how to declare in a JSON Web Token
    (JWT)\n   that the presenter of the JWT possesses a particular proof-of-\n   possession
    key and how the recipient can cryptographically confirm\n   proof of possession
    of the key by the presenter.  Being able to prove\n   possession of a key is also
    sometimes described as the presenter\n   being a holder-of-key.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7800.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   2\n     1.1.  Notational Conventions  . . . . . . . . . . . . . .
    . . .   5\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . .
    .   5\n   3.  Representations for Proof-of-Possession Keys  . . . . . . . .   5\n
    \    3.1.  Confirmation Claim  . . . . . . . . . . . . . . . . . . .   6\n     3.2.
    \ Representation of an Asymmetric Proof-of-Possession Key .   7\n     3.3.  Representation
    of an Encrypted Symmetric Proof-of-\n           Possession Key  . . . . . . .
    . . . . . . . . . . . . . .   7\n     3.4.  Representation of a Key ID for a Proof-of-Possession
    Key    8\n     3.5.  Representation of a URL for a Proof-of-Possession Key . .
    \  9\n     3.6.  Specifics Intentionally Not Specified . . . . . . . . . .  10\n
    \  4.  Security Considerations . . . . . . . . . . . . . . . . . . .  10\n   5.
    \ Privacy Considerations  . . . . . . . . . . . . . . . . . . .  11\n   6.  IANA
    Considerations . . . . . . . . . . . . . . . . . . . . .  11\n     6.1.  JSON
    Web Token Claims Registration  . . . . . . . . . . .  12\n       6.1.1.  Registry
    Contents . . . . . . . . . . . . . . . . . .  12\n     6.2.  JWT Confirmation
    Methods Registry . . . . . . . . . . . .  12\n       6.2.1.  Registration Template
    . . . . . . . . . . . . . . . .  12\n       6.2.2.  Initial Registry Contents
    . . . . . . . . . . . . . .  13\n   7.  References  . . . . . . . . . . . . .
    . . . . . . . . . . . .  13\n     7.1.  Normative References  . . . . . . . .
    . . . . . . . . . .  13\n     7.2.  Informative References  . . . . . . . . .
    . . . . . . . .  14\n   Acknowledgements  . . . . . . . . . . . . . . . . . .
    . . . . . .  15\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . .
    . . . .  15\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This specification describes how a JSON Web Token [JWT]
    can declare\n   that the presenter of the JWT possesses a particular proof-of-\n
    \  possession (PoP) key and how the recipient can cryptographically\n   confirm
    proof of possession of the key by the presenter.  Proof of\n   possession of a
    key is also sometimes described as the presenter\n   being a holder-of-key.  The
    [OAUTH-POP-ARCH] specification describes\n   key confirmation, among other confirmation
    mechanisms.  This\n   specification defines how to communicate confirmation key
    information\n   in JWTs.\n   Envision the following two use cases.  The first
    use case employs a\n   symmetric proof-of-possession key and the second use case
    employs an\n   asymmetric proof-of-possession key.\n     +--------------+\n     |
    \             |                         +--------------+\n     |              |--(3)
    Presentation of -->|              |\n     |              |      JWT w/ Encrypted
    \  |              |\n     |  Presenter   |      PoP Key            |              |\n
    \    |              |                         |              |\n     |              |<-(4)
    Communication ---->|              |\n     |              |      Authenticated
    by   |              |\n     +--------------+      PoP Key            |              |\n
    \      ^          ^                           |              |\n       |          |
    \                          |              |\n      (1) Sym.   (2) JWT w/                   |
    \ Recipient   |\n       |  PoP     |  Encrypted                |              |\n
    \      |  Key     |  PoP Key                  |              |\n       v          |
    \                          |              |\n     +--------------+                         |
    \             |\n     |              |                         |              |\n
    \    |              |                         |              |\n     |              |<-(0)
    Key Exchange for ->|              |\n     |   Issuer     |      Key Encryption
    Key |              |\n     |              |                         |              |\n
    \    |              |                         |              |\n     |              |
    \                        +--------------+\n     +--------------+\n            Figure
    1: Proof of Possession with a Symmetric Key\n   In the case illustrated in Figure
    1, (1) either the presenter\n   generates a symmetric key and privately sends
    it to the issuer or the\n   issuer generates a symmetric key and privately sends
    it to the\n   presenter.  The issuer generates a JWT with an encrypted copy of
    this\n   symmetric key in the confirmation claim.  This symmetric key is\n   encrypted
    with a key known only to the issuer and the recipient,\n   which was previously
    established in step (0).  The entire JWT is\n   integrity protected by the issuer.
    \ The JWT is then (2) sent to the\n   presenter.  Now, the presenter is in possession
    of the symmetric key\n   as well as the JWT (which includes the confirmation claim).
    \ When the\n   presenter (3) presents the JWT to the recipient, it also needs
    to\n   demonstrate possession of the symmetric key; the presenter, for\n   example,
    (4) uses the symmetric key in a challenge/response protocol\n   with the recipient.
    \ The recipient is then able to verify that it is\n   interacting with the genuine
    presenter by decrypting the key in the\n   confirmation claim of the JWT.  By
    doing this, the recipient obtains\n   the symmetric key, which it then uses to
    verify cryptographically\n   protected messages exchanged with the presenter (4).
    \ This symmetric\n   key mechanism described above is conceptually similar to
    the use of\n   Kerberos tickets.\n   Note that for simplicity, the diagram above
    and associated text\n   describe the direct use of symmetric keys without the
    use of derived\n   keys.  A more secure practice is to derive the symmetric keys\n
    \  actually used from secrets exchanged, such as the key exchanged in\n   step
    (0), using a Key Derivation Function (KDF) and use the derived\n   keys, rather
    than directly using the secrets exchanged.\n     +--------------+\n     |              |
    \                        +--------------+\n     |              |--(3) Presentation
    of -->|              |\n     |              |      JWT w/ Public      |              |\n
    \    |  Presenter   |      PoP Key            |              |\n     |              |
    \                        |              |\n     |              |<-(4) Communication
    ---->|              |\n     |              |      Authenticated by   |              |\n
    \    +--------------+      PoP Key            |              |\n       |          ^
    \                          |              |\n       |          |                           |
    \             |\n      (1) Public (2) JWT w/                   |  Recipient   |\n
    \      |  PoP     |  Public                   |              |\n       |  Key
    \    |  PoP Key                  |              |\n       v          |                           |
    \             |\n     +--------------+                         |              |\n
    \    |              |                         |              |\n     |              |
    \                        |              |\n     |              |                         |
    \             |\n     |    Issuer    |                         |              |\n
    \    |              |                         |              |\n     |              |
    \                        |              |\n     |              |                         +--------------+\n
    \    +--------------+\n           Figure 2: Proof of Possession with an Asymmetric
    Key\n   In the case illustrated in Figure 2, the presenter generates a\n   public/private
    key pair and (1) sends the public key to the issuer,\n   which creates a JWT that
    contains the public key (or an identifier\n   for it) in the confirmation claim.
    \ The entire JWT is integrity\n   protected using a digital signature to protect
    it against\n   modifications.  The JWT is then (2) sent to the presenter.  When
    the\n   presenter (3) presents the JWT to the recipient, it also needs to\n   demonstrate
    possession of the private key.  The presenter, for\n   example, (4) uses the private
    key in a Transport Layer Security (TLS)\n   exchange with the recipient or (4)
    signs a nonce with the private\n   key.  The recipient is able to verify that
    it is interacting with the\n   genuine presenter by extracting the public key
    from the confirmation\n   claim of the JWT (after verifying the digital signature
    of the JWT)\n   and utilizing it with the private key in the TLS exchange or by\n
    \  checking the nonce signature.\n   In both cases, the JWT may contain other
    claims that are needed by\n   the application.\n"
  - contents:
    - "1.1.  Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT
      RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted
      as described in RFC\n   2119 [RFC2119].\n   Unless otherwise noted, all the
      protocol parameter names and values\n   are case sensitive.\n"
    title: 1.1.  Notational Conventions
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   This specification uses terms defined in the JSON Web Token
    [JWT],\n   JSON Web Key [JWK], and JSON Web Encryption [JWE] specifications.\n
    \  These terms are defined by this specification:\n   Issuer\n      Party that
    creates the JWT and binds the proof-of-possession key\n      to it.\n   Presenter\n
    \     Party that proves possession of a private key (for asymmetric key\n      cryptography)
    or secret key (for symmetric key cryptography) to a\n      recipient.\n   Recipient\n
    \     Party that receives the JWT containing the proof-of-possession key\n      information
    from the presenter.\n"
  title: 2.  Terminology
- contents:
  - "3.  Representations for Proof-of-Possession Keys\n   By including a \"cnf\" (confirmation)
    claim in a JWT, the issuer of the\n   JWT declares that the presenter possesses
    a particular key and that\n   the recipient can cryptographically confirm that
    the presenter has\n   possession of that key.  The value of the \"cnf\" claim
    is a JSON\n   object and the members of that object identify the proof-of-\n   possession
    key.\n   The presenter can be identified in one of several ways by the JWT\n   depending
    upon the application requirements.  If the JWT contains a\n   \"sub\" (subject)
    claim [JWT], the presenter is normally the subject\n   identified by the JWT.
    \ (In some applications, the subject identifier\n   will be relative to the issuer
    identified by the \"iss\" (issuer) claim\n   [JWT].)  If the JWT contains no \"sub\"
    claim, the presenter is\n   normally the issuer identified by the JWT using the
    \"iss\" claim.  The\n   case in which the presenter is the subject of the JWT
    is analogous to\n   Security Assertion Markup Language (SAML) 2.0\n   [OASIS.saml-core-2.0-os]
    SubjectConfirmation usage.  At least one of\n   the \"sub\" and \"iss\" claims
    MUST be present in the JWT.  Some use\n   cases may require that both be present.\n
    \  Another means used by some applications to identify the presenter is\n   an
    explicit claim, such as the \"azp\" (authorized party) claim defined\n   by OpenID
    Connect [OpenID.Core].  Ultimately, the means of\n   identifying the presenter
    is application specific, as is the means of\n   confirming possession of the key
    that is communicated.\n"
  - contents:
    - "3.1.  Confirmation Claim\n   The \"cnf\" claim is used in the JWT to contain
      members used to\n   identify the proof-of-possession key.  Other members of
      the \"cnf\"\n   object may be defined because a proof-of-possession key may
      not be\n   the only means of confirming the authenticity of the token.  This
      is\n   analogous to the SAML 2.0 [OASIS.saml-core-2.0-os]\n   SubjectConfirmation
      element in which a number of different subject\n   confirmation methods can
      be included (including proof-of-possession\n   key information).\n   The set
      of confirmation members that a JWT must contain to be\n   considered valid is
      context dependent and is outside the scope of\n   this specification.  Specific
      applications of JWTs will require\n   implementations to understand and process
      some confirmation members\n   in particular ways.  However, in the absence of
      such requirements,\n   all confirmation members that are not understood by implementations\n
      \  MUST be ignored.\n   This specification establishes the IANA \"JWT Confirmation
      Methods\"\n   registry for these members in Section 6.2 and registers the members\n
      \  defined by this specification.  Other specifications can register\n   other
      members used for confirmation, including other members for\n   conveying proof-of-possession
      keys using different key\n   representations.\n   The \"cnf\" claim value MUST
      represent only a single proof-of-\n   possession key; thus, at most one of the
      \"jwk\", \"jwe\", and \"jku\" (JWK\n   Set URL) confirmation values defined
      below may be present.  Note that\n   if an application needs to represent multiple
      proof-of-possession\n   keys in the same JWT, one way for it to achieve this
      is to use other\n   claim names, in addition to \"cnf\", to hold the additional
      proof-of-\n   possession key information.  These claims could use the same syntax\n
      \  and semantics as the \"cnf\" claim.  Those claims would be defined by\n   applications
      or other specifications and could be registered in the\n   IANA \"JSON Web Token
      Claims\" registry [IANA.JWT.Claims].\n"
    title: 3.1.  Confirmation Claim
  - contents:
    - "3.2.  Representation of an Asymmetric Proof-of-Possession Key\n   When the
      key held by the presenter is an asymmetric private key, the\n   \"jwk\" member
      is a JSON Web Key [JWK] representing the corresponding\n   asymmetric public
      key.  The following example demonstrates such a\n   declaration in the JWT Claims
      Set of a JWT:\n     {\n      \"iss\": \"https://server.example.com\",\n      \"aud\":
      \"https://client.example.org\",\n      \"exp\": 1361398824,\n      \"cnf\":{\n
      \       \"jwk\":{\n          \"kty\": \"EC\",\n          \"use\": \"sig\",\n
      \         \"crv\": \"P-256\",\n          \"x\": \"18wHLeIgW9wVN6VD1Txgpqy2LszYkMf6J8njVAibvhM\",\n
      \         \"y\": \"-V4dS4UaLMgP_4fY4j8ir7cl1TXlFdAgcx55o7TkcSA\"\n         }\n
      \      }\n     }\n   The JWK MUST contain the required key members for a JWK
      of that key\n   type and MAY contain other JWK members, including the \"kid\"
      (Key ID)\n   member.\n   The \"jwk\" member MAY also be used for a JWK representing
      a symmetric\n   key, provided that the JWT is encrypted so that the key is not\n
      \  revealed to unintended parties.  The means of encrypting a JWT is\n   explained
      in [JWT].  If the JWT is not encrypted, the symmetric key\n   MUST be encrypted
      as described below.\n"
    title: 3.2.  Representation of an Asymmetric Proof-of-Possession Key
  - contents:
    - "3.3.  Representation of an Encrypted Symmetric Proof-of-Possession Key\n   When
      the key held by the presenter is a symmetric key, the \"jwe\"\n   member is
      an encrypted JSON Web Key [JWK] encrypted to a key known to\n   the recipient
      using the JWE Compact Serialization containing the\n   symmetric key.  The rules
      for encrypting a JWK are found in Section 7\n   of the JSON Web Key [JWK] specification.\n
      \  The following example illustrates a symmetric key that could\n   subsequently
      be encrypted for use in the \"jwe\" member:\n     {\n      \"kty\": \"oct\",\n
      \     \"alg\": \"HS256\",\n      \"k\": \"ZoRSOrFzN_FzUA5XKMYoVHyzff5oRJxl-IXRtztJ6uE\"\n
      \    }\n   The UTF-8 [RFC3629] encoding of this JWK is used as the JWE Plaintext\n
      \  when encrypting the key.\n   The following example is a JWE Header that could
      be used when\n   encrypting this key:\n     {\n      \"alg\": \"RSA-OAEP\",\n
      \     \"enc\": \"A128CBC-HS256\"\n     }\n   The following example JWT Claims
      Set of a JWT illustrates the use of\n   an encrypted symmetric key as the \"jwe\"
      member value:\n     {\n      \"iss\": \"https://server.example.com\",\n      \"sub\":
      \"24400320\",\n      \"aud\": \"s6BhdRkqt3\",\n      \"nonce\": \"n-0S6_WzA2Mj\",\n
      \     \"exp\": 1311281970,\n      \"iat\": 1311280970,\n      \"cnf\":{\n        \"jwe\":\n
      \         \"eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkExMjhDQkMtSFMyNTYifQ.\n          (remainder
      of JWE omitted for brevity)\"\n        }\n     }\n"
    title: 3.3.  Representation of an Encrypted Symmetric Proof-of-Possession Key
  - contents:
    - "3.4.  Representation of a Key ID for a Proof-of-Possession Key\n   The proof-of-possession
      key can also be identified by the use of a\n   Key ID instead of communicating
      the actual key, provided the\n   recipient is able to obtain the identified
      key using the Key ID.  In\n   this case, the issuer of a JWT declares that the
      presenter possesses\n   a particular key and that the recipient can cryptographically
      confirm\n   proof of possession of the key by the presenter by including a \"cnf\"\n
      \  claim in the JWT whose value is a JSON object with the JSON object\n   containing
      a \"kid\" member identifying the key.\n   The following example demonstrates
      such a declaration in the JWT\n   Claims Set of a JWT:\n     {\n      \"iss\":
      \"https://server.example.com\",\n      \"aud\": \"https://client.example.org\",\n
      \     \"exp\": 1361398824,\n      \"cnf\":{\n        \"kid\": \"dfd1aa97-6d8d-4575-a0fe-34b96de2bfad\"\n
      \      }\n     }\n   The content of the \"kid\" value is application specific.
      \ For\n   instance, some applications may choose to use a JWK Thumbprint\n   [JWK.Thumbprint]
      value as the \"kid\" value.\n"
    title: 3.4.  Representation of a Key ID for a Proof-of-Possession Key
  - contents:
    - "3.5.  Representation of a URL for a Proof-of-Possession Key\n   The proof-of-possession
      key can be passed by reference instead of\n   being passed by value.  This is
      done using the \"jku\" member.  Its\n   value is a URI [RFC3986] that refers
      to a resource for a set of JSON-\n   encoded public keys represented as a JWK
      Set [JWK], one of which is\n   the proof-of-possession key.  If there are multiple
      keys in the\n   referenced JWK Set document, a \"kid\" member MUST also be included\n
      \  with the referenced key's JWK also containing the same \"kid\" value.\n   The
      protocol used to acquire the resource MUST provide integrity\n   protection.
      \ An HTTP GET request to retrieve the JWK Set MUST use TLS\n   [RFC5246] and
      the identity of the server MUST be validated, as per\n   Section 6 of RFC 6125
      [RFC6125].\n   The following example demonstrates such a declaration in the
      JWT\n   Claims Set of a JWT:\n     {\n      \"iss\": \"https://server.example.com\",\n
      \     \"sub\": \"17760704\",\n      \"aud\": \"https://client.example.org\",\n
      \     \"exp\": 1440804813,\n      \"cnf\":{\n        \"jku\": \"https://keys.example.net/pop-keys.json\",\n
      \       \"kid\": \"2015-08-28\"\n       }\n     }\n"
    title: 3.5.  Representation of a URL for a Proof-of-Possession Key
  - contents:
    - "3.6.  Specifics Intentionally Not Specified\n   Proof of possession is typically
      demonstrated by having the presenter\n   sign a value determined by the recipient
      using the key possessed by\n   the presenter.  This value is sometimes called
      a \"nonce\" or a\n   \"challenge\".\n   The means of communicating the nonce
      and the nature of its contents\n   are intentionally not described in this specification,
      as different\n   protocols will communicate this information in different ways.\n
      \  Likewise, the means of communicating the signed nonce is also not\n   specified,
      as this is also protocol specific.\n   Note that another means of proving possession
      of the key when it is a\n   symmetric key is to encrypt the key to the recipient.
      \ The means of\n   obtaining a key for the recipient is likewise protocol specific.\n
      \  For examples using the mechanisms defined in this specification, see\n   [OAUTH-POP-ARCH].\n"
    title: 3.6.  Specifics Intentionally Not Specified
  title: 3.  Representations for Proof-of-Possession Keys
- contents:
  - "4.  Security Considerations\n   All of the security considerations that are discussed
    in [JWT] also\n   apply here.  In addition, proof of possession introduces its
    own\n   unique security issues.  Possessing a key is only valuable if it is\n
    \  kept secret.  Appropriate means must be used to ensure that\n   unintended
    parties do not learn private key or symmetric key values.\n   Applications utilizing
    proof of possession should also utilize\n   audience restriction, as described
    in Section 4.1.3 of [JWT], as it\n   provides different protections.  Proof of
    possession can be used by\n   recipients to reject messages from unauthorized
    senders.  Audience\n   restriction can be used by recipients to reject messages
    intended for\n   different recipients.\n   A recipient might not understand the
    \"cnf\" claim.  Applications that\n   require the proof-of-possession keys communicated
    with it to be\n   understood and processed must ensure that the parts of this\n
    \  specification that they use are implemented.\n   Proof of possession via encrypted
    symmetric secrets is subject to\n   replay attacks.  This attack can, for example,
    be avoided when a\n   signed nonce or challenge is used since the recipient can
    use a\n   distinct nonce or challenge for each interaction.  Replay can also be\n
    \  avoided if a sub-key is derived from a shared secret that is specific\n   to
    the instance of the PoP demonstration.\n   As is the case with other information
    included in a JWT, it is\n   necessary to apply data origin authentication and
    integrity\n   protection (via a keyed message digest or a digital signature).
    \ Data\n   origin authentication ensures that the recipient of the JWT learns\n
    \  about the entity that created the JWT since this will be important\n   for
    any policy decisions.  Integrity protection prevents an adversary\n   from changing
    any elements conveyed within the JWT payload.  Special\n   care has to be applied
    when carrying symmetric keys inside the JWT\n   since those not only require integrity
    protection but also\n   confidentiality protection.\n"
  title: 4.  Security Considerations
- contents:
  - "5.  Privacy Considerations\n   A proof-of-possession key can be used as a correlation
    handle if the\n   same key is used with multiple parties.  Thus, for privacy reasons,\n
    \  it is recommended that different proof-of-possession keys be used\n   when
    interacting with different parties.\n"
  title: 5.  Privacy Considerations
- contents:
  - "6.  IANA Considerations\n   The following registration procedure is used for
    all the registries\n   established by this specification.\n   Values are registered
    on a Specification Required [RFC5226] basis\n   after a three-week review period
    on the jwt-reg-review@ietf.org\n   mailing list, on the advice of one or more
    Designated Experts.\n   However, to allow for the allocation of values prior to
    publication,\n   the Designated Experts may approve registration once they are\n
    \  satisfied that such a specification will be published.\n   Registration requests
    sent to the mailing list for review should use\n   an appropriate subject (e.g.,
    \"Request to Register JWT Confirmation\n   Method: example\").  Registration requests
    that are undetermined for a\n   period longer than 21 days can be brought to the
    IESG's attention\n   (using the iesg@ietf.org mailing list) for resolution.\n
    \  Criteria that should be applied by the Designated Experts include\n   determining
    whether the proposed registration duplicates existing\n   functionality, determining
    whether it is likely to be of general\n   applicability or whether it is useful
    only for a single application,\n   and evaluating the security properties of the
    item being registered\n   and whether the registration makes sense.\n   It is
    suggested that multiple Designated Experts be appointed who are\n   able to represent
    the perspectives of different applications using\n   this specification in order
    to enable broadly informed review of\n   registration decisions.  In cases where
    a registration decision could\n   be perceived as creating a conflict of interest
    for a particular\n   Expert, that Expert should defer to the judgment of the other\n
    \  Experts.\n"
  - contents:
    - "6.1.  JSON Web Token Claims Registration\n   This specification registers the
      \"cnf\" claim in the IANA \"JSON Web\n   Token Claims\" registry [IANA.JWT.Claims]
      established by [JWT].\n"
    - contents:
      - "6.1.1.  Registry Contents\n   o  Claim Name: \"cnf\"\n   o  Claim Description:
        Confirmation\n   o  Change Controller: IESG\n   o  Specification Document(s):
        Section 3.1 of [RFC7800]\n"
      title: 6.1.1.  Registry Contents
    title: 6.1.  JSON Web Token Claims Registration
  - contents:
    - "6.2.  JWT Confirmation Methods Registry\n   This specification establishes
      the IANA \"JWT Confirmation Methods\"\n   registry for JWT \"cnf\" member values.
      \ The registry records the\n   confirmation method member and a reference to
      the specification that\n   defines it.\n"
    - contents:
      - "6.2.1.  Registration Template\n   Confirmation Method Value:\n      The name
        requested (e.g., \"kid\").  Because a core goal of this\n      specification
        is for the resulting representations to be compact,\n      it is RECOMMENDED
        that the name be short -- not to exceed eight\n      characters without a
        compelling reason to do so.  This name is\n      case sensitive.  Names may
        not match other registered names in a\n      case-insensitive manner unless
        the Designated Experts state that\n      there is a compelling reason to allow
        an exception.\n   Confirmation Method Description:\n      Brief description
        of the confirmation method (e.g., \"Key\n      Identifier\").\n   Change Controller:\n
        \     For Standards Track RFCs, list the \"IESG\".  For others, give the\n
        \     name of the responsible party.  Other details (e.g., postal\n      address,
        email address, home page URI) may also be included.\n   Specification Document(s):\n
        \     Reference to the document or documents that specify the parameter,\n
        \     preferably including URIs that can be used to retrieve copies of\n      the
        documents.  An indication of the relevant sections may also be\n      included
        but is not required.\n"
      title: 6.2.1.  Registration Template
    - contents:
      - "6.2.2.  Initial Registry Contents\n   o  Confirmation Method Value: \"jwk\"\n
        \  o  Confirmation Method Description: JSON Web Key Representing Public\n
        \     Key\n   o  Change Controller: IESG\n   o  Specification Document(s):
        Section 3.2 of [RFC7800]\n   o  Confirmation Method Value: \"jwe\"\n   o  Confirmation
        Method Description: Encrypted JSON Web Key\n   o  Change Controller: IESG\n
        \  o  Specification Document(s): Section 3.3 of [RFC7800]\n   o  Confirmation
        Method Value: \"kid\"\n   o  Confirmation Method Description: Key Identifier\n
        \  o  Change Controller: IESG\n   o  Specification Document(s): Section 3.4
        of [RFC7800]\n   o  Confirmation Method Value: \"jku\"\n   o  Confirmation
        Method Description: JWK Set URL\n   o  Change Controller: IESG\n   o  Specification
        Document(s): Section 3.5 of [RFC7800]\n"
      title: 6.2.2.  Initial Registry Contents
    title: 6.2.  JWT Confirmation Methods Registry
  title: 6.  IANA Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [IANA.JWT.Claims]\n              IANA, \"JSON
      Web Token Claims\",\n              <http://www.iana.org/assignments/jwt>.\n
      \  [JWE]      Jones, M. and J. Hildebrand, \"JSON Web Encryption (JWE)\",\n
      \             RFC 7516, DOI 10.17487/RFC7156, May 2015,\n              <http://www.rfc-editor.org/info/rfc7516>.\n
      \  [JWK]      Jones, M., \"JSON Web Key (JWK)\", RFC 7517,\n              DOI
      10.17487/RFC7157, May 2015,\n              <http://www.rfc-editor.org/info/rfc7517>.\n
      \  [JWT]      Jones, M., Bradley, J., and N. Sakimura, \"JSON Web Token\n              (JWT)\",
      RFC 7519, DOI 10.17487/RFC7159, May 2015,\n              <http://www.rfc-editor.org/info/rfc7519>.\n
      \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC3629]  Yergeau,
      F., \"UTF-8, a transformation format of ISO\n              10646\", STD 63,
      RFC 3629, DOI 10.17487/RFC3629, November\n              2003, <http://www.rfc-editor.org/info/rfc3629>.\n
      \  [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n              Resource
      Identifier (URI): Generic Syntax\", STD 66,\n              RFC 3986, DOI 10.17487/RFC3986,
      January 2005,\n              <http://www.rfc-editor.org/info/rfc3986>.\n   [RFC5226]
      \ Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA
      Considerations Section in RFCs\", BCP 26, RFC 5226,\n              DOI 10.17487/RFC5226,
      May 2008,\n              <http://www.rfc-editor.org/info/rfc5226>.\n   [RFC5246]
      \ Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)
      Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246, August
      2008,\n              <http://www.rfc-editor.org/info/rfc5246>.\n   [RFC6125]
      \ Saint-Andre, P. and J. Hodges, \"Representation and\n              Verification
      of Domain-Based Application Service Identity\n              within Internet
      Public Key Infrastructure Using X.509\n              (PKIX) Certificates in
      the Context of Transport Layer\n              Security (TLS)\", RFC 6125, DOI
      10.17487/RFC6125, March\n              2011, <http://www.rfc-editor.org/info/rfc6125>.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [JWK.Thumbprint]\n              Jones, M.
      and N. Sakimura, \"JSON Web Key (JWK)\n              Thumbprint\", RFC 7638,
      DOI 10.17487/RFC7638, September\n              2015, <http://www.rfc-editor.org/info/rfc7638>.\n
      \  [OASIS.saml-core-2.0-os]\n              Cantor, S., Kemp, J., Philpott, R.,
      and E. Maler,\n              \"Assertions and Protocol for the OASIS Security
      Assertion\n              Markup Language (SAML) V2.0\", OASIS Standard saml-core-\n
      \             2.0-os, March 2005,\n              <http://docs.oasis-open.org/security/saml/v2.0/>.\n
      \  [OAUTH-POP-ARCH]\n              Hunt, P., Ed, Richer, J., Mills, W., Mishra,
      P., and H.\n              Tschofenig, \"OAuth 2.0 Proof-of-Possession (PoP)
      Security\n              Architecture\", Work in Progress, draft-ietf-oauth-pop-\n
      \             architecture-07, December 2015.\n   [OpenID.Core]\n              Sakimura,
      N., Bradley, J., Jones, M., de Medeiros, B., and\n              C. Mortimore,
      \"OpenID Connect Core 1.0\", November 2014,\n              <http://openid.net/specs/openid-connect-core-1_0.html>.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Acknowledgements\n   The authors wish to thank Brian Campbell, Stephen Farrell,
    Barry\n   Leiba, Kepeng Li, Chris Lonvick, James Manger, Kathleen Moriarty,\n
    \  Justin Richer, and Nat Sakimura for their reviews of the\n   specification.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Michael B. Jones\n   Microsoft\n   Email: mbj@microsoft.com\n
    \  URI:   http://self-issued.info/\n   John Bradley\n   Ping Identity\n   Email:
    ve7jtb@ve7jtb.com\n   URI:   http://www.thread-safe.com/\n   Hannes Tschofenig\n
    \  ARM Limited\n   Austria\n   Email: Hannes.Tschofenig@gmx.net\n   URI:   http://www.tschofenig.priv.at\n"
  title: Authors' Addresses
