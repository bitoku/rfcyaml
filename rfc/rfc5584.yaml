- contents:
  - "                        RTP Payload Format for\n         the Adaptive TRansform
    Acoustic Coding (ATRAC) Family\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document describes an RTP payload format for efficient and\n
    \  flexible transporting of audio data encoded with the Adaptive\n   TRansform
    Audio Coding (ATRAC) family of codecs.  Recent enhancements\n   to the ATRAC family
    of codecs support high-quality audio coding with\n   multiple channels.  The RTP
    payload format as presented in this\n   document also includes support for data
    fragmentation, elementary\n   redundancy measures, and a variation on scalable
    streaming.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents
    in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n
    \  Please review these documents carefully, as they describe your rights\n   and
    restrictions with respect to this document.\n   This document may contain material
    from IETF Documents or IETF\n   Contributions published or made publicly available
    before November\n   10, 2008.  The person(s) controlling the copyright in some
    of this\n   material may not have granted the IETF Trust the right to allow\n
    \  modifications of such material outside the IETF Standards Process.\n   Without
    obtaining an adequate license from the person(s) controlling\n   the copyright
    in such materials, this document may not be modified\n   outside the IETF Standards
    Process, and derivative works of it may\n   not be created outside the IETF Standards
    Process, except to format\n   it for publication as an RFC or to translate it
    into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Conventions Used in This Document ...............................3\n   3.
    Codec-Specific Details ..........................................3\n   4. RTP
    Packetization and Transport of ATRAC-Family Streams .........4\n      4.1. ATRAC
    Frames ...............................................4\n      4.2. Concatenation
    of Frames ....................................4\n      4.3. Frame Fragmentation
    ........................................4\n      4.4. Transmission of Redundant
    Frames ...........................4\n      4.5. Scalable Lossless Streaming (High-Speed
    Transfer Mode) .....5\n           4.5.1. Scalable Multiplexed Streaming ......................5\n
    \          4.5.2. Scalable Multi-Session Streaming ....................5\n   5.
    Payload Format ..................................................6\n      5.1.
    Global Structure of Payload Format .........................6\n      5.2. Usage
    of RTP Header Fields .................................7\n      5.3. RTP Payload
    Structure ......................................8\n           5.3.1. Usage of
    ATRAC Header Section .......................8\n           5.3.2. Usage of ATRAC
    Frames Section .......................9\n   6. Packetization Examples .........................................12\n
    \     6.1. Example Multi-Frame Packet ................................12\n      6.2.
    Example Fragmented ATRAC Frame ............................13\n   7. Payload Format
    Parameters ......................................14\n      7.1. ATRAC3 Media Type
    Registration ............................14\n      7.2. ATRAC-X Media Type Registration
    ...........................16\n      7.3. ATRAC Advanced Lossless Media Type Registration
    ...........18\n      7.4. Channel Mapping Configuration Table .......................20\n
    \     7.5. Mapping Media Type Parameters into SDP ....................21\n           7.5.1.
    For Media Subtype ATRAC3 ...........................21\n           7.5.2. For
    Media Subtype ATRAC-X ..........................21\n           7.5.3. For Media
    Subtype ATRAC Advanced Lossless ..........22\n      7.6. Offer/Answer Model Considerations
    .........................22\n           7.6.1. For All Three Media Subtypes .......................22\n
    \          7.6.2. For Media Subtype ATRAC3 ...........................23\n           7.6.3.
    For Media Subtype ATRAC-X ..........................23\n           7.6.4. For
    Media Subtype ATRAC Advanced Lossless ..........23\n      7.7. Usage of Declarative
    SDP ..................................24\n      7.8. Example SDP Session Descriptions
    ..........................24\n      7.9. Example Offer/Answer Exchange .............................26\n
    \  8. IANA Considerations ............................................28\n   9.
    Security Considerations ........................................28\n   10. Considerations
    on Correct Decoding ............................28\n      10.1. Verification of
    the Packets ..............................28\n      10.2. Validity Checking of
    the Packets .........................29\n   11. References ....................................................29\n
    \     11.1. Normative References .....................................29\n      11.2.
    Informative References ...................................30\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The ATRAC family of perceptual audio codecs is designed
    to address\n   numerous needs for high-quality, low-bit-rate audio transfer.  ATRAC\n
    \  technology can be found in many consumer and professional products\n   and
    applications, including MD players, CD players, voice recorders,\n   and mobile
    phones.\n   Recent advances in ATRAC technology allow for multiple channels of\n
    \  audio to be encoded in customizable groupings.  This should allow for\n   future
    expansions in scaled streaming to provide the greatest\n   flexibility in streaming
    any one of the ATRAC family member codecs;\n   however, this payload format does
    not distinguish between the codecs\n   on a packet level.\n   This simplified
    payload format contains only the basic information\n   needed to disassemble a
    packet of ATRAC audio in order to decode it.\n   There is also basic support for
    fragmentation and redundancy.\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\",
    \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
    \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described
    in RFC 2119 [4].\n"
  title: 2.  Conventions Used in This Document
- contents:
  - "3.  Codec-Specific Details\n   Early versions of the ATRAC codec handled only
    two channels of audio\n   at 44.1 kHz sampling frequency, with typical bit-rates
    between 66\n   kbps and 132 kbps.  The latest version allows for a maximum of
    8\n   channels of audio, up to 96 kHz in sampling frequency, and a lossless\n
    \  encoding option that can be transmitted in either a scalable (also\n   known
    as High-Speed Transfer mode) or standard (aka Standard mode)\n   format.  The
    feasible bit-rate range has also expanded, allowing from\n   a low of 8 kbps up
    to 1400 kbps in lossy encoding modes.\n   Depending on the version of ATRAC used,
    the sample-frame size is\n   either 512, 1024, or 2048 samples.  While the lossy
    and Standard mode\n   lossless formats are encoded as sequential single audio
    frames,\n   High-Speed Transfer mode lossless data comprises two layers -- a\n
    \  lossy base layer and an enhancement layer.\n   Although streaming of multi-channel
    audio is supported depending on\n   the ATRAC version used, all encoded audio
    for a given time period is\n   contained within a single frame.  Therefore, there
    is no interleaving\n   nor splitting of audio data on a per-channel basis with
    which to be\n   concerned.\n"
  title: 3.  Codec-Specific Details
- contents:
  - '4.  RTP Packetization and Transport of ATRAC-Family Streams

    '
  - contents:
    - "4.1.  ATRAC Frames\n   For transportation of compressed audio data, ATRAC uses
      the concept\n   of frames.  ATRAC frames are the smallest data unit for which
      timing\n   information is attributed.  Frames are octet-aligned by definition.\n"
    title: 4.1.  ATRAC Frames
  - contents:
    - "4.2.  Concatenation of Frames\n   It is often possible to carry multiple frames
      in one RTP packet.\n   This can be useful in audio, where on a LAN with a 1500-byte
      MTU, an\n   average of 7 complete 64 kbps ATRAC frames could be carried in a\n
      \  single RTP packet, as each ATRAC frame would be approximately 200\n   bytes.
      \ ATRAC frames may be of fixed or variable length.  To\n   facilitate parsing
      in the case of multiple frames in one RTP packet,\n   the size of each frame
      is made known to the receiver by carrying\n   \"in-band\" the frame size for
      each contained frame in an RTP packet.\n   However, to simplify the implementation
      of RTP receivers, it is\n   required that when multiple frames are carried in
      an RTP packet, each\n   frame MUST be complete, i.e., the number of frames in
      an RTP packet\n   MUST be integral.\n"
    title: 4.2.  Concatenation of Frames
  - contents:
    - "4.3.  Frame Fragmentation\n   The ATRAC codec can handle very large frames.
      \ As most IP networks\n   have significantly smaller MTU sizes than the frame
      sizes ATRAC can\n   handle, this payload format allows for the fragmentation
      of an ATRAC\n   frame over multiple RTP packets.  However, to simplify the\n
      \  implementation of RTP receivers, an RTP packet MUST carry either one\n   or
      more complete ATRAC frames or a single fragment of one ATRAC\n   frame.  In
      other words, RTP packets MUST NOT contain fragments of\n   multiple ATRAC frames
      and MUST NOT contain a mix of complete and\n   fragmented frames.\n"
    title: 4.3.  Frame Fragmentation
  - contents:
    - "4.4.  Transmission of Redundant Frames\n   As RTP does not guarantee reliable
      transmission, receipt of data is\n   not assured.  Loss of a packet can result
      in a \"decoding gap\" at the\n   receiver.  One method to remedy this problem
      is to allow time-shifted\n   copies of ATRAC frames to be sent along with current
      data.  For a\n   modest cost in latency and implementation complexity, error\n
      \  resiliency to packet loss can be achieved.  For further details, see\n   Section
      5.3.2.1 and [12].\n"
    title: 4.4.  Transmission of Redundant Frames
  - contents:
    - "4.5.  Scalable Lossless Streaming (High-Speed Transfer Mode)\n   As ATRAC supports
      a variation on scalable encoding, this payload\n   format provides a mechanism
      for transmitting essential data (also\n   referred to as the base layer) with
      its enhancement data in two ways\n   -- multiplexed through one session or separated
      over two sessions.\n   In either method, only the base layer is essential in
      producing audio\n   data.  The enhancement layer carries the remaining audio
      data needed\n   to decode lossless audio data.  So in situations of limited\n
      \  bandwidth, the sender may choose not to transmit enhancement data yet\n   still
      provide a client with enough data to generate lossily-encoded\n   audio through
      the base layer.\n"
    - contents:
      - "4.5.1.  Scalable Multiplexed Streaming\n   In multiplexed streaming, the
        base layer and enhancement layer are\n   coupled together in each packet,
        utilizing only one session as\n   illustrated in Figure 1.\n   The packet
        MUST begin with the base layer, and the two layer types\n   MUST interleave
        if both of the layers exist in a packet (only base or\n   enhancement is included
        in a packet at the beginning of a streaming,\n   or during the fragmentation).\n
        \  +----------------+  +----------------+  +----------------+\n   |Base|Enhancement|--|Base|Enhancement|--|Base|Enhancement|
        ...\n   +----------------+  +----------------+  +----------------+\n           N
        \                  N+1                 N+2        : Packet\n                      Figure
        1. Multiplexed Structure\n"
      title: 4.5.1.  Scalable Multiplexed Streaming
    - contents:
      - "4.5.2.  Scalable Multi-Session Streaming\n   In multi-session streaming,
        the base layer and enhancement layer are\n   sent over two separate sessions,
        allowing clients with certain\n   bandwidth limitations to receive just the
        base layer for decoding as\n   illustrated in Figure 2.\n   In this case,
        it is REQUIRED to determine which sessions are paired\n   together in receiver
        side.  For paired base and enhancement layer\n   sessions, the CNAME bindings
        in the RTP Control Protocol (RTCP)\n   session MUST be applied using the same
        CNAME to ensure correct\n   mapping to the RTP source.\n   While there may
        be alternative methods for synchronization of the\n   layers, the timestamp
        SHOULD be used for synchronizing the base layer\n   with its enhancement.
        \ The two sessions MUST be synchronized using\n   the information in RTCP
        SR packets to align the RTP timestamps.\n   If the enhancement layer's session
        data cannot arrive until the\n   presentation time, the decoder MUST decode
        the base layer session's\n   data only, ignoring the enhancement layer's data.\n
        \        Session 1:\n         +------+  +------+  +------+  +------+\n         |
        Base |--| Base |--| Base |--| Base | ...\n         +------+  +------+  +------+
        \ +------+\n            N         N+1       N+2       N+3     : Packet\n         Session
        2:\n         +-------------+  +-------------+  +-------------+\n         |
        Enhancement |--| Enhancement |--| Enhancement | ...\n         +-------------+
        \ +-------------+  +-------------+\n               N                N+1              N+2
        \        : Packet\n                 Figure 2. Multi-Session Streaming\n"
      title: 4.5.2.  Scalable Multi-Session Streaming
    title: 4.5.  Scalable Lossless Streaming (High-Speed Transfer Mode)
  title: 4.  RTP Packetization and Transport of ATRAC-Family Streams
- contents:
  - '5.  Payload Format

    '
  - contents:
    - "5.1.  Global Structure of Payload Format\n   The structure of ATRAC Payload
      is illustrated in Figure 3.  The RTP\n   payload following the RTP header contains
      two octet-aligned data\n   sections.\n            +------+--------------+-----------------------------+\n
      \           |RTP   | ATRAC Header |   ATRAC Frames Section      |\n            |Header|
      Section      | (including redundant data)  |\n            +------+--------------+-----------------------------+\n
      \           < ---------------- RTP Packet Payload ------------- >\n             Figure
      3. Structure of RTP Payload of ATRAC Family\n   The first data section is the
      ATRAC Header, containing just one\n   header with information for the whole
      packet.  The second section is\n   where the encoded ATRAC frames are stored.
      \ This may contain either a\n   single fragment of one ATRAC frame or one or
      more complete ATRAC\n   frames.  The ATRAC Frames Section MUST NOT be empty.
      \ When using the\n   redundancy mechanism described in Section 5.3.2.1, the
      redundant\n   frame data can be included in this section and timestamp MUST
      be set\n   to the oldest redundant frame's timestamp.\n   To benefit from ATRAC's
      High-Speed Transfer mode lossless encoding\n   capability, the RTP payload can
      be split across two sessions, with\n   one transmitting an essential base layer
      and the other transmitting\n   enhancement data.  However, in either case, the
      above structure still\n   applies.\n"
    title: 5.1.  Global Structure of Payload Format
  - contents:
    - "5.2.  Usage of RTP Header Fields\n    0                   1                   2
      \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |V=2|P|X|  CC   |M|     PT      |       sequence number         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                          timestamp                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |            synchronization source (SSRC) identifier           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |           contributing source (CSRC) identifiers              |\n   |                             .....
      \                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \              Figure 4. RTP Standard Header Part\n   The structure of the RTP
      Standard Header Part is illustrated in\n   Figure 4.\n   Version(V): 2 bits\n
      \  Set to 2.\n   Padding(P): 1 bit\n   If the padding bit is set, the packet
      contains one or more additional\n   padding octets at the end, which are not
      part of the payload.  The\n   last octet of the padding contains a count of
      how many padding octets\n   should be ignored, including itself.  Padding may
      be needed by some\n   encryption algorithms with fixed block sizes or for carrying
      several\n   RTP packets in a lower-layer protocol data unit (see [1]).\n   Extension(X):
      1 bit\n   Defined by the RTP profile used.\n   CSRC count(CC): 4 bits\n   See
      RFC 3550 [1].\n   Marker (M): 1 bit\n   Set to 1 if the packet is the first
      packet after a silence period;\n   otherwise, it MUST be set to 0.\n   Payload
      Type (PT): 7 bits\n   The assignment of an RTP payload type for this packet
      format is\n   outside the scope of this document; it is specified by the RTP\n
      \  profile under which this payload format is used, or signaled\n   dynamically
      out-of-band (e.g., using the Session Description Protocol\n   (SDP)).\n   sequence
      number: 16 bits\n   A sequential number for the RTP packet.  It ranges from
      0 to 65535\n   and repeats itself periodically.\n   Timestamp: 32 bits\n   A
      timestamp representing the sampling time of the first sample of the\n   first
      ATRAC frame in the current RTP packet.\n   When using SDP, the clock rate of
      the RTP timestamp MUST be expressed\n   using the \"rtpmap\" attribute.  For
      ATRAC3 and ATRAC Advanced\n   Lossless, the RTP timestamp rate MUST be 44100
      Hz.  For ATRAC-X, the\n   RTP timestamp rate is 44100 Hz or 48000 Hz, and it
      will be selected\n   by out-of-band signaling.\n   SSRC: 32 bits\n   See RFC
      3550 [1].\n   CSRC list: 0 to 15 items, 32 bits each\n   See RFC 3550 [1].\n"
    title: 5.2.  Usage of RTP Header Fields
  - contents:
    - '5.3.  RTP Payload Structure

      '
    - contents:
      - "5.3.1.  Usage of ATRAC Header Section\n   The ATRAC header section has the
        fixed length of one byte as\n   illustrated in Figure 5.\n                     0
        1 2 3 4 5 6 7\n                    +-+-+-+-+-+-+-+-+\n                    |C|FrgNo|NFrames|\n
        \                   +-+-+-+-+-+-+-+-+\n                Figure 5. ATRAC RTP
        Header\n   Continuation Flag (C) : 1 bit\n   The packet that corresponds to
        the last part of the audio frame data\n   in a fragmentation MUST have this
        bit set to 0; otherwise, it's set\n   to 1.\n   Fragment Number (FrgNo): 3
        bits\n   In the event of data fragmentation, this value is one for the first\n
        \  packet, and increases sequentially for the remaining fragmented data\n
        \  packets.  This value MUST be zero for an unfragmented frame.  (Note:\n
        \  3 bits is sufficient to avoid Fragment Number rollover given the\n   current
        maximum supported bit-rate in the ATRAC specification.  If\n   that changes,
        the choice of 3 bits for the Fragment Number should be\n   revisited.)\n   Number
        of Frames (NFrames): 4 bits\n   The number of audio frames in this packet
        are field value + 1.  This\n   allows for a maximum of 16 ATRAC-encoded audio
        frames per packet,\n   with 0 indicating one audio frame.  Each audio frame
        MUST be complete\n   in the packet if fragmentation is not applied.  In the
        case of\n   fragmentation, the data for only one audio frame is allowed to
        be\n   fragmented, and this value MUST be 0.\n"
      title: 5.3.1.  Usage of ATRAC Header Section
    - contents:
      - "5.3.2.  Usage of ATRAC Frames Section\n   The ATRAC Frames Section contains
        an integer number of complete ATRAC\n   frames or a single fragment of one
        ATRAC frame, as illustrated in\n   Figure 6.  Each ATRAC frame is preceded
        by a one-bit flag indicating\n   the layer type and a Block Length field indicating
        the size in bytes\n   of the ATRAC frame.  If more than one ATRAC frame is
        present, then\n   the frames are concatenated into a contiguous string of
        bit-flag,\n   Block Length, and ATRAC frame in order of their frame number.
        \ This\n   section MUST NOT be empty.\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
        6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |E|       Block Length          |         ATRAC frame           |...\n
        \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n                   Figure
        6. ATRAC Frame Section Format\n   Layer Type Flag (E): 1 bit\n   Set to 1
        if the corresponding ATRAC frame is from an enhancement\n   layer.  0 indicates
        a base layer encoded frame.\n   Block length: 15 bits\n   The byte length
        of encoded audio data for the following frame.  This\n   is so that in the
        case of fragmentation, if only a subsequent packet\n   is received, decoding
        can still occur.  15 bits allows for a maximum\n   block length of 32,767
        bytes.\n   ATRAC frame: The encoded ATRAC audio data.\n"
      - contents:
        - "5.3.2.1.  Support of Redundancy\n   This payload format provides a rudimentary
          scheme to compensate for\n   occasional packet loss.  As every packet's
          timestamp corresponds to\n   the first audio frame regardless of whether
          or not it is redundant,\n   and because we know how many frames of audio
          each packet\n   encapsulates, if two successive packets are successfully
          transmitted,\n   we can calculate the number of redundant frames being sent.
          \ The\n   result gives the client a sense of how the server is responding
          to\n   RTCP reports and warns it to expand its buffer size if necessary.
          \ As\n   an example of using the Redundant Data, refer to Figures 7 and
          8.\n   In this example, the server has determined that for the next few\n
          \  packets, it should send the last two frames from the previous packet\n
          \  due to recent RTCP reports.  Thus, between packets N and N+1, there\n
          \  is a redundancy of two frames (of which the client may choose to\n   dispose).
          \ The benefit arises when packets N+2 and N+3 do not arrive\n   at all,
          after which eventually packet N+4 arrives with successive\n   necessary
          audio frame data.\n   [Sender]\n   |-Fr0-|-Fr1-|-Fr2-|                         Packet:
          N,   TS=0\n         |-Fr1-|-Fr2-|-Fr3-|                   Packet: N+1, TS=1024\n
          \              |-Fr2-|-Fr3-|-Fr4-|             Packet: N+2, TS=2048\n                     |-Fr3-|-Fr4-|-Fr5-|
          \      Packet: N+3, TS=3072\n                           |-Fr4-|-Fr5-|-Fr6-|
          Packet: N+4, TS=4096\n   -----------> Packet \"N+2\" and \"N+3\" not arrived
          \ ------------->\n   [Receiver]\n   |-Fr0-|-Fr1-|-Fr2-|                         Packet:
          N,   TS=0\n         |-Fr1-|-Fr2-|-Fr3-|                   Packet: N+1, TS=1024\n
          \                          |-Fr4-|-Fr5-|-Fr6-| Packet: N+4, TS=4096\n   The
          receiver can decode from FR4 to Fr6 by using Packet \"N+4\" data\n   even
          if the packet loss of \"N+2\" and \"N+3\" has occurred.\n                  Figure
          7. Redundant Example\n    0                   1                   2                   3\n
          \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |V=2|P|X|  CC   |M|     PT      |       sequence number         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |        timestamp (= start sample time of Fr1)                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |            synchronization source (SSRC) identifier           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |           contributing source (CSRC) identifiers              |\n   |
          \                            .....                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |0|  0  |   3   |0|         Block Length        |               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |         (redundant)  ATRAC frame (Fr1) data  ...              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |0|       Block Length          |(redundant) ATRAC frame (Fr2)  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |    (cont.)  |0|   Block Length          |  ATRAC frame (Fr3)  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |                       (cont.)                                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \         Figure 8. Packet Structure Example with Redundant Data\n                          (Case
          of Packet \"N+1\")\n"
        title: 5.3.2.1.  Support of Redundancy
      - contents:
        - "5.3.2.2.  Frame Fragmentation\n   Each RTP packet MUST contain either an
          integer number of ATRAC-\n   encoded audio frames (with a maximum of 16)
          or one ATRAC frame\n   fragment.  In the former case, as many complete ATRAC
          frames as can\n   fit in a single path-MTU SHOULD be placed in an RTP packet.
          \ However,\n   if even a single ATRAC frame will not fit into a complete
          RTP packet,\n   the ATRAC frame MUST be fragmented.\n   The start of a fragmented
          frame gets placed in its own RTP packet\n   with its Continuation bit (C)
          set to one, and its Fragment Number\n   (FragNo) set to one.  As the frame
          must be the only one in the\n   packet, the Number of Frames field is zero.
          \ Subsequent packets are\n   to contain the remaining fragmented frame data,
          with the Fragment\n   Number increasing sequentially and the Continuation
          bit (C)\n   consistently set to one.  As subsequent packets do not contain
          any\n   new frames, the Number of Frames field MUST be ignored.  The last\n
          \  packet of fragmented data MUST have the Continuation bit (C) set to\n
          \  zero.\n   Packets containing related fragmented frames MUST have identical\n
          \  timestamps.  Thus, while the Continuous bit and Fragment Number\n   fields
          indicate fragmentation and a means to reorder the packets, the\n   timestamp
          can be used to determine which packets go together.\n"
        title: 5.3.2.2.  Frame Fragmentation
      title: 5.3.2.  Usage of ATRAC Frames Section
    title: 5.3.  RTP Payload Structure
  title: 5.  Payload Format
- contents:
  - '6.  Packetization Examples

    '
  - contents:
    - "6.1.  Example Multi-Frame Packet\n   Multiple encoded audio frames are combined
      into one packet.  Note\n   how, for this example, only base layer frames are
      sent redundantly,\n   but are followed by interleaved base layer and enhancement
      layer\n   frames as illustrated in Figure 9.\n    0                   1                   2
      \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |V=2|P|X|  CC   |M|     PT      |       sequence number         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                          timestamp                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |            synchronization source (SSRC) identifier           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |           contributing source (CSRC) identifiers              |\n   |                             .....
      \                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |0|  0  |   5   |0|         Block Length        |               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |         (redundant)  base layer frame 1 data...               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |0|       Block Length          |(redundant) base layer frame 2 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    (cont.)  |0|   Block Length          |  base layer frame 3 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | (cont.) |1|       Block Length          | enhancement frame 3 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | (cont.) |0|       Block Length          |  base layer frame 4 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | (cont.) |1|       Block Length          | enhancement frame 4 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                  Figure 9. Example Multi-Frame Packet\n"
    title: 6.1.  Example Multi-Frame Packet
  - contents:
    - "6.2.  Example Fragmented ATRAC Frame\n   The encoded audio data frame is split
      over three RTP packets as\n   illustrated in Figure 10.  The following points
      are highlighted in\n   the example below:\n   o  transition from one to zero
      of the Continuation bit (C)\n   o  sequential increase in the Fragment Number\n
      \  Packet 1:\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |V=2|P|X|  CC   |M|     PT      |       sequence number         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                          timestamp                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |            synchronization source (SSRC) identifier           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |           contributing source (CSRC) identifiers              |\n   |                             .....
      \                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |1|  1  |   0   |1|        Block Length         |               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                     enhancement data...                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Packet 2:\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |V=2|P|X|  CC   |M|     PT      |       sequence number         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                          timestamp                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |            synchronization source (SSRC) identifier           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |           contributing source (CSRC) identifiers              |\n   |                             .....
      \                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |1|  2  |   0   |1|        Block Length         |               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                  ...more enhancement data...                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Packet 3:\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |V=2|P|X|  CC   |M|     PT      |       sequence number         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                          timestamp                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |            synchronization source (SSRC) identifier           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |           contributing source (CSRC) identifiers              |\n   |                             .....
      \                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |0|  3  |   0   |1|        Block Length         |               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |            ...the last of the enhancement data                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                Figure 10. Example Fragmented ATRAC Frame\n"
    title: 6.2.  Example Fragmented ATRAC Frame
  title: 6.  Packetization Examples
- contents:
  - "7.  Payload Format Parameters\n   Certain parameters will need to be defined
    before ATRAC-family-\n   encoded content can be streamed.  Other optional parameters
    may also\n   be defined to take advantage of specific features relevant to certain\n
    \  ATRAC versions.  Parameters for ATRAC3, ATRAC-X, and ATRAC Advanced\n   Lossless
    are defined here as part of the media subtype registration\n   process.  A mapping
    of these parameters into the Session Description\n   Protocol (SDP) (RFC 4566)
    [2] is also provided for applications that\n   utilize SDP.  These registrations
    use the template defined in RFC\n   4288 [5] and follow RFC 4855 [6].\n   The
    data format and parameters are specified for real-time transport\n   in RTP.\n"
  - contents:
    - "7.1.  ATRAC3 Media Type Registration\n   The media subtype for the Adaptive
      TRansform Codec version 3 (ATRAC3)\n   uses the template defined in RFC 4855
      [6].\n   Note, any unknown parameter MUST be ignored by the receiver.\n   Type
      name:  audio\n   Subtype name:  ATRAC3\n   Required parameters:\n   rate:  Represents
      the sampling frequency in Hz of the original audio\n   data.  Permissible value
      is 44100 only.\n   baseLayer:  Indicates the encoded bit-rate in kbps for the
      audio data\n   to be streamed.  Permissible values are 66, 105, and 132.\n   Optional
      parameters:\n   ptime:  See RFC 4566 [2].\n   maxptime:  See RFC 4566 [2].\n
      \  The frame length of ATRAC3 is 1024/44100 = 23.22...(ms), and\n   fractional
      value may not be applicable for the SDP definition.\n   So the value of the
      parameter MUST be a multiple of 24 (ms)\n   considering safe transmission.\n
      \  If this parameter is not present, the sender MAY encapsulate a\n   maximum
      of 6 encoded frames into one RTP packet, in streaming of\n   ATRAC3.\n   maxRedundantFrames:
      \ The maximum number of redundant frames that may\n   be sent during a session
      in any given packet under the redundant\n   framing mechanism detailed in the
      document.  Allowed values are\n   integers in the range of 0 to 15, inclusive.
      \ If this parameter is\n   not used, a default of 15 MUST be assumed.\n   Encoding
      considerations:  This media type is framed and contains\n   binary data.\n   Security
      considerations:  This media type does not carry active\n   content.  See Section
      9 of this document.\n   Interoperability considerations:  none\n   Published
      specification:  ATRAC3 Standard Specification [9]\n   Applications that use
      this media type:\n   Audio and video streaming and conferencing tools.\n   Additional
      information:  none\n   Magic number(s):  none\n   File extension(s):  'at3',
      'aa3', and 'omg'\n   Macintosh file type code(s):  none\n   Person and email
      address to contact for further information:\n   Mitsuyuki Hatanaka\n   Jun Matsumoto\n
      \  actech@jp.sony.com\n   Intended usage:  COMMON\n   Restrictions on usage:
      \ This media type depends on RTP framing, and\n   hence is only defined for
      transfer via RTP.\n   Author:\n   Mitsuyuki Hatanaka\n   Jun Matsumoto\n   actech@jp.sony.com\n
      \  Change controller:  IETF AVT WG delegated from the IESG\n"
    title: 7.1.  ATRAC3 Media Type Registration
  - contents:
    - "7.2.  ATRAC-X Media Type Registration\n   The media subtype for the Adaptive
      TRansform Codec version X\n   (ATRAC-X) uses the template defined in RFC 4855
      [6].\n   Note, any unknown parameter MUST be ignored by the receiver.\n   Type
      name:  audio\n   Subtype name:  ATRAC-X\n   Required parameters:\n   rate:  Represents
      the sampling frequency in Hz of the original\n   audio data.  Permissible values
      are 44100 and 48000.\n   baseLayer:  Indicates the encoded bit-rate in kbps
      for the audio data\n   to be streamed.  Permissible values are 32, 48, 64, 96,
      128, 160,\n   192, 256, 320, and 352.\n   channelID:  Indicates the number of
      channels and channel layout\n   according to the table1 in Section 7.4.  Note
      that this layout is\n   different from that proposed in RFC 3551 [3].  However,
      as channelID\n   = 0 defines an ambiguous channel layout, the channel mapping
      defined\n   in Section 4.1 of [3] could be used.  Permissible values are 0,
      1, 2,\n   3, 4, 5, 6, 7.\n   Optional parameters:\n   ptime:  See RFC 4566 [2].\n
      \  maxptime:  See RFC 4566 [2].\n   The frame length of ATRAC-X is 2048/44100
      = 46.44...(ms) or\n   2048/48000 = 42.67...(ms), but fractional value may not
      be applicable\n   for the SDP definition.  So the value of the parameter MUST
      be a\n   multiple of 47 (ms) or 43 (ms) considering safe transmission.\n   If
      this parameter is not present, the sender MAY encapsulate a\n   maximum of 16
      encoded frames into one RTP packet, in streaming of\n   ATRAC-X.\n   maxRedundantFrames:
      \ The maximum number of redundant frames that may\n   be sent during a session
      in any given packet under the redundant\n   framing mechanism detailed in the
      document.  Allowed values are\n   integers in the range 0 to 15, inclusive.
      \ If this parameter is not\n   used, a default of 15 MUST be assumed.\n   delayMode:
      \ Indicates a desire to use low-delay features, in which\n   case the decoder
      will process received data accordingly based on this\n   value.  Permissible
      values are 2 and 4.\n   Encoding considerations:  This media type is framed
      and contains\n   binary data.\n   Security considerations:  This media type
      does not carry active\n   content.  See Section 9 of this document.\n   Interoperability
      considerations:  none\n   Published specification:  ATRAC-X Standard Specification
      [10]\n   Applications that use this media type:\n   Audio and video streaming
      and conferencing tools.\n   Additional information:  none\n   Magic number(s):
      \ none\n   File extension(s):  'atx', 'aa3', and 'omg'\n   Macintosh file type
      code(s):  none\n   Person and email address to contact for further information:\n
      \  Mitsuyuki Hatanaka\n   Jun Matsumoto\n   actech@jp.sony.com\n   Intended
      usage:  COMMON\n   Restrictions on usage:  This media type depends on RTP framing,
      and\n   hence is only defined for transfer via RTP.\n   Author:\n   Mitsuyuki
      Hatanaka\n   Jun Matsumoto\n   actech@jp.sony.com\n   Change controller:  IETF
      AVT WG delegated from the IESG\n"
    title: 7.2.  ATRAC-X Media Type Registration
  - contents:
    - "7.3.  ATRAC Advanced Lossless Media Type Registration\n   The media subtype
      for the Adaptive TRansform Codec Lossless version\n   (ATRAC Advanced Lossless)
      uses the template defined in RFC 4855 [6].\n   Note, any unknown parameter MUST
      be ignored by the receiver.\n   Type name:  audio\n   Subtype name:  ATRAC-ADVANCED-LOSSLESS\n
      \  Required parameters:\n   rate:  Represents the sampling frequency in Hz of
      the original\n   audio data.  Permissible value is 44100 only for High-Speed
      Transfer\n   mode.  Any value of 24000, 32000, 44100, 48000, 64000, 88200, 96000,\n
      \  176400, and 192000 can be used for Standard mode.\n   baseLayer:  Indicates
      the encoded bit-rate in kbps for the base layer\n   in High-Speed Transfer mode
      lossless encodings.\n   For Standard lossless mode, this value MUST be 0.\n
      \  The Permissible values for ATRAC3 baselayer are 66, 105, and 132.\n   For
      ATRAC-X baselayer, they are 32, 48, 64, 96, 128, 160, 192, 256,\n   320, and
      352.\n   blockLength:  Indicates the block length.  In High-Speed Transfer\n
      \  mode, the value of 1024 and 2048 is used for ATRAC3 based and ATRAC-X\n   based
      ATRAC Advanced Lossless streaming, respectively.\n   Any value of 512, 1024,
      and 2048 can be used for Standard mode.\n   channelID:  Indicates the number
      of channels and channel layout\n   according to the table1 in Section 7.4.  Note
      that this layout is\n   different from that proposed in RFC 3551 [3].  However,
      as channelID\n   = 0 defines an ambiguous channel layout, the channel mapping
      defined\n   in Section 4.1 of [3] could be used in this case.  Permissible values\n
      \  are 0, 1, 2, 3, 4, 5, 6, 7.\n   ptime:  See RFC 4566 [2].\n   maxptime:  See
      RFC 4566 [2].\n   In streaming of ATRAC Advanced Lossless, multiple frames cannot
      be\n   transmitted in a single RTP packet, as the frame size is large.  So\n
      \  it SHOULD be regarded as the time of one encoded frame in both of the\n   sender
      and the receiver side.  The frame length of ATRAC Advanced\n   Lossless is 512/44100
      = 11.6...(ms), 1024/44100 = 23.22...(ms), or\n   2048/44100 = 46.44...(ms),
      but fractional value may not be applicable\n   for the SDP definition.  So the
      value of the parameter MUST be\n   12(ms), 24(ms), or 47(ms) considering safe
      transmission.\n   Encoding considerations:  This media type is framed and contains\n
      \  binary data.\n   Security considerations:  This media type does not carry
      active\n   content.  See Section 9 of this document.\n   Interoperability considerations:
      \ none\n   Published specification:\n   ATRAC Advanced Lossless Standard Specification
      [11]\n   Applications that use this media type:\n   Audio and video streaming
      and conferencing tools.\n   Additional information:  none\n   Magic number(s):
      \ none\n   File extension(s):  'aal', 'aa3', and 'omg'\n   Macintosh file type
      code(s):  none\n   Person and email address to contact for further information:\n
      \  Mitsuyuki Hatanaka\n   Jun Matsumoto\n   actech@jp.sony.com\n   Intended
      usage:  COMMON\n   Restrictions on usage:  This media type depends on RTP framing,
      and\n   hence is only defined for transfer via RTP.\n   Author:\n   Mitsuyuki
      Hatanaka\n   Jun Matsumoto\n   actech@jp.sony.com\n   Change controller:  IETF
      AVT WG delegated from the IESG\n"
    title: 7.3.  ATRAC Advanced Lossless Media Type Registration
  - contents:
    - "7.4.  Channel Mapping Configuration Table\n   Table 1 explains the mapping
      between the channelID as passed during\n   SDP negotiations, and the speaker
      mapping the value represents.\n            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \           | channelID | Number of |  Default Speaker    |\n            |           |
      Channels  |      Mapping        |\n            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \           |     0     |  max 64   |     undefined       |\n            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \           |     1     |     1     | front: center       |\n            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \           |     2     |     2     | front: left, right  |\n            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \           |     3     |     3     | front: left, right  |\n            |           |
      \          | front: center       |\n            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \           |     4     |     4     | front: left, right  |\n            |           |
      \          | front: center       |\n            |           |           | rear:
      surround      |\n            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \           |     5     |    5+1    | front: left, right  |\n            |           |
      \          | front: center       |\n            |           |           | rear:
      left, right   |\n            |           |           | LFE                 |\n
      \           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n            |     6
      \    |    6+1    | front: left, right  |\n            |           |           |
      front: center       |\n            |           |           | rear: left, right
      \  |\n            |           |           | rear: center        |\n            |
      \          |           | LFE                 |\n            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \           |     7     |    7+1    | front: left, right  |\n            |           |
      \          | front: center       |\n            |           |           | rear:
      left, right   |\n            |           |           | side: left, right   |\n
      \           |           |           | LFE                 |\n            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                  Table 1. Channel Configuration\n"
    title: 7.4.  Channel Mapping Configuration Table
  - contents:
    - "7.5.  Mapping Media Type Parameters into SDP\n   The information carried in
      the Media type specification has a\n   specific mapping to fields in the Session
      Description Protocol (SDP)\n   [2], which is commonly used to describe RTP sessions.
      \ When SDP is\n   used to specify sessions employing the ATRAC family of codecs,
      the\n   following mapping rules according to the ATRAC codec apply.\n"
    - contents:
      - "7.5.1.  For Media Subtype ATRAC3\n   o  The Media type (\"audio\") goes in
        SDP \"m=\" as the media name.\n   o  The Media subtype (payload format name)
        goes in SDP \"a=rtpmap\" as\n      the encoding name.  ATRAC3 supports only
        mono or stereo signals,\n      so a corresponding number of channels (0 or
        1) MUST also be\n      specified in this attribute.\n   o  The \"baseLayer\"
        parameter goes in SDP \"a=fmtp\".  This parameter\n      MUST be present.
        \ \"maxRedundantFrames\" may follow, but if no value\n      is transmitted,
        the receiver SHOULD assume a default value of\n      \"15\".\n   o  The parameters
        \"ptime\" and \"maxptime\" go in the SDP \"a=ptime\" and\n      \"a=maxptime\"
        attributes, respectively.\n"
      title: 7.5.1.  For Media Subtype ATRAC3
    - contents:
      - "7.5.2.  For Media Subtype ATRAC-X\n   o  The Media type (\"audio\") goes
        in SDP \"m=\" as the media name.\n   o  The Media subtype (payload format
        name) goes in SDP \"a=rtpmap\" as\n      the encoding name.  This SHOULD be
        followed by the \"sampleRate\"\n      (as the RTP clock rate), and then the
        actual number of channels\n      regardless of the channelID parameter.\n
        \  o  The parameters \"ptime\" and \"maxptime\" go in the SDP \"a=ptime\"
        and\n      \"a=maxptime\" attributes, respectively.\n   o  Any remaining parameters
        go in the SDP \"a=fmtp\" attribute by\n      copying them directly from the
        Media type string as a semicolon-\n      separated list of parameter=value
        pairs.  The \"baseLayer\"\n      parameter MUST be the first entry on this
        line.  The \"channelID\"\n      parameter MUST be the next entry.  The receiver
        MUST assume a\n      default value of \"15\" for \"maxRedundantFrames\".\n"
      title: 7.5.2.  For Media Subtype ATRAC-X
    - contents:
      - "7.5.3.  For Media Subtype ATRAC Advanced Lossless\n   o  The Media type (\"audio\")
        goes in SDP \"m=\" as the media name.\n   o  The Media subtype (payload format
        name) goes in SDP \"a=rtpmap\" as\n      the encoding name.  This MUST be
        followed by the \"sampleRate\" (as\n      the RTP clock rate), and then the
        actual number of channels\n      regardless of the channelID parameter.\n
        \  o  The parameters \"ptime\" and \"maxptime\" go in the SDP \"a=ptime\"
        and\n      \"a=maxptime\" attributes, respectively.\n   o  Any remaining parameters
        go in the SDP \"a=fmtp\" attribute by\n      copying them directly from the
        Media type string as a semicolon-\n      separated list of parameter=value
        pairs.\n      On this line, the parameters \"baseLayer\" and \"blockLength\"
        MUST be\n      present in this order.\n      The value of \"blockLength\"
        MUST be one of 1024 and 2048, for using\n      ATRAC3 and ATRAC-X as baselayer,
        respectively.  If \"baseLayer=0\"\n      (means standard mode), \"blockLength\"
        MUST be one of either 512,\n      1024, or 2048.  The \"channelID\" parameter
        MUST be the next entry .\n      The receiver MUST assume a default value of
        \"15\" for\n      \"maxRedundantFrames\".\n"
      title: 7.5.3.  For Media Subtype ATRAC Advanced Lossless
    title: 7.5.  Mapping Media Type Parameters into SDP
  - contents:
    - "7.6.  Offer/Answer Model Considerations\n   Some options for encoding and decoding
      ATRAC audio data will require\n   either or both of the sender and receiver
      complying with certain\n   specifications.  In order to establish an interoperable
      transmission\n   framework, an Offer/Answer negotiation in SDP MUST observe
      the\n   following considerations.  (See [14].)\n"
    - contents:
      - "7.6.1.  For All Three Media Subtypes\n   o  Each combination of the RTP payload
        transport format configuration\n      parameters (baseLayer and blockLength,
        sampleRate, channelID) is\n      unique in its bit-pattern and not compatible
        with any other\n      combination.  When creating an offer in an application
        desiring to\n      use the more advanced features (sample rates above 44100
        kHz, more\n      than two channels), the offerer SHOULD also offer a payload
        type\n      containing only the lowest set of necessary requirements.  If\n
        \     multiple configurations are of interest to the application, they\n      may
        all be offered.\n   o  The parameters \"maxptime\" and \"ptime\" will in most
        cases not\n      affect interoperability; however, the setting of the parameters\n
        \     can affect the performance of the application.  The SDP\n      Offer/Answer
        handling of the \"ptime\" parameter is described in RFC\n      3264.  The
        \"maxptime\" parameter MUST be handled in the same way.\n"
      title: 7.6.1.  For All Three Media Subtypes
    - contents:
      - "7.6.2.  For Media Subtype ATRAC3\n   o  In response to an offer, downgraded
        subsets of \"baseLayer\" are\n      possible.  However, for best performance,
        we suggest the answer\n      contain the highest possible values offered.\n"
      title: 7.6.2.  For Media Subtype ATRAC3
    - contents:
      - "7.6.3.  For Media Subtype ATRAC-X\n   o  In response to an offer, downgraded
        subsets of \"sampleRate\",\n      \"baseLayer\", and \"channelID\" are possible.
        \ For best performance,\n      an answer MUST NOT contain any values requiring
        further\n      capabilities than the offer contains, but it SHOULD provide
        values\n      as close as possible to those in the offer.\n   o  The \"maxRedundantFrames\"
        is a suggested minimum.  This value MAY\n      be increased in an answer (with
        a maximum of 15), but MUST NOT be\n      reduced.\n   o  The optional parameter
        \"delayMode\" is non-negotiable.  If the\n      Answerer cannot comply with
        the offered value, the session MUST be\n      deemed inoperable.\n"
      title: 7.6.3.  For Media Subtype ATRAC-X
    - contents:
      - "7.6.4.  For Media Subtype ATRAC Advanced Lossless\n   o  In response to an
        offer, downgraded subsets of \"sampleRate\",\n      \"baseLayer\", and \"channelID\"
        are possible.  For best performance,\n      an answer MUST NOT contain any
        values requiring further\n      capabilities than the offer contains, but
        it SHOULD provide values\n      as close as possible to those in the offer.\n
        \  o  There are no requirements when negotiating \"blockLength\", other\n
        \     than that both parties must be in agreement.\n   o  The \"maxRedundantFrames\"
        is a suggested minimum.  This value MAY\n      be increased in an answer (with
        a maximum of 15), but MUST NOT be\n      reduced.\n   o  For transmission
        of scalable multi-session streaming of ATRAC\n      Advanced Lossless content,
        the attributes of media stream\n      identification, group information, and
        decoding dependency between\n      base layer stream and enhancement layer
        stream MUST be signaled in\n      SDP by the Offer/Answer model.  In this
        case, the attribute of\n      \"group\", \"mid\", and \"depend\" followed
        by the appropriate parameter\n      MUST be used in SDP [7] [8] in order to
        indicate layered coding\n      dependency.  The attribute of \"group\" followed
        by \"DDP\" parameter\n      is used for indicating the relationship between
        the base and the\n      enhancement layer stream with decoding dependency.
        \ Each stream is\n      identified by \"mid\" attribute, and the dependency
        of enhancement\n      layer stream is defined by the \"depend\" attribute,
        as the\n      enhancement layer is only useful when the base layer is available.\n
        \     Examples for signaling ATRAC Advanced Lossless decoding dependency\n
        \     are described in Sections 7.8 and 7.9.\n"
      title: 7.6.4.  For Media Subtype ATRAC Advanced Lossless
    title: 7.6.  Offer/Answer Model Considerations
  - contents:
    - "7.7.  Usage of Declarative SDP\n   In declarative usage, like SDP in Real-Time
      Streaming Protocol (RTSP)\n   [15] or Session Announcement Protocol (SAP) [16],
      the parameters MUST\n   be interpreted as follows:\n   o  The payload format
      configuration parameters (baseLayer,\n      sampleRate, channelID) are all declarative
      and a participant MUST\n      use the configuration(s) provided for the session.
      \ More than one\n      configuration may be provided if necessary by declaring
      multiple\n      RTP payload types; however, the number of types SHOULD be kept\n
      \     small.\n   o  Any \"maxptime\" and \"ptime\" values SHOULD be selected
      with care to\n      ensure that the session's participants can achieve reasonable\n
      \     performance.\n   o  The attribute of \"mid\", \"group\", and \"depend\"
      MUST be used for\n      indicating the relationship and dependency of the base
      layer and\n      the enhancement layer in scalable multi-session streaming of
      ATRAC\n      ADVANCED LOSSLESS content, as described in Sections 7.6, 7.8, and\n
      \     7.9.\n"
    title: 7.7.  Usage of Declarative SDP
  - contents:
    - "7.8.  Example SDP Session Descriptions\n   Example usage of ATRAC-X with stereo
      at 44100 Hz:\n   v=0\n   o=atrac 2465317890 2465317890 IN IP4 service.example.com\n
      \  s=ATRAC-X Streaming\n   c=IN IP4 192.0.2.1/127\n   t=3409539540 3409543140\n
      \  m=audio 49120 RTP/AVP 99\n   a=rtpmap:99 ATRAC-X/44100/2\n   a=fmtp:99 baseLayer=128;
      channelID=2; delayMode=2\n   a=maxptime:47\n   Example usage of ATRAC-X with
      5.1 setup at 48000 Hz:\n   v=0\n   o=atrac 2465317890 2465317890 IN IP4 service.example.com\n
      \  s=ATRAC-X 5.1ch Streaming\n   c=IN IP4 192.0.2.1/127\n   t=3409539540 3409543140\n
      \  m=audio 49120 RTP/AVP 99\n   a=rtpmap:99 ATRAC-X/48000/6\n   a=fmtp:99 baseLayer=320;
      channelID=5\n   a=maxptime:43\n   Example usage of ATRAC-Advanced-Lossless in
      multiplexed\n   High-Speed Transfer mode:\n   v=0\n   o=atrac 2465317890 2465317890
      IN IP4 service.example.com\n   s=AAL Multiplexed Streaming\n   c=IN IP4 192.0.2.1/127\n
      \  t=3409539540 3409543140\n   m=audio 49200 RTP/AVP 96\n   a=rtpmap:96 ATRAC-ADVANCED-LOSSLESS/44100/2\n
      \  a=fmtp:96 baseLayer=128; blockLength=2048; channelID=2\n   a=maxptime:47\n
      \  Example usage of ATRAC-Advanced-Lossless in multi-session High-Speed\n   Transfer
      mode.  In this case, the base layer and the enhancement\n   layer stream are
      identified by L1 and L2, respectively, and L2\n   depends on L1 in decoding.\n
      \  v=0\n   o=atrac 2465317890 2465317890 IN IP4 service.example.com\n   s=AAL
      Multi Session Streaming\n   c=IN IP4 192.0.2.1/127\n   t=3409539540 3409543140\n
      \  a=group:DDP L1 L2\n   m=audio 49200 RTP/AVP 96\n   a=rtpmap:96 ATRAC-ADVANCED-LOSSLESS/44100/2\n
      \  a=fmtp:96 baseLayer=128; blockLength=2048; channelID=2\n   a=maxptime:47\n
      \  a=mid:L1\n   m=audio 49202 RTP/AVP 97\n   a=rtpmap:97 ATRAC-ADVANCED-LOSSLESS/44100/2\n
      \  a=fmtp:97 baseLayer=0; blockLength=2048; channelID=2\n   a=maxptime:47\n
      \  a=mid:L2\n   a=depend:97 lay L1:96\n   Example usage of ATRAC-Advanced-Lossless
      in Standard mode:\n   m=audio 49200 RTP/AVP 99\n   a=rtpmap:99 ATRAC-ADVANCED-LOSSLESS/44100/2\n
      \  a=fmtp:99 baseLayer=0; blockLength=1024; channelID=2\n   a=maxptime:24\n"
    title: 7.8.  Example SDP Session Descriptions
  - contents:
    - "7.9.  Example Offer/Answer Exchange\n   The following Offer/Answer example
      shows how a desire to stream\n   multi-channel content is turned down by the
      receiver, who answers\n   with only the ability to receive stereo content:\n
      \  Offer:\n   m=audio 49170 RTP/AVP 98 99\n   a=rtpmap:98 ATRAC-X/44100/6\n
      \  a=fmtp:98 baseLayer=320; channelID=5\n   a=rtpmap:99 ATRAC-X/44100/2\n   a=fmtp:99
      baseLayer=160; channelID=2\n   Answer:\n   m=audio 49170 RTP/AVP 99\n   a=rtpmap:99
      ATRAC-X/44100/2\n   a=fmtp:99 baseLayer=160; channelID=2\n   The following Offer/Answer
      example shows the receiver answering with\n   a selection of supported parameters:\n
      \  Offer:\n   m=audio 49170 RTP/AVP 97 98 99\n   a=rtpmap:97 ATRAC-X/44100/2\n
      \  a=fmtp:97 baseLayer=128; channelID=2\n   a=rtpmap:98 ATRAC-X/44100/6\n   a=fmtp:98
      baseLayer=128; channelID=5\n   a=rtpmap:99 ATRAC-X/48000/6\n   a=fmtp:99 baseLayer=320;
      channelID=5\n   Answer:\n   m=audio 49170 RTP/AVP 97 98\n   a=rtpmap:97 ATRAC-X/44100/2\n
      \  a=fmtp:97 baseLayer=128; channelID=2\n   a=rtpmap:98 ATRAC-X/44100/6\n   a=fmtp:98
      baseLayer=128; channelID=5\n   The following Offer/Answer example shows an exchange
      in trying to\n   resolve using ATRAC-Advanced-Lossless.  The offer contains
      three\n   options: multi-session High-Speed Transfer mode, multiplexed High-\n
      \  Speed Transfer mode, and Standard mode.\n   Offer:\n"
    - "// Multi-session High-Speed Transfer mode, L1 and L2 correspond\n   to the
      base layer and the enhancement layer, respectively, and L2\n   depends on L1
      in decoding.\n   a=group:DDP L1 L2\n   m=audio 49200 RTP/AVP 96\n   a=rtpmap:96
      ATRAC-ADVANCED-LOSSLESS/44100/2\n   a=fmtp:96 baseLayer=132; blockLength=1024;
      channelID=2\n   a=maxptime:24\n   a=mid:L1\n   m=audio 49202 RTP/AVP 97\n   a=rtpmap:97
      ATRAC-ADVANCED-LOSSLESS/44100/2\n   a=fmtp:97 baseLayer=0; blockLength=2048;
      channelID=2\n   a=maxptime:24\n   a=mid:L2\n   a=depend:97 lay L1:96\n"
    - "// Multiplexed High-Speed Transfer mode\n   m=audio 49200 RTP/AVP 98\n   a=rtpmap:98
      ATRAC-ADVANCED-LOSSLESS/44100/2\n   a=fmtp:98 baseLayer=256; blockLength=2048;
      channelID=2\n   a=maxptime:47\n"
    - "// Standard mode\n   m=audio 49200 RTP/AVP 99\n   a=rtpmap:99 ATRAC-ADVANCED-LOSSLESS/44100/2\n
      \  a=fmtp:99 baseLayer=0; blockLength=2048; channelID=2\n   a=maxptime:47\n
      \  Answer:\n   a=group:DDP L1 L2\n   m=audio 49200 RTP/AVP 94\n   a=rtpmap:94
      ATRAC-ADVANCED-LOSSLESS/44100/2\n   a=fmtp:94 baseLayer=132; blockLength=1024;
      channelID=2\n   a=maxptime:24\n   a=mid:L1\n   m=audio 49202 RTP/AVP 95\n   a=rtpmap:95
      ATRAC-ADVANCED-LOSSLESS/44100/2\n   a=fmtp:95 baseLayer=0; blockLength=2048;
      channelID=2\n   a=maxptime:24\n   a=mid:L2\n   a=depend:95 lay L1:94\n   Note
      that the names of payload format (encoding) and Media subtypes\n   are case-insensitive
      in both places.  Similarly, parameter names are\n   case-insensitive both in
      Media types and in the default mapping to\n   the SDP a=fmtp attribute.\n"
    title: 7.9.  Example Offer/Answer Exchange
  title: 7.  Payload Format Parameters
- contents:
  - "8.  IANA Considerations\n   Three new Media subtypes, audio/ATRAC3, audio/ATRAC-X,
    and\n   audio/ATRAC-ADVANCED-LOSSLESS, have been registered (see Section 7).\n"
  title: 8.  IANA Considerations
- contents:
  - "9.  Security Considerations\n   The payload format as described in this document
    is subject to the\n   security considerations defined in RFC 3550 [1] and any
    applicable\n   profile, for example, RFC 3551 [3].  Also, the security of Media
    type\n   registration MUST be taken into account as described in Section 5 of\n
    \  RFC 4855 [6].\n   The payload for ATRAC family consists solely of compressed
    audio data\n   to be decoded and presented as sound, and the standard specifications\n
    \  of ATRAC3, ATRAC-X, and ATRAC Advanced Lossless [9] [10] [11]\n   strictly
    define the bit stream syntax and the buffer model in decoder\n   side for each
    codec.  So they can not carry \"active content\" that\n   could impose malicious
    side effects upon the receiver, and they do\n   not cause any problem of illegal
    resource consumption in receiver\n   side, as far as the bit streams are conforming
    to their standard\n   specifications.\n   This payload format does not implement
    any security mechanisms of its\n   own.  Confidentiality, integrity protection,
    and authentication have\n   to be provided by a mechanism external to this payload
    format, e.g.,\n   SRTP RFC 3711 [13].\n"
  title: 9.  Security Considerations
- contents:
  - '10.  Considerations on Correct Decoding

    '
  - contents:
    - "10.1.  Verification of the Packets\n   Verification of the received encoded
      audio packets MUST be performed\n   so as to ensure correct decoding of the
      packets.  As a most primitive\n   implementation, the comparison of the packet
      size and payload length\n   can be taken into account.  If the UDP packet length
      is longer than\n   the RTP packet length, the packet can be accepted, but the
      extra\n   bytes MUST be ignored.  In case of receiving a shorter UDP packet
      or\n   improperly encoded packets, the packets MUST be discarded.\n"
    title: 10.1.  Verification of the Packets
  - contents:
    - "10.2.  Validity Checking of the Packets\n   Also, validity checking of the
      received audio packets MUST be\n   performed.  It can be carried out by the
      decoding process, as the\n   ATRAC format is designed so that the validity of
      data frames can be\n   determined by decoding the algorithm.  The required decoder
      response\n   to a malformed frame is to discard the malformed data and conceal
      the\n   errors in the audio output until a valid frame is detected and\n   decoded.
      \ This is expected to prevent crashes and other abnormal\n   decoder behavior
      in response to errors or attacks.\n"
    title: 10.2.  Validity Checking of the Packets
  title: 10.  Considerations on Correct Decoding
- contents:
  - '11.  References

    '
  - contents:
    - "11.1.  Normative References\n   [1]   Schulzrinne, H., Casner, S., Frederick,
      R., and V. Jacobson,\n         \"RTP: A Transport Protocol for Real-Time Applications\",
      STD 64,\n         RFC 3550, July 2003.\n   [2]   Handley, M., Jacobson, V.,
      and C. Perkins, \"SDP: Session\n         Description Protocol\", RFC 4566, July
      2006.\n   [3]   Schulzrinne, H. and S. Casner, \"RTP Profile for Audio and Video\n
      \        Conferences with Minimal Control\", STD 65, RFC 3551, July 2003.\n
      \  [4]   Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n
      \        Levels\", BCP 14, RFC 2119, March 1997.\n   [5]   Freed, N. and J.
      Klensin, \"Media Type Specifications and\n         Registration Procedures\",
      BCP 13, RFC 4288, December 2005.\n   [6]   Casner, S., \"Media Type Registration
      of RTP Payload Formats\",\n         RFC 4855, February 2007.\n   [7]   Camarillo,
      G., Eriksson, G., Holler, J., and H. Schulzrinne,\n         \"Grouping of Media
      Lines in the Session Description Protocol\n         (SDP)\", RFC 3388, December
      2002.\n   [8]   Schierl, T., and S. Wenger, \"Signaling Media Decoding\n         Dependency
      in the Session Description Protocol (SDP)\", RFC\n         5583, July 2009.\n
      \  [9]   ATRAC3 Standard Specification ver.1.1, Sony Corporation, 2003.\n   [10]
      \ ATRAC-X Standard Specification ver.1.2, Sony Corporation, 2004.\n   [11]  ATRAC
      Advanced Lossless Standard Specification ver.1.1, Sony\n         Corporation,
      2007.\n"
    title: 11.1.  Normative References
  - contents:
    - "11.2.  Informative References\n   [12]  Perkins, C., Kouvelas, I., Hodson,
      O., Hardman, V., Handley,\n         M., Bolot, J., Vega-Garcia, A., and S. Fosse-Parisis,
      \"RTP\n         Payload for Redundant Audio Data\", RFC 2198, September 1997.\n
      \  [13]  Baugher, M., McGrew, D., Naslund, M., Carrara, E., and K.\n         Norrman,
      \"The Secure Real-time Transport Protocol (SRTP)\", RFC\n         3711, March
      2004.\n   [14]  Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer Model with\n
      \        Session Description Protocol (SDP)\", RFC 3264, June 2002.\n   [15]
      \ Schulzrinne, H., Rao, A., and R. Lanphier, \"Real Time Streaming\n         Protocol
      (RTSP)\", RFC 2326, April 1998.\n   [16]  Handley, M., Perkins, C., and E. Whelan,
      \"Session Announcement\n         Protocol\", RFC 2974, October 2000.\n"
    title: 11.2.  Informative References
  title: 11.  References
- contents:
  - "Authors' Addresses\n   Mitsuyuki Hatanaka\n   Sony Corporation, Japan\n   1-7-1
    Konan\n   Minato-ku\n   Tokyo  108-0075\n   Japan\n   EMail: actech@jp.sony.com\n
    \  Jun Matsumoto\n   Sony Corporation, Japan\n   1-7-1 Konan\n   Minato-ku\n   Tokyo
    \ 108-0075\n   Japan\n   EMail: actech@jp.sony.com\n"
  title: Authors' Addresses
