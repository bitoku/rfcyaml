- title: __initial_text__
  contents:
  - '              RSVP-TE: Extensions to RSVP for LSP Tunnels

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the use of RSVP (Resource Reservation\n\
    \   Protocol), including all the necessary extensions, to establish\n   label-switched\
    \ paths (LSPs) in MPLS (Multi-Protocol Label Switching).\n   Since the flow along\
    \ an LSP is completely identified by the label\n   applied at the ingress node\
    \ of the path, these paths may be treated\n   as tunnels.  A key application of\
    \ LSP tunnels is traffic engineering\n   with MPLS as specified in RFC 2702.\n\
    \   We propose several additional objects that extend RSVP, allowing the\n   establishment\
    \ of explicitly routed label switched paths using RSVP as\n   a signaling protocol.\
    \  The result is the instantiation of label-\n   switched tunnels which can be\
    \ automatically routed away from network\n   failures, congestion, and bottlenecks.\n"
- title: Contents
  contents:
  - "Contents\n   1      Introduction   ..........................................\
    \   3\n   1.1    Background  .............................................   4\n\
    \   1.2    Terminology  ............................................   6\n   2\
    \      Overview   ..............................................   7\n   2.1 \
    \   LSP Tunnels and Traffic Engineered Tunnels  .............   7\n   2.2    Operation\
    \ of LSP Tunnels  ...............................   8\n   2.3    Service Classes\
    \  ........................................  10\n   2.4    Reservation Styles\
    \  .....................................  10\n   2.4.1  Fixed Filter (FF) Style\
    \  ................................  10\n   2.4.2  Wildcard Filter (WF) Style\
    \  .............................  11\n   2.4.3  Shared Explicit (SE) Style  .............................\
    \  11\n   2.5    Rerouting Traffic Engineered Tunnels  ...................  12\n\
    \   2.6    Path MTU  ...............................................  13\n   3\
    \      LSP Tunnel related Message Formats  .....................  15\n   3.1 \
    \   Path Message  ...........................................  15\n   3.2    Resv\
    \ Message  ...........................................  16\n   4      LSP Tunnel\
    \ related Objects  .............................  17\n   4.1    Label Object \
    \ ...........................................  17\n   4.1.1  Handling Label Objects\
    \ in Resv messages  ................  17\n   4.1.2  Non-support of the Label Object\
    \  ........................  19\n   4.2    Label Request Object  ...................................\
    \  19\n   4.2.1  Label Request without Label Range  ......................  19\n\
    \   4.2.2  Label Request with ATM Label Range  .....................  20\n   4.2.3\
    \  Label Request with Frame Relay Label Range  .............  21\n   4.2.4  Handling\
    \ of LABEL_REQUEST  ..............................  22\n   4.2.5  Non-support\
    \ of the Label Request Object  ................  23\n   4.3    Explicit Route\
    \ Object  ..................................  23\n   4.3.1  Applicability  ..........................................\
    \  24\n   4.3.2  Semantics of the Explicit Route Object  .................  24\n\
    \   4.3.3  Subobjects  .............................................  25\n   4.3.4\
    \  Processing of the Explicit Route Object  ................  28\n   4.3.5  Loops\
    \  ..................................................  30\n   4.3.6  Forward Compatibility\
    \  ..................................  30\n   4.3.7  Non-support of the Explicit\
    \ Route Object  ...............  31\n   4.4    Record Route Object  ....................................\
    \  31\n   4.4.1  Subobjects  .............................................  31\n\
    \   4.4.2  Applicability  ..........................................  34\n   4.4.3\
    \  Processing RRO  .........................................  35\n   4.4.4  Loop\
    \ Detection  .........................................  36\n   4.4.5  Forward\
    \ Compatibility  ..................................  37\n   4.4.6  Non-support\
    \ of RRO  .....................................  37\n   4.5    Error Codes for\
    \ ERO and RRO  ............................  37\n   4.6    Session, Sender Template,\
    \ and Filter Spec Objects  ......  38\n   4.6.1  Session Object  .........................................\
    \  39\n   4.6.2  Sender Template Object  .................................  40\n\
    \   4.6.3  Filter Specification Object  ............................  42\n   4.6.4\
    \  Reroute and Bandwidth Increase Procedure  ...............  42\n   4.7    Session\
    \ Attribute Object  ...............................  43\n   4.7.1  Format without\
    \ resource affinities  .....................  43\n   4.7.2  Format with resource\
    \ affinities  ........................  45\n   4.7.3  Procedures applying to both\
    \ C-Types  ....................  46\n   4.7.4  Resource Affinity Procedures  \
    \ ..........................  48\n   5      Hello Extension  ........................................\
    \  49\n   5.1    Hello Message Format  ...................................  50\n\
    \   5.2    HELLO Object formats  ...................................  51\n   5.2.1\
    \  HELLO REQUEST object  ...................................  51\n   5.2.2  HELLO\
    \ ACK object  .......................................  51\n   5.3    Hello Message\
    \ Usage  ....................................  52\n   5.4    Multi-Link Considerations\
    \  ..............................  53\n   5.5    Compatibility  ..........................................\
    \  54\n   6      Security Considerations  ................................  54\n\
    \   7      IANA Considerations  ....................................  54\n   7.1\
    \    Message Types  ..........................................  55\n   7.2   \
    \ Class Numbers and C-Types  ..............................  55\n   7.3    Error\
    \ Codes and Globally-Defined Error Value Sub-Codes  .  57\n   7.4    Subobject\
    \ Definitions  ..................................  57\n   8      Intellectual\
    \ Property Considerations  ...................  58\n   9      Acknowledgments\
    \  ........................................  58\n   10     References  .............................................\
    \  58\n   11     Authors' Addresses  .....................................  60\n\
    \   12     Full Copyright Statement  ...............................  61\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   Section 2.9 of the MPLS architecture [2] defines a label\
    \ distribution\n   protocol as a set of procedures by which one Label Switched\
    \ Router\n   (LSR) informs another of the meaning of labels used to forward\n\
    \   traffic between and through them.  The MPLS architecture does not\n   assume\
    \ a single label distribution protocol.  This document is a\n   specification\
    \ of extensions to RSVP for establishing label switched\n   paths (LSPs) in MPLS\
    \ networks.\n   Several of the new features described in this document were motivated\n\
    \   by the requirements for traffic engineering over MPLS (see [3]).  In\n   particular,\
    \ the extended RSVP protocol supports the instantiation of\n   explicitly routed\
    \ LSPs, with or without resource reservations.  It\n   also supports smooth rerouting\
    \ of LSPs, preemption, and loop\n   detection.\n   The LSPs created with RSVP\
    \ can be used to carry the \"Traffic Trunks\"\n   described in [3].  The LSP which\
    \ carries a traffic trunk and a\n   traffic trunk are distinct though closely\
    \ related concepts.  For\n   example, two LSPs between the same source and destination\
    \ could be\n   load shared to carry a single traffic trunk.  Conversely several\n\
    \   traffic trunks could be carried in the same LSP if, for instance, the\n  \
    \ LSP were capable of carrying several service classes.  The\n   applicability\
    \ of these extensions is discussed further in [10].\n   Since the traffic that\
    \ flows along a label-switched path is defined\n   by the label applied at the\
    \ ingress node of the LSP, these paths can\n   be treated as tunnels, tunneling\
    \ below normal IP routing and\n   filtering mechanisms.  When an LSP is used in\
    \ this way we refer to it\n   as an LSP tunnel.\n   LSP tunnels allow the implementation\
    \ of a variety of policies related\n   to network performance optimization.  For\
    \ example, LSP tunnels can be\n   automatically or manually routed away from network\
    \ failures,\n   congestion, and bottlenecks.  Furthermore, multiple parallel LSP\n\
    \   tunnels can be established between two nodes, and traffic between the\n  \
    \ two nodes can be mapped onto the LSP tunnels according to local\n   policy.\
    \  Although traffic engineering (that is, performance\n   optimization of operational\
    \ networks) is expected to be an important\n   application of this specification,\
    \ the extended RSVP protocol can be\n   used in a much wider context.\n   The\
    \ purpose of this document is to describe the use of RSVP to\n   establish LSP\
    \ tunnels.  The intent is to fully describe all the\n   objects, packet formats,\
    \ and procedures required to realize\n   interoperable implementations.  A few\
    \ new objects are also defined\n   that enhance management and diagnostics of\
    \ LSP tunnels.\n   The document also describes a means of rapid node failure detection\n\
    \   via a new HELLO message.\n   All objects and messages described in this specification\
    \ are optional\n   with respect to RSVP.  This document discusses what happens\
    \ when an\n   object described here is not supported by a node.\n   Throughout\
    \ this document, the discussion will be restricted to\n   unicast label switched\
    \ paths.  Multicast LSPs are left for further\n   study.\n"
- title: 1.1. Background
  contents:
  - "1.1. Background\n   Hosts and routers that support both RSVP [1] and Multi-Protocol\
    \ Label\n   Switching [2] can associate labels with RSVP flows.  When MPLS and\n\
    \   RSVP are combined, the definition of a flow can be made more\n   flexible.\
    \  Once a label switched path (LSP) is established, the\n   traffic through the\
    \ path is defined by the label applied at the\n   ingress node of the LSP.  The\
    \ mapping of label to traffic can be\n   accomplished using a number of different\
    \ criteria.  The set of\n   packets that are assigned the same label value by\
    \ a specific node are\n   said to belong to the same forwarding equivalence class\
    \ (FEC) (see\n   [2]), and effectively define the \"RSVP flow.\"  When traffic\
    \ is mapped\n   onto a label-switched path in this way, we call the LSP an \"\
    LSP\n   Tunnel\".  When labels are associated with traffic flows, it becomes\n\
    \   possible for a router to identify the appropriate reservation state\n   for\
    \ a packet based on the packet's label value.\n   The signaling protocol model\
    \ uses downstream-on-demand label\n   distribution.  A request to bind labels\
    \ to a specific LSP tunnel is\n   initiated by an ingress node through the RSVP\
    \ Path message.  For this\n   purpose, the RSVP Path message is augmented with\
    \ a LABEL_REQUEST\n   object.  Labels are allocated downstream and distributed\
    \ (propagated\n   upstream) by means of the RSVP Resv message.  For this purpose,\
    \ the\n   RSVP Resv message is extended with a special LABEL object.  The\n  \
    \ procedures for label allocation, distribution, binding, and stacking\n   are\
    \ described in subsequent sections of this document.\n   The signaling protocol\
    \ model also supports explicit routing\n   capability.  This is accomplished by\
    \ incorporating a simple\n   EXPLICIT_ROUTE object into RSVP Path messages.  The\
    \ EXPLICIT_ROUTE\n   object encapsulates a concatenation of hops which constitutes\
    \ the\n   explicitly routed path.  Using this object, the paths taken by\n   label-switched\
    \ RSVP-MPLS flows can be pre-determined, independent of\n   conventional IP routing.\
    \  The explicitly routed path can be\n   administratively specified, or automatically\
    \ computed by a suitable\n   entity based on QoS and policy requirements, taking\
    \ into\n   consideration the prevailing network state.  In general, path\n   computation\
    \ can be control-driven or data-driven.  The mechanisms,\n   processes, and algorithms\
    \ used to compute explicitly routed paths are\n   beyond the scope of this specification.\n\
    \   One useful application of explicit routing is traffic engineering.\n   Using\
    \ explicitly routed LSPs, a node at the ingress edge of an MPLS\n   domain can\
    \ control the path through which traffic traverses from\n   itself, through the\
    \ MPLS network, to an egress node.  Explicit\n   routing can be used to optimize\
    \ the utilization of network resources\n   and enhance traffic oriented performance\
    \ characteristics.\n   The concept of explicitly routed label switched paths can\
    \ be\n   generalized through the notion of abstract nodes.  An abstract node\n\
    \   is a group of nodes whose internal topology is opaque to the ingress\n   node\
    \ of the LSP.  An abstract node is said to be simple if it\n   contains only one\
    \ physical node.  Using this concept of abstraction,\n   an explicitly routed\
    \ LSP can be specified as a sequence of IP\n   prefixes or a sequence of Autonomous\
    \ Systems.\n   The signaling protocol model supports the specification of an\n\
    \   explicit path as a sequence of strict and loose routes.  The\n   combination\
    \ of abstract nodes, and strict and loose routes\n   significantly enhances the\
    \ flexibility of path definitions.\n   An advantage of using RSVP to establish\
    \ LSP tunnels is that it\n   enables the allocation of resources along the path.\
    \  For example,\n   bandwidth can be allocated to an LSP tunnel using standard\
    \ RSVP\n   reservations and Integrated Services service classes [4].\n   While\
    \ resource reservations are useful, they are not mandatory.\n   Indeed, an LSP\
    \ can be instantiated without any resource reservations\n   whatsoever.  Such\
    \ LSPs without resource reservations can be used, for\n   example, to carry best\
    \ effort traffic.  They can also be used in many\n   other contexts, including\
    \ implementation of fall-back and recovery\n   policies under fault conditions,\
    \ and so forth.\n"
- title: 1.2. Terminology
  contents:
  - "1.2. Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC2119\
    \ [6].\n   The reader is assumed to be familiar with the terminology in [1], [2]\n\
    \   and [3].\n   Abstract Node\n      A group of nodes whose internal topology\
    \ is opaque to the ingress\n      node of the LSP.  An abstract node is said to\
    \ be simple if it\n      contains only one physical node.\n   Explicitly Routed\
    \ LSP\n      An LSP whose path is established by a means other than normal IP\n\
    \      routing.\n   Label Switched Path\n      The path created by the concatenation\
    \ of one or more label\n      switched hops, allowing a packet to be forwarded\
    \ by swapping\n      labels from an MPLS node to another MPLS node.  For a more\
    \ precise\n      definition see [2].\n   LSP\n      A Label Switched Path\n  \
    \ LSP Tunnel\n      An LSP which is used to tunnel below normal IP routing and/or\n\
    \      filtering mechanisms.\n   Traffic Engineered Tunnel (TE Tunnel)\n     \
    \ A set of one or more LSP Tunnels which carries a traffic trunk.\n   Traffic\
    \ Trunk\n      A set of flows aggregated by their service class and then placed\n\
    \      on an LSP or set of LSPs called a traffic engineered tunnel.  For\n   \
    \   further discussion see [3].\n"
- title: 2. Overview
  contents:
  - '2. Overview

    '
- title: 2.1. LSP Tunnels and Traffic Engineered Tunnels
  contents:
  - "2.1. LSP Tunnels and Traffic Engineered Tunnels\n   According to [1], \"RSVP\
    \ defines a 'session' to be a data flow with a\n   particular destination and\
    \ transport-layer protocol.\" However, when\n   RSVP and MPLS are combined, a\
    \ flow or session can be defined with\n   greater flexibility and generality.\
    \  The ingress node of an LSP can\n   use a variety of means to determine which\
    \ packets are assigned a\n   particular label.  Once a label is assigned to a\
    \ set of packets, the\n   label effectively defines the \"flow\" through the LSP.\
    \  We refer to\n   such an LSP as an \"LSP tunnel\" because the traffic through\
    \ it is\n   opaque to intermediate nodes along the label switched path.\n   New\
    \ RSVP SESSION, SENDER_TEMPLATE, and FILTER_SPEC objects, called\n   LSP_TUNNEL_IPv4\
    \ and LSP_TUNNEL_IPv6 have been defined to support the\n   LSP tunnel feature.\
    \  The semantics of these objects, from the\n   perspective of a node along the\
    \ label switched path, is that traffic\n   belonging to the LSP tunnel is identified\
    \ solely on the basis of\n   packets arriving from the PHOP or \"previous hop\"\
    \ (see [1]) with the\n   particular label value(s) assigned by this node to upstream\
    \ senders\n   to the session.  In fact, the IPv4(v6) that appears in the object\n\
    \   name only denotes that the destination address is an IPv4(v6)\n   address.\
    \  When we refer to these objects generically, we use the\n   qualifier LSP_TUNNEL.\n\
    \   In some applications it is useful to associate sets of LSP tunnels.\n   This\
    \ can be useful during reroute operations or to spread a traffic\n   trunk over\
    \ multiple paths.  In the traffic engineering application\n   such sets are called\
    \ traffic engineered tunnels (TE tunnels).  To\n   enable the identification and\
    \ association of such LSP tunnels, two\n   identifiers are carried.  A tunnel\
    \ ID is part of the SESSION object.\n   The SESSION object uniquely defines a\
    \ traffic engineered tunnel.  The\n   SENDER_TEMPLATE and FILTER_SPEC objects\
    \ carry an LSP ID.  The\n   SENDER_TEMPLATE (or FILTER_SPEC) object together with\
    \ the SESSION\n   object uniquely identifies an LSP tunnel\n"
- title: 2.2. Operation of LSP Tunnels
  contents:
  - "2.2. Operation of LSP Tunnels\n   This section summarizes some of the features\
    \ supported by RSVP as\n   extended by this document related to the operation\
    \ of LSP tunnels.\n   These include: (1) the capability to establish LSP tunnels\
    \ with or\n   without QoS requirements, (2) the capability to dynamically reroute\n\
    \   an established LSP tunnel, (3) the capability to observe the actual\n   route\
    \ traversed by an established LSP tunnel, (4) the capability to\n   identify and\
    \ diagnose LSP tunnels, (5) the capability to preempt an\n   established LSP tunnel\
    \ under administrative policy control, and (6)\n   the capability to perform downstream-on-demand\
    \ label allocation,\n   distribution, and binding.  In the following paragraphs,\
    \ these\n   features are briefly described.  More detailed descriptions can be\n\
    \   found in subsequent sections of this document.\n   To create an LSP tunnel,\
    \ the first MPLS node on the path -- that is,\n   the sender node with respect\
    \ to the path -- creates an RSVP Path\n   message with a session type of LSP_TUNNEL_IPv4\
    \ or LSP_TUNNEL_IPv6 and\n   inserts a LABEL_REQUEST object into the Path message.\
    \  The\n   LABEL_REQUEST object indicates that a label binding for this path is\n\
    \   requested and also provides an indication of the network layer\n   protocol\
    \ that is to be carried over this path.  The reason for this\n   is that the network\
    \ layer protocol sent down an LSP cannot be assumed\n   to be IP and cannot be\
    \ deduced from the L2 header, which simply\n   identifies the higher layer protocol\
    \ as MPLS.\n   If the sender node has knowledge of a route that has high likelihood\n\
    \   of meeting the tunnel's QoS requirements, or that makes efficient use\n  \
    \ of network resources, or that satisfies some policy criteria, the\n   node can\
    \ decide to use the route for some or all of its sessions.  To\n   do this, the\
    \ sender node adds an EXPLICIT_ROUTE object to the RSVP\n   Path message.  The\
    \ EXPLICIT_ROUTE object specifies the route as a\n   sequence of abstract nodes.\n\
    \   If, after a session has been successfully established, the sender\n   node\
    \ discovers a better route, the sender can dynamically reroute the\n   session\
    \ by simply changing the EXPLICIT_ROUTE object.  If problems\n   are encountered\
    \ with an EXPLICIT_ROUTE object, either because it\n   causes a routing loop or\
    \ because some intermediate routers do not\n   support it, the sender node is\
    \ notified.\n   By adding a RECORD_ROUTE object to the Path message, the sender\
    \ node\n   can receive information about the actual route that the LSP tunnel\n\
    \   traverses.  The sender node can also use this object to request\n   notification\
    \ from the network concerning changes to the routing path.\n   The RECORD_ROUTE\
    \ object is analogous to a path vector, and hence can\n   be used for loop detection.\n\
    \   Finally, a SESSION_ATTRIBUTE object can be added to Path messages to\n   aid\
    \ in session identification and diagnostics.  Additional control\n   information,\
    \ such as setup and hold priorities, resource affinities\n   (see [3]), and local-protection,\
    \ are also included in this object.\n   Routers along the path may use the setup\
    \ and hold priorities along\n   with SENDER_TSPEC and any POLICY_DATA objects\
    \ contained in Path\n   messages as input to policy control.  For instance, in\
    \ the traffic\n   engineering application, it is very useful to use the Path message\
    \ as\n   a means of verifying that bandwidth exists at a particular priority\n\
    \   along an entire path before preempting any lower priority\n   reservations.\
    \  If a Path message is allowed to progress when there\n   are insufficient resources,\
    \ then there is a danger that lower\n   priority reservations downstream of this\
    \ point will unnecessarily be\n   preempted in a futile attempt to service this\
    \ request.\n   When the EXPLICIT_ROUTE object (ERO) is present, the Path message\
    \ is\n   forwarded towards its destination along a path specified by the ERO.\n\
    \   Each node along the path records the ERO in its path state block.\n   Nodes\
    \ may also modify the ERO before forwarding the Path message.  In\n   this case\
    \ the modified ERO SHOULD be stored in the path state block\n   in addition to\
    \ the received ERO.\n   The LABEL_REQUEST object requests intermediate routers\
    \ and receiver\n   nodes to provide a label binding for the session.  If a node\
    \ is\n   incapable of providing a label binding, it sends a PathErr message\n\
    \   with an \"unknown object class\" error.  If the LABEL_REQUEST object is\n\
    \   not supported end to end, the sender node will be notified by the\n   first\
    \ node which does not provide this support.\n   The destination node of a label-switched\
    \ path responds to a\n   LABEL_REQUEST by including a LABEL object in its response\
    \ RSVP Resv\n   message.  The LABEL object is inserted in the filter spec list\n\
    \   immediately following the filter spec to which it pertains.\n   The Resv message\
    \ is sent back upstream towards the sender, following\n   the path state created\
    \ by the Path message, in reverse order.  Note\n   that if the path state was\
    \ created by use of an ERO, then the Resv\n   message will follow the reverse\
    \ path of the ERO.\n   Each node that receives a Resv message containing a LABEL\
    \ object uses\n   that label for outgoing traffic associated with this LSP tunnel.\
    \  If\n   the node is not the sender, it allocates a new label and places that\n\
    \   label in the corresponding LABEL object of the Resv message which it\n   sends\
    \ upstream to the PHOP.  The label sent upstream in the LABEL\n   object is the\
    \ label which this node will use to identify incoming\n   traffic associated with\
    \ this LSP tunnel.  This label also serves as\n   shorthand for the Filter Spec.\
    \  The node can now update its \"Incoming\n   Label Map\" (ILM), which is used\
    \ to map incoming labeled packets to a\n   \"Next Hop Label Forwarding Entry\"\
    \ (NHLFE), see [2].\n   When the Resv message propagates upstream to the sender\
    \ node, a\n   label-switched path is effectively established.\n"
- title: 2.3. Service Classes
  contents:
  - "2.3. Service Classes\n   This document does not restrict the type of Integrated\
    \ Service\n   requests for reservations.  However, an implementation SHOULD support\n\
    \   the Controlled-Load service [4] and the Null Service [16].\n"
- title: 2.4. Reservation Styles
  contents:
  - "2.4. Reservation Styles\n   The receiver node can select from among a set of\
    \ possible reservation\n   styles for each session, and each RSVP session must\
    \ have a particular\n   style.  Senders have no influence on the choice of reservation\
    \ style.\n   The receiver can choose different reservation styles for different\n\
    \   LSPs.\n   An RSVP session can result in one or more LSPs, depending on the\n\
    \   reservation style chosen.\n   Some reservation styles, such as FF, dedicate\
    \ a particular\n   reservation to an individual sender node.  Other reservation\
    \ styles,\n   such as WF and SE, can share a reservation among several sender\n\
    \   nodes.  The following sections discuss the different reservation\n   styles\
    \ and their advantages and disadvantages.  A more detailed\n   discussion of reservation\
    \ styles can be found in [1].\n"
- title: 2.4.1. Fixed Filter (FF) Style
  contents:
  - "2.4.1. Fixed Filter (FF) Style\n   The Fixed Filter (FF) reservation style creates\
    \ a distinct\n   reservation for traffic from each sender that is not shared by\
    \ other\n   senders.  This style is common for applications in which traffic from\n\
    \   each sender is likely to be concurrent and independent.  The total\n   amount\
    \ of reserved bandwidth on a link for sessions using FF is the\n   sum of the\
    \ reservations for the individual senders.\n   Because each sender has its own\
    \ reservation, a unique label is\n   assigned to each sender.  This can result\
    \ in a point-to-point LSP\n   between every sender/receiver pair.\n"
- title: 2.4.2. Wildcard Filter (WF) Style
  contents:
  - "2.4.2. Wildcard Filter (WF) Style\n   With the Wildcard Filter (WF) reservation\
    \ style, a single shared\n   reservation is used for all senders to a session.\
    \  The total\n   reservation on a link remains the same regardless of the number\
    \ of\n   senders.\n   A single multipoint-to-point label-switched-path is created\
    \ for all\n   senders to the session.  On links that senders to the session share,\n\
    \   a single label value is allocated to the session.  If there is only\n   one\
    \ sender, the LSP looks like a normal point-to-point connection.\n   When multiple\
    \ senders are present, a multipoint-to-point LSP (a\n   reversed tree) is created.\n\
    \   This style is useful for applications in which not all senders send\n   traffic\
    \ at the same time.  A phone conference, for example, is an\n   application where\
    \ not all speakers talk at the same time.  If,\n   however, all senders send simultaneously,\
    \ then there is no means of\n   getting the proper reservations made.  Either\
    \ the reserved bandwidth\n   on links close to the destination will be less than\
    \ what is required\n   or then the reserved bandwidth on links close to some senders\
    \ will be\n   greater than what is required.  This restricts the applicability\
    \ of\n   WF for traffic engineering purposes.\n   Furthermore, because of the\
    \ merging rules of WF, EXPLICIT_ROUTE\n   objects cannot be used with WF reservations.\
    \  As a result of this\n   issue and the lack of applicability to traffic engineering,\
    \ use of WF\n   is not considered in this document.\n"
- title: 2.4.3. Shared Explicit (SE) Style
  contents:
  - "2.4.3. Shared Explicit (SE) Style\n   The Shared Explicit (SE) style allows a\
    \ receiver to explicitly\n   specify the senders to be included in a reservation.\
    \  There is a\n   single reservation on a link for all the senders listed.  Because\n\
    \   each sender is explicitly listed in the Resv message, different\n   labels\
    \ may be assigned to different senders, thereby creating\n   separate LSPs.\n\
    \   SE style reservations can be provided using multipoint-to-point\n   label-switched-path\
    \ or LSP per sender.  Multipoint-to-point LSPs may\n   be used when path messages\
    \ do not carry the EXPLICIT_ROUTE object, or\n   when Path messages have identical\
    \ EXPLICIT_ROUTE objects.  In either\n   of these cases a common label may be\
    \ assigned.\n   Path messages from different senders can each carry their own\
    \ ERO,\n   and the paths taken by the senders can converge and diverge at any\n\
    \   point in the network topology.  When Path messages have differing\n   EXPLICIT_ROUTE\
    \ objects, separate LSPs for each EXPLICIT_ROUTE object\n   must be established.\n"
- title: 2.5. Rerouting Traffic Engineered Tunnels
  contents:
  - "2.5. Rerouting Traffic Engineered Tunnels\n   One of the requirements for Traffic\
    \ Engineering is the capability to\n   reroute an established TE tunnel under\
    \ a number of conditions, based\n   on administrative policy.  For example, in\
    \ some contexts, an\n   administrative policy may dictate that a given TE tunnel\
    \ is to be\n   rerouted when a more \"optimal\" route becomes available.  Another\n\
    \   important context when TE tunnel reroute is usually required is upon\n   failure\
    \ of a resource along the TE tunnel's established path.  Under\n   some policies,\
    \ it may also be necessary to return the TE tunnel to\n   its original path when\
    \ the failed resource becomes re-activated.\n   In general, it is highly desirable\
    \ not to disrupt traffic, or\n   adversely impact network operations while TE\
    \ tunnel rerouting is in\n   progress.  This adaptive and smooth rerouting requirement\n\
    \   necessitates establishing a new LSP tunnel and transferring traffic\n   from\
    \ the old LSP tunnel onto it before tearing down the old LSP\n   tunnel.  This\
    \ concept is called \"make-before-break.\" A problem can\n   arise because the\
    \ old and new LSP tunnels might compete with each\n   other for resources on network\
    \ segments which they have in common.\n   Depending on availability of resources,\
    \ this competition can cause\n   Admission Control to prevent the new LSP tunnel\
    \ from being\n   established.  An advantage of using RSVP to establish LSP tunnels\
    \ is\n   that it solves this problem very elegantly.\n   To support make-before-break\
    \ in a smooth fashion, it is necessary\n   that on links that are common to the\
    \ old and new LSPs, resources used\n   by the old LSP tunnel should not be released\
    \ before traffic is\n   transitioned to the new LSP tunnel, and reservations should\
    \ not be\n   counted twice because this might cause Admission Control to reject\n\
    \   the new LSP tunnel.\n   A similar situation can arise when one wants to increase\
    \ the\n   bandwidth of a TE tunnel.  The new reservation will be for the full\n\
    \   amount needed, but the actual allocation needed is only the delta\n   between\
    \ the new and old bandwidth.  If policy is being applied to\n   PATH messages\
    \ by intermediate nodes, then a PATH message requesting\n   too much bandwidth\
    \ will be rejected.  In this situation simply\n   increasing the bandwidth request\
    \ without changing the\n   SENDER_TEMPLATE, could result in a tunnel being torn\
    \ down, depending\n   upon local policy.\n   The combination of the LSP_TUNNEL\
    \ SESSION object and the SE\n   reservation style naturally accommodates smooth\
    \ transitions in\n   bandwidth and routing.  The idea is that the old and new\
    \ LSP tunnels\n   share resources along links which they have in common.  The\n\
    \   LSP_TUNNEL SESSION object is used to narrow the scope of the RSVP\n   session\
    \ to the particular TE tunnel in question.  To uniquely\n   identify a TE tunnel,\
    \ we use the combination of the destination IP\n   address (an address of the\
    \ node which is the egress of the tunnel), a\n   Tunnel ID, and the tunnel ingress\
    \ node's IP address, which is placed\n   in the Extended Tunnel ID field.\n  \
    \ During the reroute or bandwidth-increase operation, the tunnel\n   ingress needs\
    \ to appear as two different senders to the RSVP session.\n   This is achieved\
    \ by the inclusion of the \"LSP ID\", which is carried\n   in the SENDER_TEMPLATE\
    \ and FILTER_SPEC objects.  Since the semantics\n   of these objects are changed,\
    \ a new C-Types are assigned.\n   To effect a reroute, the ingress node picks\
    \ a new LSP ID and forms a\n   new SENDER_TEMPLATE.  The ingress node then creates\
    \ a new ERO to\n   define the new path.  Thereafter the node sends a new Path\
    \ Message\n   using the original SESSION object and the new SENDER_TEMPLATE and\n\
    \   ERO.  It continues to use the old LSP and refresh the old Path\n   message.\
    \  On links that are not held in common, the new Path message\n   is treated as\
    \ a conventional new LSP tunnel setup.  On links held in\n   common, the shared\
    \ SESSION object and SE style allow the LSP to be\n   established sharing resources\
    \ with the old LSP.  Once the ingress\n   node receives a Resv message for the\
    \ new LSP, it can transition\n   traffic to it and tear down the old LSP.\n  \
    \ To effect a bandwidth-increase, a new Path Message with a new LSP_ID\n   can\
    \ be used to attempt a larger bandwidth reservation while the\n   current LSP_ID\
    \ continues to be refreshed to ensure that the\n   reservation is not lost if\
    \ the larger reservation fails.\n"
- title: 2.6. Path MTU
  contents:
  - "2.6. Path MTU\n   Standard RSVP [1] and Int-Serv [11] provide the RSVP sender\
    \ with the\n   minimum MTU available between the sender and the receiver.  This\
    \ path\n   MTU identification capability is also provided for LSPs established\n\
    \   via RSVP.\n   Path MTU information is carried, depending on which is present,\
    \ in\n   the Integrated Services or Null Service objects.  When using\n   Integrated\
    \ Services objects, path MTU is provided based on the\n   procedures defined in\
    \ [11].  Path MTU identification when using Null\n   Service objects is defined\
    \ in [16].\n   With standard RSVP, the path MTU information is used by the sender\
    \ to\n   check which IP packets exceed the path MTU.  For packets that exceed\n\
    \   the path MTU, the sender either fragments the packets or, when the IP\n  \
    \ datagram has the \"Don't Fragment\" bit set, issues an ICMP destination\n  \
    \ unreachable message.  This path MTU related handling is also required\n   for\
    \ LSPs established via RSVP.\n   The following algorithm applies to all unlabeled\
    \ IP datagrams and to\n   any labeled packets which the node knows to be IP datagrams,\
    \ to which\n   labels need to be added before forwarding.  For labeled packets\
    \ the\n   bottom of stack is found, the IP header examined.\n   Using the terminology\
    \ defined in [5], an LSR MUST execute the\n   following algorithm:\n   1. Let\
    \ N be the number of bytes in the label stack (i.e, 4 times the\n      number\
    \ of label stack entries) including labels to be added by\n      this node.\n\
    \   2. Let M be the smaller of the \"Maximum Initially Labeled IP Datagram\n \
    \     Size\" or of (Path MTU - N).\n   When the size of an IPv4 datagram (without\
    \ labels) exceeds the value\n      of M,\n      If the DF bit is not set in the\
    \ IPv4 header, then\n         (a) the datagram MUST be broken into fragments,\
    \ each of whose\n             size is no greater than M, and\n         (b) each\
    \ fragment MUST be labeled and then forwarded.\n      If the DF bit is set in\
    \ the IPv4 header, then\n         (a) the datagram MUST NOT be forwarded\n   \
    \      (b) Create an ICMP Destination Unreachable Message:\n              i. set\
    \ its Code field [12] to \"Fragmentation Required and\n                 DF Set\"\
    ,\n             ii. set its Next-Hop MTU field [13] to M\n         (c) If possible,\
    \ transmit the ICMP Destination Unreachable\n             Message to the source\
    \ of the of the discarded datagram.\n      When the size of an IPv6 datagram (without\
    \ labels) exceeds the\n             value of M,\n         (a) the datagram MUST\
    \ NOT be forwarded\n         (b) Create an ICMP Packet too Big Message with the\
    \ Next-Hop\n             link MTU field [14] set to M\n         (c) If possible,\
    \ transmit the ICMP Packet too Big Message to\n             the source of the\
    \ of the discarded datagram.\n"
- title: 3. LSP Tunnel related Message Formats
  contents:
  - "3. LSP Tunnel related Message Formats\n   Five new objects are defined in this\
    \ section:\n      Object name          Applicable RSVP messages\n      ---------------\
    \      ------------------------\n      LABEL_REQUEST          Path\n      LABEL\
    \                  Resv\n      EXPLICIT_ROUTE         Path\n      RECORD_ROUTE\
    \           Path, Resv\n      SESSION_ATTRIBUTE      Path\n   New C-Types are\
    \ also assigned for the SESSION, SENDER_TEMPLATE, and\n   FILTER_SPEC, objects.\n\
    \   Detailed descriptions of the new objects are given in later sections.\n  \
    \ All new objects are OPTIONAL with respect to RSVP.  An implementation\n   can\
    \ choose to support a subset of objects.  However, the\n   LABEL_REQUEST and LABEL\
    \ objects are mandatory with respect to this\n   specification.\n   The LABEL\
    \ and RECORD_ROUTE objects, are sender specific.  In Resv\n   messages they MUST\
    \ appear after the associated FILTER_SPEC and prior\n   to any subsequent FILTER_SPEC.\n\
    \   The relative placement of EXPLICIT_ROUTE, LABEL_REQUEST, and\n   SESSION_ATTRIBUTE\
    \ objects is simply a recommendation.  The ordering\n   of these objects is not\
    \ important, so an implementation MUST be\n   prepared to accept objects in any\
    \ order.\n"
- title: 3.1. Path Message
  contents:
  - "3.1. Path Message\n   The format of the Path message is as follows:\n      <Path\
    \ Message> ::=       <Common Header> [ <INTEGRITY> ]\n                       \
    \        <SESSION> <RSVP_HOP>\n                               <TIME_VALUES>\n\
    \                               [ <EXPLICIT_ROUTE> ]\n                       \
    \        <LABEL_REQUEST>\n                               [ <SESSION_ATTRIBUTE>\
    \ ]\n                               [ <POLICY_DATA> ... ]\n                  \
    \             <sender descriptor>\n      <sender descriptor> ::=  <SENDER_TEMPLATE>\
    \ <SENDER_TSPEC>\n                               [ <ADSPEC> ]\n              \
    \                 [ <RECORD_ROUTE> ]\n"
- title: 3.2. Resv Message
  contents:
  - "3.2. Resv Message\n   The format of the Resv message is as follows:\n      <Resv\
    \ Message> ::=       <Common Header> [ <INTEGRITY> ]\n                       \
    \        <SESSION>  <RSVP_HOP>\n                               <TIME_VALUES>\n\
    \                               [ <RESV_CONFIRM> ]  [ <SCOPE> ]\n            \
    \                   [ <POLICY_DATA> ... ]\n                               <STYLE>\
    \ <flow descriptor list>\n      <flow descriptor list> ::= <FF flow descriptor\
    \ list>\n                               | <SE flow descriptor>\n      <FF flow\
    \ descriptor list> ::= <FLOWSPEC> <FILTER_SPEC>\n                            \
    \   <LABEL> [ <RECORD_ROUTE> ]\n                               | <FF flow descriptor\
    \ list>\n                               <FF flow descriptor>\n      <FF flow descriptor>\
    \ ::= [ <FLOWSPEC> ] <FILTER_SPEC> <LABEL>\n                               [ <RECORD_ROUTE>\
    \ ]\n      <SE flow descriptor> ::= <FLOWSPEC> <SE filter spec list>\n      <SE\
    \ filter spec list> ::= <SE filter spec>\n                               | <SE\
    \ filter spec list> <SE filter spec>\n      <SE filter spec> ::=     <FILTER_SPEC>\
    \ <LABEL> [ <RECORD_ROUTE> ]\n      Note:  LABEL and RECORD_ROUTE (if present),\
    \ are bound to the\n             preceding FILTER_SPEC.  No more than one LABEL\
    \ and/or\n             RECORD_ROUTE may follow each FILTER_SPEC.\n"
- title: 4. LSP Tunnel related Objects
  contents:
  - '4. LSP Tunnel related Objects

    '
- title: 4.1. Label Object
  contents:
  - "4.1. Label Object\n   Labels MAY be carried in Resv messages.  For the FF and\
    \ SE styles, a\n   label is associated with each sender.  The label for a sender\
    \ MUST\n   immediately follow the FILTER_SPEC for that sender in the Resv\n  \
    \ message.\n   The LABEL object has the following format:\n   LABEL class = 16,\
    \ C_Type = 1\n    0                   1                   2                  \
    \ 3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           (top label)                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The contents of a LABEL is a single label, encoded in 4 octets.  Each\n  \
    \ generic MPLS label is an unsigned integer in the range 0 through\n   1048575.\
    \  Generic MPLS labels and FR labels are encoded right aligned\n   in 4 octets.\
    \  ATM labels are encoded with the VPI right justified in\n   bits 0-15 and the\
    \ VCI right justified in bits 16-31.\n"
- title: 4.1.1. Handling Label Objects in Resv messages
  contents:
  - "4.1.1. Handling Label Objects in Resv messages\n   In MPLS a node may support\
    \ multiple label spaces, perhaps associating\n   a unique space with each incoming\
    \ interface.  For the purposes of the\n   following discussion, the term \"same\
    \ label\" means the identical label\n   value drawn from the identical label space.\
    \  Further, the following\n   applies only to unicast sessions.\n   Labels received\
    \ in Resv messages on different interfaces are always\n   considered to be different\
    \ even if the label value is the same.\n"
- title: 4.1.1.1. Downstream
  contents:
  - "4.1.1.1. Downstream\n   The downstream node selects a label to represent the\
    \ flow.  If a\n   label range has been specified in the label request, the label\
    \ MUST\n   be drawn from that range.  If no label is available the node sends\
    \ a\n   PathErr message with an error code of \"routing problem\" and an error\n\
    \   value of \"label allocation failure\".\n   If a node receives a Resv message\
    \ that has assigned the same label\n   value to multiple senders, then that node\
    \ MAY also assign a single\n   value to those same senders or to any subset of\
    \ those senders.  Note\n   that if a node intends to police individual senders\
    \ to a session, it\n   MUST assign unique labels to those senders.\n   In the\
    \ case of ATM, one further condition applies.  Some ATM nodes\n   are not capable\
    \ of merging streams.  These nodes MAY indicate this by\n   setting a bit in the\
    \ label request to zero.  The M-bit in the\n   LABEL_REQUEST object of C-Type\
    \ 2, label request with ATM label range,\n   serves this purpose.  The M-bit SHOULD\
    \ be set by nodes which are\n   merge capable.  If for any senders the M-bit is\
    \ not set, the\n   downstream node MUST assign unique labels to those senders.\n\
    \   Once a label is allocated, the node formats a new LABEL object.  The\n   node\
    \ then sends the new LABEL object as part of the Resv message to\n   the previous\
    \ hop.  The node SHOULD be prepared to forward packets\n   carrying the assigned\
    \ label prior to sending the Resv message.  The\n   LABEL object SHOULD be kept\
    \ in the Reservation State Block.  It is\n   then used in the next Resv refresh\
    \ event for formatting the Resv\n   message.\n   A node is expected to send a\
    \ Resv message before its refresh timers\n   expire if the contents of the LABEL\
    \ object change.\n"
- title: 4.1.1.2. Upstream
  contents:
  - "4.1.1.2. Upstream\n   A node uses the label carried in the LABEL object as the\
    \ outgoing\n   label associated with the sender.  The router allocates a new label\n\
    \   and binds it to the incoming interface of this session/sender.  This\n   is\
    \ the same interface that the router uses to forward Resv messages\n   to the\
    \ previous hops.\n   Several circumstance can lead to an unacceptable label.\n\
    \      1. the node is a merge incapable ATM switch but the downstream\n      \
    \   node has assigned the same label to two senders\n      2. The implicit null\
    \ label was assigned, but the node is not\n         capable of doing a penultimate\
    \ pop for the associated L3PID\n      3. The assigned label is outside the requested\
    \ label range\n   In any of these events the node send a ResvErr message with\
    \ an error\n   code of \"routing problem\" and an error value of \"unacceptable\
    \ label\n   value\".\n"
- title: 4.1.2. Non-support of the Label Object
  contents:
  - "4.1.2. Non-support of the Label Object\n   Under normal circumstances, a node\
    \ should never receive a LABEL\n   object in a Resv message unless it had included\
    \ a LABEL_REQUEST\n   object in the corresponding Path message.  However, an RSVP\
    \ router\n   that does not recognize the LABEL object sends a ResvErr with the\n\
    \   error code \"Unknown object class\" toward the receiver.  This causes\n  \
    \ the reservation to fail.\n"
- title: 4.2. Label Request Object
  contents:
  - "4.2. Label Request Object\n   The Label Request Class is 19.  Currently there\
    \ are three possible\n   C_Types.  Type 1 is a Label Request without label range.\
    \  Type 2 is a\n   label request with an ATM label range.  Type 3 is a label request\n\
    \   with a Frame Relay label range.  The LABEL_REQUEST object formats are\n  \
    \ shown below.\n"
- title: 4.2.1. Label Request without Label Range
  contents:
  - "4.2.1. Label Request without Label Range\n   Class = 19, C_Type = 1\n    0  \
    \                 1                   2                   3\n    0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Reserved            |             L3PID             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Reserved\n         This field is reserved.  It MUST be set to zero on transmission\n\
    \         and MUST be ignored on receipt.\n      L3PID\n         an identifier\
    \ of the layer 3 protocol using this path.\n         Standard Ethertype values\
    \ are used.\n"
- title: 4.2.2. Label Request with ATM Label Range
  contents:
  - "4.2.2. Label Request with ATM Label Range\n   Class = 19, C_Type = 2\n    0 \
    \                  1                   2                   3\n    0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Reserved            |             L3PID             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |M| Res |    Minimum VPI        |      Minimum VCI              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Res  |    Maximum VPI        |      Maximum VCI              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Reserved (Res)\n         This field is reserved.  It MUST be set to zero\
    \ on transmission\n         and MUST be ignored on receipt.\n      L3PID\n   \
    \      an identifier of the layer 3 protocol using this path.\n         Standard\
    \ Ethertype values are used.\n      M\n         Setting this bit to one indicates\
    \ that the node is capable of\n         merging in the data plane\n      Minimum\
    \ VPI (12 bits)\n         This 12 bit field specifies the lower bound of a block\
    \ of\n         Virtual Path Identifiers that is supported on the originating\n\
    \         switch.  If the VPI is less than 12-bits it MUST be right\n        \
    \ justified in this field and preceding bits MUST be set to zero.\n      Minimum\
    \ VCI (16 bits)\n         This 16 bit field specifies the lower bound of a block\
    \ of\n         Virtual Connection Identifiers that is supported on the\n     \
    \    originating switch.  If the VCI is less than 16-bits it MUST be\n       \
    \  right justified in this field and preceding bits MUST be set to\n         zero.\n\
    \      Maximum VPI (12 bits)\n         This 12 bit field specifies the upper bound\
    \ of a block of\n         Virtual Path Identifiers that is supported on the originating\n\
    \         switch.  If the VPI is less than 12-bits it MUST be right\n        \
    \ justified in this field and preceding bits MUST be set to zero.\n      Maximum\
    \ VCI (16 bits)\n         This 16 bit field specifies the upper bound of a block\
    \ of\n         Virtual Connection Identifiers that is supported on the\n     \
    \    originating switch.  If the VCI is less than 16-bits it MUST be\n       \
    \  right justified in this field and preceding bits MUST be set to\n         zero.\n"
- title: 4.2.3. Label Request with Frame Relay Label Range
  contents:
  - "4.2.3. Label Request with Frame Relay Label Range\n   Class = 19, C_Type = 3\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Reserved            |             L3PID             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Reserved    |DLI|                     Minimum DLCI            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Reserved        |                     Maximum DLCI            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Reserved\n         This field is reserved.  It MUST be set to zero on transmission\n\
    \         and ignored on receipt.\n      L3PID\n         an identifier of the\
    \ layer 3 protocol using this path.\n         Standard Ethertype values are used.\n\
    \      DLI\n         DLCI Length Indicator.  The number of bits in the DLCI. \
    \ The\n         following values are supported:\n                   Len    DLCI\
    \ bits\n                    0        10\n                    2        23\n   \
    \   Minimum DLCI\n         This 23-bit field specifies the lower bound of a block\
    \ of Data\n         Link Connection Identifiers (DLCIs) that is supported on the\n\
    \         originating switch.  The DLCI MUST be right justified in this\n    \
    \     field and unused bits MUST be set to 0.\n      Maximum DLCI\n         This\
    \ 23-bit field specifies the upper bound of a block of Data\n         Link Connection\
    \ Identifiers (DLCIs) that is supported on the\n         originating switch. \
    \ The DLCI MUST be right justified in this\n         field and unused bits MUST\
    \ be set to 0.\n"
- title: 4.2.4. Handling of LABEL_REQUEST
  contents:
  - "4.2.4. Handling of LABEL_REQUEST\n   To establish an LSP tunnel the sender creates\
    \ a Path message with a\n   LABEL_REQUEST object.  The LABEL_REQUEST object indicates\
    \ that a\n   label binding for this path is requested and provides an indication\n\
    \   of the network layer protocol that is to be carried over this path.\n   This\
    \ permits non-IP network layer protocols to be sent down an LSP.\n   This information\
    \ can also be useful in actual label allocation,\n   because some reserved labels\
    \ are protocol specific, see [5].\n   The LABEL_REQUEST SHOULD be stored in the\
    \ Path State Block, so that\n   Path refresh messages will also contain the LABEL_REQUEST\
    \ object.\n   When the Path message reaches the receiver, the presence of the\n\
    \   LABEL_REQUEST object triggers the receiver to allocate a label and to\n  \
    \ place the label in the LABEL object for the corresponding Resv\n   message.\
    \  If a label range was specified, the label MUST be allocated\n   from that range.\
    \  A receiver that accepts a LABEL_REQUEST object MUST\n   include a LABEL object\
    \ in Resv messages pertaining to that Path\n   message.  If a LABEL_REQUEST object\
    \ was not present in the Path\n   message, a node MUST NOT include a LABEL object\
    \ in a Resv message for\n   that Path message's session and PHOP.\n   A node that\
    \ sends a LABEL_REQUEST object MUST be ready to accept and\n   correctly process\
    \ a LABEL object in the corresponding Resv messages.\n   A node that recognizes\
    \ a LABEL_REQUEST object, but that is unable to\n   support it (possibly because\
    \ of a failure to allocate labels) SHOULD\n   send a PathErr with the error code\
    \ \"Routing problem\" and the error\n   value \"MPLS label allocation failure.\"\
    \  This includes the case where\n   a label range has been specified and a label\
    \ cannot be allocated from\n   that range.\n   A node which receives and forwards\
    \ a Path message each with a\n   LABEL_REQUEST object, MUST copy the L3PID from\
    \ the received\n   LABEL_REQUEST object to the forwarded LABEL_REQUEST object.\n\
    \   If the receiver cannot support the protocol L3PID, it SHOULD send a\n   PathErr\
    \ with the error code \"Routing problem\" and the error value\n   \"Unsupported\
    \ L3PID.\"  This causes the RSVP session to fail.\n"
- title: 4.2.5. Non-support of the Label Request Object
  contents:
  - "4.2.5. Non-support of the Label Request Object\n   An RSVP router that does not\
    \ recognize the LABEL_REQUEST object sends\n   a PathErr with the error code \"\
    Unknown object class\" toward the\n   sender.  An RSVP router that recognizes\
    \ the LABEL_REQUEST object but\n   does not recognize the C_Type sends a PathErr\
    \ with the error code\n   \"Unknown object C_Type\" toward the sender.  This causes\
    \ the path\n   setup to fail.  The sender should notify management that a LSP\
    \ cannot\n   be established and possibly take action to continue the reservation\n\
    \   without the LABEL_REQUEST.\n   RSVP is designed to cope gracefully with non-RSVP\
    \ routers anywhere\n   between senders and receivers.  However, obviously, non-RSVP\
    \ routers\n   cannot convey labels via RSVP.  This means that if a router has\
    \ a\n   neighbor that is known to not be RSVP capable, the router MUST NOT\n \
    \  advertise the LABEL_REQUEST object when sending messages that pass\n   through\
    \ the non-RSVP routers.  The router SHOULD send a PathErr back\n   to the sender,\
    \ with the error code \"Routing problem\" and the error\n   value \"MPLS being\
    \ negotiated, but a non-RSVP capable router stands in\n   the path.\"  This same\
    \ message SHOULD be sent, if a router receives a\n   LABEL_REQUEST object in a\
    \ message from a non-RSVP capable router.\n   See [1] for a description of how\
    \ a downstream router can determine\n   the presence of non-RSVP routers.\n"
- title: 4.3. Explicit Route Object
  contents:
  - "4.3. Explicit Route Object\n   Explicit routes are specified via the EXPLICIT_ROUTE\
    \ object (ERO).\n   The Explicit Route Class is 20.  Currently one C_Type is defined,\n\
    \   Type 1 Explicit Route.  The EXPLICIT_ROUTE object has the following\n   format:\n\
    \   Class = 20, C_Type = 1\n    0                   1                   2    \
    \               3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   // \
    \                       (Subobjects)                          //\n   |       \
    \                                                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Subobjects\n   The contents of an EXPLICIT_ROUTE object are a series of variable-\n\
    \   length data items called subobjects.  The subobjects are defined in\n   section\
    \ 4.3.3 below.\n   If a Path message contains multiple EXPLICIT_ROUTE objects,\
    \ only the\n   first object is meaningful.  Subsequent EXPLICIT_ROUTE objects\
    \ MAY be\n   ignored and SHOULD NOT be propagated.\n"
- title: 4.3.1. Applicability
  contents:
  - "4.3.1. Applicability\n   The EXPLICIT_ROUTE object is intended to be used only\
    \ for unicast\n   situations.  Applications of explicit routing to multicast are\
    \ a\n   topic for further research.\n   The EXPLICIT_ROUTE object is to be used\
    \ only when all routers along\n   the explicit route support RSVP and the EXPLICIT_ROUTE\
    \ object.  The\n   EXPLICIT_ROUTE object is assigned a class value of the form\
    \ 0bbbbbbb.\n   RSVP routers that do not support the object will therefore respond\n\
    \   with an \"Unknown Object Class\" error.\n"
- title: 4.3.2. Semantics of the Explicit Route Object
  contents:
  - "4.3.2. Semantics of the Explicit Route Object\n   An explicit route is a particular\
    \ path in the network topology.\n   Typically, the explicit route is determined\
    \ by a node, with the\n   intent of directing traffic along that path.\n   An\
    \ explicit route is described as a list of groups of nodes along the\n   explicit\
    \ route.  In addition to the ability to identify specific\n   nodes along the\
    \ path, an explicit route can identify a group of nodes\n   that must be traversed\
    \ along the path.  This capability allows the\n   routing system a significant\
    \ amount of local flexibility in\n   fulfilling a request for an explicit route.\
    \  This capability allows\n   the generator of the explicit route to have imperfect\
    \ information\n   about the details of the path.\n   The explicit route is encoded\
    \ as a series of subobjects contained in\n   an EXPLICIT_ROUTE object.  Each subobject\
    \ identifies a group of nodes\n   in the explicit route.  An explicit route is\
    \ thus a specification of\n   groups of nodes to be traversed.\n   To formalize\
    \ the discussion, we call each group of nodes an abstract\n   node.  Thus, we\
    \ say that an explicit route is a specification of a\n   set of abstract nodes\
    \ to be traversed.  If an abstract node consists\n   of only one node, we refer\
    \ to it as a simple abstract node.\n   As an example of the concept of abstract\
    \ nodes, consider an explicit\n   route that consists solely of Autonomous System\
    \ number subobjects.\n   Each subobject corresponds to an Autonomous System in\
    \ the global\n   topology.  In this case, each Autonomous System is an abstract\
    \ node,\n   and the explicit route is a path that includes each of the specified\n\
    \   Autonomous Systems.  There may be multiple hops within each\n   Autonomous\
    \ System, but these are opaque to the source node for the\n   explicit route.\n"
- title: 4.3.3. Subobjects
  contents:
  - "4.3.3. Subobjects\n   The contents of an EXPLICIT_ROUTE object are a series of\
    \ variable-\n   length data items called subobjects.  Each subobject has the form:\n\
    \    0                   1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-------------//----------------+\n\
    \   |L|    Type     |     Length    | (Subobject contents)          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-------------//----------------+\n\
    \      L\n         The L bit is an attribute of the subobject.  The L bit is set\n\
    \         if the subobject represents a loose hop in the explicit route.\n   \
    \      If the bit is not set, the subobject represents a strict hop in\n     \
    \    the explicit route.\n      Type\n         The Type indicates the type of\
    \ contents of the subobject.\n         Currently defined values are:\n       \
    \            1   IPv4 prefix\n                   2   IPv6 prefix\n           \
    \       32   Autonomous system number\n      Length\n         The Length contains\
    \ the total length of the subobject in bytes,\n         including the L, Type\
    \ and Length fields.  The Length MUST be at\n         least 4, and MUST be a multiple\
    \ of 4.\n"
- title: 4.3.3.1. Strict and Loose Subobjects
  contents:
  - "4.3.3.1. Strict and Loose Subobjects\n   The L bit in the subobject is a one-bit\
    \ attribute.  If the L bit is\n   set, then the value of the attribute is 'loose.'\
    \  Otherwise, the\n   value of the attribute is 'strict.'  For brevity, we say\
    \ that if the\n   value of the subobject attribute is 'loose' then it is a 'loose\n\
    \   subobject.'  Otherwise, it's a 'strict subobject.'  Further, we say\n   that\
    \ the abstract node of a strict or loose subobject is a strict or\n   a loose\
    \ node, respectively.  Loose and strict nodes are always\n   interpreted relative\
    \ to their prior abstract nodes.\n   The path between a strict node and its preceding\
    \ node MUST include\n   only network nodes from the strict node and its preceding\
    \ abstract\n   node.\n   The path between a loose node and its preceding node\
    \ MAY include\n   other network nodes that are not part of the strict node or\
    \ its\n   preceding abstract node.\n"
- title: '4.3.3.2. Subobject 1:  IPv4 prefix'
  contents:
  - "4.3.3.2. Subobject 1:  IPv4 prefix\n    0                   1               \
    \    2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |L|    Type     |     Length    | IPv4 address (4 bytes)        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | IPv4 address (continued)      | Prefix Length |      Resvd    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      L\n         The L bit is an attribute of the subobject.  The L bit is set\n\
    \         if the subobject represents a loose hop in the explicit route.\n   \
    \      If the bit is not set, the subobject represents a strict hop in\n     \
    \    the explicit route.\n      Type\n         0x01  IPv4 address\n      Length\n\
    \         The Length contains the total length of the subobject in bytes,\n  \
    \       including the Type and Length fields.  The Length is always 8.\n     \
    \ IPv4 address\n         An IPv4 address.  This address is treated as a prefix\
    \ based on\n         the prefix length value below.  Bits beyond the prefix are\n\
    \         ignored on receipt and SHOULD be set to zero on transmission.\n    \
    \  Prefix length\n         Length in bits of the IPv4 prefix\n      Padding\n\
    \         Zero on transmission.  Ignored on receipt.\n   The contents of an IPv4\
    \ prefix subobject are a 4-octet IPv4 address,\n   a 1-octet prefix length, and\
    \ a 1-octet pad.  The abstract node\n   represented by this subobject is the set\
    \ of nodes that have an IP\n   address which lies within this prefix.  Note that\
    \ a prefix length of\n   32 indicates a single IPv4 node.\n"
- title: '4.3.3.3. Subobject 2:  IPv6 Prefix'
  contents:
  - "4.3.3.3. Subobject 2:  IPv6 Prefix\n    0                   1               \
    \    2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |L|    Type     |     Length    | IPv6 address (16 bytes)       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | IPv6 address (continued)                                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | IPv6 address (continued)                                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | IPv6 address (continued)                                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | IPv6 address (continued)      | Prefix Length |      Resvd    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      L\n         The L bit is an attribute of the subobject.  The L bit is set\n\
    \         if the subobject represents a loose hop in the explicit route.\n   \
    \      If the bit is not set, the subobject represents a strict hop in\n     \
    \    the explicit route.\n      Type\n         0x02  IPv6 address\n      Length\n\
    \         The Length contains the total length of the subobject in bytes,\n  \
    \       including the Type and Length fields.  The Length is always 20.\n    \
    \  IPv6 address\n         An IPv6 address.  This address is treated as a prefix\
    \ based on\n         the prefix length value below.  Bits beyond the prefix are\n\
    \         ignored on receipt and SHOULD be set to zero on transmission.\n    \
    \  Prefix Length\n         Length in bits of the IPv6 prefix.\n      Padding\n\
    \         Zero on transmission.  Ignored on receipt.\n   The contents of an IPv6\
    \ prefix subobject are a 16-octet IPv6 address,\n   a 1-octet prefix length, and\
    \ a 1-octet pad.  The abstract node\n   represented by this subobject is the set\
    \ of nodes that have an IP\n   address which lies within this prefix.  Note that\
    \ a prefix length of\n   128 indicates a single IPv6 node.\n"
- title: '4.3.3.4. Subobject 32:  Autonomous System Number'
  contents:
  - "4.3.3.4. Subobject 32:  Autonomous System Number\n   The contents of an Autonomous\
    \ System (AS) number subobject are a 2-\n   octet AS number.  The abstract node\
    \ represented by this subobject is\n   the set of nodes belonging to the autonomous\
    \ system.\n   The length of the AS number subobject is 4 octets.\n"
- title: 4.3.4. Processing of the Explicit Route Object
  contents:
  - '4.3.4. Processing of the Explicit Route Object

    '
- title: 4.3.4.1. Selection of the Next Hop
  contents:
  - "4.3.4.1. Selection of the Next Hop\n   A node receiving a Path message containing\
    \ an EXPLICIT_ROUTE object\n   must determine the next hop for this path.  This\
    \ is necessary because\n   the next abstract node along the explicit route might\
    \ be an IP subnet\n   or an Autonomous System.  Therefore, selection of this next\
    \ hop may\n   involve a decision from a set of feasible alternatives.  The criteria\n\
    \   used to make a selection from feasible alternatives is implementation\n  \
    \ dependent and can also be impacted by local policy, and is beyond the\n   scope\
    \ of this specification.  However, it is assumed that each node\n   will make\
    \ a best effort attempt to determine a loop-free path.  Note\n   that paths so\
    \ determined can be overridden by local policy.\n   To determine the next hop\
    \ for the path, a node performs the following\n   steps:\n   1) The node receiving\
    \ the RSVP message MUST first evaluate the first\n      subobject.  If the node\
    \ is not part of the abstract node described\n      by the first subobject, it\
    \ has received the message in error and\n      SHOULD return a \"Bad initial subobject\"\
    \ error.  If there is no\n      first subobject, the message is also in error\
    \ and the system\n      SHOULD return a \"Bad EXPLICIT_ROUTE object\" error.\n\
    \   2) If there is no second subobject, this indicates the end of the\n      explicit\
    \ route.  The EXPLICIT_ROUTE object SHOULD be removed from\n      the Path message.\
    \  This node may or may not be the end of the\n      path.  Processing continues\
    \ with section 4.3.4.2, where a new\n      EXPLICIT_ROUTE object MAY be added\
    \ to the Path message.\n   3) Next, the node evaluates the second subobject. \
    \ If the node is\n      also a part of the abstract node described by the second\n\
    \      subobject, then the node deletes the first subobject and continues\n  \
    \    processing with step 2, above.  Note that this makes the second\n      subobject\
    \ into the first subobject of the next iteration and\n      allows the node to\
    \ identify the next abstract node on the path of\n      the message after possible\
    \ repeated application(s) of steps 2 and\n      3.\n   4) Abstract Node Border\
    \ Case: The node determines whether it is\n      topologically adjacent to the\
    \ abstract node described by the\n      second subobject.  If so, the node selects\
    \ a particular next hop\n      which is a member of the abstract node.  The node\
    \ then deletes the\n      first subobject and continues processing with section\
    \ 4.3.4.2.\n   5) Interior of the Abstract Node Case: Otherwise, the node selects\
    \ a\n      next hop within the abstract node of the first subobject (which\n \
    \     the node belongs to) that is along the path to the abstract node\n     \
    \ of the second subobject (which is the next abstract node).  If no\n      such\
    \ path exists then there are two cases:\n   5a) If the second subobject is a strict\
    \ subobject, there is an error\n       and the node SHOULD return a \"Bad strict\
    \ node\" error.\n   5b) Otherwise, if the second subobject is a loose subobject,\
    \ the node\n       selects any next hop that is along the path to the next abstract\n\
    \       node.  If no path exists, there is an error, and the node SHOULD\n   \
    \    return a \"Bad loose node\" error.\n   6) Finally, the node replaces the\
    \ first subobject with any subobject\n      that denotes an abstract node containing\
    \ the next hop.  This is\n      necessary so that when the explicit route is received\
    \ by the next\n      hop, it will be accepted.\n"
- title: 4.3.4.2. Adding subobjects to the Explicit Route Object
  contents:
  - "4.3.4.2. Adding subobjects to the Explicit Route Object\n   After selecting a\
    \ next hop, the node MAY alter the explicit route in\n   the following ways.\n\
    \   If, as part of executing the algorithm in section 4.3.4.1, the\n   EXPLICIT_ROUTE\
    \ object is removed, the node MAY add a new\n   EXPLICIT_ROUTE object.\n   Otherwise,\
    \ if the node is a member of the abstract node for the first\n   subobject, a\
    \ series of subobjects MAY be inserted before the first\n   subobject or MAY replace\
    \ the first subobject.  Each subobject in this\n   series MUST denote an abstract\
    \ node that is a subset of the current\n   abstract node.\n   Alternately, if\
    \ the first subobject is a loose subobject, an\n   arbitrary series of subobjects\
    \ MAY be inserted prior to the first\n   subobject.\n"
- title: 4.3.5. Loops
  contents:
  - "4.3.5. Loops\n   While the EXPLICIT_ROUTE object is of finite length, the existence\
    \ of\n   loose nodes implies that it is possible to construct forwarding loops\n\
    \   during transients in the underlying routing protocol.  This can be\n   detected\
    \ by the originator of the explicit route through the use of\n   another opaque\
    \ route object called the RECORD_ROUTE object.  The\n   RECORD_ROUTE object is\
    \ used to collect detailed path information and\n   is useful for loop detection\
    \ and for diagnostics.\n"
- title: 4.3.6. Forward Compatibility
  contents:
  - "4.3.6. Forward Compatibility\n   It is anticipated that new subobjects may be\
    \ defined over time.  A\n   node which encounters an unrecognized subobject during\
    \ its normal ERO\n   processing sends a PathErr with the error code \"Routing\
    \ Error\" and\n   error value of \"Bad Explicit Route Object\" toward the sender.\
    \  The\n   EXPLICIT_ROUTE object is included, truncated (on the left) to the\n\
    \   offending subobject.  The presence of an unrecognized subobject which\n  \
    \ is not encountered in a node's ERO processing SHOULD be ignored.  It\n   is\
    \ passed forward along with the rest of the remaining ERO stack.\n"
- title: 4.3.7. Non-support of the Explicit Route Object
  contents:
  - "4.3.7. Non-support of the Explicit Route Object\n   An RSVP router that does\
    \ not recognize the EXPLICIT_ROUTE object\n   sends a PathErr with the error code\
    \ \"Unknown object class\" toward the\n   sender.  This causes the path setup\
    \ to fail.  The sender should\n   notify management that a LSP cannot be established\
    \ and possibly take\n   action to continue the reservation without the EXPLICIT_ROUTE\
    \ or via\n   a different explicit route.\n"
- title: 4.4. Record Route Object
  contents:
  - "4.4. Record Route Object\n   Routes can be recorded via the RECORD_ROUTE object\
    \ (RRO).\n   Optionally, labels may also be recorded.  The Record Route Class\
    \ is\n   21.  Currently one C_Type is defined, Type 1 Record Route.  The\n   RECORD_ROUTE\
    \ object has the following format:\n   Class = 21, C_Type = 1\n    0         \
    \          1                   2                   3\n    0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   // \
    \                       (Subobjects)                          //\n   |       \
    \                                                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Subobjects\n         The contents of a RECORD_ROUTE object are a series\
    \ of\n         variable-length data items called subobjects.  The subobjects\n\
    \         are defined in section 4.4.1 below.\n   The RRO can be present in both\
    \ RSVP Path and Resv messages.  If a\n   Path message contains multiple RROs,\
    \ only the first RRO is\n   meaningful.  Subsequent RROs SHOULD be ignored and\
    \ SHOULD NOT be\n   propagated.  Similarly, if in a Resv message multiple RROs\
    \ are\n   encountered following a FILTER_SPEC before another FILTER_SPEC is\n\
    \   encountered, only the first RRO is meaningful.  Subsequent RROs\n   SHOULD\
    \ be ignored and SHOULD NOT be propagated.\n"
- title: 4.4.1. Subobjects
  contents:
  - "4.4.1. Subobjects\n   The contents of a RECORD_ROUTE object are a series of variable-length\n\
    \   data items called subobjects.  Each subobject has its own Length\n   field.\
    \  The length contains the total length of the subobject in\n   bytes, including\
    \ the Type and Length fields.  The length MUST always\n   be a multiple of 4,\
    \ and at least 4.\n   Subobjects are organized as a last-in-first-out stack. \
    \ The first\n   subobject relative to the beginning of RRO is considered the top.\n\
    \   The last subobject is considered the bottom.  When a new subobject is\n  \
    \ added, it is always added to the top.\n   An empty RRO with no subobjects is\
    \ considered illegal.\n   Three kinds of subobjects are currently defined.\n"
- title: '4.4.1.1. Subobject 1: IPv4 address'
  contents:
  - "4.4.1.1. Subobject 1: IPv4 address\n    0                   1               \
    \    2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      Type     |     Length    | IPv4 address (4 bytes)        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | IPv4 address (continued)      | Prefix Length |      Flags    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Type\n         0x01  IPv4 address\n      Length\n         The Length contains\
    \ the total length of the subobject in bytes,\n         including the Type and\
    \ Length fields.  The Length is always 8.\n      IPv4 address\n         A 32-bit\
    \ unicast, host address.  Any network-reachable\n         interface address is\
    \ allowed here.  Illegal addresses, such as\n         certain loopback addresses,\
    \ SHOULD NOT be used.\n      Prefix length\n         32\n      Flags\n       \
    \  0x01  Local protection available\n               Indicates that the link downstream\
    \ of this node is\n               protected via a local repair mechanism.  This\
    \ flag can\n               only be set if the Local protection flag was set in\
    \ the\n               SESSION_ATTRIBUTE object of the corresponding Path\n   \
    \            message.\n         0x02  Local protection in use\n              \
    \ Indicates that a local repair mechanism is in use to\n               maintain\
    \ this tunnel (usually in the face of an outage\n               of the link it\
    \ was previously routed over).\n"
- title: '4.4.1.2. Subobject 2: IPv6 address'
  contents:
  - "4.4.1.2. Subobject 2: IPv6 address\n    0                   1               \
    \    2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      Type     |     Length    | IPv6 address (16 bytes)       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | IPv6 address (continued)                                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | IPv6 address (continued)                                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | IPv6 address (continued)                                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | IPv6 address (continued)      | Prefix Length |      Flags    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Type\n         0x02  IPv6 address\n      Length\n         The Length contains\
    \ the total length of the subobject in bytes,\n         including the Type and\
    \ Length fields.  The Length is always 20.\n      IPv6 address\n         A 128-bit\
    \ unicast host address.\n      Prefix length\n         128\n      Flags\n    \
    \     0x01  Local protection available\n               Indicates that the link\
    \ downstream of this node is\n               protected via a local repair mechanism.\
    \  This flag can\n               only be set if the Local protection flag was\
    \ set in the\n               SESSION_ATTRIBUTE object of the corresponding Path\n\
    \               message.\n         0x02  Local protection in use\n           \
    \    Indicates that a local repair mechanism is in use to\n               maintain\
    \ this tunnel (usually in the face of an outage\n               of the link it\
    \ was previously routed over).\n"
- title: 4.4.1.3. Subobject 3, Label
  contents:
  - "4.4.1.3. Subobject 3, Label\n    0                   1                   2  \
    \                 3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |     Length    |    Flags      |   C-Type      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       Contents of Label Object                                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Type\n         0x03  Label\n      Length\n         The Length contains\
    \ the total length of the subobject in bytes,\n         including the Type and\
    \ Length fields.\n      Flags\n         0x01 = Global label\n           This flag\
    \ indicates that the label will be understood\n           if received on any interface.\n\
    \      C-Type\n         The C-Type of the included Label Object.  Copied from\
    \ the Label\n         Object.\n      Contents of Label Object\n         The contents\
    \ of the Label Object.  Copied from the Label Object\n"
- title: 4.4.2. Applicability
  contents:
  - "4.4.2. Applicability\n   Only the procedures for use in unicast sessions are\
    \ defined here.\n   There are three possible uses of RRO in RSVP.  First, an RRO\
    \ can\n   function as a loop detection mechanism to discover L3 routing loops,\n\
    \   or loops inherent in the explicit route.  The exact procedure for\n   doing\
    \ so is described later in this document.\n   Second, an RRO collects up-to-date\
    \ detailed path information hop-by-\n   hop about RSVP sessions, providing valuable\
    \ information to the sender\n   or receiver.  Any path change (due to network\
    \ topology changes) will\n   be reported.\n   Third, RRO syntax is designed so\
    \ that, with minor changes, the whole\n   object can be used as input to the EXPLICIT_ROUTE\
    \ object.  This is\n   useful if the sender receives RRO from the receiver in\
    \ a Resv\n   message, applies it to EXPLICIT_ROUTE object in the next Path message\n\
    \   in order to \"pin down session path\".\n"
- title: 4.4.3. Processing RRO
  contents:
  - "4.4.3. Processing RRO\n   Typically, a node initiates an RSVP session by adding\
    \ the RRO to the\n   Path message.  The initial RRO contains only one subobject\
    \ - the\n   sender's IP addresses.  If the node also desires label recording,\
    \ it\n   sets the Label_Recording flag in the SESSION_ATTRIBUTE object.\n   When\
    \ a Path message containing an RRO is received by an intermediate\n   router,\
    \ the router stores a copy of it in the Path State Block.  The\n   RRO is then\
    \ used in the next Path refresh event for formatting Path\n   messages.  When\
    \ a new Path message is to be sent, the router adds a\n   new subobject to the\
    \ RRO and appends the resulting RRO to the Path\n   message before transmission.\n\
    \   The newly added subobject MUST be this router's IP address.  The\n   address\
    \ to be added SHOULD be the interface address of the outgoing\n   Path messages.\
    \  If there are multiple addresses to choose from, the\n   decision is a local\
    \ matter.  However, it is RECOMMENDED that the same\n   address be chosen consistently.\n\
    \   When the Label_Recording flag is set in the SESSION_ATTRIBUTE object,\n  \
    \ nodes doing route recording SHOULD include a Label Record subobject.\n   If\
    \ the node is using a global label space, then it SHOULD set the\n   Global Label\
    \ flag.\n   The Label Record subobject is pushed onto the RECORD_ROUTE object\n\
    \   prior to pushing on the node's IP address.  A node MUST NOT push on a\n  \
    \ Label Record subobject without also pushing on an IPv4 or IPv6\n   subobject.\n\
    \   Note that on receipt of the initial Path message, a node is unlikely\n   to\
    \ have a label to include.  Once a label is obtained, the node\n   SHOULD include\
    \ the label in the RRO in the next Path refresh event.\n   If the newly added\
    \ subobject causes the RRO to be too big to fit in a\n   Path (or Resv) message,\
    \ the RRO object SHALL be dropped from the\n   message and message processing\
    \ continues as normal.  A PathErr (or\n   ResvErr) message SHOULD be sent back\
    \ to the sender (or receiver).  An\n   error code of \"Notify\" and an error value\
    \ of \"RRO too large for MTU\"\n   is used.  If the receiver receives such a ResvErr,\
    \ it SHOULD send a\n   PathErr message with error code of \"Notify\" and an error\
    \ value of\n   \"RRO notification\".\n   A sender receiving either of these error\
    \ values SHOULD remove the RRO\n   from the Path message.\n   Nodes SHOULD resend\
    \ the above PathErr or ResvErr message each n\n   seconds where n is the greater\
    \ of 15 and the refresh interval for the\n   associated Path or RESV message.\
    \  The node MAY apply limits and/or\n   back-off timers to limit the number of\
    \ messages sent.\n   An RSVP router can decide to send Path messages before its\
    \ refresh\n   time if the RRO in the next Path message is different from the\n\
    \   previous one.  This can happen if the contents of the RRO received\n   from\
    \ the previous hop router changes or if this RRO is newly added to\n   (or deleted\
    \ from) the Path message.\n   When the destination node of an RSVP session receives\
    \ a Path message\n   with an RRO, this indicates that the sender node needs route\n\
    \   recording.  The destination node initiates the RRO process by adding\n   an\
    \ RRO to Resv messages.  The processing mirrors that of the Path\n   messages.\
    \  The only difference is that the RRO in a Resv message\n   records the path\
    \ information in the reverse direction.\n   Note that each node along the path\
    \ will now have the complete route\n   from source to destination.  The Path RRO\
    \ will have the route from\n   the source to this node; the Resv RRO will have\
    \ the route from this\n   node to the destination.  This is useful for network\
    \ management.\n   A received Path message without an RRO indicates that the sender\
    \ node\n   no longer needs route recording.  Subsequent Resv messages SHALL NOT\n\
    \   contain an RRO.\n"
- title: 4.4.4. Loop Detection
  contents:
  - "4.4.4. Loop Detection\n   As part of processing an incoming RRO, an intermediate\
    \ router looks\n   into all subobjects contained within the RRO.  If the router\n\
    \   determines that it is already in the list, a forwarding loop exists.\n   An\
    \ RSVP session is loop-free if downstream nodes receive Path\n   messages or upstream\
    \ nodes receive Resv messages with no routing\n   loops detected in the contained\
    \ RRO.\n   There are two broad classifications of forwarding loops.  The first\n\
    \   class is the transient loop, which occurs as a normal part of\n   operations\
    \ as L3 routing tries to converge on a consistent forwarding\n   path for all\
    \ destinations.  The second class of forwarding loop is\n   the permanent loop,\
    \ which normally results from network mis-\n   configuration.\n   The action performed\
    \ by a node on receipt of an RRO depends on the\n   message type in which the\
    \ RRO is received.\n   For Path messages containing a forwarding loop, the router\
    \ builds and\n   sends a \"Routing problem\" PathErr message, with the error value\
    \ \"loop\n   detected,\" and drops the Path message.  Until the loop is eliminated,\n\
    \   this session is not suitable for forwarding data packets.  How the\n   loop\
    \ eliminated is beyond the scope of this document.\n   For Resv messages containing\
    \ a forwarding loop, the router simply\n   drops the message.  Resv messages should\
    \ not loop if Path messages do\n   not loop.\n"
- title: 4.4.5. Forward Compatibility
  contents:
  - "4.4.5. Forward Compatibility\n   New subobjects may be defined for the RRO. \
    \ When processing an RRO,\n   unrecognized subobjects SHOULD be ignored and passed\
    \ on.  When\n   processing an RRO for loop detection, a node SHOULD parse over\
    \ any\n   unrecognized objects.  Loop detection works by detecting subobjects\n\
    \   which were inserted by the node itself on an earlier pass of the\n   object.\
    \  This ensures that the subobjects necessary for loop\n   detection are always\
    \ understood.\n"
- title: 4.4.6. Non-support of RRO
  contents:
  - "4.4.6. Non-support of RRO\n   The RRO object is to be used only when all routers\
    \ along the path\n   support RSVP and the RRO object.  The RRO object is assigned\
    \ a class\n   value of the form 0bbbbbbb.  RSVP routers that do not support the\n\
    \   object will therefore respond with an \"Unknown Object Class\" error.\n"
- title: 4.5. Error Codes for ERO and RRO
  contents:
  - "4.5. Error Codes for ERO and RRO\n   In the processing described above, certain\
    \ errors must be reported as\n   either a \"Routing Problem\" or \"Notify\". \
    \ The value of the \"Routing\n   Problem\" error code is 24; the value of the\
    \ \"Notify\" error code is\n   25.\n   The following defines error values for\
    \ the Routing Problem Error\n   Code:\n      Value    Error:\n         1     Bad\
    \ EXPLICIT_ROUTE object\n         2     Bad strict node\n         3     Bad loose\
    \ node\n         4     Bad initial subobject\n         5     No route available\
    \ toward destination\n         6     Unacceptable label value\n         7    \
    \ RRO indicated routing loops\n         8     MPLS being negotiated, but a non-RSVP-capable\
    \ router\n               stands in the path\n         9     MPLS label allocation\
    \ failure\n        10     Unsupported L3PID\n   For the Notify Error Code, the\
    \ 16 bits of the Error Value field are:\n         ss00 cccc cccc cccc\n   The\
    \ high order bits are as defined under Error Code 1. (See [1]).\n   When ss =\
    \ 00, the following subcodes are defined:\n         1    RRO too large for MTU\n\
    \         2    RRO notification\n         3    Tunnel locally repaired\n"
- title: 4.6. Session, Sender Template, and Filter Spec Objects
  contents:
  - "4.6. Session, Sender Template, and Filter Spec Objects\n   New C-Types are defined\
    \ for the SESSION, SENDER_TEMPLATE and\n   FILTER_SPEC objects.\n   The LSP_TUNNEL\
    \ objects have the following format:\n"
- title: 4.6.1. Session Object
  contents:
  - '4.6.1. Session Object

    '
- title: 4.6.1.1. LSP_TUNNEL_IPv4 Session Object
  contents:
  - "4.6.1.1. LSP_TUNNEL_IPv4 Session Object\n   Class = SESSION, LSP_TUNNEL_IPv4\
    \ C-Type = 7\n    0                   1                   2                  \
    \ 3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                   IPv4 tunnel end point address               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  MUST be zero                 |      Tunnel ID                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Extended Tunnel ID                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      IPv4 tunnel end point address\n         IPv4 address of the egress node\
    \ for the tunnel.\n      Tunnel ID\n         A 16-bit identifier used in the SESSION\
    \ that remains constant\n         over the life of the tunnel.\n      Extended\
    \ Tunnel ID\n         A 32-bit identifier used in the SESSION that remains constant\n\
    \         over the life of the tunnel.  Normally set to all zeros.\n         Ingress\
    \ nodes that wish to narrow the scope of a SESSION to the\n         ingress-egress\
    \ pair may place their IPv4 address here as a\n         globally unique identifier.\n"
- title: 4.6.1.2. LSP_TUNNEL_IPv6 Session Object
  contents:
  - "4.6.1.2. LSP_TUNNEL_IPv6 Session Object\n   Class = SESSION, LSP_TUNNEL_IPv6\
    \ C_Type = 8\n    0                   1                   2                  \
    \ 3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +  \
    \                                                             +\n   |        \
    \           IPv6 tunnel end point address               |\n   +              \
    \                                                 +\n   |                    \
    \        (16 bytes)                         |\n   +                          \
    \                                     +\n   |                                \
    \                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  MUST be zero                 |      Tunnel ID                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +  \
    \                                                             +\n   |        \
    \               Extended Tunnel ID                      |\n   +              \
    \                                                 +\n   |                    \
    \        (16 bytes)                         |\n   +                          \
    \                                     +\n   |                                \
    \                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      IPv6 tunnel end point address\n         IPv6 address of the egress node\
    \ for the tunnel.\n      Tunnel ID\n         A 16-bit identifier used in the SESSION\
    \ that remains constant\n         over the life of the tunnel.\n      Extended\
    \ Tunnel ID\n         A 16-byte identifier used in the SESSION that remains constant\n\
    \         over the life of the tunnel.  Normally set to all zeros.\n         Ingress\
    \ nodes that wish to narrow the scope of a SESSION to the\n         ingress-egress\
    \ pair may place their IPv6 address here as a\n         globally unique identifier.\n"
- title: 4.6.2. Sender Template Object
  contents:
  - '4.6.2. Sender Template Object

    '
- title: 4.6.2.1. LSP_TUNNEL_IPv4 Sender Template Object
  contents:
  - "4.6.2.1. LSP_TUNNEL_IPv4 Sender Template Object\n   Class = SENDER_TEMPLATE,\
    \ LSP_TUNNEL_IPv4 C-Type = 7\n    0                   1                   2  \
    \                 3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                   IPv4 tunnel sender address                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  MUST be zero                 |            LSP ID             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      IPv4 tunnel sender address\n         IPv4 address for a sender node\n \
    \     LSP ID\n         A 16-bit identifier used in the SENDER_TEMPLATE and the\n\
    \         FILTER_SPEC that can be changed to allow a sender to share\n       \
    \  resources with itself.\n"
- title: 4.6.2.2. LSP_TUNNEL_IPv6 Sender Template Object
  contents:
  - "4.6.2.2. LSP_TUNNEL_IPv6 Sender Template Object\n   Class = SENDER_TEMPLATE,\
    \ LSP_TUNNEL_IPv6 C_Type = 8\n    0                   1                   2  \
    \                 3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +  \
    \                                                             +\n   |        \
    \           IPv6 tunnel sender address                  |\n   +              \
    \                                                 +\n   |                    \
    \        (16 bytes)                         |\n   +                          \
    \                                     +\n   |                                \
    \                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  MUST be zero                 |            LSP ID             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      IPv6 tunnel sender address\n         IPv6 address for a sender node\n \
    \     LSP ID\n         A 16-bit identifier used in the SENDER_TEMPLATE and the\n\
    \         FILTER_SPEC that can be changed to allow a sender to share\n       \
    \  resources with itself.\n"
- title: 4.6.3. Filter Specification Object
  contents:
  - '4.6.3. Filter Specification Object

    '
- title: 4.6.3.1. LSP_TUNNEL_IPv4 Filter Specification Object
  contents:
  - "4.6.3.1. LSP_TUNNEL_IPv4 Filter Specification Object\n      Class = FILTER SPECIFICATION,\
    \ LSP_TUNNEL_IPv4 C-Type = 7\n   The format of the LSP_TUNNEL_IPv4 FILTER_SPEC\
    \ object is identical to\n   the LSP_TUNNEL_IPv4 SENDER_TEMPLATE object.\n"
- title: 4.6.3.2. LSP_TUNNEL_IPv6 Filter Specification Object
  contents:
  - "4.6.3.2. LSP_TUNNEL_IPv6 Filter Specification Object\n      Class = FILTER SPECIFICATION,\
    \ LSP_TUNNEL_IPv6 C_Type = 8\n   The format of the LSP_TUNNEL_IPv6 FILTER_SPEC\
    \ object is identical to\n   the LSP_TUNNEL_IPv6 SENDER_TEMPLATE object.\n"
- title: 4.6.4. Reroute and Bandwidth Increase Procedure
  contents:
  - "4.6.4. Reroute and Bandwidth Increase Procedure\n   This section describes how\
    \ to setup a tunnel that is capable of\n   maintaining resource reservations (without\
    \ double counting) while it\n   is being rerouted or while it is attempting to\
    \ increase its\n   bandwidth.  In the initial Path message, the ingress node forms\
    \ a\n   SESSION object, assigns a Tunnel_ID, and places its IPv4 address in\n\
    \   the Extended_Tunnel_ID.  It also forms a SENDER_TEMPLATE and assigns\n   a\
    \ LSP_ID.  Tunnel setup then proceeds according to the normal\n   procedure.\n\
    \   On receipt of the Path message, the egress node sends a Resv message\n   with\
    \ the STYLE Shared Explicit toward the ingress node.\n   When an ingress node\
    \ with an established path wants to change that\n   path, it forms a new Path\
    \ message as follows.  The existing SESSION\n   object is used.  In particular\
    \ the Tunnel_ID and Extended_Tunnel_ID\n   are unchanged.  The ingress node picks\
    \ a new LSP_ID to form a new\n   SENDER_TEMPLATE.  It creates an EXPLICIT_ROUTE\
    \ object for the new\n   route.  The new Path message is sent.  The ingress node\
    \ refreshes\n   both the old and new path messages.\n   The egress node responds\
    \ with a Resv message with an SE flow\n   descriptor formatted as:\n      <FLOWSPEC><old_FILTER_SPEC><old_LABEL_OBJECT><new_FILTER_SPEC>\n\
    \      <new_LABEL_OBJECT>\n   (Note that if the PHOPs are different, then two\
    \ messages are sent\n   each with the appropriate FILTER_SPEC and LABEL_OBJECT.)\n\
    \   When the ingress node receives the Resv Message(s), it may begin\n   using\
    \ the new route.  It SHOULD send a PathTear message for the old\n   route.\n"
- title: 4.7. Session Attribute Object
  contents:
  - "4.7. Session Attribute Object\n   The Session Attribute Class is 207.  Two C_Types\
    \ are defined,\n   LSP_TUNNEL, C-Type = 7 and LSP_TUNNEL_RA, C-Type = 1.  The\n\
    \   LSP_TUNNEL_RA C-Type includes all the same fields as the LSP_TUNNEL\n   C-Type.\
    \  Additionally it carries resource affinity information.  The\n   formats are\
    \ as follows:\n"
- title: 4.7.1. Format without resource affinities
  contents:
  - "4.7.1. Format without resource affinities\n   SESSION_ATTRIBUTE class = 207,\
    \ LSP_TUNNEL C-Type = 7\n    0                   1                   2       \
    \            3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Setup Prio  | Holding Prio  |     Flags     |  Name Length  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   // \
    \         Session Name      (NULL padded display string)      //\n   |       \
    \                                                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Setup Priority\n         The priority of the session with respect to taking\
    \ resources,\n         in the range of 0 to 7.  The value 0 is the highest priority.\n\
    \         The Setup Priority is used in deciding whether this session can\n  \
    \       preempt another session.\n      Holding Priority\n         The priority\
    \ of the session with respect to holding resources,\n         in the range of\
    \ 0 to 7.  The value 0 is the highest priority.\n         Holding Priority is\
    \ used in deciding whether this session can\n         be preempted by another\
    \ session.\n      Flags\n         0x01  Local protection desired\n           \
    \    This flag permits transit routers to use a local repair\n               mechanism\
    \ which may result in violation of the explicit\n               route object.\
    \  When a fault is detected on an adjacent\n               downstream link or\
    \ node, a transit router can reroute\n               traffic for fast service\
    \ restoration.\n         0x02  Label recording desired\n               This flag\
    \ indicates that label information should be\n               included when doing\
    \ a route record.\n         0x04  SE Style desired\n               This flag indicates\
    \ that the tunnel ingress node may\n               choose to reroute this tunnel\
    \ without tearing it down.\n               A tunnel egress node SHOULD use the\
    \ SE Style when\n               responding with a Resv message.\n      Name Length\n\
    \         The length of the display string before padding, in bytes.\n      Session\
    \ Name\n         A null padded string of characters.\n"
- title: 4.7.2. Format with resource affinities
  contents:
  - "4.7.2. Format with resource affinities\n    SESSION_ATTRIBUTE class = 207, LSP_TUNNEL_RA\
    \ C-Type = 1\n    0                   1                   2                  \
    \ 3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Exclude-any                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Include-any                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Include-all                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Setup Prio  | Holding Prio  |     Flags     |  Name Length  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   // \
    \         Session Name      (NULL padded display string)      //\n   |       \
    \                                                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Exclude-any\n         A 32-bit vector representing a set of attribute filters\n\
    \         associated with a tunnel any of which renders a link\n         unacceptable.\n\
    \      Include-any\n         A 32-bit vector representing a set of attribute filters\n\
    \         associated with a tunnel any of which renders a link acceptable\n  \
    \       (with respect to this test).  A null set (all bits set to zero)\n    \
    \     automatically passes.\n      Include-all\n         A 32-bit vector representing\
    \ a set of attribute filters\n         associated with a tunnel all of which must\
    \ be present for a\n         link to be acceptable (with respect to this test).\
    \  A null set\n         (all bits set to zero) automatically passes.\n      Setup\
    \ Priority\n         The priority of the session with respect to taking resources,\n\
    \         in the range of 0 to 7.  The value 0 is the highest priority.\n    \
    \     The Setup Priority is used in deciding whether this session can\n      \
    \   preempt another session.\n      Holding Priority\n         The priority of\
    \ the session with respect to holding resources,\n         in the range of 0 to\
    \ 7.  The value 0 is the highest priority.\n         Holding Priority is used\
    \ in deciding whether this session can\n         be preempted by another session.\n\
    \      Flags\n         0x01  Local protection desired\n               This flag\
    \ permits transit routers to use a local repair\n               mechanism which\
    \ may result in violation of the explicit\n               route object.  When\
    \ a fault is detected on an adjacent\n               downstream link or node,\
    \ a transit router can reroute\n               traffic for fast service restoration.\n\
    \         0x02  Label recording desired\n               This flag indicates that\
    \ label information should be\n               included when doing a route record.\n\
    \         0x04  SE Style desired\n               This flag indicates that the\
    \ tunnel ingress node may\n               choose to reroute this tunnel without\
    \ tearing it down.\n               A tunnel egress node SHOULD use the SE Style\
    \ when\n               responding with a Resv message.\n      Name Length\n  \
    \       The length of the display string before padding, in bytes.\n      Session\
    \ Name\n         A null padded string of characters.\n"
- title: 4.7.3. Procedures applying to both C-Types
  contents:
  - "4.7.3. Procedures applying to both C-Types\n   The support of setup and holding\
    \ priorities is OPTIONAL.  A node can\n   recognize this information but be unable\
    \ to perform the requested\n   operation.  The node SHOULD pass the information\
    \ downstream\n   unchanged.\n   As noted above, preemption is implemented by two\
    \ priorities.  The\n   Setup Priority is the priority for taking resources.  The\
    \ Holding\n   Priority is the priority for holding a resource.  Specifically,\
    \ the\n   Holding Priority is the priority at which resources assigned to this\n\
    \   session will be reserved.  The Setup Priority SHOULD never be higher\n   than\
    \ the Holding Priority for a given session.\n   The setup and holding priorities\
    \ are directly analogous to the\n   preemption and defending priorities as defined\
    \ in [9].  While the\n   interaction of these two objects is ultimately a matter\
    \ of policy,\n   the following default interaction is RECOMMENDED.\n   When both\
    \ objects are present, the preemption priority policy element\n   is used.  A\
    \ mapping between the priority spaces is defined as\n   follows.  A session attribute\
    \ priority S is mapped to a preemption\n   priority P by the formula P = 2^(14-2S).\
    \  The reverse mapping is\n   shown in the following table.\n         Preemption\
    \ Priority     Session Attribute Priority\n               0 - 3              \
    \           7\n               4 - 15                        6\n              16\
    \ - 63                        5\n              64 - 255                      \
    \ 4\n             256 - 1023                      3\n            1024 - 4095 \
    \                     2\n            4096 - 16383                     1\n    \
    \       16384 - 65535                     0\n   When a new Path message is considered\
    \ for admission, the bandwidth\n   requested is compared with the bandwidth available\
    \ at the priority\n   specified in the Setup Priority.\n   If the requested bandwidth\
    \ is not available a PathErr message is\n   returned with an Error Code of 01,\
    \ Admission Control Failure, and an\n   Error Value of 0x0002.  The first 0 in\
    \ the Error Value indicates a\n   globally defined subcode and is not informational.\
    \  The 002 indicates\n   \"requested bandwidth unavailable\".\n   If the requested\
    \ bandwidth is less than the unused bandwidth then\n   processing is complete.\
    \  If the requested bandwidth is available, but\n   is in use by lower priority\
    \ sessions, then lower priority sessions\n   (beginning with the lowest priority)\
    \ MAY be preempted to free the\n   necessary bandwidth.\n   When preemption is\
    \ supported, each preempted reservation triggers a\n   TC_Preempt() upcall to\
    \ local clients, passing a subcode that\n   indicates the reason.  A ResvErr and/or\
    \ PathErr with the code \"Policy\n   Control failure\" SHOULD be sent toward the\
    \ downstream receivers and\n   upstream senders.\n   The support of local-protection\
    \ is OPTIONAL.  A node may recognize\n   the local-protection Flag but may be\
    \ unable to perform the requested\n   operation.  In this case, the node SHOULD\
    \ pass the information\n   downstream unchanged.\n   The recording of the Label\
    \ subobject in the ROUTE_RECORD object is\n   controlled by the label-recording-desired\
    \ flag in the\n   SESSION_ATTRIBUTE object.  Since the Label subobject is not\
    \ needed\n   for all applications, it is not automatically recorded.  The flag\n\
    \   allows applications to request this only when needed.\n   The contents of\
    \ the Session Name field are a string, typically of\n   display-able characters.\
    \  The Length MUST always be a multiple of 4\n   and MUST be at least 8.  For\
    \ an object length that is not a multiple\n   of 4, the object is padded with\
    \ trailing NULL characters.  The Name\n   Length field contains the actual string\
    \ length.\n"
- title: 4.7.4. Resource Affinity Procedures
  contents:
  - "4.7.4. Resource Affinity Procedures\n   Resource classes and resource class affinities\
    \ are described in [3].\n   In this document we use the briefer term resource\
    \ affinities for the\n   latter term.  Resource classes can be associated with\
    \ links and\n   advertised in routing protocols.  Resource class affinities are\
    \ used\n   by RSVP in two ways.  In order to be validated a link MUST pass the\n\
    \   three tests below.  If the test fails a PathErr with the code \"policy\n \
    \  control failure\" SHOULD be sent.\n   When a new reservation is considered\
    \ for admission over a strict node\n   in an ERO, a node MAY validate the resource\
    \ affinities with the\n   resource classes of that link.  When a node is choosing\
    \ links in\n   order to extend a loose node of an ERO, the node MUST validate\
    \ the\n   resource classes of those links against the resource affinities.  If\n\
    \   no acceptable links can be found to extend the ERO, the node SHOULD\n   send\
    \ a PathErr message with an error code of \"Routing Problem\" and an\n   error\
    \ value of \"no route available toward destination\".\n   In order to be validated\
    \ a link MUST pass the following three tests.\n   To precisely describe the tests\
    \ use the definitions in the object\n   description above.  We also define\n \
    \     Link-attr      A 32-bit vector representing attributes associated\n    \
    \                 with a link.\n   The three tests are\n      1. Exclude-any\n\
    \         This test excludes a link from consideration if the link\n         carries\
    \ any of the attributes in the set.\n         (link-attr & exclude-any) == 0\n\
    \      2. Include-any\n         This test accepts a link if the link carries any\
    \ of the\n         attributes in the set.\n         (include-any == 0) | ((link-attr\
    \ & include-any) != 0)\n      3. Include-all\n         This test accepts a link\
    \ only if the link carries all of the\n         attributes in the set.\n     \
    \    (include-all == 0) | (((link-attr & include-all) ^ include-\n         all)\
    \ == 0)\n   For a link to be acceptable, all three tests MUST pass.  If the test\n\
    \   fails, the node SHOULD send a PathErr message with an error code of\n   \"\
    Routing Problem\" and an error value of \"no route available toward\n   destination\"\
    .\n   If a Path message contains multiple SESSION_ATTRIBUTE objects, only\n  \
    \ the first SESSION_ATTRIBUTE object is meaningful.  Subsequent\n   SESSION_ATTRIBUTE\
    \ objects can be ignored and need not be forwarded.\n   All RSVP routers, whether\
    \ they support the SESSION_ATTRIBUTE object\n   or not, SHALL forward the object\
    \ unmodified.  The presence of non-\n   RSVP routers anywhere between senders\
    \ and receivers has no impact on\n   this object.\n"
- title: 5. Hello Extension
  contents:
  - "5. Hello Extension\n   The RSVP Hello extension enables RSVP nodes to detect\
    \ when a\n   neighboring node is not reachable.  The mechanism provides node to\n\
    \   node failure detection.  When such a failure is detected it is\n   handled\
    \ much the same as a link layer communication failure.  This\n   mechanism is\
    \ intended to be used when notification of link layer\n   failures is not available\
    \ and unnumbered links are not used, or when\n   the failure detection mechanisms\
    \ provided by the link layer are not\n   sufficient for timely node failure detection.\n\
    \   It should be noted that node failure detection is not the same as a\n   link\
    \ failure detection mechanism, particularly in the case of\n   multiple parallel\
    \ unnumbered links.\n   The Hello extension is specifically designed so that one\
    \ side can use\n   the mechanism while the other side does not.  Neighbor failure\n\
    \   detection may be initiated at any time.  This includes when neighbors\n  \
    \ first learn about each other, or just when neighbors are sharing Resv\n   or\
    \ Path state.\n   The Hello extension is composed of a Hello message, a HELLO\
    \ REQUEST\n   object and a HELLO ACK object.  Hello processing between two\n \
    \  neighbors supports independent selection of, typically configured,\n   failure\
    \ detection intervals.  Each neighbor can autonomously issue\n   HELLO REQUEST\
    \ objects.  Each request is answered by an\n   acknowledgment.  Hello Messages\
    \ also contain enough information so\n   that one neighbor can suppress issuing\
    \ hello requests and still\n   perform neighbor failure detection.  A Hello message\
    \ may be included\n   as a sub-message within a bundle message.\n   Neighbor failure\
    \ detection is accomplished by collecting and storing\n   a neighbor's \"instance\"\
    \ value.  If a change in value is seen or if\n   the neighbor is not properly\
    \ reporting the locally advertised value,\n   then the neighbor is presumed to\
    \ have reset.  When a neighbor's value\n   is seen to change or when communication\
    \ is lost with a neighbor, then\n   the instance value advertised to that neighbor\
    \ is also changed.  The\n   HELLO objects provide a mechanism for polling for\
    \ and providing an\n   instance value.  A poll request also includes the sender's\
    \ instance\n   value.  This allows the receiver of a poll to optionally treat\
    \ the\n   poll as an implicit poll response.  This optional handling is an\n \
    \  optimization that can reduce the total number of polls and responses\n   processed\
    \ by a pair of neighbors.  In all cases, when both sides\n   support the optimization\
    \ the result will be only one set of polls and\n   responses per failure detection\
    \ interval.  Depending on selected\n   intervals, the same benefit can occur even\
    \ when only one neighbor\n   supports the optimization.\n"
- title: 5.1. Hello Message Format
  contents:
  - "5.1. Hello Message Format\n   Hello Messages are always sent between two RSVP\
    \ neighbors.  The IP\n   source address is the IP address of the sending node.\
    \  The IP\n   destination address is the IP address of the neighbor node.\n  \
    \ The HELLO mechanism is intended for use between immediate neighbors.\n   When\
    \ HELLO messages are being the exchanged between immediate\n   neighbors, the\
    \ IP TTL field of all outgoing HELLO messages SHOULD be\n   set to 1.\n   The\
    \ Hello message has a Msg Type of 20.  The Hello message format is\n   as follows:\n\
    \      <Hello Message> ::= <Common Header> [ <INTEGRITY> ]\n                 \
    \             <HELLO>\n"
- title: 5.2. HELLO Object formats
  contents:
  - "5.2. HELLO Object formats\n   The HELLO Class is 22.  There are two C_Types defined.\n"
- title: 5.2.1. HELLO REQUEST object
  contents:
  - "5.2.1. HELLO REQUEST object\n   Class = HELLO Class, C_Type = 1\n    0      \
    \             1                   2                   3\n    0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Src_Instance                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Dst_Instance                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 5.2.2. HELLO ACK object
  contents:
  - "5.2.2. HELLO ACK object\n   Class = HELLO Class, C_Type = 2\n    0          \
    \         1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Src_Instance                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Dst_Instance                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Src_Instance: 32 bits\n      a 32 bit value that represents the sender's\
    \ instance.  The\n      advertiser maintains a per neighbor representation/value.\
    \  This\n      value MUST change when the sender is reset, when the node reboots,\n\
    \      or when communication is lost to the neighboring node and\n      otherwise\
    \ remains the same.  This field MUST NOT be set to zero\n      (0).\n      Dst_Instance:\
    \ 32 bits\n      The most recently received Src_Instance value received from the\n\
    \      neighbor.  This field MUST be set to zero (0) when no value has\n     \
    \ ever been seen from the neighbor.\n"
- title: 5.3. Hello Message Usage
  contents:
  - "5.3. Hello Message Usage\n   The Hello Message is completely OPTIONAL.  All messages\
    \ may be\n   ignored by nodes which do not wish to participate in Hello message\n\
    \   processing.  The balance of this section is written assuming that the\n  \
    \ receiver as well as the sender is participating.  In particular, the\n   use\
    \ of MUST and SHOULD with respect to the receiver applies only to a\n   node that\
    \ supports Hello message processing.\n   A node periodically generates a Hello\
    \ message containing a HELLO\n   REQUEST object for each neighbor who's status\
    \ is being tracked.  The\n   periodicity is governed by the hello_interval.  This\
    \ value MAY be\n   configured on a per neighbor basis.  The default value is 5\
    \ ms.\n   When generating a message containing a HELLO REQUEST object, the\n \
    \  sender fills in the Src_Instance field with a value representing it's\n   per\
    \ neighbor instance.  This value MUST NOT change while the agent is\n   exchanging\
    \ Hellos with the corresponding neighbor.  The sender also\n   fills in the Dst_Instance\
    \ field with the Src_Instance value most\n   recently received from the neighbor.\
    \  For reference, call this\n   variable Neighbor_Src_Instance.  If no value has\
    \ ever been received\n   from the neighbor or this node considers communication\
    \ to the\n   neighbor to have been lost, the Neighbor_Src_Instance is set to zero\n\
    \   (0).  The generation of a message SHOULD be suppressed when a HELLO\n   REQUEST\
    \ object was received from the destination node within the\n   prior hello_interval\
    \ interval.\n   On receipt of a message containing a HELLO REQUEST object, the\n\
    \   receiver MUST generate a Hello message containing a HELLO ACK object.\n  \
    \ The receiver SHOULD also verify that the neighbor has not reset.\n   This is\
    \ done by comparing the sender's Src_Instance field value with\n   the previously\
    \ received value.  If the Neighbor_Src_Instance value is\n   zero, and the Src_Instance\
    \ field is non-zero, the\n   Neighbor_Src_Instance is updated with the new value.\
    \  If the value\n   differs or the Src_Instance field is zero, then the node MUST\
    \ treat\n   the neighbor as if communication has been lost.\n   The receiver of\
    \ a HELLO REQUEST object SHOULD also verify that the\n   neighbor is reflecting\
    \ back the receiver's Instance value.  This is\n   done by comparing the received\
    \ Dst_Instance field with the\n   Src_Instance field value most recently transmitted\
    \ to that neighbor.\n   If the neighbor continues to advertise a wrong non-zero\
    \ value after a\n   configured number of intervals, then the node MUST treat the\
    \ neighbor\n   as if communication has been lost.\n   On receipt of a message\
    \ containing a HELLO ACK object, the receiver\n   MUST verify that the neighbor\
    \ has not reset.  This is done by\n   comparing the sender's Src_Instance field\
    \ value with the previously\n   received value.  If the Neighbor_Src_Instance\
    \ value is zero, and the\n   Src_Instance field is non-zero, the Neighbor_Src_Instance\
    \ is updated\n   with the new value.  If the value differs or the Src_Instance\
    \ field\n   is zero, then the node MUST treat the neighbor as if communication\n\
    \   has been lost.\n   The receiver of a HELLO ACK object MUST also verify that\
    \ the neighbor\n   is reflecting back the receiver's Instance value.  If the neighbor\n\
    \   advertises a wrong value in the Dst_Instance field, then a node MUST\n   treat\
    \ the neighbor as if communication has been lost.\n   If no Instance values are\
    \ received, via either REQUEST or ACK\n   objects, from a neighbor within a configured\
    \ number of\n   hello_intervals, then a node MUST presume that it cannot communicate\n\
    \   with the neighbor.  The default for this number is 3.5.\n   When communication\
    \ is lost or presumed to be lost as described above,\n   a node MAY re-initiate\
    \ HELLOs.  If a node does re-initiate it MUST\n   use a Src_Instance value different\
    \ than the one advertised in the\n   previous HELLO message.  This new value MUST\
    \ continue to be\n   advertised to the corresponding neighbor until a reset or\
    \ reboot\n   occurs, or until another communication failure is detected.  If a\
    \ new\n   instance value has not been received from the neighbor, then the node\n\
    \   MUST advertise zero in the Dst_instance value field.\n"
- title: 5.4. Multi-Link Considerations
  contents:
  - "5.4. Multi-Link Considerations\n   As previously noted, the Hello extension is\
    \ targeted at detecting\n   node failures not per link failures.  When there is\
    \ only one link\n   between neighboring nodes or when all links between a pair\
    \ of nodes\n   fail, the distinction between node and link failures is not really\n\
    \   meaningful and handling of such failures has already been covered.\n   When\
    \ there are multiple links shared between neighbors, there are\n   special considerations.\
    \  When the links between neighbors are\n   numbered, then Hellos MUST be run\
    \ on each link and the previously\n   described mechanisms apply.\n   When the\
    \ links are unnumbered, link failure detection MUST be\n   provided by some means\
    \ other than Hellos.  Each node SHOULD use a\n   single Hello exchange with the\
    \ neighbor.  The case where all links\n   have failed, is the same as the no received\
    \ value case mentioned in\n   the previous section.\n"
- title: 5.5. Compatibility
  contents:
  - "5.5. Compatibility\n   The Hello extension does not affect the processing of\
    \ any other RSVP\n   message.  The only effect is to allow a link (node) down\
    \ event to be\n   declared sooner than it would have been.  RSVP response to that\n\
    \   condition is unchanged.\n   The Hello extension is fully backwards compatible.\
    \  The Hello class\n   is assigned a class value of the form 0bbbbbbb.  Depending\
    \ on the\n   implementation, implementations that do not support the extension\n\
    \   will either silently discard Hello messages or will respond with an\n   \"\
    Unknown Object Class\" error.  In either case the sender will fail to\n   see\
    \ an acknowledgment for the issued Hello.\n"
- title: 6. Security Considerations
  contents:
  - "6. Security Considerations\n   In principle these extensions to RSVP pose no\
    \ security exposures over\n   and above RFC 2205[1].  However, there is a slight\
    \ change in the\n   trust model.  Traffic sent on a normal RSVP session can be\
    \ filtered\n   according to source and destination addresses as well as port\n\
    \   numbers.  In this specification, filtering occurs only on the basis\n   of\
    \ an incoming label.  For this reason an administration may wish to\n   limit\
    \ the domain over which LSP tunnels can be established.  This can\n   be accomplished\
    \ by setting filters on various ports to deny action on\n   a RSVP path message\
    \ with a SESSION object of type LSP_TUNNEL_IPv4 (7)\n   or LSP_TUNNEL_IPv6 (8).\n"
- title: 7. IANA Considerations
  contents:
  - "7. IANA Considerations\n   IANA assigns values to RSVP protocol parameters. \
    \ Within the current\n   document an EXPLICIT_ROUTE object and a ROUTE_RECORD\
    \ object are\n   defined.  Each of these objects contain subobjects.  This section\n\
    \   defines the rules for the assignment of subobject numbers.  This\n   section\
    \ uses the terminology of BCP 26 \"Guidelines for Writing an\n   IANA Considerations\
    \ Section in RFCs\" [15].\n   EXPLICIT_ROUTE Subobject Type\n      EXPLICIT_ROUTE\
    \ Subobject Type is a 7-bit number that identifies\n      the function of the\
    \ subobject.  There are no range restrictions.\n      All possible values are\
    \ available for assignment.\n      Following the policies outlined in [15], subobject\
    \ types in the\n      range 0 - 63 (0x00 - 0x3F) are allocated through an IETF\
    \ Consensus\n      action, codes in the range 64 - 95 (0x40 - 0x5F) are allocated\
    \ as\n      First Come First Served, and codes in the range 96 - 127 (0x60 -\n\
    \      0x7F) are reserved for Private Use.\n   ROUTE_RECORD Subobject Type\n \
    \     ROUTE_RECORD Subobject Type is an 8-bit number that identifies the\n   \
    \   function of the subobject.  There are no range restrictions.  All\n      possible\
    \ values are available for assignment.\n      Following the policies outlined\
    \ in [15], subobject types in the\n      range 0 - 127 (0x00 - 0x7F) are allocated\
    \ through an IETF\n      Consensus action, codes in the range 128 - 191 (0x80\
    \ - 0xBF) are\n      allocated as First Come First Served, and codes in the range\
    \ 192 -\n      255 (0xC0 - 0xFF) are reserved for Private Use.\n      The following\
    \ assignments are made in this document.\n"
- title: 7.1. Message Types
  contents:
  - "7.1. Message Types\n   Message Message\n   Number  Name\n     20    Hello\n"
- title: 7.2. Class Numbers and C-Types
  contents:
  - "7.2. Class Numbers and C-Types\n   Class   Class\n   Number  Name\n     1   \
    \  SESSION\n           Class Types or C-Types:\n                  7       LSP\
    \ Tunnel IPv4\n                  8       LSP Tunnel IPv6\n     10    FILTER_SPEC\n\
    \           Class Types or C-Types:\n                  7       LSP Tunnel IPv4\n\
    \                  8       LSP Tunnel IPv6\n     11    SENDER_TEMPLATE\n     \
    \      Class Types or C-Types:\n                  7       LSP Tunnel IPv4\n  \
    \                8       LSP Tunnel IPv6\n     16    RSVP_LABEL\n           Class\
    \ Types or C-Types:\n                  1       Type 1 Label\n     19    LABEL_REQUEST\n\
    \           Class Types or C-Types:\n                  1       Without Label Range\n\
    \                  2       With ATM Label Range\n                  3       With\
    \ Frame Relay Label Range\n     20    EXPLICIT_ROUTE\n           Class Types or\
    \ C-Types:\n                  1       Type 1 Explicit Route\n     21    ROUTE_RECORD\n\
    \           Class Types or C-Types:\n                  1       Type 1 Route Record\n\
    \     22    HELLO\n           Class Types or C-Types:\n                  1   \
    \    Request\n                  2       Acknowledgment\n    207    SESSION_ATTRIBUTE\n\
    \           Class Types or C-Types:\n                  1       LSP_TUNNEL_RA\n\
    \                  7       LSP Tunnel\n"
- title: 7.3. Error Codes and Globally-Defined Error Value Sub-Codes
  contents:
  - "7.3. Error Codes and Globally-Defined Error Value Sub-Codes\n   The following\
    \ list extends the basic list of Error Codes and Values\n   that are defined in\
    \ [RFC2205].\n   Error Code    Meaning\n     24          Routing Problem\n   \
    \              This Error Code has the following globally-defined\n          \
    \       Error Value sub-codes:\n                  1       Bad EXPLICIT_ROUTE object\n\
    \                  2       Bad strict node\n                  3       Bad loose\
    \ node\n                  4       Bad initial subobject\n                  5 \
    \      No route available toward\n                           destination\n   \
    \               6       Unacceptable label value\n                  7       RRO\
    \ indicated routing loops\n                  8       MPLS being negotiated, but\
    \ a\n                          non-RSVP-capable router stands\n              \
    \              in the path\n                  9       MPLS label allocation failure\n\
    \                 10       Unsupported L3PID\n     25          Notify Error\n\
    \                This Error Code has the following globally-defined\n        \
    \        Error Value sub-codes:\n                  1       RRO too large for MTU\n\
    \                  2       RRO Notification\n                  3       Tunnel\
    \ locally repaired\n"
- title: 7.4. Subobject Definitions
  contents:
  - "7.4. Subobject Definitions\n   Subobjects of the EXPLICIT_ROUTE object with C-Type\
    \ 1:\n          1       IPv4 prefix\n          2       IPv6 prefix\n         32\
    \       Autonomous system number\n   Subobjects of the RECORD_ROUTE object with\
    \ C-Type 1:\n          1       IPv4 address\n          2       IPv6 address\n\
    \          3       Label\n"
- title: 8. Intellectual Property Considerations
  contents:
  - "8. Intellectual Property Considerations\n   The IETF has been notified of intellectual\
    \ property rights claimed in\n   regard to some or all of the specification contained\
    \ in this\n   document.  For more information consult the online list of claimed\n\
    \   rights.\n"
- title: 9. Acknowledgments
  contents:
  - "9. Acknowledgments\n   This document contains ideas as well as text that have\
    \ appeared in\n   previous Internet Drafts.  The authors of the current document\
    \ wish\n   to thank the authors of those drafts.  They are Steven Blake, Bruce\n\
    \   Davie, Roch Guerin, Sanjay Kamat, Yakov Rekhter, Eric Rosen, and Arun\n  \
    \ Viswanathan.  We also wish to thank Bora Akyol, Yoram Bernet and Alex\n   Mondrus\
    \ for their comments on this document.\n"
- title: 10. References
  contents:
  - "10. References\n   [1]  Braden, R., Zhang, L., Berson, S., Herzog, S. and S.\
    \ Jamin,\n        \"Resource ReSerVation Protocol (RSVP) -- Version 1, Functional\n\
    \        Specification\", RFC 2205, September 1997.\n   [2]  Rosen, E., Viswanathan,\
    \ A. and R. Callon, \"Multiprotocol Label\n        Switching Architecture\", RFC\
    \ 3031, January 2001.\n   [3]  Awduche, D., Malcolm, J., Agogbua, J., O'Dell and\
    \ J. McManus,\n        \"Requirements for Traffic Engineering over MPLS\", RFC\
    \ 2702,\n        September 1999.\n   [4]  Wroclawski, J., \"Specification of the\
    \ Controlled-Load Network\n        Element Service\", RFC 2211, September 1997.\n\
    \   [5]  Rosen, E., Tappan, D., Fedorkow, G., Rekhter, Y., Farinacci, D.,\n  \
    \      Li, T. and A. Conta, \"MPLS Label Stack Encoding\", RFC 3032,\n       \
    \ January 2001.\n   [6]  Bradner, S., \"Key words for use in RFCs to Indicate\
    \ Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n   [7]  Almquist,\
    \ P., \"Type of Service in the Internet Protocol Suite\",\n        RFC 1349, July\
    \ 1992.\n   [8]  Nichols, K., Blake, S., Baker, F. and D. Black, \"Definition\
    \ of\n        the Differentiated Services Field (DS Field) in the IPv4 and\n \
    \       IPv6 Headers\", RFC 2474, December 1998.\n   [9]  Herzog, S., \"Signaled\
    \ Preemption Priority Policy Element\", RFC\n        2751, January 2000.\n   [10]\
    \ Awduche, D., Hannan, A. and X. Xiao, \"Applicability Statement\n        for\
    \ Extensions to RSVP for LSP-Tunnels\", RFC 3210, December\n        2001.\n  \
    \ [11] Wroclawski, J., \"The Use of RSVP with IETF Integrated Services\",\n  \
    \      RFC 2210, September 1997.\n   [12] Postel, J., \"Internet Control Message\
    \ Protocol\", STD 5, RFC 792,\n        September 1981.\n   [13] Mogul, J. and\
    \ S. Deering, \"Path MTU Discovery\", RFC 1191,\n        November 1990.\n   [14]\
    \ Conta, A. and S. Deering, \"Internet Control Message Protocol\n        (ICMPv6)\
    \ for the Internet Protocol Version 6 (IPv6)\", RFC 2463,\n        December 1998.\n\
    \   [15] Narten, T. and H. Alvestrand, \"Guidelines for Writing an IANA\n    \
    \    Considerations Section in RFCs\", BCP 26, RFC 2434, October 1998.\n   [16]\
    \ Bernet, Y., Smiht, A. and B. Davie, \"Specification of the Null\n        Service\
    \ Type\", RFC 2997, November 2000.\n"
- title: 11. Authors' Addresses
  contents:
  - "11. Authors' Addresses\n   Daniel O. Awduche\n   Movaz Networks, Inc.\n   7926\
    \ Jones Branch Drive, Suite 615\n   McLean, VA 22102\n   Voice: +1 703-298-5291\n\
    \   EMail: awduche@movaz.com\n   Lou Berger\n   Movaz Networks, Inc.\n   7926\
    \ Jones Branch Drive, Suite 615\n   McLean, VA 22102\n   Voice: +1 703 847 1801\n\
    \   EMail: lberger@movaz.com\n   Der-Hwa Gan\n   Juniper Networks, Inc.\n   385\
    \ Ravendale Drive\n   Mountain View, CA 94043\n   EMail: dhg@juniper.net\n   Tony\
    \ Li\n   Procket Networks\n   3910 Freedom Circle, Ste. 102A\n   Santa Clara CA\
    \ 95054\n   EMail: tli@procket.com\n   Vijay Srinivasan\n   Cosine Communications,\
    \ Inc.\n   1200 Bridge Parkway\n   Redwood City, CA 94065\n   Voice: +1 650 628\
    \ 4892\n   EMail: vsriniva@cosinecom.com\n   George Swallow\n   Cisco Systems,\
    \ Inc.\n   250 Apollo Drive\n   Chelmsford, MA 01824\n   Voice: +1 978 244 8143\n\
    \   EMail: swallow@cisco.com\n"
- title: 12.  Full Copyright Statement
  contents:
  - "12.  Full Copyright Statement\n   Copyright (C) The Internet Society (2001).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
