- contents:
  - ''
  - "See Also: 959                                                     R. Elz\n      Feature
    negotiation mechanism for the File Transfer Protocol\n"
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Abstract\n   The File Transfer Protocol is, from time to time, extended with
    new\n   commands, or facilities.  Implementations of the FTP protocol cannot\n
    \  be assumed to all immediately implement all newly defined mechanisms.\n   This
    document provides a mechanism by which clients of the FTP\n   protocol can discover
    which new features are supported by a\n   particular FTP server.\n"
  title: Abstract
- contents:
  - "Table of Contents\n          Abstract  ................................................
    \  1\n    1     Introduction  ............................................   2\n
    \   2     Document Conventions  ....................................   2\n    2.1
    \  Basic Tokens  ............................................   3\n    2.2   Server
    Replies  ..........................................   3\n    3     Knowledge of
    Extra Capabilities - the FEAT Command  ......   3\n    3.1   Feature (FEAT) Command
    Syntax  ...........................   4\n    3.2   FEAT Command Responses  ..................................
    \  4\n    3.3   Rationale for FEAT  ......................................   6\n
    \   4     The OPTS Command  ........................................   6\n    5
    \    Security Considerations  .................................   7\n    6     References
    \ ..............................................   8\n          Acknowledgements
    \ ........................................   8\n          Editors' Addresses  ......................................
    \  8\n          Full Copyright Statement  ................................   9\n"
  title: Table of Contents
- contents:
  - "1. Introduction\n   This document amends the File Transfer Protocol (FTP) [1].
    \ Two new\n   commands are added: \"FEAT\" and \"OPTS\".\n   These commands allow
    a client to discover which optional commands a\n   server supports, and how they
    are supported, and to select among\n   various options that any FTP command may
    support.\n"
  title: 1. Introduction
- contents:
  - "2. Document Conventions\n   This document makes use of the document conventions
    defined in BCP14\n   [2].  That provides the interpretation of some capitalized
    words like\n   MUST, SHOULD, etc.\n   Terms defined in [1] will be used here as
    defined there.  These\n   include ASCII, reply, server-FTP process, user-FTP process,
    server-\n   PI, user-PI, and user.\n   Syntax required is defined using the Augmented
    BNF defined in [3].\n   Some general ABNF definitions are required throughout
    the document,\n   those will be defined here.  At first reading, it may be wise
    to\n   simply recall that these definitions exist here, and skip to the next\n
    \  section.\n"
  title: 2. Document Conventions
- contents:
  - "2.1. Basic Tokens\n   This document imports the definitions given in Appendix
    A of [3].\n   There definitions will be found for basic ABNF elements like ALPHA,\n
    \  DIGIT, VCHAR, SP, etc.  To that, the following terms are added for\n   use
    in this document.\n        TCHAR          = VCHAR / SP / HTAB    ; visible plus
    white space\n   The TCHAR type, and VCHAR from [3], give basic character types
    from\n   varying sub-sets of the ASCII character set for use in various\n   commands
    and responses.\n        error-response = error-code SP *TCHAR CRLF\n        error-code
    \    = (\"4\" / \"5\") 2DIGIT\n   Note that in ABNF, strings literals are case
    insensitive.  That\n   convention is preserved in this document.  However note
    that ALPHA,\n   in particular, is case sensitive, as are VCHAR and TCHAR.\n"
  title: 2.1. Basic Tokens
- contents:
  - "2.2. Server Replies\n   Section 4.2 of [1] defines the format and meaning of
    replies by the\n   server-PI to FTP commands from the user-PI.  Those reply conventions\n
    \  are used here without change.  Implementors should note that the ABNF\n   syntax
    (which was not used in [1]) in this document, and other FTP\n   related documents,
    sometimes shows replies using the one line format.\n   Unless otherwise explicitly
    stated, that is not intended to imply\n   that multi-line responses are not permitted.
    \ Implementors should\n   assume that, unless stated to the contrary, any reply
    to any FTP\n   command (including QUIT) may be of the multiline format described
    in\n   [1].\n   Throughout this document, replies will be identified by the three\n
    \  digit code that is their first element.  Thus the term \"500 Reply\"\n   means
    a reply from the server-PI using the three digit code \"500\".\n"
  title: 2.2. Server Replies
- contents:
  - "3. Knowledge of Extra Capabilities - the FEAT Command\n   It is not to be expected
    that all servers will necessarily support\n   all of the new commands defined
    in all future amendments to the FTP\n   protocol.  In order to permit clients
    to determine which new commands\n   are supported by a particular server, without
    trying each possible\n   command, one new command is added to the FTP command
    repertoire.\n   This command requests the server to list all extension commands,
    or\n   extended mechanisms, that it supports.  That is, all defined and\n   specified
    commands and features not defined in [1], or this document,\n   must be included
    in the FEAT command output in the form specified in\n   the document that defines
    the extension.\n   User-FTP PIs must expect to see, in FEAT command responses,
    unknown\n   features listed.  This is not an error, and simply indicates that
    the\n   server-FTP implementor has seen, and implemented, the specification\n
    \  of a new feature that is unknown to the user-FTP.\n"
  title: 3. Knowledge of Extra Capabilities - the FEAT Command
- contents:
  - "3.1. Feature (FEAT) Command Syntax\n        feat            = \"Feat\" CRLF\n
    \  The FEAT command consists solely of the word \"FEAT\".  It has no\n   parameters
    or arguments.\n"
  title: 3.1. Feature (FEAT) Command Syntax
- contents:
  - "3.2. FEAT Command Responses\n   Where a server-FTP process does not support the
    FEAT command, it will\n   respond to the FEAT command with a 500 or 502 reply.
    \ This is simply\n   the normal \"unrecognized command\" reply that any unknown
    command\n   would elicit.  Errors in the command syntax, such as giving\n   parameters,
    will result in a 501 reply.\n   Server-FTP processes that recognize the FEAT command,
    but implement\n   no extended features, and therefore have nothing to report,
    SHOULD\n   respond with the \"no-features\" 211 reply.  However, as this case
    is\n   practically indistinguishable from a server-FTP that does not\n   recognize
    the FEAT command, a 500 or 502 reply MAY also be used.  The\n   \"no-features\"
    reply MUST NOT use the multi-line response format,\n   exactly one response line
    is required and permitted.\n   Replies to the FEAT command MUST comply with the
    following syntax.\n   Text on the first line of the reply is free form, and not\n
    \  interpreted, and has no practical use, as this text is not expected\n   to
    be revealed to end users.  The syntax of other reply lines is\n   precisely defined,
    and if present, MUST be exactly as specified.\n        feat-response   = error-response
    / no-features / feature-listing\n        no-features     = \"211\" SP *TCHAR CRLF\n
    \       feature-listing = \"211-\" *TCHAR CRLF\n                          1*(
    SP feature CRLF )\n                          \"211 End\" CRLF\n        feature
    \        = feature-label [ SP feature-parms ]\n        feature-label   = 1*VCHAR\n
    \       feature-parms   = 1*TCHAR\n   Note that each feature line in the feature-listing
    begins with a\n   single space.  That space is not optional, nor does it indicate\n
    \  general white space.  This space guarantees that the feature line can\n   never
    be misinterpreted as the end of the feature-listing, but is\n   required even
    where there is no possibility of ambiguity.\n   Each extension supported must
    be listed on a separate line to\n   facilitate the possible inclusion of parameters
    supported by each\n   extension command.  The feature-label to be used in the
    response to\n   the FEAT command will be specified as each new feature is added
    to\n   the FTP command set.  Often it will be the name of a new command\n   added,
    however this is not required.  In fact it is not required that\n   a new feature
    actually add a new command.  Any parameters included\n   are to be specified with
    the definition of the command concerned.\n   That specification shall also specify
    how any parameters present are\n   to be interpreted.\n   The feature-label and
    feature-parms are nominally case sensitive,\n   however the definitions of specific
    labels and parameters specify the\n   precise interpretation, and it is to be
    expected that those\n   definitions will usually specify the label and parameters
    in a case\n   independent manner.  Where this is done, implementations are\n   recommended
    to use upper case letters when transmitting the feature\n   response.\n   The
    FEAT command itself is not included in the list of features\n   supported, support
    for the FEAT command is indicated by return of a\n   reply other than a 500 or
    502 reply.\n   A typical example reply to the FEAT command might be a multiline\n
    \  reply of the form:\n        C> feat\n        S> 211-Extensions supported:\n
    \       S>  MLST size*;create;modify*;perm;media-type\n        S>  SIZE\n        S>
    \ COMPRESSION\n        S>  MDTM\n        S> 211 END\n   The particular extensions
    shown here are simply examples of what may\n   be defined in other places, no
    particular meaning should be\n   attributed to them.  Recall also, that the feature
    names returned are\n   not command names, as such, but simply indications that
    the server\n   possesses some attribute or other.\n   The order in which the features
    are returned is of no importance,\n   server-FTP processes are not required to
    implement any particular\n   order, or even to consistently return the same order
    when the command\n   is repeated.\n   FTP implementations which support FEAT MUST
    include in the response\n   to the FEAT command all properly documented FTP extensions
    beyond\n   those commands and mechanisms described in RFC959 [1], including any\n
    \  which existed before the existence of FEAT.  That is, when a client\n   receives
    a FEAT response from an FTP server, it can assume that the\n   only extensions
    the server supports are those that are listed in the\n   FEAT response.\n   User-FTP
    processes should, however, be aware that there have been\n   several FTP extensions
    developed, and in widespread use, prior to the\n   adoption of this document and
    the FEAT command.  The effect of this\n   is that an error response to the FEAT
    command does not necessarily\n   imply that those extensions are not supported
    by the server-FTP\n   process.  User-PIs should test for such extensions individually
    if an\n   error response has been received to the FEAT command.\n"
  title: 3.2. FEAT Command Responses
- contents:
  - "3.3. Rationale for FEAT\n   While not absolutely necessary, a standard mechanism
    for the server-\n   PI to inform the user-PI of any features and extensions supported\n
    \  will help reduce unnecessary traffic between the user-PI and server-\n   PI
    as more extensions may be introduced in the future.  If no\n   mechanism existed
    for this, a user-FTP process would have to try each\n   extension in turn resulting
    in a series of exchanges between the\n   user-PI and server-PI.  Apart from being
    possibly wasteful, this\n   procedure may not always be possible, as issuing of
    a command just to\n   determine if it is supported or not may have some effect
    that is not\n   desired.\n"
  title: 3.3. Rationale for FEAT
- contents:
  - "4. The OPTS Command\n   The OPTS (options) command allows a user-PI to specify
    the desired\n   behavior of a server-FTP process when another FTP command (the
    target\n   command) is later issued.  The exact behavior, and syntax, will vary\n
    \  with the target command indicated, and will be specified with the\n   definition
    of that command.  Where no OPTS behavior is defined for a\n   particular command
    there are no options available for that command.\n   Request Syntax:\n        opts
    \            = opts-cmd SP command-name\n                               [ SP command-options
    ] CRLF\n        opts-cmd         = \"opts\"\n        command-name     = <any FTP
    command which allows option setting>\n        command-options  = <format specified
    by individual FTP command>\n   Response Syntax:\n        opts-response    = opts-good
    / opts-bad\n        opts-good        = \"200\" SP response-message CRLF\n        opts-bad
    \        = \"451\" SP response-message CRLF /\n                           \"501\"
    SP response-message CRLF\n        response-message = *TCHAR\n   An \"opts-good\"
    response (200 reply) MUST be sent when the command-\n   name specified in the
    OPTS command is recognized, and the command-\n   options, if any, are recognized,
    and appropriate.  An \"opts-bad\"\n   response is sent in other cases.  A 501
    reply is appropriate for any\n   permanent error.  That is, for any case where
    simply repeating the\n   command at some later time, without other changes of
    state, will also\n   be an error.  A 451 reply should be sent where some temporary\n
    \  condition at the server, not related to the state of communications\n   between
    user and server, prevents the command being accepted when\n   issued, but where
    if repeated at some later time, a changed\n   environment for the server-FTP process
    may permit the command to\n   succeed.  If the OPTS command itself is not recognized,
    a 500 or 502\n   reply will, of course, result.\n   The OPTS command MUST be implemented
    whenever the FEAT command is\n   implemented.  Because of that, there is no indication
    in the list of\n   features returned by FEAT to indicate that the OPTS command
    itself is\n   supported.  Neither the FEAT command, nor the OPTS command, have
    any\n   optional functionality, thus there are no \"OPTS FEAT\" or \"OPTS OPTS\"\n
    \  commands.\n"
  title: 4. The OPTS Command
- contents:
  - "5. Security Considerations\n   No significant new security issues, not already
    present in the FTP\n   protocol, are believed to have been created by this extension.\n
    \  However, this extension does provide a mechanism by which users can\n   determine
    the capabilities of an FTP server, and from which\n   additional information may
    be able to be deduced.  While the same\n   basic information could be obtained
    by probing the server for the\n   various commands, if the FEAT command were not
    provided, that method\n   may reveal an attacker by logging the attempts to access
    various\n   extension commands.  This possibility is not considered a serious\n
    \  enough threat to be worthy of any remedial action.\n   The security of any
    additional features that might be reported by the\n   FEAT command, and manipulated
    by the OPTS command, should be\n   addressed where those features are defined.\n"
  title: 5. Security Considerations
- contents:
  - "6. References\n   [1]  Postel, J. and J. Reynolds, \"File Transfer Protocol (FTP)\",\n
    \       STD 9, RFC 959, October 1985.\n   [2]  Bradner, S., \"Key words for use
    in RFCs to Indicate\n        Requirement Levels\", BCP 14, RFC 2119, March 1997.\n
    \  [3]  Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n        Specifications:
    ABNF\", RFC 2234, November 1997.\n"
  title: 6. References
- contents:
  - "Acknowledgements\n   This protocol extension was developed in the FTPEXT Working
    Group of\n   the IETF, and the members of that group are all acknowledged as its\n
    \  creators.\n"
  title: Acknowledgements
- contents:
  - "Editors' Addresses\n   Paul Hethmon\n   Hethmon Brothers\n   2305 Chukar Road\n
    \  Knoxville, TN 37923 USA\n   Phone: +1 423 690 8990\n   Email: phethmon@hethmon.com\n
    \  Robert Elz\n   University of Melbourne\n   Department of Computer Science\n
    \  Parkville, Vic   3052\n   Australia\n   Email: kre@munnari.OZ.AU\n"
  title: Editors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1998).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
